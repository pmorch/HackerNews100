<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 21 Jul 2023 13:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[I have written a JVM in Rust (202 pts)]]></title>
            <link>https://andreabergia.com/blog/2023/07/i-have-written-a-jvm-in-rust/</link>
            <guid>36811554</guid>
            <pubDate>Fri, 21 Jul 2023 08:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://andreabergia.com/blog/2023/07/i-have-written-a-jvm-in-rust/">https://andreabergia.com/blog/2023/07/i-have-written-a-jvm-in-rust/</a>, See on <a href="https://news.ycombinator.com/item?id=36811554">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
  <article>
    <header>
      

      <div>
        <p>
          Published Wednesday, Jul 12, 2023
          -
          2164 words, 11 minutes
        </p>

        
      </div>
    </header>

    <p>Lately I‚Äôve been spending quite a bit of time learning Rust, and as any sane person would do, after writing a few 100 lines programs I‚Äôve decided to take on something <em>a little bit</em> more ambitious: I have written a Java Virtual Machine in Rust. üéâ With a lot of originality, I have called it <code>rjvm</code>. The code is available <a href="https://github.com/andreabergia/rjvm">on GitHub</a>.</p>
<p>I want to stress that this is a toy JVM, built for learning purposes and not a serious implementation. In particular, it does not support:</p>
<ul>
<li>generics</li>
<li>threads</li>
<li>reflection</li>
<li>annotations</li>
<li>I/O</li>
<li>just in time compiler</li>
<li>string interning</li>
</ul>
<p>However, there are quite a few non-trivial things implemented:</p>
<ul>
<li>control flow statements (<code>if, for, ...</code>)</li>
<li>primitive and object creations</li>
<li>virtual and static method invocation</li>
<li>exceptions</li>
<li>garbage collection</li>
<li>class resolution from a <code>jar</code> file</li>
</ul>
<p>For example, the following is part of the test suite:</p>
<div><pre><code data-lang="java"><span>class</span> <span>StackTracePrinting</span> <span>{</span>
    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span>String<span>[]</span> args<span>)</span> <span>{</span>
        Throwable ex <span>=</span> <span>new</span> Exception<span>();</span>
        StackTraceElement<span>[]</span> stackTrace <span>=</span> ex<span>.</span><span>getStackTrace</span><span>();</span>
        <span>for</span> <span>(</span>StackTraceElement element <span>:</span> stackTrace<span>)</span> <span>{</span>
            tempPrint<span>(</span>
                    element<span>.</span><span>getClassName</span><span>()</span> <span>+</span> <span>"::"</span> <span>+</span> element<span>.</span><span>getMethodName</span><span>()</span> <span>+</span> <span>" - "</span> <span>+</span>
                            element<span>.</span><span>getFileName</span><span>()</span> <span>+</span> <span>":"</span> <span>+</span> element<span>.</span><span>getLineNumber</span><span>());</span>
        <span>}</span>
    <span>}</span>

    <span>// We use this in place of System.out.println because we don't have real I/O
</span><span></span>    <span>private</span> <span>static</span> <span>native</span> <span>void</span> <span>tempPrint</span><span>(</span>String value<span>);</span>
<span>}</span>
</code></pre></div><p>It uses the real <code>rt.jar</code> containing the classes from the <a href="https://openjdk.org/projects/jdk7/">OpenJDK 7</a> - thus, in the example above, the <code>java.lang.StackTraceElement</code> class comes from a real JDK!</p>
<p>I am very happy with what I have learned, about Rust and about how to implement a virtual machine. In particular, I am <em>super</em> happy about having implemented a real, working, garbage collector. It‚Äôs quite mediocre, but it‚Äôs mine and I love it. üíò Given that I have achieved what I set out to do originally, I have decided to stop the project here. I know there are bugs, but I do not plan to fix them.</p>
<h2 id="overview">
  Overview
  <a href="#overview">
    
  </a>
</h2>
<p>In this post, I will give you an overview of how my JVM works. In further articles, I will go into more detail about some of the aspects discussed here.</p>
<h2 id="code-organization">
  Code organization
  <a href="#code-organization">
    
  </a>
</h2>
<p>The code is a standard Rust project. I have split it into three crates (i.e. packages):</p>
<ul>
<li><code>reader</code>, which is able to read <code>.class</code> files and contains various types that model their content;</li>
<li><code>vm</code>, which contains the virtual machine that can execute the code as a library;</li>
<li><code>vm_cli</code>, which contains a very simple command-line launcher to run the VM, in the spirit of the <code>java</code> executable.</li>
</ul>
<p>I‚Äôm considering extracting the <code>reader</code> crate in a separate repository and publishing it on <a href="https://crates.io/">crates.io</a>, since it could actually be useful to someone else.</p>
<h2 id="parsing-a-class-file">
  Parsing a <code>.class</code> file
  <a href="#parsing-a-class-file">
    
  </a>
</h2>
<p>As you know, Java is a compiled language - the <code>javac</code> compiler takes your <code>.java</code> source files and produces various <code>.class</code> files, generally distributed in a <code>.jar</code> file - which is just a <code>zip</code>. Thus, the first thing to do to execute some Java code is to load a <code>.class</code> file, containing the bytecode generated by the compiler. A class file contains various things:</p>
<ul>
<li>metadata about the class, such as its name or the source file name</li>
<li>the superclass name</li>
<li>the implemented interfaces</li>
<li>the fields, along with their types and annotations</li>
<li>and the methods with:
<ul>
<li>their descriptor, which is a string representing the type of each parameter and the method‚Äôs return type</li>
<li>metadata such as the <code>throws</code> clause, annotation, generics information</li>
<li>and the bytecode, along with some extra metadata such as the exception handler table and the line numbers table.</li>
</ul>
</li>
</ul>
<p>As mentioned above, for <code>rjvm</code> I have created a separate crate, named <code>reader</code>, which can parse a class file and return a <a href="https://github.com/andreabergia/rjvm/blob/main/reader/src/class_file.rs">Rust struct</a> that models a class and all its content.</p>
<h2 id="executing-methods">
  Executing methods
  <a href="#executing-methods">
    
  </a>
</h2>
<p>The main API of the <code>vm</code> crate is <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/vm.rs#L164"><code>Vm::invoke</code></a>, which is used to execute a method. It takes a <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_stack.rs"><code>CallStack</code></a>, which will contain the various <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_frame.rs#L58"><code>CallFrame</code></a>, one for each method being executed. For executing <code>main</code>, the call stack will initially be empty, and a new frame will be created to run it. Then, each function invocation will add a new frame to the call stack. When a method‚Äôs execution completes, its corresponding frame will be dropped and removed from the call stack.</p>
<p>Most methods will be implemented in Java, and thus their bytecode will be executed. However, <code>rjvm</code> also supports <em>native</em> methods, i.e. methods that are implemented directly by the JVM and not in the Java bytecode. There are quite a few of them in the ‚Äúlower parts‚Äù of the Java API, where interaction with the operating system (for example, to do I/O) or the support runtime is necessary. Some examples of the latter you might have seen include <code>System::currentTimeMillis</code>, <code>System::arraycopy</code>, or <code>Throwable::fillInStackTrace</code>. In <code>rjvm</code>, these are implemented by <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/native_methods_impl.rs">Rust functions</a>.</p>
<p>The JVM is a <a href="https://andreabergia.com/blog/2015/03/stack-based-virtual-machines-1/">stack-based virtual machine</a>, i.e. the bytecode instructions operate mainly on a value stack. There is also a set of local variables, identified by an index, that can be used to store values and pass arguments to methods. These are associated with each call frame in <code>rjvm</code>.</p>
<h2 id="modeling-values-and-objects">
  Modeling values and objects
  <a href="#modeling-values-and-objects">
    
  </a>
</h2>
<p>The type <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/value.rs"><code>Value</code></a> models a possible value of a local variable, stack element, or object‚Äôs field, and is implemented as follows:</p>
<div><pre><code data-lang="rust"><span>/// Models a generic value that can be stored in a local variable or on the stack.
</span><span></span><span>#[derive(Debug, Default, Clone, PartialEq)]</span>
<span>pub</span> <span>enum</span> <span>Value</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
    <span>/// An unitialized element. Should never be on the stack,
</span><span></span>    <span>/// but it is the default state for local variables.
</span><span></span>    <span>#[default]</span>
    Uninitialized,

    <span>/// Models all the 32-or-lower-bits types in the jvm: `boolean`,
</span><span></span>    <span>/// `byte`, `char`, `short`, and `int`.
</span><span></span>    Int(<span>i32</span>),

    <span>/// Models a `long` value.
</span><span></span>    Long(<span>i64</span>),

    <span>/// Models a `float` value.
</span><span></span>    Float(<span>f32</span>),

    <span>/// Models a `double` value.
</span><span></span>    Double(<span>f64</span>),

    <span>/// Models an object value
</span><span></span>    Object(AbstractObject<span>&lt;</span><span>'a</span><span>&gt;</span>),

    <span>/// Models a null object
</span><span></span>    Null,
}
</code></pre></div><p>As an aside, this is one place where a sum type, such as Rust‚Äôs <code>enum</code>, is a wonderful abstraction - it is great for expressing the fact that a value might be of multiple different types.</p>
<p>For storing objects and their values, I initially used a simple struct called <code>Object</code> containing a reference to the class (to model the object‚Äôs type) and a <code>Vec&lt;Value&gt;</code> for storing fields' values. However, when I implemented the garbage collector, I modified this to use a lower-level implementation, with a ton of pointers and casts - quite C style! In the current implementation, an <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/abstract_object.rs"><code>AbstractObject</code></a> (which models a ‚Äúreal‚Äù object, or an array) is simply a pointer to an array of bytes, which contain a couple of header words and then the fields' values.</p>
<h2 id="executing-instructions">
  Executing instructions
  <a href="#executing-instructions">
    
  </a>
</h2>
<p>Executing a method means executing its bytecode instructions, one at a time. The JVM has a wide list of instructions (over two hundred!), encoded by one byte in the bytecode. Many instructions are followed by arguments, and some have a variable length. This is modeled in the code by the type <a href="https://github.com/andreabergia/rjvm/blob/main/reader/src/instruction.rs"><code>Instruction</code></a>:</p>
<div><pre><code data-lang="rust"><span>/// Represents a Java bytecode instruction.
</span><span></span><span>#[derive(Clone, Copy, Debug, Eq, PartialEq)]</span>
<span>pub</span> <span>enum</span> <span>Instruction</span> {
    Aaload,
    Aastore,
    Aconst_null,
    Aload(<span>u8</span>),
    <span>// ...
</span></code></pre></div><p>The execution of a method will keep, as mentioned above, a stack and an array of local variables, referred by the instructions via their index. It will also initialize the program counter to zero - that is, the address of the next instruction to execute. The instruction will be processed and the program counter updated - generally advanced by one, but various jump instructions can move it to a different location. These are used to implement all flow control statements, such as <code>if</code>, <code>for</code>, or <code>while</code>.</p>
<p>A special family of instruction is made of those that can invoke another method. There are various ways of resolving <em>which</em> method should be invoked: virtual or static lookup are the main ones, but there are others. After resolving the correct instruction, <code>rjvm</code> will add a new frame to the call stack and start the method‚Äôs execution. The method‚Äôs return value will be pushed to the stack unless it is <code>void</code>, and execution will resume.</p>
<p>The Java bytecode format is quite interesting and I plan to dedicate a post to the various kind of instructions.</p>
<h2 id="exceptions">
  Exceptions
  <a href="#exceptions">
    
  </a>
</h2>
<p>Exceptions are quite a complex beast to implement since they break the normal control flow, and might return early from a method (and propagate on the call stack!). I am pretty happy with the way I have implemented them, though, and I am going to show you some of the relevant code.</p>
<p>The first thing you need to know is that any <code>catch</code> block corresponds to an entry of a method‚Äôs exception table - each entry contains the range of covered program counters, the address for the first instruction in the catch block, and the exception‚Äôs class name which the block catches.</p>
<p>Next, the signature of <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_frame.rs#L349"><code>CallFrame::execute_instruction</code></a> is as follows:</p>
<div><pre><code data-lang="rust"><span>fn</span> <span>execute_instruction</span>(
    <span>&amp;</span><span>mut</span> self,
    vm: <span>&amp;</span><span>mut</span> Vm<span>&lt;</span><span>'a</span><span>&gt;</span>,
    call_stack: <span>&amp;</span><span>mut</span> CallStack<span>&lt;</span><span>'a</span><span>&gt;</span>,
    instruction: <span>Instruction</span>,
) -&gt; Result<span>&lt;</span>InstructionCompleted<span>&lt;</span><span>'a</span><span>&gt;</span>, MethodCallFailed<span>&lt;</span><span>'a</span><span>&gt;&gt;</span>
</code></pre></div><p>Where the types are:</p>
<div><pre><code data-lang="rust"><span>/// Possible execution result of an instruction
</span><span></span><span>enum</span> <span>InstructionCompleted</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
    <span>/// Indicates that the instruction executed was one of the return family. The caller
</span><span></span>    <span>/// should stop the method execution and return the value.
</span><span></span>    ReturnFromMethod(Option<span>&lt;</span>Value<span>&lt;</span><span>'a</span><span>&gt;&gt;</span>),

    <span>/// Indicates that the instruction was not a return, and thus the execution should
</span><span></span>    <span>/// resume from the instruction at the program counter.
</span><span></span>    ContinueMethodExecution,
}

<span>/// Models the fact that a method execution has failed
</span><span></span><span>pub</span> <span>enum</span> <span>MethodCallFailed</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
    InternalError(VmError),
    ExceptionThrown(JavaException<span>&lt;</span><span>'a</span><span>&gt;</span>),
}
</code></pre></div><p>and the standard Rust <code>Result</code> type is:</p>
<div><pre><code data-lang="rust"><span>enum</span> Result<span>&lt;</span>T, E<span>&gt;</span> {
   Ok(T),
   Err(E),
}
</code></pre></div><p>Thus, executing an instruction can result in four possible states:</p>
<ul>
<li>the instruction was executed successfully, and the execution of the current method can continue (the standard case);</li>
<li>the instruction was executed successfully, and it was a return instruction, thus the current method should return with (optionally) a return value;</li>
<li>the instruction could not be executed, because some internal VM error happened;</li>
<li>or the instruction could not be executed, because a standard Java exception was thrown.</li>
</ul>
<p>The code that <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_frame.rs#L298">executes a method</a> is thus as follows:</p>
<div><pre><code data-lang="rust"><span>/// Executes the whole method
</span><span></span><span>impl</span><span>&lt;</span><span>'a</span><span>&gt;</span> CallFrame<span>&lt;</span><span>'a</span><span>&gt;</span> {
    <span>pub</span> <span>fn</span> <span>execute</span>(
        <span>&amp;</span><span>mut</span> self,
        vm: <span>&amp;</span><span>mut</span> Vm<span>&lt;</span><span>'a</span><span>&gt;</span>,
        call_stack: <span>&amp;</span><span>mut</span> CallStack<span>&lt;</span><span>'a</span><span>&gt;</span>,
    ) -&gt; <span>MethodCallResult</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
        self.debug_start_execution();

        <span>loop</span> {
            <span>let</span> executed_instruction_pc <span>=</span> self.pc;
            <span>let</span> (instruction, new_address) <span>=</span>
                Instruction::parse(
                    self.code, 
                    executed_instruction_pc.<span>0.</span>into_usize_safe()
                ).map_err(<span>|</span>_<span>|</span> MethodCallFailed::InternalError(
                    VmError::ValidationException)
                )<span>?</span>;
            self.debug_print_status(<span>&amp;</span>instruction);

            <span>// Move pc to the next instruction, _before_ executing it, 
</span><span></span>            <span>// since we want a "goto" to override this
</span><span></span>            self.pc <span>=</span> ProgramCounter(new_address <span>as</span> <span>u16</span>);

            <span>let</span> instruction_result <span>=</span> 
                self.execute_instruction(vm, call_stack, instruction);
            <span>match</span> instruction_result {
                Ok(ReturnFromMethod(return_value)) <span>=&gt;</span> <span>return</span> Ok(return_value),
                Ok(ContinueMethodExecution) <span>=&gt;</span> { <span>/* continue the loop */</span> }

                Err(MethodCallFailed::InternalError(err)) <span>=&gt;</span> {
                    <span>return</span> Err(MethodCallFailed::InternalError(err))
                }

                Err(MethodCallFailed::ExceptionThrown(exception)) <span>=&gt;</span> {
                    <span>let</span> exception_handler <span>=</span> self.find_exception_handler(
                        vm,
                        call_stack,
                        executed_instruction_pc,
                        <span>&amp;</span>exception,
                    );
                    <span>match</span> exception_handler {
                        Err(err) <span>=&gt;</span> <span>return</span> Err(err),
                        Ok(None) <span>=&gt;</span> {
                            <span>// Bubble exception up to the caller
</span><span></span>                            <span>return</span> Err(MethodCallFailed::ExceptionThrown(exception));
                        }
                        Ok(Some(catch_handler_pc)) <span>=&gt;</span> {
                            <span>// Re-push exception on the stack and continue
</span><span></span>                            <span>// execution of this method from the catch handler
</span><span></span>                            self.stack.push(Value::Object(exception.<span>0</span>))<span>?</span>;
                            self.pc <span>=</span> catch_handler_pc;
                        }
                    }
                }
            }
        }
    }
}
</code></pre></div><p>I know that there are quite a few implementation details in this code, but I hope it gives an idea of how using Rust‚Äôs <code>Result</code> and pattern matching maps really well to the description of the behavior above. I have to say I am rather proud of this code. üòä</p>
<h2 id="garbage-collection">
  Garbage collection
  <a href="#garbage-collection">
    
  </a>
</h2>
<p>The final milestone in <code>rjvm</code> has been the implementation of the garbage collector. The algorithm I have chosen is a stop-the-world (which trivially follows from not having threads!) semispace copying collector. I have <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/gc.rs">implemented</a> a (poorer) variant of <a href="https://en.wikipedia.org/wiki/Cheney%27s_algorithm">Cheney‚Äôs algorithm</a> - but I really should go and implement the real thing‚Ä¶ üòÖ</p>
<p>The idea is to split the available memory into two parts, called semispaces: one will be active and used to allocate objects, and the other will be unused. When full, a garbage collection will be triggered and all alive objects will be copied to the other semispace. Then, all references to objects will be updated, so that they point to the new copies. Finally, the role of the two will be swapped - similar to how <a href="https://www.redhat.com/en/topics/devops/what-is-blue-green-deployment">blue-green</a> deployment works.</p>
<p><img src="https://andreabergia.com/images/2023/07/gc1.png" alt="">
<img src="https://andreabergia.com/images/2023/07/gc2.png" alt="">
<img src="https://andreabergia.com/images/2023/07/gc3.png" alt="">
<img src="https://andreabergia.com/images/2023/07/gc4.png" alt=""></p>
<p>This algorithm has the following characteristics:</p>
<ul>
<li>obviously, it wastes a lot of memory (half of the possible max memory!);</li>
<li>allocations are super fast (bumping a pointer);</li>
<li>copying and compacting objects means that it does not have to deal with memory fragmentation;</li>
<li>compacting objects can improve performances, due to better cache line utilization.</li>
</ul>
<p>Real Java VMs use far more sophisticated algorithms, generally <a href="https://www.digitalocean.com/community/tutorials/java-jvm-memory-model-memory-management-in-java">generational garbage collectors</a>, such as G1 or the parallel GC, which use evolutions of the copying strategy.</p>
<h2 id="conclusions">
  Conclusions
  <a href="#conclusions">
    
  </a>
</h2>
<p>In writing <code>rjvm</code>, I learned <strong>a lot</strong> and I had a lot of fun. Can‚Äôt ask for more from a side project‚Ä¶ but maybe next time I will pick something <em>a bit</em> less ambitious to learn a new programming language! ü§≠</p>
<p>As an aside, I want to say that I had a lot of fun with Rust. I think it is a great language, <a href="https://andreabergia.com/blog/2022/11/languages-opinion-part-two-rust/">as I have written before</a>, and I have really enjoyed using it for implementing my JVM!</p>
<p>If you are interested in further details on how <code>rjvm</code> is implemented (and on how the JVM actually works), stay tuned for the upcoming posts!</p>

  </article>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What are some low cost payment processing alternatives to Stripe? (116 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=36811026</link>
            <guid>36811026</guid>
            <pubDate>Fri, 21 Jul 2023 07:30:16 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=36811026">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="36811249"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811249" href="https://news.ycombinator.com/vote?id=36811249&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>The most low-cost I know of with widest reach (most countries) is <a href="https://www.adyen.com/pricing" rel="nofollow noreferrer">https://www.adyen.com/pricing</a><p>Because you can choose which processor you want to use and there are many low-cost ones, including some inter-bank ones with fixed cost (no %)</p><p>Most shops like WooCommerce and Shopify have ready-to-use plugins for it.</p><p>(I'm not affiliated, but i build e-commerce for brands)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811342"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811342" href="https://news.ycombinator.com/vote?id=36811342&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>On a related note, you can look at hyperswitch [1], which is an open-source payment orchestrator that supports multiple payment processors. You can self-host it or they have a hosted version as well.<p>1. <a href="https://github.com/juspay/hyperswitch">https://github.com/juspay/hyperswitch</a></p><p>(not affiliated with this project in any way)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811454"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811454" href="https://news.ycombinator.com/vote?id=36811454&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Do you use this?<p>I can't seem to figure what their pricing strategy is or who's running it.</p><p>&gt; Free-tier
&gt; Free-tier for startups. Lowest Price for others.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811725"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36811725" href="https://news.ycombinator.com/vote?id=36811725&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hyperswitch is free to use for the first 10k transactions of the month. After that it costs $0.04 per transaction. It is a payment switch that comes pre integrated with major processors. So as a merchant your business relationship with processors like Stripe or Adyen remains the same
(I'm affiliated with this product)</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811552"><td></td></tr>
                <tr id="36812280"><td></td></tr>
                              <tr id="36811432"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811432" href="https://news.ycombinator.com/vote?id=36811432&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Adyen is a good option, however they have a monthly fixed fee ($120) and looks like they might not onboard small merchants with less than $50M ARR</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812711"><td></td></tr>
            <tr id="36812064"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812064" href="https://news.ycombinator.com/vote?id=36812064&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Are you sure about the fixed fee? Their website says it isn't.<p>&gt; We do not have monthly fees, set-up fees, integration fees or closure fees. We do have a minimum invoice depending on industry or business model. Please speak to a member of our sales team for more details.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812390"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36812390" href="https://news.ycombinator.com/vote?id=36812390&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>The minimum invoice is $120. Though it seems they can waive that if they like you during sales. It's all a little vague which I honestly despise.</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="36811281"><td></td></tr>
                <tr id="36811295"><td></td></tr>
                        <tr id="36812363"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812363" href="https://news.ycombinator.com/vote?id=36812363&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>While we're talking about Stripe alternatives, anyone have a good Stripe Tax alternative?<p>Their pricing is actually insane as they charge per API call rather than transaction amount. That sort of pricing made sense for TaxJar because it was their whole deal, but post-acquisition it would've made more sense to treat the tax product as a complement to the core business and just tack on a small 50c fee for successful tax collection.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812578"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812578" href="https://news.ycombinator.com/vote?id=36812578&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hey mbStavola, Khem from the Paddle team here. We see quite a few sites switch over from Stripe Tax - offloading tax (including the filing) is our core competency (rather than bundling loads of tools together) and we'd charge per transaction for everything to save you paying unnecessary fees. Happy to chat if you'd like to learn more :)</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812748"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812748" href="https://news.ycombinator.com/vote?id=36812748&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I'd absolutely love to switch to Paddle, the product seems great. Unfortunately, my business is a marketplace which I don't believe Paddle supports. Happy to be wrong on that though!<p>Are there any plans to have a marketplace offering?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36812757"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812757" href="https://news.ycombinator.com/vote?id=36812757&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Post your fee schedule and any relevant details <i>here</i> if you don't want your post flagged as spam.<p>"Call me for details" is the worst possible way to engage on HN even if you tack on a smiley.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="36812501"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812501" href="https://news.ycombinator.com/vote?id=36812501&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Have you considered going to one of the archaic platforms and getting a proper merchant account? Moneris, banks (Chase, Wells Fargo), etc? Pretty much all of them will probably offer better support (a customer support line) and cheaper transaction fee.<p>You lose the developer friendliness, so you'll have to debate if that matters to you. To me it never did.</p><p>Or you could take a look at stax <a href="https://staxpayments.com/" rel="nofollow noreferrer">https://staxpayments.com/</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811298"><td></td></tr>
                <tr id="36811333"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811333" href="https://news.ycombinator.com/vote?id=36811333&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>This is the first I've heard of it. Thank you for bringing it to my attention.<p>Great for those starting in Europe, it seems. And PayPal!!!!
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811404"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811404" href="https://news.ycombinator.com/vote?id=36811404&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I've had a bad experience with them (though that was a few years ago). Back then they manually reviewed each website before enabling payment processing (which is fine), but then just didn't get back to us. We tried messaging them for a status update, but only got a generic answer that it'd take another couple days. After three or four weeks and another back and forth we just gave up.<p>As I said, this was a couple years ago, so things might be very different now (we might've been an outlier even back then), but it left a bad taste, because the customer service was so unhelpful, even though they were much smaller than stripe.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811601"><td></td></tr>
                  <tr id="36811366"><td></td></tr>
                <tr id="36811541"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811541" href="https://news.ycombinator.com/vote?id=36811541&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Braintree is a good chunk more expensive than Stripe for OP's needs if they're in the US.<p>Based on the info they shared:</p><p>‚Ä¢ Braintree: 2.59% + $0.49</p><p>&gt; Braintree fees: $17,570 cost for 20K txns/month ($15 AOV)</p><p>‚Ä¢ Stripe: 2.9% + $0.30</p><p>&gt; Stripe fees: $14,700 cost for 20K txns/month ($15 AOV)</p><p>So Stripe is around 16% cheaper for their use case on standard pricing alone.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812455"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812455" href="https://news.ycombinator.com/vote?id=36812455&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Though I suppose that 16% does depend on what the average transaction fee is. If you are higher then $15 it does scale towards Braintree being cheaper.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812483"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36812483" href="https://news.ycombinator.com/vote?id=36812483&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>For sure, although I based it on OP's stated transaction value + volume ("20k transactions a month with an average ticket size of $15 per transaction").<p>If you're doing ~$300K/month, it‚Äôs likely you would've already spoken to our sales team and we would work out custom pricing for your business.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="36811379"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811379" href="https://news.ycombinator.com/vote?id=36811379&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I've been using braintree for 9 years on one of my projects, and while it does "work", there doesn't seem to be much innovation happening, sadly.<p>I use them for their direct integration with paypal, who owns them
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812238"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812238" href="https://news.ycombinator.com/vote?id=36812238&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>What features are missing?<p>In contrast, I almost feel like Stripe is innovating too much. I wish they stopped product development, no more redesigns, no more API breaking changes, it already "just works" so why rewrite and "improve" everything endlessly.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="36812415"><td></td></tr>
                <tr id="36812447"><td></td></tr>
            <tr id="36812544"><td></td></tr>
                  <tr id="36812603"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812603" href="https://news.ycombinator.com/vote?id=36812603&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hey NavyG - Khem from the Paddle team here. We offer a merchant of record model which takes all of the manual work/integrations away and can migrate customers seamlessly over so you can focus on the product. Happy to chat if you'd like to learn more.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811809"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811809" href="https://news.ycombinator.com/vote?id=36811809&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Not at your volume. It would probably cost you more to switch than you'd save, considering the time and training investment involved.<p>Assuming $250k per year at $15/transaction gives ~16,666 transactions a year. With base Stripe pricing, that means you're paying $5k for the $0.30 per transaction fee and another $7.2k for the 2.9% interchange plus fee. So $12.2k in fees per $250k processed, or 4.9% of processed dollars. Adyen is probably going to be about the same given your volume.</p><p>It's important to know that Stripe charges the same fee even though the fee for processing American Express is different from Visa, which is different from Discover and all are more expensive than debit cards. If your business skews highly towards American Express, than Stripe is actually giving you the best rate you could hope for. If you're volume skews debit cards, than Stripe is giving you the worst rate.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811840"><td></td></tr>
                <tr id="36812313"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812313" href="https://news.ycombinator.com/vote?id=36812313&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Other answers are good but keep in mind that other brands can be pretty expensive.  If you are B2B but most of your business is using a credit card, Visa and Mastercard business card and government purchase card transactions are more costly than American Express.<p>I don't think Stripe loses any money on a transaction.  All interchange rates are less than 2.99%, but some are very close.  For very low volume/low ticket price, stripe is a pretty good deal.  But if high volume, there's bound to be a better option that pays off considerably the sooner you implement it.</p><p>Now, if you can get most of your customers using debit cards or ACH-type transactions, you can really achieve a low cost if you use a processor with interchange-based pricing.</p><p>Why support American Express?  Their members tend to be better customers in my experience, and they appreciate that you support their preference.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811913"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811913" href="https://news.ycombinator.com/vote?id=36811913&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>It's how they pay for their best-in-class rewards and offerings. This means card holders are more likely to make big purchases on an Amex than other cards, and why many small ma n' pa shops don't accept them.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811908"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811908" href="https://news.ycombinator.com/vote?id=36811908&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>In my country, they offer some of the best rewards rates and customer care services. Their no-frills chargeback protections and airport lounge network are somewhat better than what I have with my Visa card. However, Amex lacks offline acceptance and can be quite challenging to meet the "milestones" for annual fee waiver.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811917"><td></td></tr>
                        <tr id="36811939"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811939" href="https://news.ycombinator.com/vote?id=36811939&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Only tangentially related, but does someone know good competitors to Stripe in Japan? I need support for subscriptions in USD and EUR.<p>Last time I checked, there were a few choices (besides Stripe and PayPal), but many supported either only JPY, or only one time payments...
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812018"><td></td></tr>
                  <tr id="36812097"><td></td></tr>
            <tr id="36811272"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811272" href="https://news.ycombinator.com/vote?id=36811272&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Every country has couple, if not dozens, of payment processors. Most of them will support foreign customers as well. So you have hundreds and thousands of options here. Bottom line will be that they are all essentially the same when it comes to functionality and pricing because they are the middlemen between you and visa/mastercard/... and not much else. So there is very little variety possible in this little space. It will mostly come down to how "pretty" their gateway is(unless you are doing direct integration without redirection), how responsive their support team is and how they bill you and provide transaction information. Again, not much variety. So pick the cheapest one and be done with it.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812722"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812722" href="https://news.ycombinator.com/vote?id=36812722&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Exactly my concern, I'm basically looking to get a service provider that is as close to card networks or banks as possible. Not looking at which one is "pretty" at all. Willing to work with that provider to integrate them with my website</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811300"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811300" href="https://news.ycombinator.com/vote?id=36811300&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Outside of the US this is not true at all. There are plenty of ways to transfer money without touching the CC networks but instead use interbank communications.
iDeal, Klarna, SEPA: all fixed pricing instead of percentage based fees.
It depends on where you want to provide your services.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36811375"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811375" href="https://news.ycombinator.com/vote?id=36811375&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>&gt; Outside of the US this is not true at all<p>I think you meant "not entirely true". Yes, there are other options.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811461"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36811461" href="https://news.ycombinator.com/vote?id=36811461&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>In Poland barely anyone uses cards for online payments. There are couple of different options: one-time automatic transfers that support major banks, BLIK (payment via one-time code), etc.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36811919"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_36811919" href="https://news.ycombinator.com/vote?id=36811919&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Exactly, and it works well. Unfortunately as a customer you don't have the level of protection with these services a CC or a specialised top up "virtual" debit card has. Charge backs etc. It's one of the reasons why these alternative payment methods are a lot less risky to process and therefore cheaper for the merchants.<p>So it makes me wonder why global companies like Google are so "credit card" centric. For example. You can attach a debit card as a payment mechanism for Google cloud services, but it can't be a top up one... Why? It is very annoying I have to open an extra account with overdraft block just to maintain some control on the spending if they suddenly decide to charge a wrong amount.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812307"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_36812307" href="https://news.ycombinator.com/vote?id=36812307&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>&gt; Unfortunately as a customer you don't have the level of protection with these services a CC or a specialised top up "virtual" debit card has.<p>Generally, you'd have to have your bank account hacked to have a reason to reverse a charge on these types of systems. It happens, but very, very rarely and the banks have a lot of reasons to make sure it doesn't happen. That or you gave money to a scammer and that's your own fault (but they'll still help you).</p><p>This is why the fees are much, much lower. Often these systems even verify that you actually have the money and can transfer the amount to your business bank account on the same day. You can't do that with credit cards.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812401"><td><table>  <tbody><tr>    <td indent="6"><img src="https://news.ycombinator.com/s.gif" height="1" width="240"></td><td>
      <center><a id="up_36812401" href="https://news.ycombinator.com/vote?id=36812401&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>&gt; That or you gave money to a scammer and that's your own fault (but they'll still help you).<p>Is it really that merchant-friendly / anti-consumer? I have used chargebacks when merchants fail to deliver as promised, even when most people wouldn‚Äôt call them ‚Äúsome scammer‚Äù.</p><p>For instance recently a package was shipped that didn‚Äôt include one of many items. I asked for a refund, they claimed it was in the package. No worries, I‚Äôll just do a chargeback.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                                                <tr id="36811739"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811739" href="https://news.ycombinator.com/vote?id=36811739&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Hello, 
(I‚Äôm co-founder of MonoPayments, white label payment platform for fintechs.)<p>If you want to pay less, you have to use local processors with local currencies. This would be a complex operation.</p><p>1. Establish a company at that jurisdiction
2. Make agreements with processors, it could be banks or wallet providers. 
3. You need a treasurer (or CFO)
4. Foreign Exchange rates will be a concern after a while.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812659"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812659" href="https://news.ycombinator.com/vote?id=36812659&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>I currently operate only in US and I am willing to put in the effort for integration, PCI compliance etc. Do you have any recommendations for the local processors you mentioned?</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="36811841"><td></td></tr>
                <tr id="36812584"><td></td></tr>
                <tr id="36812600"><td></td></tr>
                <tr id="36812627"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36812627" href="https://news.ycombinator.com/vote?id=36812627&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Khem from Paddle here - we'll be able to fight chargebacks on your behalf too as part of that :)<p>The price above includes the entire payments stack (filing and remitting of taxes too), so you're compliant globally out of the box.</p><p>We often help teams avoid having to hire lots of external accounting resource.</p><p>Happy to chat if you'd like to learn more :)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812754"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_36812754" href="https://news.ycombinator.com/vote?id=36812754&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Curious: you must have done a lot of groundwork to provide the whole stack as a solution, would love to hear from you how you internally select the processors you work with. Or are you directly integrated with banks and card networks?</span></p></div></td></tr>
        </tbody></table></td></tr>
                                    <tr id="36812680"><td></td></tr>
            <tr id="36811399"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811399" href="https://news.ycombinator.com/vote?id=36811399&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Has anyone used Helcim or Stax? These processors pricing seems to be around $0.15 per transaction. If this is true why don't so many people use it?</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812474"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812474" href="https://news.ycombinator.com/vote?id=36812474&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I‚Äôve used stax in the past. It is cheaper than stripe, but you‚Äôre also paying a monthly fee. In our case, it was $120 a month for a physical terminal in the office. I don‚Äôt know what the differences are for API transactions. It wasn‚Äôt something we were doing.<p>We are now with mxmerchant and they are okay? I‚Äôve never seen a credit card merchant go down and not take transactions, but in the 1.5 years we‚Äôve used them, they‚Äôve gone down twice.</p><p>But we need to use them because they are the only processor the software uses and we need to now take cards through their system
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812771"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812771" href="https://news.ycombinator.com/vote?id=36812771&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Interesting, have you also tried online payments (card not present) with them? If so how is the reliability in that case?</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="36812163"><td></td></tr>
                <tr id="36812678"><td></td></tr>
                  <tr id="36812264"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812264" href="https://news.ycombinator.com/vote?id=36812264&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Full disclosure, I work for Stripe. The question you want to ask is why are these alternatives cheaper than Stripe? What is the tradeoff.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812794"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812794" href="https://news.ycombinator.com/vote?id=36812794&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Yes, want to understand the trade off and would like to know what the challenge is in integrating directly with a payment provider that is closer to the networks / banks. I love Stripe for how easy it is to get started with but I am looking for opportunities to save cost further but getting closer to the acquirer</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36812336"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812336" href="https://news.ycombinator.com/vote?id=36812336&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>One obvious answer is that Stripe has name recognition and fame, which means they can afford to charge more and get away with it. And smaller companies have an incentive to prioritize growth and user acquisition over immediate profit.<p>But what other tradeoffs are you implying there to be? I understand in a vague sense that payment processors deal with a lot of ugly behind-the-scenes stuff like mind-boggling varieties of frauds, dispute resolutions, regulations, etc., but what exactly is the difference in this specific case, and how might it affect a potential user in practice?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="36812369"><td></td></tr>
            <tr id="36811875"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811875" href="https://news.ycombinator.com/vote?id=36811875&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Depends on where you tap into the digital payments chain. At the highest level (with highest fees) are the payfacs (Payment facilitators). Above them are the payment acquirers with comparatively low fees, higher joining fees, more rigorous certification process and the PCI compliance is a chore you need to repeat every year. Above that is not that easy to tap into such as direct link to credit card networks and banks. At your volume, PayFac like Stripe is the best option IMO.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36812229"><td></td></tr>
                <tr id="36812682"><td></td></tr>
                  <tr id="36812058"><td></td></tr>
                <tr id="36812062"><td></td></tr>
            <tr id="36812085"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812085" href="https://news.ycombinator.com/vote?id=36812085&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>This is definitely the more robust, durable and cheaper alternative. But clearly is a utopia for today.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36812083"><td></td></tr>
                  <tr id="36811751"><td></td></tr>
                <tr id="36812255"><td></td></tr>
                  <tr id="36812084"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812084" href="https://news.ycombinator.com/vote?id=36812084&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>For over a decade I've been having free bank accounts with free Visa and MasterCard debit and credit cards, and I've been using them with services that allow me to create as many free virtual credit cards I wish.<p>I thought these services were already widespread.</p><p>Are people still paying for debit and credit cards?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812262"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812262" href="https://news.ycombinator.com/vote?id=36812262&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hey I was referring to accepting payments online on my website. So this is the payment processing fees I was referring to</span></p></div></td></tr>
        </tbody></table></td></tr>
                  </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Quench of LHC inner triplet magnet causes a small leak with major consequences (122 pts)]]></title>
            <link>https://home.cern/news/news/accelerators/accelerator-report-quench-lhc-inner-triplet-magnet-causes-small-leak-major</link>
            <guid>36811018</guid>
            <pubDate>Fri, 21 Jul 2023 07:29:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://home.cern/news/news/accelerators/accelerator-report-quench-lhc-inner-triplet-magnet-causes-small-leak-major">https://home.cern/news/news/accelerators/accelerator-report-quench-lhc-inner-triplet-magnet-causes-small-leak-major</a>, See on <a href="https://news.ycombinator.com/item?id=36811018">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>At 1.00 a.m. + 17 seconds on Monday, 17 July, the LHC beams were dumped after only 9 minutes in collision due to a radiofrequency interlock caused by an electrical perturbation. Approximately 300 milliseconds after the beams were cleanly dumped, several superconducting magnets around the LHC quenched ‚Äì i.e. they lost their superconducting state. Among these magnets were the inner triplet magnets located to the left of Point 8 (LHCb), which play a crucial role in focusing the beams for the LHCb experiment.</p>

<p>While this sequence of events may not happen very often during beam operation, it is not exceptional for the LHC, as occasional quenches of some superconducting magnets are to be expected.</p>

<p>In this particular case, the electrical perturbation caused the quench protection system (QPS) to trigger the quench heaters of the magnets concerned. These quench heaters consist of an electrical resistor embedded in the magnet coils; they are designed to heat up quickly when a localised quench occurs somewhere in the magnet, in order to effectively bring the whole magnet out of the superconducting state in a controlled and homogenous manner. During such a quench, the liquid helium in the magnet warms up and turns into a gas that is recovered by the cryogenic system to be re-liquified, ready to cool down the magnets again.</p>

<figure id="CERN-HOMEWEB-PHO-2023-098-1"><a href="https://cds.cern.ch/images/CERN-HOMEWEB-PHO-2023-098-1" title="View on CDS"><img alt="home.cern,Accelerators" src="https://cds.cern.ch/images/CERN-HOMEWEB-PHO-2023-098-1/file?size=large"></a>
<figcaption>The cryostat containing the inner triplet magnets. The tiny amount of very cold helium that replaced the insulation vacuum cooled down the cryostat, causing condensation of the tunnel air on the cryostat, which then froze. Several hours later, the thin layer of ice had melted again as the cryostat returned to room temperature. (Image: CERN)</figcaption></figure><p>Despite this being a normal and expected behaviour, the mechanical stresses involved in this process are significant and, in very rare cases, can lead to damage. Unfortunately, in the case of the inner triplet magnet located to the left of Point 8, a small leak has appeared between the cryogenic circuit, which contains the liquid helium, and the insulation vacuum that separates the cold magnet from the warm outer vessel, known as the cryostat. This vacuum barrier is crucial for preventing heat transfer from the surrounding LHC tunnel to the interior of the cryostat (this is similar to the functioning of a thermos flask). As a result of the leak, this insulation was lost: the insulation vacuum filled with helium gas, cooling down the cryostat and causing condensation to form and freeze on the outside.</p>

<p>As I write, investigations are ongoing to identify the source of the leak, to allow a repair strategy to be elaborated. Nevertheless, it is clear that an intervention with the inner triplet magnet at room temperature will be required. This incident will probably have a great impact on the LHC schedule, with machine operation unlikely to resume for at least several weeks.</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nanosecond timestamp collisions are common (126 pts)]]></title>
            <link>https://www.evanjones.ca/nanosecond-collisions.html</link>
            <guid>36810818</guid>
            <pubDate>Fri, 21 Jul 2023 07:01:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.evanjones.ca/nanosecond-collisions.html">https://www.evanjones.ca/nanosecond-collisions.html</a>, See on <a href="https://news.ycombinator.com/item?id=36810818">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<h3>[ 2023-July-20 17:39 ]</h3>
<p>I was wondering: how often do nanosecond timestamps collide on modern systems? The answer is: very often, like 5% of all samples, when reading the clock on all 4 physical cores at the same time. As a result, I think it is unsafe to assume that a raw nanosecond timestamp is a unique identifier.</p>

<p>I wrote a <a href="https://github.com/evanj/nanocollision">small test program</a> to test this. I used Go, which records both the "absolute" time and the "monotonic clock" relative time on each call to time.Now(), so I compared both the relative difference between consecutive timestamps, as well as just the absolute timestamps. As expected, the behavior depends on the system, so I observe very different results on Mac OS X and Linux. On Linux, within a single thread, both the absolute and monotonic times always increase. On my system, the minimum increment was 32 ns. Between threads, approximately 5% of the absolute times were exactly the same as other threads. Even with 2 threads on a 4 core system, approximately 2% of timestamps collided. On Mac OS X: the absolute time has microsecond resolution, so there are an astronomical number of collisions when I repeat this same test. Even within a thread I often observe the monotonic clock not increment.</p>

<p>See the <a href="https://github.com/evanj/nanocollision">test program on Github</a> if you are curious.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon shuts down customer‚Äôs smart home (176 pts)]]></title>
            <link>https://forums.macrumors.com/threads/amazon-shuts-down-customers-smart-home.2392704/</link>
            <guid>36810075</guid>
            <pubDate>Fri, 21 Jul 2023 04:42:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forums.macrumors.com/threads/amazon-shuts-down-customers-smart-home.2392704/">https://forums.macrumors.com/threads/amazon-shuts-down-customers-smart-home.2392704/</a>, See on <a href="https://news.ycombinator.com/item?id=36810075">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>
			Hello, everybody. How's it going? I hope you're loving a lovely day. Today, I would like to go over reason number 80 million that you should not be having stuff in your house.</p><p>

Connect to Amazon servers for things like critical infrastructure, whether it is your camera systems, your doorbell, or any part of your home. This comes from Mr. Brandon Jackson.</p><p>

It says, On Wednesday, May 31, 2023, I finally regained access to my Amazon account after an unexpected and unwarranted lockout that lasted about a week from Thursday, May 25. This wasn't just a simple inconvenience. I have a smart home.</p><p>

Smart home, and my primary method of interfacing with all the devices and automations is through Amazon Echo devices via Alexa. The incident left me with a house full of unresponsive devices, a silent Alexa, and a lot of questions. The sequence of events that led to this digital exile began.</p><p>

Innocuously enough, a package was delivered to my house on Wednesday, May 24, and everything seemed fine. The following day, however, I found that my Echo show had signed out, and I was unable to interact with my smart home devices. My initial assumption was that somebody might have attempted to access my account repeatedly, triggering a lockout.</p><p>

I use a fairly old email address from my Amazon account, and it's plausible that an old password might have been exposed in a past data breach. However, I currently use strong autogenerated passwords via Apple and employ two factor authentication with an authenticator app, so unauthorized access seemed unlikely. I swiftly checked my other accounts social media, streaming, et cetera, to ensure that I hadn‚Äôt been compromised.</p><p>

All seemed normal, with no flood of notifications from Microsoft Authenticator that would indicate an attempted breach. Puzzled, I found the advice of the Amazon app and dialed the customer service number it provided. That's when things began to take a surreal turn.</p><p>

The representative told me that I should have received an email, which I indeed found in my inbox. It was from an executive at Amazon. As I dialed the number provided in the email, I half wondered if Amazon was experiencing some issues and I was unwittingly falling for a scam.</p><p>

You don't expect trillion dollar companies to email you and then have them say, call me back, bro, so I completely understand where he's coming from. When I connected with the executive, they asked if I knew why my account had been locked. When I answered, I was unsure.</p><p>

Their tone turned somewhat accusatory. I was told that the driver who had delivered my package reported receiving racist remarks from my ring doorbell. It's actually a UFI, but I'll let that slide.</p><p>

Here's where things got even more baffling. First, I have multiple cameras recording everything that happens on my property. By the way, I hope those cameras are going to a local NVR.</p><p>

If the driver's claims were accurate, I could easily verify them with video footage. Second, most delivery drivers in my area share the same race as me and my family. It seems highly unlikely that we would make such remarks.</p><p>

Finally, when I asked what time the alleged incident occurred, I realized it was practically impossible for anyone in my house to have made those comments, as nobody was home around that time, approximately six five P-M-I reviewed the footage and confirmed that no such comments had been made. Instead, the UFI doorbell had issued an automated response. Excuse me, can I help you? The driver who was walking away and wearing headphones must have misinterpreted the message.</p><p>

Nevertheless, by the following day, my Amazon account was locked and all my Echo devices were logged out. Let me be clear. I fully support Amazon taking measures to ensure the safety of their drivers.</p><p>

However, I question why my entire smart home had to be rendered unusable during their internal investigation. It seems more sensible to impose a temporary delivery restriction or purchasing ban on my account. Submitting video evidence from multiple angles right after my initial call with the executive appeared to have little impact on their decision to disable my account.</p><p>

This incident has led me to question my relationship with Amazon. After nearly a decade of loyalty, I‚Äôve been given a harsh reminder that a misunderstanding can lead to such drastic measures. It seems more reasonable to handle such issues in a more compartmentalized way, rather than a blanket shutdown of all services.</p><p>

Due to this experience, I'm seriously considering discontinuing my use of Amazon Echo devices and will caution others about this incident. BlackBerry, you are on the wrong side of the chair, and if you step on my keyboard and hit the spacebar, you are going to get it, girl. You're going to get it.</p><p>

Left side of the chair, Barry. Good, Barry. Due to this experience, I am seriously considering discontinuing my use of Amazon Echo devices and will caution others about this incident.</p><p>

This ordeal has made the case for a more personalized home assistance system, perhaps using Raspberry Pi devices scattered around the house. Despite promptly submitting video evidence immediately upon learning of my issue, my account remained locked. The timing couldn't have been worse.</p><p>

The onset of Labor Day weekend was approaching, and I was keen to resolve the issue before the long weekend. However, despite numerous calls and emails, it wasn't until Friday afternoon that I had received confirmation that the investigation had started. I was told to expect the response within two business days, meaning not until Tuesday of the following week at the earliest.</p><p>

In the end, my account was unlocked on Wednesday with no follow up email to inform me of the resolution. This is one of those things where instead of this drives me nuts. So instead of apologizing for the fact that they ****ed with somebody who purchased items in their home that apparently they don‚Äôt have permission to use, if a delivery driver mishears a ****ing automated doorbell, that they can't even just say, hey, man, we're sorry we ****ed up.</p><p>

We realized there was nobody actually there. Have you ever dealt with one of those situations where there‚Äôs somebody in your life that does something massively screwed up and they realize that they did something massively screwed up, and then the moment they realize it and they undo whatever it is that they did, they just walk away? Or they just say well, they just don't say anything. Don't even make eye contact.</p><p>

Rather than be mad enough to go, hey, man, I'm sorry I screwed up. It's just a piece of **** way to behave. Speaking of piece of **** ways to behave, somebody is supposed to stay on the left side of the chair like Barry.</p><p>

This incident stands as a stark reminder of the need for better customer service and a more nuanced approach to incident management. Through sharing my experience, I hope to encourage Amazon to reform and rethink their approach to handling such situations. In the future, it's essential for customers tofeel confident in the security and reliability of their services, especially when those services are integral tothe functionality of their homes.</p><p>

It's time for Amazon to take a more customer focused approach to problem solving and conflict resolution. So let's get this straight. If a delivery driver for the company disapproves of you for any reason, you can have your actual account shut down.</p><p>

The devices that you use in your home may not work. Have you ever had an issue with a postal worker, an Ups delivery person, a FedEx delivery person before in your life? Can you imagine if that issue that you had with that delivery person resulted in items inside of your home that you bought and paid for, no longer functioning and working? This is why I think it is paramount that the infrastructure in your home be as sovereign as possible. Do not have your light switches or your radios or anything else in your home connecting to other people's servers to get permission to turn on.</p><p>

That is a mess waiting to happen, because again, all it takes is an Amazon delivery driver who's having a bad day to literally ruin your home. An unfounded accusation of racism means that infrastructure inside your home can stop working. This is the problem.</p><p>

When you give too much control to one company, and particularly when that control that you're giving is your devices inside of your home connecting to their servers. You could literally be in a situation where somebody making an unfounded, untrue, demonstrably proven untrue accusation of racism against you causes your internal home infrastructure to stop working. That's ****ing insane.</p><p>

I completely understand and respect that. The target demographic of this channel. The people that tend to show up in my comment section and show up to meetups are not the people who need to hear this public service announcement.<br>
You guys are ripping the computers out of as many things as possible that do not read a computer because you don't want to live in a world where the infrastructure in your house stops working because some douchebag at Amazon decided to listen to the unverified claims of someone who misheard a ring doorbell. However, there are many other people out there that actually believe it's a good idea to have the infrastructure in their house connect to somebody else's servers. Sending those other people information, making their house completely dependent on some douchebag that works at Amazon for the ability of their devices at home to work that doesn't even have the courtesy to apologize when proven that they were wrong for turning off what you bought and paid for.</p><p>

Don't have this stuff inside your house. You don't need a smart home. Am I allowed to say that you don‚Äôt need a home that connects to other people's servers? You are fine without it.</p><p>

You don't need it. Now, if you want a light to turn on, turn the ****ing switch. What I have over here, if I want to listen to music, got a computer.</p><p>

That computer has a program that runs locally, plays my music when I wand that I ripped off of my albums. That plugs into a nice little rotel RB 1090 amplifier over there. That thing doesn't connect to the internet at all.</p><p>

Jeff Bezos can't turn that thing off if he wants to. Hell, that thing doesn't even have a remote. I had to get a separate thing that you can plug an item into that doesn't have a remote that is literally just a relay so that I can turn it on and off when I want to without having to get up and walk over to it.</p><p>

That plugs into a set of nice Vanderstein model threes. I got all my acoustic panels over here. This thing sounds way better than some ****** ass little cloud bluetooth speaker.</p><p>

Listen to this. Ten times better than the Amazon ********. Really, honestly, truly, in your heart of hearts, how much **** in your house do you need to connect to the ****ing internet? And goddamn, it sounds great.</p><p>

And it don't connect to **** that I don't want it to connect to. And that's how it is. I have a folder of music.</p><p>

I play it. It's beautiful. It's great.</p><p>

I can have a nice romantic evening. I could play shastakovich. I could play opera whatever I want.</p><p>

I got acoustic panels everywhere. There are so many ways to have fun in your home without connecting Amazon. Why do you got to connect Amazon? The turn all your **** on.</p><p>

Turn the **** on yourself. That's it for today. And as always, I hope you learned something.</p><p>

I'll see you in the next video. Bye now.
		</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Study finds billions of nanoplastics released when microwaving containers (317 pts)]]></title>
            <link>https://news.unl.edu/newsrooms/today/article/nebraska-study-finds-billions-of-nanoplastics-released-when-microwaving/</link>
            <guid>36809565</guid>
            <pubDate>Fri, 21 Jul 2023 03:10:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.unl.edu/newsrooms/today/article/nebraska-study-finds-billions-of-nanoplastics-released-when-microwaving/">https://news.unl.edu/newsrooms/today/article/nebraska-study-finds-billions-of-nanoplastics-released-when-microwaving/</a>, See on <a href="https://news.ycombinator.com/item?id=36809565">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <p>The fastest way to heat food and drink might also rank as the fastest route to ingesting massive quantities of minuscule plastic particles, says new research from the University of&nbsp;Nebraska‚ÄìLincoln.</p>

<p>Experiments have shown that microwaving plastic baby food containers available on the shelves of U.S. stores can release huge numbers of plastic particles ‚Äî in some cases, <a href="https://pubs.acs.org/doi/10.1021/acs.est.3c01942">more than 2 billion nanoplastics and 4 million microplastics</a> for every square centimeter of&nbsp;container.</p>

<p>Though the health effects of consuming micro- and nanoplastics remain unclear, the Nebraska team further found that three-quarters of cultured embryonic kidney cells had died after two days of being introduced to those same particles. A 2022 report from the World Health Organization recommended limiting exposure to such&nbsp;particles.</p>

<p>‚ÄúIt is really important to know how many micro- and nanoplastics we are taking in,‚Äù said Kazi Albab Hussain, the study‚Äôs lead author and a doctoral student in civil and environmental engineering at the University of Nebraska‚ÄìLincoln. ‚ÄúWhen we eat specific foods, we are generally informed or have an idea about their caloric content, sugar levels, other nutrients. I believe it‚Äôs equally important that we are aware of the number of plastic particles present in our&nbsp;food.</p>

<p>‚ÄúJust as we understand the impact of calories and nutrients on our health, knowing the extent of plastic particle ingestion is crucial in understanding the potential harm they may cause. Many studies, including ours, are demonstrating that the toxicity of micro- and nanoplastics is highly linked to the level of&nbsp;exposure.‚Äù</p>

<p>The team embarked on its study in 2021, the same year that Hussain became a father. While prior research had investigated the release of plastic particles from baby bottles, the team realized that no studies had examined the sorts of plastic containers and pouches that Hussain found himself shopping for, and that millions of other parents regularly do,&nbsp;too.</p>

<p>Hussain and his colleagues decided to conduct experiments with two baby food containers made from polypropylene and a reusable pouch made of polyethylene, both plastics approved by the U.S. Food and Drug Administration. In one experiment, the researchers filled the containers with either deionized water or 3% acetic acid ‚Äî the latter intended to simulate dairy products, fruits, vegetables and other relatively acidic consumables ‚Äî then heated them at full power for three minutes in a 1,000-watt microwave. Afterward, they analyzed the liquids for evidence of micro- and nanoplastics: the micro being particles at least 1/1,000th of a millimeter in diameter, the nano any particles&nbsp;smaller.</p>

<p>The actual number of each particle released by the microwaving depended on multiple factors, including the plastic container and the liquid within it. But based on a model that factored in particle release, body weight, and per-capita ingestion of various food and drink, the team estimated that infants drinking products with microwaved water and toddlers consuming microwaved dairy products are taking in the greatest relative concentrations of plastic. Experiments designed to simulate the refrigeration and room-temperature storage of food or drink over a six-month span also suggested that both could lead to the release of micro- and&nbsp;nanoplastics.</p>

<p>‚ÄúFor my baby, I was unable to completely avoid the use of plastic,‚Äù Hussain said. ‚ÄúBut I was able to avoid those (scenarios) which were causing more of the release of micro- and nanoplastics. People also deserve to know those, and they should choose&nbsp;wisely.‚Äù</p>

<p>With the help of Svetlana Romanova from the University of Nebraska Medical Center, the team then cultured and exposed embryonic kidney cells to the actual plastic particles released from the containers ‚Äî a first, as far as Hussain can tell. Rather than introduce just the number of particles released by one container, the researchers instead exposed the cells to particle concentrations that infants and toddlers might accumulate over days or from multiple&nbsp;sources.</p>




<p>After two days, just 23% of kidney cells exposed to the highest concentrations had managed to survive ‚Äî a much higher mortality rate than that observed in earlier studies of micro- and nanoplastic toxicity. The team suspects that kidney cells might be more susceptible to the particles than are other cell types examined in prior research. But those earlier studies also tended to examine the effects of larger polypropylene particles, some of them potentially too large to penetrate cells. If so, the Hussain-led study could prove especially sobering: Regardless of its experimental conditions, the Husker team found that polypropylene containers and polyethylene pouches generally release about 1,000 times more nanoplastics than&nbsp;microplastics.</p>

<p>The question of cell infiltration is just one among many that will require answers, Hussain said, before determining the true risks of consuming micro- and nanoplastics. But to the extent that they do pose a health threat ‚Äî and that plastics remain a go-to for baby food storage ‚Äî parents would have a vested interest in seeing that the companies manufacturing plastic containers seek out viable alternatives, he&nbsp;said.</p>

<p>‚ÄúWe need to find the polymers which release fewer (particles),‚Äù Hussain said. ‚ÄúProbably, researchers will be able to develop plastics that do not release any micro- or nanoplastics ‚Äî or, if they do, the release would be&nbsp;negligible.</p>

<p>‚ÄúI am hopeful that a day will come when these products display labels that read ‚Äòmicroplastics-free‚Äô or&nbsp;‚Äònanoplastics-free.‚Äô‚Äù</p>

<p>The team reported its findings in the journal <a href="https://pubs.acs.org/doi/10.1021/acs.est.3c01942">Environmental Science <span>&amp;</span> Technology</a>. Hussain and Romanova authored the study with the University of Nebraska‚ÄìLincoln‚Äôs Yusong Li, Mathias Schubert, Yongfeng Lu, Luc√≠a Fern√°ndez-Ballester, Bing Wang, Xi Huang, Jesse Kuebler, Dong Zhang and Ilhami Okur. The researchers received support from the National Science Foundation and the Buffett Early Childhood&nbsp;Institute.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[‚ÄúI give permission to IBM, ..., to use JSLint for evil.‚Äù (230 pts)]]></title>
            <link>https://gist.github.com/kemitchell/fdc179d60dc88f0c9b76e5d38fe47076</link>
            <guid>36809065</guid>
            <pubDate>Fri, 21 Jul 2023 01:37:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gist.github.com/kemitchell/fdc179d60dc88f0c9b76e5d38fe47076">https://gist.github.com/kemitchell/fdc179d60dc88f0c9b76e5d38fe47076</a>, See on <a href="https://news.ycombinator.com/item?id=36809065">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="" data-tab-size="8" data-paste-markdown-skip="" data-tagsearch-lang="" data-tagsearch-path="crockford-on-json-license">
        <tbody><tr>
          <td id="file-crockford-on-json-license-L1" data-line-number="1"></td>
          <td id="file-crockford-on-json-license-LC1">https://youtu.be/-C-JoyNuQJs?t=39m45s</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L2" data-line-number="2"></td>
          <td id="file-crockford-on-json-license-LC2">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L3" data-line-number="3"></td>
          <td id="file-crockford-on-json-license-LC3">When I put the reference implementation onto the website I needed to</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L4" data-line-number="4"></td>
          <td id="file-crockford-on-json-license-LC4">put a software license on it.</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L5" data-line-number="5"></td>
          <td id="file-crockford-on-json-license-LC5">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L6" data-line-number="6"></td>
          <td id="file-crockford-on-json-license-LC6">And I looked at all the licenses that were avilable, and there were a lot</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L7" data-line-number="7"></td>
          <td id="file-crockford-on-json-license-LC7">of them. And I decided that the one I liked the best was the MIT License,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L8" data-line-number="8"></td>
          <td id="file-crockford-on-json-license-LC8">which was a notice that you would put on your source and it would say,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L9" data-line-number="9"></td>
          <td id="file-crockford-on-json-license-LC9">"you're allowed to use this for any purpose you want, just leave the</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L10" data-line-number="10"></td>
          <td id="file-crockford-on-json-license-LC10">notice in the source and don't sue me."</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L11" data-line-number="11"></td>
          <td id="file-crockford-on-json-license-LC11">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L12" data-line-number="12"></td>
          <td id="file-crockford-on-json-license-LC12">I love that licnese.  It's really good.</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L13" data-line-number="13"></td>
          <td id="file-crockford-on-json-license-LC13">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L14" data-line-number="14"></td>
          <td id="file-crockford-on-json-license-LC14">But this was late in 2002, you know, we'd just started the war on terror,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L15" data-line-number="15"></td>
          <td id="file-crockford-on-json-license-LC15">and, you know, we were going after the evildoers with the president and</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L16" data-line-number="16"></td>
          <td id="file-crockford-on-json-license-LC16">the vice president, and I felt like, "I need to do my part".</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L17" data-line-number="17"></td>
          <td id="file-crockford-on-json-license-LC17">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L18" data-line-number="18"></td>
          <td id="file-crockford-on-json-license-LC18">So I added one more line to my license, was that, "the Software shall</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L19" data-line-number="19"></td>
          <td id="file-crockford-on-json-license-LC19">be used for Good, not Evil."  And thought: I've done my job!</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L20" data-line-number="20"></td>
          <td id="file-crockford-on-json-license-LC20">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L21" data-line-number="21"></td>
          <td id="file-crockford-on-json-license-LC21">About once a year I'll get a letter from a crank who says, "I should</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L22" data-line-number="22"></td>
          <td id="file-crockford-on-json-license-LC22">have a right to use it for evil! I'm not gonna use it until you change</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L23" data-line-number="23"></td>
          <td id="file-crockford-on-json-license-LC23">your license!"</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L24" data-line-number="24"></td>
          <td id="file-crockford-on-json-license-LC24">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L25" data-line-number="25"></td>
          <td id="file-crockford-on-json-license-LC25">Or they'll write to me and say, "how do I know if it's evil or not? I</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L26" data-line-number="26"></td>
          <td id="file-crockford-on-json-license-LC26">don't think it's evil, but someone else might think it's evil, so I'm</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L27" data-line-number="27"></td>
          <td id="file-crockford-on-json-license-LC27">not gonna use it."</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L28" data-line-number="28"></td>
          <td id="file-crockford-on-json-license-LC28">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L29" data-line-number="29"></td>
          <td id="file-crockford-on-json-license-LC29">Great. It's working. My license works. I'm stopping the evildoers.</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L30" data-line-number="30"></td>
          <td id="file-crockford-on-json-license-LC30">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L31" data-line-number="31"></td>
          <td id="file-crockford-on-json-license-LC31">...</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L32" data-line-number="32"></td>
          <td id="file-crockford-on-json-license-LC32">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L33" data-line-number="33"></td>
          <td id="file-crockford-on-json-license-LC33">Also about once a year, I get a letter from a lawyer, every year a</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L34" data-line-number="34"></td>
          <td id="file-crockford-on-json-license-LC34">different lawyer, at a company. I don't want to embarrass the company by</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L35" data-line-number="35"></td>
          <td id="file-crockford-on-json-license-LC35">saying their name, so I'll just say their initials, "IBM," saying that</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L36" data-line-number="36"></td>
          <td id="file-crockford-on-json-license-LC36">they want to use something that I wrote, 'cause I put this on everything</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L37" data-line-number="37"></td>
          <td id="file-crockford-on-json-license-LC37">I write now. They want to use something that I wrote and something that</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L38" data-line-number="38"></td>
          <td id="file-crockford-on-json-license-LC38">they wrote and they're pretty sure they weren't gonna use it for evil,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L39" data-line-number="39"></td>
          <td id="file-crockford-on-json-license-LC39">but they couldn't say for sure about their customers. So, could I give</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L40" data-line-number="40"></td>
          <td id="file-crockford-on-json-license-LC40">them a special license for that?</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L41" data-line-number="41"></td>
          <td id="file-crockford-on-json-license-LC41">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L42" data-line-number="42"></td>
          <td id="file-crockford-on-json-license-LC42">So, of course!</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L43" data-line-number="43"></td>
          <td id="file-crockford-on-json-license-LC43">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L44" data-line-number="44"></td>
          <td id="file-crockford-on-json-license-LC44">So I wrote back---this happened literally two weeks ago---I said, "I</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L45" data-line-number="45"></td>
          <td id="file-crockford-on-json-license-LC45">give permission to IBM, its customers, partners, and minions, to use</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L46" data-line-number="46"></td>
          <td id="file-crockford-on-json-license-LC46">JSLint for evil."</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L47" data-line-number="47"></td>
          <td id="file-crockford-on-json-license-LC47">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L48" data-line-number="48"></td>
          <td id="file-crockford-on-json-license-LC48">And the attorney wrote back and said, "Thanks very much, Douglas!"</td>
        </tr>
  </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FTC warns board game content creators, publishers to disclose relationships (142 pts)]]></title>
            <link>https://boardgamewire.com/index.php/2023/07/17/ftc-warns-board-game-influencers-publishers-over-failing-to-properly-disclose-relationships-free-gifts/</link>
            <guid>36808430</guid>
            <pubDate>Fri, 21 Jul 2023 00:00:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://boardgamewire.com/index.php/2023/07/17/ftc-warns-board-game-influencers-publishers-over-failing-to-properly-disclose-relationships-free-gifts/">https://boardgamewire.com/index.php/2023/07/17/ftc-warns-board-game-influencers-publishers-over-failing-to-properly-disclose-relationships-free-gifts/</a>, See on <a href="https://news.ycombinator.com/item?id=36808430">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			
<p>Board game reviewers and influencers are falling foul of FTC rules prohibiting ‚Äòunfair or deceptive‚Äô acts by failing to properly disclose when they receive free games ‚Äì putting themselves and publishers in the firing line for court action.</p>



<p>The US Federal Trade Commission, the government agency in charge of consumer protection, has<a href="https://www.ftc.gov/business-guidance/advertising-marketing/endorsements-influencers-reviews"> just updated its 14-year-old guidance on ‚Äòendorsements and testimonials in advertising‚Äô</a> to include online influencers working across social media platforms like Twitter, Twitch, Instagram and TikTok.</p>



<p>The new guidance makes it clear reviewers and other media creators should clearly disclose when they receive free products or other perks from a company, even if they aren‚Äôt specifically asked to mention those products.</p>



<p>That includes a content creator posting a picture of a board game on social media, or a video of someone using the game, which the FTC says ‚Äúcould convey ‚Äì even without words ‚Äì that you like and approve of the product‚Äù.</p>



<p>The FTC says disclosures should be kept simple, such as ‚ÄúThis is an ad for BRAND‚Äù, and should be prominent on each piece of media which contains that product.</p>



<p>It said a single disclosure on a home page is not sufficient, nor are single disclosures in the description of videos rather than the video itself, or on social media where a user has to click ‚Äòread more‚Äô to view the disclosure.</p>



<p>The FTC added that multiple disclosures through a video or live stream are preferable, and that pictures on platforms such as Snapchat and Instagram Stories should feature a disclosure superimposed over the image.</p>



<p>Disclosures are not limited to free games, but also cover cash payments, other gifts, and travel and accommodation costs. </p>



<p>An FTC spokesperson told BoardGameWire, ‚ÄúThe&nbsp;FTC&nbsp;Act and the principles underlying the Endorsement Guides apply to game companies and game influencers.&nbsp; </p>



<p>‚ÄúIf some followers of game influencers don‚Äôt expect them to get the games for free and if knowing about the free games would affect the credibility that followers give to the endorsements, then the free games should be disclosed.&nbsp; </p>



<p>‚ÄúWe have brought cases against companies whose influencers have not disclosed material connections.‚Äù</p>



<p>Rob Freund, a digital marketing and e-commerce lawyer for brands, agencies and creators, took to Twitter to discuss the new FTC guidance.</p>



<p>He said, ‚ÄúThe FTC could sue the brand, the influencer, and any involved intermediary to enforce violations of the FTC Act related to these guidelines. They have done so many times before.‚Äù</p>



<p>He added, ‚ÄúRegulators can‚Äôt be everywhere at once, but expect more aggressive enforcement around these issues.‚Äù</p>



<p>One former board game influencer who now works for a publisher, who did not wish to be named, told BoardGameWire, ‚ÄúThe FTC requirements have been that review copies should be disclosed for a long while‚Ä¶ and the hobby industry, especially creators, have definitely ignored that. </p>



<p>‚ÄúSome do the correct thing. Some don‚Äôt. I‚Äôll point out the change and requirements in the interactions I or my companies have with influencers.‚Äù</p>



<p>Jamey Stegmaier, the co-founder of Wingspan and Scythe publisher <a href="https://stonemaiergames.com/">Stonemaier Games</a>, maintains a list of more than 300 board game reviewers who he periodically contacts about review copies.</p>



<p>He said, ‚ÄúI‚Äôve noticed more creators in Instagram tagging their content as ‚Äòpaid promotion from the publisher‚Äô for games we‚Äôve sent to them. </p>



<p>‚ÄúI‚Äôd like to see Instagram offer more accurate tags/labels, as there is a literal difference between getting a cardboard box and receiving money to express an opinion, but it will do for now.</p>



<p>‚ÄúUp until now I‚Äôve put the impetus on reviewers to be transparent about receiving free review copies, but this is a good reminder and opportunity to take some of the responsibility ourselves. </p>



<p>‚ÄúSo I‚Äôve added a paragraph about this on our reviewer guidelines and in the template I use when I contact reviewers each month.‚Äù</p>



<p>Sarah Shah, an attorney and the creator and host of the <a href="https://www.youtube.com/c/boardgamesinaminute">Board Games in a Minute</a> YouTube channel, told BoardGameWire, ‚ÄúI know that I have failed to disclose in Instagram and Facebook posts when I have received a review copy of a game when posting about that game, but going forward, I am going to start doing this more diligently. </p>



<p>‚ÄúI‚Äôve already been disclosing in video content when I have received a review copy of a game. As for other content creators, I see many who do not disclose even when they are paid to create a video about a certain game, which I feel is deceptive, as it‚Äôs giving the impression that their opinion is entirely free from bias. </p>



<p>‚ÄúI hope more content creators will be mindful of these new laws and follow them more carefully. I know I will.‚Äù</p>
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fly.io Postgres cluster down for 3 days, no word from them about it (613 pts)]]></title>
            <link>https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&amp;cd=9&amp;hl=en&amp;ct=clnk&amp;gl=au</link>
            <guid>36808296</guid>
            <pubDate>Thu, 20 Jul 2023 23:42:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&#x26;cd=9&#x26;hl=en&#x26;ct=clnk&#x26;gl=au">https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&#x26;cd=9&#x26;hl=en&#x26;ct=clnk&#x26;gl=au</a>, See on <a href="https://news.ycombinator.com/item?id=36808296">Hacker News</a></p>
Couldn't get https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&cd=9&hl=en&ct=clnk&gl=au: Error: Request failed with status code 404]]></description>
        </item>
        <item>
            <title><![CDATA[Hollywood movie aside, just how good a physicist was Oppenheimer? (130 pts)]]></title>
            <link>https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he</link>
            <guid>36808001</guid>
            <pubDate>Thu, 20 Jul 2023 23:07:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he">https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he</a>, See on <a href="https://news.ycombinator.com/item?id=36808001">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[An invitation to a secret society (184 pts)]]></title>
            <link>https://www.experimental-history.com/p/an-invitation-to-a-secret-society</link>
            <guid>36807763</guid>
            <pubDate>Thu, 20 Jul 2023 22:42:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.experimental-history.com/p/an-invitation-to-a-secret-society">https://www.experimental-history.com/p/an-invitation-to-a-secret-society</a>, See on <a href="https://news.ycombinator.com/item?id=36807763">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg" width="402" height="512.7688442211055" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1523,&quot;width&quot;:1194,&quot;resizeWidth&quot;:402,&quot;bytes&quot;:210556,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Photo cred: my dad</figcaption></figure></div><p>I hereby invite every curious human to do science and post it on the internet.&nbsp;</p><p>Ask questions, collect data, write stuff, and make it available to everyone. You should feel as free to do and share research as you would feel uploading a video to YouTube or a song to Spotify.</p><p>You don‚Äôt actually need my or anyone else‚Äôs permission to do this, but sometimes people need a little encouragement, so: come on in!</p><p><span>Actually, let me make that a little more urgent: </span><em>Please come in, we need you</em><span>.</span></p><p><span>See, scientific progress has </span><a href="https://www.nature.com/articles/s41586-022-05543-x" rel="">slowed</a><span>. We fund more research than ever and </span><a href="https://www.theatlantic.com/science/archive/2018/11/diminishing-returns-science/575665/" rel="">get way less bang for our buck</a><span>. We spend 15,000 years of collective effort every year on a peer review system that </span><a href="https://www.experimental-history.com/p/the-rise-and-fall-of-peer-review" rel="">doesn‚Äôt do its job</a><span>. Fraudsters can publish </span><a href="https://retractionwatch.com/the-retraction-watch-leaderboard/" rel="">dozens</a><span> of papers before they get caught, if they get caught at all.</span></p><p>This is bad. Our world is full of problems, and science is the main way we solve them. We‚Äôve got climate change, an obesity epidemic, and a lot of sad people. There are folks dying of poverty and preventable disease. Heck, we still mainly make electricity by burning dinosaur bones. This can‚Äôt be as good as it gets.</p><p><span>Lots of people have lots of ideas about how to get science started again. Give out</span><a href="https://www.psychologicalscience.org/publications/badges" rel=""> badges</a><span> for good behavior! Do </span><a href="https://www.science.org/doi/full/10.1126/science.aac4716?casa_token=Tg8kLVSrqm8AAAAA:VwyG3JnP8P-myr_yw4qoWqRV0mAbfcOmF08kfOb2VLq7rXwhan7n5pSOib0Lq_wCNdHBVuwpE1Yms2U" rel="">giant replication studies</a><span>! Demand </span><a href="https://www.nature.com/articles/s41562-017-0189-z" rel="">tinier</a><span> p-values!</span></p><p><span>I don‚Äôt think any of these solutions will work because they‚Äôre trying to solve the wrong problem. They‚Äôre aimed at stamping out the worst research, but </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">science is a strong link problem</a><span>: we make progress by producing good stuff, not by preventing bad stuff. When you‚Äôre in a strong-link problem, the answer is to turn up the weirdness. More wild hypotheses! More risky research! The useless ideas will die from disuse, but the useful ideas will live on.</span></p><p>This is where you come in.</p><p>Professional science does a lot of good stuff. It gives people paychecks, health insurance, research funding, offices, and colleagues. It allows large groups to work together on big projects like launching telescopes into space. And it gives young, curious people a place to start: if you want to ask and answer questions about the universe, academia is an obvious career path.</p><p><span>But that good stuff comes at a price. Professions are bundles of </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">weak-link</a><span> interventions; they keep out quacks, but they also keep out revolutionaries. They enforce standards, which tends to make things‚Ä¶standard. They select for a pretty homogenous group of people‚Äîin this case, folks who got good grades in college, did research in the right institutions with the right people and published in the right journals. Then they make all those people even more similar to one another, steeping them in the same culture and putting them in competition for the same rewards, like grants, jobs, and citations.</span></p><p><span>Right now, professional science is like a world where every organism is trying to be a mammal. Mammals are great: milk-producing glands, body hair, ears that have three bones in them, what‚Äôs not to like? But if you‚Äôve </span><em>only</em><span> got mammals, you‚Äôre in big trouble. Monocultures are fragile and prone to collapse because every single organism has identical weaknesses. What you need is an ecosystem‚Äîhawks, sea urchins, fungi, various types of fern, and so on.</span></p><p>Creating diverse ecosystems is hard for humans because they like to do whatever everyone else is doing, even when they know it‚Äôs wrong. So when you‚Äôre trying to be a mammal and you see someone else trying to be a lizard, you might think they‚Äôre just doing a bad job being a mammal. ‚ÄúYou should try having little hairs all over your body,‚Äù you might tell them. But a lizard isn‚Äôt a bad mammal. It‚Äôs a lizard. Its job is to eat flies and bask on rocks.</p><p><span>What I‚Äôm saying is: </span><em>be the lizard</em><span>. The mammals‚Äîthat is, mainstream scientists, the ones who get PhDs and professor jobs‚Äîhave their niche covered. What we need is more people doing botany in their backyards. We need basement chemists. We need amateur geologists and meteorologists.&nbsp;</span></p><p>Heck, if some mammals want to try a different niche, so much the better: ditch the projects you think are pointless, do the thing you think is most important, write it in your own words, and put it on the internet. There‚Äôs plenty of space for everyone.</p><p>It will be! But remember two things.</p><ol><li><p><span>Most of the professional science we produce right now is bad. Seriously, pick a paper at random and see how well it holds up. We recently found out that the chair of a Harvard department </span><a href="https://datacolada.org/109" rel="">probably faked a bunch of her data</a><span>. The bar is not high, folks!</span></p></li><li><p><span>Bad stuff is okay. I cannot stress enough that </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">science is a strong-link problem</a><span>, and what we really care about is how much </span><em>good </em><span>stuff we get, even if it means we also get a bunch of bad stuff.</span></p></li></ol><p>What I‚Äôm proposing here isn‚Äôt actually new. In fact, it‚Äôs ancient. People have been making knowledge in all sorts of ways ever since Socrates started walking around and saying stuff.&nbsp;</p><p><span>Some of these people didn‚Äôt have traditional jobs because they didn‚Äôt have to. </span><a href="https://en.wikipedia.org/wiki/Francis_Galton" rel="">Francis Galton</a><span>, the guy who came up with (among many other things), correlation, twin studies, fingerprinting, weather maps, and questionnaires, was independently wealthy. So were </span><a href="https://en.wikipedia.org/wiki/Charles_Darwin" rel="">Darwin</a><span> and </span><a href="https://en.wikipedia.org/wiki/Robert_Boyle" rel="">Boyle</a><span> and many of the members of the original </span><a href="https://en.wikipedia.org/wiki/Royal_Society" rel="">Royal Society</a><span> and</span><a href="https://en.wikipedia.org/wiki/British_Science_Association" rel=""> British Association</a><span>. As I wrote in </span><a href="https://www.experimental-history.com/p/how-to-keep-cakes-moist-and-cause" rel="">my review of Galton‚Äôs autobiography</a><span>, dabbling in science used to be a common pastime for rich dudes‚Äîa little astronomy here, a little vivisection there.</span></p><p><span>Money makes everything easier, obviously, but plenty of now-legendary scientists had to do their thing part-time while finding other ways to pay the bills. </span><a href="https://en.wikipedia.org/wiki/Albert_Einstein" rel="">Einstein</a><span> published some of his most important work while he was still a patent clerk. </span><a href="https://en.wikipedia.org/wiki/Thomas_Bayes" rel="">Thomas Bayes</a><span>, whose theory of probability still sets nerd hearts aflutter, was a priest. </span><a href="https://www.britannica.com/biography/Gregor-Mendel" rel="">Gregor Mendel</a><span>, the pea plant guy who founded genetics, was a monk. </span><a href="https://en.wikipedia.org/wiki/Galileo_Galilei" rel="">Galileo</a><span> and </span><a href="https://en.wikipedia.org/wiki/Leonardo_da_Vinci" rel="">Da Vinci</a><span> spent much of their careers trying to worm their way into the good graces of various</span><a href="https://escholarship.org/uc/item/94q0q1gq" rel=""> patrons</a><span>. </span><a href="https://en.wikipedia.org/wiki/Marie_Curie" rel="">Marie Curie</a><span> did her early work in a shed next to a French university; they only gave her a job after she got famous. </span><a href="https://en.wikipedia.org/wiki/Antonie_van_Leeuwenhoek" rel="">Antonie van Leeuwenhoek</a><span> sold drapes to support his side hustle of inventing microbiology.</span></p><p><span>I predict that these last few decades, in which professional science nearly eradicated the dabbler and the part-timer, will turn out to be a blip in history, for two reasons. First, the structures of academia are so warped, competition is so fierce, and opportunities are so scarce that even its biggest adherents spend most of their time complaining about it. When numerous Nobel Laureates are saying that </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">they couldn‚Äôt have done their Nobel Prize-winning work in today‚Äôs system</a><span>, something‚Äôs bound to break.</span></p><p><span>And second, for the first time in human history, the tools of science are cheap, and knowledge is nearly free. Your laptop can store and analyze more data than Galileo could have even imagined. Internet </span><a href="https://sci-hub.se/" rel="">pirates</a><span> have toppled the scientific paywall and made nearly every paper ever written freely accessible to everybody. Nobody can stop you from </span><a href="https://psyarxiv.com/2uxwk/" rel="">uploading a PDF of your research to the internet</a><span>, where tens of thousands of people might see it. The only thing stopping you from jumping in is your own fear.</span></p><p>If you're interested in accepting this invitation, here are four ways I can help.</p><p><strong>#1: If you email me for help on a scientific project, I will respond.</strong></p><p>I might not respond right away‚ÄîI‚Äôm pretty slow at email‚Äîbut I will get back to you eventually. I will take your ideas seriously and talk to you like a colleague, because we are all colleagues in the great project of understanding the universe. That also means if your ideas seem crazy or your methods seem flawed, I‚Äôll tell you. I can't keep up every email chain indefinitely, but I‚Äôll reply to everyone at least once, or until I simply can‚Äôt keep up.</p><p>Of course, there are lots of subjects that I know nothing about, which brings me to:</p><p><strong>#2: I‚Äôll connect you to other people who have similar interests.</strong></p><p>I set up a Discord server for folks doing science, and I‚Äôll add anyone who reaches out and explains what they‚Äôre looking to do. Once we reach a critical mass, this could be a place where people go for advice, to discuss ideas, and find collaborators.</p><p>I'll check in occasionally, but I expect to be pretty hands-off. I‚Äôm intending this to be a place where people talk to each other, not to me.</p><p><strong>#3: If I see you doing good stuff, I'll link to it.</strong></p><p>Self-explanatory. And finally:</p><p><strong>#4: I'll answer a few questions to get you started.</strong></p><p><strong>Where do I start?</strong></p><p>Probably with something that seems weird to you. Something that annoys you because you don't understand it. Some parts of research can be boring; wanting to know the answer really bad will help keep you going.</p><p><span>Also, read </span><a href="https://slimemoldtimemold.com/2022/02/10/the-scientific-virtues/" rel="">The Scientific Virtues</a><span>.</span></p><p><strong>What if I don‚Äôt have any formal training or credentials?</strong></p><p>Formal scientific training is way less formal than you think.</p><p><span>You might imagine that when you enter a PhD program, a wise old scientist sits you down and tells you all the secrets of science. This doesn't happen. You take a few classes, most of them totally irrelevant to the research you end up doing. When you have a question about statistics, you go to </span><a href="https://stackoverflow.com/" rel="">StackOverflow</a><span>. Most of the papers you read are the ones you find for yourself, probably using </span><a href="https://sci-hub.se/" rel="">Sci-Hub</a><span> because it's easier and faster than accessing papers legally through your university.&nbsp;</span></p><p>I was lucky enough to have a terrific advisor who taught me a ton, but that's pretty rare‚Äîplenty of people spend years of their PhD just waiting for their boss to respond to an email. So if your scientific education is mostly DIY, well, so is everyone‚Äôs.</p><p><strong>Haven‚Äôt all the easy ideas been taken?</strong></p><p><span>No, and if you say that again </span><a href="https://www.experimental-history.com/p/ideas-arent-getting-harder-to-find" rel="">I will fight you</a><span>. If you start with something you don‚Äôt understand, there‚Äôs a good chance that soon enough you‚Äôll bump up against something that no one understands.&nbsp;</span></p><p><strong>How can I do anything useful when I don‚Äôt have any resources?</strong></p><p><span>You can do a lot of interesting stuff with cheap, simple methods. </span><a href="https://www.experimental-history.com/p/pop-culture-has-become-an-oligopoly" rel="">Pop culture has become an oligopoly</a><span> was just "copy data off the internet and make some graphs."</span><a href="https://www.pnas.org/doi/10.1073/pnas.2011809118" rel=""> Do conversations end when people want them to?</a><span> was just "have people talk and then ask them when they wanted to stop." Slime Mold Time Mold's </span><a href="https://slimemoldtimemold.com/2022/07/12/lose-10-6-pounds-in-four-weeks-with-this-one-weird-trick-discovered-by-local-slime-hive-mind-doctors-grudgingly-respect-them-hope-to-become-friends/" rel="">Potato Trial</a><span> and </span><a href="https://slimemoldtimemold.com/tag/community-trial/" rel="">Half-Tato Trial</a><span> were just "get people on the internet to eat potatoes and weigh themselves." Rita Levi-Montalcini discovered how the nervous system develops by </span><a href="https://archive.is/S1aLJ#selection-3189.233-3189.607" rel="">poking chicken eggs with a needle</a><span> in her bedroom/laboratory.</span></p><p>In fact, if you're willing to use simple methods, you actually have an advantage over professional scientists. The pros wanna look cool to their colleagues (and win big grant money from the government), so they have to use the fanciest, most advanced techniques, even when simpler stuff would do them better. That's great for you, because it means the professionals will rarely investigate important questions if they don't require giant magnets or ten thousand computer cores or whatever. Cheap ideas are just lying around for you to scoop up. So scoop ‚Äòem, darn it!</p><p><strong>What if I do a bad job?</strong></p><p>If you work on a project that goes nowhere, who cares? Move on to the next one. Don't worry about making mistakes‚Äîthere is a 100% chance you will make a mistake, so when it happens, go "oops" and fix it. Be honest and transparent. The stakes are way lower than they seem.</p><p><strong>What if no one listens to me?</strong></p><p><span>That might happen! It's happened to lots of people who turned out to be right, like </span><a href="https://en.wikipedia.org/wiki/Ignaz_Semmelweis" rel="">the guy who told doctors they should wash their hands</a><span>, and </span><a href="https://en.wikipedia.org/wiki/Alfred_Wegener" rel="">the guy who hypothesized that all the Earth's landmasses used to be one big Pangea</a><span>.</span></p><p>In my experience, though, the internet is smaller than you imagine, and good work tends to travel. But you should do this because you think it's important and you like doing it. If you're doing it because you want influence and affirmation, reconsider!</p><p><strong>What if people yell at me?</strong></p><p>They might. Whenever you post something publicly, there's a chance people will be mean to you, because some people think that being nasty makes them look smart. Unfortunately, the only solution is to ignore them.</p><p><strong>Is it legal to do science on your own?</strong></p><p>Don't laugh‚ÄîI've had professional scientists ask me this!</p><p>In short: yes. You don't need a license to do science. But you still have to obey the law. You can't pretend to be a doctor, steal people's data, secretly lace someone's lunch with chemicals and watch their reaction, etc. You shouldn‚Äôt do anything illegal or immoral in pursuit of scientific truth, just like you shouldn‚Äôt do it in pursuit of anything else.</p><p><strong>How do I know whether someone has tested my idea already?</strong></p><p><span>Career scientists don‚Äôt get any credit for re-dos, so they worry a lot about making sure no one has scooped them. But it‚Äôs actually good for science if people are replicating previous work, so long as the idea was a useful one in the first place. Many studies are bad, some of them are straight-up fraudulent, and it‚Äôs pretty likely that you‚Äôll ask the question in a different way than your predecessors did. Plus, replicating previous work is </span><a href="https://slimemoldtimemold.com/2022/03/23/the-only-true-wisdom-is-knowing-that-you-cant-draw-a-bicycle/" rel="">good practice</a><span>. So if you really want to get to the bottom of something, just go for it.</span></p><p><strong>What can I do that a professional scientist can‚Äôt?</strong></p><p><span>Oh man, </span><em>tons</em><span>. Here are just a few things.</span></p><ul><li><p>Screw around on projects that might be a total waste of time, just for fun.</p></li><li><p>Write a paper that‚Äôs like ‚ÄúHey here‚Äôs a weird thing I found and I have no idea why it happens‚Äù</p></li><li><p>Research stuff that‚Äôs bizarre or unpopular or disconnected from any existing literature.</p></li><li><p>Write a paper that‚Äôs like ‚ÄúHey my hypothesis was totally wrong, what‚Äôs up with that‚Äù</p></li><li><p>Work on super long-term projects that only bear fruit after decades of work</p></li></ul><p><strong>Do you have any helpful examples of people doing science outside of professional institutions?</strong></p><p>Yes!</p><p><a href="https://aella.substack.com/" rel="">Aella</a><span> is a sex worker and a scientist. She runs big surveys about people‚Äôs sexual behaviors and tries to learn from them.&nbsp;</span></p><p><a href="https://exfatloss.substack.com/?utm_source=substack&amp;utm_medium=web&amp;utm_campaign=substack_profile" rel="">Experimental Fat Loss</a><span> is a pseudonymous blogger who has run lots of self-experiments on weight loss.&nbsp;</span></p><p><a href="https://theeggandtherock.substack.com/" rel="">Julian Gough</a><span> is unspooling a theory of the universe on his Substack, which involves making </span><a href="https://theeggandtherock.substack.com/p/last-minute-gravitational-wave-predictions" rel="">detailed predictions</a><span> for what the International Pulsar Timing Array will detect.</span></p><p><a href="https://slimemoldtimemold.com/" rel="">Slime Mold Time Mold</a><span> are mad scientists who are, among other things, trying to solve the obesity epidemic. They also have a terrific </span><a href="https://slimemoldtimemold.com/2023/06/28/n1-bite-the-bullet/" rel="">series</a><span> on how to run one-person or few-person studies, which could be a good place to start.</span></p><p><strong>This sounds cool, but I don‚Äôt know if I really want to do science. Are there other ways I could help?</strong></p><p>Science needs programmers, project managers, grant writers, editors, research assistants, funders, and a million other things besides. If you want to be involved, get aboard! The Discord will be a good place to start.</p><p><span>If you call what I‚Äôm describing here ‚Äúcitizen science,‚Äù I will karate chop you. I </span><em>despise</em><span> that phrase. All science is science, regardless of the author‚Äôs credentials. Slapping the label ‚Äúcitizen‚Äù on science done by people working outside of institutions is just a way of widening the moat around the ivory tower, of reinforcing the false idea that only people with PhDs and academic jobs get to do ‚Äúreal‚Äù science.&nbsp;</span></p><p><span>You can have impeccable academic credentials, land a fancy job at an elite university, and publish hundreds of papers, all without ever putting a useful piece of knowledge into the world. Many people pull this off! Sometimes they do it by writing papers that are true but meaningless. Other times they do it by opening up an Excel spreadsheet and </span><a href="https://www.nytimes.com/2013/04/28/magazine/diederik-stapels-audacious-academic-fraud.html" rel="">typing in some fake data</a><span>. These people are not scientists, no matter what it says on their office doors.</span></p><p>So I don‚Äôt care if you‚Äôre a nobody from nowhere. I don‚Äôt care if you pay your bills by cleaning toilets, selling Beanie Babies on eBay, or managing an Olive Garden. If you discover some useful nugget of truth about the universe, you‚Äôre a scientist.</p><p>One more thing: I believe that anything that people make on their own, anything they create for pure pleasure, is beautiful.&nbsp;</p><p>People will sit alone in their basements playing guitar simply because they like the sound. They‚Äôll paint, write poems, and whittle wood into little figurines without any expectation of gaining money or fame. It just makes 'em feel good. All of that is beautiful.</p><p><span>Anything that humans only produce in exchange for money, on the other hand, is ugly.&nbsp;No one designs billboards or writes instruction manuals for microwaves on a lark. When people pick up a guitar of their own accord, they sing about love and longing, not about how Tide laundry detergent cleans even the toughest stains. That doesn‚Äôt mean these endeavors are </span><em>bad</em><span>‚Äîsomeone‚Äôs gotta tell you how to work your microwave‚Äîbut it means they aren‚Äôt beautiful.</span></p><p><span>Right now, almost no one sits down and writes a scientific paper for pure pleasure. I talk to people all the time who signed up for academia thinking they were going to uncover the mysteries of the universe, and they ended up doing something that </span><em>kind of </em><span>looks like that, but isn't really, and somehow feels pretty bad a lot of the time. They say things like, "I usually come to hate my papers by the time I get them published."</span></p><p>That doesn't mean that science is inherently ugly. It means we aren't doing it the beautiful way. When you do science under duress, you produce something that looks a lot more like a Tide commercial than a love song. It's still possible to make something useful that way, but it's very hard to make something beautiful.</p><p>You, though, can do things the beautiful way. You can make knowledge the same way you would make music in your basement: just because you like doing it. I hope you will. I'll be waiting to hear from you.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A 17th-century font in a 21st-century thesis (378 pts)]]></title>
            <link>https://www.linyangchen.com/Typography-Fell-Types-font</link>
            <guid>36807108</guid>
            <pubDate>Thu, 20 Jul 2023 21:38:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.linyangchen.com/Typography-Fell-Types-font">https://www.linyangchen.com/Typography-Fell-Types-font</a>, See on <a href="https://news.ycombinator.com/item?id=36807108">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="sm-page-widget-rbd4vSp7" data-typeid="10174308" data-layout-column="0" data-layout-row="S"><p>
¬©<i>Lin Yangchen</i></p><p>
I was never completely happy with most digital fonts for flowing text, even those like Caslon and Garamond. They are&nbsp;too uniform and disciplined. The letters are sized and aligned to nanometer accuracy, the serifs are exactly the same, it's like laser, like a robot. They are&nbsp;missing one of the endearing characteristics of the old letterpress typefaces: the handcut, manually typeset&nbsp;look. Faithful&nbsp;digital reproductions of original letterpress typefaces are hard to come by; one of them is Founder's Caslon (<a title="Justin Howes Founder's Caslon Tugboat sample" href="https://www.tug.org/TUGboat/tb24-3/wong.pdf" target="_blank">sample pdf</a>) by Justin Howes. Sadly it is no longer commercially available after he died of a heart attack at the age of 41 in 2005.
</p><center><img src="http://www.linyangchen.com/photos/i-G9xQbXV/0/X3/i-G9xQbXV-X3.jpg" height="800" alt="William Caslon typeface specimen sheet 1741"><br><span>One of the original specimen sheets of William Caslon, printed in London in 1741.</span></center>
<p>
One day, I decided to visit my university library to see the&nbsp;original specimen sheet printed by William Caslon in 1741, in the library's rare book collection. It was a timeless experience seeing and handling the specimen sheet itself, not a digital scan of it.&nbsp;It was like a live performance of the Vienna Philharmonic at the Musikverein, versus an mp3 on the iPod. I began to look for a way to emulate letterpress printing in <a href="https://linyangchen.files.wordpress.com/2015/10/lin_yangchen_phd_thesis.pdf" target="_blank">my PhD dissertation</a>. Fortunately, the university did not stipulate that I must format it in Times New Roman font size 12.
</p><p>
The&nbsp;so-called '<a title="Dutch Fell Types wikipedia" href="http://en.wikipedia.org/wiki/History_of_Western_typography#Fell_types" target="_blank">Dutch Fell types</a>' from c. 1670 quickly captured my attention, as they are the primeval typeface from which Caslon was&nbsp;derived and they predate Caslon by about half a century. It turns out that type engineer Igino Marini has embarked on a labour of love in the last decade to faithfully digitize the Fell types, empower it with all the advanced typographic features of OpenType, and make it <a title="IM Fell types digital revival font Igino Marini" href="http://iginomarini.com/fell/the-revival-fonts/" target="_blank">freely available</a>&nbsp;for the benefit of humanity. More recently it became available in Google Fonts. In fact, you are reading it right now.
</p><center><img src="http://www.linyangchen.com/photos/i-Whp25CZ/0/X3/i-Whp25CZ-X3.jpg" width="800" alt="Fell Types Specimen 1693 Oxford University Press"></center>
<p><span>The very first specimen book of the Fell types, printed at Oxford University Press in 1693, when J. S. Bach was only 8 years old. Only four copies are known to exist. Furthermore, many of the original punches and matrices, some of which were made of wood, have been lost (Oxford University Press 1900), so these specimens are the only record.</span></p><p>
Fell is quite a badass typeface, even by letterpress standards. It has an inconsistent x-height and ragged baseline, and no two serifs are the same.&nbsp;But the person who cast these types was no reckless driver. Inspect the characters and you'll see that underlying all the noise is an exquisite sense of balance not only within any given character, but also in the `flow' from one character to the next, making it quite comfortable to read despite the noise. Indeed, these qualities characterized&nbsp;similar typefaces widely used in northwestern continental Europe during the time, from the Netherlands (see&nbsp;Ensched√© 1978) to Denmark (see Nielsen 1934), and would later go on to take the world by storm in Caslon, and they are still celebrated today. They have the spontaneity of a live performance of a great symphony, in which musical instruments played by humans are never perfectly in tune and occasionally quite far out of tune, and with all the harmonic transients at the beginning and end of every note that make the music breathe like a living organism.
</p><p>
If you compare Caslon and the Fell types glyph by glyph, there are mainly superficial differences. But I realized from viewing the&nbsp;blocks of text as a whole that there is a more significant, though subtle, difference at the level of words, lines and paragraphs. At reading-text optical sizes, the Fell types are slightly heavier in the vertical strokes than Caslon, giving the former not only a slightly darker colour on the page but also a slightly more `picket-fence' look. In extreme cases, the `picket-fence' effect can make a typeface harder to read at least to the modern eye (<a title="Blackletter gothic script Wikipedia" href="http://en.wikipedia.org/wiki/Blackletter" target="_blank">Gothic script</a>&nbsp;comes to mind).&nbsp;The `picket fence' can make the reader feel a little `held back', especially in long passages of text. The abnormally large line spacing required by universities for dissertations only exacerbates the imbalance between vertical and horizontal density.
</p><center><img src="http://www.linyangchen.com/photos/i-FKtDFgJ/0/X3/i-FKtDFgJ-X3.jpg" height="600" alt="Fell types English Roman and English Italic 1693 specimen Oxford"></center>
<p><span>The English Roman and English Italic of the Fell types in the original 1693 specimen. Note the slight `picket-fence' effect of the English Roman text as a whole, caused by relatively thick vertical strokes, which I tried to alleviate by increasing the letterspacing (see main text below).</span></p><center><img src="http://www.linyangchen.com/photos/i-K7mHNX9/0/X3/i-K7mHNX9-X3.png" width="360" alt="William Caslon 1741 Specimen English Roman"></center>
<p><span>The corresponding English Roman from the Caslon specimen, showing slightly less `picket fencing' because the strokes within individual letters are more uniform in weight.</span></p><p>
Igino Marini very kindly contributed his views in 2015: <i>The Fell Types project premise was that of reproducing as much as possible the original types without any other active interpretation. Applied both to the digitized shapes and the global spacing tightness. So I can't say anything about the latter because I didn't decide it. The punchcutter could. Eventually the original samples from Carter and Morison's books were set even tighter. It's obvious that a digital typeface, like Adobe Caslon, conceived in a different century, intended to be used at a different size on different media for a different audience may be somewhat different. The Fell Types were meant to be faithful not pleasant nor modern.</i> ‚Äî Igino Marini
</p><p>
After careful consideration, I decided&nbsp;to break one of the cardinal rules of typesetting: that one should never change the letterspacing of the lowercase letters, because it has already been perfected by the original creator for optimal appearance and readability. I am perhaps more liberal with this rule, as I believe that typography, like music, is an art that that might be subject to some nuances of interpretation. One should of course be wary of overdoing it. In this case I spaced out all the letters just enough that the vertical and horizontal 'resistances' of the text felt just about equal, using the <a href="https://ctan.org/pkg/fontspec" target="_blank">fontspec</a> package in LaTeX. The difference between the end result and the original is almost unnoticeable at the microscopic level, but at the macroscopic level there is in my eyes a very subtle and positive release of 'pressure' that allows the text to breathe and read more freely. It is certainly not as far-fetched as Leonard Bernstein's <a title="Leonard Bernstein BBC Symphony Orchestra Elgar Enigma Variations Nimrod" href="http://youtu.be/JWsqEbCxh-w" target="_blank">controversially slow reading</a> of <i>Nimrod</i> from Elgar's <i>Enigma Variations</i> with the BBC Symphony Orchestra.
</p><center><img src="https://www.linyangchen.com/photos/i-t4KNDRt/1/O/i-t4KNDRt.png" width="560" alt="IM Fell English Pro default letterspacing"><br><span>Fell English Roman at default letterspacing, exhibiting 'picket fencing' (but less so compared to many other typefaces).</span>
<p>
<img src="https://www.linyangchen.com/photos/i-xrdBT36/1/O/i-xrdBT36.png" width="560" alt="IM Fell English Pro increased letterspacing"></p></center>
<p><span>The same paragraph with increased letterspacing in LaTeX to reduce `picket fencing'. The difference is hardly noticeable but may reduce eye strain over long periods of continuous reading. Also notice the margin kerning (protrusion) in both cases, achieved using the <a href="https://www.ctan.org/pkg/microtype" target="_blank">microtype</a> package in LaTeX.</span></p><p>
But it turned out that that wasn't the end of the story. After spacing out the lowercase letters it was noticed that the italic type now looked too spaced out, because italic letters resembling handwriting are predisposed to be somewhat more connected together than roman letters. I therefore compressed the italic words back to their default letterspacing, which looked and read better. Then I noticed that the italics in the page headers, which were rendered at a smaller font size, looked too cramped. A&nbsp;re-examination of&nbsp;the 1693 specimen revealed that italics at smaller font sizes were actually&nbsp;set with a larger letterspacing, improving their readability. So I re-adjusted my headers to space out the italics there until they looked perfect, which required an increase in spacing larger than that applied previously in the main roman text. All in a day's work for typesetting‚Äîthey had an even harder time positioning every single character individually back then. When I awoke the next morning, the normal-sized italics in the main text looked too tight to my rejuvenated eyes, &nbsp;so I re-adjusted them again. <i>Now</i> they look right. See <a href="https://linyangchen.files.wordpress.com/2015/10/lin_yangchen_phd_thesis.pdf" target="_blank">my dissertation</a> for the final result.
</p><p>
A word about LaTeX. The Fell font file exploits such advanced configurations of digital font standards that one encounters a series of challenges getting it to typeset in LaTeX and getting the pdf to display and print properly; see <a href="http://tex.stackexchange.com/questions/201595/accented-letters-with-im-fell-fonts/" target="_blank">this thread on Stack Exchange</a> where fellow users and I discuss some of our problems and solutions.
</p><p>
<b>Adjustments to individual characters</b></p><p>
Finally, I manually enhanced some of glyph shapes and kerning in&nbsp;the font,&nbsp;the final step in making my thesis&nbsp;typographically unique and achieving my personal typographic ideal.&nbsp;Changes to the glyph shapes and kerning tables of a font cannot be made in a word processor or Adobe Illustrator; a specialized font editing programme is needed. I used <a title="FontForge" href="https://fontforge.org/" target="_blank">FontForge</a>. With it, you can take a font apart, explore its gears, springs and nuts and sculpt it to perfection like an artisan with a hammer and chisel.&nbsp;The IM Fell fonts came with the SIL Open Font License at the time I made the changes.
</p><p>

The IM Fell font is actually not exactly identical to the original Fell types, because it was digitized from a later reproduction of the originals using letters newly cast in the late 19th century, which I found to be slightly different by comparing with the original specimens from 1693 in the library. However, the quest for originality wasn't my main motivation for making changes; it was that a few of the letters in IM Fell had (faithfully reproduced) obvious kinks, presumably introduced during the 19th-century recasting process, that detracted from its readability.&nbsp;The digitized font is actually slightly&nbsp;overweight compared to the original (see illustrations above), but I decided not to try reducing its weight, because there is a real risk of distortion when trying to reduce the thicker parts more than the thinner parts, and the current colour of the text block as a whole does not come across as too dark for reading comfort, somewhat thanks to my increased letterspacing.
</p><p>
LIST OF MODIFICATIONS
</p><p>
1. Removed the overlap between the solidus and the dot of 'i', which can occur occasionally e.g. 'out/in'. Another option is to use a dotless i in a sort of '/i'-ligature‚Äîin LaTeX just use {\i} to get the dotless i. But the solidus should ideally not be used in prose.
</p><p>
<img src="http://www.linyangchen.com/photos/i-xK3JjSG/0/O/i-xK3JjSG.png" alt="" width="411" height="410"><br><span>Before: solidus overlapping with dot of i.</span></p><p>

<img src="http://www.linyangchen.com/photos/i-TD2tnsR/0/O/i-TD2tnsR.png" alt="" width="411" height="410"><br><span>After: overlap removed.</span></p><p>
2. Fixed the upwards-protruding upper right serif of letter u. In the original specimen of the Fell types there is no protrusion (see specimen above). I also made the serif horizontally shorter so that it doesn't appear joined to the left-hand stroke, making it more readable.
</p><p>
<img src="http://www.linyangchen.com/photos/i-cgfhzp6/0/O/i-cgfhzp6.png" alt="" width="381" height="368"><br><span>Letter u before, with protruding right serif.</span></p><p>
<img src="http://www.linyangchen.com/photos/i-sNHnbTL/0/O/i-sNHnbTL.png" alt="" width="385" height="370"><br><span>Letter u after.</span></p><p>

3. Made the small-cap C look less like G. In this case the specimen&nbsp;itself looks like G, but it is most likely an unintended aberration caused by imperfect cutting or printing, because all the other C's don't look like that.
</p><p>
<img src="http://www.linyangchen.com/photos/i-bKjhV2T/0/O/i-bKjhV2T.png" alt="" width="357" height="362"><br><span>Small-cap C before, resembling G.</span></p><p>
<img src="http://www.linyangchen.com/photos/i-cp74Spg/0/O/i-cp74Spg.png" alt="" width="359" height="365"><br><span>Small-cap C after.</span></p><p>

4. Lengthened the&nbsp;en dash and em dash, which previously looked like the hyphen and en dash respectively. Also made them sleeker so they blend better into the 'colour' of the text block as a whole.
</p><p>
5. Not modified: overlap of adjacent italic g's. I left it alone, although this is physically impossible in letterpress unless cut together, because separating the bottoms would result in too much space between the two characters. Unfortunately there is no example in the specimen book to indicate how this would have been typeset back then. Short of drawing a custom gg ligature, it doesn't look too bad as it is; a little intimacy won't hurt.
<br>
<img src="http://www.linyangchen.com/photos/i-Gww4BZN/0/O/i-Gww4BZN.png" alt="" height="154"></p><p>
6. Finally, it seems there's no way around this other than avoiding words that did not exist at the time:
<br>
<img src="https://www.linyangchen.com/photos/i-Wm3LTrq/0/O/i-Wm3LTrq.png" alt=""></p><p>
In these close-up illustrations of the glyphs one can see how badass the font is with its kinks and nicks. The wood and metal type itself was unlikely to have had so many defects; the roughness of papers made at the time also had a role to play. When printed at normal size on modern-day smooth papers, these&nbsp;kinks and nicks achieve the intended effect of&nbsp;making it look like handmade paper pressed onto handcut letters.
</p><center><img src="http://www.linyangchen.com/photos/i-6XML3fX/0/O/i-6XML3fX.jpg" alt="2001: A Space Odyssey dawn of man prehistoric ape" width="818" height="574"></center><p>
Did I take things a little too far? Should a dissertation&nbsp;involving 21st-century computing resemble a book printed in the Renaissance? Perhaps the answer lies in this scene from <i>2001: A Space Odyssey</i>, where the distant past meets the distant future.
</p><p>

<b>Literature cited</b></p><p>
Ensched√©, C. 1978. <i>Typefoundries in the Netherlands from the Fifteenth to the Nineteenth Century.</i> Stichting Museum&nbsp;Ensched√©, Haarlem.
</p><p>
Nielsen, L. 1934. <i>Dansk Typografisk Atlas 1482‚Äì1600.</i> J. J√∏rgensen &amp; Co., K√∏benhavn.
</p><p>
Oxford University Press 1900.<i> Notes on a Century of Typography at the University Press, Oxford 1693‚Äì1794.
</i></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Beautiful Friend (101 pts)]]></title>
            <link>https://thepointmag.com/examined-life/my-beautiful-friend/</link>
            <guid>36807071</guid>
            <pubDate>Thu, 20 Jul 2023 21:35:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thepointmag.com/examined-life/my-beautiful-friend/">https://thepointmag.com/examined-life/my-beautiful-friend/</a>, See on <a href="https://news.ycombinator.com/item?id=36807071">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
						            <p>Toward the end of my teens, it began to dawn on me that my face was probably fully formed. That no radical change was forthcoming. That even back when I still held out hope, my features were meanwhile settling, treacherous, into a mediocrity which surprised, humiliated, crushed me. In other words, I was not going to be any great beauty. I was only going to be what I was: attractive occasionally, like most people, relative to whoever happened to stand nearby. I was horrified; I couldn‚Äôt get over it. Being average-looking is, by definition, completely normal. Why hadn‚Äôt anyone prepared me for it?</p>
<p>I could not have discovered I was plain without discovering K was pretty. She is my friend of many years. Back then, it obsesses me: how we make each other exist. We attend elementary school together, then high school. She enrolls at a nearby college. Her tall grants me my short; my plump her skinny; her leonine features my pedestrian ones. I resent her as much as I exult in her company. In between us, and without words for it, the female universe dilates, a continuum whose comparative alchemy seems designed to confront me, make me suffer, lift her up. Her protagonism diminishes me, or does it? I confuse myself for a long time thinking I am the planet, and K is the sun. It takes me a long time to forgive her.</p>
<p>Comparison steals my joy, but it also gives me a narrative. All in all, it feels radical to make a world together, she and I, a silent tournament of first kisses, compliments, report cards. I live at a fixed point from K, her lucky arms, her lucky neck, her lucky elbows. I pursue beautiful friends like some women do men who will strike them in bed at night. On account of our addictive relativity. On account of my envy, which I‚Äôve made, like many women, the secret passion of my life.<span>&nbsp;</span></p>
<p>‚óè</p>
<p>There‚Äôs something gorgeously petty about many women‚Äôs lives. They‚Äôre not trying to be great. They‚Äôre trying to be better. It‚Äôs why women diet together; dye their hair light, then dark, then light again; dress for each other; race to get engaged; wait to get divorced; find a taken man more attractive than a free one. Become girlbosses in droves and then give it up. A woman can spend her whole life in real or imagined competition with her friends, finding herself in the gaps between them. Especially in the game of looks, there is no excellence that is not another woman‚Äôs inadequacy, no abundance that does not mean lack. A great beauty is discovered, like crude oil, or gold. That means in a parched desert, or a dirty riverbed, where the rest of us must languish. Our democratic sensibility commands us to raze all unfairness. Yet the way we sacralize beauty, our treatment of the women who try to level it, our satisfaction when no one can, calls our bluff.</p>
<p>For me, the humiliations stack up. I nurse them like little children. I pick at them like scabs. The horrid boy I desperately love, who pretends to love me, studying K‚Äôs legs on the trampoline. We are seventeen, and I study them too. Up and down, slender, hairless, vanishing up the thighs, into the sun. Later he sends her a message on Facebook. She does nothing to betray me. What I want is for those legs and the mat of the trampoline to go rigid, to snap, for her bones to spray and splinter, to pierce me through the eyes, so I cannot look at either of us anymore.<span>&nbsp;</span></p>
<p>Or, a couple years later, when I believe I‚Äôve matured, gotten over it, displaying my fake ID at a college party. It‚Äôs my friend‚Äôs, I explain. It‚Äôs K‚Äôs. How funny. It works, we look <i>just enough</i> alike. A drunken classmate laughs. ‚ÄúYes,‚Äù he says. ‚ÄúExcept she‚Äôs hotter than you.‚Äù My face silences him, then the room. His words spread my legs, pass a hand through me, find something dying. He apologizes until I console him. I return to my dorm and drown in abjection, almost pleasurably at this point. I‚Äôd like to call my mother, whom I resemble. Except that in all of our talks of puberty, she omitted this. She gave me my face and felt guilty; I had to learn for myself how my suffering held something up.</p>
<p><span>My own inglorious adolescence ends with me dumped, over brunch, at twenty. He has a strong jaw which dazes and a soft birthmark, near the mouth. He is ten years older than me. That last bit is not the part that hurts. It‚Äôs that he‚Äôs telling me about another girl. ‚ÄúShe‚Äôs amazing,‚Äù he says. ‚ÄúI haven‚Äôt felt like this in a long time.‚Äù I think of what we‚Äôve done for a long time and I go to the bathroom and vomit. When I come back he‚Äôs still speaking. I wonder, in silence, what it would be like to be the sort of girl about whom they say, he can‚Äôt shut up about her. ‚ÄúShe‚Äôs a writer,‚Äù he tells me, with love in his eyes. He looks so handsome, I want to kiss him, exactly now, when, <i>because</i>, he can‚Äôt shut up about her. I go home, look her up, write a poem, get over him as soon as I get it published, thinking vaguely, see, there, that was easy, take that‚ÄîI might be less lovely, but there are other competitions, I can be a writer too.</span></p>
<p>‚óè</p>
<p>In those bad <span>years</span> I read and reread a story by √âmile Zola called ‚ÄúRentafoil.‚Äù A satire, it tells of a wicked entrepreneur, Durandeau, who cooks up a nasty scheme of renting out ugly women as living foils for better-looking ones. Strolling around nineteenth-century Paris, observing ‚Äútwo girls tripping along,‚Äù one pretty and one ugly, Durandeau realizes that the ugly woman is an ‚Äúadornment worn‚Äù by her prettier companion. She makes her look good. Her asymmetry sets off her symmetry; her dull face, her shining one. For five francs an hour, Durandeau‚Äôs agency makes available to the ‚Äúupper crust‚Äù ugly women to drag about town. There‚Äôs nothing like the ‚Äúpleasure of a pretty woman leaning on the arm of an ugly one,‚Äù knowing herself enhanced. And nothing like the sorrow of their Foils, who ‚Äúfret and fume and sob‚Äù at night. Finally, the narrator confesses that he ‚Äúmay write the <i>Secret Memoirs of a Foil</i>,‚Äù inspired by one ‚Äúterribly jealous‚Äù employee, lovesick and bitter, who reads too much. ‚ÄúCan you imagine her resentment?‚Äù the narrator asks. I could.</p>
<p>But take the first plain girl that inspires Durandeau. She isn‚Äôt employed or receiving a salary, but she must be getting something. Or else why on earth would she tolerate it? The unfairness of beauty, the pinch of being its friend. The comforting fable says: the great beauty hurts us like a splinter but helps us like a measuring stick to understand ourselves. Affords us insight, depth. An opportunity to compensate. After all, it‚Äôs the plain woman about whom the narrator of ‚ÄúRentafoil‚Äù wants to write, not the beautiful one. I study that poem by Yeats. Waxing about ‚ÄúTwo girls in silk kimonos, both / Beautiful, one a gazelle.‚Äù How casual, I think. How vicious. If she read that, the girl who wasn‚Äôt a gazelle, she probably never recovered. It strikes me only later that she might not have wanted to. For what we tolerate of beauty‚Äîthat pinch‚Äîis also, curiously, what we reap from it.</p>
<p>From Austen to Ferrante, women‚Äôs literature is ripe with dyads of women, made up of a beautiful half and a less beautiful half. Here, the arbitrariness of beauty plays out in long, anguished plots, games of chutes and ladders, whereby some women find themselves socially, magically, economically mobile, and others do not, at least not so easily. We recognize the ‚Äúwinner‚Äù as soon as we read what she looks like. In first-person stories, more often than not, it‚Äôs not the narrator. These plain heroines yearn for, resent, are fascinated by, love, hate, cannot stay away from, their more beautiful, fortunate counterparts. They articulate a precisely feminine pain I know well, worse than menstrual cramps. A sense of one‚Äôs own plainness. Inferiority. An envy so profound and wistful it is almost sexually charged.</p>
<p>This tone in women‚Äôs literature, this snake twist of the belly that signals envy in the same place as desire, engrosses me. Some of the most exquisite passages of eroticism are in the voice of women envious of other women. Wanting them? Sometimes. Wanting to be them? Naturally. I watch K do the dishes, in her bikini top and her peasant skirt, and the tight abdomen that is an insult, and the overhead light that haloes her hair, careless, the soap, the suds, the satisfaction she must feel. In that moment, I want to take the dishcloth and wipe my face from the face of the earth.</p>
<p>‚óè</p>
<p>I<span>&nbsp;</span>read, at first, in search of consolation prizes.</p>
<p><span>In the Neapolitan quartet, Elena Ferrante shows how unfairness, like money, accumulates; beauty forms the mask of what crushes, monopolizes, outshines. Len√π, the narrator, is a dogged teacher‚Äôs pet, born into poverty, who becomes a successful feminist writer mainly thanks to her diligence. Lila, her best friend, is a w√ºnderkind. Along with ‚Äúvirtuosity‚Äù and the power to invent, Lila gets ‚Äúan odor of wildness‚Äù and an ‚Äúenergy that dazed‚Äù men, ‚Äúlike the swelling sound of beauty arriving‚Äù to Naples. Len√π gets pimples and glasses. Some sirocco wind is always at Lila‚Äôs back, making her wealthy; making her loved; making her angry, brave, righteous; almost a model, or perhaps an actress, except she is married so young; the hero, the innovator, the victim, the star.</span></p>
<p>My insistence on fairness nearly convinces me that, in losing, Len√π must be winning something else. After all, what she envies of Lila is exactly what Lila, in turn, provides her with: content. That‚Äôs why Len√π sticks around. When a woman resembles a movie star, her conditions of living take cinematic turns. Life occurs to her quickly, impossibly, like the montage of romance, while the plainer girl plods along, a subject better suited to a documentary. But Lila‚Äôs shimmering existence seeps into Len√π‚Äôs. The ‚Äúdaily exercise‚Äù of noting the ‚Äúconvergences and divergences‚Äù between them, the ‚Äúlines between moments and events‚Äù and those deus ex machinas which evade one and land on the other. Envy makes Len√π observant, a student of contrast. Which is to say a better writer‚Äîgood thing, since we all write ourselves. While everyone plays the main character of their own lives, the plain girl is forced to be a little more thoughtful. She‚Äôd be written by Woolf, not Hemingway.</p>
<p>Doesn‚Äôt being graceful just mean not having to think? Nothing is laborious, everything is effortless, every morning Christmas morning since puberty left so many gifts. The awkward plain girl is driven, instead, to self-obsession. To make a craft of her posture, her eating habits, her odor, her laugh, why they fail her, how to improve them, the variations that make them superior and winsome in that favored someone else. The symbol of being a plain girl is a heart trying hard. Erasing, scribbling. Romanticizing her contours. Narrativizing her lack.<span>&nbsp;</span></p>
<p>This is the bone Ferrante throws the plain girls, only to toss it out. Len√π becomes the writer, sure, but even what shines in her writing, we are given to understand, derives from Lila‚Äôs unpublished work, effortless, with a ‚Äúforce of seduction‚Äù Len√π can only contain, transmit, emulate, as if tracing the path of a comet with her stubby pencil. Whatever prompt for reflection or observation Len√π extracts from Lila, Lila extracts from Len√π too. In other words, don‚Äôt kid yourself, even Len√π‚Äôs silver lining lies in Lila‚Äôs shadow.</p>
<p><img decoding="async" loading="lazy" src="https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4.jpg" alt="" width="1200" height="600" srcset="https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4.jpg 1200w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-300x150.jpg 300w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-1024x512.jpg 1024w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-768x384.jpg 768w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-600x300.jpg 600w" sizes="(max-width: 1200px) 100vw, 1200px"></p>
<p>Perhaps the plight of the plain girl is redeemed by its realism. Women age terribly. The homely woman gets there first. Everyone knows the genetically blessed woman remains better insulated, to some degree, from humiliation, male disdain, poverty. That Joan Didion thought the streetlights would turn green for her strikes one as rather unhinged, until one sees her photograph, and knows it with certainty. Beauty opens like a trapdoor, to second chances, the benefit of the doubt, a job you‚Äôre unqualified for, someone who will marry you, if you so require. The cost may be a life out of touch. The plain woman operates under fewer illusions, always a little closer to the truth. In <i>Wives and Daughters</i>, Elizabeth Gaskell‚Äôs last, unfinished Victorian novel, provincial Molly finds herself the stepsister of worldly Cynthia, whose ‚Äúbeautiful, tall, swaying figure‚Äù brews predictable scandal and then sidesteps it, at Molly‚Äôs cost. For Cynthia wears ‚Äúher armor of magic‚Äù‚Äîthey all do, letting her slip, eellike, out of the usual scrapes, if only to then get into others. The unfortunate and nameless protagonist of Marguerite Duras‚Äôs <i>The Lover</i>, fifteen, compares herself to her classmate, H√©l√®ne Lagonelle. H√©l√®ne is a virgin, her body ‚Äúthe most beautiful of all the things given by God.‚Äù One feels, as one reads, the monsoon brewing. H√©l√®ne is ‚Äúinfinitely more marriageable,‚Äù but ‚Äúdoesn‚Äôt know‚Äù what the girl with no name does, of typical survival. Of course not. We‚Äôve read what she looks like. Such knowledge might be worth the price of plainness, if only it didn‚Äôt require knowing women like H√©l√®ne. ‚ÄúShe makes you want to kill her,‚Äù the girl confesses.</p>
<p>And what of that final possible solace: that beauty is attended by its own kind of suffering. Objectification. Underestimation. Abuse. Too many men and their egos. Even more seductive an idea: Do beauty‚Äôs higher highs mean lower lows? Does whatever miracle that plucks a beauty from the crowd set her up, too, for catastrophe? Crowns her a princess just to cut off her head? Look at Lila in the Neapolitan quartet; she might get special treatment, but she also gets beaten. She loses a child; her anguish is as sharp as her fine bones. Plain Len√π studies, applies herself to an uphill climb, a subdued figure against a headwind, yes, but she does end up, on the whole, better off.</p>
<p>Yet whatever delusional peace this line of inquiry brings us, Ferrante snatches back. No suffering of Lila‚Äôs stops Len√π from being jealous of her. ‚ÄúWhat more do you want?‚Äù Len√π asks Lila, bitterly. But what more does Len√π want of Lila? The answer is as simple and complicated, as shallow and treacherously deep, as: Lila‚Äôs face, Lila‚Äôs body. The Neapolitan quartet undercuts that old, soothing sentence, that compulsive effort to compensate, to equalize, one that my own brother noted I used spitefully in high school, whenever he mentioned a pretty girl: ‚ÄúYes, she‚Äôs beautiful, <i>but</i>‚Ä¶‚Äù But nothing. We might identify with Len√π, but who reads Ferrante‚Äôs books and wants to be anyone but Lila? It‚Äôs not all good, it‚Äôs just everything.</p>
<p>‚óè</p>
<p>I<span>&nbsp;</span>fly from Marrakech to London. I wait in line at the airport as a young man is berating a young woman, who begins to cry. I board and discover that by some hellish providence, the woman is sitting next to me. I‚Äôm looking good these days, perhaps because I‚Äôm finally well-loved, but that‚Äôs for another story. The girl tells me everything. She lists atrocities but saves, in a quiet voice, the worst for last. ‚ÄúHe said I was average-looking.‚Äù I can hardly stand to meet her eyes. The boy is a few rows behind us, chatting up a pretty stranger. ‚ÄúYou‚Äôre not,‚Äù I say. ‚ÄúIt doesn‚Äôt matter.‚Äù I touch her back. Something is happening between us, very wonderful and sad. Then in the middle of her sobs she holds her hands up, and laughs a little. ‚ÄúI‚Äôm sorry,‚Äù she says, and then crying harder, her voice breaking: ‚ÄúIt‚Äôs just your hair. It looks so‚Ä¶ beautiful. It seems so‚Ä¶ soft.‚Äù It‚Äôs hurting her. I put it up.</p>
<p>In the first of the Neapolitan novels, Ferrante places a wealthy, ‚Äúsuperior‚Äù girl in green‚Äîgreen shoes, green jacket, green bowler hat‚Äîgreen, the color of envy, in Len√π and Lila‚Äôs path. By the second book Lila remains worried over her. ‚ÄúYou‚Äôre much prettier than the girl in green,‚Äù Len√π consoles her, then thinks, ‚ÄúIt‚Äôs not true, I‚Äôm lying.‚Äù<span>&nbsp;</span></p>
<p>‚óè</p>
<p>Some evenings i watch the reality TV show <i>Love Is Blind</i>, where the hierarchy of beauty I resent is toppled, then reasserted, to my masochistic schadenfreude. Singles date without laying eyes on each other, only meeting after becoming engaged. No one fares worse in the program than the unattractive woman paired with the better-looking man. Consider her fate as I do, on the couch, over ice cream. Alone, she meets her new fianc√©. He kisses, compliments, gropes her, perhaps sincerely. She‚Äôs gorgeous, he says. She isn‚Äôt. We eye him as suspiciously as she is beside herself with joy. Days later, at a pool party, the couples reconvene. He sees the other women for the first time, and beside them, her, the one he chose, at last in context. His face falls. It is precisely at this moment he ceases to love her.</p>
<p>Other evenings I switch on <i>I Am Georgina</i>, on Netflix. It infuriates me, her story, the whole premise, Georgina Rodr√≠guez, the surprising partner of football superstar Cristiano Ronaldo. How, like millions of other women, she once worked in a shop, playing nice with her customers, despising her days. How, unlike millions of other women, there existed something in her face so naturally beautiful as to unnerve Ronaldo, to stop him in his tracks when shopping, to impel him to take an interest in her. To move her into his mansions, where she might live in luxury, taking care of his mysterious, surrogate-born children, accruing Instagram followers, purses, a reality show, the guiltless blessings of the born lucky. She goes to work by bus. She leaves by Bugatti, forever. It riles me up. I turn on the television and I watch her and watch her until I love her and hate her, as I might a friend.</p>
<p>‚óè</p>
<p>At the first faint signs of aging, relentless K is swift to get work done. Botox. It rankles me. We‚Äôre 26 now; isn‚Äôt she tired? Energy is neither created nor destroyed, so I search my forehead for her wrinkles and find them. I visit her dermatologist, taking the long way, dragging my feet, vain enough to have booked the appointment but not so vain I would have gone unprompted. The doctor prescribes me: one syringe of filler, to raise me from one level to another, as she did my friend. I infer: two syringes, to close our gap, make us level. An old wish. I nod, close my eyes, grip the table. Beauty, incoming. She readies the needle, then the first injection site. My eyes sting, I think, at the scent of the alcohol pad. Then some misgiving in my face stops her. ‚ÄúYou know,‚Äù she says, slowly, ‚ÄúYou and K are not the same, you are different types of‚Ä¶ attractive, you don‚Äôt need to rush this.‚Äù Implicitly: I‚Äôm not as pretty. I have no such pressure, to prejuvenate, or invest. I sit up. The insult frees me. I could almost kiss her. I float to my car and drive home dancing, catching my flaws in the rearview mirror, like darlings an editor didn‚Äôt make me cut.</p>
<p>I‚Äôd gone to finally compete with K but settled for comparison, that poignant force that had always pushed me, turned my page, compelled me to try harder, thickened our plot by lending it subtext. I‚Äôm not the beautiful friend; that‚Äôs not my <i>category</i>. In the schema of how I understand myself, it‚Äôs simply not my place. The hierarchy of beauty parcels out different experiences of femininity. Mine mattered, and had grown on me, or perhaps I had grown around it.</p>
<p>And we reach a point where we can talk about it. Not our own looks, which we always discussed, but the no-man‚Äôs-land that always sprawled between them. We thought it was contested, but really it was ours. I broach it carefully, at first, like it will bring her power over me. I broach it more boldly when I realize it brings power to us both. A sense of freedom. K reads the draft of this essay. I act out the fake ID scene and we laugh. It‚Äôs different than when we were thirteen, at the beach, and I asked the child we babysat who was prettier, and then I put my face in the water like a Victorian heroine and tried to drown myself, but not very hard. Something has changed. We‚Äôre getting older. The breathtaking beauty of a young girl eventually exhales, deflates, we all start looking similar, in a decade or two we‚Äôll fall into some binary of well-kept or not well-kept, and then what‚Äôll matter is money, which fingers crossed I‚Äôll have. But with beauty slowly, imperceptibly, leaving her, am I losing something also?</p>
<p>I might be no great beauty, but I‚Äôm no innocent, either: the only thing that feels better than being chosen is being slighted. I knew what I was doing, with that boy, with my classmate, the child we babysat, forcing each to play a test where the right answer, K, would always be wrong, would always shock me, gloriously, painfully, but never surprise me, confirming as it did what I already, irrevocably, knew. The rehearsed and yet devastated response it gives me license to perform. Admit it. There‚Äôs a power to melodrama; it‚Äôs why they call it drama <i>queen</i>. I have a stunning friend who applies lotion to her stunning body, religiously, every night, from her clavicle to her small Egyptian toes, and perhaps this is my version of that. A confused self-caress, interspersed with slaps, which smarts, yes, but says: this is my body, I am here, give me a story, send pathos in my direction, eye rolls allowed.</p>
<p>We play these scenes over and over again like dirges. When Nino picks Lila over Len√π in the second book of the Neapolitan quartet, the sky falls in our stomachs. Yet why does it feel so good? Who can explain our anticipation of that, our desire to see it exercised, exorcised? I‚Äôm trying. The night that Len√π learns that Lila and Nino have kissed, she uses ‚Äúpoems and novels as tranquilizers‚Äù to subdue her grief. She crafts a narrative, a ‚Äúframe of unattainability‚Äù in which her bitterness becomes ‚Äúutterable.‚Äù Isn‚Äôt that what, by reading, we are doing? Isn‚Äôt that why I stay less pretty than K? For the sake of extra practice. Practice at making, as we all must, a bearable poetry, a livable story, with characters and twists, of that which would otherwise kill us.</p>
<p><em>Art credit: (1) Prudence Flint, </em>The Promise<em>, oil on linen, 135 √ó 107 cm, 2021;&nbsp;(2) </em>Second Hang<em>, oil on linen, 142 √ó 109 cm, 2022. Courtesy of <a href="https://prudenceflint.com/">the artist</a> and <a href="http://www.motherstankstation.com/">mother‚Äôs tankstation Dublin | London</a>.</em></p>
								</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Good code is like a love letter to the next developer who will maintain it (291 pts)]]></title>
            <link>https://addyosmani.com/blog/good-code/</link>
            <guid>36807028</guid>
            <pubDate>Thu, 20 Jul 2023 21:32:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://addyosmani.com/blog/good-code/">https://addyosmani.com/blog/good-code/</a>, See on <a href="https://news.ycombinator.com/item?id=36807028">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <header>
        
        <h2>July 20, 2023</h2>
    </header>
    <section id="post-body">
        <p>We often romanticize the notion of programming, presenting it as an abstract form of art, a science, or even a form of magic. The truth, however, is much more practical and grounded. Code, in its essence, is communication. At the start of my book, <a href="https://www.amazon.com/Learning-JavaScript-Design-Patterns-Developers/dp/1098139879/">Learning JavaScript Design Patterns</a>, I say "good code is like a love letter to the next developer who will maintain it". It is an intimate correspondence, from one developer to another, spanning time and space.</p>

<h2>The Language of Love</h2>

<p>A love letter is personal, sincere, and considerate. It's a poetic testament of feelings, often meticulously crafted, with the intent to convey emotions accurately. Good code shares these characteristics. It's personal, as it mirrors the logic and approach of the coder. <strong>Good code is sincere and unadorned with unnecessary complexity</strong>. It's considerate, mindful of the next developer who will decipher it. And above all, it's meticulously crafted to solve a problem with utmost efficiency.</p>

<h2>Patterns and Principles</h2>

<p>Just like we have grammar rules and linguistic structures to frame our words and feelings into comprehensible sentences, we have design patterns and principles to shape our code. Patterns don't just make code scalable, maintainable, and efficient, but also readable and understandable. They provide a shared vocabulary for developers, enabling them to express intricate software designs with universally recognized structures.</p>

<p>Good code, therefore, leverages these patterns strategically, just like a seasoned poet would use poetic devices to create resonance. It does not apply patterns just for the sake of it, but because they add value to the solution, they make the code more comprehensible, and they ensure the longevity of the codebase.</p>

<p>SOLID, DRY, KISS, and YAGNI are not merely principles but are cornerstones of crafting good code. They guide a developer to make wise decisions, balance between under and over-engineering, and ultimately, write a 'love letter' that the receiver cherishes.</p>

<h2>Best Practices</h2>

<p>Good code also adheres to established best practices, much like a love letter would follow certain social etiquettes. Proper naming conventions, modularization, and thorough commenting are all part of this. They are not just rules to be followed, but they are the norms that define how considerate the code (or coder) is towards the next developer. They are there to make sure the intent of the coder is not lost in translation.</p>

<h2>Embracing Tests</h2>

<p>Just as a writer proofreads their letter, so should a developer with their code. Rigorous testing and the practice of Test-Driven Development (TDD) are indicators of a carefully crafted 'love letter'. Tests validate the performance of code under various scenarios, uncovering potential flaws and blind spots. The presence of a robust testing framework is often a testament to the quality of the code.</p>

<h2>Empathy and Respect</h2>

<p>Above all, the core of a love letter is empathy and respect for the reader, and so it is with good code. Writing code that others can read, understand, and maintain, is a form of professional respect. It signals the coder's understanding that their work is part of a larger, ongoing effort, that software is a living entity that evolves, and that many hands will shape its destiny over time.</p>

<h2>Conclusion</h2>

<p>In the end, coding is an act of creation, not unlike writing a poem or painting a picture. The beauty of our creations, however, is not judged solely by the elegance of our algorithms or the efficiency of our code, but by the joy and ease with which others can build upon our work. As developers, our task is not just to solve today's problems but also to ensure we do not become tomorrow's problem. </p>

<p><strong>Good code, therefore, is not just a love letter, but it is our lasting legacy to those who follow us.</strong></p>

    </section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Richard Rhodes wrote a classic book about Oppenheimer and the atomic bomb (117 pts)]]></title>
            <link>https://www.theatlantic.com/technology/archive/2023/07/richard-rhodes-making-of-the-atomic-bomb-ai/674777/</link>
            <guid>36806922</guid>
            <pubDate>Thu, 20 Jul 2023 21:22:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theatlantic.com/technology/archive/2023/07/richard-rhodes-making-of-the-atomic-bomb-ai/674777/">https://www.theatlantic.com/technology/archive/2023/07/richard-rhodes-making-of-the-atomic-bomb-ai/674777/</a>, See on <a href="https://news.ycombinator.com/item?id=36806922">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header data-event-module="hero"><div><div><p>Richard Rhodes wrote a classic book about Oppenheimer and the atomic bomb. AI researchers are eager to see themselves in it.</p></div><div><figure><div><picture><img alt="Picture of Richard Rhodes" sizes="(min-width: 1440px) 656px, (min-width:1024px) calc(50vw - 64px), (min-width: 768px) calc(50vw - 48px), (min-width: 375px) calc(100vw - 103px), (min-width: 320px) calc(100vw - 64px), calc(100vw - 48px)" srcset="https://cdn.theatlantic.com/thumbor/YUV6q5-OHg5dghqgvStRcofjKmo=/0x117:1000x1367/296x370/media/img/2023/07/20/_IAN8067_1/original.jpg 296w, https://cdn.theatlantic.com/thumbor/jH-qjVMk0FznAvRXrUiX2fNGjzc=/0x117:1000x1367/311x389/media/img/2023/07/20/_IAN8067_1/original.jpg 311w, https://cdn.theatlantic.com/thumbor/zwyC30hi1D39ugk8wi8UBOleKfA=/0x117:1000x1367/592x740/media/img/2023/07/20/_IAN8067_1/original.jpg 592w, https://cdn.theatlantic.com/thumbor/_w_UYa9fTedyl1TDZKuoKqPwbWo=/0x117:1000x1367/622x778/media/img/2023/07/20/_IAN8067_1/original.jpg 622w, https://cdn.theatlantic.com/thumbor/h-myfZVcCY6iiHpKXStlwxQoqRI=/0x117:1000x1367/665x831/media/img/2023/07/20/_IAN8067_1/original.jpg 665w, https://cdn.theatlantic.com/thumbor/6TCdr65tu8uunHRCqCTdK3iD0lM=/0x117:1000x1367/960x1200/media/img/2023/07/20/_IAN8067_1/original.jpg 960w" src="https://cdn.theatlantic.com/thumbor/1tVnLk7bxG-lNG_8oCyX236pyy0=/0x117:1000x1367/648x810/media/img/2023/07/20/_IAN8067_1/original.jpg" width="648" height="810"></picture></div><figcaption>Photograph by Ian Allen for The Atlantic</figcaption></figure></div></div><div><p><time datetime="2023-07-20T20:34:22Z">July 20, 2023, 4:34 PM ET</time></p></div><gpt-ad format="injector" sizes-at-0="mobile-wide" targeting-pos="injector-article-start" sizes-at-976="desktop-wide"></gpt-ad></header><section data-event-module="article body"><p>D<span>oom lurks in</span> <span>every nook and cranny</span> of Richard Rhodes‚Äôs home office. A framed photograph of three men in military fatigues hangs above his desk. They‚Äôre tightening straps on what first appear to be two water heaters but are, in fact, thermonuclear weapons. Resting against a nearby wall is a black-and-white print depicting the first billionth of a second after the detonation of an atomic bomb: a thousand-foot-tall ghostly amoeba. And above us, dangling from the ceiling like the sword of Damocles, is a plastic model of the Hindenburg.</p><p>Depending on how you choose to look at it, Rhodes‚Äôs office is either a shrine to awe-inspiring technological progress or a harsh reminder of its power to incinerate us all in the blink of an eye. Today, it feels like the nexus of our cultural and technological universes. Rhodes is the 86-year-old author of <a data-event-element="inline link" href="https://tertulia.com/book/the-making-of-the-atomic-bomb-richard-rhodes/9781451677614?affiliate_id=atl-347"><em>The Making of the Atomic Bomb</em></a>, a Pulitzer Prize‚Äìwinning book that has become a kind of holy text for a certain type of AI researcher‚Äînamely, the type who believes their creations might have the power to kill us all. On Friday afternoon, he will take his seat in a West Seattle theater and, like many other moviegoers, watch <a data-event-element="inline link" href="https://www.theatlantic.com/culture/archive/2023/07/oppenheimer-movie-review-christopher-nolan/674749/"><em>Oppenheimer</em></a>, Christopher Nolan‚Äôs summer blockbuster about the Manhattan Project. (The film is not based on his book, though he suspects his text served as a research aid; he‚Äôs excited to see it anyway.)</p><p id="injected-recirculation-link-0" data-view-action="view link - injected link - item 1" data-event-element="injected link" data-event-position="1"><a href="https://www.theatlantic.com/culture/archive/2023/07/oppenheimer-movie-review-christopher-nolan/674749/">Read: <em>Oppenheimer </em>is more than a creation myth about the atomic bomb</a></p><p>I first encountered <em>The Making of the Atomic Bomb</em> in March, when I spoke with an AI researcher who said he carts the doorstop-size book around every day. (It‚Äôs a reminder that his mandate is to push the bounds of technological progress, he explained‚Äîand a motivational tool to work 17-hour days.) Since then, I‚Äôve heard the book mentioned on <a data-event-element="inline link" href="https://www.nytimes.com/2023/03/21/podcasts/ezra-klein-podcast-transcript-kelsey-piper.html">podcasts</a> and cited in conversations I‚Äôve had with people who fear that artificial intelligence will doom us all. ‚ÄúI know tons of people working on AI policy who‚Äôve been reading Rhodes‚Äôs book for inspiration,‚Äù <em>Vox</em>‚Äôs Dylan Matthews <a data-event-element="inline link" href="https://www.vox.com/future-perfect/2023/6/29/23762219/ai-artificial-intelligence-new-nuclear-weapons-future">wrote</a> recently. A <em>New York Times</em> <a data-event-element="inline link" href="https://www.nytimes.com/2023/07/11/technology/anthropic-ai-claude-chatbot.html">profile</a> of the AI company Anthropic notes that Rhodes‚Äôs book is ‚Äúpopular among the company‚Äôs employees,‚Äù some of whom ‚Äúcompared themselves to modern-day Robert Oppenheimers.‚Äù</p><p>Like Oppenheimer before them, <a data-event-element="inline link" href="https://www.nytimes.com/2023/03/31/technology/sam-altman-open-ai-chatgpt.html">many merchants of AI</a> believe their creations might change the course of history, and so they wrestle with profound moral concerns. Even as they build the technology, they worry about what will happen if <a data-event-element="inline link" href="https://www.nytimes.com/2023/05/30/technology/ai-threat-warning.html">AI becomes smarter than humans</a> and goes rogue, a speculative possibility that has morphed into an unshakable neurosis as generative-AI models take in <a data-event-element="inline link" href="https://www.theatlantic.com/technology/archive/2023/01/artificial-intelligence-ai-chatgpt-dall-e-2-learning/672754/">vast quantities of information</a> and appear ever more capable. More than 40 years ago, Rhodes set out to write the definitive account of one of the most consequential achievements in human history. Today, it‚Äôs scrutinized like an instruction manual.</p><p>Rhodes isn‚Äôt a doomer himself, but he understands the parallels between the work at Los Alamos in the 1940s and what‚Äôs happening in Silicon Valley today. ‚ÄúOppenheimer talked a lot about how the bomb was both the peril and the hope,‚Äù Rhodes told me‚Äîit could end the war while simultaneously threatening to end humanity. He has <a data-event-element="inline link" href="https://www.dwarkeshpatel.com/p/richard-rhodes#details">said</a> that AI might be as transformative as nuclear energy, and has watched with interest as Silicon Valley‚Äôs biggest companies have engaged in a frenzied competition to build and deploy it.</p><p id="injected-recirculation-link-1" data-view-action="view link - injected link - item 2" data-event-element="injected link" data-event-position="2"><a href="https://www.theatlantic.com/technology/archive/2023/06/ai-regulation-sam-altman-bill-gates/674278/">Read: AI doomerism is a decoy</a></p><p>AI boosters and builders would no doubt take comfort in an argument Rhodes once made, in the foreword to the 25th-anniversary edition of his book, that the discovery of nuclear fission, and thereby the bomb, was inevitable. ‚ÄúTo stop it, you would have had to stop physics,‚Äù he writes. This argument echoes in the rhetoric of bullish AI companies <a data-event-element="inline link" href="https://www.axios.com/2023/06/29/us-china-chip-export-restrictions-ai-race">and governments</a> who see the technology as part of a global informational arms race. Democratic nations cannot pause or wait for laws to catch up, the logic goes, lest we lose out to China or some other hostile power.</p><p>That idea helps explain why a technologist would construct an AI system even as they believe it could extinguish human life‚Äîand so does the epigraph in the first section of <em>The Making of the Atomic Bomb</em>. Here Rhodes quotes Oppenheimer: ‚ÄúIt is a profound and necessary truth that the deep things in science are not found because they are useful; they are found because it was possible to find them.‚Äù</p><p>As a technology writer, I have spent much of my career grappling with people who possess an impulse to build, consequences be damned. I‚Äôm fascinated and confounded by the mindset I‚Äôve observed in AI founders and researchers who say they‚Äôre terrified of the very things they‚Äôre actively working to bring into existence. I‚Äôve struggled to square this personality trait with my own inclinations: toward caution, toward a paralyzing obsession with matrices of unintended consequences. What is it, I asked Rhodes. What is the unifying quality that possesses people to open Pandora‚Äôs box? The question hung in the air, just below the dangling model of the Hindenburg, as I imagined Rhodes flipping through a set of interviews and dog-eared biographies in his head.</p><p>He began to explain. Any great scientist, ‚Äúbefore their 12th year,‚Äù he said, has ‚Äúsome formative experience that pushed them in the direction they were going in, and made them decide they wanted to go through the grueling process of learning mathematics or science until they could push the boundaries.‚Äù Enrico Fermi, the inventor of the first nuclear reactor and a chief architect of the atomic bomb, lost a beloved brother as a teenager, and not long after that, he grew obsessed with measuring and quantifying all areas of his life. ‚ÄúHe could tell you how many steps he‚Äôd walked down the street,‚Äù Rhodes said. ‚ÄúHe appeared so much like someone who found in numbers the kind of certainty that he‚Äôd lost when he lost his brother.‚Äù As a 10-year-old, Leo Szilard had been so disturbed by a Hungarian epic about the sun dying out that he grew fixated on rockets as a way to save the planet, Rhodes said‚Äîa quest that, eventually, led him to discover the nuclear chain reaction.</p><p>‚ÄúIt‚Äôs no coincidence that so many of the people who ended up in the bomb program were Jews who had escaped from Nazi Germany,‚Äù he said. ‚ÄúThey‚Äôd seen what was happening there, they were all around it, and they knew it was horrible and terrifying and had to be stopped.‚Äù Rhodes sees the shadows of his childhood in his own work too, which was marked by physical abuse and starvation at the hands of his stepmother: ‚ÄúIt‚Äôs not surprising that all my books are, in some way, about human violence and how you deal with it, seeing as I‚Äôm an expert in that department.‚Äù</p><p>Perhaps this is another lesson in duality‚Äîin the grand scheme of things, our nightmares and dreams are of a piece. If there is a concept Rhodes wants AI researchers and founders to take away from <em>The Making of the Atomic Bomb</em>, it is the notion of <em>complementarity</em>. This is an idea from quantum physics that the Nobel Prize‚Äìwinning Danish physicist Niels Bohr, who, according to Rhodes, traveled to Los Alamos to impart to Oppenheimer during the darkest days of the Manhattan Project. In very basic terms, complementarity describes how objects have conflicting properties that cannot be observed at the same time. The world contains multitudes.</p><p>Bohr, according to Rhodes, developed an entire philosophical worldview from this observation. It boils down to the notion that a terrible weapon might simultaneously be a wonderful tool. ‚ÄúBohr‚Äôs idea brought hope to Los Alamos,‚Äù Rhodes said. ‚ÄúHe told the physicists who were concerned about this weapon of mass destruction that this thing is going to change this condition of war, and thereby change the whole structure of international politics. It could either end the war altogether or destroy the world. The former gave them hope.‚Äù</p><p>The grand lesson, as Rhodes sees it, is that you may build an apocalyptic weapon that turns out to be a flawed agent of precarious peace. But the opposite could also be true: A tool designed to perpetuate human flourishing might bring about catastrophe. And so for Rhodes, the true fear regarding AI is simply that we are on an undefined path, that we are moving too fast and creating systems that may work against their intended purposes: instruments of productivity that end up destroying jobs; synthetic media that ultimately blur the lines between human-made and machine-made, between fact and hallucination. ‚ÄúWhat is most disturbing about it is how little time society will have to absorb and adapt to it,‚Äù Rhodes said of AI‚Äôs ascent.</p><p>On our way out of his office, Rhodes pauses to show me a jar the size of a film canister with what looks like some rocks in it. A faded typewritten label says <span>Trinitite</span>, the name for the residue scraped from the desert floor in New Mexico after the Trinity nuclear-bomb test in July 1945. The blast was so hot that it turned the sand to glass. ‚ÄúPretty spooky, isn‚Äôt it?‚Äù Rhodes said with a smile. It‚Äôs clear to me now why he keeps these relics so close. They are the physical manifestation of Bohr‚Äôs philosophy and the through line of much of Rhodes‚Äôs work‚Äîcomplementarity as interior design. A reminder that the joy and the horror of both the natural world and the one we build for ourselves is the fact that very little behaves as we expect it to. Try as we may, we can‚Äôt observe it all simultaneously. It is a reminder of the excitement and terror inherent in the unsolvable mystery that is being alive.</p><div data-view-action="view - affiliate module" data-view-label="The Making Of The Atomic Bomb"><a href="https://web.tertulia.com/book/9781451677614?affiliate=atl-347" rel="noopener noreferrer" data-label="The Making Of The Atomic Bomb" data-action="click link - affiliate module - book cover" target="_blank"><picture><img alt="" loading="lazy" srcset="https://cdn.theatlantic.com/thumbor/vb6iK9WZvF0Z27jG7g2Nd7wdsMw=/0x0:331x500/79x120/media/img/book_reviews/2023/07/20/41VMmAPoeQL._SL500_-1/original.jpg, https://cdn.theatlantic.com/thumbor/DoTE_oKxpKjKPsFHWqsvmOV471U=/0x0:331x500/158x240/media/img/book_reviews/2023/07/20/41VMmAPoeQL._SL500_-1/original.jpg 2x" src="https://cdn.theatlantic.com/thumbor/vb6iK9WZvF0Z27jG7g2Nd7wdsMw=/0x0:331x500/79x120/media/img/book_reviews/2023/07/20/41VMmAPoeQL._SL500_-1/original.jpg" width="79" height="120"></picture></a></div><div><hr><p>‚ÄãWhen you buy a book using a link on this page, we receive a commission. Thank you for supporting<!-- --> <span>The Atlantic.</span></p></div></section><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="injector-most-popular" sizes-at-976="desktop-wide,native,house"></gpt-ad></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Python Cheatsheet (257 pts)]]></title>
            <link>https://gto76.github.io/python-cheatsheet/</link>
            <guid>36806753</guid>
            <pubDate>Thu, 20 Jul 2023 21:06:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gto76.github.io/python-cheatsheet/">https://gto76.github.io/python-cheatsheet/</a>, See on <a href="https://news.ycombinator.com/item?id=36806753">Hacker News</a></p>
<div id="readability-page-1" class="page">
  <header>
    
    
  </header>

   <div><br><div><h2 id="toc"><a href="#toc" name="toc">#</a>Contents</h2><pre><code><strong>ToC</strong> = {
    <strong><span><span>'1. Collections'</span></span></strong>: [<a href="#list">List</a>, <a href="#dictionary">Dictionary</a>, <a href="#set">Set</a>, <a href="#tuple">Tuple</a>, <a href="#range">Range</a>, <a href="#enumerate">Enumerate</a>, <a href="#iterator">Iterator</a>, <a href="#generator">Generator</a>],
    <strong><span><span>'2. Types'</span></span></strong>:       [<a href="#type">Type</a>, <a href="#string">String</a>, <a href="#regex">Regular_Exp</a>, <a href="#format">Format</a>, <a href="#numbers">Numbers</a>, <a href="#combinatorics">Combinatorics</a>, <a href="#datetime">Datetime</a>],
    <strong><span><span>'3. Syntax'</span></span></strong>:      [<a href="#arguments">Args</a>, <a href="#inline">Inline</a>, <a href="#imports">Import</a>, <a href="#decorator">Decorator</a>, <a href="#class">Class</a>, <a href="#ducktypes">Duck_Types</a>, <a href="#enum">Enum</a>, <a href="#exceptions">Exception</a>],
    <strong><span><span>'4. System'</span></span></strong>:      [<a href="#exit">Exit</a>, <a href="#print">Print</a>, <a href="#input">Input</a>, <a href="#commandlinearguments">Command_Line_Arguments</a>, <a href="#open">Open</a>, <a href="#paths">Path</a>, <a href="#oscommands">OS_Commands</a>],
    <strong><span><span>'5. Data'</span></span></strong>:        [<a href="#json">JSON</a>, <a href="#pickle">Pickle</a>, <a href="#csv">CSV</a>, <a href="#sqlite">SQLite</a>, <a href="#bytes">Bytes</a>, <a href="#struct">Struct</a>, <a href="#array">Array</a>, <a href="#memoryview">Memory_View</a>, <a href="#deque">Deque</a>],
    <strong><span><span>'6. Advanced'</span></span></strong>:    [<a href="#threading">Threading</a>, <a href="#operator">Operator</a>, <a href="#introspection">Introspection</a>, <a href="#metaprogramming">Metaprograming</a>, <a href="#eval">Eval</a>, <a href="#coroutines">Coroutine</a>],
    <strong><span><span>'7. Libraries'</span></span></strong>:   [<a href="#progressbar">Progress_Bar</a>, <a href="#plot">Plot</a>, <a href="#table">Table</a>, <a href="#curses">Curses</a>, <a href="#logging">Logging</a>, <a href="#scraping">Scraping</a>, <a href="#web">Web</a>, <a href="#profiling">Profile</a>,
                       <a href="#numpy">NumPy</a>, <a href="#image">Image</a>, <a href="#audio">Audio</a>, <a href="#pygame">Games</a>, <a href="#pandas">Data</a>]
}
</code></pre></div></div>






<div><h2 id="main"><a href="#main" name="main">#</a>Main</h2><pre><code><span>if</span> __name__ == <span>'__main__'</span>:     <span># Runs main() if file wasn't imported.</span>
    main()
</code></pre></div>

<div><h2 id="list"><a href="#list" name="list">#</a>List</h2><pre><code>&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]       <span># Or: &lt;list&gt;[from_inclusive : to_exclusive : ¬±step]</span>
</code></pre></div>

<pre><code>&lt;list&gt;.append(&lt;el&gt;)            <span># Or: &lt;list&gt; += [&lt;el&gt;]</span>
&lt;list&gt;.extend(&lt;collection&gt;)    <span># Or: &lt;list&gt; += &lt;collection&gt;</span>
</code></pre>
<pre><code>&lt;list&gt;.sort()                  <span># Sorts in ascending order.</span>
&lt;list&gt;.reverse()               <span># Reverses the list in-place.</span>
&lt;list&gt; = sorted(&lt;collection&gt;)  <span># Returns a new sorted list.</span>
&lt;iter&gt; = reversed(&lt;list&gt;)      <span># Returns reversed iterator.</span>
</code></pre>
<pre><code>sum_of_elements  = sum(&lt;collection&gt;)
elementwise_sum  = [sum(pair) <span>for</span> pair <span>in</span> zip(list_a, list_b)]
sorted_by_second = sorted(&lt;collection&gt;, key=<span>lambda</span> el: el[<span>1</span>])
sorted_by_both   = sorted(&lt;collection&gt;, key=<span>lambda</span> el: (el[<span>1</span>], el[<span>0</span>]))
flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))
product_of_elems = functools.reduce(<span>lambda</span> out, el: out * el, &lt;collection&gt;)
list_of_chars    = list(&lt;str&gt;)
</code></pre>
<ul>
<li><strong>For details about sorted(), min() and max() see <a href="#sortable">sortable</a>.</strong></li>
<li><strong>Module <a href="#operator">operator</a> provides functions itemgetter() and mul() that offer the same functionality as <a href="#lambda">lambda</a> expressions above.</strong></li>
</ul>
<pre><code>&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)     <span># Inserts item at index and moves the rest to the right.</span>
&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])    <span># Removes and returns item at index or from the end.</span>
&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     <span># Returns number of occurrences. Also works on strings.</span>
&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)     <span># Returns index of the first occurrence or raises ValueError.</span>
&lt;list&gt;.remove(&lt;el&gt;)            <span># Removes first occurrence of the item or raises ValueError.</span>
&lt;list&gt;.clear()                 <span># Removes all items. Also works on dictionary and set.</span>
</code></pre>
<div><h2 id="dictionary"><a href="#dictionary" name="dictionary">#</a>Dictionary</h2><pre><code>&lt;view&gt; = &lt;dict&gt;.keys()                          <span># Coll. of keys that reflects changes.</span>
&lt;view&gt; = &lt;dict&gt;.values()                        <span># Coll. of values that reflects changes.</span>
&lt;view&gt; = &lt;dict&gt;.items()                         <span># Coll. of key-value tuples that reflects chgs.</span>
</code></pre></div>

<pre><code>value  = &lt;dict&gt;.get(key, default=<span>None</span>)          <span># Returns default if key is missing.</span>
value  = &lt;dict&gt;.setdefault(key, default=<span>None</span>)   <span># Returns and writes default if key is missing.</span>
&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        <span># Returns a dict with default value of type.</span>
&lt;dict&gt; = collections.defaultdict(<span>lambda</span>: <span>1</span>)     <span># Returns a dict with default value 1.</span>
</code></pre>
<pre><code>&lt;dict&gt; = dict(&lt;collection&gt;)                     <span># Creates a dict from coll. of key-value pairs.</span>
&lt;dict&gt; = dict(zip(keys, values))                <span># Creates a dict from two collections.</span>
&lt;dict&gt; = dict.fromkeys(keys [, value])          <span># Creates a dict from collection of keys.</span>
</code></pre>
<pre><code>&lt;dict&gt;.update(&lt;dict&gt;)                           <span># Adds items. Replaces ones with matching keys.</span>
value = &lt;dict&gt;.pop(key)                         <span># Removes item or raises KeyError.</span>
{k <span>for</span> k, v <span>in</span> &lt;dict&gt;.items() <span>if</span> v == value}    <span># Returns set of keys that point to the value.</span>
{k: v <span>for</span> k, v <span>in</span> &lt;dict&gt;.items() <span>if</span> k <span>in</span> keys}  <span># Returns a dictionary, filtered by keys.</span>
</code></pre>
<div><h3 id="counter">Counter</h3><pre><code><span>&gt;&gt;&gt; </span><span>from</span> collections <span>import</span> Counter
<span>&gt;&gt;&gt; </span>colors = [<span>'blue'</span>, <span>'blue'</span>, <span>'blue'</span>, <span>'red'</span>, <span>'red'</span>]
<span>&gt;&gt;&gt; </span>counter = Counter(colors)
<span>&gt;&gt;&gt; </span>counter[<span>'yellow'</span>] += <span>1</span>
Counter({<span>'blue'</span>: <span>3</span>, <span>'red'</span>: <span>2</span>, <span>'yellow'</span>: <span>1</span>})
<span>&gt;&gt;&gt; </span>counter.most_common()[<span>0</span>]
(<span>'blue'</span>, <span>3</span>)
</code></pre></div>

<div><h2 id="set"><a href="#set" name="set">#</a>Set</h2><pre><code>&lt;set&gt; = set()                                   <span># `{}` returns a dictionary.</span>
</code></pre></div>

<pre><code>&lt;set&gt;.add(&lt;el&gt;)                                 <span># Or: &lt;set&gt; |= {&lt;el&gt;}</span>
&lt;set&gt;.update(&lt;collection&gt; [, ...])              <span># Or: &lt;set&gt; |= &lt;set&gt;</span>
</code></pre>
<pre><code>&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   <span># Or: &lt;set&gt; | &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            <span># Or: &lt;set&gt; &amp; &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              <span># Or: &lt;set&gt; - &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    <span># Or: &lt;set&gt; ^ &lt;set&gt;</span>
&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                <span># Or: &lt;set&gt; &lt;= &lt;set&gt;</span>
&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              <span># Or: &lt;set&gt; &gt;= &lt;set&gt;</span>
</code></pre>
<pre><code>&lt;el&gt; = &lt;set&gt;.pop()                              <span># Raises KeyError if empty.</span>
&lt;set&gt;.remove(&lt;el&gt;)                              <span># Raises KeyError if missing.</span>
&lt;set&gt;.discard(&lt;el&gt;)                             <span># Doesn't raise an error.</span>
</code></pre>
<div><h3 id="frozenset">Frozen Set</h3><ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an element in a set.</strong></li>
</ul><pre><code>&lt;frozenset&gt; = frozenset(&lt;collection&gt;)
</code></pre></div>


<div><h2 id="tuple"><a href="#tuple" name="tuple">#</a>Tuple</h2><p><strong>Tuple is an immutable and hashable list.</strong></p><pre><code>&lt;tuple&gt; = ()                                <span># Empty tuple.</span>
&lt;tuple&gt; = (&lt;el&gt;,)                           <span># Or: &lt;el&gt;,</span>
&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])          <span># Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]</span>
</code></pre></div>


<div><h3 id="namedtuple">Named Tuple</h3><p><strong>Tuple's subclass with named elements.</strong></p><pre><code><span>&gt;&gt;&gt; </span><span>from</span> collections <span>import</span> namedtuple
<span>&gt;&gt;&gt; </span>Point = namedtuple(<span>'Point'</span>, <span>'x y'</span>)
<span>&gt;&gt;&gt; </span>p = Point(<span>1</span>, y=<span>2</span>)
Point(x=<span>1</span>, y=<span>2</span>)
<span>&gt;&gt;&gt; </span>p[<span>0</span>]
<span>1</span>
<span>&gt;&gt;&gt; </span>p.x
<span>1</span>
<span>&gt;&gt;&gt; </span>getattr(p, <span>'y'</span>)
<span>2</span>
</code></pre></div>


<div><h2 id="range"><a href="#range" name="range">#</a>Range</h2><p><strong>Immutable and hashable sequence of integers.</strong></p><pre><code>&lt;range&gt; = range(stop)                       <span># range(to_exclusive)</span>
&lt;range&gt; = range(start, stop)                <span># range(from_inclusive, to_exclusive)</span>
&lt;range&gt; = range(start, stop, ¬±step)         <span># range(from_inclusive, to_exclusive, ¬±step_size)</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>[i <span>for</span> i <span>in</span> range(<span>3</span>)]
[<span>0</span>, <span>1</span>, <span>2</span>]
</code></pre>
<div><h2 id="enumerate"><a href="#enumerate" name="enumerate">#</a>Enumerate</h2><pre><code><span>for</span> i, el <span>in</span> enumerate(&lt;collection&gt; [, i_start]):
    ...
</code></pre></div>

<div><h2 id="iterator"><a href="#iterator" name="iterator">#</a>Iterator</h2><pre><code>&lt;iter&gt; = iter(&lt;collection&gt;)                 <span># `iter(&lt;iter&gt;)` returns unmodified iterator.</span>
&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     <span># A sequence of return values until 'to_exclusive'.</span>
&lt;el&gt;   = next(&lt;iter&gt; [, default])           <span># Raises StopIteration or returns 'default' on end.</span>
&lt;list&gt; = list(&lt;iter&gt;)                       <span># Returns a list of iterator's remaining elements.</span>
</code></pre></div>

<div><h3 id="itertools">Itertools</h3><pre><code><span>import</span> itertools <span>as</span> it
</code></pre></div>

<pre><code>&lt;iter&gt; = it.count(start=<span>0</span>, step=<span>1</span>)          <span># Returns updated value endlessly. Accepts floats.</span>
&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])          <span># Returns element endlessly or 'times' times.</span>
&lt;iter&gt; = it.cycle(&lt;collection&gt;)             <span># Repeats the sequence endlessly.</span>
</code></pre>
<pre><code>&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])   <span># Empties collections in order (figuratively).</span>
&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)     <span># Empties collections inside a collection in order.</span>
</code></pre>
<pre><code>&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)    <span># Only returns first 'to_exclusive' elements.</span>
&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, ‚Ä¶)     <span># `to_exclusive, +step_size`. Indices can be None.</span>
</code></pre>
<div><h2 id="generator"><a href="#generator" name="generator">#</a>Generator</h2><ul>
<li><strong>Any function that contains a yield statement returns a generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul><pre><code><span><span>def</span> <span>count</span><span>(start, step)</span>:</span>
    <span>while</span> <span>True</span>:
        <span>yield</span> start
        start += step
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>counter = count(<span>10</span>, <span>2</span>)
<span>&gt;&gt;&gt; </span>next(counter), next(counter), next(counter)
(<span>10</span>, <span>12</span>, <span>14</span>)
</code></pre>
<div><h2 id="type"><a href="#type" name="type">#</a>Type</h2><ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul><pre><code>&lt;type&gt; = type(&lt;el&gt;)                          <span># Or: &lt;el&gt;.__class__</span>
&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            <span># Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>type(<span>'a'</span>), <span>'a'</span>.__class__, str
(&lt;<span><span>class</span> '<span>str</span>'&gt;, &lt;<span>class</span> '<span>str</span>'&gt;, &lt;<span>class</span> '<span>str</span>'&gt;)
</span></code></pre>
<div><h4 id="sometypesdonothavebuiltinnamessotheymustbeimported">Some types do not have built-in names, so they must be imported:</h4><pre><code><span>from</span> types <span>import</span> FunctionType, MethodType, LambdaType, GeneratorType, ModuleType
</code></pre></div>

<div><h3 id="abstractbaseclasses">Abstract Base Classes</h3><p><strong>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().</strong></p><pre><code><span>&gt;&gt;&gt; </span><span>from</span> collections.abc <span>import</span> Iterable, Collection, Sequence
<span>&gt;&gt;&gt; </span>isinstance([<span>1</span>, <span>2</span>, <span>3</span>], Iterable)
<span>True</span>
</code></pre></div>


<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                  ‚îÇ  Iterable  ‚îÇ Collection ‚îÇ  Sequence  ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ list, range, str ‚îÇ     ‚úì      ‚îÇ     ‚úì      ‚îÇ     ‚úì      ‚îÉ
‚îÉ dict, set        ‚îÇ     ‚úì      ‚îÇ     ‚úì      ‚îÇ            ‚îÉ
‚îÉ iter             ‚îÇ     ‚úì      ‚îÇ            ‚îÇ            ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span><span>from</span> numbers <span>import</span> Number, Complex, Real, Rational, Integral
<span>&gt;&gt;&gt; </span>isinstance(<span>123</span>, Number)
<span>True</span>
</code></pre>
<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                    ‚îÇ  Number  ‚îÇ  Complex ‚îÇ   Real   ‚îÇ Rational ‚îÇ Integral ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ int                ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÉ
‚îÉ fractions.Fraction ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ          ‚îÉ
‚îÉ float              ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ          ‚îÇ          ‚îÉ
‚îÉ complex            ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ          ‚îÇ          ‚îÇ          ‚îÉ
‚îÉ decimal.Decimal    ‚îÇ    ‚úì     ‚îÇ          ‚îÇ          ‚îÇ          ‚îÇ          ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<div><h2 id="string"><a href="#string" name="string">#</a>String</h2><pre><code>&lt;str&gt;  = &lt;str&gt;.strip()                       <span># Strips all whitespace characters from both ends.</span>
&lt;str&gt;  = &lt;str&gt;.strip(<span>'&lt;chars&gt;'</span>)              <span># Strips all passed characters from both ends.</span>
</code></pre></div>

<pre><code>&lt;list&gt; = &lt;str&gt;.split()                       <span># Splits on one or more whitespace characters.</span>
&lt;list&gt; = &lt;str&gt;.split(sep=<span>None</span>, maxsplit=<span>-1</span>)  <span># Splits on 'sep' str at most 'maxsplit' times.</span>
&lt;list&gt; = &lt;str&gt;.splitlines(keepends=<span>False</span>)    <span># On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.</span>
&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       <span># Joins elements using string as a separator.</span>
</code></pre>
<pre><code>&lt;bool&gt; = &lt;sub_str&gt; <span>in</span> &lt;str&gt;                  <span># Checks if string contains the substring.</span>
&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         <span># Pass tuple of strings for multiple options.</span>
&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           <span># Pass tuple of strings for multiple options.</span>
&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               <span># Returns start index of the first match or -1.</span>
&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              <span># Same, but raises ValueError if missing.</span>
</code></pre>
<pre><code>&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   <span># Replaces 'old' with 'new' at most 'count' times.</span>
&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            <span># Use `str.maketrans(&lt;dict&gt;)` to generate table.</span>
</code></pre>
<pre><code>&lt;str&gt;  = chr(&lt;int&gt;)                          <span># Converts int to Unicode character.</span>
&lt;int&gt;  = ord(&lt;str&gt;)                          <span># Converts Unicode character to int.</span>
</code></pre>
<ul>
<li><strong>Also: <code><span>'lstrip()'</span></code>, <code><span>'rstrip()'</span></code> and <code><span>'rsplit()'</span></code>.</strong></li>
<li><strong>Also: <code><span>'lower()'</span></code>, <code><span>'upper()'</span></code>, <code><span>'capitalize()'</span></code> and <code><span>'title()'</span></code>.</strong></li>
</ul>
<div><h3 id="propertymethods">Property Methods</h3><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ               ‚îÇ [ !#$%‚Ä¶] ‚îÇ [a-zA-Z] ‚îÇ  [¬º¬Ω¬æ]   ‚îÇ  [¬≤¬≥¬π]   ‚îÇ  [0-9]   ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ isprintable() ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÉ
‚îÉ isalnum()     ‚îÇ          ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÉ
‚îÉ isnumeric()   ‚îÇ          ‚îÇ          ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÉ
‚îÉ isdigit()     ‚îÇ          ‚îÇ          ‚îÇ          ‚îÇ    ‚úì     ‚îÇ    ‚úì     ‚îÉ
‚îÉ isdecimal()   ‚îÇ          ‚îÇ          ‚îÇ          ‚îÇ          ‚îÇ    ‚úì     ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div>

<ul>
<li><strong><code><span>'isspace()'</span></code> checks for whitespaces: <code><span>'[ \t\n\r\f\v\x1c-\x1f\x85\xa0\u1680‚Ä¶]'</span></code>.</strong></li>
</ul>
<div><h2 id="regex"><a href="#regex" name="regex">#</a>Regex</h2><pre><code><span>import</span> re
&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=<span>0</span>)  <span># Substitutes all occurrences with 'new'.</span>
&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            <span># Returns all occurrences as strings.</span>
&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=<span>0</span>)  <span># Use brackets in regex to include the matches.</span>
&lt;Match&gt; = re.search(&lt;regex&gt;, text)             <span># Searches for first occurrence of the pattern.</span>
&lt;Match&gt; = re.match(&lt;regex&gt;, text)              <span># Searches only at the beginning of the text.</span>
&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           <span># Returns all occurrences as Match objects.</span>
</code></pre></div>

<ul>
<li><strong>Argument 'new' can be a function that accepts a Match object and returns a string.</strong></li>
<li><strong>Search() and match() return None if they can't find a match.</strong></li>
<li><strong>Argument <code><span>'flags=re.IGNORECASE'</span></code> can be used with all functions.</strong></li>
<li><strong>Argument <code><span>'flags=re.MULTILINE'</span></code> makes <code><span>'^'</span></code> and <code><span>'$'</span></code> match the start/end of each line.</strong></li>
<li><strong>Argument <code><span>'flags=re.DOTALL'</span></code> makes <code><span>'.'</span></code> also accept the <code><span>'\n'</span></code>.</strong></li>
<li><strong>Use <code><span>r'\1'</span></code> or <code><span>'\\1'</span></code> for backreference (<code><span>'\1'</span></code> returns a character with octal code 1).</strong></li>
<li><strong>Add <code><span>'?'</span></code> after <code><span>'*'</span></code> and <code><span>'+'</span></code> to make them non-greedy.</strong></li>
</ul>
<div><h3 id="matchobject">Match Object</h3><pre><code>&lt;str&gt;   = &lt;Match&gt;.group()                      <span># Returns the whole match. Also group(0).</span>
&lt;str&gt;   = &lt;Match&gt;.group(<span>1</span>)                     <span># Returns part in the first bracket.</span>
&lt;tuple&gt; = &lt;Match&gt;.groups()                     <span># Returns all bracketed parts.</span>
&lt;int&gt;   = &lt;Match&gt;.start()                      <span># Returns start index of the match.</span>
&lt;int&gt;   = &lt;Match&gt;.end()                        <span># Returns exclusive end index of the match.</span>
</code></pre></div>

<div><h3 id="specialsequences">Special Sequences</h3><pre><code><span>'\d'</span> == <span>'[0-9]'</span>                                <span># Matches decimal characters.</span>
<span>'\w'</span> == <span>'[a-zA-Z0-9_]'</span>                         <span># Matches alphanumerics and underscore.</span>
<span>'\s'</span> == <span>'[ \t\n\r\f\v]'</span>                        <span># Matches whitespaces.</span>
</code></pre></div>

<ul>
<li><strong>By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless <code><span>'flags=re.ASCII'</span></code> argument is used.</strong></li>
<li><strong>As shown above, it restricts all special sequence matches to the first 128 characters and prevents <code><span>'\s'</span></code> from accepting <code><span>'[\x1c-\x1f]'</span></code> (the so-called separator characters).</strong></li>
<li><strong>Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).</strong></li>
</ul>
<div><h2 id="format"><a href="#format" name="format">#</a>Format</h2><pre><code>&lt;str&gt; = <span>f'<span>{&lt;el_1&gt;}</span>, <span>{&lt;el_2&gt;}</span>'</span>            <span># Curly brackets can also contain expressions.</span>
&lt;str&gt; = <span>'{}, {}'</span>.format(&lt;el_1&gt;, &lt;el_2&gt;)  <span># Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)</span>
&lt;str&gt; = <span>'%s, %s'</span> % (&lt;el_1&gt;, &lt;el_2&gt;)      <span># Redundant and inferior C-style formatting.</span>
</code></pre></div>

<div><h3 id="example">Example</h3><pre><code><span>&gt;&gt;&gt; </span>Person = collections.namedtuple(<span>'Person'</span>, <span>'name height'</span>)
<span>&gt;&gt;&gt; </span>person = Person(<span>'Jean-Luc'</span>, <span>187</span>)
<span>&gt;&gt;&gt; </span><span>f'<span>{person.name}</span> is <span>{person.height / <span>100</span>}</span> meters tall.'</span>
<span>'Jean-Luc is 1.87 meters tall.'</span>
</code></pre></div>

<div><h3 id="generaloptions">General Options</h3><pre><code>{&lt;el&gt;:&lt;<span>10</span>}                               <span># '&lt;el&gt;      '</span>
{&lt;el&gt;:^<span>10</span>}                               <span># '   &lt;el&gt;   '</span>
{&lt;el&gt;:&gt;<span>10</span>}                               <span># '      &lt;el&gt;'</span>
{&lt;el&gt;:.&lt;<span>10</span>}                              <span># '&lt;el&gt;......'</span>
{&lt;el&gt;:<span>0</span>}                                 <span># '&lt;el&gt;'</span>
</code></pre></div>

<ul>
<li><strong>Options can be generated dynamically: <code><span>f'<span>{&lt;el&gt;:{&lt;str/int&gt;}</span>[‚Ä¶]}'</span></code>.</strong></li>
<li><strong>Adding <code><span>'='</span></code> to the expression prepends it to the output: <code><span>f'<span>{<span>1</span>+<span>1</span>=}</span>'</span></code> returns <code><span>'1+1=2'</span></code>.</strong></li>
<li><strong>Adding <code><span>'!r'</span></code> to the expression converts object to string by calling its <a href="#class">repr()</a> method.</strong></li>
</ul>
<div><h3 id="strings">Strings</h3><pre><code>{<span>'abcde'</span>:<span>10</span>}                             <span># 'abcde     '</span>
{<span>'abcde'</span>:<span>10.3</span>}                           <span># 'abc       '</span>
{<span>'abcde'</span>:<span>.3</span>}                             <span># 'abc'</span>
{<span>'abcde'</span>!r:<span>10</span>}                           <span># "'abcde'   "</span>
</code></pre></div>

<div><h3 id="numbers-1">Numbers</h3><pre><code>{<span>123456</span>:<span>10</span>}                              <span># '    123456'</span>
{<span>123456</span>:<span>10</span>,}                             <span># '   123,456'</span>
{<span>123456</span>:<span>10</span>_}                             <span># '   123_456'</span>
{<span>123456</span>:+<span>10</span>}                             <span># '   +123456'</span>
{<span>123456</span>:=+<span>10</span>}                            <span># '+   123456'</span>
{<span>123456</span>: }                               <span># ' 123456'</span>
{<span>-123456</span>: }                              <span># '-123456'</span>
</code></pre></div>

<div><h3 id="floats">Floats</h3><pre><code>{<span>1.23456</span>:<span>10.3</span>}                           <span># '      1.23'</span>
{<span>1.23456</span>:<span>10.3</span>f}                          <span># '     1.235'</span>
{<span>1.23456</span>:<span>10.3</span>e}                          <span># ' 1.235e+00'</span>
{<span>1.23456</span>:<span>10.3</span>%}                          <span># '  123.456%'</span>
</code></pre></div>

<div><h4 id="comparisonofpresentationtypes">Comparison of presentation types:</h4><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ              ‚îÇ    {&lt;float&gt;}   ‚îÇ   {&lt;float&gt;:f}  ‚îÇ   {&lt;float&gt;:e}  ‚îÇ   {&lt;float&gt;:%}  ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ  0.000056789 ‚îÇ   '5.6789e-05' ‚îÇ    '0.000057'  ‚îÇ '5.678900e-05' ‚îÇ    '0.005679%' ‚îÉ
‚îÉ  0.00056789  ‚îÇ   '0.00056789' ‚îÇ    '0.000568'  ‚îÇ '5.678900e-04' ‚îÇ    '0.056789%' ‚îÉ
‚îÉ  0.0056789   ‚îÇ   '0.0056789'  ‚îÇ    '0.005679'  ‚îÇ '5.678900e-03' ‚îÇ    '0.567890%' ‚îÉ
‚îÉ  0.056789    ‚îÇ   '0.056789'   ‚îÇ    '0.056789'  ‚îÇ '5.678900e-02' ‚îÇ    '5.678900%' ‚îÉ
‚îÉ  0.56789     ‚îÇ   '0.56789'    ‚îÇ    '0.567890'  ‚îÇ '5.678900e-01' ‚îÇ   '56.789000%' ‚îÉ
‚îÉ  5.6789      ‚îÇ   '5.6789'     ‚îÇ    '5.678900'  ‚îÇ '5.678900e+00' ‚îÇ  '567.890000%' ‚îÉ
‚îÉ 56.789       ‚îÇ  '56.789'      ‚îÇ   '56.789000'  ‚îÇ '5.678900e+01' ‚îÇ '5678.900000%' ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ              ‚îÇ  {&lt;float&gt;:.2}  ‚îÇ  {&lt;float&gt;:.2f} ‚îÇ  {&lt;float&gt;:.2e} ‚îÇ  {&lt;float&gt;:.2%} ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ  0.000056789 ‚îÇ    '5.7e-05'   ‚îÇ      '0.00'    ‚îÇ   '5.68e-05'   ‚îÇ      '0.01%'   ‚îÉ
‚îÉ  0.00056789  ‚îÇ    '0.00057'   ‚îÇ      '0.00'    ‚îÇ   '5.68e-04'   ‚îÇ      '0.06%'   ‚îÉ
‚îÉ  0.0056789   ‚îÇ    '0.0057'    ‚îÇ      '0.01'    ‚îÇ   '5.68e-03'   ‚îÇ      '0.57%'   ‚îÉ
‚îÉ  0.056789    ‚îÇ    '0.057'     ‚îÇ      '0.06'    ‚îÇ   '5.68e-02'   ‚îÇ      '5.68%'   ‚îÉ
‚îÉ  0.56789     ‚îÇ    '0.57'      ‚îÇ      '0.57'    ‚îÇ   '5.68e-01'   ‚îÇ     '56.79%'   ‚îÉ
‚îÉ  5.6789      ‚îÇ    '5.7'       ‚îÇ      '5.68'    ‚îÇ   '5.68e+00'   ‚îÇ    '567.89%'   ‚îÉ
‚îÉ 56.789       ‚îÇ    '5.7e+01'   ‚îÇ     '56.79'    ‚îÇ   '5.68e+01'   ‚îÇ   '5678.90%'   ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div>


<ul>
<li><strong><code><span>'{&lt;float&gt;:g}'</span></code> is <code><span>'{&lt;float&gt;:.6}'</span></code> with stripped zeros, exponent starting at 7 figures.</strong></li>
<li><strong>When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes <code><span>'{6.5:.0f}'</span></code> a <code><span>'6'</span></code> and <code><span>'{7.5:.0f}'</span></code> an <code><span>'8'</span></code>.</strong></li>
<li><strong>This rule only effects numbers that can be represented exactly by a float (<code><span>.5</span></code>, <code><span>.25</span></code>, ‚Ä¶).</strong></li>
</ul>
<div><h3 id="ints">Ints</h3><pre><code>{<span>90</span>:c}                                   <span># 'Z'</span>
{<span>90</span>:b}                                   <span># '1011010'</span>
{<span>90</span>:X}                                   <span># '5A'</span>
</code></pre></div>

<div><h2 id="numbers"><a href="#numbers" name="numbers">#</a>Numbers</h2><pre><code>&lt;int&gt;      = int(&lt;float/str/bool&gt;)                <span># Or: math.floor(&lt;float&gt;)</span>
&lt;float&gt;    = float(&lt;int/str/bool&gt;)                <span># Or: &lt;real&gt;e¬±&lt;int&gt;</span>
&lt;complex&gt;  = complex(real=<span>0</span>, imag=<span>0</span>)              <span># Or: &lt;real&gt; ¬± &lt;real&gt;j</span>
&lt;Fraction&gt; = fractions.Fraction(<span>0</span>, <span>1</span>)             <span># Or: Fraction(numerator=0, denominator=1)</span>
&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           <span># Or: Decimal((sign, digits, exponent))</span>
</code></pre></div>

<ul>
<li><strong><code><span>'int(&lt;str&gt;)'</span></code> and <code><span>'float(&lt;str&gt;)'</span></code> raise ValueError on malformed strings.</strong></li>
<li><strong>Decimal numbers are stored exactly, unlike most floats where <code><span>'1.1 + 2.2 != 3.3'</span></code>.</strong></li>
<li><strong>Floats can be compared with: <code><span>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</span></code>.</strong></li>
<li><strong>Precision of decimal operations is set with: <code><span>'decimal.getcontext().prec = &lt;int&gt;'</span></code>.</strong></li>
</ul>
<div><h3 id="basicfunctions">Basic Functions</h3><pre><code>&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         <span># Or: &lt;num&gt; ** &lt;num&gt;</span>
&lt;num&gt; = abs(&lt;num&gt;)                                <span># &lt;float&gt; = abs(&lt;complex&gt;)</span>
&lt;num&gt; = round(&lt;num&gt; [, ¬±ndigits])                 <span># `round(126, -1) == 130`</span>
</code></pre></div>

<div><h3 id="math">Math</h3><pre><code><span>from</span> math <span>import</span> e, pi, inf, nan, isinf, isnan    <span># `&lt;el&gt; == nan` is always False.</span>
<span>from</span> math <span>import</span> sin, cos, tan, asin, acos, atan  <span># Also: degrees, radians.</span>
<span>from</span> math <span>import</span> log, log10, log2                 <span># Log can accept base as second arg.</span>
</code></pre></div>

<div><h3 id="statistics">Statistics</h3><pre><code><span>from</span> statistics <span>import</span> mean, median, variance     <span># Also: stdev, quantiles, groupby.</span>
</code></pre></div>

<div><h3 id="random">Random</h3><pre><code><span>from</span> random <span>import</span> random, randint, choice        <span># Also: shuffle, gauss, triangular, seed.</span>
&lt;float&gt; = random()                                <span># A float inside [0, 1).</span>
&lt;int&gt;   = randint(from_inc, to_inc)               <span># An int inside [from_inc, to_inc].</span>
&lt;el&gt;    = choice(&lt;sequence&gt;)                      <span># Keeps the sequence intact.</span>
</code></pre></div>

<div><h3 id="binhex">Bin, Hex</h3><pre><code>&lt;int&gt; = ¬±<span>0</span>b&lt;bin&gt;                                  <span># Or: ¬±0x&lt;hex&gt;</span>
&lt;int&gt; = int(<span>'¬±&lt;bin&gt;'</span>, <span>2</span>)                          <span># Or: int('¬±&lt;hex&gt;', 16)</span>
&lt;int&gt; = int(<span>'¬±0b&lt;bin&gt;'</span>, <span>0</span>)                        <span># Or: int('¬±0x&lt;hex&gt;', 0)</span>
&lt;str&gt; = bin(&lt;int&gt;)                                <span># Returns '[-]0b&lt;bin&gt;'.</span>
</code></pre></div>

<div><h3 id="bitwiseoperators">Bitwise Operators</h3><pre><code>&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             <span># And (0b1100 &amp; 0b1010 == 0b1000).</span>
&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             <span># Or  (0b1100 | 0b1010 == 0b1110).</span>
&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             <span># Xor (0b1100 ^ 0b1010 == 0b0110).</span>
&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           <span># Left shift. Use &gt;&gt; for right.</span>
&lt;int&gt; = ~&lt;int&gt;                                    <span># Not. Also -&lt;int&gt; - 1.</span>
</code></pre></div>

<div><h2 id="combinatorics"><a href="#combinatorics" name="combinatorics">#</a>Combinatorics</h2><ul>
<li><strong>Every function returns an iterator.</strong></li>
<li><strong>If you want to print the iterator, you need to pass it to the list() function first!</strong></li>
</ul><pre><code><span>import</span> itertools <span>as</span> it
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>it.product([<span>0</span>, <span>1</span>], repeat=<span>3</span>)
[(<span>0</span>, <span>0</span>, <span>0</span>), (<span>0</span>, <span>0</span>, <span>1</span>), (<span>0</span>, <span>1</span>, <span>0</span>), (<span>0</span>, <span>1</span>, <span>1</span>),
 (<span>1</span>, <span>0</span>, <span>0</span>), (<span>1</span>, <span>0</span>, <span>1</span>), (<span>1</span>, <span>1</span>, <span>0</span>), (<span>1</span>, <span>1</span>, <span>1</span>)]
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.product(<span>'abc'</span>, <span>'abc'</span>)                     <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'a'</span>), (<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),             <span># a x  x  x</span>
 (<span>'b'</span>, <span>'a'</span>), (<span>'b'</span>, <span>'b'</span>), (<span>'b'</span>, <span>'c'</span>),             <span># b x  x  x</span>
 (<span>'c'</span>, <span>'a'</span>), (<span>'c'</span>, <span>'b'</span>), (<span>'c'</span>, <span>'c'</span>)]             <span># c x  x  x</span>
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.combinations(<span>'abc'</span>, <span>2</span>)                    <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),                         <span># a .  x  x</span>
 (<span>'b'</span>, <span>'c'</span>)]                                     <span># b .  .  x</span>
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.combinations_with_replacement(<span>'abc'</span>, <span>2</span>)   <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'a'</span>), (<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),             <span># a x  x  x</span>
 (<span>'b'</span>, <span>'b'</span>), (<span>'b'</span>, <span>'c'</span>),                         <span># b .  x  x</span>
 (<span>'c'</span>, <span>'c'</span>)]                                     <span># c .  .  x</span>
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.permutations(<span>'abc'</span>, <span>2</span>)                    <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),                         <span># a .  x  x</span>
 (<span>'b'</span>, <span>'a'</span>), (<span>'b'</span>, <span>'c'</span>),                         <span># b x  .  x</span>
 (<span>'c'</span>, <span>'a'</span>), (<span>'c'</span>, <span>'b'</span>)]                         <span># c x  x  .</span>
</code></pre>
<div><h2 id="datetime"><a href="#datetime" name="datetime">#</a>Datetime</h2><ul>
<li><strong>Module 'datetime' provides 'date' <code><span>&lt;D&gt;</span></code>, 'time' <code><span>&lt;T&gt;</span></code>, 'datetime' <code><span>&lt;DT&gt;</span></code> and 'timedelta' <code><span>&lt;TD&gt;</span></code> classes. All are immutable and hashable.</strong></li>
<li><strong>Time and datetime objects can be 'aware' <code><span>&lt;a&gt;</span></code>, meaning they have defined timezone, or 'naive' <code><span>&lt;n&gt;</span></code>, meaning they don't.</strong></li>
<li><strong>If object is naive, it is presumed to be in the system's timezone.</strong></li>
</ul><pre><code><span>from</span> datetime <span>import</span> date, time, datetime, timedelta
<span>from</span> dateutil.tz <span>import</span> UTC, tzlocal, gettz, datetime_exists, resolve_imaginary
</code></pre></div>


<div><h3 id="constructors">Constructors</h3><pre><code>&lt;D&gt;  = date(year, month, day)               <span># Only accepts valid dates from 1 to 9999 AD.</span>
&lt;T&gt;  = time(hour=<span>0</span>, minute=<span>0</span>, second=<span>0</span>)     <span># Also: `microsecond=0, tzinfo=None, fold=0`.</span>
&lt;DT&gt; = datetime(year, month, day, hour=<span>0</span>)   <span># Also: `minute=0, second=0, microsecond=0, ‚Ä¶`.</span>
&lt;TD&gt; = timedelta(weeks=<span>0</span>, days=<span>0</span>, hours=<span>0</span>)  <span># Also: `minutes=0, seconds=0, microseconds=0`.</span>
</code></pre></div>

<ul>
<li><strong>Use <code><span>'&lt;D/DT&gt;.weekday()'</span></code> to get the day of the week as an int, with Monday being 0.</strong></li>
<li><strong><code><span>'fold=1'</span></code> means the second pass in case of time jumping back for one hour.</strong></li>
<li><strong>Timedelta normalizes arguments to ¬±days, seconds (&lt; 86‚ÄØ400) and microseconds (&lt; 1M).</strong></li>
<li><strong><code><span>'&lt;DTa&gt; = resolve_imaginary(&lt;DTa&gt;)'</span></code> fixes DTs that fall into the missing hour.</strong></li>
</ul>
<div><h3 id="now">Now</h3><pre><code>&lt;D/DTn&gt;  = D/DT.today()                     <span># Current local date or naive datetime.</span>
&lt;DTn&gt;    = DT.utcnow()                      <span># Naive datetime from current UTC time.</span>
&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 <span># Aware datetime from current tz time.</span>
</code></pre></div>

<ul>
<li><strong>To extract time use <code><span>'&lt;DTn&gt;.time()'</span></code>, <code><span>'&lt;DTa&gt;.time()'</span></code> or <code><span>'&lt;DTa&gt;.timetz()'</span></code>.</strong></li>
</ul>
<div><h3 id="timezone">Timezone</h3><pre><code>&lt;tzinfo&gt; = UTC                              <span># UTC timezone. London without DST.</span>
&lt;tzinfo&gt; = tzlocal()                        <span># Local timezone. Also gettz().</span>
&lt;tzinfo&gt; = gettz(<span>'&lt;Continent&gt;/&lt;City&gt;'</span>)      <span># 'Continent/City_Name' timezone or None.</span>
&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        <span># Datetime, converted to the passed timezone.</span>
&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  <span># Unconverted object with a new timezone.</span>
</code></pre></div>

<div><h3 id="encode">Encode</h3><pre><code>&lt;D/T/DT&gt; = D/T/DT.fromisoformat(<span>'&lt;iso&gt;'</span>)    <span># Object from ISO string. Raises ValueError.</span>
&lt;DT&gt;     = DT.strptime(&lt;str&gt;, <span>'&lt;format&gt;'</span>)   <span># Datetime from str, according to format.</span>
&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          <span># D/DTn from days since the Gregorian NYE 1.</span>
&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         <span># Local time DTn from seconds since the Epoch.</span>
&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  <span># Aware datetime from seconds since the Epoch.</span>
</code></pre></div>

<ul>
<li><strong>ISO strings come in following forms: <code><span>'YYYY-MM-DD'</span></code>, <code><span>'HH:MM:SS.mmmuuu[¬±HH:MM]'</span></code>, or both separated by an arbitrary character. All parts following the hours are optional.</strong></li>
<li><strong>Python uses the Unix Epoch: <code><span>'1970-01-01 00:00 UTC'</span></code>, <code><span>'1970-01-01 01:00 CET'</span></code>, ‚Ä¶</strong></li>
</ul>
<div><h3 id="decode">Decode</h3><pre><code>&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep=<span>'T'</span>)      <span># Also `timespec='auto/hours/minutes/seconds/‚Ä¶'`.</span>
&lt;str&gt;    = &lt;D/T/DT&gt;.strftime(<span>'&lt;format&gt;'</span>)    <span># Custom string representation.</span>
&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               <span># Days since Gregorian NYE 1, ignoring time and tz.</span>
&lt;float&gt;  = &lt;DTn&gt;.timestamp()                <span># Seconds since the Epoch, from DTn in local tz.</span>
&lt;float&gt;  = &lt;DTa&gt;.timestamp()                <span># Seconds since the Epoch, from aware datetime.</span>
</code></pre></div>

<div><h3 id="format-1">Format</h3><pre><code><span>&gt;&gt;&gt; </span>dt = datetime.strptime(<span>'2015-05-14 23:39:00.00 +0200'</span>, <span>'%Y-%m-%d %H:%M:%S.%f %z'</span>)
<span>&gt;&gt;&gt; </span>dt.strftime(<span>"%A, %dth of %B '%y, %I:%M%p %Z"</span>)
<span>"Thursday, 14th of May '15, 11:39PM UTC+02:00"</span>
</code></pre></div>

<ul>
<li><strong>Format code <code><span>'%z'</span></code> accepts <code><span>'¬±HH[:]MM'</span></code> and returns <code><span>'¬±HHMM'</span></code> (or <code><span>''</span></code> if datetime is naive).</strong></li>
<li><strong>For abbreviated weekday and month use <code><span>'%a'</span></code> and <code><span>'%b'</span></code>.</strong></li>
</ul>
<div><h3 id="arithmetics">Arithmetics</h3><pre><code>&lt;D/DT&gt;   = &lt;D/DT&gt;  ¬± &lt;TD&gt;                   <span># Returned datetime can fall into missing hour.</span>
&lt;TD&gt;     = &lt;D/DTn&gt; - &lt;D/DTn&gt;                <span># Returns the difference. Ignores time jumps.</span>
&lt;TD&gt;     = &lt;DTa&gt;   - &lt;DTa&gt;                  <span># Ignores time jumps if they share tzinfo object.</span>
&lt;TD&gt;     = &lt;TD&gt;    * &lt;real&gt;                 <span># Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; ¬±% &lt;TD&gt;.</span>
&lt;float&gt;  = &lt;TD&gt;    / &lt;TD&gt;                   <span># How many weeks/years there are in TD. Also //.</span>
</code></pre></div>

<div><h2 id="arguments"><a href="#arguments" name="arguments">#</a>Arguments</h2><div><h3 id="insidefunctioncall">Inside Function Call</h3><pre><code>func(&lt;positional_args&gt;)                           <span># func(0, 0)</span>
func(&lt;keyword_args&gt;)                              <span># func(x=0, y=0)</span>
func(&lt;positional_args&gt;, &lt;keyword_args&gt;)           <span># func(0, y=0)</span>
</code></pre></div></div>


<div><h3 id="insidefunctiondefinition">Inside Function Definition</h3><pre><code><span><span>def</span> <span>func</span><span>(&lt;nondefault_args&gt;)</span>:</span> ...                  <span># def func(x, y): ...</span>
<span><span>def</span> <span>func</span><span>(&lt;default_args&gt;)</span>:</span> ...                     <span># def func(x=0, y=0): ...</span>
<span><span>def</span> <span>func</span><span>(&lt;nondefault_args&gt;, &lt;default_args&gt;)</span>:</span> ...  <span># def func(x, y=0): ...</span>
</code></pre></div>

<ul>
<li><strong>Default values are evaluated when function is first encountered in the scope.</strong></li>
<li><strong>Any mutation of a mutable default value will persist between invocations!</strong></li>
</ul>
<div><h2 id="splatoperator"><a href="#splatoperator" name="splatoperator">#</a>Splat Operator</h2><div><h3 id="insidefunctioncall-1">Inside Function Call</h3><p><strong>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.</strong></p><pre><code>args   = (<span>1</span>, <span>2</span>)
kwargs = {<span>'x'</span>: <span>3</span>, <span>'y'</span>: <span>4</span>, <span>'z'</span>: <span>5</span>}
func(*args, **kwargs)
</code></pre></div></div>



<div><h4 id="isthesameas">Is the same as:</h4><pre><code>func(<span>1</span>, <span>2</span>, x=<span>3</span>, y=<span>4</span>, z=<span>5</span>)
</code></pre></div>

<div><h3 id="insidefunctiondefinition-1">Inside Function Definition</h3><p><strong>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.</strong></p><pre><code><span><span>def</span> <span>add</span><span>(*a)</span>:</span>
    <span>return</span> sum(a)
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>add(<span>1</span>, <span>2</span>, <span>3</span>)
<span>6</span>
</code></pre>
<div><h4 id="legalargumentcombinations">Legal argument combinations:</h4><pre><code><span><span>def</span> <span>f</span><span>(*args)</span>:</span> ...               <span># f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(x, *args)</span>:</span> ...            <span># f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(*args, z)</span>:</span> ...            <span># f(1, 2, z=3)</span>
</code></pre></div>

<pre><code><span><span>def</span> <span>f</span><span>(**kwargs)</span>:</span> ...            <span># f(x=1, y=2, z=3)</span>
<span><span>def</span> <span>f</span><span>(x, **kwargs)</span>:</span> ...         <span># f(x=1, y=2, z=3) | f(1, y=2, z=3)</span>
</code></pre>
<pre><code><span><span>def</span> <span>f</span><span>(*args, **kwargs)</span>:</span> ...     <span># f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(x, *args, **kwargs)</span>:</span> ...  <span># f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(*args, y, **kwargs)</span>:</span> ...  <span># f(x=1, y=2, z=3) | f(1, y=2, z=3)</span>
</code></pre>
<pre><code><span><span>def</span> <span>f</span><span>(*, x, y, z)</span>:</span> ...          <span># f(x=1, y=2, z=3)</span>
<span><span>def</span> <span>f</span><span>(x, *, y, z)</span>:</span> ...          <span># f(x=1, y=2, z=3) | f(1, y=2, z=3)</span>
<span><span>def</span> <span>f</span><span>(x, y, *, z)</span>:</span> ...          <span># f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)</span>
</code></pre>
<div><h3 id="otheruses">Other Uses</h3><pre><code>&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    <span># Or: list(&lt;collection&gt;) [+ ...]</span>
&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     <span># Or: tuple(&lt;collection&gt;) [+ ...]</span>
&lt;set&gt;   = {*&lt;coll.&gt; [, ...]}    <span># Or: set(&lt;collection&gt;) [| ...]</span>
&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}    <span># Or: dict(**&lt;dict&gt; [, ...])</span>
</code></pre></div>

<pre><code>head, *body, tail = &lt;coll.&gt;     <span># Head or tail can be omitted.</span>
</code></pre>
<div><h2 id="inline"><a href="#inline" name="inline">#</a>Inline</h2><div><h3 id="lambda">Lambda</h3><pre><code>&lt;func&gt; = <span>lambda</span>: &lt;return_value&gt;                     <span># A single statement function.</span>
&lt;func&gt; = <span>lambda</span> &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    <span># Also accepts default arguments.</span>
</code></pre></div></div>


<div><h3 id="comprehensions">Comprehensions</h3><pre><code>&lt;list&gt; = [i+<span>1</span> <span>for</span> i <span>in</span> range(<span>10</span>)]                   <span># Or: [1, 2, ..., 10]</span>
&lt;iter&gt; = (i <span>for</span> i <span>in</span> range(<span>10</span>) <span>if</span> i &gt; <span>5</span>)            <span># Or: iter([6, 7, 8, 9])</span>
&lt;set&gt;  = {i+<span>5</span> <span>for</span> i <span>in</span> range(<span>10</span>)}                   <span># Or: {5, 6, ..., 14}</span>
&lt;dict&gt; = {i: i*<span>2</span> <span>for</span> i <span>in</span> range(<span>10</span>)}                <span># Or: {0: 0, 1: 2, ..., 9: 18}</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>[l+r <span>for</span> l <span>in</span> <span>'abc'</span> <span>for</span> r <span>in</span> <span>'abc'</span>]
[<span>'aa'</span>, <span>'ab'</span>, <span>'ac'</span>, ..., <span>'cc'</span>]
</code></pre>
<div><h3 id="mapfilterreduce">Map, Filter, Reduce</h3><pre><code><span>from</span> functools <span>import</span> reduce
</code></pre></div>

<pre><code>&lt;iter&gt; = map(<span>lambda</span> x: x + <span>1</span>, range(<span>10</span>))            <span># Or: iter([1, 2, ..., 10])</span>
&lt;iter&gt; = filter(<span>lambda</span> x: x &gt; <span>5</span>, range(<span>10</span>))         <span># Or: iter([6, 7, 8, 9])</span>
&lt;obj&gt;  = reduce(<span>lambda</span> out, x: out + x, range(<span>10</span>))  <span># Or: 45</span>
</code></pre>
<div><h3 id="anyall">Any, All</h3><pre><code>&lt;bool&gt; = any(&lt;collection&gt;)                          <span># Is `bool(&lt;el&gt;)` True for any element.</span>
&lt;bool&gt; = all(&lt;collection&gt;)                          <span># Is True for all elements or empty.</span>
</code></pre></div>

<div><h3 id="conditionalexpression">Conditional Expression</h3><pre><code>&lt;obj&gt; = &lt;exp&gt; <span>if</span> &lt;condition&gt; <span>else</span> &lt;exp&gt;             <span># Only one expression gets evaluated.</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>[a <span>if</span> a <span>else</span> <span>'zero'</span> <span>for</span> a <span>in</span> (<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>)]      <span># `any([0, '', [], None]) == False`</span>
[<span>'zero'</span>, <span>1</span>, <span>2</span>, <span>3</span>]
</code></pre>
<div><h3 id="namedtupleenumdataclass">Named Tuple, Enum, Dataclass</h3><pre><code><span>from</span> collections <span>import</span> namedtuple
Point = namedtuple(<span>'Point'</span>, <span>'x y'</span>)                  <span># Creates a tuple's subclass.</span>
point = Point(<span>0</span>, <span>0</span>)                                 <span># Returns its instance.</span>
</code></pre></div>

<pre><code><span>from</span> enum <span>import</span> Enum
Direction = Enum(<span>'Direction'</span>, <span>'N E S W'</span>)            <span># Creates an enum.</span>
direction = Direction.N                             <span># Returns its member.</span>
</code></pre>
<pre><code><span>from</span> dataclasses <span>import</span> make_dataclass
Player = make_dataclass(<span>'Player'</span>, [<span>'loc'</span>, <span>'dir'</span>])   <span># Creates a class.</span>
player = Player(point, direction)                   <span># Returns its instance.</span>
</code></pre>
<div><h2 id="imports"><a href="#imports" name="imports">#</a>Imports</h2><pre><code><span>import</span> &lt;module&gt;            <span># Imports a built-in or '&lt;module&gt;.py'.</span>
<span>import</span> &lt;package&gt;           <span># Imports a built-in or '&lt;package&gt;/__init__.py'.</span>
<span>import</span> &lt;package&gt;.&lt;module&gt;  <span># Imports a built-in or '&lt;package&gt;/&lt;module&gt;.py'.</span>
</code></pre></div>

<ul>
<li><strong>Package is a collection of modules, but it can also define its own objects.</strong></li>
<li><strong>On a filesystem this corresponds to a directory of Python files with an optional init script.</strong></li>
<li><strong>Running <code><span>'import &lt;package&gt;'</span></code> does not automatically provide access to the package's modules unless they are explicitly imported in its init script.</strong></li>
</ul>
<div><h2 id="closure"><a href="#closure" name="closure">#</a>Closure</h2><p><strong>We have/get a closure in Python when:</strong></p><ul>
<li><strong>A nested function references a value of its enclosing function and then</strong></li>
<li><strong>the enclosing function returns the nested function.</strong></li>
</ul><pre><code><span><span>def</span> <span>get_multiplier</span><span>(a)</span>:</span>
    <span><span>def</span> <span>out</span><span>(b)</span>:</span>
        <span>return</span> a * b
    <span>return</span> out
</code></pre></div>



<pre><code><span>&gt;&gt;&gt; </span>multiply_by_3 = get_multiplier(<span>3</span>)
<span>&gt;&gt;&gt; </span>multiply_by_3(<span>10</span>)
<span>30</span>
</code></pre>
<ul>
<li><strong>If multiple nested functions within enclosing function reference the same value, that value gets shared.</strong></li>
<li><strong>To dynamically access function's first free variable use <code><span>'&lt;function&gt;.__closure__[0].cell_contents'</span></code>.</strong></li>
</ul>
<div><h3 id="partial">Partial</h3><pre><code><span>from</span> functools <span>import</span> partial
&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span><span><span>def</span> <span>multiply</span><span>(a, b)</span>:</span>
<span>... </span>    <span>return</span> a * b
<span>&gt;&gt;&gt; </span>multiply_by_3 = partial(multiply, <span>3</span>)
<span>&gt;&gt;&gt; </span>multiply_by_3(<span>10</span>)
<span>30</span>
</code></pre>
<ul>
<li><strong>Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand.</strong></li>
<li><strong>A few examples being: <code><span>'defaultdict(&lt;function&gt;)'</span></code>, <code><span>'iter(&lt;function&gt;, to_exclusive)'</span></code> and dataclass's <code><span>'field(default_factory=&lt;function&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="nonlocal">Non-Local</h3><p><strong>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</strong></p><pre><code><span><span>def</span> <span>get_counter</span><span>()</span>:</span>
    i = <span>0</span>
    <span><span>def</span> <span>out</span><span>()</span>:</span>
        <span>nonlocal</span> i
        i += <span>1</span>
        <span>return</span> i
    <span>return</span> out
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>counter = get_counter()
<span>&gt;&gt;&gt; </span>counter(), counter(), counter()
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<div><h2 id="decorator"><a href="#decorator" name="decorator">#</a>Decorator</h2><ul>
<li><strong>A decorator takes a function, adds some functionality and returns it.</strong></li>
<li><strong>It can be any <a href="#callable">callable</a>, but is usually implemented as a function that returns a <a href="#closure">closure</a>.</strong></li>
</ul><pre><code><span>@decorator_name</span>
<span><span>def</span> <span>function_that_gets_passed_to_decorator</span><span>()</span>:</span>
    ...
</code></pre></div>


<div><h3 id="debuggerexample">Debugger Example</h3><p><strong>Decorator that prints function's name every time the function is called.</strong></p><pre><code><span>from</span> functools <span>import</span> wraps

<span><span>def</span> <span>debug</span><span>(func)</span>:</span>
<span>    @wraps(func)</span>
    <span><span>def</span> <span>out</span><span>(*args, **kwargs)</span>:</span>
        print(func.__name__)
        <span>return</span> func(*args, **kwargs)
    <span>return</span> out

<span>@debug</span>
<span><span>def</span> <span>add</span><span>(x, y)</span>:</span>
    <span>return</span> x + y
</code></pre></div>


<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).</strong></li>
<li><strong>Without it <code><span>'add.__name__'</span></code> would return <code><span>'out'</span></code>.</strong></li>
</ul>
<div><h3 id="lrucache">LRU Cache</h3><p><strong>Decorator that caches function's return values. All function's arguments must be hashable.</strong></p><pre><code><span>from</span> functools <span>import</span> lru_cache

<span>@lru_cache(maxsize=None)</span>
<span><span>def</span> <span>fib</span><span>(n)</span>:</span>
    <span>return</span> n <span>if</span> n &lt; <span>2</span> <span>else</span> fib(n-<span>2</span>) + fib(n-<span>1</span>)
</code></pre></div>


<ul>
<li><strong>Default size of the cache is 128 values. Passing <code><span>'maxsize=None'</span></code> makes it unbounded.</strong></li>
<li><strong>CPython interpreter limits recursion depth to 1000 by default. To increase it use <code><span>'sys.setrecursionlimit(&lt;depth&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="parametrizeddecorator">Parametrized Decorator</h3><p><strong>A decorator that accepts arguments and returns a normal decorator that accepts a function.</strong></p><pre><code><span>from</span> functools <span>import</span> wraps

<span><span>def</span> <span>debug</span><span>(print_result=<span>False</span>)</span>:</span>
    <span><span>def</span> <span>decorator</span><span>(func)</span>:</span>
<span>        @wraps(func)</span>
        <span><span>def</span> <span>out</span><span>(*args, **kwargs)</span>:</span>
            result = func(*args, **kwargs)
            print(func.__name__, result <span>if</span> print_result <span>else</span> <span>''</span>)
            <span>return</span> result
        <span>return</span> out
    <span>return</span> decorator

<span>@debug(print_result=True)</span>
<span><span>def</span> <span>add</span><span>(x, y)</span>:</span>
    <span>return</span> x + y
</code></pre></div>


<ul>
<li><strong>Using only <code><span>'@debug'</span></code> to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.</strong></li>
</ul>
<div><h2 id="class"><a href="#class" name="class">#</a>Class</h2><pre><code><span><span>class</span> &lt;<span>name</span>&gt;:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__repr__</span><span>(self)</span>:</span>
        class_name = self.__class__.__name__
        <span>return</span> <span>f'<span>{class_name}</span>(<span>{self.a!r}</span>)'</span>
    <span><span>def</span> <span>__str__</span><span>(self)</span>:</span>
        <span>return</span> str(self.a)

<span>    @classmethod</span>
    <span><span>def</span> <span>get_class_name</span><span>(cls)</span>:</span>
        <span>return</span> cls.__name__
</code></pre></div>

<ul>
<li><strong>Return value of repr() should be unambiguous and of str() readable.</strong></li>
<li><strong>If only repr() is defined, it will also be used for str().</strong></li>
<li><strong>Methods decorated with <code><span>'@staticmethod'</span></code> do not receive 'self' nor 'cls' as their first arg.</strong></li>
</ul>
<div><h4 id="expressionsthatcallthestrmethod">Expressions that call the str() method:</h4><pre><code>print(&lt;el&gt;)
<span>f'<span>{&lt;el&gt;}</span>'</span>
logging.warning(&lt;el&gt;)
csv.writer(&lt;file&gt;).writerow([&lt;el&gt;])
<span>raise</span> Exception(&lt;el&gt;)
</code></pre></div>

<div><h4 id="expressionsthatcallthereprmethod">Expressions that call the repr() method:</h4><pre><code>print/str/repr([&lt;el&gt;])
print/str/repr({&lt;el&gt;: &lt;el&gt;})
<span>f'<span>{&lt;el&gt;!r}</span>'</span>
Z = dataclasses.make_dataclass(<span>'Z'</span>, [<span>'a'</span>]); print/str/repr(Z(&lt;el&gt;))
<span>&gt;&gt;&gt; </span>&lt;el&gt;
</code></pre></div>

<div><h3 id="constructoroverloading">Constructor Overloading</h3><pre><code><span><span>class</span> &lt;<span>name</span>&gt;:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a=<span>None</span>)</span>:</span>
        self.a = a
</code></pre></div>

<div><h3 id="inheritance">Inheritance</h3><pre><code><span><span>class</span> <span>Person</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, name, age)</span>:</span>
        self.name = name
        self.age  = age

<span><span>class</span> <span>Employee</span><span>(Person)</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, name, age, staff_num)</span>:</span>
        super().__init__(name, age)
        self.staff_num = staff_num
</code></pre></div>

<div><h3 id="multipleinheritance">Multiple Inheritance</h3><pre><code><span><span>class</span> <span>A</span>:</span> <span>pass</span>
<span><span>class</span> <span>B</span>:</span> <span>pass</span>
<span><span>class</span> <span>C</span><span>(A, B)</span>:</span> <span>pass</span>
</code></pre></div>

<p><strong>MRO determines the order in which parent classes are traversed when searching for a method or an attribute:</strong></p>
<pre><code><span>&gt;&gt;&gt; </span>C.mro()
[&lt;<span><span>class</span> '<span>C</span>'&gt;, &lt;<span>class</span> '<span>A</span>'&gt;, &lt;<span>class</span> '<span>B</span>'&gt;, &lt;<span>class</span> '<span>object</span>'&gt;]
</span></code></pre>
<div><h3 id="property">Property</h3><p><strong>Pythonic way of implementing getters and setters.</strong></p><pre><code><span><span>class</span> <span>Person</span>:</span>
<span>    @property</span>
    <span><span>def</span> <span>name</span><span>(self)</span>:</span>
        <span>return</span> <span>' '</span>.join(self._name)

<span>    @name.setter</span>
    <span><span>def</span> <span>name</span><span>(self, value)</span>:</span>
        self._name = value.split()
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>person = Person()
<span>&gt;&gt;&gt; </span>person.name = <span>'\t Guido  van Rossum \n'</span>
<span>&gt;&gt;&gt; </span>person.name
<span>'Guido van Rossum'</span>
</code></pre>
<div><h3 id="dataclass">Dataclass</h3><p><strong>Decorator that automatically generates init(), repr() and eq() special methods.</strong></p><pre><code><span>from</span> dataclasses <span>import</span> dataclass, field

<span>@dataclass(order=False, frozen=False)</span>
<span><span>class</span> &lt;<span>class_name</span>&gt;:</span>
    &lt;attr_name&gt;: &lt;type&gt;
    &lt;attr_name&gt;: &lt;type&gt; = &lt;default_value&gt;
    &lt;attr_name&gt;: list/dict/set = field(default_factory=list/dict/set)
</code></pre></div>


<ul>
<li><strong>Objects can be made <a href="#sortable">sortable</a> with <code><span>'order=True'</span></code> and immutable with <code><span>'frozen=True'</span></code>.</strong></li>
<li><strong>For object to be <a href="#hashable">hashable</a>, all attributes must be hashable and 'frozen' must be True.</strong></li>
<li><strong>Function field() is needed because <code><span>'&lt;attr_name&gt;: list = []'</span></code> would make a list that is shared among all instances. Its 'default_factory' argument can be any <a href="#callable">callable</a>.</strong></li>
<li><strong>For attributes of arbitrary type use <code><span>'typing.Any'</span></code>.</strong></li>
</ul>
<div><h4 id="inline-1">Inline:</h4><pre><code><span>from</span> dataclasses <span>import</span> make_dataclass
&lt;class&gt; = make_dataclass(<span>'&lt;class_name&gt;'</span>, &lt;coll_of_attribute_names&gt;)
&lt;class&gt; = make_dataclass(<span>'&lt;class_name&gt;'</span>, &lt;coll_of_tuples&gt;)
&lt;tuple&gt; = (<span>'&lt;attr_name&gt;'</span>, &lt;type&gt; [, &lt;default_value&gt;])</code></pre></div>

<div><h4 id="restoftypeannotationscpythoninterpreterignoresthemall">Rest of type annotations (CPython interpreter ignores them all):</h4><pre><code><span>import</span> typing <span>as</span> tp, collections.abc <span>as</span> abc
&lt;var_name&gt;: list/set/abc.Iterable/abc.Sequence/tp.Optional[&lt;type&gt;] [= &lt;obj&gt;]
&lt;var_name&gt;: dict/tuple/tp.Union[&lt;type&gt;, ...] [= &lt;obj&gt;]
<span><span>def</span> <span>func</span><span>(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;])</span> -&gt; &lt;type&gt;:</span> ...
</code></pre></div>

<div><h3 id="slots">Slots</h3><p><strong>Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.</strong></p><pre><code><span><span>class</span> <span>MyClassWithSlots</span>:</span>
    __slots__ = [<span>'a'</span>]
    <span><span>def</span> <span>__init__</span><span>(self)</span>:</span>
        self.a = <span>1</span>
</code></pre></div>


<div><h3 id="copy">Copy</h3><pre><code><span>from</span> copy <span>import</span> copy, deepcopy
&lt;object&gt; = copy(&lt;object&gt;)
&lt;object&gt; = deepcopy(&lt;object&gt;)
</code></pre></div>

<div><h2 id="ducktypes"><a href="#ducktypes" name="ducktypes">#</a>Duck Types</h2><p><strong>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</strong></p><div><h3 id="comparable">Comparable</h3><ul>
<li><strong>If eq() method is not overridden, it returns <code><span>'id(self) == id(other)'</span></code>, which is the same as <code><span>'self is other'</span></code>.</strong></li>
<li><strong>That means all objects compare not equal by default.</strong></li>
<li><strong>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. False is returned if both return NotImplemented.</strong></li>
<li><strong>Ne() automatically works on any object that has eq() defined.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyComparable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__eq__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a == other.a
        <span>return</span> <span>NotImplemented</span>
</code></pre></div></div>




<div><h3 id="hashable">Hashable</h3><ul>
<li><strong>Hashable object needs both hash() and eq() methods and its hash value should never change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code><span>'id(self)'</span></code> will not do.</strong></li>
<li><strong>That is why Python automatically makes classes unhashable if you only implement eq().</strong></li>
</ul><pre><code><span><span>class</span> <span>MyHashable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self._a = a
<span>    @property</span>
    <span><span>def</span> <span>a</span><span>(self)</span>:</span>
        <span>return</span> self._a
    <span><span>def</span> <span>__eq__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a == other.a
        <span>return</span> <span>NotImplemented</span>
    <span><span>def</span> <span>__hash__</span><span>(self)</span>:</span>
        <span>return</span> hash(self.a)
</code></pre></div>


<div><h3 id="sortable">Sortable</h3><ul>
<li><strong>With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.</strong></li>
<li><strong>Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.</strong></li>
<li><strong>When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.</strong></li>
<li><strong>Characters are compared by their Unicode IDs. Use module 'locale' for proper alphabetical order.</strong></li>
</ul><pre><code><span>from</span> functools <span>import</span> total_ordering

<span>@total_ordering</span>
<span><span>class</span> <span>MySortable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__eq__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a == other.a
        <span>return</span> <span>NotImplemented</span>
    <span><span>def</span> <span>__lt__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a &lt; other.a
        <span>return</span> <span>NotImplemented</span>
</code></pre></div>


<div><h3 id="iterator-1">Iterator</h3><ul>
<li><strong>Any object that has methods next() and iter() is an iterator.</strong></li>
<li><strong>Next() should return next item or raise StopIteration.</strong></li>
<li><strong>Iter() should return 'self'.</strong></li>
</ul><pre><code><span><span>class</span> <span>Counter</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self)</span>:</span>
        self.i = <span>0</span>
    <span><span>def</span> <span>__next__</span><span>(self)</span>:</span>
        self.i += <span>1</span>
        <span>return</span> self.i
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> self
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>counter = Counter()
<span>&gt;&gt;&gt; </span>next(counter), next(counter), next(counter)
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<div><h4 id="pythonhasmanydifferentiteratorobjects">Python has many different iterator objects:</h4><ul>
<li><strong>Sequence iterators returned by the <a href="#iterator">iter()</a> function, such as list_iterator and set_iterator.</strong></li>
<li><strong>Objects returned by the <a href="#itertools">itertools</a> module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="#generator">generator functions</a> and <a href="#comprehensions">generator expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="#open">open()</a> function, etc.</strong></li>
</ul><div><h3 id="callable">Callable</h3><ul>
<li><strong>All functions and classes have a call() method, hence are callable.</strong></li>
<li><strong>When this cheatsheet uses <code><span>'&lt;function&gt;'</span></code> as an argument, it actually means <code><span>'&lt;callable&gt;'</span></code>.</strong></li>
</ul><pre><code><span><span>class</span> <span>Counter</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self)</span>:</span>
        self.i = <span>0</span>
    <span><span>def</span> <span>__call__</span><span>(self)</span>:</span>
        self.i += <span>1</span>
        <span>return</span> self.i
</code></pre></div></div>




<pre><code><span>&gt;&gt;&gt; </span>counter = Counter()
<span>&gt;&gt;&gt; </span>counter(), counter(), counter()
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<div><h3 id="contextmanager">Context Manager</h3><ul>
<li><strong>With statements only work with objects that have enter() and exit() special methods.</strong></li>
<li><strong>Enter() should lock the resources and optionally return an object.</strong></li>
<li><strong>Exit() should release the resources.</strong></li>
<li><strong>Any exception that happens inside the with block is passed to the exit() method.</strong></li>
<li><strong>The exit() method can suppress the exception by returning a true value.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyOpen</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, filename)</span>:</span>
        self.filename = filename
    <span><span>def</span> <span>__enter__</span><span>(self)</span>:</span>
        self.file = open(self.filename)
        <span>return</span> self.file
    <span><span>def</span> <span>__exit__</span><span>(self, exc_type, exception, traceback)</span>:</span>
        self.file.close()
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span><span>with</span> open(<span>'test.txt'</span>, <span>'w'</span>) <span>as</span> file:
<span>... </span>    file.write(<span>'Hello World!'</span>)
<span>&gt;&gt;&gt; </span><span>with</span> MyOpen(<span>'test.txt'</span>) <span>as</span> file:
<span>... </span>    print(file.read())
Hello World!
</code></pre>
<div><h2 id="iterableducktypes"><a href="#iterableducktypes" name="iterableducktypes">#</a>Iterable Duck Types</h2><div><h3 id="iterable">Iterable</h3><ul>
<li><strong>Only required method is iter(). It should return an iterator of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter() defined.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyIterable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> iter(self.a)
    <span><span>def</span> <span>__contains__</span><span>(self, el)</span>:</span>
        <span>return</span> el <span>in</span> self.a
</code></pre></div></div>



<pre><code><span>&gt;&gt;&gt; </span>obj = MyIterable([<span>1</span>, <span>2</span>, <span>3</span>])
<span>&gt;&gt;&gt; </span>[el <span>for</span> el <span>in</span> obj]
[<span>1</span>, <span>2</span>, <span>3</span>]
<span>&gt;&gt;&gt; </span><span>1</span> <span>in</span> obj
<span>True</span>
</code></pre>
<div><h3 id="collection">Collection</h3><ul>
<li><strong>Only required methods are iter() and len(). Len() should return the number of items.</strong></li>
<li><strong>This cheatsheet actually means <code><span>'&lt;iterable&gt;'</span></code> when it uses <code><span>'&lt;collection&gt;'</span></code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The only drawback of this decision is that a reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyCollection</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> iter(self.a)
    <span><span>def</span> <span>__contains__</span><span>(self, el)</span>:</span>
        <span>return</span> el <span>in</span> self.a
    <span><span>def</span> <span>__len__</span><span>(self)</span>:</span>
        <span>return</span> len(self.a)
</code></pre></div>


<div><h3 id="sequence">Sequence</h3><ul>
<li><strong>Only required methods are getitem() and len().</strong></li>
<li><strong>Getitem() should return an item at the passed index or raise IndexError.</strong></li>
<li><strong>Iter() and contains() automatically work on any object that has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has getitem() and len() defined.</strong></li>
</ul><pre><code><span><span>class</span> <span>MySequence</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> iter(self.a)
    <span><span>def</span> <span>__contains__</span><span>(self, el)</span>:</span>
        <span>return</span> el <span>in</span> self.a
    <span><span>def</span> <span>__len__</span><span>(self)</span>:</span>
        <span>return</span> len(self.a)
    <span><span>def</span> <span>__getitem__</span><span>(self, i)</span>:</span>
        <span>return</span> self.a[i]
    <span><span>def</span> <span>__reversed__</span><span>(self)</span>:</span>
        <span>return</span> reversed(self.a)
</code></pre></div>


<div><h4 id="discrepanciesbetweenglossarydefinitionsandabstractbaseclasses">Discrepancies between glossary definitions and abstract base classes:</h4><ul>
<li><strong>Glossary defines iterable as any object with iter() or getitem() and sequence as any object with getitem() and len(). It does not define collection.</strong></li>
<li><strong>Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().</strong></li>
</ul></div>




<div><h3 id="abcsequence">ABC Sequence</h3><ul>
<li><strong>It's a richer interface than the basic sequence.</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(), index() and count().</strong></li>
<li><strong>Unlike <code><span>'abc.Iterable'</span></code> and <code><span>'abc.Collection'</span></code>, it is not a duck type. That is why <code><span>'issubclass(MySequence, abc.Sequence)'</span></code> would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, array, memoryview and deque, because they are registered as its virtual subclasses.</strong></li>
</ul><pre><code><span>from</span> collections <span>import</span> abc

<span><span>class</span> <span>MyAbcSequence</span><span>(abc.Sequence)</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__len__</span><span>(self)</span>:</span>
        <span>return</span> len(self.a)
    <span><span>def</span> <span>__getitem__</span><span>(self, i)</span>:</span>
        <span>return</span> self.a[i]
</code></pre></div><div><h4 id="tableofrequiredandautomaticallyavailablespecialmethods">Table of required and automatically available special methods:</h4><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ            ‚îÇ  Iterable  ‚îÇ Collection ‚îÇ  Sequence  ‚îÇ abc.Sequence ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ iter()     ‚îÇ     !      ‚îÇ     !      ‚îÇ     ‚úì      ‚îÇ      ‚úì       ‚îÉ
‚îÉ contains() ‚îÇ     ‚úì      ‚îÇ     ‚úì      ‚îÇ     ‚úì      ‚îÇ      ‚úì       ‚îÉ
‚îÉ len()      ‚îÇ            ‚îÇ     !      ‚îÇ     !      ‚îÇ      !       ‚îÉ
‚îÉ getitem()  ‚îÇ            ‚îÇ            ‚îÇ     !      ‚îÇ      !       ‚îÉ
‚îÉ reversed() ‚îÇ            ‚îÇ            ‚îÇ     ‚úì      ‚îÇ      ‚úì       ‚îÉ
‚îÉ index()    ‚îÇ            ‚îÇ            ‚îÇ            ‚îÇ      ‚úì       ‚îÉ
‚îÉ count()    ‚îÇ            ‚îÇ            ‚îÇ            ‚îÇ      ‚úì       ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div>

<ul>
<li><strong>Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.</strong></li>
<li><strong>Names of their required methods are stored in <code><span>'&lt;abc&gt;.__abstractmethods__'</span></code>.</strong></li>
</ul>
<div><h2 id="enum"><a href="#enum" name="enum">#</a>Enum</h2><pre><code><span>from</span> enum <span>import</span> Enum, auto
</code></pre></div>

<pre><code><span><span>class</span> &lt;<span>enum_name</span>&gt;<span>(Enum)</span>:</span>
    &lt;member_name&gt; = auto()
    &lt;member_name&gt; = &lt;value&gt;
    &lt;member_name&gt; = &lt;value&gt;, &lt;value&gt;
</code></pre>
<ul>
<li><strong>Function auto() returns an increment of the last numeric value or 1.</strong></li>
<li><strong>Accessing a member named after a reserved keyword causes SyntaxError.</strong></li>
<li><strong>Methods receive the member they were called on as the 'self' argument.</strong></li>
</ul>
<pre><code>&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;           <span># Returns a member.</span>
&lt;member&gt; = &lt;enum&gt;[<span>'&lt;member_name&gt;'</span>]        <span># Returns a member. Raises KeyError.</span>
&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                <span># Returns a member. Raises ValueError.</span>
&lt;str&gt;    = &lt;member&gt;.name                  <span># Returns member's name.</span>
&lt;obj&gt;    = &lt;member&gt;.value                 <span># Returns member's value.</span>
</code></pre>
<pre><code>&lt;list&gt;   = list(&lt;enum&gt;)                   <span># Returns enum's members.</span>
&lt;list&gt;   = [a.name <span>for</span> a <span>in</span> &lt;enum&gt;]       <span># Returns enum's member names.</span>
&lt;list&gt;   = [a.value <span>for</span> a <span>in</span> &lt;enum&gt;]      <span># Returns enum's member values.</span>
&lt;member&gt; = random.choice(list(&lt;enum&gt;))    <span># Returns a random member.</span>
</code></pre>
<pre><code><span><span>def</span> <span>get_next_member</span><span>(member)</span>:</span>
    members = list(type(member))
    index = members.index(member) + <span>1</span>
    <span>return</span> members[index % len(members)]
</code></pre>
<div><h3 id="inline-2">Inline</h3><pre><code>Cutlery = Enum(<span>'Cutlery'</span>, <span>'FORK KNIFE SPOON'</span>)
Cutlery = Enum(<span>'Cutlery'</span>, [<span>'FORK'</span>, <span>'KNIFE'</span>, <span>'SPOON'</span>])
Cutlery = Enum(<span>'Cutlery'</span>, {<span>'FORK'</span>: <span>1</span>, <span>'KNIFE'</span>: <span>2</span>, <span>'SPOON'</span>: <span>3</span>})
</code></pre></div>

<div><h4 id="userdefinedfunctionscannotbevaluessotheymustbewrapped">User-defined functions cannot be values, so they must be wrapped:</h4><pre><code><span>from</span> functools <span>import</span> partial
LogicOp = Enum(<span>'LogicOp'</span>, {<span>'AND'</span>: partial(<span>lambda</span> l, r: l <span>and</span> r),
                           <span>'OR'</span>:  partial(<span>lambda</span> l, r: l <span>or</span> r)})
</code></pre></div>

<div><h2 id="exceptions"><a href="#exceptions" name="exceptions">#</a>Exceptions</h2><pre><code><span>try</span>:
    &lt;code&gt;
<span>except</span> &lt;exception&gt;:
    &lt;code&gt;
</code></pre></div>

<div><h3 id="complexexample">Complex Example</h3><pre><code><span>try</span>:
    &lt;code_1&gt;
<span>except</span> &lt;exception_a&gt;:
    &lt;code_2_a&gt;
<span>except</span> &lt;exception_b&gt;:
    &lt;code_2_b&gt;
<span>else</span>:
    &lt;code_2_c&gt;
<span>finally</span>:
    &lt;code_3&gt;
</code></pre></div>

<ul>
<li><strong>Code inside the <code><span>'else'</span></code> block will only be executed if <code><span>'try'</span></code> block had no exceptions.</strong></li>
<li><strong>Code inside the <code><span>'finally'</span></code> block will always be executed (unless a signal is received).</strong></li>
<li><strong>All variables that are initialized in executed blocks are also visible in all subsequent blocks, as well as outside the try/except clause (only function blocks delimit scope).</strong></li>
<li><strong>To catch signals use <code><span>'signal.signal(signal_number, &lt;func&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="catchingexceptions">Catching Exceptions</h3><pre><code><span>except</span> &lt;exception&gt;: ...
<span>except</span> &lt;exception&gt; <span>as</span> &lt;name&gt;: ...
<span>except</span> (&lt;exception&gt;, [...]): ...
<span>except</span> (&lt;exception&gt;, [...]) <span>as</span> &lt;name&gt;: ...
</code></pre></div>

<ul>
<li><strong>Also catches subclasses of the exception.</strong></li>
<li><strong>Use <code><span>'traceback.print_exc()'</span></code> to print the error message to stderr.</strong></li>
<li><strong>Use <code><span>'print(&lt;name&gt;)'</span></code> to print just the cause of the exception (its arguments).</strong></li>
<li><strong>Use <code><span>'logging.exception(&lt;message&gt;)'</span></code> to log the passed message, followed by the full error message of the caught exception.</strong></li>
</ul>
<div><h3 id="raisingexceptions">Raising Exceptions</h3><pre><code><span>raise</span> &lt;exception&gt;
<span>raise</span> &lt;exception&gt;()
<span>raise</span> &lt;exception&gt;(&lt;el&gt; [, ...])
</code></pre></div>

<div><h4 id="reraisingcaughtexception">Re-raising caught exception:</h4><pre><code><span>except</span> &lt;exception&gt; [<span>as</span> &lt;name&gt;]:
    ...
    <span>raise</span>
</code></pre></div>

<div><h3 id="exceptionobject">Exception Object</h3><pre><code>arguments = &lt;name&gt;.args
exc_type  = &lt;name&gt;.__class__
filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename
func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name
line      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)
trace_str = <span>''</span>.join(traceback.format_tb(&lt;name&gt;.__traceback__))
error_msg = <span>''</span>.join(traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__))
</code></pre></div>

<div><h3 id="builtinexceptions">Built-in Exceptions</h3><pre><code>BaseException
 ‚îú‚îÄ‚îÄ SystemExit                   <span># Raised by the sys.exit() function.</span>
 ‚îú‚îÄ‚îÄ KeyboardInterrupt            <span># Raised when the user hits the interrupt key (ctrl-c).</span>
 ‚îî‚îÄ‚îÄ Exception                    <span># User-defined exceptions should be derived from this class.</span>
      ‚îú‚îÄ‚îÄ ArithmeticError         <span># Base class for arithmetic errors such as ZeroDivisionError.</span>
      ‚îú‚îÄ‚îÄ AssertionError          <span># Raised by `assert &lt;exp&gt;` if expression returns false value.</span>
      ‚îú‚îÄ‚îÄ AttributeError          <span># Raised when object doesn't have requested attribute/method.</span>
      ‚îú‚îÄ‚îÄ EOFError                <span># Raised by input() when it hits an end-of-file condition.</span>
      ‚îú‚îÄ‚îÄ LookupError             <span># Base class for errors when a collection can't find an item.</span>
      ‚îÇ    ‚îú‚îÄ‚îÄ IndexError         <span># Raised when a sequence index is out of range.</span>
      ‚îÇ    ‚îî‚îÄ‚îÄ KeyError           <span># Raised when a dictionary key or set element is missing.</span>
      ‚îú‚îÄ‚îÄ MemoryError             <span># Out of memory. Could be too late to start deleting vars.</span>
      ‚îú‚îÄ‚îÄ NameError               <span># Raised when nonexistent name (variable/func/class) is used.</span>
      ‚îÇ    ‚îî‚îÄ‚îÄ UnboundLocalError  <span># Raised when local name is used before it's being defined.</span>
      ‚îú‚îÄ‚îÄ OSError                 <span># Errors such as FileExistsError/PermissionError (see #Open).</span>
      ‚îÇ    ‚îî‚îÄ‚îÄ ConnectionError    <span># Errors such as BrokenPipeError/ConnectionAbortedError.</span>
      ‚îú‚îÄ‚îÄ RuntimeError            <span># Raised by errors that don't fall into other categories.</span>
      ‚îÇ    ‚îú‚îÄ‚îÄ NotImplementedErr  <span># Can be raised by abstract methods or by unfinished code.</span>
      ‚îÇ    ‚îî‚îÄ‚îÄ RecursionError     <span># Raised when the maximum recursion depth is exceeded.</span>
      ‚îú‚îÄ‚îÄ StopIteration           <span># Raised by next() when run on an empty iterator.</span>
      ‚îú‚îÄ‚îÄ TypeError               <span># Raised when an argument is of the wrong type.</span>
      ‚îî‚îÄ‚îÄ ValueError              <span># When argument has the right type but inappropriate value.</span>
</code></pre></div>

<div><h4 id="collectionsandtheirexceptions">Collections and their exceptions:</h4><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ           ‚îÇ    List    ‚îÇ    Set     ‚îÇ    Dict    ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ getitem() ‚îÇ IndexError ‚îÇ            ‚îÇ  KeyError  ‚îÉ
‚îÉ pop()     ‚îÇ IndexError ‚îÇ  KeyError  ‚îÇ  KeyError  ‚îÉ
‚îÉ remove()  ‚îÇ ValueError ‚îÇ  KeyError  ‚îÇ            ‚îÉ
‚îÉ index()   ‚îÇ ValueError ‚îÇ            ‚îÇ            ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div>

<div><h4 id="usefulbuiltinexceptions">Useful built-in exceptions:</h4><pre><code><span>raise</span> TypeError(<span>'Argument is of the wrong type!'</span>)
<span>raise</span> ValueError(<span>'Argument has the right type but an inappropriate value!'</span>)
<span>raise</span> RuntimeError(<span>'None of above!'</span>)
</code></pre></div>

<div><h3 id="userdefinedexceptions">User-defined Exceptions</h3><pre><code><span><span>class</span> <span>MyError</span><span>(Exception)</span>:</span> <span>pass</span>
<span><span>class</span> <span>MyInputError</span><span>(MyError)</span>:</span> <span>pass</span>
</code></pre></div>

<div><h2 id="exit"><a href="#exit" name="exit">#</a>Exit</h2><p><strong>Exits the interpreter by raising SystemExit exception.</strong></p><pre><code><span>import</span> sys
sys.exit()                        <span># Exits with exit code 0 (success).</span>
sys.exit(&lt;el&gt;)                    <span># Prints to stderr and exits with 1.</span>
sys.exit(&lt;int&gt;)                   <span># Exits with passed exit code.</span>
</code></pre></div>


<div><h2 id="print"><a href="#print" name="print">#</a>Print</h2><pre><code>print(&lt;el_1&gt;, ..., sep=<span>' '</span>, end=<span>'\n'</span>, file=sys.stdout, flush=<span>False</span>)
</code></pre></div>

<ul>
<li><strong>Use <code><span>'file=sys.stderr'</span></code> for messages about errors.</strong></li>
<li><strong>Use <code><span>'flush=True'</span></code> to forcibly flush the stream.</strong></li>
</ul>
<div><h3 id="prettyprint">Pretty Print</h3><pre><code><span>from</span> pprint <span>import</span> pprint
pprint(&lt;collection&gt;, width=<span>80</span>, depth=<span>None</span>, compact=<span>False</span>, sort_dicts=<span>True</span>)
</code></pre></div>

<ul>
<li><strong>Levels deeper than 'depth' get replaced by '‚Ä¶'.</strong></li>
</ul>
<div><h2 id="input"><a href="#input" name="input">#</a>Input</h2><p><strong>Reads a line from the user input or pipe if present.</strong></p><pre><code>&lt;str&gt; = input(prompt=<span>None</span>)
</code></pre></div>


<ul>
<li><strong>Trailing newline gets stripped.</strong></li>
<li><strong>Prompt string is printed to the standard output before reading input.</strong></li>
<li><strong>Raises EOFError when user hits EOF (ctrl-d/ctrl-z‚èé) or input stream gets exhausted.</strong></li>
</ul>
<div><h2 id="commandlinearguments"><a href="#commandlinearguments" name="commandlinearguments">#</a>Command Line Arguments</h2><pre><code><span>import</span> sys
scripts_path = sys.argv[<span>0</span>]
arguments    = sys.argv[<span>1</span>:]
</code></pre></div>

<div><h3 id="argumentparser">Argument Parser</h3><pre><code><span>from</span> argparse <span>import</span> ArgumentParser, FileType
p = ArgumentParser(description=&lt;str&gt;)
p.add_argument(<span>'-&lt;short_name&gt;'</span>, <span>'--&lt;name&gt;'</span>, action=<span>'store_true'</span>)  <span># Flag.</span>
p.add_argument(<span>'-&lt;short_name&gt;'</span>, <span>'--&lt;name&gt;'</span>, type=&lt;type&gt;)          <span># Option.</span>
p.add_argument(<span>'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span>1</span>)                    <span># First argument.</span>
p.add_argument(<span>'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span>'+'</span>)                  <span># Remaining arguments.</span>
p.add_argument(<span>'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span>'*'</span>)                  <span># Optional arguments.</span>
args  = p.parse_args()                                            <span># Exits on error.</span>
value = args.&lt;name&gt;
</code></pre></div>

<ul>
<li><strong>Use <code><span>'help=&lt;str&gt;'</span></code> to set argument description that will be displayed in help message.</strong></li>
<li><strong>Use <code><span>'default=&lt;el&gt;'</span></code> to set the default value.</strong></li>
<li><strong>Use <code><span>'type=FileType(&lt;mode&gt;)'</span></code> for files. Accepts 'encoding', but 'newline' is None.</strong></li>
</ul>
<div><h2 id="open"><a href="#open" name="open">#</a>Open</h2><p><strong>Opens the file and returns a corresponding file object.</strong></p><pre><code>&lt;file&gt; = open(&lt;path&gt;, mode=<span>'r'</span>, encoding=<span>None</span>, newline=<span>None</span>)
</code></pre></div>


<ul>
<li><strong><code><span>'encoding=None'</span></code> means that the default encoding is used, which is platform dependent. Best practice is to use <code><span>'encoding="utf-8"'</span></code> whenever possible.</strong></li>
<li><strong><code><span>'newline=None'</span></code> means all different end of line combinations are converted to '\n' on read, while on write all '\n' characters are converted to system's default line separator.</strong></li>
<li><strong><code><span>'newline=""'</span></code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on every '\n', '\r' and '\r\n'.</strong></li>
</ul>
<div><h3 id="modes">Modes</h3><ul>
<li><strong><code><span>'r'</span></code>  - Read (default).</strong></li>
<li><strong><code><span>'w'</span></code>  - Write (truncate).</strong></li>
<li><strong><code><span>'x'</span></code>  - Write or fail if the file already exists.</strong></li>
<li><strong><code><span>'a'</span></code>  - Append.</strong></li>
<li><strong><code><span>'w+'</span></code> - Read and write (truncate).</strong></li>
<li><strong><code><span>'r+'</span></code> - Read and write from the start.</strong></li>
<li><strong><code><span>'a+'</span></code> - Read and write from the end.</strong></li>
<li><strong><code><span>'t'</span></code>  - Text mode (default).</strong></li>
<li><strong><code><span>'b'</span></code>  - Binary mode (<code><span>'br'</span></code>, <code><span>'bw'</span></code>, <code><span>'bx'</span></code>, ‚Ä¶).</strong></li>
</ul><div><h3 id="exceptions-1">Exceptions</h3><ul>
<li><strong><code><span>'FileNotFoundError'</span></code> can be raised when reading with <code><span>'r'</span></code> or <code><span>'r+'</span></code>.</strong></li>
<li><strong><code><span>'FileExistsError'</span></code> can be raised when writing with <code><span>'x'</span></code>.</strong></li>
<li><strong><code><span>'IsADirectoryError'</span></code> and <code><span>'PermissionError'</span></code> can be raised by any.</strong></li>
<li><strong><code><span>'OSError'</span></code> is the parent class of all listed exceptions.</strong></li>
</ul><div><h3 id="fileobject">File Object</h3><pre><code>&lt;file&gt;.seek(<span>0</span>)                      <span># Moves to the start of the file.</span>
&lt;file&gt;.seek(offset)                 <span># Moves 'offset' chars/bytes from the start.</span>
&lt;file&gt;.seek(<span>0</span>, <span>2</span>)                   <span># Moves to the end of the file.</span>
&lt;bin_file&gt;.seek(¬±offset, &lt;anchor&gt;)  <span># Anchor: 0 start, 1 current position, 2 end.</span>
</code></pre></div></div></div>





<pre><code>&lt;str/bytes&gt; = &lt;file&gt;.read(size=<span>-1</span>)  <span># Reads 'size' chars/bytes or until EOF.</span>
&lt;str/bytes&gt; = &lt;file&gt;.readline()     <span># Returns a line or empty string/bytes on EOF.</span>
&lt;list&gt;      = &lt;file&gt;.readlines()    <span># Returns a list of remaining lines.</span>
&lt;str/bytes&gt; = next(&lt;file&gt;)          <span># Returns a line using buffer. Do not mix.</span>
</code></pre>
<pre><code>&lt;file&gt;.write(&lt;str/bytes&gt;)           <span># Writes a string or bytes object.</span>
&lt;file&gt;.writelines(&lt;collection&gt;)     <span># Writes a coll. of strings or bytes objects.</span>
&lt;file&gt;.flush()                      <span># Flushes write buffer. Runs every 4096/8192 B.</span>
</code></pre>
<ul>
<li><strong>Methods do not add or strip trailing newlines, even writelines().</strong></li>
</ul>
<div><h3 id="readtextfromfile">Read Text from File</h3><pre><code><span><span>def</span> <span>read_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>) <span>as</span> file:
        <span>return</span> file.readlines()
</code></pre></div>

<div><h3 id="writetexttofile">Write Text to File</h3><pre><code><span><span>def</span> <span>write_to_file</span><span>(filename, text)</span>:</span>
    <span>with</span> open(filename, <span>'w'</span>, encoding=<span>'utf-8'</span>) <span>as</span> file:
        file.write(text)
</code></pre></div>

<div><h2 id="paths"><a href="#paths" name="paths">#</a>Paths</h2><pre><code><span>import</span> os, glob
<span>from</span> pathlib <span>import</span> Path
</code></pre></div>

<pre><code>&lt;str&gt;  = os.getcwd()                <span># Returns the current working directory.</span>
&lt;str&gt;  = os.path.join(&lt;path&gt;, ...)  <span># Joins two or more pathname components.</span>
&lt;str&gt;  = os.path.realpath(&lt;path&gt;)   <span># Resolves symlinks and calls path.abspath().</span>
</code></pre>
<pre><code>&lt;str&gt;  = os.path.basename(&lt;path&gt;)   <span># Returns final component of the path.</span>
&lt;str&gt;  = os.path.dirname(&lt;path&gt;)    <span># Returns path without the final component.</span>
&lt;tup.&gt; = os.path.splitext(&lt;path&gt;)   <span># Splits on last period of the final component.</span>
</code></pre>
<pre><code>&lt;list&gt; = os.listdir(path=<span>'.'</span>)       <span># Returns filenames located at the path.</span>
&lt;list&gt; = glob.glob(<span>'&lt;pattern&gt;'</span>)     <span># Returns paths matching the wildcard pattern.</span>
</code></pre>
<pre><code>&lt;bool&gt; = os.path.exists(&lt;path&gt;)     <span># Or: &lt;Path&gt;.exists()</span>
&lt;bool&gt; = os.path.isfile(&lt;path&gt;)     <span># Or: &lt;DirEntry/Path&gt;.is_file()</span>
&lt;bool&gt; = os.path.isdir(&lt;path&gt;)      <span># Or: &lt;DirEntry/Path&gt;.is_dir()</span>
</code></pre>
<pre><code>&lt;stat&gt; = os.stat(&lt;path&gt;)            <span># Or: &lt;DirEntry/Path&gt;.stat()</span>
&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/‚Ä¶  <span># Modification time, size in bytes, ...</span>
</code></pre>
<div><h3 id="direntry">DirEntry</h3><p><strong>Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.</strong></p><pre><code>&lt;iter&gt; = os.scandir(path=<span>'.'</span>)       <span># Returns DirEntry objects located at the path.</span>
&lt;str&gt;  = &lt;DirEntry&gt;.path            <span># Returns the whole path as a string.</span>
&lt;str&gt;  = &lt;DirEntry&gt;.name            <span># Returns final component as a string.</span>
&lt;file&gt; = open(&lt;DirEntry&gt;)           <span># Opens the file and returns a file object.</span>
</code></pre></div>


<div><h3 id="pathobject">Path Object</h3><pre><code>&lt;Path&gt; = Path(&lt;path&gt; [, ...])       <span># Accepts strings, Paths and DirEntry objects.</span>
&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    <span># First or second path must be a Path object.</span>
&lt;Path&gt; = &lt;Path&gt;.resolve()           <span># Resolves symlinks and calls &lt;Path&gt;.absolute().</span>
</code></pre></div>

<pre><code>&lt;Path&gt; = Path()                     <span># Returns relative cwd. Also Path('.').</span>
&lt;Path&gt; = Path.cwd()                 <span># Returns absolute cwd. Also Path().resolve().</span>
&lt;Path&gt; = Path.home()                <span># Returns user's home directory (absolute).</span>
&lt;Path&gt; = Path(__file__).resolve()   <span># Returns script's path if cwd wasn't changed.</span>
</code></pre>
<pre><code>&lt;Path&gt; = &lt;Path&gt;.parent              <span># Returns Path without the final component.</span>
&lt;str&gt;  = &lt;Path&gt;.name                <span># Returns final component as a string.</span>
&lt;str&gt;  = &lt;Path&gt;.stem                <span># Returns final component without extension.</span>
&lt;str&gt;  = &lt;Path&gt;.suffix              <span># Returns final component's extension.</span>
&lt;tup.&gt; = &lt;Path&gt;.parts               <span># Returns all components as strings.</span>
</code></pre>
<pre><code>&lt;iter&gt; = &lt;Path&gt;.iterdir()           <span># Returns directory contents as Path objects.</span>
&lt;iter&gt; = &lt;Path&gt;.glob(<span>'&lt;pattern&gt;'</span>)   <span># Returns Paths matching the wildcard pattern.</span>
</code></pre>
<pre><code>&lt;str&gt;  = str(&lt;Path&gt;)                <span># Returns path as a string.</span>
&lt;file&gt; = open(&lt;Path&gt;)               <span># Also &lt;Path&gt;.read/write_text/bytes().</span>
</code></pre>
<div><h2 id="oscommands"><a href="#oscommands" name="oscommands">#</a>OS Commands</h2><pre><code><span>import</span> os, shutil, subprocess
</code></pre></div>

<pre><code>os.chdir(&lt;path&gt;)                    <span># Changes the current working directory.</span>
os.mkdir(&lt;path&gt;, mode=<span>0o777</span>)        <span># Creates a directory. Permissions are in octal.</span>
os.makedirs(&lt;path&gt;, mode=<span>0o777</span>)     <span># Creates all path's dirs. Also `exist_ok=False`.</span>
</code></pre>
<pre><code>shutil.copy(from, to)               <span># Copies the file. 'to' can exist or be a dir.</span>
shutil.copy2(from, to)              <span># Also copies creation and modification time.</span>
shutil.copytree(from, to)           <span># Copies the directory. 'to' must not exist.</span>
</code></pre>
<pre><code>os.rename(from, to)                 <span># Renames/moves the file or directory.</span>
os.replace(from, to)                <span># Same, but overwrites file 'to' even on Windows.</span>
shutil.move(from, to)               <span># Rename() that moves into 'to' if it's a dir.</span>
</code></pre>
<pre><code>os.remove(&lt;path&gt;)                   <span># Deletes the file.</span>
os.rmdir(&lt;path&gt;)                    <span># Deletes the empty directory.</span>
shutil.rmtree(&lt;path&gt;)               <span># Deletes the directory.</span>
</code></pre>
<ul>
<li><strong>Paths can be either strings, Paths or DirEntry objects.</strong></li>
<li><strong>Functions report OS related errors by raising either OSError or one of its <a href="#exceptions-1">subclasses</a>.</strong></li>
</ul>
<div><h3 id="shellcommands">Shell Commands</h3><pre><code>&lt;pipe&gt; = os.popen(<span>'&lt;command&gt;'</span>)      <span># Executes command in sh/cmd. Returns its stdout pipe.</span>
&lt;str&gt;  = &lt;pipe&gt;.read(size=<span>-1</span>)       <span># Reads 'size' chars or until EOF. Also readline/s().</span>
&lt;int&gt;  = &lt;pipe&gt;.close()             <span># Closes the pipe. Returns None on success (returncode 0).</span>
</code></pre></div>

<div><h4 id="sends11tothebasiccalculatorandcapturesitsoutput">Sends '1 + 1' to the basic calculator and captures its output:</h4><pre><code><span>&gt;&gt;&gt; </span>subprocess.run(<span>'bc'</span>, input=<span>'1 + 1\n'</span>, capture_output=<span>True</span>, text=<span>True</span>)
CompletedProcess(args=<span>'bc'</span>, returncode=<span>0</span>, stdout=<span>'2\n'</span>, stderr=<span>''</span>)
</code></pre></div>

<div><h4 id="sendstestintothebasiccalculatorrunninginstandardmodeandsavesitsoutputtotestout">Sends test.in to the basic calculator running in standard mode and saves its output to test.out:</h4><pre><code><span>&gt;&gt;&gt; </span><span>from</span> shlex <span>import</span> split
<span>&gt;&gt;&gt; </span>os.popen(<span>'echo 1 + 1 &gt; test.in'</span>)
<span>&gt;&gt;&gt; </span>subprocess.run(split(<span>'bc -s'</span>), stdin=open(<span>'test.in'</span>), stdout=open(<span>'test.out'</span>, <span>'w'</span>))
CompletedProcess(args=[<span>'bc'</span>, <span>'-s'</span>], returncode=<span>0</span>)
<span>&gt;&gt;&gt; </span>open(<span>'test.out'</span>).read()
<span>'2\n'</span>
</code></pre></div>

<div><h2 id="json"><a href="#json" name="json">#</a>JSON</h2><p><strong>Text file format for storing collections of strings and numbers.</strong></p><pre><code><span>import</span> json
&lt;str&gt;    = json.dumps(&lt;object&gt;)     <span># Converts object to JSON string.</span>
&lt;object&gt; = json.loads(&lt;str&gt;)        <span># Converts JSON string to object.</span>
</code></pre></div>


<div><h3 id="readobjectfromjsonfile">Read Object from JSON File</h3><pre><code><span><span>def</span> <span>read_json_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>) <span>as</span> file:
        <span>return</span> json.load(file)
</code></pre></div>

<div><h3 id="writeobjecttojsonfile">Write Object to JSON File</h3><pre><code><span><span>def</span> <span>write_to_json_file</span><span>(filename, an_object)</span>:</span>
    <span>with</span> open(filename, <span>'w'</span>, encoding=<span>'utf-8'</span>) <span>as</span> file:
        json.dump(an_object, file, ensure_ascii=<span>False</span>, indent=<span>2</span>)
</code></pre></div>

<div><h2 id="pickle"><a href="#pickle" name="pickle">#</a>Pickle</h2><p><strong>Binary file format for storing Python objects.</strong></p><pre><code><span>import</span> pickle
&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   <span># Converts object to bytes object.</span>
&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    <span># Converts bytes object to object.</span>
</code></pre></div>


<div><h3 id="readobjectfromfile">Read Object from File</h3><pre><code><span><span>def</span> <span>read_pickle_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, <span>'rb'</span>) <span>as</span> file:
        <span>return</span> pickle.load(file)
</code></pre></div>

<div><h3 id="writeobjecttofile">Write Object to File</h3><pre><code><span><span>def</span> <span>write_to_pickle_file</span><span>(filename, an_object)</span>:</span>
    <span>with</span> open(filename, <span>'wb'</span>) <span>as</span> file:
        pickle.dump(an_object, file)
</code></pre></div>

<div><h2 id="csv"><a href="#csv" name="csv">#</a>CSV</h2><p><strong>Text file format for storing spreadsheets.</strong></p><pre><code><span>import</span> csv
</code></pre></div>


<div><h3 id="read">Read</h3><pre><code>&lt;reader&gt; = csv.reader(&lt;file&gt;)       <span># Also: `dialect='excel', delimiter=','`.</span>
&lt;list&gt;   = next(&lt;reader&gt;)           <span># Returns next row as a list of strings.</span>
&lt;list&gt;   = list(&lt;reader&gt;)           <span># Returns a list of remaining rows.</span>
</code></pre></div>

<ul>
<li><strong>File must be opened with a <code><span>'newline=""'</span></code> argument, or newlines embedded inside quoted fields will not be interpreted correctly!</strong></li>
<li><strong>To print the spreadsheet to the console use <a href="#table">Tabulate</a> library.</strong></li>
<li><strong>For XML and binary Excel files (xlsx, xlsm and xlsb) use <a href="#dataframeplotencodedecode">Pandas</a> library.</strong></li>
<li><strong>Reader accepts any iterator of strings, not just files.</strong></li>
</ul>
<div><h3 id="write">Write</h3><pre><code>&lt;writer&gt; = csv.writer(&lt;file&gt;)       <span># Also: `dialect='excel', delimiter=','`.</span>
&lt;writer&gt;.writerow(&lt;collection&gt;)     <span># Encodes objects using `str(&lt;el&gt;)`.</span>
&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  <span># Appends multiple rows.</span>
</code></pre></div>

<ul>
<li><strong>File must be opened with a <code><span>'newline=""'</span></code> argument, or '\r' will be added in front of every '\n' on platforms that use '\r\n' line endings!</strong></li>
</ul>
<div><h3 id="parameters">Parameters</h3><ul>
<li><strong><code><span>'dialect'</span></code> - Master parameter that sets the default values. String or a 'csv.Dialect' object.</strong></li>
<li><strong><code><span>'delimiter'</span></code> - A one-character string used to separate fields.</strong></li>
<li><strong><code><span>'quotechar'</span></code> - Character for quoting fields that contain special characters.</strong></li>
<li><strong><code><span>'doublequote'</span></code> - Whether quotechars inside fields are/get doubled or escaped.</strong></li>
<li><strong><code><span>'skipinitialspace'</span></code> - Is space character at the start of the field stripped by the reader.</strong></li>
<li><strong><code><span>'lineterminator'</span></code> - How writer terminates rows. Reader is hardcoded to '\n', '\r', '\r\n'.</strong></li>
<li><strong><code><span>'quoting'</span></code> - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.</strong></li>
<li><strong><code><span>'escapechar'</span></code> - Character for escaping quotechars if doublequote is False.</strong></li>
</ul><div><h3 id="dialects">Dialects</h3><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                  ‚îÇ     excel    ‚îÇ   excel-tab  ‚îÇ     unix     ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ delimiter        ‚îÇ       ','    ‚îÇ      '\t'    ‚îÇ       ','    ‚îÉ
‚îÉ quotechar        ‚îÇ       '"'    ‚îÇ       '"'    ‚îÇ       '"'    ‚îÉ
‚îÉ doublequote      ‚îÇ      True    ‚îÇ      True    ‚îÇ      True    ‚îÉ
‚îÉ skipinitialspace ‚îÇ     False    ‚îÇ     False    ‚îÇ     False    ‚îÉ
‚îÉ lineterminator   ‚îÇ    '\r\n'    ‚îÇ    '\r\n'    ‚îÇ      '\n'    ‚îÉ
‚îÉ quoting          ‚îÇ         0    ‚îÇ         0    ‚îÇ         1    ‚îÉ
‚îÉ escapechar       ‚îÇ      None    ‚îÇ      None    ‚îÇ      None    ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div></div>



<div><h3 id="readrowsfromcsvfile">Read Rows from CSV File</h3><pre><code><span><span>def</span> <span>read_csv_file</span><span>(filename, dialect=<span>'excel'</span>)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>, newline=<span>''</span>) <span>as</span> file:
        <span>return</span> list(csv.reader(file, dialect))
</code></pre></div>

<div><h3 id="writerowstocsvfile">Write Rows to CSV File</h3><pre><code><span><span>def</span> <span>write_to_csv_file</span><span>(filename, rows, dialect=<span>'excel'</span>)</span>:</span>
    <span>with</span> open(filename, <span>'w'</span>, encoding=<span>'utf-8'</span>, newline=<span>''</span>) <span>as</span> file:
        writer = csv.writer(file, dialect)
        writer.writerows(rows)
</code></pre></div>

<div><h2 id="sqlite"><a href="#sqlite" name="sqlite">#</a>SQLite</h2><p><strong>A server-less database engine that stores each database into a separate file.</strong></p><pre><code><span>import</span> sqlite3
&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                <span># Opens existing or new file. Also ':memory:'.</span>
&lt;conn&gt;.close()                                  <span># Closes the connection.</span>
</code></pre></div>


<div><h3 id="read-1">Read</h3><pre><code>&lt;cursor&gt; = &lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>)            <span># Can raise a subclass of sqlite3.Error.</span>
&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  <span># Returns next row. Also next(&lt;cursor&gt;).</span>
&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  <span># Returns remaining rows. Also list(&lt;cursor&gt;).</span>
</code></pre></div>

<div><h3 id="write-1">Write</h3><pre><code>&lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>)                       <span># Can raise a subclass of sqlite3.Error.</span>
&lt;conn&gt;.commit()                                 <span># Saves all changes since the last commit.</span>
&lt;conn&gt;.rollback()                               <span># Discards all changes since the last commit.</span>
</code></pre></div>

<div><h4 id="or">Or:</h4><pre><code><span>with</span> &lt;conn&gt;:                                    <span># Exits the block with commit() or rollback(),</span>
    &lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>)                   <span># depending on whether any exception occurred.</span>
</code></pre></div>

<div><h3 id="placeholders">Placeholders</h3><pre><code>&lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>, &lt;list/tuple&gt;)         <span># Replaces '?'s in query with values.</span>
&lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>, &lt;dict/namedtuple&gt;)    <span># Replaces ':&lt;key&gt;'s with values.</span>
&lt;conn&gt;.executemany(<span>'&lt;query&gt;'</span>, &lt;coll_of_above&gt;)  <span># Runs execute() multiple times.</span>
</code></pre></div>

<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime.</strong></li>
<li><strong>Bools will be stored and returned as ints and dates as <a href="#encode">ISO formatted strings</a>.</strong></li>
</ul>
<div><h3 id="example-1">Example</h3><p><strong>Values are not actually saved in this example because <code><span>'conn.commit()'</span></code> is omitted!</strong></p><pre><code><span>&gt;&gt;&gt; </span>conn = sqlite3.connect(<span>'test.db'</span>)
<span>&gt;&gt;&gt; </span>conn.execute(<span>'CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)'</span>)
<span>&gt;&gt;&gt; </span>conn.execute(<span>'INSERT INTO person VALUES (NULL, ?, ?)'</span>, (<span>'Jean-Luc'</span>, <span>187</span>)).lastrowid
<span>1</span>
<span>&gt;&gt;&gt; </span>conn.execute(<span>'SELECT * FROM person'</span>).fetchall()
[(<span>1</span>, <span>'Jean-Luc'</span>, <span>187</span>)]
</code></pre></div>


<div><h3 id="sqlalchemy">SqlAlchemy</h3><pre><code><span># $ pip3 install sqlalchemy</span>
<span>from</span> sqlalchemy <span>import</span> create_engine, text
&lt;engine&gt; = create_engine(<span>'&lt;url&gt;'</span>)               <span># Url: 'dialect://user:password@host/dbname'.</span>
&lt;conn&gt;   = &lt;engine&gt;.connect()                   <span># Creates a connection. Also &lt;conn&gt;.close().</span>
&lt;cursor&gt; = &lt;conn&gt;.execute(text(<span>'&lt;query&gt;'</span>), ‚Ä¶)   <span># Replaces ':&lt;key&gt;'s with keyword arguments.</span>
<span>with</span> &lt;conn&gt;.begin(): ...                        <span># Exits the block with commit or rollback.</span>
</code></pre></div>

<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ Dialect    ‚îÇ pip3 install ‚îÇ import   ‚îÇ           Dependencies           ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ mysql      ‚îÇ mysqlclient  ‚îÇ MySQLdb  ‚îÇ www.pypi.org/project/mysqlclient ‚îÉ
‚îÉ postgresql ‚îÇ psycopg2     ‚îÇ psycopg2 ‚îÇ www.pypi.org/project/psycopg2    ‚îÉ
‚îÉ mssql      ‚îÇ pyodbc       ‚îÇ pyodbc   ‚îÇ www.pypi.org/project/pyodbc      ‚îÉ
‚îÉ oracle     ‚îÇ oracledb     ‚îÇ oracledb ‚îÇ www.pypi.org/project/oracledb    ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<div><h2 id="bytes"><a href="#bytes" name="bytes">#</a>Bytes</h2><p><strong>Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</strong></p><pre><code>&lt;bytes&gt; = <span>b'&lt;str&gt;'</span>                          <span># Only accepts ASCII characters and \x00-\xff.</span>
&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  <span># Returns an int in range from 0 to 255.</span>
&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  <span># Returns bytes even if it has only one element.</span>
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     <span># Joins elements using bytes as a separator.</span>
</code></pre></div>


<div><h3 id="encode-1">Encode</h3><pre><code>&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             <span># Ints must be in range from 0 to 255.</span>
&lt;bytes&gt; = bytes(&lt;str&gt;, <span>'utf-8'</span>)             <span># Or: &lt;str&gt;.encode('utf-8')</span>
&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, ‚Ä¶)        <span># `byteorder='big/little', signed=False`.</span>
&lt;bytes&gt; = bytes.fromhex(<span>'&lt;hex&gt;'</span>)            <span># Hex pairs can be separated by whitespaces.</span>
</code></pre></div>

<div><h3 id="decode-1">Decode</h3><pre><code>&lt;list&gt;  = list(&lt;bytes&gt;)                     <span># Returns ints in range from 0 to 255.</span>
&lt;str&gt;   = str(&lt;bytes&gt;, <span>'utf-8'</span>)             <span># Or: &lt;bytes&gt;.decode('utf-8')</span>
&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, ‚Ä¶)        <span># `byteorder='big/little', signed=False`.</span>
<span>'&lt;hex&gt;'</span> = &lt;bytes&gt;.hex()                     <span># Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span>
</code></pre></div>

<div><h3 id="readbytesfromfile">Read Bytes from File</h3><pre><code><span><span>def</span> <span>read_bytes</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, <span>'rb'</span>) <span>as</span> file:
        <span>return</span> file.read()
</code></pre></div>

<div><h3 id="writebytestofile">Write Bytes to File</h3><pre><code><span><span>def</span> <span>write_bytes</span><span>(filename, bytes_obj)</span>:</span>
    <span>with</span> open(filename, <span>'wb'</span>) <span>as</span> file:
        file.write(bytes_obj)
</code></pre></div>

<div><h2 id="struct"><a href="#struct" name="struct">#</a>Struct</h2><ul>
<li><strong>Module that performs conversions between a sequence of numbers and a bytes object.</strong></li>
<li><strong>System‚Äôs type sizes, byte order, and alignment rules are used by default.</strong></li>
</ul><pre><code><span>from</span> struct <span>import</span> pack, unpack
&lt;bytes&gt; = pack(<span>'&lt;format&gt;'</span>, &lt;el_1&gt; [, ...])  <span># Packages arguments or raises struct.error.</span>
&lt;tuple&gt; = unpack(<span>'&lt;format&gt;'</span>, &lt;bytes&gt;)       <span># Use iter_unpack() for iterator of tuples.</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>pack(<span>'&gt;hhl'</span>, <span>1</span>, <span>2</span>, <span>3</span>)
<span>b'\x00\x01\x00\x02\x00\x00\x00\x03'</span>
<span>&gt;&gt;&gt; </span>unpack(<span>'&gt;hhl'</span>, <span>b'\x00\x01\x00\x02\x00\x00\x00\x03'</span>)
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<h3 id="format-2">Format</h3><div><h4 id="forstandardtypesizesandmanualalignmentpaddingstartformatstringwith">For standard type sizes and manual alignment (padding) start format string with:</h4><ul>
<li><strong><code><span>'='</span></code> - System's byte order (usually little-endian).</strong></li>
<li><strong><code><span>'&lt;'</span></code> - Little-endian.</strong></li>
<li><strong><code><span>'&gt;'</span></code> - Big-endian (also <code><span>'!'</span></code>).</strong></li>
</ul><div><h4 id="besidesnumberspackandunpackalsosupportbytesobjectsaspartofthesequence">Besides numbers, pack() and unpack() also support bytes objects as part of the sequence:</h4><ul>
<li><strong><code><span>'c'</span></code> - A bytes object with a single element. For pad byte use <code><span>'x'</span></code>.</strong></li>
<li><strong><code><span>'&lt;n&gt;s'</span><span></span></code> - A bytes object with n elements.</strong></li>
</ul></div></div><div><div><h4 id="integertypesuseacapitalletterforunsignedtypeminimumandstandardsizesareinbrackets">Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:</h4><ul>
<li><strong><code><span>'b'</span></code> - char (1/1)</strong></li>
<li><strong><code><span>'h'</span></code> - short (2/2)</strong></li>
<li><strong><code><span>'i'</span></code> - int (2/4)</strong></li>
<li><strong><code><span>'l'</span></code> - long (4/4)</strong></li>
<li><strong><code><span>'q'</span></code> - long long (8/8)</strong></li>
</ul></div><div><h4 id="floatingpointtypes">Floating point types:</h4><ul>
<li><strong><code><span>'f'</span></code> - float (4/4)</strong></li>
<li><strong><code><span>'d'</span></code> - double (8/8)</strong></li>
</ul></div></div>








<div><h2 id="array"><a href="#array" name="array">#</a>Array</h2><p><strong>List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Sizes and byte order are always determined by the system, however bytes of each element can be swapped with byteswap() method.</strong></p><pre><code><span>from</span> array <span>import</span> array
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;collection&gt;)    <span># Array from collection of numbers.</span>
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;bytes&gt;)         <span># Array from bytes object.</span>
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;array&gt;)         <span># Treats array as a sequence of numbers.</span>
&lt;bytes&gt; = bytes(&lt;array&gt;)                       <span># Or: &lt;array&gt;.tobytes()</span>
&lt;file&gt;.write(&lt;array&gt;)                          <span># Writes array to the binary file.</span>
</code></pre></div>


<div><h2 id="memoryview"><a href="#memoryview" name="memoryview">#</a>Memory View</h2><ul>
<li><strong>A sequence object that points to the memory of another object.</strong></li>
<li><strong>Each element can reference a single or multiple consecutive bytes, depending on format.</strong></li>
<li><strong>Order and number of elements can be changed with slicing.</strong></li>
<li><strong>Casting only works between char and other types and uses system's sizes.</strong></li>
<li><strong>Byte order is always determined by the system.</strong></li>
</ul><pre><code>&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  <span># Immutable if bytes, else mutable.</span>
&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     <span># Returns an int or a float.</span>
&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     <span># Mview with rearranged elements.</span>
&lt;mview&gt; = &lt;mview&gt;.cast(<span>'&lt;typecode&gt;'</span>)           <span># Casts memoryview to the new format.</span>
&lt;mview&gt;.release()                              <span># Releases the object's memory buffer.</span>
</code></pre></div>


<pre><code>&lt;bytes&gt; = bytes(&lt;mview&gt;)                       <span># Returns a new bytes object.</span>
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       <span># Joins mviews using bytes object as sep.</span>
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;mview&gt;)         <span># Treats mview as a sequence of numbers.</span>
&lt;file&gt;.write(&lt;mview&gt;)                          <span># Writes mview to the binary file.</span>
</code></pre>
<pre><code>&lt;list&gt;  = list(&lt;mview&gt;)                        <span># Returns a list of ints or floats.</span>
&lt;str&gt;   = str(&lt;mview&gt;, <span>'utf-8'</span>)                <span># Treats mview as a bytes object.</span>
&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, ‚Ä¶)           <span># `byteorder='big/little', signed=False`.</span>
<span>'&lt;hex&gt;'</span> = &lt;mview&gt;.hex()                        <span># Treats mview as a bytes object.</span>
</code></pre>
<div><h2 id="deque"><a href="#deque" name="deque">#</a>Deque</h2><p><strong>A thread-safe list with efficient appends and pops from either side. Pronounced "deck".</strong></p><pre><code><span>from</span> collections <span>import</span> deque
&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=<span>None</span>)
</code></pre></div>


<pre><code>&lt;deque&gt;.appendleft(&lt;el&gt;)                       <span># Opposite element is dropped if full.</span>
&lt;deque&gt;.extendleft(&lt;collection&gt;)               <span># Collection gets reversed.</span>
&lt;el&gt; = &lt;deque&gt;.popleft()                       <span># Raises IndexError if empty.</span>
&lt;deque&gt;.rotate(n=<span>1</span>)                            <span># Rotates elements to the right.</span>
</code></pre>
<div><h2 id="threading"><a href="#threading" name="threading">#</a>Threading</h2><ul>
<li><strong>CPython interpreter can only run a single thread at a time.</strong></li>
<li><strong>That is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation.</strong></li>
</ul><pre><code><span>from</span> threading <span>import</span> Thread, RLock, Semaphore, Event, Barrier
<span>from</span> concurrent.futures <span>import</span> ThreadPoolExecutor, as_completed
</code></pre></div>


<div><h3 id="thread">Thread</h3><pre><code>&lt;Thread&gt; = Thread(target=&lt;function&gt;)           <span># Use `args=&lt;collection&gt;` to set the arguments.</span>
&lt;Thread&gt;.start()                               <span># Starts the thread.</span>
&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   <span># Checks if the thread has finished executing.</span>
&lt;Thread&gt;.join()                                <span># Waits for the thread to finish.</span>
</code></pre></div>

<ul>
<li><strong>Use <code><span>'kwargs=&lt;dict&gt;'</span></code> to pass keyword arguments to the function.</strong></li>
<li><strong>Use <code><span>'daemon=True'</span></code>, or the program will not be able to exit while the thread is alive.</strong></li>
</ul>
<div><h3 id="lock">Lock</h3><pre><code>&lt;lock&gt; = RLock()                               <span># Lock that can only be released by acquirer.</span>
&lt;lock&gt;.acquire()                               <span># Waits for the lock to be available.</span>
&lt;lock&gt;.release()                               <span># Makes the lock available again.</span>
</code></pre></div>

<div><h4 id="or-1">Or:</h4><pre><code><span>with</span> &lt;lock&gt;:                                   <span># Enters the block by calling acquire() and</span>
    ...                                        <span># exits it with release(), even on error.</span>
</code></pre></div>

<div><h3 id="semaphoreeventbarrier">Semaphore, Event, Barrier</h3><pre><code>&lt;Semaphore&gt; = Semaphore(value=<span>1</span>)               <span># Lock that can be acquired by 'value' threads.</span>
&lt;Event&gt;     = Event()                          <span># Method wait() blocks until set() is called.</span>
&lt;Barrier&gt;   = Barrier(n_times)                 <span># Wait() blocks until it's called n_times.</span>
</code></pre></div>

<div><h3 id="queue">Queue</h3><pre><code>&lt;Queue&gt; = queue.Queue(maxsize=<span>0</span>)               <span># A thread-safe FIFO queue. Also LifoQueue.</span>
&lt;Queue&gt;.put(&lt;el&gt;)                              <span># Blocks until queue stops being full.</span>
&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       <span># Raises queue.Full exception if full.</span>
&lt;el&gt; = &lt;Queue&gt;.get()                           <span># Blocks until queue stops being empty.</span>
&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    <span># Raises queue.Empty exception if empty.</span>
</code></pre></div>

<div><h3 id="threadpoolexecutor">Thread Pool Executor</h3><pre><code>&lt;Exec&gt; = ThreadPoolExecutor(max_workers=<span>None</span>)  <span># Or: `with ThreadPoolExecutor() as &lt;name&gt;: ‚Ä¶`</span>
&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     <span># Multithreaded and non-lazy map(). Keeps order.</span>
&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   <span># Creates a thread and returns its Future obj.</span>
&lt;Exec&gt;.shutdown(wait=<span>True</span>)                     <span># Blocks until all threads finish executing.</span>
</code></pre></div>

<pre><code>&lt;bool&gt; = &lt;Future&gt;.done()                       <span># Checks if the thread has finished executing.</span>
&lt;obj&gt;  = &lt;Future&gt;.result(timeout=<span>None</span>)         <span># Waits for thread to finish and returns result.</span>
&lt;bool&gt; = &lt;Future&gt;.cancel()                     <span># Returns False if thread is already running.</span>
&lt;iter&gt; = as_completed(&lt;coll_of_Futures&gt;)       <span># Each Future is yielded as it completes.</span>
</code></pre>
<ul>
<li><strong>Map() and as_completed() also accept 'timeout' argument that causes TimeoutError if result isn't available in 'timeout' seconds after next() is called.</strong></li>
<li><strong>Exceptions that happen inside threads are raised when next() is called on map's iterator or when result() is called on a Future. Its exception() method returns exception or None.</strong></li>
<li><strong>An object with the same interface called ProcessPoolExecutor provides true parallelism by running a separate interpreter in each process. Arguments/results must be <a href="#pickle">pickable</a>.</strong></li>
</ul>
<div><h2 id="operator"><a href="#operator" name="operator">#</a>Operator</h2><p><strong>Module of functions that provide the functionality of operators.</strong></p><pre><code><span>import</span> operator <span>as</span> op
&lt;obj&gt;     = op.add/sub/mul/truediv/floordiv/mod(&lt;obj&gt;, &lt;obj&gt;)     <span># +, -, *, /, //, %</span>
&lt;int/set&gt; = op.and_/or_/xor(&lt;int/set&gt;, &lt;int/set&gt;)                 <span># &amp;, |, ^</span>
&lt;bool&gt;    = op.eq/ne/lt/le/gt/ge(&lt;sortable&gt;, &lt;sortable&gt;)          <span># ==, !=, &lt;, &lt;=, &gt;, &gt;=</span>
&lt;func&gt;    = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt; [, ...])  <span># [index/key], .name, .name()</span>
</code></pre></div>


<pre><code>elementwise_sum  = map(op.add, list_a, list_b)
sorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(<span>1</span>))
sorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(<span>1</span>, <span>0</span>))
product_of_elems = functools.reduce(op.mul, &lt;collection&gt;)
union_of_sets    = functools.reduce(op.or_, &lt;coll_of_sets&gt;)
first_element    = op.methodcaller(<span>'pop'</span>, <span>0</span>)(&lt;list&gt;)
</code></pre>
<ul>
<li><strong>Binary operators require objects to have and(), or(), xor() and invert() special methods, unlike logical operators that work on all types of objects.</strong></li>
<li><strong>Also: <code><span>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</span></code> and <code><span>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</span></code>.</strong></li>
</ul>
<div><h2 id="introspection"><a href="#introspection" name="introspection">#</a>Introspection</h2><p><strong>Inspecting code at runtime.</strong></p><div><h3 id="variables">Variables</h3><pre><code>&lt;list&gt; = dir()                             <span># Names of local variables (incl. functions).</span>
&lt;dict&gt; = vars()                            <span># Dict of local variables. Also locals().</span>
&lt;dict&gt; = globals()                         <span># Dict of global variables.</span>
</code></pre></div></div>



<div><h3 id="attributes">Attributes</h3><pre><code>&lt;list&gt; = dir(&lt;object&gt;)                     <span># Names of object's attributes (incl. methods).</span>
&lt;dict&gt; = vars(&lt;object&gt;)                    <span># Dict of writable attributes. Also &lt;obj&gt;.__dict__.</span>
&lt;bool&gt; = hasattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>)  <span># Checks if getattr() raises an AttributeError.</span>
value  = getattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>)  <span># Raises AttributeError if attribute is missing.</span>
setattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>, value)    <span># Only works on objects with '__dict__' attribute.</span>
delattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>)           <span># Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.</span>
</code></pre></div>

<div><h3 id="parameters-1">Parameters</h3><pre><code>&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     <span># Function's Signature object.</span>
&lt;dict&gt; = &lt;Sig&gt;.parameters                  <span># Dict of Parameter objects.</span>
&lt;memb&gt; = &lt;Param&gt;.kind                      <span># Member of ParameterKind enum.</span>
&lt;obj&gt;  = &lt;Param&gt;.default                   <span># Default value or Parameter.empty.</span>
&lt;type&gt; = &lt;Param&gt;.annotation                <span># Type or Parameter.empty.</span>
</code></pre></div>

<div><p><strong>Code that generates code.</strong></p><div><h3 id="type-1">Type</h3><p><strong>Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.</strong></p><pre><code>&lt;class&gt; = type(<span>'&lt;class_name&gt;'</span>, &lt;tuple_of_parents&gt;, &lt;dict_of_class_attributes&gt;)</code></pre></div></div>




<pre><code><span>&gt;&gt;&gt; </span>Z = type(<span>'Z'</span>, (), {<span>'a'</span>: <span>'abcde'</span>, <span>'b'</span>: <span>12345</span>})
<span>&gt;&gt;&gt; </span>z = Z()
</code></pre>
<div><h3 id="metaclass">Meta Class</h3><p><strong>A class that creates classes.</strong></p><pre><code><span><span>def</span> <span>my_meta_class</span><span>(name, parents, attrs)</span>:</span>
    attrs[<span>'a'</span>] = <span>'abcde'</span>
    <span>return</span> type(name, parents, attrs)
</code></pre></div>


<div><h4 id="or-2">Or:</h4><pre><code><span><span>class</span> <span>MyMetaClass</span><span>(type)</span>:</span>
    <span><span>def</span> <span>__new__</span><span>(cls, name, parents, attrs)</span>:</span>
        attrs[<span>'a'</span>] = <span>'abcde'</span>
        <span>return</span> type.__new__(cls, name, parents, attrs)
</code></pre></div>

<ul>
<li><strong>New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a 'self' argument.</strong></li>
<li><strong>It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).</strong></li>
<li><strong>Like in our case, new() can also be called directly, usually from a new() method of a child class (</strong><code><span><span>def</span> <span>__new__</span><span>(cls)</span>:</span> <span>return</span> super().__new__(cls)</code><strong>).</strong></li>
<li><strong>The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.</strong></li>
</ul>
<div><h3 id="metaclassattribute">Metaclass Attribute</h3><p><strong>Right before a class is created it checks if it has the 'metaclass' attribute defined. If not, it recursively checks if any of his parents has it defined and eventually comes to type().</strong></p><pre><code><span><span>class</span> <span>MyClass</span><span>(metaclass=MyMetaClass)</span>:</span>
    b = <span>12345</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>MyClass.a, MyClass.b
(<span>'abcde'</span>, <span>12345</span>)
</code></pre>
<div><h3 id="typediagram">Type Diagram</h3><pre><code>type(MyClass) == MyMetaClass         <span># MyClass is an instance of MyMetaClass.</span>
type(MyMetaClass) == type            <span># MyMetaClass is an instance of type.</span>
</code></pre></div>

<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ   Classes   ‚îÇ Metaclasses ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ   MyClass ‚Üê‚îÄ‚îÄ‚ï¥MyMetaClass ‚îÉ
‚îÉ             ‚îÇ     ‚Üë       ‚îÉ
‚îÉ    object ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¥type ‚Üê‚ïÆ  ‚îÉ
‚îÉ             ‚îÇ     ‚îÇ ‚ï∞‚îÄ‚îÄ‚ïØ  ‚îÉ
‚îÉ     str ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ       ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<div><h3 id="inheritancediagram">Inheritance Diagram</h3><pre><code>MyClass.__base__ == object           <span># MyClass is a subclass of object.</span>
MyMetaClass.__base__ == type         <span># MyMetaClass is a subclass of type.</span>
</code></pre></div>

<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ   Classes   ‚îÇ Metaclasses ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ   MyClass   ‚îÇ MyMetaClass ‚îÉ
‚îÉ      ‚Üë      ‚îÇ     ‚Üë       ‚îÉ
‚îÉ    object‚ï∂‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Üí type     ‚îÉ
‚îÉ      ‚Üì      ‚îÇ             ‚îÉ
‚îÉ     str     ‚îÇ             ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<div><h2 id="eval"><a href="#eval" name="eval">#</a>Eval</h2><pre><code><span>&gt;&gt;&gt; </span><span>from</span> ast <span>import</span> literal_eval
<span>&gt;&gt;&gt; </span>literal_eval(<span>'[1, 2, 3]'</span>)
[<span>1</span>, <span>2</span>, <span>3</span>]
<span>&gt;&gt;&gt; </span>literal_eval(<span>'1 + 2'</span>)
ValueError: malformed node or string
</code></pre></div>

<div><h2 id="coroutines"><a href="#coroutines" name="coroutines">#</a>Coroutines</h2><ul>
<li><strong>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don‚Äôt use as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code><span>'async'</span></code> and its call with <code><span>'await'</span></code>.</strong></li>
<li><strong><code><span>'asyncio.run(&lt;coroutine&gt;)'</span></code> is the main entry point for asynchronous programs.</strong></li>
<li><strong>Functions wait(), gather() and as_completed() start multiple coroutines at the same time.</strong></li>
<li><strong>Asyncio module also provides its own <a href="#queue">Queue</a>, <a href="#semaphoreeventbarrier">Event</a>, <a href="#lock">Lock</a> and <a href="#semaphoreeventbarrier">Semaphore</a> classes.</strong></li>
</ul><div><h4 id="runsaterminalgamewhereyoucontrolanasteriskthatmustavoidnumbers">Runs a terminal game where you control an asterisk that must avoid numbers:</h4><pre><code><span>import</span> asyncio, collections, curses, curses.textpad, enum, random

P = collections.namedtuple(<span>'P'</span>, <span>'x y'</span>)         <span># Position</span>
D = enum.Enum(<span>'D'</span>, <span>'n e s w'</span>)                  <span># Direction</span>
W, H = <span>15</span>, <span>7</span>                                   <span># Width, Height</span>

<span><span>def</span> <span>main</span><span>(screen)</span>:</span>
    curses.curs_set(<span>0</span>)                         <span># Makes cursor invisible.</span>
    screen.nodelay(<span>True</span>)                       <span># Makes getch() non-blocking.</span>
    asyncio.run(main_coroutine(screen))        <span># Starts running asyncio code.</span>

<span>async</span> <span><span>def</span> <span>main_coroutine</span><span>(screen)</span>:</span>
    moves = asyncio.Queue()
    state = {<span>'*'</span>: P(<span>0</span>, <span>0</span>), **{id_: P(W//<span>2</span>, H//<span>2</span>) <span>for</span> id_ <span>in</span> range(<span>10</span>)}}
    ai    = [random_controller(id_, moves) <span>for</span> id_ <span>in</span> range(<span>10</span>)]
    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]
    tasks = [asyncio.create_task(cor) <span>for</span> cor <span>in</span> ai + mvc]
    <span>await</span> asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

<span>async</span> <span><span>def</span> <span>random_controller</span><span>(id_, moves)</span>:</span>
    <span>while</span> <span>True</span>:
        d = random.choice(list(D))
        moves.put_nowait((id_, d))
        <span>await</span> asyncio.sleep(random.triangular(<span>0.01</span>, <span>0.65</span>))

<span>async</span> <span><span>def</span> <span>human_controller</span><span>(screen, moves)</span>:</span>
    <span>while</span> <span>True</span>:
        key_mappings = {<span>258</span>: D.s, <span>259</span>: D.n, <span>260</span>: D.w, <span>261</span>: D.e}
        <span>if</span> d := key_mappings.get(screen.getch()):
            moves.put_nowait((<span>'*'</span>, d))
        <span>await</span> asyncio.sleep(<span>0.005</span>)

<span>async</span> <span><span>def</span> <span>model</span><span>(moves, state)</span>:</span>
    <span>while</span> state[<span>'*'</span>] <span>not</span> <span>in</span> (state[id_] <span>for</span> id_ <span>in</span> range(<span>10</span>)):
        id_, d = <span>await</span> moves.get()
        x, y   = state[id_]
        deltas = {D.n: P(<span>0</span>, <span>-1</span>), D.e: P(<span>1</span>, <span>0</span>), D.s: P(<span>0</span>, <span>1</span>), D.w: P(<span>-1</span>, <span>0</span>)}
        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)

<span>async</span> <span><span>def</span> <span>view</span><span>(state, screen)</span>:</span>
    offset = P(curses.COLS//<span>2</span> - W//<span>2</span>, curses.LINES//<span>2</span> - H//<span>2</span>)
    <span>while</span> <span>True</span>:
        screen.erase()
        curses.textpad.rectangle(screen, offset.y-<span>1</span>, offset.x-<span>1</span>, offset.y+H, offset.x+W)
        <span>for</span> id_, p <span>in</span> state.items():
            screen.addstr(offset.y + (p.y - state[<span>'*'</span>].y + H//<span>2</span>) % H,
                          offset.x + (p.x - state[<span>'*'</span>].x + W//<span>2</span>) % W, str(id_))
        screen.refresh()
        <span>await</span> asyncio.sleep(<span>0.005</span>)

<span>if</span> __name__ == <span>'__main__'</span>:
    curses.wrapper(main)
</code></pre></div></div>




<div><h2 id="libraries">Libraries</h2><div><h2 id="progressbar"><a href="#progressbar" name="progressbar">#</a>Progress Bar</h2><pre><code><span># $ pip3 install tqdm</span>
<span>&gt;&gt;&gt; </span><span>from</span> tqdm <span>import</span> tqdm
<span>&gt;&gt;&gt; </span><span>from</span> time <span>import</span> sleep
<span>&gt;&gt;&gt; </span><span>for</span> el <span>in</span> tqdm([<span>1</span>, <span>2</span>, <span>3</span>], desc=<span>'Processing'</span>):
<span>... </span>    sleep(<span>1</span>)
Processing: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3/3 [00:03&lt;00:00,  1.00s/it]
</code></pre></div></div>


<div><h2 id="plot"><a href="#plot" name="plot">#</a>Plot</h2><pre><code><span># $ pip3 install matplotlib</span>
<span>import</span> matplotlib.pyplot <span>as</span> plt
plt.plot/bar/scatter(x_data, y_data [, label=&lt;str&gt;])  <span># Or: plt.plot(y_data)</span>
plt.legend()                                          <span># Adds a legend.</span>
plt.savefig(&lt;path&gt;)                                   <span># Saves the figure.</span>
plt.show()                                            <span># Displays the figure.</span>
plt.clf()                                             <span># Clears the figure.</span>
</code></pre></div>

<div><h2 id="table"><a href="#table" name="table">#</a>Table</h2><div><h4 id="printsacsvfileasanasciitable">Prints a CSV file as an ASCII table:</h4><pre><code><span># $ pip3 install tabulate</span>
<span>import</span> csv, tabulate
<span>with</span> open(<span>'test.csv'</span>, encoding=<span>'utf-8'</span>, newline=<span>''</span>) <span>as</span> file:
    rows   = csv.reader(file)
    header = next(rows)
    table  = tabulate.tabulate(rows, header)
print(table)
</code></pre></div></div>


<div><h2 id="curses"><a href="#curses" name="curses">#</a>Curses</h2><div><h4 id="runsabasicfileexplorerintheterminal">Runs a basic file explorer in the terminal:</h4><pre><code><span>import</span> curses, curses.ascii, os
<span>from</span> curses <span>import</span> A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER

<span><span>def</span> <span>main</span><span>(screen)</span>:</span>
    ch, first, selected, paths = <span>0</span>, <span>0</span>, <span>0</span>, os.listdir()
    <span>while</span> ch != curses.ascii.ESC:
        height, width = screen.getmaxyx()
        screen.erase()
        <span>for</span> y, filename <span>in</span> enumerate(paths[first : first+height]):
            color = A_REVERSE <span>if</span> filename == paths[selected] <span>else</span> <span>0</span>
            screen.addstr(y, <span>0</span>, filename[:width-<span>1</span>], color)
        ch = screen.getch()
        selected += (ch == KEY_DOWN) - (ch == KEY_UP)
        selected = max(<span>0</span>, min(len(paths)-<span>1</span>, selected))
        first += (selected &gt;= first + height) - (selected &lt; first)
        <span>if</span> ch <span>in</span> [KEY_LEFT, KEY_RIGHT, KEY_ENTER, ord(<span>'\n'</span>), ord(<span>'\r'</span>)]:
            new_dir = <span>'..'</span> <span>if</span> ch == KEY_LEFT <span>else</span> paths[selected]
            <span>if</span> os.path.isdir(new_dir):
                os.chdir(new_dir)
                first, selected, paths = <span>0</span>, <span>0</span>, os.listdir()

<span>if</span> __name__ == <span>'__main__'</span>:
    curses.wrapper(main)
</code></pre></div></div>




<pre><code>logging.basicConfig(filename=&lt;path&gt;)              <span># Configures the root logger.</span>
logging.debug/info/warning/error/critical(&lt;str&gt;)  <span># Logs to the root logger.</span>
&lt;Logger&gt; = logging.getLogger(__name__)            <span># Logger named after the module.</span>
&lt;Logger&gt;.&lt;level&gt;(&lt;str&gt;)                           <span># Messages propagate to the root logger.</span>
&lt;Logger&gt;.exception(&lt;str&gt;)                         <span># Calls error() with caught exception.</span>
</code></pre>
<div><h3 id="setup">Setup</h3><pre><code>logging.basicConfig(
    filename=<span>None</span>,                                <span># Logs to console by default.</span>
    format=<span>'%(levelname)s:%(name)s:%(message)s'</span>,  <span># Add `%(asctime)s` for datetime.</span>
    level=logging.WARNING,                        <span># Drops messages with lower priority.</span>
    handlers=[logging.StreamHandler()]            <span># Uses FileHandler if filename is set.</span>
)
</code></pre></div>

<pre><code>&lt;Formatter&gt; = logging.Formatter(<span>'&lt;format&gt;'</span>)       <span># Creates a Formatter.</span>
&lt;Handler&gt; = logging.FileHandler(&lt;path&gt;)           <span># Creates a Handler.</span>
&lt;Handler&gt;.setFormatter(&lt;Formatter&gt;)               <span># Adds Formatter to the Handler.</span>
&lt;Handler&gt;.setLevel(&lt;int/str&gt;)                     <span># Processes all messages by default.</span>
&lt;Logger&gt;.addHandler(&lt;Handler&gt;)                    <span># Adds Handler to the Logger.</span>
&lt;Logger&gt;.setLevel(&lt;int/str&gt;)                      <span># What is sent to handlers and parent.</span>
</code></pre>
<ul>
<li><strong>Parent logger can be specified by naming the child logger <code><span>'&lt;parent&gt;.&lt;name&gt;'</span></code>.</strong></li>
<li><strong>Formatter also supports: pathname, filename, funcName, lineno, thread and process.</strong></li>
<li><strong>A <code><span>'handlers.RotatingFileHandler'</span></code> creates and deletes log files based on 'maxBytes' and 'backupCount' arguments.</strong></li>
</ul>
<div><h4 id="createsaloggerthatwritesallmessagestoafileandsendsthemtotherootloggerthatprintstostdout">Creates a logger that writes all messages to a file and sends them to the root logger that prints to stdout:</h4><pre><code><span>&gt;&gt;&gt; </span>logging.basicConfig(level=<span>'WARNING'</span>)
<span>&gt;&gt;&gt; </span>logger = logging.getLogger(<span>'my_module'</span>)
<span>&gt;&gt;&gt; </span>handler = logging.FileHandler(<span>'test.log'</span>)
<span>&gt;&gt;&gt; </span>formatter = logging.Formatter(<span>'%(asctime)s %(levelname)s:%(name)s:%(message)s'</span>)
<span>&gt;&gt;&gt; </span>handler.setFormatter(formatter)
<span>&gt;&gt;&gt; </span>logger.addHandler(handler)
<span>&gt;&gt;&gt; </span>logger.critical(<span>'Running out of disk space.'</span>)
CRITICAL:my_module:Running out of disk space.
<span>&gt;&gt;&gt; </span>print(open(<span>'test.log'</span>).read())
2023-02-07 23:21:01,430 CRITICAL:my_module:Running out of disk space.
</code></pre></div>

<div><h2 id="scraping"><a href="#scraping" name="scraping">#</a>Scraping</h2><div><h4 id="scrapespythonsurlversionnumberandlogofromitswikipediapage">Scrapes Python's URL, version number and logo from its Wikipedia page:</h4><pre><code><span># $ pip3 install requests beautifulsoup4</span>
<span>import</span> requests, bs4, os, sys

WIKI_URL = <span>'https://en.wikipedia.org/wiki/Python_(programming_language)'</span>
<span>try</span>:
    html       = requests.get(WIKI_URL).text
    document   = bs4.BeautifulSoup(html, <span>'html.parser'</span>)
    table      = document.find(<span>'table'</span>, class_=<span>'infobox vevent'</span>)
    python_url = table.find(<span>'th'</span>, text=<span>'Website'</span>).next_sibling.a[<span>'href'</span>]
    version    = table.find(<span>'th'</span>, text=<span>'Stable release'</span>).next_sibling.strings.__next__()
    logo_url   = table.find(<span>'img'</span>)[<span>'src'</span>]
    logo       = requests.get(<span>f'https:<span>{logo_url}</span>'</span>).content
    filename   = os.path.basename(logo_url)
    <span>with</span> open(filename, <span>'wb'</span>) <span>as</span> file:
        file.write(logo)
    print(<span>f'<span>{python_url}</span>, <span>{version}</span>, file://<span>{os.path.abspath(filename)}</span>'</span>)
<span>except</span> requests.exceptions.ConnectionError:
    print(<span>"You've got problems with connection."</span>, file=sys.stderr)
</code></pre></div></div>


<div><h2 id="web"><a href="#web" name="web">#</a>Web</h2><p><strong>Flask is a micro web framework/server. If you just want to open a html file in a web browser use <code><span>'webbrowser.open(&lt;path&gt;)'</span></code> instead.</strong></p><pre><code><span># $ pip3 install flask</span>
<span>from</span> flask <span>import</span> Flask, send_from_directory, render_template_string, request
</code></pre></div>


<pre><code>app = Flask(__name__)
app.run(host=<span>None</span>, debug=<span>None</span>)
</code></pre>
<ul>
<li><strong>Starts the app at <code><span>'http://localhost:5000'</span></code>. Use <code><span>'host="0.0.0.0"'</span></code> to run externally.</strong></li>
<li><strong>Install a WSGI server like <a href="https://flask.palletsprojects.com/en/latest/deploying/waitress/">Waitress</a> and a HTTP server such as <a href="https://flask.palletsprojects.com/en/latest/deploying/nginx/">Nginx</a> for better security.</strong></li>
<li><strong>Debug mode restarts the app whenever script changes and displays errors in the browser.</strong></li>
</ul>
<div><h3 id="staticrequest">Static Request</h3><pre><code><span>@app.route('/img/&lt;path:filename&gt;')</span>
<span><span>def</span> <span>serve_file</span><span>(filename)</span>:</span>
    <span>return</span> send_from_directory(<span>'dirname/'</span>, filename)
</code></pre></div>

<div><h3 id="dynamicrequest">Dynamic Request</h3><pre><code><span>@app.route('/&lt;sport&gt;')</span>
<span><span>def</span> <span>serve_html</span><span>(sport)</span>:</span>
    <span>return</span> render_template_string(<span>'&lt;h1&gt;{{title}}&lt;/h1&gt;'</span>, title=sport)
</code></pre></div>

<ul>
<li><strong>To return an error code use <code><span>'abort(&lt;int&gt;)'</span></code> and to redirect use <code><span>'redirect(&lt;url&gt;)'</span></code>.</strong></li>
<li><strong><code><span>'request.args[&lt;str&gt;]'</span></code> returns parameter from the query string (URL part after '?').</strong></li>
<li><strong>Use <code><span>'session[key] = value'</span></code> to store session data like username, etc.</strong></li>
</ul>
<div><h3 id="restrequest">REST Request</h3><pre><code><span>@app.post('/&lt;sport&gt;/odds')</span>
<span><span>def</span> <span>serve_json</span><span>(sport)</span>:</span>
    team = request.form[<span>'team'</span>]
    <span>return</span> {<span>'team'</span>: team, <span>'odds'</span>: [<span>2.09</span>, <span>3.74</span>, <span>3.68</span>]}
</code></pre></div>

<div><h4 id="startstheappinitsownthreadandqueriesitwithapostrequest">Starts the app in its own thread and queries it with a post request:</h4><pre><code><span># $ pip3 install requests</span>
<span>&gt;&gt;&gt; </span><span>import</span> threading, requests
<span>&gt;&gt;&gt; </span>threading.Thread(target=app.run, daemon=<span>True</span>).start()
<span>&gt;&gt;&gt; </span>url = <span>'http://localhost:5000/football/odds'</span>
<span>&gt;&gt;&gt; </span>request_data = {<span>'team'</span>: <span>'arsenal f.c.'</span>}
<span>&gt;&gt;&gt; </span>response = requests.post(url, data=request_data)
<span>&gt;&gt;&gt; </span>response.json()
{<span>'team'</span>: <span>'arsenal f.c.'</span>, <span>'odds'</span>: [<span>2.09</span>, <span>3.74</span>, <span>3.68</span>]}
</code></pre></div>

<div><h2 id="profiling"><a href="#profiling" name="profiling">#</a>Profiling</h2><pre><code><span>from</span> time <span>import</span> perf_counter
start_time = perf_counter()
...
duration_in_seconds = perf_counter() - start_time
</code></pre></div>

<div><h3 id="timingasnippet">Timing a Snippet</h3><pre><code><span>&gt;&gt;&gt; </span><span>from</span> timeit <span>import</span> timeit
<span>&gt;&gt;&gt; </span>timeit(<span>'list(range(10000))'</span>, number=<span>1000</span>, globals=globals(), setup=<span>'pass'</span>)
<span>0.19373</span>
</code></pre></div>

<div><h3 id="profilingbyline">Profiling by Line</h3><pre><code>$ pip3 install line_profiler
$ echo "@profile
def main():
    a = list(range(10000))
    b = set(range(10000))
main()" &gt; test.py
$ kernprof -lv test.py
Line #   Hits     Time  Per Hit   % Time  Line Contents
=======================================================
     1                                    @profile
     2                                    def main():
     3      1    219.0    219.0     31.1      a = list(range(10000))
     4      1    487.0    487.0     68.9      b = set(range(10000))
</code></pre></div>

<div><h3 id="callandflamegraphs">Call and Flame Graphs</h3><pre><code>$ pip3 install gprof2dot snakeviz; apt/brew install graphviz
$ tail -n 4 test.py &gt; test.py
$ python3 -m cProfile -o test.prof test.py
$ gprof2dot -f pstats test.prof | dot -Tpng -o test.png; xdg-open/open test.png
$ snakeviz test.prof
</code></pre></div>

<div><h3 id="samplingandmemoryprofilers">Sampling and Memory Profilers</h3><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ pip3 install ‚îÇ          How to run           ‚îÇ   Target   ‚îÇ   Type   ‚îÇ Live ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ py-spy       ‚îÇ py-spy top -- python3 test.py ‚îÇ    CPU     ‚îÇ Sampling ‚îÇ Yes  ‚îÉ
‚îÉ pyinstrument ‚îÇ pyinstrument test.py          ‚îÇ    CPU     ‚îÇ Sampling ‚îÇ No   ‚îÉ
‚îÉ scalene      ‚îÇ scalene test.py               ‚îÇ CPU+Memory ‚îÇ Sampling ‚îÇ No   ‚îÉ
‚îÉ memray       ‚îÇ memray run --live test.py     ‚îÇ   Memory   ‚îÇ Tracing  ‚îÇ Yes  ‚îÉ
‚îÉ filprofiler  ‚îÇ fil-profile run test.py       ‚îÇ   Memory   ‚îÇ Tracing  ‚îÇ No   ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div>

<div><h2 id="numpy"><a href="#numpy" name="numpy">#</a>NumPy</h2><p><strong>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.</strong></p><pre><code><span># $ pip3 install numpy</span>
<span>import</span> numpy <span>as</span> np
</code></pre></div>


<pre><code>&lt;array&gt; = np.array(&lt;list/list_of_lists&gt;)                <span># Returns a 1d/2d NumPy array.</span>
&lt;array&gt; = np.zeros/ones(&lt;shape&gt;)                        <span># Also np.full(&lt;shape&gt;, &lt;el&gt;).</span>
&lt;array&gt; = np.arange(from_inc, to_exc, ¬±step)            <span># Also np.linspace(start, stop, len).</span>
&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  <span># Also np.random.random(&lt;shape&gt;).</span>
</code></pre>
<pre><code>&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      <span># Also `&lt;array&gt;.shape = &lt;shape&gt;`.</span>
&lt;array&gt; = &lt;array&gt;.flatten()                             <span># Also `&lt;view&gt; = &lt;array&gt;.ravel()`.</span>
&lt;view&gt;  = &lt;array&gt;.transpose()                           <span># Or: &lt;array&gt;.T</span>
</code></pre>
<pre><code>&lt;array&gt; = np.copy/abs/sqrt/log/int64(&lt;array&gt;)           <span># Returns new array of the same shape.</span>
&lt;array&gt; = &lt;array&gt;.sum/max/mean/argmax/all(axis)         <span># Passed dimension gets aggregated.</span>
&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    <span># Func can return a scalar or array.</span>
</code></pre>
<pre><code>&lt;array&gt; = np.concatenate(&lt;list_of_arrays&gt;, axis=<span>0</span>)      <span># Links arrays along first axis (rows).</span>
&lt;array&gt; = np.row_stack/column_stack(&lt;list_of_arrays&gt;)   <span># Treats 1d arrays as rows or columns.</span>
&lt;array&gt; = np.tile/repeat(&lt;array&gt;, &lt;int/list&gt;)           <span># Tiles array or repeats its elements.</span>
</code></pre>
<ul>
<li><strong>Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3).</strong></li>
<li><strong>Axis is an index of the dimension that gets aggregated. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).</strong></li>
</ul>
<div><h3 id="indexing">Indexing</h3><pre><code>&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        <span># &lt;3d_a&gt;[table_i, row_i, column_i]</span>
&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      <span># &lt;3d_a&gt;[table_i, row_i]</span>
&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                <span># &lt;3d_a&gt;[table_i, :, column_i]</span>
&lt;2d_view&gt;  = &lt;2d_array&gt;[rows_slice, columns_slice]      <span># &lt;3d_a&gt;[table_i, rows_s, columns_s]</span>
</code></pre></div>

<pre><code>&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    <span># &lt;3d_a&gt;[table_i/is, row_is]</span>
&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              <span># &lt;3d_a&gt;[table_i/is, :, column_is]</span>
&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    <span># &lt;3d_a&gt;[table_i/is, row_is, column_is]</span>
&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_index]      <span># &lt;3d_a&gt;[table_i/is, row_is, column_i]</span>
</code></pre>
<pre><code>&lt;2d_bools&gt; = &lt;2d_array&gt; &gt;&lt;== &lt;el/1d/2d_array&gt;           <span># 1d_array must have size of a row.</span>
&lt;1d/2d_a&gt;  = &lt;2d_array&gt;[&lt;2d/1d_bools&gt;]                  <span># 1d_bools must have size of a column.</span>
</code></pre>
<ul>
<li><strong>Indexes should not be tuples because Python converts <code><span>'obj[i, j]'</span></code>  to <code><span>'obj[(i, j)]'</span></code>!</strong></li>
<li><strong>Any value that is broadcastable to the indexed shape can be assigned to the selection.</strong></li>
</ul>
<div><h3 id="broadcasting">Broadcasting</h3><p><strong>Set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.</strong></p><pre><code>left  = [[<span>0.1</span>], [<span>0.6</span>], [<span>0.8</span>]]                           <span># Shape: (3, 1)</span>
right = [ <span>0.1</span> ,  <span>0.6</span> ,  <span>0.8</span> ]                           <span># Shape: (3,)</span>
</code></pre></div>


<div><h4 id="1ifarrayshapesdifferinlengthleftpadtheshortershapewithones">1. If array shapes differ in length, left-pad the shorter shape with ones:</h4><pre><code>left  = [[<span>0.1</span>], [<span>0.6</span>], [<span>0.8</span>]]                           <span># Shape: (3, 1)</span>
right = [[<span>0.1</span> ,  <span>0.6</span> ,  <span>0.8</span>]]                           <span># Shape: (1, 3) &lt;- !</span>
</code></pre></div>

<div><h4 id="2ifanydimensionsdifferinsizeexpandtheonesthathavesize1byduplicatingtheirelements">2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:</h4><pre><code>left  = [[<span>0.1</span>,  <span>0.1</span>,  <span>0.1</span>],                             <span># Shape: (3, 3) &lt;- !</span>
         [<span>0.6</span>,  <span>0.6</span>,  <span>0.6</span>],
         [<span>0.8</span>,  <span>0.8</span>,  <span>0.8</span>]]

right = [[<span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>],                             <span># Shape: (3, 3) &lt;- !</span>
         [<span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>],
         [<span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>]]
</code></pre></div>

<div><h3 id="example-2">Example</h3><div><h4 id="foreachpointreturnsindexofitsnearestpoint010608121">For each point returns index of its nearest point (<code>[<span>0.1</span>, <span>0.6</span>, <span>0.8</span>] =&gt; [<span>1</span>, <span>2</span>, <span>1</span>]</code>):</h4><pre><code><span>&gt;&gt;&gt; </span>points = np.array([<span>0.1</span>, <span>0.6</span>, <span>0.8</span>])
 [ <span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>]
<span>&gt;&gt;&gt; </span>wrapped_points = points.reshape(<span>3</span>, <span>1</span>)
[[ <span>0.1</span>],
 [ <span>0.6</span>],
 [ <span>0.8</span>]]
<span>&gt;&gt;&gt; </span>distances = wrapped_points - points
[[ <span>0.</span> , <span>-0.5</span>, <span>-0.7</span>],
 [ <span>0.5</span>,  <span>0.</span> , <span>-0.2</span>],
 [ <span>0.7</span>,  <span>0.2</span>,  <span>0.</span> ]]
<span>&gt;&gt;&gt; </span>distances = np.abs(distances)
[[ <span>0.</span> ,  <span>0.5</span>,  <span>0.7</span>],
 [ <span>0.5</span>,  <span>0.</span> ,  <span>0.2</span>],
 [ <span>0.7</span>,  <span>0.2</span>,  <span>0.</span> ]]
<span>&gt;&gt;&gt; </span>i = np.arange(<span>3</span>)
[<span>0</span>, <span>1</span>, <span>2</span>]
<span>&gt;&gt;&gt; </span>distances[i, i] = np.inf
[[ inf,  <span>0.5</span>,  <span>0.7</span>],
 [ <span>0.5</span>,  inf,  <span>0.2</span>],
 [ <span>0.7</span>,  <span>0.2</span>,  inf]]
<span>&gt;&gt;&gt; </span>distances.argmin(<span>1</span>)
[<span>1</span>, <span>2</span>, <span>1</span>]
</code></pre></div></div>


<div><h2 id="image"><a href="#image" name="image">#</a>Image</h2><pre><code><span># $ pip3 install pillow</span>
<span>from</span> PIL <span>import</span> Image, ImageDraw
</code></pre></div>

<pre><code>&lt;Image&gt; = Image.new(<span>'&lt;mode&gt;'</span>, (width, height))  <span># Also `color=&lt;int/tuple/str&gt;`.</span>
&lt;Image&gt; = Image.open(&lt;path&gt;)                    <span># Identifies format based on file contents.</span>
&lt;Image&gt; = &lt;Image&gt;.convert(<span>'&lt;mode&gt;'</span>)             <span># Converts image to the new mode.</span>
&lt;Image&gt;.save(&lt;path&gt;)                            <span># Selects format based on the path extension.</span>
&lt;Image&gt;.show()                                  <span># Opens image in the default preview app.</span>
</code></pre>
<pre><code>&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))          <span># Returns a pixel.</span>
&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)           <span># Writes a pixel to the image.</span>
&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()               <span># Returns a flattened view of the pixels.</span>
&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)             <span># Writes a flattened sequence of pixels.</span>
&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                  <span># Writes passed image to the image.</span>
</code></pre>
<pre><code>&lt;Image&gt; = &lt;Image&gt;.filter(&lt;Filter&gt;)              <span># `&lt;Filter&gt; = ImageFilter.&lt;name&gt;([&lt;args&gt;])`</span>
&lt;Image&gt; = &lt;Enhance&gt;.enhance(&lt;float&gt;)            <span># `&lt;Enhance&gt; = ImageEnhance.&lt;name&gt;(&lt;Image&gt;)`</span>
</code></pre>
<pre><code>&lt;array&gt; = np.array(&lt;Image&gt;)                     <span># Creates NumPy array from the image.</span>
&lt;Image&gt; = Image.fromarray(np.uint8(&lt;array&gt;))    <span># Use &lt;array&gt;.clip(0, 255) to clip the values.</span>
</code></pre>
<div><h3 id="modes-1">Modes</h3><ul>
<li><strong><code><span>'1'</span></code> - 1-bit pixels, black and white, stored with one pixel per byte.</strong></li>
<li><strong><code><span>'L'</span></code> - 8-bit pixels, greyscale.</strong></li>
<li><strong><code><span>'RGB'</span></code> - 3x8-bit pixels, true color.</strong></li>
<li><strong><code><span>'RGBA'</span></code> - 4x8-bit pixels, true color with transparency mask.</strong></li>
<li><strong><code><span>'HSV'</span></code> - 3x8-bit pixels, Hue, Saturation, Value color space.</strong></li>
</ul><div><h3 id="examples">Examples</h3><div><h4 id="createsapngimageofarainbowgradient">Creates a PNG image of a rainbow gradient:</h4><pre><code>WIDTH, HEIGHT = <span>100</span>, <span>100</span>
n_pixels = WIDTH * HEIGHT
hues = (<span>255</span> * i/n_pixels <span>for</span> i <span>in</span> range(n_pixels))
img = Image.new(<span>'HSV'</span>, (WIDTH, HEIGHT))
img.putdata([(int(h), <span>255</span>, <span>255</span>) <span>for</span> h <span>in</span> hues])
img.convert(<span>'RGB'</span>).save(<span>'test.png'</span>)
</code></pre></div></div></div>




<div><h4 id="addsnoisetoapngimage">Adds noise to a PNG image:</h4><pre><code><span>from</span> random <span>import</span> randint
add_noise = <span>lambda</span> value: max(<span>0</span>, min(<span>255</span>, value + randint(<span>-20</span>, <span>20</span>)))
img = Image.open(<span>'test.png'</span>).convert(<span>'HSV'</span>)
img.putdata([(add_noise(h), s, v) <span>for</span> h, s, v <span>in</span> img.getdata()])
img.show()
</code></pre></div>

<div><h3 id="imagedraw">Image Draw</h3><pre><code>&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)           <span># Object for adding 2D graphics to the image.</span>
&lt;ImageDraw&gt;.point((x, y))                       <span># Draws a point. Truncates floats into ints.</span>
&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))      <span># To get anti-aliasing use Image's resize().</span>
&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)   <span># Always draws in clockwise direction.</span>
&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))         <span># To rotate use Image's rotate() and paste().</span>
&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))      <span># Last point gets connected to the first.</span>
&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))           <span># To rotate use Image's rotate() and paste().</span>
&lt;ImageDraw&gt;.text((x, y), text, font=&lt;Font&gt;)     <span># `&lt;Font&gt; = ImageFont.truetype(&lt;path&gt;, size)`</span>
</code></pre></div>

<ul>
<li><strong>Use <code><span>'fill=&lt;color&gt;'</span></code> to set the primary color.</strong></li>
<li><strong>Use <code><span>'width=&lt;int&gt;'</span></code> to set the width of lines or contours.</strong></li>
<li><strong>Use <code><span>'outline=&lt;color&gt;'</span></code> to set the color of the contours.</strong></li>
<li><strong>Color can be an int, tuple, <code><span>'#rrggbb[aa]'</span></code> string or a color name.</strong></li>
</ul>
<div><h2 id="animation"><a href="#animation" name="animation">#</a>Animation</h2><div><h4 id="createsagifofabouncingball">Creates a GIF of a bouncing ball:</h4><pre><code><span># $ pip3 install imageio</span>
<span>from</span> PIL <span>import</span> Image, ImageDraw
<span>import</span> imageio

WIDTH, HEIGHT, R = <span>126</span>, <span>126</span>, <span>10</span>
frames = []
<span>for</span> velocity <span>in</span> range(<span>1</span>, <span>16</span>):
    y = sum(range(velocity))
    frame = Image.new(<span>'L'</span>, (WIDTH, HEIGHT))
    draw  = ImageDraw.Draw(frame)
    draw.ellipse((WIDTH/<span>2</span>-R, y, WIDTH/<span>2</span>+R, y+R*<span>2</span>), fill=<span>'white'</span>)
    frames.append(frame)
frames += reversed(frames[<span>1</span>:<span>-1</span>])
imageio.mimsave(<span>'test.gif'</span>, frames, duration=<span>0.03</span>)
</code></pre></div></div>




<pre><code>&lt;Wave_read&gt;  = wave.open(<span>'&lt;path&gt;'</span>, <span>'rb'</span>)        <span># Opens the WAV file.</span>
framerate    = &lt;Wave_read&gt;.getframerate()       <span># Number of frames per second.</span>
nchannels    = &lt;Wave_read&gt;.getnchannels()       <span># Number of samples per frame.</span>
sampwidth    = &lt;Wave_read&gt;.getsampwidth()       <span># Sample size in bytes.</span>
nframes      = &lt;Wave_read&gt;.getnframes()         <span># Number of frames.</span>
&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          <span># Immutable collection of above.</span>
&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  <span># Returns next 'nframes' frames.</span>
</code></pre>
<pre><code>&lt;Wave_write&gt; = wave.open(<span>'&lt;path&gt;'</span>, <span>'wb'</span>)        <span># Truncates existing file.</span>
&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                <span># 44100 for CD, 48000 for video.</span>
&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                <span># 1 for mono, 2 for stereo.</span>
&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                <span># 2 for CD quality sound.</span>
&lt;Wave_write&gt;.setparams(&lt;params&gt;)                <span># Sets all parameters.</span>
&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               <span># Appends frames to the file.</span>
</code></pre>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.</strong></li>
<li><strong>If sample width is one byte, then the integer should be encoded unsigned.</strong></li>
<li><strong>For all other sizes, the integer should be encoded signed with little-endian byte order.</strong></li>
</ul>
<div><h3 id="samplevalues">Sample Values</h3><pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ sampwidth ‚îÇ    min    ‚îÇ zero ‚îÇ    max    ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ     <span>1</span>     ‚îÇ         <span>0</span> ‚îÇ  <span>128</span> ‚îÇ       <span>255</span> ‚îÉ
‚îÉ     <span>2</span>     ‚îÇ    <span>-32768</span> ‚îÇ    <span>0</span> ‚îÇ     <span>32767</span> ‚îÉ
‚îÉ     <span>3</span>     ‚îÇ  <span>-8388608</span> ‚îÇ    <span>0</span> ‚îÇ   <span>8388607</span> ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre></div>

<div><h3 id="readfloatsamplesfromwavfile">Read Float Samples from WAV File</h3><pre><code><span><span>def</span> <span>read_wav_file</span><span>(filename)</span>:</span>
    <span><span>def</span> <span>get_int</span><span>(bytes_obj)</span>:</span>
        an_int = int.from_bytes(bytes_obj, <span>'little'</span>, signed=(sampwidth != <span>1</span>))
        <span>return</span> an_int - <span>128</span> * (sampwidth == <span>1</span>)
    <span>with</span> wave.open(filename, <span>'rb'</span>) <span>as</span> file:
        sampwidth = file.getsampwidth()
        frames = file.readframes(<span>-1</span>)
    bytes_samples = (frames[i : i+sampwidth] <span>for</span> i <span>in</span> range(<span>0</span>, len(frames), sampwidth))
    <span>return</span> [get_int(b) / pow(<span>2</span>, sampwidth * <span>8</span> - <span>1</span>) <span>for</span> b <span>in</span> bytes_samples]
</code></pre></div>

<div><h3 id="writefloatsamplestowavfile">Write Float Samples to WAV File</h3><pre><code><span><span>def</span> <span>write_to_wav_file</span><span>(filename, float_samples, nchannels=<span>1</span>, sampwidth=<span>2</span>, framerate=<span>44100</span>)</span>:</span>
    <span><span>def</span> <span>get_bytes</span><span>(a_float)</span>:</span>
        a_float = max(<span>-1</span>, min(<span>1</span> - <span>2e-16</span>, a_float))
        a_float += sampwidth == <span>1</span>
        a_float *= pow(<span>2</span>, sampwidth * <span>8</span> - <span>1</span>)
        <span>return</span> int(a_float).to_bytes(sampwidth, <span>'little'</span>, signed=(sampwidth != <span>1</span>))
    <span>with</span> wave.open(filename, <span>'wb'</span>) <span>as</span> file:
        file.setnchannels(nchannels)
        file.setsampwidth(sampwidth)
        file.setframerate(framerate)
        file.writeframes(<span>b''</span>.join(get_bytes(f) <span>for</span> f <span>in</span> float_samples))
</code></pre></div>

<div><h3 id="examples-1">Examples</h3><div><h4 id="savesa440hzsinewavetoamonowavfile">Saves a 440 Hz sine wave to a mono WAV file:</h4><pre><code><span>from</span> math <span>import</span> pi, sin
samples_f = (sin(i * <span>2</span> * pi * <span>440</span> / <span>44100</span>) <span>for</span> i <span>in</span> range(<span>100_000</span>))
write_to_wav_file(<span>'test.wav'</span>, samples_f)
</code></pre></div></div>


<div><h4 id="addsnoisetoamonowavfile">Adds noise to a mono WAV file:</h4><pre><code><span>from</span> random <span>import</span> random
add_noise = <span>lambda</span> value: value + (random() - <span>0.5</span>) * <span>0.03</span>
samples_f = (add_noise(f) <span>for</span> f <span>in</span> read_wav_file(<span>'test.wav'</span>))
write_to_wav_file(<span>'test.wav'</span>, samples_f)
</code></pre></div>

<div><h4 id="playsawavfile">Plays a WAV file:</h4><pre><code><span># $ pip3 install simpleaudio</span>
<span>from</span> simpleaudio <span>import</span> play_buffer
<span>with</span> wave.open(<span>'test.wav'</span>, <span>'rb'</span>) <span>as</span> file:
    p = file.getparams()
    frames = file.readframes(<span>-1</span>)
    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)
</code></pre></div>

<div><h3 id="texttospeech">Text to Speech</h3><pre><code><span># $ pip3 install pyttsx3</span>
<span>import</span> pyttsx3
engine = pyttsx3.init()
engine.say(<span>'Sally sells seashells by the seashore.'</span>)
engine.runAndWait()
</code></pre></div>

<div><h2 id="synthesizer"><a href="#synthesizer" name="synthesizer">#</a>Synthesizer</h2><div><h4 id="playspopcornbygershonkingsley">Plays Popcorn by Gershon Kingsley:</h4><pre><code><span># $ pip3 install simpleaudio</span>
<span>import</span> array, itertools <span>as</span> it, math, simpleaudio

F  = <span>44100</span>
P1 = <span>'71‚ô©,69‚ô™,,71‚ô©,66‚ô™,,62‚ô©,66‚ô™,,59‚ô©,,'</span>
P2 = <span>'71‚ô©,73‚ô™,,74‚ô©,73‚ô™,,74‚ô™,,71‚ô™,,73‚ô©,71‚ô™,,73‚ô™,,69‚ô™,,71‚ô©,69‚ô™,,71‚ô™,,67‚ô™,,71‚ô©,,'</span>
get_pause   = <span>lambda</span> seconds: it.repeat(<span>0</span>, int(seconds * F))
sin_f       = <span>lambda</span> i, hz: math.sin(i * <span>2</span> * math.pi * hz / F)
get_wave    = <span>lambda</span> hz, seconds: (sin_f(i, hz) <span>for</span> i <span>in</span> range(int(seconds * F)))
get_hz      = <span>lambda</span> key: <span>8.176</span> * <span>2</span> ** (int(key) / <span>12</span>)
parse_note  = <span>lambda</span> note: (get_hz(note[:<span>2</span>]), <span>1</span>/<span>4</span> <span>if</span> <span>'‚ô©'</span> <span>in</span> note <span>else</span> <span>1</span>/<span>8</span>)
get_samples = <span>lambda</span> note: get_wave(*parse_note(note)) <span>if</span> note <span>else</span> get_pause(<span>1</span>/<span>8</span>)
samples_f   = it.chain.from_iterable(get_samples(n) <span>for</span> n <span>in</span> <span>f'<span>{P1}</span>,<span>{P1}</span>,<span>{P2}</span>'</span>.split(<span>','</span>))
samples_i   = array.array(<span>'h'</span>, (int(f * <span>30000</span>) <span>for</span> f <span>in</span> samples_f))
simpleaudio.play_buffer(samples_i, <span>1</span>, <span>2</span>, F)
</code></pre></div></div>


<div><h2 id="pygame"><a href="#pygame" name="pygame">#</a>Pygame</h2><pre><code><span># $ pip3 install pygame</span>
<span>import</span> pygame <span>as</span> pg

pg.init()
screen = pg.display.set_mode((<span>500</span>, <span>500</span>))
rect = pg.Rect(<span>240</span>, <span>240</span>, <span>20</span>, <span>20</span>)
<span>while</span> <span>not</span> pg.event.get(pg.QUIT):
    deltas = {pg.K_UP: (<span>0</span>, <span>-20</span>), pg.K_RIGHT: (<span>20</span>, <span>0</span>), pg.K_DOWN: (<span>0</span>, <span>20</span>), pg.K_LEFT: (<span>-20</span>, <span>0</span>)}
    <span>for</span> event <span>in</span> pg.event.get(pg.KEYDOWN):
        dx, dy = deltas.get(event.key, (<span>0</span>, <span>0</span>))
        rect = rect.move((dx, dy))
    screen.fill((<span>0</span>, <span>0</span>, <span>0</span>))
    pg.draw.rect(screen, (<span>255</span>, <span>255</span>, <span>255</span>), rect)
    pg.display.flip()
</code></pre></div>

<div><h3 id="rectangle">Rectangle</h3><p><strong>Object for storing rectangular coordinates.</strong></p><pre><code>&lt;Rect&gt; = pg.Rect(x, y, width, height)           <span># Floats get truncated into ints.</span>
&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/‚Ä¶           <span># Top, right, bottom, left. Allows assignments.</span>
&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/‚Ä¶                <span># Topright, bottomright, bottomleft. Same.</span>
&lt;Rect&gt; = &lt;Rect&gt;.move((delta_x, delta_y))        <span># Use move_ip() to move in-place.</span>
</code></pre></div>


<pre><code>&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            <span># Checks if rectangle contains the point.</span>
&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             <span># Checks if two rectangles overlap.</span>
&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     <span># Returns index of first colliding Rect or -1.</span>
&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  <span># Returns indexes of all colliding rectangles.</span>
</code></pre>
<div><h3 id="surface">Surface</h3><p><strong>Object for representing images.</strong></p><pre><code>&lt;Surf&gt; = pg.display.set_mode((width, height))   <span># Opens new window and returns its surface.</span>
&lt;Surf&gt; = pg.Surface((width, height))            <span># New RGB surface. RGBA if `flags=pg.SRCALPHA`.</span>
&lt;Surf&gt; = pg.image.load(&lt;path/file&gt;)             <span># Loads the image. Format depends on source.</span>
&lt;Surf&gt; = pg.surfarray.make_surface(&lt;np_array&gt;)  <span># Also `&lt;np_arr&gt; = surfarray.pixels3d(&lt;Surf&gt;)`.</span>
&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              <span># Creates a new surface from the cutout.</span>
</code></pre></div>


<pre><code>&lt;Surf&gt;.fill(color)                              <span># Tuple, Color('#rrggbb[aa]') or Color(&lt;name&gt;).</span>
&lt;Surf&gt;.set_at((x, y), color)                    <span># Updates pixel. Also &lt;Surf&gt;.get_at((x, y)).</span>
&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     <span># Draws passed surface to the surface.</span>
</code></pre>
<pre><code><span>from</span> pygame.transform <span>import</span> scale, ...
&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         <span># Returns scaled surface.</span>
&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      <span># Returns rotated and scaled surface.</span>
&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           <span># Returns flipped surface.</span>
</code></pre>
<pre><code><span>from</span> pygame.draw <span>import</span> line, ...
line(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  <span># Draws a line to the surface.</span>
arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    <span># Also ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0).</span>
rect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=<span>0</span>)            <span># Also polygon(&lt;Surf&gt;, color, points, width=0).</span>
</code></pre>
<div><h3 id="font">Font</h3><pre><code>&lt;Font&gt; = pg.font.Font(&lt;path/file&gt;, size)        <span># Loads TTF file. Pass None for default font.</span>
&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  <span># Background color can be specified at the end.</span>
</code></pre></div>

<div><h3 id="sound">Sound</h3><pre><code>&lt;Sound&gt; = pg.mixer.Sound(&lt;path/file/bytes&gt;)     <span># Loads WAV file or array of signed shorts.</span>
&lt;Sound&gt;.play/stop()                             <span># Also &lt;Sound&gt;.set_volume(&lt;float&gt;).</span>
</code></pre></div>

<div><h3 id="basicmariobrothersexample">Basic Mario Brothers Example</h3><pre><code><span>import</span> collections, dataclasses, enum, io, itertools <span>as</span> it, pygame <span>as</span> pg, urllib.request
<span>from</span> random <span>import</span> randint

P = collections.namedtuple(<span>'P'</span>, <span>'x y'</span>)          <span># Position</span>
D = enum.Enum(<span>'D'</span>, <span>'n e s w'</span>)                   <span># Direction</span>
W, H, MAX_S = <span>50</span>, <span>50</span>, P(<span>5</span>, <span>10</span>)                  <span># Width, Height, Max speed</span>

<span><span>def</span> <span>main</span><span>()</span>:</span>
    <span><span>def</span> <span>get_screen</span><span>()</span>:</span>
        pg.init()
        <span>return</span> pg.display.set_mode((W*<span>16</span>, H*<span>16</span>))
    <span><span>def</span> <span>get_images</span><span>()</span>:</span>
        url = <span>'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'</span>
        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))
        <span>return</span> [img.subsurface(get_rect(x, <span>0</span>)) <span>for</span> x <span>in</span> range(img.get_width() // <span>16</span>)]
    <span><span>def</span> <span>get_mario</span><span>()</span>:</span>
        Mario = dataclasses.make_dataclass(<span>'Mario'</span>, <span>'rect spd facing_left frame_cycle'</span>.split())
        <span>return</span> Mario(get_rect(<span>1</span>, <span>1</span>), P(<span>0</span>, <span>0</span>), <span>False</span>, it.cycle(range(<span>3</span>)))
    <span><span>def</span> <span>get_tiles</span><span>()</span>:</span>
        border = [(x, y) <span>for</span> x <span>in</span> range(W) <span>for</span> y <span>in</span> range(H) <span>if</span> x <span>in</span> [<span>0</span>, W-<span>1</span>] <span>or</span> y <span>in</span> [<span>0</span>, H-<span>1</span>]]
        platforms = [(randint(<span>1</span>, W-<span>2</span>), randint(<span>2</span>, H-<span>2</span>)) <span>for</span> _ <span>in</span> range(W*H // <span>10</span>)]
        <span>return</span> [get_rect(x, y) <span>for</span> x, y <span>in</span> border + platforms]
    <span><span>def</span> <span>get_rect</span><span>(x, y)</span>:</span>
        <span>return</span> pg.Rect(x*<span>16</span>, y*<span>16</span>, <span>16</span>, <span>16</span>)
    run(get_screen(), get_images(), get_mario(), get_tiles())

<span><span>def</span> <span>run</span><span>(screen, images, mario, tiles)</span>:</span>
    clock = pg.time.Clock()
    pressed = set()
    <span>while</span> <span>not</span> pg.event.get(pg.QUIT) <span>and</span> clock.tick(<span>28</span>):
        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}
        pressed |= {keys.get(e.key) <span>for</span> e <span>in</span> pg.event.get(pg.KEYDOWN)}
        pressed -= {keys.get(e.key) <span>for</span> e <span>in</span> pg.event.get(pg.KEYUP)}
        update_speed(mario, tiles, pressed)
        update_position(mario, tiles)
        draw(screen, images, mario, tiles, pressed)

<span><span>def</span> <span>update_speed</span><span>(mario, tiles, pressed)</span>:</span>
    x, y = mario.spd
    x += <span>2</span> * ((D.e <span>in</span> pressed) - (D.w <span>in</span> pressed))
    x += (x &lt; <span>0</span>) - (x &gt; <span>0</span>)
    y += <span>1</span> <span>if</span> D.s <span>not</span> <span>in</span> get_boundaries(mario.rect, tiles) <span>else</span> (D.n <span>in</span> pressed) * <span>-10</span>
    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))

<span><span>def</span> <span>update_position</span><span>(mario, tiles)</span>:</span>
    x, y = mario.rect.topleft
    n_steps = max(abs(s) <span>for</span> s <span>in</span> mario.spd)
    <span>for</span> _ <span>in</span> range(n_steps):
        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))
        mario.rect.topleft = x, y = x + (mario.spd.x / n_steps), y + (mario.spd.y / n_steps)

<span><span>def</span> <span>get_boundaries</span><span>(rect, tiles)</span>:</span>
    deltas = {D.n: P(<span>0</span>, <span>-1</span>), D.e: P(<span>1</span>, <span>0</span>), D.s: P(<span>0</span>, <span>1</span>), D.w: P(<span>-1</span>, <span>0</span>)}
    <span>return</span> {d <span>for</span> d, delta <span>in</span> deltas.items() <span>if</span> rect.move(delta).collidelist(tiles) != <span>-1</span>}

<span><span>def</span> <span>stop_on_collision</span><span>(spd, bounds)</span>:</span>
    <span>return</span> P(x=<span>0</span> <span>if</span> (D.w <span>in</span> bounds <span>and</span> spd.x &lt; <span>0</span>) <span>or</span> (D.e <span>in</span> bounds <span>and</span> spd.x &gt; <span>0</span>) <span>else</span> spd.x,
             y=<span>0</span> <span>if</span> (D.n <span>in</span> bounds <span>and</span> spd.y &lt; <span>0</span>) <span>or</span> (D.s <span>in</span> bounds <span>and</span> spd.y &gt; <span>0</span>) <span>else</span> spd.y)

<span><span>def</span> <span>draw</span><span>(screen, images, mario, tiles, pressed)</span>:</span>
    <span><span>def</span> <span>get_marios_image_index</span><span>()</span>:</span>
        <span>if</span> D.s <span>not</span> <span>in</span> get_boundaries(mario.rect, tiles):
            <span>return</span> <span>4</span>
        <span>return</span> next(mario.frame_cycle) <span>if</span> {D.w, D.e} &amp; pressed <span>else</span> <span>6</span>
    screen.fill((<span>85</span>, <span>168</span>, <span>255</span>))
    mario.facing_left = (D.w <span>in</span> pressed) <span>if</span> {D.w, D.e} &amp; pressed <span>else</span> mario.facing_left
    screen.blit(images[get_marios_image_index() + mario.facing_left * <span>9</span>], mario.rect)
    <span>for</span> t <span>in</span> tiles:
        screen.blit(images[<span>18</span> <span>if</span> t.x <span>in</span> [<span>0</span>, (W-<span>1</span>)*<span>16</span>] <span>or</span> t.y <span>in</span> [<span>0</span>, (H-<span>1</span>)*<span>16</span>] <span>else</span> <span>19</span>], t)
    pg.display.flip()

<span>if</span> __name__ == <span>'__main__'</span>:
    main()
</code></pre></div>

<div><h2 id="pandas"><a href="#pandas" name="pandas">#</a>Pandas</h2><pre><code><span># $ pip3 install pandas matplotlib</span>
<span>import</span> pandas <span>as</span> pd, matplotlib.pyplot <span>as</span> plt
</code></pre></div>

<div><h3 id="series">Series</h3><p><strong>Ordered dictionary with a name.</strong></p><pre><code><span>&gt;&gt;&gt; </span>pd.Series([<span>1</span>, <span>2</span>], index=[<span>'x'</span>, <span>'y'</span>], name=<span>'a'</span>)
x    <span>1</span>
y    <span>2</span>
Name: a, dtype: int64
</code></pre></div>


<pre><code>&lt;Sr&gt; = pd.Series(&lt;list&gt;)                       <span># Assigns RangeIndex starting at 0.</span>
&lt;Sr&gt; = pd.Series(&lt;dict&gt;)                       <span># Takes dictionary's keys for index.</span>
&lt;Sr&gt; = pd.Series(&lt;dict/Series&gt;, index=&lt;list&gt;)  <span># Only keeps items with keys specified in index.</span>
</code></pre>
<pre><code>&lt;el&gt; = &lt;Sr&gt;.loc[key]                           <span># Or: &lt;Sr&gt;.iloc[index]</span>
&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          <span># Or: &lt;Sr&gt;.iloc[indexes]</span>
&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   <span># Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]</span>
</code></pre>
<pre><code>&lt;el&gt; = &lt;Sr&gt;[key/index]                         <span># Or: &lt;Sr&gt;.key</span>
&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      <span># Or: &lt;Sr&gt;[&lt;keys_slice/slice&gt;]</span>
&lt;Sr&gt; = &lt;Sr&gt;[bools]                             <span># Or: &lt;Sr&gt;.loc/iloc[bools]</span>
</code></pre>
<pre><code>&lt;Sr&gt; = &lt;Sr&gt; &gt;&lt;== &lt;el/Sr&gt;                       <span># Returns a Series of bools.</span>
&lt;Sr&gt; = &lt;Sr&gt; +-*/ &lt;el/Sr&gt;                       <span># Items with non-matching keys get value NaN.</span>
</code></pre>
<pre><code>&lt;Sr&gt; = pd.concat(&lt;coll_of_Sr&gt;)                 <span># Concats multiple Series into one long Series.</span>
&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                <span># Adds items that are not yet present.</span>
&lt;Sr&gt;.update(&lt;Sr&gt;)                              <span># Updates items that are already present.</span>
</code></pre>
<pre><code>&lt;Sr&gt;.plot.line/area/bar/pie/hist()             <span># Generates a Matplotlib plot.</span>
plt.show()                                     <span># Displays the plot. Also plt.savefig(&lt;path&gt;).</span>
</code></pre>
<div><h4 id="seriesaggregatetransformmap">Series ‚Äî Aggregate, Transform, Map:</h4><pre><code>&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          <span># Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span>
&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interpl()   <span># Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       <span># Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>sr = pd.Series([<span>1</span>, <span>2</span>], index=[<span>'x'</span>, <span>'y'</span>])
x    <span>1</span>
y    <span>2</span>
</code></pre>
<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ               ‚îÇ    <span>'sum'</span>    ‚îÇ   [<span>'sum'</span>]   ‚îÇ {<span>'s'</span>: <span>'sum'</span>}  ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ sr.apply(‚Ä¶)   ‚îÇ      <span>3</span>      ‚îÇ    sum  <span>3</span>   ‚îÇ     s  <span>3</span>      ‚îÉ
‚îÉ sr.agg(‚Ä¶)     ‚îÇ             ‚îÇ             ‚îÇ               ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ               ‚îÇ    <span>'rank'</span>   ‚îÇ   [<span>'rank'</span>]  ‚îÇ {<span>'r'</span>: <span>'rank'</span>} ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ sr.apply(‚Ä¶)   ‚îÇ             ‚îÇ      rank   ‚îÇ               ‚îÉ
‚îÉ sr.agg(‚Ä¶)     ‚îÇ     x  <span>1</span>    ‚îÇ   x     <span>1</span>   ‚îÇ    r  x  <span>1</span>    ‚îÉ
‚îÉ               ‚îÇ     y  <span>2</span>    ‚îÇ   y     <span>2</span>   ‚îÇ       y  <span>2</span>    ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>

<ul>
<li><strong>Keys/indexes/bools can't be tuples because <code><span>'obj[x, y]'</span></code> is converted to <code><span>'obj[(x, y)]'</span></code>!</strong></li>
<li><strong>Methods ffill(), interpolate(), fillna() and dropna() accept <code><span>'inplace=True'</span></code>.</strong></li>
<li><strong>Last result has a hierarchical index. Use <code><span>'&lt;Sr&gt;[key_1, key_2]'</span></code> to get its values.</strong></li>
</ul>
<div><h3 id="dataframe">DataFrame</h3><p><strong>Table with labeled rows and columns.</strong></p><pre><code><span>&gt;&gt;&gt; </span>pd.DataFrame([[<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>]], index=[<span>'a'</span>, <span>'b'</span>], columns=[<span>'x'</span>, <span>'y'</span>])
   x  y
a  <span>1</span>  <span>2</span>
b  <span>3</span>  <span>4</span>
</code></pre></div>


<pre><code>&lt;DF&gt;    = pd.DataFrame(&lt;list_of_rows&gt;)         <span># Rows can be either lists, dicts or series.</span>
&lt;DF&gt;    = pd.DataFrame(&lt;dict_of_columns&gt;)      <span># Columns can be either lists, dicts or series.</span>
</code></pre>
<pre><code>&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        <span># Or: &lt;DF&gt;.iloc[row_index, column_index]</span>
&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  <span># Or: &lt;DF&gt;.iloc[row_index/es]</span>
&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            <span># Or: &lt;DF&gt;.iloc[:, column_index/es]</span>
&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    <span># Or: &lt;DF&gt;.iloc[row_bools, column_bools]</span>
</code></pre>
<pre><code>&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   <span># Or: &lt;DF&gt;.column_key</span>
&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      <span># Keeps rows as specified by bools.</span>
&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  <span># Assigns NaN to False values.</span>
</code></pre>
<pre><code>&lt;DF&gt;    = &lt;DF&gt; &gt;&lt;== &lt;el/Sr/DF&gt;                 <span># Returns DF of bools. Sr is treated as a row.</span>
&lt;DF&gt;    = &lt;DF&gt; +-*/ &lt;el/Sr/DF&gt;                 <span># Items with non-matching keys get value NaN.</span>
</code></pre>
<pre><code>&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           <span># Replaces row keys with values from a column.</span>
&lt;DF&gt;    = &lt;DF&gt;.reset_index(drop=<span>False</span>)         <span># Drops or moves row keys to column named index.</span>
&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=<span>True</span>)      <span># Sorts rows by row keys. Use `axis=1` for cols.</span>
&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       <span># Sorts rows by the passed column/s. Same.</span>
</code></pre>
<div><h4 id="dataframemergejoinconcat">DataFrame ‚Äî Merge, Join, Concat:</h4><pre><code><span>&gt;&gt;&gt; </span>l = pd.DataFrame([[<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>]], index=[<span>'a'</span>, <span>'b'</span>], columns=[<span>'x'</span>, <span>'y'</span>])
   x  y
a  <span>1</span>  <span>2</span>
b  <span>3</span>  <span>4</span>
<span>&gt;&gt;&gt; </span>r = pd.DataFrame([[<span>4</span>, <span>5</span>], [<span>6</span>, <span>7</span>]], index=[<span>'b'</span>, <span>'c'</span>], columns=[<span>'y'</span>, <span>'z'</span>])
   y  z
b  <span>4</span>  <span>5</span>
c  <span>6</span>  <span>7</span>
</code></pre></div>

<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                        ‚îÇ    <span>'outer'</span>    ‚îÇ   <span>'inner'</span>  ‚îÇ   <span>'left'</span>   ‚îÇ       Description        ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ l.merge(r, on=<span>'y'</span>,     ‚îÇ    x   y   z  ‚îÇ x   y   z  ‚îÇ x   y   z  ‚îÇ Merges on column if <span>'on'</span> ‚îÉ
‚îÉ            how=‚Ä¶)      ‚îÇ <span>0</span>  <span>1</span>   <span>2</span>   .  ‚îÇ <span>3</span>   <span>4</span>   <span>5</span>  ‚îÇ <span>1</span>   <span>2</span>   .  ‚îÇ or <span>'left/right_on'</span> are   ‚îÉ
‚îÉ                        ‚îÇ <span>1</span>  <span>3</span>   <span>4</span>   <span>5</span>  ‚îÇ            ‚îÇ <span>3</span>   <span>4</span>   <span>5</span>  ‚îÇ set, else on shared cols.‚îÉ
‚îÉ                        ‚îÇ <span>2</span>  .   <span>6</span>   <span>7</span>  ‚îÇ            ‚îÇ            ‚îÇ Uses <span>'inner'</span> by default. ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ l.join(r, lsuffix=<span>'l'</span>, ‚îÇ    x yl yr  z ‚îÇ            ‚îÇ x yl yr  z ‚îÇ Merges on row keys.      ‚îÉ
‚îÉ           rsuffix=<span>'r'</span>, ‚îÇ a  <span>1</span>  <span>2</span>  .  . ‚îÇ x yl yr  z ‚îÇ <span>1</span>  <span>2</span>  .  . ‚îÇ Uses <span>'left'</span> by default.  ‚îÉ
‚îÉ           how=‚Ä¶)       ‚îÇ b  <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> ‚îÇ <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> ‚îÇ <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> ‚îÇ If r is a Series, it is  ‚îÉ
‚îÉ                        ‚îÇ c  .  .  <span>6</span>  <span>7</span> ‚îÇ            ‚îÇ            ‚îÇ treated as a column.     ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ pd.concat([l, r],      ‚îÇ    x   y   z  ‚îÇ     y      ‚îÇ            ‚îÇ Adds rows at the bottom. ‚îÉ
‚îÉ           axis=<span>0</span>,      ‚îÇ a  <span>1</span>   <span>2</span>   .  ‚îÇ     <span>2</span>      ‚îÇ            ‚îÇ Uses <span>'outer'</span> by default. ‚îÉ
‚îÉ           join=‚Ä¶)      ‚îÇ b  <span>3</span>   <span>4</span>   .  ‚îÇ     <span>4</span>      ‚îÇ            ‚îÇ A Series is treated as a ‚îÉ
‚îÉ                        ‚îÇ b  .   <span>4</span>   <span>5</span>  ‚îÇ     <span>4</span>      ‚îÇ            ‚îÇ column. To add a row use ‚îÉ
‚îÉ                        ‚îÇ c  .   <span>6</span>   <span>7</span>  ‚îÇ     <span>6</span>      ‚îÇ            ‚îÇ pd.concat([l, DF([sr])]).‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ pd.concat([l, r],      ‚îÇ    x  y  y  z ‚îÇ            ‚îÇ            ‚îÇ Adds columns at the      ‚îÉ
‚îÉ           axis=<span>1</span>,      ‚îÇ a  <span>1</span>  <span>2</span>  .  . ‚îÇ x  y  y  z ‚îÇ            ‚îÇ right end. Uses <span>'outer'</span>  ‚îÉ
‚îÉ           join=‚Ä¶)      ‚îÇ b  <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> ‚îÇ <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> ‚îÇ            ‚îÇ by default. A Series is  ‚îÉ
‚îÉ                        ‚îÇ c  .  .  <span>6</span>  <span>7</span> ‚îÇ            ‚îÇ            ‚îÇ treated as a column.     ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ l.combine_first(r)     ‚îÇ    x   y   z  ‚îÇ            ‚îÇ            ‚îÇ Adds missing rows and    ‚îÉ
‚îÉ                        ‚îÇ a  <span>1</span>   <span>2</span>   .  ‚îÇ            ‚îÇ            ‚îÇ columns. Also updates    ‚îÉ
‚îÉ                        ‚îÇ b  <span>3</span>   <span>4</span>   <span>5</span>  ‚îÇ            ‚îÇ            ‚îÇ items that contain NaN.  ‚îÉ
‚îÉ                        ‚îÇ c  .   <span>6</span>   <span>7</span>  ‚îÇ            ‚îÇ            ‚îÇ R must be a DataFrame.   ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<div><h4 id="dataframeaggregatetransformmap">DataFrame ‚Äî Aggregate, Transform, Map:</h4><pre><code>&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          <span># Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span>
&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpl()   <span># Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       <span># Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)</span>
</code></pre></div>

<ul>
<li><strong>All operations operate on columns by default. Pass <code><span>'axis=1'</span></code> to process the rows instead.</strong></li>
</ul>
<pre><code><span>&gt;&gt;&gt; </span>df = pd.DataFrame([[<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>]], index=[<span>'a'</span>, <span>'b'</span>], columns=[<span>'x'</span>, <span>'y'</span>])
   x  y
a  <span>1</span>  <span>2</span>
b  <span>3</span>  <span>4</span>
</code></pre>
<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                 ‚îÇ    <span>'sum'</span>    ‚îÇ   [<span>'sum'</span>]   ‚îÇ {<span>'x'</span>: <span>'sum'</span>}  ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ df.apply(‚Ä¶)     ‚îÇ             ‚îÇ       x  y  ‚îÇ               ‚îÉ
‚îÉ df.agg(‚Ä¶)       ‚îÇ     x  <span>4</span>    ‚îÇ  sum  <span>4</span>  <span>6</span>  ‚îÇ     x  <span>4</span>      ‚îÉ
‚îÉ                 ‚îÇ     y  <span>6</span>    ‚îÇ             ‚îÇ               ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                 ‚îÇ    <span>'rank'</span>   ‚îÇ   [<span>'rank'</span>]  ‚îÇ {<span>'x'</span>: <span>'rank'</span>} ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ df.apply(‚Ä¶)     ‚îÇ      x  y   ‚îÇ      x    y ‚îÇ        x      ‚îÉ
‚îÉ df.agg(‚Ä¶)       ‚îÇ   a  <span>1</span>  <span>1</span>   ‚îÇ   rank rank ‚îÇ     a  <span>1</span>      ‚îÉ
‚îÉ df.transform(‚Ä¶) ‚îÇ   b  <span>2</span>  <span>2</span>   ‚îÇ a    <span>1</span>    <span>1</span> ‚îÇ     b  <span>2</span>      ‚îÉ
‚îÉ                 ‚îÇ             ‚îÇ b    <span>2</span>    <span>2</span> ‚îÇ               ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>

<ul>
<li><strong>Use <code><span>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</span></code> to get the fifth result's values.</strong></li>
</ul>
<div><h4 id="dataframeplotencodedecode">DataFrame ‚Äî Plot, Encode, Decode:</h4><pre><code>&lt;DF&gt;.plot.line/area/bar/hist/scatter/box()     <span># Also: `x=column_key, y=column_key/s`.</span>
plt.show()                                     <span># Displays the plot. Also plt.savefig(&lt;path&gt;).</span>
</code></pre></div>

<pre><code>&lt;DF&gt; = pd.read_json/html(<span>'&lt;str/path/url&gt;'</span>)     <span># Run `$ pip3 install beautifulsoup4 lxml`.</span>
&lt;DF&gt; = pd.read_csv/pickle/excel(<span>'&lt;path/url&gt;'</span>)  <span># Use `sheet_name=None` to get all Excel sheets.</span>
&lt;DF&gt; = pd.read_sql(<span>'&lt;table/query&gt;'</span>, &lt;conn.&gt;)   <span># Accepts SQLite3 or SQLAlchemy connection.</span>
&lt;DF&gt; = pd.read_clipboard()                     <span># Reads a copied table from the clipboard.</span>
</code></pre>
<pre><code>&lt;dict&gt; = &lt;DF&gt;.to_dict([<span>'d/l/s/‚Ä¶'</span>])             <span># Returns columns as dicts, lists or series.</span>
&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       <span># Also to_markdown/latex([&lt;path&gt;]).</span>
&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   <span># Run `$ pip3 install "pandas[excel]" odfpy`.</span>
&lt;DF&gt;.to_sql(<span>'&lt;table_name&gt;'</span>, &lt;connection&gt;)      <span># Accepts SQLite3 or SQLAlchemy connection.</span>
</code></pre>
<div><h3 id="groupby">GroupBy</h3><p><strong>Object that groups together rows of a dataframe based on the value of the passed column.</strong></p><pre><code><span>&gt;&gt;&gt; </span>df = pd.DataFrame([[<span>1</span>, <span>2</span>, <span>3</span>], [<span>4</span>, <span>5</span>, <span>6</span>], [<span>7</span>, <span>8</span>, <span>6</span>]], list(<span>'abc'</span>), list(<span>'xyz'</span>))
<span>&gt;&gt;&gt; </span>df.groupby(<span>'z'</span>).get_group(<span>6</span>)
   x  y  z
b  <span>4</span>  <span>5</span>  <span>6</span>
c  <span>7</span>  <span>8</span>  <span>6</span>
</code></pre></div>


<pre><code>&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              <span># Splits DF into groups based on passed column.</span>
&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      <span># Maps each group. Func can return DF, Sr or el.</span>
&lt;GB&gt; = &lt;GB&gt;[column_key]                        <span># Single column GB. All operations return a Sr.</span>
</code></pre>
<div><h4 id="groupbyaggregatetransformmap">GroupBy ‚Äî Aggregate, Transform, Map:</h4><pre><code>&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          <span># Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span>
&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           <span># Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       <span># Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>gb = df.groupby(<span>'z'</span>)
      x  y  z
<span>3</span>: a  <span>1</span>  <span>2</span>  <span>3</span>
<span>6</span>: b  <span>4</span>  <span>5</span>  <span>6</span>
   c  <span>7</span>  <span>8</span>  <span>6</span>
</code></pre>
<pre><code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                 ‚îÇ    <span>'sum'</span>    ‚îÇ    <span>'rank'</span>   ‚îÇ   [<span>'rank'</span>]  ‚îÇ {<span>'x'</span>: <span>'rank'</span>} ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ gb.agg(‚Ä¶)       ‚îÇ      x   y  ‚îÇ      x  y   ‚îÇ      x    y ‚îÇ        x      ‚îÉ
‚îÉ                 ‚îÇ  z          ‚îÇ   a  <span>1</span>  <span>1</span>   ‚îÇ   rank rank ‚îÇ     a  <span>1</span>      ‚îÉ
‚îÉ                 ‚îÇ  <span>3</span>   <span>1</span>   <span>2</span>  ‚îÇ   b  <span>1</span>  <span>1</span>   ‚îÇ a    <span>1</span>    <span>1</span> ‚îÇ     b  <span>1</span>      ‚îÉ
‚îÉ                 ‚îÇ  <span>6</span>  <span>11</span>  <span>13</span>  ‚îÇ   c  <span>2</span>  <span>2</span>   ‚îÇ b    <span>1</span>    <span>1</span> ‚îÇ     c  <span>2</span>      ‚îÉ
‚îÉ                 ‚îÇ             ‚îÇ             ‚îÇ c    <span>2</span>    <span>2</span> ‚îÇ               ‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ gb.transform(‚Ä¶) ‚îÇ      x   y  ‚îÇ      x  y   ‚îÇ             ‚îÇ               ‚îÉ
‚îÉ                 ‚îÇ  a   <span>1</span>   <span>2</span>  ‚îÇ   a  <span>1</span>  <span>1</span>   ‚îÇ             ‚îÇ               ‚îÉ
‚îÉ                 ‚îÇ  b  <span>11</span>  <span>13</span>  ‚îÇ   b  <span>1</span>  <span>1</span>   ‚îÇ             ‚îÇ               ‚îÉ
‚îÉ                 ‚îÇ  c  <span>11</span>  <span>13</span>  ‚îÇ   c  <span>2</span>  <span>2</span>   ‚îÇ             ‚îÇ               ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
</code></pre>
<div><h3 id="rolling">Rolling</h3><p><strong>Object for rolling window calculations.</strong></p><pre><code>&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   <span># Also: `min_periods=None, center=False`.</span>
&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        <span># Or: &lt;RDF/RGB&gt;.column_key</span>
&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             <span># Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)</span>
</code></pre></div>


<div><h2 id="plotly"><a href="#plotly" name="plotly">#</a>Plotly</h2><pre><code><span># $ pip3 install plotly kaleido</span>
<span>from</span> plotly.express <span>import</span> line
&lt;Figure&gt; = line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)           <span># Or: line(x=&lt;list&gt;, y=&lt;list&gt;)</span>
&lt;Figure&gt;.update_layout(margin=dict(t=<span>0</span>, r=<span>0</span>, b=<span>0</span>, l=<span>0</span>), ‚Ä¶)  <span># `paper_bgcolor='rgb(0, 0, 0)'`.</span>
&lt;Figure&gt;.write_html/json/image(<span>'&lt;path&gt;'</span>)                    <span># Also &lt;Figure&gt;.show().</span>
</code></pre></div>

<div><h4 id="displaysalinechartoftotalcoronavirusdeathspermilliongroupedbycontinent">Displays a line chart of total coronavirus deaths per million grouped by continent:</h4><pre><code>covid = pd.read_csv(<span>'https://covid.ourworldindata.org/data/owid-covid-data.csv'</span>,
                    usecols=[<span>'iso_code'</span>, <span>'date'</span>, <span>'total_deaths'</span>, <span>'population'</span>])
continents = pd.read_csv(<span>'https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff'</span>
                         <span>'846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv'</span>,
                         usecols=[<span>'Three_Letter_Country_Code'</span>, <span>'Continent_Name'</span>])
df = pd.merge(covid, continents, left_on=<span>'iso_code'</span>, right_on=<span>'Three_Letter_Country_Code'</span>)
df = df.groupby([<span>'Continent_Name'</span>, <span>'date'</span>]).sum().reset_index()
df[<span>'Total Deaths per Million'</span>] = df.total_deaths * <span>1e6</span> / df.population
df = df[df.date &gt; <span>'2020-03-14'</span>]
df = df.rename({<span>'date'</span>: <span>'Date'</span>, <span>'Continent_Name'</span>: <span>'Continent'</span>}, axis=<span>'columns'</span>)
line(df, x=<span>'Date'</span>, y=<span>'Total Deaths per Million'</span>, color=<span>'Continent'</span>).show()
</code></pre></div>



<div><h4 id="displaysamultiaxislinechartoftotalcoronaviruscasesandchangesinpricesofbitcoindowjonesandgold">Displays a multi-axis line chart of total coronavirus cases and changes in prices of Bitcoin, Dow Jones and gold:</h4><pre><code><span>import</span> pandas <span>as</span> pd, plotly.graph_objects <span>as</span> go

<span><span>def</span> <span>main</span><span>()</span>:</span>
    display_data(wrangle_data(*scrape_data()))

<span><span>def</span> <span>scrape_data</span><span>()</span>:</span>
    <span><span>def</span> <span>scrape_covid</span><span>()</span>:</span>
        url = <span>'https://covid.ourworldindata.org/data/owid-covid-data.csv'</span>
        df = pd.read_csv(url, usecols=[<span>'location'</span>, <span>'date'</span>, <span>'total_cases'</span>])
        <span>return</span> df[df.location == <span>'World'</span>].set_index(<span>'date'</span>).total_cases
    <span><span>def</span> <span>scrape_yahoo</span><span>(slug)</span>:</span>
        url = (<span>f'https://query1.finance.yahoo.com/v7/finance/download/<span>{slug}</span>?'</span>
               <span>'period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history'</span>)
        df = pd.read_csv(url, usecols=[<span>'Date'</span>, <span>'Close'</span>])
        <span>return</span> df.set_index(<span>'Date'</span>).Close
    out = scrape_covid(), scrape_yahoo(<span>'BTC-USD'</span>), scrape_yahoo(<span>'GC=F'</span>), scrape_yahoo(<span>'^DJI'</span>)
    <span>return</span> map(pd.Series.rename, out, [<span>'Total Cases'</span>, <span>'Bitcoin'</span>, <span>'Gold'</span>, <span>'Dow Jones'</span>])

<span><span>def</span> <span>wrangle_data</span><span>(covid, bitcoin, gold, dow)</span>:</span>
    df = pd.concat([bitcoin, gold, dow], axis=<span>1</span>)  <span># Joins columns on dates.</span>
    df = df.sort_index().interpolate()            <span># Sorts by date and interpolates NaN-s.</span>
    df = df.loc[<span>'2020-02-23'</span>:]                    <span># Discards rows before '2020-02-23'.</span>
    df = (df / df.iloc[<span>0</span>]) * <span>100</span>                  <span># Calculates percentages relative to day 1.</span>
    df = df.join(covid)                           <span># Adds column with covid cases.</span>
    <span>return</span> df.sort_values(df.index[<span>-1</span>], axis=<span>1</span>)   <span># Sorts columns by last day's value.</span>

<span><span>def</span> <span>display_data</span><span>(df)</span>:</span>
    figure = go.Figure()
    <span>for</span> col_name <span>in</span> reversed(df.columns):
        yaxis = <span>'y1'</span> <span>if</span> col_name == <span>'Total Cases'</span> <span>else</span> <span>'y2'</span>
        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)
        figure.add_trace(trace)
    figure.update_layout(
        yaxis1=dict(title=<span>'Total Cases'</span>, rangemode=<span>'tozero'</span>),
        yaxis2=dict(title=<span>'%'</span>, rangemode=<span>'tozero'</span>, overlaying=<span>'y'</span>, side=<span>'right'</span>),
        legend=dict(x=<span>1.1</span>),
        height=<span>450</span>
    )
    figure.show()

<span>if</span> __name__ == <span>'__main__'</span>:
    main()
</code></pre></div>



<div><h2 id="pysimplegui"><a href="#pysimplegui" name="pysimplegui">#</a>PySimpleGUI</h2><pre><code><span># $ pip3 install PySimpleGUI</span>
<span>import</span> PySimpleGUI <span>as</span> sg

layout = [[sg.Text(<span>"What's your name?"</span>)], [sg.Input()], [sg.Button(<span>'Ok'</span>)]]
window = sg.Window(<span>'Window Title'</span>, layout)
event, values = window.read()
print(<span>f'Hello <span>{values[<span>0</span>]}</span>!'</span> <span>if</span> event == <span>'Ok'</span> <span>else</span> <span>''</span>)
</code></pre></div>

<div><h2 id="appendix"><a href="#appendix" name="appendix">#</a>Appendix</h2><div><h3 id="cython">Cython</h3><p><strong>Library that compiles Python code into C.</strong></p><pre><code><span># $ pip3 install cython</span>
<span>import</span> pyximport; pyximport.install()
<span>import</span> &lt;cython_script&gt;
&lt;cython_script&gt;.main()
</code></pre></div></div>



<div><h4 id="definitions">Definitions:</h4><ul>
<li><strong>All <code><span>'cdef'</span></code> definitions are optional, but they contribute to the speed-up.</strong></li>
<li><strong>Script needs to be saved with a <code><span>'pyx'</span></code> extension.</strong></li>
</ul><pre><code>cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;
cdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el&gt;, &lt;el&gt;, ...]
cdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...
</code></pre></div>


<pre><code>cdef <span><span>class</span> &lt;<span>class_name</span>&gt;:</span>
    cdef public &lt;ctype&gt; &lt;attr_name&gt;
    <span><span>def</span> <span>__init__</span><span>(self, &lt;ctype&gt; &lt;arg_name&gt;)</span>:</span>
        self.&lt;attr_name&gt; = &lt;arg_name&gt;
</code></pre>
<pre><code>cdef enum &lt;enum_name&gt;: &lt;member_name&gt;, &lt;member_name&gt;, ...
</code></pre>
<div><h3 id="pyinstaller">PyInstaller</h3><pre><code>$ pip3 install pyinstaller
$ pyinstaller script.py                        <span># Compiles into './dist/script' directory.</span>
$ pyinstaller script.py --onefile              <span># Compiles into './dist/script' console app.</span>
$ pyinstaller script.py --windowed             <span># Compiles into './dist/script' windowed app.</span>
$ pyinstaller script.py --add-data '&lt;path&gt;:.'  <span># Adds file to the root of the executable.</span>
</code></pre></div>

<ul>
<li><strong>File paths need to be updated to <code><span>'os.path.join(sys._MEIPASS, &lt;path&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="basicscripttemplate">Basic Script Template</h3><pre><code><span>#!/usr/bin/env python3</span>
<span>#</span>
<span># Usage: .py</span>
<span>#</span>

<span>from</span> sys <span>import</span> argv, exit
<span>from</span> collections <span>import</span> defaultdict, namedtuple
<span>from</span> dataclasses <span>import</span> make_dataclass
<span>from</span> enum <span>import</span> Enum
<span>import</span> functools <span>as</span> ft, itertools <span>as</span> it, operator <span>as</span> op, re


<span><span>def</span> <span>main</span><span>()</span>:</span>
    <span>pass</span>


<span>###</span>
<span>##  UTIL</span>
<span>#</span>

<span><span>def</span> <span>read_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>) <span>as</span> file:
        <span>return</span> file.readlines()


<span>if</span> __name__ == <span>'__main__'</span>:
    main()
</code></pre></div>

<div><h2 id="index"><a href="#index" name="index">#</a>Index</h2><ul><li><strong>Only available in the <a href="https://transactions.sendowl.com/products/78175486/4422834F/view">PDF</a>.</strong></li>
<li><strong>Ctrl+F / ‚åòF is usually sufficient.</strong></li>
<li><strong>Searching <code><span>'#&lt;title&gt;'</span></code> will limit the search to the titles.</strong></li>
</ul></div>
 

  

  <span><i></i></span>

  
  
  
  
  
  



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lit: Simple, fast web components (170 pts)]]></title>
            <link>https://lit.dev/</link>
            <guid>36806747</guid>
            <pubDate>Thu, 20 Jul 2023 21:05:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lit.dev/">https://lit.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=36806747">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><section id="intro"><div id="splashLogo" role="heading" aria-level="1"><p><img fetchpriority="high" src="https://lit.dev/images/logo.svg" aria-label="Lit" width="425" height="200"></p></div><p id="tagline"><span>Simple.</span> <span>Fast.</span> <span>Web Components.</span></p></section><div id="advantages"><div><div><p><img fetchpriority="high" loading="lazy" src="https://lit.dev/images/home/standards.svg" width="300" height="300" alt=""></p><h2>Simple</h2></div><p>Skip the boilerplate</p><p>Building on top of the Web Components standards, Lit adds just what you need to be happy and productive: reactivity, declarative templates and a handful of thoughtful features to reduce boilerplate and make your job easier. Every Lit feature is carefully designed with web platform evolution in mind.</p></div><div><div><p><img fetchpriority="high" loading="lazy" src="https://lit.dev/images/home/lightning.svg" width="300" height="300" alt=""></p><h2>Fast</h2></div><p>Tiny footprint, instant updates</p><p>Weighing in at around 5 KB (minified and compressed), Lit helps keep your bundle size small and your loading time short. And rendering is blazing fast, because Lit touches only the dynamic parts of your UI when updating ‚Äî no need to rebuild a virtual tree and diff it with the DOM.</p></div><div><div><p><img fetchpriority="high" loading="lazy" src="https://lit.dev/images/home/future.svg" width="300" height="300" alt=""></p><h2>Web Components</h2></div><p>Interoperable &amp; future-ready</p><p>Every Lit component is a native web component, with the superpower of interoperability. Web components work anywhere you use HTML, with any framework or none at all. This makes Lit ideal for building shareable components, design systems, or maintainable, future-ready sites and apps.</p></div></div><div id="tour"><div id="tourCode"><litdev-code-language-switch></litdev-code-language-switch><div id="tourTsCode"><figure><pre role="presentation"><span role="presentation"><span>import</span> {<span>html</span>, <span>css</span>, <span>LitElement</span>} <span>from</span> <span>'lit'</span>;</span></pre><pre role="presentation"><span role="presentation"><span>import</span> {<span>customElement</span>, <span>property</span>} <span>from</span> <span>'lit/decorators.js'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">@<span>customElement</span>(<span>'simple-greeting'</span>)</span></pre><pre role="presentation"><span role="presentation"><span>export</span> <span>class</span> <span>SimpleGreeting</span> <span>extends</span> <span>LitElement</span> {</span></pre><pre role="presentation"><span role="presentation">  <span>static</span> <span>styles</span> <span>=</span> <span>css</span><span>`</span><span>p</span> { <span>color</span>: <span>blue</span> }<span>`</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  @<span>property</span>()</span></pre><pre role="presentation"><span role="presentation">  <span>name</span> <span>=</span> <span>'Somebody'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>render</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>return</span> <span>html</span><span>`</span><span>&lt;p&gt;</span>Hello, <span>${</span><span>this</span>.<span>name</span><span>}</span>!<span>&lt;/p&gt;</span><span>`</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation">}</span></pre></figure></div><div id="tourJsCode"><figure><pre role="presentation"><span role="presentation"><span>import</span> {<span>html</span>, <span>css</span>, <span>LitElement</span>} <span>from</span> <span>'lit'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation"><span>export</span> <span>class</span> <span>SimpleGreeting</span> <span>extends</span> <span>LitElement</span> {</span></pre><pre role="presentation"><span role="presentation">  <span>static</span> <span>styles</span> = <span>css</span><span>`</span><span>p</span> { <span>color</span>: <span>blue</span> }<span>`</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>static</span> <span>properties</span> <span>=</span> {</span></pre><pre role="presentation"><span role="presentation">    <span>name</span>: {<span>type</span>: <span>String</span>},</span></pre><pre role="presentation"><span role="presentation">  };</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>constructor</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>super</span>();</span></pre><pre role="presentation"><span role="presentation">    <span>this</span>.<span>name</span> <span>=</span> <span>'Somebody'</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>render</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>return</span> <span>html</span><span>`</span><span>&lt;p&gt;</span>Hello, <span>${</span><span>this</span>.<span>name</span><span>}</span>!<span>&lt;/p&gt;</span><span>`</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation">}</span></pre><pre role="presentation"><span role="presentation"><span>customElements</span>.<span>define</span>(<span>'simple-greeting'</span>, <span>SimpleGreeting</span>);</span></pre></figure></div><div id="tourHtmlCode"><figure><pre role="presentation"><span role="presentation"><span>&lt;simple-greeting</span> <span>name</span>=<span>"World"</span><span>&gt;&lt;/simple-greeting&gt;</span></span></pre></figure></div><p><a id="playgroundLink" href="https://lit.dev/playground/">Edit this example in the Lit Playground</a></p></div><div id="tourNotes"><div id="tourNoteCustomElements" tabindex="0"><h2>Custom Elements</h2><p>Lit components are standard <em>custom elements</em>, so the browser treats them exactly like built-in elements. Use them in hand-written HTML or framework code, output them from your CMS or static site builder, even create instances in JavaScript ‚Äî they just work!</p></div><div id="tourNoteStyles" tabindex="0"><h2>Scoped styles</h2><p>Lit scopes your styles by default, using <em>Shadow DOM</em>. This keeps your CSS selectors simple and ensures that your component‚Äôs styles don't affect ‚Äî and aren't affected by ‚Äî any other styles on the page.</p></div><div id="tourNoteProperties" tabindex="0"><h2>Reactive properties</h2><p>Declare <em>reactive properties</em> to model your component‚Äôs API and internal state. A Lit component efficiently re-renders whenever a reactive property (or corresponding HTML attribute) changes.</p></div><div id="tourNoteTemplates" tabindex="0"><h2>Declarative templates</h2><p>Lit templates, based on <em>tagged template literals</em>, are simple, expressive and fast, featuring HTML markup with native JavaScript expressions inline. No custom syntax to learn, no compilation required.</p></div></div></div><section id="buildAnythingWrapper"><h2>Build anything with Lit</h2><div id="buildAnything"><div><div><h2>Shareable Components</h2></div><p>Need to deliver interactive content or features that drop into any site, built on any stack? Because they're natively supported by browsers, web components are the perfect solution ‚Äî and Lit makes them easy to build.</p></div><div><div><h2>Design Systems</h2></div><p>A design system helps you create experiences that are consistently excellent and on brand. But what if your organization uses multiple frameworks? With Lit, you can build one set of components that works for every team.</p></div><div><div><h2>Sites and Apps</h2></div><p>Use Lit components to progressively enhance a static site, or build an entire app. By embracing Web Components, Lit minimizes lock-in and promotes maintainability: update or migrate one component at a time, without disrupting product development.</p></div></div></section><div id="whoIsUsing"><h2>Many of the world's most forward-looking organizations are building with Lit</h2></div><section id="explore"><h2>Explore Lit</h2><div id="exploreItems"><h2>Try our live tutorials ‚Äî no installation needed</h2><p><a href="https://lit.dev/tutorials/">Tutorials</a></p></div></section><div id="connect"><div id="connectLhs"><h2>Connect with Lit and the web components community</h2><p>Stay up to date with new releases, learn more about how to use web components and share projects and feedback with our team. All community participation is subject to Lit‚Äôs Code of Conduct ‚Äî be excellent to each other!</p></div><div id="connectRhs"><ol id="connectList"><li><a href="https://lit.dev/discord/" target="_blank" rel="noopener"><span>Lit Discord</span> <span>Chat about Lit with the Lit community and dev team</span></a></li><li><a href="https://twitter.com/buildWithLit" target="_blank" rel="noopener"><span>Twitter</span> <span>Stay up to date with the latest news</span></a></li><li><a href="https://github.com/lit/lit/" target="_blank" rel="noopener"><span>GitHub</span> <span>File issues, read the code, and make contributions</span></a></li><li><a href="https://stackoverflow.com/questions/tagged/lit+or+lit-html+or+lit-element" target="_blank" rel="noopener"><span>Stack Overflow</span> <span>Ask and answer questions about Lit</span></a></li></ol></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Oxide Computer: Docs (267 pts)]]></title>
            <link>https://docs.oxide.computer/guides/introduction</link>
            <guid>36806539</guid>
            <pubDate>Thu, 20 Jul 2023 20:48:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://docs.oxide.computer/guides/introduction">https://docs.oxide.computer/guides/introduction</a>, See on <a href="https://news.ycombinator.com/item?id=36806539">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><div><h2 data-sectnum=""><a id="_overview"></a><a href="#_overview">Overview</a></h2><div><p>Oxide Computer is an efficient, rack-scale computing system complete with hardware and software. It has many of the same benefits of cloud hyperscale infrastructure in terms of developer productivity but at a much lower long-term infrastructure cost. The product is intended for use in on-premises deployments and the unit of purchase is a fully-integrated rack of systems.</p><p>The rack consists of several major components:</p><div><ul><li><p>Up to 32 "Gimlet" Compute Sleds, each featuring:</p><div><ul><li><p>One 225W TDP 64-core AMD Milan CPU</p></li><li><p>Support for up to 1 TiB of DRAM across 16 DIMMs (2 DIMMs per channel)</p></li><li><p>8-12 front-facing hot-swappable PCIe Gen 4 U.2 storage devices</p></li><li><p>2 internal M.2 devices</p></li><li><p>2 ports of 100 GbE networking</p></li><li><p>Root of Trust (RoT) and Service Processor (SP)</p></li></ul></div></li><li><p>Two "Sidecar" Rack Switches, featuring:</p><div><ul><li><p>Based on Intel‚Äôs Tofino 2 ASIC supporting 64 200 GbE ports</p></li><li><p>32 front facing QSFP28 ports for uplink and inter-rack connectivity</p></li><li><p>32 rear facing ports that are blind mated to servers</p></li><li><p>Integrated management network ASIC</p></li><li><p>Root of Trust (RoT) and Service Processor (SP)</p></li><li><p>Termination of presence and power control auxiliary signals</p></li><li><p>Connects to a server over PCIe for Tofino 2 ASIC management</p></li></ul></div></li><li><p>An Integrated AC‚ÜíDC Power Shelf:</p><div><ul><li><p>Able to deliver 15 kW of power to the rack at 54.5V</p></li><li><p>Supports 6 rectifiers in N+1 or N+N configuration</p></li><li><p>Contains an Oxide Power Shelf Controller (PSC)</p><div><ul><li><p>Provides telemetry and management for the power shelf</p></li><li><p>Root of Trust (RoT) and Service Processor (SP)</p></li></ul></div></li></ul></div></li><li><p>A custom cabled backplane:</p><div><ul><li><p>Allows all servers to blind mate all Ethernet, power, and auxiliary signaling</p></li><li><p>With planned support for up to 200GBASE-CR4</p></li></ul></div></li><li><p>A fiber patch panel</p></li><li><p>An integrated control plane:</p><div><ul><li><p>Comes with an API, a portal, and various SDKs through which operators and developers can provision compute infrastructure (virtual machines), storage (elastic block storage), and networking (VPC-like networking capabilities)</p></li><li><p>Provides operator the visibility into major rack component information such as software version, status, health, and other useful metrics</p></li></ul></div></li></ul></div><p>Racks will eventually be connected together to build a single pool of infrastructure (from a management and user perspective). Support for this is currently not available but is a key priority on the product roadmap.</p></div></div><div><h2 data-sectnum=""><a id="_feature_highlights"></a><a href="#_feature_highlights">Feature Highlights</a></h2><div><div><h3 data-sectnum=".."><a id="_device_placement_and_cabling"></a><a href="#_device_placement_and_cabling">Device Placement and Cabling</a></h3><div><p>The rack form factor is based on the OCP Open Rack version 3 (ORV3). It uses a Cubby design for physical housing of compute servers. Each cubby consists of two side-by-side bays and occupies 2 Open U (96mm) in height each. These cubbies provide a fixed-pitch mechanical framework for servers, allowing the units to be hot pluggable/unpluggable during maintenance.</p><p>To support full serviceability from the front (cold aisle), the rack cable management design allows a trench running under each cubby to route any rear-facing cabling from back to front.</p></div></div><div><h3 data-sectnum=".."><a id="_power_surface_and_distribution"></a><a href="#_power_surface_and_distribution">Power Surface and Distribution</a></h3><div><p>For optimal efficiency, power is distributed throughout a single power shelf via a low-voltage DC bus bar pair, with the maximum power consumption below 18 kW.</p><p>The out-of-band management interface for the power shelf is a RJ-45 Ethernet port on each of the two switches that allows access from the network. The ports, located on the front panel, are connected over 1000BASE-T (or equivalent) Cat 6 cables to the uplinks.</p></div></div><div><h3 data-sectnum=".."><a id="_compute_servers"></a><a href="#_compute_servers">Compute Servers</a></h3><div><p>Each computer server, also known as ‚Äúsled‚Äù, uses a single AMD Milan processor package. The processor choice is based on factors such as performance, power and thermal characteristics, price, susceptibility to known security vulnerabilities, as well as other architectural and operational considerations. The choice of NVMe storage and NIC is also based on rigorous evaluations of many of the same factors.</p><p>Every Oxide system board includes a hardware root-of-trust and an embedded service processor in place of the traditional BMC design incorporated into servers.</p></div></div><div><h3 data-sectnum=".."><a id="_backplane"></a><a href="#_backplane">Backplane</a></h3><div><p>The Identity and Presence Backplane (IPB) encompasses a series of small PCBAs and cabling that allows each server to identify its location within the rack, and a central management server to determine the number of cubbies in the rack and the current population status of each.</p></div></div><div><h3 data-sectnum=".."><a id="_virtual_machine_and_network_management"></a><a href="#_virtual_machine_and_network_management">Virtual Machine and Network Management</a></h3><div><p>VM instance and networking features are designed to provide a self-service experience similar to that of public clouds. Virtual machines support Unicast traffic with emulated broadcast/multicast for ARP/NDP. Useful defaults are provided for getting started quickly whereas full customization is available for more advanced workload deployment.</p><p>Each project is given their own notion of a Virtual Private Cloud (VPC) for address control, isolation, and traffic control. Each VPC is built on top of Geneve which provides UDP encapsulation with custom headers.</p><p>Oxide Rack uses Delay Driven Multipath (DDM) for routing internally but interfaces with common networking gear seamlessly. Boundary services leverage Tofino 2 Programmable ASIC and P4 functionality where packets are encapsulated on the way into the rack and decapsulated on the way out. This allows the rack to adapt to different network environments.</p><p>The Oxide Packet Transformation Engine (OPTE) sits between Virtual Machines and Physical Interfaces which services core functionality such as firewalling, routing, NATing, encapsulation and decapsulation. Each sled connects to both switches in the rack via multipath routing for high availability.</p></div></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[IRS moves forward with a new free-file tax return system (397 pts)]]></title>
            <link>https://www.pbs.org/newshour/politics/irs-moves-forward-with-a-new-free-file-tax-return-system-that-has-both-supporters-and-critics-mobilizing</link>
            <guid>36804710</guid>
            <pubDate>Thu, 20 Jul 2023 18:35:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pbs.org/newshour/politics/irs-moves-forward-with-a-new-free-file-tax-return-system-that-has-both-supporters-and-critics-mobilizing">https://www.pbs.org/newshour/politics/irs-moves-forward-with-a-new-free-file-tax-return-system-that-has-both-supporters-and-critics-mobilizing</a>, See on <a href="https://news.ycombinator.com/item?id=36804710">Hacker News</a></p>
<div id="readability-page-1" class="page"><article itemprop="articleBody">
                <div>
                    <p>WASHINGTON (AP) ‚Äî An IRS plan to&nbsp;test drive a new electronic free-file tax return system&nbsp;next year has got supporters and critics of the idea mobilizing to sway the public and Congress over whether the government should set up a permanent program to help people file their taxes without needing to pay somebody else to figure out what they owe.</p>
<p>On one side, civil society groups this week launched a coalition to promote the move toward a government-run free-file program. On the other, tax preparation firms like Intuit ‚Äî the <a href="https://www.pbs.org/newshour/economy/ftc-sues-intuit-to-stop-turbotax-ads-for-free-filings">parent company of TurboTax</a> ‚Äî and H&amp;R Block have been pouring millions into trying to stop the idea cold.</p>
<p>The advocacy groups are exponentially out-monied.</p>
<p>An April AP analysis found that overall, Intuit, H&amp;R Block, and other private companies and advocacy groups for large tax preparation businesses, as well as proponents in favor of electronic free file, have reported spending $39.3 million since 2006 to lobby on ‚Äúfree-file‚Äù and other matters. Federal law doesn‚Äôt require domestic lobbyists to itemize expenses by specific issue, so the sums are not limited to free-file.</p>
<p>Intuit spent at least $25.6 million since 2006 on lobbying, H&amp;R Block about $9.6 million and the conservative Americans for Tax Reform roughly $3 million.</p>
<p>In contrast, the NAACP has spent $140,000 lobbying on ‚Äúfree-file‚Äù since 2006 and Public Citizen has spent $110,000 in the same time frame.</p>
<p>‚ÄúWhat we have on our side is public opinion,‚Äù said Igor Volsky, executive director of the liberal Groundwork Action advocacy group.</p>
<p><a href="https://www.pbs.org/newshour/politics/irs-reduces-tax-return-backlog-by-80-percent-and-improves-customer-service"><strong>READ MORE:</strong> IRS reduces tax return backlog by 80 percent and improves customer service, report says</a></p>
<p>Volsky‚Äôs organization and leaders from Public Citizen, the Center for the Study of Social Policy, Code for America, the Economic Security Project and others launched the ‚ÄúCoalition for Free and Fair Filing‚Äù on Wednesday. The group‚Äôs mission is to ‚Äúensure all U.S. taxpayers can easily file tax returns and get the tax credits they deserve by safeguarding and expanding‚Äù the new IRS program.</p>
<p>‚ÄúThe overwhelming majority of people demand a free-file option,‚Äù Volsky said. ‚ÄúNow the question for us is how do you channel that into effective political pressure.‚Äù</p>
<p>The IRS in May&nbsp;<a href="https://apnews.com/article/tax-irs-taxpayers-direct-file-ef2e9f92ad45984487fd368b851773af">released a report</a>&nbsp;that said most taxpayers are interested in filing their taxes directly to the IRS for free, and concurrently announced plans to launch the pilot program for the 2024 filing season. The goal is to test a direct file system that will help the IRS decide whether to move forward with a more permanent program.</p>
<p>That idea has faced the immediate threat of budget cuts from congressional Republicans.</p>
<p>Republicans on the House Appropriations Committee in June proposed a budget rider that would&nbsp;<a href="https://appropriations.house.gov/sites/republicans.appropriations.house.gov/files/documents/FY24%20Financial%20Services%20and%20General%20Government%20-%20Full%20Committee%20Mark.pdf">prohibit funds</a>&nbsp;to be used for the IRS to create a government-run tax preparation software, unless approved by a group of House and Senate committees.</p>
<p>The move ‚Äúsafeguards the IRS from an obvious conflict of interest where the tax collector becomes the tax preparer,‚Äù the bill‚Äôs summary states.</p>
<p>A&nbsp;Government Accountability Report in April 2022 found that 70 percent of taxpayers were eligible to use an existing free-file program but just 3 percent actually used the service. That program consists of a public-private partnership of tax software companies that offers free services to certain taxpayers outside of the IRS website.</p>
<p>Additionally, anyone can prepare and mail in their taxes for free, but the tax code is so complex that almost 50 percent of Americans use a tax prep company. IRS officials have estimated individual taxpayers pay an average of $140 preparing their tax returns each year.</p>
<p>Derrick Plummer, a spokesman for Intuit, stressed the free options that already were available.</p>
<p>‚ÄúAn IRS direct-to-e-file system is redundant and will not be free ‚Äì not free to build, not free to operate, and not free for taxpayers,‚Äù Plummer said, adding that it ‚Äúwill unnecessarily cost taxpayers billions of dollars.‚Äù</p>
<p>H&amp;R Block said in a statement the direct e-file pilot ‚Äúcontinues to be a solution in search of a problem.‚Äù</p>
<p>Citing the free-filing options for Americans under a certain income threshold through the existing&nbsp;<a href="https://www.irs.gov/e-file-providers/about-the-free-file-alliance">Free File Alliance</a>, H&amp;R Block said, ‚Äúthis pilot is unnecessary and faces significant barriers to providing comprehensive tax preparation services.‚Äù</p>
<p>H&amp;R Block came under fire after congressional Democrats last week released a report stating that it was one of three large tax preparation firms that sent ‚Äúextraordinarily sensitive‚Äù information on tens of millions of taxpayers to&nbsp;Facebook parent company Meta&nbsp;and Google over the course of at least two years.</p>
<p>Susan Harley, Congress Watch managing director at Public Citizen, said ‚Äúwe‚Äôre outgunned as far as money being spent, but we have the moral higher ground‚Äù in supporting the free-file program over third-party tax preparers.</p>
<p>Nations like Germany, Japan, the U.K. and other Organization for Economic Cooperation and Development countries already offer their taxpayers some form of pre-populated tax document.</p>
<p>Some countries also use ‚Äútax agency reconciliation,‚Äù where taxpayers who opt to participate provide the government with basic employment status information and the tax administrator sends them a return with their calculated tax liability.</p>
<p><a href="https://www.nber.org/papers/w30008">Research conducted</a> last year by a group of Treasury, Federal Reserve and other academics shows that the IRS could pre-populate 42 to 48 percent of all tax returns.</p>
<p>The IRS has already seen cuts to its funding since the passage of the&nbsp;Inflation Reduction Act&nbsp;that&nbsp;President Joe Biden signed&nbsp;last August gave the agency $80 billion to modernize and hire more workers and move toward the free-file program.</p>
<p>House Republicans built a $1.4 billion reduction to the IRS into the debt ceiling and budget cuts package passed by Congress this summer. The White House said the debt deal also has a separate agreement to take $20 billion from the IRS over the next two years and divert that money to other non-defense programs.</p>

                </div>
            </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In 1961 a Gallup poll showed only 33% of Americans in favor of moon landing (189 pts)]]></title>
            <link>https://newsletter.pessimistsarchive.org/p/the-moon-landing-was-opposed-by-majority</link>
            <guid>36804394</guid>
            <pubDate>Thu, 20 Jul 2023 18:12:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsletter.pessimistsarchive.org/p/the-moon-landing-was-opposed-by-majority">https://newsletter.pessimistsarchive.org/p/the-moon-landing-was-opposed-by-majority</a>, See on <a href="https://news.ycombinator.com/item?id=36804394">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em><strong>Today marks the 54th anniversary of the moon landing.</strong></em><span> In retrospect it has almost unanimous support and adoration in the US. </span><em>However</em><span>, before that giant leap for mankind actually took place - less than one third of Americans were in favor of a moon landing: in 1961 a Gallup poll showed only </span><a href="https://www.newspapers.com/article/arizona-republic/128550438/" rel="">33%</a><span> of Americans in favor.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg" width="956" height="701.8983516483516" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg&quot;,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:1069,&quot;width&quot;:1456,&quot;resizeWidth&quot;:956,&quot;bytes&quot;:1419223,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>George Gallup would publish the findings, in an article syndicated in newspapers across the US.</figcaption></figure></div><p><span>This isn‚Äôt something you often </span><a href="https://www.theatlantic.com/technology/archive/2012/09/moondoggle-the-forgotten-opposition-to-the-apollo-program/262254/" rel="">hear about</a><span> regarding the history of the moon mission. It is </span><a href="https://www.theatlantic.com/technology/archive/2012/09/moondoggle-the-forgotten-opposition-to-the-apollo-program/262254/" rel="">conveniently ignored</a><span> in the popular mind, in lieu of a story of collective triumph against the USSR, a narrative that pleases the left as an example of the power of public funding and the right, as a triumph of the </span><em>capitalist west</em><span> against the </span><em>communist east</em><span>. The retroactive support now is as bi-partisan as the opposition was then.</span></p><p>Noted fiscal hawk Barry Goldwater dismissed the lofty ambitions of lunar exploration as a "wasteful endeavor," an ironic stance given he voiced his criticism at a glitzy dinner that cost each attendee a cool $100 - close to $1000 in 2023. In the very same year, he decried the United States as "moon struck." President Kennedy‚Äôs early suggestion of teaming up with Russia to reach the moon drew opposition from Republicans too.  </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg" width="1026" height="617.2912087912088" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg&quot;,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:876,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1026,&quot;bytes&quot;:484490,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>Ex-president Dwight D. Eisenhower - the very man responsible for birthing and funding NASA - expressed his own reservations, dismissing Kennedy's lunar ambition as </span><em>"almost hysterical"</em><span> saying </span><em>‚ÄúAnybody who would spend $40 billion in a race to the moon for national prestige is nuts‚Ä¶‚Äù </em><span>Other Republicans labelled it a Moondoggle - a term coined in 1961 by AI pioneer (and </span><a href="https://newsletter.pessimistsarchive.org/p/the-original-ai-doomer-dr-norbert" rel="">original AI doomer</a><span>) Norbert Wiener - who held </span><a href="https://links.org.au/socialism-norbert-wiener#:~:text=Wiener%20was%20also%20a%20highly,which%20he%20linked%20to%20capitalism." rel="">noted</a><span> left wing views. More left wing opposition revolved around the desire for more spending on the needs of citizens.</span></p><p><a href="https://site.nhd.org/73136591/uploaded/Public_Opinion_Polls_and_Perceptions_of.pdf" rel="">Aggregations</a><span> of opinion polls in the 1960s and 70s have shown approval of the moon landing was consistently lower than disapproval. Even astronomers polled, were majority against the mission. Only in the weeks before the moon mission was approval </span><a href="https://www.newspapers.com/article/the-bangor-daily-news/128556617/" rel="">recorded</a><span> at 51% in one Harris poll.</span></p><p><span>In the aftermath of the moon landing, approval for that specific mission didn‚Äôt </span><a href="https://www.theatlantic.com/technology/archive/2012/09/moondoggle-the-forgotten-opposition-to-the-apollo-program/262254/" rel="">meaningfully budge</a><span>. 47% said it was worth it a decade later, in 1979 and it would take 20 years for amnesia to set it and this number to reach 77% in 1989. Meanwhile opposition to further moon missions remained higher than support for one until at least the mid-1990s. The US hasn‚Äôt been back to the moon since 1972.</span></p><p>Lack of ambition by NASA was one of the reasons that prompted some of America‚Äôs wealthiest to move space exploration beyond the realms of nation states, with numerous private individuals exploring the star with some - like Jeff Bezos and Elon Musk securing NASA contracts for among other things, a new moon landing.</p><p><span>This time around, fiscal conservatives are less opposed, since private efficiencies  like re-usable rockets have lowered the tax burden of space exploration. Left wing critics like Bernie Sanders </span><a href="https://www.theguardian.com/commentisfree/2022/apr/22/jeff-bezos-space-elon-musk-billionaires-bernie-sanders" rel="">complain</a><span> - argue in outlets like The Guardian - that those private dollars invested in space ought to have been taxed away to fund public programs like Apollo - ignoring the fact those kind of programs have always been politically unpopular. Sanders would have likely made the </span><a href="https://www.thedailybeast.com/bernie-sanders-would-have-voted-against-the-moon-landing" rel="">same arguments</a><span> about Apollo had he been a Senator in the 1960s.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png" width="496" height="585.3619834710744" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1428,&quot;width&quot;:1210,&quot;resizeWidth&quot;:496,&quot;bytes&quot;:1502806,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Ironically in July 1969, that same out let in which Sanders wrote - </span><em>The Guardian -</em><span> </span><a href="https://twitter.com/PessimistsArc/status/1417468837151264772" rel="">called</a><span> a teachers‚Äô union officer a </span><em>‚Äúcynic‚Äù</em><span> for calling America‚Äôs moonshot </span><em>‚ÄúA trivial prestige exercise‚Äù</em><span> that </span><em>‚Äúignored the social conditions existing in the world‚Äù,</em><span> reporting that when man first set foot on the moon, he had not even been watching it on TV.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://newsletter.pessimistsarchive.org/?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share Pessimists Archive Newsletter&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://newsletter.pessimistsarchive.org/?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share Pessimists Archive Newsletter</span></a></p><p><span>We recommend </span><em><a href="http://newart.press/" rel="">Newart.Press</a><span>, </span></em><span>a publication exploring the past of creativity and technology, to help us understand the future.</span></p><p><em>Recommended reads:</em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif" width="272" height="56.41481481481482" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:56,&quot;width&quot;:270,&quot;resizeWidth&quot;:272,&quot;bytes&quot;:1081645,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div data-attrs="{&quot;url&quot;:&quot;e_trim:10:transparent/h_56,c_limit,f_auto,q_auto:good,fl_progressive:steep/https://substack-post-media.s3.amazonaws.com/public/images/effe6ef7-3afa-4fd2-924a-d4c83951ae0a_757x157.gif&quot;}" data-component-name="AssetErrorToDOM"><picture><img src="https://newsletter.pessimistsarchive.org/img/missing-image.png" height="455" width="728"></picture></div></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Custom instructions for ChatGPT (254 pts)]]></title>
            <link>https://openai.com/blog/custom-instructions-for-chatgpt</link>
            <guid>36803744</guid>
            <pubDate>Thu, 20 Jul 2023 17:26:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/blog/custom-instructions-for-chatgpt">https://openai.com/blog/custom-instructions-for-chatgpt</a>, See on <a href="https://news.ycombinator.com/item?id=36803744">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><!--[--><div><p>We‚Äôre introducing custom instructions so that you can tailor ChatGPT to better meet your needs.<strong> </strong>This feature will be available in beta starting with the Plus plan today, expanding to all users in the coming weeks. Custom instructions allow you to add preferences or requirements that you‚Äôd like ChatGPT to consider when generating its responses.</p><p>We‚Äôve heard your feedback about the friction of starting each ChatGPT conversation afresh. Through our conversations with <a href="https://openai.com/blog/insights-from-global-conversations" rel="noopener noreferrer" target="_blank">users across 22 countries</a>, we‚Äôve deepened our understanding of the essential role steerability plays in enabling our models to effectively reflect the diverse contexts and unique needs of each person.</p><p>ChatGPT will consider your custom instructions for every conversation going forward. The model will consider the instructions every time it responds, so you won‚Äôt have to repeat your preferences or information in every conversation.<strong>&nbsp;</strong></p><p>For example, a teacher crafting a lesson plan no longer has to repeat that they're teaching 3rd grade science. A developer preferring efficient code in a language that‚Äôs not Python ‚Äì&nbsp;they can say it once, and it's understood. Grocery shopping for a big family becomes easier, with the model accounting for 6 servings in the grocery list.<br></p></div><div><div><div><p>Custom instructions</p><div><p> Scroll to see change </p><p> Scroll down to see output change </p></div></div><div><p><span>What would you like ChatGPT to know about you to provide better responses?</span></p><p>I work on science education programs for third-grade students.</p><p><span>How would you like ChatGPT to respond?</span></p><p>When discussing potential solutions for work-related items, present the information in a table format, outlining the pros and cons of each option‚Äîallowing for easier comparison and decision-making.</p></div></div><div><div><!----><p> What would be three important things to teach about the moon? </p></div><div><!--[--><p> Teaching third-grade students about the moon involves several core concepts. Here are three key topics to consider: </p><ol><li><span>Phases of the Moon</span></li><li><span>The Moon's Relationship with the Earth</span></li><li><span>Physical Features of the Moon</span></li></ol><div><table><thead><tr><td> Topic </td><td> Pros </td><td> Cons </td></tr></thead><tbody><tr><td> Phases of the Moon </td><td> Helps students understand cyclical patterns and time. It's also quite observable, offering an immediate connection to their own experiences. </td><td> It may be a slightly complex concept for some students to grasp initially, particularly the reasons behind the moon's different phases. </td></tr><tr><td> The Moon's Relationship with the Earth </td><td> This topic is vital for explaining concepts like gravity, tides, and how the moon orbits the earth. It can also lead to further discussions about the solar system. </td><td> Understanding the moon's impact on Earth requires some basic understanding of physical science, which may be challenging for some third graders. </td></tr><tr><td> Physical Features of the Moon </td><td> Students usually find this interesting, particularly topics like craters and the absence of atmosphere. This can lead to discussions about space exploration. </td><td> Without proper visual aids (like high-quality images or models), this topic can be somewhat abstract for third-grade students. </td></tr></tbody></table></div><p> Ultimately, your choice of what to emphasize will depend on your students' existing knowledge, the curriculum you are following, and the resources you have available. </p><!--]--></div></div></div><div id="plugins" data-heading=""><p><h2>Plugins</h2></p></div><div><p>Adding instructions can also help improve your experience with <a href="https://help.openai.com/en/articles/7183286-how-do-i-access-plugins#h_3f79a921af" rel="noopener noreferrer" target="_blank">plugins</a> by sharing relevant information with the plugins that you use. For example, if you specify the city you live in within your instructions and use a plugin that helps you make restaurant reservations, the model might include your city when it calls the plugin.<br></p></div><div id="beta" data-heading=""><p><h2>Beta</h2></p></div><div><p>Especially during the beta period, ChatGPT won‚Äôt always interpret custom instructions perfectly‚Äîat times it might overlook instructions, or apply them when not intended.<br></p></div><div id="safety" data-heading=""><p><h2>Safety</h2></p></div><div><p>We‚Äôve adapted our safety measures to account for the new ways that users can instruct the model.&nbsp; For example, our Moderation API is designed to help ensure instructions won't be saved if they violate our <a href="https://openai.com/policies/usage-policies" rel="noopener noreferrer" target="_blank">Usage Policies</a>. The model can also refuse or ignore instructions that lead to responses that violate our usage policies.<br></p></div><div id="privacy" data-heading=""><p><h2>Privacy</h2></p></div><div><p>We may use your custom instructions to improve model performance for our users, but you can disable this via your <a href="https://help.openai.com/en/articles/7730893-data-controls-faq" rel="noopener noreferrer" target="_blank">data controls</a>. <a href="https://help.openai.com/en/articles/5722486-how-your-data-is-used-to-improve-model-performance" rel="noopener noreferrer" target="_blank">As with ChatGPT conversations</a>, we take steps to remove personal identifiers found in custom instructions before they are used to improve model performance. Learn more about how we use conversations to improve model performance and your choices in our <a href="https://help.openai.com/en/articles/5722486-how-your-data-is-used-to-improve-model-performance" rel="noopener noreferrer" target="_blank">Help Center</a>.<br></p></div><div id="try-it-now" data-heading=""><p><h2>Try it now</h2></p></div><div><p>Plus users can start using custom instructions today by opting into the beta for custom instructions:</p><ul><li>On web, click on your name ‚Üí Settings ‚Üí Beta features ‚Üí opt into Custom instructions. Custom instructions will appear in the menu when you click on your name going forward.</li><li>On iOS, go to Settings ‚Üí New Features ‚Üí turn on Custom instructions. Custom instructions will appear in settings.</li></ul><p>This feature is not yet available in the UK and EU.<br></p></div><!--]--></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Running Stable Diffusion in 260MB of RAM (269 pts)]]></title>
            <link>https://github.com/vitoplantamura/OnnxStream</link>
            <guid>36803408</guid>
            <pubDate>Thu, 20 Jul 2023 17:01:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/vitoplantamura/OnnxStream">https://github.com/vitoplantamura/OnnxStream</a>, See on <a href="https://news.ycombinator.com/item?id=36803408">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">OnnxStream</h2>
<p dir="auto">The challenge is to run <a href="https://github.com/CompVis/stable-diffusion">Stable Diffusion</a>, which includes a large transformer model with almost 1 billion parameters, on a <a href="https://www.raspberrypi.com/products/raspberry-pi-zero-2-w/" rel="nofollow">Raspberry Pi Zero 2</a>, which is a microcomputer with 512MB of RAM, without adding more swap space and without offloading intermediate results on disk. The recommended minimum RAM/VRAM for Stable Diffusion is typically 8GB.</p>
<p dir="auto">Generally major machine learning frameworks and libraries are focused on minimizing inference latency and/or maximizing throughput, all of which at the cost of RAM usage. So I decided to write a super small and hackable inference library specifically focused on minimizing memory consumption: OnnxStream.</p>
<p dir="auto">OnnxStream is based on the idea of decoupling the inference engine from the component responsible of providing the model weights, which is a class derived from <code>WeightsProvider</code>. A <code>WeightsProvider</code> specialization can implement any type of loading, caching and prefetching of the model parameters. For example a custom <code>WeightsProvider</code> can decide to download its data from an HTTP server directly, without loading or writing anything to disk (hence the word "Stream" in "OnnxStream"). Two default <code>WeightsProviders</code> are available: <code>DiskNoCache</code> and <code>DiskPrefetch</code>.</p>
<p dir="auto"><strong>OnnxStream can consume even 55x less memory than OnnxRuntime while being only 0.5-2x slower</strong> (on CPU, see the Performance section below).</p>
<h2 tabindex="-1" dir="auto">Stable Diffusion</h2>
<p dir="auto">These images were generated by the Stable Diffusion example implementation included in this repo, using OnnxStream, at different precisions of the VAE decoder. The VAE decoder is the only model of Stable Diffusion that could not fit into the RAM of the Raspberry Pi Zero 2 in single or half precision. This is caused by the presence of residual connections and very big tensors and convolutions in the model. The only solution was static quantization (8 bit). The third image was generated by my RPI Zero 2 in about 3 hours. The first image was generated on my PC using the same latents generated by the RPI Zero 2, for comparison:</p>
<p dir="auto">VAE decoder in W16A16 precision:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/output_W16A16.png"><img src="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/output_W16A16.png" alt="W16A16 VAE Decoder"></a></p>
<p dir="auto">VAE decoder in W8A32 precision:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/output_W8A32.png"><img src="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/output_W8A32.png" alt="W8A32 VAE Decoder"></a></p>
<p dir="auto">VAE decoder in W8A8 precision (generated by my RPI Zero 2 in about 3 hours):</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/output_W8A8.png"><img src="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/output_W8A8.png" alt="W8A8 VAE Decoder"></a></p>
<h2 tabindex="-1" dir="auto">Features of OnnxStream</h2>
<ul dir="auto">
<li>Inference engine decoupled from the <code>WeightsProvider</code></li>
<li><code>WeightsProvider</code> can be <code>DiskNoCache</code>, <code>DiskPrefetch</code> or custom</li>
<li>Attention slicing</li>
<li>Dynamic quantization (8 bit unsigned, asymmetric, percentile)</li>
<li>Static quantization (W8A8 unsigned, asymmetric, percentile)</li>
<li>Easy calibration of a quantized model</li>
<li>FP16 support (with or without FP16 arithmetic)</li>
<li>24 ONNX operators implemented (the most common)</li>
<li>Operations executed sequentially but all operators are multithreaded</li>
<li>Single implementation file + header file</li>
<li>XNNPACK calls wrapped in the <code>XnnPack</code> class (for future replacement)</li>
</ul>
<p dir="auto">OnnxStream depends on <a href="https://github.com/google/XNNPACK">XNNPACK</a> for some (accelerated) primitives: MatMul, Convolution, element-wise Add/Sub/Mul/Div, Sigmoid and Softmax.</p>
<h2 tabindex="-1" dir="auto">Performance</h2>
<p dir="auto">Stable Diffusion consists of three models: <strong>a text encoder</strong> (672 operations and 123 million parameters), the <strong>UNET model</strong> (2050 operations and 854 million parameters) and the <strong>VAE decoder</strong> (276 operations and 49 million parameters). Assuming that the batch size is equal to 1, a full image generation with 10 steps, which yields good results (with the Euler Ancestral scheduler), requires 2 runs of the text encoder, 20 (i.e. 2*10) runs of the UNET model and 1 run of the VAE decoder.</p>
<p dir="auto">This table shows the various inference times of the three models of Stable Diffusion, together with the memory consumption (i.e. the <code>Peak Working Set Size</code> in Windows or the <code>Maximum Resident Set Size</code> in Linux).</p>
<table>
<thead>
<tr>
<th>Model / Library</th>
<th>1st run</th>
<th>2nd run</th>
<th>3rd run</th>
</tr>
</thead>
<tbody>
<tr>
<td>FP16 UNET / OnnxStream</td>
<td>0.133 GB - 18.2 secs</td>
<td>0.133 GB - 18.7 secs</td>
<td>0.133 GB - 19.8 secs</td>
</tr>
<tr>
<td>FP16 UNET / OnnxRuntime</td>
<td>5.085 GB - 12.8 secs</td>
<td>7.353 GB - 7.28 secs</td>
<td>7.353 GB - 7.96 secs</td>
</tr>
<tr>
<td>FP32 Text Enc / OnnxStream</td>
<td>0.147 GB - 1.26 secs</td>
<td>0.147 GB - 1.19 secs</td>
<td>0.147 GB - 1.19 secs</td>
</tr>
<tr>
<td>FP32 Text Enc / OnnxRuntime</td>
<td>0.641 GB - 1.02 secs</td>
<td>0.641 GB - 0.06 secs</td>
<td>0.641 GB - 0.07 secs</td>
</tr>
<tr>
<td>FP32 VAE Dec / OnnxStream</td>
<td>1.004 GB - 20.9 secs</td>
<td>1.004 GB - 20.6 secs</td>
<td>1.004 GB - 21.2 secs</td>
</tr>
<tr>
<td>FP32 VAE Dec / OnnxRuntime</td>
<td>1.330 GB - 11.2 secs</td>
<td>2.026 GB - 10.1 secs</td>
<td>2.026 GB - 11.1 secs</td>
</tr>
</tbody>
</table>
<p dir="auto">In the case of the UNET model (when run in FP16 precision, with FP16 arithmetic enabled in OnnxStream), OnnxStream can consume even 55x less memory than OnnxRuntime while being 0.5-2x slower.</p>
<p dir="auto">Notes:</p>
<ul dir="auto">
<li>The first run for OnnxRuntime is a warm up inference, since its <code>InferenceSession</code> is created before the first run and reused for all the subsequent runs. No such thing as a warm up exists for OnnxStream since it is purely eager by design (however subsequent runs can benefit from the caching of the weights files by the OS).</li>
<li>At the moment OnnxStream doesn't support inputs with a batch size != 1, unlike OnnxRuntime, which can greatly speed up the whole diffusion process using a batch size = 2 when running the UNET model.</li>
<li>In my tests, changing OnnxRuntime's <code>SessionOptions</code> (like <code>EnableCpuMemArena</code> and <code>ExecutionMode</code>) produces no significant difference in the results.</li>
<li>Performance of OnnxRuntime is very similar to that of NCNN (the other framework I evaluated), both in terms of memory consumption and inference time. I'll include NCNN benchmarks in the future, if useful.</li>
<li>Tests were run on my development machine: Windows Server 2019, 16GB RAM, 8750H cpu (AVX2), 970 EVO Plus SSD, 8 virtual cores on VMWare.</li>
</ul>
<h2 tabindex="-1" dir="auto">Attention Slicing and Quantization</h2>
<p dir="auto">The use of "attention slicing" when running the UNET model and the use of W8A8 quantization for the VAE decoder were crucial in reducing memory consumption to a level that allowed execution on a RPI Zero 2.</p>
<p dir="auto">While there is a lot of information on the internet about quantizing neural networks, little can be found about "attention slicing". The idea is simple: the goal is to avoid materializing the full <code>Q @ K^T</code> matrix when calculating the scaled dot-product attention of the various multi-head attentions in the UNET model. With an attention head count of 8 in the UNET model, <code>Q</code> has a shape of (8,4096,40), while <code>K^T</code> has a shape of (8,40,4096): so the result of the first MatMul has a final shape of (8,4096,4096), which is a 512MB tensor (in FP32 precision):</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/attention_mem_consumpt.png"><img src="https://raw.githubusercontent.com/vitoplantamura/OnnxStream/master/assets/attention_mem_consumpt.png" alt="Attention Slicing"></a></p>
<p dir="auto">The solution is to split <code>Q</code> vertically and then to proceed with the attention operations normally on each chunk of <code>Q</code>. <code>Q_sliced</code> has a shape of (1,x,40), where x is 4096 (in this case) divided by <code>onnxstream::Model::m_attention_fused_ops_parts</code> (which has a default value of 2, but can be customized). This simple trick allows to lower the overall consumed memory of the UNET model from 1.1GB to 300MB (when the model is run in FP32 precision). A possible alternative, certainly more efficient, would be to use FlashAttention, however FlashAttention would require writing a custom kernel for each supported architecture (AVX, NEON etc), bypassing XnnPack in our case.</p>
<h2 tabindex="-1" dir="auto">How OnnxStream works</h2>
<p dir="auto">This code can run a model defined in the <code>path_to_model_folder/model.txt</code>: (all the model operations are defined in the <code>model.txt</code> text file; OnnxStream expects to find all the weights files in that same folder, as a series of <code>.bin</code> files)</p>
<div dir="auto" data-snippet-clipboard-copy-content="#include &quot;onnxstream.h&quot;

using namespace onnxstream;

int main()
{
    Model model;

    //
    // Optional parameters that can be set on the Model object:
    //
    // model.set_weights_provider( ... ); // specifies a different weights provider (default is DiskPrefetchWeightsProvider)
    // model.read_range_data( ... ); // reads a range data file (which contains the clipping ranges of the activations for a quantized model)
    // model.write_range_data( ... ); // writes a range data file (useful after calibration)
    // model.m_range_data_calibrate = true; // calibrates the model
    // model.m_use_fp16_arithmetic = true; // uses FP16 arithmetic during inference (useful if weights are in FP16 precision)
    // model.m_use_uint8_arithmetic = true; // uses UINT8 arithmetic during inference
    // model.m_use_uint8_qdq = true; // uses UINT8 dynamic quantization (can reduce memory consumption of some models)
    // model.m_fuse_ops_in_attention = true; // enables attention slicing
    // model.m_attention_fused_ops_parts = ... ; // see the &quot;Attention Slicing&quot; section above
    //

    model.read_file(&quot;path_to_model_folder/model.txt&quot;);

    tensor_vector<float> data;
    
    ... // fill the tensor_vector with the tensor data. &quot;tensor_vector&quot; is just an alias to a std::vector with a custom allocator.

    Tensor t;
    t.m_name = &quot;input&quot;;
    t.m_shape = { 1, 4, 64, 64 };
    t.set_vector(std::move(data));
    model.push_tensor(std::move(t));

    model.run();
    
    auto&amp; result = model.m_data[0].get_vector<float>();
    
    ... // process the result: &quot;result&quot; is a reference to the first result of the inference (a tensor_vector<float> as well).

    return 0;
}"><pre>#<span>include</span> <span><span>"</span>onnxstream.h<span>"</span></span>

<span>using</span> <span>namespace</span> <span>onnxstream</span><span>;</span>

<span>int</span> <span>main</span>()
{
    Model model;

    <span><span>//</span></span>
    <span><span>//</span> Optional parameters that can be set on the Model object:</span>
    <span><span>//</span></span>
    <span><span>//</span> model.set_weights_provider( ... ); // specifies a different weights provider (default is DiskPrefetchWeightsProvider)</span>
    <span><span>//</span> model.read_range_data( ... ); // reads a range data file (which contains the clipping ranges of the activations for a quantized model)</span>
    <span><span>//</span> model.write_range_data( ... ); // writes a range data file (useful after calibration)</span>
    <span><span>//</span> model.m_range_data_calibrate = true; // calibrates the model</span>
    <span><span>//</span> model.m_use_fp16_arithmetic = true; // uses FP16 arithmetic during inference (useful if weights are in FP16 precision)</span>
    <span><span>//</span> model.m_use_uint8_arithmetic = true; // uses UINT8 arithmetic during inference</span>
    <span><span>//</span> model.m_use_uint8_qdq = true; // uses UINT8 dynamic quantization (can reduce memory consumption of some models)</span>
    <span><span>//</span> model.m_fuse_ops_in_attention = true; // enables attention slicing</span>
    <span><span>//</span> model.m_attention_fused_ops_parts = ... ; // see the "Attention Slicing" section above</span>
    <span><span>//</span></span>

    model.<span>read_file</span>(<span><span>"</span>path_to_model_folder/model.txt<span>"</span></span>);

    tensor_vector&lt;<span>float</span>&gt; data;
    
    ... <span><span>//</span> fill the tensor_vector with the tensor data. "tensor_vector" is just an alias to a std::vector with a custom allocator.</span>

    Tensor t;
    t.<span>m_name</span> = <span><span>"</span>input<span>"</span></span>;
    t.<span>m_shape</span> = { <span>1</span>, <span>4</span>, <span>64</span>, <span>64</span> };
    t.<span>set_vector</span>(<span>std::move</span>(data));
    model.<span>push_tensor</span>(<span>std::move</span>(t));

    model.<span>run</span>();
    
    <span>auto</span>&amp; result = model.<span>m_data</span>[<span>0</span>].<span>get_vector</span>&lt;<span>float</span>&gt;();
    
    ... <span><span>//</span> process the result: "result" is a reference to the first result of the inference (a tensor_vector&lt;float&gt; as well).</span>

    <span>return</span> <span>0</span>;
}</pre></div>
<p dir="auto">The <code>model.txt</code> file contains all the model operations in ASCII format, as exported from the original ONNX file. Each line corresponds to an operation: for example this line represents a convolution in a quantized model:</p>
<div data-snippet-clipboard-copy-content="Conv_4:Conv*input:input_2E_1(1,4,64,64);post_5F_quant_5F_conv_2E_weight_nchw.bin(uint8[0.0035054587850383684,134]:4,4,1,1);post_5F_quant_5F_conv_2E_bias.bin(float32:4)*output:input(1,4,64,64)*dilations:1,1;group:1;kernel_shape:1,1;pads:0,0,0,0;strides:1,1"><pre><code>Conv_4:Conv*input:input_2E_1(1,4,64,64);post_5F_quant_5F_conv_2E_weight_nchw.bin(uint8[0.0035054587850383684,134]:4,4,1,1);post_5F_quant_5F_conv_2E_bias.bin(float32:4)*output:input(1,4,64,64)*dilations:1,1;group:1;kernel_shape:1,1;pads:0,0,0,0;strides:1,1
</code></pre></div>
<p dir="auto">In order to export the <code>model.txt</code> file and its weights (as a series of <code>.bin</code> files) from an ONNX file for use in OnnxStream, a notebook (with a single cell) is provided (<code>onnx2txt.ipynb</code>).</p>
<p dir="auto">Some things must be considered when exporting a Pytorch <code>nn.Module</code> (in our case) to ONNX for use in OnnxStream:</p>
<ol dir="auto">
<li>When calling <code>torch.onnx.export</code>, <code>dynamic_axes</code> should be left empty, since OnnxStream doesn't support inputs with a dynamic shape.</li>
<li>It is strongly recommended to run the excellent <a href="https://github.com/daquexian/onnx-simplifier">ONNX Simplifier</a> on the exported ONNX file before its conversion to a <code>model.txt</code> file.</li>
</ol>
<h2 tabindex="-1" dir="auto">How to Build the Stable Diffusion example on Linux/Mac/Windows</h2>
<ul dir="auto">
<li><strong>Windows only</strong>: start the following command prompt: <code>Visual Studio Tools</code> &gt; <code>x64 Native Tools Command Prompt</code>.</li>
<li><strong>Mac only</strong>: make sure to install cmake: <code>brew install cmake</code>.</li>
</ul>
<p dir="auto">First you need to build <a href="https://github.com/google/XNNPACK">XNNPACK</a>.</p>
<p dir="auto">Since the function prototypes of XnnPack can change at any time, I've included a <code>git checkout</code> ‚Äã‚Äãthat ensures correct compilation of OnnxStream with a compatible version of XnnPack at the time of writing:</p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/google/XNNPACK.git
cd XNNPACK
git rev-list -n 1 --before=&quot;2023-06-27 00:00&quot; master
git checkout <COMMIT_ID_FROM_THE_PREVIOUS_COMMAND>
mkdir build
cd build
cmake -DXNNPACK_BUILD_TESTS=OFF -DXNNPACK_BUILD_BENCHMARKS=OFF ..
cmake --build . --config Release"><pre><code>git clone https://github.com/google/XNNPACK.git
cd XNNPACK
git rev-list -n 1 --before="2023-06-27 00:00" master
git checkout &lt;COMMIT_ID_FROM_THE_PREVIOUS_COMMAND&gt;
mkdir build
cd build
cmake -DXNNPACK_BUILD_TESTS=OFF -DXNNPACK_BUILD_BENCHMARKS=OFF ..
cmake --build . --config Release
</code></pre></div>
<p dir="auto">Then you can build the Stable Diffusion example.</p>
<p dir="auto"><code>&lt;DIRECTORY_WHERE_XNNPACK_WAS_CLONED&gt;</code> is for example <code>/home/vito/Desktop/XNNPACK</code> or <code>C:\Projects\SD\XNNPACK</code> (on Windows):</p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/vitoplantamura/OnnxStream.git
cd OnnxStream
cd src
mkdir build
cd build
cmake -DXNNPACK_DIR=<DIRECTORY_WHERE_XNNPACK_WAS_CLONED> ..
cmake --build . --config Release"><pre><code>git clone https://github.com/vitoplantamura/OnnxStream.git
cd OnnxStream
cd src
mkdir build
cd build
cmake -DXNNPACK_DIR=&lt;DIRECTORY_WHERE_XNNPACK_WAS_CLONED&gt; ..
cmake --build . --config Release
</code></pre></div>
<p dir="auto">Now you can run the Stable Diffusion example. The weights for the example can be downloaded from the Releases of this repo. These are the command line options of the Stable Diffusion example:</p>
<div data-snippet-clipboard-copy-content="--models-path       Sets the folder containing the Stable Diffusion models.
--ops-printf        During inference, writes the current operation to stdout.
--output            Sets the output PNG file.
--decode-latents    Skips the diffusion, and decodes the specified latents file.
--prompt            Sets the positive prompt.
--neg-prompt        Sets the negative prompt.
--steps             Sets the number of diffusion steps.
--save-latents      After the diffusion, saves the latents in the specified file.
--decoder-calibrate Calibrates the quantized version of the VAE decoder.
--decoder-fp16      During inference, uses the FP16 version of the VAE decoder.
--rpi               Configures the models to run on a Raspberry Pi Zero 2."><pre><code>--models-path       Sets the folder containing the Stable Diffusion models.
--ops-printf        During inference, writes the current operation to stdout.
--output            Sets the output PNG file.
--decode-latents    Skips the diffusion, and decodes the specified latents file.
--prompt            Sets the positive prompt.
--neg-prompt        Sets the negative prompt.
--steps             Sets the number of diffusion steps.
--save-latents      After the diffusion, saves the latents in the specified file.
--decoder-calibrate Calibrates the quantized version of the VAE decoder.
--decoder-fp16      During inference, uses the FP16 version of the VAE decoder.
--rpi               Configures the models to run on a Raspberry Pi Zero 2.
</code></pre></div>
<h2 tabindex="-1" dir="auto">Credits</h2>
<ul dir="auto">
<li>The Stable Diffusion implementation in <code>sd.cpp</code> is based on <a href="https://github.com/fengwang/Stable-Diffusion-NCNN">this project</a>, which in turn is based on <a href="https://github.com/EdVince/Stable-Diffusion-NCNN">this project</a> by @EdVince. The original code was modified in order to use OnnxStream instead of NCNN.</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TypeChat (455 pts)]]></title>
            <link>https://microsoft.github.io/TypeChat/blog/introducing-typechat/</link>
            <guid>36803124</guid>
            <pubDate>Thu, 20 Jul 2023 16:41:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://microsoft.github.io/TypeChat/blog/introducing-typechat/">https://microsoft.github.io/TypeChat/blog/introducing-typechat/</a>, See on <a href="https://news.ycombinator.com/item?id=36803124">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>

<p><em>July 20, 2023 by Anders Hejlsberg, Steve Lucco, Daniel Rosenwasser, Pierce Boggan, Umesh Madan, Mike Hopcroft, and Gayathri Chandrasekaran</em></p>
<p>In the last few months, we've seen a rush of excitement around the newest wave of large language models.
While chat assistants have been the most direct application, there's a big question around how to best integrate these models into existing app interfaces.</p>
<p>In other words, how do we <em>augment</em> traditional UI with natural language interfaces?
How do we use AI to take a user request and turn it into something our apps can operate on?
And how do we make sure our apps are safe, and doing work that developers and users alike can trust?</p>
<p>Today we're releasing <strong>TypeChat</strong>, an experimental library that aims to answer these questions.
It uses the type definitions in your codebase to retrieve structured AI responses that are type-safe.</p>
<p>You can get up and running with TypeChat today by running</p>
<pre tabindex="0"><code><span><span>npm install typechat</span></span>
<span><span></span></span></code></pre>
<p>and hooking it up with any language model to work with your app.</p>
<p>But let's first quickly explore why TypeChat exists.</p>
<h2>Pampering and Parsing</h2>
<p>The current wave of LLMs default to conversational <em>natural</em> language ‚Äî languages that humans communicate in like English.
Parsing natural language is an extremely difficult task, no matter how much you pamper a prompt with rules like "respond in the form a bulleted list".
Natural language might have structure, but it's hard for typical software to reconstruct it from raw text.</p>
<p>Surprisingly, we can ask LLMs to respond in the form of JSON, and they generally respond with something sensible!</p>
<blockquote>
<p><strong>User:</strong></p>
<p>Translate the following request into JSON.</p>
<blockquote>
<p>Could I get a blueberry muffin and a grande latte?</p>
</blockquote>
<p>Respond only in JSON like the following:</p>
<pre tabindex="0"><code><span><span>{</span></span>
<span><span>    </span><span>"items"</span><span>: [</span></span>
<span><span>        { </span><span>"name"</span><span>: </span><span>"croissant"</span><span>, </span><span>"quantity"</span><span>: </span><span>2</span><span>  },</span></span>
<span><span>        { </span><span>"name"</span><span>: </span><span>"latte"</span><span>, </span><span>"quantity"</span><span>: </span><span>1</span><span>, </span><span>"size"</span><span>: </span><span>"tall"</span><span> }</span></span>
<span><span>    ]</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p><strong>ChatBot:</strong></p>
<pre tabindex="0"><code><span><span>{</span></span>
<span><span>    </span><span>"items"</span><span>: [</span></span>
<span><span>        {</span></span>
<span><span>            </span><span>"name"</span><span>: </span><span>"blueberry muffin"</span><span>,</span></span>
<span><span>            </span><span>"quantity"</span><span>: </span><span>1</span></span>
<span><span>        },</span></span>
<span><span>        {</span></span>
<span><span>            </span><span>"name"</span><span>: </span><span>"latte"</span><span>,</span></span>
<span><span>            </span><span>"quantity"</span><span>: </span><span>1</span><span>,</span></span>
<span><span>            </span><span>"size"</span><span>: </span><span>"grande"</span></span>
<span><span>        }</span></span>
<span><span>    ]</span></span>
<span><span>}</span></span>
<span></span></code></pre>
</blockquote>
<p>This is good ‚Äî though this example shows the best-case response.
While examples can help guide structure, they don't define what an AI should return extensively, and they don't provide anything we can validate against.</p>
<h2>Just Add Types!</h2>
<p>Luckily <strong>types</strong> do precisely that.
What we've found is that because LLMs have seen so many type definitions in the wild, types also act as a great guide for how an AI should respond.
Because we're typically working with JSON ‚Äî <em>JavaScript</em> Object Notation ‚Äî and because it's is very near and dear to our hearts, we've been using TypeScript types in our prompts.</p>
<blockquote>
<p><strong>User:</strong></p>
<p>Translate the following request into JSON.</p>
<blockquote>
<p>Could I get a blueberry muffin and a grande latte?</p>
</blockquote>
<p>Respond only in JSON that satisfies the <code>Response</code> type:</p>
<pre tabindex="0"><code><span><span>type</span><span> </span><span>Response</span><span> = {</span></span>
<span><span>    </span><span>items</span><span>: </span><span>Item</span><span>[];</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> </span><span>Item</span><span> = {</span></span>
<span><span>    </span><span>name</span><span>: </span><span>string</span><span>;</span></span>
<span><span>    </span><span>quantity</span><span>: </span><span>number</span><span>;</span></span>
<span><span>    </span><span>size</span><span>?: </span><span>string</span><span>;</span></span>
<span><span>    </span><span>notes</span><span>?: </span><span>string</span><span>;</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p><strong>ChatBot:</strong></p>
<pre tabindex="0"><code><span><span>{</span></span>
<span><span>  </span><span>"items"</span><span>: [</span></span>
<span><span>    {</span></span>
<span><span>      </span><span>"name"</span><span>: </span><span>"blueberry muffin"</span><span>,</span></span>
<span><span>      </span><span>"quantity"</span><span>: </span><span>1</span></span>
<span><span>    },</span></span>
<span><span>    {</span></span>
<span><span>      </span><span>"name"</span><span>: </span><span>"latte"</span><span>,</span></span>
<span><span>      </span><span>"quantity"</span><span>: </span><span>1</span><span>,</span></span>
<span><span>      </span><span>"size"</span><span>: </span><span>"grande"</span></span>
<span><span>    }</span></span>
<span><span>  ]</span></span>
<span><span>}</span></span>
<span></span></code></pre>
</blockquote>
<p>This is pretty great!
TypeScript has shown that it's well-suited to precisely describe JSON.
But what happens when a language model stumbles and makes up a response that doesn't conform to our types?</p>
<p>Well because these types are valid TypeScript code, we can validate the response against them using the TypeScript compiler itself!
In fact, the error feedback from the compiler can even be used to guide repairs.
When put together, we can get a robust process for getting well-typed responses that our apps can further massage, validate with a user, etc.</p>
<p>In other words, <strong>types are all you need</strong>.</p>
<h2>Enter TypeChat</h2>
<p>The technique of combining a human prompt and a "response schema" is not necessarily unique ‚Äî but it is promising.
And as we've focused on translating user intent to structured data, we've found that TypeScript is very well-suited for the task.
We've grown more confident with this approach, and in order to prove it out, we're releasing a library called TypeChat to help make it easier to use in your apps.
<a href="https://npmjs.com/package/typechat">TypeChat is already on npm</a> if you want to try it now, and provides tools for prompt prototyping, schema validation, repair, and more.</p>
<p>Here's the basic code to hook TypeChat up to an LLM and decide if a sentence is negative, neutral, or positive.</p>
<pre tabindex="0"><code><span><span>// ./src/sentimentSchema.ts</span></span>
<span></span>
<span><span>// The following is a schema definition for determining the sentiment of a some user input.</span></span>
<span></span>
<span><span>export</span><span> </span><span>interface</span><span> </span><span>SentimentResponse</span><span> {</span></span>
<span><span>    </span><span>/** The sentiment of the text. */</span></span>
<span><span>    </span><span>sentiment</span><span>: </span><span>"negative"</span><span> | </span><span>"neutral"</span><span> | </span><span>"positive"</span><span>;</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<pre tabindex="0"><code><span><span>// ./src/main.ts</span></span>
<span></span>
<span><span>import</span><span> </span><span>*</span><span> </span><span>as</span><span> </span><span>fs</span><span> </span><span>from</span><span> </span><span>"fs"</span><span>;</span></span>
<span><span>import</span><span> </span><span>*</span><span> </span><span>as</span><span> </span><span>path</span><span> </span><span>from</span><span> </span><span>"path"</span><span>;</span></span>
<span><span>import</span><span> </span><span>dotenv</span><span> </span><span>from</span><span> </span><span>"dotenv"</span><span>;</span></span>
<span><span>import</span><span> </span><span>*</span><span> </span><span>as</span><span> </span><span>typechat</span><span> </span><span>from</span><span> </span><span>"typechat"</span><span>;</span></span>
<span><span>import</span><span> { </span><span>SentimentResponse</span><span> } </span><span>from</span><span> </span><span>"./sentimentSchema"</span><span>;</span></span>
<span></span>
<span><span>// Load environment variables.</span></span>
<span><span>dotenv</span><span>.</span><span>config</span><span>({ </span><span>path:</span><span> </span><span>path</span><span>.</span><span>join</span><span>(</span><span>__dirname</span><span>, </span><span>"../.env"</span><span>) });</span></span>
<span></span>
<span><span>// Create a language model based on the environment variables.</span></span>
<span><span>const</span><span> </span><span>model</span><span> = </span><span>typechat</span><span>.</span><span>createLanguageModel</span><span>(</span><span>process</span><span>.</span><span>env</span><span>);</span></span>
<span></span>
<span><span>// Load up the contents of our "Response" schema.</span></span>
<span><span>const</span><span> </span><span>schema</span><span> = </span><span>fs</span><span>.</span><span>readFileSync</span><span>(</span><span>path</span><span>.</span><span>join</span><span>(</span><span>__dirname</span><span>, </span><span>"sentimentSchema.ts"</span><span>), </span><span>"utf8"</span><span>);</span></span>
<span><span>const</span><span> </span><span>translator</span><span> = </span><span>typechat</span><span>.</span><span>createJsonTranslator</span><span>&lt;</span><span>SentimentResponse</span><span>&gt;(</span><span>model</span><span>, </span><span>schema</span><span>, </span><span>"SentimentResponse"</span><span>);</span></span>
<span></span>
<span><span>// Process requests interactively.</span></span>
<span><span>typechat</span><span>.</span><span>processRequests</span><span>(</span><span>"üòÄ&gt; "</span><span>, </span><span>/*inputFile*/</span><span> </span><span>undefined</span><span>, </span><span>async</span><span> (</span><span>request</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    </span><span>const</span><span> </span><span>response</span><span> = </span><span>await</span><span> </span><span>translator</span><span>.</span><span>translate</span><span>(</span><span>request</span><span>);</span></span>
<span><span>    </span><span>if</span><span> (!</span><span>response</span><span>.</span><span>success</span><span>) {</span></span>
<span><span>        </span><span>console</span><span>.</span><span>log</span><span>(</span><span>response</span><span>.</span><span>message</span><span>);</span></span>
<span><span>        </span><span>return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    </span><span>console</span><span>.</span><span>log</span><span>(</span><span>`The sentiment is </span><span>${</span><span>response</span><span>.</span><span>data</span><span>.</span><span>sentiment</span><span>}</span><span>`</span><span>);</span></span>
<span><span>});</span></span>
<span></span></code></pre>
<p>TypeChat can be used in a number of different ways.
The way we've discussed here so far is all about using a "data schema" to turn some user intent into a structured response;
however, TypeChat also makes it possible to use an "API schema" to construct basic programs.
We have some <a href="https://microsoft.github.io/TypeChat/docs/">docs</a> and <a href="https://microsoft.github.io/TypeChat/docs/examples/">examples</a> to get a sense of the different ways you can use TypeChat.</p>
<h2>Open and Pluggable</h2>
<p>First of all, TypeChat is open-source.
We're MIT-licensed and you can <a href="https://github.com/Microsoft/TypeChat">find us on GitHub</a> where we're eager to hear your thoughts, share our ideas, and build with you.</p>
<p>Second, TypeChat is built in a way that is meant to be model-neutral.
While we have some very basic integration with the OpenAI API and the Azure OpenAI service for convenience, this approach should work for any chat completion-style API that you want to use ‚Äî though note that at the moment, TypeChat works best with models that have been trained on both prose and code.</p>
<h2>Try It Today!</h2>
<p>We'd love to know if TypeChat is something that's useful and interests you!
As we mentioned, we'll be welcoming you on <a href="https://github.com/Microsoft/TypeChat">GitHub</a> if you have any question, suggestions, and more.</p>
<p>Happy Hacking!</p>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Ollama ‚Äì Run LLMs on your Mac (231 pts)]]></title>
            <link>https://github.com/jmorganca/ollama</link>
            <guid>36802582</guid>
            <pubDate>Thu, 20 Jul 2023 16:06:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/jmorganca/ollama">https://github.com/jmorganca/ollama</a>, See on <a href="https://news.ycombinator.com/item?id=36802582">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><div dir="auto">
  <themed-picture data-catalyst-inline="true"><picture>
    <source media="(prefers-color-scheme: dark)" height="200px" srcset="https://github.com/jmorganca/ollama/assets/3325447/56ea1849-1284-4645-8970-956de6e51c3c">
    <img alt="logo" height="200px" src="https://github.com/jmorganca/ollama/assets/3325447/0d0b44e2-8f4a-4e99-9b52-a5c1c741c8f7">
  </picture></themed-picture>
</div>
<h2 tabindex="-1" dir="auto">Ollama</h2>
<p dir="auto"><a href="https://discord.gg/ollama" rel="nofollow"><img src="https://camo.githubusercontent.com/ef368e35e49b20967e9a50d4d14f2eaa8beee7f7f608675f5ae21edd84e462e3/68747470733a2f2f646362616467652e76657263656c2e6170702f6170692f7365727665722f6f6c6c616d613f7374796c653d666c617426636f6d706163743d74727565" alt="Discord" data-canonical-src="https://dcbadge.vercel.app/api/server/ollama?style=flat&amp;compact=true"></a></p>
<blockquote>
<p dir="auto">Note: Ollama is in early preview. Please report any issues you find.</p>
</blockquote>
<p dir="auto">Run, create, and share large language models (LLMs).</p>
<h2 tabindex="-1" dir="auto">Download</h2>
<ul dir="auto">
<li><a href="https://ollama.ai/download" rel="nofollow">Download</a> for macOS on Apple Silicon (Intel coming soon)</li>
<li>Download for Windows and Linux (coming soon)</li>
<li>Build <a href="#building">from source</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Quickstart</h2>
<p dir="auto">To run and chat with <a href="https://ai.meta.com/llama" rel="nofollow">Llama 2</a>, the new model by Meta:</p>

<h2 tabindex="-1" dir="auto">Model library</h2>
<p dir="auto"><code>ollama</code> includes a library of open-source models:</p>
<table>
<thead>
<tr>
<th>Model</th>
<th>Parameters</th>
<th>Size</th>
<th>Download</th>
</tr>
</thead>
<tbody>
<tr>
<td>Llama2</td>
<td>7B</td>
<td>3.8GB</td>
<td><code>ollama pull llama2</code></td>
</tr>
<tr>
<td>Llama2 13B</td>
<td>13B</td>
<td>7.3GB</td>
<td><code>ollama pull llama2:13b</code></td>
</tr>
<tr>
<td>Orca Mini</td>
<td>3B</td>
<td>1.9GB</td>
<td><code>ollama pull orca</code></td>
</tr>
<tr>
<td>Vicuna</td>
<td>7B</td>
<td>3.8GB</td>
<td><code>ollama pull vicuna</code></td>
</tr>
<tr>
<td>Nous-Hermes</td>
<td>13B</td>
<td>7.3GB</td>
<td><code>ollama pull nous-hermes</code></td>
</tr>
<tr>
<td>Wizard Vicuna Uncensored</td>
<td>13B</td>
<td>7.3GB</td>
<td><code>ollama pull wizard-vicuna</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto">Note: You should have at least 8 GB of RAM to run the 3B models, 16 GB to run the 7B models, and 32 GB to run the 13B models.</p>
</blockquote>
<h2 tabindex="-1" dir="auto">Examples</h2>
<h3 tabindex="-1" dir="auto">Run a model</h3>
<div data-snippet-clipboard-copy-content="ollama run llama2
>>> hi
Hello! How can I help you today?"><pre><code>ollama run llama2
&gt;&gt;&gt; hi
Hello! How can I help you today?
</code></pre></div>
<h3 tabindex="-1" dir="auto">Create a custom model</h3>
<p dir="auto">Pull a base model:</p>

<p dir="auto">Create a <code>Modelfile</code>:</p>
<div data-snippet-clipboard-copy-content="FROM llama2

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

# set the system prompt
SYSTEM &quot;&quot;&quot;
You are Mario from Super Mario Bros. Answer as Mario, the assistant, only.
&quot;&quot;&quot;"><pre><code>FROM llama2

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

# set the system prompt
SYSTEM """
You are Mario from Super Mario Bros. Answer as Mario, the assistant, only.
"""
</code></pre></div>
<p dir="auto">Next, create and run the model:</p>
<div data-snippet-clipboard-copy-content="ollama create mario -f ./Modelfile
ollama run mario
>>> hi
Hello! It's your friend Mario."><pre><code>ollama create mario -f ./Modelfile
ollama run mario
&gt;&gt;&gt; hi
Hello! It's your friend Mario.
</code></pre></div>
<p dir="auto">For more examples, see the <a href="https://github.com/jmorganca/ollama/blob/main/examples">examples</a> directory.</p>
<h3 tabindex="-1" dir="auto">Pull a model from the registry</h3>

<h3 tabindex="-1" dir="auto">Listing local models</h3>

<h2 tabindex="-1" dir="auto">Model packages</h2>
<h3 tabindex="-1" dir="auto">Overview</h3>
<p dir="auto">Ollama bundles model weights, configuration, and data into a single package, defined by a <a href="https://github.com/jmorganca/ollama/blob/main/docs/modelfile.md">Modelfile</a>.</p>
<themed-picture data-catalyst-inline="true"><picture>
  <source media="(prefers-color-scheme: dark)" height="480" srcset="https://github.com/jmorganca/ollama/assets/251292/2fd96b5f-191b-45c1-9668-941cfad4eb70">
  <img alt="logo" height="480" src="https://github.com/jmorganca/ollama/assets/251292/2fd96b5f-191b-45c1-9668-941cfad4eb70">
</picture></themed-picture>
<h2 tabindex="-1" dir="auto">Building</h2>

<p dir="auto">To run it start the server:</p>

<p dir="auto">Finally, run a model!</p>

</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Banned journalism housed in virtual Minecraft architecture (2022) (186 pts)]]></title>
            <link>https://99percentinvisible.org/article/uncensored-library-virtual-minecraft-architecture-houses-banned-journalism/</link>
            <guid>36802021</guid>
            <pubDate>Thu, 20 Jul 2023 15:32:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://99percentinvisible.org/article/uncensored-library-virtual-minecraft-architecture-houses-banned-journalism/">https://99percentinvisible.org/article/uncensored-library-virtual-minecraft-architecture-houses-banned-journalism/</a>, See on <a href="https://news.ycombinator.com/item?id=36802021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <main>
                    <article id="article">
                            <header>
                
<h4>Article by Kurt Kohlstedt</h4>






              </header>
                            
              <div>
                <p>When schools ban books, the strategy often <a href="https://www.theguardian.com/education/2021/dec/23/us-book-bans-conservative-parents-reading" target="_blank" rel="noopener noreferrer">backfires</a> on would-be censors, resulting in greater interest around illicit literature. Similarly,&nbsp; when governments censor the media, groups like Reporters Without Borders spearhead efforts to make such censored material extra visible. Their <a href="https://www.uncensoredlibrary.com/en" target="_blank" rel="noopener noreferrer">Uncensored Library</a> project brings together architecture and journalism in an unlikely virtual reality space: the interactive gaming world of Minecraft.</p>
<p><a href="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-flags.jpg"><img decoding="async" src="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-flags-600x338.jpg" alt="" width="600" height="338" srcset="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-flags-600x338.jpg 600w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-flags-728x410.jpg 728w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-flags-300x169.jpg 300w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-flags.jpg 1280w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p>On the surface, Minecraft is a game of collaborative construction and its low-res look may not appear conducive to elements like: reading articles or even entire books in-game. But there are ‚Äúitems‚Äù within the game that effectively work like books with a theoretically infinite number of pages. Creators can transcribe text into these ‚Äúbooks,‚Äù rendering them legible and downloadable. The books are then put in ‚Äúchests‚Äù and organized in the virtual space for accessibility.</p>
<p><a href="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze.png"><img decoding="async" loading="lazy" src="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze-600x424.png" alt="" width="600" height="424" srcset="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze-600x424.png 600w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze-728x515.png 728w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze-300x212.png 300w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze-1536x1086.png 1536w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-gallery-maze.png 1920w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p>The idea, in part, is to work around normally filtered channels. The non-profit <a href="https://rsf.org/en" target="_blank" rel="noopener noreferrer">Reporters Without Borders</a> has experience on this front with projects like the audio-centric Uncensored Playlist, which evaded censors by operating through music streaming services. In the Uncensored Library, the spatial design makes finding material easier, and allows for other forms of creation and interaction as well, such as a memorial to murdered journalists housed within the library‚Äôs walls.</p>
<p><a href="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view.png"><img decoding="async" loading="lazy" src="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view-600x338.png" alt="" width="600" height="338" srcset="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view-600x338.png 600w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view-728x410.png 728w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view-300x169.png 300w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view-1536x864.png 1536w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-aerial-view.png 1920w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p>‚ÄúThe style is Classical and formal, the kind of architecture you‚Äôd see in the British Museum and New York Public Library,‚Äù says project lead James Delaney of Blockworks. ‚ÄúThat was deliberate, because this architectural style is usually used by governments to reinforce their own positions of authority.‚Äù The design team ‚Äúwanted to take that and turn it on its head. Yes, we‚Äôre using this formalistic, authoritarian style, but instead it‚Äôs filled with free information.‚Äù</p>
<p><a href="https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples.jpg"><img decoding="async" loading="lazy" src="https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples-600x331.jpg" alt="" width="600" height="331" srcset="https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples-600x331.jpg 600w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples-728x402.jpg 728w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples-300x166.jpg 300w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples-1536x848.jpg 1536w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-book-text-examples.jpg 2048w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p>‚ÄúThe <a href="https://99percentinvisible.org/episode/weeding-is-fundamental/">criteria for inclusion</a> is handled by Reporters Without Borders, which ensures the library‚Äôs content is accurate, truthful, and sensitive,‚Äù reports <a href="https://www.theverge.com/2020/3/18/21184041/minecraft-library-censored-journalism-reporters-without-borders" target="_blank" rel="noopener noreferrer">Cian Mahar</a>. And it seems to be working: the library gets regular visitors from countries where information is less than free, including Russia, Egypt, Mexico, Saudi Arabia, and Vietnam.</p>
<p><a href="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns.png"><img decoding="async" loading="lazy" src="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns-600x338.png" alt="" width="600" height="338" srcset="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns-600x338.png 600w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns-728x410.png 728w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns-300x169.png 300w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns-1536x864.png 1536w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-neoclassical-columns.png 1920w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p>Maps and flags adorn the interior of the virtual library‚Äôs architecture, highlighting regions where censorship is more pronounced and helping with virtual wayfinding within the stacks. The design choices are also made to welcome <a href="https://99percentinvisible.org/episode/goodnight-nobody/">younger audiences</a> who are familiar with Minecraft and help educate them about information suppression. Not all countries are taking this lying down ‚Äî some are pushing back, trying to get the main server banned. But as with most things on the internet: once the cat (gif) is out of the bag, it‚Äôs game over. Anyone can download and reupload the entire library to another server at any time.</p>
<p><a href="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument.png"><img decoding="async" loading="lazy" src="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument-600x424.png" alt="" width="600" height="424" srcset="https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument-600x424.png 600w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument-728x515.png 728w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument-300x212.png 300w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument-1536x1086.png 1536w, https://99percentinvisible.org/app/uploads/2022/02/uncensored-library-entry-monument.png 1920w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p><em><strong>From the <a href="https://www.uncensoredlibrary.com/en" target="_blank" rel="noopener noreferrer">Uncensored Library</a> website:</strong> </em>‚ÄúIn many countries, websites, social media and blogs are controlled by oppressive leaders. Young people, in particular, are forced to grow up in systems where their opinion is heavily manipulated by governmental disinformation campaigns. But even where almost all media is blocked or controlled, the world‚Äôs most successful computer game is still accessible. Reporters Without Borders (RSF) uses this loophole to bypass internet censorship to bring back the truth ‚Äì within Minecraft.‚Äù</p>

              </div>
              
          </article>
                  </main><!-- /.main -->
                  <!-- /.sidebar -->
              </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FedNow Is Live (991 pts)]]></title>
            <link>https://www.federalreserve.gov/newsevents/pressreleases/other20230720a.htm</link>
            <guid>36801491</guid>
            <pubDate>Thu, 20 Jul 2023 15:00:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.federalreserve.gov/newsevents/pressreleases/other20230720a.htm">https://www.federalreserve.gov/newsevents/pressreleases/other20230720a.htm</a>, See on <a href="https://news.ycombinator.com/item?id=36801491">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content" role="main">
    
    <div id="article">
            <div>
                
                <p>July 20, 2023</p>
                <h3>Federal Reserve announces that its new system for instant payments, the FedNow¬Æ Service, is now live</h3>              
                
                <p>For release at 10:00 a.m. EDT                     
                
                </p><ul>
                    
                </ul>
 
            </div>
            
            <div>
                
                <p>The Federal Reserve on Thursday announced that its new system for instant payments, the FedNow<sup>¬Æ </sup>Service, is now live. Banks and credit unions of all sizes can sign up and use this tool to instantly transfer money for their customers, any time of the day, on any day of the year.</p>

<p>"The Federal Reserve built the FedNow Service to help make everyday payments over the coming years faster and more convenient," said Federal Reserve Chair Jerome H. Powell. "Over time, as more banks choose to use this new tool, the benefits to individuals and businesses will include enabling a person to immediately receive a paycheck, or a company to instantly access funds when an invoice is paid."</p>

<p>To start, 35 early-adopting banks and credit unions, as well as the U.S. Department of the Treasury's Bureau of the Fiscal Service, are ready with instant payments capabilities via the FedNow Service. In addition, 16 service providers are ready to support payment processing for banks and credit unions.</p>

<p>When fully available, instant payments will provide substantial benefits for consumers and businesses, such as when rapid access to funds is useful, or when just-in-time payments help manage cash flows in bank accounts. For example, individuals can instantly receive their paychecks and use them the same day, and small businesses can more efficiently manage cash flows without processing delays. Over the coming years, customers of banks and credit unions that sign up for the service should be able to use their financial institution's mobile app, website, and other interfaces to send instant payments quickly and securely.</p>

<p>As an interbank payment system, the FedNow Service operates alongside other longstanding Federal Reserve payment services such as Fedwire<sup>¬Æ</sup> and FedACH<sup>¬Æ</sup>. The Federal Reserve is committed to working with the more than 9,000 banks and credit unions across the country to support the widespread availability of this service for their customers over time.</p>

<p>A list of early adopters with instant payment capabilities is attached. Additional information is available on the Federal Reserve Financial Services <a href="https://www.frbservices.org/financial-services/fednow/organizations">website</a>.</p>

<p>For media inquiries, please email <a href="https://www.federalreserve.gov/cdn-cgi/l/email-protection#254840414c44654357470b424a53"><span data-cfemail="375a52535e567751455519505841">[email&nbsp;protected]</span></a> or call 202-452-2955.</p>
                  
                                
                             
            </div>
            
        </div>
    <div>
        <p>Last Update:
            July 20, 2023
        </p>
        
    </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[JPEG XL: How It Started, How It‚Äôs Going (355 pts)]]></title>
            <link>https://cloudinary.com/blog/jpeg-xl-how-it-started-how-its-going</link>
            <guid>36801448</guid>
            <pubDate>Thu, 20 Jul 2023 14:57:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cloudinary.com/blog/jpeg-xl-how-it-started-how-its-going">https://cloudinary.com/blog/jpeg-xl-how-it-started-how-its-going</a>, See on <a href="https://news.ycombinator.com/item?id=36801448">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
<p>Last month at the annual Worldwide Developers Conference, Apple announced its support of JPEG XL. As someone who helped create JPEG XL, I don‚Äôt think anyone was more pleased than me to hear this news.</p>



<p>For a standard that‚Äôs not even three years old, this was a major win. Or rather, it‚Äôs a win for the web community, for photographers and artists, as well as for those of us who created the codec.</p>



<p>Before diving into what the Apple announcement means for JPEG XL moving forward, let‚Äôs take a quick look at its origin.</p>








<p>JPEG XL development began in 2018, when the JPEG committee launched a call for proposals on next-generation image compression, to which seven proposals were submitted. Of the seven two stood out: Google‚Äôs PIK and Cloudinary‚Äôs FUIF proposal. The ingredients from both proposals were eventually combined and refined to design a new codec that was better than the sum of its parts.</p>



<p>By the end of 2020, the main technical work was done and the bitstream was frozen, i.e., no more changes would be made that would change the format from the decoder point of view.</p>



<p>In November 2020 Cloudinary added JXL support and early in 2021, I wrote the blog post <a href="https://cloudinary.com/blog/time_for_next_gen_codecs_to_dethrone_jpeg" target="_blank" rel="noreferrer noopener">Time for Next-Gen Codecs to Dethrone JPEG</a>. In the piece I argued that modern codecs like JPEG XL can bring many benefits, and expressed the hope that they would be widely adopted.</p>



<p>In early April 2021, the Chrome browser added experimental support (behind a flag), even before the JPEG XL standard was officially published. (The final draft had been submitted to ISO, but it would still take until March 2022 before it was approved and published as the international standard ISO/IEC 18181.) Firefox followed suit quickly and added experimental support. Things were looking good.</p>



<p>Then, on Halloween 2022, Chrome developers suddenly announced that they would be removing JPEG XL support. This decision was quite unexpected and controversial. In my blog <a href="https://cloudinary.com/blog/the-case-for-jpeg-xl" target="_blank" rel="noreferrer noopener">The Case for JPEG XL</a>, I argued why this decision should be reversed. In December, Chrome developers provided test results that were used to justify the decision and invited feedback. I analyzed the results and <a href="https://cloudinary.com/blog/contemplating-codec-comparisons" target="_blank" rel="noreferrer noopener">pointed out</a> several methodological flaws and oversights. So far, my feedback has been ignored.</p>



<p>Beyond browsers, adoption of JPEG XL continued, in particular in image authoring software like Serif Affinity, Adobe Camera Raw, GIMP, Krita, etc. Unfortunately, Chrome‚Äôs decision has slowed wider adoption in web browsers of JPEG XL.</p>








<p>On June 5, 2023, at Apple‚Äôs annual Worldwide Developers Conference (WWDC23), a slide was presented listing new features of the Safari browser, and ‚ÄúJPEG XL‚Äù was on the slide. Not only is Safari 17 adding JPEG XL support, the new versions of iOS, iPadOS, macOS, watchOS, and visionOS will support JPEG XL.</p>



<figure><img width="1999" height="1124" decoding="async" loading="lazy" src="https://res.cloudinary.com/cloudinary-marketing/images/w_1999,h_1124/f_auto,q_auto/v1689095239/Web_Assets/blog/JPEG-XL_2/JPEG-XL_2-png?_i=AA" alt="speaker presenting new Safari browser features, with &quot;JPEG XL&quot; listed" data-public-id="Web_Assets/blog/JPEG-XL_2.png" data-format="png" data-transformations="f_auto,q_auto" data-version="1689095239" srcset="https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689095239/Web_Assets/blog/JPEG-XL_2/JPEG-XL_2-png?_i=AA 1999w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689095239/Web_Assets/blog/JPEG-XL_2/JPEG-XL_2-png?_i=AA 300w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689095239/Web_Assets/blog/JPEG-XL_2/JPEG-XL_2-png?_i=AA 768w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689095239/Web_Assets/blog/JPEG-XL_2/JPEG-XL_2-png?_i=AA 1024w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689095239/Web_Assets/blog/JPEG-XL_2/JPEG-XL_2-png?_i=AA 1536w" sizes="(max-width: 1999px) 100vw, 1999px"></figure>



<p>This was unexpectedly good news. None of the JPEG XL developers had anticipated that the first browser to support this format that was co-created by Google, would be Safari. This is, of course, great news for the adoption of JPEG XL and leads me to think the momentum is back!</p>








<p>Image compression is a crucial part of what we do at Cloudinary, and for that we need a deep understanding of when to use what codec ‚Äî or rather, what encoder and settings. For that reason, we did a large experiment to create the Cloudinary Image Dataset (CID22), a big dataset of human-annotated compressed images. This helps us to better understand the impact compression has on perceptual quality.</p>



<p>Comparing image encoders is not an easy task. The distortions caused by different encoders are different and it is hard to predict the perceived image quality. Subjective testing is still the gold standard of image quality assessment and the testing methodology is still an active area of research, in which Cloudinary participates. (For example, in the AIC-3 project of the JPEG committee.)</p>



<p>Based on datasets of human-annotated images, objective metrics like SSIMULACRA 2 can be validated. While not perfect, metrics can be used at scale to test many more images and encoder configurations than what would be feasible in a subjective experiment.</p>



<p>In image compression, there is a trade-off to be made between three things:</p>



<ul>
<li><strong>Compression.</strong> How much can the file size be reduced?</li>



<li><strong>Quality. </strong>To what extent is the image degraded in visual quality?</li>



<li><strong>Speed. </strong>How long does it take to encode an image?</li>
</ul>



<p>The importance of these elements is relative to one another and depends on the specific use case. For the same visual quality, we can look at the performance of various encoders in terms of compression and speed. We use the SSIMULACRA v2.1 metric as an indicator of visual quality on the horizontal axis. On the vertical axis, we have the compression performance (as a percentage saving compared to unoptimized 4:4:4 JPEG) on the main plot on the left hand side. On the plot on the right hand side we have encoding speed expressed in megapixels per second (when using a single cpu core). The plot shows JPEG XL (red), AVIF/libaom (yellow), WebP (green) and mozjpeg (white), each at their default speed setting. The dotted lines use 4:2:0 chroma subsampling (yuv420) while the full lines use 4:4:4 (yuv444). The range goes from a very low quality (around q30 in libjpeg terms) to a very high quality (around q95 in libjpeg terms).</p>



<figure><img width="1999" height="1347" decoding="async" loading="lazy" src="https://res.cloudinary.com/cloudinary-marketing/images/w_1999,h_1347/f_auto,q_auto/v1689094929/Web_Assets/blog/JPEG-XL_1/JPEG-XL_1-png?_i=AA" alt="graph showing compression, quality, and encode speed trade-offs according to SSIMULACRA_2.1" data-public-id="Web_Assets/blog/JPEG-XL_1.png" data-format="png" data-transformations="f_auto,q_auto" data-version="1689094929" srcset="https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689094929/Web_Assets/blog/JPEG-XL_1/JPEG-XL_1-png?_i=AA 1999w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689094929/Web_Assets/blog/JPEG-XL_1/JPEG-XL_1-png?_i=AA 300w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689094929/Web_Assets/blog/JPEG-XL_1/JPEG-XL_1-png?_i=AA 768w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689094929/Web_Assets/blog/JPEG-XL_1/JPEG-XL_1-png?_i=AA 1024w, https://res.cloudinary.com/cloudinary-marketing/images/f_auto,q_auto/v1689094929/Web_Assets/blog/JPEG-XL_1/JPEG-XL_1-png?_i=AA 1536w" sizes="(max-width: 1999px) 100vw, 1999px"><figcaption><em>Compression gains and encode speed for JPEG XL (red), AVIF (yellow), WebP (green) and mozjpeg (white), compared to unoptimized JPEG</em></figcaption></figure>



<p>The plot shows aggregated data corresponding to about 300 different source images. Some conclusions:</p>



<ul>
<li>WebP does bring a significant gain compared to unoptimized JPEG: a saving of 25 to 35% at the lower end of the quality spectrum, though at the higher end the savings diminish, mostly because WebP‚Äôs forced limited-range yuv420 does become a limiting factor (at q90+, it struggles to even reach the quality of JPEG, which can do full-range yuv444).</li>



<li>Compared to the optimized mozjpeg encoder though, which also brings significant gains compared to unoptimized JPEG, the additional gains WebP brings are not as large: only about 3 to 5% additional savings.</li>



<li>AVIF does bring a significant additional saving over WebP of about 10 to 15%. Moreover, since AVIF does not have forced yuv420, it can still bring significant savings over unoptimized JPEG even in the high-quality range, unlike WebP. However, these savings do come at a cost in speed: AVIF encoding at default speed is an order of magnitude slower than WebP or mozjpeg.</li>



<li>JPEG XL brings an additional saving over AVIF of about 5 to 10%. The additional saving is larger in the high-quality range than in the lower-quality range. Moreover, it does this at a more reasonable speed.</li>
</ul>








<p>Because Cloudinary was involved in the development of JPEG XL, we were the first to provide support. To convert an image to JXL with Cloudinary, simply add <code>f_jxl</code> to the url or change its extension to <code>.jxl</code>. Especially if you have significant traffic from visitors using iOS or Safari, it will likely be worthwhile to serve JPEG XL images (as soon as the new iOS and Safari have landed), even if you still need AVIF, WebP, or JPEG fallbacks for other visitors.</p>



<p>While in terms of average compression performance, JPEG XL is currently the best codec available, there is a lot of image-dependent variation. For some images, JPEG XL is a lot better than the other codecs, while for other images, AVIF is better than JPEG XL. For this reason, we are currently working on an AI-powered new version of our <code>f_auto,q_auto</code> feature, which can automatically select the optimal format to use on an image-by-image basis.</p>



<p>Have any questions or want to discuss the topic of this blog in greater detail? The <a href="https://community.cloudinary.com/" target="_blank" rel="noreferrer noopener">Cloudinary Community</a> is a great place to share your questions, ideas, and suggestions. You can also ping me on the <a href="https://discord.gg/cloudinary" target="_blank" rel="noreferrer noopener">Cloudinary Community Discord server</a> here: Jon: @_wb_</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Become Ungoogleable (267 pts)]]></title>
            <link>https://joeyh.name/blog/entry/become_ungoogleable/</link>
            <guid>36800789</guid>
            <pubDate>Thu, 20 Jul 2023 14:16:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://joeyh.name/blog/entry/become_ungoogleable/">https://joeyh.name/blog/entry/become_ungoogleable/</a>, See on <a href="https://news.ycombinator.com/item?id=36800789">Hacker News</a></p>
<div id="readability-page-1" class="page"><article class="page">







<section id="pagebody" role="main">
<p>I've <a href="https://joeyh.name/robots.txt">removed my website from indexing by Google</a>.
The proximate cause is Google's new effort to
<a href="https://github.com/RupertBenWiser/Web-Environment-Integrity/blob/main/explainer.md">DRM the web</a>,
but there is of course so much more.</p>

<p>This is a unique time, when it's actually feasible to become ungoogleable
without losing much. Nobody really expects to be able to find anything of
value in a Google search now, so if they're looking for me or something I've
made and don't find it, they'll use some other approach.</p>

<p>I've looked over the kind of traffic that Google refers to my website, and
it will not be a significant loss even if those people fail to find me by
some other means. Over 30% of the traffic to this website is rss feeds.
Google just doesn't matter on the modern web.</p>

<p>The web will end one day. But let's not let Google kill it.</p>

</section>



</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple says it'll remove iMessage and FaceTime in UK rather than break encryption (1380 pts)]]></title>
            <link>https://9to5mac.com/2023/07/20/apple-imessage-facetime-remove-security-law/</link>
            <guid>36800297</guid>
            <pubDate>Thu, 20 Jul 2023 13:41:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://9to5mac.com/2023/07/20/apple-imessage-facetime-remove-security-law/">https://9to5mac.com/2023/07/20/apple-imessage-facetime-remove-security-law/</a>, See on <a href="https://news.ycombinator.com/item?id=36800297">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					
<figure>
			<img src="https://9to5mac.com/wp-content/uploads/sites/6/2022/06/iMessage-edit-victim.png?w=1600" srcset="https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2022/06/iMessage-edit-victim.png?w=320&amp;quality=82&amp;strip=all&amp;ssl=1 320w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2022/06/iMessage-edit-victim.png?w=640&amp;quality=82&amp;strip=all&amp;ssl=1 640w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2022/06/iMessage-edit-victim.png?w=1024&amp;quality=82&amp;strip=all&amp;ssl=1 1024w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2022/06/iMessage-edit-victim.png?w=1500&amp;quality=82&amp;strip=all&amp;ssl=1 1500w" width="1600" height="800" alt="iMessage" fetchpriority="high">
	
	</figure>

<p>Facing possible legislation that would require messaging services to offer backdoors in end-to-end encryption, Apple is saying it would rather remove apps like iMessage and FaceTime entirely from the UK market (<a href="https://www.bbc.co.uk/news/technology-66256081">via BBC News</a>).</p>



<p>The new Online Safety Bill is currently under review. Apple, WhatsApp, Signal, and other services have voiced their opposition to the proposal.</p>



<p>The UK government <a href="https://9to5mac.com/2023/06/27/apple-online-safety-bill-encryption/">wants the ability to scan end-to-end encrypted messages</a>, for child-abuse material and other illegal content. They argue the existing law accommodates this but is technically outdated by the security provisions of modern technology.</p>



<p>Apple has submitted a nine-page opposition to the planned bill. It strongly objects to requirements such as backdoors for end-to-end encryption, reporting changes to product security features before they are released and being forced to disable security features before an appeals process can take place.</p>



<p>The company said it would not make changes for one country that would weaken security for all of its users, threatening instead to disable iMessage and FaceTime for UK customers.</p>



<p>The proposed law is currently undergoing an eight-week consultation period. Obviously, Apple and others hope the government will revise the bill in response to the criticism.</p>



<p><a href="https://9to5mac.com/2022/12/07/apple-confirms-that-it-has-stopped-plans-to-roll-out-csam-detection-system/">Apple previously withdrew plans</a> for its own CSAM-scanning feature for iCloud Photos, following pushback from customers and human rights groups. Apple‚Äôs solution was more privacy-preserving than what is now proposed by the UK government.</p>
	<p>
		<a target="_blank" rel="nofollow" href="https://news.google.com/publications/CAAqBggKMLOFATDAGg?hl=en-US&amp;gl=US&amp;ceid=US:en">
			<em>Add 9to5Mac to your Google News feed.</em>&nbsp;
					</a>
	</p>
	<div><p><em>FTC: We use income earning auto affiliate links.</em> <a href="https://9to5mac.com/about/#affiliate">More.</a></p><p><a href="https://bit.ly/3PWlVJb"><img src="https://9to5mac.com/wp-content/uploads/sites/6/2023/07/PRBanner750x1501-1.png" alt="" width="750" height="150"></a></p></div>				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Accidentally Load Bearing (386 pts)]]></title>
            <link>https://www.jefftk.com/p/accidentally-load-bearing</link>
            <guid>36800151</guid>
            <pubDate>Thu, 20 Jul 2023 13:29:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jefftk.com/p/accidentally-load-bearing">https://www.jefftk.com/p/accidentally-load-bearing</a>, See on <a href="https://news.ycombinator.com/item?id=36800151">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<div>

    <p><span>

Sometimes people will talk about Chesterton's Fence, the idea that if
you want to change something‚Äîremoving an apparently useless
fence‚Äîyou should first determine why it was set up that way:

</span></p>
<blockquote>

The gate or fence did not grow there. It was not set up by
somnambulists who built it in their sleep. It is highly improbable
that it was put there by escaped lunatics who were for some reason
loose in the street. Some person had some reason for thinking it would
be a good thing for somebody. And until we know what the reason was,
we really cannot judge whether the reason was reasonable. It is
extremely probable that we have overlooked some whole aspect of the
question, if something set up by human beings like ourselves seems to
be entirely meaningless and mysterious. ‚Äî <i>G. K. Chesterton, The
Drift From Domesticity</i>

</blockquote>

<p>

Figuring out something's designed purpose can be helpful in evaluating
changes, but a risk is that it puts you in a frame of mind where what
matters is the role the original builders intended.

</p>
<p>

A few years ago I was <a href="https://www.jefftk.com/p/bathroom-construction-framing">rebuilding a bathroom in our
house</a>, and there was a vertical stud that was in the way.  I could
easily tell why it was there: it was part of a partition for a closet.
And since I knew its designed purpose and no longer needed it for
that anymore, the Chesterton's Fence framing would suggest that it was
fine to remove it.  Except that over time it had become accidentally
load bearing: through other (ill conceived) changes to the structure
this stud was now helping hold up the second floor of the house.  In
addition to considering why something was created, you also need to
consider what additional purposes it may have since come to serve.

</p>
<p>

This is a concept I've run into a lot when making changes to complex
computer systems.  It's useful to look back through the change
history, read original design documents, and understand why a
component was built the way it was.  But you also need to look closely
at how the component integrates into the system today, where it can
easily have taken on additional roles.

  </p>
</div>


  
<p>Comment via: <a href="https://www.facebook.com/jefftk/posts/pfbid02i81EvJpGSRdnfgT8kbtgPtFKJ4t9c4uYCnNvwmZiCyVvYLbcVKkshj9YkoC1at3Zl">facebook</a>, <a href="https://lesswrong.com/posts/QBeN49SoKpDMX3kKk">lesswrong</a>, <a href="https://news.ycombinator.com/item?id=36800151">hacker news</a>, <a href="https://mastodon.mit.edu/@jefftk/110707644099272630">mastodon</a></p>

</div><section>
  <h3>Recent posts on blogs I like:</h3>
  <section>
    
    <div>
      <h4>
        <a href="https://www.lilywise.com/fiddle">Fiddle</a>
      </h4>
      <p>
  

I first started playing fiddle when I was five, just around my
birthday.  I had really wanted a fiddle because I wanted to learn how
to play it and my parents got me one for my birthday so I started
taking lessons.  Though after a couple of lessons I start‚Ä¶</p>
      <p><small>
        via <a href="https://www.lilywise.com/">Lily Wise's Blog Posts</a>
      </small>
      <small>July 13, 2023</small>
    </p></div>
    
    <div>
      <h4>
        <a href="https://juliawise.net/the-best-kind-of-music-to-learn-is-social-music/">The best kind of music to learn is social music</a>
      </h4>
      <p>Will they ever stay up late playing this kind of music for fun?
The post The best kind of music to learn is social music appeared first on Otherwise.
</p>
      <p><small>
        via <a href="https://juliawise.net/">Otherwise</a>
      </small>
      <small>July 1, 2023</small>
    </p></div>
    
    <div>
      <h4>
        <a href="https://lincolnquirk.com/2023/07/01/altruist_perks.html">Why altruists can‚Äôt have nice things</a>
      </h4>
      <p>I posted this on the Effective Altruism forum as part of the EA Strategy Fortnight. I‚Äôm cross posting it here.</p>
      <p><small>
        via <a href="https://lincolnquirk.com/">Home</a>
      </small>
      <small>July 1, 2023</small>
    </p></div>
    
  </section>
  <p>
    <a href="https://www.jefftk.com/ring">more</a>
    &nbsp;&nbsp;&nbsp;
    (<a href="https://git.sr.ht/~sircmpwn/openring">via openring</a>)
  </p>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Crazily Unconstitutional New Laws Trying to Criminalize Filming Cops (183 pts)]]></title>
            <link>https://slate.com/news-and-politics/2023/07/jarrell-garris-bodycam-footage-filming-cops-law-indiana-florida.html</link>
            <guid>36800144</guid>
            <pubDate>Thu, 20 Jul 2023 13:29:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://slate.com/news-and-politics/2023/07/jarrell-garris-bodycam-footage-filming-cops-law-indiana-florida.html">https://slate.com/news-and-politics/2023/07/jarrell-garris-bodycam-footage-filming-cops-law-indiana-florida.html</a>, See on <a href="https://news.ycombinator.com/item?id=36800144">Hacker News</a></p>
<div id="readability-page-1" class="page"><article data-uri="slate.com/_components/article/instances/clka449ke00bvmgm5svypmy3c@published" data-has-roadblock="false" data-rubric="jurisprudence" itemscope="" itemtype="http://schema.org/Article">
  

  

<header>

  <a href="https://slate.com/news-and-politics/jurisprudence">      Jurisprudence</a>

  




    </header>
<div>
      <figure data-uri="slate.com/_components/image/instances/clka449ke00bomgm59by9x02o@published" data-editable="imageInfo"><p><img loading="lazy" src="https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0" alt="Someone filming a line of cops in riot gear on a tablet." width="1560" height="1040" srcset="https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=320 320w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=480 480w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=600 600w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=840 840w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=960 960w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1280 1280w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1440 1440w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1600 1600w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1920 1920w,
https://compote.slate.com/images/f0a31aa6-3b1a-4232-93a1-a0fe017851ed.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=2200 2200w">
        
      </p>
<figcaption>
<span>Videos like this give justice a fighting chance.</span>
<span>Ramin Talaie/Corbis via Getty Images</span>
</figcaption>
</figure>

  </div>
  

  <section>
      


      

    <div itemprop="mainEntityOfPage">
          <p data-word-count="102" data-uri="slate.com/_components/slate-paragraph/instances/clka449ke00bpmgm5yclnkvuw@published">Few seem to have noticed that a dangerous legislative campaign is underway. Its aim: to shield police brutality by shutting down our cameras. On July 1, an Indiana law <a href="https://iga.in.gov/pdf-documents/123/2023/house/bills/HB1186/HB1186.05.ENRS.pdf">went into effect</a> making it a crime to come within 25 feet of an on-duty police officer if ordered to stay back. Legislators in <a href="https://www.flsenate.gov/Session/Bill/2023/1539/BillText/c2/PDF">Florida</a>, <a href="https://legis.la.gov/legis/ViewDocument.aspx?d=1329883">Louisiana</a>, and <a href="https://legislation.nysenate.gov/pdf/bills/2021/s3464">New York</a> have produced similar laws. Other states have promised to follow suit. Under these laws, if you come close enough to film a police officer beating someone up, there‚Äôs a good chance you‚Äôll spend two months in jail and end up with a criminal record.</p>

  

  <p data-word-count="92" data-uri="slate.com/_components/slate-paragraph/instances/clka44kg9000r3b6w7a1kmxpd@published">In 2023 alone, the police have killed <a href="https://mappingpoliceviolence.org/">more than 500 people</a> in the United States. Among them was <a href="https://www.nytimes.com/2023/07/13/nyregion/new-rochelle-police-shooting-jarrell-garris.html">Jarrell Garris</a>, who died last week in New Rochelle, New York, after police shot him during an arrest for allegedly stealing a banana and some grapes. Garris was unarmed, and tackled by three officers, handcuffed, and shot. The police claim he was reaching for an officer‚Äôs gun. They‚Äôve released bodycam footage <a href="https://www.youtube.com/watch?v=KhrQl2BBLus">that mysteriously stops</a> just before the shooting. They want to make sure you don‚Äôt see exactly what happened. So do the new laws.</p>

  



  <p data-word-count="74" data-uri="slate.com/_components/slate-paragraph/instances/clka44kkg000s3b6woijmcqf3@published">The Indiana, Florida, and Louisiana laws are only the most recent offensives in an ongoing campaign to shield police violence. As the Black Lives Matter protests caught fire in 2020, right-wing organizations jumped into action. They had three goals: quell the protests; silence critics of the police; and keep scenes like George Floyd‚Äôs murder out of the public eye, freeing up officers like convicted murderer Derek Chauvin to use traditional techniques to break suspects.</p>

  


  <p data-word-count="100" data-uri="slate.com/_components/slate-paragraph/instances/clka44kos000t3b6wqxef7e18@published">These efforts have been a resounding success. In the wake of the protests, 42 states have enacted laws <a href="https://www.icnl.org/usprotestlawtracker/">creating extra penalties</a> for protesters, with new crimes such as ‚Äúaggravated riot‚Äù and ‚Äúmob intimidation.‚Äù Many states have passed hate-speech laws that <a href="https://scholarship.law.campbell.edu/cgi/viewcontent.cgi?article=1695&amp;context=clr">protect the police</a> from verbal or symbolic abuse, such as stomping on a ‚ÄúBack the Blue‚Äù sign while ‚Äúsmirking in an intimidating manner‚Äù (the crime for which a woman in Utah <a href="https://www.npr.org/2021/07/15/1016431004/a-woman-is-facing-a-hate-crime-charge-for-stomping-on-a-back-the-blue-sign-in-ut">was prosecuted</a>). Although some of these laws have been vetoed or deemed unconstitutional, their promoters have only grown more brazen. The Indiana, Louisiana, and Florida laws are the result.</p>

  


  <p data-word-count="76" data-uri="slate.com/_components/slate-paragraph/instances/clka44kr8000u3b6wuq8ceyv9@published">These laws take their cue not only from the anti-protest and police protection laws but from a 2022 <a href="https://www.azleg.gov/legtext/55leg/2R/bills/HB2319S.pdf">Arizona law</a> making it a crime to film the police from 8 feet or closer. That law‚Äôs sponsor, then‚Äìstate Rep. John Kavanagh (a former police officer), was frank about his intentions. ‚ÄúThere are groups hostile to the police that follow them around to <a href="https://www.azcentral.com/story/opinion/op-ed/2022/03/24/hb-2319-videotape-police-8-feet-during-violent-encounters/7130071001/">videotape police incidents</a>,‚Äù he declared. The new law would put a stop to this nuisance.</p>

  


  


  


  <p data-word-count="59" data-uri="slate.com/_components/slate-paragraph/instances/clka44ktm000v3b6wl4r9ygn7@published">After the bill passed, the <a href="https://www.aclu.org/cases/arizona-broadcasters-association-v-brnovich#:~:text=Summary,accountability%20tools%20against%20police%20wrongdoing.">ACLU and 10 media organizations</a> sued, arguing that the law was a patent violation of the First Amendment. Federal District Court Judge John Tuchi agreed, <a href="https://www.acluaz.org/sites/default/files/2319_pi_order_9.9.22.pdf">issuing a preliminary injunction</a>. We have a clearly established constitutional right to record the police, he explained. Allowing the law to stand for even a moment ‚Äúconstitutes irreparable injury.‚Äù</p>

  <p data-word-count="55" data-uri="slate.com/_components/slate-paragraph/instances/clka44kwc000w3b6wx4geiizh@published">The law may not stand. But <a href="https://www.azcentral.com/story/news/local/arizona/2022/09/09/federal-judge-halts-arizona-ban-filming-police-within-8-feet/8035972001/">Kavanagh has vowed</a> that if it is ruled unconstitutional, he will simply redraft it. ‚ÄúIf the judge says, you know, ‚ÄòThis is bad because of X,‚Äô next year, though, the bill will come in ‚ÄòBill minus X.‚Äô ‚Äù In short, he will massage it to make it <em>appear</em> constitutional.</p>

  <p data-word-count="92" data-uri="slate.com/_components/slate-paragraph/instances/clka44kyl000x3b6w5sscdsff@published">This is precisely what Indiana, Florida, and Louisiana have tried to do. Anticipating constitutional objections, the new laws don‚Äôt mention video. ‚ÄúAny suggestion that this ‚Ä¶ denies somebody the opportunity to film is just not accurate,‚Äù protests the Louisiana law‚Äôs sponsor, <a href="https://lailluminator.com/2023/05/09/bill-that-would-make-it-illegal-to-be-within-25-feet-of-police-advances-to-house-floor/">state Rep. Mike Johnson</a>, who wrote the bill on behalf of the Fraternal Order of Police. (The Louisiana Fraternal Order named Johnson <a href="https://www.kalb.com/2022/07/27/rep-mike-johnson-recognized-legislator-year/">legislator of the year</a> in 2022.) The new law, he insists, merely creates ‚Äúa bodily separation‚Äù that prevents ‚Äúanyone, friend or foe,‚Äù from ‚Äúwalking up to‚Äù officers and interfering.</p>

  


  


  <p data-word-count="57" data-uri="slate.com/_components/slate-paragraph/instances/clka44l2m000y3b6wcl9voher@published">Such claims should fool no one. ‚ÄúCops have long tried claiming that [filming them] <a href="https://reason.com/2021/07/27/florida-bill-criminalize-filming-cops-first-amendment/">obstructs their ability</a> to do their job,‚Äù observes First Amendment lawyer Ari Cohn. ‚ÄúNow that this argument failed, they are ‚Ä¶ transparently trying to create a safe space from observation.‚Äù The new laws are nothing but ‚Äúa targeted assault on First Amendment activity.‚Äù</p>

  


  <p data-word-count="94" data-uri="slate.com/_components/slate-paragraph/instances/clka44l50000z3b6w2k844ec1@published">The new laws don‚Äôt in fact criminalize interference (already illegal in all 50 states). They criminalize only the proximity necessary for filming. They give police the <a href="https://www.reentry.net/ny/help/item.2915-Getting_Property_Back_After_an_Arrest#:~:text=Safekeeping%3A%20your%20property%20can%20be,related%20to%20an%20ongoing%20case.">right to seize</a> cameras in the no-approach zone. They create a visual and auditory buffer likely to produce reasonable doubt in the courtroom. Is the officer‚Äôs knee on the suspect‚Äôs shoulder, or on his windpipe? Is the suspect fighting, or flailing? From 25 feet, with officers blocking visibility, phone cameras can‚Äôt capture crucial details. From 25 feet, they can‚Äôt capture choking sounds or someone crying ‚ÄúI can‚Äôt breathe.‚Äù</p>

  


  

  <p data-word-count="92" data-uri="slate.com/_components/slate-paragraph/instances/clka44l7y00103b6wfrfvhi05@published">By now, we shouldn‚Äôt be surprised that the footage released by New Rochelle police contained critical gaps. Videos give the lie to official reports. The fatal shooting of <a href="https://www.nytimes.com/2023/06/28/world/europe/france-police-shooting-paris-nanterre.html">Nahel Merzouk</a> in France on June 27 offers an object lesson. The police initially claimed they shot Merzouk because he was driving his car directly at them, but the video <a href="https://www.youtube.com/watch?v=YSfcLfoNkFk">shows him driving away</a>. Such lies are routine in the United States: We were told that <a href="https://pix11.com/news/exclusive-police-report-in-eric-garners-death-conflicts-with-videos-witnesses/">Eric Garner</a> died of a heart attack and <a href="https://www.cnn.com/2021/04/21/us/minneapolis-police-george-floyd-death/index.html">George Floyd</a> of ‚Äúmedical distress.‚Äù Then we saw the videos.</p>

  


  


  <p data-word-count="27" data-uri="slate.com/_components/slate-paragraph/instances/clka44lcs00113b6wakreh9nm@published">Such videos may be imperfect witnesses. Prosecutors may ignore them, attorneys may manipulate them, judges and jurors may misread them. But they give justice a fighting chance.</p>

  <p data-word-count="89" data-uri="slate.com/_components/slate-paragraph/instances/clka44lew00123b6w39kpejke@published">The Florida bill, backed by Gov. Ron DeSantis, is likely to be passed at the next legislative session. <a href="https://www.kalb.com/2023/06/28/gov-edwards-vetoes-state-rep-mike-johnsons-house-bill-85/">Johnson will reintroduce</a> the Louisiana bill after the Democratic governor who vetoed it leaves office in January. These new laws are marching forward, one state at a time. They are brazen attempts to silence protest, designed to dodge the Constitution and cover up criminal violence. They are assaults on the First Amendment‚Äôs central function, the sine qua non of democracy: the freedom to protest abuses of power. They must not <span>pass.</span></p>

  

  

</div>

      <ul>
<li>
            <a href="https://slate.com/tag/black-lives-matter">
              Black Lives Matter
            </a>
          </li><li>
            <a href="https://slate.com/tag/criminal-justice">
              Criminal Justice
            </a>
          </li><li>
            <a href="https://slate.com/tag/florida">
              Florida
            </a>
          </li><li>
            <a href="https://slate.com/tag/indiana">
              Indiana
            </a>
          </li><li>
            <a href="https://slate.com/tag/jurisprudence">
              Jurisprudence
            </a>
          </li><li>
            <a href="https://slate.com/tag/arizona">
              Arizona
            </a>
          </li><li>
            <a href="https://slate.com/tag/ron-desantis">
              Ron DeSantis
            </a>
          </li>      </ul>

  </section>

      

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Project Aria 'Digital Twin' Dataset by Meta (163 pts)]]></title>
            <link>https://www.projectaria.com/datasets/adt/</link>
            <guid>36800041</guid>
            <pubDate>Thu, 20 Jul 2023 13:21:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.projectaria.com/datasets/adt/">https://www.projectaria.com/datasets/adt/</a>, See on <a href="https://news.ycombinator.com/item?id=36800041">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="project-aria-content"><header id="u_0_2_Nk"><div><p><a href="https://www.projectaria.com/" data-ms="{&quot;creative&quot;:&quot;logo&quot;,&quot;creative_detail&quot;:&quot;click_internal-link_logo&quot;}"><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/348237963_660017879294690_4357723783463620244_n.png?_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=UD93VuRidvoAX8uoFUm&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfBrZejyEjBoL5IUYzjy8RN2bSyX69A4wNu7sc2_PylEPQ&amp;oe=64BEA65B" alt="Aria logo"></a></p><ul><li><a href="https://www.projectaria.com/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;home&quot;}" target="_self">Home</a></li><li><a href="https://www.projectaria.com/glasses/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;glasses&quot;}" target="_self">Glasses</a></li><li data-key="2" aria-expanded="false"><a href="#" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;datasets&quot;}" target="_self" role="button">Datasets</a><svg width="9" height="6" viewBox="0 0 9 6" fill="none"><path d="M1 1L4.5 4.5L8 1" stroke="white" stroke-linecap="round"></path></svg></li><li><a href="https://www.projectaria.com/research-kit/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;partners&quot;}" target="_self">Partners</a></li><li data-key="4" aria-expanded="false"><a href="#" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;Resources&quot;}" target="_blank" rel="noreferrer noopener" role="button" id="u_0_3_eG">Resources</a><svg width="9" height="6" viewBox="0 0 9 6" fill="none"><path d="M1 1L4.5 4.5L8 1" stroke="white" stroke-linecap="round"></path></svg></li><li><a href="https://github.com/facebookresearch/projectaria_tools" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;github&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_4_ZN">GitHub</a></li></ul></div><div><div data-key="2"><ul><li data-key="0"><a href="https://www.projectaria.com/datasets/apd/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;aria-pilot-dataset&quot;}" target="_self">Aria Pilot Dataset</a></li><li data-key="1"><a href="https://www.projectaria.com/datasets/adt/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;aria-digital-twin&quot;}" target="_self">Aria Digital Twin</a></li><li data-key="2"><a href="https://www.projectaria.com/datasets/ase/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;aria-synthetic-environments&quot;}" target="_self">Aria Synthetic Environments</a></li></ul><ul><li data-key="0"><a href="https://www.projectaria.com/datasets/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;learn-about-datasets&quot;}" target="_self">Learn About Datasets</a></li><li data-key="1"><a href="https://www.projectaria.com/challenges/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;learn-about-challenges&quot;}" target="_self">Learn About Challenges</a></li></ul></div><div data-key="4"><ul><li data-key="0"><a href="https://facebookresearch.github.io/projectaria_tools/docs/intro" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;Docs&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_5_/7">Docs</a></li><li data-key="1"><a href="https://drive.google.com/file/d/1eAgYMXbI6zNtTC6c9eEOctMGG8u43rJS/view" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;paper&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_6_KX">Paper</a></li></ul></div></div><div aria-expanded="false" id="u_0_7_7K"><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/348237963_660017879294690_4357723783463620244_n.png?_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=UD93VuRidvoAX8uoFUm&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfBrZejyEjBoL5IUYzjy8RN2bSyX69A4wNu7sc2_PylEPQ&amp;oe=64BEA65B" alt="Aria logo"></p></div><ul><li><a href="https://www.projectaria.com/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;home&quot;}" target="_self">Home</a></li><li><a href="https://www.projectaria.com/glasses/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;glasses&quot;}" target="_self">Glasses</a></li><li data-key="2"><svg width="9" height="6" viewBox="0 0 9 6" fill="none"><path d="M1 1L4.5 4.5L8 1" stroke="white" stroke-linecap="round"></path></svg></li><div data-key="2"><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/348237963_660017879294690_4357723783463620244_n.png?_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=UD93VuRidvoAX8uoFUm&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfBrZejyEjBoL5IUYzjy8RN2bSyX69A4wNu7sc2_PylEPQ&amp;oe=64BEA65B" alt="Aria logo"></p></div><div><li>Datasets</li><ul><li data-key="0"><a href="https://www.projectaria.com/datasets/apd/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;aria-pilot-dataset&quot;}" target="_self">Aria Pilot Dataset</a></li><li data-key="1"><a href="https://www.projectaria.com/datasets/adt/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;aria-digital-twin&quot;}" target="_self">Aria Digital Twin</a></li><li data-key="2"><a href="https://www.projectaria.com/datasets/ase/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;aria-synthetic-environments&quot;}" target="_self">Aria Synthetic Environments</a></li></ul><ul><li data-key="0"><a href="https://www.projectaria.com/datasets/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;learn-about-datasets&quot;}" target="_self">Learn About Datasets</a></li><li data-key="1"><a href="https://www.projectaria.com/challenges/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;learn-about-challenges&quot;}" target="_self">Learn About Challenges</a></li></ul></div></div><li><a href="https://www.projectaria.com/research-kit/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;partners&quot;}" target="_self">Partners</a></li><li data-key="4"><svg width="9" height="6" viewBox="0 0 9 6" fill="none"><path d="M1 1L4.5 4.5L8 1" stroke="white" stroke-linecap="round"></path></svg></li><div data-key="4"><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/348237963_660017879294690_4357723783463620244_n.png?_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=UD93VuRidvoAX8uoFUm&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfBrZejyEjBoL5IUYzjy8RN2bSyX69A4wNu7sc2_PylEPQ&amp;oe=64BEA65B" alt="Aria logo"></p></div><li><a href="https://github.com/facebookresearch/projectaria_tools" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_header&quot;,&quot;creative_detail&quot;:&quot;github&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_b_sg">GitHub</a></li></ul></div></header><div><p>A real-world dataset, with hyper-accurate digital counterpart &amp; comprehensive ground-truth annotation</p></div><div><div><h5>WHAT IS IT?</h5><p>An egocentric dataset with extensive and accurate ground-truth</p><div><p>Aria Digital Twin is an egocentric dataset captured using Aria glasses, with extensive simulated ground truth for devices, objects and environment.</p><p>This dataset sets a new standard for egocentric machine perception research, and accelerates research into a number of challenges including 3D object detection and tracking, scene reconstruction and understanding, sim-to-real learning, human pose prediction, while also inspiring new machine perception tasks for augmented reality (AR) applications.</p></div><a data-ga-category="c8" data-ga-label="learn-more-about-project-aria" href="#download-dataset" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_internal-link&quot;,&quot;creative_detail&quot;:&quot;Download the dataset below&quot;}" target="_self"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="#2C0D00"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#2C0D00"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#2C0D00"></path></svg><h5>DOWNLOAD THE DATASET BELOW</h5></a><div><h4>Dataset Content</h4><div><ul><li>200 sequences (~400 mins)</li><li>398 objects (324 stationary, 74 dynamic)</li><li>2 real indoor scenes</li><li>Single + multi-user activities</li></ul></div><h4>Sensor Data per device</h4><div><ul><li>2 x outward-facing monochrome camera streams</li><li>1 x outward-facing RGB camera stream</li><li>2 x IMU streams</li><li>2 x Internal-facing eye tracking cameras</li><li>Complete sensor calibrations</li></ul></div><h4>Annotations</h4><div><ul><li>6DoF device trajectory</li><li>3D object pose</li><li>3D human skeleton</li><li>3D eye gaze</li><li>2D Photo-realistic synthetic rendering</li><li>2D bounding box</li><li>2D instance segmentation</li><li>2D depth map</li></ul></div></div></div><div><p><img src="https://static.xx.fbcdn.net/rsrc.php/v3/y4/r/-PAXP-deijE.gif" alt="" id="u_0_k_2H"></p></div></div><div><div><h5>HOW WAS IT CREATED?</h5><p>A digital twin for a physical world</p><p>The Aria Digital Twin Dataset was captured in 2 different locations within Meta offices in North America, each with extensive ground-truth survey.</p></div><div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350317528_2601383460028681_2770023034813992523_n.jpg?_nc_cat=111&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=nUufpzD3Pd4AX9IHH2l&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfCKe_t6L0gWUP1O_ziyK0rZyfYOgShtxkp9d_8VFyYHmQ&amp;oe=64BDEBD3" alt="" id="u_0_l_jc"></p><div><p>Photo-realistic object reconstruction</p><p>Each object within the Aria Digital Twin are laser scanned to reconstruct highly precise geometry. Object material are modeled using a photogrammetry pipeline and fine-tuned to ensure the images rendered from the models accurately match real images of the object.</p></div></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350970329_3430970527165884_1016978064637225669_n.jpg?_nc_cat=102&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=y7OOeRUBrGQAX-1eBDG&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfCaDttD5Mpp3UP8XiyHQJ-wMPqTogCHIkgnptxRYim2qw&amp;oe=64BE3C65" alt="" id="u_0_m_5m"></p><div><p>Hyper-accurate scene digitization</p><p>The Aria Digital Twin Dataset was captured in 2 different locations within Meta offices in North America. Each room was laser scanned &amp; modelled to ensure a high quality ground truth for each environment.</p></div></div></div></div><div><div><h5>HOW IS THE DATASET ANNOTATED?</h5><p>Comprehensive ground-truth of the real-world environment</p><p>For every frame of motion in the real-world footage, the Aria Digital Twin Dataset has a complete set of ground-truth data at the human, object, and scene level.</p></div><div><div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350990263_942180560335987_3637854262120131676_n.jpg?_nc_cat=109&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=As6Wtaji2noAX8TUy9S&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfDQPTQY7e9lYnE1ZDl4MJJjJNGRi04ewUwo2kSvIJkW4A&amp;oe=64BE48D7" alt="" id="u_0_n_cB"></p><div><p>High-quality device and object 6DoF poses</p><p>Camera and object trajectories are provided for every sequence, aligned to the same reference-frame as the scene geometry, allowing annotations to be understood within the same context.</p></div></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350851399_6403222636458407_5156413340978131931_n.jpg?_nc_cat=110&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=zi27eiMTDbEAX_NT6CB&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfDjtN1b-kciAfXTHN1uQD7wnhw5vvBvqQtiK_5BnTFviQ&amp;oe=64BD8077" alt="" id="u_0_o_ev"></p><div><p>High quality depth-maps and object segmentation</p><p>Aria Digital Twin derives depth maps and object segmentation by leveraging the complete scene reconstruction and dynamic object tracking. This data provides researchers with additional knowledge of objects and scene.</p></div></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350852660_584456103826983_590547595068134511_n.jpg?_nc_cat=109&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=b_7Quxo0puoAX90xzQW&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfDW3zNMFeSsQqzEKR4i81lPFY06O2T8nVkT5bvinR-7BQ&amp;oe=64BE09B4" alt="" id="u_0_p_Vv"></p><div><p>3D human poses</p><p>In addition to camera poses, each Aria wearer is outfitted with a full body motion capture suit, to estimate the joint positions of the wearer. This allows dataset users to explore methods for full body pose estimation.</p></div></div></div><div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350960577_230485879731797_5599307775926344381_n.jpg?_nc_cat=108&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=5cThEwqt9l8AX9fd845&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfDYzCGcq3r2MGSTFmySg5mi9qsWzB1s8xDvbjDDbHziZg&amp;oe=64BD7C6D" alt="" id="u_0_q_FN"></p><div><p>Faithfully-simulated synthetic sensor data</p><p>Each real-world sequence is accompanied by a synthetic sequence matching the sensor characteristics of the RGB and monochrome sensors on Aria glasses, at photo-realistic quality.</p></div></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350807087_805798264013804_6615975676322708521_n.jpg?_nc_cat=106&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=Yj7eciTaUrMAX-l1WX_&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfBhsyw2ozeUbcFo-2MsghiF6z6eO-7vFb8eT29bh7wZgw&amp;oe=64BD9D95" alt="" id="u_0_r_Pd"></p><div><p>3D eye gaze vectors</p><p>Using data from Project Aria‚Äôs eye-tracking cameras, Aria Digital Twin includes an estimate of the wearer's eye-gaze as a 3D vector with depth information. This introduces additional user-object interaction besides hands.</p></div></div></div></div></div><div><div><h5>ARIA DIGITAL TWIN DATASET TOOLS</h5><p>Comprehensive tools to load and visualize data easily</p><div><p>Tools for working with Aria Digital Twin allow researchers to access, interact with, and visualize all raw data and annotations available in the dataset.</p><p>We provide both C++ and python interfaces to load data, so that researchers can access data in the way best suited to their needs. We also provide tools for querying dataset contents, so that specific types of data can be surfaced.</p></div><a data-ga-category="c8" data-ga-label="responsible-innovation-principles" href="https://github.com/facebookresearch/projectaria_tools/tree/main/projects/AriaDigitalTwinDatasetTools" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_internal-link&quot;,&quot;creative_detail&quot;:&quot;view-aria-digital-twin-tools&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_s_mt"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="#18EED4"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#18EED4"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#18EED4"></path></svg><h5>VIEW ARIA DIGITAL TWIN TOOLS ON GITHUB</h5></a></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350935573_795907125172765_9048504922745545510_n.jpg?_nc_cat=110&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=SHF0HJMFgugAX_8kKr9&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfA3yJb9dLXqrbMVEfg5JOxYXu2IHXRhodk7r8ujuuROMw&amp;oe=64BE733F" alt="" id="u_0_t_tp"></p></div></div><div><div><h5>HOW WILL THE DATASET BE USED?</h5><p>Use Aria Digital Twin to participate in Object Detection Challenges</p><div><p>Aria Digital Twin is designed to catalyze research related to object detection and spatialization.</p><p>Use the dataset to participate in open benchmark challenges and accelerate progress with the open community.</p></div><a data-ga-category="c8" data-ga-label="responsible-innovation-principles" href="https://www.projectaria.com/challenges/detection/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_internal-link&quot;,&quot;creative_detail&quot;:&quot;object-detection-challenges&quot;}" target="_self"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="#2C0D00"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#2C0D00"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#2C0D00"></path></svg><h5>VIEW THE OBJECT DETECTION ARIA CHALLENGE</h5></a></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350960283_1743429122780783_2418185418004781374_n.jpg?_nc_cat=110&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=rajmx5k6wOoAX_kNlHg&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfAZ5RQwuaiKaJuKhTETn5rxmNZrCUiCEZ8OGSq2Hji0dA&amp;oe=64BF4734" alt="" id="u_0_u_rv"></p></div></div><div><div><p>Enabling innovation, responsibly</p><p>All sequences within the Aria Digital Twin Dataset have been captured using fully consented researchers in controlled environments in Meta offices.</p><a data-ga-category="c8" data-ga-label="responsible-innovation-principles" href="https://about.meta.com/metaverse/responsible-innovation/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_internal-link&quot;,&quot;creative_detail&quot;:&quot;responsible-innovation-principles&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_v_hN"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="#2C0D00"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#2C0D00"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="#2C0D00"></path></svg><h5>RESPONSIBLE INNOVATION PRINCIPLES</h5></a></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350814322_285915773793521_3186947146087364278_n.jpg?_nc_cat=106&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=FVvmr0X9JkUAX9PZza2&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfDQAgMjlvrYKouH2QKX4QgGKRao9ZG6Uwl7uSZHDW-TgA&amp;oe=64BD7410" alt="" id="u_0_w_IJ"></p></div></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/350845397_921462402488827_2281702135775367083_n.jpg?_nc_cat=103&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=S_fDOFx6txUAX9LHmQB&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfDH7M4Io-C7jvRjpggkE7zp1RsBQZ6xT2xW0O2bZc9F-g&amp;oe=64BE9689" alt="" id="u_0_y_Im"></p></div><div><div><p>Access Aria Digital Twin Dataset</p><p>If you are a researcher in AI or ML research, access the Aria Digital Twin Dataset and accompanying tools here.</p></div><div><p>By submitting your email and accessing the Aria Digital Twin Dataset, you agree to abide by the <a data-ga-category="c8" data-ga-label="project-aria-pilot-dataset-form" href="https://www.projectaria.com/datasets/adt/license/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_internal-link&quot;,&quot;creative_detail&quot;:&quot;project-aria-pilot-dataset-form&quot;}" target="_self">dataset license agreement</a> and to receive emails in relation to the dataset.</p></div></div><div><h2>Subscribe to Project Aria Updates</h2><p>Stay in the loop with the latest datasets and challenges from Project Aria.</p><a href="http://eepurl.com/ipQYdI" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;button&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie"><p>SIGN UP FOR EMAIL UPDATES</p></a></div><div><p><a data-ga-category="c8" data-ga-label="footer_meta-link" href="https://www.projectaria.com/" aria-label="Meta logo" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_footer&quot;,&quot;creative_detail&quot;:&quot;footer_meta-link&quot;}" target="_self"><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.8562-6/250802775_421829349379303_5128561417639041188_n.png?_nc_cat=1&amp;ccb=1-7&amp;_nc_sid=6825c5&amp;_nc_ohc=m8-u9jirGyIAX8HKqVk&amp;_nc_ht=scontent.fzrh3-1.fna&amp;oh=00_AfBChbDiVKaQ5f57vHOaj4XkNkzd8oNFvycVZMG2HPTNIA&amp;oe=64BE7239" height="17" width="87" alt="Meta logo, homepage link" id="u_0_10_qC"></a></p></div></div></div>]]></description>
        </item>
    </channel>
</rss>