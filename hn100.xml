<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 06 Apr 2024 20:00:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[PiVPN v4.6.0: The End (104 pts)]]></title>
            <link>https://github.com/pivpn/pivpn/releases/tag/v4.6.0</link>
            <guid>39953207</guid>
            <pubDate>Sat, 06 Apr 2024 15:47:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/pivpn/pivpn/releases/tag/v4.6.0">https://github.com/pivpn/pivpn/releases/tag/v4.6.0</a>, See on <a href="https://news.ycombinator.com/item?id=39953207">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="true" data-test-selector="body-content" data-view-component="true"><p>Hi everyone,</p>
<p>It's time to say goodbye.</p>
<p>This is the final official release of PiVPN.</p>
<p>I inherited this project from <a data-hovercard-type="user" data-hovercard-url="/users/0-kaladin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0-kaladin">@0-kaladin</a> and <a data-hovercard-type="user" data-hovercard-url="/users/redfast00/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/redfast00">@redfast00</a>, who moved on with their lives. I maintained it as my own with the great help of <a data-hovercard-type="user" data-hovercard-url="/users/orazioedoardo/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/orazioedoardo">@orazioedoardo</a>, to whom I'm immensely grateful. He held the boat and kept it floating while I could not be present, and he too gave a lot of himself to this project!</p>
<p>But now it's time for me too to move on!</p>
<p>I've been giving less and less attention to PiVPN, and the desire to keep up with it is no longer what it once was. When PiVPN was created, it filled a big void and had a clear mission and purpose, which I feel has been fulfilled! We went from OpenVPN being something hard to set up and complicated to manage, to WireGuard being able to run on any toaster and easy to set up. There are so many tools out there that do the job much better than PiVPN does, and I genuinely believe PiVPN's mission in life was accomplished and is no longer relevant. Just as everything in nature has a start, there's also an end, and this is how PiVPN ends its journey.</p>
<p>PiVPN has been home for so many of you, starting with Linux, bash, open-source, and everyone was always very welcomed, just like it was for me <a href="https://github.com/pivpn/pivpn/commit/fbec57d1fda70341394bfd2bc90e1dab0af2c125">7 years ago</a>. I cannot express how grateful I am to all the <a href="https://github.com/pivpn/pivpn/graphs/contributors">84 Contributors</a> for this amazing project.</p>
<p>It has been a wild ride, and I've learned so much from PiVPN and from every single one of you!</p>
<p>THANK YOU!!</p>
<p>PiVPN repositories will be archived and set to read-only, and will no longer be maintained. Unless <a data-hovercard-type="user" data-hovercard-url="/users/0-kaladin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0-kaladin">@0-kaladin</a> rises back again and decides otherwise.</p>
<p>The PiVPN Website and its documentation are hosted on GitHub, therefore it will remain accessible under the pivpn.io domain for as long as <a data-hovercard-type="user" data-hovercard-url="/users/0-kaladin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0-kaladin">@0-kaladin</a> keeps paying the bills, just the same way I will keep hosting the redirection for the installation for as long as possible. I will still make a few commits to update the documentation about the project's state, but that will be it.</p>
<p>I will maintain ownership of the repository, but I won't pass it down to anyone else. First, because I feel it's not up to me to decide who to pass the project down to, and second, because there is no one else to pass the project to.</p>
<p>"But I want and can maintain it, can I take it over?" Let me put it plain and simple: No! I don't know you, I don't trust you! Fork it and carry on!</p>
<p>About this release, here's what it brings:</p>
<h3>New Features</h3>
<ul>
<li>Add possibility to use Pi-hole in unattended install (<a data-error-text="Failed to load title" data-id="2195064053" data-permission-text="Title is private" data-url="https://github.com/pivpn/pivpn/issues/1825" data-hovercard-type="pull_request" data-hovercard-url="/pivpn/pivpn/pull/1825/hovercard" href="https://github.com/pivpn/pivpn/pull/1825">#1825</a>)</li>
</ul>
<h3>Bugfixes and Refactors</h3>
<ul>
<li>Updates to subnet generation and client creation
<ul>
<li>refactor(core): allow any subnet and netmask</li>
<li>fix(scripts): prevent adding more clients than the subnet allows</li>
<li>fix(scripts): correctly remove leading zeros from ipv6 quartets</li>
<li>refactor(core): new probabilistic subnet generation with fallback to other RFC1918 subnets</li>
</ul>
</li>
</ul>
<p><strong>Full Changelog</strong>: <a href="https://github.com/pivpn/pivpn/compare/v4.5.0...v4.6.0"><tt>v4.5.0...v4.6.0</tt></a></p>
<p>Once again, Thank you all so much for everything! See you around!<br>
4s3ti</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NASA spacecraft films crazy vortex while flying through sun's atmosphere (138 pts)]]></title>
            <link>https://mashable.com/article/nasa-sun-footage-parker-solar-probe</link>
            <guid>39952111</guid>
            <pubDate>Sat, 06 Apr 2024 12:50:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mashable.com/article/nasa-sun-footage-parker-solar-probe">https://mashable.com/article/nasa-sun-footage-parker-solar-probe</a>, See on <a href="https://news.ycombinator.com/item?id=39952111">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-ga-module="content_body">
<div>
<p><img src="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_1248x702.v1712094491.png" alt="A &quot;vortex-like structure&quot; inside the sun's atmosphere caused by a coronal mass ejection interacting with the stellar environment." width="1248" height="702" srcset="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_400x225.v1712094491.png 400w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_800x450.v1712094491.png 800w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_1248x702.v1712094491.png 1600w" sizes="(max-width: 1280px) 100vw, 1280px"></p><p><span>A "vortex-like structure" inside the sun's atmosphere caused by a coronal mass ejection interacting with the stellar environment.</span>
<span>Credit: U.S. Naval Research Laboratory</span>
</p>
</div>
<article id="article" data-autopogo="">
<p>The <a href="https://mashable.com/article/nasa-parker-solar-probe-speed" target="_self">fastest spacecraft</a> in our solar system has captured wild footage inside the sun's atmosphere.</p><p>NASA's <a href="https://mashable.com/article/nasa-probe-survives-sun" target="_self">Parker Solar Probe</a> — a craft flying much closer to the <a href="https://mashable.com/article/solar-flares-sun-active-why" target="_self">sun</a> than any previous mission — witnessed massive "vortex-like structures" in our star's outer atmosphere, called the corona. You can see the unprecedented view below, taken by the probe's WISPR camera (short for Wide-field Imager for Parker Solar Probe) and recently posted online.</p>
<p>Researchers suspect that the phenomena was caused by a <a href="https://mashable.com/article/sun-solar-ejection-nasa-footage" target="_self">coronal mass ejection</a> (CME) — when the sun ejects a mass of super hot gas (plasma) into <a href="https://mashable.com/category/space" target="_self">space</a> — interacting with the solar wind. The sun's solar wind is constant, as our <a href="https://mashable.com/article/how-hot-is-sun-nasa" target="_self">medium-sized star</a> emits a steady stream of charged particles. </p>
<p>The new research associated with the footage, published in <a href="https://iopscience.iop.org/article/10.3847/1538-4357/ad2208" target="_blank" title="(opens in a new window)"><em><u>The Astrophysical Journal</u></em></a>, concluded that this find in uncharted realms of the sun has created new opportunities to better understand and predict CMEs, outbursts that can severely harm communications and electrical grids on <a href="https://mashable.com/article/earth-pictures-images-from-space" target="_self">Earth</a>. Technically, these rare vortices are called "Kelvin-Helmholtz instabilities," or KHI.</p><section x-data="window.newsletter()" x-init="init()" data-ga-impression="" data-ga-category="newsletters" data-ga-module="incontent_nl_signup" data-ga-label="mashablelightspeed">
<p>
Mashable Light Speed
</p>


</section>
<p>"The direct imaging of extraordinary ephemeral phenomena like KHI with WISPR/PSP is a discovery that opens a new window to better understand CME propagation and their interaction with the ambient solar wind," Evangelos Paouris, a space weather researcher and member of the WISPR team at George Mason University, said in a statement. </p><p>CMEs "can endanger satellites, disrupt communications and navigation technologies, and even knock out power grids on Earth," <a href="https://mashable.com/category/nasa" target="_self">NASA</a> explains. Infamously, a potent CME in 1989 knocked out power to millions in Québec, Canada. The CME hit Earth's magnetic field on March 12 of that year, and then, wrote NASA astronomer Sten Odenwald, "Just after 2:44 a.m. on March 13, the currents found a weakness in the electrical power grid of Québec. In less than two minutes, the entire Québec power grid lost power. During the 12-hour blackout that followed, millions of people suddenly found themselves in dark office buildings and underground pedestrian tunnels, and in stalled elevators."</p>
<div>
<p><img src="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_2000x1120.v1712160131.png" alt="An artist's conception of NASA's Parker Solar Probe passing through the sun's outer atmosphere, or corona." width="2000" height="1120" loading="lazy" srcset="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_800x448.v1712160131.png 800w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_1400x784.v1712160131.png 1400w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_2000x1120.v1712160131.png 2000w" sizes="(max-width: 1408px) 100vw, 1408px">
</p>
<p><span>An artist's conception of NASA's Parker Solar Probe passing through the sun's outer atmosphere, or corona.</span>
<span>Credit: NASA</span>
</p>
</div>
<p>The space agency's Parker Solar Probe will continue its speeding dives into the <a href="https://mashable.com/article/solar-eclipse-2024-what-to-expect" target="_self">sun's corona</a>. To withstand the heat, it's fortified with a 4.5-inch-thick carbon heat shield that's pointed at the sun. The shield itself heats up to some 2,500 degrees Fahrenheit, but just a couple of feet behind the shield, the environs are surprisingly mild.</p><p>Later this year, the spacecraft will reach a whopping 430,000 miles per hour.</p>

</article>
<div>
<div>
<p><img src="https://helios-i.mashable.com/imagery/defaults/fallback-thumbnail.fill.size_100x100.1.png" alt="Mashable Image" width="100" height="100"></p>
</div>
<div>
<p>Mark is an award-winning journalist and the science editor at Mashable. After communicating science as a ranger with the National Park Service, he began a reporting career after seeing the extraordinary value in educating the public about the happenings in earth sciences, space, biodiversity, health, and beyond.&nbsp;</p><p>You can reach Mark at <a href="https://mashable.com/cdn-cgi/l/email-protection#a4c9cfc5d1c2c9c5cae4c9c5d7ccc5c6c8c18ac7cbc9" target="_blank" title="(opens in a new window)"><span data-cfemail="305d5b5145565d515e705d51435851525c551e535f5d">[email&nbsp;protected]</span></a>.</p>
</div>
</div>
</section><div x-data="window.newsletter()" x-init="init()" data-ga-impression="" data-ga-category="newsletters" data-ga-module="footer_nl_signup" data-ga-label="Top Stories">

<p>
This newsletter may contain advertising, deals, or affiliate links. Subscribing to a newsletter indicates your consent to our <a href="https://www.ziffdavis.com/terms-of-use" target="_blank" rel="noopener" title="(opens in a new window)">Terms of Use</a> and <a href="https://www.ziffdavis.com/ztg-privacy-policy" target="_blank" rel="noopener" title="(opens in a new window)">Privacy Policy</a>. You may unsubscribe from the newsletters at any time.
</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Asus refunds Zenfone buyer for failing to provide bootloader unlock tools (209 pts)]]></title>
            <link>https://www.androidauthority.com/asus-bootloader-unlock-settlement-3431818/</link>
            <guid>39951649</guid>
            <pubDate>Sat, 06 Apr 2024 11:16:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.androidauthority.com/asus-bootloader-unlock-settlement-3431818/">https://www.androidauthority.com/asus-bootloader-unlock-settlement-3431818/</a>, See on <a href="https://news.ycombinator.com/item?id=39951649">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><picture><source sizes="(min-width: 64rem) 51.25rem, 80vw" srcset="https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing.jpg.webp 1920w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1536w-864h.jpg.webp 1536w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-675w-380h.jpg.webp 675w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-64w-36h.jpg.webp 64w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1000w-563h.jpg.webp 1000w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-300w-170h.jpg.webp 300w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1280w-720h.jpg.webp 1280w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-840w-472h.jpg.webp 840w" type="image/webp"><img decoding="async" loading="eager" sizes="(min-width: 64rem) 51.25rem, 80vw" title="ASUS Zenfone 10 vs ASUS Zenfone 9 standing" srcset="https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing.jpg 1920w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1536w-864h.jpg 1536w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-675w-380h.jpg 675w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-64w-36h.jpg 64w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1000w-563h.jpg 1000w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-300w-170h.jpg 300w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1280w-720h.jpg 1280w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-840w-472h.jpg 840w" alt="ASUS Zenfone 10 vs ASUS Zenfone 9 standing" src="https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing.jpg"></picture><div><p>Robert Triggs / Android Authority</p></div></div><div><p>TL;DR</p>
<ul>
<li>In the UK, a Zenfone buyer sued ASUS over the company’s broken promise to provide bootloader unlocking support for its phones.</li>
<li>The buyer won, getting a full refund for the phone and their court fees, for a total of £770 (~$973).</li>
<li>If you have similar issues, this case proves you have a shot at getting a refund, too.</li>
</ul>
</div><p>Over the past few months, there’s been a growing controversy among buyers of ASUS phones. Although ASUS makes some of the <a href="https://www.androidauthority.com/best-android-phones-568001/">best Android phones</a> you can buy, the company has fallen short in making bootloader unlocking tools available to buyers. Previously, these tools were easy to operate and readily available, but in May last year, things took a turn. Now, unlocking the bootloader of a recent ASUS phone — including the Zenfone 9, Zenfone 10, and <a href="https://www.androidauthority.com/asus-zenfone-11-ultra-review-3406664/">Zenfone 11 Ultra</a>&nbsp;— is not possible.</p><p>One buyer in particular, who we’ll call Timothy (not their real name), was very upset about this. Timothy told us that they bought an ASUS Zenfone specifically for the ability to unlock its bootloader. Upset by this broken promise, Timothy — who lives in the United Kingdom — sued ASUS in the UK’s version of small claims court.</p><p>Today, Timothy provided us with documentation of the court case and proof that ASUS has settled. In the settlement, Timothy received a full refund for the phone (£700) and the court filing fee (£70) for a total of £770 (~$973).</p><p>This has set a basic precedent: if you, like Timothy, are upset that ASUS isn’t providing a way to unlock your phone’s bootloader, taking the company to court might be a viable solution.</p><div><h2>ASUS bootloader unlocking: What is going on?</h2>
<p>Unlocking the bootloader of an Android phone is a way of getting full access to the system. It allows you to manipulate the software already installed on the device and even uninstall it and reinstall a new version of Android. While this is often complicated to do, it provides a way for smartphone owners to continue to use their devices after an OEM has terminated support.</p></div><p>Given that <a href="https://www.androidauthority.com/phone-update-policies-1658633/">ASUS has one of the worst software support commitments in the Android world</a>, many tech-savvy ASUS buyers have depended on bootloader unlocking to continue using the company’s phones far beyond the dismal two-year window ASUS provides. In fact, ASUS has essentially acknowledged this phenomenon by promising to continue providing the necessary tools to bootloader unlock its phones.</p><p>However, last year, it reneged on that promise by disabling the unlocking tools and refusing to give users the codes they needed to perform the procedure. It started removing posts about bootloader unlocking in its ZenTalk forums. Mods of that forum started giving explanations about the unlocking tools being under maintenance or getting overhauled for compliance reasons but giving no information on when they would become active again.</p><p>In March, Timothy led the charge by taking ASUS to small claims court, which brings us to today’s news of their big win.</p><p>If you are in the same position as Timothy and would like a refund for your ASUS purchase, small claims court might be the best way to go. However, we have reached out to ASUS to get more information on this situation from the company’s perspective. Unfortunately, due to ASUS being based in Taiwan, we are unlikely to get a response until next week. We will update this article if and when we hear back.</p><p><strong>Got a tip? Talk to us!</strong>&nbsp;Email our staff at <a href="mailto:news@androidauthority.com" rel="noopener noreferrer" data-stringify-link="mailto:tips@androidauthority.com" data-sk="tooltip_parent" aria-haspopup="menu">news@androidauthority.com</a>. You can stay anonymous or get credit for the info, it's your choice.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lessons I learned from working full-time on a FOSS project for 503 days (120 pts)]]></title>
            <link>https://mathspp.com/blog/503-days-working-full-time-on-foss-lessons-learned</link>
            <guid>39951587</guid>
            <pubDate>Sat, 06 Apr 2024 11:02:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mathspp.com/blog/503-days-working-full-time-on-foss-lessons-learned">https://mathspp.com/blog/503-days-working-full-time-on-foss-lessons-learned</a>, See on <a href="https://news.ycombinator.com/item?id=39951587">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>This article shares some of the lessons I learned from working full-time on a FOSS project for 503 days.</p>

                
<h2 id="503-days-working-full-time-on-foss-lessons-learned">503 days working full-time on FOSS: lessons learned<a href="#503-days-working-full-time-on-foss-lessons-learned" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>From the 14th of November of 2022 to the 31st of March of 2024 I worked full-time on a FOSS project.
This article is an account of some of the things that I learned during those 503 days.</p>
<p>I have much more time to devote to <em><strong>you</strong></em> now that I don't have this full-time position.
If you're looking for Python training, <a href="mailto:rodrigo@mathspp.com">reach out to me</a>.
I'll also be investing my time in this blog and in <a href="https://mathspp.com/books">my books</a>.</p>
<p>I joined Textualize, the company behind the popular FOSS Python packages <a href="https://github.com/textualize/rich" target="_blank" rel="nofollow noopener noreferrer">Rich</a> and <a href="https://github.com/textualize/textual" target="_blank" rel="nofollow noopener noreferrer">Textual</a>, on the 14th of November of 2022.
When I joined to work remotely from sunny Portugal, I joined <a href="https://github.com/willmcgugan" target="_blank" rel="nofollow noopener noreferrer">Will</a> (the creator of Rich &amp; Textual, and my boss), <a href="https://github.com/darrenburns" target="_blank" rel="nofollow noopener noreferrer">Darren</a>, and <a href="https://github.com/davep" target="_blank" rel="nofollow noopener noreferrer">Dave</a>, all of whom worked together in Scotland.
For the first time in my professional life, I was the worst Python developer in the room<sup id="fnref1:1"><a href="#fn:1">1</a></sup>.
This means that my technical knowledge improved substantially over the course of these 503 days, namely in areas such as:</p>
<ul>
<li>asynchronous code execution and Python's <code>asyncio</code>;</li>
<li>Python tipe hinting;</li>
<li>testing / <code>pytest</code>; and</li>
<li>software engineering best practices in general.</li>
</ul>
<p>However, this article will focus on the non-technical lessons I learned during this 503-day experience, that fall under these four broad categories:</p>
<ol>
<li>how an online presence can lead to a job offer;</li>
<li>how your ego shouldn't be in the way of your work;</li>
<li>how to interact with users &amp; contributors; and</li>
<li>how to work on a huge codebase you don't know 100%.</li>
</ol>
<p>Let's dive right in.</p>

<p>One interesting thing that I learned even before starting my full-time position is that you can definitely find (job) opportunities in unconventional ways.
This has always been the case but the Internet makes it even easier to do so.</p>
<p>If you're looking for a job, you can submit your CV to a platform or fill out a form.
I've gotten job offers by going through that process.
But that's not how I got <em>this</em> job nor how I got any of my previous jobs.
I'll tell you more or less how I <del>fooled Will into hiring me</del> got this job in the hope that you understand how powerful an online presence can be.</p>
<p>I met Will on X/Twitter, <a href="https://x.com/mathsppblog" target="_blank" rel="nofollow noopener noreferrer">where I actively post about Python</a>.
Over the course of many months we'd interact sporadically.
Sometimes I commented on his posts and sometimes he commented on my posts.
I think Will enjoyed the Python tips I posted and the occasional link to an article of mine.</p>
<p>After many months of occasional Twitter interactions and a couple of informal video calls, Will messaged me asking if I was interested in working for Textualize.
Some months before, I had mentioned that I would see myself working with him further down the line.
But I wasn't trying to get a job when I said that.
In fact, I remember saying something like “I see myself working with you in <strong>5 years</strong>”.
Even still, a few months later I had Will's message on my inbox!
I agreed to go through the recruitment process and in the end Will made me an offer.</p>
<p>I was sad to leave my previous position, where I was enjoying myself working with / teaching APL, but I was also pretty ecstatic about working full-time on a Python FOSS project.</p>
<p>Getting this job offer was confirmation that everything you do online can act as a banner for you and your work.
In my case, that's my Python posts on social media, my blog articles, my books, etc.
For you, it could be something different.
But don't forget that <em>possibility</em>!</p>
<h2 id="put-your-ego-aside">Put your ego aside<a href="#put-your-ego-aside" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>Before joining Textualize I had always been the best Python developer in my team...
Because I was the <em>only</em> Python developer in my team<sup id="fnref1:2"><a href="#fn:2">2</a></sup>!</p>
<p>Being the best at something is great for your ego but it also means there's no one there to pull you up and to teach you new things...
And I wanted that!
I wanted to work with people who I looked up to for their technical skills and I realised Textualize would give me that.</p>
<p>I joined Textualize and I immediately understood that code reviews would be moments where I could learn a lot.
If you think about it, when you're writing code, it's not only about whether the code does what it's supposed to (fix a bug, implement a feature, etc.).
The actual code you write is also relevant and code reviews are when your coworkers get to comment on that.</p>
<h3 id="ask-all-the-questions">Ask ALL the questions<a href="#ask-all-the-questions" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>One thing I did and that I can recommend is that you use code reviews to ask questions.
It happened regularly that I would read someone's code and think “interesting, why didn't they do this with X, Y, and Z?”.
Whenever that was the case, I left a comment <em>asking</em> that same question, even if the question sounded a bit basic.
Often, they would reply explaining their reasoning, and I would get to learn something new.
Some other times, it would turn out that they hadn't thought of the alternative I was considering and they took my suggestion.</p>
<p>I think the key points here are that</p>
<ol>
<li>you should ask the question(s) with the assumption that the person whose code you're reviewing has a good reason for having done things differently from what you expected; and</li>
<li>you shouldn't refrain from asking questions, regardless of how silly or basic they may seem.</li>
</ol>
<p>Point 1. is important because you don't want the other person to feel they're being attacked and because you should understand the reasoning behind the author's decisions.
Point 2. is important because you want to learn as much as possible... And because some times people just forget about simpler alternatives (even senior developers).</p>
<p>I'm happy to report that I've fully embraced the mindset of asking questions, even when they may sound silly, so exposing my lack of knowledge in certain areas didn't hurt my ego too much...
But having my code reviewed was a whole new story.</p>
<h3 id="embrace-code-review-feedback">Embrace (code review) feedback<a href="#embrace-code-review-feedback" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>My pull requests were invariably flagged with the red X requesting changes in my work:</p>
<figure><img title="Will requesting changes on one of my first PRs." alt="A screenshot of Will requesting changes on my PR on GitHub" src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_one_request.webp"><figcaption>Will requesting changes on one of my first PRs.</figcaption></figure>
<p>Going back to the reason code reviews are so interesting, it wasn't just about whether or not I was fixing the bug or implementing the feature.
It was also about the actual code that I wrote.
In the beginning it was tough to have all of my work scrutinised.
But if I wanted to improve my Python and software engineering skills, I'd have to embrace that scrutiny and the feedback I received whenever someone requested changes on my work.</p>
<p>I also got a lot of practice, because I got a lot of changes requested:</p>
<figure><img title="Montage of “changes requested” on my work." alt="A montage with multiple instances of pull requests where someone requested I make changes to my code." src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_request_montage.webp"><figcaption>Montage of “changes requested” on my work.</figcaption></figure>
<p>I learned to embrace the feedback and I recommend you do the same!
Assuming everyone is well-intentioned, it's one of the best things you can do.
Bonus points if you can get people to explain why they recommended a different approach.</p>
<h3 id="everyone-makes-mistakes">Everyone makes mistakes<a href="#everyone-makes-mistakes" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Everyone has bad moments, bad days, bad weeks...
Some weeks I felt less productive or made more mistakes.
But so did everyone else!
If you're feeling like you're not at your best, tackle a couple of simpler tasks.
That's a reasonable thing to do.</p>
<p>It sucks to be in a less productive period, but that's also a good time to figure out if you're working with reasonable human beings or with jerks.
Picture this:</p>
<ul>
<li>you make a pull request;</li>
<li>it goes through the usual review process and it gets merged;</li>
<li>the feature you implemented is released to the public; and</li>
<li>some days later users report “obvious” bugs in the feature you implemented.</li>
</ul>
<p>How would that make you feel?
To me, it made me feel a bit silly.
I felt utterly responsible for the bug that was being reported!
After all, I implemented the feature in question and the bug wasn't about an obscure interaction...
It was just a blunder of mine...</p>
<p>Thankfully, my team reacted differently and they said “we don't play the blame game” when reacting to my feeling responsible.
I guess it all comes down to the age-old adage that I already wrote above:</p>
<blockquote>
<p>“Everyone makes mistakes.”</p>
</blockquote>
<p>When others make mistakes, be graceful and helpful, instead of judgemental and critical.
If you do that, you'll make it more likely that others will be graceful and helpful when if you make mistakes.</p>
<p>For comic relief, here is a screenshot of me feeling ashamed after opening a “bug report” that was fueled by a major lapse of judgement regarding the way Python works:</p>
<figure><img title="Closing the most ridiculous issue I ever opened in my life." alt="Screenshot of a GitHub comment after opening a “bug report” that was fueled by a major lapse of judgement regarding the way Python works. The comment reads “can we create a 'shameful' label and add it to this issue, please?”" src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_shameful.webp"><figcaption>Closing the most ridiculous issue I ever opened in my life.</figcaption></figure>
<h2 id="interacting-with-users-and-contributors">Interacting with users and contributors<a href="#interacting-with-users-and-contributors" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>Working on a popular FOSS project brings with it an unexpected blessing <em>and</em> curse: users.
Users are obviously a blessing.
It doesn't sound fun to pour your heart and soul into a project that no one uses.
But handling user interactions is surprisingly time consuming and difficult!
Let me share with you some of the things I learned while doing this.</p>
<h3 id="create-a-contributing-guide">Create a contributing guide<a href="#create-a-contributing-guide" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>No one will read it.
Or rather, no one will read it <em>before</em> wasting a bit of your time.
But having the document there, with clear guidelines and helpful suggestions, will save you a LOT of time.</p>
<p>A contributing guide will also have your back in some situations.
More on that later!</p>
<h3 id="give-clear-instructions-to-bug-reporters">Give clear instructions to bug reporters<a href="#give-clear-instructions-to-bug-reporters" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>One of the things I learned is that you have to hold the hand of your users if you want decent bug reports.
One thing that really helps is setting up an issue template for bug reports, which is an excellent feature that GitHub has.</p>
<p>As of writing this, our bug report template issue looks like this:</p>
<pre><code>Have you checked closed issues?
https://github.com/Textualize/textual/issues?q=is%3Aissue+is%3Aclosed

Please give a brief but clear explanation of the issue.
If you can, include a complete working example that demonstrates the bug.
**Check it can run without modifications.**

It will be helpful if you run the following command and paste the results:

    textual diagnose

Feel free to add screenshots and / or videos.
These can be very helpful!</code></pre>
<p>Something we should probably change is to ask for a <em><strong>minimum reproducible example</strong></em> instead of asking for a “complete working example”.
Sometimes, people report bugs without showing any code to back it up, which is upsetting.
But even more upsetting is when users post hundreds of lines of code!
I feel like it is reasonable to ask users to simplify the code that produces the bug as much as they can, so adding that to the issue template can be a huge time saver.</p>
<p>Depending on the nature of your project, you may need more specific information from the user.
One thing that turned out to be invaluable in our project was the <code>textual diagnose</code> command.
It prints a lot of useful information to the terminal like OS name and version, Python version and install location, and information about the settings of the terminal that was being used, which heavily influenced the way Textual behaved.
You may want to add project-specific instructions in your issue template and/or your <a href="#create-a-contributing-guide">contributing guide</a>.</p>
<h3 id="be-so-kind-it-s-annoying">Be so kind it's annoying<a href="#be-so-kind-it-s-annoying" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>In general, whenever you're interacting with someone else, you should be as kind as possible.
Every person is different and every situation is unique.
Often, there are nuances we're not even aware of and that would explain a certain behaviour that maybe we think is not reasonable.</p>
<ul>
<li>Did a user sound rude or harsh?</li>
</ul>
<p>Maybe English is not their first language and they can't express themselves well enough.
For example, in a certain PR review I ended up saying that the user should be ashamed of what they did because I mixed up an English word with a Portuguese word.</p>
<ul>
<li>Did a user ask something that's already explained in the docs?</li>
</ul>
<p>Assume they actually went through the docs and couldn't find the information or maybe they found it but they didn't understand.
Point them to the appropriate link(s) and ask whether something there was unclear or lacking detail.</p>
<p>This can be pretty tiring but I find it definitely worth the effort.
Interactions that start off seemingly unpleasant can turn out great if you don't escalate the situation.
That happened to me more than once!</p>
<h3 id="give-a-first-reply-quickly">Give a first reply quickly<a href="#give-a-first-reply-quickly" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>One thing I think is very important is to give a first reply to an external user as quickly as possible.</p>
<p>If the user opened an issue, thank them for the report and let them know you'll look at it when you have the time.
If it's a bug report, take a look to see if it's missing a reproducible example or more information and ask for it right away.
If the user opened a pull request, thank them for their time and say you'll review it when you have the chance.</p>
<p>When a user interacts with your project, it's likely that <em>you</em> have something to gain from that interaction.
This is obviously true for bug reports and pull requests.
So, I believe we shouldn't let the user go for days or weeks without a simple reply.</p>
<p>I'm not saying bug reports have to be fixed immediately or pull requests need to be reviewed immediately.
I'm saying we should strive to <em>say something</em> to the user soon.
I came to this realisation after thinking about how I feel when I open an issue on another project and months go by without a reply!</p>
<p>If you're just very busy (which is fine and can definitely be the case) just set up an action that replies automatically with something friendly.
“I appreciate your pull request / bug report.
I am very busy at the moment and I will get back to you as soon as possible.”</p>
<h3 id="how-to-handle-external-pull-requests">How to handle external pull requests<a href="#how-to-handle-external-pull-requests" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Another challenge I faced and that I didn't expect was managing external pull requests.</p>
<p>Much like with bug reports, I found invaluable to have a pull request template with a checklist for external users (and often, for myself as well).
Mentioning things like runnnig tests and formatting the code with the appropriate formatter(s) can save everyone a lot of time.</p>
<p>Another thing I realised is helpful is to make sure that each pull request is associated with an issue.
Sometimes users will open pull requests that implement features without those features ever being discussed.
Chances are the user is trying to be helpful, but sometimes those features need a bit of discussion.
I find that those are the cases where an associated issue will be the most helpful.</p>
<p>If a user opens a pull request out of the blue with a non-trivial change, make sure you thank them for their time and ask them to create an issue that discusses the changes they made.
They probably wanted to implement a feature that is helpful for them (and possibly for others).
Point them to your <a href="#create-a-contributing-guide">contributing guide</a>.</p>
<p>Your guide has your back here because it makes it less likely that the user will see your request as a personal attack.
(Remember that Humans are animals, really...)</p>
<p>When it's time to review the code that the external contributors wrote, remember that if someone went out of their way to make a pull request, it's likely that they are well-intentioned.
As long as you're not an idiot, you'll likely be able to get them to comply with your requested changes!</p>
<p>If you're very peculiar about formatting, naming, design, and/or other things, my suggestion is that you mention those in the <a href="#create-a-contributing-guide">contributing guide</a>.
If there are tools that automate part of the process, mention them.
I personally find it easier to say “as per the contributing guide, we only use variable names that have exactly 5 consonants” – if it's in the guide it obviously applies to everyone and the whole project – versus saying “please use variable names with 5 consonants”, as the user might think you're just being picky with them.</p>
<h3 id="the-dreadful-story-of-when-i-rejected-my-first-external-pr">The dreadful story of when I rejected my first external PR<a href="#the-dreadful-story-of-when-i-rejected-my-first-external-pr" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Most of what I'm writing in this section about interacting with users and contributors came as a realisation after one particular interaction that I had with one specific user.</p>
<p>One day, someone opened a pull request trying to improve a specific guide in the documentation.
These changes came “out of the blue” in the sense that there was not a previously opened issue asking that we improve that guide.</p>
<p>The changes were non-trivial and involved changing the order of some things, duplicating some information, and rewriting sentences.
We are sure the user was well-intentioned.
In fact, we had already interacted with that particular user.
And that well-intentioned pull request had some objectively great suggestions, but it also had other changes that were of subjective quality.</p>
<p>In the end, I opened a second pull request where I committed the best parts of the original pull request.
I made sure to include the author of the first pull request as a co-author.
Then, we merged this second pull request.
However, the first pull request was closed.
When closing it, I made sure to thank the author for their time and I tried to explain why we were closing their pull request.
Thankfully, the user accepted my feedback very graciously!
However, if I had instructions about changing the documentation <a href="#create-a-contributing-guide">in the contributing guide</a> maybe I could've saved this user some time...</p>
<h2 id="working-on-a-large-project">Working on a large project<a href="#working-on-a-large-project" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>Textual was the largest codebase I ever worked on for a sustained period of time.
I've made drive-by contributions to <em>larger</em> projects, but a one-time contribution to a large project is much simpler to make than to work consistently on a large project.</p>
<p>When a codebase reaches a certain size, it becomes virtually impossible to fit all of it in your head at once.
For me, Textual was at this point.
With time, I grew more and more familiar with the codebase but there are still things I don't know exactly how they work and there are parts of the codebase that I never touched.</p>
<p>To make it easier for me to work on such a huge project, I developed three systems:</p>
<ol>
<li>a set of commandments that I kept in mind while working on larger features or bug fixes;</li>
<li>a note-taking system for big tasks, difficult issues, and eventful situations; and</li>
<li>a personal pull request checklist I went through before making a pull request.</li>
</ol>
<p>Let me walk you through these three systems.</p>
<h3 id="4-commandments-for-my-work">4 commandments for my work<a href="#4-commandments-for-my-work" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>I remember making a couple of bigger pull requests that didn't go very well on the first try.
I asked around for suggestions on how to handle these situations (when you're implementing a bigger feature or fixing a very difficult bug) and I ended up with four commandments that I should always keep in mind when writing code.</p>
<ol>
<li>
<p>What's best for the developer? – When making design decisions, I should always think about what the people using my code will want and that's what should drive my decisions.</p>
</li>
<li>
<p>What's the spirit of the issue? – Does the code do everything it <em>should</em>, or am I just addressing the things that are explicitly mentioned in the issue I'm solving? Following the <em>spirit</em> of the issue, is there anything else I should do?</p>
</li>
<li>
<p>I take the hit so that the dev doesn't. – I am the one who needs to handle all annoying or difficult edge cases and write the boring code so that the user doesn't have to.</p>
</li>
<li>
<p>Am I preventing the user from doing something that they might want to do? – Do my design decisions prevent the user from doing things that are reasonable and that they <em>may</em> want to do, even if it's not obvious to me <em>why</em> they'd want to do it?</p>
</li>
</ol>
<p>These four ideas are related and they're possibly self-evident.
In hindsight, they are obvious to me, too.
But it definitely helped me writing them down.</p>
<h3 id="take-notes">Take notes<a href="#take-notes" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Another thing that helped me was writing down notes about bigger issues I was tackling.
Whenever I was trying to fix a difficult bug, I'd jot down some notes about things I tried.
Conjectures I had about the source of the bug.
Attempts at fixing said bug.</p>
<p>Personally, the act of taking notes helped commit to memory some of the things I was learning along the way.
Strategies that did or did not work when trying to solve certain issues.</p>
<p>It's unlikely that note-taking will benefit everyone in the same way, but I'm sure there are variants of this that are likely to benefit you.</p>
<h3 id="personal-pull-request-checklist">Personal pull request checklist<a href="#personal-pull-request-checklist" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Taking notes was helpful to me but I reckon my personal pull request checklist is likely to be generally more helpful to others.
Whenever I was working on an issue, I followed more or less the following flowchart:</p>
<figure><img title="Flowchart for making pull requests." alt="A flowchart that I used to decide whether I could make a pull request or not. The flowchart emphasises how often I ran the tests." src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_PR_flowchart.webp"><figcaption>Flowchart for making pull requests.</figcaption></figure>
<p>If the flowchart above gives off the idea that I ran the tests obsessively, then that's not doing justice to <em>how often</em> I ran the tests.</p>
<p>After a couple of mishaps and interesting adventures I realised there was no such thing as running the tests too often.
Over the course of these 503 days I managed to break the tests, or see someone else break the tests, in the most unexpected ways.
Things like fixing typos in code, removing unused imports, reformatting code, you name it.
Whenever I thought “this change is so trivial I don't need to run the tests”, I would break CI.</p>
<p>Whenever I made a PR, I always started by making it a draft PR and then I would review my own code.
For some reason, reviewing my own code on GitHub helped me catch things that sometimes I would miss when working locally.
I would only request someone else's review after reviewing my own code and making sure the tests were passing on CI.</p>
<p>One thing that may or may not be obvious from this, and that is a bit of a technical comment, is that tests helped me <em>a lot</em> and gave me the confidence I needed to work on the Textual codebase.
There was so much code that it was very easy for me to make a change somewhere, thinking I was doing everything right, and then break the tests in some other (seemingly) unrelated part of the code.
Without tests, my work would have been so much harder...</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>I learned a lot over the course of these 503 days working on Textual.
I'm sad I'm being let go, especially because of what it likely means for Textual, but I don't regret leaving my previous position to join this project.
I learned a lot about Python, software engineering, and a lot about working on open-source projects.
These are the lessons I take from this 503 experience:</p>
<ul>
<li>
<a href="#everything-you-do-online-works-as-a-banner">Everything you do online works as a banner for you</a>.</li>
<li>
<a href="#ask-all-the-questions">Ask ALL the questions</a>.</li>
<li>
<a href="#embrace-code-review-feedback">Embrace (code review) feedback</a>.</li>
<li>
<a href="#everyone-makes-mistakes">Everyone makes mistakes</a>.</li>
<li>
<a href="#create-a-contributing-guide">Create a contributing guide</a>.</li>
<li>
<a href="#give-clear-instructions-to-bug-reporters">Give clear instructions to bug reporters</a>.</li>
<li>
<a href="#be-so-kind-its-annoying">Be so kind it's annoying</a>.</li>
<li>
<a href="#give-a-first-reply-quickly">Give a first reply quickly</a>.</li>
<li>
<a href="#how-to-handle-external-pull-requests">How to handle external pull requests</a>.</li>
<li>
<a href="#4-commandments-for-my-work">4 commandments for my work</a>.</li>
<li>
<a href="#take-notes">Take notes</a>.</li>
<li>
<a href="#personal-pull-request-checklist">Personal pull request checklist</a>.</li>
</ul>
<p>Now, I will use my time to help <em><strong>you</strong></em>, your colleagues, and your team.
If you're looking for Python training, <a href="mailto:rodrigo@mathspp.com">reach out to me</a>.
I will also be devoting more time to writing books and teaching Python online, so stay tuned for that!</p>

        <h2 id="become-a-better-python-developer">Become a better Python 🐍 developer 🚀<a href="#become-a-better-python-developer" data-anchor-icon="#" aria-label="Anchor"></a></h2>

<p>+35 chapters.
+400 pages.
Hundreds of examples.
Over 30,000 readers!</p>
<p>My book “Pydon'ts” teaches you how to write elegant, expressive, and Pythonic code, to help you become a better developer.
<a href="https://gumroad.com/l/pydonts?variant=Free%20for%20ever%20%F0%9F%92%B8&amp;wanted=true">&gt;&gt;&gt; Download it here 🐍🚀</a>.</p>            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Loki: An open-source tool for fact verification (104 pts)]]></title>
            <link>https://github.com/Libr-AI/OpenFactVerification</link>
            <guid>39951571</guid>
            <pubDate>Sat, 06 Apr 2024 10:59:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Libr-AI/OpenFactVerification">https://github.com/Libr-AI/OpenFactVerification</a>, See on <a href="https://news.ycombinator.com/item?id=39951571">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto"><h2 tabindex="-1" dir="auto">Loki: An Open-source Tool for Fact Verification</h2><a id="user-content-loki-an-open-source-tool-for-fact-verification" aria-label="Permalink: Loki: An Open-source Tool for Fact Verification" href="#loki-an-open-source-tool-for-fact-verification"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">Loki is our open-source solution designed to automate the process of verifying factuality. It provides a comprehensive pipeline for dissecting long texts into individual claims, assessing their worthiness for verification, generating queries for evidence search, crawling for evidence, and ultimately verifying the claims. This tool is especially useful for journalists, researchers, and anyone interested in the factuality of information. To stay updated, please subscribe to our newsletter at <a href="https://www.librai.tech/" rel="nofollow">our website</a> or join us on <a href="https://discord.gg/NRge6RS7" rel="nofollow">Discord</a>!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Components</h2><a id="user-content-components" aria-label="Permalink: Components" href="#components"></a></p>
<ul dir="auto">
<li><strong>Decomposer:</strong> Breaks down extensive texts into digestible, independent claims, setting the stage for detailed analysis.</li>
<li><strong>Checkworthy:</strong> Assesses each claim's potential significance, filtering out vague or ambiguous statements to focus on those that truly matter. For example, vague claims like "MBZUAI has a vast campus" are considered unworthy because of the ambiguous nature of "vast."</li>
<li><strong>Query Generator:</strong> Transforms check-worthy claims into precise queries, ready to navigate the vast expanse of the internet in search of truth.</li>
<li><strong>Evidence Crawler:</strong> Ventures into the digital realm, retrieving relevant evidence that forms the foundation of informed verification.</li>
<li><strong>ClaimVerify:</strong> Examines the gathered evidence, determining the veracity of each claim to uphold the integrity of information.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick Start" href="#quick-start"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<ul dir="auto">
<li>Python 3.9 or newer</li>
<li>Required Python packages are listed in <code>requirements.txt</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Installation</h3><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<ol dir="auto">
<li>Clone the repository:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/Libr-AI/factcheckservice.git"><pre>git clone https://github.com/Libr-AI/factcheckservice.git</pre></div>
<ol start="2" dir="auto">
<li>Navigate to the project directory and install the required packages:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="cd factcheckservice
pip install -r requirements.txt"><pre><span>cd</span> factcheckservice
pip install -r requirements.txt</pre></div>
<ol start="3" dir="auto">
<li>Configure api keys</li>
</ol>
<div data-snippet-clipboard-copy-content="cp factcheck/config/secret_dict.template factcheck/config/secret_dict.py"><pre><code>cp factcheck/config/secret_dict.template factcheck/config/secret_dict.py
</code></pre></div>
<p dir="auto">You can choose to export essential api key to the environment, or configure it in <code>factcheck/config/secret_dict.py</code>.</p>
<ul dir="auto">
<li>Example: Export essential api key to the environment</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="export SERPER_API_KEY=... # this is required in evidence retrieval if serper being used
export OPENAI_API_KEY=... # this is required in all tasks
export ANTHROPIC_API_KEY=... # this is required only if you want to replace openai with anthropic"><pre><span>export</span> SERPER_API_KEY=... <span><span>#</span> this is required in evidence retrieval if serper being used</span>
<span>export</span> OPENAI_API_KEY=... <span><span>#</span> this is required in all tasks</span>
<span>export</span> ANTHROPIC_API_KEY=... <span><span>#</span> this is required only if you want to replace openai with anthropic</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Test</h3><a id="user-content-test" aria-label="Permalink: Test" href="#test"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Libr-AI/OpenFactVerification/blob/main/fig/cmd_example.gif"><img src="https://github.com/Libr-AI/OpenFactVerification/raw/main/fig/cmd_example.gif" data-animated-image=""></a></p>
<p dir="auto">To test the project, you can run the <code>factcheck.py</code> script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# String
python factcheck.py --modal string --input &quot;MBZUAI is the first AI university in the world&quot;
# Text
python factcheck.py --modal text --input demo_data/text.txt
# Speech
python factcheck.py --modal speech --input demo_data/speech.mp3
# Image
python factcheck.py --modal image --input demo_data/image.webp
# Video
python factcheck.py --modal video --input demo_data/video.m4v"><pre><span><span>#</span> String</span>
python factcheck.py --modal string --input <span><span>"</span>MBZUAI is the first AI university in the world<span>"</span></span>
<span><span>#</span> Text</span>
python factcheck.py --modal text --input demo_data/text.txt
<span><span>#</span> Speech</span>
python factcheck.py --modal speech --input demo_data/speech.mp3
<span><span>#</span> Image</span>
python factcheck.py --modal image --input demo_data/image.webp
<span><span>#</span> Video</span>
python factcheck.py --modal video --input demo_data/video.m4v</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">The main interface of the Fact-check Pipeline is located in <code>factcheck/core/FactCheck.py</code>, which contains the <code>check_response</code> method. This method integrates the complete pipeline, where each functionality is encapsulated in its class as described in the Features section.</p>
<p dir="auto">Example usage:</p>
<div dir="auto" data-snippet-clipboard-copy-content="from factcheck.core.FactCheck import check_response

# Example text
text = &quot;Your text here&quot;

# Run the fact-check pipeline
results = check_response(text)
print(results)"><pre><span>from</span> <span>factcheck</span>.<span>core</span>.<span>FactCheck</span> <span>import</span> <span>check_response</span>

<span># Example text</span>
<span>text</span> <span>=</span> <span>"Your text here"</span>

<span># Run the fact-check pipeline</span>
<span>results</span> <span>=</span> <span>check_response</span>(<span>text</span>)
<span>print</span>(<span>results</span>)</pre></div>
<p dir="auto">Web app usage:</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Libr-AI/OpenFactVerification/blob/main/fig/web_input.png"><img src="https://github.com/Libr-AI/OpenFactVerification/raw/main/fig/web_input.png"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Libr-AI/OpenFactVerification/blob/main/fig/web_result.png"><img src="https://github.com/Libr-AI/OpenFactVerification/raw/main/fig/web_result.png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We welcome contributions from the community! If you'd like to contribute, please follow these steps:</p>
<ol dir="auto">
<li>Fork the repository.</li>
<li>Create a new branch for your feature (<code>git checkout -b feature/AmazingFeature</code>).</li>
<li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>).</li>
<li>Push to the branch (<code>git push origin feature/AmazingFeature</code>).</li>
<li>Open a pull request.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Ready for More?</h2><a id="user-content-ready-for-more" aria-label="Permalink: Ready for More?" href="#ready-for-more"></a></p>
<p dir="auto">💪 <strong>Join Our Journey to Innovation with the Supporter Edition</strong></p>
<p dir="auto">As we continue to evolve and enhance our fact-checking solution, we're excited to invite you to become an integral part of our journey. By registering for our Supporter Edition, you're not just unlocking a suite of advanced features and benefits; you're also fueling the future of trustworthy information.</p>
<p dir="auto">Your support enables us to:</p>
<p dir="auto">🚀 Innovate continuously: Develop new, cutting-edge features that keep you ahead in the fight against misinformation.</p>
<p dir="auto">💡 Improve and refine: Enhance the user experience, making our app not just powerful, but also a joy to use.</p>
<p dir="auto">🌱 Grow our community: Invest in the resources and tools our community needs to thrive and expand.</p>
<p dir="auto">🎁 And as a token of our gratitude, registering now grants you <strong>complimentary token credits</strong>—a little thank you from us to you, for believing in our mission and supporting our growth!</p>
<div dir="auto">
<table>
<thead>
<tr>
<th>Feature</th>
<th>Open-Source Edition</th>
<th>Supporter Edition</th>
</tr>
</thead>
<tbody>
<tr>
<td>Trustworthy Verification Results</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Diverse Evidence from the Open Web</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Automated Correction of Misinformation</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Privacy and Data Security</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Multimodal Input</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>One-Stop Custom Solution</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Customizable Verification Data Sources</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Enhanced User Experience</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Faster Efficiency and Higher Accuracy</td>
<td>❌</td>
<td>✅</td>
</tr>
</tbody>
</table>
</div>
<p dir="auto"><a href="https://aip.librai.tech/login" rel="nofollow">TRY NOW!</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Stay Connected and Informed</h2><a id="user-content-stay-connected-and-informed" aria-label="Permalink: Stay Connected and Informed" href="#stay-connected-and-informed"></a></p>
<p dir="auto">Don’t miss out on the latest updates, feature releases, and community insights! We invite you to subscribe to our newsletter and become a part of our growing community.</p>
<p dir="auto">💌 Subscribe now at <a href="https://www.librai.tech/" rel="nofollow">our website</a>!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the <a href="https://github.com/Libr-AI/OpenFactVerification/blob/main/LICENSE.md">MIT license</a> - see the LICENSE file for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgments</h2><a id="user-content-acknowledgments" aria-label="Permalink: Acknowledgments" href="#acknowledgments"></a></p>
<ul dir="auto">
<li>Special thanks to all contributors who have helped in shaping this project.</li>
</ul>

<p dir="auto"><h2 tabindex="-1" dir="auto">Cite as</h2><a id="user-content-cite-as" aria-label="Permalink: Cite as" href="#cite-as"></a></p>
<div data-snippet-clipboard-copy-content="@misc{Loki,
  author = {Wang, Hao and Wang, Yuxia and Wang, Minghan and Geng, Yilin and Zhao, Zhen and Zhai, Zenan and Nakov, Preslav and Baldwin, Timothy and Han, Xudong and Li, Haonan},
  title = {Loki: An Open-source Tool for Fact Verification},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/Libr-AI/Loki}},
}"><pre><code>@misc{Loki,
  author = {Wang, Hao and Wang, Yuxia and Wang, Minghan and Geng, Yilin and Zhao, Zhen and Zhai, Zenan and Nakov, Preslav and Baldwin, Timothy and Han, Xudong and Li, Haonan},
  title = {Loki: An Open-source Tool for Fact Verification},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/Libr-AI/Loki}},
}
</code></pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How we communicate (129 pts)]]></title>
            <link>https://37signals.com/how-we-communicate</link>
            <guid>39951086</guid>
            <pubDate>Sat, 06 Apr 2024 09:08:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://37signals.com/how-we-communicate">https://37signals.com/how-we-communicate</a>, See on <a href="https://news.ycombinator.com/item?id=39951086">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    <p>The how, where, why, and when we communicate. Long form asynchronous? Real-time chat? In-person? Video? Verbal? Written? Via email? In Basecamp? How do we keep everyone in the loop without everyone getting tangled in everyone else’s business? It’s all in here.</p>
  </div><div>

    <h2 id="rules-of-thumb-and-general-philosophy">Rules of thumb, and general philosophy</h2>
    <p>Below you’ll find a collection of general principles we try to keep in mind at 37signals when communicating with teammates, within departments, across the company, and with the public. They aren’t requirements, but they serve to create boundaries and shared practices to draw upon when we do the one thing that affects everything else we do: communicate.</p>
    <ol>
      <li>You can not not communicate. Not discussing the elephant in the room is communicating. Few things are as important to study, practice, and perfect as clear communication.</li>
      <li>Real-time sometimes, asynchronous most of the time.</li>
      <li>Internal communication based on long-form writing, rather than a verbal tradition of meetings, speaking, and chatting, leads to a welcomed reduction in meetings, video conferences, calls, or other real-time opportunities to interrupt and be interrupted.</li>
      <li>Give meaningful discussions a meaningful amount of time to develop and unfold. Rushing to judgement, or demanding immediate responses, only serves to increase the odds of poor decision making.</li>
      <li>Meetings are the last resort, not the first option.</li>
      <li>Writing solidifies, chat dissolves. Substantial decisions start and end with an exchange of complete thoughts, not one-line-at-a-time jousts. If it’s important, critical, or fundamental, write it up, don’t chat it down.</li>
      <li>Speaking only helps who’s in the room, writing helps everyone. This includes people who couldn’t make it, or future employees who join years from now.</li>
      <li>If your words can be perceived in different ways, they’ll be understood in the way which does the most harm.</li>
      <li>Never expect or require someone to get back to you immediately unless it’s a true emergency. The expectation of immediate response is toxic.</li>
      <li>If you have to repeat yourself, you weren’t clear enough the first time. However, if you’re talking about something brand new, you may have to repeat yourself for years before you’re heard. Pick your repeats wisely.</li>
      <li>Poor communication creates more work.</li>
      <li>Companies don’t have communication problems, they have miscommunication problems. The smaller the company, group, or team, the fewer opportunities for miscommunication.</li>
      <li>Five people in a room for an hour isn’t a one hour meeting, it’s a five hour meeting. Be mindful of the tradeoffs.</li>
      <li>Be proactive about “wait, what?” questions by providing factual context and spatial context. Factual are the things people also need to know. Spatial is where the communication happens (for example, if it’s about a specific to-do, discuss it right under the to-do, not somewhere else).</li>
      <li>Communication shouldn’t require schedule synchronization. Calendars have nothing to do with communication. Writing, rather than speaking or meeting, is independent of schedule and far more direct.</li>
      <li>“Now” is often the wrong time to say what just popped into your head. It’s better to let it filter it through the sieve of time. What’s left is the part worth saying.</li>
      <li>Ask yourself if others will feel compelled to rush their response if you rush your approach.</li>
      <li>The end of the day has a way of convincing you what you’ve done is good, but the next morning has a way of telling you the truth. If you aren’t sure, sleep on it before saying it.</li>
      <li>If you want an answer, you have to ask a question. People typically have a lot to say, but they’ll volunteer little. Automatic questions on a regular schedule help people practice sharing, writing, and communicating.</li>
      <li>Occasionally pick random words, sentences, or paragraphs and hit delete. Did it matter?</li>
      <li>Urgency is overrated, ASAP is poison.</li>
      <li>If something’s going to be difficult to hear or share, invite questions at the end. Ending without the invitation will lead to public silence but private conjecture. This is where rumors breed.</li>
      <li>Where you put something, and what you call it, matters. When titling something, lead with the most important information. Keep in mind that many technical systems truncate long text or titles.</li>
      <li>Write at the right time. Sharing something at 5pm may keep someone at work longer. You may have some spare time on a Sunday afternoon to write something, but putting it out there on Sunday may pull people back into work on the weekends. Early Monday morning communication may be buried by other things. There may not be a perfect time, but there’s certainly a wrong time. Keep that in mind when you hit send.</li>
      <li>Great news delivered on the heels of bad news makes both bits worse. The bad news feels like it’s being buried, the good news feels like it’s being injected to change the mood. Be honest with each by giving them adequate space.</li>
      <li>Time is on your side, rushing makes conversations worse.</li>
      <li>Communication is lossy, especially verbal communication. Every  hearsay hop adds static and chips at fidelity. Whenever possible, communicate directly with those you’re addressing rather than passing the message through intermediaries.</li>
      <li>Ask if things are clear. Ask what you left out. Ask if there was anything someone was expecting that you didn’t cover. Address the gaps before they widen with time.</li>
      <li>Consider where you put things. The right communication in the wrong place might as well not exist at all. When someone relies on search to find something it’s often because it wasn’t where they expected something to be.</li>
      <li>Communication often interrupts, so good communication is often about saying the right thing at the right time in the right way with the fewest side effects.</li>
    </ol>

    <h2 id="communicating-day-to-day">Communicating day-to-day</h2>
    <p>This section includes specific examples of how we apply our philosophy day-to-day across the company. Since communication often interrupts, valuing each other’s time and attention is a critical consideration. Keeping people in the loop is important, but asking them to follow along with everything is a distraction. That’s why we follow reliable, predictable methods to share the right kind of information at the right time in the right place.</p>

    <h4 id="basic-toolset">Basic toolset</h4>
    <p>98% of our internal communication happens inside Basecamp. That means all company-wide discussions, social chatter, project-related work, sharing of ideas, internal debates, <a href="https://basecamp.com/features/automatic-check-ins">automatic check-ins</a>, status updates, policy updates, and all official decisions and announcements all happen in Basecamp. A single centralized tool keeps everything together and creates a single source of truth for everyone across the company. We don’t use email internally (we do externally), we don’t use separate chat tools like Slack or Teams, and we rarely have in-person meetings. We do use Zoom or Skype for the occasional video conference between two or three people. And we occasionally discuss a pull request in GitHub.</p>

    <h4 id="automatic-daily-what-did-you-work-on-today">Automatic daily: “What did you work on today?</h4>
    <p>Every workday at 16:30, Basecamp (the product) automatically asks every employee “What did you work on today?” Whatever people write up is shared with everyone in the company. Everyone’s responses are displayed on a single page, grouped by date, so anyone who’s curious about what’s happening across the company can simply read from top to bottom. And if you have a question about anything, you can comment on anyone’s “what did you work on today?” check-in to keep the conversation in context.</p>
    <p>This routine is about loose accountability and strong reflection. Writing up what you did every day is a great way to think back about what you accomplished and how you spent your time.</p>
    <p>Some people just jot down a few bullets. Others write multi-paragraph stories to share — and document — the thinking behind their work. There are no requirements here. We just ask everyone to write in their own style.</p>

    <h4 id="automatic-weekly-what-will-you-be-working-on-this-week">Automatic weekly: “What will you be working on this week?”</h4>
    <p>Every Monday morning, Basecamp automatically asks everyone “What will you be working on this week?” This is a chance for everyone to lay out the big picture of their week. It’s not about regurgitating individual tasks, or diving headlong into the minutia of the week. It’s generally just your 10,000 foot view of the week ahead. The big picture items, the general themes. It sets your mind up for the work ahead, and, collectively, it gives everyone a good sense of what’s happening across the company this week.</p>

    
    <p>Every few weeks, or once a month, Basecamp will automatically ask everyone a social-style question. “What books are you reading?” Or “Try anything new lately?” Or “Anything inspire you lately?” Or “Seen any great design recently?” Or “What did you do this weekend?” These entirely optional questions are meant to shake loose some stuff that you’d love to share with everyone else, but you hadn’t had an opportunity to do so. This kind of internal communication helps grease the social gears. This is especially useful for remote teams, like ours. When we know each other a little better, we work a little better together.</p>

    <h4 id="-reflect-every-6-weeks-heartbeats">← Reflect every 6 weeks: Heartbeats</h4>
    <p>Heartbeats summarize the last ~6-weeks of work for a given team, department, or individual (if that person is a department of one). They’re written by the lead of the group, and they’re meant for everyone in the company to read. They summarize the big picture accomplishments, they detail the little things that mattered, and they generally highlight the importance of the work. They’ll also shine a light on challenges and difficulties along the way. They’re a good reminder that it’s not all sunshine all the time. On balance, Heartbeats are wonderful to write, fun to read, and they help everyone — including those not directly involved with the work — reflect on jobs well done and progress well made.</p>

    <h4 id="-project-every-6-weeks-kickoffs">→ Project every 6 weeks: Kickoffs</h4>
    <p>Kickoffs are essentially the opposites of Heartbeats. Rather than reflect, they project. They’re all about what the team plans on taking on over the next 6 weeks. Projects, initiatives, revamps, whatever it might be, if it’s on the slate, it gets summarized in the Kickoff. While Kickoffs detail specific work for a specific group, they’re also meant for full-company consumption. Like Heartbeats, they’re written by the team lead. Kickoffs are broad in scope, so they don’t cover all the details in the work ahead — the teams doing the work are the ones that wade into those weeds. We don’t want to overwhelm everyone with details that don’t matter. If anyone’s curious about something included in a Kickoff, they’re free to post a comment and ask a question.</p>

    <h4 id="whenever-relevant-announcements">Whenever relevant: Announcements</h4>
    <p>Occasionally we update an internal policy. Something about vacation time, or a new benefit, or reiterating that 40 hour weeks means 40 hour weeks. When we have something to announce company-wide, we don’t send an email. Email is decentralized and there’s no permanent record in a permanent place everyone can see. Instead, we post it either to the 37signals HQ message board or as a comment on an existing policy document stored in Basecamp. This means everyone sees the same thing, everyone hears the same thing, and everyone knows the same thing — including future employees who are yet to join. We now have a shared truth.</p>

    <h4 id="day-to-day-project-work-in-context">Day-to-day project work: In context</h4>
    <p>Effective communication requires context. Saying the right thing in the wrong place, or without proper detail, leads to double work and messages being missed. That’s why we spin up a separate Basecamp project for every project we work on. Everything related to that project is communicated inside that project. All the tasks, all the discussions, all the documents, all the debates, and all the decisions happen inside those walls. Everyone who needs access, has access. Every Basecamp project is a capsule of everything someone needs to know about that work project.</p>
    <p>Further, we take spatial context seriously. If we’re discussing a specific task, we discuss it in the comment section below the task itself. If we’re talking about a specific document, we discuss it in the comments attached to the document. Communications stay attached to the thing we’re discussing. This provides the full story in one reliable place. The alternative is terrible — communication detached from the original source material, discussions all over the place, fragmented conversations missing entire chunks of time and detail, etc. Basecamp’s “everything is commentable” feature is what makes this possible for us.</p>

    <h2 id="other-resources">Other resources</h2>
    <p>We’ve detailed the pros and cons of chat vs. long form writing in our infamous “<a href="https://37signals.com/group-chat-problems">Group Chat: Group Stress</a>” guide. We definitely recommend checking it out.</p>
    <p>You’ll also find a detailed explanation of how our teams work day-to-day on software projects in “<a href="https://basecamp.com/shapeup">Shape Up: Stop Running in Circles and Ship Work that Matters</a>”.</p>
    <p>Basecamp-exclusive <a href="https://basecamp.com/features/hill-charts">Hill Charts</a> help us see where projects really stand without having to rely on inefficient status meetings, daily standups, or regular in-person check-ins.</p>
    <p>The <a href="https://basecamp.com/handbook">37signals Employee Handbook</a> is also worth checking out. It explains how we’re structured, how we define titles and roles, our full benefits package, our company values, the responsibilities of individual contributors, managers, and executives, and other essential bits.</p>

    <h2 id="anything-else">Anything else?</h2>
    <p>We hope this guide was useful, but we’re sure we’re missing something. What questions do you still have? What did you hope to learn that you didn’t? Was anything more confusing than clarifying? What would have made this guide more helpful? It’s a work in progress, and we’ll update as necessary based on your feedback. Please send questions, suggestions, and thoughts directly to the author, Jason Fried, at <a href="mailto:jason@37signals.com">jason@37signals.com</a>. Thanks!</p>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What I think about when I edit (2019) (236 pts)]]></title>
            <link>https://evaparish.com/blog/how-i-edit</link>
            <guid>39950760</guid>
            <pubDate>Sat, 06 Apr 2024 07:48:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://evaparish.com/blog/how-i-edit">https://evaparish.com/blog/how-i-edit</a>, See on <a href="https://news.ycombinator.com/item?id=39950760">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-block-type="44" id="item-5d0ba6c71b9e0500014435be" data-layout-label="Post Body" data-type="item"><p>I’m often asked to edit friends’ or coworkers’ writing, anything from emails to short stories to documentation. Recently, someone asked me <em>how</em> I edit. What am I looking for? How do I know what changes to make? That made me stop and think about what I’ve been doing semi-instinctually.</p>
<p>In this post, I want to distill the major points of editing that I believe in but haven’t spelled out until now. Much of this advice applies across genres. Personally, I wrote academic papers in college, write poetry and short fiction in my free time, and write technical documentation for work, and I’ve applied the same basic editing techniques to all.</p>
<p><strong>I also think that different genres inform each other.</strong> There are principles I’ve taken from fiction writing that make my technical language even clearer, and learning just how much people skim when reading technical documentation has improved how I format and write things like emails.</p>
<p>Here are my recommendations:</p>
<ul>
<li><a href="#decide">Decide what you’re actually saying</a></li>
<li><a href="#repeat">Repeat yourself (within reason)</a></li>
<li><a href="#simplify">Simplify</a></li>
<li><a href="#passive-voice">Eliminate passive voice</a></li>
<li><a href="#adverbs">Don’t use adverbs</a></li>
<li><a href="#assume">Don’t assume knowledge</a></li>
<li><a href="#tone">Be aware of your tone</a></li>
<li><a href="#jargon">Avoid jargon and cliches</a></li>
<li><a href="#whitespace">Make use of whitespace</a></li>
</ul>
<hr>

<h2 id="decide-what-you-re-actually-saying">Decide what you’re actually saying</h2>
<p>Before you ever get to editing at the sentence level, you have to determine whether you’ve said what you meant to say.</p>
<p>I recommend writing a <em>preamble</em>*, just for your own use, on everything you write. Take a few minutes and consider what you’re trying to say. <strong>What is your main point? Who are you writing for?</strong> Then <em>actually write this information down</em> at the top of your document (or notebook, or cafe napkin) so it’s there staring you in the face as you work. As you write, and as you edit, you can compare what you have on the page to what you set out to do.</p>
<p>It also forces you to think about what your message actually is. Say you want to write a blog post: if you can’t summarize the point you want to make in a sentence or two, how are you going to write a coherent post?</p>
<p>*I took this name from something we do in my creative writing classes at the <a href="https://www.writerstudio.com/about/">Writers Studio</a> in New York. As part of every assignment, we have to write a preamble: a few sentences at the top of the page mentioning what we intended to do, including the kind of narrator, tone, and mood. When other students critique your work in class, they’re holding it up to this model and evaluating whether you achieved your aim, focusing on <em>craft</em>, not whether they like your main character.</p>

<h2 id="repeat-yourself-within-reason-">Repeat yourself (within reason)</h2>
<p>Even if you think you’ve made your point very clearly, it’s worth restating it at the beginning and end of what you’re writing to make sure the reader gets it.</p>
<p>This principle applies across most genres. In documentation, a good tutorial will have a brief introduction to what you’re going to do, then the actual procedure, and finally a way for you to verify that you’ve done the thing correctly. In a blog post, you should introduce what you’re going to discuss in the post, then actually do that, and have a short summary at the end. And so on.</p>
<p>“Repeat yourself” applies at the language level too. One of the best writing tips I've ever gotten was to avoid using <a href="https://www.gingersoftware.com/content/grammar-rules/demonstrative-pronouns/">demonstrative pronouns</a>. Instead of saying “this” or “that,” you should add a noun to spell out exactly what you’re referring to, <em>even if you’ve just mentioned it</em>. </p>
<blockquote>
<p><em>Example:</em> We only have two boxes left. To solve <strong>this</strong>, we should order more.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> We only have two boxes left. To solve this shortage, we should order more.</p>
</blockquote>
<blockquote>
<p><em>Example:</em> Click next and enter your credentials when prompted. <strong>That</strong> will take you to the home screen.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Click next and enter your credentials when prompted. Successfully authenticating will take you to the home screen.</p>
</blockquote>
<p>This duplication can feel repetitive when you’re writing it, but it won’t feel repetitive to your reader—it’ll make your writing clearer and easier to follow.</p>
<p>In summary: when editing, <strong>look for ways that you can restate your point, clarify, or provide closure for the reader</strong>.</p>

<h2 id="simplify">Simplify</h2>
<p>When I edit someone else’s work, my number one quest is to remove words. Eliminate the fluff. Are there constructions that can be shortened? Any extraneous words that don’t add to the meaning of the sentence?</p>
<blockquote>
<p><em>Example:</em> You will need to run this script.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Run this script.</p>
</blockquote>


<blockquote>
<p><em>Example:</em> You can aid in readability by making sure that the names of things properly communicate what they do.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Make sure the names of things communicate what they do.</p>
</blockquote>
<p><strong>Unless you have a very specific reason not to, strive to get to the point as quickly as possible.</strong> Don’t bury your meaning in excess words and flowery constructions.</p>
<p>Other ways to simplify:</p>
<h3 id="-you-should-you-can-">“You should”/“You can”</h3>
<p>When writing instructions, anywhere you say “<em>You should X</em>” or “<em>You can X,</em>” replace it with the <a href="http://www.cws.illinois.edu/workshop/writers/verbmood/">imperative mood of the verb</a>.</p>
<blockquote>
<p><em>Example:</em> You should save the file to your home directory.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Save the file to your home directory.</p>
</blockquote>
<p>This change eliminates a couple words, making the sentence easier to read, and brings the reader straight to the point.</p>
<h3 id="-of-and-for-clauses">“Of” and “for” clauses</h3>
<p>Instead of using constructions with “of” or “for,” rewrite the sentence to put more information before the noun. This ordering makes the sentence more efficient.</p>
<blockquote>
<p><em>Example:</em> The manager of the team responsible for marketing</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> The marketing team’s manager</p>
</blockquote>
<p>In the rearranged version above, the reader can more quickly grasp what you mean, instead of having to revise her understanding after each clause.</p>
<h3 id="split-it-up">Split it up</h3>
<p>Break up long sentences into multiple shorter sentences.</p>
<blockquote>
<p><em>Example:</em> Due to the Acme project which just completed a major milestone of having all non-staging servers running in the Foobaz environment, we now see build times of sub-10 minutes which were previously taking over an hour when running with the XYZ plan.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> The Acme project recently completed a major milestone: all non-staging servers are now running in the Foobaz environment. Builds now take fewer than 10 minutes to complete. This change is a significant improvement, as builds on the XYZ plan previously took over an hour to complete.</p>
</blockquote>
<p>Also, break up sentences by adding commas <a href="https://owl.purdue.edu/owl/general_writing/punctuation/commas/extended_rules_for_commas.html">where appropriate</a>. For example, I’ve noticed a trend towards people dropping commas after subordinate clauses. I always add them back when I edit:</p>
<blockquote>
<p><em>Example:</em> If you’re looking for me I’ll be in my office.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> If you’re looking for me, I’ll be in my office.</p>
</blockquote>


<blockquote>
<p><em>Example:</em> Due to the fog our flight was delayed.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Due to the fog, our flight was delayed.</p>
</blockquote>
<p>I suspect that this is because, when we speak colloquially, we don’t pause at that point in the sentence. However, grammatically, <a href="https://owl.purdue.edu/owl/general_writing/punctuation/independent_and_dependent_clauses/index.html">you need a comma after a subordinate (or dependent) clause when it comes at the start of a sentence</a>. Besides being “correct,” the comma helps the reader pause and process what they’ve just read before moving on to the rest of the sentence. Using commas after subordinate clauses improves reader comprehension.</p>

<h2 id="eliminate-passive-voice">Eliminate passive voice</h2>
<p>You’ve heard this advice before. But you should understand <em>why</em> you shouldn’t use passive voice in your writing. It’s not just “bad style.”</p>
<p><strong>Passive voice obscures who or what is performing the action.</strong> Rewriting a passive construction to be active <em>almost always</em> makes what you’re saying clearer and makes the sentence easier to read, because your reader can attribute the action to the right person or thing.</p>
<blockquote>
<p><em>Example:</em> The fire alarm was pulled and the building was evacuated.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> The fire marshal pulled the alarm and the employees evacuated the building.</p>
</blockquote>


<blockquote>
<p><em>Example:</em> Millions of dollars were embezzled from the company.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Two executives embezzled millions of dollars from the company.</p>
</blockquote>
<p>It may even help <em>you</em> understand what you’re saying better. If you’re describing a system you built, and you say “An alert is triggered and the job is started”—do you know <em>how</em> those things happen? Which service triggers the alert? Which component is responsible for executing the job? In rewriting, you may realize that something doesn’t work as you expected, or that you don’t know how it works.</p>
<p>In technical documentation, you lose precision when you don’t attribute the action to someone or something. And in all writing, refining your language refines your understanding of the world.</p>

<h2 id="don-t-use-adverbs">Don’t use adverbs</h2>
<p>This aversion to adverbs is one of the principles I’ve taken from fiction-writing.</p>
<p><strong>You can almost always replace an adverb with a better, more specific verb, or describe what you mean instead.</strong> Being more specific is especially key in fiction, but I believe in stripping out adverbs in all types of writing.</p>
<p>There is nothing <em>inherently</em> wrong with adverbs. They are just part of a category of things that I believe are lazy in writing. When I say “He laughed loudly,” I’m relying on my reader somehow intuiting the precise volume of his laughter. “Loudly” could mean a million things, but what I really had in mind is that “He laughed with the kind of booming abandon that made the whole restaurant turn around and look.”</p>
<p>People also often use adverbs as a hedge: “Basically, it's this.” “Essentially, this is what I’m saying.” Is it, or isn’t it? Remove the adverb and commit to saying whatever you’re saying.</p>

<h2 id="don-t-assume-knowledge">Don’t assume knowledge</h2>
<p>It’s easy to fall into this trap when you’re writing about something you know well: you forget to consider what <em>you</em> know that your audience <em>doesn’t</em>. You don’t take a step back and provide relevant context. Imagine how much more pleasant it would be to read emails, documentation, etc., if people actually spelled out those TLAs (three-letter acronyms)!</p>
<p>Let’s start with an example, and look at a few ways we can improve it.</p>
<blockquote>
<p><em>Example:</em> This chart shows the TTFB for our website over the past week.</p>
</blockquote>
<p>To some people, this sentence makes perfect sense. To many people… not so much.</p>
<ul>
<li><p><em>Spell out acronyms on first use.</em> Any time you introduce an acronym or an initialism in a document, spell out what it means and put the acronym in parentheses. Thereafter, you can use the acronym by itself.</p>
<blockquote>
<p><em>Revision 1:</em> This chart shows the <u data-preserve-html-node="true">time to first byte (TTFB) metric</u> for our website over the past week.</p>
</blockquote>
<p>  You might think it’s obvious what an acronym means, but a new reader may not.</p>
</li>
</ul>
<ul>
<li><p><em>Add a phrase or a sentence briefly explaining a concept when you introduce it.</em></p>
<blockquote>
<p><em>Revision 2:</em> This chart shows the time to first byte (TTFB) metric for our website over the past week. <u data-preserve-html-node="true">TTFB measures how long it takes from when a user makes an HTTP request to when the user’s browser loads the first byte of data. It’s used as an indicator of how responsive a website is</u>.</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><em>Link out to further reading.</em> Once you define a concept and the corresponding acronym, provide a link to somewhere that the reader can learn more about that concept if they’re still curious. You don’t have to call attention to the link.</p>
<blockquote>
<p><em>Revision 3:</em> This chart shows the <a href="https://en.wikipedia.org/wiki/Time_to_first_byte">time to first byte (TTFB) metric</a> for our website over the past week. TTFB measures how long it takes from when a user makes an HTTP request to when the user’s browser loads the first byte of data. It’s used as an indicator of how responsive a website is.</p>
</blockquote>
</li>
</ul>
<p>By now, your readers are with you, and they’re ready to proceed, feeling confident that they have an idea of what you’re talking about.</p>

<h2 id="be-aware-of-your-tone">Be aware of your tone</h2>
<p>Know what kind of tone you’re going for, and be consistent. You can be colloquial or formal, but not both.</p>
<blockquote>
<p><em>Example:</em> We were really into this new framework that we found for like a minute or two, but the metrics captured by the system do not correspond precisely enough to our investigative goals to be useful.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> We were initially enthusiastic about the X framework, but we found that it did not capture the metrics we were looking for.</p>
</blockquote>
<p>The original sentence starts out <em>very</em> colloquial and then morphs into formal, almost academic language. In the best case, you’ll confuse your readers about why you switched. In the worst case, you’ll completely distract them from what you’re saying.</p>

<h2 id="avoid-jargon-and-cliches">Avoid jargon and cliches</h2>
<p>In the business world, <a href="https://www.grantthornton.com/-/media/content-page-files/press-releases/2018/Jargon-Index-2018.ashx?la=en">jargon</a> means things like “deep dive“ and “low-hanging fruit”. Elsewhere, we love to use cliches. Especially baseball metaphors, for some reason: “step up to the plate,” “hit it out of the park,” “take a swing at it.”</p>
<p>It will always be better and clearer when you say exactly what you mean. <strong>Using jargon is lazy, and it assumes that the reader is part of the in-group that uses that jargon</strong> (see also: Don’t assume knowledge, above). It can be difficult for non-native English speakers (or non-Americans, when it comes to baseball) to follow your writing when you use jargon and cliches.</p>
<blockquote>
<p><em>Example:</em> tl;dr, if you can hack something together by EOD, that would be great.</p>
</blockquote>
<blockquote>
<p><em>Revision:</em> Can you deliver a prototype by the end of today?</p>
</blockquote>
<p>The original sentence has incomprehensible acronyms and tech slang, and doesn’t even sound like a request. The second one is straightforward, and asks for what the writer needs and by when.</p>

<h2 id="make-use-of-whitespace">Make use of whitespace</h2>
<p>Whitespace is key for technical documentation but can also be used to great effect in blog posts, emails, and elsewhere. It’s hard for people to read long paragraphs, especially on a computer screen. They will zone out. Ensure that readers stay with you by visually breaking up the page and making your key points easy to identify.</p>
<p>A few suggestions:</p>
<ul>
<li>Break up long paragraphs into multiple shorter ones.</li>
<li>Use useful <strong>subheadings</strong> to give your document some structure and allow readers to skip ahead to the section they’re interested in.</li>
<li>Use <strong>lists</strong> where relevant, because it’s easier to read a bulleted list of items than to read a paragraph with the same information.<ul>
<li>When you need to convey large amounts of information (for example, in reference documentation), <strong>tables</strong> are even better than lists.</li>
</ul>
</li>
<li>Use <strong>bold</strong> so that readers who skim (i.e., everyone) will still pick out your main points. (For an example, see the body of this post.)</li>
</ul>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>To simplify what you’ve just read, my editing philosophy can be reduced to two tenets:</p>
<ul>
<li><em>Say exactly what you mean</em>, which means not relying on adverbs, jargon, cliches, or hedges, and</li>
<li><em>Take out all unnecessary words</em>.</li>
</ul>
<p>Keeping these two tenets in mind will help you in your own writing, and will give you a framework for evaluating other people’s writing. Over time, as you practice, you’ll develop your own style and preferences. You may end up diverging from some of my recommendations, and that’s great, as long as you know <em>why</em> you’re doing so. <strong>The point of editing is to think about how you’re using language and to make choices that suit the message you want to deliver</strong>, <em>not</em> to unquestioningly follow rules—mine or anyone else’s.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A History of Source Control Systems: SCCS and RCS (105 pts)]]></title>
            <link>https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/</link>
            <guid>39950712</guid>
            <pubDate>Sat, 06 Apr 2024 07:38:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/">https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/</a>, See on <a href="https://news.ycombinator.com/item?id=39950712">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><em><a href="https://news.ycombinator.com/item?id=39950712">HN Thread</a> and <a href="https://lobste.rs/s/i3eg8u/history_source_control_systems_sccs_rcs">lobste.rs thread</a>.</em></p><p>Source Control Management (SCM) Systems, have a long and rich history. As the systems evolved, so have their concepts, use cases and adoption over time. While SCMs are ubiquitous in modern software development, they have been fairly novel in the 80s and 90s, and arguable it took the rise of Git and Github for them to be used nearly everywhere.</p><p>I want to provide an overview of what I consider the most important and influential systems over time. This list does not attempt to be complete. There are many systems that aren’t covered and details that I will be missing. The history of some of these systems are difficult to trace back. There is little write up on the origins of early software, and so my primary sources of many of these are Wikipedia. More recent systems such as SVN, Mercurial and Git are easier to find sources on and I often recall some of the details from memory.</p><p>Note that this posts focuses on source control systems, meaning systems meant for storing versions of source code. Other version control systems that focus primarily binary data will not be covered. For the purpose of this blog post, I will use the terms <em>source control system</em> and <em>version control system</em> interchangeable. I recognize that source control systems are a subcategory of version control systems.</p><p>I have used most of the systems on this list myself at some point in time. For systems that I haven’t used myself, such as SourceSafe and ClearCase, I would love to hear from you about your experience with them.</p><h2 id="overview">Overview</h2><p>The blog post is ordered chronological. The initial post, Part 1, will cover SCCS and RCS, two hugely influential version control systems of the 70s and 80s. The systems are generally local only and version single files at a time.</p><p>Part 2 (TBD) will cover the rise of centralised version control systems, such as CVS, SourceSafe, ClearCase, that allow users for the first time concurrent access to the same files from different machines.</p><p>In the third part (TBD), we will focus on the evolution of centralised version control systems and touch on SVN and Perforce, two very successful and until this day, widely used version control systems.</p><p>Part 4 (TBD) will put the spotlight on the next leap in version control systems: Decentralised version control. We will take a look at the origins of decentralised version control systems at Sun Microsystems, and their spiritual descendant Bitkeeper, and take a look at early open source systems such as has GNU Arch, Monotone and the very unique Darcs.</p><p>With the origins of decentralised version control systems behind us, we will focus in Part 5 (TBD), on the version control systems wars between 2005 to 2015, where three main systems, Git, Mercurial and Bazaar were simultaneously developed.</p><p>In the last two parts (TBD), we will take a quick look at the current landscape of version control systems, as well as some interesting ideas that are developed as part of Fossil and Pijul, before I will talk about, what I consider the missing version control system.</p><p>I would very much appreciate feedback on this series of blog posts. Please reach out to me at blog at (this domain), <a href="https://lobste.rs/s/i3eg8u/history_source_control_systems_sccs_rcs">Lobste.rs</a> or <a href="https://news.ycombinator.com/item?id=39950712">Hacker News</a>.</p><h3 id="1973-sccs">1973: SCCS</h3><p>It might surprise you to learn that the first version control system emerged relatively late in the history of computing. UNIX had been in development for three years by the time SCCS, the first version control system, was created in 1972. However, in the context of the time, it makes sense:</p><p>Before the late 1960s, most programs were written using <a href="https://en.wikipedia.org/wiki/Punched_card">punched cards</a>. A program’s version was its physical set of punched cards. Versioning a program involved the physical labor of organizing and storing these cards in boxes. Terminals and disks existed but were expensive. Programmers used them for input and output to the system rather than for development.</p><p>In the 1970s, <a href="https://en.wikipedia.org/wiki/Computer_terminal">video terminals</a> like the <a href="https://en.wikipedia.org/wiki/VT100">VT100</a> and <a href="https://en.wikipedia.org/wiki/Time-sharing">time-sharing operating systems</a>, such as <a href="https://en.wikipedia.org/wiki/History_of_Unix">UNIX</a> and <a href="https://en.wikipedia.org/wiki/OpenVMS">DEC TSS/8</a> became cheaper and more widespread. As multiple users began working on a central, time-shared computer, programmers moved from punched cards to files on disks. But this posed a new question: How do you version these files? What is the digital equivalent of organizing punched cards?</p><h4 id="the-creation-of-sccs">The creation of SCCS</h4><p>In 1972 <a href="https://en.wikipedia.org/wiki/Marc_Rochkind">Marc Rochkind</a> developed a version control system for IBM System/370 in <a href="https://en.wikipedia.org/wiki/SNOBOL">SNOBOL</a>. He rewrote it in C for UNIX a year later in 1973: <em>Thus, the first version control system, SCCS, was born.</em></p><p>SCCS could manage multiple versions of a file. Unlike modern source control systems, it lacked concepts like a repository or tracked files.</p><p>To conserve disk space, SCCS stored each version’s delta along with metadata like a change comment (now known as a commit message) and the change date. To store and retrieve new versions, programmers would ask SCCS to create a new <code>delta</code>, <code>get</code> a version or a combination of such as <code>delget</code><sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>.</p><p>This sounds familiar? In principle, it is how most version control systems work today. However, SCCS has some very notable limitations.</p><h4 id="limitations">Limitations</h4><p>Firstly, it is <em>local-only</em>, meaning that SCCS does not include any way to exchange deltas between users. In an era of large, time-shared machines, this wasn’t necessary. Developers had accounts on central machines (like a <a href="https://en.wikipedia.org/wiki/PDP-11">PDP-11</a>) and worked independently or simply shared work folders with colleagues.</p><p>Secondly, SCCS was <em>single-file</em> only <sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup>. It tracked changes for one file at a time. Concepts like a repository of tracked files or atomic commits across multiple files didn’t exist yet.</p><p>Thirdly, to ensure single-writer access, SCCS used locking. A file under SCCS control was read-only on the disk until a user retrieved it for editing. If another user had the file checked out, SCCS would abort the operation. If no other user currently marked the file for editing, the file would become writable on disk and the user could modify it. Merging did not yet exist.</p><p>SCCS exposed the storage terminology such as <code>delta</code> directly to the user. For instance, to create a new version of a file, one would use the command <code>sccs delta</code>. Modern terms like repository, commit, and checkout didn’t exist then.</p><h4 id="a-quick-example">A quick example</h4><p>Let’s take a quick look how one would use SCCS. In the following example, we put the file <code>main.c</code> into SCCS control and retrieve it for editing.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ mkdir SCCS <span># Create the file in SCCS</span>
</span></span><span><span>$ sccs create main.c <span># Get the file and mark it for edit</span>
</span></span><span><span>$ sccs get -e main.c <span># Checking the delta</span>
</span></span><span><span>$ vi main.c
</span></span><span><span>$ sccs delta main.c
</span></span><span><span>comments? ...
</span></span></code></pre></div><h4 id="storage">Storage</h4><p>The file format for storing deltas is one of the most fascinating bits of SCCS.</p><p>It uses <a href="https://en.wikipedia.org/wiki/Interleaved_deltas">Interleaved Deltas</a> (or weaves), storing changed lines and their information next to the original lines in plain text. Hence, the deltas are <strong>weaved</strong> into the file. For example, let’s take a file</p><pre tabindex="0"><code>foo
bar
</code></pre><p>And modify it to</p><pre tabindex="0"><code>bar
baz
</code></pre><p>In modern diff terms:</p><div><pre tabindex="0"><code data-lang="diff"><span><span><span>--- a/test
</span></span></span><span><span><span></span><span>+++ b/test
</span></span></span><span><span><span></span><span>@@ -1,2 +1,2 @@
</span></span></span><span><span><span></span><span>-foo
</span></span></span><span><span><span></span> bar
</span></span><span><span><span>+baz
</span></span></span></code></pre></div><p>The SCCS file containing the weaved deltas for this might look something along the lines of <sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>:</p><pre tabindex="0"><code> ^AI 1
 ^AD 2
 foo
 ^AE 2
 bar
 ^AI 2
 baz
 ^AE 2
 ^AE 1
</code></pre><p>So the first line <code>^AI 1</code>, <code>^AD 2</code> means at version 1 the line was inserted and version 2 it was deleted. The line content is <code>foo</code>.</p><p>This has distinct advantages for attributing lines to changes, as well as uniform retrieval time for any revision. The disadvantage is fairly inefficient storage and as well as potentially fairly poor performance in practice, as you will have to read all revisions of a file to checkout a revision. While most SCMs later on use different storage algorithms, we will see interleaved deltas being used again in modern version control systems.</p><h4 id="implementations">Implementations</h4><p>The original SCCS would go on to become widely spread across UNIX systems, but its original version stayed proprietary throughout.</p><p>Eric Allman reimplemented SCCS in 1980 at the University of California Berkley. This versions made was later maintained by AT&amp;T and Sun Microsystems before it made it’s way to <a href="https://codeberg.org/schilytools/schilytools/src/branch/master/sccs">shilytools</a> where it resides today under the CDDL license. Most modern UNIX and UNIX-like distributions such as Solaris and FreeBSD, still offer this version as a package.</p><p>The GNU projects maintains a reimplementation of SCCS as <a href="https://www.gnu.org/software/cssc/">CSSC</a> under the GPL.</p><h4 id="legacy">Legacy</h4><p>While very few people use SCCS nowadays, it influence on modern version control systems can’t be denied. Ideas such as storing deltas, adding comments to commits, specific folders for storing versions (<code>SCCS/</code>) and expanding version IDs during checkout will remain used in many version control systems.</p><h3 id="1982-rcs">1982: RCS</h3><p>SCCS was the sole version control system for the first nine years after its creation. In 1982, <a href="https://en.wikipedia.org/wiki/Walter_F._Tichy">Walter Tichy</a> developed <a href="https://en.wikipedia.org/wiki/Revision_Control_System">RCS</a> at the Purdue University. It’s design was published as a paper <a href="https://dl.acm.org/doi/10.5555/800254.807748">“Design, Implementation, and Evolution of a Revision Control System”</a> in the Proceedings of the 6th International Conference on Software Engineering (ICSE’82).</p><p>In many ways it is similar to SCCS. It operates on one file at a time, with <a href="#Limitations">similar limitations</a>. However, it had one trick up his sleeves: <strong>Reversed Deltas</strong>.</p><h4 id="reversed-separated-deltas">Reversed, Separated Deltas</h4><p>The first difference of RCS to SCCS, is that RCS stored <strong>separate deltas</strong>. Instead of interweaving the deltas into the file like SCCS did, RCS would store the full file for one revision, and deltas as generated by <a href="https://man7.org/linux/man-pages/man1/diff.1.html"><code>diff</code></a> (notable diff didn’t exist when SCCS was written) for following revisions.</p><p>The second difference, was to store <strong>deltas in reverse order</strong>. The most recent stored revision consists of the full file format. Other revisions store the delta going from the next version to the current version, forming a delta-chain from the newest revision to the older revision.</p><p>This has distinct advantages. In the most common case, of checking out the most recent version, RCS requires only to read the last version and stream the content directly to a file, making checkout much faster. When writing a new revision, RCS must only calculate the difference between the new version and the most recently stored version and overwrite the last stored version with the delta and then append the new full file. In contrast, SCCS needs to always rewrite the whole file when a new version is inserted, and needs to read the whole file if any version is retrieved. On the flip side, retrieving older versions can be slower in RCS than in SCCS, where restoring any version takes always the same time.</p><p>Let’s take a look at a RCS file. Note that all RCS files are usually stored as the filename with an appended suffix <code>,v</code>. Binary data is generally stored with each version being gzipped:</p><p>An example:</p><pre tabindex="0"><code data-lang="rcs">1.2
log
@Hello world.
@
text
@#include &lt;stdio.h&gt;

int main(void) {
    printf("hello world\n");
    return 0;
}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
int main() {
@
</code></pre><p>We can see that the most recent version <code>1.2</code> contains the full text. Version <code>1.1</code> contains the reversed delta information to go from <code>1.2</code> to <code>1.1</code>. Delta information is <em>line based</em>. The string <code>d1 4</code> means starting at line 1 delete 4 lines. <code>a4 1 ...</code>, means starting at line 4, add the following line. If we follow these commands, we get the original version<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup>:</p><h4 id="claimed-improvements-over-sccs">Claimed improvements over SCCS</h4><p>Tichy’s original paper from 1982 claimed a few improvements over SCCS:</p><p>Firstly, the results in checkout and checking operations were much faster for the common case (e.g. most recent revision), but showed slowness checking out older revisions (as expected).</p><p>Secondly, it claimed that the UX of SCCS at the time, where one has to operate on the version files, rather than the checked out files (e.g. <code>sccs delta s.main.c</code>), was a common pinpoint among programmers. Hence RCS supported specifying either the checked out file or the version file.</p><p>Thirdly, RCS improved on the lock mechanism employed by both SCCS and RCS to ensure a single writer at a time, by allowing unprivileged users to overwrite a lock, and sending a local email the the holder of the lock, when a lock was broken. SCCS in contrast required privileged users to break the lock, and did not leave any paper trail.</p><p>Notable, the initial version of RCS did not include checksumming, branching or tagging, which SCCS at the time already supported. Tichy felt that some of these features were unnecessary, but already foresaw that RCS will eventually gain these features (which of course it did).</p><blockquote><p><em>In all fairness, we need to point out that SCCS offers
many features that are missing from RCS. For example,
SCCS performs complete checksumming, and provides
flags that control the creation of branches and the
range of revision numbers. We feel that many of these
features are unnecessary and contribute to the bulkiness of SCCS. We realize, however, that some of these
features may creep into RCS eventually.</em></p><p>– Design, Implementation, and Evolution of a Revision Control System</p></blockquote><h4 id="example">Example</h4><p>Now let’s take a look at a common usage. We checkout our <code>main.c</code> from an existing RCS file. We lock it during checkout so we can write it (without, RCS would check it out read-only). We edit it and check in a new version. Lastly, we are done and unlock the file.</p><pre tabindex="0"><code>$ co -l main.c
main.c,v  --&gt;  main.c
revision 1.1 (locked)
done
$ ci -l main.c
main.c,v  &lt;--  main.c
new revision: 1.2; previous revision: 1.1
enter log message, terminated with single '.' or end of file:
&gt;&gt; update.
&gt;&gt; ^D
done
$ co -u main.c 
main.c,v  --&gt;  main.c
revision 1.2 (unlocked)
writable main.c exists; remove it? [ny](n): y
done
</code></pre><h4 id="implementations-1">Implementations</h4><p>The original implementation of RCS was distributed as 4.3 BSD but the license <a href="https://en.wikipedia.org/wiki/Revision_Control_System#cite_note-11">prohibited redistribution without written permission from Tichy</a>. <a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution#4.3BSD">4.3BSD-Reno</a> would contain RCS with a permissive license, BSD like license. In the running up to RCS 4.3, Tichy moved the project to GNU, changing the license to GPL <sup id="fnref1:1"><a href="#fn:1" role="doc-noteref">1</a></sup>.</p><p>The <a href="https://git.savannah.gnu.org/cgit/rcs.git/commit/?h=p&amp;id=2a07671f9ce40cfab440c40c465357945f06aef2">first commit</a> from November 18th, 1989 reads:</p><blockquote><p>Import RCS 4.3 from <a href="ftp://ftp.cs.purdue.edu/pub/RCS/">ftp://ftp.cs.purdue.edu/pub/RCS/</a></p></blockquote><p>GNU RCS tracks it history all the way back to the original RCS from 1982. GNU RCS was actively maintained by <a href="https://savannah.gnu.org/users/ttn">Thien-Thi Nguyen</a>, until his <a href="https://lists.gnu.org/archive/html/emacs-devel/2023-09/msg00713.html">death</a> in October 2022. The project is unmaintained at the moment.</p><p>OpenRCS maintains a <a href="https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/rcs/">reimplementation of RCS</a> under the MIT license. It is distributed as part of OpenBSD since version 4.0. FreeBSD and NetBSD ship GNU RCS as part of their packages/ports.</p><h4 id="legacy-1">Legacy</h4><p>RCS is one of the most influential source control systems to this day. Systems like CVS and Perforce use RCS file formats to this day. Terminology such as commit, checkout, log are common source control terminology. RCS’s keyword expansion syntax ($Id$, $Date$) will find widespread adoption in other version control systems. Most modern source control system such as Git or Mercurial use similar separated-delta techniques.</p><h3 id="conclusion">Conclusion</h3><p>I hope you enjoyed this little overview of SCCS and RCS. In the next blog post we will take a look at the 1990s where the first centralized source control systems appear. They will allow multiple users to work on source code concurrently and exchange commits via the network.</p><p>If you have corrections, suggestions or just want to say thanks, please send a mail to blog at (this domain).</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft blocks even more customization apps in Windows 11 version 24H2 (127 pts)]]></title>
            <link>https://www.neowin.net/news/microsoft-blocks-even-more-customization-apps-in-windows-11-version-24h2/</link>
            <guid>39950557</guid>
            <pubDate>Sat, 06 Apr 2024 06:57:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.neowin.net/news/microsoft-blocks-even-more-customization-apps-in-windows-11-version-24h2/">https://www.neowin.net/news/microsoft-blocks-even-more-customization-apps-in-windows-11-version-24h2/</a>, See on <a href="https://news.ycombinator.com/item?id=39950557">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                                    <span>When you purchase through links on our site, we may earn an affiliate commission. <a href="https://www.neowin.net/terms">Here’s how it works</a>.</span>
                        
                        
                        <p>
    
    <time datetime="Apr 5, 2024 14:48 EDT" pubdate="pubdate">
    Apr 5, 2024 14:48 EDT
    </time>
         · <span>Hot!</span>    
    </p>

                    </div><div itemprop="articleBody">
                                                                        <p><img alt="Windows 11 version 24H2 image" src="https://cdn.neowin.com/news/images/uploaded/2024/02/1707477938_windows_11_24h2_story.jpg"></p>

<p>Users recently noticed that third-party apps for customizing the user interface no longer work in <a href="https://www.neowin.net/news/alleged-windows-11-24h2-rtm-is-almost-upon-us-final-release-schedule-out-too/">the upcoming Windows 11 version 24H2</a>. Not only does Microsoft not allow you to run those apps, but it even blocks you from upgrading to newer builds. StartAllBack, a popular tool for tweaking the taskbar and Start menu in Windows 11, <a href="https://www.neowin.net/news/microsoft-is-blocking-windows-11-build-upgrades-on-systems-with-startallback/">was among the first to fail on 24H2</a>. Sadly, it is not the only one. ExplorerPatcher also no longer works in Windows 11 24H2.</p>

<p><a href="https://github.com/valinet/ExplorerPatcher">ExplorerPatcher</a> from Valinet is quite a popular app that lets you bring back the old Windows 10 taskbar in Windows 11, apply additional modifications to make Windows 11 slightly better, and restore some of its missing features. Windows 11 version 24H2 is now flagging ExplorerPatcher as incompatible due to "security or performance issues" with the following message:</p>

<blockquote>
<p>This app can't run because it causes security or performance issues on Windows. A new version may be available. Check with your software provider for an updated version that runs on this version of Windows.</p>
</blockquote>

                            <!-- PLACE THIS SECTION INSIDE OF YOUR BODY WHERE YOU WANT THE VIDEO PLAYER TO RENDER -->
            <figure><a href="https://cdn.neowin.com/news/images/uploaded/2024/04/1712341497_explorerpatcher.jpg"><img alt="ExplorerPatcher error in Windows 11 version 24h2" src="https://cdn.neowin.com/news/images/uploaded/2024/04/1712341497_explorerpatcher.jpg"></a></figure><p>Like in the case of StartAllBack, you can bypass the block by simply renaming the executable to something else. If you want to upgrade to a newer build, delete the app, update your system, and then launch it using a renamed executable.</p>

<p>Windows 11 version 23H2 does not mind you using StartAllBack or ExplorerPatcher—both applications launch just fine without any warnings. It is possible that Microsoft blocked those apps due to a higher number of crashes on build 26100, which is allegedly version 24H2 RTM build.</p>

<p>Windows 11 version 24H2 may cause some headaches for those relying on third-party apps for user interface customization. The latest builds ship with the flag that prevents restoring the old taskbar from the Windows 10 era enabled by default. This could be a sign of Microsoft wanting to remove old components from Windows 11 as it moves forward.</p>
                        
                        
                                                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NIST researchers use cellphone compass to measure glucose (136 pts)]]></title>
            <link>https://www.nist.gov/news-events/news/2024/04/nist-researchers-use-cellphone-compass-measure-tiny-concentrations</link>
            <guid>39948840</guid>
            <pubDate>Sat, 06 Apr 2024 00:18:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nist.gov/news-events/news/2024/04/nist-researchers-use-cellphone-compass-measure-tiny-concentrations">https://www.nist.gov/news-events/news/2024/04/nist-researchers-use-cellphone-compass-measure-tiny-concentrations</a>, See on <a href="https://news.ycombinator.com/item?id=39948840">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
  
  
      <p>Nearly every modern cellphone has a built-in compass, or magnetometer, that detects the direction of Earth’s magnetic field, providing critical information for navigation. Now a team of researchers at the National Institute of Standards and Technology (NIST) has developed a technique that uses an ordinary cellphone magnetometer for an entirely different purpose — to measure the concentration of glucose, a marker for diabetes, to high accuracy.</p><p>The same technique, which uses the magnetometer in conjunction with magnetic materials designed to change their shape in response to biological or environmental cues, could be used to rapidly and cheaply measure a host of other biomedical properties for monitoring or diagnosing human disease. The method also has the potential to detect environmental toxins, said NIST scientist Gary Zabow.</p><p>In their proof-of-concept study, Zabow and fellow NIST researcher Mark Ferris clamped to a cellphone a tiny well containing the solution to be tested and a strip of hydrogel — a porous material that swells when immersed in water. The researchers embedded tiny magnetic particles within the hydrogel, which they had engineered to react either to the presence of glucose or to pH levels (a measure of acidity) by expanding or contracting. Changing pH levels can be associated with a variety of biological disorders.</p> 
      <figure role="group"><p><img alt="magnetometer illustration" height="812" loading="lazy" src="https://www.nist.gov/sites/default/files/styles/960_x_960_limit/public/images/2024/02/28/cell_phone_magnetometer_v9_22.png?itok=ggIfqAY3" typeof="foaf:Image" width="960"></p>
<figcaption>Illustration shows how a smartphone magnetometer can measure a host of biomedical properties in liquid samples using a magnetized hydrogel.<p><span>Credit:</span>
          
  K. Dill/NIST

        </p></figcaption></figure><p>As the hydrogels enlarged or shrunk, they moved the magnetic particles closer to or farther from the cellphone’s magnetometer, which detected the corresponding changes in the strength of the magnetic field. Employing this strategy, the researchers measured glucose concentrations as small as a few millionths of a mole (the scientific unit for a certain number of atoms or molecules in a substance). Although such high sensitivity is not required for at-home monitoring of glucose levels using a drop of blood, it might in the future enable routine testing for glucose in saliva, which contains a much smaller concentration of the sugar.</p><p>The researchers reported their findings in the March 30, 2024 edition of <a href="https://www.nature.com/articles/s41467-024-47073-2"><em>Nature Communications</em></a>.</p><p>Engineered, or “smart,” hydrogels like the ones the NIST team employed are inexpensive and relatively easy to fabricate, Ferris said, and can be tailored to react to a host of different compounds that medical researchers may want to measure. In their experiments, he and Zabow stacked single layers of two different hydrogels, each of which contracted and expanded at different rates in response to pH or glucose. These bilayers amplified the motion of the hydrogels, making it easier for the magnetometer to track changes in magnetic field strength.</p><p>Because the technique does not require any electronics or power source beyond that of the cellphone nor call for any special processing of the sample, it offers an inexpensive way to conduct testing — even in locations with relatively few resources.</p><p>Future efforts to improve the accuracy of such measurements using cellphone magnetometers might allow detection of DNA strands, specific proteins and histamines — compounds involved in the body’s immune response — at concentrations as low as a few tens of nanomoles (billionths of a mole).</p><p>That improvement could have substantial benefit. For instance, measuring histamines, which are typically detected in urine at concentrations ranging from about 45 to 190 nanomoles, would ordinarily require a 24-hour urine collection and a sophisticated laboratory analysis.&nbsp;</p><p>“An at-home test using a cellphone magnetometer sensitive to nanomolar concentrations would allow measurements to be done with much less hassle,” said Ferris. More generally, enhanced sensitivity would be essential when only a small amount of a substance is available for testing in extremely dilute quantities, Zabow added.</p><p>Similarly, the team’s study suggests that a cellphone magnetometer can measure pH levels with the same sensitivity as a thousand-dollar benchtop meter but at a fraction of the cost. A home-brewer or a baker could use the magnetometer to quickly test the pH of various liquids to perfect their craft, and an environmental scientist could measure the pH of ground water samples on-site with higher accuracy than a litmus test strip could provide.</p><p>In order to make the cellphone measurements a commercial success, engineers will need to develop a method to mass produce the hydrogel test strips and ensure that they have a long shelf life, Zabow said. Ideally, he added, the hydrogel strips should be designed to react more quickly to environmental cues in order to speed up measurements.&nbsp;</p><hr><p>Paper: Mark Ferris and Gary Zabow. Quantitative, High Sensitivity Measurement of Liquid Analytes using a Smartphone Compass. <em>Nature Communications</em>. Published online March 30, 2024.&nbsp;DOI: <a href="https://doi.org/10.1038/s41467-024-47073-2">https://doi.org/10.1038/s41467-024-47073-2</a></p>
  
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why CockroachDB doesn't use EvalPlanQual (120 pts)]]></title>
            <link>https://www.cockroachlabs.com/blog/why-cockroachdb-doesnt-use-evalplanqual/</link>
            <guid>39948686</guid>
            <pubDate>Fri, 05 Apr 2024 23:55:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cockroachlabs.com/blog/why-cockroachdb-doesnt-use-evalplanqual/">https://www.cockroachlabs.com/blog/why-cockroachdb-doesnt-use-evalplanqual/</a>, See on <a href="https://news.ycombinator.com/item?id=39948686">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
          <div>

            
            <p><img src="https://www.cockroachlabs.com/img/Ben-r23.png"></p><h3>
              Tech Talk
            </h3>
            
            <p>Co-Founder Ben Darnell on Van Halen, brown M&amp;Ms, and isolation.</p>
  
             
              <p><a href="https://www.cockroachlabs.com/roachfest/2023/no-brown-mms-on-foreign-keys-isolation-levels-and-van-halen/">Watch now</a> 
            
          </p></div>
            

        <p>Here’s a surprising behavior of PostgreSQL you might not know about: under READ
COMMITTED isolation, <strong>PostgreSQL can sometimes miss rows</strong> when performing
UPDATE, DELETE, SELECT FOR UPDATE, or SELECT FOR SHARE statements. This is due
to the <em>EvalPlanQual</em> recheck PostgreSQL adds to these statements to prevent
lost-update anomalies.</p>
<p>For CockroachDB’s new implementation of READ COMMITTED isolation, we considered
building our own version of <em>EvalPlanQual</em>, but decided to use a different
technique instead which doesn’t miss rows. By not missing rows, CockroachDB
alleviates the need for application-level retries.</p>




<h2 id="what-is-evalplanqual">What is EvalPlanQual?</h2>
<p>Under READ COMMITTED isolation, PostgreSQL adds a special recheck step to
UPDATE, DELETE, SELECT FOR UPDATE, and SELECT FOR SHARE statements. This
recheck is known as <a href="https://github.com/postgres/postgres/blob/ada87a4d95fc39dfb1214edf6653390314b6f0df/src/backend/executor/README#L350" target="_blank" rel="noopener"><em>EvalPlanQual</em></a>, and consists of a re-evaluation
of part of the statement after all qualifying rows are locked. PostgreSQL uses
<em>EvalPlanQual</em> to prevent lost updates under READ COMMITTED isolation.</p>
<p>To make this concrete, let’s walk through an example.</p>
<h2 id="an-example-of-conflicting-updates-in-postgresql-and-cockroachdb">An example of conflicting updates in PostgreSQL and CockroachDB</h2>
<p>Suppose we’re using SQL to organize a 3-on-3 basketball league. One of the
tables in our schema holds information about every player in the league,
including (a) their ID, (b) their name, (c) their skill level, and (d) their
team assignment if they have one.</p>
<div><pre tabindex="0"><code data-lang="sql"><span>CREATE</span> <span>TABLE</span> player (
    id    integer <span>NOT</span> <span>NULL</span>,
    name  text <span>NOT</span> <span>NULL</span>,
    <span>level</span> text <span>NOT</span> <span>NULL</span>,
    team  text,
    <span>PRIMARY</span> <span>KEY</span> (id)
);

<span>INSERT</span> <span>INTO</span> player <span>VALUES</span>
    (<span>1</span>, <span>'Gray'</span>,         <span>'A'</span>,  <span>'Dolphins'</span>),
    (<span>2</span>, <span>'Mohan'</span>,        <span>'A'</span>,  <span>'Dolphins'</span>),
    (<span>3</span>, <span>'Stonebreaker'</span>, <span>'A'</span>,  <span>'Dolphins'</span>),
    (<span>4</span>, <span>'Lamport'</span>,      <span>'A'</span>,  <span>'Gophers'</span>),
    (<span>5</span>, <span>'Ullman'</span>,       <span>'A'</span>,  <span>'Gophers'</span>),
    (<span>6</span>, <span>'Lynch'</span>,        <span>'A'</span>,  <span>'Gophers'</span>),
    (<span>7</span>, <span>'Bernstein'</span>,    <span>'AA'</span>, <span>'Elephants'</span>),
    (<span>8</span>, <span>'Liskov'</span>,       <span>'AA'</span>, <span>'Elephants'</span>),
    (<span>9</span>, <span>'Codd'</span>,         <span>'AA'</span>, <span>'Elephants'</span>);
</code></pre></div><p>When modifying this table, we’ll try to maintain two invariants:</p>
<ol>
<li>teams must have exactly 3 players</li>
<li>all players on a team must have the same skill level</li>
</ol>
<p>After a wildly successful season, we decide to move all of the Gophers up to
skill level AA. We use a single UPDATE statement in an implicit transaction,
which should atomically modify all three players and thus maintain our
invariants.</p>
<div><pre tabindex="0"><code data-lang="sql"><span>UPDATE</span> player <span>SET</span> <span>level</span> <span>=</span> <span>'AA'</span> <span>WHERE</span> team <span>=</span> <span>'Gophers'</span>;
</code></pre></div><p>(But to more easily demonstrate, let’s sleep for 5 seconds at the beginning of
the update.)</p>
<div><pre tabindex="0"><code data-lang="sql"><span>WITH</span> sleep <span>AS</span> (<span>SELECT</span> pg_sleep(<span>5</span>))
    <span>UPDATE</span> player <span>SET</span> <span>level</span> <span>=</span> <span>'AA'</span> <span>FROM</span> sleep <span>WHERE</span> team <span>=</span> <span>'Gophers'</span>;
</code></pre></div><p>While that update is running, the Gophers and Dolphins decide to exchange
players 3 and 4 in a trade. Again, we use a single UPDATE statement in an
implicit transaction. This should atomically swap the skill level and team of
the two players and thus, again, maintain our invariants.</p>
<div><pre tabindex="0"><code data-lang="sql"><span>UPDATE</span> player p1 <span>SET</span> (<span>level</span>, team) <span>=</span> 
        (<span>SELECT</span> <span>level</span>, team <span>FROM</span> player p2
         <span>WHERE</span> p2.id <span>IN</span> (<span>3</span>, <span>4</span>) <span>AND</span> p2.id <span>!=</span> p1.id)
    <span>WHERE</span> p1.id <span>IN</span> (<span>3</span>, <span>4</span>);
</code></pre></div><p>The second update succeeds immediately. What happens to the first update? Let’s
consider the result by both database and isolation level.</p>
<h3 id="postgresqls-result">PostgreSQL’s result</h3>
<p>In PostgreSQL, under SERIALIZABLE isolation, the first update fails with a
“could not serialize” error. During execution, PostgreSQL detects that another
transaction has concurrently modified players 3 and 4, and aborts.</p>
<p>Under READ COMMITTED isolation, the first update succeeds, but the result is
anomalous: player 3 is now on the Gophers but is <em>still at level A</em>. Only two
of the Gophers were moved up to level AA.</p>
<pre tabindex="0"><code>michae2=# SELECT * FROM player ORDER BY id;
 id |     name     | level |   team
----+--------------+-------+-----------
  1 | Gray         | A     | Dolphins
  2 | Mohan        | A     | Dolphins
  3 | Stonebreaker | A     | Gophers     &lt;- still at level A
  4 | Lamport      | A     | Dolphins
  5 | Ullman       | AA    | Gophers
  6 | Lynch        | AA    | Gophers
  7 | Bernstein    | AA    | Elephants
  8 | Liskov       | AA    | Elephants
  9 | Codd         | AA    | Elephants
(9 rows)
</code></pre><p>This violates invariant 2, which is surprising, because when considered
individually both updates should have maintained our invariants.</p>
<h3 id="cockroachdbs-result">CockroachDB’s result</h3>
<p>In CockroachDB, under both SERIALIZABLE and READ COMMITTED isolation the result
is the same: the first update succeeds, player 3 is now on the Gophers, and is
correctly at level AA.</p>
<pre tabindex="0"><code>demo@127.0.0.1:26257/demoapp/defaultdb&gt; SELECT * FROM player ORDER BY id;
  id |     name     | level |   team
-----+--------------+-------+------------
   1 | Gray         | A     | Dolphins
   2 | Mohan        | A     | Dolphins
   3 | Stonebreaker | AA    | Gophers     &lt;- correctly at level AA
   4 | Lamport      | A     | Dolphins
   5 | Ullman       | AA    | Gophers
   6 | Lynch        | AA    | Gophers
   7 | Bernstein    | AA    | Elephants
   8 | Liskov       | AA    | Elephants
   9 | Codd         | AA    | Elephants
(9 rows)
</code></pre><p>How does PostgreSQL arrive at its anomalous result, and how does CockroachDB
avoid the anomaly? To answer these questions let’s examine execution of the
first UPDATE statement under READ COMMITTED isolation in both databases.</p>
<h2 id="a-closer-look-at-postgresqls-update-under-read-committed-isolation">A closer look at PostgreSQL’s UPDATE under READ COMMITTED isolation</h2>
<p>We’ll start by looking at EXPLAIN in PostgreSQL. The plan for the first UPDATE
statement seems quite simple: a scan of the table followed by a filter.</p>
<pre tabindex="0"><code>michae2=# EXPLAIN UPDATE player SET level = 'AA' WHERE team = 'Gophers';
                         QUERY PLAN
-------------------------------------------------------------
 Update on player  (cost=0.00..1.11 rows=0 width=0)
   -&gt;  Seq Scan on player  (cost=0.00..1.11 rows=3 width=38)
         Filter: (team = 'Gophers'::text)
</code></pre><p>But that <code>Update on player</code> operation hides a lot of complexity. We can think
of PostgreSQL executing the update under READ COMMITTED isolation in roughly
seven steps.</p>
<ol>
<li>Establish a read snapshot for the statement. This snapshot is before the
second update begins.</li>
<li>Scan <code>player</code> at the read snapshot. (<code>Seq Scan</code> in the plan.)</li>
<li>Filter on <code>team = 'Gophers'</code>. (<code>Filter</code> in the plan.) Players 4, 5, and 6
qualify since the read snapshot is before the second update.</li>
<li>Lock all qualifying rows. (Part of <code>Update</code> in the plan.)</li>
<li><strong>Re-read the latest committed version of all locked rows. (<code>Seq Scan</code> in
the plan again.)</strong> This picks up the change to player 4.</li>
<li><strong>Re-run the filter on the latest committed versions. (<code>Filter</code> in the plan
again.)</strong> Now only players 5 and 6 qualify.</li>
<li>Write a new version of each qualifying row. (<code>Update</code> in the plan.)</li>
</ol>
<p>Steps 5 and 6 are <strong>PostgreSQL’s strategy for preventing lost updates</strong> under
READ COMMITTED isolation. After locking all qualifying rows, PostgreSQL
<em>re-evaluates the query steps a second time</em> on the latest version of each
locked row. This is the <em>EvalPlanQual</em> recheck. By doing this recheck,
PostgreSQL picks up any changes made to those rows between reading them and
locking them, which in this case correctly prevents modifying the skill level
of player 4. Unfortunately, because PostgreSQL only rechecks the locked rows,
it <strong>misses the change to player 3</strong>. We were expecting at least one of those
two players to move up to skill level AA, but neither did.</p>
<p>This behavior is <a href="https://www.postgresql.org/docs/16/transaction-iso.html#XACT-READ-COMMITTED" target="_blank" rel="noopener">documented</a>, but it can still <a href="https://www.cybertec-postgresql.com/en/transaction-anomalies-with-select-for-update/" target="_blank" rel="noopener">cause</a>
<a href="https://dev.to/aws-heroes/read-committed-anomalies-in-postgresql-1ieg" target="_blank" rel="noopener">surprises</a>.</p>
<h2 id="a-closer-look-at-cockroachdbs-update-under-read-committed-isolation">A closer look at CockroachDB’s UPDATE under READ COMMITTED isolation</h2>
<p>Next, let’s look at EXPLAIN in CockroachDB. Again, the plan for the UPDATE
statement seems quite simple: a scan of the table followed by a filter.</p>
<pre tabindex="0"><code>demo@127.0.0.1:26257/demoapp/defaultdb&gt; EXPLAIN UPDATE player SET level = 'AA' WHERE team = 'Gophers';
                                           info
-------------------------------------------------------------------------------------------
  distribution: local
  vectorized: true

  • update
  │ table: player
  │ set: level
  │ auto commit
  │
  └── • render
      │
      └── • filter
          │ estimated row count: 3
          │ filter: team = 'Gophers'
          │
          └── • scan
                estimated row count: 9 (100% of the table; stats collected 8 seconds ago)
                table: player@player_pkey
                spans: FULL SCAN
</code></pre><p>Again, that <code>update</code> operation hides a lot of complexity. We can think of
CockroachDB executing the update under READ COMMITTED isolation in roughly six
steps.</p>
<ol>
<li>Create a savepoint in the current transaction.</li>
<li>Establish a read snapshot for the statement. This snapshot is before the
second update begins.</li>
<li>Scan <code>player</code> at the read snapshot. (<code>scan</code> in the plan.)</li>
<li>Filter on <code>team = 'Gophers'</code>. (<code>filter</code> in the plan.) Players 4, 5, and 6
qualify since the read snapshot is before the second update.</li>
<li>Write an intent for each qualifying row.<sup><a href="#footnote1" target="_blank" rel="noopener">1</a></sup> (<code>update</code> in the plan.)</li>
<li>While writing intents, if the latest committed version of a row is newer
than our read snapshot, <strong>rollback to the savepoint and go back to step
1.</strong> This gives us a new read snapshot which is <em>after</em> the second update.</li>
</ol>
<p>Step 6 is <strong>CockroachDB’s strategy for preventing lost updates</strong> under READ
COMMITTED isolation. CockroachDB <a href="https://github.com/cockroachdb/cockroach/blob/04e1faeb6b674729e989e001d37429786b584c6e/pkg/sql/conn_executor_exec.go#L1696" target="_blank" rel="noopener"><em>retries the entire UPDATE
statement</em></a> with a new read snapshot if it encounters a newer
version of a row while writing an intent.<sup><a href="#footnote2" target="_blank" rel="noopener">2</a></sup> By executing the entire statement
again with a new read snapshot, CockroachDB can pick up <em>any</em> changes made
after the previous read snapshot, which in this case includes changes to <em>both</em>
players 3 and 4. Crucially, CockroachDB holds onto locks and intents across
retries, which helps it make progress even during periods of heavy contention.</p>
<h2 id="how-to-prevent-lost-updates-a-tradeoff">How to prevent lost updates: a tradeoff?</h2>
<p>At first glance these two different techniques for preventing lost updates seem
to embody a tradeoff: on the one hand, PostgreSQL avoids retries, on the other
hand, CockroachDB avoids anomalies. But if we consider things from the
application’s point of view, this is less of a tradeoff than it first appears.
What would an application need to do to be sure that all Gophers were updated
to skill level AA?</p>
<p>When using PostgreSQL, the application itself would need to retry the first
UPDATE statement until all Gophers were at level AA. <strong>Application-level
retries are more expensive than database-level retries</strong>, due to network
latency, so this is strictly worse than retrying within the database. There’s
no way to avoid retrying the first UPDATE statement in this scenario, but
CockroachDB is able to hide the retry from the application.</p>
<h2 id="conclusion">Conclusion</h2>
<p>PostgreSQL adds <em>EvalPlanQual</em> rechecks to UPDATE, DELETE, SELECT FOR UPDATE,
and SELECT FOR SHARE statements under READ COMMITTED isolation to prevent
lost-update anomalies. EvalPlanQual lets PostgreSQL avoid internal retries of
these statements, but it can cause PostgreSQL to <strong>miss rows</strong> which will in
turn require application-level retries to handle.<sup><a href="#footnote3" target="_blank" rel="noopener">3</a></sup></p>
<p>In CockroachDB’s new implementation of READ COMMITTED isolation, instead of
EvalPlanQual we built an internal statement-retry mechanism that <strong>does not
miss rows and thus alleviates the need for application-level retries</strong>.</p>
<p><a name="footnote1">1</a> <a href="https://www.cockroachlabs.com/docs/v23.2/architecture/transaction-layer#write-intents"><em>Intents</em></a> are new versions of a row that also act as exclusive
locks.</p>
<p><a name="footnote2">2</a> Under SERIALIZABLE isolation, CockroachDB retries <em>entire transactions</em>
when a serializable history cannot be achieved through other means. In this
case we’re using a single-statement implicit transaction, so CockroachDB
appears to have the same behavior under both SERIALIZABLE and READ COMMITTED
isolation. But note that if the scenario were slightly different, say a <em>move</em>
of a player to the Gophers rather than a swap, the two isolation levels would
show different behavior.</p>
<p><a name="footnote3">3</a> This article focuses on PostgreSQL, but it’s worth noting that MySQL
(using InnoDB) can also miss rows with some tweaks to the scenario. Of the
databases we’ve studied, so far Oracle has the most similar UPDATE behavior
under READ COMMITTED isolation to CockroachDB.</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[C++ Insights – See your source code with the eyes of a compiler (183 pts)]]></title>
            <link>https://github.com/andreasfertig/cppinsights</link>
            <guid>39948404</guid>
            <pubDate>Fri, 05 Apr 2024 23:15:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/andreasfertig/cppinsights">https://github.com/andreasfertig/cppinsights</a>, See on <a href="https://news.ycombinator.com/item?id=39948404">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/andreasfertig/cppinsights/blob/main/artwork/logo_cppinsights.png"><img src="https://github.com/andreasfertig/cppinsights/raw/main/artwork/logo_cppinsights.png" alt="cpp insights logo"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">C++ Insights - See your source code with the eyes of a compiler.</h2><a id="user-content-c-insights---see-your-source-code-with-the-eyes-of-a-compiler" aria-label="Permalink: C++ Insights - See your source code with the eyes of a compiler." href="#c-insights---see-your-source-code-with-the-eyes-of-a-compiler"></a></p>
<p dir="auto"><a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2bb6ac78e5a9f4f688a6a066cc71b62012101802fcdb478e6e4c6b6ec75dc694/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg"></a> <a href="https://github.com/andreasfertig/cppinsights/releases"><img src="https://camo.githubusercontent.com/145be9dc45d710d7cea80bbf55239f700a94082c09e88121e952f902b09ba682/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c61746573742d646f776e6c6f61642d626c75652e737667" alt="download" data-canonical-src="https://img.shields.io/badge/latest-download-blue.svg"></a> <a href="https://github.com/andreasfertig/cppinsights/actions/"><img src="https://github.com/andreasfertig/cppinsights/workflows/ci/badge.svg" alt="Build Status"></a>
<a href="https://codecov.io/gh/andreasfertig/cppinsights" rel="nofollow"><img src="https://camo.githubusercontent.com/1b48b9ce581bdb2b0f05bbb5dd24d271e6652acc4f45f4dad073754114d11ad8/68747470733a2f2f636f6465636f762e696f2f67682f616e64726561736665727469672f637070696e7369676874732f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/andreasfertig/cppinsights/branch/master/graph/badge.svg"></a>
<a href="https://cppinsights.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/bce7782b04362d4618e15af221ed0289a1fe26efa0fa75e892f76c3810acd022/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7472792d6f6e6c696e652d626c75652e737667" alt="Try online" data-canonical-src="https://img.shields.io/badge/try-online-blue.svg"></a>
<a href="https://docs.cppinsights.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/c31536ed1f50bf5b0fd3985352a7de9f90e02e0d17dae8cd21bb7affc2ef97c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f766965772d646f63756d656e746174696f6e2d626c7565" alt="Documentation" data-canonical-src="https://img.shields.io/badge/view-documentation-blue"></a>
<a href="https://www.patreon.com/cppinsights" rel="nofollow"><img src="https://camo.githubusercontent.com/84ca69083b8e354ea225a8d54bd9da803c105ab76c3d09875d16d78aebed6547/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617472656f6e2d737570706f72742d6f72616e67652e737667" alt="patreon" data-canonical-src="https://img.shields.io/badge/patreon-support-orange.svg"></a></p>
<p dir="auto"><a href="https://gitpod.io/#https://github.com/andreasfertig/cppinsights" rel="nofollow"><img src="https://camo.githubusercontent.com/95fbab4ac41e62a9f66e6d1d78f8249c418b33f8c7739c4f9c593f953f5362de/68747470733a2f2f676974706f642e696f2f627574746f6e2f6f70656e2d696e2d676974706f642e737667" alt="Open in Gitpod" data-canonical-src="https://gitpod.io/button/open-in-gitpod.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contents</h2><a id="user-content-contents" aria-label="Permalink: Contents" href="#contents"></a></p>
<ul dir="auto">
<li><a href="#what">What</a></li>
<li><a href="#why">Why</a></li>
<li><a href="#building">Building</a></li>
<li><a href="#usage">Usage</a></li>
<li><a href="#get-involved">Get Involved</a></li>
<li><a href="#support">Support</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">What</h2><a id="user-content-what" aria-label="Permalink: What" href="#what"></a></p>
<p dir="auto"><a href="https://cppinsights.io/" rel="nofollow">C++ Insights</a> is a <a href="https://clang.llvm.org/" rel="nofollow">Clang</a>-based tool that does a source-to-source
transformation. The goal of C++ Insights is to make things visible that normally and intentionally happen behind the scenes.
It's about the magic the compiler does for us to make things work.</p>
<p dir="auto">Take this piece of code for example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Base {
};

class Derived : public Base {
};

int main() {
  Derived d;

  Derived d2 = d;

  d2 = d;

  Base&amp; b = d;
}"><pre><span>class</span> <span>Base</span> {
};

<span>class</span> <span>Derived</span> : <span>public</span> <span>Base</span> {
};

<span>int</span> <span>main</span>() {
  Derived d;

  Derived d2 = d;

  d2 = d;

  Base&amp; b = d;
}</pre></div>
<p dir="auto">Nothing special, and of course, it compiles. This is the compiler's view on it:</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Base
{
  public:
  // inline constexpr Base() noexcept = default;
  // inline constexpr Base(const Base &amp;) noexcept = default;
  // inline constexpr Base &amp; operator=(const Base &amp;) noexcept = default;
};



class Derived : public Base
{
  public:
  // inline constexpr Derived() noexcept = default;
  // inline constexpr Derived(const Derived &amp;) noexcept = default;
  // inline constexpr Derived &amp; operator=(const Derived &amp;) noexcept = default;
};



int main()
{
  Derived d;
  Derived d2 = Derived(d);
  d2.operator=(d);
  Base &amp; b = static_cast<Base&amp;>(d);
  return 0;
}"><pre><span>class</span> <span>Base</span>
{
  <span>public:</span>
  <span><span>//</span> inline constexpr Base() noexcept = default;</span>
  <span><span>//</span> inline constexpr Base(const Base &amp;) noexcept = default;</span>
  <span><span>//</span> inline constexpr Base &amp; operator=(const Base &amp;) noexcept = default;</span>
};



<span>class</span> <span>Derived</span> : <span>public</span> <span>Base</span>
{
  <span>public:</span>
  <span><span>//</span> inline constexpr Derived() noexcept = default;</span>
  <span><span>//</span> inline constexpr Derived(const Derived &amp;) noexcept = default;</span>
  <span><span>//</span> inline constexpr Derived &amp; operator=(const Derived &amp;) noexcept = default;</span>
};



<span>int</span> <span>main</span>()
{
  Derived d;
  Derived d2 = <span>Derived</span>(d);
  d2.<span>operator</span>=(d);
  Base &amp; b = <span>static_cast</span>&lt;Base&amp;&gt;(d);
  <span>return</span> <span>0</span>;
}</pre></div>
<p dir="auto">You can see all the compiler-provided special member functions and the downcast from <code>Derived</code> to <code>Base</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why</h2><a id="user-content-why" aria-label="Permalink: Why" href="#why"></a></p>
<p dir="auto"><a href="https://cppinsights.io/" rel="nofollow">C++ Insights</a> is a <a href="https://clang.llvm.org/" rel="nofollow">Clang</a>-based tool that does a source-to-source transformation.
The goal of C++ Insights is to make things visible that normally and intentionally happen behind the scenes. It's about the magic the compiler does
for us to make things work. Or looking through the classes of a compiler.</p>
<p dir="auto">In 2017, I started looking into some new things we got with C++11, C++14, and C++17. Amazing things like lambdas, range-based for-loops,
and structured bindings. I put it together in a talk. You can find the <a href="https://andreasfertig.com/talks/dl/afertig-ndcolo-2017-fast-and-small.pdf" rel="nofollow">slides</a>
and a <a href="https://youtu.be/Bt7KzFxcbgc" rel="nofollow">video</a> online.</p>
<p dir="auto">However, all that research and some of my training and teaching got me to start thinking about how it would be if we could see with the eyes
of the compiler. Sure, there is an AST dump, at least for Clang. We can see what code the compiler generates from a C++ source snippet with
tools like Compiler Explorer. However, what we see is assembler. Neither the AST nor the Compiler Explorer output is in the language I write
code. Hence, I'm not very familiar with this output. Plus, when teaching students C++, showing an AST and explaining that it is all there was
not quite satisfying for me.</p>
<p dir="auto">I started to write a Clang-based tool that can transform a range-based for-loop into the compiler-internal version. Then, I did the same
for structured bindings and lambdas. In the end, I did much more than initially planned. It shows where operators are
invoked and places in which the compiler does some casting. C++ Insights can deduce the type behind <code>auto</code> or <code>decltype</code>. The goal
is to produce compilable code. However, this is not possible in all places.</p>
<p dir="auto">You can see, for example, the transformation of a <a href="https://cppinsights.io/s/e4e19791" rel="nofollow">lambda</a>, <a href="https://cppinsights.io/s/0cddd172" rel="nofollow">range-based for-loop</a>, or <a href="https://cppinsights.io/s/6c61d601" rel="nofollow">auto</a>. Of course, you can transform any other C++ snippet.</p>
<p dir="auto">See yourself. C++ Insights is available online: <a href="https://cppinsights.io/" rel="nofollow">cppinsights.io</a>.</p>
<p dir="auto">Still, there is work to do.</p>
<p dir="auto">I do not claim to get all the things right. I'm also working on supporting features from new standards, like C++20, at the moment.
Please remember that C++ Insights is based on Clang and its understanding of the AST.</p>
<p dir="auto">I did a couple of talks about C++ Insights since I released C++ Insights. For example, at C++ now. Here are the <a href="https://andreasfertig.com/talks/dl/afertig-2021-cppnow-cpp-insights.pdf" rel="nofollow">slides</a> and the <a href="https://youtu.be/p-8wndrTaTs" rel="nofollow">video</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building</h2><a id="user-content-building" aria-label="Permalink: Building" href="#building"></a></p>
<p dir="auto">C++ Insights can be built inside the Clang source tree or outside.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building on Windows</h3><a id="user-content-building-on-windows" aria-label="Permalink: Building on Windows" href="#building-on-windows"></a></p>
<p dir="auto">See <a href="https://github.com/andreasfertig/cppinsights/blob/main/Readme_Windows.md">Readme_Windows.md</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building on Arch Linux</h3><a id="user-content-building-on-arch-linux" aria-label="Permalink: Building on Arch Linux" href="#building-on-arch-linux"></a></p>
<p dir="auto">To build with <code>extra/clang</code> use the following extra flags: <code>-DINSIGHTS_USE_SYSTEM_INCLUDES=off -DCLANG_LINK_CLANG_DYLIB=on -DLLVM_LINK_LLVM_DYLIB=on</code></p>
<p dir="auto">See <a data-error-text="Failed to load title" data-id="443768833" data-permission-text="Title is private" data-url="https://github.com/andreasfertig/cppinsights/issues/186" data-hovercard-type="issue" data-hovercard-url="/andreasfertig/cppinsights/issues/186/hovercard" href="https://github.com/andreasfertig/cppinsights/issues/186">#186</a> for an explanation of why <code>INSIGHTS_USE_SYSTEM_INCLUDES</code> needs to be turned off.</p>
<p dir="auto"><code>extra/clang</code> and <code>extra/llvm</code> provide <code>/usr/lib/{libclangAST.so,libLLVM*.a,libLLVM.so}</code>. <code>libclangAST.so</code> needs <code>libLLVM.so</code> and there would be a conflict if <code>libLLVM*.a</code> (instead of <code>libLLVM.so</code>) are linked. See <a href="https://bugs.archlinux.org/task/60512" rel="nofollow">https://bugs.archlinux.org/task/60512</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building outside Clang</h3><a id="user-content-building-outside-clang" aria-label="Permalink: Building outside Clang" href="#building-outside-clang"></a></p>
<p dir="auto">You need to have a Clang installation in the search path.</p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/andreasfertig/cppinsights.git
mkdir build &amp;&amp; cd build
cmake -G&quot;Ninja&quot; ../cppinsights
ninja"><pre><code>git clone https://github.com/andreasfertig/cppinsights.git
mkdir build &amp;&amp; cd build
cmake -G"Ninja" ../cppinsights
ninja
</code></pre></div>
<p dir="auto">The resulting binary (insights) can be found in the <code>build</code> folder.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building inside Clang</h3><a id="user-content-building-inside-clang" aria-label="Permalink: Building inside Clang" href="#building-inside-clang"></a></p>
<p dir="auto">For building it inside the Clang source tree, assuming you have your source tree already prepared under <code>llvm-project</code>:</p>
<div data-snippet-clipboard-copy-content="cd llvm-project/clang-tools-extra/
git clone https://github.com/andreasfertig/cppinsights.git

echo &quot;add_subdirectory(cppinsights)&quot; >> CMakeLists.txt"><pre><code>cd llvm-project/clang-tools-extra/
git clone https://github.com/andreasfertig/cppinsights.git

echo "add_subdirectory(cppinsights)" &gt;&gt; CMakeLists.txt
</code></pre></div>
<p dir="auto">To activate the C++ Insights build you have to set <code>-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra"</code> for <code>cmake</code>:</p>
<div data-snippet-clipboard-copy-content="cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=&quot;clang;clang-tools-extra&quot; -G &quot;Unix Makefiles&quot; ../llvm-project"><pre><code>cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" -G "Unix Makefiles" ../llvm-project
</code></pre></div>
<p dir="auto">Then, build Clang as you normally do.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">cmake options</h3><a id="user-content-cmake-options" aria-label="Permalink: cmake options" href="#cmake-options"></a></p>
<p dir="auto">There are a couple of options that can be enabled with <a href="https://cmake.org/" rel="nofollow">cmake</a>:</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>INSIGHTS_STRIP</td>
<td>Strip insight after build</td>
<td>ON</td>
</tr>
<tr>
<td>INSIGHTS_STATIC</td>
<td>Use static linking</td>
<td>OFF</td>
</tr>
<tr>
<td>INSIGHTS_COVERAGE</td>
<td>Enable code coverage</td>
<td>OFF</td>
</tr>
<tr>
<td>INSIGHTS_USE_LIBCPP</td>
<td>Use libc++ for tests</td>
<td>OFF</td>
</tr>
<tr>
<td>DEBUG</td>
<td>Enable debug</td>
<td>OFF</td>
</tr>
</tbody>
</table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building for ARM on macOS</h3><a id="user-content-building-for-arm-on-macos" aria-label="Permalink: Building for ARM on macOS" href="#building-for-arm-on-macos"></a></p>
<p dir="auto">It seems best to supply the architecture during configuration:</p>
<div data-snippet-clipboard-copy-content="cmake -DCMAKE_OSX_ARCHITECTURES=arm64 ../cppinsights"><pre><code>cmake -DCMAKE_OSX_ARCHITECTURES=arm64 ../cppinsights
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Use it with <a href="https://www.cevelop.com/" rel="nofollow">Cevelop</a></h3><a id="user-content-use-it-with-cevelop" aria-label="Permalink: Use it with Cevelop" href="#use-it-with-cevelop"></a></p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/andreasfertig/cppinsights.git
mkdir build_eclipse
cd build_eclipse
cmake -G&quot;Eclipse CDT4 - Unix Makefiles&quot; ../cppinsights/"><pre><code>git clone https://github.com/andreasfertig/cppinsights.git
mkdir build_eclipse
cd build_eclipse
cmake -G"Eclipse CDT4 - Unix Makefiles" ../cppinsights/
</code></pre></div>
<p dir="auto">Then, in <a href="https://www.cevelop.com/" rel="nofollow">Cevelop</a> Import -&gt; General -&gt; Existing Project into Workspace. Select <code>build_eclipse</code>. Enjoy editing with
<a href="https://www.cevelop.com/" rel="nofollow">Cevelop</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">Using C++ Insights is fairly simple:</p>
<div data-snippet-clipboard-copy-content="insights <YOUR_CPP_FILE> -- -std=c++17"><pre><code>insights &lt;YOUR_CPP_FILE&gt; -- -std=c++17
</code></pre></div>
<p dir="auto">Things get complicated when it comes to the system-include paths. These paths are hard-coded in the binary, which seems
to come from the compiler C++ Insights was built with. To help with that, check out <a href="https://github.com/andreasfertig/cppinsights/blob/main/scripts/getinclude.py">scripts/getinclude.py</a>. The script tries to
collect the system-include paths from the compiler. Without an option, <code>getinclude.py</code> uses <code>g++</code>. You can also pass another compiler
as a first argument.</p>
<p dir="auto">Here is an example:</p>
<div data-snippet-clipboard-copy-content="./scripts/getinclude.py
-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1 -isystem/usr/local/include -isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0/include -isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -isystem/usr/include"><pre><code>./scripts/getinclude.py
-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1 -isystem/usr/local/include -isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0/include -isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -isystem/usr/include
</code></pre></div>
<p dir="auto">The script can be used together with C++ Insights:</p>
<div data-snippet-clipboard-copy-content="insights <YOUR_CPP_FILE> -- -std=c++17 `./scripts/getinclude.py`"><pre><code>insights &lt;YOUR_CPP_FILE&gt; -- -std=c++17 `./scripts/getinclude.py`
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Custom GCC installation</h3><a id="user-content-custom-gcc-installation" aria-label="Permalink: Custom GCC installation" href="#custom-gcc-installation"></a></p>
<p dir="auto">In case you have a custom build of the GCC compiler, for example, gcc-11.2.0, and <em>NOT</em> installed in the compiler in the default system path, then after building, Clang fails to find the correct <code>libstdc++</code> path (GCC's STL). If you run into this situation, you can use "<code>--gcc-toolchain=/path/GCC-1x.x.x/installed/path</code>" to tell Clang/C++ Insights the location of the STL:</p>
<div data-snippet-clipboard-copy-content="./cppinsights Insights.cpp -- --gcc-toolchain=${GCC_11_2_0_INSTALL_PATH} -std=c++20"><pre><code>./cppinsights Insights.cpp -- --gcc-toolchain=${GCC_11_2_0_INSTALL_PATH} -std=c++20
</code></pre></div>
<p dir="auto">Here "<code>${GCC_11_2_0_INSTALL_PATH}</code>" is the installation directory of your customized-built GCC. The option for Clang is described <a href="https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-gcc-toolchain" rel="nofollow">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Ready to use Docker container</h3><a id="user-content-ready-to-use-docker-container" aria-label="Permalink: Ready to use Docker container" href="#ready-to-use-docker-container"></a></p>
<p dir="auto">There is also another GitHub project that sets up a docker container with the latest C++ Insights version in it: <a href="https://github.com/andreasfertig/cppinsights-docker">C++
Insights - Docker</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">C++ Insights @ Vim</h3><a id="user-content-c-insights--vim" aria-label="Permalink: C++ Insights @ Vim" href="#c-insights--vim"></a></p>
<p dir="auto">A plugin for Vim is available at
<a href="https://github.com/Freed-Wu/cppinsights.vim">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">C++ Insights @ VSCode</h3><a id="user-content-c-insights--vscode" aria-label="Permalink: C++ Insights @ VSCode" href="#c-insights--vscode"></a></p>
<p dir="auto">An extension for Visual Studio Code is available at the VS Code marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=devtbi.vscode-cppinsights" rel="nofollow">C++
Insights - VSCode Extension</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">C++ Insights @ brew</h3><a id="user-content-c-insights--brew" aria-label="Permalink: C++ Insights @ brew" href="#c-insights--brew"></a></p>
<p dir="auto">At least for macOS, you can install C++ Insights via Homebrew thanks to <a href="https://formulae.brew.sh/formula/cppinsights" rel="nofollow">this formulae</a>:</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Compatibility</h2><a id="user-content-compatibility" aria-label="Permalink: Compatibility" href="#compatibility"></a></p>
<p dir="auto">I aim for the repository to compile with the latest version of Clang and at least the one before. The website tries to
stay close to the latest release of Clang. However, due to certain issues (building Clang for Windows), the website's
version is often delayed by a few months.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">C++ Insights @ YouTube</h2><a id="user-content-c-insights--youtube" aria-label="Permalink: C++ Insights @ YouTube" href="#c-insights--youtube"></a></p>
<p dir="auto">I created a <a href="https://youtube.com/@andreas_fertig" rel="nofollow">YouTube</a> channel where I release a new video each month. In
these videos, I use C++ Insights to show and explain certain C++ constructs, and sometimes I explain C++ Insights as well.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">ToDo's</h2><a id="user-content-todos" aria-label="Permalink: ToDo's" href="#todos"></a></p>
<p dir="auto">See <a href="https://github.com/andreasfertig/cppinsights/blob/main/TODO.md">TODO</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Get Involved</h2><a id="user-content-get-involved" aria-label="Permalink: Get Involved" href="#get-involved"></a></p>
<ul dir="auto">
<li>Report bugs/issues by submitting a <a href="https://github.com/andreasfertig/cppinsights/issues">GitHub issue</a>.</li>
<li>Submit contributions using <a href="https://github.com/andreasfertig/cppinsights/pulls">pull requests</a>. See <a href="https://github.com/andreasfertig/cppinsights/blob/main/CONTRIBUTING.md">Contributing</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Support</h2><a id="user-content-support" aria-label="Permalink: Support" href="#support"></a></p>
<p dir="auto">If you like to support the project, consider <a href="https://github.com/andreasfertig/cppinsights/blob/main/CONTRIBUTING.md">submitting</a> a patch. Another alternative is to become a <a href="https://github.com/sponsors/andreasfertig">GitHub Sponsor</a> or a <a href="https://www.patreon.com/cppinsights" rel="nofollow">Patreon</a> supporter.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SearXNG is a free internet metasearch engine (261 pts)]]></title>
            <link>https://github.com/searxng/searxng</link>
            <guid>39948044</guid>
            <pubDate>Fri, 05 Apr 2024 22:27:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/searxng/searxng">https://github.com/searxng/searxng</a>, See on <a href="https://news.ycombinator.com/item?id=39948044">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><hr>

<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/searxng/searxng/master/src/brand/searxng.svg"><img src="https://raw.githubusercontent.com/searxng/searxng/master/src/brand/searxng.svg"></a></p>

<hr>
<p dir="auto">Privacy-respecting, hackable <a href="https://en.wikipedia.org/wiki/Metasearch_engine" rel="nofollow">metasearch engine</a></p>
<p dir="auto"><a href="https://searx.space/" rel="nofollow">Searx.space</a> lists ready-to-use running instances.</p>
<p dir="auto">A <a href="https://docs.searxng.org/user" rel="nofollow">user</a>, <a href="https://docs.searxng.org/admin" rel="nofollow">admin</a> and <a href="https://docs.searxng.org/dev" rel="nofollow">developer</a> handbook is available on the <a href="https://docs.searxng.org/" rel="nofollow">homepage</a>.</p>
<p dir="auto"><a href="https://docs.searxng.org/admin/installation.html" rel="nofollow"><img src="https://camo.githubusercontent.com/d03a3c450f1338b2d7b3b13e5df2eee07fc3ebdc2fa1f1fd0d7eaec049717b49/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d696e7374616c6c2d626c7565" alt="SearXNG install" data-canonical-src="https://img.shields.io/badge/-install-blue"></a> <a href="https://docs.searxng.org/" rel="nofollow"><img src="https://camo.githubusercontent.com/98e0355a460efccf423cdd69ced6df4190be41fddd82872a0b83b3dfb102cdf3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d686f6d65706167652d626c7565" alt="SearXNG homepage" data-canonical-src="https://img.shields.io/badge/-homepage-blue"></a> <a href="https://github.com/searxng/searxng/wiki"><img src="https://camo.githubusercontent.com/9164d57b5c4f056547d2535e5cdca025c4cb18ff526539f182bc9dfd0cfc51ae/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d77696b692d626c7565" alt="SearXNG wiki" data-canonical-src="https://img.shields.io/badge/-wiki-blue"></a> <a href="https://github.com/searxng/searxng/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/24368ce71a4355192bbd02cf2fe76a69ff7f18674abaf159b19af37713497c25/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4147504c2d626c75652e737667" alt="AGPL License" data-canonical-src="https://img.shields.io/badge/license-AGPL-blue.svg"></a> <a href="https://github.com/searxng/searxng/issues"><img src="https://camo.githubusercontent.com/504dd793406a904416d3b23fe1c332aa9469aa4beb5b802fdbec146911f6ec3c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f73656172786e672f73656172786e673f636f6c6f723d79656c6c6f77266c6162656c3d697373756573" alt="Issues" data-canonical-src="https://img.shields.io/github/issues/searxng/searxng?color=yellow&amp;label=issues"></a> <a href="https://github.com/searxng/searxng/commits/master"><img src="https://camo.githubusercontent.com/cded9140035497b74511dd5cb02a283fdc96a957affab3ffef893751372faf43/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f792f73656172786e672f73656172786e673f636f6c6f723d79656c6c6f77266c6162656c3d636f6d6d697473" alt="commits" data-canonical-src="https://img.shields.io/github/commit-activity/y/searxng/searxng?color=yellow&amp;label=commits"></a> <a href="https://translate.codeberg.org/projects/searxng/" rel="nofollow"><img src="https://camo.githubusercontent.com/bfadff5bc5728aaf3b29a13cdba64f25c27b8e61a3d0a23698c834524dfa21c8/68747470733a2f2f7472616e736c6174652e636f6465626572672e6f72672f776964676574732f73656172786e672f2d2f73656172786e672f7376672d62616467652e737667" alt="weblate" data-canonical-src="https://translate.codeberg.org/widgets/searxng/-/searxng/svg-badge.svg"></a> <a href="https://docs.searxng.org/" rel="nofollow"><img src="https://raw.githubusercontent.com/searxng/searxng/master/src/brand/searxng-wordmark.svg" alt="SearXNG logo"></a></p>
<hr>
<p dir="auto"><h2 id="user-content-contact" tabindex="-1" dir="auto">Contact</h2><a id="user-content-contact" aria-label="Permalink: Contact" href="#contact"></a></p>
<p dir="auto">Ask questions or just chat about SearXNG on</p>
<dl>
<dt>IRC</dt>
<dd><p dir="auto"><a href="https://web.libera.chat/?channel=#searxng" rel="nofollow">#searxng on libera.chat</a> which is bridged to Matrix.</p>
</dd>
<dt>Matrix</dt>
<dd><p dir="auto"><a href="https://matrix.to/#/#searxng:matrix.org" rel="nofollow">#searxng:matrix.org</a></p>
</dd>
</dl>
<p dir="auto"><h2 id="user-content-setup" tabindex="-1" dir="auto">Setup</h2><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<ul dir="auto">
<li>A well maintained <a href="https://github.com/searxng/searxng-docker">Docker image</a>, also built for ARM64 and ARM/v7 architectures.</li>
<li>Alternatively there are <em>up to date</em> <a href="https://docs.searxng.org/admin/installation-scripts.html" rel="nofollow">installation scripts</a>.</li>
<li>For individual setup consult our detailed <a href="https://docs.searxng.org/admin/installation-searxng.html" rel="nofollow">Step by step</a> instructions.</li>
<li>To fine-tune your instance, take a look at the <a href="https://docs.searxng.org/admin/index.html" rel="nofollow">Administrator documentation</a>.</li>
</ul>
<p dir="auto"><h2 id="user-content-translations" tabindex="-1" dir="auto">Translations</h2><a id="user-content-translations" aria-label="Permalink: Translations" href="#translations"></a></p>
<p dir="auto">Help translate SearXNG at <a href="https://translate.codeberg.org/projects/searxng/searxng/" rel="nofollow">Weblate</a></p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2d8a8ad3e638c68c348ec0fdf02e96183c769ec4c7aff2f7c613dcb71ea5bba4/68747470733a2f2f7472616e736c6174652e636f6465626572672e6f72672f776964676574732f73656172786e672f2d2f6d756c74692d6175746f2e737667"><img src="https://camo.githubusercontent.com/2d8a8ad3e638c68c348ec0fdf02e96183c769ec4c7aff2f7c613dcb71ea5bba4/68747470733a2f2f7472616e736c6174652e636f6465626572672e6f72672f776964676574732f73656172786e672f2d2f6d756c74692d6175746f2e737667" data-canonical-src="https://translate.codeberg.org/widgets/searxng/-/multi-auto.svg"></a></p>

<p dir="auto"><h2 id="user-content-contributing" tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Are you a developer? Have a look at our <a href="https://docs.searxng.org/dev/quickstart.html" rel="nofollow">development quickstart</a> guide, it's very easy to contribute. Additionally we have a <a href="https://docs.searxng.org/dev/index.html" rel="nofollow">developer documentation</a>.</p>
<p dir="auto"><h2 id="user-content-codespaces" tabindex="-1" dir="auto">Codespaces</h2><a id="user-content-codespaces" aria-label="Permalink: Codespaces" href="#codespaces"></a></p>
<p dir="auto">You can contribute from your browser using <a href="https://docs.github.com/en/codespaces/overview">GitHub Codespaces</a>:</p>
<ul dir="auto">
<li>Fork the repository</li>
<li>Click on the <code>&lt;&gt; Code</code> green button</li>
<li>Click on the <code>Codespaces</code> tab instead of <code>Local</code></li>
<li>Click on <code>Create codespace on master</code></li>
<li>VSCode is going to start in the browser</li>
<li>Wait for <code>git pull &amp;&amp; make install</code> to appear and then disappear</li>
<li>You have <a href="https://github.com/settings/billing">120 hours per month</a> (see also your <a href="https://github.com/codespaces">list of existing Codespaces</a>)</li>
<li>You can start SearXNG using <code>make run</code> in the terminal or by pressing <code>Ctrl+Shift+B</code></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[World_sim: LLM prompted to act as a sentient CLI universe simulator (268 pts)]]></title>
            <link>https://worldsim.nousresearch.com/</link>
            <guid>39947713</guid>
            <pubDate>Fri, 05 Apr 2024 21:55:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://worldsim.nousresearch.com/">https://worldsim.nousresearch.com/</a>, See on <a href="https://news.ycombinator.com/item?id=39947713">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Updates App Store Guidelines to Permit Game Emulators, EU Music App Links (204 pts)]]></title>
            <link>https://www.macrumors.com/2024/04/05/app-store-guidelines-emulators-music-app-links/</link>
            <guid>39946694</guid>
            <pubDate>Fri, 05 Apr 2024 20:16:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.macrumors.com/2024/04/05/app-store-guidelines-emulators-music-app-links/">https://www.macrumors.com/2024/04/05/app-store-guidelines-emulators-music-app-links/</a>, See on <a href="https://news.ycombinator.com/item?id=39946694">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main" id="maincontent"><article expanded="true"><div data-io-article-url="/2024/04/05/app-store-guidelines-emulators-music-app-links/"><p>Apple today updated its <a href="https://developer.apple.com/app-store/review/guidelines/">App Store guidelines</a> to comply with an <a href="https://www.macrumors.com/2024/03/04/eu-fines-apple-2-billion/">anti-steering mandate</a> levied by the European Commission. Music streaming apps like Spotify are now permitted to include a link or buy button that leads to a website with information about alternative music purchasing options, though this is only permitted <a href="https://developer.apple.com/support/music-streaming-services-entitlement-eea/">in the European Economic Area</a>.</p>
<p><img src="https://images.macrumors.com/t/MuYr2cyAEYdr0CMrrvuycUPK5vs=/400x0/article-new/2022/01/iOS-App-Store-General-Feature-JoeBlue.jpg?lossy" srcset="https://images.macrumors.com/t/MuYr2cyAEYdr0CMrrvuycUPK5vs=/400x0/article-new/2022/01/iOS-App-Store-General-Feature-JoeBlue.jpg?lossy 400w,https://images.macrumors.com/t/j81xjhvPhb1xAaD6jc-kW3SoaHc=/800x0/article-new/2022/01/iOS-App-Store-General-Feature-JoeBlue.jpg?lossy 800w,https://images.macrumors.com/t/6S1CCkPCfv7Bu5OKPv07871bKhY=/1600x0/article-new/2022/01/iOS-App-Store-General-Feature-JoeBlue.jpg 1600w,https://images.macrumors.com/t/2D83fOzXH1a-mo51oJaSX0SjmzQ=/2500x0/filters:no_upscale()/article-new/2022/01/iOS-App-Store-General-Feature-JoeBlue.jpg 2500w" sizes="(max-width: 900px) 100vw, 697px" alt="iOS App Store General Feature JoeBlue" width="2250" height="1266"></p>
<blockquote><p>Music Streaming Services Entitlements: music streaming apps in specific regions can use Music Streaming Services Entitlements to include a link (which may take the form of a buy button) to the developer's website that informs users of other ways to purchase digital music content or services. These entitlements also permit music streaming app developers to invite users to provide their email address for the express purpose of sending them a link to the developer's website to purchase digital music content or services. Learn more about these entitlements.</p>
<p>In accordance with the entitlement agreements, the link may inform users about where and how to purchase those in-app purchase items, and the price of such items. The entitlements are limited to use only in the iOS or iPadOS App Store in specific storefronts. In all other storefronts, streaming music apps and their metadata may not include buttons, external links, or other calls to action that direct customers to purchasing mechanisms other than in-app purchase.</p></blockquote>
<p>The European Commission in March fined <a href="https://www.macrumors.com/2024/03/04/eu-fines-apple-2-billion/">Apple $2 billion</a> for anti-competitive conduct against rival music streaming services. The fine also came with a requirement that Apple "remove the anti-steering provisions" from its <a href="https://www.macrumors.com/guide/app-store/">App Store</a> rules, which Apple has now done. Apple is restricted from repeating the infringement or adopting similar practices in the future, though it is worth noting that Apple plans to appeal the decision.</p>
<p>Apple has accused Spotify of manipulating the European Commission to get the rules of the ‌App Store‌ rewritten in its favor. "They want to use Apple's tools and technologies, distribute on the ‌App Store‌, and benefit from the trust we've built with users - and pay Apple nothing for it," <a href="https://www.macrumors.com/2024/03/04/eu-fines-apple-2-billion/">Apple complained</a> following the ruling.</p>
<p>In addition to updating its streaming music rules, Apple today also added games from retro game console emulator apps to the list of permitted software allowable under guideline 4.7. Guideline 4.7 permits apps to offer HTML5 mini apps and mini games, streaming games, chatbots, game emulators, and plug-ins.</p>
<blockquote><p>Apps may offer certain software that is not embedded in the binary, specifically HTML5 mini apps and mini games, streaming games, chatbots, and plug-ins. Additionally, retro game console emulator apps can offer to download games. You are responsible for all such software offered in your app, including ensuring that such software complies with these Guidelines and all applicable laws.</p></blockquote>
<p>Game emulators have managed to sneak onto the ‌App Store‌ several times over the years by using hidden functionality, but Apple has not explicitly permitted them until now. The rule change that allows for game emulators is worldwide, as is support for apps that offer mini apps and mini games.</p>
</div></article><p><h2>Popular Stories</h2></p><div><h3><a href="https://www.macrumors.com/2024/04/02/iphone-16-pro-models-rumored-features/">iPhone 16 Pro Expected Later This Year With These 12 New Features</a></h3><p>While the iPhone 16 Pro and iPhone 16 Pro Max are still months away from launching, there are already over a dozen rumors about the devices. Below, we have recapped new features and changes expected for the devices so far. These are some of the key changes rumored for the iPhone 16 Pro models as of April 2024:Larger displays: The iPhone 16 Pro and iPhone 16 Pro Max will be equipped with large...</p></div><div><h3><a href="https://www.macrumors.com/2024/04/02/ios-18-resource-reveals-visionos-redesign/">Alleged iOS 18 Design Resource Reveals visionOS-Like Redesign [Updated]</a></h3><p>A first look at iOS 18's rumored visionOS-style redesign may have been revealed by a new image of the Camera app. Alleged iOS 18 design resource. MacRumors received the above iPhone frame template from an anonymous source who claims they obtained it from an iOS engineer. It will allegedly be included as part of the Apple Design Resources for iOS 18, which helps developers visually design apps ...</p></div><div><h3><a href="https://www.macrumors.com/2024/04/03/apple-reportedly-investigating-robotics/">Apple Exploring 'Mobile Robot' That 'Follows Users Around Their Homes'</a></h3><p>Wednesday April 3, 2024 12:21 pm PDT by <a href="https://www.macrumors.com/author/joe-rossignol/" rel="author">Joe Rossignol</a></p><p>Apple is exploring various "personal robotics" projects in an effort to create its "next big thing," according to Bloomberg's Mark Gurman. Amazon's Astro robot One of these projects is described as a "mobile robot" that would "follow users around their homes," while another is said to be an "advanced table-top home device that uses robotics to move a display around":Engineers at Apple have...</p></div><div><h3><a href="https://www.macrumors.com/2024/04/02/apple-reveals-new-ai-system/">Apple Researchers Reveal New AI System That Can Beat GPT-4</a></h3><p>Apple researchers have developed an artificial intelligence system named ReALM (Reference Resolution as Language Modeling) that aims to radically enhance how voice assistants understand and respond to commands. In a research paper (via VentureBeat), Apple outlines a new system for how large language models tackle reference resolution, which involves deciphering ambiguous references to...</p></div><div><h3><a href="https://www.macrumors.com/2024/04/04/apple-suppliers-say-new-ipads-repeatedly-postponed/">Apple Suppliers Say New iPads Have Been 'Repeatedly Postponed'</a></h3><p>It has been nearly 18 months since Apple last updated its iPad lineup, and customers are anxiously waiting for new models to be announced. For months, there have been rumors about new iPad Pro and iPad Air models, but the estimated timeframe for their release has been repeatedly pushed back from March to April to May. In defense of these rumors, it does sound like Apple has experienced...</p></div><div><h3><a href="https://www.macrumors.com/2024/04/01/apple-card-savings-rate-to-decrease/">Apple Card Savings Account to Receive First-Ever Interest Rate Decrease</a></h3><p>Nearly one year after it launched in the U.S., the Apple Card's high-yield savings account will be receiving its first-ever interest rate decrease. Starting on April 3, the Apple Card savings account's annual percentage yield (APY) will be lowered to 4.4%, according to data on Apple's backend discovered by MacRumors contributor Aaron Perris. The account currently has a 4.5% APY. 4.4% will ...</p></div></div></div>]]></description>
        </item>
    </channel>
</rss>