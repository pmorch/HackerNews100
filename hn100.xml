<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 12 Apr 2025 05:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[You might not need WebSockets (200 pts)]]></title>
            <link>https://hntrl.io/posts/you-dont-need-websockets/</link>
            <guid>43659370</guid>
            <pubDate>Fri, 11 Apr 2025 22:27:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hntrl.io/posts/you-dont-need-websockets/">https://hntrl.io/posts/you-dont-need-websockets/</a>, See on <a href="https://news.ycombinator.com/item?id=43659370">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>  <h2 id="whats-a-websocket">What’s a WebSocket?</h2>
<p>If you’re new to web development or you haven’t heard of a WebSocket before, they’re a way to open a two-way communication channel between the client and server using HTTP as the transport protocol. In less nerdy terms, it’s a way to keep an open line of communication between the client and server so that both can send and receive messages at any time. (<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">MDN Reference</a>)</p>
<p>Because of how it’s advertised on the tin, it’s natural to think of a WebSocket as the best (and sometimes only) way to orchestrate a long-living stream of data between client and server, like for instance a real time application. In practice though, it turns out there are a few reasons why you might not want to use them:</p>
<h3 id="websocket-messages-arent-transactional">WebSocket messages aren’t transactional</h3>
<p>I see a lot of instances where WebSockets are used as the way of maintaining consistency for some kind of state object. For instance, you use the transmitting side of the socket to represent mutations to some object, and the receiving side of the socket to represent state as it gets changed by those mutations. That way if you have multiple clients listening to the same object, they’ll all see the same state changes without having to refresh the page.</p>
<pre tabindex="0" data-language="plaintext"><code><span><span># Client 1</span></span>
<span><span>&gt;&gt;&gt; { command: "increment", amount: 5 }</span></span>
<span><span>&lt;&lt;&lt; { event: "count", value: 5 }</span></span>
<span><span>&gt;&gt;&gt; { command: "decrement", amount: 2 }</span></span>
<span><span>&lt;&lt;&lt; { event: "count", value: 3 }</span></span>
<span><span># Client 2</span></span>
<span><span>&lt;&lt;&lt; { event: "count", value: 5 }</span></span>
<span><span>&lt;&lt;&lt; { event: "count", value: 3 }</span></span></code></pre>
<p>But what if you placed some kind of invariant condition on the state object? For instance, you want to make sure that the count is never negative:</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>&lt;&lt;&lt; { event: "count", amount: 5 }</span></span>
<span><span>&gt;&gt;&gt; { command: "decrement", amount: 6 }</span></span>
<span><span>&lt;&lt;&lt; { error: "count cannot be negative" }</span></span></code></pre>
<p>The issue here is that there’s no association between the mutation and error message since the error message will be received on the same stream as every other message. We can’t reliably say “the next message” received on the stream is the result of the previous command since the server could have sent any number of messages in between now and then.</p>
<p>If we wanted to update the UI to show the error, we’d have to link the error event somehow (like providing an associative request id in the command and the error message):</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>&gt;&gt;&gt; { command: "decrement", amount: 6, requestId: "123" }</span></span>
<span><span>&lt;&lt;&lt; { error: "count cannot be negative", requestId: "123" }</span></span></code></pre>
<p>This becomes even more awkward because now you have to keep track of every message you send, and you have to find some way to bubble the error event back to the UI in an idempotent way. The same goes if you wanted to have some kind of indication that the command was received by the server. In that case, now you’re also dealing with certain hard-to-track edge cases:</p>
<ul>
<li>What if the socket closes before the server can process the command?</li>
<li>What if you never receive a response message on the socket for some reason?</li>
<li>What if you’re dealing with a huge number of concurrent requests?</li>
</ul>
<p>It creates too many unknowns and complexity for something that should be simple. If you’re dealing with messages where you need to know if they were received or not, you’re better off with using a more transactional protocol like HTTP to represent the sending side of the socket.</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>( &lt; &gt; ) = HTTP</span></span>
<span><span>( &lt;&lt;&lt; &gt;&gt;&gt; ) = WebSocket</span></span>
<span><span></span></span>
<span><span># Success</span></span>
<span><span>&gt; POST /increment '{ value: 5 }'</span></span>
<span><span>&lt; 200 OK</span></span>
<span><span>&lt;&lt;&lt; { event: "count", value: 5 }</span></span>
<span><span>#- (the update message still gets sent to all connected clients)</span></span>
<span><span></span></span>
<span><span># Failure</span></span>
<span><span>&gt; POST /decrement '{ value: 6 }'</span></span>
<span><span>&lt; 400 Bad Request</span></span>
<span><span>#- (no update gets sent because the request failed)</span></span></code></pre>
<p>We’ve effectively ditched the transmitting side of the socket altogether and replaced it with HTTP, which means we’re now leaning on WebSockets to represent only one stream of data (the receiving side). As it turns out there’s other ways to do that don’t require the overhead of a full duplex connection. <em>(we’ll get into this later)</em></p>
<p><em>If you’re sending messages that don’t necessarily need to be acknowledged (like a heartbeat or keyboard inputs), then Websockets make a great fit. Hence the title of this post, you <strong>might</strong> not need Websockets.</em></p>
<h3 id="you-have-to-manage-the-socket-lifecycle">You have to manage the socket lifecycle</h3>
<p>When you use WebSockets, you’re not just sending and receiving messages at will—your application also has to respond to the opening and closing of the connection. This means handling events like “open” and “close” (or “error”), deciding what to do during reconnect attempts, and cleaning up resources when the connection is no longer needed.</p>
<p>For example, a basic lifecycle for a WebSocket in the browser might look like this:</p>
<pre tabindex="0" data-language="js"><code><span><span>const</span><span> socket</span><span> =</span><span> new</span><span> WebSocket</span><span>(</span><span>"</span><span>wss://example.com/socket</span><span>"</span><span>);</span></span>
<span></span>
<span><span>socket</span><span>.</span><span>addEventListener</span><span>(</span><span>"</span><span>open</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Socket opened</span><span>"</span><span>);</span></span>
<span><span>});</span></span>
<span></span>
<span><span>socket</span><span>.</span><span>addEventListener</span><span>(</span><span>"</span><span>message</span><span>"</span><span>, (</span><span>event</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Received message:</span><span>"</span><span>, </span><span>event</span><span>.</span><span>data</span><span>);</span></span>
<span><span>});</span></span>
<span></span>
<span><span>socket</span><span>.</span><span>addEventListener</span><span>(</span><span>"</span><span>error</span><span>"</span><span>, (</span><span>err</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  console</span><span>.</span><span>error</span><span>(</span><span>"</span><span>Socket error:</span><span>"</span><span>, </span><span>err</span><span>);</span></span>
<span><span>});</span></span>
<span></span>
<span><span>socket</span><span>.</span><span>addEventListener</span><span>(</span><span>"</span><span>close</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Socket closed. Attempting to reconnect…</span><span>"</span><span>);</span></span>
<span><span>  // Potentially restart or schedule a new socket connection here</span></span>
<span><span>});</span></span></code></pre>
<p>In a typical application, you might need to restart a closed connection, buffer messages while the socket is down, and handle retries with exponential backoff. Ignoring any of these steps can lead to lost messages, clumsy user experiences, or lingering connections. By contrast, with a simpler request/response model like HTTP, the lifecycle is more straightforward: each request starts, completes (or fails), and then you move on.</p>
<p>The extra complexity of a WebSocket’s lifecycle is one of the main reasons you might not need it—unless there’s absolutely no alternative to socket based messaging (partially demonstrated in the previous section), then you’re better off with a simpler communication pattern.</p>
<h3 id="it-makes-your-server-code-more-complex">It makes your server code more complex</h3>
<p>When a new WebSocket connection is initiated, your server has to handle the HTTP “upgrade” request handshake. Instead of completing an ordinary request, the server checks for the special headers indicating a WebSocket handshake and then upgrades the connection from HTTP to a persistent socket. That means for every initial connection, the server must parse and validate WebSocket headers like “Sec-WebSocket-Key” and respond with the correct “Sec-WebSocket-Accept” header. (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Sec-WebSocket-Key#websocket_opening_handshake">MDN Reference</a>)</p>
<p>The upgrade mechanism itself requires additional plumbing: you need to create a listener for the upgrade event on your server, confirm the request is valid, finalize the handshake, and then start broadcasting or receiving data. This not only adds more moving parts (compared to standard request/response flows) but also means comprehension of HTTP alone isn’t enough for debugging or troubleshooting—now you’re dealing with a specialized connection protocol.</p>
<p>If you’re also dealing with similar request/response semantics as we’ve detailed above, it can introduce even more complexity since now your server code is written with the durable nature of sockets in mind, not the ephemeral nature of HTTP. Additionally, your application will need to manage all the edge cases: what if the client tries upgrading in an unsupported way? What if the handshake fails mid-stream or times out? What about partial data frames that need to be reassembled?</p>
<p>While libraries and frameworks do a really good job of hiding some of these details under the hood, all these potential points of failure point back to a single truth: if you don’t truly need the power of a bidirectional, always-on socket, the handshake cost and the expanded error states can overshadow any performance or real-time benefits.</p>
<hr>
<p>So what’s the alternative?</p>
<p>We touched on it very briefly in the previous sections, but if we can abstract away the transmitting side of the socket and only be left with a one-way stream of data on the receiving side, we can use a much simpler communication pattern.</p>
<h2 id="http-streaming">HTTP Streaming</h2>
<p>If you look deeper into how HTTP works, you’ll find that it’s actually a protocol designed for streaming data. If it wasn’t, we couldn’t stream video without loading the entire file first, or load huge websites without downloading the whole page.</p>
<p>As it turns out that data stream doesn’t have to be split up chunks of some large blob of data. We can use the same principle to represent any arbitrary stream of data, like the real time updates that we were leaning on WebSockets for.</p>
<p>Here’s an example in server-side JavaScript of how this would look using our counter example from before:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> counter</span><span> =</span><span> 0</span><span>;</span></span>
<span><span>let</span><span> resolvers</span><span> =</span><span> new</span><span> Set</span><span>();</span></span>
<span></span>
<span><span>// this returns a promise that resolves when the next</span></span>
<span><span>// value is available.</span></span>
<span><span>async</span><span> function</span><span> nextValue</span><span>() {</span></span>
<span><span>  return</span><span> new</span><span> Promise</span><span>((</span><span>resolve</span><span>) </span><span>=&gt;</span><span> resolvers</span><span>.</span><span>add</span><span>(</span><span>resolve</span><span>));</span></span>
<span><span>}</span></span>
<span></span>
<span><span>// look up what an `async generator` is if you're lost</span></span>
<span><span>// looking at this syntax. explaining it is out of scope</span></span>
<span><span>// for this post.</span></span>
<span><span>async</span><span> function</span><span>*</span><span> valueGenerator</span><span>() {</span></span>
<span><span>  // (this loop gets broken when the response stream is closed.)</span></span>
<span><span>  while</span><span> (</span><span>true</span><span>) {</span></span>
<span><span>    // every time we get the next value from the iterator,</span></span>
<span><span>    // we yield the return from an awaited promise that resolves</span></span>
<span><span>    // when the next value is available.</span></span>
<span><span>    yield</span><span> await</span><span> nextValue</span><span>();</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>async</span><span> function</span><span> processCommand</span><span>(</span><span>command</span><span>) {</span></span>
<span><span>  // this is what handles our "state updates"</span></span>
<span><span>  counter</span><span> =</span><span> nextCounterValue</span><span>(</span><span>command</span><span>);</span></span>
<span><span>  // for each iterator (i.e. client that called `/stream`)</span></span>
<span><span>  // that's waiting on a value, we resolve the promise with</span></span>
<span><span>  // the new value</span></span>
<span><span>  for</span><span> (</span><span>const</span><span> resolver</span><span> of</span><span> resolvers</span><span>) {</span></span>
<span><span>    resolver</span><span>(</span><span>counter</span><span>);</span></span>
<span><span>    resolvers</span><span>.</span><span>delete</span><span>(</span><span>resolver</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>// this is the function that computes the next state</span></span>
<span><span>// based on the command, and enforces any invariants</span></span>
<span><span>// that we want to have on the state.</span></span>
<span><span>function</span><span> nextCounterValue</span><span>(</span><span>command</span><span>) {</span></span>
<span><span>  let</span><span> next</span><span> =</span><span> counter</span><span>;</span></span>
<span><span>  if</span><span> (</span><span>command</span><span>.</span><span>type</span><span> ===</span><span> "</span><span>increment</span><span>"</span><span>) {</span></span>
<span><span>    next</span><span> +=</span><span> command</span><span>.</span><span>amount</span><span>;</span></span>
<span><span>  } </span><span>else</span><span> if</span><span> (</span><span>command</span><span>.</span><span>type</span><span> ===</span><span> "</span><span>decrement</span><span>"</span><span>) {</span></span>
<span><span>    next</span><span> -=</span><span> command</span><span>.</span><span>amount</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>  if</span><span> (</span><span>next</span><span> &lt;</span><span> 0</span><span>) {</span></span>
<span><span>    throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>count cannot be negative</span><span>"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  return</span><span> next</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>// we use hono/express like syntax here, but you can</span></span>
<span><span>// use any server framework you want.</span></span>
<span></span>
<span><span>app</span><span>.</span><span>post</span><span>(</span><span>"</span><span>/increment</span><span>"</span><span>, </span><span>async</span><span> (</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  try</span><span> {</span></span>
<span><span>    const</span><span> { </span><span>value</span><span> } </span><span>=</span><span> await</span><span> req</span><span>.</span><span>json</span><span>();</span></span>
<span><span>    processCommand</span><span>({ type: </span><span>"</span><span>increment</span><span>"</span><span>, amount: </span><span>value</span><span> });</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>"</span><span>OK</span><span>"</span><span>, </span><span>200</span><span>);</span></span>
<span><span>  } </span><span>catch</span><span> (</span><span>error</span><span>) {</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>error</span><span>.</span><span>message</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>});</span></span>
<span></span>
<span><span>app</span><span>.</span><span>post</span><span>(</span><span>"</span><span>/decrement</span><span>"</span><span>, </span><span>async</span><span> (</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  try</span><span> {</span></span>
<span><span>    const</span><span> { </span><span>value</span><span> } </span><span>=</span><span> await</span><span> req</span><span>.</span><span>json</span><span>();</span></span>
<span><span>    processCommand</span><span>({ type: </span><span>"</span><span>decrement</span><span>"</span><span>, amount: </span><span>value</span><span> });</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>"</span><span>OK</span><span>"</span><span>, </span><span>200</span><span>);</span></span>
<span><span>  } </span><span>catch</span><span> (</span><span>error</span><span>) {</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>error</span><span>.</span><span>message</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>});</span></span>
<span></span>
<span><span>app</span><span>.</span><span>get</span><span>(</span><span>"</span><span>/stream</span><span>"</span><span>, (</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // We can create a stream from any async iterator, so</span></span>
<span><span>  // we can pass the generator function that yields counter</span></span>
<span><span>  // updates as they become available.</span></span>
<span><span>  const</span><span> stream</span><span> =</span><span> ReadableStream</span><span>.</span><span>from</span><span>(</span><span>valueGenerator</span><span>());</span></span>
<span><span>  return</span><span> new</span><span> Response</span><span>(</span><span>stream</span><span>);</span></span>
<span><span>});</span></span></code></pre>
<p>We can then use the Stream API on the browser side to read the data as it comes in, and update our UI according to whatever the server sends.</p>
<pre tabindex="0" data-language="js"><code><span><span>const</span><span> response</span><span> =</span><span> await</span><span> fetch</span><span>(</span><span>"</span><span>/stream</span><span>"</span><span>);</span></span>
<span><span>const</span><span> reader</span><span> =</span><span> response</span><span>.</span><span>body</span><span>.</span><span>getReader</span><span>();</span></span>
<span><span>const</span><span> decoder</span><span> =</span><span> new</span><span> TextDecoder</span><span>();</span></span>
<span></span>
<span><span>while</span><span> (</span><span>true</span><span>) {</span></span>
<span><span>  // wait for the next chunk of data</span></span>
<span><span>  // (will only come when a state update is made)</span></span>
<span><span>  const</span><span> { </span><span>done</span><span>, </span><span>value</span><span> } </span><span>=</span><span> await</span><span> reader</span><span>.</span><span>read</span><span>();</span></span>
<span><span>  // when the server is done sending data, we break out of the loop</span></span>
<span><span>  if</span><span> (</span><span>done</span><span>) </span><span>break</span><span>;</span></span>
<span><span>  // decode the chunk since data gets encoded over the network</span></span>
<span><span>  const</span><span> chunk</span><span> =</span><span> decoder</span><span>.</span><span>decode</span><span>(</span><span>value</span><span>);</span></span>
<span><span>  // update the UI with the new state</span></span>
<span><span>  updateUI</span><span>(</span><span>chunk</span><span>);</span></span>
<span><span>}</span></span></code></pre>
<p>With this setup we’ve completely eliminated the need for WebSockets while still maintaining real-time updates between multiple clients!</p>
<h3 id="bonus-making-it-easy-with-eventkit">Bonus: Making it easy with eventkit</h3>
<p>This is a little bit of a shameless plug, but it’s my post so you’re just going to have to live with it.</p>
<p>I’ve been working on a library called <a href="https://github.com/hntrl/eventkit">eventkit</a> that makes it easy to compose and observe asynchronous streams of data. If you’re familiar with the observable pattern or RxJS, it’s very similar but with better side effect management and built with generators.</p>
<p>To harp on the counter example a little bit more, here’s how you could use eventkit to implement the same functionality:</p>
<pre tabindex="0" data-language="ts"><code><span><span>// server.ts</span></span>
<span><span>import</span><span> { </span><span>Stream</span><span>, </span><span>AsyncObservable</span><span> } </span><span>from</span><span> "</span><span>eventkit</span><span>"</span><span>;</span></span>
<span></span>
<span><span>let</span><span> counter</span><span> =</span><span> 0</span><span>;</span></span>
<span><span>const</span><span> stateUpdates$</span><span> =</span><span> new</span><span> Stream</span><span>();</span></span>
<span></span>
<span><span>// when a new value is pushed into the stream,</span></span>
<span><span>// we update the counter</span></span>
<span><span>stateUpdates$</span><span>.</span><span>subscribe</span><span>((</span><span>value</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  counter</span><span> =</span><span> value</span><span>;</span></span>
<span><span>});</span></span>
<span></span>
<span><span>function</span><span> nextCounterValue</span><span>(</span><span>command</span><span>) {</span></span>
<span><span>  let</span><span> next</span><span> =</span><span> counter</span><span>;</span></span>
<span><span>  if</span><span> (</span><span>command</span><span>.</span><span>type</span><span> ===</span><span> "</span><span>increment</span><span>"</span><span>) {</span></span>
<span><span>    next</span><span> +=</span><span> command</span><span>.</span><span>amount</span><span>;</span></span>
<span><span>  } </span><span>else</span><span> if</span><span> (</span><span>command</span><span>.</span><span>type</span><span> ===</span><span> "</span><span>decrement</span><span>"</span><span>) {</span></span>
<span><span>    next</span><span> -=</span><span> command</span><span>.</span><span>amount</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>  if</span><span> (</span><span>next</span><span> &lt;</span><span> 0</span><span>) {</span></span>
<span><span>    throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>count cannot be negative</span><span>"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  return</span><span> next</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>app</span><span>.</span><span>post</span><span>(</span><span>"</span><span>/increment</span><span>"</span><span>, </span><span>async</span><span> (</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  try</span><span> {</span></span>
<span><span>    const</span><span> { </span><span>value</span><span> } </span><span>=</span><span> await</span><span> req</span><span>.</span><span>json</span><span>();</span></span>
<span><span>    const</span><span> next</span><span> =</span><span> nextCounterValue</span><span>(</span></span>
<span><span>      { type: </span><span>"</span><span>increment</span><span>"</span><span>, amount: </span><span>value</span><span> }</span></span>
<span><span>    );</span></span>
<span><span>    stateUpdates$</span><span>.</span><span>push</span><span>(</span><span>next</span><span>);</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>"</span><span>OK</span><span>"</span><span>, </span><span>200</span><span>);</span></span>
<span><span>  } </span><span>catch</span><span> (</span><span>error</span><span>) {</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>error</span><span>.</span><span>message</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>});</span></span>
<span></span>
<span><span>app</span><span>.</span><span>post</span><span>(</span><span>"</span><span>/decrement</span><span>"</span><span>, </span><span>async</span><span> (</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  try</span><span> {</span></span>
<span><span>    const</span><span> { </span><span>value</span><span> } </span><span>=</span><span> await</span><span> req</span><span>.</span><span>json</span><span>();</span></span>
<span><span>    const</span><span> next</span><span> =</span><span> nextCounterValue</span><span>(</span></span>
<span><span>      { type: </span><span>"</span><span>decrement</span><span>"</span><span>, amount: </span><span>value</span><span> }</span></span>
<span><span>    );</span></span>
<span><span>    stateUpdates$</span><span>.</span><span>push</span><span>(</span><span>next</span><span>);</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>"</span><span>OK</span><span>"</span><span>, </span><span>200</span><span>);</span></span>
<span><span>  } </span><span>catch</span><span> (</span><span>error</span><span>) {</span></span>
<span><span>    return</span><span> new</span><span> Response</span><span>(</span><span>error</span><span>.</span><span>message</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>});</span></span>
<span></span>
<span><span>app</span><span>.</span><span>get</span><span>(</span><span>"</span><span>/stream</span><span>"</span><span>, (</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // We can use the `Stream` class as an async iterator</span></span>
<span><span>  // to create a stream from it in the exact same way.</span></span>
<span><span>  const</span><span> stream</span><span> =</span><span> ReadableSteam</span><span>.</span><span>from</span><span>(</span><span>stateUpdates$</span><span>);</span></span>
<span><span>  return</span><span> new</span><span> Response</span><span>(</span><span>stream</span><span>);</span></span>
<span><span>});</span></span></code></pre>
<pre tabindex="0" data-language="ts"><code><span><span>// client.ts</span></span>
<span><span>import</span><span> { </span><span>AsyncObservable</span><span>, </span><span>map</span><span> } </span><span>from</span><span> "</span><span>eventkit</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> response</span><span> =</span><span> await</span><span> fetch</span><span>(</span><span>"</span><span>/stream</span><span>"</span><span>);</span></span>
<span><span>const</span><span> decoder</span><span> =</span><span> new</span><span> TextDecoder</span><span>();</span></span>
<span><span>const</span><span> counter$</span><span> =</span><span> AsyncObservable</span><span>.</span><span>from</span><span>(</span><span>response</span><span>.</span><span>body</span><span>);</span></span>
<span></span>
<span><span>counter$</span></span>
<span><span>  .</span><span>pipe</span><span>(</span><span>map</span><span>((</span><span>value</span><span>) </span><span>=&gt;</span><span> decoder</span><span>.</span><span>decode</span><span>(</span><span>value</span><span>)))</span></span>
<span><span>  .</span><span>subscribe</span><span>(</span><span>updateUI</span><span>);</span></span></code></pre>
<p>I learned about the capabilities of the Stream API while building it and think it’s a really good candidate for your next real-time/event-based application. If you say otherwise, please <a href="https://github.com/hntrl/eventkit/issues">open an issue</a> and tell me why.</p>
<p>I wouldn’t be a good project maintainer if I didn’t tell you to at least go <a href="https://github.com/hntrl/eventkit?utm_source=hntrl&amp;utm_campaign=ydnw">check it out</a>. We also wrote a separate <a href="https://hntrl.github.io/eventkit/guide/examples/http-streaming?utm_source=hntrl&amp;utm_campaign=ydnw">HTTP Streaming</a> guide that goes a little bit deeper into this topic in case you’re interested.</p>
<hr>
<p>Thanks for reading this wall of text! If you have any questions/comments, I’m around on <a href="https://x.com/huntlovell">X/Twitter</a>. I also post more schizo ramblings on there, so I would appreciate the follow if that’s the sort of thing you’re into.</p>  <p>(END)</p> </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vacheron Constantin breaks the world record for most complicated wristwatch (140 pts)]]></title>
            <link>https://www.hodinkee.com/articles/introducing-vacheron-constantin-les-cabinotiers-solaria</link>
            <guid>43659365</guid>
            <pubDate>Fri, 11 Apr 2025 22:26:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.hodinkee.com/articles/introducing-vacheron-constantin-les-cabinotiers-solaria">https://www.hodinkee.com/articles/introducing-vacheron-constantin-les-cabinotiers-solaria</a>, See on <a href="https://news.ycombinator.com/item?id=43659365">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent" tabindex="-1">
  <div>
    
    <h2><p>With 41 complications and having taken eight years to craft, the Solaria is the perfect way for Vacheron to celebrate 270 years.</p></h2>
  </div>

  <div>
      <p><img sizes="100vw" srcset="https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=320 320w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=520 520w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=640 640w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=720 720w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=920 920w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=960 960w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1040 1040w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1120 1120w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1320 1320w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1440 1440w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1520 1520w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1560 1560w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1720 1720w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1840 1840w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=1920 1920w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2120 2120w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2160 2160w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2240 2240w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2320 2320w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2520 2520w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2640 2640w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2720 2720w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2760 2760w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=2920 2920w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3040 3040w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3120 3120w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3320 3320w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3360 3360w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3440 3440w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3520 3520w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3720 3720w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3840 3840w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3920 3920w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=3960 3960w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4120 4120w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4240 4240w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4320 4320w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4520 4520w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4560 4560w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4640 4640w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4720 4720w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=4920 4920w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=5040 5040w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=5120 5120w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=5160 5160w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=5440 5440w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=5760 5760w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=5840 5840w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=6240 6240w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=6360 6360w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=6640 6640w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=6960 6960w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=7040 7040w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=7440 7440w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=7560 7560w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=7840 7840w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=8160 8160w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=8240 8240w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=8640 8640w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=8760 8760w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=9040 9040w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=9360 9360w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=9440 9440w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=9840 9840w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=9960 9960w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=10240 10240w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=10560 10560w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=11160 11160w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=11760 11760w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=12360 12360w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=12960 12960w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=13560 13560w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=14160 14160w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=14760 14760w, https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;ar=16%3A9&amp;w=15360 15360w" data-image-id="7c93ff4c-f877-4071-bca4-3563a7162bcd" data-src="https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=" data-width="2880" data-height="1620" src="https://hodinkee.imgix.net/uploads/images/0ff58917-ac30-4296-a95b-b68a867cbc9b/20250331_VacheronConstantin_002.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=">

      </p>
    </div>


<div>
        
        <div data-index="1">
	<p>Vacheron Constantin's Les Cabinotiers department has done it again, setting a world record for the most complicated wristwatch with the "Solaria Ultra Grand Complication" less than one year after <a href="https://www.hodinkee.com/articles/introducing-vacheron-constantin-berkley-grand-complication" target="_blank">the announcement of the world's most complicated watch</a>. Far from a pocket watch this time, the Solaria features 41 complications, 13 potential patented inventions, and a shockingly modern design and wearable size. Fair warning, this story will (yet again) be the longest we'll run during Watches and Wonders.</p>

    
</div>
        <div data-index="2">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/84744b13-a469-4abf-a399-735cbe2b78db/20250331_VacheronConstantin_007.JPG" data-sizes="820px" data-srcset="https://hodinkee.imgix.net/uploads/images/84744b13-a469-4abf-a399-735cbe2b78db/20250331_VacheronConstantin_007.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=820 820w, https://hodinkee.imgix.net/uploads/images/84744b13-a469-4abf-a399-735cbe2b78db/20250331_VacheronConstantin_007.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1640 1640w, https://hodinkee.imgix.net/uploads/images/84744b13-a469-4abf-a399-735cbe2b78db/20250331_VacheronConstantin_007.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2460 2460w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="3">
	<p>Obviously, the brand is no stranger to high-complication watchmaking over their 270-year history. Their forays into this mini-competition among the world's complications specialists resulted in 2017's Vacheron Constantin Les Cabinotiers Celestia Astronomical Grand Complication 3600, with 23 complications. But they still didn't have nearly the number of complications of the Franck Muller Aeternitas Mega 4, with its 36. But Franck Muller's website is wildly out of date. Not only has the Aeternitas not been the most complicated <i>watch</i> for some time, but it's no longer the most complicated wristwatch either.</p>

    
</div>
        <div data-index="4">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/879057ab-dc0f-4964-977d-4004082b9cae/20250331_VacheronConstantin_004.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/879057ab-dc0f-4964-977d-4004082b9cae/20250331_VacheronConstantin_004.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/879057ab-dc0f-4964-977d-4004082b9cae/20250331_VacheronConstantin_004.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/879057ab-dc0f-4964-977d-4004082b9cae/20250331_VacheronConstantin_004.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="5">
  <p>Video: Unraveling The Story Of The Vacheron Constantin Berkley Grand Complication</p>

    <p><img alt="Berkley Grand Comp" srcset="https://hodinkee.imgix.net/uploads/images/9b602658-8ca1-4330-9088-f3fc485aed3d/20240408_VacheronBerkley_012.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;ch=Width%2CDPR%2CSave-Data&amp;fit=crop&amp;w=300 1x, https://hodinkee.imgix.net/uploads/images/9b602658-8ca1-4330-9088-f3fc485aed3d/20240408_VacheronBerkley_012.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;ch=Width%2CDPR%2CSave-Data&amp;fit=crop&amp;w=300&amp;dpr=2 2x" src="https://hodinkee.imgix.net/uploads/images/9b602658-8ca1-4330-9088-f3fc485aed3d/20240408_VacheronBerkley_012.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;ch=Width%2CDPR%2CSave-Data&amp;fit=crop&amp;w=300">
</p>
  <div><p>Less than a year ago, Vacheron Constantin made the most complicated watch in the world and we were there <a href="https://www.hodinkee.com/articles/video-vacheron-constantin-berkley-grand-comp" target="_blank">to bring you a video about the watch.</a></p></div>
</div>
        <div data-index="6">
	<p>Beyond the awe at the Berkley Grand Comp, there was some fair critique that the 960 gram, 90.8mm diameter by 50.55mm thick "pocket watch" wasn't so much a watch, but a clock (though, where the line of one ends and the other begins is up for debate) or – my favorite comment – a horological kettlebell. "Impressive. Now make a wristwatch version," said one reader. Well, they kind of just did.</p>

    
</div>
        <div data-index="7">
	<p>As they did last year for that watch, Vacheron yet again previewed the Les Cabinotiers Solari this year on the day before Watches and Wonders to a select group of press. That means that, not only do we have all the details, but I also had a chance to go "hands-on” (literally, versus the Berkley which we couldn’t touch) with the watch.&nbsp;</p>

    
</div>
        
        <div data-index="9">
	<p>Alright, we know that the watch has 41 complications and has 13 patents applied for – and we'll get to the specific complications shortly – but I think one of the most impressive things is the size and overall aesthetic of the watch. Vacheron has not shied from tying the idea of "complicated" closely to the word "loud" with watches like the <a href="https://www.hodinkee.com/articles/hands-vacheron-constantin-les-cabinotiers-voyages" target=""><u>2022 Tribute to Bacchus</u></a>, and yet, this has a relatively reserved case design and modern dial language in a wearable package.</p>

    
</div>
        <div data-index="10">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/bccf786f-ada5-4590-a7e2-2f62e63283b8/20250331_VacheronConstantin_049.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/bccf786f-ada5-4590-a7e2-2f62e63283b8/20250331_VacheronConstantin_049.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/bccf786f-ada5-4590-a7e2-2f62e63283b8/20250331_VacheronConstantin_049.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/bccf786f-ada5-4590-a7e2-2f62e63283b8/20250331_VacheronConstantin_049.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="11">
      <div>
        <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/e0022ba1-04e8-4382-928f-c1b682ef772c/20250331_VacheronConstantin_017.JPG" data-sizes="600px" data-srcset="https://hodinkee.imgix.net/uploads/images/e0022ba1-04e8-4382-928f-c1b682ef772c/20250331_VacheronConstantin_017.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=600 600w, https://hodinkee.imgix.net/uploads/images/e0022ba1-04e8-4382-928f-c1b682ef772c/20250331_VacheronConstantin_017.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/e0022ba1-04e8-4382-928f-c1b682ef772c/20250331_VacheronConstantin_017.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1800 1800w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>      </div>
      <div>
        <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/0edfa4a0-7aaa-4ce0-bbdc-4c68b89e4ae9/20250331_VacheronConstantin_026.JPG" data-sizes="600px" data-srcset="https://hodinkee.imgix.net/uploads/images/0edfa4a0-7aaa-4ce0-bbdc-4c68b89e4ae9/20250331_VacheronConstantin_026.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=600 600w, https://hodinkee.imgix.net/uploads/images/0edfa4a0-7aaa-4ce0-bbdc-4c68b89e4ae9/20250331_VacheronConstantin_026.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/0edfa4a0-7aaa-4ce0-bbdc-4c68b89e4ae9/20250331_VacheronConstantin_026.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1800 1800w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>      </div>
  </div>
        <div data-index="12">
	<p>How wearable? The watch measures 45mm by 14.99mm thick. Compare that to the recent Omega Seamaster Planet Ocean World Time, which is 0.5mm larger and 4mm <i>thicker</i>. While these are two different watches with two different use cases (the "Solaria" has no listed water resistance, so I'd say it's just dust-proof), and Vacheron's offering is a unique piece from their high watchmaking arm with no price given, it just goes to show the achievement of micro-mechanics and miniaturisation from Vacheron.</p>

    
</div>
        <div data-index="13">
	<p>The entire movement, the Calibre 3655, measures only 36mm in diameter by 10.96mm thick and features everything from 14 astronomical complications to five chiming complications, including a split-second chronograph that also doubles as one of those astronomical complications, and more. With 1521 components and 204 jewels, the watch runs at 3Hz with a 72-hour power reserve.</p>

    
</div>
        <div data-index="14">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/3882dcbd-8fda-414e-9e84-ba3530221c10/VAC_Les_Cabinotiers_Solaria_231C_MOF_Caliber-assembling_3_71060271.jpg" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/3882dcbd-8fda-414e-9e84-ba3530221c10/VAC_Les_Cabinotiers_Solaria_231C_MOF_Caliber-assembling_3_71060271.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/3882dcbd-8fda-414e-9e84-ba3530221c10/VAC_Les_Cabinotiers_Solaria_231C_MOF_Caliber-assembling_3_71060271.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/3882dcbd-8fda-414e-9e84-ba3530221c10/VAC_Les_Cabinotiers_Solaria_231C_MOF_Caliber-assembling_3_71060271.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’" src="https://hodinkee-production.s3.amazonaws.com/uploads/images/3882dcbd-8fda-414e-9e84-ba3530221c10/VAC_Les_Cabinotiers_Solaria_231C_MOF_Caliber-assembling_3_71060271.jpg">
</p>  </div>
        <div data-index="15">
	<p>Unlike the Berkley Grand Complication, which was made on commission, the Solaria is a fully Vacheron-driven project. One watchmaker, yes, just one, was given <i>carte blanche</i> to go hog wild and make the most incredible feat of horology he could, and spent eight years on the task. He certainly took full advantage of the brief. There was no budget, and there is no price tag but the watch is for sale. In fact, the Solaria is actually called “the Premiere” to end its official name, because the program is open to orders with future examples modified in ways to keep them all unique. Yet each would have the full suite of complications. We will have a list of all the complications at the end, but here are some highlights.</p>

    
</div>
        <div data-index="16">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/b1f25197-654c-40c7-920e-eac76bf57437/20250331_VacheronConstantin_015.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/b1f25197-654c-40c7-920e-eac76bf57437/20250331_VacheronConstantin_015.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/b1f25197-654c-40c7-920e-eac76bf57437/20250331_VacheronConstantin_015.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/b1f25197-654c-40c7-920e-eac76bf57437/20250331_VacheronConstantin_015.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="17">
	<p>Yes, there are the normal (and extremely complex) chiming complications, a chronograph, and a tourbillon, but in this case, the Westminster minute repeater mechanism is integrated into the base movement along with the chronograph mechanism and tourbillon regulator. The Civil time display module is also coupled to the base movement, while Sidereal time runs independently.</p>

    
</div>
        <div data-index="18">
	<p>There is a Gregorian perpetual calendar and a second time zone display. But the second time zone has an independent hour and minute hands for your local time that are separated from the home time, and another worldtime display. The astronomical display also gives high and low tides for a selected city (as it does sunrise, sunset, moonphase, and age of the moon), but it also gives you the date of the Spring tide and the neap tide (seven days after a spring tide when there is a period of moderate tides and the sun and moon are at right angles to each other).</p>

    
</div>
        <div data-index="19">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/fba19de5-ddf5-4276-b7f8-93ead1f11623/20250331_VacheronConstantin_012.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/fba19de5-ddf5-4276-b7f8-93ead1f11623/20250331_VacheronConstantin_012.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/fba19de5-ddf5-4276-b7f8-93ead1f11623/20250331_VacheronConstantin_012.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/fba19de5-ddf5-4276-b7f8-93ead1f11623/20250331_VacheronConstantin_012.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="20">
	<p>The most fascinating complication (or combination of them), in my opinion, is the use of the column-wheel split-second chronograph as an astronomical tool. The rear of the watch features a display of the "celestial vault" (the apparent surface of the sky) with two overlapping sapphire displays. It's complicated (for lack of a better word), so bear with me.</p>

    
</div>
        <div data-index="21">
	<p>First, the rear dial displays a full slate of constellations for the night sky above a chosen location and displays the changing view of the constellations in real-time. The split-second chronograph is mounted in the middle of this display while another disc in the center of the dial has a green arrow that points to an hour between 0 and 24. There's also another green index line halfway from the center of the dial to the edge. As explained by Vacheron, this is how you use them:</p>

    
</div>
        <div data-index="22">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/7225b070-0691-42b0-8ebb-0a636dc9189e/20250331_VacheronConstantin_023.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/7225b070-0691-42b0-8ebb-0a636dc9189e/20250331_VacheronConstantin_023.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/7225b070-0691-42b0-8ebb-0a636dc9189e/20250331_VacheronConstantin_023.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/7225b070-0691-42b0-8ebb-0a636dc9189e/20250331_VacheronConstantin_023.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="23">
	<p>"To operate the complication, the user visually selects a given star on the celestial chart, then activates the chronograph. When the chronograph hand reaches the green reference marker, stop the first hand but let the second hand continue until it reaches the current position of the chosen star, then stop the hand. The time (in hours) that must elapse until the user will see the chosen star in the sky is indicated by the green triangle on the small counter in the centre of the dial. The peripheral month display marked on the back crystal enables the wearer to adjust the celestial vault to reflect the Earth's position in its orbit around the Sun."</p>

    
</div>
        <div data-index="24">
	<p>Last but not least, the display is – you guessed it – very complex. The front dial has four subdials, with two metal discs under the subdials for cities and astronomical signs, and three sapphire discs for sunrise, sunset, and moonphases (including spring and neap tide). Each sapphire disc is only 0.18mm.</p>

    
</div>
        <div data-index="25">
	<p>On the reverse, the transparent caseback is actually an astronomical disc marked with the months and constellations and is 0.6mm thick at the endge, while the rotating disc, which display the celestial vault and the sidereal time, is only 0.3 mm thick.</p>

    
</div>
        <div data-index="26">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/f24c5855-7708-4294-a1d2-6c0851ab5312/20250331_VacheronConstantin_036.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/f24c5855-7708-4294-a1d2-6c0851ab5312/20250331_VacheronConstantin_036.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/f24c5855-7708-4294-a1d2-6c0851ab5312/20250331_VacheronConstantin_036.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/f24c5855-7708-4294-a1d2-6c0851ab5312/20250331_VacheronConstantin_036.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="27">
	<p>From an aesthetic point of view, it took me a little time to appreciate the use of so much color on the dial. At first I thought the use of so much yellow, red, and green made the watch look less serious than I'd expect the most complicated wristwatch to look. Eventually I realized that each of these colors wildly increases legibility and makes it much more modern than any other ultra-complication ever made. It also is much more muted in person than the provided photos. In short, it’s one of the most visually balanced multi-complications possible.</p>

    
</div>
        <div data-index="28">
		<hr><p>
	The 13 Patent Applications
</p></div>
        <div data-index="29">
	<p>Understanding the achievements of the Berkley Grand Complication last year required considerable knowledge and explanation of the Chinese calendar and its application in the Chinese perpetual calendar. That made up the bulk of the change from the 57260 to the Berkley. Here, Vacheron has instead patented a wide range of complications.</p>

    
</div>
        <div data-index="30">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/20ceccd3-8376-4567-9777-d9902a9cfc08/20250331_VacheronConstantin_010.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/20ceccd3-8376-4567-9777-d9902a9cfc08/20250331_VacheronConstantin_010.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/20ceccd3-8376-4567-9777-d9902a9cfc08/20250331_VacheronConstantin_010.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/20ceccd3-8376-4567-9777-d9902a9cfc08/20250331_VacheronConstantin_010.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="31">
	<p>Why does this matter? Well, the brand has used pieces like this in the past as proving grounds for things they could integrate into future, more commercial releases. For instance, the spherical tourbillon from the 57260 made its way into the various versions of the <a href="https://www.hodinkee.com/articles/hands-vacheron-constantin-les-cabinotiers-voyages" target=""><u>Les Cabinotiers Armillary Tourbillon</u></a> we've seen over the years. This is even more likely in a watch with a movement size that is more applicable to other wristwatches.</p>

    
</div>
        <div data-index="32">
	<p>There are two patents for time indications. The first is a "plug and play" mounting system for aligning and securing the astronomical displays while allowing easy service and indexing. Second is a new system for universal time that allows the local time to be disassociated from home time, but using a differential instead of a spring as has been used in the past. The split-seconds chronograph also has a new split-seconds insulator system that is meant to allow better isochronism and vibration reduction.</p>

    
</div>
        <div data-index="33">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/79f1f60e-c468-4c39-97e7-6048c8f65b4d/20250331_VacheronConstantin_037.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/79f1f60e-c468-4c39-97e7-6048c8f65b4d/20250331_VacheronConstantin_037.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/79f1f60e-c468-4c39-97e7-6048c8f65b4d/20250331_VacheronConstantin_037.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/79f1f60e-c468-4c39-97e7-6048c8f65b4d/20250331_VacheronConstantin_037.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="34">
	<p>The bulk of the patent applications are actually for the minute repeater – a total of seven. They've reworked the minute repeater architecture with developments to optimise the size of the hammers and maximise the energy transmitted to the hammers and, therefore, the gongs for a better sound. I was surprised to hear that this meant that they actually shrunk the hammers, which minimized backlash, and made them out of steel for more power with 18K gold added on three of them. They're also arranged in a novel way, with pairs of hammers on each side of the baseplate. Finally, there's a new mode selector system for selecting the striking mode on demand of the repeater, choosing between hours only or engaging the entire striking mechanism with hours, quarters, and minutes.</p>

    
</div>
        <div data-index="35">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/24691073-1e56-4771-a7f9-ff88ba4085b3/20250331_VacheronConstantin_021.JPG" data-sizes="820px" data-srcset="https://hodinkee.imgix.net/uploads/images/24691073-1e56-4771-a7f9-ff88ba4085b3/20250331_VacheronConstantin_021.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=820 820w, https://hodinkee.imgix.net/uploads/images/24691073-1e56-4771-a7f9-ff88ba4085b3/20250331_VacheronConstantin_021.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1640 1640w, https://hodinkee.imgix.net/uploads/images/24691073-1e56-4771-a7f9-ff88ba4085b3/20250331_VacheronConstantin_021.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2460 2460w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="36">
	<p>I think there's no way to convey how fascinating a watch like this is and how difficult it is to comprehend that I've been looking at a watch that's so technical (with a dial that reflects that) but is only 0.6mm thicker than IWC's Eternal Calendar from last year. It's also just a testament to how far watchmaking technology has come to make a watch like this.</p>

    
</div>
        <div data-index="37">
		<hr><p>
	The Complications, 1 Through 41
</p></div>
        <div data-index="38">
	<p>Just as we did for the Berkley Grand Complication, I thought it might be useful to break down the 41 complications of the Solaria one by one. One thing to note: one of the listed complications is the tourbillon, which is a regulating organ (albeit a complex one to make). The debate about whether it's a complication is so fierce that the only way to win is not to play the game. When I asked Ben his opinion on this recently, he said, "Even though it's not one, it is one," which I think sums it up perfectly.</p>

    
</div>
        <div data-index="39">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/6f692c92-b1a8-45ac-9912-86417c78b7f2/20250331_VacheronConstantin_011.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/6f692c92-b1a8-45ac-9912-86417c78b7f2/20250331_VacheronConstantin_011.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/6f692c92-b1a8-45ac-9912-86417c78b7f2/20250331_VacheronConstantin_011.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/6f692c92-b1a8-45ac-9912-86417c78b7f2/20250331_VacheronConstantin_011.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="40">
	<p>That said, if you have the facts and are voting no on the tourbillon, Vacheron credits itself for only one complication for the second time zone hours <i>and</i> minutes (two different complications by my count), so the number could be 40, 41, or even 42 complications. Either way, there's no doubt that this watch stakes the claim to be the most complicated wristwatch in the world with the following functions.</p>

    
</div>
        <div data-index="41">
	<p><strong>Time Measurement (6 Total): 1. </strong>Day and night indication for reference city <strong>2. </strong>Second time zone hours and minutes (on 24-hour display) <strong>3. </strong>World time indication for 24 cities <strong>4. </strong>Second time zone day and night indication <strong>5. </strong>3Hz tourbillon with silicon balance wheel (with high Q factor) <strong>6. </strong>Civil time display module coupled to the base movement</p>

    
</div>
        <div data-index="42">
	<p><strong>Gregorian Perpetual Calendar (8 Total): 7. </strong>Perpetual calendar <strong>8. </strong>Days of the week <strong>9. </strong>Date <strong>10. </strong>Months <strong>11.</strong> Year indication <strong>12. </strong>Leap-year indication <strong>13. </strong>Indication for the number of the week within the year (ISO 8601 calendar) <strong>14. </strong>Number of the day of the week (ISO 8601 calendar).</p>

    
</div>
        <div data-index="43">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/777463ca-059d-496a-9604-a4495a725ca6/20250331_VacheronConstantin_057.JPG" data-sizes="1200px" data-srcset="https://hodinkee.imgix.net/uploads/images/777463ca-059d-496a-9604-a4495a725ca6/20250331_VacheronConstantin_057.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1200 1200w, https://hodinkee.imgix.net/uploads/images/777463ca-059d-496a-9604-a4495a725ca6/20250331_VacheronConstantin_057.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2400 2400w, https://hodinkee.imgix.net/uploads/images/777463ca-059d-496a-9604-a4495a725ca6/20250331_VacheronConstantin_057.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=3600 3600w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="44">
	<p><strong>Lunar Indication (3 Total): 15. </strong>Astronomical Moon phase and age of the Moon <strong>16. </strong>Tide level indicator <strong>17.</strong> Spring and neap tides indication.</p>

    
</div>
        <div data-index="45">
	<p><strong>Astronomical Indications (14 Total): 18. </strong>Indications of seasons, equinoxes, solstices &amp; astronomical zodiac signs <strong>19. </strong>Position of the Sun <strong>20.</strong> Sunrise time (according to the city of reference) <strong>21. </strong>Sunset time (according to the city of reference) <strong>22. </strong>Duration of the day (according to the city of reference) <strong>23. </strong>Equation of time on tropical gear <strong>24. </strong>Culmination time of the Sun (according to the city of reference) <strong>25. </strong>Height of the Sun above the horizon (according to the city of reference) <strong>26. </strong>Declination of the Sun, 3-dimensional Earth showing the latitude of the Sun in the North/South hemisphere <strong>27. </strong>Sidereal hours <strong>28. </strong>Sidereal minutes <strong>29. </strong>Astronomical zodiac signs <strong>30. </strong>Sky chart (according to the city of reference) <strong>31.</strong> Temporal tracking of celestial objects.</p>

    
</div>
        <div data-index="46">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/163fc9ec-16df-4824-bfbf-6f9116a2b8e5/20250331_VacheronConstantin_029.JPG" data-sizes="820px" data-srcset="https://hodinkee.imgix.net/uploads/images/163fc9ec-16df-4824-bfbf-6f9116a2b8e5/20250331_VacheronConstantin_029.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=820 820w, https://hodinkee.imgix.net/uploads/images/163fc9ec-16df-4824-bfbf-6f9116a2b8e5/20250331_VacheronConstantin_029.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1640 1640w, https://hodinkee.imgix.net/uploads/images/163fc9ec-16df-4824-bfbf-6f9116a2b8e5/20250331_VacheronConstantin_029.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2460 2460w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        <div data-index="47">
	<p><strong>Chiming Complications (5 Total): 32.</strong> Minute repeater <strong>33.</strong> Westminster carillon chime (4 hammers &amp; 4 gongs) <strong>34.</strong> Choice of hour-only or full chime <strong>35.</strong> Crown locking system during the chiming <strong>36.</strong> Double-stop hammer system to limit rebound and optimize transmission of the hammers' kinetic energy</p>

    
</div>
        <div data-index="48">
	<p><strong>Chronograph (4 Total):</strong> <strong>37.</strong> Chronograph (1 column wheel) <strong>38.</strong> 60-minute counter <strong>39.</strong> Split-seconds chronograph (1 column wheel) <strong>40.</strong> Isolator system for the split-seconds chronograph</p>

    
</div>
        <div data-index="49">
	<p><strong>Additional Feature: 41.</strong> Power-reserve indication (outer disc at 190°)</p>

    
</div>
        <div data-index="50">
  <p><img data-src="https://hodinkee-production.s3.amazonaws.com/uploads/images/56d83fa2-a920-4b9f-9d19-ca0843441729/20250331_VacheronConstantin_066.JPG" data-sizes="820px" data-srcset="https://hodinkee.imgix.net/uploads/images/56d83fa2-a920-4b9f-9d19-ca0843441729/20250331_VacheronConstantin_066.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=820 820w, https://hodinkee.imgix.net/uploads/images/56d83fa2-a920-4b9f-9d19-ca0843441729/20250331_VacheronConstantin_066.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=1640 1640w, https://hodinkee.imgix.net/uploads/images/56d83fa2-a920-4b9f-9d19-ca0843441729/20250331_VacheronConstantin_066.JPG?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;ch=Width%2CDPR%2CSave-Data&amp;alt=&amp;w=2460 2460w" alt="Vacheron Constantin Les Cabinotiers ‘Solaria Ultra Grand Complication’">
</p>  </div>
        

    

  </div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Germany creates 'super–high-tech ministry' for research, technology, aerospace (169 pts)]]></title>
            <link>https://www.science.org/content/article/germany-creates-super-high-tech-ministry-research-technology-and-aerospace</link>
            <guid>43658060</guid>
            <pubDate>Fri, 11 Apr 2025 20:16:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/germany-creates-super-high-tech-ministry-research-technology-and-aerospace">https://www.science.org/content/article/germany-creates-super-high-tech-ministry-research-technology-and-aerospace</a>, See on <a href="https://news.ycombinator.com/item?id=43658060">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/germany-creates-super-high-tech-ministry-research-technology-and-aerospace: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Social Security Administration Moving Public Communications to X (203 pts)]]></title>
            <link>https://www.wired.com/story/social-security-administration-regional-office-elon-musk-x/</link>
            <guid>43657079</guid>
            <pubDate>Fri, 11 Apr 2025 18:47:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/social-security-administration-regional-office-elon-musk-x/">https://www.wired.com/story/social-security-administration-regional-office-elon-musk-x/</a>, See on <a href="https://news.ycombinator.com/item?id=43657079">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>The Social Security Administration will no longer be communicating with the media and the public through press releases and “dear colleague” letters, as it shifts its public communication exclusively to X, sources tell WIRED. The news comes amid major staffing cuts at the agency.</p><p>“We are no longer planning to issue press releases or those dear colleague letters to inform the media and public about programmatic and service changes,” said SSA regional commissioner Linda Kerr-Davis in a meeting with managers earlier this week. “Instead, the agency will be using X to communicate to the press and the public … so this will become our communication mechanism.”</p><p>Previously, the agency used dear colleague letters to engage with advocacy groups and third-party organizations that help people access social security benefits. Recent letters covered everything from the agency’s new <a data-offer-url="https://www.ssa.gov/news/advocates/2025/#2025-03-26" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.ssa.gov/news/advocates/2025/#2025-03-26&quot;}" href="https://www.ssa.gov/news/advocates/2025/#2025-03-26" rel="nofollow noopener" target="_blank">identity verification procedures</a> to updates on the accuracy of SSA <a data-offer-url="https://www.ssa.gov/news/advocates/2025/#2025-03-17" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.ssa.gov/news/advocates/2025/#2025-03-17&quot;}" href="https://www.ssa.gov/news/advocates/2025/#2025-03-17" rel="nofollow noopener" target="_blank">death records</a> (“less than one-third of 1 percent are erroneously reported deaths that need to be corrected,” the agency wrote, in contrast to what <a href="https://www.wired.com/story/elon-musk-doge-social-security-150-year-old-benefits/">Elon Musk</a> claims).</p><p>The letters and press releases were also a crucial communications tool for SSA employees, who used them to stay up on agency news. Since SSA staff cannot sign up for social media on government computers without submitting a special security request, the change could have negative consequences on the ability for employees to do their jobs.</p><p>It could also impact people receiving social security benefits who rely on the letters for information about access benefits. “Do they really expect senior citizens will join this platform?” asked one current employee. “Most managers aren’t even on it. How isn’t this a conflict of interest?” Another staffer added: “This will ensure that the public does not get the information they need to stay up-to-date.”</p><p>Linda Kerr-Davis also did not immediately respond to a request for comment by WIRED.</p><p>“This reporting is misleading. The Social Security Administration is actively communicating with beneficiaries and stakeholders,” says Liz Huston, a White House spokesperson. "There has not been a reduction in workforce. Rather, to improve the delivery of services, staff are being reassigned from regional offices to front-line help – allocating finite resources where they are most needed. President Trump will continue to always protect Social Security.”</p><p>Elon Musk, who is leading the charge to radically reduce the size of the federal workforce on behalf of President Trump, bought X (then Twitter) in October 2022. The platform has for years battled the spread of misinformation. After he purchased the company, Musk fired contract content moderators and shifted content moderation efforts to a crowd-sourced fact-checking tool called Community Notes. In 2023, <a href="https://www.pbs.org/newshour/politics/musks-x-is-the-largest-source-of-disinformation-eu-official-says">an EU official warned</a> the platform was a major source of fake news, based on a commissioned study that reported “Twitter has the highest discoverability" of disinformation.</p><p>The regional office workforce will soon be cut by roughly 87 percent, sources tell WIRED. Regional office staff manage IT support, policy questions, labor relations issues, reasonable accommodations guidance, and public relations. Since February, the SSA has cut 7,000 jobs, according to <a data-offer-url="https://www.washingtonpost.com/politics/2025/04/04/social-security-layoffs-trump-musk/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.washingtonpost.com/politics/2025/04/04/social-security-layoffs-trump-musk/&quot;}" href="https://www.washingtonpost.com/politics/2025/04/04/social-security-layoffs-trump-musk/" rel="nofollow noopener" target="_blank"><em>The Washington Post</em></a>.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>Today, the agency has 547 employees working in the nearly dozen regional offices (previously, the number was closer to 700, but many people have retired, a current employee with knowledge of the staffing numbers says). After the cuts, the number is expected to be closer to 70. “We know that you all depend on these folks to manage your front line, to help with questions,” said Kerr-Davis, who works in the Kansas City regional office. “I'm going to be pretty candid here in sharing that the support will be pretty minimal until we can stand up our skinny regional office.”</p><p>Kerr-Davis acknowledged that the restructuring could limit the agency’s ability to combat fraud, a major goal of Elon Musk’s so-called Department of Government Efficiency. “Won't losing subject matter experts lead directly to fraud, waste, and abuse?” she asked on the call, reading a question from an SSA staffer. “And yes, I mean, we do rely on [their] help … Things are going to break, and they're going to break fast.”</p><p>On the call, Kerr-Davis sounded resigned as she relayed news of the changes. “I know this probably sounds very foreign to you. It did to me as well,” she said. “It’s not what we are used to, but we are in different times now.”</p><p><em>Vittoria Elliott and David Gilbert contributed reporting.</em></p><p><em>This story has been updated with comment from the White House.</em></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The PS3 Licked the Many Cookie (126 pts)]]></title>
            <link>https://darkcephas.github.io/ps3_failed/ps3_failed.html</link>
            <guid>43656279</guid>
            <pubDate>Fri, 11 Apr 2025 17:27:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://darkcephas.github.io/ps3_failed/ps3_failed.html">https://darkcephas.github.io/ps3_failed/ps3_failed.html</a>, See on <a href="https://news.ycombinator.com/item?id=43656279">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    <p>
      This post is inspired by
      <a href="https://raphlinus.github.io/gpu/2025/03/21/good-parallel-computer.html#cell" target="_blank"> I want a
        good parallel computer</a>
    </p>

    <p>
      It is important to understand why the <a href="https://en.wikipedia.org/wiki/PlayStation_3" target="_blank">
        PS3</a> failed. The perspective here was juniorish dev working on simulation and
      rendering in triple-A. I remember less than I knew and knew less than most!
    </p>
    <p><img src="https://darkcephas.github.io/ps3_failed/ps3_og_image.png" alt="OG PS3"></p><p>
      <i>However</i>, what I can provide here is the hindsight of someone who actually developed and shipped titles
      <sup>1</sup> on
      the PS3.
      I wanted the PS3 to succeed. To be more specific; I wanted <a href="https://en.wikipedia.org/wiki/Manycore_processor" target="_blank">Many-Core</a> to succeed.
    </p>
    <p><b>
      The PS3 failed developers because it was an excessively <a href="https://en.wikipedia.org/wiki/Heterogeneous_computing" target="_blank"> heterogenous</a> computer;
    </b>
    and low level heterogeneous compute resists composability.<sup>2</sup></p><h2>
      More like Multicore than Many
    </h2>
    <div><p>
      The primary characteristic of <a href="https://en.wikipedia.org/wiki/Manycore_processor" target="_blank">Many-Core</a> is, by virtue of the name, the high core count. Many-core is simply a tradeoff
      that enables wide parallelism through more explicit  (programmer) control.
      </p><table>
      <tbody><tr>
        <th>CPU</th>
        <th>GPU</th>
        <th>Many</th>
      </tr>
      <tr>
        <td>Few Complex Cores</td>
        <td>Wide SIMD</td>
        <td>Many Simpler Cores</td>
      </tr>
      <tr>
        <td>Low latency, OOO, SuperScalar</td>
        <td>vector instruction pipe, High latency</td>
        <td>RISC-like, scalar</td>
      </tr>
      <tr>
        <td>Cached and Coherency Protocol</td>
        <td>Fences, flushes, incoherence</td>
        <td>Message passing, local storage, DMA</td>
      </tr>
      <tr>
        <td>Explicit coarse synchronization</td>
        <td>Implicit scheduling</td>
        <td>Explicit fine synchronization</td>
      </tr>
    </tbody></table>
    <p>
    


    At first glance, the SPEs of the PS3 fit the bill. They <i>seem</i> to have all the characteristics of Many-Core.
    The
    problem is that most important characteristic, <i>that there is many cores</i>, is significantly lacking.
    </p><p>
    
    <img src="https://darkcephas.github.io/ps3_failed/ps3_hetrogenous_image.png" alt="PS3 heterogeneous diagram">
    First off you didnt get the full 8 SPEs as a (game) developer. Out of the 8 SPEs one was disabled due to die yield
    and the
    OS got a core and a half. While this changed with updates one only really got 5-6 SPEs to work with. The Xbox360
    in
    contrast had what amounted to 3 PPEs (2 more). So the Cell really featured at most 3 more (<a href="#local_memory_id">difficult to use</a>) cores
    than the Xbox360.
    </p></div>

    <h2>
      Computationally Weak Components
    </h2>

    <p>
      The claim from wiki is a single SPE has 25 GFlops and the <a href="https://en.wikipedia.org/wiki/RSX_Reality_Synthesizer" target="_blank"> PS3 GPU</a> has 192 GFlops.<b> If
        you
        absolutely maxed out your SPE
        usage you would still not even be close to the power of the underpowered PS3 GPU. </b> For contrast the Xbox360
      gpu had
      240
      GFlops. The GPU of the PS3 has separate Vertex and Pixel shading. In contrast, the XBox360 was shared
      computational resources so it could load balance between heavy vertex shading vs heavy pixel shading. (Examples
      here would be <a href="https://en.wikipedia.org/wiki/Skeletal_animation" target="_blank">character skinning</a>
      vs UI rendering)
    </p>


    <p><img src="https://darkcephas.github.io/ps3_failed/ps3_vs_xbox.png" alt="PS3 heterogeneous diagram"></p><p>
      As a game developer these Flops numbers reflect the experience of developing on these respective platforms. This
      was particularly noticeable in something like post processing where the demands of the vertex unit are very low
      (large quads).
    </p>

    <p>
      Due to the weakness of the GPU vertex unit developers would use the SPEs to do skinning.
      The pixel shading unit did not have constants. So one would also have to do shader patching on the SPEs before
      these
      programs could be sent to the GPU. All of these things require synchronization between the CPU, SPE and GPU and
      interact with workload balancing. In retrospect I also assume that dynamic branching in the shader was either
      impossible or prohibitive so this is why everyone did excessive shader permutations. This means 10s of megabytes
      of shaders. Again contrast this with the XBOX360 which supported wave
      operations <sup>3</sup> and I even used this feature back in the day. <b> Because each component of the PS3 is
        weak on its own they all must be employed in concert to compete with (the) less heterogeneous platforms. </b>
    </p>

    <h2>
      Computer Not Super
    </h2>

    <p>
      While the Cell could behave more like a supercomputer I saw it mostly used more like generic GPU compute. I never
      saw production code that did anything but dispatch N jobs from the PPE. I never saw direct inter SPE communication
      even though I recall such a thing was possible (mailboxes). This is similar to how GPU inter workgroup workloads
      are more rare and difficult.
    </p>

    <p>
      The hetrogenous nature was everywhere. Even the PPE was quite different from an SPE. The SPEs had only vector
      registers; the PPE had fp, gp, and vector
      registers. Is this really bad? No<sup>4</sup>, but it makes everything more heterogeneous and therefore more
      complex. Getting
      maximum performance out of these SPE units means that you were likely doing async DMAs while also doing compute
      work. <b>These nuances could be a fun challenge for a top programmer but ends of being more of an obstacle to
        development for game studios. </b>
    </p>

    <h2>
      Sharp Edges
    </h2>

    <p>
      The PS3 had 512 Mb total memory but 256 MB was dedicated to graphics and only had REDACTED Mb/s access from the
      CPU. So
      this means in addition to the 256 MB purely for graphics you would also have to dedicate system memory for
      anything that was written to and from the GPU. The point here is inflexibility and heterogeneous nature.
    </p>

    <p>
      The PS3 had cool features but these were never general purpose and could only be exploited by careful attention to
      detail and sometimes significant engine changes. I recall using depth bounds for screen space shadowing and
      one could probably use it for a few other similar gpu techniques (lighting). There was also the alluring double z
      writes which is a one-off for depth maps if you dont actually use a pixel shader. I don't recall all the edges,
      but they were sharp and it meant performance cliffs if one strayed off them. The next section covers the sharpest
      edge of them all.
    </p>

    <h2 id="local_memory_id">
      The Challenge of Local memory
    </h2>

    <p>
      Of course the challenge that everyone knows about the SPEs is the constraint of memory access to local memory. You
      got 256Kb but in reality once you factored in stack and program you were probably down to 128Kb. This
      computational model is far more restrictive than even modern GPU compute where at least there you can access
      storage buffers directly.
    </p>

    <p>
      <b>Most code and algorithms cannot be trivially ported to the SPE. </b>
      C++ virtual functions and methods will not work out of the box. C++ encourages dynamic allocation of objects but
      these can point to anywhere in main memory. You would
      need to map pointer addresses from PPE to SPE to even attempt running a normal c++ program on the SPE. Also null
      (address 0x0) points to the start of local memory and is not a segfault to load from it.
    </p>

    <p>
      So, instead of running generic code on the SPE, what developers did was write handcrafted SPE friendly code for
      heavy
      but parallelizable parts of their engine. <b>With enough talent and investment you can eke out the full compute
        power of the PS3.<sup>5</sup> </b> Of course this is maybe easier as a <a href="https://en.wikipedia.org/wiki/Video_game_developer#Types" target="_blank">first party developer</a> as you
      can at least
      focus on this exotic hardware and craft your engine and game features around the type compute available. This is
      why <a href="https://en.wikipedia.org/wiki/Uncharted_3:_Drake%27s_Deception" target="_blank">Naughty Dog</a>
      famously came so close to showing us the full potential of the console.

    </p><figure>
      <figcaption>
        <a href="https://www.mobygames.com/game/53611/uncharted-3-drakes-deception/screenshots/ps3/531831/" target="_blank">Uncharted 3: Mobygames image</a>
      </figcaption>
      <img src="https://cdn.mobygames.com/screenshots/4207546-uncharted-3-drakes-deception-playstation-3-is-that-a-well-in-the.jpg" alt="Uncharted 3 PS3 credit mobygames">
    </figure>
    

    <h2>
      What could have been
    </h2>

    <p>
      Had the PS3 been what was originally designed it would have been a much more exotic but much less heterogeneous
      machine.
    </p>

    <p>
      The original design was approximately 4 Cell processors with high frequencies. Perhaps massaging this design would
      have led to very homogenous high performance Many-Core architecture. At more than 1 TFlop of general purpose
      compute it would have been a beast and not a gnarly beast but a sleek smooth uniform tiger.
    </p>
    <p>
      One has to actually look at the PS3 as the
      <a href="https://devblogs.microsoft.com/oldnewthing/20091201-00/?p=15843" target="_blank">licked cookie</a>
      <sup>6</sup> of
      Many-Core designs. This half-baked, half-hearted attempt became synonymous with the failure of Many-Core. <b>
        I
        used to think that PS3 set back Many-Core for decades, now I wonder if it simply killed it forever. </b>
    </p>



    <h2>
      Refs
    </h2>

    <p>
      <sup> 1 </sup> <a href="https://www.mobygames.com/person/516875/peter-mcneeley/credits/" target="_blank"> Some of
        the titles I have worked on. </a>
    </p>

    <p>
      <sup> 2 </sup> I will not provide a proof or reference but the mathematical issue is that the space is not covered
      uniformly. This low level composability problem is often seen instruction selection when writing assembly.
    </p>

    <p>
      <sup> 3 </sup>The XBox360 gpu had wave operations like ifany/ifall that are similar to modern control flow
      subgroup operations.
    </p>

    <p>
      <sup> 4 </sup> The fact that it was only vectors on the SPEs was present to the programmer due to loads/stores
      having to also be vector aligned
    </p>

    <p>
      <sup> 5 </sup> <a href="https://www.neogaf.com/threads/ps3-games-list-spe-usages.184843/" target="_blank"> PS3
        SPE usage</a> : it is clear that some games had higher utilization than others.
    </p>

    <p>
      <sup> 6 </sup>I am not sure my usage fits Raymond's narrow specifications.
    </p>


    <p>
      <a href="https://classic.copetti.org/writings/consoles/playstation-3/" target="_blank"> classic.copetti.org </a>
      Source for images and some technical specifications.
    </p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Datastar: Web Framework for the Future? (190 pts)]]></title>
            <link>https://chrismalek.me/posts/data-star-first-impressions/</link>
            <guid>43655914</guid>
            <pubDate>Fri, 11 Apr 2025 16:53:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chrismalek.me/posts/data-star-first-impressions/">https://chrismalek.me/posts/data-star-first-impressions/</a>, See on <a href="https://news.ycombinator.com/item?id=43655914">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="tldr"><p><a href="#tldr">#
</a>TLDR</p></h2><p><a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>is a new <a href="https://hypermedia.systems/" target="_blank" rel="noopener noreferrer">hypermedia
</a>framework that makes building real-time web applications simpler and more efficient. It prioritizes server-side logic, uses “signals” for automatic UI updates, and leverages Server-Sent Events for lightning-fast performance. If you’re looking for a streamlined alternative to traditional JavaScript frameworks or HTMX, <a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>is worth exploring.</p><p>However, it requires that you approach web development with a fresh perspective, embracing server-driven architecture and reactive programming.</p><h2 id="introduction"><p><a href="#introduction">#
</a>Introduction</p></h2><p>I’ve been diving into <a href="https://hypermedia.systems/" target="_blank" rel="noopener noreferrer">hypermedia
</a>lately looking at frameworks and libraries to build a new product and to help quickly create proof of concepts and web tools for clients.</p><p>HTMX at the time of writing was getting basically all the attention in the Hypermedia world. It demos really well and the examples are great. However, this article is NOT about HTMX.</p><p>I believe hypermedia and HTMX offer a promising direction, but when I tried to develop a new product using HTMX, I felt stuck due to challenges in figuring out the project structure, the HTML structure combined with excessive HTMX tags and realizing HTMX cannot handle the front-end interactively for which you have to bring in something like AlpineJS. (Did I mention I hate javascript?). HTMX is cool but I think before you start a new project with it you might want to look at <a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>as well.</p><p>I had looked at Datastar in the past while evaluating HTMX but I did not grasp its potential over HTMX until I took a second look at started to feel some HTMX pain. Your results may vary.</p><h3 id="my-background"><p><a href="#my-background">##
</a>My Background</p></h3><p>First let’s understand my biased perspective. Everyone’s background is different and I think it is important to understand where I am coming from.</p><ul><li>I am an expert in the PeopleSoft ERP platform creating “enterprise” applications<ul><li>PeopleSoft is a large ERP system that is used by many large organizations. It is a very powerful but a bit dated. Since it is the hub of most corporate data it is not going away anytime soon but SAAS apps are slowly chipping away at it.</li><li>I spent most of my time creating business CRUD applications that are used by business users and students.</li><li>These are always “config” driven because PeopleSoft makes it easy to create setup/config tables and GUIs to manage the data. Think of PeopleSoft has one big ball of “feature flags” in the form of setup tables.</li><li>PeopleSoft completely abstracts the front-end away. You never worry about the front-end. The back-end controls the front-end. PeopleSoft was built 30 years ago and it’s meta-data architecture allowed the porting from a client-server architecture to a web architecture. Developers can deploy applications and never worry about JavaScript or even HTML and CSS at all. This is amazing.<ul><li>This has kept me away from the front-end for most of my career. I have always been a back-end developer <strong>but with PeopleSoft a back-end developer can easily deploy front-end user-facing applications.</strong> So I am used to handling and delivering solutions to clients that are 100% server-side but also user facing. You don’t need a front-end developer to deploy a PeopleSoft application.</li></ul></li><li>These applications contain some of the most sensitive corporate data from payroll, biographic data, student data, financial data, etc. You cannot “move fast and break things” in these applications. You have to be very careful with the data and the business logic.</li><li>In these applications, you cannot trust code running in the browser and your backend code must protect access to the data.</li></ul></li><li>I use Go for most of my side projects. I like the simplicity, speed and type safety of Go.</li></ul><h2 id="what-am-i-looking-for"><p><a href="#what-am-i-looking-for">#
</a>What Am I looking for?</p></h2><p>I have been looking for a framework or a set of libraries to build a new product that is modern and efficient. I had been looking at Hypermedia to do this.</p><p>My rough requirements are:</p><ul><li>A modern web framework that is efficient and can handle real-time updates.</li><li>A framework that can handle the front-end and the back-end but rely 100% on the back-end where possible.</li><li>A framework that can handle the front-end state and interactions.</li><li>Simplicity, Simplicity, Simplicity</li><li>A framework where I can use Go on the back-end.</li><li>Rapid development and prototyping</li><li>Avoid Javascript and NPM as much as possible or totally from a development perspective.<ul><li>Javascript makes me queezy 🤢 and every time I see NPM I get a headache 😵‍💫 and my instincts tell me to run away. I am not a fan of the JavaScript ecosystem.</li></ul></li><li>A “stable” platform that I can deploy something and just have it work for years without me worrying about it.</li><li>Rapid deployment to the cloud like Fly.io.</li><li>Freedom to use any CSS framework I want because those seem to change with the wind.</li><li>Avoid the split-team, JSON API approach of modern web apps where frontend and backend are disjointed.</li></ul><p>Previously I was looking at <a href="https://www.phoenixframework.org/" target="_blank" rel="noopener noreferrer">Phoenix
</a>but did not want to shift to another language. If you google “hypermedia” you will see a lot of articles about HTMX and it seems GitHub is full of projects using it. I think it is the most popular hypermedia library at the moment. I had looked hard at the <a href="https://github.com/jfyne/live" target="_blank" rel="noopener noreferrer">Live Golang Library
</a>.</p><h3 id="my-first-impressions-of-htmx"><p><a href="#my-first-impressions-of-htmx">##
</a>My First Impressions of HTMX</p></h3><p>Of course, I looked at HTMX and started to get excited about its potential. So I started to develop a real application after deploying some fairly simple “web tools” that my clients use for some one-off tasks.</p><p>I created some <strong>simple</strong> tools for myself and clients. I did not need any front-end state or interactions. I was just updating the UI with new HTML fragments from the server mostly as a result of field change or clicks. <strong>In these simple cases, HTMX handles those well.</strong></p><p>In my HTMX prototyping of a <strong>more complex</strong> application, the HTML code became a mess with HTMX tags for some parts that were non-trivial. I found myself struggling to understand the project structure and myriad of HTMX tags and how to manage the front-end and the back-end. I also needed some front-end functionality and state and HTMX is NOT designed to handle that. With HTMX you have to import AlpineJS and I broke out in hives because I hate JavaScript 😢.</p><p><strong>It was when I got to the more complex parts of the application that I felt HTMX was sort of getting in the way.</strong> I was starting to a get a huge lint ball building up. My intuition told me I was headed in the wrong direction. I hit the pause button and started to look for alternatives because I felt I was working too hard and the code was getting too complex.</p><h2 id="revisiting-datastar-and-a-turning-point"><p><a href="#revisiting-datastar-and-a-turning-point">#
</a>Revisiting Datastar and a Turning Point</p></h2><p>I was busy working at client sites and I had put a pause on my research for HTMX alterntives or some non-trival TODO application examples. Then on my YouTube feed one day, I saw an <a href="https://www.youtube.com/watch?v=HbTFlUqELVc" target="_blank" rel="noopener noreferrer">interview with creator of Datastar
</a>, and it had me look again. If I had not had some experience with HTMX I would not have “been ready” for that interview and understood some of the points he was making.</p><p>Here are some AI Generated main points of the interview. The ones I put in bold are the ones that got me to look again at Datastar:</p><ol><li>Delaney explores hypermedia beyond HTMX, focusing on real-time applications.</li><li>HTMX is seen as solving 1999’s hypermedia issues, but not pushing current boundaries.</li><li>Server-sent events (SSE) offer efficient real-time updates, surpassing traditional AJAX.</li><li><strong>Datastar, a modular alternative to HTMX, aims to simplify code and enhance performance.</strong></li><li>Game development’s efficiency can inspire web development’s speed and capability.</li><li><strong>SSE enables microsecond updates, challenging the limitations of polling in HTMX.</strong></li><li>The event-driven architecture is vital for scalable, efficient, real-time applications.</li><li><strong>Datastar’s declarative approach reduces complexity compared to HTMX.</strong></li><li><strong>Emphasizing server control, SSE can optimize and simplify web interactions.</strong></li><li>Delaney argues for a paradigm shift towards smarter use of hypermedia technology.</li></ol><p>I had looked at the <a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>documention previously when I was evaluating HTMX. I probably found it from some discussions on Reddit. However, I previously struggled to grasp its purpose and found its documentation confusing and dense. <strong>Honestly, I think it was just over my head when I first read the Datastar docs</strong>. I was not ready to understand it. It claims to be a better alternative to HTMX and AlpineJS. Another thing that turned me off was the project did not have a huge amount of contributors. <strong>However, after watching the interview from the Datastar author, I realized he might have some serious insights and I should give it another look. He is also a contributor to HTMX.</strong></p><p>The two things that I originally found confusing about Datastar were:</p><ul><li>Use of SSE (Server-Sent Events) for real-time updates.<ul><li>I had no experience with SSE and didn’t understand how it could be used in a real-time application. I had some vague memories from reading about how they did not scale or they suffered from issues with the connection being dropped. I had not looked at them in years. I have zero experience with them.</li></ul></li><li>The concept of “signals” for reactive programming.<ul><li>I did not realize how this can drastically simplify your code.</li><li>The term <code>signal</code> was confusing and I just did NOT get it on the first read. I had no experience with reactive programming. It turns out <code>signals</code> can help me avoid a lot of front-end code and state management but I did not realize that at first.</li></ul></li></ul><p>That interview had me look at the <a href="https://data-star.dev/guide/getting_started" target="_blank" rel="noopener noreferrer">documentation
</a><strong>again</strong> which had undergone some updates. After I spent some time reading and re-reading the documentation and looking at the <a href="https://data-star.dev/examples/click_to_edit" target="_blank" rel="noopener noreferrer">examples
</a>then trying some “hello world” examples on my own then the light bulb went off.</p><p><strong>Datastar might be the library I had been looking for. It looked promising after I started to peel off some onion layers.</strong></p><h2 id="what-is-datastar"><p><a href="#what-is-datastar">#
</a>What is Datastar?</p></h2><p>It seems the author <a href="https://github.com/delaneyj" target="_blank" rel="noopener noreferrer">delaneyj
</a>is taking some base primitives of HTMX and Hypermedia and making it easier to use and Datastar is his answer. Those are the claims at least. At the time of writing, I am still creating my first application with it. I am not ready to give a full review. But I am excited about the potential.</p><p>It seems that the Author is also a big fan of Go which helps me because any examples and libraries will have Go examples.</p><p>First let me clarify. I am not an expert in Datastar. I am just starting to learn it. <strong>I am also <em>NOT</em> a contributor or author to Datastar in any way.</strong> I am NOT taking any credit. I just want to spread the word about it as I don’t think it is getting the attention it deserves.</p><p>From my current understanding of Datastar, there are some key concepts that form the foundation of Datastar:</p><ul><li><strong>Signals</strong>: Reactive programming primitives that automatically update the UI when data changes.<ul><li>We will explore what the heck these are shortly.</li><li>You as the developer will decide what signals you want and put some special tags on the HTML elements that will trigger the server to send back updates to the signals. This will be associated with some sort of server state.</li></ul></li><li><strong>Server-Sent Events (SSE)</strong>: Efficient data streaming for real-time updates and page changes.<ul><li>These are just the repsonses sent back from the server to the client. They are just text over HTTP and are generally HTML fragments that update the UI. You can do many other things but let’s not get ahead of ourselves.</li></ul></li><li><strong>Actions</strong>: HTTP verbs (GET, POST, PUT, DELETE) that trigger server-side logic and UI updates.<ul><li>These are the HTML tags that you put on HTML elements that trigger the server to send back updates to the signals or new HTML fragments that update the UI.</li></ul></li><li><strong>Fragments</strong>: HTML snippets that update the UI based on server-side logic and user interactions.<ul><li>Your server side has to be structured to send back these HTML fragments that will update the UI.</li></ul></li></ul><p>You include the Datastar JavaScript library in your HTML and then you can start to use these concepts to build your application. You will also need to structure your server to handle the SSE requests and the GET/POST/PUT/DELETE requests.</p><p>Your backend choice does not matter.</p><h3 id="comparing-to-htmx"><p><a href="#comparing-to-htmx">##
</a>Comparing to HTMX</p></h3><p>I will mostly compare it to HTMX because that is the current perspective I have and HTMX is getting a ton of ink and attention.</p><ul><li><p>With HTMX to build a real application you need:</p><ul><li>Front End<ul><li>HTML</li><li>HTMX JavaScript and Tags to handle the triggers to backend updates</li><li><strong>AlpineJS</strong> (or other JavaScript framework) to handle front end logic and interactions and state.</li></ul></li><li>Backend<ul><li>HTML fragments that are that is dependent on your UX</li><li>Routes and Code to handle the GET/POST/PUT/DELETE</li></ul></li></ul></li><li><p>With Datastar to build a real application you need:</p><ul><li>Front End<ul><li>HTML</li><li>Datastar JavaScript to handle the triggers to backend updates and all the UI state and interactions.</li></ul></li><li>Backend<ul><li>HTML fragments that are dependent on your UX</li><li>Routes and Code to handle the GET/POST/PUT/DELETE</li><li>SSE routes to handle the updates to the signals</li></ul></li></ul></li></ul><p>So just from looking at the dependencies, Datastar gives you a single JavaScript library that can handle state on the front-end (signals) and making HTML attributes perform actions (GET/POST/PUT/DELETE) and handle the updates from the server. The server is 100% responsible for generating the HTML fragments and the updates to the signals.</p><ul><li>Datastar provides the benefits of HTMX and AlpineJS under a single library. You get the best of both worlds.</li><li>You can ditch much of what a front-end framework like React or Vue.js would provide and use Datastar. (Bold claim)</li><li>Your server is 100% responsible for generating HTML snippets and templates very similar to what you would do with HTMX.</li><li>It is back-end agnostic and can be used with Go, Node.js, PHP, etc. I prefer Go but it does NOT matter.</li><li>It relies heavily on Server-Sent Events (SSE) for real-time updates but after you pull the cover off of SSE it is just text HTTP responses with a some different headers.</li></ul><h3 id="what-is-a-signal-and-what-is-reactive-programming"><p><a href="#what-is-a-signal-and-what-is-reactive-programming">##
</a>What is a “Signal” and what is “Reactive Programming”?</p></h3><p>I think one of the biggest things that I missed in my initial read of the docs was the concept of a <code>signal</code>. This was not invented by Datastar and I believe is implemented in Datastar using a library from another developer.</p><p>I’m sure I’m just behind the curve and you may already know what a <code>signal</code>. I’m going to try to explain it. <strong>Getting an fundamental understanding of what a signal represents and can do for you is what give Datastar its power.</strong> It makes creating user interfaces much simpler and more maintainable.</p><p>Before we talk about signals, let’s talk about <code>reactive programming</code> because they are related. Reactive programming makes your application code automatically “react” to changes in data and propagate those changes automatically through the application. Instead of telling the computer how to do things step-by-step, you tell it what should happen when data changes and the computer figures out how to do it. It allows you to define a relationship between data sources and data consumers. When the data source changes, the data consumer is automatically updated. In a non-reactive system, you would have to manually update the data consumer when the data source changes. This is generally in the form of “on-change” Javascript events and functions to bind all the data and UI together.</p><p><em>Ok, Ok that is still too much jargon!!!!</em></p><h3 id="understanding-reactive-programming-via-spreadsheets"><p><a href="#understanding-reactive-programming-via-spreadsheets">##
</a>Understanding Reactive Programming via Spreadsheets</p></h3><p>I think the best way to understand reactive programming is to think about a spreadsheet.</p><ul><li>A spreadsheet application like Microsoft Excel or Google Sheets is the best example here.<ul><li>If you have any experience working with a complex spreadsheet in the engineering or financial realms, you have already worked with reactive programming.</li><li>I am NOT talking about using excel as a CSV viewer.</li><li>I am talking about using it as a tool to do calculations, and you “build up layers” of intermediate calculations to get to a final result.<ul><li>Very often you have intermediate calculations you need for other calculations or just doing checks for mistakes. This leads to a series of calculations that are dependent on each other. This is represented in formulas in spreadsheet cells that reference other cells. For complex calculations, you can have a “pipeline” or spiderweb of calculations that are dependent on each other.</li><li>I have an engineering degree and worked for engineering firms while in college and after college, I have used Excel for some very complex calculations and engineering modeling for HVAC cooling and plumbing systems. Excel is an great tool for this.</li></ul></li></ul></li></ul><p><strong>The amazing thing about Spreadsheets is that it is reactive.</strong> When you change a value in a cell, all the dependent cells are automatically updated. This is the essence of reactive programming. In you define the relationships between the “cells” or data elements and the underlying framework progates changes when data changes. This is very powerful and can simplify your code and make it more maintainable.</p><p>Here is a rough schematic of that where the arrows represent the dependencies between cells:</p><p><img alt="diagram" id="kroki-1" src="https://chrismalek.me/_4184341436229191900.svg"></p><p><strong>Datastar gives you some of these some of these same capabilities in a web application via the concept of a <code>signal</code>.</strong></p><p>I conceptually think of a Datastar <code>signal</code> as a link between “cell” or HTML elements. I did not make this connection at first.</p><ul><li>In Datastar, signals are used to update the UI when the data changes.</li><li>It can also trigger back end posts/gets/puts/deletes.</li></ul><p><code>Signals</code> are part of the glue of a Datastar application. You place <code>signals</code> on the page and the UI can be automatically updated. See the <a href="https://data-star.dev/examples/model_binding" target="_blank" rel="noopener noreferrer">Model Binding Example
</a>and the <a href="https://data-star.dev/examples/signals_changed" target="_blank" rel="noopener noreferrer">Signals change example</a></p><p>The server can send down updates to the “signals” (spreadsheet cells contents) or even send down a new HTML fragment that update the UI. In spreadsheet terms, this would be like adding new cells, charts, etc from the server.</p><p>There is more you can do with signals. If you read the docs and still don’t understand, I would re-read them. I had to read them a few times to get it.</p><h2 id="actions---getspostsputsdeletes"><p><a href="#actions---getspostsputsdeletes">#
</a>Actions - GETS/POSTS/PUTS/DELETES</p></h2><p>When/if you start looking at HTMX you see that you can trigger <a href="https://data-star.dev/reference/action_plugins" target="_blank" rel="noopener noreferrer">actions
</a>on the server with a GET/POST/PUT/DELETE. This is the same in Datastar. You can trigger these actions with a signal.</p><p>HTMX and Datastar both trigger this server request to the server to update or get updated UI elements. The difference is that Datastar uses SSE to get the updates back to the client. I was scratching my head on this until I started reading more about it and looking at the examples.</p><p>SSE is very simple. It is just text which I maybe had read before but since I had no real experience doing development work I did not understand. I work daily with HTTP web services and have a firm grasp on how HTTP works.</p><p>You can add some “tags” to the HTML elements (button on click, input on change, etc) and then when the user interacts with the page, the server can send down updates to the signals.</p><p>From the <a href="https://data-star.dev/examples/click_to_edit" target="_blank" rel="noopener noreferrer">Datastar examples
</a>:</p><div><pre tabindex="0"><code data-lang="html"><span><span>
</span></span><span><span><span>&lt;</span><span>div</span> <span>id</span><span>=</span><span>"contact_1"</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>label</span><span>&gt;</span>First Name: John<span>&lt;/</span><span>label</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>label</span><span>&gt;</span>Last Name: Doe<span>&lt;/</span><span>label</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>label</span><span>&gt;</span>Email: joe@blow.com<span>&lt;/</span><span>label</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>div</span><span>&gt;</span>
</span></span><span><span>    <span>&lt;</span><span>button</span> <span>data-on-click</span><span>=</span><span>"@get('/examples/click_to_edit/contact/1/edit')"</span><span>&gt;</span>
</span></span><span><span>      Edit
</span></span><span><span>    <span>&lt;/</span><span>button</span><span>&gt;</span>
</span></span><span><span>    <span>&lt;</span><span>button</span> <span>data-on-click</span><span>=</span><span>"@get('/examples/click_to_edit/contact/1/reset')"</span><span>&gt;</span>
</span></span><span><span>      Reset
</span></span><span><span>    <span>&lt;/</span><span>button</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;/</span><span>div</span><span>&gt;</span>
</span></span><span><span><span>&lt;/</span><span>div</span><span>&gt;</span>
</span></span></code></pre></div><p>The Datastar Javascript library running in the browser connects to the server with a connection that is kept open (until the server closes it). The server can send down updates to the signals. The server can also send down new HTML fragments that update the UI.</p><p>Datastar and HTMX have a similar concept but Datastar is built out of the box to handle updating <strong>any</strong> part of the page using the “ID” of the element. This is possible in HTMX but requires some extra work/tags.</p><p><strong>Basically, the Datastar “actions” can do anything that HTMX can do.</strong></p><h3 id="understanding-sse---it-is-just-text"><p><a href="#understanding-sse---it-is-just-text">##
</a>Understanding SSE - It is just text</p></h3><p>First let’s quickly understand SSE. At we will see SSE is just text. It is not some magical protocol. It is just text over HTTP with some special headers and browsers support it out of the box.</p><p>Datastar leverages SSE and the Javascript library expects and interprets the responses from the server in a certain way. The server can send down updates to the signals or new HTML fragments that will update the UI. The server can also close the connection when it is done.</p><p>For the authoritative source, refer to the <a href="https://data-star.dev/reference/sse_events" target="_blank" rel="noopener noreferrer">Datastar SEE Reference</a></p><p>In Datastar, you add some “tags” to the HTML elements (button “on click”, input “on change”, etc) which causes the browser to send a request to the server to open an SSE connection. That connection stays open until the server closes it. The server can send down updates to the signals or new HTML fragments that will update the UI.</p><p>For most CRUD applications you will be sending down HTML fragments that will update the UI. Then close the connection. If you were making some sort of real-time dashboard you would keep the connection open and send down updates to the UI as the server finds changes in the data. The server might be monitoring a database or some other data source and sending down updates to the UI as they change.</p><p>Let’s first look at the simplest case that is most like the HTMX examples which is more inline with CRUD applications.</p><p>You will have some attribute on an HTML element that will trigger an SSE call to the server. For simplicity, let’s say it is a button click.</p><div><pre tabindex="0"><code data-lang="html"><span><span><span>&lt;</span><span>button</span> <span>id</span><span>=</span><span>"button1"</span> <span>data-on-click</span><span>=</span><span>"@get('/example/buttonpress')"</span><span>&gt;</span>
</span></span><span><span>  Click Me
</span></span><span><span><span>&lt;/</span><span>button</span><span>&gt;</span>
</span></span></code></pre></div><p>That triggers an HTTP call by the browser with the SSE header of <code>Accept: text/event-stream</code> to the server.</p><div><pre tabindex="0"><code data-lang="http"><span><span><span>GET</span> <span>/example/buttonpress</span> <span>HTTP</span><span>/</span><span>1.1</span>
</span></span><span><span><span>Host</span><span>:</span> <span>example.com</span>
</span></span><span><span><span>Accept</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>Cache-Control</span><span>:</span> <span>no-cache</span>
</span></span></code></pre></div><p>There are options to send extra data and Datastar will automatically send along any local signals on the page. This automatic signal sending is a feature of Datastar that is not in HTMX and I did not realize how powerful it can be. In the HTTP example above I am NOT showing any signals because they are not needed for this simple example.</p><ul><li>Here the browser will keep the connection open and listen for updates from the server.</li><li>The server can send down updates to the <code>signals</code> or new HTML fragments that will update the UI.<ul><li>In this example, we will focus on HTML Fragments</li><li>The server sends back a response with the <code>event</code> of <code>Datastar-merge-fragments</code> and the <code>data</code> of the new HTML fragment that will update the UI.<ul><li>In this case, the server “knows” that its only job is to send back some HTML when the button in pressed and close the connection.</li></ul></li><li>The HTTP response will look like this:</li></ul></li></ul><div><pre tabindex="0"><code data-lang="http"><span><span><span>HTTP</span><span>/</span><span>1.1</span> <span>200</span> <span>OK</span>
</span></span><span><span><span>Content-Type</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>Cache-Control</span><span>:</span> <span>no-cache</span>
</span></span><span><span><span>Connection</span><span>:</span> <span>close</span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>data: fragments &lt;div id="button1"&gt;Button Pressed and removed.&lt;/div&gt;
</span></span></code></pre></div><p>In the example above, the server sends back a new HTML fragment that will replace the button that was clicked. The Datastar JavaScript running in the browser will match the <code>ID</code> of the element and replace it with the new HTML fragment.</p><p>The server could have sent several fragments to update any part of the page. HTMX can do this but I think Datastar is built out of the box to handle this.</p><ul><li>What is an example of a case where the SSE connection is kept open and the server sends down updates to the signals?<ul><li>Imagine a case, where you have a web page that is tracking the location of a food delivery vehicle.</li><li>The server is monitoring the GPS location of the vehicle and sending down updates to the signals to update the location of the truck on the map. The server can also send down new HTML fragments that update the UI.</li><li>The browser keeps an SSE connection open and the server can send down updates.</li><li>The HTTP response from the server will look like the following where there is some time elapsed between each of those <code>event</code> and <code>data</code> pairs.</li></ul></li></ul><div><pre tabindex="0"><code data-lang="http"><span><span><span>HTTP</span><span>/</span><span>1.1</span> <span>200</span> <span>OK</span>
</span></span><span><span><span>Content-Type</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>Cache-Control</span><span>:</span> <span>no-cache</span>
</span></span><span><span><span>Connection</span><span>:</span> <span>keep-alive</span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>data: fragments &lt;div id="truckstatus"&gt;The Truck is under a bridge&lt;/div&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>data: fragments &lt;div id="truckstatus"&gt;The truck is at Jersey Mikes and the driver is enjoying a sandwich&lt;/div&gt;
</span></span></code></pre></div><p>In HTMX you would have to implement polling which works but is not as efficient as SSE.</p><p>If you look at the <a href="https://data-star.dev/examples/progress_bar" target="_blank" rel="noopener noreferrer">Progress Bar Example
</a>you can see that there is an SEE endpoint there like this:</p><div><pre tabindex="0"><code data-lang="http"><span><span><span>GET https://data-star.dev/examples/progress_bar/data
</span></span></span></code></pre></div><p>It sends back a stream of updates to both the title and <code>div</code> with <code>id="progress_bar"</code>. As the browser receives the updates, it updates the UI in real-time. The browser keeps an SSE connection open and the server can send down updates to the signals. The server can also send down new HTML fragments that update the UI.</p><div><pre tabindex="0"><code data-lang="http"><span><span><span>HTTP</span><span>/</span><span>1.1</span> <span>200</span> <span>OK</span>
</span></span><span><span><span>cache-control</span><span>:</span> <span>no-cache</span>
</span></span><span><span><span>connection</span><span>:</span> <span>keep-alive</span>
</span></span><span><span><span>content-type</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>date</span><span>:</span> <span>Thu, 16 Jan 2025 05:36:26 GMT</span>
</span></span><span><span><span>fly-request-id</span><span>:</span> <span>01JHPSSQHJMTZ82JYZXE5T43BM-sjc</span>
</span></span><span><span><span>server</span><span>:</span> <span>Fly/3f202fc64 (2025-01-13)</span>
</span></span><span><span><span>transfer-encoding</span><span>:</span> <span>chunked</span>
</span></span><span><span><span>via</span><span>:</span> <span>1.1 fly.io</span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>retry: 1000
</span></span><span><span>data: fragments &lt;div id="progress_bar"&gt;&lt;svg width="200" height="200" viewbox="-25 -25 250 250" style="transform: rotate(-90deg)"&gt;&lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#e0e0e0" stroke-width="16px" stroke-dasharray="565.48px" stroke-dashoffset="565px"&gt;&lt;/circle&gt; &lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#6bdba7" stroke-width="16px" stroke-linecap="round" stroke-dashoffset="559px" stroke-dasharray="565.48px"&gt;&lt;/circle&gt; &lt;text x="44px" y="115px" fill="#6bdba7" font-size="52px" font-weight="bold" style="transform:rotate(90deg) translate(0px, -196px)"&gt;1%&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>retry: 1000
</span></span><span><span>data: selector title
</span></span><span><span>data: fragments &lt;title&gt;1%&lt;/title&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>retry: 1000
</span></span><span><span>data: fragments &lt;div id="progress_bar"&gt;&lt;svg width="200" height="200" viewbox="-25 -25 250 250" style="transform: rotate(-90deg)"&gt;&lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#e0e0e0" stroke-width="16px" stroke-dasharray="565.48px" stroke-dashoffset="565px"&gt;&lt;/circle&gt; &lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#6bdba7" stroke-width="16px" stroke-linecap="round" stroke-dashoffset="554px" stroke-dasharray="565.48px"&gt;&lt;/circle&gt; &lt;text x="44px" y="115px" fill="#6bdba7" font-size="52px" font-weight="bold" style="transform:rotate(90deg) translate(0px, -196px)"&gt;2%&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>...
</span></span></code></pre></div><h3 id="example-of-a-datastar-application"><p><a href="#example-of-a-datastar-application">##
</a>Example of a Datastar Application</p></h3><p>Let’s take a look at a high level of how a Datastar application might be structured. This is a very high level and I am still learning Datastar so don’t nitpick me if there are mistakes here.</p><p>Let’s imagine you have a page that allows you to track your food delivery.</p><ul><li>The driver has some application in his phone that reports up to a central server where they are.</li><li>There is a web page I can go to that will allow me to track the driver up until the order goes into “delivered” status.</li><li>That Datastar application might look like this:<ul><li>The browser sends a GET request to the server to get the initial page at <code>https://feedme.now/delivery/driver/location</code></li><li>The server sends back the full page HTML template.<ul><li>This page has some specific HTML tags that presents a button that allows you to start the status updates of how far the driver is from their house. The page will automatically update as the driver gets closer.</li></ul></li><li>The user presses the “Track Driver” button and the browser sends a GET request to the server to open an SSE connection to <code>https://feedme.now/delivery/driver/location/_monitor</code> (This can be any URL)<ul><li>The browser will keep this SSE connection open until the server closes it.</li><li>The Datastar library is listening to those SSE events sent by the server.<ul><li>They could come all at once or trickle in over a few minutes.</li><li>Since this is a delivery driver tracking it will probably take several minutes for the driver to get to the house.</li></ul></li><li>In the simplest case, the server sends back “html fragments” in the SSE event and Datastar figures out how to update the DOM.<ul><li>There will be an event every few minutes to update the UI with:<ul><li>The driver is 3 miles away.</li><li>The driver is 2 miles away.</li><li>The driver is 1 mile away.</li><li>The driver has entered your driveway</li><li>The food was delivered. {Close connection}</li></ul></li></ul></li></ul></li></ul></li></ul><p>The sequence diagram version of this follows.</p><p><img alt="diagram" id="kroki-9" src="https://chrismalek.me/_15370342953620332082.svg"></p><h2 id="rethinking-web-development"><p><a href="#rethinking-web-development">#
</a>Rethinking Web Development</p></h2><p>If you’ve done any web development in the past decade, it’s worth reconsidering how you approach projects and develop proof-of-concept ideas. You might be surprised at how much simpler and more maintainable your code can become. While having everything on the server is advantageous, it requires a different approach to project structure.</p><p>With Datastar, a significant portion of your application logic and state management can reside on the server. This shift in perspective may require you to rethink traditional web development paradigms.</p><p>Additional Considerations:</p><ul><li><strong>Project Structure:</strong> Carefully plan how you’ll organize your server-side code to handle SSE connections, manage signals, and generate HTML fragments efficiently.</li><li><strong>State Management:</strong> Leverage Datastar’s signals to manage your application state primarily on the server. This can simplify your client-side code and reduce the need for complex frontend frameworks.</li><li><strong>Templating:</strong> Choose a templating engine that allows you to easily create and send dynamic HTML fragments. Consider using a template language that promotes code reusability and maintainability.</li><li><strong>Real-time Updates:</strong> Explore the power of SSE for real-time updates in your application. Think about how you can use real-time data to enhance the user experience.</li><li><strong>Security:</strong> As with any web application, security should be a top priority. Ensure that your server-side code is secure and protects sensitive data.</li></ul><p>By rethinking your approach to web development and embracing the capabilities of Datastar, you can create highly efficient, maintainable, and real-time applications.</p><h2 id="server-requirements"><p><a href="#server-requirements">#
</a>Server Requirements</p></h2><p>Your server-side setup will involve a few key components:</p><ul><li>An HTML templating system that’s organized to send HTML fragments for UI updates. This likely means breaking down your HTML into smaller, manageable chunks that can be generated and sent to the client.</li><li>The concept of “routes” is central to all web frameworks. A route maps a URL to a function that handles requests and sends responses.</li><li>In Datastar, you’ll often need a route to handle the initial HTML request and another to handle SSE requests. There are multiple ways to structure this on your backend.</li></ul><p>The server must also handle SSE requests, GET/POST/PUT/DELETE requests, and send back the HTML fragments that update the UI.</p><h3 id="additional-considerations"><p><a href="#additional-considerations">##
</a>Additional Considerations</p></h3><ul><li><strong>SSE Endpoint:</strong> Establish a dedicated endpoint for handling SSE connections. This endpoint will be responsible for managing the persistent connections and sending updates to the client.</li><li><strong>Data Handling:</strong> Implement server-side logic to process incoming data, update signals, and generate the appropriate HTML fragments to send back to the client.</li><li><strong>Error Handling:</strong> Incorporate robust error handling to manage unexpected situations and ensure the stability of your application.</li><li><strong>Scalability:</strong> If you anticipate high traffic or require your application to scale, consider using a backend technology that can handle a large number of concurrent SSE connections efficiently.</li><li><strong>Deployment:</strong> Choose a deployment platform that supports SSE and can accommodate the requirements of your Datastar application.</li></ul><p>By carefully considering these server requirements, you can build a solid foundation for your Datastar application and ensure its performance, stability, and scalability.</p><h2 id="conclusion"><p><a href="#conclusion">#
</a>Conclusion</p></h2><p>Datastar offers a fresh approach to web development, streamlining real-time applications and minimizing front-end dependencies. While it demands a shift in perspective, its potential for simplicity, efficiency, and maintainability makes it worth exploring for modern developers. With its unified architecture and focus on server-driven logic, Datastar stands out as a promising alternative to traditional frameworks.</p><h2 id="further-reading"><p><a href="#further-reading">#
</a>Further Reading</p></h2><ul><li><a href="https://hypermedia.systems/book/contents/" target="_blank" rel="noopener noreferrer">Hypermedia Systems Books</a></li><li>Datastar <a href="https://data-star.dev/guide/getting_started" target="_blank" rel="noopener noreferrer">Getting Started
</a>and <a href="https://data-star.dev/reference/" target="_blank" rel="noopener noreferrer">Reference
</a>and <a href="https://data-star.dev/examples/" target="_blank" rel="noopener noreferrer">Examples</a></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Leaked Meta data reveals massive campaign to remove pro-Palestine posts (785 pts)]]></title>
            <link>https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta</link>
            <guid>43655603</guid>
            <pubDate>Fri, 11 Apr 2025 16:24:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta">https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta</a>, See on <a href="https://news.ycombinator.com/item?id=43655603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg" width="1200" height="800.2747252747253" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:20678795,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Pro-Palestine protesters in front of Meta headquarters on November 3, 2023. Photo by Tayfun Coskun/Anadolu via Getty Images.</figcaption></figure></div><p>A sweeping crackdown on posts on Instagram and Facebook that are critical of Israel—or even vaguely supportive of Palestinians—was directly orchestrated by the government of Israel, according to internal Meta data obtained by Drop Site News. The data show that Meta has complied with 94% of takedown requests issued by Israel since October 7, 2023. Israel is the biggest originator of takedown requests globally by far, and Meta has followed suit—widening the net of posts it automatically removes, and creating what can be called the largest mass censorship operation in modern history.</p><p>Government requests for takedowns generally focus on posts made by citizens inside that government’s borders, Meta insiders said. What makes Israel’s campaign unique is its success in censoring speech in many countries outside of Israel. What’s more, Israel's censorship project will echo well into the future, insiders said, as the AI program Meta is currently training how to moderate content will base future decisions on the successful takedown of content critical of Israel’s genocide.</p><p>The data, compiled and provided to Drop Site News by whistleblowers, reveal the internal mechanics of Meta’s “Integrity Organization”—an organization within Meta dedicated to ensuring the safety and authenticity on its platforms. Takedown requests (TDRs) allow individuals, organizations, and government officials to request the removal of content that allegedly violates Meta’s policies. The documents indicate that the vast majority of Israel’s requests—95%—fall under Meta’s “terrorism” or “violence and incitement” categories. And Israel’s requests have overwhelmingly targeted users from Arab and Muslim-majority nations in a massive effort to silence criticism of Israel.</p><p>Multiple independent sources inside Meta confirmed the authenticity of the information provided by the whistleblowers. The data also show that Meta removed over 90,000 posts to comply with TDRs submitted by the Israeli government in an average of 30 seconds. Meta also significantly expanded automated takedowns since October 7, resulting in an estimated 38.8 million additional posts being “actioned upon” across Facebook and Instagram since late 2023. “Actioned upon” in Facebook terms means that a post was either removed, banned, or suppressed.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_5760,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;full&quot;,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2137517,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1456w" sizes="100vw"></picture></div></a><figcaption>Number of posts reported by the Israeli government over time, by country of post origin. Obtained by Drop Site News.</figcaption></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_5760,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;full&quot;,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:4628638,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1456w" sizes="100vw"></picture></div></a><figcaption>Number of posts actioned upon by Meta over time, by country of post origin. Obtained by Drop Site News.</figcaption></figure></div><p>All of the Israeli government’s TDRs post-October 7th contain the exact same complaint text, according to the leaked information, regardless of the substance of the underlying content being challenged. Sources said that not a single Israeli TDR describes the exact nature of the content being reported, even though the requests link to an average of 15 different pieces of content. Instead, the reports simply state, in addition to a description of the October 7th attacks, that:</p><blockquote><p><em>This is an urgent request regarding videos posted on Facebook which contain inciting content. The file attached to this request contains link [sic] to content which violated articles 24(a) and 24(b) of the Israeli Counter-Terrorism Act (2016), which prohibits incitement to terrorism praise for acts of terrorism and identification or support of terror organizations. Moreover, several of the links violate article 2(4) of the Privacy Protection Act (1982), which prohibits publishing images in circumstances that could humiliate the person depicted, as they contain images of the killed, injured, and kidnapped. Additionally, to our understanding, the content in the attached report violates Facebook’s community standards.</em></p></blockquote><p>Meta's content enforcement system processes user-submitted reports through different pathways, depending on who is reporting it. Regular users can report posts via the platform’s built-in reporting function, triggering a review. Reported posts are typically first labeled as violating or non-violating by machine-learning models, though sometimes human moderators review them as well. If the AI assigns a high confidence score indicating a violation, the post is removed automatically. If the confidence score is low, human moderators review the post before deciding whether to take action.</p><p>Governments and organizations, on the other hand, have privileged channels to trigger content review. Reports submitted through these channels receive higher priority and are almost always reviewed by human moderators rather than AI. Once reviewed by humans, the reviews are fed back into Meta’s AI system to help it better assess similar content in the future. While everyday users can also file TDRs, they are rarely acted upon. Government-submitted TDRs are far more likely to result in content removal.</p><p><span>Meta has overwhelmingly complied with Israel’s requests, making an exception for the government account by taking down posts without human reviews, according to the whistleblowers, while still feeding that data back into Meta’s AI. A Human Rights Watch (HRW) report </span><a href="https://www.hrw.org/report/2023/12/21/metas-broken-promises/systemic-censorship-palestine-content-instagram-and" rel="">investigating Meta’s moderation of pro-Palestine content</a><span> post-October 7th found that, of 1,050 posts HRW documented as taken-down or suppressed on Facebook or Instagram, 1,049 involved peaceful content in support of Palestine, while just one post was content in support of Israel.</span></p><p>A source within Meta’s Integrity Organization confirmed that internal reviews of their automated moderation found that pro-Palestinian content that did not violate Meta’s policies was frequently removed. In other cases, pro-Palestinian content that should have been simply removed was given a “strike,” which indicates a more serious offense. Should a single account receive too many strikes on content that it publishes, the entire account can be removed from Meta platforms.</p><p>When concerns about overenforcement against pro-Palestinian content were raised inside the Integrity Organization, the source said, leadership responded by saying that they preferred to overenforce against potentially violating content, rather than underenforce and risk leaving violating content live on Meta platforms.</p><p>Within Meta, several key leadership positions are filled by figures with personal connections to the Israeli government. The Integrity Organization is run by Guy Rosen, a former Israeli military official who served in the Israeli military’s signals intelligence unit, Unit 8200. Rosen was the founder of Onavo, a web analytics and VPN firm that then-Facebook acquired in October 2013. (Previous reporting has revealed that, prior to acquiring the company, Facebook used data Onavo collected from their VPN users to monitor the performance of competitors—part of the anti-competitive behavior alleged by the Federal Trade Commission under the Biden administration in its suit against Meta.)</p><p>Rosen’s Integrity Organization works synergistically with Meta’s Policy Organization, according to employees. The Policy Organization sets the rules, and the Integrity Organization enforces them—but the two feed one another, they said. “Policy changes are often driven by data from the integrity org,” explained one Meta employee. As of this year, Joel Kaplan replaced Nick Clegg as the head of the Policy Organization. Kaplan is a former Bush administration official who has worked with Israeli officials in the past on fighting “online incitement.”</p><p><span>Meta’s Director of Public Policy for Israel and the Jewish Diaspora, Jordana Cutler, has also intervened to investigate pro-Palestine content. Cutler is a former senior Israeli government official and advisor to Prime Minister Benjamin Netanyahu. Cutler </span><a href="https://theintercept.com/2024/10/21/instagram-israel-palestine-censorship-sjp/" rel="">has reportedly used her role</a><span> to flag pro-Palestine content. According to internal communications reviewed by Drop Site, as recently as March, Cutler actively instructed employees of the company to search for and review content mentioning Ghassan Kanafani, an Arab novelist considered to be a pioneer of Palestinian literature. Immediately prior to joining Meta as a senior policymaker, she spent nearly three years as Chief of Staff at the Israeli Embassy in Washington, D.C—and nearly five years serving as deputy to one of Netanyahu’s senior advisors, before becoming Netanyahu’s advisor on Diaspora Affairs.</span></p><p>According to internal information reviewed by Drop Site, Cutler has continued to demand the review of content related to Kanafani under Meta’s policy “Glorification, Support or Representation” of individuals or organizations “that proclaim a violent mission or are engaged in violence to have a presence on our platforms.” Kanafani, who was killed in a 1972 car bombing orchestrated by the Mossad, served as a spokesperson for the left-wing Palestinian nationalist group, the Popular Front for the Liberation of Palestine (PFLP). The PFLP was designated as a terrorist group over a quarter century after he was killed, which, according to Meta’s guidelines and Cutler’s efforts, serves as a basis to flag his content for removal, strikes, and possible suspension.</p><p>The leaked documents reveal that Israel’s takedown requests have overwhelmingly targeted users from Arab and Muslim-majority nations, with the top 12 countries affected being: Egypt (21.1%), Jordan (16.6%), Palestine (15.6%), Algeria (8.2%), Yemen (7.5%), Tunisia (3.3%), Morocco (2.9%), Saudi Arabia (2.7%), Lebanon (2.6%), Iraq (2.6%), Syria (2%), Turkey (1.5%). In total, users from over 60 countries have reported censorship of content related to Palestine, according to Human Rights Watch—with posts being removed, accounts suspended, and visibility reduced through shadow banning.</p><p>Notably, only 1.3% of Israel’s takedown requests target Israeli users, making Israel an outlier among governments that typically focus their censorship efforts on their own citizens. For example, 63% of Malaysia’s takedown requests target Malaysian content, and 95% of Brazil’s requests target Brazilian content. Israel, however, has turned its censorship efforts outward, focusing on silencing critics and narratives that challenge its policies, particularly in the context of the ongoing conflict in Gaza and the West Bank.</p><p>Despite Meta’s awareness of Israel’s aggressive censorship tactics for at least seven years, according to Meta whistleblowers, the company has failed to curb the abuse. Instead, one said, the company “actively provided the Israeli government with a legal entry-point for carrying out its mass censorship campaign.”</p><p data-attrs="{&quot;url&quot;:&quot;https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta/comments" rel=""><span>Leave a comment</span></a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Erlang's not about lightweight processes and message passing (226 pts)]]></title>
            <link>https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html</link>
            <guid>43655221</guid>
            <pubDate>Fri, 11 Apr 2025 15:50:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html">https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html</a>, See on <a href="https://news.ycombinator.com/item?id=43655221">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<nav id="TOC" role="doc-toc">
<h2 id="toc-title">Table of contents</h2>
<ul>
<li><a href="#background" id="toc-background">Background</a></li>
<li><a href="#behaviours" id="toc-behaviours">Behaviours</a>
<ul>
<li><a href="#generic-server-behaviour" id="toc-generic-server-behaviour">Generic server behaviour</a></li>
<li><a href="#event-manager-behaviour" id="toc-event-manager-behaviour">Event manager behaviour</a></li>
<li><a href="#state-machine-behaviour" id="toc-state-machine-behaviour">State machine behaviour</a></li>
<li><a href="#supervisor-behaviour" id="toc-supervisor-behaviour">Supervisor behaviour</a></li>
<li><a href="#application-and-release-behaviours" id="toc-application-and-release-behaviours">Application and release
behaviours</a></li>
</ul></li>
<li><a href="#how-behaviours-can-be-implemented" id="toc-how-behaviours-can-be-implemented">How behaviours can be
implemented</a></li>
<li><a href="#correctness-of-behaviours" id="toc-correctness-of-behaviours">Correctness of behaviours</a></li>
<li><a href="#contributing" id="toc-contributing">Contributing</a></li>
<li><a href="#see-also" id="toc-see-also">See also</a></li>
<li><a href="#discussion" id="toc-discussion">Discussion</a></li>
</ul>
</nav>
<p>Posted on Jan 18, 2023</p>
<p>I used to think that the big idea of Erlang is its lightweight
processes and message passing. Over the last couple of years I’ve
realised that there’s a bigger insight to be had, and in this post I’d
like to share it with you.</p>
<section id="background">
<h2><a href="#background" title="Background">Background</a></h2>
<p>Erlang has an interesting history. If I understand things correctly,
it started off as a Prolog library for building reliable distributed
systems, morphed into a Prolog dialect, before finally becoming a
language in its own right.</p>
<p>The goal seemed to have always been to solve the problem of building
reliable distributed systems. It was developed at Ericsson and used to
program their telephone switches. This was sometime in the 80s and 90s,
before internet use become widespread. I suppose they were already
dealing with “internet scale” traffic, i.e.&nbsp;hundreds of millions of
users, with stricter SLAs than most internet services provide today. So
in a sense they were ahead of their time.</p>
<p>In 1998 Ericsson decided to ban all use of Erlang<a href="#fn1" id="fnref1" role="doc-noteref"><sup>1</sup></a>.
The people responsible for developing it argued that if they were going
to ban it, then they might as well open source it. Which Ericsson did
and shortly after most of the team that created Erlang quit and started
their own company.</p>
<p>One of these people was Joe Armstrong, which also was one of the main
people behind the design and implementation of Erlang. The company was
called Bluetail and they got bought up a couple of times but in the end
Joe got fired in 2002.</p>
<p>Shortly after, still in 2002, Joe starts writing his PhD thesis at
the Swedish Institute of Computer Science (SICS). Joe was born 1950, so
he was probably 52 years old at this point. The topic of the thesis is
<em>Making reliable distributed systems in the presence of software
errors</em> and it was finished the year after in 2003.</p>
<p>It’s quite an unusual thesis in many ways. For starters, most theses
are written by people in their twenties with zero experience of
practical applications. Whereas in Joe’s case he has been working
professionally on this topic since the 80s, i.e.&nbsp;about twenty years. The
thesis contains no math nor theory, it’s merely a presentation of the
ideas that underpin Erlang and how they used Erlang to achieve the
original goal of building reliable distributed systems.</p>
<p>I highly commend reading his <a href="http://kth.diva-portal.org/smash/record.jsf?pid=diva2%3A9492&amp;dswid=-1166">thesis</a>
and forming your own opinion, but to me it’s clear that the big idea
there isn’t lightweight processes<a href="#fn2" id="fnref2" role="doc-noteref"><sup>2</sup></a> and message passing, but
rather the generic components which in Erlang are called
<em>behaviours</em>.</p>
</section>
<section id="behaviours">
<h2><a href="#behaviours" title="Behaviours">Behaviours</a></h2>
<p>I’ll first explain in more detail what behaviours are, and then I’ll
come back to the point that they are more important than the idea of
lightweight processes.</p>
<p>Erlang behaviours are like interfaces in, say, Java or Go. It’s a
collection of type signatures which can have multiple implementations,
and once the programmer provides such an implementation they get access
to functions written against that interface. To make it more concrete
here’s a contrived example in Go:</p>
<div id="cb1"><pre><code><span id="cb1-1"><span>// The interface.</span></span>
<span id="cb1-2"><span>type</span> HasName <span>interface</span> <span>{</span></span>
<span id="cb1-3">        Name<span>()</span> <span>string</span></span>
<span id="cb1-4"><span>}</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span>// A generic function written against the interface.</span></span>
<span id="cb1-7"><span>func</span> Greet<span>(</span>n HasName<span>)</span> <span>{</span></span>
<span id="cb1-8">    fmt<span>.</span>Printf<span>(</span><span>"Hello %s!</span><span>\n</span><span>"</span><span>,</span> n<span>.</span>Name<span>())</span></span>
<span id="cb1-9"><span>}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span>// First implementation of the interface.</span></span>
<span id="cb1-12"><span>type</span> Joe <span>struct</span> <span>{}</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span>func</span> <span>(</span>_ <span>*</span>Joe<span>)</span> Name<span>()</span> <span>string</span> <span>{</span></span>
<span id="cb1-15">        <span>return</span> <span>"Joe"</span></span>
<span id="cb1-16"><span>}</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span>// Second implementation of the interface.</span></span>
<span id="cb1-19"><span>type</span> Mike <span>struct</span> <span>{}</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span>func</span> <span>(</span>_ <span>*</span>Mike<span>)</span> Name<span>()</span> <span>string</span> <span>{</span></span>
<span id="cb1-22">        <span>return</span> <span>"Mike"</span></span>
<span id="cb1-23"><span>}</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span>func</span> main<span>()</span> <span>{</span></span>
<span id="cb1-26">        joe <span>:=</span> <span>&amp;</span>Joe<span>{}</span></span>
<span id="cb1-27">        mike <span>:=</span> <span>&amp;</span>Mike<span>{}</span></span>
<span id="cb1-28">        Greet<span>(</span>mike<span>)</span></span>
<span id="cb1-29">        Greet<span>(</span>joe<span>)</span></span>
<span id="cb1-30"><span>}</span></span></code></pre></div>
<p>Running the above program will display:</p>
<pre><code>Hello Mike!
Hello Joe!</code></pre>
<p>This hopefully illustrates how <code>Greet</code> is generic in, or
parametrised by, the interface <code>HasName</code>.</p>
<section id="generic-server-behaviour">
<h3><a href="#generic-server-behaviour" title="Generic server behaviour">Generic server behaviour</a></h3>
<p>Next lets have a look at a more complicated example in Erlang taken
from Joe’s thesis (p.&nbsp;136). It’s a key-value store where we can
<code>store</code> a key value pair or <code>lookup</code> the value of
a key, the <code>handle_call</code> part is the most interesting:</p>
<div id="cb3"><pre><code><span id="cb3-1"><span>-module</span><span>(</span><span>kv</span><span>).</span></span>
<span id="cb3-2"><span>-</span><span>behaviour(</span><span>gen_server</span><span>).</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span>-export</span><span>([</span><span>start</span><span>/</span><span>0</span><span>,</span> <span>stop</span><span>/</span><span>0</span><span>,</span> <span>lookup</span><span>/</span><span>1</span><span>,</span> <span>store</span><span>/</span><span>2</span><span>]).</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span>-export</span><span>([</span><span>init</span><span>/</span><span>1</span><span>,</span> <span>handle_call</span><span>/</span><span>3</span><span>,</span> <span>handle_cast</span><span>/</span><span>2</span><span>,</span> <span>terminate</span><span>/</span><span>2</span><span>]).</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span>start()</span> <span>-&gt;</span></span>
<span id="cb3-9">  <span>gen_server:start_link({</span><span>local</span><span>,</span><span>kv</span><span>},</span><span>kv</span><span>,</span><span>arg1</span><span>,[]).</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span>stop()</span> <span>-&gt;</span> <span>gen_server:cast(</span><span>kv</span><span>,</span> <span>stop</span><span>).</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span>init(</span><span>arg1</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-14">  <span>io:format(</span><span>"Key-Value server starting~n"</span><span>),</span></span>
<span id="cb3-15">  <span>{</span><span>ok</span><span>,</span> <span>dict:new()}.</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span>store(</span><span>Key</span><span>,</span> <span>Val</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-18">  <span>gen_server:call(</span><span>kv</span><span>,</span> <span>{</span><span>store</span><span>,</span> <span>Key</span><span>,</span> <span>Val</span><span>}).</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span>lookup(</span><span>Key</span><span>)</span> <span>-&gt;</span> <span>gen_server:call(</span><span>kv</span><span>,</span> <span>{</span><span>lookup</span><span>,</span> <span>Key</span><span>}).</span></span>
<span id="cb3-21"></span>
<span id="cb3-22"><span>handle_call({</span><span>store</span><span>,</span> <span>Key</span><span>,</span> <span>Val</span><span>},</span> <span>From</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-23">  <span>Dict1</span> <span>=</span> <span>dict:store(</span><span>Key</span><span>,</span> <span>Val</span><span>,</span> <span>Dict</span><span>),</span></span>
<span id="cb3-24">  <span>{</span><span>reply</span><span>,</span> <span>ack</span><span>,</span> <span>Dict1</span><span>};</span></span>
<span id="cb3-25"><span>handle_call({</span><span>lookup</span><span>,</span> <span>crash</span><span>},</span> <span>From</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-26">  <span>1</span><span>/</span><span>0</span><span>;</span> <span>%% &lt;- deliberate error :-)</span></span>
<span id="cb3-27"><span>handle_call({</span><span>lookup</span><span>,</span> <span>Key</span><span>},</span> <span>From</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-28">  <span>{</span><span>reply</span><span>,</span> <span>dict:find(</span><span>Key</span><span>,</span> <span>Dict</span><span>),</span> <span>Dict</span><span>}.</span></span>
<span id="cb3-29"></span>
<span id="cb3-30"><span>handle_cast(</span><span>stop</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span> <span>{</span><span>stop</span><span>,</span> <span>normal</span><span>,</span> <span>Dict</span><span>}.</span></span>
<span id="cb3-31"></span>
<span id="cb3-32"><span>terminate(</span><span>Reason</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-33">  <span>io:format(</span><span>"K-V server terminating~n"</span><span>).</span></span></code></pre></div>
<p>This is an implementation of the <code>gen_server</code>
behaviour/interface. Notice how <code>handle_call</code> updates the
state (<code>Dict</code>) in case of a <code>store</code> and
<code>lookup</code>s the key in the state. Once <code>gen_server</code>
is given this implementation it will provide a server which can handle
concurrent <code>store</code> and <code>lookup</code> requests,
similarly to how <code>Greet</code> provided the displaying
functionality.</p>
<p>At this point you might be thinking “OK, so what? Lots of programming
languages have interfaces…”. That’s true, but notice how
<code>handle_call</code> is completely sequential, i.e.&nbsp;all concurrency
is hidden away in the generic <code>gen_server</code> component. “Yeah,
but that’s just good engineering practice which can be done in any
language” you say. That’s true as well, but the thesis pushes this idea
quite far. It identifies six behaviours: <code>gen_server</code>,
<code>gen_event</code>, <code>gen_fsm</code>, <code>supervisor</code>,
<code>application</code>, and <code>release</code> and then says these
are enough to build reliable distributed systems. As a case study Joe
uses one of Ericsson’s telephone switches (p.&nbsp;157):</p>
<blockquote>
<p>When we look at the AXD301 project in chapter 8, we will see that
there were 122 instances of gen_server, 36 instances of gen_event and 10
instances of gen_fsm. There were 20 supervisors and 6 applications. All
this is packaged into one release.</p>
</blockquote>
<p>Joe gives several arguments for why behaviour should be used
(pp.&nbsp;157-158):</p>
<ol type="1">
<li><p>The application programmer only has to provide the part of the
code which defines the <em>semantics</em> (or “business logic”) of their
problem, while the <em>infrastructure</em> code is provided
automatically by the behaviour;</p></li>
<li><p>The application programmer writes sequential code, all
concurrency is hidden away in the behaviour;</p></li>
<li><p>Behaviours are written by experts, and based on years of
experience and represent “best practices”;</p></li>
<li><p>Easier for new team members to get started: business logic is
sequential, similar structure that they might have seen before
elsewhere;</p></li>
<li><p>If whole systems are implemented reusing a small set of
behaviours: as behaviour implementations improve the whole systems will
improve without requiring any code changes;</p></li>
<li><p>Sticking to only using behaviours enforces structure, which in
turn makes testing and formal verification much easier.</p></li>
</ol>
<p>We’ll come back to this last point about testing later.</p>
</section>
<section id="event-manager-behaviour">
<h3><a href="#event-manager-behaviour" title="Event manager behaviour">Event manager behaviour</a></h3>
<p>Lets come back to the behaviours we listed above first. We looked at
<code>gen_server</code>, but what are the others for? There’s
<code>gen_event</code> which is a generic event manager, which lets you
register event handlers that are then run when the event manager gets
messages associated with the handlers. Joe says this is useful for,
e.g., error logging and gives the following example of an simple logger
(p.&nbsp;142):</p>
<div id="cb4"><pre><code><span id="cb4-1"><span>-module</span><span>(</span><span>simple_logger</span><span>).</span></span>
<span id="cb4-2"><span>-</span><span>behaviour(</span><span>gen_event</span><span>).</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span>-export</span><span>([</span><span>start</span><span>/</span><span>0</span><span>,</span> <span>stop</span><span>/</span><span>0</span><span>,</span> <span>log</span><span>/</span><span>1</span><span>,</span> <span>report</span><span>/</span><span>0</span><span>]).</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span>-export</span><span>([</span><span>init</span><span>/</span><span>1</span><span>,</span> <span>terminate</span><span>/</span><span>2</span><span>,</span></span>
<span id="cb4-7">         <span>handle_event</span><span>/</span><span>2</span><span>,</span> <span>handle_call</span><span>/</span><span>2</span><span>]).</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span>-define</span><span>(</span><span>NAME</span><span>,</span> <span>my_simple_event_logger</span><span>).</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span>start()</span> <span>-&gt;</span></span>
<span id="cb4-12">  <span>case</span> <span>gen_event:start_link({</span><span>local</span><span>,</span> <span>?</span><span>NAME</span><span>})</span> <span>of</span></span>
<span id="cb4-13">    <span>Ret</span> <span>=</span> <span>{</span><span>ok</span><span>,</span> <span>Pid</span><span>}</span> <span>-&gt;</span></span>
<span id="cb4-14">      <span>gen_event:add_handler(?</span><span>NAME</span><span>,?</span><span>MODULE</span><span>,</span><span>arg1</span><span>),</span></span>
<span id="cb4-15">      <span>Ret</span><span>;</span></span>
<span id="cb4-16">  <span>Other</span> <span>-&gt;</span></span>
<span id="cb4-17">    <span>Other</span></span>
<span id="cb4-18">  <span>end</span><span>.</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span>stop()</span> <span>-&gt;</span> <span>gen_event:stop(?</span><span>NAME</span><span>).</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span>log(</span><span>E</span><span>)</span> <span>-&gt;</span> <span>gen_event:notify(?</span><span>NAME</span><span>,</span> <span>{</span><span>log</span><span>,</span> <span>E</span><span>}).</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span>report()</span> <span>-&gt;</span></span>
<span id="cb4-25">  <span>gen_event:call(?</span><span>NAME</span><span>,</span> <span>?</span><span>MODULE</span><span>,</span> <span>report</span><span>).</span></span>
<span id="cb4-26"></span>
<span id="cb4-27"><span>init(</span><span>arg1</span><span>)</span> <span>-&gt;</span></span>
<span id="cb4-28">  <span>io:format(</span><span>"Logger starting~n"</span><span>),</span></span>
<span id="cb4-29">  <span>{</span><span>ok</span><span>,</span> <span>[]}.</span></span>
<span id="cb4-30"></span>
<span id="cb4-31"><span>handle_event({</span><span>log</span><span>,</span> <span>E</span><span>},</span> <span>S</span><span>)</span> <span>-&gt;</span> <span>{</span><span>ok</span><span>,</span> <span>trim([</span><span>E</span><span>|</span><span>S</span><span>])}.</span></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span>handle_call(</span><span>report</span><span>,</span> <span>S</span><span>)</span> <span>-&gt;</span> <span>{</span><span>ok</span><span>,</span> <span>S</span><span>,</span> <span>S</span><span>}.</span></span>
<span id="cb4-34"></span>
<span id="cb4-35"><span>terminate(</span><span>stop</span><span>,</span> <span>_</span><span>)</span> <span>-&gt;</span> <span>true</span><span>.</span></span>
<span id="cb4-36"></span>
<span id="cb4-37"><span>trim([</span><span>X1</span><span>,</span><span>X2</span><span>,</span><span>X3</span><span>,</span><span>X4</span><span>,</span><span>X5</span><span>|</span><span>_</span><span>])</span> <span>-&gt;</span> <span>[</span><span>X1</span><span>,</span><span>X2</span><span>,</span><span>X3</span><span>,</span><span>X4</span><span>,</span><span>X5</span><span>];</span></span>
<span id="cb4-38"><span>trim(</span><span>L</span><span>)</span> <span>-&gt;</span> <span>L</span><span>.</span></span></code></pre></div>
<p>The interesting part is <code>handle_event</code>, <code>trim</code>
and <code>report</code>. Together they let the user log, keep track and
display the last five error messages.</p>
</section>
<section id="state-machine-behaviour">
<h3><a href="#state-machine-behaviour" title="State machine behaviour">State machine behaviour</a></h3>
<p>The <code>gen_fsm</code> behavior has been renamed to
<code>gen_statem</code> (for state machine) since thesis was written.
It’s very similar to <code>gen_server</code>, but more geared towards
implementing protocols, which often are specified as state machines. I
believe any <code>gen_server</code> can be implemented as a
<code>gen_statem</code> and vice versa so we won’t go into the details
of <code>gen_statem</code>.</p>
</section>
<section id="supervisor-behaviour">
<h3><a href="#supervisor-behaviour" title="Supervisor behaviour">Supervisor behaviour</a></h3>
<p>The next interesting behavior is <code>supervisor</code>. Supervisors
are processes which sole job is to make sure that other processes are
healthy and doing their job. If a supervised process fails then the
supervisor can restart it according to some predefined strategy. Here’s
an example due to Joe (p.&nbsp;148):</p>
<div id="cb5"><pre><code><span id="cb5-1"><span>-module</span><span>(</span><span>simple_sup</span><span>).</span></span>
<span id="cb5-2"><span>-</span><span>behaviour(</span><span>supervisor</span><span>).</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span>-export</span><span>([</span><span>start</span><span>/</span><span>0</span><span>,</span> <span>init</span><span>/</span><span>1</span><span>]).</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span>start()</span> <span>-&gt;</span></span>
<span id="cb5-7">  <span>supervisor:start_link({</span><span>local</span><span>,</span> <span>simple_supervisor</span><span>},</span></span>
<span id="cb5-8">  <span>?</span><span>MODULE</span><span>,</span> <span>nil</span><span>).</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span>init(</span><span>_</span><span>)</span> <span>-&gt;</span></span>
<span id="cb5-11">  <span>{</span><span>ok</span><span>,</span></span>
<span id="cb5-12">  <span>{{</span><span>one_for_one</span><span>,</span> <span>5</span><span>,</span> <span>1000</span><span>},</span></span>
<span id="cb5-13">  <span>[</span></span>
<span id="cb5-14">   <span>{</span><span>packet</span><span>,</span></span>
<span id="cb5-15">     <span>{</span><span>packet_assembler</span><span>,</span> <span>start</span><span>,</span> <span>[]},</span></span>
<span id="cb5-16">     <span>permanent</span><span>,</span> <span>500</span><span>,</span> <span>worker</span><span>,</span> <span>[</span><span>packet_assembler</span><span>]},</span></span>
<span id="cb5-17">   <span>{</span><span>server</span><span>,</span></span>
<span id="cb5-18">     <span>{</span><span>kv</span><span>,</span> <span>start</span><span>,</span> <span>[]},</span></span>
<span id="cb5-19">     <span>permanent</span><span>,</span> <span>500</span><span>,</span> <span>worker</span><span>,</span> <span>[</span><span>kv</span><span>]},</span></span>
<span id="cb5-20">   <span>{</span><span>logger</span><span>,</span></span>
<span id="cb5-21">     <span>{</span><span>simple_logger</span><span>,</span> <span>start</span><span>,</span> <span>[]},</span></span>
<span id="cb5-22">     <span>permanent</span><span>,</span> <span>500</span><span>,</span> <span>worker</span><span>,</span> <span>[</span><span>simple_logger</span><span>]}]}}.</span></span></code></pre></div>
<p>The <code>{one_for_one, 5, 1000}</code> is the restart strategy. It
says that if one of the supervised processes
(<code>packet_assembler</code>, <code>kv</code>, and
<code>simple_logger</code>) fail then only restart the failing process
(<code>one_for_one</code>). If the supervisor needs to restart more than
<code>5</code> times in <code>1000</code> seconds then the supervisor
itself should fail.</p>
<p>The <code>permanent, 500, worker</code> part means that this is a
worker process which should be permanently kept alive and its given 500
milliseconds to gracefully stop what it’s doing in case the supervisor
wants to restart it.</p>
<p>“Why would the supervisor want to restart it if it’s not dead
already?”, one might wonder. Well, there are other restart strategies
than <code>one_for_one</code>. For example, <code>one_for_all</code>
where if one process fails then the supervisor restarts all of its
children.</p>
<p>If we also consider that supervisors can supervise supervisors, which
are not necessarily running on the same computer, then I hope that you
get an idea of how powerful this behaviour can be. And, no, this isn’t
“just Kubernetes”, because it’s at the thread/lightweight process level
rather than docker container level.</p>
<p>The idea for supervisors and their restart strategies comes from the
observation that often a restart appears to fix the problem, as captured
in the <em>Have You Tried Turning It Off And On Again?</em> sketches
from IT Crowd.</p>
<p>Knowing that failing processes will get restarted coupled with Jim
Gray’s idea of failing fast, that’s either produce the output according
to the specification or signal failure and stop operating, leads to
Joe’s slogan: “Let it crash!” (p. 107). Another way to think of it is
that a program should only express its “happy path”, should anything go
wrong on its happy way it should crash, rather than trying to be clever
about it and try to fix the problem (potentially making it worse), and
another program higher up the supervisor tree will handle it.</p>
<p>Supervisors and the “let it crash” philosophy, appear to produce
reliable systems. Joe uses the Ericsson AXD301 telephone switch example
again (p.&nbsp;191):</p>
<blockquote>
<p>Evidence for the long-term operational stability of the system had
also not been collected in any systematic way. For the Ericsson AXD301
the only information on the long-term stability of the system came from
a power-point presentation showing some figures claiming that a major
customer had run an 11 node system with a 99.9999999% reliability,
though how these figure had been obtained was not documented.</p>
</blockquote>
<p>To put this in perspective, five nines (99.999%) reliability is
considered good (5.26 minutes of downtime per year). “59% of Fortune 500
companies experience a minimum of 1.6 hours of downtime per week”,
according to some <a href="https://courseware.cutm.ac.in/wp-content/uploads/2020/06/Assessing-the-Financial-Impact-of-Downtime-UK.pdf">report</a>
from a biased company. Notice per <em>year</em> vs per <em>week</em>,
but as we don’t know how either reliability numbers are obtained its
probably safe to assume that the truth is somewhere in the middle –
still a big difference, but not 31.56 milliseconds (nine nines) of
downtime per year vs 1.6 hours of downtime per week.</p>
</section>
<section id="application-and-release-behaviours">
<h3><a href="#application-and-release-behaviours" title="Application and release behaviours">Application and release
behaviours</a></h3>
<p>I’m not sure if <code>application</code> and <code>release</code>
technically are behaviours, i.e. interfaces. They are part of the same
chapter as the other behaviours in the thesis and they do provide a
clear structure which is a trait of the other behaviours though, so
we’ll include them in the discussion.</p>
<p>So far we’ve presented behaviours from the bottom up. We started with
“worker” behaviours <code>gen_server</code>, <code>gen_statem</code> and
<code>gen_event</code> which together capture the semantics of our
problem. We then saw how we can define <code>supervisor</code> trees
whose children are other supervisor trees or workers, to deal with
failures and restarts.</p>
<p>Next level up is an <code>application</code> which consists of a
supervisor tree together with everything else we need to deliver a
particular application.</p>
<p>A system can consist of several <code>application</code> and that’s
where the final “behaviour” comes in. A <code>release</code> packages up
one or more applications. They also contain code to handle upgrades. If
the upgrade fails, it must be able to rollback to the previous stable
state.</p>
</section>
</section>
<section id="how-behaviours-can-be-implemented">
<h2><a href="#how-behaviours-can-be-implemented" title="How behaviours can be implemented">How behaviours can be
implemented</a></h2>
<p>I hope that by now I’m managed to convince you that it’s not actually
the lightweight processes and message passing by themselves that make
Erlang great for building reliable systems.</p>
<p>At best one might be able to claim that lightweight processes and
supervisors are the key mechanisms at play<a href="#fn3" id="fnref3" role="doc-noteref"><sup>3</sup></a>,
but I think it would be more honest to recognise the structure that
behaviours provide and how that ultimately leads to reliable
software.</p>
<p>I’ve not come across any other language, library, or framework which
provides such relatively simple building blocks that compose into big
systems like the AXD301 (“over a million lines of Erlang code”,
p.&nbsp;167).</p>
<p>This begs the question: why aren’t language and library designers
stealing the structure behind Erlang’s behaviours, rather than copying
the ideas of lightweight processes and message passing?</p>
<p>Let’s take a step back. We said earlier that behaviours are
interfaces and many programming languages have interfaces. How would we
go about starting to implement behaviours in other languages?</p>
<p>Lets start with <code>gen_server</code>. I like to think its
interface signature as being:</p>
<div id="cb6"><pre><code><span id="cb6-1"><span>Input</span> <span>-&gt;</span> <span>State</span> <span>-&gt;</span> (<span>State</span>, <span>Output</span>)</span></code></pre></div>
<p>That’s it takes some input, its current state and produces a pair of
the new updated state and an output.</p>
<p>How do we turn this sequential signature into something that can
handle concurrent requests? One way would be to fire up a HTTP server
which transforms requests into <code>Input</code>s and puts them on a
queue, have an event loop which pops inputs from the queue and feeds it
to the sequential implementation, then writing the output back to the
client response. It wouldn’t be difficult to generalise this to be able
to handle multiple <code>gen_server</code>s at the same time, by giving
each a name and let the request include the name in addition to the
input.</p>
<p><code>gen_event</code> could be implemented by allowing registration
of callbacks to certain types of event on the queue.</p>
<p><code>supervisor</code>s is more interesting, one simple way to think
of it is: when we feed the <code>gen_server</code> function the next
input from the queue, we wrap that call in an exception handler, and
should it throw we notify its supervisor. It gets a bit more complicated
if the supervisor is not running on the same computer as the
<code>gen_server</code>.</p>
<p>I haven’t thought about <code>application</code> and
<code>release</code>s much yet, but given that configuration, deployment
and upgrades are difficult problems they seem important.</p>
</section>
<section id="correctness-of-behaviours">
<h2><a href="#correctness-of-behaviours" title="Correctness of behaviours">Correctness of behaviours</a></h2>
<p>Writing a post solely about stealing from Erlang doesn’t seem fair,
even though it’s the right thing to do, so I’d like to finish off with
how we can build upon the insights of Joe and the Erlang community.</p>
<p>I’ve been interesting in testing for a while now. Most recently I’ve
been looking into <a href="https://github.com/stevana/property-based-testing-stateful-systems-tutorial">simulation
testing</a> distributed systems à la <a href="https://www.youtube.com/watch?v=4fFDFbi3toc">FoundationDB</a>.</p>
<p>Simulation testing in a nutshell is running your system in a
simulated world, where the simulation has full control over which
messages get sent when over the network.</p>
<p>FoundationDB built their own programming language, or dialect of C++
with actors, in order do the simulation testing. Our team seemed to be
able to get quite far with merely using state machines of type:</p>
<div id="cb7"><pre><code><span id="cb7-1"><span>Input</span> <span>-&gt;</span> <span>State</span> <span>-&gt;</span> (<span>State</span>, [<span>Output</span>])</span></code></pre></div>
<p>where <code>[Output]</code> is a sequence of outputs.</p>
<p>The idea being that the simulator keeps track of a priority queue of
messages sorted by their arrival time, it pops a message, advances the
clock to the arrival time of that message, feeds the message to the
receiving state machine, generates new arrival times for all output
messages and puts them back into the priority queue, rinse and repeat.
As long as everything is deterministic and the arrival times are
generated using a seed we can explore many different interleavings and
get reproducible failures. It’s also much faster than Jepsen, because
messaging is done in-memory and we advance the clock to the arrival
time, thereby triggering any timeouts without having to wait for
them.</p>
<p>We used to say that programs of this state machine type where written
in “network normal form”, and conjectured that every program which can
receive and send stuff over the network can be refactored into this
shape<a href="#fn4" id="fnref4" role="doc-noteref"><sup>4</sup></a>. Even if we had a proof, “network
normal form” always felt a bit arbitrary. But then I read Joe’s thesis
and realised that <code>gen_server</code> and <code>gen_statem</code>
basically have the same type, so I stopped being concerned about it. As
I think that if a structure is found to be useful by different people,
then it’s usually a sign that it isn’t arbitrary.</p>
<p>Anyway, in, at least, one of Joe’s <a href="https://youtu.be/cNICGEwmXLU?t=1439">talks</a> he mentions how
difficult it’s to correctly implement distributed leader election.</p>
<p>I believe this is a problem that would be greatly simplified by
having access to a simulator. A bit like I’d imagine having access to a
wind tunnel would make building an airplane easier. Both lets you test
your system under extreme conditions, such as unreliable networking or
power loss, before they happen in “production”. Furthermore, this
simulator can be generic in, or parametrised by, behaviours. Which means
that the developer gets it for free while the complexity of the
simulator is hidden away, just like the concurrent code of
<code>gen_server</code>!</p>
<p>FoundationDB is a good example of simulation testing working, as
witnessed by this <a href="https://twitter.com/aphyr/status/405017101804396546">tweet</a>
where somebody asked Kyle “aphyr” Kingsbury to Jepsen test
FoundationDB:</p>
<blockquote>
<p>“haven’t tested foundation[db] in part because their testing appears
to be waaaay more rigorous than mine.”</p>
</blockquote>
<p>Formal verification is also made easier if the program is written a
state machine. Basically all of Lamport’s model checking <a href="https://www.microsoft.com/en-us/research/publication/computation-state-machines/">work</a>
with TLA+ assumes that the specification is a state machine. Also more
recently Kleppmann has <a href="https://lawrencecpaulson.github.io/2022/10/12/verifying-distributed-systems-isabelle.html">shown</a>
how to exploit the state machine structure to do proof by (structural)
induction to solve the state explosion problem.</p>
<p>So there you have it, we’ve gone full circle. We started by taking
inspiration from Joe and Erlang’s behaviours, and ended up using the
structure of the <code>gen_server</code> behaviour to make it easier to
solve a problem that Joe used to have.</p>
</section>
<section id="contributing">
<h2><a href="#contributing" title="Contributing">Contributing</a></h2>
<p>There are a bunch of related ideas that I have started working
on:</p>
<ul>
<li>Stealing ideas from Martin Thompson’s work on the LMAX Disruptor and
<a href="https://github.com/real-logic/aeron">aeron</a> to <a href="https://github.com/stevana/pipelined-state-machines">make</a> a
fast event loop, on top of which the behaviours run;</li>
<li>Enriching the state machine type with <a href="https://github.com/stevana/coroutine-state-machines">async
I/O</a>;</li>
<li>How to implement <a href="https://github.com/stevana/supervised-state-machines">supervisors</a>
in more detail;</li>
<li>Hot code <a href="https://github.com/stevana/hot-swapping-state-machines">swapping</a>
of state machines.</li>
</ul>
<p>Feel free to get in touch, if you find any of this interesting and
would like to get involved, or if you have have comments, suggestions or
questions.</p>
</section>
<section id="see-also">
<h2><a href="#see-also" title="See also">See also</a></h2>
<ul>
<li>Chapter 6.1 on behaviours in Joe Armstrong’s <a href="http://kth.diva-portal.org/smash/record.jsf?pid=diva2%3A9492&amp;dswid=-1166">thesis</a>,
p.&nbsp;129;</li>
<li><a href="https://www.erlang.org/doc/design_principles/des_princ.html">OTP
design principles</a>;</li>
<li>The documentation for behaviours:
<ul>
<li><a href="https://www.erlang.org/doc/man/gen_server.html"><code>gen_server</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/gen_event.html"><code>gen_event</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/gen_statem.html"><code>gen_statem</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/supervisor.html"><code>supervisor</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/application.html"><code>application</code></a>;</li>
<li><a href="https://www.erlang.org/doc/design_principles/release_structure.html">release</a>.</li>
</ul></li>
<li><a href="https://youtube.com/watch?v=7erJ1DV_Tlo">Hewitt, Meijer and
Szyperski: The Actor Model (everything you wanted to know, but were
afraid to ask)</a> (2012);</li>
<li>Erlang the <a href="https://www.youtube.com/watch?v=xrIjfIjssLE">movie</a>
(1990);</li>
<li><a href="https://www.youtube.com/watch?v=cNICGEwmXLU">Systems that
run forever self-heal and scale</a> by Joe Armstrong (Strange Loop,
2013);</li>
<li><a href="https://www.youtube.com/watch?v=TTM_b7EJg5E">The Do’s and
Don’ts of Error Handling</a> by Joe Armstrong (GOTO, 2018);</li>
<li><a href="https://ferd.ca/the-zen-of-erlang.html">The Zen of
Erlang</a> by Fred Hebert (2016);</li>
<li><a href="https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html">The
Hitchhiker’s Guide to the Unexpected</a> by Fred Hebert (2018);</li>
<li><a href="https://www.hpl.hp.com/techreports/tandem/TR-85.7.pdf">Why
Do Computers Stop and What Can Be Done About It?</a> by Jim Gray
(1985);</li>
<li>The supervision trees chapter of <a href="https://adoptingerlang.org/docs/development/supervision_trees/"><em>Adopting
Erlang</em></a> (2019);</li>
<li>“If there’s one thing I’d say to the Erlang folks, it’s you got the
stuff right from a high-level, but you need to invest in your messaging
infrastructure so it’s super fast, super efficient and obeys all the
right properties to let this stuff work really well.” <a href="https://youtu.be/OqsAGFExFgQ?t=2532">quote</a> by Martin Thompson
(Functional Conf, 2017).</li>
</ul>
</section>
<section id="discussion">
<h2><a href="#discussion" title="Discussion">Discussion</a></h2>
<ul>
<li><a href="https://news.ycombinator.com/item?id=34545061">Hacker
News</a></li>
<li><a href="https://lobste.rs/s/7dguth/erlang_s_not_about_lightweight_processes">lobste.rs</a></li>
<li><a href="https://old.reddit.com/r/programming/comments/10mt6hz/erlangs_not_about_lightweight_processes_and/">r/programming</a></li>
<li><a href="https://old.reddit.com/r/haskell/comments/10mgd0a/erlangs_not_about_lightweight_processes_and/">r/haskell</a></li>
<li><a href="https://old.reddit.com/r/erlang/comments/10g0zbg/erlangs_not_about_lightweight_processes_and/">r/erlang</a></li>
<li><a href="https://elixirforum.com/t/erlangs-not-about-lightweight-processes-and-message-passing/53484/7">Elixir
Forum</a></li>
</ul>
</section>
<section id="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>From Joe Armstrong’s thesis (p.&nbsp;6):</p>
<blockquote>
<p>In February 1998 Erlang was banned for new product development within
Ericsson—the main reason for the ban was that Ericsson wanted to be a
consumer of sodware technologies rather than a producer.</p>
</blockquote>
<p>From Bjarne Däcker’s thesis (2000, p.&nbsp;37):</p>
<blockquote>
<p>In February 1998, Erlang was banned within Ericsson Radio AB (ERA)
for new product projects aimed for external customers because:</p>
<p>“The selection of an implementation language implies a more long-term
commitment than selection of processors and OS, due to the longer life
cycle of implemented products. Use of a proprietary language, implies a
continued effort to maintain and further develop the support and the
development environment. It further implies that we cannot easily
benefit from, and find synergy with, the evolution following the large
scale deployment of globally used languages.”</p>
</blockquote>
<p>Joe also says, in this <a href="https://vimeo.com/97329186">talk</a>
(34:30), that there were two reasons for Erlang getting banned: 1) that
it wasn’t Java, and 2) that it wasn’t C++.<a href="#fnref1" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>It’s a common misconception is that Erlang is about
actors.</p>
<p>The actor model first presented in <a href="https://www.ijcai.org/Proceedings/73/Papers/027B.pdf"><em>A
Universal Modular Actor Formalism for Artificial Intelligence</em></a>
by Carl Hewitt, Peter Bishop, Richard Steiger (1973) and refined by
others over time, e.g.&nbsp;see Irene Greif’s <a href="https://dspace.mit.edu/handle/1721.1/57710">thesis</a> (1975) or
Gul Agha’s <a href="https://dspace.mit.edu/handle/1721.1/6952">thesis</a> (1985).</p>
<p>Erlang first appeard later in 1986, but the Erlang developers were <a href="https://erlang.org/pipermail/erlang-questions/2014-June/079794.html">not
aware</a> of the actor model. In fact Robert Virding, one of the
original Erlang designers, <a href="https://erlang.org/pipermail/erlang-questions/2014-June/079865.html">claims</a>
that knowing about the actor model might even have slowed them down.</p>
<p>Carl Hewitt has written a paper called <a href="https://arxiv.org/abs/1008.1459"><em>Actor Model of Computation:
Scalable Robust Information Systems</em></a> (2015) which documents the
differences between Erlang’s processes and the actor model.<a href="#fnref2" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Scala’s Akka seems to be of this opinion. They got
something they call “actors”, not to be confused with the actor model as
per footnote 1, and obligatory supervisors trees. They don’t appear to
have any analogues of the other Erlang behaviours though.</p>
<p>Confusingly Akka has a concept called <a href="https://doc.akka.io/docs/akka/current/general/actors.html#behavior">“behavior”</a>,
but it has nothing to do with Erlang behaviours.<a href="#fnref3" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>The intuition being that since every program using the
state monad can be rewritten to a normal form where a single
<code>read</code>/<code>get</code> followed by a single
<code>write</code>/<code>put</code>, it seems reasonable to assume that
something similar would work for <code>recv</code> and <code>send</code>
over the network. I forget the reference for the state monad normal
form, either Plotkin and Power or Uustalu?<a href="#fnref4" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bilinear interpolation on a quadrilateral using Barycentric coordinates (113 pts)]]></title>
            <link>https://gpuopen.com/learn/bilinear-interpolation-quadrilateral-barycentric-coordinates/</link>
            <guid>43654912</guid>
            <pubDate>Fri, 11 Apr 2025 15:25:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gpuopen.com/learn/bilinear-interpolation-quadrilateral-barycentric-coordinates/">https://gpuopen.com/learn/bilinear-interpolation-quadrilateral-barycentric-coordinates/</a>, See on <a href="https://news.ycombinator.com/item?id=43654912">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="bilinear-interpolation-on-a-quadrilateral-using-barycentric-coordinates">
<p>In computer graphics, we rarely encounter continuous data. We often work with digital data, and in the context of geometric modeling, this means we typically work with polygon meshes rather than procedural surfaces like Bézier patches. The most popular technique for constructing digital three-dimensional objects in dedicated modeling software is polygon modeling. The result of the creation phase is a set of polygons (mesh), where the polygons in the mesh can share vertices and edges with other polygons.</p>
<p>Although users can create various types of surfaces (e.g., non-manifold), the most common surface is the topological 2-manifold. In short, a 2-manifold is a mathematical concept in topology, where the space locally resembles the Euclidean plane in <span data-katex-display="false">\mathbb{R}^2</span>. Essentially, every point on a 2-manifold has a neighborhood that looks like a piece of the plane.</p>
<table>
<thead>
<tr>
<th>
<p>Examples of 2-manifold mesh triangle-based</p>
</th>
<th>
<p>Examples of 2-manifold mesh quad-based</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-c0e3a80bacaa605a8efa87aa5bc4e9a8-triangle_mesh1.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-triangle_mesh1.png"><img width="1500" height="900" decoding="async" alt="_images/triangle_mesh1.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-triangle_mesh1.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1500'%20height='900'%20viewBox='0%200%201500%20900'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-triangle_mesh1.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-4f93b2ed501cbdcf95b9be1633ffe3ae-triangle_mesh2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-triangle_mesh2.png"><img width="1500" height="900" decoding="async" alt="_images/triangle_mesh2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-triangle_mesh2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1500'%20height='900'%20viewBox='0%200%201500%20900'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-triangle_mesh2.png"></a></p>
</td>
</tr>
</tbody>
</table>
<p>At the vertices of a polygon, users can store additional data (per-vertex attributes), such as vertex normals (for simulating curved surfaces), texture coordinates (for texture mapping), or RGBA color.</p>
<p>In theory, all types of polygons can be used. In practice, however, 3D graphics artists most commonly use triangles and quadrilaterals. These polygons are typically referred to as topology primitives in computer graphics APIs (such as Microsoft DirectX® or Vulkan®). From an artist’s point of view, quadrilaterals are more advantageous because they are easier to work with. The properties of modeling based on quadrilaterals include:</p>
<ul>
<li>
<p>The ease of generating grid-like surfaces.</p>
</li>
<li>
<p>Creating a topology that provides an edge flow that can be easily adjusted (when adding or deleting edge loops).</p>
</li>
<li>
<p>Producing a predictable result for subdivision algorithms.</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>
<p>not clean looking mesh</p>
</th>
<th>
<p>clean looking mesh</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-fbd5adf1869c52d816eacde4203fe885-topo_bad.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-topo_bad.png"><img width="1400" height="1200" decoding="async" alt="_images/topo_bad.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-topo_bad.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1400'%20height='1200'%20viewBox='0%200%201400%201200'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-topo_bad.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-b4258168eab55b1752b279cf9b9d0f3b-topo_good.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-topo_good.png"><img width="1400" height="1200" decoding="async" alt="_images/topo_good.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-topo_good.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1400'%20height='1200'%20viewBox='0%200%201400%201200'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-topo_good.png"></a></p>
</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>The quad-based topology also provides cleaner deformations for models that will be animated.</p>
</li>
</ul>
<p>These arguments make the quadrilateral-based topology preferred by artists when modeling 3D objects.</p>
<p>Long ago, GPUs abandoned support for hardware accelerated quadrilaterals (or polygons consisting of more than 4 vertices) rasterization, therefore also interpolation of vertex attributes contained in their vertices (line rendering is for a different story). The only polygon that has hardware accelerated implementation of rasterization and interpolation of parameters is the triangle. There are very good reasons why it was the triangle that won the race I just name a few:</p>
<ul>
<li>
<p><strong>Triangulation Theorem:</strong> This theorem states that a mesh of triangles can approximate even complex surfaces.</p>
</li>
<li>
<p><strong>Triangle vertices always lie on the same plane:</strong> This is due to the fact that any three non-collinear points will always define a plane in three-dimensional space.</p>
</li>
<li>
<p><strong>Barycentric Coordinates:</strong> This coordinate system is used in geometry to express the position of a point within a triangle. These coordinates can be used for interpolation of vertex attributes across the surface of a triangle.</p>
</li>
<li>
<p><strong>Less complexity of the circuit:</strong> Supporting rasterization and interpolation for triangles only requires fewer transistors, which means this functionality occupies less space on the chip. This can result in a smaller (and cheaper to produce) chip, or the saved space can be used for other functionalities.</p>
</li>
</ul>
<p>Triangles are the foundation of real-time computer graphics, as reflected in the primitive topology supported by graphics APIs. All other polygon types used in meshes must be converted into triangles. When a modeling application allows quad-mesh construction, the visualization of this mesh is not based on quadrilaterals. Instead, the application converts them into triangle meshes. This necessary conversion can introduce <span data-katex-display="false">C^1</span> discontinuities in interpolated vertex attributes (such as texture coordinates, vertex normal vectors, and vertex colors) on the quadrilateral surface.</p>
<p>In the case of the topic covered in this article, the discontinuity of <span data-katex-display="false">C^1</span> refers to the point at which the piecewise function is continuous, but its first derivative is not. In other words, the piecewise function itself has no jumps or breaks, but the slope (or rate of change) of the piecewise function has jumps or breaks.</p>
<table>
<thead>
<tr>
<th>
</th>
<th>
<p><span data-katex-display="false">C^1</span> continuity</p>
</th>
<th>
<p><span data-katex-display="false">C^1</span> discontinuity</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p>piecewise function</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-336ba43cfd66c572aed1f97f498dbda0-C0_con.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C0_con.png"><img width="557" height="557" decoding="async" alt="_images/C0_con.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C0_con.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='557'%20height='557'%20viewBox='0%200%20557%20557'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C0_con.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-436b262697ac66609438b3917c9cc13d-C0_dis.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C0_dis.png"><img width="555" height="556" decoding="async" alt="_images/C0_dis.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C0_dis.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='555'%20height='556'%20viewBox='0%200%20555%20556'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C0_dis.png"></a></p>
</td>
</tr>
<tr>
<td>
<p>first derivative</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-cf9d07484a7ec942573de83a19ba0155-C1_con.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C1_con.png"><img width="493" height="494" decoding="async" alt="_images/C1_con.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C1_con.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='493'%20height='494'%20viewBox='0%200%20493%20494'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C1_con.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-36bf40f631be9dd2e36c3184d6e97ccc-C1_dis.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C1_dis.png"><img width="493" height="494" decoding="async" alt="_images/C1_dis.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C1_dis.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='493'%20height='494'%20viewBox='0%200%20493%20494'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-C1_dis.png"></a></p>
</td>
</tr>
</tbody>
</table>
<p>For rasterization of quadrilaterals as two triangles, <span data-katex-display="false">C^1</span> discontinuity in the interpolation of vertex attributes is most visible along the newly created edge that splits the quadrilateral into two triangles.</p>
<table>
<thead>
<tr>
<th>
<p>Vertex Color</p>
</th>
<th>
<p>Texture Coordinates</p>
</th>
<th>
<p>Vertex Normal</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-19bc95d1700790bc331564956a47d944-1.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-1.png"><img width="640" height="640" decoding="async" alt="_images/1.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-1.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-1.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-ec24b26e7fd79fcdf5c902465cc341d3-3.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-3.png"><img width="640" height="640" decoding="async" alt="_images/3.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-3.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-3.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-0290aed55724f46beb0047c2f18bc97c-5.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-5.png"><img width="640" height="640" decoding="async" alt="_images/5.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-5.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-5.png"></a></p>
</td>
</tr>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-f7846f8311fa9636ec3ca8470f3f4df6-trapez1.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez1.gif"><img width="300" height="300" decoding="async" alt="_images/trapez1.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez1.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-fcbf880a8c27c6357716ed2b7647b83c-trapez2.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez2.gif"><img width="300" height="300" decoding="async" alt="_images/trapez2.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez2.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-9360fabb2c03c5c58cdc8c5b3549eac4-trapez3.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez3.gif"><img width="300" height="300" decoding="async" alt="_images/trapez3.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez3.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-28b0dc381e093add2e76b8cb98e364c5-tea1.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea1.gif"><img width="300" height="300" decoding="async" alt="_images/tea1.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea1.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-ad784df2d2237ae6c481595eba609ab6-tea2.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea2.gif"><img width="300" height="300" decoding="async" alt="_images/tea2.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea2.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-de27696e3cac248658749e0bc30b229c-tea3.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea3.gif"><img width="300" height="300" decoding="async" alt="_images/tea3.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea3.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
</tbody>
</table>
<section id="purpose">
<h2 id="purpose">Purpose<a href="#purpose" title="Permalink to this heading"></a></h2>
<p>The purpose of this article is to propose a new method that preserves <span data-katex-display="false">C^1</span> continuity over the common edge of two generated triangles from convex quadrilaterals. This new method is based on an algebraic solution for the Bilinear interpolation coefficient expressed in Barycentric coordinates. Bilinear interpolation has the advantage of being the simplest interpolation from an algebraic perspective. Consequently, the computational overhead is negligibly small. Additionally, linear interpolation allows for the easy construction of other types of interpolation, such as polynomial interpolation. The algebraic solution will then be implemented and tested using the three available hardware-accelerated pipelines supported by GPU hardware.</p>
</section>
<section id="state-of-the-art">
<h2 id="state-of-the-art">State of the Art<a href="#state-of-the-art" title="Permalink to this heading"></a></h2>
<p>Currently, efforts to address the problem outlined in this article can be categorized into the following approaches:</p>
<section id="quadrilateral-subdivision">
<h3 id="quadrilateral-subdivision">Quadrilateral subdivision<a href="#quadrilateral-subdivision" title="Permalink to this heading"></a></h3>
<p>The first approach is not to eliminate the issue but to minimize it. This is achieved by subdividing the quadrilateral until rendering artifacts become imperceptible to the observer or are less noticeable than the aliasing artifacts created during rasterization.</p>
<p>Quadrilateral subdivision can be performed dynamically (at application runtime) using a hardware-accelerated Tessellation Shaders stage.</p>
<table>
<thead>
<tr>
<th>
<p>Tessellation level 1</p>
</th>
<th>
<p>Tessellation level 2</p>
</th>
<th>
<p>Tessellation level 3</p>
</th>
<th>
<p>Tessellation level 4</p>
</th>
<th>
<p>Tessellation level 5</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-7195f868fe64c9cd0e5ec3f1bab67337-Sub1.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub1.png"><img width="311" height="311" decoding="async" alt="_images/Sub1.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub1.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='311'%20height='311'%20viewBox='0%200%20311%20311'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub1.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-51a09f1dad2eeb2c437023c09ee37e26-Sub2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub2.png"><img width="311" height="311" decoding="async" alt="_images/Sub2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='311'%20height='311'%20viewBox='0%200%20311%20311'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub2.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-fa23b2bb6c78ecfde4d3f76c7e097a11-Sub3.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub3.png"><img width="311" height="311" decoding="async" alt="_images/Sub3.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub3.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='311'%20height='311'%20viewBox='0%200%20311%20311'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub3.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-ebcad0fc7e9e543ee0d1de9bbd857fcd-Sub4.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub4.png"><img width="311" height="311" decoding="async" alt="_images/Sub4.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub4.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='311'%20height='311'%20viewBox='0%200%20311%20311'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub4.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-9d5909b93f19926d1eafe9ea1294cba3-Sub5.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub5.png"><img width="311" height="311" decoding="async" alt="_images/Sub5.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub5.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='311'%20height='311'%20viewBox='0%200%20311%20311'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Sub5.png"></a></p>
</td>
</tr>
</tbody>
</table>
<p>Alternatively, quadrilateral subdivision can be performed statically (during the content creation phase) using dedicated tools provided by modeling software, such as the Blender® Subdivision Surface Modifier.</p>
<table>
<thead>
<tr>
<th>
<p>Mesh in Blender before usage of Subdivision Surface Modifier</p>
</th>
<th>
<p>Mesh in Blender after usage of Subdivision Surface Modifier</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-7d62ececbe262f83f9de78d318130ed0-Catmull_OFF2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Catmull_OFF2.png"><img width="1500" height="900" decoding="async" alt="_images/Catmull_OFF2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Catmull_OFF2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1500'%20height='900'%20viewBox='0%200%201500%20900'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Catmull_OFF2.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-316162ef83d1cef5784a1772d52a8387-Catmull_ON2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Catmull_ON2.png"><img width="1500" height="900" decoding="async" alt="_images/Catmull_ON2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Catmull_ON2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1500'%20height='900'%20viewBox='0%200%201500%20900'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Catmull_ON2.png"></a></p>
</td>
</tr>
</tbody>
</table>
<p>Subdividing meshes (at application runtime or not) effectively reduces the visibility of all types of <span data-katex-display="false">C^1</span> discontinuities to the observer, but at the expense of decreasing performance and/or increasing memory overhead in the mesh rendering process.</p>
</section>
<section id="mean-value-coordinates">
<h3 id="mean-value-coordinates">Mean value coordinates<a href="#mean-value-coordinates" title="Permalink to this heading"></a></h3>
<p>A different attempt to solve the problem was offered in the article <a href="https://dl.acm.org/doi/10.1145/1058129.1058131" target="_blank">A quadrilateral rendering primitive</a>, where the authors proposed hardware-accelerated quadrilateral rasterization. For vertex attribute interpolation inside quadrilaterals (which may be non-planar), the authors chose to use <a href="https://www.sciencedirect.com/science/article/abs/pii/S0167839603000025" target="_blank">mean value coordinates</a>. However, these coordinates yield results similar to those of bilinear interpolation. The following caveats can be pointed out:</p>
<ul>
<li>
<p>In the calculation of mean value coordinates, transcendental functions are used. The values of these functions can be determined with predetermined precision. However, from a performance perspective, they introduce a certain overhead, depending on the hardware implementation of the calculation of transcendental functions.</p>
</li>
<li>
<p>Mean value coordinates interpolation does not generate straight lines, which might not be desirable for users. This hardware solution has not yet been implemented using the GPU (at the time of writing this article). However, the authors of <a href="https://www.jcgt.org/published/0011/03/04/paper-lowres.pdf" target="_blank">Barycentric quad rasterization</a> attempted to implement it using the Geometry Shader pipeline available in modern GPUs. The presented implementation has a disadvantage: it uses double-precision floating-point variables, which significantly impact performance overhead. GPUs for real-time rendering are primarily designed to support single-precision floating-point calculations.</p>
</li>
</ul>
</section>
<section id="fragment-shader-calculation">
<h3 id="fragment-shader-calculation">Fragment Shader calculation<a href="#fragment-shader-calculation" title="Permalink to this heading"></a></h3>
<p>Other authors, such as Inigo Quilez <a href="https://iquilezles.org/articles/ibilinear/" target="_blank">inverse bilinear interpolation – 2010</a> and Nathan Reed <a href="https://www.reedbeta.com/blog/quadrilateral-interpolation-part-2/" target="_blank">Quadrilateral Interpolation, Part 2</a>, have observed the advantages of bilinear interpolation and proposed solutions through implementations using the Fragment Shader.</p>
<p>The presented solutions demonstrate the implementation of bilinear interpolation for quadrilaterals, but they only show how to do it for a single quadrilateral and for its texture coordinate vertex attribute. They do not address how to apply it in real-life three-dimensional mesh models.</p>
</section>
</section>
<section id="proposition-of-the-new-method">
<h2 id="proposition-of-the-new-method">Proposition of the New Method<a href="#proposition-of-the-new-method" title="Permalink to this heading"></a></h2>
<p>The method presented in the article consists of an equation that can express Bilinear interpolation coefficients <span data-katex-display="false">u, v</span> using Barycentric coordinates <span data-katex-display="false">\alpha, \beta, \gamma</span> of one of the two triangles into which each convex quadrilateral can be divided.</p>
<p>The Euclidean coordinates of every point <span data-katex-display="false">P</span> in a given quadrilateral on the plane can be expressed as a Bilinear interpolation of the Euclidean coordinates of its vertices.</p>
<p>The line segment <span data-katex-display="false">AB</span> is parameterized as <span data-katex-display="false">E(u)=A + u(B-A), , u \in[0,1]</span>,</p>
<p>the line segment <span data-katex-display="false">DC</span> is parameterized as <span data-katex-display="false">F(u)=D + u(C-D), , u \in[0,1]</span>,</p>
<p>the line segment <span data-katex-display="false">DA</span> is parameterized as <span data-katex-display="false">G(v)=A + v(D-A), , v \in[0,1]</span>,</p>
<p>the line segment <span data-katex-display="false">BC</span> is parameterized as <span data-katex-display="false">H(v)=G + v(H-G), , v \in[0,1]</span>.</p>
<p>The point <span data-katex-display="false">P</span> is the intersection of the two segments <span data-katex-display="false">E(u)F(u)</span> and <span data-katex-display="false">G(v)H(v)</span>.</p>
<p>Alternatively, the Euclidean coordinates of point <span data-katex-display="false">P</span> can be expressed as a Barycentric coordinates of</p>
<p>a triangle <span data-katex-display="false">ABD \ </span> <span data-katex-display="false">P = \alpha A + \beta B + \gamma D</span></p>
<p>where <span data-katex-display="false">\alpha,\beta,\gamma</span> are positive real numbers such that <span data-katex-display="false">\alpha + \beta + \gamma = 1</span>..</p>
<p>This can be shown geometrically in two-dimensional space.</p>
<table>
<thead>
<tr>
<th>
<p>Bilinear interpolation inside quadrilateral <span data-katex-display="false">ABCD</span></p>
</th>
<th>
<p>Barycentric interpolation inside triangle <span data-katex-display="false">ABD</span></p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-39c22990cf73177a5cd6bf04738e0b33-interpolation1.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-interpolation1.png"><img width="600" height="400" decoding="async" alt="_images/interpolation1.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-interpolation1.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='600'%20height='400'%20viewBox='0%200%20600%20400'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-interpolation1.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-eacaa248e95479d42b5631c734d28d1d-interpolation2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-interpolation2.png"><img width="600" height="400" decoding="async" alt="_images/interpolation2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-interpolation2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='600'%20height='400'%20viewBox='0%200%20600%20400'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-interpolation2.png"></a></p>
</td>
</tr>
</tbody>
</table>
<p>The Euclidean coordinates of point <span data-katex-display="false">P</span> are the same whether it is inside the quadrilateral <span data-katex-display="false">ABCD</span> or the triangle <span data-katex-display="false">ABC</span>.</p>
<p>Depending on the Euclidean coordinates of point <span data-katex-display="false">P</span>, it may lie inside triangle <span data-katex-display="false">ABC</span> or triangle <span data-katex-display="false">ACD</span>. There is a system of equations that describe the coordinates of point <span data-katex-display="false">P</span> using the vertices of quadrilateral <span data-katex-display="false">ABCD</span> and the Bilinear interpolation coefficients <span data-katex-display="false">u,v</span>, as well as the vertices of triangles <span data-katex-display="false">ABC</span> or <span data-katex-display="false">ACD</span> and the Barycentric coordinates for the same point <span data-katex-display="false">P</span>.</p>
<p>The coordinates of point <span data-katex-display="false">P</span> in <span data-katex-display="false">\mathbb{R}^2</span> can be calculated using Barycentric coordinates <span data-katex-display="false">\alpha, \beta, \gamma</span> and Bilinear interpolation coefficients <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span>, which can be expressed by the following two independent set of equations:</p>
<p>The coordinates of point <span data-katex-display="false">P</span> in <span data-katex-display="false">\mathbb{R}^2</span> can be calculated using Barycentric coordinates <span data-katex-display="false">\alpha, \beta, \gamma</span> and Bilinear interpolation coefficients <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span>, which can be expressed by the following two independent sets of equations:</p>
<p><span data-katex-display="true">     \begin{cases}         A_x + v(D_x - A_x) = G_x \\         A_y + v(D_y - A_y) = G_y \\         B_x + v(C_x - B_x) = H_x \\         B_y + v(C_y - B_y) = H_y \\         G_x + s(H_x - G_x) = P_x \\         G_y + s(H_y - G_y) = P_y \\         \alpha A_x + \beta B_x + \gamma D_x  = P_x \\         \alpha A_y + \beta B_y + \gamma D_y  = P_y \\     \end{cases}     \newline \newline     \begin{cases}         A_x + u(B_x - A_x) = E_x \\         A_y + u(B_y - A_y) = E_y \\         D_x + u(C_x - D_x) = F_x \\         D_y + u(C_y - D_y) = F_y \\         E_x + t(F_x - E_x) = P_x \\         E_y + t(F_x - E_y) = P_y \\         \alpha A_x + \beta B_x + \gamma D_x  = P_x \\         \alpha A_y + \beta B_y + \gamma D_y  = P_y \\     \end{cases} </span></p>
<p>The equations can be reduced to the form:</p>
<p><span data-katex-display="true">     \begin{cases}         A_x + u(B_x - A_x) + s(D_x + u(C_x - D_x) - A_x - u(B_x - A_x)) = \alpha A_x + \beta B_x + \gamma D_x \\         A_y + u(B_y - A_y) + s(D_y + u(C_y - D_y) - A_y - u(B_y - A_y)) = \alpha A_y + \beta B_y + \gamma D_y \\     \end{cases}     \newline \newline     \begin{cases}         A_x + v(D_x - A_x) + t(B_x + v(C_x - B_x) - A_x - v(D_x - A_x)) = \alpha A_x + \beta B_x + \gamma D_x \\         A_y + v(D_y - A_y) + t(B_y + v(C_y - B_y) - A_y - v(D_y - A_y)) = \alpha A_y + \beta B_y + \gamma D_y \\     \end{cases} </span></p>
<p>We can further simplify using:</p>
<p><span data-katex-display="true">     \begin{cases}         \vec{P} = D-A \\         \vec{R} = B-A \\         \vec{Q} = C-B-D+A \\                     \alpha = (1-\beta-\gamma) \\     \end{cases} </span></p>
<p>to a two-system of equations:</p>
<p><span data-katex-display="true">     \begin{cases}         u\vec{R}_x + s(\vec{P}_x + u\vec{Q}_x) = \beta \vec{R}_x + \gamma \vec{P}_x \\         u\vec{R}_y + s(\vec{P}_y + u\vec{Q}_y) = \beta \vec{R}_y + \gamma \vec{P}_y \\     \end{cases}     \newline \newline     \begin{cases}         v\vec{P}_x + t(\vec{R}_x + v\vec{Q}_x) = \beta \vec{R}_x + \gamma \vec{P}_x \\         v\vec{P}_y + t(\vec{R}_y + v\vec{Q}_y) = \beta \vec{R}_y + \gamma \vec{P}_y \\     \end{cases} </span></p>
<p>Now, solving the two systems of equations for <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span> leads to the problem of solving two quadratic equations:</p>
<p><span data-katex-display="true">     \begin{cases}         u^2(\vec{R}_x\vec{Q}_y - \vec{Q}_x\vec{R}_y) + u(\vec{R}_x\vec{P}_y - \vec{P}_x\vec{R}_y + \beta(\vec{Q}_x\vec{R}_y-\vec{R}_x\vec{Q}_y) + \gamma (\vec{Q}_x\vec{P}_y-\vec{P}_x\vec{Q}_y)) - \\         \beta(\vec{P}_x\vec{R}_y-\vec{R}_x\vec{P}_y) = 0\\     \end{cases}     \newline \newline     \begin{cases}         v^2(\vec{P}_x\vec{Q}_y - \vec{Q}_x\vec{P}_y) + v(\vec{P}_x\vec{R}_y - \vec{R}_x\vec{P}_y + \beta(\vec{Q}_x\vec{R}_y-\vec{R}_x\vec{Q}_y) + \gamma(\vec{Q}_x\vec{P}_y-\vec{P}_x\vec{Q}_y)) - \\         \gamma(\vec{R}_x\vec{P}_y-\vec{P}_x\vec{R}_y) = 0\\     \end{cases} </span></p>
<p>Embedding this solution in <span data-katex-display="false">\mathbb{R}^3</span> at the plane <span data-katex-display="false">z=0</span> with the surface normal vector for a triangle <span data-katex-display="false">\vec{N} = (0,0,1)</span>, the equation can be written as:</p>
<p><span data-katex-display="true">         u^2 \vec{N}\cdot(\vec{R}\times \vec{Q}) + u(\vec{N}\cdot(\vec{R}\times \vec{P}) + \beta \vec{N}\cdot(\vec{Q}\times \vec{R}) + \gamma \vec{N}\cdot(\vec{Q}\times \vec{P})) + \beta \vec{N}\cdot(\vec{P}\times \vec{R}) = 0     \newline \newline         v^2 \vec{N}\cdot(\vec{P}\times \vec{Q}) + v(\vec{N}\cdot(\vec{P}\times \vec{R}) + \beta \vec{N}\cdot(\vec{Q}\times \vec{R}) + \gamma \vec{N}\cdot(\vec{Q}\times \vec{P})) - \gamma \vec{N}\cdot(\vec{R}\times \vec{P}) = 0 </span></p>
<p>where <span data-katex-display="false">\times</span> is the cross product in <span data-katex-display="false">\mathbb{R}^3</span> and <span data-katex-display="false">\cdot</span> is the dot product in <span data-katex-display="false">\mathbb{R}^3</span>.</p>
<p>Substituting the triple dot product into the equation:</p>
<p><span data-katex-display="true">     \begin{cases}         A_u = \vec{N}\cdot(\vec{R}\times \vec{Q}) \\                 A_v = \vec{N}\cdot(\vec{P}\times \vec{Q}) \\         B = \vec{N}\cdot(\vec{P}\times \vec{R}) \\     \end{cases} </span></p>
<p>the final two equations are as follows:</p>
<p><span data-katex-display="true">         u^2 A_u - u(\beta A_u + \gamma A_v + B) + \beta B = 0 \\         v^2 A_v - v(\beta A_u + \gamma A_v - B) - \gamma B = 0 \\ </span></p>
<p>The last step is to solve these two quadratic equations for the parameters <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span>.</p>
<p>The equation can be used to calculate bilinear interpolation coefficients <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span> for any quadrilateral in three-dimensional space. This is because if a quadrilateral is embedded in any plane in <span data-katex-display="false">\mathbb{R}^3</span>, it can be transformed isometrically to the plane <span data-katex-display="false">z=0</span>, and the premise still holds after isometric mapping.</p>
<p>It is worth noting that the above equations show that the bilinear interpolation coefficients <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span> depend on all four Euclidean coordinates of the vertices in the quadrilateral. If we are dealing with static meshes, these coefficients can be calculated in advance (this is not necessary at runtime). However, if we are working with dynamic (animated) meshes, it is necessary to calculate these coefficients at runtime. Therefore, we need to use a Graphics Pipeline stage where we still have access to all four positions of the vertices of the quadrilateral.</p>
<section id="parallelograms">
<h3 id="parallelograms">Parallelograms<a href="#parallelograms" title="Permalink to this heading"></a></h3>
<p>When rendering quadrilaterals limited to parallelograms, the solution is much simpler because <span data-katex-display="false">\vec{Q} = \vec{0}</span>. This fact can be deduced after a quick analysis.</p>
<p>Vector <span data-katex-display="false">\vec{Q}</span> is described as <span data-katex-display="false">\vec{Q} = (C - B) + (A - D)</span>. In parallelograms, the vector from the first parenthesis <span data-katex-display="false">\vec{C - B}</span>, by definition, has the same length as the vector <span data-katex-display="false">\vec{A - D}</span> but in the opposite direction. Thus, the sum of these vectors is always the zero vector.</p>
<p>Therefore, when <span data-katex-display="false">\vec{Q} = \vec{0}</span>, we are no longer dealing with a quadratic equation, but with a linear equation, making the solution much simpler:</p>
<p><span data-katex-display="true">         u = \beta \\                 v = \gamma \\ </span></p>
<p>This simpler case has already been described, and the solution can be found in <a href="https://asawicki.info/news_1721_how_to_correctly_interpolate_vertex_attributes_on_a_parallelogram_using_modern_gpus" target="_blank">How to Correctly Interpolate Vertex Attributes on a Parallelogram Using Modern GPUs?</a>.</p>
</section>
</section>
<section id="hardware-accelerated-implementation">
<h2 id="hardware-accelerated-implementation">Hardware-accelerated implementation<a href="#hardware-accelerated-implementation" title="Permalink to this heading"></a></h2>
<p>The hardware-accelerated implementation of the algebraic solution presented in the previous section can be achieved using three different Graphics Pipeline stages: Geometry Shader, Tessellation Shader, and Mesh Shader. This three-way implementation demonstrates that the technique is feasible on GPU hardware released as far back as 2008. The following source code uses the GLSL shading language.</p>
<p>The table below describes what API versions and extensions are necessary to implement the presented technique:</p>
<table>
<thead>
<tr>
<th>
</th>
<th>
<p>Vulkan®</p>
</th>
<th>
<p>DirectX®</p>
</th>
<th>
<p>OpenGL®</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p>Geometry Shader</p>
</td>
<td>
<p>Vulkan® geometry Shader feature enabled</p>
</td>
<td>
<p>DirectX® 10</p>
</td>
<td>
<p>OpenGL® 3.2</p>
</td>
</tr>
<tr>
<td>
<p>Tessellation Shader</p>
</td>
<td>
<p>Vulkan® tessellation Shader feature enabled</p>
</td>
<td>
<p>DirectX® 11</p>
</td>
<td>
<p>OpenGL® 4</p>
</td>
</tr>
<tr>
<td>
<p>Mesh Shader</p>
</td>
<td>
<p>Vulkan® VK_EXT_mesh_shader extension enabled</p>
</td>
<td>
<p>DirectX® 12 Ultimate</p>
</td>
<td>
<p>OpenGL® 4 GL_NV_mesh_shader extension enabled</p>
</td>
</tr>
</tbody>
</table>
<p>The implementation of the presented method requires Barycentric coordinates of the currently processed fragment in the Fragment Shader. This is possible when the following extensions are available:</p>
<ul>
<li>
<p>Vulkan® VK_KHR_fragment_shader_barycentric extension.</p>
</li>
<li>
<p>DirectX® 12 Shader Model 6.1.</p>
</li>
<li>
<p>OpenGL® 4 GL_NV_fragment_shader_barycentric or GL_AMD_shader_explicit_vertex_parameter.</p>
</li>
</ul>
<p>If the GPU does not support the above extension, there is a way to generate them in the Geometry, Tessellation, or Mesh Shader stage.</p>
<p>The implementation of the new method presented in this article can be divided into the following steps:</p>
<ol>
<li>
<p>Delivering Quadrilateral Primitives to the Graphics Pipeline.</p>
<p>Quadrilateral primitives are not available in modern graphics APIs (excluding the legacy OpenGL GL_QUADS and GL_QUAD_STRIP primitive types). To support quadrilateral-like primitives, use the following methods:</p>
<ul>
<li>
<p>Geometry Shader: With the Geometry Shader stage, adjacency primitives can be used to mimic quadrilateral primitives:</p>
<ul>
<li>
<p>OpenGL® GL_LINES_ADJACENCY</p>
</li>
<li>
<p>Vulkan® VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY</p>
</li>
<li>
<p>DirectX® 12/11 D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ</p>
</li>
</ul>
</li>
<li>
<p>With Tessellation stages, a new Patch primitive was introduced. In this topology, the number of vertices defined in the meshes is not fixed, but the so-called Control Points range from 1 to 32 per Patch. These Control Points can be treated as Control Points of Bézier patches, but they can also be treated as vertices of a polygon. The implementation of the solution presented in this article uses a Patch with 4 Control Points and treats them as vertices of a quadrilateral.</p>
</li>
<li>
<p>Mesh Shader: Using Mesh Shaders, there are many ways to introduce a quadrilateral primitive into the Graphics Pipeline. This stage was developed to provide more flexibility to the user. Therefore, it is up to the user to generate meshlets that will contain quadrilaterals in some way (this is not within the scope of this article).</p>
</li>
</ul>
</li>
<li>
<p>The next step is to calculate the constants <span data-katex-display="false">A_u, A_v, B</span> (using one of the steps above), which will then be used in the Fragment Shader. We need to calculate these constants in one of the above pipeline stages because, in the Fragment Shader, we do not have access to the four attributes of the quadrilateral vertices (the Barycentric coordinate extension, if present, only gives us access to the three attributes of the triangle vertices). By analyzing the algebraic solution of the presented method, we can see that these constants depend on the positions of the vertices of the quadrilateral.</p>
</li>
</ol>
<p>The following function needs to be executed in the Geometry Shader, Tessellation Evaluation Shader, or Mesh Shader.</p>
<div>

<pre><code><span>    </span><span>vec3</span><span> </span><span>calculateConstants</span><span>(</span><span>vec3</span><span> </span><span>v0</span><span>,</span><span> </span><span>vec3</span><span> </span><span>v1</span><span>,</span><span> </span><span>vec3</span><span> </span><span>v2</span><span>,</span><span> </span><span>vec3</span><span> </span><span>v3</span><span>)</span>
<span>    </span><span>{</span>
<span>        </span><span>const</span><span> </span><span>vec3</span><span> </span><span>v10</span><span> </span><span>=</span><span> </span><span>v1</span><span> </span><span>-</span><span> </span><span>v0</span><span>;</span>
<span>        </span><span>const</span><span> </span><span>vec3</span><span> </span><span>v30</span><span> </span><span>=</span><span> </span><span>v3</span><span> </span><span>-</span><span> </span><span>v0</span><span>;</span>
<span>        </span><span>const</span><span> </span><span>vec3</span><span> </span><span>crossv10v30</span><span> </span><span>=</span><span> </span><span>cross</span><span>(</span><span>v10</span><span>,</span><span> </span><span>v30</span><span>);</span>
<span>        </span><span>const</span><span> </span><span>vec3</span><span> </span><span>n</span><span> </span><span>=</span><span> </span><span>normalize</span><span>(</span><span>crossv10v30</span><span>);</span>
<span>        </span><span>const</span><span> </span><span>vec3</span><span> </span><span>d</span><span> </span><span>=</span><span> </span><span>v0</span><span> </span><span>-</span><span> </span><span>v1</span><span> </span><span>+</span><span> </span><span>v2</span><span> </span><span>-</span><span> </span><span>v3</span><span>;</span>
<span>        </span><span>float</span><span> </span><span>A_u</span><span> </span><span>=</span><span> </span><span>dot</span><span>(</span><span>n</span><span>,</span><span> </span><span>cross</span><span>(</span><span>d</span><span>,</span><span> </span><span>v30</span><span>));</span>
<span>        </span><span>float</span><span> </span><span>A_v</span><span> </span><span>=</span><span> </span><span>dot</span><span>(</span><span>n</span><span>,</span><span> </span><span>cross</span><span>(</span><span>d</span><span>,</span><span> </span><span>v10</span><span>));</span>
<span>        </span><span>const</span><span> </span><span>float</span><span> </span><span>B</span><span> </span><span>=</span><span>  </span><span>dot</span><span>(</span><span>n</span><span>,</span><span> </span><span>crossv10v30</span><span>);</span>
<span>        </span><span>A_u</span><span> </span><span>=</span><span> </span><span>abs</span><span>(</span><span>A_u</span><span>)</span><span> </span><span>&lt;</span><span> </span><span>0.00001</span><span> </span><span>?</span><span> </span><span>0.0</span><span> </span><span>:</span><span> </span><span>A_u</span><span>;</span>
<span>        </span><span>A_v</span><span> </span><span>=</span><span> </span><span>abs</span><span>(</span><span>A_v</span><span>)</span><span> </span><span>&lt;</span><span> </span><span>0.00001</span><span> </span><span>?</span><span> </span><span>0.0</span><span> </span><span>:</span><span> </span><span>A_v</span><span>;</span>
<span>        </span><span>return</span><span> </span><span>vec3</span><span>(</span><span>A_u</span><span>,</span><span> </span><span>A_v</span><span>,</span><span> </span><span>B</span><span>);</span>
<span>    </span><span>}</span>
</code></pre>
</div>
<p>Where <code><span>v0,</span> <span>v1,</span> <span>v2,</span> <span>v3</span></code> are the Euclidean coordinates of the quadrilateral vertices in the following order:</p>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-0c5d6cc87c5c76539632837dfb64b19b-Picture6a.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture6a.png"><img width="340" height="336" decoding="async" alt="_images/Picture6a.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture6a.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='340'%20height='336'%20viewBox='0%200%20340%20336'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture6a.png"></a></p>
<p>The calculated values of <code><span>A_u,</span> <span>A_v</span></code> and <code><span>B</span></code> are then passed to the Fragment Shader.</p>
<ol start="2">
<li>
<p>Passing vertex attributes to the Fragment Shader.</p>
</li>
</ol>
<p>For Bilinear interpolation to work in a Fragment Shader, we need to be able to fetch all four vertex attributes (such as texture coordinates, vertex normal, and vertex color) in it.</p>
<ul>
<li>
<p>If the Barycentric coordinate extension is available, we have access to three of these attributes, so another stage must export the missing vertex attribute of the quadrilateral. The following code can be used in the Fragment Shader:</p>
</li>
</ul>
<div>

<pre><code><span>layout</span><span> </span><span>(</span><span>location</span><span> </span><span>=</span><span> </span><span>0</span><span>)</span><span> </span><span>pervertexEXT</span><span> </span><span>in</span><span> </span><span>block</span>
<span>{</span>
<span>	</span><span>vec3</span><span> </span><span>Normal</span><span>;</span>
<span>	</span><span>flat</span><span> </span><span>vec3</span><span> </span><span>NormalExtra</span><span>;</span>
<span>	</span><span>vec2</span><span> </span><span>Texcoord</span><span>;</span>
<span>	</span><span>flat</span><span> </span><span>vec2</span><span> </span><span>TexcoordExtra</span><span>;</span>
<span>	</span><span>vec4</span><span> </span><span>Color</span><span>;</span>
<span>	</span><span>flat</span><span> </span><span>vec4</span><span> </span><span>ColorExtra</span><span>;</span>
<span>	</span><span>flat</span><span> </span><span>vec3</span><span> </span><span>BaryConstants</span><span>;</span>
<span>}</span><span> </span><span>In</span><span>[];</span>
</code></pre>
</div>
<ul>
<li>
<p>If the Barycentric coordinate extension is not available, all four vertex attributes need to be exported as a four-element array, with a variable calculated to imitate the Barycentric Coordinate. The following code can be used in the Fragment Shader:</p>
</li>
</ul>
<div>

<pre><code><span>layout</span><span>(</span><span>location</span><span> </span><span>=</span><span> </span><span>0</span><span>)</span><span> </span><span>in</span><span> </span><span>block</span>
<span>{</span>
<span>    </span><span>flat</span><span> </span><span>vec3</span><span> </span><span>Normal</span><span>[</span><span>4</span><span>];</span>
<span>    </span><span>flat</span><span> </span><span>vec2</span><span> </span><span>Texcoord</span><span>[</span><span>4</span><span>];</span>
<span>	</span><span>flat</span><span> </span><span>vec4</span><span> </span><span>Color</span><span>[</span><span>4</span><span>];</span>
<span>	</span><span>flat</span><span> </span><span>vec3</span><span> </span><span>BaryConstants</span><span>;</span>
<span>	</span><span>vec3</span><span> </span><span>BarycentricCoordinate</span><span>;</span><span>	</span>
<span>}</span><span> </span><span>In</span><span>;</span>
</code></pre>
</div>
<ol start="3">
<li>
<p>Orders of Barycentric coordinates in the triangles formed when dividing the quadrilateral.</p>
</li>
</ol>
<p>When using Barycentric coordinates for interpolation of vertex attributes, the order in which they are defined in the triangle doesn’t matter. However, in the implementation method described in this article, the specific order is important. This order can be visually represented as follows:</p>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-9d13ced0d393aa58b80b0fd0f1691b1e-geom_bary3.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-geom_bary3.png"><img width="420" height="380" decoding="async" alt="_images/geom_bary3.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-geom_bary3.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='420'%20height='380'%20viewBox='0%200%20420%20380'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-geom_bary3.png"></a></p>
<p>Where <span>red</span> color represents the influence of the <span data-katex-display="false">\alpha</span> Barycentric coordinate, <span>green</span> represents <span data-katex-display="false">\beta</span>, and <span>blue</span> represents <span data-katex-display="false">\gamma</span>.</p>
<p>This order of Barycentric coordinates can be supplied by hardware when the proper extension is available, or these data can be generated in the Tessellation or Geometry Shader stage.</p>
<ol start="4">
<li>
<p>Calculate <span data-katex-display="false">u, v</span> Bilinear coefficients.</p>
</li>
</ol>
<p>In the Fragment Shader, the calculation of Bilinear interpolation coefficients <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span> can be done by calling the following function.</p>
<div>

<pre><code><span>    </span><span>vec2</span><span> </span><span>calculateBilinear</span><span>(</span><span>float</span><span> </span><span>beta</span><span>,</span><span> </span><span>float</span><span> </span><span>gamma</span><span>,</span><span> </span><span>float</span><span> </span><span>A_u</span><span>,</span><span> </span><span>float</span><span> </span><span>A_v</span><span>,</span><span> </span><span>float</span><span> </span><span>B</span><span>)</span>
<span>    </span><span>{</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>B_u</span><span> </span><span>=</span><span> </span><span>B</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>B_v</span><span> </span><span>=</span><span> </span><span>-</span><span>B</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>B2</span><span> </span><span>=</span><span> </span><span>beta</span><span> </span><span>*</span><span> </span><span>A_v</span><span> </span><span>+</span><span> </span><span>gamma</span><span> </span><span>*</span><span> </span><span>A_u</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>t_u</span><span> </span><span>=</span><span> </span><span>B_u</span><span> </span><span>-</span><span> </span><span>B2</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>t_v</span><span> </span><span>=</span><span> </span><span>B_v</span><span> </span><span>-</span><span> </span><span>B2</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>b_u</span><span> </span><span>=</span><span> </span><span>t_u</span><span> </span><span>/</span><span> </span><span>A_u</span><span> </span><span>*</span><span> </span><span>0.5</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>b_v</span><span> </span><span>=</span><span> </span><span>t_v</span><span> </span><span>/</span><span> </span><span>A_v</span><span> </span><span>*</span><span> </span><span>0.5</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>c_u</span><span> </span><span>=</span><span> </span><span>gamma</span><span> </span><span>*</span><span> </span><span>B_v</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>c_v</span><span> </span><span>=</span><span> </span><span>beta</span><span> </span><span>*</span><span> </span><span>B_u</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>d_u</span><span> </span><span>=</span><span> </span><span>b_u</span><span> </span><span>*</span><span> </span><span>b_u</span><span> </span><span>-</span><span> </span><span>c_u</span><span> </span><span>/</span><span> </span><span>A_u</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>d_v</span><span> </span><span>=</span><span> </span><span>b_v</span><span> </span><span>*</span><span> </span><span>b_v</span><span> </span><span>-</span><span> </span><span>c_v</span><span> </span><span>/</span><span> </span><span>A_v</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>s_u</span><span> </span><span>=</span><span> </span><span>A_u</span><span> </span><span>&gt;=</span><span> </span><span>0.0</span><span> </span><span>?</span><span> </span><span>-</span><span>1.0</span><span> </span><span>:</span><span> </span><span>1.0</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>s_v</span><span> </span><span>=</span><span> </span><span>A_v</span><span> </span><span>&gt;=</span><span> </span><span>0.0</span><span> </span><span>?</span><span> </span><span>1.0</span><span> </span><span>:</span><span> </span><span>-</span><span>1.0</span><span>;</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>u</span><span> </span><span>=</span><span> </span><span>A_u</span><span> </span><span>!=</span><span> </span><span>0.0</span><span> </span><span>?</span><span> </span><span>(</span><span>-</span><span>b_u</span><span> </span><span>-</span><span> </span><span>s_u</span><span> </span><span>*</span><span> </span><span>sqrt</span><span>(</span><span>d_u</span><span>))</span><span> </span><span>:</span><span> </span><span>(</span><span>-</span><span>c_u</span><span> </span><span>/</span><span> </span><span>t_u</span><span>);</span>
<span>      </span><span>const</span><span> </span><span>float</span><span> </span><span>v</span><span> </span><span>=</span><span> </span><span>A_v</span><span> </span><span>!=</span><span> </span><span>0.0</span><span> </span><span>?</span><span> </span><span>(</span><span>-</span><span>b_v</span><span> </span><span>-</span><span> </span><span>s_v</span><span> </span><span>*</span><span> </span><span>sqrt</span><span>(</span><span>d_v</span><span>))</span><span> </span><span>:</span><span> </span><span>(</span><span>-</span><span>c_v</span><span> </span><span>/</span><span> </span><span>t_v</span><span>);</span>
<span>      </span><span>return</span><span> </span><span>vec2</span><span>(</span><span>u</span><span>,</span><span> </span><span>v</span><span>);</span>
<span>    </span><span>}</span>
</code></pre>
</div>
<p>Where <code><span>beta</span></code> is <span data-katex-display="false">\beta</span> Barycentric coordinate, <code><span>gamma</span></code> is <span data-katex-display="false">\gamma</span> Barycentric coordinate, <code><span>A_u,</span> <span>A_v,</span> <span>B</span></code> are constants calculated in previous Graphics Pipeline Stage.</p>
<ol start="5">
<li>
<p>Bilinear interpolation of vertices attributes.</p>
</li>
</ol>
<p>When Bilinear interpolation coefficients <span data-katex-display="false">u</span> and <span data-katex-display="false">v</span> are calculated, the interpolation of vertex attributes can be achieved using functions.</p>
<div>

<pre><code><span>vec4</span><span> </span><span>interpolateBilinear</span><span>(</span><span>vec4</span><span> </span><span>v0</span><span>,</span><span> </span><span>vec4</span><span> </span><span>v1</span><span>,</span><span> </span><span>vec4</span><span> </span><span>v2</span><span>,</span><span> </span><span>vec4</span><span> </span><span>v3</span><span>,</span><span> </span><span>vec2</span><span> </span><span>uv</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>mix</span><span>(</span><span>mix</span><span>(</span><span>v0</span><span>,</span><span> </span><span>v1</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>mix</span><span>(</span><span>v2</span><span>,</span><span> </span><span>v3</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>uv</span><span>.</span><span>x</span><span>);</span><span> </span>
<span>}</span>
<span>vec3</span><span> </span><span>interpolateBilinear</span><span>(</span><span>vec3</span><span> </span><span>v0</span><span>,</span><span> </span><span>vec3</span><span> </span><span>v1</span><span>,</span><span> </span><span>vec3</span><span> </span><span>v2</span><span>,</span><span> </span><span>vec3</span><span> </span><span>v3</span><span>,</span><span> </span><span>vec2</span><span> </span><span>uv</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>mix</span><span>(</span><span>mix</span><span>(</span><span>v0</span><span>,</span><span> </span><span>v1</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>mix</span><span>(</span><span>v2</span><span>,</span><span> </span><span>v3</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>uv</span><span>.</span><span>x</span><span>);</span><span> </span>
<span>}</span>
<span>vec2</span><span> </span><span>interpolateBilinear</span><span>(</span><span>vec2</span><span> </span><span>v0</span><span>,</span><span> </span><span>vec2</span><span> </span><span>v1</span><span>,</span><span> </span><span>vec2</span><span> </span><span>v2</span><span>,</span><span> </span><span>vec2</span><span> </span><span>v3</span><span>,</span><span> </span><span>vec2</span><span> </span><span>uv</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>mix</span><span>(</span><span>mix</span><span>(</span><span>v0</span><span>,</span><span> </span><span>v1</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>mix</span><span>(</span><span>v2</span><span>,</span><span> </span><span>v3</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>uv</span><span>.</span><span>x</span><span>);</span><span> </span>
<span>}</span>
<span>float</span><span> </span><span>interpolateBilinear</span><span>(</span><span>float</span><span> </span><span>v0</span><span>,</span><span> </span><span>float</span><span> </span><span>v1</span><span>,</span><span> </span><span>float</span><span> </span><span>v2</span><span>,</span><span> </span><span>float</span><span> </span><span>v3</span><span>,</span><span> </span><span>vec2</span><span> </span><span>uv</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>mix</span><span>(</span><span>mix</span><span>(</span><span>v0</span><span>,</span><span> </span><span>v1</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>mix</span><span>(</span><span>v2</span><span>,</span><span> </span><span>v3</span><span>,</span><span> </span><span>uv</span><span>.</span><span>y</span><span>),</span><span> </span><span>uv</span><span>.</span><span>x</span><span>);</span><span> </span>
<span>}</span>
</code></pre>
</div>
<p>Where <code><span>v0,</span> <span>v1,</span> <span>v2,</span> <span>v3</span></code> are the quadrilateral vertex attributes.</p>
<section id="id1">
<h3 id="parallelograms">Parallelograms<a href="#id1" title="Permalink to this heading"></a></h3>
<p>For quadrilaterals, which are restricted to parallelograms, implementing the technique described in this article is even simpler.</p>
<ul>
<li>
<p>In the Tessellation Shader, Geometry Shader, or Mesh Shader stage, when data for four vertex attributes is still available, one extra constant data (per attribute) needs to be calculated.</p>
</li>
</ul>
<div>

<pre><code><span>vec4</span><span> </span><span>calculateConstants</span><span>(</span><span>vec4</span><span> </span><span>A</span><span>,</span><span> </span><span>vec4</span><span> </span><span>B</span><span>,</span><span> </span><span>vec4</span><span> </span><span>C</span><span>,</span><span> </span><span>vec4</span><span> </span><span>D</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>A</span><span> </span><span>-</span><span> </span><span>B</span><span> </span><span>+</span><span> </span><span>C</span><span> </span><span>-</span><span> </span><span>D</span><span>;</span>
<span>}</span>
<span>vec3</span><span> </span><span>calculateConstants</span><span>(</span><span>vec3</span><span> </span><span>A</span><span>,</span><span> </span><span>vec3</span><span> </span><span>B</span><span>,</span><span> </span><span>vec3</span><span> </span><span>C</span><span>,</span><span> </span><span>vec3</span><span> </span><span>D</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>A</span><span> </span><span>-</span><span> </span><span>B</span><span> </span><span>+</span><span> </span><span>C</span><span> </span><span>-</span><span> </span><span>D</span><span>;</span>
<span>}</span>
<span>vec2</span><span> </span><span>calculateConstants</span><span>(</span><span>vec2</span><span> </span><span>A</span><span>,</span><span> </span><span>vec2</span><span> </span><span>B</span><span>,</span><span> </span><span>vec2</span><span> </span><span>C</span><span>,</span><span> </span><span>vec2</span><span> </span><span>D</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>A</span><span> </span><span>-</span><span> </span><span>B</span><span> </span><span>+</span><span> </span><span>C</span><span> </span><span>-</span><span> </span><span>D</span><span>;</span>
<span>}</span>
<span>float</span><span> </span><span>calculateConstants</span><span>(</span><span>float</span><span> </span><span>A</span><span>,</span><span> </span><span>float</span><span> </span><span>B</span><span>,</span><span> </span><span>float</span><span> </span><span>C</span><span>,</span><span> </span><span>float</span><span> </span><span>D</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>A</span><span> </span><span>-</span><span> </span><span>B</span><span> </span><span>+</span><span> </span><span>C</span><span> </span><span>-</span><span> </span><span>D</span><span>;</span>
<span>}</span>
</code></pre>
</div>
<p>Where <code><span>A,</span> <span>B,</span> <span>C,</span> <span>D</span></code> are vertex attributes arranged as specified.</p>
<p>The calculated value for each vertex attribute needs to be passed to the Fragment Shader.</p>
<ul>
<li>
<p>In Fragment Shader, the following.</p>
</li>
</ul>
<div>

<pre><code><span>vec4</span><span> </span><span>interpolateBilinear</span><span>(</span><span>vec4</span><span> </span><span>attribute</span><span>,</span><span> </span><span>vec2</span><span> </span><span>barycentric</span><span>,</span><span> </span><span>vec4</span><span> </span><span>extraVal</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>attribute</span><span> </span><span>+</span><span> </span><span>barycentric</span><span>.</span><span>x</span><span> </span><span>*</span><span> </span><span>barycentric</span><span>.</span><span>y</span><span> </span><span>*</span><span> </span><span>extraVal</span><span>;</span>
<span>}</span>
<span>vec3</span><span> </span><span>interpolateBilinear</span><span>(</span><span>vec3</span><span> </span><span>attribute</span><span>,</span><span> </span><span>vec2</span><span> </span><span>barycentric</span><span>,</span><span> </span><span>vec3</span><span> </span><span>extraVal</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>attribute</span><span> </span><span>+</span><span> </span><span>barycentric</span><span>.</span><span>x</span><span> </span><span>*</span><span> </span><span>barycentric</span><span>.</span><span>y</span><span> </span><span>*</span><span> </span><span>extraVal</span><span>;</span>
<span>}</span>
<span>vec2</span><span> </span><span>interpolateBilinear</span><span>(</span><span>vec2</span><span> </span><span>attribute</span><span>,</span><span> </span><span>vec2</span><span> </span><span>barycentric</span><span>,</span><span> </span><span>vec2</span><span> </span><span>extraVal</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>attribute</span><span> </span><span>+</span><span> </span><span>barycentric</span><span>.</span><span>x</span><span> </span><span>*</span><span> </span><span>barycentric</span><span>.</span><span>y</span><span> </span><span>*</span><span> </span><span>extraVal</span><span>;</span>
<span>}</span>
<span>float</span><span> </span><span>interpolateBilinear</span><span>(</span><span>float</span><span> </span><span>attribute</span><span>,</span><span> </span><span>vec2</span><span> </span><span>barycentric</span><span>,</span><span> </span><span>float</span><span> </span><span>extraVal</span><span>)</span>
<span>{</span>
<span>    </span><span>return</span><span> </span><span>attribute</span><span> </span><span>+</span><span> </span><span>barycentric</span><span>.</span><span>x</span><span> </span><span>*</span><span> </span><span>barycentric</span><span>.</span><span>y</span><span> </span><span>*</span><span> </span><span>extraVal</span><span>;</span>
<span>}</span>
</code></pre>
</div>
<p>Where <code><span>attribute</span></code> represents a value interpolated by traditional Barycentric interpolation (available in the Fragment Shader), <code><span>barycentric</span></code> is a <code><span>vec2</span></code> data type containing the fragments’ <span data-katex-display="false">\beta</span> and <span data-katex-display="false">\gamma</span> Barycentric coordinates, and <code><span>extra</span></code> is a constant calculated in the previous Geometry, Tessellation, Mesh Shader stage.</p>
</section>
</section>
<section id="results">
<h2 id="results">Results<a href="#results" title="Permalink to this heading"></a></h2>
<p>The output of the algebraic solution presented in this article remains consistent across different implementations. Depending on the type of vertex attributes, the results can be summarized in the following table.</p>
<table>
<thead>
<tr>
<th>
<p>Vertex Attribute</p>
</th>
<th>
<p>Barycentric interpolation</p>
</th>
<th>
<p>Bilinear interpolation using the solution <br> presented in the article</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p>Color</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-19bc95d1700790bc331564956a47d944-1.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-1.png"><img width="640" height="640" decoding="async" alt="_images/1.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-1.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-1.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-f81dc071f7d865dd3f48e34639f0b557-2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-2.png"><img width="640" height="640" decoding="async" alt="_images/2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-2.png"></a></p>
</td>
</tr>
<tr>
<td>
<p>Texture coordinate</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-ec24b26e7fd79fcdf5c902465cc341d3-3.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-3.png"><img width="640" height="640" decoding="async" alt="_images/3.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-3.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-3.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-93eb8d6164743b7a097e95bbe5c66d9f-4.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-4.png"><img width="640" height="640" decoding="async" alt="_images/4.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-4.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-4.png"></a></p>
</td>
</tr>
<tr>
<td>
<p>Normal</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-0290aed55724f46beb0047c2f18bc97c-5.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-5.png"><img width="640" height="640" decoding="async" alt="_images/5.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-5.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-5.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-b6fbbc202156839879da9ced439b2145-6.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-6.png"><img width="640" height="640" decoding="async" alt="_images/6.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-6.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='640'%20height='640'%20viewBox='0%200%20640%20640'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-6.png"></a></p>
</td>
</tr>
<tr>
<td>
<p>Color</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-f7846f8311fa9636ec3ca8470f3f4df6-trapez1.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez1.gif"><img width="300" height="300" decoding="async" alt="_images/trapez1.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez1.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-7dc1fe1d187d297f09efde19014e451c-trapez1a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez1a.gif"><img width="300" height="300" decoding="async" alt="_images/trapez1a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez1a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p>Texture coordinate</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-fcbf880a8c27c6357716ed2b7647b83c-trapez2.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez2.gif"><img width="300" height="300" decoding="async" alt="_images/trapez2.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez2.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-620b37b728ccee0d494478939e486555-trapez2a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez2a.gif"><img width="300" height="300" decoding="async" alt="_images/trapez2a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez2a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p>Normal</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-9360fabb2c03c5c58cdc8c5b3549eac4-trapez3.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez3.gif"><img width="300" height="300" decoding="async" alt="_images/trapez3.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez3.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-3eae28224f6b18d8cc1bd07ff84a96c6-trapez3a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez3a.gif"><img width="300" height="300" decoding="async" alt="_images/trapez3a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-trapez3a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p>Color</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-28b0dc381e093add2e76b8cb98e364c5-tea1.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea1.gif"><img width="300" height="300" decoding="async" alt="_images/tea1.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea1.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-8f1eda687a9a360df46f16b922c88681-tea1a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea1a.gif"><img width="300" height="300" decoding="async" alt="_images/tea1a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea1a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p>Texture coordinate</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-ad784df2d2237ae6c481595eba609ab6-tea2.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea2.gif"><img width="300" height="300" decoding="async" alt="_images/tea2.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea2.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-b8ce4bc4ff6084002e8e3eab752b328d-tea2a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea2a.gif"><img width="300" height="300" decoding="async" alt="_images/tea2a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea2a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p>Normal</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-de27696e3cac248658749e0bc30b229c-tea3.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea3.gif"><img width="300" height="300" decoding="async" alt="_images/tea3.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea3.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-00824abe6f08e5352fd516684f9b2a6d-tea3a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea3a.gif"><img width="300" height="300" decoding="async" alt="_images/tea3a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-tea3a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='300'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
<tr>
<td>
<p>Mesh Example</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-dda0431c7a5f18c76cc2d4b1f4e35648-Picture1.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture1.png"><img width="1524" height="900" decoding="async" alt="_images/Picture1.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture1.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1524'%20height='900'%20viewBox='0%200%201524%20900'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture1.png"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-b70c8b80a515bcbd078df9c5b12f9b07-Picture2.png"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture2.png"><img width="1524" height="900" decoding="async" alt="_images/Picture2.png" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture2.png" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1524'%20height='900'%20viewBox='0%200%201524%20900'%3E%3C/svg%3E" data-src="/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-Picture2.png"></a></p>
</td>
</tr>
<tr>
<td>
<p>Animation Example</p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-a2efd520d53fa39d2c2e7c1766bb41e2-anim1.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-anim1.gif"><img width="400" height="300" decoding="async" alt="_images/anim1.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-anim1.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='300'%20viewBox='0%200%20400%20300'%3E%3C/svg%3E"></a></p>
</td>
<td>
<p><a download="" href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_downloads-e041358f4d24723bc2405026e7d8a790-anim1a.gif"><span></span></a><a href="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-anim1a.gif"><img width="400" height="300" decoding="async" alt="_images/anim1a.gif" src="https://gpuopen.com/docs_images/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates/bilinear_interpolation_on_a_quadrilateral_using_barycentric_coordinates-html-_images-anim1a.gif" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='300'%20viewBox='0%200%20400%20300'%3E%3C/svg%3E"></a></p>
</td>
</tr>
</tbody>
</table>
</section>
</section><section id="summary">
<h2 id="summary">Summary<a href="#summary" title="Permalink to this heading"></a></h2>
<p>As presented in this article, the algebraic solution for Bilinear interpolation using Barycentric coordinates can be implemented through APIs such as Vulkan® or DirectX®. This implementation leverages hardware-accelerated rendering on GPUs. The paper proposes three different implementations based on the available Graphics Pipeline supported by the GPU. These implementations enable the use of the new method on GPUs (both PCs and mobile devices) ranging from models released in 2008 to the latest versions.</p>
<p><em>Blender is a registered trademark of the Blender Foundation in EU and USA. DirectX is a registered trademark of Microsoft Corporation in the US and other jurisdictions. OpenGL® and the oval logo are trademarks or registered trademarks of Hewlett Packard Enterprise in the United States and/or other countries worldwide. Vulkan and the Vulkan logo are registered trademarks of the Khronos Group Inc.</em></p>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust CUDA Project (125 pts)]]></title>
            <link>https://github.com/Rust-GPU/Rust-CUDA</link>
            <guid>43654881</guid>
            <pubDate>Fri, 11 Apr 2025 15:22:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Rust-GPU/Rust-CUDA">https://github.com/Rust-GPU/Rust-CUDA</a>, See on <a href="https://news.ycombinator.com/item?id=43654881">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
  <p dir="auto"><h2 tabindex="-1" dir="auto">The Rust CUDA Project</h2><a id="user-content-the-rust-cuda-project" aria-label="Permalink: The Rust CUDA Project" href="#the-rust-cuda-project"></a></p>
  <p dir="auto">
    <strong>An ecosystem of libraries and tools for writing and executing extremely fast GPU code fully in
    <a href="https://www.rust-lang.org/" rel="nofollow">Rust</a></strong>
  </p>
  <p dir="auto"><h3 tabindex="-1" dir="auto">
    <a href="https://rust-gpu.github.io/Rust-CUDA/guide/index.html" rel="nofollow">Guide</a>
    <span> | </span>
    <a href="https://github.com/Rust-GPU/Rust-CUDA/blob/main/guide/src/guide/getting_started.md">Getting Started</a>
    <span> | </span>
    <a href="https://github.com/Rust-GPU/Rust-CUDA/blob/main/guide/src/features.md">Features</a>
  </h3><a id="user-content-----guide----------getting-started----------features--" aria-label="Permalink: Guide | Getting Started | Features" href="#----guide----------getting-started----------features--"></a></p>
<p><strong><g-emoji alias="warning">⚠️</g-emoji> The project is still in early development, expect bugs, safety issues, and things that don't work <g-emoji alias="warning">⚠️</g-emoji></strong>
</p></div>


<p dir="auto"><h2 tabindex="-1" dir="auto">Goal</h2><a id="user-content-goal" aria-label="Permalink: Goal" href="#goal"></a></p>
<p dir="auto">The Rust CUDA Project is a project aimed at making Rust a tier-1 language for extremely fast GPU computing
using the CUDA Toolkit. It provides tools for compiling Rust to extremely fast PTX code as well as libraries
for using existing CUDA libraries with it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Background</h2><a id="user-content-background" aria-label="Permalink: Background" href="#background"></a></p>
<p dir="auto">Historically, general purpose high performance GPU computing has been done using the CUDA toolkit. The CUDA toolkit primarily
provides a way to use Fortran/C/C++ code for GPU computing in tandem with CPU code with a single source. It also provides
many libraries, tools, forums, and documentation to supplement the single-source CPU/GPU code.</p>
<p dir="auto">CUDA is exclusively an NVIDIA-only toolkit. Many tools have been proposed for cross-platform GPU computing such as
OpenCL, Vulkan Computing, and HIP. However, CUDA remains the most used toolkit for such tasks by far. This is why it is
imperative to make Rust a viable option for use with the CUDA toolkit.</p>
<p dir="auto">However, CUDA with Rust has been a historically very rocky road. The only viable option until now has been to use the LLVM PTX
backend, however, the LLVM PTX backend does not always work and would generate invalid PTX for many common Rust operations, and
in recent years it has been shown time and time again that a specialized solution is needed for Rust on the GPU with the advent
of projects such as rust-gpu (for Rust -&gt; SPIR-V).</p>
<p dir="auto">Our hope is that with this project we can push the Rust GPU computing industry forward and make Rust an excellent language
for such tasks. Rust offers plenty of benefits such as <code>__restrict__</code> performance benefits for every kernel, An excellent module/crate system,
delimiting of unsafe areas of CPU/GPU code with <code>unsafe</code>, high level wrappers to low level CUDA libraries, etc.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Structure</h2><a id="user-content-structure" aria-label="Permalink: Structure" href="#structure"></a></p>
<p dir="auto">The scope of the Rust CUDA Project is quite broad, it spans the entirety of the CUDA ecosystem, with libraries and tools to make it
usable using Rust. Therefore, the project contains many crates for all corners of the CUDA ecosystem.</p>
<p dir="auto">The current line-up of libraries is the following:</p>
<ul dir="auto">
<li><code>rustc_codegen_nvvm</code> Which is a rustc backend that targets NVVM IR (a subset of LLVM IR) for the <a href="https://docs.nvidia.com/cuda/nvvm-ir-spec/index.html" rel="nofollow">libnvvm</a> library.
<ul dir="auto">
<li>Generates highly optimized PTX code which can be loaded by the CUDA Driver API to execute on the GPU.</li>
<li>For the near future it will be CUDA-only, but it may be used to target amdgpu in the future.</li>
</ul>
</li>
<li><code>cuda_std</code> for GPU-side functions and utilities, such as thread index queries, memory allocation, warp intrinsics, etc.
<ul dir="auto">
<li><em>Not</em> a low level library, provides many utility functions to make it easier to write cleaner and more reliable GPU kernels.</li>
<li>Closely tied to <code>rustc_codegen_nvvm</code> which exposes GPU features through it internally.</li>
</ul>
</li>
<li><a href="https://github.com/Rust-GPU/Rust-CUDA/tree/master/crates/cudnn"><code>cudnn</code></a> for a collection of GPU-accelerated primitives for deep neural networks.</li>
<li><code>cust</code> for CPU-side CUDA features such as launching GPU kernels, GPU memory allocation, device queries, etc.
<ul dir="auto">
<li>High level with features such as RAII and Rust Results that make it easier and cleaner to manage the interface to the GPU.</li>
<li>A high level wrapper for the CUDA Driver API, the lower level version of the more common CUDA Runtime API used from C++.</li>
<li>Provides much more fine grained control over things like kernel concurrency and module loading than the C++ Runtime API.</li>
</ul>
</li>
<li><code>gpu_rand</code> for GPU-friendly random number generation, currently only implements xoroshiro RNGs from <code>rand_xoshiro</code>.</li>
<li><code>optix</code> for CPU-side hardware raytracing and denoising using the CUDA OptiX library.</li>
</ul>
<p dir="auto">In addition to many "glue" crates for things such as high level wrappers for certain smaller CUDA libraries.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Related Projects</h2><a id="user-content-related-projects" aria-label="Permalink: Related Projects" href="#related-projects"></a></p>
<p dir="auto">Other projects related to using Rust on the GPU:</p>
<ul dir="auto">
<li>2016: <a href="https://github.com/kmcallister/glassful">glassful</a> Subset of Rust that compiles to GLSL.</li>
<li>2017: <a href="https://github.com/msiglreith/inspirv-rust">inspirv-rust</a> Experimental Rust MIR -&gt; SPIR-V Compiler.</li>
<li>2018: <a href="https://github.com/japaric-archived/nvptx">nvptx</a> Rust to PTX compiler using the <code>nvptx</code> target for rustc (using the LLVM PTX backend).</li>
<li>2020: <a href="https://github.com/termoshtt/accel">accel</a> Higher-level library that relied on the same mechanism that <code>nvptx</code> does.</li>
<li>2020: <a href="https://github.com/MaikKlein/rlsl">rlsl</a> Experimental Rust -&gt; SPIR-V compiler (predecessor to rust-gpu)</li>
<li>2020: <a href="https://github.com/Rust-GPU/rust-gpu">rust-gpu</a> <code>rustc</code> compiler backend to compile Rust to SPIR-V for use in shaders, similar mechanism as our project.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="## setup your environment like:
### export OPTIX_ROOT=/opt/NVIDIA-OptiX-SDK-9.0.0-linux64-x86_64
### export OPTIX_ROOT_DIR=/opt/NVIDIA-OptiX-SDK-9.0.0-linux64-x86_64

## build proj
cargo build"><pre><span><span>#</span># setup your environment like:</span>
<span><span>#</span>## export OPTIX_ROOT=/opt/NVIDIA-OptiX-SDK-9.0.0-linux64-x86_64</span>
<span><span>#</span>## export OPTIX_ROOT_DIR=/opt/NVIDIA-OptiX-SDK-9.0.0-linux64-x86_64</span>

<span><span>#</span># build proj</span>
cargo build</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Use Rust-CUDA in Container Environments</h2><a id="user-content-use-rust-cuda-in-container-environments" aria-label="Permalink: Use Rust-CUDA in Container Environments" href="#use-rust-cuda-in-container-environments"></a></p>
<p dir="auto">The distribution related Dockerfile are located in <code>container</code> folder.
Taking ubuntu 24.04 as an example, run the following command in repository root:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker build -f ./container/ubuntu24/Dockerfile -t rust-cuda-ubuntu24 .
docker run --rm --runtime=nvidia --gpus all -it rust-cuda-ubuntu24"><pre>docker build -f ./container/ubuntu24/Dockerfile -t rust-cuda-ubuntu24 <span>.</span>
docker run --rm --runtime=nvidia --gpus all -it rust-cuda-ubuntu24</pre></div>
<p dir="auto">A sample <code>.devcontainer.json</code> file is also included, configured for Ubuntu 24.02. Copy this to <code>.devcontainer/devcontainer.json</code> to make additonal customizations.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Licensed under either of</p>
<ul dir="auto">
<li>Apache License, Version 2.0, (<a href="https://github.com/Rust-GPU/Rust-CUDA/blob/main/LICENSE-APACHE">LICENSE-APACHE</a> or <a href="http://www.apache.org/licenses/LICENSE-2.0" rel="nofollow">http://www.apache.org/licenses/LICENSE-2.0</a>)</li>
<li>MIT license (<a href="https://github.com/Rust-GPU/Rust-CUDA/blob/main/LICENSE-MIT">LICENSE-MIT</a> or <a href="http://opensource.org/licenses/MIT" rel="nofollow">http://opensource.org/licenses/MIT</a>)</li>
</ul>
<p dir="auto">at your discretion.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Contribution</h3><a id="user-content-contribution" aria-label="Permalink: Contribution" href="#contribution"></a></p>
<p dir="auto">Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebRTC for the Curious (115 pts)]]></title>
            <link>https://webrtcforthecurious.com</link>
            <guid>43654813</guid>
            <pubDate>Fri, 11 Apr 2025 15:18:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webrtcforthecurious.com">https://webrtcforthecurious.com</a>, See on <a href="https://news.ycombinator.com/item?id=43654813">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><h2 id="webrtc-for-the-curious">WebRTC For The Curious
<a href="#webrtc-for-the-curious">#</a></h2><p><em>WebRTC For The Curious</em> is an open-source book created by WebRTC implementers to share their hard-earned knowledge
with the world. It’s written for those who are always looking for more and don’t settle for abstraction.</p><h3 id="key-features">Key features
<a href="#key-features">#</a></h3><ul><li>Focus on protocols and APIs, not specific software.</li><li>Summarizes RFCs and collects undocumented knowledge.</li><li>Vendor-agnostic approach.</li><li>Not a tutorial - contains minimal code.</li></ul><p>WebRTC is a powerful technology, but it can be challenging to use. This book aims to provide a comprehensive, unbiased
resource for understanding WebRTC.</p><h2 id="who-this-book-is-for">Who this book is for
<a href="#who-this-book-is-for">#</a></h2><ul><li>Developers new to WebRTC, wanting to learn more.</li><li>Current WebRTC developers seeking deeper understanding beyond APIs.</li><li>Established developers needing debugging help.</li><li>WebRTC implementers requiring clarification on specific parts.</li></ul><h2 id="book-structure">Book structure
<a href="#book-structure">#</a></h2><h3 id="designed-for-multiple-readings">Designed for multiple readings
<a href="#designed-for-multiple-readings">#</a></h3><p>Each chapter is self-contained, allowing you to start anywhere in the book without getting lost.</p><h3 id="chapter-format">Chapter format
<a href="#chapter-format">#</a></h3><p>Each chapter answers a single question with three levels of information:</p><ol><li>What needs to be solved?</li><li>How do we solve it? (Including technical details)</li><li>Where to learn more.</li></ol><h3 id="no-prior-knowledge-required">No prior knowledge required
<a href="#no-prior-knowledge-required">#</a></h3><p>You can begin learning at any point in the book. We also provide resources for further study on individual topics.
Other books cover individual topics in much greater depth. This book aims to teach you the entire system, at the cost
of expert level details.</p><h2 id="availability-and-license">Availability and License
<a href="#availability-and-license">#</a></h2><ul><li>Available on <a href="https://github.com/webrtc-for-the-curious/webrtc-for-the-curious">GitHub</a> and <a href="https://webrtcforthecurious.com/">WebRTCforTheCurious.com</a></li><li>Downloadable as <a href="https://webrtcforthecurious.com/docs/webrtc-for-the-curious.epub">ePub</a> and <a href="https://webrtcforthecurious.com/docs/webrtc-for-the-curious.pdf">PDF</a></li><li>Licensed under CC0 (no attribution required)</li></ul><h3 id="privacy-commitment">Privacy Commitment
<a href="#privacy-commitment">#</a></h3><ul><li>Written by individuals, for individuals.</li><li>Vendor-agnostic with no conflicts of interest.</li><li>No analytics or tracking on the website.</li></ul><h2 id="get-involved">Get involved!
<a href="#get-involved">#</a></h2><p>We welcome your contributions! Visit our <a href="https://github.com/webrtc-for-the-curious/webrtc-for-the-curious">GitHub page</a> to:</p><ul><li>Open issues for questions.</li><li>Suggest improvements.</li><li>Contribute to the ongoing development of this book.</li></ul><h2 id="license">License
<a href="#license">#</a></h2><p>This book is available under the CC0 license. The authors have waived all their copyright and related rights in their
works to the fullest extent allowed by law. You may use this work however you want and no attribution is required.</p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[She Worked in a Harvard Lab to Reverse Aging, Until ICE Jailed Her (156 pts)]]></title>
            <link>https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html</link>
            <guid>43653998</guid>
            <pubDate>Fri, 11 Apr 2025 14:10:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html">https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html</a>, See on <a href="https://news.ycombinator.com/item?id=43653998">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Adobe deletes Bluesky posts after backlash (272 pts)]]></title>
            <link>https://petapixel.com/2025/04/10/adobe-deletes-bluesky-posts-after-furious-backlash/</link>
            <guid>43653885</guid>
            <pubDate>Fri, 11 Apr 2025 14:01:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://petapixel.com/2025/04/10/adobe-deletes-bluesky-posts-after-furious-backlash/">https://petapixel.com/2025/04/10/adobe-deletes-bluesky-posts-after-furious-backlash/</a>, See on <a href="https://news.ycombinator.com/item?id=43653885">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
											
<article data-post-id="788951">

    <header>
          
    

        
  </header>
      
  

  <div>
    <div>
      <p><img data-perfmatters-preload="" fetchpriority="high" decoding="async" src="https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-800x420.jpg" alt="Black and white photo of a modern building with the Adobe logo prominently displayed on its facade. The building has large, square windows and the sleek design typical of corporate architecture. The Adobe logo consists of a stylized 'A' and the word &quot;Adobe&quot;." width="800" height="420" srcset="https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-800x420.jpg 800w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-320x168.jpg 320w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-1536x806.jpg 1536w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-150x79.jpg 150w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-300x157.jpg 300w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-400x209.jpg 400w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable-550x288.jpg 550w, https://petapixel.com/assets/uploads/2024/08/Photographers-Vitriol-for-Adobe-Feels-Insurmountable.jpg 1600w" sizes="(max-width: 800px) 100vw, 800px"></p> <p>Adobe’s foray into the <a href="https://petapixel.com/2024/11/20/what-is-bluesky-the-app-that-has-seen-influx-of-x-and-threads-users/" data-wpel-link="internal">Twitter alternative Bluesky</a> quickly backfired. Frustrated by the company’s business practices, users on the platform flooded its posts with backlash, ultimately prompting Adobe to delete all of its content.</p>  <p>“Hey, we’re Adobe! We’re here to connect with the artists, designers, and storytellers who bring ideas to life,” read Adobe’s first post which has since been deleted. “What’s fueling your creativity right now?” </p> <p>It was an innocuous enough post that Adobe sent out on Tuesday (April 8) but as <a href="https://futurism.com/adobe-bullied-bluesky" data-wpel-link="external" target="_blank" rel="follow external noopener"><em>Futurism</em> reports</a>, it provoked the ire of Bluesky users who immediately began airing their grievances at the company. </p> <figure id="attachment_788955" aria-describedby="caption-attachment-788955"><a href="https://petapixel.com/2025/04/10/adobe-deletes-bluesky-posts-after-furious-backlash/adobe-bluesky-post/" rel="attachment wp-att-788955" data-wpel-link="internal"><img decoding="async" src="https://petapixel.com/assets/uploads/2025/04/Adobe-Bluesky-post-697x800.jpg" alt="Screenshot of a tweet from Adobe's official account. It invites artists, designers, and storytellers to share their creative inspirations by tagging a creator or sharing their work, with an emoji palette suggesting creativity." width="697" height="800" srcset="https://petapixel.com/assets/uploads/2025/04/Adobe-Bluesky-post-697x800.jpg 697w, https://petapixel.com/assets/uploads/2025/04/Adobe-Bluesky-post-279x320.jpg 279w, https://petapixel.com/assets/uploads/2025/04/Adobe-Bluesky-post.jpg 1080w" sizes="(max-width: 697px) 100vw, 697px"></a><figcaption id="caption-attachment-788955">Adobe’s first post on Bluesky which received attention for all the wrong reasons.</figcaption></figure> <p>“I assume you’ll be charging us monthly to read your posts,” <a href="https://bsky.app/profile/mayamedia.bsky.social/post/3lmdiad7qck27" data-wpel-link="external" target="_blank" rel="follow external noopener">one user wrote</a> in reference to Adobe’s subscription model.  </p> <p>On the same day, Adobe <a href="https://bsky.app/profile/wychwit.ch/post/3lmdozfl5nc2i" data-wpel-link="external" target="_blank" rel="follow external noopener">set up a Bluesky account for Photoshop</a>. That too was bombarded with negative comments. </p>
 <p>“Go back to the fascist-owned site where they enjoy supporting AI-generated art like your brand does,” wrote Evlyn Moreau. </p> <p>“Y’all keep raising your prices for a product that keeps getting worse,” wrote another user. </p> <p>As of today (Thursday), both Adobe and the Photoshop accounts remain on Bluesky but both of their opening posts have been removed. Something that Bluesky users rejoiced in. </p> <p>“Adobe deleting their first BlueSky post because they realize that the artist community pretty much universally hates them now is extremely funny,” <a href="https://bsky.app/profile/bauerpower.bsky.social/post/3lmdhqdsayk2p" data-wpel-link="external" target="_blank" rel="follow external noopener">writes Betsy Bauer.</a> </p> <p>“Adobe just deleted their post with 1.6k angry comments from artists and creators roasting them,” <a href="https://bsky.app/profile/tokoriart.bsky.social/post/3lmdhgoxkvk2e" data-wpel-link="external" target="_blank" rel="follow external noopener">adds Tokori.</a></p> <center> <blockquote data-bluesky-uri="at://did:plc:ohcnasjrl4ifizsnit53ab2x/app.bsky.feed.post/3lmdzksbg2c2c" data-bluesky-cid="bafyreigzpdimtpvw3rse3frsc53lmg6cf5husuusuwphmsqb6r5wlqaiy4" data-bluesky-embed-color-mode="system"> <p lang="en">Adobe situation was pretty funny</p> <p><a href="https://bsky.app/profile/did:plc:ohcnasjrl4ifizsnit53ab2x/post/3lmdzksbg2c2c?ref_src=embed" data-wpel-link="external" target="_blank" rel="follow external noopener">[image or embed]</a></p> <p>— BlueSpark (<a href="https://bsky.app/profile/did:plc:ohcnasjrl4ifizsnit53ab2x?ref_src=embed" data-wpel-link="external" target="_blank" rel="follow external noopener">@bluespark777.bsky.social</a>) <a href="https://bsky.app/profile/did:plc:ohcnasjrl4ifizsnit53ab2x/post/3lmdzksbg2c2c?ref_src=embed" data-wpel-link="external" target="_blank" rel="follow external noopener">9 April 2025 at 04:15</a></p></blockquote> </center> <h2>Why Are People Hating On Adobe? </h2> <p>Adobe’s unpopularity can be traced back to a decision it made over 10 years ago when it shifted from perpetual software licensing to subscription pricing. </p>
 <p>Since then, price hikes and an embrace of artificial intelligence have all added to the vitriol many photographers and creatives direct toward the company. </p> <p>“The past few years of minimal communication with the community at large followed by the tidal wave of bad press over the past six months has left Adobe’s standing with many photographers in shambles,” <em>PetaPixel’s</em> editor-in-chief Jaron Schnieder <a href="https://petapixel.com/2024/08/15/photographers-vitriol-for-adobe-feels-insurmountable/" data-wpel-link="internal">wrote last year</a>. </p> <p>“Adobe couldn’t explain why it let its once excellent relationship with photographers and media lapse, only that it is sorry that happened.” </p> <hr> <p><em><strong>Image credits:</strong> Header photo licensed via <a href="https://depositphotos.com/" rel="nofollow external noopener" data-wpel-link="external" target="_blank">Depositphotos</a>.</em></p>      </div>

          
      

              <div>
          <p>PetaPixel articles may include affiliate links; if you buy something through such a link, PetaPixel may earn a commission.</p>
        </div>
      
    

    
          
      




    <!-- Taboola START -->
    <!-- <div id="taboola-below-article-thumbnails"></div>
    <script type="text/javascript">
      window._taboola = window._taboola || [];
      _taboola.push({
        mode: 'alternating-thumbnails-a',
        container: 'taboola-below-article-thumbnails',
        placement: 'Below Article Thumbnails',
        target_type: 'mix'
      });
    </script> -->
    <!-- Taboola END -->
          
      </div>
</article>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fedora change aims for 99% package reproducibility (333 pts)]]></title>
            <link>https://lwn.net/Articles/1014979/</link>
            <guid>43653672</guid>
            <pubDate>Fri, 11 Apr 2025 13:40:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/1014979/">https://lwn.net/Articles/1014979/</a>, See on <a href="https://news.ycombinator.com/item?id=43653672">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<b>Benefits for LWN subscribers</b>
<p>
The primary benefit from <a href="https://lwn.net/Promo/nst-nag5/subscribe">subscribing to LWN</a>
       is helping to keep us publishing, but, beyond that, subscribers get
       immediate access to all site content and access to a number of extra
       site features.  Please sign up today!
</p></blockquote>

<p>The effort to ensure that open-source software is <a href="https://reproducible-builds.org/">reproducible</a> has been
gathering steam over the years, and gaining traction with major Linux
distributions. Debian, for example, has been <a href="https://lwn.net/Articles/985739/">working toward reproducible
builds</a> for more than a decade; it can <a href="https://lists.reproducible-builds.org/pipermail/rb-general/2025-March/003675.html">now</a>
produce <a href="https://wiki.debian.org/ReproducibleInstalls/LiveImages#Status">official
live CDs</a> of the current stable release that are 
reproducible. Fedora started on the path much later, but it has
progressed far enough that the project is now considering a <a href="https://fedoraproject.org/wiki/Changes/Package_builds_are_expected_to_be_reproducible">change
proposal</a> for the Fedora&nbsp;43 development cycle, expected to be
released in October, with a goal of
making 99% of Fedora's package builds reproducible. So far, reaction
to the proposal seems favorable and focused primarily on how to
achieve the <span>goal—with</span> minimal pain for <span>packagers—rather</span> than whether to attempt it.</p>

<h4>Defining reproducible builds</h4>

<p>The Reproducible Builds project <a href="https://reproducible-builds.org/docs/definition/">defines</a> a
build as reproducible if "<q>given the same source code, build
environment and build instructions, any party can recreate bit-by-bit
identical copies of all specified artifacts</q>". In a <a href="https://discussion.fedoraproject.org/t/report-from-the-reproducible-builds-hackfest-during-flock-2023/87469">2023
hackfest report</a>, Zbigniew Jędrzejewski-Szmek said that Fedora has
not prioritized reproducible builds in the past because Fedora has
more control over its build process than Debian and other
distributions. Because Debian allows maintainers to
generate source packages on their local system and to upload
some locally built packages for distribution to users, he said that "<q>trust
in the contents of both source and binary packages is low</q>."
(Debian's build daemons build <em>most</em> binary packages from
source for distribution to users, <a href="https://www.debian.org/doc/manuals/developers-reference/pkgs.html#source-and-binary-uploads">but
there are exceptions</a>.)
Fedora, on the other hand, exercises much more control over packages.</p>

<blockquote>
In Fedora, all packages that are distributed to users are built in the
centralized, strongly controlled infrastructure. All source rpms are
built from "dist-git": a git repository which contains the build
"recipe" and a cryptographic hash of package sources, so it is
relatively easy to verify what changed between package versions, what
"inputs" went into a particular source package, and in what
environment the binary packages were built.
</blockquote>

<p>However, even though Fedora has a tighter control over its
packages, <span>Jędrzejewski-Szmek</span> said that
one of the benefits of reproducible builds was to help detect and
mitigate any kind of supply-chain attack on Fedora's builders and
allow others to perform independent verification that the package
sources match the binaries that are delivered by Fedora. It's
interesting to note that Fedora had embarked on this work before <a href="https://lwn.net/Articles/967866/">the XZ backdoor</a> drew even
more attention to supply-chain attacks.</p>

<p>He acknowledges that Debian is more advanced in its reproducible
builds processes, and notes that Fedora is setting a different 
<a href="https://docs.fedoraproject.org/en-US/reproducible-builds/">definition</a>
for reproducible builds. This definition excludes signatures and
some metadata and focuses solely on the payload of packaged files in a given
RPM:</p>

<blockquote>
A build is reproducible if given the same source code, build
environment and build instructions, and metadata from the build
artifacts, any party can recreate copies of the artifacts that are
identical except for the signatures and parts of metadata.
</blockquote>

<p>The reason Fedora is pursuing a different definition of
reproducible build is that it <em><a href="https://docs.fedoraproject.org/en-US/reproducible-builds/#_caveats">cannot</a></em>
achieve "<q>bit-by-bit</q>" reproducibility by the
original definition. This is because of differences in the package
format and the way that Fedora builds its packages. RPMs embed the
package signature in the RPM when they are built, but Debian uses
detached signatures. RPMs also include information, such as the build
time (<tt>BUILDTIME</tt>) and build host (<tt>BUILDHOST</tt>) in the RPM's
header, that can affect reproducibilty. There was a <a href="https://github.com/rpm-software-management/rpm/issues/2603">discussion</a>
about allowing these variables to be overridden. However, the
prevailing opinion was that the information provided by
<tt>BUILDHOST</tt> is useful, and
overriding its inclusion is not desirable. The contents, however,
should still be "<q>bit-by-bit</q>" identical, even though that phrase
does not turn up in Fedora's definition.</p>

<p>The openSUSE project, which also distributes software using the RPM
format, sets <tt>BUILDHOST</tt> to "<tt>reproducible</tt>", <a href="https://github.com/rpm-software-management/rpm/issues/2603#issuecomment-1713960828">according</a>
to Jan Zerebecki. The actual build host is printed in the build logs,
and interested users can search openSUSE's build logs to find the
host.</p>

<h4>Path to reproducibility</h4>

<p>For <tt>BUILDTIME</tt>, openSUSE sets the build time to the date of
the latest changelog entry. This is provided to builds by the <a href="https://reproducible-builds.org/docs/source-date-epoch/"><tt>SOURCE_DATE_EPOCH</tt></a>
environment variable. This is where Fedora's reproducible builds work
began, with a <a href="https://fedoraproject.org/wiki/Changes/ReproducibleBuildsClampMtimes">change</a>
that was made during the Fedora&nbsp;38 development cycle to "clamp"
the modification time (mtime) of packaged files to
<tt>SOURCE_DATE_EPOCH</tt>. This ensured that the mtimes were
independent of the time of an actual build. Packagers were given the
ability to <span>opt-out</span> of this if, for some
reason, their package would be broken by the new behavior. </p>

<!-- middle-ad -->

<p>During the Fedora&nbsp;41 development cycle, the project
implemented another <a href="https://fedoraproject.org/wiki/Changes/ReproduciblePackageBuilds">change
in the RPM build process</a> to remove common sources of
irreproducibility. That change made use of a Rust program, <a href="https://github.com/keszybz/add-determinism?tab=readme-ov-file#build-postprocessor-to-reset-metadata-fields-for-build-reproducibility"><tt>add-determinism</tt></a>,
that attempts to standardize metadata in binary or source files to
ensure consistency. It is similar to Debian's <a href="https://salsa.debian.org/reproducible-builds/strip-nondeterminism"><tt>strip-nondeterminism</tt></a>,
which is a Perl library that is part of the <a href="https://man7.org/linux/man-pages/man7/debhelper.7.html"><tt>debhelper</tt></a>
tool for building Debian packages. Using
<tt>strip-nondeterminism</tt>, the <tt>debhelper</tt> tool removes
non-deterministic information such as timestamps and filesystem
ordering from various file and archive formats. The Fedora project
chose to write its own tool because it was undesirable to pull Perl
into the build root for every package.</p>

<p>According to the new change proposal, the modifications to Fedora's build
infrastructure to date have allowed it to make 90% of package builds
reproducible. The goal now is to reach 99% of package builds. 
It appears that Fedora has gotten as much mileage out of
infrastructure changes, without requiring individual packagers to deal
with reproducibility problems, as it can. To get to 99% the project is going
to have to ask packagers to treat reproducibility problems in their
packages as bugs.</p>

<p>The change <span>owners—Jędrzejewski-Szmek</span>, Davide
Cavalca, and Jelle <span>van der Waa—would</span>
package the <a href="https://github.com/keszybz/fedora-repro-build"><tt>fedora-repro-build</tt></a>
utility to allow developers to make local rebuilds of packages built in <a href="https://fedoraproject.org/wiki/Koji">Koji</a> (Fedora's build
system) to test their reproducibility. It will also require standing up a public instance of <a href="https://github.com/kpcyrd/rebuilderd/?tab=readme-ov-file#rebuilderd1---">rebuilderd</a>, which is a system for providing independent verification that binary
packages can be reproduced from source code. It can scan a package
repository's metadata for new or updated packages and then queue them
for rebuilding, and it provides an API to query for the reproducibility
status of packages. Rebuilderd can also, optionally, use the <a href="https://diffoscope.org/">diffoscope</a> tool to generate a
report of differences. The <a href="https://reproducible.archlinux.org/">Arch Linux reproducible
status page</a> provides a good example of rebuilderd in use.</p>

<p>If accepted, the proposal would also require an update to Fedora's <a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/">packaging
guidelines</a> that would say packages should (not, at least
currently, "must") build reproducibly and allow bugs to be filed
against packages when they are not reproducible.</p>

<p>Aside from the security benefits of reproducibility, the proposal
also makes the case that it will lead to packages of higher
quality. Irreproducible bits in packages are quite often "<q>caused by
an error or sloppiness in the code</q>". For example, dependence on
hardware architecture in architecture-independent (noarch) packages is
"<q>almost always unwanted and/or a bug</q>", and reproducibility tests
can uncover those bugs.</p>

<p>The proposal acknowledges that some packages will have problems
with reproducibility that cannot be fixed easily. For example, Haskell
packages are not currently reproducible when compiled by more than one
thread, though <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12935">a fix is
being worked on</a>. Packages produced with Go have <a href="https://pagure.io/fedora-reproducible-builds/project/issue/15">debug
data that is not reproducible</a> because the GNU Debugger index file
(<tt>.gdb_index</tt>) can be of varying size even given the same
input. No fix is yet in the works for that. Another known problem is
that the Linux kernel uses an ephemeral key for module signatures. LWN <a href="https://lwn.net/Articles/1012946/">covered</a> a patch set from
Thomas Weißschuh that may solve that problem.</p>

<h4>Feedback</h4>

<p>In the discussion thread on Fedora's Discourse forum, Fedora's
infrastructure lead Kevin Fenzi <a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/8">asked</a>,
"<q>where will this [rebuilderd] instance live and who will maintain
it? 🙂</q>" He also noted it would be good to have documentation on
setting up a rebuilderd instance. "<q>Otherwise I like the
idea!</q>" Cavalca <a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/9">said</a>
that the reproducibility work was currently using an Amazon Web
Services (AWS) account sponsored by Meta, but "<q>we can look at
moving into Fedora infra if there's a preference for that</q>". Fenzi
<a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/10">replied</a>
that it might be good to keep running the work outside Fedora
infrastructure to make it more independent. "<q>Although of course we could run one and
then others could run others and compare</q>".</p>

<p>Daniel P. Berrangé <a href="https://lwn.net/ml/all/Z9vPRyCDNOunM0yY%40redhat.com/">asked</a>
if rebuilderd could be integrated with Koji so that maintainers did
not have to learn another build tool. "<q>I'm pretty unenthusiastic
about dealing with yet another standalone web service providing
post-build testing.</q>" Jędrzejewski-Szmek <a href="https://lwn.net/ml/all/Z9vacXyfaLMAqpbu@kawka3.in.waw.pl/">said</a>
that using Koji to perform the build was an interesting idea, but "<q>we
also want our rebuilds to be as independent as possible</q>", so it
would still be desirable to do them in a system other than
Koji. Rebuilding a package the second time in the same build
environment means "<q>we are not testing much</q>".</p>

<p>Miroslav Suchý, a member of Fedora's infrastructure team, 
<a href="https://lwn.net/ml/all/1f4e42ae-8730-4c12-b9b3-b9ba98ab4979@redhat.com/">wondered</a>
if rebuilderd could submit builds to Fedora's <a href="https://copr.fedorainfracloud.org/">Copr</a> build system
instead of standing up yet another build system in Fedora. This led to
a discussion about Copr's capabilities and whether it would integrate
well with rebuilderd. Jędrzejewski-Szmek <a href="https://lwn.net/ml/all/Z9vUWrmpqwMi4RDm@kawka3.in.waw.pl/">noted</a>
that rebuilderd is a "<q>complete project that does things in its own
way</q>" and it may be complicated to try to teach it to talk to an
external service asynchronously.</p>

<p>Integrating rebuilderd tooling and reports into Fedora's existing
infrastructure has been a recurring theme in the discussion. Simon de
Vlieger <a href="https://lwn.net/ml/all/e47d555a-9bb1-42fd-81ad-6c08eaee5214@app.fastmail.com/#t">said</a>
he was not set on having builds performed in Koji, but wanted the
project "<q>to integrate well with Fedora's <span>pre-existing</span> tools and things so it has the
highest chance of people actually using it</q>" and performing as
people expect.</p>

<h4>Next</h4>

<p>The next step for the proposal is to file a <a href="https://docs.fedoraproject.org/en-US/fesco/#ticket-votes">ticket</a>
with the Fedora Engineering Steering Committee (FESCo), at least one
week after the proposal was <a href="https://lwn.net/ml/all/CAJqbrbcQ2g-rWNUQ4ee2g8bOR3z-_bgvGL+zNKBS48+C5GVFmw@mail.gmail.com/#t">announced</a>. In
this case, that would be no sooner than March&nbsp;26. If FESCo
approves, the owners can begin work on the proposal with an eye to
completion by October, when Fedora&nbsp;43 is planned for release.</p>

<p>Most of Fedora's users have probably not noticed the
reproducibility work in Fedora thus far and won't appreciate any
difference when they install Fedora&nbsp;43 (or 44, 45, and so
on). However, given the continual efforts of bad actors to find and
exploit supply-chain weaknesses in open-source projects, it is a
valuable effort nonetheless.</p><br clear="all"><hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Windows 2000 Server named peak Microsoft (129 pts)]]></title>
            <link>https://www.theregister.com/2025/04/11/windows_2000_best_microsoft/</link>
            <guid>43653421</guid>
            <pubDate>Fri, 11 Apr 2025 13:16:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2025/04/11/windows_2000_best_microsoft/">https://www.theregister.com/2025/04/11/windows_2000_best_microsoft/</a>, See on <a href="https://news.ycombinator.com/item?id=43653421">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>The results are in, and it appears that –&nbsp;at least as far as <em>The Register</em>'s most loquacious commenters are concerned – Windows Server 2000 was Microsoft's peak.</p>
<p>The tech giant is <a target="_blank" rel="nofollow" href="https://news.microsoft.com/microsoft-50/">celebrating its 50th birthday</a>, and we <a target="_blank" href="https://www.theregister.com/2025/04/01/50_years_of_microsoft/">asked</a> <i>Register</i> readers for their thoughts on the company's milestones and missteps over the years.</p>
<p>Many of you had a fondness for the halcyon days of Windows NT, with even NT 4 getting a nostalgic nod. However, it was Windows 2000 Server that seemed to attract the most affection.</p>

    

<p>Reader <i>Decay</i> remarked: "If I was to formulate a list of requirements and break them into Must Do, Should Do, Like To columns, W2K got the Must Do and Should Do columns nearly all ticked and didn't spend a lot of time in the Like To space."</p>

        


        

<p><i>'Bluey</i> agreed, saying: "Sad thing is, back then Windows actually looked like it was going to turn into a great OS. Looked like it was going somewhere."</p>
<p>It was, but not in the direction many of you wanted. Yes, XP and Windows 7 received some love, and even Vista was acceptable for users with suitable hardware (rather than recommended), but Windows 8 and its successors were not universally praised. Windows 8, after all, had a user interface more suited to a mobile device, and Windows 11 has yet to set the world alight.</p>

        

<p>Away from desktop Windows, a few readers declared the <a target="_blank" href="https://www.theregister.com/2024/05/05/microsoft_nokia_anniversary/">acquisition</a> of Nokia not necessarily a misstep, but what Microsoft did with Windows Phone thereafter was most definitely a misstep. A lack of an upgrade path for devices, combined with changing development frameworks, left users cold.</p>
<ul>

<li><a href="https://www.theregister.com/2025/04/07/microsoft_april_1_pricing_mistake/">No joke: Microsoft foolishly published inaccurate price list on April 1st</a></li>

<li><a href="https://www.theregister.com/2025/04/05/windows_smartwatch_hack/">Introducing Windows on arm. And by arm, we mean wrist</a></li>

<li><a href="https://www.theregister.com/2025/04/04/windows_11_market_share/">Windows 11 poised to beat 10, mostly because it has to</a></li>

<li><a href="https://www.theregister.com/2025/04/03/windows_365_link/">Windows intros 365 Link, a black box that does nothing but connect to Microsoft's cloud</a></li>
</ul>
<p>One wit (<i>Boris the Cockroach</i>) noted that the company's high points were the prices charged for its software, while the low point was the quality of the aforementioned code.</p>
<p>The company's Office productivity suite also received some recognition from readers.</p>
<p>We'd add the company's pivot to the cloud as another of its achievements, if not particularly innovative. Its survival and success despite <a target="_blank" href="https://www.theregister.com/2009/07/25/microsoft_browser_choice_windows_eu/">legal and regulatory challenges</a> to its dominance and <a target="_blank" href="https://www.theregister.com/2024/12/04/lawsuit_microsoft_windows/">sharper business practices</a> is also notable, although unlikely to merit a mention during Microsoft's <a target="_blank" rel="nofollow" href="https://news.microsoft.com/microsoft-50/">celebratory event</a>.</p>
<p>Overall, as Microsoft turns 50, the consensus is that the company's best days are receding behind it. Its milestones included the iconic Windows 95, but its early foray into server operating systems is what it is remembered most fondly for.</p>

        

<p>It will be up to future IT professionals to decide whether the company's current obsession with AI and its efforts to force the technology on customers will be another notable milestone or something Microsoft will want to forget about in the years to come. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pentagon to terminate $5.1B in IT contracts with Accenture, Deloitte (463 pts)]]></title>
            <link>https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/</link>
            <guid>43653004</guid>
            <pubDate>Fri, 11 Apr 2025 12:23:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/">https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/</a>, See on <a href="https://news.ycombinator.com/item?id=43653004">Hacker News</a></p>
Couldn't get https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[But what if I want a faster horse? (1252 pts)]]></title>
            <link>https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse</link>
            <guid>43652723</guid>
            <pubDate>Fri, 11 Apr 2025 11:39:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse">https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse</a>, See on <a href="https://news.ycombinator.com/item?id=43652723">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>People in tech business circles love this quote by Henry Ford:</p>
<blockquote>
<p>If I had asked people what they wanted, they would have said faster horses.</p>
</blockquote>
<p>The idea is to think outside the box and create entirely new markets instead of just new products in existing ones. Like Apple creating the iPhone (sure, smartphones existed before—but cars also existed before the Ford Model T).</p>
<p>But sometimes, I really want a faster horse.</p>
<p>Netflix in 2012 was a super fast horse. It had a simple but massive catalog of movies and shows, solid recommendations, and basic library management. Compared to my limited local media library it was great. You could actively tune your tastes and rate things with a 5-star system.</p>
<p><img src="https://img.exotext.com/1/vzBUOzXXWZU_1BzCoyxsZ.jpg" alt="">
<img src="https://img.exotext.com/1/uJGx0a12ohaZNjAlWkdGO.jpg" alt="">
<img src="https://img.exotext.com/1/48DF8RvJ0y7NGhXiHV35C.jpg" alt=""></p>
<p>Netflix today is very different. It’s not a library—it’s an <em>experience</em>.
Instead of reliably showing me what I "have" and recommending what I might like, it shuffles content on each interaction, sometimes changing the cover images of shows in real time, like some black-market charlatan. It has no meaningful catalog, no real categories—just short-lived, auto-generated groups like “Binge-worthy” or “Festive spirit.”</p>
<p>Even the “New” section is meaningless. It opens with a “For You” row (huh?), then “Continue Watching”, followed by generic "Popular in <your country="">" rows. It feels like YouTube search: ask for something specific, get a few hits, and then a flood of unrelated "popular" and "recommended" content.</your></p>
<p>“My List” on Netflix randomly shuffles items and changes their covers every few hours. “Continue Watching” may or may not include what I actually watched recently. Sometimes, the engagement algorithms resurrect some random Slovakian cartoon I opened three years ago—one and immediately closed because it that had no English subtitles here in Finland, even though they do exist in other regions.</p>
<p>I just want a faster horse.</p>
<p>Spotify in 2015 was also a super fast horse. It was like my iTunes library, but with millions more tracks. Getting new music became faster, but it didn’t change the nature of my relationship with music.</p>
<p><img src="https://img.exotext.com/1/2fD6yw340md6C_hY0gy2L.png" alt=""></p>
<p><img src="https://img.exotext.com/1/k2gx8LUtCVBrliige2EgS.png" alt=""></p>
<p>Spotify today is... basically Netflix. An inconsistent stream of ever-changing content, weak library tools, and an endless barrage of podcasts.</p>
<p>Overall, consistency, user control, and actual UX innovation are in decline. Everything is converging on TikTok—which is basically TV with infinite channels. You don’t control anything except the channel switch. It's like <a href="https://en.wikipedia.org/wiki/Carcinisation">Carcinisation</a>, a form of convergent evolution where unrelated crustaceans all evolve into something vaguely crab-shaped.</p>
<p>The list goes on:</p>
<ul>
<li>YouTube. YouTube: Once a video catalog with social discovery. Now? TikTok.</li>
<li>LinkedIn. Once a network of resumes. Now? TikTok.</li>
<li>Substack. Yeah, a newsletter platform... now launching TikTok-style videos. <a href="https://techcrunch.com/2025/03/31/substack-is-rolling-out-a-tiktok-like-video-feed-in-its-app/">Seriously</a>.</li>
</ul>
<p><img src="https://img.exotext.com/1/rUsJccBXf09TTBnG2OD-r.jpg" alt=""></p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Make a Longbow (125 pts)]]></title>
            <link>https://www.howtomakealongbow.co.uk</link>
            <guid>43652160</guid>
            <pubDate>Fri, 11 Apr 2025 09:49:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.howtomakealongbow.co.uk">https://www.howtomakealongbow.co.uk</a>, See on <a href="https://news.ycombinator.com/item?id=43652160">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="main" data-uniqueid="WZAtJMbXhLcaXcp" data-parentuniqueid="" role="main">            
<div id="page-zones__main-widgets__591b1f41b22ff" data-name="content" data-uniqueid="GuvOCfBgYTiOQuC" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <h2>We are always updating and expanding this site, keep coming back.&nbsp; <a href="https://www.howtomakealongbow.co.uk/contact" target="_self">Let me know</a> what information you would like to see, we are always glad to hear from you.</h2>
          
      </span>
    </p>

    

</div>
                
<div id="page-zones__main-widgets__591b1f41b503f" data-name="content" data-uniqueid="ouCy6AO4H7DF6Cd" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <h4> <span>Have you always wanted to make your own Longbow (and Arrows!) and learn how to shoot using the equipment you made? &nbsp;Yes! &nbsp;Then you have something in common with me.</span></h4><span>I started out (a long time ago!) making my own Longbow because that is what I wanted to shoot with, my boyhood dream of becoming like my hero, Robin Hood, coupled with the scant availability of `off the shelf` Longbows meant I had to have a go at making my own!&nbsp;&nbsp;</span><span><br></span><span>I started out using the garage as a workshop, never to house a car again!<br></span><span><img alt="richard in first workshop in the garage small again insertjpg" src="https://d2f0ora2gkri0g.cloudfront.net/d5/fa/d5fae7c5-1274-4729-b82e-47e41d12d9e5.jpg"><br></span><span>Eventually turning my new hobby into a full time business, my son, Philip and my wife, Lindsay, joined me in the business, Philip became the first Bowyer apprenticed to his father for hundreds of years. &nbsp;For the past few years Philip and myself have been making videos on the various aspects of Bow and Arrow making, trying to pass on my 35+ years of experience to a wider audience, passing on the knowledge to people like you! &nbsp;Here we present those videos, over time we will regularly update the page with written guides and pictures explaining processes <b>you request to see</b>, hopefully building this page into a repository of all the Longbow making skills you will need. &nbsp;Keep checking back to see new info as its added and subscribe to our YouTube channel and join us on Facebook.</span>
          
      </span>
    </p>

    

</div>
                
<div id="page-zones__main-widgets__6061901ccecbe" data-name="content" data-uniqueid="b0wHMFZ7GWosYfB" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <p>WE NEED HELP!<br>The website you are on now costs me money, yes, if you have never owned or run a website before you may not realise this.<br>Our aim is to collect the knowledge/experience Richard has gained over the years, the very same information he has been imparting to Philip, also to preserve it for years to come, this includes making instructional videos.&nbsp; However, we cannot afford to do this without your help, time making the videos and website is time away from the workshop, also, as I mentioned, the website is surprisingly expensive per month.&nbsp; We were hoping, perhaps naively, that we would become YouTube stars and it would all pay for itself, sadly not.&nbsp;&nbsp;<br>So we have taken the decision to set up a `donate` button, if you feel you are able to help with the monthly costs to keep this resource online and expanding with more videos/content then please use the donate button below, you can donate as much or as little as you wish, its a `one off` donation, we wont hassle you or anything like that...thanks for helping us, it means a great deal.</p><a href="https://www.paypal.com/donate/?hosted_button_id=SPKPNPZL55NLE" target="_blank">https://paypal.me/richardheadlongbows?locale.x=en_GB</a></span>
    </p>

    

</div>
                

                
<div id="page-zones__main-widgets__591d80f78432f" data-name="image" data-uniqueid="DwWpgTP0mzW4gLE" data-parentuniqueid="WZAtJMbXhLcaXcp">

        <figure itemscope="" itemtype="https://schema.org/ImageObject">

                                <a href="https://d2f0ora2gkri0g.cloudfront.net/bkpam2329260_5516301c-b005-4070-8961-6193a62eaef8.jpg" target="_self" rel="nofollow" title="The English Longbow" aria-label="Image preview" itemprop="url">

                                <img src="https://d2f0ora2gkri0g.cloudfront.net/bkpam2329260_5516301c-b005-4070-8961-6193a62eaef8.jpg" alt="The English Longbow" data-path="//d2f0ora2gkri0g.cloudfront.net/bkpam2329260_5516301c-b005-4070-8961-6193a62eaef8.jpg" title="The English Longbow" data-filename="5516301c-b005-4070-8961-6193a62eaef8.jpg" data-filesize="" width="300" itemprop="contentURL">
            </a>
        
                                <figcaption>

                                                    <span itemprop="name">The English Longbow</span>
                
                                                    <span itemprop="description">Lets take a look at what it is and what you are aiming for.</span>
                
            </figcaption>
        
    </figure>

</div>
                
<div id="page-zones__main-widgets__591f04fe5da00" data-name="content" data-uniqueid="0cajdY99W0RxtWk" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <p><span>If you have sought out this site, then chances are you already know what a Longbow is or at least what it means to you, there are many types of Longbow and many ways to make one. &nbsp;We specialise in making the English Longbow, essentially a Victorian recreational and sporting bow, a bow once used by Archers in the Olympics, a bow very different to that of its Medieval forebear.&nbsp; This is the type of equipment we will be concentrating on, though we cover many time periods and bows throughout the range of our instructional videos, so you will be able to glean a good taster of many disciplines. &nbsp;A very popular pastime and sport in the Victorian era, the Longbow was also popular with ladies, one of the few sports at the time where woman could compete &nbsp;and take part in the same events as the men. &nbsp;Often an elegant and beautiful item of sporting equipment, handles made with elaborate materials and designs, if you get a chance to see some original Victorian bows then do. &nbsp;The following videos show nice close ups of the finished product, the completed English Longbow, take a look.</span><br></p>
          
      </span>
    </p>

    

</div>
                
<div id="page-zones__main-widgets__591d8c29ab2ca" data-name="youtube" data-uniqueid="99tSJNHQwDTb0Yy" data-parentuniqueid="WZAtJMbXhLcaXcp">

        <p>

                <iframe width="100" height="215" data-src="https://www.youtube.com/embed/QAUkYkesJlk?wmode=transparent" allowfullscreen="" aria-label="Interactive video"></iframe>

    </p>

</div>
                

                
<div id="page-zones__main-widgets__6319f8ff9edd8" data-name="content" data-uniqueid="WCmnjlER5hLin9c" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <p>We have broken the process down into easily digestible chunks, if you are using a laptop computer you will see a menu over on the left, if you are on your phone/tablet you will see a menu button at the top of the page.&nbsp; Either place will show you a number of parts, probably best to start with part 1, but, maybe you have a particular subject in bow making you want to look at, well, you can jump to that section straight away.&nbsp; I hope you like our little lessons and find them useful and inspirational.&nbsp; Starting anything new can seem daunting, but if you go slowly, one step at a time you will lose those fears and soon be on your way.&nbsp; The information we give you here is by no way exhaustive, there are many aspects of bow making we haven't got round to filming yet and we dont know everything!&nbsp; There are many other makers out there offering advice, telling you how to do it, we do not claim to be THE experts, we do not claim to be definitive, take everything you here with a pinch of salt, after all, this is the internet!</p>
          
      </span>
    </p>

    

</div>
                

    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Strengths Are Your Weaknesses (301 pts)]]></title>
            <link>https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/</link>
            <guid>43652024</guid>
            <pubDate>Fri, 11 Apr 2025 09:27:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/">https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/</a>, See on <a href="https://news.ycombinator.com/item?id=43652024">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<p><em>“People are package deals; you take the good with the confused. In most cases, strengths and weaknesses are two sides of the same coin.”</em> — Steve Jobs</p>
</blockquote>



<p>I’ve noticed something interesting about almost every engineer I’ve managed: their biggest strengths and their most frustrating weaknesses are often the exact same trait showing up in different contexts.</p>



<p>I learned this lesson personally when I was still a junior engineer. My ability to code quickly made me very productive — I’d often ship features in half the time estimated. My manager praised my speed constantly. </p>



<p>Well, until one day… During a particularly painful postmortem, we discovered that a production issue happened because of an edge case I had missed in my rush to complete the feature. My strength (coding speed) and my weakness (occasionally overlooking details) weren’t separate traits — they were the exact same characteristic showing up differently depending on the context.</p>



<p>This isn’t just true for me or a few people — it’s nearly universal. <strong>The qualities we celebrate in our team members are usually the same ones causing our biggest headaches</strong>. They’re not separate traits; they’re two sides of the same coin.</p>



<p>So what can we do about this? Three things have helped me:</p>



<ol>
<li><strong>Get real about this duality in your 1:1s.</strong> Most people see their strengths and weaknesses as separate things. They’re not. In 1:1s, I’ll say something like: “Your ability to dive deep into problems is why you find solutions nobody else can. It’s also why you sometimes miss deadlines. Same trait, different outcomes.” This simple reframing helps people stop beating themselves up over their “flaws.”</li>



<li><strong>Be crystal clear about context.</strong> Don’t make people guess when their natural tendencies help versus hurt. One of my engineers was incredibly collaborative—wouldn’t make a single decision without getting everyone’s input. I told him exactly when this worked and when it didn’t: “For architecture decisions? Get all the input you want. For day-to-day coding decisions? You have permission to just decide and move on.” This clear guidance helped him develop his own judgment about when to lean into his collaborative nature.</li>



<li><strong>Use tension as a feature, not a bug.</strong> Some managers try to build teams where everyone works the same way. <a href="https://terriblesoftware.org/2025/03/12/why-your-harmonious-team-is-actually-failing/">That’s a mistake</a>. I once paired our fastest coder with our most methodical, thorough reviewer. The first week was pure chaos—they drove each other nuts. By the third week, they were producing better code than either could alone; the fast coder started anticipating the thorough one’s concerns, and the methodical one learned which shortcuts were actually okay to take.</li>
</ol>



<p>The goal isn’t to create “balanced” engineers with no pronounced strengths or weaknesses. That’s just impossible. <strong>We want self-aware engineers who understand their natural tendencies and can adjust them based on what each situation demands</strong>.</p>



<p>I don’t think our job is to sand down people’s edges until everyone’s the same boring shape. We’re not trying to “fix” our engineers. Instead, we’re helping them see themselves clearly, warts and all, and teaching them when to crank up or dial back their natural tendencies. It’s more like coaching someone to use their power effectively than trying to rebuild them from scratch.</p>



<p>After all, we’re all package deals. The traits that make us brilliant will inevitably challenge us in other contexts. Understanding this doesn’t just make us better managers — it makes us more compassionate humans.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why I Program in Lisp (253 pts)]]></title>
            <link>http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html</link>
            <guid>43651576</guid>
            <pubDate>Fri, 11 Apr 2025 08:26:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html">http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html</a>, See on <a href="https://news.ycombinator.com/item?id=43651576">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3404727118065375102" itemprop="description articleBody">
<p>Lisp is not the most popular language.  It never was.  Other
  general purpose languages are more popular and ultimately can do
  everything that Lisp can (if Church and Turing are correct).  They
  have more libraries and a larger user community than Lisp does.
  They are more likely to be installed on a machine than Lisp is.</p>

<p>Yet I prefer to program in Lisp.  I keep a Lisp REPL open at all
  times, and I write prototypes and exploratory code in Lisp.  Why do
  I do this?  Lisp is easier to remember, has fewer limitations and hoops you
  have to jump through, has lower “friction” between my
  thoughts and my program, is easily customizable, and, frankly, more
  fun.</p>

<p>Lisp's dreaded Cambridge Polish notation is uniform and
  universal.  I don't have to remember whether a form takes curly
  braces or square brackets or what the operator precedency is or some
  weird punctuated syntax that was invented for no good reason.  It is (operator
  operands ...) for everything.  Nothing to remember.  I basically stopped
  noticing the parenthesis 40 years ago.  I can indent how I
  please.</p> 

<p>I program mostly functionally, and Lisp has three features that
  help out tremendously here.  First, if you avoid side effects, it
  directly supports the substitution model.  You can tell Lisp
  that when it sees this simple form, it can just replace it with that
  more complex one.  Lisp isn't constantly pushing you into thinking
  imperatively.  Second, since the syntax is uniform and doesn't depend on
  the context, you can refactor and move code around at will.  Just
  move things in balanced parenthesis and you'll pretty much be
  ok.</p>

<p>Third, in most computer languages, you can abstract a specific value by
  replacing it with a variable that names a value.  But you can perform a further
  abstraction by replacing a variable that names a quantity with a
  function that computes a quantity.  In functional programming, you often downplay
  the distinction between a value and a function that produces that
  value.  After all, the difference is only one of time spent waiting for the
  answer.  In Lisp, you can change an expression that denotes an
  object into an abtraction that computes an object by simply wrapping
  a <code>lambda</code> around it.  It's less of a big deal these
  days, but properly working <code>lambda</code> expressions were only
  available in Lisp until recently.  Even so, <code>lambda</code>
  expressions are generally pretty clumsy in other languages.</p>

<p>Functional programming focuses on functions (go figure!).  These
  are the ideal black box abstraction:  values go in, answer comes
  out.  What happens inside?  Who knows!  Who cares! But you can plug
  little simple functions together and get bigger more complex
  functions.  There is no limit on doing this.  If you can frame your
  problem as "I have this, I want that", then you can code it as a
  functional program.  It is true that functional programming takes a
  bit of practice to get used to, but it allows you to build complex
  systems out of very simple parts.  Once you get the hang of it, you
  start seeing everything as a function.  (This isn't a limitation.
  Church's lambda calculus is a model of computation based on
  functional composition.)</p>

<p>Lisp lets me try out new ideas as quickly as I can come up
  with them.  New programs are indistinguishable from those built in to
  the language, so I can build upon them just as easily.  Lisp's
  debugger means I don't have to stop everything and restart the world
  from scratch every time something goes wrong.  Lisp's safe memory
  model means that bugs don't trash my workspace as I explore the
  problem.</p>

<p>The REPL in lisp evaluates <em>expressions</em>, which are the
  fundamental fragments of Lisp programs.  You can type in part of a
  Lisp program and see what it does immediately.  If it works, you can
  simply embed the expression in a larger program.  Your program takes
  shape in real time as you explore the problem.</p>

<p>Lisp's dynamic typing gives you virtually automatic ad hoc
  polymorphism.  If you write a program that calls +, it will work on
  any pair of objects that have a well-defined + operator.  Now this
  can be a problem if you are cavalier about your types, but if
  you exercise a little discipline (like not defining + on
  combinations of strings and numbers, for example), and if you avoid
  automatic type coercion, then you can write very generic code that
  works on a superset of your data types.  (Dynamic typing is a
  two-edged sword.  It allows for fast prototyping, but it can hide
  bugs that would be caught at compile time in a statically typed
  language.)</p>

<p>Other languages may share some of these features, but Lisp has them all
  together.  It is a language that was designed to be used as a tool
  for thinking about problems, and that is the fun part of
  programming.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lead is still bad for your brain (130 pts)]]></title>
            <link>https://neurofrontiers.blog/why-lead-is-still-bad-for-your-brain/</link>
            <guid>43651532</guid>
            <pubDate>Fri, 11 Apr 2025 08:15:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://neurofrontiers.blog/why-lead-is-still-bad-for-your-brain/">https://neurofrontiers.blog/why-lead-is-still-bad-for-your-brain/</a>, See on <a href="https://news.ycombinator.com/item?id=43651532">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><em>Image credit: </em><a href="http://instagram.com/ionut.stefan.92ish">Ionut Stefan</a></p>



<p>Talking about lead is boring. I would know, I’ve spent quite a bit of time trudging through papers about lead while writing this post and the best opening I could come up with is just how mind-numbingly boring lead is. Sadly, boredom isn’t a good indicator for importance. While the days of enthusiastically throwing lead into whatever we could (from water pipes to gasoline to cosmetics to paints for houses and children’s toys) are over, the lead we’ve pumped into the environment doesn’t give up so easily. And if that wasn’t enough, we’ve still found some use cases to keep it hanging around (why yes, I’m talking about batteries).</p>



<p>Ok, but how bad can it really be? The levels of lead are surely not as high anymore, so it’s not really that dangerous, right? Well… short answer: it’s a bit more complicated. The long answer is the rest of the article.</p>



<nav><ol><li><a href="https://neurofrontiers.blog/why-lead-is-still-bad-for-your-brain/#what-is-lead">What is lead?</a></li><li><a href="https://neurofrontiers.blog/why-lead-is-still-bad-for-your-brain/#effects-of-lead-and-mechanisms-behind-them">Effects of lead and mechanisms behind them</a></li><li><a href="https://neurofrontiers.blog/why-lead-is-still-bad-for-your-brain/#what-is-there-to-do">What is there to do?</a></li></ol></nav>



<h2 id="what-is-lead">What is lead?</h2>



<p>Lead is a heavy metal. (Little side note: until the writing of this article, I’ve taken the term “heavy metal” pretty much for granted, because everyone knows what a heavy metal is, right? Right? Well… apparently there’s quite a bit of <a href="https://en.wikipedia.org/wiki/Heavy_metals">ambiguity</a> surrounding the term, but lead is one of the few who meets all of the definitions out there. And heavy typically refers to dense and/or less chemically reactive, i.e. not interested in playing well with others.) So lead is a heavy metal and it’s found naturally in the ground. What makes it pretty neat is that it’s both malleable, but also durable and versatile.</p>



<p>What makes it less neat is that it’s so malleable, versatile, durable, and toxic. As I mentioned in the beginning, lead has been used in a lot of products. And it’s been used since as far back as Roman times. The problem is that lead is so durable, it basically doesn’t degrade. You see, unlike other fun toxic metals, such as mercury (which can be converted in less toxic forms by bacteria), lead is resistant to chemical breakdown, so once you’ve got lead particles in the environment, they will stay there kind of forever, unless you actively remove them somehow. In other words, even if we were to completely stop mining for and using lead (which we aren’t, since the lead-acid battery market is projected to <a href="https://www.globenewswire.com/news-release/2025/03/18/3044684/0/en/Automotive-Lead-Acid-Battery-Market-to-Reach-USD-40-60-Billion-by-2032-Driven-by-Sustained-Demand-in-Conventional-Vehicles-and-Emerging-Economies-SNS-Insider.html">increase</a> in the next years), we would still need to deal in a safe manner with what has been put out there.</p>



<p>Of course, since we’ve stopped putting lead in gasoline (and paints, and cosmetics etc.), things have improved. For example, in the US, <a href="https://www.epa.gov/americaschildrenenvironment/biomonitoring-lead#About%20the%20Lead%20Indicators">levels</a> of lead in blood samples have markedly <a href="https://doi.org/10.1289/ehp.115-a30">decreased</a> since 1976. But a decrease doesn’t mean they’ve reached zero. And while many things with negative effects don’t really harm you in small doses, lead isn’t one of them. There is no safe level of lead exposure. What’s more, an average decrease in the US population doesn’t translate into a decrease of the same magnitude across the world, or even across various subgroups of the US population.</p>



<h2 id="effects-of-lead-and-mechanisms-behind-them">Effects of lead and mechanisms behind them</h2>



<p>We’ve already established that no amount of lead is safe, but still, the effects of lead exposure on the nervous system don’t occur in an all or nothing manner. They depend strongly both on the level of lead to which one is exposed (more is worse), and the developmental period when exposure occurs (children are more affected than adults).</p>



<p>Lead usually enters the body via one of two routes: either the gut or the lungs. Children absorb more lead than adults because their gut and lung linings are immature compared to adults, allowing more lead to pass through. They also need more iron, calcium, and zinc, metals with which lead is in direct competition (and obviously winning). In addition, small children can be simply more exposed to lead as they have the tendency to put both their unwashed hands, as well as potentially contaminated objects, in their mouths.</p>



<p>While the half-life of lead in the blood (meaning the amount of time needed for the concentration to drop to half) is relatively short, at only 28 days, that’s not the same as the half-life in the body. Some of the lead in the blood will not be eliminated, but it will actually go into the soft tissue, i.e. kidneys, liver, brain, where the half-life is a few months, and more annoyingly, into the bones, where the half-life is between 10 to 30 years. What’s more, from here, lead can leach back into the bloodstream, from where it can once again get into the soft tissue and cause more damage. This happens particularly in pregnancy, thus affecting the unborn babies, but it also occurs during normal ageing, and even more so in conditions such as osteoporosis.</p>



<p>Now, acute effects of lead exposure are pretty clear. If someone were to chomp down on a piece of lead, it would result in seizures, coma, and possibly death. But obviously that’s an unrealistic scenario and not what most people are exposed to. Chronic lead exposure, on the other hand, causes lead to accumulate in the body and it has been linked to memory problems (including development of Alzheimer’s disease later in life), as well as cognitive and behavioural problems, including attention deficits, increased aggression, learning problems, and decreased IQ. But here’s the kicker: in the past, these problems were thought to appear only above certain concentrations: above 10 μg/dL, above 5 μg/dL, above 3.5 μg/dL… And yes, the higher the concentration, the worse the effects. Nevertheless, as research has progressed, it’s become clearer and clearer that there is no safe exposure to lead. Even very small concentrations can cause <a href="https://doi.org/10.1016/j.neuro.2019.02.021">neurological effects</a>.</p>



<p>But what are the <a href="https://doi.org/10.1016/j.etap.2019.03.010">molecular mechanisms</a> behind that? (Side note: directly relating one specific molecular disruption to one specific behavioural outcome doesn’t really work, but we can correlate the effects we observe at the behavioural level with the <em>in vitro</em> molecular data to get a clearer picture of how lead wreaks havoc on the nervous system.) So far, three main ones have been <a href="https://doi.org/10.1007/s00204-008-0345-3">identified</a>. Lead alters the fluidity of the cellular membrane, it interferes with calcium-based processes, and it generates reactive oxygen species.</p>



<p>Regarding the cellular membrane, it’s important to understand that it is neither static, nor uniform. On the one hand, there are many proteins embedded in the membrane that basically move around to where they’re needed. On the other hand, the cell membrane has a lot of traffic in the sense of vesicles that either fuse with it, or bud off from it. In particular for neurons, think of synaptic transmission: vesicles from inside the membrane fuse with it to release neurotransmitters, then new ones form where more neurotransmitters are packed, and all this happens under strict control from membrane proteins. To ensure optimal functioning of this process, the fluidity of the membrane needs to be just right: either too much or too little will mess things up.</p>



<p>Calcium is an ion which plays a very important role in regulating synaptic transmission and thus facilitating communication between neurons. Sadly for it, calcium resembles lead quite a lot, so proteins can easily mistake them, and lead forms stronger bonds with these proteins. But while lead can easily steal calcium’s spot, due to small differences in chemical behaviour and in shape, it’s not able to perform the same functions. Instead, it kind of remains stuck in there and jams the system.</p>



<p>Finally, reactive oxygen species, or free radicals, as you might know them, appear partly because of lead’s interference with calcium signaling, but also because lead inhibits antioxidant enzymes, and disrupts mitochondrial function. Reactive oxygen species, in turn, can damage DNA, lipids, and proteins, further exacerbating negative effects in the nervous system.</p>



<h2 id="what-is-there-to-do">What is there to do?</h2>



<p>Panic for the sake of panic is useless (one could even say it’s harmful). So what can we do? First, we said the effects are worse in children, so if they were exposed to lead, is that it? Are they pretty much doomed to suffer the consequences? Not necessarily. Some <a href="https://doi.org/10.1016/j.neuro.2012.10.004">studies</a> show that enriched environments and early behavioural interventions can reverse some, if not all effects associated with early life lead exposure.</p>



<p>Still, prevention is better than intervention, but you might be wondering, how big of a thing is lead exposure still? After all, we figured out a long time ago that lead isn’t good for us (even the Romans knew that) and we’ve already done a lot to get rid of it, no? Well, yes and no. There have been real improvements, especially in removing lead from gasoline, paint, and plumbing. But, as with a lot of other issues, it tends to come down to where you live. As you can imagine, there are relatively pronounced differences between countries, but even within the same one, your ZIP code still matters. Older housing, industrial sites, ageing infrastructure, and underfunded communities all play a role in how much lead still lingers in your air, water, soil, and body.</p>



<p>A few steps to keep in mind for protecting yourself against lead exposure are the following. If you think you might have lead in your home paint or pipes, try to get rid of them in a safe way. If you know there’s lead somewhere in your community, try to get involved and push for programs that promote its removal. And even if the issue doesn’t directly impact you, you can still volunteer to help those who might suffer from it.</p>



<p><em>What did you think about this post? Let us know in the comments below.</em> <em>And if you’d like to support our work, feel free to share it with your friends, buy us a coffee </em><span color="#e91f00"><span><i><a href="https://ko-fi.com/neurofrontiers">here</a></i></span></span>, <em>or even both.</em></p>



<p><em>You might also like:</em></p>





<p><strong>References</strong></p>



<p>GlobeNewswire.&nbsp;(2025, March 18).&nbsp;Automotive lead-acid battery market to reach USD 40.60 billion by 2032, driven by sustained demand in conventional vehicles and emerging economies: SNS Insider. <a href="https://www.globenewswire.com/news-release/2025/03/18/3044684/0/en/Automotive-Lead-Acid-Battery-Market-to-Reach-USD-40-60-Billion-by-2032-Driven-by-Sustained-Demand-in-Conventional-Vehicles-and-Emerging-Economies-SNS-Insider.html">Link</a> [Last retrieved: 2025-04-10]</p>



<p>Lee, J. W., Choi, H., Hwang, U. K., Kang, J. C., Kang, Y. J., Kim, K. I., &amp; Kim, J. H. (2019). Toxic effects of lead exposure on bioaccumulation, oxidative stress, neurotoxicity, and immune responses in fish: A review.&nbsp;<em>Environmental toxicology and pharmacology</em>,&nbsp;<em>68</em>, 101-108. <a href="https://doi.org/10.1016/j.etap.2019.03.010">https://doi.org/10.1016/j.etap.2019.03.010</a></p>



<p>Moodie, S., Ialongo, N., López, P., Rosado, J., García-Vargas, G., Ronquillo, D., &amp; Kordas, K. (2013). The conjoint influence of home enriched environment and lead exposure on children’s cognition and behaviour in a Mexican lead smelter community.&nbsp;<em>Neurotoxicology</em>,&nbsp;<em>34</em>, 33-41. <a href="https://doi.org/10.1016/j.neuro.2012.10.004">https://doi.org/10.1016/j.neuro.2012.10.004</a></p>



<p>Rocha, A., &amp; Trujillo, K. A. (2019). Neurotoxicity of low-level lead exposure: History, mechanisms of action, and behavioral effects in humans and preclinical models.&nbsp;<em>Neurotoxicology</em>,&nbsp;<em>73</em>, 58-80. <a href="https://doi.org/10.1016/j.neuro.2019.02.021">https://doi.org/10.1016/j.neuro.2019.02.021</a></p>



<p>Spivey, A. (2007). The weight of lead: Effects add up in adults. <a href="https://doi.org/10.1289/ehp.115-a30">https://doi.org/10.1289/ehp.115-a30</a></p>



<p>U.S. Environmental Protection Agency.&nbsp;(2023).&nbsp;Biomonitoring: Lead indicators – America’s Children and the Environment. <a href="https://www.epa.gov/americaschildrenenvironment/biomonitoring-lead#About%20the%20Lead%20Indicators">Link</a> [Last retrieved: 2025-04-10]</p>



<p>Verstraeten, S. V., Aimo, L., &amp; Oteiza, P. I. (2008). Aluminium and lead: molecular mechanisms of brain toxicity.&nbsp;<em>Archives of toxicology</em>,&nbsp;<em>82</em>, 789-802. <a href="https://doi.org/10.1007/s00204-008-0345-3">https://doi.org/10.1007/s00204-008-0345-3</a></p>



<p>Wikipedia contributors.&nbsp;(2025, April 10).&nbsp;Heavy metals. <em>Wikipedia</em>. <a href="https://en.wikipedia.org/wiki/Heavy_metals">Link</a> [Last retrieved: 2025-04-10]</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The thing about Europe: it's the actual land of the free now (152 pts)]]></title>
            <link>https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now</link>
            <guid>43651489</guid>
            <pubDate>Fri, 11 Apr 2025 08:04:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now">https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now</a>, See on <a href="https://news.ycombinator.com/item?id=43651489">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><time datetime="2025-04-10T12:53:53.593Z"> <!-- -->Apr 10th 2025</time></p></div><section><p data-component="paragraph"><span data-caps="initial">T</span><small>he thing </small>about Europe, the sneerers say, is that it is over-regulated. Mounds of red tape and punitive taxes mean there are no trillion-dollar entrepreneurial ventures in France or Germany to match Amazon, Google or Tesla. But that is not all Europe is lacking. Also absent from the continent are the broligarchs who sit atop such behemoths, some of whom have a tighter grip on power than on reality. There are thus no European Rasputins pumping untold millions into political campaigns, getting pride of place at leaders’ inaugurations or their own new-minted government departments to run. There are few unicorns in Europe, alas, and too little innovation. That said, there are absolutely no tech executives boasting on social media of spending their weekends feeding bits of the state “into the wood chipper”.</p></section><p><h3 id="article-tags">Explore more</h3><nav aria-labelledby="article-tags"><a href="https://www.economist.com/topics/world" data-analytics="tags:world"><span>World</span></a><a href="https://www.economist.com/topics/charlemagne" data-analytics="tags:charlemagne"><span>Charlemagne</span></a><a href="https://www.economist.com/topics/europe" data-analytics="tags:europe"><span>Europe</span></a></nav></p><p>This article appeared in the Europe section of the print edition under the headline “The thing about Europe”</p><div data-test-id="chapterlist" data-tracking-id="content-well-chapter-list"><div><hr data-testid="rule-accent"><div><h3><a href="https://www.economist.com/europe" text="Europe" data-analytics="chapter_list_header:Europe">Europe</a></h3><p><span>April 12th 2025</span></p></div></div><ul><li><a href="https://www.economist.com/europe/2025/04/09/germanys-new-centrist-government-is-reassuring-but-bland" id="e5df72b7-5b2b-464e-93b4-77ddd0878a14" data-analytics="article:reports_headline:1" data-test-id="chapterlist-link-0"><span data-testid="right-london-5-false"><span>→</span></span><span>Germany’s new centrist government is reassuring but bland</span></a></li><li><a href="https://www.economist.com/europe/2025/04/09/the-eus-response-to-donald-trumps-tariffs-seems-to-work" id="3962b04a-a8db-42bf-868c-90261c728b3a" data-analytics="article:reports_headline:2" data-test-id="chapterlist-link-1"><span data-testid="right-london-5-false"><span>→</span></span><span>The EU’s response to Donald Trump’s tariffs seems to work</span></a></li><li><a href="https://www.economist.com/europe/2025/04/08/ukraine-thinks-it-can-hold-off-russia-as-long-as-it-needs-to" id="aca46504-49d9-4373-9c65-7630bd24d811" data-analytics="article:reports_headline:3" data-test-id="chapterlist-link-2"><span data-testid="right-london-5-false"><span>→</span></span><span>Ukraine thinks it can hold off Russia as long as it needs to</span></a></li><li><a href="https://www.economist.com/europe/2025/04/06/how-europe-hopes-to-turn-ukraine-into-a-steel-porcupine" id="65fd8bdb-3472-4072-93b9-fd540b68f13b" data-analytics="article:reports_headline:4" data-test-id="chapterlist-link-3"><span data-testid="right-london-5-false"><span>→</span></span><span>How Europe hopes to turn Ukraine into a “steel porcupine”</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/turkeys-government-is-trying-to-repress-its-way-out-of-a-crisis" id="7d8658c9-66aa-49d5-a850-c42b0c85f2d5" data-analytics="article:reports_headline:5" data-test-id="chapterlist-link-4"><span data-testid="right-london-5-false"><span>→</span></span><span>Turkey’s government is trying to repress its way out of a crisis</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/spanish-morgues-are-straining-to-identify-migrants" id="35e164dd-f80a-4370-bcc3-47e3961713f8" data-analytics="article:reports_headline:6" data-test-id="chapterlist-link-5"><span data-testid="right-london-5-false"><span>→</span></span><span>Spanish morgues are straining to identify migrants</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now" id="ad25ce23-9bae-4699-9124-6b5bf8776946" data-analytics="article:reports_headline:7" data-test-id="chapterlist-link-6"><span data-testid="right-economist-red-false"><span>→</span></span><span>The thing about Europe: it’s the actual land of the free now</span></a></li></ul></div><div orientation="vertical" data-test-id="vertical"><div orientation="vertical"><figure><img loading="lazy" width="1280" height="1709" decoding="async" data-nimg="1" sizes="300px" srcset="https://www.economist.com/cdn-cgi/image/width=16,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 16w, https://www.economist.com/cdn-cgi/image/width=32,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 32w, https://www.economist.com/cdn-cgi/image/width=48,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 48w, https://www.economist.com/cdn-cgi/image/width=64,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 64w, https://www.economist.com/cdn-cgi/image/width=96,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 96w, https://www.economist.com/cdn-cgi/image/width=128,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 128w, https://www.economist.com/cdn-cgi/image/width=256,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 256w, https://www.economist.com/cdn-cgi/image/width=360,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 360w, https://www.economist.com/cdn-cgi/image/width=384,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 384w, https://www.economist.com/cdn-cgi/image/width=480,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 480w, https://www.economist.com/cdn-cgi/image/width=600,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 600w, https://www.economist.com/cdn-cgi/image/width=834,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 834w, https://www.economist.com/cdn-cgi/image/width=960,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 960w, https://www.economist.com/cdn-cgi/image/width=1096,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1096w, https://www.economist.com/cdn-cgi/image/width=1280,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1280w, https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1424w" src="https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg"></figure></div><div orientation="vertical"><h3 orientation="vertical">From the April 12th 2025 edition</h3><p orientation="vertical">Discover stories from this section and more in the list of contents</p><p><a href="https://www.economist.com/weeklyedition/2025-04-12" data-analytics="sidebar:weekly_edition"><span data-testid="right-economist-red-true"><span>⇒</span></span><span>Explore the edition</span></a></p></div></div><div><a href="https://s100.copyright.com/AppDispatchServlet?publisherName=economist&amp;publication=economist&amp;title=The%20thing%20about%20Europe%3A%20it%E2%80%99s%20the%20actual%20land%20of%20the%20free%20now&amp;publicationDate=2025-04-10&amp;contentID=%2Fcontent%2F2uekcbhb1cdfhkhgafg61bvhel9pm03o&amp;type=A&amp;orderBeanReset=TRUE" target="_blank" rel="noreferrer" data-analytics="end_of_article:reuse_this_content"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" data-testid="renew-outline"><path fill="var(--mb-colour-base-chicago-45)" d="M5.1 16.05a8.25 8.25 0 0 1-.825-1.95A7.696 7.696 0 0 1 4 12.05c0-2.233.775-4.133 2.325-5.7C7.875 4.783 9.767 4 12 4h.175l-1.6-1.6 1.4-1.4 4 4-4 4-1.4-1.4 1.6-1.6H12c-1.667 0-3.083.588-4.25 1.763C6.583 8.938 6 10.367 6 12.05c0 .433.05.858.15 1.275.1.417.25.825.45 1.225l-1.5 1.5ZM12.025 23l-4-4 4-4 1.4 1.4-1.6 1.6H12c1.667 0 3.083-.587 4.25-1.762C17.417 15.063 18 13.633 18 11.95c0-.433-.05-.858-.15-1.275-.1-.417-.25-.825-.45-1.225l1.5-1.5c.367.633.642 1.283.825 1.95.183.667.275 1.35.275 2.05 0 2.233-.775 4.133-2.325 5.7C16.125 19.217 14.233 20 12 20h-.175l1.6 1.6-1.4 1.4Z"></path></svg><span>Reuse this content</span></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Live Map of the London Underground (464 pts)]]></title>
            <link>https://www.londonunderground.live/</link>
            <guid>43651390</guid>
            <pubDate>Fri, 11 Apr 2025 07:41:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.londonunderground.live/">https://www.londonunderground.live/</a>, See on <a href="https://news.ycombinator.com/item?id=43651390">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    
    <p>
      Right click to orbit<br>
      Zoom for buildings<br>
      Hover for details
    </p>
    <p id="live-icon">
      <svg viewBox="0 0 100 40" xmlns="http://www.w3.org/2000/svg">
        <circle cx="20" cy="20" r="10" fill="#ff0000"></circle>
        <text x="45" y="29" fill="#ff0000" font-size="30">LIVE</text>
      </svg>
    </p>
  </div></div>]]></description>
        </item>
    </channel>
</rss>