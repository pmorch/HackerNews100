<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 20 Dec 2024 08:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[My favourite colour is Chuck Norris red (162 pts)]]></title>
            <link>https://htmhell.dev/adventcalendar/2024/20/</link>
            <guid>42468318</guid>
            <pubDate>Fri, 20 Dec 2024 04:35:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://htmhell.dev/adventcalendar/2024/20/">https://htmhell.dev/adventcalendar/2024/20/</a>, See on <a href="https://news.ycombinator.com/item?id=42468318">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="content"><div><p>by <a href="https://vale.rocks/">Declan Chidlow</a> published on <time datetime="2024-12-20">Dec 20, 2024</time></p><p>Setting the colour of text on a webpage is usually a simple affair involving whipping it out the good ol' CSS <code>color</code> property. But this is HTMHell, dammit. None of that wishy-washy CSS nonsense here. No siree. We use HTML as the good lord intended and shalln't stray into the sins of cascading sheets lest we end up some non-HTML variant of hell where they define page structure with JavaScript vars.</p><p>But HTML isn't great for defining styles -- or at least, it isn't anymore. If we wind back the clocks a few years to HTML versions of old, we find the colour attribute. If you've been around for a while, you've no doubt seen it. Something like this:</p><pre><code><span><span><span><span>&lt;</span>font</span> <span>color</span><span><span>=</span><span>"</span>#d72b2b<span>"</span></span><span>&gt;</span></span>HTMHell rules!<span><span><span>&lt;/</span>font</span><span>&gt;</span></span></span></code></pre><p><span color="#d72b2b">HTMHell rules!</span></p><p>If we render that in a browser, we get some text in the lovely HTMHell red. That's great. That's what we'd expect. Next we'll choose another colour. Something a bit different. Let's try 'chucknorris'.</p><pre><code><span><span><span><span>&lt;</span>font</span> <span>color</span><span><span>=</span><span>"</span>chucknorris<span>"</span></span><span>&gt;</span></span>But... Chuck Norris isn't a colour.<span><span><span>&lt;/</span>font</span><span>&gt;</span></span></span></code></pre><p><span color="chucknorris">But... Chuck Norris isn't a colour.</span></p><p>If you go through the effort of loading <em>that</em> up in a browser, you might notice it makes the text red. Why?</p><h2 id="some-funny-character-parsing">Some funny character parsing</h2><p>HTML generally doesn't have an error state, at least not one akin to what would happen if writing something like invalid JavaScript. Browsers are very forgiving when parsing HTML (which explains how people have gotten away with the crimes documented throughout this website) and generally do their best to make up for user error. If you leave a dangling <code>&lt;div&gt;</code>, the browser will do its best to close it up and render it out.</p><p>This forgiveness is the reason behind the funkiness. Browsers simply try to forge ahead with the invalid value and hope it'll work. In the past web browsers all handled invalid values a bit differently, but now it's all outlined in the <a href="https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-colour-value">"rules for parsing a legacy color value" part of the HTML spec</a>. A surmised version of the parsing outlined there is as follows:</p><ol><li><p>Initial Cleanup:</p><ul><li>If an octothorpe (#) is located at the start of the value, it's removed.</li><li>The colour attribute only accepts hexes, so there isn't a point keeping it.</li><li>Example: "#FF0000" becomes "FF0000".</li></ul></li><li><p>Replace Invalid Characters:</p><ul><li>Any non-hexadecimal characters (anything not 0-9 or A-F/a-f) are removed and replaced with '0'.</li><li>Example: 'abcxyz123' becomes 'abc000123'.</li></ul></li><li><p>Standardise Length:</p><ul><li>While the string's length is 0 or not divisible by 3, append '0'.</li><li>Examples:<ul><li>"F" becomes "F00" (padded to length 3).</li><li>"FFFF" becomes "FFFF00" (padded to length 6).</li><li>"FFFFFF0" becomes "FFFFFF000" (padded to length 9).</li></ul></li></ul></li><li><p>Split into Red, Green, and Blue:</p><ul><li>The first third becomes the red value.</li><li>The second third becomes the green value.</li><li>The last third becomes the blue value.</li><li>Example: "FFFFFF000" becomes ["FFF", "FFF", "000"].</li></ul></li><li><p>Handle Length:</p><ul><li>If any component is longer than 8 characters, remove the characters from the left until it's 8 characters long.<ul><li>Example: "123456789" → "23456789"</li></ul></li><li>While the length is greater than 2, and all components start with '0', remove the leading '0' from each component.<ul><li>Example: ["000F", "000F", "000F"] becomes ["00F", "00F", "00F"] which then becomes ["0F", "0F", "0F"].</li></ul></li><li>If length is still greater then 2 keep only the first 2 characters of each component.<ul><li>Example: ["ABC", "DEF", "123"] becomes ["AB", "DE", "12"].</li></ul></li></ul></li><li><p>Putting It Together:</p><ul><li>Get the final red, blue, and green components, then put them together in that order to create the colour.</li><li>Example: ["AB", "DE", "12"] becomes ABDE12.</li></ul></li></ol><p>I've written a small tool over on CodePen that will take any inputted value, break down the processing step by step, and output the colour as it would be handled. Go have a bit of fiddle!</p><p data-height="300" data-default-tab="result" data-slug-hash="yLmKBpN" data-pen-title="Legacy HTML Colour Parsing Demo" data-user="OuterVale"><span>See the Pen <a href="https://codepen.io/OuterVale/pen/yLmKBpN">Legacy HTML Colour Parsing Demo</a> by Declan Chidlow (<a href="https://codepen.io/OuterVale">@OuterVale</a>) on <a href="https://codepen.io/">CodePen</a>.</span></p><h2 id="some-fun-examples">Some fun examples</h2><p>So, we know this happens and why. The next task is obviously to have some fun with it. Finding words whose computed colours correlate with them is great fun. For example, 'Sonic' gives us a lovely blue like the hedgehog. I've put together a little table of some of these coincidental match ups:</p><p data-height="300" data-default-tab="result" data-slug-hash="wvLbjpZ" data-pen-title="Word Correlations With HTML Colour Parsing" data-user="OuterVale"><span>See the Pen <a href="https://codepen.io/OuterVale/pen/wvLbjpZ">Word Correlations With HTML Colour Parsing</a> by Declan Chidlow (<a href="https://codepen.io/OuterVale">@OuterVale</a>) on <a href="https://codepen.io/">CodePen</a>.</span></p><h2 id="interesting-parsing-in-the-modern-era">Interesting parsing in the modern era</h2><p>So, that's all well and good, but it's old news. The <code>color</code> and <code>bgcolor</code> attributes that permitted our parsing adventures are relics of HTML 4. They're obsolete (though still in active use on a disturbingly high number of websites). That isn't to say quirks like that have disappeared completely though. CSS has its own set of fascinating peculiarities when it comes to handling invalid colour values. Most modern browsers will clamp values rather than reject them outright -– throw rgb(300, -50, 1000) at a browser and it won't fail; it'll helpfully transform it into rgb(255, 0, 255).</p><p>The web's foundational principle of forgiveness -– the inherent flexibility that allows "chucknorris" to be parsed as red, even though the reason it does so is old, silly, and unsupported –- hasn't gone anywhere. Modern browsers still bend over backward to make our code work, even when we throw nonsense at them. It doesn't take long to see this forgiveness in action within the cursed examples held within the pages of HTMHell. Each horrifying snippet, each questionable hack, each "it works but why" moment exists because browsers simply refuse to give up on rendering our 'mistakes'.</p><p>The web is built on this foundation of resilience, both in technology and <a href="https://www.w3.org/blog/2022/a-letter-from-our-ceo-the-web-as-the-ultimate-tool-of-resilience-for-the-world">ethos</a>. It's what allows a website from 1996 to still render in a modern browser. It's what lets a page load even when half the CSS is invalid. It's what makes it magic.</p><p>I've heard people quip that browsers should be less forgiving and enforce perfection. That allowing jank makes the web somehow 'bad'. I think a perfect web would be a boring web. I certainly wouldn't be here writing were it 'perfect'. It's about making the web work, no matter what we throw at it, and I wouldn't have it any other way.</p><p>After all, in a perfect web, "chucknorris" would just be another error message -– and where's the fun in that?</p><h2 id="resources">Resources</h2><ul><li><a href="http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html">Sam's Place - A little rant about Microsoft Internet Explorer's color parsing</a></li><li><a href="https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-colour-value">HTML Standard</a></li><li><a href="https://stackoverflow.com/q/8318911">Why does HTML think "chucknorris" is a color?</a></li></ul><h2 id="about-declan-chidlow">About Declan Chidlow</h2><p>Front-end developer, designer, dabbler, and avid user of the superpowered information superhighway.</p><p>Website: <a href="https://vale.rocks/">vale.rocks</a><br>Fediverse: <a href="https://fedi.vale.rocks/vale">@vale@fedi.vale.rocks</a><br>Bluesky: <a href="https://bsky.app/profile/vale.rocks">@vale.rocks</a></p><h2 id="more-articles">More articles</h2><nav aria-label="Select next or previous entry"><ol><li><a href="https://htmhell.dev/adventcalendar/2024/19/" rel="prev"><p>Previous day (19)</p>Getting Oriented with HTML Video</a></li></ol></nav></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Doctors Without Borders declares the war in Gaza as genocide (149 pts)]]></title>
            <link>https://www.doctorswithoutborders.org/latest/gaza-death-trap-msf-report-exposes-israels-campaign-total-destruction</link>
            <guid>42467375</guid>
            <pubDate>Fri, 20 Dec 2024 01:09:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.doctorswithoutborders.org/latest/gaza-death-trap-msf-report-exposes-israels-campaign-total-destruction">https://www.doctorswithoutborders.org/latest/gaza-death-trap-msf-report-exposes-israels-campaign-total-destruction</a>, See on <a href="https://news.ycombinator.com/item?id=42467375">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <div>
      <p>Repeated Israeli military attacks on <a href="https://www.doctorswithoutborders.org/what-we-do/where-we-work/palestine" data-entity-type="node" data-entity-uuid="89bade8a-5775-4fce-9ca4-060ade776857" data-entity-substitution="canonical" title="Palestine">Palestinian</a> civilians over the last 14 months, the dismantling of the health care system and other essential <a href="https://www.doctorswithoutborders.org/latest/how-year-war-has-devastated-gazas-civilian-infrastructure" data-entity-type="node" data-entity-uuid="9b3b38b2-c69e-4543-8861-d1c461faefb9" data-entity-substitution="canonical" title="How a year of war has devastated Gaza’s civilian infrastructure">infrastructure</a>, the suffocating siege, and the systematic <a href="https://www.doctorswithoutborders.org/latest/palestinians-northern-gaza-are-desperate-need-aid" data-entity-type="node" data-entity-uuid="05c48515-8e9d-46a8-a520-85d400c922fa" data-entity-substitution="canonical" title=" Palestinians in northern Gaza are in desperate need of aid">denial</a> of humanitarian assistance are destroying the conditions of life in Gaza, according to a new Doctors Without Borders/Médecins Sans Frontières (MSF) report, "<a href="https://www.doctorswithoutborders.org/sites/default/files/documents/MSF_REPORT_Gaza%20Life%20in%20a%20death%20trap%20Report_20241229.pdf">Gaza: Life in a Death Trap</a>."&nbsp;</p>
</div>
                        <div><p>The international medical humanitarian organization is urgently calling on all parties, once again, for an <a href="https://www.doctorswithoutborders.org/latest/doctors-without-borders-calls-immediate-ceasefire-gaza" data-entity-type="node" data-entity-uuid="0a57b5b1-1f3e-4aac-a965-e8c4efac6070" data-entity-substitution="canonical" title="Doctors Without Borders calls for immediate ceasefire in Gaza">immediate ceasefire</a> to save lives and enable the flow of humanitarian aid. Israel must stop its targeted and indiscriminate attacks against civilians, and its allies must act without delay to protect the lives of Palestinians and uphold the rules of war.</p><p>"People in Gaza are struggling to survive apocalyptic conditions, but nowhere is safe, no one is spared, and there is no exit from this shattered enclave," said Christopher Lockyear, MSF secretary general, who visited Gaza earlier this year. The recent <a href="https://www.doctorswithoutborders.org/latest/whats-happening-northern-gaza" data-entity-type="node" data-entity-uuid="eae15551-d701-4eab-8d81-7f074f6aae00" data-entity-substitution="canonical" title="What’s happening in northern Gaza? ">military offensive in the north</a> is a stark illustration of the brutal war the Israeli forces are waging on Gaza, and we are seeing clear signs of ethnic cleansing as Palestinians are forcibly displaced, trapped, and bombed.”&nbsp;</p></div>
    <div>
      
      <div>
              
              <div><h2>Bearing witness in Gaza</h2><p>"What our medical teams have witnessed on the ground throughout this conflict is consistent with the descriptions provided by an increasing number of legal experts and organizations concluding that genocide is taking place in Gaza,” Lockyear said. “While we don't have legal authority to establish intentionality, the signs of ethnic cleansing and the ongoing devastation—including mass killings, severe physical and <a href="https://www.doctorswithoutborders.org/what-we-do/medical-issues/mental-health" data-entity-type="node" data-entity-uuid="dbe372ca-7cce-4d31-a84e-5bd5297f1f22" data-entity-substitution="canonical" title="Mental health">mental health</a> injuries, forced displacement, and impossible conditions of life for Palestinians under siege and bombardment—are undeniable."</p><p>In response to the horrific attacks carried out by Hamas and other armed groups in Israel on October 7, 2023—in which 1,200 people were killed and 251 people were taken hostage—Israeli forces are crushing the entire population of Gaza. Israel's all-out war on Gaza has reportedly <a href="https://www.ochaopt.org/content/humanitarian-situation-update-247-gaza-strip">killed more than 45,000 people</a>, according to the Ministry of Health, <a href="https://www.doctorswithoutborders.org/latest/remembering-our-colleagues-killed-gaza" data-entity-type="node" data-entity-uuid="daf39f9f-0731-49d5-ae0b-8ddd0b98b14e" data-entity-substitution="canonical" title="Remembering our colleagues killed in Gaza">including eight MSF colleagues</a>. The number of excess deaths related to the war is likely much higher due to the impacts of a collapsed health care system, disease outbreaks, and severely limited access to food, water, and shelter. The United Nations estimated earlier this year that more than 10,000 bodies remained buried under the rubble. &nbsp;</p></div>
              <div>
    <blockquote><p>What our medical teams have witnessed on the ground throughout this conflict is consistent with the descriptions provided by an increasing number of legal experts and organizations concluding that genocide is taking place in Gaza.</p><figcaption>Christopher Lockyear, MSF secretary general</figcaption></blockquote>
  </div>
              <div>
    <p>Israeli forces have on numerous occasions prevented essential items such as food, water, and medical supplies from entering the Strip, as well as <a href="https://www.doctorswithoutborders.org/latest/impossible-task-getting-lifesaving-supplies-gaza" data-entity-type="node" data-entity-uuid="862e46fb-d7f8-4188-a31b-34983c61f433" data-entity-substitution="canonical" title="What it takes to get lifesaving supplies into Gaza">blocked, denied, and delayed</a> humanitarian assistance, as documented in the report. Some 1.9 million people—90 percent of the entire population of the Strip—have been forcibly displaced, many forced to move multiple times.&nbsp;</p>
</div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/04/MSB190917.jpg?itok=uf6HoRII 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/04/MSB190917.jpg?itok=uf6HoRII 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/image_base_media/2024/04/MSB190917.jpg?itok=5lzScnQW 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/image_base_media/2024/04/MSB190917.jpg?itok=45W6yHJV 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/image_base_media/2024/04/MSB190917.jpg?itok=odENLaRF 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/04/MSB190917.jpg?itok=uf6HoRII" width="1340" height="893" alt="Destruction inside Nasser Hospital in Gaza.">

  </picture>


      <p><span>
          <figcaption>
            Destruction inside Nasser Hospital in Gaza on March 13. <span> | </span> Palestine 2024 ©&nbsp;MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>A decimated health care system</h2><p>Fewer than half of Gaza's 36 hospitals are even partially functional, and the health care system lies in ruins. During the one-year period covered by the report—from October 2023 to October 2024—MSF staff alone have endured 41 attacks and violent incidents, including airstrikes, shelling, and <a href="https://www.doctorswithoutborders.org/latest/how-israeli-army-besieged-nasser-hospital" data-entity-type="node" data-entity-uuid="39b38326-a49b-4ae7-924f-4c5c9510b898" data-entity-substitution="canonical" title="How the Israeli army besieged Nasser Hospital">violent incursions in health facilities</a>; direct fire on the organization’s shelters and <a href="https://www.doctorswithoutborders.org/latest/msf-convoy-attack-gaza-all-elements-point-israeli-army-responsibility" data-entity-type="node" data-entity-uuid="7b372d87-bc4b-421b-8a86-b1f10e56687e" data-entity-substitution="canonical" title="MSF convoy attack in Gaza: All elements point to Israeli army responsibility">convoys</a>; and arbitrary detention of colleagues by Israeli forces. MSF medical personnel and patients have been <a href="https://www.doctorswithoutborders.org/latest/gaza-msf-condemns-israels-forced-evacuation-nasser-hospital" data-entity-type="node" data-entity-uuid="bae6a195-9f92-4100-a372-55d450752aa6" data-entity-substitution="canonical" title="Gaza: MSF condemns Israel’s forced evacuation of Nasser Hospital">forced to evacuate</a> hospitals and health facilities on 17 separate occasions, often literally running for their lives. Warring parties have conducted hostilities near medical facilities, endangering patients, caretakers, and medical staff.</p><p>Meanwhile, Palestinians' physical and mental health injuries are overwhelming, and the needs continue to grow. MSF-supported facilities have carried out at least 27,500 consultations for violence-related injuries and 7,500 surgical interventions. People are suffering from war wounds as well as chronic diseases, made worse when they cannot access essential health care services and medicines. &nbsp;</p></div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB215029%28High%29.png?itok=7-17duiI 1x" media="all and (min-width: 1600px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB215029%28High%29.png?itok=7-17duiI 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/MSB215029%28High%29.png?itok=WRcJiWfK 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/png" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/MSB215029%28High%29.png?itok=Q-oxTpSg 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/png" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/MSB215029%28High%29.png?itok=etRM0bCq 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/png" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB215029%28High%29.png?itok=7-17duiI" width="1340" height="893" alt="A displaced Palestinian family lights a fire in Gaza.">

  </picture>


      <p><span>
          <figcaption>
            Yasmin (right) lights a fire using plastic to prepare a meal for her children on November 7. Fuel is among other vital supplies that have been blocked or impeded from entering Gaza in sufficient quantities. <span> | </span> Palestine 2024 ©&nbsp;Ibrahim Nofal
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>Unbearable conditions of displacement</h2><p>Israel’s forced displacement has pushed people into<a href="https://www.doctorswithoutborders.org/latest/building-accessible-sanitation-facilities-displaced-people-gaza" data-entity-type="node" data-entity-uuid="2f959615-eb8f-4feb-a1e8-332e1d20d3cd" data-entity-substitution="canonical" title="Building accessible sanitation facilities for displaced people in Gaza"> unbearable and unhygienic living conditions</a> in which diseases can spread rapidly. As a result, MSF teams are treating high numbers of people for illnesses like skin diseases, respiratory infections, and diarrhea—all of which are expected to increase as winter temperatures drop. Children are missing out on crucial immunizations, leaving them vulnerable to diseases like <a href="https://www.doctorswithoutborders.org/what-we-do/medical-issues/measles" data-entity-type="node" data-entity-uuid="334ab892-5617-4f8d-b082-7d57936452e5" data-entity-substitution="canonical" title="Measles">measles</a> and <a href="https://www.doctorswithoutborders.org/latest/msf-supports-polio-vaccination-campaign-gaza" data-entity-type="node" data-entity-uuid="b1347d64-f6d8-4221-b5f1-a65c92ea3471" data-entity-substitution="canonical" title="MSF supports polio vaccination campaign in Gaza">polio</a>. MSF has observed an increase in the number of <a href="https://www.doctorswithoutborders.org/what-we-do/medical-issues/malnutrition" data-entity-type="node" data-entity-uuid="c2e2d193-6936-4385-b170-7b974436888e" data-entity-substitution="canonical" title="Malnutrition">malnutrition</a> cases; however, it is impossible to carry out a full malnutrition screening in Gaza due to widespread insecurity and the lack of proper deconfliction measures.&nbsp;</p></div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB214906.png?itok=196lPheB 1x" media="all and (min-width: 1600px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB214906.png?itok=196lPheB 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/MSB214906.png?itok=hQT1JdvI 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/png" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/MSB214906.png?itok=zV9rcaGw 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/png" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/MSB214906.png?itok=gkt4Ok7Y 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/png" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB214906.png?itok=196lPheB" width="1340" height="893" alt="Malnourished child in Gaza.">

  </picture>


      <p><span>
          <figcaption>
            A young girl suffering from severe malnutrition who was admitted to MSF's intensive therapeutic feeding center for urgent care. The health of children in Gaza has been severely impacted by the lack of food, medical care, and basic necessities available. <span> | </span> Palestine 2024 ©&nbsp;MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>Medical evacuations denied</h2><p>As medical care options dwindle in Gaza, Israel has made it even more difficult for people to be <a href="https://www.doctorswithoutborders.org/latest/long-road-recovery-gazas-war-wounded-children" data-entity-type="node" data-entity-uuid="679e4a53-c2f3-40e7-ac9e-5ba5b445e087" data-entity-substitution="canonical" title="The long road to recovery for Gaza’s war-wounded children">medically evacuated</a>. Between the closure of the Rafah crossing in early May 2024 and September 2024, Israeli authorities have only authorized the evacuations of 229 patients—which amounts to 1.6 percent of those who needed it at that time. This is a drop in the ocean of needs.&nbsp;</p></div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB212618%28High%29.png?itok=kSeRb8QH 1x" media="all and (min-width: 1600px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB212618%28High%29.png?itok=kSeRb8QH 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/MSB212618%28High%29.png?itok=GuLSdt8J 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/png" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/MSB212618%28High%29.png?itok=wXpB3ki3 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/png" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/MSB212618%28High%29.png?itok=-D_zN-XG 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/png" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB212618%28High%29.png?itok=kSeRb8QH" width="1340" height="893" alt="Body bags in northern Gaza.">

  </picture>


      <p><span>
          <figcaption>
            Victims are placed in body bags in northern Gaza on October 20. <span> | </span> Palestine 2024 ©&nbsp;MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>The siege of northern Gaza</h2><p>The <a href="https://www.doctorswithoutborders.org/latest/whats-happening-northern-gaza" data-entity-type="node" data-entity-uuid="eae15551-d701-4eab-8d81-7f074f6aae00" data-entity-substitution="canonical" title="What’s happening in northern Gaza? ">situation in northern Gaza</a> is especially dire following Israel's recent scorched earth military offensive that has depopulated large areas and reportedly killed almost 2,000 people. The northern part of the Strip, particularly <a href="https://www.doctorswithoutborders.org/latest/urgent-thousands-trapped-jabalia-northern-gaza-amid-israeli-forces-attack" data-entity-type="node" data-entity-uuid="27490958-78ee-4d4b-a08e-585c0f52ce8b" data-entity-substitution="canonical" title="Urgent: Thousands trapped in Jabalia, northern Gaza, amid Israeli forces’ attack">Jabalia camp</a>, has been besieged again by Israeli forces since October 6, 2024. Israeli authorities have <a href="https://www.doctorswithoutborders.org/latest/palestinians-northern-gaza-are-desperate-need-aid" data-entity-type="node" data-entity-uuid="05c48515-8e9d-46a8-a520-85d400c922fa" data-entity-substitution="canonical" title=" Palestinians in northern Gaza are in desperate need of aid">dramatically reduced the quantity of essential aid</a> authorized to enter the north. In October 2024, the amount of supplies reaching the whole Gaza Strip hit its lowest point since the war escalated in October 2023: a daily average of 37 humanitarian trucks entered in October 2024, well below the 500 humanitarian trucks entering Gaza each day before October 7, 2023.</p></div>
              <div>
    <blockquote><p>Palestinians have been killed in their homes and in hospital beds. They have been forcibly displaced time and time again to areas that are not safe or healthy. People cannot find even the most basic necessities like food, clean water, medicines, and soap.</p><figcaption>Christopher Lockyear, MSF secretary general</figcaption></blockquote>
  </div>
              <div>
    <p>“For more than a year, our medical staff in Gaza have witnessed a relentless campaign by the Israeli forces marked by massive destruction, devastation, and dehumanization,” said Lockyear. “Palestinians have been killed in their homes and in hospital beds. They have been forcibly displaced time and time again to areas that are not safe or healthy. People cannot find even the most basic necessities like food, clean water, medicines, and soap amid a punishing siege and blockade."&nbsp;</p>
</div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/06/MSB198600.jpg?itok=sRcGHrUp 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/06/MSB198600.jpg?itok=sRcGHrUp 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/image_base_media/2024/06/MSB198600.jpg?itok=xUonE19h 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/image_base_media/2024/06/MSB198600.jpg?itok=DU4E4REe 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/image_base_media/2024/06/MSB198600.jpg?itok=P5Pj9Qrh 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/06/MSB198600.jpg?itok=sRcGHrUp" width="1340" height="893" alt="A mass grave unearthed at Nasser Hospital in April 2024.">

  </picture>


      <p><span>
          <figcaption>
            A mass grave unearthed at Nasser Hospital in April 2024 (before the Nuseirat attacks). <span> | </span> Palestine 2024 ©&nbsp;Ben Milpas/MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>States must take urgent action</h2><p>MSF calls on states, particularly Israel’s closest allies, to end their unconditional support for Israel and fulfill their obligation to prevent genocide in Gaza. Nearly a year ago, on January 26, the International Court of Justice (ICJ) <a href="https://www.doctorswithoutborders.org/latest/doctors-without-borders-responds-icj-order-halt-military-operations-rafah" data-entity-type="node" data-entity-uuid="d995a16d-e277-4a77-a148-827b1bb44a2c" data-entity-substitution="canonical" title="Doctors Without Borders responds to ICJ order to halt military operations in Rafah">ordered Israel</a> to take “immediate and effective measures to enable the provision of urgently needed basic services and humanitarian assistance to address the adverse conditions of life faced by Palestinians in the Gaza Strip.” Israel has taken no meaningful action to comply with the court order. Instead, Israeli authorities continue to actively block MSF and other humanitarian organizations from providing lifesaving assistance to people trapped under siege and bombardment.</p></div>
              <div>
  <div>
    <p>
        <iframe title="Lockyear breaks down MSF's report" frameborder="0" allowfullscreen="allowfullscreen" src="https://www.youtube.com/shorts/zSENeHozWIE"></iframe>
    </p>
  </div>
  <div>
          <h3>Lockyear breaks down MSF's report</h3>
            
  </div>
</div>
              <div>
    <p>States must leverage their influence to alleviate the suffering of the population and enable a massive scale-up of humanitarian assistance across the Gaza Strip. As the occupying power, Israeli authorities are responsible for ensuring the rapid, unimpeded, and safe delivery of humanitarian aid at the level sufficient to address people’s needs. Instead, Israel's blockade and continued obstruction of aid have made it close to impossible for people in Gaza to access essential goods, including fuel, food, water, and medicines. At the same time, Israel has decided to <a href="https://www.doctorswithoutborders.org/latest/israels-decision-ban-unrwa-will-significantly-worsen-humanitarian-catastrophe" data-entity-type="node" data-entity-uuid="2684c0f0-8173-4eb3-98fc-751be638a5d5" data-entity-substitution="canonical" title="Israel’s decision to ban UNRWA will significantly worsen humanitarian catastrophe ">effectively ban</a> the United Nations Relief and Works Agency for Palestine Refugees in the Near East (UNRWA), which is the largest provider of aid, health care, and other vital services for Palestinians.&nbsp;</p>
</div>
              <div>
			<h2>How MSF is responding in Gaza</h2>
			<p>What to know about the humanitarian catastrophe in Gaza and how MSF teams are providing medical and humanitarian aid.</p>
			  
<p><a href="https://www.doctorswithoutborders.org/latest/our-response-israel-gaza-war" aria-label="Learn more">  Learn more </a>
		</p></div>
              <div><h2>We need a ceasefire</h2><p>MSF repeats its call for an immediate and sustained ceasefire. The total <a href="https://www.doctorswithoutborders.org/latest/one-year-war-without-rules-leaves-gaza-shattered" data-entity-type="node" data-entity-uuid="6f63a8ca-6d7a-4c03-b385-739388c2ad70" data-entity-substitution="canonical" title="One year of a war without rules leaves Gaza shattered">destruction of Palestinian life</a> in Gaza must stop. MSF is also calling for immediate and safe access to northern Gaza to allow the delivery of humanitarian aid and medical supplies to hospitals. While MSF continues to provide lifesaving care in central and southern Gaza, we call on Israel to end its siege on the territory and open vital land borders, including the <a href="https://www.doctorswithoutborders.org/latest/whats-happening-rafah" data-entity-type="node" data-entity-uuid="4208cfce-efbb-4897-b981-3a5adf86e597" data-entity-substitution="canonical" title="What’s happening in Rafah? ">Rafah crossing</a>, to enable a massive scale-up of humanitarian and medical aid.</p></div>
              <div>
    <blockquote><p>Even if the Israeli military offensive on Gaza ended today, its long-term impacts would be unprecedented, given the scale of the destruction and the extraordinary challenges of providing health care across the Strip.</p></blockquote>
  </div>
              <div>
    <p>The MSF report notes that even if the Israeli military offensive on Gaza ended today, its long-term impacts would be unprecedented, given the scale of the destruction and the extraordinary challenges of providing health care across the Strip. A staggering number of war-wounded people are at risk of infection, amputation, and permanent disability, and many will require years of rehabilitative care. The cumulative physical toll and mental trauma caused by the extreme violence, loss of family members and homes, repeated forced displacement, and inhumane living conditions will scar generations.&nbsp;</p>
</div>
              <div id="article-63726">
    
          <h2>Related stories</h2>
                
<div>
    <div>
            <h3>Your questions about our work in Gaza, answered</h3>
            <p>Here are some of the questions frequently asked about our work and mission as it pertains to the ongoing crisis.</p>
            
<p><a href="https://www.doctorswithoutborders.org/your-questions-about-our-work-gaza-answered" aria-label="Read more about Your questions about our work in Gaza, answered">Read more</a>
    </p></div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_large_mobile_480x360/public/MSB185085_Small.jpg?itok=UrzoNtIL 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="480" height="360">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_mobile_335_251/public/MSB185085_Small.jpg?itok=ITRSabfx 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="335" height="251">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6" width="327" height="245" alt="Two men walk in the sand outside a camp for displaced people in Gaza.">

  </picture>

      </div>
      </div>

          
<div>
    <div>
                        <p>
	<span>    December 19 <span></span> 12:00 AM
  </span>
  </p>
                    <h3>Life in the death trap that is Gaza</h3>
            <p>Israel’s war on Gaza is unraveling the fabric of society in the Strip. </p>
            
<p><a href="https://www.doctorswithoutborders.org/latest/life-death-trap-gaza" aria-label="Read more about Life in the death trap that is Gaza">Read More</a>
    </p></div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_large_mobile_480x360/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=sYZX3BYs 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="480" height="360">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_mobile_335_251/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=coQqCZxY 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="335" height="251">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY" width="327" height="245" alt="Destruction at Al-Shifa, Gaza’s largest hospital, which is now out of service. ">

  </picture>

      </div>
      </div>

          
<div>
    <div>
                        <p>
	<span>    November 04 <span></span> 10:11 AM
  </span>
  </p>
                    <h3>Timeline: One year of bearing witness to all-out war in Gaza</h3>
            <p>A grim milestone for Palestinians in Gaza suffering under siege and bombardment. </p>
            
<p><a href="https://www.doctorswithoutborders.org/latest/timeline-one-year-bearing-witness-all-out-war-gaza" aria-label="Read more about Timeline: One year of bearing witness to all-out war in Gaza">Read More</a>
    </p></div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_large_mobile_480x360/public/image_base_media/2024/04/MSB183741.jpg?itok=0a1Xa-Ny 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="480" height="360">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_mobile_335_251/public/image_base_media/2024/04/MSB183741.jpg?itok=Mlc12_7_ 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="335" height="251">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n" width="327" height="245" alt="A man carries a child to MSF's clinic at Rafah Indonesian Hospital in Gaza.">

  </picture>

      </div>
      </div>

      </div>
              <div>
    <h2>We speak out. Get updates.</h2>
    
    
      </div>
          </div>
  
    
          <div>
      <p><span></span> Developing story </p>    
  <h2>How we're responding to the war in Gaza</h2>
  
</div>                
    <div>
					  <div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=7Hbqq6vJ 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="105" height="88">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=7Hbqq6vJ 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="105" height="88">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7" width="279" height="235" alt="Destruction at Al-Shifa, Gaza’s largest hospital, which is now out of service. ">

  </picture>

      </div>
    		<div>
			<p>
	<span>Story</span>
  	  <span>Dec 19, 2024</span>
  </p>
			<p>Life in the death trap that is Gaza</p>
            
<p><a>Read More</a>
		</p></div>
	</div>
					  <div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB213926.jpg?itok=iyYALjnu 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="105" height="88">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB213926.jpg?itok=iyYALjnu 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="105" height="88">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS" width="279" height="235" alt="An MSF nurse performs a rapid malaria test on a girl in Ethiopia. ">

  </picture>

      </div>
    		<div>
			<p>
	<span>Story</span>
  	  <span>Dec 18, 2024</span>
  </p>
			<p>Unprecedented surge of malaria cases in Ethiopia</p>
            
<p><a>Read More</a>
		</p></div>
	</div>
					  <div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB209078.jpg?itok=0QFTub3p 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="105" height="88">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB209078.jpg?itok=0QFTub3p 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="105" height="88">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i" width="279" height="235" alt="MSF health promoter Aisha B., a refugee from El Geneina who fled to Adré, Chad">

  </picture>

      </div>
    		<div>
			<p>
	<span>Story</span>
  	  <span>Dec 17, 2024</span>
  </p>
			<p>Everyone has felt the bitterness of loss in Sudan's war. I have, too.</p>
            
<p><a>Read More</a>
		</p></div>
	</div>
			</div>
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The era of open voice assistants (222 pts)]]></title>
            <link>https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/</link>
            <guid>42467194</guid>
            <pubDate>Fri, 20 Dec 2024 00:29:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/">https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/</a>, See on <a href="https://news.ycombinator.com/item?id=42467194">Hacker News</a></p>
Couldn't get https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Kelly Can't Fail (249 pts)]]></title>
            <link>https://win-vector.com/2024/12/19/kelly-cant-fail/</link>
            <guid>42466676</guid>
            <pubDate>Thu, 19 Dec 2024 23:07:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://win-vector.com/2024/12/19/kelly-cant-fail/">https://win-vector.com/2024/12/19/kelly-cant-fail/</a>, See on <a href="https://news.ycombinator.com/item?id=42466676">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-17429">
	
		<p>
By  on <a href="https://win-vector.com/2024/12/19/kelly-cant-fail/" title="3:05 pm" rel="bookmark"><time datetime="2024-12-19T15:05:19-08:00">December 19, 2024</time></a>	• 
	</p>
	<section>

<div data-mime-type="text/markdown" tabindex="0">
<h2 id="Introduction">Introduction<a href="#Introduction"> </a></h2>
<p>You may have heard of the <a href="https://en.wikipedia.org/wiki/Kelly_criterion">Kelly bet allocation strategy</a>. It is a system for correctly exploiting information or bias in a gambling situation. It is also known as a maximally aggressive or high variance strategy, in that betting more than the Kelly selection can be quite ruinous.<br>
I recently ran into a strange card game where the Kelly strategy is risk free with <em>zero variance</em>. Peter Winkler calls the game “Next Card Bet” in his remarkable book <em>Mathematical Puzzles</em>. The problem and solution appear to come from Thomas Cover. I find this betting game and its analysis amazing, and want to share them with you here.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="The-Game">The Game<a href="#The-Game"> </a></h2>
<p>The game is played as follows. A standard 52 card deck consisting of 26 red cards and 26 black cards is shuffled and the player start with a stake of $1. Each card is exposed one at a time, without being replaced in the deck. The player is allowed to bet any fraction of their current stake on whether the next card is black or red at a one to one payoff.<br>
The player clearly has advantageous strategies involving counting the number of black and red cards seen. Counting cards seen lets them know how many cards of each color remain in the unseen portion of the deck. For example they can safely double their stake by not betting on any card other than the last. This allows them to safely bet their entire stake on the now inferable color of the final unseen card.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="The-Kelly-strategy">The Kelly strategy<a href="#The-Kelly-strategy"> </a></h2>
<p>The Kelly strategy is to pick a bet that maximizes the expected logarithm of the stake. We can derive it as follows.<br>
Let <code>r</code> be the number red cards remaining in the deck and <code>b</code> black cards remaining. Without loss of generality assume <code>r &gt; b</code>. We then want to maximize <code>P[draw red] * log(1 + bet_fraction) + P[draw black] * log(1 - bet_fraction)</code> as a function of <code>bet_fraction</code>. This expression is maximized where its derivative is zero. The probability of drawing red next is <code>r/(r + b)</code>. So we need to solve <code>(r/(r + b)) / (1 + bet_fraction) - (b/(r + b)) / (1 - bet_fraction) = 0</code>. Some algebra tells us <code>bet_fraction = (r - b) / (r + b)</code>.<br>
The entire Kelly betting strategy is then:</p>
<ul>
<li>If <code>r = b</code>, then no bet</li>
<li>If <code>r &gt; b</code> bet a <code>|r - b| / (r + b)</code> fraction of your stake on “red”</li>
<li>If <code>b &gt; r</code> bet a <code>|r - b| / (r + b)</code> fraction of your stake on “black.”</li>
</ul>
</div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="Trying-the-strategy">Trying the strategy<a href="#Trying-the-strategy"> </a></h2>
<p>You really should see this strategy in action. It is a strong claim that it is in fact zero variance, so we really should insist on that being confirmed. We will work the example in Python.
</p></div>
<div tabindex="0">
<p>In[1]:</p>
<div data-type="inline">
<pre><span></span><span># import tools</span>
<span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[2]:</p>
<div data-type="inline">
<pre><span></span><span># set up our pseudo-random number generator to produce shuffled decks</span>
<span>rng</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>default_rng</span><span>(</span><span>2024</span><span>)</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[3]:</p>
<div data-type="inline">
<pre><span></span><span># define our deck shuffling tool</span>
<span>def</span> <span>k_array_with_t_true</span><span>(</span><span>k</span><span>:</span> <span>int</span><span>,</span> <span>t</span><span>:</span> <span>int</span><span>):</span>
<span>    </span><span>"""Create a length-k boolean array with t-True values"""</span>
    <span>is_true</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>False</span><span>]</span> <span>*</span> <span>k</span><span>,</span> <span>dtype</span><span>=</span><span>bool</span><span>)</span>
    <span>is_true</span><span>[</span><span>rng</span><span>.</span><span>choice</span><span>(</span><span>k</span><span>,</span> <span>size</span><span>=</span><span>t</span><span>,</span> <span>replace</span><span>=</span><span>False</span><span>)]</span> <span>=</span> <span>True</span>
    <span>return</span> <span>is_true</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[4]:</p>
<div data-type="inline">
<pre><span></span><span># implement our betting strategy</span>
<span>def</span> <span>run_bets</span><span>(</span><span>is_red</span><span>)</span> <span>-&gt;</span> <span>float</span><span>:</span>
<span>    </span><span>"""Run the Kelly betting strategy"""</span>
    <span>stake</span> <span>=</span> <span>1.0</span>
    <span>n_red_remaining</span> <span>=</span> <span>int</span><span>(</span><span>np</span><span>.</span><span>sum</span><span>(</span><span>is_red</span><span>))</span>
    <span>n_black_remaining</span> <span>=</span> <span>len</span><span>(</span><span>is_red</span><span>)</span> <span>-</span> <span>n_red_remaining</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span><span>is_red</span><span>)):</span>
        <span># form bet</span>
        <span>bet_red</span> <span>=</span> <span>0</span>
        <span>bet_black</span> <span>=</span> <span>0</span>
        <span>fraction</span> <span>=</span> <span>np</span><span>.</span><span>abs</span><span>(</span><span>n_red_remaining</span> <span>-</span> <span>n_black_remaining</span><span>)</span> <span>/</span> <span>(</span><span>n_red_remaining</span> <span>+</span> <span>n_black_remaining</span><span>)</span>
        <span>if</span> <span>n_red_remaining</span> <span>&gt;</span> <span>n_black_remaining</span><span>:</span>
            <span>bet_red</span> <span>=</span> <span>stake</span> <span>*</span> <span>fraction</span>
        <span>elif</span> <span>n_black_remaining</span> <span>&gt;</span> <span>n_red_remaining</span><span>:</span>
            <span>bet_black</span> <span>=</span> <span>stake</span> <span>*</span> <span>fraction</span>
        <span># derive outcome</span>
        <span>stake</span> <span>=</span> <span>stake</span> <span>-</span> <span>(</span><span>bet_red</span> <span>+</span> <span>bet_black</span><span>)</span>
        <span>if</span> <span>is_red</span><span>[</span><span>i</span><span>]:</span>
            <span>stake</span> <span>=</span> <span>stake</span> <span>+</span> <span>2</span> <span>*</span> <span>bet_red</span>
            <span>n_red_remaining</span> <span>=</span> <span>n_red_remaining</span> <span>-</span> <span>1</span>
        <span>else</span><span>:</span>
            <span>stake</span> <span>=</span> <span>stake</span> <span>+</span> <span>2</span> <span>*</span> <span>bet_black</span>
            <span>n_black_remaining</span> <span>=</span> <span>n_black_remaining</span> <span>-</span> <span>1</span>
    <span>return</span> <span>stake</span>
</pre>
</div>
</div>
<div>
<div tabindex="0">
<p>In[5]:</p>
<div data-type="inline">
<pre><span></span><span># play the game 10000 times</span>
<span>payoffs</span> <span>=</span> <span>[</span>
    <span>run_bets</span><span>(</span><span>k_array_with_t_true</span><span>(</span><span>52</span><span>,</span> <span>26</span><span>))</span> <span>for</span> <span>_</span> <span>in</span> <span>range</span><span>(</span><span>10000</span><span>)</span>
<span>]</span>
<span>assert</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>payoffs</span><span>)</span> <span>-</span> <span>1e-8</span> <span>&lt;</span> <span>np</span><span>.</span><span>min</span><span>(</span><span>payoffs</span><span>)</span> 

<span>(</span><span>np</span><span>.</span><span>min</span><span>(</span><span>payoffs</span><span>),</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>payoffs</span><span>))</span>
</pre>
</div>
</div>
<div>
<p>Out[5]:</p>
<div data-mime-type="text/plain" tabindex="0">
<pre>(9.081329549427776, 9.081329549427803)</pre>
</div>
</div>
</div>
<div tabindex="0">

<p>
For each run we made a return of <code>9.08</code> times our starting stake. It is remarkable that there was no variation or variance in the outcomes. Notice this <code>9.08</code> times return is much larger than the <code>2</code> times return of the simple “wait to the end” strategy.<br>
This result is very unusual for a Kelly strategy. Kelly strategies guarantee to not “bust” (lose all of the money) and to maximize the expected growth rate of the logarithm of the stake. But they usually guarantee little else, can in fact lose money, and are usually high variance. How is it that in this case Kelly <em>can’t</em> fail?
</p>
</div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="An-explanation">An explanation<a href="#An-explanation"> </a></h2>
<p>There is a remarkable proof that the strategy is zero variance.<br>
There are <code>(52 choose 26) = 495,918,532,948,104</code> possible arrangements of red versus black cards. It is a standard result (not proven here) that each of these arrangements is in fact equally likely in a properly shuffled deck.<br>
We define a new “portfolio” strategy as follows.</p>
<ul>
<li>Each of the <code>(52 choose 26)</code> possible red/black arrangements is assigned as a sub-strategy in our portfolio.</li>
<li>We allocate a <code>1/(52 choose 26)</code> fraction of our initial stake to each sub-strategy. We allow each sub-strategy to keep its own money and do not re-allocate money between sub-strategies.</li>
<li>Each sub-strategy assumes its assigned red/black arrangement is what is going to happen in the actual deck. The sub-strategy bets its entire stake on each card, betting the card exposed will match the corresponding one it its own defining arrangement.</li>
</ul>
<p>All but one of the portfolio sub-strategies will lose all of their money- as they eventually bet all their stake on a wrong guess. The single strategy that correctly guesses the entire deck ends experiences <code>52</code> doublings and no losses. Thus this strategy multiplies its starting stake by <code>2^(52)</code>. So our portfolio strategy itself always experiences a total aggregate return of <code>$1/(52 choose 26) * 2^(52) ~ $9.08</code> on an initial <code>$1</code> stake. This ending portfolio return is independent of the order of the cards.<br>
The claim to finish the argument is: the new portfolio strategy is in fact identical to the earlier Kelly strategy.<br>
Consider what happens to the portfolio when we draw a red card. In our portfolio strategy a <code>r / (r + b)</code> fraction of the non-bankrupt sub-strategies expect the next card to be “red”, and a <code>b / (r + b)</code> fraction of the non-bankrupt sub-strategies expect the next card to be “black”. The next draw bankrupts one of these families, and doubles the other (depending on the drawn color). Some though shows the portfolio strategy evolves its combined stake as follows:</p>
<ul>
<li>Aggregate <code>stake</code> goes to <code>stake * 2 * b / (r + b)</code> on drawing “red”</li>
<li>Aggregate <code>stake</code> goes to <code>stake * 2 * r / (r + b)</code> on drawing “black.”</li>
</ul>
<p>It is a matter of algebra to confirm this portfolio payoff is <em>exactly</em> the payoff pattern for our earlier Kelly strategy of putting <code>|r - b| / (r + b)</code> on the most common color remaining. The Kelly strategy has exactly the same payoffs as the portfolio strategy, and we have our result that the two strategies are one and the same.<br>
The Kelly strategy is zero variance because it is identical to the portfolio strategy that is itself zero variance.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">

<p>An idea I like to take away is as follows. As we are betting on majority color, every time we lose a bet the deck becomes more unbalanced and more favorable to us. If we make the bet small enough then the gain in edge on a wrong bet offsets the loss of capital. In this case the Kelly strategy is pricing information or pricing uncertainty just right. This is similar to considerations of “exploration versus exploitation phases” in problems such as A/B testing.<br>
The proof given is from Winkler <em>Mathematical Puzzles</em>. I <em>strongly</em> recommend picking up the book to see his writeup on this and many other problems. The proof itself is very much the style of Cover. This is the Cover who later goes on to invent the <a href="https://isl.stanford.edu/~cover/papers/paper93.pdf">universal portfolio</a> investment strategy.
</p></div>
		<p>Categories: <a href="https://win-vector.com/category/mathematics/" rel="category tag">Mathematics</a> <a href="https://win-vector.com/category/quantitative-finance/" rel="category tag">Quantitative Finance</a> <a href="https://win-vector.com/category/tutorials/" rel="category tag">Tutorials</a>		</p>
<p>Tagged as: <a href="https://win-vector.com/tag/betting/" rel="tag">betting</a> <a href="https://win-vector.com/tag/ipython/" rel="tag">iPython</a> <a href="https://win-vector.com/tag/kelly-criterion/" rel="tag">Kelly Criterion</a> <a href="https://win-vector.com/tag/pydata/" rel="tag">pydata</a> <a href="https://win-vector.com/tag/python/" rel="tag">python</a></p>	<div>
		<p><img alt="" src="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=100&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=200&amp;d=identicon&amp;r=g 2x" height="100" width="100" decoding="async"></p><h3>John Mount</h3>
			</div>
	</section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Satellite powered estimation of global solar potential (213 pts)]]></title>
            <link>https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/</link>
            <guid>42465535</guid>
            <pubDate>Thu, 19 Dec 2024 20:44:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/">https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/</a>, See on <a href="https://news.ycombinator.com/item?id=42465535">Hacker News</a></p>
Couldn't get https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Hardware Security Exploit Research – Xbox 360 (144 pts)]]></title>
            <link>https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md</link>
            <guid>42465378</guid>
            <pubDate>Thu, 19 Dec 2024 20:26:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md">https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md</a>, See on <a href="https://news.ycombinator.com/item?id=42465378">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Hardware Security Exploit Research - XBOX 360</h2><a id="user-content-hardware-security-exploit-research---xbox-360" aria-label="Permalink: Hardware Security Exploit Research - XBOX 360" href="#hardware-security-exploit-research---xbox-360"></a></p>
<p dir="auto">I'm fairly well versed with original XBOX and writing home-brew code for it 20 years ago, but I have since not spent much time on the XBOX 360 or XBOX One platforms beyond tons of gaming and I have always been interrested in how exactly the XBOX 360 security was defeated.</p>
<p dir="auto">So - here is a hopefully informative write up of my Journey to figuring out how these guys were running unsigned code in 2011 on a XBOX 360..   Buckle up.. its a long read :)</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Original XBOX (Released 2001)</h2><a id="user-content-original-xbox-released-2001" aria-label="Permalink: Original XBOX (Released 2001)" href="#original-xbox-released-2001"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xbox.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xbox.jpg" alt="XBOX"></a></p>
<p dir="auto">The Original XBOX was released in 2001 and the security of that system was defeated by hardware reverse engineering fairly soon after launch and folks were able to run Linux on the system.  There mistakes made in the security for the original XBOX, the biggest of them were probably the basic oversights around implementation of weak and outdated security encryption algorithms used as hashing algorithms. The system saw 6 hardware revisions through its short 4 year life span and every single one those included fixes to address security flaws and each of those "fixes" were in turn defeated within weeks of release. Today the original XBOX still is one of my favourite systems and I have quite a few of them squirreled away..</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">XBOX 360 (Released 2005)</h2><a id="user-content-xbox-360-released-2005" aria-label="Permalink: XBOX 360 (Released 2005)" href="#xbox-360-released-2005"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xbox_360.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xbox_360.jpg" alt="XBOX"></a></p>
<p dir="auto">This cat and mouse game ended with the XBOX 360 being released in November 2005 and security on this system was priority No.1. The system is pretty solid and secure and I wont go through all the details, but suffice to say that every step of the way during the loading and execution of any code, there are hardware layers to make sure only Microsoft "signed code" can run. but.. Like in life, not everything is always perfect..</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">XBOX 360 Security defeated - 2011</h2><a id="user-content-xbox-360-security-defeated---2011" aria-label="Permalink: XBOX 360 Security defeated - 2011" href="#xbox-360-security-defeated---2011"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/gligli.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/gligli.png" alt="XBOX"></a></p>
<p dir="auto">In late 2011, about six years after the launch of the XBOX 360, a couple of very smart hardware hackers (Gligli and Tiros) managed to defeat the XBOX 360 security by using a hardware "glitching" method and made the XBOX CPU essentially think the code it was executing is pure Microsoft provided "signed" code, when in fact it was tampered with.. i.e. You can run any code you want!! And thus the XBOX 360 RGH (Reset Glitch Hack) exploit was born!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">"Hardware Glitching"</h2><a id="user-content-hardware-glitching" aria-label="Permalink: &quot;Hardware Glitching&quot;" href="#hardware-glitching"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/hardware_glitch.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/hardware_glitch.jpg" alt="XBOX"></a></p>
<p dir="auto">Turns out, hardware is pretty susceptible to electrial interference and in specific, digital logic chips like CPU's dont like very noisy or unstable power, data or reset lines..</p>
<p dir="auto">So, you can alter the behaviour of a software system by manually injecting anomalies or errors onto the power, reset and data lines of underlying hardware. These anomalies makes the hardware execute the software instructions in unexpected ways and with a very cleverly crafted "anomaly" you can make hardware do things you want to software.. Like [SPOILER] skip verification checks!!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How the XBOX 360 "Glitch" hack works</h2><a id="user-content-how-the-xbox-360-glitch-hack-works" aria-label="Permalink: How the XBOX 360 &quot;Glitch&quot; hack works" href="#how-the-xbox-360-glitch-hack-works"></a></p>
<p dir="auto">Super High level explanation of XBOX 360 boot process.</p>
<ul dir="auto">
<li>The XBOX 360 starts up and starts loading sequences of Boot Loader (BL) code</li>
<li>During this process, it supplies 8-bit "post codes" on an 8-bit bus present on the motherboard</li>
<li>You can read these pins for post codes and each code represents a different step of the boot process.</li>
<li>At post code 0xD8, BL RC4 decryption is done (RC4 Encrypted BL stored on flash chip)</li>
<li>At post code 0xDA, BL SHA1 verification is done (compares hardware embedded signature to loaded code signature)</li>
<li>If signatures match, it is MS signed code and the system continues to start up</li>
<li>If the loaded code signature does not match the hardware embedded signature, the system resets</li>
<li>After a small number of resets and retry loops, the system halts</li>
</ul>
<p dir="auto">The "Glitch"</p>
<ul dir="auto">
<li>Glitching is done by injecting a very short 3-10 nanosecond pulse on CPU RESET line</li>
<li>The Glitch is timed to happen EXACTLY when a "memory compare" function is executing</li>
<li>This <code>memcmp</code> function is inside the SHA1 verification when comparing BL signatures</li>
<li>The glitch will make <code>memcmp</code> return 0x00, meaning a perfect match, regardless of actual data compared</li>
<li>If you can fake-out the CPU into thinking signatures match, you can run ANY code you want..</li>
</ul>
<p dir="auto">Step by step glitching an XBOX 360</p>
<ul dir="auto">
<li>Create a NAND image with custom code and flash to onboard NAND chip</li>
<li>Wait for post code 0xD8 (BL decryption)</li>
<li>Issue a command on the I2C bus to slow down the CPU significantly</li>
<li>Wait for post code 0xDA (BL verification)</li>
<li>Wait EXACTLY until <code>memcmp</code> executes to compare signatures</li>
<li>Send a 3-10ns pulse on CPU RESET line to glitch a 0x00 return from <code>memcmp</code></li>
<li>The system will "think" the signatures match and will continue to run un-trusted code</li>
<li>Issue a command on the I2C bus to speed up the CPU back to normal</li>
<li>Tadaa - you are now running fully un-trusted code!!</li>
<li>The custom NAND image also contains a custom SMC (Systems Management Controller)</li>
<li>If this custom SMC does not detect a success within a specific timeout, it resets and tries again.</li>
<li>The custom SMC will also override the halt and continiously loop and reset until the glitch works.</li>
</ul>
<p dir="auto">You can read the full technical details and description from Gligli here:
<a href="https://github.com/gligli/tools/blob/master/reset_glitch_hack/reset_glitch_hack.txt">https://github.com/gligli/tools/blob/master/reset_glitch_hack/reset_glitch_hack.txt</a></p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reverse Engineering the XBOX 360 RGH Exploit</h2><a id="user-content-reverse-engineering-the-xbox-360-rgh-exploit" aria-label="Permalink: Reverse Engineering the XBOX 360 RGH Exploit" href="#reverse-engineering-the-xbox-360-rgh-exploit"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/glitch_reverse.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/glitch_reverse.jpg" alt="XBOX"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Learning by standing on the shoulders of giants</h2><a id="user-content-learning-by-standing-on-the-shoulders-of-giants" aria-label="Permalink: Learning by standing on the shoulders of giants" href="#learning-by-standing-on-the-shoulders-of-giants"></a></p>
<p dir="auto">I have always been very intrigued at the inner workings of this incredible feat and wanted to duplicate this hardware glitch hack from scratch and really understand how it works. But, one of the barriers of entry was the timings of these attacks. You have to be EXTREMELY precise.. We are talking about TWO HUNDRED MILLIONTH of a second precise! Or more succinctly, you need te able to inject a single 3-10 nano second pulse at a VERY precise time after post code 0xDA shows up on the post bus. It has to align within 3-5 nanoseconds window of the <code>memcmp</code> function execution that verifies the signatures.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: XBOX 360</h2><a id="user-content-tools-of-the-trade-xbox-360" aria-label="Permalink: Tools of the trade: XBOX 360" href="#tools-of-the-trade-xbox-360"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/craigslist.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/craigslist.png" alt="XBOX"></a></p>
<ul dir="auto">
<li>Step 1 - Get a XBOX 360</li>
<li>XBOX 360 acquired from Craigslist for $40!!!</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: FPGA or CPLD</h2><a id="user-content-tools-of-the-trade-fpga-or-cpld" aria-label="Permalink: Tools of the trade: FPGA or CPLD" href="#tools-of-the-trade-fpga-or-cpld"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/matrix.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/matrix.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>Generating VERY precise timing and pulses, you need FPGA's or CPLD's</li>
<li>Instead of re-inventing the wheel, as Gligli mentions, they used Xilinx CoolRunner II CPLD (xc2c64a)</li>
<li>I found cheap xc2c64a boards on ebay that is actually specifically built for XBOX360 glitching</li>
<li>This board has an onboard 48Mhz clock, but you can disable it and hook into the XBOX standbly Clock</li>
<li>You can buy these from Amazon, Ebay or various online stores</li>
<li><a href="https://www.amazon.com/gp/product/B07KDCDN5H" rel="nofollow">https://www.amazon.com/gp/product/B07KDCDN5H</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: CPLD and NAND programmer</h2><a id="user-content-tools-of-the-trade-cpld-and-nand-programmer" aria-label="Permalink: Tools of the trade: CPLD and NAND programmer" href="#tools-of-the-trade-cpld-and-nand-programmer"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/jr_programmer.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/jr_programmer.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>You need to program the CPLD with glitch code</li>
<li>And you need to flash a custom NAND image to the XBOX 360</li>
<li>Turns out, there is a really handy tool that can do BOTH!</li>
<li>I used a <code>J-R Programmer</code> that you can buy off E-Bay or Amazon</li>
<li><a href="https://www.amazon.com/gp/product/B01MTUWLVJ" rel="nofollow">https://www.amazon.com/gp/product/B01MTUWLVJ</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: Logic Analyzer</h2><a id="user-content-tools-of-the-trade-logic-analyzer" aria-label="Permalink: Tools of the trade: Logic Analyzer" href="#tools-of-the-trade-logic-analyzer"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/kingst.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/kingst.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>You need to visualize data on the POST, RESET, DB2G3 and I2C lines</li>
<li>I have a Saleae 8 channel 100Mhz, which turned out not to be fast enough</li>
<li>I found a not too expensive 200Mhz Kingst LA2016 Logic Analyzer on Amazon</li>
<li>There are better and more expensive, but this will do just fine.</li>
<li><a href="https://www.amazon.com/gp/product/B07D35FNYL" rel="nofollow">https://www.amazon.com/gp/product/B07D35FNYL</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Running existing RGH exploit</h2><a id="user-content-running-existing-rgh-exploit" aria-label="Permalink: Running existing RGH exploit" href="#running-existing-rgh-exploit"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/muffin.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/muffin.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>I installed the "Matrix" board and was able to get the existing exploit running.</li>
<li>This particular board uses an install called "Project Muffin" for XBOX 360 Slim systems</li>
<li>"Project Muffin" does not connect to the I2C bus, but connects to the GPIO_0 pin on South Bridge marked "DB2G3" on the mainboard.</li>
<li>The default custom NAND image just loads "XELL Reloaded", an open source boot loader</li>
<li>After install, the Xell bootloader came up within 5-10 seconds.. the glitch works!!</li>
<li><a href="https://github.com/Free60Project/xell-reloaded">https://github.com/Free60Project/xell-reloaded</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Looking under the hood (Matrix board)</h2><a id="user-content-looking-under-the-hood-matrix-board" aria-label="Permalink: Looking under the hood (Matrix board)" href="#looking-under-the-hood-matrix-board"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/analyzer_connected.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/analyzer_connected.jpg" alt="XBOX"></a></p>
<p dir="auto">After install and sucessfull "Glitch", I started to look under the hood how this hack actually works and I connected the Logic Analyzer to the RESET (A), POST (B), CLK (C) and DB2G3 (E) pads of the Matrix board and additionally hooked it up to the XBOX 360's I2C bus SDA and SCL pins to monitor I2C traffic.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/matrix_pads.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/matrix_pads.jpg" alt="XBOX"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">RESET (Matrix A &gt;&gt; XBOX RESET)</h4><a id="user-content-reset-matrix-a--xbox-reset" aria-label="Permalink: RESET (Matrix A >> XBOX RESET)" href="#reset-matrix-a--xbox-reset"></a></p>
<ul dir="auto">
<li>The RESET pad is connected to XBOX CPU RESET pin, HIGH = Running, LOW = reset condition.</li>
<li>When the system resets and starts boot the RESET pin goes HIGH and stays HIGH</li>
<li>This is also the pin where the 5ns glitch pulse gets injected  by pulling it LOW</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">POST (Matrix B &gt;&gt; XBOX Post Bit 1)</h4><a id="user-content-post-matrix-b--xbox-post-bit-1" aria-label="Permalink: POST (Matrix B >> XBOX Post Bit 1)" href="#post-matrix-b--xbox-post-bit-1"></a></p>
<ul dir="auto">
<li>With every post message sent to the XBOX's 8-Bit post bus, the value gets incremented by 1</li>
<li>The POST pad is only connected on a single bit of XBOX 8-Bit Post bus - Bit[1]</li>
<li>Connecting to Bit[1], means every SECOND post will toggle this pin HIGH/LOW</li>
<li>This means you can count posts by counting every rising and falling edge of a single pin</li>
<li>Should be easy to count posts to find post 0xD8 and 0xDA</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">CLK (Matrix C &gt;&gt; XBOX Standby CLK)</h4><a id="user-content-clk-matrix-c--xbox-standby-clk" aria-label="Permalink: CLK (Matrix C >> XBOX Standby CLK)" href="#clk-matrix-c--xbox-standby-clk"></a></p>
<ul dir="auto">
<li>I disabled the Matrix onboard oscillator by removing a zero ohm resistor.</li>
<li>The CLK connects to the 48Mhz standby CLK on the XBOX 360</li>
<li>The CLK signal is left unmodified, it clocks the CPLD and was ignored for my reversing purposes.</li>
<li>Note - Newer revisions of XBOX 360 has no access to CLK and you must use Matrix oscillator</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">DB2G3 (Matrix E &gt;&gt; South Bridge GPIO_0 / DB2G3)</h4><a id="user-content-db2g3-matrix-e--south-bridge-gpio_0--db2g3" aria-label="Permalink: DB2G3 (Matrix E >> South Bridge GPIO_0 / DB2G3)" href="#db2g3-matrix-e--south-bridge-gpio_0--db2g3"></a></p>
<ul dir="auto">
<li>This pad connects to a the GPIO_0 pin of the South Bridge marked "DB2G3" on XBOX 360 mainboard</li>
<li>I was not sure exactly what this did in regards to this "Project Muffin" method (yet)</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">SDA &amp; SCL ( XBOX I2C Bus SDA &amp; SCL )</h4><a id="user-content-sda--scl--xbox-i2c-bus-sda--scl-" aria-label="Permalink: SDA &amp; SCL ( XBOX I2C Bus SDA &amp; SCL )" href="#sda--scl--xbox-i2c-bus-sda--scl-"></a></p>
<ul dir="auto">
<li>I wanted to also monitor the I2C traffic to see what devices are on the bus</li>
<li>The I2C was not connected to anything on the Matrix board at this time.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reading the Tea leaves..</h2><a id="user-content-reading-the-tea-leaves" aria-label="Permalink: Reading the Tea leaves.." href="#reading-the-tea-leaves"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/glitch_dump1.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/glitch_dump1.png" alt="XBOX"></a></p>
<p dir="auto">I captured a few runs of the glitch and this is what I saw during the glitch</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">RESET (PINK)</h4><a id="user-content-reset-pink" aria-label="Permalink: RESET (PINK)" href="#reset-pink"></a></p>
<ul dir="auto">
<li>The RESET pin toggles LOW/HIGH and after a while a VERY short LOW/HIGH pulse and then cycle repeats</li>
<li>I suspect the first toggle is simply a system reset</li>
<li>the super short less than 10ns pulse is highly likely to be the glitch pulse</li>
<li>the subsequent RESET toggles are probably retry attempts when the glitch failed</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">POST (BLUE)</h4><a id="user-content-post-blue" aria-label="Permalink: POST (BLUE)" href="#post-blue"></a></p>
<ul dir="auto">
<li>There are 20 post bit 1 HIGH/LOW toggles that I counted during RESET LOW period</li>
<li>I refer to these HIGH/LOW rising and falling edges as "post counts", 1 count each per edge</li>
<li>Then there are 10 post counts before the DB2G3 pin goes HIGH</li>
<li>Post count 10 is likely post bus message 0xD8 (BL Decrypt) and DB2G3 HIGH is likely CPU slow down</li>
<li>After 1 more post pin toggle at post count 11 there is the ~5ns pulse on RESET line</li>
<li>It is highly likely that post count 11 is post message 0xDA (SHA signature verify)</li>
<li>The RESET pulse right after post count 11 is likely the <code>memcmp</code> glitch</li>
<li>The DB2G3 line goes HIGH again right after the the glitch pulse, likely indicating CPU speed up</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">DB2G3 (ORANGE) (Marked as DEBUG in trace)</h4><a id="user-content-db2g3-orange-marked-as-debug-in-trace" aria-label="Permalink: DB2G3 (ORANGE) (Marked as DEBUG in trace)" href="#db2g3-orange-marked-as-debug-in-trace"></a></p>
<ul dir="auto">
<li>The DB2G3 pin on the South Bridge has a single long HIGH/LOW period during a RESET cycle</li>
<li>It is highly likely that this is what controls CPU slow down and speed up</li>
<li>I disconnected this pin and the time between post count 10 and 11 was WAAAAAY less..</li>
<li>This told me that DB2G3 HIGH at post count 10 is for sure CPU slow down and LOW is speed up at count 11</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">SDA &amp; SCL (GREEN &amp; YELLOW)</h4><a id="user-content-sda--scl-green--yellow" aria-label="Permalink: SDA &amp; SCL (GREEN &amp; YELLOW)" href="#sda--scl-green--yellow"></a></p>
<ul dir="auto">
<li>The I2C bus has a bunch of traffic, but after a number of RESET cycle captures, I found a pattern!</li>
<li>Right after the DB2G3 line goes HIGH, there is always a <code>0xCD,0x04,0x4E,0x08,0x80,0x03</code> message</li>
<li>Right after the DB2G3 line goes LOW, there is always a  <code>0xCD,0x04,0x4E,0x80,0x0C,0x02</code> message</li>
<li>These two messages are identical except for th last 3 bytes, so they must be related!</li>
<li>more captures by disconnecting the DB2G3 pin had none of these messages</li>
<li>Confirmed DB2G3 HIGH/LOW is for slowdown/speedup and it triggers these I2C messages</li>
<li>So, instead of using the DB2G3 pin, injecting these messages directly on the I2C should have same effect</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Glitching the XBOX 360 and running unsigned code!!!</h2><a id="user-content-glitching-the-xbox-360-and-running-unsigned-code" aria-label="Permalink: Glitching the XBOX 360 and running unsigned code!!!" href="#glitching-the-xbox-360-and-running-unsigned-code"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/muffin_full_cycle.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/muffin_full_cycle.png" alt="XBOX"></a></p>
<p dir="auto">I ran a bunch of Logic Analyzer dumps, measured all the timings between events and was able to to piece together the EXACT timings and steps I needed to perform the XBOX 360 Reset Glitch Hack.</p>
<ul dir="auto">
<li>STEP 1 - Wait for RESET to complete and start counting post Rising/Falling edges</li>
<li>STEP 2 - At post count 10 - Issue a "slow down" I2C message <code>0xCD,0x04,0x4E,0x08,0x80,0x03</code></li>
<li>STEP 3 - At post count 11 - start a "Glitch Timer"</li>
<li>STEP 4 - After EXACTLY 180,840 nano seconds, send a 10 nanosecond LOW/HIGH pulse on RESET (Glitch!)</li>
<li>STEP 5 - Issue a "speed up" I2C message <code>0xCD,0x04,0x4E,0x80,0x0C,0x02</code> to restore CPU clock</li>
<li>If RESET gets pulled LOW and there are post counts, this means the glitch failed and system reset</li>
<li>If system reset, start over again from Step 1</li>
</ul>
<p dir="auto">I did not want to use the South Bridge GPIO_0 (DB2G3) pin, since I have heard rumours about repurposing the South Bridge output pin as a SMC input pin was not healthy for the South Bridge.. Jury is still out, but I wanted to use the tried and true Gligli method using just the I2C bus.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xilinx_ise.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xilinx_ise.jpg" alt="XBOX"></a></p>
<p dir="auto">So after reading a book and few tutorials on Verilog, I downloaded the free Xilinx ISE 14.7 IDE and went about implementing the all the code in this repo to perform steps 1 through 5 and all the rest of the logic to auto restart and retry and additionally use I2C based slowdown instead of South Bridge GPIO_0 (DB2G3) "Muffin" style slowdown.</p>
<p dir="auto">I have to say, getting everything to work and fit into a 64 cell CPLD, was REALLY tricky!! Everyone I spoke to told me that it can't be done..  Well.. I finally cracked it and it all fit and seemed to work as planned.</p>
<p dir="auto">I played with the Glitch Timer values and I finally got it to glitch and XELL loaded up!!! HOLY SHIT, IT WORKS!!!! but it was VERY inconsistent.. I could only get it to sucessfully glitch like once or twice after many many many reset cycles..</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xell.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xell.jpg" alt="XBOX"></a></p>
<p dir="auto">Finally I reached out to some folks on Discord familiar with XBOX 360 RGH (Mena and Octal450) and I learnt that the XBOX 360's standby clock at 48Mhz is waay too slow for consistent glitches. You can process the clock on Dual Edge Triggering (DET) with a Xilinx Coolrunner CPLD, meaning you can process on both rising and falling edges of a clock and in theory the processing happens at 96Mhz, but still even working with ~10 nanosecond periods it seemed too slow.  I saw notes in existing exploit files that it was running at 192Mhz and getting 48Mhz to 192Mhz with this tiny CPLD seemed pretty darn impossible!</p>
<p dir="auto">There are no built-in IP logic on CPLD's to perform frequency multiplication using Phased Lock Loops (PLL) or Digital Clock Managers (DCM's) or other features you typically get for free in FPGA's..  After some serious Google fu and head scratching, I found an archive on Xilinx Forums on a way to DOUBLE the frequency of a digital circuit by phase delaying the signal a little and then XOR'ing an inverse of the delayed signal with the original and boom! you can double the Frequency!</p>
<p dir="auto">Super cool tecnique I found on now defunct Xiling Forums: <a href="https://web.archive.org/web/20201215191757/https://forums.xilinx.com/t5/General-Technical-Discussion/the-implement-of-frequency-multiplier/m-p/199162/highlight/true#M9312" rel="nofollow">https://web.archive.org/web/20201215191757/https://forums.xilinx.com/t5/General-Technical-Discussion/the-implement-of-frequency-multiplier/m-p/199162/highlight/true#M9312</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/freq_doubler_sch.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/freq_doubler_sch.png" alt="XBOX"></a></p>
<p dir="auto">I implemented this Flip-Flop with clock XOR trick on the 48Mhz clock that should produce a 96Mhz clock and then did Dual Edge Triggering ontop of that to theoretically get to 192Mhz!  Now to test it out and check the output frequencies!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/48_48_phase.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/48_48_phase.jpg" alt="XBOX"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/48_to_96mhz.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/48_to_96mhz.jpg" alt="XBOX"></a></p>
<p dir="auto">I hooked up my Oscilloscope to the board and after some tests involving basic frequency measurements, I confirmed the CPLD was doing exactly what the Xilinx forum suggested.. It delayed the input 48Mhz clock phase by a few degrees, then XOR'ed the Input 48Mhz and delayed 48Mhz clock signals to produce a DOUBLE frequency clock signal at 96Mhz - Then you can do Dual Edge Triggering to process signals at 192Mhz!!!!  Thats pretty crazy to process at 4x the input clock speed without any PLL's or DCM's!!!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Now I could process and produce signals on the CPLD in 5.208333 nanosecond periods - that is a pretty darn accurate clock !!</h3><a id="user-content-now-i-could-process-and-produce-signals-on-the-cpld-in-5208333-nanosecond-periods---that-is-a-pretty-darn-accurate-clock-" aria-label="Permalink: Now I could process and produce signals on the CPLD in 5.208333 nanosecond periods - that is a pretty darn accurate clock !!" href="#now-i-could-process-and-produce-signals-on-the-cpld-in-5208333-nanosecond-periods---that-is-a-pretty-darn-accurate-clock-"></a></p>
<p dir="auto">After these Changes and some more input from Octal450 on glitch timing fine tuning and a suggestion to delay the "slow down" message until 30-50ms after post count 10, I found the magic numbers..  and BOOM!!  I was able to glitch the XBOX 360 pretty much within 1-5 seconds EVERY single time!! using code I created entirely from a Logic Analyzer output !!!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/all_good.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/all_good.png" alt="XBOX"></a></p>
<p dir="auto">This was a WILD ride! I learnt so much during the process about hardware glitching and how powerful of a tool such a teeny tiny little anomaly at the right time could be!</p>
<p dir="auto">I am still AMAZED at the people who researched this hack 10 years ago and found all the puzzle pieces to pull it off..  This is a very advanced hack and to get to to work so well and so consistently is pretty darn incredible.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Thanks Octal450 and Mena on Discord for your help and guidance, it certainly was a cool journey.</h4><a id="user-content-thanks-octal450-and-mena-on-discord-for-your-help-and-guidance-it-certainly-was-a-cool-journey" aria-label="Permalink: Thanks Octal450 and Mena on Discord for your help and guidance, it certainly was a cool journey." href="#thanks-octal450-and-mena-on-discord-for-your-help-and-guidance-it-certainly-was-a-cool-journey"></a></p>
<p dir="auto">Feel free to ping me if anyone has any questions about the code or the process</p>
<p dir="auto">ENJOY!</p>
<p dir="auto">Koos</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/happy_pepe.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/happy_pepe.png" alt="XBOX"></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How types make hard problems easy (125 pts)]]></title>
            <link>https://mayhul.com/posts/type-driven-design/</link>
            <guid>42464966</guid>
            <pubDate>Thu, 19 Dec 2024 19:38:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mayhul.com/posts/type-driven-design/">https://mayhul.com/posts/type-driven-design/</a>, See on <a href="https://news.ycombinator.com/item?id=42464966">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <p>Over the last couple years, my programming brain has become increasingly warped around types, functional programming principles &amp; Typescript. Most of it is influenced by the inordinate amount of time I’ve spent working on the Heartbeat codebase, a 300k+ line Typescript full-stack application that includes a React web app, a React Native mobile app and a Node.js server. My experience in this codebase has shown me that the more I lean into relying on the type system, the more I benefit.</p>
<p>Writing code in a codebase that has fully bought into types feels like cheating. I can often implement 80% of a new feature without ever running the code. I’ll start working on a large refactor that requires breaking an assumption made throughout the code &amp; quickly discover that the type system makes the change trivial. Simple features practically code themselves because typos are caught instantly and half my code is autocompleted. Nuanced questions from the support team about how a certain feature works can be answered with a quick Ctrl+F in the code even when little written documentation exists. Entire <em>categories</em> of bugs that I used to deal with have vanished.</p>
<p>I’ve come to think of the style of coding that enables this as Type Driven Development. Below is a loose collection of thoughts &amp; links to resources that have heavily influenced what type driven development means to me.</p>
<h3 id="1-let-the-types-flow">1) Let the types flow</h3>
<p>Investing in type safety is much more effective when types are able to flow across every surface of our application. In a simple full-stack application, the data flow typically looks like: database -&gt; server -&gt; client. Changing our database schema should cause us to see errors in our frontend code. By achieving this level of type interconnectedness, we can make changes to one side of our codebase and feel confident that the type system will inform us about the implications of that change, even if those implications are happening on a completely different side of the codebase.</p>
<p>Enabling our types to flow through the system usually means:</p>
<ol>
<li>Using the same language everywhere. Naturally, if we want to share type information as much as possible, we need to be using the same language. While not perfect, React Native and Node.Js are powerful for allowing us to use Typescript on mobile &amp; server-side.</li>
<li>Making sure that type information is properly preserved across network boundaries. Using a well-typed ORM such as Prisma or Drizzle. Using a typed framework for API calls such as tRPC.</li>
<li>Using a monorepo. We want changes in one part of the system to alert us about changes that need to made in other parts of the system, which doesn’t work when those other parts are in a different repo.</li>
<li>Using <code>any</code> very rarely. Nothing breaks the flow of types more than <code>any</code></li>
</ol>
<p>This can often times be the hard part. Letting the types flow entails doing a lot of work architecting the system in a way that allows for a completely closed loop. At Heartbeat, we’ve gone to <a href="https://mayhul.com/posts/hacking-prisma" rel="nofollow, noopener, noreferrer" target="_blank">extensive lengths</a> to make this flow as robust as possible. And sometimes doing this work can feel pointless because I’m knee-deep in arcane Typescript errors instead of working on a new feature. But for any codebase that’s going to be sticking around for a while, setting up good base-level infrastructure is invaluable.</p>
<h3 id="2-start-with-the-types">2) Start with the types</h3>
<p>Given that types act as a glue that tie the system together, the natural starting place for any new feature is the type definitions. The first thing I do when implementing a new feature is map out what are all the entities involved, what is their relationship, what properties do they have and how should they be represented as a type.</p>
<p>This video is a great example of this concept: <a href="https://www.youtube.com/watch?v=2JB1_e5wZmU" rel="nofollow, noopener, noreferrer" target="_blank">https://www.youtube.com/watch?v=2JB1_e5wZmU</a></p>
<p>Some key takeaways from the video:</p>
<p>a) type definitions are a great way to make sure that my understanding of the domain is aligned with reality. The process of writing these type definitions forces me to map out &amp; wrangle the different components of the project in a comprehensive way. Usually this process results in me discovering gaps or ambiguities in the feature spec that I can then hash with the rest of the team. Often times, these gaps/ambiguities are things that would otherwise go undiscovered until I’m halfway through the project. At which point resolving them might involve throwing away most of the work I’ve already done. Type driven development brings these questions up to the beginning of the process, gets them answered, and serves as a blueprint for the rest of the project.</p>
<p>b) type definitions are human-readable. They’re a great way for someone new (or me in the future) to get a high level understanding of how a feature is structured without having to dive into any actual code tracing.</p>
<p>c) type definitions are both a documentation of the domain model AND real code that is directly used by our implementation. They are a living document that is <em>guaranteed</em> to be an accurate reflection of the codebase.</p>
<p>d) an entity’s conceptual idea is more important than its representation. For example, an email address and a customer id are both <em>represented</em> by strings, but conceptually they are independent things and should not be considered the same type. This distinction should be reflected in our types.</p>
<h3 id="3-make-illegal-states-unrepresentable">3) Make illegal states unrepresentable</h3>
<p>Another key takeaway from the video that deserves it’s own section. Making our types reflect the true nature of the data as closely as possible makes it almost impossible to mess up. Some concrete examples of what this can look like in Typescript:</p>
<ol>
<li>We have <code>Product</code> entity. Every product must have at least one price associated with it:</li>
</ol>
<pre tabindex="0"><code><span></span>
<span><span>type</span><span> NonEmptyArray</span><span>&lt;</span><span>T</span><span>&gt; </span><span>=</span><span> [</span><span>T</span><span>, </span><span>...</span><span>T</span><span>[]];</span></span>
<span></span>
<span><span>type</span><span> Price</span><span> =</span><span> //something</span></span>
<span></span>
<span><span>interface</span><span> Product</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>    prices</span><span>:</span><span> NonEmptyArray</span><span>&lt;</span><span>Price</span><span>&gt;;</span></span>
<span><span>    //...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> createProduct</span><span>(</span><span>product</span><span>:</span><span> Product</span><span>) {</span></span>
<span><span>   //...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>//If I try to create a product with no prices, I get a type error</span></span>
<span><span>createProduct</span><span>({</span></span>
<span><span>	prices</span><span>:</span><span> [],</span></span>
<span><span>})</span></span></code></pre>
<ol start="2">
<li>Our users can optionally choose to give us their address:</li>
</ol>
<pre tabindex="0"><code><span><span>//Bad implemenation</span></span>
<span><span>type</span><span> User</span><span> =</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>	addressLine1</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	addressLine2</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	city</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	state</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	country</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>};</span></span>
<span></span>
<span><span>function</span><span> createUser</span><span>(</span><span>user</span><span>:</span><span> User</span><span>) {</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>//It's possible for me to create a user &amp; forget to include parts of their address</span></span>
<span><span>createUser</span><span>({</span></span>
<span><span>	//...</span></span>
<span><span>	addressLine1</span><span>:</span><span> "</span><span>123 Example St</span><span>"</span><span>,</span></span>
<span><span>	//...</span></span>
<span><span>});</span></span>
<span></span>
<span><span>/*-------------------------------------------*/</span></span>
<span></span>
<span><span>//Good implemenation</span></span>
<span><span>type</span><span> User</span><span> =</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>	address</span><span>:</span><span> {</span></span>
<span><span>		line1</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		line2</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		city</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		state</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		country</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	} </span><span>|</span><span> null</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>};</span></span>
<span></span>
<span><span>//The type system makes sure that we provide everything if we choose to</span></span>
<span><span>createUser</span><span>({</span></span>
<span><span>	//...</span></span>
<span><span>	address</span><span>:</span><span> {</span></span>
<span><span>		line1</span><span>:</span><span> "</span><span>123 Example St</span><span>"</span><span>,</span></span>
<span><span>		line2</span><span>:</span><span> "</span><span>Apt 1D</span><span>"</span><span>,</span></span>
<span><span>		city</span><span>:</span><span> "</span><span>Seattle</span><span>"</span><span>,</span></span>
<span><span>		state</span><span>:</span><span> "</span><span>Washington</span><span>"</span><span>,</span></span>
<span><span>		country</span><span>:</span><span> "</span><span>USA</span><span>"</span><span>,</span></span>
<span><span>	},</span></span>
<span><span>	//...</span></span>
<span><span>});</span></span></code></pre>
<p>Structuring our types in this way removes a complete category of bugs from ever occurring. Every single state that we make illegal via our type system was a bug waiting to happen in an alternate universe. Additionally, the <em>process</em> of making illegal states unrepresentable is valuable too. Making our types represent the “truth” as closely as possible forces us to ask a lot of questions about what the truth is.</p>
<ul>
<li>Are there cases where it makes sense for a product to have no prices?</li>
<li>How many possible states are there? Are state X and Y actually different, or are they essentially the same thing?</li>
</ul>
<p>And those questions are vital to understanding the full expanse of the problem we’re trying to solve.</p>
<h3 id="4-parse-dont-validate">4) Parse, don’t validate</h3>
<p>Reading this article crystalized so many loose thoughts that I had into a clean slogan: <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/" rel="nofollow, noopener, noreferrer" target="_blank">https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/</a>.</p>
<p>The key insight of the article is that types can be interpreted as a vehicle to “store” validation. Having validation work encoded in our types means that:</p>
<ul>
<li>the rest of our code is allowed to make assumptions about data without having to constantly validate those assumptions</li>
<li>the type system enforces that validation happens when needed</li>
<li>changing these assumptions is much easier. We can change the types to reflect a new assumption &amp; the type system will point us to the implications of this change</li>
</ul>
<p>(The only reason this section is so short is that the article explains things perfectly. Definitely go read it!)</p>
<h3 id="5-be-honest">5) Be honest</h3>
<p>In many ways, I’ve come to think of programming as <em>finding the truth</em>. The goal is to find the purest, rawest, deepest essence of what an entity represents and express that as a type. And if my goal is truth, then I need to value <em>being honest</em> in my code. This can manifest itself via “make illegal states unrepresentable” — I don’t want to <em>lie</em> and say that something is possible when it isn’t. Or, if I dive down and discover that two things I thought were the same are actually different, I shouldn’t <em>lie</em> and refer to them with the same type. I should do the extra work to split them into different types because that would be a more <em>honest</em> representation of the truth.</p>
<p>To contrast that grandiose description, here’s a mundane example. We have a calendar app where users can create events &amp; see a list of their events:</p>
<pre tabindex="0"><code><span></span>
<span><span>type</span><span> Event</span><span> =</span><span> {</span></span>
<span><span>  id</span><span>:</span><span> EventId</span><span>;</span></span>
<span><span>  title</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  description</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  startTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  endTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  duration</span><span>:</span><span> number</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventList</span><span>(</span><span>props</span><span>:</span><span> { events</span><span>:</span><span> Event</span><span>[] }) {</span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h1</span><span>&gt;My Events</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span><span>      {</span><span>props</span><span>.</span><span>events</span><span>.</span><span>map</span><span>((</span><span>ev</span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span>EventListItem event</span><span>=</span><span>{ev} </span><span>/&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventListItem</span><span>(</span><span>props</span><span>:</span><span> { event</span><span>:</span><span> Event</span><span> }) {</span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h3</span><span>&gt;{props.event.name}</span><span>&lt;/</span><span>h3</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;{props.event.description}</span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>Start</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.startTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>End</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.endTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p>We decide to add a new feature. Users can now create recurring events! Users define a recurring event using a <a href="https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html" rel="nofollow, noopener, noreferrer" target="_blank">recurrence rule</a>, which specifies when &amp; how often the event repeats. We want our event list to show all instances of upcoming recurring events. To do this we create a <code>getExpandedEvent</code> function which takes in an event. If the event is recurring, the event gets expanded to include all of the instances. Otherwise we return the single event. Once we create this function, all we need to do is call it in our <code>EventList</code> component and then we can continue as usual.</p>
<pre tabindex="0"><code><span></span>
<span><span>type</span><span> Event</span><span> =</span><span> {</span></span>
<span><span>  id</span><span>:</span><span> EventId</span><span>;</span></span>
<span><span>  title</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  description</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  startTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  endTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  duration</span><span>:</span><span> number</span><span>;</span></span>
<span><span>  //New field added</span></span>
<span><span>  recurrenceRule</span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getRecurringDates</span><span>(</span><span>startTime</span><span>:</span><span> Date</span><span>, </span><span>recurrenceRule</span><span>:</span><span> string</span><span>)</span><span>:</span><span> Date</span><span>[] {</span></span>
<span><span>  //calculate all the recurring dates according to the recurrence rule</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getExpandedEvent</span><span>(</span><span>event</span><span>:</span><span> Event</span><span>)</span><span>:</span><span> Event</span><span>[] {</span></span>
<span><span>  if</span><span> (event.recurrenceRule </span><span>!==</span><span> null</span><span>) {</span></span>
<span><span>    const</span><span> recurringDates </span><span>=</span><span> getRecurringDates</span><span>(</span></span>
<span><span>      event.startTime,</span></span>
<span><span>      event.recurrenceRule</span></span>
<span><span>    )</span></span>
<span><span>    return</span><span> recurringDates.</span><span>map</span><span>((</span><span>date</span><span>) </span><span>=&gt;</span><span> ({</span></span>
<span><span>      ...</span><span>event,</span></span>
<span><span>      startTime</span><span>:</span><span> date,</span></span>
<span><span>    }))</span></span>
<span><span>  } </span><span>else</span><span> {</span></span>
<span><span>    return</span><span> [event]</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventList</span><span>(</span><span>props</span><span>:</span><span> { events</span><span>:</span><span> Event</span><span>[] }) {</span></span>
<span><span>  const</span><span> expandedEvents </span><span>=</span><span> getExpandedEvent</span><span>(props.events).</span><span>flat</span><span>()</span></span>
<span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h1</span><span>&gt;My Events</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span><span>      {</span><span>expandedEvents</span><span>.</span><span>map</span><span>((</span><span>ev</span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span>EventListItem event</span><span>=</span><span>{ev} </span><span>/&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p>This works great. Users can see all their recurring events with no issues. A month later, we decide to finally add a button for users to delete their events. So we do something like this:</p>
<pre tabindex="0"><code><span></span>
<span><span>function</span><span> EventListItem</span><span>(</span><span>props</span><span>:</span><span> { event</span><span>:</span><span> Event</span><span> }) {</span></span>
<span><span>  //If you aren't familiar with tRPC, all you need to know is that deleteEvent.mutateAsync is a function that makes an API request to our server. On the server, we delete the event</span></span>
<span><span>  const</span><span> deleteEvent </span><span>=</span><span> trpc.deleteEvent.</span><span>useMutation</span><span>()</span></span>
<span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h3</span><span>&gt;{props.event.name}</span><span>&lt;/</span><span>h3</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;{props.event.description}</span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>Start</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.startTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>End</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.endTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>button onClick</span><span>=</span><span>{() =&gt; deleteEvent.mutateAsync(props.event.id)}</span><span>&gt;</span><span>Delete</span><span>&lt;/</span><span>button</span><span>&gt;</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span>
<span></span></code></pre>
<p>Seems pretty straightforward, so we go ahead and ship it. Soon, the customer bug reports come in: “I was trying to delete the May instance of my monthly event, but the whole thing disappeared!?!?!” As you may have noticed, the issue with this implementation is that clicking delete on an instance of a recurring event will delete the entire event. Probably not the behavior that we want. There’s a couple things that went wrong to get here:</p>
<ul>
<li>Whoever was speccing the delete event feature should have called out how it should work for non-recurring vs recurring events</li>
<li>We probably would have realized this was weird if we had more tests or QA before releasing</li>
</ul>
<p>And while those might be true, I’d argue that one of the underlying reasons we got here was because we weren’t fully honest when we implemented the <code>getExpandedEvent</code> function. At the time, it was convenient to continue using the <code>Event</code> type. All we needed to do is call the function and everything else would remain the same. But if we were honest, we would have recognized that while very similar, events &amp; event instances are different concepts.</p>
<p>An <code>Event</code> is the core object that gets stored in the database. When someone creates a recurring event - say a meeting every Monday for a year - we don’t store 52 different events in the database. Instead, we store a single <code>Event</code> with a recurrence rule. Then, whenever someone needs to see their upcoming events, we use that rule to generate the appropriate <code>EventInstance</code>s, each representing one occurrence of the meeting. Events are stored in the database, while event instances are ephemeral. Events can be created, while event instances cannot. Editing an <code>Event</code> (changing the meeting from Mondays at 2pm to Mondays at 3pm) is a completely different action from editing an <code>EventInstance</code> (rescheduling just one specific Monday’s meeting to Tuesday). A more honest representation might look like this:</p>
<pre tabindex="0"><code><span><span>type</span><span> EventInstance</span><span> =</span><span> Omit</span><span>&lt;</span><span>Event</span><span>, </span><span>"</span><span>id</span><span>"</span><span>&gt; </span><span>&amp;</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> EventInstanceId</span><span>;</span></span>
<span><span>	eventId</span><span>:</span><span> EventId</span><span>;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>function</span><span> getEventInstanceId</span><span>(</span><span>eventId</span><span>:</span><span> EventId</span><span>, </span><span>startTime</span><span>:</span><span> Date</span><span>) {</span></span>
<span><span>	return</span><span> `</span><span>${</span><span>eventId</span><span>}</span><span>-</span><span>${</span><span>startTime.</span><span>toISOString</span><span>()</span><span>}</span><span>`</span><span> as</span><span> EventInstanceId</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getEventInstances</span><span>(</span><span>event</span><span>:</span><span> Event</span><span>)</span><span>:</span><span> EventInstance</span><span>[] {</span></span>
<span><span>	if</span><span> (event.recurrenceRule </span><span>!==</span><span> null</span><span>) {</span></span>
<span><span>		const</span><span> recurringDates </span><span>=</span><span> getRecurringDates</span><span>(event.startTime, event.recurrenceRule);</span></span>
<span><span>		return</span><span> recurringDates.</span><span>map</span><span>((</span><span>date</span><span>) </span><span>=&gt;</span><span> ({</span></span>
<span><span>			...</span><span>event,</span></span>
<span><span>			startTime</span><span>:</span><span> date,</span></span>
<span><span>			id</span><span>:</span><span> getEventInstanceId</span><span>(event.id, date),</span></span>
<span><span>			eventId</span><span>:</span><span> event.id,</span></span>
<span><span>		}));</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		return</span><span> [</span></span>
<span><span>			{</span></span>
<span><span>				...</span><span>event,</span></span>
<span><span>				id</span><span>:</span><span> getEventInstanceId</span><span>(event.id, event.startTime),</span></span>
<span><span>				eventId</span><span>:</span><span> event.id,</span></span>
<span><span>			},</span></span>
<span><span>		];</span></span>
<span><span>	}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventListItem</span><span>(</span><span>props</span><span>:</span><span> { eventInstance</span><span>:</span><span> EventInstance</span><span> }) {</span></span>
<span><span>	//Render event instance</span></span>
<span><span>}</span></span></code></pre>
<p>The exact implementation of <code>EventInstance</code> would vary depending on what behavior we wanted. But the key point is differentiating event instances from events. If we had done this we never would have ran into the deletion issue because it would be clear that the <code>deleteEvent</code> endpoint is not applicable to event instances. In fact, going back to <em>Start with the types</em>, the <code>EventInstance</code> type in our codebase likely would have made us realize during the feature speccing phase that we needed to handle deleting events and deleting event instances separately.</p>
<p>It’s easy to see why we wouldn’t want to make this change. It’s more work for no immediate payoff. Adding the new type requires changing <code>EventListItem</code> as well. In a larger project, the new type might require even more refactoring across the codebase. But by being lazy the first time, we introduced a subtle lie into our type system that corrupted it, causing it to deviate slightly from being a true representation of the underlying domain. This prevented the types from helping us when we needed them later.</p>
<h3 id="6-be-specific">6) Be specific</h3>
<p>A companion to being honest is being specific. We don’t want to lie by omission. So as much as possible, we want our types to be the narrowest possible expression of the truth.</p>
<p><a href="https://egghead.io/blog/using-branded-types-in-typescript" rel="nofollow, noopener, noreferrer" target="_blank">Branded types</a> are a great example of this. We <em>could</em> use a <code>string</code> to represent the id of a user and it would be an honest representation. But by using a branded <code>UserID</code> type instead, we can be even more specific about what a user id truly represents. And the more specific we are, the more the type checker is able to help us out:</p>
<pre tabindex="0"><code><span><span>type</span><span> CommunityID</span><span> =</span><span> string</span><span> &amp;</span><span> { </span><span>readonly</span><span> _</span><span>:</span><span> "</span><span>__CommunityID__</span><span>"</span><span> };</span></span>
<span><span>type</span><span> UserID</span><span> =</span><span> string</span><span> &amp;</span><span> { </span><span>readonly</span><span> _</span><span>:</span><span> "</span><span>__UserID__</span><span>"</span><span> };</span></span>
<span><span>type</span><span> PostID</span><span> =</span><span> string</span><span> &amp;</span><span> { </span><span>readonly</span><span> _</span><span>:</span><span> "</span><span>__PostID__</span><span>"</span><span> };</span></span>
<span></span>
<span><span>interface</span><span> Post</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> PostID</span><span>;</span></span>
<span><span>	createdBy</span><span>:</span><span> UserID</span><span>;</span></span>
<span><span>	communityID</span><span>:</span><span> CommunityID</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getIsUserAdmin</span><span>(</span><span>userID</span><span>:</span><span> UserID</span><span>) {</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getShouldShowPost</span><span>(</span><span>post</span><span>:</span><span> Post</span><span>) {</span></span>
<span><span>	//If we accidentally call this function with the wrong id, we get a type error</span></span>
<span><span>	const</span><span> isAdmin </span><span>=</span><span> getIsUserAdmin</span><span>(post.communityID);</span></span>
<span></span>
<span><span>	const</span><span> isAdmin </span><span>=</span><span> getIsUserAdmin</span><span>(post.createdBy);</span></span>
<span></span>
<span><span>	//...</span></span>
<span><span>}</span></span></code></pre>
<h3 id="7-pure-functions-as-a-type-bridge">7) Pure functions as a type bridge</h3>
<p>Once you start to see everything in your codebase through the lens of types, any action a user takes can be reduced down to a series of type jumps. Define the starting types. Define the ending type. Find a way to go from the starting types to the ending type. What’s the best way to convert one type to another with no distractions? <strong>A pure function</strong>. That’s quite literally what the mathematical definition of a function is.</p>
<p>Let’s say that we’re implementing a payment page. Our domain looks like this:</p>
<pre tabindex="0"><code><span><span>type</span><span> Price</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> PriceId</span><span>;</span></span>
<span><span>	amount</span><span>:</span><span> number</span><span>;</span></span>
<span><span>	interval</span><span>:</span><span> "</span><span>month</span><span>"</span><span> |</span><span> "</span><span>year</span><span>"</span><span>;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> Product</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> ProductId</span><span>;</span></span>
<span><span>	name</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	prices</span><span>:</span><span> NonEmptyArray</span><span>&lt;</span><span>Price</span><span>&gt;;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> Subscription</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> SubscriptionId</span><span>;</span></span>
<span><span>	status</span><span>:</span><span> "</span><span>active</span><span>"</span><span> |</span><span> "</span><span>canceled</span><span>"</span><span>;</span></span>
<span><span>	productId</span><span>:</span><span> ProductId</span><span>;</span></span>
<span><span>	priceId</span><span>:</span><span> PriceId</span><span>;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> User</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> UserId</span><span>;</span></span>
<span><span>	subscriptions</span><span>:</span><span> Subscription</span><span>[];</span></span>
<span><span>};</span></span></code></pre>
<p>Our payment page has 3 different possibilities:</p>
<ol>
<li>The user has not purchased the product yet, in which they can choose a price point &amp; make the purchase</li>
<li>The user is currently subscribed, in which case we show a Cancel Subscription button. When the user clicks on this button:
<ul>
<li>If they’ve been a subscriber for more than 12 months, offer them a 1% discount for each month they’ve been a subscriber (capped at 50%)</li>
<li>Otherwise, offer them a flat $5 discount</li>
</ul>
</li>
<li>The user has canceled their subscription, in which case we prompt them to restart their subscription</li>
</ol>
<p>Representing this as a type, we get:</p>
<pre tabindex="0"><code><span><span>type</span><span> Discount</span><span> =</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>PERCENTAGE</span><span>"</span><span>;</span></span>
<span><span>			percentage</span><span>:</span><span> number</span><span>;</span></span>
<span><span>	  }</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>FLAT_AMOUNT</span><span>"</span><span>;</span></span>
<span><span>			amount</span><span>:</span><span> number</span><span>;</span></span>
<span><span>	  };</span></span>
<span></span>
<span><span>type</span><span> CheckoutPageState</span><span> =</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>INITIAL_PURCHASE</span><span>"</span><span>;</span></span>
<span><span>			product</span><span>:</span><span> Product</span><span>;</span></span>
<span><span>	  }</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>CANCELED</span><span>"</span><span>;</span></span>
<span><span>			subscriptionId</span><span>:</span><span> SubscriptionId</span><span>;</span></span>
<span><span>	  }</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>ALREADY_SUBSCRIBED</span><span>"</span><span>;</span></span>
<span><span>			product</span><span>:</span><span> Product</span><span>;</span></span>
<span><span>			cancelationDiscount</span><span>:</span><span> Discount</span><span>;</span></span>
<span><span>	  };</span></span></code></pre>
<p>A user visits the payment page for a particular product. We need to render the page. How do we do this? Well, given that we have these types established, the task at hand is clear. We need to convert a <code>Product</code> and a <code>User</code> into a <code>CheckoutPageState</code>. If the user has an active subscription, we need to convert a <code>Subscription</code> to a <code>Discount</code>. So…we write two pure functions to do the conversion &amp; we’re done.</p>
<pre tabindex="0"><code><span><span>//We pass in now as a parameter to make the function fully pure</span></span>
<span><span>//This makes testing the function easy</span></span>
<span><span>function</span><span> getDiscount</span><span>(</span><span>subscription</span><span>:</span><span> Subscription</span><span>, </span><span>now</span><span>:</span><span> Date</span><span>)</span><span>:</span><span> Discount</span><span> {</span></span>
<span><span>	const</span><span> numMonths </span><span>=</span><span> differenceInMonths</span><span>(now, subscription.createdAt);</span></span>
<span></span>
<span><span>	if</span><span> (numMonths </span><span>&gt;</span><span> 12</span><span>) {</span></span>
<span><span>		return</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>PERCENTAGE</span><span>"</span><span>,</span></span>
<span><span>			percentage</span><span>:</span><span> Math.</span><span>min</span><span>(</span><span>50</span><span>, numMonths),</span></span>
<span><span>		};</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		return</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>FLAT_AMOUNT</span><span>"</span><span>,</span></span>
<span><span>			amount</span><span>:</span><span> 5</span><span>,</span></span>
<span><span>		};</span></span>
<span><span>	}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getCheckoutPageState</span><span>(</span><span>product</span><span>:</span><span> Product</span><span>, </span><span>user</span><span>:</span><span> User</span><span>, </span><span>now</span><span>:</span><span> Date</span><span>)</span><span>:</span><span> CheckoutPageState</span><span> {</span></span>
<span><span>	const</span><span> existingSubscription </span><span>=</span><span> user.subscriptions.</span><span>find</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x.productId </span><span>===</span><span> product.id);</span></span>
<span><span>	if</span><span> (existingSubscription </span><span>!==</span><span> undefined</span><span>) {</span></span>
<span><span>		if</span><span> (existingSubscription.status </span><span>===</span><span> "</span><span>canceled</span><span>"</span><span>) {</span></span>
<span><span>			return</span><span> {</span></span>
<span><span>				type</span><span>:</span><span> "</span><span>CANCELED</span><span>"</span><span>,</span></span>
<span><span>				subscriptionId</span><span>:</span><span> existingSubscription.id,</span></span>
<span><span>			};</span></span>
<span><span>		} </span><span>else</span><span> if</span><span> (existingSubscription.status </span><span>===</span><span> "</span><span>active</span><span>"</span><span>) {</span></span>
<span><span>			const</span><span> discount </span><span>=</span><span> getDiscount</span><span>(existingSubscription, now);</span></span>
<span><span>			return</span><span> {</span></span>
<span><span>				type</span><span>:</span><span> "</span><span>ALREADY_SUBSCRIBED</span><span>"</span><span>,</span></span>
<span><span>				product</span><span>:</span><span> product,</span></span>
<span><span>				cancelationDiscount</span><span>:</span><span> discount,</span></span>
<span><span>			};</span></span>
<span><span>		} </span><span>else</span><span> {</span></span>
<span><span>			assertNever</span><span>(existingSubscription.status);</span></span>
<span><span>		}</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		return</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>INITIAL_PURCHASE</span><span>"</span><span>,</span></span>
<span><span>			product</span><span>:</span><span> product,</span></span>
<span><span>		};</span></span>
<span><span>	}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>//***** CheckoutPage.tsx *****\\</span></span>
<span></span>
<span><span>function</span><span> CheckoutPage</span><span>(</span><span>props</span><span>:</span><span> CheckoutPageState</span><span>) {</span></span>
<span><span>	if</span><span> (props.type </span><span>===</span><span> "</span><span>INITIAL_PURCHASE</span><span>"</span><span>) {</span></span>
<span><span>		//render initial purchase</span></span>
<span><span>	} </span><span>else</span><span> if</span><span> (props.type </span><span>===</span><span> "</span><span>ALREADY_SUBSCRIBED</span><span>"</span><span>) {</span></span>
<span><span>		//render already subscribed</span></span>
<span><span>	} </span><span>else</span><span> if</span><span> (props.type </span><span>===</span><span> "</span><span>CANCELED</span><span>"</span><span>) {</span></span>
<span><span>		//render canceled</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		safeAssertNever</span><span>(props.type);</span></span>
<span><span>		return</span><span> null</span><span>;</span></span>
<span><span>	}</span></span>
<span><span>}</span></span></code></pre>
<p>Hopefully, you can imagine how this small example could expand to a production application with dozens of types &amp; hundreds of business logic rules encoded in a network of pure functions. The magic of pure functions is that they turn something intimidating into something approachable. We could have the gnarliest, most complicated domain with tons of intersecting edge cases and unintuitive logic. But if we’ve broken it down into the constituent types, then at any given moment all I need to worry about is converting <code>IntermediateType5</code> to <code>IntermediateType6</code>. I don’t need to think about anything else. That level of clarity &amp; focus does wonders for easing my mental burden while working on large project.</p>
<p>For a full-stack application, the pattern is simple:</p>
<ol>
<li>Define types for my core entities, the ones that get stored in the database (<code>Product</code>, <code>Price</code>, <code>User</code>, <code>Subscription</code>)</li>
<li>Define my intermediate types (<code>Discount</code>, <code>CheckoutPageState</code>)</li>
<li>Fetch the relevant core entities from the database</li>
<li>Run my entities through a series of pure functions, jumping from type to type, until I have a UI to show</li>
</ol>
<p>Even React, the final piece of the puzzle in this example, is built on functional programming principles. Our <code>CheckoutPage</code> React component is one last pure function that converts the <code>CheckoutPageState</code> type to JSX that gets rendered on the screen.</p>
<h3 id="8-ask-and-you-shall-receive">8) Ask and you shall receive</h3>
<p>One of the most common changes required by a new feature is something that used to be simple gets just <em>slightly</em> more nuanced. Before the feature, we call a function and it does the thing. But now, that function needs a little bit more context. And based on that context, it does something a little bit different. For example, let’s say we have a <code>generateInvoice</code> function that takes in various values and uses them to generate an <code>Invoice</code> object. The details of the function itself are irrelevant.</p>
<pre tabindex="0"><code><span><span>function</span><span> generateInvoice</span><span>(</span><span>params</span><span>:</span><span> {</span></span>
<span><span>	customerId</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	currency</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	items</span><span>:</span><span> InvoiceItem</span><span>[];</span></span>
<span><span>	//...</span></span>
<span><span>})</span><span>:</span><span> Invoice</span><span> {</span></span>
<span><span>	//Generate the invoice</span></span>
<span><span>}</span></span></code></pre>
<p>But now the time has finally come for us to stop ignoring the IRS’ emails and start properly collecting tax from our users. To do so, our invoices will need to look different depending on what the tax rate is.</p>
<p>With types, my approach for a change like this is straightforward. I go to the function that needs the additional context and I edit the input type to include the new context that I need. And then I see what type errors I get. If the function that’s calling <code>generateInvoice</code> doesn’t know what the <code>taxRate</code> should be, then I add <code>taxRate</code> to the input for that function and continue up the call stack. Eventually, I reach a function that is able to either pull the necessary context from a stateful source (a database, endpoint, etc) OR I’m able to calculate the necessary value and pass it in.</p>
<p>So in this case, let’s say I add the <code>taxRate</code> field to <code>params</code> and see the following two errors:</p>
<ol>
<li>One that’s happening on the backend when we call <code>generateInvoice</code> from <code>generateInvoiceForCustomer</code>. To fix it, I call <code>calculateTaxRateForCustomer</code> inside <code>generateInvoiceForCustomer</code> and pass the result of that function into <code>generateInvoice</code>.</li>
<li>One that’s happening on the frontend when we call <code>generateInvoice</code> from <code>previewInvoice</code>. In this case, we’re generating a preview invoice for a sample customer, so there’s no tax rate to be calculated. Instead, I just pass in a static value of <code>0.1</code> to use as the example tax rate.</li>
</ol>
<p>This approach saves a lot of time and headache. In a larger application, it’s possible that <code>generateInvoice</code> is being called from 7 different contexts. Rather than proactively trying to map out all of these different cases, I just tell the type system that I need a certain value and let it guide to me where I need to go next.</p>
<h3 id="9-if-it-compiles-it-works">9) If it compiles, it works</h3>
<p>Haskell developers have a refrain that if the code compiles, it probably works. While Haskell is on the extreme side of the spectrum, I’ve found this to also be quite true for any system that relies heavily on types. Having types embedded in our codebase means the feedback loop for our code comes directly from the editor &amp; type errors. I don’t need to run the code to see if I messed up, because my editor lets me know as I type.</p>
<p>There’s an inverse relationship between the expressiveness of the types and the number of possible programs that type check successfully. So when our types are honest &amp; specific, it can be hard to write code that type checks <em>without</em> doing what we want it do.</p>
<p>The best example of this is how productive I’ve become on airplanes. Despite being a full-stack application that needs Internet to run locally, I can get on a flight with no wifi, pull out my laptop &amp; implement a new Heartbeat feature with zero distractions — just me and my type checker. When I eventually land and run the code, I’m usually good to go after some UI work &amp; maybe 2-3 quick bug fixes.</p>
<h3 id="10-types-as-an-introspection-tool">10) Types as an introspection tool</h3>
<p>One of the most underrated aspects of Typescript is how it can be used as a tool to understand your codebase. If I’m trying to understand how a certain feature works, I can play around with the types to help me learn about how parts of that feature interact with the rest of the codebase.</p>
<p>For instance, let’s say I’m working on an update where I want to standardize how we can display prices in the product. Right now the only currency that we support is USD, and all of our prices are displayed like this: $100.00. But we’re getting some confusion from people in Canada about whether we’re referring to USD or CAD, so we want to update the UI to clarify that we mean USD. We show prices on a lot of different components in various contexts, so tracking down everything will be difficult.</p>
<p>What can I do is temporarily delete the <code>amount</code> field from the <code>Price</code> type:</p>
<pre tabindex="0"><code><span><span>type</span><span> Price</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> PriceId</span><span>;</span></span>
<span><span>	interval</span><span>:</span><span> "</span><span>month</span><span>"</span><span> |</span><span> "</span><span>year</span><span>"</span><span>;</span></span>
<span><span>};</span></span></code></pre>
<p>Now, anywhere that I attempt to reference the <code>amount</code> field, I’ll get a type error instead. So if I have 10 different components that display a price in some way, Typescript will point me towards each of those components. I can go to each of them, make the changes I need to and undo the change I made to the type.</p>
<p>Or, let’s say we have a <code>Button</code> component in our design system and we’re considering getting rid of the <code>success</code> variant because it feels unnecessary. To help us make the decision, we want to identify all the screens in our product where we use a <code>success</code> button.</p>
<pre tabindex="0"><code><span><span>interface</span><span> Props</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>	variant</span><span>?:</span><span> "</span><span>primary</span><span>"</span><span> |</span><span> "</span><span>secondary</span><span>"</span><span> |</span><span> "</span><span>success</span><span>"</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> Button</span><span>(</span><span>props</span><span>:</span><span> Props</span><span>) {</span></span>
<span><span>	//button</span></span>
<span><span>}</span></span></code></pre>
<p>I <em>could</em> do a Ctrl-F for <code>success</code> and try to find examples that way — but predictably it will lead to lots of unrelated results popping up. My approach in these situations is to just delete <code>success</code> as one of the options in <code>Props</code>. By doing this, I’ll immediately get type errors that point me to the exact location of every success button in the product. From there, I can click through the results and evaluate whether the <code>success</code> button is necessary or if it can be replaced with an alternative. The ability to quickly answer questions like “Where does every success button in our product live?” means that I can even use the codebase as a tool in design/product planning meetings.</p>
<h3 id="11-hard-mode-and-easy-mode">11) Hard mode and easy mode</h3>
<p>Using types extensively splits coding into 2 phases. A short period of intense &amp; difficult work followed by a longer period of straightforward work that’s hard to mess up.</p>
<p>The hard part is setting up the scaffolding &amp; defining the types. In Typescript, scaffolding can involve delving into arcane type-level programming or setting up complex frameworks to make sure that types are propagated robustly. As we’ve talked about above, defining types involves deep rumination to figure out what states are valid, how to be honest, where to draw the line between entities, etc. Figuring all of this out can be intimidating and cumbersome.</p>
<p>But, the hard work pays off because coding with types on is astoundingly EASY. The editor is constantly guiding me down the right path. Typos, misused variables, forgotten validation checks are all caught instantly. Autocomplete means I don’t even need to type that much. In the age of AI code completion, type definitions provide a valuable source of documentation to help the AI provide more accurate suggestions. And the type checker makes it harder for invalid AI-suggested code to go unnoticed.</p>
<p>This dichotomy gels really well with the way my brain works. I’m able to channel short bursts of creative energy into precisely mapping the domain or getting type scaffolding set up. And then I’m able to sustain long coding sessions to actually implement the feature because the scaffolding means I rarely have to think too hard.</p>
<h3 id="12-know-when-to-opt-out">12) Know when to opt out</h3>
<p>This one might be controversial for some — but I really like that Typescript allows us to cheat every now and then. Knowing when it’s ok to throw our hands up and use an <code>any</code> is important. If we’re thoughtful, we can maintain 99.9% of the benefits of the type system without wasting days trying to cover the last 0.1%.</p>
<p>Typically using <code>any</code> or type assertions such as <code>as string</code> are a bad idea because they’re a form of lying to the type system. But in situations where we genuinely know better than the type system and the scope of the assertion is small, a small lie is acceptable. A common time where we might know better than the type system is when dealing with external dependencies or legacy code. For example, this is the helper function we use for getting feature flags from Posthog:</p>
<pre tabindex="0"><code><span><span>export</span><span> const</span><span> POSTHOG_FLAGS </span><span>=</span><span> {</span></span>
<span><span>	"</span><span>longer-free-trial</span><span>"</span><span>:</span><span> [</span><span>"</span><span>control</span><span>"</span><span>, </span><span>"</span><span>30-days</span><span>"</span><span>],</span></span>
<span><span>	"</span><span>checkout-page-design</span><span>"</span><span>:</span><span> [</span><span>"</span><span>control</span><span>"</span><span>, </span><span>"</span><span>variant-a</span><span>"</span><span>, </span><span>"</span><span>variant-b</span><span>"</span><span>],</span></span>
<span><span>} </span><span>as</span><span> const</span><span>;</span></span>
<span></span>
<span><span>export</span><span> type</span><span> PosthogFlag</span><span> =</span><span> keyof</span><span> typeof</span><span> POSTHOG_FLAGS;</span></span>
<span></span>
<span><span>export</span><span> async</span><span> function</span><span> getPosthogFlagVariant</span><span>&lt;</span><span>T</span><span> extends</span><span> PosthogFlag</span><span>&gt;(</span><span>userID</span><span>:</span><span> UserID</span><span>, </span><span>flagName</span><span>:</span><span> T</span><span>) {</span></span>
<span><span>	const</span><span> variant </span><span>=</span><span> await</span><span> posthog.</span><span>getFeatureFlag</span><span>(flagName, userID);</span></span>
<span><span>	return</span><span> variant </span><span>as</span><span> (</span><span>typeof</span><span> POSTHOG_FLAGS)[</span><span>T</span><span>][</span><span>number</span><span>] </span><span>|</span><span> undefined</span><span>;</span></span>
<span><span>}</span></span></code></pre>
<p>The default return type for <code>posthog.getFeatureFlag</code> is <code>string | boolean | undefined</code>. But we have more precise knowledge. If we’re getting a value for <code>longer-free-trial</code> then the return type must be either <code>control</code> or <code>30-days</code>. So we can use the type assertion to assert our knowledge onto Typescript. And by doing so, anyone calling the <code>getPosthogFlagVariant</code> will have much more accurate &amp; specific types. Because <code>POSTHOG_FLAGS</code> is edited in a very controlled context (only when we’re adding or changing a feature flag), we can feel confident that unrelated changes to the codebase are unlikely to cause this lie to backfire.</p>
<p><em>Make illegal states unrepresentable</em> is another rule that’s helpful to know when to break. There are times when the work it would take to make an illegal state fully unrepresentable is just not worth it. And if I know that changes to what a legal state is are possible in the future, I might not want to cut off all our options too forcefully. Building an intuition for when to leave the door open is difficult and mostly comes from experience. A great example of this is <a href="https://www.swyx.io/preemptive-pluralization" rel="nofollow, noopener, noreferrer" target="_blank">preemptive pluralization</a>.</p>
<p>At the end of the day, it’s important to remember that all of these rules are in place to help us be more productive. We’re here to use the tool, not let the tool use us.</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Music and Geometry: Intervals and Scales (139 pts)]]></title>
            <link>https://roelsworld.eu/blog-music/music-geometry-intervals-scales/</link>
            <guid>42464557</guid>
            <pubDate>Thu, 19 Dec 2024 18:52:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://roelsworld.eu/blog-music/music-geometry-intervals-scales/">https://roelsworld.eu/blog-music/music-geometry-intervals-scales/</a>, See on <a href="https://news.ycombinator.com/item?id=42464557">Hacker News</a></p>
Couldn't get https://roelsworld.eu/blog-music/music-geometry-intervals-scales/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Mizu.js – Lightweight HTML templating library for any-side rendering (165 pts)]]></title>
            <link>https://mizu.sh</link>
            <guid>42464310</guid>
            <pubDate>Thu, 19 Dec 2024 18:25:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mizu.sh">https://mizu.sh</a>, See on <a href="https://news.ycombinator.com/item?id=42464310">Hacker News</a></p>
Couldn't get https://mizu.sh: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: WebGPU Tech Demo (121 pts)]]></title>
            <link>https://gnikoloff.github.io/webgpu-sponza-demo/</link>
            <guid>42463525</guid>
            <pubDate>Thu, 19 Dec 2024 17:14:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gnikoloff.github.io/webgpu-sponza-demo/">https://gnikoloff.github.io/webgpu-sponza-demo/</a>, See on <a href="https://news.ycombinator.com/item?id=42463525">Hacker News</a></p>
Couldn't get https://gnikoloff.github.io/webgpu-sponza-demo/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A Replacement for Bert (292 pts)]]></title>
            <link>https://huggingface.co/blog/modernbert</link>
            <guid>42463315</guid>
            <pubDate>Thu, 19 Dec 2024 16:53:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://huggingface.co/blog/modernbert">https://huggingface.co/blog/modernbert</a>, See on <a href="https://news.ycombinator.com/item?id=42463315">Hacker News</a></p>
Couldn't get https://huggingface.co/blog/modernbert: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Clay – UI Layout Library (202 pts)]]></title>
            <link>https://www.nicbarker.com/clay</link>
            <guid>42463123</guid>
            <pubDate>Thu, 19 Dec 2024 16:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nicbarker.com/clay">https://www.nicbarker.com/clay</a>, See on <a href="https://news.ycombinator.com/item?id=42463123">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Nullboard: Kanban board in a single HTML file (375 pts)]]></title>
            <link>https://github.com/apankrat/nullboard</link>
            <guid>42461688</guid>
            <pubDate>Thu, 19 Dec 2024 14:29:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/apankrat/nullboard">https://github.com/apankrat/nullboard</a>, See on <a href="https://news.ycombinator.com/item?id=42461688">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Nullboard</h2><a id="user-content-nullboard" aria-label="Permalink: Nullboard" href="#nullboard"></a></p>
<p dir="auto">Nullboard is a minimalist take on a kanban board / a task list manager, designed to be compact, readable and quick in use.</p>
<p dir="auto"><a href="https://nullboard.io/preview" rel="nofollow">https://nullboard.io/preview</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-example-alt.png"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-example-alt.png" alt="Nullboard"></a></p>
<p dir="auto">The name also happens to abbreviate to <a href="https://en.wikipedia.org/wiki/Nota_bene" rel="nofollow">NB</a>, which I think is a nice touch.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dead simple</h2><a id="user-content-dead-simple" aria-label="Permalink: Dead simple" href="#dead-simple"></a></p>
<ul dir="auto">
<li>Single-page web app - just one HTML file, an ancient jQuery package and a webfont pack.</li>
<li>Can be used completely offline. In fact, it's written exactly with this use in mind.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Locally stored</h2><a id="user-content-locally-stored" aria-label="Permalink: Locally stored" href="#locally-stored"></a></p>
<ul dir="auto">
<li>All data is stored locally, for now using <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" rel="nofollow">localStorage</a>.</li>
<li>The data can be exported to- or imported from a plain text file in a simple JSON format.</li>
<li>The data can also be automatically backed up to a local disk with the help of:
<ul dir="auto">
<li><a href="https://nullboard.io/backups" rel="nofollow">Nullboard Agent</a> - a native Windows app</li>
<li><a href="https://github.com/justinpchang/nullboard-agent-express">Nullboard Agent Express Port</a> - an express.js-based portable app</li>
<li><a href="https://github.com/luismedel/nbagent">nbagent</a> - a version for Unix systems, in Python</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Beta</h2><a id="user-content-beta" aria-label="Permalink: Beta" href="#beta"></a></p>
<p dir="auto">Still very much in beta. Caveat emptor and all that.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">UI &amp; UX</h2><a id="user-content-ui--ux" aria-label="Permalink: UI &amp; UX" href="#ui--ux"></a></p>
<p dir="auto">The whole thing is largely about making it convenient to use.</p>
<p dir="auto">Everything is editable in place, all changes are saved automatically and last 50 revisions are kept for undo/redo:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-inplace-editing.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-inplace-editing.gif" alt="In-place editing" data-animated-image=""></a></p>
<p dir="auto">New notes can be quickly added directly where they are needed, e.g. before or after existing notes:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-ctrl-add-note.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-ctrl-add-note.gif" alt="Ctrl-add note" data-animated-image=""></a></p>
<p dir="auto">Notes can also be dragged around, including to and from other lists:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-drag-n-drop.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-drag-n-drop.gif" alt="Drag-n-drop" data-animated-image=""></a></p>
<p dir="auto">Nearly all controls are hidden by default to reduce visual clutter to its minimum:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-hidden-controls.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-hidden-controls.gif" alt="Hidden controls" data-animated-image=""></a></p>
<p dir="auto">Longer notes can be collapsed to show just the first line, for even more compact view of the board:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-collapsed-notes.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-collapsed-notes.gif" alt="Collapsed notes" data-animated-image=""></a></p>
<p dir="auto">The default font is <a href="https://tribby.com/fonts/barlow/" rel="nofollow">Barlow</a> - it's both narrow <em>and</em> still very legible. Absolutely fantastic design!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/barlow-specimen.png"><img src="https://github.com/apankrat/nullboard/raw/master/images/barlow-specimen.png" alt="Barlow speciment"></a></p>
<p dir="auto">Notes can also be set to look a bit different. This is useful for partitioning lists into sections:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-raw-notes.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-raw-notes.gif" alt="Raw notes" data-animated-image=""></a></p>
<p dir="auto">Links starting with https:// and http:// are recognized. They will "pulse" on mouse hover and can be opened via the right-click menu.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-links-on-hover.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-links-on-hover.gif" alt="Links on hover" data-animated-image=""></a></p>
<p dir="auto">Pressing CapsLock will highlight all links and make them left-clickable.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-links-reveal.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-links-reveal.gif" alt="Links reveal" data-animated-image=""></a></p>
<p dir="auto">Lists can be moved around as well, though not as flashy as notes:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-list-swap.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-list-swap.gif" alt="List swapping" data-animated-image=""></a></p>
<p dir="auto">The font can be changed; its size and line height can be adjusted:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-ui-preferences.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-ui-preferences.gif" alt="Theme and zoom" data-animated-image=""></a></p>
<p dir="auto">The color theme can be inverted:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-dark-theme.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-dark-theme.gif" alt="Dark theme" data-animated-image=""></a></p>
<p dir="auto">Also:</p>
<ul dir="auto">
<li>Support for multiple boards with near-instant switching</li>
<li>Undo/redo for 50 revisions per board (configurable in the code)</li>
<li>Keyboard shortcuts, including Tab'ing through notes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Caveats</h2><a id="user-content-caveats" aria-label="Permalink: Caveats" href="#caveats"></a></p>
<ul dir="auto">
<li>Written for desktop and keyboard/mouse use</li>
<li>Essentially untested on mobile devices and against tap/touch input</li>
<li>Works in Firefox, tested in Chrome, should work in Safari and may work in Edge (or what it's called now)</li>
<li>Uses localStorage for storing boards/lists/notes, so be careful around <a href="https://stackoverflow.com/questions/9948284/how-persistent-is-localstorage" rel="nofollow">clearing your cache</a></li>
</ul>
<p dir="auto">You spot a bug, file an issue.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dockerized version</h2><a id="user-content-dockerized-version" aria-label="Permalink: Dockerized version" href="#dockerized-version"></a></p>
<p dir="auto">See <a href="https://github.com/rsoper/nullboard">this fork</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Background</h2><a id="user-content-background" aria-label="Permalink: Background" href="#background"></a></p>
<p dir="auto">Nullboard is something that handles ToDo lists in the way that works really well. For <em>me</em> that is.</p>
<p dir="auto">Tried a lot of options, some were almost <em>it</em>, but none was 100%.</p>
<p dir="auto"><strong>Trello</strong> wasn't bad, but never was comfortable with the idea of storing my data in cloud without any actual need.</p>
<p dir="auto"><strong>Wekan</strong> looked promising, but ultimately too heavy and had no offline usage support or a local storage option.</p>
<p dir="auto"><strong>Things</strong> was beautiful, but not the right tool for the job.</p>
<p dir="auto"><strong>Inkscape</strong> - I kid you not - with a laundry list of text items was actually OK, but didn't scale well.</p>
<p dir="auto">Ditto for the plain <strong>text files</strong>.</p>
<p dir="auto">Pieces of <strong>paper</strong> were almost there, but rearranging items can be quite a hassle.</p>
<p dir="auto">So finally got annoyed enough to sit down and write exactly what I wanted.</p>
<p dir="auto">And, voilà, Nullboard came out  =&gt;  <a href="https://nullboard.io/preview" rel="nofollow">https://nullboard.io/preview</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The <a href="https://opensource.org/licenses/BSD-2-Clause/" rel="nofollow">2-clause BSD license</a> with the <a href="https://commonsclause.com/" rel="nofollow">Commons Clause</a>.</p>
<p dir="auto">That is, you can use, change and re-distribute it for as long as you don't try and sell it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Updates</h2><a id="user-content-updates" aria-label="Permalink: Updates" href="#updates"></a></p>
<p dir="auto">Primary feed is through <a href="https://twitter.com/nullboard" rel="nofollow">@nullboard</a> on Twitter.</p>
<p dir="auto">The changelog is here =&gt; <a href="https://nullboard.io/changes" rel="nofollow">https://nullboard.io/changes</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ghost artists on Spotify (142 pts)]]></title>
            <link>https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/</link>
            <guid>42461530</guid>
            <pubDate>Thu, 19 Dec 2024 14:12:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/">https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/</a>, See on <a href="https://news.ycombinator.com/item?id=42461530">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="section-291403-1">
                
                                    <div id="attachment_291405"><p><img aria-describedby="caption-attachment-291405" loading="lazy" decoding="async" src="https://harpers.org/wp-content/uploads/2024/11/CUT-8-1124x632.jpg" alt="" width="1124" height="632" srcset="https://harpers.org/wp-content/uploads/2024/11/CUT-8-1124x632.jpg 1124w, https://harpers.org/wp-content/uploads/2024/11/CUT-8-300x169.jpg 300w, https://harpers.org/wp-content/uploads/2024/11/CUT-8-768x432.jpg 768w, https://harpers.org/wp-content/uploads/2024/11/CUT-8-1536x864.jpg 1536w, https://harpers.org/wp-content/uploads/2024/11/CUT-8.jpg 1920w" sizes="(max-width: 1124px) 100vw, 1124px"></p>
<p id="caption-attachment-291405"><span>Illustrations by Yoshi Sodeoka</span></p>
</div>
<h6><span><a href="https://audm.herokuapp.com/player-embed/?pub=harpers&amp;articleID=ghosts-machine-pelly" target="_blank" rel="noopener">Listen to an audio version of this article.</a></span></h6>
<p>I first heard about ghost artists in the summer of 2017. At the time, I was new to the music-streaming beat. I had been researching the influence of major labels on Spotify playlists since the previous year, and my first report had just been published. Within a few days, the owner of an independent record label in New York dropped me a line to let me know about a mysterious phenomenon that was “in the air” and of growing concern to those in the indie music scene: Spotify, the rumor had it, was filling its most popular playlists with stock music attributed to pseudonymous musicians—variously called ghost or fake artists—presumably in an effort to reduce its royalty payouts. Some even speculated that Spotify might be making the tracks itself. At a time when playlists created by the company were becoming crucial sources of revenue for independent artists and labels, this was a troubling allegation.</p>
<p>At first, it sounded to me like a conspiracy theory. Surely, I thought, these artists were just DIY hustlers trying to game the system. But the tips kept coming. Over the next few months, I received more notes from readers, musicians, and label owners about the so-called fake-artist issue than about anything else. One digital strategist at an independent record label worried that the problem could soon grow more insidious. “So far it’s happening within a genre that mostly affects artists at labels like the one I work for, or Kranky, or Constellation,” the strategist said, referring to two long-running indie labels.<span><sup><span>*</span></sup></span> “But I doubt that it’ll be unique to our corner of the music world for long.”</p>
<p>By July, the story had burst into public view, after a <em>Vulture</em> article resurfaced a year-old item from the trade press claiming that Spotify was filling some of its popular and relaxing mood playlists—such as those for “jazz,” “chill,” and “peaceful piano” music—with cheap fake-artist offerings created by the company. A Spotify spokesperson, in turn, told the music press that these reports were “categorically untrue, full stop”: the company was not creating its own fake-artist tracks. But while Spotify may not have created them, it stopped short of denying that it had added them to its playlists. The spokesperson’s rebuttal only stoked the interest of the media, and by the end of the summer, articles on the matter appeared from NPR and the <em>Guardian, </em>among other outlets. Journalists scrutinized the music of some of the artists they suspected to be fake and speculated about how they had become so popular on Spotify. Before the year was out, the music writer David Turner had used analytics data to illustrate how Spotify’s “Ambient Chill” playlist had largely been wiped of well-known artists like Brian Eno, Bibio, and Jon Hopkins, whose music was replaced by tracks from Epidemic Sound, a Swedish company that offers a subscription-based library of production music—the kind of stock material often used in the background of advertisements, TV programs, and assorted video content.</p>
<p>For years, I referred to the names that would pop up on these playlists simply as “mystery viral artists.” Such artists often had millions of streams on Spotify and pride of place on the company’s own mood-themed playlists, which were compiled by a team of in-house curators. And they often had Spotify’s verified-artist badge. But they were clearly fake. Their “labels” were frequently listed as stock-music companies like Epidemic, and their profiles included generic, possibly AI-generated imagery, often with no artist biographies or links to websites. Google searches came up empty.</p>
<p>In the years following that initial salvo of negative press, other controversies served as useful distractions for Spotify: the company’s 2019 move into podcasting and eventual $250&nbsp;million deal with Joe Rogan, for example, and its 2020 introduction of Discovery Mode, a program through which musicians or labels accept a lower royalty rate in exchange for algorithmic promotion. The fake-artist saga faded into the background, another of Spotify’s unresolved scandals as the company increasingly came under fire and musicians grew more emboldened to speak out against it with each passing year.</p>
<p>Then, in 2022, an investigation by the Swedish daily <em>Dagens Nyheter </em>revived the allegations. By comparing streaming data against documents retrieved from the Swedish copyright collection society STIM, the newspaper revealed that around twenty songwriters were behind the work of more than five hundred “artists,” and that thousands of their tracks were on Spotify and had been streamed millions of times.</p>
<p>Around this time, I decided to dig into the story of Spotify’s ghost artists in earnest, and the following summer, I made a visit to the <em>DN</em> offices in Sweden. The paper’s technology editor, Linus Larsson, showed me the Spotify page of an artist called Ekfat. Since 2019, a handful of tracks had been released under this moniker, mostly via the stock-music company Firefly Entertainment, and appeared on official Spotify playlists like “Lo-Fi House” and “Chill Instrumental Beats.” One of the tracks had more than three million streams; at the time of this writing, the number has surpassed four million. Larsson was amused by the elaborate artist bio, which he read aloud. It described Ekfat as a classically trained Icelandic beat maker who graduated from the “Reykjavik music conservatory,” joined the “legendary Smekkleysa Lo-Fi Rockers crew” in 2017, and released music only on limited-edition cassettes until 2019. “Completely made up,” Larsson said. “This is probably the most absurd example, because they really tried to make him into the coolest music producer that you can find.”</p>
<p>Besides the journalists at <em>DN,</em> no one in Sweden wanted to talk about the fake artists. In Stockholm, I visited the address listed for one of the ghost labels and knocked on the door—no luck. I met someone who knew a guy who maybe ran one of the production companies, but he didn’t want to talk. A local businessman would reveal only that he worked in the “functional music space,” and clammed up as soon as I told him about my investigation.</p>
<p>Even with the new reporting, there was still much missing from the bigger picture: Why, exactly, were the tracks getting added to these hugely popular Spotify playlists? We knew that the ghost artists were linked to certain production companies, and that those companies were pumping out an exorbitant number of tracks, but what was their relationship to Spotify?</p>
<p>For more than a year, I devoted myself to answering these questions. I spoke with former employees, reviewed internal Spotify records and company Slack messages, and interviewed and corresponded with numerous musicians. What I uncovered was an elaborate internal program. Spotify, I discovered, not only has partnerships with a web of production companies, which, as one former employee put it, provide Spotify with “music we benefited from financially,” but also a team of employees working to seed these tracks on playlists across the platform. In doing so, they are effectively working to grow the percentage of total streams of music that is cheaper for the platform. The program’s name: Perfect Fit Content (PFC). The PFC program raises troubling prospects for working musicians. Some face the possibility of losing out on crucial income by having their tracks passed over for playlist placement or replaced in favor of PFC; others, who record PFC music themselves, must often give up control of certain royalty rights that, if a track becomes popular, could be highly lucrative. But it also raises worrying questions for all of us who listen to music. It puts forth an image of a future in which—as streaming services push music further into the background, and normalize anonymous, low-cost playlist filler—the relationship between listener and artist might be severed completely.</p>
<p>How had it come to this? Spotify, after all, did not start out aiming to shape users’ listening behavior. In fact, in the early days, the user’s experience on the platform centered on the search bar. Listeners needed to know what they were looking for. The company’s CEO, Daniel Ek, is said to have been averse to the idea of an overly curated service. When the platform launched in Europe, in 2008, it positioned itself as a way to access music that was “better than piracy,” like a fully stocked iTunes library but accessed over the internet, all of it available via a monthly subscription. The emphasis was on providing entry to “A World of Music,” as an early ad campaign emphasized, with the tagline “Instant, simple and free.” Users could make their own playlists or listen to those made by others.</p>
<p>Like many other tech companies in the twenty-first century, Spotify spent its first decade claiming to disrupt an archaic industry, scaling up as quickly as possible, and attracting venture capitalists to an unproven business model. In its search for growth and profitability, Spotify reinvented itself repeatedly: as a social-networking platform in 2010, as an app marketplace in 2011, and by the end of 2012, as a hub for what it called “music for every moment,” supplying recommendations for specific moods, activities, and times of day. Spotify made its move into curation the next year, hiring a staff of editors to compile in-house playlists. In 2014, the company was increasing its investment in algorithmic personalization technology. This innovation was intended, as Spotify put it, to “level the playing field” for artists by minimizing the power of major labels, radio stations, and other old-school gatekeepers; in their place, it claimed, would be a system that simply rewarded tracks that streamed well. By the mid-2010s, the service was actively recasting itself as a neutral platform, a data-driven meritocracy that was rewriting the rules of the music business with its playlists and algorithms.</p>

                            </div><div id="section-291403-3">
                
                                    <p>In reality, Spotify was subject to the outsized influence of the major-label oligopoly of Sony, Universal, and Warner, which together owned a 17&nbsp;percent stake in the company when it launched. The companies, which controlled roughly 70&nbsp;percent of the market for recorded music, held considerable negotiating power from the start. For these major labels, the rise of Spotify would soon pay off. By the mid-2010s, streaming had cemented itself as the most important source of revenue for the majors, which were raking in cash from Spotify’s millions of paying subscribers after more than a decade of declining revenue. But while Ek’s company was paying labels and publishers a lot of money—some 70&nbsp;percent of its revenue—it had yet to turn a profit itself, something shareholders would soon demand. In theory, Spotify had any number of options: raising subscription rates, cutting costs by downsizing operations, or finding ways to attract new subscribers.</p>
<p>According to a source close to the company, Spotify’s own internal research showed that many users were not coming to the platform to listen to specific artists or albums; they just needed something to serve as a soundtrack for their days, like a study playlist or maybe a dinner soundtrack. In the lean-back listening environment that streaming had helped champion, listeners often weren’t even aware of what song or artist they were hearing. As a result, the thinking seemed to be: Why pay full-price royalties if users were only half listening? It was likely from this reasoning that the Perfect Fit Content program was created.</p>
<p>After at least a year of piloting, PFC was presented to Spotify editors in 2017 as one of the company’s new bets to achieve profitability. According to a former employee, just a few months later, a new column appeared on the dashboard editors used to monitor internal playlists. The dashboard was where editors could view various stats: plays, likes, skip rates, saves. And now, right at the top of the page, editors could see how successfully each playlist embraced “music commissioned to fit a certain playlist/mood with improved margins,” as PFC was described internally.</p>
<p>Editors were soon encouraged by higher-ups, with increasing persistence, to add PFC songs to certain playlists. “Initially, they would give us links to stuff, like, ‘Oh, it’s no pressure for you to add it, but if you can, that would be great,’ ” the former employee recalled. “Then it became more aggressive, like, ‘Oh, this is the style of music in your playlist, if you try it and it works, then why not?’ ”</p>
<p>Another former playlist editor told me that employees were concerned that the company wasn’t being transparent with users about the origin of this material. Still another former editor told me that he didn’t know where the music was coming from, though he was aware that adding it to his playlists was important for the company. “Maybe I should have asked more questions,” he told me, “but I was just kind of like, ‘Okay, how do I mix this music with artists that I like and not have them stand out?’ ”</p>
<p>Some employees felt that those responsible for pushing the PFC strategy did not understand the musical traditions that were being affected by it. These higher-ups were well versed in the business of major-label hitmaking, but not necessarily in the cultures or histories of genres like jazz, classical, ambient, and lo-fi hip-hop—music that tended to do well on playlists for relaxing, sleeping, or focusing. One of my sources told me that the attitude was “if the metrics went up, then let’s just keep replacing more and more, because if the user doesn’t notice, then it’s fine.”</p>
<p>Trying to share concerns about the program internally was challenging. “Some of us really didn’t feel good about what was happening,” a former employee told me. “We didn’t like that it was these two guys that normally write pop songs replacing swaths of artists across the board. It’s just not fair. But it was like trying to stop a train that was already leaving.”</p>
<p>Eventually, it became clear internally that many of the playlist editors—whom Spotify had touted in the press as music lovers with encyclopedic knowledge—were uninterested in participating in the scheme. The company started to bring on editors who seemed less bothered by the PFC model. These new editors looked after mood and activity playlists, and worked on playlists and programs that other editors didn’t want to take part in anymore. (Spotify denies that staffers were encouraged to add PFC to playlists, and that playlist editors were discontented with the program.) By 2023, several hundred playlists were being monitored by the team responsible for PFC. Over 150 of these, including “Ambient Relaxation,” “Deep Focus,” “100% Lounge,” “Bossa Nova Dinner,” “Cocktail Jazz,” “Deep Sleep,” “Morning Stretch,” and “Detox,” were nearly entirely made up of PFC.</p>
<p>Spotify managers defended PFC to staff by claiming that the tracks were being used only for background music, so listeners wouldn’t know the difference, and that there was a low supply of music for these types of playlists anyway. The first part of this argument was true: a statistical breakdown of the PFC rollout, shared over Slack, showed how PFC “streamshare”—Spotify’s term for percentage of total streams—was distributed across playlists for different activities, such as sleep, mindfulness, unwinding, lounging, meditation, calming down, concentrating, or studying. But the other half of management’s justification was harder to prove. Music in instrumental genres such as ambient, classical, electronic, jazz, and lo-fi beats was in plentiful supply across Spotify—more than enough to draw on to populate its playlists without requiring the addition of PFC.</p>
<p>PFC eventually began to be handled by a small team called Strategic Programming, or StraP for short, which in 2023 had ten members. Though Spotify denies that it is trying to increase PFC’s streamshare, internal Slack messages show members of the StraP team analyzing quarter-by-quarter growth and discussing how to increase the number of PFC streams. When <em>Harper’s Magazine</em> followed up with the company to ask why internal documents showed the team tracking the percentage of PFC content across hundreds of playlists if not to attend to the growth of PFC content on the platform, a spokesperson for the company said, “Spotify is data driven in all that we do.” And though Spotify told <em>Harper’s</em> that it does not “promise placement on any playlists” in any of its licensing agreements, when new PFC providers were brought on board, senior staffers would notify editors to attend to their offerings. “We’ve now onboarded Myndstream,” a StraP staffer wrote in one message. “Please prioritize adding from these as this is a new partner so they can get some live feedback.” That employee shared with the rest of the team a series of lists made by the new partner, sorting their tracks into collections titled “ambient piano covers,” “psilocybin (relax and breathe)” and “lofi originals.” A couple of months later, another team member posted a similar message:</p>
<blockquote>
<p>Our new partner Slumber Group LLC is ready for their first releases. Make sure to have them set up in your Reverb filters for more snoozy content :)</p>
</blockquote>
<p>(“Reverb” refers to an internal tool for managing tracks and playlists.)</p>
<p>The roster of PFC providers discussed internally was long. For years, Firefly Entertainment and Epidemic Sound dominated media speculation about Spotify’s playlist practices. But internal messages revealed they were just two among at least a dozen PFC providers, including companies with names like Hush Hush LLC and Catfarm Music AB. There was Queenstreet Content AB, the production company of the Swedish pop songwriting duo Andreas Romdhane and Josef Svedlund, who were also behind another mood-music streaming operation, Audiowell, which partnered with megaproducer Max Martin (who has shaped the sound of global pop music since the Nineties) and private-equity firm Altor. In 2022, the Swedish press reported that Queenstreet was bringing in more than $10&nbsp;million per year. Another provider was Industria Works, a subsidiary of which is Mood Works, a distributor whose website shows that it also streams tracks on Apple Music and Amazon Music. Spotify was perhaps not alone in promoting cheap stock music.</p>
<p>In a Slack channel dedicated to discussing the ethics of streaming, Spotify’s own employees debated the fairness of the PFC program. “I wonder how much these plays ‘steal’ from actual ’normal’ artists,” one employee asked. And yet as far as the public was concerned, the company had gone to great lengths to keep the initiative under wraps. Perhaps Spotify understood the stakes—that when it removed real classical, jazz, and ambient artists from popular playlists and replaced them with low-budget stock muzak, it was steamrolling real music cultures, actual traditions within which artists were trying to make a living. Or perhaps the company was aware that this project to cheapen music contradicted so many of the ideals upon which its brand had been built. Spotify had long marketed itself as the ultimate platform for discovery—and who was going to get excited about “discovering” a bunch of stock music? Artists had been sold the idea that streaming was the ultimate meritocracy—that the best would rise to the top because users voted by listening. But the PFC program undermined all this. PFC was not the only way in which Spotify deliberately and covertly manipulated programming to favor content that improved its margins, but it was the most immediately galling. Nor was the problem simply a matter of “authenticity” in music. It was a matter of survival for actual artists, of musicians having the ability to earn a living on one of the largest platforms for music. PFC was irrefutable proof that Spotify rigged its system against musicians who knew their worth.</p>
<p>In 2023, on a summer afternoon in Brooklyn, I met up with a jazz musician in a park. We talked about the recent shows we had seen, our favorite and least favorite venues, the respective pockets of the New York music scene we moved through. He spoke passionately about his friends’ music and his most cherished performance spaces. But our conversation soon turned to something else: his most recent side gig, making jazz for a company that was described, in one internal Spotify document, as one of its “high margin (PFC) licensors.”</p>
<p>He wasn’t familiar with the term PFC, but his tracks have been given prominent placement on some of Spotify’s most PFC-saturated chill-jazz playlists. Like many musicians in his position, there was a lot he didn’t know about the arrangement. He had signed a one-year contract to make anonymous tracks for a production company that would distribute them on Spotify. He called it his “Spotify playlist gig,” a commitment he also called “brain-numbing” and “pretty much completely joyless.” And while he didn’t quite understand the details of his employer’s relationship with Spotify, he knew that many of his tracks had landed on playlists with millions of followers. “I just record stuff and submit it, and I’m not really sure what happens from there,” he told me.</p>
<p>As he described it, making new PFC starts with studying old PFC: it’s a feedback loop of playlist fodder imitated over and over again. A typical session starts with a production company sending along links to target playlists as reference points. His task is to then chart out new songs that could stream well on these playlists. “Honestly, for most of this stuff, I just write out charts while lying on my back on the couch,” he explained. “And then once we have a critical mass, they organize a session and we play them. And it’s usually just like, one take, one take, one take, one take. You knock out like fifteen in an hour or two.” With the jazz musician’s particular group, the session typically includes a pianist, a bassist, and a drummer. An engineer from the studio will be there, and usually someone from the PFC partner company will come along, too—acting as a producer, giving light feedback, at times inching the musicians in a more playlist-friendly direction. The most common feedback: play simpler. “That’s definitely the thing: nothing that could be even remotely challenging or offensive, really,” the musician told me. “The goal, for sure, is to be as milquetoast as possible.”</p>
<p>This wasn’t a scam artist with a master plan to steal prime playlist real estate. He was just someone who, like other working musicians today, was trying to cobble together a living. “There are so many things in music that you treat as grunt work,” he said. “This kind of felt like the same category as wedding gigs or corporate gigs. It’s made very explicit on Spotify that these are background playlists, so it didn’t necessarily strike me as any different from that. . . . You’re just a piece of the furniture.”</p>
<p>The jazz musician asked me not to identify the name of the company he worked for; he didn’t want to risk losing the gig. Throughout our conversation, though, he repeatedly emphasized his reservations about the system, calling it “shameful”—even without knowledge of the hard details of the program, he understood that his work was creating value for a company, and a system, with little regard for the well-being of independent artists. In general, the musicians working with PFC companies I spoke with were highly critical of the arrangement. One musician who made electronic compositions for Epidemic Sound told me about how “the creative process was more about replicating playlist styles and vibes than looking inward.” Another musician, a professional audio engineer who turned out ambient recordings for a different PFC partner, told me that he stopped making this type of stock music because “it felt unethical, like some kind of money-laundering scheme.”</p>
<p>According to a former Spotify employee, the managers of the PFC program justified its existence internally in part by claiming that the participating musicians were true artists like any other—they had simply chosen to monetize their creative work in a different way. (A Spotify spokesperson confirmed this, pointing out that “music that an artist creates but publishes under a band name or a pseudonym has been popular across mediums for decades.”) But the PFC musicians I spoke to told a different story. They did not consider their work for these companies to be part of their artistic output. One composer I spoke with compared it to the use of soundalikes in the advertising business, when a production company asks an artist to write and record a cheaper version of a popular song.</p>
<p>“It’s kind of like taking a standardized test, where there’s a range of right answers and a far larger range of wrong answers,” the jazz musician said. “It feels like someone is giving you a prompt or a question, and you’re just answering it, whether it’s actually your conviction or not. Nobody I know would ever go into the studio and record music this way.”</p>
<p>All this points to a disconcerting context collapse for musicians—to the way in which being an artist and the business of background music are increasingly entwined, and the distinctions of purpose increasingly blurred. PFC is in some ways similar to production music, audio made in bulk on a work-for-hire basis, which is often fully owned by production companies that make it easily available to license for ads, in-store soundtracks, film scores, and the like. In fact, PFC seems to encompass repurposed production-music catalogues, but it also appears to include work commissioned more directly for mood playlists, as suggested by one the Spotify StraP team’s discussion of an ongoing “wishlist for PFC partners” on Slack.</p>
<p>Production music is booming today thanks to a digital environment in which a growing share of internet traffic comes from video and audio. Generations of YouTube and TikTok influencers strive to avoid the complicated world of sync licensing (short for music synchronization licensing, the process of acquiring rights to play music in the background of audiovisual content) and the possibility of content being removed for copyright violations. Companies like Epidemic Sound purport to solve this problem, claiming to simplify sync licensing by offering a library of pre-cleared, royalty-free production music for a monthly or yearly subscription fee. They also provide in-store music for retail outlets, in the tradition of muzak.</p>
<p>As Epidemic grew, it started to behave like a record label. “Similar to any label, we were doing licenses with DSPs,” one former employee told me, referring to digital service providers such as Amazon Music, Apple Music, and Spotify. “Epidemic’s content is primarily being made for sync, so it’s primarily non-lyrical. This includes ambient content, lo-fi beats, classical compositions. Things a YouTube creator might put over a landscape video. And this content tends to also do well in playlists such as ‘Deep Focus,’ for example, on Spotify.”</p>
<p>Unsurprisingly, one of the first venture-capital firms to invest in Spotify, Creandum, also invested early in Epidemic. In 2021, Epidemic raised $450&nbsp;million from Blackstone Growth and EQT Growth, increasing the company’s valuation to $1.4&nbsp;billion. It is striking, even now, that these venture capitalists saw so much potential for profit in background music. “This is, at the end of the day, a data business,” the global head of Blackstone Growth said at the time. The Spotify–Epidemic corporate synergies reflect how streaming has flattened differences across music. The industry has contributed to a massive wave of consolidation: different music-adjacent industries and ecosystems that previously operated in isolation all suddenly depend on royalties from the same platforms. And it has led to the blurring of aesthetic boundaries as well. The musician who made tracks for Epidemic Sound and ended up on many PFC-heavy playlists told me that he was required to release the tracks under his real artist name, on his preexisting Spotify page. “My profile on Spotify picked up a lot once my Epidemic compositions found their way onto playlists,” he said. “The sad thing is that rarely results in playlist listeners digging deeper into the artist of a track they hear or like.”</p>
<p>The Epidemic artist explained how each month started with the company presenting a new playlist it had created. “You are then to compose however many tracks you and Epidemic agree on, drawing ‘inspiration’ from said playlist,” he told me. “Ninety-eight percent of the time, these playlists had very little to do with my own artistic vision and vibe but, rather, focused on what Epidemic felt its subscribers were after. So essentially, I was composing bespoke music. This annoyed the fuck out of me.”</p>
<p>But at the end of the day, he said, it was still a paycheck: “I did it because I needed a job real bad and the money was better than any money I could make from even successful indie labels, many of which I worked with,” he told me. “Honestly, I had no idea which tracks I made would end up doing well. . . . Every track I made for Epidemic was based on their curated playlist.”</p>
<p>While it’s true that the business of sync licensing can be complicated, musicians from the Ivors Academy, a British advocacy organization for songwriters and composers, say that the “frictions” companies like Epidemic seek to smooth out are actually hard-won industry protections. “Simplicity is overrated when it comes to your rights,” Kevin Sargent, a composer of television and film scores, told me. In claiming to “simplify” the mechanics of the background-music industry, Epidemic and its peers have championed a system of flat-fee buyouts. The Epidemic composer I spoke with said that his payments were routinely around $1,700, and that the tracks were purchased by Epidemic as a complete buyout. “They own the master,” he told me. Epidemic’s selling point is that the music is royalty-free for its own subscribers, but it does collect royalties from streaming services; these it splits with artists fifty-fifty. But in the case of the musician I spoke with, the streaming royalty checks from tracks produced for Epidemic Sound were smaller than those for his non-Epidemic tracks, and artists are not entitled to certain other royalties: to refine its exploitative model, Epidemic does not work with artists who belong to performance-rights organizations, the groups that collect royalties for songwriters when their compositions are played on TV or radio, online, or even in public. “It’s essentially a race to the bottom,” the production-music composer Mat Andasun told me.</p>
<p>The musician who made ambient tracks for one of the PFC partner companies told me about power imbalances he experienced on the job. “There was a fee paid up front,” he explained to me. “It was like, ‘We’ll give you a couple hundred bucks. You don’t own the master. We’ll give you a percentage of publishing.’ And it was basically pitched to me that I could do as many of these tracks as I wanted.” In the end, he recorded only a handful of tracks for the company, released under different aliases, and made a couple thousand dollars. The money seemed pretty good at first, since each track took only a few hours. But as a couple of the tracks took off on Spotify, one garnering millions upon millions of streams, he started to see how unfair the deal was in the long term: the tracks were generating far more revenue for Spotify and the ghost label than he would ever see, because he owned no part of the master and none of the publishing rights. “I’m selling my intellectual property for essentially peanuts,” he said.</p>
<p>He quickly succumbed to the feeling that something was wrong with the arrangement. “I’m aware that the master recording is generating much more than I’m getting. Maybe that’s just business, but it’s so related to being able to get that amount of plays. Whoever can actually get you generating that amount of plays, they hold the power,” the musician told me.</p>
<p>“It feels pretty weird,” he continued. “My name is not on it. There’s no credit. There’s not a label on it. It’s really like there’s nothing—no composer information. There’s a layer of smoke screen. They’re not trying to have it be traceable.”</p>
<p>A model in which the imperative is simply to keep listeners around, whether they’re paying attention or not, distorts our very understanding of music’s purpose. This treatment of music as nothing but background sounds—as interchangeable tracks of generic, vibe-tagged playlist fodder—is at the heart of how music has been devalued in the streaming era. It is in the financial interest of streaming services to discourage a critical audio culture among users, to continue eroding connections between artists and listeners, so as to more easily slip discounted stock music through the cracks, improving their profit margins in the process. It’s not hard to imagine a future in which the continued fraying of these connections erodes the role of the artist altogether, laying the groundwork for users to accept music made using generative-AI software.</p>
<p>“I’m sure it’s something that AI could do now, which is kind of scary,” one of the former Spotify playlist editors told me, referring to the potential for AI tools to pump out audio much like the PFC tracks. The PFC partner companies themselves understand this. According to Epidemic Sound’s own public-facing materials, the company already plans to allow its music writers to use AI tools to generate tracks. In its 2023 annual report, Epidemic explained that its ownership of the world’s largest catalogue of “restriction-free” tracks made it “one of the best-positioned” companies to allow creators to harness “AI’s capabilities.” Even as it promoted the role that AI would play in its business, Epidemic emphasized the human nature of its approach. “Our promise to our artists is that technology will never replace them,” read a post on Epidemic’s corporate blog. But the ceaseless churn of quickly generated ghost-artist tracks already seems poised to do just that.</p>
<p>Spotify, for its part, has been open about its willingness to allow AI music on the platform. During a 2023 conference call, Daniel Ek noted that the boom in AI-generated content could be “great culturally” and allow Spotify to “grow engagement and revenue.” That’s an unsurprising position for a company that has long prided itself on its machine-learning systems, which power many of its recommendations, and has framed its product evolution as a story of AI transformation. These automated recommendations are, in part, how Spotify was able to usher in another of its most contentious cost-saving initiatives: Discovery Mode, its payola-like program whereby artists accept a lower royalty rate in exchange for algorithmic promotion. Like the PFC program, tracks enrolled in Discovery Mode are unmarked on Spotify; both schemes allow the service to push discount content to users without their knowledge. Discovery Mode has drawn scrutiny from artists, organizers, and lawmakers, which highlights another reason the company may ultimately prefer the details of its ghost-artist program to remain obscure. After all, protests for higher royalty rates can’t happen if playlists are filled with artists who remain in the shadows.</p>

                            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How do you do, fellow web developers? A growing disconnect (159 pts)]]></title>
            <link>https://rakhim.exotext.com/web-developers-a-growing-disconnect</link>
            <guid>42461264</guid>
            <pubDate>Thu, 19 Dec 2024 13:39:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/web-developers-a-growing-disconnect">https://rakhim.exotext.com/web-developers-a-growing-disconnect</a>, See on <a href="https://news.ycombinator.com/item?id=42461264">Hacker News</a></p>
Couldn't get https://rakhim.exotext.com/web-developers-a-growing-disconnect: Error: timeout of 10000ms exceeded]]></description>
        </item>
    </channel>
</rss>