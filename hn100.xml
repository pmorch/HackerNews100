<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 25 Jan 2025 13:30:11 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[First Look: Loops, by Pixelfed – Decentralised TikTok Competitor (2024) (124 pts)]]></title>
            <link>https://wedistribute.org/2024/11/loops-early-look/</link>
            <guid>42820053</guid>
            <pubDate>Sat, 25 Jan 2025 07:07:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wedistribute.org/2024/11/loops-early-look/">https://wedistribute.org/2024/11/loops-early-look/</a>, See on <a href="https://news.ycombinator.com/item?id=42820053">Hacker News</a></p>
Couldn't get https://wedistribute.org/2024/11/loops-early-look/: Error: getaddrinfo EBUSY wedistribute.org]]></description>
        </item>
        <item>
            <title><![CDATA[TinyZero (115 pts)]]></title>
            <link>https://github.com/Jiayi-Pan/TinyZero</link>
            <guid>42819262</guid>
            <pubDate>Sat, 25 Jan 2025 03:38:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Jiayi-Pan/TinyZero">https://github.com/Jiayi-Pan/TinyZero</a>, See on <a href="https://news.ycombinator.com/item?id=42819262">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">TinyZero</h2><a id="user-content-tinyzero" aria-label="Permalink: TinyZero" href="#tinyzero"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Jiayi-Pan/TinyZero/blob/main/cover.png"><img src="https://github.com/Jiayi-Pan/TinyZero/raw/main/cover.png" alt="image"></a></p>
<p dir="auto">TinyZero is a reproduction of <a href="https://github.com/deepseek-ai/DeepSeek-R1">DeepSeek R1 Zero</a>. We built upon <a href="https://github.com/volcengine/verl">veRL</a>.</p>
<p dir="auto">Through RL, the 3B base LM develops self-verification and search abilities all on its own</p>
<p dir="auto">You can experience the Ahah moment yourself for &lt; $30</p>
<p dir="auto">Twitter thread: <a href="https://x.com/jiayi_pirate/status/1882839370505621655" rel="nofollow">https://x.com/jiayi_pirate/status/1882839370505621655</a></p>
<p dir="auto">Full experiment log: <a href="https://wandb.ai/jiayipan/TinyZero" rel="nofollow">https://wandb.ai/jiayipan/TinyZero</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Instalation</h2><a id="user-content-instalation" aria-label="Permalink: Instalation" href="#instalation"></a></p>
<div data-snippet-clipboard-copy-content="conda create -n zero python=3.9
# install torch [or you can skip this step and let vllm to install the correct version for you]
pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu121
# install vllm
pip3 install vllm==0.6.3 # or you can install 0.5.4, 0.4.2 and 0.3.1
pip3 install ray

# verl
pip install -e .

# flash attention 2
pip3 install flash-attn --no-build-isolation
# quality of life
pip install wandb IPython matplotlib"><pre><code>conda create -n zero python=3.9
# install torch [or you can skip this step and let vllm to install the correct version for you]
pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu121
# install vllm
pip3 install vllm==0.6.3 # or you can install 0.5.4, 0.4.2 and 0.3.1
pip3 install ray

# verl
pip install -e .

# flash attention 2
pip3 install flash-attn --no-build-isolation
# quality of life
pip install wandb IPython matplotlib
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Countdown task</h2><a id="user-content-countdown-task" aria-label="Permalink: Countdown task" href="#countdown-task"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Run Training</h3><a id="user-content-run-training" aria-label="Permalink: Run Training" href="#run-training"></a></p>

<p dir="auto"><strong>Data Preparation</strong></p>
<div data-snippet-clipboard-copy-content="python ./examples/data_preprocess/countdown.py --local_dir {path_to_your_dataset}"><pre><code>python ./examples/data_preprocess/countdown.py --local_dir {path_to_your_dataset}
</code></pre></div>
<p dir="auto"><strong>Single GPU</strong>
Works for model &lt;= 1.5B. For Qwen2.5-0.5B base, we know it fails to learn reasoning.</p>
<div data-snippet-clipboard-copy-content="export N_GPUS=1
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=1
export EXPERIMENT_NAME=countdown-qwen2.5-0.5b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh"><pre><code>export N_GPUS=1
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=1
export EXPERIMENT_NAME=countdown-qwen2.5-0.5b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh
</code></pre></div>
<p dir="auto"><strong>3B+ model</strong>
In this case, the base model is able to develop sophisticated reasoning skills.</p>
<div data-snippet-clipboard-copy-content="export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh"><pre><code>export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Instruct Abaltion</h3><a id="user-content-instruct-abaltion" aria-label="Permalink: Instruct Abaltion" href="#instruct-abaltion"></a></p>
<p dir="auto">We experiment with QWen-2.5-3B Instruct too.
<strong>Data Preparation</strong>
To follow chat template, we need to reprocess the data:</p>
<div data-snippet-clipboard-copy-content="conda activate zero
python examples/data_preprocess/countdown.py --template_type=qwen-instruct --local_dir={path_to_your_dataset}"><pre><code>conda activate zero
python examples/data_preprocess/countdown.py --template_type=qwen-instruct --local_dir={path_to_your_dataset}
</code></pre></div>
<p dir="auto"><strong>Training</strong></p>
<div data-snippet-clipboard-copy-content="export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b-instruct
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh"><pre><code>export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b-instruct
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledge</h2><a id="user-content-acknowledge" aria-label="Permalink: Acknowledge" href="#acknowledge"></a></p>
<ul dir="auto">
<li>We run our experiments based on <a href="https://github.com/volcengine/verl">veRL</a>.</li>
<li>We use Qwen2.5 series base model <a href="https://github.com/QwenLM/Qwen2.5">Qwen2.5</a>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Citation</h2><a id="user-content-citation" aria-label="Permalink: Citation" href="#citation"></a></p>
<div data-snippet-clipboard-copy-content="@misc{tinyzero,
author       = {Jiayi Pan and Junjie Zhang and Xingyao Wang and Lifan Yuan},
title        = {TinyZero},
howpublished = {[https://github.com/Jiayi-Pan/TinyZero](https://github.com/Jiayi-Pan/TinyZero)},
note         = {Accessed: 2025-01-24},
year         = {2025}
}"><pre><code>@misc{tinyzero,
author       = {Jiayi Pan and Junjie Zhang and Xingyao Wang and Lifan Yuan},
title        = {TinyZero},
howpublished = {[https://github.com/Jiayi-Pan/TinyZero](https://github.com/Jiayi-Pan/TinyZero)},
note         = {Accessed: 2025-01-24},
year         = {2025}
}
</code></pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[French police free kidnapped Ledger executive (150 pts)]]></title>
            <link>https://moneycheck.com/french-police-free-kidnapped-ledger-executive-after-day-long-ordeal/</link>
            <guid>42819018</guid>
            <pubDate>Sat, 25 Jan 2025 02:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://moneycheck.com/french-police-free-kidnapped-ledger-executive-after-day-long-ordeal/">https://moneycheck.com/french-police-free-kidnapped-ledger-executive-after-day-long-ordeal/</a>, See on <a href="https://news.ycombinator.com/item?id=42819018">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-100590"><div><h2>TLDR</h2><ul><li>French cryptocurrency executive David Balland endured a violent kidnapping from his home with his wife on January 21, 2025</li><li>Kidnappers demanded cryptocurrency payment and reportedly mutilated Balland during the 24-hour ordeal</li><li>French National Gendarmerie successfully rescued both victims through a tactical operation</li><li>Ledger, valued at 1.3 billion euros, is a leading manufacturer of cryptocurrency security devices</li><li>The incident happened as Bitcoin trades near record highs around $109,000</li></ul><hr><p>French technology executive David Balland, who helped create the cryptocurrency security company Ledger, <a href="https://decrypt.co/302430/ledger-co-founder-kidnapped-crypto-ransom">has survived a brutal kidnapping attempt</a> that ended with a police rescue operation on January 22, 2025, according to statements from the Paris prosecutor’s office.</p><p>The attackers struck in darkness, forcing their way into Balland’s residence in the Cher region of central France during the early morning hours of January 21. Both Balland and his wife were taken from their home and transported to a nearby location where they were held against their will.</p><p><a href="https://www.leparisien.fr/faits-divers/le-cofondateur-de-lentreprise-de-cryptomonnaies-ledger-enleve-vaste-operation-de-la-gendarmerie-en-cours-23-01-2025-SJPOOPUFFNGBDMIBZT5ON2MUBQ.php">French newspaper Le Parisien reports</a> the kidnappers employed extreme violence during the ordeal, including cutting off one of Balland’s fingers. Sources say the severed digit was sent to Balland’s associates as proof of their intentions and to reinforce their demands for cryptocurrency payment.</p><p>The victims’ location remained unknown for nearly 24 hours as family members and business associates grappled with ransom demands. The exact amount of cryptocurrency requested has not been disclosed by authorities, who have also not confirmed whether any payment was made.</p><p>France’s National Gendarmerie mobilized its specialized intervention group to handle the crisis. The tactical team successfully stormed the location where Balland and his wife were being held, freeing both victims without any reported casualties during the operation.</p><p>Medical teams immediately transported Balland to receive treatment for his injuries following the rescue. The Paris prosecutor’s office has confirmed that an active investigation continues as they work to identify and capture all persons involved in the kidnapping.</p><p>The news created waves throughout the cryptocurrency industry. Former Binance CEO Changpeng Zhao initially posted about the rumors on social media before deleting his message, citing uncertainty about the developing situation.</p><p>Casa chief technology officer Jameson Lopp also commented on the events, noting that Ledger’s initial silence about the situation had raised red flags within the cryptocurrency security community.</p><p>The kidnapping targeted one of France’s most successful cryptocurrency entrepreneurs. Balland co-founded Ledger in Paris in 2014, helping build it into a global leader in digital asset security hardware. The company produces specialized devices called hardware wallets that store cryptocurrency access keys offline to protect them from hackers.</p><p>From 2019 to 2021, Balland served as director of Ledger’s manufacturing facility in Vierzon, France. Under his leadership, the company has sold more than seven million hardware wallets worldwide, maintaining a perfect security record with no successful breaches of their devices.</p><p>Recent fundraising has demonstrated Ledger’s continued growth, with the company securing 100 million euros ($109 million) in 2023. This investment brought Ledger’s total valuation to 1.3 billion euros ($1.42 billion). The company now employs around 700 people across its operations.</p><p>Pascal Gauthier, who leads Ledger as chairman and CEO, released a statement expressing gratitude for Balland’s safe return. “We are deeply relieved that David and his wife have been released and are now safe,” Gauthier said, while also praising law enforcement’s handling of the crisis.</p><blockquote data-width="550" data-dnt="true"><p lang="fr" dir="ltr">🇫🇷 Nous sommes profondément soulagés d’apprendre la libération de David et sa femme et de les savoir sains et saufs. J’ai pris contact avec David, et nos pensées vont avec lui et sa famille. Nous partageons aussi l’émotion des membres de notre équipe, et en particulier de celles…</p><p>— Pascal Gauthier @Ledger (@_pgauthier) <a href="https://twitter.com/_pgauthier/status/1882505648161583609?ref_src=twsrc%5Etfw">January 23, 2025</a></p></blockquote><p>The attack comes at a time when cryptocurrency-related crime continues to rise. Data from blockchain analysis firm Chainalysis shows ransomware gangs extracted over $1.1 billion in cryptocurrency payments during 2023 alone.</p><p>The timing also coincides with a surge in cryptocurrency values, as Bitcoin trades near $109,000 – its highest level ever according to CoinGecko data. These elevated prices may make industry executives more attractive targets for criminal enterprises.</p><p>Beyond its core Nano series of hardware wallets, Ledger has expanded into premium products like the Ledger Flex and Ledger Stax, which feature touchscreen interfaces. These devices cater to users seeking both security and ease of use in managing their digital assets.</p><p>The incident has prompted renewed focus on executive security within the cryptocurrency industry. As digital assets become more valuable, companies may need to increase protection for key personnel who could be targeted by criminals.</p><p><span></span> <span></span> <span>8</span></p><div><h2>Stay Ahead of the Market with Benzinga Pro!</h2><p> Want to trade like a pro? Benzinga Pro gives you the edge you need in today's fast-paced markets. Get real-time news, exclusive insights, and powerful tools trusted by professional traders:<img loading="lazy" src="https://moneycheck.com/wp-content/uploads/2024/10/bz.jpg" alt="" width="288" height="241"></p><ul><li>Breaking market-moving stories before they hit mainstream media</li><li>Live audio squawk for hands-free market updates</li><li>Advanced stock scanner to spot promising trades</li><li>Expert trade ideas and on-demand support</li></ul><p> Don't let opportunities slip away. Start your free trial of Benzinga Pro today and take your trading to the next level!</p><p><a href="https://moneycheck.com/out/benzingapro" target="_blank">Visit Benzinga Pro</a></p></div></div> </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Caltrain's Electric Fleet More Efficient Than Expected (289 pts)]]></title>
            <link>https://www.caltrain.com/news/caltrains-electric-fleet-more-efficient-expected</link>
            <guid>42818692</guid>
            <pubDate>Sat, 25 Jan 2025 01:53:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.caltrain.com/news/caltrains-electric-fleet-more-efficient-expected">https://www.caltrain.com/news/caltrains-electric-fleet-more-efficient-expected</a>, See on <a href="https://news.ycombinator.com/item?id=42818692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="¶-3839470"><p><span>Caltrain announced at its monthly Board of Directors meeting that regenerative braking on the new trains is generating and sending back to the electric grid approximately 23% of the energy consumed by the system. The new electric trains are outperforming Caltrain’s original projections, which is welcome news for a public agency that holds sustainability as a core value.&nbsp;</span></p><p><span>Originally estimated to cost approximately $19.5 million annually, Caltrain’s electricity use since the launch of electric service averages 207 MWh on weekdays and 175 MWh on weekends, revising cost estimates to $16.5 million. With the agency expecting approximately $6 million annually in energy credits from the California Air Resources Board’s Low Carbon Fuel Standard Program, the first year of electric service will have lower fuel costs than the previous diesel service. Currently, Caltrain is providing that power to the grid free of charge as there is no legal requirement for the agency to be reimbursed for the energy generated.</span></p><p><span>Regenerative braking is a technology first introduced to electric trains in 1886. They work by driving an electric motor in reverse to recapture energy rather than losing it as heat during braking. Caltrain’s fleet is designed to return that power to the Overhead Contact System (OCS), which feeds it to the nearest traction power facility. From there, it can be used to power other trains on the system or returned to the grid.</span></p><p><span>“Caltrain is running its service on 100% renewable energy and is returning nearly a quarter of that energy to the grid,” said Michelle Bouchard, Caltrain Executive Director. “The new electric fleet is delivering on its promise of state-of-the-art service, living up to our mission of providing sustainable transportation that enhances quality of life for everyone.”</span></p><p><span>###</span></p><p><em><span>About Caltrain: Owned and operated by the Peninsula Corridor Joint Powers Board, Caltrain provides rail service from San Francisco to San Jose, with commute service to Gilroy. Serving the region since 1863, Caltrain is the oldest continually operating rail system west of the Mississippi and the first railroad to convert from diesel to electric power in a generation.&nbsp;</span></em></p><p><em><span>Follow Caltrain on&nbsp;</span></em><a href="https://www.facebook.com/caltrain"><em><span>Facebook</span></em></a><em><span>&nbsp;and&nbsp;</span></em><a href="https://twitter.com/caltrain"><em><span>X</span></em></a><em><span>.&nbsp;&nbsp;&nbsp;&nbsp;</span></em></p><p><em><span>Free translation assistance is available. Para traducción llama al 1.800.660.4287;&nbsp;如需翻譯,請電 1.800.660.4287.</span></em></p><p><span lang="ES-MX">Para traducción llama al 1.800.660.4287;&nbsp;</span><span>如需翻譯</span><span lang="ES-MX">,</span><span>請電</span><span lang="ES-MX"> 1.800.660.4287.</span><span>&nbsp;</span></p><p><span>Media Contact: Dan Lieberman, 650.622.2492</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[File Explorer is merged to Helix editor (168 pts)]]></title>
            <link>https://github.com/helix-editor/helix/pull/11285</link>
            <guid>42818278</guid>
            <pubDate>Sat, 25 Jan 2025 00:28:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/helix-editor/helix/pull/11285">https://github.com/helix-editor/helix/pull/11285</a>, See on <a href="https://news.ycombinator.com/item?id=42818278">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="" data-turbo-frame="" id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
      
  <div id="partial-discussion-header" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE5ODM2MjUyMzkiLCJ0IjoxNzM3NzkzODA0fQ==--9ec89367c1a76cf1709a5e6a5dc1adb732cf6ff2b7e16c9479380f2da3ba581d" data-url="/helix-editor/helix/pull/11285/partials/title?sticky=true" data-channel-event-name="title_updated" data-pull-is-open="false" data-gid="PR_kwDOD__WI852O7gX">

          
<details>
  <summary>
    
    New issue
  </summary>
  <details-dialog aria-label="Sign up for GitHub">
            <div>
  <p>
    <strong>Have a question about this project?</strong> Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
  </p>

  

  <p>By clicking “Sign up for GitHub”, you agree to our <a href="https://docs.github.com/terms" target="_blank">terms of service</a> and
  <a href="https://docs.github.com/privacy" target="_blank">privacy statement</a>. We’ll occasionally send you account related emails.</p>

  <p>
    Already on GitHub?
    <a data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;new issue modal&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/helix-editor/helix/pull/11285&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="388b5313ec1a967a680e2630f4ef72126c7d3b40bb300ce8a19135121d1d8994" href="https://github.com/login?return_to=%2Fhelix-editor%2Fhelix%2Fissues%2Fnew%2Fchoose">Sign in</a>
    to your account
  </p>
</div>
  </details-dialog>
</details>
          
      </div>



        




    <div data-view-component="true" id="discussion_bucket" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE5ODM2MjUyMzk6dGltZWxpbmUiLCJ0IjoxNzM3NzkzODA0fQ==--d8b7e6af21d65ccfb5a6eee15e0e5455d5c271defecda627b1e05b14dfbd5ef3">            <h2>Conversation</h2>
  <div data-quote-markdown=".js-comment-body" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="" data-team-hovercards-enabled="" data-hpc="">
    <template>
  <div data-view-component="true" class="flash flash-warn flash-full d-flex flex-items-center">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <span>
      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.
      <a class="Link--inTextBlock" href="https://github.co/hiddenchars" target="_blank">Learn more about bidirectional Unicode characters</a>
    </span>


  <div data-view-component="true" class="flash-action">        <a href="{{ revealButtonHref }}" data-view-component="true" class="btn-sm btn">    Show hidden characters
</a>
</div>
</div></template>
<template>
  <span aria-label="This line has hidden Unicode characters" data-view-component="true" class="line-alert tooltipped tooltipped-e">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</span></template>

    <div>

      <div data-gid="PR_kwDOD__WI852O7gX" data-url="/helix-editor/helix/pull/11285/partials/body" data-channel-event-name="body_updated" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE5ODM2MjUyMzkiLCJ0IjoxNzM3NzkzODA0fQ==--9ec89367c1a76cf1709a5e6a5dc1adb732cf6ff2b7e16c9479380f2da3ba581d">

<p><a href="https://github.com/drybalka" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/24950890?s=60&amp;v=4" alt="drybalka" size="40" height="40" width="40" data-view-component="true"></a>
  
  
</p><div id="issue-2425528527">
          

          <div>
  
  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">This is a minimal implementation of the file browser, which would probably cover a lot of requirements in <a data-error-text="Failed to load title" data-id="916413629" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/200" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/200/hovercard" href="https://github.com/helix-editor/helix/issues/200">#200</a>. The whole thing works analogous to the <a href="https://github.com/nvim-telescope/telescope-file-browser.nvim">https://github.com/nvim-telescope/telescope-file-browser.nvim</a> as suggested in <a href="https://github.com/helix-editor/helix/issues/200#issuecomment-1340815804" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/200/hovercard">this comment</a>. Even though the resolution of the discussion seems to be "file tree/browser is too hard, it should be implemented as a plugin", I feel like my changes are quite small and natural to be considered for adding to the core nonetheless.</p>
<p dir="auto">The implementation simply builds on the existing file picker and only modifies 3 files, so the added maintenance burden should be quite small. The code itself is not particularly elegant (in my rather inexperienced opinion), but I did not want to over-complicate things. This is also the reason why some features might be missing.</p>
<p dir="auto">Feel free to modify this PR or simply make suggestions, I'd be happy to improve it. This is also my first PR here, so sorry if I miss anything.</p>
    </div>
  </task-lists>
  
</div>

          <!-- '"` --><!-- </textarea></xmp> -->
          <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
    <div>
          <tool-tip id="tooltip-35a9fed0-5e10-4f7c-a131-339ea77e31bd" for="reactions--reaction_button_component-a53e26" popover="manual" data-direction="n" data-type="description" data-view-component="true">philipgiuliani, baldwindavid, jerabaul29, galearez, Akselmo, ryanabx, luisdavim, oworope, JasonLovesDoggo, sommerper, and 48 more reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-5b98e40d-39b7-49bc-8288-00af3492367b" for="reactions--reaction_button_component-aa25f0" popover="manual" data-direction="n" data-type="description" data-view-component="true">mariansimecek, GtrMo, nilsherzig, cd-a, H4ckint0sh, philipgiuliani, DaveTJones, darshanCommits, ff2400t, joshua-obritsch, and 76 more reacted with heart emoji</tool-tip>
          <tool-tip id="tooltip-d9caff88-5844-43c7-90c9-4eb493796afc" for="reactions--reaction_button_component-923846" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh, pvoliveira, and larsblumberg reacted with rocket emoji</tool-tip>
          <tool-tip id="tooltip-3cc66de4-21b4-4db7-862b-b0edc5def707" for="reactions--reaction_button_component-8c4d07" popover="manual" data-direction="n" data-type="description" data-view-component="true">ymgyt, Ansimorph, vlabo, H4ckint0sh, philipgiuliani, ff2400t, tuyentv96, cotneit, petejodo, ryanabx, and 15 more reacted with eyes emoji</tool-tip>
      
    </div>
</form></div>

</div>
</div>


       
            


      

      <div data-gid="IC_kwDOD__WI86GJTFV" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GJTFV/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/daedroza/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/daedroza"><img src="https://avatars.githubusercontent.com/u/19841386?s=80&amp;u=e41441fcc9cfa158fba6f741b765e63e4008f0a5&amp;v=4" width="40" height="40" alt="@daedroza"></a>

</p>


  <div data-body-version="a990be21f15343a501fc03d78f0ed261db690ce3f87925ea40a1f712b0e101e8" id="issuecomment-2250584405">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">Would it be possible to implement a file browser with this methodology instead? <a href="https://github.com/stevearc/oil.nvim">https://github.com/stevearc/oil.nvim</a></p>
<p dir="auto">It uses a buffer/pop to navigate and edit files like you're inside a buffer.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GJ7qL" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GJ7qL/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/gj1118/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/gj1118"><img src="https://avatars.githubusercontent.com/u/473101?s=80&amp;u=7c2cb10f1cd650e95e44556e67ac4885031a38cd&amp;v=4" width="40" height="40" alt="@gj1118"></a>

</p>


  <div data-body-version="131e6c50a2527c351564f36e7b033f31bee5a12a26db1926e0453f9ff9e83a3e" id="issuecomment-2250750603">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> this is awesome.. thanks for the effort. Can you please post a screenshot as to how it looks ? Basically I am interested to show how nested directories/files are being presented.<br>
Thanks</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GKZXo" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GKZXo/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="05b1f4b70ee747fbc9db873a3eb130d5e1c955e589844cc237667a3bb89e70d8" id="issuecomment-2250872296">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Would it be possible to implement a file browser with this methodology instead? <a href="https://github.com/stevearc/oil.nvim">https://github.com/stevearc/oil.nvim</a></p>
<p dir="auto">It uses a buffer/pop to navigate and edit files like you're inside a buffer.</p>
</blockquote>
<p dir="auto">I am not a maintainer of helix, but in my opinion this is rather a plugin functionality. First of all, it would be hard-ish to implement and therefore to maintain. Secondly, buffers are primarily used for text editing and one does not usually need to create/delete/rename files so much.</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-c65f68b2-ed60-4540-960a-c5d80246fe23" for="reactions--reaction_button_component-764a69" popover="manual" data-direction="n" data-type="description" data-view-component="true">the-mikedavis, cd-a, archseer, aukeroorda, tobibrunner, TornaxO7, AbeEstrada, and Benexl reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-aa0046d5-7038-4c95-be4b-f1cb93e60b69" for="reactions--reaction_button_component-0d872b" popover="manual" data-direction="n" data-type="description" data-view-component="true">strash, erasebegin, allaboutevemirolive, RoastBeefer00, falcucci, azzamsa, smartinellimarco, and reo101 reacted with thumbs down emoji</tool-tip>
          <tool-tip id="tooltip-dd5b2204-a3c5-4f0e-ba1f-cec09e6f5581" for="reactions--reaction_button_component-f81ab9" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh reacted with heart emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GKdtO" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GKdtO/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="f046c6a9bc03035cfc6197b22d5363641ba271f28ee60a6d04bbaeeb3feae648" id="issuecomment-2250890062">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> this is awesome.. thanks for the effort. Can you please post a screenshot as to how it looks ? Basically I am interested to show how nested directories/files are being presented. Thanks</p>
</blockquote>
<p dir="auto">Well, the idea was to make it look and behave like the original <a href="https://github.com/nvim-telescope/telescope-file-browser.nvim">telescope-file-browser</a>, so you may look at the showcase video there (just without all pretty-niceness as this is just a proof-of-concept). As for a real screenshot it looks (quite bare bones) like this:<br>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/24950890/352210559-024058a7-6eda-4f2a-96bb-1bbcc3dc91a4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNDk1MDg5MC8zNTIyMTA1NTktMDI0MDU4YTctNmVkYS00ZjJhLTk2YmItMWJiY2MzZGM5MWE0LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAxMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMTI1VDA4MzAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzYWIxYzkxNmY5ZjUxOWM1Yjk4NjBmODYwNDNmNWY4ZjJiYmVmYjYzZTNjMTcyMGU2Y2ZlNmY4ZjZkNjZkZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j83xiUf6xQJlxXTrAH2ZUcPOr_yc1-nrsYrHixGV-A0"><img src="https://private-user-images.githubusercontent.com/24950890/352210559-024058a7-6eda-4f2a-96bb-1bbcc3dc91a4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNDk1MDg5MC8zNTIyMTA1NTktMDI0MDU4YTctNmVkYS00ZjJhLTk2YmItMWJiY2MzZGM5MWE0LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAxMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMTI1VDA4MzAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzYWIxYzkxNmY5ZjUxOWM1Yjk4NjBmODYwNDNmNWY4ZjJiYmVmYjYzZTNjMTcyMGU2Y2ZlNmY4ZjZkNjZkZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j83xiUf6xQJlxXTrAH2ZUcPOr_yc1-nrsYrHixGV-A0" alt="image"></a></p>
<p dir="auto">In other words, both the picker and the preview (if a dir is selected) show the contents at depth 1, similar to how <code>ls</code> works.</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-bf574d16-5310-4cc2-afdf-ede01e6a8fd0" for="reactions--reaction_button_component-59d1ac" popover="manual" data-direction="n" data-type="description" data-view-component="true">philipgiuliani, cd-a, vlabo, H4ckint0sh, joshua-obritsch, MAST1999, aukeroorda, fgimian, dodheim, and varaskkar reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-bce2f2e1-8ad9-45bd-a8af-ede5b9ebc1b7" for="reactions--reaction_button_component-899cb2" popover="manual" data-direction="n" data-type="description" data-view-component="true">joshua-obritsch, aradwann, and m0ar reacted with heart emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GqES7" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GqES7/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/archseer/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/archseer"><img src="https://avatars.githubusercontent.com/u/1372918?s=80&amp;u=3cdf0e9a84945967b3545727092c49168c9467e7&amp;v=4" width="40" height="40" alt="@archseer"></a>

</p>


  <div data-body-version="cde833ea74b4e5b7493a4b020992a2347317a7437cc23cbd2a5277739bfc74c6" id="issuecomment-2259174587">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">I kind of like just how simple this change is! It reuses existing UI components and allows exploring the file tree without adding any of the heavier features.</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-2ecd63b8-8cd2-4c41-ba69-a581e297279f" for="reactions--reaction_button_component-597a19" popover="manual" data-direction="n" data-type="description" data-view-component="true">joshua-obritsch, H4ckint0sh, Alexis-Lapierre, timskovjacobsen, jerabaul29, drew-harris, and CraigglesO reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-f14fb9d1-a45e-47c4-be4f-c004255847b0" for="reactions--reaction_button_component-87ec68" popover="manual" data-direction="n" data-type="description" data-view-component="true">philipgiuliani, ff2400t, Ansimorph, tuyentv96, skyl4b, cd-a, MAST1999, aukeroorda, cotneit, drybalka, and 12 more reacted with heart emoji</tool-tip>
          <tool-tip id="tooltip-8ae358a8-3b1b-4036-b2b2-01d8be14e88e" for="reactions--reaction_button_component-515fa9" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh reacted with rocket emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


      <div id="pullrequestreview-2213510756" data-gid="PRR_kwDOD__WI86D735k" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyMjEzNTEwNzU2IiwidCI6MTczNzc5MzgwNX0=--7c006b723de7ac79e27814175aa3d61f1134cc3f8904e292349a4ebd60b56311" data-url="/helix-editor/helix/pull/11285/partials/reviews/2213510756">
      <div data-view-component="true">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

      <div data-view-component="true">            <turbo-frame id="review-thread-or-comment-id-1086958329" target="_top">
  <details-collapsible>
      <details open="open" data-resolved="false" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    <div data-view-component="true">            <div>
      <p>
      Comment on lines

    <span>
      305
    </span> to <span>
      311
    </span>

  </p>

  </div>

  <div>
    
    <table data-tab-size="8" data-paste-markdown-skip="">
          <tbody><tr>

              <td></td>

              <td data-line-number="305"></td>

            <td>
              <span>    <span>if</span> <span>let</span> <span>Ok</span><span>(</span>files<span>)</span> = directory_content <span>{</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="306"></td>

            <td>
              <span>        <span>for</span> file <span>in</span> files <span>{</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="307"></td>

            <td>
              <span>            <span>if</span> injector<span>.</span><span>push</span><span>(</span>file<span>)</span><span>.</span><span>is_err</span><span>(</span><span>)</span> <span>{</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="308"></td>

            <td>
              <span>                <span>break</span><span>;</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="309"></td>

            <td>
              <span>            <span>}</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="310"></td>

            <td>
              <span>        <span>}</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="311"></td>

            <td>
              <span>    <span>}</span></span>

            </td>
          </tr>
    </tbody></table>

</div>


<div data-quote-markdown=".js-comment-body">
        <div id="discussion_r1700591852">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <p dir="auto">This style is used by the file picker because finding files is a potentially long-running iterator and we might use the injector to push some files asynchronously after a timeout. Since you've already collected the directory contents above you should pass that vec as the third argument to Picker::new</p>
  </task-lists>
  

</div>

  <div id="discussion_r1700596202">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <p dir="auto">Also I believe this function should return a result and pass up the error from <code>directory_content</code>. Currently if you fail to list the directory contents a blank picker opens</p>
  </task-lists>
  

</div>

  <div id="discussion_r1712612169">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <p dir="auto">Great suggestions, simplified the code, thank you!</p>
  </task-lists>
  

</div>




    </div>

</div>
</details>  </details-collapsible>
</turbo-frame>

  <turbo-frame id="review-thread-or-comment-id-1086961817" target="_top">
  <details-collapsible>
      <details data-resolved="true" data-deferred-details-content-url="/helix-editor/helix/pull/11285/threads/1086961817?rendering_on_files_tab=false" data-hidden-comment-ids="1700597241" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    
</details>  </details-collapsible>
</turbo-frame>

  <turbo-frame id="review-thread-or-comment-id-1086968746" target="_top">
  <details-collapsible>
      <details data-resolved="true" data-deferred-details-content-url="/helix-editor/helix/pull/11285/threads/1086968746?rendering_on_files_tab=false" data-hidden-comment-ids="1700607982,1712612365" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    
</details>  </details-collapsible>
</turbo-frame>




</div>  </div>

      <div data-team-hovercards-enabled="" id="event-13748086534" data-gid="LE_lADOD__WI86QkqDPzwAAAAMzcycG">

      

          <p><a data-hovercard-type="user" data-hovercard-url="/users/kirawi/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/kirawi"><img src="https://avatars.githubusercontent.com/u/67773714?s=40&amp;v=4" width="20" height="20" alt="@kirawi"></a>
<a data-hovercard-type="user" data-hovercard-url="/users/kirawi/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/kirawi">kirawi</a>




          added
  the 
<a id="label-e542e7" href="https://github.com/helix-editor/helix/labels/S-waiting-on-author" data-name="S-waiting-on-author" data-view-component="true">
  S-waiting-on-author
</a></p><tool-tip id="tooltip-5ead53f1-3cd2-4a92-b42a-78ade633af19" for="label-e542e7" popover="manual" data-direction="s" data-type="description" data-view-component="true">Status: This is awaiting some action (such as code changes or more information) from the author.</tool-tip><p>
 label


      </p><a href="#event-13748086534"><relative-time datetime="2024-08-03T03:44:23Z">Aug 3, 2024</relative-time></a>

    </div>

      <div data-gid="IC_kwDOD__WI86KSdQ8" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86KSdQ8/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/zegervdv/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/zegervdv"><img src="https://avatars.githubusercontent.com/u/747627?s=80&amp;v=4" width="40" height="40" alt="@zegervdv"></a>

</p>


  <div data-body-version="f0218757ad070d1f5a3328554ec0cf3def5941f5a092577c8f4d74e75d6e872a" id="issuecomment-2320094268">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">I think it would be useful to have the equivalent version of <code>file_picker_in_current_buffer_directory</code>. I often use this, only to realize I need to go one or more levels up. The file_browser would solve that perfectly :).</p>
<p dir="auto">It could be something like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="fn file_browser_in_current_buffer_directory(cx: &amp;mut Context) {
    let doc_dir = doc!(cx.editor)
        .path()
        .and_then(|path| path.parent().map(|path| path.to_path_buf()));

    let path = match doc_dir {
        Some(path) => path,
        None => {
            cx.editor.set_error(&quot;current buffer has no path or parent&quot;);
            return;
        }
    };

    if let Ok(picker) = ui::file_browser(path) {
        cx.push_layer(Box::new(overlaid(picker)));
    }
}"><pre><span>fn</span> <span>file_browser_in_current_buffer_directory</span><span>(</span><span>cx</span><span>:</span> <span>&amp;</span><span>mut</span> <span>Context</span><span>)</span> <span>{</span>
    <span>let</span> doc_dir = <span>doc</span><span>!</span><span>(</span>cx<span>.</span>editor<span>)</span>
        <span>.</span><span>path</span><span>(</span><span>)</span>
        <span>.</span><span>and_then</span><span>(</span>|path| path<span>.</span><span>parent</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span>|path| path<span>.</span><span>to_path_buf</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>

    <span>let</span> path = <span>match</span> doc_dir <span>{</span>
        <span>Some</span><span>(</span>path<span>)</span> =&gt; path<span>,</span>
        <span>None</span> =&gt; <span>{</span>
            cx<span>.</span><span>editor</span><span>.</span><span>set_error</span><span>(</span><span>"current buffer has no path or parent"</span><span>)</span><span>;</span>
            <span>return</span><span>;</span>
        <span>}</span>
    <span>}</span><span>;</span>

    <span>if</span> <span>let</span> <span>Ok</span><span>(</span>picker<span>)</span> = ui<span>::</span><span>file_browser</span><span>(</span>path<span>)</span> <span>{</span>
        cx<span>.</span><span>push_layer</span><span>(</span><span>Box</span><span>::</span><span>new</span><span>(</span><span>overlaid</span><span>(</span>picker<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></pre></div>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86KaNAO" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86KaNAO/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="05247abf1b599f961424e84e0243c0c47b8211fd1845a746cb8a6b337092c7d3" id="issuecomment-2322124814">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">I think it would be useful to have the equivalent version of <code>file_picker_in_current_buffer_directory</code>. I often use this, only to realize I need to go one or more levels up. The file_browser would solve that perfectly :).</p>
</blockquote>
<p dir="auto">I think this can even be the default behavior, thanks for suggesting! Not sure when I would even need to open a file browser in the project root. I deliberately wanted to keep this PR simple and feature-poor, but your suggestion is quite simple and I think it is worth it.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86Kk8LB" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86Kk8LB/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/baldwindavid/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/baldwindavid"><img src="https://avatars.githubusercontent.com/u/4578?s=80&amp;v=4" width="40" height="40" alt="@baldwindavid"></a>

</p>


  <div data-body-version="ff435eac6e00f38972cbbc468a1cc9271426c74ce987508bdf06a3e09930b555" id="issuecomment-2324939457">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> This is perfect with the change to the current buffer directory. It's similar to good ol' netrw for quick navigation and covers 95% of the needs for me. The more advanced stuff (copy, paste, create, delete, etc) can be covered by a mix of <a data-error-text="Failed to load title" data-id="2407368319" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/11164" data-hovercard-type="pull_request" data-hovercard-url="/helix-editor/helix/pull/11164/hovercard" href="https://github.com/helix-editor/helix/pull/11164">#11164</a>, shell scripts, wezterm, and the yazi file explorer. Thanks for your work!</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LHBqC" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LHBqC/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/zegervdv/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/zegervdv"><img src="https://avatars.githubusercontent.com/u/747627?s=80&amp;v=4" width="40" height="40" alt="@zegervdv"></a>

</p>


  <div data-body-version="2d66cd7bf41332354dfe49c6e83aaf16f88d7d2b03227584fd6e1beb5adb2dbf" id="issuecomment-2333874818">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> found a small issue when testing: if the cursor is on a binary file, the preview will mess up the view and leave random characters everywhere. Maybe binary files can be excluded from preview somehow?<br>
These files are normally excluded from the file_picker, so maybe this is a more general issue with the preview.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LJCaK" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LJCaK/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="231c732449d0c9a7a8e4a8ad825dc0384fe31390f23cc72e1ab5bfdabc972399" id="issuecomment-2334402186">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> found a small issue when testing: if the cursor is on a binary file, the preview will mess up the view and leave random characters everywhere. Maybe binary files can be excluded from preview somehow? These files are normally excluded from the file_picker, so maybe this is a more general issue with the preview.</p>
</blockquote>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/zegervdv/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/zegervdv">@zegervdv</a> I am using the same file previewer as file_picker, so the problem is probably in the previewer itself. Although as far as I tested the usual .jpg, .pdf, and executables are all correctly previewed as <code>&lt;Binary file&gt;</code>. Maybe you're using some exotic file formats?</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LdgYX" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LdgYX/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/thomasaarholt/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/thomasaarholt"><img src="https://avatars.githubusercontent.com/u/2721423?s=80&amp;u=9223d3be5ac0c96657b957e8f939c89df430bd3b&amp;v=4" width="40" height="40" alt="@thomasaarholt"></a>

</p>


  <div data-body-version="b11934fa07cddae3009ae966008370f6b03cb2772e46febda2a66e8ed0a573d6" id="issuecomment-2339767831">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">It would be nice to add support for going straight to the root of the project if the current buffer hasn't been saved yet. I went to test the file browser functionality by escaping the file <em>picker</em> when calling <code>hx .</code>, but then it didn't work:</p>
<details open="">
  <summary>
    
    <span aria-label="Video description Screen.Recording.2024-09-10.at.08.18.51.mov">Screen.Recording.2024-09-10.at.08.18.51.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/2721423/365917199-22113048-2d31-4382-acd0-0cc5d43ee9d7.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkxNzE5OS0yMjExMzA0OC0yZDMxLTQzODItYWNkMC0wY2M1ZDQzZWU5ZDcubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDNiYjY1MzQ4M2Q5YTI1MGU4OGUzYTRkNGJhODEyZTc3YmU2MjRiYjc2YjJiNTAzNDg2NjgwY2U1Y2I3ZGU1NSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Jt01UjSAdJjPCbI9bERFJ_diPHY_NVr6zioeW3b2hVQ" data-canonical-src="https://private-user-images.githubusercontent.com/2721423/365917199-22113048-2d31-4382-acd0-0cc5d43ee9d7.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkxNzE5OS0yMjExMzA0OC0yZDMxLTQzODItYWNkMC0wY2M1ZDQzZWU5ZDcubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDNiYjY1MzQ4M2Q5YTI1MGU4OGUzYTRkNGJhODEyZTc3YmU2MjRiYjc2YjJiNTAzNDg2NjgwY2U1Y2I3ZGU1NSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Jt01UjSAdJjPCbI9bERFJ_diPHY_NVr6zioeW3b2hVQ" controls="controls" muted="muted">

  </video>
</details>

      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86Ldq0I" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86Ldq0I/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/thomasaarholt/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/thomasaarholt"><img src="https://avatars.githubusercontent.com/u/2721423?s=80&amp;u=9223d3be5ac0c96657b957e8f939c89df430bd3b&amp;v=4" width="40" height="40" alt="@thomasaarholt"></a>

</p>


  <div data-body-version="c88b6fd56d7e186889155ecc8edc291c1e53b81a5909fbe467c569a203bd5cf8" id="issuecomment-2339810568">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">Actually, I can't get this to work at all? Running on MacOS.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description Screen.Recording.2024-09-10.at.08.47.35.mov">Screen.Recording.2024-09-10.at.08.47.35.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/2721423/365925271-c787a6eb-03bc-44a1-9e71-2a044a49a5c8.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkyNTI3MS1jNzg3YTZlYi0wM2JjLTQ0YTEtOWU3MS0yYTA0NGE0OWE1YzgubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZmFiYTE3YWE5MGRlYWNkZmVhYjVjYTNkMjRlN2ZmMGMxNmYyOGE5ZTc4ZmRmNzk3MjZlZGRlNWViMDAzNzgwMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Pnlnp2s6pAhaZJF_KNJTGHyaGOQcNZIIcyk_A9hfcKk" data-canonical-src="https://private-user-images.githubusercontent.com/2721423/365925271-c787a6eb-03bc-44a1-9e71-2a044a49a5c8.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkyNTI3MS1jNzg3YTZlYi0wM2JjLTQ0YTEtOWU3MS0yYTA0NGE0OWE1YzgubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZmFiYTE3YWE5MGRlYWNkZmVhYjVjYTNkMjRlN2ZmMGMxNmYyOGE5ZTc4ZmRmNzk3MjZlZGRlNWViMDAzNzgwMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Pnlnp2s6pAhaZJF_KNJTGHyaGOQcNZIIcyk_A9hfcKk" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LduGC" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LduGC/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="a99ef3d4b24e2572fca6f5fedd1fe81dfbb2e28fc586d43b76ae34a1454e9966" id="issuecomment-2339824002">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.</p>
</blockquote>
<p dir="auto">Well, this is actually the behavior I get when using the command palette for the file_picker as well, I guess the palette is somehow buggy in this regard. I just mapped it to some keymap and tested like that.</p>
<p dir="auto">But anyway, even if you map it correctly and then try to open the file_browser after <code>hx .</code> then it will probably still would not work. The behavior is the same as file_picker and requires an opened document to get the current path where to open the browser. I guess it would make sense to default it to the current working directory.</p>
      </div>
</task-lists>


        
      </div>

</div>


      

      <div data-gid="IC_kwDOD__WI86MCyFY" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86MCyFY/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/L-Trump/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/L-Trump"><img src="https://avatars.githubusercontent.com/u/37738631?s=80&amp;u=89992debb6094648b07bf4f92db07b19b5b9ca11&amp;v=4" width="40" height="40" alt="@L-Trump"></a>

</p>


  <div data-body-version="2cdca522fb91ce725c33731b038c7e01e0baf51cddeff3e39869c0121a6de228" id="issuecomment-2349539672">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.<br>
Screen.Recording.2024-09-10.at.08.47.35.mov</p>
<p dir="auto"><a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
</blockquote>
<p dir="auto">Actually in current latest version of helix, no file picker can open from the command pallete (tried in nixos and archlinux). It seems like another bug.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86MoW6S" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86MoW6S/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/summersz/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/summersz"><img src="https://avatars.githubusercontent.com/u/7293216?s=80&amp;v=4" width="40" height="40" alt="@summersz"></a>

</p>


  <div data-body-version="090a29b9d3a81222fae7af4a2e7688d20c9efa6210b1db2e4afad4a121d077bf" id="issuecomment-2359389842">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">I have the same reported issue when trying to open the browser from the command palette.  Works great when opened from a keymap though.</p>
<p dir="auto">I do have a couple of suggestions to consider</p>
<ol dir="auto">
<li>
<p dir="auto">Can directory names be appended with a '/' to distinguish them (like netrw)</p>
</li>
<li>
<p dir="auto">Can left and right keys be used to navigate down and up directories, respectively? ( I have gotten used to this in yazi and find it very intuitive)</p>
</li>
</ol>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86NqAxm" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86NqAxm/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/m0ar/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/m0ar"><img src="https://avatars.githubusercontent.com/u/479022?s=80&amp;u=f0dfdecf5cf278715631b96937d72b666f23a9b0&amp;v=4" width="40" height="40" alt="@m0ar"></a>

</p>


  <div data-body-version="1d9e48ac93d3edeb5f70656de108e353b4a5fec7d00c37a1a5dc9c71d4ca0459" id="issuecomment-2376600678">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">So stoked to see this <a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a>! 🫶</p>
<p dir="auto">Probably not worth it at this stage as merging the base feature is higher priority, but it'd be cool be be able to classify the entries with icons. Having a trailing slash on dirs makes sense, but hugely useful IMO to when something is linked, and being able to visually filter on filetypes.</p>
<p dir="auto">Kinda like <a href="https://github.com/lsd-rs/lsd?tab=readme-ov-file#icon-theme-file-content"><code>lsd</code></a>, which has a default set of unicode chars, but being able to opt in to using nerdfont glyphs for extra gloss.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/479022/371098951-2427ad0b-b92d-42b8-b9ca-eef72654685d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii80NzkwMjIvMzcxMDk4OTUxLTI0MjdhZDBiLWI5MmQtNDJiOC1iOWNhLWVlZjcyNjU0Njg1ZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTI1JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyNVQwODMwMDRaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMTI1Yzg2MTFiZjU2MWM1MTZkNzRlNzVlNDBiN2U2NjZkOGE2MGJmMDUwZWM0ZmZkYmY0NzYyYWJlYWMwZmEzJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.QHBO_uehllMJVl-c550J-p8dS8WdL-IX24jj5TGIHEk"><img src="https://private-user-images.githubusercontent.com/479022/371098951-2427ad0b-b92d-42b8-b9ca-eef72654685d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii80NzkwMjIvMzcxMDk4OTUxLTI0MjdhZDBiLWI5MmQtNDJiOC1iOWNhLWVlZjcyNjU0Njg1ZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTI1JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyNVQwODMwMDRaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMTI1Yzg2MTFiZjU2MWM1MTZkNzRlNzVlNDBiN2U2NjZkOGE2MGJmMDUwZWM0ZmZkYmY0NzYyYWJlYWMwZmEzJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.QHBO_uehllMJVl-c550J-p8dS8WdL-IX24jj5TGIHEk" alt="image"></a></p>
<p dir="auto">I could probably take a look at doing this when this is in if you aren't feeling it :)</p>
      </div>
</task-lists>


        
      </div>

</div>


      

      <div data-gid="IC_kwDOD__WI86OgSXH" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86OgSXH/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="4d782719751cac7360660395c40d9a8b7fbb74905ed3370b3cb3e7a631fbe446" id="issuecomment-2390828487">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/summersz/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/summersz">@summersz</a> Adding slash to dirs is a great idea, thank you! Using other keys in a picker is harder. The current design does not allow picker-specific keymaps, and even remapping the existing keys is not allowed yet. I will leave this idea for the future, as pickers refactor should come at some point.</p>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/m0ar/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/m0ar">@m0ar</a> I also really like the idea with icons! The file_browser picker shares a lot of code with the file_picker, so if the icons would work there then most probably they will also work here. I don't want to complicate this PR with icons at this point, but you may already try implementing them for the file_picker.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-view-component="true" id="pullrequestreview-2346462436" data-gid="PRR_kwDOD__WI86L3Czk" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyMzQ2NDYyNDM2IiwidCI6MTczNzc5MzgwNX0=--0eecf366cce090528be58cc6b53a4c4fa955cb62f2e509fb32deb46cfdf429ba" data-url="/helix-editor/helix/pull/11285/partials/reviews/2346462436">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

      

      <div data-gid="IC_kwDOD__WI86OqE14" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86OqE14/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/thomasaarholt/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/thomasaarholt"><img src="https://avatars.githubusercontent.com/u/2721423?s=80&amp;u=9223d3be5ac0c96657b957e8f939c89df430bd3b&amp;v=4" width="40" height="40" alt="@thomasaarholt"></a>

</p>


  <div data-body-version="e677dd6eb9466abae12646df57e939d42cad2ec75e717c1ea202ebec4ae026c0" id="issuecomment-2393394552">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">To use this, you can add the following keybinding to your config (<code>:config-open</code>, and then after saving <code>:config-reload</code>):</p>
<div dir="auto" data-snippet-clipboard-copy-content="[keys.normal.space.space]
f = &quot;file_browser&quot;"><pre>[<span>keys</span>.<span>normal</span>.<span>space</span>.<span>space</span>]
<span>f</span> = <span><span>"</span>file_browser<span>"</span></span></pre></div>
<p dir="auto">Now, you can double-tap <code>space</code> and then press <code>f</code> to open the file browser.</p>
<p dir="auto">Note that you cannot open the file browser <strong>from the command palette</strong> due to <a data-error-text="Failed to load title" data-id="1427277744" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/4508" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/4508/hovercard" href="https://github.com/helix-editor/helix/issues/4508">#4508</a> (as discussed above).</p>
      </div>
</task-lists>


        
      </div>

</div>



  

        <div data-view-component="true" data-gid="C_kwDOMQCa7NoAKDUyYTljZWY3YjA4ZGQ4ZmNiMmY3ZjE0NjY1Njg3MDYwMTYwYmZiN2M">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/24950890?s=40&amp;v=4" width="20" height="20" alt="@drybalka">
</a>  </p>
</div>

        

        <div data-gid="IC_kwDOD__WI86YnM5I" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86YnM5I/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="b4e69f8736a95191afe01e110ead42833ac477b9246a45d991821cd3c7276202" id="issuecomment-2560413256">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/the-mikedavis">@the-mikedavis</a> Thank you very much for the review, I really appreciate the insights! I added the styling for dirs, as you suggested, and also removed canonicalization and unnecessary is_dir syscalls. Now the type signatures are a bit polluted with <code>(PathBuf, bool)</code> tuples, but I just couldn't come up with a decent name for it (PathBufWithSomeMetadata or FileBrowserEntry are not better, I think). Hopefully this is fine.</p>
<p dir="auto">I also had to rebase to the newest master to get the styling code, but I did not modify any commits, only added the last one.</p>
<p dir="auto">Have a Merry Christmas!</p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86YocoN" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86YocoN/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/Axlefublr/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Axlefublr"><img src="https://avatars.githubusercontent.com/u/101342105?s=80&amp;u=d83eb94a87455ab03dc949683fddd938f5806ca8&amp;v=4" width="40" height="40" alt="@Axlefublr"></a>

</p>


  <div data-body-version="c63525523c5fc46c89eae8bb95bf9bea5c5e24992b717fb6002d9f2c9321f9f5" id="issuecomment-2560739853">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">thank you for rebasing <a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a>! for us forkers that is very valuable :3 <br>
hope this PR will get merged into core anyway, though!</p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-gid="CRE_kwDOD__WI85u2GBD">
  
          

  
<div id="ref-commit-44f5515">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-44f5515">
      <relative-time datetime="2025-01-02T18:48:18Z">Jan 2, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OjQ0ZjU1MTU0MjI4ZjhhY2EzYTkyM2VmYzRlODA4YjQ1OGZhNmU2MTciLCJ0IjoxNzM3NzkzODA1fQ==--6fc6c19d2831fe840dabc2d5a0cc16f14a045d493a7800fd6e693852566ae31c" data-url="/nik-rev/helix/commit/44f55154228f8aca3a923efc4e808b458fa6e617/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-2e968e4">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/rockboynton/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/rockboynton">rockboynton</a> 

      pushed a commit
        to rockboynton/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-2e968e4">
      <relative-time datetime="2025-01-02T21:51:57Z">Jan 2, 2025</relative-time>
    </a>
    
  </div>

  
<div id="ref-commit-958dcd0">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/rockboynton/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/rockboynton">rockboynton</a> 

      pushed a commit
        to rockboynton/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-958dcd0">
      <relative-time datetime="2025-01-02T23:49:02Z">Jan 2, 2025</relative-time>
    </a>
    
  </div>

  
<div id="ref-commit-23f5fb6">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-23f5fb6">
      <relative-time datetime="2025-01-04T07:54:04Z">Jan 4, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OjIzZjVmYjYzMTZmY2EyNWViOTRjYzI4OGU1NjlhNGRkOTE3ZmU1ZGYiLCJ0IjoxNzM3NzkzODA1fQ==--038cd1476ce2ea84633f0320824c0616fb14735eb5578171218459088e1637b4" data-url="/nik-rev/helix/commit/23f5fb6316fca25eb94cc288e569a4dd917fe5df/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>



</div>

        <div id="pullrequestreview-2530410524" data-gid="PRR_kwDOD__WI86W0wAc" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyNTMwNDEwNTI0IiwidCI6MTczNzc5MzgwNX0=--df1292549f3723cc98cf403f3374d9c4469635bec7ce4e74c076afc941aab79e" data-url="/helix-editor/helix/pull/11285/partials/reviews/2530410524">
      <div data-view-component="true">
  <p><a href="https://github.com/nik-rev" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/154856872?s=60&amp;v=4" alt="nik-rev" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

      <div data-view-component="true">            <turbo-frame id="review-thread-or-comment-id-1218019762" target="_top">
  <details-collapsible>
      <details open="open" data-resolved="false" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    <div data-view-component="true">          
  <div>
    
    <table data-tab-size="8" data-paste-markdown-skip="">
          <tbody><tr>

              <td></td>

              <td data-line-number="3016"></td>

            <td>
              <span>                <span>)</span><span>;</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="3017"></td>

            <td>
              <span>                <span>return</span><span>;</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="3018"></td>

            <td>
              <span>            <span>}</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="3019"></td>

            <td>
              <span>            cx<span>.</span><span>editor</span><span>.</span><span>set_error</span><span>(</span></span>

            </td>
          </tr>
    </tbody></table>

</div>


<div data-quote-markdown=".js-comment-body">
        <div id="discussion_r1902797289">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">I wouldn't call this an error, honestly. For example I'm frequently doing <code>hx .</code> and then opening the file browser, since i am in a <code>[scratch]</code>, everytime I do that it adds a red message to the statusline, so it looks like something went wrong, but really it's just fine</p>
<p dir="auto">I think that this call to <code>set_error</code> can just be removed</p>
    </div>
  </task-lists>
  

</div>

  <div id="discussion_r1903122961">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">To be fair, this function is called <code>file_browser_in_current_buffer_directory</code>, so this error is quite justified to inform the user that the <code>[scratch]</code> buffer does not have a dedicated directory. In my opinion, it would be confusing to remove this message for cases when something actually goes wrong.</p>
<p dir="auto">What you want to call after <code>hx .</code> is probably <code>file_browser_in_current_directory</code> or simply <code>file_browser</code>. Now I agree, that it is more convenient to have a single key combination that covers all file browsing needs in one go, and arguably <code>file_browser_in_current_buffer_directory</code> already does that for the price of showing you a somewhat-irritating-but-easily-ignorable error message. In an ideal world one would probably have to wait for when programmable config will be available in helix and code the desired behavior themself.</p>
    </div>
  </task-lists>
  

</div>




    </div>

</div>
</details>  </details-collapsible>
</turbo-frame>




</div>  </div>

        <div data-gid="REFE_lADOD__WI86QkqDPzwAAAAOuomgN">
  
          
<div id="ref-commit-6cdf2b2">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nyawox/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nyawox">nyawox</a> 

      added a commit
        to nyawox/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-6cdf2b2">
      <relative-time datetime="2025-01-04T09:20:57Z">Jan 4, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo5MDA3OTc3NDU6Y29tbWl0OjZjZGYyYjIzOTlmNDA3NjgzOTY3ZDMyNzY0YmJkZjVhNWUzY2I5OGQiLCJ0IjoxNzM3NzkzODA1fQ==--617503d1fe74dd78e0ae08689572d3fc5c5c6b5b09ab312e6cc72b59ad5af3f8" data-url="/nyawox/helix/commit/6cdf2b2399f407683967d32764bbdf5a5e3cb98d/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nyawox/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nyawox">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/93813719?s=40&amp;u=1f03718f8c2a86c5c8bb5ec82d8c4905d2b8f6f7&amp;v=4" width="20" height="20" alt="@nyawox">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-e22c144">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-e22c144">
      <relative-time datetime="2025-01-06T17:16:13Z">Jan 6, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OmUyMmMxNDQ3NzIyM2JjOThjNDBkZmE2YzRhYmE5YjgwMWEwY2MyZDgiLCJ0IjoxNzM3NzkzODA1fQ==--125d7d17980319753fe66e8b1a3de246ef2ace848ac75fabb7c12b910af83838" data-url="/nik-rev/helix/commit/e22c14477223bc98c40dfa6c4aba9b801a0cc2d8/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-e7c5d6f">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-e7c5d6f">
      <relative-time datetime="2025-01-07T13:03:53Z">Jan 7, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OmU3YzVkNmY3NWVhODkxMDI3ZmE5ZTdhYzk4NWU5YmQ5MjAyMGEwMTQiLCJ0IjoxNzM3NzkzODA1fQ==--2ebad4a05997bcd6e679fea0b265116e223def47d4638a484849387c6fdfb40c" data-url="/nik-rev/helix/commit/e7c5d6f75ea891027fa9e7ac985e9bd92020a014/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-bd2d640">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-bd2d640">
      <relative-time datetime="2025-01-07T13:27:53Z">Jan 7, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OmJkMmQ2NDAwMzliM2IzNTRkNWY5YmUyOGQ4Yzg1YTdiYzJmZjcxMGUiLCJ0IjoxNzM3NzkzODA1fQ==--0cff937ec12c1ea20ac28f2ee0280aa699abe7e488924fad595b281048741dca" data-url="/nik-rev/helix/commit/bd2d640039b3b354d5f9be28d8c85a7bc2ff710e/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>



</div>

        <div data-view-component="true" id="pullrequestreview-2535483904" data-gid="PRR_kwDOD__WI86XIGoA" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyNTM1NDgzOTA0IiwidCI6MTczNzc5MzgwNX0=--12dc1dc37a06b2761b594ad4a5a328c6c0097005e486c295448a9ca073d24277" data-url="/helix-editor/helix/pull/11285/partials/reviews/2535483904">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

        <div data-gid="C_kwDOMQCa7NoAKDk5NmVlOTNlNDE1MTczODZkNjI1ZTA2MGZlMWU1ZDA4NjBhYzRkMzE">
      <div data-view-component="true">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/24950890?s=40&amp;v=4" width="20" height="20" alt="@drybalka">
</a>  </p>
</div>      <div data-view-component="true">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/KevinDanne/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/KevinDanne">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/26122654?s=40&amp;v=4" width="20" height="20" alt="@KevinDanne">
</a>  </p>
</div>  </div>

        

        <div data-gid="IC_kwDOD__WI86bBQ-t" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bBQ-t/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/civa/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/civa"><img src="https://avatars.githubusercontent.com/u/44102586?s=80&amp;u=a0d0d0c77d73dfe9562962068c061ee82337087e&amp;v=4" width="40" height="40" alt="@civa"></a>

</p>


  <div data-body-version="3edf3df1b58b0281a1b1b633be03f4c31ccf07b1c31f4dfd6ae918125e5762d1" id="issuecomment-2600800173">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.</p>
<p dir="auto">Screen.Recording.2024-09-10.at.08.47.35.mov</p>
<p dir="auto"><a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
</blockquote>
<p dir="auto">Same issue</p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86bohuz" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bohuz/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev"><img src="https://avatars.githubusercontent.com/u/154856872?s=80&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="40" height="40" alt="@nik-rev"></a>

</p>


  <div data-body-version="f7d29eeb305fb883d5aebc5b50704dce5ac8704184074ba576feeb18e3ab67a7" id="issuecomment-2611092403">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.<br>
Screen.Recording.2024-09-10.at.08.47.35.mov<br>
<a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
</blockquote>
<p dir="auto">Same issue</p>
</blockquote>
<p dir="auto">You can't open <em>any</em> pickers from the command palette, it isn't limited to just this PR. It's a known bug for a while and fixing it would require a large refactor. See <a data-error-text="Failed to load title" data-id="1427277744" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/4508" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/4508/hovercard" href="https://github.com/helix-editor/helix/issues/4508">#4508</a></p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-view-component="true" id="pullrequestreview-2571158000" data-gid="PRR_kwDOD__WI86ZQMHw" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyNTcxMTU4MDAwIiwidCI6MTczNzc5MzgwNX0=--37d6507f714ece19eb3f13e71881f11bb04b0a21a8a22c82e9b361fb7639e84a" data-url="/helix-editor/helix/pull/11285/partials/reviews/2571158000">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

        

        <div data-gid="IC_kwDOD__WI86boyxc" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86boyxc/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev"><img src="https://avatars.githubusercontent.com/u/154856872?s=80&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="40" height="40" alt="@nik-rev"></a>

</p>


  <div data-body-version="66acb9fecf0948e86df55df920ab022a43f6e8c7b14d903beda8dd5fb8d560fe" id="issuecomment-2611162204">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">It's merged!! Yayyyyyyy :D</p>
<p dir="auto">(small thing, but I noticed it's mapped to <code>space</code> + <code>e</code> but the command is called <code>file_browser</code>. maybe it's better to rename it to <code>file_explorer</code> as a mnemonic?)</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-99bf0fd0-14f4-417b-b029-3f5157311fee" for="reactions--reaction_button_component-059a7c" popover="manual" data-direction="n" data-type="description" data-view-component="true">uncenter, goldie-lin, TornaxO7, Akselmo, Defelo, clintjedwards, bluedragon1221, azzamsa, davidchandra95, dawnchan030920, and 15 more reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-003dbd23-cd52-4777-873c-89cbe288a104" for="reactions--reaction_button_component-37a6d1" popover="manual" data-direction="n" data-type="description" data-view-component="true">summersz, Taywee, and pandalec reacted with hooray emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86bo1PG" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bo1PG/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/Axlefublr/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Axlefublr"><img src="https://avatars.githubusercontent.com/u/101342105?s=80&amp;u=d83eb94a87455ab03dc949683fddd938f5806ca8&amp;v=4" width="40" height="40" alt="@Axlefublr"></a>

</p>


  <div data-body-version="223f8d1472569318fd144115550e6cc5952af5b08c8fface53012f0cc4b2139b" id="issuecomment-2611172294">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">NO FUCKING WAY FINALLY OMG</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-e4684696-358c-4b1b-bee2-14a7a1eafdb2" for="reactions--reaction_button_component-c9970f" popover="manual" data-direction="n" data-type="description" data-view-component="true">nik-rev, uncenter, goldie-lin, CraigglesO, Akselmo, necromeo, univerz, Defelo, azzamsa, Ladas552, and 15 more reacted with laugh emoji</tool-tip>
          <tool-tip id="tooltip-c9f785ef-c65a-40cc-87d2-22eed20cddd3" for="reactions--reaction_button_component-f14b43" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh, Bowarc, danillos, tuchandra, Taywee, and pandalec reacted with rocket emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86bo9bE" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bo9bE/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/the-mikedavis"><img src="https://avatars.githubusercontent.com/u/21230295?s=80&amp;u=d2a86deab590b17364e8bc5ee7d8d6c45d44f101&amp;v=4" width="40" height="40" alt="@the-mikedavis"></a>

</p>


  <div data-body-version="b22ea8b2f2aa6968fd98b82f0c908837179dc9b258c3d1678e8d4b86105faa91" id="issuecomment-2611205828">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">It does look a bit like Vim's <code>:Explore</code>, "explore" could be a more fitting name</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-1f91794b-aa45-4da9-acb0-a260263c2d52" for="reactions--reaction_button_component-e2a6e3" popover="manual" data-direction="n" data-type="description" data-view-component="true">RoloEdits, TornaxO7, goldie-lin, Akselmo, uncenter, azzamsa, DaveTJones, wxxxcxx, drybalka, KevinDanne, and 5 more reacted with thumbs up emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


        <div id="ref-commit-7ac8c34" data-gid="REFE_lADOD__WI86QkqDPzwAAAAO8uk7V">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      pushed a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-7ac8c34">
      <relative-time datetime="2025-01-24T01:27:57Z">Jan 24, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OjdhYzhjMzQzZGNjZThkZmVjMDBkZmFkMTcwZmViYTY3NzVjZjU5M2EiLCJ0IjoxNzM3NzkzODA1fQ==--ab34124fec91124a0e8d2179643ce5124ac231badce23caee5302dfccc38d329" data-url="/nik-rev/helix/commit/7ac8c343dcce8dfec00dfad170feba6775cf593a/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/24950890?s=40&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="20" height="20" alt="@drybalka">
</a>      <a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

        <div data-gid="IC_kwDOD__WI86brskg" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86brskg/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/rotmh/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/rotmh"><img src="https://avatars.githubusercontent.com/u/148942120?s=80&amp;u=9a9bdb5f3207ac14c2972bcd040256161c422a94&amp;v=4" width="40" height="40" alt="@rotmh"></a>

</p>


  <div data-body-version="66a4498a45343a076df28a8d56edd27a4e3f51929facfc90607f48ef4fa99c66" id="issuecomment-2611923232">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">Hi, awesome and exciting! :)</p>
<p dir="auto">One thing, it seems not to ignore ignored files (from <code>.gitignore</code>, <code>.ignore</code>, etc.). Is that the desired behavior, a problem in my case, maybe it has been forgotten?</p>
<p dir="auto">Edit: just looked out the code and compared <code>file_browser</code> and <code>file_picker</code> - the picker uses a walker with ignores, and the browser reads dir content, which I guess makes sense, as the walker is used for recursive file iteration... Well, I'll leave it here as I don't know what was the intentions.</p>
      </div>
</task-lists>


        
      </div>

</div>


        



  <!-- Rendered timeline since 2025-01-24 23:08:48 -->
  



    </div>

    
  </div>

</div>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You could have invented Fenwick trees (115 pts)]]></title>
            <link>https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D</link>
            <guid>42818248</guid>
            <pubDate>Sat, 25 Jan 2025 00:23:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D">https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D</a>, See on <a href="https://news.ycombinator.com/item?id=42818248">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div data-magellan-destination="s1" id="s1">

<h2><span>1</span> Introduction</h2>
<p> Suppose we have a sequence of <em>n</em> integers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline1.png?pub-status=live" width="89" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline1.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline1.png">
<span data-mathjax-type="texmath"><span>
$a_1, a_2, \ldots, a_n$
</span></span>
</span>
</span> and want to be able to perform arbitrary interleavings of the following two operations, as illustrated in Figure&nbsp;<a href="#f1">1</a> :</p>
<div data-magellan-destination="f1" id="f1">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig1.png?pub-status=live" width="1535" height="1239" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig1.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig1.png"></p>
<div><p><span>Fig. 1</span> Update and range query operations.</p>
</div></div>

<ul>
<li>

<p><span>•</span> 
<em>Update</em> the value at any given index<a href="#fn1"><span>Footnote </span>
<sup>1</sup>
</a> <em>i</em> by adding some value <em>v</em>.</p>
</li>
<li>

<p><span>•</span> Find the sum of all values in any given range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline2.png?pub-status=live" width="31" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline2.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline2.png">
<span data-mathjax-type="texmath"><span>
$[i,\ j]$
</span></span>
</span>
</span>, that is, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline3.png?pub-status=live" width="130" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline3.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline3.png">
<span data-mathjax-type="texmath"><span>
$a_i + a_{i+1} + \ldots + a_j$
</span></span>
</span>
</span>. We call this operation a <em>range query</em>.</p>
</li>
</ul>

<p> Note that update is phrased in terms of <em>adding</em> some value <em>v</em> to the existing value; we can also <em>set</em> a given index to a new value <em>v</em> by adding <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline4.png?pub-status=live" width="35" height="7" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline4.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline4.png">
<span data-mathjax-type="texmath"><span>
$v - u$
</span></span>
</span>
</span>, where <em>u</em> is the old value.</p>
<p> If we simply store the integers in a mutable array, then we can update in constant time, but range queries require time linear in the size of the range, since we must iterate through the entire range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline5.png?pub-status=live" width="30" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline5.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline5.png">
<span data-mathjax-type="texmath"><span>
$[i,\ j]$
</span></span>
</span>
</span> to add up the values.</p>
<p> In order to improve the running time of range queries, we could try to cache (at least some of) the range sums. However, this must be done with care, since the cached sums must be kept up to date when updating the value at an index. For example, a straightforward approach would be to use an array <em>P</em> where <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline6.png?pub-status=live" width="15" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline6.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline6.png">
<span data-mathjax-type="texmath"><span>
$P_i$
</span></span>
</span>
</span> stores the prefix sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline7.png?pub-status=live" width="86" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline7.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline7.png">
<span data-mathjax-type="texmath"><span>
$a_1 + \ldots + a_i$
</span></span>
</span>
</span>; <em>P</em> can be precomputed in linear time via a scan. Now range queries are fast: we can obtain <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline8.png?pub-status=live" width="84" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline8.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline8.png">
<span data-mathjax-type="texmath"><span>
$a_i + \ldots + a_j$
</span></span>
</span>
</span> in constant time by computing <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9.png?pub-status=live" width="61" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9.png">
<span data-mathjax-type="texmath"><span>
$P_j - P_{i-1}$
</span></span>
</span>
</span> (for convenience we set <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline10.png?pub-status=live" width="46" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline10.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline10.png">
<span data-mathjax-type="texmath"><span>
$P_0 = 0$
</span></span>
</span>
</span> so this works even when <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline11.png?pub-status=live" width="31" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline11.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline11.png">
<span data-mathjax-type="texmath"><span>
$i=1$
</span></span>
</span>
</span>). Unfortunately, it is update that now takes linear time, since changing <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline12.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline12.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline12.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span> requires updating <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline13.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline13.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline13.png">
<span data-mathjax-type="texmath"><span>
$P_j$
</span></span>
</span>
</span> for every <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline14.png?pub-status=live" width="26" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline14.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline14.png">
<span data-mathjax-type="texmath"><span>
$j {\geqslant} i$
</span></span>
</span>
</span>.</p>
<p> Is it possible to design a data structure that allows <em>both</em> operations to run in sublinear time? (You may wish to pause and think about it before reading the next paragraph!) This is not just academic: the problem was originally considered in the context of <em>arithmetic coding</em> (Rissanen &amp; Langdon, <a href="#ref11"><span>Reference Rissanen and Langdon</span>1979</a>; Bird &amp; Gibbons, <a href="#ref2"><span>Reference Bird and Gibbons</span>2002</a>), a family of techniques for turning messages into sequences of bits for storage or transmission. In order to minimize the bits required, one generally wants to assign shorter bit sequences to more frequent characters, and vice versa; this leads to the need to maintain a dynamic table of character frequencies. We <em>update</em> the table every time a new character is processed and <em>query</em> the table for cumulative frequencies in order to subdivide a unit interval into consecutive segments proportional to the frequency of each character (Ryabko, <a href="#ref12"><span>Reference Ryabko</span>1989</a>; Fenwick, <a href="#ref5"><span>Reference Fenwick</span>1994</a>).</p>
<p> So, can we get both operations to run in sublinear time? The answer, of course, is yes. One simple technique is to divide the sequence into <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline15.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline15.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline15.png">
<span data-mathjax-type="texmath"><span>
$\sqrt n$
</span></span>
</span>
</span> buckets, each of size <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline16.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline16.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline16.png">
<span data-mathjax-type="texmath"><span>
$\sqrt n$
</span></span>
</span>
</span>, and create an additional array of size <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline17.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline17.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline17.png">
<span data-mathjax-type="texmath"><span>
$\sqrt n$
</span></span>
</span>
</span> to cache the sum of each bucket. Updates still run in <em>O</em>(1), since we simply have to update the value at the given index and the corresponding bucket sum. Range queries now run in <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline18.png?pub-status=live" width="45" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline18.png">
<span data-mathjax-type="texmath"><span>
$O(\sqrt n)$
</span></span>
</span>
</span> time: to find the sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline19.png?pub-status=live" width="83" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline19.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline19.png">
<span data-mathjax-type="texmath"><span>
$a_i + \ldots + a_j$
</span></span>
</span>
</span>, we manually add the values from <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline20.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline20.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline20.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span> to the end of its bucket, and from <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline21.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline21.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline21.png">
<span data-mathjax-type="texmath"><span>
$a_j$
</span></span>
</span>
</span> to the beginning of its bucket; for all the buckets in between we can just look up their sum.</p>
<p> We can make range queries even faster, at the cost of making updates slightly slower, by introducing additional levels of caching. For example, we can divide the sequence into <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline22.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline22.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline22.png">
<span data-mathjax-type="texmath"><span>
$\sqrt[3] n$
</span></span>
</span>
</span> “big buckets” and then further subdivide each big bucket into <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline23.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline23.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline23.png">
<span data-mathjax-type="texmath"><span>
$\sqrt[3] n$
</span></span>
</span>
</span> “small buckets”, with each small bucket holding <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline24.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline24.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline24.png">
<span data-mathjax-type="texmath"><span>
$\sqrt[3] n$
</span></span>
</span>
</span> values. The sum of each bucket is cached; now each update requires modifying three values, and range queries run in <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline25.png?pub-status=live" width="45" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline25.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline25.png">
<span data-mathjax-type="texmath"><span>
$O(\sqrt[3] n)$
</span></span>
</span>
</span> time.</p>
<p> In the limit, we end up with a binary divide-and-conquer approach to caching range sums, with both update and range query taking <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline26.png?pub-status=live" width="47" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline26.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline26.png">
<span data-mathjax-type="texmath"><span>
$O(\lg n)$
</span></span>
</span>
</span> time. In particular, we can make a balanced binary tree where the leaves store the sequence itself, and every internal node stores the sum of its children. (This will be a familiar idea to many functional programmers; for example, finger trees (Hinze &amp; Paterson, <a href="#ref7"><span>Reference Hinze and Paterson</span>2006</a>; Apfelmus, <a href="#ref1"><span>Reference Apfelmus</span>2009</a>) use a similar sort of caching scheme.) The resulting data structure is popularly known as a <em>segment tree</em>,<a href="#fn2"><span>Footnote </span>
<sup>2</sup>
</a> presumably because each internal node ultimately caches the sum of a (contiguous) <em>segment</em> of the underlying sequence. Figure&nbsp;<a href="#f2">2</a> shows a segment tree built on a sample array of length <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline27.png?pub-status=live" width="43" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline27.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline27.png">
<span data-mathjax-type="texmath"><span>
$n=16$
</span></span>
</span>
</span> (for simplicity, we will assume that <em>n</em> is a power of two, although it is easy to generalize to situations where it is not). Each leaf of the tree corresponds to an array entry; each internal node is drawn with a grey bar showing the segment of the underlying array of which it is the sum.</p>
<div data-magellan-destination="f2" id="f2">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig2.png?pub-status=live" width="2255" height="1072" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig2.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig2.png"></p>
</div>

<p> Let’s see how we can use a segment tree to implement the two required operations so that they run in logarithmic time.</p>
<ul>
<li>

<p><span>•</span> To update the value at index <em>i</em>, we also need to update any cached range sums which include it. These are exactly the nodes along the path from the leaf at index <em>i</em> to the root of the tree; there are <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline28.png?pub-status=live" width="47" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline28.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline28.png">
<span data-mathjax-type="texmath"><span>
$O(\lg n)$
</span></span>
</span>
</span> such nodes. Figure&nbsp;<a href="#f3">3</a> illustrates this update process for the example segment tree from Figure&nbsp;<a href="#f2">2</a>; updating the entry at index 5 requires modifying only the shaded nodes along the path from the root to the updated entry.</p>
</li>
<li>

<p><span>•</span> To perform a range query, we descend through the tree while keeping track of the range covered by the current node.</p><ul>
<li>

<p><span>-</span> If the range of the current node is wholly contained within the query range, return the value of the current node.</p>
</li>
<li>

<p><span>-</span> If the range of the current node is disjoint from the query range, return 0.</p>
</li>
<li>

<p><span>-</span> Otherwise, recursively query both children and return the sum of the results.</p>
</li>
</ul>

</li>
</ul>

<p> Figure&nbsp;<a href="#f4">4</a> illustrates the process of computing the sum of the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline29.png?pub-status=live" width="60" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline29.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline29.png">
<span data-mathjax-type="texmath"><span>
$[4 \ldots 11]$
</span></span>
</span>
</span>. Blue nodes are the ones we recurse through; green nodes are those whose range is wholly contained in the query range and are returned without recursing further; grey nodes are disjoint from the query range and return zero. The final result in this example is the sum of values at the green nodes, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline30.png?pub-status=live" width="131" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline30.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline30.png">
<span data-mathjax-type="texmath"><span>
$1 + 1 + 5 + -2 = 5$
</span></span>
</span>
</span> (it is easily verified that this is in fact the sum of values in the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline31.png?pub-status=live" width="60" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline31.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline31.png">
<span data-mathjax-type="texmath"><span>
$[4 \ldots 11]$
</span></span>
</span>
</span>).</p>
<div data-magellan-destination="f3" id="f3">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig3.png?pub-status=live" width="2255" height="1072" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig3.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig3.png"></p>
<div><p><span>Fig. 3</span> Updating a segment tree.</p>
</div></div>

<div data-magellan-destination="f4" id="f4">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig4.png?pub-status=live" width="2256" height="1160" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig4.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig4.png"></p>
<div><p><span>Fig. 4</span> Performing a range query on a segment tree.</p>
</div></div>

<p> On this small example tree, it may seem that we visit a significant fraction of the total nodes, but in general, we visit no more than about <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline32.png?pub-status=live" width="36" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline32.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline32.png">
<span data-mathjax-type="texmath"><span>
$4 \lg n$
</span></span>
</span>
</span>. Figure&nbsp;<a href="#f5">5</a> makes this more clear. Only one blue node in the entire tree can have two blue children, and hence, each level of the tree can contain at most two blue nodes and two non-blue nodes. We essentially perform two binary searches, one to find each endpoint of the query range.</p>
<div data-magellan-destination="f5" id="f5">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig5.png?pub-status=live" width="3694" height="670" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig5.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig5.png"></p>
<div><p><span>Fig. 5</span> Performing a range query on a larger segment tree.</p>
</div></div>

<p> Segment trees are a very nice solution to the problem: as we will see in Section <a href="#s2">2</a>, they fit well in a functional language; they also lend themselves to powerful generalizations such as lazily propagated range updates and persistent update history via shared immutable structure (<a href="#ref9"><span>Reference Ivanov</span>Ivanov, 2011<em>b</em>
</a>).</p>
<p> 
<em>Fenwick trees</em>, or <em>binary indexed trees</em> (Fenwick, <a href="#ref5"><span>Reference Fenwick</span>1994</a>; <a href="#ref8"><span>Reference Ivanov</span>Ivanov, 2011<em>a</em>
</a>), are an alternative solution to the problem. What they lack in generality, they make up for with an extremely small memory footprint—they require literally nothing more than an array storing the values in the tree—and a blazing fast implementation. In other words, they are perfect for applications such as low-level coding/decoding routines where we don’t need any of the advanced features that segment trees offer, and want to squeeze out every last bit of performance.</p>
<p> Figure&nbsp;<a href="#f6">6</a> shows a typical implementation of Fenwick trees in Java. As you can see, the implementation is incredibly concise and consists mostly of some small loops doing just a few arithmetic and bit operations per iteration. It is not at all clear what this code is doing, or how it works! Upon closer inspection, the <span>range</span>, <span>get</span>, and <span>set</span> functions are straightforward, but the other functions are a puzzle. We can see that both the <span>prefix</span> and <span>update</span> functions call another function <span>LSB</span>, which for some reason performs a bitwise logical AND of an integer and its negation. In fact, <span>LSB(x)</span> computes the <em>least significant bit</em> of <em>x</em>, that is, it returns the smallest <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline33.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline33.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline33.png">
<span data-mathjax-type="texmath"><span>
$2^k$
</span></span>
</span>
</span> such that the <em>k</em>th bit of <em>x</em> is a one. However, it is not obvious how the implementation of <span>LSB</span> works, nor how and why least significant bits are being used to compute updates and prefix sums.</p>
<div data-magellan-destination="f6" id="f6">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig6.png?pub-status=live" width="2659" height="1580" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig6.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig6.png"></p>
<div><p><span>Fig. 6</span> Implementing Fenwick trees with bit tricks.</p>
</div></div>

<p> Our goal is <em>not</em> to write elegant functional code for this—already solved!—problem. Rather, our goal will be to use a functional domain-specific language for bit strings, along with equational reasoning, to <em>derive</em> and <em>explain</em> this baffling imperative code from first principles—a demonstration of the power of functional thinking and equational reasoning to understand code written even in other, non-functional languages. After developing more intuition for segment trees (Section <a href="#s2">2</a>), we will see how Fenwick trees can be viewed as a variant on segment trees (Section <a href="#s3">3</a>). We will then take a detour into two’s complement binary encoding, develop a suitable DSL for bit manipulations, and explain the implementation of the <span>LSB</span> function (Section <a href="#s4">4</a>). Armed with the DSL, we will then derive functions for converting back and forth between Fenwick trees and standard binary trees (Section <a href="#s5">5</a>). Finally, we will be able to derive functions for moving within a Fenwick tree by converting to binary tree indices, doing the obvious operations to effect the desired motion within the binary tree, and then converting back. Fusing away the conversions via equational reasoning will finally reveal the hidden LSB function, as expected (Section <a href="#s6">6</a>).</p>
<p> This paper was produced from a literate Haskell document; the source is available from GitHub, at <a href="https://github.com/byorgey/fenwick/blob/master/Fenwick.lhs">https://github.com/byorgey/fenwick/blob/master/Fenwick.lhs</a>.</p>
</div>
<div data-magellan-destination="s2" id="s2">

<h2><span>2</span> Segment trees</h2>
<p> Figure&nbsp;<a href="#f7">7</a> exhibits a simple implementation of a segment tree in Haskell, using some utilities for working with index ranges shown in Figure&nbsp;<a href="#f8">8</a>. We store a segment tree as a recursive algebraic data type and implement <em>update</em> and <em>rq</em> using code that directly corresponds to the recursive descriptions given in the previous section; <em>get</em> and <em>set</em> can then also be implemented in terms of them. It is not hard to generalize this code to work for segment trees storing values from either an arbitrary commutative monoid if we don’t need the <em>set</em> operation—or from an arbitrary Abelian group (i.e. commutative monoid with inverses) if we do need <em>set</em>—but we keep things simple since the generalization doesn’t add anything to our story.</p>
<div data-magellan-destination="f7" id="f7">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig7.png?pub-status=live" width="2337" height="2308" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig7.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig7.png"></p>
<div><p><span>Fig. 7</span> Simple segment tree implementation in Haskell.</p>
</div></div>

<div data-magellan-destination="f8" id="f8">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig8.png?pub-status=live" width="2968" height="1204" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig8.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig8.png"></p>
</div>

<p> Although this implementation is simple and relatively straightforward to understand, compared to simply storing the sequence of values in an array, it incurs a good deal of overhead. We can be more clever in our use of space by storing all the nodes of a segment tree in an array, using the standard left-to-right breadth-first indexing scheme illustrated in Figure&nbsp;<a href="#f9">9</a> (for example, this scheme, or something like it, is commonly used to implement binary heaps). The root has label 1; every time we descend one level we append an extra bit: 0 when we descend to the left child and 1 when we descend to the right. Thus, the index of each node expressed in binary records the sequence of left-right choices along the path to that node from the root. Going from a node to its children is as simple as doing a left bit shift and optionally adding 1; going from a node to its parent is a right bit shift. This defines a bijection from the positive natural numbers to the nodes of an infinite binary tree. If we label the segment tree array with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline34.png?pub-status=live" width="73" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline34.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline34.png">
<span data-mathjax-type="texmath"><span>
$s_1 \ldots s_{2n-1}$
</span></span>
</span>
</span>, then <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline35.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline35.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline35.png">
<span data-mathjax-type="texmath"><span>
$s_1$
</span></span>
</span>
</span> stores the sum of all the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline36.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline36.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline36.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span>, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline37.png?pub-status=live" width="13" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline37.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline37.png">
<span data-mathjax-type="texmath"><span>
$s_2$
</span></span>
</span>
</span> stores the sum of the first half of the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline38.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline38.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline38.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span>, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline39.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline39.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline39.png">
<span data-mathjax-type="texmath"><span>
$s_3$
</span></span>
</span>
</span> stores the sum of the second half, and so on. <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline40.png?pub-status=live" width="56" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline40.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline40.png">
<span data-mathjax-type="texmath"><span>
$a_1 \ldots a_n$
</span></span>
</span>
</span> themselves are stored as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline41.png?pub-status=live" width="72" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline41.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline41.png">
<span data-mathjax-type="texmath"><span>
$s_n \ldots s_{2n-1}$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="f9" id="f9">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig9.png?pub-status=live" width="2131" height="997" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig9.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig9.png"></p>
<div><p><span>Fig. 9</span> Indexing a binary tree.</p>
</div></div>

<p> The important point is that since descending recursively through the tree corresponds to simple operations on indices, all the algorithms we have discussed can be straightforwardly transformed into code that works with a (mutable) array: for example, instead of storing a reference to the current subtree, we store an integer index; every time we want to descend to the left or right, we simply double the current index or double and add one, and so on. Working with tree nodes stored in an array presents an additional opportunity: rather than being forced to start at the root and recurse downwards, we can start at a particular index of interest and move <em>up</em> the tree instead.</p>
<p> So how do we get from segment trees to Fenwick trees? We start with an innocuous-seeming observation: <em>not all the values stored in a segment tree are necessary</em>. Of course, all the non-leaf nodes are “unnecessary” in the sense that they represent cached range sums which could easily be recomputed from the original sequence. That’s the whole point: caching these “redundant” sums trades off space for time, allowing us to perform arbitrary updates and range queries quickly, at the cost of doubling the required storage space.</p>
<p> But that’s not what I mean! In fact, there is a different set of values we can forget about, but in such a way that we still retain the logarithmic running time for updates and range queries. Which values, you ask? Simple: just forget the data stored in <em>every node which is a right child</em>. Figure&nbsp;<a href="#f10">10</a> shows the same example tree we have been using, but with the data deleted from every right child. Note that “every right child” includes both leaves and internal nodes: we forget the data associated to <em>every</em> node which is the right child of its parent. We will refer to the nodes with discarded data as <em>inactive</em> and the remaining nodes (that is, left children and the root) as <em>active</em>. We also say that a tree with all its right children inactivated in this way has been <em>thinned</em>.</p>
<div data-magellan-destination="f10" id="f10">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig10.png?pub-status=live" width="2131" height="1012" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig10.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig10.png"></p>
<div><p><span>Fig. 10</span> Inactivating all right children in a segment tree.</p>
</div></div>

<p> Updating a thinned segment tree is easy: just update the same nodes as before, ignoring any updates to inactive nodes. But how do we answer range queries? It’s not too hard to see that there is enough information remaining to reconstruct the information that was discarded (you might like to try convincing yourself of this: can you deduce what values must go in the greyed-out nodes in Figure&nbsp;<a href="#f10">10</a>, without peeking at any previous figures?). However, in and of itself, this observation does not give us a nice algorithm for computing range sums.</p>
<p> It turns out the key is to think about <em>prefix sums</em>. As we saw in the introduction and the implementation of <span>range</span> in Figure&nbsp;<a href="#f6">6</a>, if we can compute the prefix sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline42.png?pub-status=live" width="125" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline42.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline42.png">
<span data-mathjax-type="texmath"><span>
$P_k = a_1 + \ldots + a_k$
</span></span>
</span>
</span> for any <em>k</em>, then we can compute the range sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline43.png?pub-status=live" width="83" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline43.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline43.png">
<span data-mathjax-type="texmath"><span>
$a_i + \ldots + a_j$
</span></span>
</span>
</span> as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline44.png?pub-status=live" width="62" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline44.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline44.png">
<span data-mathjax-type="texmath"><span>
$P_j - P_{i-1}$
</span></span>
</span>
</span>.</p>
<p><span>Theorem 1</span> Given a thinned segment tree, the sum of any prefix of the original array (and hence also any range sum) can be computed, in logarithmic time, using only the values of active nodes.</p>

<p><span>Proof</span> Surprisingly, in the special case of prefix queries, the original range query algorithm described in Section <a href="#s1">1</a> and implemented in Figure&nbsp;<a href="#f7">7</a> works unchanged! That is to say, the base case in which the range of the current node is wholly contained within the query range—and we thus return the value of the current node—will only ever happen at active nodes.</p>

<p> First, the root itself is active, and hence, querying the full range will work. Next, consider the case where we are at a node and recurse on both children. The left child is always active, so we only need to consider the case where we recurse to the right. It is impossible that the range of the right child will be wholly contained in the query range: since the query range is always a prefix of the form <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline45.png?pub-status=live" width="34" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline45.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline45.png">
<span data-mathjax-type="texmath"><span>
$[1,\ j]$
</span></span>
</span>
</span>, if the right child’s range is wholly contained in <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline46.png?pub-status=live" width="35" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline46.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline46.png">
<span data-mathjax-type="texmath"><span>
$[1,\ j]$
</span></span>
</span>
</span> then the left child’s range must be as well—which means that the parent node’s range (which is the union of its children’s ranges) would also be wholly contained in the query range. But in that case we would simply return the parent’s value without recursing into the right child. Thus, when we do recurse into a right child, we might end up returning 0, or we might recurse further into both grandchildren, but in any case we will never try to look at the value of the right child itself.</p>
<p> Figure&nbsp;<a href="#f11">11</a> illustrates performing a prefix query on a segment tree. Notice that visited right children are only ever blue or grey; the only green nodes are left children.</p>
<div data-magellan-destination="f11" id="f11">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig11.png?pub-status=live" width="2136" height="1096" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig11.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig11.png"></p>
<div><p><span>Fig. 11</span> Performing a prefix query on a segment tree.</p>
</div></div>

</div>
<div data-magellan-destination="s3" id="s3">

<h2><span>3</span> Fenwick trees</h2>
<p> How should we actually store a thinned segment tree in memory? If we stare at Figure&nbsp;<a href="#f10">10</a> again, one strategy suggests itself: simply take every active node and “slide” it down and to the right until it lands in an empty slot in the underlying array, as illustrated in Figure&nbsp;<a href="#f12">12</a>. This sets up a one-to-one correspondence between active nodes and indices in the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline47.png?pub-status=live" width="42" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline47.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline47.png">
<span data-mathjax-type="texmath"><span>
$1 \ldots n$
</span></span>
</span>
</span>. Another way to understand this indexing scheme is to use a postorder traversal of the tree, skipping over inactive nodes and giving consecutive indices to active nodes encountered during the traversal. We can also visualize the result by drawing the tree in a “right-leaning” style (Figure&nbsp;<a href="#f13">13</a>), vertically aligning each active node with the array slot where it is stored.</p>
<div data-magellan-destination="f12" id="f12">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig12.png?pub-status=live" width="2132" height="1461" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig12.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig12.png"></p>
<div><p><span>Fig. 12</span> Sliding active values down a thinned segment tree.</p>
</div></div>

<div data-magellan-destination="f13" id="f13">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig13.png?pub-status=live" width="2131" height="1012" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig13.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig13.png"></p>
<div><p><span>Fig. 13</span> Right-leaning drawing of a thinned segment tree, vertically aligning nodes with their storage location.</p>
</div></div>

<p> This method of storing the active nodes from a thinned segment tree in an array is precisely a <em>Fenwick tree</em>. I will also sometimes refer to it as a <em>Fenwick array</em>, when I want to particularly emphasize the underlying array data structure. Although it is certainly a clever use of space, the big question is how to implement the update and range query operations. Our implementations of these operations for segment trees worked by recursively descending through the tree, either directly if the tree is stored as a recursive data structure, or using simple operations on indices if the tree is stored in an array. However, when storing the active nodes of a thinned tree in a Fenwick array, it is not <em>a priori</em> obvious what operations on array indices will correspond to moving around the tree. In order to attack this problem, we first take a detour through a domain-specific language for two’s complement binary values.</p>
</div>
<div data-magellan-destination="s4" id="s4">

<h2><span>4</span> Two’s complement binary</h2>
<p> The bit tricks usually employed to implement Fenwick trees rely on a <em>two’s complement</em> representation of binary numbers, which allow positive and negative numbers to be represented in a uniform way; for example, a value consisting of all 1 bits represents <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline48.png?pub-status=live" width="19" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline48.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline48.png">
<span data-mathjax-type="texmath"><span>
$-1$
</span></span>
</span>
</span>. We therefore turn now to developing a domain-specific language, embedded in Haskell, for manipulating two’s complement binary representations.</p>
<p> First, we define a type of bits, with functions for inversion, logical conjunction, and logical disjunction:</p>
<div data-magellan-destination="dispU9001" id="dispU9001">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9001.png?pub-status=live" width="504" height="271" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9001.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9001.png"></p>
</div>

<p> Next, we must define bit strings, i.e. sequences of bits. Rather than fix a specific bit width, it will be much more elegant to work with <em>infinite</em> bit strings.<a href="#fn3"><span>Footnote </span>
<sup>3</sup>
</a> It is tempting to use standard Haskell lists to represent potentially infinite bit strings, but this leads to a number of problems. For example, equality of infinite lists is not decidable, and there is no way in general to convert from an infinite list of bits back to an <em>Integer</em>—how would we know when to stop? In fact, these practical problems stem from a more fundamental one: infinite lists of bits are actually a bad representation for two’s complement bit strings, because of “junk”, that is, infinite lists of bits which do not correspond to values in our intended semantic domain. For example, <em>cycle</em> [<em>I</em>,<em>O</em>] is an infinite list which alternates between <em>I</em> and <em>O</em> forever, but it does not represent a valid two’s complement encoding of an integer. Even worse are non-periodic lists, such as the one with <em>I</em> at every prime index and <em>O</em> everywhere else.</p>
<p> In fact, the bit strings we want are the <em>eventually constant</em> ones, that is, strings which eventually settle down to an infinite tail of all zeros (which represent nonnegative integers) or all ones (which represent negative integers). Every such string has a finite representation, so directly encoding eventually constant bit strings in Haskell not only gets rid of the junk but also leads to elegant, terminating algorithms for working with them.</p>
<div data-magellan-destination="dispU9002" id="dispU9002">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9002.png?pub-status=live" width="301" height="110" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9002.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9002.png"></p>
</div>

<p> 
<em>Rep b</em> represents an infinite sequence of bit <em>b</em>, whereas <em>Snoc bs b</em> represents the bit string <em>bs</em> followed by a final bit <em>b</em>. We use <em>Snoc</em>, rather than <em>Cons</em>, to match the way we usually write bit strings, with the least significant bit last. Note also the use of a <em>strictness annotation</em> on the <em>Bits</em> field of <em>Snoc</em>; this is to rule out infinite lists of bits using only <em>Snoc</em>, such as <em>bs</em>=<em>Snoc</em> (<em>Snoc bs O</em>) <em>I</em>. In other words, the only way to make a non-bottom value of type <em>Bits</em> is to have a finite sequence of <em>Snoc</em> finally terminated by <em>Rep</em>.</p>
<p> Although we have eliminated junk values, one remaining problem is that there can be multiple distinct representations of the same value. For example, <em>Snoc</em> (<em>Rep O</em>) <em>O</em> and <em>Rep O</em> both represent the infinite bit string containing all zeros. However, we can solve this with a carefully constructed <em>bidirectional pattern synonym</em> (Pickering <em>et al</em>., <a href="#ref10"><span>Reference Pickering, Érdi, Peyton Jones and Eisenberg</span>2016</a>).</p>
<div data-magellan-destination="dispU9003" id="dispU9003">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9003.png?pub-status=live" width="432" height="291" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9003.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9003.png"></p>
</div>

<p> Matching with the pattern <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline50.png?pub-status=live" width="49" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline50.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline50.png">
<span data-mathjax-type="texmath"><span>
${({bs}\mathrel{:\!.}{b})}$
</span></span>
</span>
</span> uses a <em>view pattern</em> (Erwig &amp; Jones, <a href="#ref4"><span>Reference Erwig and Jones</span>2001</a>) to potentially expand a <em>Rep</em> one step into a <em>Snoc</em>, so that we can pretend <em>Bits</em> values are always constructed with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline51.png?pub-status=live" width="19" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline51.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline51.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span>. Conversely, constructing a <em>Bits</em> with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline52.png?pub-status=live" width="20" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline52.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline52.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> will do nothing if we happen to snoc an identical bit <em>b</em> onto an existing <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline53.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline53.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline53.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{b}}$
</span></span>
</span>
</span>. This ensures that as long as we stick to using <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline54.png?pub-status=live" width="20" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline54.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline54.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> and never directly use <em>Snoc</em>, <em>Bits</em> values will always be <em>normalized</em> so that the terminal <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline55.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline55.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline55.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{b}}$
</span></span>
</span>
</span> is immediately followed by a different bit. Finally, we mark the pattern <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline56.png?pub-status=live" width="20" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline56.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline56.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> as <span>COMPLETE</span> on its own, since matching on <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline57.png?pub-status=live" width="19" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline57.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline57.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> is indeed sufficient to handle every possible input of type <em>Bits</em>. However, in order to obtain terminating algorithms we will often include one or more special cases for <em>Rep</em>.</p>
<p> Let’s begin with some functions for converting <em>Bits</em> to and from <em>Integer</em> and for displaying <em>Bits</em> (intended only for testing).</p>
<div data-magellan-destination="dispU9004" id="dispU9004">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9004.png?pub-status=live" width="579" height="516" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9004.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9004.png"></p>
</div>

<p> Let’s try it out, using QuickCheck (Claessen &amp; Hughes, <a href="#ref3"><span>Reference Claessen and Hughes</span>2000</a>) to verify our conversion functions:</p>
<div data-magellan-destination="dispU9005" id="dispU9005">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9005.png?pub-status=live" width="675" height="385" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9005.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9005.png"></p>
</div>

<p> We can now begin implementing some basic operations on <em>Bits</em>. First, incrementing and decrementing can be implemented recursively as follows:</p>
<div data-magellan-destination="dispU9006" id="dispU9006">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9006.png?pub-status=live" width="317" height="243" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9006.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9006.png"></p>
</div>

<p> The <em>least significant bit</em>, or LSB, of a sequence of bits can be defined as follows:</p>
<div data-magellan-destination="dispU9007" id="dispU9007">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9007.png?pub-status=live" width="282" height="120" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9007.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9007.png"></p>
</div>

<p> Note that we add a special case for <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline58.png?pub-status=live" width="42" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline58.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline58.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{O}}$
</span></span>
</span>
</span> to ensure that <em>lsb</em> is total. Technically, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline59.png?pub-status=live" width="42" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline59.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline59.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{O}}$
</span></span>
</span>
</span> does not have a least significant bit, so defining <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline60.png?pub-status=live" width="136" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline60.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline60.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;({Rep}\;{O})\mathrel{=}{Rep}\;{O}}$
</span></span>
</span>
</span> seems sensible.</p>
<div data-magellan-destination="dispU9008" id="dispU9008">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9008.png?pub-status=live" width="337" height="253" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9008.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9008.png"></p>
</div>

<p> Bitwise logical conjunction can be defined straightforwardly. Note that we only need two cases; if the finite parts of the inputs have different lengths, matching with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline61.png?pub-status=live" width="19" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline61.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline61.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> will automatically expand the shorter one to match the longer one.</p>
<div data-magellan-destination="dispU9009" id="dispU9009">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9009.png?pub-status=live" width="431" height="107" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9009.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9009.png"></p>
</div>

<p> Bitwise inversion is likewise straightforward.</p>
<div data-magellan-destination="dispU9010" id="dispU9010">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9010.png?pub-status=live" width="270" height="89" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9010.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9010.png"></p>
</div>

<p> The above functions follow familiar patterns. We could easily generalize to eventually constant streams over an arbitrary element type and then implement <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9001.png?pub-status=live" width="26" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9001.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9001.png"> in terms of a generic <em>zipWith</em> and <em>inv</em> in terms of <em>map</em>. However, for the present purpose we do not need the extra generality.</p>
<p> We implement addition with the usual carry-propagation algorithm, along with some special cases for <em>Rep</em>.</p>
<div data-magellan-destination="dispU9011" id="dispU9011">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9011.png?pub-status=live" width="441" height="190" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9011.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9011.png"></p>
</div>

<p> It is not too hard to convince ourselves that this definition of addition is terminating and yields correct results; but we can also be fairly confident by just trying it with QuickCheck:</p>
<div data-magellan-destination="dispU9012" id="dispU9012">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9012.png?pub-status=live" width="871" height="78" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9012.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9012.png"></p>
</div>

<p> Finally, the following definition of negation is probably familiar to anyone who has studied two’s complement arithmetic; I leave it as an exercise for the interested reader to prove that <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline62.png?pub-status=live" width="124" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline62.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline62.png">
<span data-mathjax-type="texmath"><span>
${{x}\oplus{neg}\;{x}\equiv {Rep}\;{O}}$
</span></span>
</span>
</span> for all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline63.png?pub-status=live" width="51" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline63.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline63.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{::}{Bits}}$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="dispU9013" id="dispU9013">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9013.png?pub-status=live" width="274" height="86" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9013.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9013.png"></p>
</div>

<p> We now have the tools to resolve the first mystery of the Fenwick tree implementation.</p>
<p><span>Theorem 4.1</span> For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline64.png?pub-status=live" width="51" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline64.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline64.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{::}{Bits}}$
</span></span>
</span>
</span>,</p>

<div data-magellan-destination="dispU9014" id="dispU9014">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9014.png?pub-status=live" width="187" height="31" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9014.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9014.png"></p>
</div>

<p> 
<strong>Proof.</strong> By induction on <em>x</em>.</p>
<ul>
<li>

<p><span>•</span> First, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline65.png?pub-status=live" width="69" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline65.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline65.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{Rep}\;{O}}$
</span></span>
</span>
</span>, it is an easy calculation to verify that <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9002.png?pub-status=live" width="159" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9002.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9002.png">.</p>
</li>
<li>

<p><span>•</span> Likewise, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline66.png?pub-status=live" width="64" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline66.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline66.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{Rep}\;{I}}$
</span></span>
</span>
</span>, both <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline67.png?pub-status=live" width="30" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline67.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline67.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;{x}}$
</span></span>
</span>
</span> and <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9003.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9003.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9003.png"> reduce to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline68.png?pub-status=live" width="65" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline68.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline68.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{O}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span>.</p>
</li>
<li>

<p><span>•</span> If <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline69.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline69.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline69.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{O}}$
</span></span>
</span>
</span>, then <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline70.png?pub-status=live" width="208" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline70.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline70.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;{x}\mathrel{=}{lsb}\;({xs}\mathrel{:\!.}{O})\mathrel{=}{lsb}\;{xs}\mathrel{:\!.}{O}}$
</span></span>
</span>
</span> by definition, whereas</p>
<div data-magellan-destination="dispU9015" id="dispU9015">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9015.png?pub-status=live" width="615" height="342" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9015.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9015.png"></p>
</div>

</li>
<li>

<p><span>•</span> Next, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline71.png?pub-status=live" width="64" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline71.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline71.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span>, then <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline72.png?pub-status=live" width="153" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline72.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline72.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;({xs}\mathrel{:\!.}{I})\mathrel{=}{Rep}\;{O}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span> by definition, whereas</p>
</li>
</ul>

<div data-magellan-destination="dispU9016" id="dispU9016">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9016.png?pub-status=live" width="769" height="341" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9016.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9016.png"></p>
</div>

<p> For the last equality, we need a lemma that <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9004.png?pub-status=live" width="123" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9004.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9004.png">, which should be intuitively clear and can easily be proved by induction as well.</p>
<p> Finally, in order to express the index conversion functions we will develop in the next section, we need a few more things in our DSL. First, some functions to set and clear individual bits and to test whether particular bits are set:</p>
<div data-magellan-destination="dispU9017" id="dispU9017">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9017.png?pub-status=live" width="408" height="409" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9017.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9017.png"></p>
</div>

<p> The only other things we will need are left and right shift, and a generic <em>while</em> combinator that iterates a given function, returning the first iterate for which a predicate is false.</p>
<div data-magellan-destination="dispU9018" id="dispU9018">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9018.png?pub-status=live" width="424" height="268" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9018.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9018.png"></p>
</div>

</div>
<div data-magellan-destination="s5" id="s5">

<h2><span>5</span> Index conversion</h2>
<p> Before deriving our index conversion functions, we must deal with one slightly awkward fact. In a traditional binary tree indexing scheme, as shown in Figure&nbsp;<a href="#f9">9</a>, the root has index 1, every left child is twice its parent, and every right child is one more than twice its parent. Recall that in a thinned segment tree, the root node and every left child are active, with all right children being inactive. This makes the root an awkward special case—all active nodes have an even index, <em>except</em> the root, which has index 1. This makes it more difficult to check whether we are at an active node—it is not enough to simply look at the least significant bit.</p>
<p> One easy way to fix this is simply to give the root index 2 and then proceed to label the rest of the nodes using the same scheme—every left child is twice its parent, and every right child is one more than twice its parent. This results in the indexing shown in Figure&nbsp;<a href="#f14">14</a>, as if we had just taken the left subtree of the tree rooted at 1, and ignored the right subtree. Of course, this means about half the possible indices are omitted—but that’s not a problem, since we will only use these indices as an intermediate step which will eventually get fused away.</p>
<div data-magellan-destination="f14" id="f14">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig14.png?pub-status=live" width="2131" height="997" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig14.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig14.png"></p>
<div><p><span>Fig. 14</span> Indexing a binary tree with 2 at the root.</p>
</div></div>

<p> Figure&nbsp;<a href="#f15">15</a> shows a binary tree where nodes have been numbered in two different ways: the left side of each node shows the node’s binary tree index (with the root having index 2). The right side of each node shows its index in the Fenwick array, if it has one (inactive nodes simply have their right half greyed out). The table underneath shows the mapping from Fenwick array indices (top row) to binary tree indices (bottom row). As a larger example, Figure&nbsp;<a href="#f16">16</a> shows the same thing on a binary tree one level deeper.</p>
<div data-magellan-destination="f15" id="f15">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig15.png?pub-status=live" width="3134" height="1941" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig15.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig15.png"></p>
<div><p><span>Fig. 15</span> Binary tree labelled with both binary and Fenwick indexing.</p>
</div></div>

<div data-magellan-destination="f16" id="f16">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig16.png?pub-status=live" width="3654" height="1535" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig16.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig16.png"></p>
<div><p><span>Fig. 16</span> Binary tree labelled with both binary and Fenwick indexing.</p>
</div></div>

<p> Our goal is to come up with a way to calculate the binary index for a given Fenwick index or vice versa. Staring at the table in Figure&nbsp;<a href="#f16">16</a>, a few patterns stand out. Of course, all the numbers in the bottom row are even, which is precisely because the binary tree is numbered in such a way that all active nodes have an even index. Second, we can see the even numbers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline73.png?pub-status=live" width="83" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline73.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline73.png">
<span data-mathjax-type="texmath"><span>
$32, 34 \ldots 46$
</span></span>
</span>
</span>, in order, in all the odd positions. These are exactly the leaves of the tree, and indeed, every other node in the Fenwick array will be a leaf from the original tree. Alternating with these, in the even positions, are the numbers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline74.png?pub-status=live" width="91" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline74.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline74.png">
<span data-mathjax-type="texmath"><span>
$16\;\; 8\;\; 18\;\; 4 \ldots$
</span></span>
</span>
</span>, which correspond to all the non-leaf nodes; but these are exactly the sequence of binary indices from the bottom row of the table in Figure&nbsp;<a href="#f15">15</a>—since the internal nodes in a tree of height 4 themselves constitute a tree of height 3, with the nodes occurring in the same order.</p>
<p> These observations lead to the recurrence shown in Figure&nbsp;<a href="#f17">17</a> for the sequence <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline75.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline75.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline75.png">
<span data-mathjax-type="texmath"><span>
$b_n$
</span></span>
</span>
</span> of binary indices for the nodes stored in a Fenwick array of length <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline76.png?pub-status=live" width="14" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline76.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline76.png">
<span data-mathjax-type="texmath"><span>
$2^n$
</span></span>
</span>
</span>: <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline77.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline77.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline77.png">
<span data-mathjax-type="texmath"><span>
$b_0$
</span></span>
</span>
</span> is just the singleton sequence [2], and otherwise <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline78.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline78.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline78.png">
<span data-mathjax-type="texmath"><span>
$b_n$
</span></span>
</span>
</span> is the even numbers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline79.png?pub-status=live" width="224" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline79.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline79.png">
<span data-mathjax-type="texmath"><span>
$2^{n+1}, 2^{n+1} + 2, \ldots, 2^{n+1} + 2^n - 2$
</span></span>
</span>
</span> interleaved with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline80.png?pub-status=live" width="28" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline80.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline80.png">
<span data-mathjax-type="texmath"><span>
$b_{n-1}$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="f17" id="f17">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig17.png?pub-status=live" width="1753" height="729" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig17.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig17.png"></p>
<div><p><span>Fig. 17</span> Recurrence for sequence of binary tree indices in a Fenwick array.</p>
</div></div>

<p> We can check that this does in fact reproduce the observed sequence for <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline81.png?pub-status=live" width="35" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline81.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline81.png">
<span data-mathjax-type="texmath"><span>
$n = 4$
</span></span>
</span>
</span>:</p>
<div data-magellan-destination="dispU9019" id="dispU9019">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9019.png?pub-status=live" width="576" height="78" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9019.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9019.png"></p>
</div>

<p> Let <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline82.png?pub-status=live" width="31" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline82.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline82.png">
<span data-mathjax-type="texmath"><span>
${{s}\text{ ! }{k}}$
</span></span>
</span>
</span> denote the <em>k</em>th item in the list <em>s</em> (counting from 1), as defined in Figure&nbsp;<a href="#f18">18</a>. The same figure also lists two easy lemmas about the interaction between indexing and interleaving, namely <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline83.png?pub-status=live" width="152" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline83.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline83.png">
<span data-mathjax-type="texmath"><span>
${({xs}{\curlyvee}{ys})\text{ ! }(\mathrm{2}\cdot{j})\mathrel{=}{ys}\text{ ! }{j}}$
</span></span>
</span>
</span> and <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline84.png?pub-status=live" width="181" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline84.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline84.png">
<span data-mathjax-type="texmath"><span>
${({xs}{\curlyvee}{ys})\text{ ! }(\mathrm{2}\cdot{j}\mathbin{-}\mathrm{1})\mathrel{=}{xs}\text{ ! }{j}}$
</span></span>
</span>
</span> (as long as <em>xs</em> and <em>ys</em> have equal lengths). With these in hand, we can define the Fenwick to binary index conversion function as </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU1.png?pub-status=live" width="115" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU1.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU1.png">
<span data-mathjax-type="texmath"><span>
\[ {{f2b}\;{n}\;{k}\mathrel{=}{b}\;{n}\text{ ! }{k}}. \]
</span></span>
</span>
</p><p> Of course, since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline85.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline85.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline85.png">
<span data-mathjax-type="texmath"><span>
$b_n$
</span></span>
</span>
</span> is of length <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline86.png?pub-status=live" width="14" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline86.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline86.png">
<span data-mathjax-type="texmath"><span>
$2^n$
</span></span>
</span>
</span>, this function is only defined on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline87.png?pub-status=live" width="40" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline87.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline87.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^n]$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="f18" id="f18">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig18.png?pub-status=live" width="406" height="276" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig18.png"></p>
<div><p><span>Fig. 18</span> Indexing and interleaving.</p>
</div></div>

<p> We can now simplify the definition of <em>f2b</em> as follows. First of all, for even inputs, we have</p>
<div data-magellan-destination="dispU9020" id="dispU9020">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9020.png?pub-status=live" width="572" height="321" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9020.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9020.png"></p>
</div>

<p> And for odd inputs,</p>
<div data-magellan-destination="dispU9021" id="dispU9021">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9021.png?pub-status=live" width="659" height="343" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9021.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9021.png"></p>
</div>

<p> Thus, we have </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU2.png?pub-status=live" width="261" height="51" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU2.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU2.png">
<span data-mathjax-type="texmath"><span>
\[ {{f2b}\;{n}\;{k}} = \begin{cases} {{f2b}\;({n}\mathbin{-}\mathrm{1})\;({k}\mathbin{/}\mathrm{2})} &amp; k \text{ even} \\ 2^{n+1} + k - 1 &amp; k \text{ odd} \end{cases} \]
</span></span>
</span>
</p><p> Note that when <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline88.png?pub-status=live" width="40" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline88.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline88.png">
<span data-mathjax-type="texmath"><span>
$n = 0,$
</span></span>
</span>
</span> we must have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline89.png?pub-status=live" width="34" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline89.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline89.png">
<span data-mathjax-type="texmath"><span>
$k = 1$
</span></span>
</span>
</span>, and hence, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline90.png?pub-status=live" width="167" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline90.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline90.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;\mathrm{0}\;\mathrm{1}} = 2^0 + 1 - 1 = 1$
</span></span>
</span>
</span>, as required, so this definition is valid for all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline91.png?pub-status=live" width="29" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline91.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline91.png">
<span data-mathjax-type="texmath"><span>
$n {\geqslant} 0$
</span></span>
</span>
</span>. Now factor <em>k</em> uniquely as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline92.png?pub-status=live" width="34" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline92.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline92.png">
<span data-mathjax-type="texmath"><span>
$2^a \cdot b$
</span></span>
</span>
</span> where <em>b</em> is odd. Then by induction we can see that </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU3.png?pub-status=live" width="316" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU3.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU3.png">
<span data-mathjax-type="texmath"><span>
\[ {{f2b}\;{n}\;(\mathrm{2}^ {{a}}\cdot{b})\mathrel{=}{f2b}\;({n}\mathbin{-}{a})\;{b}} = 2^{n-a+1} + b - 1. \]
</span></span>
</span>
</p><p> So, in other words, computing <em>f2b</em> consists of repeatedly dividing by 2 (i.e. right bit shifts) as long as the input is even and then finally decrementing and adding a power of 2. However, knowing what power of 2 to add at the end depends on knowing how many times we shifted. A better way to think of it is to add <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline93.png?pub-status=live" width="28" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline93.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline93.png">
<span data-mathjax-type="texmath"><span>
$2^{n+1}$
</span></span>
</span>
</span> at the <em>beginning</em>, and then let it be shifted along with everything else. Thus, we have the following definition of <em>f2b’</em> using our <em>Bits</em> DSL. Defining <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline94.png?pub-status=live" width="201" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline94.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline94.png">
<span data-mathjax-type="texmath"><span>
${{shift}\;{n}\mathrel{=}{while}\;{even}\;{shr}\mathbin{\circ}{set}\;{n}}$
</span></span>
</span>
</span> separately will make some of our proofs more compact later.</p>
<div data-magellan-destination="dispU9022" id="dispU9022">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9022.png?pub-status=live" width="312" height="134" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9022.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9022.png"></p>
</div>

<p> For example, we can verify that this produces identical results to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline95.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline95.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline95.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;\mathrm{4}}$
</span></span>
</span>
</span> on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline96.png?pub-status=live" width="41" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline96.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline96.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^4]$
</span></span>
</span>
</span> (for convenience, we define <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline97.png?pub-status=live" width="163" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline97.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline97.png">
<span data-mathjax-type="texmath"><span>
${({f}\mathbin{===}{g})\;{k}\mathrel{=}{f}\;{k}\equiv {g}\;{k}}$
</span></span>
</span>
</span>):</p>
<div data-magellan-destination="dispU9023" id="dispU9023">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9023.png?pub-status=live" width="738" height="80" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9023.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9023.png"></p>
</div>

<p> We now turn to deriving <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline98.png?pub-status=live" width="36" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline98.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline98.png">
<span data-mathjax-type="texmath"><span>
${{b2f}\;{n}}$
</span></span>
</span>
</span>, which converts back from binary to Fenwick indices. <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline99.png?pub-status=live" width="35" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline99.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline99.png">
<span data-mathjax-type="texmath"><span>
${{b2f}\;{n}}$
</span></span>
</span>
</span> should be a left inverse to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline100.png?pub-status=live" width="39" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline100.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline100.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;{n}}$
</span></span>
</span>
</span>, that is, for any <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline101.png?pub-status=live" width="66" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline101.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline101.png">
<span data-mathjax-type="texmath"><span>
$k \in [1, 2^n]$
</span></span>
</span>
</span> we should have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline102.png?pub-status=live" width="126" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline102.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline102.png">
<span data-mathjax-type="texmath"><span>
${{b2f}\;{n}\;({f2b}\;{n}\;{k})\equiv {k}}$
</span></span>
</span>
</span>. If <em>k</em> is an input to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline103.png?pub-status=live" width="27" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline103.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline103.png">
<span data-mathjax-type="texmath"><span>
${{f2b}}$
</span></span>
</span>
</span>, we have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline104.png?pub-status=live" width="89" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline104.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline104.png">
<span data-mathjax-type="texmath"><span>
$k = 2^a \cdot b {\leqslant} 2^n$
</span></span>
</span>
</span>, and so <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline105.png?pub-status=live" width="84" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline105.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline105.png">
<span data-mathjax-type="texmath"><span>
$b-1 &lt; 2^{n-a}$
</span></span>
</span>
</span>. Hence, given the output <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline106.png?pub-status=live" width="200" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline106.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline106.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;{n}\;{k}} = m = 2^{n-a+1} + b - 1$
</span></span>
</span>
</span>, the highest bit of <em>m</em> is <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline107.png?pub-status=live" width="43" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline107.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline107.png">
<span data-mathjax-type="texmath"><span>
$2^{n-a+1}$
</span></span>
</span>
</span>, and the rest of the bits represent <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline108.png?pub-status=live" width="35" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline108.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline108.png">
<span data-mathjax-type="texmath"><span>
$b-1$
</span></span>
</span>
</span>. So, in general, given some <em>m</em> which is the output of <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline109.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline109.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline109.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;{n}}$
</span></span>
</span>
</span>, we can write it uniquely as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline110.png?pub-status=live" width="75" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline110.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline110.png">
<span data-mathjax-type="texmath"><span>
$m = 2^c + d$
</span></span>
</span>
</span> where <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline111.png?pub-status=live" width="55" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline111.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline111.png">
<span data-mathjax-type="texmath"><span>
$d &lt; 2^{c-1}$
</span></span>
</span>
</span>; then </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU4.png?pub-status=live" width="219" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU4.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU4.png">
<span data-mathjax-type="texmath"><span>
\[ {{b2f}\;{n}\;(\mathrm{2}^ {{c}}\mathbin{+}{d})\mathrel{=}\mathrm{2}^ {{n}\mathbin{-}{c}\mathbin{+}\mathrm{1}}\cdot({d}\mathbin{+}\mathrm{1})}. \]
</span></span>
</span>
</p><p> In other words, given the input <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline112.png?pub-status=live" width="43" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline112.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline112.png">
<span data-mathjax-type="texmath"><span>
$2^c + d$
</span></span>
</span>
</span>, we subtract off the highest bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline113.png?pub-status=live" width="13" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline113.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline113.png">
<span data-mathjax-type="texmath"><span>
$2^c$
</span></span>
</span>
</span>, increment, then left shift <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline114.png?pub-status=live" width="62" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline114.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline114.png">
<span data-mathjax-type="texmath"><span>
$n-c+1$
</span></span>
</span>
</span> times. Again, though, there is a simpler way: we can increment first (note since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline115.png?pub-status=live" width="55" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline115.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline115.png">
<span data-mathjax-type="texmath"><span>
$d &lt; 2^{c-1}$
</span></span>
</span>
</span>, incrementing cannot disturb the bit at <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline116.png?pub-status=live" width="13" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline116.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline116.png">
<span data-mathjax-type="texmath"><span>
$2^c$
</span></span>
</span>
</span>), then left shift enough times to bring the leftmost bit into position <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline117.png?pub-status=live" width="34" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline117.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline117.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span>, and finally remove it. That is:</p>
<div data-magellan-destination="dispU9024" id="dispU9024">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9024.png?pub-status=live" width="485" height="137" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9024.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9024.png"></p>
</div>

<p> Verifying:</p>
<div data-magellan-destination="dispU9025" id="dispU9025">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9025.png?pub-status=live" width="817" height="79" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9025.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9025.png"></p>
</div>

</div>
<div data-magellan-destination="s6" id="s6">

<h2><span>6</span> Deriving Fenwick operations</h2>
<p> We can now finally derive the required operations on Fenwick array indices for moving through the tree, by starting with operations on a binary indexed tree and conjugating by conversion to and from Fenwick indices. First, in order to fuse away the resulting conversion, we will need a few lemmas.</p>
<div data-magellan-destination="lem6_1" id="lem6_1">

<p><span>Lemma 6.1</span> (shr-inc-dec). For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline118.png?pub-status=live" width="58" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline118.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline118.png">
<span data-mathjax-type="texmath"><span>
${{bs}\mathbin{::}{Bits}}$
</span></span>
</span>
</span> which are odd (that is, end with I),</p>
<ul>
<li>

<p><span>•</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline119.png?pub-status=live" width="147" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline119.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline119.png">
<span data-mathjax-type="texmath"><span>
${({shr}\mathbin{\circ}{dec})\;{bs}\mathrel{=}{shr}\;{bs}}$
</span></span>
</span>
</span>
</p>
</li>
<li>

<p><span>•</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline120.png?pub-status=live" width="191" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline120.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline120.png">
<span data-mathjax-type="texmath"><span>
${({shr}\mathbin{\circ}{inc})\;{bs}\mathrel{=}({inc}\mathbin{\circ}{shr})\;{bs}}$
</span></span>
</span>
</span>
</p>
</li>
</ul>

</div>

<p><span>Proof</span> Both are immediate by definition.</p>

<div data-magellan-destination="lem6_2" id="lem6_2">

<p><span>Lemma 6.2</span> (while-inc-dec). <em>The following both hold for all Bits values:</em>
</p>
<ul>
<li>

<p><span>•</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline121.png?pub-status=live" width="274" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline121.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline121.png">
<span data-mathjax-type="texmath"><span>
${{inc}\mathbin{\circ}{while}\;{odd}\;{shr}\mathrel{=}{while}\;{even}\;{shr}\mathbin{\circ}{inc}}$
</span></span>
</span>
</span>
</p>
</li>
<li>

<p><span>•</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline122.png?pub-status=live" width="280" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline122.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline122.png">
<span data-mathjax-type="texmath"><span>
${{dec}\mathbin{\circ}{while}\;{even}\;{shr}\mathrel{=}{while}\;{odd}\;{shr}\mathbin{\circ}{dec}}$
</span></span>
</span>
</span>
</p>
</li>
</ul>

</div>

<p> 
<strong>Proof.</strong> Easy proof by induction on <em>Bits</em>. For example, for the <em>inc</em> case, the functions on both sides discard consecutive 1 bits and then flip the first 0 bit to a 1.</p>
<p> Finally, we will need a lemma about shifting zero bits in and out of the right side of a value.</p>
<div data-magellan-destination="lem6_3" id="lem6_3">

<p><span>Lemma 6.3</span> (shl-shr). For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline123.png?pub-status=live" width="83" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline123.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline123.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^{n+2}$
</span></span>
</span>
</span>, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU5.png?pub-status=live" width="531" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU5.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU5.png">
<span data-mathjax-type="texmath"><span>
\[ {({while}\;(not\mathbin{\circ}{test}\;({n}\mathbin{+}\mathrm{1}))\;{shl}\mathbin{\circ}{while}\;{even}\;{shr})\;{x}\mathrel{=}{while}\;(not\mathbin{\circ}{test}\;({n}\mathbin{+}\mathrm{1}))\;{shl}\;{x}}. \]
</span></span>
</span>
</p>

</div>

<p><span>Proof</span> Intuitively, this says that if we first shift out all the zero bits and then left shift until bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline124.png?pub-status=live" width="35" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline124.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline124.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span> is set, we could get the same result by forgetting about the right shifts entirely; shifting out zero bits and then shifting them back in should be the identity.</p>

<p> Formally, the proof is by induction on <em>x</em>. If <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline125.png?pub-status=live" width="64" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline125.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline125.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span> is odd, the equality is immediate since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline126.png?pub-status=live" width="133" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline126.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline126.png">
<span data-mathjax-type="texmath"><span>
${{while}\;{even}\;{shr}\;{x}\mathrel{=}{x}}$
</span></span>
</span>
</span>. Otherwise, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline127.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline127.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline127.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{O}}$
</span></span>
</span>
</span>, on the left-hand side the <em>O</em> is immediately discarded by <em>shr</em>, whereas on the right-hand side <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline128.png?pub-status=live" width="99" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline128.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline128.png">
<span data-mathjax-type="texmath"><span>
${{xs}\mathrel{:\!.}{O}\mathrel{=}{shl}\;{xs}}$
</span></span>
</span>
</span>, and the extra <em>shl</em> can be absorbed into the <em>while</em> since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline129.png?pub-status=live" width="62" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline129.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline129.png">
<span data-mathjax-type="texmath"><span>
${{xs}} &lt; 2^{n+1}$
</span></span>
</span>
</span>. What remains is simply the induction hypothesis.</p>
<p> With these lemmas under our belt, let’s see how to move around a Fenwick array in order to implement <em>update</em> and <em>query</em>; we’ll begin with <em>update</em>. When implementing the <em>update</em> operation, we need to start at a leaf and follow the path up to the root, updating all the active nodes along the way. In fact, for any given leaf, its closest active parent is precisely the node stored in the slot that used to correspond to that leaf (see Figure&nbsp;<a href="#f13">13</a>). So to update index <em>i</em>, we just need to start at index <em>i</em> in the Fenwick array, and then repeatedly find the closest active parent, updating as we go. Recall that the imperative code for <em>update</em> works this way, apparently finding the closest active parent at each step by adding the LSB of the current index:</p>
<div data-magellan-destination="dispU9026" id="dispU9026">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9026.png?pub-status=live" width="538" height="95" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9026.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9026.png"></p>
</div>

<p> Let’s see how to derive this behavior.</p>
<p> To find the closest active parent of a node under a binary indexing scheme, we first move up to the immediate parent (by dividing the index by two, i.e. performing a right bit shift); then continue moving up to the next immediate parent as long as the current node is a right child (i.e. has an odd index). This yields the definition:</p>
<div data-magellan-destination="dispU9027" id="dispU9027">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9027.png?pub-status=live" width="417" height="77" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9027.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9027.png"></p>
</div>

<p> This is why we used the slightly strange indexing scheme with the root having index 2—otherwise this definition would not work for any node whose active parent is the root!</p>
<p> Now, to derive the corresponding operation on Fenwick indices, we conjugate by conversion to and from Fenwick indices and compute as follows. To make the computation easier to read, the portion being rewritten is underlined at each step.</p>
<div data-magellan-destination="dispU9028" id="dispU9028">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9028.png?pub-status=live" width="876" height="481" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9028.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9028.png"></p>
</div>

<p> In the final step, since the input <em>x</em> satisfies <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline130.png?pub-status=live" width="36" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline130.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline130.png">
<span data-mathjax-type="texmath"><span>
$x {\leqslant} 2^n$
</span></span>
</span>
</span>, we have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline131.png?pub-status=live" width="162" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline131.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline131.png">
<span data-mathjax-type="texmath"><span>
${{inc}\mathbin{\circ}{shift}\;({n}\mathbin{+}\mathrm{1})} &lt; 2^{n+2}$
</span></span>
</span>
</span>, so Lemma 6.3 applies.</p>
<p> Reading from right to left, the pipeline we have just computed performs the following steps:</p>
<p> 1. Set bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline132.png?pub-status=live" width="35" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline132.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline132.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span>
</p>
<p> 2. Shift out consecutive zeros until finding the least significant 1 bit</p>
<p> 3. Increment</p>
<p> 4. Shift zeros back in to bring the most significant bit back to position <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline133.png?pub-status=live" width="34" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline133.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline133.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span>, then clear it.</p>
<p> Intuitively, this does look a lot like adding the LSB! In general, to find the LSB, one must shift through consecutive 0 bits until finding the first 1; the question is how to keep track of how many 0 bits were shifted on the way. The <em>lsb</em> function itself keeps track via the recursion stack; after finding the first 1 bit, the recursion stack unwinds and re-snocs all the 0 bits recursed through on the way. The above pipeline represents an alternative approach: set bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline134.png?pub-status=live" width="35" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline134.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline134.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span> as a “sentinel” to keep track of how much we have shifted; right shift until the first 1 is literally in the ones place, at which point we increment; and then shift all the 0 bits back in by doing left shifts until the sentinel bit gets back to the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline135.png?pub-status=live" width="34" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline135.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline135.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span> place. One example of this process is illustrated in Figure&nbsp;<a href="#f19">19</a>. Of course, this only works for values that are sufficiently small that the sentinel bit will not be disturbed throughout the operation.</p>
<div data-magellan-destination="f19" id="f19">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig19.png?pub-status=live" width="814" height="1280" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig19.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig19.png"></p>
<div><p><span>Fig. 19</span> Adding LSB with a sentinel bit + shifts.</p>
</div></div>

<p> To make this more formal, we begin by defining a helper function <em>atLSB</em>, which does an operation “at the LSB”, that is, it shifts out 0 bits until finding a 1, applies the given function, then restores the 0 bits.</p>
<div data-magellan-destination="dispU9029" id="dispU9029">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9029.png?pub-status=live" width="370" height="128" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9029.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9029.png"></p>
</div>

<p><span>Lemma 6.4</span> (add-lsb). For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline136.png?pub-status=live" width="51" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline136.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline136.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{::}{Bits}}$
</span></span>
</span>
</span>, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline137.png?pub-status=live" width="152" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline137.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline137.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{+}{lsb}\;{x}\mathrel{=}{atLSB}\;{inc}\;{x}}$
</span></span>
</span>
</span> and <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline138.png?pub-status=live" width="156" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline138.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline138.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{-}{lsb}\;{x}\mathrel{=}{atLSB}\;{dec}\;{x}}$
</span></span>
</span>
</span>.</p>

<p><span>Proof</span> Straightforward induction on <em>x</em>.</p>

<p> We can formally relate the “shifting with a sentinel” scheme to the use of <em>atLSB</em>, with the following (admittedly rather technical) lemma:</p><p><span>Lemma 6.5</span> (sentinel). Let <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline139.png?pub-status=live" width="28" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline139.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline139.png">
<span data-mathjax-type="texmath"><span>
$n {\geqslant} 1$
</span></span>
</span>
</span> and let <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline140.png?pub-status=live" width="104" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline140.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline140.png">
<span data-mathjax-type="texmath"><span>
${{f}\mathbin{::}{Bits}\to {Bits}}$
</span></span>
</span>
</span> be a function such that</p>

<ol>
<li>

<p><span>1.</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline141.png?pub-status=live" width="246" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline141.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline141.png">
<span data-mathjax-type="texmath"><span>
${({f}\mathbin{\circ}{set}\;({n}\mathbin{+}\mathrm{1}))\;{x}\mathrel{=}({set}\;({n}\mathbin{+}\mathrm{1})\mathbin{\circ}{f})\;{x}}$
</span></span>
</span>
</span> for any <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline142.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline142.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline142.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n$
</span></span>
</span>
</span>, and</p>
</li>
<li>

<p><span>2.</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline143.png?pub-status=live" width="69" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline143.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline143.png">
<span data-mathjax-type="texmath"><span>
${{f}\;{x}} &lt; 2^{n+1}$
</span></span>
</span>
</span> for any <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline144.png?pub-status=live" width="117" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline144.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline144.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n + 2^{n-1}$
</span></span>
</span>
</span>.</p>
</li>
</ol>

<p> Then for all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline145.png?pub-status=live" width="68" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline145.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline145.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n$
</span></span>
</span>
</span>, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU6.png?pub-status=live" width="319" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU6.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU6.png">
<span data-mathjax-type="texmath"><span>
\[ {({unshift}\;({n}\mathbin{+}\mathrm{1})\mathbin{\circ}{f}\mathbin{\circ}{shift}\;({n}\mathbin{+}\mathrm{1}))\;{x}\mathrel{=}{atLSB}\;{f}\;{x}}. \]
</span></span>
</span>
</p>

<p> The proof is rather tedious and not all that illuminating, so we omit it</p>
<p> (an extended version including a full proof may be found on the author’s website, at <a href="http://ozark.hendrix.edu/">http://ozark.hendrix.edu/</a> yorgey/pub/Fenwick-ext.pdf). However, we do note that both <em>inc</em> and <em>dec</em> fit the criteria for <em>f</em>: incrementing or decrementing some <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline146.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline146.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline146.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n$
</span></span>
</span>
</span> cannot affect the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline147.png?pub-status=live" width="46" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline147.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline147.png">
<span data-mathjax-type="texmath"><span>
$(n+1)$
</span></span>
</span>
</span>st bit as long as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline148.png?pub-status=live" width="29" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline148.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline148.png">
<span data-mathjax-type="texmath"><span>
$n {\geqslant} 1$
</span></span>
</span>
</span>, and the result of incrementing or decrementing a number less than <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline149.png?pub-status=live" width="62" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline149.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline149.png">
<span data-mathjax-type="texmath"><span>
$2^n + 2^{n-1}$
</span></span>
</span>
</span> will be a number less than <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline150.png?pub-status=live" width="28" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline150.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline150.png">
<span data-mathjax-type="texmath"><span>
$2^{n+1}$
</span></span>
</span>
</span>. We can now put all the pieces together show that adding the LSB at each step is the correct way to implement <em>update</em>.</p>
<div data-magellan-destination="the6_6" id="the6_6">

<p><span>Theorem 6.6</span> Adding the LSB is the correct way to move up a Fenwick-indexed tree to the nearest active parent, that is, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU7.png?pub-status=live" width="520" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU7.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU7.png">
<span data-mathjax-type="texmath"><span>
\[ {{activeParentFenwick}\mathrel{=}{b2f'}\;{n}\mathbin{\circ}{activeParentBinary}\mathbin{\circ}{f2b'}\;{n}\mathrel{=}\lambda {x}\to {x}\mathbin{+}{lsb}\;{x}} \]
</span></span>
</span>
</p><p> everywhere on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline151.png?pub-status=live" width="40" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline151.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline151.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^n)$
</span></span>
</span>
</span>. (We exclude <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline152.png?pub-status=live" width="14" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline152.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline152.png">
<span data-mathjax-type="texmath"><span>
$2^n$
</span></span>
</span>
</span> since it corresponds to the root of the tree under a Fenwick indexing scheme.)</p>
</div>

<p> <strong>Proof</strong></p>
<div data-magellan-destination="dispU9030" id="dispU9030">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9030.png?pub-status=live" width="631" height="268" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9030.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9030.png"></p>
</div>

<p> We can carry out a similar process to derive an implementation for prefix query (which supposedly involves <em>subtracting</em> the LSB). Again, if we want to compute the sum of [1, <em>j</em>], we can start at index <em>j</em> in the Fenwick array, which stores the sum of the unique segment ending at <em>j</em>. If the node at index <em>j</em> stores the segment [<em>i</em>,<em>j</em>], we next need to find the unique node storing a segment that ends at <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline153.png?pub-status=live" width="31" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline153.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline153.png">
<span data-mathjax-type="texmath"><span>
$i-1$
</span></span>
</span>
</span>. We can do this repeatedly, adding up segments as we go.</p>
<p> Staring at Figure&nbsp;<a href="#f20">20</a> for inspiration, we can see that what we want to do is find the <em>left sibling</em> of our <em>closest inactive parent</em>, that is, we go up until finding the first ancestor which is a right child, then go to its left sibling. Under a binary indexing scheme, this can be implemented simply as:</p>
<div data-magellan-destination="f20" id="f20">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig20.png?pub-status=live" width="2136" height="1096" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig20.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig20.png"></p>
<div><p><span>Fig. 20</span> Moving up a segment tree to find successive prefix segments.</p>
</div></div>

<div data-magellan-destination="dispU9031" id="dispU9031">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9031.png?pub-status=live" width="447" height="75" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9031.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9031.png"></p>
</div>

<div data-magellan-destination="the6_7" id="the6_7">

<p><span>Theorem 6.7</span> Subtracting the LSB is the correct way to move up a Fenwick-indexed tree to the active node covering the segment previous to the current one, that is, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU8.png?pub-status=live" width="524" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU8.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU8.png">
<span data-mathjax-type="texmath"><span>
\[ {{prevSegmentFenwick}\mathrel{=}{b2f'}\;{n}\mathbin{\circ}{prevSegmentBinary}\mathbin{\circ}{f2b'}\;{n}\mathrel{=}\lambda {x}\to {x}\mathbin{-}{lsb}\;{x}} \]
</span></span>
</span>
</p><p> everywhere on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline154.png?pub-status=live" width="41" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline154.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline154.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^n)$
</span></span>
</span>
</span>.</p>
</div>

<div data-magellan-destination="prf5" id="prf5">

<p><span>Proof</span> 
</p><div data-magellan-destination="dispU9032" id="dispU9032">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9032.png?pub-status=live" width="788" height="539" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9032.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9032.png"></p>
</div>

</div>

</div>
<div data-magellan-destination="s7" id="s7">

<h2><span>7</span> Conclusion</h2>
<p> Historically, to my knowledge, Fenwick trees were not actually developed as an optimization of segment trees as presented here. This has merely been a fictional—but hopefully illuminating—alternate history of ideas, highlighting the power of functional thinking, domain-specific languages, and equational reasoning to explore relationships between different structures and algorithms. As future work, it would be interesting to explore some of the mentioned generalizations of segment trees, to see whether one can derive Fenwick-like structures that support additional operations.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Never seen anything like this' – NIH meetings and travel halted abruptly (145 pts)]]></title>
            <link>https://www.nature.com/articles/d41586-025-00231-y</link>
            <guid>42817910</guid>
            <pubDate>Fri, 24 Jan 2025 23:21:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nature.com/articles/d41586-025-00231-y">https://www.nature.com/articles/d41586-025-00231-y</a>, See on <a href="https://news.ycombinator.com/item?id=42817910">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-test="access-teaser"> <figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504406.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504406.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="The exterior of a Vaccine Research Center of National Institutes of Allergy and Infectious Diseases (NIAID) at NIH. in the U.S." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504406.jpg"><figcaption><p><span>A vaccine research centre on the campus of the National Institutes of Health in Bethesda, Maryland.</span><span>Credit: Alamy</span></p></figcaption></picture></figure><p>Confusion and anxiety is rippling through the US health-research community this week following <a href="https://www.nature.com/articles/d41586-025-00197-x" data-track="click" data-label="https://www.nature.com/articles/d41586-025-00197-x" data-track-category="body text link">Donald Trump taking office as the 47th US president</a>. His administration has abruptly cancelled research-grant reviews, travel and trainings for scientists inside and outside the National Institutes of Health (NIH), the world’s largest public biomedical funder. Adding to the worry: the Trump team appears to have deleted entire webpages about diversity programmes and diversity-related grants from the agency’s site.</p><article data-label="Related"><a href="https://www.nature.com/articles/d41586-024-03736-0" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50471522.jpg"><p>Major biomedical funder NIH poised for massive reform under Trump 2.0</p></a></article><p>The cancelling of meetings and travel is part of a pause in external communications issued on 21 January by the NIH’s parent organization, the US Department of Health and Human Services (HHS). Researchers who spoke to <i>Nature</i> say that although a short, daylong pause in communications at US agencies has occurred in the past when new administrations have started, to reorient strategy, the reach and length of the Trump team’s — it is set to last until at least 1 February — is unprecedented. Without advisory-committee meetings, the NIH cannot issue research grants, temporarily freezing 80% of the agency’s US$47-billion budget that funds research across the country and beyond.</p><p>“I’ve never seen anything like this before,” says Carole LaBonne, a developmental biologist at Northwestern University in Evanston, Illinois, who has received funding from the agency for more than 20 years. The uncertainty caused by the pause will be “devastating for the scientific community”, particularly for early-career researchers, LaBonne adds.</p><p>The pause includes “mass communications and public appearances that are not directly related to emergencies or critical to preserving health”, according to an NIH spokesperson. “This is a short pause to allow the new team to set up a process for review and prioritization.”</p><p>NIH and HHS spokespeople did not respond to queries about whether grant-review panels were considered public appearances and why they were cancelled, or about concerns from researchers that the pause will hinder the agency’s mission.</p><h2>A mission under threat?</h2><p>Typically, the NIH awards research grants after two separate panels of independent specialists in a particular scientific field have reviewed project proposals. On Wednesday, reports emerged on the <a href="https://x.com/gsducker/status/1882176107405013168" data-track="click" data-label="https://x.com/gsducker/status/1882176107405013168" data-track-category="body text link">social-media platforms X</a> <a href="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track="click" data-label="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track-category="body text link">and </a><a href="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track="click" data-label="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track-category="body text link">Bluesky</a> that grant-review panels scheduled prior to 2 February had been cancelled without any indication of when they would be rescheduled.</p><article data-label="Related"><a href="https://www.nature.com/articles/d41586-025-00197-x" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504258.jpg"><p>What Trump’s flurry of executive orders means for science</p></a></article><p>These panels, called ‘study sections’ and ‘advisory councils’, are sometimes scheduled a year in advance and can include more than 30 participating researchers, so it will take time to reschedule and might result in a ‘domino effect’ of cancellations. Researchers awaiting a grant-review decision “may be laid off or forced to seek employment elsewhere if funding is uncertain or delayed”, LaBonne says. Early-career researchers are particularly at risk, “as it can mean missing research milestones and jeopardize hiring, promotion and tenure decisions”, she adds.</p><p>Harold Varmus, a former NIH director who is now a cancer researcher at Weill Cornell Medicine in New York City, says that putting a hold on communications of new policies when there’s a new presidential administration can make sense. But the extensive remit of the current pause is counter to the agency’s mission, he says. The US Congress allocates budget money to the NIH for funding research, he adds, so “the will of Congress will be challenged if we don’t change what is going on”.</p><p>Esther Choo, an emergency-medicine physician at the Oregon Health &amp; Science University in Portland, <a href="https://bsky.app/profile/choo.bsky.social/post/3lgeks3sp7k2i" data-track="click" data-label="https://bsky.app/profile/choo.bsky.social/post/3lgeks3sp7k2i" data-track-category="body text link">wrote on Bluesky on 22 January</a> that a study section she was supposed to participate in was cancelled this week. As a reviewer on grant proposals, she said, you constantly read ideas for research projects that could be “a game changer in health”. She added: “I hope we get back on track soon. There are real people, real lives waiting on the science.”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Lightpanda, an open-source headless browser in Zig (231 pts)]]></title>
            <link>https://github.com/lightpanda-io/browser</link>
            <guid>42817439</guid>
            <pubDate>Fri, 24 Jan 2025 22:15:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/lightpanda-io/browser">https://github.com/lightpanda-io/browser</a>, See on <a href="https://news.ycombinator.com/item?id=42817439">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a href="https://lightpanda.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/724ab0ebf840402c19f060613ddf7325e901d6b37fd3c7ed6c72ec278ff51c1c/68747470733a2f2f63646e2e6c6967687470616e64612e696f2f6173736574732f696d616765732f6c6f676f2f6c70642d6c6f676f2e706e67" alt="Logo" height="170" data-canonical-src="https://cdn.lightpanda.io/assets/images/logo/lpd-logo.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Lightpanda Browser</h2><a id="user-content-lightpanda-browser" aria-label="Permalink: Lightpanda Browser" href="#lightpanda-browser"></a></p>
<p dir="auto"><a href="https://lightpanda.io/" rel="nofollow">lightpanda.io</a></p>
<p dir="auto"><a href="https://github.com/lightpanda-io/browser/commits/main"><img src="https://camo.githubusercontent.com/bd89bc3f2433bdd3f082a6333bc730ed0dda1f3085cf214e0509f64a9af27cd0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f6c6967687470616e64612d696f2f62726f77736572" alt="Commit Activity" data-canonical-src="https://img.shields.io/github/commit-activity/m/lightpanda-io/browser"></a>
<a href="https://github.com/lightpanda-io/browser/blob/main/LICENSE"><img src="https://camo.githubusercontent.com/2319a00670dc456df2849c9abef84e1e77689f093f9c28f92fff3946af70f301/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6c6967687470616e64612d696f2f62726f77736572" alt="License" data-canonical-src="https://img.shields.io/github/license/lightpanda-io/browser"></a>
<a href="https://twitter.com/lightpanda_io" rel="nofollow"><img src="https://camo.githubusercontent.com/280d25e78f9721602e5435e41fe5c3a042f327306ecaff835d07fadc38dece32/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6c6967687470616e64615f696f" alt="Twitter Follow" data-canonical-src="https://img.shields.io/twitter/follow/lightpanda_io"></a>
<a href="https://github.com/lightpanda-io/browser"><img src="https://camo.githubusercontent.com/46dacea76d8f88071e7194f7e6525372f421c33afc1743993a434f3c01e8fd07/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6c6967687470616e64612d696f2f62726f77736572" alt="GitHub stars" data-canonical-src="https://img.shields.io/github/stars/lightpanda-io/browser"></a></p>
<p dir="auto">Lightpanda is the open-source browser made for headless usage:</p>
<ul dir="auto">
<li>Javascript execution</li>
<li>Support of Web APIs (partial, WIP)</li>
<li>Compatible with Playwright, Puppeteer through CDP (WIP)</li>
</ul>
<p dir="auto">Fast web automation for AI agents, LLM training, scraping and testing with minimal memory footprint:</p>
<ul dir="auto">
<li>Ultra-low memory footprint (9x less than Chrome)</li>
<li>Exceptionally fast execution (11x faster than Chrome) &amp; instant startup</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/523cfe4ac41a2ab2deccebd0b9197e8232a4a25c0511d014408181064ae853da/68747470733a2f2f63646e2e6c6967687470616e64612e696f2f6173736574732f696d616765732f62656e63686d61726b5f323032342d31322d30342e706e67"><img width="500px" src="https://camo.githubusercontent.com/523cfe4ac41a2ab2deccebd0b9197e8232a4a25c0511d014408181064ae853da/68747470733a2f2f63646e2e6c6967687470616e64612e696f2f6173736574732f696d616765732f62656e63686d61726b5f323032342d31322d30342e706e67" data-canonical-src="https://cdn.lightpanda.io/assets/images/benchmark_2024-12-04.png"></a></p>
<p dir="auto">See <a href="https://github.com/lightpanda-io/demo">benchmark details</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick start" href="#quick-start"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install from the nightly builds</h3><a id="user-content-install-from-the-nightly-builds" aria-label="Permalink: Install from the nightly builds" href="#install-from-the-nightly-builds"></a></p>
<p dir="auto">You can download the last binary from the <a href="https://github.com/lightpanda-io/browser/releases/tag/nightly">nightly
builds</a> for
Linux x86_64 and MacOS aarch64.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Download the binary
$ wget https://github.com/lightpanda-io/browser/releases/download/nightly/lightpanda-x86_64-linux
$ chmod a+x ./lightpanda-x86_64-linux
$ ./lightpanda-x86_64-linux -h
usage: ./lightpanda-x86_64-linux [options] [URL]

  start Lightpanda browser

  * if an url is provided the browser will fetch the page and exit
  * otherwhise the browser starts a CDP server

  -h, --help      Print this help message and exit.
  --host          Host of the CDP server (default &quot;127.0.0.1&quot;)
  --port          Port of the CDP server (default &quot;9222&quot;)
  --timeout       Timeout for incoming connections of the CDP server (in seconds, default &quot;3&quot;)
  --dump          Dump document in stdout (fetch mode only)"><pre># <span>Download the binary</span>
$ <span>wget https://github.com/lightpanda-io/browser/releases/download/nightly/lightpanda-x86_64-linux</span>
$ <span>chmod a+x ./lightpanda-x86_64-linux</span>
$ <span>./lightpanda-x86_64-linux -h</span>
<span>usage: ./lightpanda-x86_64-linux [options] [URL]</span>

<span>  start Lightpanda browser</span>

<span>  * if an url is provided the browser will fetch the page and exit</span>
<span>  * otherwhise the browser starts a CDP server</span>

<span>  -h, --help      Print this help message and exit.</span>
<span>  --host          Host of the CDP server (default "127.0.0.1")</span>
<span>  --port          Port of the CDP server (default "9222")</span>
<span>  --timeout       Timeout for incoming connections of the CDP server (in seconds, default "3")</span>
<span>  --dump          Dump document in stdout (fetch mode only)</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Dump an URL</h3><a id="user-content-dump-an-url" aria-label="Permalink: Dump an URL" href="#dump-an-url"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="$ ./lightpanda-x86_64-linux --dump https://lightpanda.io
info(browser): GET https://lightpanda.io/ http.Status.ok
info(browser): fetch script https://api.website.lightpanda.io/js/script.js: http.Status.ok
info(browser): eval remote https://api.website.lightpanda.io/js/script.js: TypeError: Cannot read properties of undefined (reading 'pushState')
<!DOCTYPE html>"><pre>$ <span>./lightpanda-x86_64-linux --dump https://lightpanda.io</span>
<span>info(browser): GET https://lightpanda.io/ http.Status.ok</span>
<span>info(browser): fetch script https://api.website.lightpanda.io/js/script.js: http.Status.ok</span>
<span>info(browser): eval remote https://api.website.lightpanda.io/js/script.js: TypeError: Cannot read properties of undefined (reading 'pushState')</span>
<span>&lt;!DOCTYPE html&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Start a CDP server</h3><a id="user-content-start-a-cdp-server" aria-label="Permalink: Start a CDP server" href="#start-a-cdp-server"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="$ ./lightpanda-x86_64-linux --host 127.0.0.1 --port 9222
info(websocket): starting blocking worker to listen on 127.0.0.1:9222
info(server): accepting new conn..."><pre>$ <span>./lightpanda-x86_64-linux --host 127.0.0.1 --port 9222</span>
<span>info(websocket): starting blocking worker to listen on 127.0.0.1:9222</span>
<span>info(server): accepting new conn...</span></pre></div>
<p dir="auto">Once the CDP server started, you can run a Puppeteer script by configuring the
<code>browserWSEndpoint</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="'use scrict'

import puppeteer from 'puppeteer-core';

// use browserWSEndpoint to pass the Lightpanda's CDP server address.
const browser = await puppeteer.connect({
  browserWSEndpoint: &quot;ws://127.0.0.1:9222&quot;,
});

// The rest of your script remains the same.
const context = await browser.createBrowserContext();
const page = await context.newPage();

await page.goto('https://wikipedia.com/');

await page.close();
await context.close();"><pre><span>'use scrict'</span>

<span>import</span> <span>puppeteer</span> <span>from</span> <span>'puppeteer-core'</span><span>;</span>

<span>// use browserWSEndpoint to pass the Lightpanda's CDP server address.</span>
<span>const</span> <span>browser</span> <span>=</span> <span>await</span> <span>puppeteer</span><span>.</span><span>connect</span><span>(</span><span>{</span>
  <span>browserWSEndpoint</span>: <span>"ws://127.0.0.1:9222"</span><span>,</span>
<span>}</span><span>)</span><span>;</span>

<span>// The rest of your script remains the same.</span>
<span>const</span> <span>context</span> <span>=</span> <span>await</span> <span>browser</span><span>.</span><span>createBrowserContext</span><span>(</span><span>)</span><span>;</span>
<span>const</span> <span>page</span> <span>=</span> <span>await</span> <span>context</span><span>.</span><span>newPage</span><span>(</span><span>)</span><span>;</span>

<span>await</span> <span>page</span><span>.</span><span>goto</span><span>(</span><span>'https://wikipedia.com/'</span><span>)</span><span>;</span>

<span>await</span> <span>page</span><span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
<span>await</span> <span>context</span><span>.</span><span>close</span><span>(</span><span>)</span><span>;</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build from sources</h2><a id="user-content-build-from-sources" aria-label="Permalink: Build from sources" href="#build-from-sources"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<p dir="auto">Lightpanda is written with <a href="https://ziglang.org/" rel="nofollow">Zig</a> <code>0.13.0</code>. You have to
install it with the right version in order to build the project.</p>
<p dir="auto">Lightpanda also depends on
<a href="https://github.com/lightpanda-io/zig-js-runtime/">zig-js-runtime</a> (with v8),
<a href="https://www.netsurf-browser.org/" rel="nofollow">Netsurf libs</a> and
<a href="https://microsoft.github.io/mimalloc" rel="nofollow">Mimalloc</a>.</p>
<p dir="auto">To be able to build the v8 engine for zig-js-runtime, you have to install some libs:</p>
<p dir="auto">For Debian/Ubuntu based Linux:</p>
<div data-snippet-clipboard-copy-content="sudo apt install xz-utils \
    python3 ca-certificates git \
    pkg-config libglib2.0-dev \
    gperf libexpat1-dev \
    cmake clang"><pre><code>sudo apt install xz-utils \
    python3 ca-certificates git \
    pkg-config libglib2.0-dev \
    gperf libexpat1-dev \
    cmake clang
</code></pre></div>
<p dir="auto">For MacOS, you only need cmake:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Install and build dependencies</h3><a id="user-content-install-and-build-dependencies" aria-label="Permalink: Install and build dependencies" href="#install-and-build-dependencies"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">All in one build</h4><a id="user-content-all-in-one-build" aria-label="Permalink: All in one build" href="#all-in-one-build"></a></p>
<p dir="auto">You can run <code>make install</code> to install deps all in one (or <code>make install-dev</code> if you need the development versions).</p>
<p dir="auto">Be aware that the build task is very long and cpu consuming, as you will build from sources all dependancies, including the v8 Javascript engine.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Step by step build dependancy</h4><a id="user-content-step-by-step-build-dependancy" aria-label="Permalink: Step by step build dependancy" href="#step-by-step-build-dependancy"></a></p>
<p dir="auto">The project uses git submodules for dependencies.</p>
<p dir="auto">To init or update the submodules in the <code>vendor/</code> directory:</p>

<p dir="auto"><strong>Netsurf libs</strong></p>
<p dir="auto">Netsurf libs are used for HTML parsing and DOM tree generation.</p>

<p dir="auto">For dev env, use <code>make install-netsurf-dev</code>.</p>
<p dir="auto"><strong>Mimalloc</strong></p>
<p dir="auto">Mimalloc is used as a C memory allocator.</p>

<p dir="auto">For dev env, use <code>make install-mimalloc-dev</code>.</p>
<p dir="auto">Note: when Mimalloc is built in dev mode, you can dump memory stats with the
env var <code>MIMALLOC_SHOW_STATS=1</code>. See
<a href="https://microsoft.github.io/mimalloc/environment.html" rel="nofollow">https://microsoft.github.io/mimalloc/environment.html</a>.</p>
<p dir="auto"><strong>zig-js-runtime</strong></p>
<p dir="auto">Our own Zig/Javascript runtime, which includes the v8 Javascript engine.</p>
<p dir="auto">This build task is very long and cpu consuming, as you will build v8 from sources.</p>
<div data-snippet-clipboard-copy-content="make install-zig-js-runtime"><pre><code>make install-zig-js-runtime
</code></pre></div>
<p dir="auto">For dev env, use <code>make iinstall-zig-js-runtime-dev</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Test</h2><a id="user-content-test" aria-label="Permalink: Test" href="#test"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Unit Tests</h3><a id="user-content-unit-tests" aria-label="Permalink: Unit Tests" href="#unit-tests"></a></p>
<p dir="auto">You can test Lightpanda by running <code>make test</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Web Platform Tests</h3><a id="user-content-web-platform-tests" aria-label="Permalink: Web Platform Tests" href="#web-platform-tests"></a></p>
<p dir="auto">Lightpanda is tested against the standardized <a href="https://web-platform-tests.org/" rel="nofollow">Web Platform
Tests</a>.</p>
<p dir="auto">The relevant tests cases are committed in a <a href="https://github.com/lightpanda-io/wpt">dedicated repository</a> which is fetched by the <code>make install-submodule</code> command.</p>
<p dir="auto">All the tests cases executed are located in the <code>tests/wpt</code> sub-directory.</p>
<p dir="auto">For reference, you can easily execute a WPT test case with your browser via
<a href="https://wpt.live/" rel="nofollow">wpt.live</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Run WPT test suite</h4><a id="user-content-run-wpt-test-suite" aria-label="Permalink: Run WPT test suite" href="#run-wpt-test-suite"></a></p>
<p dir="auto">To run all the tests:</p>

<p dir="auto">Or one specific test:</p>
<div data-snippet-clipboard-copy-content="make wpt Node-childNodes.html"><pre><code>make wpt Node-childNodes.html
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Add a new WPT test case</h4><a id="user-content-add-a-new-wpt-test-case" aria-label="Permalink: Add a new WPT test case" href="#add-a-new-wpt-test-case"></a></p>
<p dir="auto">We add new relevant tests cases files when we implemented changes in Lightpanda.</p>
<p dir="auto">To add a new test, copy the file you want from the <a href="https://github.com/web-platform-tests/wpt">WPT
repo</a> into the <code>tests/wpt</code> directory.</p>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> Please keep the original directory tree structure of <code>tests/wpt</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Lightpanda accepts pull requests through GitHub.</p>
<p dir="auto">You have to sign our <a href="https://github.com/lightpanda-io/browser/blob/main/CLA.md">CLA</a> during the pull request process otherwise
we're not able to accept your contributions.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why?</h2><a id="user-content-why" aria-label="Permalink: Why?" href="#why"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Javascript execution is mandatory for the modern web</h3><a id="user-content-javascript-execution-is-mandatory-for-the-modern-web" aria-label="Permalink: Javascript execution is mandatory for the modern web" href="#javascript-execution-is-mandatory-for-the-modern-web"></a></p>
<p dir="auto">In the good old days, scraping a webpage was as easy as making an HTTP request, cURL-like. It’s not possible anymore, because Javascript is everywhere, like it or not:</p>
<ul dir="auto">
<li>Ajax, Single Page App, infinite loading, “click to display”, instant search, etc.</li>
<li>JS web frameworks: React, Vue, Angular &amp; others</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Chrome is not the right tool</h3><a id="user-content-chrome-is-not-the-right-tool" aria-label="Permalink: Chrome is not the right tool" href="#chrome-is-not-the-right-tool"></a></p>
<p dir="auto">If we need Javascript, why not use a real web browser? Take a huge desktop application, hack it, and run it on the server. Hundreds or thousands of instances of Chrome if you use it at scale. Are you sure it’s such a good idea?</p>
<ul dir="auto">
<li>Heavy on RAM and CPU, expensive to run</li>
<li>Hard to package, deploy and maintain at scale</li>
<li>Bloated, lots of features are not useful in headless usage</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Lightpanda is built for performance</h3><a id="user-content-lightpanda-is-built-for-performance" aria-label="Permalink: Lightpanda is built for performance" href="#lightpanda-is-built-for-performance"></a></p>
<p dir="auto">If we want both Javascript and performance in a true headless browser, we need to start from scratch. Not another iteration of Chromium, really from a blank page. Crazy right? But that’s we did:</p>
<ul dir="auto">
<li>Not based on Chromium, Blink or WebKit</li>
<li>Low-level system programming language (Zig) with optimisations in mind</li>
<li>Opinionated: without graphical rendering</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Status</h2><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<p dir="auto">Lightpanda is still a work in progress and is currently at a Beta stage.</p>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> You should expect most websites to fail or crash.</p>
<p dir="auto">Here are the key features we have implemented:</p>
<ul>
<li> HTTP loader</li>
<li> HTML parser and DOM tree (based on Netsurf libs)</li>
<li> Javascript support (v8)</li>
<li> Basic DOM APIs</li>
<li> Ajax
<ul>
<li> XHR API</li>
<li> Fetch API</li>
</ul>
</li>
<li> DOM dump</li>
<li> Basic CDP/websockets server</li>
</ul>
<p dir="auto">NOTE: There are hundreds of Web APIs. Developing a browser (even just for headless mode) is a huge task. Coverage will increase over time.</p>
<p dir="auto">You can also follow the progress of our Javascript support in our dedicated <a href="https://github.com/lightpanda-io/zig-js-runtime#development">zig-js-runtime</a> project.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Onit – open-source ChatGPT Desktop with local mode, Claude, Gemini (126 pts)]]></title>
            <link>https://github.com/synth-inc/onit</link>
            <guid>42817438</guid>
            <pubDate>Fri, 24 Jan 2025 22:15:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/synth-inc/onit">https://github.com/synth-inc/onit</a>, See on <a href="https://news.ycombinator.com/item?id=42817438">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p><a href="https://www.getonit.ai/" rel="nofollow">
    <img src="https://github.com/synth-inc/onit/raw/main/macos/Onit/Assets.xcassets/AppIcon.appiconset/app_icon_1x.png" alt="Onit Logo" width="128" height="128">
  </a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Onit</h2><a id="user-content-onit" aria-label="Permalink: Onit" href="#onit"></a></p>
<p dir="auto">Onit is an open-source AI chat assistant that lives in your desktop!</p>
<p dir="auto">It's like ChatGPT Desktop, but with <strong>local mode</strong> and support for <em>other</em> model providers (Anthropic, GoogleAI, xAI, etc). It's also like Cursor Chat, but everywhere on your computer - not just in your IDE!</p>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/423a469373a4df2fcb6c9ec21b71c28e92f94463b6b2885724deb6f3e35782c0/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f6f6e69745f6d61696e5f64656d6f2e676966"><img src="https://camo.githubusercontent.com/423a469373a4df2fcb6c9ec21b71c28e92f94463b6b2885724deb6f3e35782c0/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f6f6e69745f6d61696e5f64656d6f2e676966" alt="Onit Main Demo" width="800" height="auto" data-animated-image="" data-canonical-src="https://syntheticco.blob.core.windows.net/onit-media/onit_main_demo.gif"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🚀 Quick Start</h2><a id="user-content--quick-start" aria-label="Permalink: 🚀 Quick Start" href="#-quick-start"></a></p>
<ul dir="auto">
<li><strong>Download:</strong> Get the pre-built version from <a href="https://www.getonit.ai/" rel="nofollow">www.getonit.ai</a></li>
<li><strong>Build from source:</strong> Clone this repository and run in Xcode</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🎯 Why Onit?</h2><a id="user-content--why-onit" aria-label="Permalink: 🎯 Why Onit?" href="#-why-onit"></a></p>
<p dir="auto">We are building Onit based on these core beliefs:</p>
<ol dir="auto">
<li><strong>Universal Access:</strong> AI assistants should be accessible from anywhere on your computer, not just in browsers or specific apps.</li>
<li><strong>Provider Freedom:</strong> Users should have the choice between models and model providers (Anthropic, OpenAI, xAI, etc.) and not be locked into a single provider.</li>
<li><strong>Local First:</strong> AI is <em>much</em> more useful with access to your data. But that doesn't count for much if you have to upload personal files to an untrusted server first. Onit will always provide options for local processing. No personal data will leave your computer without explicit approval.</li>
<li><strong>Customizability:</strong> Onit is your assistant. You should be able to configure it to your liking.</li>
<li><strong>Extensibility:</strong> Onit should allow the community to build and share extensions, making it more useful for everyone.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">✨ Features</h2><a id="user-content--features" aria-label="Permalink: ✨ Features" href="#-features"></a></p>
<ul dir="auto">
<li><strong>🤖 Local Mode:</strong> Chat with any model running locally on Ollama - no internet required</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4117dd45bc55e3cfd916e55a01a62665422a2efe18c44d149e85dd0d3e5cdee4/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f6c6f63616c5f6d6f64655f64656d6f2e676966"><img src="https://camo.githubusercontent.com/4117dd45bc55e3cfd916e55a01a62665422a2efe18c44d149e85dd0d3e5cdee4/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f6c6f63616c5f6d6f64655f64656d6f2e676966" alt="Local Mode Demo" width="800" height="auto" data-animated-image="" data-canonical-src="https://syntheticco.blob.core.windows.net/onit-media/local_mode_demo.gif"></a>
</p>
<ul dir="auto">
<li><strong>🔄 Multi-Provider Support:</strong> Toggle between top models from OpenAI, Anthropic, and xAI</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b76b8fcb96c940b3d3766b7f3680b693190fbbc5723e22ebdabd53aa8a394ca1/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f3430735f6d756c74695f70726f76696465725f64656d6f2e676966"><img src="https://camo.githubusercontent.com/b76b8fcb96c940b3d3766b7f3680b693190fbbc5723e22ebdabd53aa8a394ca1/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f3430735f6d756c74695f70726f76696465725f64656d6f2e676966" alt="Multi-Provider Demo" width="800" height="auto" data-animated-image="" data-canonical-src="https://syntheticco.blob.core.windows.net/onit-media/40s_multi_provider_demo.gif"></a>
</p>
<ul dir="auto">
<li><strong>📎 File Upload:</strong> Add context through images or files (with drag &amp; drop support)</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2c7e97fa6b3c68b8103b033727a3e0a4ae5782bb52ea98a8110210deb9c94ffa/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f647261675f616e645f64726f705f64656d6f2e676966"><img src="https://camo.githubusercontent.com/2c7e97fa6b3c68b8103b033727a3e0a4ae5782bb52ea98a8110210deb9c94ffa/68747470733a2f2f73796e746865746963636f2e626c6f622e636f72652e77696e646f77732e6e65742f6f6e69742d6d656469612f647261675f616e645f64726f705f64656d6f2e676966" alt="File Upload Demo" width="800" height="auto" data-animated-image="" data-canonical-src="https://syntheticco.blob.core.windows.net/onit-media/drag_and_drop_demo.gif"></a>
</p>
<ul dir="auto">
<li><strong>📜 History:</strong> Access previous chats through history view or up/down arrow shortcuts</li>
<li><strong>⌨️ Customizable Shortcuts:</strong> Choose your hotkey to launch the chat window
<ul dir="auto">
<li>Default: <code>Command+0</code></li>
<li>Local: <code>Command+Shift+0</code></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🛠️ Technical Details</h2><a id="user-content-️-technical-details" aria-label="Permalink: 🛠️ Technical Details" href="#️-technical-details"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Local Mode Setup</h3><a id="user-content-local-mode-setup" aria-label="Permalink: Local Mode Setup" href="#local-mode-setup"></a></p>
<ol dir="auto">
<li>Download and install <a href="https://ollama.com/" rel="nofollow">Ollama</a></li>
<li>Onit will automatically detect your local models through Ollama's API</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Supported Models</h3><a id="user-content-supported-models" aria-label="Permalink: Supported Models" href="#supported-models"></a></p>
<ul dir="auto">
<li><strong>Remote:</strong>
<ul dir="auto">
<li>Anthropic (Claude)</li>
<li>OpenAI (GPT-4, GPT-3.5)</li>
<li>xAI (Grok)</li>
</ul>
</li>
<li><strong>Local:</strong> Any model supported by Ollama</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">📊 Data &amp; Privacy</h2><a id="user-content--data--privacy" aria-label="Permalink: 📊 Data &amp; Privacy" href="#-data--privacy"></a></p>
<ul dir="auto">
<li>No server component in V1</li>
<li>Local requests are handled locally</li>
<li>Remote requests go directly to model providers' APIs</li>
<li>Only crash reports are collected (via Firebase) and non-personal analytics (via PostHog)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">💡 Future Roadmap</h2><a id="user-content--future-roadmap" aria-label="Permalink: 💡 Future Roadmap" href="#-future-roadmap"></a></p>
<ul>
<li> Autocontext: Automatically pull context from your computer</li>
<li> Local-RAG: Index and create context from files without uploading</li>
<li> Local-typeahead: Like Cursor Tab, but everywhere</li>
<li> Computer Use &amp; Agents</li>
<li> Additional platform support (Linux/Windows)</li>
<li> More model providers (Mistral, Deepseek, etc.)</li>
<li> Bundled Ollama integration</li>
<li> And much more!</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">📝 License</h2><a id="user-content--license" aria-label="Permalink: 📝 License" href="#-license"></a></p>
<p dir="auto">Onit V1 is released under a Creative Commons Non-Commercial license. We believe in:</p>
<ul dir="auto">
<li>Open-source transparency</li>
<li>User customization freedom</li>
<li>Protection against commercial exploitation</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">💰 Monetization</h2><a id="user-content--monetization" aria-label="Permalink: 💰 Monetization" href="#-monetization"></a></p>
<p dir="auto">V1 is completely free. Future versions may include paid premium features, but:</p>
<ul dir="auto">
<li>Local chat will always remain free</li>
<li>Source code will remain open for customization</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">👥 About Us</h2><a id="user-content--about-us" aria-label="Permalink: 👥 About Us" href="#-about-us"></a></p>
<p dir="auto">We are Synth, Inc., a small team of developers in San Francisco building at the edge of AI progress. Other projects include:</p>
<ul dir="auto">
<li><a href="https://www.checkbin.dev/" rel="nofollow">Checkbin</a></li>
<li>Alias (deprecated - <a href="http://www.alias.inc/" rel="nofollow">www.alias.inc</a>)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🤝 Contact</h2><a id="user-content--contact" aria-label="Permalink: 🤝 Contact" href="#-contact"></a></p>
<p dir="auto">We'd love to hear from you! Reach out at <a href="mailto:contact@getonit.ai">contact@getonit.ai</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">❓ FAQ</h2><a id="user-content--faq" aria-label="Permalink: ❓ FAQ" href="#-faq"></a></p>
<p dir="auto"><strong>Q: Why not Linux or Windows?</strong><br>
A: We're starting with macOS. Based on reception, we'll expand platform support.</p>
<p dir="auto"><strong>Q: How can I contribute?</strong><br>
A: We welcome PRs! Feel free to customize Onit to your needs and share with the community.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trying out Zed after more than a decade of Vim/Neovim (173 pts)]]></title>
            <link>https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/</link>
            <guid>42817277</guid>
            <pubDate>Fri, 24 Jan 2025 21:53:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/">https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/</a>, See on <a href="https://news.ycombinator.com/item?id=42817277">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
<article>
    <p>I'm currently drafting this blog post in <a rel="noopener" target="_blank" href="https://zed.dev/">Zed</a>. After using Vim/Neovim for more than 15
years, I recently decided to try out something new. I don't know if this little
experiment will work, or if I'll run back to my trusty Neovim, but hey, what I do know
is that I'd like to find out.</p>
<h2 id="why-try-something-else">Why try something else?</h2>
<p>Why though? If you've used a specific tool for that long, why (try to) switch to
something else anyway? Everyone has their own reasons. I have two.</p>
<h3 id="1-the-desire-to-use-something-that-just-works">1. The desire to use something that just works</h3>
<p>Lately, I've been drifting towards things that "just work".</p>
<p>I love (Neo)Vim. Like I wrote earlier, it's been my primary editor for the past 15
years. What I don't love is all the configuration that goes into it before I can use it
to start writing code.</p>
<p>When I first started using Vim (in 2009!), my configuration was a tiny <code>.vimrc</code> file
that was handed over to me by my internship supervisor at that time. I had no idea what
it did, but it worked. Over time, as I felt the need to customize things, my <code>.vimrc</code>
started accumulating increasingly more code copied from StackOverflow that I didn't
understand.</p>
<p>At some point Neovim came out, and with it, the ability to configure things using Lua.
This was a huge step up, because I could at least understand what I was configuring.</p>
<p>Either way, it's still configuration. What changed was just <em>how</em> that configuration was
done. The combination of configuring the base editor and installing a set of plugins
(and making sure that they play nice with each other) isn't really something that I
would like to spend my time on, going forward.</p>
<p>One recent example that highlights this problem: my workflow consists of switching
back and forth between a terminal window and an editor window. At any time, I have
multiple projects open in both. On macOS, it's been difficult to find a solution that
"just works". The most popular Neovim GUI clients on macOS include <a rel="noopener" target="_blank" href="https://github.com/qvacua/vimr">Vimr</a> and <a rel="noopener" target="_blank" href="https://neovide.dev/">Neovide</a>,
which are both excellent projects. Neovide though, <a rel="noopener" target="_blank" href="https://github.com/neovide/neovide/issues/1332">does not support multiple windows</a>,
which is integral to my workflow and hence requires me to implement <a href="https://sgoel.dev/posts/switching-between-projects-in-neovim/">workarounds</a>, which
actually broke last week after I ran <code>:PackerUpdate</code>. And while Vimr does support
multiple windows, it is <a rel="noopener" target="_blank" href="https://github.com/qvacua/vimr/issues/887">not able to render icons in nvim-tree</a>, which is less than
ideal. 🤷🏻‍♂️</p>
<h3 id="2-deeper-and-native-llm-integration">2. Deeper and native LLM integration</h3>
<p>LLMs are happening, whether we like it or not. And no, the fact that they aren't 100%
correct all the time is not a reason to discard them entirely. I understand why some
people don't want to use them. And I respect that. I personally find them useful and
would like to integrate them more into my daily workflow.</p>
<p>The Neovim ecosystem has a bunch of plugins for using LLMs. But as I wrote in the
previous section, I'd like to avoid plugins when possible. Installing plugins means
updating them, which inevitably breaks things.</p>
<p>One example where I find LLMs useful when coding is handling boilerplate stuff. In my
current Neovim setup, I have the the <a rel="noopener" target="_blank" href="https://github.com/Exafunction/codeium.nvim">Codeium extension</a> installed, which offers code
suggestions that are like an autocomplete on steroids. Often, I can write a function
name and what parameters it's expecting, and the LLM writes out the function for me.
This is particularly helpful when writing small functions or test cases.</p>
<p>I'd like to be able to do more of such things in my editor. I'm not entirely sold on the
idea of agentic editors, as I'd like to keep at least <em>some</em> agency over the code that's
going in, but that's a different topic.</p>
<p>Another example of where I find LLMs useful: I'm not a native English speaker and often
struggle to find the right sentence framing that is both concise and catchy. LLMs are
excellent at this! I can scribble my initial thoughts, throw it at an LLM and ask it to
reframe the whole thing, which is great!</p>
<p>Generally, it feels like the way we're writing code is changing with the introduction of
this extremely powerful tool, and I'd like to move with the times.</p>
<h2 id="why-zed">Why Zed?</h2>
<p>So yeah, those are the two reasons why I've been looking to try out something else
lately. What made me go for Zed?</p>
<h3 id="1-vim-mode">1. Vim mode</h3>
<p>Yep, that's literally the first reason. After using Vim for 15 years, my fingers have
built up enough muscle memory that not using Vim keybindings when writing code is
downright impossible.</p>
<p>Zed's <a rel="noopener" target="_blank" href="https://zed.dev/docs/vim">Vim mode</a> is surprisingly solid! So far, I feel right at home. Almost all Vim
keybindings that I'm used to work just as expected. The one or two bindings that don't
work, are something that I can make my peace with and retrain my fingers on. Everything
else works excellent. It also looks like they're <a rel="noopener" target="_blank" href="https://zed.dev/blog/vim-2025">doubling down on their Vim mode</a>
support in 2025, which is a great sign!</p>
<h3 id="2-it-just-works">2. It just works</h3>
<p>When you fire up Zed, the editor is fully functional without having to write a single
line of configuration. That's awesome. The editor may prompt you every now and then to
install support for specific languages. But that's usually just one button click.</p>
<h3 id="3-json-configuration">3. JSON Configuration</h3>
<p>Lua is great, but one JSON file is even better. Zed uses JSON as the configuration
syntax and so far it feels a lot simpler than what I've worked with so far.</p>
<h3 id="4-configuration-autocomplete">4. Configuration autocomplete</h3>
<p>I had no idea I needed this until I had it!</p>
<p><img src="https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/zed-configuration-autocomplete.png" alt=""></p>
<p>While editing the Zed configuration file, I found it really helpful how the editor
suggests configuration keys and their potential values. This feature felt really
thoughtful when I first saw it and I could imagine that it goes a long way in getting
new users up to speed quicker.</p>
<h3 id="5-native-llm-integration">5. Native LLM integration</h3>
<p>I know some people have been turned off by this, but I actually like this feature.</p>
<p>Zed has a feature called Assistant, which is a tool to, well, assist you, using a large
language model of your choice. A few popular LLM providers are supported. Once set up,
you can open up the Assistant panel to work together with the language model you've
chosen. For instance, it's pretty easy to type in questions in the panel window and then
paste text from your open file buffers into it to give the LLM more context. There's a
lot more to this feature that I haven't used yet, but I'll probably get to it the more I
use it.</p>
<p>Overall, the integration feels very native and very useful.</p>
<h3 id="6-fast">6. Fast!</h3>
<p>Last but definitely not the least is speed! Zed is <em>very</em> fast. Everything feels very
snappy, and it's clear that the team has put a lot of effort into making everything
fast.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It's only been a day since I really started using Zed instead of Neovim as my daily
driver. And so far the experience has been quite nice.</p>
<p>Like I wrote earlier, this is an experiment. We'll see how things turn out. That being
said though, the first impression looks <strong>very</strong> good.</p>

</article>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The past, present, and future of UI at GitHub (102 pts)]]></title>
            <link>https://hawksley.org/2025/01/08/past-present-future-of-UI-at-github.html</link>
            <guid>42817163</guid>
            <pubDate>Fri, 24 Jan 2025 21:38:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hawksley.org/2025/01/08/past-present-future-of-UI-at-github.html">https://hawksley.org/2025/01/08/past-present-future-of-UI-at-github.html</a>, See on <a href="https://news.ycombinator.com/item?id=42817163">Hacker News</a></p>
<div id="readability-page-1" class="page"><p><em>Slides from my 2025 talk, as presented at Boulder Ruby. I also presented a variant of this talk at <a href="https://www.youtube.com/watch?v=a3_UNesxHr4">Vancouver Ruby</a>.</em></p><div>
  <table>
    <tbody><tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.001.jpeg">
      </td>
      <td>
        Hi!
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.002.jpeg">
      </td>
      <td>
        I want to start with gratitude. First and foremost for all of you. I’m so grateful for the Ruby community we have here in Boulder and am proud to be a part of it. I’m also proud of how we’ve stuck with it for what must be almost 20 years at this point, right Marty?<br>
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.003.jpeg">
      </td>
      <td>
        I’m also grateful for all of your attention, once a year, to share what I’ve learned. I hope what I’ve prepared for you all is enlightening and can help you improve at your craft, or at the very least, see the world in a new light.<p>Basically every Boulder Ruby talk I’ve given has been about something related to UI architecture.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.004.jpeg">
      </td>
      <td>
        My first time giving a talk at the meetup was when I was working on creating ViewComponent way back in early 2019. My talks since then have built on each other, following the evolving dynamics of the UI discipline at GitHub. Today’s presentation, my 7th, will be the last in this series.<p>Late last year, for reasons that aren’t interesting enough to elaborate on here, I was moved to another organization at GitHub, marking an end to nearly five years of working on our UI architecture. It was a bittersweet moment for me, as I had envisioned many more years working in the discipline.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.005.jpeg">
      </td>
      <td>
        As you might imagine, there were lots of thoughts and feelings going through my head when I was reassigned. This change came right as I was thinking about what I would talk about this year.<p>Today I’m going to reflect on what I’ve learned working on GitHub’s UI architecture and what lies ahead for our discipline in the future. My goal is to share our experiences so they can help inform similar decisions you’ll make in your careers.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.006.jpeg">
      </td>
      <td>
        So as a quick intro, my name is Joel. I live just down the road in Louisville with my wife and son. I’ve been building for the web for about 20 years now with over a decade working in Ruby on Rails. I got my start here at MojoTech, and in fact moved to Colorado when the Boulder office was first opened. I’ve since worked at a couple local startups before joining GitHub in early 2018.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.007.jpeg">
      </td>
      <td>
        Almost seven years later, I have no plans of leaving GitHub. Which honestly feels weird to say, given how short tenures tend to be in the industry. I love the culture, the problems I get to work on, and the wonderful colleagues I work with just as much as I did when I first joined. I recognize how extremely privileged I am to say that. Even amongst peers in the industry, it’s unusual to feel this way about a job.<p>But what has struck me the most about this mindset has been how it has changed my perspective on being a software engineer. </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.008.jpeg">
      </td>
      <td>
        One of the greatest parts of working on a single codebase for so long is getting to watch the entire lifecycle of your decisions. From idea to prototype, internal release, public availability, widespread adoption, and finally long-term, keep-the-lights-on support, we have so much to learn. When you're switching companies every year, two, or three, you’re missing out on learning those lessons.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.009.jpeg">
      </td>
      <td>
        I’ll start with my usual disclaimer: GitHub is a big company. What I’m sharing might or might not be relevant in your specific situation. Usually I’d share some stats about numbers of models, views, controllers, etc., this time I wanted to do something better: time-series data!<p>So I made a script similar to `rails stats` and ran it against one commit per month for the entire history of the GitHub monolith.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.010.jpeg">
      </td>
      <td>
        Today, we have about 5,000 models, 4,000 routes that render UI, and 2,100 controllers. There are about 650 people actively contributing to our monolith in a given month.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.011.jpeg">
      </td>
      <td>
        I’ve open-sourced the script I used to generate this data [here](https://github.com/joelhawksley/rails-history) if you care to run it on your codebases.<p>So with that context out of the way, let’s get to it. Today I’m going to share three lessons:
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.012.jpeg">
      </td>
      <td>
        Native as the new baseline
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.013.jpeg">
      </td>
      <td>
        The UI abstraction paradox
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.014.jpeg">
      </td>
      <td>
        Why frontend costs 10x backend
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.015.jpeg">
      </td>
      <td>
        Native as the new baseline<p>GitHub’s UI has gone through several eras, and you can see them to this day when browsing our views directory. One way to visualize this is with a tool called [git-of-theseus](https://github.com/erikbern/git-of-theseus). Running it on our nearly 2 million commits took a couple of days on an M1 Max:
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.016.jpeg">
      </td>
      <td>
        As you can see from this graph, our code sticks around! We aren't necessarily going back and deleting or significantly changing what has already been written. Which means that in a lot of cases, what we commit is frozen in time.<p>That is, until it has to change. In my time working in this area at GitHub, our standards for building UI have drastically changed, with the effect of making doing things the “right” way more and more complex.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.017.jpeg">
      </td>
      <td>
        For example, we now have availability and accessibility standards that didn’t exist when I joined the company. I’ve discussed the accessibility standards at length the last two years, but our [availability expectations](https://github.blog/news-insights/company-news/github-availability-report-november-2024/) are worth mentioning here:<p>For a long time, we accepted some amount of UI regressions as normal. While we never measured how many times we shipped UI bugs, it was generally accepted that we would never catch them all, but that we could rely on our ability to “fast follow” with either a rollback or bug fix when we (or just as often, someone on Twitter)</p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.018.jpeg">
      </td>
      <td>
        noticed a regression. That is no longer the case. We now consider UI bugs like any other bug, counting them against our availability scores if they are blocking users from using the product. Our standards are [three nines](https://uptime.is/three-nines) (99.9%), or about 8.5 hours of downtime a year. When a single CI and deploy cycle take at least half an hour, that doesn’t leave much, if any room for UI regressions that require a deploy to fix. <p>In discussions with other peers in the industry, these availability and accessibility standards are an exception to the rule. Many companies simply don’t prioritize them as much. This can mean that those who don’t understand the implications of those standards may expect us to deliver more than we do, especially folks joining GitHub from organizations with more lax expectations.</p><p>But beyond accessibility and availability, there is also a growing expectation of GitHub being more app-like.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.019.jpeg">
      </td>
      <td>
        One question I get whenever I tell someone I work on UI at GitHub is whether we are rewriting all of GitHub in React. Our current plan is to build new experiences in React, especially when they are app like.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.020.jpeg">
      </td>
      <td>
        The first case of this was when we rebuilt GitHub projects to bridge feature gaps with Azure DevOps, as MS wants enable AZDO customers to migrate to GitHub.<p>More broadly, GitHub is seeing market pressure from more app-like competitors, such as
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.021.jpeg">
      </td>
      <td>
        [Linear](https://linear.app/) and editor-based tools like
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.022.jpeg">
      </td>
      <td>
        [Cursor](https://www.cursor.com/)
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.023.jpeg">
      </td>
      <td>
        We made this decision a couple of years ago, and since then we’ve added about 250 React routes that serve about half of the average pages used by a given user in a week.<p>But I think the root cause of this pressure to be more app-like is much broader. As software continues to eat the world, a new population of consumers is emerging.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.024.jpeg">
      </td>
      <td>
        According to [Pew Research](https://www.pewresearch.org/internet/fact-sheet/mobile/), 15 percent of U.S. adults only access the internet through a mobile device.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.025.jpeg">
      </td>
      <td>
        Various reports estimate the around 90% of internet usage on mobile devices is [in apps](https://www.emarketer.com/content/the-majority-of-americans-mobile-time-spent-takes-place-in-apps). If you use apps all day, websites are a step back.<p>Which is all to say, that mobile is the new baseline. And we’re trying to match it using a technology stack originally built for displaying documents! While the Web has come a very long way, it wasn’t built from the ground up for building experiences that compete with the fidelity of native mobile applications.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.026.jpeg">
      </td>
      <td>
        I know I’m not the only person in the Rails community who has desired to keep the web the “way it was”, but times are changing. Consider this question: would you book an entire vacation using only your phone? Some people joke that this is the best way to tell the difference between millennials and younger generations. I’ll admit that this realization snuck up on me.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.027.jpeg">
      </td>
      <td>
        Of all the ideas I’ve seen through their lifecycle in my time at GitHub, it’s design systems. And unfortunately, there are sobering realities of design system adoption at scale. <p>As our availability and accessibility pressures have mounted, more and more teams have looked to our design system to help them meet those standards, as they should! But it’s had the effect of putting the hopes and dreams of many UI goals of the company on the shoulders of only a few people, in our case seven engineers staffed on Primer vs. around 650 working on the monolith.</p><p>And you can see this pressure in the very architecture of our design system:
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.028.jpeg">
      </td>
      <td>
        for a long time, Primer was just a library of CSS classes, much like Bootstrap was and Tailwind is today. But as we looked to improve availability and accessibility, we found it necessary to encapsulate markup and behavior, not just styles, leading us to
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.029.jpeg">
      </td>
      <td>
        React and ViewComponents. But it’s honestly been a struggle to build and maintain a design system that meets our standards, especially multiple implementations of it.<p>Primer is a victim of its own success: the more it’s adopted, the harder it is to change. Our experience has been the perfect example of [Hyrum’s Law](https://www.hyrumslaw.com/):
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.030.jpeg">
      </td>
      <td>

      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.031.jpeg">
      </td>
      <td>
        For example, take our Button component. It’s pretty simple, right? But it’s used 5,000 times in the GitHub monolith alone, 4,000 times in Rails and 1,000 times in React, sometimes in ways we don’t anticipate and don’t have tests for. While we do what we can to isolate our styles, the global nature of CSS makes it difficult to have the level of confidence we need to sleep well at night when shipping even small UI changes.<p>This means that making changes to the button are really hard to make confidently, no matter how small they are. Upgrading the version of Primer in GitHub.com has become increasingly stressful. While we’ve made strides towards reducing risk with tools like feature flags, we still ultimately rely on manual testing critical flows. Compared to similarly-shaped problems on the backend, we’re significantly behind in terms of confidence in our releases.</p><p>But there is a bigger problem.  Why are there so many design systems in the first place? We’re all inventing solutions to the same problems, and I can’t help but feel that there is a great deal of human potential being wasted on that duplication of effort.</p><p>Want to see what I mean? Here is the same Button component documentation from ZenDesk’s design system:
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.032.jpeg">
      </td>
      <td>
        The level of sameness, down to the structure of the documentation site itself, is eerily uncanny.<p>Some of you might see where I’m going: I believe it’s time for us to consider a Global Design System. And I’m not alone:
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.033.jpeg">
      </td>
      <td>
        Brad Frost is leading an effort: https://bradfrost.com/blog/post/a-global-design-system/<p>I’d encourage you to give it a read!
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.034.jpeg">
      </td>
      <td>
        So what does this mean for you? For one, I would recommend against building your own design system. We’ve even toyed with the idea of theming an existing design system (such as Radix) instead of building every new component we need ourselves. And we’re GitHub! 1500-engineer GitHub.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.035.jpeg">
      </td>
      <td>
        One of my favorite series of articles is the “falsehoods programmers believe about X”,
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.036.jpeg">
      </td>
      <td>
        especially the lists on Time (https://infiniteundo.com/post/25326999628/ falsehoods-programmers-believe-about-time)
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.037.jpeg">
      </td>
      <td>
        and names (https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/).
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.038.jpeg">
      </td>
      <td>
        In my research for this talk, I found a meta list of these articles: https://github.com/kdeldycke/awesome-falsehood, in typical Awesome X format!<p>But I think there is an article missing from that list, by Dave Rupert: </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.039.jpeg">
      </td>
      <td>
        Which I think he should have called “falsehoods programmers believe about UI.” <p>In his article, Rupert elaborates on the dozens of runtime inputs that can affect UI, many of which are outside the control of us developers. For example, browser extensions! So many UI bugs we have at GitHub are caused by browser extensions. I’d guess that it’s a significant fraction.</p><p>This is madness coming from the backend world.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.040.jpeg">
      </td>
      <td>
        We run all of GitHub.com on a single version of Ruby,
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.041.jpeg">
      </td>
      <td>
        But our HTML, CSS, and JavaScript runs on several major versions of each major browser
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.042.jpeg">
      </td>
      <td>
        Across a matrix of possible hardware stacks<p>You’d think that with such a massive difference in runtime variety that we would test our frontend code as thoroughly as possible, at least as thoroughly as our backend code, right? So why aren’t we testing our frontend code like our backend code?</p><p> For one, browser tests are slow and flaky compared to backend unit tests. But it’s also more structural: our backend code is more *testable* than our frontend code. Before we had components, we didn’t even have an abstraction *to test* that wasn’t an entire page, so that's how we wrote our tests, at the system level.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.043.jpeg">
      </td>
      <td>
        Thankfully, with component-driven UI, we are quickly turning the corner on this issue. We have effectively total test coverage for our components. But that isn’t enough, due to how varied the frontend runtime can be. Think about the amount of tooling and research around making perfect backend code. We can, with a bit of math, prove that mission critical systems such as avionics and S3 are immune from certain failure modes. In my research, there are little to no robust guarantees around frontend.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.044.jpeg">
      </td>
      <td>
        So as our application grows, so does the amount of frontend complexity we have to manage. Looking back at our graphs, the number of lines of frontend code per contributor was been stable for the past decade, until we started adopting React. For frontend lines of code, I summed the total number of lines of SCSS, CSS, viewcomponents, ERB, javascript, and typescript, excluding all test code:<p>This sign is concerning to me. Wouldn’t we expect our UI code to become less complex over time, given the availability of better abstractions like an increasingly usable design system?</p><p>One contributing factor I’ve observed is that design is not bound by the same constraints as engineering.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.045.jpeg">
      </td>
      <td>
          There is an imbalance in change cost between engineering and design. A designer could build a year's worth of engineering time in a week, maybe even a day or an hour. We have designs from four years ago we’re still aspiring to build! Because there are few natural limits, it's easy to build designs that are difficult to implement.<p>But the reality for us is more subtle. It’s fairly uncommon for us to *intend* to deviate from our design system. But because we are designing in an
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.046.jpeg">
      </td>
      <td>
        environment that is removed from the target medium (in our case, Figma), there is no guarantee that what is designed can be built with our components libraries, at least without compromises. I see an opportunity here for us to build our prototypes with our components instead of with Figma, as doing so would eliminate this gap.<p>I believe we’re most successful when we allocate our complexity for where it’s most necessary.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.047.jpeg">
      </td>
      <td>
        That might be things like diffs, four-dimensional drag-and-drop,
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.048.jpeg">
      </td>
      <td>
        or the merge box. These unique kinds of UIs have less convention and unique accessibility characteristics that are expensive to solve. But a lot of the time, our budget should be zero. To build it with what we have already. To copy-paste.<p>And I think our customers will prefer it! The people who use the software we build are likely interacting with dozens of other apps and a given day. Do we really want to expect people to relearn how to do the same thing differently every time they pick up a new app? Imagine if the car world worked this way. If every brand decided to put the accelerator in a different place. Let me give you an example: e-commerce checkouts.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.049.jpeg">
      </td>
      <td>
        For the love of God, why is there more than one way for me to provide my shipping address on the internet? Thank goodness for Shopify’s impact in standardizing this experience for a significant portion of online shopping these days!<p>I’ve had to fight with my inner artist to view everything as art, when really we’re building tools. Don’t get me wrong, art is a great medium for creativity! But this isn’t the place to prioritize it over usability. What’s exhausting to me about this problem is that things could not be more different on the backend: we regularly use and improve libraries that already exist, almost as a rule.
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.050.jpeg">
      </td>
      <td>
        As Rubyists I think we are really good about working together to improve open source software. Contributing changes back to Rails based on our experiences using it. The same should be true about UI frameworks and even browsers themselves.<br>
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.051.jpeg">
      </td>
      <td>
        One of the most inspiring things for me as I've done this work is seeing my colleagues work to improve the greater ecosystem. For example, my colleague Keith has worked to improve browsers to the point of enabling us to remove custom behavior from our code base. In just the past 18 months, he has contributed 100 patches across five different browsers! https://www.keithcirkel.co.uk/100-patches-to-5-browsers-in-18-months/
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.052.jpeg">
      </td>
      <td>
        I was recently asked by someone about whether their company should build their own design system from scratch. They had a single designer and a handful of engineers, at least an order of magnitude smaller than our team. Here’s what I told them: we can’t afford to maintain two implementations of our design system to our own standards. And even at our scale, we don't build all of our UI ourselves. For example, we use 3rd party charts (High charts) and tables (React Table).<p>So what can you do?
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.053.jpeg">
      </td>
      <td>
        I’d recommend thinking about UI complexity as something to budget for. And then spend it wisely, only inventing as little as absolutely possible. Because if there’s any lesson I’ve learned in my time working on Github’s UI architecture,
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.054.jpeg">
      </td>
      <td>
        It’s that the equivalent amount of code complexity costs 10x as much on the frontend as on the backend in the long run.<p>So in conclusion,
      </p></td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.055.jpeg">
      </td>
      <td>
        Native is the new baseline. Consider how your app compares to your competition, especially their native app experience.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.056.jpeg">
      </td>
      <td>
        The UI abstraction paradox is real. Beware the cost of reinventing the wheel and reuse existing design systems whenever possible.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.057.jpeg">
      </td>
      <td>
        And frontend costs 10x backend, so budget for frontend complexity wisely.
      </td>
    </tr>

    <tr>
      <td>
        <img src="https://hawksley.org/img/posts/2025-01-08-past-present-future-of-ui-at-github/slides.058.jpeg">
      </td>
      <td>
        Thank you
      </td>
    </tr>
  </tbody></table>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A very Chicago gamble (149 pts)]]></title>
            <link>https://www.bitsaboutmoney.com/archive/chicago-casino-investment-offering/</link>
            <guid>42816418</guid>
            <pubDate>Fri, 24 Jan 2025 19:56:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bitsaboutmoney.com/archive/chicago-casino-investment-offering/">https://www.bitsaboutmoney.com/archive/chicago-casino-investment-offering/</a>, See on <a href="https://news.ycombinator.com/item?id=42816418">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>This column doesn’t offer investment advice, as I am not a registered investment advisor. This is not merely a mandatory disclaimer; this is a warning. We will discuss some specific securities below that I am not <em>merely incapable</em> of recommending.</p><p>Finance performs a strange alchemy, teleporting value through time and space. Ordinarily, Bits about Money focuses more on the plumbing of it than the deals. But a deal enthusiast who goes by <a href="https://www.patreon.com/theconservativeincomeinvestor">The Conservative Income Investor</a> recently flagged a capital raise to me. It has everything: echoes of the culture that is the American PMC 2020-2024, complex financial structuring, a novel web application to move money, a crypto company in the background, and municipal politics. So it seems squarely within this column’s beat.</p><p>The municipality happens to be Chicago, my hometown and (after a 20 year stint in Japan) current residence. And so I feel some sense of civic duty, as a Chicagoan, taxpayer, and reasonably financially sophisticated person, to say the following publicly: <em>What the hell, Chicago.</em></p><p>But before we get to present-day shenanigans, we need to go back several decades, because municipal politics is inextricable from the shenanigans.</p><h2 id="chicago-has-wanted-a-casino-for-a-long-time">Chicago has wanted a casino for a long time</h2><p>Chicago and the state of Illinois more broadly have a deeply unserious polity. It has mortgaged its future through consistently overpaying public sector employees (principally, in Chicago, police/fire/teachers) and undertaxing. Neither decreasing total compensation of public sector employees nor reneging on previously-negotiated deferred compensation (pensions and healthcare for retirees) nor raising taxes to appropriate levels is considered politically palatable. One reason is that the <a href="https://www.ilga.gov/commission/lrb/conent.htm">Illinois state constitution</a> (Article 13 Section 5) makes public employee pensions sacrosanct. The constitution is, of course, not a fact of nature; it is a political compromise by, again, a deeply unserious polity.</p><p>Long-time watchers of state and local politics know Illinois pensions are the <a href="https://www.illinoispolicy.org/illinois-needs-responsible-tier-2-pension-reform/">worst funded in the nation</a>, state officials <a href="https://www.illinois.gov/news/press-release.26105.html">celebrate</a> when Wall Street upgrades its <a href="https://illinoiscomptroller.gov/financial-reports-data/data-sets-portals/illinois-bond-debt">credit rating</a> from close-to-junk, and the possibility of a federal bailout was a constant political issue for decades until it <a href="https://cookcountyrecord.com/stories/619617113-credit-200b-federal-bailout-not-pritzker-s-actions-for-improved-2023-il-budget">happened by stealth during covid</a>.</p><p>And so Illinois and Chicago specifically are constantly on the make for new revenue streams. One which was mooted <a href="https://repryanspain.com/2024/02/07/looking-back-riverboat-gambling-enacted-in-illinois-february-7-1990/">since my childhood in the 1980s</a> was an expansion of gambling. So-called sin taxes (on gambling, liquor, tobacco, and similar) are politically attractive because they do not cause as much opposition as raising consumption or property taxes.</p><p>And so Chicago has had a decades-long campaign to build a casino within city limits. Why couldn’t Chicago actually get this done in several decades? One reason is the usual incompetence. The other reason is that the political economy of casinos is controversial. Many policies create winners and losers, but casinos inescapably create losers <em>much more directly </em>than most policies up for vote. Local political elites often band together against them, worried about siphoning money from local consumers. They also worry that they tend to create spillover effects, such as crime and moral collapse among a portion of patrons.</p><p>And so, as I once mentioned in a <a href="https://www.thinkingpoker.net/2020/12/episode-341-patrick-mckenzie/">podcast with Thinking Poker</a>, pro-casino political coalitions try to pick off anti-casino political elites by assuaging their concerns and/or bribing them. (In Japan, the de facto concession was “We’ll limit the amount Japanese people can lose here and maximize for soaking Chinese tourists. Now, let’s write that down in a way which doesn’t say exactly that, because it sounds bad if you put it that way.”)</p><p>In Chicago, much of the opposition came from African American political elites. They had the usual set of concerns for casinos, plus one other which is slightly more idiosyncratic. A belief with wide currency in that community is that the community would be much more wealthy than it currently is, but for vice entrepreneurs siphoning that community’s resources out of the community. This belief has lead to e.g. <a href="https://www.latimes.com/california/story/2020-02-11/south-los-angeles-korean-liquor-protest-leimert-park-riots">pogroms</a> against Korean liquor store owners. I direct interested readers to histories of the Rodney King riots or the Asian American experience in 20th century America. (This was covered extensively in an elective I took more than 20 years ago, and so I have since forgotten the academic citations for this true but parenthetical point.)</p><p>Bally’s <a href="https://seminoletribune.org/ballys-wins-bid-for-chicago-casino/">won the bid</a> for the newly licensed Chicago casino in 2022, in part due to offering the right mix of concessions and inducements in its <a href="https://www.chicago.gov/city/en/sites/chicago-casino/home/hca.html">Host Community Agreement</a>. One of those was promising Chicago that the new casino would be at least 25% owned by women and Minorities. The M is capital in the Chicago municipal code, and I will preserve this stylistic choice, because the word does not mean what most educated Americans assume it means. We shall return to that meaning later.</p><h2 id="the-stock-offering">The stock offering</h2><p>In fulfillment of its obligations under the HCA, Bally’s Chicago, Inc., an entity in the corporate web which will build and operate the casino, has <a href="http://ballyschicagoinvest.com/">conducted a stock offering</a> since December. It runs through January 2025.</p><p>The stock offering has a <a href="https://www.sec.gov/Archives/edgar/data/1935799/000110465924132193/tm2310971-13_s1a.htm">prospectus</a> associated with it. BCI does not appear to be relying on an exemption from registration, in the fashion that e.g. most startups would, restricting them to raising money from accredited investors.</p><p>While reading the prospectus, I read a <a href="https://wirepoints.org/no-white-men-allowed-in-ballys-chicago-share-offering-promoted-by-city-officials-wirepoints/">much-remarked-upon</a> statement, and assumed it was a misprint.</p><p><em>This offering is only being made to individuals and entities that satisfy the Class A Qualification Criteria (as defined herein). Our Host Community Agreement with the City of Chicago requires that 25% of Bally’s Chicago OpCo’s equity must be owned by persons that have satisfied the Class A Qualification Criteria. The Class A Qualification Criteria include, among other criteria, that the person:</em></p><ul><li><em>if an individual, must be a woman;</em></li><li><em>if an individual, must be a Minority, as defined by MCC 2-92-670(n) (see below); or</em></li><li><em>if an entity, must be controlled by women or Minorities.</em></li></ul><p>Why did I assume this was a mistake? Well, for one thing, on the face of it Bally’s has told the SEC that this offering is only available to Minorities who are <em>also</em> women, which does not match the intent expressed elsewhere or during their roadshow. I have immense sympathy for drafting errors. Bally’s, feel free to let the lawyers know they forgot a significant “or” on the first bullet point. [<em>Post-publication edit</em>: An actual lawyer, not an Internet lawyer, informs me that the first bullet point has an implied "or" in this construction. Mea maxima culpa, associate who drafted this.] </p><p>The other reason I thought this was likely a mistake is that the American social, legal, and constitutional order is profoundly opposed to discrimination by race, and considers that action <em>malum in se</em>. Even when individual actors <em>want</em> to do it, they usually feel embarrassed enough about it to dissemble.&nbsp;</p><p>For example, the last few years tech companies <a href="https://x.com/patio11/status/1678235882481127427">absolutely</a>, <a href="https://www.wsj.com/articles/youtube-hiring-for-some-positions-excluded-white-and-asian-males-lawsuit-says-1519948013">notoriously</a> engaged in legally prohibited discrimination in hiring, sometimes as an intentionally directed and explicitly written down policy. This is often assumed to be a conspiracy theory by disaffected white males. Perhaps that is an understandable belief, since people who read the project plans either a) supported them or b) value their future careers and are therefore mostly not leaking them, and thus we only have public evidence of those project plans which end up screenshotted in litigation. Similarly, when I say that the state of California <a href="https://worksinprogress.co/issue/the-story-of-vaccinateca/">proudly engaged in redlining in the provision of lifesaving medical care</a> in 2021, many people of good-will assume that I simply <em>must</em> be mistaken.&nbsp;<em>I get it, but I was there.</em></p><p>Returning from the ancient history of 2021 to this very week: Chicago has directed a private entity to segregate, and that entity is segregating, principally via web application. If you attempt to engage Bally’s for an investment here, you will see the following blocking question during qualification stages for the investment opportunity. (The web application will also ask for your name, address, social security number, and accredited investor status.)</p><figure><img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfg7xfR4JSU8RMO64xkyKGTLWjifriOMQebvfwoKv_w6Dfuf_jMUft-B571gxvoZhURUfagRAC-sJ-8K6-KSEkW-1Ywd0LrxaU17bdMDnVoC2f5M8mqheigRD5aLWfe93jD5uoHsg?key=JKwqz4E9flWfAud9N2aVoVGT" alt="" loading="lazy" width="624" height="328"></figure><p>There is a right answer to this question. If you give the wrong answer, Bally’s will decline you the opportunity to invest. You get entirely stopped by the web application.</p><figure><img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfglxb7-tKG8dxnItCIa0JYtrPBdxwGifDpBb1CGIt0aHXgW2I9yb4OVatYhUvQKrIGAMXReQWx8HIuG2-Rf8t7jYAfG2EaQFKhth-dOfbeiTUB-gQDLkIY-lUu3uK3tuGYI6tQGg?key=JKwqz4E9flWfAud9N2aVoVGT" alt="" loading="lazy" width="624" height="87"></figure><p>I express no opinion on whether this is legal, by Bally’s or Chicago. After all, I am not a lawyer, and this has certainly been seen by many lawyers at this point, in e.g. preparing the submission to the SEC. Presumably all of them went through 1L courses which introduced concepts like the <a href="https://constitution.congress.gov/constitution/amendment-14/">Fourteenth Amendment</a>, case law which says government actions discriminating by race are <a href="https://crsreports.congress.gov/product/pdf/IF/IF12391">subject to strict scrutiny</a>, and case law which says that the government cannot proxy through a private entity to do things it is prohibited to do itself. And clearly no one admitted to the bar in Illinois thinks that Chicago can waive the U.S. Constitution if it considers that politically advantageous to get a gridlocked casino through municipal politics.</p><p>So I will charitably assume the existence of a memo where competent professionals have laid out a case for the legality of this course of action. They must have concluded that no future Department of Justice Civil Rights Division, not even in an administration elected after the Host Community Agreement had been inked, would descend upon this official act like the hammer of an avenging god.</p><p>As Matt Levine <a href="https://www.bloomberg.com/opinion/articles/2025-01-23/crypto-perpetual-motion-machines?srnd=undefined">beat me to observing</a>: <em>awkward timing</em>.</p><h2 id="chicago%E2%80%99s-peculiar-definition-of-minority">Chicago’s peculiar definition of Minority</h2><p>Long-time observers of Chicago politics might opine that the city very rarely does anything without creating a carveout for politically connected individuals. The local phrase for this sort of social connection is having “clout” or, sometimes, “<a href="https://www.google.com/search?q=site%3Achicagotribune.com+%22is+clouted%22">is clouted</a>.” You can find examples of the sort of carveouts Chicago reserves for the clouted in the professional histories of the board members of Bally’s Chicago, Inc, for example, which are included in the prospectus.</p><p>So what’s the carveout here? The definition of a racial or ethnic minority is a legendarily contentious one in U.S. politics, largely because inclusion or exclusion from it makes one eligible (or ineligible) for concrete benefits. Sites of contention often include e.g. are Asian Americans a minority, or are e.g. Cuban Americans Hispanic, etc.</p><p>Chicago leaves itself an out for its definition of Minority, which <em>lets it designate any individual or group as a Minority</em>, on an ad hoc, unreported, unaccountable basis. That sounds like I must be strawmanning Chicago. See the below screenshot and explanation in the prospectus</p><figure><img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXd253IewOivwCOqOI6zIiGgkVhxz_c5RJK1KsrkT8aRGtEbZ3FGTl4mh6-bwfpWCvSehDTDJtsL4mxrHOWrAnq5KzAvEFxudIHBpBU1ykYmsTuLt1mvzyrOVnRsWGfEzNcREf1L?key=JKwqz4E9flWfAud9N2aVoVGT" alt="" loading="lazy" width="624" height="149"></figure><p>Quoting the prospectus:</p><p><em>Qualification under [the final] clause is determined on a case-by-case basis and there is no exhaustive or definitive list of groups or individuals that the City of Chicago has determined to qualify as Minority under this clause. However, in the event the City of Chicago identifies any additional groups or individuals as falling under this clause in the future, members of such groups would satisfy the Class A Qualification Criteria.</em></p><p>Now, fairminded people reading “groups… found by the City of Chicago to be socially disadvantaged by having suffered racial or ethnic prejudice or cultural bias within American society” would note “Well, OK, on the face of it, that definitely includes e.g. Jewish Americans or Irish Americans. We have some lamentable history as a nation and city, sure. But no intellectually serious person in the United States considers Irish Americans ‘a racial or ethnic minority’ <em>in the common usage of the term</em>.” And thus, the capitalization of Minority.</p><p>You’ll have to ask the city for their list of ad hoc exceptions made under this bullet point. Long-time watchers of Chicago municipal politics, however, might say that asking is of limited utility.</p><p>I will note that, as a matter of engineering fact, the web application will blithely accept self-certification under this bullet point <em>for anyone</em>. You are welcome to your guess as to whether Bally’s or any city employee will review the 1,000 investors individually and, if they review them, what the process is for determining whether e.g. a particular Patrick counts as a Minority or not.&nbsp;</p><p>I’d wager there is no process at all here. It seems like a better bet than most offered in the casino.</p><h2 id="reading-a-complex-corporate-structure">Reading a complex corporate structure</h2><p>Bally’s Chicago is a product of Bally’s, a publicly traded company. You can read <a href="https://www.ballys.com/investor-relations/financials/default.aspx">their 10-Ks</a>. According to their <a href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001747079/e72243a7-c47d-4ca7-a9fc-e91f8f95fb18.pdf">most recent quarterly report</a>, they operate 15 casinos across the U.S., and have substantial online gambling operations. Like many casinos, they are <em>somewhat</em> diversified, insofar as a casino resort also functions as a hotel and restaurant/bar/etc venue.</p><p>Bally’s Chicago has a complex capital stack, which one would probably need to understand to evaluate the opportunity to invest in it. I am not saying “complex” as a criticism: this is fairly ho hum by the standards of large commercial real estate developments, a subject I am not an expert on but <a href="https://www.complexsystemspodcast.com/episodes/the-hundred-year-old-telegram-worth-5-million-with-jim-mckenzie-2/">grew up hearing about at the dinner table</a>. I <em>am</em> heavily implying that I would not expect a Chicagoan picked at random, or for that matter an alderman, to be able to look at the following diagram and correctly describe what it means. Prospectus, ibid, pg 145.</p><figure><img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfakivtPLtYz2pNNM_02Trf7NJnNR1aZxaCHrGIHSGTyFPtA-twKGNOYJxcLqEQ0jEtYeRM13SqSlScqLvOVP-p171kC1nafdnNxXToDe6XwJ38R2fv2p1p3Wj-1j1O4ucLt7RiOg?key=JKwqz4E9flWfAud9N2aVoVGT" alt="" loading="lazy" width="624" height="408"></figure><p>The entity which Chicago is stumping for is Bally’s Chicago, Inc. (BCI), the central square on that diagram. <s>Marks</s> investors are receiving ownership in <em>that entity</em>, not in <em>the casino</em>, which will be operated by Bally’s Chicago Operating Company, LLC (BCOC). That entity gets 25% economic interest in the future profits (insert <em>very material</em> asterisk here) of the casino; the other 75% flows to Bally’s Chicago Holding Company, LLC (BCHC). BCHC is a wholly-owned subsidiary of Bally’s, Inc, the publicly traded company.</p><p>When one offers someone the opportunity to invest in something, one has to decide upon a valuation for the something. The price of a slice of the pie is set in notional reference to the price of the whole pie.</p><p>Bally’s says that its good faith guesstimate on the whole pie is the economic interest in future profits of the Chicago casino is… <em>a billion dollars exactly</em>. The prospectus, as is wont for these situations, disclaims floridly that that price might not be accurate. One example of many: “We made a number of assumptions to determine the price of our Class A Interests. If any of our assumptions are incorrect, including our assumptions regarding the total enterprise value of the Company, then the Class A Interests will be worth less than the price stated in this prospectus. In such case, the return on investment or rate of return on an investment in our Class A Interests could be significantly below an investor’s expectation.”</p><p>Bally’s will, as is standard and customary for this sort of thing, pretend that investors have read and understood the ~200 page prospectus, and civil society will pretend to believe them.</p><p>It isn’t <em>extremely</em> <em>improper</em> to pick a billion dollars out of one’s hindquarters as an investment valuation. That particular number exerts a sort of memetic quality in e.g. Silicon Valley, and there are legendary amounts of negotiation between sophisticated parties to accept just a bit more structure to get a e.g. $920 million valuation to a $1 billion valuation, because so-called unicorn status is good for PR, for attracting prospective employees, and (a real factor) for founder ego.</p><p>But if you invest at a valuation not justified by the fundamentals of the investment, you will tend to underperform. This is an inescapable fact of investing. (And that is why the sophisticated investors, accepting a “worse” valuation, want “better” structure to compensate for it.)</p><p>And this partially explains why Chicago is holding a roadshow in African American churches attempting to convince participants to invest in a mezzanine-y equity slice of a casino at a $1 billion valuation, perhaps at 100X leverage. (I tip my cap to <a href="https://thetriibe.com/2025/01/chicagos-black-residents-can-invest-in-ballys-casino/">publicly available reporting</a> of the roadshow.) And not, for example, attempting to convince Goldman Sachs to put together some sophisticated investors and take down the $250 million allocation.</p><h2 id="is-this-valuation-a-gift-to-investors">Is this valuation a gift to investors?</h2><p>Chicago’s pitch to investors, delivered (per above reporting by Triibe) by “City Treasurer Melissa Conyears-Ervin and members of the Chicago Aldermanic Black Caucus”, emphasizes the potential of creating “generational wealth” (direct quote) with this casino investment. This point of view aligns with the above described political economy of attempting to buy off influential communities and/or community elites with an equity carveout, which successfully got this particular casino through decades of political gridlock.</p><p>And so the investment case <em>implies</em> that Bally’s is intentionally giving takers something for nothing. That is, they must be sandbagging the valuation they assigned to this bundle of rights: it’s not really worth $1 billion, it is worth e.g. $5 billion. Only you favored Chicagoans well-loved by your alderman are able to buy at the non-market price, leading to essentially free money. Not merely small amounts of it, either. Generational. Wealth.</p><p>The pitch very likely explicitly said the requisite words about this being a risky investment, wink wink, and very definitely described an opportunity for extreme levels of leverage and a lengthy expected road to ROI, which we’ll return to in a moment.</p><p>Do I think sophisticated investors would agree with Bally’s that this bundle of rights is worth $1 billion? <strong>Reader, I do not.</strong></p><p>One reason is the perception of an absence: why is this pitch being given to individual savers in a church at a minimum investment of $250, and not in a swank office to an entity capable of committing $25 million? But perhaps I’m just suspicious.</p><p>No, let’s go to more direct evidence: if 25% of this bundle of rights is worth $250 million, then 75% must be worth $750 million, right? And if an entity owning 75% of the bundle, Bally’s, also owns 14 other casinos, online gambling properties, and similar, then that entity must be worth a lot more than $750 million, right?</p><p><strong>The market does not agree with this assessment</strong>. The entire market capitalization of Bally’s (NYSE: BALY) is, as of this writing, ~$1.5 billion. What’s the difference between the $50 million average imputed value of the other casinos and the $750 million imputed value of the Chicago casino?<strong> The $750 million is <em>made up</em>, that’s what.</strong></p><p>And, again, the <em>real unspoken logic</em> of this pitch is that the bundle of rights is getting sold on the cheap, and that it is actually worth much more than $1 billion. It very clearly is not, or sophisticated investors would be swooping in and buying BALY’s common stock. Crack it open like an oyster and dig into that sweet sweet Chicago gambling revenue if you need to!</p><p>This is somewhat elementary and handwavy napkin analysis of a complicated business which, like most casinos and hotels, is heavily levered with a complex capital stack. But the investment case gets smothered by a napkin.</p><h2 id="capital-stack-arbitrage-or-giving-retail-1001-leverage-on-single-stock-issuances">Capital stack arbitrage, or, giving retail 100:1 leverage on single stock issuances</h2><p>The Host Community Agreement, as above, obligates Bally’s to find a way to sell preferred Chicagoans $250 million of stock. This was likely complicated by rich Chicagoans not being suckers and less-well-off Chicagoans not having $250 million lying around.</p><p>And so Bally’s has introduced a novel structure.</p><p>In brief, that structure sells stock to investors on credit, with the credit being extended by Bally’s, and paid down by future dividend distributions of the stock. If you’re very interested in the mechanics, you can find them at length in the prospectus, but the complex legal code is an excuse for this screenshot:</p><figure><img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXdd2zG5uipfo6O6HV1VDhABAIppuInvPo-0xgN4q2GRY7I0BwQQ4_vQKB4hw5ft856pfkSflAs76usXl_a6BaOJ6NAXMR8avY1J0U6Tx7tMesCYHXf1XivHTTz8niPJYvQgPsDu?key=JKwqz4E9flWfAud9N2aVoVGT" alt="" loading="lazy" width="624" height="185"></figure><p>What is the “Attributable Subordinated Loan?” I’m glad you asked. Bally’s staked (ba dum bum) BCI with a few hundred million dollars to fund development. Where did it find the money to do that? A mix of equity and debt financing, as is common for virtually all complex commercial real estate transactions. Bally’s, per their <a href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001747079/0a22a582-5179-4a27-8a24-cbfc84043b0f.pdf">most recent 10-K</a>, has long-term debt from sophisticated investors which costs them 5.x% per year. (It would be more expensive if they wanted to lock that down today.)</p><p>In return for Bally’s advancing BCI money through BCHC, BCI owed BCHC money, on an intercompany IOU. This capital offering cancels that intercompany IOU and replaces it with the Subordinated Loans. The prospectus does not quote the rate that the left pocket of Bally’s charged the right pocket of Bally’s. It does quote the rate for the Subordinated Loans: 11% annually compounding quarterly.</p><p>The road show makes much of the fact that this leverage is non-recourse. Quoting the Triibe reporting again:</p><p><em>The loan is non-recourse, explained Sidney Dillard of Loop Capital Markets, who is the underwriter of the offering, during the information session. “That loan is not recourse, meaning that you are not responsible for it,” she said.</em></p><p>I am not someone who has ever offered SEC registered securities for sale, but I am aware that when one does that, one has to adopt a <em>certain level of care</em> with respect to how one simultaneously a) sells a product that one has to offer and b) describes the operations of that product without wandering into lying.</p><p>And so <em>this writer</em> would not describe “non-recourse” as a loan one is not responsible for. I have a non-recourse mortgage. I am very, very much responsible for paying the mortgage. If I do not pay the mortgage, I expect to swiftly not own the property securing the mortgage. The “non-recourse” bit means that the lender cannot come after your <em>other</em> assets or income, for example by suing you for a judgement, then forcing you to disgorge your savings account or e.g. interests in a wholly owned LLC.</p><p>The Subordinated Loans are, per the prospectus (probably a bit more reliable than the understanding of e.g. Chicago employees on the finer details), not between the owners of the Class-A{1,2,3} equity and any Bally’s entities. They are strictly loans between Bally’s entities themselves. Those loans are senior to Class-A{1,2,3} equity in the payments waterfall of future profits (we need that asterisk again!) from the casino to equity holders. The expectation is that Bally’s will individually book repayments against records which are kept on a per-shareholder basis without actually obligating the shareholder, <em>while keeping the actual cash thrown off by the casino</em>, prior to eventually releasing a shareholder from the indebtedness that Bally’s will say that, technically speaking, they have not actually incurred.</p><p>At that point, the shareholder will own the slice of equity that an unsophisticated listener of that roadshow might think they own free-and-clear.</p><p>Now, Bally’s forecasts that many shareholders will be very underwater on these investments. (Wow, that’s a <em>robust</em> sentence.) Prospectus, ibid, pg 23:</p><p><em>Given the capital intensity of developing, constructing, opening and operating a casino resort project of this scale, we currently expect that Bally’s Chicago OpCo will not have any OpCo cash available for distribution until approximately three to five years after our permanent resort and casino begins operations.</em></p><p>Assuming the most charitable estimate from that range, a Class A-3 shareholder will have $250 of equity securing a notional $25,000 investment and future obligations of approximately $34,000 (three years of compound interest on $24,750). This suggests that the holder’s equity value is <strong>planned to be negative</strong> and that no sophisticated investor would purchase that investment for the $25,000 which the unsophisticated shareholder might believe it to be worth in 3 years. They might be willing to pay something more similar to, hmm, negative nine thousand dollars.</p><p>Seen in that light <em>this offer of investment sounds predatory</em>. But don’t worry, Chicagoans, Bally’s has your back. You do not have to worry about not being able to sell your stock due to its lack of intrinsic value, because you are not able to sell your stock. Prospectus, ibid, pg 179 under heading Shares Eligible For Future Sale, and elsewhere in the document.</p><p>Class A-4 holders, the ones with no notional debt, who purchased their shares for $25,000 cash-on-the-barrel, are not eligible to sell their stock at any time except as allowed by Bally’s to people approved by Bally’s. (I’ll flag that this is not an unusual term in private equities. Bally’s pre-commitment to discriminating racially against future prospective buyers? <em>That’s</em> unusual.)</p><p>Buyers of Class A-{1,2,3} stock are unable to sell until the associated Subordinated Loan is paid off in full.</p><p>One wonders whether senior Chicago officials will be doing a roadshow in 2030 explaining what happened.</p><h2 id="the-casino-will-not-distribute-profits-per-se">The casino will not distribute profits, per se</h2><p>While the natural expectation is that one is participating in the profits of the casino, the prospectus helpfully clarifies that one is not. The "cash available for distribution" does not necessarily correspond 1:1 with profits. It... well. See the discussion on page 22 and 23 of the prospectus, including the excerpt below.</p><p><em>While we and Bally’s Chicago OpCo intend to make distributions equal to 100% of the cash available for distribution and OpCo cash available for distribution, respectively, on a quarterly basis, the actual amount of any distributions may fluctuate depending on our and Bally’s Chicago OpCo’s ability to generate cash from operations and our and Bally’s Chicago OpCo’s cash flow needs, which, among other things, may be impacted by debt service payments on our or Bally’s Chicago OpCo’s senior indebtedness, capital expenditures, potential expansion opportunities and the availability of financing alternatives, the need to service any future indebtedness or other liquidity needs and general industry and business conditions, including the pace of the construction and development of our permanent resort and casino in Chicago. Our Board will have full discretion on how to deploy cash available for distribution, including the payment of dividends. Any debt we or Bally’s Chicago OpCo may incur in the future is likely to restrict our and Bally’s Chicago OpCo ability to pay dividends or distributions, and such restriction may prohibit us and Bally’s Chicago OpCo from making distributions, or reduce the amount of cash available for distribution and OpCo cash available for distribution.</em></p><p>Now, as someone who grew up with a father constantly complaining about sharp operating in Chicago commercial real estate, I can quickly outline about two dozen different ways for one to cause the operating company here to a) transfer money to other corporate entities and b) therefore have less cash available for distribution.</p><p>As a representative but not limiting example, you can probably choose your own marks for technology services from a parent to a great-grandchild subsidiary. Sure, there is some notional expectation that the marks be at arms-length price, but what is the arms-length price for e.g. casino loyalty accounting software and a particular chain's database of existing users? What low-resourced investor could possibly mount a court challenge against <em>the entity with all the data necessary to value that asset</em>. In Las Vegas, a casino has to calculate and diligently communicate the house edge before raking punters. Here... not so much.</p><p>That would require sharp operating... of a sort which is <em>extremely routine</em> in Chicago commercial real estate. This is a constant risk of being the junior partner in a structure, particularly without an aligned senior partner who would be as adversely impacted by sharp operating as you would be. Of course, here the senior partner owns e.g. the database they are renting to the entity that they also control, and so funds available for distribution from that entity might not match the expectations of junior partners.</p><p>Pick your sponsors carefully, folks.</p><h2 id="tax-consequences-of-this-offering">Tax consequences of this offering</h2><p>Suppose, and this is very unlikely because it is illegal (<a href="https://www.finra.org/rules-guidance/key-topics/margin-accounts">Reg T</a>) but run with it, that one has a typical brokerage account in the United States and, with $250, purchases $25,000 of marketable securities. Those securities periodically throw off dividend payments. One periodically pays one’s brokerage interest, because one has borrowed money from the brokerage to buy those securities on margin.</p><p>In the typical case, one would be taxed upon those interest payments, which are income. One does not simply <em>net</em> one’s margin interest against that income before paying taxes. One instead must itemize, and then one <a href="https://www.irs.gov/forms-pubs/about-schedule-a-form-1040">will be able to</a> (on Schedule A) deduct investment expenses, as described in <a href="https://www.irs.gov/publications/p550">Publication 550</a>. Feel free to run this by your accountant; the details get complicated and wonky.</p><p>If one does not itemize, as many lower-income taxpayers do not, one must of course simply pay the tax on the entirety of one’s interest income. If one protests that one does not actually <em>have</em> any interest income, because it has been taken by one’s brokerage to pay margin interest, the IRS will not be maximally sympathetic.</p><p>Bally’s has very creative professionals involved in the structuring of this offering, and realizing the above issue would compromise fitness for purpose, they have… adopted a theory. I will quote that theory, from the prospectus, verbatim. I have taken the liberty of bolding an important bit in the middle of this.</p><p><em>Section 305 of the Internal Revenue Code provides that if a corporation distributes property to some shareholders and other shareholders have an increase in their proportionate interests in the assets or earnings and profits of the corporation, such other shareholders may be deemed to receive a distribution that could be a taxable dividend. In this case, because we and Bally’s expect to treat the Subordinated Loans as “stock” for U.S. federal income tax purposes, “property” distributions will likely be considered to be made to “some shareholders” of Bally’s Chicago, Inc. as payments are made on the Subordinated Loans, and equivalent cash (“property”) distributions will be made with respect to the Class A-4 Interests. In addition, as payments are made on the Subordinated Loans, particularly those that repay the original principal amount of such Subordinated Loans, the proportionate interests of holders of our Class A-1 Interests, Class A-2 Interests and Class A-3 Interests in the assets or earnings and profits of Bally’s Chicago, Inc. may be viewed as increasing. Accordingly, it is possible that such increase could be treated as a deemed distribution under Section 305 of the Code or otherwise as taxable income to such holders under other theories. However, under the Treasury Regulations relating to Section 305 of the Code and other IRS administrative guidance, certain financing arrangements in the form of preferred stock investments that fund a corporation and then are systematically eliminated through property distributions until they are fully retired, and are designed to facilitate the ownership of a business with an effect of increasing another stockholder’s proportionate interests in the assets or earnings and profits of a corporation over such period, do not result in a deemed distribution to such other stockholder. The applicability of these authorities to the holders of our Class A-1 Interests, Class A-2 Interests and Class A-3 Interests in this situation is uncertain. <strong>Although the matter is not free from doubt, we intend to take the position, and this discussion assumes, that U.S. Holders of applicable series of Class A Interests would not be treated as receiving a deemed distribution from us or otherwise realizing income as a result of repayment of the Subordinated Loans corresponding to such shares. However, there can be no assurance that the IRS will not take a contrary position</strong>, for example, treating the proportionate interest in our earnings and profits owned by U.S. Holders of the applicable series of Class A Interests as having increased upon repayment of the Subordinated Loans corresponding to such shares, and treating such U.S. Holders as having received a distribution. In that case, such deemed distribution will be taxable as a dividend, return of capital or capital gain as described above under “— Distributions,” and U.S. Holders may be subject to U.S. federal income tax without the receipt of any cash. U.S. Holders should consult their own tax advisors about the application of Code Section 305 and any other potential deemed receipt of income risk with respect to our Class A Interests .</em></p><p>Now, I’m neither a lawyer, tax accountant, nor am I someone who listened carefully to the roadshow when it doubtlessly stepped through this for the benefit of the audience. But here’s what it means:</p><p>Bally’s is taking the position, though they acknowledge that the IRS might disagree, that owners of the Class A-{2,3,4} interests aren’t <em>actually</em> getting any income until the Subordinated Loans have been paid in full. This means that they don’t have to pay income taxes in years where they are not actually receiving cash distributions.</p><p>No, they wait until the Subordinated Loan is paid in full, and then immediately owe income taxes in one whack, at the difference between their basis in the stock (say, $250) and the then-FMV of the stock (say, $25,000). Resulting in Bally’s diligently filing a document with the IRS saying that e.g. a lower-income Chicagoan has just received a bit less than $25,000 in income from them, and should probably pay taxes on it. You can, of course, receive income without receiving <em>immediately available</em> <em>cash</em>; it happens all the time in tech, and is the cause of much structuring to avoid the consequences of it, which can be painful for e.g. early career employees.&nbsp;</p><p>Those taxes will be paid substantially out-of-pocket, because there is almost no conceivable universe where a stock of an actual healthy operating enterprise worth e.g. $25,000 pays an ordinary dividend of e.g. $5,000. The market would adjust the value of the stock upwards to account for the extraordinarily rich stream of dividends, which would adjust the tax bill upwards.</p><p>Financially sophisticated investors might prepare for a tax bomb like this by e.g. borrowing against the value of the stock. That’s basically impossible for this issuance, due to the stock not being publicly listed, the restrictions on transfer, small dollar amounts, etc. The other option is, of course, selling the stock, to whomever Bally’s deigns to approve.</p><p>Tax-motivated transactions are, of course, <em>motivated transactions</em>, and the lucky buyer will probably be able to extract a bit of a deal, doubly so because they are likely much more sophisticated than the initial buyer of the stock, and they have less risk to account for (because of e.g. several years of operating history of the casino before the tax bomb explodes).</p><h2 id="in-conclusion">In conclusion</h2><p>I am not an investment advisor, and not your investment advisor. I am, however, a recreational poker player who lives in Chicago. I intend to periodically donate money to the Chicago economy by making poor decisions on the river at Bally’s Chicago. </p><p>I do not, however, presently intend to participate in Bally’s stock offering, nor do I presently intend to buy their common stock.</p><p>I will note, out of an overabundance of scrupulousness, that I own a tiny amount of MGM stock, which is a direct competitor to Bally’s. I caught the poker bug at a conference in Las Vegas (hosted at the Tropicana, since acquired by Bally’s and then <a href="https://www.ballys.com/news/news-details/2024/Tropicana-Las-Vegas-Implosion-to-Make-Way-for-the-As-Ballpark-and-Ballys-Entertainment-Resort-Destination-2024-9NZuey6eTG/default.aspx">brought down in a controlled implosion</a>).</p><p>MGM, across the street, actually had poker tables. I have had many enjoyable post-conference excursions staying at their hotel to (in several but not all years) lose money at those tables. I bought the stock for the same reason I buy stock in every hotel, airline, bank, and similar I use: in the unlikely event a not-particularly-high-stakes poker player has a routine customer service complaint, Investor Relations is available as an escalation strategy, over e.g. hotel staff who might be long-since inured to listening to complaints from people who lost money in a casino.</p><p>Oh yeah, I mentioned that there is a crypto angle to this. The registrar and transfer agent for offering 100:1 leverage to retail investors on a casino stock is, see prospectus pg 41, <a href="https://www.bitgo.com/">BitGo Trust</a>. If I had made up that detail, as a crypto skeptic, you might have accused me of being a bit on the nose.</p>

        

        <div>
          <h2>Want more essays in your inbox?</h2>
          <p>I write about the intersection of tech and finance, approximately biweekly. It's free.</p>
                  </div>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The hidden complexity of scaling WebSockets (145 pts)]]></title>
            <link>https://composehq.com/blog/scaling-websockets-1-23-25</link>
            <guid>42816359</guid>
            <pubDate>Fri, 24 Jan 2025 19:48:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://composehq.com/blog/scaling-websockets-1-23-25">https://composehq.com/blog/scaling-websockets-1-23-25</a>, See on <a href="https://news.ycombinator.com/item?id=42816359">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>With the rising demand for sync engines and real-time feature, WebSockets have become a critical component for modern applications. At Compose, WebSockets form the backbone of our service, powering our backend SDKs that enable developers to deliver low-latency interactive applications with just backend code.</p><p>But, scaling WebSockets has proven to be far more complex than we expected. Below are some of the most important lessons we've learned along the way.</p><h3>Handle deployments gracefully</h3><div><p>Users should never notice when deployments happen, so WebSocket connections need to persist across deployments. This is a delicate process, and requires robust reconnection logic to deal with unexpected issues. At Compose, we achieve near-zero downtime by following these steps:</p><ol><li><p>Spin up new servers.</p></li><li><p>Once the new servers are healthy, old servers begin returning <code>503 Service Unavailable</code> <!-- -->responses to health checks.</p></li><li><p>After 4 consecutive <code>503</code> responses, the load balancer declares the server unhealthy and removes the old servers from the pool. The load balancer health checks every 5 seconds, so this process takes up to 25 seconds.</p></li><li><div><p>Old servers send a custom WebSocket close message instructing clients to delay reconnection by a random interval to avoid a reconnection surge.</p><ul><li><p>The custom close message lets clients show users a more accurate message during the ~10 second period where the client is disconnected.</p></li><li><p>The random delay helps prevent thundering herd issues where all clients reconnect at once. Clients also double the exponential backoff for deployment-related reconnections to account for unforseen issues.</p></li><li><p>The close message is delayed by 20 seconds to account for the time it takes for the load balancer to shift traffic.</p></li></ul></div></li><li><p>Once all clients disconnect, the old servers shut down completely.</p></li></ol></div><p>If you're using a managed service like Render or Railway, you should be especially cognizant that client connections are transferred gracefully during deployments.</p><p>Many managed services that tout zero-downtime deployments will wait until all outstanding requests are processed before shutting down a server. Since WebSocket connections are persistent, this can lead to situations in which old servers are active for minutes or even hours after a deploy until the managed service forcibly terminates the process.</p><h3>Establish a consistent message schema</h3><div><p>While HTTP comes with built-in routing conventions (<code>GET /user</code>,</p><!-- --> <p><code>POST /company</code>,</p><!-- --> <p><code>PUT /settings</code>), WebSockets require developers to define their own schema for organizing messages.</p></div><div><p>At Compose, every WebSocket message starts with a fixed 2-byte</p><!-- --> <p><code>type</code> prefix for categorizing messages.</p><ul><li><p>It's space-efficient (only 2 bytes), while still scaling to 65,536 different types.</p></li><li><p>It enables clients to reliably slice the<!-- --> <code>type</code> prefix from the message without affecting the rest of the data, since the prefix is always 2 bytes.</p></li><li><p>It gives us a simple method for upgrading our APIs by versioning message types.</p></li></ul></div><div><pre><code><span>const</span> <span>MESSAGE_TYPE_TO_HEADER</span> = {
  <span>RENDER_UI</span>: <span>"aa"</span>,
  <span>UPDATE_UI</span>: <span>"ab"</span>,
  <span>SHOW_LOADING</span>: <span>"ac"</span>,
  <span>RENDER_UI_V2</span>: <span>"ad"</span>,
  <span>/* ... */</span>
}</code></pre></div><p>Additionally, we use delimiters to separate different fields inside the message, which is both faster to encode/decode and more memory-efficient than JSON.</p><div><pre><code><span>const</span> <span>DELIMITER</span> = <span>"|"</span>;

<span>function</span> <span>createDelimitedMessage</span>(<span><span>type</span>: <span>string</span>, <span>args</span>: <span>any</span>[]</span>) {
  <span>return</span> [<span>MESSAGE_TYPE_TO_HEADER</span>[<span>type</span>], ...args].<span>join</span>(<span>DELIMITER</span>);
}

<span>function</span> <span>parseDelimitedMessage</span>(<span><span>message</span>: <span>string</span></span>) {
  <span>const</span> [<span>type</span>, ...args] = message.<span>split</span>(<span>DELIMITER</span>);
  <span>return</span> { <span>type</span>, args };
}</code></pre></div><p>We're lucky that our backend and frontend are written in TypeScript, allowing us to share message schemas between the two and ensure that neither falls out of sync.</p><h3>Detect silent disconnects with heartbeats</h3><div><p>Connections can drop unexpectedly without triggering a</p><!-- --> <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event">close event</a>, leading to a situation in which the client thinks they're connected, but actually aren't. To prevent stale connections, implementing a robust heartbeat mechanism is essential.</p></div><div><p>We send periodic</p><!-- --> <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#pings_and_pongs_the_heartbeat_of_websockets">ping/pong messages</a></p><!-- --><p>between client and server and reconnect in cases where the heartbeat isn't received within some interval.</p></div><div><p>Our server sends a <code>ping</code> message every 30 seconds, and expects a <code>pong</code> response. In cases where the client doesn't receive a</p><!-- --> <p><code>ping</code> every 45 seconds, it immediately drops the connection and tries to reconnect. Similarly, the server closes connections that miss <code>pong</code></p><!-- --><p>responses within 45 seconds.</p></div><p>By monitoring heartbeats on both ends, we detect and handle rare cases where the client side network appears functional but the server never receives responses.</p><h3>Have an HTTP fallback</h3><div><p>WebSocket connections can be unexpectedly blocked, especially on restrictive public networks. To mitigate such issues, Compose uses</p><!-- --> <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">server-sent events (SSE)</a></p><!-- --><p>as a fallback for receiving updates, while HTTP requests handle client-to-server communication.</p></div><p><img src="https://composehq.com/blog-scaling-websockets-fallback.png" alt="SSE fallback"></p><p>Since SSE is HTTP-based, it's much less likely to be blocked, providing a reliable alternative in restricted environments. Plus it still achieves decently low latency, especially compared to short-polling solutions.</p><h3>Concluding thoughts</h3><div><p>There's a whole lot more to scaling WebSockets that we didn't cover here. For example:</p><ul><li><p><span>Lack of standard tooling</span>: While most frameworks include built-in tools for rate limiting, data validation, and error handling, you'll generally have to implement these features on your own for WebSockets.</p></li><li><p><span>Inability to cache responses</span>: Edge networks make it easy to cache HTTP responses close to users, but there's no standard way to accomplish this with WebSockets.</p></li><li><p><span>Per-message authentication</span>: Guarding against abuse by ensuring that each message is valid for that user before processing it.</p></li></ul></div><p>But regardless of the complexity, users expect modern applications to be fast, realtime, and collaborative. And, as of now, there's no better way to achieve that than WebSockets.</p><div><p>At Compose, WebSockets power the entire platform - from the database all the way to the main UI thread. Via our SDKs, developers can generate full web apps from their backend logic. Making sure those apps are fast and performant at scale requires WebSockets. If you're interested in learning more,</p><!-- --> <p><a href="https://docs.composehq.com/" target="_blank" rel="noopener noreferrer">check out our docs</a>. It takes less than 5 minutes to install the SDK and build your first app.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PhysicsForums and the Dead Internet Theory (233 pts)]]></title>
            <link>https://hallofdreams.org/posts/physicsforums/</link>
            <guid>42816284</guid>
            <pubDate>Fri, 24 Jan 2025 19:38:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hallofdreams.org/posts/physicsforums/">https://hallofdreams.org/posts/physicsforums/</a>, See on <a href="https://news.ycombinator.com/item?id=42816284">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="what-internet-will-look-like-in-the-future">What Internet Will Look Like in the Future</h2><blockquote><p>cripes does anybody remember Google People</p><p>– qntm, <a href="https://twitter.com/qntm/status/1164301933949128709">August 21st, 2019</a></p></blockquote><p>Does anybody remember <a href="https://www.physicsforums.com/">PhysicsForums</a>?</p><p>It was never exactly the center of the Internet, but back when it was founded in 2001, the Internet didn’t really <em>have</em> a center the way it does today. PhysicsForums was one forum among thousands, founded by an enthusiastic teenager named Greg Bernhardt, existing in the ‘hard science’ niche alongside the likes of <a href="https://web.archive.org/web/20050105042334/http://www.badastronomy.com/phpBB/index.php">Bad Astronomy</a>, mostly focused on giving hints for physics homework to struggling students without outright <em>doing</em> the physics homework. It had fairly steady growth until 2012, before petering out throughout the 2010s and 2020s in lieu of more centralized sites like StackExchange, and by 2025, only a small community was left. But, unlike so many other fora from back in the early days, it went from 2003 to 2025 without ever changing its URLs, erasing its old posts, or going down altogether. Thanks to this consistency, PhysicsForums remains quite valuable as a time capsule, and can give us a glimpse at how people thought and what they said two decades ago.</p><p>For instance, we we might go to <a href="https://www.physicsforums.com/threads/spreadsheet-for-hp-50g-import-export-excel-calc.199904/">this 2007 post</a> asking about the capabilities of the now-obsolete <a href="https://commerce.hpcalc.org/50g.php">HP 50g Graphing Calculator</a>, and read a very helpful reply by commenter ravenprp:</p><p><img data-src="/assets/img/PhysicsForums/2007 - ravenprp 0.png" alt="user ravenprp claims to be a large language model in a forum post dated 2007" title="user ravenprp claims to be a large language model in a forum post dated 2007"></p><p>Something has gone terribly wrong.</p><h2 id="quoth-the-raven">Quoth the Raven?</h2><blockquote><p>I reset my pw and logged back in to Google People for the first time in 10 (?) years just now and discovered the following:</p><ol><li>10 years of updates on my account, written by me</li></ol><p>– qntm, <a href="https://twitter.com/qntm/status/1170471878642872321">September 7th, 2019</a></p></blockquote><p>At first glance, ravenprp is a very impressive user, writing 2,891 posts in a mere seven-month span (from September 2006 to April 2007) for average of more than thirteen posts per day. And most of these weren’t casual one-line answers: reading his profile, one comes away realizing that he’s a true <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/OmnidisciplinaryScientist">omnidisciplinary scientist</a>, if not a modern-day Renaissance Man. He’s a <a href="https://www.physicsforums.com/threads/instructional-robot-design-project.112146/#post-6998564">member of a university faculty</a>, a <a href="https://www.physicsforums.com/threads/how-do-you-measure-vibration-decay-in-damped-drumsticks.209340/#post-6999271">mechanical engineering student</a>, and a <a href="https://www.physicsforums.com/threads/what-are-the-essential-job-roles-in-a-basic-chemical-plant.164542/#post-6998735">hiring manager at a chemical plant</a> (presumably in <a href="https://www.physicsforums.com/threads/chem-eng-hot-career-option-for-canada.180877/#post-6998683">Canada</a>); he’s an expert in <a href="https://www.physicsforums.com/threads/looking-for-an-expert-with-vob-and-audio-files.134862/#post-6996856">working with .VOB and audio files</a> and <a href="https://www.physicsforums.com/threads/what-are-the-differences-between-bolts-screws-and-hi-lok-fasteners.154763/#post-6999349">fasteners</a>; he’s a <a href="https://www.physicsforums.com/threads/solving-multiple-couples-in-structural-engineering-analysis.188652/#post-6999291">structural engineer</a>, <a href="https://www.physicsforums.com/threads/take-your-side-dawkins-vs-dyson-debate.185437/#post-6998019">biologist</a>, <a href="https://www.physicsforums.com/threads/topical-webpage-title-what-are-the-best-freeware-options-for-medical-physics.198806/#post-6996805">medical physicist</a>, <a href="https://www.physicsforums.com/threads/optimize-your-sports-drink-with-advanced-chemist-suggestions-lemonade-flavor.130493/post-6997583">chemist</a>, and <a href="https://www.physicsforums.com/threads/air-frame-life-extension-f-15-problem.209836/#post-6999274">aerospace engineer</a>. And to top it all off, he’s modest, and won’t claim expertise he doesn’t have: he’s an aerospace and aeronautical engineer, but <a href="https://www.physicsforums.com/threads/an-aerodynamic-simulation-using-panel-method.197033/#post-6999260">not an expert in aerodynamics</a>, nor a <a href="https://www.physicsforums.com/threads/how-can-i-calculate-the-failure-load-for-a-cantilevered-hoist-assembly.177574/#post-6999314">mechanical engineer</a>, nor an <a href="https://www.physicsforums.com/threads/equivalent-electrical-model-for-spring-damper-circuit-seeking-advice.161781/#post-6998922">expert in electrical models</a>.</p><p>Impressively, these posts span from three years before the account was created to a year after the account was last logged into. And, as the icing on the cake, ravenprp is prescient enough that he can joke about being a language model developed by OpenAI, seven years before OpenAI was even founded; evidently he should have joined PsychicsForums instead.</p><p><img data-src="/assets/img/PhysicsForums/Ravenprp Collage.png" alt="user Ravenprp's many storied careers as a screenshot" title="user Ravenprp's many storied careers as a screenshot"></p><p>A reasonable question, reading these posts, is: what’s the deal with the joined and login dates? If this is an entirely fabricated account, then why not just set the account creation date to be earlier than the first post, and the account access date to be later than the last post? The Wayback Machine gives us an answer: while the account currently lists 2,891 posts, an <a href="https://web.archive.org/web/20190226113743/https://www.physicsforums.com/members/ravenprp.56793/">archive from 2019</a> lists 74. And looking at only these 74 gives a very different profile: ravenprp was an electrical engineering student asking for simple advice on <a href="https://www.physicsforums.com/threads/matlab-question-book-software-tools.141015/">MATLAB books</a>, working through <a href="https://www.physicsforums.com/threads/using-555-timer-ic-to-output-100-khz-frequency.141013/#post-1144566">integrated circuit problems</a>, giving other commenters useful links on <a href="https://www.physicsforums.com/threads/find-the-flow-rate-water-pipe-down-a-hill.131786/#post-1082624">the Bernoulli Equation</a>, and asking for help from knowledgeable experts, <a href="https://www.physicsforums.com/threads/is-a-microprocessor-the-same-as-a-microcontroller.152622/">such as computer professional ravenprp</a>.</p><p><img data-src="/assets/img/PhysicsForums/Ravenprp Q&amp;A.png" alt="user Ravenprp asks himself for advice" title="user Ravenprp asks himself for advice"></p><p>So it seems that this was a real account, once, and that ravenprp was a real person with real posts, opinions, questions, and answers. But any original thoughts and writings he might have had in 74 original posts have been all but drowned out by the 2,817 extra posts which have been added, backdated, and attributed to him.</p><p>Still, while finding those posts might be a challenge, at least those threads themselves are intact. For instance, he was <a href="https://www.physicsforums.com/threads/how-does-truck-speed-affect-beat-frequency-in-doppler-shift.131785/#post-1083659">helped in one thread by kyle8921</a>:</p><p><img data-src="/assets/img/PhysicsForums/kyle8921 and ravenprp.png" alt="user ravenprp asking for help with a homework question" title="user ravenprp asking for help with a homework question"></p><p>And the answer would seem pretty reasonable at first glance, were it not for two small problems:</p><ul><li>Kyle8921, oddly enough, decided to finish an incomplete LaTeX expression from ravenprp’s post before beginning his own answer.</li><li>Much like ravenprp, Kyle8921 posted the answer more than a year after he last logged in, <a href="https://www.physicsforums.com/members/kyle8921.27110/">and continued posting for more than three years after that</a>.</li></ul><p><img data-src="/assets/img/PhysicsForums/kyle8921 0.png" alt="Kyle8921's last login date along with a post long after that date" title="Kyle8921's last login date along with a post long after that date"></p><p>Exactly how deep does this go?</p><h2 id="the-internet-is-forever">The Internet is Forever</h2><blockquote><p>In regards to the dead internet hypothesis, the content that you’re enjoying today, will still be there tomorrow.</p><p>LoveMortuus, <a href="https://news.ycombinator.com/item?id=41055299">July 24th, 2024</a></p></blockquote><p>Founder Greg Bernhardt started PhysicsForums as a simple GHB bulletin board, and he gave each thread and post a unique numerical ID; unlike many modern sites, this ID was sequential, with the first post given the ID of 1, the second post 2, and so forth. Some of these posts, of course, have since been deleted for one reason or another (including the first two years’ worth of discussion, which is why post #1 is in 2003 and not 2001), so we would not expect the line of posts to be continuous and unbroken…but we <em>would</em> expect the line to be monotonically increasing, so long as no posts had been retroactively added to the database. Plotting a sample of 30,000 posts grabbed at random, we can see how that pattern holds up:</p><p><img data-src="/assets/img/PhysicsForums/PhysicsForums Post Anomalies Zoomed Out.png" alt="A graph of anomalous post dates, fully zoomed out from 2003-2025" title="A graph of anomalous post dates, fully zoomed out from 2003-2025"></p><p>For almost the entire history of PhysicsForums, that rule held true: if post A had a larger ID than post B, then post A had a later timestamp than post B. And anywhere that rule does not hold true, we can reasonably infer that the database has been altered and that a more recent post has been given an older date retroactively.</p><p>Database alteration and retroactive dating are not necessarily bad things. The biggest example came in 2022, when PhysicsForums merged with MathHelpBoards and incorporated its ~150,000 post archive, with each post given its original date. There are smaller examples within PhysicsForums history of a thread getting split (due to some off-topic but nevertheless useful) discussion, or a post getting deleted but then restored with a newer ID, or a database hiccough causing re-assignment, or various other entirely justifiable small-scale edits. But on March 11th of 2023, a handful of posts were added all up and down the timeline, followed by a bigger group in May, an even bigger one in October, and the largest of all in January and February of 2024.</p><p><img data-src="/assets/img/PhysicsForums/PhysicsForums Post Anomalies Zoomed In.png" alt="A zoomed in version of the graph highlighting anomalous posts which have been backdated" title="A zoomed in version of the graph highlighting anomalous posts which have been backdated"></p><p>By taking the highly anomalous post IDs and filtering out the MathHelpBoards import, and filtering out instances which seem plausibly close to their actual post times, we get an estimated 115,000 posts written by LLMs and attributed to humans. Without scraping the entire website, it’s difficult to say precisely how many users have had their profiles revived, but taking a representative sample, there are at bare minimum 110 users affected. These range from <a href="https://www.physicsforums.com/members/eljose79.79/">some of the earliest commenters</a>, to <a href="https://www.physicsforums.com/members/kyle8921.27110">one-time posters</a> to <a href="https://www.physicsforums.com/members/zefram.118/">long-time readers</a> to <a href="https://www.physicsforums.com/members/greg-bernhardt.1/">founder and site administrator Greg Bernhardt</a>. In every case, a name is being attached to viewpoints that person does not necessarily endorse; certainly <a href="https://www.physicsforums.com/threads/infinite-intersection-of-indexed-sets.514569/">an average science enthusiast would not probably not endorse the notion that 0.999… does not equal 1</a>, if he knew about it:</p><p><img data-src="/assets/img/PhysicsForums/BernhardtPointNineRepeating.png" alt="A post by Greg Bernhardt claiming .99999... != 1" title="A post by Greg Bernhardt claiming .99999... != 1" src="https://hallofdreams.org/assets/img/PhysicsForums/BernhardtPointNineRepeating.png"></p><p>But that’s the problem: they don’t know about it. We don’t know who most of these people are. We can’t get in touch with them. Many, if not most, have usernames either unique to PhysicsForums, or else so common elsewhere as to be useless for identification. They have moved on from PhysicsForums, living their lives, with no way of knowing what is or isn’t being said under their names, and no reason whatsoever to suspect anything is amiss. And maybe what’s said is accurate, or maybe it isn’t, but either way, with every additional post, the archives of the Internet are made just a little bit flatter, their own scientific contributions are diluted just a little bit more, and the portion of the Internet intentionally written by humans is shrunk just a little bit further.</p><h2 id="the-dead-internet-theory">The Dead Internet Theory</h2><blockquote><p>The internet feels empty and devoid of people…it’s like a hot air balloon with nothing inside.</p><p>Anonymage, <a href="https://i.4pcdn.org/x/1587947548944.png">“Dead Internet Theory (and much more)”</a>, September 16th, 2019</p></blockquote><p>The ‘Dead Internet Theory’ - the theory that much or most of the Internet consists of things not made by human beings - got its name in 2019, and has been slowly gaining popularity ever since. The theory as originally stated is a self-described ‘jumbled mess’, cites the ‘death’ of the Internet at about 2016 or 2017, and interestingly, predates almost every known LLM capable of writing convincing longform text; we tried a GPT-2 bot on /r/AskReddit two days after the original greentext, and the bot was noticed and called out within a handful of hours. And in 2016 or 2017, the state-of-the-art for text generation was Markov chains, and most bots online posted identical messages with no text generation at all.</p><p>The theory, and the general feeling that the Internet has changed shape, clearly had other root inspirations besides LLMs. Part of the feeling was probably due to the Internet opening up to a wider and wider global audience, with small community norms and standards simply not scaling up. Part of it was probably the device change from computer to smartphone encouraging a more passive role on the part of the audience. Part of it was probably algorithmic incentives towards more and more content engagement, as inevitable as <a href="https://slatestarcodex.com/2014/07/30/meditations-on-moloch/">Las Vegas’ extravagant casinos</a>, emerging from pure market forces and not attributable to any one person in particular.</p><p>But part of it <em>now</em>, six years later, is certainly LLMs.</p><p><img data-src="/assets/img/PhysicsForums/Anatomy of a PhysicsForums post.png" alt="A screenshot of a PhysicsForums post highlighting the vast amount of non-human generated content" title="A screenshot of a PhysicsForums post highlighting the vast amount of non-human generated content" width="400"></p><p>The thing is, it’s not like these non-human additions are adding value or usability in <a href="https://web.archive.org/web/20250115221948/https://www.physicsforums.com/threads/spreadsheet-for-hp-50g-import-export-excel-calc.199904/">the original ravenprp thread we started with</a>. You could argue that adding a summary is helpful… but that’s only the case if the summary is correct, and as we know, the AI generated summaries have a real tendency to enrich the facts with things that may or may not be accurate.</p><p>We can accept the addition of some links, etc, as a potential enrichment; though their intrusive nature is disruptive like any other advertisement, sometimes we accept disruption as part of what is needed to keep a website operating. The rest of the thread, though, is a LLM-generated post that contains exactly one true fact (the existence of the “HP 50g Connectivity Kit”), and otherwise contains nothing that is actually reflected in the <a href="https://literature.hpcalc.org/official/hp50g-um-en.pdf">HP 50g manual</a>, or anywhere else one might find genuine information about the calculator.</p><p>Finally, we have the FAQ. This FAQ is the only place in the entire thread which references the “GET” and “PUT” functions of HP 50g Spreadsheet, and is the only place the summary could be getting them from. For that matter, the FAQ the only place in the entire <em>internet</em> which references those functions; the manual doesn’t talk about them, or talk about the “HP 50g Spreadsheet” at all…and searching for “HP 50g Spreadsheet”, as of the time of writing, returns this thread and nothing else.</p><p>So while ravenprp’s post has a hint of correctness, the FAQ pulls only from the title and is entirely wrong, and the summary pulls primarily from the FAQ and is also entirely wrong. But the fact that these answers are <em>incorrect</em> is not actually the only problem. Instead of reading the replies, we can do a quick tally of the amount of space each section of this thread takes up:</p><div><table><thead><tr><th>Section</th><th>Word Count</th><th>Human?</th></tr></thead><tbody><tr><td>Summary</td><td>99</td><td>No</td></tr><tr><td>Springo</td><td>38</td><td>Yes</td></tr><tr><td>Phys.org</td><td>34</td><td>No</td></tr><tr><td>Shinny_head</td><td>11</td><td>Yes</td></tr><tr><td>Ravenprp</td><td>164</td><td>No</td></tr><tr><td>FAQ</td><td>260</td><td>No</td></tr></tbody></table></div><p>The LLM-written portions of this thread are 92% of the total word count. If this were a representative sample of the Internet, it would be reasonable to describe the Internet as ‘dead’.</p><p><img data-src="/assets/img/PhysicsForums/PhysicsForums Word Count Histogram.png" alt="A graph showing wordcounts by LLM vs humans on PhysicsForums" title="A graph showing wordcounts by LLM vs humans on PhysicsForums"></p><p>The situation across the entire PhysicsForums is not, fortunately, quite so dire yet. While the backdated LLM posts tend to be longer than average, they still make up only 1.6% of the total post count and 3% of the word count across all posts. The actual <em>deception</em> is still, even now, still a fairly small portion of the total. But, when counting in the LLM-generated FAQs and summaries - which, as we’ve seen, aren’t always accurate - the Dead Internet Theory seems to be vindicated, and only 66% of the words on the site were written by human beings. Two years ago, that number was close to 100%. Two years from now, then…who knows?</p><p>It is true that the old archives aren’t read all that frequently, so it could be argued that this is no great loss. Only three archived PhysicsForums post were shared on Twitter throughout all of 2024…and of those three, <a href="https://twitter.com/SheCelebratesND/status/1841278314033336661">one was a human sharing an bot-written post</a>, and <a href="https://twitter.com/BRAINCURES/status/1868329400133202057">another was a bot sharing a human-written post</a>. So really, does anyone care?</p><h2 id="man-vs-machine">Man vs Machine</h2><blockquote><p>“…using AI, one can generate tons of nonsense with very little work and overload us easily.” So far that hasn’t happened.</p><p>PeterDonis, <a href="https://www.physicsforums.com/threads/chatgpt-policy-pf-developing-policies-for-chatgpt.1048633/post-7131957">November 12th, 2024</a></p></blockquote><hr><blockquote><p>/* * Copyright (C) 2011-2012 DarkCore <a href="http://www.darkpeninsula.eu/">http://www.darkpeninsula.eu/</a> * Copyright (C) 2011-2012 Project SkyFire <a href="http://www.projectskyfire.org/">http://www.projectskyfire.org/</a> * Copyright (C) 2008-2012 TrinityCore <a href="http://www.trinitycore.org/">http://www.trinitycore.org/</a> * This program is free software; you can redistribute it and/or modify it * under the terms of the GNU General Public License as published by the * Free Software Foundation; either version 3 of the License, or (at your * option) any later version. * *</p><p>Nate810, <a href="https://www.physicsforums.com/threads/strong-inequality-hydrodynamics-flat-cylinder-in-water.1047623/#post-6886175">November 27th, 2022</a></p></blockquote><p>Certainly the community members of PhysicsForums care. In November of 2024, <a href="https://www.physicsforums.com/threads/why-are-these-pf-dates-inconsistent.1066951/">poster Renormalize noticed peculiar behavior by Azntoon</a>, and noticed specifically that Azntoon was posting in threads in 2022 despite having last logged on in 2012. The thread, however, soon came to the conclusion that it was some sort of database hiccough, and nothing more came of it. Interestingly, <a href="https://www.physicsforums.com/members/azntoon.271917">Azntoon’s last login date</a> has since changed to December of 2022, making him one of the only two LLM-affected users to have (apparently) logged on again since the backdating began.</p><p>Users were on the lookout for it as early as 2022: the forum regulars <a href="https://www.physicsforums.com/threads/chatgpt-policy-pf-developing-policies-for-chatgpt.1048633/">debated what the policy regarding ChatGPT-generated responses should be</a>, with Vanadium 50 complaining that the “barely-lucid posts” generated by ChatGPT create a lot of work and could be considered a DoS attack. The general consensus in the thread was summarized by PhysicsForums administrator Greg Bernhardt:</p><blockquote><p>I’m pretty sure stackoverflow is attempting to ban it. I think we should discourage it, but I am unsure how to “ban” it here. Well worth a discussion. At a minimum content from ChatGPT should be quoted.</p></blockquote><p>A few months later, the site celebrated April Fools’ Day of 2023 <a href="https://www.physicsforums.com/threads/why-are-avatars-showing-as-chatgpt-instead-of-user-names-on-pf-posts.1051274/">by temporarily changing all display names to ChatGPT</a>, a few weeks after the LLM backdated insertion had already started, but since this was on April 1st, nobody assumed that posts were <em>actually</em> being written by ChatGPT. Alexander R. Klotz, <a href="https://www.physicsforums.com/insights/roger-babsons-anti-gravity-contest/">one-time contributor to PhysicsForums’ Insights blog</a>, noted on Twitter <a href="https://twitter.com/AlexanderRKlotz/status/1680983219481772033">that his 2016 article had been edited without his knowledge</a>, but the edits seem to be limited to an LLM-generated summary awkwardly placed in the middle, and a manually-inserted author’s note from 2018. The actual scope of the change across and the addition of more than a hundred thousand posts is something we’ve seen no discussion of, anywhere, as of yet.</p><p>But the backdated <em>users</em> have all been hidden from the search’s autocomplete, and profile links have all been removed from their posts, presumably to make it more difficult to click the profile and notice that something is wrong.</p><p>Changes like this tend to be gradual: a slight drift over time, compromises made to keep the site afloat. When the community notices, it can all be explained, eased, and made bearable, even as everything changes inch by inch. If the community backlash is too great, it’s easy to backpedal and explain and have a lesser version of the change remain. Ultimately, the incentives towards making these changes will not go away. What decides how they work out is the judgement of the people making the changes and how the community responds to them.</p><h2 id="update-faqs">Update: FAQs</h2><p>During the writing of this post, the FAQs were actually noticed as well, and <a href="https://www.physicsforums.com/threads/low-quality-faq-sections-on-closed-threads-ai-generated.1068161/">a discussion thread</a> was created. It appears that they were not visible to logged-in users, explaining why the forum regulars did not notice: the average forum regular interested enough to go back and reread old posts will probably be logged in while doing so. The FAQs have now been removed, though the LLM-written summaries at the top of closed threads are still present.</p><h2 id="the-internet-is-people">The Internet is People</h2><blockquote><p>Could you provide a topic or theme<br> For the lyrics - for example, something like ‘A day at the beach’,<br> ‘A street party’, or ‘A journey through the city’?<br> This will help me provide a more focused and engaging song for you.</p><p><a href="https://youtu.be/2xyMHshBDB4">“Kito - Could You”, Kito’S Music Beats</a></p></blockquote><hr><blockquote><p>The dead internet theory is coming to fruition.</p><p>Greg Bernhardt, <a href="https://twitter.com/GregBernhardt4/status/1875287174205374533">January 3rd, 2025</a></p></blockquote><p>We reached out to Greg Bernhardt asking for comment on LLM usage in PhysicsForums, and he replied:</p><blockquote><p>We have many AI tests in the works to add value to the community. I sent out a 2024 feedback form to members a few weeks ago and many members don’t want AI features. We’ll either work with members to dramatically improve them or end up removing them. We experimented with AI answers from test accounts last year but they were not meeting quality standards. If you find any test accounts we missed, please let me know. My documentation was not the best.</p></blockquote><p>And in response to a follow-up question about the community feedback, he replied:</p><blockquote><p>Mathwonk originally raised the issue of quality. I worked with him to improve them using a newer model, but it’s still not good enough.</p><p>The backdated answers were an internal test. We conceived of a bot that would provide a quality answer to a thread without a reply after 1+ years. That too also failed. Instead, I’m considering pruning all threads without a reply as they clutter up the forums.</p></blockquote><p>It’s hard to imagine that 110 existing users gave consent to be used as test accounts, for 115,000 posts, over four waves spanning almost a year. The idea that these are test accounts gone wrong, or a bot accidentally mislabeled, doesn’t seem to align with the facts.</p><p>It also ties directly to an unstated but very real expectation: my identity in an online community is <em>mine</em>. I have accounts on forums that are older than some friendships. I have written tens of thousands of words under various identities. Just because they are relatively anonymous doesn’t make them less real to me, it doesn’t diminish the effort and time I put into the work done under those identities. Hijacking accounts, filling it with content their original owners did not write? That dilutes their efforts, and muddles their identities. The content was produced with the idea that it was <em>mine</em> in some capacity, inextricably tied to an identity I owned.</p><p>There’s also a social contract: when we create an account in an online community, we do it with the expectation that people we are going to interact with are primarily people. Oh, there will be shills, and bots, and advertisers, but the agreement between the users and the community provider is that they are going to try to defend us from that, and that in exchange we will provide our engagement and content. This is why the recent experiments from Meta with AI generated users are both ridiculous and sickening. When you might be interacting with something masquerading as a human, providing at best, tepid garbage, the value of human interaction via the internet is lost.</p><p>Beyond that, the idea of populating existing accounts with LLM-generated content is destructive. Like paving over an arboretum to make room for a generic strip mall. Internet archaeology is already a difficult and fraught business. It’s so difficult to find lost content, servers that have gone down, websites that are just <em>gone</em>… and now, apparently a lot of backdated data that is AI generated. This is not to say websites shouldn’t evolve and stay current, but this is different, this is a re-writing of history, and rewrites history for no clear gain.</p><p>It probably feels odd to see us write thousands of words fighting for the integrity of a community neither of us is part of, a tiny speck on the Internet trying desperately to survive, an enclave of a different era that is trying to hold on at all costs. But we are sympathetic. Running a website, especially a forum, is expensive. Server costs go up. Databases stop working and now you need to pay an expert or spend hours of unpaid time working on it. Bots flood in. DDOS attacks happen. Another wave of crypto-scams shows up. Staying alive on the internet costs money, and money comes through users and ads. You need those clicks like a man in the desert needs water, and every week it gets more competitive.</p><p>One must transform to survive. That axiom is a truth on the internet. If you don’t, you rapidly find yourself buried on the eighth page of Google results, with no users and no money to keep the servers up. But when communities compromise their morals and the core of their identity to stay afloat, and destroy the very bedrock of their commitment to their users and to some degree to the broader idea of the Internet, we have to wonder… was it worth it?</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Anatomy of a Formal Proof (117 pts)]]></title>
            <link>https://www.ams.org/journals/notices/202502/noti3114/noti3114.html</link>
            <guid>42815755</guid>
            <pubDate>Fri, 24 Jan 2025 18:19:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ams.org/journals/notices/202502/noti3114/noti3114.html">https://www.ams.org/journals/notices/202502/noti3114/noti3114.html</a>, See on <a href="https://news.ycombinator.com/item?id=42815755">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-ams-doc="article">
  <section data-ams-doc="frontmatter">
        <h2>Anatomy of a Formal Proof</h2>
      <p>Jeremy Avigad</p><p>Johan Commelin</p><p>Heather Macbeth</p><p>Adam Topaz</p></section>
  
    <section role="doc-introduction" id="ltxid3" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Introduction</span></h2>
      <p>It has been a long day and you are making your way through a paper related to your work. You suddenly come across the following remark: “…since <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> are eigenvectors of <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg></span> with distinct eigenvalues, they are linearly independent.” Wait—how does the proof go? You should really know this. Here <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> are nonzero elements of a vector space <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠸⠒⠀⠠⠧⠀⠫⠕⠀⠠⠧" aria-label="f colon upper V right arrow upper V" data-owns="0 1 5" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="9.1ex" height="1.954ex" role="tree" focusable="false" viewBox="0 -711 4359.1 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="6"></g></g></svg></span> is a linear map. You force yourself to pick up a pen and write down the following argument:</p>
      <blockquote data-ams-style="null">
        <p>Let <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠷⠭⠾⠀⠨⠅⠀⠨⠍⠭" aria-label="f left parenthesis x right parenthesis equals mu x" data-owns="9 4 11" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="8.92ex" height="1.965ex" role="tree" focusable="false" viewBox="0 -716 4272.6 941" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="12"></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠷⠽⠾⠀⠨⠅⠀⠨⠝⠽" aria-label="f left parenthesis y right parenthesis equals nu y" data-owns="9 4 11" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="8.523ex" height="1.965ex" role="tree" focusable="false" viewBox="0 -716 4082.6 941" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="12"></g></g></svg></span> with <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍⠀⠌⠨⠅⠀⠨⠝" aria-label="mu not equals nu" data-owns="0 1 2" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="4.926ex" height="1.868ex" role="tree" focusable="false" viewBox="0 -678 2359.6 895" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="3"></g></g></svg>.</span> Suppose <span data-ams-doc="math inline"><svg aria-braillelabel="⠁⠭⠬⠃⠽⠀⠨⠅⠀⠼⠴" aria-label="a x plus b y equals 0" data-owns="11 5 6" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="10.599ex" height="1.931ex" role="tree" focusable="false" viewBox="0 -705 5077 925" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="12"></g></g></svg>.</span> Applying <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg></span> and using linearity, we have <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍⠁⠭⠬⠨⠝⠃⠽⠀⠨⠅⠀⠼⠴" aria-label="mu a x plus nu b y equals 0" data-owns="15 7 8" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="12.862ex" height="1.931ex" role="tree" focusable="false" viewBox="0 -705 6161 925" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="16"></g></g></svg>.</span> Multiplying the original equation by <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠝" aria-label="nu" style="vertical-align: -0.015ex;" xmlns="http://www.w3.org/2000/svg" width="1.035ex" height="1.015ex" role="img" focusable="false" viewBox="0 -479 496 486" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D708"></use></g></g></g></svg>,</span> we have <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠝⠁⠭⠬⠨⠝⠃⠽⠀⠨⠅⠀⠼⠴" aria-label="nu a x plus nu b y equals 0" data-owns="15 7 8" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="12.67ex" height="1.931ex" role="tree" focusable="false" viewBox="0 -705 6069 925" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="16"></g></g></svg>.</span> Subtracting the two yields <span data-ams-doc="math inline"><svg aria-braillelabel="⠷⠨⠍⠤⠨⠝⠾⠁⠭⠀⠨⠅⠀⠼⠴" aria-label="left parenthesis mu minus nu right parenthesis a x equals 0" data-owns="13 7 8" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="12.207ex" height="1.948ex" role="tree" focusable="false" viewBox="0 -716 5847 933" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="14"></g></g></svg></span> and since <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍⠤⠨⠝" aria-label="mu minus nu" data-owns="0 1 2" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="4.694ex" height="1.618ex" role="tree" focusable="false" viewBox="0 -558 2248.4 775" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="3"></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> are nonzero, we have <span data-ams-doc="math inline"><svg aria-braillelabel="⠁⠀⠨⠅⠀⠼⠴" aria-label="a equals 0" data-owns="0 1 2" style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.855ex" height="1.365ex" role="tree" focusable="false" viewBox="0 -642 2325.6 654" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="3"></g></g></svg>.</span> The corresponding argument with <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> swapped yields <span data-ams-doc="math inline"><svg aria-braillelabel="⠃⠀⠨⠅⠀⠼⠴" aria-label="b equals 0" data-owns="0 1 2" style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="1.497ex" role="tree" focusable="false" viewBox="0 -705 2288.6 717" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="3"></g></g></svg>,</span> so the only linear combination of <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> that yields <span data-ams-doc="math inline"><svg aria-braillelabel="⠼⠴" aria-label="0" style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.033ex" height="1.363ex" role="img" focusable="false" viewBox="0 -642 495 653" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-N-30"></use></g></g></g></svg></span> is the trivial one.</p>
      </blockquote>
      <p>That works, doesn’t it?</p>
      <p>Your colleagues have all gone home and there is nobody around to discuss this with. So, instead, you turn to your computer and start up Lean, the proof assistant you happen to use. Can you prove the claim formally? As you type, the information window in your editor complains about every misstep—the syntax is fiddly, and you have to get the notation and the instructions just right—but that’s okay, because working through the proof is relaxing and kind of fun. Lean often makes you spell out arguments that are painfully obvious, but you have found that if you set things up just right, it will cheerfully fill in some of the details. After a short while, you have success! Lean signs off on the proof, confirming you have managed to construct a formal derivation in the system’s axiomatic foundation.</p>
      <pre data-ams-specific-use="numbers=right">import Mathlib.LinearAlgebra.LinearIndependent

variable [Field K] [AddCommGroup V] [Module K V]

example (f : V →ₗ[K] V)
    (μ ν : K) (hμν : μ ≠ ν)
    (x y : V) (hx₀ : x ≠ 0) (hy₀ : y ≠ 0)
    (hx : f x = μ • x) (hy : f y = ν • y) :
    ∀ a b : K,
      a • x + b • y = 0 → a = 0 ∧ b = 0 := by
  intro a b hab
  have :=
  calc (μ - ν) • a • x
      = (a • μ • x + b • ν • y) -
        ν • (a • x + b • y) := by module
    _ = f (a • x + b • y) -
        ν • (a • x + b • y) := by simp [hx, hy]
    _ = 0 := by simp [hab]
  simp_all [sub_eq_zero]</pre>
      <p>What a lovely proof! It took some effort to work it out, but it was a pleasure seeing the steps play out formally, and you are proud of the result.</p>
    </section>
    <section id="ltxid4" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Understanding the Proof</span></h2>
      <p>Let’s take a look at what you have done. You are using Lean’s mathematical library, Mathlib, a communally developed and maintained repository of formally verified mathematics. At the time of writing, Mathlib contains more than 80,000 definitions and more than 160,000 theorems, starting from axiomatic primitives and developing mathematics from the bottom up. It also contains dozens of user-contributed automated reasoning procedures that help with the formalization process, as well as notation declarations and configuration information, all of which codify different aspects of our mathematical understanding.</p>
      <p>To avoid having to load the entire library into memory at once, Lean asks you to tell the system what parts of the library you want to use. So the first line of the proof, the one that starts with the keyword <span data-ams-style="monospace">import</span>, tells Lean you want to use the file with the name shown. That pulls in all the files in the library that those notions depend on, which is quite a lot, including basic algebra, properties of scalars and vectors, and so on.</p>
      <p>The next line, the one that begins with the word <span data-ams-style="monospace">variable</span>, declares some of the objects you want to work with: a field, <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠅" aria-label="upper K" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.497ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 717 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D43E"></use></g></g></g></svg>,</span> and a vector space, <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg>.</span> You could have, alternatively, put these declarations after the <span data-ams-style="monospace">example</span> keyword on line 5; using the <span data-ams-style="monospace">variable</span> command to declare them separately is especially convenient when multiple definitions and theorems share the same data and hypotheses. It’s a quirk of the library’s design that you declare that <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg></span> is an additive, commutative, group, coupled with a scalar action that turns <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg></span> into a <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠅" aria-label="upper K" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.497ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 717 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D43E"></use></g></g></g></svg>-module.</span> (Remember, a vector space is nothing more than a module over a ring in which the ring in question is actually a field.) Mathlib includes thousands of axiomatically declared structures, and the contributors to the library take great care to maximize reusability by breaking structural hypotheses into reusable pieces that can easily be configured and composed.</p>
      <p>Next comes the keyword <span data-ams-style="monospace">example</span> (line&nbsp;5), which indicates that the result you are proving is not intended for future use. Using <span data-ams-style="monospace">example</span> is good for experimentation. To prove a lemma or theorem that you intend to use later, you would instead use <span data-ams-style="monospace">lemma</span> or <span data-ams-style="monospace">theorem</span> and provide a name. In that case, once Lean has processed the proof, it is stored in the <em>environment</em>, which means that any file that imports this one can see it. If you think you have proved a theorem that ought to go into Mathlib, you can issue a <em>pull request</em> to add it to the library. Mathlib is overseen by teams of <em>maintainers</em> and <em>reviewers</em> who moderate and update the contents, ensuring the quality and stability of the library.</p>
      <p>You begin stating the claim by introducing the key players:</p>
      <dl data-ams-content-type="itemize">
        <div><dt id="ltxid5">•</dt> <dd><p>a linear map <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg></span> from <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg></span> to itself. Lean’s notation for such linear maps is <span data-ams-style="monospace">V →ₗ[K] V</span>,</p></dd></div>
        <div><dt id="ltxid6">•</dt> <dd><p>two elements of <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠅" aria-label="upper K" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.497ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 717 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D43E"></use></g></g></g></svg>,</span> denoted <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠝" aria-label="nu" style="vertical-align: -0.015ex;" xmlns="http://www.w3.org/2000/svg" width="1.035ex" height="1.015ex" role="img" focusable="false" viewBox="0 -479 496 486" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D708"></use></g></g></g></svg>,</span> which will end up being your eigenvalues, and a hypothesis called <span data-ams-style="monospace">hμν</span> that says <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠝" aria-label="nu" style="vertical-align: -0.015ex;" xmlns="http://www.w3.org/2000/svg" width="1.035ex" height="1.015ex" role="img" focusable="false" viewBox="0 -479 496 486" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D708"></use></g></g></g></svg></span> are distinct,</p></dd></div>
        <div><dt id="ltxid7">•</dt> <dd><p>two vectors called <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg>,</span> as well as hypotheses <span data-ams-style="monospace">hx₀</span> and <span data-ams-style="monospace">hy₀</span> that say that they are nonzero,</p></dd></div>
        <div><dt id="ltxid8">•</dt> <dd><p>and, finally, your two key assumptions, <span data-ams-style="monospace">hx</span> and <span data-ams-style="monospace">hy</span>, which say that <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠷⠭⠾⠀⠨⠅⠀⠨⠍⠡⠭" aria-label="f left parenthesis x right parenthesis equals mu dot x" data-owns="10 4 11" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="10.459ex" height="1.965ex" role="tree" focusable="false" viewBox="0 -716 5010 941" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="12"></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠷⠽⠾⠀⠨⠅⠀⠨⠝⠡⠽" aria-label="f left parenthesis y right parenthesis equals nu dot y" data-owns="10 4 11" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="10.063ex" height="1.965ex" role="tree" focusable="false" viewBox="0 -716 4820 941" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="12"></g></g></svg>.</span></p></dd></div>
      </dl>
      <p>In the notation <span data-ams-style="monospace">V →ₗ[K] V</span>, the <span data-ams-style="monospace">ₗ</span> is a fixed symbol signifying linear maps, whereas the parameter in brackets indicates that we mean linearity over <span data-ams-style="monospace">K</span>.</p>
      <p>At this point, you have set up your <em>context</em>, that is, the data and hypotheses you need to state your claim. You have your <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠅" aria-label="upper K" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.497ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 717 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D43E"></use></g></g></g></svg>-vector</span> space <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg>,</span> a linear map <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠸⠒⠀⠠⠧⠀⠫⠕⠀⠠⠧" aria-label="f colon upper V right arrow upper V" data-owns="0 1 5" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="9.1ex" height="1.954ex" role="tree" focusable="false" viewBox="0 -711 4359.1 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="6"></g></g></svg>,</span> two scalars <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠝" aria-label="nu" style="vertical-align: -0.015ex;" xmlns="http://www.w3.org/2000/svg" width="1.035ex" height="1.015ex" role="img" focusable="false" viewBox="0 -479 496 486" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D708"></use></g></g></g></svg>,</span> and eigenvectors <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> for <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠝" aria-label="nu" style="vertical-align: -0.015ex;" xmlns="http://www.w3.org/2000/svg" width="1.035ex" height="1.015ex" role="img" focusable="false" viewBox="0 -479 496 486" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D708"></use></g></g></g></svg></span> respectively. At that point you are ready to state the conclusion (lines&nbsp;9 and&nbsp;10), namely, that <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> are linearly independent: <span data-ams-style="monospace">∀ a b : K, a • x + b • y = 0 → a = 0 ∧ b = 0</span>. You have decided to use the definition of linear independence for a pair of vectors: Whenever <span data-ams-doc="math inline"><svg aria-braillelabel="⠁" aria-label="a" style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.159ex" height="1.025ex" role="img" focusable="false" viewBox="0 -479 555 491" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D44E"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠃" aria-label="b" style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.081ex" height="1.497ex" role="img" focusable="false" viewBox="0 -705 518 717" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D44F"></use></g></g></g></svg></span> are scalars, if <span data-ams-doc="math inline"><svg aria-braillelabel="⠁⠡⠭⠬⠃⠡⠽⠀⠨⠅⠀⠼⠴" aria-label="a dot x plus b dot y equals 0" data-owns="10 7 8" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="13.678ex" height="1.931ex" role="tree" focusable="false" viewBox="0 -705 6551.9 925" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="12"></g></g></svg></span> then <span data-ams-doc="math inline"><svg aria-braillelabel="⠁⠀⠨⠅⠀⠼⠴" aria-label="a equals 0" data-owns="0 1 2" style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.855ex" height="1.365ex" role="tree" focusable="false" viewBox="0 -642 2325.6 654" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="3"></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠃⠀⠨⠅⠀⠼⠴" aria-label="b equals 0" data-owns="0 1 2" style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="1.497ex" role="tree" focusable="false" viewBox="0 -705 2288.6 717" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="3"></g></g></svg>.</span></p>
      <p>Notice that you have used the symbol <span data-ams-style="monospace">:</span> in expressions like <span data-ams-style="monospace">x y : V</span> (line&nbsp;7) to express that <span data-ams-style="monospace">x</span> and <span data-ams-style="monospace">y</span> are elements of <span data-ams-style="monospace">V</span>, rather than writing <span data-ams-style="monospace">x ∈ V</span> and <span data-ams-style="monospace">y ∈ V</span>. In Lean’s axiomatic foundation, a version of <em>dependent type theory</em>, every object has a fundamental data type. In this example, we would say that that <span data-ams-doc="math inline"><svg aria-braillelabel="⠭" aria-label="x" style="vertical-align: -0.021ex;" xmlns="http://www.w3.org/2000/svg" width="1.167ex" height="1.021ex" role="img" focusable="false" viewBox="0 -479 559 489" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D465"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠽" aria-label="y" style="vertical-align: -0.459ex;" xmlns="http://www.w3.org/2000/svg" width="1.065ex" height="1.466ex" role="img" focusable="false" viewBox="0 -482 510 702" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D466"></use></g></g></g></svg></span> are <em>terms</em> of the <em>type</em> <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠧" aria-label="upper V" style="vertical-align: -0.01ex;" xmlns="http://www.w3.org/2000/svg" width="1.543ex" height="1.382ex" role="img" focusable="false" viewBox="0 -657 739 662" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D449"></use></g></g></g></svg>.</span> Interestingly, we use the same notation in an expression like <span data-ams-style="monospace">hx₀ : x ≠ 0</span> (also line&nbsp;7) to express that <span data-ams-style="monospace">hx₀</span> is a label for the assumption <span data-ams-style="monospace">x ≠ 0</span>. In dependent type theory, assertions like <span data-ams-style="monospace">x ≠ 0</span> (also known as <em>propositions</em>) are analogous to data types, and they are handled by the same fundamental mechanisms. Lean checks that an expression like <span data-ams-style="monospace">a • x + b • y</span> is a well-formed expression of type <span data-ams-style="monospace">V</span>, given information about the variables and symbols involved, and, in the same way, it checks that a formal expression is a well-formed proof of the proposition <span data-ams-style="monospace">∀ a b : K, a • x + b • y = 0 → a = 0 ∧ b = 0</span>, given the data and assumptions it depends on. That is why the latter appears after the colon in the example’s conclusion: the statement of the example announces your intent to construct a formal proof of the conclusion, given the data and assumptions that come before.</p>
      <p>What comes after the symbol <span data-ams-style="monospace">:=</span> (line&nbsp;10) is the proof itself, or, more precisely, instructions that tell Lean how to construct the proof. If you are successful, the corresponding expression is stored in memory and checked for correctness by Lean’s trusted <em>kernel</em>. The keyword <span data-ams-style="monospace">by</span> after the <span data-ams-style="monospace">:=</span> instructs Lean to enter <em>tactic mode</em>, which means that the text that follows should be interpreted as a list of instructions that tell Lean how to build the required proof. A <em>tactic</em> is a procedure that automatically fills in a chain of formal inferences that is needed to justify a reasoning step. Such a chain can be as short as a single logical axiom or rule, but it can also be quite long and involved. Tactics thus play an important role in bridging the gap between the kind of reasoning that is intuitively clear and natural to mathematicians and the stringent axiomatic rules embodied by a formal system.</p>
      <p>The first tactic you use is <span data-ams-style="monospace">intro a b hab</span> (line&nbsp;11). This introduces the two variables <span data-ams-style="monospace">a : K</span>, <span data-ams-style="monospace">b : K</span> which your statement quantifies over, as well as the antecedent of the implication, that is, the assumption <span data-ams-style="monospace">hab : a • x + b • y = 0</span>. As you type or move your cursor around a proof, Lean displays the <em>tactic state</em>, i.e., information that is relevant at that point in the proof, in its <em>infoview</em> window. After the <span data-ams-style="monospace">intro</span> tactic, the tactic state looks something like this:</p>
      <pre>K : Type
V : Type
f : V →ₗ[K] V
μ ν : K
hμν : μ ≠ ν
x y : V
hx₀ : x ≠ 0
hy₀ : y ≠ 0
hx : f x = μ • x
hy : f y = ν • y
a b : K
hab : a • x + b • y = 0
⊢ a = 0 ∧ b = 0</pre>
      <p>This is nice a summary of where you are in the proof, including the objects and assumptions you started with as well as the objects <span data-ams-style="monospace">a</span>, <span data-ams-style="monospace">b</span> and the assumption <span data-ams-style="monospace">hab</span> that you introduced in the first step. The line that starts with <span data-ams-style="monospace">⊢</span> indicates that your current <em>goal</em> is to prove the conjunction <span data-ams-style="monospace">a = 0 ∧ b = 0</span>.</p>
      <p>While writing the proof, you notice that Lean complains with warnings and error messages. This is expected, since the proof is incomplete. You can appease Lean by apologizing for the incomplete proof: If you use the <span data-ams-style="monospace">sorry</span> tactic on the final line of the proof, Lean will not raise an error over the fact that the proof is incomplete, but it will still raise a gentle warning about the use of <span data-ams-style="monospace">sorry</span>.</p>
      <p>The next step in the proof starts with <span data-ams-style="monospace">have := calc</span> (line&nbsp;12). This introduces a calculation, similar to a <span data-ams-style="monospace">\begin{align*} …\end{align*}</span> block in LaTeX. The calculation itself is very similar to the one in the proof sketch above, but notice that the individual steps in the calculation are justified by short subproofs like <span data-ams-style="monospace">by module</span> (line&nbsp;15) or <span data-ams-style="monospace">by simp [hx, hy]</span> (line&nbsp;17). The <span data-ams-style="monospace">module</span> tactic proves equalities of universal linear expressions, in other words, linear equalities that are true in all modules, and do not use specific facts about the module at hand. The <span data-ams-style="monospace">simp</span> tactic is a powerful tool that uses a database of equalities and equivalences from Mathlib, together with user-specified equations (like <span data-ams-style="monospace">hx, hy</span>) to rewrite its goal into a simpler form. Happily, in this case, the goal becomes a trivial equality, and the goal is therefore closed. In a moment, we will consider the steps that <span data-ams-style="monospace">simp</span> has taken in greater detail.</p>
      <p>After this calculation, you completed your proof with the <span data-ams-style="monospace">simp_all</span> tactic (line&nbsp;19), which is a variant of <span data-ams-style="monospace">simp</span> that recursively uses all the hypotheses to simplify all hypotheses and the goal. Now if you leave a <span data-ams-style="monospace">sorry</span> after the <span data-ams-style="monospace">simp_all</span>, Lean will complain that there is nothing to be sorry about and insist that remove the apology. Lean checks the correctness of the proof and confirms it with its silence: the absence of errors is the proclamation that you have succeeded.</p>
    </section>
    <section id="ltxid9" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Using Automation</span></h2>
      <p>So what exactly does the <span data-ams-style="monospace">simp</span> tactic do? The following provides a manual, more detailed proof of one step of the calculation in your proof, with the direction of the equality reversed.</p>
      <pre>variable (f : V →ₗ[K] V)
  (μ ν : K) (x y : V) (a b : K)

example (hx : f x = μ • x) (hy : f y = ν • y) :
  f (a • x + b • y) = (a • μ • x + b • ν • y) := by
calc f (a • x + b • y)
    = f (a • x) + f (b • y) := by
        rw [map_add]
  _ = a • f x + b • f y := by
        rw [map_smul, map_smul]
  _ = (a • μ • x + b • ν • y) := by
        rw [hx, hy]</pre>
      <p>This example demonstrates the <em>rewrite</em> tactic, denoted <span data-ams-style="monospace">rw</span>. In the calculation, we first rewrite with the lemma <span data-ams-style="monospace">map_add</span>, which states that for any linear map <span data-ams-style="monospace">f</span>, the equation <span data-ams-style="monospace">f (v + w) = f v + f w</span> holds. The next step in the calculation is justified by rewriting twice with the lemma <span data-ams-style="monospace">map_smul</span>, which states that for any linear map <span data-ams-style="monospace">f</span>, scalar <span data-ams-style="monospace">c</span>, and vector <span data-ams-style="monospace">v</span>, the equation <span data-ams-style="monospace">f (c • v) = c • f v</span> holds. (Here <span data-ams-style="monospace">smul</span> stands for “scalar multiplication.”) The underscores before each subsequent step are part of the <span data-ams-style="monospace">calc</span> syntax, indicating to the parser that the calculation continues. The proof concludes by rewriting with the hypotheses <span data-ams-style="monospace">hx</span> and <span data-ams-style="monospace">hy</span>, which assert that <span data-ams-style="monospace">x</span> and <span data-ams-style="monospace">y</span> are eigenvectors of <span data-ams-style="monospace">f</span> with eigenvalues <span data-ams-style="monospace">μ</span> and <span data-ams-style="monospace">ν</span> respectively.</p>
      <p>The lemmas <span data-ams-style="monospace">map_add</span> and <span data-ams-style="monospace">map_smul</span> are part of the Mathlib library, and they are labeled with the <em>attribute</em> <span data-ams-style="monospace">@[simp]</span>. This attribute tells Lean that the lemma should be added to the database of lemmas that <span data-ams-style="monospace">simp</span> uses to simplify expressions. And that is the reason why the <span data-ams-style="monospace">simp</span> tactic could prove the goal in one go: it chained together the <span data-ams-style="monospace">rw</span> steps that we spelled out step by step in the calculation above.</p>
      <p>One of the challenges of formalization is that we often need to spell out, in painful detail, inferences that seem obvious or straightforward to us. The more we can get the computer to fill in, the better. The simplifier is an important example of <em>automated reasoning</em> that can help in this respect. The <span data-ams-style="monospace">module</span> tactic is another.</p>
      <p>Broadly speaking, there are two classes of automation. Firstly, there is <em>general purpose</em> automation. One example that we have seen is the <span data-ams-style="monospace">simp</span> tactic, the simplifier. Another example is <span data-ams-style="monospace">aesop</span>, a tactic that provides “Automated Extensible Search for Obvious Proofs.” In the proof assistant Isabelle, there is a tool called <span data-ams-style="monospace">sledgehammer</span>, which can search for proofs using a large database of lemmas. And recently AI copilots have demonstrated the ability to suggest tactics and fill in parts of proofs in Lean. The wide applicability of these general-purpose tools is balanced by the fact that, at least for now, they can only assist with proofs that are relatively straightforward.</p>
      <p>The other class of automation is <em>domain-specific</em> automation. Here we have also seen an example: the <span data-ams-style="monospace">module</span> tactic. Other examples include the <span data-ams-style="monospace">ring</span> tactic, which solves equations in commutative rings, the <span data-ams-style="monospace">linarith</span> tactic, which solves linear arithmetic problems, and the <span data-ams-style="monospace">fun_prop</span> tactic, which proves that functions satisfy a given property such as “continuity” or “measurability.” These tactics are less general; they typically have a well-defined and narrow scope, but they can be very powerful in their domain of applicability. A prime example of this approach comes from the use of software tools known as SAT solvers and SMT solvers: if a claim can be encoded as a boolean formula or a formula in some decidable theory, then these can be used to justify it automatically. This has been fruitfully applied in non-trivial ways, see for example&nbsp;<cite-group><cite><a role="doc-biblioref" data-ams-ref="bibr" href="#bibr-MR4449705">BHMN22</a></cite></cite-group>.</p>
    </section>
    <section id="ltxid10" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Generalizing the Hypotheses</span></h2>
      <p>Often, one of the first things we do when we have proved a lemma or a theorem is check whether the hypotheses can be weakened, in order to increase its applicability. Proof assistants are especially helpful in this respect, because they enable us to tinker with hypotheses interactively and see what breaks. Returning to our example, upon verifying the initial result, you might wonder: what are the minimal assumptions that we need to make this proof go through? Let’s experiment. The proof never mentions inverses of scalars, so it should work for a larger class of rings. In a first attempt, we might try to replace the vector space <span data-ams-style="monospace">V</span> by an arbitrary module <span data-ams-style="monospace">M</span> as follows:</p>
      <pre>variable {R M : Type}
  [Ring R] [AddCommGroup M] [Module R M]</pre>
      <p>But Lean complains at the first step in the calculation, which requires <span data-ams-style="monospace">b • ν • y = ν • b • y</span>. We can address this by assuming that the ring of scalars is commutative. However, after making that change, the final step of the proof is still broken. A bit of reflection shows that this step uses the result of the calculation steps together with the assumptions <span data-ams-style="monospace">hμν : μ ≠ ν</span> and <span data-ams-style="monospace">hx₀ : x ≠ 0</span> to prove that <span data-ams-style="monospace">a = 0</span>. In other words, we need the additional property that <span data-ams-style="monospace">r • m = 0</span> implies that <span data-ams-style="monospace">r = 0</span> or <span data-ams-style="monospace">m = 0</span> for every <span data-ams-style="monospace">r</span> in <span data-ams-style="monospace">R</span> and <span data-ams-style="monospace">m</span> in <span data-ams-style="monospace">M</span>. Mathlib expresses this as the property <span data-ams-style="monospace">NoZeroSMulDivisors R M</span>, and we can add that assumption as follows:</p>
      <pre>variable {R M : Type}
  [CommRing R] [AddCommGroup M] [Module R M]
  [NoZeroSMulDivisors R M]

example (f : M →ₗ[R] M)
  (μ ν : R) (hμν : μ ≠ ν)
  (x y : M) (hx₀ : x ≠ 0) (hy₀ : y ≠ 0)
  (hx : f x = μ • x) (hy : f y = ν • y) :
  ∀ a b : R, a • x + b • y = 0 → a = 0 ∧ b = 0</pre>
      <p>Lean accepts this statement with the same proof as before! We have therefore obtained a more general theorem without changing a single character of the proof.</p>
    </section>
    <section id="ltxid11" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Strengthening the Theorem</span></h2>
      <p>Let’s see if we can strengthen your result even further. You started with a basic version involving vector spaces over fields and only two eigenvectors, and we just generalized it to suitable modules over commutative rings. Where can we go from here?</p>
      <p>Let’s try to generalize the theorem to arbitrary families of eigenvectors. To do this, we will need to think carefully about how to express, in Lean, the fact that an arbitrary family of vectors is linearly independent. We could write down a definition from scratch, but it makes sense to see if we can take advantage of things that are already in the library. If we navigate to the Mathlib documentation webpage ⁠<a id="fnlink-ltxid12-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid12"><span>Footnote</span><sup>1</sup></a> and start typing <span data-ams-style="monospace">linear independent</span> in the search box, one of the first few results that comes up is the following:</p>
      <pre>def LinearIndependent {ι : Type}
  (R : Type) {M : Type}
  (v : ι → M) [Semiring R]
  [AddCommMonoid M] [Module R M] :
  Prop</pre>
      <p>Here <span data-ams-style="monospace">R</span> and <span data-ams-style="monospace">M</span> are the relevant ring and module, as before, <span data-ams-style="monospace">ι</span> is an indexing type, and <span data-ams-style="monospace">v</span> is a family of elements of <span data-ams-style="monospace">M</span> indexed by <span data-ams-style="monospace">ι</span>. It is standard, and convenient, to represent a family <span data-ams-doc="math inline"><svg aria-braillelabel="⠷⠧⠰⠊⠐⠾⠰⠊⠀⠰⠈⠑⠀⠨⠊" aria-label="left parenthesis v Subscript i Baseline right parenthesis Subscript i element of iota" data-owns="10 8" style="vertical-align: -0.451ex;" xmlns="http://www.w3.org/2000/svg" width="5.129ex" height="1.946ex" role="tree" focusable="false" viewBox="0 -716 2456.7 932" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation"><g role="presentation" data-owns-id="9"></g></g></g></svg></span> of elements of <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠍" aria-label="upper M" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.908ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 914 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D440"></use></g></g></g></svg></span> as a function <span data-ams-style="monospace">v : ι → M</span>, in which case the <span data-ams-doc="math inline"><svg aria-braillelabel="⠊" aria-label="i" style="vertical-align: -0.019ex;" xmlns="http://www.w3.org/2000/svg" width="0.572ex" height="1.407ex" role="img" focusable="false" viewBox="0 -665 274 674" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D456"></use></g></g></g></svg>th</span> element, <span data-ams-doc="math inline"><svg aria-braillelabel="⠧⠰⠊" aria-label="v Subscript i" data-owns="0 1" style="vertical-align: -0.326ex;" xmlns="http://www.w3.org/2000/svg" width="1.63ex" height="1.326ex" role="tree" focusable="false" viewBox="0 -479 780.7 635.4" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation"><g role="presentation" data-owns-id="2"></g></g></g></svg>,</span> is simply written <span data-ams-style="monospace">v i</span>. All the arguments in curly and square brackets are generally left implicit, which is to say, we expect to write <span data-ams-style="monospace">LinearIndependent R v</span> and have Lean figure out the rest. The annotation <span data-ams-style="monospace">Prop</span> means that the expression <span data-ams-style="monospace">LinearIndependent R v</span> is a proposition, namely, the proposition that the family <span data-ams-style="monospace">v</span> is linearly independent over <span data-ams-style="monospace">R</span>. At the moment, we don’t need to know the body of the definition; we can use it as a black box.</p>
      <p>To do so, we will add an indexing type <span data-ams-style="monospace">ι</span> to the statement of our theorem, and since we also want to say that the vectors are all <em>eigenvectors</em>, we will also use <span data-ams-style="monospace">ι</span> to index a family <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> of scalars which will act as the eigenvalues. We can now formulate the statement we are after as follows:</p>
      <pre>example {R M : Type} [CommRing R]
    [AddCommGroup M] [Module R M]
    [NoZeroSMulDivisors R M]
    (f : M →ₗ[R] M)
    (μ : ι → R) (hμ : Function.Injective μ)
    (v : ι → M) (hv : ∀ i, v i ≠ 0)
    (h : ∀ i, f (v i) = μ i • v i) :
    LinearIndependent R v</pre>
      <p>Note that we have formulated the fact that we are considering <em>distinct</em> eigenvalues by assuming <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> is injective.</p>
      <p>We should check to see whether something like this theorem is already in the library. If we go back to the documentation webpage and search for <span data-ams-style="monospace">eigenvector linear independent</span>, only two results come up:</p>
      <pre>theorem
  Module.End.eigenvectors_linearIndependent
  {R : Type} {M : Type} [CommRing R]
  [AddCommGroup M] [Module R M]
  [NoZeroSMulDivisors R M]
  (f : Module.End R M)
  (μs : Set R) (xs : ↑μs → M)
  (h_eigenvec : ∀ (μ : ↑μs),
    f.HasEigenvector (↑μ) (xs μ)) :
  LinearIndependent (ι := ↑μs) R xs</pre>
      <p>and the variant</p>
      <pre>theorem
  Module.End.eigenvectors_linearIndependent'
  {R : Type} {M : Type} [CommRing R]
  [AddCommGroup M] [Module R M] {ι : Type}
  [NoZeroSMulDivisors R M]
  (f : Module.End R M)
  (μ : ι → R) (hμ : Function.Injective μ)
  (v : ι → M)
  (h_eigenvec : ∀ (i : ι),
    f.HasEigenvector (μ i) (v i)) :
  LinearIndependent R v</pre>
      <p>The difference between the two is that the first is about a set of scalars and a function assigning an eigenvector to each scalar, whereas the second one is about indexed families of scalars and eigenvectors. The second one is more promising for our application, since we also chose to use indexed families of vectors and scalars. To use this theorem to prove our version, we invoke the <span data-ams-style="monospace">apply</span> tactic.</p>
      <pre>example {R M : Type} [CommRing R]
    [AddCommGroup M] [Module R M]
    [NoZeroSMulDivisors R M]
    (f : M →ₗ[R] M)
    (μ : ι → R) (hμ : Function.Injective μ)
    (v : ι → M) (hv : ∀ i, v i ≠ 0)
    (h : ∀ i, f (v i) = μ i • v i) :
    LinearIndependent R v := by
  apply Module.End.eigenvectors_linearIndependent'</pre>
      <p>This leaves us with a number of goals:</p>
      <dl data-ams-content-type="enumerate">
        <div><dt id="ltxid13">1.</dt> <dd><p><span data-ams-style="monospace">Function.Injective ?μ</span>, asking us to prove that something is injective.</p></dd></div>
        <div><dt id="ltxid14">2.</dt> <dd><p><span data-ams-style="monospace">∀ (i : ι), ?f.HasEigenvector (?μ i) (v i)</span>, which looks like it should have something to do with our assumptions <span data-ams-style="monospace">h</span> and <span data-ams-style="monospace">hv</span>.</p></dd></div>
        <div><dt id="ltxid15">3.</dt> <dd><p><span data-ams-style="monospace">Module.End R M</span>, asking us to provide an endomorphism of <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠍" aria-label="upper M" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.908ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 914 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D440"></use></g></g></g></svg>;</span> this should just be our linear map <span data-ams-style="monospace">f</span>.</p></dd></div>
        <div><dt id="ltxid16">4.</dt> <dd><p>And finally, <span data-ams-style="monospace">ι → R</span>, which will be our <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg>.</span></p></dd></div>
      </dl>
      <p>The <span data-ams-style="monospace">?μ</span> in the first two goals and the <span data-ams-style="monospace">?f</span> in the second goal mean that Lean does not yet know how to instantiate the variables <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> and <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg></span> in the theorem we have invoked. It left those tasks as the third and fourth goals; Lean expects that it will be more convenient for us to provide that information implicitly when we solve the other goals.</p>
      <p>We have made progress, but we still need to provide the information requested. We should clearly use <span data-ams-style="monospace">hμ</span> to solve the first goal, which we do by adding the next line to our proof:</p>
      <pre>apply Module.End.eigenvectors_linearIndependent'
  exact hμ</pre>
      <p>As you might guess, the <span data-ams-style="monospace">exact</span> tactic tells Lean to use the assumption <span data-ams-style="monospace">hμ</span> to close the goal. As a side effect, that also closes goal 4: Lean is now able to infer that the family in question is <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg>.</span> We then have two goals left:</p>
      <dl data-ams-content-type="enumerate">
        <div><dt id="ltxid17">1.</dt> <dd><p><span data-ams-style="monospace">∀ (i : ι), ?f.HasEigenvector (μ i) (v i)</span>, and</p></dd></div>
        
      </dl>
      <p>We know that the endomorphism of <span data-ams-doc="math inline"><svg aria-braillelabel="⠠⠍" aria-label="upper M" style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.908ex" height="1.372ex" role="img" focusable="false" viewBox="0 -657 914 657" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D440"></use></g></g></g></svg></span> should be <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg>,</span> so we swap the order of the goals and give Lean this information:</p>
      <pre>apply Module.End.eigenvectors_linearIndependent'
  exact hμ
  swap ; exact f</pre>
      <p>This leaves us with one last goal, namely, <span data-ams-style="monospace">∀ (i : ι), Module.End.HasEigenvector f (μ i) (v i)</span>. We need to use our assumptions <span data-ams-style="monospace">h</span> and <span data-ams-style="monospace">hv</span>, but it’s unclear how to package them together to satisfy the definition of <span data-ams-style="monospace">Module.End.HasEigenvector</span>. Instead of going back to the documentation page and looking up the definition, we can ask Lean what we have to do.</p>
      <pre>apply Module.End.eigenvectors_linearIndependent'
  exact hμ
  swap ; exact f
  intro i ; constructor</pre>
      <p>As before, the <span data-ams-style="monospace">intro</span> tactic introduces an arbitrary <span data-ams-style="monospace">i</span>, and then the <span data-ams-style="monospace">constructor</span> tactic tells Lean that we are ready to provide the information needed to show that <span data-ams-style="monospace">v i</span> is an eigenvector of <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg></span> with eigenvalue <span data-ams-style="monospace">μ i</span>. This makes progress, but we still have the following goals to fulfill:</p>
      <dl data-ams-content-type="enumerate">
        <div><dt id="ltxid19">1.</dt> <dd><p><span data-ams-style="monospace">v i ∈ Module.End.eigenspace f (μ i)</span></p></dd></div>
        <div><dt id="ltxid20">2.</dt> <dd><p><span data-ams-style="monospace">v i ≠ 0</span>, which is obviously an application of <span data-ams-style="monospace">hv</span>.</p></dd></div>
      </dl>
      <p>For 1, the hypothesis <span data-ams-style="monospace">h : ∀ i, f (v i) = μ i • v i</span> should do the trick, but applying it directly doesn’t work. After digging into the details, we see that this is because the eigenspace of <span data-ams-doc="math inline"><svg aria-braillelabel="⠋" aria-label="f" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="1.205ex" height="1.954ex" role="img" focusable="false" viewBox="0 -711 577 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D453"></use></g></g></g></svg></span> with respect to a scalar <span data-ams-doc="math inline"><svg aria-braillelabel="⠨⠍" aria-label="mu" style="vertical-align: -0.453ex;" xmlns="http://www.w3.org/2000/svg" width="1.228ex" height="1.441ex" role="img" focusable="false" viewBox="0 -473 588 690" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g><g><use xlink:href="#MJX-STX-I-1D707"></use></g></g></g></svg></span> is defined as the kernel of <span data-ams-doc="math inline"><svg aria-braillelabel="⠋⠤⠨⠍⠡⠂" aria-label="f minus mu dot 1" data-owns="0 1 6" style="vertical-align: -0.47ex;" xmlns="http://www.w3.org/2000/svg" width="7.436ex" height="1.954ex" role="tree" focusable="false" viewBox="0 -711 3561.9 936" xmlns:xlink="http://www.w3.org/1999/xlink"><g role="presentation" stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g role="presentation" data-owns-id="5"></g></g></svg>,</span> so we will need to convert <span data-ams-style="monospace">h</span> to this form. We could do this manually, but we can first check whether we can use a preexisting lemma from the library. The fastest way to do this, in the middle of a Lean proof, is to try the <span data-ams-style="monospace">exact?</span> tactic. This will do a search for ways of applying existing lemmas to close the goal <em>exactly</em>. This tactic doesn’t always work, but it can’t hurt to try. Aha! In this case it tells us right away that we can close the first goal by writing <span data-ams-style="monospace">exact Module.End.mem_eigenspace_iff.mpr (h i)</span>. The second goal is also easy to close by applying <span data-ams-style="monospace">hv</span>, so now we have a complete proof:</p>
      <pre>apply Module.End.eigenvectors_linearIndependent'
  exact hμ
  swap ; exact f
  intro i
  constructor
  exact Module.End.mem_eigenspace_iff.mpr (h i)
  apply hv</pre>
      <p>The beginning of our proof was a bit messy, but we can clean things up to obtain a nice final result:</p>
      <pre>example {R M : Type} [CommRing R]
    [AddCommGroup M] [Module R M]
    [NoZeroSMulDivisors R M]
    (f : M →ₗ[R] M)
    (μ : ι → R) (hμ : Function.Injective μ)
    (v : ι → M) (hv : ∀ i, v i ≠ 0)
    (h : ∀ i, f (v i) = μ i • v i) :
    LinearIndependent R v := by
  apply
    Module.End.eigenvectors_linearIndependent' f μ hμ
  intro i
  constructor
  · exact Module.End.mem_eigenspace_iff.mpr (h i)
  · apply hv</pre>
      <p>The <span data-ams-style="monospace">apply</span> tactic now supplies <span data-ams-style="monospace">f</span>, <span data-ams-style="monospace">μ</span>, and <span data-ams-style="monospace">hμ</span> right away, leaving only one remaining goal.</p>
      <p>We have thus achieved the level of generality we were after. Should this theorem be added to Mathlib? Upon consideration, we should conclude that our theorem is not substantially different from <span data-ams-style="monospace">Module.End.eigenvectors_linearIndependent'</span>. In our proof, we only added some plumbing and changed the way we talk about eigenvectors to match the theorem in the library. Now that we know about <span data-ams-style="monospace">Module.End.HasEigenvector</span>, it seems that this is the standard way to talk about eigenvectors in Mathlib. If we were to modify our statement to use this instead of our bespoke <span data-ams-style="monospace">h</span> and <span data-ams-style="monospace">hv</span>, our theorem would be a direct application of <span data-ams-style="monospace">Module.End.eigenvectors_linearIndependent'</span>. In other words, we have come to realize that the theorem in the library is what we really wanted all along. But the good news is that we have learned a lot in the process, and we are now much more comfortable reasoning about linear independence and eigenvectors with Mathlib.</p>
    </section>
    <section id="ltxid21" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Using Version Control</span></h2>
      <p>Programmers and computer scientists have long made use of <em>version control</em> platforms like GitHub to work on large, collaborative software projects. Formalization has brought the same tools and methodologies to mathematics. At the time of writing, Mathlib comprises approximately 5,000 files and 1.5 million lines, written by over 300 contributors. These contributions go through an open review process on GitHub, before they are merged into the main repository. In total there have been a bit more than 30,000 contributions since Mathlib’s inception in 2017.</p>
      <p>A nice thing about version control tools is that they maintain the entire history of the project, allowing us to see what has changed and when. For example, we can trace the history of the concept of “linear independence” in Mathlib. It all started on December 7, 2017, when Johannes Hölzl committed⁠<a id="fnlink-ltxid22-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid22"><span>Footnote</span><sup>2</sup></a> the file <span data-ams-style="monospace">algebra/linear_algebra/basic.lean</span> to the repository. The file was 708 lines long, and on line 186 it contained a definition of linear independence.</p>
      <pre>def linear_independent (s : set β) : Prop :=
  ∀ l : lc α β, (∀x∉s, l x = 0) →
    l.sum (λv c, c • v) = 0 → l = 0</pre>
      <p>The terms <span data-ams-style="monospace">l</span> quantify over <span data-ams-style="monospace">lc α β</span>, the type of all linear combinations of elements of <span data-ams-style="monospace">β</span> with coefficients in <span data-ams-style="monospace">α</span>.</p>
      <p>On March 10, 2018, an administrative operation⁠<a id="fnlink-ltxid23-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid23"><span>Footnote</span><sup>3</sup></a> moved <span data-ams-style="monospace">linear_algebra/</span> out of <span data-ams-style="monospace">algebra/</span> so that it became a top-level folder. Another such move occurred on January 15, 2019, when Simon Hudon moved⁠<a id="fnlink-ltxid24-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid24"><span>Footnote</span><sup>4</sup></a> all the mathematical content into <span data-ams-style="monospace">src/</span> to separate it from the tests and other auxiliary files.</p>
      <p>On July 3, 2019, Alexander Bentkamp morphed⁠<a id="fnlink-ltxid25-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid25"><span>Footnote</span><sup>5</sup></a> the definition into</p>
      <pre>def linear_independent : Prop :=
  (finsupp.total ι M R v).ker = ⊥</pre>
      <p>In other words, a collection of vectors <span data-ams-style="monospace">v</span> in <span data-ams-style="monospace">M</span> is linearly independent if the natural map from the free module generated by the vectors <span data-ams-style="monospace">v</span> to <span data-ams-style="monospace">M</span> has trivial kernel.</p>
      <p>Then, on October 5, 2020, Anne Baanen split⁠<a id="fnlink-ltxid26-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid26"><span>Footnote</span><sup>6</sup></a> linear independence and the accumulated supporting theory into a separate file: <span data-ams-style="monospace">src/linear_algebra/linear_independent.lean</span>. The file was 918 lines long. The story continued on February 23, 2023, when Pol’tta / Miyahara Kō ported⁠<a id="fnlink-ltxid27-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid27"><span>Footnote</span><sup>7</sup></a> the file to Lean 4 as part of a massive collaborative effort to move all of Mathlib to the new version of Lean. The filename is now <span data-ams-style="monospace">Mathlib/LinearAlgebra/LinearIndependent.lean</span>, and it lives in the new <span data-ams-style="monospace">mathlib4</span> repository on GitHub. The definition has not changed substantially since the change by Bentkamp. At the time of writing, it reads as follows:</p>
      <pre>def LinearIndependent : Prop :=
  LinearMap.ker (Finsupp.total ι M R v) = ⊥</pre>
    </section>
    <section id="ltxid28" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Conclusions</span></h2>
      <p>The earliest programs for checking mathematical proofs include Nicolaas de Bruijn’s Automath system, launched in 1967, and Andrzej Trybulec’s Mizar system, launched in 1973. Since then, dozens of proof assistants have been developed; Coq, Isabelle, and HOL Light are among the more prominent ones still in use today. The Lean project, launched by Leonardo de Moura in 2013, is a relative newcomer. A special issue of the <em>Notices</em>, with articles by John Harrison&nbsp;<cite-group><cite><a role="doc-biblioref" data-ams-ref="bibr" href="#bibr-MR2463992">Har08</a></cite></cite-group>, Thomas Hales&nbsp;<cite-group><cite><a role="doc-biblioref" data-ams-ref="bibr" href="#bibr-MR2463990">Hal08</a></cite></cite-group>, and Freek Wiedijk&nbsp;<cite-group><cite><a role="doc-biblioref" data-ams-ref="bibr" href="#bibr-MR2463993">Wie08</a></cite></cite-group>, surveyed the state of the field in 2008. We have come a long way since then.</p>
      <p>Proof assistants are now commonly used in industry to verify hardware, software, network protocols, cryptographic protocols, cyberphysical systems, and more. Mathematicians have only recently begun to embrace the technology, and it is becoming clear that there are several benefits to representing mathematics in digital form. Just as the word processor opened up new opportunities for written expression and communication, the digitization of mathematics opens up new opportunities for mathematical research and teaching.⁠<a id="fnlink-ltxid29-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid29"><span>Footnote</span><sup>8</sup></a> The practical benefits are not the only motivation; to many of us, formalizing mathematics feels like the right thing to do. Mathematical definitions and theorems <em>deserve</em> to be rendered digitally.</p>
      <p>It is also becoming clear that the technology is here to stay. Mathlib currently has roughly 1.5 million lines of code and continues to grow. Important results, including foundations for Clausen and Scholze’s condensed mathematics,⁠<a id="fnlink-ltxid30-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid30"><span>Footnote</span><sup>9</sup></a> the polynomial Freiman–Ruzsa conjecture,⁠<a id="fnlink-ltxid31-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid31"><span>Footnote</span><sup>10</sup></a> and an exponentially improved upper bound to Ramsey’s theorem,⁠<a id="fnlink-ltxid32-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid32"><span>Footnote</span><sup>11</sup></a> have been formally verified before journal referees signed off on them. A number of collaborative verification projects have been launched, including a proof of the sphere eversion theorem⁠<a id="fnlink-ltxid33-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid33"><span>Footnote</span><sup>12</sup></a> and a proof of a strengthened version of Carlson’s theorem on pointwise almost everywhere convergence of Fourier series.⁠<a id="fnlink-ltxid34-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid34"><span>Footnote</span><sup>13</sup></a></p>
      <p>We expect that, in the years to come, AI copilots that combine neural and symbolic methods will significantly ease the burden of formalization. More dramatically, we expect that the technology we have discussed here will play a significant role in the discovery of new mathematics. Note that DeepMind’s AlphaProof, which was deemed to have performed at the level of a silver medalist at the most recent International Mathematical Olympiad,⁠<a id="fnlink-ltxid35-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid35"><span>Footnote</span><sup>14</sup></a> was trained to find formal proofs in Lean. It is exciting to think about what a synergetic combination of machine learning, symbolic methods, and user interaction will bring to mathematics in the years ahead.</p>
      <p>You can find online documentation and tutorials for all the proof assistants we have just mentioned. Lean’s lively social media channel on the Zulip platform is welcoming to newcomers, and the Lean community web pages contain links⁠<a id="fnlink-ltxid36-0" role="doc-noteref" data-ams-ref="fn" href="#ltxid36"><span>Footnote</span><sup>15</sup></a> to learning resources, like the Natural Number Game, to help you get started. Proof assistants are not easy to use, and learning to formalize mathematics requires significant time and effort. Interaction with proof assistants like Lean comes naturally, however, to those who have grown up immersed in computational technology. We have therefore found that one of the best ways to take advantage of proof assistants is to have our students help us out. Formal mathematics is a language, and only they can claim to be among the first generation of native speakers, while the rest of us struggle to master the grammar and intonation.</p>
      <p>With all the changes looming, we ought to be concerned about the ways that proof assistants and AI will change the mathematics that we know and love. It is therefore all the more important for those of us who are more settled in our careers to play an active role in the adoption of the new technologies, using our mathematical values and expertise to guide our students as they negotiate the changing landscape. The new developments offer us a wonderful opportunity to lead from behind, and it falls on all of us to support the next generation of mathematicians as they forge a path into the digital future.</p>
    </section>
    <section role="doc-acknowledgments" id="ltxid37" data-ams-doc="section" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Acknowledgment</span></h2>
      <p>We are grateful to the Hausdorff Research Institute for Mathematics for hosting three of us for the trimester program, “Prospects of Formal Mathematics,” in the summer of 2024, during which most of this article was written. We are also grateful to Paul Buckingham and three anonymous referees for helpful comments, corrections, and suggestions.</p>
    </section>
  
  
    <section role="doc-bibliography" data-ams-content-type="biblist" id="ltxid39" data-ams-doc-level="1"><h2><span data-ams-doc="title">References</span></h2><dl><dt id="bibr-MR4726989"><ams-x>[</ams-x>Avi24<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> Jeremy Avigad, <i>Mathematics and the formal turn</i>, Bull. Amer. Math. Soc. (N.S.) <strong>61</strong> (2024), no.&nbsp;2, 225–240, DOI <a href="https://doi.org/10.1090/bull/1832">10.1090/bull/1832</a>. MR<a href="https://mathscinet.ams.org/mathscinet-getitem?mr=4726989">4726989</a>, </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{MR4726989}{article}{
  author={Avigad, Jeremy},
  title={Mathematics and the formal turn},
  journal={Bull. Amer. Math. Soc. (N.S.)},
  volume={61},
  date={2024},
  number={2},
  pages={225--240},
  issn={0273-0979},
  review={\MR {4726989}},
  doi={10.1090/bull/1832},
}
</code></details></div></dd><dt id="bibr-MR4449705"><ams-x>[</ams-x>BHMN22<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> Joshua Brakensiek, Marijn Heule, John Mackey, and David Narváez, <i>The resolution of Keller’s conjecture</i>, J. Automat. Reason. <strong>66</strong> (2022), no.&nbsp;3, 277–300, DOI <a href="https://doi.org/10.1007/s10817-022-09623-5">10.1007/s10817-022-09623-5</a>. MR<a href="https://mathscinet.ams.org/mathscinet-getitem?mr=4449705">4449705</a>, </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{MR4449705}{article}{
  author={Brakensiek, Joshua},
  author={Heule, Marijn},
  author={Mackey, John},
  author={Narv\'{a}ez, David},
  title={The resolution of Keller's conjecture},
  journal={J. Automat. Reason.},
  volume={66},
  date={2022},
  number={3},
  pages={277--300},
  issn={0168-7433},
  review={\MR {4449705}},
  doi={10.1007/s10817-022-09623-5},
}
</code></details></div></dd><dt id="bibr-MR4680264"><ams-x>[</ams-x>Buz23<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> Kevin Buzzard, <i>What is the point of computers? A question for pure mathematicians</i>, ICM—International Congress of Mathematicians. Vol. 2. Plenary lectures, EMS Press, Berlin, 2023, pp.&nbsp;578–608. MR<a href="https://mathscinet.ams.org/mathscinet-getitem?mr=4680264">4680264</a>, </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{MR4680264}{article}{
  author={Buzzard, Kevin},
  title={What is the point of computers? A question for pure mathematicians},
  conference={ title={ICM---International Congress of Mathematicians. Vol. 2. Plenary lectures}, },
  book={ publisher={EMS Press, Berlin}, },
  date={2023},
  pages={578--608},
  review={\MR {4680264}},
}
</code></details></div></dd><dt id="bibr-MR2463990"><ams-x>[</ams-x>Hal08<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> Thomas C. Hales, <i>Formal proof</i>, Notices Amer. Math. Soc. <strong>55</strong> (2008), no.&nbsp;11, 1370–1380. MR<a href="https://mathscinet.ams.org/mathscinet-getitem?mr=2463990">2463990</a>, </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{MR2463990}{article}{
  author={Hales, Thomas C.},
  title={Formal proof},
  journal={Notices Amer. Math. Soc.},
  volume={55},
  date={2008},
  number={11},
  pages={1370--1380},
  issn={0002-9920},
  review={\MR {2463990}},
}
</code></details></div></dd><dt id="bibr-MR2463992"><ams-x>[</ams-x>Har08<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> John Harrison, <i>Formal proof—theory and practice</i>, Notices Amer. Math. Soc. <strong>55</strong> (2008), no.&nbsp;11, 1395–1406. MR<a href="https://mathscinet.ams.org/mathscinet-getitem?mr=2463992">2463992</a>, </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{MR2463992}{article}{
  author={Harrison, John},
  title={Formal proof---theory and practice},
  journal={Notices Amer. Math. Soc.},
  volume={55},
  date={2008},
  number={11},
  pages={1395--1406},
  issn={0002-9920},
  review={\MR {2463992}},
}
</code></details></div></dd><dt id="bibr-massot2021formalize"><ams-x>[</ams-x>Mas21<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> Patrick Massot, <i>Why formalize mathematics</i> (2021)., </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{massot2021formalize}{article}{
  author={Massot, Patrick},
  title={Why formalize mathematics},
  date={2021},
  url={https://www.imo.universite-paris-saclay.fr/~patrick.massot/files/exposition/why_formalize.pdf},
}
</code></details></div></dd><dt id="bibr-MR2463993"><ams-x>[</ams-x>Wie08<ams-x>]</ams-x></dt><dd><div data-ams-doc="biblioentry"><p> Freek Wiedijk, <i>Formal proof—getting started</i>, Notices Amer. Math. Soc. <strong>55</strong> (2008), no.&nbsp;11, 1408–1417. MR<a href="https://mathscinet.ams.org/mathscinet-getitem?mr=2463993">2463993</a>, </p><details>
  <summary><span>Show raw</span>AMSref</summary>
<code data-ams-doc="amsref">\bib{MR2463993}{article}{
  author={Wiedijk, Freek},
  title={Formal proof---getting started},
  journal={Notices Amer. Math. Soc.},
  volume={55},
  date={2008},
  number={11},
  pages={1408--1417},
  issn={0002-9920},
  review={\MR {2463993}},
}
</code></details></div></dd></dl></section>
    
    
    
    
    <section><figure data-ams-specific-use="figure" id="ltxid47" data-ams-doc="fig"><figcaption>
        <p>Jeremy Avigad is a professor at Carnegie Mellon University. His email address is <a href="mailto://avigad@cmu.edu">avigad@cmu.edu</a>.</p>
      </figcaption>
      
      <img alt="Graphic without alt text" data-ams-height="108pt" data-ams-width="85pt" data-ams-style="null" src="https://www.ams.org/journals/notices/202502/noti3114/Images/imgf873d18aa7b0063a16af75586ec37eca.png" data-ams-doc="graphic">
    </figure><figure data-ams-specific-use="figure" id="ltxid48" data-ams-doc="fig"><figcaption>
        <p>Johan Commelin is an assistant professor at Utrecht University, the Netherlands. His email address is <a href="mailto://j.m.commelin@uu.nl">j.m.commelin@uu.nl</a>.</p>
      </figcaption>
      
      <img alt="Graphic without alt text" data-ams-height="108pt" data-ams-width="85pt" data-ams-style="null" src="https://www.ams.org/journals/notices/202502/noti3114/Images/imgf0a4fb35051cd29a7e0a811fcfa1d42a.png" data-ams-doc="graphic">
    </figure><figure data-ams-specific-use="figure" id="ltxid49" data-ams-doc="fig"><figcaption>
        <p>Heather Macbeth is an assistant professor at Fordham University. Her email address is <a href="mailto://hmacbeth1@fordham.edu">hmacbeth1@fordham.edu</a>.</p>
      </figcaption>
      
      <img alt="Graphic without alt text" data-ams-height="108pt" data-ams-width="85pt" data-ams-style="null" src="https://www.ams.org/journals/notices/202502/noti3114/Images/img662c318e58219270499b267327fabbfc.png" data-ams-doc="graphic">
    </figure><figure data-ams-specific-use="figure" id="ltxid50" data-ams-doc="fig"><figcaption>
        <p>Adam Topaz is an associate professor at the University of Alberta, Canada. His email address is <a href="mailto://topaz@ualberta.ca">topaz@ualberta.ca</a>.</p>
      </figcaption>
      
      <img alt="Graphic without alt text" data-ams-height="108pt" data-ams-width="85pt" data-ams-style="null" src="https://www.ams.org/journals/notices/202502/noti3114/Images/imge764d209e8c09fac705b58ff5c2ff7ce.png" data-ams-doc="graphic">
    </figure><p>Article DOI: <a href="https://doi.org/10.1090/noti3114">10.1090/noti3114</a></p></section><section id="ltxid51" data-ams-doc="refhead" data-ams-doc-level="1">
      <h2><span data-ams-doc="title">Credits</span></h2>
      <p>Photo of Jeremy Avigad is courtesy of Carnegie Mellon University.</p>
      <p>Photo of Johan Commelin is courtesy of Johan Commelin.</p>
      <p>Photo of Heather Macbeth is courtesy of Peter Insley.</p>
      <p>Photo of Adam Topaz is courtesy of Adam Topaz.</p>
    </section>
  
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Subpixel Snake [video] (246 pts)]]></title>
            <link>https://www.youtube.com/watch?v=iDwganLjpW0</link>
            <guid>42815288</guid>
            <pubDate>Fri, 24 Jan 2025 17:21:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=iDwganLjpW0">https://www.youtube.com/watch?v=iDwganLjpW0</a>, See on <a href="https://news.ycombinator.com/item?id=42815288">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[A WebAssembly compiler that fits in a tweet (221 pts)]]></title>
            <link>https://wasmgroundup.com/blog/wasm-compiler-in-a-tweet/</link>
            <guid>42814948</guid>
            <pubDate>Fri, 24 Jan 2025 16:51:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wasmgroundup.com/blog/wasm-compiler-in-a-tweet/">https://wasmgroundup.com/blog/wasm-compiler-in-a-tweet/</a>, See on <a href="https://news.ycombinator.com/item?id=42814948">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__blog-post-container" itemprop="articleBody">
<!-- -->
<!-- -->
<!-- -->
<h2>Introduction</h2>
<p>One of the initial explorations that started this book was how small and simple a compile-to-WebAssembly language implemented in JavaScript could be. Our first “WebAssembly compiler in a tweet” was 269 bytes; since then, we’ve managed to whittle it down to a measly 192 bytes.</p>
<p>The final result is a compiler that takes an arithmetic expression — written in reverse polish notation — and compiles it down to a valid WebAssembly module. That module exports a single function which returns the result of the original arithmetic expression. Here it is:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c=(b,l)=&gt;WebAssembly.instantiate(new Int8Array(</span></p></div><div><p><span>[,97,115,109,1,,,,1,5,1,96,,1,127,3,2,1,,7,4,1,,,,10,</span></p></div><div><p><span>l=(b=b.split` `.flatMap(t=&gt;t&gt;-1?[65,t]:107+'-*/'.indexOf(t)))</span></p></div><div><p><span>.length+4,1,l-2,,...b,11]))</span></p></div><br></code></p></div>
<p>And here’s an example of how you can use it:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c('11 11 1 - + 4 * 2 /')).instance.exports['']()</span></p></div><br></code></p></div>
<p>But this is not just a clever trick — if you take the time to understand what this code does, you’ll learn a surprising amount about WebAssembly! In the rest of the post, we’ll explain how it all works by de-obfuscating the code one step at a time.</p>
<p>You can play with the code in this post here: <a href="https://stackblitz.com/edit/rpn-to-wasm-js-compiler?file=index.js" target="_blank" rel="noopener noreferrer">stackblitz.com/edit/rpn-to-wasm-js-compiler</a>.</p>
<h2>Format</h2>
<p>The first thing we can do to make it more readable is to format it:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c1 = (b, l) =&gt;</span></p></div><div><p><span>  WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      , 97, 115, 109, 1, , , , 1, 5, 1, 96, , 1, 127, 3, 2, 1, , 7, 4, 1, , , , 10,</span></p></div><div><p><span>      (l = (b = b.split` `.flatMap(</span></p></div><div><p><span>            (t) =&gt; t &gt; -1 ? [65, t] : 107 + "-*/".indexOf(t)</span></p></div><div><p><span>           )).length + 4),</span></p></div><div><p><span>      1, l - 2, , ...b, 11</span></p></div><div><p><span>    ])</span></p></div><div><p><span>  );</span></p></div><br></code></p></div>
<p>While it’s still pretty unreadable, now we can at least identify different parts of the code.</p>
<p>At a high level, what we’re doing is ‘parsing’ the expression in a very simple way, turning it into the appropriate Wasm bytecode,
and then hand-crafting the bytes for a single-function module.</p>
<p>In a more complex compiler you would probably use a library to generate the WebAssembly module and compile the expressions but our main metric
here is code size so we write the bytes directly in an array.</p>
<h2>Remove Assignment Expression</h2>
<p>The first trick to undo is the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment" target="_blank" rel="noopener noreferrer">assignment expression</a>.</p>
<p>In JavaScript the assignment operator is an expression. This means that it generates a result after evaluating, as you can see in the following examples:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let a, b;</span></p></div><div><p><span>console.log('a', a = 42);</span></p></div><div><p><span>a = b = 43;</span></p></div><div><p><span>console.log('b', b);</span></p></div><br></code></p></div>
<p>The code above will output:</p>

<p>This is because <code>a = 42</code> assigns <code>42</code> to <code>a</code> and the whole assignment expression evaluates to the value being assigned.</p>
<p>In <code>a = b = 43</code>, we assign the result of evaluating <code>b = 43</code> to <code>a</code>. This equivalent expression may be easier to understand: <code>a = (b = 43)</code>.</p>
<p>In our code, we use this trick to reuse variables and update their value in places where
we can also use the value being assigned. It also allows us to have our compiler in a single expression, avoiding the need for curly braces, semicolons and return statements.</p>
<p>To undo it, we turn the body of our function into a block and do each assignment on its own line:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c2 = (b, l) =&gt; {</span></p></div><div><p><span>  b = b.split` `.flatMap(</span></p></div><div><p><span>    (t) =&gt; (t &gt; -1 ? [65, t] : 107 + "-*/".indexOf(t))</span></p></div><div><p><span>  );</span></p></div><div><p><span>  l = b.length + 4;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      , 97, 115, 109, 1, , , , 1, 5, 1, 96, , 1, 127, 3, 2, 1, , 7, 4, 1, , , ,</span></p></div><div><p><span>      10, l, 1, l - 2, , ...b, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<h2>Undo Variable Tricks</h2>
<p>Now the assignments are easier to identify but the meaning of variables and function
arguments are still hard to understand. Let’s fix that by undoing a couple of variable tricks.</p>
<p>The first step is to stop using single letter variables, and to use more descriptive names instead. The next step is to stop reusing variables: for example, <code>b</code> initially holds the code to compile, but once we don’t need that any more we reuse it to hold the bytecode instructions.</p>
<p>To undo this we are going to introduce a new <code>instrs</code> variable and rename <code>b</code> to <code>code</code>. We’ll also rename <code>l</code> to <code>len</code>. This variable contains a value that is close to the number of bytecodes.</p>
<p>By declaring <code>l</code> in the body we can remove it from the function argument’s list. We did this
as a trick to avoid the need to declare it with <code>let</code> or <code>const</code>, saving some bytes and the need for a function body.</p>
<p>The trick works by adding unused arguments at the end of the function argument list and using them as local variables. Our compiler function expects a single argument with the code; <code>l</code> is there for us to use since we don’t expect the caller to provide any value for it.</p>
<p>Here’s the code without this trick:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c3 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split` `.flatMap(</span></p></div><div><p><span>    (t) =&gt; (t &gt; -1 ? [65, t] : 107 + "-*/".indexOf(t))</span></p></div><div><p><span>  );</span></p></div><div><p><span>  const len = instrs.length + 4;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      , 97, 115, 109, 1, , , , 1, 5, 1, 96, , 1, 127, 3, 2, 1, , 7, 4, 1, , , ,</span></p></div><div><p><span>      10, len, 1, len - 2, , ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<h2>Add Missing Zeros</h2>
<p>If you look at the array in our code, you may notice that there are many commas followed by another comma instead of a value. This syntax defines “sparse arrays”. Here’s an example:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>const a1 = [,,];</span></p></div><div><p><span>console.log(a1.length); // Output: 2</span></p></div><div><p><span>console.log(a1); // Output: [ &lt;2 empty items&gt; ]</span></p></div><br></code></p></div>
<p>Which is equivalent to:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>const a2 = new Array(2);</span></p></div><div><p><span>console.log(a2.length); // Output: 2</span></p></div><div><p><span>console.log(a2); // Output: [ &lt;2 empty items&gt; ]</span></p></div><br></code></p></div>
<p>We use this syntactic trick to save one byte each time we need a <code>0</code> to appear in the array. This works because <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays" target="_blank" rel="noopener noreferrer">Typed Arrays</a> coerce all array items to numbers, and an “empty item” will be converted to 0:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>new Int8Array([0, null, undefined,,0])</span></p></div><br></code></p></div>
<p>which produces:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>Int8Array(5) [ 0, 0, 0, 0, 0 ]</span></p></div><br></code></p></div>
<p>Let’s undo this trick by adding all the zeroes back:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c4 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split` `.flatMap(</span></p></div><div><p><span>    (t) =&gt; (t &gt; -1 ? [65, t] : 107 + "-*/".indexOf(t))</span></p></div><div><p><span>  );</span></p></div><div><p><span>  const len = instrs.length + 4;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, len, 1, len - 2, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<h2>Remove Extra 4 bytes on Length Definition</h2>
<p>In our code, we have a variable <code>len</code> that contains a number that is close to the number
of bytecodes in the compiled expression, but not exactly the same:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>  const len = instrs.length + 4;</span></p></div><br></code></p></div>
<p>In the WebAssembly module we need to use the number of bytes in the function body (the expression to evaluate) in two places:</p>
<ul>
<li>To define the code section’s length</li>
<li>To define the function body’s length</li>
</ul>
<p>Since there’s only one function in the code section both values are similar:</p>
<ul>
<li>The section takes two extra bytes (section identifier and number of code entries)</li>
<li>The function body takes another two bytes (number of locals and <code>end</code> instruction)</li>
</ul>
<p>To avoid writing <code>b.length</code> twice we assign to <code>l</code> the value of <code>b.length + 4</code> in the place where we need the code section byte count
and then calculate <code>l - 2</code> (<code>b.length + 2</code>) where we need the function body byte count.</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>[</span></p></div><div><p><span>  ...</span></p></div><div><p><span>  l=(b=b.split` `.flatMap(t=&gt;t&gt;-1?[65,t]:107+'-*/'.indexOf(t))).length+4,1,l-2</span></p></div><div><p><span>  ...</span></p></div><div><p><span>]</span></p></div><br></code></p></div>
<p>This is all a trick to avoid having to write <code>b.length</code> twice.</p>
<p>let’s assign the length to <code>len</code> and calculate the right value in each place:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c5 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split` `.flatMap(</span></p></div><div><p><span>    (t) =&gt; (t &gt; -1 ? [65, t] : 107 + "-*/".indexOf(t))</span></p></div><div><p><span>  );</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<h2>Remove String Template Literal Instead of Function Call</h2>
<p>The next trick to undo is <code>code.split` `</code>. In this case, we use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates" target="_blank" rel="noopener noreferrer">Tagged Template</a> feature of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noopener noreferrer">String Template Literals</a>.</p>
<p>Let’s see how it works by creating a simple tagged template that turns the string to uppercase:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>function upper(s) {</span></p></div><div><p><span>  return s[0].toUpperCase();</span></p></div><div><p><span>}</span></p></div><br></code></p></div>
<p>And use it:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>upper`Hello, World!`</span></p></div><div><p><span>&gt; "HELLO, WORLD!"</span></p></div><br></code></p></div>
<p>As you can see, the first argument to the tagged template function is an array. Luckily for us, the first argument of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split#separator" target="_blank" rel="noopener noreferrer">String.prototype.split</a> is handled in the following way:</p>
<blockquote>
<p>All values that are not undefined or objects with a <code>[Symbol.split]()</code> method are coerced to strings.</p>
</blockquote>
<p>And coercing an array with one string in it is the same as the string itself:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>["hello"].toString()</span></p></div><div><p><span>&gt; "hello"</span></p></div><br></code></p></div>

<p>Since the function we want to call takes a single string argument, we can use it as a tagged template and save the parentheses in the function call.</p>
<p>Let’s write it as a function call instead:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c6 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split(' ').flatMap(</span></p></div><div><p><span>    (t) =&gt; (t &gt; -1 ? [65, t] : 107 + "-*/".indexOf(t))</span></p></div><div><p><span>  );</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<h2>Remove the Ternary Operator</h2>
<p>Next, let’s undo the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator" target="_blank" rel="noopener noreferrer">Ternary Operator</a> and turn it into an <em>if</em> statement.</p>
<p>The ternary operator has expressions on each branch saving us the <code>return</code> statements. Here’s what the code looks like when we use an <em>if</em> statement instead:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c7 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split(" ").flatMap((t) =&gt; {</span></p></div><div><p><span>    if (t &gt; -1) {</span></p></div><div><p><span>      return [65, t];</span></p></div><div><p><span>    } else {</span></p></div><div><p><span>      return 107 + "-*/".indexOf(t);</span></p></div><div><p><span>    }</span></p></div><div><p><span>  });</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<h2>Remove Number Check With Coercion</h2>
<p>The next trick to undo is the one present twice in the following code:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>    if (t &gt; -1) {</span></p></div><div><p><span>      return [65, t];</span></p></div><div><p><span>    }</span></p></div><br></code></p></div>
<p>First we use coercion in <code>t &gt; -1</code> to check if the token <code>t</code> is a string representing a
positive number. Then we use coercion again in <code>[65, t]</code> to let JavaScript turn <code>t</code> into a <code>Number</code> in the <code>Int8Array</code>:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>new Int8Array([65, '42'])</span></p></div><br></code></p></div>
<p>The code above evaluates to:</p>

<p>Let’s write the parsing and checking explicitly:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c8 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split(" ").flatMap((t) =&gt; {</span></p></div><div><p><span>    const num = parseInt(t, 10);</span></p></div><div><p><span>    if (Number.isFinite(num)) {</span></p></div><div><p><span>      return [65, num];</span></p></div><div><p><span>    } else {</span></p></div><div><p><span>      return 107 + "-*/".indexOf(t);</span></p></div><div><p><span>    }</span></p></div><div><p><span>  });</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<p>The semantics of our compiler change a little bit here. The original version will only accept
positive integers as input; if you want a negative number you have to subtract from zero: <code>0 - 1</code> to get <code>-1</code>. The new version allows negative numbers since it checks with <code>Number.isFinite(num)</code> instead of <code>t &gt; -1</code>.</p>
<h2>Remove indexOf -1 Trick</h2>
<p>The next trick is in the <em>else</em> branch:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>      return 107 + "-*/".indexOf(t);</span></p></div><br></code></p></div>
<p>Our calculator compiler only accepts four arithmetic operations: <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>. But
in the code above you can only see three: <code>-*/</code> and a magical number: <code>107</code>. Here’s how it works — these are the bytecode numbers for arithmetic operations in WebAssembly:</p>
<ul>
<li><code>+</code>: <code>106</code></li>
<li><code>-</code>: <code>107</code></li>
<li><code>*</code>: <code>108</code></li>
<li><code>/</code>: <code>109</code></li>
</ul>
<p>We only enter this branch if the token <code>t</code> is not a number, which means it can only be
one of the arithmetic operators above. So, given a single character which is one of those four operators, we want to produce the appropriate opcode.</p>
<p>We <em>could</em> have written <code>106 + "+-*/".indexOf(t)</code>. That is, we find the symbol’s index in the string:</p>
<ul>
<li><code>+</code>: <code>0</code></li>
<li><code>-</code>: <code>1</code></li>
<li><code>*</code>: <code>2</code></li>
<li><code>/</code>: <code>3</code></li>
</ul>
<p>…and add <code>106</code> to it to get the bytecode number. But when <code>t</code> is not in the string, <code>"+-*/"</code> <code>indexOf</code> returns <code>-1</code>. We can use that to our advantage, and treat <code>-1</code> to mean “plus or any other token”:</p>
<ul>
<li><code>+</code>: <code>-1</code> (any other token will be <code>-1</code> too)</li>
<li><code>-</code>: <code>0</code></li>
<li><code>*</code>: <code>1</code></li>
<li><code>/</code>: <code>2</code></li>
</ul>
<p>And that’s why we add <code>107</code> instead of <code>106</code>. Let’s undo the <code>-1</code> trick:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>let c9 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split(" ").flatMap((t) =&gt; {</span></p></div><div><p><span>    const num = parseInt(t, 10);</span></p></div><div><p><span>    if (Number.isFinite(num)) {</span></p></div><div><p><span>      return [65, num];</span></p></div><div><p><span>    } else {</span></p></div><div><p><span>      return 106 + "+-*/".indexOf(t);</span></p></div><div><p><span>    }</span></p></div><div><p><span>  });</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<p>Here again the semantics change a little bit. Before, if the token <code>t</code> wasn’t found, the expression would evaluate to <code>107 + -1</code> which would map to an addition. Now it will evaluate to <code>106 + -1</code> which will map to bytecode <code>105</code> which is the <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Numeric/Population_count" target="_blank" rel="noopener noreferrer"><code>popcnt</code></a> instruction.</p>
<p>But don’t worry, we’ll fix it in the next step.</p>
<h2>Remove indexOf Trick</h2>
<p>After explaining how the <code>indexOf</code> trick works and removing the <code>-1</code> part, let’s
go ahead and remove the trick completely. To do it we are going to create an object that maps from an arithmetic operation token to its bytecode:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>const OP_TO_BYTECODE = {</span></p></div><div><p><span>  "+": 106,</span></p></div><div><p><span>  "-": 107,</span></p></div><div><p><span>  "*": 108,</span></p></div><div><p><span>  "/": 109,</span></p></div><div><p><span>};</span></p></div><div><p><span>let c10 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split(" ").flatMap((t) =&gt; {</span></p></div><div><p><span>    const num = parseInt(t, 10);</span></p></div><div><p><span>    if (Number.isFinite(num)) {</span></p></div><div><p><span>      return [65, num];</span></p></div><div><p><span>    } else {</span></p></div><div><p><span>      return OP_TO_BYTECODE[t] ?? 106;</span></p></div><div><p><span>    }</span></p></div><div><p><span>  });</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 4, 1, 0, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<p>To keep the initial semantics, if the token is not a valid operation we return the bytecode for <code>+</code>: in <code>OP_TO_BYTECODE[t] ?? 106</code>.</p>
<h2>Remove the Empty Export Name</h2>
<p>From the usage example at the beginning of the post, you may have noticed that the exported
function’s name is the empty string:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c('11 11 1 - + 4 * 2 /')).instance.exports['']()</span></p></div><br></code></p></div>
<p>We did this to save us the bytes needed to specify the export name,
but also to save an extra byte/character in the code because with the length of the export name being <code>0</code>
we can use the sparse array syntax to leave an empty spot in the WebAssembly module array.</p>
<p>To revert this trick we are going to name the exported function as <code>a</code>, which in UTF-8 is the byte <code>97</code>:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>&gt; new TextEncoder().encode('a')[0]</span></p></div><div><p><span>97</span></p></div><br></code></p></div>
<div data-ch-theme="nord"><p><code><br><div><p><span>const OP_TO_BYTECODE = {</span></p></div><div><p><span>  "+": 106,</span></p></div><div><p><span>  "-": 107,</span></p></div><div><p><span>  "*": 108,</span></p></div><div><p><span>  "/": 109,</span></p></div><div><p><span>};</span></p></div><div><p><span>let c11 = (code) =&gt; {</span></p></div><div><p><span>  const instrs = code.split(" ").flatMap((t) =&gt; {</span></p></div><div><p><span>    const num = parseInt(t, 10);</span></p></div><div><p><span>    if (Number.isFinite(num)) {</span></p></div><div><p><span>      return [65, num];</span></p></div><div><p><span>    } else {</span></p></div><div><p><span>      return OP_TO_BYTECODE[t] ?? 106;</span></p></div><div><p><span>    }</span></p></div><div><p><span>  });</span></p></div><div><p><span>  const len = instrs.length;</span></p></div><div><p><span>  return WebAssembly.instantiate(</span></p></div><div><p><span>    new Int8Array([</span></p></div><div><p><span>      0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 7, 5, 1, 1, 97, 0, 0,</span></p></div><div><p><span>      10, 4 + len, 1, 2 + len, 0, ...instrs, 11</span></p></div><div><p><span>    ]),</span></p></div><div><p><span>  );</span></p></div><div><p><span>};</span></p></div><br></code></p></div>
<p>We can now call it with a nicer name:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c11('11 11 1 - + 4 * 2 /')).instance.exports.a()</span></p></div><br></code></p></div>
<h2>Implicit Design Decisions</h2>
<p>Our initial implementation only supported positive numbers, but that’s not the only number restriction in our compiler.</p>
<p>To keep WebAssembly modules as small as possible, numbers are encoded using a variable-length encoding algorithm called <a href="https://en.wikipedia.org/wiki/LEB128" target="_blank" rel="noopener noreferrer">LEB128</a>. You can tell we are not implementing the whole algorithm by looking at the part of the code that encodes numbers: <code>[65,t]</code>. We’re assuming the number being encoded fits in 7 bits, the shortest possible LEB128 representation.</p>
<p>Let’s try the limits of our implementation:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c('63')).instance.exports['']();</span></p></div><div><p><span>&gt; 63</span></p></div><br></code></p></div>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c('64')).instance.exports['']();</span></p></div><div><p><span>&gt; -64</span></p></div><br></code></p></div>
<p>This means the only numbers that will be parsed correctly are from <code>0</code> to <code>63</code>.</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c('127')).instance.exports['']();</span></p></div><div><p><span>&gt; -1</span></p></div><br></code></p></div>
<div data-ch-theme="nord"><p><code><br><div><p><span>(await c('128')).instance.exports['']();</span></p></div><br></code></p></div>
<p>Fails with:</p>
<blockquote>
<p>Uncaught CompileError: WebAssembly.instantiate(): Compiling function #0 failed: function body must end with “end” opcode @+33</p>
</blockquote>
<p>In the last one we went over the 7 bits and the module was rejected during validation.</p>
<p>Explaining and implementing LEB128 takes a lot of text and code. If you want to read more
about it we have a whole deep dive on LEB128 in <a href="https://wasmgroundup.com/" target="_blank" rel="noopener noreferrer">our book</a>.</p>
<h2>A Trick that Almost Worked</h2>
<p>During the code golfing phase I had a literal shower thought but sadly it didn’t work.</p>
<p>The idea was to simplify <code>106 + "+-*/".indexOf(t)</code> by using the UTF-8 character code plus an offset like this: <code>63 + t.charCodeAt()</code> and saving 3 bytes in the process. The reason it didn’t work is that the characters <code>+-*/</code> don’t appear in the same order in UTF-8 and WebAssembly bytecode.</p>
<h2>Explaining the Numbers in the Array</h2>
<p>The last part to expand/explain is the array of numbers used to build the WebAssembly module.</p>
<p>It takes a big part of a <a href="https://www.w3.org/TR/2019/REC-wasm-core-1-20191205/" target="_blank" rel="noopener noreferrer">specification</a> to explain every byte in the array, but here’s a commented version that should give you a high level idea of what each part does:</p>
<div data-ch-theme="nord"><p><code><br><div><p><span>    [</span></p></div><div><p><span>      // Wasm module magic number '\0asm'</span></p></div><div><p><span>      [0, 97, 115, 109],</span></p></div><div><p><span>      // Wasm version 1.0</span></p></div><div><p><span>      [1, 0, 0, 0],</span></p></div><div><p><span>      // ----- type section -----</span></p></div><div><p><span>      1, // Section identifier</span></p></div><div><p><span>      5, // Section size in bytes</span></p></div><div><p><span>      1, // Number of entries that follow</span></p></div><div><p><span>      // type section - entry 0</span></p></div><div><p><span>      96, // Type `function`</span></p></div><div><p><span>      0,  // Number of parameters</span></p></div><div><p><span>      1,  // Number of return values</span></p></div><div><p><span>      127, // return type i32</span></p></div><div><p><span>      // ----- function section -----</span></p></div><div><p><span>      3, // Section identifier</span></p></div><div><p><span>      2, // Section size in bytes</span></p></div><div><p><span>      1, // Number of entries that follow</span></p></div><div><p><span>      // function section - entry 0</span></p></div><div><p><span>      0, // Index of the type section entry</span></p></div><div><p><span>      // ----- export section -----</span></p></div><div><p><span>      7, // Section identifier</span></p></div><div><p><span>      5, // Section size in bytes</span></p></div><div><p><span>      1, // Number of entries that follow</span></p></div><div><p><span>      // export section - entry 0</span></p></div><div><p><span>      1,  // Name size in bytes</span></p></div><div><p><span>      97, // String as utf-8 bytes for 'a'</span></p></div><div><p><span>      0,  // Export type `function`</span></p></div><div><p><span>      0,  // Function Index</span></p></div><div><p><span>      // ----- code section -----</span></p></div><div><p><span>      10, // Section identifier</span></p></div><div><p><span>      4 + len, // Section size in bytes</span></p></div><div><p><span>      1, // Number of entries that follow</span></p></div><div><p><span>      // code section - entry 0</span></p></div><div><p><span>      2 + len, // Entry size in bytes</span></p></div><div><p><span>      0, // Number of local variables</span></p></div><div><p><span>      ...instrs,</span></p></div><div><p><span>      11, // `end` instruction</span></p></div><div><p><span>    ]</span></p></div><br></code></p></div>
<h2>Conclusion</h2>
<p>There you go! We’ve turned a rather opaque 192-byte snippet into something that’s almost readable. And in the process, you hopefully learned a little bit about WebAssembly.</p>
<p>If we dropped the size restrictions, there are lots of things we might want to improve in this compiler: handle numbers greater than 127, add nicer syntax, add support for conditionals, loops, etc. If you’re interested in what that might look like, I encourage you to check out our book <a href="https://wasmgroundup.com/" target="_blank" rel="noopener noreferrer">WebAssembly from the Ground Up</a>. You’ll learn the ins and outs of WebAssembly by writing a real compiler for a simple programming language. It’s a lot of fun!</p>
<p>Special thanks to <a href="https://bsky.app/profile/orthoplex.bsky.social" target="_blank" rel="noopener noreferrer">lexi</a> for contributing some of the tricks used above.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Snowdrop OS – a homebrew operating system from scratch, in assembly language (261 pts)]]></title>
            <link>http://sebastianmihai.com/snowdrop/</link>
            <guid>42814820</guid>
            <pubDate>Fri, 24 Jan 2025 16:40:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://sebastianmihai.com/snowdrop/">http://sebastianmihai.com/snowdrop/</a>, See on <a href="https://news.ycombinator.com/item?id=42814820">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="snowdrop-contentpanel">

<h2>Introduction section</h2>
<p>

Welcome to the pages of Snowdrop OS, my homebrew operating system project.
</p><p><img alt="" src="http://sebastianmihai.com/snowdrop/images/snowdrop-intro.jpg"></p>

<p>Snowdrop OS was born of my childhood curiosity around what happens when a PC is turned on, the mysteries of bootable disks, and the hidden aspects of operating systems. It is a 16-bit real mode operating system for the IBM PC architecture. I designed and developed this homebrew OS from scratch, using only x86 assembly language. 
</p><p>
I have created and included a number of utilities, including a file manager, text editor, graphical applications, BASIC interpreter, x86 assembler and debugger. I also ported one of my DOS games to it. After all, what kind of an operating system doesn't have games?
</p><p>
The Snowdrop OS and the apps are distributed as both a floppy disk (1.44Mb) image, as well as a CD-ROM image. The images contain the following, all programmed from scratch:
</p><ul><li>a boot loader which loads the kernel into memory</li><li>a kernel which sets up interrupt vectors to be used by user apps, and then loads the startup app</li><li>user apps, including a shell (command line interface), utilities, test apps, and aSMtris, my Tetris clone</li></ul><p>
Snowdrop OS can also be installed to a hard disk - prompting the user to do so during boot - if it detects one. 
</p><p>
I hope that Snowdrop can serve other programmers who are looking to get a basic understanding of operating system functions. Like my other projects, the source code is fully available, without any restrictions on its usage and modification.
</p><h2>Source code browser</h2>
<p>
Some interesting areas in the <a href="http://sebastianmihai.com/snowdrop/src">source code</a> are: </p><ul>
<li><a href="http://sebastianmihai.com/snowdrop/src/loader/mbr.asm">Boot loader</a> is crammed into 512 bytes; it locates and loads the kernel</li>
<li>Snowdrop OS's <a href="http://sebastianmihai.com/snowdrop/src/kernel/">kernel</a> provides fundamental services and abstractions to applications</li>
<li><a href="http://sebastianmihai.com/snowdrop/src/apps/common/vga640/">Graphics and GUI framework</a> are the foundations needed to create graphical, mouse-driven applications</li>
<li>Snowdrop's <a href="http://sebastianmihai.com/snowdrop/src/apps/common/assembler/">x86 assembler</a> can be used to create low-level applications directly inside Snowdrop OS</li>
<li><a href="http://sebastianmihai.com/snowdrop/src/apps/common/basic/">BASIC interpreter</a> is great for creating high-level applications quickly</li>
<li>The <a href="http://sebastianmihai.com/snowdrop/src/apps/common/debugger/">x86 debugger</a> can be used in conjunction with the assembler</li>
<li><a href="http://sebastianmihai.com/snowdrop/src/apps/common/dynamic/">Dynamic data structure libraries</a> for working with linked lists, trees, BSTs, etc.</li>
<li><a href="http://sebastianmihai.com/snowdrop/src/apps/">All applications</a> games, text editor, file manager, tools, test applications</li>
</ul>
<h2>Versions</h2>

<p>v1 - initial version, single tasking, shell, aSMtris
<br>v2 - PS/2 mouse driver and mouse test apps
<br>v3 - basic multi-tasking support and virtual display support
<br>v4 - FAT12 driver write/delete, file manager, text editor
<br>v5 - serial port driver, formatting utilities, file copy support
<br>v6 - multiplayer snake game (over serial port)
<br>v7 - slide show presentation app
<br>v8 - "keep memory" task lifetime mode, for custom services
<br>v9 - parallel port driver, BMP image support, sprites
<br>v10 - system timer frequency change
<br>v11 - animated sprites, sound driver (internal speaker)
<br>v12 - keyboard driver
<br>v13 - more sprites functionality, Storks game
<br>v14 - kernel config, program arguments, file utilities
<br>v15 - 16x2 LCD controller app, text editor fixes
<br>v16 - GUI framework
<br>v17 - Snowmine (Minesweeper-like game)
<br>v18 - BASIC interpreter and linker
<br>v19 - install to hard disk
<br>v20 - BASIC and text editor improvements
<br>v21 - integration of BASIC and GUI framework
<br>v22 - x86 assembler, multi-disk support, file view utilities
<br>v23 - x86 debugger
<br>v24 - service loading
<br>v25 - dynamic memory and data structures
<br>v26 - installer improvements, pseudo-mouse driver
<br>v27 - kernel and inter-task messaging
<br>v28 - GUI higher resolution, draw application, desktop application
<br>v29 - data compression, Hangman game
<br>v30 - pseudo-mouse driver improvements
<br>v31 - runtime libraries (RTL), BASIC interpreter RTL
</p>

<p><img alt="" src="http://sebastianmihai.com/snowdrop/images/snowdrop_many_computers.jpg"></p>

				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wild – A Fast Linker for Linux (337 pts)]]></title>
            <link>https://github.com/davidlattimore/wild</link>
            <guid>42814683</guid>
            <pubDate>Fri, 24 Jan 2025 16:25:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/davidlattimore/wild">https://github.com/davidlattimore/wild</a>, See on <a href="https://news.ycombinator.com/item?id=42814683">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Wild linker</h2><a id="user-content-wild-linker" aria-label="Permalink: Wild linker" href="#wild-linker"></a></p>
<p dir="auto">Wild is a linker with the goal of being very fast for iterative development.</p>
<p dir="auto">The plan is to eventually make it incremental, however that isn't yet implemented. It is however
already pretty fast even without incremental linking.</p>
<p dir="auto">For production builds, its recommended to use a more mature linker like GNU ld or LLD.</p>
<p dir="auto">During development, if you'd like faster warm build times, then you could give Wild a try. It's at
the point now where it should be usable for development purposes provided you're developing on
x86-64 Linux. If you hit any issues, please file a bug report.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">To install a pre-built binary, you can copy and paste the command from the <a href="https://github.com/davidlattimore/wild/releases">releases
page</a>. Alternatively, you can download the tarball
and manually copy the <code>wild</code> binary somewhere on your path.</p>
<p dir="auto">To build and install, you can run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cargo install --locked --bin wild --git https://github.com/davidlattimore/wild.git wild"><pre>cargo install --locked --bin wild --git https://github.com/davidlattimore/wild.git wild</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Using as your default linker</h2><a id="user-content-using-as-your-default-linker" aria-label="Permalink: Using as your default linker" href="#using-as-your-default-linker"></a></p>
<p dir="auto">If you'd like to use Wild as your default linker for building Rust code, you can put the following
in <code>~/.cargo/config.toml</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="[target.x86_64-unknown-linux-gnu]
linker = &quot;clang&quot;
rustflags = [&quot;-C&quot;, &quot;link-arg=--ld-path=wild&quot;]"><pre>[<span>target</span>.<span>x86_64-unknown-linux-gnu</span>]
<span>linker</span> = <span><span>"</span>clang<span>"</span></span>
<span>rustflags</span> = [<span><span>"</span>-C<span>"</span></span>, <span><span>"</span>link-arg=--ld-path=wild<span>"</span></span>]</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Q&amp;A</h2><a id="user-content-qa" aria-label="Permalink: Q&amp;A" href="#qa"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Why another linker?</h3><a id="user-content-why-another-linker" aria-label="Permalink: Why another linker?" href="#why-another-linker"></a></p>
<p dir="auto">Mold is already very fast, however it doesn't do incremental linking and the author has stated that
they don't intend to. Wild doesn't do incremental linking yet, but that is the end-goal. By writing
Wild in Rust, it's hoped that the complexity of incremental linking will be achievable.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What's working?</h3><a id="user-content-whats-working" aria-label="Permalink: What's working?" href="#whats-working"></a></p>
<p dir="auto">The following platforms / architectures are currently supported:</p>
<ul dir="auto">
<li>x86-64 on Linux</li>
</ul>
<p dir="auto">The following is working with the caveat that there may be bugs:</p>
<ul dir="auto">
<li>Output to statically linked, non-relocatable binaries</li>
<li>Output to statically linked, position-independent binaries (static-PIE)</li>
<li>Output to dynamically linked binaries</li>
<li>Output to shared objects (.so files)</li>
<li>Rust proc-macros, when linked with Wild work</li>
<li>Most of the top downloaded crates on crates.io have been tested with Wild and pass their tests</li>
<li>Debug info</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">What isn't yet supported?</h3><a id="user-content-what-isnt-yet-supported" aria-label="Permalink: What isn't yet supported?" href="#what-isnt-yet-supported"></a></p>
<p dir="auto">Lots of stuff. Here are some of the larger things that aren't yet done, roughly sorted by current
priority:</p>
<ul dir="auto">
<li>Incremental linking</li>
<li>Support for architectures other than x86-64</li>
<li>Support for a wider range of linker flags</li>
<li>Linker scripts</li>
<li>Mac support</li>
<li>Windows support</li>
<li>LTO</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">How can I verify that Wild was used to link a binary?</h3><a id="user-content-how-can-i-verify-that-wild-was-used-to-link-a-binary" aria-label="Permalink: How can I verify that Wild was used to link a binary?" href="#how-can-i-verify-that-wild-was-used-to-link-a-binary"></a></p>
<p dir="auto">Install <code>readelf</code>, then run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="readelf  -p .comment my-executable"><pre>readelf  -p .comment my-executable</pre></div>
<p dir="auto">Look for a line like:</p>
<div data-snippet-clipboard-copy-content="Linker: Wild version 0.1.0"><pre><code>Linker: Wild version 0.1.0
</code></pre></div>
<p dir="auto">Or if you don't want to install readelf, you can probably get away with:</p>
<div dir="auto" data-snippet-clipboard-copy-content="strings my-executable | grep 'Linker:'"><pre>strings my-executable <span>|</span> grep <span><span>'</span>Linker:<span>'</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Where did the name come from?</h3><a id="user-content-where-did-the-name-come-from" aria-label="Permalink: Where did the name come from?" href="#where-did-the-name-come-from"></a></p>
<p dir="auto">It's somewhat of a tradition for linkers to end with the letters "ld". e.g. "GNU ld, "gold", "lld",
"mold". Since the end-goal is for the linker to be incremental, an "I" is added. Let's say the "W"
stands for "Wild", since recursive acronyms are popular in open-source projects.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Benchmarks</h2><a id="user-content-benchmarks" aria-label="Permalink: Benchmarks" href="#benchmarks"></a></p>
<p dir="auto">The goal of Wild is to eventually be very fast via incremental linking. However, we also want to be
as fast as we can be for non-incremental linking and for the initial link when incremental linking
is enabled.</p>
<p dir="auto">These benchmark were run on David Lattimore's laptop (2020 model System76 Lemur pro), which has 4
cores (8 threads) and 42 GB of RAM.</p>
<p dir="auto">The following times are for linking rustc-driver, which is a shared object that contains most of the
code of the Rust compiler. Linking was done with with <code>--strip-debug</code> and <code>--build-id=none</code>.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Linker</th>
<th>Time (ms)</th>
<th>± Standard deviation (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>GNU ld (2.38)</td>
<td>20774</td>
<td>855</td>
</tr>
<tr>
<td>gold (2.38)</td>
<td>6796</td>
<td>58</td>
</tr>
<tr>
<td>lld (18.1.8)</td>
<td>1601</td>
<td>24</td>
</tr>
<tr>
<td>mold (2.34.1)</td>
<td>946</td>
<td>17</td>
</tr>
<tr>
<td>wild (2024-11-30)</td>
<td>486</td>
<td>19</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">The following times are for linking the C compiler, clang without debug info.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Linker</th>
<th>Time (ms)</th>
<th>± Standard deviation (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>GNU ld (2.38)</td>
<td>8784</td>
<td>42</td>
</tr>
<tr>
<td>gold (2.38)</td>
<td>2528</td>
<td>37</td>
</tr>
<tr>
<td>lld (18.1.8)</td>
<td>1679</td>
<td>23</td>
</tr>
<tr>
<td>mold (2.34.1)</td>
<td>429</td>
<td>2</td>
</tr>
<tr>
<td>wild (2024-11-30)</td>
<td>244</td>
<td>6</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">Next, let's add debug info (remove <code>--strip-debug</code>). First rustc-driver:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Linker</th>
<th>Time (ms)</th>
<th>± Standard deviation (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>GNU ld (2.38)</td>
<td>23224</td>
<td>1030</td>
</tr>
<tr>
<td>gold (2.38)</td>
<td>8840</td>
<td>879</td>
</tr>
<tr>
<td>lld (18.1.8)</td>
<td>2741</td>
<td>1403</td>
</tr>
<tr>
<td>mold (2.34.1)</td>
<td>3514</td>
<td>2102</td>
</tr>
<tr>
<td>wild (2024-11-30)</td>
<td>3158</td>
<td>1616</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">Now clang with debug info:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Linker</th>
<th>Time (ms)</th>
<th>± Standard deviation (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>GNU ld (2.38)</td>
<td>139985</td>
<td>9871</td>
</tr>
<tr>
<td>gold (2.38)</td>
<td>92147</td>
<td>7287</td>
</tr>
<tr>
<td>lld (18.1.8)</td>
<td>30549</td>
<td>9819</td>
</tr>
<tr>
<td>mold (2.34.1)</td>
<td>16933</td>
<td>5359</td>
</tr>
<tr>
<td>wild (2024-11-30)</td>
<td>31540</td>
<td>7133</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">So Wild performs pretty well without debug info, but with debug info, it's performing less well at
the moment.</p>
<p dir="auto">See <a href="https://github.com/davidlattimore/wild/blob/main/BENCHMARKING.md">BENCHMARKING.md</a> for more details on benchmarking.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Linking Rust code</h2><a id="user-content-linking-rust-code" aria-label="Permalink: Linking Rust code" href="#linking-rust-code"></a></p>
<p dir="auto">The following is a <code>cargo test</code> command-line that can be used to build and test a crate using Wild.
This has been run successfully on a few popular crates (e.g. ripgrep, serde, tokio, rand, bitflags).
It assumes that the "wild" binary is on your path. It also depends on the Clang compiler being
installed, since GCC doesn't allow using an arbitrary linker.</p>
<div dir="auto" data-snippet-clipboard-copy-content="RUSTFLAGS=&quot;-Clinker=clang -Clink-args=--ld-path=wild&quot; cargo test"><pre>RUSTFLAGS=<span><span>"</span>-Clinker=clang -Clink-args=--ld-path=wild<span>"</span></span> cargo <span>test</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">For more information on contributing to <code>wild</code> see <a href="https://github.com/davidlattimore/wild/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Sponsorship</h2><a id="user-content-sponsorship" aria-label="Permalink: Sponsorship" href="#sponsorship"></a></p>
<p dir="auto">If you'd like to <a href="https://github.com/sponsors/davidlattimore">sponsor this work</a>, that would be very
much appreciated. The more sponsorship I get the longer I can continue to work on this project full
time.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Licensed under either of <a href="https://github.com/davidlattimore/wild/blob/main/LICENSE-APACHE">Apache License, Version 2.0</a> or <a href="https://github.com/davidlattimore/wild/blob/main/LICENSE-MIT">MIT license</a>
at your option.</p>
<p dir="auto">Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in
Wild by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any
additional terms or conditions.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[New Book-Sorting Algorithm Almost Reaches Perfection (221 pts)]]></title>
            <link>https://www.quantamagazine.org/new-book-sorting-algorithm-almost-reaches-perfection-20250124/</link>
            <guid>42814275</guid>
            <pubDate>Fri, 24 Jan 2025 15:50:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/new-book-sorting-algorithm-almost-reaches-perfection-20250124/">https://www.quantamagazine.org/new-book-sorting-algorithm-almost-reaches-perfection-20250124/</a>, See on <a href="https://news.ycombinator.com/item?id=42814275">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-role="selectable">
    <p>Computer scientists often deal with abstract problems that are hard to comprehend, but an exciting new algorithm matters to anyone who owns books and at least one shelf. The algorithm addresses something called the library sorting problem (more formally, the “list labeling” problem). The challenge is to devise a strategy for organizing books in some kind of sorted order — alphabetically, for instance — that minimizes how long it takes to place a new book on the shelf.</p>
<p>Imagine, for example, that you keep your books clumped together, leaving empty space on the far right of the shelf. Then, if you add a book by Isabel Allende to your collection, you might have to move every book on the shelf to make room for it. That would be a time-consuming operation. And if you then get a book by Douglas Adams, you’ll have to do it all over again. A better arrangement would leave unoccupied spaces distributed throughout the shelf — but how, exactly, should they be distributed?</p>
<p>This problem was introduced in a <a href="https://link.springer.com/chapter/10.1007/3-540-10843-2_34">1981 paper</a>, and it goes beyond simply providing librarians with organizational guidance. That’s because the problem also applies to the arrangement of files on hard drives and in databases, where the items to be arranged could number in the billions. An inefficient system means significant wait times and major computational expense. Researchers have invented some efficient methods for storing items, but they’ve long wanted to determine the best possible way.</p>
<p>Last year, in <a href="https://arxiv.org/abs/2405.00807">a study</a> that was presented at the Foundations of Computer Science conference in Chicago, a team of seven researchers described a way to organize items that comes tantalizingly close to the theoretical ideal. The new approach combines a little knowledge of the bookshelf’s past contents with the surprising power of randomness.</p>
<p>“It’s a very important problem,” said <a href="https://web.eecs.umich.edu/~pettie/">Seth Pettie</a>, a computer scientist at the University of Michigan, because many of the data structures we rely upon today store information sequentially. He called the new work “extremely inspired [and] easily one of my top three favorite papers of the year.”</p>
<h2><strong>Narrowing Bounds</strong></h2>
<p>So how does one measure a well-sorted bookshelf? A common way is to see how long it takes to insert an individual item. Naturally, that depends on how many items there are in the first place, a value typically denoted by <em>n</em>. In the Isabel Allende example, when all the books have to move to accommodate a new one, the time it takes is proportional to <em>n</em>. The bigger the <em>n</em>, the longer it takes. That makes this an “upper bound” to the problem: It will never take longer than a time proportional to <em>n</em> to add one book to the shelf.</p>

<p>The authors of the 1981 paper that ushered in this problem wanted to know if it was possible to design an algorithm with an average insertion time much less than<em> n</em>. And indeed, they proved that one could do better. They created an algorithm that was guaranteed to achieve an average insertion time proportional to (log <em>n</em>)<sup>2</sup>. This algorithm had two properties: It was “deterministic,” meaning that its decisions did not depend on any randomness, and it was also “smooth,” meaning that the books must be spread evenly within subsections of the shelf where insertions (or deletions) are made. The authors left open the question of whether the upper bound could be improved even further. For over four decades, no one managed to do so.</p>
<p>However, the intervening years did see improvements to the lower bound. While the upper bound specifies the maximum possible time needed to insert a book, the lower bound gives the fastest possible insertion time. To find a definitive solution to a problem, researchers strive to narrow the gap between the upper and lower bounds, ideally until they coincide. When that happens, the algorithm is deemed optimal — inexorably bounded from above and below, leaving no room for further refinement.</p>
<p>In 2004, a team of researchers found that the <a href="https://epubs.siam.org/doi/abs/10.1137/S0895480100315808?journalCode=sjdmec">best any algorithm could do</a> for the library sorting problem — in other words, the ultimate lower bound — was log <em>n</em>. This result pertained to the most general version of the problem, applying to any algorithm of any type. Two of the same authors had already secured a result for a more specific version of the problem in 1990, showing that for any smooth algorithm, <a href="https://link.springer.com/chapter/10.1007/3-540-52846-6_87">the lower bound is significantly higher</a>: (log <em>n</em>)<sup>2</sup>. And in 2012, another team <a href="https://dl.acm.org/doi/abs/10.1145/2213977.2214083">proved the same lower bound</a>, (log <em>n</em>)<sup>2</sup>, for any deterministic algorithm that does not use randomness at all.</p>
<p>These results showed that for any smooth or deterministic algorithm, you could not achieve an average insertion time better than (log <em>n</em>)<sup>2</sup>, which was the same as the upper bound established in the 1981 paper. In other words, to improve that upper bound, researchers would need to devise a different kind of algorithm. “If you’re going to do better, you have to be randomized and non-smooth,” said <a href="https://www.cs.stonybrook.edu/people/faculty/michaelbender">Michael Bender</a>, a computer scientist at Stony Brook University.</p>
<figure>
    <p><img width="1630" height="1221" src="https://www.quantamagazine.org/wp-content/uploads/2025/01/MichaelBender_coMichaelBender-2-edit2.jpg" alt="Michael Bender in a blue shirt wearing black glasses." decoding="async" srcset="https://www.quantamagazine.org/wp-content/uploads/2025/01/MichaelBender_coMichaelBender-2-edit2.jpg 1630w, https://www.quantamagazine.org/wp-content/uploads/2025/01/MichaelBender_coMichaelBender-2-edit2-520x390.jpg 520w, https://www.quantamagazine.org/wp-content/uploads/2025/01/MichaelBender_coMichaelBender-2-edit2-768x575.jpg 768w, https://www.quantamagazine.org/wp-content/uploads/2025/01/MichaelBender_coMichaelBender-2-edit2-1536x1151.jpg 1536w" sizes="(max-width: 1630px) 100vw, 1630px">    </p>
            <figcaption>
                            <p>Michael Bender went after the library sorting problem using an approach that didn’t necessarily make intuitive sense.</p>
            <p>Courtesy of Michael Bender</p>
        </figcaption>
    </figure>

<p>But getting rid of smoothness, which requires items to be spread apart more or less evenly, seemed like a mistake. (Remember the problems that arose from our initial example — the non-smooth configuration where all the books were clumped together on the left-hand side of the shelf.) And it also was not obvious how leaving things to random chance — essentially a coin toss — would help matters. “Intuitively, it wasn’t clear that was a direction that made sense,” Bender said.</p>
<p>Nevertheless, in 2022, Bender and five colleagues decided to try out a randomized, non-smooth algorithm anyway, just to see whether it might offer any advantages.</p>
<h2><strong>A Secret History</strong></h2>
<p>Ironically, progress came from another restriction. There are sound privacy or security reasons why you may want to use an algorithm that’s blind to the history of the bookshelf. “If I had <em>50 Shades of Grey </em>on my bookshelf and took it off,” said <a href="https://csd.cmu.edu/people/faculty/william-kuszmaul">William Kuszmaul</a> of Carnegie Mellon University, nobody would be able to tell.</p>

<p>In a 2022 paper, Bender, Kuszmaul and four co-authors created just such an algorithm — one that was “history independent,” non-smooth and randomized — which finally <a href="https://arxiv.org/abs/2203.02763">reduced the 1981 upper bound</a>, bringing the average insertion time down to (log <em>n</em>)<sup>1.5</sup>.</p>
<p>Kuszmaul remembers being surprised that a tool normally used to ensure privacy could confer other benefits. “It’s as if you used cryptography to make your algorithm faster,” he said. “Which just seems kind of strange.”</p>
<p><a href="https://www.cc.gatech.edu/people/helen-xu">Helen Xu</a> of the Georgia Institute of Technology, who was not part of this research team, was also impressed.&nbsp; She said that the idea of using history independence for reasons other than security may have implications for many other types of problems.</p>
<h2><strong>Closing the Gap</strong></h2>
<p>Bender, Kuszmaul and others made an even bigger improvement with last year’s paper. They again broke the record, lowering the upper bound to (log <em>n</em>) times (log log <em>n</em>)<sup>3</sup> — equivalent to (log <em>n</em>)<sup>1.000…1</sup>. In other words, they came exceedingly close to the theoretical limit, the ultimate lower bound of log <em>n</em>.</p>
<p>Once again, their approach was non-smooth and randomized, but this time their algorithm relied on a limited degree of history dependence. It looked at past trends to plan for future events, but only up to a point. Suppose, for instance, you’ve been getting a lot of books by authors whose last name starts with N — Nabokov, Neruda, Ng. The algorithm extrapolates from that and assumes more are probably coming, so it’ll leave a little extra space in the N section. But reserving too much space could lead to trouble if a bunch of A-name authors start pouring in. “The way we made it a good thing was by being strategically random about how much history to look at when we make our decisions,” Bender said.</p>
<p>The result built on and transformed their previous work. It “uses randomness in a completely different way than the 2022 paper,” Pettie said.</p>
        
        
<p>These papers collectively represent “a significant improvement” on the theory side, said <a href="https://computerscience.uchicago.edu/people/brian-wheatman/">Brian Wheatman</a>, a computer scientist at the University of Chicago. “And on the applied side, I think they have the potential for a big improvement as well.”</p>
<p>Xu agrees. “In the past few years, there’s been interest in using data structures based on list labeling for storing and processing dynamic graphs,” she said. These advances would almost certainly make things faster.</p>
<p>Meanwhile, there’s more for theorists to contemplate. “We know that we can almost do log <em>n</em>,” Bender said, “[but] there’s still this tiny gap” — the diminutive log log <em>n </em>term that stands in the way of a complete solution. “We don’t know if the right thing to do is to lower the upper bound or raise the lower bound.”</p>
<p>Pettie, for one, doesn’t expect the lower bound to change. “Usually in these situations, when you see a gap this close, and one of the bounds looks quite natural and the other looks unnatural, then the natural one is the right answer,” he said. It’s much more likely that any future improvements will affect the upper bound, bringing it all the way down to log <em>n.</em> “But the world’s full of weird surprises.”</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Cs16.css – CSS library based on CS 1.6 UI (674 pts)]]></title>
            <link>https://cs16.samke.me</link>
            <guid>42814110</guid>
            <pubDate>Fri, 24 Jan 2025 15:37:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cs16.samke.me">https://cs16.samke.me</a>, See on <a href="https://news.ycombinator.com/item?id=42814110">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <h2>Dialog</h2>

        <section>
          
          <dialog>
            <form method="dialog">
              
              <p>
                Lorem ipsum dolor sit amet consectetur adipisicing elit.
                Distinctio ad suscipit aut asperiores laudantium error amet
                sapiente et tempora numquam voluptates, velit sint quos
                exercitationem unde obcaecati deleniti maiores officia natus
                ipsa rem fuga commodi esse. Sunt repellendus ipsa illo a
                accusantium consequuntur nihil dicta necessitatibus porro,
                saepe, sed repudiandae!
              </p>
              <menu>
                
                
                
              </menu>
            </form>
          </dialog>
        </section>

        <div>
            <pre><code id="code-block">&lt;section&gt;
  &lt;button
    type="button"
    class="cs-btn"
    onclick="document.querySelector('.cs-dialog').showModal();"
  &gt;
    Open dialog
  &lt;/button&gt;
  &lt;dialog class="cs-dialog"&gt;
    &lt;form method="dialog"&gt;
      &lt;div class="heading"&gt;
        &lt;div class="wrapper"&gt;
          &lt;div class="icon"&gt;&lt;/div&gt;
          &lt;p class="text"&gt;Options&lt;/p&gt;
        &lt;/div&gt;
        &lt;button class="cs-btn close"&gt;&lt;/button&gt;
      &lt;/div&gt;
      &lt;div class="content"&gt;
        Lorem ipsum dolor sit amet consectetur adipisicing elit.
        Distinctio ad suscipit aut asperiores laudantium error amet
        sapiente et tempora numquam voluptates, velit sint quos
        exercitationem unde obcaecati deleniti maiores officia natus
        ipsa rem fuga commodi esse. Sunt repellendus ipsa illo a
        accusantium consequuntur nihil dicta necessitatibus porro,
        saepe, sed repudiandae!
      &lt;/div&gt;
      &lt;menu class="footer-btns"&gt;
        &lt;button class="cs-btn"&gt;OK&lt;/button&gt;
        &lt;button class="cs-btn"&gt;Cancel&lt;/button&gt;
        &lt;button class="cs-btn"&gt;Apply&lt;/button&gt;
      &lt;/menu&gt;
    &lt;/form&gt;
  &lt;/dialog&gt;
&lt;/section&gt;</code></pre>
          </div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How I Use Home Assistant in 2025 (224 pts)]]></title>
            <link>https://vpetersson.com/2025/01/22/how-i-use-home-assistant-in-2025.html</link>
            <guid>42813513</guid>
            <pubDate>Fri, 24 Jan 2025 14:51:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://vpetersson.com/2025/01/22/how-i-use-home-assistant-in-2025.html">https://vpetersson.com/2025/01/22/how-i-use-home-assistant-in-2025.html</a>, See on <a href="https://news.ycombinator.com/item?id=42813513">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
        <p>I’ve been using Home Assistant for about seven years now, starting back when I was living in a small apartment. At the time, my setup was modest: I used the <strong>IKEA Smart Hub</strong> (when it first launched) to tie together all my apartment’s lights. As I got more comfortable with automations, I also began building <a href="https://vpetersson.com/2019/11/16/home-assistant-and-esphome.html">custom hardware like temperature and humidity sensors</a>.</p>

<p>However, once I started adding more complexity (more devices, more automations), I realized that running Home Assistant on a Raspberry Pi just wasn’t viable anymore. This was before Home Assistant offered their own hardware (which I haven’t tried, so I can’t say much about it). But for me, the main issue was the database. By default, Home Assistant uses SQLite, and when you have a ton of sensor data flowing in, SQLite can start choking.</p>

<p>My solution was to move everything to a VM on my home server. I also migrated Home Assistant’s main database to MySQL, and for longer-term metrics and historical data, I set up an InfluxDB server. (I’ve documented the details of my <a href="https://vpetersson.com/2024/05/04/home-server-journey.html">home server build in another blog post</a>.)</p>

<h2 id="scaling-up-in-a-new-house">Scaling Up in a New House</h2>

<p>When I moved into a house, my Home Assistant installation grew significantly: more rooms, more lights, and more devices overall. Right now, I have over 100 devices connected to Home Assistant, including a large number of smart lights (all IKEA), plus an assortment of other smart devices. Practically every bulb in my home is now integrated into Home Assistant.</p>

<h3 id="adaptive-lighting-moving-beyond-flux">Adaptive Lighting: Moving Beyond Flux</h3>

<p>One of the crucial features for me is <strong>Adaptive Lighting</strong>. Initially, I used <a href="https://vpetersson.com/2020/05/25/homeassistant-ikea-tradfri-flux-sensors.html">Flux</a> (an older solution for synchronizing lights with the time of day), but I’ve recently migrated to the new Adaptive Lighting integration available through HACS (Home Assistant Community Store). This newer system is much more sophisticated and has better capabilities for adjusting color temperature and brightness throughout the day.</p>

<p>Managing this setup comes with two main challenges. First, neither Flux nor Adaptive Lighting can target light groups. Instead, you need to explicitly list every single light entity in your configuration. This becomes particularly tedious when you have dozens of lights that you want to manage together. It would have been much more convenient to just point the integration to a group and have it handle all the lights within that group automatically.</p>

<p>The second challenge is that even though all my bulbs are from IKEA, they don’t have all the same features. This means I need separate configurations for each category to get Adaptive Lighting working correctly. But the effort is worth it: circadian rhythms are important to me, and I really want that smooth, automatic shift in color temperature from warm yellows in the morning and evenings to cooler whites and blues during midday.</p>

<h2 id="using-cursor-to-speed-up-configuration">Using Cursor to Speed Up Configuration</h2>

<p>One big leap for me this year has been leveraging <a href="https://www.cursor.com/">Cursor</a>, an AI coding assistant, to handle the more tedious parts of Home Assistant’s YAML configurations. I’ll admit, I’ve never had the time to master every detail of Home Assistant’s DSL or its configuration files.</p>

<h3 id="writing-a-custom-parser">Writing a Custom Parser</h3>

<p>The first major task I tackled with Cursor was writing a custom script to parse all my lights, figure out exactly what kind of bulb each one is, and spit out debugging information. This is the foundation of building the correct adaptive lighting setup. Once the script categorizes the bulbs, I can then create or update the YAML configuration for each bulb type.</p>

<p>Here’s the script I use to analyze my Home Assistant lights. It connects to the Home Assistant API, categorizes all lights by their capabilities, and provides detailed debugging information about their current state and supported features:</p>

<div><pre><code><span>import</span> <span>requests</span>
<span>import</span> <span>json</span>
<span>import</span> <span>os</span>
<span>from</span> <span>datetime</span> <span>import</span> <span>datetime</span>

<span>TOKEN</span> <span>=</span> <span>os</span><span>.</span><span>getenv</span><span>(</span><span>"HA_TOKEN"</span><span>)</span>  <span># Set this to your long-lived access token (Bearer: &lt;token&gt;)
</span>
<span># Function to get entity state
</span><span>def</span> <span>get_entity_state</span><span>(</span><span>entity_id</span><span>):</span>
    <span>url</span> <span>=</span> <span>"http://localhost:8123/api/states/"</span> <span>+</span> <span>entity_id</span>
    <span>headers</span> <span>=</span> <span>{</span>
        <span>"Authorization"</span><span>:</span> <span>TOKEN</span><span>,</span>
        <span>"content-type"</span><span>:</span> <span>"application/json"</span><span>,</span>
    <span>}</span>

    <span>response</span> <span>=</span> <span>requests</span><span>.</span><span>get</span><span>(</span><span>url</span><span>,</span> <span>headers</span><span>=</span><span>headers</span><span>)</span>
    <span>if</span> <span>response</span><span>.</span><span>status_code</span> <span>==</span> <span>200</span><span>:</span>
        <span>return</span> <span>response</span><span>.</span><span>json</span><span>()</span>
    <span>else</span><span>:</span>
        <span>print</span><span>(</span><span>f</span><span>"Error getting state for </span><span>{</span><span>entity_id</span><span>}</span><span>: </span><span>{</span><span>response</span><span>.</span><span>status_code</span><span>}</span><span>"</span><span>)</span>
        <span>return</span> <span>None</span>

<span>def</span> <span>get_all_lights</span><span>():</span>
    <span>"""Get all light entities from Home Assistant."""</span>
    <span>url</span> <span>=</span> <span>"http://localhost:8123/api/states"</span>
    <span>headers</span> <span>=</span> <span>{</span>
        <span>"Authorization"</span><span>:</span> <span>TOKEN</span><span>,</span>
        <span>"content-type"</span><span>:</span> <span>"application/json"</span><span>,</span>
    <span>}</span>

    <span>response</span> <span>=</span> <span>requests</span><span>.</span><span>get</span><span>(</span><span>url</span><span>,</span> <span>headers</span><span>=</span><span>headers</span><span>)</span>
    <span>if</span> <span>response</span><span>.</span><span>status_code</span> <span>==</span> <span>200</span><span>:</span>
        <span>entities</span> <span>=</span> <span>response</span><span>.</span><span>json</span><span>()</span>
        <span>lights</span> <span>=</span> <span>[]</span>
        <span>for</span> <span>entity</span> <span>in</span> <span>entities</span><span>:</span>
            <span>entity_id</span> <span>=</span> <span>entity</span><span>[</span><span>'entity_id'</span><span>]</span>
            <span>if</span> <span>entity_id</span><span>.</span><span>startswith</span><span>(</span><span>'light.'</span><span>):</span>
                <span>lights</span><span>.</span><span>append</span><span>(</span><span>entity_id</span><span>)</span>
        <span>return</span> <span>sorted</span><span>(</span><span>lights</span><span>)</span>
    <span>else</span><span>:</span>
        <span>print</span><span>(</span><span>f</span><span>"Error getting entities: </span><span>{</span><span>response</span><span>.</span><span>status_code</span><span>}</span><span>"</span><span>)</span>
        <span>return</span> <span>[]</span>

<span>def</span> <span>get_adaptive_switch_state</span><span>(</span><span>name</span><span>):</span>
    <span>switch_id</span> <span>=</span> <span>f</span><span>"switch.adaptive_lighting_</span><span>{</span><span>name</span><span>.</span><span>lower</span><span>()</span><span>}</span><span>"</span>
    <span>state</span> <span>=</span> <span>get_entity_state</span><span>(</span><span>switch_id</span><span>)</span>
    <span>if</span> <span>state</span><span>:</span>
        <span>print</span><span>(</span><span>f</span><span>"Adaptive switch </span><span>{</span><span>switch_id</span><span>}</span><span> full state: </span><span>{</span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>state</span><span>,</span> <span>indent</span><span>=</span><span>2</span><span>)</span><span>}</span><span>"</span><span>)</span>
    <span>return</span> <span>state</span>

<span>def</span> <span>check_light_capabilities</span><span>(</span><span>light_attrs</span><span>,</span> <span>group_name</span><span>,</span> <span>light_id</span><span>,</span> <span>adaptive_config</span><span>):</span>
    <span>"""Check if light capabilities match adaptive lighting settings."""</span>
    <span>warnings</span> <span>=</span> <span>[]</span>

    <span># Check color temperature support
</span>    <span>if</span> <span>(</span><span>'color_temp_kelvin'</span> <span>in</span> <span>adaptive_config</span> <span>and</span>
        <span>'supported_color_modes'</span> <span>in</span> <span>light_attrs</span> <span>and</span>
        <span>'color_temp'</span> <span>not</span> <span>in</span> <span>light_attrs</span><span>[</span><span>'supported_color_modes'</span><span>]):</span>
        <span>warnings</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"WARNING: </span><span>{</span><span>light_id</span><span>}</span><span> in </span><span>{</span><span>group_name</span><span>}</span><span> group doesn't support color temperature, "</span>
                      <span>f</span><span>"but adaptive lighting is trying to set it. Supported modes: </span><span>{</span><span>light_attrs</span><span>[</span><span>'supported_color_modes'</span><span>]</span><span>}</span><span>"</span><span>)</span>

    <span># Check brightness support
</span>    <span>if</span> <span>(</span><span>'brightness_pct'</span> <span>in</span> <span>adaptive_config</span> <span>and</span>
        <span>'supported_color_modes'</span> <span>in</span> <span>light_attrs</span> <span>and</span>
        <span>'brightness'</span> <span>not</span> <span>in</span> <span>light_attrs</span><span>[</span><span>'supported_color_modes'</span><span>]):</span>
        <span>warnings</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"WARNING: </span><span>{</span><span>light_id</span><span>}</span><span> in </span><span>{</span><span>group_name</span><span>}</span><span> group doesn't support brightness, "</span>
                      <span>f</span><span>"but adaptive lighting is trying to set it. Supported modes: </span><span>{</span><span>light_attrs</span><span>[</span><span>'supported_color_modes'</span><span>]</span><span>}</span><span>"</span><span>)</span>

    <span>return</span> <span>warnings</span>

<span>def</span> <span>analyze_current_state</span><span>(</span><span>lights</span><span>,</span> <span>group_name</span><span>):</span>
    <span>print</span><span>(</span><span>f</span><span>"</span><span>\n</span><span>=== </span><span>{</span><span>group_name</span><span>}</span><span> Current State ==="</span><span>)</span>
    <span>print</span><span>(</span><span>f</span><span>"Analyzing at: </span><span>{</span><span>datetime</span><span>.</span><span>now</span><span>().</span><span>strftime</span><span>(</span><span>'%Y-%m-%d %H</span><span>:</span><span>%</span><span>M</span><span>:</span><span>%</span><span>S</span><span>')</span><span>}</span><span>"</span><span>)</span>

    <span># Get adaptive lighting switch state
</span>    <span>switch_state</span> <span>=</span> <span>get_adaptive_switch_state</span><span>(</span><span>group_name</span><span>)</span>
    <span>adaptive_config</span> <span>=</span> <span>{}</span>
    <span>if</span> <span>switch_state</span><span>:</span>
        <span>print</span><span>(</span><span>f</span><span>"Adaptive Lighting Switch: </span><span>{</span><span>switch_state</span><span>[</span><span>'state'</span><span>]</span><span>}</span><span>"</span><span>)</span>
        <span>print</span><span>(</span><span>f</span><span>"Last changed: </span><span>{</span><span>switch_state</span><span>.</span><span>get</span><span>(</span><span>'last_changed'</span><span>,</span> <span>'unknown'</span><span>)</span><span>}</span><span>"</span><span>)</span>
        <span>print</span><span>(</span><span>f</span><span>"Attributes: </span><span>{</span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>switch_state</span><span>.</span><span>get</span><span>(</span><span>'attributes'</span><span>,</span> <span>{}</span><span>),</span> <span>indent</span><span>=</span><span>2</span><span>)</span><span>}</span><span>"</span><span>)</span>
        <span>adaptive_config</span> <span>=</span> <span>switch_state</span><span>.</span><span>get</span><span>(</span><span>'attributes'</span><span>,</span> <span>{})</span>
    <span>else</span><span>:</span>
        <span>print</span><span>(</span><span>"Adaptive Lighting Switch: Not found"</span><span>)</span>

    <span>now</span> <span>=</span> <span>datetime</span><span>.</span><span>now</span><span>()</span>
    <span>current_time</span> <span>=</span> <span>now</span><span>.</span><span>strftime</span><span>(</span><span>"%H:%M:%S"</span><span>)</span>
    <span>print</span><span>(</span><span>f</span><span>"Current Time: </span><span>{</span><span>current_time</span><span>}</span><span>"</span><span>)</span>

    <span># Track brightness statistics
</span>    <span>brightness_stats</span> <span>=</span> <span>{</span>
        <span>'min'</span><span>:</span> <span>float</span><span>(</span><span>'inf'</span><span>),</span>
        <span>'max'</span><span>:</span> <span>float</span><span>(</span><span>'-inf'</span><span>),</span>
        <span>'total'</span><span>:</span> <span>0</span><span>,</span>
        <span>'count'</span><span>:</span> <span>0</span>
    <span>}</span>

    <span># Group lights by capabilities
</span>    <span>light_types</span> <span>=</span> <span>{}</span>
    <span>capability_warnings</span> <span>=</span> <span>[]</span>

    <span>for</span> <span>light</span> <span>in</span> <span>lights</span><span>:</span>
        <span>state</span> <span>=</span> <span>get_entity_state</span><span>(</span><span>light</span><span>)</span>
        <span>if</span> <span>not</span> <span>state</span><span>:</span>
            <span>print</span><span>(</span><span>f</span><span>"</span><span>{</span><span>light</span><span>}</span><span>: Not found or offline"</span><span>)</span>
            <span>continue</span>

        <span>attrs</span> <span>=</span> <span>state</span><span>[</span><span>'attributes'</span><span>]</span>
        <span>status</span> <span>=</span> <span>[]</span>
        <span>capabilities</span> <span>=</span> <span>[]</span>

        <span># Check capabilities against adaptive lighting settings
</span>        <span>if</span> <span>adaptive_config</span><span>:</span>
            <span>warnings</span> <span>=</span> <span>check_light_capabilities</span><span>(</span><span>attrs</span><span>,</span> <span>group_name</span><span>,</span> <span>light</span><span>,</span> <span>adaptive_config</span><span>)</span>
            <span>capability_warnings</span><span>.</span><span>extend</span><span>(</span><span>warnings</span><span>)</span>

        <span># Basic state
</span>        <span>if</span> <span>state</span><span>[</span><span>'state'</span><span>]</span> <span>==</span> <span>'on'</span><span>:</span>
            <span>if</span> <span>'brightness'</span> <span>in</span> <span>attrs</span><span>:</span>
                <span>brightness_pct</span> <span>=</span> <span>round</span><span>((</span><span>attrs</span><span>[</span><span>'brightness'</span><span>]</span> <span>/</span> <span>255</span><span>)</span> <span>*</span> <span>100</span><span>)</span>
                <span>status</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"brightness: </span><span>{</span><span>brightness_pct</span><span>}</span><span>%"</span><span>)</span>
                <span># Update brightness statistics
</span>                <span>brightness_stats</span><span>[</span><span>'min'</span><span>]</span> <span>=</span> <span>min</span><span>(</span><span>brightness_stats</span><span>[</span><span>'min'</span><span>],</span> <span>brightness_pct</span><span>)</span>
                <span>brightness_stats</span><span>[</span><span>'max'</span><span>]</span> <span>=</span> <span>max</span><span>(</span><span>brightness_stats</span><span>[</span><span>'max'</span><span>],</span> <span>brightness_pct</span><span>)</span>
                <span>brightness_stats</span><span>[</span><span>'total'</span><span>]</span> <span>+=</span> <span>brightness_pct</span>
                <span>brightness_stats</span><span>[</span><span>'count'</span><span>]</span> <span>+=</span> <span>1</span>

            <span>if</span> <span>'color_temp_kelvin'</span> <span>in</span> <span>attrs</span><span>:</span>
                <span>status</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"temp: </span><span>{</span><span>attrs</span><span>[</span><span>'color_temp_kelvin'</span><span>]</span><span>}</span><span>K"</span><span>)</span>
            <span>elif</span> <span>'color_temp'</span> <span>in</span> <span>attrs</span><span>:</span>
                <span>status</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"mired: </span><span>{</span><span>attrs</span><span>[</span><span>'color_temp'</span><span>]</span><span>}</span><span>"</span><span>)</span>

            <span>print</span><span>(</span><span>f</span><span>"</span><span>{</span><span>light</span><span>}</span><span>: ON - </span><span>{</span><span>', '</span><span>.</span><span>join</span><span>(</span><span>status</span><span>)</span><span>}</span><span>"</span><span>)</span>
        <span>else</span><span>:</span>
            <span>print</span><span>(</span><span>f</span><span>"</span><span>{</span><span>light</span><span>}</span><span>: OFF"</span><span>)</span>

        <span># Detailed capabilities
</span>        <span>if</span> <span>'supported_color_modes'</span> <span>in</span> <span>attrs</span><span>:</span>
            <span>capabilities</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"modes:</span><span>{</span><span>attrs</span><span>[</span><span>'supported_color_modes'</span><span>]</span><span>}</span><span>"</span><span>)</span>
        <span>if</span> <span>'min_color_temp_kelvin'</span> <span>in</span> <span>attrs</span> <span>and</span> <span>'max_color_temp_kelvin'</span> <span>in</span> <span>attrs</span><span>:</span>
            <span>capabilities</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"temp:</span><span>{</span><span>attrs</span><span>[</span><span>'min_color_temp_kelvin'</span><span>]</span><span>}</span><span>-</span><span>{</span><span>attrs</span><span>[</span><span>'max_color_temp_kelvin'</span><span>]</span><span>}</span><span>"</span><span>)</span>
        <span>if</span> <span>'supported_features'</span> <span>in</span> <span>attrs</span><span>:</span>
            <span>capabilities</span><span>.</span><span>append</span><span>(</span><span>f</span><span>"features:</span><span>{</span><span>attrs</span><span>[</span><span>'supported_features'</span><span>]</span><span>}</span><span>"</span><span>)</span>

        <span># Group by capabilities
</span>        <span>cap_key</span> <span>=</span> <span>','</span><span>.</span><span>join</span><span>(</span><span>sorted</span><span>(</span><span>capabilities</span><span>))</span>
        <span>if</span> <span>cap_key</span> <span>not</span> <span>in</span> <span>light_types</span><span>:</span>
            <span>light_types</span><span>[</span><span>cap_key</span><span>]</span> <span>=</span> <span>[]</span>
        <span>light_types</span><span>[</span><span>cap_key</span><span>].</span><span>append</span><span>(</span><span>light</span><span>)</span>

    <span># Print capability warnings
</span>    <span>if</span> <span>capability_warnings</span><span>:</span>
        <span>print</span><span>(</span><span>"</span><span>\n</span><span>=== Capability Warnings ==="</span><span>)</span>
        <span>for</span> <span>warning</span> <span>in</span> <span>capability_warnings</span><span>:</span>
            <span>print</span><span>(</span><span>warning</span><span>)</span>

    <span># Print brightness statistics
</span>    <span>if</span> <span>brightness_stats</span><span>[</span><span>'count'</span><span>]</span> <span>&gt;</span> <span>0</span><span>:</span>
        <span>print</span><span>(</span><span>f</span><span>"</span><span>\n</span><span>=== </span><span>{</span><span>group_name</span><span>}</span><span> Brightness Statistics ==="</span><span>)</span>
        <span>print</span><span>(</span><span>f</span><span>"Minimum brightness: </span><span>{</span><span>brightness_stats</span><span>[</span><span>'min'</span><span>]</span><span>}</span><span>%"</span><span>)</span>
        <span>print</span><span>(</span><span>f</span><span>"Maximum brightness: </span><span>{</span><span>brightness_stats</span><span>[</span><span>'max'</span><span>]</span><span>}</span><span>%"</span><span>)</span>
        <span>print</span><span>(</span><span>f</span><span>"Average brightness: </span><span>{</span><span>brightness_stats</span><span>[</span><span>'total'</span><span>]</span> <span>/</span> <span>brightness_stats</span><span>[</span><span>'count'</span><span>]</span><span>:</span><span>.</span><span>1</span><span>f</span><span>}</span><span>%"</span><span>)</span>
        <span>print</span><span>(</span><span>f</span><span>"Number of lights on: </span><span>{</span><span>brightness_stats</span><span>[</span><span>'count'</span><span>]</span><span>}</span><span>"</span><span>)</span>

    <span># Print summary of light types
</span>    <span>print</span><span>(</span><span>f</span><span>"</span><span>\n</span><span>=== </span><span>{</span><span>group_name</span><span>}</span><span> Light Types ==="</span><span>)</span>
    <span>for</span> <span>cap_key</span><span>,</span> <span>lights</span> <span>in</span> <span>light_types</span><span>.</span><span>items</span><span>():</span>
        <span>print</span><span>(</span><span>f</span><span>"</span><span>\n</span><span>Capabilities: </span><span>{</span><span>cap_key</span><span>}</span><span>"</span><span>)</span>
        <span>print</span><span>(</span><span>"Lights:"</span><span>)</span>
        <span>for</span> <span>light</span> <span>in</span> <span>lights</span><span>:</span>
            <span>print</span><span>(</span><span>f</span><span>"  - </span><span>{</span><span>light</span><span>}</span><span>"</span><span>)</span>

<span>def</span> <span>group_lights_by_capability</span><span>(</span><span>lights</span><span>):</span>
    <span>"""Group lights by their capabilities."""</span>
    <span>color_temp_lights</span> <span>=</span> <span>[]</span>
    <span>brightness_lights</span> <span>=</span> <span>[]</span>
    <span>other_lights</span> <span>=</span> <span>[]</span>

    <span>for</span> <span>light</span> <span>in</span> <span>lights</span><span>:</span>
        <span>state</span> <span>=</span> <span>get_entity_state</span><span>(</span><span>light</span><span>)</span>
        <span>if</span> <span>not</span> <span>state</span><span>:</span>
            <span>continue</span>

        <span>attrs</span> <span>=</span> <span>state</span><span>[</span><span>'attributes'</span><span>]</span>
        <span>if</span> <span>'supported_color_modes'</span> <span>in</span> <span>attrs</span><span>:</span>
            <span>if</span> <span>'color_temp'</span> <span>in</span> <span>attrs</span><span>[</span><span>'supported_color_modes'</span><span>]:</span>
                <span>color_temp_lights</span><span>.</span><span>append</span><span>(</span><span>light</span><span>)</span>
            <span>elif</span> <span>'brightness'</span> <span>in</span> <span>attrs</span><span>[</span><span>'supported_color_modes'</span><span>]:</span>
                <span>brightness_lights</span><span>.</span><span>append</span><span>(</span><span>light</span><span>)</span>
            <span>else</span><span>:</span>
                <span>other_lights</span><span>.</span><span>append</span><span>(</span><span>light</span><span>)</span>
        <span>else</span><span>:</span>
            <span>other_lights</span><span>.</span><span>append</span><span>(</span><span>light</span><span>)</span>

    <span>return</span> <span>{</span>
        <span>'Color Temperature'</span><span>:</span> <span>color_temp_lights</span><span>,</span>
        <span>'Brightness Only'</span><span>:</span> <span>brightness_lights</span><span>,</span>
        <span>'Other'</span><span>:</span> <span>other_lights</span>
    <span>}</span>

<span># Main execution
</span><span>if</span> <span>__name__</span> <span>==</span> <span>"__main__"</span><span>:</span>
    <span>all_lights</span> <span>=</span> <span>get_all_lights</span><span>()</span>
    <span>print</span><span>(</span><span>"</span><span>\n</span><span>=== All Lights Analysis ==="</span><span>)</span>
    <span>print</span><span>(</span><span>f</span><span>"Found </span><span>{</span><span>len</span><span>(</span><span>all_lights</span><span>)</span><span>}</span><span> lights in total"</span><span>)</span>

    <span># Group lights by capability
</span>    <span>grouped_lights</span> <span>=</span> <span>group_lights_by_capability</span><span>(</span><span>all_lights</span><span>)</span>

    <span># Analyze each capability group
</span>    <span>for</span> <span>group_name</span><span>,</span> <span>lights</span> <span>in</span> <span>grouped_lights</span><span>.</span><span>items</span><span>():</span>
        <span>if</span> <span>lights</span><span>:</span>  <span># Only analyze groups that have lights
</span>            <span>analyze_current_state</span><span>(</span><span>lights</span><span>,</span> <span>group_name</span><span>)</span>
</code></pre></div>

<ol>
  <li><strong>Run the custom parsing script</strong> on my Home Assistant setup to produce a detailed list of bulbs and their capabilities.</li>
  <li><strong>Feed the output</strong> into Cursor (in “agent mode” or similar), along with my old configuration.</li>
  <li><strong>Have Cursor generate</strong> the updated YAML for the new Adaptive Lighting system.</li>
</ol>

<p>It’s been a huge time-saver. Sure, I still do some manual debugging, but I also use Cursor to assist with the troubleshooting. For instance, if something breaks in Home Assistant, I feed the logs into Cursor and ask it to help me fix the error. It’s surprisingly effective.</p>

<h2 id="ikea-advice">IKEA Advice</h2>

<p>After extensive testing, I’ve optimized my adaptive lighting configurations for different IKEA bulb types. Here are my recommended settings that provide smooth transitions while maintaining good visibility throughout the day.</p>

<h3 id="dimmable-white-spectrum">Dimmable white spectrum</h3>

<p>For IKEA’s <em>LED bulb GU10 345 lumen, smart/wireless dimmable white spectrum</em> bulbs.</p>

<div><pre><code>  <span>-</span> <span>name</span><span>:</span> <span>adapt_brightness_standard_color_temp</span>
    <span>lights</span><span>:</span>
      <span>-</span> <span>light.light_1</span>
      <span>-</span> <span>light.light_2</span>
    <span>min_brightness</span><span>:</span> <span>50</span>
    <span>max_brightness</span><span>:</span> <span>100</span>
    <span>min_color_temp</span><span>:</span> <span>2202</span>
    <span>max_color_temp</span><span>:</span> <span>4000</span>
    <span>sleep_brightness</span><span>:</span> <span>1</span>
    <span>sleep_color_temp</span><span>:</span> <span>2202</span>
    <span>transition</span><span>:</span> <span>45</span>
    <span>interval</span><span>:</span> <span>90</span>
    <span>initial_transition</span><span>:</span> <span>1</span>
    <span>prefer_rgb_color</span><span>:</span> <span>false</span>
</code></pre></div>

<h3 id="dimmable-color-and-white-spectrum">Dimmable color and white spectrum</h3>

<p>For the <em>LED bulb E27 806 lumen, wireless dimmable color and white spectrum/globe opal white</em> bulbs.</p>

<div><pre><code>  <span>-</span> <span>name</span><span>:</span> <span>adapt_brightness_extended_color_temp</span>
    <span>lights</span><span>:</span>
      <span>-</span> <span>light.light_3</span>
      <span>-</span> <span>light.light_4</span>
    <span>min_brightness</span><span>:</span> <span>70</span>
    <span>max_brightness</span><span>:</span> <span>100</span>
    <span>min_color_temp</span><span>:</span> <span>2000</span>
    <span>max_color_temp</span><span>:</span> <span>6535</span>
    <span>sleep_brightness</span><span>:</span> <span>1</span>
    <span>sleep_color_temp</span><span>:</span> <span>2000</span>
    <span>transition</span><span>:</span> <span>45</span>
    <span>interval</span><span>:</span> <span>90</span>
    <span>initial_transition</span><span>:</span> <span>1</span>
    <span>prefer_rgb_color</span><span>:</span> <span>false</span>
</code></pre></div>

<h3 id="dimmable-warm-white">Dimmable warm white</h3>

<p>For the basic <em>LED bulb GU10 345 lumen, smart/wireless dimmable warm white</em> bulbs.</p>

<div><pre><code>  <span>-</span> <span>name</span><span>:</span> <span>adapt_brightness_brightness_only</span>
    <span>lights</span><span>:</span>
      <span>-</span> <span>light.light_5</span>
      <span>-</span> <span>light.light_6</span>
    <span>min_brightness</span><span>:</span> <span>50</span>
    <span>max_brightness</span><span>:</span> <span>100</span>
    <span>sleep_brightness</span><span>:</span> <span>1</span>
    <span>transition</span><span>:</span> <span>45</span>
    <span>interval</span><span>:</span> <span>90</span>
    <span>initial_transition</span><span>:</span> <span>1</span>
</code></pre></div>

<h2 id="next-steps-smart-trvs">Next Steps: Smart TRVs</h2>

<p>Now that the lighting is running smoothly, my next big smart home project is upgrading all my radiators with Zigbee-based smart TRVs (thermostatic radiator valves). The goal is to have each room in my home maintain an optimal temperature by reading from the central Nest thermostat. In older British homes like mine, temperature control isn’t very granular, so having each radiator adjust itself is a major comfort and efficiency boost.</p>

<p>I’ve already purchased <a href="https://s.click.aliexpress.com/e/_EzwaYAM">these TRVs</a> but haven’t had time to configure them yet. My plan is:</p>

<ol>
  <li><strong>Pair the TRVs</strong> to my Zigbee network.</li>
  <li><strong>Pull temperature data</strong> from my Nest thermostat (the main sensor).</li>
  <li><strong>Set up automations</strong> in Home Assistant so that each room’s radiator valve opens or closes based on its own target temperature.</li>
</ol>

<p>I’m hoping this will help solve the typical British house problem: some rooms end up too warm, while others are never warm enough. With per-room heating control, it should be far more balanced and efficient.</p>

<h2 id="conclusion-so-far">Conclusion (So Far)</h2>

<p>That’s where my Home Assistant journey sits at the moment. I’m thrilled with how the adaptive lighting is working, especially now that I’ve harnessed an AI coding assistant to manage the complexity of my YAML files. The next challenge, smart radiator valves, will hopefully bring my home’s temperature control on par with my lighting automation.</p>


        <i>Found an error or typo? File PR against <a href="https://github.com/vpetersson/vpetersson.com/tree/master/_posts/2025-01-22-how-i-use-home-assistant-in-2025.md" rel="nofollow">this file</a>.</i>
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bluesky's science takeover: 70% of Nature poll respondents use platform (119 pts)]]></title>
            <link>https://www.nature.com/articles/d41586-025-00177-1</link>
            <guid>42813316</guid>
            <pubDate>Fri, 24 Jan 2025 14:27:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nature.com/articles/d41586-025-00177-1">https://www.nature.com/articles/d41586-025-00177-1</a>, See on <a href="https://news.ycombinator.com/item?id=42813316">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-test="access-teaser"> <figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50491424.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50491424.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="The silhouettes of several people using digital devices against the blue backdrop of the Bluesky logo." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50491424.jpg"><figcaption><p><span>Social-media platform Bluesky has more than 27 million users.</span><span>Credit: Peter Kováč/Alamy</span></p></figcaption></picture></figure><p>Seventy per cent of <i>Nature</i> readers who responded to an <a href="https://www.nature.com/articles/d41586-025-00037-y" data-track="click" data-label="https://www.nature.com/articles/d41586-025-00037-y" data-track-category="body text link">online poll</a> are using the social-media platform Bluesky, which works a lot like X (formerly Twitter) and whose popularity has soared in recent months, in particular since the <a href="https://www.nature.com/articles/d41586-024-03635-4" data-track="click" data-label="https://www.nature.com/articles/d41586-024-03635-4" data-track-category="body text link">November US election</a>.</p><p>Although the survey is not statistically representative of <i>Nature</i> readers or the scientific community at large, it echoes <a href="https://www.nature.com/articles/d41586-024-03784-6" data-track="click" data-label="https://www.nature.com/articles/d41586-024-03784-6" data-track-category="body text link">recent enthusiasm for Bluesky</a> among researchers and <a href="https://www.nature.com/articles/d41586-023-02554-0" data-track="click" data-label="https://www.nature.com/articles/d41586-023-02554-0" data-track-category="body text link">disillusionment with X</a>. Of roughly 5,300 readers who responded to a question about X, 53% said they used to be on X but have now left (see ‘Mass exodus’).</p><figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50509360.png?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50509360.png?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="MASS EXODUS. Graphic shows 53% of respondents to a Nature survey said they used to be on the platform X but have now left." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50509360.png"><figcaption><p><span>Source: L. Balduf <i>et al</i>. Preprint at arXiv <a href="https://doi.org/10.48550/arXiv.2501.11605" data-track="click" data-label="https://doi.org/10.48550/arXiv.2501.11605" data-track-category="body text link">https://doi.org/10.48550/arXiv.2501.11605</a> (2025)</span></p></figcaption></picture></figure><p>“Bluesky is much better for science. There is much less toxicity, misinformation, and distractions,” wrote one respondent. “My feed is almost entirely scientists and I actually get updates on research that is relevant and timely,” wrote another.</p><p>Bluesky now has more than 27 million users and is broadly similar in functionality and user experience to X, which for a long time was a go-to platform for scientists to discuss and disseminate their work. X fell out of favour with some after entrepreneur <a href="https://www.nature.com/articles/d41586-024-04098-3" data-track="click" data-label="https://www.nature.com/articles/d41586-024-04098-3" data-track-category="body text link">Elon Musk</a> purchased the tool in October 2022.</p><p>In <i>Nature</i>’s survey, 55% of respondents to the question ‘What do you use Bluesky for?’ said it was a mix of three research-related activities: to connect with other scientists, keep up to date with other research or researchers, and promote their own research (see ‘Online connections’).</p><figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50508222.png?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50508222.png?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="ONLINE CONNECTIONS. Graphic shows 55% of respondents to Nature's poll said they used Bluesky to to connect with other scientists, keep up to date with other research or researchers and promote their own research." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50508222.png"><figcaption><p><span>Source: L. Balduf <i>et al</i>. Preprint at arXiv <a href="https://doi.org/10.48550/arXiv.2501.11605" data-track="click" data-label="https://doi.org/10.48550/arXiv.2501.11605" data-track-category="body text link">https://doi.org/10.48550/arXiv.2501.11605</a> (2025)</span></p></figcaption></picture></figure><p>In total, almost 6,000 readers responded to <i>Nature’s</i> poll, which ran from 14 to 17 January 2025. We solicited responses on the <a href="https://www.nature.com/" data-track="click" data-label="https://www.nature.com/" data-track-category="body text link"><i>Nature</i> website,</a> on social media and in the <a href="https://www.nature.com/briefing/signup" data-track="click" data-label="https://www.nature.com/briefing/signup" data-track-category="body text link">Nature Briefing</a>, an e-mail newsletter. Of the almost 5,000 respondents who answered a question about their work, 85% — or 3,970 — said that they were working scientists. A similar number responded to a question about their field of study: 38% said they worked in biological sciences, 11% in computing or information sciences, 9% in physical sciences and 9% in environmental sciences. Answers came from scientists in 84 countries or regions, with the most coming from the United States (33%), followed by the United Kingdom (15%) and Germany (12%). </p><h2>Positive vibes</h2><p>Thousands of survey respondents wrote expressively about how they think Bluesky stacks up against X. “Bluesky compares beautifully so far. More civil and informed conversations,” wrote one. Other positive terms that respondents used to contrast the platform with X included more pleasant, more supportive, friendlier, kinder, nicer, more collegial, uplifting, more peaceful and safer.</p><p>A sense of safety is particularly valuable to researchers who teach or lead teams. “I feel that I can recommend it to students and trainees. I can’t do that for X, it is not a safe learning space,” wrote one respondent. </p><p>Some wrote that Bluesky is a better forum than X for discussing science, because debate there is more measured and more focused, with less hostility. “I find it much less antagonistic to science,” said one respondent.</p><p>But with less heated debate and fewer users than X, some find Bluesky boring. That could change if it continues to attract new users at pace (see ‘Bluesky growth’). “Was pretty sleepy until November 2024. Now there seems to be enough critical mass of researchers in my field to find new research and connect again,” wrote one respondent.</p><figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50509076.png?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50509076.png?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="BLUESKY GROWTH. Chart shows the rapid increase in the number of Bluesky users since mid-2024." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00177-1/d41586-025-00177-1_50509076.png"><figcaption><p><span>Source: L. Balduf <i>et al</i>. Preprint at arXiv <a href="https://doi.org/10.48550/arXiv.2501.11605" data-track="click" data-label="https://doi.org/10.48550/arXiv.2501.11605" data-track-category="body text link">https://doi.org/10.48550/arXiv.2501.11605</a> (2025)</span></p></figcaption></picture></figure><h2>Fewer fascists?</h2><p>Other marks in Bluesky’s favour noted by survey respondents include the perception that there are fewer “Nazis” on the platform than on X, and less racism; that it is not owned or deemed to be influenced by Musk; and that it does not host advertisements.</p><p>X could not be reached for comment on these criticisms before this article was published.</p><p>Not all <i>Nature</i> readers love Bluesky. One criticism that emerged in the survey responses contends that it is a leftwing echo chamber. “Bluesky is full of woke crazy people who will threaten you with violence if you disagree with the liberal narrative,” said one respondent. </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Threlte 8 (113 pts)]]></title>
            <link>https://threlte.xyz/blog/threlte-8</link>
            <guid>42813264</guid>
            <pubDate>Fri, 24 Jan 2025 14:21:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://threlte.xyz/blog/threlte-8">https://threlte.xyz/blog/threlte-8</a>, See on <a href="https://news.ycombinator.com/item?id=42813264">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <p>Today we are releasing <strong>Threlte 8</strong>, a significant milestone that marks a leap
forward in performance, flexibility, and developer experience. This release has
been cooking for the last 6 months. We’re super excited about the potential it
unlocks for the next chapter of 3D graphics on the web.</p>
<p>The new features of <strong>Svelte 5</strong> are groundbreaking for us as developers and
embracing it was also an opportunity to refine the existing APIs. Furthermore, a
lot has been happening within the world of <strong>Three.js</strong>. We’ve carved the path
for Threlte to take advantage of those developments too.</p>
<h2 id="whats-new-in-threlte-8">What’s new in Threlte 8?</h2>
<p>Threlte 8 is packed with enhancements in <code>@threlte/core</code> and updates in all our
other packages. Here are the highlights:</p>
<h3 id="all-new-t-component">All-new <code>&lt;T&gt;</code> component</h3>
<p>The universal <a href="https://threlte.xyz/docs/reference/core/t"><code>&lt;T&gt;</code> component</a> has been <strong>reduced in
complexity</strong> all while <strong>adding features and flexibility</strong> that were just not
possible before.</p>
<ul>
<li>Props are now evaluated individually</li>
<li><a href="https://threlte.xyz/docs/learn/advanced/migration-guides#attach-api--trait-components"><code>attach</code> got a lot more
powerful</a></li>
<li><a href="https://threlte.xyz/blog/docs/learn/advanced/migration-guides#automatic-disposal">Automatic disposal is more
transparent</a> and</li>
<li><a href="https://threlte.xyz/docs/learn/advanced/migration-guides#events">Events have been algined with svelte 5</a></li>
</ul>

<p>We’ve added a lot of new things to play around with in <code>@threlte/extras</code> including:
<a href="https://threlte.xyz/docs/reference/extras/ascii-renderer"><code>&lt;AsciiRenderer&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/cube-camera"><code>&lt;CubeCamera&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/discard-material"><code>&lt;MeshDiscardMaterial&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/radial-gradient-texture"><code>&lt;RadialGradientTexture&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/linear-gradient-texture"><code>&lt;LinearGradientTexture&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/use-viewport"><code>useViewport</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/hud"><code>&lt;HUD&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/resize"><code>&lt;Resize&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/mesh-bounds"><code>&lt;meshBounds&gt;</code></a>,
<a href="https://threlte.xyz/docs/reference/extras/detailed"><code>&lt;Detailed&gt;</code></a> and
<a href="https://threlte.xyz/docs/reference/extras/view"><code>&lt;View&gt;</code></a>.</p>
<h3 id="custom-type-support-for-t">Custom type support for <code>&lt;T&gt;</code></h3>
<p>Plugins such as
<a href="https://threlte.xyz/docs/reference/extras/interactivity#prop-types"><code>interactivity</code></a> now expose
types which can be added to your ambient type definitions for the <code>&lt;T&gt;</code>
component to pick up. Event handlers and custom <code>&lt;T&gt;</code> component objects are now
type-safe.</p>
<h3 id="fixed-frame-physics">Fixed frame physics</h3>
<p><code>@threlte/rapier</code> now supports <a href="https://threlte.xyz/docs/reference/rapier/framerate">fixed frame
physics</a> letting you craft simulations with
predictability and consistency.</p>
<h3 id="threlte-plugin-api">Threlte plugin API</h3>
<p>The <strong>Plugin API</strong> got an update to <a href="https://threlte.xyz/docs/learn/advanced/migration-guides#plugin-api">fully embrace Svelte 5’s reactivity
model</a>. The doc page also
had an update to better introduce the API’s capabilities.</p>
<h3 id="this-is-the-webgpu-way">This is the <em>WebGPU</em> way</h3>
<p>Threlte 8 introduces a clear path for <a href="https://threlte.xyz/docs/learn/advanced/webgpu">using
WebGPU</a>. Threlte requires minimal changes to
projects in order to start using three.js’s new WebGPU renderer and we’ve also
outlined how to get started with <a href="https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language">three’s new shading
language</a> -
TSL.</p>
<h3 id="a-new-package-appears">A new package appears</h3>
<p>An alpha release of <a href="https://threlte.xyz/docs/reference/studio/getting-started">Threlte Studio</a> is
part of this release 🎉 It’s a step towards visual editing; letting you tweak
values in browser and then automatically having those changes written into your
code. Theres a guided tour to help you get started. We hope it helps get things
where you want them 🚀😀</p>
<h2 id="how-to-migrate-to-threlte-8">How to migrate to Threlte 8</h2>
<p>There are breaking changes. Threlte 8 is not backward-compatible but we’ve
tried our best to cover the details within our <a href="https://threlte.xyz/docs/learn/advanced/migration-guides#threlte-8">migration
guide</a>. For further help,
reach out to us on discord.</p>

<img width="200" src="https://threlte.xyz/threlte-8-diff.png" alt="THrelte8Diff">
<p>This rewrite was a team effort with great contributions from the community.
Thank you to everyone who tested out any of our <code>@next</code> releases. We’re immensely
grateful for the time, talent, and passion of our community. You guys rock 😃</p>
<h2 id="whats-next">What’s next?</h2>
<p>We decided to deprecate the <code>npm create threlte</code> command. We’re excited about
Svelte’s new <code>sv</code> CLI to incorporate third party packages and we’re going to
offer Threlte as a package to be installed with <code>sv</code> in the near future.</p>
<p>We’d love to hear about what everyone makes with Threlte 8! Take it for a spin,
explore the new documentation, and start building your next 3D application with
the super powers of Threlte 8 🎉</p>
 </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Little Snitch feature nobody knows about (155 pts)]]></title>
            <link>https://lapcatsoftware.com/articles/2025/1/6.html</link>
            <guid>42813231</guid>
            <pubDate>Fri, 24 Jan 2025 14:18:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lapcatsoftware.com/articles/2025/1/6.html">https://lapcatsoftware.com/articles/2025/1/6.html</a>, See on <a href="https://news.ycombinator.com/item?id=42813231">Hacker News</a></p>
<div id="readability-page-1" class="page">
<nav>
Previous: <a href="https://lapcatsoftware.com/articles/2025/1/5.html">New secure note on macOS Sequoia</a>
<br><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a></nav>
<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>

<h3>January 24 2025</h3>

<p><a href="https://www.obdev.at/products/littlesnitch/">Little Snitch</a> by Objective Development is the first app that I install on a new Mac. In fact I just bought a new Mac, an M4 MacBook Pro with nano-texture display, and I installed Little Snitch via thumb drive even before connecting the Mac to the internet. While setting up my new Mac, which came with macOS 15.2 preinstalled, I noticed that Safari attempted to connect to <code>ssl.gstatic.com</code> on launch. That domain is owned by Google!</p>
<p><img src="https://lapcatsoftware.com/articles/2025/1/6-images/1.png" width="588" height="350" alt="Safari wants to connect to ssl.gstatic.com on TCP port 443 (https)"></p>
<p>I denied the connection, but it kept happening on every launch, despite the fact that I set Safari to open with a new private window and empty page. Moreover, it happened on every launch of Safari Technology Preview too. In the Little Snitch alert window, I pressed the info button, which revealed that the connection was initiated by Safari Search Helper, a separate process from the main Safari app.</p>
<p><img src="https://lapcatsoftware.com/articles/2025/1/6-images/2.png" width="670" height="662" alt="Established by /System/Volumes/Preboot/Cryptexes/Incoming/OS/System/Library/PrivateFrameworks/SafariShared.framework/Versions/A/XPCServices/com.apple.Safari.SearchHelper.xpc/Contents/MacOS/com.apple.Safari.SearchHelper"></p>
<p>Like most web browsers nowadays, Safari launches other processes to perform dedicated tasks. To see this in action, just search for "Safari" in Activity Monitor. The advantage of using separate processes is that each process can have separate privileges, and if one process happens to crash, it doesn't cause the entire app to crash. When an internet connection is initiated by a process launched by an app, Little Snitch attempts to attribute the connection to the main app rather than to the helper process. This attribution usually makes more sense to the Little Snitch user.</p>
<p>I haven't figured out exactly why Safari Search Helper connects to <code>ssl.gstatic.com</code>, but it's definitely related to using Google as the search engine in Safari Search Settings. If I change the search engine to DuckDuckGo, for example, the connection attempts no longer occur on launch. Indeed, if I switch the search engine back from DuckDuckGo to Google in Safari Settings popup button, a connection to <code>ssl.gstatic.com</code> occurs <em>immediately</em>. None of the other search engine choices provoke a connection. I decided to permanently deny all connections to <code>ssl.gstatic.com</code> from Safari, because there's no good reason for Safari to silently contact Google when I'm not even searching.</p>
<p>Unfortunately, my new Little Snitch rule had an undesirable side effect. Although I'm trying to wean myself off, I still use Gmail, and when you set up Gmail in Mail app, it authenticates your Google account in Safari. However, the authentication kept failing for me. Looking in the Safari web inspector console, it became clear that the problem was some denied <code>ssl.gstatic.com</code> connections. Thus, I was forced to disable my Little Snitch rule and allow Safari to connect to <code>ssl.gstatic.com</code> in order to authenticate Gmail for Mail app.</p>
<p>Oddly, the <code>ssl.gstatic.com</code> connections from Safari stopped entirely after I allowed it to connect once. I discovered, comparing Safari preferences before and after, that <code>WBSOfflineSearchSuggestionsModelLastUpdateDateKey</code> had been set.</p>
<blockquote><code>defaults read com.apple.Safari WBSOfflineSearchSuggestionsModelLastUpdateDateKey</code></blockquote>
<p>I also discovered through experimentation, giving <code>WBSOfflineSearchSuggestionsModelLastUpdateDateKey</code> different date values (technically, they're string values of dates), that Safari checks for updates once a week. Thus, it was clear that Safari would make future <code>ssl.gstatic.com</code> connections, if allowed by Little Snitch. By the way, I should note that I've disabled "Include search engine suggestions" in Safari Search Settings, yet Safari is still apparently trying to download suggestions from Google?</p>
<p>What I wanted to do was create a Little Snitch rule that applied to Safari Search Helper but not to websites loaded in Safari tabs. I tried creating a new rule using the explicit path on disk of Safari Search Helper, but that didn't work. Little Snitch seemed to ignore that rule and continued to attribute Safari Search Helper connections to the Safari app.</p>
<p>I emailed Objective Development to ask whether there's any way to separate the rules in Little Snitch for the two processes, Safari and Safari Search Helper. At first, they said no, but then on reflection, they said yes!</p>
<p><img src="https://lapcatsoftware.com/articles/2025/1/6-images/3.png" width="578" height="566" alt="Safari via com.apple.Safari.SearchHelper"></p>
<p>The trick is to use "via" in the Little Snitch rule. When you're creating the rules, enter the full file paths of the two processes, separated by "via". Little Snitch will automatically replace the paths with the process names. Make sure you match both of the processes by code signing identity too. The above rule denies <code>ssl.gstatic.com</code> connections initiated by Safari Search Helper while otherwise allowing such connections by Safari.</p>
<p>It's nice to know that this trick exists, though it's unlikely that you'll need to use it much. I thought the trick might help with Google Chrome, but it turns out that most Chrome connections are initiated by the Google Chrome Helper process: not only the web page connections but also the silent connections that run in the background, for example to <code>googleapis.com</code>, <code>accounts.google.com</code>, <code>tools.google.com</code>, <code>clients1.google.com</code>, <code>clients2.google.com</code>, <code>clients3.google.com</code>, etc. Needless to say, Google Chrome phones home a lot! It was disappointing to learn that Safari makes a silent connection to Google too. I guess that the massive yearly default search engine payment from Google to Apple buys a lot of access.</p>

<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>
<nav><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a><br>
Previous: <a href="https://lapcatsoftware.com/articles/2025/1/5.html">New secure note on macOS Sequoia</a>
</nav>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Every System is a Log: Avoiding coordination in distributed applications (171 pts)]]></title>
            <link>https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/</link>
            <guid>42813049</guid>
            <pubDate>Fri, 24 Jan 2025 13:57:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/">https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/</a>, See on <a href="https://news.ycombinator.com/item?id=42813049">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><hr><p><strong>Building resilient distributed applications remains a tough challenge.</strong></p><p>It should be possible to focus almost entirely on the business logic and the complexity inherent to the domain. Instead, you need to review line-by-line and check: <em>“what if the service crashes here?”</em>, <em>“what if the API we call here is temporarily unavailable”</em>, <em>“what if a concurrent invocation overtakes this one here”</em>, or <em>“what if this process becomes a zombie while executing this function, how do I prevent it from corrupting the state?”</em>.</p><p>As a result, you spend a huge amount of time worrying about failover strategies, retries, race conditions, locking/fencing, ordering of operations, order visibility of changes, decoupling availability, etc. They add queues, key-value stores, locking services, schedulers, workflow orchestrators and they try to get them all to play nice together. And the hard truth is, many applications don’t get it right and are not correct under failures or even under load.</p><p><img alt="Problems in distributed applications and services" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/dist_app_problems.png"></p><p>How can we radically simplify this? In this article, we walk through a core idea that addresses many of these issues, by avoiding distributed coordination. Much of this goes back to learnings from when we built <a href="https://flink.apache.org/">Apache Flink</a>.</p><p>Let’s start with an observation about distributed applications and infrastructure: <strong>Every System is a log.</strong></p><ul><li><p><strong>Message queues</strong> are logs: <a href="https://kafka.apache.org/">Apache Kafka</a>, <a href="https://pulsar.apache.org/">Pulsar</a>, <a href="https://engineering.fb.com/2019/10/07/core-infra/scribe/">Meta’s Scribe</a> are distributed implementations of the log abstraction. Message brokers (e.g., RabbitMQ, SQS) internally replicate messages through logs.</p></li><li><p><strong>Databases</strong> (and K/V stores) are logs: changes go to the write-ahead-log first, then get materialized into the tables. The database community has the famous saying <em>“The log is the database; everything else is cache (or materialized views)”</em> - often attributed to <a href="https://www.linkedin.com/in/pathelland">Pat Helland</a>. The idea of <a href="https://martin.kleppmann.com/2015/11/05/database-inside-out-at-oredev.html">“Turning the Database Inside Out”</a> starts with a log.</p></li><li><p>Distributed <strong>locking- and leader election services</strong> (like <a href="https://zookeeper.apache.org/">ZooKeeper</a>, <a href="https://etcd.io/">Etcd</a>, …) are consensus logs at their core. Consensus algorithms, like Raft, inherently model log replication.</p></li><li><p>Persistent <strong>state machines</strong> materialize logs of their state transitions.</p></li></ul><p>When you build an application or microservice that interacts, for example, with a database, a message queue, and a service API (backed by another database), you are orchestrating a handful of different logs in your business logic.</p><h2 id="applications-need-to-orchestrate-many-logs">Applications need to orchestrate many logs </h2><p>In this example, we want to implement a <code>processPayment</code> handler. The payment has an ID that identifies it. The handler is triggered from a queue (which also re-delivers the event if the handler fails or times out) and the processing involves checking a fraud detection model, updating account balance, storing the status, and sending a notification. There are other handlers that may handle the same payment ID, for example to cancel the payment, block it, unblock it, revert it.</p><p><img alt="An example, naïve implementation" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/code_simple.png"></p><p>You can probably spot some issues:</p><ol><li>Concurrent invocations <em>(other handlers like “cancel”, or retries of the same event)</em> can produce arbitrary results.</li><li>A failure after line 15 means the next retry does nothing and we don’t send a notification.</li><li>If the fraud model is not completely deterministic (or if it is updated between retries), we might assume a payment is valid, crash after line 9, the retry declares the payment not valid, and we are setting the status to BLOCKED despite the fact that we withdrew the money.</li></ol><p>Nasty stuff! Let’s try to improve that.</p><p><img alt="An example, more elaborate implementation" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/code_complex.png"></p><p>This second version of the code does some things better, but still has issues. One of them is around line 20, where we need to ensure that we are still the owner of the lock at the point in time where the database persists the update. That is really hard to do, because distributed lock release or re-entrance is never 100% correct, due to the impossibility of precise failure detection <em>(is a process failed or just slow or is our network partitioned?)</em>, so locking generally requires an additional fencing mechanism. Martin Kleppmann has <a href="https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">a great blog post</a> about the rabbit hole of getting distributed locking right.</p><p>Why is it so hard to make this seemingly simple handler work reliably? Because our goal is to make consistent changes depending on the status of disparate systems, where each has its own view of the world, maintained in its separate log.</p><p>Distributed applications often need to <span>implement a complex orchestration of all the systems they interact with</span>, carefully <span>designing all states and operations, to establish order and invariants</span> that help them ensure correctness. This is the heart of much of the complexity in modern distributed applications.</p><h2 id="what-if-it-were-all-the-same-log">What if it were all the same Log? </h2><p>Now let’s assume that all these systems (queues, DBs, locks, …) operate off the same log - for the sake of this thought experiment - the log of the message queue that delivers the <code>PaymentEvent</code> to the <code>processPayment</code> handler (the <em>upstream log</em>).</p><p>Every time our <code>processPayment</code> handler wants to change some state of another system, it writes a record to the upstream log. That new record is linked to the original <code>PaymentEvent</code>. Whenever the queue decides to re-deliver the <code>PaymentEvent</code> again (e.g., under a timeout or an assumed failure), it also attaches all linked log entries (the <em>journal</em>).</p><p><img alt="Implementing a step journal into the log" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/one_log_journal.png"></p><p>Now we can adjust lines 9,10,11 (the call to the fraud-detector API and storing the result) to write the result of the API call to the upstream log. When the handler is retried after a potential failure, it automatically sees whether the result was written before. This is not just efficient, but we no longer store completed steps in a shared DB where it is easy to have it accidentally picked up in unexpected ways (see <a href="https://portswigger.net/research/smashing-the-state-machine">this article</a> for how this can be a severe security and integrity loophole).</p><p>This becomes particularly useful, if we require a <em>conditional append</em> to add an entry to the log: We can only append that entry, if no newer retry was triggered. That is easy for a queue to track (it knows whether it sent the <code>PaymentEvent</code> out again) and our <code>processPayment</code> handler would quit if the conditional append failed, knowing that another retry attempt has taken over.</p><p>Now, concurrently executing retries (if the queue incorrectly assumes a handler failed and re-sent the event) can no longer corrupt the step history. This implementation gives us pretty strong workflow-style execution guarantees for our code!</p><p><img alt="Safety through conditional appends to the log" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/one_log_conditional_append.png"></p><p>To make locking (line 2) and state update (line 20) work reliably, the <code>processPayment</code> handler writes the relevant events (<em>acquire lock</em>, <em>release lock</em>, <em>update state</em>) to the upstream log as well. After writing the <em>acquire lock</em> event, the handler waits until the lock service grants the lock.<br>The lock service and the database now follow the upstream log as if it was their own write-ahead log. The database can simply apply the update when it reads the event, the locking service of course only grants the lock when available (might have to wait to encounter the previous holder’s <em>release lock</em> event).</p><p><img alt="Locking and state management through the log" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/one_log_lock_state.png"></p><p>Somewhat surprisingly, this pretty much eliminates all problems and corner cases we had with locks and state before: Lock acquisition and release through the upstream log and handler’s journal means we reliably keep the lock across retries. Having the update event conditionally appended to the same event journal as the lock event replaces the need for the lock’s fencing token - plus, we can be sure that we apply the update once and only once.</p><p>So, once we implement our logic like this, EVERYTHING JUST WORKS.</p><p>We can inject all sorts of failures, stalls, network partitions. As long as the log is correctly implemented, the program will always remain correct. And all that the <code>processPayment</code> handler needs to do is (1) trigger actions as conditional-log-appends and (2) skip over actions whose log entries are already attached to the <code>PaymentEvent</code>. This is super easy to implement in a library, because it doesn’t require any form of distributed coordination.</p><h2 id="if-everythings-in-one-log-theres-nothing-to-coordinate">If everything’s in one log, there’s nothing to coordinate </h2><p>We haven’t added a new distributed system primitive; in fact we’ve removed several. The benefits come from avoiding the need for coordination.</p><p>Before we started using the same log, the state was spread across systems: The status of the operation, whether a lock is held, who held it, what value a branch was based on. Because each system maintains their state as if it was independent, the different parts of the state can get out-of-sync and be altered in unexpected ways (e.g., through a race condition or zombie process). It’s hard to implement robust logic and guarantee strong invariants that way.</p><p>Having a single place (the one log) that forces a linear history of events as the ground truth and owns the decision of who can add to that ground truth, means we don’t have to coordinate much any more.</p><p>Coordination avoidance is one of the few silver bullets in distributed systems - a way to reduce complexity, rather than shift it. For example, guarding our second code snippet with a ZooKeeper lock only shifted complexity. It reduced the code’s need to worry about concurrency, but introduced issues around lost locks and cleanup of persistent locks. In contrast, the approach to unify the different states in one log actually reduced work, which resulted in higher efficiency, fewer corner cases, and easier operations.</p><p>I know what you’re thinking: That’s a nice thought experiment, but my queue/log doesn’t work like that, my database doesn’t follow some other log, and isn’t this breaking all rules for separation of concerns?</p><h2 id="adopting-this-idea-in-practice">Adopting this idea in practice </h2><p>This idea can serve as a conceptual blue-print for an architecture based on a log (e.g., Kafka) - a bit like <a href="https://martin.kleppmann.com/2015/11/05/database-inside-out-at-oredev.html">“Turning the Database Inside Out”</a> <em>(maybe we should call this “Turning the Microservice Inside Out?”)</em>. In practice, today’s log implementations miss efficient built-in ways to track retries, make conditional-appends, link events into a journal, and would leave that to the application developer to implement.</p><p><a href="https://restate.dev/"><strong>Restate</strong></a> is an implementation of this idea. Restate Server is the broker that owns the upstream log and push-invokes the handlers with events (e.g., similar to AWS SNS and Event Bridge), ensuring reliable retries after crashes. Every event gets the latest <em>execution journal</em> (set of linked events) attached, just as described in the thought experiment above. Restate uses bi-directional streaming protocols (e.g., HTTP/2) to invoke the event handlers and send journal events and acknowledgements back and forth.</p><p><img alt="Restate in an application stack" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/restate_in_the_stack.png"></p><p>The server issues a <em>unique epoch to every invocation and retry</em>, which the SDK attaches to every journal event that it sends, allowing the server to reject events from subsumed handler executions <em>(the conditional append)</em>.</p><p>The code snippet shows the example in Restate’s API <em>(here TypeScript, but Java, Kotlin, Python, Go, and Rust are supported as well)</em>. The code does not explicitly append log events, but rather uses an SDK for actions, and the SDK interacts with the log.</p><p><img alt="Example code with the Restate SDK" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/code_restate.png"></p><p>To persist intermediate steps (line 8), handlers use the SDK (<code>ctx.run</code>), which sends the event to the log and awaits the ack of the conditional append to the event’s <em>execution journal</em>. On retries, the SDK checks the <em>journal</em> whether the step’s event already exists and restores the result from there directly.</p><p>Messages to other handlers are transported with exactly-once semantics (line 16). Message and RPC events are both added to the journal and routed to the destination handler. Similar to <code>ctx.run</code>, the journal deduplicates the message-sending steps. Because messages result in a single durable invocation (sequence of retries that share a journal), you can easily build end-to-end exactly-once semantics on top of this.</p><p>Restate supports handlers that lock a key when executing (and hold the lock across retries). Those handlers can read and update state that is scoped to that key. They are implemented similarly to the thought experiment: The lock and state update events are added to the journal and additionally processed by an embedded lock service and K/V store, making locks and state virtually incorruptible through partial failures, race conditions, zombie processes, etc.<br>These stateful handlers can be grouped together to share state. Restate calls that a <em>Virtual Object</em>, because the handlers are like methods with access to the object instance’s state. The state is infinitely retained in the K/V store, even when the log events eventually get garbage collected.</p><p><img alt="Virtual Objects in Restate" src="https://restate.dev/blog/every-system-is-a-log-avoiding-coordination-in-distributed-applications/virtual_object.png"></p><p>There are more building blocks in Restate, including <em>persistent Futures/Promises</em>, <em>timers</em>, or <em>idempotency-keys</em> . They all build on the same concept: Events routed through the same log, stored in the journal, and processed into a database or scheduler.</p><p>Applications often aim to create the behavior of <span>stateful, reliable, and resumable execution</span> for their critical functions. The single-log approach provides that with a single dependency and without coordination across queues, DBs, locks, and schedulers. Restate implements that pattern.</p><h2 id="blast-radius-and-separation-of-concerns">Blast radius and separation of concerns </h2><p>It would not make sense to use a single log for every operation in a distributed multi-service architecture. While it could give interesting properties, this would couple services too tightly, create a single giant blast radius, and void many benefits of service-oriented designs.</p><p>The sweet-spot we target with Restate’s implementation of this idea, is to drive all state that is strictly scoped to a handler or service through the log, plus transport of messages between services. The result is a coupling and blast radius similar to any event-driven service: If the upstream queue/log is down, the service cannot be invoked.</p><h3 id="state-in-a-database-or-in-the-log">State in a database or in the log? </h3><p>We assume that Restate is not going to replace general purpose databases. Shared databases should and will remain a part of the infrastructure, and continue to do what they are great at.</p><p>The K/V state built on the log is a great fit for state machines <em>(like the status of a payment)</em>, temporary state when joining/aggregating events and signals, or really any state that is purely updated through the event-driven handlers and scoped around a key (though a key may be something broader, like an aggregate root in Domain Driven Design).</p><p>It also gives you the building blocks for a highly robust and consistent core state. You can even use that to build overlays over other stores, track metadata like versions for entries in databases, or build data structures like semaphores. <a href="https://github.com/restatedev/examples/blob/main/typescript/patterns-use-cases/src/database/main.ts">Here is an example</a> of how to use this to make exactly-once updates to databases from handlers.</p><h2 id="whats-next">What’s next? </h2><p>If you want to try this pattern out for yourself and see and feel this idea in action, Restate is open source and you can download it at <a href="https://restate.dev/get-restate/">https://restate.dev/get-restate/</a></p><p>Today, Restate runs on a single node - similar to a Postgres database server. <span>In the next few weeks, we will release a first version of Distributed Restate</span>, supporting replication, scale out deployments, working with object store snapshots - stay tuned for more exciting updates during that release.</p><p>With the release, we will publish Part 2 of this article, which is looking at the design of the broker that maintains that log, drives the execution, retries, and implements the extensible logic to use the log for communication, locking, journaling, state, signals, scheduling, etc. As you might expect, if the core abstraction is a log, that system is a specific type of event-driven architecture.</p><p>In Part 3 of this series, we look at the implementation of the log that backs everything. Why not just use Kafka? Or just use Postgres?
In this case, we opted to develop a new type of log - something that generally one shouldn’t do, but once in a while, there is actually a good case for it. We believe that this is one of those cases, and will discuss the details of the log design, what makes it unique, and what it can do that’s hard to do with any existing implementation.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lightpanda: The headless browser designed for AI and automation (151 pts)]]></title>
            <link>https://github.com/lightpanda-io/browser</link>
            <guid>42812859</guid>
            <pubDate>Fri, 24 Jan 2025 13:34:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/lightpanda-io/browser">https://github.com/lightpanda-io/browser</a>, See on <a href="https://news.ycombinator.com/item?id=42812859">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a href="https://lightpanda.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/724ab0ebf840402c19f060613ddf7325e901d6b37fd3c7ed6c72ec278ff51c1c/68747470733a2f2f63646e2e6c6967687470616e64612e696f2f6173736574732f696d616765732f6c6f676f2f6c70642d6c6f676f2e706e67" alt="Logo" height="170" data-canonical-src="https://cdn.lightpanda.io/assets/images/logo/lpd-logo.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Lightpanda Browser</h2><a id="user-content-lightpanda-browser" aria-label="Permalink: Lightpanda Browser" href="#lightpanda-browser"></a></p>
<p dir="auto"><a href="https://lightpanda.io/" rel="nofollow">lightpanda.io</a></p>
<p dir="auto"><a href="https://github.com/lightpanda-io/browser/commits/main"><img src="https://camo.githubusercontent.com/bd89bc3f2433bdd3f082a6333bc730ed0dda1f3085cf214e0509f64a9af27cd0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f6c6967687470616e64612d696f2f62726f77736572" alt="Commit Activity" data-canonical-src="https://img.shields.io/github/commit-activity/m/lightpanda-io/browser"></a>
<a href="https://github.com/lightpanda-io/browser/blob/main/LICENSE"><img src="https://camo.githubusercontent.com/2319a00670dc456df2849c9abef84e1e77689f093f9c28f92fff3946af70f301/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6c6967687470616e64612d696f2f62726f77736572" alt="License" data-canonical-src="https://img.shields.io/github/license/lightpanda-io/browser"></a>
<a href="https://twitter.com/lightpanda_io" rel="nofollow"><img src="https://camo.githubusercontent.com/280d25e78f9721602e5435e41fe5c3a042f327306ecaff835d07fadc38dece32/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6c6967687470616e64615f696f" alt="Twitter Follow" data-canonical-src="https://img.shields.io/twitter/follow/lightpanda_io"></a>
<a href="https://github.com/lightpanda-io/browser"><img src="https://camo.githubusercontent.com/46dacea76d8f88071e7194f7e6525372f421c33afc1743993a434f3c01e8fd07/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6c6967687470616e64612d696f2f62726f77736572" alt="GitHub stars" data-canonical-src="https://img.shields.io/github/stars/lightpanda-io/browser"></a></p>
<p dir="auto">Lightpanda is the open-source browser made for headless usage:</p>
<ul dir="auto">
<li>Javascript execution</li>
<li>Support of Web APIs (partial, WIP)</li>
<li>Compatible with Playwright, Puppeteer through CDP (WIP)</li>
</ul>
<p dir="auto">Fast web automation for AI agents, LLM training, scraping and testing with minimal memory footprint:</p>
<ul dir="auto">
<li>Ultra-low memory footprint (9x less than Chrome)</li>
<li>Exceptionally fast execution (11x faster than Chrome) &amp; instant startup</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/523cfe4ac41a2ab2deccebd0b9197e8232a4a25c0511d014408181064ae853da/68747470733a2f2f63646e2e6c6967687470616e64612e696f2f6173736574732f696d616765732f62656e63686d61726b5f323032342d31322d30342e706e67"><img width="500px" src="https://camo.githubusercontent.com/523cfe4ac41a2ab2deccebd0b9197e8232a4a25c0511d014408181064ae853da/68747470733a2f2f63646e2e6c6967687470616e64612e696f2f6173736574732f696d616765732f62656e63686d61726b5f323032342d31322d30342e706e67" data-canonical-src="https://cdn.lightpanda.io/assets/images/benchmark_2024-12-04.png"></a></p>
<p dir="auto">See <a href="https://github.com/lightpanda-io/demo">benchmark details</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick start" href="#quick-start"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install from the nightly builds</h3><a id="user-content-install-from-the-nightly-builds" aria-label="Permalink: Install from the nightly builds" href="#install-from-the-nightly-builds"></a></p>
<p dir="auto">You can download the last binary from the <a href="https://github.com/lightpanda-io/browser/releases/tag/nightly">nightly
builds</a> for
Linux x86_64 and MacOS aarch64.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Download the binary
$ wget https://github.com/lightpanda-io/browser/releases/download/nightly/lightpanda-x86_64-linux
$ chmod a+x ./lightpanda-x86_64-linux
$ ./lightpanda-x86_64-linux -h
usage: ./lightpanda-x86_64-linux [options] [URL]

  start Lightpanda browser

  * if an url is provided the browser will fetch the page and exit
  * otherwhise the browser starts a CDP server

  -h, --help      Print this help message and exit.
  --host          Host of the CDP server (default &quot;127.0.0.1&quot;)
  --port          Port of the CDP server (default &quot;9222&quot;)
  --timeout       Timeout for incoming connections of the CDP server (in seconds, default &quot;3&quot;)
  --dump          Dump document in stdout (fetch mode only)"><pre># <span>Download the binary</span>
$ <span>wget https://github.com/lightpanda-io/browser/releases/download/nightly/lightpanda-x86_64-linux</span>
$ <span>chmod a+x ./lightpanda-x86_64-linux</span>
$ <span>./lightpanda-x86_64-linux -h</span>
<span>usage: ./lightpanda-x86_64-linux [options] [URL]</span>

<span>  start Lightpanda browser</span>

<span>  * if an url is provided the browser will fetch the page and exit</span>
<span>  * otherwhise the browser starts a CDP server</span>

<span>  -h, --help      Print this help message and exit.</span>
<span>  --host          Host of the CDP server (default "127.0.0.1")</span>
<span>  --port          Port of the CDP server (default "9222")</span>
<span>  --timeout       Timeout for incoming connections of the CDP server (in seconds, default "3")</span>
<span>  --dump          Dump document in stdout (fetch mode only)</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Dump an URL</h3><a id="user-content-dump-an-url" aria-label="Permalink: Dump an URL" href="#dump-an-url"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="$ ./lightpanda-x86_64-linux --dump https://lightpanda.io
info(browser): GET https://lightpanda.io/ http.Status.ok
info(browser): fetch script https://api.website.lightpanda.io/js/script.js: http.Status.ok
info(browser): eval remote https://api.website.lightpanda.io/js/script.js: TypeError: Cannot read properties of undefined (reading 'pushState')
<!DOCTYPE html>"><pre>$ <span>./lightpanda-x86_64-linux --dump https://lightpanda.io</span>
<span>info(browser): GET https://lightpanda.io/ http.Status.ok</span>
<span>info(browser): fetch script https://api.website.lightpanda.io/js/script.js: http.Status.ok</span>
<span>info(browser): eval remote https://api.website.lightpanda.io/js/script.js: TypeError: Cannot read properties of undefined (reading 'pushState')</span>
<span>&lt;!DOCTYPE html&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Start a CDP server</h3><a id="user-content-start-a-cdp-server" aria-label="Permalink: Start a CDP server" href="#start-a-cdp-server"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="$ ./lightpanda-x86_64-linux --host 127.0.0.1 --port 9222
info(websocket): starting blocking worker to listen on 127.0.0.1:9222
info(server): accepting new conn..."><pre>$ <span>./lightpanda-x86_64-linux --host 127.0.0.1 --port 9222</span>
<span>info(websocket): starting blocking worker to listen on 127.0.0.1:9222</span>
<span>info(server): accepting new conn...</span></pre></div>
<p dir="auto">Once the CDP server started, you can run a Puppeteer script by configuring the
<code>browserWSEndpoint</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="'use scrict'

import puppeteer from 'puppeteer-core';

// use browserWSEndpoint to pass the Lightpanda's CDP server address.
const browser = await puppeteer.connect({
  browserWSEndpoint: &quot;ws://127.0.0.1:9222&quot;,
});

// The rest of your script remains the same.
const context = await browser.createBrowserContext();
const page = await context.newPage();

await page.goto('https://wikipedia.com/');

await page.close();
await context.close();"><pre><span>'use scrict'</span>

<span>import</span> <span>puppeteer</span> <span>from</span> <span>'puppeteer-core'</span><span>;</span>

<span>// use browserWSEndpoint to pass the Lightpanda's CDP server address.</span>
<span>const</span> <span>browser</span> <span>=</span> <span>await</span> <span>puppeteer</span><span>.</span><span>connect</span><span>(</span><span>{</span>
  <span>browserWSEndpoint</span>: <span>"ws://127.0.0.1:9222"</span><span>,</span>
<span>}</span><span>)</span><span>;</span>

<span>// The rest of your script remains the same.</span>
<span>const</span> <span>context</span> <span>=</span> <span>await</span> <span>browser</span><span>.</span><span>createBrowserContext</span><span>(</span><span>)</span><span>;</span>
<span>const</span> <span>page</span> <span>=</span> <span>await</span> <span>context</span><span>.</span><span>newPage</span><span>(</span><span>)</span><span>;</span>

<span>await</span> <span>page</span><span>.</span><span>goto</span><span>(</span><span>'https://wikipedia.com/'</span><span>)</span><span>;</span>

<span>await</span> <span>page</span><span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
<span>await</span> <span>context</span><span>.</span><span>close</span><span>(</span><span>)</span><span>;</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build from sources</h2><a id="user-content-build-from-sources" aria-label="Permalink: Build from sources" href="#build-from-sources"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<p dir="auto">Lightpanda is written with <a href="https://ziglang.org/" rel="nofollow">Zig</a> <code>0.13.0</code>. You have to
install it with the right version in order to build the project.</p>
<p dir="auto">Lightpanda also depends on
<a href="https://github.com/lightpanda-io/zig-js-runtime/">zig-js-runtime</a> (with v8),
<a href="https://www.netsurf-browser.org/" rel="nofollow">Netsurf libs</a> and
<a href="https://microsoft.github.io/mimalloc" rel="nofollow">Mimalloc</a>.</p>
<p dir="auto">To be able to build the v8 engine for zig-js-runtime, you have to install some libs:</p>
<p dir="auto">For Debian/Ubuntu based Linux:</p>
<div data-snippet-clipboard-copy-content="sudo apt install xz-utils \
    python3 ca-certificates git \
    pkg-config libglib2.0-dev \
    gperf libexpat1-dev \
    cmake clang"><pre><code>sudo apt install xz-utils \
    python3 ca-certificates git \
    pkg-config libglib2.0-dev \
    gperf libexpat1-dev \
    cmake clang
</code></pre></div>
<p dir="auto">For MacOS, you only need cmake:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Install and build dependencies</h3><a id="user-content-install-and-build-dependencies" aria-label="Permalink: Install and build dependencies" href="#install-and-build-dependencies"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">All in one build</h4><a id="user-content-all-in-one-build" aria-label="Permalink: All in one build" href="#all-in-one-build"></a></p>
<p dir="auto">You can run <code>make install</code> to install deps all in one (or <code>make install-dev</code> if you need the development versions).</p>
<p dir="auto">Be aware that the build task is very long and cpu consuming, as you will build from sources all dependancies, including the v8 Javascript engine.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Step by step build dependancy</h4><a id="user-content-step-by-step-build-dependancy" aria-label="Permalink: Step by step build dependancy" href="#step-by-step-build-dependancy"></a></p>
<p dir="auto">The project uses git submodules for dependencies.</p>
<p dir="auto">To init or update the submodules in the <code>vendor/</code> directory:</p>

<p dir="auto"><strong>Netsurf libs</strong></p>
<p dir="auto">Netsurf libs are used for HTML parsing and DOM tree generation.</p>

<p dir="auto">For dev env, use <code>make install-netsurf-dev</code>.</p>
<p dir="auto"><strong>Mimalloc</strong></p>
<p dir="auto">Mimalloc is used as a C memory allocator.</p>

<p dir="auto">For dev env, use <code>make install-mimalloc-dev</code>.</p>
<p dir="auto">Note: when Mimalloc is built in dev mode, you can dump memory stats with the
env var <code>MIMALLOC_SHOW_STATS=1</code>. See
<a href="https://microsoft.github.io/mimalloc/environment.html" rel="nofollow">https://microsoft.github.io/mimalloc/environment.html</a>.</p>
<p dir="auto"><strong>zig-js-runtime</strong></p>
<p dir="auto">Our own Zig/Javascript runtime, which includes the v8 Javascript engine.</p>
<p dir="auto">This build task is very long and cpu consuming, as you will build v8 from sources.</p>
<div data-snippet-clipboard-copy-content="make install-zig-js-runtime"><pre><code>make install-zig-js-runtime
</code></pre></div>
<p dir="auto">For dev env, use <code>make iinstall-zig-js-runtime-dev</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Test</h2><a id="user-content-test" aria-label="Permalink: Test" href="#test"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Unit Tests</h3><a id="user-content-unit-tests" aria-label="Permalink: Unit Tests" href="#unit-tests"></a></p>
<p dir="auto">You can test Lightpanda by running <code>make test</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Web Platform Tests</h3><a id="user-content-web-platform-tests" aria-label="Permalink: Web Platform Tests" href="#web-platform-tests"></a></p>
<p dir="auto">Lightpanda is tested against the standardized <a href="https://web-platform-tests.org/" rel="nofollow">Web Platform
Tests</a>.</p>
<p dir="auto">The relevant tests cases are committed in a <a href="https://github.com/lightpanda-io/wpt">dedicated repository</a> which is fetched by the <code>make install-submodule</code> command.</p>
<p dir="auto">All the tests cases executed are located in the <code>tests/wpt</code> sub-directory.</p>
<p dir="auto">For reference, you can easily execute a WPT test case with your browser via
<a href="https://wpt.live/" rel="nofollow">wpt.live</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Run WPT test suite</h4><a id="user-content-run-wpt-test-suite" aria-label="Permalink: Run WPT test suite" href="#run-wpt-test-suite"></a></p>
<p dir="auto">To run all the tests:</p>

<p dir="auto">Or one specific test:</p>
<div data-snippet-clipboard-copy-content="make wpt Node-childNodes.html"><pre><code>make wpt Node-childNodes.html
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Add a new WPT test case</h4><a id="user-content-add-a-new-wpt-test-case" aria-label="Permalink: Add a new WPT test case" href="#add-a-new-wpt-test-case"></a></p>
<p dir="auto">We add new relevant tests cases files when we implemented changes in Lightpanda.</p>
<p dir="auto">To add a new test, copy the file you want from the <a href="https://github.com/web-platform-tests/wpt">WPT
repo</a> into the <code>tests/wpt</code> directory.</p>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> Please keep the original directory tree structure of <code>tests/wpt</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Lightpanda accepts pull requests through GitHub.</p>
<p dir="auto">You have to sign our <a href="https://github.com/lightpanda-io/browser/blob/main/CLA.md">CLA</a> during the pull request process otherwise
we're not able to accept your contributions.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why?</h2><a id="user-content-why" aria-label="Permalink: Why?" href="#why"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Javascript execution is mandatory for the modern web</h3><a id="user-content-javascript-execution-is-mandatory-for-the-modern-web" aria-label="Permalink: Javascript execution is mandatory for the modern web" href="#javascript-execution-is-mandatory-for-the-modern-web"></a></p>
<p dir="auto">In the good old days, scraping a webpage was as easy as making an HTTP request, cURL-like. It’s not possible anymore, because Javascript is everywhere, like it or not:</p>
<ul dir="auto">
<li>Ajax, Single Page App, infinite loading, “click to display”, instant search, etc.</li>
<li>JS web frameworks: React, Vue, Angular &amp; others</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Chrome is not the right tool</h3><a id="user-content-chrome-is-not-the-right-tool" aria-label="Permalink: Chrome is not the right tool" href="#chrome-is-not-the-right-tool"></a></p>
<p dir="auto">If we need Javascript, why not use a real web browser? Take a huge desktop application, hack it, and run it on the server. Hundreds or thousands of instances of Chrome if you use it at scale. Are you sure it’s such a good idea?</p>
<ul dir="auto">
<li>Heavy on RAM and CPU, expensive to run</li>
<li>Hard to package, deploy and maintain at scale</li>
<li>Bloated, lots of features are not useful in headless usage</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Lightpanda is built for performance</h3><a id="user-content-lightpanda-is-built-for-performance" aria-label="Permalink: Lightpanda is built for performance" href="#lightpanda-is-built-for-performance"></a></p>
<p dir="auto">If we want both Javascript and performance in a true headless browser, we need to start from scratch. Not another iteration of Chromium, really from a blank page. Crazy right? But that’s we did:</p>
<ul dir="auto">
<li>Not based on Chromium, Blink or WebKit</li>
<li>Low-level system programming language (Zig) with optimisations in mind</li>
<li>Opinionated: without graphical rendering</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Status</h2><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<p dir="auto">Lightpanda is still a work in progress and is currently at a Beta stage.</p>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> You should expect most websites to fail or crash.</p>
<p dir="auto">Here are the key features we have implemented:</p>
<ul>
<li> HTTP loader</li>
<li> HTML parser and DOM tree (based on Netsurf libs)</li>
<li> Javascript support (v8)</li>
<li> Basic DOM APIs</li>
<li> Ajax
<ul>
<li> XHR API</li>
<li> Fetch API</li>
</ul>
</li>
<li> DOM dump</li>
<li> Basic CDP/websockets server</li>
</ul>
<p dir="auto">NOTE: There are hundreds of Web APIs. Developing a browser (even just for headless mode) is a huge task. Coverage will increase over time.</p>
<p dir="auto">You can also follow the progress of our Javascript support in our dedicated <a href="https://github.com/lightpanda-io/zig-js-runtime#development">zig-js-runtime</a> project.</p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>