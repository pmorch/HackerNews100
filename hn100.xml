<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 12 Jan 2025 04:30:12 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Adobe Lightroom's AI Remove feature added a Bitcoin to bird in flight photo (160 pts)]]></title>
            <link>https://bsky.app/profile/matthewraifman.bsky.social/post/3lfaqbygva22j</link>
            <guid>42670132</guid>
            <pubDate>Sun, 12 Jan 2025 00:33:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bsky.app/profile/matthewraifman.bsky.social/post/3lfaqbygva22j">https://bsky.app/profile/matthewraifman.bsky.social/post/3lfaqbygva22j</a>, See on <a href="https://news.ycombinator.com/item?id=42670132">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Stop Trying to Schedule a Call with Me (223 pts)]]></title>
            <link>https://matduggan.com/stop-trying-to-schedule-a-call-with-me/</link>
            <guid>42669754</guid>
            <pubDate>Sat, 11 Jan 2025 23:20:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://matduggan.com/stop-trying-to-schedule-a-call-with-me/">https://matduggan.com/stop-trying-to-schedule-a-call-with-me/</a>, See on <a href="https://news.ycombinator.com/item?id=42669754">Hacker News</a></p>
Couldn't get https://matduggan.com/stop-trying-to-schedule-a-call-with-me/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Obvious things C should do (120 pts)]]></title>
            <link>https://www.digitalmars.com/articles/Cobvious.html</link>
            <guid>42669637</guid>
            <pubDate>Sat, 11 Jan 2025 22:58:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.digitalmars.com/articles/Cobvious.html">https://www.digitalmars.com/articles/Cobvious.html</a>, See on <a href="https://news.ycombinator.com/item?id=42669637">Hacker News</a></p>
Couldn't get https://www.digitalmars.com/articles/Cobvious.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Matt Mullenweg deactivates WordPress accounts of contributors planning a fork (311 pts)]]></title>
            <link>https://techcrunch.com/2025/01/11/matt-mullenweg-deactivates-wordpress-accounts-of-contributors-planning-a-fork/</link>
            <guid>42667766</guid>
            <pubDate>Sat, 11 Jan 2025 18:14:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2025/01/11/matt-mullenweg-deactivates-wordpress-accounts-of-contributors-planning-a-fork/">https://techcrunch.com/2025/01/11/matt-mullenweg-deactivates-wordpress-accounts-of-contributors-planning-a-fork/</a>, See on <a href="https://news.ycombinator.com/item?id=42667766">Hacker News</a></p>
Couldn't get https://techcrunch.com/2025/01/11/matt-mullenweg-deactivates-wordpress-accounts-of-contributors-planning-a-fork/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[De-smarting the Marshall Uxbridge Bluetooth speaker (240 pts)]]></title>
            <link>https://tomscii.sig7.se/2025/01/De-smarting-the-Marshall-Uxbridge</link>
            <guid>42666572</guid>
            <pubDate>Sat, 11 Jan 2025 15:42:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tomscii.sig7.se/2025/01/De-smarting-the-Marshall-Uxbridge">https://tomscii.sig7.se/2025/01/De-smarting-the-Marshall-Uxbridge</a>, See on <a href="https://news.ycombinator.com/item?id=42666572">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article itemscope="" itemtype="http://schema.org/BlogPosting">
  
  <div itemprop="articleBody">
    <!--more-->

<p><strong>This is the story of a commercially unavailable <em>stereo pair</em> of the
bi-amped Marshall Uxbridge, with custom-built replacement electronics:
active filters feeding two linear power amps. Listening to this
high-fidelity set has brought me immense enjoyment. Play a great album
on these near-fields, and the result is close to pure magic! Over and
above the accurate reproduction of a wide audio range, the precision
and depth of its stereo imaging is stunning.</strong></p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/muxbridge-pair.jpg"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/muxbridge-pair-thumb.jpg" alt=""></a><br>
<em>Odd socks, rock’n’roll! (click to enlarge)</em></p>

<p>Dumpster diving electronics is a way of life, which sometimes brings
great moments of joy.  One of these moments happened when I stumbled
upon… the <a href="https://duckduckgo.com/?q=marshall+uxbridge&amp;iax=images&amp;ia=images">Marshall Uxbridge
Voice</a>,
a smart speaker, in seemingly pristine condition. And not just one,
but <em>two</em> of them! One was black, the other white. What a find!</p>

<p>What to do with these babies? Intrigued by the question “what could be
wrong with them, why would someone throw them out like that?” –
I set out to investigate. Plugging in one of them, after a few seconds
of waiting, a female voice was heard: <em>«NOW IN SETUP MODE. FOLLOW THE
INSTRUCTIONS IN YOUR DEVICE’S COMPANION APP.»</em></p>

<p>Sounded like a command: clear, loud and demanding. But no, that won’t
happen. Instead, let’s see if we can use this gadget as a plain old
Bluetooth speaker?  Yes indeed! With the help of <code>blueman-manager</code>, I
was able to hook it up to my Linux desktop (running Debian stable, as
ever) and select it as a speaker output. And it worked, and music
filled the room!</p>

<p>I was delighted, and immediately impressed by the sound quality. The
low end was punchy and deep, much deeper than the modest dimensions
led me to believe. The high end was crisp and detailed. Good drivers,
I thought, and a good amp – there’s got to be some iron and
copper inside, no wonder the thing is quite heavy! I liked it even
though the sound reminded me of the “disco smile” (hollowed out mids),
but I chalked that up to overly consumer-friendly default EQ
settings. Maybe it can be improved.</p>

<p>The other device was similarly well functioning. I still could not
believe my luck. Why would anyone throw out these excellent
Bluetooth-enabled, powered speakers? They are doing such a great job!</p>

<p>Being in the market for a couple high-end speakers, I started to
fantasize about making a stereo pair out of these two.  Is that even
possible? Probably not out of the box, as I could only
Bluetooth-connect one at a time with the computer.  While listening to
a video, I also learned that the speaker added some 300ms of delay
(compared to my wired headphones), which could be compensated, but was
going to be a pain nevertheless. I had no idea if it came from the
Bluetooth link or further processing in the “smart” speaker.  Probably
both. And any small differences between the latencies of two devices
would certainly destroy the stereo imaging, if I ever got that to
work…</p>

<p>Then the bland female voice suddenly came in over the music again,
loud and clear: <em>«CONNECTION UNSUCCESSFUL. CHECK YOUR APP FOR
INSTRUCTIONS AND TRY AGAIN.»</em> Oh my poor ears! And there goes my
listening experience!  <em>Don’t you dare open your filthy mouth again!</em></p>

<p>At that moment I knew I was not into <em>smart speakers</em>. Or at least not
into the smartness. The speakers were good. Oh, they were excellent!
But they had to be <em>de-smarted</em>. Preferably with a single, dumb,
analog RCA line input on their backs, so nobody but me gets to decide
over the program material. That way I could also drive them as a
stereo pair. No Bluetooth, no latency, no female robot overlord, just
a good old-fashioned line input!</p>

<p>Seems like a modest ask. Can we have it? Well, time to look inside!</p>

<h2 id="inside-the-uxbridge">Inside the Uxbridge</h2>

<p>Opening the enclosure by removing the backplate is a matter of pulling
the six ordinary Phillips screws on the back. Then, the box can be
pried open with some thin lever (screwdriver edge) – it fits
snugly and is made even tighter with some air-tight foam.</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/original-innards.jpg"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/original-innards-thumb.jpg" alt=""></a><br>
<em>Original innards (click to enlarge)</em></p>

<p>The main electronics is on a board fastened to the back; it receives
power from a separate PSU hidden under the woofer via the big JST plug
(disconnected in the photo); the two smaller (connected) JST plugs
connect to the woofer and tweeter (red and white, respectively). There
are a couple flexible flat cables connecting to auxiliary boards
hosting the volume and tone controls (plus the mics and push-buttons)
on the top, and four RGB LEDs at the bottom of the front plate. I had
to disconnect some of these, as well as the JST power plug, so as to
take the above photo.</p>

<p>The main board comes with a smaller daughter board with <em>Linkplay</em>
written on it. This is supposedly an <a href="https://w.dspconcepts.com/reference-designs/amlogic-a113x-smart-speaker">OEM
module</a>
for wireless connectivity and the “smarts” of the speaker: it contains
an Amlogic A113X SoC, memory chips plus wireless module. The daughter
board slides into an edge connector (not entirely unlike PCIe) on the
main board. From the radio module, wires run off to two rectangular
patch antennas fastened near opposite upper corners of the backplane.
All wiring is covered in foam, and apparent care has been taken to
make the enclosure air-tight.</p>

<p>The audio amplifier itself is built around an ESMT AD85050. This
48-pin device is apparently a knock-off of <a href="https://www.ti.com/product/TAS5727">some class D power
amplifiers</a>, with rather <a href="http://www.micro-bridge.com/data/ESMT/AD85050.pdf">scarce
documentation</a> of
its own. It is employed in a two channel configuration, with separate
power amplifiers dedicated to both drivers. These, both the tweeter
and the woofer, measure close to 4Ω.</p>

<p>Looking at the circuit boards in some detail (and using a connectivity
checker), it becomes apparent that the I<sup>2</sup>C control, the
I<sup>2</sup>S two-channel digital audio stream and the 3.3V power all
come from the daughter board. Which, unfortunately, is also the source
of that vexing female robot commander voice.</p>

<p>Can we use the electronics? That depends on whether we are able to
oust the resident voice of terror, and get hold of an analog input.
Initially, I was hopeful, and felt that discarding everything between
the PSU and the speakers, including a ready-made power amp already
coupled to the speakers, would be a waste. As a first experiment, I
removed the daughter board.  Nothing worked – but in light of my
earlier findings, I was not surprised. So then, assuming I cut the
I<sup>2</sup>S lines to mute the damn robot, would it be possible to
somehow inject an analog input to the (otherwise digital) amp?</p>

<p>With an “I’m feeling lucky” attitude, I somehow managed to solder some
very thin wires connecting to the ESMT chip’s LINP, LINN and AGND
lines in the hope of finding out. In case you were wondering, these
are supposed to act as analog differential inputs for the power
amplifier’s “left” channel (non-inverting and inverting, plus analog
ground). As a first step, I tried asymetrically driving LINP (with
LINN tied to ground). Nothing came out of the speaker; evidently,
there is ample built-in fault-protection and shutdown mechanisms built
into the ESMT chip to combat such abuse.</p>

<p>Next, using an op-amp on a breadboard, I attached a very temporary
symmetrical driving circuit on the inputs. This did the trick of
making sound come out, and it did sound pretty good (no obvious noise,
distortion or interference), except that only the woofer was driven.
Ah, of course! The tweeter is wired to the other (“right”) channel! So
I would need to supply <em>two</em> symmetrical audio inputs to drive this
amp.  These would preferably be driven by an active loudspeaker filter
circuit that limits the frequency range for each driver.</p>

<p>Considering the need for so many “patch” wires and the prospect of
stuffing additional electronics into an already cramped box, this
route seemed less than optimal. I also briefly played with the thought
of keeping the digital-input amplifier; capturing the configuration
sent to it via I<sup>2</sup>C and duplicating that from some
microcontroller; then coming up with some way to drive the
I<sup>2</sup>S digital audio input… somehow. Replace the daughter
board? But too many unknowns remained, and I felt constrained by
choices already made by others.</p>

<h2 id="going-all-in">Going all-in</h2>

<p>At the same time, the initially dismissed prospect of completely
replacing the electronics started to look attractive. If I need to
build a bunch of active filter circuits to separate the frequency
bands <em>before</em> the power amps, sure I can add two power amps to that
lot… and throw out the existing board! Which is not especially
small, so there is plenty of real estate for its replacement.</p>

<p>And on the plus side, I could get rid of the idle power consumption of
a full-blown embedded computer system (complete with Bluetooth/WiFi
radio, so less EM pollution and potential interference), and less
dissipated heat (I could sense the closed back of the idling Uxbridge
get warm after half an hour or so). What’s not to like?</p>

<p>So let’s establish some requirements:</p>
<ul>
  <li>The PSU supplies 18V DC. The whole system needs to be single-supply.</li>
  <li>Analog RCA line input on the back. Air-tight construction.</li>
  <li>Active pre-amp filter with the customary crossover of about
2&nbsp;kHz.</li>
  <li>Possibly some further audio equalization / speaker compensation.</li>
  <li>Two power amplifiers, one for the woofer and one for the tweeter.</li>
  <li>Output impedance (both amps): 4Ω.</li>
  <li>Non-obvious thermal constraints: dissipation in a hermetically
sealed box…?</li>
  <li>Obvious mechanical constraints (board size and JST connectors).</li>
</ul>

<p>The first step in the circuit design (with the constraints on DC power
input and speaker impedance set in place) was to find a suitable power
amplifier architecture with actual, existing components. After very
little searching, I settled on the
<a href="https://git.hq.sig7.se/muxbridge-biamp.git/blob_plain/HEAD:/doc/contrib/LM1875.pdf">LM1875T</a>
which seemed like a safe bet and promised high-end audio quality.  The
datasheet even has a reference circuit for single-supply operation.</p>

<p>Next, I decided on the crossover filters. Again, after a little
reading up on this subject, I found no reason to search beyond the
ubiquitous 4-th order
<a href="https://linkwitzlab.com/filters.htm">Linkwitz-Riley</a> filter
architecture (two cascaded, identical Sallen-Key low-pass or high-pass
filters to provide a steepness of 24&nbsp;dB/octave) with the
theoretical advantage of the channels neatly summing to 0&nbsp;dB (in
phase) throughout the crossover range.</p>

<p>What op-amp to use? I picked the
<a href="https://git.hq.sig7.se/muxbridge-biamp.git/blob_plain/HEAD:/doc/contrib/LM833.pdf">LM833</a>,
not too expensive but quite capable with its 15&nbsp;MHz
gain-bandwidth, 7&nbsp;V/μs slew rate and 4.5&nbsp;nV/√Hz
voltage noise. This is certainly a low noise, high speed op-amp when
targeting the audio range, and as it is a dual op-amp, we can build a
complete Linkwitz-Riley high-pass or low-pass filter out of a single
piece.</p>

<h2 id="the-complete-circuit">The complete circuit</h2>

<p>At this point, there is nothing left to do but <a href="https://tomscii.sig7.se/images/muxbridge-biamp/rest.jpg">draw the rest of the
fucking owl</a>, so that is exactly
what I did. The complete schematic is available as a
<a href="https://git.hq.sig7.se/muxbridge-biamp.git/blob_plain/HEAD:/doc/schematic.pdf">PDF</a>;
below I will highlight the functional blocks one by one.</p>

<p>At all times, keep in mind that we are building an analog circuit with
op-amps, customarily fed with symmetrical supplies (with ground in the
middle). Due to the existing power supply, we need to make the whole
thing run from a single supply with respect to ground, and that is not
how these circuits are usually drawn. It’s a technical detail, but an
important one!</p>

<p>For this exact reason, let’s start with the virtual grounds for
supporting single supply operation:</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-vgnd.png"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-vgnd-thumb.jpg" alt=""></a><br>
<em>Virtual ground circuitry (click to enlarge)</em></p>

<p>We could be more fancy and use an active device (a dedicated
“rail-splitter” like the
<a href="https://www.ti.com/product/TLE2426">TLE2426</a>, or just a regular
op-amp) to lower the source impedances driving these grounds, but in
practice, given the tiny loads, a well bypassed, moderate impedance
source will do just fine. With a non-obvious CAVEAT: For preserving
adequate separation between the woofer and tweeter signal paths (or,
rather, preventing cross-talk via the virtual ground), we use two
separate virtual grounds, each dedicated to one signal path.</p>

<p>The single power rail VCC itself comes directly from the PSU connector
J1; it supplies the three op-amps, each decoupled with a 100&nbsp;nF
poly capacitor:</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-power.png"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-power-thumb.jpg" alt=""></a><br>
<em>Power input; op-amp supply &amp; decoupling (click to enlarge)</em></p>

<p>These are sort of trivial details, and are customarily omitted when
presenting analog circuits. It is important not to forget about
them. With these out of the way, let’s look at the meatier parts of
the circuit.</p>

<h2 id="active-filters">Active filters</h2>

<p>The incoming signal is AC-coupled into the circuit via C1, after which
R1 and R2 set the DC level to mid-supply (our virtual ground) for the
signal to ride from there on. C2, together with R3 and the source
impedance driving the line input, forms a first-order low-pass filter
(f<sub>c</sub>&nbsp;≈&nbsp;50&nbsp;kHz assuming a source
impedance of 600&nbsp;Ω) to eliminate any RF interference just
before the signal reaches the input follower U1A, which drives the
rest of the filter circuits with low impedance.</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-filters.png"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-filters-thumb.jpg" alt=""></a><br>
<em>Input buffer &amp; active filter schematics (click to enlarge)</em></p>

<p>From here, the signal feeds two downstream signal paths. The upper
one, built around U2B and U2A, consists of two cascaded Sallen-Key
high-pass filters forming a 4-th order Linkwitz-Riley high-pass with
24&nbsp;dB/octave steepness below its corner frequency. The passive
component values are optimized to allow realisation with uniform
values of commonly available high-quality polymer capacitors, and
relatively small-value resistors in order to keep thermal noise
contributions as low as feasible. This path ends in the signal TWR_IN,
driving the tweeter’s power amplifier.</p>

<p>The lower signal path begins with a low-shelving filter around U1B,
augmented with the divider-degenerating capacitor C7 to roll off DC
response to unity. The purpose of this shelving filter is to provide
emphasis towards the woofer’s lower end, in order to compensate its
inevitable rolloff. The component values are the result of simulation
and real-world tuning (as described below).</p>

<p>The bass-enhanced signal then goes through a Linkwitz-Riley low-pass
filter (around U3A and U3B), a close counterpart to the tweeter HPF.
Component values were guided by the same optimization criteria. The
LPF comes last so as to attenuate the noise of preceding stages. The
resulting signal WFR_IN drives the woofer’s power amplifier.</p>

<p>Note the nodes labeled VGNDT on R5 and R7: these are tied to a virtual
ground dedicated to tweeter-side circuitry, set at half-supply.  This
ensures correct single-supply operation of U2B and U2A, as well as
correct DC level on TWR_IN. In the woofer path, the equivalent circuit
points can be tied to the real ground, as the DC level on the “cold”
side of the capacitors C10 and C12 has no influence on the filter’s
operation. The DC level on WFR_IN is determined by the R1/R2 divider
right at the input; the whole signal path up to WFR_IN is DC-coupled
(with a DC transfer of unity) from there.</p>

<h3 id="spice-simulation">SPICE simulation</h3>

<p>To validate the above circuit, I first built a simulation model in the
excellent <a href="https://xschem.sourceforge.io/index.html">XSchem</a>, and
asked <a href="https://ngspice.sourceforge.io/">ngspice</a> to compute the
frequency and phase response on both outputs.</p>

<p><img src="https://tomscii.sig7.se/images/muxbridge-biamp/spice-ac.png" alt=""><br>
<em>AC simulation: magnitude and phase response of filter outputs</em></p>

<p>The (electrical) crossover frequency is 2&nbsp;kHz, with some slight
bump in the summed output (as evidenced by each channel being a bit
over -6&nbsp;dB). The <em>real</em> (acoustical) response will, however, also
be affected by driver response. According to listening tests, the
woofer’s high-frequency roll-off roughly compensates the “electrical”
bump in the crossover area.</p>

<p>What about the phase difference between the woofer and tweeter signal
paths? According to SPICE, at the crossover frequency the tweeter
output phase lags the woofer output by ~19°. That is equivalent to a
delay of 19/360 times one cycle duration at 2&nbsp;kHz, which works
out to around 26&nbsp;μs. Factoring in the speed of sound
(340&nbsp;m/s), this (electronic) delay is equivalent to an acoustic
propagation path difference of about 9&nbsp;mm.</p>

<p>In other words, the difference in signal propagation across the two
filters is equivalent to the tweeter being 9&nbsp;mm farther away from
the listener than the woofer. In reality, the tweeter is going to be a
bit closer to the listener, because the speakers will land on a table
below head height, and the tweeter is mounted higher up in the
enclosure. The exact geometry can vary quite a bit, but the geometric
path difference will be in the ballpark – <em>but with opposite
sign!</em></p>

<p>As a consequence, the filter delay does not pose a problem; on the
contrary, it might actually help the drivers’ sound waves arrive
perfectly in-phase around the crossover frequency. Given the inexact
nature of this problem (unknown variations in driver characteristics,
plus the uncontrolled acoustic environment), we won’t bother with a
delay compensator (allpass filter). It’s bound to be close to
“perfect” anyway.</p>

<h2 id="power-amplifiers">Power amplifiers</h2>

<p>The power amps for the tweeter and woofer are principally identical,
themselves closely following the single supply reference circuit in
the
<a href="https://git.hq.sig7.se/muxbridge-biamp.git/blob_plain/HEAD:/doc/contrib/LM1875.pdf">LM1875T</a>
datasheet. The voltage gain is set to 10 (via R16/R15 and R20/R19),
the lowest gain with guaranteed stability. A higher gain is not
desired, because the line input would then become overly sensitive
(its useful range, given the practical limitations on output volume,
would be too low).</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-power-amp.png"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/schematic-power-amp-thumb.jpg" alt=""></a><br>
<em>Power amplifier schematics (click to enlarge)</em></p>

<p>Between the amps, only capacitors differ in two positions. In both
cases, we exploit the fact that the tweeter amp, given its useful
frequency range, can get away with higher corner frequencies. The
feedback loop degeneration caps C15 and C20 roll off the gain to unity
at DC; here, C15 can be made significantly smaller than its
counterpart.  Similarly, the output coupling (DC-blocking) capacitors
C17 and C22 form high-pass filters together with the load impedance,
where we can again get away with a much higher corner frequency
(smaller capacitance) in the tweeter amp. We do not max out this
possibility (see the respective f<sub>c</sub> annotations), only to
the extent that a significantly cheaper and smaller component can be
used.  We choose high-quality capacitors specifically intended for
audio applications.</p>

<p>If you looked real close, you might have noticed one more discrepancy
across the amps: opposite polarities of output connectors J3 and J4.
That’s right, and reflect the fact that the Uxbridge driver cables
have their JST connectors crimped with opposite polarities; however,
both our amps are “straight” so one of them needs to have its output
polarity reversed.</p>

<p>What kind of output power can we expect? The PSU just clears the lower
end of the LM1875 supply range, so it’s going to be on the low
end. The low driver impedance (4Ω) certainly helps a bit.
Between the datasheet and some back of the envelope calculations, I
expect about 5W of peak output power per driver (in practice, this
applies to the woofer only; the tweeter will always be driven with
much less power).  That might seem low, but in practice, it is plenty
for near-field listening in a quiet room. Thankfully, the low supply
voltage also keeps dissipation down – a couple watts at most,
and a mere fraction of a watt idling.</p>

<h2 id="prototyping-and-tuning">Prototyping and tuning</h2>

<p>To validate the design in actual reality, I built a breadboard version
of the complete circuit, from line input to the actual speakers. To
ferret out any possible incompatibility, I powered it from the actual
Uxbridge PSU removed from one of the units.  This unit became my test
harness: I removed the original electronics, extended the speaker
wires and led them out via a small hole on the backplane (left in
place of the Bluetooth button). I fastened the backplane in place and
did my best to close the hole (with speaker wires protruding) using
some tape. This way I could evaluate circuit performance with the real
(non-ideal) speaker loads, together with real acoustics, and tune the
filters after listening to music and pure sine tones. I was also able
to A/B test, going back and forth between my circuit driving the
prepared (closed) enclosure and the other complete, intact Uxbridge
unit via Bluetooth.</p>

<p>I still haven’t built my first real DDS VFO / signal generator
instrument (it’s in the pipeline, should be complete any year now…).
For the time being, I reached for a “virtual” one by playing sine
frequencies via online tone generators (<a href="https://tonegen.net/">first</a>,
<a href="https://onlinetonegenerator.com/frequency-sweep-generator.html">second</a>).
I used them to establish general sanity, verify driver polarities, and
equalize levels through the crossover range. I also tuned the woofer
rolloff compensation filter with this method; I got satisfactory
results down to about 35&nbsp;Hz, which is on par with the original
unit. The upper end? Limited by my hearing abilities… N.B.: All
tuning and fiddling is already reflected in the circuits presented
above.</p>

<p>Speaking of A/B tests: I also listened to lots of music, mostly
assorted tracks and albums I enjoy and have been listening to all my
life across a wide range of equipment and acoustic environments. I
carefully compared the sound of the speakers; in a couple days, I
reached the point where I preferred the sound of the new circuit. I
believe it gives a flatter, more precise response especially in the
midrange, where the original Uxbridge sounded hollow. I’m no fan of
the “disco smile”; I prefer the mid to have some real bite.</p>

<p>Another reason I wanted a full prototype was to get a grip on the
thermal situation. Having done those back of the envelope estimates, I
was still quite uncertain about the amount of heat I could expect the
LM1875’s to dissipate, and wanted to gauge heatsink temperatures (with
the scientific “finger method”) both while idle and with realistic
listening volumes. My estimates were validated; the TO-220 heating
fins I planned for (and prototyped with) only got seriously warm at a
loudness level I could not hope to sustain without creating “social
problems”. Good, because there is not much point in putting a bigger
heatsink into the air-tight enclosure…</p>

<p>Apart from the sorry fact that I was listening in mono (and in a bad
way: only hearing one of the stereo channels!), everything seemed
rather promising. Now comes the part which is, by now, a routine job:
casting the circuit into permanent form by designing a professional
PCB.</p>

<h2 id="pcb-design">PCB design</h2>

<p>This is a small-ish analog circuit, and we have plenty of real estate!
We only need to match board size and hole patterns. We could go
high-tech and use SMT components, and easily reduce the PCB area by a
factor of two… but why bother?  All the components are readily
available, plugged into the breadboard. I would prefer to use them.</p>

<p>The complexity of this design is so low that the board is, in effect,
single layer. Almost all wiring is on the component side, the rest of
which is filled with a ground plane. The solder side is a complete
ground plane (except a single, short copper bridge connecting VCC
between C18 and C19). This double-sided, massive ground plane
contributes to the low noise and high performance of this amplifier.
A bunch of thermal vias under the heatsinks help the PCB take its part
in spreading and dissipating heat.</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/pcb.png"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/pcb-thumb.jpg" alt=""></a><br>
<em>Printed circuit board (click to enlarge)</em></p>

<p>The dimensions are about half of the original panel – call me a
dinosaur, but I see no need to <a href="https://tomscii.sig7.se/2024/03/SMT-and-the-ultimate-LCD-SPI-interface">design with
SMT</a> (requiring a
stencil mask for applying the paste) to make it even smaller!</p>

<p>Below, a side-by-side comparison of the new dumb analog dinosaur and
the original, fully digital smart technology:</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/panels-new-old.jpg"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/panels-new-old-thumb.jpg" alt=""></a><br>
<em>Electronics, new vs. old (click to enlarge)</em></p>

<h2 id="connectors-and-mechanics">Connectors and mechanics</h2>

<p>Given the already crimped plugs on the PSU and speaker cables, I
naturally wanted to keep the connectors on the new panel identical.
The DC power connector was easily identified as JST-VH, and I had no
trouble buying it. On the other hand, it took me some time to identify
the speaker connectors as JST-XA. Worse, my local parts store did not
carry it. The dimensions of the XA are rather similar to the more
common JST-XH, except for the pin spacing (2.5 vs. 2.54&nbsp;mm, not a
big deal on a 2-pin connector). A more important detail is that the XH
lacks the XA’s locking mechanism.  In the end, I prototyped with XH
(mating with the XA counterparts on the speaker wires). Eventually, I
de-soldered the XA sockets from the original boards so I could solder
them into my PCBs.</p>

<p>For the audio input, I picked a 2-pin JST-PH connector (2&nbsp;mm
pitch), using a matching plug with a pre-crimped short pair of wires.
The bare ends were soldered to the female panel-mount RCA connector
conveniently fastened into the backplane hole
(⌀&nbsp;=&nbsp;6.5&nbsp;mm) formerly occupied by the Bluetooth
button. The back of the RCA connector was filled with hot glue to make
it air-tight.</p>

<p>When the time has come to assemble my born-again speakers, it became
clear that there was some obstacle preventing the back side from
settling into place. At first, I feared the biggest capacitor (C22)
colliding with the woofer magnet (during the design process, I
convinced myself there was enough clearance, but now got the scare
– my 3D skills suck!).  Finally, it turned out that omitting the
small cut-out on the board outline (visible on the left edge of the
original panel) was a mistake. That space was taken by the plastic
stem receiving the middle-left Phillips screw (looking from behind the
box). The issue is clearly visible in the below photo (look at the
middle hole along the left edge):</p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/backplane-assembly.jpg"><img src="https://tomscii.sig7.se/images/muxbridge-biamp/backplane-assembly-thumb.jpg" alt=""></a><br>
<em>New panel in its place: can you spot the bug? (click to enlarge)</em></p>

<p><a href="https://tomscii.sig7.se/images/muxbridge-biamp/backplane-assembly-2.jpg">Another image</a> of
the second unit, exhibiting the same issue.</p>

<p>Well, out with the rasping set! I managed to remove just enough
material (about 2&nbsp;mm) from the plastic stem down to the required
depth to make space for the PCB edge. Plastic filings carefully
vacuumed out of the box. Success, with footnotes (there are <em>always</em>
footnotes)!</p>

<h2 id="conclusion">Conclusion</h2>

<p>In the past several weeks, I listened and re-listened to many of my
long-time favourite albums and all I can say is, I absolutely love the
sound of this pair of odd socks!  The listening experience is on par
with, or easily surpasses, any stereo I ever had (and I’ve had a few).
Even though I don’t have the means to measure, in the first hours of
listening I felt a dramatic step up in fidelity from the original
Uxbridge. I am convinced that tuning the active filters with the
speakers in the loop has given me a superior frequency response, and
the linear power amps at low power are likely to have less noise and
distortion. The sharp stereo imaging is another sign of high fidelity.
The fact that I got these “from the bin” for free (at least the
enclosures, power supplies and drivers) gives me a smile each time I
turn them on.</p>

<p>It appears that analog electronics in the audio range is more or less
a solved problem: discounting the obvious extremities of high power
(hundreds of watts) or really miniscule signal levels (microvolts), it
is not too difficult to create, with contemporary semiconductors, a
simple circuit charting seriously audiophile territory!</p>

<p>As always, the sources of this article (in this case, the KiCAD
hardware design plus XSchem workspace and ngspice simulation files)
are <a href="https://git.hq.sig7.se/muxbridge-biamp.git">published online</a>
with everything licensed under the terms of the very permissive MIT
license.</p>


  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: TypeScript/React/Vue Window Layout Manager (Tabs, Floating, Popouts) (237 pts)]]></title>
            <link>https://github.com/mathuo/dockview</link>
            <guid>42666492</guid>
            <pubDate>Sat, 11 Jan 2025 15:31:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/mathuo/dockview">https://github.com/mathuo/dockview</a>, See on <a href="https://news.ycombinator.com/item?id=42666492">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
<p dir="auto"><h2 tabindex="-1" dir="auto">dockview</h2><a id="user-content-dockview" aria-label="Permalink: dockview" href="#dockview"></a></p>
<p dir="auto">Zero dependency layout manager supporting tabs, groups, grids and splitviews. Supports React, Vue and Vanilla TypeScript</p>
</div>
<hr>
<p dir="auto"><a href="https://www.npmjs.com/package/dockview" rel="nofollow"><img src="https://camo.githubusercontent.com/b3abfd21f5412229945ac452a4a9a1cf43afff3bf2b7e0fc8a51e736e07d6957/68747470733a2f2f62616467652e667572792e696f2f6a732f646f636b766965772e737667" alt="npm version" data-canonical-src="https://badge.fury.io/js/dockview.svg"></a>
<a href="https://www.npmjs.com/package/dockview" rel="nofollow"><img src="https://camo.githubusercontent.com/5ef1ae305fbf0e93605185ae7e681df2c517ec66b9a82967c924efe8525a2bab/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f646f636b76696577" alt="npm" data-canonical-src="https://img.shields.io/npm/dm/dockview"></a>
<a href="https://github.com/mathuo/dockview/actions?query=workflow%3ACI"><img src="https://github.com/mathuo/dockview/workflows/CI/badge.svg" alt="CI Build"></a>
<a href="https://sonarcloud.io/summary/overall?id=mathuo_dockview" rel="nofollow"><img src="https://camo.githubusercontent.com/290f766799c5c4b9d17db671992adad56c6d586207dc416ba5844d82332f26d3/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6d617468756f5f646f636b76696577266d65747269633d636f766572616765" alt="Coverage" data-canonical-src="https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&amp;metric=coverage"></a>
<a href="https://sonarcloud.io/summary/overall?id=mathuo_dockview" rel="nofollow"><img src="https://camo.githubusercontent.com/f5b1d1e9d93827e6b1f42a3861da644843ffeefbad1561143db0ab05f1dc77ac/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6d617468756f5f646f636b76696577266d65747269633d616c6572745f737461747573" alt="Quality Gate Status" data-canonical-src="https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&amp;metric=alert_status"></a>
<a href="https://bundlephobia.com/result?p=dockview" rel="nofollow"><img src="https://camo.githubusercontent.com/74986b2c390e2f9cd4c4607d9370f71bae318cdd7fc4738947b60bb110a561c2/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f646f636b76696577" alt="Bundle Phobia" data-canonical-src="https://badgen.net/bundlephobia/minzip/dockview"></a></p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mathuo/dockview/blob/master/packages/docs/static/img/splashscreen.gif"><img src="https://github.com/mathuo/dockview/raw/master/packages/docs/static/img/splashscreen.gif" alt="" data-animated-image=""></a></p>
<p dir="auto">Please see the website: <a href="https://dockview.dev/" rel="nofollow">https://dockview.dev</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Serialization / deserialization with full layout management</li>
<li>Support for split-views, grid-views and 'dockable' views</li>
<li>Themeable and customizable</li>
<li>Tab and Group docking / Drag n' Drop</li>
<li>Popout Windows</li>
<li>Floating Groups</li>
<li>Extensive API</li>
<li>Supports Shadow DOMs</li>
<li>High test coverage</li>
<li>Documentation website with live examples</li>
<li>Transparent builds and Code Analysis</li>
<li>Security at mind - verifed publishing and builds through GitHub Actions</li>
</ul>
<p dir="auto">Want to verify our builds? Go <a href="https://www.npmjs.com/package/dockview#Provenance" rel="nofollow">here</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: A Better Log Service (138 pts)]]></title>
            <link>https://txtlog.net/</link>
            <guid>42666139</guid>
            <pubDate>Sat, 11 Jan 2025 14:34:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://txtlog.net/">https://txtlog.net/</a>, See on <a href="https://news.ycombinator.com/item?id=42666139">Hacker News</a></p>
Couldn't get https://txtlog.net/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Track your devices via Apple FindMy network in Go/TinyGo (268 pts)]]></title>
            <link>https://github.com/hybridgroup/go-haystack</link>
            <guid>42665367</guid>
            <pubDate>Sat, 11 Jan 2025 12:14:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/hybridgroup/go-haystack">https://github.com/hybridgroup/go-haystack</a>, See on <a href="https://news.ycombinator.com/item?id=42665367">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">go-haystack</h2><a id="user-content-go-haystack" aria-label="Permalink: go-haystack" href="#go-haystack"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/hybridgroup/go-haystack/blob/main/images/go-haystack.png"><img src="https://github.com/hybridgroup/go-haystack/raw/main/images/go-haystack.png" alt="Go Haystack gopher"></a></p>
<p dir="auto">Go Haystack lets you track personal Bluetooth devices via Apple's massive <a href="https://developer.apple.com/find-my/" rel="nofollow">"Find My"</a> network.</p>
<p dir="auto">It uses <a href="https://github.com/seemoo-lab/openhaystack">OpenHaystack</a> together with <a href="https://github.com/dchristl/macless-haystack">Macless-Haystack</a> to help you setup a custom FindMy network with tools written in Go/TinyGo. No Apple hardware required!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/hybridgroup/go-haystack/blob/main/images/macless-haystack.png"><img src="https://github.com/hybridgroup/go-haystack/raw/main/images/macless-haystack.png" alt="image of macless-haystack web UI"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build Your Own Beacon</h2><a id="user-content-build-your-own-beacon" aria-label="Permalink: Build Your Own Beacon" href="#build-your-own-beacon"></a></p>
<p dir="auto">This package provides firmware written using <a href="https://tinygo.org/" rel="nofollow">TinyGo</a> and the <a href="https://github.com/tinygo-org/bluetooth">TinyGo Bluetooth package</a>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/hybridgroup/go-haystack/blob/main/images/tinygo-beacons.jpg"><img src="https://github.com/hybridgroup/go-haystack/raw/main/images/tinygo-beacons.jpg" alt="tinygo beacons"></a></p>
<p dir="auto">As a result, any of the following hardware devices should work:</p>
<ul dir="auto">
<li>Adafruit Bluefruit boards using nRF SoftDevice - <a href="https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#adafruit-bluefruit-boards">https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#adafruit-bluefruit-boards</a></li>
<li>BBC Microbit using nRF SoftDevice - <a href="https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#bbc-microbit">https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#bbc-microbit</a></li>
<li>Other Nordic Semi SoftDevice boards - <a href="https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#flashing-the-softdevice-on-other-boards">https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#flashing-the-softdevice-on-other-boards</a></li>
<li>Boards using the NINA-FW with an ESP32 co-processor - <a href="https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#esp32-nina">https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#esp32-nina</a></li>
<li>Boards such as the RP2040 Pico-W using the CYW43439 co-processor - <a href="https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#cyw43439-rp2040-w">https://github.com/tinygo-org/bluetooth?tab=readme-ov-file#cyw43439-rp2040-w</a></li>
</ul>
<p dir="auto">You can also run the beacon code on any Linux that has Bluetooth hardware, such as a Raspberry Pi or other embedded system.</p>
<p dir="auto">The beacon code is located in the <a href="https://github.com/hybridgroup/go-haystack/blob/main/firmware">firmware</a> directory.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">TinyScan</h2><a id="user-content-tinyscan" aria-label="Permalink: TinyScan" href="#tinyscan"></a></p>
<p dir="auto">Go Haystack also includes TinyScan, a hardware scanner for local devices.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/hybridgroup/go-haystack/blob/main/images/tinyscan.gif"><img src="https://github.com/hybridgroup/go-haystack/raw/main/images/tinyscan.gif" alt="tinyscan" data-animated-image=""></a></p>
<p dir="auto">TinyScan runs on several different microcontrollers boards with Bluetooth and miniature displays, such as those made by <a href="https://www.adafruit.com/" rel="nofollow">Adafruit</a> and <a href="https://shop.pimoroni.com/" rel="nofollow">Pimoroni</a></p>
<p dir="auto">The TinyScan code is located in the <a href="https://github.com/hybridgroup/go-haystack/blob/main/tinyscan">tinyscan</a> directory in this repository.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to install</h2><a id="user-content-how-to-install" aria-label="Permalink: How to install" href="#how-to-install"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Apple ID</h3><a id="user-content-apple-id" aria-label="Permalink: Apple ID" href="#apple-id"></a></p>
<p dir="auto">You must have an Apple-ID with 2FA enabled. Only sms/text message as second factor is supported!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">anisette-v3-server</h3><a id="user-content-anisette-v3-server" aria-label="Permalink: anisette-v3-server" href="#anisette-v3-server"></a></p>
<p dir="auto">Start <a href="https://github.com/Dadoum/anisette-v3-server"><code>anisette-v3-server</code></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker network create mh-network
docker run -d --restart always --name anisette -p 6969:6969 --volume anisette-v3_data:/home/Alcoholic/.config/anisette-v3 --network mh-network dadoum/anisette-v3-server"><pre>docker network create mh-network
docker run -d --restart always --name anisette -p 6969:6969 --volume anisette-v3_data:/home/Alcoholic/.config/anisette-v3 --network mh-network dadoum/anisette-v3-server</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">macless-haystack</h3><a id="user-content-macless-haystack" aria-label="Permalink: macless-haystack" href="#macless-haystack"></a></p>
<ol dir="auto">
<li>Start and set up your Macless Haystack endpoint in interactive mode:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it --restart unless-stopped --name macless-haystack -p 6176:6176 --volume mh_data:/app/endpoint/data --network mh-network christld/macless-haystack"><pre>docker run -it --restart unless-stopped --name macless-haystack -p 6176:6176 --volume mh_data:/app/endpoint/data --network mh-network christld/macless-haystack</pre></div>
<p dir="auto"><h6 tabindex="-1" dir="auto">You will be asked for your Apple-ID, password and your 2FA. If you see <code>serving at port 6176 over HTTP</code> you have all set up correctly</h6><a id="user-content-you-will-be-asked-for-your-apple-id-password-and-your-2fa-if-you-see-serving-at-port-6176-over-http-you-have-all-set-up-correctly" aria-label="Permalink: You will be asked for your Apple-ID, password and your 2FA. If you see serving at port 6176 over HTTP you have all set up correctly" href="#you-will-be-asked-for-your-apple-id-password-and-your-2fa-if-you-see-serving-at-port-6176-over-http-you-have-all-set-up-correctly"></a></p>
<p dir="auto">Hit ctrl-C to exit the process once it has been configured.</p>
<ol start="2" dir="auto">
<li>Restart the macless-haystack server</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="docker restart macless-haystack"><pre>docker restart macless-haystack</pre></div>
<p dir="auto">See <a href="https://github.com/dchristl/macless-haystack/blob/main/README.md#server-setup">https://github.com/dchristl/macless-haystack/blob/main/README.md#server-setup</a> for the original instructions.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">go-haystack</h3><a id="user-content-go-haystack-1" aria-label="Permalink: go-haystack" href="#go-haystack-1"></a></p>
<p dir="auto">Install the go-haystack command line tool</p>
<div dir="auto" data-snippet-clipboard-copy-content="go install github.com/hybridgroup/go-haystack/cmd/haystack@latest"><pre>go install github.com/hybridgroup/go-haystack/cmd/haystack@latest</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to use</h2><a id="user-content-how-to-use" aria-label="Permalink: How to use" href="#how-to-use"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Scanning for local devices</h3><a id="user-content-scanning-for-local-devices" aria-label="Permalink: Scanning for local devices" href="#scanning-for-local-devices"></a></p>

<p dir="auto">Should return any local devices within range:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ haystack scan                                                                                                             
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
FE:B0:67:9B:9A:5C -55 feb0679b9a5c55b1141c5cc6c8f65224ae9bc6bc2d998ccf5c56a02d - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
FE:B0:67:9B:9A:5C -56 feb0679b9a5c55b1141c5cc6c8f65224ae9bc6bc2d998ccf5c56a02d - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
FE:B0:67:9B:9A:5C -56 feb0679b9a5c55b1141c5cc6c8f65224ae9bc6bc2d998ccf5c56a02d - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full"><pre>$ haystack scan                                                                                                             
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
FE:B0:67:9B:9A:5C -55 feb0679b9a5c55b1141c5cc6c8f65224ae9bc6bc2d998ccf5c56a02d - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
FE:B0:67:9B:9A:5C -56 feb0679b9a5c55b1141c5cc6c8f65224ae9bc6bc2d998ccf5c56a02d - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full
FE:B0:67:9B:9A:5C -56 feb0679b9a5c55b1141c5cc6c8f65224ae9bc6bc2d998ccf5c56a02d - battery full
CE:8B:AD:5F:8A:02 -53 ce8bad5f8a0271538ff5afda87498cb067e9a020d6e4167801d55d83 - battery full</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Adding a new device</h3><a id="user-content-adding-a-new-device" aria-label="Permalink: Adding a new device" href="#adding-a-new-device"></a></p>
<ol dir="auto">
<li>Generate keys for a device</li>
</ol>

<p dir="auto">The keys will be saved in a file named <code>DEVICENAME.keys</code> and the configuration file for Haystack will be saved in <code>DEVICENAME.json</code>. Replace "DEVICENAME" with whatever you want to name the actual device.</p>
<ol start="2" dir="auto">
<li>Flash the hardware with the TinyGo target and the name of your device.</li>
</ol>
<p dir="auto">For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="haystack flash DEVICENAME nano-rp2040"><pre>haystack flash DEVICENAME nano-rp2040</pre></div>
<p dir="auto">This will use TinyGo to compile the firmware using your keys, and then flash it to the device. See <a href="https://tinygo.org/getting-started/overview/" rel="nofollow">https://tinygo.org/getting-started/overview/</a> for more information about TinyGo.</p>
<ol start="3" dir="auto">
<li>Upload the JSON file for that device to your running instance of <code>macless-haystack</code> using the web UI.</li>
</ol>
<p dir="auto">Point your web browser to <a href="https://dchristl.github.io/macless-haystack/" rel="nofollow"><code>https://dchristl.github.io/macless-haystack/</code></a> which is a single-page web application that only reads/writes local data. Click on the link for "Accessories", then on the "+" button. Choose the <code>DEVICENAME.json</code> file for your device.</p>
<p dir="auto">That's it, your device is now setup.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Objects in your data may be closer than they appear</h2><a id="user-content-objects-in-your-data-may-be-closer-than-they-appear" aria-label="Permalink: Objects in your data may be closer than they appear" href="#objects-in-your-data-may-be-closer-than-they-appear"></a></p>
<p dir="auto">Eventually, if your device is in range of any iPhone, they will appear in your Macless-Haystack data in the web UI.</p>
<p dir="auto">Note that it might take a while for the first data to show up.</p>
<p dir="auto">Have fun, be good!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The State of Vim (146 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/1002342/a8d8a17f30968b93/</link>
            <guid>42665222</guid>
            <pubDate>Sat, 11 Jan 2025 11:42:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/1002342/a8d8a17f30968b93/">https://lwn.net/SubscriberLink/1002342/a8d8a17f30968b93/</a>, See on <a href="https://news.ycombinator.com/item?id=42665222">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>The death of Bram Moolenaar, <a href="https://www.vim.org/">Vim</a>
founder and benevolent dictator for life (BDFL), in 2023 sent a shock
through the community, and raised concern about the future of the
project. At <a href="https://vimconf.org/">VimConf</a> 2024 in
November, current Vim maintainer Christian Brabandt delivered a
keynote on "<q>the new Vim project</q>" that detailed how the
community has reorganized itself to continue maintaining Vim and what
the future looks like.</p> <h4>Vim after Bram</h4>

<p>Brabandt began with his history with Vim: he has been involved in
Vim since&nbsp;2006, and said his first commit to the project was made
in the&nbsp;7.0/7.1 days (sometime around 2006). He started by
contributing small patches and fixes, and then contributed larger
features such as the <a href="https://vimhelp.org/visual.txt.html#gn"><tt>gn</tt> and
<tt>gN</tt> commands</a>, which combine searching and visual-mode
selection, improved cryptographic support using <a href="https://doc.libsodium.org/"><tt>libsodium</tt></a>, 
maintained the Vim <a href="https://appimage.org/">AppImage</a>, and
more. He said he became less active in the project around 2022 due to
personal and work-related reasons.</p>

<p>That changed in August&nbsp;2023, when
Moolenaar <a href="https://lwn.net/Articles/940551/">passed
away</a>. Moolenaar had been the maintainer of Vim for more than&nbsp;30
years; while he had added Brabandt and Ken Takata as
co-maintainers of Vim in the years before, most development still
flowed through him. With his death, a considerable amount of
knowledge was lost—but Brabandt and others stepped up to keep the
project alive.</p>

<blockquote>
<b>No slop, all substance: subscribe to LWN today</b>
<p>
LWN has always been about quality over quantity; we need your help
to continue publishing in-depth, reader-focused articles about Linux
and the free-software community. Please subscribe today to support our work
and keep LWN on the air; we are offering <a href="https://lwn.net/Promo/no-slop/claim">a free one-month trial subscription</a> to get you started.
</p></blockquote>


<p>Moolenaar was the only owner of the Vim GitHub organization at the
time, so only his account could change certain
settings. Initially, contributors tried to use the GitHub <a href="https://github.com/github/docs/blob/main/content/site-policy/other-site-policies/github-deceased-user-policy.md">deceased
user policy</a> to add owners to the organization. That was quite an
involved process, and it soon became apparent that the end result
would be the deactivation of Moolenaar's account. Having Moolenaar's
account be accessible by his family was important, so they abandoned
that approach, and instead the family granted access to it as needed
for organizational changes.</p>

<p>Charles Campbell (known as "<a href="http://www.drchip.org/astronaut/vim/index.html">Dr Chip</a>"), a
Vim contributor for more than&nbsp;25 years also decided to retire
soon after Moolenaar's death. His departure was followed by an
expansion of the team of maintainers, as Yegappan Lakshmanan joined
it, with Dominique Pellé, Doug Kearns, and GitHub users "glepnir",
"mattn", and "zeertzjq" joining soon after.</p>

<h4>More than just the source code</h4>

<p>He stressed that maintaining Vim is not just about the source
code. There are quite a few other things to be managed, such as the
Vim web site, FTP server, security disclosures, Vim communities on
other sites such as <a href="https://www.reddit.com/r/vim/">Reddit</a> and
<a href="https://vi.stackexchange.com/">Stack Exchange</a>, and
more.</p>

<p>Vim's site needed work. The design, and most of the code,
had been unchanged for quite a while—until 2023, it was based on
PHP&nbsp;5. In recent times, there had been a few occasions where the
web site was unstable, and so he started looking for a new host
in&nbsp;2024. The move involved an upgrade to PHP&nbsp;8, for which
some of the code had to be rewritten. Brabandt thanked Mark
Schöchlin, who stepped up to take care of all this.</p>

<p>He acknowledged that the design has been pretty much unchanged
since&nbsp;2001, doesn't look modern, and can be scary to new
users. There has been some work on redesigning it, but the first
attempt hasn't been that successful. He prioritizes consistency and
does not wish to scare away longtime users.</p>

<p>DNS was also troublesome—the <tt>vim.org</tt>
domain was managed by Stefan Zehl, but Moolenaar also owned a number
of other domains such as <tt>vim8.org</tt>, <tt>vim9.org</tt>,
etc. Thankfully, SSL certificates were already managed using Let's
Encrypt, so Brabandt had no problems there. Several email addresses, such as
<tt>bram@vim.org</tt>, <tt>bugs@vim.org</tt>, etc., were
forwarded to Moolenaar's personal email; those have since been updated
to point to Brabandt's address instead. The FTP server was hosted by
<a href="https://nluug.nl/">NLUUG</a>, but he decided to retire
it and says that he hasn't received any complaints so far.</p>

<h4>ICCF Holland</h4>

<p>As readers might know, Vim is <a href="https://vimhelp.org/uganda.txt.html#license">charityware</a>,
and the charity of choice is <a href="https://iccf-holland.org/">ICCF
Holland</a>, founded by Moolenaar. Brabandt said that the ICCF is very
much alive, and plans to reorganize and restructure itself. Quite a
few users started donating after Moolenaar's passing, and
in&nbsp;2023, it raised about €90,000. The project plans to continue
to work with ICCF and doesn't want to change ICCF's association with
Vim. He noted that there is no sponsorship for the maintainers, all of
whom are working for free. Traditionally, all money raised has been
given to the ICCF and he has no plans to change that. Brabandt
said he earns enough from his job that he doesn't need assistance to
work on Vim, so he's happy to let all donations go to ICCF.</p>

<p>As an incentive to donate, Moolenaar had allowed people who donated
to ICCF to vote on Vim feature requests. Donors to the ICCF could link
to their Vim.org account when donating, and then vote on
features. This is one aspect that he no longer sees a need for,
now that issues and enhancements are discussed on GitHub, and so has
decided to shut this down. Linking the accounts and donations was also
not easy for Brabandt—he was not sure how Moolenaar did this in
the past.</p>

<h4>Communication channels</h4>

<p>He also talked about the community centered around the Vim
mailing lists, which are hosted on Google Groups. In May&nbsp;2024,
he <a href="https://groups.google.com/g/vim_use/c/skARx2yAEWc/m/U69NrKAgAgAJ">received
an automated message</a> from Google informing him that all
content from the vim-dev list had been blocked due to spam or
malware. This caused a fair bit of trouble, and while it was
restored in around a day or so, he still does not know what the
exact problem was. There has been some consideration of self-hosting the
list, but one drawback is that everyone would have to sign up
again. The mailing list is no longer that active now, with more of the
community conversations happening on Reddit or Stack Exchange.</p>

<p>Security reporting had to be addressed as well. A couple of years
ago, people were reporting issues on <a href="https://huntr.com/repos/vim/vim">the Huntr platform</a>. There
were quite a few open issues which have since been taken care
of. Huntr was acquired by another company in&nbsp;2023, which
refocused it entirely on AI and shut down general open-source
vulnerability reporting.</p>

<p>Now, Vim is accepting security reports via email or <a href="https://github.com/vim/vim/security">GitHub</a>, and publishing
vulnerabilities via GitHub security advisories. There is a
private mailing list for as-yet unpublished security issues, and
emails are forwarded to all maintainers. Brabandt has started adding a
<tt>[security]</tt> tag to commit messages for marking security fixes,
and such commits are announced on the <tt>oss-security</tt> list (the
<a href="https://lwn.net/ml/all/ZwKwrSltz1Zj7wCR@256bit.org">most
recent</a> being from October) and
to maintainers of distribution packages.</p>

<h4>Maintenance mode</h4>

<p>Brabandt then showed the contribution graph, to demonstrate that
development did not stop after Moolenaar passed away. There was a
slowdown as Moolenaar's health deteriorated, and then a spike as
he cleaned up the open pull requests (PRs). <a href="https://www.vim.org/vim-9.1-released.php">Version&nbsp;9.1</a>,
dedicated to Moolenaar, was released on
January&nbsp;2,&nbsp;2024—about four months after his
passing.</p>

<p>The&nbsp;9.1 release included improvements to <a href="https://vimhelp.org/textprop.txt.html#virtual-text">virtual text</a> (which
enables completion suggestions and such to appear in the
editing area, while not being part of the actual text), smooth
scrolling, and OpenVMS support. After&nbsp;9.1, he started adding
more potentially controversial changes, such as support
for <a href="https://specifications.freedesktop.org/basedir-spec/latest/">the
XDG base directory specification</a>. Now Vim does not need to litter
your top-level home directory: <tt>~/.vimrc</tt>
or
<tt>~/.vim/vimrc</tt> still work, but <a href="https://vimhelp.org/starting.txt.html#xdg-vimrc"><tt>$XDG_CONFIG_HOME/vim/vimrc</tt></a>
will now work if neither of the above are present. Another such
change is Wayland support. It is not complete yet, and he says he is
not sure whether remaining problems with clipboard support are Vim bugs or 
Wayland ones.</p>

<p>As he went through the backlog of PRs, he started developing
a policy for merging PRs, prioritizing the need to test things well.
Tests are now running with continuous integration (CI). He said that
it's also important to have good documentation.</p>

<p>Vim has interfaces to quite a few languages, including
Python&nbsp;2 and&nbsp;3, Ruby, Lua, Tcl, and MzScheme. But Brabandt
isn't sure which of these are really needed these days. For example,
Python&nbsp;2, Tcl, and MzScheme (which does not build
with the latest version of the language) might need to be retired to
reduce the maintenance burden. Other areas to improve include the GUI
(GTK&nbsp;4 has been around for a while, <a href="https://github.com/vim/vim/issues/8038">but Vim does not use
it</a> yet), support for advanced terminal features, and better spell
checking (which has largely remained unchanged since
Vim&nbsp;7). Support for the <a href="https://en.wikipedia.org/wiki/Tree-sitter_%28parser_generator%29">tree-sitter</a>
parser generator is wished-for, but it is controversial, and he does not see it coming to Vim soon.</p>

<p>He knows there have been some significant changes in Neovim, but
he's not sure how many of those can come to Vim. There have been small
changes in Vim, but for major changes, you need community support. He
does not want to make backward-incompatible changes and is quite
hesitant to merge changes that might break things. He said he has to
keep in the mind the whole picture, especially the expectations of
users, when dealing with PRs. Currently, he said that Vim is
more-or-less in maintenance mode.</p>

<p>He said he has created an internal repository to keep track of
stakeholders and to ensure that if something were to happen to him,
other maintainers could pick up where he left off.</p>

<p>Brabandt recommended that those new to the project 
start by making small contributions and becoming familiar with
the codebase. He had some pointers for developers. He said it is
important to use a defensive style with C to ensure that new bugs
aren't being introduced. One should use <a href="https://scan.coverity.com/">Coverity</a>, a static-analysis
tool, to scan for defects. Some parts of the Vim codebase are complex,
he said, and need to be refactored into more manageable units if
possible.</p>

<p>Maintaining Vim is a full-time job, he said, and it is not only
about maintaining the code, but also the community—managing
expectations and listening to users' needs. He has to understand the
community: what does it want Vim to be? An IDE? Bug-for-bug
compatibility with old Vim? How can we
make <a href="https://vimhelp.org/vim9.txt.html#Vim9-script">Vim9 script</a>, the
new Vim scripting language, more widely used? How can we ensure that the
Vim community remains healthy? He ended his talk by thanking all
the Vim contributors and then took a few questions.</p>

<h4>Questions</h4>

<p>One audience member asked about the difference between Vim and
Neovim's maintenance model. Since most PRs are still merged by
Brabandt, would that make him the new <a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life">BDFL</a> for Vim?</p>

<p>Brabandt emphatically denied being a BDFL. Currently, he merges
most changes because the version number has to be incremented with
each change, so multiple people merging can introduce
conflicts. However, when he was on vacation, he handed over the main
maintainership to Lakshmanan. He emphasized that it's a community
project, and he listens to the community before making decisions. It
just happens that at this time the other maintainers don't want to
merge changes themselves and instead defer to Brabandt, which is fine
with him.</p>

<p>Another member of the audience wondered about language barriers,
since there are many Japanese members of the Vim community as well as
many languages in Europe, etc. Brabandt answered that, as an
international project, the primary language for working on Vim is
English. He also noted that it is easier these days to collaborate
across languages thanks to ChatGPT and translation tools, but it still
happens that some users do not communicate in English well, and that
makes it harder to understand their needs.</p>

<h4>The rest of VimConf 2024</h4>

<p>VimConf was <a href="https://vimconf.org/2013/">first held in&nbsp;2013</a> by the
Japanese Vim user group <a href="https://vim-jp.org/">vim-jp</a>. Since then, the group has organized
it every year, until&nbsp;2020 when VimConf was canceled due to COVID.
After a hiatus, it resumed in&nbsp;2023 with a scaled-down version. The
full-fledged edition returned to Akihabara, Tokyo on
November&nbsp;23,&nbsp;2024.</p>

<p>Even though most of the organizers and
attendees are Japanese, VimConf strives to be welcoming to
all. Presentation materials are expected to be in English, and live
translation is provided in both Japanese and English for keynotes and
regular presentations, except for lightning talks. PDFs for the talks
are available on <a href="https://vimconf.org/2024/">VimConf's
website</a>, and all of the talks are now on <a href="https://www.youtube.com/playlist?list=PLx8bw5NQypsmPvVXXRVmF7bvCjFKv1MuN">YouTube</a>.</p><br clear="all"><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Archives/GuestIndex/">GuestArticles</a></td><td><a href="https://lwn.net/Archives/GuestIndex/#Mohanan_Murukesh">Mohanan, Murukesh</a></td></tr>
            </tbody></table><br clear="all">

               <br clear="all">
               <hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ingrid Daubechies Awarded National Medal of Science (130 pts)]]></title>
            <link>https://today.duke.edu/2025/01/ingrid-daubechies-awarded-national-medal-science</link>
            <guid>42664893</guid>
            <pubDate>Sat, 11 Jan 2025 10:35:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://today.duke.edu/2025/01/ingrid-daubechies-awarded-national-medal-science">https://today.duke.edu/2025/01/ingrid-daubechies-awarded-national-medal-science</a>, See on <a href="https://news.ycombinator.com/item?id=42664893">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>President Joe Biden also announced that Duke alumnus and former trustee chair David Rubenstein will receive the Presidential Medal of Freedom, and Kristina Johnson, the former dean of the Pratt School of Engineering, will receive the National Medal of Technology and Innovation.</p><p>In addition, Duke alumni Eleanor Smeal and Ted Kaufman received the Presidential Citizens Medal.</p><p>The Medal of Freedom is the country’s highest civilian honor. Rubenstein and 18 others will be presented the award in a White House ceremony on Saturday.</p><p>A University Medal winner, Rubenstein, T’70,  has made a mark at Duke and across the country with his philanthropy. He has supported the restoration of historic landmarks and cultural institutions, including the Kennedy Center and Monticello. </p><p>Johnson, a pioneer in applications of liquid crystals, including micro displays for high-definition projection television, served as Pratt dean from 1999 to 2007. She left Duke to become provost of Johns Hopkins University and has also served as chancellor of the State University of New York and president of Ohio State University.</p><p>Women’s rights activist Eleanor Smeal, ’61, is the former president of the National Organization for Women. She received a Duke honorary degree in 1991.</p><p>Ted Kaufman, E ’60, was honored for his national service, including as U.S. senator from Delaware. Kaufman taught classes at Duke in law, public policy and business.  He served as co-chair of Duke’s Center for the Study of the Congress from 1995-99.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PrivTracker – Private BitTorrent tracker for everyone (152 pts)]]></title>
            <link>https://privtracker.com/</link>
            <guid>42664409</guid>
            <pubDate>Sat, 11 Jan 2025 08:49:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://privtracker.com/">https://privtracker.com/</a>, See on <a href="https://news.ycombinator.com/item?id=42664409">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<h2>PrivTracker</h2>
		
		<p>
			PrivTracker allows to share torrent files just with your friends, nobody else.
			Unlike public trackers, it shares peers only within a group which is using the same Announce URL.
			It really works like a private tracker, but can be generated with one click of a button.
		</p>

		
		
		<h2>How to create private torrent?</h2>
		<h3>Using <a href="https://transmissionbt.com/" target="_blank">transmission</a> on Linux:</h3>
		<ul>
			<li>File <b>→</b> New…</li>
			<li>Select file to share</li>
			<li>In <b>Trackers</b> field enter <code>https://{{hostname}}/{{room}}/announce</code></li>
			<li>Select <b>Private torrent</b></li>
			<li>Click <b>New</b></li>
			<li>Click <b>Add</b> in next window</li>
			<li>Click <b>Open</b> to start seeding</li>
			<li>Done. Now you can send torrent file to your friends…</li>
		</ul>
		<p><img src="https://privtracker.com/new_torrent_gtk.png" alt="New Torrent screenshot"></p><h3>Using <a href="https://transmissionbt.com/" target="_blank">transmission</a> on Mac:</h3>
		<ul>
			<li>File <b>→</b> Create Torrent File…</li>
			<li>Select file to share</li>
			<li>Click <b>+</b> under <b>Trackers</b> field and enter <code>https://{{hostname}}/{{room}}/announce</code></li>
			<li>Select <b>Private</b>
			</li><li>Select <b>Open when created</b></li>
			<li>Click <b>Create</b></li>
			<li>Click <b>Add</b> to start seeding</li>
			<li>Done. Now you can send torrent file to your friends…</li>
		</ul>
		<p><img src="https://privtracker.com/new_torrent_mac.png" alt="New Torrent screenshot">

	</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nearly All Binary Searches and Mergesorts Are Broken (2006) (157 pts)]]></title>
            <link>https://research.google/blog/extra-extra-read-all-about-it-nearly-all-binary-searches-and-mergesorts-are-broken/</link>
            <guid>42664400</guid>
            <pubDate>Sat, 11 Jan 2025 08:46:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://research.google/blog/extra-extra-read-all-about-it-nearly-all-binary-searches-and-mergesorts-are-broken/">https://research.google/blog/extra-extra-read-all-about-it-nearly-all-binary-searches-and-mergesorts-are-broken/</a>, See on <a href="https://news.ycombinator.com/item?id=42664400">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-gt-id="rich_text" data-gt-component-name="" data-gt-publish-date="20060602">
    




    <div><p>I remember vividly Jon Bentley's first Algorithms lecture at CMU, where he asked all of us incoming Ph.D. students to write a binary search, and then dissected one of our implementations in front of the class. Of course it was broken, as were most of our implementations. This made a real impression on me, as did the treatment of this material in his wonderful <em>Programming Pearls</em> (Addison-Wesley, 1986; Second Edition, 2000). The key lesson was to carefully consider the invariants in your programs.</p><p>Fast forward to 2006. I was shocked to learn that the binary search program that Bentley proved correct and subsequently tested in Chapter 5 of <em>Programming Pearls</em> contains a bug. Once I tell you what it is, you will understand why it escaped detection for two decades. Lest you think I'm picking on Bentley, let me tell you how I discovered the bug: The version of binary search that I wrote for the JDK contained the same bug. It was reported to Sun recently when it broke someone's program, after lying in wait for nine years or so.</p><p>So what's the bug? Here's a standard binary search, in Java. (It's one that I wrote for the <code>java.util.Arrays</code>):</p></div>
<pre>1:     public static int binarySearch(int[] a, int key) {<br>2:         int low = 0;<br>3:         int high = a.length - 1;<br>4:<br>5:         while (low &lt;= high) {<br>6:             int mid = (low + high) / 2;<br>7:             int midVal = a[mid];<br>8:<br>9:             if (midVal &lt; key)<br>10:                 low = mid + 1<br>11:             else if (midVal &gt; key)<br>12:                 high = mid - 1;<br>13:             else<br>14:                 return mid; // key found<br>15:         }<br>16:         return -(low + 1);  // key not found.<br>17:     }</pre>
<p><br>The bug is in this line:</p>
<pre> 6:             int mid =(low + high) / 2;</pre>
<div><p>In <em>Programming Pearls</em> Bentley says that the analogous line "sets m to the average of l and u, truncated down to the nearest integer." On the face of it, this assertion might appear correct, but it fails for large values of the <code>int</code> variables <code>low</code> and <code>high</code>. Specifically, it fails if the sum of <code>low</code> and <code>high</code> is greater than the maximum positive <code>int</code> value (2<sup>31</sup> - 1). The sum overflows to a negative value, and the value stays negative when divided by two. In C this causes an array index out of bounds with unpredictable results. In Java, it throws <code>ArrayIndexOutOfBoundsException</code>.</p><p>This bug can manifest itself for arrays whose length (in elements) is 2<sup>30</sup> or greater (roughly a billion elements). This was inconceivable back in the '80s, when <em>Programming Pearls</em> was written, but it is common these days at Google and other places. In <em>Programming Pearls</em>, Bentley says "While the first binary search was published in 1946, the first binary search that works correctly for all values of <span>n</span> did not appear until 1962." The truth is, very few correct versions have ever been published, at least in mainstream programming languages.</p><p>So what's the best way to fix the bug? Here's one way:</p></div>
<pre> 6:             int mid = low + ((high - low) / 2);</pre>
<p><br>Probably faster, and arguably as clear is:</p>
<pre> 6:             int mid = (low + high) &gt;&gt;&gt; 1;</pre>
<p><br>In C and C++ (where you don't have the <code>&gt;&gt;&gt;</code> operator), you can do this:</p>
<pre> 6:             mid = ((unsigned int)low + (unsigned int)high)) &gt;&gt; 1;</pre>
<div><p>And now we <em>know</em> the binary search is bug-free, right? Well, we strongly suspect so, but we don't know. It is not sufficient merely to prove a program correct; you have to test it too. Moreover, to be really certain that a program is correct, you have to test it for all possible input values, but this is seldom feasible. With concurrent programs, it's even worse: You have to test for all internal states, which is, for all practical purposes, impossible.</p><p>The binary-search bug applies equally to mergesort, and to other divide-and-conquer algorithms. If you have any code that implements one of these algorithms, fix it now before it blows up. The general lesson that I take away from this bug is humility: It is hard to write even the smallest piece of code correctly, and our whole world runs on big, complex pieces of code.</p><p>We programmers need all the help we can get, and we should never assume otherwise. Careful design is great. Testing is great. Formal methods are great. Code reviews are great. Static analysis is great. But none of these things alone are sufficient to eliminate bugs: They will always be with us. A bug can exist for half a century despite our best efforts to exterminate it. We must program carefully, defensively, and remain ever vigilant.</p><p><span>Update 17 Feb 2008</span>: Thanks to Antoine Trux, Principal Member of Engineering Staff at Nokia Research Center Finland for pointing out that the original proposed fix for C and C++ (Line 6), was not guaranteed to work by the relevant C99 standard (<span>INTERNATIONAL STANDARD - ISO/IEC - 9899 - Second edition - 1999-12-01</span>, <a href="http://3.4.3.3/" target="_blank" rel="noopener noreferrer">3.4.3.3</a>), which says that if you add two signed quantities and get an overflow, the result is undefined. The older C Standard, C89/90, and the C++ Standard are both identical to C99 in this respect. Now that we've made this change, we <span>know</span> that the program is correct;)</p></div>
<h3>Resources</h3>

<ul>
<li><a href="https://dl.acm.org/doi/pdf/10.1145/358027.381121" target="_blank" rel="noopener noreferrer"><em>Programming Pearls</em></a> - Highly recommended. Get a copy today!</li>
<li><a href="http://www.google.com/url?sa=D&amp;q=http%3A%2F%2Fbugs.sun.com%2Fbugdatabase%2Fview_bug.do%3Fbug_id%3D5045582" target="_blank" rel="noopener noreferrer"> The Sun bug report describing this bug in the JDK</a></li>
<li><a href="http://www.google.com/url?sa=D&amp;q=http%3A%2F%2Fwww.di.unipi.it%2F%7Eruggieri%2FPapers%2Fsemisum.pdf" target="_blank" rel="noopener noreferrer"> A 2003 paper by Salvatore Ruggieri</a> discussing a related problem - The problem is a bit more general but perhaps less interesting: the average of two numbers of arbitrary sign. The paper does not discuss performance, and its solution is not fast enough for use in the inner loop of a mergesort.</li>
</ul>
</div></div>]]></description>
        </item>
    </channel>
</rss>