<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 04 Aug 2023 18:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[LK-99 is an online sensation – but replication efforts fall short (106 pts)]]></title>
            <link>https://www.nature.com/articles/d41586-023-02481-0</link>
            <guid>37001837</guid>
            <pubDate>Fri, 04 Aug 2023 16:02:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nature.com/articles/d41586-023-02481-0">https://www.nature.com/articles/d41586-023-02481-0</a>, See on <a href="https://news.ycombinator.com/item?id=37001837">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    <figure>
 <picture>
  <source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-023-02481-0/d41586-023-02481-0_25886824.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-023-02481-0/d41586-023-02481-0_25886824.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px">
  <img alt="A metal cube is floating above a superconducting magnet cooled by liquid nitrogen" loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-023-02481-0/d41586-023-02481-0_25886824.jpg">
  <figcaption>
   <p><span>A superconducting magnet is cooled by liquid nitrogen, producing a strong magnetic field that causes the magnet to levitate.</span><span>Credit: Patrick Gaillardin/LookAt Sciences/SPL</span></p>
  </figcaption>
 </picture>
</figure><p>A Korean team’s <a href="https://arxiv.org/abs/2307.12037" data-track="click" data-label="https://arxiv.org/abs/2307.12037" data-track-category="body text link">claim</a> to have discovered a superconductor that works at room temperature and ambient pressure has become a viral sensation — and prompted a slew of replication efforts by scientists and amateurs alike. But initial efforts to experimentally and theoretically reproduce the buzzworthy result have come up short, and researchers remain deeply sceptical.</p><p>The research team, led by Sukbae Lee and Ji-Hoon Kim at the start-up firm Quantum Energy Research Centre in Seoul said in preprints published on 25 July<sup><a href="#ref-CR1" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">1</a></sup><sup>,</sup><sup><a href="#ref-CR2" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">2</a></sup> that a compound of copper, lead, phosphorus and oxygen, dubbed LK-99, is a superconductor at ambient pressure and temperatures above 127 °C (400 Kelvin). The team claims that samples show two key signs of superconductivity: zero electrical resistance and the Meissner effect, in which the material expels magnetic fields, leading samples to levitate above a magnet. Previous efforts have achieved superconductivity only in certain materials under incredibly low temperatures or extremely high pressures. No material has ever been confirmed to be a superconductor under ambient conditions.</p><p>LK-99’s purported superconductivity drew immediate scrutiny from scientists. “My first impression was ‘no.’” says Inna Vishik, a condensed matter experimentalist at the University of California, Davis. “These ‘Unidentified Superconducting Objects’, as they’re sometimes called, reliably show up on the arXiv. There’s a new one every year or so.” Advances in superconductivity are often touted for their potential practical impact on technologies such as computer chips and maglev trains, but Vishik points out that such excitement might be misplaced. Historically, progress in superconductivity has had tremendous benefits for basic science, but little in the way of everyday applications. There’s no guarantee a material that is a room-temperature superconductor would be of practical use, Vishik says.</p><p>The first attempts to replicate LK-99, reported in the past days, have not improved the material’s prospects. None of the studies provide direct evidence for any superconductivity in the material. (The Korean team did not respond to <i>Nature’s</i> request for comment.)</p><p>Two separate experimental efforts by teams at the National Physical Laboratory of India in New Delhi<sup><a href="#ref-CR3" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">3</a></sup> and Beihang University in Beijing<sup><a href="#ref-CR4" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">4</a></sup>, reported synthesizing LK-99, but did not observe signs of superconductivity. A third experiment by researchers at Southeast University in Nanjing<sup><a href="#ref-CR5" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">5</a></sup> found no Meissner effect, but measured near zero resistance in LK-99 at -163 °C (110 K) — which is far below room temperature, but high for superconductors.</p><p>Theorists have also entered the fray. Several theoretical studies<sup><a href="#ref-CR6" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">6</a></sup><sup>,</sup><sup><a href="#ref-CR7" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">7</a></sup><sup>,</sup><sup><a href="#ref-CR8" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">8</a></sup><sup>,</sup><sup><a href="#ref-CR9" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">9</a></sup> used a computational technique called density functional theory (DFT) to calculate LK-99’s electronic structure. The DFT calculations suggest LK-99 might have interesting electronic features that, in other materials, have been associated with behavior such as ferromagnetism and superconductivity. But none of the studies found evidence that LK-99 is a superconductor at ambient conditions.</p><h2>Early efforts</h2><p>Replicators first attempted to synthesize LK-99, following the process described by the Korean team, which involved mixing powdered components and two stages of heating up to 925 °C. (The high temperatures and use of lead have prompted concerns about <a href="https://www.wired.com/story/inside-the-diy-race-to-replicate-lk-99/" data-track="click" data-label="https://www.wired.com/story/inside-the-diy-race-to-replicate-lk-99/" data-track-category="body text link">amateur replication attempts</a>, which researchers say are dangerous.)</p><p>To confirm that material’s structure and identity, replicators used X-ray diffraction, an atomic imaging technique. The Beihang team concluded that their sample’s structure was “highly consistent” with that of LK-99.</p><p>A co-author on the National Physical Laboratory team, physicist Veerpal Singh Awana, acknowledged small differences between their sample and that of the Korean team. “Our LK-99 is very similar to that as the reported superconducting LK-99,” he says.</p><p>But Robert Palgrave, a chemist at University College London, says that both teams’ materials differ from the original. Both X-ray diffraction patterns are significantly different from the Korean team’s patterns and from each other, says Palgrave. (Members of the Beihang team did not respond to <i>Nature’s</i> request for comment.)</p><p>The Southeastern University team’s experiment produced X-ray diffraction data that is more consistent with the Korean team’s sample, according to Palgrave. But several researchers have questioned their claim of achieving zero resistance at -163 °C. Evan Zalys-Geller, a condensed matter physicist at the Massachusetts Institute of Technology in Cambridge, says that the resistance measurement wasn’t sensitive enough to distinguish between a zero resistance superconductor or a low-resistance metal like copper. (Members of the Southeastern University team did not respond to a request for comment.)</p><h2>Theory troubles</h2><p>Uncertainty about the structure of LK-99 limits the conclusions that researchers can draw from theoretical studies, which assume a given structure for the material to make calculations.</p><p>On 31 July, a theoretical analysis posted on Twitter prompted excitement among online enthusiasts. Sinéad Griffin, who studies quantum materials at Lawrence Berkeley National Laboratory in California, <a href="https://twitter.com/sineatrix/status/1686182852667572224" data-track="click" data-label="https://twitter.com/sineatrix/status/1686182852667572224" data-track-category="body text link">shared</a> her theory paper, accompanied by a gif of former US president Barack Obama performing a ‘mic drop’. The optimism was prompted by Griffin’s use of DFT to find that LK-99 has ‘flat bands’, a feature that indicates electrons in the material are strongly correlated with each other. “Flat band systems tend to show interesting physics,” Vishik says. “So when a material is predicted to have a flat band, people get kind of excited.”</p><p>Griffin later rebuffed the optimism, <a href="https://twitter.com/sineatrix/status/1686659104755032064" data-track="click" data-label="https://twitter.com/sineatrix/status/1686659104755032064" data-track-category="body text link">tweeting: </a>“My paper did *not* prove nor give evidence of superconductivity.”</p><p>Other theory papers also suggested the presence of flat bands, but all of them suffer from the same assumption about the structure, says Leslie Schoop, a solid state chemist at Princeton University in New Jersey. “In a nutshell, I don’t believe any of the DFT before I know the correct crystal structure,” she says.</p><p>Griffin agrees that knowing the structure is essential. But she says that the structure found by the Korean team is similar to that of other lead phosphate minerals. “So it’s not too bizarre to think it possible.”</p><p>Even if future experiments confirm flat bands, the feature does not mean the material would display room-temperature superconductivity, Schoop says. The association between flat bands and superconductivity comes from other materials, such as ‘twisted’ layers of graphene — slightly offset sheets of atomically thin carbon — which displayed superconductivity at -271 °C (1.7 K) and <a href="https://www.nature.com/articles/s41567-020-01041-x" data-track="click" data-label="https://www.nature.com/articles/s41567-020-01041-x" data-track-category="body text link">featured flat bands</a>. But this does not provide evidence for superconductivity above 127 °C (400 K) in the lead-based LK-99, Schoop says.</p><h2>Viral videos</h2><p>The limited success of the replication attempts has not quelled speculation online. Unverified videos of samples, supposedly levitating because of superconductivity, have circulated as viral evidence, despite the fact that many materials — including graphene, frogs and pliers — can exhibit similar magnetic behaviour.</p><p>Previous room-temperature superconductivity claims, including one made <a href="https://www.nature.com/articles/d41586-023-00599-9" data-track="click" data-label="https://www.nature.com/articles/d41586-023-00599-9" data-track-category="body text link">in March</a> by the controversial physicist Ranga Dias, have made headlines. But the viral attention associated with LK-99 has surpassed many of its predecessors.</p><p>Frustrated by the atmosphere of hype, some scientists have taken to mimicking the levitation videos with everyday materials suspended by string and other props. “I opened Twitter up one day and noticed a bunch of sketchy videos with little floating pebbles,” says Eric Aspling, a physicist at Binghamton University in New York. In response, he uploaded a <a href="https://twitter.com/EricAspling/status/1686534579727863809" data-track="click" data-label="https://twitter.com/EricAspling/status/1686534579727863809" data-track-category="body text link">video</a> featuring a “sample of LK-99 shaped as a fork” suspended by tape. “I thought, ‘How can anybody be convinced by this?’,” he says.</p>
                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Comcast, Centurylink Fail to Derail Utah Community-Owned Gigabit Fiber Network (238 pts)]]></title>
            <link>https://www.techdirt.com/2023/08/04/comcast-centurylink-fail-to-derail-community-owned-gigabit-fiber-network-in-bountiful-utah/</link>
            <guid>37001369</guid>
            <pubDate>Fri, 04 Aug 2023 15:29:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techdirt.com/2023/08/04/comcast-centurylink-fail-to-derail-community-owned-gigabit-fiber-network-in-bountiful-utah/">https://www.techdirt.com/2023/08/04/comcast-centurylink-fail-to-derail-community-owned-gigabit-fiber-network-in-bountiful-utah/</a>, See on <a href="https://news.ycombinator.com/item?id=37001369">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storywrap-417090">


<h3>from the <i>do-not-pass-go,-do-not-collect-$200</i> dept</h3>

<p>More than 600 communities across the U.S. have decided to build their own broadband networks after decades of predatory behavior, slow speeds, and high prices by regional telecom monopolies.</p>
<p>That includes the city of Bountiful, Utah, which earlier this year <a href="https://communitynets.org/content/garden-spot-utah-moves-build-bountiful-fiber-network-face-dark-money-campaign">voted to build</a> a $48 million fiber network to deliver affordable, gigabit broadband to every business and residence in the city. The network is to be open access, meaning that multiple competitors can come in and compete on shared central infrastructure, driving down prices for locals (see our recent <a href="https://copia.is/library/just-a-click-away/">Copia study on this concept</a>). </p>
<p>As you might expect, regional telecom monopolies hate this sort of thing. But because these networks are so popular among consumers, they’re generally afraid to speak out against them directly. So they usually employ the help of dodgy proxy lobbying and policy middlemen, who’ll then set upon any town or city contemplating such a network using a bunch of scary, misleading rhetoric. </p>
<p>Like in Bountiful, where the “Utah Taxpayers Association” (which has direct financial and even <a href="https://utahtaxpayers.org/utah-taxpayers-association-elects-new-board-of-directors-officers-for-2020/">obvious managerial tethers</a> to regional telecom giants CenturyLink (now Lumen) and Comcast) launched a petition trying to force a public vote on the $48 million in revenue bonds authorized for the project under the pretense that such a project would be an unmitigated disaster for the town. (Their <a href="https://communitynets.org/content/municipal-broadband-opposition-campaign-bountiful-utah-fails">effort didn’t work</a>). </p>
<p>Big ISPs like to pretend they’re suddenly concerned about taxpayers and force entirely new votes on these kinds of projects because they know that with unlimited marketing budgets, they can usually flood less well funded towns or cities with misleading PR to sour the public on the idea.</p>
<p>But after the experience most Americans had with their existing broadband options during the peak COVID home education boom, it’s been much harder for telecom giants to bullshit the public. And the stone cold fact remains: these locally owned networks that wouldn’t even be considered if locals were happy with existing options. </p>
<p>You’ll notice these “taxpayer groups” exploited by big ISPs <strong>never</strong> criticize the untold billions federal and local governments throw at giant telecom monopolies <a href="https://www.techdirt.com/2022/06/17/we-just-keep-throwing-billions-at-telecom-monopolies-in-exchange-for-half-completed-shitty-broadband-networks/">for half-completed networks</a>. Or the routine taxpayer fraud companies like <a href="https://www.techdirt.com/2021/03/22/whistleblower-says-att-has-been-ripping-off-us-schools-decade/">AT&amp;T</a>, <a href="https://www.techdirt.com/2017/10/20/after-report-suggests-it-ripped-off-taxpayers-frontier-communications-shrugs-when-asked-subsidies-back/">Frontier</a>, <a href="https://www.techdirt.com/2020/01/28/look-more-giant-isps-taking-taxpayer-money-unfinished-networks/">CenturyLink</a> (now Lumen) and others routinely engage in. </p>
<p>And it’s because such taxpayer protection groups are effectively industry-funded performance art; perhaps well intentioned at one point, but routinely hijacked, paid, and used as a prop by telecom monopolies looking to protect market dominance.</p>
<p>Gigi Sohn (who you’ll recall <a href="https://www.techdirt.com/2023/03/07/telecom-monopolies-win-again-gigi-sohn-forced-to-withdraw-from-fcc-nomination/">just had her nomination to the FCC scuttled by a sleazy telecom monopoly smear campaign</a>) has shifted her focus heavily toward advocating for locally-owned, creative alternatives to telecom monopoly power. And in <a href="https://www.sltrib.com/opinion/commentary/2023/07/09/gigi-sohn-bountiful-city-voted/">an op-ed to local Utah residents in the Salt Lake Tribune</a>, she notes how telecom giants want to have their cake and eat it too. </p>
<p>They don’t want to provide affordable, evenly available next-generation broadband. But they don’t want long-neglected locals to, either:</p>
<blockquote>
<p><em>Two huge cable and broadband companies, Comcast and CenturyLink/Lumen,&nbsp;<a href="https://www.bountifulutah.gov/file/bed1ff61-eee4-46ab-b62a-0d1b09b93cc7">have been members of UTA and have sponsored the UTA annual conference.</a>&nbsp;They have been vocally opposed to community-owned broadband for decades and are well-known for providing organizations like the UTA with significant financial support in exchange for pushing policies that help maintain their market dominance. Yet when given the opportunity in 2020, before anyone else, to provide Bountiful City with affordable and robust broadband,&nbsp;<a href="https://www.youtube.com/watch?app=desktop&amp;v=x7A1bqiy7c4">the companies balked</a>. So <span>the dominant cable companies not only don’t want to provide the service Bountiful City needs, they also want to block others from doing so</span>.</em></p>
</blockquote>
<p>Big telecom giants like AT&amp;T and Comcast (and all the consultants, think tankers, and academics they hire to defend their monopoly power) love to claim that community owned broadband networks are some kind of inherent boondoggle. But they’re just another business plan, dependent on the quality of the proposal and the individuals involved. </p>
<p>Even then, data consistently shows that community-owned broadband networks (whether municipal, cooperative, or built on the back of the city-owned utility) provide <a href="https://www.techdirt.com/2018/01/26/harvard-study-shows-community-owned-isps-offer-lower-more-transparent-prices/">better, faster, cheaper service</a> than regional monopolies. Such networks routinely not only provide the fastest service in the country, they do so while being <a href="https://www.techdirt.com/2023/05/31/community-owned-broadband-network-again-tops-list-of-most-popular-isps/">immensely popular among consumers</a>. They’re locally-owned and staffed, so they’re more accountable to locals. And they’re just looking to break even, not make a killing. </p>
<p>If I was a lumbering, apathetic, telecom monopoly solely fixated on cutting corners and raising rates to please myopic Wall Street investors, I’d be worried too.</p>
<p>
Filed Under: <a href="https://www.techdirt.com/tag/bountiful/" rel="tag">bountiful</a>, <a href="https://www.techdirt.com/tag/community-broadband/" rel="tag">community broadband</a>, <a href="https://www.techdirt.com/tag/competition/" rel="tag">competition</a>, <a href="https://www.techdirt.com/tag/fiber/" rel="tag">fiber</a>, <a href="https://www.techdirt.com/tag/gigabit/" rel="tag">gigabit</a>, <a href="https://www.techdirt.com/tag/gigi-sohn/" rel="tag">gigi sohn</a>, <a href="https://www.techdirt.com/tag/high-speed-internet/" rel="tag">high speed internet</a>, <a href="https://www.techdirt.com/tag/open-access/" rel="tag">open access</a>, <a href="https://www.techdirt.com/tag/utah/" rel="tag">utah</a>
<br>
Companies: <a href="https://www.techdirt.com/company/centurylink/" rel="category tag">centurylink</a>, <a href="https://www.techdirt.com/company/comcast/" rel="category tag">comcast</a>, <a href="https://www.techdirt.com/company/lumen/" rel="category tag">lumen</a>
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Remote work requires communicating more, but less frequently (198 pts)]]></title>
            <link>https://ben.balter.com/2023/08/04/remote-work-communicate-more-with-less/</link>
            <guid>37000981</guid>
            <pubDate>Fri, 04 Aug 2023 15:02:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ben.balter.com/2023/08/04/remote-work-communicate-more-with-less/">https://ben.balter.com/2023/08/04/remote-work-communicate-more-with-less/</a>, See on <a href="https://news.ycombinator.com/item?id=37000981">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><a href="https://ben.balter.com/">Ben Balter</a>
</p>
<p><span>
Technology leadership, collaboration, and open source
</span>
</p></div><div id="content" role="main">
<article id="post-2023-08-04-remote-work-communicate-more-with-less">

<p><strong>
<abbr title="&quot;Too Long; Didn't Read&quot; — Internet shorthand for &quot;a brief summary of longer writing&quot;" data-bs-toggle="tooltip" data-bs-placement="right">TL;DR</abbr>:
</strong>
Remote work requires communicating more, less frequently, because asynchronous communication involves less frequent, but richer communication, meaning there is less time talking <em>about</em> the work and more time <em>doing</em> it, allowing the system to optimize for throughput and flow.</p>
<div>
<p>Remote work is not simply a matter of replicating the office environment online. One of the key shifts that remote workers need to make is to communicate <em>more</em>, less <em>frequently</em>. Instead of relying on constant, synchronous, and often interrupt-driven interactions, remote workers embrace asynchronous, and often higher-fidelity, forms of communication, such as long-form writing or thoughtful videos.</p>
<p>I’ve <a href="https://ben.balter.com/2022/03/17/why-async/#benefits-of-working-asynchronously">written before</a> about the benefits of working asynchronously, but less obvious, it also changes the <em>way</em> we think and work. Async work allows for more reflection, research, and synthesis. Those working async can and should take the time to think, learn, and synthesize before sharing their ideas, opinions, or solutions, distilling them down to the most critical. This improves the quality and clarity of the communication, and most importantly, the overall throughput of the communications channel.</p>
<p>Think of it like gzip compression, but for human-to-human communication. Yes, there’s slightly more processing overhead at the start, but it allows greater communications throughput using fewer “packets” (communicate more using less).<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup> How can you communicate more, less frequently? Here’s a few tips I often keep in mind:</p>
<ul>
<li><strong>Choose the right medium for the message</strong> - Remote workers should use the most appropriate and effective form of communication for the purpose, audience, and context. For example, use writing for documenting, explaining, or persuading; use video for demonstrating, teaching, or storytelling; use chat for coordinating, clarifying, or socializing.</li>
<li><strong>Write clearly, concisely, and comprehensively</strong> - Remote workers should write with the reader in mind, using simple language, short sentences, and clear structure. They should also provide enough detail, context, and evidence to support their points, answer potential questions, and avoid ambiguity.</li>
<li><strong>Record videos with empathy, enthusiasm, and engagement</strong> - Remote workers should record videos with a human touch, using eye contact, facial expressions, and voice modulation. They should also keep their videos short, focused, and interactive, using visuals, examples, and questions.</li>
<li><strong>Communicate proactively, regularly, and asynchronously</strong> - Remote workers workers should communicate their goals, plans, and updates without waiting for prompts, requests, or deadlines. They should also communicate their availability, boundaries, and preferences without assuming or imposing. They should communicate asynchronously as much as possible, using synchronous communication only for urgent, complex, or sensitive matters.</li>
</ul>
<p>Remote work requires communicating more, less frequently, because asynchronous communication involves less frequent, but richer communication, meaning there is less time talking <em>about</em> the work and more time <em>doing</em> it, allowing the system to optimize for throughput and flow.</p>

</div>
<div><p>
Originally published August 4, 2023 | <a href="https://github.com/benbalter/benbalter.github.com/commits/main/_posts/2023-08-04-remote-work-communicate-more-with-less.md" target="_blank" rel="noopener">View revision history</a>
</p></div>
<h2>If you enjoyed this post, you might also enjoy:</h2>
<ul>
<li>
<a href="https://ben.balter.com/2017/11/10/twelve-tips-for-growing-communities-around-your-open-source-project/">Twelve tips for growing communities around your open source project</a>
</li>
<li>
<a href="https://ben.balter.com/2014/11/06/rules-of-communicating-at-github/">15 rules for communicating at GitHub</a>
</li>
<li>
<a href="https://ben.balter.com/2015/11/23/why-open-source/">Why open source</a>
</li>
<li>
<a href="https://ben.balter.com/2015/11/12/why-urls/">Why everything should have a URL</a>
</li>
<li>
<a href="https://ben.balter.com/2015/03/17/open-source-best-practices-external-engagement/">Five best practices in open source: external engagement</a>
</li>
<li>
<a href="https://ben.balter.com/2015/11/18/tools-to-empower-open-collaboration/">Four characteristics of modern collaboration tools</a>
</li>
<li>
<a href="https://ben.balter.com/2020/03/18/tips-for-working-remotely/">Eight tips for working remotely</a>
</li>
<li>
<a href="https://ben.balter.com/2015/04/21/why-technologists-dont-want-to-work-at-your-agency/">19 reasons why technologists don't want to work at your government agency</a>
</li>
<li>
<a href="https://ben.balter.com/2022/02/16/leaders-show-their-work/">Leaders show their work</a>
</li>
<li>
<a href="https://ben.balter.com/2022/03/09/seven-things-a-corporate-chief-of-staff-does/">The seven things a corporate Chief of Staff does</a>
</li>
<li>
<a href="https://ben.balter.com/2016/08/22/ten-ways-to-make-a-product-great/">Ten ways to make a product great</a>
</li>
</ul>
<div>
<div>
<p><img alt="benbalter" width="100" height="100" data-proofer-ignore="true" src="https://avatars3.githubusercontent.com/benbalter?v=3&amp;s=100" srcset="https://avatars3.githubusercontent.com/benbalter?v=3&amp;s=100 1x, https://avatars3.githubusercontent.com/benbalter?v=3&amp;s=200 2x, https://avatars3.githubusercontent.com/benbalter?v=3&amp;s=300 3x, https://avatars3.githubusercontent.com/benbalter?v=3&amp;s=400 4x"></p>
<p>Ben Balter is the Director of Engineering Operations and Culture at <a href="https://github.com/about">GitHub</a>, the world’s largest software development platform. Previously, as Chief of Staff for Security, he managed the office of the Chief Security Officer, improving overall business effectiveness of the Security organization through portfolio management, strategy, planning, culture, and values. As a Staff Technical Program manager for Enterprise and Compliance, Ben managed GitHub’s on-premises and SaaS enterprise offerings, and as the Senior Product Manager overseeing the platform’s Trust and Safety efforts, Ben shipped more than 500 features in support of community management, privacy, compliance, content moderation, product security, platform health, and open source workflows to ensure the GitHub community and platform remained safe, secure, and welcoming for all software developers. Before joining GitHub’s Product team, Ben served as GitHub’s Government Evangelist, leading the efforts to encourage more than 2,000 government organizations across 75 countries to adopt open source philosophies for code, data, and policy development. <a href="https://ben.balter.com/about/">More about the author →</a></p>
</div>
<div>
<p>
<small>This page is open source. Please <a href="https://github.com/benbalter/benbalter.github.com/edit/main/_posts/2023-08-04-remote-work-communicate-more-with-less.md">help improve it</a>.</small>
</p>
<p><a href="https://github.com/benbalter/benbalter.github.com/edit/main/_posts/2023-08-04-remote-work-communicate-more-with-less.md" title="Help improve article _posts/2023-08-04-remote-work-communicate-more-with-less.md">Edit</a>
</p></div>
</div>
</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rich Hickey is retiring from Nubank (115 pts)]]></title>
            <link>https://building.nubank.com.br/clojures-journey-at-nubank-a-look-into-the-future/</link>
            <guid>37000733</guid>
            <pubDate>Fri, 04 Aug 2023 14:41:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://building.nubank.com.br/clojures-journey-at-nubank-a-look-into-the-future/">https://building.nubank.com.br/clojures-journey-at-nubank-a-look-into-the-future/</a>, See on <a href="https://news.ycombinator.com/item?id=37000733">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
		<header>
			<amp-analytics config="https://www.googletagmanager.com/amp.json?id=GTM-KMX2DND&amp;gtm.url=SOURCE_URL" data-credentials="include" i-amphtml-layout="fixed">
  
</amp-analytics>
<div>
	<div>
						
			<p>Tech team thanks Rich Hickey for leadership as he retires from his position at Nu.&nbsp;</p>
			<p><span>04 Aug 23</span>
			<a href="https://building.nubank.com.br/engineering/">Engineering</a></p><a href="https://building.nubank.com.br/authors/editorial/" data-vars-click-url="https://building.nubank.com.br/authors/editorial/">
				
			</a>
		</div>
	
	
	<div>
		<amp-img src="https://building.nubank.com.br/wp-content/uploads/2023/08/8.jpg" layout="responsive" width="1280" height="640" title="Nubank office" alt="Nubank office" srcset="https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?w=2048&amp;ssl=1 2048w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=1200%2C800&amp;ssl=1 1200w" data-hero-candidate="" data-hero="" i-amphtml-ssr="" i-amphtml-layout="responsive"><i-amphtml-sizer slot="i-amphtml-svc"></i-amphtml-sizer>
		<img decoding="async" loading="lazy" alt="Nubank office" src="https://building.nubank.com.br/wp-content/uploads/2023/08/8.jpg" srcset="https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?w=2048&amp;ssl=1 2048w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/building.nubank.com.br/wp-content/uploads/2023/08/8.jpg?resize=1200%2C800&amp;ssl=1 1200w" title="Nubank office"></amp-img>
	</div>
</div>		</header>
		<div>
						<main>
				<section>
					<amp-img id="px-20" src="https://building.nubank.com.br/wp-content/themes/nubankv2/images/pixel.png" layout="fixed" width="1" height="1" i-amphtml-layout="fixed"></amp-img>
					<amp-img id="px-40" src="https://building.nubank.com.br/wp-content/themes/nubankv2/images/pixel.png" layout="fixed" width="1" height="1" i-amphtml-layout="fixed"></amp-img>
					<amp-img id="px-60" src="https://building.nubank.com.br/wp-content/themes/nubankv2/images/pixel.png" layout="fixed" width="1" height="1" i-amphtml-layout="fixed"></amp-img>
					<amp-img id="px-80" src="https://building.nubank.com.br/wp-content/themes/nubankv2/images/pixel.png" layout="fixed" width="1" height="1" i-amphtml-layout="fixed"></amp-img>
					<amp-img id="px-100" src="https://building.nubank.com.br/wp-content/themes/nubankv2/images/pixel.png" layout="fixed" width="1" height="1" i-amphtml-layout="fixed"></amp-img>
					<span>
						
					</span>
					
<hr>



<p>In the ever-evolving world of technology, it’s not uncommon for key figures to transition into new roles or embark on different paths. One such significant transition is the recent retirement of Rich Hickey from Nubank. Known for his fundamental role in the development of the Clojure programming language, Rich’s contributions to Nubank and the broader tech industry have been nothing short of remarkable.</p>



<p>“Rich is an industry defining mind. His contributions extend beyond his role as the creator of the language, transcending directly to the very nature of how software should be built and even how problems should be solved. His ongoing commitment to the community has been invaluable in fostering its growth and innovation. At Nubank, Rich played a&nbsp; pivotal role in shaping the company’s technological landscape (even many years before he joined the company) and he leaves an outstanding legacy!” says Vitor Olivier, Nubank’s CTO.</p>



<p>Despite Rich Hickey’s retirement as a Nubank employee, his commitment to Clojure stays unwavering. Nubank also remains the prime corporate sponsor of Clojure, employing&nbsp; Alex Miller and Michael Fogus to continue developing the language under Rich’s guidance. The company will also continue to move forward in spreading the use of<a href="https://building.nubank.com.br/datomic-is-available-free-of-licensing-fees" data-vars-click-url="https://building.nubank.com.br/datomic-is-available-free-of-licensing-fees"> Datomic and making it free</a>, with Stuart Halloway leading these efforts.</p>



<p>“It has been an inestimable privilege and pleasure to work with Rich for almost fifteen years, and we plan to work together on Clojure for many years to come. After over a decade as the lead developer of Datomic, I am excited to now take on the role of primary architect of Datomic, leading an experienced and growing team here at Nubank”, says Stuart Halloway.</p>



<p>The bank’s sponsorship on Github also remains intact. The support focuses on funding community members who contribute to the development and enhancement of the programming language, underscoring Nubank’s dedication to fostering a vibrant and collaborative Clojure community.</p>



<p>Thus, as Nubank grows, so too will its use of Clojure, further solidifying the language’s role in the world of financial technology.</p>



<p>Hickey’s journey with Clojure began in 2005, when he set out to create a practical Lisp for functional programming that could seamlessly interoperate with the established Java platform. The result was Clojure, a dynamic, general-purpose programming language that combines the approachability and interactive development of a scripting language with an efficient and robust infrastructure for multithreaded programming. Hickey joined Nubank in 2020, when <a href="https://building.nubank.com.br/nubank-acquires-cognitect-press-release/" data-vars-click-url="https://building.nubank.com.br/nubank-acquires-cognitect-press-release/">Nubank acquired Cognitect</a>, the US-based software company behind the Clojure and the Datomic database. Through the acquisition, Nubank incorporated a world-class team to assist developers in translating Clojure’s ideas into business agility and leverage the company’s mission to fight complexity and empower people.</p>



<p>“My time at Cognitect, and subsequently Nubank, remains the highlight of my career. It’s been a privilege to work with such talented and nice people, doing our best to solve interesting and challenging problems”, says Rich.</p>



<div>
				
			
			<h2 id="#the-journey-of-clojure-15-years-of-innovation">The journey of Clojure: 15 years of innovation</h2></div>



<p><a href="https://building.nubank.com.br/clojure-15th-anniversary-a-retrospective/" data-vars-click-url="https://building.nubank.com.br/clojure-15th-anniversary-a-retrospective/">In 2022, Clojure turned 15 years old.</a>&nbsp;The language was designed to be a practical Lisp for the Java Virtual Machine (JVM) and has since expanded to other platforms. The language’s journey is marked by its unique approach to programming, emphasizing immutability, functional programming, and simplicity.<br>Clojure’s adoption by the developer community has been a testament to its innovative features and practicality. Over the years, Clojure has been recognized for its design that promotes robust, clean, and efficient code. It has also been praised for its concurrency features, making it a strong choice for multi-threaded programming.&nbsp;</p>



<p>Despite its relative youth compared to other languages, Clojure’s journey is marked by continuous innovation and growing adoption.</p>








				</section>
			</main>
			
			
			
			
		</div>
	</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[(Next Rich) (520 pts)]]></title>
            <link>https://clojure.org/news/2023/08/04/next-rich</link>
            <guid>37000562</guid>
            <pubDate>Fri, 04 Aug 2023 14:28:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://clojure.org/news/2023/08/04/next-rich">https://clojure.org/news/2023/08/04/next-rich</a>, See on <a href="https://news.ycombinator.com/item?id=37000562">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      <p><em>04 August 2023</em><br>
         <em>Rich Hickey</em></p>

      <p>It is with a mixture of heartache and optimism that I announce today my (long planned) retirement from commercial software development, and my employment at Nubank. It’s been thrilling to see Clojure and Datomic successfully applied at scale.</p>
<p>I look forward to continuing to lead ongoing work maintaining and enhancing Clojure with Alex, Stu, Fogus and many others, as an independent developer once again. We have many useful things planned for 1.12 and beyond. The community remains friendly, mature and productive, and is taking Clojure into many interesting new domains.</p>
<p>I want to highlight and thank Nubank for their ongoing sponsorship of Alex, Fogus and the core team, as well as the Clojure community at large.</p>
<p>Stu will continue to lead the development of Datomic at Nubank, where the Datomic team grows and thrives. I’m particularly excited to see where the new free availability of Datomic will lead.</p>
<p>My time with Cognitect remains the highlight of my career. I have learned from absolutely everyone on our team, and am forever grateful to all for our interactions. There are too many people to thank here, but I must extend my sincerest appreciation and love to Stu and Justin for (repeatedly) taking a risk on me and my ideas, and for being the best of partners and friends, at all times fully embodying the notion of integrity. And of course to Alex Miller - who possesses in abundance many skills I lack, and without whose indomitable spirit, positivity and friendship Clojure would not have become what it did.</p>
<p>I have made many friends through Clojure and Cognitect, and I hope to nurture those friendships moving forward.</p>
<p>Retirement returns me to the freedom and independence I had when originally developing Clojure. The journey continues!</p>
<p>Rich</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Austrian leader proposes enshrining the use of cash in country's constitution (133 pts)]]></title>
            <link>https://apnews.com/article/austria-cash-constitution-proposal-e63078b1682b375a84d0132857374e43</link>
            <guid>37000250</guid>
            <pubDate>Fri, 04 Aug 2023 14:05:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/austria-cash-constitution-proposal-e63078b1682b375a84d0132857374e43">https://apnews.com/article/austria-cash-constitution-proposal-e63078b1682b375a84d0132857374e43</a>, See on <a href="https://news.ycombinator.com/item?id=37000250">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-module="" data-padding="none">
                    
                    
                        
                            
    <div><figure>
    

    
        <picture data-crop="medium-3x2">
    
        <source media="(min-width: 1280px)" type="image/webp" width="980" height="653" srcset="https://dims.apnews.com/dims4/default/67e4a30/2147483647/strip/true/crop/3136x2090+0+1/resize/980x653!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x" loading="lazy">

    

    
        <source media="(min-width: 1280px)" width="980" height="653" srcset="https://dims.apnews.com/dims4/default/7ced073/2147483647/strip/true/crop/3136x2090+0+1/resize/980x653!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x" loading="lazy">

    

    
        <source media="(min-width: 1024px)" type="image/webp" width="820" height="546" srcset="https://dims.apnews.com/dims4/default/1865ab7/2147483647/strip/true/crop/3136x2088+0+1/resize/820x546!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x" loading="lazy">

    

    
        <source media="(min-width: 1024px)" width="820" height="546" srcset="https://dims.apnews.com/dims4/default/270f47b/2147483647/strip/true/crop/3136x2088+0+1/resize/820x546!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x" loading="lazy">

    

    
        <source media="(min-width: 768px)" type="image/webp" width="1024" height="683" srcset="https://dims.apnews.com/dims4/default/6bee4d3/2147483647/strip/true/crop/3135x2091+1+0/resize/1024x683!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x" loading="lazy">

    

    
        <source media="(min-width: 768px)" width="1024" height="683" srcset="https://dims.apnews.com/dims4/default/c254f8d/2147483647/strip/true/crop/3135x2091+1+0/resize/1024x683!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x" loading="lazy">

    

    
        <source media="(min-width: 600px)" type="image/webp" width="767" height="511" srcset="https://dims.apnews.com/dims4/default/1230868/2147483647/strip/true/crop/3136x2089+0+1/resize/767x511!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/f2d5e6f/2147483647/strip/true/crop/3136x2089+0+1/resize/1534x1022!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" loading="lazy">

    

    
        <source media="(min-width: 600px)" width="767" height="511" srcset="https://dims.apnews.com/dims4/default/cc2b295/2147483647/strip/true/crop/3136x2089+0+1/resize/767x511!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/e509e28/2147483647/strip/true/crop/3136x2089+0+1/resize/1534x1022!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" loading="lazy">

    

    
        <source media="(max-width: 599px)" type="image/webp" width="567" height="378" srcset="https://dims.apnews.com/dims4/default/aa404d6/2147483647/strip/true/crop/3136x2091+0+0/resize/567x378!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/6ac3f48/2147483647/strip/true/crop/3136x2091+0+0/resize/1134x756!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" loading="lazy">

    

    
        <source media="(max-width: 599px)" width="567" height="378" srcset="https://dims.apnews.com/dims4/default/63b218c/2147483647/strip/true/crop/3136x2091+0+0/resize/567x378!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/52200c7/2147483647/strip/true/crop/3136x2091+0+0/resize/1134x756!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" loading="lazy">

    

    
        <source type="image/webp" width="320" height="213" srcset="https://dims.apnews.com/dims4/default/6db00e1/2147483647/strip/true/crop/3136x2087+0+2/resize/320x213!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/f328ea3/2147483647/strip/true/crop/3136x2087+0+2/resize/640x426!/format/webp/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" loading="lazy">

    

    
        <source width="320" height="213" srcset="https://dims.apnews.com/dims4/default/2020c62/2147483647/strip/true/crop/3136x2087+0+2/resize/320x213!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/a5a60d4/2147483647/strip/true/crop/3136x2087+0+2/resize/640x426!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" loading="lazy">

    

    <img alt="FILE - Austrian Chancellor Karl Nehammer briefs the media during a meeting with Netherlands Prime Minister Mark Rutte in Vienna, Austria, on Jan. 26, 2023. Austria's leader is proposing to enshrine in the country’s constitution a right to use cash, which remains more popular in the Alpine nation than in many other places. Nehammer said in a statement on Friday Aug. 4, 2023 that “more and more people are concerned that cash could be restricted as a means of payment in Austria.” (AP Photo/Heinz-Peter Bader, File)" srcset="https://dims.apnews.com/dims4/default/2020c62/2147483647/strip/true/crop/3136x2087+0+2/resize/320x213!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 1x,https://dims.apnews.com/dims4/default/a5a60d4/2147483647/strip/true/crop/3136x2087+0+2/resize/640x426!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386 2x" width="320" height="213" src="https://dims.apnews.com/dims4/default/2020c62/2147483647/strip/true/crop/3136x2087+0+2/resize/320x213!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F32%2Fec%2Fefb48b4687aca6c63144e9f65d09%2Ff47a9cb9c7c942cea4857b31f4bdd386" loading="lazy">
</picture>

    

    
        <div><figcaption><p>FILE - Austrian Chancellor Karl Nehammer briefs the media during a meeting with Netherlands Prime Minister Mark Rutte in Vienna, Austria, on Jan. 26, 2023. Austria’s leader is proposing to enshrine in the country’s constitution a right to use cash, which remains more popular in the Alpine nation than in many other places. Nehammer said in a statement on Friday Aug. 4, 2023 that “more and more people are concerned that cash could be restricted as a means of payment in Austria.” (AP Photo/Heinz-Peter Bader, File)</p></figcaption></div>
    
</figure>
</div>


                        
                    

                    <div>
                                        <p>BERLIN (AP) — Austria’s leader is proposing to enshrine in the country’s constitution a right to use cash, which remains more popular in the Alpine nation than in many other places.</p><p>Chancellor Karl Nehammer said in a statement on Friday that “more and more people are concerned that cash could be restricted as a means of payment in Austria.” His office said that the “uncertainty” is fueled by contradictory information and reports.</p><p>“People in Austria have a right to cash,” Nehammer said. </p>
    

<p>While payments by card and electronic methods have become increasingly dominant in many European countries, Austria and neighboring Germany remain relatively attached to cash. The government says 47 billion euros ($51 billion) per year are withdrawn from ATMs in Austria, a country of about 9.1 million people.</p>



<p>Protecting cash against supposed threats has been a demand of the far-right opposition <span><a href="https://apnews.com/article/politics-austria-government-europe-3294042df471db5b4e52bb0b38500f56" target="_blank" rel="noopener">Freedom Party</a></span>, which has led polls in Austria in recent months. The country’s next election is due in 2024.</p>

<p>Asked in an interview with the Austria Press Agency whether it wasn’t populist to run after the Freedom Party on the issue, the conservative Nehammer replied that the party stands for “beating the drum a lot without actually doing anything for this.”</p><p>The chancellor’s proposal, according to his office, involves a “constitutional protection of cash as a means of payment,” ensuring that people can still pay with cash, and securing a “basic supply” of cash in cooperation with Austria’s central bank. Austria is one of 20 countries that are part of the euro area.</p><p>Nehammer said he has instructed Finance Minister Magnus Brunner to work on the proposal and plans to hold a round table with the ministries concerned, finance industry representatives and the central bank in September.</p>
    

<p>“Everyone should have the opportunity to decide freely how and with what he wants to pay,” he said. “That can be by card, by transfer, perhaps in future also with the digital euro, but also with cash. This freedom to choose must and will remain.”</p><p>Freedom Party leader Herbert Kickl accused Nehammer of stealing his party’s ideas and argued that the chancellor’s “suddenly discovered love of cash” was meant only “to secure his political survival.” </p><p>The biggest opposition party in the current parliament, the center-left Social Democrats, has called for at least one ATM in every municipality and accused Nehammer of “pure populism.” </p><p>“Even if we write the word ‘cash’ into the constitution 100 times, there won’t be a single ATM more in Austria,” said the head of its parliamentary group, Philip Kucher. </p>
                                    </div>

                    


                    
    



                    
    



                    
    


                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Teach a man to phish and he’s set for life (107 pts)]]></title>
            <link>https://krebsonsecurity.com/2023/08/teach-a-man-to-phish-and-hes-set-for-life/</link>
            <guid>37000029</guid>
            <pubDate>Fri, 04 Aug 2023 13:51:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krebsonsecurity.com/2023/08/teach-a-man-to-phish-and-hes-set-for-life/">https://krebsonsecurity.com/2023/08/teach-a-man-to-phish-and-hes-set-for-life/</a>, See on <a href="https://news.ycombinator.com/item?id=37000029">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
												<p>One frustrating aspect of email phishing is the frequency with which scammers fall back on tried-and-true methods that really have no business working these days. Like attaching a phishing email to a traditional, clean email message, or leveraging link redirects on <strong>LinkedIn</strong>, or abusing an encoding method that makes it easy to disguise booby-trapped <strong>Microsoft Windows</strong> files as relatively harmless documents.</p>
<p>KrebsOnSecurity recently heard from a reader who was puzzled over an email he’d just received saying he needed to review and complete a supplied W-9 tax form. The missive was made to appear as if it were part of a mailbox delivery report from <strong>Microsoft 365</strong> about messages that had failed to deliver.</p>
<p>The reader, who asked to remain anonymous, said the phishing message contained an attachment that appeared to have a file extension of “.pdf,” but something about it seemed off. For example, when he downloaded and tried to rename the file, the right arrow key on the keyboard moved his cursor to the left, and vice versa.</p>
<p>The file included in this phishing scam uses what’s known as a “right-to-left override” or RLO character. RLO is a special character within unicode — an encoding system that allows computers to exchange information regardless of the language used — that supports languages written from right to left, such as Arabic and Hebrew.</p>
<p>Look carefully at the screenshot below and you’ll notice that while Microsoft Windows says the file attached to the phishing message is named “lme.pdf,” the full filename is “fdp.eml” spelled backwards. In essence, this is a .eml file — an electronic mail format or email saved in plain text — masquerading as a .PDF file.</p>
<p><a href="https://krebsonsecurity.com/wp-content/uploads/2023/08/lme-phish.png" target="_blank" rel="noopener"><img decoding="async" src="https://krebsonsecurity.com/wp-content/uploads/2023/08/lme-phish.png" alt="" width="751" height="453" srcset="https://krebsonsecurity.com/wp-content/uploads/2023/08/lme-phish.png 960w, https://krebsonsecurity.com/wp-content/uploads/2023/08/lme-phish-768x463.png 768w, https://krebsonsecurity.com/wp-content/uploads/2023/08/lme-phish-782x472.png 782w" sizes="(max-width: 751px) 100vw, 751px"></a></p>
<p>“The email came through Microsoft Office 365 with all the detections turned on and was not caught,” the reader continued. “When the same email is sent through Mimecast, Mimecast is smart enough to detect the encoding and it renames the attachment to ‘___fdp.eml.’ One would think Microsoft would have had plenty of time by now to address this.”</p>
<p>Indeed, KrebsOnSecurity first covered RLO-based phishing attacks <a href="https://krebsonsecurity.com/2011/09/right-to-left-override-aids-email-attacks/" target="_blank" rel="noopener">back in 2011</a>, and even then it wasn’t a new trick.</p>
<p>Opening the .eml file generates a rendering of a webpage that mimics an alert from Microsoft about wayward messages awaiting restoration to your inbox. Clicking on the “Restore Messages” link there bounces you through an open redirect on <strong>LinkedIn</strong> before forwarding to the phishing webpage.</p>
<p>As <a href="https://krebsonsecurity.com/2022/02/how-phishers-are-slinking-their-links-into-linkedin/" target="_blank" rel="noopener">noted here last year</a>, scammers have long taken advantage of a marketing feature on the business networking site which lets them create a LinkedIn.com link that bounces your browser to other websites, such as phishing pages that mimic top online brands (but chiefly Linkedin’s parent firm Microsoft).<span id="more-64427"></span></p>
<p><img decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2023/08/rlomessage.png" alt="" width="751" height="617"></p>
<p>The landing page after the LinkedIn redirect displays what appears to be an Office 365 login page, which is naturally a phishing website made to look like an official Microsoft Office property.</p>
<p>In summary, this phishing scam uses an old RLO trick to fool Microsoft Windows into thinking the attached file is something else, and when clicked the link uses an open redirect on a Microsoft-owned website (LinkedIn) to send people to a phishing page that spoofs Microsoft and tries to steal customer email credentials.</p>
<p>According to the latest figures from <strong>Check Point Software</strong>, Microsoft was <a href="https://www.checkpoint.com/press-releases/microsoft-dominates-as-the-most-impersonated-brand-for-phishing-scams-in-q2-2023/" target="_blank" rel="noopener">by far the most impersonated brand for phishing scams</a> in the second quarter of 2023, accounting for nearly 30 percent of all brand phishing attempts.</p>
<p>An unsolicited message that arrives with one of these .eml files as an attachment is more than likely to be a phishing lure. The best advice to sidestep phishing scams is to avoid clicking on links that arrive unbidden in emails, text messages and other mediums. Most phishing scams invoke a temporal element that warns of dire consequences should you fail to respond or act quickly.</p>
<p>If you’re unsure whether a message is legitimate, take a deep breath and visit the site or service in question manually — ideally, using a browser bookmark to avoid potential <a href="https://krebsonsecurity.com/2018/04/dot-cm-typosquatting-sites-visited-12m-times-so-far-in-2018/" target="_blank" rel="noopener">typosquatting sites</a>.</p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Winter temperatures above 35C in South America leave climatologists in disbelief (148 pts)]]></title>
            <link>https://www.abc.net.au/news/2023-08-04/south-america-extreme-heat-mid-winter-climate-change-scientists/102678662</link>
            <guid>36999338</guid>
            <pubDate>Fri, 04 Aug 2023 12:58:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.abc.net.au/news/2023-08-04/south-america-extreme-heat-mid-winter-climate-change-scientists/102678662">https://www.abc.net.au/news/2023-08-04/south-america-extreme-heat-mid-winter-climate-change-scientists/102678662</a>, See on <a href="https://news.ycombinator.com/item?id=36999338">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Climate scientists have been left "flabbergasted" as temperatures in parts of South America near 40 degrees Celsius in the middle of what is supposed to be&nbsp;its winter.</p><p>Data from Chile's national meteorological agency, <a href="http://www.meteochile.cl/" data-component="Link" target="_blank" rel="noopener noreferrer">Dirección Meteorológica de Chile</a>, shows several weather stations in the country reached temperatures above 35C on August 1.&nbsp;</p><p>This is between 10C and 20C above what is normal for this time of year in parts of Chile and Argentina, according to data from the European Centre for Medium Range Weather Forecasts (ECMWF).</p><figure role="group" data-component="VerticalArticleFigure" aria-labelledby="102684344" data-uri="coremedia://imageproxy/102684344" attribution="[object Object]" figuretype="photo"><img alt="Map of temperatures anomalies in southern parts of South America" sizes="(max-width: 543px) 543px," srcset="https://live-production.wcms.abc-cdn.net.au/4912cccf454dfeba62d0de141d614a2b?impolicy=wcms_crop_resize&amp;cropH=780&amp;cropW=1041&amp;xPos=26&amp;yPos=53&amp;width=862&amp;height=647 543w, https://live-production.wcms.abc-cdn.net.au/4912cccf454dfeba62d0de141d614a2b?impolicy=wcms_crop_resize&amp;cropH=681&amp;cropW=1021&amp;xPos=34&amp;yPos=152&amp;width=862&amp;height=575" src="https://live-production.wcms.abc-cdn.net.au/4912cccf454dfeba62d0de141d614a2b?impolicy=wcms_crop_resize&amp;cropH=681&amp;cropW=1021&amp;xPos=34&amp;yPos=152&amp;width=862&amp;height=575" loading="lazy" data-component="Image" data-lazy="true"><p><figcaption id="102684344" data-component="VerticalArticleFigure__figcaption" aria-live="polite"> <!-- -->Data shows southern parts of South America were 10C to 20C hotter than normal for this time of year.<span data-component="Byline"><span data-component="Text">(<span>Supplied: WXcharts.com</span>)</span></span></figcaption></p></figure><p>In the Coquimbo region, the mountain town of Vicuna reached a top of 37C, the Liceo Samuel Román Rojas weather station peaked at 35.4C and Monte Patricia reached 31.5C.</p><p>Climatologist and weather historian Maximiliano Herrera went so far as to call it one of the most "extreme weather events the world has ever seen".</p><p>"For its duration, area, and intensity, it's probably the worst winter heatwave in the Southern Hemisphere," he said.</p><p>He said temperatures in South America earlier this week had even rivalled the <a href="https://www.abc.net.au/news/2023-07-24/greek-heatwave-why-so-hot-record-temperatures-40-and-above/102638154" data-component="ContentLink" data-uri="coremedia://article/102638154">prolonged heat experienced in Europe during July</a>, despite being the middle of winter.</p><p>"South America is living one of the most extreme events the world has ever seen, unbelievable temperatures up to 38.9C in the Chilean Andine areas in mid-winter," Mr Herrera wrote on social media.</p><p>"[This is] much more than what southern Europe just had in mid-summer at the same elevation."</p><p>Many parts of Argentina also reached temperatures of 30C to 35C, and Brazil saw widespread temperatures above 35C and 38C on both Tuesday and Wednesday, according to data from their respective meteorological agencies.</p><p>Buenos Aires set a daily record for the start of August with its high of 30.1C — more than 5 degrees above the previous daily record, and 12C warmer than its August average, according to a spokesperson for Argentina's&nbsp;National Meteorological Service.</p><figure role="group" data-component="VerticalArticleFigure" aria-labelledby="102684224" data-uri="coremedia://imageproxy/102684224" attribution="[object Object]" figuretype="photo"><img alt="Three people play on a basketball court with the sun and trees in background" sizes="(max-width: 543px) 543px," srcset="https://live-production.wcms.abc-cdn.net.au/60b219f9f5d9a0b6c1afef709173a8d6?impolicy=wcms_crop_resize&amp;cropH=788&amp;cropW=1051&amp;xPos=71&amp;yPos=0&amp;width=862&amp;height=647 543w, https://live-production.wcms.abc-cdn.net.au/60b219f9f5d9a0b6c1afef709173a8d6?impolicy=wcms_crop_resize&amp;cropH=788&amp;cropW=1182&amp;xPos=5&amp;yPos=0&amp;width=862&amp;height=575" src="https://live-production.wcms.abc-cdn.net.au/60b219f9f5d9a0b6c1afef709173a8d6?impolicy=wcms_crop_resize&amp;cropH=788&amp;cropW=1182&amp;xPos=5&amp;yPos=0&amp;width=862&amp;height=575" loading="lazy" data-component="Image" data-lazy="true"><p><figcaption id="102684224" data-component="VerticalArticleFigure__figcaption" aria-live="polite"> <!-- -->Buenos Aires also experienced its hottest summer in recorded history during&nbsp;2023.<span data-component="Byline"><span data-component="Text">(<span>Reuters: Agustin Marcarian</span>)</span></span></figcaption></p></figure><h2 data-component="Heading">'Flabbergasted' by temperatures</h2><p>University of New South Wales climate scientist Sarah Perkins-Kirkpatrick&nbsp;said that, even as a climate scientist&nbsp;who specialised&nbsp;in heat extremes, the temperature observations were hard to believe.</p><p>"I'm flabbergasted by these temperatures," Dr&nbsp;Perkins-Kirkpatrick&nbsp;said.</p><p>She said if those temperatures were to occur in New South Wales, which sits at a similar latitude, it would be "extraordinary".</p><p>"It's reported that Buenos Aires has had the hottest start to August on record and has shattered its previous record by over 5 degrees.&nbsp;That margin is phenomenal," Dr&nbsp;Perkins-Kirkpatrick&nbsp;said.</p><p>"This is happening during the austral winter.<em>&nbsp;</em>To put it into context,&nbsp;it's&nbsp;like Sydney experiencing a 30-degree day this time of year —&nbsp;something that is beyond extraordinary."&nbsp;</p><p>Several other climate scientists have also expressed their disbelief at the temperatures, including Andrew Watkins, a climatologist from Australia's Bureau of Meteorology, who wrote on social media that the figures were "mind-boggling".</p><p>Pascal Boureau, a former forecaster at Météo-France, wrote that it was "unheard of".</p><h2 data-component="Heading">Extreme heat in Northern Hemisphere</h2><p>Much of the focus of heat in recent weeks has been on the Northern Hemisphere, which is sweltering through prolonged and intense heatwaves that have fuelled wildfires across three continents and shattered temperature records.</p><figure role="group" data-component="VerticalArticleFigure" aria-labelledby="102684422" data-uri="coremedia://imageproxy/102684422" attribution="[object Object]" figuretype="photo"><img alt="A firefighter walks next to rising flames as a wildfire burns near the village of Vati" sizes="(max-width: 543px) 543px," srcset="https://live-production.wcms.abc-cdn.net.au/a1662ee0618a900b387e1f0c196423b5?impolicy=wcms_crop_resize&amp;cropH=902&amp;cropW=1203&amp;xPos=72&amp;yPos=0&amp;width=862&amp;height=647 543w, https://live-production.wcms.abc-cdn.net.au/a1662ee0618a900b387e1f0c196423b5?impolicy=wcms_crop_resize&amp;cropH=897&amp;cropW=1346&amp;xPos=0&amp;yPos=2&amp;width=862&amp;height=575" src="https://live-production.wcms.abc-cdn.net.au/a1662ee0618a900b387e1f0c196423b5?impolicy=wcms_crop_resize&amp;cropH=897&amp;cropW=1346&amp;xPos=0&amp;yPos=2&amp;width=862&amp;height=575" loading="lazy" data-component="Image" data-lazy="true"><p><figcaption id="102684422" data-component="VerticalArticleFigure__figcaption" aria-live="polite"> <!-- -->Extreme heat in Europe fuelled intense wildfires, including on the island of Rhodes in&nbsp;Greece.<span data-component="Byline"><span data-component="Text">(<span>Reuters: Nicolas Economou</span>)</span></span></figcaption></p></figure><p>Parts of Italy reached temperatures up to 48C in late July, and China more than 50C.</p><p>On July 6, Algeria recorded its all-time hottest minimum temperature&nbsp;of 39.6C, as well as several maximum temperature records.</p><figure role="group" data-component="VerticalArticleFigure" aria-labelledby="102684412" data-uri="coremedia://imageproxy/102684412" attribution="[object Object]" figuretype="photo"><img alt="a woman holding a small child in the doorway of a burnt out home" sizes="(max-width: 543px) 543px," srcset="https://live-production.wcms.abc-cdn.net.au/8c0995f9e268e6789620c6e483895933?impolicy=wcms_crop_resize&amp;cropH=901&amp;cropW=1201&amp;xPos=73&amp;yPos=0&amp;width=862&amp;height=647 543w, https://live-production.wcms.abc-cdn.net.au/8c0995f9e268e6789620c6e483895933?impolicy=wcms_crop_resize&amp;cropH=899&amp;cropW=1348&amp;xPos=0&amp;yPos=1&amp;width=862&amp;height=575" src="https://live-production.wcms.abc-cdn.net.au/8c0995f9e268e6789620c6e483895933?impolicy=wcms_crop_resize&amp;cropH=899&amp;cropW=1348&amp;xPos=0&amp;yPos=1&amp;width=862&amp;height=575" loading="lazy" data-component="Image" data-lazy="true"><p><figcaption id="102684412" data-component="VerticalArticleFigure__figcaption" aria-live="polite"> <!-- -->Souhila Belkati carries her child inside her burnt house following a wildfire in Bejaia, Algeria, July 25.<span data-component="Byline"><span data-component="Text">(<span>Reuters: Ramzi Boudina</span>)</span></span></figcaption></p></figure><p>The unrelenting heat <a href="https://www.abc.net.au/news/2023-07-27/july-likely-hottest-month-record-united-nations-climate-change/102654812" data-component="ContentLink" data-uri="coremedia://article/102654812">helped secure July 2023 as Earth's hottest month on record</a>&nbsp;by global average temperature, according to the World Meteorological Organization.</p><p>New analysis&nbsp;by not-for-profit research group&nbsp;Climate Central found the exceptional heat of July <a href="https://assets.ctfassets.net/cxgxgstp8r5d/1vH80g7eE81mGtmsea2b6o/e0851d9bac92080f130033c540ad26e4/Climate_Central_July_2023_Global_Attribution_Report.pdf" data-component="ContentLink" data-uri="coremedia://externallink/102684352">would have been unlikely if not for climate change.</a></p><figure role="group" data-component="VerticalArticleFigure" aria-labelledby="102684456" data-uri="coremedia://imageproxy/102684456" attribution="[object Object]" figuretype="photo"><img alt="Areas of the world where climate change made July heat more likely" sizes="(max-width: 543px) 543px," srcset="https://live-production.wcms.abc-cdn.net.au/117080c05671f0dad28478c87e6a361e?impolicy=wcms_crop_resize&amp;cropH=834&amp;cropW=1112&amp;xPos=179&amp;yPos=0&amp;width=862&amp;height=647 543w, https://live-production.wcms.abc-cdn.net.au/117080c05671f0dad28478c87e6a361e?impolicy=wcms_crop_resize&amp;cropH=834&amp;cropW=1251&amp;xPos=110&amp;yPos=0&amp;width=862&amp;height=575" src="https://live-production.wcms.abc-cdn.net.au/117080c05671f0dad28478c87e6a361e?impolicy=wcms_crop_resize&amp;cropH=834&amp;cropW=1251&amp;xPos=110&amp;yPos=0&amp;width=862&amp;height=575" loading="lazy" data-component="Image" data-lazy="true"><p><figcaption id="102684456" data-component="VerticalArticleFigure__figcaption" aria-live="polite"> <!-- -->A Climate Central analysis of where climate change made the July heat more likely.<span data-component="Byline"><span data-component="Text">(<span>Supplied:&nbsp;Climate Central</span>)</span></span></figcaption></p></figure><p>It found that the July temperatures in 200 countries were made at least three times more likely with climate change.</p><p>This impacted more than 6.5 billion people, or 81 per cent of the global population, according to the analysis.</p><h2 data-component="Heading">What's causing South America's heat?</h2><p>Dr Perkins-Kirkpatrick&nbsp;said the South American heat extremes were also likely to<strong> </strong>bear<strong>&nbsp;</strong>the fingerprints of climate change.</p><p>"There are likely multiple causes to these temperatures —&nbsp;record warm sea surface temperatures in the Atlantic, the developing El Niño&nbsp;in the Pacific, a heat dome that was recently over the region combined with foehn&nbsp;winds, and anthropogenic climate change," she said.</p><p>"Indeed, climate change is probably giving the event a double-whammy, through heating the atmosphere and the ocean."</p><p>Foehn winds are warm and dry, gusty winds that periodically descend down the slopes of mountains and ranges.</p><p>Dr Perkins-Kirkpatrick&nbsp;said the temperatures were "equally" as concerning as the heat extremes being experienced in the Northern Hemisphere.</p><p>"While&nbsp;they are not as hot in absolute terms as the Northern Hemisphere, they are totally off the charts so early in August. It's&nbsp;bonkers," she said.</p><p>In a social media post, MetSul Meteorologica noted Buenos Aires had experienced temperatures of up to 34C in August before, due to "low-level&nbsp;jets with very warm air",&nbsp;which occasionally brought summer-like temperatures.</p><p>Data from Chile's national meteorological service&nbsp;shows the temperatures&nbsp;above 30C have now eased across Chile, with Argentina reporting an easing of conditions across southern parts of the country too, including the&nbsp;capital, Buenos Aires.</p><p>But for central and north Argentina&nbsp;and Brazil, the warmer temperatures are likely to persist for several more days, according to medium-range forecasts from ECMWF.</p></div><p><span data-component="Text">Posted<!-- -->&nbsp;</span><time data-component="ScreenReaderOnly" datetime="2023-08-03T20:24:30.000Z">20 hours ago</time><time data-component="Text">Thu 3 Aug 2023 at 8:24pm</time>, <span data-component="Text">updated<!-- -->&nbsp;</span><time data-component="ScreenReaderOnly" datetime="2023-08-04T05:59:32.000Z">11 hours ago</time><time data-component="Text">Fri 4 Aug 2023 at 5:59am</time></p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FCC imposes record penalty against transnational illegal robocalling operation (167 pts)]]></title>
            <link>https://docs.fcc.gov/public/attachments/DOC-395728A1.txt</link>
            <guid>36999016</guid>
            <pubDate>Fri, 04 Aug 2023 12:26:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://docs.fcc.gov/public/attachments/DOC-395728A1.txt">https://docs.fcc.gov/public/attachments/DOC-395728A1.txt</a>, See on <a href="https://news.ycombinator.com/item?id=36999016">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The Coming Enshittification of Public Libraries (211 pts)]]></title>
            <link>https://karawynn.substack.com/p/the-coming-enshittification-of-public-libraries</link>
            <guid>36998643</guid>
            <pubDate>Fri, 04 Aug 2023 11:51:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://karawynn.substack.com/p/the-coming-enshittification-of-public-libraries">https://karawynn.substack.com/p/the-coming-enshittification-of-public-libraries</a>, See on <a href="https://news.ycombinator.com/item?id=36998643">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>As a hyperlexic child, I read the way other people breathed — constantly if allowed, desperately if thwarted. As an adult, books are still only slightly less necessary to me than air. I read over a hundred of them every year — many times more books than a permanent member of the precariat like myself could ever afford to buy.</p><p><span>I love libraries because time and again, they have been my </span><em>literal</em><span> lifeline. As an abused child and as a financially insecure adult, library access to books has often kept me this side of suicidal levels of despair. The thought of anything threatening public libraries makes me ready to fight someone with my actual teeth.</span></p><p><span>Never have libraries in the United States been </span><em>more</em><span> threatened than they are right now. There are politicians across the country </span><a href="https://www.edweek.org/teaching-learning/book-bans-over-the-years-in-charts/2023/04" rel="">banning thousands of books</a><span> and </span><a href="https://www.themarysue.com/mississippi-book-banning-law-causes-all-kids-to-lose-access-to-public-library-e-books-audiobooks-across-the-state/" rel="">making it illegal for minors to access library materials</a><span>.</span></p><p>But there’s another threat to libraries looming that I haven’t seen anyone else talking about: capitalist enshittification.</p><div><figure><a target="_blank" href="https://pixabay.com/photos/kestrel-bird-perched-6986100/" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg" width="600" height="900" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:900,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:95683,&quot;alt&quot;:&quot;A Eurasian kestrel, brown with dark spots across its wings and breast, perches on the tip of an almost vertically jutting dead branch against a brilliant blue sky. Incongruous with the stark and fierce raptorial image is the thin stream of whitish liquid bird poop dropping beneath.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:&quot;https://pixabay.com/photos/kestrel-bird-perched-6986100/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="A Eurasian kestrel, brown with dark spots across its wings and breast, perches on the tip of an almost vertically jutting dead branch against a brilliant blue sky. Incongruous with the stark and fierce raptorial image is the thin stream of whitish liquid bird poop dropping beneath." title="A Eurasian kestrel, brown with dark spots across its wings and breast, perches on the tip of an almost vertically jutting dead branch against a brilliant blue sky. Incongruous with the stark and fierce raptorial image is the thin stream of whitish liquid bird poop dropping beneath." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4eafe7e-6140-45a7-aab7-0ed5c7776205_600x900.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>“Enshittification” is a great word, in part because it seems self-explanatory: it’s the active process by which a thing that used to be good deteriorates into utter crap. (It’s also great because, you know, &lt;gestures at the entire world&gt; zeitgeist.)</p><p><span>But if you’ve been using the word in a broad sense without being aware of the </span><em>precise</em><span> context it was coined to describe, you’re missing out on an important insight.</span></p><blockquote><p>Here is how platforms die: first, they are good to their users; then they abuse their users to make things better for their business customers; finally, they abuse those business customers to claw back all the value for themselves. Then, they die.</p><p><span>I call this </span><em>enshittification</em><span>, and it is a seemingly inevitable consequence arising from the combination of the ease of changing how a platform allocates value, combined with the nature of a “two sided market,” where a platform sits between buyers and sellers, holding each hostage to the other, raking off an ever-larger share of the value that passes between them.</span></p></blockquote><p><span>That’s from an essay by Cory Doctorow, in which he goes on to use the examples of Amazon and Facebook to demonstrate exactly how corporations have successfully run the enshittification playbook, making themselves heaps of money while screwing over everyone else. If you haven’t read it, please </span><a href="https://pluralistic.net/2023/01/21/potemkin-ai/" rel="">go do that now</a><span>, because everything I’m going to say next is built on an understanding of that recurring pattern.</span></p><p><span>Okay, so. If you’re a rapacious corporation looking to make a killing with this particular capitalist bait-and-switch playbook, the first thing you do is identify a middleman position: between buyers and sellers, consumers and advertisers, riders and drivers, readers and writers … basically any two groups who want to find and interact with each other. Then you build a platform — a website, an interface, an app, whatever — and plop it down right there in that </span><a href="https://bookshop.org/a/3529/9780807007068" rel="">chokepoint</a><span> between those two parties.</span></p><p><span>Whatever you build </span><em>must</em><span> genuinely improve things for the people and organizations on either side of the interaction … if it doesn’t, everyone will just ignore it, and it’s game over, you lose. So you start by building something useful and good. That’s the bait.</span></p><p>Then you work on attracting the people and organizations on both sides of whatever interaction or transaction you’re intermediating. Keep pulling them in — squashing or buying all competitors — until you have a functional monopoly, defined as “when the users of your platform are dependent upon it and have no reasonable alternative”.</p><p>At that point you (as the rapacious corporation) have no further reason to give a shit about anybody else. Now it’s time for the switch: start pulling as much money as you can from the parties whose interaction you’ve been facilitating. Most of the time that involves deliberately making your intermediating platform less useful and less good than it already is — for example, by removing an existing feature so that you can charge for it separately.</p><p>But so what? Enshittify as much as you want. It’s not like anyone’s got any other options left.</p><p>What does this have to do with libraries?</p><p>Well, if you use a public library in the United States or Canada, and you ever access their ebooks or audiobooks, you’re almost certainly familiar with the OverDrive platform or its mobile app Libby.</p><p><span>That’s because OverDrive, a private corporation, has a monopoly on managing the availability and distribution of ebooks and audiobooks for government-funded public libraries in North America. (I looked for exact current numbers, but turns out that would require the time and resources of a professional journalist.</span></p><p><span> Best I could do: as of December 2019, OverDrive controlled digital lending for “more than 95% of public libraries in the US and Canada”.</span></p><p><span>)</span></p><p><span>For about a decade now, OverDrive has provided users with digital library access two ways: through its website (individual library portals hosted on overdrive.com) and its mobile apps (OverDrive and Libby). I’ve always gone the web route myself — at first because it was the only option, before the app was built; later deliberately avoiding the app in order to reduce the amount of surveillance data collected.</span></p><p>Which is why I noticed almost immediately when, at the beginning of May, an important feature disappeared from all OverDrive web portals: the ability to recommend a book to your library’s buyers.</p><p><span>Previously, if you searched for an ebook/audiobook your library did not offer, but which was listed in OverDrive’s extensive database,</span></p><p><span> that book would appear in a separate section at the bottom of your search results with an option to recommend it to your library. Similarly, searching an author name would pull up any titles which your library did not own, or which were scheduled but not yet released, again with option to recommend.</span></p><p>All of that functionality just vanished. Now, searching on a title or author not currently held by your library returns only the error “We couldn’t find any matches for [x].”</p><p>The rest of the page is blank.</p><p><span>This has nothing to do with availability — in fact, the search box autocomplete suggestions </span><em>still reveal</em><span> which titles and authors are in the distribution database, and therefore available for library acquisition. These titles, both backlist and preorder, are now being actively suppressed by OverDrive.</span></p><p>As an author with many author friends, I know that the publishing industry is structured such that preorders of new titles have an outsized impact on a book’s success, so the active removal of the ability to suggest them to my library was not just frustrating but alarming. I went digging to find out what had happened.</p><div><figure><a target="_blank" href="https://pixabay.com/photos/head-stuck-in-the-sand-phrase-3510206/" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg" width="1456" height="936" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:936,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:689083,&quot;alt&quot;:&quot;A meerkat digs a hole in the sand near a whitish-orange rock. Only the rust-brown hindquarters and tail are visible, the remainder of the meerkat being down the hole. The camera has caught a spray of damp sand shooting up into the air from between its hind legs.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:&quot;https://pixabay.com/photos/head-stuck-in-the-sand-phrase-3510206/&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="A meerkat digs a hole in the sand near a whitish-orange rock. Only the rust-brown hindquarters and tail are visible, the remainder of the meerkat being down the hole. The camera has caught a spray of damp sand shooting up into the air from between its hind legs." title="A meerkat digs a hole in the sand near a whitish-orange rock. Only the rust-brown hindquarters and tail are visible, the remainder of the meerkat being down the hole. The camera has caught a spray of damp sand shooting up into the air from between its hind legs." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd62fe2d-b96a-48ca-a889-d2b86495a374_1920x1234.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>OverDrive </span><em>really</em><span> was not interested in making this easy, but eventually I turned up a help </span><a href="https://help.overdrive.com/en-us/2311.htm" rel="">page</a><span> — with the slantwise subject of “How to see title recommendations you’ve made to your library” — which mentions, as an aside, “The title recommendation feature is no longer available, but ... to express interest in titles your library doesn’t offer, you can add a ‘Notify Me’ tag in Libby instead.”</span></p><p>Okay, so at the very least, OverDrive is trying to force people away from the web and into their proprietary app, which probably means they’re trying to gather more surveillance data. Great. (I also learned that, simultaneous with disappearing the recommendation feature from the web portals, they’d withdrawn the OverDrive app, forcing those users to migrate over to the newer Libby app as well.)</p><p>Disgruntled, I downloaded Libby and tried to figure out how to “add a ‘Notify Me’ tag”.</p><p><span>Either their UI people are </span><em><strong>ridiculously bad</strong><span> at their jobs</span></em><span>, or OverDrive doesn’t want users using this feature, very possibly because it </span><em><strong>doesn’t actually work</strong><span>.</span></em></p><p><span>To say this process was obfuscated would be underselling its obscurity. First of all, the only way to learn that such a tag even exists is to do a targeted search in Libby’s help, which (assuming you pick the right keywords) will lead you to </span><a href="https://help.libbyapp.com/en-us/6115.htm" rel="">this page</a><span>.</span></p><p>Which in turn explains that in order to reveal the “Notify Me” tag option, you must first run a search, and then activate the “deep search” filter tag (!?!) in the search interface.</p><p><span>Because </span><em>that</em><span> is intuitive and makes total sense. I also note that the same page says those “Notify Me” tags “express interest in titles to your library” and are “anonymously shared with your saved libraries” ... but then also notes “Not all libraries offer this feature at this time.”</span></p><p>Which could mean any amount of library adoption from 99% to none; no way for any given library’s patrons to know if our suggestions are being received by the acquisitions staff, or falling into a black hole.</p><p><span>Also, once you’ve toggled the “deep search” filter in Libby and “Notify Me” finally appears, the tag only promises to do what it says on the tin: notify you if your library happens to acquire the title. No mention </span><em>here</em><span> of any kind of “recommend to library buyers” functionality.</span></p><p><span>So at this point, I’m like … either their UI people are </span><em>ridiculously bad at their jobs</em><span>, or OverDrive doesn’t want users actually using this feature, very possibly because it </span><em>doesn’t actually work</em><span>.</span></p><div><figure><a target="_blank" href="https://unsplash.com/photos/LEWbO3MqUsM" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg" width="1456" height="1092" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1092,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:755170,&quot;alt&quot;:&quot;A horned owl (unknown species) perches on a curved branch covered in English ivy. Its breast feathers are shaded from white to taupe, with black stripes down the middle of each, and its eyes are a brilliant pumpkin orange. Something about the combination of round large-pupiled eyes, narrow beak half-obscured by a ‘moustache’ of feathers above it, and the dark markings like parentheses on either side of its face make it look both alarmed and adorable.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:&quot;https://unsplash.com/photos/LEWbO3MqUsM&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="A horned owl (unknown species) perches on a curved branch covered in English ivy. Its breast feathers are shaded from white to taupe, with black stripes down the middle of each, and its eyes are a brilliant pumpkin orange. Something about the combination of round large-pupiled eyes, narrow beak half-obscured by a ‘moustache’ of feathers above it, and the dark markings like parentheses on either side of its face make it look both alarmed and adorable." title="A horned owl (unknown species) perches on a curved branch covered in English ivy. Its breast feathers are shaded from white to taupe, with black stripes down the middle of each, and its eyes are a brilliant pumpkin orange. Something about the combination of round large-pupiled eyes, narrow beak half-obscured by a ‘moustache’ of feathers above it, and the dark markings like parentheses on either side of its face make it look both alarmed and adorable." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b1abb32-ff36-4685-926d-cb8b5febb834_1920x1440.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>What, I wondered, did librarians think of this change to the book recommendation feature? I </span><a href="https://wandering.shop/@karawynn/110555770852870270" rel="">asked</a><span> on Mastodon and got a few to weigh in.</span></p><p><span>None of them were in favor of the switch. One, Alex, </span><a href="https://glammr.us/@TheyOfHIShirts/110556035862071703" rel="">called</a><span> it “categorically worse, to the point that it's not actually useful … I’d rather have us switch completely to our still pretty bad purchase/ILL [Inter-Library Loan] workflow than use this new system.”</span></p><p><span>“From the library side, this change is a real downgrade,” </span><a href="https://glammr.us/@Anneheathen/110555979313177491" rel="">responded</a><span> Anne, a public librarian in Michigan. She added that the old system, which connected the recommendations to individual users, allowed libraries to factor in the number of other requests that same user had made. “Balancing those requests was an important part of the selection process,” she said, but the aggregated dump from the “Notify Me” recommendations hides that information.</span></p><p><span>I also learned that for libraries in a resource-sharing ‘</span><a href="https://en.wikipedia.org/wiki/Library_consortium" rel="">consortium</a><span>’ — which seems to be most small and mid-sized public libraries, as well as some large ones — the new system is functionally useless. It’s no longer clear which titles were requested by their own patrons, as opposed to the patrons of another library in the same consortium.</span></p><p>In order to get that information — which until May was freely available — each library now has to pay a separate fee for an “Advantage” account. And if they then purchase a book and want to share it with their consortium members, as before? Well, that requires an “Advantage Plus” account (and presumably a higher fee; OverDrive does not make their pricing public).</p><p>Anne also said that the backend interface in the former system was easier for libraries to use. “You could have the system generate a cart automatically, of titles your patrons had recommended,” showing the number of those requests per title. The replacement interface, she said, “is much more complicated.” Because patrons have no way of knowing about these backend changes, Anne worried that most would assume that “notify me” worked the same as “recommend to library,” and would end up “annoyed that the library seems to be ignoring their notify me tags.”</p><p><span>Or, because the purpose of the ‘notify me’ tag is so obscured and self-contradictory, the confusion might go the opposite way. Thane, a librarian in Illinois, </span><a href="https://wandering.shop/@thane@glammr.us/110557627851862912" rel="">mentioned</a><span> that under the new system, “We’re getting way more notifications for titles,” but he suspected that was because “people are liberally using the notify tag without realizing that we’re using it as a signal to order.” He is also frustrated that he can no longer contact patrons directly to let them know the library offers the title on a different platform.</span></p><p>Can’t redirect users to another platform anymore? Gosh, how convenient for OverDrive.</p><div><figure><a target="_blank" href="https://www.inaturalist.org/photos/142069914" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg" width="1080" height="1620" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1620,&quot;width&quot;:1080,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:279897,&quot;alt&quot;:&quot;A white-backed vulture perches on a horizontal dead branch against a cloud-covered grey-white sky, head turned in profile. Its beak is huge, black, and downcurved into a wicked point; most of its head and neck are covered with short tan down like fuzzy fur. Each breast feather is individually shaded from a beige center to dark brown edges, and the dark unfeathered crop at the base of its neck is visibly distended from a recent meal. &quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:&quot;https://www.inaturalist.org/photos/142069914&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="A white-backed vulture perches on a horizontal dead branch against a cloud-covered grey-white sky, head turned in profile. Its beak is huge, black, and downcurved into a wicked point; most of its head and neck are covered with short tan down like fuzzy fur. Each breast feather is individually shaded from a beige center to dark brown edges, and the dark unfeathered crop at the base of its neck is visibly distended from a recent meal. " title="A white-backed vulture perches on a horizontal dead branch against a cloud-covered grey-white sky, head turned in profile. Its beak is huge, black, and downcurved into a wicked point; most of its head and neck are covered with short tan down like fuzzy fur. Each breast feather is individually shaded from a beige center to dark brown edges, and the dark unfeathered crop at the base of its neck is visibly distended from a recent meal. " srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9972c33b-1ec5-4f18-aac6-19dfe8c76c61_1080x1620.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This whole thing smelled like enshittification to me, so I kept digging, this time into OverDrive itself. Right away I saw that in June 2020, OverDrive was sold to global investment firm KKR.</p><p>With that sentence, my audience just divided into two types of people:</p><ol><li><p>the ones who (like me, usually) pay no particular attention to the world of “high finance”, don’t recognize the moniker, and so had zero reaction, and</p></li><li><p><span>the ones like my friend who happens to be a business journalist at the </span><em>New York Times</em><span>, whose reaction as soon as I said “KKR” was the aural equivalent of the Munch scream emoji.</span></p></li></ol><p>The private equity firm of Kohlberg Kravis Roberts, I quickly learned, was either the inventor of, or an early pioneer in, basically all the Shitty Business Practices: leveraged buyouts, corporate raiding, vulture capitalism. They’ve been at it since the 1970s and they’re still going strong.</p><p><span>Even in the world of investment capital, where evil is arguably banal, KKR is </span><em><strong>notoriously vile</strong></em><span>.</span></p><p><span>KKR was the subject of the famous 1989 book (and subsequent movie) </span><em>Barbarians at the Gate</em><span>, in which a pair of investigative journalists from the Wall Street Journal detail what one </span><em>Times</em><span> </span><a href="https://www.nytimes.com/1990/01/21/books/the-granddaddy-of-all-takeovers.html" rel="">reviewer</a><span> called the “avarice, malice, and egomania” of KKR’s leveraged buyout of RJR Nabisco with “all the suspense of a first-rate thriller”. The ultimate result: KKR’s private equity barons raked in the cash, while thousands of employees were axed and consumer prices of RJR Nabisco products soared.</span></p><p><span>More recently, KKR teamed up with two other private equity firms to execute a leveraged buyout of Toys ‘R’ Us. They deliberately weighted down the company with a crushing level of debt in order to </span><a href="https://www.thenation.com/article/archive/its-time-to-crack-down-on-the-toys-r-us-vulture-capitalists/" rel="">begin feeding</a><span> on its profits; they sucked out half a billion dollars as the company staggered along for another dozen years. When Toys ‘R’ Us finally collapsed and died in 2018, the vultures flapped off, unconcerned, leaving 33,000 desperate workers unemployed and without severance.</span></p><p><span>Even in the world of investment capital, where evil is arguably banal, KKR is </span><em>notoriously vile</em><span>. They are the World Champions of Grabbing All The Money And Leaving Everyone Else In The Shit.</span></p><p><span>“In the popular imagination, private equity is often portrayed as a vulture, or some other scavenger that feasts on the sick and dying,” </span><a href="https://www.motherjones.com/politics/2022/05/private-equity-buyout-kkr-houdaille/" rel="">writes</a><span> Hannah Levintova in Mother Jones. “But the bulk of the work done by modern-day private equity firms is not to finish off sick companies, but rather to stalk and gut the healthy ones.”</span></p><p><span>Calling them “vampire capitalists” would be more accurate.</span></p><p><span> Enshittified platforms are not an accidental outcome; they are just one of the inevitable dessicated corpses the vampires leave behind.</span></p><p>And these vampire capitalists currently have a chokehold on the digital catalogs of the public library systems of North America.</p><p>OverDrive, of course, does not want you to think they’re the bad guys (or owned and controlled by the bad guys). Their website makes a big deal of their “certified B Corp” status, which is supposed to ensure their “social responsibility”. I do not find this reassuring, for two reasons:</p><ol><li><p><span>The legal terminology around designated “benefit corporations” is full of vague and ambiguous language that </span><a href="https://www-jstor-org.i.ezproxy.nypl.org/stable/44074868?seq=16" rel="">doesn’t have any teeth</a><span>. B corps agree to </span><em>pursue</em><span> a mission other than shareholder profit, but there’s no standard by which they can be required to actually </span><em>achieve</em><span> it. Even the strictest state laws require only that benefit corporations </span><em>consider</em><span> the impact of their decisions on other stakeholders (like customers and workers), after which they can go off and </span><em>act</em><span> as rapaciously as any other corporation.</span></p></li><li><p><span>Any corporation can decide to abandon their B Corp certification without penalty at any point. Just look at Etsy, which loudly trumpeted its B Corp status as a marker of its “commitment to social responsibility” but dropped the designation as soon as it conflicted with shareholder interests. (Predictably, in the five years since, Etsy has been merrily enshittifying away, </span><a href="https://www.npr.org/2022/04/11/1091123928/etsy-strike-2022" rel="">gouging ever more money</a><span> from sellers with one hand while making the experience ever more frustrating for buyers with the other hand.)</span></p></li></ol><p><span>As one library industry publication </span><a href="https://americanlibrariesmagazine.org/blogs/the-scoop/overdrives-new-owners-what-means/" rel="">warned</a><span> in advance of the sale to KKR, “This time, the acquisition of OverDrive is a ‘financial investment,’ in which the buyer, usually a private equity firm or other financial sponsor, expects to increase the value of the company over the short term, typically five to seven years.”</span></p><p>We are now three years into that five-to-seven, making it likely that KKR’s timeframe for completing maximum profit extraction is two to four more years. Typically this is accomplished by levying enormous annual “management fees” on the purchased company, while also forcing it (through Board of Director mandates) to make changes to its operations that will result in short-term profit gains regardless of long-term instability. When they believe the short-term gains are maxed out, the investment firm sells off the company again, leaving it with a giant pile of unsustainable debt from the leveraged buyout and often sending it into bankruptcy.</p><p><span>I don’t know what KKR’s exact game plan is, although gouging more money from libraries for a reduced feature-set is clearly part of it. I am certainly suspicious of the fact that they appear to be setting up to gather more user data than ever while passing on less of that data to libraries, their ostensible customers. For example, I can easily imagine OverDrive matching a bunch of the sort of general user data that many apps collect (location, age, message content, purchases, interests, etc.) to book- and reading-specific data from the Libby app and selling it to publishers — especially the deep-pocketed Big Five, who I suspect would leap at any chance to level the playing field between themselves and Amazon, which has its own giant consumer spy network full of proprietary data. (“Publishers: Partner with OverDrive to get catalog exposure </span><em>and insights</em><span>”, says the OverDrive website [emphasis added].)</span></p><p>But the one certain thing is that OverDrive, from its monopoly position, has begun the cycle of purposeful enshittification: making their platform worse for both libraries and their patrons with the sole aim of further enriching some of the most rapacious, amoral capitalists on the planet.</p><div><figure><a target="_blank" href="https://www.inaturalist.org/observations/145698304" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg" width="1000" height="750" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:750,&quot;width&quot;:1000,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:137300,&quot;alt&quot;:&quot;A domestic canary stands at the edge of a pool or lake, submerged up to its breast. Its feathers shade from pale butter at the tail to school-bus yellow at the beak. Not much can be seen of the dark ground behind, and the near-black water reflects the canary’s yellow in ripples.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:&quot;https://www.inaturalist.org/observations/145698304&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="A domestic canary stands at the edge of a pool or lake, submerged up to its breast. Its feathers shade from pale butter at the tail to school-bus yellow at the beak. Not much can be seen of the dark ground behind, and the near-black water reflects the canary’s yellow in ripples." title="A domestic canary stands at the edge of a pool or lake, submerged up to its breast. Its feathers shade from pale butter at the tail to school-bus yellow at the beak. Not much can be seen of the dark ground behind, and the near-black water reflects the canary’s yellow in ripples." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe5e1fac0-a42f-47d7-9f35-29b28a1ea8b2_1000x750.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I love public libraries not just because of what they’ve done for me personally, but because they are little socialist oases in the capitalist desert hellscape of twenty-first century America.</p><p>Every extra dollar that KKR sucks out of libraries is another dollar they don’t have for buying books, or for librarian staffing, or for supporting any of the dozens of other small but important services that public libraries provide their local communities, like free access to computers and the internet. Some libraries that already struggle for funding might be starved out of existence.</p><p>The removal of the recommendation feature is the canary in the coal mine.</p><p>And if OverDrive goes belly-up at some point in the future, crushed by KKR’s leveraged debt, it’s going to take down access to the digital catalogs of nearly every public library in North America. Between now and then, I expect the user experience to degrade precipitously. The removal of the recommendation feature, I believe, is the canary in the coal mine.</p><p>In the short term, I would suggest that library patrons find out whether their library has an alternate book recommendation channel, outside of Libby, and use that instead. (Mine has a web form on the non-OverDrive portion of their website, which to my surprise was acknowledged by an actual human librarian, something that never happened when I was using OverDrive recommendation.)</p><p>In the long term … I don’t know. The biggest obstacle I see is neither patrons nor libraries, but publishers. Libraries ultimately have service goals, and some libraries already have a secondary platform (even if OverDrive is the dominant one by far). But corporate publishers have only profit goals, and I imagine OverDrive’s lure of a giant stream of marketing data would continue to be compelling, even if their monopoly was successfully broken.</p><p><span>Alternative platforms already exist: one promising place to start might be the </span><a href="https://thepalaceproject.org/" rel="">Palace Project</a><span> and the associated Palace Marketplace, which right now mostly seems to let libraries buy ebooks and audiobooks from indie authors, and access out-of-copyright classics. The company behind it, Lyrasis, is a 501(c)(3) nonprofit; that doesn’t mean it’s immune to mismanagement, but it’s a better legal framework than a for-profit B corp. And its board is teeming with actual career librarians, instead of one token librarian and a handful of investors and executives, like OverDrive. The Palace app is designed to combine content from multiple vendors, including OverDrive, which could help with transition. But the Palace Project so far has relationships with less than 5% of US libraries.</span></p><p>I don’t have a neat solution to the fact that OverDrive has a functional monopoly in the space, or that it’s now owned by vampires. All I know to do is point at the dead canary and yell as loud as I can.</p><p>I asked my reporter friend how I might go about getting a real journalist to write about it, and she regretfully advised me that she didn’t think it was a big enough story yet to get any professional interest. Once public libraries have actually been devastated by private equity, it’ll be a story.</p><p>It will also be too late.</p><p data-attrs="{&quot;url&quot;:&quot;https://karawynn.substack.com/p/the-coming-enshittification-of-public-libraries?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://karawynn.substack.com/p/the-coming-enshittification-of-public-libraries?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p><p><em><span>Researching, composing, and sourcing informative essays like this one require many, many hours of unpaid work. If you appreciate it and can afford to, please help me continue writing with a </span><strong>Ko-fi tip</strong><span> or a </span><strong>paid Substack subscription</strong><span>. Thank you!</span></em></p><p data-attrs="{&quot;url&quot;:&quot;https://ko-fi.com/karawynnlong&quot;,&quot;text&quot;:&quot;Tip&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://ko-fi.com/karawynnlong" rel=""><span>Tip</span></a></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ocean Heat Record Broken (232 pts)]]></title>
            <link>https://www.bbc.com/news/science-environment-66387537</link>
            <guid>36997834</guid>
            <pubDate>Fri, 04 Aug 2023 10:11:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/science-environment-66387537">https://www.bbc.com/news/science-environment-66387537</a>, See on <a href="https://news.ycombinator.com/item?id=36997834">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="main-content" data-testid="main-content"><article><header></header><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg.webp 240w, https://ichef.bbci.co.uk/news/320/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg.webp 320w, https://ichef.bbci.co.uk/news/480/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg.webp 480w, https://ichef.bbci.co.uk/news/624/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg.webp 624w, https://ichef.bbci.co.uk/news/800/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg.webp 800w, https://ichef.bbci.co.uk/news/976/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg.webp 976w" type="image/webp"><img alt="Diver checking bleached coral" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg 240w, https://ichef.bbci.co.uk/news/320/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg 320w, https://ichef.bbci.co.uk/news/480/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg 480w, https://ichef.bbci.co.uk/news/624/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg 624w, https://ichef.bbci.co.uk/news/800/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg 800w, https://ichef.bbci.co.uk/news/976/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg 976w" src="https://ichef.bbci.co.uk/news/976/cpsprodpb/3434/production/_130646331_coral-gettyimages-1148857258.jpg" width="976" height="549" loading="eager"></picture></span><span role="text"><span>Image source, </span>Getty Images</span></p></figure></div><div data-component="text-block"><p><b>The oceans have hit their hottest ever recorded temperature as they soak up warmth from climate change, with dire implications for our planet's health.</b></p></div><div data-component="text-block"><p>The average daily global sea surface temperature beat a 2016 record this week, according to the EU's climate change service Copernicus.</p></div><div data-component="text-block"><p>It reached 20.96C. That's far above the average for this time of year.</p></div><div data-component="text-block"><p>Oceans are a vital climate regulator. They soak up heat, produce half Earth's oxygen and drive weather patterns.</p></div><div data-component="text-block"><p>Warmer waters have less ability to absorb carbon dioxide, meaning more of that planet-warming gas will stay in the atmosphere. And it can also accelerate the melting of glaciers that flow into the ocean, leading to more sea level rise.</p></div><div data-component="text-block"><p>Hotter oceans and heatwaves disturb marine species like fish and whales as they move in search of cooler waters, upsetting the food chain. Experts warn that fish stocks could be affected.</p></div><div data-component="text-block"><p>Some predatory animals including sharks can become aggressive as they get confused in hotter temperatures.</p></div><div data-component="text-block"><p>"The water feels like a bath when you jump in," says Dr Kathryn Lesneski, who is monitoring a marine heatwave in the Gulf of Mexico for the National Oceanic and Atmospheric Administration. "There is widespread coral bleaching at shallow reefs in Florida and many corals have already died." </p></div><div data-component="text-block"><p>"We are putting oceans under more stress than we have done at any point in history," says Dr Matt Frost, from the Plymouth Marine Lab in the UK, referring to the fact pollution and overfishing also change the oceans.</p></div><div data-component="text-block"><p>Scientists are worried about the timing of this broken record.</p></div><div data-component="text-block"><p>Dr Samantha Burgess, from the Copernicus Climate Change Service, says March should be when the oceans globally are warmest, not August. </p></div><div data-component="text-block"><p>"The fact that we've seen the record now makes me nervous about how much warmer the ocean may get between now and next March," she says.</p></div><div data-component="text-block"><p>"It is sobering to see this change happening so quickly," says Prof Mike Burrows, who is monitoring impacts on Scottish sea shores with the Scottish Association for Marine Science.</p></div><div data-component="text-block"><p>Scientists are investigating why the oceans are so hot right now but say that climate change is making the seas warmer as they absorb most of the heating from greenhouse gas emissions.</p></div><div data-component="text-block"><p>"The more we burn fossil fuels, the more excess heat will be taken out by the oceans, which means the longer it will take to stabilize them and get them back to where they were," explains Dr Burgess.</p></div><div data-component="text-block"><p>The new average temperature record beats one set in 2016 when the naturally occurring climate fluctuation El Niño was in full swing and at its most powerful.</p></div><div data-component="text-block"><p>El Niño happens when warm water rises to the surface off the west coast of South America, pushing up global temperatures.</p></div><div data-component="text-block"><p>Another El Niño has now started but scientists say it is still weak - meaning ocean temperatures are expected to rise further above average in the coming months. </p></div><div data-component="text-block"><p>The broken temperature record follows a series of marine heatwaves this year including in the UK, the North Atlantic, the Mediterranean and the Gulf of Mexico.</p></div><div data-component="text-block"><p>"The marine heatwaves that we're seeing are happening in unusual locations where we haven't expected them," says Prof Burgess.</p></div><div data-component="text-block"><p>In June, temperatures in UK waters were 3C to 5C higher than average, according to the Met Office and the European Space Agency.</p></div><div data-component="text-block"><p>In Florida, sea surface temperatures hit 38.44C last week - comparable to a hot tub. </p></div><div data-component="text-block"><p>Normally temperatures should be between 23C and 31C, according to the National Oceanic and Atmospheric Administration (NOAA).</p></div><div data-component="text-block"><p>Marine heatwaves doubled in frequency between 1982 and 2016, and have become more intense and longer since the 1980s, <a href="https://www.ipcc.ch/report/ar6/wg1/chapter/chapter-9/">according to the Intergovernmental Panel on Climate Change (IPCC).</a></p></div><div data-component="text-block"><p>While air temperatures have seen some dramatic increases in recent years, the oceans take longer to heat up, even though they have absorbed 90% of the Earth's warming from greenhouse gas emissions.</p></div><div data-component="text-block"><p>But there are signs now that ocean temperatures may be catching up. One theory is a lot of the heat has been stored in ocean depths, which is now coming to the surface, possibly linked to El Niño, says Dr Karina von Schuckmann at Mercator Ocean International.</p></div><div data-component="text-block"><p>While scientists have known that the sea surface would continue to warm up because of greenhouse gas emissions, they are still investigating exactly why temperatures have surged so far above previous years.</p></div><section data-component="links-block"><p><h2>More on this story</h2></p></section></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Andrew McCalip demonstrates synthesis of LK99 (487 pts)]]></title>
            <link>https://twitter.com/andrewmccalip/status/1687405505604734978</link>
            <guid>36997821</guid>
            <pubDate>Fri, 04 Aug 2023 10:10:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/andrewmccalip/status/1687405505604734978">https://twitter.com/andrewmccalip/status/1687405505604734978</a>, See on <a href="https://news.ycombinator.com/item?id=36997821">Hacker News</a></p>
Couldn't get https://twitter.com/andrewmccalip/status/1687405505604734978: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Mozilla VPN: CVE-2023-4104: vpndaemon wrongly implements Polkit authentication (203 pts)]]></title>
            <link>https://www.openwall.com/lists/oss-security/2023/08/03/1</link>
            <guid>36997067</guid>
            <pubDate>Fri, 04 Aug 2023 08:25:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openwall.com/lists/oss-security/2023/08/03/1">https://www.openwall.com/lists/oss-security/2023/08/03/1</a>, See on <a href="https://news.ycombinator.com/item?id=36997067">Hacker News</a></p>
<div id="readability-page-1" class="page">


<table>
<tbody><tr>

<td>
<a href="https://www.openwall.com/"><img src="https://www.openwall.com/logo.png" width="182" height="80" alt="Openwall"></a>
</td><td>
<div>
<ul>
<li><a href="https://www.openwall.com/">Products</a>
<ul>
<li><a href="https://www.openwall.com/Owl/">Openwall GNU/*/Linux &nbsp; <i>server OS</i></a>
</li><li><a href="https://www.openwall.com/lkrg/">Linux Kernel Runtime Guard</a>
</li><li><a href="https://www.openwall.com/john/">John the Ripper &nbsp; <i>password cracker</i></a>
<ul>
<li><a href="https://www.openwall.com/john/">Free &amp; Open Source for any platform</a>
</li><li><a href="https://www.openwall.com/john/cloud/">in the cloud</a>
</li><li><a href="https://www.openwall.com/john/pro/linux/">Pro for Linux</a>
</li><li><a href="https://www.openwall.com/john/pro/macosx/">Pro for macOS</a>
</li></ul>
</li><li><a href="https://www.openwall.com/wordlists/">Wordlists &nbsp; <i>for password cracking</i></a>
</li><li><a href="https://www.openwall.com/passwdqc/">passwdqc &nbsp; <i>policy enforcement</i></a>
<ul>
<li><a href="https://www.openwall.com/passwdqc/">Free &amp; Open Source for Unix</a>
</li><li><a href="https://www.openwall.com/passwdqc/windows/">Pro for Windows (Active Directory)</a>
</li></ul>
</li><li><a href="https://www.openwall.com/yescrypt/">yescrypt &nbsp; <i>KDF &amp; password hashing</i></a>
</li><li><a href="https://www.openwall.com/yespower/">yespower &nbsp; <i>Proof-of-Work (PoW)</i></a>
</li><li><a href="https://www.openwall.com/crypt/">crypt_blowfish &nbsp; <i>password hashing</i></a>
</li><li><a href="https://www.openwall.com/phpass/">phpass &nbsp; <i>ditto in PHP</i></a>
</li><li><a href="https://www.openwall.com/tcb/">tcb &nbsp; <i>better password shadowing</i></a>
</li><li><a href="https://www.openwall.com/pam/">Pluggable Authentication Modules</a>
</li><li><a href="https://www.openwall.com/scanlogd/">scanlogd &nbsp; <i>port scan detector</i></a>
</li><li><a href="https://www.openwall.com/popa3d/">popa3d &nbsp; <i>tiny POP3 daemon</i></a>
</li><li><a href="https://www.openwall.com/blists/">blists &nbsp; <i>web interface to mailing lists</i></a>
</li><li><a href="https://www.openwall.com/msulogin/">msulogin &nbsp; <i>single user mode login</i></a>
</li><li><a href="https://www.openwall.com/php_mt_seed/">php_mt_seed &nbsp; <i>mt_rand() cracker</i></a>
</li></ul>
</li><li><a href="https://www.openwall.com/services/">Services</a>
</li><li id="narrow-li-1"><a>Publications</a>
<ul>
<li><a href="https://www.openwall.com/articles/">Articles</a>
</li><li><a href="https://www.openwall.com/presentations/">Presentations</a>
</li></ul>
</li><li><a>Resources</a>
<ul>
<li><a href="https://www.openwall.com/lists/">Mailing lists</a>
</li><li><a href="https://openwall.info/wiki/">Community wiki</a>
</li><li><a href="https://github.com/openwall">Source code repositories (GitHub)</a>
</li><li><a href="https://cvsweb.openwall.com/">Source code repositories (CVSweb)</a>
</li><li><a href="https://www.openwall.com/mirrors/">File archive &amp; mirrors</a>
</li><li><a href="https://www.openwall.com/signatures/">How to verify digital signatures</a>
</li><li><a href="https://www.openwall.com/ove/">OVE IDs</a>
</li></ul>
</li><li id="last-li"><a href="https://www.openwall.com/news">What's new</a>
</li></ul>
</div>


</td></tr></tbody></table>




<a href="https://www.openwall.com/lists/oss-security/2023/08/02/1">[&lt;prev]</a> <a href="https://www.openwall.com/lists/oss-security/2023/08/03/2">[next&gt;]</a> <a href="https://www.openwall.com/lists/oss-security/2023/08/03/">[day]</a> <a href="https://www.openwall.com/lists/oss-security/2023/08/">[month]</a> <a href="https://www.openwall.com/lists/oss-security/2023/">[year]</a> <a href="https://www.openwall.com/lists/oss-security/">[list]</a>
<pre>Date: Thu, 3 Aug 2023 12:08:05 +0200
From: Matthias Gerstner &lt;mgerstner@...e.de&gt;
To: oss-security@...ts.openwall.com
Subject: Mozilla VPN: CVE-2023-4104: Privileged vpndaemon on Linux wrongly
 and incompletely implements Polkit authentication

Hello list,

an openSUSE community packager wanted to add the Mozilla VPN client [1] to
openSUSE Tumbleweed, which required a review [2] by the SUSE security team,
as it contains a privileged D-Bus service running as root and a Polkit policy.
In the course of this review we noticed a broken and otherwise lacking Polkit
authorization logic in the privileged `mozillavpn linuxdaemon` process.

We publish this report today, because the maximum embargo period of 90 days we
offer has been exceeded. Most of the issues mentioned in this report are
currently not addressed by upstream, as is outlined in more detail below.

Introduction
============

The Mozilla VPN client is a multi-platform VPN solution offered by Mozilla
based on technologies like Wireguard. For this review we did not look in
detail into the VPN protocol specifics and cryptography, but focused on the
privileged operations performed by the Mozilla VPN client daemon on Linux.

The findings in this report relate to the Mozilla VPN client version 2.14.1.

Broken Polkit Authentication Check
==================================

The code for the privileged component in Mozilla VPN on Linux is mostly
found in mozillavpn-2.14.1/src/apps/vpn/platforms/linux. The D-Bus
method callbacks are found in src/apps/vpn/platforms/linux/daemon/dbusservice.cpp.

Mozilla VPN ships a Polkit policy with the following content:

```
 &lt;action id="org.mozilla.vpn.activate"&gt;
    &lt;description&gt;Activate the Mozilla VPN&lt;/description&gt;
    &lt;message&gt;Activate the Mozilla VPN&lt;/message&gt;
    &lt;defaults&gt;
      &lt;allow_inactive&gt;no&lt;/allow_inactive&gt;
      &lt;allow_active&gt;auth_admin&lt;/allow_active&gt;
    &lt;/defaults&gt;
  &lt;/action&gt;

  &lt;action id="org.mozilla.vpn.deactivate"&gt;
    &lt;description&gt;Deactivate the Mozilla VPN&lt;/description&gt;
    &lt;message&gt;Deactivate the Mozilla VPN&lt;/message&gt;
    &lt;defaults&gt;
      &lt;allow_inactive&gt;no&lt;/allow_inactive&gt;
      &lt;allow_active&gt;auth_admin&lt;/allow_active&gt;
    &lt;/defaults&gt;
  &lt;/action&gt;
```

Of these two privileged actions, the Polkit authorization check is only
performed in the `activate` D-Bus method, while no such check is present
at all in the `deactivate` method.

For the activate D-Bus method the Polkit check is implemented in
`PolkitHelper::checkAuthorization()` in
src/apps/vpn/platforms/linux/daemon/polkithelper.cpp line 58:

```
h.m_subject = polkit_unix_process_new_for_owner(getpid(), 0, -1);
```

The UNIX process Polkit subject is deprecated and shouldn't be used
anymore for most cases, because it affected by race conditions by design.
Instead the D-Bus sender subject should be used, which is based on the UNIX
domain socket used by D-Bus, to obtain the credentials of the client via the
Linux kernel.

Even worse, the UNIX process Polkit subject is initialized here using
`getpid()` as the process ID and `-1` for the user ID. The latter asks
Polkit to determine the given PID's user ID by looking into /proc.
In summary this asks Polkit to check whether the privileged Mozilla VPN
D-Bus service _itself_ is authorized to perform the action. Since The
Mozilla VPN D-Bus service runs as root, this will always be true.

This can be verified from the command line using a minimal pseudo
configuration like this:

    nobody$ gdbus call -y -d org.mozilla.vpn.dbus -o / -m org.mozilla.vpn.dbus.activate \
        '{"privateKey": "nothing", "serverPublicKey": "nothing", "serverPort": 1234, "deviceIpv4Address": "127.0.0.2", "serverIpv4AddrIn": "127.0.0.3", "allowedIPAddressRanges": []}'

This D-Bus call will work without any authentication, even if a low privilege
user account like `nobody` runs it.

The impact is that arbitrary local users can configure arbitrary VPN
setups using Mozilla VPN and thus possibly redirect network traffic to
malicious parties, pretend that a secure VPN is present while it
actually isn't, perform a denial-of-service against an existing VPN connection
or other integrity violations.

Since the daemon does not perform any file system or otherwise dangerous
operations besides of the network setup, we don't see a possibility to
escalate privileges beyond the network aspect using this attack vector.

Missing Polkit Authentication Checks
====================================

Apart from the fact that the existing Polkit authentication check is
flawed, there isn't even an attempt to secure any of the other D-Bus
methods offered by the Mozilla VPN D-Bus service.

For the following methods Polkit authorization checks should be
considered, or their scope should be limited by other means:

- getLogs(): returns potentially problematic world-readable log data, even
  debug logs, e.g. about other users' activities in the system. The
  same data is publicly available in /var/log/mozillavpn.txt. These
  logs allow to track what applications other users start, for example.

  Log data of system services should generally not be world readable, so
  this item refers to both the D-Bus API and the logfile in /var/log.
  This is an information leak (especially since there is also debug data
  found here) that might facilitate other security issues or might allow
  other users in the system to deduce what a Mozilla VPN user is doing.

- cleanupLogs(): allows everybody to clear the current logs. This should
  be restricted to authorized users, otherwise it might be used to clear
  traces of attacks etc.

- runningApps(): this leaks information from other users'
  sessions and their apps to everybody in the system. Most of this data
  is probably also available via `ps` or /proc, respectively. Some
  hardened systems may not allow this, though. A solution might be to
  only return data here that belongs to the user making the request on
  D-Bus.

- firewallApp(): allows to put arbitrary appIDs into split tunneling /
  exclude, even for other users. This should be restricted to
  applications of the requesting D-Bus user.

- firewallClear(): clears the exclude list. should also be restricted to
  entries affecting the calling user.

- deactivate(): everybody may shutdown the whole VPN. There is a
  deactivate() Polkit action declared but is is never used, as was explained
  before already.

Suggested Fixes
===============

From looking at the D-Bus implementation it is apparent that Mozilla VPN on
Linux doesn't have a proper multi user concept. We recommended to upstream, as
a simple way out of this, to store the UID of the user that successfully
authenticates during `activate()` and then only allow the other D-Bus methods
for the same user until `deactivate()` is called. Mixing different user
contexts would be avoided this way.

For this to work, of course, all D-Bus methods would need to be properly
Polkit authenticated, based on the D-Bus sender subject.

Furthermore we observed that the Mozilla VPN linux daemon only uses its high
privileges for two things:

- setting up the network
- monitoring user sessions and attaching to their D-Bus session busses
  to keep track of running applications ("AppTracker" class).

It could be considered running this service not as root but only with
the `CAP_NET_ADMIN` capability. This would limit the potential attack
surface considerably.

Upstream Fixes
==============

As a first measure Upstream removed the use Polkit authentication completely [3].
This change will be included in an upcoming v2.16.0 release. This
doesn't really change anything in the security posture of the privileged
daemon on Linux though, since all D-Bus APIs are still unauthenticated and
usable by any local user.

In another effort upstream is attempting to introduce better authorization
controls on the D-Bus API by requiring the caller to possess `CAP_NET_ADMIN`
permission, or matching the UID of the user that activated the connection. This
is anticipated to be included in a 2.17.0 release, for which no release date
is known yet (supposedly in one to two months).

Whether the minor information leaks outlined above like world readable logs
and keeping track of other users' activities will be addressed by this is
unclear.

Timeline and Disclosure Process
===============================

2023-05-04: We privately shared the findings with security@...illa.org,
offering coordinated disclosure according to the openSUSE disclosure policy.
Upstream created a private bugzilla bug [4] to keep track of the issue.

Until 2023-06-12: There has been a lack of communication by upstream. Relevant
questions about the disclosure process remained unanswered, there was no
formal reply to our report and no wishes have been expressed about how to
continue the coordinated disclosure, or what the next steps would be.

2023-06-12: We learned that the embargo over this issue was violated by
upstream via a GitHub PR [3] and, inspired by that, our community packager
followed suit via another GitHub PR [5].

We asked upstream once more what their intentions are regarding coordinated
disclosure but did not get a proper response.

2023-08-02: Even though the embargo was already violated and there was no
clear statement from upstream about the coordinated disclosure process, we
held back the full report until the 90 days maximum embargo time we offer
elapsed.

We tried to get additional information from upstream once more and only now
learned more details about their plans on how to address this, which we
outlined in the previous section.

2023-08-03: Our continued requests to assign a CVE for this issue (Mozilla is a
CVE CNA) resulted in a last minute assignment of CVE-2023-4104.

References
==========

[1]: <a href="https://github.com/mozilla-mobile/mozilla-vpn-client" rel="nofollow">https://github.com/mozilla-mobile/mozilla-vpn-client</a>
[2]: <a href="https://bugzilla.suse.com/show_bug.cgi?id=1209921" rel="nofollow">https://bugzilla.suse.com/show_bug.cgi?id=1209921</a>
[3]: <a href="https://github.com/mozilla-mobile/mozilla-vpn-client/pull/7055" rel="nofollow">https://github.com/mozilla-mobile/mozilla-vpn-client/pull/7055</a>
[4]: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1831318" rel="nofollow">https://bugzilla.mozilla.org/show_bug.cgi?id=1831318</a>
[5]: <a href="https://github.com/mozilla-mobile/mozilla-vpn-client/pull/7151" rel="nofollow">https://github.com/mozilla-mobile/mozilla-vpn-client/pull/7151</a>

Best Regards

Matthias

-- 
Matthias Gerstner &lt;matthias.gerstner@...e.de&gt;
Security Engineer
<a href="https://www.suse.com/security" rel="nofollow">https://www.suse.com/security</a>
GPG Key ID: 0x14C405C971923553
 
SUSE Software Solutions Germany GmbH
HRB 36809, AG Nürnberg
Geschäftsführer: Ivo Totev, Andrew McDonald, Werner Knoblich

<span><strong>Download attachment "</strong><a href="https://www.openwall.com/lists/oss-security/2023/08/03/1/1" rel="nofollow" download="">signature.asc</a><strong>" of type "</strong>application/pgp-signature<strong>" (834 bytes)</strong></span>
</pre>
<p><a href="http://www.openwall.com/blists/">Powered by blists</a> - <a href="http://lists.openwall.net/">more mailing lists</a>


</p><p>
Please check out the
<a href="https://oss-security.openwall.org/wiki/">
Open Source Software Security Wiki</a>, which is counterpart to this
<a href="https://oss-security.openwall.org/wiki/mailing-lists/oss-security">mailing list</a>.
</p><p>
Confused about <a href="https://www.openwall.com/lists/">mailing lists</a> and their use?
<a href="https://en.wikipedia.org/wiki/Electronic_mailing_list">Read about mailing lists on Wikipedia</a>
and check out these
<a href="https://www.complang.tuwien.ac.at/anton/mail-news-errors.html">guidelines on proper formatting of your messages</a>.
</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Zig 0.11 (223 pts)]]></title>
            <link>https://ziglang.org/download/0.11.0/release-notes.html</link>
            <guid>36995735</guid>
            <pubDate>Fri, 04 Aug 2023 05:13:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ziglang.org/download/0.11.0/release-notes.html">https://ziglang.org/download/0.11.0/release-notes.html</a>, See on <a href="https://news.ycombinator.com/item?id=36995735">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="contents">
    
    <p><img alt="Zero the Ziguana" src="https://ziglang.org/img/Zero_1.svg"></p><p>
    <a href="https://ziglang.org/download/#release-0.11.0">Download &amp; Documentation</a>
    </p>
    <p>
    Zig is a general-purpose programming language and toolchain for maintaining
    <strong>robust</strong>, <strong>optimal</strong>, and <strong>reusable</strong> software.
    </p>
    <p>
    Backed by the <a href="https://ziglang.org/zsf/">Zig Software Foundation</a>,
    the project is <strong>financially sustainable</strong>. These core team members
    are paid for their time:
    </p>
    <ul>
      <li><a href="https://andrewkelley.me/">Andrew Kelley</a></li>
      <li><a href="https://kristoff.it/">Loris Cro</a></li>
      <li><a href="http://www.jakubkonka.com/">Jakub Konka</a></li>
      <li><a href="https://vexu.eu/">Veikka Tuominen</a></li>
      <li><a href="https://github.com/jacobly0">Jacob Young</a></li>
    </ul>
    <p>
    Please consider a <a href="https://ziglang.org/zsf/">recurring donation to the ZSF</a>
    to help us pay more contributors!
    </p>
    <p>
    This release features <strong>8 months of work</strong>:
    changes from <strong>269 different contributors</strong>, spread among
    <strong>4457 commits</strong>. It is the début of <a href="#Package-Management">Package Management</a>.</p>
    <h2 id="Table-of-Contents"><a href="#toc-Table-of-Contents">Table of Contents</a> <a href="#Table-of-Contents">§</a></h2>

    

    <ul>
        <li><a id="toc-Table-of-Contents" href="#Table-of-Contents">Table of Contents</a></li>
        <li><a id="toc-Support-Table" href="#Support-Table">Support Table</a>
        <ul>
            <li><a id="toc-Tier-System" href="#Tier-System">Tier System</a>
            <ul>
                <li><a id="toc-Tier-1-Support" href="#Tier-1-Support">Tier 1 Support</a></li>
                <li><a id="toc-Tier-2-Support" href="#Tier-2-Support">Tier 2 Support</a></li>
                <li><a id="toc-Tier-3-Support" href="#Tier-3-Support">Tier 3 Support</a></li>
                <li><a id="toc-Tier-4-Support" href="#Tier-4-Support">Tier 4 Support</a></li>
            </ul></li>
            <li><a id="toc-CPU-Architectures" href="#CPU-Architectures">CPU Architectures</a>
            <ul>
                <li><a id="toc-x86" href="#x86">x86</a></li>
                <li><a id="toc-ARM" href="#ARM">ARM</a></li>
                <li><a id="toc-WebAssembly" href="#WebAssembly">WebAssembly</a>
                <ul>
                    <li><a id="toc-WasmAllocator" href="#WasmAllocator">WasmAllocator</a></li>
                </ul></li>
                <li><a id="toc-PowerPC" href="#PowerPC">PowerPC</a></li>
                <li><a id="toc-AVR" href="#AVR">AVR</a></li>
                <li><a id="toc-GPGPU" href="#GPGPU">GPGPU</a></li>
            </ul></li>
            <li><a id="toc-Operating-Systems" href="#Operating-Systems">Operating Systems</a>
            <ul>
                <li><a id="toc-Windows" href="#Windows">Windows</a>
                <ul>
                    <li><a id="toc-Resource-Files-res" href="#Resource-Files-res">Resource Files (.res)</a></li>
                    <li><a id="toc-Support-UNC-Rooted-Drive-Relative-and-NamespacedDevice-Paths" href="#Support-UNC-Rooted-Drive-Relative-and-NamespacedDevice-Paths">Support UNC, Rooted, Drive-Relative, and Namespaced/Device Paths</a></li>
                    <li><a id="toc-ARM64-Windows" href="#ARM64-Windows">ARM64 Windows</a></li>
                </ul></li>
                <li><a id="toc-Linux" href="#Linux">Linux</a></li>
                <li><a id="toc-macOS" href="#macOS">macOS</a></li>
                <li><a id="toc-FreeBSD" href="#FreeBSD">FreeBSD</a></li>
                <li><a id="toc-OpenBSD" href="#OpenBSD">OpenBSD</a></li>
                <li><a id="toc-NetBSD" href="#NetBSD">NetBSD</a></li>
                <li><a id="toc-WASI" href="#WASI">WASI</a>
                <ul>
                    <li><a id="toc-Give-Executable-Bit-to-wasm-Executables" href="#Give-Executable-Bit-to-wasm-Executables">Give Executable Bit to wasm Executables</a></li>
                </ul></li>
                <li><a id="toc-UEFI" href="#UEFI">UEFI</a></li>
                <li><a id="toc-Plan9" href="#Plan9">Plan9</a></li>
            </ul></li>
        </ul></li>
        <li><a id="toc-Documentation" href="#Documentation">Documentation</a>
        <ul>
            <li><a id="toc-Language-Reference" href="#Language-Reference">Language Reference</a></li>
            <li><a id="toc-Autodoc" href="#Autodoc">Autodoc</a>
            <ul>
                <li><a id="toc-New-Search-System" href="#New-Search-System">New Search System</a></li>
                <li><a id="toc-Other-Improvements" href="#Other-Improvements">Other Improvements</a></li>
            </ul></li>
        </ul></li>
        <li><a id="toc-Language-Changes" href="#Language-Changes">Language Changes</a>
        <ul>
            <li><a id="toc-Peer-Type-Resolution-Improvements" href="#Peer-Type-Resolution-Improvements">Peer Type Resolution Improvements</a></li>
            <li><a id="toc-Multi-Object-For-Loops" href="#Multi-Object-For-Loops">Multi-Object For Loops</a></li>
            <li><a id="toc-memcpy-and-memset" href="#memcpy-and-memset">@memcpy and @memset</a></li>
            <li><a id="toc-min-and-max" href="#min-and-max">@min and @max</a></li>
            <li><a id="toc-trap" href="#trap">@trap</a></li>
            <li><a id="toc-inComptime" href="#inComptime">@inComptime</a></li>
            <li><a id="toc-Split-qualCast-into-constCast-and-volatileCast" href="#Split-qualCast-into-constCast-and-volatileCast">Split @qualCast into @constCast and @volatileCast</a></li>
            <li><a id="toc-Rename-Casting-Builtins" href="#Rename-Casting-Builtins">Rename Casting Builtins</a></li>
            <li><a id="toc-Cast-Inference" href="#Cast-Inference">Cast Inference</a>
            <ul>
                <li><a id="toc-Pointer-Casts" href="#Pointer-Casts">Pointer Casts</a></li>
                <li><a id="toc-splat" href="#splat">@splat</a></li>
            </ul></li>
            <li><a id="toc-Tuple-Type-Declarations" href="#Tuple-Type-Declarations">Tuple Type Declarations</a></li>
            <li><a id="toc-Concatenation-of-Arrays-and-Tuples" href="#Concatenation-of-Arrays-and-Tuples">Concatenation of Arrays and Tuples</a></li>
            <li><a id="toc-Allow-Indexing-Tuple-and-Vector-Pointers" href="#Allow-Indexing-Tuple-and-Vector-Pointers">Allow Indexing Tuple and Vector Pointers</a></li>
            <li><a id="toc-Overflow-Builtins-Return-Tuples" href="#Overflow-Builtins-Return-Tuples">Overflow Builtins Return Tuples</a></li>
            <li><a id="toc-Slicing-By-Length" href="#Slicing-By-Length">Slicing By Length</a></li>
            <li><a id="toc-Inline-Function-Call-Comptime-Propagation" href="#Inline-Function-Call-Comptime-Propagation">Inline Function Call Comptime Propagation</a></li>
            <li><a id="toc-Exporting-C-Variadic-Functions" href="#Exporting-C-Variadic-Functions">Exporting C Variadic Functions</a></li>
            <li><a id="toc-Added-c_char-Type" href="#Added-c_char-Type">Added c_char Type</a></li>
            <li><a id="toc-Forbid-Runtime-Operations-in-comptime-Blocks-" href="#Forbid-Runtime-Operations-in-comptime-Blocks-">Forbid Runtime Operations in comptime Blocks </a></li>
            <li><a id="toc-intFromBool-always-returns-u1" href="#intFromBool-always-returns-u1">@intFromBool always returns u1</a></li>
            <li><a id="toc-fieldParentPtr-Supports-Unions" href="#fieldParentPtr-Supports-Unions">@fieldParentPtr Supports Unions</a></li>
            <li><a id="toc-typeInfo-No-Longer-Returns-Private-Declarations" href="#typeInfo-No-Longer-Returns-Private-Declarations">@typeInfo No Longer Returns Private Declarations</a></li>
            <li><a id="toc-Zero-Sized-Fields-Allowed-in-Extern-Structs" href="#Zero-Sized-Fields-Allowed-in-Extern-Structs">Zero-Sized Fields Allowed in Extern Structs</a></li>
            <li><a id="toc-Eliminate-Bound-Functions" href="#Eliminate-Bound-Functions">Eliminate Bound Functions</a></li>
            <li><a id="toc-call-Stack" href="#call-Stack">@call Stack</a></li>
            <li><a id="toc-Allow-Tautological-Integer-Comparisons" href="#Allow-Tautological-Integer-Comparisons">Allow Tautological Integer Comparisons</a></li>
            <li><a id="toc-Forbid-Source-Files-Being-Part-of-Multiple-Modules" href="#Forbid-Source-Files-Being-Part-of-Multiple-Modules">Forbid Source Files Being Part of Multiple Modules</a></li>
            <li><a id="toc-Single-Item-Array-Pointers-Gain-ptr-Field" href="#Single-Item-Array-Pointers-Gain-ptr-Field">Single-Item Array Pointers Gain .ptr Field</a></li>
            <li><a id="toc-Allow-Method-Call-Syntax-on-Optional-Pointers" href="#Allow-Method-Call-Syntax-on-Optional-Pointers">Allow Method Call Syntax on Optional Pointers</a></li>
            <li><a id="toc-comptime-Function-Calls-No-Longer-Cause-Runtime-Analysis" href="#comptime-Function-Calls-No-Longer-Cause-Runtime-Analysis">comptime Function Calls No Longer Cause Runtime Analysis</a></li>
            <li><a id="toc-Multi-Item-Switch-Prong-Type-Coercion" href="#Multi-Item-Switch-Prong-Type-Coercion">Multi-Item Switch Prong Type Coercion</a></li>
            <li><a id="toc-Allow-Functions-to-Return-null-and-undefined" href="#Allow-Functions-to-Return-null-and-undefined">Allow Functions to Return null and undefined</a></li>
            <li><a id="toc-Generic-Function-Calls" href="#Generic-Function-Calls">Generic Function Calls</a></li>
            <li><a id="toc-Naked-Functions" href="#Naked-Functions">Naked Functions</a></li>
            <li><a id="toc-embedFile-Supports-Module-Mapped-Names" href="#embedFile-Supports-Module-Mapped-Names">@embedFile Supports Module-Mapped Names</a></li>
        </ul></li>
        <li><a id="toc-Standard-Library" href="#Standard-Library">Standard Library</a>
        <ul>
            <li><a id="toc-Compile-Time-Configuration-Consolidated" href="#Compile-Time-Configuration-Consolidated">Compile-Time Configuration Consolidated</a></li>
            <li><a id="toc-Memory-Allocation" href="#Memory-Allocation">Memory Allocation</a>
            <ul>
                <li><a id="toc-Allow-Shrink-To-Fail" href="#Allow-Shrink-To-Fail">Allow Shrink To Fail</a></li>
            </ul></li>
            <li><a id="toc-Strings" href="#Strings">Strings</a>
            <ul>
                <li><a id="toc-Restrict-memspan-and-memlen-to-Sentinel-Terminated-Pointers" href="#Restrict-memspan-and-memlen-to-Sentinel-Terminated-Pointers">Restrict mem.span and mem.len to Sentinel-Terminated Pointers</a></li>
            </ul></li>
            <li><a id="toc-Math" href="#Math">Math</a></li>
            <li><a id="toc-File-System" href="#File-System">File System</a></li>
            <li><a id="toc-Data-Structures" href="#Data-Structures">Data Structures</a></li>
            <li><a id="toc-Sorting" href="#Sorting">Sorting</a></li>
            <li><a id="toc-Compression" href="#Compression">Compression</a></li>
            <li><a id="toc-Crypto" href="#Crypto">Crypto</a>
            <ul>
                <li><a id="toc-New-Features" href="#New-Features">New Features</a></li>
                <li><a id="toc-Breaking-Changes" href="#Breaking-Changes">Breaking Changes</a></li>
                <li><a id="toc-Keccak" href="#Keccak">Keccak</a></li>
                <li><a id="toc-Kyber" href="#Kyber">Kyber</a></li>
                <li><a id="toc-Constant-Time-Allocation-Free-Field-Arithmetic" href="#Constant-Time-Allocation-Free-Field-Arithmetic">Constant-Time, Allocation-Free Field Arithmetic</a></li>
                <li><a id="toc-Configurable-Side-Channels-Mitigations" href="#Configurable-Side-Channels-Mitigations">Configurable Side Channels Mitigations</a></li>
                <li><a id="toc-Hello-Ascon-Farewell-to-Gimli-and-Xoodoo" href="#Hello-Ascon-Farewell-to-Gimli-and-Xoodoo">Hello Ascon; Farewell to Gimli and Xoodoo</a></li>
                <li><a id="toc-stdcrypto-Bug-Fixes" href="#stdcrypto-Bug-Fixes">std.crypto Bug Fixes</a></li>
                <li><a id="toc-Performance-Improvements" href="#Performance-Improvements">Performance Improvements</a></li>
            </ul></li>
            <li><a id="toc-Concurrency" href="#Concurrency">Concurrency</a></li>
            <li><a id="toc-Networking" href="#Networking">Networking</a>
            <ul>
                <li><a id="toc-TLS-Client" href="#TLS-Client">TLS Client</a></li>
                <li><a id="toc-HTTP-Client" href="#HTTP-Client">HTTP Client</a></li>
                <li><a id="toc-Ignore-SIGPIPE-by-Default" href="#Ignore-SIGPIPE-by-Default">Ignore SIGPIPE by Default</a></li>
            </ul></li>
            <li><a id="toc-Testing" href="#Testing">Testing</a></li>
            <li><a id="toc-Debugging" href="#Debugging">Debugging</a>
            <ul>
                <li><a id="toc-Stack-Unwinding" href="#Stack-Unwinding">Stack Unwinding</a></li>
                <li><a id="toc-External-Debug-Info" href="#External-Debug-Info">External Debug Info</a></li>
            </ul></li>
            <li><a id="toc-Formatted-Printing" href="#Formatted-Printing">Formatted Printing</a></li>
            <li><a id="toc-JSON" href="#JSON">JSON</a>
            <ul>
                <li><a id="toc-codeparsecode-replaced-by-codeparseFromSlicecode-or-other-codeparseFromcode" href="#codeparsecode-replaced-by-codeparseFromSlicecode-or-other-codeparseFromcode"><code>parse</code> replaced by <code>parseFromSlice</code> or other <code>parseFrom*</code></a>
                <ul>
                    <li><a id="toc-codeparseFreecode-replaced-by-codeParsedTdeinitcode" href="#codeparseFreecode-replaced-by-codeParsedTdeinitcode"><code>parseFree</code> replaced by <code>Parsed(T).deinit()</code></a></li>
                </ul></li>
                <li><a id="toc-codeParserparsecode-replaced-by-codeparseFromSlicecode-into-codeValuecode" href="#codeParserparsecode-replaced-by-codeparseFromSlicecode-into-codeValuecode"><code>Parser.parse</code> replaced by <code>parseFromSlice</code> into <code>Value</code></a>
                <ul>
                    <li><a id="toc-codeValueTreecode-replaced-by-codeParsedValuecode" href="#codeValueTreecode-replaced-by-codeParsedValuecode"><code>ValueTree</code> replaced by <code>Parsed(Value)</code></a></li>
                </ul></li>
                <li><a id="toc-codewriteStreamcode-API-simplification" href="#codewriteStreamcode-API-simplification"><code>writeStream</code> API simplification</a>
                <ul>
                    <li><a id="toc-Custom-codejsonStringifycode-signature-changed" href="#Custom-codejsonStringifycode-signature-changed">Custom <code>jsonStringify</code> signature changed</a></li>
                    <li><a id="toc-codestringifycode-limits-nesting-to-256-by-default" href="#codestringifycode-limits-nesting-to-256-by-default"><code>stringify</code> limits nesting to 256 by default</a></li>
                </ul></li>
                <li><a id="toc-codeStringifyOptionscode-overhauled" href="#codeStringifyOptionscode-overhauled"><code>StringifyOptions</code> overhauled</a></li>
                <li><a id="toc-codeTokenStreamcode-replaced-by-codeScannercode" href="#codeTokenStreamcode-replaced-by-codeScannercode"><code>TokenStream</code> replaced by <code>Scanner</code></a></li>
                <li><a id="toc-codeStreamingParsercode-replaced-by-codeReadercode" href="#codeStreamingParsercode-replaced-by-codeReadercode"><code>StreamingParser</code> replaced by <code>Reader</code></a></li>
                <li><a id="toc-parsestringify-for-codeunioncode-types" href="#parsestringify-for-codeunioncode-types">parse/stringify for <code>union</code> types</a></li>
                <li><a id="toc-An-allocator-is-always-required-for-parsing-now" href="#An-allocator-is-always-required-for-parsing-now">An allocator is always required for parsing now</a></li>
            </ul></li>
            <li><a id="toc-posix_spawn-Considered-Harmful" href="#posix_spawn-Considered-Harmful">posix_spawn Considered Harmful</a></li>
        </ul></li>
        <li><a id="toc-Build-System" href="#Build-System">Build System</a>
        <ul>
            <li><a id="toc-Terminology-Changes" href="#Terminology-Changes">Terminology Changes</a></li>
            <li><a id="toc-Rename-Types-and-Functions" href="#Rename-Types-and-Functions">Rename Types and Functions</a></li>
            <li><a id="toc-Target-and-Optimization" href="#Target-and-Optimization">Target and Optimization</a></li>
            <li><a id="toc-Package-Management" href="#Package-Management">Package Management</a></li>
            <li><a id="toc-Install-and-Run-Executables" href="#Install-and-Run-Executables">Install and Run Executables</a></li>
            <li><a id="toc-Compiler-Protocol" href="#Compiler-Protocol">Compiler Protocol</a></li>
            <li><a id="toc-Build-Summary" href="#Build-Summary">Build Summary</a></li>
            <li><a id="toc-Custom-Build-Runners" href="#Custom-Build-Runners">Custom Build Runners</a></li>
            <li></li>
            <li><a id="toc-Steps-Run-In-Parallel" href="#Steps-Run-In-Parallel">Steps Run In Parallel</a></li>
            <li><a id="toc-Embrace-LazyPath-for-Inputs-and-Outputs" href="#Embrace-LazyPath-for-Inputs-and-Outputs">Embrace LazyPath for Inputs and Outputs</a></li>
            <li><a id="toc-System-Resource-Awareness" href="#System-Resource-Awareness">System Resource Awareness</a></li>
            <li><a id="toc-Foreign-Target-Execution-and-Testing" href="#Foreign-Target-Execution-and-Testing">Foreign Target Execution and Testing</a></li>
            <li><a id="toc-Configuration-File-Generation" href="#Configuration-File-Generation">Configuration File Generation</a></li>
            <li><a id="toc-Run-Step-Enhancements" href="#Run-Step-Enhancements">Run Step Enhancements</a></li>
            <li><a id="toc-addTest-No-Longer-Runs-It" href="#addTest-No-Longer-Runs-It">addTest No Longer Runs It</a></li>
        </ul></li>
        <li><a id="toc-Compiler" href="#Compiler">Compiler</a>
        <ul>
            <li><a id="toc-Performance" href="#Performance">Performance</a></li>
            <li><a id="toc-Bootstrapping" href="#Bootstrapping">Bootstrapping</a></li>
            <li><a id="toc-Reproducible-Builds" href="#Reproducible-Builds">Reproducible Builds</a></li>
            <li><a id="toc-C-ABI-Compatibility" href="#C-ABI-Compatibility">C ABI Compatibility</a></li>
            <li><a id="toc-C-Translation" href="#C-Translation">C Translation</a></li>
            <li><a id="toc-Cache-System" href="#Cache-System">Cache System</a></li>
            <li><a id="toc-Code-Generation" href="#Code-Generation">Code Generation</a>
            <ul>
                <li><a id="toc-LLVM-Backend" href="#LLVM-Backend">LLVM Backend</a></li>
                <li><a id="toc-C-Backend" href="#C-Backend">C Backend</a></li>
                <li><a id="toc-x86-Backend" href="#x86-Backend">x86 Backend</a></li>
                <li><a id="toc-WebAssembly-Backend" href="#WebAssembly-Backend">WebAssembly Backend</a></li>
                <li><a id="toc-SPIR-V-Backend" href="#SPIR-V-Backend">SPIR-V Backend</a></li>
                <li><a id="toc-aarch64-Backend" href="#aarch64-Backend">aarch64 Backend</a></li>
            </ul></li>
            <li><a id="toc-Error-Return-Tracing" href="#Error-Return-Tracing">Error Return Tracing</a></li>
            <li><a id="toc-Safety-Checks" href="#Safety-Checks">Safety Checks</a></li>
            <li><a id="toc-Struct-Field-Order" href="#Struct-Field-Order">Struct Field Order</a></li>
            <li><a id="toc-Incremental-Compilation" href="#Incremental-Compilation">Incremental Compilation</a></li>
            <li><a id="toc-New-Module-CLI" href="#New-Module-CLI">New Module CLI</a></li>
        </ul></li>
        <li><a id="toc-Linker" href="#Linker">Linker</a>
        <ul>
            <li><a id="toc-MachO" href="#MachO">MachO</a></li>
            <li><a id="toc-COFF" href="#COFF">COFF</a></li>
            <li><a id="toc-ELF" href="#ELF">ELF</a></li>
            <li><a id="toc-WASM-Modules" href="#WASM-Modules">WASM Modules</a></li>
            <li><a id="toc-DWARF" href="#DWARF">DWARF</a></li>
            <li><a id="toc-Move-Library-Path-Resolution-to-the-Frontend" href="#Move-Library-Path-Resolution-to-the-Frontend">Move Library Path Resolution to the Frontend</a></li>
        </ul></li>
        <li><a id="toc-Bug-Fixes" href="#Bug-Fixes">Bug Fixes</a>
        <ul>
            <li><a id="toc-This-Release-Contains-Bugs" href="#This-Release-Contains-Bugs">This Release Contains Bugs</a></li>
            <li><a id="toc-Bug-Stability-Program" href="#Bug-Stability-Program">Bug Stability Program</a></li>
        </ul></li>
        <li><a id="toc-Toolchain" href="#Toolchain">Toolchain</a>
        <ul>
            <li><a id="toc-LLVM-16" href="#LLVM-16">LLVM 16</a></li>
            <li><a id="toc-musl-124" href="#musl-124">musl 1.2.4</a></li>
            <li><a id="toc-glibc-234" href="#glibc-234">glibc 2.34</a></li>
            <li><a id="toc-mingw-w64-1000" href="#mingw-w64-1000">mingw-w64 10.0.0</a></li>
            <li><a id="toc-WASI-libc" href="#WASI-libc">WASI-libc</a></li>
            <li><a id="toc-compiler-rt" href="#compiler-rt">compiler-rt</a>
            <ul>
                <li><a id="toc-Bundling-Into-Object-Files" href="#Bundling-Into-Object-Files">Bundling Into Object Files</a></li>
            </ul></li>
            <li><a id="toc-zig-cc" href="#zig-cc">zig cc</a>
            <ul>
                <li><a id="toc-Fail-Hard-on-Unsupported-Linker-Flags" href="#Fail-Hard-on-Unsupported-Linker-Flags">Fail Hard on Unsupported Linker Flags</a></li>
            </ul></li>
            <li><a id="toc-zig-c" href="#zig-c">zig c++</a></li>
            <li><a id="toc-zig-fmt" href="#zig-fmt">zig fmt</a>
            <ul>
                <li><a id="toc-Canonicalization-of-Identifiers" href="#Canonicalization-of-Identifiers">Canonicalization of Identifiers</a></li>
            </ul></li>
            <li><a id="toc-zig-objcopy" href="#zig-objcopy">zig objcopy</a></li>
        </ul></li>
        <li><a id="toc-Roadmap" href="#Roadmap">Roadmap</a>
        <ul>
            <li><a id="toc-Accepted-Proposals" href="#Accepted-Proposals">Accepted Proposals</a></li>
        </ul></li>
        <li><a id="toc-Thank-You-Contributors" href="#Thank-You-Contributors">Thank You Contributors!</a></li>
        <li><a id="toc-Thank-You-Sponsors" href="#Thank-You-Sponsors">Thank You Sponsors!</a></li>
    </ul>

    

    <h2 id="Support-Table"><a href="#toc-Support-Table">Support Table</a> <a href="#Support-Table">§</a></h2>

    <h3 id="Tier-System"><a href="#toc-Tier-System">Tier System</a> <a href="#Tier-System">§</a></h3>

    <p>
    A green check mark (✅) indicates the target meets all the requirements for the
    support tier. The other icons indicate what is <em>preventing the target from
      reaching the support tier</em>. In other words, the icons are
    <strong>to-do items</strong>. If you find any wrong data here please
    <a href="https://github.com/ziglang/www.ziglang.org">submit a pull request</a>!
    </p>
    <h4 id="Tier-1-Support"><a href="#toc-Tier-1-Support">Tier 1 Support</a> <a href="#Tier-1-Support">§</a></h4>

    <ul>
      <li>Not only can Zig generate machine code for these targets, but the
        <a href="#Standard-Library">Standard Library</a> cross-platform abstractions have implementations
        for these targets.</li>
      <li>The CI server automatically tests these targets on every commit to master
        branch. The 🧪 icon means this target does not yet have CI test coverage.</li>
      <li>The CI server automatically produces pre-built binaries for these targets,
        on every commit to master, and updates
        <a href="https://ziglang.org/download/">the download page</a> with links.
        The 📦 icon means the download page is missing this target.
      </li>
      <li>These targets have <a href="#Debugging">debug info capabilities</a> and therefore
        produce stack traces on failed assertions.</li>
      <li>libc is available for this target even when cross compiling.</li>
      <li>All the behavior tests and applicable standard library tests pass for this target.
          All language features are known to work correctly. Experimental features do not
          count towards disqualifying an operating system or architecture from Tier 1.
          The 🐛 icon means there are known <a href="#This-Release-Contains-Bugs">bugs</a> preventing
          this target from reaching Tier 1.
      </li>
      <li><a href="#zig-cc">zig cc</a>, <a href="#zig-c">zig c++</a>, and related toolchain commands support
        this target.</li>
      <li>If the Operating System is proprietary then the target is not marked deprecated
        by the vendor. The 💀 icon means the OS is officially deprecated,
        <a href="https://support.apple.com/en-us/HT208436">such as macos/x86</a>.</li>
    </ul>
    <table>
    <thead>
    <tr>
    <th></th>
    <th>freestanding</th>
    <th>Linux 3.16+</th>
    <th>macOS 11+</th>
    <th>Windows 10+</th>
    <th>WASI</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>x86_64</td>
    <td>✅</td>
    <td>✅</td>
    <td>✅</td>
    <td>✅</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>x86</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/1929">#1929</a> 🐛</td>
    <td>💀</td>
    <td><a href="https://github.com/ziglang/zig/issues/537">#537</a> 🐛</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>aarch64</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/2443">#2443</a> 🐛</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/16665">#16665</a> 🐛</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>arm</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/3174">#3174</a> 🐛</td>
    <td>💀</td>
    <td>🐛📦🧪</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>mips</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/3345">#3345</a> 🐛📦</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>riscv64</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/4456">#4456</a> 🐛</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>sparc64</td>
    <td>✅</td>
    <td><a href="https://github.com/ziglang/zig/issues/4931">#4931</a> 🐛📦🧪</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>powerpc64</td>
    <td>✅</td>
    <td>🐛</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>powerpc</td>
    <td>✅</td>
    <td>🐛</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>wasm32</td>
    <td>✅</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>✅</td>
    </tr>
    </tbody>
    </table>
    

    <h4 id="Tier-2-Support"><a href="#toc-Tier-2-Support">Tier 2 Support</a> <a href="#Tier-2-Support">§</a></h4>

    <ul>
    <li>The <a href="#Standard-Library">Standard Library</a> supports this target, but it is possible that some
      APIs will give an "Unsupported OS" compile error. One can link with libc or other
      libraries to fill in the gaps in the standard library. The 📖 icon means the
      standard library is too incomplete to be considered Tier 2 worthy.</li>
    <li>These targets are known to work, but may not be automatically tested, so there
      are occasional regressions. 🔍 means that nobody has really looked into this target
      so whether or not it works is unknown.</li>
    <li>Some tests may be disabled for these targets as we work toward
      <a href="#Tier-1-Support">Tier 1 Support</a>.</li>
    </ul>
    <table>
    <thead>
    <tr>
    <th></th>
    <th>free standing</th>
    <th>Linux 3.16+</th>
    <th>macOS 11+</th>
    <th>Windows 10+</th>
    <th>FreeBSD 12.0+</th>
    <th>NetBSD 8.0+</th>
    <th>Dragon FlyBSD 5.8+</th>
    <th>OpenBSD 7.3+</th>
    <th>UEFI</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>x86_64</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>✅</td>
    <td>✅</td>
    <td>✅</td>
    <td>✅</td>
    </tr>
    <tr>
    <td>x86</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>💀</td>
    <td>✅</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>✅</td>
    </tr>
    <tr>
    <td>aarch64</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    </tr>
    <tr>
    <td>arm</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>💀</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    </tr>
    <tr>
    <td>mips64</td>
    <td>✅</td>
    <td>✅</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>mips</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>powerpc64</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>💀</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>powerpc</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>💀</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>N/A</td>
    </tr>
    <tr>
    <td>riscv64</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    </tr>
    <tr>
    <td>sparc64</td>
    <td><a href="#Tier-1-Support">Tier 1</a></td>
    <td>✅</td>
    <td>N/A</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>🔍</td>
    <td>N/A</td>
    <td>🔍</td>
    <td>N/A</td>
    </tr>
    </tbody>
    </table>
    

    <h4 id="Tier-3-Support"><a href="#toc-Tier-3-Support">Tier 3 Support</a> <a href="#Tier-3-Support">§</a></h4>

    <ul>
    <li>The standard library has little to no knowledge of the existence of this
        target.</li>
    <li>If this target is provided by LLVM, LLVM has the target enabled by default.</li>
    <li>These targets are not frequently tested; one will likely need to contribute
      to Zig in order to build for these targets.</li>
    <li>The Zig compiler might need to be updated with a few things such as<ul>
       <li>what sizes are the C integer types</li>
       <li>C ABI calling convention for this target</li>
       <li>start code and default panic handler</li>
      </ul></li>
     <li><code>zig targets</code> is guaranteed to include this target.</li>
    </ul>
    <table>
      <thead>
        <tr>
          <th></th>
          <th>freestanding</th>
          <th>Linux 3.16+</th>
          <th>Windows 10+</th>
          <th>FreeBSD 12.0+</th>
          <th>NetBSD 8.0+</th>
          <th>UEFI</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>x86_64</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
        </tr>
        <tr>
          <td>x86</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>✅</td>
          <td>✅</td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
        </tr>
        <tr>
          <td>aarch64</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>✅</td>
          <td>✅</td>
          <td>✅</td>
          <td>✅</td>
        </tr>
        <tr>
          <td>arm</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>✅</td>
          <td>✅</td>
          <td>✅</td>
          <td>✅</td>
        </tr>
        <tr>
          <td>mips64</td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>mips</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>riscv64</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>✅</td>
        </tr>
        <tr>
          <td>powerpc32</td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>powerpc64</td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td><a href="#Tier-2-Support">Tier 2</a></td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>bpf</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>hexagon</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>amdgcn</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>sparc</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>s390x</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>lanai</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
        <tr>
          <td>csky</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
          <td>✅</td>
          <td>✅</td>
          <td>N/A</td>
        </tr>
      </tbody>
    </table>
    <table>
      <thead>
        <tr>
          <th></th>
          <th>freestanding</th>
          <th>emscripten</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>wasm32</td>
          <td><a href="#Tier-1-Support">Tier 1</a></td>
          <td>✅</td>
        </tr>
      </tbody>
    </table>
    

    <h4 id="Tier-4-Support"><a href="#toc-Tier-4-Support">Tier 4 Support</a> <a href="#Tier-4-Support">§</a></h4>

    <ul>
      <li>Support for these targets is entirely experimental.</li>
      <li>If this target is provided by LLVM, LLVM may have the target as an
        experimental target, which means that you need to use Zig-provided binaries
        for the target to be available, or build LLVM from source with special configure flags.
        <code>zig targets</code> will display the target if it is available.</li>
      <li>This target may be considered deprecated by an official party, in
        which case this target will remain forever stuck in Tier 4.</li>
      <li>This target may only support <code>-femit-asm</code> and cannot emit
        object files, in which case <code>-fno-emit-bin</code> is enabled by
        default and cannot be overridden.</li>
    </ul>
    <p>Tier 4 targets:</p>
    <ul>
      <li>avr</li>
      <li>riscv32</li>
      <li>xcore</li>
      <li>nvptx</li>
      <li>msp430</li>
      <li>r600</li>
      <li>arc</li>
      <li>tce</li>
      <li>le</li>
      <li>amdil</li>
      <li>hsail</li>
      <li>spir</li>
      <li>kalimba</li>
      <li>shave</li>
      <li>renderscript</li>
      <li>32-bit x86 macOS, 32-bit ARM macOS, powerpc32 and powerpc64 macOS, because
        <a href="https://support.apple.com/en-us/HT208436">Apple has officially dropped support for them</a>.</li>
    </ul>
    
    

    <h3 id="CPU-Architectures"><a href="#toc-CPU-Architectures">CPU Architectures</a> <a href="#CPU-Architectures">§</a></h3>

    <h4 id="x86"><a href="#toc-x86">x86</a> <a href="#x86">§</a></h4>

    <p>The baseline value used for "i386" was a pentium4 CPU model,
    which is actually i686. It is also possible to target a more bare bones
    CPU than pentium4. Therefore it is more correct to use "x86" rather than
    "i386" for this CPU architecture. This architecture has been renamed in
    the CLI and <a href="#Standard-Library">Standard Library</a> APIs (<a href="https://github.com/ziglang/zig/issues/4663">#4663</a>).</p>
    

    <h4 id="ARM"><a href="#toc-ARM">ARM</a> <a href="#ARM">§</a></h4>

    <p>Removed the always-single-threaded limitation for libc++ (<a href="https://github.com/ziglang/zig/issues/6573">#6573</a>).</p>
    <p>Fixed <a href="#Bootstrapping">Bootstrapping</a> on this host.</p>
    <p>Development builds of Zig are now available on the
      <a href="https://ziglang.org/download">download page</a> with every successful CI run.</p>
    

    <h4 id="WebAssembly"><a href="#toc-WebAssembly">WebAssembly</a> <a href="#WebAssembly">§</a></h4>

    <p><a href="https://github.com/Luukdegram">Luuk de Gram</a> writes:</p>
<p>Starting from this release, Zig no longer unconditionally passes
<code>--allow-undefined</code> to the <a href="#Linker">Linker</a>. By removing this flag, the user
will now be faced with an error during the linking stage rather than a panic
during runtime for undefined functions. If your project requires such
behavior, the flag <code>import-symbols</code> can be used which will allow
undefined symbols during linking.</p>
<p>For this change we also had to update the
strategy of exporting all symbols to the host. We no longer unconditionally
export all symbols to the host. Previously this would result in unwanted
symbols existing in the final binary. By default we now only export the symbol
to the linker, meaning they will only be visible to other object files so they
can be resolved correctly. If you wish to export a symbol to the host
environment, the flag <code>--export=[name]</code> can be used. Alternatively,
the flag <code>-rdynamic</code> can be used to export all visible symbols to
the host environment. By setting the <code>visibilibity</code> field to
<code>.hidden</code> on <code>std.builtin.ExportOptions</code> a symbol will
remain only visible to the linker and not be exported to the host. With this
breaking change, the linker will behave the same whether a user is using
<a href="#zig-cc">zig cc</a> or Clang directly.</p>
    <h5 id="WasmAllocator"><a href="#toc-WasmAllocator">WasmAllocator</a> <a href="#WasmAllocator">§</a></h5>

    <p>The <a href="#Standard-Library">Standard Library</a> gained <code>std.heap.wasm_allocator</code>, a WebAssembly-only simple, fast, and small allocator (<a href="https://github.com/ziglang/zig/issues/13513">#13513</a>). It is able to simultaneously achieve all three
    of these things thanks to the new <a href="#Memory-Allocation">Memory Allocation</a> API of Zig 0.11.0 which
    <a href="#Allow-Shrink-To-Fail">allows shrink to fail</a>.</p>
    <figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>export</span> <span>fn</span> <span>alloc</span>() ?*<span>i32</span> {</span>
<span>    <span>return</span> std.heap.wasm_allocator.create(<span>i32</span>) <span>catch</span> <span>null</span>;</span>
<span>}</span>
<span><span>export</span> <span>fn</span> <span>free</span>(p: *<span>i32</span>) <span>void</span> {</span>
<span>    std.heap.wasm_allocator.destroy(p);</span>
<span>}</span></code></pre></figure>
    <p>Compiled with <code>-target wasm32-freestanding -OReleaseSmall</code>, this example
    produces a 1 KB wasm object file. It is used as the memory allocator when
    <a href="#Bootstrapping">Bootstrapping</a> Zig.</p>
    
    

    <h4 id="PowerPC"><a href="#toc-PowerPC">PowerPC</a> <a href="#PowerPC">§</a></h4>

    <p>A couple enhancements to <a href="#zig-cc">zig cc</a> and <a href="#compiler-rt">compiler-rt</a>.</p>
    

    <h4 id="AVR"><a href="#toc-AVR">AVR</a> <a href="#AVR">§</a></h4>

    <p>AVR remains an experimental target, however, in this release cycle, the <a href="#Compiler">Compiler</a>
    implements AVR address spaces, and places functions on AVR in the flash address space.</p>
    

    <h4 id="GPGPU"><a href="#toc-GPGPU">GPGPU</a> <a href="#GPGPU">§</a></h4>

    <p><a href="https://github.com/Snektron/">Robin "Snektron" Voetter</a> writes:</p>
<p>Three new built-in functions are added to aid with writing GPGPU kernels in Zig: <code>@workGroupId</code>, <code>@workItemId</code>, and <code>@workGroupSize</code>. These are respectively used to query the index of the work group of the current thread in a kernel invocation, the size of a work group in threads, and the thread index in the current work group. For now, these are only wired up to work when compiling Zig to AMD GCN machine code via LLVM, that can be used with ROCm. In the future they will be added to the LLVM-based NVPTX and self-hosted SPIR-V backends as well.</p>
<p>For example, the following Zig GPU kernel performs a simple reduction on its inputs:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>const</span> block_dim = <span>256</span>;</span>
<span><span>var</span> shared: [block_dim]<span>f32</span> <span>addrspace</span>(.shared) = <span>undefined</span>;</span>
<span></span>
<span><span>export</span> <span>fn</span> <span>reduce</span>(in: [*]<span>addrspace</span>(.global) <span>f32</span>, out: [*]<span>addrspace</span>(.global) <span>f32</span>) <span>callconv</span>(.Kernel) <span>void</span> {</span>
<span>    <span>const</span> tid = <span>@workItemId</span>(<span>0</span>);</span>
<span>    <span>const</span> bid = <span>@workGroupId</span>(<span>0</span>);</span>
<span>    shared[tid] = in[bid * block_dim + tid];</span>
<span>    <span>comptime</span> <span>var</span> i: <span>usize</span> = <span>1</span>;</span>
<span>    <span>inline</span> <span>while</span> (i &lt; block_dim) : (i *= <span>2</span>) {</span>
<span>        <span>if</span> (tid % (i * <span>2</span>) == <span>0</span>) shared[tid] += shared[tid + i];</span>
<span>        <span>asm</span> <span>volatile</span> (<span>"s_barrier"</span>);</span>
<span>    }</span>
<span>    <span>if</span> (tid == <span>0</span>) out[bid] = shared[<span>0</span>];</span>
<span>}</span></code></pre></figure>

<p>This kernel can be compiled to a HIP module for use with ROCm using Zig and clang-offload-bundler:</p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig build-obj -target amdgcn-amdhsa-none -mcpu=gfx1100 ./test.zig</kbd>
$ <kbd>clang-offload-bundler -type=o -bundle-align=4096 \
    -targets=host-x86_64-unknown-linux,hipv4-amdgcn-amd-amdhsa--gfx1100</kbd>
    -input=/dev/null -input=./test.o -output=module.co
</samp></pre></figure>

<p>The resulting module can be loaded directly using <code>hipModuleLoadData</code> and executed using <code>hipModuleLaunchKernel</code>.</p>
    
    

    <h3 id="Operating-Systems"><a href="#toc-Operating-Systems">Operating Systems</a> <a href="#Operating-Systems">§</a></h3>

    <h4 id="Windows"><a href="#toc-Windows">Windows</a> <a href="#Windows">§</a></h4>

    <p>
    The officially supported minimum version of Windows is now 10, because
    <a href="https://support.microsoft.com/en-us/help/13853/windows-lifecycle-fact-sheet">Microsoft dropped LTS support for 8.1 in January</a>.
    Patches to Zig supporting for older versions of Windows are still accepted into
    the codebase, but they are not regularly tested, not part of the
    part of <a href="#Bug-Stability-Program">Bug Stability Program</a>, and not covered by the <a href="#Tier-System">Tier System</a>.
    </p>
  <ul>
    <li>Fix _tls_index not being defined if libc wasn't linked, and fix x86 name mangling.</li>
    <li>replace GetPhysicallyInstalledSystemMemory with ntdll (<a href="https://github.com/ziglang/zig/issues/15264">#15264</a>).</li>
    <li>std.os.sendto: use ws2_32 on Windows (<a href="https://github.com/ziglang/zig/issues/9971">#9971</a>).</li>
    <li>std.os.windows: add possible error NETNAME_DELETED of ReadFile (<a href="https://github.com/ziglang/zig/issues/13631">#13631</a>)</li>
    <li>std: implement os.mprotect on Windows</li>
    <li>Implement root certificate scanning for the <a href="#TLS-Client">TLS Client</a> (<a href="https://github.com/ziglang/zig/issues/14229">#14229</a>)</li>
    <li>debug info lookup improvements (<a href="https://github.com/ziglang/zig/issues/14247">#14247</a>)</li>
    <li>std.debug.TTY: Fix colors not resetting on Windows</li>
    <li>std.os.windows.ReadLink: add missing alignment of local data buffer</li>
    <li>os: windows: fix unhandled error</li>
    <li>Detect ANSI support in more terminals (<a href="https://github.com/ziglang/zig/issues/16080">#16080</a>).</li>
    <li>windows.sendto fix (<a href="https://github.com/ziglang/zig/issues/15831">#15831</a>)</li>
    <li>std.c: fix return type of recv/recvfrom on windows</li>
    <li>debug: fix missing stack traces during crashes on windows</li>
    <li>debug: replace RtlCaptureStackBackTrace (which was spuriously failing) with a new implementation which uses RtlVirtualUnwind instead (<a href="https://github.com/ziglang/zig/issues/12740">#12740</a>)</li>
    <li>windows.OpenFile/DeleteFile: Add NetworkNotFound as a possible error. When calling NtCreateFile with a UNC path, if either `\\server` or `\\server\share` are not found, then the statuses `BAD_NETWORK_PATH` or `BAD_NETWORK_NAME` are returned (respectively).</li>
    <li>Remove std.os.windows.QueryInformationFile (a wrapper of NtQueryInformationFile). This function was unused, and implementation contained a few footguns.</li>
    <li>std.process: Fix crash on some Windows machines</li>
    <li>std.os.windows.DeviceIoControl: Handle INVALID_DEVICE_REQUEST. This is possible when e.g. calling CreateSymbolicLink on a FAT32 filesystem</li>
    <li>child_process: Fix regression on Windows for FAT filesystems (<a href="https://github.com/ziglang/zig/issues/16374">#16374</a>).</li>
    <li>DeleteFile: Use FileDispositionInformationEx if possible, but fallback if not (<a href="https://github.com/ziglang/zig/issues/16499">#16499</a>).</li>
    <li>advapi32: Add RegCloseKey</li>
    <li><code>spawnWindows</code>: Improve worst-case performance considerably + tests (<a href="https://github.com/ziglang/zig/issues/13993">#13993</a>)</li>
    <li><code>ChildProcess.spawnWindows</code>: <code>PATH</code> search fixes + optimizations (<a href="https://github.com/ziglang/zig/issues/13983">#13983</a>)</li>
    <li>Fix GetFileInformationByHandle compile error (<a href="https://github.com/ziglang/zig/issues/14829">#14829</a>)</li>
    <li>`std.coff`: check strtab lengths against `data` length. Fixes illegal behavior. Invalid-length sections are now skipped in `Coff.getSectionByName`.</li>
  </ul>

    <h5 id="Resource-Files-res"><a href="#toc-Resource-Files-res">Resource Files (.res)</a> <a href="#Resource-Files-res">§</a></h5>

    <p>Zig now recognizes the .res extension and links it as if it were an object file (<a href="https://github.com/ziglang/zig/issues/6488">#6488</a>).</p>
    <p>.res files are compiled Windows resource files that get linked into executables/libraries. The linker knows what to do with them, but previously you had to trick Zig into thinking it was an object file (by renaming it to have the .obj extension, for example).</p>
    <p>Now, the following works:</p>
    <pre><code>zig build-exe main.zig resource.res</code></pre>
    <p>or, in build.zig:</p>
    <pre><code><span>exe.addObjectFile(<span>"resource.res"</span>);</span></code></pre>
    

    <h5 id="Support-UNC-Rooted-Drive-Relative-and-NamespacedDevice-Paths"><a href="#toc-Support-UNC-Rooted-Drive-Relative-and-NamespacedDevice-Paths">Support UNC, Rooted, Drive-Relative, and Namespaced/Device Paths</a> <a href="#Support-UNC-Rooted-Drive-Relative-and-NamespacedDevice-Paths">§</a></h5>

    <p><a href="https://github.com/ziglang/zig/pull/15768">Windows: Support UNC, rooted, drive relative, and namespaced/device paths</a>
    

    </p><h5 id="ARM64-Windows"><a href="#toc-ARM64-Windows">ARM64 Windows</a> <a href="#ARM64-Windows">§</a></h5>

    <p>In this release, 64-bit ARM (aarch64) Windows becomes a <a href="#Tier-2-Support">Tier 2 Support</a> target.
    Zip files are available on <a href="https://ziglang.org/download">the download page</a> and this target is
    tested with every commit to source control. However, there are
    <a href="https://github.com/ziglang/zig/issues/16665">known bugs</a> preventing this
    target from reaching <a href="#Tier-1-Support">Tier 1 Support</a>.</p>
    <ul>
    <li>add CPU feature detection for ARMv8 processors on Windows - the feature detection is based on parsing Windows 
    registry values which contain a read-only view at the contents of <code>EL1</code> system ID registers. The values are mapped
    as <code>CP 40xx</code> registry keys which we now pull and parse for CPU feature information.</li>
    <li>introduce <code>system/arm.zig</code> containing CPU model table. Now we can reuse the table between CPU model parsers on 
    <a href="#Linux">Linux</a> and Windows. </li>
    <li>Fixed aarch64-windows-gnu libc. We were missing some math functions. After this enhancement I verified that I was able to cross-compile ninja.exe for aarch64-windows and produce a viable binary.</li>
    <li><a href="#C-Backend">C Backend</a>: fixed compiling for aarch64-windows. These bugs were triggered in the C backend by aarch64-specific code in os/windows.zig.</li>
    </ul>
    

    

    <h4 id="Linux"><a href="#toc-Linux">Linux</a> <a href="#Linux">§</a></h4>

    <ul>
    <li>Fix missing pthread_key_t definition on linux (<a href="https://github.com/ziglang/zig/issues/13950">#13950</a>).</li>
    <li>linux.bpf: expose map_get_next_key</li>
    <li>fix CPU model detection for neoverse_n1 on aarch64-linux (<a href="https://github.com/ziglang/zig/issues/10086">#10086</a>)</li>
    <li>stdlib: make linux.PERF.TYPE non-exhaustive</li>
    <li>std.os.linux: Add setitimer and getitimer syscalls</li>
    <li>Fixes to linux/bpf/btf.zig</li>
    <li>std.os.linux.T: translate more MIPS values</li>
    <li>fix type errors in os.linux (<a href="https://github.com/ziglang/zig/issues/15801">#15801</a>)</li>
    <li>Add tcsetpgrp and tcgetpgrp to std.os.linux</li>
    <li>std.os.linux: fix incorrect struct definition</li>
    <li>std.os.linux: Add new CAP constants</li>
    <li>linux: do not set stack size hard limit</li>
    <li>std.os.linux | Fix sendmmsg function (<a href="https://github.com/ziglang/zig/issues/16513">#16513</a>)</li>
    <li>std.os: Allow write functions to return INVAL errors. In Linux when interacting with the virtual file system when writing in invalid value to a file the OS will return errno 22 (INVAL). Instead of triggering an unreachable, this change now returns a newly introduced error.InvalidArgument.</li>
    <li>std.os: Add DeviceBusy as a possible write error. In Linux when writing to various files in the virtual file system, for example /sys/fs/cgroup, if you write an invalid value to a file you'll get errno 16.</li>
    <li>Update Linux syscall list for 6.1, support Mips64 (<a href="https://github.com/ziglang/zig/issues/14541">#14541</a>)</li>
    <li>bpf: expose "syscall" program type and F_SLEEPABLE flag</li>
    <li>bpf: correct return type of ringbuf_output helper</li>
    <li>io_uring: Change ordering of prep provide buffers args</li>
    </ul>
    

    <h4 id="macOS"><a href="#toc-macOS">macOS</a> <a href="#macOS">§</a></h4>

    <p>Catalina (version 10.15) is unsupported by Apple as of November 30, 2022.
    Likewise, Zig 0.11.0 drops support for this version.</p>
    <ul>
      <li>expose <code>ptrace</code> syscall with errno handling</li>
      <li>expose more Mach kernel primitives for issuing user-land Mach messages</li>
      <li>remove incorrect assertion in <code>readMachODebugInfo</code> panicking during panic - this fixes a class of bugs on macOS 
      where a segfault happening in a loaded dylib with no debug info would cause a panic in the panic handler instead 
      of simply noting that the dylib has no valid debug info via <code>error.MissingDebugInfo</code>. An example could be code 
      linking some system dylib and causing some routine to segfault on say invalid pointer value, which should normally 
      cause Zig to print an incomplete stack trace anchored at the currently loaded image and backtrace all the way back 
      to the Zig binary with valid debug info. Currently, in a situation like this we would trigger a panic within a 
      panic.</li>
      <li>update macOS libc headers and <code>libSystem.tbd</code> to macOS 13</li>
      <li>bump max macOS version to 13.3</li>
      <li>fix parsing of SDK version string into <code>std.SemanticVersion</code></li>
      <li>std.os.darwin: drop underscore from SIG._{BLOCK,UNBLOCK,SETMASK}. this makes them match decls in other OSes</li>
      <li>std.macho: add missing defs of compact unwind info records</li>
    </ul>
    

    <h4 id="FreeBSD"><a href="#toc-FreeBSD">FreeBSD</a> <a href="#FreeBSD">§</a></h4>

    <ul>
      <li>FreeBSD: add mcontext_t for aarch64, enabling <a href="#Debugging">stack traces</a> when
          a segmentation fault occurs.</li>
      <li>std.os: take advantage of <code>copy_file_range</code></li>
      <li>std.process.totalSystemMemory: return correct error type on FreeBSD</li>
      <li>#13700</li>
    </ul>
    

    <h4 id="OpenBSD"><a href="#toc-OpenBSD">OpenBSD</a> <a href="#OpenBSD">§</a></h4>

    <ul>
    <li>openbsd: fix NativeTargetInfo semver</li>
    <li>fix bad return types for BSDs getdents and debitrot openbsd (<a href="https://github.com/ziglang/zig/issues/16052">#16052</a>).</li>
    <li>std.c: openbsd sigcontext/ucontext fix enum</li>
    <li>fix std.Thread name buffer size</li>
    </ul>
    

    <h4 id="NetBSD"><a href="#toc-NetBSD">NetBSD</a> <a href="#NetBSD">§</a></h4>

    <ul>
    <li>use versioned __msync13 from libc (<a href="https://github.com/ziglang/zig/issues/14422">#14422</a>)</li>
    <li>Add termios constants to std.c.netbsd</li>
    <li>pkgsrc (<a href="https://github.com/ziglang/zig/issues/1551">#1551</a>)</li>
    </ul>
    

    <h4 id="WASI"><a href="#toc-WASI">WASI</a> <a href="#WASI">§</a></h4>

    <p><a href="https://github.com/Luukdegram">Luuk de Gram</a> writes:</p>
<p>In this release-cycle the <a href="#Standard-Library">Standard Library</a> gained experimental
support for WASI-threads. This means it will be possible to create a
multi-threaded application when targeting WASI without having to change your
codebase. Keep in mind that the feature is still in proposal phase 1 of the
WASI specification, so support within the standard library is still
experimental and bugs are to be expected. As the feature is still experimental,
we still default to single-threaded builds when targeting WebAssembly. To
disable this, one can pass <code>-fno-single-threaded</code> in combination
with the <code>--shared-memory</code> flags. This also requires the cpu
features <code>atomics</code> and <code>bulk-memory</code> to be enabled.</p>

<p>The same flags will also work for freestanding <a href="#WebAssembly">WebAssembly</a> modules, allowing
a user to build a multi-threaded WebAssembly module for other runtimes. Be
aware that the threads in the standard library are only available for WASI. For
freestanding, the user must implement their own such as Web Workers when
building a WebAssembly module for the browser.</p>


    <ul>
    <li>wasi: fixes IterableDir.nextWasi for large directory (<a href="https://github.com/ziglang/zig/issues/13725">#13725</a>)</li>
    <li>Implement some more environment functions for WASI.</li>
    <li>Fix bug in WASI environment variable handling (<a href="https://github.com/ziglang/zig/issues/14121">#14121</a>).</li>
    <li>wasi: fixes os.isatty on type mismatch (<a href="https://github.com/ziglang/zig/issues/13813">#13813</a>)</li>
    <li>wasi: remove unnecessary breakpoint() in abort</li>
    </ul>

    <h5 id="Give-Executable-Bit-to-wasm-Executables"><a href="#toc-Give-Executable-Bit-to-wasm-Executables">Give Executable Bit to wasm Executables</a> <a href="#Give-Executable-Bit-to-wasm-Executables">§</a></h5>

    <p>Zig now gives +x to the .wasm file if it is an executable and the OS is WASI.
    Some systems may be configured to execute such binaries directly. Even
    if that is not the case, it means we will get "exec format error" when
    trying to run it rather than "access denied", and then can react to that
    in the same way as trying to run an ELF file from a foreign CPU
    architecture.</p>
    <p>This is part of the strategy for <a href="#Foreign-Target-Execution-and-Testing">Foreign Target Execution and Testing</a>.</p>
    
    

    <h4 id="UEFI"><a href="#toc-UEFI">UEFI</a> <a href="#UEFI">§</a></h4>

    <ul>
    <li>Delete unneeded alignment and use default 4K (<a href="https://github.com/ziglang/zig/issues/7484">#7484</a>).</li>
    <li>Do not use -fPIC when compiling a UEFI application.</li>
    <li>Fixed wrong calling convention used sometimes (<a href="https://github.com/ziglang/zig/issues/16339">#16339</a>).</li>
    <li>Fixed bug where not enough memory was allocated for the header or to align the pointer.</li>
    <li>Delete unnecessary padding and fix number_of_pages type</li>
    <li>check for UEFI in io.StreamSource</li>
    <li>implement std.time.sleep for uefi</li>
    <li>fix alignment error in uefi FileInfo protocol</li>
    <li>std.os.uefi: fix shift in pool allocator (<a href="https://github.com/ziglang/zig/issues/14497">#14497</a>).</li>
    </ul>
    

    <h4 id="Plan9"><a href="#toc-Plan9">Plan9</a> <a href="#Plan9">§</a></h4>

    <p><a href="https://github.com/g-w1">Jacob G-W</a> writes:</p>
<p>
  During this release cycle, the Plan 9 <a href="#Linker">Linker</a> backend has been updated so that
  it can link most code from the <a href="#x86-Backend">x86 Backend</a>. The <a href="#Standard-Library">Standard Library</a> has
  also been improved, broadening its support for Plan 9's features:
</p>
<ul>
  <li>
    Introduced a <code>page_allocator</code> implementation for Plan 9,
    employing the <code>SbrkAllocator</code> available in the standard library.
    This addition now permits <a href="#Memory-Allocation">Memory Allocation</a> on Plan 9.
  </li>
  <li>
    New functions have been added to facilitate interaction with the filesystem,
    ensuring that <code>std.fs</code> works. This is a crucial improvement, as
    Plan 9 heavily utilizes filesystem interfaces for system interactions.
  </li>
  <li>
    Added the ability to read the top-of-stack struct, allowing access to
    process PID and clock cycle information.
  </li>
  <li>
    Support for <code>std.os.plan9.errstr</code> has been implemented, enabling
    users to read error messages from system calls that return <code>-1</code>.
    However, as error messages in Plan 9 are string-based, additional efforts
    will be needed to make these errors interface with Zig errors.
  </li>
</ul>
    
    
    

    <h2 id="Documentation"><a href="#toc-Documentation">Documentation</a> <a href="#Documentation">§</a></h2>

    <h3 id="Language-Reference"><a href="#toc-Language-Reference">Language Reference</a> <a href="#Language-Reference">§</a></h3>

    <p>Minor changes and upkeep to the language reference. Nothing major with this release.</p>
    

    <h3 id="Autodoc"><a href="#toc-Autodoc">Autodoc</a> <a href="#Autodoc">§</a></h3>

    <p><img alt="Ziggy the Ziguana" src="https://ziglang.org/img/Ziggy_4.svg"></p><p>This feature is still experimental.</p>

    <p><a href="https://kristoff.it/">Loris Cro</a> writes:</p>

    <p>Thank you to all contributors who helped with Autodoc in this release cycle. </p>
    <p>In particular welcome to two new Autodoc contributors:</p>
    <ul>
      <li><a href="https://github.com/Myvar">Emile Badenhorst</a></li>
      <li><a href="https://github.com/ianprime0509">Ian Johnson</a></li>
    </ul>
    <p>And renewed thanks to long term Autodoc contributor <a href="https://github.com/der-teufel-programming">Krzysztof Wolicki</a>.</p>

    <h4 id="New-Search-System"><a href="#toc-New-Search-System">New Search System</a> <a href="#New-Search-System">§</a></h4>

      <p>When searching, right below the search box, you will now see a new expandable help section that explains how to use the new search system more effectively (<a href="https://github.com/ziglang/zig/issues/15475">#15475</a>). The text is reported here:</p>

      <ul>
      <li>Matching<ul>
      <li>Search is case-insensitive by default.</li>
      <li>Using uppercase letters in your query will make the search case-sensitive.</li>
      <li>Given <code>ArrayListUnmanaged</code>:<ul>
      <li>the following words (and their prefixes) will match:<ul>
      <li><code>array</code></li>
      <li><code>list</code></li>
      <li><code>unmanaged</code></li>
      </ul>
      </li>
      <li>the following words will <strong>NOT</strong> match:<ul>
      <li><code>stun</code></li>
      <li><code>ray</code></li>
      <li><code>managed</code></li>
      </ul>
      </li>
      </ul>
      </li>
      <li>More precisely, the search system is based on a Radix Tree. The Radix Tree contains full decl names plus some suffixes, split by following the official style guide (e.g. <code>HashMapUnmanaged</code> also produces <code>MapUnmanaged</code> and <code>Unmanaged</code>, same with snake_case and camelCase names).</li>
      </ul>
      </li>
      <li>Multiple terms<ul>
      <li>When a search query contains multiple terms, order doesn't matter when all terms match within a single decl name (e.g. "map auto" will match <code>AutoHashMap</code>).</li>
      <li>Query term order does matter when matching different decls alognside a path (e.g. "js parse" matching <code>std.json.parse</code>), in which case the order of the terms will determine whether the match goes above or below the "other results" line.</li>
      <li>As an example, "fs create" will put above the line all things related to the creation of files and directories inside of <code>std.fs</code>, while still showing (but below the line) matches from <code>std.Bulild</code>.</li>
      <li>As another example, "fs windows" will prioritize windows-related results in <code>std.fs</code>, while "windows fs" will prioritize "fs"-related results in <code>std.windows</code>.</li>
      <li>This means that if you're searching inside a target namespace, you never have to read below the "other results" line.</li>
      <li>Since matching doesn't have to be perfect, you can also target a group of namespaces to search into. For example "array orderedremove" will show you all "Array-" namespaces that support orderedRemove.</li>
      <li>Periods are replaced by spaces because the Radix Tree doesn't index full paths, and in practice you should expect the match scoring system to consistently give you what you're looking for even when your query path is split into multiple terms.</li>
      </ul>
      </li>
      </ul>   
    
    
    <h4 id="Other-Improvements"><a href="#toc-Other-Improvements">Other Improvements</a> <a href="#Other-Improvements">§</a></h4>

      <ul>
      <li><p>Added missing support for the following language features:</p>
      <ul>
      <li>Top-level doc comments (<code>//!</code>)</li>
      <li>Tuple structs</li>
      <li><code>usingnamespace</code></li>
      <li>Default values in structs and enums</li>
      <li>Improved handling of calling conventions</li>
      <li>rendering of backing integers for packed structs</li>
      <li>rendering of <code>_</code> function parameter names</li>
      <li>rendering of boolean operators</li>
      <li><p><strong>doctests are now supported!</strong></p>
      <ul>
      <li><p>Doctests are tests that are meant to be part of the documentation.
      You can create a doc test by giving it the name of a decl like so:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>const</span> MyType = <span>struct</span> {</span>
<span>  <span>// ...</span></span>
<span>};</span>
<span></span>
<span><span>test</span> MyType {</span>
<span>  <span>// Referencing a decl directly makes this a doctest!</span></span>
<span>  <span>//</span></span>
<span>  <span>// This test is meant to showcase usage of MyType </span></span>
<span>  <span>// and will be shown by Autodoc.</span></span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"normal test"</span> {</span>
<span>  <span>// This is a normal test that will not be shown</span></span>
<span>  <span>// by Autodoc.</span></span>
<span>}</span></code></pre></figure>

      <p>Check out <code>std.json</code> for some more examples.</p>
      </li>
      </ul>
      </li>
      </ul>
      </li>
      <li>Added a Zig tokenizer to Autodoc for better source rendering (<a href="https://github.com/ziglang/zig/issues/16306">#16306</a>).</li>
      <li>Improved support for more Markdown syntax in rendering of doc comments.</li>
      <li>Fixed broken links to various elements.</li>
      <li>Links to private decls now lead you to source listings.</li>
      <li>Improved rendering of comptime expressions.</li>
      <li>Fixed rendering of function pointer types.</li>
      <li>Added the ability to expand function descriptions (<a href="https://github.com/ziglang/zig/issues/14260">#14260</a>).</li>
      <li>Initial support for guides, see the "Guides" section in a build of Autodoc 
      for more info.</li>
      <li>Single-backtick mentions of importable identifiers in doc comments or guides
      will now be linked to their corresponding Autodoc page.</li>
      <li>Pressing <code>/</code> will focus the searchbar on all browsers except Firefox.
      You can use the new Autodoc preferences (<code>p</code>) menu to enable it also on Firefox.</li>
      <li>Fixed a crash related to complex expressions in function calls.</li>
      <li>Autodoc now properly integrates with the cache system of the Zig compiler (<a href="https://github.com/ziglang/zig/issues/15864">#15864</a>).</li>
      </ul>
    
    
    
    

    <h2 id="Language-Changes"><a href="#toc-Language-Changes">Language Changes</a> <a href="#Language-Changes">§</a></h2>

    <ul>
    <li>Changed bits field of <code>builtin.Type.Int</code> and <code>builtin.Type.Float</code> a
    <code><span><span>u16</span></span></code> instead of <code><span><span>comptime_int</span></span></code>.</li>
    <li>Replaced <code>builtin.Version</code> with <code>SemanticVersion</code>.</li>
    </ul>
    <h3 id="Peer-Type-Resolution-Improvements"><a href="#toc-Peer-Type-Resolution-Improvements">Peer Type Resolution Improvements</a> <a href="#Peer-Type-Resolution-Improvements">§</a></h3>

    <p>
    The <a href="https://ziglang.org/documentation/0.11.0/#Peer-Type-Resolution">Peer Type Resolution</a> algorithm
    has been improved to resolve more types and in a more consistent manner. Below are a few
    examples which did not resolve correctly in 0.10 but do now.
    </p>
    <table>
      <thead>
        <tr>
          <th>Peer Types</th>
          <th>Resolved Type</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code><span>[:s]<span>const</span> T</span></code>, <code><span>[]T</span></code></td>
          <td><code><span>[]<span>const</span> T</span></code></td>
        </tr>
        <tr>
          <td><code><span>E!*T</span></code>, <code><span>?*T</span></code></td>
          <td><code><span>E!?*T</span></code></td>
        </tr>
        <tr>
          <td><code><span>[*c]T</span></code>, <code><span><span>@TypeOf</span>(<span>null</span>)</span></code></td>
          <td><code><span>[*c]T</span></code></td>
        </tr>
        <tr>
          <td><code><span>[*c]T</span></code>, <code><span><span>@TypeOf</span>(<span>null</span>)</span></code></td>
          <td><code><span>[*c]T</span></code></td>
        </tr>
        <tr>
          <td><code><span>?<span>u32</span></span></code>, <code><span><span>u8</span></span></code></td>
          <td><code><span>?<span>u32</span></span></code></td>
        </tr>
        <tr>
          <td><code><span>[<span>2</span>]<span>u32</span></span></code>, <code><span><span>struct</span> { <span>u32</span>, <span>u32</span> }</span></code></td>
          <td><code><span>[<span>2</span>]<span>u32</span></span></code></td>
        </tr>
        <tr>
          <td><code><span>*<span>const</span> <span>@TypeOf</span>(.{})</span></code>, <code><span>[]<span>const</span> <span>u8</span></span></code></td>
          <td><code><span>[]<span>const</span> <span>u8</span></span></code></td>
        </tr>
      </tbody>
    </table>
    
    <h3 id="Multi-Object-For-Loops"><a href="#toc-Multi-Object-For-Loops">Multi-Object For Loops</a> <a href="#Multi-Object-For-Loops">§</a></h3>

    <p>
    This release cycle introduces <a href="https://github.com/ziglang/zig/pull/14671">multi-object
    <code><span><span>for</span></span></code> loops</a> into the Zig language. This is a new construct providing a
    way to cleanly iterate over multiple sequences of the same length.
    </p>
    <p>
    Consider the case of mapping a function over an array. Previously, your code may have looked
    like this:
    </p>
    <figure><figcaption><cite>map_func_old.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"double integer values in sequence"</span> {</span>
<span>    <span>const</span> input: []<span>const</span> <span>u32</span> = &amp;.{ <span>1</span>, <span>2</span>, <span>3</span> };</span>
<span>    <span>const</span> output = <span>try</span> std.testing.allocator.alloc(<span>u32</span>, input.len);</span>
<span>    <span>defer</span> std.testing.allocator.free(output);</span>
<span></span>
<span>    <span>for</span> (input) |x, i| {</span>
<span>        output[i] = x * <span>2</span>;</span>
<span>    }</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u32</span>, &amp;.{ <span>2</span>, <span>4</span>, <span>6</span> }, output);</span>
<span>}</span></code></pre></figure>
    <p>
    This code has an unfortunate property: in the loop, we had to make the arbitrary choice to
    iterate over <code><span>input</span></code>, using the captured index <code><span>i</span></code>
    to access the corresponding element in <code><span>output</span></code>. With multi-object for
    loops, this code becomes much cleaner:
    </p>
    <figure><figcaption><cite>map_func_new.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"double integer values in sequence"</span> {</span>
<span>    <span>const</span> input: []<span>const</span> <span>u32</span> = &amp;.{ <span>1</span>, <span>2</span>, <span>3</span> };</span>
<span>    <span>const</span> output = <span>try</span> std.testing.allocator.alloc(<span>u32</span>, input.len);</span>
<span>    <span>defer</span> std.testing.allocator.free(output);</span>
<span></span>
<span>    <span>for</span> (input, output) |x, *out| {</span>
<span>        out.* = x * <span>2</span>;</span>
<span>    }</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u32</span>, &amp;.{ <span>2</span>, <span>4</span>, <span>6</span> }, output);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test map_func_new.zig</kbd>
1/1 test.double integer values in sequence... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    In this new code, we use the new for loop syntax to iterate over both slices simultaneously,
    capturing the output element by reference so we can write to it. The index capture is no longer
    necessary in this case. Note that this is not limited to two operands: arbitrarily many slices
    can be passed to the loop provided each has a corresponding capture. The language asserts that
    all passed slices have the same length: if they do not, this is safety-checked
    <a href="https://ziglang.org/documentation/0.11.0/#Undefined-Behavior">Undefined Behavior</a>.
    </p>
    <p>
    Previously, index captures were implicitly provided if you added a second identifier to the
    loop's captures. With the new multi-object loops, this has changed. As well as standard
    expressions, the operand passed to a for loop can also be a <i>range</i>. These take the form 
    <code><span>a..</span></code> or <code><span>a..b</span></code>, with the latter form being exclusive
    on the upper bound. If an upper bound is provided, <code><span>b - a</span></code> must match the
    length of any given slices (or other bounded ranges). If no upper bound is provided, the loop is
    bounded based on other range or slice operands. All for loops must be bounded (i.e. you cannot
    iterate over only an unbounded range). The old behavior is equivalent to adding a trailing
    <code><span><span>0</span>..</span></code> operand to the loop.
    </p>
    <figure><figcaption><cite>for_index_capture.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"index capture in for loop"</span> {</span>
<span>    <span>const</span> vals: []<span>const</span> <span>u32</span> = &amp;.{ <span>10</span>, <span>11</span>, <span>12</span>, <span>13</span> };</span>
<span></span>
<span>    <span>// We can use an unbounded range, since vals provides a length</span></span>
<span>    <span>for</span> (vals, <span>0</span>..) |x, i| {</span>
<span>        <span>try</span> std.testing.expectEqual(i + <span>10</span>, x);</span>
<span>    }</span>
<span></span>
<span>    <span>// We can also use a bounded range, provided its length matches</span></span>
<span>    <span>for</span> (vals, <span>0</span>..<span>4</span>) |x, i| {</span>
<span>        <span>try</span> std.testing.expectEqual(i + <span>10</span>, x);</span>
<span>    }</span>
<span></span>
<span>    <span>// The lower bound does not need to be 0</span></span>
<span>    <span>for</span> (vals, <span>10</span>..) |x, i| {</span>
<span>        <span>try</span> std.testing.expectEqual(i, x);</span>
<span>    }</span>
<span></span>
<span>    <span>// The range does not need to come last</span></span>
<span>    <span>for</span> (<span>10</span>..<span>14</span>, vals) |i, x| {</span>
<span>        <span>try</span> std.testing.expectEqual(i, x);</span>
<span>    }</span>
<span>    </span>
<span>    <span>// You can have multiple captures of any kind</span></span>
<span>    <span>for</span> (<span>10</span>..<span>14</span>, vals, vals, <span>0</span>..) |i, val, *val_ptr, j| {</span>
<span>        <span>try</span> std.testing.expectEqual(i, j + <span>10</span>);</span>
<span>        <span>try</span> std.testing.expectEqual(i, val);</span>
<span>        <span>try</span> std.testing.expectEqual(i, val_ptr.*);</span>
<span>    }</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test for_index_capture.zig</kbd>
1/1 test.index capture in for loop... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    The lower and upper bounds of ranges are of type <code><span><span>usize</span></span></code>, as is the
    capture, since this feature is primarily intended for iterating over data in memory. Note that
    it is valid to loop over only a range:
    </p>
    <figure><figcaption><cite>for_range_only.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"for loop over range"</span> {</span>
<span>    <span>var</span> val: <span>usize</span> = <span>0</span>;</span>
<span>    <span>for</span> (<span>0</span>..<span>20</span>) |i| {</span>
<span>        <span>try</span> std.testing.expectEqual(val, i);</span>
<span>        val += <span>1</span>;</span>
<span>    }</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test for_range_only.zig</kbd>
1/1 test.for loop over range... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    To automatically migrate old code, <code><span>zig fmt</span></code> automatically adds
    <code><span><span>0</span>..</span></code> operands to loops with an index capture and no corresponding operand.
    </p>
    <p>
    The behavior of pointer captures in for loops has changed slightly. Previously, the following
    code was valid, but now it emits a compile error:
    </p>
    <figure><figcaption><cite>pointer_capture_from_array.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"pointer capture from array"</span> {</span>
<span>    <span>var</span> arr: [<span>3</span>]<span>u8</span> = <span>undefined</span>;</span>
<span>    <span>for</span> (arr) |*x| {</span>
<span>        x.* = <span>123</span>;</span>
<span>    }</span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u8</span>, &amp;arr, &amp;.{ <span>123</span>, <span>123</span>, <span>123</span> });</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test pointer_capture_from_array.zig</kbd>
<span>docgen_tmp/pointer_capture_from_array.zig:5:16: </span><span>error: </span><span>pointer capture of non pointer type '[3]u8'
</span>    for (arr) |*x| {
               <span>^~~
</span><span>docgen_tmp/pointer_capture_from_array.zig:5:10: </span><span>note: </span><span>consider using '&amp;' here
</span>    for (arr) |*x| {
         <span>^~~
</span>
</samp></pre></figure>
    <p>
    This code previously worked because the language implicitly took a reference to
    <code><span>arr</span></code>. This no longer happens: if you use a pointer capture, the
    corresponding iterable must be a pointer or slice. In this case, the fix - as suggested by the
    error note - is simply to take a reference to the array.
    </p>
    <figure><figcaption><cite>pointer_capture_from_array_pointer.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"pointer capture from array"</span> {</span>
<span>    <span>var</span> arr: [<span>3</span>]<span>u8</span> = <span>undefined</span>;</span>
<span>    <span>for</span> (&amp;arr) |*x| {</span>
<span>        x.* = <span>123</span>;</span>
<span>    }</span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u8</span>, &amp;arr, &amp;.{ <span>123</span>, <span>123</span>, <span>123</span> });</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test pointer_capture_from_array_pointer.zig</kbd>
1/1 test.pointer capture from array... OK
All 1 tests passed.
</samp></pre></figure>

    

    <h3 id="memcpy-and-memset"><a href="#toc-memcpy-and-memset">@memcpy and @memset</a> <a href="#memcpy-and-memset">§</a></h3>

    <p>
    0.11.0 changes the usage of the builtins <code><span><span>@memcpy</span></span></code> and
    <code><span><span>@memset</span></span></code> to make them more useful.
    </p>
    <p>
    <code><span><span>@memcpy</span></span></code> now takes two parameters. The first is the destination, and must
    be a mutable slice of any any element type. The second parameter is the source value, which may
    be either a slice of the element type (in which case it must have the same length) or a
    many-pointer to it (in which case it is implicitly sliced to the same length). The builtin
    copies values from the source address to the destination address.
    </p>
    <p>
    The source and destination memory must not overlap (overlap is considered safety-checked
    <a href="https://ziglang.org/documentation/0.11.0/#Undefined-Behavior">Undefined Behavior</a>). This is one of the
    key motivators for using this builtin over the standard library.
    </p>
    <figure><figcaption><cite>memcpy.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"@memcpy usage"</span> {</span>
<span>    <span>const</span> a: [<span>4</span>]<span>u32</span> = .{ <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span> };</span>
<span></span>
<span>    <span>var</span> b: [<span>4</span>]<span>u32</span> = <span>undefined</span>;</span>
<span>    <span>@memcpy</span>(&amp;b, &amp;a);</span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u32</span>, &amp;a, &amp;b);</span>
<span></span>
<span>    <span>// If the second operand is a many-ptr, the length is taken from the first operand</span></span>
<span>    <span>var</span> c: [<span>4</span>]<span>u32</span> = <span>undefined</span>;</span>
<span>    <span>const</span> a_manyptr: [*]<span>const</span> <span>u32</span> = (&amp;a).ptr;</span>
<span>    <span>@memcpy</span>(&amp;c, a_manyptr);</span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u32</span>, &amp;a, &amp;c);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test memcpy.zig</kbd>
1/1 test.@memcpy usage... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    Since this builtin now encompasses the most common use case of
    <code><span>std.mem.copy</span></code>, that function has been renamed to
    <code><span>std.mem.copyForwards</span></code>. Like <code><span>copyBackwards</span></code>, the only
    use case for that function is when the source and destination slices overlap, meaning elements
    must be copied in a particular order. When migrating code, it is safe to replace all uses of
    <code><span>copy</span></code> with <code><span>copyForwards</span></code>, but potentially more
    optimal and clearer to instead use <code><span><span>@memcpy</span></span></code> provided the slices are
    guaranteed not to overlap.
    </p>
    <p>
    <code><span><span>@memset</span></span></code> has also changed signature. It takes two parameters: the first is
    a mutable slice of any element type, and the second is a value which is coerced to that element
    type. All values referenced by the destination slice are set the provided value.
    </p>
    <figure><figcaption><cite>memset.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"@memset usage"</span> {</span>
<span>    <span>var</span> a: [<span>4</span>]<span>u32</span> = <span>undefined</span>;</span>
<span>    <span>@memset</span>(&amp;a, <span>10</span>);</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqualSlices(<span>u32</span>, &amp;.{ <span>10</span>, <span>10</span>, <span>10</span>, <span>10</span> }, &amp;a);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test memset.zig</kbd>
1/1 test.@memset usage... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    This builtin now precisely encompasses the former use cases of
    <code><span>std.mem.set</span></code>. Therefore, this standard library function has been removed
    in favor of the builtin.
    </p>
    

    <h3 id="min-and-max"><a href="#toc-min-and-max">@min and @max</a> <a href="#min-and-max">§</a></h3>

    <p>
    The builtins <code><span><span>@min</span></span></code> and <code><span><span>@max</span></span></code> have undergone two key
    changes. The first is that they now take arbitrarily many arguments, finding the minimum/maximum
    value across <i>all</i> arguments: for instance, <code><span><span>@min</span>(<span>2</span>, <span>1</span>, <span>3</span>) == <span>1</span></span></code>. The
    second change relates to the type returned by these operations. Previously,
    <a href="https://ziglang.org/documentation/0.11.0/#Peer-Type-Resolution">Peer Type Resolution</a> was used to unify
    the operand types. However, this sometimes led to redundant uses of
    <code><span><span>@intCast</span></span></code>: for instance <code><span><span>@min</span>(some_u16, <span>255</span>)</span></code> can
    always fit in a <code><span><span>u8</span></span></code>. To avoid this, when these operations are performed on
    integers (or vectors thereof), the compiler will now notice comptime-known bounds of the result
    (based on either comptime-known operands or on differing operand types) and refine the result
    type as tightly as possible.
    </p>
    <figure><figcaption><cite>min_max.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> assert = std.debug.assert;</span>
<span><span>const</span> expectEqual = std.testing.expectEqual;</span>
<span></span>
<span><span>test</span> <span>"@min/@max takes arbitrarily many arguments"</span> {</span>
<span>    <span>try</span> expectEqual(<span>11</span>, <span>@min</span>(<span>19</span>, <span>11</span>, <span>35</span>, <span>18</span>));</span>
<span>    <span>try</span> expectEqual(<span>35</span>, <span>@max</span>(<span>19</span>, <span>11</span>, <span>35</span>, <span>18</span>));</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"@min/@max refines result type"</span> {</span>
<span>    <span>const</span> x: <span>u8</span> = <span>20</span>; <span>// comptime-known</span></span>
<span>    <span>var</span> y: <span>u64</span> = <span>12345</span>;</span>
<span>    <span>// Since an exact bound is comptime-known, the result must fit in a u5</span></span>
<span>    <span>comptime</span> assert(<span>@TypeOf</span>(<span>@min</span>(x, y)) == <span>u5</span>);</span>
<span></span>
<span>    <span>var</span> x_rt: <span>u8</span> = x; <span>// runtime-known</span></span>
<span>    <span>// Since one argument to @min is a u8, the result must fit in a u8</span></span>
<span>    <span>comptime</span> assert(<span>@TypeOf</span>(<span>@min</span>(x_rt, y)) == <span>u8</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test min_max.zig</kbd>
1/2 test.@min/@max takes arbitrarily many arguments... OK
2/2 test.@min/@max refines result type... OK
All 2 tests passed.
</samp></pre></figure>
    <p>
    This is a breaking change, as any usage of these values without an explicit type annotation may
    now result in overflow: for instance, <code><span><span>@min</span>(my_u32, <span>255</span>) + <span>1</span></span></code> used to be
    always valid but may now overflow. This is solved with explicit type annotations, either with
    <code><span><span>@as</span></span></code> or using an intermediate <code><span><span>const</span></span></code>.
    </p>

    <p>
    Since these changes have been applied to the builtin functions, several standard library
    functions are now redundant. Therefore, the following functions have been deprecated:
    </p>
    <ul>
      <li><code><span>std.math.min</span></code></li>
      <li><code><span>std.math.max</span></code></li>
      <li><code><span>std.math.min3</span></code></li>
      <li><code><span>std.math.max3</span></code></li>
    </ul>

    <p>
    For more information on these changes, see <a href="https://github.com/ziglang/zig/issues/14039">the proposal</a> and <a href="https://github.com/ziglang/zig/pull/15522">the PR implementing it</a>.
    </p>
    

    <h3 id="trap"><a href="#toc-trap">@trap</a> <a href="#trap">§</a></h3>

    <p>New builtin:</p>
    <pre><code><span><span>@trap</span>() <span>noreturn</span></span></code></pre>
    <p>
    This function inserts a platform-specific trap/jam instruction which can be
    used to exit the program abnormally.
    This may be implemented by explicitly emitting an invalid instruction which
    may cause an illegal instruction exception of some sort.
    Unlike <code><span><span>@breakpoint</span></span></code>, execution does not continue afterwards:
    </p>
    <figure><figcaption><cite>trap_noreturn.zig</cite></figcaption><pre><code><span><span>test</span> <span>"@trap is noreturn"</span> {</span>
<span>    <span>@trap</span>();</span>
<span>    <span>return</span> <span>error</span>.Foo; <span>// Control flow will never reach this line!</span></span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test trap_noreturn.zig</kbd>
<span>docgen_tmp/trap_noreturn.zig:3:5: </span><span>error: </span><span>unreachable code
</span>    return error.Foo; // Control flow will never reach this line!
    <span>^~~~~~~~~~~~~~~~
</span><span>docgen_tmp/trap_noreturn.zig:2:5: </span><span>note: </span><span>control flow is diverted here
</span>    @trap();
    <span>^~~~~~~
</span>
</samp></pre></figure>
    

    <h3 id="inComptime"><a href="#toc-inComptime">@inComptime</a> <a href="#inComptime">§</a></h3>

    <p>
    A new builtin, <code><span><span>@inComptime</span>()</span></code>, has been introduced. This builtin returns a
    <code><span><span>bool</span></span></code> indicating whether or not it was evaluated in a
    <code><span><span>comptime</span></span></code> scope.
    </p>
    <figure><figcaption><cite>in_comptime.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> assert = std.debug.assert;</span>
<span><span>const</span> expectEqual = std.testing.expectEqual;</span>
<span></span>
<span><span>const</span> global_val = blk: {</span>
<span>    assert(<span>@inComptime</span>());</span>
<span>    <span>break</span> :blk <span>123</span>;</span>
<span>};</span>
<span></span>
<span><span>comptime</span> {</span>
<span>    assert(<span>@inComptime</span>());</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>f</span>() <span>u32</span> {</span>
<span>    <span>if</span> (<span>@inComptime</span>()) {</span>
<span>        <span>return</span> <span>1</span>;</span>
<span>    } <span>else</span> {</span>
<span>        <span>return</span> <span>2</span>;</span>
<span>    }</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"@inComptime"</span> {</span>
<span>    <span>try</span> expectEqual(<span>true</span>, <span>comptime</span> <span>@inComptime</span>());</span>
<span>    <span>try</span> expectEqual(<span>false</span>, <span>@inComptime</span>());</span>
<span>    <span>try</span> expectEqual(<span>@as</span>(<span>u32</span>, <span>1</span>), <span>comptime</span> f());</span>
<span>    <span>try</span> expectEqual(<span>@as</span>(<span>u32</span>, <span>2</span>), f());</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test in_comptime.zig</kbd>
1/1 test.@inComptime... OK
All 1 tests passed.
</samp></pre></figure>
    

    <h3 id="Split-qualCast-into-constCast-and-volatileCast"><a href="#toc-Split-qualCast-into-constCast-and-volatileCast">Split @qualCast into @constCast and @volatileCast</a> <a href="#Split-qualCast-into-constCast-and-volatileCast">§</a></h3>

    <figure><figcaption><cite>qualcast.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> expect = std.testing.expect;</span>
<span></span>
<span><span>test</span> <span>"qualCast"</span> {</span>
<span>    <span>const</span> x: <span>i32</span> = <span>1234</span>;</span>
<span>    <span>const</span> y = <span>@qualCast</span>(&amp;x);</span>
<span>    <span>try</span> expect(<span>@TypeOf</span>(y) == *<span>i32</span>);</span>
<span>    <span>try</span> expect(y.* == <span>1234</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test qualcast.zig</kbd>
<span>docgen_tmp/qualcast.zig:6:15: </span><span>error: </span><span>invalid builtin function: '@qualCast'
</span>    const y = @qualCast(&amp;x);
              <span>^~~~~~~~~~~~~
</span>
</samp></pre></figure>
    <p>Use <code><span><span>@constCast</span></span></code> instead to fix the error.</p>
    

    <h3 id="Rename-Casting-Builtins"><a href="#toc-Rename-Casting-Builtins">Rename Casting Builtins</a> <a href="#Rename-Casting-Builtins">§</a></h3>

    <p>
    An <a href="https://github.com/ziglang/zig/issues/6128">accepted proposal</a> has been
    implemented to rename all casting builtins of the form <code><span><span>@xToY</span></span></code> to
    <code><span><span>@yFromX</span></span></code>. The goal of this change is to make code more readable by
    ensuring information flows in a consistent direction (right-to-left) through function-call-like
    expressions.
    </p>
    <p>
    The full list of affected builtins is as follows:
    </p>
    <table>
      <thead>
        <tr>
          <th>old name</th>
          <th>new name</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code><span><span>@boolToInt</span></span></code></td>
          <td><code><span><span>@intFromBool</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@enumToInt</span></span></code></td>
          <td><code><span><span>@intFromEnum</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@errorToInt</span></span></code></td>
          <td><code><span><span>@intFromError</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@floatToInt</span></span></code></td>
          <td><code><span><span>@intFromFloat</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@intToEnum</span></span></code></td>
          <td><code><span><span>@enumFromInt</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@intToError</span></span></code></td>
          <td><code><span><span>@errorFromInt</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@intToFloat</span></span></code></td>
          <td><code><span><span>@floatFromInt</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@intToPtr</span></span></code></td>
          <td><code><span><span>@ptrFromInt</span></span></code></td>
        </tr>
        <tr>
          <td><code><span><span>@ptrToInt</span></span></code></td>
          <td><code><span><span>@intFromPtr</span></span></code></td>
        </tr>
      </tbody>
    </table>
    <p>
    <code>zig fmt</code> will automatically update usages of the old builtin names in your code.
    </p>
    

    <h3 id="Cast-Inference"><a href="#toc-Cast-Inference">Cast Inference</a> <a href="#Cast-Inference">§</a></h3>

    <p>
    Zig 0.11.0 implements <a href="https://github.com/ziglang/zig/issues/5909">an accepted proposal</a>
    which changes how "casting" builtins (e.g. <code><span><span>@intCast</span></span></code>,
    <code><span><span>@enumFromInt</span></span></code>) behave. The goal of this change is to improve readability
    and safety.
    </p>
    <p>
    In previous versions of Zig, casting builtins took as a parameter the <b>destination type</b> of
    the cast, for instance <code><span><span>@intCast</span>(<span>u8</span>, x)</span></code>. This was easy to understand, but
    can lead to code duplication where a type must be repeated at the usage site despite already
    being specified as, for instance, a parameter type or field type.
    </p>
    <p>
    As a motivating example, consider a function parameter of type <code><span><span>u16</span></span></code> which
    you are passing a <code><span><span>u64</span></span></code>. You need to use <code><span><span>@intCast</span></span></code> to
    convert your value to the correct type. Now suppose that down the line, you find out the
    parameter needs to be a <code><span><span>u32</span></span></code> so you can pass in larger values. There is now
    a footgun here: if you don't change every <code><span><span>@intCast</span></span></code> to cast to the correct
    type, you have a silent bug in your program which may not cause a problem for a while, making it
    hard to spot.
    </p>
    <p>
    This is the basic pattern motivating this change. The idea is that instead of writing
    <code><span>f(<span>@intCast</span>(<span>u16</span>, x))</span></code>, you instead write
    <code><span>f(<span>@intCast</span>(x))</span></code>, and the destination type of the cast is inferred based on
    the type. This is not just about function parameters: it is also applicable to struct
    initializations, return values, and more.
    </p>
    <p>
    This language change removes the destination type parameter from all cast builtins. Instead,
    these builtins now use <a href="https://ziglang.org/documentation/0.11.0/#Reuslt-Location-Semantics">Result Location Semantics</a>
    to infer the result type of the cast from the expression's "result type". In essence, this means
    type inference is used. Most expressions which have a known concrete type for their operand will
    provide a result type. For instance:
    </p>
    <ul>
      <li><code><span><span>const</span> x: T = e</span></code> gives <code>e</code> a result type of <code>T</code></li>
      <li><code><span><span>@as</span>(T, e)</span></code> gives <code>e</code> a result type of <code>T</code></li>
      <li><code><span><span>return</span> e</span></code> gives <code>e</code> a result type of the function's return type</li>
      <li><code><span>S{ .f = e }</span></code> gives <code>e</code> a result type of the type of the field <code>S.f</code></li>
      <li><code><span>f(e)</span></code> gives <code>e</code> a result type of the first parameter type of <code>f</code></li>
    </ul>
    <p>
    The full list of affected cast builtins is as follows:
    </p>
    <ul>
      <li><code><span><span>@addrSpaceCast</span></span></code>, <code><span><span>@alignCast</span></span></code>, <code><span><span>@ptrCast</span></span></code></li>
      <li><code><span><span>@errSetCast</span></span></code>, <code><span><span>@floatCast</span></span></code>, <code><span><span>@intCast</span></span></code></li>
      <li><code><span><span>@intFromFloat</span></span></code>, <code><span><span>@enumFromInt</span></span></code>, <code><span><span>@floatFromInt</span></span></code>, <code><span><span>@ptrFromInt</span></span></code></li>
      <li><code><span><span>@truncate</span></span></code>, <code><span><span>@bitCast</span></span></code></li>
    </ul>
    <p>
    Using these builtins in an expression with no result type will give a compile error:
    </p>
    <figure><figcaption><cite>no_cast_result_type.zig</cite></figcaption><pre><code><span><span>test</span> <span>"cast without result type"</span> {</span>
<span>    <span>const</span> x: <span>u16</span> = <span>200</span>;</span>
<span>    <span>const</span> y = <span>@intCast</span>(x);</span>
<span>    _ = y;</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test no_cast_result_type.zig</kbd>
<span>docgen_tmp/no_cast_result_type.zig:3:15: </span><span>error: </span><span>@intCast must have a known result type
</span>    const y = @intCast(x);
              <span>^~~~~~~~~~~
</span><span>docgen_tmp/no_cast_result_type.zig:3:15: </span><span>note: </span><span>use @as to provide explicit result type
</span>
</samp></pre></figure>
    <p>
    This error indicates one possible method of providing an explicit result type: using
    <code><span><span>@as</span></span></code>. This will always work, however it is usually not necessary. Instead,
    result types are normally inferred from type annotations, struct/array initialization expressions,
    parameter types, and so on.
    </p>
    <figure><figcaption><cite>cast_result_type_inference.zig</cite></figcaption><pre><code><span><span>test</span> <span>"infer cast result type from type annotation"</span> {</span>
<span>    <span>const</span> x: <span>u16</span> = <span>200</span>;</span>
<span>    <span>const</span> y: <span>u8</span> = <span>@intCast</span>(x);</span>
<span>    _ = y;</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"infer cast result type from field type"</span> {</span>
<span>    <span>const</span> S = <span>struct</span> { x: <span>f32</span> };</span>
<span>    <span>const</span> val: <span>f64</span> = <span>123.456</span>;</span>
<span>    <span>const</span> s: S = .{ .x = <span>@floatCast</span>(val) };</span>
<span>    _ = s;</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"infer cast result type from parameter type"</span> {</span>
<span>    <span>const</span> val: <span>u64</span> = <span>123</span>;</span>
<span>    f(<span>@intCast</span>(val));</span>
<span>}</span>
<span><span>fn</span> <span>f</span>(x: <span>u32</span>) <span>void</span> {</span>
<span>    _ = x;</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"infer cast result type from return type"</span> {</span>
<span>    _ = g(<span>123</span>);</span>
<span>}</span>
<span><span>fn</span> <span>g</span>(x: <span>u64</span>) <span>u32</span> {</span>
<span>    <span>return</span> <span>@intCast</span>(x);</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"explicitly annotate result type with @as"</span> {</span>
<span>    <span>const</span> E = <span>enum</span>(<span>u8</span>) { a, b };</span>
<span>    <span>const</span> x: <span>u8</span> = <span>1</span>;</span>
<span>    _ = <span>@as</span>(E, <span>@enumFromInt</span>(x));</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test cast_result_type_inference.zig</kbd>
1/5 test.infer cast result type from type annotation... OK
2/5 test.infer cast result type from field type... OK
3/5 test.infer cast result type from parameter type... OK
4/5 test.infer cast result type from return type... OK
5/5 test.explicitly annotate result type with @as... OK
All 5 tests passed.
</samp></pre></figure>

    <p>
    Where possible, <code>zig fmt</code> has been made to automatically migrate uses of the old builtins,
    using a naive translation based on <code>@as</code>. Most builtins can be automatically updated
    correctly, but there are a few exceptions.
    </p>
    <ul>
      <li><code><span><span>@addrSpaceCast</span></span></code> and <code><span><span>@alignCast</span></span></code> cannot be translated as the old usage does not provide the full result type. <code>zig fmt</code> will not modify it.</li>
      <li><code><span><span>@ptrCast</span></span></code> may sometimes decrease alignment where it previously did not, potentially triggering compile errors. This can be fixed by modifying the type to have the correct alignment.</li>
      <li><code><span><span>@truncate</span></span></code> will be translated incorrectly for vectors, causing a compile error. This can be fixed by changing the scalar type <code>T</code> to the vector type <code><span><span>@Vector</span>(n, T)</span></code>.</li>
      <li><code><span><span>@splat</span></span></code> cannot be translated as the old usage does not provide the full result type. <code>zig fmt</code> will not modify it.</li>
    </ul>

    <h4 id="Pointer-Casts"><a href="#toc-Pointer-Casts">Pointer Casts</a> <a href="#Pointer-Casts">§</a></h4>

    <p>
    The builtins <code><span><span>@addrSpaceCast</span></span></code> and <code><span><span>@alignCast</span></span></code> would
    become quite cumbersome to use under this system as described, since you would now have to specify
    the full intermediate pointer types. Instead, pointer casts (those two builtins and <code><span><span>@ptrCast</span></span></code>)
    are special. They combine into a single logical operation, with each builtin effectively
    "allowing" a particular component of the pointer to be cast rather than "performing" it. (Indeed,
    this may be a helpful mental model for the new cast builtins more generally.) This means any
    sequence of nested pointer cast builtins requires only one result type, rather than one at every
    intermediate computation.
    </p>
    <figure><figcaption><cite>pointer_cast.zig</cite></figcaption><pre><code><span><span>test</span> <span>"pointer casts"</span> {</span>
<span>    <span>const</span> ptr1: *<span>align</span>(<span>1</span>) <span>const</span> <span>u32</span> = <span>@ptrFromInt</span>(<span>0x1000</span>);</span>
<span>    <span>const</span> ptr2: *<span>u64</span> = <span>@constCast</span>(<span>@alignCast</span>(<span>@ptrCast</span>(ptr1)));</span>
<span>    _ = ptr2;</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test pointer_cast.zig</kbd>
1/1 test.pointer casts... OK
All 1 tests passed.
</samp></pre></figure>
    

    <h4 id="splat"><a href="#toc-splat">@splat</a> <a href="#splat">§</a></h4>

    <p>
    The <code><span><span>@splat</span></span></code> builtin has undergone a similar change. It no longer has a
    parameter to indicate the length of the resulting vector, instead using the expression's result
    type to infer this and the type of its operand.
    </p>
    <figure><figcaption><cite>splat_result_type.zig</cite></figcaption><pre><code><span><span>test</span> <span>"@splat result type"</span> {</span>
<span>    <span>const</span> vec: <span>@Vector</span>(<span>8</span>, <span>u8</span>) = <span>@splat</span>(<span>123</span>);</span>
<span>    _ = vec;</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test splat_result_type.zig</kbd>
1/1 test.@splat result type... OK
All 1 tests passed.
</samp></pre></figure>
    

    

    <h3 id="Tuple-Type-Declarations"><a href="#toc-Tuple-Type-Declarations">Tuple Type Declarations</a> <a href="#Tuple-Type-Declarations">§</a></h3>

    <p>Tuple types can now be declared using struct declaration syntax without the field types (<a href="https://github.com/ziglang/zig/issues/4335">#4335</a>):</p>
    <figure><figcaption><cite>tuple_decl.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> expect = std.testing.expect;</span>
<span><span>const</span> expectEqualStrings = std.testing.expectEqualStrings;</span>
<span></span>
<span><span>test</span> <span>"tuple declarations"</span> {</span>
<span>    <span>const</span> T = <span>struct</span> { <span>u32</span>, []<span>const</span> <span>u8</span> };</span>
<span>    <span>var</span> t: T = .{ <span>1</span>, <span>"foo"</span> };</span>
<span>    <span>try</span> expect(t[<span>0</span>] == <span>1</span>);</span>
<span>    <span>try</span> expectEqualStrings(t[<span>1</span>], <span>"foo"</span>);</span>
<span></span>
<span>    <span>var</span> mul = t ** <span>3</span>;</span>
<span>    <span>try</span> expect(<span>@TypeOf</span>(mul) != T);</span>
<span>    <span>try</span> expect(mul.len == <span>6</span>);</span>
<span>    <span>try</span> expect(mul[<span>2</span>] == <span>1</span>);</span>
<span>    <span>try</span> expectEqualStrings(mul[<span>3</span>], <span>"foo"</span>);</span>
<span></span>
<span>    <span>var</span> t2: T = .{ <span>2</span>, <span>"bar"</span> };</span>
<span>    <span>var</span> cat = t ++ t2;</span>
<span>    <span>try</span> expect(<span>@TypeOf</span>(cat) != T);</span>
<span>    <span>try</span> expect(cat.len == <span>4</span>);</span>
<span>    <span>try</span> expect(cat[<span>2</span>] == <span>2</span>);</span>
<span>    <span>try</span> expectEqualStrings(cat[<span>3</span>], <span>"bar"</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test tuple_decl.zig</kbd>
1/1 test.tuple declarations... OK
All 1 tests passed.
</samp></pre></figure>
    <p>Packed and extern tuples are forbidden (<a href="https://github.com/ziglang/zig/issues/16551">#16551</a>).</p>
    

    <h3 id="Concatenation-of-Arrays-and-Tuples"><a href="#toc-Concatenation-of-Arrays-and-Tuples">Concatenation of Arrays and Tuples</a> <a href="#Concatenation-of-Arrays-and-Tuples">§</a></h3>

    <figure><figcaption><cite>tuple_array_cat.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"concatenate array with tuple"</span> {</span>
<span>    <span>const</span> array: [<span>2</span>]<span>u8</span> = .{ <span>1</span>, <span>2</span> };</span>
<span>    <span>const</span> seq = array ++ .{ <span>3</span>, <span>4</span> };</span>
<span>    <span>try</span> std.testing.expect(std.mem.eql(<span>u8</span>, &amp;seq, &amp;.{ <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span> }));</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test tuple_array_cat.zig</kbd>
1/1 test.concatenate array with tuple... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    This can be a nice tool when writing <a href="#Crypto">Crypto</a> code, and indeed
    is used extensively by the <a href="#Standard-Library">Standard Library</a> to avoid heap
    <a href="#Memory-Allocation">Memory Allocation</a> in the new <a href="#TLS-Client">TLS Client</a>.
    </p>
    

    <h3 id="Allow-Indexing-Tuple-and-Vector-Pointers"><a href="#toc-Allow-Indexing-Tuple-and-Vector-Pointers">Allow Indexing Tuple and Vector Pointers</a> <a href="#Allow-Indexing-Tuple-and-Vector-Pointers">§</a></h3>

    <p>
    Zig allows you to directly index pointers to arrays like plain arrays, which transparently
    dereferences the pointer as required. For consistency, this is now additionally allowed for
    pointers to tuples and vectors (the other non-pointer indexable types).
    </p>
    <figure><figcaption><cite>index_tuple_vec_ptr.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"index tuple pointer"</span> {</span>
<span>    <span>var</span> raw: <span>struct</span> { <span>u32</span>, <span>u32</span> } = .{ <span>1</span>, <span>2</span> };</span>
<span>    <span>const</span> ptr = &amp;raw;</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>1</span>), ptr[<span>0</span>]);</span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>2</span>), ptr[<span>1</span>]);</span>
<span></span>
<span>    ptr[<span>0</span>] = <span>3</span>;</span>
<span>    ptr[<span>1</span>] = <span>4</span>;</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>3</span>), ptr[<span>0</span>]);</span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>4</span>), ptr[<span>1</span>]);</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"index vector pointer"</span> {</span>
<span>    <span>var</span> raw: <span>@Vector</span>(<span>2</span>, <span>u32</span>) = .{ <span>1</span>, <span>2</span> };</span>
<span>    <span>const</span> ptr = &amp;raw;</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>1</span>), ptr[<span>0</span>]);</span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>2</span>), ptr[<span>1</span>]);</span>
<span></span>
<span>    ptr[<span>0</span>] = <span>3</span>;</span>
<span>    ptr[<span>1</span>] = <span>4</span>;</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>3</span>), ptr[<span>0</span>]);</span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>4</span>), ptr[<span>1</span>]);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test index_tuple_vec_ptr.zig</kbd>
1/2 test.index tuple pointer... OK
2/2 test.index vector pointer... OK
All 2 tests passed.
</samp></pre></figure>
    

    <h3 id="Overflow-Builtins-Return-Tuples"><a href="#toc-Overflow-Builtins-Return-Tuples">Overflow Builtins Return Tuples</a> <a href="#Overflow-Builtins-Return-Tuples">§</a></h3>

    <p>Now that we have started to get into writing our own <a href="#Code-Generation">Code Generation</a> and not
    relying exclusively on <a href="#LLVM-16">LLVM</a>, the flaw with the previous
    API becomes clear: writing the result through a pointer parameter makes it
    too hard to use a special value returned from the builtin and detect the
    pattern that allows lowering to the efficient code.</p>
    <p>Furthermore, the result pointer is incompatible with SIMD vectors
    (related: <a href="#Cast-Inference">Cast Inference</a>).</p>
    <p>Arithmetic overflow functions now return a tuple, like this:</p>
    <pre><code><span><span>@addOverflow</span>(a: T, b: T) <span>struct</span> {T, <span>u1</span>}</span>
<span><span>@addOverflow</span>(a: <span>@Vector</span>(T, N), b: <span>@Vector</span>(T, N)) <span>struct</span> {<span>@Vector</span>(T, N), <span>@Vector</span>(<span>u1</span>, N)}</span></code></pre>
    <p>If #498 were implemented, <code><span>parseInt</span></code> would look like this:</p>
<pre><code><span><span>fn</span> <span>parseInt</span>(<span>comptime</span> T: <span>type</span>, buf: []<span>const</span> <span>u8</span>, radix: <span>u8</span>) !T {</span>
<span>    <span>var</span> x: T = <span>0</span>;</span>
<span></span>
<span>    <span>for</span> (buf) |c| {</span>
<span>        <span>const</span> digit = <span>switch</span> (c) {</span>
<span>            <span>'0'</span>...<span>'9'</span> =&gt; c - <span>'0'</span>,</span>
<span>            <span>'A'</span>...<span>'Z'</span> =&gt; c - <span>'A'</span> + <span>10</span>,</span>
<span>            <span>'a'</span>...<span>'z'</span> =&gt; c - <span>'a'</span> + <span>10</span>,</span>
<span>            <span>else</span> =&gt; <span>return</span> <span>error</span>.InvalidCharacter,</span>
<span>        };</span>
<span>        x, <span>const</span> mul_overflow = <span>@mulWithOverflow</span>(x, radix);</span>
<span>        <span>if</span> (mul_overflow != <span>0</span>) <span>return</span> <span>error</span>.Overflow;</span>
<span></span>
<span>        x, <span>const</span> add_overflow = <span>@addWithOverflow</span>(x, digit);</span>
<span>        <span>if</span> (add_overflow != <span>0</span>) <span>return</span> <span>error</span>.Overflow;</span>
<span>    }</span>
<span></span>
<span>    <span>return</span> x;</span>
<span>}</span></code></pre>
    <p>However #498 is neither implemented nor accepted yet, so actual usage must do this:</p>
    <pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>fn</span> <span>parseInt</span>(<span>comptime</span> T: <span>type</span>, buf: []<span>const</span> <span>u8</span>, radix: <span>u8</span>) !T {</span>
<span>    <span>var</span> x: T = <span>0</span>;</span>
<span></span>
<span>    <span>for</span> (buf) |c| {</span>
<span>        <span>const</span> digit = <span>switch</span> (c) {</span>
<span>            <span>'0'</span>...<span>'9'</span> =&gt; c - <span>'0'</span>,</span>
<span>            <span>'A'</span>...<span>'Z'</span> =&gt; c - <span>'A'</span> + <span>10</span>,</span>
<span>            <span>'a'</span>...<span>'z'</span> =&gt; c - <span>'a'</span> + <span>10</span>,</span>
<span>            <span>else</span> =&gt; <span>return</span> <span>error</span>.InvalidCharacter,</span>
<span>        };</span>
<span>        <span>const</span> mul_result = <span>@mulWithOverflow</span>(x, radix);</span>
<span>        x = mul_result[<span>0</span>];</span>
<span>        <span>const</span> mul_overflow = mul_result[<span>1</span>];</span>
<span>        <span>if</span> (mul_overflow != <span>0</span>) <span>return</span> <span>error</span>.Overflow;</span>
<span></span>
<span>        <span>const</span> add_result = <span>@addWithOverflow</span>(x, digit);</span>
<span>        x = add_result[<span>0</span>];</span>
<span>        <span>const</span> add_overflow = add_result[<span>1</span>];</span>
<span>        <span>if</span> (add_overflow != <span>0</span>) <span>return</span> <span>error</span>.Overflow;</span>
<span>    }</span>
<span></span>
<span>    <span>return</span> x;</span>
<span>}</span></code></pre>
    <p>More details: #10248</p>
    

    <h3 id="Slicing-By-Length"><a href="#toc-Slicing-By-Length">Slicing By Length</a> <a href="#Slicing-By-Length">§</a></h3>

    <p>This is technically not a <em>change</em> to the language, however,
    it bears mentioning in the language changes section, because it makes a particular
    idiom be even more idiomatic, by recognizing the pattern directly in the <a href="#Compiler">Compiler</a>.</p>
    <p>This pattern is extremely common:</p>
    <figure><figcaption><cite>slice_by_len.zig</cite></figcaption><pre><code><span><span>fn</span> <span>foo</span>(s: []<span>const</span> <span>i32</span>, start: <span>usize</span>, len: <span>usize</span>) []<span>const</span> <span>i32</span> {</span>
<span>    <span>return</span> s[start..][<span>0</span>..len];</span>
<span>}</span></code></pre></figure>
    <p>The pattern is useful because it is effectively a slice-by-length rather than
    slice by end index. With this pattern, when <code>len</code> is compile-time known,
    the expression will be a pointer to an array rather than a slice type, which is generally
    a preferrable type.</p>
    <p>The actual language change here is that this is now supported for many-ptrs. Where previously
    you had to write <code><span>(ptr + off)[<span>0</span>..len]</span></code>, you can now instead write
    <code><span>ptr[off..][<span>0</span>..len]</span></code>. Note that in general, unbounded slicing of
    many-pointers is still not permitted, requiring pointer arithmetic: only this "slicing by
    length" pattern is allowed.</p>
    <p>Zig 0.11.0 now detects this pattern and generates more efficient code.</p>
    <p>You can think of Zig as having both slice-by-end and slice-by-len syntax, it's just
    that one of them is expressed in terms of the other.</p>
    <p>More details: #15482</p>
    

    <h3 id="Inline-Function-Call-Comptime-Propagation"><a href="#toc-Inline-Function-Call-Comptime-Propagation">Inline Function Call Comptime Propagation</a> <a href="#Inline-Function-Call-Comptime-Propagation">§</a></h3>

    <figure><figcaption><cite>inline_call.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>var</span> call_count: <span>u32</span> = <span>0</span>;</span>
<span></span>
<span><span>inline</span> <span>fn</span> <span>isGreaterThan</span>(x: <span>i32</span>, y: <span>i32</span>) <span>bool</span> {</span>
<span>    call_count += <span>1</span>;</span>
<span>    <span>return</span> x &gt; y;</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"inline call comptime propagation"</span> {</span>
<span>    <span>// Runtime-known parameters to inline function, nothing new here.</span></span>
<span>    <span>var</span> a: <span>i32</span> = <span>1234</span>;</span>
<span>    <span>var</span> b: <span>i32</span> = <span>5678</span>;</span>
<span>    <span>try</span> std.testing.expect(!isGreaterThan(a, b));</span>
<span></span>
<span>    <span>// Now it gets interesting...</span></span>
<span>    <span>const</span> c = <span>1234</span>;</span>
<span>    <span>const</span> d = <span>5678</span>;</span>
<span>    <span>if</span> (isGreaterThan(c, d)) {</span>
<span>        <span>@compileError</span>(<span>"that wasn't supposed to happen"</span>);</span>
<span>    }</span>
<span></span>
<span>    <span>try</span> std.testing.expect(call_count == <span>2</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test inline_call.zig</kbd>
1/1 test.inline call comptime propagation... OK
All 1 tests passed.
</samp></pre></figure>
    <p>In this example, there is no compile error because the comptime-ness of the
    arguments is propagated to the return value of the inlined function. However,
    as demonstrated by the <code>call_count</code> global variable, runtime side-effects of
    the inlined function still occur.</p>
    <p>The <code><span><span>inline</span></span></code> keyword in Zig is an extremely powerful tool that
    should not be used lightly. It's best to let the compiler decide when to
    inline a function, except for these scenarios:</p>
    <ul>
      <li>You want to change how many stack frames are in the call stack, for debugging purposes.</li>
      <li>You want the comptime-ness of the arguments to propagate to the return value of the function, as demonstrated above.</li>
      <li>Performance measurements <em>demand</em> it. Don’t guess!</li>
    </ul>
    

    <h3 id="Exporting-C-Variadic-Functions"><a href="#toc-Exporting-C-Variadic-Functions">Exporting C Variadic Functions</a> <a href="#Exporting-C-Variadic-Functions">§</a></h3>

    <p>Generally we don't want zig programmers to use C-style variadic
    functions. But sometimes you have to interface with C code.</p>
    <p>Here are two use cases for it:</p>
    <ul>
    <li>Implementing libc in Zig</li>
    <li><a href="#C-Translation">C Translation</a>, for example an inline static function in MSVC's stdio.h</li>
    </ul>

    <p>Only some targets support this new feature:</p>
    <ul>
      <li><a href="https://github.com/ziglang/zig/issues/14096">exporting a C var args function triggers LLVM assertion when targeting non-Darwin aarch64</a>
      </li><li>It's also not working on <a href="#Windows">Windows</a>.</li>
    </ul>
    <p>That makes this feature <strong>experimental</strong> because it does not disqualify
    a target from <a href="#Tier-1-Support">Tier 1 Support</a> if it does not support C-style var args.</p>
    <p>More information: #515</p>
    

    <h3 id="Added-c_char-Type"><a href="#toc-Added-c_char-Type">Added c_char Type</a> <a href="#Added-c_char-Type">§</a></h3>

    <p>This is strictly for <a href="#C-ABI-Compatibility">C ABI Compatibility</a> and should only be used
    when it is required by the ABI.</p>
    <p>See #875 for more details.</p>
    

    <h3 id="Forbid-Runtime-Operations-in-comptime-Blocks-"><a href="#toc-Forbid-Runtime-Operations-in-comptime-Blocks-">Forbid Runtime Operations in comptime Blocks </a> <a href="#Forbid-Runtime-Operations-in-comptime-Blocks-">§</a></h3>

    <p>
    Previously, <code><span><span>comptime</span></span></code> blocks in runtime code worked in a highly unintuitive
    way: they <a href="https://github.com/ziglang/zig/issues/7056">did not actually enforce compile-time
    evaluation of their bodies</a>. This has been resolved in 0.11.0. The entire body of a <code><span><span>comptime</span></span></code>
    block will now be evaluated at compile time, and a compile error is triggered if this is not possible.
    </p>
    <figure><figcaption><cite>comptime_block.zig</cite></figcaption><pre><code><span><span>test</span> <span>"runtime operations in comptime block"</span> {</span>
<span>    <span>var</span> x: <span>u32</span> = <span>1</span>;</span>
<span>    <span>comptime</span> {</span>
<span>        x += <span>1</span>;</span>
<span>    }</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test comptime_block.zig</kbd>
<span>docgen_tmp/comptime_block.zig:4:11: </span><span>error: </span><span>unable to evaluate comptime expression
</span>        x += 1;
        <span>~~^~~~
</span><span>docgen_tmp/comptime_block.zig:4:9: </span><span>note: </span><span>operation is runtime due to this operand
</span>        x += 1;
        <span>^
</span>
</samp></pre></figure>
    <p>
    This change has one particularly notable consequence. Previously, it was allowed to <code><span><span>return</span></span></code>
    from a runtime function within a <code><span><span>comptime</span></span></code> block. However, this is illogical:
    the return cannot actually happen at comptime, since this function is being called at runtime. Therefore, this is
    now illegal.
    </p>
    <figure><figcaption><cite>return_from_comptime_block.zig</cite></figcaption><pre><code><span><span>const</span> expectEqual = <span>@import</span>(<span>"std"</span>).testing.expectEqual;</span>
<span><span>test</span> <span>"return from runtime function in comptime block"</span> {</span>
<span>    <span>try</span> expectEqual(<span>@as</span>(<span>u32</span>, <span>123</span>), f());</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>f</span>() <span>u32</span> {</span>
<span>    <span>// We want to call `foo` at comptime</span></span>
<span>    <span>comptime</span> {</span>
<span>        <span>return</span> foo();</span>
<span>    }</span>
<span>}</span>
<span><span>fn</span> <span>foo</span>() <span>u32</span> {</span>
<span>    <span>return</span> <span>123</span>;</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test return_from_comptime_block.zig</kbd>
<span>docgen_tmp/return_from_comptime_block.zig:9:9: </span><span>error: </span><span>function called at runtime cannot return value at comptime
</span>        return foo();
        <span>^~~~~~~~~~~~
</span><span>referenced by:
    test.return from runtime function in comptime block: docgen_tmp/return_from_comptime_block.zig:3:36
    remaining reference traces hidden; use '-freference-trace' to see all reference traces
</span>
</samp></pre></figure>
    <p>
    The workaround for this issue is to <i>compute</i> the return value at comptime, but <i>return</i>
    it at runtime:
    </p>
    <figure><figcaption><cite>compute_return_from_comptime_block.zig</cite></figcaption><pre><code><span><span>const</span> expectEqual = <span>@import</span>(<span>"std"</span>).testing.expectEqual;</span>
<span><span>test</span> <span>"compute return value of runtime function in comptime block"</span> {</span>
<span>    <span>try</span> expectEqual(<span>@as</span>(<span>u32</span>, <span>123</span>), f());</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>f</span>() <span>u32</span> {</span>
<span>    <span>// We want to call `foo` at comptime</span></span>
<span>    <span>return</span> <span>comptime</span> foo();</span>
<span>}</span>
<span><span>fn</span> <span>foo</span>() <span>u32</span> {</span>
<span>    <span>return</span> <span>123</span>;</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test compute_return_from_comptime_block.zig</kbd>
1/1 test.compute return value of runtime function in comptime block... OK
All 1 tests passed.
</samp></pre></figure>
    <p>
    This change similarly disallows <code><span><span>comptime</span> <span>try</span></span></code> from within a runtime function,
    since on error this attempts to return a value at compile time. To retain the old behavior, this
    sequence should be replaced with <code><span><span>try</span> <span>comptime</span></span></code>.
    </p>
    

    <h3 id="intFromBool-always-returns-u1"><a href="#toc-intFromBool-always-returns-u1">@intFromBool always returns u1</a> <a href="#intFromBool-always-returns-u1">§</a></h3>

    <p>
    The <code><span><span>@intFromBool</span></span></code> builtin (previously called
    <code><span><span>@boolToInt</span></span></code>) previously returned either a <code><span><span>u1</span></span></code> or a
    <code><span><span>comptime_int</span></span></code>, depending on whether or not it was evaluated at
    <code><span><span>comptime</span></span></code>. It has since been changed to always return a
    <code><span><span>u1</span></span></code> to improve consistency between code running at runtime and comptime.
    </p>
    <figure><figcaption><cite>int_from_bool.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"@intFromBool returns u1"</span> {</span>
<span>    <span>const</span> x = <span>@intFromBool</span>(<span>true</span>); <span>// implicitly evaluated at comptime</span></span>
<span>    <span>const</span> y = <span>comptime</span> <span>@intFromBool</span>(<span>true</span>); <span>// explicitly evaluated at comptime</span></span>
<span></span>
<span>    <span>try</span> std.testing.expect(<span>@TypeOf</span>(x) == <span>u1</span>);</span>
<span>    <span>try</span> std.testing.expect(<span>@TypeOf</span>(y) == <span>u1</span>);</span>
<span></span>
<span>    <span>try</span> std.testing.expect(x == <span>1</span>);</span>
<span>    <span>try</span> std.testing.expect(y == <span>1</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test int_from_bool.zig</kbd>
1/1 test.@intFromBool returns u1... OK
All 1 tests passed.
</samp></pre></figure>

    

    <h3 id="fieldParentPtr-Supports-Unions"><a href="#toc-fieldParentPtr-Supports-Unions">@fieldParentPtr Supports Unions</a> <a href="#fieldParentPtr-Supports-Unions">§</a></h3>

    <p>It already worked on structs; there was no reason for it to not work on unions (<a href="https://github.com/ziglang/zig/issues/6611">#6611</a>).</p>
    <figure><figcaption><cite>field_parent_ptr_union.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> expect = std.testing.expect;</span>
<span></span>
<span><span>test</span> <span>"@fieldParentPtr on a union"</span> {</span>
<span>    <span>try</span> quux(&amp;bar.c);</span>
<span>    <span>comptime</span> <span>try</span> quux(&amp;bar.c);</span>
<span>}</span>
<span></span>
<span><span>const</span> bar = Bar{ .c = <span>42</span> };</span>
<span></span>
<span><span>const</span> Bar = <span>union</span>(<span>enum</span>) {</span>
<span>    a: <span>bool</span>,</span>
<span>    b: <span>f32</span>,</span>
<span>    c: <span>i32</span>,</span>
<span>    d: <span>i32</span>,</span>
<span>};</span>
<span></span>
<span><span>fn</span> <span>quux</span>(c: *<span>const</span> <span>i32</span>) !<span>void</span> {</span>
<span>    <span>try</span> expect(c == &amp;bar.c);</span>
<span></span>
<span>    <span>const</span> base = <span>@fieldParentPtr</span>(Bar, <span>"c"</span>, c);</span>
<span>    <span>try</span> expect(base == &amp;bar);</span>
<span>    <span>try</span> expect(&amp;base.c == c);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test field_parent_ptr_union.zig</kbd>
1/1 test.@fieldParentPtr on a union... OK
All 1 tests passed.
</samp></pre></figure>
    <p>Calling <code><span><span>@fieldParentPtr</span></span></code> on a pointer that is not actually
    a field of the parent type is currently <strong>unchecked illegal behavior</strong>,
    however there is an accepted proposal to add a safety check:
    <a href="https://github.com/ziglang/zig/issues/2414">add safety checks for pointer casting</a></p>
    

    <h3 id="typeInfo-No-Longer-Returns-Private-Declarations"><a href="#toc-typeInfo-No-Longer-Returns-Private-Declarations">@typeInfo No Longer Returns Private Declarations</a> <a href="#typeInfo-No-Longer-Returns-Private-Declarations">§</a></h3>

    <p>It was a <a href="#Bug-Fixes">bug</a> that private declarations were included
    in the result of <code><span><span>@typeInfo</span></span></code> (<a href="https://github.com/ziglang/zig/issues/10731">#10731</a>).</p>
    <p>The <code><span>is_pub</span></code> field has been removed from
      <code><span>std.builtin.Type.Declaration</span></code>.</p>
    

    <h3 id="Zero-Sized-Fields-Allowed-in-Extern-Structs"><a href="#toc-Zero-Sized-Fields-Allowed-in-Extern-Structs">Zero-Sized Fields Allowed in Extern Structs</a> <a href="#Zero-Sized-Fields-Allowed-in-Extern-Structs">§</a></h3>

    <p>Zero-sized fields are now allowed in <code><span><span>extern</span> <span>struct</span></span></code> types, because
    they do not compromise the well-defined memory layout (<a href="https://github.com/ziglang/zig/issues/16404">#16404</a>).</p>
    <figure><figcaption><cite>ice_cream.zig</cite></figcaption><pre><code><span><span>const</span> builtin = <span>@import</span>(<span>"builtin"</span>);</span>
<span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> expect = std.testing.expect;</span>
<span></span>
<span><span>const</span> T = <span>extern</span> <span>struct</span> {</span>
<span>    blah: <span>i32</span>,</span>
<span>    ice_cream: <span>if</span> (builtin.is_test) <span>void</span> <span>else</span> <span>i32</span>,</span>
<span>};</span>
<span></span>
<span><span>test</span> <span>"no ice cream"</span> {</span>
<span>    <span>var</span> t: T = .{</span>
<span>        .blah = <span>1234</span>,</span>
<span>        .ice_cream = {},</span>
<span>    };</span>
<span>    <span>try</span> expect(t.blah == <span>1234</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test ice_cream.zig</kbd>
1/1 test.no ice cream... OK
All 1 tests passed.
</samp></pre></figure>
    <p>This change allows the following types to appear in extern structs:</p>
    <ul>
      <li>Zero-bit integers</li>
      <li><code><span><span>void</span></span></code></li>
      <li>zero-sized structs and packed structs</li>
      <li>enums with zero-bit backing integers</li>
      <li>arrays of any length with zero-size elements</li>
    </ul>
    <p>Note that packed structs are already allowed in extern structs, provided that their
    backing integer is allowed.</p>
    

    <h3 id="Eliminate-Bound-Functions"><a href="#toc-Eliminate-Bound-Functions">Eliminate Bound Functions</a> <a href="#Eliminate-Bound-Functions">§</a></h3>

    <p>Did you know Zig had bound functions?</p>
    <p>No? I rest my case. Good riddance!</p>
    <p>The following code was valid in 0.10, but is not any more:</p>
<figure><figcaption><cite>bound_functions.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"bound functions"</span> {</span>
<span>    <span>var</span> runtime_true = <span>true</span>;</span>
<span></span>
<span>    <span>// This code was valid in 0.10, and gave 'x' a "bound function" type.</span></span>
<span>    <span>// Bound functions have been removed from the language, so this code is no longer valid.</span></span>
<span>    <span>const</span> obj: Foo = .{};</span>
<span>    <span>const</span> x = <span>if</span> (runtime_true) obj.a <span>else</span> obj.b;</span>
<span></span>
<span>    <span>try</span> std.testing.expect(x() == <span>'a'</span>);</span>
<span>}</span>
<span></span>
<span><span>const</span> Foo = <span>struct</span> {</span>
<span>    <span>fn</span> <span>a</span>(_: Foo) <span>u8</span> {</span>
<span>        <span>return</span> <span>'a'</span>;</span>
<span>    }</span>
<span>    <span>fn</span> <span>b</span>(_: Foo) <span>u8</span> {</span>
<span>        <span>return</span> <span>'b'</span>;</span>
<span>    }</span>
<span>};</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test bound_functions.zig</kbd>
<span>docgen_tmp/bound_functions.zig:9:37: </span><span>error: </span><span>no field named 'a' in struct 'bound_functions.Foo'
</span>    const x = if (runtime_true) obj.a else obj.b;
                                    <span>^
</span><span>docgen_tmp/bound_functions.zig:14:13: </span><span>note: </span><span>struct declared here
</span>const Foo = struct {
            <span>^~~~~~
</span>
</samp></pre></figure>
    <p>
    Method calls are now restricted to the exact syntactic form <code><span>a.b(args)</span></code>.
    Any deviation from this syntax - for instance, extra parentheses as in
    <code><span>(a.b)(args)</span></code> - will be treated as a field access.
    </p>
    

    <h3 id="call-Stack"><a href="#toc-call-Stack">@call Stack</a> <a href="#call-Stack">§</a></h3>

    <p>The <code>stack</code> option has been removed from <code><span><span>@call</span></span></code> (<a href="https://github.com/ziglang/zig/issues/13907">#13907</a>).</p>
    <p>There is no upgrade path for this one, I'm afraid. This feature has proven difficult
    to implement in the <a href="#LLVM-Backend">LLVM Backend</a>.</p>
    <p>More investigation will be needed to see if something that solves the use case
    of switching call stacks can be brought back to the language before Zig reaches 1.0.</p>
    

    <h3 id="Allow-Tautological-Integer-Comparisons"><a href="#toc-Allow-Tautological-Integer-Comparisons">Allow Tautological Integer Comparisons</a> <a href="#Allow-Tautological-Integer-Comparisons">§</a></h3>

    <p>
    Previously, comparing an integer to a comptime-known value required that value to fit in the
    integer type. For instance, comparing a <code><span><span>u8</span></span></code> to <code><span><span>500</span></span></code>
    was a compile error. However, such comparisons can be useful when writing generic or future-proof
    code.
    </p>
    <p>
    As such, comparisons of this form are now allowed. However, since these comparisons are
    tautological, they do not cause any runtime checks: instead, the result is comptime-known based
    on the type. For instance, <code><span>my_u8 == <span>500</span></span></code> is comptime-known
    <code><span><span>true</span></span></code>, even if <code><span>my_u8</span></code> is not itself comptime-known.
    </p>
    <figure><figcaption><cite>tautological_compare_comptime.zig</cite></figcaption><pre><code><span><span>test</span> <span>"tautological comparisons are comptime-known"</span> {</span>
<span>    <span>var</span> x: <span>u8</span> = <span>123</span>;</span>
<span>    <span>if</span> (x &gt; <span>500</span>) <span>@compileError</span>(<span>"unreachable branch analyzed"</span>);</span>
<span>    <span>if</span> (x == -<span>20</span>) <span>@compileError</span>(<span>"unreachable branch analyzed"</span>);</span>
<span>    <span>if</span> (x &lt; <span>0</span>) <span>@compileError</span>(<span>"unreachable branch analyzed"</span>);</span>
<span>    <span>if</span> (x != <span>500</span>) {} <span>else</span> <span>@compileError</span>(<span>"unreachable branch analyzed"</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test tautological_compare_comptime.zig</kbd>
1/1 test.tautological comparisons are comptime-known... OK
All 1 tests passed.
</samp></pre></figure>
    

    <h3 id="Forbid-Source-Files-Being-Part-of-Multiple-Modules"><a href="#toc-Forbid-Source-Files-Being-Part-of-Multiple-Modules">Forbid Source Files Being Part of Multiple Modules</a> <a href="#Forbid-Source-Files-Being-Part-of-Multiple-Modules">§</a></h3>

    <p>
    A Zig module (previously known as "package") is a collection of source files, with a single root
    source file, which can be imported in your code by name. For instance, <code><span>std</span></code>
    is a module. An interesting case comes up when two modules attempt to
    <code><span><span>@import</span></span></code> the same source file.
    </p>
    <p>
    Previously, when this happened, the source file became "owned" by whichever import the compiler
    happened to reach first. This was a problem, because it could lead to inconsistent behavior in
    the compiler based on a race condition. This could be fixed by having the compiler analyzing the
    files multiple times - once for each module they're imported from - however, this could lead to
    slowdowns in compile times, and generally this kind of structure is indicative of a mistake
    anyway.
    </p>
    <p>
    Therefore, another solution was chosen: <b>having a single source file within multiple modules is
    now illegal</b>. When a source file is encountered in two different modules, an error like the following
    will be emitted:
    </p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>ls</kbd>
foo.zig  main.zig  common.zig

$ <kbd>cat common.zig</kbd>
// An empty file

$ <kbd>cat foo.zig</kbd>
// This is the root of the 'foo' module
pub const common = @import("common.zig");

$ <kbd>cat main.zig</kbd>
// This file is the root of the main module
comptime {
    _ = @import("foo").common;
    _ = @import("common.zig");
}

$ <kbd>zig test main.zig --mod foo::foo.zig --deps foo</kbd>
common.zig:1:1: error: file exists in multiple modules
main.zig:4:17: note: imported from module root
    _ = @import("common.zig");
                ^~~~~~~~~~~~
foo.zig:2:28: note: imported from module root.foo
pub const common = @import("common.zig");
                           ^~~~~~~~~~~~
</samp></pre></figure>
    <p>
    The correct way to resolve this error is usually to factor the shared file out into its own
    module, which other modules can then import. This can be done in the <a href="#Build-System">Build System</a> using
    <code><span>std.Build.addModule</span></code>.
    </p>
    

    <h3 id="Single-Item-Array-Pointers-Gain-ptr-Field"><a href="#toc-Single-Item-Array-Pointers-Gain-ptr-Field">Single-Item Array Pointers Gain .ptr Field</a> <a href="#Single-Item-Array-Pointers-Gain-ptr-Field">§</a></h3>

    <p>
    In general, it is intended to single-item array pointers to act equivalently to a slice. That
    is, <code><span>*<span>const</span> [<span>5</span>]<span>u8</span></span></code> is essentially equivalent to
    <code><span>[]<span>const</span> <span>u8</span></span></code> but with a comptime-known length.
    </p>
    <p>
    Previously, the <code><span>ptr</span></code> field on slices was an exception to this rule, as it
    did not exist on single-item array pointers. This field
    <a href="https://github.com/ziglang/zig/issues/4765">has been added</a>, and is equivalent to
    simple coercion from <code><span>*[N]T</span></code> to <code><span>[*]T</span></code>.
    </p>
    <figure><figcaption><cite>array_pointer_ptr_field.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"array pointer has ptr field"</span> {</span>
<span>    <span>const</span> x: *<span>const</span> [<span>4</span>] <span>u32</span> = &amp;.{ <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span> };</span>
<span>    <span>const</span> y: []<span>const</span> <span>u32</span> = &amp;.{ <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span> };</span>
<span></span>
<span>    <span>const</span> xp: [*]<span>const</span> <span>u32</span> = x.ptr;</span>
<span>    <span>const</span> yp: [*]<span>const</span> <span>u32</span> = y.ptr;</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqual(xp, <span>@as</span>([*]<span>const</span> <span>u32</span>, x));</span>
<span></span>
<span>    <span>for</span> (<span>0</span>..<span>4</span>) |i| {</span>
<span>        <span>try</span> std.testing.expectEqual(x[i], xp[i]);</span>
<span>        <span>try</span> std.testing.expectEqual(y[i], yp[i]);</span>
<span>    }</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test array_pointer_ptr_field.zig</kbd>
1/1 test.array pointer has ptr field... OK
All 1 tests passed.
</samp></pre></figure>
    

    <h3 id="Allow-Method-Call-Syntax-on-Optional-Pointers"><a href="#toc-Allow-Method-Call-Syntax-on-Optional-Pointers">Allow Method Call Syntax on Optional Pointers</a> <a href="#Allow-Method-Call-Syntax-on-Optional-Pointers">§</a></h3>

    <p>
    Method call syntax <code><span>object.method(args)</span></code> only works when the first
    parameter of <code><span>method</span></code> has a specific type: previously, this was either the
    type containing the method, or a pointer to it. It is now additionally allowed for this type to
    be an optional pointer. The value the method call is performed on must still be a non-optional
    pointer, but it is coerced to an optional pointer for the method call.
    </p>
    <figure><figcaption><cite>method_syntax_opt_ptr.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>const</span> Foo = <span>struct</span> {</span>
<span>    x: <span>u32</span>,</span>
<span></span>
<span>    <span>fn</span> <span>xOrDefault</span>(self: ?*<span>const</span> Foo) <span>u32</span> {</span>
<span>        <span>const</span> foo = self <span>orelse</span> <span>return</span> <span>0</span>;</span>
<span>        <span>return</span> foo.x;</span>
<span>    }</span>
<span>};</span>
<span></span>
<span><span>test</span> <span>"method call with optional pointer parameter"</span> {</span>
<span>    <span>const</span> a: Foo = .{ .x = <span>7</span> };</span>
<span>    <span>const</span> b: Foo = .{ .x = <span>9</span> };</span>
<span></span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>0</span>), Foo.xOrDefault(<span>null</span>));</span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>7</span>), a.xOrDefault());</span>
<span>    <span>try</span> std.testing.expectEqual(<span>@as</span>(<span>u32</span>, <span>9</span>), b.xOrDefault());</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test method_syntax_opt_ptr.zig</kbd>
1/1 test.method call with optional pointer parameter... OK
All 1 tests passed.
</samp></pre></figure>
    

    <h3 id="comptime-Function-Calls-No-Longer-Cause-Runtime-Analysis"><a href="#toc-comptime-Function-Calls-No-Longer-Cause-Runtime-Analysis">comptime Function Calls No Longer Cause Runtime Analysis</a> <a href="#comptime-Function-Calls-No-Longer-Cause-Runtime-Analysis">§</a></h3>

    <p>
    There has been an <a href="https://github.com/ziglang/zig/issues/6256">open issue</a> for several
    years about the fact that Zig will emit all referenced functions to a binary, even if the function
    is only used at compile-time. This can cause
    <a href="https://github.com/ziglang/zig/issues/15353">binary bloat</a>, as well as potentially triggering
    false positive compile errors if a function is intended to only be used at compile-time.
    </p>
    <p>
    This issue <a href="https://github.com/ziglang/zig/pull/15891">has been resolved</a> in this release
    cycle. Zig will now only emit a runtime version of a function to the binary if one of the following
    conditions holds:
    </p>
    <ul>
      <li>The function is called at runtime.</li>
      <li>The function has a reference taken to it. In this case, a call may occur through a function pointer, so the function must be emitted.</li>
    </ul>
    <p>
    As well as avoiding potential false positive compile errors, this change leads to a slight
    decrease in binary sizes, and may slightly speed up compilation in some cases. Note that as a
    consequence of this change, it is no longer sufficient to write
    <code><span><span>comptime</span> { _ = f; }</span></code> to force a function to be analyzed and emitted to the
    binary. Instead, you must write <code><span><span>comptime</span> { _ = &amp;f; }</span></code>.
    </p>
    

    <h3 id="Multi-Item-Switch-Prong-Type-Coercion"><a href="#toc-Multi-Item-Switch-Prong-Type-Coercion">Multi-Item Switch Prong Type Coercion</a> <a href="#Multi-Item-Switch-Prong-Type-Coercion">§</a></h3>

    <p>
    Prior to 0.11.0, when a <code><span><span>switch</span></span></code> prong captured a union payload, all
    payloads were required to have the exact same type. This has been changed so that
    <a href="https://ziglang.org/documentation/0.11.0/#Peer-Type-Resolution">Peer Type Resolution</a> is used to
    combine the payload types, allowing distinct but compatible types to be captured together.
    </p>
    <p>
    Pointer captures also make use of peer type resolution, but are more limited: the payload types
    must all have the same in-memory representation so that the payload pointer can be safely cast.
    </p>
    <figure><figcaption><cite>switch_capture_ptr.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> assert = std.debug.assert;</span>
<span><span>const</span> expectEqual = std.testing.expectEqual;</span>
<span></span>
<span><span>const</span> U1 = <span>union</span>(<span>enum</span>) {</span>
<span>    x: <span>u8</span>,</span>
<span>    y: ?<span>u32</span>,</span>
<span>};</span>
<span><span>test</span> <span>"switch capture resolves peer types"</span> {</span>
<span>    <span>try</span> f(<span>1</span>, .{ .x = <span>1</span> });</span>
<span>    <span>try</span> f(<span>2</span>, .{ .y = <span>2</span> });</span>
<span>    <span>try</span> f(<span>0</span>, .{ .y = <span>null</span> });</span>
<span>}</span>
<span><span>fn</span> <span>f</span>(expected: <span>u32</span>, u: U1) !<span>void</span> {</span>
<span>    <span>switch</span> (u) {</span>
<span>        .x, .y =&gt; |val| {</span>
<span>            <span>comptime</span> assert(<span>@TypeOf</span>(val) == ?<span>u32</span>);</span>
<span>            <span>try</span> expectEqual(expected, val <span>orelse</span> <span>0</span>);</span>
<span>        },</span>
<span>    }</span>
<span>}</span>
<span></span>
<span><span>const</span> U2 = <span>union</span>(<span>enum</span>) {</span>
<span>    x: <span>c_uint</span>,</span>
<span>    <span>/// This type has the same number of bits as `c_uint`, but is distinct.</span></span>
<span>    y: <span>@Type</span>(.{ .Int = .{</span>
<span>        .signedness = .unsigned,</span>
<span>        .bits = <span>@bitSizeOf</span>(<span>c_uint</span>),</span>
<span>    } }),</span>
<span>};</span>
<span><span>test</span> <span>"switch pointer capture resolves peer types"</span> {</span>
<span>    <span>var</span> a: U2 = .{ .x = <span>10</span> };</span>
<span>    <span>var</span> b: U2 = .{ .y = <span>20</span> };</span>
<span>    g(&amp;a);</span>
<span>    g(&amp;b);</span>
<span>    <span>try</span> expectEqual(U2{ .x = <span>11</span> }, a);</span>
<span>    <span>try</span> expectEqual(U2{ .y = <span>21</span> }, b);</span>
<span>}</span>
<span><span>fn</span> <span>g</span>(u: *U2) <span>void</span> {</span>
<span>    <span>switch</span> (u.*) {</span>
<span>        .x, .y =&gt; |*ptr| {</span>
<span>            ptr.* += <span>1</span>;</span>
<span>        },</span>
<span>    }</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test switch_capture_ptr.zig</kbd>
1/2 test.switch capture resolves peer types... OK
2/2 test.switch pointer capture resolves peer types... OK
All 2 tests passed.
</samp></pre></figure>
    

    <h3 id="Allow-Functions-to-Return-null-and-undefined"><a href="#toc-Allow-Functions-to-Return-null-and-undefined">Allow Functions to Return null and undefined</a> <a href="#Allow-Functions-to-Return-null-and-undefined">§</a></h3>

    <p>
    0.10 had some arbitrary restrictions on the types of function parameters and their return types:
    they were not permitted to be <code><span><span>@TypeOf</span>(<span>null</span>)</span></code> or
    <code><span><span>@TypeOf</span>(<span>undefined</span>)</span></code>. While these are types are rarely useful in this
    context, they are still completely normal comptime-only types, so this restriction on their
    usage was needless. As such, they are now allowed as parameter and return types.
    </p>
    <figure><figcaption><cite>null_undef_param_ret_ty.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>fn</span> <span>foo</span>(<span>comptime</span> x: <span>@TypeOf</span>(<span>undefined</span>)) <span>@TypeOf</span>(<span>null</span>) {</span>
<span>    _ = x;</span>
<span>    <span>return</span> <span>null</span>;</span>
<span>}</span>
<span></span>
<span><span>test</span> <span>"null and undefined as function parameter and return types"</span> {</span>
<span>    <span>const</span> my_null = foo(<span>undefined</span>);</span>
<span>    <span>try</span> std.testing.expect(my_null == <span>null</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test null_undef_param_ret_ty.zig</kbd>
1/1 test.null and undefined as function parameter and return types... OK
All 1 tests passed.
</samp></pre></figure>
    

    <h3 id="Generic-Function-Calls"><a href="#toc-Generic-Function-Calls">Generic Function Calls</a> <a href="#Generic-Function-Calls">§</a></h3>

    <p>Sometimes the language design drives the <a href="#Compiler">Compiler</a> development, but
    sometimes it's the other way around, as we discover through trial and error
    what <em>fundamental simplicity</em> looks like.</p>
    <p>In this case, generic functions and inferred error sets have been reworked for
    a few reasons:</p>
    <ul>
      <li>To make the language simpler to specify.</li>
      <li>To make the compiler implementation simpler.</li>
      <li>Progress towards <a href="#Incremental-Compilation">Incremental Compilation</a>.</li>
    </ul>
    <p>Things are mostly the same, except there may be two kinds of breakages caused by it.
    Firstly, type declarations are evaluated for every generic function call:</p>
    <figure><figcaption><cite>generic_call_demo.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> expect = std.testing.expect;</span>
<span></span>
<span><span>test</span> <span>"generic call demo"</span> {</span>
<span>    <span>const</span> a = foo(<span>i32</span>, <span>1234</span>);</span>
<span>    <span>const</span> b = foo(<span>i32</span>, <span>5678</span>);</span>
<span>    <span>try</span> expect(<span>@TypeOf</span>(a) == <span>@TypeOf</span>(b));</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>foo</span>(<span>comptime</span> T: <span>type</span>, init: T) <span>struct</span> { x: T } {</span>
<span>    <span>return</span> .{ .x = init };</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test generic_call_demo.zig</kbd>
1/1 test.generic call demo... FAIL (TestUnexpectedResult)
<span>/home/andy/Downloads/zig/lib/std/testing.zig:515:14</span>: <span>0x22423f in expect (test)</span>
    if (!ok) return error.TestUnexpectedResult;
             <span>^</span>
<span>/home/andy/tmp/docgen_tmp/generic_call_demo.zig:7:5</span>: <span>0x224375 in test.generic call demo (test)</span>
    try expect(@TypeOf(a) == @TypeOf(b));
    <span>^</span>
0 passed; 0 skipped; 1 failed.
error: the following test command failed with exit code 1:
/home/andy/.cache/zig/o/1badee6b5c51bdd719adb838ec138cd4/test
</samp></pre></figure>
    <p>With Zig 0.10.x, this test passed. With 0.11.0, it fails. Which behavior Zig will have
    at 1.0 is yet to be determined. In the meantime, it is best not to rely on type equality
    in this case.</p>
    <p>Suggested workaround is to make a function that returns the type:</p>
    <figure><figcaption><cite>generic_call_workaround.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span><span>const</span> expect = std.testing.expect;</span>
<span></span>
<span><span>test</span> <span>"generic call demo"</span> {</span>
<span>    <span>const</span> a = foo(<span>i32</span>, <span>1234</span>);</span>
<span>    <span>const</span> b = foo(<span>i32</span>, <span>5678</span>);</span>
<span>    <span>try</span> expect(<span>@TypeOf</span>(a) == <span>@TypeOf</span>(b));</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>foo</span>(<span>comptime</span> T: <span>type</span>, init: T) Make(T) {</span>
<span>    <span>return</span> .{ .x = init };</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>Make</span>(<span>comptime</span> T: <span>type</span>) <span>type</span> {</span>
<span>    <span>return</span> <span>struct</span> { x: T };</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test generic_call_workaround.zig</kbd>
1/1 test.generic call demo... OK
All 1 tests passed.
</samp></pre></figure>
    <p>The second fallout from this change is mutually recursive functions with inferred
    error sets:</p>
    <figure><figcaption><cite>inferred_mutual_recursion.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"generic call demo"</span> {</span>
<span>    <span>try</span> foo(<span>49</span>);</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>foo</span>(x: <span>i32</span>) !<span>void</span> {</span>
<span>    <span>if</span> (x == <span>1000</span>) <span>return</span> <span>error</span>.BadNumber;</span>
<span>    <span>return</span> bar(x - <span>1</span>);</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>bar</span>(x: <span>i32</span>) !<span>void</span> {</span>
<span>    <span>if</span> (x &gt; <span>100000</span>) <span>return</span> <span>error</span>.TooBig;</span>
<span>    <span>if</span> (x == <span>0</span>) <span>return</span>;</span>
<span>    <span>return</span> foo(x - <span>1</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test inferred_mutual_recursion.zig</kbd>
<span>docgen_tmp/inferred_mutual_recursion.zig:12:1: </span><span>error: </span><span>unable to resolve inferred error set
</span>fn bar(x: i32) !void {
<span>^~~~~~~~~~~~~~~~~~~~
</span><span>referenced by:
    foo: docgen_tmp/inferred_mutual_recursion.zig:9:12
    bar: docgen_tmp/inferred_mutual_recursion.zig:15:12
    remaining reference traces hidden; use '-freference-trace' to see all reference traces
</span>
</samp></pre></figure>
    <p>Suggested workaround is to introduce an explicit error set:</p>
    <figure><figcaption><cite>error_set_workaround.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>test</span> <span>"mutual recursion inferred error set demo"</span> {</span>
<span>    <span>try</span> foo(<span>49</span>);</span>
<span>}</span>
<span></span>
<span><span>const</span> Error = <span>error</span>{ BadNumber, TooBig };</span>
<span></span>
<span><span>fn</span> <span>foo</span>(x: <span>i32</span>) Error!<span>void</span> {</span>
<span>    <span>if</span> (x == <span>1000</span>) <span>return</span> <span>error</span>.BadNumber;</span>
<span>    <span>return</span> bar(x - <span>1</span>);</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>bar</span>(x: <span>i32</span>) Error!<span>void</span> {</span>
<span>    <span>if</span> (x &gt; <span>100000</span>) <span>return</span> <span>error</span>.TooBig;</span>
<span>    <span>if</span> (x == <span>0</span>) <span>return</span>;</span>
<span>    <span>return</span> foo(x - <span>1</span>);</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig test error_set_workaround.zig</kbd>
1/1 test.mutual recursion inferred error set demo... OK
All 1 tests passed.
</samp></pre></figure>
    <p>More information: #16318</p>
    

    <h3 id="Naked-Functions"><a href="#toc-Naked-Functions">Naked Functions</a> <a href="#Naked-Functions">§</a></h3>

<p>Some things that used to be allowed in <code><span><span>callconv</span>(.Naked)</span></code> functions are now compile errors:</p>
<ul>
<li>runtime calls</li>
<li>explicit returns</li>
<li>runtime safety checks (which produce runtime calls)</li>
</ul>
<p>Runtime calls are disallowed because it is not possible to know the current stack alignment in order to follow the proper ABI
to automatically compile a call.  Explicit returns are disallowed because on some targets, it is not mandated for the return
address to be stored in a consistent place.</p>
<hr>
<p>The most common kind of upgrade that needs to be performed is:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>pub</span> <span>export</span> <span>fn</span> <span>_start</span>() <span>callconv</span>(.Naked) <span>noreturn</span> {</span>
<span>    <span>asm</span> <span>volatile</span> (</span>
<span>        <span>\\ push %rbp</span></span>
<span>        <span>\\ jmp %[start:P]</span></span>
<span>        :</span>
<span>        : [start] <span>"X"</span> (&amp;start),</span>
<span>    );</span>
<span>    <span>unreachable</span>;</span>
<span>}</span>
<span><span>fn</span> <span>start</span>() <span>void</span> {}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig build-exe example.zig</kbd>
<span>example.zig:8:5: </span><span>error: </span><span>runtime safety check not allowed in naked function
</span>    unreachable;
    <span>^~~~~~~~~~~
</span><span>example.zig:8:5: </span><span>note: </span><span>use @setRuntimeSafety to disable runtime safety
</span><span>example.zig:8:5: </span><span>note: </span><span>the end of a naked function is implicitly unreachable
</span>
</samp></pre></figure>
<p>As the note indicates, an explicit <code><span><span>unreachable</span></span></code> is not needed at the end of a naked function anymore.  Since explicit returns
are no longer allowed, it will just be assumed to be unreachable.  Therefore, all that needs to be done is to delete the
<code><span><span>unreachable</span></span></code> statement, which works even when the return type of the function is not <code><span><span>unreachable</span></span></code>.</p>
<hr>
<p>In general, naked functions should only contain comptime logic and <code><span><span>asm</span> <span>volatile</span></span></code> statements, which allows any required
target-specific runtime calls and returns to be constructed.</p>
    
    
    <h3 id="embedFile-Supports-Module-Mapped-Names"><a href="#toc-embedFile-Supports-Module-Mapped-Names">@embedFile Supports Module-Mapped Names</a> <a href="#embedFile-Supports-Module-Mapped-Names">§</a></h3>

    <p>
    The <code><span><span>@embedFile</span></span></code> builtin, as well as literal file paths, now supports
    module-mapped names, like <code><span><span>@import</span></span></code>.
    </p>
    <figure><figcaption><cite>embed_module.zig</cite></figcaption><pre><code><span><span>// This embeds the contents of the root file of the module 'foo'.</span></span>
<span><span>const</span> data = <span>@embedFile</span>(<span>"foo"</span>);</span></code></pre></figure>
    

    

    <h2 id="Standard-Library"><a href="#toc-Standard-Library">Standard Library</a> <a href="#Standard-Library">§</a></h2>

    <p>The Zig standard library is still unstable and mainly serves as a
    testbed for the language. After there are no more planned <a href="#Language-Changes">Language Changes</a>,
    it will be time to start working on stabilizing the standard library.
    Until then, experimentation and breakage without warning is allowed.</p>
    <ul>
      <li>DynLib.lookup: cast the pointer to the correct alignment (<a href="https://github.com/ziglang/zig/issues/15308">#15308</a>)</li>

    <li>std.process: avoids allocating zero length buffers for args or env on <a href="#WebAssembly">WebAssembly</a></li>
    <li>std.process: remove unused function getSelfExeSharedLibPaths</li>
    <li>std.process.Child: implement maxrss on Darwin</li>
    <li>std.process.Child: remove pid and handle, add id. Previously, this API had pid, to be used on POSIX systems, and handle, to be used on Windows. This change unifies the API, defining an Id type that is either the pid or the HANDLE depending on the target OS.</li>
    <li>Introduce std.process.Child.collectOutput (<a href="https://github.com/ziglang/zig/issues/12295">#12295</a>)</li>


    <li>std.Target: add xtensa to toCoffMachine</li>
    <li>std.Target.ObjectFormat: specify dxcontainer file ext</li>
    <li>std.target: adds ps4 and ps5 type sizes.</li>
    <li>std.Target: fixes to `ptrBitWidth`, `c_type_byte_size`, and `c_type_alignment`.</li>
    <li>std.target.riscv: fix baseline_rv32 missing feature "32bit"</li>
    <li>std.target: mark helper functions inline so that callsites don't need <code><span><span>comptime</span></span></code></li>



    <li>std: remove meta.assumeSentinel (<a href="https://github.com/ziglang/zig/issues/14440">#14440</a>)</li>
    <li>std: add meta.FieldType</li>
    <li>std.meta: remove bitCount</li>
    <li>std: fixed handling of empty structs in meta.FieldEnum.</li>
    <li>std.meta: remove isTag (<a href="https://github.com/ziglang/zig/issues/15584">#15584</a>).</li>
    <li>std.meta: allow ArgsTuple to be used on functions with comptime parameters</li>
    <li>std.meta: remove tagName</li>
    <li>Update std.meta.intToEnum to support non-exhaustive enums, which was preventing `std.json` from deserializing non-exhaustive enums (<a href="https://github.com/ziglang/zig/issues/15491">#15491</a>).</li>




    <li>std: stop using LinearFifo in BufferedReader (<a href="https://github.com/ziglang/zig/issues/14029">#14029</a>)</li>
    <li>std.io.reader.Reader: add `streamUntilDelimiter`</li>
    <li>std.io.Writer: add support for non-power-of-two int sizes</li>
    <li>Fix type mismatch for Reader.readIntoBoundedBytes (<a href="https://github.com/ziglang/zig/issues/16416">#16416</a>)</li>
    <li>std.io.multi-writer: support non-comptime streams (<a href="https://github.com/ziglang/zig/issues/15770">#15770</a>).</li>


    <li>Add 0-length buffer checks to os.read and os.write, preventing errors related to undefined pointers being passed through to some OS APIs when slices have 0 length.</li>
    <li>std.os: fix alignment of Sigaction.handler_fn (<a href="https://github.com/ziglang/zig/issues/13418">#13418</a>)</li>
    <li>std.os.sigprocmask: @bitCast flags parameter</li>
    <li>`os.isCygwinPty`: Fix a bug, replace kernel32 call, and optimize (<a href="https://github.com/ziglang/zig/issues/14841">#14841</a>)</li>
    <li>std.os: add mincore syscall which is available on some UNIX like operating systems and allows a user to determine if a page is resident in memory.</li>
    <li>std.os: add missing mmap errors</li>


    <li>start code: Don't initialize the static TLS area in single-threaded builds</li>
    <li>Make std.tz namespace accessible (<a href="https://github.com/ziglang/zig/issues/13978">#13978</a>)</li>
    <li>std: add object format extension for dxcontainer</li>
    <li>std: Add Wasm SIMD opcodes and value type (<a href="https://github.com/ziglang/zig/issues/13910">#13910</a>)</li>
    <li>std: fix bug in Pcg32 fill function (<a href="https://github.com/ziglang/zig/issues/13894">#13894</a>)</li>
    <li>std.ascii: remove Look-Up-Table (<a href="https://github.com/ziglang/zig/issues/13370">#13370</a>).</li>
    <li>Improve and remove duplicate doNotOptimizeAway() implementations (<a href="https://github.com/ziglang/zig/issues/13790">#13790</a>)</li>
    <li>std.Random: add functions with explicit index type (<a href="https://github.com/ziglang/zig/issues/13417">#13417</a>).</li>
    <li>add std.c.pthread_sigmask (<a href="https://github.com/ziglang/zig/issues/13525">#13525</a>)</li>
    <li>std.time: add microTimestamp() (<a href="https://github.com/ziglang/zig/issues/13327">#13327</a>)</li>
    <li>std: Make getenv return 0-terminated slice</li>
    <li>publicize std.rand.ziggurat</li>
    <li>std: Snake-case some public facing enums (<a href="https://github.com/ziglang/zig/issues/15803">#15803</a>).</li>
    <li>std: Move TTY from std.debug to std.io and add missing colors (<a href="https://github.com/ziglang/zig/issues/15806">#15806</a>).</li>
    <li>std.enums: make Ext parameter optional</li>
    <li>std.enums: add tagName(), an alternative to `@tagName()` for non-exhaustive enums that doesn't panic when given an enum value that has no tag.</li>
    <li>elf: add more missing defs for SHT_* and SHF_*</li>
    <li>elf: add helpers for extracting type and bind from symbol def</li>
    <li>std.simd: add wasm-simd support for suggestVectorSizeForCpu (<a href="https://github.com/ziglang/zig/issues/14992">#14992</a>)</li>
    <li>std.base64: don't overflow dest with padding</li>
    <li>Fix counting in SingleThreadedRwLock's tryLockShared (<a href="https://github.com/ziglang/zig/issues/16560">#16560</a>)</li>
    <li>introduce std.io.poll (<a href="https://github.com/ziglang/zig/issues/14744">#14744</a>)</li>
    <li>std.c: Add umask.</li>
    </ul>

    <h3 id="Compile-Time-Configuration-Consolidated"><a href="#toc-Compile-Time-Configuration-Consolidated">Compile-Time Configuration Consolidated</a> <a href="#Compile-Time-Configuration-Consolidated">§</a></h3>

    <p><a href="https://github.com/ziglang/zig/pull/14181">collect all options under one namespace</a></p>
    

    <h3 id="Memory-Allocation"><a href="#toc-Memory-Allocation">Memory Allocation</a> <a href="#Memory-Allocation">§</a></h3>

    <ul>
    <li>Add std.ArenaAllocator.reset() (<a href="https://github.com/ziglang/zig/issues/12590">#12590</a>)</li>
    <li>Adds std.heap.MemoryPool (<a href="https://github.com/ziglang/zig/issues/12586">#12586</a>)</li>
    <li>std.heap.raw_c_allocator: fix illegal alignment cast (<a href="https://github.com/ziglang/zig/issues/14090">#14090</a>).</li>
    <li>std.mem.ValidationAllocator: forward free() calls (<a href="https://github.com/ziglang/zig/issues/15978">#15978</a>)</li>
    <li>arena_allocator/reset: fix use after free, fix buffer overrun (<a href="https://github.com/ziglang/zig/issues/15985">#15985</a>).</li>
    <li>std.mem.Allocator: add error when passing a non-single-item pointer to allocator.destroy</li>
    <li>std: GPA deinit return an enum instead of a bool</li>
    <li>GPA: Catch invalid frees (<a href="https://github.com/ziglang/zig/issues/14791">#14791</a>).</li>
    <li>Optimize Allocator functions to create less duplicate code for similar types (<a href="https://github.com/ziglang/zig/issues/16332">#16332</a>).</li>
    </ul>

    <h4 id="Allow-Shrink-To-Fail"><a href="#toc-Allow-Shrink-To-Fail">Allow Shrink To Fail</a> <a href="#Allow-Shrink-To-Fail">§</a></h4>

    <p>The Allocator interface now allows implementations to refuse to shrink (<a href="https://github.com/ziglang/zig/issues/13666">#13666</a>).
    This makes ArrayList more efficient because it avoids copying allocated but
    unused bytes by attempting a resize in place, and falling back to
    allocating a new buffer and doing its own copy. With a realloc() call, the
    allocator implementation would pointlessly copy the extra capacity:</p>
    <figure><figcaption><cite>array_list.zig</cite></figcaption><pre><code><span><span>const</span> old_memory = self.allocatedSlice();</span>
<span><span>if</span> (allocator.resize(old_memory, new_capacity)) {</span>
<span>    self.capacity = new_capacity;</span>
<span>} <span>else</span> {</span>
<span>    <span>const</span> new_memory = <span>try</span> allocator.alignedAlloc(T, alignment, new_capacity);</span>
<span>    <span>@memcpy</span>(new_memory[<span>0</span>..self.items.len], self.items);</span>
<span>    allocator.free(old_memory);</span>
<span>    self.items.ptr = new_memory.ptr;</span>
<span>    self.capacity = new_memory.len;</span>
<span>}</span></code></pre></figure>
    <p>It also enabled implementing <a href="#WasmAllocator">WasmAllocator</a> which was not possible
    with the previous interface requirements.</p>
    
    

    <h3 id="Strings"><a href="#toc-Strings">Strings</a> <a href="#Strings">§</a></h3>

    <ul>
    <li>Removed std.cstr (<a href="https://github.com/ziglang/zig/issues/16032">#16032</a>) </li>
    <li>std: Handle field struct defaults in std.mem.zeroInit (<a href="https://github.com/ziglang/zig/issues/14116">#14116</a>).</li>
    <li>add std.mem.reverseIterator</li>
    <li>std: added std.mem.window</li>
    <li>Handle sentinel slices in `std.mem.zeroes` (<a href="https://github.com/ziglang/zig/issues/13256">#13256</a>)</li>
    <li>std: add mem.SplitIterator.peek() (<a href="https://github.com/ziglang/zig/issues/15670">#15670</a>)</li>
    <li>std.mem.zeroes now works with allowzero pointers</li>
    <li>mem: rename alignForwardGeneric to mem.alignForward</li>
    <li>privatize std.mem.writePackedIntBig and writePackedIntLittle. These are unnecessary since writePackedInt accepts an endian parameter.</li>
    <li>Split `std.mem.split` and `tokenize` into `sequence`, `any`, and `scalar` versions (<a href="https://github.com/ziglang/zig/issues/15579">#15579</a>).</li>
    <li>std.mem.byteSwapAllFields: add suppport for nested structs (<a href="https://github.com/ziglang/zig/issues/15696">#15696</a>)</li>
    <li>std.mem.zeroInit: zero hidden padding for extern struct</li>
    <li>Add std.mem.indexOfNone</li>
    <li>std.mem.reverseIterator improvements (<a href="https://github.com/ziglang/zig/issues/15134">#15134</a>)</li>
    </ul>

    <h4 id="Restrict-memspan-and-memlen-to-Sentinel-Terminated-Pointers"><a href="#toc-Restrict-memspan-and-memlen-to-Sentinel-Terminated-Pointers">Restrict mem.span and mem.len to Sentinel-Terminated Pointers</a> <a href="#Restrict-memspan-and-memlen-to-Sentinel-Terminated-Pointers">§</a></h4>

    <p><a href="https://isaacfreund.com/">Isaac Freund</a> writes:</p>
    <p>These functions were footgunny when working with pointers to
    arrays and slices. They just returned the stated length of the array/slice
    without iterating and looking for the first sentinel, even if the
    array/slice is a sentinel-terminated type.</p>
    <p>
    From looking at the quite small list of places in the
    <a href="#Standard-Library">Standard Library</a> and <a href="#Compiler">Compiler</a> that this change breaks
    existing code, the new code looks to be more readable in all cases.
    </p><p>
    The usage of std.mem.span/len was totally unneeded in most of the cases
    affected by this breaking change.
    </p><p>
    We could remove these functions entirely in favor of other existing
    functions in std.mem such as std.mem.sliceTo(), but that would be a
    somewhat nasty breaking change as std.mem.span() is very widely used for
    converting sentinel terminated pointers to slices. It is however not at
    all widely used for anything else.
    </p><p>
    Therefore I think it is better to break these few non-standard and
    potentially incorrect usages of these functions now and at some later
    time, if deemed worthwhile, finally remove these functions.
    </p><p>
    If we wait for at least a full release cycle so that everyone adapts to
    this change first, updating for the removal could be a simple find and
    replace without needing to worry about the semantics.
    </p>
    
    

    <h3 id="Math"><a href="#toc-Math">Math</a> <a href="#Math">§</a></h3>

    <ul>
      <li>Remove math.ln in favor of <code><span><span>@log</span></span></code></li>
      <li>Implements math.sign for float vectors.</li>
      <li>math.big.int: implement popCount() for Const</li>
      <li>big.int.Mutable: fix set(@as(DoubleLimb, 0)). Previously, this would set len to 1 but fail to initialize any limbs.</li>
      <li>math: implement absInt for integer vectors. This commit adds support to absInt for integer vectors.</li>
      <li>math: port `int_log10` from Rust (<a href="https://github.com/ziglang/zig/issues/14827">#14827</a>)</li>
      <li>math: add lerp (<a href="https://github.com/ziglang/zig/issues/13002">#13002</a>)</li>
      <li>math.big.int: Initialize limbs in addWrap, preventing invalid results (<a href="https://github.com/ziglang/zig/issues/13571">#13571</a>)</li>
      <li>Normalize remainder in math.big.int.Managed.divTrunc (<a href="https://github.com/ziglang/zig/issues/15535">#15535</a>).</li>
      <li>math.atan: fix mistyped magic constant</li>
      <li>math.big.int: Add Sqrt (with reference to Modern Computer Arithmetic, Algorithm 1.13)</li>
      <li>math.big.int: rename "eq" to "eql" for consistency (<a href="https://github.com/ziglang/zig/issues/16303">#16303</a>).</li>
      <li>Change math.Order integer tag values, speeding up binary search (<a href="https://github.com/ziglang/zig/issues/16356">#16356</a>).</li>
    </ul>

    

    <h3 id="File-System"><a href="#toc-File-System">File System</a> <a href="#File-System">§</a></h3>

    <ul>
      <li>std.fs.path: add stem() (<a href="https://github.com/ziglang/zig/issues/13276">#13276</a>)</li>
      <li>os.windows.OpenFile: Add `USER_MAPPED_FILE` as a possible error</li>
      <li>Dir.openDirAccessMaskW: Add ACCESS_DENIED as a possible error</li>
      <li>Dir.statFile now uses fstatat (fewer syscalls) (<a href="https://github.com/ziglang/zig/issues/11594">#11594</a>)</li>
      <li>std: add fchmodat as well as `std.fs.has_executable_bit` for doing conditional compilation.</li>
      <li>windows: use NtSetInformationFile in DeleteFile (<a href="https://github.com/ziglang/zig/issues/15316">#15316</a>).</li>
      <li>fs.Dir.deleteTree: Fix DirNotEmpty condition</li>
      <li>fs.path: Fix Windows path component comparison being ASCII-only (<a href="https://github.com/ziglang/zig/issues/16100">#16100</a>)</li>
      <li>std.windows: use posix semantics to delete files, if available (<a href="https://github.com/ziglang/zig/issues/15501">#15501</a>)</li>
      <li>fixed windows resource leaks (<a href="https://github.com/ziglang/zig/issues/15450">#15450</a>).</li>
      <li>A few `IterableDir.Walker`/`Iterator` fixes (<a href="https://github.com/ziglang/zig/issues/15980">#15980</a>)</li>
      <li>Add fs.path.ComponentIterator and use it in Dir.makePath, fixing some bugs</li>
      <li>os.renameatW: Handle OBJECT_NAME_COLLISION from NtSetInformationFile (<a href="https://github.com/ziglang/zig/issues/16374">#16374</a>)</li>
    </ul>
    

    <h3 id="Data-Structures"><a href="#toc-Data-Structures">Data Structures</a> <a href="#Data-Structures">§</a></h3>

    <ul>
      <li>std: added pure functions to StaticBitSet and EnumSet</li>
      <li>The following functions were added to both IntegerBitSet and ArrayBitSet:<ul>
        <li><code><span><span>fn</span> <span>eql</span>(self: Self, other: Self) <span>bool</span></span></code></li>
        <li><code><span><span>fn</span> <span>subsetOf</span>(self: Self, other: Self) <span>bool</span></span></code></li>
        <li><code><span><span>fn</span> <span>supersetOf</span>(self: Self, other: Self) <span>bool</span></span></code></li>
        <li><code><span><span>fn</span> <span>complement</span>(self: Self) Self</span></code></li>
        <li><code><span><span>fn</span> <span>unionWith</span>(self: Self, other: Self) Self</span></code></li>
        <li><code><span><span>fn</span> <span>intersectWith</span>(self: Self, other: Self) Self</span></code></li>
        <li><code><span><span>fn</span> <span>xorWith</span>(self: Self, other: Self) Self</span></code></li>
        <li><code><span><span>fn</span> <span>differenceWith</span>(self: Self, other: Self) Self</span></code></li>
      </ul></li>
    <li>std.MultiArrayList: add support for tagged unions.</li>
    <li>Add more <a href="#Sorting">Sorting</a> functions to MultiArrayList (<a href="https://github.com/ziglang/zig/issues/16377">#16377</a>)</li>
    <li>std.ArrayHashMap: capacity function now accepts const instance</li>
    <li>std.atomic.Queue: fix unget implementation and add docs</li>
    <li>Add fromOwnedSliceSentinel to ArrayList ArrayList and ArrayListUnmanaged, add fromOwnedSlice to ArrayListUnmanaged</li>
    <li>Add the two functions 'getLast' and 'getLastOrNull' to ArrayListAligned/ArrayListAlignedUnmanaged.</li>
    <li>std: Expose Int parameter in std.PackedInt[Array,Slice]</li>
    <li>ArrayList.toOwnedSlice: Fix potential for leaks when using errdefer (<a href="https://github.com/ziglang/zig/issues/13946">#13946</a>)</li>
    <li>Allow const ArrayLists to be cloned</li>
    <li>Smaller memory footprint for BoundedArray (<a href="https://github.com/ziglang/zig/issues/16299">#16299</a>)</li>
    <li>[priority_dequeue] Fix out-of-bounds access</li>
    <li>[priority_deque] simplify and optimize isMinLayer (<a href="https://github.com/ziglang/zig/issues/16124">#16124</a>).</li>
    <li>std: Fix update() method in PriorityQueue and PriorityDequeue (<a href="https://github.com/ziglang/zig/issues/13908">#13908</a>)</li>
    <li>[priority_queue] Simplify sifting and fix edge case</li>
    <li>std.IndexedSet.iterator: allow iteration on const EnumSet</li>
    <li>std: implement subsetOf and supersetOf for EnumMultiset</li>
    <li>std: implement subsetOf and supersetOf for DynamicBitSet</li>
    <li>std: add EnumMultiSet</li>
    <li>std: Add ArrayList.insertAssumeCapacity()</li>
    <li>ArrayList: Allow const for getLast (<a href="https://github.com/ziglang/zig/issues/14522">#14522</a>)</li>
    <li>std.enums.IndexedSet: Add initOne and initMany</li>
    <li>std: added eql to DynamicBitSet and DynamicBitSetUnmanaged</li>
    </ul>

    

    <h3 id="Sorting"><a href="#toc-Sorting">Sorting</a> <a href="#Sorting">§</a></h3>

    <p>Sorting is now split into two categorize: stable and unstable.
    Generally, it's best to use unstable if you can, but stable is a more conservative
    choice. Zig's stable sort remains a blocksort implementation, while unstable sort
    is a new pdqsort implementation. heapsort is also available in the standard
    library (<a href="https://github.com/ziglang/zig/issues/15412">#15412</a>).</p>
    <p>Now, debug builds have assertions to ensure that the comparator function
    (<code>lessThan</code>) does not return conflicting results (<a href="https://github.com/ziglang/zig/issues/16183">#16183</a>).</p>
    <p>std.sort.binarySearch: relax requirements to support both homogeneous and heterogeneous keys ( #12727).</p>
    

    <h3 id="Compression"><a href="#toc-Compression">Compression</a> <a href="#Compression">§</a></h3>

    <ul>
      <li>Added xz decoder (<a href="https://github.com/ziglang/zig/issues/14434">#14434</a>)</li>
      <li>Implement gzip header CRC check.</li>
      <li>std.compress: Improve tests, remove reliance on openDirAbsolute (<a href="https://github.com/ziglang/zig/issues/13952">#13952</a>)</li>
      <li>std.tar: make sub dirs + trim spaces (<a href="https://github.com/ziglang/zig/issues/15222">#15222</a>)</li>
      <li>gzip: add missing header fields and bounds for header parsing (<a href="https://github.com/ziglang/zig/issues/13142">#13142</a>)</li>
      <li>Added Zstandard decompressor (<a href="https://github.com/ziglang/zig/issues/14183">#14183</a>)</li>
      <li>Added zlib stream writer (<a href="https://github.com/ziglang/zig/issues/15010">#15010</a>).</li>
      <li>Added LZMA decoder (<a href="https://github.com/ziglang/zig/issues/14518">#14518</a>)</li>
    </ul>
    

    <h3 id="Crypto"><a href="#toc-Crypto">Crypto</a> <a href="#Crypto">§</a></h3>

    <p><a href="https://www.prettysimpleimages.com/">Frank Denis</a> writes:</p>

    <h4 id="New-Features"><a href="#toc-New-Features">New Features</a> <a href="#New-Features">§</a></h4>

<ul>
<li>Salsa20: round-reduced variants can now be used.</li>
<li>The POLYVAL universal hash function was added.</li>
<li>AEGIS: support for 256-bit tags was added.</li>
<li>A MAC API was added to AEGIS (<code>std.crypto.auth.aegis</code>) - AEGIS can be used as a high-performance MAC on systems with hardware AES support. Note that this is not a hash function; a secret key is absolutely required in order to authenticate untrusted messages.</li>
<li>Edwards25519: a <code>rejectLowOrder()</code> function was added to quickly reject low-order points.</li>
<li>HKDF: with <code>extractInit()</code>, a PRK can now be initialized with only a salt, the keying material being added later, possibly as multiple chunks.</li>
<li>Hash functions that returns a fixed-length digest now include a <code>finalResult()</code> function that returns the digest as an array, as well as a <code>peek()</code> function that returns it without changing the state.</li>
<li>AES-CMAC has been implemented, and is availble in <code>crypto.auth.cmac</code>.</li>
<li><code>std.crypto.ecc</code>: the <code>isOdd()</code> function was added to return the parity of a field element.</li>
<li><code>bcrypt</code>: bcrypt has a slightly annoying limitation: passwords are limited to 72 bytes, and additional bytes are silently ignored. A new option, <code>silently_truncate_password</code>, can be set to <code>true</code> to transparently pre-hash the passwords and overcome this limitation.</li>
<li>wyhash: support comptime usage (<a href="https://github.com/ziglang/zig/issues/16070">#16070</a>).</li>
<li>std.hash.crc: implement algorithms listed in CRC RevEng catalog (<a href="https://github.com/ziglang/zig/issues/14396">#14396</a>)</li>
</ul>

<h4 id="Breaking-Changes"><a href="#toc-Breaking-Changes">Breaking Changes</a> <a href="#Breaking-Changes">§</a></h4>

<ul>
<li>A HMAC key size can have any length, and <code>crypto.Hmac*.key_size</code> was previously set to 256 bits for general guidance. This has been changed to match the actual security level of each function.</li>
<li><code>secp256k1</code>: the <code>mulPublic()</code> and <code>verify()</code> functions can now return a <code>NonCanonicalError</code> in addition to existing errors.</li>
<li><code>Ed25519</code>: the top-level <code>Ed25519.sign()</code>, <code>Ed25519.verify()</code>, <code>key_blinding.sign()</code> and <code>key_blinding.unblindPublicKey()</code> functions, that were already deprecated in version 0.10.0, have been removed. For consistency with other signature schemes, these functions have been moved to the <code>KeyPair</code>, <code>PublicKey</code>, <code>BlindKeyPair</code> and <code>BlindPublicKey</code> structures.</li>
</ul>

<h4 id="Keccak"><a href="#toc-Keccak">Keccak</a> <a href="#Keccak">§</a></h4>

<p>The Keccak permutation was only used internally for <code>sha3</code>. It was completely revamped and has now its dedicated public interface in <code>crypto.core.keccak</code>.</p>
<p><code>keccak.KeccakF</code> is the permutation itself, which now supports sizes between 200 and 1600 bits, as well as a configurable number of rounds. And <code>keccak.State</code> offers an API for standard sponge-based constructions.</p>
<p>Taking advantage of this, the SHAKE extendable output function (XOF) has been added, and can be found in <code>std.crypto.hash.sha3.Shake128</code> and <code>std.crypto.hash.sha3.Sha256</code>. SHAKE is based on SHA-3, NIST-approved, and the output of can be of any length, which has many applications and is something we were missing in the standard library.</p>
<p>The more recent TurboSHAKE variant is also available, as <code>crypto.hash.sha3.TurboShake128</code> and <code>crypto.hash.sha3.TurboShake256</code>. TurboSHAKE benefits from the extensive analysis of SHA-3, its output can also be of any length, and it has good performance across all platforms. In fact, on CPUs without SHA-256 acceleration, and when using WebAssembly, TurboSHAKE is the fastest function we have in the standard library. If you need a modern, portable, secure, overall fast hash function / XOF, that is not vulnerable to length-extension attacks (unlike SHA-256), TurboSHAKE should be your go-to choice.</p>

<h4 id="Kyber"><a href="#toc-Kyber">Kyber</a> <a href="#Kyber">§</a></h4>

<p>Kyber is a post-quantum public key encryption and key exchange machanism. It was selected by NIST for the first post-quantum cryptography standard.</p>
<p>It is available in the standard library, in the <code>std.crypto.kem</code> namespace, making Zig the first language with post-quantum cryptography available right in the standard library.</p>
<p><code>Kyber512</code>, <code>Kyber768</code> and <code>Kyber1024</code>, as specified in the current draft, are supported.</p>
<p>The <a href="#TLS-Client">TLS Client</a> also supports the hybrid <code>X25519Kyber768</code> post-quantum key agreement mechanism by default.</p>
<p>Thanks a lot to Bas Westerbaan for contributing this!</p>

<h4 id="Constant-Time-Allocation-Free-Field-Arithmetic"><a href="#toc-Constant-Time-Allocation-Free-Field-Arithmetic">Constant-Time, Allocation-Free Field Arithmetic</a> <a href="#Constant-Time-Allocation-Free-Field-Arithmetic">§</a></h4>

<p>Cryptography frequently requires computations over arbitrary finite fields.</p>
<p>This is why a new namespace made its appearance: <code>std.crypto.ff</code>.</p>
<p>Functions from this namespace never require dynamic allocations, are designed to run in constant time, and transparently perform conversions from/to the Montgomery domain.</p>
<p>This allowed us to implement RSA verification without using any allocators.</p>

<h4 id="Configurable-Side-Channels-Mitigations"><a href="#toc-Configurable-Side-Channels-Mitigations">Configurable Side Channels Mitigations</a> <a href="#Configurable-Side-Channels-Mitigations">§</a></h4>

<p>Side channels in cryptographic code can be exploited to leak secrets.</p>
<p>And mitigations are useful but also come with a performance hit.</p>
<p>For some applications, performance is critical, and side channels may not be part of the threat model. For other applications, hardware-based attacks is a concern, and mitigations should go beyond constant-time code.</p>
<p>Zig 0.11 introduces the <code>std_options.side_channels_mitigations</code> global setting to accomodate the different use cases.</p>
<p>It can have 4 different values:</p>
<ul>
<li><code>none</code>: which doesn't enable additional mitigations. "Additional", because it only disables mitigations that don't have a big performance cost. For example, checking authentication tags will still be done in constant time.</li>
<li><code>basic</code>: which enables mitigations protecting against attacks in a common scenario, where an attacker doesn't have physical access to the device, cannot run arbitrary code on the same thread, and cannot conduct brute-force attacks without being throttled.
</li>
<li><code>medium</code>: which enables additional mitigations, targeting protection against practictal attacks even in a shared environement.
</li>
<li><code>full</code>: which enables all the available mitigations, going beyond ensuring that the code runs in constant time.
</li>
</ul>
<p>The more mitigations are enabled, the bigger the performance hit will be. But this let applications choose what's best for their use case.</p>
<p><code>medium</code> is the default.</p>

<h4 id="Hello-Ascon-Farewell-to-Gimli-and-Xoodoo"><a href="#toc-Hello-Ascon-Farewell-to-Gimli-and-Xoodoo">Hello Ascon; Farewell to Gimli and Xoodoo</a> <a href="#Hello-Ascon-Farewell-to-Gimli-and-Xoodoo">§</a></h4>

<p>Gimli and Xoodoo have been removed from the standard library, in favor of Ascon.</p>
<p>These are great permutations, and there's nothing wrong with them from a practical security perspective.</p>
<p>However, both were competing in the NIST lightweight crypto competition.</p>
<p>Gimli didn't pass the 3rd selection round, and was not used much in the wild besides Zig and libhydrogen. It will never be standardized and is unlikely to get more traction in the future.</p>
<p>The Xoodyak mode, that Xoodoo is the permutation of, brought some really nice ideas. There are discusisons to standardize a Xoodyak-like mode, but without Xoodoo.</p>
<p>So, the Zig implementations of these permutations are better maintained outside the standard library.</p>
<p>For lightweight crypto, Ascon is the one that we know NIST will standardize and that we can safely rely on from a usage perspective.</p>
<p>So, Ascon was added instead (in <code>crypto.core.Ascon</code>). We support the <code>128</code> and <code>128a</code> variants, both with Little-Endian or Big-Endian encoding.</p>
<p>Note that we currently only ship the permutation itself, as the actual constructions are very likely to change a lot during the ongoing standardization process.</p>
<p>The default CSPRNG (<code>std.rand.DefaultCsprng</code>) used to be based on Xoodoo. It was replaced by a traditional ChaCha-based random number generator, that also improves performance on most platforms.</p>
<p>For constrained environments, <code>std.rand.Ascon</code> is also available as an alternative. As the name suggest, it's based on Ascon, and has very low memory requirements.</p>

<h4 id="stdcrypto-Bug-Fixes"><a href="#toc-stdcrypto-Bug-Fixes">std.crypto Bug Fixes</a> <a href="#stdcrypto-Bug-Fixes">§</a></h4>

<ul>
<li>HKDF: expansion to <code>&lt;hash size&gt; * 255</code> bytes not an error any more.</li>
<li>Curve25519: when compiled to WebAssembly, scalar multiplication emitted too many local variables for some runtimes. This has been fixed. The code is also significantly smaller in <code>ReleaseSmall</code> mode.</li>
<li>Prime-order curves: points whose X coordinate was <code>0</code> used to be rejected with an <code>IdentityElement</code> error. These points were also not properly serialized. That has been fixed.</li>
<li>Argon2: outputs larger than 64 bytes are now correctly handled.</li>
<li>std.hash_map: fetchRemove increment available to avoid leaking slots (<a href="https://github.com/ziglang/zig/issues/15989">#15989</a>).</li>
</ul>

<h4 id="Performance-Improvements"><a href="#toc-Performance-Improvements">Performance Improvements</a> <a href="#Performance-Improvements">§</a></h4>

<ul>
<li>GHASH was reimplemented and is now ~3x faster.</li>
<li>AES encryption now takes advantage of the <code>EOR3</code> instruction on Apple Silicon for a slight performance boost.</li>
<li>The ChaCha20 implementation can now take advantage of CPUs with 256 and 512 bit vector registers for a significant speedup.</li>
<li>Poly1305 got a little bit faster, too.</li>
<li>SHA256 can take advantage of hardware acceleration on x86_64 and aarch64.</li>
<li>Reimplement wyhash v4.1 (<a href="https://github.com/ziglang/zig/issues/15969">#15969</a>)</li>
<li>Improvements for xxHash performance, both on small keys as well as large slices (<a href="https://github.com/ziglang/zig/issues/15947">#15947</a>).</li>
</ul>

    

    <h3 id="Concurrency"><a href="#toc-Concurrency">Concurrency</a> <a href="#Concurrency">§</a></h3>

    <ul>
      <li>stdlib: fix condition variable broadcast FutexImpl (<a href="https://github.com/ziglang/zig/issues/13577">#13577</a>).</li>
      <li>std.Thread.Futex.PosixImpl.Address.from: fix `alignment` type (<a href="https://github.com/ziglang/zig/issues/13673">#13673</a>)</li>
      <li>std.Thread: make Id smaller where possible</li>
      <li>Add a debug implementation to Mutex that detects deadlocks caused by calling lock twice in a single thread.</li>
    </ul>
    

    <h3 id="Networking"><a href="#toc-Networking">Networking</a> <a href="#Networking">§</a></h3>

    <p>For a few releases, there was a <code>std.x</code> namespace which was a playground
    for some contributors to experiment with networking. In Zig 0.11, networking is no longer
    experimental; it is part of the <a href="#Package-Management">Package Management</a> strategy. However, networking
    is still immature and <a href="#Bug-Fixes">buggy</a>, so use it at your own risk.</p>

    <ul>
      <li>net: Make <code>res</code> nullable in <code>std.c.getaddrinfo</code></li>
      <li>net: check for localhost names before asking DNS</li>
      <li>remove std.url and add std.uri which is more complete and RFC-compliant (<a href="https://github.com/ziglang/zig/issues/14176">#14176</a>).</li>
      <li>net.StreamServer.Options: add reuse_port</li>
      <li>Uri: Don't double-escape escaped query parameters (<a href="https://github.com/ziglang/zig/issues/16043">#16043</a>)</li>
      <li>os.connect: mark ECONNABORTED as unreachable (<a href="https://github.com/ziglang/zig/issues/13677">#13677</a>).</li>
      <li>os.sendfile: On BrokenPipe error, return error rather than unreachable</li>
      <li>os.bind: handle EPERM errno</li>
    </ul>


    <h4 id="TLS-Client"><a href="#toc-TLS-Client">TLS Client</a> <a href="#TLS-Client">§</a></h4>

    <p>Zig 0.11.0 now provides a client implementation of
    <a href="https://datatracker.ietf.org/doc/html/rfc8446">Transport Layer Security v1.3</a></p>

    <p>Thanks to Zig's excellent <a href="#Crypto">Crypto</a>, the
    <a href="https://github.com/ziglang/zig/blob/0.11.0/lib/std/crypto/tls/Client.zig">implementation</a>
    came out lovely. Search for <code><span>++</span></code> if you want to see a nice
    demonstration of <a href="#Concatenation-of-Arrays-and-Tuples">Concatenation of Arrays and Tuples</a>. This is also a nice showcase
    of <a href="https://ziglang.org/documentation/0.11.0/#Inline-switch">inline switch cases</a>.</p>
    <p>As lovely as it may be, there is not yet a TLS server implementation and so this code
    has not been fuzz-tested. In fact there is not yet <em>any</em> automated testing for this
    API, so use it at your own risk.</p>

    <p>I want to recognize <a href="https://shiguredo.jp/">Shigueredo</a> whose TLSv1.3
    implementation I took inspiration from. For <a href="#Thank-You-Sponsors">sponsoring</a> us
    and for allowing us to copy their RSA implementation until Frank Denis
    implemented <a href="#Constant-Time-Allocation-Free-Field-Arithmetic">Constant-Time, Allocation-Free Field Arithmetic</a>,
    本当にありがとうございました!</p>

    <p>The TLS client is a dependency of the <a href="#HTTP-Client">HTTP Client</a> which is a dependency
    of <a href="#Package-Management">Package Management</a>.</p>

    <p>Open follow-up issues:</p>
    <ul>
      <li><a href="https://github.com/ziglang/zig/issues/14167">send an alert message to the server when an error occurs</a></li>
      <li><a href="https://github.com/ziglang/zig/issues/14178">audit the implementation with respect to RFC 8446</a></li>
      <li><a href="https://github.com/ziglang/zig/issues/14172">test the implementation against many real world servers</a></li>
      <li><a href="https://github.com/ziglang/zig/issues/14173">look into TCP fastopen and TCP_QUICKACK</a></li>
      <li><a href="https://github.com/ziglang/zig/issues/14174">increase test coverage</a></li>
      <li><a href="https://github.com/ziglang/zig/issues/14175">std.crypto.Certificate.verify: additionally verify "key usage</a></li>
    </ul>
    

    <h4 id="HTTP-Client"><a href="#toc-HTTP-Client">HTTP Client</a> <a href="#HTTP-Client">§</a></h4>

    <p>There is now an HTTP client (<a href="https://github.com/ziglang/zig/issues/15123">#15123</a>). It is used by the <a href="#Compiler">Compiler</a> to fetch
    URLs as part of <a href="#Package-Management">Package Management</a>.</p>
    <p>It supports some basic features such as:
    </p><ul>
      <li>transfer-encoding: chunked (<a href="https://github.com/ziglang/zig/issues/14224">#14224</a>)</li>
      <li>HTTP redirects (<a href="https://github.com/ziglang/zig/issues/14202">#14202</a>)</li>
      <li>connection pooling, keep-alive, and compressed content (<a href="https://github.com/ziglang/zig/issues/14762">#14762</a>)</li>
    </ul>
    <p>It is still very immature and not yet tested in a robust manner. Please use it
    at your own risk.</p>
    <p>For more information, please refer to this article written by the maintainer
    of std.http: <a href="https://zig.news/nameless/coming-soon-to-a-zig-near-you-http-client-5b81">Coming Soon to a Zig Near You: HTTP CLient</a></p>
    

    <h4 id="Ignore-SIGPIPE-by-Default"><a href="#toc-Ignore-SIGPIPE-by-Default">Ignore SIGPIPE by Default</a> <a href="#Ignore-SIGPIPE-by-Default">§</a></h4>

    <p>Start code now tells the kernel to ignore SIGPIPE before calling main (<a href="https://github.com/ziglang/zig/issues/11982">#11982</a>).
    This can be disabled by adding this to the root module:</p>
    <pre><code><span><span>pub</span> <span>const</span> keep_sigpipe = <span>true</span>;</span></code></pre>
    <p>Adjust this for <a href="#Compile-Time-Configuration-Consolidated">Compile-Time Configuration Consolidated</a>.</p>
    <p>`SIGPIPE` is triggered when a process attempts to write to a broken pipe.
    By default, SIGPIPE will terminate the process without giving the program
    an opportunity to handle the situation.  Unlike a segfault, it doesn't
    trigger the panic handler so all the developer sees is that the program
    terminated with no indication as to why.</p>
    <p>By telling the kernel to instead ignore SIGPIPE, writes to broken pipes
    will return the EPIPE error (error.BrokenPipe) and the program can handle
    them like any other error.</p>
    
    

    <h3 id="Testing"><a href="#toc-Testing">Testing</a> <a href="#Testing">§</a></h3>

    <ul>
      <li>std.testing: Fully absorb expectEqualBytes into expectEqualSlices</li>
      <li>std.testing: Improve expectEqualBytes for large inputs and make expectEqualSlices use it</li>
      <li>std.testing: Add expectEqualBytes that outputs hexdumps with diffs highlighted in red. The coloring is controlled by `std.debug.detectTTYConfig` so it will be disabled when appropriate.</li>
      <li>std: add expectEqualDeep (<a href="https://github.com/ziglang/zig/issues/13995">#13995</a>)</li>
    </ul>
    

    <h3 id="Debugging"><a href="#toc-Debugging">Debugging</a> <a href="#Debugging">§</a></h3>

    <ul>
      <li>Added support for DWARF5 <code>DW_AT_ranges</code> in subprograms. Some DWARF5 subprograms have non-contiguous instruction ranges, which wasn't supported before. An example of such a function is <code>puts</code> in Ubuntu's libc. Stack traces now include the names of these functions.</li>
      <li>Support for DWARF information embedded inside COFF binaries has been fixed. This is relatively uncommon combination, as typically this information is in a PDB file, but can be output using <code>-gdwarf</code> when compiling C/C++ code for Windows.</li>
      <li>std.debug: fix segfault/panic race condition (<a href="https://github.com/ziglang/zig/issues/7859">#7859</a>) (<a href="https://github.com/ziglang/zig/issues/12207">#12207</a>).</li>
      <li>std.debug: Replace tabs with spaces when printing a line for trace output.</li>
      <li>std.log: add functionality to check if a specific log level and scope are enabled</li>
      <li>std.log.defaultLog: remove freestanding compile error</li>
      <li>Added valgrind client request support for aarch64 (<a href="https://github.com/ziglang/zig/issues/13292">#13292</a>).</li>
      <li>std.dwarf: handle DWARF 5 compile unit DW_AT_ranges correctly</li>
      <li>pdb: make SuperBlock def public</li>
    </ul>

    <h4 id="Stack-Unwinding"><a href="#toc-Stack-Unwinding">Stack Unwinding</a> <a href="#Stack-Unwinding">§</a></h4>

    <p><a href="https://github.com/kcbanner">Casey Banner</a> writes:</p>
<p>When something goes wrong in your program, at the very least you expect it to output a stack trace. In many cases, upon seeing the stack trace, the error is obvious and can be fixed without needing to attach a debugger. If you are a project maintainer, having correct stack trace output is a necessity for your users to be able to provide actionable bug reports when something goes wrong.</p>
<p>In order to print a stack trace, the panic (or segfault) handler needs to unwind the stack, by traversing back through the stack frames starting at the crash site. Up until now, this was done strictly by utilizing the <a href="https://en.wikipedia.org/wiki/Call_stack#Stack_and_frame_pointers">frame pointer</a>. This method of stack unwinding works assuming that a frame pointer is available, which isn't the case if the code is compiled without one - ie. if <code>-fomit-frame-pointer</code>was used. </p>
<p>It can be beneficial for performance reasons to not use a frame pointer, since this frees up an additional register, so some software maintainers may choose to ship libraries compiled without it. One of the motivating reasons for this change was solving a bug where unwinding a stack trace that started in Ubuntu's libc wasn't working - and indeed it is compiled with <code>-fomit-frame-pointer</code>.</p>
<p>Since <a href="https://github.com/ziglang/zig/pull/15823">#15823</a> was merged, the <a href="#Standard-Library">Standard Library</a> stack unwinder (<code>std.debug.StackIterator</code>) now supports unwinding stacks using both DWARF unwind tables, and <a href="#MachO">MachO</a> compact unwind information. These unwind tables encode how to unwind all the register state and recover the return address for any location in the program. </p>
<p>In order to save space, DWARF unwind tables aren't program-sized lookup tables, but instead sets of opcodes which run on a virtual machine inside the unwinder to build the lookup table dynmamically. Additionally, these tables can define register values in terms of DWARF expressions, which is a separate stack-machine based bytecode. This is all supported in the new unwinder.</p>
<p>As an example of how this improves stack trace output, consider the following zig program and C library (which will be built with <code>-fomit-frame-pointer</code>):</p>
<figure><figcaption><cite>main.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>extern</span> <span>fn</span> <span>add_mult</span>(x: <span>i32</span>, y: <span>i32</span>, n: ?*<span>i32</span>) <span>i32</span>;</span>
<span></span>
<span><span>pub</span> <span>fn</span> <span>main</span>() !<span>void</span> {</span>
<span>    std.debug.print(<span>"add: {}\n"</span>, .{ add_mult(<span>5</span>, <span>3</span>, <span>null</span>) });</span>
<span>}</span></code></pre></figure>

<figure><figcaption><cite>lib.c</cite></figcaption><pre><code><span>#include &lt;stdio.h&gt;</span>
<span></span>
<span>#ifndef LIB_API</span>
<span>#define LIB_API</span>
<span>#endif</span>
<span></span>
<span>int add_mult3(int x, int y, int* n) {</span>
<span>    puts((const char*)0x1234);</span>
<span>    return (x + y) * (*n);</span>
<span>}</span>
<span></span>
<span>int add_mult2(int x, int y, int* n) {</span>
<span>    return add_mult3(x, y, n);</span>
<span>}</span>
<span></span>
<span>int add_mult1(int x, int y, int* n) {</span>
<span>    return add_mult2(x, y, n);</span>
<span>}</span>
<span></span>
<span>LIB_API int add_mult(int x, int y, int* n) {</span>
<span>    return add_mult1(x, y, n);</span>
<span>}</span></code></pre></figure>

<p>Before the stack unwinding changes, the user would see the following output:</p>
<pre><code>Segmentation fault at address 0x1234
???:?:?: 0x7f71d9ec997d in ??? (???)
/home/user/kit/zig/build-stage3-release-linux/lib/zig/std/start.zig:608:37: 0x20a505 in main (main)
            const result = root.main() catch |err| {
                                    ^
Aborted</code></pre>
<p>With the new unwinder:</p>
<pre><code>Segmentation fault at address 0x1234
../sysdeps/x86_64/multiarch/strlen-avx2.S:74:0: 0x7fefd03b297d in ??? (../sysdeps/x86_64/multiarch/strlen-avx2.S)
./libio/ioputs.c:35:16: 0x7fefd0295ee7 in _IO_puts (ioputs.c)
src/lib.c:8:5: 0x7fefd04484aa in add_mult3 (/home/user/temp/stack/src/lib.c)
    puts((const char*)0x1234);
    ^
src/lib.c:13:12: 0x7fefd0448542 in add_mult2 (/home/user/temp/stack/src/lib.c)
    return add_mult3(x, y, n);
           ^
src/lib.c:17:12: 0x7fefd0448572 in add_mult1 (/home/user/temp/stack/src/lib.c)
    return add_mult2(x, y, n);
           ^
src/lib.c:21:12: 0x7fefd04485a2 in add_mult (/home/user/temp/stack/src/lib.c)
    return add_mult1(x, y, n);
           ^
/home/user/temp/stack/src/main.zig:6:45: 0x2123b7 in main (main)
    std.debug.print("add: {}\n", .{ add_mult(5, 3, null) });
                                            ^
/home/user/kit/zig/build-stage3-release-linux/lib/zig/std/start.zig:608:37: 0x2129b4 in main (main)
            const result = root.main() catch |err| {
                                    ^
../sysdeps/nptl/libc_start_call_main.h:58:16: 0x7fefd023ed8f in __libc_start_call_main (../sysdeps/x86/libc-start.c)
../csu/libc-start.c:392:3: 0x7fefd023ee3f in __libc_start_main_impl (../sysdeps/x86/libc-start.c)
???:?:?: 0x212374 in ??? (???)
???:?:?: 0x0 in ??? (???)
Aborted</code></pre>
<p>The unwind information for libc (which comes from a separate file, see below) was loaded and used to unwind the stack correctly, resulting in a much more useful stack trace. </p>
<p>If there is no unwind information available for a given frame, the unwinder will fall back to frame pointer unwinding for the rest of the stack trace. For example, if the above program is built for x86-linux-gnu on the same system (which only has x86_64 libc debug information installed), it results in the following output:</p>
<pre><code>Segmentation fault at address 0x1234
???:?:?: 0xf7dc9555 in ??? (libc.so.6)
Unwind information for `libc.so.6:0xf7dc9555` was not available (error.MissingDebugInfo), trace may be incomplete

???:?:?: 0x0 in ??? (???)
Aborted</code></pre><p>The user is notified that unwind information is missing, and they could choose to install it to enhance the stack trace output.</p>
<p>This system works for both panic traces as well as segfaults. In the case of a segfault, the OS will pass a context (containing the state of all the registers at the time of the segfault) to the handler, which will be used by the unwinder. In the case of a panic, the unwinder still needs a register context, so one is captured by the panic handler. If the program is linking libc, then libc's <code>getcontext</code> is used, otherwise an implementation in <code>std</code> is used if available. On platforms where <code>getcontext</code> isn't available, the stack unwinder falls back to frame pointer based unwinding.</p>
<p>Implementations of <code>getcontext</code> have been added for <code>x86_64-linux</code> and <code>x86-linux</code>.</p>
    

    <h4 id="External-Debug-Info"><a href="#toc-External-Debug-Info">External Debug Info</a> <a href="#External-Debug-Info">§</a></h4>

<p>The ELF format allows for splitting debug information sections into separate files. If the user of the software does not typically need to debug it, then debug info can be shipped an as optional dependency to reduce the size of the installation. A primary use case for this feature is libc debug information, which can be quite large. Some distributions have a separate package that contains only the debug info for their libc, which can be installed separately.</p>
<p>These extra files are simply additional ELF files that contain only the debug info sections. As an additional space-saving measure, these sections can also be compressed. For example, in the libc stack traces above the debug information came from <code>/usr/lib/debug/.build-id/69/389d485a9793dbe873f0ea2c93e02efaa9aa3d.debug</code>, not <code>libc.so.6</code>.</p>
<p>Support for reading external debug information has been added, with this set of changes:</p>
<ul>
<li>Support reading the build-id from the elf headers in order to lookup external debug info</li>
<li>Support reading the <code>.gnu_debuglink</code> section to look up external debug info</li>
<li>Add support for reading compressed ELF sections</li>
<li>Rework how sections are loaded from disk in order to support merging the list of sections that are present in the binary itself and the ones from the external debug info</li>
<li>Fixed up some memory management issues with the existing debug information loader</li>
</ul>
    
    

    <h3 id="Formatted-Printing"><a href="#toc-Formatted-Printing">Formatted Printing</a> <a href="#Formatted-Printing">§</a></h3>

    <ul>
    <li>Consistent use of "invalid format string" compile error response for badly formatted format strings (<a href="https://github.com/ziglang/zig/issues/13526">#13526</a>)</li>
    <li>Make invalidFmtError public and use in place of compileErrors for bad format strings (<a href="https://github.com/ziglang/zig/issues/13526">#13526</a>)</li>
    <li>std.fmt.formatInt: Use an optimized path for decimals, enabling faster decimal-to-string conversions for values in the range [0, 100).</li>
    <li>Fix buffer overflow in fmt when DAZ is set (<a href="https://github.com/ziglang/zig/issues/14270">#14270</a>).</li>
    <li>parse_float: Error when a float is attempted to be parsed into an invalid type (<a href="https://github.com/ziglang/zig/issues/15593">#15593</a>).</li>
    <li>Add std.fmt.parseIntSizeSuffix and use for --maxrss (<a href="https://github.com/ziglang/zig/issues/14955">#14955</a>)</li>
    <li>std.fmt.parseIntSizeSuffix: add R and Q</li>
    <li>std: expose fmt methods and structs for parsing</li>
    <li>std: fix parseInt for single-digit signed minInt (<a href="https://github.com/ziglang/zig/issues/15966">#15966</a>)</li>
    <li>std.fmt: fix error set of formatDuration (<a href="https://github.com/ziglang/zig/issues/16093">#16093</a>)</li>
    <li>mark parse_float.convertSlow as cold, reducing stack usage (<a href="https://github.com/ziglang/zig/issues/16438">#16438</a>).</li>
    <li>fmt: Make default_max_depth configurable</li>
    <li>std.fmt: add bytesToHex() to encode bytes as hex digits</li>
    <li>Fixed parseFloat parsing of `0x` (<a href="https://github.com/ziglang/zig/issues/14901">#14901</a>).</li>
    <li>std: improve error for formatting a function body type (<a href="https://github.com/ziglang/zig/issues/14915">#14915</a>)</li>
    </ul>
    

    <h3 id="JSON"><a href="#toc-JSON">JSON</a> <a href="#JSON">§</a></h3>

    <p><a href="https://github.com/thejoshwolfe/">Josh Wolfe</a> writes:</p>

    <p>New <code>std.json</code> features:</p>
    <ul>
    <li>Read a json document from a streaming source with <code>json.reader</code>. See <code>json.Token</code> for fine control over the interaction between large tokens, streaming input, and allocators.</li>
    <li>Unlimited <code>{}</code> and <code>[]</code> nesting depth subject to allocator limitations.</li>
    <li>After parsing into a dynamic <code>json.Value</code> tree/array union, you can now call <code>json.parseFromValue*</code> to parse that into a static type <code>T</code> following essentially the same semantics as parsing directly.</li>
    <li>Parsing via <code>json.parseFrom*</code> is customizable by implementing <code>pub fn jsonParse</code> and/or <code>pub fn jsonParseFromValue</code> in your <code>struct</code>, <code>enum</code>, or <code>union(enum)</code>. This mirrors the customizable <code>pub fn jsonStringify</code> functionality.</li>
    <li>Added a generic <code>json.HashMap(T)</code> container for serializing/deserializing objects with arbitrary string fields. It's a thin wrapper around <code>StringArrayHashMapUnmanaged</code> that implements <code>jsonParse</code>, <code>jsonParseFromValue</code>, and <code>jsonStringify</code>.</li>
    <li><code>json.WriteStream</code> features now available to custom <code>pub fn jsonStringify</code> implementations due to the unification of <code>json.stringify</code> and <code>json.WriteStream</code>.</li>
    <li>Writing JSON now supports saving memory by disabling assertions for correct syntax, e.g. disabling assertions that <code>endArray</code> matches a corresponding <code>beginArray</code>.</li>

    <li><code><span><span>@Vector</span></span></code> support for std.json.parse</li>
    </ul>

    <p>Here is an upgrade guide:</p>
    <p><em>These instructions include the breaking changes from
      <a href="https://github.com/ziglang/zig/pull/15602">#15602</a>,
    <a href="https://github.com/ziglang/zig/pull/15705">#15705</a>,
    <a href="https://github.com/ziglang/zig/pull/15981">#15981</a>,
    and <a href="https://github.com/ziglang/zig/pull/16405">#16405</a>.</em></p>

    <h4 id="codeparsecode-replaced-by-codeparseFromSlicecode-or-other-codeparseFromcode"><a href="#toc-codeparsecode-replaced-by-codeparseFromSlicecode-or-other-codeparseFromcode"><code>parse</code> replaced by <code>parseFromSlice</code> or other <code>parseFrom*</code></a> <a href="#codeparsecode-replaced-by-codeparseFromSlicecode-or-other-codeparseFromcode">§</a></h4>

<p>For code that used to look like this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>var</span> stream = json.TokenStream.init(slice);</span>
<span><span>const</span> options = json.ParseOptions{ .allocator = allocator };</span>
<span><span>const</span> result = <span>try</span> json.parse(T, &amp;stream, options);</span>
<span><span>defer</span> json.parseFree(T, result, options);</span></code></pre></figure>
<p>Now do this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>const</span> parsed = <span>try</span> json.parseFromSlice(T, allocator, slice, .{});</span>
<span><span>defer</span> parsed.deinit();</span>
<span><span>const</span> result = parsed.value;</span></code></pre></figure>
<h5 id="codeparseFreecode-replaced-by-codeParsedTdeinitcode"><a href="#toc-codeparseFreecode-replaced-by-codeParsedTdeinitcode"><code>parseFree</code> replaced by <code>Parsed(T).deinit()</code></a> <a href="#codeparseFreecode-replaced-by-codeParsedTdeinitcode">§</a></h5>

<p>See above. Alternatively, use the <code>parseFrom*Leaky</code> variants and manage your own arena.</p>


<h4 id="codeParserparsecode-replaced-by-codeparseFromSlicecode-into-codeValuecode"><a href="#toc-codeParserparsecode-replaced-by-codeparseFromSlicecode-into-codeValuecode"><code>Parser.parse</code> replaced by <code>parseFromSlice</code> into <code>Value</code></a> <a href="#codeParserparsecode-replaced-by-codeparseFromSlicecode-into-codeValuecode">§</a></h4>

<p>For code that used to look like this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>var</span> parser = json.Parser.init(allocator, <span>false</span>);</span>
<span><span>defer</span> parser.deinit();</span>
<span><span>var</span> tree = <span>try</span> parser.parse(slice);</span>
<span><span>defer</span> tree.deinit();</span>
<span><span>const</span> root = tree.root;</span></code></pre></figure>
<p>Now do this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>const</span> parsed = <span>try</span> json.parseFromSlice(json.Value, allocator, slice, .{});</span>
<span><span>defer</span> parsed.deinit();</span>
<span><span>const</span> root = parsed.value;</span></code></pre></figure>

<h5 id="codeValueTreecode-replaced-by-codeParsedValuecode"><a href="#toc-codeValueTreecode-replaced-by-codeParsedValuecode"><code>ValueTree</code> replaced by <code>Parsed(Value)</code></a> <a href="#codeValueTreecode-replaced-by-codeParsedValuecode">§</a></h5>

<p>The result of <code>json.parseFrom*(T, ...)</code> (except for <code>json.parseFrom*Leaky(T, ...)</code>) is <code>json.Parsed(T)</code>, which replaces the old <code>ValueTree</code>.</p>



<h4 id="codewriteStreamcode-API-simplification"><a href="#toc-codewriteStreamcode-API-simplification"><code>writeStream</code> API simplification</a> <a href="#codewriteStreamcode-API-simplification">§</a></h4>

<p>The default max depth for <code>writeStream</code> is now 256. To specify a deeper max depth, use <code>writeStreamMaxDepth</code>.</p>
<p>You don't need to call <code>arrayElem()</code> anymore.</p>
<p>All the <code>emit*()</code> methods (<code>emitNumber</code>, <code>emitString</code>, <code>emitBool</code>, <code>emitNull</code>, <code>emitJson</code>) replaced by the generic <code>write()</code> method, which takes <code>anytype</code>. The generic <code>json.stringify</code> functionality for structs, unions, etc. is also available in <code>WriteStream.write()</code> (the implementation of <code>stringify</code> now uses <code>WriteStream.write</code>.).</p>
<h5 id="Custom-codejsonStringifycode-signature-changed"><a href="#toc-Custom-codejsonStringifycode-signature-changed">Custom <code>jsonStringify</code> signature changed</a> <a href="#Custom-codejsonStringifycode-signature-changed">§</a></h5>

<p>Instead of <code>pub fn jsonStringify(self: *@This(), options: json.StringifyOptions, out_stream: anytype) !void</code>, use <code>pub fn jsonStringify(self: *@This(), jw: anytype) !void</code>, where <code>jw</code> is a mutable pointer to a <code>WriteStream</code>. Instead of writing bytes to the <code>out_stream</code>, you should call <code>write()</code> and <code>beginObject</code> and such on the <code>WriteStream</code>.</p>

<h5 id="codestringifycode-limits-nesting-to-256-by-default"><a href="#toc-codestringifycode-limits-nesting-to-256-by-default"><code>stringify</code> limits nesting to 256 by default</a> <a href="#codestringifycode-limits-nesting-to-256-by-default">§</a></h5>

<p>The depth of <code>{</code>/<code>[</code> nesting in the output of <code>json.stringify</code> is now 256. Now that the implementation of <code>stringify</code> uses a <code>WriteStream</code>, we have safety checks for matching <code>endArray</code> to <code>beginArray</code> and such, which requires memory: 1 bit per nesting level. To disable syntax checks and save that memory, use <code>stringifyMaxDepth(..., null)</code>. To make syntax checks available to custom <code>pub fn jsonStringify</code> implementations to arbitrary nesting depth, use <code>stringifyArbitraryDepth</code> and provide an allocator.</p>



<h4 id="codeStringifyOptionscode-overhauled"><a href="#toc-codeStringifyOptionscode-overhauled"><code>StringifyOptions</code> overhauled</a> <a href="#codeStringifyOptionscode-overhauled">§</a></h4>

<ul>
<li><code>escape_unicode</code> moved to the top level.</li>
<li><code>escape_solidus</code> removed.</li>
<li><code>string = .Array</code> replaced by <code>.emit_strings_as_arrays = true</code>.</li>
<li><code>whitespace.indent_level</code> removed.</li>
<li><code>whitespace.separator</code> and <code>whitespace.indent</code> combined into <code>.whitespace = .minified</code> vs <code>.whitespace = .indent_2</code> etc.</li>
</ul>
<p><strong>The default whitespace in all contexts is now <code>.minified</code>.</strong> This is changed from the old <code>WriteStream</code> having effectively <code>.indent_1</code>, and the old <code>StringifyOptions{ .whitespace = .{} }</code> having effectively <code>.indent_4</code>.</p>


<h4 id="codeTokenStreamcode-replaced-by-codeScannercode"><a href="#toc-codeTokenStreamcode-replaced-by-codeScannercode"><code>TokenStream</code> replaced by <code>Scanner</code></a> <a href="#codeTokenStreamcode-replaced-by-codeScannercode">§</a></h4>

<p>For code that used to look like this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>var</span> stream = json.TokenStream.init(slice);</span>
<span><span>while</span> (<span>try</span> stream.next()) |token| {</span>
<span>    handleToken(token);</span>
<span>}</span></code></pre></figure>
<p>Now do this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>var</span> tokenizer = json.Scanner.initCompleteInput(allocator, slice);</span>
<span><span>defer</span> tokenizer.deinit();</span>
<span><span>while</span> (<span>true</span>) {</span>
<span>    <span>const</span> token = <span>try</span> tokenizer.next();</span>
<span>    <span>if</span> (token == .end_of_document) <span>break</span>;</span>
<span>    handleToken(token);</span>
<span>}</span></code></pre></figure>
<p>See <code>json.Token</code> for more info.</p>


<h4 id="codeStreamingParsercode-replaced-by-codeReadercode"><a href="#toc-codeStreamingParsercode-replaced-by-codeReadercode"><code>StreamingParser</code> replaced by <code>Reader</code></a> <a href="#codeStreamingParsercode-replaced-by-codeReadercode">§</a></h4>

<p>For code that used to look like this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>const</span> slice = <span>try</span> reader.readAllAlloc(allocator, max_size);</span>
<span><span>defer</span> allocator.free(slice);</span>
<span><span>var</span> tokenizer = json.StreamingParser.init();</span>
<span><span>for</span> (slice) |c| {</span>
<span>    <span>var</span> token1: ?json.Token = <span>undefined</span>;</span>
<span>    <span>var</span> token2: ?json.Token = <span>undefined</span>;</span>
<span>    <span>try</span> tokenizer.feed(c, &amp;token1, &amp;token2);</span>
<span>    <span>if</span> (token1) |t| {</span>
<span>        handleToken(t);</span>
<span>        <span>if</span> (token2) |t2| handleToken(t2);</span>
<span>    }</span>
<span>}</span></code></pre></figure>
<p>Now do this:</p>
<figure><figcaption><cite>example.zig</cite></figcaption><pre><code><span><span>var</span> stream = json.reader(allocator, reader);</span>
<span><span>defer</span> stream.deinit();</span>
<span><span>while</span> (<span>true</span>) {</span>
<span>    <span>const</span> token = <span>try</span> stream.next();</span>
<span>    <span>if</span> (token == .end_of_document) <span>break</span>;</span>
<span>    handleToken(token);</span>
<span>}</span></code></pre></figure>
<p>See <code>json.Token</code> for more info.</p>

<h4 id="parsestringify-for-codeunioncode-types"><a href="#toc-parsestringify-for-codeunioncode-types">parse/stringify for <code>union</code> types</a> <a href="#parsestringify-for-codeunioncode-types">§</a></h4>

<p>Parsing and stringifying <code>union(enum)</code> types works differently now by default. For <code>const T = union(enum) { s: []const u8, i: i32};</code>, the old behavior used to accept documents in the form <code>"abc"</code> or <code>123</code> to parse into <code>.{.s="abc"}</code> or <code>.{.i=123}</code> respectively; the new behavior accepts documents in the form <code>{"s":"abc"}</code> or <code>{"i":123}</code> instead. Stringifying is updated as well to maintain the bijection.</p>
<p>The dynamic value <code>json.Value</code> can be used for simple int-or-string cases. For more complex cases, you can implement <code>jsonParse</code>, <code>jsonParseFromValue</code>, and <code>jsonStringify</code> as needed.</p>

<h4 id="An-allocator-is-always-required-for-parsing-now"><a href="#toc-An-allocator-is-always-required-for-parsing-now">An allocator is always required for parsing now</a> <a href="#An-allocator-is-always-required-for-parsing-now">§</a></h4>

<p>Sorry for the inconvenience. There are some ideas to restore support for allocatorless json parsing, but for now, you always must use an allocator. At a minimum it is used for tracking the <code>{}</code> vs <code>[]</code> nesting depth, and possibly other uses depending on what <code>std.json</code> API is being called.</p>
<p>If you use a <code>std.FixedBufferAllocator</code>, you can make parsing json work at comptime.</p>

    

    <h3 id="posix_spawn-Considered-Harmful"><a href="#toc-posix_spawn-Considered-Harmful">posix_spawn Considered Harmful</a> <a href="#posix_spawn-Considered-Harmful">§</a></h3>

    <p>posix_spawn is trash. It's actually implemented
    on top of fork/exec inside of libc (or libSystem in the case of macOS).</p>
    <p>So, anything posix_spawn can do, we can do better. In particular, what
    we can do better is handle spawning of child processes that are
    potentially foreign binaries. If you try to spawn a wasm binary, for
    example, posix spawn does the following:</p>
    <ul>
     <li>Goes ahead and creates a child process.</li>
     <li>The child process writes "foo.wasm: foo.wasm: cannot execute binary file"
       to stderr (yes, it prints the filename twice).</li>
     <li>The child process then exits with code 126.</li>
    </ul>
    <p>This behavior is indistinguishable from the binary being successfully
    spawned, and then printing to stderr, and exiting with a failure -
    something that is an extremely common occurrence.
    </p><p>
    Meanwhile, using the lower level fork/exec will simply return ENOEXEC
    code from the execve syscall (which is mapped to zig error.InvalidExe).
    </p><p>
    The posix_spawn behavior means the zig build runner can't tell the
    difference between a failure to run a foreign binary, and a binary that
    did run, but failed in some other fashion. This is unacceptable, because
    attempting to excecve is the proper way to support things like Rosetta.
    </p>
    <p>Therefore, use of posix_spawn is eliminated from the standard library,
    in order to facilitate <a href="#Foreign-Target-Execution-and-Testing">Foreign Target Execution and Testing</a>.</p>
    
    

    <h2 id="Build-System"><a href="#toc-Build-System">Build System</a> <a href="#Build-System">§</a></h2>

    <p>With this release, the Zig Build System is no longer <strong>experimental</strong>.
    It is the début of <a href="#Package-Management">Package Management</a>.</p>

    <ul>
    <li>Detect and disallow top-level step name clashes.</li>
    <li>Rename <code><span>std.Build.FooStep</span></code> to <code><span>std.Build.Step.Foo</span></code> (<a href="https://github.com/ziglang/zig/issues/14947">#14947</a>).</li>
    <li>Fixed <code>WriteFile.getFileSource</code> failure on <a href="#Windows">Windows</a> (<a href="https://github.com/ziglang/zig/issues/15730">#15730</a>).</li>
    <li>Allow dynamicbase to be disabled by Step.Compile (<a href="https://github.com/ziglang/zig/issues/14771">#14771</a>).</li>
    <li>addition of config step, cmake step</li>
    <li>allow run step to skip foreign binary execution if executor fails</li>
    <li>enhancements to CheckObjectStep</li>
    <li>build system: make `@embedFile` support module-mapped names the same way as `@import` (<a href="https://github.com/ziglang/zig/issues/14553">#14553</a>)</li>
    <li>build system: Add ability to import dependencies from build.zig</li>
    <li>build: fix adding rpaths on darwin, improve CheckObjectStep to allow matching LazyPath paths (<a href="https://github.com/ziglang/zig/issues/15061">#15061</a>)</li>
    <li>move src.type.CType to std lib, use it from std.Build, this will help with populating config.h files. [motivating change](https://github.com/andrewrk/libmp3lame/commit/a33ffeb1bd0942405af77b6022e1954fad48e09d)</li>
    <li>std.Build.addAssembly: add missing .kind</li>
    <li>std.Build.RunStep: fix default caching logic (<a href="https://github.com/ziglang/zig/issues/14666">#14666</a>)</li>
    <li>std.Build.WriteFileStep: integrate with cache system and additionally support writing files to source files. This means a custom build step in zig's own build.zig is no longer needed for copying zig.h because it is handled by WriteFileStep.</li>
    <li>std.Build.Step.Compile: fix clearing logic for empty cflags</li>
    <li>std.Build: Add methods for creating modules from a TranslateC object.</li>
    <li>avoid repeating objects when linking a static library (<a href="https://github.com/ziglang/zig/issues/15708">#15708</a>)</li>
    <li>std: add ELF parse'n'dump functionality to std.Build.Step.CheckObject (<a href="https://github.com/ziglang/zig/issues/16398">#16398</a>)</li>
    <li>std.Build.Step.Compile: getEmittedDocs API enhancements</li>
    </ul>

    <h3 id="Terminology-Changes"><a href="#toc-Terminology-Changes">Terminology Changes</a> <a href="#Terminology-Changes">§</a></h3>

    <p>
    The introduction of <a href="#Package-Management">Package Management</a> required some terminology in the Zig Build
    System to be changed.
    </p>
    <p>
    Previously, a directory of Zig source files with one root source file which could be imported by
    name was known as a <b>package</b>. It is now instead called a <b>module</b>.
    </p>
    <p>
    This frees up the term <b>package</b> to be used in the context of package management. A package
    is a directory of files, uniquely identified by a hash of all files, which can export any number
    of compilation artifacts and modules.
    </p>
    

    <h3 id="Rename-Types-and-Functions"><a href="#toc-Rename-Types-and-Functions">Rename Types and Functions</a> <a href="#Rename-Types-and-Functions">§</a></h3>

    <p>A large amount of types and functions in the build system have been renamed in this release cycle.</p>
    <ul>
      <li><code><span>std.build</span></code> and <code><span>std.build.Builder</span></code> combined into <code><span>std.Build</span></code></li>
      <li><code><span>LibExeObjStep</span></code> to <code><span>CompileStep</span></code></li>
      <li><code><span>InstallRawStep</span></code> to <code><span>ObjCopyStep</span></code></li>
      <li><code><span>std.Build.FooStep</span></code> to <code><span>std.Build.Step.Foo</span></code> (e.g. <code><span>std.Build.Step.Compile</span></code>)</li>
      <li><code><span>std.Build.FileSource</span></code> to <code><span>std.Build.LazyPath</span></code> (<a href="https://github.com/ziglang/zig/issues/16446">#16446</a>)</li>
      <li>Any type or function with <code><span>LazyPath</span></code> in the name has been renamed, generally replacing it with either <code><span>File</span></code> or <code><span>Path</span></code></li>
      <li><code><span>std.builtin.Mode</span></code> to <code><span>std.builtin.OptimizeMode</span></code>, and all references to "build mode" changed to "optimize mode"</li>
      <li><code><span>std.Build.Pkg</span></code> to <code><span>std.Build.Module</span></code>
    </li></ul>
    

    <h3 id="Target-and-Optimization"><a href="#toc-Target-and-Optimization">Target and Optimization</a> <a href="#Target-and-Optimization">§</a></h3>

    <p>
    The target and optimization level for <code>std.Build.Step.Compile</code> is no longer set
    separately using setter methods (previously <code>setTarget</code> and
    <code>setBuildMode</code>). Instead, they are provided at the time of step creation, for
    instance to <code>std.Build.addExecutable</code>.
    </p>
    

    <h3 id="Package-Management"><a href="#toc-Package-Management">Package Management</a> <a href="#Package-Management">§</a></h3>

    <p>
    Zig 0.11 is the début of the official package manager. The package manager is still in its early
    stages, but is mature enough to use in many cases. There is no "official" package repository:
    packages are simply arbitrary directory trees which can be local directories or archives from
    the Internet.
    </p>
    <p>
    Package information is declared in a file named <code>build.zig.zon</code>. ZON (Zig Object
    Notation) is a simple data interchange format introduced in this release cycle, which uses Zig's
    anonymous struct and array initialization syntax to declare objects in a manner similar to other
    formats such as JSON. The <code>build.zig.zon</code> file for a package should look like this:
    </p>
    <figure><figcaption><cite>build.zig.zon</cite></figcaption><pre><code><span>.{</span>
<span>    .name = <span>"my_package_name"</span>,</span>
<span>    .version = <span>"0.1.0"</span>,</span>
<span>    .dependencies = .{</span>
<span>        .dep_name = .{</span>
<span>            .url = <span>"https://link.to/dependency.tar.gz"</span>,</span>
<span>            .hash = <span>"12200f41f9804eb9abff259c5d0d84f27caa0a25e0f72451a0243a806c8f94fdc433"</span>,</span>
<span>        },</span>
<span>    },</span>
<span>}</span></code></pre></figure>
    <p>
    The information provided is the package name and version, and a list of dependencies, each of
    which has a name, a URL to an archive, and a hash. The hash is not of the archive itself, but of
    its contents. In order to find it, it can be omitted from the file, and <code>zig build</code>
    will emit an error containing the expected hash. There will be tooling in future to make this
    file easier to modify.
    </p>
    <p>
    So far, tar.gz and tar.xz formats are supported, with more planned, as well as a
    plan for custom fetch plugins.
    </p>
    <p>
    This information is provided in a separate file (rather than declared in the
    <code>build.zig</code> script) to speed up the package manager by allowing package fetching to
    happen without the need to build and run the build script. This also allows tooling to observe
    dependency graphs without having to execute potentially dangerous code.
    </p>
    <p>
    Every dependency can expose a collection of <b>binary artifacts</b> and <b>Zig modules</b> from
    itself. The <code>std.Build.addModule</code> function creates a new Zig module which is publicly
    exposed from your package; i.e. one which dependant packages can use. (To create a private
    module, instead use <code>std.Build.createModule</code>.) Regarding binary artifacts, any
    artifact which is <b>installed</b> (for instance, via <code>std.Build.installArtifact</code>) is
    exposed to dependant packages.
    </p>
    <p>
    In the build script, dependencies can be referenced using the <code>std.Build.dependency</code>
    function. This takes the name of a dependency (as given in <code>build.zig.zon</code>) and
    returns a <code><span>*std.Build.Dependency</span></code>. You can then use the
    <code>artifact</code> and <code>module</code> methods on this object to get binary artifacts and
    Zig modules exposed by the dependency.
    </p>
    <p>
    If you wish to vendor a dependency rather than fetch it from the Internet, you can use the
    <code>std.Build.anonymousDependency</code> function, which takes as arguments a path to the
    package's build root, and an <code>@import</code> of its build script.
    </p>
    <p>
    Both <code>dependency</code> and <code>anonymousDependency</code> take a parameter
    <code>args</code>. This is an anonymous struct containing arbitrary arguments to pass to the
    build script, which it can access as if they were passed to the script through <code>-D</code>
    flags (through <code>std.Build.option</code>. Options from the current package are not
    implicitly provided to dependencies, and must be explicitly forwarded where required.
    </p>
    <p>
    It is standard for packages to use <code>std.Build.standardOptimizeOption</code> and
    <code>std.Build.standardTargetOptions</code> when they need an optimization level and/or target
    from their dependant. This allows the dependant to simply forward these values with the names
    <code>optimize</code> and <code>target</code>.
    </p>
    <figure><figcaption><cite>build.zig</cite></figcaption><pre><code><span><span>const</span> std = <span>@import</span>(<span>"std"</span>);</span>
<span></span>
<span><span>pub</span> <span>fn</span> <span>build</span>(b: *std.Build) <span>void</span> {</span>
<span>    <span>const</span> target = b.standardTargetOptions(.{});</span>
<span>    <span>const</span> optimize = b.standardOptimizeOption(.{});</span>
<span></span>
<span>    <span>const</span> my_remote_dep = b.dependency(<span>"my_remote_dep"</span>, .{</span>
<span>        <span>// These are the arguments to the dependency. It expects a target and optimization level.</span></span>
<span>        .target = target,</span>
<span>        .optimize = optimize,</span>
<span>    });</span>
<span>    <span>const</span> my_local_dep = b.anonymousDependency(<span>"deps/bar/"</span>, <span>@import</span>(<span>"deps/bar/build.zig"</span>), .{</span>
<span>        <span>// This dependency also expects those options, as well as a boolean indicating whether to</span></span>
<span>        <span>// build against another library.</span></span>
<span>        .target = target,</span>
<span>        .optimize = optimize,</span>
<span>        .use_libfoo = <span>false</span>,</span>
<span>    });</span>
<span></span>
<span>    <span>const</span> exe = <span>try</span> b.addExecutable(.{</span>
<span>        .name = <span>"my_binary"</span>,</span>
<span>        .root_source_file = .{ .path = <span>"src/main.zig"</span> },</span>
<span>        .target = target,</span>
<span>        .optimize = optimize,</span>
<span>    });</span>
<span>    </span>
<span>    <span>// my_remote_dep exposes a Zig module we wish to depend on.</span></span>
<span>    exe.addModule(my_remote_dep.module(<span>"some_mod"</span>));</span>
<span></span>
<span>    <span>// my_local_dep exposes a static library we wish to link to.</span></span>
<span>    exe.linkLibrary(my_local_dep.artifact(<span>"some_lib"</span>));</span>
<span></span>
<span>    b.addInstallArtifact(exe);</span>
<span>}</span></code></pre></figure>
    <p>
    Explicitly passing the target and optimization level like this allows a build script to build
    some binaries for different targets or at different optimization levels, which can, for
    instance, be useful when
    <a href="https://github.com/andrewrk/groovebasin/blob/271bd7e4014e55a089b8d956228d90b57d8e3fa5/build.zig#L5-L31">
    interfacing with WebAssembly
    </a>.
    </p><p>
    Every package uses a separate instance of <code>std.Build</code>, managed by the build system.
    It is important to perform operations on the correct instance. This will always be the one
    passed as a parameter to the <code>build</code> function in your build script.
    </p>
    <p>
    <b>The package manager is in its early stages, and will likely undergo significant changes
    before 1.0.</b> Some planned features include optional dependencies, better support for binary
    dependencies, the ability to construct a <code>LazyPath</code> from an arbitrary file from a
    dependency, improved tooling, and more. However, the package manager is in a state where it is
    usable for some projects, particularly simple pure-Zig projects.
    </p>
    
    
    <h3 id="Install-and-Run-Executables"><a href="#toc-Install-and-Run-Executables">Install and Run Executables</a> <a href="#Install-and-Run-Executables">§</a></h3>

    <p>
    The build system supports adding steps to install and run compiled executables. This was
    previously done using the <code><span>install</span></code> and <code><span>run</span></code> methods
    on <code><span>std.Build.Step.Compile</span></code>. However, this leads to ambiguities about the
    owner package in the presence of package management. Therefore, these operations must now be
    done with these functions:
    </p>
    <ul>
      <li><code><span>b.installArtifact(exe)</span></code> creates an install step for
        <code><span>exe</span></code> and adds it as a dependency of <code><span>b</span></code>'s
        top-level install step</li>
      <li><code><span>b.addRunArtifact(exe)</span></code> creates and returns a run artifact for
        <code><span>exe</span></code></li>
    </ul>
    <p>Example use case unlocked by this change: <a href="https://github.com/andrewrk/ffmpeg/blob/73ac2d6ce909854436a23a26a9f712861eec2b4e/build.zig#L873">depending on nasm and using it to produce object files</a></p>
    

    <h3 id="Compiler-Protocol"><a href="#toc-Compiler-Protocol">Compiler Protocol</a> <a href="#Compiler-Protocol">§</a></h3>

    <p>
    Previously, when the build system invoked the Zig compiler, it simply forwarded stderr to the
    terminal, so the user could see any errors. This solution limits the possibility of integration
    between the build system and the compiler. Therefore, the build system now communicates
    information to the compiler using a binary protocol.
    </p>
    <p>
    This protocol will likely not be used by end users, but it is enabled using the
    <code>--listen</code> argument to the compiler, and communicates over TCP (with default port
    14735) or stdio. The types in <code>std.zig.Server</code> are used by the protocol, and a usage
    example can be found in <code>std.Build.Step.evalZigProcess</code>.
    </p>
    <p>
    The usage of this compiler protocol does mean there can be a small time delay between something
    like a compilation error occuring and it being reported by <code>zig build</code>, however it
    has the advantage of allowing the build system to receive much more detailed information about
    the build, allowing for functionality like the <a href="#Build-Summary">Build Summary</a>.
    </p>
    

    <h3 id="Build-Summary"><a href="#toc-Build-Summary">Build Summary</a> <a href="#Build-Summary">§</a></h3>

    <p>
    <code>zig build</code> will now print a summary of all build steps after completing. This
    summary includes information on which steps succeeded, which failed, and why. The
    <code>--summary</code> option controls what information is printed:
    </p>
    <figure><figcaption>Shell</figcaption><pre><samp>--summary [mode]              Control the printing of the build summary
    all                         Print the build summary in its entirety
    failures                    (Default) Only print failed steps
    none                        Do not print the build summary
</samp></pre></figure>
    <p>
    Please note that the output from this option is currently
    <a href="https://github.com/ziglang/zig/issues/14937">not color-blind friendly</a>. This will be
    improved in the future.
    </p>
    <p>Here is example output from running <code>zig build test-behavior -fqemu -fwasmtime --summary all</code> in zig's codebase:</p>
    <pre><code>Build Summary: 67/80 steps succeeded; 13 skipped; 36653/39320 tests passed; 2667 skipped
test-behavior success
├─ run test behavior-native-Debug cached
│  └─ zig test Debug native cached 21s MaxRSS:52M
├─ run test behavior-native-Debug-libc cached
│  └─ zig test Debug native cached 21s MaxRSS:52M
├─ run test behavior-native-Debug-single cached
│  └─ zig test Debug native cached 20s MaxRSS:52M
├─ run test behavior-native-Debug-libc-cbe 1666 passed 113 skipped 16ms MaxRSS:20M
│  └─ zig build-exe behavior-native-Debug-libc-cbe Debug native success 16s MaxRSS:731M
│     └─ zig test Debug native success 21s MaxRSS:134M
├─ run test behavior-x86_64-linux-none-Debug-selfhosted 1488 passed 291 skipped 29ms MaxRSS:17M
│  └─ zig test Debug x86_64-linux-none success 1s MaxRSS:115M
├─ run test behavior-wasm32-wasi-Debug-selfhosted 1441 passed 342 skipped 639ms MaxRSS:51M
│  └─ zig test Debug wasm32-wasi success 718ms MaxRSS:115M
├─ run test behavior-x86_64-macos-none-Debug-selfhosted skipped
│  └─ zig test Debug x86_64-macos-none success 21s MaxRSS:121M
├─ run test behavior-x86_64-windows-gnu-Debug-selfhosted skipped
│  └─ zig test Debug x86_64-windows-gnu success 2s MaxRSS:114M
├─ run test behavior-wasm32-wasi-Debug 1674 passed 109 skipped 2s MaxRSS:83M
│  └─ zig test Debug wasm32-wasi cached 20ms MaxRSS:51M
├─ run test behavior-wasm32-wasi-Debug-libc 1674 passed 109 skipped 1s MaxRSS:93M
│  └─ zig test Debug wasm32-wasi cached 8ms MaxRSS:51M
├─ run test behavior-x86_64-linux-none-Debug cached
│  └─ zig test Debug x86_64-linux-none cached 24ms MaxRSS:52M
├─ run test behavior-x86_64-linux-gnu-Debug-libc skipped
│  └─ zig test Debug x86_64-linux-gnu success 13s MaxRSS:440M
├─ run test behavior-x86_64-linux-musl-Debug-libc 1698 passed 91 skipped 353ms MaxRSS:17M
│  └─ zig test Debug x86_64-linux-musl success 13s MaxRSS:439M
├─ run test behavior-x86-linux-none-Debug 1693 passed 96 skipped 20ms MaxRSS:20M
│  └─ zig test Debug x86-linux-none success 21s MaxRSS:436M
├─ run test behavior-x86-linux-musl-Debug-libc 1693 passed 96 skipped 26ms MaxRSS:19M
│  └─ zig test Debug x86-linux-musl success 20s MaxRSS:454M
├─ run test behavior-x86-linux-gnu-Debug-libc skipped
│  └─ zig test Debug x86-linux-gnu success 21s MaxRSS:462M
├─ run test behavior-aarch64-linux-none-Debug 1687 passed 102 skipped 2s MaxRSS:31M
│  └─ zig test Debug aarch64-linux-none success 16s MaxRSS:449M
├─ run test behavior-aarch64-linux-musl-Debug-libc 1687 passed 102 skipped 1s MaxRSS:34M
│  └─ zig test Debug aarch64-linux-musl success 17s MaxRSS:457M
├─ run test behavior-aarch64-linux-gnu-Debug-libc skipped
│  └─ zig test Debug aarch64-linux-gnu success 14s MaxRSS:457M
├─ run test behavior-aarch64-windows-gnu-Debug-libc skipped
│  └─ zig test Debug aarch64-windows-gnu success 14s MaxRSS:402M
├─ run test behavior-arm-linux-none-Debug 1686 passed 103 skipped 737ms MaxRSS:29M
│  └─ zig test Debug arm-linux-none cached 12ms MaxRSS:51M
├─ run test behavior-arm-linux-musleabihf-Debug-libc 1686 passed 103 skipped 768ms MaxRSS:31M
│  └─ zig test Debug arm-linux-musleabihf cached 12ms MaxRSS:52M
├─ run test behavior-mips-linux-none-Debug 1686 passed 103 skipped 447ms MaxRSS:36M
│  └─ zig test Debug mips-linux-none success 25s MaxRSS:454M
├─ run test behavior-mips-linux-musl-Debug-libc 1686 passed 103 skipped 417ms MaxRSS:39M
│  └─ zig test Debug mips-linux-musl success 28s MaxRSS:471M
├─ run test behavior-mipsel-linux-none-Debug 1688 passed 101 skipped 406ms MaxRSS:34M
│  └─ zig test Debug mipsel-linux-none success 23s MaxRSS:454M
├─ run test behavior-mipsel-linux-musl-Debug-libc 1688 passed 101 skipped 751ms MaxRSS:37M
│  └─ zig test Debug mipsel-linux-musl cached 14ms MaxRSS:53M
├─ run test behavior-powerpc-linux-none-Debug 1687 passed 102 skipped 849ms MaxRSS:31M
│  └─ zig test Debug powerpc-linux-none cached 13ms MaxRSS:51M
├─ run test behavior-powerpc-linux-musl-Debug-libc 1687 passed 102 skipped 782ms MaxRSS:32M
│  └─ zig test Debug powerpc-linux-musl cached 8ms MaxRSS:51M
├─ run test behavior-powerpc64le-linux-none-Debug 1690 passed 99 skipped 758ms MaxRSS:31M
│  └─ zig test Debug powerpc64le-linux-none cached 12ms MaxRSS:51M
├─ run test behavior-powerpc64le-linux-musl-Debug-libc 1690 passed 99 skipped 542ms MaxRSS:31M
│  └─ zig test Debug powerpc64le-linux-musl cached 9ms MaxRSS:51M
├─ run test behavior-powerpc64le-linux-gnu-Debug-libc skipped
│  └─ zig test Debug powerpc64le-linux-gnu cached 11ms MaxRSS:51M
├─ run test behavior-riscv64-linux-none-Debug 1689 passed 100 skipped 669ms MaxRSS:28M
│  └─ zig test Debug riscv64-linux-none cached 7ms MaxRSS:49M
├─ run test behavior-riscv64-linux-musl-Debug-libc 1689 passed 100 skipped 711ms MaxRSS:30M
│  └─ zig test Debug riscv64-linux-musl cached 7ms MaxRSS:51M
├─ run test behavior-x86_64-macos-none-Debug skipped
│  └─ zig test Debug x86_64-macos-none cached 20s MaxRSS:51M
├─ run test behavior-aarch64-macos-none-Debug skipped
│  └─ zig test Debug aarch64-macos-none cached 7ms MaxRSS:49M
├─ run test behavior-x86-windows-msvc-Debug skipped
│  └─ zig test Debug x86-windows-msvc cached 7ms MaxRSS:50M
├─ run test behavior-x86_64-windows-msvc-Debug skipped
│  └─ zig test Debug x86_64-windows-msvc cached 21s MaxRSS:51M
├─ run test behavior-x86-windows-gnu-Debug-libc skipped
│  └─ zig test Debug x86-windows-gnu cached 7ms MaxRSS:50M
└─ run test behavior-x86_64-windows-gnu-Debug-libc skipped
   └─ zig test Debug x86_64-windows-gnu cached 7ms MaxRSS:52M</code></pre>
    

    <h3 id="Custom-Build-Runners"><a href="#toc-Custom-Build-Runners">Custom Build Runners</a> <a href="#Custom-Build-Runners">§</a></h3>

    <p>
    Zig build scripts are, by default, run by <code>build_runner.zig</code>, a program distributed
    with Zig. In some cases, such as for custom tooling which wishes to observe the step graph, it
    may be useful to override the build runner to a different Zig file. This is now possible using
    the option <code>--build-runner path/to/runner.zig</code>.
    </p>
    

    

    <p><a href="https://github.com/ziglang/zig/pull/14571">Moved the cache system from compiler to std lib and start using it in the build system</a></p>
    

    <h3 id="Steps-Run-In-Parallel"><a href="#toc-Steps-Run-In-Parallel">Steps Run In Parallel</a> <a href="#Steps-Run-In-Parallel">§</a></h3>

    <p>
    The Zig build system is now capable of running multiple build steps in parallel. The build
    runner analyzes the build step graph, and runs steps in a thread pool, with a default thread
    count corresponding to the number of CPU cores available for optimal CPU utilization. The number
    of threads used can be changed with the <code>-j</code> option.
    </p>
    <p>
    This change can allow projects with many build steps to build significantly faster.
    </p>
    

    <h3 id="Embrace-LazyPath-for-Inputs-and-Outputs"><a href="#toc-Embrace-LazyPath-for-Inputs-and-Outputs">Embrace LazyPath for Inputs and Outputs</a> <a href="#Embrace-LazyPath-for-Inputs-and-Outputs">§</a></h3>

    <p>
    The build system contains a type called <code><span>LazyPath</span></code> (formerly
    <code><span>FileSource</span></code>) which allows depending on a file or directory which
    originates from one of many sources: an absolute path, a path relative to the build runner's
    working directory, or a build artifact. The build system now makes extensive use of
    <code><span>LazyPath</span></code> anywhere we reference an arbitrary path.
    </p>
    <p>
    This makes the build system more versatile by making it easier to use generated files in a
    variety of contexts, since a <code><span>LazyPath</span></code> may be created to reference the
    result of any step emitting a file, such as a <code><span>std.Build.Step.Compile</span></code> or
    <code><span>std.Build.Step.Run</span></code>.
    </p>
    <p>
    The most notable change here is that <code><span>Step.Compile</span></code> no longer has an
    <code><span>output_dir</span></code> field. Rather than depending on the location a binary is
    emitted to, the <code><span>LazyPath</span></code> abstraction must be used, for instance through
    <code><span>getEmittedBin</span></code> (formerly <code><span>getOutputSource</span></code>). There
    are also methods to get the paths corresponding to other compilation artifacts:
    </p>
    <ul>
      <li><code><span>Step.Compile.getEmittedBin</span></code></li>
      <li><code><span>Step.Compile.getEmittedImplib</span></code></li>
      <li><code><span>Step.Compile.getEmittedH</span></code></li>
      <li><code><span>Step.Compile.getEmittedPdb</span></code></li>
      <li><code><span>Step.Compile.getEmittedDocs</span></code></li>
      <li><code><span>Step.Compile.getEmittedAsm</span></code></li>
      <li><code><span>Step.Compile.getEmittedLlvmIr</span></code></li>
      <li><code><span>Step.Compile.getEmittedLlvmBc</span></code></li>
    </ul>
    <p>
    Getting these files will cause the build system to automatically set the appropriate compiler
    flags to generate them. As such, the old <code><span>emit_X</span></code> fields have been removed.
    </p>
    <p>
    <code><span>Step.InstallDir</span></code> now uses a <code><span>LazyPath</span></code> for its
    <code><span>source_dir</span></code> field, allowing installing a generated directory without a
    known path. As a general rule, hardcoded paths outside of the installation directory should be
    avoided where possible.
    </p>
    

    <h3 id="System-Resource-Awareness"><a href="#toc-System-Resource-Awareness">System Resource Awareness</a> <a href="#System-Resource-Awareness">§</a></h3>

    <p>You can monitor and limit the peak memory usage for a given step which helps the
    build system avoid scheduling too many intensive tasks simultaneously, and also helps
    you detect when a process is starting to exceed reasonable resource usage.</p>
    

    <h3 id="Foreign-Target-Execution-and-Testing"><a href="#toc-Foreign-Target-Execution-and-Testing">Foreign Target Execution and Testing</a> <a href="#Foreign-Target-Execution-and-Testing">§</a></h3>

    <p>The build system has these switches to enable cross-target testing:</p>
    <pre><code>-fdarling,  -fno-darling     Integration with system-installed Darling to
                               execute macOS programs on Linux hosts
                               (default: no)
  -fqemu,     -fno-qemu        Integration with system-installed QEMU to execute
                               foreign-architecture programs on Linux hosts
                               (default: no)
  --glibc-runtimes [path]      Enhances QEMU integration by providing glibc built
                               for multiple foreign architectures, allowing
                               execution of non-native programs that link with glibc.
  -frosetta,  -fno-rosetta     Rely on Rosetta to execute x86_64 programs on
                               ARM64 macOS hosts. (default: no)
  -fwasmtime, -fno-wasmtime    Integration with system-installed wasmtime to
                               execute WASI binaries. (default: no)
  -fwine,     -fno-wine        Integration with system-installed Wine to execute
                               Windows programs on Linux hosts. (default: no)</code></pre>

    <p>However, there is even tighter integration with the system, if the system is configured
    for it. First, zig will try executing a given binary, without guessing whether the system
    will be able to run it. This takes advantage of binfmt_misc, for example.</p>

    <p>Use <code>skip_foreign_checks</code> if you want to prevent a cross-target failure
    from failing the build.</p>

    <p>This even integrates with the <a href="#Compiler-Protocol">Compiler Protocol</a>, allowing foreign executables
    to communicate metadata back to the build runner.</p>
    

    <h3 id="Configuration-File-Generation"><a href="#toc-Configuration-File-Generation">Configuration File Generation</a> <a href="#Configuration-File-Generation">§</a></h3>

    <p>The build system has API to help you create C configuration header files
    from common formats, such as automake and CMake.</p>
    

    <h3 id="Run-Step-Enhancements"><a href="#toc-Run-Step-Enhancements">Run Step Enhancements</a> <a href="#Run-Step-Enhancements">§</a></h3>

    <p>It is recommended to generally use Run steps instead of custom steps because
    it will properly integrate with the <a href="#Cache-System">Cache System</a>.</p>
    <p>Added prefixed versions of addFileSource and addDirectorySource to Step.Run</p>
    <p>Changed Step.Run's stdin to accept LazyPath (<a href="https://github.com/ziglang/zig/issues/16358">#16358</a>).</p>

    

    <h3 id="addTest-No-Longer-Runs-It"><a href="#toc-addTest-No-Longer-Runs-It">addTest No Longer Runs It</a> <a href="#addTest-No-Longer-Runs-It">§</a></h3>

    <p>Before, addTest created and ran a test. Now you need to use b.runArtifact to
    run your test executable.</p>
    
    

    <h2 id="Compiler"><a href="#toc-Compiler">Compiler</a> <a href="#Compiler">§</a></h2>

    <p><img alt="Zero the Ziguana" src="https://ziglang.org/img/Zero_2.svg"></p><ul>
    <li>Ensure f128 alignment matches c_longdouble alignment.</li>
    <li><a href="https://github.com/ziglang/zig/issues?q=is%3Aclosed+is%3Aissue+label%3A%22error+message%22+milestone%3A0.11.0+">Many compile error messages were improved to be more helpful</a>.</li>
    <li>Implement packed unions (<a href="https://github.com/ziglang/zig/issues/13340">#13340</a>).</li>
    <li>Support modifiers in inline asm. These are supported using
      <code>%[ident:mod]</code> syntax. This allows requesting, e.g., the "w" (32-bit) vs. "x"
      (64-bit) views of AArch64 registers.</li>
    <li>Fix error reporting the wrong line for struct field inits (<a href="https://github.com/ziglang/zig/issues/13502">#13502</a>).</li>
    <li>zig-cache: support windows drive + fwd-slash paths (<a href="https://github.com/ziglang/zig/issues/13539">#13539</a>).</li>
    <li>Added Valgrind client request support for aarch64 (<a href="https://github.com/ziglang/zig/issues/13292">#13292</a>).</li>
    <li>Added detection of duplicate enum tag values.</li>
    <li>Added a helpful note when using <code><span>**</span></code> on number types (<a href="https://github.com/ziglang/zig/issues/13871">#13871</a>).</li>
    <li>Fixed packed vectors regression from 0.10.0 (<a href="https://github.com/ziglang/zig/issues/12812">#12812</a>) (<a href="https://github.com/ziglang/zig/issues/13925">#13925</a>).</li>
    <li>Fixed lowering a string literal converted to vector (<a href="https://github.com/ziglang/zig/issues/13897">#13897</a>).</li>
    <li>Fixed taking the address of a field in a zero-bit struct (<a href="https://github.com/ziglang/zig/issues/14000">#14000</a>).</li>
    <li>Handle vectors in packed structs (<a href="https://github.com/ziglang/zig/issues/14004">#14004</a>).</li>
    <li>Fixed <code><span><span>@export</span></span></code> with <code><span><span>linksection</span></span></code> option (<a href="https://github.com/ziglang/zig/issues/14035">#14035</a>). </li>
    <li>Fixed cache-dir specified on the command line (<a href="https://github.com/ziglang/zig/issues/14076">#14076</a>).</li>
    <li>Fixed some spurious "depends on itself" errors (<a href="https://github.com/ziglang/zig/issues/14159">#14159</a>).</li>
    <li>Added <code>-fopt-bisect-limit</code> for debugging <a href="#LLVM-Backend">LLVM Backend</a> miscompilations (<a href="https://github.com/ziglang/zig/issues/13826">#13826</a>).</li>
    <li>Expose an option for producing 64-bit DWARF info (<a href="https://github.com/ziglang/zig/issues/15193">#15193</a>).</li>
    <li>Added missing compile error for coercing a slice to an anyopaque pointer.</li>
    <li>Added missing compile error for always_inline call of noinline function (<a href="https://github.com/ziglang/zig/issues/15503">#15503</a>).</li>
    <li>Add support for <code>--build-id</code> styles (<a href="https://github.com/ziglang/zig/issues/15459">#15459</a>).</li>
    <li>Deduplicate uses of the same package across dependencies (<a href="https://github.com/ziglang/zig/issues/15755">#15755</a>).</li>
    <li>Added runtime safety for noreturn function returning (<a href="https://github.com/ziglang/zig/issues/15235">#15235</a>).</li>
    <li>Added support for multiple global asm blocks per decl (<a href="https://github.com/ziglang/zig/issues/16076">#16076</a>).</li>
    <li>Fixed auto-numbered enums with signed tag types (<a href="https://github.com/ziglang/zig/issues/16095">#16095</a>).</li>
    <li>Fixed <code><span><span>usize</span></span></code> type inference in <code><span><span>for</span></span></code> range start and end (<a href="https://github.com/ziglang/zig/issues/16311">#16311</a>).</li>
    <li>Fixed wrong error location for <code><span><span>@unionInit</span></span></code> when first parameter is not a type (<a href="https://github.com/ziglang/zig/issues/16384">#16384</a>).</li>
    <li>Include system headers path when compiling preprocessed assembly files (<a href="https://github.com/ziglang/zig/issues/16449">#16449</a>).</li>
    <li>Add framework path detection for NIX_CFLAGS_COMPILE.</li>
    <li>rpaths work differently</li>
    <li>Implemented <code>writeToMemory</code>/<code>readFromMemory</code> for pointers, optionals, and packed unions.</li>
    <li>Fixed <code><span><span>@embedFile</span>(<span>""</span>)</span></code> not giving a proper error (<a href="https://github.com/ziglang/zig/issues/16480">#16480</a>).</li>
    <li>Implemented <code><span><span>@export</span></span></code> for arbitrary values.</li>
    <li><code><span><span>@extern</span></span></code> fixes.</li>
    <li>CLI: detect linker color diagnostics flags</li>
    <li>CLI: stop special-casing LLVM, LLD, and Clang</li>
    <li>CLI: Added --verbose-generic-instances to provide visibility on the number of generic function instantiations</li>
    <li>Added error for bad cast from <code><span>*T</span></code> to <code><span>*[n]T</span></code>
    </li><li>Added -ferror-tracing and -fno-error-tracing compile options</li>
    <li>build: add -Dpie option</li>
    <li>Implemented inline switch capture at comptime (<a href="https://github.com/ziglang/zig/issues/15157">#15157</a>).</li>
    <li>correctly detect use of undefined within slices in <code><span><span>@Type</span></span></code> (<a href="https://github.com/ziglang/zig/issues/14712">#14712</a>)</li>
    <li>Emit compile error for comptime or inline call of function pointer.</li>
    <li>Improved error message when calling non-member function as method (<a href="https://github.com/ziglang/zig/issues/14880">#14880</a>).</li>
    <li>Fixed crash on callconv(.C) generic return type (<a href="https://github.com/ziglang/zig/issues/14854">#14854</a>).</li>
    <li>Allow comptime mutation of multiple array elements.</li>
    <li>Fixed discarding of result location in <code><span><span>for</span></span></code>/<code><span><span>while</span></span></code> loops (<a href="https://github.com/ziglang/zig/issues/14684">#14684</a>).</li>
    <li>Added compile-error on primitive value export (<a href="https://github.com/ziglang/zig/issues/14778">#14778</a>)</li>
    <li>Fixed some builtin functions not returning <code><span><span>void</span></span></code> (<a href="https://github.com/ziglang/zig/issues/14779">#14779</a>)</li>
    <li>Fixed miscompilation: Error propagates with <code><span><span>return</span> x()</span></code> but not with <code><span><span>return</span> <span>try</span> x()</span></code> inside recursion (<a href="https://github.com/ziglang/zig/issues/15669">#15669</a>).</li>
    <li>fix potential integer underflow in std.zig.Ast.fullCall</li>
    <li>std.zig.Ast: add helper functions to std.zig.Ast for extracting data out of nodes</li>
    <li>std.zig.Ast.parse: fix integer overflows during parsing, found while fuzzing zls.</li>
    <li>std: replace parseAppend with parseWrite in std.zig.string_literal</li>
    <li>std.zig.number_literal; Fix parsing of hexadecimal literals</li>
    </ul>

    <h3 id="Performance"><a href="#toc-Performance">Performance</a> <a href="#Performance">§</a></h3>

    <p>During this release cycle we worked towards <a href="#Incremental-Compilation">Incremental Compilation</a> and linking,
      but it is not ready to be enabled yet. We also worked towards <a href="#Code-Generation">Code Generation</a>
      backends that compete with the <a href="#LLVM-Backend">LLVM Backend</a> instead of depending on it,
      but those are also not ready to be enabled by default yet.</p>
    <p>Those two efforts will yield drastic results. However, even without those done,
      this release of the compiler is generally expected to be a little bit faster and 
      use a little bit less memory than 0.10.x releases.</p>
    <p>Here are some performance data points, 0.10.1 vs this release:</p>
    <ul>
      <li><code>zig build-exe</code> on
        <a href="https://github.com/andrewrk/tetris">this Tetris demo</a>: 14.5% ±  2.7% faster wall clock time, 7.6% ±  0.2% fewer bytes of peak memory usage (x86_64-linux, baseline).</li>
      <li><code>zig build-exe</code> on
        <a href="https://ziggit.dev/t/can-anyone-provide-compilation-speed-comparisons-for-their-project-0-10-1-to-0-11-x-dev-version/1241/4?u=andrewrk">someone's Advent-of-Code project</a>: 6.3% slower wall clock time, 8.7% more bytes of peak memory usage</li>
    </ul>
    <p>Note that the compiler is doing more work in 0.11.0 for most builds
    (including "Hello, World!") due to the <a href="#Standard-Library">Standard Library</a> having more advanced
    <a href="#Debugging">Debugging</a> capabilities, such as <a href="#Stack-Unwinding">Stack Unwinding</a>. The long-term
    plan to address this is <a href="#Incremental-Compilation">Incremental Compilation</a>.</p>
    

    <h3 id="Bootstrapping"><a href="#toc-Bootstrapping">Bootstrapping</a> <a href="#Bootstrapping">§</a></h3>

    <p>During this release cycle, the C++ implementation of Zig was <em>deleted</em>.
    The <code>-fstage1</code> flag is no longer a recognized command-line parameter.</p>
    <p>Zig is now bootstrapped using a 2.4 MiB <a href="#WebAssembly">WebAssembly</a>
    file and a C compiler. Please enjoy this blog post which goes into the details:
    <a href="https://ziglang.org/news/goodbye-cpp/">Goodbye to the C++ Implementation of Zig</a>
    </p>
    <p>Thanks to improvements to the <a href="#C-Backend">C Backend</a>, it is now possible to bootstrap
      on <a href="#Windows">Windows</a> using MSVC.</p>
    <p>Also fixed: bootstrapping the compiler on <a href="#ARM">ARM</a> and on mingw.</p>
    <p>The logic for detecting MSVC installations on <a href="#Windows">Windows</a> has been ported
    from C++ to Zig (<a href="https://github.com/ziglang/zig/issues/15657">#15657</a>). That was the last C++ source file; the compiler
    is now 100% Zig code, except for <a href="#LLVM-16">LLVM</a> libraries.</p>
    


    <h3 id="Reproducible-Builds"><a href="#toc-Reproducible-Builds">Reproducible Builds</a> <a href="#Reproducible-Builds">§</a></h3>

    <p>According to Zig's
    <a href="https://ziglang.org/documentation/0.11.0/#Build-Mode">build modes documentation</a>:
    </p>
    <ul>
      <li><code>-ODebug/</code> is not required to be reproducible (building the same zig source may output a different, semantically equivalent, binary)</li>
      <li><code>-OReleaseSafe</code>, <code>-OReleaseSmall</code> and <code>-OReleaseFast</code>
        are all required to be reproducible (building the same zig source outputs a
        deterministic binary)</li>
    </ul>
      <p>Terminology:</p>
      <ul>
        <li><strong>stage1</strong> is the compiler implementation in <code>src/stage1/*</code>, compiled with system toolchain</li>
        <li><strong>stage2</strong> is the compiler implementation in <code>src/*.zig</code>, compiled with stage1.</li>
        <li><strong>stage3</strong> is the compiler implementation in <code>src/*.zig</code>, compiled with stage2.</li>
        <li><strong>stage4</strong> is the compiler implementation in <code>src/*.zig</code>, compiled with stage3.</li>
      </ul>
      <p>
      In theory, stage3 and stage4 should be byte-for-byte identical when
      compiled in release mode. In practice, this was not true. However, this
      has been fixed in this release. They now produce byte-for-byte identical
      executable files.</p>
      <p>This property is verified by CI checks for these targets:</p>
      <ul>
        <li>x86-64 Linux</li>
        <li>aarch64 macOS</li>
      </ul>
    

    <h3 id="C-ABI-Compatibility"><a href="#toc-C-ABI-Compatibility">C ABI Compatibility</a> <a href="#C-ABI-Compatibility">§</a></h3>

    <ul>
      <li>Fixed C ABI compatibility with C <code>double</code> types and add a lot of new
          test coverage for them (<a href="https://github.com/ziglang/zig/issues/13376">#13376</a>).</li>
      <li>Fixed x86_64 sysV ABI of big vectors on avx512 enabled CPUs in the <a href="#LLVM-Backend">LLVM Backend</a> (<a href="https://github.com/ziglang/zig/issues/13629">#13629</a>).</li>
      <li>Fixed some floating-point issues (<a href="https://github.com/ziglang/zig/issues/14271">#14271</a>).</li>
      <li>Various fixes (<a href="https://github.com/ziglang/zig/issues/16593">#16593</a>).</li>
    </ul>
    <p>To get a sense of Zig's C ABI compatibility, have a look at the
    <a href="https://github.com/ziglang/zig/blob/0.11.0/test/tests.zig#L460-L517">target coverage</a>
    and
    <a href="https://github.com/ziglang/zig/tree/0.11.0/test/c_abi">test cases</a>.
    </p>
    

    <h3 id="C-Translation"><a href="#toc-C-Translation">C Translation</a> <a href="#C-Translation">§</a></h3>

    <ul>
      <li>Remainder macro fix (<a href="https://github.com/ziglang/zig/issues/13371">#13371</a>).</li>
      <li>Use .identifier tokens in .identifier AST nodes (<a href="https://github.com/ziglang/zig/issues/13343">#13343</a>).</li>
      <li>Cast unsuffixed floats to f64.</li>
      <li>Handle more wrapper types in <code>isAnyopaque</code>.</li>
      <li>Support brace-enclosed string initializers (c++20 9.4.2.1).</li>
      <li>Fixed codegen when C source has variables named the same as mangling prefixes (<a href="https://github.com/ziglang/zig/issues/15420">#15420</a>).</li>
      <li>Deduplicate global declarations (<a href="https://github.com/ziglang/zig/issues/15456">#15456</a>).</li>
      <li>Use <code><span><span>@constCast</span></span></code> and <code><span><span>@volatileCast</span></span></code> to remove CV-qualifiers instead of converting a pointer to an int and then back to a pointer.</li>
      <li>Fixed types on assign expression bool</li>
      <li>fixed typedeffed pointer subtraction (<a href="https://github.com/ziglang/zig/issues/14560">#14560</a>)</li>
      <li>translate extern unknown-length arrays using @extern (<a href="https://github.com/ziglang/zig/issues/14743">#14743</a>).</li>
    </ul>
    

    <h3 id="Cache-System"><a href="#toc-Cache-System">Cache System</a> <a href="#Cache-System">§</a></h3>

    <ul>
      <li>Fixed zir caching race condition and deadlock (<a href="https://github.com/ziglang/zig/issues/14821">#14821</a>).</li>
      <li>Introduced prefixes to manifests (<a href="https://github.com/ziglang/zig/issues/13596">#13596</a>).</li>
      <li>Fixed LockViolation during C compilation paths (<a href="https://github.com/ziglang/zig/issues/13591">#13591</a>).</li>
      <li>glibc: avoid poisoning the cache namespace with zig lib dir (<a href="https://github.com/ziglang/zig/issues/13619">#13619</a>).</li>
      <li>Fixed another LockViolation case on <a href="#Windows">Windows</a> (<a href="https://github.com/ziglang/zig/issues/14162">#14162</a>).</li>
      <li>Fixed multi-process race condition on <a href="#macOS">macOS</a>.</li>
      <li>Retry ZIR cache file creation. There are no dir components, so you would think that ENOENT was unreachable, however we have observed on macOS two processes racing to do openat() with O_CREAT manifest in ENOENT (<a href="https://github.com/ziglang/zig/issues/12138">#12138</a>).</li>
    </ul>
    

    <h3 id="Code-Generation"><a href="#toc-Code-Generation">Code Generation</a> <a href="#Code-Generation">§</a></h3>


    <p>
    The Zig compiler has several code backends. The primary one in usage today is the LLVM backend,
    which emits LLVM IR in order to emit highly optimized binaries. However, this release cycle also
    saw major improvements to many of our "self-hosted" backends, most notably the
    <a href="#x86-Backend">x86 Backend</a> which is now passing the vast majority of behavior tests. Improvements to
    these backends is key to reaching the goal of <a href="#Incremental-Compilation">Incremental Compilation</a>.
    </p>

    <h4 id="LLVM-Backend"><a href="#toc-LLVM-Backend">LLVM Backend</a> <a href="#LLVM-Backend">§</a></h4>

    <ul>
      <li>Mangle extern function names for Wasm target (<a href="https://github.com/ziglang/zig/issues/13396">#13396</a>).</li>
      <li>Improved emitted debug info (<a href="https://github.com/ziglang/zig/issues/12257">#12257</a>) (<a href="https://github.com/ziglang/zig/issues/12665">#12665</a>) (<a href="https://github.com/ziglang/zig/issues/13719">#13719</a>) (<a href="https://github.com/ziglang/zig/issues/14130">#14130</a>) (<a href="https://github.com/ziglang/zig/issues/15349">#15349</a>).</li>
      <li>Improved load elision (<a href="https://github.com/ziglang/zig/issues/12215">#12215</a>).</li>
      <li>Fixed f16, f32, and f64 signaled NaN bitcasts (<a href="https://github.com/ziglang/zig/issues/14198">#14198</a>).</li>
      <li>Implement Stdcall calling convention.</li>
      <li>Optimize access of array member in a structure.</li>
      <li>Stop generating FPU code if there is no FPU (<a href="https://github.com/ziglang/zig/issues/14465">#14465</a>).</li>
      <li>Began work on eliminating dependency on LLVM's IRBuilder API (<a href="https://github.com/ziglang/zig/issues/13265">#13265</a>).</li>
      <li>Support read-write output constraints in assembly (<a href="https://github.com/ziglang/zig/issues/15227">#15227</a>).</li>
    </ul>
    

    <h4 id="C-Backend"><a href="#toc-C-Backend">C Backend</a> <a href="#C-Backend">§</a></h4>

    <p>
    Now passing <strong>1652/1679 (98%)</strong> of the behavior tests, compared to the
    <a href="#LLVM-Backend">LLVM Backend</a>.
    </p>
    <p>The generated C code is now MSVC-compatible.</p>
    <p>This backend is now used for <a href="#Bootstrapping">Bootstrapping</a> and is
    no longer considered <strong>experimental</strong>.</p>
    <p>It has seen some optimizations to reduce the size of the outputted C code, such
    as reusing locals where possible. However, there are still many more optimizations that
    could be done to further reduce the size of the outputted C code.</p>
    

    <h4 id="x86-Backend"><a href="#toc-x86-Backend">x86 Backend</a> <a href="#x86-Backend">§</a></h4>

    <p>Although the x86 backend is still considered <strong>experimental</strong>, it
    is now passing <strong>1474/1679 (88%)</strong> of the behavior tests,
    compared to the <a href="#LLVM-Backend">LLVM Backend</a>.</p>
    <ul>
    <li>add <a href="#DWARF">DWARF</a> encoding for SIMD registers</li>
    <li>introduce table-drive instruction encoder based on <a href="https://github.com/kubkon/zig-dis-x86_64"><code>zig-dis-x86_64</code></a></li>
    <li>add basic Thread-Local Storage support when targeting <a href="#MachO">MachO</a></li>
    </ul>
    

    <h4 id="WebAssembly-Backend"><a href="#toc-WebAssembly-Backend">WebAssembly Backend</a> <a href="#WebAssembly-Backend">§</a></h4>

    <p>This release did not see many user-facing features added to the
    WebAssembly backend. A few notable features are:</p>
    <ul>
      <li>atomics</li>
      <li>packed structs</li>
      <li>initial SIMD support</li>
      <li>Several safety-checks</li>
    </ul>
    <p>
Besides those language features, the WebAssembly backend now also uses the
regular <code>start.zig</code> logic as well as the standard test-runner. This is a big
step as the default test-runner logic uses a client-server architecture,
requiring a lot of the language to be implemented for it to work. This will
also help us further with completing the WebAssembly backend as the test-runner
provides us with more details about which test failed.
    </p>
    <p>
    Lastly, a lot of bugs and miscompilations were fixed, passing more behavior tests.
    Although the WebAssembly backend is still considered
    <strong>experimental</strong>, it is now passing <strong>1428/1657
    (86%)</strong> of the behavior tests, compared to the <a href="#LLVM-Backend">LLVM Backend</a>.</p>
    

    <h4 id="SPIR-V-Backend"><a href="#toc-SPIR-V-Backend">SPIR-V Backend</a> <a href="#SPIR-V-Backend">§</a></h4>

    <p><a href="https://github.com/Snektron/">Robin "Snektron" Voetter</a> writes:</p>
  <p>This release cycle saw significant improvement of the self-hosted SPIR-V backend. SPIR-V is a bytecode representation for shaders and kernels that run on GPUs. For now, the SPIR-V backend of Zig is focused on generating code for OpenCL kernels, though Vulkan compatible shaders may see support in the future too.</p>
  <p>The main contributions in this release cycle feature a crude assembler for SPIR-V inline assembly, which is useful for supporting fringe types and operations, and other features from SPIR-V that do not expose itself well from within Zig.</p>
  <p>The backend also saw improvements to codegen, and is now able to compile and execute about 37% of the compiler behavior test suite on select OpenCL implementations. Unfortunately this does not yet include Rusticl, which is currently missing a few features that the Zig SPIR-V backend requires.</p>
  <p>Currently, executing SPIR-V tests requires third-party implementations of the test runner and test executor. In the future, these will be integrated further with Zig.</p>
    

    <h4 id="aarch64-Backend"><a href="#toc-aarch64-Backend">aarch64 Backend</a> <a href="#aarch64-Backend">§</a></h4>

    <p>During this release cycle, some progress was made on this
    <strong>experimental</strong> backend, but there is nothing user-facing to
    report. It has not yet graduated beyond the <strong>simplified start
    code</strong> routines, so we have no behavior test percentage to report.</p>
    
    

    <h3 id="Error-Return-Tracing"><a href="#toc-Error-Return-Tracing">Error Return Tracing</a> <a href="#Error-Return-Tracing">§</a></h3>

    <p>
    This release cycle sees minor improvements to error return traces. These traces are created by
    Zig for binaries built in safe release modes, and report the source of an error which was not
    correctly handled where a simple stack trace would be less useful.
    </p>
    <p>
    A bug involving
    <a href="https://github.com/ziglang/zig/issues/13618">incorrect frames from loop bodies
    appearing in traces</a> has been fixed. The following test case now gives a correct error return
    trace:
    </p>
    <figure><figcaption><cite>loop_continue_error_trace.zig</cite></figcaption><pre><code><span><span>fn</span> <span>foo</span>() !<span>void</span> {</span>
<span>    <span>return</span> <span>error</span>.UhOh; <span>// this should not appear in the trace</span></span>
<span>}</span>
<span></span>
<span><span>pub</span> <span>fn</span> <span>main</span>() !<span>void</span> {</span>
<span>    <span>var</span> i: <span>usize</span> = <span>0</span>;</span>
<span>    <span>while</span> (i &lt; <span>3</span>) : (i += <span>1</span>) {</span>
<span>        foo() <span>catch</span> <span>continue</span>;</span>
<span>    }</span>
<span>    <span>return</span> <span>error</span>.UnrelatedError;</span>
<span>}</span></code></pre></figure><figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig build-exe loop_continue_error_trace.zig</kbd>
$ <kbd>./loop_continue_error_trace</kbd>
error: UnrelatedError
<span>/home/andy/tmp/docgen_tmp/loop_continue_error_trace.zig:10:5</span>: <span>0x21e375 in main (loop_continue_error_trace)</span>
    return error.UnrelatedError;
    <span>^</span>
</samp></pre></figure>
    

    <h3 id="Safety-Checks"><a href="#toc-Safety-Checks">Safety Checks</a> <a href="#Safety-Checks">§</a></h3>

    <ul>
    <li>Safety panic improvements and some bug fixes (<a href="https://github.com/ziglang/zig/issues/13693">#13693</a>).</li>
    <li>compiler: start moving safety-checks into backends for <a href="#Performance">Performance</a> (<a href="https://github.com/ziglang/zig/issues/16190">#16190</a>).</li>
    </ul>
    

    <h3 id="Struct-Field-Order"><a href="#toc-Struct-Field-Order">Struct Field Order</a> <a href="#Struct-Field-Order">§</a></h3>

    <p>Automatically optimize order of struct fields (<a href="https://github.com/ziglang/zig/issues/14336">#14336</a>)</p>
    

    <h3 id="Incremental-Compilation"><a href="#toc-Incremental-Compilation">Incremental Compilation</a> <a href="#Incremental-Compilation">§</a></h3>

    <p>
    While still a highly WIP feature, this release cycle saw many improvements paving the way to
    incremental compilation capabilities in the compiler. One of the most significant was the
    <a href="https://github.com/ziglang/zig/pull/15569">InternPool changeset</a>. This change is
    mostly invisible to Zig users, but brings many benefits to the compiler, amongst them being that
    we are now much closer to incremental compilation. This is because this changeset brings new
    in-memory representations to many internal compiler datastructures (most notably types and
    values) which are trivially serializable to disk, a requirement for incremental compilation.
    </p>
    <p>
    This release additionally saw big improvements to Zig's native code generation and linkers, as
    well as beginning to move to emitting LLVM bitcode manually. The former will unlock extremely
    fast incremental compilations, and the latter is necessary for incremental compilation to work
    on the LLVM backend.
    </p>
    <p>
    Incremental compilation will be a key focus of the 0.12.0 release cycle. The path to incremental
    compilation will roughly consist of the following steps:
    </p>
    <ul>
      <li>Improve the representation of some internal compiler datastructures (comptime-mutable memory and declarations)</li>
      <li>Implement improved dependency graph analysis, to avoid incorrect compile errors whilst keeping incremental updates as small as possible</li>
      <li>Get the self-hosted <a href="#Code-Generation">Code Generation</a> backends and linkers into a usable state (the x86 backend is already passing most behavior tests!)</li>
      <li>Implement serialization to cache for key compiler datastructures</li>
      <li>Enable and fuzz-test incremental compilation to catch bugs</li>
    </ul>
    <p>While no guarantees can be made, it is possible that a basic form of incremental compilation
    will be usable in 0.12.0.</p>
    

    <h3 id="New-Module-CLI"><a href="#toc-New-Module-CLI">New Module CLI</a> <a href="#New-Module-CLI">§</a></h3>

    <p>
    The method for specifying modules on the CLI has been changed to support recursive module
    dependencies and shared dependencies. Previously, the <code>--pkg-begin</code> and
    <code>--pkg-end</code> options were used to define modules in a "hierarchical" manner, nesting
    dependencies inside their parent. This system was not compatible with shared dependencies or
    recursive dependencies.
    </p>
    <p>
    Modules are now specified using the <code>--mod</code> and <code>--deps</code> options, which
    have the following syntax:
    </p>
    <figure><figcaption>Shell</figcaption><pre><samp>--mod [name]:[deps]:[src] Make a module available for dependency under the given name
      deps: [dep],[dep],...
      dep:  [[import=]name]
  --deps [dep],[dep],...    Set dependency names for the root package
      dep:  [[import=]name]
</samp></pre></figure>
    <p>
    <code>--mod</code> defines a module with a given name, dependency list, and root source file.
    <code>--deps</code> specifies the list of dependencies of the main module. These options are not
    order-dependant. This defines modules in a "flat" manner, and specifies dependencies indirectly,
    allowing dependency loops and shared dependencies. The name of a dependency can optionally be
    overriden from the "default" name in the dependency string.
    </p>
    <p>
    For instance, the following <code>zig build-exe</code> invocation defines two modules,
    <code>foo</code> and <code>bar</code>. <code>foo</code> depends on <code>bar</code> under the
    name <code>bar1</code>, <code>bar</code> depends on itself (under the default name
    <code>bar</code>), and the main module depends on both <code>foo</code> and <code>bar</code>.
    </p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig build-exe main.zig --mod foo:bar1=bar:foo.zig --mod bar:bar:bar.zig --deps foo,bar</kbd>
</samp></pre></figure>
    <p>
    The <a href="#Build-System">Build System</a> supports creating module dependency loops by manually modifying the
    <code>dependencies</code> of a <code>std.Build.Module</code>. Note that this API (and the CLI
    invocation) is likely to undergo further changes in the future.</p>
    
    

    <h2 id="Linker"><a href="#toc-Linker">Linker</a> <a href="#Linker">§</a></h2>

    <p>
    Depending on the target, Zig will use <a href="#LLVM-16">LLD</a>, or its own
    linker implementation. In order to override the default, pass <code>-fLLD</code>
    or <code>-fno-LLD</code>.
    </p>
    <ul>
    <li>decouple <code>Decl</code> from <code>Atom</code> - now every linker is free to track <code>Decl</code> however they like; the (in)famous change
    that removed the dreaded <code>link.File.allocateDeclIndexes</code> function</li>
    <li>handle <code>-u</code> flag</li>
    <li>Elf: switch link order of libcompiler_rt and libc (<a href="https://github.com/ziglang/zig/issues/13971">#13971</a>).</li>
    </ul>

    <h3 id="MachO"><a href="#toc-MachO">MachO</a> <a href="#MachO">§</a></h3>

    <p><img alt="Ziggy the Ziguana" src="https://ziglang.org/img/Ziggy_2.svg"></p><ul>
<li>fix bug where we do not zero-out file if there are only zerofill sections</li>
<li>parse weak symbols in TBD files - emitting weak import definitions is still unimplemented however</li>
<li>improve parsing of DWARF debug info including <code>DW_FORM_block*</code> and <code>DW_FORM_string</code> forms</li>
<li>when linking incrementally, creating <code>dSYM</code> bundle directly in the emit directory rather than local cache</li>
<li>ensure <code>__DWARF</code> segment comes before <code>__LINKEDIT</code> in <code>dSYM</code> bundle which greatly simplifies incremental linking
of debug info on macOS</li>
<li>impl parallel MD5-like hash for UUID calculation - by pulling out the parallel hashing setup from 
<code>CodeSignature.zig</code>, we can now reuse it different places across MachO linker. The parallel hasher is generic 
over actual hasher such as Sha256 or MD5.</li>
<li>fix source of nondeterminism in code signature - identifier string in code signature should be just basename</li>
<li>add missing clang options: <code>-install_name</code> and <code>-undefined</code></li>
<li>handle <code>-undefined error</code> flag</li>
<li>add strict MachO validation test with test matrix pulled from Apple's <code>libstuff</code> library - ensures we catch 
regression which may invalidate the binary when inspected by Apple tooling such as <code>codesign</code>, etc.</li>
<li>improve <code>dyld</code> opcodes emitters - we now generate vastly compressed opcodes for the loader reducing overall binary
size and improve loading times</li>
<li>parse, synthesise and emit unwind information records - includes emitting <code>__TEXT,__unwind_info</code> and <code>__TEXT,
__eh_frame</code> sections making Zig linked binaries compatible with <code>libunwind</code></li>
<li>downgrade alignment requirements for symtab in object files, and especially object files in static archives - 
instead of requiring 8-byte alignment, we operate directly on unaligned data now</li>
<li>move macOS kernel inode cache invalidation to the MachO linker, and clean up opening/closing of file descriptors
ensuring we don't leak any file descriptors by accident</li>
<li>relax assumption about dead strip atoms uniqueness - in case the compiler output an object file that is not 
<code>MH_SUBSECTIONS_VIA_SYMBOLS</code> compatible, entry point may overlap with a section atom which is perfectly fine, 
so don't panic in that case</li>
<li>use <code>TOOL=0x5</code> to mean Zig as the build tool in <code>LC_BUILD_VERSION</code></li>
<li>save all defined globals in the export trie for executable - this matches the behavior of other linkers</li>
<li>when finding by address, note the end of section symbols too - previously, if we were looking for the very last 
symbol by address in some section, and the next symbol happened to also have the same address value but would 
reside in a different section, we would keep going finding the wrong symbol in the wrong section. This mechanism 
turns out vital for correct linking of Go binaries where the runtime looks for specially crafted synthetic symbols 
which mark the beginning and end of each section. In this case, we had an unfortunate clash between the end of PC 
marked machine code section (<code>_runtime.etext</code>) and beginning of read-only data (<code>_runtime.rodata</code>).</li>
<li>look for entry point in static archives and dynamic libraries</li>
<li>handle weird case of entry point being a stub entry (<code>__TEXT,__stubs</code> entry)</li>
<li>implement emitting TLS variables in incremental codepath</li>
<li>fix memory bugs in TAPI/yaml parser</li>
<li>fix parsing of <code>__TEXT,__eh_frame</code> sections emitted by Nix C++ compiler</li>
<li>fix parsing of TBDv3 input files</li>
<li>implement working hot-code swapping PoC</li>
</ul>
    

    <h3 id="COFF"><a href="#toc-COFF">COFF</a> <a href="#COFF">§</a></h3>

    <ul>
    <li>handle incremental linking of <code>aarch64-windows</code> target</li>
    <li>handle linking and loading against multiple DLLs</li>
    <li>implement working hot-code swapping PoC</li>
    </ul>
    

    <h3 id="ELF"><a href="#toc-ELF">ELF</a> <a href="#ELF">§</a></h3>

    <ul>
      <li>rename <code>TextBlock</code> into <code>Atom</code></li>
      <li>move logic for allocating a GOT entry into a helper</li>
      <li>fully zero-out ELF symbol record when appending to freelist - avoids uninitialized data in the output ELF file</li>
      <li>do not reserve a GOT slot for atoms that won't require them</li>
    </ul>
    

    <h3 id="WASM-Modules"><a href="#toc-WASM-Modules">WASM Modules</a> <a href="#WASM-Modules">§</a></h3>

    <p><a href="https://github.com/Luukdegram">Luuk de Gram</a> writes:</p>
    <p>During this release, a lot of work has gone into the in-house WebAssembly
    linker. The biggest feature it gained was the support of the <code>shared
    memory</code> feature. This allows multiple WebAssembly modules to access the
    same memory. This feature opens support for multi-threading in WebAssembly.
    This also required us to implement support for Thread-Local Storage. The linker is now fully
    capable of linking with <a href="#WASI-libc">WASI-libc</a>, also. Users can now make use of the in-house
    linker by supplying the <code>-fno-LLD</code> flag to your <code>zig
    build-{lib/exe}</code> CLI invocation.</p>

    <p>We are closer than ever to replace LLVM's linker wasm-ld with our
    in-house linker. The last feature to implement for statically built
    WebAssembly modules is garbage collection. This ensures unreferenced
    symbols get removed from the final binary keeping the binaries small in
    disk size. Once implemented, we can make the in-house linker the default
    linker when builing a WebAssembly module and gather feedback and fix any
    bugs that haven't been found yet. We can then start working on other
    features such as dynamic-linking support and any future proposals.</p>

    <p>Additionally:</p>
    <ul>
      <li>emit build_id section (<a href="https://github.com/ziglang/zig/issues/14820">#14820</a>)</li>
    </ul>
    

    <h3 id="DWARF"><a href="#toc-DWARF">DWARF</a> <a href="#DWARF">§</a></h3>

    <ul>
    <li>add support for multiple source files in self-hosted backends - this means we emit correct debug info for multifile
    Zig programs such as <code>zig test behavior.zig</code> and is now debuggable in a debugger</li>
    <li>decouple <code>Dwarf.Atom</code> from linkers' <code>Atom</code>s</li>
    </ul>
    

    <h3 id="Move-Library-Path-Resolution-to-the-Frontend"><a href="#toc-Move-Library-Path-Resolution-to-the-Frontend">Move Library Path Resolution to the Frontend</a> <a href="#Move-Library-Path-Resolution-to-the-Frontend">§</a></h3>

    <p>
    Library path resolution is now handled by the Zig frontend rather than the linker (LLD). Some
    compiler flags are introduced to control this behavior.
    </p>
    <figure><figcaption>Shell</figcaption><pre><samp>-search_paths_first            For each library search path, check for dynamic
                               lib then static lib before proceeding to next path.
-search_paths_first_static     For each library search path, check for static
                               lib then dynamic lib before proceeding to next path.
-search_dylibs_first           Search for dynamic libs in all library search
                               paths, then static libs.
-search_static_first           Search for static libs in all library search
                               paths, then dynamic libs.
-search_dylibs_only            Only search for dynamic libs.
-search_static_only            Only search for static libs.
</samp></pre></figure>
    <p>
    These arguments are stateful: they affect all subsequent libraries linked by name, such as by
    the flags <code>-l</code>, <code>-weak-l</code>, and <code>-needed-l</code>.
    </p>
    <p>
    Error reporting for failure to find a system library is improved:
    </p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig build-exe test.zig -lfoo -L. -L/a -target x86_64-macos --sysroot /home/andy/local</kbd>
error: unable to find Dynamic system library 'foo' using strategy 'paths_first'. searched paths:
  ./libfoo.tbd
  ./libfoo.dylib
  ./libfoo.so
  ./libfoo.a
  /home/andy/local/a/libfoo.tbd
  /home/andy/local/a/libfoo.dylib
  /home/andy/local/a/libfoo.so
  /home/andy/local/a/libfoo.a
  /a/libfoo.tbd
  /a/libfoo.dylib
  /a/libfoo.so
  /a/libfoo.a
</samp></pre></figure>
    <p>
    Previously, the <a href="#Build-System">Build System</a> exposed <code>-search_paths_first</code> and
    <code>-search_dylibs_first</code> from the <code>zig build</code> command, which had the ability
    to affect all libraries. Now, the build script instead explicitly chooses the search strategy
    and preferred link mode for each library independently.
    </p>
    
    


    <h2 id="Bug-Fixes"><a href="#toc-Bug-Fixes">Bug Fixes</a> <a href="#Bug-Fixes">§</a></h2>

    <p><a href="https://github.com/ziglang/zig/issues?q=is%3Aclosed+is%3Aissue+label%3Abug+milestone%3A0.11.0">Full list of the 711 bug reports closed during this release cycle</a>.</p>
    <p>Many bugs were both introduced and resolved within this release cycle.
    Most bug fixes are omitted from these release notes for the sake of brevity.</p>
    <h3 id="This-Release-Contains-Bugs"><a href="#toc-This-Release-Contains-Bugs">This Release Contains Bugs</a> <a href="#This-Release-Contains-Bugs">§</a></h3>

    <p><img alt="Zero the Ziguana" src="https://ziglang.org/img/Zero_8.svg"></p><p>
    Zig has
    <a href="https://github.com/ziglang/zig/issues?q=is%3Aopen+is%3Aissue+label%3Abug">known bugs</a>
    and even some
    <a href="https://github.com/ziglang/zig/issues?q=is%3Aopen+is%3Aissue+label%3Amiscompilation">miscompilations</a>.
    </p>
    <p>Zig is immature. Even with Zig 0.11.0, working on a non-trivial project using Zig will
    likely require participating in the development process.</p>
    <p>When Zig reaches 1.0.0, <a href="#Tier-1-Support">Tier 1 Support</a> will gain a bug policy as an additional
    requirement.</p>
    <p>A <a href="https://github.com/ziglang/zig/milestone/21">0.11.1 release</a> is planned.
    Please test your projects against 0.11.0 and report any problems on the issue tracker
    so that we can deliver a stable 0.11.1 release.
    </p>
    

    <h3 id="Bug-Stability-Program"><a href="#toc-Bug-Stability-Program">Bug Stability Program</a> <a href="#Bug-Stability-Program">§</a></h3>

    <p>To be announced next week...</p>
    
    

    

    <ul>
      <li>Ability to specify a custom test runner via a new <code>--test-runner</code> CLI
        option, or the <code><span>std.Build.test_runner_path</span></code> field (<a href="https://github.com/ziglang/zig/issues/6621">#6621</a>).</li>
    </ul>
    <h3 id="LLVM-16"><a href="#toc-LLVM-16">LLVM 16</a> <a href="#LLVM-16">§</a></h3>

    <p>
    This release of Zig upgrades to
    <a href="http://releases.llvm.org/16.0.0/docs/ReleaseNotes.html">LLVM 16.0.6</a>.
    </p>
    <p>During this release cycle, it has become a goal of the Zig project to eventually
    <a href="https://github.com/ziglang/zig/issues/16270">eliminate all dependencies on LLVM, LLD, and Clang libraries</a>. There will still be an <a href="#LLVM-Backend">LLVM Backend</a>, however it will
    <a href="https://github.com/ziglang/zig/issues/13265">directly output bitcode files rather than using LLVM C++ APIs</a>.</p>
    

    <h3 id="musl-124"><a href="#toc-musl-124">musl 1.2.4</a> <a href="#musl-124">§</a></h3>

    <p>
    Zig ships with the source code to <a href="http://musl.libc.org/">musl</a>.
    When the musl C ABI is selected, Zig builds static musl from source for the selected target.
    Zig also supports targeting dynamically linked musl which is useful for Linux distributions
    that use it as their system libc, such as
    <a href="https://www.alpinelinux.org/">Alpine Linux</a>.
    </p>
    <p>
    This release upgrades from v1.2.3 to v1.2.4.
    </p>
    

    <h3 id="glibc-234"><a href="#toc-glibc-234">glibc 2.34</a> <a href="#glibc-234">§</a></h3>

    <p>Unfortunately, glibc is still stuck on 2.34. Users will need to wait until
    0.12.0 for a glibc upgrade.</p>
    <p>The only change:</p>
    <ul>
    <li>Allow linking against external libcrypt (<a href="https://github.com/ziglang/zig/issues/5990">#5990</a>).</li>
    </ul>
    

    <h3 id="mingw-w64-1000"><a href="#toc-mingw-w64-1000">mingw-w64 10.0.0</a> <a href="#mingw-w64-1000">§</a></h3>

    <p>Unfortunately, mingw-w64 is still stuck on 10.0.0. Users will need to wait until
    0.12.0 for a mingw-w64 upgrade.</p>
    <p>The only change:</p>
    <ul>
      <li>Added missing vscprintf.c file (<a href="https://github.com/ziglang/zig/issues/13733">#13733</a>).</li>
    </ul>
    

    <h3 id="WASI-libc"><a href="#toc-WASI-libc">WASI-libc</a> <a href="#WASI-libc">§</a></h3>

    <p>Zig's wasi-libc is updated to 3189cd1ceec8771e8f27faab58ad05d4d6c369ef (<a href="https://github.com/ziglang/zig/issues/15817">#15817</a>)</p>
    

    <h3 id="compiler-rt"><a href="#toc-compiler-rt">compiler-rt</a> <a href="#compiler-rt">§</a></h3>

    <p><img alt="Zero the Ziguana" src="https://ziglang.org/img/Zero_3.svg"></p><p>
    compiler-rt is the library that provides, for example, 64-bit integer multiplication for
    32-bit architectures which do not have a machine code instruction for it.
    The <a href="https://gcc.gnu.org/">GNU</a> toolchain calls this library
    <strong>libgcc</strong>.
    </p>
    <p>
    Unlike most compilers, which depend on a binary build of compiler-rt being installed alongside
    the compiler, Zig builds compiler-rt from source, lazily, for the
    target platform. It avoids repeating this work unnecessarily via the <a href="#Cache-System">Cache System</a>.
    </p>
    <p>This release saw some improvements to Zig's compiler-rt implementation:</p>
    <ul>
      <li>Fixed duplicate symbol error on aarch64 <a href="#Windows">Windows</a> (<a href="https://github.com/ziglang/zig/issues/13430">#13430</a>).</li>
      <li>Removed some no-longer-needed workarounds thanks to <a href="#Compiler">Compiler</a>
      bugs being fixed (<a href="https://github.com/ziglang/zig/issues/13553">#13553</a>).</li>
      <li>Added aarch64 outline atomics (<a href="https://github.com/ziglang/zig/issues/11828">#11828</a>).</li>
      <li>Added <code>__udivei4</code> and <code>__umodei4</code> for
        dividing and formatting arbitrary-large unsigned integers (<a href="https://github.com/ziglang/zig/issues/14023">#14023</a>).</li>
      <li>Added <code>__ashlsi3</code>, <code>__ashrsi3</code>, <code>__lshrsi3</code> for
        libgcc symbol compatibility.</li>
      <li>Added <code>__divmodti4</code> for libgcc symbol compatibility (<a href="https://github.com/ziglang/zig/issues/14608">#14608</a>).</li>
      <li>Added <code>__powihf2</code>, <code>__powisf2</code>, <code>__powidf2</code>, <code>__powitf2</code>, <code>__powixf2</code>.</li>
      <li>Fixed <code><span><span>f16</span></span></code> ABI on <a href="#macOS">macOS</a> with <a href="#LLVM-16">LLVM 16</a>.</li>
      <li>Added
        <code>__fixkfti</code>, <code>__fixunskfti</code>,
        <code>__floattikf</code>, <code>__negkf2</code>, <code>__mulkc3</code>,
        <code>__divkc3</code>, and <code>__powikf2</code> for <a href="#PowerPC">PowerPC</a> (<a href="https://github.com/ziglang/zig/issues/16057">#16057</a>).</li>
      <li>Optimized udivmod (<a href="https://github.com/ziglang/zig/issues/15265">#15265</a>).</li>
    </ul>
    <h4 id="Bundling-Into-Object-Files"><a href="#toc-Bundling-Into-Object-Files">Bundling Into Object Files</a> <a href="#Bundling-Into-Object-Files">§</a></h4>

    <p>When the following is specified</p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig build-obj -fcompiler-rt example.zig</kbd>
</samp></pre></figure>
    <p>the resulting relocatable object file will have the compiler-rt
    unconditionally embedded inside:</p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>nm example.o</kbd>
...
0000000012345678 W __truncsfhf2
...
</samp></pre></figure>
    
    

    <h3 id="zig-cc"><a href="#toc-zig-cc">zig cc</a> <a href="#zig-cc">§</a></h3>

    <p><code>zig cc</code> is Zig's drop-in C compiler tool. Enhancements in this release:</p>
    <ul>
      <li>Support <code>-z</code> stack-size arguments.</li>
      <li>Add missing clang opts: <code>-install_name</code> and <code>-undefined</code>.</li>
      <li>Add support for <code>-undefined error</code> (<a href="https://github.com/ziglang/zig/issues/14046">#14046</a>).</li>
      <li>Avoid passing redzone args when targeting powerpc.</li>
      <li>Support <code>-x</code> to override the language.</li>
      <li>Support <code>-r</code> (<a href="https://github.com/ziglang/zig/issues/11683">#11683</a>).</li>
      <li>Properly pass soft-float option for MIPS assembly files.</li>
      <li>Fixed generating <a href="#COFF">COFF</a> debug info on GNU ABIs.</li>
      <li>Support reading from stdin (<a href="https://github.com/ziglang/zig/issues/14462">#14462</a>).</li>
      <li>Implement <code>-###</code> (dry run) (<a href="https://github.com/ziglang/zig/issues/7170">#7170</a>).</li>
      <li>Support <code>-l :path/to/lib.so</code> (<a href="https://github.com/ziglang/zig/issues/15743">#15743</a>).</li>
      <li>Support <code>-version-script</code>.</li>
      <li>Support more <a href="#Linker">Linker</a> arguments:<ul>
        <li><code>--version</code> (<a href="https://github.com/ziglang/zig/issues/15549">#15549</a>)</li>
        <li><code>--dynamicbase</code></li>
        <li><code>-wrap</code> (<a href="https://github.com/ziglang/zig/issues/15097">#15097</a>)</li>
        <li><code>-stack</code> and <code>--stack</code></li>
        <li><code>--sort-common</code> (ignore)</li>
        <li><code>--sort-section</code></li>
        <li><code>--no-undefined</code> and <code>-z undefs</code> (<a href="https://github.com/ziglang/zig/issues/11912">#11912</a>)</li>
        <li><code>-z&lt;arg&gt;</code> (equivalent to <code>-z &lt;arg&gt;</code>) (<a href="https://github.com/ziglang/zig/issues/14680">#14680</a>)</li>
      </ul></li>
    </ul>
    <p>This feature is covered by our <a href="#Bug-Stability-Program">Bug Stability Program</a>.</p>
    <h4 id="Fail-Hard-on-Unsupported-Linker-Flags"><a href="#toc-Fail-Hard-on-Unsupported-Linker-Flags">Fail Hard on Unsupported Linker Flags</a> <a href="#Fail-Hard-on-Unsupported-Linker-Flags">§</a></h4>

    <p>Before, <code>zig cc</code>, when confronted with a linker argument it did
    not understand, would skip the flag and emit a warning.
    </p><p>
    This caused headaches for people that build third-party software. Zig
    would seemingly build and link the final executable, only to have it segfault when
    executed.
    </p><p>
    If there are linker warnings when compiling software, the first thing we
    have to do is add support for ones linker is complaining, and only then
    go file issues. If zig "successfully" (i.e. status code = 0) compiles a
    binary, there is instead a tendency to blaim "zig doing something
    weird". Adding the unsupported arguments is straightforward; see
    #11679, #11875, #11874 for examples.
    </p>
    <p>With Zig 0.11.0, unrecognized linker arguments are hard errors.</p>
    
    

    <h3 id="zig-c"><a href="#toc-zig-c">zig c++</a> <a href="#zig-c">§</a></h3>

    <p><code>zig c++</code> is equivalent to <a href="#zig-cc">zig cc</a> with an added <code>-lc++</code>
    parameter, but I made a separate heading here because I realized that some people are
    not aware that Zig supports compiling C++ code and providing libc++ too!
    </p>

    <figure><figcaption><cite>hello.cpp</cite></figcaption><pre><code><span>#include &lt;iostream&gt;</span>
<span>int main() {</span>
<span>    std::cout &lt;&lt; "Hello World!" &gt;&gt; std::endl;</span>
<span>    return 0;</span>
<span>}</span></code></pre></figure>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig c++ -o hello hello.cpp</kbd>
$ <kbd>./hello</kbd>
Hello World!
</samp></pre></figure>
    <p>Cross-compiling too, of course:</p>
    <figure><figcaption>Shell</figcaption><pre><samp>$ <kbd>zig c++ -o hello hello.cpp -target riscv64-linux</kbd>
$ <kbd>qemu-riscv64 ./hello</kbd>
Hello World!
</samp></pre></figure>
    <p>
    One thing that trips people up when they use this feature is that the
    <strong>C++ ABI is not stable across compilers</strong>, so always remember the rule:
    You must use the same C++ compiler to compile <em>all</em> your objects and static libraries.
    This is an unfortunate limitation of C++ which Zig can never fix.
    </p>
    

    <h3 id="zig-fmt"><a href="#toc-zig-fmt">zig fmt</a> <a href="#zig-fmt">§</a></h3>

    <ul>
      <li>Fixed extra whitespace with multiline strings (<a href="https://github.com/ziglang/zig/issues/13937">#13937</a>).</li>
      <li>Improved handling of comptime tuple fields.</li>
      <li>Omit extra whitespace after last comment before EOF.</li>
      <li>Avoid canonicalizing enum fields named `@"_"` to `_` (<a href="https://github.com/ziglang/zig/issues/15617">#15617</a>).</li>
      <li>additionally format .zon files</li>
      <li>make `--exclude` work on files (<a href="https://github.com/ziglang/zig/issues/16178">#16178</a>)</li>
      <li>fix file ending in a multi line comment</li>
      <li>zig fmt: fix extra whitespace with multiline strings (<a href="https://github.com/ziglang/zig/issues/13937">#13937</a>)</li>
      <li>Correctly handle carriage return characters according to the spec (<a href="https://github.com/ziglang/zig/issues/12661">#12661</a>).</li>
    </ul>

    <h4 id="Canonicalization-of-Identifiers"><a href="#toc-Canonicalization-of-Identifiers">Canonicalization of Identifiers</a> <a href="#Canonicalization-of-Identifiers">§</a></h4>

    <p>This adds new behavior to <code>zig fmt</code> which normalizes (renders a canonical form of) quoted identifiers like <code>@"hi_mom"</code> to some extent. This can make codebases more consistent and searchable.</p>
    <p>To prevent making the details of Unicode and UTF-8 dependencies of the Zig language, only bytes in the ASCII range are interpreted and normalized. Besides avoiding complexity, this means invalid UTF-8 strings cannot break <code>zig fmt</code>.</p>
    <p>Both the tokenizer and the new formatting logic may overlook certain errors in quoted identifiers, such as nonsense escape sequences like <code>\m</code>. For now, those are ignored and we defer to existing later analysis to catch.</p>
    <p>This change is not expected to break any existing code.</p>
    <h2 id="behavior">Behavior</h2>
    <p>Below, "verbatim" means "as it was in the original source"; in other words, not altered.</p>
    <ul>
    <li>If an identifier is bare (not quoted) in the original source, no change is made. Everything below only applies to quoted identifiers.</li>
    <li>Quoted identifiers are processed byte-wise, not interpreted as a UTF-8 sequence.</li>
    <li><code>\x</code> and <code>\u</code> escapes are processed.<ul>
    <li>If the escape sequence itself is invalid, the sequence is rendered verbatim.</li>
    <li>If the un-escaped codepoint is not ASCII, the sequence is rendered verbatim.</li>
    <li>Otherwise, the character is rendered with <a href="https://github.com/ziglang/zig/blob/cbdd21c/lib/std/zig/fmt.zig#L50-L87"><code>formatEscapes</code></a> rules: either literally or <code>\x</code>-escaped as needed.</li>
    </ul>
    </li>
    <li>If the resulting identifier still contains escapes, it it remains quoted.</li>
    <li>If the resulting identifier is not a valid bare symbol (<code>[A-Za-z_][A-Za-z0-9_]*</code>), it remains quoted.</li>
    <li>If the resulting identifier is a keyword, it remains quoted.</li>
    <li>If the resulting identifier is a primitive value/type (<code>i33</code>, <code>void</code>, <code>type</code>, <code>null</code>, <code>_</code>, etc.), it is rendered unquoted if the syntactical context allows it (field access, container member), otherwise it remains quoted.</li>
    <li>Otherwise, it is unquoted. Celebrate in the manner of your choosing.</li>
    </ul>
    <p>(<a href="https://github.com/ziglang/zig/issues/166">#166</a>)</p>
    
    

    <h3 id="zig-objcopy"><a href="#toc-zig-objcopy">zig objcopy</a> <a href="#zig-objcopy">§</a></h3>

    <p>This is a new subcommand added in this release. Functionality is limited,
      but we can add features as needed. This subcommand has no dependency
      on <a href="#LLVM-16">LLVM</a>.</p>
    

    

    <h2 id="Roadmap"><a href="#toc-Roadmap">Roadmap</a> <a href="#Roadmap">§</a></h2>

    <p><img alt="Ziggy the Ziguana" src="https://ziglang.org/img/Ziggy_8.svg"></p><p>The major themes of the 0.12.0 release cycle will be
    <strong>language changes</strong>,
    <strong>compilation speed</strong>, and <strong>package management</strong>.
    </p>

    <p>Some upcoming milestones we will be working towards in the 0.12.0 release cycle:</p>
    <ul>
      <li>Many <a href="#Accepted-Proposals">Accepted Proposals</a> implemented. Expect breakage!</li>
      <li>Behavior tests passing for the <a href="#x86-Backend">x86 Backend</a>, <a href="#aarch64-Backend">aarch64 Backend</a>, and
        <a href="#WebAssembly-Backend">WebAssembly Backend</a>.
        Unleashes our full compilation speed when targeting the respective architecture.</li>
      <li>Fuzz test <a href="#Incremental-Compilation">Incremental Compilation</a> so that we can enable it and gain compilation
        speed for all backends, including the <a href="#LLVM-16">LLVM</a> backend.</li>
      <li><a href="#Linker">Linker</a> support for <a href="#ELF">ELF</a> and <a href="#COFF">COFF</a>.
        Eliminate dependency on <a href="https://lld.llvm.org/">LLD</a>.</li>
      <li>Hot code swapping for <a href="#Windows">Windows</a>, <a href="#macOS">macOS</a>, and <a href="#Linux">Linux</a>.</li>
      <li>Introduce <a href="#Concurrency">Concurrency</a> to semantic analysis to further increase compilation speed.</li>
      <li>An explosion of reusable packages in the Zig ecosystem, creating the need for
        <a href="https://github.com/ziglang/zig/issues/14288">additional tooling</a>
        to deal with <a href="#Build-System">Build System</a> dependency trees.</li>
    </ul>

    <p>Here are the <strong>steps for Zig to reach 1.0</strong>:</p>
    <ol>
      <li>Stabilize the language. No more <a href="#Language-Changes">Language Changes</a> after this.</li>
      <li>Complete the language specification first draft.</li>
      <li>Stabilize the <a href="#Build-System">Build System</a> (this includes <a href="#Package-Management">Package Management</a>).</li>
      <li>Stabilize the <a href="#Standard-Library">Standard Library</a>. That means to add any missing functionality,
        audit the existing functionality, curate it, re-organize everything, and
        fix all the <a href="#Bug-Fixes">bugs</a>.</li>
      <li>Go one full release cycle without any breaking changes.</li>
      <li>Finally we can tag 1.0.</li>
    </ol>

    <h3 id="Accepted-Proposals"><a href="#toc-Accepted-Proposals">Accepted Proposals</a> <a href="#Accepted-Proposals">§</a></h3>

    <p>
    If you want more of a sense of the direction Zig is heading, you can look at
    <a href="https://github.com/ziglang/zig/issues?q=is%3Aopen+is%3Aissue+label%3Aaccepted">the set of accepted proposals</a>.
    </p>
    
    

    <h2 id="Thank-You-Contributors"><a href="#toc-Thank-You-Contributors">Thank You Contributors!</a> <a href="#Thank-You-Contributors">§</a></h2>

    <p><img alt="Ziggy the Ziguana" src="https://ziglang.org/img/Ziggy_7.svg"></p><p>Here are all the people who landed at least one contribution into this release:</p>
    <ul>
<li>Andrew Kelley</li>
<li>Jacob Young</li>
<li>Jakub Konka</li>
<li>Veikka Tuominen</li>
<li>Casey Banner</li>
<li>Luuk de Gram</li>
<li>mlugg</li>
<li>Wooster</li>
<li>Robin Voetter</li>
<li>Dominic</li>
<li>Loris Cro</li>
<li>Frank Denis</li>
<li>Ryan Liptak</li>
<li>Krzysztof Wolicki</li>
<li>Manlio Perillo</li>
<li>Michael Dusan</li>
<li>Nameless</li>
<li>Eric Joldasov</li>
<li>Motiejus Jakštys</li>
<li>Koakuma</li>
<li>Evin Yulo</li>
<li>Linus Groh</li>
<li>Xavier Bouchoux</li>
<li>Ali Chraghi</li>
<li>fn ⌃ ⌥</li>
<li>Jan Philipp Hafer</li>
<li>xEgoist</li>
<li>Cody Tapscott</li>
<li>Joachim Schmidt</li>
<li>Jacob G-W</li>
<li>Stevie Hryciw</li>
<li>Techatrix</li>
<li>Jonathan Marler</li>
<li>Josh Wolfe</li>
<li>IntegratedQuantum</li>
<li>Meghan Denny</li>
<li>antlilja</li>
<li>John Schmidt</li>
<li>Ian Johnson</li>
<li>Isaac Freund</li>
<li>Niles Salter</li>
<li>xdBronch</li>
<li>Auguste Rame</li>
<li>Ryo Ota</li>
<li>Zachary Raineri</li>
<li>DraagrenKirneh</li>
<li>Evan Haas</li>
<li>Jan200101</li>
<li>Marc Tiehuis</li>
<li>yujiri8</li>
<li>Bogdan Romanyuk</li>
<li>David Gonzalez Martin</li>
<li>Erik Arvstedt</li>
<li>Felix "xq" Queißner</li>
<li>Ganesan Rajagopal</li>
<li>Tw</li>
<li>GethDW</li>
<li>Guillaume Wenzek</li>
<li>InKryption</li>
<li>Jimmi Holst Christensen</li>
<li>Ronald Chen</li>
<li>Takeshi Yoneda</li>
<li>Travis Staloch</li>
<li>jim price</li>
<li>matu3ba</li>
<li>mllken</li>
<li>Bas Westerbaan</li>
<li>Carl Åstholm</li>
<li>Emile Badenhorst</li>
<li>Felix "xq" Queißner</li>
<li>Igor Anić</li>
<li>Lee Cannon</li>
<li>Matt Knight</li>
<li>Mizuochi Keita</li>
<li>Nguyễn Gia Phong</li>
<li>Nicolas Sterchele</li>
<li>Pyrolistical</li>
<li>Roman Frołow</li>
<li>Ryan Schneider</li>
<li>Tom Read Cutting</li>
<li>bfredl</li>
<li>jcalabro</li>
<li>notcancername</li>
<li>praschke</li>
<li>AdamGoertz</li>
<li>Adrian Delgado</li>
<li>Alex Kladov</li>
<li>Brendan Burns</li>
<li>Chris Boesch</li>
<li>Clement Espeute</li>
<li>Coin</li>
<li>Cortex</li>
<li>Eckhart Köppen</li>
<li>Edoardo Vacchi</li>
<li>Emile Badenhorst</li>
<li>Eric Milliken</li>
<li>Felix (xq) Queißner</li>
<li>Ganesan Rajagopal</li>
<li>Garrett</li>
<li>Gaëtan S</li>
<li>Gregory Mullen</li>
<li>Jason Phan</li>
<li>Jay Petacat</li>
<li>Jeremy Volkman</li>
<li>Lauri Tirkkonen</li>
<li>Leo Constantinides</li>
<li>Luis Cáceres</li>
<li>Maciej 'vesim' Kuliński</li>
<li>Martin Wickham</li>
<li>Mason Remaley</li>
<li>Mateusz Poliwczak</li>
<li>Mathew R Gordon</li>
<li>Michael Bartnett</li>
<li>Mitchell Hashimoto</li>
<li>Philippe Pittoli</li>
<li>Stephen Gregoratto</li>
<li>Tw</li>
<li>cryptocode</li>
<li>d18g</li>
<li>hequn</li>
<li>serg</li>
<li>shwqf</li>
<li>star-tek-mb</li>
<li>travisstaloch</li>
<li>-k</li>
<li>0x5a4</li>
<li>Adam Goertz</li>
<li>Adrian Cole</li>
<li>Alexis Brodeur</li>
<li>Andrius Bentkus</li>
<li>AnnikaCodes</li>
<li>Arnau</li>
<li>Arya-Elfren</li>
<li>Asherah Connor</li>
<li>Bertie Wheen</li>
<li>Binary Craft</li>
<li>Björn Linse</li>
<li>Borja Clemente</li>
<li>Brett Hill</li>
<li>Chris Heyes</li>
<li>Christofer Nolander</li>
<li>David Carlier</li>
<li>David Vanderson</li>
<li>DerryAlex</li>
<li>Devin Singh</li>
<li>Dumitru Stavila</li>
<li>Ed Yu</li>
<li>Eric Rowley</li>
<li>Evan Typanski</li>
<li>Fabio Arnold</li>
<li>Felix Queißner</li>
<li>Frechdachs</li>
<li>George  Zhao</li>
<li>Gregory Oakes</li>
<li>Halil</li>
<li>Hao Li</li>
<li>Hardy</li>
<li>Hashi364</li>
<li>Hayden Pope</li>
<li>Hubert Jasudowicz</li>
<li>Ivan Velickovic</li>
<li>J.C. Moyer</li>
<li>Janne Hellsten</li>
<li>Jarred Sumner</li>
<li>Jayden</li>
<li>Jens Goldberg</li>
<li>Jiacai Liu</li>
<li>Jim Price</li>
<li>Jobat</li>
<li>John Schmidt</li>
<li>John Simon</li>
<li>John Zhang</li>
<li>Jon</li>
<li>Jon-Eric Cook</li>
<li>Jonathan</li>
<li>Jonta</li>
<li>Jordan Lewis</li>
<li>Josh</li>
<li>Josh Holland</li>
<li>KOUNOIKE Yuusuke</li>
<li>Ken Kochis</li>
<li>Kim SHrier</li>
<li>Kirk Scheibelhut</li>
<li>Kitty-Cricket Piapiac</li>
<li>Kotaro Inoue</li>
<li>Kyle Coffey</li>
<li>Lavt Niveau</li>
<li>Luiz Berti</li>
<li>Marco Munizaga</li>
<li>Marcos O</li>
<li>Marcus Ramse</li>
<li>Mateusz Radomski</li>
<li>Matt Chudleigh</li>
<li>Matteo Briani</li>
<li>Micah Switzer</li>
<li>Michael Buckley</li>
<li>Mikael Berthe</li>
<li>Mikko Kaihlavirta</li>
<li>Naoki MATSUMOTO</li>
<li>Nathan Bourgeois</li>
<li>Nick Cernis</li>
<li>Nicolas Goy</li>
<li>Nikita Ronja</li>
<li>Phil Eaton</li>
<li>Philipp Lühmann</li>
<li>Piotr Sarna</li>
<li>Piotr Sikora</li>
<li>Pyry Kovanen</li>
<li>Reuben Dunnington</li>
<li>Robert Burke</li>
<li>Rohlem</li>
<li>Sebastian Bensusan</li>
<li>Silver</li>
<li>Simon A. Nielsen Knights</li>
<li>Sizhe Zhao</li>
<li>Steven Kabbes</li>
<li>Suirad</li>
<li>The Potato Chronicler</li>
<li>Tristan Ross</li>
<li>Walther Chen</li>
<li>Yujiri</li>
<li>Yusuf Bham</li>
<li>Zach Cheung</li>
<li>Zapolsky Anton</li>
<li>alex</li>
<li>alion02</li>
<li>begly</li>
<li>bing</li>
<li>dantecatalfamo</li>
<li>dec05eba</li>
<li>delitako</li>
<li>e4m2</li>
<li>ee7</li>
<li>flexicoding</li>
<li>frmdstryr</li>
<li>fsh</li>
<li>gettsu</li>
<li>h57624paen</li>
<li>iacore</li>
<li>jackji</li>
<li>jagt</li>
<li>jiacai2050</li>
<li>kkHAIKE</li>
<li>leap123</li>
<li>lockbox</li>
<li>mateusz</li>
<li>mike</li>
<li>mnordine</li>
<li>mparadinha</li>
<li>nc</li>
<li>ominitay</li>
<li>pluick</li>
<li>protty</li>
<li>pseudoc</li>
<li>remeh</li>
<li>sentientwaffle</li>
<li>square</li>
<li>sv99</li>
<li>techatrix</li>
<li>tison</li>
<li>tjog</li>
<li>tranquillity-codes</li>
<li>wrongnull</li>
<li>ypsvlq</li>
<li>zenith391</li>
<li>zhaozg</li>
<li>zigster64</li>
<li>山下</li>
<li>朕与将军解战袍</li>
    </ul>
    

    

    <p><img alt="Ziggy the Ziguana" src="https://ziglang.org/img/Ziggy_6.svg"></p><p>
    Special thanks to those who <a href="https://ziglang.org/zsf/">sponsor Zig</a>.
    Because of recurring donations, Zig is driven by the open source community, rather
    than the goal of making profit. In particular, these fine folks sponsor Zig
    for $50/month or more:
    </p>
    <ul>
<li><a href="https://github.com/thejoshwolfe" rel="nofollow noopener" target="_blank">Josh Wolfe</a></li>
<li><a href="https://mattnite.blog/" rel="nofollow noopener" target="_blank">Matt Knight</a></li>
<li><a href="https://www.hryx.net/" rel="nofollow noopener" target="_blank">Stevie Hryciw</a></li>
<li><a href="https://jethron.id.au/" rel="nofollow noopener" target="_blank">Jethro Nederhof</a></li>
<li><a href="https://hachyderm.io/@karrick" rel="nofollow noopener" target="_blank">Karrick McDermott</a></li>
<li><a href="https://www.kapricornmedia.com/" rel="nofollow noopener" target="_blank">José M Rico</a></li>
<li><a href="https://github.com/drfuchs" rel="nofollow noopener" target="_blank">drfuchs</a></li>
<li><a href="https://github.com/tigerbeetle/tigerbeetle" rel="nofollow noopener" target="_blank">Joran Dirk Greef</a></li>
<li><a href="https://github.com/rui314" rel="nofollow noopener" target="_blank">Rui Ueyama</a></li>
<li><a href="https://github.com/bfredl" rel="nofollow noopener" target="_blank">bfredl</a></li>
<li><a href="https://slimsag.com/" rel="nofollow noopener" target="_blank">Stephen Gutekanst</a></li>
<li><a href="https://derekcollison.net/" rel="nofollow noopener" target="_blank">Derek Collison</a></li>
<li><a href="https://twitter.com/dcocca88" rel="nofollow noopener" target="_blank">Daniele Cocca</a></li>
<li><a href="https://twitter.com/rbatiati" rel="nofollow noopener" target="_blank">Rafael Batiati</a></li>
<li><a href="https://github.com/alunbestor" rel="nofollow noopener" target="_blank">Alun Bestor</a></li>
<li><a href="https://aras-p.info/" rel="nofollow noopener" target="_blank">Aras Pranckevičius</a></li>
<li><a href="https://terinstock.com/" rel="nofollow noopener" target="_blank">Terin Stock</a></li>
<li><a href="https://kalvad.com/" rel="nofollow noopener" target="_blank">Loïc Tosser</a></li>
<li><a href="https://scheibo.com/" rel="nofollow noopener" target="_blank">Kirk Scheibelhut</a></li>
<li><a href="https://mitchellh.com/" rel="nofollow noopener" target="_blank">Mitchell Hashimoto</a></li>
<li><a href="https://github.com/briangold" rel="nofollow noopener" target="_blank">Brian Gold</a></li>
<li><a href="https://github.com/phrrngtn" rel="nofollow noopener" target="_blank">Paul Harrington</a></li>
<li><a href="https://mikoverse.com/" rel="nofollow noopener" target="_blank">MikoVerse</a></li>
<li><a href="https://github.com/cgaebel" rel="nofollow noopener" target="_blank">Clark Gaebel</a></li>
<li><a href="https://oven.sh/" rel="nofollow noopener" target="_blank">Oven</a></li>
<li><a href="https://www.marcus.art/" rel="nofollow noopener" target="_blank">Marcus</a></li>
<li><a href="https://bhgomes.dev/" rel="nofollow noopener" target="_blank">Brandon H. Gomes</a></li>
<li><a href="https://www.kchilton.com/" rel="nofollow noopener" target="_blank">Ken Chilton</a></li>
<li><a href="https://twitter.com/soworston" rel="nofollow noopener" target="_blank">Sebastian</a></li>
<li><a href="https://keybase.io/jakehemmerle" rel="nofollow noopener" target="_blank">jake hemmerle</a></li>
<li>Luuk de Gram</li>
<li>Jamie Brandon</li>
<li>Auguste Rame</li>
<li>Jay Petacat</li>
<li>Dirk de Visser</li>
<li>Santiago Andaluz</li>
<li>Andrew Mangogna</li>
<li>Yaroslav Zhavoronkov</li>
<li>Charlie Cheever</li>
<li>Anton Kochkov</li>
<li>Max Bernstein</li>
<li>Timothy Ham</li>
<li>Jordan Orelli</li>
<li>James McGill</li>
<li>Luke Champine</li>
<li>王爱国</li>
<li>Wojtek Mach</li>
<li>Daniel Hensley</li>
<li>Erik Mållberg</li>
<li>Christopher Dolan</li>
<li>Fabio Arnold</li>
<li>Mateusz Czarnecki</li>
<li>Ross Rheingans-Yoo</li>
<li>Emily A. Bellows</li>
<li>Mykhailo Tsiuptsiun (miktwon)</li>
<li>sparrisable</li>
<li>Kiril Mihaylov</li>
<li>Brett Slatkin</li>
<li>Martin H</li>
<li>Sean Carey</li>
<li>Yurii Rashkovskii</li>
<li>Benjamin Ebby</li>
<li>Ralph Brorsen</li>
<li>OM PropTech GmbH</li>
<li>Alex Sergeev</li>
<li>mlugg</li>
<li>Aaron Olson</li>
<li>Marco Munizaga</li>
<li>Baptiste Canton</li>
<li>Josh Ashby</li>
<li>Chris Baldwin</li>
<li>Malcolm Still</li>
<li>Francis Bouvier</li>
<li>Jacob Young</li>
<li>Alve Larsson</li>
<li>Nicolas Goy</li>
<li>Ian Johnson</li>
<li>Carlos Pizano Uribe</li>
<li>Rene Schallner</li>
<li>Alec Graves</li>
<li>Lucas Myers</li>
<li>Jinkyu Yi</li>
    </ul>
    
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Successful room temperature ambient-pressure magnetic levitation of LK-99 (2061 pts)]]></title>
            <link>https://arxiv.org/abs/2308.01516</link>
            <guid>36994214</guid>
            <pubDate>Fri, 04 Aug 2023 01:15:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2308.01516">https://arxiv.org/abs/2308.01516</a>, See on <a href="https://news.ycombinator.com/item?id=36994214">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    
    
      
    
  
  
  
    <p><a aria-describedby="download-button-info" href="https://arxiv.org/pdf/2308.01516">Download PDF</a></p><blockquote>
            <span>Abstract:</span>  Recently, Sukbae Lee et al. reported inspiring experimental findings on the
atmospheric superconductivity of a modified lead apatite crystal (LK-99) at
room temperature (<a data-doi="10.6111/JKCGCT.2023.33.2.061" href="https://doi.org/10.6111/JKCGCT.2023.33.2.061" rel="external noopener nofollow">https://doi.org/10.6111/JKCGCT.2023.33.2.061</a>, arXiv: <a data-arxiv-id="2307.12008" href="https://arxiv.org/abs/2307.12008">2307.12008</a>, arXiv:
<a data-arxiv-id="2307.12037" href="https://arxiv.org/abs/2307.12037">2307.12037</a>). They claimed that the synthesized LK-99 materials exhibit the
Meissner levitation phenomenon of superconductors and have a superconducting
transition temperature (Tc) higher than 400 K. Here, for the first time, we
successfully verify and synthesize the LK-99 crystals which can be magnetically
levitated with larger levitated angle than Sukbae Lee's sample at room
temperature. It is expected to realize the true potential of room temperature,
non-contact superconducting magnetic levitation in near future.

    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Haixin Chang [<a href="https://arxiv.org/show-email/16364950/2308.01516">view email</a>]
      <br>
    <strong>[v1]</strong>
    
        Thu, 3 Aug 2023 03:13:51 UTC (598 KB)<br>
    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Some remarks on possible superconductivity of composition Pb9CuP6O25 (171 pts)]]></title>
            <link>https://arxiv.org/abs/2308.01723</link>
            <guid>36994122</guid>
            <pubDate>Fri, 04 Aug 2023 01:00:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2308.01723">https://arxiv.org/abs/2308.01723</a>, See on <a href="https://news.ycombinator.com/item?id=36994122">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    
    
      
    
  
  
  
    <p><a aria-describedby="download-button-info" href="https://arxiv.org/pdf/2308.01723">Download PDF</a></p><blockquote>
            <span>Abstract:</span>  A material called LK-99, a modified-lead apatite crystal structure with the
composition Pb$_{10-x}$Cu$_x$(PO$_4$)$_6$O ($0.9&lt;x&lt;1.1$) has been reported to
be an above-room-temperature superconductor at ambient pressure. It is hard to
expect that it will be straightforward for other groups to reproduce the
original results. We provide here some remarks which may be helpful for a
success.

    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Serafim Teknowijoyo [<a href="https://arxiv.org/show-email/de5cd15d/2308.01723">view email</a>]
      <br>
    <strong>[v1]</strong>
    
        Thu, 3 Aug 2023 12:32:03 UTC (933 KB)<br>
    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux surpasses the Mac among Steam gamers (391 pts)]]></title>
            <link>https://arstechnica.com/gadgets/2023/08/linux-surpasses-the-mac-among-steam-gamers/</link>
            <guid>36993968</guid>
            <pubDate>Fri, 04 Aug 2023 00:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gadgets/2023/08/linux-surpasses-the-mac-among-steam-gamers/">https://arstechnica.com/gadgets/2023/08/linux-surpasses-the-mac-among-steam-gamers/</a>, See on <a href="https://news.ycombinator.com/item?id=36993968">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      Yes, it's the Steam Deck    —
</h4>
            
            <h2 itemprop="description">It's not the year of Linux on desktop; it's the year of Linux on a handheld.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2021/07/Steam_Deck_case-800x450.jpg" alt="The Steam Deck.">
      <figcaption><div><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2021/07/Steam_Deck_case.jpg" data-height="2700" data-width="4800">Enlarge</a> <span>/</span> The Steam Deck.</p></div><p>Valve</p></figcaption>  </figure>

  




<!-- cache hit 153:single/related:b5ef341bac689525cfe9edf843e0206e --><!-- empty -->
<p>Apple's macOS has been the second most popular operating system on the Steam game distribution platform for a long time, but that has now changed. Linux has surpassed macOS for the number two spot, according to <a href="https://store.steampowered.com/hwsurvey/">Steam's July user hardware survey</a>.</p>
<p>Steam regularly asks its users to give an anonymized look at their hardware, and the company makes the information it gathers available each month.</p>
<p>In July's survey, Windows was still reported by 96.21 percent of users' systems, so regardless of whether Linux or macOS comes in second, it's a decidedly distant second. Linux managed 1.96 percent, while macOS accounted for 1.84 percent of machines.
</p><p>That's more than half a percent jump over June for Linux, and as <a href="https://www.phoronix.com/news/Steam-Stats-July-2023">Phoronix</a> noted, it puts Linux close to its all-time high, which was only slightly higher many years ago when Steam had far fewer users overall.</p>
<p>But before you declare this a triumphant moment for desktop Linux, it's important to note that some of these Linux users are not, in fact, using Steam on a desktop. The Linux version "SteamOS Holo" 64-bit is the most popular reported, at just over 42 percent of the Linux slice of pie. That indicates that a huge portion of these Linux users are actually playing on Valve's Steam Deck portable, which runs Linux.</p>                                            
                                                        
<p>Of course, there can be some variance in the results from month to month, depending on who opts into the survey. But that variance is usually smaller than this, given the scale at which Steam runs these surveys.</p>
<p>The Steam Deck was first released a while ago, but it only became <a href="https://arstechnica.com/gadgets/2022/10/now-you-can-order-the-steam-deck-and-its-dock-without-a-reservation/">widely available</a> without a waiting list last October. We're likely seeing the result of a solid adoption rate since then.</p>
<p>There's another factor that could be at play on the desktop too, though. Last month, Steam made some <a href="https://arstechnica.com/gaming/2023/06/valve-gives-steam-its-biggest-update-and-redesign-in-years/">big changes</a> under the hood to how the desktop application worked on Linux and macOS, some of which were built on the work done on Steam Deck. The app runs better on both platforms, though the difference was more dramatic on macOS.</p>
<p>Meanwhile, Apple has been making a lot of noise about making the Mac a more viable gaming platform, given the exceptionally strong graphics performance (for integrated graphics on a laptop, at least) of the M1 and M2 series chips in the latest Macs.
</p><p>It worked with game publishers to see high-profile releases like <em>Resident Evil Village</em> and <em>No Man's Sky</em> in recent months, and those games run pretty well on modern Macs—certainly better than similar titles on Intel-based Macs with integrated graphics chips. It also announced a new gaming porting tool in an upcoming version of macOS that works <a href="https://arstechnica.com/apple/2023/06/apple-has-a-proton-like-game-porting-toolkit-for-getting-windows-games-on-mac/">in some ways like Proton</a>, as seen on the Steam Deck.</p>
<p>Looking at Steam's numbers, though, Apple clearly has a long way to go.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Royal Mail to Issue “Terry Pratchett’s Discworld” Stamps (126 pts)]]></title>
            <link>https://file770.com/royal-mail-to-issue-terry-pratchetts-discworld-stamps/</link>
            <guid>36992614</guid>
            <pubDate>Thu, 03 Aug 2023 22:00:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://file770.com/royal-mail-to-issue-terry-pratchetts-discworld-stamps/">https://file770.com/royal-mail-to-issue-terry-pratchetts-discworld-stamps/</a>, See on <a href="https://news.ycombinator.com/item?id=36992614">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-105247">
	<!-- .entry-header -->

	<div>
		<div>
<figure><img data-attachment-id="105250" data-permalink="https://file770.com/as10400-1-discworld-stamp-set-2/" data-orig-file="https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1.jpg" data-orig-size="651,384" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-1-discworld-stamp-set" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1-300x177.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1-584x344.jpg" decoding="async" width="584" height="344" src="https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1-584x344.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1-584x344.jpg 584w, https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1-300x177.jpg 300w, https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1-500x295.jpg 500w, https://file770.com/wp-content/uploads/as10400-1-discworld-stamp-set-1.jpg 651w" sizes="(max-width: 584px) 100vw, 584px"></figure></div>


<p>The UK’s Royal Mail today shared images of the eight Special Stamps they are issuing to <a href="https://terrypratchett.com/discworld/royal-mail-40th-anniversary-discworld-stamps/">celebrate Terry Pratchett’s Discworld series</a>, marking the 40th&nbsp;anniversary of&nbsp;<em>The Colour of Magic</em>, first book in the series. The stamps can be&nbsp;<a href="https://shop.royalmail.com/special-stamp-issues/terry-pratchetts-discworld?cid=CMAUG23_OS_0228_04">pre-ordered now</a>, and will be available for general purchase on August 10.</p>



<p>The stamps feature Rincewind, The Librarian, Granny Weatherwax, Sam Vimes, and Great A’Tuin, as well as specially commissioned artworks of Death and Mort, Tiffany Aching and Moist von Lipwig, all by artist Paul Kidby, who was Pratchett’s preferred illustrator for the Discworld. (Click for larger image.)</p>



<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/file770.com\/royal-mail-to-issue-terry-pratchetts-discworld-stamps\/&quot;}">
<figure><img data-attachment-id="105235" data-permalink="https://file770.com/as10400-2-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-2-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105235" src="https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-2-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105236" data-permalink="https://file770.com/as10400-3-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-3-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105236" src="https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-3-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105237" data-permalink="https://file770.com/as10400-4-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-4-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105237" src="https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-4-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105238" data-permalink="https://file770.com/as10400-5-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-5-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105238" src="https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-5-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105239" data-permalink="https://file770.com/as10400-6-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-6-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105239" src="https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-6-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105240" data-permalink="https://file770.com/as10400-7-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-7-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105240" src="https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-7-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105241" data-permalink="https://file770.com/as10400-8-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-8-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105241" src="https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-8-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105242" data-permalink="https://file770.com/as10400-9-discworld-stamp-set_1/" data-orig-file="https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="as10400-9-discworld-stamp-set_1" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" data-id="105242" src="https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1-584x584.jpg 584w, https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1-300x300.jpg 300w, https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1-150x150.jpg 150w, https://file770.com/wp-content/uploads/as10400-9-discworld-stamp-set_1.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>
</figure>



<p>A Terry Pratchett’s Discworld First Day Cover featuring all eight new stamps cancelled with the alternative postmark that will be available for order from August 10.</p>



<figure><img data-attachment-id="105251" data-permalink="https://file770.com/aw251-2-discworld-stamp-souvenir-2/" data-orig-file="https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1.jpg" data-orig-size="650,380" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="aw251-2-discworld-stamp-souvenir" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1-300x175.jpg" data-large-file="https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1-584x341.jpg" decoding="async" loading="lazy" width="584" height="341" src="https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1-584x341.jpg" alt="" srcset="https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1-584x341.jpg 584w, https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1-300x175.jpg 300w, https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1-500x292.jpg 500w, https://file770.com/wp-content/uploads/aw251-2-discworld-stamp-souvenir-1.jpg 650w" sizes="(max-width: 584px) 100vw, 584px"></figure>


<div>
<figure><img data-attachment-id="105252" data-permalink="https://file770.com/aw251-3-discworld-stamp-souvenir-2/" data-orig-file="https://file770.com/wp-content/uploads/aw251-3-discworld-stamp-souvenir-1.jpg" data-orig-size="459,472" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="aw251-3-discworld-stamp-souvenir" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/aw251-3-discworld-stamp-souvenir-1-292x300.jpg" data-large-file="https://file770.com/wp-content/uploads/aw251-3-discworld-stamp-souvenir-1.jpg" decoding="async" loading="lazy" width="459" height="472" src="https://file770.com/wp-content/uploads/aw251-3-discworld-stamp-souvenir-1.jpg" alt="" srcset="https://file770.com/wp-content/uploads/aw251-3-discworld-stamp-souvenir-1.jpg 459w, https://file770.com/wp-content/uploads/aw251-3-discworld-stamp-souvenir-1-292x300.jpg 292w" sizes="(max-width: 459px) 100vw, 459px"></figure></div>


<p>Also offered is a presentation pack with explanatory text and a set of the stamps.</p>



<figure><img data-attachment-id="105245" data-permalink="https://file770.com/ap526-1-discworld-presentation-pk/" data-orig-file="https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="ap526-1-discworld-presentation-pk" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" src="https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk-584x584.jpg 584w, https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk-300x300.jpg 300w, https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk-150x150.jpg 150w, https://file770.com/wp-content/uploads/ap526-1-discworld-presentation-pk.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>



<figure><img data-attachment-id="105246" data-permalink="https://file770.com/ap526-4-discworld-presentation-pk/" data-orig-file="https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk.jpg" data-orig-size="700,700" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="ap526-4-discworld-presentation-pk" data-image-description="" data-image-caption="" data-medium-file="https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk-300x300.jpg" data-large-file="https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk-584x584.jpg" decoding="async" loading="lazy" width="584" height="584" src="https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk-584x584.jpg" alt="" srcset="https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk-584x584.jpg 584w, https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk-300x300.jpg 300w, https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk-150x150.jpg 150w, https://file770.com/wp-content/uploads/ap526-4-discworld-presentation-pk.jpg 700w" sizes="(max-width: 584px) 100vw, 584px"></figure>
			</div><!-- .entry-content -->

	<!-- .entry-meta -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nuked-MD-FPGA – accurate Sega Genesis re-implementation based on decapped chips (235 pts)]]></title>
            <link>https://github.com/nukeykt/Nuked-MD-FPGA</link>
            <guid>36992335</guid>
            <pubDate>Thu, 03 Aug 2023 21:38:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/nukeykt/Nuked-MD-FPGA">https://github.com/nukeykt/Nuked-MD-FPGA</a>, See on <a href="https://news.ycombinator.com/item?id=36992335">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">Nuked-MD-FPGA</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/nukeykt/Nuked-MD-FPGA/blob/main/nukedmd_logo.png"><img src="https://github.com/nukeykt/Nuked-MD-FPGA/raw/main/nukedmd_logo.png" alt="nukedmd_logo"></a></p>
<p dir="auto">Cycle accurate Mega Drive emulator. Verilog version of <a href="https://github.com/nukeykt/Nuked-MD">Nuked MD</a>.
The goal of this project is to emulate Sega Mega Drive chipset accurately as possible using decapped chips photos.</p>
<h2 tabindex="-1" dir="auto">Mega Drive chipset</h2>
<p dir="auto">Sega Mega Drive chipset consist of 6 integrated circuits + RAM chips:</p>
<ul dir="auto">
<li>Motorola 68000 (Main CPU)</li>
<li>Zilog Z80 (Sound CPU)</li>
<li>Yamaha YM7101 (VDP)</li>
<li>Yamaha YM2612/YM3438 (FM)</li>
<li>Yamaha YM6045 (Arbiter)</li>
<li>Yamaha YM6046 (IO)</li>
<li>TMSS (later revisions)</li>
</ul>
<p dir="auto">There are number of variations of chipsets across mega drive revisions. For example early revisions use NMOS 68k and Z80 chips, while later models switched to CMOS versions. Yamaha later integrated their chips into one big chip named FC1004.</p>
<p dir="auto">Nuked-MD-FPGA currently targets NMOS 68k, NMOS Z80 and FC1004. No real mega drive used such combination, but Model 1 VA7 would be closest (CMOS 68k, NMOS Z80 and FC1004). Other variants possibly will be emulated in the future.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/nukeykt/Nuked-MD-FPGA/blob/main/chips.png"><img src="https://github.com/nukeykt/Nuked-MD-FPGA/raw/main/chips.png" alt="image"></a></p>
<h2 tabindex="-1" dir="auto">Progress</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/nukeykt/Nuked-MD-FPGA/blob/main/progress2.jpg"><img src="https://github.com/nukeykt/Nuked-MD-FPGA/raw/main/progress2.jpg" alt="image"></a></p>
<p dir="auto">See <a href="https://github.com/nukeykt/Nuked-MD-FPGA/blob/main/Progress.md">Progress.md</a></p>
<h2 tabindex="-1" dir="auto">References</h2>
<ul dir="auto">
<li><a href="https://github.com/emu-russia/SEGAChips">https://github.com/emu-russia/SEGAChips</a> (andkorzh, org, nukeykt)</li>
<li><a href="https://www.grafik-feti.de/ftp/Die-Shots/Archiv/2D/Die-Shots/GamingConsoles/SEGA_Genesis_MegaDrive/MD1/VDP/" rel="nofollow">https://www.grafik-feti.de/ftp/Die-Shots/Archiv/2D/Die-Shots/GamingConsoles/SEGA_Genesis_MegaDrive/MD1/VDP/</a> (Fritzchens Fritz)</li>
<li><a href="https://siliconpr0n.org/map/yamaha/ym3438/" rel="nofollow">https://siliconpr0n.org/map/yamaha/ym3438/</a> (John McMaster)</li>
<li><a href="http://gendev.spritesmind.net/forum/viewtopic.php?p=14976&amp;sid=d3409eec616d569e2240c09d60bbff03#p14976" rel="nofollow">http://gendev.spritesmind.net/forum/viewtopic.php?p=14976&amp;sid=d3409eec616d569e2240c09d60bbff03#p14976</a> (HardWareMan)</li>
<li><a href="https://siliconpr0n.org/map/zilog/z0840008psc-z80cpu/" rel="nofollow">https://siliconpr0n.org/map/zilog/z0840008psc-z80cpu/</a> (Antoine Bercovici)</li>
<li><a href="https://siliconpr0n.org/map/motorola/mc68000p8-a72e/" rel="nofollow">https://siliconpr0n.org/map/motorola/mc68000p8-a72e/</a> (John McMaster)</li>
<li><a href="https://og.kervella.org/m68k/" rel="nofollow">https://og.kervella.org/m68k/</a> (Olivier Galibert)</li>
<li><a href="http://www.visual6502.org/JSSim/expert-z80.html" rel="nofollow">http://www.visual6502.org/JSSim/expert-z80.html</a> (Visual6502 team)</li>
<li><a href="https://siliconpr0n.org/map/hitachi/hd68hc000u" rel="nofollow">https://siliconpr0n.org/map/hitachi/hd68hc000u</a> (John McMaster)</li>
</ul>
<h2 tabindex="-1" dir="auto">Credits</h2>
<ul dir="auto">
<li>nukeykt - RE, verilog implementation</li>
<li>org(ogamespec) - FC1004 decap, RE, useful tools, etc.</li>
<li>andkorzh - RE</li>
<li>HardWareMan - YM2612 decap pics, RE</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[As ocean oxygen levels dip, fish face an uncertain future (174 pts)]]></title>
            <link>https://e360.yale.edu/features/as-ocean-oxygen-levels-dip-fish-face-an-uncertain-future</link>
            <guid>36992249</guid>
            <pubDate>Thu, 03 Aug 2023 21:31:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://e360.yale.edu/features/as-ocean-oxygen-levels-dip-fish-face-an-uncertain-future">https://e360.yale.edu/features/as-ocean-oxygen-levels-dip-fish-face-an-uncertain-future</a>, See on <a href="https://news.ycombinator.com/item?id=36992249">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

  
    




<header>
  <div>
        
  

    <p>Global warming not only increases ocean temperatures, it triggers a cascade of effects that are stripping the seas of oxygen. Fish are already moving to new waters in search of oxygen, and scientists are warning of the long-term threat to fish species and marine ecosystems.<br></p>
  

 
  
    

    







  </div> <!-- article titles content -->
</header> <!-- article titles -->
  
  


    
    <section>

                      
                        

<div>
<p>Off the coast of southeastern China, one particular fish species is booming: the oddly named Bombay duck, a long, slim fish with a distinctive, gaping jaw and a texture like jelly. When research ships trawl the seafloor off that coast, they now catch upwards of 440 pounds of the gelatinous fish per hour — a more than tenfold increase over a decade ago. “It’s monstrous,” says University of British Columbia fisheries researcher Daniel Pauly of the explosion in numbers.</p>
<p>The reason for this mass invasion, says Pauly, is extremely low oxygen levels in these polluted waters. Fish species that can’t cope with less oxygen have fled, while the Bombay duck, part of a small subset of species that is physiologically better able to deal with less oxygen, <a href="https://link.springer.com/article/10.1007/s10641-021-01130-7">has moved in</a>.</p>
<p>The boom is making some people happy, since Bombay duck is perfectly edible. But the influx provides a peek at a bleak future for China and for the planet as a whole. As the atmosphere warms, oceans around the world are becoming ever more deprived of oxygen, forcing many species to migrate from their usual homes. Researchers expect many places to experience a decline in species diversity, ending up with just those few species that can cope with the harsher conditions. Lack of ecosystem diversity means lack of resilience. “Deoxygenation is a big problem,” Pauly summarizes.</p>
<p>Our future ocean — warmer and oxygen-deprived — will not only hold fewer kinds of fish, but also smaller, stunted fish and, to add insult to injury, more greenhouse-gas producing bacteria, scientists say. The tropics will empty as fish move to more oxygenated waters, says Pauly, and those specialist fish already living at the poles will face extinction.</p>
</div>
                        
<div>
  <blockquote>Since the 1960s, the area of low-oxygen water in the open ocean has increased by 1.7 million square miles. </blockquote>
</div>
                        

<p>Researchers complain that the oxygen problem doesn’t get the attention it deserves, with ocean acidification and warming grabbing the bulk of both news headlines and academic research. Just this April, for example, headlines screamed that global surface waters were hotter than they have ever been — a shockingly balmy average of <a href="https://climatereanalyzer.org/clim/sst_daily/">70 degrees F</a>. That’s obviously not good for marine life. But when researchers take the time to compare the three effects — warming, acidification, and deoxygenation — the impacts of low oxygen are <a href="https://www.nature.com/articles/s41559-020-01370-3">the worst</a>.</p>
                        
 <!-- footnoteBlock -->
                        

<div>
<p>“That’s not so surprising,” says Wilco Verberk, an eco-physiologist at Radboud University in the Netherlands. “If you run out of oxygen, the other problems are inconsequential.” Fish, like other animals, need to breathe.</p>
<hr><p>Oxygen levels in the world’s oceans have already dropped more than 2 percent between 1960 and 2010, and they are expected to decline up to <a href="https://www.annualreviews.org/doi/abs/10.1146/annurev.marine.010908.163855">7 percent</a> below the 1960 level over the next century. Some patches are worse than others — the top of the northeast Pacific has lost more than 15 percent of its oxygen. According to the IPCC’s 2019 special report on the oceans, from 1970 to 2010, the volume of “oxygen minimum zones” in the global oceans — where big fish can’t thrive but jellyfish can — increased by between <a href="https://www.ipcc.ch/srocc/chapter/summary-for-policymakers/">3 and 8 percent</a>.</p>
<p>The oxygen drop is driven by a few factors. First, the laws of physics dictate that warmer water can hold less dissolved gas than cooler water (this is why a warm soda is less fizzy than a cold one). As our world warms, the surface waters of our oceans lose oxygen, in addition to other dissolved gases. This simple solubility effect accounts for about half of the observed oxygen loss seen so far in the upper 1,000 meters of the ocean.</p>
</div>
                        
<div>

  <figure>

    <div>
      
                  
      <p><a href="https://e360.yale.edu/assets/site/Change-in-Ocean-O2-since-1960-2.png" data-caption="Percent change in dissolved ocean oxygen per decade since 1960." data-credit="Schmidtko et al. / GEOMAR">
  
  
  
    
  
  
  
      
    
                
    
                
    
                
    
                
    
                
    
                
    
            
  <img sizes="(min-width: 1450px) 1260px, (min-width: 980px) 940px, calc(100vw - 40px)" srcset="https://e360.yale.edu/assets/site/Change-in-Ocean-O2-since-1960-2.png 1472w, https://e360.yale.edu/assets/site/_200xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 200w, https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 400w, https://e360.yale.edu/assets/site/_600xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 600w, https://e360.yale.edu/assets/site/_800xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 800w, https://e360.yale.edu/assets/site/_1000xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 1000w, https://e360.yale.edu/assets/site/_1200xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 1200w, https://e360.yale.edu/assets/site/_1260xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png 1260w" src="https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/Change-in-Ocean-O2-since-1960-2.png" alt="Percent change in dissolved ocean oxygen per decade since 1960.">
</a>
      </p>
          </div>

        <figcaption>
              <p><span>Percent change in dissolved ocean oxygen per decade since 1960.</span>
          <span>Schmidtko et al. / GEOMAR</span></p>
    </figcaption>
    
  </figure>

</div> <!-- imageBlock -->
                        

<div>
<p>Deeper down, oxygen levels are largely governed by currents that mix surface waters downward, and this too is being affected by climate change. Melting ice adds fresh, less-dense water that resists downward mixing in key regions, and the high rate of atmospheric warming at the poles, as compared to the equator, also dampens winds that drive ocean currents.</p>
<p>Finally, bacteria living in the water, which feed off phytoplankton and other organic gunk as it falls to the seafloor, consume oxygen. This effect can be massive along coastlines, where fertilizer runoff feeds algae blooms, which in turn feed oxygen-gobbling bacteria. This creates ever more “dead zones,” including the infamous one in the Gulf of Mexico.</p>
<p>Researchers have even <a href="https://www.nature.com/articles/s41561-022-01096-w">suggested</a> that the rise of microplastics pollution has the potential to exacerbate the low-oxygen problem. This theory predicts that if zooplankton fill up on microplastics instead of phytoplankton — their usual prey — phytoplankton will proliferate, again feeding all those oxygen-gobbling bacteria on their way to the seafloor.
</p>
<p>The <a href="https://en.unesco.org/go2ne">Global Ocean Oxygen Network</a> — a scientific group set up as part of the United Nation’s Decade of Ocean Science for Sustainable Development, 2021-2030 — reports that since the 1960s, the area of low-oxygen water in the open ocean has increased by 1.7 million square miles. That’s an area a little more than half the size of Canada. By 2080, a 2021study<a href="https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2021GL095370"> reported</a>, more than 70 percent of the global oceans will experience noticeable deoxygenation.</p>
</div>
                        
<div>
  <blockquote>Low oxygen levels affect almost everything, including fish growth, reproduction, activity levels, and outright survival. </blockquote>
</div>
                        

<p>In 2018, hundreds of researchers concerned with oxygen loss signed the <a href="https://www.ocean-oxygen.org/declaration">Kiel Declaration</a> to urgently call for more awareness of the problem, alongside work to limit pollution and warming. Researchers are now in the midst of establishing a <a href="https://oceanrep.geomar.de/id/eprint/54665/">Global Ocean Oxygen Database and ATlas (GO2DAT)</a> to consolidate and map all the data.</p>
                        
 <!-- footnoteBlock -->
                        

<div>
<p>Andrew Babbin, a biogeochemist at MIT who is on the steering committee for GO2DAT, in 2021 <a href="https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1029/2021GB007001">mapped out</a> huge areas of extremely low oxygen in the Pacific. “It’s concerning for sure,” says Babbin, who hopes to repeat the mapping exercise in a decade or so to see how things change. One issue, he notes, is that low-oxygen conditions tend to host a class of anoxic bacteria that produce methane or nitrous oxide — potent greenhouse gases.</p>
<p>Modelling the net impacts of the three factors — solubility, mixing, and microbiology — has proven tricky. “Any one of those is hard,” says Babbin. “And then you put them all together, and it’s dramatically difficult to make any predictions.” In the tropics, for example, one model suggests that a shifting balance of biological factors that deplete oxygen, versus ocean mixing that delivers oxygen, will drive oxygen levels down until about 2150 but then <a href="https://www.nature.com/articles/d41586-018-05034-y">raise them</a> — a spot of potentially good news for tropical fish. On the whole, though, climate models seem to have <a href="https://www.nature.com/articles/s41561-018-0152-2">underestimated</a> changes in oxygen levels, which have been dropping faster than expected.</p>
</div>
                        
<div>

  <figure>

    <div>
      
                  
      <p><a href="https://e360.yale.edu/assets/site/_1500x1500_fit_center-center_80/20150508_006_M116_MVisbeck-GEOMAR_original.jpg" data-caption="Researchers at the Germany-based GEOMAR Institute deploy equipment to measure ocean oxygen levels. " data-credit="Martin Visbeck / GEOMAR">
  
  
  
    
  
  
  
      
    
                
    
                
    
                
    
                
    
                
    
                
    
            
  <img sizes="(min-width: 1450px) 1260px, (min-width: 980px) 940px, calc(100vw - 40px)" srcset="https://e360.yale.edu/assets/site/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 3839w, https://e360.yale.edu/assets/site/_200xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 200w, https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 400w, https://e360.yale.edu/assets/site/_600xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 600w, https://e360.yale.edu/assets/site/_800xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 800w, https://e360.yale.edu/assets/site/_1000xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 1000w, https://e360.yale.edu/assets/site/_1200xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 1200w, https://e360.yale.edu/assets/site/_1260xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg 1260w" src="https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/20150508_006_M116_MVisbeck-GEOMAR_original.jpg" alt="Researchers at the Germany-based GEOMAR Institute deploy equipment to measure ocean oxygen levels. ">
</a>
      </p>
          </div>

        <figcaption>
              <p><span>Researchers at the Germany-based GEOMAR Institute deploy equipment to measure ocean oxygen levels. </span>
          <span>Martin Visbeck / GEOMAR</span></p>
    </figcaption>
    
  </figure>

</div> <!-- imageBlock -->
                        

<div>
<p>The impacts on marine life are going to be complicated — and not good.</p>
<p>In general, a hot fish has a higher metabolism and needs more oxygen. Trout, for example, need five to six times more dissolved oxygen when waters are a balmy 75 degrees F than when they are a chilly 41 degrees F. So as waters warm and the oxygen seeps out, many marine creatures take a double hit. “Fish require a lot of oxygen, particularly the large ones we like to eat,” says Babbin. </p>
<p>Right now, there are about 6 milligrams of oxygen per liter of seawater in the tropics, and 11 milligrams per liter at the colder poles. If levels drop below 2 milligrams g (a 60 to 80 percent reduction), as they often do in some patches, the water is officially hypoxic — too low in oxygen to sustain many species. But subtler drops can also have a big impact. Fish already expend tens of times more energy to breathe than people do, notes Pauly, since they must pump the paltry oxygen out of viscous water.</p>
<p>The effects of low oxygen are well known to mountaineers, who experience headaches and potentially fatal confusion at high altitudes. Fish often try to swim away from low oxygen waters, but if they can’t escape, they become sluggish. Low oxygen levels affect <a href="https://www.journals.uchicago.edu/doi/10.1086/722899">almost everything</a> across the board, including fish growth, reproduction, activity levels, and outright survival. A host of genetic and metabolic changes can help fish conserve energy, but only within limits. In general, larger fish are <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/gcb.16319">more affected</a> simply because their body-volume-to-gill ratio is larger, making it harder to feed their cells with oxygen<strong>. </strong>Overfishing has already had the effect of decreasing the number of large fish in the ocean; deoxygenation looks set to exacerbate that effect, says Verberk.
</p>
</div>
                        
<div>
  <blockquote>Even if CO2 emissions stopped immediately, the oceans are already committed to a fourfold greater oxygen loss.</blockquote>
</div>
                        

<div>
<p>The long-term chronic effects of slightly decreased oxygen levels are harder to evaluate than the short-term effects of hypoxia, says Verberk, and researchers have <a href="https://www.journals.uchicago.edu/doi/10.1086/721468">urgently called</a> for more research on the subject. “For mild hypoxia over longer terms, there’s not that many studies, but it’s likely to have quite a strong impact,” he says. “If you continually have 7 percent less energy [from 7 percent less oxygen], that’s going to accumulate to quite a large deficit.”</p>
<p>Fish are already moving to find more oxygen. Those living in deeper waters may move down to colder, and therefore more oxygenated waters, while fish living in the top few hundred meters of the water column, like coastal rockfish, may move toward the surface to catch a breath. In a <a href="https://onlinelibrary.wiley.com/doi/10.1111/gcb.15821">study</a> of California reef fish from 1995 to 2009, 23 species moved up an average of 8.7 meters per decade toward the surface as oxygen levels declined. In the tropical northeast Atlantic, tuna have been driven into a narrower layer of water by oxygen declines; overall, they lost <a href="https://www.nature.com/articles/nclimate1304">15 percent</a> of their available habitat from 1960 to 2010.
</p>
<p>While warming and deoxygenation often go hand in hand, the two effects are not completely matched everywhere, all the time, says Verberk. The result is a patchwork of areas too hot or too low in oxygen for various fish to thrive, leading to a mishmash of different escape routes. Researchers are currently trying to <a href="https://www.nature.com/articles/s41586-020-2721-y">trying to map</a> the anticipated effects for different species, studying how temperature and oxygen might restrict their future habitats and how those ranges will overlap with each other.</p>
</div>
                        
<div>

  <figure>

    <div>
      
                  
      <p><a href="https://e360.yale.edu/assets/site/_1500x1500_fit_center-center_80/Bombay-Duck_Bin-Kang-3.png" data-caption="Bombay duck, a fish that thrives in low-oxygen waters, dominates a trawler's catch in southeast China." data-credit="Bin Kang">
  
  
  
    
  
  
  
      
    
                
    
                
    
                
    
                
    
                
    
                
    
            
  <img sizes="(min-width: 1450px) 832px, (min-width: 620px) 620px, 100vw" srcset="https://e360.yale.edu/assets/site/Bombay-Duck_Bin-Kang-3.png 2000w, https://e360.yale.edu/assets/site/_200xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 200w, https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 400w, https://e360.yale.edu/assets/site/_600xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 600w, https://e360.yale.edu/assets/site/_800xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 800w, https://e360.yale.edu/assets/site/_1000xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 1000w, https://e360.yale.edu/assets/site/_1200xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 1200w, https://e360.yale.edu/assets/site/_1260xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png 1260w" src="https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/Bombay-Duck_Bin-Kang-3.png" alt="Bombay duck, a fish that thrives in low-oxygen waters, dominates a trawler's catch in southeast China.">
</a>
      </p>
          </div>

        <figcaption>
              <p><span>Bombay duck, a fish that thrives in low-oxygen waters, dominates a trawler's catch in southeast China.</span>
          <span>Bin Kang</span></p>
    </figcaption>
    
  </figure>

</div> <!-- imageBlock -->
                        

<div>
<p>Once in waters where they can breathe, fish will then have to see what food they can find — and what predators they need to avoid. “Low oxygen is going to be a trigger to move to other places, but those other places are not empty,” says Verberk. “They will encounter other animals living there. It’s going to change competitive interactions between species.” Crabs, says Pauly, are currently marching on the Antarctic as those waters warm and will feast on unprotected mollusks. “There will be a mass destruction,” he says.</p>
<p>Over the past century, says Pauly, the greatest pressure on marine life has been <a href="https://www.sciencedirect.com/science/article/pii/S0272771419307644">overfishing</a>, which has caused huge declines in fish numbers. That could change. If we get overfishing under control, he continues, climate-related pressures will pose the biggest problem for marine life in the coming decades. A <a href="https://www.nature.com/articles/s41467-021-22584-4">2021 paper</a> showed that the oceans are already committed to a fourfold greater oxygen loss, even if CO2 emissions stop immediately.
</p>
</div>
                        
 <!-- footnoteBlock -->
                        

<p>If you chart out the trends in warming and oxygen loss, the cataclysmic endpoint for the ocean thousands of years from now would be “a soup that you cannot live in,” says Pauly. The ocean already has sporadic hypoxic zones, he says, “but you could imagine all the dead zones of the world coalescing into one, and that is the end of the thing.” If we don’t get a handle on greenhouse gas emissions, he says, “we have to expect this to happen.”</p>
                  </section>


    

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Magic123: One Image to High-Quality 3D Object Generation (201 pts)]]></title>
            <link>https://guochengqian.github.io/project/magic123/</link>
            <guid>36991434</guid>
            <pubDate>Thu, 03 Aug 2023 20:34:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://guochengqian.github.io/project/magic123/">https://guochengqian.github.io/project/magic123/</a>, See on <a href="https://news.ycombinator.com/item?id=36991434">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                <h2>Abstract</h2>
                <p>
                    <!-- <strong> -->
                    We present "Magic123", a two-stage coarse-to-fine solution for high-quality, textured 3D meshes
                    generation from a single unposed image in the wild using both 2D and 3D priors. In the first stage,
                    we optimize a neural radiance field to produce a coarse geometry. In the second stage, we adopt a
                    memory-efficient differentiable mesh representation to yield a high-resolution mesh with a visually
                    appealing texture. In both stages, the 3D content is learned through reference view supervision and
                    novel views guided by both 2D and 3D diffusion priors. We introduce a single tradeoff parameter
                    between the 2D and 3D priors to control exploration (more imaginative) and exploitation (more
                    precise) of the generated geometry. Additionally, We employ textual inversion and monocular depth
                    regularization to encourage consistent appearances across views and to prevent degenerate solutions,
                    respectively.
                    Magic123 demonstrates a significant improvement over previous image-to-3D techniques, as validated
                    through extensive experiments on synthetic benchmarks and diverse real-world images.
                    <!-- </strong> -->
                </p>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple reports third quarter results (122 pts)]]></title>
            <link>https://www.apple.com/newsroom/2023/08/apple-reports-third-quarter-results/</link>
            <guid>36991381</guid>
            <pubDate>Thu, 03 Aug 2023 20:31:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.apple.com/newsroom/2023/08/apple-reports-third-quarter-results/">https://www.apple.com/newsroom/2023/08/apple-reports-third-quarter-results/</a>, See on <a href="https://news.ycombinator.com/item?id=36991381">Hacker News</a></p>
<div id="readability-page-1" class="page">


	
    







 
<nav id="ac-localnav" lang="en-US" role="navigation" aria-label="Newsroom" data-analytics-region="local nav" data-sticky="">
	
    
    
        




    
    

</nav>



<main id="main" role="main"> 



<span id="opens-in-new-window">opens in new window</span>

	

<section>
<article data-analytics-activitymap-region-id="article">






    
    
    







<div>
    
    <div>
                
                
                    <span>PRESS RELEASE</span>
                
                
                    <span>August 3, 2023</span>
                
                
            </div>

    <div>
            
            
            
                <h2>
                    
    
        Apple reports third quarter results
    

                </h2>
            
        </div>

    <div>
            
            
                Services revenue reaches new all-time high <p>
Installed base of active devices sets all-time record
            
        </p></div>

    
        
    
    
    
    
    

    

</div>




    
    
    

    
    
    


     
     
    
    
        <div>
             
                 <div><span>CUPERTINO, CALIFORNIA</span> Apple today announced financial results for its fiscal 2023 third quarter ended July 1, 2023. The Company posted quarterly revenue of $81.8 billion, down 1 percent year over year, and quarterly earnings per diluted share of $1.26, up 5 percent year over year.&nbsp;
</div>
                 
             
                 <div>“We are happy to report that we had an all-time revenue record in Services during the June quarter, driven by over 1 billion paid subscriptions, and we saw continued strength in emerging markets thanks to robust sales of iPhone,” said Tim Cook, Apple’s CEO. “From education to the environment, we are continuing to advance our values, while championing innovation that enriches the lives of our customers and leaves the world better than we found it.”
</div>
                 
             
                 <div>“Our June quarter year-over-year business performance improved from the March quarter, and our installed base of active devices reached an all-time high in every geographic segment,” said Luca Maestri, Apple’s CFO. “During the quarter, we generated very strong operating cash flow of $26 billion, returned over $24 billion to our shareholders, and continued to invest in our long-term growth plans.”
</div>
                 
             
                 <div>Apple’s board of directors has declared a cash dividend of $0.24 per share of the Company’s common stock. The dividend is payable on August 17, 2023 to shareholders of record as of the close of business on August 14, 2023.
</div>
                 
             
                 <div>Apple will provide live streaming of its Q3 2023 financial results conference call beginning at 2:00 p.m. PT on August 3, 2023 at <a href="http://apple.com/investor/earnings-call" target="_blank">apple.com/investor/earnings-call</a>. The webcast will be available for replay for approximately two weeks thereafter.
</div>
                 
             
         </div>
 

    
    
    




    


    
    
    

<div>
		
        <ul>
			
			<li>
                
                <div>
                    <p id="docsanddownloads-1f20a5f6860f08a7d7269a6343c0828a">Consolidated Financial Statements</p>
                    
                </div>
            </li>

        </ul>
    </div>

    
    
    




    




    
    
    






    






    
    
    






    






    
    
    





    
    
    <div>
            © 2023 Apple Inc. All rights reserved. Apple and the Apple logo are trademarks of Apple. Other company and product names may be trademarks of their respective owners.<br>


        </div>













</article>



</section>
</main>


	

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Color-Diffusion: using diffusion models to colorize black and white images (291 pts)]]></title>
            <link>https://github.com/ErwannMillon/Color-diffusion</link>
            <guid>36991293</guid>
            <pubDate>Thu, 03 Aug 2023 20:24:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ErwannMillon/Color-diffusion">https://github.com/ErwannMillon/Color-diffusion</a>, See on <a href="https://news.ycombinator.com/item?id=36991293">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">Color Diffusion</h2>
<p dir="auto">Using diffusion models to colorize black and white images.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/inference/total_1.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/inference/total_1.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/inference/total_2.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/inference/total_2.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/inference/total_3.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/inference/total_3.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/inference/total_4.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/inference/total_4.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/inference/total_8.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/inference/total_8.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/inference/total_90.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/inference/total_90.gif" width="128" height="128" data-animated-image=""></a>
</p>
<h2 tabindex="-1" dir="auto">Overview</h2>
<p dir="auto">This project is a simple example of how we can use diffusion models to colorize black and white images.</p>
<p dir="auto">This implementation uses the LAB color space, a 3 channel alternative to the RGB color space.
The "L" (Lightness) channel in this space is equivalent to a greyscale image: it represents the luminous intensity of each pixel. The two other channels are used to represent the color of each pixel.</p>
<div dir="auto"><p>To train the model, we first load color images and convert them to LAB.
Then, we add noise only to the color channels, keeping the L channel constant. The model gets this channel "for free" because it doesn't need to learn how to predict the greyscale image: it is always known at train and test time.
</p></div>

<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/forward_diff.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/forward_diff.gif" width="128" height="128" data-animated-image=""></a>
</p>
<b>Forward Diffusion Process</b>

<p dir="auto"><em>Note that we actually don't need to go through all of the steps of the diffusion process to get to timestep t. Our forward diffusion process is non-Markovian, but the entire diffusion process is shown for illustrative purposes</em></p>
<div dir="auto"><p>The model is a UNet that takes a 3 channel LAB input (the ground-truth greyscale channel concatenated with noised AB channels) and outputs a 2 channel prediction of the color noise.
</p></div>

<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/train/total1.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/train/total1.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/train/total2.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/train/total2.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/train/total3.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/train/total3.gif" width="128" height="128" data-animated-image=""></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ErwannMillon/Color-diffusion/blob/main/visualization/train/total4.gif"><img src="https://github.com/ErwannMillon/Color-diffusion/raw/main/visualization/train/total4.gif" width="128" height="128" data-animated-image=""></a>
</p>
<b>Forward diffusion and denoising at train time</b>

<p>
In addition to receiving the greyscale channel as input, the UNet is also conditioned on features extracted from the greyscale channel. Intermediate feature maps from an encoder (implemented as the first half of a UNet) are concatenated with the features of the main denoising UNet throughout the downsampling stage of the forward pass.
</p><h2 tabindex="-1" dir="auto">Future Work / Ideas</h2>
<p dir="auto">This was just a quick proof of concept to satisfy my curiosity and get a feel for training diffusion models from scratch, so the results are very basic. There are many ways this project could be improved, such as:</p>
<ul dir="auto">
<li>Using pretrained face recognition networks like ArcFace or FaceNet as feature extractors to get the conditioning features</li>
<li>Implementing cross attention on the embeddings</li>
<li>Pretraining the greyscale feature extractor as the encoder stage of a greyscale autoencoder</li>
</ul>
<h2 tabindex="-1" dir="auto">References</h2>
<p dir="auto">A lot of code for the dataset and LAB color operations was adapted from moein-sharitania's colorization project, which used Conditional GANs
<a href="https://github.com/moein-shariatnia/Deep-Learning">https://github.com/moein-shariatnia/Deep-Learning</a></p>
<p dir="auto">I implemented optional dynamic thresholding as in Assembly AI's Minimagen project (the Assembly AI blog posts are excellent for getting a deep understanding of the maths and concepts behind diffusion models)
<a href="https://www.assemblyai.com/blog/minimagen-build-your-own-imagen-text-to-image-model/" rel="nofollow">https://www.assemblyai.com/blog/minimagen-build-your-own-imagen-text-to-image-model/</a></p>
<p dir="auto">The UNet architecture was adapted from denoising-diffusion-pytorch
<a href="https://github.com/lucidrains/denoising-diffusion-pytorch">https://github.com/lucidrains/denoising-diffusion-pytorch</a></p>
<h2 tabindex="-1" dir="auto">Usage</h2>
<p dir="auto">Run <code>bash download_dataset.sh</code> to download the CelebA dataset and extract it</p>
<p dir="auto">Use inference.py for command line colorization.
<code>python inference.py --image-path &lt;IMG_PATH&gt; --checkpoint &lt;CKPT_PATH&gt; --output &lt;OUTPUT_PATH&gt;</code></p>
<p dir="auto">Or run
<code>python app.py</code> for a simple gradio web UI</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cognitive AI for ADHD (177 pts)]]></title>
            <link>https://www.comigo.ai</link>
            <guid>36990615</guid>
            <pubDate>Thu, 03 Aug 2023 19:30:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.comigo.ai">https://www.comigo.ai</a>, See on <a href="https://news.ycombinator.com/item?id=36990615">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="siteWrapper">
      
        
      

      













      <main id="page" role="main">
        
          
<article id="sections" data-page-sections="646bcf43ddbed207d9f25ff5">
  
  
    
    


  


<div data-fluid-engine="true" data-test="page-section" data-section-theme="" data-section-id="6488ac4e3444a701ffd8d1f2" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;customSectionHeight&quot;: 9,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 1,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: {
&quot;enabled&quot;: true,
&quot;type&quot;: &quot;none&quot;,
&quot;width&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 100.0
},
&quot;height&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 6.0
},
&quot;isFlipX&quot;: false,
&quot;isFlipY&quot;: false,
&quot;offset&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 0.0
},
&quot;stroke&quot;: {
&quot;style&quot;: &quot;solid&quot;,
&quot;color&quot;: {
&quot;type&quot;: &quot;SITE_PALETTE_COLOR&quot;,
&quot;sitePaletteColor&quot;: {
&quot;colorName&quot;: &quot;lightAccent&quot;,
&quot;alphaModifier&quot;: 1.0
}
},
&quot;thickness&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 2.0
},
&quot;dashLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 5.0
},
&quot;gapLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 15.0
},
&quot;linecap&quot;: &quot;square&quot;
}
},
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section=""><div data-block-type="2" id="block-83ab0eb33729d4034f95">

<p>
  <h2>Your Cognitive AI for ADHD</h2>
</p>



</div><div data-block-type="2" id="block-yui_3_17_2_1_1686898154223_17635">

<p>Helping the 300M people with ADHD thrive in our increasingly distracting world</p>



</div><div data-animation-role="image" data-test="image-block-fluid-outer-wrapper" data-block-type="5" id="block-db34ce705c3c53f9abbc">
                
            
              
              
              
              
              
              
              <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png" data-image="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png" data-image-dimensions="1278x686" data-image-focal-point="0.5,0.5" alt="" data-load="false" src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png" width="1278" height="686" sizes="(max-width: 768px) 100vw, 83.33333333333334vw" srcset="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/5dec2a4e-ecd0-419f-92ad-85442c31287f/homepage+hero.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs"></p>
          
              </div></div>

  
    
    


  


<div data-fluid-engine="true" data-test="page-section" data-section-theme="" data-section-id="6488ae5b96feda0c6f068305" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--small&quot;,
&quot;customSectionHeight&quot;: 1,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--top&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 2,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: {
&quot;enabled&quot;: true,
&quot;type&quot;: &quot;none&quot;,
&quot;width&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 100.0
},
&quot;height&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 6.0
},
&quot;isFlipX&quot;: false,
&quot;isFlipY&quot;: false,
&quot;offset&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 0.0
},
&quot;stroke&quot;: {
&quot;style&quot;: &quot;solid&quot;,
&quot;color&quot;: {
&quot;type&quot;: &quot;SITE_PALETTE_COLOR&quot;,
&quot;sitePaletteColor&quot;: {
&quot;colorName&quot;: &quot;lightAccent&quot;,
&quot;alphaModifier&quot;: 1.0
}
},
&quot;thickness&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 2.0
},
&quot;dashLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 5.0
},
&quot;gapLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 15.0
},
&quot;linecap&quot;: &quot;square&quot;
}
},
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section=""><div data-animation-role="image" data-test="image-block-fluid-outer-wrapper" data-block-type="5" id="block-247db75ad8734e013afe">
                
            
              
              
              
              
              
              
              <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png" data-image="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png" data-image-dimensions="548x723" data-image-focal-point="0.5,0.5" alt="" data-load="false" src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png" width="548" height="723" sizes="(max-width: 768px) 100vw, 37.5vw" srcset="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/64cbe49a-78d7-46b2-8f26-34ce14e6261f/assistant.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs"></p>
          
              </div><div data-block-type="2" id="block-c8af7699f0ec45d065c1">

<p>
  <h2>Your conversational AI chatbot for ADHD</h2>
</p>



</div><div data-block-type="2" id="block-0efadb2d0d892eaf4b8b">

<p>Comigo is your 24/7 confidant, offering personalized advice and structuring your ideas into tasks, while continually improving to better help you.</p>



</div></div>

  
    
    


  


<div data-fluid-engine="true" data-test="page-section" data-section-theme="" data-section-id="6488aeab03a5661147d874c1" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--small&quot;,
&quot;customSectionHeight&quot;: 1,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 2,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: {
&quot;enabled&quot;: true,
&quot;type&quot;: &quot;none&quot;,
&quot;width&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 100.0
},
&quot;height&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 6.0
},
&quot;isFlipX&quot;: false,
&quot;isFlipY&quot;: false,
&quot;offset&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 0.0
},
&quot;stroke&quot;: {
&quot;style&quot;: &quot;solid&quot;,
&quot;color&quot;: {
&quot;type&quot;: &quot;SITE_PALETTE_COLOR&quot;,
&quot;sitePaletteColor&quot;: {
&quot;colorName&quot;: &quot;lightAccent&quot;,
&quot;alphaModifier&quot;: 1.0
}
},
&quot;thickness&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 2.0
},
&quot;dashLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 5.0
},
&quot;gapLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 15.0
},
&quot;linecap&quot;: &quot;square&quot;
}
},
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section=""><div data-animation-role="image" data-test="image-block-fluid-outer-wrapper" data-block-type="5" id="block-4da3372140ac91569360">
                
            
              
              
              
              
              
              
              <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png" data-image="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png" data-image-dimensions="789x758" data-image-focal-point="0.5,0.5" alt="" data-load="false" src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png" width="789" height="758" sizes="(max-width: 768px) 100vw, 45.83333333333333vw" srcset="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/e3d855ed-2ddd-48f9-b61d-f79a95e8f020/coach.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs"></p>
          
              </div><div data-block-type="2" id="block-9c147667bd410d8d2407">

<p>
  <h2>Your AI Co-Brain</h2>
</p>



</div><div data-block-type="2" id="block-bd6a59294f0acbe28b56">
  <p>Comigo helps you feel good at the end of the day by making sure today’s work is done and tomorrow’s plan is ready.</p><ul data-rte-list="default"><li><p>Day to day intelligent task planning, scheduling, sequencing and prioritization.</p></li><li><p>Resilient rescheduling when interrupted.</p></li><li><p>Focus guarding and single task execution.</p></li><li><p>Positive reinforcement &amp; intrinsic reward mechanics.</p></li></ul>
</div></div>

  
    
    


  


<div data-fluid-engine="true" data-test="page-section" data-section-theme="" data-section-id="6488aee00c7d0a46914f4169" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--small&quot;,
&quot;customSectionHeight&quot;: 1,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 2,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: {
&quot;enabled&quot;: true,
&quot;type&quot;: &quot;none&quot;,
&quot;width&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 100.0
},
&quot;height&quot;: {
&quot;unit&quot;: &quot;vw&quot;,
&quot;value&quot;: 6.0
},
&quot;isFlipX&quot;: false,
&quot;isFlipY&quot;: false,
&quot;offset&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 0.0
},
&quot;stroke&quot;: {
&quot;style&quot;: &quot;solid&quot;,
&quot;color&quot;: {
&quot;type&quot;: &quot;SITE_PALETTE_COLOR&quot;,
&quot;sitePaletteColor&quot;: {
&quot;colorName&quot;: &quot;lightAccent&quot;,
&quot;alphaModifier&quot;: 1.0
}
},
&quot;thickness&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 2.0
},
&quot;dashLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 5.0
},
&quot;gapLength&quot;: {
&quot;unit&quot;: &quot;px&quot;,
&quot;value&quot;: 15.0
},
&quot;linecap&quot;: &quot;square&quot;
}
},
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section=""><div data-animation-role="image" data-test="image-block-fluid-outer-wrapper" data-block-type="5" id="block-74537bea5e0ea5032560">
                
            
              
              
              
              
              
              
              <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png" data-image="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png" data-image-dimensions="559x735" data-image-focal-point="0.5,0.5" alt="" data-load="false" src="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png" width="559" height="735" sizes="(max-width: 768px) 100vw, 33.33333333333333vw" srcset="https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/646bcefbb0f337065eb99f89/6cd1c1a0-0cee-41c9-9b6d-140064fad05c/mentor.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs"></p>
          
              </div><div data-block-type="2" id="block-61a22f85af07e078f294">

<p>
  <h2>Your analyst for continual improvement</h2>
</p>



</div><div data-block-type="2" id="block-8d177053f43c9e913086">
  <p>Comigo’s specialized AI model for ADHD helps you learn more about yourself, measures your progress and helps you grow and thrive.</p><ul data-rte-list="default"><li><p>Track your growth and measure improvement</p></li><li><p>Self-training AI evolves to better help you</p></li></ul>
</div></div>

  
</article>


          

          
            
          
        
      </main>
      

      
        

      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Everyone Is Beautiful and No One Is Horny (386 pts)]]></title>
            <link>https://bloodknife.com/everyone-beautiful-no-one-horny/</link>
            <guid>36990215</guid>
            <pubDate>Thu, 03 Aug 2023 19:01:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bloodknife.com/everyone-beautiful-no-one-horny/">https://bloodknife.com/everyone-beautiful-no-one-horny/</a>, See on <a href="https://news.ycombinator.com/item?id=36990215">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    
<h3 itemprop="name">
            Everyone Is Beautiful and No One Is Horny    </h3>                    
<h4><strong>Modern action and superhero films fetishize the body, even as they desexualize it.</strong></h4>



<p><strong>by RS Benedict</strong></p>



<p>When Paul Verhoeven adapted <em>Starship Troopers</em> in the late 1990s, did he know he was predicting the future? The endless desert war, the ubiquity of military propaganda, a cheerful face shouting victory as more and more bodies pile up?</p>



<p>But the scene that left perhaps the greatest impact on the minds of Nineties kids—and the scene that anticipated our current cinematic age the best—does not feature bugs or guns. It is, of course, the shower scene, in which our heroic servicemen and -women enjoy a communal grooming ritual.</p>



<p>On the surface, it is idyllic: racial harmony, gender equality, unity behind a common goal—and firm, perky asses and tits.</p>



<p>And then the characters speak. The topic of conversation? Military service, of course. One joined for the sake of her political career. Another joined in the hopes of receiving her breeding license. Another talks about how badly he wants to kill the enemy. No one looks at each other. No one flirts.</p>



<p>A room full of beautiful, bare bodies, and everyone is only horny for war.</p>



<p>*  *  *  *  *</p>



<p>In the early 2000s, there was a brief period where actresses pretended that their thinness was natural, almost accidental. Skinny celebrities confessed their love of burgers and fries in magazines; models undergoing profile interviews engaged in public consumption of pasta; leading ladies joked about how little they exercised and how much they hated it. It was all bullshit: no one looks like that without calorie restriction. We knew it then, and we know it now.&nbsp;</p>



<p>We don’t pretend anymore. The promotional cycles for blockbuster movies now include detailed descriptions of the performers’ fitness regimens. We watch actors doing burpees or shaking ropes with expensive personal trainers. There is some talk of diets, though not terribly detailed—and no mention of steroids or other hormonal supplements, even though male actors’ suddenly ultra-swole selfies on Instagram suggest physiques crafted with chemical assistance.</p>



<p>Actors are more physically perfect than ever: impossibly lean, shockingly muscular, with magnificently coiffed hair, high cheekbones, impeccable surgical enhancements, and flawless skin, all displayed in form-fitting superhero costumes with the obligatory shirtless scene thrown in to show off shredded abs and rippling pecs.</p>



<figure><blockquote><p><span><strong>Even background extras are good-looking, or at least inoffensively bland. No one is ugly. No one is really fat. Everyone is beautiful.&nbsp;</strong></span></p></blockquote></figure>



<p>And this isn’t just the lead and the love interest: supporting characters look this way too, and even villains (frequently clad in monstrous makeup) are still played by conventionally attractive performers. Even background extras are good-looking, or at least inoffensively bland. No one is ugly. No one is really fat. Everyone is beautiful.</p>



<p>And yet, <a href="https://www.cheatsheet.com/entertainment/marvel-movies-this-esteemed-director-says-theyre-not-sexy-enough.html/"><strong>no one is horny</strong></a>. Even when they have sex, no one is horny. No one is attracted to anyone else. No one is hungry for anyone else.</p>



<p>When revisiting a beloved Eighties or Nineties film, Millennial and Gen X viewers are often startled to encounter long-forgotten sexual content content: John Connor’s conception in <em>Terminator</em>, Jamie Lee Curtis’s toplessness in <em>Trading Places</em>, the spectral blowjob in <em>Ghostbusters</em>. These scenes didn’t shock us when we first saw them. Of <em>course </em>there’s sex in a movie. Isn’t there always?</p>



<p>The answer, of course, is not anymore—at least not when it comes to modern blockbusters</p>



<div><figure><img decoding="async" loading="lazy" src="https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/qicstnq7qznw0tipo9fa.jpg?resize=511%2C319&amp;ssl=1" alt="" width="511" height="319" srcset="https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/qicstnq7qznw0tipo9fa.jpg?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/qicstnq7qznw0tipo9fa.jpg?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/qicstnq7qznw0tipo9fa.jpg?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/qicstnq7qznw0tipo9fa.jpg?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/qicstnq7qznw0tipo9fa.jpg?w=1920&amp;ssl=1 1920w" sizes="(max-width: 511px) 100vw, 511px" data-recalc-dims="1"></figure></div>



<p>We’re told that Tony Stark and Pepper Potts are an item, but no actual romantic or sexual chemistry between them is shown in the films. Wonder Woman and Steve Trevor utterly lack the sexual chemistry to convince us that either of them would be thirsty enough to commandeer a coma victim’s body (as they do in <em>Wonder Woman 1984</em>) so they can enjoy a posthumous hookup. In defiance of Norse mythology, Chris Hemsworth’s Thor<em> </em>smiles at Natalie Portman like a dumb golden retriever puppy without ever venturing to rend her asunder with his mighty hammer, so to speak. Not that the competition is any better. Despite accusations of being an incel icon, it is Heath Ledger’s Joker, not Christian Bale’s chaste and sexless Batman, who exudes the most sexual energy in the Dark Knight trilogy.</p>



<p>And speaking of Christopher Nolan’s inexplicably sexless oeuvre—did anyone else think it odd how <em>Inception </em>enters the deepest level of a rich man’s subconscious and finds <em>not </em>a psychosexual Oedipal nightmare of staggering depravity, but… a ski patrol?</p>



<p>*  *  *  *  *</p>



<p>Let’s not pretend that Old Hollywood was a progressive haven of body positivity. Since the departure of voluptuous vamp Theda Bara from the silver screen, actors have always gone to extremes to maintain a certain look. Rita Hayworth underwent an ethnic makeover to appear more Caucasian so she could get leading roles. Stars of the 1920s limited their fluid consumption to two glasses a day to avoid water weight. Jane Fonda suffered from severe bulimia at the height of her sex symbol status; so did Marlon Brando.</p>



<figure><blockquote><p><span><strong>Snake Plissken didn’t fuck on screen, but the character radiates overwhelming sex-haver energy.&nbsp;</strong></span></p></blockquote></figure>



<p>But old films still featured recognizable human bodies and human faces—bodies that could theoretically be achieved by a single person without the aid of a team of personal trainers, dieticians, private chefs, and chemists.&nbsp;</p>



<div><figure><img decoding="async" loading="lazy" src="https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/actors-featured-2.jpg?resize=503%2C252&amp;ssl=1" alt="" width="503" height="252" srcset="https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/actors-featured-2.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/actors-featured-2.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/actors-featured-2.jpg?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/actors-featured-2.jpg?resize=1300%2C650&amp;ssl=1 1300w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/actors-featured-2.jpg?w=1400&amp;ssl=1 1400w" sizes="(max-width: 503px) 100vw, 503px" data-recalc-dims="1"></figure></div>



<p>In the films of the Eighties and Nineties, leading actors were good looking, yes, but still human. Kurt Russel’s Snake Plissken was a hunk, but in shirtless scenes his abs have no definition. Bruce Willis was handsome, but he’s more muscular now than he was in the Nineties, when he was routinely branded a bona fide sex symbol. And when Isabella Rosselini strips in <em>Blue Velvet</em>, her skin is pale and her body is soft. She looks vulnerable and real.</p>



<p>And yet, these characters fucked. <em>Blue Velvet’s </em>Dorothy Vallens and Jeffrey Beaumant fucked. Michael Keaton’s Batman and Michelle Pfeiffer’s domme Catwoman fucked. Kyle Reese and Sarah Connor fucked. Snake Plissken didn’t fuck on screen, but the character radiates overwhelming sex-haver energy. And I defy you to find a mainstream film with a moment as horny and gay as the <a href="https://io9.gizmodo.com/the-true-story-of-the-lost-boys-sax-man-1842774832"><strong>Sexy Saxophone Solo</strong></a> from <em>The Lost Boys</em>.</p>



<p>*  *  *  *  *</p>



<p>Seen today, one of the most striking scenes in 1982’s Poltergeist is not the evil clown doll or the monster tree, but a moment of relaxed affection between the parents. The father—a bald, beer-bellied Craig T. Nelson—cracks jokes and prances for his wife, who wears a frumpy nightgown and smokes a joint and yammers weed thoughts and laughs at her husband’s silly display. Finally, the husband playfully dives onto the bed. Neither character is glamorous in this scene, but their relationship feels frisky and lived-in and charismatic and <em>real</em>.</p>



<p>The house looks real, too. There are toys and magazines scattered around the floor. There are cardboard boxes waiting to be unpacked since the recent move. Framed pictures rest against the wall; the parents haven’t gotten around to mounting them yet. The kitchen counters are cluttered and mealtimes are rambunctious and sloppy, as one expects in a house with three children. They’re building a pool in the backyard, but not for appearances: it’s a place for the kids to swim, for the parents to throw parties, and for the father to reacquaint himself with his love of diving.</p>



<p>At the time, this house represented an aspirational ideal of American affluence.</p>



<p>Compare this to homes in films now: massive, sterile cavernous spaces with minimalist furniture. Kitchens are industrial-sized and spotless, and they contain no food. There is no excess. There is no mess.</p>



<figure><blockquote><p><span><strong>A body is no longer a holistic system. It is not the vehicle through which we experience joy and pleasure. It is not a home to live in and be happy.&nbsp;</strong></span></p></blockquote></figure>



<p>In her blog McMansion Hell, Kate Wagner examines precisely why these widely-hated 5000-square foot housing bubble behemoths are so awful. Over and over again, she reiterates the point that McMansions are not built to be homes; they’re built to be short-term investments.&nbsp;</p>



<p><a href="https://mcmansionhell.com/post/150597521816/mcmansions-101-revisited-aesthetics-aside-why"><strong>Kate writes</strong></a>, “The inside of McMansions are designed in order to cram the most ‘features’ inside for the lowest costs.” These features exist to increase the house’s resale value, not to make it a good place to live. No thought is given to the labor needed to clean and maintain these spaces. The master bathroom includes intricate stone surfaces that can only be scrubbed with a toothbrush; the cathedral ceilings in the living room raise the heating and cooling costs to an exorbitant sum; the chandelier in the grand entryway dangles so high that no one can replace the bulbs in it, even with a stepladder.</p>



<p>The same fate has befallen our bodies. A body is no longer a holistic system. It is not the vehicle through which we experience joy and pleasure during our brief time in the land of the living. It is not a home to live in and be happy. It, too, is a collection of features: six pack, thigh gap, cum gutters. And these features exist not to make our lives more comfortable, but to increase the value of our assets. Our bodies are investments, which must always be optimized to bring us… what, exactly? Some vague sense of better living? Is a life without bread objectively better than a life with it? When we were children, did we dream of counting every calorie and logging every step?</p>



<p>A generation or two ago, it was normal for adults to engage in sports not purely as self-improvement but as an act of leisure. People danced for fun; couples socialized over tennis; kids played stickball for lack of anything else to do. Solitary exercise at the gym also had a social, rather than moral, purpose. People worked out to look hot so they could attract other hot people and fuck them. Whatever the ethos behind it, the ultimate goal was pleasure.</p>



<div><figure><img decoding="async" loading="lazy" src="https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/ConanBarbarian-1280x720-1.jpg?resize=520%2C293&amp;ssl=1" alt="" width="520" height="293" srcset="https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/ConanBarbarian-1280x720-1.jpg?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/ConanBarbarian-1280x720-1.jpg?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/ConanBarbarian-1280x720-1.jpg?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/bloodknife.com/wp-content/uploads/2021/02/ConanBarbarian-1280x720-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 520px) 100vw, 520px" data-recalc-dims="1"></figure></div>



<p>Not so today. Now, we are perfect islands of emotional self-reliance, and it is seen as embarrassing and co-dependent to want to be touched. We are doing this for ourselves, because we, apropos of nothing, desperately want to achieve a physical standard set by some invisible Other in an insurance office somewhere.&nbsp;</p>



<p>Contemporary gym ads focus on rigidly isolated self-improvement: be your best self. Create a new you. We don’t exercise, we don’t work out: we <em>train</em>, and we train in fitness programs with names like <em>Booty Bootcamp</em>, as if we’re getting our booties battle-ready to fight in the Great Booty War. There is no promise of intimacy. Like our heroes in the Marvel Cinematic Universe, like Rico and Dizzy and all the other infantry in <em>Starship Troopers</em>, we are horny only for annihilation.</p>



<p>A lesser-discussed side effect of extreme calorie restriction is the loss of libido. Bodybuilders experience this as they go on crash diets to quickly cut fat so that their muscles will show during competitions; though they look like physically perfect specimens of manhood, they don’t dream of women, but of cheeseburgers and fries. Many eating disorder patients lose their sex drive completely and even stop menstruating.</p>



<p>When a body receives fewer calories, it must prioritize essential life support systems over any function not strictly necessary for the body’s immediate survival. Sexual desire falls into the latter category, as does high-level abstract thought. A body that restricts food and increases exercise believes it is undergoing a famine, which is not an ideal time to reproduce.</p>



<p>Is there anything more cruelly Puritanical than enshrining a sexual ideal that leaves a person unable to enjoy sex?</p>



<p>*  *  *  *  *</p>



<p>When a nation feels threatened, it gets swole. Germans and Norwegians became <a href="https://www.movementhealth.com.au/news/physical-culture-movement/"><strong>obsessed with individual self-improvement through physical fitness</strong></a> around the end of the Napoleonic Era. British citizens took up this Physical Culture as the 19th century—and their empire—began to wane. And yoga, in its current practice as a form of meditative strength training, <a href="https://www.bbc.co.uk/blogs/adamcurtis/entries/2989a78a-ee94-385e-808f-c9c7c38d1cb7"><strong>came out of the Indian Independence movement</strong></a> of the 1920s and 30s.</p>



<p>The impetus of these movements isn’t fitness for the sake of pleasure, for the pure joys of strength and physical beauty. It’s competitive. It’s about getting strong enough to fight The Enemy, whoever that may be.</p>



<figure><blockquote><p><span><strong>The impetus of these movements isn’t fitness for the sake of pleasure, for the pure joys of strength and physical beauty. It’s competitive.&nbsp;</strong></span></p></blockquote></figure>



<p>The United States is, of course, not immune to this. The Presidential Fitness Test sprang up in the mid-20th century after studies found that American children lagged behind Europeans in certain tests of flexibility and calisthenic ability. Cold War paranoia only amped up this anxiety, <a href="https://podcasts.apple.com/us/podcast/bonus-the-presidents-physical-fitness-test/id1380008439?i=1000495675212"><strong>particularly as we entered the 1980s</strong></a>. What if our kids were too fat to defeat communism? This obsession meshed beautifully with boomer yuppie narcissism and birthed the aerobics fad.</p>



<p>Then the Nineties hit, the Berlin Wall fell, and spandex and sweatbands became hilariously passe. While America still obsessed over thinness, it was not for the sake of strength. Two things happened at the dawn of the new millennium to bring back physical culture.</p>



<p>The first occurred in 1998, <a href="https://www.washingtonpost.com/wp-srv/style/guideposts/fitness/optimal.htm"><strong>when BMI standards shifted a few points</strong></a>. Formerly, one needed a BMI of 27 (for women) or 28 (for men) to be classified as overweight, but the new standard lowered the cutoff to 25 points. Twenty-nine million Americans instantly became overweight without gaining an ounce. Under the new guidelines, doctors could prescribe them diet drugs or recommend weight loss surgery.</p>



<p>A nationwide panic rose; headlines screamed about a new plague of fat people whose bodies were ticking time bombs destined to deliver death and destruction at any moment. Stock footage of fat people ambling about in public, filmed from the neck down to protect their identities (and more effectively dehumanize them), became a common sight on television news as bony broadcasters droned about the horrors of the Obesity Epidemic. Curiously, hardly any of the reports on this sudden increase in overweight/obese Americans bothered to mention the BMI standard shift.</p>



<p>The second event was, of course, 9/11.</p>



<p>The attack on the World Trade Center and the Pentagon sparked a new War on Terror, and America needed to get in shape so we could <em>win that war</em>. The USA’s hyper-militaristic troop-worshipping post-9/11 culture seeped into the panic over obesity and gave birth to a terrifying, swole baby. Public school gym classes featured special military fitness days in which students practiced throwing mock grenades. George W. Bush added an Adult Fitness Challenge to the <a href="https://www.wellandgood.com/10-things-you-never-knew-about-the-presidents-physical-fitness-challenge/#:~:text=In%201966%2C%20the%20Presidential%20Physical,600%2Dyard%20walk%2Frun"><strong>Presidential Fitness program</strong></a>. On American and British television, a new wave of documentaries and reality shows sprang up to bellow at us for being too fat to defeat al Qaeda: <em>Honey, We’re Killing the Kids</em>; <em>Supersize Me</em>; <em>You Are What You Eat</em>, in which a bony harridan screeched at Britons whose feces did not meet her exacting standards; <em>The Biggest Loser</em>, where lean coaches bellowed at fat contestants in a manner strikingly similar to that of a stereotypical drill instructor.</p>



<figure><blockquote><p><span><strong>The new muscle era lacks the eroticism of Eighties action cinema.&nbsp;</strong></span></p></blockquote></figure>



<p>And muscles—giant, pulsating, steroid-enhanced muscles—returned to screens. But the new muscle era lacks the eroticism of Eighties action cinema. Arnold Schwarzenegger showed his glutes in <em>Terminator</em>; Sylvester Stallone stripped for <em>First Blood </em>and <em>Tango &amp; Cash</em>; <em>Bloodsport </em>shows more of Jean Claude Van Damme’s body than that of his love interest.</p>



<p>For the most part, though, today’s cinema hunks are nevernudes. The Marvel Cinematic Universe is strictly PG-13, as one expects from a Disney product. And even in the DC universe, there’s very little of human sexuality. Capefans’ demands for more “mature” superhero movies always mean more graphic violence, <em>not </em>more sex. They panicked over Dr. Manhattan’s glowing blue penis in <em>Watchmen</em>, and they still haven’t forgiven Joel Schumacher for putting nipples on the batsuit.&nbsp;</p>



<p>Today’s stars are action figures, not action heroes. Those perfect bodies exist only for the purpose of inflicting violence upon others. To have fun is to become weak, to let your team down, and to give the enemy a chance to win, like Thor did when he got fat in <em>Endgame</em>.</p>



<p>This cinematic trend reflects the culture around it. Even before the pandemic hit, Millennials and Zoomers were less sexually active than the generation before them. Maybe we’re too anxious about the Apocalypse; maybe we’re too broke to go out; maybe having to live with roommates or our parents makes it a little awkward to bring a partner home; maybe there are chemicals in the environment screwing up our hormones; maybe we don’t know how to navigate human sexuality outside of rape culture; maybe being raised on the message that our bodies are a nation-ending menace has dampened our enthusiasm for physical pleasure.&nbsp;</p>



<p><a href="https://academic.oup.com/ajcn/article/109/5/1402/5480601"><strong>Eating disorders have steadily increased, though</strong></a>. We are still getting our bodies ready to fight The Enemy, and since we are at war with an abstract concept, the enemy is invisible and ethereal. To defeat it, our bodies must lose solidity as well.</p>



<p>*  *  *  *  *</p>



<p>But there is hope.&nbsp;</p>



<p>Robert Pattinson is playing the next Batman in a film set to release in 2022. He has proudly bragged about his refusal to bulk up for the role, despite an outcry from superhero movie fans.&nbsp;</p>



<p>In a 2019 interview with <em>Variety, </em><a href="https://variety.com/2019/film/features/robert-pattinson-batman-the-lighthouse-1203319866/"><strong>Pattinson said</strong></a>, “In the last three or four movies, I’ve got a masturbation scene. I did it in ‘High Life.’ I did it in ‘Damsel.’ And ‘The Devil All the Time.’ I only realized when I did it the fourth time [in <em>The Lighthouse</em>].”</p>



<p>Perhaps he will be the hero we need.</p>



<hr>




<div itemtype="http://schema.org/Person" itemscope="" itemprop="author"><p><img alt="Raquel S. Benedict" src="https://i0.wp.com/bloodknife.com/wp-content/uploads/2020/11/rsbenedict-author.jpg?fit=100%2C100&amp;ssl=1" srcset="https://i0.wp.com/bloodknife.com/wp-content/uploads/2020/11/rsbenedict-author.jpg?fit=100%2C100&amp;ssl=1 2x" height="100" width="100" itemprop="image" loading="lazy" decoding="async"></p><div><p>Raquel S. Benedict is the most dangerous woman in speculative fiction. Her fiction has appeared in The New Haven Review and The Magazine of Fantasy &amp; Science Fiction. She also has a podcast called Rite Gud.</p></div></div><div><p>Liked it? Take a second to support Blood Knife on Patreon!</p><p><a rel="nofollow" href="https://www.patreon.com/bloodknife?utm_content=post_button&amp;utm_medium=patron_button_and_widgets_plugin&amp;utm_campaign=4889897&amp;utm_term=&amp;utm_source=https://bloodknife.com/everyone-beautiful-no-one-horny/" aria-label="Click to become a patron at Patreon!"><img src="https://i0.wp.com/bloodknife.com/wp-content/plugins/patron-button-and-widgets-by-codebard/images/become_a_patron_button.png?w=1300&amp;ssl=1" alt="Become a patron at Patreon!" data-recalc-dims="1"></a></p></div>                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Commercial quantum computer identifies molecular candidate for better solar cell (131 pts)]]></title>
            <link>https://www.ornl.gov/news/researchers-use-commercial-quantum-computer-identify-molecular-candidate-development-more</link>
            <guid>36990162</guid>
            <pubDate>Thu, 03 Aug 2023 18:58:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ornl.gov/news/researchers-use-commercial-quantum-computer-identify-molecular-candidate-development-more">https://www.ornl.gov/news/researchers-use-commercial-quantum-computer-identify-molecular-candidate-development-more</a>, See on <a href="https://news.ycombinator.com/item?id=36990162">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span><span>Using the full capabilities of the Quantinuum H1-1 quantum computer, researchers from the Department of Energy’s Oak Ridge National Laboratory not only demonstrated best practices for scientific computing on current quantum systems but also produced an intriguing scientific result. </span></span></p>

<p><span><span>By modeling singlet fission — <span>in which absorption of a single photon of light by a molecule produces two excited states</span> — the team confirmed that the linear H<sub>4</sub> molecule’s energetic levels match the fission process’s requirements. The linear H<sub>4</sub> molecule is, simply, a molecule made of four hydrogen atoms arranged in a linear fashion. A molecule’s energetic levels are the energies of each quantum state involved in a phenomenon, such as singlet fission, and how they relate and compare with one another. The fact that the linear molecule’s energetic levels are conducive to singlet fission could prove to be useful knowledge in the overall effort to develop more efficient solar panels. </span></span></p>

<p><span><span>“<span>This is one of the leading motivating factors behind singlet fission — conventional solar cells have a theoretical maximum efficiency of about 33%, but it has been postulated that materials that exhibit singlet fission can break that limit and can be more efficient,” said Daniel Claudino, a research scientist in ORNL’s Quantum Computational Science group and the project’s principal investigator. “The downside is that to understand fundamentally whether a certain material exhibits singlet fission is very hard. There is a specific energetic requirement, and it's difficult to find materials that fulfill it.” </span></span></span></p>

<p><span><span>With its high accuracy for a manageable computational cost, the ORNL team’s approach to using a quantum computer provides an effective simulation method to identify molecules that demonstrate singlet fission properties while bypassing approximations commonly found in techniques used for classical computers. The results of its work were <a href="https://pubs.acs.org/doi/10.1021/acs.jpclett.3c01106?ref=pdf">published in <em>The Journal of Physical Chemistry Letters</em></a>.</span></span></p>

<p><span><span><span>Singlet fission is a multistate phenomenon, so the ORNL team needed a computational method that could describe all the process’s quantum states on an equal footing to calculate accurate energetics numbers. They turned to </span><a href="https://www.pnnl.gov/publications/increasing-accuracy-quantum-algorithms"><span><span>PDS</span></span></a><span>, which is a </span>quantum solver based on <span>the Peeters-Devreese-Soldatov approach </span>and developed at Pacific Northwest National Laboratory<span>. </span></span></span></p>

<p><span><span><span>PDS holds some advantages over classical strategies for determining a material’s energetic properties, including much higher accuracy than density functional theory and fewer computational demands than coupled cluster theory. And, because it was developed to improve the accuracy and efficiency of simulations in quantum chemistry, PDS is well suited to </span>leverage the potential advantages of quantum computers.</span></span></p>

<p><span><span><span><span><span>“The energetics of singlet fission revolve around double electronic excitations — two electrons move up to higher energy levels simultaneously, which is quite difficult to pin down with algorithms for conventional computers,” Claudino said. “But the underlying way that a quantum computer works, it can naturally treat the quantum correlations that give rise to this singlet-fission phenomenon. That’s when we came to the realization that, ‘yes, we should use a quantum computer to treat something that is inherently quantum.’ That’s well known. But I think we were the first to realize that it had the application for this specific problem.”</span></span></span></span></span></p>

<p><span><span><span><span><span>The project was funded by DOE’s Office of Basic Energy Sciences. Access to the <a href="https://www.quantinuum.com/hardware/h1">H1-1, an enterprise-ready quantum computer built by Quantinuum</a> (formerly Honeywell), was provided by the <a href="https://www.olcf.ornl.gov/olcf-resources/compute-systems/quantum-computing-user-program/">Quantum Computing User Program</a> at the Oak Ridge Leadership Computing Facility, a DOE Office of Science user facility. </span></span></span></span></span></p>

<p><span><span><span><span><span><a href="https://www.energy.gov/science/doe-explainsquantum-computing">Quantum computing</a> — a technology still in its formative stages compared to classical supercomputers such as the OLCF’s exascale-class <a href="https://www.olcf.ornl.gov/olcf-resources/compute-systems/frontier/">Frontier</a> — utilizes quantum bits, or qubits, to perform calculations. Unlike binary bits used in classical computers, qubits go beyond 1s and 0s to also use 1 and 0 simultaneously in a mixed superposition, exponentially increasing its processing power for certain equations, such as those based in quantum mechanics. However, quantum computer systems are still prone to high error rates, and the team had to compensate for this challenge to achieve reliable results.</span></span></span></span></span></p>

<p><span><span><span><span>“It’s better to have many more measurements to be on the safe side when it comes to circumventing errors, but then we wouldn’t be able to run this algorithm in a timely manner,” Claudino said. “That’s when we came up with measurement optimization to bring down the size of our calculations to something that was reasonable in terms of computing time.&nbsp;We went from something that was prohibitively large to something that was amenable to the quantum hardware.”</span></span></span></span></p>

<p><span><span><span><span>ORNL team members applied three independent strategies to decrease the problem’s computational workload, which reduced their time to solution from months to a few weeks. First, in a technique called qubit tapering, they decreased the number of qubits required to express the problem, reducing the size of the problem itself. Second, they took fewer measurements to solve the problem by measuring groups of terms once rather than measuring each individual term from every group. Third, instead of implementing each circuit individually, they found a way to run four circuits in parallel, allowing them to use all 20 qubits in the H1-1. </span></span></span></span></p>

<p><span><span><span><span><span>“</span><span>We realized that if we wanted to just throw this entire thing into a quantum computer, it’s not going to work because it’s still too much for the current technology. The idea is that you want to envision a way to tap into the quantum computer but only for specific tasks that we know they can perform better than conventional computers,” Claudino said. “Yet, even then, you’re still limited by the current state of the art that only allows us to either go up to a certain size or perform tasks that only take so long. That’s the major bottleneck when turning to quantum computers.”</span></span></span></span></span></p>

<p><span><span><span><span>The ORNL team’s project demonstrated the viability of current quantum computers to tackle scientific problems that could impact daily life. Although Claudino does not foresee tackling singlet fission again soon, his team is considering other problems — such as “the interaction of matter and light” — that may be solved using the quantum computing techniques demonstrated in this project.</span></span></span></span></p>

<p><span><span><span><span>Even though the approaches we used have been previously published, I would say they are far from being widely adopted. I think we make a strong case for the use of such approaches,” Claudino said. “Researchers should be mindful that they may be wasting quantum resources and potentially increasing errors in their simulations by not taking advantage of these techniques.”</span></span></span></span></p>

<p><span><span><span>UT-Battelle manages ORNL for DOE’s Office of Science, the single largest supporter of basic research in the physical sciences in the United States. DOE’s Office of Science is working to address some of the most pressing challenges of our time. For more information, visit </span></span></span><span><span><a href="https://energy.gov/science"><span><span>https://energy.gov/science</span></span></a></span></span><u><span><span><span>.</span></span></span></u></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Baldur's Gate 3 has been released (104 pts)]]></title>
            <link>https://store.steampowered.com/agecheck/app/1086940/</link>
            <guid>36989853</guid>
            <pubDate>Thu, 03 Aug 2023 18:35:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://store.steampowered.com/agecheck/app/1086940/">https://store.steampowered.com/agecheck/app/1086940/</a>, See on <a href="https://news.ycombinator.com/item?id=36989853">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						<div id="responsive_page_menu">
															<p><a href="https://store.steampowered.com/login/?redir=agecheck%2Fapp%2F1086940%2F&amp;redir_ssl=1&amp;snr=1_agecheck_agecheck__global-header">
									Login								</a>
								<a href="https://store.steampowered.com/?snr=1_agecheck_agecheck__global-responsive-menu" data-tooltip-type="selector" data-tooltip-content=".submenu_store">
		Store	</a></p>


			<p><a href="https://steamcommunity.com/" data-tooltip-type="selector" data-tooltip-content=".submenu_community">
			Community		</a></p>
		

	
	
	<p><a href="https://help.steampowered.com/en/">
		Support	</a></p><div>
																								<p>
									Change language								</p>
																																	<p>
										View desktop website									</p>
															</div>
						</div>
		
		

		



					<div>
					<p><img src="https://store.akamai.steamstatic.com/public/shared/images/responsive/header_menu_hamburger.png" height="100%">
											</p>
					<p><a href="https://store.steampowered.com/?snr=1_agecheck_agecheck__global-responsive-menu">
															<img src="https://store.akamai.steamstatic.com/public/shared/images/responsive/header_logo.png" height="36" alt="STEAM">
													</a>
					</p>
				</div>
		
		

		
	
	<div>

		<div id="global_header" data-panel="{&quot;flow-children&quot;:&quot;row&quot;}">
		<p><span id="logo_holder">
									<a href="https://store.steampowered.com/?snr=1_agecheck_agecheck__global-header">
						<img src="https://store.akamai.steamstatic.com/public/shared/images/header/logo_steam.svg?t=962016" width="176" height="44">
					</a>
							</span>
		</p>

			
	

		
			</div>

		<div id="responsive_page_template_content" data-panel="{&quot;autoFocus&quot;:true}">

				<div>
				<div>
					<p><img src="https://cdn.akamai.steamstatic.com/steam/apps/1086940/header.jpg?t=1691081186">
					</p>
					<h2>This game may contain content not appropriate for all ages,<br> or may not be appropriate for viewing at work.</h2>

											<div><p>
							The developers describe the content like this:							</p><p>“This Game may contain content not appropriate for all ages. It contains General Mature Content, and may include Nudity or Sexual Content.”</p>
						</div>
						
				</div>

				
				                    <div data-panel="{&quot;flow-children&quot;:&quot;row&quot;}">
                        <p>Please enter your birth date to continue:</p>
                                                    </div>
				
				

				</div>

				
				<div>
					
						<p>This data is for verification purposes only and will not be stored.</p>
															</div>
			</div>	<!-- responsive_page_legacy_content -->

		

	</div>	<!-- responsive_page_content -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FCC fines robocaller a record $300M after blocking billions of their scam calls (311 pts)]]></title>
            <link>https://techcrunch.com/2023/08/03/fcc-fines-robocaller-a-record-300m-after-blocking-billions-of-their-scam-calls/</link>
            <guid>36989845</guid>
            <pubDate>Thu, 03 Aug 2023 18:35:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2023/08/03/fcc-fines-robocaller-a-record-300m-after-blocking-billions-of-their-scam-calls/">https://techcrunch.com/2023/08/03/fcc-fines-robocaller-a-record-300m-after-blocking-billions-of-their-scam-calls/</a>, See on <a href="https://news.ycombinator.com/item?id=36989845">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary">The FCC’s robocaller penalties are growing as the agency tracks down and terminates their operations — this time resulting in a record $300 million forfeiture. But whether and when that money will be paid is, as always, something of an open question.</p>
<p>The robocaller in this case was known by a variety of names and had been scamming people since 2018, <a href="https://www.fcc.gov/document/fcc-imposes-record-fine-transnational-illegal-robocalling-operation" target="_blank" rel="noopener">as the FCC announcement explains</a>:</p>
<blockquote><p>This enterprise operated a complex scheme designed to facilitate the sale of vehicle service contracts under the false and misleading claim of selling auto warranties. Two of the central players of the operation, Roy M. Cox and Aaron Michael Jones, were under lifetime bans against making telemarketing calls following lawsuits by the Federal Trade Commission and State of Texas. The multi-national enterprise did business as Sumco Panama, Virtual Telecom, Davis Telecom, Geist Telecom, Fugle Telecom, Tech Direct, Mobi Telecom, and Posting Express.</p></blockquote>
<p>The long-running scheme used the promise of selling auto warranties to collect personal information from people. As if the fake warranty wasn’t enough, the calls also exhibited the standard robocall characteristics of failing to identify the caller, failing to respect call consent laws (like the Do Not Call list), failing to provide a call-back number and spoofing the area code.</p>
<p>Chances are you received at least one of these calls — the companies placed at least five billion of them. FCC Chairwoman Jessica Rosenworcel got a few herself, she mentioned in her accompanying remarks.</p>
<p>“Armed with the facts [the FCC] gave phone companies permission to cut off this traffic before going one step further and directing them to block it outright. We got results. Following our action, the number of auto warranty calls fell by 99 percent,” she wrote.</p>
<p>This effective and quick (at least, quick once they identified the culprits) action is due to various improvements to the FCC robocall enforcement mechanisms over the years. They’ve also established agreements with nearly all the Attorneys General in the U.S. so that they can coordinate with local law enforcement. But one thing they are still lacking is the ability to effectively hammer these malicious actors with proper fines.</p>
<p>The FCC is limited to investigating, taking counter-actions (like asking phone companies to stop carrying certain callers), and documenting the extent of the alleged criminal activity. But their recommendation of a $300 million fine must be evaluated and prosecuted by the Justice Department.</p>
<p>“What happens next?” writes Rosenworcel. “Under the law we will refer this Forfeiture Order to the Department of Justice to collect payment.&nbsp; I hope, however, that Congress will consider giving the FCC authority to go to court and collect these fines ourselves.”</p>

<p>Justice, like most federal agencies, is swamped; it may be a long time before anyone attempts to collect, and by the time they do, the robocallers will likely have covered their tracks or sequestered their earnings in forfeiture-proof vehicles. A few years ago <a href="https://techcrunch.com/2019/03/27/ftc-smacks-down-robocallers-but-the-penalties-dont-match-their-heinous-crimes/">I wrote</a> about how these fines often end up largely unpaid or drastically reduced due to loopholes and a lack of resources on the enforcers’ side. Florida is a popular refuge for scammers due, among other things, to laws that shield certain property from being seized.</p>
<p>Today’s operation is described as being “transnational,” which is not elaborated upon but strongly suggests even greater difficulties in tracking down and squeezing the money out of those responsible.</p>
<p>Though it may play out like a game of whack-a-mole, if the FCC were not doing their part it’s likely our phones would be blowing up non-stop. “We know the scam artists behind these calls are relentless,” said Rosenworcel, “but we are coming for them, and won’t stop until we get this junk off the line.”</p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AWS to begin charging for public IPv4 addresses (410 pts)]]></title>
            <link>https://www.infoq.com/news/2023/08/aws-ec2-public-ipv4/</link>
            <guid>36989798</guid>
            <pubDate>Thu, 03 Aug 2023 18:31:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.infoq.com/news/2023/08/aws-ec2-public-ipv4/">https://www.infoq.com/news/2023/08/aws-ec2-public-ipv4/</a>, See on <a href="https://news.ycombinator.com/item?id=36989798">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
								<p>AWS recently announced that starting from February 2024, they will be <a href="https://aws.amazon.com/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/">charging for public IPv4 addresses</a>. According to the cloud provider, this change aligns AWS with other cloud providers, encourages frugal usage of a scarce resource, and accelerates the adoption of IPv6.</p>

<p>The new charge will be applicable across all AWS regions and services, including EC2 instances, RDS database instances, EKS nodes, and other service-managed public IPv4 addresses, such as internet-facing ELB, NAT gateways, and AWS Global Accelerators. At 0.005 USD per hour, the price hike will add 43.8 USD per year for every IP address. <a href="https://www.linkedin.com/in/jeffbarr/">Jeff Barr</a>, chief evangelist at AWS, explains:</p>

<blockquote>
<p>IPv4 addresses are an increasingly scarce resource and the cost to acquire a single public IPv4 address has risen more than 300% over the past 5 years. This change reflects our own costs and is also intended to encourage you (...) to think about accelerating your adoption of IPv6 as a modernization and conservation measure.</p>
</blockquote>

<p>To encourage the transition to IPv6 and the best use of public IPv4 addresses, <a href="https://aws.amazon.com/aws-cost-management/aws-cost-and-usage-reporting/">AWS cost and usage reports</a> will now include public IPv4 address usage. The cloud provider also launched <a href="https://aws.amazon.com/about-aws/whats-new/2023/07/aws-public-ip-insights-vpc-ip-address-manager/">Public IP Insights</a>, a new feature of <a href="https://docs.aws.amazon.com/vpc/latest/ipam/view-public-ip-insights.html">VPC IP Address Manager</a>, providing a breakdown of public IP types and EIP usage.</p>

<p><img alt="" data-src="news/2023/08/aws-ec2-public-ipv4/en/resources/1pip_top_1-1690970350345.png" src="https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/08/aws-ec2-public-ipv4/en/resources/1pip_top_1-1690970350345.png" rel="share"></p>

<p><em>Source: AWS blog</em></p>

<p>In a <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/identify-and-optimize-public-ipv4-address-usage-on-aws/">separate article</a>, <a href="https://www.linkedin.com/in/rodicaalexandrahuides/">Alexandra Huides</a>, principal network specialist solutions architect at AWS, <a href="https://www.linkedin.com/in/adityasanthanam/">Aditya Santhanam</a>, product manager at AWS, and <a href="https://www.linkedin.com/in/matt-lehwess/">Matt Lehwess</a>, senior principal solutions architect at AWS, explain how to identify and optimize public IPv4 address using the new <a href="https://docs.aws.amazon.com/cur/latest/userguide/what-is-cur.html">CUR</a> information:</p>

<blockquote>
<p>In the updated CUR you will see two new usage types for public IPv4 addresses: <em>PublicIPv4:IdleAddress</em>: shows usage across all public IPv4 addresses that are idle in your AWS account. <em>PublicIPv4:InUseAddress</em>: shows usage across all public IPv4 addresses that are in-use by your AWS resources. These include EC2 public IPv4 addresses, Elastic IP addresses, and service managed public IPv4 addresses.</p>
</blockquote>

<p>Corey Quinn, chief cloud economist at The Duckbill Group, explains the <a href="https://www.lastweekinaws.com/blog/breaking-aws-begins-charging-for-public-ipv4-addresses/">challenge with IPv4 addresses</a> and writes:</p>

<blockquote>
<p>It’s a reasonable way of ensuring the rest of us aren’t made to suffer for the poor planning of a small subset of customers and incentivizing good IP addressing behavior for the rest of us. This brings AWS in line with Google Cloud and Azure’s pricing policies on IPv4 addresses. Frankly, the price hike is a good thing, once we navigate the rocky transition period to relearn how networking economically works in AWS.</p>
</blockquote>

<p><a href="https://www.linkedin.com/in/pawelzubkiewicz/">Paweł Zubkiewicz</a>, founder of CloudPouch.dev, <a href="https://www.linkedin.com/feed/update/urn:li:activity:7090776058215424001?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7090776058215424001%2C7091454054458884097%29&amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287091454054458884097%2Curn%3Ali%3Aactivity%3A7090776058215424001%29">does not agree</a>:</p>

<blockquote>
<p>Such significant and sudden change is never a good thing! Half a year is not enough time for most of the companies that, as Corey said, are "doing something psychotic with thousands of IP addresses" to change their architecture.</p>
</blockquote>

<p>Until now, AWS charged only for public IPv4 addresses that were allocated but not attached to an EC2 instance. In a popular <a href="https://www.reddit.com/r/aws/comments/15c4pog/aws_public_ipv4_address_charge_public_ip_insights/">Reddit thread</a>, user <em>rootbeerdan</em> is one of many users highlighting the limited IPv6 support on AWS:</p>

<blockquote>
<p>Amazon really should not be charging for IPv4 addresses when even basic stuff like SSM isn't IPv6 ready.</p>
</blockquote>

<p>The AWS Free Tier will now include 750 hours of public IPv4 address usage per month for the first 12 months and customers will not be charged for owned IP addresses using <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Amazon BYOIP</a>.</p>

								









  
    <div> <!-- main wrapper for authors section -->
        <h2>About the Author</h2> <!-- section title -->

        
            
                
            
            <div data-id="author-Renato-Losio">
                    <h4><strong>Renato Losio</strong></h4>
                    
                </div>
        
    </div>

							</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brave cuts ties with Bing to offer its own image and video search results (110 pts)]]></title>
            <link>https://www.theregister.com/2023/08/03/brave_cuts_ties_with_bing/</link>
            <guid>36989769</guid>
            <pubDate>Thu, 03 Aug 2023 18:30:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/08/03/brave_cuts_ties_with_bing/">https://www.theregister.com/2023/08/03/brave_cuts_ties_with_bing/</a>, See on <a href="https://news.ycombinator.com/item?id=36989769">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>Brave Software, maker of the Brave web browser, has tuned its search engine to run on a homegrown index of images and videos in an effort to end its dependency on "Big Tech" rivals.</p>
<p>On Thursday, the biz said image and video results from Brave Search – available on the web at search.brave.com and via its browser – will be served from Brave's own index.</p>
<p>Search indexes are made by visiting online resources – typically web pages, images, videos, or other files – with a crawler bot and recording the locations of these resources in a database. And when an internet user submits a query to a search engine, the search engine checks its index (and possible other sources) to find the addresses of resources that correspond to the query keywords. There's actually a lot more to it but that's the basic idea.</p>

    

<p>Ranking matches from the list in such a way that the search user sees results ordered by predicted relevance is an ongoing computer science challenge, one that Google handled effectively for years with the help of its PageRank algorithm and other machinations. And it continues to dominate the US search market, with more than 90 percent market share in June, <a target="_blank" rel="nofollow" href="https://www.similarweb.com/engines/united-states/">according to</a> Similarweb.</p>

        


        

<p>But in recent years, there has been growing sentiment that Google Search <a target="_blank" rel="nofollow" href="https://www.thestar.com/business/google-search-has-gotten-worse-here-s-the-trick-people-have-found-to-get-around/article_5d51869b-6be0-5de7-ae12-18e9b93f8323.html">is</a> <a target="_blank" rel="nofollow" href="https://www.washingtonpost.com/technology/2020/10/19/google-search-results-monopoly/">getting</a> <a target="_blank" rel="nofollow" href="https://freakonomics.com/podcast/is-google-getting-worse/">worse</a>. Part of the problem is AI content generation, which is being used to create <a target="_blank" rel="nofollow" href="https://www.malwarebytes.com/blog/news/2023/05/ai-generated-content-farms-fill-search-results-with-advert-stuffed-spam">web spam</a>, to the detriment of web users.</p>
<p>Yet AI is also part of the supposed solution, at least for rival Microsoft, which sees OpenAI's chatbot tech as a way to rewrite the expectations for web search at Google's expense.</p>

        

<p>Google has made matters worse for itself by trying to reinvent targeted advertising at a time when proliferating privacy rules and antitrust regulatory entanglements limit its options.</p>
<p>Brave now aims to ride the wave of discontent with Big Tech by highlighting its commitment to privacy and independence – Small Tech.</p>
<p>(As some have <a target="_blank" rel="nofollow" href="https://stackdiary.com/brave-selling-copyrighted-data-for-ai-training/">pointed out</a>, Brave has some skin in the AI content-generation game alongside OpenAI <em>et al</em>: it offers <a target="_blank" rel="nofollow" href="https://brave.com/search/api/">an API</a> that takes search queries and outputs answers formatted for use with, say, machine-learning models.)</p>

        

<p>"Brave Search is 100 percent private and anonymous, which sets a high bar for image/video search to meet," the developer said in a blog post provided earlier to <em>The Register</em>.</p>
<p>"Whether it’s a matter of personal safety or personal preference, users should be able to discover content without their search engine reporting and profiling those results to a Big Tech company."</p>
<p>The Brave browser, we're told, currently has about <a target="_blank" rel="nofollow" href="https://brave.com/transparency/">57.76 million</a> monthly active users. Mozilla Firefox, as a point of comparison, has about <a target="_blank" rel="nofollow" href="https://data.firefox.com/dashboard/user-activity">187 million</a> monthly active users.</p>
<p>Brave Search <a target="_blank" href="https://www.theregister.com/2021/06/22/brave_search_engine/">debuted</a> in 2021, offering text-based search results from an independent index. A service called <a target="_blank" href="https://www.theregister.com/2022/06/23/brave_search_googles_google/">Goggles</a> that allows personal search result filtering followed in 2022. And, as we noted above, Brave <a target="_blank" rel="nofollow" href="https://brave.com/search-api-launch/">launched</a> an API for its search service earlier this year.</p>
<p>By shifting to its own index for images and videos, Brave further differentiates its search offering from companies that essentially repackage Google and Bing. For example, DuckDuckGo relies <a target="_blank" rel="nofollow" href="https://duckduckgo.com/duckduckgo-help-pages/results/sources/">mostly on Bing</a>.</p>
<ul>

<li><a href="https://www.theregister.com/2020/06/09/brave_affiliate_links_bug/">Brave sorry about coding snafu that sent search queries to affiliate links, insists practice is 'industry standard'</a></li>

<li><a href="https://www.theregister.com/2022/06/23/brave_search_googles_google/">Brave Search leaves beta, offers Goggles for filtering, personalizing results</a></li>

<li><a href="https://www.theregister.com/2022/06/17/brave_duckduckgo/">Brave roasts DuckDuckGo over Bing privacy exception</a></li>

<li><a href="https://www.theregister.com/2022/03/09/brave_bounce_tracking/">Brave takes the spring out of creepy bounce tracking</a></li>
</ul>
<p>There are not many active public web search indexes: Google, Bing, and Brave in the US; Baidu, Huawei (Petal), and Tencent (Sogou), among others, in China; Yandex in Russia; and Mojeek in the UK.</p>
<p>Brave argues that having its own index frees the company from content decisions made by others. As an example, the browser biz points to an incident two years ago when Bing briefly <a target="_blank" href="https://www.theregister.com/2021/06/04/search_engine_tiananmen/">stopped serving</a> search results for the Tiananmen Square "tank man," an inquiry that remains unwelcome in China. Brave Search also couldn't find "tank man" at the time because the service sourced its image results from Microsoft Bing.</p>
<p>No longer. However, Brave says it is committed to making it easy to conduct searches using other search engines for queries that Brave Search cannot answer. For Brave Search on the web, that means those making inquiries have the option to send their keywords to other search services – via links shown below the top 10 results – if Brave's index proves disappointing.</p>
<p>"Brave is on a mission to build a user-first Web," the company said in its blog post. "That mission starts with the Brave browser and Brave Search. With the release of image and video search, we’re continuing to innovate within the search industry, providing viable and preferable products for users who want choice and transparency in their search for information online." ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Chrultrabook – Modify a Chromebook to Run Windows/Linux/macOS (146 pts)]]></title>
            <link>https://chrultrabook.github.io/docs/</link>
            <guid>36989569</guid>
            <pubDate>Thu, 03 Aug 2023 18:13:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chrultrabook.github.io/docs/">https://chrultrabook.github.io/docs/</a>, See on <a href="https://news.ycombinator.com/item?id=36989569">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content-wrap"> <main> <h2> <p>Welcome to the Chrultrabook Docs!</p> </h2> <h3 id="what-is-a-chrultrabook-and-who-is-this-guide-for"> <a href="#what-is-a-chrultrabook-and-who-is-this-guide-for" aria-labelledby="what-is-a-chrultrabook-and-who-is-this-guide-for"></a> What is a Chrultrabook and who is this guide for? </h3> <p>A chrultrabook is a modified Chromebook designed to run Windows, Linux, or even macOS by utilizing MrChromebox coreboot firmware. The purpose of this site is to provide comprehensive and user-friendly documentation on hardware, firmware, and operating systems.</p>  <p><span> <a href="https://chrultrabook.github.io/docs/docs/getting-started.html">Getting Started →</a> </span></p><hr> <p><strong>The docs focuses on two main things:</strong></p> <ul> <li>Installing altOS on your Chromebook.</li> <li>Learning in-depth information about your Chromebook.</li> </ul> <p>Because of this, you will be expected to read, learn, and even use Google. This is not a one click procedure.</p><hr> <p>Finally, those who are still facing issues can ask for help in the <a href="https://discord.com/invite/tkPTk5w">chrultrabook Discord</a>.</p> <p>Help us improve this documentation on <a href="https://github.com/chrultrabook/docs/">GitHub</a>!</p> </main> <hr>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tesla committed fraud by “grossly” exaggerating EV range, class action says (180 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2023/08/angry-tesla-customers-sue-firm-over-grossly-exaggerated-ev-range/</link>
            <guid>36989496</guid>
            <pubDate>Thu, 03 Aug 2023 18:08:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2023/08/angry-tesla-customers-sue-firm-over-grossly-exaggerated-ev-range/">https://arstechnica.com/tech-policy/2023/08/angry-tesla-customers-sue-firm-over-grossly-exaggerated-ev-range/</a>, See on <a href="https://news.ycombinator.com/item?id=36989496">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/04/getty-tesla-chargers-800x533.jpg" alt="A line of electric cars connected to Tesla chargers in a parking lot outside during daytime.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/04/getty-tesla-chargers.jpg" data-height="1667" data-width="2500">Enlarge</a> <span>/</span> Tesla cars charging on July 17, 2022, in Nephi, Utah. </p><p>Getty Images | George Frey </p></figcaption>  </figure>

  




<!-- cache hit 149:single/related:01915514a4761b5c1b91403947fc606b --><!-- empty -->
<p>Tesla is facing a class-action lawsuit filed by customers who say they were misled by the company's exaggerated range claims. The <a href="https://storage.courtlistener.com/recap/gov.uscourts.cand.416318/gov.uscourts.cand.416318.1.0.pdf">lawsuit</a> was filed yesterday, days after a report revealed that Tesla exaggerated its electric vehicles' range so much that many drivers thought their cars were broken.</p>
<p>"Tesla marketed its electric vehicles as having a grossly overvalued range in an effort to increase sales to consumers," said the lawsuit filed in US District Court for the Northern District of California.</p>
<p>The lawsuit seeks class-action status to represent all people in California who purchased a new Tesla Model 3, Model S, Model Y, or Model X vehicle. The three named plaintiffs are James Porter, Bryan Perez, and Dro Esraeili Estepanian. All three bought Tesla cars in 2022.</p>
<p>The complaint said that when plaintiffs ordered their cars online or spoke to Tesla representatives about the car features, they were never warned that the advertised range was "grossly overestimated." The plaintiffs would not have purchased a Tesla car at the prices they paid if the company "truthfully revealed that the advertised range was exaggerated and not based on normal driving conditions," the lawsuit said.</p>
<p>The complaint says Tesla committed "violations of state consumer fraud statutes, fraud, negligent misrepresentation, breach of express warranty, breach of implied warranty, violation of California's Song-Beverly Consumer Warranty Act, and unjust enrichment."</p>
<p>"As a result of Tesla's tactics and false advertising, Plaintiffs and Class Members suffered an injury in fact, incurred damages, and have been harmed by Tesla's conduct," the complaint said. They are seeking financial damages in the lawsuit, which was prepared by class-action law firm Milberg Coleman Bryson Phillips Grossman.</p>                                            
                                                        
<h2>Cars “failed to accurately account for external factors”</h2>
<p>The complaint cited testing that found three Tesla models fell short of their advertised ranges by an average of 26 percent. In addition to alleging false advertising, the lawsuit said that range estimates provided by Tesla vehicles during car trips fail to account for temperature and other factors that reduce range.</p>
<p>Testing by analytics firm Recurrent "determined that Tesla model vehicles still overwhelmingly calculated that they could still deliver nearly the advertised full range, regardless of external factors—with Tesla vehicles calculating that they could travel more than 90 percent of their advertised range," the complaint said. "Put simply, Tesla vehicles failed to accurately account for external factors impacting battery performance and vehicle range, leading to a gross overestimate of the vehicle's range."</p>
<p>The lawsuit cites a recent <a href="https://www.reuters.com/investigates/special-report/tesla-batteries-range/">investigation by Reuters</a>. "Based upon information from those familiar with Tesla's early vehicle software designs, the Reuters report explains that Tesla developed algorithms for estimating the range of its electric vehicles, which would display to drivers 'rosy' projections for the distance the vehicle could travel on a full battery," the lawsuit said. "However, once the battery reached 50 percent capacity, the algorithm would change and begin showing the driver more realistic projections. This would cause the estimated range of the vehicle to fluctuate drastically from that point."</p>
<p>"The decision to include these algorithms to present inflated range estimates came directly from Tesla's chief executive officer, Elon Musk," the lawsuit continued.</p>
<p>Reuters reported that Tesla became inundated with complaints from drivers who thought their cars were broken when the actual driving range was much lower than advertised. When these drivers scheduled service appointments to address their range problems, Tesla allegedly canceled the appointments because there was no way to improve the actual driving distance. The Reuters report said that in mid-2022, Tesla started routing range complaints to a "Diversion Team" that fielded up to 2,000 cases a week and "was expected to close about 750 cases a week."</p>
<p>Tesla didn't respond to a request for comment when we <a href="https://arstechnica.com/tech-policy/2023/07/tesla-exaggerated-ev-range-so-much-that-drivers-thought-cars-were-broken/">wrote about the exaggerated EV range claims</a> last week.</p>

                                                </div></div>]]></description>
        </item>
    </channel>
</rss>