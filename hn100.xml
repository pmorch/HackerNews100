<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 06 Oct 2023 00:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[NIST Elliptic Curves Seeds Bounty (142 pts)]]></title>
            <link>https://words.filippo.io/dispatches/seeds-bounty/</link>
            <guid>37784499</guid>
            <pubDate>Thu, 05 Oct 2023 21:26:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://words.filippo.io/dispatches/seeds-bounty/">https://words.filippo.io/dispatches/seeds-bounty/</a>, See on <a href="https://news.ycombinator.com/item?id=37784499">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
        <span>
            <time datetime="2023-10-05">05 Oct 2023</time>
        </span>
        
        <section>
            <!--kg-card-begin: markdown--><p>The NIST elliptic curves that power much of modern cryptography were generated in the late ‘90s by hashing seeds provided by the NSA. How were the seeds generated? Rumor has it that they are in turn hashes of English sentences, but the person who picked them, Dr. Jerry Solinas, passed away in early 2023 leaving behind a cryptographic mystery, some conspiracy theories, and an historical password cracking challenge.</p>
<p><strong>Together with some generous matchers, I’m announcing a <s>$8,192</s> $12,288 (12 Ki$) bounty for cracking these five hashes, tripled to $36,864 if the recipient chooses to donate it to a 501(c)(3) charity of their choice.</strong></p>
<pre><code>3045AE6FC8422F64ED579528D38120EAE12196D5
BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5
C49D360886E704936A6678E1139D26B7819F7E90
A335926AA319A27A1D00896A6773A4827ACDAC73
D09E8800291CB85396CC6717393284AAA0DA64BA
</code></pre>
<p>Thank you to Amir Omidi, Chris Palmer, Colm MacCárthaigh, David Adrian, David Anderson, Jeff Hodges, Matt Green, Matthew McPherrin, Paul Kehrer, Ryan Sleevi, and Soatok for contributing to the bounty, and to Steve Weis for the research that inspired this.</p>
<h2 id="step-back-what-is-this-about">Step back, what is this about?</h2>
<p>The NIST elliptic curves (P-192, P-224, P-256, P-384, and P-521<sup><a href="#fn1" id="fnref1">[1]</a></sup>) were published by NIST in FIPS 186-2 in 2000, and generated “verifiably at random” according to ANSI X9.62 by taking an arbitrary seed, hashing it with SHA-1, and using the output to derive some of the parameters.</p>
<p>A <em>lot</em> of cryptography uses NIST curves, and especially P-256 and P-384. They are in the Commercial National Security Algorithm Suite (the successor of Suite B), and are the curves used by the ECDSA X.509 certificates that secure much of the web. They’re a big deal.</p>
<p>Steve Weis has recently published <a href="https://saweis.net/posts/nist-curve-seed-origins.html?ref=words.filippo.io">a well researched article</a> on everything we know about those arbitrary seeds embedded in the FIPS 186 specification. Apparently, they were provided by the NSA, and generated by Jerry Solinas in 1997. He allegedly generated them by hashing, presumably with SHA-1, some English sentences that he later forgot.</p>
<blockquote>
<p>[Jerry] told me that he used a seed that was something like:<br>
<code>SEED = SHA1("Jerry deserves a raise.")</code><br>
After he did the work, his machine was replaced or upgraded, and the actual phrase that he used was lost. When the controversy first came up, Jerry tried every phrase that he could think of that was similar to this, but none matched.</p>
</blockquote>
<p>That’s unfortunate, because the NIST curves are—surprisingly—looking better and better: we now have <a href="https://eprint.iacr.org/2015/1060?ref=words.filippo.io">complete addition formulas</a> for them, mitigating their major footgun; we know how to design safer interfaces for them; and we painfully learned to appreciate the value of prime order curves immune to cofactor attacks. However, there is—mostly amongst non-practitioners—some fear that the NSA could have picked the seeds to select some intentionally weak curves.</p>
<p>Do I think those fears are well-founded? No. Koblitz and Menezes make a good argument in <a href="https://eprint.iacr.org/2015/1018.pdf?ref=words.filippo.io"><em>A riddle wrapped in an enigma</em></a> that even with full control over the seed, the NSA would have had to be aware of a class of weak curves so large that it’s not plausible that no one in academia or industry discovered them in 25 years.<sup><a href="#fn2" id="fnref2">[2]</a></sup></p>
<p>Anyway, some <a href="https://en.wikipedia.org/wiki/Fear,_uncertainty,_and_doubt?ref=words.filippo.io">FUD</a> persists around the otherwise pretty good NIST curves that would be good to clear up, even if the English preimage of the hashes <a href="https://twitter.com/lauriewired/status/1700982575291142594?ref=words.filippo.io">is not a complete guarantee of rigidity</a><sup><a href="#fn3" id="fnref3">[3]</a></sup>.</p>
<p>That’s where this bounty comes in. Finding the pre-seeds, the inputs to the hash that generated the seeds, is the bread and butter of password crackers and brainwallet bruteforcers. <strong>This is a call to arms for them to join the search, help fill in a page of cryptographic history, and collect a large bounty or donate an even larger one to charity.</strong></p>
<h2 id="ok-so-what-do-we-know-about-the-hashes">Ok, so what do we know about the hashes?</h2>
<p>To recap Steve Weis’s post, the inputs are probably English phrases which mention Jerry Solinas, possibly someone else, and probably a counter. If you’re actually going for it I recommend reading Steve’s post in full.</p>
<p>The counter has to be there because only one in every 192 to 521 hashes is actually good to make a curve out of, depending the bit size of the curve. (This is because <a href="https://en.wikipedia.org/wiki/Prime_number_theorem?ref=words.filippo.io">one in every ln(N) numbers less than N is prime, for large enough N</a>.) There’s a <a href="https://www.wolframalpha.com/input?i2d=true&amp;i=Power%5B%5C%2840%291+-+Divide%5B1%2C521%5D%5C%2841%29%2Cx%5D+%3D+0.01&amp;ref=words.filippo.io">99% chance the counter is less than 2400 for the largest curve</a>, and less than 1175 for P-256.</p>
<p>The seeds for P-192 and P-256 appeared as examples in the previous ANSI X9.62 standard, while all the others were new in FIPS 186-2, so they might have been generated from differently structured sentences.</p>
<p>Since testing more hashes is nearly free, I recommend also targeting all the examples from ANSI X9.62 that didn’t make the FIPS standard, as well as the seeds for the binary curves in FIPS 186-2, although they are not included in the bounty. Here’s a recap.</p>
<pre><code>3045AE6FC8422F64ED579528D38120EAE12196D5 # NIST P-192, ANSI prime192v1
BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5 # NIST P-224
C49D360886E704936A6678E1139D26B7819F7E90 # NIST P-256, ANSI prime256v1
A335926AA319A27A1D00896A6773A4827ACDAC73 # NIST P-384
D09E8800291CB85396CC6717393284AAA0DA64BA # NIST P-521
31A92EE2029FD10D901B113E990710F0D21AC6B6 # ANSI prime192v2, not eligible for bounty
C469684435DEB378C4B65CA9591E2A5763059A2E # ANSI prime192v3, not eligible for bounty
E43BB460F0B80CC0C0B075798E948060F8321B7D # ANSI prime239v1, not eligible for bounty
E8B4011604095303CA3B8099982BE09FCB9AE616 # ANSI prime239v2, not eligible for bounty
7D7374168FFE3471B60A857686A19475D3BFA2FF # ANSI prime239v3, not eligible for bounty
85E25BFE5C86226CDB12016F7553F9D0E693A268 # NIST B-163, not eligible for bounty
74D59FF07F6B413D0EA14B344B20A2DB049B50C3 # NIST B-233, not eligible for bounty
77E2B07370EB0F832A6DD5B62DFC88CD06BB84BE # NIST B-283, not eligible for bounty
4099B5A457F9D69F79213D094C4BCD4D4262210B # NIST B-409, not eligible for bounty
2AA058F73A0E33AB486B0F610410C53A7F132310 # NIST B-571, not eligible for bounty
</code></pre>
<p>The format of the string is part of the mystery. It could end with a period or not, end with a newline or not, the counter could be decimal (with or without leading zeroes) or binary (16 or 32 bit), and it could come after the period or separated some other way. The same sentence with different counters could have been used to generate all the seeds, or they could be different sentences, or they could include the curve name or size. Human memory is notoriously fallible, so it could also be that some of the details in the second-hand recollections are wrong.</p>
<p>The good news is that SHA-1 is tremendously fast to bruteforce, and <em>YOU</em> are the experts in cracking passphrases you know nothing about.</p>
<h2 id="cool-what%E2%80%99s-the-fine-print">Cool, what’s the fine print?</h2>
<p>The bounty will pay out to the first person(s) to email the pre-seeds for the five prime-order NIST curves to <a href="mailto:seeds@filippo.io">seeds@filippo.io</a>.</p>
<p>Half the bounty ($6,144) will pay out to the first submission of <em>at least one</em> pre-seed, and the other half will pay out to the first submission of <em>all five</em> pre-seeds. They can of course go to the same person, so don’t wait to have them all to submit. Even one would make history.</p>
<p>If successful, you can either choose to receive the cash bounty, or select a U.S. 501(c)(3) charity to receive triple the amount. We reserve the right to veto charity choices dramatically incompatible with our values, but we won’t be jerks about it. If it’s not legally allowed for a U.S. person or Italian national to send money to you, you will have to select the charity option. You’re responsible for any taxes on the cash bounty. I fully trust every matcher, and I am guaranteeing the full amount of the bounty personally, so you don’t have to.</p>
<p>Put “ANTISPAM” in the subject line of any submission to hit my allowlisting rules. The Received header of my mail host will be the unappealable criterion of what submission arrived first.</p>
<p>The bounty expires if the seeds become publicly known, otherwise it’s valid until announced otherwise on this page. If the bounty is being cancelled or lowered, it will be announced six months in advance. (We don’t want anyone to feel cheated of their resources.)</p>
<p>We don’t actually care how you find the seeds. It can be bruteforcing, clever guessing, sleuth work tracking down NSA employees (don’t get arrested), or even recovering that old backup of when you used to work at NIST. If you don’t want us to, we won’t ask questions.</p>
<p>May the hashrate be ever in your favor, and let's fill out a page of cryptographic history.</p>
<p>For updates, you might want to <a href="https://bsky.app/profile/filippo.abyssdomain.expert?ref=words.filippo.io">follow me on Bluesky</a> or <a href="https://abyssdomain.expert/@filippo?ref=words.filippo.io">Mastodon</a>.</p>
<hr>
<section>
<ol>
<li id="fn1"><p>Not a typo for 512. There’s a very conveniently shaped prime at 2^521-1. We do typo that a lot in code. <a href="#fnref1">↩︎</a></p>
</li>
<li id="fn2"><p>The NSA's precedents, namely <a href="http://en.wikipedia.org/wiki/Dual_EC_DRBG?ref=words.filippo.io">Dual_EC_DRBG</a>, are why some people find the seeds suspicious. I find them reassuring. First, selecting weak seeds (which are just hash inputs, not "keys" like in Dual_EC_DRBG), would not be a <a href="https://en.wikipedia.org/wiki/NOBUS?ref=words.filippo.io">NOBUS backdoor</a>. Second, the Dual_EC_DRBG design immediately stuck out like a sore thumb and library authors had to be paid to implement it; this suggests the NSA is <em>kinda bad</em> at backdoors, not magical. <a href="#fnref2">↩︎</a></p>
</li>
<li id="fn3"><p>Rigidity is the design generalization of <a href="https://en.wikipedia.org/wiki/Nothing-up-my-sleeve_number?ref=words.filippo.io">nothing up my sleeves numbers</a>. The idea is that if you set your goals explicitly and then make only obvious and rational and optimal choices in a design, there is no wiggle room to pick intentionally weak outcomes. FWIW, I think rigidity is overrated: there is no such thing as an objectively best choice, and reasonable people disagree, and it’s possible to craft rational arguments for many different choices. Anyway, it’d be nice to settle the argument by bringing the NIST curves up in their level of rigidity by cracking the seeds. <a href="#fnref3">↩︎</a></p>
</li>
</ol>
</section>
<!--kg-card-end: markdown-->
        </section>
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: An app store just for installable web apps (170 pts)]]></title>
            <link>https://store.app</link>
            <guid>37782513</guid>
            <pubDate>Thu, 05 Oct 2023 18:50:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://store.app">https://store.app</a>, See on <a href="https://news.ycombinator.com/item?id=37782513">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[How fast are Linux pipes anyway? (2022) (224 pts)]]></title>
            <link>https://mazzo.li/posts/fast-pipes.html</link>
            <guid>37782493</guid>
            <pubDate>Thu, 05 Oct 2023 18:49:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mazzo.li/posts/fast-pipes.html">https://mazzo.li/posts/fast-pipes.html</a>, See on <a href="https://news.ycombinator.com/item?id=37782493">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">



<div>
<p>In this post, we will explore how Unix pipes are implemented in Linux by iteratively optimizing a test program that writes and reads data through a pipe.<a href="#fn1" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>We will begin with a simple program with a throughput of around 3.5GiB/s, and improve its performance twentyfold. The improvements will be informed by profiling the program using Linux’s <a href="https://en.wikipedia.org/wiki/Perf_(Linux)"><code>perf</code> tooling</a>.<a href="#fn2" id="fnref2" role="doc-noteref"><sup>2</sup></a> The code <a href="https://github.com/bitonic/pipes-speed-test">is available on GitHub</a>.</p>
<div>
<figure>
<img src="https://mazzo.li/assets/images/fast-pipe-chart.svg" alt="Chart showing the performance of our pipe test programs.">

</figure>
</div>
<!--
This exercise won't be of much practical use --- we shouldn't be using pipes for high-performance inter-process communication anyway. However, it will shed some light on common themes when dealing with IO and the kernel, and on how one can go about identifying what's slow.
-->
<p>The post was inspired by reading <a href="https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz/236630#236630">a highly optimized FizzBuzz program</a>, which pushes output to a pipe at a rate of ~35GiB/s on my laptop.<a href="#fn3" id="fnref3" role="doc-noteref"><sup>3</sup></a> Our first goal will be to match that speed, explaining every step as we go along. We’ll also add an additional performance-improving measure, which is not needed in FizzBuzz since the bottleneck is actually computing the output, not IO, at least on my machine.</p>
<p>We will proceed as follows:</p>
<ol type="1">
<li><a href="#first-version">A first slow version of our pipe test bench;</a></li>
<li><a href="#trouble-with-write">How pipes are implemented internally, and why writing and reading from them is slow;</a></li>
<li><a href="#splicing">How the <code>vmsplice</code> and <code>splice</code> syscalls let us get around some (but not all!) of the slowness;</a></li>
<li><a href="#paging">A description of Linux paging, leading up to a faster version using huge pages;</a></li>
<li><a href="#busy-loop">The final optimization, replacing polling with busy looping;</a></li>
<li><a href="#closing-thoughts">Some closing thoughts.</a></li>
</ol>
<p>Section 4 is the heaviest on Linux kernel internals, so it might be interesting even if you’re familiar with the other topics treated in the post. For readers not familiar with the topics treated, only basic knowledge of C is assumed.</p>
<p>Let’s begin!</p>
</div>
<section role="doc-endnotes">
<ol>
<li id="fn1" role="doc-endnote"><p>This will be similar in style to my <a href="https://mazzo.li/posts/vectorized-atan2.html"><code>atan2f</code> performance investigation</a>, although the program in question will only be useful for learning.</p>
<p>Moreover, we will optimize code at a different level. While tuning <code>atan2f</code> consisted in micro-optimizations guided by the assembly output, tuning our pipe program will involve looking at <code>perf</code> events and reducing various sorts of kernel overhead.<a href="#fnref1" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>The tests were run on an Intel Skylake i7-8550U CPU, and on Linux 5.17.</p>
<p>Your mileage <em>will</em> vary, since the Linux internals that power the programs described in this post have been under constant change for the past couple of years, and will probably continue to be tweaked in future releases. Keep reading for more details!<a href="#fnref2" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>“FizzBuzz” is an allegedly common coding interview question.</p>
<p>The details are not relevant to this blog post, but they are explained in the link. I have personally never been asked it, but I have it on good authority that it does happen!<a href="#fnref3" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<h2 id="first-version">The challenge, and a slow first version <a href="#first-version">#</a></h2>
<div>
<p>First of all, let’s start with measuring the performance of <a href="https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz/236630#236630">the fabled FizzBuzz program</a>, following the rules laid down by the StackOverflow post:</p>
<pre><code>% ./fizzbuzz | pv &gt;/dev/null
 422GiB 0:00:16 [36.2GiB/s]</code></pre>
<p><code>pv</code> is “pipe viewer”, <a href="http://www.ivarch.com/programs/pv.shtml">a handy utility</a> to measure the throughput of data flowing through a pipe. So <code>fizzbuzz</code> is producing output at a rate of 36GiB/s.</p>
<p><code>fizzbuzz</code> writes the output in blocks as big as the L2 cache, to strike a good balance between cheap access to memory and minimizing IO overhead.</p>
</div>
<div>
<p>On my machine, the L2 cache is 256KiB. Throughout this post, we’ll also output blocks of 256KiB, but without “computing” anything. Essentially, we’ll try to measure the upper bound for programs writing to a pipe with a reasonable buffer size.<a href="#fn4" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p>While <code>fizzbuzz</code> uses <code>pv</code> to measure speed, our setup will be slightly different: we’ll implement the programs on both ends of the pipe. This is so that we fully control the code involved in pushing and pulling data from the pipe.</p>
</div>
<section role="doc-endnotes">
<ol start="4">
<li id="fn4" role="doc-endnote"><p>While we fix the buffer size, the numbers are actually not wildly different if we use different buffer sizes, given that other bottlenecks kick in.<a href="#fnref4" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div>
<p>The code is available <a href="https://github.com/bitonic/pipes-speed-test">in my <code>pipes-speed-test</code> repo</a>. <code>write.cpp</code> implements the writing, and <code>read.cpp</code> the reading. <code>write</code> repeatedly writes the same 256KiB forever. <code>read</code> reads through 10GiB of data and terminates, printing the throughput in GiB/s. Both executables accept a variety of command line options to change their behavior.</p>
<p>The first attempt at reading and writing from pipes will be using the <a href="https://linux.die.net/man/2/write"><code>write</code></a> and <a href="https://linux.die.net/man/2/read"><code>read</code></a> syscalls, using the same buffer size as <code>fizzbuzz</code>. Here’s a view of the writing end:</p>
</div>
<div id="cb2"><pre><code><span id="cb2-1"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb2-2">  <span>size_t</span> buf_size <span>=</span> <span>1</span> <span>&lt;&lt;</span> <span>18</span><span>;</span> <span>// 256KiB</span></span>
<span id="cb2-3">  <span>char</span><span>*</span> buf <span>=</span> <span>(</span><span>char</span><span>*)</span> malloc<span>(</span>buf_size<span>);</span></span>
<span id="cb2-4">  memset<span>((</span><span>void</span><span>*)</span>buf<span>,</span> <span>'X'</span><span>,</span> buf_size<span>);</span> <span>// output Xs</span></span>
<span id="cb2-5">  <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span></span>
<span id="cb2-6">    <span>size_t</span> remaining <span>=</span> buf_size<span>;</span></span>
<span id="cb2-7">    <span>while</span> <span>(</span>remaining <span>&gt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb2-8">      <span>// Keep invoking `write` until we've written the entirety</span></span>
<span id="cb2-9">      <span>// of the buffer. Remember that write returns how much</span></span>
<span id="cb2-10">      <span>// it could write into the destination -- in this case,</span></span>
<span id="cb2-11">      <span>// our pipe.</span></span>
<span id="cb2-12">      <span>ssize_t</span> written <span>=</span> write<span>(</span></span>
<span id="cb2-13">        STDOUT_FILENO<span>,</span> buf <span>+</span> <span>(</span>buf_size <span>-</span> remaining<span>),</span> remaining</span>
<span id="cb2-14">      <span>);</span></span>
<span id="cb2-15">      remaining <span>-=</span> written<span>;</span></span>
<span id="cb2-16">    <span>}</span></span>
<span id="cb2-17">  <span>}</span></span>
<span id="cb2-18"><span>}</span></span></code></pre></div>
<div>
<p>This snippet and following ones omit all error checking for brevity.<a href="#fn5" id="fnref5" role="doc-noteref"><sup>5</sup></a> The <code>memset</code> ensures that the output will be printable, but also plays another role, as we’ll discuss later.</p>
<p>The work is all done by the <code>write</code> call, the rest is making sure that the whole buffer is written. The read end is very similar, but <code>read</code>ing data into <code>buf</code>, and terminating when enough has been read.</p>
<p>After building, the code from the repo can be run as follows:</p>
</div>
<section role="doc-endnotes">
<ol start="5">
<li id="fn5" role="doc-endnote"><p>Feel free to refer to <a href="https://github.com/bitonic/pipes-speed-test">the repo</a> for the gory details.</p>
<p>More generally, I won’t reproduce the code verbatim here, since the details are unimportant. I will instead post snippets of code representative of what is going on.<a href="#fnref5" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<pre><code>% ./write | ./read
3.7GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)</code></pre>
<p>We’re writing the same 256KiB buffer filled with <code>'X'</code>s 40960 times, and measuring the throughput. What’s worrying is that we’re 10 times slower than <code>fizzbuzz</code>! And we’re not doing any work, just writing bytes to the pipe.</p>
<p>It turns out that we can’t get much faster than this by using <code>write</code> and <code>read</code>.</p>
<h2 id="trouble-with-write">The trouble with <code>write</code> <a href="#trouble-with-write">#</a></h2>
<div>
<p>To find out what our program is spending time on, we can use <a href="https://en.wikipedia.org/wiki/Perf_(Linux)"><code>perf</code></a>:<a href="#fn6" id="fnref6" role="doc-noteref"><sup>6</sup></a> <a href="#fn7" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre><code>% perf record -g sh -c './write | ./read'
3.2GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)
[ perf record: Woken up 6 times to write data ]
[ perf record: Captured and wrote 2.851 MB perf.data (21201 samples) ]</code></pre>
<p>The <code>-g</code> instructs perf to record call graphs: this will allow us to take a top-down look at where time is being spent.</p>
<p>We can take a look at where time is spent using <code>perf report</code>. Here is a lightly redacted excerpt, breaking down where <code>write</code> spends its time:<a href="#fn8" id="fnref8" role="doc-noteref"><sup>8</sup></a></p>
<pre><code>% perf report -g --symbol-filter=write
-   48.05%     0.05%  write    libc-2.33.so       [.] __GI___libc_write
   - 48.04% __GI___libc_write
      - 47.69% entry_SYSCALL_64_after_hwframe
         - do_syscall_64
            - 47.54% ksys_write
               - 47.40% vfs_write
                  - 47.23% new_sync_write
                     - pipe_write
                        + 24.08% copy_page_from_iter
                        + 11.76% __alloc_pages
                        + 4.32% schedule
                        + 2.98% __wake_up_common_lock
                          0.95% _raw_spin_lock_irq
                          0.74% alloc_pages
                          0.66% prepare_to_wait_event
</code></pre>
<p>47% of the time is spent in <code>pipe_write</code>, which is what <code>write</code> resolves to if we’re writing to a pipe. This is not surprising — we’re spending roughly half of the time writing, and the other half reading.</p>
<p>Within <code>pipe_write</code>, 3/4 of the time is spent copying or allocating pages (<code>copy_page_from_iter</code> and <code>__alloc_pages</code>). If we already have an idea of how communication between the kernel and userspace works this might make some sense. Regardless, to fully understand what’s happening we must first understand how pipes work.</p>
</div>
<section role="doc-endnotes">
<ol start="6">
<li id="fn6" role="doc-endnote"><p>Note that here we’re profiling a shell invocation including both the pipe reading and writing — <code>perf record</code> follows all child processes by default.<a href="#fnref6" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>When profiling this program, I noticed that the <code>perf</code> output was being polluted by information from the <a href="https://facebookmicrosites.github.io/psi/docs/overview">“Pressure Stall Information” infrastructure (PSI)</a>.</p>
<p>Therefore the numbers are taken from a kernel compiled with PSI disabled. This can be achieved by putting <code>CONFIG_PSI=n</code> in the kernel build configuration. In NixOS:</p>
<pre><code>boot.kernelPatches = [{
  name = "disable-psi";
  patch = null;
  extraConfig = '' 
    PSI n 
  '';
}];</code></pre>
<p>Moreover, the kernel debug symbols must be present for <code>perf</code> to correctly show where time is spent while in syscalls. How to install the symbols varies from distro to distro. In recent NixOS versions they are installed by default.<a href="#fnref7" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p>In <code>perf report</code> you can use <code>+</code> to expand a call graph, assuming you ran <code>perf record -g</code>.<a href="#fnref8" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<h3 id="what-are-pipes-made-of">What are pipes made of? <a href="#what-are-pipes-made-of">#</a></h3>
<p>The data structure holding a pipe can be found in <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/include/linux/pipe_fs_i.h#L34"><code>include/linux/pipe_fs_i.h</code></a>, and the operations on it in <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c"><code>fs/pipe.c</code></a>.</p>
<p>A Linux pipe is a <a href="https://en.wikipedia.org/wiki/Circular_buffer">ring buffer</a> holding references to pages where the data is written to and read from:</p>
<p><img src="https://mazzo.li/assets/images/fast-pipes-pipe-ring.png"></p>
<p>In the image above the ring buffer has 8 slots, but we might have more or less, the default being 16. Each page is 4KiB on x86-64, but might be of different sizes on other architectures. In total, this pipe can hold at most 32KiB of data. This is a key point: every pipe has an upper bound on the total amount of data it can hold before it’s full.</p>
<p>The shaded part of the diagram represents the current pipe data, the non-shaded part the empty space in the pipe.</p>
<p>Somewhat counterintuitively, <code>head</code> stores the write-end of the pipe. That is, writers will write into the buffer pointed at by <code>head</code>, and increase <code>head</code> accordingly if they need to move onto the next buffer. Within the write buffer, <code>len</code> stores how much we’ve written in it.</p>
<p>Conversely, <code>tail</code> stores the read-end of the pipe: readers will start consuming the pipe from there. <code>offset</code> indicates where to start reading from.</p>
<p>Note that <code>tail</code> can appear <em>after</em> <code>head</code>, like in the picture, since we’re working with a circular/ring buffer. Also note that some slots might be unused when we haven’t filled the pipe completely — the <code>NULL</code> cells in the middle. If the pipe is full (no <code>NULL</code>s and no free space in the pages), <code>write</code> will block. If the pipe is empty (all <code>NULL</code>s), <code>read</code> will block.</p>
<p>Here’s an abridged version of the C data structures in <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/include/linux/pipe_fs_i.h#L34"><code>pipe_fs_i.h</code></a>:</p>
<div id="cb7"><pre><code><span id="cb7-1"><span>struct</span> pipe_inode_info <span>{</span></span>
<span id="cb7-2">  <span>unsigned</span> <span>int</span> head<span>;</span></span>
<span id="cb7-3">  <span>unsigned</span> <span>int</span> tail<span>;</span></span>
<span id="cb7-4">  <span>struct</span> pipe_buffer <span>*</span>bufs<span>;</span></span>
<span id="cb7-5"><span>};</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span>struct</span> pipe_buffer <span>{</span></span>
<span id="cb7-8">  <span>struct</span> page <span>*</span>page<span>;</span></span>
<span id="cb7-9">  <span>unsigned</span> <span>int</span> offset<span>,</span> len<span>;</span></span>
<span id="cb7-10"><span>};</span></span></code></pre></div>
<p>We’re omitting many fields here, and we’re not explainining what <code>struct page</code> contains yet, but this is the key data structure to understanding how reading and writing from a pipe happens.</p>
<h3 id="reading-and-writing-to-pipes">Reading and writing to pipes <a href="#reading-and-writing-to-pipes">#</a></h3>
<p>Let’s now go to <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L416">the definition of <code>pipe_write</code></a>, to try and make sense of the <code>perf</code> output shown before.</p>
<p>Here is a simplified explanation of how <code>pipe_write</code> works:</p>
<ol type="1">
<li>If the pipe is already full, <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L561">wait for space</a> and restart;</li>
<li>If the buffer currently pointed at by <code>head</code> has space, <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L457">fill that space first</a>;</li>
<li><a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L577">While there’s free slots</a>, and <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L542">there are remaining bytes to write</a>, <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L496">allocate new pages</a> and <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/pipe.c#L532">fill them</a>, updating <code>head</code>.</li>
</ol>
<div>
<figure>
<img src="https://mazzo.li/assets/images/write-to-pipe.svg" alt="What happens to a pipe when we write to it.">

</figure>
</div>
<div>
<p>The operations described above are protected by a lock, which <code>pipe_write</code> <a href="https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/pipe.c#L416">acquires</a> and releases as necessary.</p>
<p><code>pipe_read</code> is the mirror image of <code>pipe_write</code>, except that we consume pages, free them when we’ve fully read them, and update <code>tail</code>.<a href="#fn9" id="fnref9" role="doc-noteref"><sup>9</sup></a></p>
<p>So, we now have a quite unpleasant picture of what is going on:</p>
<ul>
<li>We copy each page twice, once from user memory to the kernel, and back again to the kernel to user memory;</li>
<li>The copying is done one 4KiB page at a time, interspersed with other activity, such as the synchronization between read and write, and page allocation and freeing;</li>
<li>We are working with memory that might not be contiguous, since we’re constantly allocating new pages;</li>
<li>We’re acquiring and releasing the pipe lock.</li>
</ul>
<p>On this machine, sequential RAM reading clocks at around 16GiB/s:</p>
</div>
<section role="doc-endnotes">
<ol start="9">
<li id="fn9" role="doc-endnote"><p>One single “spare page” called <code>tmp_page</code> is actually kept around by <code>pipe_read</code>, and reused by <code>pipe_write</code>.</p>
<p>However, since this is always only a single page, I couldn’t leverage it to achieve higher performance given that the page reuse is counteracted by fixed overhead when calling <code>pipe_write</code> and <code>pipe_read</code>.<a href="#fnref9" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<pre><code>% sysbench memory --memory-block-size=1G --memory-oper=read --threads=1 run
...
102400.00 MiB transferred (15921.22 MiB/sec)</code></pre>
<p>Given all the fiddliness listed above, a 4x slowdown compared to single-threaded sequential RAM speed is not that surprising.</p>
<p>Tweaking the buffer size or the pipe size to reduce the amount of syscall and synchronization overhead, or tuning other parameters will not get us very far. Luckily, there is a way to get around the slowness of <code>write</code> and of <code>read</code> altogether.</p>
<h2 id="splicing">Splicing to the rescue <a href="#splicing">#</a></h2>
<p>This copying of buffers from user memory to the kernel and back is a frequent thorn in the side of people needing to do fast IO. One common solution is to just cut the kernel out of the picture and perform IO operations directly. For example we might interact directly with a network card and bypass the kernel for low-latency networking.</p>
<p>In general when we write to a socket, or a file, or in our case a pipe, we’re first writing to a buffer somewhere in the kernel, and then let the kernel do its work. In the case of pipes, the pipe <em>is</em> a series of buffers in the kernel. All this copying is undesirable if we’re in the business of performance.</p>
<div>
<p>Luckily, Linux includes system calls to speed things up when we want to move data to and from pipes, without copying. Specifically:</p>
<ul>
<li><a href="https://man7.org/linux/man-pages/man2/splice.2.html"><code>splice</code></a> moves data from a pipe to a file descriptor, and vice-versa.</li>
<li><a href="https://man7.org/linux/man-pages/man2/vmsplice.2.html"><code>vmsplice</code></a> moves data from user memory into a pipe.<a href="#fn10" id="fnref10" role="doc-noteref"><sup>10</sup></a></li>
</ul>
<p>Crucially, both operations work without copying anything.</p>
<p>Now that we know how pipes work, we can already vaguely imagine how the two operations function: they just “grab” an existing buffer from somewhere and put it into the pipe ring buffer, or the reverse, rather than allocating new pages as needed:</p>
<p><img src="https://mazzo.li/assets/images/vmsplice-intuition.svg"></p>
</div>
<section role="doc-endnotes">
<ol start="10">
<li id="fn10" role="doc-endnote"><p>Technically, <code>vmsplice</code> also supports transferring data in the other direction, although not in a useful way. As the <a href="https://man7.org/linux/man-pages/man2/vmsplice.2.html">man page</a> states:</p>
<blockquote>
<p><code>vmsplice</code> really supports true splicing only from user memory to a pipe. In the opposite direction, it actually just copies the data to user space.</p>
</blockquote>
<a href="#fnref10" role="doc-backlink">↩︎</a></li>
</ol>
</section>
<p>We’ll soon see exactly how this works.</p>
<h3 id="splicing-in-practice">Splicing in practice <a href="#splicing-in-practice">#</a></h3>
<p>Let’s replace <code>write</code> with <code>vmsplice</code>. This is the signature for <code>vmsplice</code>:</p>
<div id="cb9"><pre><code><span id="cb9-1"><span>struct</span> iovec <span>{</span></span>
<span id="cb9-2">  <span>void</span>  <span>*</span>iov_base<span>;</span> <span>// Starting address</span></span>
<span id="cb9-3">  <span>size_t</span> iov_len<span>;</span>  <span>// Number of bytes</span></span>
<span id="cb9-4"><span>};</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span>// Returns how much we've spliced into the pipe</span></span>
<span id="cb9-7"><span>ssize_t</span> vmsplice<span>(</span></span>
<span id="cb9-8">  <span>int</span> fd<span>,</span> <span>const</span> <span>struct</span> iovec <span>*</span>iov<span>,</span> <span>size_t</span> nr_segs<span>,</span> <span>unsigned</span> <span>int</span> flags</span>
<span id="cb9-9"><span>);</span></span></code></pre></div>
<div>
<p><code>fd</code> is the target pipe, <code>struct iovec *iov</code> is an array of buffers we’ll be moving to the pipe. Note that <code>vmsplice</code> returns how much was “spliced” into the pipe, which might not be the full amount, much like how <code>write</code> returns how much was written. Remember that pipes are bounded by how many slots they have in the ring buffer, and <code>vmsplice</code> is not exempt from this restriction.</p>
<p>We also need to be a bit careful when using <code>vmsplice</code>. Since the user memory is moved to the pipe without copying, we must ensure that the read-end consumes it before we can reuse the spliced buffer.</p>
<p>For this reason <code>fizzbuzz</code> uses a double buffering scheme, which works as follows:</p>
<ol type="1">
<li>Split the 256KiB buffer in two;</li>
<li>Set the pipe size to 128KiB, this will have the effect of setting the pipe ring buffer to have 128KiB/4KiB = 32 slots;</li>
<li>Alternate between writing to the first half-buffer and using <code>vmsplice</code> to move it to the pipe and doing the same with the other half.</li>
</ol>
<p>The fact that the pipe size is set to 128KiB, and that we wait for <code>vmsplice</code> to fully output one 128KiB buffer, ensures that by the time we’re done with one iteration of <code>vmsplice</code> we <em>know</em> that the the previous buffer has been fully read — otherwise we would not have been able to fully <code>vmsplice</code> the new 128KiB buffer into the 128KiB pipe.</p>
<p>Now, we’re not actually writing anything to the buffers, but we’ll keep the double buffering scheme since a similar scheme would be required for any program actually writing content.<a href="#fn11" id="fnref11" role="doc-noteref"><sup>11</sup></a></p>
<p>Our write loop now looks something like this:</p>
</div>
<section role="doc-endnotes">
<ol start="11">
<li id="fn11" role="doc-endnote"><p>Travis Downs <a href="https://news.ycombinator.com/item?id=31596169">pointed out</a> that this scheme might still be unsafe, since the page could be spliced further, therefore extending its lifetime. This problem is also present in the original FizzBuzz post.</p>
<p>It’s actually not entirely clear to me whether <code>vmsplice</code> without <code>SPLICE_F_GIFT</code> is actually unsafe — the man page for <code>vmsplice</code> implies it shouldn’t be. However, it’s definitely the case that particular care is needed to achieve zero copy piping while maintaining safety.</p>
<p>In the test program the reading end splices the pipe into <code>/dev/null</code>, so it could be that the kernel knows that the pages can be spliced without copying, but I have not verified whether this is what’s actually happening.<a href="#fnref11" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div id="cb10"><pre><code><span id="cb10-1"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb10-2">  <span>size_t</span> buf_size <span>=</span> <span>1</span> <span>&lt;&lt;</span> <span>18</span><span>;</span> <span>// 256KiB</span></span>
<span id="cb10-3">  <span>char</span><span>*</span> buf <span>=</span> malloc<span>(</span>buf_size<span>);</span></span>
<span id="cb10-4">  memset<span>((</span><span>void</span><span>*)</span>buf<span>,</span> <span>'X'</span><span>,</span> buf_size<span>);</span> <span>// output Xs</span></span>
<span id="cb10-5">  <span>char</span><span>*</span> bufs<span>[</span><span>2</span><span>]</span> <span>=</span> <span>{</span> buf<span>,</span> buf <span>+</span> buf_size<span>/</span><span>2</span> <span>};</span></span>
<span id="cb10-6">  <span>int</span> buf_ix <span>=</span> <span>0</span><span>;</span></span>
<span id="cb10-7">  <span>// Flip between the two buffers, splicing until we're done.</span></span>
<span id="cb10-8">  <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span></span>
<span id="cb10-9">    <span>struct</span> iovec bufvec <span>=</span> <span>{</span></span>
<span id="cb10-10">      <span>.</span>iov_base <span>=</span> bufs<span>[</span>buf_ix<span>],</span></span>
<span id="cb10-11">      <span>.</span>iov_len <span>=</span> buf_size<span>/</span><span>2</span></span>
<span id="cb10-12">    <span>};</span></span>
<span id="cb10-13">    buf_ix <span>=</span> <span>(</span>buf_ix <span>+</span> <span>1</span><span>)</span> <span>%</span> <span>2</span><span>;</span></span>
<span id="cb10-14">    <span>while</span> <span>(</span>bufvec<span>.</span>iov_len <span>&gt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb10-15">      <span>ssize_t</span> ret <span>=</span> vmsplice<span>(</span>STDOUT_FILENO<span>,</span> <span>&amp;</span>bufvec<span>,</span> <span>1</span><span>,</span> <span>0</span><span>);</span></span>
<span id="cb10-16">      bufvec<span>.</span>iov_base <span>=</span> <span>(</span><span>void</span><span>*)</span> <span>(((</span><span>char</span><span>*)</span> bufvec<span>.</span>iov_base<span>)</span> <span>+</span> ret<span>);</span></span>
<span id="cb10-17">      bufvec<span>.</span>iov_len <span>-=</span> ret<span>;</span></span>
<span id="cb10-18">    <span>}</span></span>
<span id="cb10-19">  <span>}</span></span>
<span id="cb10-20"><span>}</span></span></code></pre></div>
<p>Here are the results writing with <code>vmsplice</code>, rather than <code>write</code>:</p>
<pre><code>% ./write --write_with_vmsplice | ./read
12.7GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)</code></pre>
<p>This reduces by half the amount of copying we need to do, and already improves our througput more than threefold — to 12.7GiB/s. Changing the read end to use <code>splice</code>, we eliminate all copying, and get another 2.5x speedup:</p>
<pre><code>% ./write --write_with_vmsplice | ./read --read_with_splice
32.8GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)</code></pre>
<h2 id="paging">Fishing for pages <a href="#paging">#</a></h2>
<p>What next? Let’s ask <code>perf</code>:</p>
<pre><code>% perf record -g sh -c './write --write_with_vmsplice | ./read --read_with_splice'
33.4GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)
[ perf record: Woken up 1 times to write data ]
[ perf record: Captured and wrote 0.305 MB perf.data (2413 samples) ]
% perf report --symbol-filter=vmsplice
-   49.59%     0.38%  write    libc-2.33.so       [.] vmsplice
   - 49.46% vmsplice
      - 45.17% entry_SYSCALL_64_after_hwframe
         - do_syscall_64
            - 44.30% __do_sys_vmsplice
               + 17.88% iov_iter_get_pages
               + 16.57% __mutex_lock.constprop.0
                 3.89% add_to_pipe
                 1.17% iov_iter_advance
                 0.82% mutex_unlock
                 0.75% pipe_lock
        2.01% __entry_text_start
        1.45% syscall_return_via_sysret</code></pre>
<div>
<p>The lion’s share of the time is taken by locking the pipe for writing (<code>__mutex_lock.constprop.0</code>), and by moving the pages into the pipe (<code>iov_iter_get_pages</code>). There isn’t so much we can do about the locking, but we <em>can</em> improve the performance of <code>iov_iter_get_pages</code>.</p>
<p>As the name suggests, <code>iov_iter_get_pages</code> turns the <code>struct iovec</code>s we feed into <code>vmsplice</code> into <code>struct page</code>s to put into the pipe. To understand what this function actually does, and how to speed it up, we must first take a detour into how the CPU and Linux organize pages.</p>
</div>
<h3 id="a-whirlwind-tour-of-paging">A whirlwind tour of paging <a href="#a-whirlwind-tour-of-paging">#</a></h3>
<div>
<p>As you might be aware of, processes do not refer to locations in RAM directly: instead, the are assigned <em>virtual</em> memory addresses, which get resolved to <em>physical</em> addresses. This abstraction is known as <a href="https://en.wikipedia.org/wiki/Virtual_memory"><em>virtual memory</em></a>, and has all sorts of advantages we won’t cover here — the most obvious being that it significantly simplifies running multiple processes competing for the same physical memory.</p>
<p>In any case, whenever we execute a program and we load/store from/to memory, the CPU needs to convert our virtual address to a physical address. Storing a mapping from every virtual address to every corresponding physical address would be impratical. Therefore memory is split up in uniformly sized chunks, called <em>pages</em>, and virtual pages are mapped to physical pages:<a href="#fn12" id="fnref12" role="doc-noteref"><sup>12</sup></a></p>
<p><img src="https://mazzo.li/assets/images/virtual-phsyical.svg"></p>
<p>There’s nothing special about 4KiB: each architecture picks a size, based on various tradeoffs — some of which we’ll soon explore.</p>
<p>To make this a bit more precise, let’s imagine allocating 10000 bytes using <code>malloc</code>:</p>
<div id="cb14"><pre><code><span id="cb14-1"><span>void</span><span>*</span> buf <span>=</span> malloc<span>(</span><span>10000</span><span>);</span></span>
<span id="cb14-2">printf<span>(</span><span>"%p</span><span>\n</span><span>"</span><span>,</span> buf<span>);</span>          <span>// 0x6f42430</span></span></code></pre></div>
</div>
<section role="doc-endnotes">
<ol start="12">
<li id="fn12" role="doc-endnote"><p>Here we’re presenting a simplified model where physical memory is a simple flat, linear sequence. Reality is <a href="https://lwn.net/Articles/789304/">a bit more complicated</a>, but the simple model will do for our purposes.<a href="#fnref12" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div>
<p>As we use them, our 10k bytes will look contiguous in virtual memory, but will be mapped to 3 not necessarily contiguous physical pages:<a href="#fn13" id="fnref13" role="doc-noteref"><sup>13</sup></a></p>
<p><img src="https://mazzo.li/assets/images/example-allocation.svg"></p>
</div>
<section role="doc-endnotes">
<ol start="13">
<li id="fn13" role="doc-endnote"><p>You can inspect the physical address assigned to the current process’ virtual pages by reading <code>/proc/self/pagemap</code>, <a href="https://mazzo.li/posts/check-huge-page.html">as illustrated in a previous post on this blog</a>, and multiplying the “page frame number” by the page size.<a href="#fnref13" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div>
<p>One of the tasks of the kernel is to manage this mapping, which is embodied in a data structure called the <em>page table</em>. The CPU specifies how the page table looks (since it needs to understand it), and the kernel manipulates it as needed. On x86-64 the page table is a 4-level, 512-way tree, which itself lives in memory.<a href="#fn14" id="fnref14" role="doc-noteref"><sup>14</sup></a> Each node of this tree is (you guessed it!) 4KiB wide, with each entry within the node leading to the next level being 8 bytes (4KiB/8bytes = 512). The entries contain the address of the next node, along with other metadata.</p>
<p>We have one page table per process — or in other words, each process has a reserved virtual address space. When the kernel context-switches to a process, it sets the special register CR3 to the <em>physical</em> address of the root of this tree.<a href="#fn15" id="fnref15" role="doc-noteref"><sup>15</sup></a> Then whenever a virtual address needs to be converted to a physical address, the CPU splits up the address in sections, and uses them to walk this tree and compute the physical address.</p>
<p>To make these concepts less abstract, here’s a visual depiction of how the virtual address <code>0x0000f2705af953c0</code> might be resolved to a physical address:</p>
<p><img src="https://mazzo.li/assets/images/virtual-address-resolution.svg"></p>
</div>
<section role="doc-endnotes">
<ol start="14">
<li id="fn14" role="doc-endnote"><p>Intel extended the page table to consist of <a href="https://en.wikipedia.org/wiki/Intel_5-level_paging">5 levels</a> starting from Ice Lake, thereby increasing the maximum addressable memory from 256TiB to 128PiB. However this capability has to explicitly enabled, since some programs rely on the upper 16 bits of pointers to be unused.<a href="#fnref14" role="doc-backlink">↩︎</a></p></li>
<li id="fn15" role="doc-endnote"><p>The addresses within the page table must be physical, otherwise we’d have infinite loop on our hands.<a href="#fnref15" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div>
<p>The search starts from the first level, called the “page global directory”, or PGD, the physical location of which is stored in CR3. The first 16 bits of the address are unused.<a href="#fn16" id="fnref16" role="doc-noteref"><sup>16</sup></a> We use the next 9 bits the PGD entry, and traverse down to the second level, “page upper directory”, or PUD. The next 9 bits are used to select an entry from the PUD. The process repeats for the next two levels, PMD (“page middle directory”), and PTE (“page table entry”). The PTE tells where the actual physical page we’re looking for is, and then we use the last 12 bits to find the offset inside the page.</p>
<p>The sparse structure of the page table allows the mapping to be gradually built up as new pages are needed. Whenever a process needs memory, the page table will be updated with a new entry by the kernel.</p>
</div>
<section role="doc-endnotes">
<ol start="16">
<li id="fn16" role="doc-endnote"><p>Note that the highest 16 bits are unused: this means that each process can address at most <span>2^{48}-1</span> bytes, or 256TiB, of physical memory.<a href="#fnref16" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<h3 id="the-role-of-struct-page">The role of <code>struct page</code> <a href="#the-role-of-struct-page">#</a></h3>
<div>
<p>The <code>struct page</code> data structure is a key piece of this machinery: it is what the kernel uses to refer to a single <em>physical</em> page, storing its physical address and all sorts of other metadata about it.<a href="#fn17" id="fnref17" role="doc-noteref"><sup>17</sup></a> For instance we can get a <code>struct page</code> from the information contained in the PTE (the last level of the page table described above). In general it is used pervasively in all code handling page-related matters.</p>
<p>In the case of pipes, <code>struct page</code> is used to hold their data in the ring buffer, as we’re already seen:</p>
<div id="cb15"><pre><code><span id="cb15-1"><span>struct</span> pipe_inode_info <span>{</span></span>
<span id="cb15-2">  <span>unsigned</span> <span>int</span> head<span>;</span></span>
<span id="cb15-3">  <span>unsigned</span> <span>int</span> tail<span>;</span></span>
<span id="cb15-4">  <span>struct</span> pipe_buffer <span>*</span>bufs<span>;</span></span>
<span id="cb15-5"><span>};</span></span>
<span id="cb15-6"></span>
<span id="cb15-7"><span>struct</span> pipe_buffer <span>{</span></span>
<span id="cb15-8">  <span>struct</span> page <span>*</span>page<span>;</span></span>
<span id="cb15-9">  <span>unsigned</span> <span>int</span> offset<span>,</span> len<span>;</span></span>
<span id="cb15-10"><span>};</span></span></code></pre></div>
</div>
<section role="doc-endnotes">
<ol start="17">
<li id="fn17" role="doc-endnote"><p><code>struct page</code> might also refer to yet-to-be-allocated physical pages, which do not have a physical address yet, and other page-related abstractions. Think of them as fairly abstract references to physical pages, but not necessarily references to an <em>allocated</em> physical page.</p>
<p>This subtle point will be relevant in a later sidenote 🫠.<a href="#fnref17" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<p>However, <code>vmsplice</code> accepts <em>virtual</em> memory as input, while <code>struct page</code> refers to <em>physical</em> memory directly.</p>
<p>Therefore we need turn arbitrary chunks of virtual memory into a bunch of <code>struct page</code>s. This is exactly what <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/lib/iov_iter.c#L1518"><code>iov_iter_get_pages</code></a> does, and where we’re spending half of our time:</p>
<div id="cb16"><pre><code><span id="cb16-1"><span>ssize_t</span> iov_iter_get_pages<span>(</span></span>
<span id="cb16-2">  <span>struct</span> iov_iter <span>*</span>i<span>,</span>  <span>// input: a sized buffer in virtual memory</span></span>
<span id="cb16-3">  <span>struct</span> page <span>**</span>pages<span>,</span> <span>// output: the list of pages which back the input buffers</span></span>
<span id="cb16-4">  <span>size_t</span> maxsize<span>,</span>      <span>// maximum number of bytes to get</span></span>
<span id="cb16-5">  <span>unsigned</span> maxpages<span>,</span>   <span>// maximum number of pages to get</span></span>
<span id="cb16-6">  <span>size_t</span> <span>*</span>start        <span>// offset into first page, if the input buffer wasn't page-aligned</span></span>
<span id="cb16-7"><span>);</span></span></code></pre></div>
<p><code>struct iov_iter</code> is a Linux kernel data structure representing various ways of walking through chunks of memory, including <code>struct iovec</code>. In our case, it will point to a 128KiB buffer. <code>vmsplice</code> will use <code>iov_iter_get_pages</code> to turn the input buffer into a bunch of <code>struct page</code>s, and hold on to them. Now that you know how paging works, you might vaguely imagine how <code>iov_iter_get_pages</code> works as well, but we’ll explain it in detail in the next section.</p>
<p>We’ve rapidly gone through a lot of new concepts, so to recap:</p>
<ul>
<li>Modern CPUs use virtual memory for their processes;</li>
<li>Memory is organized in regularly-sized pages;</li>
<li>The CPU translates virtual addresses into physical addresses using a page table mapping virtual pages to physical pages;</li>
<li>The kernel adds and removes entries to the page table as necessary;</li>
<li>Pipes are made out of references to physical pages, so <code>vmsplice</code> must convert virtual memory ranges into physical pages, and hold on to them.</li>
</ul>
<h3 id="the-cost-of-getting-pages">The cost of getting pages <a href="#the-cost-of-getting-pages">#</a></h3>
<div>
<p>The time spent in <code>iov_iter_get_pages</code> is really entirely spent in another function, <code>get_user_pages_fast</code>:</p>
<pre><code>% perf report -g --symbol-filter=iov_iter_get_pages
-   17.08%     0.17%  write    [kernel.kallsyms]  [k] iov_iter_get_pages
   - 16.91% iov_iter_get_pages
      - 16.88% internal_get_user_pages_fast
           11.22% try_grab_compound_head
</code></pre>
<p><a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/mm/gup.c#L2944"><code>get_user_pages_fast</code></a> is a more bare-bones version of <code>iov_iter_get_pages</code>:</p>
<div id="cb18"><pre><code><span id="cb18-1"><span>int</span> get_user_pages_fast<span>(</span></span>
<span id="cb18-2">  <span>// virtual address, page aligned</span></span>
<span id="cb18-3">  <span>unsigned</span> <span>long</span> start<span>,</span></span>
<span id="cb18-4">  <span>// number of pages to retrieve</span></span>
<span id="cb18-5">  <span>int</span> nr_pages<span>,</span></span>
<span id="cb18-6">  <span>// flags, the meaning of which we won't get into</span></span>
<span id="cb18-7">  <span>unsigned</span> <span>int</span> gup_flags<span>,</span></span>
<span id="cb18-8">  <span>// output physical pages</span></span>
<span id="cb18-9">  <span>struct</span> page <span>**</span>pages</span>
<span id="cb18-10"><span>)</span></span></code></pre></div>
<p>Here “user” (as opposed to “kernel”) refers to the fact that we’re turning virtual pages into references to physical pages.</p>
<p>To get our <code>struct page</code>s, <code>get_user_pages_fast</code> does exactly what the CPU would do, but in software: it walks the page table to collect all the physical pages, storing the results in <code>struct page</code>s. In our case, we have a 128KiB buffer, and 4KiB pages, so we’ll have <code>nr_pages = 32</code>.<a href="#fn18" id="fnref18" role="doc-noteref"><sup>18</sup></a> <code>get_user_pages_fast</code> will need to walk the page table tree collecting 32 leaves, and storing the result in 32 <code>struct page</code>s.</p>
<p><code>get_user_pages_fast</code> also needs to make sure that the physical page is not repurposed until the caller doesn’t need it anymore. This is achieved in the kernel using a reference count <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/include/linux/mm_types.h#L187">stored in <code>struct page</code></a>, which is used to know when a physical page can be released and repurposed in the future. The caller of <code>get_user_pages_fast</code> must, at some point, release the pages again with <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/include/linux/mm.h#L1222"><code>put_page</code></a>, which will decrease the reference count.</p>
<p>Finally, <code>get_user_pages_fast</code> behaves differently depending on whether virtual addresses are already in the page table. This is where the <code>_fast</code> suffix comes from: the kernel will first try to get an already existing page table entry and corresponding <code>struct page</code> by just walking the page table, which is relatively cheap, and fall back to producing a <code>struct page</code> by other, more expensive means otherwise. The fact that we <code>memset</code> the memory at the beginning will ensure that we never end up in the “slow” path of <code>get_user_pages_fast</code>, since the page table entries will be created as our buffer is filled with <code>'X'</code>s.<a href="#fn19" id="fnref19" role="doc-noteref"><sup>19</sup></a></p>
<p>Note that the <code>get_user_pages</code> family of functions is not only useful for pipes — in fact, it is central in many drivers. A typical use is related to the kernel bypass we mentioned: a driver for a network card might use it to turn some user memory region into a physical page, then communicate the physical page location to the network card, and have the network card interact directly with that memory region without kernel involvement.</p>
</div>
<section role="doc-endnotes">
<ol start="18">
<li id="fn18" role="doc-endnote"><p>Actually, the pipe code <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/fs/splice.c#L1174">happens to always call <code>get_user_pages_fast</code> with <code>nr_pages = 16</code></a>, looping if necessary, presumably so that a small static buffer can be used. But it is an implementation detail, and the total number of spliced pages will still be 32.<a href="#fnref18" role="doc-backlink">↩︎</a></p></li>
<li id="fn19" role="doc-endnote"><p>Subtleties follow, not needed to understand the rest of the post!</p>
<p>If the page table does not contain the entry we’re looking for, <code>get_user_pages_fast</code> still needs to return a <code>struct page</code>. The most obvious way to do so would be to create the right page table entry, and then return the corresponding <code>struct page</code>.</p>
<p>However <code>get_user_pages_fast</code> will only do so if it’s asked to get <code>struct page</code> for the purpose of writing into it. Otherwise it will <em>not</em> update the page table, instead returning a <code>struct page</code> giving us a reference to a yet-to-be-allocated physical page. This is exactly what happens in the case of <code>vmsplice</code>, since we just need to produce a <code>struct page</code> for the purpose of filling the pipe, without actually writing any memory.</p>
<p>Or in other words, allocating the page is delayed until we actually need to. This saves allocating the physical page, but will cause the slow path of <code>get_user_pages_fast</code> to be called repeatedly if the page is never faulted in by other means.</p>
<p>Therefore, if we do <em>not</em> <code>memset</code> before, and therefore do not fault the pages into the page table “manually”, not only we would end up in the slow path the first time we call <code>get_user_pages_fast</code>, but also all successive invocations, resulting in a significant slowdown (25GiB/s rather than 30GiB/s):</p>
<pre><code>% ./write --write_with_vmsplice --dont_touch_pages | ./read --read_with_splice
25.0GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)</code></pre>
<p>Moreover, this behavior does <em>not</em> manifest itself when using huge pages: in that case <code>get_user_pages_fast</code> <em>will</em> properly fault the pages in when the virtual memory range passed in would be backed by huge pages.</p>
<p>If this is all very confusing, don’t worry, <code>get_user_pages</code> and friends seem to be a very tricky corner of the kernel, <a href="https://lwn.net/Kernel/Index/#Memory_management-get_user_pages">even for</a> <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/Documentation/core-api/pin_user_pages.rst">kernel developers</a>.<a href="#fnref19" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<h3 id="huge-pages">Huge pages <a href="#huge-pages">#</a></h3>
<div>
<p>Up to now we’ve presented pages as always being of the same size — 4KiB on x86-64. However, many CPU architectures, including x86-64, include larger page sizes. In the case of x86-64, we not only have 4KiB pages (the “standard” size), but also 2MiB and even 1GiB pages (“huge” pages). In the rest of the post we’ll only deal with 2MiB huge pages, since 1GiB pages are fairly uncommon, and overkill for our task anyway.</p>
<div>
<table>
<thead>
<tr>
<th>Architecture</th>
<th>Smallest page size</th>
<th>Larger page sizes</th>
</tr>
</thead>
<tbody>
<tr>
<td>x86</td>
<td>4KiB</td>
<td>2MiB, 4MiB</td>
</tr>
<tr>
<td>x86-64</td>
<td>4KiB</td>
<td>2MiB, 1GiB<a href="#fn20" id="fnref20" role="doc-noteref"><sup>20</sup></a></td>
</tr>
<tr>
<td>ARMv7</td>
<td>4KiB</td>
<td>64KiB, 1MiB, 16MiB</td>
</tr>
<tr>
<td>ARMv8</td>
<td>4KiB</td>
<td>16KiB, 64KiB</td>
</tr>
<tr>
<td>RISCV32</td>
<td>4KiB</td>
<td>4MiB</td>
</tr>
<tr>
<td>RISCV64</td>
<td>4KiB</td>
<td>2MiB, 1GiB, 512GiB, 256 TiB</td>
</tr>
<tr>
<td>Power ISA</td>
<td>8KiB</td>
<td>64 KiB, 16 MiB, 16 GiB</td>
</tr>
</tbody>
</table>
<p><small>Page sizes available on architectures commonly used today, from <a href="https://en.wikipedia.org/wiki/Page_(computer_memory)#Multiple_page_sizes">Wikipedia</a>.</small></p>
</div>
<p>The main advantage of huge pages is that bookkeeping is cheaper, since there’s fewer of them needed to cover the same amount of memory. Moreover other operations are cheaper too, such as resolving a virtual address to a physical address, since one level less of page table is needed: instead of having a 12-bit offset into the page, we’ll have a 21-bit offset, and one less page table level.</p>
</div>
<section role="doc-endnotes">
<ol start="20">
<li id="fn20" role="doc-endnote"><p>Only when the CPU has <code>PDPE1GB</code> flag.<a href="#fnref20" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div>
<p>This relieves pressure on the parts of the CPUs that handle this conversion, leading to performance improvements in many circumstances.<a href="#fn21" id="fnref21" role="doc-noteref"><sup>21</sup></a> However, in our case, the pressure is not on the hardware that walks the page table, but on its software counterpart which runs in the kernel.</p>
<p>On Linux, we can allocate a 2MiB huge page <a href="https://mazzo.li/posts/check-huge-page.html">in a variety of ways</a>, such as by allocating memory aligned to 2MiB and then using <code>madvise</code> to tell the kernel to use huge pages for the provided buffer:</p>
<div id="cb20"><pre><code><span id="cb20-1"><span>void</span><span>*</span> buf <span>=</span> aligned_alloc<span>(</span><span>1</span> <span>&lt;&lt;</span> <span>21</span><span>,</span> size<span>);</span></span>
<span id="cb20-2">madvise<span>(</span>buf<span>,</span> size<span>,</span> MADV_HUGEPAGE<span>)</span></span></code></pre></div>
<p>Switching to huge pages in our program yields another ~50% improvement:</p>
<pre><code>% ./write --write_with_vmsplice --huge_page | ./read --read_with_splice
51.0GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)</code></pre>
</div>
<section role="doc-endnotes">
<ol start="21">
<li id="fn21" role="doc-endnote"><p>For instance, the CPU includes dedicated hardware to cache parts of the page table, the “translation lookaside buffer” (TLB). The TLB is flushed at every context switch (every time we change the contents of CR3).</p>
<p>Huge pages can significantly reduce TLB misses, since a single entry for a 2MiB page covers 512 times more memory compared to a 4KiB page.<a href="#fnref21" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<div>
<p>However, the reason for the improvements is not totally obvious. Naively, we might think that by using huge pages <code>struct page</code> will just refer to a 2MiB page, rather than 4KiB.</p>
<p>Sadly this is <em>not</em> the case: the kernel code assumes everywhere that a <code>struct page</code> refers to a page of the “standard” size for the current architecture. The way this works for huge pages (and in general for what Linux calls “compound pages”) is that a “head” <code>struct page</code> contains the actual information about the backing physical page, with successive “tail” pages just containing a pointer to the head page.</p>
<p>So to represent 2MiB huge page we’ll have 1 “head” <code>struct page</code>, and up to 511 “tail” <code>struct page</code>s. Or in the case of our 128KiB buffer, 31 tail <code>struct page</code>s:<a href="#fn22" id="fnref22" role="doc-noteref"><sup>22</sup></a></p>
<p><img src="https://mazzo.li/assets/images/head-tail-pages.svg"></p>
<p>Even if we need all these <code>struct page</code>s, the code generating it ends up significantly faster. Instead of traversing the page table multiple times, once the first entry is found, the following <code>struct page</code>s can be <a href="https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/mm/gup.c#L2457">generated in a simple loop</a>. Hence the performance improvement!</p>
</div>
<section role="doc-endnotes">
<ol start="22">
<li id="fn22" role="doc-endnote"><p>If you’re thinking “that’s horrible!”, you’re not alone.</p>
<p>Various efforts are underway to simplify and/or optimize this situation.</p>
<p>Recent kernels (from 5.17 onwards) <a href="https://lwn.net/Articles/849538/">include a new type</a>, <code>struct folio</code>, identifying head pages explicitly. This reduces the need for checking whether a <code>struct page</code> is a head page or tail page at runtime, yielding performance improvements.</p>
<p><a href="https://lwn.net/Articles/839737/">Other efforts</a> aim to outright remove the extra <code>struct page</code>s, although I’m not up to date on how that is going.<a href="#fnref22" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<h2 id="busy-loop">Busy looping <a href="#busy-loop">#</a></h2>
<p>We’re almost done, I promise! Let’s look at <code>perf</code> output once again:</p>
<pre><code>-   46.91%     0.38%  write    libc-2.33.so       [.] vmsplice
   - 46.84% vmsplice
      - 43.15% entry_SYSCALL_64_after_hwframe
         - do_syscall_64
            - 41.80% __do_sys_vmsplice
               + 14.90% wait_for_space
               + 8.27% __wake_up_common_lock
                 4.40% add_to_pipe
               + 4.24% iov_iter_get_pages
               + 3.92% __mutex_lock.constprop.0
                 1.81% iov_iter_advance
               + 0.55% import_iovec
            + 0.76% syscall_exit_to_user_mode
        1.54% syscall_return_via_sysret
        1.49% __entry_text_start
</code></pre>
<p>We’re now spending a significant amount of time waiting for the pipe to be writeable (<code>wait_for_space</code>), and waking up readers which were waiting for the pipe to have content (<code>__wake_up_common_lock</code>).</p>
<p>To sidestep these synchronization costs, we can ask <code>vmsplice</code> to return if the pipe cannot be written to, and busy loop until it is — and the same when reading with <code>splice</code>:</p>
<div id="cb23"><pre><code><span id="cb23-1"><span>...</span></span>
<span id="cb23-2"><span>// SPLICE_F_NONBLOCK will cause `vmsplice` to return immediately</span></span>
<span id="cb23-3"><span>// if we can't write to the pipe, returning EAGAIN</span></span>
<span id="cb23-4"><span>ssize_t</span> ret <span>=</span> vmsplice<span>(</span>STDOUT_FILENO<span>,</span> <span>&amp;</span>bufvec<span>,</span> <span>1</span><span>,</span> SPLICE_F_NONBLOCK<span>);</span></span>
<span id="cb23-5"><span>if</span> <span>(</span>ret <span>&lt;</span> <span>0</span> <span>&amp;&amp;</span> errno <span>==</span> EAGAIN<span>)</span> <span>{</span></span>
<span id="cb23-6">  <span>continue</span><span>;</span> <span>// busy loop if not ready to write</span></span>
<span id="cb23-7"><span>}</span></span>
<span id="cb23-8"><span>...</span></span></code></pre></div>
<p>By busy looping we get another 25% performance increase:</p>
<pre><code>% ./write --write_with_vmsplice --huge_page --busy_loop | ./read --read_with_splice --busy_loop
62.5GiB/s, 256KiB buffer, 40960 iterations (10GiB piped)</code></pre>
<p>Obviously busy looping comes at the cost of fully occupying a CPU core waiting for <code>vmsplice</code> to be ready. But often this compromise is worth it, and in fact it is a common pattern for high-performance server applications: we trade off possibly wasteful CPU utilization for better latency and/or throughput.</p>
<p>In our case, this concludes our optimization journey for our little synthetic benchmark, from 3.5GiB/s to 65GiB/s.</p>
<h2 id="closing-thoughts">Closing thoughts <a href="#closing-thoughts">#</a></h2>
<p>We’ve systematically improved the performance of our program by looking at the <code>perf</code> output and the Linux source. Pipes and splicing in particular aren’t really hot topics when it comes to high-performance programming, but the themes we’ve touched upon are: zero-copy operations, ring buffers, paging &amp; virtual memory, synchronization overhead.</p>
<p>There are some details and interesting topics I left out, but this blog post was already spiraling out of control and becoming too long:</p>
<ul>
<li><p>In the actual code, the buffers are allocated separatedly, to reduce page table contention by placing them in different page table entries (something that the FizzBuzz program also does).</p>
<p>Remember that when a page table entry is taken with <code>get_user_pages</code>, its refcount is increased, and decreased on <code>put_page</code>. If we use two page table entries for the two buffers, rather than one page table entry for both of them, we have less contention when modifying the refcount.</p></li>
<li><p>The tests are ran by pinning the <code>./write</code> and <code>./read</code> processes to two cores with <code>taskset</code>.</p></li>
<li><p>The code in the repo contains many other options I played with, but did not end up talking about since they were irrelevant or not interesting enough.</p></li>
<li><p>The repo also contains <a href="https://github.com/bitonic/pipes-speed-test/blob/master/get-user-pages.cpp">a synthetic benchmark</a> for <code>get_user_pages_fast</code>, which can be used to measure exactly how much slower it runs with or without huge pages.</p></li>
<li><p>Splicing in general is a slightly dubious/<a href="https://dirtypipe.cm4all.com/">dangerous</a> concept, <a href="https://lwn.net/Articles/896267/">which continues to annoy</a> to kernel developers.</p></li>
</ul>
<p>Please let me know if this post was helpful, interesting, or unclear!</p>
<h2 id="acknowledgements">Acknowledgements <a href="#acknowledgements">#</a></h2>
<p>Many thanks to <a href="https://scvalex.net/">Alexandru Scvorţov</a>, Max Staudt, Alex Appetiti, Alex Sayers, Stephen Lavelle, Peter Cawley, and Niklas Hambüchen for reviewing drafts of this post. Max Staudt also helped me understand some subtleties of <code>get_user_pages</code>.</p>






</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[U.S. federal price tag for the post-9/11 wars is over $8T (125 pts)]]></title>
            <link>https://watson.brown.edu/costsofwar/figures/2021/BudgetaryCosts</link>
            <guid>37782218</guid>
            <pubDate>Thu, 05 Oct 2023 18:30:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://watson.brown.edu/costsofwar/figures/2021/BudgetaryCosts">https://watson.brown.edu/costsofwar/figures/2021/BudgetaryCosts</a>, See on <a href="https://news.ycombinator.com/item?id=37782218">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                      <p><img src="https://watson.brown.edu/costsofwar/files/cow/imce/figures/2021/Screen%20Shot%202021-08-31%20at%202.08.46%20PM.png" width="662" height="349"></p>
<p><strong>U.S. BUDGETARY COSTS</strong>&nbsp;<span>The vast economic impact of the U.S. post-9/11 wars goes beyond the Pentagon's "Overseas Contigency Operations" (War) budget. This chart and the attached paper estimate the more comprehensive budgetary costs of the wars.</span><em> <em>Posted on September 1, 2021.</em></em></p>
<h2><a href="https://watson.brown.edu/costsofwar/figures/2021/WarDeathToll">SEE Human Costs Data</a></h2>          
                      <ul>
                                                          <li><a href="https://watson.brown.edu/costsofwar/files/cow/imce/papers/2021/Costs%20of%20War_U.S.%20Budgetary%20Costs%20of%20Post-9%2011%20Wars_9.1.21.pdf">View Paper</a></li>
                          </ul>
          
                      <p><span><span>September 2021</span></span></p>
          
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HP fails to derail claims that it bricks scanners on printers when ink runs low (150 pts)]]></title>
            <link>https://abcnews.go.com/Technology/wireStory/hp-fails-derail-claims-bricks-scanners-multifunction-printers-102286365</link>
            <guid>37781862</guid>
            <pubDate>Thu, 05 Oct 2023 18:03:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://abcnews.go.com/Technology/wireStory/hp-fails-derail-claims-bricks-scanners-multifunction-printers-102286365">https://abcnews.go.com/Technology/wireStory/hp-fails-derail-claims-bricks-scanners-multifunction-printers-102286365</a>, See on <a href="https://news.ycombinator.com/item?id=37781862">Hacker News</a></p>
<div id="readability-page-1" class="page"><article data-testid="prism-article-body"><p><span>SAN FRANCISCO -- </span>HP has failed to shunt aside class-action legal claims that it disables the scanners on its multifunction printers when their ink runs low. Though not for lack of trying.</p><p>On Aug. 10, a federal judge ruled that HP Inc. must face a class-action lawsuit claiming that the company designs its “all-in-one” inkjet printers to disable scanning and faxing functions whenever a single printer ink cartridge runs low. The company had sought — for the second time — to dismiss the lawsuit on technical legal grounds.</p><p>“It is well-documented that ink is not required in order to scan or to fax a document, and it is certainly possible to manufacture an all-in-one printer that scans or faxes when the device is out of ink,” the plaintiffs wrote in their complaint. “Indeed, HP designs its all-in-one printer products so they will not work without ink. Yet HP does not disclose this fact to consumers.”</p><p>The lawsuit charges that HP deliberately withholds this information from consumers to boost profits from the sale of expensive ink cartridges. </p><p>Color printers require four ink cartridges -- one black and a set of three cartridges in cyan, magenta and yellow for producing colors. Some will also refuse to print if one of the color cartridges is low, even in black-and-white mode.</p><p>HP declined to comment on the issue, citing the pending litigation. The company’s court filings in the case have generally not addressed the substance of the plaintiff’s allegations.</p><p>In early 2022, U.S. District Judge Beth Labson Freeman dismissed the complaint on legal grounds but did not address the lawsuit's claims. The judge allowed the plaintiffs to amend their claim and resubmit it. On Aug. 10, the judge largely rejected HP's request to dismiss the revised complaint, allowing the case to proceed.</p><p>All-in-one inkjet printers generally seem like a bargain compared to the cost of separate devices with scanning, copying and fax functions. For instance, HP currently sells its all-in-one OfficeJet Pro 8034e online for just $159. But its least expensive standalone scanner, the ScanJet Pro s2, lists for $369 — more than twice the cost of the multifunction printer. </p><p>Of course, only one of these devices requires printer ink. “Printer ink is wildly expensive,” Consumer Reports states in its current printer buying guide, noting that consumer ink costs can easily run more than $70 a year.</p><p>Worse, a significant amount of ink is never actually used to print documents because it's consumed by printer maintenance cycles. In 2018, Consumer Reports tested hundreds of all-in-one inkjet printers and found that, when used intermittently, many models delivered less than half of their ink to printed documents. A few managed no more than 20% to 30%.</p><p>HP isn't alone in facing such legal complaints. A different set of plaintiffs sued the U.S. unit of printer and camera maker Canon Inc. in 2021 for similarly handicapping its all-in-one printers without disclosure. The parties settled that case in late 2022. Terms were not disclosed. </p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Safety vs. Performance. A case study of C, C++ and Rust sort implementations (147 pts)]]></title>
            <link>https://github.com/Voultapher/sort-research-rs/blob/main/writeup/sort_safety/text.md</link>
            <guid>37781612</guid>
            <pubDate>Thu, 05 Oct 2023 17:44:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Voultapher/sort-research-rs/blob/main/writeup/sort_safety/text.md">https://github.com/Voultapher/sort-research-rs/blob/main/writeup/sort_safety/text.md</a>, See on <a href="https://news.ycombinator.com/item?id=37781612">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
    <a data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:Voultapher/sort-research-rs" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="U7u_kUobEylXo0sTdDQCtWYkrYB8lolDFQmJ-fNGPMrZ9gy9H9Mq5MIaEc7aMDOWfMZEFvl9hspTRsXeV3hb2w" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="Voultapher/sort-research-rs" data-current-org="" data-current-owner="Voultapher" data-logged-in="false">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<div data-modal-dialog-overlay="">
  <modal-dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" role="dialog" id="feedback-dialog" aria-modal="true" aria-disabled="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
    </p>
    
  </div>
      
      
</modal-dialog></div>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<div data-modal-dialog-overlay="">
  <modal-dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" role="dialog" id="custom-scopes-dialog" aria-modal="true" aria-disabled="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      
      
</modal-dialog></div>
    </custom-scopes>
  </div>
</qbsearch-input>

            <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=Voultapher%2Fsort-research-rs" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/Voultapher/sort-research-rs/blob/main/writeup/sort_safety/text.md&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="16bc9cf423b7afc00f2b133036d922a0eb602a143faeb09b02dfa67895100db6" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
              Sign up
            </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Windows Copilot's is showing third-party Ads to Windows users (134 pts)]]></title>
            <link>https://www.ghacks.net/2023/10/03/windows-copilots-is-showing-third-party-ads-to-windows-users/</link>
            <guid>37781266</guid>
            <pubDate>Thu, 05 Oct 2023 17:17:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ghacks.net/2023/10/03/windows-copilots-is-showing-third-party-ads-to-windows-users/">https://www.ghacks.net/2023/10/03/windows-copilots-is-showing-third-party-ads-to-windows-users/</a>, See on <a href="https://news.ycombinator.com/item?id=37781266">Hacker News</a></p>
Couldn't get https://www.ghacks.net/2023/10/03/windows-copilots-is-showing-third-party-ads-to-windows-users/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Generative AI could make search harder to trust (134 pts)]]></title>
            <link>https://www.wired.com/story/fast-forward-chatbot-hallucinations-are-poisoning-web-search/</link>
            <guid>37781231</guid>
            <pubDate>Thu, 05 Oct 2023 17:13:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/fast-forward-chatbot-hallucinations-are-poisoning-web-search/">https://www.wired.com/story/fast-forward-chatbot-hallucinations-are-poisoning-web-search/</a>, See on <a href="https://news.ycombinator.com/item?id=37781231">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p><span>Web search is</span> such a routine part of daily life that it’s easy to forget how marvelous it is. Type into a little text box and a complex array of technologies—vast data centers, ravenous web crawlers, and stacks of algorithms that poke and parse a query—spring into action to serve you a simple set of relevant results.</p><p>At least, that’s the idea. The age of <a href="https://www.wired.com/tag/artificial-intelligence/">generative AI</a> threatens to sprinkle epistemological sand into the gears of web search by fooling algorithms designed for a time when the web was mostly written by humans.</p><p>Take what I learned this week about Claude Shannon, the brilliant mathematician and engineer known especially for his work on <a data-offer-url="https://en.wikipedia.org/wiki/Information_theory" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://en.wikipedia.org/wiki/Information_theory&quot;}" href="https://en.wikipedia.org/wiki/Information_theory" rel="nofollow noopener" target="_blank">information theory</a> in the 1940s. Microsoft’s Bing search engine informed me that he had also foreseen the appearance of search algorithms, describing a 1948 research paper by Shannon called “A Short History of Searching” as “a seminal work in the field of computer science outlining the history of search algorithms and their evolution over time.”</p><p>Like a good AI tool, Bing also offers a few citations to show that it has checked its facts.</p><figure><p><span><p>Microsoft's Bing search engine served up this information about a research paper mathematician Claude Shannon never wrote as if it were true.</p>
</span><span>Microsoft via Will Knight</span></p></figure><p>There is just one big problem: Shannon did not write any such paper, and the citations offered by Bing consist of fabrications—or “hallucinations” in generative AI parlance—by two chatbots, <a data-offer-url="https://pi.ai/s/v49ubm6cg7yQcMaybKgST" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://pi.ai/s/v49ubm6cg7yQcMaybKgST&quot;}" href="https://pi.ai/s/v49ubm6cg7yQcMaybKgST" rel="nofollow noopener" target="_blank">Pi from Inflection AI</a> and <a data-offer-url="https://poe.com/s/NP7t5G7oZVuz4mzdLVcp" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://poe.com/s/NP7t5G7oZVuz4mzdLVcp&quot;}" href="https://poe.com/s/NP7t5G7oZVuz4mzdLVcp" rel="nofollow noopener" target="_blank">Claude from Anthropic</a>.</p><p>This generative-AI trap that caused Bing to offer up untruths was laid—purely by accident—by <a data-offer-url="https://danielsgriffin.com/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://danielsgriffin.com/&quot;}" href="https://danielsgriffin.com/" rel="nofollow noopener" target="_blank">Daniel Griffin</a>, who recently finished a PhD on web search at UC Berkeley. In July he <a data-offer-url="https://danielsgriffin.com/weblinks/2023/07/05/a-short-history-of-searching.html" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://danielsgriffin.com/weblinks/2023/07/05/a-short-history-of-searching.html&quot;}" href="https://danielsgriffin.com/weblinks/2023/07/05/a-short-history-of-searching.html" rel="nofollow noopener" target="_blank">posted the fabricated responses</a> from the bots on his blog. Griffin had instructed both bots, “Please summarize Claude E. Shannon’s ‘A Short History of Searching’ (1948)”. He thought it a nice example of the kind of query that brings out the worst in large language models, because it asks for information that is similar to existing text found in its training data, encouraging the models to make very confident statements. Shannon did write an incredibly <a href="https://people.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf">important article</a> in 1948 titled “A Mathematical Theory of Communication,” which helped <a href="https://www.quantamagazine.org/how-claude-shannons-information-theory-invented-the-future-20201222/">lay the foundation</a> for the field of information theory.</p><p>Last week, Griffin discovered that his blog post and the links to these chatbot results had inadvertently poisoned Bing with false information. On a whim, he tried feeding the same question into Bing and discovered that the chatbot hallucinations he had induced were highlighted above the search results in the same way as facts drawn from Wikipedia might be. “It gives no indication to the user that several of these results are actually sending you straight to conversations people have with LLMs,” Griffin says. (Although WIRED could initially replicate the troubling Bing result, after an enquiry was made to Microsoft it appears to have been resolved.)</p><p>Griffin’s accidental experiment shows how the rush to deploy ChatGPT-style AI is tripping up even the companies most familiar with the technology. And how the flaws in these impressive systems can harm services that millions of people use every day.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><div><p>It may be difficult for search engines to automatically <a href="https://www.wired.com/story/how-to-spot-generative-ai-text-chatgpt/">detect AI-generated text</a>. But Microsoft could have implemented some basic safeguards, perhaps barring text drawn from chatbot transcripts from becoming a featured snippet or adding warnings that certain results or citations consist of text dreamt up by an algorithm. Griffin added a disclaimer to his blog post warning that the Shannon result was false, but Bing initially seemed to ignore it.</p><p>Although WIRED could initially replicate the troubling Bing result, it now appears to have been resolved. Caitlin Roulston, director of communications at Microsoft, says the company has adjusted Bing and regularly tweaks the search engine to stop it from showing low authority content. “There are circumstances where this may appear in search results—often because the user has expressed a clear intent to see that content or because the only content relevant to the search terms entered by the user happens to be low authority,” Roulston says. “We have developed a process for identifying these issues and are adjusting results accordingly.”</p></div><p><a data-offer-url="https://sils.unc.edu/people/faculty/profiles/Francesca-Tripodi" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://sils.unc.edu/people/faculty/profiles/Francesca-Tripodi&quot;}" href="https://sils.unc.edu/people/faculty/profiles/Francesca-Tripodi" rel="nofollow noopener" target="_blank">Francesca Tripodi</a>, an assistant professor at the University of North Carolina at Chapel Hill, who studies how search queries that produce few results, dubbed <a href="https://www.wired.com/story/opinion-google-and-the-cost-of-data-voids-during-a-pandemic/">data voids</a>, can be used to manipulate results, says large language models are affected by the same issue, because they are trained on web data and are more likely to hallucinate when an answer is absent from that training. Before long, Tripodi says, we may see people use AI-generated content to intentionally manipulate search results, a tactic Griffin’s accidental experiment suggests could be powerful. “You're going to increasingly see inaccuracies, but these inaccuracies can also be wielded and without that much computer savvy,” Tripodi says.</p><p>Even WIRED was able to try a bit of search subterfuge. I was able to get Pi to create a summary of a fake article of my own by inputting, “Summarize Will Knight’s article ‘Google’s Secret AI Project That Uses Cat Brains.’” Google did once famously develop an AI algorithm that <a href="https://www.wired.com/2012/06/google-x-neural-network/">learned to recognize cats on YouTube</a>, which perhaps led the chatbot to find my request not too far a jump from its training data. Griffin added a link to the result on his blog; we’ll see if it too becomes elevated by Bing as a bizarre piece of alternative internet history.</p><p>The problem of search results becoming soured by AI content may get a lot worse as SEO pages, social media posts, and blog posts are increasingly made with help from AI. This may be just one example of generative AI eating itself like an algorithmic <a data-offer-url="https://en.wikipedia.org/wiki/Ouroboros" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://en.wikipedia.org/wiki/Ouroboros&quot;}" href="https://en.wikipedia.org/wiki/Ouroboros" rel="nofollow noopener" target="_blank">ouroboros</a>.</p><p>Griffin says he hopes to see AI-powered search tools shake things up in the industry and spur <a href="https://www.wired.com/story/chatgpt-opened-a-new-era-in-search-microsoft-could-ruin-it/">wider choice for users</a>. But given the accidental trap he sprang on Bing and the way people rely so heavily on web search, he says “there's also some very real concerns.”</p><p>Given his “seminal work” on the subject, I think Shannon would almost certainly agree.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Booking.com makes a fortune – so why is it leaving its bills to hotels unpaid? (206 pts)]]></title>
            <link>https://www.theguardian.com/business/2023/oct/03/bookingcom-makes-a-fortune-so-why-is-it-leaving-its-bills-to-small-hotels-unpaid</link>
            <guid>37781022</guid>
            <pubDate>Thu, 05 Oct 2023 16:56:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/business/2023/oct/03/bookingcom-makes-a-fortune-so-why-is-it-leaving-its-bills-to-small-hotels-unpaid">https://www.theguardian.com/business/2023/oct/03/bookingcom-makes-a-fortune-so-why-is-it-leaving-its-bills-to-small-hotels-unpaid</a>, See on <a href="https://news.ycombinator.com/item?id=37781022">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>There is something wrong at Booking.com.</p><p>While its parent company has been making record profits – $1.3bn for the second quarter of 2023 alone – and its CEO and executives have been cashing in millions of dollars in shares this year, many of the people who helped Booking.com make that fortune claim to have not been paid since July, some say longer.</p><p><a href="https://www.theguardian.com/business/2023/oct/01/booking-com-hotel-fees-unpaid-millions-technical-issue" data-link-name="in body link">Many Booking.com accommodation partners</a> from Australia to Europe to the Americas have faced silence from the company as they’ve chased payments for months while struggling to keep businesses afloat – particularly during the lucrative northern hemisphere peak summer season, when many guests were essentially staying free of charge, as Booking.com hadn’t passed on payments.</p><p>You don’t need me to tell you the full impact of this. You only have to read the comments posted on social media and websites referencing the holiday booking site.</p><figure id="63eff0d6-94db-4348-81dc-1c05e51fb270" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:4,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/business/2023/oct/01/booking-com-hotel-fees-unpaid-millions-technical-issue&quot;,&quot;text&quot;:&quot;Travel website Booking.com leaves hoteliers thousands of dollars out of pocket&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;63eff0d6-94db-4348-81dc-1c05e51fb270&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:1,&quot;design&quot;:8}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure><p>One of the most distressing stories is beneath a post about Booking.com’s investment in AI and cutting-edge technology by the company’s highly remunerated CEO, Glenn Fogel, on his LinkedIn page.</p><p>Many partners have complained directly to the CEO about Booking.com’s silence on late payments and staff’s lack of response to calls, emails and cases opened on the platform that are closed without being resolved.</p><p>“I am a widow raising a child on my own,” reads one post by a woman I have since confirmed is called Claudia Arnull. “Because l have not been paid properly since the end of June my credit history is ruined and all my savings have gone and l am now in so much debt there is nothing left to use. As of this moment all l have to feed my child is porridge.”</p><p>The post appears genuine – and is genuinely heartbreaking – and you would hope that it will be investigated by the company. After all, nobody knows exactly how many families have been left in similar positions, with stress over credit histories and depleted savings due to Booking.com’s inability to pay partners.</p><p>We know that it’s likely that hundreds or thousands of partners have been affected. It could be many many more. We can’t know for sure, because despite dozens of emails to Booking.com’s media relations and Booking Holding’s communications departments, questions as to how many partners were affected, were never answered.</p><p>The only Booking.com spokesperson to respond to me, from their UK press office, emailed a standard reply. The official response blames payment issues on a technical glitch resulting from a planned two-week July maintenance intended to secure and enhance the travel reservations platform.<a href="https://www.theguardian.com/business/2023/oct/01/booking-com-hotel-fees-unpaid-millions-technical-issue" data-link-name="in body link"> A similar statement was given to the Guardian</a> this week in which it said it understood “the frustration of the accommodation hosts and owners” and that the “system errors that affected the payments have now been corrected”.</p><p>A Booking.com market manager in south-east Asia admitted at a recent industry event that payment delays were caused by the installation of a new payment system. Staff salaries were also affected, she said, explaining it as a risk they had to take.</p><p>It’s hard for partners to get excited about new initiatives when Booking.com hasn’t paid them in months, which means they can’t pay staff or utilities, get laundry done, buy ingredients for guest breakfasts or pay loans or investors and have to borrow from family and friends.</p><p>I’ve heard scores of heartbreaking stories in Facebook groups and online forums in recent months as I’ve connected with other accommodation partners and affiliate partners like myself to share experiences and tips to getting paid. My own three-month-long journey in chasing payments only ended last week after a partner shared direct emails for Booking.com finance department heads. I was paid three days later without an explanation or an apology.</p><p>Booking.com has 90 million accommodation partners with lodgings listed on their platform. It’s worth noting that it’s not the big brand hotels or luxury resorts that have been affected – they take payments from guests and send commissions to Booking.com. It appears to be couples, families and individuals; the independent operators of smaller lodgings that might not have a credit card facility to accept payments, such as apartment rentals, cottages, villas, bed and breakfasts and rooms in homes. A British owner of one such property says she is owed £2,500 (A$4,759).</p><figure id="1abf59a7-750d-46d9-9cec-09e44764b6d6" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:15,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/money/2023/aug/14/how-can-we-prove-our-bookingcom-accommodation-didnt-exist&quot;,&quot;text&quot;:&quot;Fake or not fake? Booking.com’s hotel or apartment was ‘a private house’&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;1abf59a7-750d-46d9-9cec-09e44764b6d6&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:1,&quot;design&quot;:8}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure><p>“What I cannot understand is why there has been zero public apology from the CEO of this organisation,” she told me. “Surely damage limitation and PR is important to them? Why no proper explanation as to why this continues to not be resolved? Why aren’t we getting an apology from the board?”</p><p>One partner, who rents out an apartment in the Canary Islands, described finally making headway in her months-long fight to get paid. On Sunday, she says, she received notice that June-September payments of €13,000 (A$21,458) would be paid in November. But why should she wait another month when Booking’s finance team can make manual payments in a few days?</p><p>Booking.com partners aren’t alone in their battle for payments, responses and explanations. On consumer site TrustPilot, Booking.com has a “bad” one-star rating (out of five stars) from 48,872 reviewers. They complain about appalling customer service, staff who don’t appear to read emails or follow up and refunds promised but allegedly not paid.</p><p>Of course, none of these complaints are new – it’s just these problems have never appeared to have been as widespread.</p><p>It’s time that Booking.com directed some of those billions in profits and so-called cutting-edge technology to fixing the long-term payment problems and communication issues. Glenn Fogel needs to explain what’s been going on and he needs to apologise.</p><p>Regulators around the globe need to hold the company to account, to immediately put pressure on the company to pay up now and pay on time and legislate for greater transparency and accountability. Booking.com shouldn’t be able to continue to reap wealth from partners struggling to keep their accommodation open because the world’s No 1 travel site hasn’t paid them their earnings.</p><ul>
 <li><p>Lara Dunston is a travel writer and a Booking.com affiliate</p></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI's justification for why training data is fair use, not infringement [pdf] (180 pts)]]></title>
            <link>https://www.uspto.gov/sites/default/files/documents/OpenAI_RFC-84-FR-58141.pdf</link>
            <guid>37780199</guid>
            <pubDate>Thu, 05 Oct 2023 15:52:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.uspto.gov/sites/default/files/documents/OpenAI_RFC-84-FR-58141.pdf">https://www.uspto.gov/sites/default/files/documents/OpenAI_RFC-84-FR-58141.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=37780199">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft introduces AI meddling to your files with Copilot in OneDrive (103 pts)]]></title>
            <link>https://www.theregister.com/2023/10/04/onedrive_to_acquire_copilot_skills/</link>
            <guid>37779457</guid>
            <pubDate>Thu, 05 Oct 2023 14:59:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/10/04/onedrive_to_acquire_copilot_skills/">https://www.theregister.com/2023/10/04/onedrive_to_acquire_copilot_skills/</a>, See on <a href="https://news.ycombinator.com/item?id=37779457">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>Microsoft is to overhaul OneDrive in a move that will bring Copilot to the cloud storage service and herd users towards the tool's web interface.</p>
<p>In a presentation that combined both consumer and business editions of OneDrive, Microsoft <a target="_blank" rel="nofollow" href="https://techcommunity.microsoft.com/t5/microsoft-onedrive-blog/unveiling-the-next-generation-of-onedrive/ba-p/3935612">was keen to show off</a> OneDrive Home – the experience to be enjoyed by users of the the product's web interface.</p>
<p>For business customers, OneDrive Home is intended to be a portal into the user's files, wherever they might lurk in an organization. One slightly worrying panel on this interface is captioned "For You," and surfaces files that Microsoft's AI reckons will be of interest. One can but hope that administrators are on the ball sufficiently to ensure that nothing that shouldn't be there inadvertently pops up.</p>

    

<p>Other views include Meetings, showing upcoming and past meetings, along with files and recordings; People, which organizes files by the people a user works with; and Shared, which, as its name suggests, shows files shared with the user.</p>

        


        

<p>Users can also select colors for folders, flag favorites, or create shortcuts.</p>
<div><p><img src="https://regmedia.co.uk/2023/09/21/handout_windows_copilot.jpg?x=174&amp;amp;y=115&amp;amp;crop=1" width="174" height="115" alt="Microsoft's Copilot logo"></p><h2 title="Windows gets its own Copilot to help operate the operating system – Edge, Bing, Outlook, 365 not spared, either">Beneath Microsoft's Surface event, AI spreads everywhere</h2>
<p><a href="https://www.theregister.com/2023/09/21/microsoft_surface_ai_copilot/"><span>MORE CONTEXT</span></a></p></div>
<p>Microsoft floated the new design for work and school <a target="_blank" rel="nofollow" href="https://techcommunity.microsoft.com/t5/microsoft-onedrive-blog/experience-the-new-onedrive-fast-organized-and-personalized/ba-p/3804985">in May</a>, but it is the items flagged as coming soon that will pique the interest of customers, even with the inevitable mentions of AI and Copilot.</p>
<p>New features announced include the ability to fire up desktop apps from files in the browser interface via "Open-in-app" – due worldwide in December. This might be useful for some, but we suspect many would opt for the File Explorer incarnation of OneDrive to do the same thing.</p>
<p>While adding OneDrive into Teams and Outlook will be handy for customers keen to link files without having to jump interfaces – integration into the Windows Outlook app or the web version is due in December – the offline functionality is the most intriguing.</p>

        

<p>It is already possible to use desktop synchronization to keep some files always available and others in the cloud. Microsoft intends to bring this functionality to the browser and permit users to select files or folders to always be available locally via OneDrive for the Web. It also plans to allow users to open and work on files flagged for offline access in the browser without internet access.</p>
<ul>

<li><a href="https://www.theregister.com/2023/09/25/ai_in_brief/">OpenAI's DALL·E 3 teams up with ChatGPT to turn brainfarts into art</a></li>

<li><a href="https://www.theregister.com/2023/09/19/github_copilot_amazon_api/">GitHub Copilot, Amazon Code Whisperer sometimes emit other people's API keys</a></li>

<li><a href="https://www.theregister.com/2023/09/07/microsoft_copilot_copyright/">Microsoft to shield paid-up Copilot customers from any AI copyright brawls it starts</a></li>
</ul>
<p>Rename, move, copy, and delete functionality will all be available to offline browser users, with changes synchronized when the internet connection is restored.</p>
<p>According to Microsoft, Files On-Demand for Web and Offline mode in the browser are due in early 2024.</p>
<p>Inevitably, Copilot skills are due to arrive in OneDrive. Microsoft hopes these will help users find files and stay organized. Worryingly, in the example given, Copilot can move files around and create folders depending on its interpretation of the user's instructions. What could possibly go wrong?</p>
<div>
<h2 title="Teams gets a bot, OneNote gets a bot, PowerPoint gets a bot, Outlook gets a bot, everybody* gets a bot!">Microsoft can't stop injecting Copilot AI into every corner of its app empire</h2>
<p><a href="https://www.theregister.com/2023/05/10/microsoft_copilot_ai/"><span>PREVIOUSLY</span></a></p></div>
<p>Copilot in OneDrive is due to turn up in December – although you'll need a Microsoft 365 Copilot license – for questions about individual files. The delivery date for the other new skills remains vague for now.</p>
<p>Finally, and more useful for users, security tools will arrive that restrict access to files, set conditional access policies at a granular level, and deal with moving OneDrive accounts across tenants. Plus, due in preview from January 2024, administration reports will be available as part of Microsoft Graph Data Connect for SharePoint.</p>
<p>Missing from the announcement was mention of a Linux client or any potential increase in storage. The company <a target="_blank" href="https://techcommunity.microsoft.com/t5/microsoft-onedrive-blog/experience-the-new-onedrive-fast-organized-and-personalized/ba-p/3804985">moved away from unlimited storage in 2015</a>, and for many users the only way to breach the 1TB OneDrive limit is <a target="_blank" href="https://www.theregister.com/2019/09/25/microsoft_onedrive_storage_price/">to hand over more cash to Microsoft</a>. ®</p>                                


                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lenovo PC boss: 4 in 5 of our devices will be repairable by 2025 (180 pts)]]></title>
            <link>https://www.theregister.com/2023/10/05/lenovo_pc_boss_4_in/</link>
            <guid>37778771</guid>
            <pubDate>Thu, 05 Oct 2023 14:04:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/10/05/lenovo_pc_boss_4_in/">https://www.theregister.com/2023/10/05/lenovo_pc_boss_4_in/</a>, See on <a href="https://news.ycombinator.com/item?id=37778771">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p><span>Canalys EMEA Forum 2023</span> Lenovo is forecasting that the vast majority of its devices will be repairable by 2025 – as will the repair parts themselves – but it is not intending to specify where customers should have their kit fixed.</p>
<p>Talking on stage at the Canalys EMEA Forum 2023, Luca Rossi, senior vice resident at Lenovo and president of its Intelligent Devices Group, said the company has committed to a net zero emission policy by 2050, and analyzing the components used in its hardware is part of the equation.</p>
<div><p><img src="https://regmedia.co.uk/2019/05/02/shutterstock_smashed_screen.jpg?x=174&amp;amp;y=115&amp;amp;crop=1" width="174" height="115" alt="smashed screen"></p><h2 title="Smartphones and tablets would also be added to the EU's list of devices that must be repairable under new rule">Europe's right-to-repair law asks hardware makers for fixes for up to 10 years</h2>
<p><a href="https://www.theregister.com/2023/03/22/new_eu_right_to_repair/"><span>READ MORE</span></a></p></div>
<p>"On repairability, we have a plan that by 2025 more than 80 percent of the repair parts will be repaired again so that they they enter into the circular economy to reduce the impact to the environment."</p>
<p>He added: "More than 80 percent of our devices will be able to be repaired at the customer, by the customer or by the channel and we are enabling this with a design for serviceability kind of approach."</p>
<p>This means that "batteries, SSD, many things, will not any longer be sealed into the product but will be available for the customer to be to repaired on site and then save a lot of waste."</p>

    

<p>The world's largest PC maker doesn't have a terrible reputation in terms of the ease at which its gadgets can be mended, unlike Apple. The ThinkPad T14 Gen 3, for example, was assigned a fixability score of <a target="_blank" rel="nofollow" href="https://www.ifixit.com/repairability/laptop-scores">7 out of 10</a> by Fixit; and the Framework 13 got top marks.</p>

        


        

<p>Lenovo and other vendors aren't going to make hardware easier to fix out of the goodness of their own hearts: the <a target="_blank" href="https://www.theregister.com/2023/09/21/right_to_repair/">European Council last month started to update EU rules</a> to ensure consumers are better informed about the lifespan and repairability of the tech devices they buy. The requirements should be finalized before June next year.</p>
<ul>

<li><a href="https://www.theregister.com/2023/09/01/right_to_repair_scientology/">Right to repair advocates have a new opponent: Scientologists</a></li>

<li><a href="https://www.theregister.com/2023/08/31/ifixit_ice_cream_machine/">We all scream for ice cream – so why are McDonald's machines always broken?</a></li>

<li><a href="https://www.theregister.com/2023/08/24/apple_california_right_repair/">After years of fighting Right to Repair, Apple U-turns-ish in California</a></li>

<li><a href="https://www.theregister.com/2023/05/17/logitech_teams_up_with_ifixit/">Logitech, iFixit to offer parts to stop folks binning their computer mouse</a></li>

<li><a href="https://www.theregister.com/2023/04/18/chromebook_expiration_date_and_repair/">Chromebook expiration date, repair issues 'bad for people and planet'</a></li>

<li><a href="https://www.theregister.com/2022/12/30/new_york_repair_bill/">New York gets right-to-repair law – after some industry-friendly repairs to the rules</a></li>
</ul>
<p>Similar right to repair movements are also happening stateside, including in <a target="_blank" href="https://www.theregister.com/2023/09/13/apple_california_right_repair/">California</a> and <a target="_blank" href="https://www.theregister.com/2022/12/30/new_york_repair_bill/">New York</a>.</p>
<p>Yet won't easing repairability hit Lenovo in the pocket as consumers and businesses, in theory at least, get a simpler solution to keep their devices running for longer? Canalys CEO Steve Brazier put this question to Rossi on stage.</p>
<p>"I think you cannot you cannot look at this in this way," he said, adding the future looks very rosy for tech companies. "There are so many opportunities that frankly thinking I'm not worried that we will damage our business by doing what is right for the planet. Not at all." ®</p>                                


                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ron Patrick's Street-Legal Jet Powered Volkswagen Beetle (2006) (151 pts)]]></title>
            <link>https://www.ronpatrickstuff.com/</link>
            <guid>37778531</guid>
            <pubDate>Thu, 05 Oct 2023 13:45:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ronpatrickstuff.com/">https://www.ronpatrickstuff.com/</a>, See on <a href="https://news.ycombinator.com/item?id=37778531">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
   <!-- ParagraphBodyStart --><div>
   <p><img src="https://www.ronpatrickstuff.com/images/AB12_15_05copy.jpg" width="800" height="600"></p><p><span size="5" color="White">This is my street-legal jet car on full afterburner.  The car has two engines: the production gasoline engine in the front driving the front wheels and the jet engine in the back.  The idea is that you drive around legally on the gasoline engine and when you want to have some fun, you spin up the jet and get on the burner (you can start the jet while driving along on the gasoline engine).  The car was built because I wanted the wildest street-legal ride possible.  With this project, I was able to use some stuff I learned while getting my fancy engineering degree (I have a PhD in Mechanical Engineering from Stanford University) to design a street-legal jet car without the distraction of how other people have done it in the past - because no one has.  I don't know how fast the car will go and probably never will.  The car was built to thrill me, not kill me.  That doesn't stop me from the occasional blast on the highway though.
   </span></p><p>
   <img src="https://www.ronpatrickstuff.com/images/VW_Rear_Pa1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The car is licensed here in California.  In California, new cars have bi-annual smog inspections so if you modify the engine, it is likely to fail the inspection and you won't be able to drive it on the street.  There are some exempt engine modifications (ex. after-cat mufflers - big deal) but none that will allow you to add 1350 hp to a new car.
   </span>
   <img src="https://www.ronpatrickstuff.com/images/VW_Side1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">Car was built to look as if VW delivered the car this way.  It handles fine and is safe.  I was thinking of putting it into an import car show but the promoter told me that it looked too plain and recommended that I put some decals on it, lower it, and put on some aftermarket wheels.  Sure kid, put on some flimsy wheels won't take a curb and don't center on the hubs, lower the car so the tires rub and get cut by the body using springs that bounce me all over the road, and advertise for companies that couldn't engineer themselves out of a paper bag.  I would have thought the 14" diameter tailpipe was enough for him but I guess it wasn't.  Response from the hot rod magazines has been slow.  One editor told me that is because I didn't use anything they advertise.  But the response to driving it on the street and going to the hot rod shows (San Francisco Custom Car Show, Grand National Roadster Show in Pomona, and the Detroit Autorama) has been fantastic.  This car attracts crowds better than any '32 Ford, '69 Camaro, or decaled Honda.
   </span>
   <img src="https://www.ronpatrickstuff.com/images/VW_Rear_Dr1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The Beetle was chosen because it looks cool with the jet and it shows it off well.  Remember the Hurst wheelstanding Barracuda "Hemi Under Glass"?  Well, this is "Jet Under Glass".  Air for the jet enters the car through the two side windows and the sunroof.  It's a little windy inside but not unbearable.
   </span>
   <img src="https://www.ronpatrickstuff.com/images/VW_Rear_Dr_Open1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The production hatch release switch on the driver's door activates two new latches (one on each side) and the hatch pops open just like a production car.  The "hatch not closed" warning light works too.
   </span>
   <img src="https://www.ronpatrickstuff.com/images/VW_Rear_Open1_PScopy.jpg" width="600" height="800"></p><p><span size="5" color="White">Here you can see the split in the tailpipe after a particularily rude burner pop.  All fixed and reinforced now.  The heat blanket keeps the plastic bumper from melting when the jet is operating.
   </span><img src="https://www.ronpatrickstuff.com/images/VW_BackDash1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The back of the gauge panel was kept open to give the car a techie look.  Something to talk about.  The car's an engineering device, let's see some engineering thingies.  The aluminum panel was designed in SolidWorks and cut out of billet, bead blasted, clear annodized, and then the labels for the switches were milled into the front using a font matching the VW cluster.  Little details like the holes having flat sides so the switches don't spin and exactly matching the contour of the dash added time to the project.  Several versions were made out of styrofoam first to get the layout and lighting right.  From the back, the panel reminds me of the 1970s McLaren CanAm cars.
   </span><img src="https://www.ronpatrickstuff.com/images/VW_Back_Pa_Window1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The first thing I did when I got the car was to cut the hole in the back for the engine.  Made a fancy jig out of a tripod, a rod, and a lawnmower wheel to mark out the cut and went at it with a pneumatic saw.  Then finished it off with jeweler's files.  No paint required.  Didn't even chip.  The hole was tricky because it goes through 3 layers (bumper and two layers of metal) and it's a circle projected onto angled surfaces.   Just finding the centerline of the car wasn't trivial.  Worrying what my neighbors would say if I ruined the back of a brand-new car made me REAL careful.  I believe the hole is within 2 mm.
   </span><img src="https://www.ronpatrickstuff.com/images/VW_Dash_Pa1_PScopy.jpg" width="600" height="800"></p><p><span size="5" color="White">There are three gauges for the jet: %RPM, Oil Pressure, and Turbine Inlet Temperature.  The most important is turbine inlet temperature.  If you exceed about 650 degrees C for very long, you damage the engine.  This is critical on start-up.  You don't want a "hot-start".  The throttle for the jet engine is located next to the gear selector.  It is a lever and has three buttons: Cool, Big-Fire, and Afterburner.  "Cool" leans out the engine and is used to lower the turbine inlet temperature if you get a hot-start.  To light big-fire or the afterburner, you hold a button down and 1/2 second later, press the hot-streak button on the floor.  Then things happen!  Notice the kerosene level gauge in front of the gear selector (jet fuel is mostly kerosene) and the bud vase missing a rose.  Where did it go?
   </span></p></div>
<div><p>
<img src="https://www.ronpatrickstuff.com/images/VW_FUBB_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">Lotsa stuff back here.  The force from the jet is tied to the vehicle through sandwich plates inside the car bolted to contoured aluminum billets that were slid into the frame rails.  You can see the billet on the left side with a hole in its center, welded to the plate with 4 bolts.  Used helium as the inert gas and a lot of current to weld that chunk of aluminum.  To return the car to its production height, adjustable spring perches were used.  Same spring rate, just corrected the ride height.  Drives and handles fine.  Kerosene is stored in a custom 14 gallon, baffled, foam-filled kevlar fuel cell in the spare tire well.  Two fuel exits in the back: a -12 on the left side and a -10 on the right.  The -10 goes to a shutoff, then a Barry Grant pump (one of the few hot rod parts on the car), then up into the car where it sees a filter, a regulator, and an electrical shutoff valve before feeding the engine.  The -12 goes into a shutoff, then a 1.5 hp, 11,000 rpm, 24V custom electric pump.   Pump is magnesium and can maintain 100 psi at 550 gph.  From the pump it goes into the car to a filter, then a large regulator, and then to the afterburner solenoid and the big-fire solenoid (to left of pump and feeding bottom of tailpipe through orange covered hose).  Fuel system was tested for flow capability.  Above the big pump you can see the relocated gasoline cap actuator and all that black stuff on the right side is the stock fuel evaporative control equipment.  All circuits feeding solenoids and pumps have fuses, relays, kick-back diodes to minimize contact arcing, sealed connectors, and use automotive wires of a gauge giving a maximum of 1V drop over the circuit loop.
</span><img src="https://www.ronpatrickstuff.com/images/VW_Engine_Dr1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The engine is a General Electric Model T58-8F.  This is a helicopter turboshaft engine that was converted to a jet engine by some internal modifications and a custom tailpipe.  The engine spins up to 26,000 RPM (idle is 13,000 RPM), draws air at 11,000 CFM, and is rated at 1350 hp.  It weighs only 300 lbm.  It grows as it warms up so the engine mounts have to account for this.  The mounts in the front are rubber and the back are sliding mounts on rubber.  The structure holding the engine was designed using finite element analysis and is redundant.  Strong, damage tolerant, and light.  Second battery and fuse/relay panel on the right, halon fire system and 5 gallon dry sump tank on left.  24V starter motor is in the nose of the engine.  700 A of current goes into that motor for 20 seconds during start-up.  Due to heat, must limit starts to three in one hour.  Big screen is to avoid FOD (foreign object damage).  Jet keeps sucking the rose out of the bud vase on the dash!
</span><img src="https://www.ronpatrickstuff.com/images/VW_Fire_Ext1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">A lot of attention to details in the car.  Note the aluminum block holding/protecting the halon gas line, pull line, harness to engine, and oil pressure line.  Rectangular tank under inlet screen is for various fuel drains.  Note temperature gauge and shutoff valve for dry sump tank.  3 gallons of turbine oil at $25/quart (ouch!).  Two-stage PPG paint matching exterior of car was used inside the car.  It is not easy to paint around a lot of bars, etc while crouched in a car, in your dusty home garage, avoiding drips, and with your wife screaming that the fumes will cause brain damage in the kids.  Especially with two-stage where you have multiple coats and critical drying times.  Kids passed their grades so I guess damage was minimal, but more importantly, the paint turned out great!
</span><img src="https://www.ronpatrickstuff.com/images/VW_Fire1copy.jpg" width="800" height="494"></p><p><span size="5" color="White">Street racing action.  The other guy wimped out after a few "big-fire" demonstrations.  What you see in the picture is about one-twentieth the full size of the fireball.  Guy standing beside car had never seen it run before and was smiling ear-to-ear throughout the show.  Had I launched, I would have burned him to a crisp.  Well, live and learn.
</span><img src="https://www.ronpatrickstuff.com/images/VW_BUS1PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">We get this a lot.  A police officer picking at his nose while trying to figure out what to charge me with.  Notice the hopeful anticipation of us on the right.  We're rooting for him and offer suggestions but unfortunately, the California Department of Motor Vehicles did not anticipate such a vehicle so he's out of luck.  Hmmm, the car has two engines making the car a hybrid so maybe we can drive in the commuter lanes along with the Toyota Priuses.
<p>*** Update 7/18/06 *** You have to give the California Department of Motor Vehicles (the DMV) credit for 
creativity on this one.� A DMV insider has disclosed to me that the DMV has 
made a formal request to a federal agency to rule if my Beetle constitutes a 
threat to national security based on what could happen if it got into the wrong 
hands. �This raises three questions in my mind: #1 Does this mean I�m the 
right hands?� #2 If someone with the name "b_laden13" is the highest eBay 
bidder for my Beetle can I refuse his offer even if he has the prestigious eBay 
Red Shooting Star feedback rating (the highest)? �#3 Would this affect my 
eBay rating?</p></span>

</p></div>
<div><p><span size="5"><br></span>
<img src="https://www.ronpatrickstuff.com/images/VW_Repair1_PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">The car was built in this garage.  Paint, welding, everything except some mill work.  That's me standing beside the engine that is out of the car for some fuel controller work.  The orange line is for the afterburner.  There's one on the other side too.  Here you can make out the four rows of variable inlets/stators at the front of the engine.  Their angle changes with engine speed and are used to avoid compressor stall.  There are 11 compressor stages and 2 turbine stages.  The engine's pressure ratio is 8.3:1.  That's how you work on a jet engine.  Stick it on its end.  Easy to store them that way too.
</span>
<img src="https://www.ronpatrickstuff.com/images/SCOOTE2PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">Here's my wife's Honda Metropolitan scooter.  She wants it to go faster than 40 mph.  So I have these two little JFS 100 jet engines and I am thinking how to put them on the scooter.  Engines are 50 lbm each so weight is an issue.  Will probably use air-start with a carbon fiber tank of compressed air.  That saves weight since batteries will then not be needed.
</span>
<img src="https://www.ronpatrickstuff.com/images/SCOOTE3PScopy.jpg" width="600" height="800"></p><p><span size="5" color="White">Looks cool from the top.  Will want to make aluminum housings to go over the engines just like on a DC-9.
</span>
<img src="https://www.ronpatrickstuff.com/images/SCOOTE1PScopy.jpg" width="800" height="600"></p><p><span size="5" color="White">Bitchin' from the back too.  Should get the scooter going.  On one jet engine alone, this engine will get a kart up to 60 mph.  Looks like I have a lot of spare wire left over from the Beetle job to do the scooter.
</span><br></p></div><!-- ParagraphBodyEnd -->
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Where does my computer get the time from? (562 pts)]]></title>
            <link>https://dotat.at/@/2023-05-26-whence-time.html</link>
            <guid>37778496</guid>
            <pubDate>Thu, 05 Oct 2023 13:42:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dotat.at/@/2023-05-26-whence-time.html">https://dotat.at/@/2023-05-26-whence-time.html</a>, See on <a href="https://news.ycombinator.com/item?id=37778496">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p>This week I was in Rotterdam for <a href="https://ripe86.ripe.net/">a RIPE meeting</a>.
On Friday morning I gave a lightning talk called <a href="https://ripe86.ripe.net/archives/video/1126/">where does my
computer get the time from?</a>
The RIPE meeting website has a copy of my slides and a video of the talk;
this is a blogified version, not an exact transcript.</p>
<blockquote>
<p>I wrote a follow-up note, <a href="https://dotat.at/@/2023-05-28-whence-whence-time.html">“Where does ‘where does my computer get
the time from?’ come from?”</a> about some things I left
out of the talk.</p>
</blockquote>
<p><img src="https://dotat.at/@/2023-04-whence-time.001.jpeg" alt="Where does my computer get the time from?"></p>
<p>Where does my computer get the time from?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.002.jpeg" alt="from NTP"></p>
<p>from NTP - here’s a picture of an NTP packet</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.003.jpeg" alt="David Mills surrounded by clocks"></p>
<p>and here’s a picture of David Mills who invented NTP</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.004.jpeg" alt="Where does my computer get the time from? NTP"></p>
<p>simple question, easy answer, end of talk? No!</p>
<p>let’s peel off some layers…</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.005.jpeg" alt="Where does NTP get the time from? NTP"></p>
<p>stratum 3 NTP servers get the time from stratum 2 NTP servers,</p>
<p>stratum 2 NTP servers get the time from stratum 1 NTP servers,</p>
<p>stratum 1 NTP servers get the time from some reference clock</p>
<p>maybe a radio signal such as MSF in Britain or DCF77 in Germany</p>
<p>but in most cases the reference clock is probably a GPS receiver</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.006.jpeg" alt="Where does NTP get the time from? GPS"></p>
<p>here’s a GPS timing receiver</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.007.jpeg" alt="Where does NTP get the time from? GPS"></p>
<p>and here’s a GPS satellite</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.008.jpeg" alt="Where does GPS get the time from?"></p>
<p>where does GPS get the time from?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.009.jpeg" alt="Schriever space force base entrance sign"></p>
<p>Schriever Space Force Base in Colorado</p>
<p>they look after a lot of different top secret satellites and other
stuff at Schriever, as you can see from all the mission logos</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.010.jpeg" alt="Schriever space force base aerial photo"></p>
<p>so you can’t get close enough to take a nice photo</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.011.jpeg" alt="Where does Schriever SFB get the time from?"></p>
<p>Where does Schriever SFB get the time from?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.012.jpeg" alt="racks of time-keeping equipment with smart blue blanking panels"></p>
<p>the US Naval Observatory Alternate Master Clock
is on site at Schriever in Colorado</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.013.jpeg" alt="the USNO main building"></p>
<p>the US Naval Observatory Alternate Master Clock
gets the time from the US Naval Observatory in Washington DC</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.014.jpeg" alt="where does the USNO get the time from?"></p>
<p>there are three answers</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.015.jpeg" alt="USNO atomic clocks"></p>
<p>the first answer is atomic clocks, lots of atomic clocks</p>
<p>in the background there are dozens of rack mounted caesium beam clocks</p>
<p>in the foreground the black boxes house hydrogen masers</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.016.jpeg" alt="more USNO atomic clocks"></p>
<p>these shiny cylinders are <a href="https://www.cnmoc.usff.navy.mil/Our-Commands/United-States-Naval-Observatory/Precise-Time-Department/The-USNO-Master-Clock/The-USNO-Master-Clock/Rubidium-Fountain-Clocks/">rubidium fountains</a></p>
<p><img src="https://dotat.at/@/2023-04-whence-time.017.jpeg" alt="aerial photograph of the USNO campus, which is a perfect circle"></p>
<p>the USNO has so many atomic clocks they have entire buildings dedicated to them</p>
<p>When I was preparing this talk I noticed on Apple Maps that there’s a
huge building site in the middle of the USNO campus. It turns out they
are building a fancy new clock house; the main limit on the accuracy
of their clocks is environmental stability: temperature, humidity,
etc. so the new building will have serious air handling.</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.018.jpeg" alt="where does the USNO get the time from?"></p>
<p>the second answer is that UTC is a horrible compromise between time
from atomic clocks and time from earth rotation</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.019.jpeg" alt="the Paris observatory"></p>
<p>so the USNO gets the time from the international earth rotation
service, which is based at the Paris Observatory</p>
<p>twice a year the IERS sends out
<a href="https://datacenter.iers.org/availableVersions.php?id=16">Bulletin C</a>,
which says whether or not there will be a leap second in six months
time; leap seconds are added (or maybe removed) from UTC to keep it in
sync with earth rotation</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.020.jpeg" alt="where does the IERS get the time from?"></p>
<p>the IERS is spread across several organizations which contribute
to its scientific work</p>
<p>for example, you can subscribe to <a href="https://datacenter.iers.org/availableVersions.php?id=6">IERS Bulletin A</a>,
which is a weekly notice with precise details of the earth orientation parameters</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.021.jpeg" alt="the USNO main building"></p>
<p>Bulletin A is sent out by the US Naval observatory</p>
<p>they need to know the exact orientation of the earth under the GPS
satellites, so they can provide precise positioning</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.022.jpeg" alt="where does the USNO get the time from?"></p>
<p>the third answer is, how does the USNO know its atomic clocks are working well?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.023.jpeg" alt="the pavillion de breteuil"></p>
<p>that information comes from the international bureau of weights and
measures in Paris, who maintain the global standard UTC</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.024.jpeg" alt="where does the BIPM get the time from?"></p>
<p>how does the BIPM determine what UTC is?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.025.jpeg" alt="Circular T"></p>
<p>the BIPM collects time measurements from national timing laboratories
around the world, and uses those measurements to determine official
UTC</p>
<p>periodically they send out <a href="https://www.bipm.org/en/time-ftp/circular-t">Circular T</a>
which has information about the discrepencies between official UTC and
UTC from the various national time labs</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.026.jpeg" alt="diagram of the new SI"></p>
<p>the BIPM is responsible for maintaining the international system of
units, which is defined by the general conference on weights and
measures</p>
<p>the CGPM is an international treaty organization established by the
metre convention of 1875</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.027.jpeg" alt="diagram of the SI highlighting the second"></p>
<p>UTC is an implementation of the SI unit of time, based on quantum
measurements of caesium atoms</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.028.jpeg" alt="where did the CGPM get the time from?"></p>
<p>where did this magic number, about 9.2 GHz, come from?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.029.jpeg" alt="Essen and Parry standing next to their atomic clock"></p>
<p>in 1955, Louis Essen (on the right) and Jack Parry (left) built
the first caesium atomic clock</p>
<p>the current definition of the second came from the calibration of this clock</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.030.jpeg" alt="where did Essen and Parry get the time from?"></p>
<p>before atomic clocks, the definition of the second was based on
astronomy, so Essen and Parry needed help from astronomers to find out
how fast their clock ticks according to the existing standard of time</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.031.jpeg" alt="the USNO main building"></p>
<p>they got help from the astronomers at the US Naval Observatory</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.032.jpeg" alt="Markowitz and Essen"></p>
<p>the way it worked was William Markowitz measured time by looking at
the skies, and Louis Essen measured time by looking at his atomic
clock, and to correlate their measurements, they both listened to the
WWV radio time signal broadcast by the national bureau of standards in
Washington DC</p>
<p>this project took 3 years, 1955 - 1958</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.033.jpeg" alt="where did Markowitz get the time from?"></p>
<p>Markowitz was measuring the “ephemeris second”</p>
<p>in 1952 the international astronomical union changed the definition of
time so that instead of being based on the rotation of the earth about
its axis, it was based on the orbit of the earth around the sun</p>
<p>in the 1930s they had discovered that the earth’s rotation is not
perfectly even: it slows down and speeds up slightly</p>
<p>clocks were now more precise than the rotation of the earth, so the
ephemeris second was a new more precise standard of time</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.034.jpeg" alt="where did the IAU get the time from?"></p>
<p>the ephemeris second is based on an astronomical ephemeris, which is a
mathematical model of the solar system</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.035.jpeg" alt="tables of the motion of the earth on its axis and around the sun"></p>
<p>the standard ephemeris was produced by Simon Newcomb in the late 1800s</p>
<p>he collected a vast amount of historical astronomical data to create
his mathematical model</p>
<p>it remained the standard until the mid 1980s</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.036.jpeg" alt="Simon Newcomb"></p>
<p>here’s a picture of Simon Newcomb</p>
<p>he is a fine-looking Victorian gentleman</p>
<p>where did he work?</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.037.jpeg" alt="the USNO main building"></p>
<p>at the US naval observatory!</p>
<p>(and the US nautical almanac office)</p>
<p><img src="https://dotat.at/@/2023-04-whence-time.038.jpeg" alt="the Royal Greenwich Observatory"></p>
<p>I have now run out of layers: before this point, clocks were set more
straightforwardly by watching stars cross the sky</p>
<p>so, to summarise my talk, where does my computer get the time from?</p>
<p>it does <em>not</em> get it from the Royal Greenwich Observatory!</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fluid Simulation (121 pts)]]></title>
            <link>https://kyndinfo.notion.site/Fluid-Simulation-f0516d9d12e245a08ae5c7545ac822dd</link>
            <guid>37778334</guid>
            <pubDate>Thu, 05 Oct 2023 13:27:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kyndinfo.notion.site/Fluid-Simulation-f0516d9d12e245a08ae5c7545ac822dd">https://kyndinfo.notion.site/Fluid-Simulation-f0516d9d12e245a08ae5c7545ac822dd</a>, See on <a href="https://news.ycombinator.com/item?id=37778334">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Introducing “Database Performance at Scale”: A Free, Open Source Book (281 pts)]]></title>
            <link>https://www.scylladb.com/2023/10/02/introducing-database-performance-at-scale-a-free-open-source-book/</link>
            <guid>37778069</guid>
            <pubDate>Thu, 05 Oct 2023 13:02:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scylladb.com/2023/10/02/introducing-database-performance-at-scale-a-free-open-source-book/">https://www.scylladb.com/2023/10/02/introducing-database-performance-at-scale-a-free-open-source-book/</a>, See on <a href="https://news.ycombinator.com/item?id=37778069">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                        <p><strong>Discover new ways to optimize database performance and avoid common mistakes that impact latency and throughput</strong></p>
<p>So many things have to align perfectly for impressive database performance. You need to think hard about factors like:</p>
<ul>
<li>The infrastructure your database sits on</li>
<li>How it’s set up</li>
<li>How you’re managing it</li>
<li>How your application interacts with the driver</li>
<li>How the driver interacts with your database</li>
<li>How that database is designed</li>
<li>How well its approach aligns with your specific workload characteristics and requirements</li>
</ul>
<p>And that’s just scratching the surface. Behind each of those elements, there’s likely years of engineering efforts from the database side – not to mention all the user-side strategizing, trial-and-error optimization, and high-pressure triaging.</p>
<p>Most teams don’t have that level of time and patience. They need performance, and they want it now.</p>
<p><img decoding="async" src="https://www.scylladb.com/wp-content/uploads/database-performance-thumb.png" alt="database performance at scale guide" width="250" height="250" srcset="https://www.scylladb.com/wp-content/uploads//database-performance-thumb.png 1000w, https://www.scylladb.com/wp-content/uploads//database-performance-thumb-300x300.png 300w, https://www.scylladb.com/wp-content/uploads//database-performance-thumb-150x150.png 150w, https://www.scylladb.com/wp-content/uploads//database-performance-thumb-768x768.png 768w" sizes="(max-width: 250px) 100vw, 250px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='250'%20height='250'%20viewBox='0%200%20250%20250'%3E%3C/svg%3E" data-src="https://www.scylladb.com/wp-content/uploads/database-performance-thumb.png" data-srcset="https://www.scylladb.com/wp-content/uploads//database-performance-thumb.png 1000w, https://www.scylladb.com/wp-content/uploads//database-performance-thumb-300x300.png 300w, https://www.scylladb.com/wp-content/uploads//database-performance-thumb-150x150.png 150w, https://www.scylladb.com/wp-content/uploads//database-performance-thumb-768x768.png 768w">Enter <em><strong>Database Performance at Scale</strong></em>, a new (free) open source book written by ScyllaDB employees and contributors Felipe Cardeneti Mendes, Piotr Sarna, Pavel Emelyanov, and Cynthia Dunlop. The authors set out to cover the many different elements that impact database performance, offering clear, practical recommendations based on their own engineering efforts and experience with thousands of real-world database deployments.</p>
<p><a href="https://lp.scylladb.com/database-performance-book-offer">Digital Download + Request Printed Book</a></p>
<p>The complete 270-page book is available now, for free.</p>
<p>Here are a few important things to note…</p>
<h2>It’s not “about” ScyllaDB – but it’s highly relevant for anyone using or considering it</h2>
<p>While this book was written by people who have been working at ScyllaDB, it’s not a book “about” ScyllaDB per se. The authors wanted to explore the topic of database performance at a broader level so the book would be relevant even beyond the ScyllaDB community. It doesn’t matter what database you’re currently using (MongoDB, MySQL, Postgres, Cassandra, DynamoDB…). If you’re experiencing some pain related to database latency and/or throughput – or you fear you will suffer soon – this is a book for you.</p>
<p>If you’re considering or already using ScyllaDB, you’ll definitely want to look at this book. It features the collective wisdom of teams who develop ScyllaDB and guide our customers through their most complex challenges. And if you want to discuss these topics in relation to your specific use case, we’d be happy to chat more – <a href="https://www.scylladb.com/company/contact-us/">just contact us</a>.</p>
<p>Also, if you are interested in a book specifically about ScyllaDB, stay tuned to our social media handles. There will be some exciting news on that front quite soon. 😉</p>
<h2>It’s highly opinionated</h2>
<p>When ScyllaDB started working with Discord 5 years ago, one of the things they appreciated most was “<a href="https://www.scylladb.com/2019/03/20/discord-on-the-joy-of-opinionated-systems/">the joy of opinionated systems</a>.” In other words, “people who are good stewards of the system have already figured out what is important.”</p>
<p>This opinionated approach is a hallmark of the <em>Database Performance at Scale</em> book. Whether explaining a performance-critical decision that a database user will likely face or sharing the rationale behind various engineering optimizations, the authors present their perspective on the associated tradeoffs, along with their recommendations on what’s best from the perspective of performance.</p>
<h2>It’s free, it’s open source… and it’s fun</h2>
<p>The authors, and all the engineers throughout both <a href="https://www.scylladb.com/">ScyllaDB</a> and <a href="https://turso.tech/">Turso</a>, are avid open source supporters and contributors. When presented with the opportunity to write a book, everyone agreed that taking an “open source” approach would be the best way to make the finished product readily accessible to all interested readers.</p>
<h2><img decoding="async" src="https://www.scylladb.com/wp-content/uploads/DatabasePerformanceChapter1.png" alt="" width="300" height="425" srcset="https://www.scylladb.com/wp-content/uploads//DatabasePerformanceChapter1.png 572w, https://www.scylladb.com/wp-content/uploads//DatabasePerformanceChapter1-212x300.png 212w" sizes="(max-width: 300px) 100vw, 300px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='300'%20height='425'%20viewBox='0%200%20300%20425'%3E%3C/svg%3E" data-src="https://www.scylladb.com/wp-content/uploads/DatabasePerformanceChapter1.png" data-srcset="https://www.scylladb.com/wp-content/uploads//DatabasePerformanceChapter1.png 572w, https://www.scylladb.com/wp-content/uploads//DatabasePerformanceChapter1-212x300.png 212w"></h2>
<p>Apress, the book’s publisher, offers an “Open Access” series of books – and that’s what we selected. This means that the digital version is available free of charge, and the entire book is licensed under the terms of the Creative Commons Attribution 4.0 International License. Print editions are available at cost through all the standard booksellers, and ScyllaDB will be featuring printed books at our events (like <a href="https://www.p99conf.io/">P99 CONF</a>) and through special book giveaways (become eligible by <a href="https://lp.scylladb.com/database-performance-book-offer">signing up here</a>).</p>
<p><a href="https://lp.scylladb.com/database-performance-book-offer">Digital Download + Request Printed Book</a></p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-9711-7.pdf?pdf=button">Just the PDF Please</a></p>
<p>Finally, you might not expect a book on databases to be a fun read. That’s fair. But as you might have sensed by now, these authors like to do things a bit differently. Delve into Chapter 1, and see for yourself!</p>
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US Government issues first-ever space debris penalty to Dish Network (248 pts)]]></title>
            <link>https://www.theguardian.com/science/2023/oct/02/fcc-space-debris-fine-dish-network-satellite</link>
            <guid>37777440</guid>
            <pubDate>Thu, 05 Oct 2023 11:54:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/science/2023/oct/02/fcc-space-debris-fine-dish-network-satellite">https://www.theguardian.com/science/2023/oct/02/fcc-space-debris-fine-dish-network-satellite</a>, See on <a href="https://news.ycombinator.com/item?id=37777440">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>The US Federal Communications Commission (FCC) has issued its first fine to a company that violated its anti-space debris rule, <a href="https://docs.fcc.gov/public/attachments/DOC-397412A1.pdf" data-link-name="in body link">the commission announced</a> on Monday.</p><p>Dish Network has to pay $150,000 to the commission over its failure to deorbit its EchoStar-7 satellite, which has been in space for more than two decades. Instead of properly deorbiting the satellite, Dish sent it into a “disposal orbit” at an altitude low enough to pose an orbital debris risk.</p><figure id="5fe93f1d-8e03-4c99-8082-5686b9e09de2" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:2,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/science/2023/oct/02/astronomers-light-pollution-tetris-block-satellite-bluewalker-3-stars-bright&quot;,&quot;text&quot;:&quot;Astronomers sound alarm over light pollution from huge new satellite&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;5fe93f1d-8e03-4c99-8082-5686b9e09de2&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:0}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure><p>“As satellite operations become more prevalent and the space economy accelerates, we must be certain that operators comply with their commitments,” said Loyaan A Egal, the FCC’s enforcement bureau chief, in the statement announcing the Dish settlement. “This is a breakthrough settlement, making very clear the FCC has strong enforcement authority and capability to enforce its vitally important space debris rules.”</p><p>In 2002, Dish launched the satellite into geostationary orbit – a field of space that begins 22,000 miles (36,000km) above Earth. It agreed in 2012 to an orbital debris mitigation plan that, upon completion of EchoStar-7’s mission, would send the the satellite 186 miles (300km) above where it was stationed, into a “graveyard orbit” where it would not be a risk to other active satellites.</p><p>But in 2022, Dish realized that the satellite was low on propellant, and would not have enough to move to its intended destination. Instead, the satellite ended up only 76 miles (122 km) above the active geostationary orbit areas – 178 km off its mark.</p><p>Space debris, broadly defined by the FCC as artificial objects orbiting Earth that are not functional spacecraft, has been a growing concern for the agency. It says that the more old material that stays in orbit, the harder it is for incoming satellites to start and complete new missions. In 2022, the FCC adopted a rule that would require satellite operators to dispose of their satellites within five years of mission completion.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-7">skip past newsletter promotion</a><p id="EmailSignup-skip-link-7" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>“Right now there are thousands of metric tons of orbital debris in the air above – and it is going to grow,” FCC chair Jessica Rosenworcel said in a 2022 statement that accompanied the announcement of the rule. “We need to address it. Because if we don’t, this space junk could constrain new opportunities.”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bitmagnet: A self-hosted BitTorrent indexer, DHT crawler, and torrent search (318 pts)]]></title>
            <link>https://bitmagnet.io/</link>
            <guid>37777347</guid>
            <pubDate>Thu, 05 Oct 2023 11:44:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bitmagnet.io/">https://bitmagnet.io/</a>, See on <a href="https://news.ycombinator.com/item?id=37777347">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content"> <main> <h2 id="bitmagnet"> <a href="#bitmagnet" aria-labelledby="bitmagnet"></a> bitmagnet </h2> <p><strong>A self-hosted BitTorrent indexer, DHT crawler, content classifier and torrent search engine with web UI, GraphQL API and Servarr stack integration.</strong></p> <p><img src="https://bitmagnet.io/assets/images/webui-1.png" alt="bitmagnet WebUI screenshot"></p> <blockquote> <p>Important</p> <p>This software is currently in alpha. It is ready to preview some interesting and unique features, but there will likely be bugs, as well as API and database schema changes before the (currently theoretical) 1.0 release. If you’d like to support this project and help it gain momentum, <strong><a href="https://github.com/bitmagnet-io/bitmagnet" target="\_blank">please give it a star on GitHub</a></strong>.</p> <p><a href="https://bitmagnet.io/internals-development.html">If you’re interested in getting involved and you’re a backend GoLang or frontend TypeScript/Angular developer, or you’re knowledgeable about BitTorrent protocols then <strong>I’d like to hear from you</strong></a> - let’s get this thing over the line!</p> </blockquote> <h2 id="dht-what-now"> <a href="#dht-what-now" aria-labelledby="dht-what-now"></a> DHT what now…? </h2> <p>The DHT crawler is <strong>bitmagnet</strong>’s killer feature that (currently) makes it unique. Well, almost unique, read on…</p> <p>So what is it? You might be aware that you can enable DHT in your BitTorrent client, and that this allows you find peers who are announcing a torrent’s hash to a Distributed Hash Table (DHT), rather than to a centralized tracker. DHT’s lesser known feature is that it allows you to crawl the info hashes it knows about. This is how <strong>bitmagnet</strong>’s DHT crawler works works - it crawls the DHT network, requesting metadata about each info hash it discovers. It then further enriches this metadata by attempting to classify it and associate it with known pieces of content, such as movies and TV shows. It then allows you to search everything it has indexed.</p> <p>This means that <strong>bitmagnet</strong> is not reliant on any external trackers or torrent indexers. It’s a self-contained, self-hosted torrent indexer, connected via DHT to a global network of peers and constantly discovering new content.</p> <p>The DHT crawler is <em>not quite</em> unique to <strong>bitmagnet</strong>; another open-source project, <a href="https://github.com/boramalper/magnetico" target="\_blank">magnetico</a> was first (as far as I know) to implement a usable DHT crawler, and was a crucial reference point for implementing this feature. However this project is no longer maintained, and does not provide the other features such as content classification, and integration with other software in the ecosystem, that greatly improve usability.</p> <p><a href="https://bitmagnet.io/internals-development/dht-crawler.html">You can find some more technical details about <strong>bitmagnet</strong>’s DHT crawler here</a>.</p> <h2 id="features--roadmap"> <a href="#features--roadmap" aria-labelledby="features--roadmap"></a> Features &amp; Roadmap </h2> <h3 id="currently-implemented-features"> <a href="#currently-implemented-features" aria-labelledby="currently-implemented-features"></a> Currently implemented features </h3> <ul> <li>A DHT crawler</li> <li>A generic BitTorrent indexer: <strong>bitmagnet</strong> can index torrents from any source, not only the DHT network - currently this is only possible via <a href="https://bitmagnet.io/tutorials/importing.html">the <code>/import</code> endpoint</a>; more user-friendly methods are in the pipeline, see high-priority features below</li> <li>A content classifier that can currently identify movie and television content, along with key related attributes such as language, resolution, source (BluRay, webrip etc.) and enriches this with data from <a href="https://www.themoviedb.org/">The Movie Database</a></li> <li><a href="https://bitmagnet.io/tutorials/importing.html">An import facility for ingesting torrents from any source, for example the RARBG backup</a></li> <li>A torrent search engine</li> <li>A GraphQL API: currently this provides a single search query; there is also an embedded GraphQL playground at <code>/graphql</code></li> <li>A web user interface implemented in Angular: currently this is a simple single-page application providing a user interface for search queries via the GraphQL API</li> <li><a href="https://bitmagnet.io/tutorials/servarr-integration.html">A Torznab-compatible endpoint for integration with the Serverr stack</a></li> </ul> <h3 id="high-priority-features-not-yet-implemented"> <a href="#high-priority-features-not-yet-implemented" aria-labelledby="high-priority-features-not-yet-implemented"></a> High priority features not yet implemented </h3> <ul> <li>Classifiers for other types of content; enrich current classifiers and weed out incorrect classifications.</li> <li>Ordering of search results: the current alpha preview has no facility for specifying the ordering of results.</li> <li>Search performance optimisations: search is currently fast enough to be usable; it becomes more sluggish once millions of torrents have been indexed - there are some low-hanging fruit in terms of optimisation that will be a near-term priority.</li> <li>A monitoring API and WebUI dashboard showing things like crawler throughput, task queue, database size etc.</li> <li>Authentication, API keys, access levels etc.</li> <li>An admin API, and in general a more complete GraphQL API</li> <li>A more complete web UI</li> <li>Saved searches for content of particular interest, enabling custom feeds in addition to the following feature</li> <li>Smart deletion: there’s a lot of crap out there; crawling DHT can quickly use lots of database disk space, and search becomes slower with millions of indexed torrents of which 90% are of no interest. A smart deletion feature would use saved searches to identify content that you’re <em>not</em> interested in, including but not limited to <abbr title="child sexual abuse material">CSAM</abbr>, and low quality content (such as low resolution movies). It would automatically delete associated metadata and add the info hash to a bloom filter, preventing the torrent from being re-indexed in future.</li> <li>Bi-directional integration with the <a href="https://prowlarr.com/" target="\_blank">Prowlarr indexer proxy</a>: Currently <strong>bitmagnet</strong> can be added as an indexer in Prowlarr; bi-directional integration would allow <strong>bitmagnet</strong> to crawl content from any indexer configured in Prowlarr, unlocking many new sources of content</li> <li>More documentation and more tests!</li> </ul> <h3 id="pipe-dream-features"> <a href="#pipe-dream-features" aria-labelledby="pipe-dream-features"></a> Pipe dream features </h3> <p>This is where things start to get a bit nebulous. For now all focus is on delivering the core features above, but some of these ideas could be explored in future:</p> <ul> <li>In-place seeding: identify files on your computer that are part of an indexed torrent, and allow them to be seeded in place after having moved, renamed or deleted parts of the torrent</li> <li>Integration with popular BitTorrent clients</li> <li>Federation of some sort: allow friends to connect instances and pool the indexing effort, perhaps involving crowd sourcing manual content curation to supplement the automated classifiers</li> <li>Something that looks like a decentralized private tracker; by this I probably mean something that’s based partly on personal trust and manually weeding out any bad actors; I’d be wary of creating something that looks a bit like <a href="https://github.com/Tribler/tribler" target="\_blank">Tribler</a>, which while an interesting project seems to have demonstrated that implementing trust, reputation and privacy at the protocol level carries too much overhead to be a compelling alternative to plain old BitTorrent, for all its imperfections</li> <li>Support for the <a href="https://blog.libtorrent.org/2020/09/bittorrent-v2/" target="\_blank">BitTorrent v2 protocol</a>: It remains to be seen if wider adoption will ever make this a valuable feature</li> </ul> </main> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Krita fund has 0 corporate support (280 pts)]]></title>
            <link>https://fund.krita.org/</link>
            <guid>37777301</guid>
            <pubDate>Thu, 05 Oct 2023 11:38:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fund.krita.org/">https://fund.krita.org/</a>, See on <a href="https://news.ycombinator.com/item?id=37777301">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
      

<div role="navigation">
  <p>
    <a href="https://fund.krita.org/">
      <img src="https://krita.org/wp-content/themes/krita-org-theme/images/krita-logo.png" alt="Krita Logo">
    </a>
  </p>
  <div>
    <ul>
      <li>
        <a href="https://krita.org/en">
          <img src="https://krita.org/wp-content/themes/krita-org-theme/images/krita-logo.png" alt="Krita Logo">
        </a>
      </li>
      <li><a href="https://fund.krita.org/">Home</a></li>

      
      
      


<li><a href="https://fund.krita.org/about/">About</a></li>
<li><a href="https://fund.krita.org/grants/">Sponsored Development</a></li>

      <li><a href="https://fund.krita.org/oauth/login">Login</a></li>
      
      
      <li id="menu-item-3416">
        <a href="https://krita.org/en/shop/">Shop</a>
      </li>
    </ul>
  </div>
</div>

    
    
  <div id="frontpage-slideshow">
      <svg width="0" height="0">
      <defs>
      <clipPath id="clip-1" clipPathUnits="objectBoundingBox">
      <polygon points="0 0, 1 0, 1 1, 0 .7"></polygon>
      </clipPath>
      </defs>
      </svg>
      <div id="slogan">
          <h3>The Krita Development Fund</h3>
          
          <div>
            <p>Campaign 2023: support 10+ full time Krita developers</p>
            
            <p><strong>5 developers</strong> <span>$&nbsp;17k / month</span></p>
          </div>
          
        </div>
      
      </div>
  

  

  
  


    
<div>
    <div>
      <p>Join the Development Fund and support<br> the Krita Foundation to work on<br> <a href="https://fund.krita.org/about/">Krita development</a>.</p>
    </div>
    <div>
        <p><span>$</span><span>5051</span></p>
        <h5>MONTHLY <br> CONTRIBUTION <small><a href="#donation-notice">**</a></small></h5>
      </div>
  </div>
<section>
  <a href="https://fund.krita.org/corporate-memberships">
        </a>
      
    
    <p><small>
        * Other pricing options available.
        Displaying your badge, name or company is opt-in.
        You control it being public or private.
      </small>
    </p>
    <p><small>
        ** The donation amount displayed on this page also
        include the donation from our
        <a href="https://krita.org/en/support-us/donations/">old system</a>.
      </small>
    </p>
  
</section>

<div id="credits"><a href="#credits">
    <h2>Credits</h2></a>
    
    
    
    
    
    
    
    
    
    
    <div id="credits-platinum"><a href="#credits-platinum">
        <h2>Platinum</h2></a>
      <ul>
        <li><span title="Amanda Choi">Amanda Choi</span></li>
        <li><span title="Scott Petrovic">Scott Petrovic</span></li>
        <li><span title="HatschYuh">HatschYuh</span></li>
      </ul>
    </div>
    
    
    <div id="credits-gold"><a href="#credits-gold">
        <h2>Gold</h2></a>
      <ul>
        <li><span title="BiBiANA DE LA O">BiBiANA DE LA O</span></li>
        <li><span title="Ki">Ki</span></li>
        <li><span title="Patrick Garraud">Patrick Garraud</span></li>
        <li><span title="Portland Digital Dabblers">Portland Digital Dabblers</span></li>
        <li><span title="Laurent Valentin Jospin">Laurent Valentin Jospin</span></li>
        <li><span title="Martin Weidenauer">Martin Weidenauer</span></li>
        <li><span title="Luke Kaalim">Luke Kaalim</span></li>
        <li><span title="Liam Smyth">Liam Smyth</span></li>
        <li><span title="Tyson Tan">Tyson Tan</span></li>
        <li><span title="Scott Wilson">Scott Wilson</span></li>
        <li><span title="damien dupont">damien dupont</span></li>
        <li><span title="Takiro Ryo">Takiro Ryo</span></li>
        <li><span title="Mara Huldra">Mara Huldra</span></li>
        <li><span title="Flo Tasser">Flo Tasser</span></li>
        <li><span title="Liuuzaki（刘）">Liuuzaki（刘）</span></li>
        <li><span title="Duduf">Duduf</span></li>
        <li><span title="Johnathan Andersen">Johnathan Andersen</span></li>
        <li><span title="Wojtek Trybus">Wojtek Trybus</span></li>
        <li><span title="David Garcia">David Garcia</span></li>
        <li><span title="David Sanchez-Cuberos">David Sanchez-Cuberos</span></li>
        <li><span title="Livio Fania">Livio Fania</span></li>
        <li><span title="fullmontis">fullmontis</span></li>
        <li><span title="Jack Vanlightly">Jack Vanlightly</span></li>
        <li><span title="Philipp Brodersen">Philipp Brodersen</span></li>
        <li><span title="Merlijn Sebrechts">Merlijn Sebrechts</span></li>
        <li><span title="Foli Ayivoh">Foli Ayivoh</span></li>
        <li><span title="Erik Broeders">Erik Broeders</span></li>
      </ul>
    </div>
    
  </div>



    
    



    

    
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why HTTP/3 is eating the world (509 pts)]]></title>
            <link>https://blog.apnic.net/2023/09/25/why-http-3-is-eating-the-world/</link>
            <guid>37777050</guid>
            <pubDate>Thu, 05 Oct 2023 10:59:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.apnic.net/2023/09/25/why-http-3-is-eating-the-world/">https://blog.apnic.net/2023/09/25/why-http-3-is-eating-the-world/</a>, See on <a href="https://news.ycombinator.com/item?id=37777050">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-content">
                            <p><img width="555" height="202" src="https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-555x202.png?v=c01599b7481a47a2d71a7421368e510d" alt="" decoding="async" fetchpriority="high" srcset="https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-555x202.png?v=c01599b7481a47a2d71a7421368e510d 555w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-300x109.png?v=c01599b7481a47a2d71a7421368e510d 300w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-1024x373.png?v=c01599b7481a47a2d71a7421368e510d 1024w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-768x280.png?v=c01599b7481a47a2d71a7421368e510d 768w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-624x227.png?v=c01599b7481a47a2d71a7421368e510d 624w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-206x75.png?v=c01599b7481a47a2d71a7421368e510d 206w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman-256x93.png?v=c01599b7481a47a2d71a7421368e510d 256w, https://blog.apnic.net/wp-content/uploads/2023/09/Pacman.png?v=c01599b7481a47a2d71a7421368e510d 1110w" sizes="(max-width: 555px) 100vw, 555px"></p><p>Adapted from Sven Mieke's orginal at <a href="https://unsplash.com/photos/Xg2kpP3bomw" target="_blank" rel="noopener">Unsplash</a>.</p>                            
<p>The HyperText Transfer Protocol (HTTP) is a cornerstone of the Internet, helping to load web pages, stream videos, and fetch data for your favourite apps.</p>



<p>Last year&nbsp;a new version of the protocol, HTTP/3, was standardized&nbsp;by the Internet Engineering Task Force (IETF), the organization in charge of defining Internet technologies. Since then, HTTP/3 and the related QUIC protocol have seen a rapid uptake on the public web. The exact numbers depend on the source and measurement methodology, with HTTP/3 support ranging from&nbsp;<a href="https://httparchive.org/reports/state-of-the-web#h3" target="_blank" rel="noreferrer noopener">19%</a>&nbsp;to&nbsp;<a href="https://2023.apricot.net/assets/files/APPS314/2023-03-01-quic-apri_1677636425.pdf" target="_blank" rel="noreferrer noopener">50+%</a>&nbsp;of web servers and networks worldwide.</p>







<p>Because these new protocols are heavily used by large companies such as Google and Meta, we can safely say that&nbsp;a large chunk of current Internet traffic already uses HTTP/3 today. In fact, the blog post you’re reading right now was probably loaded over HTTP/3!</p>



<p>In this series, I’ll provide some context on what problems HTTP/3 solves, how it performs, why it’s seen such swift adoption, and what limitations it is still working to overcome.</p>



<h2>Why do we need HTTP/3?</h2>



<p>A network protocol describes how data is communicated between two entities on the network, typically the user’s device and a web server. As there are many different companies building software for the web, the protocol needs to be standardized so that all this software can be ‘interoperable’, that is, they can all understand each other because&nbsp;they follow the same rules.</p>



<p>In practice,&nbsp;we don’t use a single protocol but a combination of several at the same time, each with its own responsibilities and rules (Figure 1). This is to make things flexible and reusable — you can still use the exact same HTTP logic, regardless if you’re using Wi-Fi, cable, or 4G/5G.</p>



<figure><a href="https://blog.apnic.net/wp-content/uploads/2023/09/fig1protocol-stack-h2-h3-995x1024-1.png"><img decoding="async" width="995" height="1024" src="https://blog.apnic.net/wp-content/uploads/2023/09/fig1protocol-stack-h2-h3-995x1024-1.png" alt="Figure 1 — The protocol stack for HTTP/2 and HTTP/3, showing how multiple protocols are combined to deliver the full Internet functionality." srcset="https://blog.apnic.net/wp-content/uploads/2023/09/fig1protocol-stack-h2-h3-995x1024-1.png 995w, https://blog.apnic.net/wp-content/uploads/2023/09/fig1protocol-stack-h2-h3-995x1024-1-292x300.png 292w, https://blog.apnic.net/wp-content/uploads/2023/09/fig1protocol-stack-h2-h3-995x1024-1-768x790.png 768w, https://blog.apnic.net/wp-content/uploads/2023/09/fig1protocol-stack-h2-h3-995x1024-1-624x642.png 624w" sizes="(max-width: 995px) 100vw, 995px"></a><figcaption>Figure 1 — The protocol stack for HTTP/2 and HTTP/3, showing how multiple protocols are combined to deliver the full Internet functionality.</figcaption></figure>



<p>Many of the original protocols for the Internet were standardized in the 80s and 90s, meaning they were built with the goals and restrictions of those decades in mind.&nbsp;While some of these protocols have stood the test of time, others have started to show their age. Most problems have been solved by workarounds and clever tricks. However, it was clear something would have to change. This is especially true for the Transport Control Protocol (TCP), which ensures your data reliably gets across the Internet.</p>



<h2>Why TCP is not optimal for today’s web</h2>



<p>HTTP/1.1 and HTTP/2 rely on TCP to successfully do their job.&nbsp;Before a client and server can exchange an HTTP request/response, they must establish a TCP connection.</p>



<p>Over time, there have been many efforts to update TCP and resolve some of its inefficiencies —&nbsp;TCP still loads webpages as if they were single files instead of a collection of hundreds of individual files. Some of these updates have been successful, but most of the more impactful ones (for example, TCP multipath and TCP Fast Open)&nbsp;took nearly a decade to be practically usable on the public Internet.</p>



<p>The main challenge with implementing changes to TCP is thousands of devices on the Internet all have their own implementation of the TCP protocol. These include phones, laptops, and servers, as well as routers, firewalls, load balancers, and other types of ‘middleboxes’. As such,&nbsp;if we want to update TCP, we have to wait for a significant portion of all these devices to update&nbsp;their implementation, which in practice can take years.</p>



<h3>The QUIC solution</h3>



<p>This became a problem to the point that the most practical way forward was to replace TCP with something entirely new.&nbsp;This replacement is the QUIC protocol, though many still (jokingly) refer to it as TCP 2.0. This nickname is appropriate because QUIC includes many of the same high-level features of TCP but with a couple of crucial changes.</p>



<p>The main change is that&nbsp;QUIC heavily integrates with the Transport Layer Security (TLS) protocol. TLS is responsible for encrypting sensitive data on the web — it’s the thing that provides the S (secure) in HTTPS. With TCP, TLS only encrypts the actual HTTP data (Figure 2). With QUIC,&nbsp;TLS also encrypts large parts of the QUIC protocol itself. This means that metadata, such as packet numbers and connection-close signals, which were visible to (and changeable by) all middleboxes in TCP, are now only available to the client and server in QUIC.</p>



<figure><a href="https://blog.apnic.net/wp-content/uploads/2023/09/fig2-tcp-vs-quic-packetization-1024x531-1.png"><img decoding="async" width="1024" height="531" src="https://blog.apnic.net/wp-content/uploads/2023/09/fig2-tcp-vs-quic-packetization-1024x531-1.png" alt="Figure 2 — Encryption differences between TCP+TLS and QUIC. QUIC encrypts much more than just the HTTP data." srcset="https://blog.apnic.net/wp-content/uploads/2023/09/fig2-tcp-vs-quic-packetization-1024x531-1.png 1024w, https://blog.apnic.net/wp-content/uploads/2023/09/fig2-tcp-vs-quic-packetization-1024x531-1-300x156.png 300w, https://blog.apnic.net/wp-content/uploads/2023/09/fig2-tcp-vs-quic-packetization-1024x531-1-768x398.png 768w, https://blog.apnic.net/wp-content/uploads/2023/09/fig2-tcp-vs-quic-packetization-1024x531-1-624x324.png 624w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>Figure 2 — Encryption differences between TCP+TLS and QUIC. QUIC encrypts much more than just the HTTP data.</figcaption></figure>



<p>Furthermore, because QUIC is more extensively encrypted, it will be much easier than it was for TCP to change it or to add new features — we only need to update the clients and servers, as the middleboxes can’t decrypt the metadata anyway. This makes&nbsp;QUIC a future-proof protocol that will allow us to more quickly solve new challenges.</p>



<p>Of course,&nbsp;this extra encryption is good for the general security and privacy of the new protocol too. While TCP + TLS are perfect for securing sensitive personal data, such as credit cards or email content, they can still be vulnerable to complex (privacy) attacks, which have become ever more practical to execute due to recent advances in AI. By further encrypting this type of metadata, QUIC is more resilient to sophisticated threat actors.</p>



<p>QUIC also has many other security-related features, including defences against Distributed Denial of Service (DDoS) attacks, with features such as amplification prevention and RETRY packets.</p>



<p>Finally,&nbsp;QUIC also includes a large amount of efficiency and performance improvements compared to TCP, including a faster connection handshake (see Figure 3),&nbsp;<a href="https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/" target="_blank" rel="noreferrer noopener">the removal of the ‘head-of-line blocking’ problem</a>, better packet loss detection/recovery, and ways to deal with users switching networks (I’ll go into more detail on this in my next post).</p>



<figure><a href="https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup.png"><img decoding="async" loading="lazy" width="1024" height="558" src="https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup-1024x558.png" alt="Figure 3 — QUIC has a faster connection setup, as it combines the ‘transport’ three-way handshake with the TLS cryptographic session establishment, which in TCP+TLS are two separate processes." srcset="https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup-1024x558.png 1024w, https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup-300x164.png 300w, https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup-768x419.png 768w, https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup-624x340.png 624w, https://blog.apnic.net/wp-content/uploads/2023/09/fig3-connection-setup.png 1200w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>Figure 3 — QUIC has a faster connection setup, as it combines the ‘transport’ three-way handshake with the TLS cryptographic session establishment, which in TCP+TLS are two separate processes.</figcaption></figure>



<h2>We didn’t need HTTP/3; what we needed was QUIC</h2>



<p>Initially, there were attempts to keep HTTP/2 and make minimal adjustments so we could also use QUIC in the lower layers (after all, that’s the whole point of having these different cooperating and reusable protocols). However, it became clear QUIC was just different enough from TCP to make it HTTP/2-incompatible. As such, the decision was made to make a new version of HTTP, just for QUIC, which eventually became HTTP/3.</p>



<p>HTTP/3 is almost identical to HTTP/2. They mainly differ in the technical implementation of the features on top of QUIC or TCP. However, because HTTP/3 can use all of QUIC’s new features,&nbsp;it is expected to be more performant when loading web pages and streaming videos. In practice, it’s especially this aspect that has led to HTTP/3’s rapid adoption.</p>



<p>In my <a href="https://blog.apnic.net/2023/10/02/how-quic-helps-you-seamlessly-connect-to-different-networks/">next post</a>, I’ll go into more detail on a common connectivity problem you’ve most likely experienced and how QUIC can help reduce calls and videos from cutting out when your mobile device changes from using Wi-Fi to cellular connectivity.</p>



<p><em><a href="https://twitter.com/programmingart" target="_blank" rel="noreferrer noopener">Robin Marx</a>&nbsp;is a Web Protocol and Performance Expert at&nbsp;<a href="http://akamai.com/" target="_blank" rel="noreferrer noopener">Akamai</a>.</em></p>



<p><em>This post was originally published on the Internet Society’s <a href="https://pulse.internetsociety.org/blog/why-http-3-is-eating-the-world" target="_blank" rel="noreferrer noopener">Pulse Blog</a>.</em></p>

                            <!-- DISCUSS ON HN BUTTON: START -->
                            
                                                        <hr>

                            <p id="views-disclaimer">The views expressed by the authors of this blog are their own
                                and do not necessarily reflect the views of APNIC. Please note a <a href="https://blog.apnic.net/?p=395">Code of Conduct</a> applies to this blog.
                            </p>
                        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[September was the most anomalously hot month ever (230 pts)]]></title>
            <link>https://www.scientificamerican.com/article/september-was-the-most-anomalously-hot-month-ever/</link>
            <guid>37776854</guid>
            <pubDate>Thu, 05 Oct 2023 10:27:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scientificamerican.com/article/september-was-the-most-anomalously-hot-month-ever/">https://www.scientificamerican.com/article/september-was-the-most-anomalously-hot-month-ever/</a>, See on <a href="https://news.ycombinator.com/item?id=37776854">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>September shattered a record for the highest temperature anomaly of any month and could help push 2023 to be the first year to exceed 1.5 degrees Celsius above preindustrial temperatures</p></div><section data-behavior="article_progress"><figure aria-label="media" itemscope="" itemid="https://static.scientificamerican.com/sciam/cache/file/CA2232AC-B303-4975-B96CCACE3E5E5192_source.png?w=590&amp;h=800&amp;402B3B2D-C6EC-48C1-A9DB9963A34B77D4" itemprop="image" itemtype="http://schema.org/ImageObject" id="image-1"><div><picture><source media="(min-width: 768px) and (max-width: 1023px)" srcset="https://static.scientificamerican.com/sciam/cache/file/CA2232AC-B303-4975-B96CCACE3E5E5192_source.png?w=690&amp;h=930&amp;402B3B2D-C6EC-48C1-A9DB9963A34B77D4"><source media="(max-width: 767px)" srcset="https://static.scientificamerican.com/sciam/cache/file/CA2232AC-B303-4975-B96CCACE3E5E5192_source.png?w=390&amp;h=520&amp;402B3B2D-C6EC-48C1-A9DB9963A34B77D4"><source media="(min-width: 768px) and (max-width: 1023px)" srcset="https://static.scientificamerican.com/sciam/cache/file/CA2232AC-B303-4975-B96CCACE3E5E5192_source.png?w=690&amp;h=930&amp;402B3B2D-C6EC-48C1-A9DB9963A34B77D4"><source media="(max-width: 767px)" srcset="https://static.scientificamerican.com/sciam/cache/file/CA2232AC-B303-4975-B96CCACE3E5E5192_source.png?w=390&amp;h=520&amp;402B3B2D-C6EC-48C1-A9DB9963A34B77D4"><img importance="high" src="https://static.scientificamerican.com/sciam/cache/file/CA2232AC-B303-4975-B96CCACE3E5E5192_source.png?w=590&amp;h=800&amp;402B3B2D-C6EC-48C1-A9DB9963A34B77D4" width="590" height="800" alt="September Was the Most Anomalously Hot Month Ever" itemprop="url"></picture></div><figcaption itemprop="caption description"> Credit: Zeke Hausfather, restyled by John Knight</figcaption></figure><div data-behavior="newsletter_promo dfp_article_rendering" data-dfp-adword="Advertisement" data-newsletterpromo_article-text="<p>Sign up for <em>Scientific American</em>&amp;rsquo;s free newsletters.</p>" data-newsletterpromo_article-image="https://static.scientificamerican.com/sciam/cache/file/4641809D-B8F1-41A3-9E5A87C21ADB2FD8_source.png" data-newsletterpromo_article-button-text="Sign Up" data-newsletterpromo_article-button-link="https://www.scientificamerican.com/page/newsletter-sign-up/?origincode=2018_sciam_ArticlePromo_NewsletterSignUp" name="articleBody" itemprop="articleBody"><p>In a year already overloaded with so many climate-related superlatives, it’s time to add another to the list: September was the most anomalously warm month ever recorded.</p>

<p>And the steady heat building this year could make 2023 not only the hottest year on record but the first to exceed 1.5 degrees Celsius (2.7 degrees Fahrenheit) above preindustrial temperatures, or the stable climate that preceded the massive release of greenhouse gases into the atmosphere from burning fossil fuels. Under the landmark Paris climate accord, nations have pledged to try to keep global warming under that threshold. “It’s very worrying,” says Kate Marvel, a senior climate scientist at Project Drawdown, a nonprofit organization that develops roadmaps for climate solutions.</p>

<p>According to data kept by the Japan Meteorological Agency, this September was about 0.5 degree C (0.9 degree F) hotter than the previous hottest September in 2020. It was also about 0.2 degree C (0.4 degree F) warmer than the previous record high temperature anomaly—a measure of how much warmer or colder a given time period is, compared with the average—which had been set in February 2016 during a blockbuster El Niño.</p>

<p>The September anomaly “is so far above anything we’ve seen before,” says Zeke Hausfather, a climate scientist who works at the payment processing firm Stripe and <a href="https://www.theclimatebrink.com/p/visualizing-a-summer-of-extremes">wrote about September’s heat in a recent blog post</a>. On X, formerly known as Twitter, <a href="https://x.com/hausfath/status/1709217151452954998?s=20">he called the feat “absolutely gobsmackingly bananas.”</a></p>

<p>The milestone reached last month comes on the heels <a href="https://www.scientificamerican.com/article/july-2023-is-hottest-month-ever-recorded-on-earth/">of July setting the record for the hottest month overall</a>. (July is always the hottest month of the year globally because it occurs at the peak of the Northern Hemisphere summer. The Northern Hemisphere has much more landmass to soak up the sun’s rays than the Southern Hemisphere, so it has the bigger influence on the global annual temperature cycle.)</p>

<p>In a marker of just how much global temperatures have risen in recent decades, Hausfather observes, “this September will be hotter than most Julys before the last decade or two.”</p>

<figure data-responsive-image="responsive-image">
<div><picture><source media="(min-width: 768px) and (max-width: 1023px)" srcset="https://static.scientificamerican.com/sciam/assets/Image/2023/thompson%201_d.png"><source media="(max-width: 767px)" srcset="https://static.scientificamerican.com/sciam/assets/Image/2023/thompson%201_m.png"><img alt="Heat map shows the daily temperature anomaly in 2023 through September. The anomaly is greatest in September, compared with the 1991–2020 baseline. " src="https://static.scientificamerican.com/sciam/assets/Image/2023/thompson%201_d.png"></picture></div>

<figcaption>Credit: Zeke Hausfather, restyled by John Knight; Source: <a href="https://climatlas.com/temperature/jra55_temperature.php">Japanese 55-Year Reanalysis data on global mean temperature, processed by Ryan Maue</a></figcaption>
</figure>

<p>Two main factors are at play in driving temperatures to such extremes: their inexorable increase from burning fossil fuels and an El Niño event that is shaping up to be a strong one. <a href="https://www.scientificamerican.com/article/el-nino-may-break-a-record-and-reshape-weather-around-the-globe/">El Niño is a part of a natural climate cycle</a> that features a tongue of unusually warm waters across the eastern Pacific Ocean. Those waters release heat into the atmosphere and can cause a cascade of changes to key atmospheric circulation patterns linked to the weather around the world.</p>

<p>Heat waves have broken records all over the globe during the past few months, including prolonged events called heat domes that plagued the southern stretch of the U.S. and parts of the Mediterranean. Summerlike temperatures were even felt in South America during the Southern Hemisphere’s winter. Two of the heat waves—one in the U.S. Southwest and one in Europe—were found to be <a href="https://www.scientificamerican.com/article/this-summers-record-breaking-heat-waves-would-not-have-happened-without-climate-change/">virtually impossible without global warming</a>. And summerlike heat has continued in places into October.</p>

<p>The most drastic temperature anomalies typically come in the winter months, when El Niño peaks in strength. In fact, the previous most anomalously warm month was February 2016, during one of the strongest El Niños on record. But this year “we’re seeing these [big anomalies] in the Northern Hemisphere summer,” Hausfather says. That leaves open the possibility of even larger anomalies when this event peaks this winter, particularly if it ends up being another strong event.</p>

<p>It is possible there is also some influence from the phasing out of sulfur-containing fuels used by ships because the aerosols spewed into the air from burning those fuels tend to have a slight cooling effect. The eruption of the Hunga Tonga–Hunga Haʻapai volcano in the southern Pacific Ocean last year may also be nudging up temperatures because of the huge amounts of water vapor—also a greenhouse gas—it injected into the atmosphere. But both factors have very small influences, compared with climate change and El Niño.</p>

<p>Given that this El Niño is expected to persist and likely to strengthen, there’s a good chance that 2023 or 2024—or both—will become the hottest year on record, besting 2016 (and 2020, which some agencies who monitor climate have tied with 2016). That isn’t surprising, given that there has been a tenth of a degree of warming since 2016, though it is “remarkable just how quickly we’ve seen warmth this year,” Hausfather says. Part of the apparent rapid warming is because 2023 began in the tail end of an unusual string of three back-to-back La Niña events. These tend to have a cooling impact on the global climate, though La Niñas today are hotter than even El Niños of several decades ago.</p>

<p>Beyond potentially becoming the hottest year on record, 2023 could also be the first year to top 1.5 degrees C above preindustrial temperatures (some individual months have already passed that threshold). But even if that happens, all hope is not lost for meeting the Paris accord goals. That threshold is measured as an average of several decades, and climate scientists have long expected that a single year would pass that mark a decade or so before the world could be considered permanently above that limit. “There is still time to limit global warming to 1.5 degrees,” Marvel says. “It is going to be incredibly difficult. The pathways are narrowing.”</p>

<p>But this year should be considered a warning of the future we face if we don’t take rapid, ambitious action. “This is what the world looks like when it’s 1.5 degrees hotter in a year, and it’s terrible,” she says. When the world does permanently pass 1.5 degrees C, the climate anomalies for individual years will reach higher than that mark.</p>

<p>To stave off that future, every bit of carbon we can keep, or take, out of the atmosphere is crucial. “Every tenth of a degree matters,” Hausfather says.</p></div><section><h3>ABOUT THE AUTHOR(S)</h3><section><p><img src="https://static.scientificamerican.com/sciam/cache/file/1CA8FD9A-9A98-483D-AE3E18788CF77E53_small.png?h=65&amp;w=65" alt="author-avatar" width="65" height="65"></p><div><ul></ul><p><strong>Andrea Thompson</strong>, an associate editor at <em>Scientific American</em>, covers sustainability.&nbsp;<a href="https://twitter.com/@AndreaTWeather">Follow Andrea Thompson on Twitter</a><span>&nbsp;Credit: Nick Higgins</span></p></div></section></section></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Docs adds tracking to links in document exports (331 pts)]]></title>
            <link>https://fosstodon.org/@Joe_0237/111145684757912952</link>
            <guid>37776492</guid>
            <pubDate>Thu, 05 Oct 2023 09:21:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fosstodon.org/@Joe_0237/111145684757912952">https://fosstodon.org/@Joe_0237/111145684757912952</a>, See on <a href="https://news.ycombinator.com/item?id=37776492">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Severity HIGH security problem to be announced with curl 8.4.0 on Oct 11 (211 pts)]]></title>
            <link>https://github.com/curl/curl/discussions/12026</link>
            <guid>37776204</guid>
            <pubDate>Thu, 05 Oct 2023 08:36:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/curl/curl/discussions/12026">https://github.com/curl/curl/discussions/12026</a>, See on <a href="https://news.ycombinator.com/item?id=37776204">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-discussion-hovercards-enabled="" data-repository-hovercards-enabled="" data-commit-hovercards-enabled="" data-channel="eyJjIjoiZGlzY3Vzc2lvbjo1Njk5NDM0IiwidCI6MTY5NjUxMDgwOH0=--b1cdc9c66a4598c6b53cfebd5358f64da2326140516bff0e1393f5a789f0a02e" data-quote-markdown=".js-comment-body" data-issue-and-pr-hovercards-enabled="" data-team-hovercards-enabled="" data-timeline-item-src="/curl/curl/discussions/12026/timeline_anchor" id="js-discussions-timeline-anchor-loader">
        <div data-body-version="36ff0bc166f6247f688fc868282897fe9c1ceb0b58f41294126f069d2d10dc77" data-error="" id="discussion-5699434" data-hpc="" data-gid="D_kwDOAAiu0c4AVvdq" data-url="/curl/curl/discussions/12026/body">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">We are cutting the release cycle short and will release curl 8.4.0 on <strong>October 11</strong>, including fixes for a severity HIGH CVE and one severity LOW. The one rated HIGH is probably the worst curl security flaw in a long time.</p>
<p dir="auto">The new version and details about the two CVEs will be published around 06:00 UTC on the release day.</p>
<ul dir="auto">
<li>CVE-2023-38545: severity HIGH (affects both libcurl and the curl tool)</li>
<li>CVE-2023-38546: severity LOW (affects libcurl only, not the tool)</li>
</ul>
<p dir="auto">There is no API nor ABI change in the coming curl release.</p>
<p dir="auto">I cannot disclose any information about which version range that is affected, as that would help identify the problem (area) with a very high accuracy so I cannot do that ahead of time. The "last several years" of versions is as specific as I can get.</p>
<p dir="auto">Now you know. Plan accordingly.</p>
    </div>
    
</task-lists>

          <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-fc47a308-4563-4423-88cb-ea0c038adc2c" for="discussion-upvote-button-Discussion-5699434" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

        </div>


        <div>
      

      <div data-body-version="d3c5735945dcf12cd740743587c4482e34f3f98a6115eb5e2bb91e5f96851e3f" data-error="" id="discussioncomment-7194181" data-open-edit-form-after-load="false" data-gid="DC_kwDOAAiu0c4AbcZF">
        



      <div>
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7194181/language_detections">
      
    </inline-machine-translation>
  <div>
        <blockquote>
<p dir="auto"><em>release curl 8.4.0 on October 11</em><br>
<em>[...]</em><br>
<em>probably the worst curl security flaw in a long time.</em></p>
</blockquote>
<p dir="auto">When there is a HIGH CVE security flaw, why then not release immediately after fix has been applied, but at a set date? (Now, exploit-hunters are aware that there is something and have 7 days notice in which they can focus intensely on curl to find the flaw and exploit it.)</p>
    </div>
    
</task-lists>

          <div>
              <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-b51ec0a5-0134-424d-a94d-cce0b54d0ccf" for="discussion-upvote-button-DiscussionComment-7194181" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

                <p><span>
                    6 replies
                  </span>
                </p>
            </div>

        </div>
          <div data-child-comments="" id="child-comments-discussioncomment-7194181">
    
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7194592,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="d9849c7bc871d89b7550abcda8cc8c1783b34211f3c057c5b3f3f802b531ede1" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="c5ec0f33de3c01345741fbdaa4f639ed09b2d402350e1f93bdea2a2a46af2d50" id="discussioncomment-7194592" data-gid="DC_kwDOAAiu0c4Abcfg" data-url="/curl/curl/discussions/12026/comments/7194592" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7194592/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">I set the date to</p>
<ul dir="auto">
<li>allow us a few days for more deliberating on the vulnerability, to really think it through, write the advisory, understand it proper. Rinse and repeat.</li>
<li>give "distro people" a few days to prepare patched updates</li>
<li>allow a few days for the project (and me) to line up things to prepare for the new release</li>
<li>we can spread the word about the pending release and the main reason for it in the mean time</li>
<li>the release needs to work with my personal schedule and Wednesdays are our standard release days</li>
</ul>
<p dir="auto">Sure, there is a minuscule risk that someone can find this (again) before we ship the patch, but this issue has stayed undetected for years for a reason. I think taking a few days to make sure we do a solid release is worth this risk.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196050,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="d8d3b9d11e45e579a5917b90e718faae5e0efb808b924380322b5a19023490e3" data-hovercard-type="user" data-hovercard-url="/users/realsimix/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/realsimix"><img src="https://avatars.githubusercontent.com/u/31847983?s=60&amp;v=4" width="30" height="30" alt="@realsimix"></a></p>

        <div data-body-version="7eeefbc0e8caa9420c39349d00f5ab49e2acc6f6de763932bfd1dfca01941530" id="discussioncomment-7196050" data-gid="DC_kwDOAAiu0c4Abc2S" data-url="/curl/curl/discussions/12026/comments/7196050" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196050/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">I'm wondering about the term "distro people": who is this exactly and how do they handle this case?</p>
<p dir="auto">I guess that they already know more than we, the public, do. How can we be sure they will fix this issue in time and make sure those doing derivative work will also follow in time?</p>
<p dir="auto">Let's say, if Red Hat can already prepare updates because they have access to some still secret information, how can the creators of all its clones, like Rocky, Alma, Oracle, CensOS and the like also provide updates in time?</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196066,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="0e1427c12eb6db9d09a859ec80182359b32fb077710d4f06f88e4dfaa78277ec" data-hovercard-type="user" data-hovercard-url="/users/ThiefMaster/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ThiefMaster"><img src="https://avatars.githubusercontent.com/u/179599?s=60&amp;v=4" width="30" height="30" alt="@ThiefMaster"></a></p>

        <div data-body-version="8f0d0de56fa403eb371ea3063ebfa3c9b66e8f3b83f6f63773f1d9219f7e1dec" id="discussioncomment-7196066" data-gid="DC_kwDOAAiu0c4Abc2i" data-url="/curl/curl/discussions/12026/comments/7196066" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196066/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Usually trusted people from mainstream Linux distributions have the proper contacts (and/or are on the proper private mailing lists) to receive patches and more information than the general public early enough. I can only assume that this is the case here as well....</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196072,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e73669cac9198c42440b48173cbb05cbe47949e5febcc29a3f99944d63620775" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="f9f7af357c77f8fa4a847e92840d0a133104e719d04032d93ed630cb912cfa91" id="discussioncomment-7196072" data-gid="DC_kwDOAAiu0c4Abc2o" data-url="/curl/curl/discussions/12026/comments/7196072" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196072/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">The "distro people" I refer to above are the ones subscribed to the <a href="https://oss-security.openwall.org/wiki/mailing-lists/distros" rel="nofollow">distros</a> mailing list.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196075,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="59dce028e2f9e877e0334016412653828f791e86458295b59b2b734224871aaf" data-hovercard-type="user" data-hovercard-url="/users/stevenpackardblp/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/stevenpackardblp"><img src="https://avatars.githubusercontent.com/u/77253966?s=60&amp;v=4" width="30" height="30" alt="@stevenpackardblp"></a></p>

        <div data-body-version="d40db506c4596b658fa84ec1b76fa816ceba5d602931f5959922f1058b74e348" id="discussioncomment-7196075" data-gid="DC_kwDOAAiu0c4Abc2r" data-url="/curl/curl/discussions/12026/comments/7196075" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196075/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Being one of those "distro people" maintaining an internal distribution for my company only, it would be beneficial if we could somehow get access to a patch that can be applied to the 8.3.0 source as soon as possible.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>

</div>


        
    </div>
  <div data-body-version="e996179da8a3653ddc6fe611238bab98a5fec6c3b8807688454db96e2216e411" data-error="" id="discussioncomment-7194734" data-gid="DC_kwDOAAiu0c4Abchu" data-url="/curl/curl/discussions/12026/comments/7194734" data-open-edit-form-after-load="false">
        



      <div>
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7194734/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Any guidance on which versions are vulnerable, so we can start planning what to upgrade?</p>
    </div>
    
</task-lists>

          <div>
              <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-bba47115-6194-4791-ad9a-472cacef8c4b" for="discussion-upvote-button-DiscussionComment-7194734" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

                <p><span>
                    2 replies
                  </span>
                </p>
            </div>

        </div>
          <div data-child-comments="" id="child-comments-discussioncomment-7194734">

    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7194757,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="9e818615834ac0b4f24376c22f02530816fcae2c23f7f027facef0907695f0f1" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="b8c63899fafc1311b2e6cc98a1321b573a686268dcba1de3c8cbbf6e27c4a907" id="discussioncomment-7194757" data-gid="DC_kwDOAAiu0c4AbciF" data-url="/curl/curl/discussions/12026/comments/7194757" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7194757/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">I'm sorry, but if I would give you that information it would help identify the problem (area) with a very high accuracy so I cannot do that ahead of time. The "last several years" of versions is as specific as I can get.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196688,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c9a50d744e7b6ee03ea71237fbb237680d1f4391404314fc34a6c780ac22d9b1" data-hovercard-type="user" data-hovercard-url="/users/robertsdotpm/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/robertsdotpm"><img src="https://avatars.githubusercontent.com/u/7320766?s=60&amp;v=4" width="30" height="30" alt="@robertsdotpm"></a></p>

        <div id="discussioncomment-7196688" data-gid="DC_kwDOAAiu0c4AbdAQ" data-url="/curl/curl/discussions/12026/comments/7196688" data-error="">
    <details data-body-version="5724eeeae9edc12542909a4c58ab1a85917d1cffe72ff9104fec68aafa864274">
      <summary>
        <div>
          <h3>
            <p>
              This comment was marked as disruptive content.
            </p>
          </h3>
            
        </div>
      </summary>
    </details>

</div>

    </div>

</div>


        
    </div>


          <div data-body-version="8b06e6f201c28d3802fa6f98ea8b15d56197c0a850decd7b5c244fce6d685478" data-error="" id="discussioncomment-7195420" data-gid="DC_kwDOAAiu0c4Abcsc" data-url="/curl/curl/discussions/12026/comments/7195420" data-open-edit-form-after-load="false">
        



      <div>
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7195420/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">I know you can't give any details before the fix is released but I assume from the way the post is phrased that you are not talking about a HIGH security flaw in some obscure protocol or similar corner of the code virtually nobody ever uses in a way that is exploitable but about something that would affect a significant percentage of the curl and libcurl user bases?</p>
    </div>
    
</task-lists>

          <div>
              <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-78784a99-b723-425c-a19e-adcc4f0e545a" for="discussion-upvote-button-DiscussionComment-7195420" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

                <p><span>
                    1 reply
                  </span>
                </p>
            </div>

        </div>
          <div data-child-comments="" id="child-comments-discussioncomment-7195420">
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7195449,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="67b2be69e06e4e8540e1ea1894fb95ac2e5985465ab4c9a6f6bc230d3af7fb48" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="b9e8dfcf59dd8ea8717aeb8ae125003d8d9383e2dace0c2abb2908aa11943e2d" id="discussioncomment-7195449" data-gid="DC_kwDOAAiu0c4Abcs5" data-url="/curl/curl/discussions/12026/comments/7195449" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7195449/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Every security flaw requires a set of conditions to apply for the problem to trigger. The pending security vulnerabilities are no different. I cannot comment on what that set is ahead of time.</p>
<p dir="auto">The severity level is a blunt tool. This is a HIGH severity problem but there is still going to be a large chunk of users who will not be affected by these problems.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>


        
    </div>
  <div data-body-version="5a4382ec7a4b244fdd453fcbd8432dc35ca514c2a63e6c371a7664f5d3c26be2" data-error="" id="discussioncomment-7195471" data-gid="DC_kwDOAAiu0c4AbctP" data-url="/curl/curl/discussions/12026/comments/7195471" data-open-edit-form-after-load="false">
        



      <div>
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7195471/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder">@bagder</a> Might I ask if you think this would also affect pycurl, python-pycurl etc?</p>
<p dir="auto">Thanks in advance</p>
<p dir="auto">Conor</p>
    </div>
    
</task-lists>

          <div>
              <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-e784a2f8-4981-43ef-a554-781718df4ed6" for="discussion-upvote-button-DiscussionComment-7195471" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

                <p><span>
                    3 replies
                  </span>
                </p>
            </div>

        </div>
          <div data-child-comments="" id="child-comments-discussioncomment-7195471">

    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7195548,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="245a580e341b6fde992f62f1fb976b79b996e053935229b16e5574991eebbd28" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="686bd7a52591755f4b45af0e04f2a5cb6348c80499543b7467ab1da0c6406eed" id="discussioncomment-7195548" data-gid="DC_kwDOAAiu0c4Abcuc" data-url="/curl/curl/discussions/12026/comments/7195548" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7195548/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Yes it will. In general terms: <em>everything</em> that uses libcurl could theoretically use libcurl in a way that triggers this vulnerability, assuming that the conditions apply and that a vulnerable libcurl version is used. Of course some/many users will also use libcurl <em>without</em> being able to trigger the vulnerability.</p>
<p dir="auto">It is impossible for me to make affirmative statements about specific libcurl users now.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7195902,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="a14926b6fab5d00bebaeb014bf80020d5422181526ee871ee0504da9d855d18a" data-hovercard-type="user" data-hovercard-url="/users/davidfoerster/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/davidfoerster"><img src="https://avatars.githubusercontent.com/u/959587?s=60&amp;v=4" width="30" height="30" alt="@davidfoerster"></a></p>

        <div data-body-version="8ed72a068cf8ec612bbe5c347907c046b825203d79e5aedda2418b9b962f38b6" id="discussioncomment-7195902" data-gid="DC_kwDOAAiu0c4Abcz-" data-url="/curl/curl/discussions/12026/comments/7195902" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7195902/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">In case you’re asking if the <em>patch</em> to libcurl will require a redistribution of pycurl: most distros ship pycurl with dynamic linkage of libcurl (rather than static linkage). In that case, pycurl would <em>almost certainly</em> benefit from the changes to the (dynamically linked) libcurl without repackaging/redistribution.</p>
<p dir="auto">(I say “almost certainly” because the libcurl patch might introduce a relevant ABI change which would require changes to pycurl but I find that very unlikely since there’s no such notice in the OP above.)</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196098,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8fd739b7f41397ed3362820cc380f65ecc6b512fe84ff4fe964bc96f7c38c65c" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="e77c0b010c1f70224d1e8b438b3a03d5c152ad63bf85e521741342084bfbf5be" id="discussioncomment-7196098" data-gid="DC_kwDOAAiu0c4Abc3C" data-url="/curl/curl/discussions/12026/comments/7196098" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196098/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">There is no API nor ABI change in the coming curl release. Updating the shared libcurl library should be enough to fix this issue on all operating systems.</p>
<p dir="auto">Then again there will also be countless docker (and similar) images that feature their own copies, so there will still be quite a large number of rebuilds necessary I bet.</p>
    </div>
    
</task-lists>

          

        </div>

    </div>

</div>


        
    </div>
  <div data-error="" id="discussioncomment-7196173" data-open-edit-form-after-load="false" data-gid="DC_kwDOAAiu0c4Abc4N">
    <details data-body-version="31db357607d290913a6b3144aa2098b3dcdae66f7b81ce9c3aecc073fcbc95ec">
      <summary>
        <div>
          <h3>
            <p>
              This comment was marked as disruptive content.
            </p>
          </h3>
            
        </div>
      </summary>
    </details>

    <div data-child-comments="" id="child-comments-discussioncomment-7196173">
    
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196554,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="3db4320c6c1fc5bc204724e6334a31368df22cc839ed7958311427853c1735aa" data-hovercard-type="user" data-hovercard-url="/users/ThiefMaster/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ThiefMaster"><img src="https://avatars.githubusercontent.com/u/179599?s=60&amp;v=4" width="30" height="30" alt="@ThiefMaster"></a></p>

        

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196660,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8df42cf86fa23f38bd8056002733f615aa41e96a97c9f64de460686c3f610624" data-hovercard-type="user" data-hovercard-url="/users/robertsdotpm/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/robertsdotpm"><img src="https://avatars.githubusercontent.com/u/7320766?s=60&amp;v=4" width="30" height="30" alt="@robertsdotpm"></a></p>

        <div id="discussioncomment-7196660" data-gid="DC_kwDOAAiu0c4Abc_0" data-url="/curl/curl/discussions/12026/comments/7196660" data-error="">
    <details data-body-version="39e8bea9eb4e450fab8c0cde0e7bb4854c48bed9f3a8f67f80cb1ac3fd4d422e">
      <summary>
        <div>
          <h3>
            <p>
              This comment was marked as disruptive content.
            </p>
          </h3>
            
        </div>
      </summary>
    </details>

</div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196684,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="0548dd09d7f2312fa40cfcaf158a755c45f4dc060132fd77abaf15958db517f5" data-hovercard-type="user" data-hovercard-url="/users/ThiefMaster/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ThiefMaster"><img src="https://avatars.githubusercontent.com/u/179599?s=60&amp;v=4" width="30" height="30" alt="@ThiefMaster"></a></p>

        <div data-body-version="b553cd87897c8f31f5c3608cbdf8c728af24fde3e2eddc1f364d9fc8d3654474" id="discussioncomment-7196684" data-gid="DC_kwDOAAiu0c4AbdAM" data-url="/curl/curl/discussions/12026/comments/7196684" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196684/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Well "this one software project" is one of the most critical ones out there... And I think we all know that OpenSSL is far from perfect (even though I think they improved a lot over the last years) - but guess what ,everyone was happy that they announced it in advance so people could prepare to patch ASAP when the patch hit.</p>
<p dir="auto">Do you seriously prefer to be surprised - maybe on your day off, away from a proper computer - with an urgent update you need to install, instead of knowing some days in advance that you may need to quickly install a patch on a given day?</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196693,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="63aa8fae4278d47c26c92b268e586da503b9c51308186540fb7dad91ab21ec41" data-hovercard-type="user" data-hovercard-url="/users/bagder/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bagder"><img src="https://avatars.githubusercontent.com/u/177011?s=60&amp;v=4" width="30" height="30" alt="@bagder"></a></p>

        <div data-body-version="bfc35113850d53f7d932fb29dffe3fdac64cd270f4549150856c73e64d56732e" id="discussioncomment-7196693" data-gid="DC_kwDOAAiu0c4AbdAV" data-url="/curl/curl/discussions/12026/comments/7196693" data-error="">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196693/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/robertsdotpm/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/robertsdotpm">@robertsdotpm</a> if you cannot keep a good and productive tone in this discussion from now on, I will ban you from this repository</p>
    </div>
    
</task-lists>

          

        </div>

    </div>
    <div>
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196719,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2d6bb2a84a457ce0b134783ea07092a371cd0e522e3a2885a05b155cb1352e2e" data-hovercard-type="user" data-hovercard-url="/users/robertsdotpm/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/robertsdotpm"><img src="https://avatars.githubusercontent.com/u/7320766?s=60&amp;v=4" width="30" height="30" alt="@robertsdotpm"></a></p>

        <div id="discussioncomment-7196719" data-gid="DC_kwDOAAiu0c4AbdAv" data-url="/curl/curl/discussions/12026/comments/7196719" data-error="">
    <details data-body-version="fa49b9cc0a08c0906ada1579c697214627a8f2d5714bb172284b8b7b91f964f5">
      <summary>
        <div>
          <h3>
            <p>
              This comment was marked as disruptive content.
            </p>
          </h3>
            
        </div>
      </summary>
    </details>

</div>

    </div>

</div>

</div>
  <div data-body-version="64af19a0e83d084b82dac690c7f34aef0be757f0287db2c20b7aebb5a34b3503" data-error="" id="discussioncomment-7196504" data-gid="DC_kwDOAAiu0c4Abc9Y" data-url="/curl/curl/discussions/12026/comments/7196504" data-open-edit-form-after-load="false">
        



      <div>
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196504/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">Thank you for the pre-alerting! At this stage can you disclose the affected versions range? It's just 8.* branch (given that you're going to release 8.4.0) or also 7.* or so may require additional patches? It would be helpful to better understand the impacted surface.</p>
    </div>
    
</task-lists>

          <div>
              <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-bb2304be-07d4-420d-8847-fc09eb9096dd" for="discussion-upvote-button-DiscussionComment-7196504" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

                <p><span>
                    1 reply
                  </span>
                </p>
            </div>

        </div>
          <div data-child-comments="" id="child-comments-discussioncomment-7196504">
      <p><a data-hydro-click="{&quot;event_type&quot;:&quot;discussions.click&quot;,&quot;payload&quot;:{&quot;event_context&quot;:&quot;DISCUSSION_VIEW&quot;,&quot;target&quot;:&quot;USER_PROFILE_LINK&quot;,&quot;current_repository_id&quot;:569041,&quot;discussion_repository_id&quot;:569041,&quot;org_level&quot;:false,&quot;discussion_id&quot;:5699434,&quot;discussion_comment_id&quot;:7196514,&quot;originating_url&quot;:&quot;https://github.com/curl/curl/discussions/12026&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6ea96dc9cae6f5851c1b68c73e231e94113fc995cd67a69362b05d333fbae1cf" data-hovercard-type="user" data-hovercard-url="/users/ThiefMaster/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ThiefMaster"><img src="https://avatars.githubusercontent.com/u/179599?s=60&amp;v=4" width="30" height="30" alt="@ThiefMaster"></a></p>

        

    </div>


        
    </div>
  <div data-body-version="51eb081b61239bb32da42ec56a907fc6ed28b2e1691ddc9bccf7e430c070d5d3" data-error="" id="discussioncomment-7196888" data-gid="DC_kwDOAAiu0c4AbdDY" data-url="/curl/curl/discussions/12026/comments/7196888" data-open-edit-form-after-load="false">
            <task-lists disabled="" sortable="">
    <inline-machine-translation detected-language="en" detect-language-url="/curl/curl/discussions/12026/comments/7196888/language_detections">
      
    </inline-machine-translation>
  <div>
        <p dir="auto">A lot of people are reading this thread or subscribe to it for real information updates, not suffering through troll comments. Therefore, <strong>it is now locked</strong> from further commenting. If you have additional questions/comments about the pending release and associated security vulnerabilities, contact me or start a separate discussion thread</p>
<p dir="auto">I have tried to move relevant information into the initial post to reduce the need to scroll through this page to find it.</p>
    </div>
    
</task-lists>

          <div>
              <div data-replace-remote-form-target="">
        <tool-tip id="tooltip-89a9f292-3373-458e-9339-4a03afa13014" for="discussion-upvote-button-DiscussionComment-7196888" popover="manual" data-direction="s" data-type="description" data-view-component="true">You must be logged in to vote</tool-tip>
    </div>

                <p><span>
                    0 replies
                  </span>
                </p>
            </div>

        </div>


  
  <!-- '"` --><!-- </textarea></xmp> --></div>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US startup begins producing 40%-efficient thermophotovoltaic cells (206 pts)]]></title>
            <link>https://www.pv-magazine.com/2023/01/25/us-startup-begins-producing-40-efficient-thermophotovoltaic-cells/</link>
            <guid>37775649</guid>
            <pubDate>Thu, 05 Oct 2023 07:05:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pv-magazine.com/2023/01/25/us-startup-begins-producing-40-efficient-thermophotovoltaic-cells/">https://www.pv-magazine.com/2023/01/25/us-startup-begins-producing-40-efficient-thermophotovoltaic-cells/</a>, See on <a href="https://news.ycombinator.com/item?id=37775649">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Antora Energy says its new 2 MW factory will make thermophotovoltaic cells for thermal storage applications. The cells are based on III-V semiconductors and reportedly have a heat-to-electricity conversion efficiency of more than 40%.</p> <p><time datetime="2023-01-25T13:30:55+01:00" itemprop="datePublished" title="Wednesday, January 25, 2023, 1:30 pm">January 25, 2023</time> </p></div><div><p>Antora Energy has started production at its 2 MW thermophotovoltaic cell factory in Sunnyvale, California.</p><p>“The cells are based on III-V semiconductors, which have a higher performance than conventional solar cells, and produce 100 times more power than similarly sized devices,” CEO Andrew Ponec told <strong>pv magazine</strong>. “The cells can convert any source of high temperature heat into electricity and their most important application is for energy storage,” he added referring to thermal energy grid storage (TEGS) consisting of a low-cost, grid-scale energy storage technology that uses TPVs to convert heat to electricity above 2,000 C.</p><p><span><span><a href="https://www.pv-magazine.com/2021/08/31/novel-approach-for-thermophotovoltaics-promises-higher-efficiencies/" target="_blank" rel="noopener">Thermophotovoltaics</a> (TPV)</span></span> is a power generation technology that uses thermal radiation to generate electricity in photovoltaic cells. A TPV system generally consists of a thermal emitter that can reach high temperatures, near or beyond 1,000 C, and a photovoltaic diode cell that can absorb photons coming from the heat source.</p><p>The technology has drawn the interest of scientists for decades, because it is able to <span><span>capture sunlight in the entire solar spectrum and has the technical potential to beat the Shockley-Queisser limit of traditional photovoltaics. However, the efficiencies reported thus far have been too low to make it commercially viable, as TPV devices still suffer from optical and thermal losses.</span></span></p><p>“Until now, TPV technology has met neither the efficiency threshold required to compete with traditional heat engines nor the manufacturability threshold required to produce the technology at scale,” said Antora Energy. “Now, Antora has met both of these critical thresholds, demonstrating heat-to-electricity conversion efficiencies greater than 40%, and demonstrating the capability to manufacture TPV at scale.”</p><div id="mid-article-bibblio" data-action="Internal" data-title="Popular content" data-catalogue="Articles" data-location="Mid Single Article"><h3>Popular content</h3></div><p>The startup said it has secured funding from the California Energy Commission to build the TPV manufacturing line in California in 2021.</p><p>“Some of Antora’s earliest funding was provided by the U.S. Department of Energy’s Advanced Research Projects Agency-Energy to develop TPV technology in partnership with the National Renewable Energy Laboratory, Lawrence Berkeley National Laboratory, and Arizona State University,” said the company.</p><p>In April, a group of researchers from the <a href="https://www.pv-magazine.com/2022/03/14/mit-scientists-develop-pv-cleaning-system-based-on-electrostatic-repulsion/" target="_blank" rel="noopener">Massachusetts Institute of Technology</a> (MIT) and the US Department of Energy's <a href="https://www.pv-magazine.com/2021/09/09/nrel-scientists-test-back-contact-architecture-on-perovskite-solar-cells/" target="_blank" rel="noopener">National Renewable Energy Laboratory</a> (NREL) unveiled a <a href="https://www.pv-magazine.com/2021/08/31/novel-approach-for-thermophotovoltaics-promises-higher-efficiencies/" target="_blank" rel="noopener">thermophotovoltaic</a> (TPV) cell featuring <a href="https://www.pv-magazine.com/2021/06/04/four-terminal-iii-v-solar-cell-with-32-57-efficiency/" target="_blank" rel="noopener">III–V materials</a> with bandgaps between 1.0 and 1.4 eV. This cell achieved an efficiency of 41.1% operating at a power density of 2.39 W cm<sup>–2</sup> and an emitter temperature of 2,400 C. The group presented the device in “<a href="https://www.nature.com/articles/s41586-022-04473-y" target="_blank" rel="noopener">Thermophotovoltaic efficiency of 40%</a>,” which was recently published in <em>Nature</em>.</p><p>This content is protected by copyright and may not be reused. If you want to cooperate with us and would like to reuse some of our content, please contact: <a href="https://www.pv-magazine.com/cdn-cgi/l/email-protection#dcfaffa4eae9e7faffa4eae8e7faffa4eae5e7faffa4ebe8e7faffa4eabae7faffa4ebeee7faffa4ebefe7faffa4e8ece7faffa4ebece7faffa4ebeae7faffa4eeb8e7faffa4eab8e7faffa4eaede7faffa4eaebe7faffa4eaede7faffa4ebbde7faffa4eae5e7faffa4eab9e7faffa4eae9e7faffa4eeb9e7faffa4eaefe7faffa4eabae7faffa4eab8e7">editors@pv-magazine.com</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[F3D is an open source 3D viewer, fast and minimalist (190 pts)]]></title>
            <link>https://f3d.app//</link>
            <guid>37775574</guid>
            <pubDate>Thu, 05 Oct 2023 06:48:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://f3d.app//">https://f3d.app//</a>, See on <a href="https://news.ycombinator.com/item?id=37775574">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content"> <main> <p><a href="https://github.com/f3d-app/f3d/actions/workflows/ci.yml"><img src="https://img.shields.io/github/actions/workflow/status/f3d-app/f3d/ci.yml?label=CI&amp;logo=github" alt="CI"></a> <a href="https://github.com/f3d-app/f3d-superbuild"><img src="https://img.shields.io/github/actions/workflow/status/f3d-app/f3d-superbuild/nightly.yml?label=Packaging&amp;logo=github" alt="Packaging"></a> <a href="https://codecov.io/gh/f3d-app/f3d"><img src="https://codecov.io/gh/f3d-app/f3d/branch/master/graph/badge.svg?token=siwG82IXK7" alt="codecov"></a> <a href="https://github.com/f3d-app/f3d/releases"><img src="https://img.shields.io/github/downloads/f3d-app/f3d/total.svg" alt="Downloads"></a> <a href="https://github.com/sponsors/f3d-app"><img src="https://img.shields.io/static/v1?label=Sponsor&amp;message=%E2%9D%A4&amp;logo=GitHub&amp;color=%23fe8e86" alt="Sponsors"></a> <a href="https://discord.f3d.app/"><img src="https://discordapp.com/api/guilds/1046005690809978911/widget.png?style=shield" alt="Discord"></a></p> <h2 id="f3d---fast-and-minimalist-3d-viewer"> <a href="#f3d---fast-and-minimalist-3d-viewer" aria-labelledby="f3d---fast-and-minimalist-3d-viewer"></a> F3D - Fast and minimalist 3D viewer </h2> <p>By Michael Migliore and Mathieu Westphal.</p> <p><img src="https://raw.githubusercontent.com/f3d-app/f3d/master/resources/logo.svg" width="20px"> F3D (pronounced <code>/fɛd/</code>) is a fast and minimalist 3D viewer. It supports many file formats, from digital content to scientific datasets (including glTF, STL, STEP, PLY, OBJ, FBX, Alembic), can show animations and support thumbnails and many rendering and texturing options including real time physically based rendering and raytracing. <br clear="left"></p> <p>It is fully controllable from the command line and support configuration files. It can provide thumbnails, support interactive hotkeys, drag&amp;drop and integration into file managers.</p> <p>F3D also contains the libf3d, a simple library to render meshes, with C++ and Python Bindings, as well as experimental Java and Javascript bindings.</p> <p><img src="https://user-images.githubusercontent.com/3129530/194735416-3f386437-456c-4145-9b5e-6bb6451d7e9a.png" width="640"></p> <p><em>A typical render by F3D</em></p> <p><img src="https://user-images.githubusercontent.com/3129530/194735261-dd6f1c1c-fa57-47b0-9d27-f735d18ccd5e.gif" width="640"></p> <p><em>Animation of a glTF file within F3D</em></p> <p><img src="https://user-images.githubusercontent.com/3129530/194735272-5bcd3e7c-a333-41f5-8066-9b0bec9885e8.png" width="640"></p> <p><em>A direct scalars render by F3D</em></p> <p>See the <a href="https://f3d.app/doc/GALLERY.html">gallery</a> for more images, take a look at the <a href="https://f3d.app/doc/CHANGELOG.html">changelog</a> or go to the <a href="https://github.com/f3d-app/f3d/releases">releases page</a> to download F3D!</p> <p>If you need any help or want to discuss with other F3D users and developers, head over to our <a href="https://discord.f3d.app/">discord</a>.</p> <h2 id="quickstart"> <a href="#quickstart" aria-labelledby="quickstart"></a> Quickstart </h2> <p>Open a file and visualize it interactively:</p>  <p>Open a file and save the rendering into an image file:</p> <div><pre><code>f3d /path/to/file.ext --output=/path/to/img.png
</code></pre></div> <p>Get help:</p> <div><pre><code>f3d --help
man f3d # Linux only
</code></pre></div> <h2 id="documentation"> <a href="#documentation" aria-labelledby="documentation"></a> Documentation </h2> <ul> <li>To get started, please take a look at the <a href="https://f3d.app/doc/user/README_USER.html">user documentation</a>.</li> <li>If you need any help, are looking for a feature or found a bug, please open an <a href="https://github.com/f3d-app/f3d/issues">issue</a>.</li> <li>If you want to use the libf3d, please take a look at its <a href="https://f3d.app/doc/libf3d/README_LIBF3D.html">documentation</a>.</li> <li>If you want to build F3D, please take a look at the <a href="https://f3d.app/doc/dev/README_DEV.html">developer documentation</a>.</li> </ul> <h2 id="support"> <a href="#support" aria-labelledby="support"></a> Support </h2> <p>F3D is developed by a team of passionate devs. Please use F3D, star it on github or even become a <a href="https://github.com/sponsors/f3d-app">sponsor</a> to support us!</p> <h2 id="contributing"> <a href="#contributing" aria-labelledby="contributing"></a> Contributing </h2> <p>We envision F3D as a community-driven project, we love to see how the project is growing thanks to the contributions from the community. We would love to see your face in the list below! If you want to contribute to F3D, you are very welcome to! Take a look at our <a href="https://f3d.app/CONTRIBUTING.html">contribution documentation</a>.</p> <p><a href="https://github.com/f3d-app/f3d/graphs/contributors"> <img src="https://contrib.rocks/image?repo=f3d-app/f3d"> </a></p> <h2 id="acknowledgments"> <a href="#acknowledgments" aria-labelledby="acknowledgments"></a> Acknowledgments </h2> <p>F3D was initially created by <a href="https://www.kitware.eu/">Kitware SAS</a> and is relying on many awesome open source projects, including <a href="https://vtk.org/">VTK</a>, <a href="https://dev.opencascade.org/">OCCT</a>, <a href="https://www.assimp.org/">Assimp</a>, <a href="http://www.alembic.io/">Alembic</a>, <a href="https://google.github.io/draco/">Draco</a> and <a href="https://www.ospray.org/">OSPRay</a>.</p> <h2 id="license"> <a href="#license" aria-labelledby="license"></a> License </h2> <p>F3D can be used and distributed under the 3-Clause BSD License, see the <a href="https://f3d.app/LICENSE.html">license</a>. F3D integrate the sources of other libraries and tools, all under permissive licenses, see the <a href="https://f3d.app/doc/THIRD_PARTY_LICENSES.html">third party licenses</a>. F3D packages relies on other libraries and tools, all under permissive licenses, all listed in the respective packages.</p> </main> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Delta finds fake jet aircraft engine parts with forged airworthiness documents (277 pts)]]></title>
            <link>https://fortune.com/2023/10/03/delta-fourth-major-us-airline-fake-jet-aircraft-engine-parts-forged-airworthiness-documents-uk-company-aog/</link>
            <guid>37775073</guid>
            <pubDate>Thu, 05 Oct 2023 05:03:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fortune.com/2023/10/03/delta-fourth-major-us-airline-fake-jet-aircraft-engine-parts-forged-airworthiness-documents-uk-company-aog/">https://fortune.com/2023/10/03/delta-fourth-major-us-airline-fake-jet-aircraft-engine-parts-forged-airworthiness-documents-uk-company-aog/</a>, See on <a href="https://news.ycombinator.com/item?id=37775073">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-cy="articleImage"><p><span><span></span><img alt="" decoding="async" data-nimg="responsive" sizes="100vw" srcset="https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=320&amp;q=75 320w, https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=480&amp;q=75 480w, https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=576&amp;q=75 576w, https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=768&amp;q=75 768w, https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=1024&amp;q=75 1024w, https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=1280&amp;q=75 1280w, https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=1440&amp;q=75 1440w" src="https://content.fortune.com/wp-content/uploads/2023/10/GettyImages-1687562765-e1696323654209.jpg?w=1440&amp;q=75"></span></p><p>As many as 21 of Delta’s engines could have been affected, according to Bloomberg calculations based on data provided by the airline, which would represent the most among U.S. carriers that have disclosed a number.</p><p>Nicolas Economou—NurPhoto/Getty Images</p></div><div data-cy="articleContent" id="article-content" color="#111111"><p><a href="https://fortune.com/company/delta-air-lines/" target="_blank" rel="">Delta Air Lines</a> Inc. has discovered unapproved components in “a small number” of its jet aircraft engines, becoming the latest carrier and fourth major US airline to disclose the use of fake parts. &nbsp;</p><div>



<p>The suspect components — which Delta declined to identify — were found on an unspecified number of its engines, a company spokesman said Monday. Those engines account for less than 1% of the more than 2,100 power plants on its mainline fleet, the spokesman said. &nbsp;</p>



<p><a href="https://fortune.com/company/american-airlines-group/" target="_blank" rel="">American Airlines Group</a> Inc., <a href="https://fortune.com/company/united-continental-holdings/" target="_blank" rel="">United Airlines</a> Holdings Inc. and <a href="https://fortune.com/company/southwest-airlines/" target="_blank" rel="">Southwest Airlines</a> Co. <a href="https://fortune.com/2023/09/22/why-so-many-flights-canceled-delayed-aog-technics-fake-parts-american-airlines/" target="_self" rel="">previously disclosed finding parts from AOG Technics</a> Ltd. on aircraft engines. That London-based company is at the center of probes by regulators into spare engine parts it sold for a longstanding type of jet engine made by CFM International Inc., a joint venture of <a href="https://fortune.com/company/general-electric/" target="_blank" rel="">General Electric</a> Co. and <a href="https://fortune.com/2023/09/22/safran-ceo-cannot-quantify-fake-parts-scandal-rocking-airlines/" target="_self" rel="">Safran SA</a>.</p>



<p>Delta would not say if the engines with the fraudulently documented parts had been on planes while they were in service. The problematic pieces, which were certified by AOG, were detected during engine work by an unnamed third party, the spokesman said.&nbsp;</p>



<p>As many as 21 of Delta’s engines could have been affected, according to Bloomberg calculations based on data provided by the airline, which would represent the most among US carriers that have disclosed a number. As many as 96 total engines were impacted by parts supplied by AOG, GE has said.&nbsp;</p>



<p>“Delta has been informed by one of our engine service providers that a small number of engines they overhauled for us contain certain parts that do not meet documentation requirements,” the company said in a statement. “Working with the overhaul provider, we are in the process of replacing those parts and remain in compliance with all FAA guidelines.”</p>



<p>None of Delta’s aircraft are currently flying with unapproved parts, and the <a href="https://fortune.com/company/discovery-insurance/" target="_blank" rel="">discovery</a> hasn’t affected flight operations, the Delta spokesman said.&nbsp;</p>



<p>Airlines, maintenance providers and regulators across the globe have been scouring records to hunt down AOG-supplied parts with forged airworthiness documents after European authorities in August determined the parts broker had supplied suspect components. Virgin Australia Airlines Pty also&nbsp;<a href="https://www.bloomberg.com/news/articles/2023-09-18/virgin-australia-finds-second-jet-part-with-fake-certificate" target="_blank" rel="noreferrer noopener">found engines</a>&nbsp;with suspect parts.</p>



<p>AOG last month was ordered by a London judge to hand over records to help identify additional suspect parts after GE and <a href="https://fortune.com/company/safran/" target="_blank" rel="">Safran</a> filed a lawsuit seeking documents relating to “every single sale of products.”</p></div><div id="text1_wrapper" data-cy="subscriptionPlea">
<p>Subscribe to Well Adjusted, our newsletter full of simple strategies to work smarter and live better, from the Fortune Well team. <a href="https://www.fortune.com/newsletters/well-adjusted?&amp;itm_source=fortune&amp;itm_medium=article_tout&amp;itm_campaign=well_adjusted" target="_self" rel="">Sign up today</a>.</p>
</div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How Transformers Work (171 pts)]]></title>
            <link>https://ig.ft.com/generative-ai/</link>
            <guid>37774676</guid>
            <pubDate>Thu, 05 Oct 2023 03:40:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ig.ft.com/generative-ai/">https://ig.ft.com/generative-ai/</a>, See on <a href="https://news.ycombinator.com/item?id=37774676">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Python 3.12.0 from a supply chain security perspective (110 pts)]]></title>
            <link>https://sethmlarson.dev/security-developer-in-residence-weekly-report-13</link>
            <guid>37774603</guid>
            <pubDate>Thu, 05 Oct 2023 03:24:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sethmlarson.dev/security-developer-in-residence-weekly-report-13">https://sethmlarson.dev/security-developer-in-residence-weekly-report-13</a>, See on <a href="https://news.ycombinator.com/item?id=37774603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<blockquote>
  <center>This critical role would not be possible without funding from the <a href="https://alpha-omega.dev/">OpenSSF Alpha-Omega Project</a>.
  Massive thank-you to Alpha-Omega for investing in the security of the Python ecosystem!</center>
</blockquote>

<p><a href="https://discuss.python.org/t/python-3-12-0-final-is-here/35186">Python 3.12.0</a> has been released! 🥳 There are multiple people
and tons of steps behind every successful release of Python which I partially documented in the article "<a href="https://sethmlarson.dev/security-developer-in-residence-weekly-report-9">Visualizing the CPython release process</a>".
This week I was invited to discuss the article on Talk Python with Michael Kennedy. You can listen to the <a href="https://talkpython.fm/episodes/show/431/visualizing-cpython-release-process">full episode on talkpython.fm</a>.</p>

<h2 id="improving-supply-chain-integrity-of-the-python-release-process">Improving supply chain integrity of the Python release process</h2>

<p>Since the entire process has happened in order to deliver 3.12.0, I wanted to discuss how it can be tweaked to provide
better assurances of the integrity of the built artifacts. I'll be discussing these improvements with release managers after the dust has settled around the 3.12.0 release
on how to potentially implement these improvements.</p>

<center>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="751px" viewBox="-0.5 -0.5 751 473" style="max-width:100%;max-height:473px;"><defs></defs><g><rect x="410" y="250" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="250" y="250" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="130" y="250" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="10" y="10" width="100" height="460" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="250" y="10" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><path d="M 60 100 L 60 129.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 60 136.65 L 55.5 127.65 L 60 129.9 L 64.5 127.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="20" y="20" width="80" height="80" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="60" y="64" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Release Tool</text></switch></g><path d="M 260 60 L 110.1 60" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 103.35 60 L 112.35 55.5 L 110.1 60 L 112.35 64.5 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="260" y="20" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="300" y="64" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">CPython RM Fo...</text></switch></g><path d="M 300 220 L 300 240 L 180 240 L 180 249.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 180 256.65 L 175.5 247.65 L 180 249.9 L 184.5 247.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><path d="M 300 220 L 300 249.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 300 256.65 L 295.5 247.65 L 300 249.9 L 304.5 247.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="260" y="140" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="300" y="184" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">v3.X.YaN</text></switch></g><path d="M 100 180 L 249.9 180" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 256.65 180 L 247.65 184.5 L 249.9 180 L 247.65 175.5 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><path d="M 60 220 L 60 369.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 60 376.65 L 55.5 367.65 L 60 369.9 L 64.5 367.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="20" y="140" width="80" height="80" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="60" y="184" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">git commit...</text></switch></g><rect x="20" y="380" width="80" height="80" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="60" y="424" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Source Tarbal...</text></switch></g><path d="M 180 340 L 180 369.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 180 376.65 L 175.5 367.65 L 180 369.9 L 184.5 367.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="140" y="260" width="80" height="80" fill="#d5e8d4" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="180" y="304" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Azure Pipelin...</text></switch></g><path d="M 300 340 L 300 369.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 300 376.65 L 295.5 367.65 L 300 369.9 L 304.5 367.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="260" y="260" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="300" y="304" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">macOS Build P...</text></switch></g><path d="M 300 140 L 300 100" fill="none" stroke="#000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"></path><rect x="140" y="380" width="80" height="80" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="180" y="424" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Windows Insta...</text></switch></g><rect x="260" y="380" width="80" height="80" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="300" y="424" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">macOS Install...</text></switch></g><rect x="650" y="250" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="530" y="250" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="410" y="10" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="650" y="10" width="100" height="220" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><path d="M 460 100 L 460 129.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 460 136.65 L 455.5 127.65 L 460 129.9 L 464.5 127.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="420" y="20" width="80" height="80" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="460" y="64" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Release Tool</text></switch></g><path d="M 660 60 L 510.1 60" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 503.35 60 L 512.35 55.5 L 510.1 60 L 512.35 64.5 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="660" y="20" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="700" y="64" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">CPython RM Fo...</text></switch></g><path d="M 700 220 L 700 240 L 580 240 L 580 249.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 580 256.65 L 575.5 247.65 L 580 249.9 L 584.5 247.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><path d="M 700 220 L 700 249.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 700 256.65 L 695.5 247.65 L 700 249.9 L 704.5 247.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><path d="M 700 220 L 700 240 L 460 240 L 460 249.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 460 256.65 L 455.5 247.65 L 460 249.9 L 464.5 247.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="660" y="140" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="700" y="184" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">v3.X.YaN</text></switch></g><path d="M 500 180 L 649.9 180" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 656.65 180 L 647.65 184.5 L 649.9 180 L 647.65 175.5 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="420" y="140" width="80" height="80" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="460" y="184" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">git commit...</text></switch></g><rect x="420" y="380" width="80" height="80" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="460" y="424" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Source Tarbal...</text></switch></g><path d="M 580 340 L 580 369.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 580 376.65 L 575.5 367.65 L 580 369.9 L 584.5 367.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="540" y="260" width="80" height="80" fill="#d5e8d4" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="580" y="304" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Azure Pipelin...</text></switch></g><path d="M 700 340 L 700 369.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 700 376.65 L 695.5 367.65 L 700 369.9 L 704.5 367.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="660" y="260" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="700" y="304" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">macOS Build P...</text></switch></g><path d="M 700 140 L 700 100" fill="none" stroke="#000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"></path><rect x="540" y="380" width="80" height="80" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="580" y="424" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">Windows Insta...</text></switch></g><rect x="660" y="380" width="80" height="80" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="700" y="424" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">macOS Install...</text></switch></g><path d="M 460 340 L 460 369.9" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 460 376.65 L 455.5 367.65 L 460 369.9 L 464.5 367.65 Z" fill="#000" stroke="#000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"></path><rect x="420" y="260" width="80" height="80" fill="#d5e8d4" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="460" y="304" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">GitHub Action...</text></switch></g><rect x="20" y="260" width="80" height="80" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="60" y="304" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">release.py --...</text></switch></g><ellipse cx="15" cy="135" rx="15" ry="15" fill="#ffff66" stroke="#000" pointer-events="all"></ellipse><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="15" y="139" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="14px" text-anchor="middle">1</text></switch></g><ellipse cx="255" cy="15" rx="15" ry="15" fill="#ffff66" stroke="#000" pointer-events="all"></ellipse><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="255" y="19" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="14px" text-anchor="middle">3</text></switch></g><ellipse cx="15" cy="255" rx="15" ry="15" fill="#ffff66" stroke="#000" pointer-events="all"></ellipse><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="15" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="14px" text-anchor="middle">2</text></switch></g><ellipse cx="255" cy="255" rx="15" ry="15" fill="#ffff66" stroke="#000" pointer-events="all"></ellipse><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="255" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="14px" text-anchor="middle">4</text></switch></g><ellipse cx="415" cy="255" rx="15" ry="15" fill="#ffff66" stroke="#000" pointer-events="all"></ellipse><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="415" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="14px" text-anchor="middle">5</text></switch></g><path d="M 380 470 L 380 10" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="stroke"></path></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></g><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
<br>
<i>Left is current process, right is proposed changes.</i>
</center>

<p>Currently, <a href="https://www.python.org/downloads/release/python-3120/">the source tarballs for Python 3.12.0</a> are built locally on the Release Manager's machine from the
tagged commit (1). This process being local to the release manager's machine using release-tool (2) means there's
no verifiability of the process. Whether intentional or not, the release manager's environment can have an influence
on the resulting built artifact, for example if extra files are included or excluded from a dirty build environment or checkout.
This is a similar situation for the macOS installer builds (4).</p>

<p>If the source tarballs were instead built using the public commit as a verified input instead of using a local machine,
any tampering would either be thwarted (by requiring a known specific commit to be used as input) or would at a minimum
be publicly traceable (by the commit itself being public, so any injected code would be publicly visible).</p>

<p>Using a public commit (instead of a tag) also means that if the tag is changed mid-release (which can happen with only write access to the release managers fork (3))
then the commit SHA won't match the expected one for the given Python release. This provides better assurances over using a git tag alone.</p>

<p>I proposed <a href="https://github.com/sethmlarson/release-tools/blob/build-source-tar/.github/workflows/build-source-artifacts.yml">and implemented</a>
such a workflow using GitHub Actions (5). This setup is very similar to the one used already for Windows installers
and Azure Pipelines, where the input to the workflow is a specific commit and git repository (for releases, this would be
the release managers' fork of <code>python/cpython</code>).</p>

<p>Using this implementation I was able to verify that the contents of the Python 3.12.0 source tarballs <a href="https://github.com/sethmlarson/release-tools/actions/runs/6381817883">match exactly</a>
with what was built by the 3.12 release manager Thomas Wouters, and that my own build used the <a href="https://github.com/python/cpython/releases/tag/v3.12.0">same commit as Python 3.12.0</a> (<a href="https://github.com/python/cpython/commit/0fb18b02c8ad56299d6a2910be0bab8ad601ef24"><code>0fb18b0</code></a>) using <a href="https://github.com/slsa-framework/slsa-verifier">SLSA verifier</a>:</p>

<div>
<pre><span></span><code><span># Unzip the artifacts from GitHub Actions</span>
$ unzip artifacts.zip
$ unzip artifacts.intoto.jsonl.zip

<span># Use slsa-verifier to verify the workflow and inputs</span>
$ slsa-verifier verify-artifact <span>\</span>
    --provenance-path artifacts.intoto.jsonl <span>\</span>
    <span># This is the workflow used and the branch</span>
    <span># In a real run this would be</span>
    <span># 'python/release-tools' and 'main'.</span>
    --source-uri github.com/sethmlarson/release-tools <span>\</span>
    --source-branch build-source-tar <span>\</span>
    <span># These are the inputs to the 'workflow_dispatch'</span>
    <span># event when the build was triggered.</span>
    <span># We verify the git commit for CPython</span>
    --build-workflow-input <span>git_commit</span><span>=</span>0fb18b02c8ad56299d6a2910be0bab8ad601ef24 <span>\</span>
    <span># We verify the git remote used (in this case 'Yhg1s'</span>
    <span># is Thomas Wouters' GitHub account)</span>
    --build-workflow-input <span>git_remote</span><span>=</span>Yhg1s <span>\</span>
    <span># And finally we verify that the release being built</span>
    <span># is 3.12.0. This feeds into the git tag that's checked</span>
    <span># out and the name of the tarballs.</span>
    --build-workflow-input <span>cpython_release</span><span>=</span><span>3</span>.12.0 <span>\</span>
    src/*

Verified signature against tlog entry index <span>39982623</span> at URL: ...
Verified build using builder ...
Verifying artifact src/Python-3.12.0.tar.xz: PASSED

Verified signature against tlog entry index <span>39982623</span> at URL: ...
Verified build using builder ...
Verifying artifact src/Python-3.12.0.tgz: PASSED

<span># Success! 🥳</span>
PASSED: Verified SLSA provenance
</code></pre>
</div>

<p>Now that we've verified the provenance of these "reference" builds, we can check their contents against the actual builds of CPython:</p>

<div>
<pre><span></span><code><span># Make two directories to make comparing the</span>
<span># two tarball's contents possible.</span>
$ mkdir a/ b/

<span># Download the Python tarball from python.org</span>
<span># and verify it's checksum</span>
$ wget https://www.python.org/ftp/python/3.12.0/Python-3.12.0.tgz
$ <span>echo</span> <span>'51412956d24a1ef7c97f1cb5f70e185c13e3de1f50d131c0aac6338080687afb  Python-3.12.0.tgz'</span> <span>|</span> sha256sum --check
Python-3.12.0.tgz: OK

<span># Extract the two tarballs into directories a and b.</span>
<span># Remember the one in 'a/' is the reference, 'b/' is actual.</span>
$ tar -xzvf src/Python-3.12.0.tgz -C a/
$ tar -xzvf Python-3.12.0.tgz -C b/

<span># Do a recursive content diff. Unfortunately we can't</span>
<span># check the tarball checksums directly because metadata</span>
<span># will be different between the two. No output means</span>
<span># the two directories :tada:are identical in content! 🥳</span>
$ git diff --no-index a/ b/
</code></pre>
</div>

<p>Success! The <code>tgz</code> source tarbll contents match exactly what was created by the reference build.
Comparing the <code>tar.xz</code> contents are left as an exercise to the reader. ;)</p>

<p>These source tarballs are important because they're the "source of truth" for many installs of Python, especially downstream
distributions like Debian or Fedora. These source tarballs also <a href="https://github.com/pyenv/pyenv/blob/0ada42d89dcf186a22ff820159dec378f2cde077/plugins/python-build/share/python-build/3.12.0#L6">get used automatically by pyenv</a> when compiling from source.
So not being verifiable against the commit or tag means that if an attack were to inject code into this build, not having
a trace against the public commit would make this type of attack much tougher to detect.</p>

<h2 id="tracking-how-python-subcomponents-change-using-sboms">Tracking how Python subcomponents change using SBOMs</h2>

<p>Even though the Python APIs haven't changed, there's been lots of movement below the surface.
We can use Software Bill-of-Materials (SBOMs) to track the subcomponents of a software distribution
and how they change between releases.</p>

<p>I created an <a href="https://github.com/sethmlarson/cpython-sbom/blob/main/sboms/Python-3.12.0.tgz.spdx.json">SBOM for Python 3.12.0</a> and then compared the components against the ones included in Python 3.11.6.
Comparing the two SBOM documents revealed the differences between the two release streams:</p>

<center>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="761px" viewBox="-0.5 -0.5 761 384" style="max-width:100%;max-height:384px;"><defs></defs><g><rect x="480" y="1" width="280" height="380" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="0" y="1" width="420" height="380" fill="#f5f5f5" stroke="#000" pointer-events="all"></rect><rect x="10" y="11" width="120" height="40" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="35" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">CPython 3.11.6</text></switch></g><rect x="10" y="171" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="195" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">mpdecimal 2.5.1</text></switch></g><rect x="10" y="211" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="235" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">expat 2.5.0</text></switch></g><rect x="10" y="131" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="155" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">macholib 1.0</text></switch></g><path d="M 130 71 L 350 71 L 350 84.63" fill="none" stroke="#000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 350 89.88 L 346.5 82.88 L 350 84.63 L 353.5 82.88 Z" fill="#000" stroke="#000" stroke-miterlimit="10" pointer-events="all"></path><rect x="10" y="51" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="75" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">pip 23.2.1</text></switch></g><rect x="10" y="251" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="275" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">libb2 0.98.1</text></switch></g><rect x="10" y="291" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="315" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">tiny_sha3</text></switch></g><rect x="10" y="331" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="355" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">libffi 1.20</text></switch></g><path d="M 130 111 L 143.63 111" fill="none" stroke="#000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 148.88 111 L 141.88 114.5 L 143.63 111 L 141.88 107.5 Z" fill="#000" stroke="#000" stroke-miterlimit="10" pointer-events="all"></path><rect x="10" y="91" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="70" y="115" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">setuptools 65.5.0</text></switch></g><rect x="290" y="91" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="115" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">certifi 2023.7.22</text></switch></g><rect x="290" y="131" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="155" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">chardet 5.1.0</text></switch></g><rect x="290" y="171" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="195" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">requests 2.31.0</text></switch></g><rect x="290" y="211" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="235" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">urllib3 1.26.16</text></switch></g><rect x="290" y="251" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="275" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">cachecontrol 0.13.1</text></switch></g><rect x="290" y="291" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="315" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">truststore 0.8.0</text></switch></g><rect x="290" y="331" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="350" y="355" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">and 18 more...</text></switch></g><rect x="150" y="91" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="115" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">packaging 23.1</text></switch></g><rect x="150" y="131" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="155" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">ordered-set 3.1.1</text></switch></g><rect x="150" y="171" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="195" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">more_itertools 8.8.0</text></switch></g><rect x="150" y="211" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="235" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">jaraco.text 3.7.0</text></switch></g><rect x="150" y="251" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="275" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">zipp 3.7.0</text></switch></g><rect x="150" y="291" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="315" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">tomli 2.0.1</text></switch></g><rect x="150" y="331" width="120" height="40" fill="#f8cecc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="210" y="355" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">and 2 more...</text></switch></g><rect x="490" y="11" width="120" height="40" fill="#dae8fc" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="35" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">CPython 3.12.0</text></switch></g><rect x="490" y="131" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="155" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">mpdecimal 2.5.1</text></switch></g><rect x="490" y="171" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="195" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">expat 2.5.0</text></switch></g><rect x="490" y="91" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="115" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">macholib 1.0</text></switch></g><path d="M 610 71 L 690 71 L 690 84.63" fill="none" stroke="#000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 690 89.88 L 686.5 82.88 L 690 84.63 L 693.5 82.88 Z" fill="#000" stroke="#000" stroke-miterlimit="10" pointer-events="all"></path><rect x="490" y="51" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="75" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">pip 23.2.1</text></switch></g><rect x="490" y="211" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="235" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">libb2 0.98.1</text></switch></g><rect x="490" y="251" width="120" height="40" fill="#d5e8d4" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="550" y="275" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">hacl-star</text></switch></g><rect x="630" y="91" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="115" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">certifi 2023.7.22</text></switch></g><rect x="630" y="131" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="155" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">chardet 5.1.0</text></switch></g><rect x="630" y="171" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="195" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">requests 2.31.0</text></switch></g><rect x="630" y="211" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="235" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">urllib3 1.26.16</text></switch></g><rect x="630" y="251" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="275" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">cachecontrol 0.13.1</text></switch></g><rect x="630" y="291" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="315" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">truststore 0.8.0</text></switch></g><rect x="630" y="331" width="120" height="40" fill="rgb(255, 255, 255)" stroke="#000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></foreignObject><text x="690" y="355" fill="rgb(0, 0, 0)" font-family="monospace" font-size="12px" text-anchor="middle">and 18 more...</text></switch></g><path d="M 450 381 L 450 1" fill="none" stroke="#000" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="stroke"></path></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></g><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
<br>
<i>The graphic uses diff notation, red is removals green is additions.</i>
</center>

<p>Let's dive into those changes:</p>

<ul>
<li><a href="https://github.com/python/cpython/pull/101039">Python 3.12 removes <code>setuptools</code></a> from the <code>ensurepip</code> module which was previously needed to bootstrap pip and venv in a Python environment.
Now in 3.12.0 there's only a bundled copy of <code>pip</code> which includes many other bundled dependencies like Requests and certifi.
These packages <a href="https://github.com/sethmlarson/cpython-sbom/issues/10">still need to be captured in the CPython SBOM</a>.</li>
<li><a href="https://github.com/python/cpython/issues/99108">Python 3.12 replaces the implementation of hashlib algorithms using OpenSSL and tiny_sha3</a> with a <a href="https://github.com/hacl-star/hacl-star">new backend called HACL*</a> (pronounced "H-A-C-L star")
which means the tiny_sha3 project can be removed. This new backend is formally verified using F* to provide memory safety
and avoid many common security vulnerabilities.</li>
<li><a href="https://github.com/python/cpython/issues/100540">Python 3.12 removes the small libffi stub for OSX</a> which was unused
after <a href="https://github.com/python/cpython/issues/72677">adding support for macOS 11 and Apple Silicon</a>.</li>
</ul>

<p>Seeing mostly removals and replacements with secure implementations is a great sign! Nice work core developers.
I'm hoping to get more visibility into the macOS and Windows installers using SBOMs as well, so changes there can also be tracked.</p>

<h2 id="other-items">Other items</h2>

<ul>
<li><a href="https://github.com/ossf/alpha-omega/pull/249">Added PSF engagement report for OpenSSF Alpha-Omega</a> for the month of September.</li>
<li><a href="https://github.com/vstinner/python-security/pull/42">Added redirect to readers of python-security.readthedocs.io</a> to the PSF Advisory Database.</li>
<li><a href="https://github.com/pypa/advisory-database/pull/161">Added an advisory to the PyPA Advisory Database</a> for OpenCV libraries affected by the libwebp vulnerability.</li>
</ul>

<blockquote>
    <p><strong>Wow, you made it to the end!</strong></p>
    <p>
        If you're like me, you don't believe social media should be <em>the way</em> to get updates on the cool stuff your friends are up to.
        Instead, you should either follow my blog with the RSS reader of your choice or via my <a href="https://tinyletter.com/sethmlarson">email newsletter</a> for guaranteed article publication notifications.
    </p>
    <p>
        If you really enjoyed a piece I would be grateful if you shared with a friend. If you have follow-up thoughts you can send them via email.
    </p>
    <p>
        <strong>Thanks for reading!</strong><br> — Seth
    </p>
</blockquote>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pythagorean Theorem found on clay tablet 1k years older than Pythagoras (740 pts)]]></title>
            <link>https://link.springer.com/article/10.1057/jt.2009.16</link>
            <guid>37774580</guid>
            <pubDate>Thu, 05 Oct 2023 03:19:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://link.springer.com/article/10.1057/jt.2009.16">https://link.springer.com/article/10.1057/jt.2009.16</a>, See on <a href="https://news.ycombinator.com/item?id=37774580">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                    <p>The purpose of this article is to plot a fascinating story in the history of mathematics. The 4000-year-old story of Pythagoras and his famous theorem is worthy of recounting – even for the math-phobic readership. It is more than a <i>math</i> story, as it tells a history of two great civilizations of antiquity rising to prominence 4000 years ago, along with historic and legendary persons, who not only define the period, but whose individual life stories are quite engaging. Moreover, the theorem seemingly has no ending, as every year students, academicians and problem solvers with a mathematical bent tackle the theorem in an attempt to add new and innovative proofs. In addition, a 350-year-old generalized version of the Pythagorean Theorem, which was proposed by an amateur mathematician, was finally solved, and made the front-page of the <i>New York Times</i> in 1993.</p><div id="Sec1-section" data-title="BRIEF BIOGRAPHY OF PYTHAGORAS"><h2 id="Sec1">BRIEF BIOGRAPHY OF PYTHAGORAS</h2><div id="Sec1-content"><p>The Greek mathematician Pythagoras has high name recognition, not only in the history of mathematics. Everyone who has studied geometry can recall, well after the high school years, some aspect of the Pythagorean Theorem. However, the story of Pythagoras and his famous theorem is not well known. Some story plot points are: the famous theorem goes by several names grounded in the behavior of the day (discussed later in the text), including the Pythagorean Theorem, Pythagoras’ Theorem and notably Euclid I 47. The Pythagorean Theorem is arguably the most <i>famous</i> statement in mathematics, and the fourth most <i>beautiful</i> equation.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 1" title="Journal Physics World (2004), as reported in the New York Times, Ideas and Trends, 24 October 2004, p. 12." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR1" id="ref-link-section-d94401022e279">1</a>, <a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 2" title="Maor, E. (2007) The Pythagorean Theorem, A 4,000-Year History. Princeton, NJ: Princeton University Press, p. xii." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR2" id="ref-link-section-d94401022e282">2</a></sup> There are well over 371 Pythagorean Theorem proofs originally collected by an eccentric mathematics teacher, who put them in a 1927 book, which includes those by a 12-year-old Einstein, Leonardo da Vinci (a master of all disciplines) and President of the United States James A. Garfield.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 3" title="Leonardo da Vinci (15 April 1452 – 2 May 1519) was an Italian polymath (someone who is very knowledgeable), being a scientist, mathematician, engineer, inventor, anatomist, painter, sculptor, architect, botanist, musician and writer. Leonardo has often been described as the archetype of the Renaissance man, a man whose unquenchable curiosity was equaled only by his powers of invention. He is widely considered to be one of the greatest painters of all time and perhaps the most diversely talented person ever to have lived. ‘The scope and depth of his interests were without precedent … . His mind and personality seems to us superhuman, the man himself mysterious and remote’, 
                    http://en.wikipedia.org/wiki/Leonardo_da_Vinci
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR3" id="ref-link-section-d94401022e286">3</a>, <a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 4" title="Loomis, E. S. (1927) The Pythagorean Proportion, A revised, second edition appeared in 1940, reprinted by the National Council of Teachers of Mathematics in 1968 as part of its ‘Classics in Mathematics Education’ series." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR4" id="ref-link-section-d94401022e289">4</a>, <a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 5" title="
                    http://math.colgate.edu/faculty/dlantz/Pythpfs/Garfldpf.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR5" id="ref-link-section-d94401022e292">5</a></sup></p><p>Pythagoras’ likeness in pictures and sculptures, as shown in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig1">Figure 1</a>, appears in all geometry textbooks, and books about the history of mathematics. However, ironically, not much is really known about him – not even his likeness. What is <i>known</i> about Pythagoras is generally considered more <i>fiction</i> than fact, as historians who lived hundreds of years later provided the <i>facts</i> about his life. There are definite details of Pythagoras’ life from early biographies that use original sources, yet are written by authors who attribute divine powers to him, and present him as a deity figure. Consequently, most historians treat this information as legend. Few historians view the information with any degree of historical importance because it is obtained from rare original sources.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 6" title="Maor, E. (2007) The Pythagorean Theorem, A 4,000-Year History. Princeton, NJ: Princeton University Press, p. 17." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR6" id="ref-link-section-d94401022e310">6</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-1" data-title="Figure 1"><figure><figcaption><b id="Fig1" data-test="figure-caption-text">Figure 1</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/1" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig1_HTML.jpg?as=webp"><img aria-describedby="Fig1" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig1_HTML.jpg" alt="figure 1" loading="lazy"></picture></a></div><p>Pythagoras.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/1" data-track-dest="link:Figure1 Full size image" aria-label="Full size image figure 1" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>Historians generally agree that Pythagoras of Samos (born circa 569 <span>BC</span> in Samos, Ionia and died circa 475 <span>BC</span>) was the first mathematician. He is an extremely important figure in the development of mathematics, yet relatively little is known about his mathematical achievements. Unlike many later Greek mathematicians, who wrote a number of books, there are no writings by Pythagoras. However, there is evidence that Pythagoras founded a school (in what is now Crotone, to the east of the heel of southern Italy) named <i>the Semicircle of Pythagoras</i> – half-religious and half-scientific, which followed a code of secrecy. Because secrecy is often controversial, Pythagoras is a mysterious figure. The members of the Semicircle of Pythagoras – the Pythagoreans – were bound by an allegiance that was strictly enforced. However, the Semicircle was more than just a school that studied intellectual disciplines, including in particular philosophy, mathematics and astronomy.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 7" title="
                    http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Pythagoras.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR7" id="ref-link-section-d94401022e342">7</a></sup> The <i>scientific</i> dimension of the school treated <i>numbers</i> in ways similar to the Jewish mysticism of Kaballah, where each number has divine meaning and combined numbers reveal the mystical <i>worth of life</i>. The latter is reflected in the Pythagorean motto: <i>Number Rules the Universe</i>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 6" title="Maor, E. (2007) The Pythagorean Theorem, A 4,000-Year History. Princeton, NJ: Princeton University Press, p. 17." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR6" id="ref-link-section-d94401022e359">6</a></sup> The <i>religious</i> dimension of the school included diverse lectures held by Pythagoras attended by men and women, even though the law in those days forbade women from being in the company of men. Pythagoreans consumed vegetarian dried and condensed food and unleavened bread (as matzos, used by the Biblical Jewish priestly class (the Kohanim), and used today during the Jewish holiday of Passover).<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 8" title="
                    http://www.themiddlechamber.com/Pythagoras_Freemqwonary.pdf
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR8" id="ref-link-section-d94401022e366">8</a></sup></p><p>One reason for the rarity of Pythagoras original sources was that Pythagorean knowledge was passed on from one generation to the next by word of mouth, as writing material was scarce. Moreover, out of respect for their leader, many of the discoveries made by the Pythagoreans were attributed to Pythagoras himself; this would account for the term ‘Pythagoras’ Theorem’. Consequently, of Pythagoras’ actual work nothing is known. On the other hand, his school practiced collectivism, making it hard to distinguish between the work of Pythagoras and that of his followers; this would account for the term ‘Pythagorean Theorem’. Therefore, the true discovery of a particular Pythagorean result may never be known. Regardless of the uncertainty of Pythagoras’ actual contributions, however, his school made outstanding contributions to mathematics.</p><p>Is seems that Pythagoras was the first person to define the consonant acoustic relationships between strings of proportional lengths. Specifically, strings of equal tension of proportional lengths create tones of proportional frequencies when plucked. For example, a string that is 2 feet long will vibrate <i>x</i> times per second (that is, hertz, a unit of frequency equal to one cycle per second), while a string that is 1 foot long will vibrate twice as fast: 2<i>x</i>. Furthermore, those two frequencies create a perfect octave.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 9" title="
                    http://www.davesabine.com/Music/Articles/PythagorasMathematicalTheoruminMusic/tabid/169/Default.aspx
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR9" id="ref-link-section-d94401022e381">9</a></sup></p><p>The most important discovery of Pythagoras’ school was the fact that the diagonal of a square is <i>not a rational</i> multiple of its side.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 10" title="A rational number is a number that can be expressed as a fraction or ratio (rational). The numerator and the denominator of the fraction are both integers. When the fraction is divided out, it becomes a terminating or repeating decimal. (The repeating decimal portion may be one number or a billion numbers.) Rational numbers can be ordered on a number line." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR10" id="ref-link-section-d94401022e390">10</a></sup> This result proved the existence of <i>irrational</i> numbers.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 11" title="An irrational number cannot be expressed as a fraction. Irrational numbers cannot be represented as terminating or repeating decimals. Irrational numbers are non-terminating, non-repeating decimals. Examples of irrational numbers are: square root of 2=1.414213562 …; π =3.141592654 …." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR11" id="ref-link-section-d94401022e397">11</a></sup> This finding greatly disturbed the Pythagoreans, as it was inconsistent with their divine belief in numbers: whole numbers and their ratios, which account for geometrical properties, were challenged by their own result. The Pythagoreans were so troubled over the finding of irrational numbers that they swore each other to secrecy about its existence. It is known that one Pythagorean did tell someone outside the school, and he was never to be found thereafter, that is, he was murdered, as Pythagoras himself was murdered by oppressors of the Semicircle of Pythagoras.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 12" title="
                    http://tubulcain420.blogspot.com/2008/11/life-and-philosophy-of-pythagoras.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR12" id="ref-link-section-d94401022e401">12</a></sup></p></div></div><div id="Sec2-section" data-title="THE BABYLONIANS"><h2 id="Sec2">THE BABYLONIANS</h2><div id="Sec2-content"><p>Babylonia was situated in an area known as Mesopotamia (Greek for ‘between the rivers’). Mesopotamia (arrow 1 in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig2">Figure 2</a>) was in the Near East in roughly the same geographical position as modern Iraq.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 13" title="
                    http://www.bible-history.com/babylonia/BabyloniaGeography.htm
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR13" id="ref-link-section-d94401022e415">13</a></sup> Two great rivers flowed through this land: the Tigris and the Euphrates (arrows 2 and 3, respectively, in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig2">Figure 2</a>). Mesopotamia was one of the great civilizations of antiquity, rising to prominence 4000 years ago. Thousands of clay tablets, found over the past two centuries, confirm a people who kept accurate records of astronomical events, and who excelled in the arts and literature. Only a small fraction of this vast archeological treasure trove has been studied by scholars. The great majority of tablets lie in the basements of museums around the world, awaiting their turn to be deciphered and to provide a glimpse into the daily life of ancient Babylon.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 14" title="Maor, E. (2007) The Pythagorean Theorem, A 4,000-Year History. Princeton, NJ: Princeton University Press, p. 5." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR14" id="ref-link-section-d94401022e422">14</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-2" data-title="Figure 2"><figure><figcaption><b id="Fig2" data-test="figure-caption-text">Figure 2</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/2" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig2_HTML.jpg?as=webp"><img aria-describedby="Fig2" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig2_HTML.jpg" alt="figure 2" loading="lazy"></picture></a></div><p>Ancient Near East Empires around 1350 <span>BC</span>(Egypt, Babylon, Mitanni, Hittite, Assyria, plus Route of Abraham).</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/2" data-track-dest="link:Figure2 Full size image" aria-label="Full size image figure 2" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>Among the tablets that have received special scrutiny is that with the identification ‘YBC 7289’, shown in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig3">Figure 3</a>, which represents the tablet numbered 7289 in the Babylonian Collection of Yale University.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 15" title="
                    http://www.bible-history.com/babylonia/BabyloniaGeography.htm
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR15" id="ref-link-section-d94401022e452">15</a></sup> The tablet dates from the Old Babylonian period, roughly 1800–1600 <span>BCE</span>, and shows a tilted square and its two diagonals, with some marks engraved along one side and under the horizontal diagonal. The marks are in wedge-shaped characters, carved with a stylus into a piece of soft clay that was then dried in the sun or baked in an oven. They turn out to be numbers, written in the Babylonian numeration system that used the base 60. In this sexagestimal system, numbers up to 59 were written in essentially the modern base-10 numeration system, but without a zero. Units were written as vertical Y-shaped notches, while tens were marked with similar notches written horizontally.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 15" title="
                    http://www.bible-history.com/babylonia/BabyloniaGeography.htm
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR15" id="ref-link-section-d94401022e459">15</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-3" data-title="Figure 3"><figure><figcaption><b id="Fig3" data-test="figure-caption-text">Figure 3</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/3" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig3_HTML.jpg?as=webp"><img aria-describedby="Fig3" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig3_HTML.jpg" alt="figure 3" loading="lazy"></picture></a></div><p>YBC 7289.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/3" data-track-dest="link:Figure3 Full size image" aria-label="Full size image figure 3" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>A fortuitous event: the find of tablet YBC 7289 was translated by Dennis Ramsey and dating to YBC 7289, circa 1900 <span>BC</span>:
</p><blockquote><p>4 is the length and 5 is the diagonal. What is the breadth? Its size is not known. 4 times 4 is 16. And 5 times 5 is 25. You take 16 from 25 and there remains 9. What times what shall I take in order to get 9? 3 times 3 is 9. 3 is the breadth.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 15" title="
                    http://www.bible-history.com/babylonia/BabyloniaGeography.htm
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR15" id="ref-link-section-d94401022e489">15</a></sup></p></blockquote><p>The number along the upper left side is easily recognized as 30. The number immediately under the horizontal diagonal is 1; 24, 51, 10 (this is the modern notation for writing Babylonian numbers, in which the commas separate the sexagesition ‘digits’, and a semicolon separates the integral part of a number from its fractional part). Writing this number in the base-10 system, one gets 1+24/60+51/60<sup>2</sup>+10/60<sup>3</sup>=1.414213, which is nothing other than the decimal value of the square root of 2, accurate to the nearest one hundred thousandth.</p><p>The conclusion is inescapable. The Babylonians knew the relation between the length of the diagonal of a square and its side: <i>d</i>=square root of 2. This was probably the first number known to be irrational. However, this in turn means that they were familiar with the Pythagorean Theorem – or, at the very least, with its special case for the diagonal of a square (<i>d</i><sup>2</sup>=<i>a</i><sup>2</sup>+<i>a</i><sup>2</sup>=2<i>a</i><sup>2</sup>) – more than a thousand years before the great sage for whom it was named. The square root of 2, known as Pythagoras’ constant, is the positive real number that, when multiplied by itself, gives the number 2 (see <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig3">Figures 3</a> and <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig4">4</a>).<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 16" title="Copyright to the images of YBC 7289 belongs to photographer Bill Casselman, 
                    http://www.math.ubc.ca/~cass/Euclid/ybc/ybc.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR16" id="ref-link-section-d94401022e530">16</a>, <a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 17" title="
                    http://en.wikipedia.org/wiki/Square_root_of_2#Geometric_proof
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR17" id="ref-link-section-d94401022e533">17</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-4" data-title="Figure 4"><figure><figcaption><b id="Fig4" data-test="figure-caption-text">Figure 4</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/4" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig4_HTML.jpg?as=webp"><img aria-describedby="Fig4" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig4_HTML.jpg" alt="figure 4" loading="lazy"></picture></a></div><p>Square root of 2.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/4" data-track-dest="link:Figure4 Full size image" aria-label="Full size image figure 4" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>Two factors with regard to this tablet are particularly significant. First, it proves that the Babylonians knew how to compute the square root of a number with remarkable accuracy. The unknown scribe who carved these numbers into a clay tablet nearly 4000 years ago showed a simple method of computing: multiply the side of the square by the square root of 2. But there remains one unanswered question: Why did the scribe choose a side of 30 for his example? Probably, 30 was used for convenience, as it was part of the Babylonian system of sexagesimal, a base-60 numeral system. From this one derives the modern day usage of 60 seconds in a minute, 60 min in an hour and 360 (60 × 6) degrees in a circle.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 18" title="
                    http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Pythagoras.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR18" id="ref-link-section-d94401022e556">18</a></sup></p><p>Today, the Pythagorean Theorem is thought of as an algebraic equation, <i>a</i><sup>2</sup>+<i>b</i><sup>2</sup>=<i>c</i><sup>2</sup>; but this is not how Pythagoras viewed it. To Pythagoras it was a geometric statement about areas. It was with the rise of modern algebra, circa 1600 <span>CE</span>, that the theorem assumed its familiar algebraic form.</p><p>Formally, the Pythagorean Theorem is stated in terms of area:
</p><blockquote><div>
                  <p>In any right triangle, the area of the square whose side is the hypotenuse (the side opposite the right angle) is equal to the sum of the areas of the squares whose sides are the two legs (the two sides that meet at a right angle). An area interpretation of this statement is shown in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig5">Figure 5</a>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 19" title="
                    http://www.thebigview.com/greeks/pythagoras.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR19" id="ref-link-section-d94401022e587">19</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-5" data-title="Figure 5"><figure><figcaption><b id="Fig5" data-test="figure-caption-text">Figure 5</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/5" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig5_HTML.jpg?as=webp"><img aria-describedby="Fig5" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig5_HTML.jpg" alt="figure 5" loading="lazy"></picture></a></div><p>Area version of Pythagoras’ Theorem.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/5" data-track-dest="link:Figure5 Full size image" aria-label="Full size image figure 5" rel="nofollow"><span>Full size image</span></a></p></figure></div>
                </div></blockquote><p>The theorem is usually summarized as follows:
</p><blockquote><p>The square of the hypotenuse of a right triangle is equal to the sum of the squares on the other two sides.</p></blockquote></div></div><div id="Sec3-section" data-title="A PEOPLE WHO USED THE PYTHAGOREAN THEOREM?"><h2 id="Sec3">A PEOPLE WHO USED THE PYTHAGOREAN THEOREM?</h2><div id="Sec3-content"><p>Ancient Egyptians (arrow 4, in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig2">Figure 2</a>), concentrated along the middle to lower reaches of the Nile River (arrow 5, in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig2">Figure 2</a>), were a people in Northeastern Africa. The ancient civilization of the Egyptians thrived 500 miles to the southwest of Mesopotamia. The two nations coexisted in relative peace for over 3000 years, from circa 3500 <span>BCE</span> to the time of the Greeks. As to the claim that the Egyptians knew and used the Pythagorean Theorem in building the great pyramids, there is no evidence to support this claim.</p><p>Egypt has over 100 pyramids, most built as tombs for their country's Pharaohs. I would be remiss if I did not include an image of the iconic Egyptian Pharaoh Tutankhamen, aka King Tut (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig6">Figure 6</a>). Egypt (arrow 4, in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig2">Figure 2</a>) and its pyramids are as immortally linked to King Tut as are Pythagoras and his famous theorem. King Tut ruled from the age of 8 for 9 years, 1333–1324 <span>BC</span>. He was born in 1341 <span>BC</span> and died (some believe he was murdered) in 1323 <span>BC</span> at the age of 18.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 20" title="
                    http://en.wikipedia.org/wiki/Tutankhamun
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR20" id="ref-link-section-d94401022e651">20</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-6" data-title="Figure 6"><figure><figcaption><b id="Fig6" data-test="figure-caption-text">Figure 6</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/6" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig6_HTML.jpg?as=webp"><img aria-describedby="Fig6" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig6_HTML.jpg" alt="figure 6" loading="lazy"></picture></a></div><p>‘King Tut’ (Not the famous burial mask).</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/6" data-track-dest="link:Figure6 Full size image" aria-label="Full size image figure 6" rel="nofollow"><span>Full size image</span></a></p></figure></div></div></div><div id="Sec4-section" data-title="THE TEACHER WHO COLLECTED PYTHAGOREAN THEOREM PROOFS"><h2 id="Sec4">THE TEACHER WHO COLLECTED PYTHAGOREAN THEOREM PROOFS</h2><div id="Sec4-content"><p>Elisha Scott Loomis (1852–1940) (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig7">Figure 7</a>), an eccentric mathematics teacher from Ohio, spent a lifetime collecting all known proofs of the Pythagorean Theorem and writing them up in <i>The Pythagorean Proposition</i>, a compendium of 371 proofs. The manuscript was prepared in 1907 and published in 1927. A revised second edition appeared in 1940, and this was reprinted by the National Council of Teachers of Mathematics in 1968 as part of its ‘Classics in Mathematics Education’ series. Loomis received literally hundreds of new proofs from after his book was released up until his death, but he could not keep up with his compendium. As for the exact number of proofs, no one is sure how many there are. Surprisingly, geometricians often find it quite difficult to determine whether certain proofs are in fact distinct proofs. Befitting of someone who collects solutions of the Pythagorean Theorem (I belittle neither the effort nor its value), Loomis, known for living an orderly life, extended his writing to his own obituary in 1934, which he left in a letter headed ‘For the Berea Enterprise immediately following my death’. He died on 11 December 1940, and the obituary was published as he had written it, except for the date of his death and the addresses of some of his survivors.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 21" title="http://www.bgsu.edu/departments/math/Ohio-section/bicen/esloomis.html." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR21" id="ref-link-section-d94401022e685">21</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-7" data-title="Figure 7"><figure><figcaption><b id="Fig7" data-test="figure-caption-text">Figure 7</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/7" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig7_HTML.jpg?as=webp"><img aria-describedby="Fig7" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig7_HTML.jpg" alt="figure 7" loading="lazy"></picture></a></div><p>Elisha Scott Loomis.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/7" data-track-dest="link:Figure7 Full size image" aria-label="Full size image figure 7" rel="nofollow"><span>Full size image</span></a></p></figure></div></div></div><div id="Sec5-section" data-title="A 12-YEAR-OLD EINSTEIN ‘PROVES’ THE PYTHAGOREAN THEOREM"><h2 id="Sec5">A 12-YEAR-OLD EINSTEIN ‘PROVES’ THE PYTHAGOREAN THEOREM</h2><div id="Sec5-content"><p>According to his autobiography, a preteen Albert Einstein (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig8">Figure 8</a>)
</p><blockquote><p>devised a new ‘proof’ (he was careful to put the word in quotation marks, evidently not wishing to take credit for it) of the Pythagorean Theorem based on the properties of similar triangles. Many known proofs use similarity arguments, but this one is notable for its elegance, simplicity and the sense that it reveals the connection between length and area that is at the heart of the theorem.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 22" title="
                    http://demonstrations.wolfram.com/EinsteinsMostExcellentProof/
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR22" id="ref-link-section-d94401022e721">22</a></sup></p></blockquote><div data-test="figure" data-container-section="figure" id="figure-8" data-title="Figure 8"><figure><figcaption><b id="Fig8" data-test="figure-caption-text">Figure 8</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/8" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig8_HTML.jpg?as=webp"><img aria-describedby="Fig8" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig8_HTML.jpg" alt="figure 8" loading="lazy"></picture></a></div><p>Albert Einstein, age 12.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/8" data-track-dest="link:Figure8 Full size image" aria-label="Full size image figure 8" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>About his ‘holy geometry book’, Einstein in his autobiography says:
</p><blockquote><p>At the age of 12, I experienced a second wonder of a totally different nature: in a little book dealing with Euclidean plane geometry, which came into my hands at the beginning of a school year. Here were assertions, as for example the intersection of the three altitudes of a triangle in one point, which – though by no means evident – could nevertheless be proved with such certainty that any doubt appeared to be out of the question. This lucidity and certainty made an indescribable impression upon me. For example I remember that an uncle told me the Pythagorean Theorem before the holy geometry booklet had come into my hands. After much effort I succeeded in ‘proving’ this theorem on the basis of the similarity of triangles … for anyone who experiences [these feelings] for the first time, it is marvelous enough that man is capable at all to reach such a degree of certainty and purity in pure thinking as the Greeks showed us for the first time to be possible in geometry.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 23" title="Schilpp, P. A. (ed.) (1951) Albert Einstein: Philosopher-Scientist, pp. 9–11." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR23" id="ref-link-section-d94401022e749">23</a></sup></p></blockquote></div></div><div id="Sec6-section" data-title="EINSTEIN’S CHILDHOOD FASCINATION WITH THE PYTHAGOREAN THEOREM BEARS FRUIT"><h2 id="Sec6">EINSTEIN’S CHILDHOOD FASCINATION WITH THE PYTHAGOREAN THEOREM BEARS FRUIT</h2><div id="Sec6-content"><p>Einstein (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig9">Figure 9</a>) used the Pythagorean Theorem in the Special Theory of Relativity (in a four-dimensional form), and in a vastly expanded form in the General Theory of Relatively. The following excerpts are worthy of inclusion.</p><div data-test="figure" data-container-section="figure" id="figure-9" data-title="Figure 9"><figure><figcaption><b id="Fig9" data-test="figure-caption-text">Figure 9</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/9" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig9_HTML.jpg?as=webp"><img aria-describedby="Fig9" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig9_HTML.jpg" alt="figure 9" loading="lazy"></picture></a></div><p>Einstein.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/9" data-track-dest="link:Figure9 Full size image" aria-label="Full size image figure 9" rel="nofollow"><span>Full size image</span></a></p></figure></div><h3 id="Sec7">Pythagorean Theorem in the Special Theory of Relativity (1905)</h3><p><i>Albert Einstein's Metric equation is simply Pythagoras’ Theorem applied to the three spatial co-ordinates and equating them to the displacement of a ray of light</i>.</p><p><i>Special relativity is still based directly on an empirical law, that of the constancy of the velocity of light</i>.</p><p>d<i>x</i><sup>2</sup>+d<i>y</i><sup>2</sup>+d<i>z</i><sup>2</sup>=(<i>c</i> d<i>t</i>)<sup>2</sup> where <i>c</i> d<i>t</i> is the distance traveled by light <i>c</i> in time d<i>t</i>. The fact that such a metric is called Euclidean is connected with the following. The postulation of such a metric in a three-dimensional continuum is fully equivalent to the postulation of the axioms of Euclidean Geometry. The defining equation of the metric is then nothing but the Pythagorean Theorem applied to the differentials of the co-ordinates.</p><p>In the special theory of relativity those co-ordinate changes (by transformation) are permitted for which also in the new co-ordinate system the quantity (<i>c</i> d<i>t</i>)<sup>2</sup> (fundamental invariant d<i>S</i><sup>2</sup>) equals the sum of the squares of the co-ordinate differentials. Such transformations are called Lorentz transformations.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 24" title="The excerpted section on Pythagoras’ Theorem and its use in Einstein's Relativity is from the article Physics: Albert Einstein's Theory of Relativity." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR24" id="ref-link-section-d94401022e846">24</a></sup></p><h3 id="Sec8">Pythagorean Theorem in the General Theory of Relativity (1915)</h3><p>From the latest results of the theory of relativity, it is probable that our <i>three-dimensional space is also approximately spherical</i>, that is, that the laws of disposition of rigid bodies in it are not given by Euclidean geometry, but approximately by spherical geometry. <i>According to the general theory of relativity</i>, the geometrical properties of space are not independent, but they <i>are determined by matter.</i> I wished to show that space time is not necessarily something to which one can ascribe to a separate existence, independently of the actual objects of physical reality. <i>Physical objects are</i> not in space, but these objects are <i>spatially extended</i>. In this way the concept ‘empty space’ loses its meaning. <i>The fact that such a metric is called Euclidean is connected with the following</i>. The postulation of such a metric in a three-dimensional continuum is fully equivalent to the postulation of the axioms of Euclidean Geometry. <i>The defining equation of the metric is then nothing but the Pythagorean Theorem applied to the differentials of the co-ordinates</i>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 25" title="
                    http://www.spaceandmotion.com/Physics-Albert-Einstein-Theory-Relativity.htm
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR25" id="ref-link-section-d94401022e879">25</a></sup></p><h3 id="Sec9">The Theory of Relativity and the Pythagorean Theorem</h3><p>The above excerpts – from the genius himself – precede any other person's narrative of the Theory of Relativity and the Pythagorean Theorem. Accordingly, I now provide a less demanding excerpt, albeit one that addresses the effects of the Special and General theories of relativity.
</p><blockquote><p>… the most important effects of special and general theory of relativity can be understood in a simple and straightforward way. The system of units in which the speed of light c is the unit of velocity allows to cast all formulas in a very simple form. The Pythagorean Theorem graphically relates energy, momentum and mass.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 26" title="Okun, L. B. (2008) The theory of relativity and the Pythagorean theorem. Physics-Uspekhi 51: 622." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR26" id="ref-link-section-d94401022e894">26</a></sup></p></blockquote></div></div><div id="Sec10-section" data-title="EUCLID’S ELEMENTS"><h2 id="Sec10">EUCLID’S <i>ELEMENTS</i></h2><div id="Sec10-content"><p>Euclid of Alexandria was a Greek mathematician (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig10">Figure 10</a>), and is often referred to as the Father of Geometry. The date and place of Euclid's birth, and the date and circumstances of his death, are unknown, but it is thought that he lived circa 300 <span>BCE</span>. His work <i>Elements</i>, which includes books and propositions, is the most successful textbook in the history of mathematics. In it, the principles of what is now called <i>Euclidean Geometry</i> were deduced from a small set of <i>axioms</i>.</p><div data-test="figure" data-container-section="figure" id="figure-10" data-title="Figure 10"><figure><figcaption><b id="Fig10" data-test="figure-caption-text">Figure 10</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/10" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig10_HTML.jpg?as=webp"><img aria-describedby="Fig10" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig10_HTML.jpg" alt="figure 10" loading="lazy"></picture></a></div><p>Artist's impression of Euclid.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/10" data-track-dest="link:Figure10 Full size image" aria-label="Full size image figure 10" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>When Euclid wrote his <i>Elements</i> around 300 <span>BCE</span>, he gave two proofs of the Pythagorean Theorem: The first, Proposition 47 of Book I, relies entirely on the area relations and is quite sophisticated; the second, Proposition 31 of Book VI, is based on the concept of proportion and is much simpler. The first could not be Pythagoras’ own proof because geometry was simply not advanced enough at that time. He may have used Book VI Proposition 31, but, if so, his proof was deficient, because the complete theory of Proportions was only developed by Eudoxus, who lived almost two centuries after Pythagoras.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 27" title="
                    http://en.wikipedia.org/wiki/Euclid
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR27" id="ref-link-section-d94401022e952">27</a></sup></p><p>Euclid's <i>Elements</i> furnishes the first and, later, the standard reference in geometry. It is a mathematical and geometric treatise consisting of 13 books. It comprises a collection of definitions, postulates (axioms), propositions (theorems and constructions) and mathematical proofs of the propositions. <i>Elements</i>’ table of contents is shown in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig11">Figure 11</a>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 28" title="
                    http://en.wikipedia.org/wiki/Euclid%27s_Elements#Contents_of_the_books
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR28" id="ref-link-section-d94401022e967">28</a></sup> One of the oldest surviving fragments of Euclid's <i>Elements</i> is shown in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig12">Figure 12</a>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 29" title="
                    http://en.wikipedia.org/wiki/File:Oxyrhynchus_papyrus_with_Euclid%27s_Elements.jpg
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR29" id="ref-link-section-d94401022e978">29</a></sup></p><div data-test="figure" data-container-section="figure" id="figure-11" data-title="Figure 11"><figure><figcaption><b id="Fig11" data-test="figure-caption-text">Figure 11</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/11" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig11_HTML.jpg?as=webp"><img aria-describedby="Fig11" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig11_HTML.jpg" alt="figure 11" loading="lazy"></picture></a></div><p>Euclid's <i>elements</i>.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/11" data-track-dest="link:Figure11 Full size image" aria-label="Full size image figure 11" rel="nofollow"><span>Full size image</span></a></p></figure></div><div data-test="figure" data-container-section="figure" id="figure-12" data-title="Figure 12"><figure><figcaption><b id="Fig12" data-test="figure-caption-text">Figure 12</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/12" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig12_HTML.jpg?as=webp"><img aria-describedby="Fig12" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig12_HTML.jpg" alt="figure 12" loading="lazy"></picture></a></div><p>One of the oldest surviving fragments of Euclid's <i>elements</i>.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/12" data-track-dest="link:Figure12 Full size image" aria-label="Full size image figure 12" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>Euclid provided two very different proofs, stated below, of the Pythagorean Theorem. Euclid was the first to mention and prove Book I, Proposition 47, also known as I 47 or Euclid I 47. This is probably the most famous of all the proofs of the Pythagorean proposition.</p><h3>Book VI, Proposition 31:</h3><ul>
                  
                  <li>
                    <p>In right-angled triangles the figure on the side opposite the right angle equals the sum of the similar and similarly described figures on the sides containing the right angle.</p>
                  </li>
                </ul><h3>Book I, Proposition 47:</h3><ul>
                  
                  <li>
                    <p>In right-angled triangles the square on the side opposite the right angle equals the sum of the squares on the sides containing the right angle.</p>
                  </li>
                </ul><p>Euclid I 47 is often called the <i>Pythagorean Theorem</i>, called so by Proclus – a Greek philosopher who became head of Plato's Academy and is important mathematically for his commentaries on the work of other mathematicians – and others centuries after Pythagoras and even centuries after Euclid.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 30" title="
                    http://www-groups.dcs.st-and.ac.uk/~history/Mathematicians/Proclus.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR30" id="ref-link-section-d94401022e1051">30</a></sup></p><p>Although many of the results in <i>Elements</i> originated with earlier mathematicians, one of Euclid's accomplishments was to present them in a single, logically coherent framework, making them easy to use and easy to reference, including a system of rigorous mathematical proofs that remains the basis of mathematics twenty-three centuries later.</p><p>Although best known for its geometric results, <i>Elements</i> also includes number theory. It considers the connection between perfect numbers and Mersenne primes, the infinitude of prime numbers and the Euclidean algorithm for finding the greatest common divisor of two numbers.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 31" title="Mersenne number is a positive integer that is one less than a power of two: Mn=2n−1." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR31" id="ref-link-section-d94401022e1066">31</a></sup></p><p>The geometrical system described in the <i>Elements</i> was long known simply as <i>geometry</i>, and was considered to be the only geometry possible. Today, however, this system is often referred to as <i>Euclidean Geometry</i> to distinguish it from other so-called <i>Non-Euclidean geometries</i> that mathematicians discovered in the nineteenth century.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 32" title="
                    http://www-groups.dcs.st-and.ac.uk/~history/HistTopics/Non-Euclidean_geometry.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR32" id="ref-link-section-d94401022e1084">32</a></sup></p><h3 id="Sec11">A simple proof of the Pythagorean Theorem</h3><p>At this point in my plotting of the 4000-year-old story of Pythagoras, I feel it is fitting to present one proof of the famous theorem. For me, the simplest proof among the dozens of proofs that I read in preparing this article is that shown in <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig13">Figure 13</a>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 33" title="
                    http://www.cut-the-knot.org/pythagoras/index.shtml
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR33" id="ref-link-section-d94401022e1097">33</a>, <a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 34" title="
                    http://www.sunsite.ubc.ca/DigitalMathArchive/Euclid/java/html/babylon.html
                    
                   (Oldest known proof of Pythagorean Theorem)." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR34" id="ref-link-section-d94401022e1100">34</a>, <a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 35" title="
                    http://mathworld.wolfram.com/PythagoreanTheorem.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR35" id="ref-link-section-d94401022e1103">35</a></sup>
</p><ol>
                    <li>
                      <span>1</span>
                      
                        <p>Start with four copies of the same triangle. Three of these have been rotated 90°, 180° and 270°, respectively. Each has area <i>ab</i>/2. (See upper part of <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig13">Figure 13</a>.)</p>
                      
                    </li>
                    <li>
                      <span>2</span>
                      
                        <p>Combine the four triangles to form an upright square with the side (<i>a</i>+<i>b</i>), and a tilted square-hole with the side <i>c</i>. (See lower part of <a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig13">Figure 13</a>.)</p>
                      
                    </li>
                    <li>
                      <span>3</span>
                      
                        <p>Compute the area of the big square in two ways:
</p><ul>
                            <li>
                              <p>The <i>direct</i> area of the upright square is (<i>a</i>+<i>b</i>)<sup>2</sup></p>
                            </li>
                            <li>
                              <p>The <i>collective-four-copies</i> area of the titled square-hole is 4(<i>ab</i>/2)+<i>c</i><sup>2</sup></p>
                            </li>
                          </ul>
                      
                    </li>
                    <li>
                      <span>4</span>
                      
                        <p>(<i>a</i>+<i>b</i>)<sup>2</sup>=4(<i>ab</i>/2)+<i>c</i><sup>2</sup></p>
                      
                    </li>
                  </ol><div data-test="figure" data-container-section="figure" id="figure-13" data-title="Figure 13"><figure><figcaption><b id="Fig13" data-test="figure-caption-text">Figure 13</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/13" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig13_HTML.jpg?as=webp"><img aria-describedby="Fig13" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig13_HTML.jpg" alt="figure 13" loading="lazy"></picture></a></div><p>A simple proof of the Pythagorean Theorem.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/13" data-track-dest="link:Figure13 Full size image" aria-label="Full size image figure 13" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>QED (<i>abbreviation,</i> Latin, Quod Erat Demonstrandum: that which was to be demonstrated.)</p></div></div><div id="Sec12-section" data-title="A GENERALIZED VERSION OF THE PYTHAGOREAN THEOREM"><h2 id="Sec12">A GENERALIZED VERSION OF THE PYTHAGOREAN THEOREM</h2><div id="Sec12-content"><p>In the seventeenth century, Pierre de Fermat (1601–1665) (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig14">Figure 14</a>) investigated the following problem: for which values of <i>n</i> are there integer solutions to the equation </p><div id="Equ1"><p><img src="https://media.springernature.com/full/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Equ1_HTML.gif" alt=""></p></div><div data-test="figure" data-container-section="figure" id="figure-14" data-title="Figure 14"><figure><figcaption><b id="Fig14" data-test="figure-caption-text">Figure 14</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/14" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig14_HTML.jpg?as=webp"><img aria-describedby="Fig14" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig14_HTML.jpg" alt="figure 14" loading="lazy"></picture></a></div><p>Pierre de Fermat.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/14" data-track-dest="link:Figure14 Full size image" aria-label="Full size image figure 14" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>It is known that when <i>n</i>=2 then an integer solution exists from the Pythagorean Theorem. Fermat conjectured that there were no non-zero integer solutions for <i>x</i> and <i>y</i> and <i>z</i> when <i>n</i> was greater than 2. He did not leave a proof, though. Instead, in the <i>margin</i> of a textbook, he wrote that he knew that this relationship was not possible, but he did not have enough room on the page to write it down. His conjecture became known as <i>Fermat's Last Theorem</i>. This may appear to be a simple problem on the surface, but it was not until 1993 when Andrew Wiles of Princeton University finally proved the 350-year-old marginalized theorem, which appeared on the front page of the <i>New York Times</i>.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 36" title="
                    http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Fermat.html
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR36" id="ref-link-section-d94401022e1308">36</a></sup></p><p>Today, Fermat is thought of as a number theorist, in fact perhaps the most famous number theorist who ever lived. It is therefore surprising to find that Fermat was a <i>lawyer</i>, and only an <i>amateur</i> mathematician. Also surprising is the fact that he published only one mathematical paper in his life, and that was an anonymous paper written as an appendix to a colleague's book.</p><p>Because Fermat refused to publish his work, his friends feared that it would soon be forgotten unless something was done about it. His son Samuel undertook the task of collecting Fermat's letters and other mathematical papers, comments written in books and so on with the goal of publishing his father's mathematical ideas. Samuel found the <i>marginal</i> note (<i>the proof</i> could not fit on the page) in his father's copy of Diophantus's <i>Arithmetica</i>. In this way the famous <i>Last Theorem</i> came to be published.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 37" title="
                    http://www.joh.cam.ac.uk/library/special_collections/early_books/pix/fermat.htm
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR37" id="ref-link-section-d94401022e1335">37</a></sup></p></div></div><div id="Sec13-section" data-title="FERMAT’S LAST THEOREM: SOLVED"><h2 id="Sec13">FERMAT’S LAST THEOREM: SOLVED</h2><div id="Sec13-content"><p>Sir Andrew John Wiles, KBE (Knight Commander of the Order of the British Empire), mathematician and professor at Princeton University, specializing in number theory, is forever famous for proving Fermat's Last Theorem (<a data-track="click" data-track-label="link" data-track-action="figure anchor" href="https://link.springer.com/article/10.1057/jt.2009.16#Fig15">Figure 15</a>).</p><div data-test="figure" data-container-section="figure" id="figure-15" data-title="Figure 15"><figure><figcaption><b id="Fig15" data-test="figure-caption-text">Figure 15</b></figcaption><div><div><a data-test="img-link" data-track="click" data-track-label="image" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/15" rel="nofollow"><picture><source type="image/webp" srcset="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig15_HTML.jpg?as=webp"><img aria-describedby="Fig15" src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1057%2Fjt.2009.16/MediaObjects/41495_2009_Article_BFjt200916_Fig15_HTML.jpg" alt="figure 15" loading="lazy"></picture></a></div><p>Sir Andrew Wiles.</p></div><p><a data-test="article-link" data-track="click" data-track-label="button" data-track-action="view figure" href="https://link.springer.com/article/10.1057/jt.2009.16/figures/15" data-track-dest="link:Figure15 Full size image" aria-label="Full size image figure 15" rel="nofollow"><span>Full size image</span></a></p></figure></div><p>Andrew Wiles was born in Cambridge, England in 1953, and attended King's College School, Cambridge (where his mathematics teacher David Higginbottom first introduced him to Fermat's Last Theorem). He earned his BA in 1974 after study at Merton College, Oxford, and a PhD in 1980 after research at Clare College, Cambridge. His graduate research was guided by John Coates beginning in the summer of 1975. Together they worked on the arithmetic of elliptic curves with complex multiplication using the methods of Iwasawa theory.</p><p>He further worked with Barry Mazur on the main conjecture of Iwasawa theory over <i>Q</i> and soon afterwards generalized this result to totally real fields. Taking approximately 7 years to complete the work, Wiles was the first person to prove Fermat's Last Theorem, earning him a place in history. Andrew Wiles’ most famous mathematical result is that all rational semi-stable elliptic curves are modular, which, in particular, implies Fermat's Last Theorem.</p><p>Wiles was introduced to Fermat's Last Theorem at the age of 10. He tried to prove the theorem using textbook methods and later studied the work of mathematicians who had tried to prove it. When he began his graduate studies, he stopped trying to prove the theorem and began studying elliptic curves under the supervision of John Coates.</p><p>In the 1950s and 1960s, a connection between elliptic curves and modular forms was conjectured by the Japanese mathematician Goro Shimura based on some ideas that Yutaka Taniyama posed. In the West, this conjecture became well known through a paper by André Weil. With Weil giving conceptual evidence for it, it is sometimes called the Shimura–Taniyama–Weil conjecture. It states that every rational elliptic curve is modular. The full conjecture was proven by Christophe Breuil, Brian Conrad, Fred Diamond and Richard Taylor in 1998 using many of the methods that Andrew Wiles used in his 1995 published papers.<sup><a data-track="click" data-track-action="reference anchor" data-track-label="link" data-test="citation-ref" aria-label="Reference 38" title="
                    http://en.wikipedia.org/wiki/Andrew_Wiles
                    
                  ." href="https://link.springer.com/article/10.1057/jt.2009.16#ref-CR38" id="ref-link-section-d94401022e1380">38</a></sup></p></div></div><div id="Sec14-section" data-title="CONCLUSION"><h2 id="Sec14">CONCLUSION</h2><div id="Sec14-content"><p>I provide the story of Pythagoras and his famous theorem by discussing the major plot points of a 4000-year-old fascinating story in the history of mathematics, worthy of recounting even for the math-phobic reader. It is more than a <i>math</i> story, as it tells a history of two great civilizations of antiquity rising to prominence 4000 years ago, along with historic and legendary characters, who not only define the period, but whose life stories individually are quite engaging.</p><p>The intriguing plot points of the story are:
</p><ol>
                  <li>
                    <span>1</span>
                    
                      <p>Pythagoras is immortally linked to the discovery and proof of a theorem, which bears his name – even though there is no evidence of his discovering and/or proving the theorem.</p>
                    
                  </li>
                  <li>
                    <span>2</span>
                    
                      <p>Greek mathematician Euclid, referred to as the Father of Geometry, lived during the period of time about 300 <span>BCE</span>, when he was most active. His work <i>Elements</i> is the most successful textbook in the history of mathematics. Euclid I 47 is often called the <i>Pythagorean Theorem</i>, called so by Proclus, a Greek philosopher who became head of Plato's Academy and is important mathematically for his commentaries on the work of other mathematicians centuries after Pythagoras and even centuries after Euclid.</p>
                    
                  </li>
                  <li>
                    <span>3</span>
                    
                      <p>There is concrete (not Portland cement, but a clay tablet) evidence that indisputably indicates that the Pythagorean Theorem was discovered and proven by Babylonian mathematicians 1000 years before Pythagoras was born.</p>
                    
                  </li>
                  <li>
                    <span>4</span>
                    
                      <p>So many people, young and old, famous and not famous, <i>have touched</i> the Pythagorean Theorem. The eccentric mathematics teacher Elisha Scott Loomis spent a lifetime collecting all known proofs and writing them up in <i>The Pythagorean Proposition,</i> a compendium of 371 proofs. The manuscript was published in 1927, and a revised, second edition appeared in 1940. As for the exact number of proofs, no one is sure how many there are. Surprisingly, geometricians often find it quite difficult to determine whether some proofs are in fact distinct proofs. Moreover, the theorem seemingly has no ending, as every year students, academicians and problem solvers with a mathematical bent tackle the theorem in an attempt to add new and innovative proofs.</p>
                    
                  </li>
                  <li>
                    <span>5</span>
                    
                      <p>In addition, many people's lives <i>have been touched</i> by the Pythagorean Theorem. A 12-year-old Albert Einstein was touched by the earthbound spirit of the Pythagorean Theorem. The wunderkind provided a proof that was notable for its elegance and simplicity. However, the spirit of the Pythagoras’ Theorem was not finished with young Einstein: two decades later he used the Pythagorean Theorem in the Special Theory of Relativity (in a four-dimensional form), and in a vastly expanded form in the General Theory of Relativity. That Einstein used Pythagorean Theorem for his Relativity would be enough to show Pythagorean Theorem's value, or importance to the world. But, people continued to find value in the Pythagorean Theorem, namely, Wiles.</p>
                    
                  </li>
                  <li>
                    <span>6</span>
                    
                      <p>The theorem's spirit also visited another youngster, a 10-year-old British Andrew Wiles, and returned two decades later to an unknown Professor Wiles. Young Wiles tried to prove the theorem using textbook methods, and later studied the work of mathematicians who had tried to prove it. When he began his graduate studies, he stopped trying to prove the theorem and began studying elliptic curves, which provided the path for proving Fermat's Theorem, the news of which made to the front page of the <i>New York Times</i> in 1993. Sir Andrew Wiles will forever be famous for his generalized version of the Pythagoras Theorem.</p>
                    
                  </li>
                </ol></div></div>
                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[President Speaking: Spoofing Alerts in 4G LTE Networks (2019) [pdf] (105 pts)]]></title>
            <link>https://par.nsf.gov/servlets/purl/10150578</link>
            <guid>37774366</guid>
            <pubDate>Thu, 05 Oct 2023 02:45:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://par.nsf.gov/servlets/purl/10150578">https://par.nsf.gov/servlets/purl/10150578</a>, See on <a href="https://news.ycombinator.com/item?id=37774366">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[LLMs confabulate not hallucinate (216 pts)]]></title>
            <link>https://www.beren.io/2023-03-19-LLMs-confabulate-not-hallucinate/</link>
            <guid>37773918</guid>
            <pubDate>Thu, 05 Oct 2023 01:30:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.beren.io/2023-03-19-LLMs-confabulate-not-hallucinate/">https://www.beren.io/2023-03-19-LLMs-confabulate-not-hallucinate/</a>, See on <a href="https://news.ycombinator.com/item?id=37773918">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

      

      <article role="main">
        <p><em>Minor terminological nitpick.</em></p>

<p>People often describe the LLM as ‘hallucinating’ information whenever it makes up information which seems like it should fit for a given query even when it is trivially false. While evocative, this isn’t actually correct terminology. We already have a perfectly word for this precisely phenomenon in psychology: confabulation.</p>

<p>Confabulation is typically used in a psychiatric context when people have some kind of brain damage, especially to memory, which causes them not to be able to explain or answer questions correctly. For instance, if an amnesiac patient is asked questions about an event they were previously at, instead of admitting they do not know, they would invent a plausile story. Similarly, in split-brain patients, where the corpus callosum is severed so each half of the brain cannot talk to each other, patients can invent elaborate explanations for why the other half of their body is doing a specific thing, even when the experimenter knows this is not the case because they have prompted it with something differently.  In general, people confabulating invent plausible sounding justifications which have no basis in fact. This is usually not conscious with an intent to deceive but instead appear to strongly believe in the story they have just reported. This behaviour is identical to what LLMs do. When they are forced to give an answer using a fact they do not know, they cannot say that they don’t know, since in training such examples would be followed by the actual fact. Instead, they make up something plausible. They confabulate.</p>

<p>More importantly, if we recognize that what LLMs are really doing is confabulating, we can try to compare and contrast their behaviour with that of humans. Humans confabulate in a wide variety of circumstances and especially with some neural pathologies such as with memory impairments and in split-brain patient. Funnily enough, these are similar to a LLM. What are LLMs but humans with extreme amnesia and no central coherence?</p>

      </article>

      

      
        <!-- Check if any share-links are active -->





      

      

      
        
          
        
        
      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A drop in salaries and in the number of jobs available in the Bay Area (103 pts)]]></title>
            <link>https://www.forbes.com/sites/jackkelly/2023/10/04/us-tech-workers-are-experiencing-a-drop-in-salaries-and-in-the-number-of-jobs-available-in-the-bay-area/</link>
            <guid>37773731</guid>
            <pubDate>Thu, 05 Oct 2023 01:01:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.forbes.com/sites/jackkelly/2023/10/04/us-tech-workers-are-experiencing-a-drop-in-salaries-and-in-the-number-of-jobs-available-in-the-bay-area/">https://www.forbes.com/sites/jackkelly/2023/10/04/us-tech-workers-are-experiencing-a-drop-in-salaries-and-in-the-number-of-jobs-available-in-the-bay-area/</a>, See on <a href="https://news.ycombinator.com/item?id=37773731">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><figure role="presentation"><figcaption><fbs-accordion current="-1"><p>Employers have decreased the number of open roles in high-cost-of-living markets by 19% and have <span data-ga-track="caption expand">... [+]</span><span> nearly quadrupled the number of roles in low-cost-of-living markets to 9% since 2020.</span></p></fbs-accordion><small>getty</small></figcaption></figure>
<p>Layoffs within the technology sector continue but have slowed. The focus for businesses has shifted to return-to-office mandates, which have faced resistance from tech workers. Companies like <a href="https://www.forbes.com/sites/glebtsipursky/2023/07/24/relocating-to-a-dismal-workplace-at-amazon/" target="_self" title="https://www.forbes.com/sites/glebtsipursky/2023/07/24/relocating-to-a-dismal-workplace-at-amazon/" data-ga-track="InternalLink:https://www.forbes.com/sites/glebtsipursky/2023/07/24/relocating-to-a-dismal-workplace-at-amazon/" aria-label="Amazon">Amazon</a>, <a href="https://www.businessinsider.com/companies-making-workers-employees-return-to-office-rto-wfh-hybrid-2023-1" target="_blank" title="https://www.businessinsider.com/companies-making-workers-employees-return-to-office-rto-wfh-hybrid-2023-1" rel="nofollow noopener noreferrer" data-ga-track="ExternalLink:https://www.businessinsider.com/companies-making-workers-employees-return-to-office-rto-wfh-hybrid-2023-1" aria-label="Apple, Google">Apple, Google</a> and <a href="https://www.businessinsider.com/tiktok-tracking-employees-return-to-office-surveillance-tool-myrto-2023-9" target="_blank" title="https://www.businessinsider.com/tiktok-tracking-employees-return-to-office-surveillance-tool-myrto-2023-9" rel="nofollow noopener noreferrer" data-ga-track="ExternalLink:https://www.businessinsider.com/tiktok-tracking-employees-return-to-office-surveillance-tool-myrto-2023-9" aria-label="TikTok">TikTok</a> have enforced their in-office policies by reportedly tracking employee badge swipes to ensure compliance. This kind of surveillance could nudge some employees to quit, but the labor market is cooler now than during the Great Resignation.</p>


<p>The recent tech sector layoffs can largely be attributed to overhiring during the pandemic boom, rising inflation and interest rates and an economic slowdown in the United States. With tech companies looking to cut costs, significant layoffs took hold in mid-2022 and permeated the following year. According to <a href="https://layoffs.fyi/" target="_blank" title="https://layoffs.fyi/" rel="nofollow noopener noreferrer" data-ga-track="ExternalLink:https://layoffs.fyi/" aria-label="Layoffs.fyi">Layoffs.fyi</a>, more than 238,000 tech professionals were let go in 2023, and nearly 165,000 in 2022.</p>

<p>Hired, an AI-driven job marketplace that matches top tech and sales talent with companies looking to hire, recently released its 2023 <a href="https://hired.com/state-of-tech-salaries/2023/?utm_source=internal&amp;utm_medium=content&amp;utm_campaign=(a-all)(l-all)(r-all)(2023-sots-blog)" target="_blank" title="https://hired.com/state-of-tech-salaries/2023/?utm_source=internal&amp;utm_medium=content&amp;utm_campaign=(a-all)(l-all)(r-all)(2023-sots-blog)" rel="nofollow noopener noreferrer" data-ga-track="ExternalLink:https://hired.com/state-of-tech-salaries/2023/?utm_source=internal&amp;utm_medium=content&amp;utm_campaign=(a-all)(l-all)(r-all)(2023-sots-blog)" aria-label="State of Tech Salaries">State of Tech Salaries</a> report to provide insights into the tech job market.</p>


<h2>State Of The Tech Sector</h2>
<p>Hired’s data reveals that demand for job postings on the <a href="https://hired.com/products/tech-hiring-platform/" target="_blank" title="https://hired.com/products/tech-hiring-platform/" rel="nofollow noopener noreferrer" data-ga-track="ExternalLink:https://hired.com/products/tech-hiring-platform/" aria-label="tech hiring platform">tech hiring platform</a> lowered from 45% in 2019 to 25% in the first half of 2023.</p>

<p>According to the report, when adjusting for inflation, tech salaries plunged to their lowest point in the past five years, decreasing 9% from $141,000 to $129,000 from 2022 to mid-2023.</p>
<p>Additionally, salaries experienced their most significant year-over-year decline, dropping by 3% from $161,000 to $156,000. However, despite economic volatility, job seekers in the U.S. maintained their salary expectations at around $146,000.</p>

<p>Amid the rise of artificial intelligence and corporate belt-tightening, junior talent with less than four years of experience has experienced the most significant salary decrease–nearly 5% year-over-year.</p>

<p>Tech professionals have been moving from expensive cities to lower-cost locations. U.S. inflation-adjusted remote salaries have been higher on average. Employers have decreased the number of open roles in high-cost-of-living markets by 19% and have nearly quadrupled the number of positions in low-cost-of-living markets to 9% since 2020. Most notably, the San Francisco Bay Area saw the most significant decrease in role volume on Hired’s platform. Nevertheless, it continues to command the highest average salary of $178,000</p>


<p>Experienced engineers who can efficiently resolve issues are in high demand, particularly with the introduction of AI tools and increased cybersecurity challenges. Engineering managers earn the highest salaries at $202,000 in the U.S.</p>
<p>Employers on Hired’s marketplace have a higher demand for specialized engineers, especially for AI applications, such as machine learning, as well as cybersecurity, data, and backend engineers. However, nearly half of employers (47%) project they will leverage AI to reduce headcounts by 2029.</p>
</div><div><p><span>Follow me on&nbsp;</span><a href="https://www.twitter.com/@jackjaykelly" rel="nofollow noopener noreferrer" target="_blank">Twitter</a>&nbsp;or&nbsp;<a href="https://www.linkedin.com/in/jackkellywecruitr/" rel="nofollow noopener noreferrer" target="_blank">LinkedIn</a>.&nbsp;<span>Check out&nbsp;</span>my&nbsp;<a href="https://wecruitr.io/" rel="nofollow noopener noreferrer" target="_blank">website</a>&nbsp;or&nbsp;some of my other work&nbsp;<a href="https://www.amazon.com/How-Get-Job-Tough-Times-ebook/dp/B088RM6SDK/ref=sr_1_1?dchild=1&amp;keywords=how%20to%20get%20a%20job%20in%20tough%20times%20jack%20kelly&amp;qid=1590064961&amp;sr=8-1" rel="nofollow noopener noreferrer" target="_blank">here</a>.&nbsp;</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Divan: Fast and Simple Benchmarking for Rust (110 pts)]]></title>
            <link>https://nikolaivazquez.com/blog/divan/</link>
            <guid>37773599</guid>
            <pubDate>Thu, 05 Oct 2023 00:43:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nikolaivazquez.com/blog/divan/">https://nikolaivazquez.com/blog/divan/</a>, See on <a href="https://news.ycombinator.com/item?id=37773599">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="announcing-divan">Announcing Divan!</h2>
<p><a href="https://github.com/nvzqz/divan">Divan</a> is a framework for quick <strong>comfy
bench</strong>marking of <a href="https://www.rust-lang.org/">Rust</a> code.</p>
<p>Get started easily with <a href="#examples">examples</a> that span from introductory to advanced
scenarios. The entire <a href="https://github.com/nvzqz/divan/tree/v0.1.0/examples/benches">example benchmark
suite</a> compiles and
runs in 40 seconds on my machine.</p>
<h2 id="compared-to-criterion">Compared to Criterion</h2>
<p>The current go-to Rust benchmarking library is
<a href="https://github.com/bheisler/criterion.rs">Criterion.rs</a>, a port of <a href="https://github.com/haskell/criterion">Haskell’s
Criterion</a>. It works very well and has
many useful features.</p>
<p>However, I believed we could have a <a href="#simpler-benchmarking">simpler API</a> while
being more powerful, such as <a href="#generic-benchmarks">benchmarking generic functions</a>.</p>
<h2 id="follow-along">Follow Along</h2>
<details><summary>Run these benchmarks locally! Steps:</summary><ol>
<li>
<p><a href="https://www.rust-lang.org/tools/install">Install Rust</a></p>
</li>
<li>
<p>Clone the repository:</p>
<pre is:raw="" tabindex="0"><code><span><span>git</span><span> </span><span>clone</span><span> </span><span>https://github.com/nvzqz/divan.git</span></span>
<span><span>cd</span><span> </span><span>divan/examples</span></span></code></pre>
</li>
<li>
<p>Open <a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/scratch.rs"><code>divan/examples/benches/scratch.rs</code></a>
in your editor:</p>
<pre is:raw="" tabindex="0"><code><span><span>// scratch.rs</span></span>
<span><span>fn</span><span> </span><span>main</span><span>()</span><span> </span><span>{</span></span>
<span><span>    divan</span><span>::</span><span>main</span><span>();</span></span>
<span><span>}</span></span></code></pre>
<p>This can be run with:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--bench</span><span> </span><span>scratch</span></span></code></pre>
</li>
</ol></details>
<h2 id="usage">Usage</h2>
<h3 id="examples">Examples</h3>
<p>Divan has <a href="https://github.com/nvzqz/divan/tree/v0.1.0/examples/benches">many practical examples</a>.
These can all be benchmarked locally with:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--all-features</span></span></code></pre>
<details><summary>Each example file can also be run on its own. Run the <a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/string.rs"><code>string.rs</code></a> benchmarks with:</summary><pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--bench</span><span> </span><span>string</span></span></code></pre><pre is:raw="" tabindex="0"><code><span><span>string         fastest       │ slowest       │ median        │ mean          │ samples │ iters</span></span>
<span><span>├─ char_count                │               │               │               │         │</span></span>
<span><span>│  ├─ Ascii                  │               │               │               │         │</span></span>
<span><span>│  │  ├─ 0     0.926 ns      │ 1.069 ns      │ 0.967 ns      │ 0.964 ns      │ 100     │ 409600</span></span>
<span><span>│  │  │        0 B/s         │ 0 B/s         │ 0 B/s         │ 0 B/s         │         │</span></span>
<span><span>│  │  │        0 char/s      │ 0 char/s      │ 0 char/s      │ 0 char/s      │         │</span></span>
<span><span>│  │  ├─ 8     2.157 ns      │ 2.341 ns      │ 2.238 ns      │ 2.225 ns      │ 100     │ 204800</span></span>
<span><span>│  │  │        3.708 GB/s    │ 3.417 GB/s    │ 3.574 GB/s    │ 3.595 GB/s    │         │</span></span>
<span><span>│  │  │        3.708 Gchar/s │ 3.417 Gchar/s │ 3.574 Gchar/s │ 3.595 Gchar/s │         │</span></span>
<span><span>│  │  ├─ 64    3.703 ns      │ 4.049 ns      │ 3.744 ns      │ 3.766 ns      │ 100     │ 204800</span></span>
<span><span>│  │  │        17.28 GB/s    │ 15.8 GB/s     │ 17.09 GB/s    │ 16.99 GB/s    │         │</span></span>
<span><span>│  │  │        17.28 Gchar/s │ 15.8 Gchar/s  │ 17.09 Gchar/s │ 16.99 Gchar/s │         │</span></span>
<span><span>│  │  ╰─ 1024  33.54 ns      │ 35.18 ns      │ 34.2 ns       │ 34.23 ns      │ 100     │ 12800</span></span>
<span><span>│  │           30.52 GB/s    │ 29.1 GB/s     │ 29.93 GB/s    │ 29.91 GB/s    │         │</span></span>
<span><span>│  │           30.52 Gchar/s │ 29.1 Gchar/s  │ 29.93 Gchar/s │ 29.91 Gchar/s │         │</span></span>
<span><span>│  ╰─ Unicode                │               │               │               │         │</span></span>
<span><span>│     ├─ 0     0.926 ns      │ 1.049 ns      │ 0.936 ns      │ 0.943 ns      │ 100     │ 409600</span></span>
<span><span>│     │        0 B/s         │ 0 B/s         │ 0 B/s         │ 0 B/s         │         │</span></span>
<span><span>│     │        0 char/s      │ 0 char/s      │ 0 char/s      │ 0 char/s      │         │</span></span>
<span><span>│     ├─ 8     6.857 ns      │ 7.833 ns      │ 7.182 ns      │ 7.183 ns      │ 100     │ 102400</span></span>
<span><span>│     │        4.52 GB/s     │ 3.957 GB/s    │ 4.316 GB/s    │ 4.315 GB/s    │         │</span></span>
<span><span>│     │        1.166 Gchar/s │ 1.021 Gchar/s │ 1.113 Gchar/s │ 1.113 Gchar/s │         │</span></span>
<span><span>│     ├─ 64    16.46 ns      │ 24.76 ns      │ 17.27 ns      │ 17.41 ns      │ 100     │ 25600</span></span>
<span><span>│     │        15.3 GB/s     │ 10.13 GB/s    │ 14.58 GB/s    │ 14.41 GB/s    │         │</span></span>
<span><span>│     │        3.887 Gchar/s │ 2.584 Gchar/s │ 3.704 Gchar/s │ 3.674 Gchar/s │         │</span></span>
<span><span>│     ╰─ 1024  140.3 ns      │ 340.8 ns      │ 142.9 ns      │ 145.2 ns      │ 100     │ 3200</span></span>
<span><span>│              28.74 GB/s    │ 11.83 GB/s    │ 28.23 GB/s    │ 27.78 GB/s    │         │</span></span>
<span><span>│              7.297 Gchar/s │ 3.004 Gchar/s │ 7.163 Gchar/s │ 7.05 Gchar/s  │         │</span></span>
<span><span>...</span></span></code></pre></details>
<h3 id="benchmark-registration">Benchmark Registration</h3>
<p>Divan benchmarks can be registered anywhere using the
<a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html"><code>#[divan::bench]</code></a>
attribute, like <a href="https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute"><code>#[test]</code></a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>fn</span><span> </span><span>main</span><span>()</span><span> </span><span>{</span></span>
<span><span>    // Run registered benchmarks.</span></span>
<span><span>    divan</span><span>::</span><span>main</span><span>();</span></span>
<span><span>}</span></span>
<span></span>
<span><span>// Define a `fibonacci` function and</span></span>
<span><span>// register it for benchmarking.</span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>fibonacci</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>    </span><span>fn</span><span> </span><span>compute</span><span>(</span><span>n</span><span>:</span><span> </span><span>u64</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>        </span><span>if</span><span> n </span><span>&lt;=</span><span> </span><span>1</span><span> </span><span>{</span></span>
<span><span>            </span><span>1</span></span>
<span><span>        </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span></span>
<span><span>            </span><span>compute</span><span>(</span><span>n </span><span>-</span><span> </span><span>2</span><span>)</span><span> </span><span>+</span><span> </span><span>compute</span><span>(</span><span>n </span><span>-</span><span> </span><span>1</span><span>)</span></span>
<span><span>        </span><span>}</span></span>
<span><span>    </span><span>}</span></span>
<span></span>
<span><span>    </span><span>compute</span><span>(</span><span>divan</span><span>::</span><span>black_box</span><span>(</span><span>10</span><span>))</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch       fastest  │ slowest │ median   │ mean     │ samples │ iters</span></span>
<span><span>╰─ fibonacci  179.3 ns │ 204 ns  │ 180.6 ns │ 181.5 ns │ 100     │ 3200</span></span></code></pre>
<p>And that’s all that’s needed, because OS-dependent <a href="https://en.wikipedia.org/wiki/Linker_(computing)">linker</a> shenanigans enables
you to <a href="#register-benchmarks-anywhere">register benchmarks anywhere</a>.</p>
<h3 id="benchmark-options">Benchmark Options</h3>
<p>How each benchmark is executed can be controlled via
<a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html#options">attribute options</a>,
such as <a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html#max_time"><code>max_time</code></a>
and <a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html#sample_size"><code>sample_size</code></a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>(</span></span>
<span><span>    max_time </span><span>=</span><span> 0</span><span>.</span><span>001</span><span>,</span><span> // seconds</span></span>
<span><span>    sample_size </span><span>=</span><span> 64</span><span>,</span><span> // 64 × 84 = 5376</span></span>
<span><span>)]</span></span>
<span><span>fn</span><span> </span><span>fibonacci</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>    // ...</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch       fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>╰─ fibonacci  179.9 ns │ 184.5 ns │ 181.2 ns │ 181.1 ns │ 84      │ 5376</span></span></code></pre>
<h3 id="benchmark-in-ci">Benchmark in CI</h3>
<p>Divan’s <a href="#sample-size-scaling">sample size scaling</a> enables you to run benchmarks in CI due to reduced
timing noise. To demonstrate, <a href="https://github.com/nvzqz/divan/blob/v0.1.0/.github/workflows/ci.yml#L119-L140">all examples are benchmarked in
CI</a>:</p>
<ul>
<li><a href="https://github.com/nvzqz/divan/actions/runs/6410601867/job/17404249771#step:4:203">Linux</a></li>
<li><a href="https://github.com/nvzqz/divan/actions/runs/6410601867/job/17404250208#step:4:201">macOS</a></li>
<li><a href="https://github.com/nvzqz/divan/actions/runs/6410601867/job/17404250630#step:4:198">Windows</a></li>
</ul>
<h3 id="module-tree-hierarchy">Module Tree Hierarchy</h3>
<p>Rust naturally groups functions and types into
<a href="https://doc.rust-lang.org/std/keyword.mod.html">modules</a>. Divan reflects this
grouping in its tree output formatting.</p>
<p>If we want to compare our recursive fibonacci implementation against an
iterative implementation, they can be placed together in a module:</p>
<pre is:raw="" tabindex="0"><code><span><span>mod</span><span> </span><span>fibonacci</span><span> </span><span>{</span></span>
<span><span>    </span><span>const</span><span> N</span><span>:</span><span> </span><span>u64</span><span> </span><span>=</span><span> </span><span>10</span><span>;</span></span>
<span></span>
<span><span>    </span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>    </span><span>fn</span><span> </span><span>iterative</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>        </span><span>let</span><span> </span><span>mut</span><span> previous </span><span>=</span><span> </span><span>1</span><span>;</span></span>
<span><span>        </span><span>let</span><span> </span><span>mut</span><span> current </span><span>=</span><span> </span><span>1</span><span>;</span></span>
<span></span>
<span><span>        </span><span>for</span><span> _ </span><span>in</span><span> </span><span>2</span><span>..=</span><span>divan</span><span>::</span><span>black_box</span><span>(</span><span>N</span><span>)</span><span> </span><span>{</span></span>
<span><span>            </span><span>let</span><span> next </span><span>=</span><span> previous </span><span>+</span><span> current</span><span>;</span></span>
<span><span>            previous </span><span>=</span><span> current</span><span>;</span></span>
<span><span>            current </span><span>=</span><span> next</span><span>;</span></span>
<span><span>        </span><span>}</span></span>
<span></span>
<span><span>        current</span></span>
<span><span>    </span><span>}</span></span>
<span></span>
<span><span>    </span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>    </span><span>fn</span><span> </span><span>recursive</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>        </span><span>fn</span><span> </span><span>compute</span><span>(</span><span>n</span><span>:</span><span> </span><span>u64</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>            </span><span>if</span><span> n </span><span>&lt;=</span><span> </span><span>1</span><span> </span><span>{</span></span>
<span><span>                </span><span>1</span></span>
<span><span>            </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span></span>
<span><span>                </span><span>compute</span><span>(</span><span>n </span><span>-</span><span> </span><span>2</span><span>)</span><span> </span><span>+</span><span> </span><span>compute</span><span>(</span><span>n </span><span>-</span><span> </span><span>1</span><span>)</span></span>
<span><span>            </span><span>}</span></span>
<span><span>        </span><span>}</span></span>
<span></span>
<span><span>        </span><span>compute</span><span>(</span><span>divan</span><span>::</span><span>black_box</span><span>(</span><span>N</span><span>))</span></span>
<span><span>    </span><span>}</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch          fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>╰─ fibonacci              │          │          │          │         │</span></span>
<span><span>   ├─ iterative  4.334 ns │ 9.383 ns │ 4.497 ns │ 5.855 ns │ 100     │ 102400</span></span>
<span><span>   ╰─ recursive  154.6 ns │ 185.9 ns │ 159.8 ns │ 159.7 ns │ 100     │ 3200</span></span></code></pre>
<p>Options can be set across all benchmarks in a module using the
<a href="https://docs.rs/divan/0.1.0/divan/attr.bench_group.html#options"><code>#[divan::bench_group]</code></a>
attribute macro, such as
<a href="https://docs.rs/divan/0.1.0/divan/attr.bench_group.html#max_time"><code>max_time</code></a>
and
<a href="https://docs.rs/divan/0.1.0/divan/attr.bench_group.html#sample_size"><code>sample_size</code></a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>#[</span><span>divan</span><span>::</span><span>bench_group</span><span>(</span></span>
<span><span>    max_time </span><span>=</span><span> 0</span><span>.</span><span>001</span><span>,</span></span>
<span><span>    sample_size </span><span>=</span><span> 64</span><span>,</span></span>
<span><span>)]</span></span>
<span><span>mod</span><span> </span><span>fibonacci</span><span> </span><span>{</span></span>
<span><span>    </span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>    </span><span>fn</span><span> </span><span>iterative</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>        // ...</span></span>
<span><span>    </span><span>}</span></span>
<span></span>
<span><span>    </span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>    </span><span>fn</span><span> </span><span>recursive</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>u64</span><span> </span><span>{</span></span>
<span><span>        // ...</span></span>
<span><span>    </span><span>}</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch          fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>╰─ fibonacci              │          │          │          │         │</span></span>
<span><span>   ├─ iterative  4.238 ns │ 7.504 ns │ 4.895 ns │ 4.822 ns │ 100     │ 6400</span></span>
<span><span>   ╰─ recursive  149.4 ns │ 361.6 ns │ 154.6 ns │ 157.4 ns │ 97      │ 6208</span></span></code></pre>
<h3 id="filter-by-regex">Filter by Regex</h3>
<p>When running Divan on the command line, you can filter <code>path::to::function</code>
against a <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expression</a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--bench</span><span> </span><span>threads</span><span> </span><span>--</span><span> </span><span>'</span><span>id$</span><span>'</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>threads                 fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>╰─ thread_id                     │          │          │          │         │</span></span>
<span><span>   ╰─ std                        │          │          │          │         │</span></span>
<span><span>      ├─ thread                  │          │          │          │         │</span></span>
<span><span>      │  ╰─ current_id           │          │          │          │         │</span></span>
<span><span>      │     ├─ t=1      9.131 ns │ 10.43 ns │ 9.701 ns │ 9.587 ns │ 100     │ 51200</span></span>
<span><span>      │     ├─ t=4      9.781 ns │ 10.1 ns  │ 9.863 ns │ 9.856 ns │ 100     │ 51200</span></span>
<span><span>      │     ├─ t=10     9.781 ns │ 71.3 ns  │ 10.43 ns │ 12.2 ns  │ 100     │ 25600</span></span>
<span><span>      │     ╰─ t=16     9.777 ns │ 115.2 ns │ 11.09 ns │ 15.79 ns │ 112     │ 14336</span></span>
<span><span>      ╰─ thread_local            │          │          │          │         │</span></span>
<span><span>         ╰─ id                   │          │          │          │         │</span></span>
<span><span>            ├─ t=1      1.543 ns │ 1.706 ns │ 1.553 ns │ 1.575 ns │ 100     │ 409600</span></span>
<span><span>            ├─ t=4      0.627 ns │ 11.14 ns │ 1.685 ns │ 1.559 ns │ 100     │ 409600</span></span>
<span><span>            ├─ t=10     0.688 ns │ 1.868 ns │ 1.716 ns │ 1.634 ns │ 100     │ 204800</span></span>
<span><span>            ╰─ t=16     0.688 ns │ 1.93 ns  │ 1.706 ns │ 1.656 ns │ 112     │ 229376</span></span></code></pre>
<h3 id="generic-benchmarks">Generic Benchmarks</h3>
<p>Divan can benchmark functions with <a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html#types">generic types</a>.
The following example benchmarks
<a href="https://doc.rust-lang.org/std/convert/trait.From.html"><code>From&lt;&amp;str&gt;</code></a> for
<a href="https://doc.rust-lang.org/std/primitive.str.html"><code>&amp;str</code></a> and <a href="https://doc.rust-lang.org/std/string/struct.String.html"><code>String</code></a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>(</span><span>types </span><span>=</span><span> </span><span>[</span></span>
<span><span>    </span><span>&amp;</span><span>str</span><span>,</span></span>
<span><span>    </span><span>String</span><span>,</span></span>
<span><span>])]</span></span>
<span><span>fn</span><span> </span><span>from_str</span><span>&lt;'</span><span>a</span><span>,</span><span> </span><span>T</span><span>&gt;()</span><span> </span><span>-&gt;</span><span> </span><span>T</span></span>
<span><span>where</span></span>
<span><span>    </span><span>T</span><span>:</span><span> </span><span>From</span><span>&lt;</span><span>&amp;</span><span>'</span><span>a</span><span> </span><span>str</span><span>&gt;,</span></span>
<span><span>{</span></span>
<span><span>    divan</span><span>::</span><span>black_box</span><span>(</span><span>"</span><span>hello world</span><span>"</span><span>)</span><span>.</span><span>into</span><span>()</span></span>
<span><span>}</span></span></code></pre>
<p>Divan can also benchmark functions with <a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html#consts">generic <code>const</code>
values</a>. The
following example benchmarks initializing <a href="https://doc.rust-lang.org/std/primitive.array.html">stack-allocated
arrays</a> of lengths 1000,
2000, and 3000:</p>
<pre is:raw="" tabindex="0"><code><span><span>const</span><span> LEN</span><span>:</span><span> </span><span>usize</span><span> </span><span>=</span><span> </span><span>2000</span><span>;</span></span>
<span></span>
<span><span>const</span><span> </span><span>fn</span><span> </span><span>len</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>usize</span><span> </span><span>{</span></span>
<span><span>    </span><span>3000</span></span>
<span><span>}</span></span>
<span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>(</span><span>consts </span><span>=</span><span> </span><span>[</span></span>
<span><span>    1000</span><span>,</span></span>
<span><span>    </span><span>LEN</span><span>,</span></span>
<span><span>    len</span><span>(),</span></span>
<span><span>])]</span></span>
<span><span>fn</span><span> </span><span>init_array</span><span>&lt;</span><span>const</span><span> </span><span>N</span><span>:</span><span> </span><span>usize</span><span>&gt;()</span><span> </span><span>-&gt;</span><span> </span><span>[</span><span>i32</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>{</span></span>
<span><span>    </span><span>let</span><span> </span><span>mut</span><span> result </span><span>=</span><span> </span><span>[</span><span>0</span><span>;</span><span> </span><span>N</span><span>];</span></span>
<span></span>
<span><span>    </span><span>for</span><span> i </span><span>in</span><span> </span><span>0</span><span>..</span><span>N</span><span> </span><span>{</span></span>
<span><span>        result</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> divan</span><span>::</span><span>black_box</span><span>(</span><span>i </span><span>as</span><span> </span><span>i32</span><span>);</span></span>
<span><span>    </span><span>}</span></span>
<span></span>
<span><span>    result</span></span>
<span><span>}</span></span></code></pre>
<p>When ran, these benchmarks will output:</p>
<pre is:raw="" tabindex="0"><code><span><span>scratch        fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>├─ from_str             │          │          │          │         │</span></span>
<span><span>│  ├─ &amp;str     0.738 ns │ 0.799 ns │ 0.759 ns │ 0.757 ns │ 100     │ 409600</span></span>
<span><span>│  ╰─ String   26.8 ns  │ 32.18 ns │ 30.39 ns │ 30.42 ns │ 100     │ 25600</span></span>
<span><span>╰─ init_array           │          │          │          │         │</span></span>
<span><span>   ├─ 1000     572.5 ns │ 598.6 ns │ 583 ns   │ 584.5 ns │ 100     │ 800</span></span>
<span><span>   ├─ 2000     1.155 µs │ 1.197 µs │ 1.166 µs │ 1.165 µs │ 100     │ 400</span></span>
<span><span>   ╰─ 3000     1.759 µs │ 1.801 µs │ 1.77 µs  │ 1.77 µs  │ 100     │ 400</span></span></code></pre>
<p>The <a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/collections.rs"><code>collections.rs</code></a>
example contains many more generic benchmarks:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>-q</span><span> </span><span>--bench</span><span> </span><span>collections</span></span></code></pre>
<h3 id="benchmark-context">Benchmark Context</h3>
<p>Benchmarks can take a <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html"><code>Bencher</code></a> argument to provide context and more control
over how benchmarks are run.</p>
<pre is:raw="" tabindex="0"><code><span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>clone_string</span><span>(</span><span>bencher</span><span>:</span><span> divan</span><span>::</span><span>Bencher</span><span>)</span><span> </span><span>{</span></span>
<span><span>    </span><span>let</span><span> s </span><span>=</span><span> </span><span>String</span><span>::</span><span>from</span><span>(</span><span>"</span><span>...</span><span>"</span><span>);</span></span>
<span></span>
<span><span>    bencher</span><span>.</span><span>bench</span><span>(</span><span>||</span><span> </span><span>{</span></span>
<span><span>        s</span><span>.</span><span>clone</span><span>()</span></span>
<span><span>    </span><span>})</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch          fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>╰─ clone_string  26.71 ns │ 56.66 ns │ 28.17 ns │ 28.87 ns │ 100     │ 12800</span></span></code></pre>
<h3 id="benchmark-inputs">Benchmark Inputs</h3>
<p>Each invocation can be given an input using <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.with_inputs"><code>with_inputs</code></a>, which can then be
used by-reference with <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench_refs"><code>bench_refs</code></a> or by-value with <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench_values"><code>bench_values</code></a>.</p>
<pre is:raw="" tabindex="0"><code><span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>append_ref</span><span>(</span><span>bencher</span><span>:</span><span> divan</span><span>::</span><span>Bencher</span><span>)</span><span> </span><span>{</span></span>
<span><span>    bencher</span></span>
<span><span>        </span><span>.</span><span>with_inputs</span><span>(</span><span>||</span><span> </span><span>{</span></span>
<span><span>            </span><span>String</span><span>::</span><span>from</span><span>(</span><span>"</span><span>...</span><span>"</span><span>)</span></span>
<span><span>        </span><span>})</span></span>
<span><span>        </span><span>.</span><span>bench_refs</span><span>(</span><span>|</span><span>s</span><span>:</span><span> </span><span>&amp;</span><span>mut</span><span> </span><span>String</span><span>|</span><span> </span><span>{</span></span>
<span><span>            </span><span>*</span><span>s </span><span>+=</span><span> </span><span>"</span><span>abc</span><span>"</span><span>;</span></span>
<span><span>        </span><span>});</span></span>
<span><span>}</span></span>
<span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>append_value</span><span>(</span><span>bencher</span><span>:</span><span> divan</span><span>::</span><span>Bencher</span><span>)</span><span> </span><span>{</span></span>
<span><span>    bencher</span></span>
<span><span>        </span><span>.</span><span>with_inputs</span><span>(</span><span>||</span><span> </span><span>{</span></span>
<span><span>            </span><span>String</span><span>::</span><span>from</span><span>(</span><span>"</span><span>...</span><span>"</span><span>)</span></span>
<span><span>        </span><span>})</span></span>
<span><span>        </span><span>.</span><span>bench_values</span><span>(</span><span>|</span><span>s</span><span>:</span><span> </span><span>String</span><span>|</span><span> </span><span>{</span></span>
<span><span>            s </span><span>+</span><span> </span><span>"</span><span>abc</span><span>"</span></span>
<span><span>        </span><span>});</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch          fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>├─ append_ref    23.87 ns │ 24.85 ns │ 24.19 ns │ 24.19 ns │ 100     │ 25600</span></span>
<span><span>╰─ append_value  24.2 ns  │ 42.26 ns │ 24.52 ns │ 24.78 ns │ 100     │ 25600</span></span></code></pre>
<h3 id="measure-throughput">Measure Throughput</h3>
<p>Divan uses <a href="https://docs.rs/divan/0.1.0/divan/counter/index.html">counters</a> to
track quantities processed during each iteration. Currently there are:
<a href="https://docs.rs/divan/0.1.0/divan/counter/struct.BytesCount.html"><code>BytesCount</code></a>, <a href="https://docs.rs/divan/0.1.0/divan/counter/struct.CharsCount.html"><code>CharsCount</code></a>, and <a href="https://docs.rs/divan/0.1.0/divan/counter/struct.ItemsCount.html"><code>ItemsCount</code></a>.</p>
<p>The following example generates strings from 50 random <a href="https://doc.rust-lang.org/std/primitive.char.html">Unicode scalars</a>
and measures the throughput in <a href="https://docs.rs/divan/0.1.0/divan/counter/struct.CharsCount.html">scalars</a> and
<a href="https://docs.rs/divan/0.1.0/divan/counter/struct.BytesCount.html">bytes</a>.</p>
<pre is:raw="" tabindex="0"><code><span><span>use</span><span> divan</span><span>::</span><span>counter</span><span>::</span><span>{</span><span>BytesCount</span><span>,</span><span> </span><span>CharsCount</span><span>};</span></span>
<span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>to_uppercase</span><span>(</span><span>bencher</span><span>:</span><span> divan</span><span>::</span><span>Bencher</span><span>)</span><span> </span><span>{</span></span>
<span><span>    </span><span>let</span><span> len</span><span>:</span><span> </span><span>usize</span><span> </span><span>=</span><span> </span><span>50</span><span>;</span></span>
<span></span>
<span><span>    bencher</span></span>
<span><span>        </span><span>.</span><span>counter</span><span>({</span></span>
<span><span>            // Constant across inputs.</span></span>
<span><span>            </span><span>CharsCount</span><span>::</span><span>new</span><span>(</span><span>len</span><span>)</span></span>
<span><span>        </span><span>})</span></span>
<span><span>        </span><span>.</span><span>with_inputs</span><span>(</span><span>||</span><span> </span><span>-&gt;</span><span> </span><span>String</span><span> </span><span>{</span></span>
<span><span>            </span><span>(</span><span>0</span><span>..</span><span>len</span><span>)</span><span>.</span><span>map</span><span>(</span><span>|</span><span>_</span><span>|</span><span> fastrand</span><span>::</span><span>char</span><span>(</span><span>..</span><span>))</span><span>.</span><span>collect</span><span>()</span></span>
<span><span>        </span><span>})</span></span>
<span><span>        </span><span>.</span><span>input_counter</span><span>(</span><span>|</span><span>s</span><span>:</span><span> </span><span>&amp;</span><span>String</span><span>|</span><span> </span><span>{</span></span>
<span><span>            // Changes based on input.</span></span>
<span><span>            </span><span>BytesCount</span><span>::</span><span>of_str</span><span>(</span><span>s</span><span>)</span></span>
<span><span>        </span><span>})</span></span>
<span><span>        </span><span>.</span><span>bench_refs</span><span>(</span><span>|</span><span>s</span><span>:</span><span> </span><span>&amp;</span><span>mut</span><span> </span><span>String</span><span>|</span><span> </span><span>{</span></span>
<span><span>            s</span><span>.</span><span>to_uppercase</span><span>()</span></span>
<span><span>        </span><span>});</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch          fastest       │ slowest       │ median        │ mean          │ samples │ iters</span></span>
<span><span>╰─ to_uppercase  911 ns        │ 1.088 µs      │ 942.4 ns      │ 952.4 ns      │ 100     │ 800</span></span>
<span><span>                 217.3 MB/s    │ 181 MB/s      │ 209 MB/s      │ 205.7 MB/s    │         │</span></span>
<span><span>                 54.88 Mchar/s │ 45.94 Mchar/s │ 53.05 Mchar/s │ 52.49 Mchar/s │         │</span></span></code></pre>
<p>By default, bytes throughput is displayed in powers of 1000 (KB), as seen above.
If you prefer powers of 1024 (KiB), set <code>DIVAN_BYTES_FORMAT</code> in your
environment:</p>
<pre is:raw="" tabindex="0"><code><span><span>DIVAN_BYTES_FORMAT</span><span>=</span><span>binary</span><span> </span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>-q</span><span> </span><span>--bench</span><span> </span><span>scratch</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch          fastest       │ slowest       │ median        │ mean          │ samples │ iters</span></span>
<span><span>╰─ to_uppercase  911 ns        │ 1.885 µs      │ 937.1 ns      │ 958.9 ns      │ 100     │ 800</span></span>
<span><span>                 206.2 MiB/s   │ 99.15 MiB/s   │ 199.4 MiB/s   │ 194.9 MiB/s   │         │</span></span>
<span><span>                 54.88 Mchar/s │ 26.52 Mchar/s │ 53.35 Mchar/s │ 52.14 Mchar/s │         │</span></span></code></pre>
<p>The <a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/string.rs"><code>string.rs</code></a>
example contains many more benchmarks with counters:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--bench</span><span> </span><span>string</span></span></code></pre>
<h3 id="measure-thread-contention">Measure Thread Contention</h3>
<p>Divan can benchmark contention of <a href="https://doc.rust-lang.org/std/sync/index.html">atomics and
locks</a> across multiple threads.</p>
<p>Thread count 0 indicates using <a href="https://doc.rust-lang.org/std/thread/fn.available_parallelism.html">available
parallelism</a>,
which is 10 on my machine.</p>
<pre is:raw="" tabindex="0"><code><span><span>use</span><span> std</span><span>::</span><span>sync</span><span>::</span><span>{</span><span>Mutex</span><span>,</span><span> </span><span>RwLock</span><span>};</span></span>
<span></span>
<span><span>fn</span><span> </span><span>thread_counts</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>Vec</span><span>&lt;</span><span>usize</span><span>&gt;</span><span> </span><span>{</span></span>
<span><span>    </span><span>vec!</span><span>[</span><span>/* available parallelism */</span><span> </span><span>0</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>4</span><span>,</span><span> </span><span>8</span><span>]</span></span>
<span><span>}</span></span>
<span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>(</span><span>threads </span><span>=</span><span> thread_counts</span><span>())]</span></span>
<span><span>fn</span><span> </span><span>mutex</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>i32</span><span> </span><span>{</span></span>
<span><span>    </span><span>static</span><span> LOCK</span><span>:</span><span> </span><span>Mutex</span><span>&lt;</span><span>i32</span><span>&gt;</span><span> </span><span>=</span><span> </span><span>Mutex</span><span>::</span><span>new</span><span>(</span><span>0</span><span>);</span></span>
<span></span>
<span><span>    </span><span>*</span><span>LOCK</span><span>.</span><span>lock</span><span>()</span><span>.</span><span>unwrap</span><span>()</span></span>
<span><span>}</span></span>
<span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>(</span><span>threads </span><span>=</span><span> thread_counts</span><span>())]</span></span>
<span><span>fn</span><span> </span><span>rw_lock</span><span>()</span><span> </span><span>-&gt;</span><span> </span><span>i32</span><span> </span><span>{</span></span>
<span><span>    </span><span>static</span><span> LOCK</span><span>:</span><span> </span><span>RwLock</span><span>&lt;</span><span>i32</span><span>&gt;</span><span> </span><span>=</span><span> </span><span>RwLock</span><span>::</span><span>new</span><span>(</span><span>0</span><span>);</span></span>
<span></span>
<span><span>    </span><span>*</span><span>LOCK</span><span>.</span><span>read</span><span>()</span><span>.</span><span>unwrap</span><span>()</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch     fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>├─ mutex             │          │          │          │         │</span></span>
<span><span>│  ├─ t=1   9.639 ns │ 11.51 ns │ 9.883 ns │ 9.893 ns │ 100     │ 51200</span></span>
<span><span>│  ├─ t=4   9.715 ns │ 163.3 ns │ 23.07 ns │ 35.82 ns │ 100     │ 12800</span></span>
<span><span>│  ├─ t=8   10 ns    │ 1.322 µs │ 17.81 ns │ 113.8 ns │ 104     │ 1664</span></span>
<span><span>│  ╰─ t=10  11.34 ns │ 916.3 ns │ 19.16 ns │ 154.1 ns │ 100     │ 3200</span></span>
<span><span>╰─ rw_lock           │          │          │          │         │</span></span>
<span><span>   ├─ t=1   17.2 ns  │ 17.86 ns │ 17.53 ns │ 17.46 ns │ 100     │ 25600</span></span>
<span><span>   ├─ t=4   17.2 ns  │ 319.9 ns │ 28.92 ns │ 96.77 ns │ 100     │ 6400</span></span>
<span><span>   ├─ t=8   16.53 ns │ 338.1 ns │ 17.88 ns │ 65.83 ns │ 104     │ 3328</span></span>
<span><span>   ╰─ t=10  15.89 ns │ 442.3 ns │ 168.5 ns │ 147.5 ns │ 100     │ 6400</span></span></code></pre>
<p>You can eyeball the <code>iters</code> column to check how contention from multi-threading
affects the function. The number of iterations decreases as the duration of each
iteration increases.</p>
<p>Sample count is always the next multiple of thread count, which is why 8 threads
produce 104 samples when sample count defaults to 100. This ensures at least 100
samples run under the same conditions: competing against 7 other threads.</p>
<p>To increase the chance for contention, all threads are <a href="https://github.com/nvzqz/divan/blob/v0.1.0/src/bench/mod.rs#L820-L828">synchronized immediately
before and
after</a> the
sampled section using a <a href="https://doc.rust-lang.org/std/sync/struct.Barrier.html"><code>Barrier</code></a>. This also prevents work done by other
threads before and after the sample from affecting the current thread’s
measurements.</p>
<p>The
<a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/threads.rs"><code>threads.rs</code></a>
example contains many multi-threaded benchmarks for <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc</code></a>, <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a>,
<a href="https://doc.rust-lang.org/std/thread/struct.ThreadId.html"><code>ThreadId</code></a>, and more:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--bench</span><span> </span><span>threads</span></span></code></pre>
<h3 id="cpu-timestamp">CPU Timestamp</h3>
<p>Divan uses the portable <a href="https://doc.rust-lang.org/std/time/struct.Instant.html"><code>Instant</code></a> timer by default. For extra precision, you
can instead use the CPU’s <a href="https://en.wikipedia.org/wiki/Time_Stamp_Counter">timestamp counter
(TSC)</a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>DIVAN_TIMER</span><span>=</span><span>tsc</span><span> </span><span>cargo</span><span> </span><span>bench</span><span> </span><span>...</span></span></code></pre>
<p>The TSC is architecture-specific:</p>
<ul>
<li>x86: <a href="https://doc.rust-lang.org/core/arch/x86/fn._rdtsc.html"><code>rdtsc</code></a> followed by <a href="https://doc.rust-lang.org/core/arch/x86/fn.__rdtscp.html"><code>rdtscp</code></a>,
with frequency obtained by measuring against <a href="https://doc.rust-lang.org/std/time/struct.Instant.html"><code>Instant</code></a></li>
<li>AArch64: <a href="https://developer.arm.com/documentation/ddi0595/2021-12/AArch64-Registers/CNTVCT-EL0--Counter-timer-Virtual-Count-register?lang=en"><code>cntvct_el0</code></a>
with frequency obtained from <a href="https://developer.arm.com/documentation/ddi0595/2021-12/AArch64-Registers/CNTFRQ-EL0--Counter-timer-Frequency-register?lang=en"><code>cntfrq_el0</code></a></li>
</ul>
<p>The <a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/time.rs"><code>time.rs</code></a>
example benchmarks TSC against <a href="https://doc.rust-lang.org/std/time/struct.Instant.html"><code>Instant</code></a> and <a href="https://doc.rust-lang.org/std/time/struct.SystemTime.html"><code>SystemTime</code></a>:</p>
<pre is:raw="" tabindex="0"><code><span><span>cargo</span><span> </span><span>bench</span><span> </span><span>-q</span><span> </span><span>-p</span><span> </span><span>examples</span><span> </span><span>--bench</span><span> </span><span>time</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>time                 fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>├─ duration_since             │          │          │          │         │</span></span>
<span><span>│  ├─ instant        3.393 ns │ 4.94 ns  │ 3.414 ns │ 3.444 ns │ 100     │ 204800</span></span>
<span><span>│  ├─ system_time    4.268 ns │ 4.512 ns │ 4.309 ns │ 4.336 ns │ 100     │ 102400</span></span>
<span><span>│  ╰─ tsc (aarch64)  0.021 ns │ 0.064 ns │ 0.034 ns │ 0.039 ns │ 100     │ 1638400</span></span>
<span><span>╰─ now                        │          │          │          │         │</span></span>
<span><span>   ├─ instant        18.18 ns │ 19.32 ns │ 18.34 ns │ 18.44 ns │ 100     │ 25600</span></span>
<span><span>   ├─ system_time    17.36 ns │ 18.34 ns │ 17.53 ns │ 17.62 ns │ 100     │ 25600</span></span>
<span><span>   ╰─ tsc (aarch64)  0.738 ns │ 0.779 ns │ 0.759 ns │ 0.755 ns │ 100     │ 409600</span></span></code></pre>
<p>Note that
<a href="https://github.com/nvzqz/divan/blob/v0.1.0/examples/benches/time.rs#L62"><code>time::duration_since</code></a>
for TSC is extremely fast because it is simply doing
<a href="https://doc.rust-lang.org/std/primitive.u64.html#method.saturating_sub"><code>u64::saturating_sub</code></a>,
since an optimized timing implementation would want to keep the value as TSC
units for as long as possible before dividing by the TSC frequency.</p>
<h2 id="design">Design</h2>
<p>I deliberately designed Divan with multiple considerations in mind, the most
important being <a href="#simpler-benchmarking">simpler benchmarking</a> and <a href="#getting-out-of-your-way">getting out of your way</a>.</p>
<h3 id="simpler-benchmarking">Simpler Benchmarking</h3>
<p>From the beginning, my goal was to make Rust benchmarking simple and easy. Divan
accomplishes this in many ways:</p>
<h4 id="register-benchmarks-anywhere">Register Benchmarks Anywhere</h4>
<p>Rust’s <a href="https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute"><code>#[test]</code></a>
attribute makes unit testing very simple and straightforward. Divan achieves the
same simplicity with
<a href="https://docs.rs/divan/0.1.0/divan/attr.bench.html"><code>#[divan::bench]</code></a> using
<a href="https://en.wikipedia.org/wiki/Linker_(computing)">linker</a> shenanigans to make benchmarked functions visible to
<a href="https://docs.rs/divan/0.1.0/divan/fn.main.html"><code>divan::main()</code></a>.</p>
<ul>
<li><a href="https://docs.rs/linkme"><code>linkme</code></a> provides
<a href="https://docs.rs/linkme/0.1.0/linkme/struct.DistributedSlice.html"><code>DistributedSlice</code></a>,
which coerces to <a href="https://doc.rust-lang.org/std/primitive.slice.html"><code>&amp;[T]</code></a> using link-time pseudo-symbols for the range of
start and end addresses.</li>
<li>For other platforms, Divan implements
<a href="https://github.com/nvzqz/divan/blob/v0.1.0/src/entry/list.rs#L6-L13"><code>EntryList</code></a>,
a thread-safe append-only linked list constructed before <a href="https://doc.rust-lang.org/stable/reference/crates-and-source-files.html#main-functions"><code>main</code></a> runs.</li>
</ul>
<p>Linker-based approaches to registration are limited to few platforms. Divan is
<a href="https://github.com/nvzqz/divan/actions/workflows/ci.yml">tested in CI</a> to work
on macOS, Linux, and Windows.</p>
<h4 id="bencher-by-value"><code>Bencher</code> By-Value</h4>
<p>When benchmarking with <a href="#benchmark-context">context</a>, the <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html"><code>Bencher</code></a> argument is
provided by-value instead of
<a href="https://docs.rs/criterion/0.5.1/criterion/struct.Criterion.html#method.bench_function">by-reference</a>.
Divan then leverages the <a href="https://rust-unofficial.github.io/patterns/patterns/creational/builder.html">builder
pattern</a>
to provide various benefits:</p>
<ul>
<li>Reduce cognitive load when reading and writing benchmarks.</li>
<li>Prevent accidental reuse by making <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html"><code>Bencher</code></a> no longer usable after you’ve
called a method like <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench"><code>bench</code></a>. If a benchmark method is not called, the
compiler will warn that the value must be used.</li>
<li>More powerful polymorphism with <a href="#benchmark-inputs">benchmark inputs</a>, where later operations
like <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.input_counter"><code>input_counter</code></a> and <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench_values"><code>bench_values</code></a> act on the input type. See <a href="#type-driven-apis">type-driven APIs</a>.</li>
</ul>
<h3 id="sample-size-scaling">Sample Size Scaling</h3>
<p>An operation may be too fast for the timer to measure. On Mac M1, the smallest
duration for <a href="https://doc.rust-lang.org/std/time/struct.Instant.html"><code>Instant</code></a> and <a href="#cpu-timestamp">CPU timestamp</a> is 41 nanoseconds, which cannot
accurately measure an addition that takes 1 nanosecond.</p>
<p>Divan overcomes timer precision by using <em>ν(s)</em> many iterations per sample,
where <em>t(s)</em> is at least 100&nbsp;×&nbsp;timer precision. I chose 100 because it
is easy to reason about and produces high quality results. This is calculated by
re-timing each <em>t(2&nbsp;×&nbsp;s)</em> so that the final result is not solely
dependent on the initial duration.</p>
<p><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ν</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>ν</mi><mo stretchy="false">(</mo><mn>2</mn><mo>×</mo><mi>s</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><mi>t</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mn>100</mn><mo>×</mo><msub><mi>τ</mi><mtext>precision</mtext></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>s</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><mi>t</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>100</mn><mo>×</mo><msub><mi>τ</mi><mtext>precision</mtext></msub></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
\nu(s) =
\begin{cases}
\nu(2 \times s)
&amp; \text{if } t(s) &lt; 100 \times \tau_{\textrm{precision}} \\
s
&amp; \text{if } t(s) \ge 100 \times \tau_{\textrm{precision}}
\end{cases}
</annotation></semantics></math></span></span></p><p>If you don’t consider that <em>t(s)</em> re-times, and instead assume <em>t(s)</em> returns a
consistent predictable value, then this can be reasoned about as:</p>
<p><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ν</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>≈</mo><msup><mn>2</mn><mfrac><mrow><mn>100</mn><mo>×</mo><msub><mi>τ</mi><mtext>precision</mtext></msub></mrow><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow></mfrac></msup></mrow><annotation encoding="application/x-tex">
\nu(s) \approx 2^{\frac{100 \times \tau_{\textrm{precision}}}{t(s)}}
</annotation></semantics></math></span></span></p><h4 id="robust-benchmarking-paper">Robust Benchmarking Paper</h4>
<p>I was inspired to scale sample size based on timer precision because of the
paper <a href="https://arxiv.org/abs/1608.04295">Robust Benchmarking in Noisy
Environments</a> by <a href="https://github.com/jiahao">Jiahao
Chen</a> and <a href="https://github.com/jrevels">Jarrett
Revels</a>.</p>
<p>This paper concludes with the description of <em>ν(t)</em>, an oracle function that
maps from the theoretical minimum execution time to the number of iterations to
overcome timer precision. They found the generalized logistic function to work
well:</p>
<p><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ν</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">⌊</mo><mn>1</mn><mo>+</mo><mfrac><mrow><mfrac><msub><mi>τ</mi><mtext>accuracy</mtext></msub><msub><mi>τ</mi><mtext>precision</mtext></msub></mfrac><mo>−</mo><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mi>a</mi><mo>×</mo><mrow><mo fence="true">(</mo><mi>t</mi><mo>−</mo><mi>b</mi><mo>×</mo><msub><mi>τ</mi><mtext>accuracy</mtext></msub><mo fence="true">)</mo></mrow></mrow></msup></mrow></mfrac><mo fence="true">⌋</mo></mrow></mrow><annotation encoding="application/x-tex">
\nu(t) = \left\lfloor
1 +
\frac{
\frac{
\tau_{\textrm{accuracy}}
}{
\tau_{\textrm{precision}}
}
- 1
}{
1 + e^{a \times \left(t - b \times \tau_{\textrm{accuracy}}\right)}
}
\right\rfloor
</annotation></semantics></math></span></span></p><p>…where reasonable values of <em>a</em> and <em>b</em> are approximately:</p>
<p><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.25em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0.005</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><mi>a</mi><mo>×</mo><msub><mi>τ</mi><mtext>precision</mtext></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><mn>0.02</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0.4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><mi>b</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><mn>0.6</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{aligned}
0.005 &amp; &lt; a \times \tau_{\textrm{precision}} &amp;&amp; &lt; 0.02 \\
0.4 &amp; &lt; b &amp;&amp; &lt; 0.6
\end{aligned}
</annotation></semantics></math></span></span></p><p>This paper’s approach is significantly more complex than that of Divan. Although
simpler, Divan achieves similarly meaningful results by the commonality of
relying on timer precision:</p>
<p><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ν</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>≈</mo><msup><mn>2</mn><mfrac><mrow><mn>100</mn><mo>×</mo><msub><mi>τ</mi><mtext>precision</mtext></msub></mrow><mi>t</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">
\nu(t) \approx 2^{\frac{100 \times \tau_{\textrm{precision}}}{t}}
</annotation></semantics></math></span></span></p><p>Divan does not use timer accuracy because it wasn’t clear how accuracy can be
obtained without a more accurate reference timer, when <a href="https://doc.rust-lang.org/std/time/struct.Instant.html"><code>Instant</code></a> is usually
implemented with the most accurate timer. I’m open to making sample size scaling
smarter, but the current approach works well enough.</p>
<p>This paper also concludes that the smallest duration is the most meaningful
number, because any extra time spent can be attributed to error due to poor
performance conditions, such as being unscheduled by the operating system. I
agree 99.999% of the time, except for when you want to <a href="#measure-thread-contention">measure thread
contention</a>.</p>
<h3 id="getting-out-of-your-way">Getting Out of Your Way</h3>
<p>Divan allows you to focus on what’s most important: your code. It is designed to
be difficult to misuse and employs various techniques to reduce its timing
footprint.</p>
<h4 id="type-driven-apis">Type-Driven APIs</h4>
<p>When benchmarking with <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html"><code>Bencher</code></a>, you cannot call any of the
<a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench_values"><code>bench_values</code></a>/<a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench_refs"><code>bench_refs</code></a>/<a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.input_counter"><code>input_counter</code></a> functions until you provide
<a href="#benchmark-inputs">benchmark inputs</a>. Likewise, the standard <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.bench"><code>bench</code></a> function cannot be called
if you have already provided inputs.</p>
<p>This is made possible by the fact that the <a href="https://doc.rust-lang.org/std/primitive.unit.html"><code>()</code></a> type does not implement the
<a href="https://doc.rust-lang.org/std/ops/trait.Fn.html"><code>Fn</code></a> family of traits. <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html"><code>Bencher</code></a> uses <a href="https://doc.rust-lang.org/std/primitive.unit.html"><code>()</code></a> as the default for a generic
type until <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html#method.with_inputs"><code>with_inputs</code></a> is called, at which point <a href="https://docs.rs/divan/0.1.0/divan/struct.Bencher.html"><code>Bencher</code></a> uses the
provided <a href="https://doc.rust-lang.org/std/ops/trait.Fn.html"><code>Fn</code></a> type.</p>
<h4 id="deferred-drop">Deferred Drop</h4>
<p>When values are returned by the benchmarked function, <a href="https://doc.rust-lang.org/std/ops/trait.Drop.html"><code>Drop</code></a> destructors
will not run until after the sample is recorded. This is achieved by storing
results in a buffer, which will be dropped after the sample.</p>
<p>If buffering is not done carefully, it could affect the accuracy of benchmarks
by accidentally also <a href="https://github.com/bheisler/criterion.rs/blob/0.5.1/src/bencher.rs#L267-L269">timing buffer capacity checks and
reallocation</a>.
To ensure accurate benchmarks, Divan implements this <em>very efficiently</em> by
<a href="https://github.com/nvzqz/divan/blob/v0.1.0/src/bench/mod.rs#L904-L929">iterating over a preallocated
slice</a> of
<a href="https://doc.rust-lang.org/std/mem/union.MaybeUninit.html"><code>MaybeUninit</code></a> “drop slots” to store outputs in.</p>
<p>Only one of the following functions will benchmark <a href="https://doc.rust-lang.org/std/collections/struct.LinkedList.html"><code>LinkedList</code></a> deallocation
time:</p>
<pre is:raw="" tabindex="0"><code><span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>defer</span><span>()</span><span> </span><span>-&gt;</span><span> std</span><span>::</span><span>collections</span><span>::</span><span>LinkedList</span><span>&lt;</span><span>i32</span><span>&gt;</span><span> </span><span>{</span></span>
<span><span>    </span><span>(</span><span>0</span><span>..</span><span>1000</span><span>)</span><span>.</span><span>collect</span><span>()</span></span>
<span><span>}</span></span>
<span></span>
<span><span>#[</span><span>divan</span><span>::</span><span>bench</span><span>]</span></span>
<span><span>fn</span><span> </span><span>drop</span><span>()</span><span> </span><span>{</span></span>
<span><span>    // Benchmarks can be implemented in terms of each other.</span></span>
<span><span>    _ </span><span>=</span><span> divan</span><span>::</span><span>black_box</span><span>(</span><span>defer</span><span>());</span></span>
<span><span>}</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>scratch   fastest  │ slowest  │ median   │ mean     │ samples │ iters</span></span>
<span><span>├─ defer  26.12 µs │ 31.87 µs │ 29.56 µs │ 30.13 µs │ 100     │ 100</span></span>
<span><span>╰─ drop   65.37 µs │ 75.2 µs  │ 69.43 µs │ 68.3 µs  │ 100     │ 100</span></span></code></pre>
<p>Note that if <a href="https://doc.rust-lang.org/std/mem/fn.needs_drop.html"><code>needs_drop</code></a> for the output is false (e.g. <a href="https://doc.rust-lang.org/std/primitive.unit.html"><code>()</code></a>, <a href="https://doc.rust-lang.org/std/primitive.i32.html"><code>i32</code></a>,
<a href="https://doc.rust-lang.org/std/primitive.str.html"><code>&amp;'static str</code></a>), Divan <strong>will not allocate</strong> storage for deferring
output drop. Likewise if output is a <a href="https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts">zero sized type
(ZST)</a>.</p>
<p><a href="#benchmark-inputs">Benchmark inputs</a> are stored <a href="https://github.com/nvzqz/divan/blob/v0.1.0/src/bench/defer.rs#L105-L124">together contiguously with outputs in
memory</a>.
The resulting access pattern is monotonically increasing, which is easily
prefetched into cache.</p>
<h4 id="efficient-enums">Efficient Enums</h4>
<p>Divan internally uses an
<a href="https://github.com/nvzqz/divan/blob/v0.1.0/src/time/timestamp/mod.rs#L42-L56"><code>UntaggedTimestamp</code></a>
<a href="https://doc.rust-lang.org/std/keyword.union.html"><code>union</code></a>, which can be either an <a href="https://doc.rust-lang.org/std/time/struct.Instant.html"><code>Instant</code></a> or a <a href="#cpu-timestamp">CPU timestamp</a>. The variant
is kept track of by an external
<a href="https://github.com/nvzqz/divan/blob/v0.1.0/src/time/timer.rs#L165-L174"><code>TimerKind</code></a>
instance, unlike a conventional <a href="https://doc.rust-lang.org/std/keyword.enum.html"><code>enum</code></a> which internally stores the variant
tag. Externally storing the variant tag is a micro-optimization to prevent extra
time spent on storing the timestamp during the sample.</p>
<h2 id="future-plans">Future Plans</h2>
<p>Divan has many opportunities for features. Future versions will have:</p>
<ul>
<li>Better output options:
<ul>
<li>HTML output with interactive graphs. Hovering over a graph will reveal
data points.</li>
<li>Machine-readable output like JSON and CSV.</li>
<li>Colored terminal output with customizable themes.</li>
</ul>
</li>
<li>Improved statistics:
<ul>
<li>Baseline comparison.</li>
<li>Sample variance.</li>
</ul>
</li>
<li>More profiling tools:
<ul>
<li><a href="https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html"><code>GlobalAlloc</code></a> profiling similar to <a href="https://docs.rs/dhat"><code>dhat-rs</code></a>,
but with minimal performance impact.</li>
<li>Custom profiler plugins like <a href="https://docs.rs/pprof"><code>pprof</code></a>.</li>
</ul>
</li>
<li>Async <a href="https://doc.rust-lang.org/std/future/trait.Future.html"><code>Future</code></a> benchmarking to measure server and client performance.</li>
<li>Registering benchmarks without attribute macros to support more platforms like
WebAssembly.</li>
<li>Runtime argument values, as an alternative to const generics. Const parameters
are great for benchmarking different array sizes, but they have <a href="https://github.com/rust-lang/rust/issues/95174">limited type
support</a> and greatly increase
benchmark compile times.</li>
</ul>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>I especially want to thank <a href="https://github.com/thomcc">Thom Chiovoloni</a> for his
benchmarking advice over many blue moons, and for the <a href="#cpu-timestamp">CPU timestamp</a>
implementation. Thom will also be helping me maintain Divan!</p>
<p>Thanks also to the folks who provided feedback on drafts of this post: <a href="https://chacin.dev/">Carlos
Chacin</a>, <a href="https://predr.ag/">Predrag Gruevski</a>, <a href="https://tim.mcnamara.nz/">Tim
McNamara</a>, <a href="https://benw.is/">Ben Wis</a>, <a href="https://github.com/ramonacat">Ramona
Łuczkiewicz</a>, <a href="https://coreyja.com/">Corey
Alexander</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Now that you know how to measure performance with Divan, I invite you to try it
out in your own Rust projects. I’m eagerly curious to know what insights it will
reveal to the community!</p>
<p>Please get involved and help make Divan the standard benchmarking tool for Rust:</p>
<ul>
<li><a href="https://github.com/sponsors/nvzqz">Sponsor regularly</a> or <a href="https://paypal.me/nvzqz">donate
once</a> 💖</li>
<li>Implement or collaborate on my <a href="#future-plans">future plans</a> 🚀</li>
<li>Tell your friends and colleagues about <a href="https://github.com/nvzqz/divan">Divan</a>
🗣</li>
</ul>
<p>If you enjoyed this post, <a href="https://buttondown.email/nikolai">subscribe to my
newsletter</a>.</p>
<h2 id="discuss">Discuss</h2>
<ul>
<li><a href="https://www.reddit.com/r/rust/comments/1703xwe/announcing_divan_fast_and_simple_benchmarking_for/">Reddit</a></li>
<li><a href="https://news.ycombinator.com/item?id=37773599">Hacker News</a></li>
<li><a href="https://lobste.rs/s/etnchk/divan_fast_simple_benchmarking_for_rust">Lobsters</a></li>
<li><a href="https://twitter.com/NikolaiVazquez/status/1709732051115442529">Twitter</a></li>
<li><a href="https://hachyderm.io/@nikolai/111179659061831881">Mastodon</a></li>
</ul></div></div>]]></description>
        </item>
    </channel>
</rss>