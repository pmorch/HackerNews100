<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 11 Jul 2024 13:30:08 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Microsoft killed my online life after I called Gaza (163 pts)]]></title>
            <link>https://www.bbc.com/news/articles/cger582weplo</link>
            <guid>40935971</guid>
            <pubDate>Thu, 11 Jul 2024 12:31:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/articles/cger582weplo">https://www.bbc.com/news/articles/cger582weplo</a>, See on <a href="https://news.ycombinator.com/item?id=40935971">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div data-testid="byline" data-component="byline-block"><p><time>14 hours ago</time></p><div><p><span data-testid="byline-name">By&nbsp;<!-- -->Mohamed Shalaby and Joe Tidy<!-- -->,&nbsp;<!-- --></span><span>BBC World Service</span></p></div></div><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/3a75/live/9e6c73f0-3e9d-11ef-8cda-f95c899bb5f8.jpg.webp" loading="eager" alt="Getty Images man charging his phone in a charging station in gaza strip "><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>The Israeli military campaign has badly affected internet and mobile connectivity in Gaza<!-- --></figcaption></p></figure><div data-component="text-block"><p><b id="palestinians-calling-home-to-gaza-on-skype-have-had-their-digital-lives-destroyed,-after-microsoft-closed-their-email-accounts-without-warning.">Palestinians calling home to Gaza on Skype have had their digital lives destroyed, after Microsoft closed their email accounts without warning. <!-- --></b></p><p>BBC News has spoken to 20 Palestinians living abroad who say Microsoft, which owns the voice and video chat app, kicked them out of their accounts. The total number affected is thought to be much higher. <!-- --></p><p>In some cases, these email accounts are more than 15 years old and the users have no way to retrieve emails, contacts or memories. <!-- --></p><p>Microsoft says they violated its terms of service - but will not say how - and the decision is final.<!-- --></p></div><p>The Gazans say they have no links to Hamas - designated as a terrorist organisation by some Western countries, including the US, where Microsoft is headquartered - and accuse the technology giant, the most valuable company in the world, of persecuting them unfairly.<!-- --></p><p data-component="subheadline-block"><h2>Switched off<!-- --></h2></p><div data-component="text-block"><p>Salah Elsadi is living in the US and, like many Palestinians abroad, was using Skype to call his wife, children and parents on their mobile phones in Gaza.<!-- --></p><p>The internet is frequently disrupted or switched off because of the Israeli military campaign - and standard international calls are very expensive. <!-- --></p><p>With a paid Skype subscription, it is possible to call mobiles in Gaza cheaply - and while the internet is down - so it has become a lifeline to many Palestinians. <!-- --></p><p>But in April, Mr Elsadi, like many others, was kicked out of his account - and all services linked to his Microsoft Hotmail account. <!-- --></p></div><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/5a3f/live/d1877990-3ea4-11ef-96a8-e710c6bfc866.png.webp" loading="lazy" alt="Salah Elsadi "></p></div><p data-component="caption-block"><figcaption>Salah Elsadi says he has been locked out of life online<!-- --></figcaption></p></figure><div data-component="text-block"><p>He has missed out on job offers and can no longer access his bank accounts, which are tied to his Hotmail account, he says.<!-- --></p><p>"I've had this Hotmail for 15 years," Mr Elsadi says.<!-- --></p><p>"They banned me for no reason, saying I have violated their terms - what terms? Tell me. <!-- --></p><p>"I've filled out about 50 forms and called them many many times." <!-- --></p><p>Others have complained on social media of similar treatment. <!-- --></p><p>Some fear they are being wrongly accused of being a part of Hamas.<!-- --></p></div><p data-component="subheadline-block"><h2>'Fraudulent activity'<!-- --></h2></p><div data-component="text-block"><p>“We are civilians with no political background who just wanted to check on our families," Eiad Hametto says. He was calling his family from Saudi Arabia.<!-- --></p><p>"They’ve suspended my email account that I’ve had for nearly 20 years.<!-- --></p><p>"It was connected to all my work. <!-- --></p><p>"They killed my life online.”<!-- --></p><p>Microsoft did not respond directly to the accusation these people have been labelled as Hamas - but a spokesperson said it did not block calls or ban users based on calling region or destination. <!-- --></p><p>"Blocking in Skype can occur in response to suspected fraudulent activity," they said without elaborating. And users could appeal.<!-- --></p></div><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/ad32/live/565fa320-3eac-11ef-b74c-bb483a802c97.jpg.webp" loading="lazy" alt="Khalid Obaied"></p></div><p data-component="caption-block"><figcaption>Khalid Obaied was using Skype to call home to his wife and child from Belgium<!-- --></figcaption></p></figure><div data-component="text-block"><p>But many of those BBC News has spoken to say they have tried many times and are receiving the same blanket response.<!-- --></p><p>One, Khalid Obaied, has lost faith with Microsoft. <!-- --></p><p>"I don't trust them any more," he says. <!-- --></p><p>"I paid for a package to make phone calls - then, after 10 days, they ban me for no reason.<!-- --></p><p>"They have never provided a reason. <!-- --></p><p>"That means it's only because I’m a Palestinian calling Gaza.”<!-- --></p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[If AI chatbots are the future, I hate it (124 pts)]]></title>
            <link>https://www.jeffgeerling.com/blog/2024/if-ai-chatbots-are-future-i-hate-it</link>
            <guid>40935576</guid>
            <pubDate>Thu, 11 Jul 2024 11:41:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeffgeerling.com/blog/2024/if-ai-chatbots-are-future-i-hate-it">https://www.jeffgeerling.com/blog/2024/if-ai-chatbots-are-future-i-hate-it</a>, See on <a href="https://news.ycombinator.com/item?id=40935576">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="block-jeffgeerling-system-main">
          
<article>

  

      
  
  <div>
    
            <div><p><img width="500" height="auto" src="https://www.jeffgeerling.com/sites/default/files/images/speedtest-graph-att-dropoff.png" alt="AT&amp;T Fiber Internet - speedtest graph"></p>

<p>About a week ago, my home Internet (AT&amp;T Fiber) went from the ~1 Gbps I pay for down to about 100 Mbps (<a href="https://www.jeffgeerling.com/blog/2021/monitor-your-internet-raspberry-pi">see how I monitor my home Internet with a Pi</a>). It wasn't too inconvenient, and I considered waiting it out to see if the speed recovered at some point, because latency was fine.</p>

<p>But as you can see around 7/7 on that graph, the 100 Mbps went down to about <em>eight</em>, and that's the point where my wife starts noticing how slow the Internet is. Action level.</p>

<p>So I fired up AT&amp;T's support chat. I'm a programmer, I can usually find ways around the wily ways of chatbots.</p>

<p>Except AT&amp;T's AI-powered chatbot seems to have a fiendish tendency to equate 'WiFi' with 'Internet', no doubt due to so many people thinking they are one and the same.</p>

<p><img width="500" height="auto" src="https://www.jeffgeerling.com/sites/default/files/images/att-chatbot-slow-internet-not-wifi.png" alt="ATT Chatbot - Slow Internet not WiFi"></p>

<p>We were stuck in that loop for about 5 minutes.</p>

<blockquote>
  <p>It looks like you're having trouble with your WiFi.</p>
  
  <p><em>No.</em></p>
</blockquote>

<p>After working a few different angles, I finally 'spammed 0'<sup id="fnref:olddays"><a href="#fn:olddays" role="doc-noteref">1</a></sup> by entering some variation of 'connect me to a support rep'.</p>

<p><img width="300" height="auto" src="https://www.jeffgeerling.com/sites/default/files/images/att-chatbot-connect-to-support-rep.png" alt="ATT Chatbot - connect me to support rep"></p>

<p>I'll cut to the chase—after repeating some variation of that about 8 times, eventually I got queued up in the 20 minute line to a human support rep.</p>

<p>Unfortunately for me, the human support rep, like so many in the industry, promptly ignored the data I provided in my first chat message to him<sup id="fnref:message"><a href="#fn:message" role="doc-noteref">2</a></sup>, and told me switching WiFi channels on the device (on which WiFi is currently disabled completely) would solve my issue. <em>At no cost.</em></p>

<p><img width="300" height="auto" src="https://www.jeffgeerling.com/sites/default/files/images/att-chat-support-wifi.png" alt="ATT Support Rep - WiFi is not the problem"></p>

<p>Maybe I should welcome our AI overlords?</p>

</div>
      

          <div id="block-related-content">
  
      <h2>Further reading</h2>
    
  
</div>
    
    
      
  

      

  </div>
      
  
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Typeset of Wall·E (2018) (109 pts)]]></title>
            <link>https://typesetinthefuture.com/2018/12/04/walle/</link>
            <guid>40934924</guid>
            <pubDate>Thu, 11 Jul 2024 09:28:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://typesetinthefuture.com/2018/12/04/walle/">https://typesetinthefuture.com/2018/12/04/walle/</a>, See on <a href="https://news.ycombinator.com/item?id=40934924">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<p>From a trash-filled Earth to the futuristic <i>Axiom</i> and back again, <i>WALL·E</i> is a finely crafted balance between consumerist dystopia and sixties space-race optimism. Please join me, then, for a detailed dive&nbsp;into the uniquely robotic future of a remarkably human film, as seen through the eyes of its eponymous hero, WALL·E.</p>

<p><em>[This article is from the&nbsp;</em><a href="https://typesetinthefuture.com/book/">Typeset in the Future book</a><i>, which is really very good&nbsp;and you’re&nbsp;probably going to want to&nbsp;</i><a href="https://www.amazon.com/gp/product/1419727141/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=titf0f-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1419727141&amp;linkId=b321076a05a18b3ffdfd5fd8924ad645">buy a copy of</a><i>. If you’d rather read the article first, don’t worry—I’ll remind you again later on.]</i></p>
<p>Before we get started, there is an important detail we must clear up. Our hero’s name is not, as you might think, WALL-E. Moreover, it <i>definitely</i> isn’t WALL•E. His name is <em>WALL·E</em>, and that dot is an <a href="https://en.wikipedia.org/wiki/Interpunct">interpunct</a>, not a hyphen or a bullet.</p>
<figure data-shortcode="caption" id="attachment_1492" aria-describedby="caption-attachment-1492"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_02_37_2_full.jpg"><img src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_02_37_2.jpg?w=1000" alt="walle_0_02_37_2" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_02_37_2.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_02_37_2.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_02_37_2.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1492">WALL·E’s front plate, clearly showing his interpunct.</figcaption></figure>
<p>An interpunct is, of course, a vertically centered dot originally used to separate words in Latin and ancient Greek. (Spaces weren’t invented until several centuries later.) The interpunct is still in use today—it’s the official decimal point in British currency (£9·99), and is used to represent the dot product of two vectors in mathematics (x · y). Most relevantly, it’s used in Japanese to separate titles, names, and positions, as in “課長補佐 · 鈴木” (Assistant Section Head · Suzuki). It is therefore entirely appropriate as the separator in WALL·E, which is short for Waste Allocation Load Lifter · Earth Class.</p>
<p>The bold extended typeface seen on WALL·E’s front plate is Gunship, designed by Dan Zadorozny, one of the unsung heroes of modern sci-fi type design. Dan is an amateur type designer from Texas whose <a href="http://iconian.com/">Iconian Fonts website</a> features more than six hundred free hand-crafted typefaces, many of which have been used by sci-fi movies, TV shows, and book designers.</p>
<p>In addition to WALL·E’s front plate, Gunship is seen on Earth and aboard the <i>Axiom</i>, the flagship spacecraft of megacorporation Buy n Large (BnL, for short), most notably for robot-facing wall and door typography. Its upper- and lowercase variants include different combinations of cutouts and curve orientations, giving designers flexibility when crafting robot signage. (Strictly speaking, this means that our hero’s name, correctly capitalized, is “waLL·e,” with the interpunct as a further customization—Gunship’s own interpunct is rectangular.)</p>
<figure data-shortcode="caption" id="attachment_1494" aria-describedby="caption-attachment-1494"><img src="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_lowercase.png?w=1000" alt="sampler_gunship_lowercase" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_lowercase.png 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_lowercase.png?w=150&amp;h=15 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_lowercase.png?w=300&amp;h=30 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1494">Gunship (lowercase characters).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1495" aria-describedby="caption-attachment-1495"><img src="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_uppercase.png?w=1000" alt="sampler_gunship_uppercase" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_uppercase.png 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_uppercase.png?w=150&amp;h=15 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_gunship_uppercase.png?w=300&amp;h=30 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1495">Gunship (uppercase characters).</figcaption></figure>
<p>The movie begins with an insight into WALL·E’s typical workday, which is spent building gigantic piles of trash by compacting waste into neat, stackable cubes. After a hard day’s crushing, we follow him on his journey home, learning some useful exposition along the way. This includes a bank of electronic ads for BnL, promoting everything from liquid air to quadruple-patty burgers. Common throughout these ads is an insistence on immediate consumption—“DRINK NOW,” “HUNGRY NOW,” “RUN NOW,” “CONSUME.” And if consuming a product once isn’t enough, you can repeat the experience a second time—the signage seen below includes ads for both “100% Reused Food” and “Regurgi-Shake: Twice the Flavor.”</p>
<p><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02.jpg?w=1000" alt="walle_0_04_02" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a></p>
<p>We’ve seen how corporate mergers, such as <a href="https://typesetinthefuture.com/2014/12/01/alien/"><i>Alien</i>’s Weylan Yutani</a> and <a href="https://typesetinthefuture.com/2016/06/19/bladerunner/"><i>Blade Runner</i>’s Shimata-Dominguez</a>, are an inevitability in sci-fi futures. <i>WALL·E</i>’s Buy n Large is similar, except that this company was formed by a merger between a frozen yogurt manufacturer (Buy Yogurt) and a maker of suits for the larger gentleman (Large Industries). Clearly a marriage made in heaven, this corporate combination led to a rapid expansion, culminating with Buy n Large owning every company and government in the world.</p>
<p>The Buy n Large logo is an over-italicized customization of Futura Extra Bold Oblique, as demonstrated by a super-distinctive capital G in the BUY N LARGE BANK logotype that WALL·E passes early in the movie.</p>
<figure data-shortcode="caption" id="attachment_1500" aria-describedby="caption-attachment-1500"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_futura_extra_bold_oblique.png?w=1000" alt="sampler_futura_extra_bold_oblique" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_futura_extra_bold_oblique.png 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_futura_extra_bold_oblique.png?w=150&amp;h=15 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_futura_extra_bold_oblique.png?w=300&amp;h=30 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1500">Futura Pro Extra Bold Oblique, released by Berthold. Original Futura design by Paul Renner.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1498" aria-describedby="caption-attachment-1498"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_54_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_54.jpg?w=1000" alt="walle_0_03_54" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_54.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_54.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_54.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1498">“BUY N LARGE BANK” signage, set in Futura Extra Bold Oblique, showing its distinctive capital G.</figcaption></figure>
<p>If the red-and-blue logo feels familiar, it shouldn’t be a surprise—it’s because BnL uses the exact same typeface and color scheme as real-world retail giant <a href="https://en.wikipedia.org/wiki/Costco">Costco Wholesale Corporation</a>.</p>
<figure data-shortcode="caption" id="attachment_1499" aria-describedby="caption-attachment-1499"><a href="https://en.m.wikipedia.org/wiki/File:Costco_Wholesale_logo_2010-10-26.svg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_costco_wholesale_logo.png?w=1000" alt="walle_costco_wholesale_logo" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_costco_wholesale_logo.png 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_costco_wholesale_logo.png?w=150&amp;h=45 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_costco_wholesale_logo.png?w=300&amp;h=90 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1499">The Costco Wholesale Corporation logo, in Futura Extra Bold Oblique.</figcaption></figure>
<p>There’s another curious BnL subsidiary to be found among the city’s electronic ads, on a beaten-up billboard advertising “Eggman Movers (Creating More Space).” This company is an Easter-egg reference to WALL·E production designer <a href="https://en.wikipedia.org/wiki/Ralph_Eggleston">Ralph “Eggman” Eggleston</a>, and it shares the name of the moving company from 1995’s <em><a href="https://en.wikipedia.org/wiki/Toy_Story">Toy Story</a></em>, for which Ralph was art director.</p>
<figure data-shortcode="caption" id="attachment_1503" aria-describedby="caption-attachment-1503"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_59_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_591.jpg?w=1000" alt="walle_0_03_59" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_591.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_591.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_591.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1503">Eggman Movers, from 2008’s <em>WALL·E</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1502" aria-describedby="caption-attachment-1502"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_1_08_32_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_1_08_32.jpg?w=1000" alt="toy_story_1_08_32" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_1_08_32.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_1_08_32.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_1_08_32.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1502">Eggman Movers, from 1995’s <em>Toy Story</em>.</figcaption></figure>
<p>The presence of a Buy n Large–branded bank means Buy n Large–branded banknotes, which are unusual for being strewn across the floor of the deserted city. If you look closely at the notes, you’ll see that some of them have “10<sup>6</sup>” in the corner, and are marked “ten million dollars.” Others look to be marked “99<sup>6</sup>,” suggesting that Buy n Large stores continued the classic $9.99 pricing trick even after adding six zeroes to the end of everything. (Indeed, it says much about the Buy n Large approach to consumerism that it prints notes with the 99s already included, to avoid customers having to receive any change.)</p>
<figure data-shortcode="caption" id="attachment_1504" aria-describedby="caption-attachment-1504"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_52_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_52.jpg?w=1000" alt="walle_0_03_52" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_52.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_52.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_03_52.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1504">$10 million and $99 million bills lie abandoned on the ground near a Buy n Large Bank.</figcaption></figure>
<p>We discover later in the movie that the <em>Axiom</em> left Earth in the year 2105. This suggests that in the preceding years of overconsumption there was a period of severe hyperinflation, making a $10 million note a necessity. This is not without historical precedent—<a href="https://en.wikipedia.org/wiki/Hyperinflation_in_Zimbabwe">Earth’s most extreme example of hyperinflation</a> occurred in Zimbabwe in November 2008, just a few months after <em>WALL·E</em>’s release, when the inflation rate for the Zimbabwe dollar reached a staggering 79,600,000,000 percent per month. At this point, a single US dollar was equivalent to 2,621,984,228 Zimbabwe dollars.&nbsp;The largest-denomination note printed during this time was the $100 trillion note, which makes Buy n Large’s $10 million bill seem like small change by comparison.</p>
<figure data-shortcode="caption" id="attachment_1505" aria-describedby="caption-attachment-1505"><a href="https://commons.wikimedia.org/wiki/File:Zimbabwe_$100_trillion_2009_Obverse.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_one_hundred_trilion_dollars.jpg?w=1000" alt="walle_one_hundred_trilion_dollars" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_one_hundred_trilion_dollars.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_one_hundred_trilion_dollars.jpg?w=150&amp;h=74 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_one_hundred_trilion_dollars.jpg?w=300&amp;h=149 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1505">A $100 trillion bill from the Reserve Bank of Zimbabwe, showing some impressively pointy Futura.</figcaption></figure>
<p>WALL·E leaves the bank behind and continues his journey via the disused tracks of the BnL Transit monorail system. In the absence of working trains, these concrete tracks provide a convenient route through the middle of the deserted city.</p>
<figure data-shortcode="caption" id="attachment_1506" aria-describedby="caption-attachment-1506"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_12_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_12.jpg?w=1000" alt="walle_0_04_12" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_12.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_12.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_12.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1506">WALL·E climbs an escalator&nbsp;to a BnL Transit monorail station.</figcaption></figure>
<p>Despite their association with aspirational futures, monorails have been failing to become a global mass-transit system for almost two hundred years. <a href="https://en.wikipedia.org/wiki/History_of_monorail">The first passenger monorail</a> opened in 1825 in Cheshunt, England, primarily to transport bricks, though it was also utilized for transporting people, mostly for novelty purposes. Unlike the top-of-rail system seen in <em>WALL·E</em>, Cheshunt’s monorail consisted of carriages suspended beneath an overhead track, and was powered by a single horse.</p>
<p>The Cheshunt style of monorail—with suspended carriages hanging beneath a single rail—was also adopted by the <a href="https://en.wikipedia.org/wiki/Wuppertal_Suspension_Railway">Wuppertal Schwebebahn</a>, which began operation along the Wupper River in Wuppertal, Germany, in 1901. The Wuppertal’s suspended system is still in operation today, carrying more than sixty-five thousand passengers on an average weekday.</p>
<figure data-shortcode="caption" id="attachment_1507" aria-describedby="caption-attachment-1507"><a href="https://commons.wikimedia.org/wiki/File:Wuppertaler_Schwebebahn_c1913_LOC_03961u.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_wuppertal_monorail.jpg?w=1000" alt="walle_wuppertal_monorail" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_wuppertal_monorail.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_wuppertal_monorail.jpg?w=150&amp;h=111 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_wuppertal_monorail.jpg?w=300&amp;h=223 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1507">A Wuppertal Schwebebahn monorail train arrives at the Werther Brücke station in Wuppertal, 1913.</figcaption></figure>
<p>The monorail seen in <em>WALL·E</em> is of the style popularized by Swedish entrepreneur <a href="https://en.wikipedia.org/wiki/Axel_Wenner-Gren">Axel Wenner-Gren</a>, whose prototype ALWEG (<strong>A</strong>xel <strong>L</strong>ennart <strong>We</strong>nner-<strong>G</strong>ren) monorail system came to the attention of Walt Disney after a family visit to Wuppertal gave him monorail fever. Disney saw the potential for a monorail attraction at his new Disneyland theme park in California, and the Disneyland-ALWEG Monorail System opened in June 1959. The system remains in operation today (under the name Disneyland Monorail), and there are similar attractions at Disneyland Tokyo and Walt Disney World in Florida. In total, Disney monorails have transported more than one billion passengers into an aspirational transportational future.</p>
<figure data-shortcode="caption" id="attachment_1508" aria-describedby="caption-attachment-1508"><a href="https://en.wikipedia.org/wiki/File:6308-DisneyLandMonoRail-ParkStation.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_tomorrowland_1963.jpg?w=1000" alt="walle_disneyland_alweg_monorail_tomorrowland_1963" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_tomorrowland_1963.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_tomorrowland_1963.jpg?w=150&amp;h=94 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_tomorrowland_1963.jpg?w=300&amp;h=188 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1508">The Disneyland-ALWEG Monorail System at Tomorrowland station, 1963.&nbsp;<a href="https://en.wikipedia.org/wiki/File:6308-DisneyLandMonoRail-ParkStation.jpg">Photograph by Robert J. Boser, CC BY 3.0</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1509" aria-describedby="caption-attachment-1509"><a href="https://en.wikipedia.org/wiki/File:6308-DisneyLandHotelMonorailStation.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_disneyland_hotel_1963.jpg?w=1000" alt="walle_disneyland_alweg_monorail_disneyland_hotel_1963" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_disneyland_hotel_1963.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_disneyland_hotel_1963.jpg?w=150&amp;h=98 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_disneyland_alweg_monorail_disneyland_hotel_1963.jpg?w=300&amp;h=197 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1509">The Disneyland-ALWEG Monorail System at Disneyland Hotel station, 1963.&nbsp;<a href="https://en.wikipedia.org/wiki/File:6308-DisneyLandHotelMonorailStation.jpg">Photograph by Robert J. Boser, CC BY 3.0</a>.</figcaption></figure>
<p>It’s not entirely clear what US city WALL·E lives in, but the presence of a monorail network certainly positions it as a location that was once optimistic about the future. This mid-century futurism is borne out by other architectural features of the city, most notably a curved building seen among the billboards encountered earlier. This building is strongly reminiscent of the <a href="https://en.wikipedia.org/wiki/Space_Needle">Space Needle observation tower</a> in Seattle, Washington, which was built for the city’s <a href="https://en.wikipedia.org/wiki/Century_21_Exposition">1962 World’s Fair</a>, together with an <a href="https://en.wikipedia.org/wiki/Seattle_Center_Monorail">ALWEG monorail system</a> that is still in operation today.</p>
<figure data-shortcode="caption" id="attachment_1510" aria-describedby="caption-attachment-1510"><a href="https://flic.kr/p/6Ns9ie"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_seattle_monorail_and_space_needle.jpg?w=1000" alt="walle_seattle_monorail_and_space_needle" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_seattle_monorail_and_space_needle.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_seattle_monorail_and_space_needle.jpg?w=116&amp;h=150 116w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_seattle_monorail_and_space_needle.jpg?w=231&amp;h=300 231w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1510">Seattle’s ALWEG monorail passing in front of the city’s Space Needle, 2008. Both were built for Seattle’s 1962 World’s Fair.&nbsp;<a href="https://flic.kr/p/6Ns9ie">Photograph by Smart Destinations, CC BY-SA 2.0</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1511" aria-describedby="caption-attachment-1511"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02_space_needle.jpg?w=1000" alt="walle_0_04_02_space_needle" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02_space_needle.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02_space_needle.jpg?w=116&amp;h=150 116w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_02_space_needle.jpg?w=231&amp;h=300 231w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1511">A remarkably space-needle-like building seen close to the monorail in WALL·E’s home city.</figcaption></figure>
<p>Near the monorail, WALL·E passes a promotional poster for himself, with the caption “Working to dig you out!” This poster has definite communist propaganda undertones, showing a stylized army of WALL·Es working together to build a brighter future. The implication of this design choice—that communist values are the solution to decades of rampant consumerism—is a pretty bold political statement for what is only the fourth minute of the movie.</p>
<figure data-shortcode="caption" id="attachment_1516" aria-describedby="caption-attachment-1516"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_10_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_101.jpg?w=1000" alt="walle_0_04_10" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_101.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_101.jpg?w=150&amp;h=93 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_101.jpg?w=300&amp;h=185 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1516">Buy n Large poster for WALL·E robots, with the caption “Working to dig you out!”</figcaption></figure>
<p>The future to which these WALL·Es aspire is apparently just above and behind the viewer—a common trope for communist propaganda, where the aspirational group gaze is almost always in this direction.</p>
<figure data-shortcode="caption" id="attachment_1513" aria-describedby="caption-attachment-1513"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_chinese_marching.jpg?w=1000" alt="walle_communist_propaganda_chinese_marching" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_chinese_marching.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_chinese_marching.jpg?w=150&amp;h=106 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_chinese_marching.jpg?w=300&amp;h=212 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1513">Chinese communist propaganda poster with the caption “To go on a thousand ‘li’ march to temper a red heart.” A “li” is about 500 meters, so a thousand-li march is about 310 miles.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1514" aria-describedby="caption-attachment-1514"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_russian_family.jpg?w=1000" alt="walle_communist_propaganda_russian_family" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_russian_family.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_russian_family.jpg?w=150&amp;h=108 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_russian_family.jpg?w=300&amp;h=216 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1514">Soviet communist propaganda poster, with the caption “Let’s raise a generation utterly devoted to the cause of communism!” Designed by Victor Ivanov, 1947.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1515" aria-describedby="caption-attachment-1515"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_north_korean_soldier.jpg?w=1000" alt="walle_communist_propaganda_north_korean_soldier" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_north_korean_soldier.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_north_korean_soldier.jpg?w=150&amp;h=114 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_communist_propaganda_north_korean_soldier.jpg?w=300&amp;h=228 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1515">North Korean propaganda poster, with the caption “The party calls! To important construction!”</figcaption></figure>
<p>Indeed, this gaze is&nbsp;<em>such</em> a common trope that it became the primary styling of the promotional poster for 2014’s banned comedy movie <a href="https://en.wikipedia.org/wiki/The_Interview"><em>The Interview</em></a>, in which two Americans travel to North Korea to interview the country’s leader, <a href="https://en.wikipedia.org/wiki/Kim_Jong-un">Kim Jong-un</a>. (The <em>WALL·E</em> poster’s bottom-edge caption, punctuated by an exclamation mark, is a recurring design feature in North Korean propaganda posters.)</p>
<figure data-shortcode="caption" id="attachment_1517" aria-describedby="caption-attachment-1517"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/the_interview_poster.jpg?w=1000" alt="the_interview_poster" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/the_interview_poster.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/the_interview_poster.jpg?w=101&amp;h=150 101w, https://typesetinthefuture.com/wp-content/uploads/2018/08/the_interview_poster.jpg?w=202&amp;h=300 202w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1517">Promotional poster for <em>The Interview</em>, with the Korean-language caption “Don’t believe these American bastards!”</figcaption></figure>
<p>This aspirational style is an example of <a href="https://en.wikipedia.org/wiki/Socialist_realism">socialist realist design</a>, the officially sanctioned visual aesthetic of the Soviet Union, which positioned broad-shouldered, purposeful workers as the true heroes of the age. As a robot who is literally a rectangle, there is surely no worker more broad-shouldered and purposeful than our movie’s eponymous hero, WALL·E.</p>
<p>WALL·E’s self-promotional poster is also a fine example of <a href="https://en.wikipedia.org/wiki/Handel_Gothic">Handel Gothic</a>, one of the movie’s supporting typefaces. Originally designed in 1965 by Donald J. Handel, the font has become a mainstay of design futurism. (Indeed, it is quite possibly the originator of one of our <a href="https://typesetinthefuture.com/2016/02/18/futuristic/">rules for futuristic type</a>: Make straight things curved.)</p>
<figure data-shortcode="caption" id="attachment_1518" aria-describedby="caption-attachment-1518"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_handel_gothic_bold.png?w=1000" alt="sampler_handel_gothic_bold" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_handel_gothic_bold.png 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_handel_gothic_bold.png?w=150&amp;h=15 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/sampler_handel_gothic_bold.png?w=300&amp;h=30 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1518">Handel Gothic Com Bold, from Linotype. Handel Gothic was originally designed in 1965 by Donald J. Handel for FotoStar.</figcaption></figure>
<p>My favorite use of the typeface in <em>WALL·E</em> occurs later in the movie, when we see the distinctly curved E of some Handel Gothic… on a handle. (I refuse to believe this is anything but a deliberate typographic joke.)</p>
<figure data-shortcode="caption" id="attachment_1520" aria-describedby="caption-attachment-1520"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_30_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_301.jpg?w=1000" alt="walle_0_58_30" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_301.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_301.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_301.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1520">“Handle” Gothic.</figcaption></figure>
<p>Handel Gothic enjoyed a particular resurgence when the type family was expanded in the 1980s, and will be immediately familiar to anyone who visited <a href="https://en.wikipedia.org/wiki/Epcot">EPCOT Center</a> at <a href="https://en.wikipedia.org/wiki/Walt_Disney_World">Walt Disney World</a> in Florida, which opened in 1982. (Later in this article, we’ll look in detail at the theme park, which is now named simply Epcot.) The original EPCOT Center logo was Handel Gothic all the way, making particularly good use of a lowercase n in “Center” to bring some extra curviness, and choosing a font variant with a curved leg in its R for consistency. (It also added <a href="https://typesetinthefuture.com/2016/02/18/futuristic/">letter joining and slicing</a> for good futuristic measure.)</p>
<figure data-shortcode="caption" id="attachment_1521" aria-describedby="caption-attachment-1521"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_epcot_center_logo.png?w=1000" alt="walle_epcot_center_logo" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_epcot_center_logo.png 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_epcot_center_logo.png?w=150&amp;h=63 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_epcot_center_logo.png?w=300&amp;h=127 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1521">Original logo for the EPCOT Center theme park at Walt Disney World, Florida.</figcaption></figure>
<p>Handel Gothic will also be familiar to <em>Star Trek</em> fans, from its appearance in the credits for both <a href="https://en.wikipedia.org/wiki/Star_Trek:_Deep_Space_Nine"><em>Star Trek: Deep Space Nine</em></a> (1993–99) and <a href="https://en.wikipedia.org/wiki/Star_Trek:_Voyager"><em>Star Trek: Voyager</em></a> (1995–2001).</p>
<figure data-shortcode="caption" id="attachment_1522" aria-describedby="caption-attachment-1522"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_ds9_emissary_0_06_44_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_ds9_emissary_0_06_44.jpg?w=1000" alt="startrek_ds9_emissary_0_06_44" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_ds9_emissary_0_06_44.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_ds9_emissary_0_06_44.jpg?w=150&amp;h=113 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_ds9_emissary_0_06_44.jpg?w=300&amp;h=225 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1522">Opening credits from the <em>Star Trek: Deep Space Nine</em> episode “Emissary,” showing some shiny metallic Handel Gothic (in this case, with a straight-legged R).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1523" aria-describedby="caption-attachment-1523"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_voyager_unimatrix_0_04_22_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_voyager_unimatrix_0_04_22.jpg?w=1000" alt="startrek_voyager_unimatrix_0_04_22" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_voyager_unimatrix_0_04_22.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_voyager_unimatrix_0_04_22.jpg?w=150&amp;h=113 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_voyager_unimatrix_0_04_22.jpg?w=300&amp;h=225 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1523">Opening credits from the <em>Star Trek: Voyager</em> episode “Unimatrix Zero: Part II,” showing Handel Gothic with a similarly straight-legged R.</figcaption></figure>
<p>The movie that made Handel Gothic synonymous with sci-fi, however, was almost certainly <a href="https://en.wikipedia.org/wiki/Steven_Spielberg">Steven Spielberg</a>’s <a href="https://en.wikipedia.org/wiki/Close_Encounters_of_the_Third_Kind"><em>Close Encounters of the Third Kind</em></a>, released in 1977. <em>Close Encounters</em> used the typeface for its theatrical poster and for its opening credits, with the very words “Close Encounters” offering not one but three opportunities to recognize Handel Gothic’s trademark E.</p>
<figure data-shortcode="caption" id="attachment_1524" aria-describedby="caption-attachment-1524"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/close_encounters_0_00_34_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/close_encounters_0_00_34.jpg?w=1000" alt="close_encounters_0_00_34" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/close_encounters_0_00_34.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/close_encounters_0_00_34.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/close_encounters_0_00_34.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1524">Opening credits to 1977’s <em>Close Encounters of the Third Kind</em>.</figcaption></figure>
<p>But back to WALL·E’s journey. Toward the end of his trek home, he passes many more WALL·E units, all of them rusted and dead. The sole remaining WALL·E happily cannibalizes a Caterpillar track from a nearby broken unit to replace his own damaged part, and motors onward with the new track in place.</p>
<p>It’s an easy detail to miss, but WALL·E’s home is a broken-down “BnL WALL·E Transport” vehicle, which may once have housed all the dead units he just passed. When he reverses himself into a WALL·E-size bin in a rotatable storage rack a few minutes later and rocks himself to sleep, his loneliness as the last robot on Earth is made all the more acute by the uninhabited bins around him, now filled with ordered trash.</p>
<figure data-shortcode="caption" id="attachment_1525" aria-describedby="caption-attachment-1525"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_24_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_24.jpg?w=1000" alt="walle_0_04_24" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_24.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_24.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_04_24.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1525">Defunct WALL·E units litter the landscape, becoming part of the trash they once existed to clear.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1526" aria-describedby="caption-attachment-1526"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_04_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_04.jpg?w=1000" alt="walle_0_06_04" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_04.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_04.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_04.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1526">A hulking WALL·E TRANSPORT, ironically rendered immobile by the piles of trash surrounding it.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1527" aria-describedby="caption-attachment-1527"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_08_59_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_08_59.jpg?w=1000" alt="walle_0_08_59" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_08_59.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_08_59.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_08_59.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1527">WALL·E tucks himself into a transportation bin, as the last remaining unit still able to do so. Where there once would have been many more WALL·E’s, there is now simply ordered trash.</figcaption></figure>
<p>Before he climbs into bed, WALL·E retrieves his favorite VHS cassette from a nearby toaster, and pops it into a VCR. It turns out this is a beaten-up copy of <a href="https://en.wikipedia.org/wiki/Hello,_Dolly!_(film)"><em>Hello, Dolly!</em></a>—1969’s awkwardly punctuated <a href="https://en.wikipedia.org/wiki/Jerry_Herman">Jerry Herman</a> musical. Delightfully, the typography of this cassette is taken directly from the movie’s 1991 VHS release, though the identity of its non-futuristic title font—half <a href="https://en.wikipedia.org/wiki/Century_type_family#Century_Schoolbook">Century Schoolbook</a>, half <a href="https://fontsinuse.com/typefaces/7590/benguiat-caslon">Benguiat Caslon</a>—has sadly eluded my detective skills.</p>
<figure data-shortcode="caption" id="attachment_1528" aria-describedby="caption-attachment-1528"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_27_18_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_27_18.jpg?w=1000" alt="walle_1_27_18" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_27_18.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_27_18.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_27_18.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1528">WALL-E’s much-watched copy of <em>Hello, Dolly!</em></figcaption></figure>
<figure data-shortcode="caption" id="attachment_1529" aria-describedby="caption-attachment-1529"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hello_dolly_front_cover_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hello_dolly_front_cover.jpg?w=1000" alt="walle_hello_dolly_front_cover" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hello_dolly_front_cover.jpg 400w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hello_dolly_front_cover.jpg?w=83&amp;h=150 83w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hello_dolly_front_cover.jpg?w=165&amp;h=300 165w" sizes="(max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-1529">The front cover of 1991’s US VHS release of <em>Hello, Dolly!</em></figcaption></figure>
<p>WALL·E watches his <em>Hello, Dolly!</em> cassette via a small, portable device that looks almost exactly like an <a href="https://en.wikipedia.org/wiki/IPod_Classic#5th_generation">Apple iPod Video</a>. I say “almost,” because the real-world iPod Video had a smaller click wheel than the one seen in <em>WALL·E</em>, had white labels on its buttons, and did not support external playback from a VHS cassette player. Nonetheless, this iPod is just one example of many in WALL·E’s home that evoke nostalgia for gadgets past, reinforcing that WALL·E himself is the discarded, unwanted technology that humanity left behind.</p>
<figure data-shortcode="caption" id="attachment_1530" aria-describedby="caption-attachment-1530"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_48_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_48.jpg?w=1000" alt="walle_0_06_48" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_48.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_48.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_06_48.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1530">WALL·E’s iPod, showing <em>Hello, Dolly!</em> on its LCD color screen.</figcaption></figure>
<p>To work around the tiny scale of his iPod’s screen, WALL·E uses a plastic <a href="https://en.wikipedia.org/wiki/Fresnel_lens">Fresnel lens</a> as a magnifying device to enlarge the image to several times its original size. In doing so, he follows a trend started in <a href="https://en.wikipedia.org/wiki/Terry_Gilliam">Terry Gilliam</a>’s similarly dystopian <a href="https://en.wikipedia.org/wiki/Brazil_(1985_film)"><em>Brazil</em></a>, in which employees at the Ministry of Information Retrieval huddle around tiny CRT screens to watch westerns through Fresnel lenses when their boss isn’t looking.</p>
<figure data-shortcode="caption" id="attachment_1531" aria-describedby="caption-attachment-1531"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_27_44_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_27_44.jpg?w=1000" alt="walle_0_27_44" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_27_44.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_27_44.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_27_44.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1531">WALL·E watches a movie on his iPod’s small screen through a rectangular Fresnel lens.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1532" aria-describedby="caption-attachment-1532"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/brazil_0_07_58_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/brazil_0_07_58.jpg?w=1000" alt="brazil_0_07_58" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/brazil_0_07_58.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/brazil_0_07_58.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/brazil_0_07_58.jpg?w=300&amp;h=168 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1532">In 1985’s <em>Brazil</em>, Ministry of Information employees watch movies on a small CRT screen through a rectangular Fresnel lens.</figcaption></figure>
<p>WALL·E awakes from robotic sleep on day two of the movie, low on power and dynamism. The fact that his head is a big pair of binoculars gives a great opportunity for a visual gag, as we see him literally bleary-eyed before activating the zoom lock on first his left eye, then his right, to reveal an eye-test chart in the opposing rack.</p>
<figure data-shortcode="caption" id="attachment_1533" aria-describedby="caption-attachment-1533"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_26_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_26.jpg?w=1000" alt="walle_0_09_26" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_26.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_26.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_26.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1533">From his bleary beginnings…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1534" aria-describedby="caption-attachment-1534"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_27_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_27.jpg?w=1000" alt="walle_0_09_27" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_27.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_27.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_27.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1534">…WALL·E focuses first his left eye…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1535" aria-describedby="caption-attachment-1535"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_28_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_28.jpg?w=1000" alt="walle_0_09_28" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_28.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_28.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_09_28.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1535">…and then his right, locking in on an eye test chart in the distance.</figcaption></figure>
<p>WALL·E’s binocular form is mimicked in the shape of his heads-up display (or HUD), which has the classic “two circles” shape used in many movies to indicate that we are looking from a character’s viewpoint through a pair of binoculars. This HUD raises an interesting question, however. Why does WALL·E have a heads-up display, with information overlaid on a video stream? A heads-up display really makes sense only if you are a human who has eyes; for a robot, any video input is combined with additional metadata from environmental sensors (such as direction, zoom, and power), and fed directly into the robot’s processor. Overlaying environmental information on a video stream implies that the robot has cameras that look at the world, and then <em>more</em> cameras that look at the augmented output of those cameras, which doesn’t make sense at all.</p>
<p>The answer, of course, is that WALL·E has a HUD because movie robots have HUDs, and movie robots have HUDs because they enable the viewer to visualize what the robots are thinking, even if it makes zero sense in technical reality. This trope began in 1973’s <a href="https://en.wikipedia.org/wiki/Westworld_(film)"><em>Westworld</em></a>, whose final act shows us the world from the vantage point of <a href="https://en.wikipedia.org/wiki/Yul_Brynner">Yul Brynner</a>’s gun-slinging robot. Although Brynner’s HUD is not augmented with data, it is nonetheless <a href="https://www.newyorker.com/tech/annals-of-technology/how-michael-crichtons-westworld-pioneered-modern-special-effects">the first use of computer-generated imagery in a feature film</a>. Director <a href="https://en.wikipedia.org/wiki/Michael_Crichton">Michael Crichton</a> cuts several times from a real-world scene to the robot’s pixelated version of the same, including a thermal image when Brynner chases his prey in the movie’s final act.</p>
<figure data-shortcode="caption" id="attachment_1536" aria-describedby="caption-attachment-1536"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_29_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_29.jpg?w=1000" alt="westworld_1_05_29" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_29.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_29.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_29.jpg?w=300&amp;h=124 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1536">A canyon in Westworld…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1537" aria-describedby="caption-attachment-1537"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_30_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_30.jpg?w=1000" alt="westworld_1_05_30" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_30.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_30.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_05_30.jpg?w=300&amp;h=124 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1537">…and Yul Brynner’s pixellated view of the same.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1538" aria-describedby="caption-attachment-1538"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_20_11_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_20_11.jpg?w=1000" alt="westworld_1_20_11" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_20_11.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_20_11.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/westworld_1_20_11.jpg?w=300&amp;h=124 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1538">Yul Brynner’s gunslinging robot tracks its prey with a thermal imaging interpretation of its video input.</figcaption></figure>
<p><em>Westworld</em>’s “robot viewpoint” trope was codified by 1984’s <em><a href="https://en.wikipedia.org/wiki/The_Terminator">The Terminator</a></em> and 1987’s <em><a href="https://en.wikipedia.org/wiki/RoboCop">RoboCop</a></em>, both of which augmented their HUDs with additional data and text. Following these two movies, a heads-up display pretty much became the de facto expectation for any on-screen robot whose motives need to be understood.</p>
<figure data-shortcode="caption" id="attachment_1539" aria-describedby="caption-attachment-1539"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_14_34_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_14_34.jpg?w=1000" alt="terminator_1_14_34" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_14_34.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_14_34.jpg?w=150&amp;h=81 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_14_34.jpg?w=300&amp;h=162 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1539">A HUD screen from the T-800 Terminator, in 1984’s <em>The Terminator</em>. Here, the T-800 is determining an appropriate auditory response to a question from its apartment’s superintendent.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1540" aria-describedby="caption-attachment-1540"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/robocop_0_31_31_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/robocop_0_31_31.jpg?w=1000" alt="robocop_0_31_31" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/robocop_0_31_31.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/robocop_0_31_31.jpg?w=150&amp;h=81 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/robocop_0_31_31.jpg?w=300&amp;h=162 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1540">A HUD screen from the OCP Crime Prevention Unit 001, in 1987’s <em>RoboCop</em>. Here, RoboCop’s visual tracking system is being put through its paces by detecting the location of a pen. (Note that RoboCop’s HUD has highly visible scan lines, to make sure we know we are watching a live video stream in a movie.)</figcaption></figure>
<p>Pixar’s robot HUDs tend to include the shape of the robot’s eye(s) within the heads-up display, to help us associate the HUD with the character it represents. <a href="https://en.wikipedia.org/wiki/The_Incredibles"><em>The Incredibles</em></a>’ Omnidroid predates WALL·E’s binoculars in this regard. Other <em>WALL·E</em> robots—M-O, SECUR-T, and EVE—also follow suit.</p>
<figure data-shortcode="caption" id="attachment_1541" aria-describedby="caption-attachment-1541"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/incredibles_omnidroid_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/incredibles_omnidroid.jpg?w=1000" alt="incredibles_omnidroid" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/incredibles_omnidroid.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/incredibles_omnidroid.jpg?w=150&amp;h=128 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/incredibles_omnidroid.jpg?w=300&amp;h=256 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1541"><em>The Incredibles</em>’ Omnidroid has a HUD that makes the droid’s desire for self-preservation clear via some on-screen Eurostile Oblique. It also demonstrates the Pixar trend (continued in <em>WALL·E</em>) for HUDs to match the shapes of their robots’ eye(s).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1542" aria-describedby="caption-attachment-1542"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_secur_t_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_secur_t.jpg?w=1000" alt="walle_secur_t" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_secur_t.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_secur_t.jpg?w=150&amp;h=128 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_secur_t.jpg?w=300&amp;h=256 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1542">The SECUR-T sentry robot’s eye in <em>WALL·E</em> is explicitly a camera, as reinforced by a SLR (single-lens-reflex)-camera-like HUD when taking a CAUTION photo of WALL·E’s rogue robots.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1543" aria-describedby="caption-attachment-1543"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_eve_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_eve.jpg?w=1000" alt="walle_eve" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_eve.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_eve.jpg?w=150&amp;h=128 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_eve.jpg?w=300&amp;h=256 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1543">EVE’s curved, lined HUD mirrors the curved, lined styling of her eyes and face.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1544" aria-describedby="caption-attachment-1544"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_m_o_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_m_o.jpg?w=1000" alt="walle_m_o" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_m_o.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_m_o.jpg?w=150&amp;h=128 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_m_o.jpg?w=300&amp;h=256 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1544">M-O’s wide, flat eye-panel shape is mirrored in his wide, flat on-screen HUD display. This shape, of course, requires his HUD to use <a href="https://typesetinthefuture.com/2014/11/29/fontspots-eurostile/">a certain wide, flat typeface</a> for its informative text.</figcaption></figure>
<p>Pixar’s neatest variation on the robot HUD trope occurs all the way back in 1999’s <a href="https://en.wikipedia.org/wiki/Toy_Story_2"><em>Toy Story 2</em></a>, where a plastic toy’s marketing gimmick (plus some clever camera framing) enables us to literally see through the eyes of the movie’s robotic bad guy.</p>
<figure data-shortcode="caption" id="attachment_1545" aria-describedby="caption-attachment-1545"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_04_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_04.jpg?w=1000" alt="toy_story_ii_0_56_04" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_04.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_04.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_04.jpg?w=300&amp;h=168 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1545">Evil Emperor Zurg, arch-enemy of Buzz Lightyear, in 1999’s <em>Toy Story 2</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1546" aria-describedby="caption-attachment-1546"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_06_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_06.jpg?w=1000" alt="toy_story_ii_0_56_06" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_06.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_06.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_06.jpg?w=300&amp;h=168 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1546">As Buzz runs away from Zurg, a camera move brilliantly subverts the robot HUD trope…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1547" aria-describedby="caption-attachment-1547"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_08_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_08.jpg?w=1000" alt="toy_story_ii_0_56_08" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_08.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_08.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_08.jpg?w=300&amp;h=168 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1547">…turning a plastic toy’s “LOOK HERE” scope…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1548" aria-describedby="caption-attachment-1548"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_10_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_10.jpg?w=1000" alt="toy_story_ii_0_56_10" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_10.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_10.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_10.jpg?w=300&amp;h=168 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1548">…into the bad guy’s evil robot HUD…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1549" aria-describedby="caption-attachment-1549"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_13_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_13.jpg?w=1000" alt="toy_story_ii_0_56_13" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_13.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_13.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/toy_story_ii_0_56_13.jpg?w=300&amp;h=168 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1549">…complete with ZURG VISION logo in Eurostile Bold Oblique.</figcaption></figure>
<p>There is one further question raised by WALL·E’s binocular HUD. How does his directional compass—seen at the top center of his HUD—continue to work when he is aboard the <em>Axiom</em>? <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/AliensOfLondon?from=Main.LotsOfPlanetsHaveANorth">Lots of planets may have a north</a>, but the same is not true of spacecraft—north, south, east, and west make sense only when you’re on the surface of a sphere.</p>
<figure data-shortcode="caption" id="attachment_1550" aria-describedby="caption-attachment-1550"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_39_25_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_39_25.jpg?w=1000" alt="walle_0_39_25" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_39_25.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_39_25.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_39_25.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1550">A detail from WALL·E’s binoculars when onboard the Axiom. This compass direction indicator, from the top of the viewport, updates as he rotates, despite the notable absence of a planet.</figcaption></figure>
<p>Day two (and act two) of <em>WALL·E</em> see a Buy n Large scout ship arrive on Earth, disrupting WALL·E’s routine. Most importantly, it introduces us to EVE, who is everything WALL·E is not. EVE’s shiny white design is technologically advanced; she’s the curvy <a href="https://en.wikipedia.org/wiki/IMac_G4">iMac G4</a> to WALL·E’s boxy <a href="https://en.wikipedia.org/wiki/Macintosh_128K">Mac 128K</a>. Her design evokes sleek Apple products of the 2000s, with her head, in particular, highly reminiscent of a 2002 iMac G4’s base. Even her reboot sound is a futuristic take on Apple’s <a href="https://www.cnbc.com/2018/03/24/jim-reekes-the-apple-sound-designer-who-created-sosumi.html">famous startup chime</a>, whereas WALL·E’s post-charge chime is the version Apple introduced in 1998 and <a href="https://support.apple.com/en-us/HT202768">removed altogether in 2016</a>.</p>
<figure data-shortcode="caption" id="attachment_1551" aria-describedby="caption-attachment-1551"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_15_33_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_15_33.jpg?w=1000" alt="walle_0_15_33" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_15_33.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_15_33.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_15_33.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1551">WALL·E sees EVE for the first time, as she is released from her transporter pod to begin scanning Earth.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1552" aria-describedby="caption-attachment-1552"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_imac_g4_side_view.jpg?w=1000" alt="walle_imac_g4_side_view" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_imac_g4_side_view.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_imac_g4_side_view.jpg?w=150&amp;h=143 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_imac_g4_side_view.jpg?w=300&amp;h=285 300w" sizes="(max-width: 560px) 100vw, 560px"><figcaption id="caption-attachment-1552">Side view of an iMac G4,<br>released in 2002, with an EVE-head-like base.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1553" aria-describedby="caption-attachment-1553"><a href="https://flic.kr/p/5UTQB5"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_macintosh_128k.jpg?w=1000" alt="walle_macintosh_128k" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_macintosh_128k.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_macintosh_128k.jpg?w=114&amp;h=150 114w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_macintosh_128k.jpg?w=228&amp;h=300 228w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1553">An Apple Macintosh 128k, released in 1984, with a WALL·E-like beige body.&nbsp;<a href="https://flic.kr/p/5UTQB5">Photograph by Ian Muttoo, CC BY-SA 2.0</a>.</figcaption></figure>
<p>EVE’s evocation of Apple product design is not entirely coincidental. In a <a href="http://fortune.com/2008/05/12/fortune-apples-ive-helped-design-the-heroine-of-pixars-wall-e/">2008 interview with <em>Fortune</em> magazine</a>, director <a href="https://en.wikipedia.org/wiki/Andrew_Stanton">Andrew Stanton</a> stated: “I wanted EVE to be high-end technology—no expense spared—and I wanted it to be seamless and for the technology to be sort of hidden and subcutaneous. The more I started describing it, the more I realized I was pretty much describing the Apple playbook for design.” This led to a 2005 call to Steve Jobs—at that time, both owner of Pixar and CEO of Apple—which in turn led to Apple design head <a href="https://en.wikipedia.org/wiki/Jony_Ive">Jony Ive</a> spending a day at the Pixar headquarters in Emeryville, consulting on the EVE prototype. (It is surely entirely coincidental that EVE’s wireless arms and hands are reminiscent of Apple’s wireless <a href="https://en.wikipedia.org/wiki/Magic_Mouse">Magic Mouse</a>, released the year after <em>WALL·E</em>.)</p>
<figure data-shortcode="caption" id="attachment_1554" aria-describedby="caption-attachment-1554"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_28_01_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_28_01.jpg?w=1000" alt="walle_1_28_01" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_28_01.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_28_01.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_28_01.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1554">Eve’s wirelessly-connected fingers and hands, as seen in 2008’s <em>WALL·E</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1555" aria-describedby="caption-attachment-1555"><a href="https://flic.kr/p/7F83fo"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_magic_mouse.jpg?w=1000" alt="walle_magic_mouse" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_magic_mouse.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_magic_mouse.jpg?w=150&amp;h=100 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_magic_mouse.jpg?w=300&amp;h=200 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1555">Apple’s wireless Magic Mouse, released in 2009.&nbsp;<a href="https://flic.kr/p/7F83fo">Photograph by Yutaka Tsutano, CC BY 2.0</a>.</figcaption></figure>
<p>During a dust storm, WALL·E takes EVE back to the safety of his home, where he presents her with a small multicolored cube. In the three seconds the camera pans away for WALL·E to retrieve <em>Hello, Dolly!</em>, EVE solves the <a href="https://en.wikipedia.org/wiki/Rubik%27s_Cube">Rubik’s Cube</a> and returns it to her astonished host.</p>
<figure data-shortcode="caption" id="attachment_1556" aria-describedby="caption-attachment-1556"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_25_15_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_25_15.jpg?w=1000" alt="walle_0_25_15" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_25_15.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_25_15.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_25_15.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1556">WALL·E presents EVE with a Rubik’s Cube from his trash collection.</figcaption></figure>
<p>EVE’s cube-solving time would be impressive for a human; the current world record is 4.22 seconds, <a href="http://www.guinnessworldrecords.com/news/2018/5/feliks-zemdegs-achieves-fastest-time-to-solve-a-rubiks-cube-in-4-22-seconds-524695">set by Feliks Zemdegs in May 2018</a>. Sadly, because of the camera pan, we’ll never know if EVE broke the world record for a robot, which currently stands at a mind-boggling 0.637 seconds. This record was set in November 2016 by <a href="http://www.guinnessworldrecords.com/news/2017/3/video-robot-breaks-world-record-solving-rubiks-cube-in-0-637-seconds-464392">Sub1 Reloaded</a>, a cube-solving robot built by German engineer Albert Beer. Six high-performance stepper motors turned the cube twenty-one times to complete the task, averaging just 0.03 seconds per rotation.</p>
<figure data-shortcode="caption" id="attachment_1557" aria-describedby="caption-attachment-1557"><a href="https://www.infineon.com/cms/en/about-infineon/press/press-releases/2016/INFXX201611-014.html"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_infineon_rubik_01.jpg?w=1000" alt="walle_infineon_rubik_01" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_infineon_rubik_01.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_infineon_rubik_01.jpg?w=150&amp;h=100 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_infineon_rubik_01.jpg?w=300&amp;h=200 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1557">Sub1 Reloaded, the world-record-holding Rubik’s Cube robot, in November 2016.</figcaption></figure>
<p>Spare a thought, then, for poor WALL·E. His surprise at EVE’s accomplishment is understandable—he lacks color vision and has only three digits on each hand, which means that Rubik’s Cubes are really not his specialty. (There’s a reason Guinness doesn’t have a “fastest dog” <a href="http://www.guinnessworldrecords.com/search?term=rubik">Rubik’s Cube category</a>.)</p>
<p>One other point of note: This scene is the only time the color green appears in <em>WALL·E</em> in a scene unrelated to a plant. While this breaks the movie’s careful color scripting, it’s worth it for a good gag.</p>
<p>All seems to be going well with WALL·E and EVE’s introductions, until they are rudely interrupted by EVE’s spotting a plant that WALL·E has excavated from the trash. She subsumes the plant, as per her “directive,” and enters hibernation mode. WALL·E’s attempts to wake her invariably end in comedic pain, though one of them does reveal EVE’s serial number, 051682, set in Handel Gothic. (I can’t help but wonder whether someone in Pixar’s art department was born on May 16, 1982.)</p>
<figure data-shortcode="caption" id="attachment_1558" aria-describedby="caption-attachment-1558"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_30_08_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_30_08.jpg?w=1000" alt="walle_0_30_08" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_30_08.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_30_08.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_30_08.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1558">EVE’s serial number, seen on the inside of the door above, is 051682.</figcaption></figure>
<p>WALL·E gives up on reviving EVE and disconsolately returns to his trash-crushing routine. Shortly afterward, the <em>Axiom</em>’s scout ship returns to Earth and collects EVE to take her home. Desperate not to lose his new friend, WALL·E hitches a ride on the outside of the scout, causing him grief when the ship blasts through Earth’s surrounding satellite trash. As the satellites fall away, we see that WALL·E has a Soviet-era <em><a href="https://en.wikipedia.org/wiki/Sputnik_1">Sputnik 1</a></em> satellite on his head. This is impressive, especially given that <em>Sputnik 1</em>—the first man-made object to orbit Earth—burned up on reentry to Earth’s atmosphere in 1958.</p>
<figure data-shortcode="caption" id="attachment_1559" aria-describedby="caption-attachment-1559"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_36_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_36.jpg?w=1000" alt="walle_0_33_36" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_36.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_36.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_36.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1559">As the <em>Axiom</em> scout ship breaks through Earth’s satellites…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1560" aria-describedby="caption-attachment-1560"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_44_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_44.jpg?w=1000" alt="walle_0_33_44" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_44.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_44.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_33_44.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1560">…WALL·E is briefly left with <em>Sputnik 1</em> on his head.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1561" aria-describedby="caption-attachment-1561"><a href="https://www.nasa.gov/directorates/heo/scan/images/history/October1957_2.html"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_sputnik_replica.jpg?w=1000" alt="walle_sputnik_replica" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_sputnik_replica.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_sputnik_replica.jpg?w=150&amp;h=123 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_sputnik_replica.jpg?w=300&amp;h=246 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1561">A replica of the <em>Sputnik 1</em> satellite, showing its 58cm-diameter aluminum sphere and four spindly antennas</figcaption></figure>
<p>We see <em>Sputnik 1</em> again later in the movie, as a model in Captain McCrea’s display cabinet. This model is accompanied by a <a href="https://airandspace.si.edu/collection-objects/helmet-backshell-launch-entry-shuttle">NASA space shuttle launch/entry helmet</a>, as worn by space shuttle astronauts between 1982 and 1986 during launch and return from space.</p>
<figure data-shortcode="caption" id="attachment_1562" aria-describedby="caption-attachment-1562"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_03_47_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_03_47.jpg?w=1000" alt="walle_1_03_47" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_03_47.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_03_47.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_03_47.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1562">A space shuttle launch/entry helmet and a Sputnik model in Captain McCrea’s display case.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1563" aria-describedby="caption-attachment-1563"><a href="https://spaceflight.nasa.gov/gallery/images/shuttle/sts-51l/html/s85-40031.html"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_space_shuttle_helmet_super_crop.jpg?w=1000" alt="walle_space_shuttle_helmet_super_crop" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_space_shuttle_helmet_super_crop.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_space_shuttle_helmet_super_crop.jpg?w=150&amp;h=150 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_space_shuttle_helmet_super_crop.jpg?w=300&amp;h=300 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1563">Payload specialist Sharon Christa McAuliffe is briefed on the space shuttle’s launch/entry helmet during training for the January 1986 launch of flight STS-51L.</figcaption></figure>
<p>This “retro space tech” theme can also be seen on Earth during EVE’s scan for plant life. After scanning a <em>Toy Story</em> <a href="http://pixar.wikia.com/wiki/Pizza_Planet_Truck">Pizza Planet truck</a> and a portable lavatory, EVE checks a rusting <a href="https://en.wikipedia.org/wiki/Apollo_Command/Service_Module"><em>Apollo</em> command module</a> before slamming the door shut in disgust at its absence of plant-based life.</p>
<figure data-shortcode="caption" id="attachment_1564" aria-describedby="caption-attachment-1564"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_21_18_1_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_21_18_1.jpg?w=1000" alt="walle_0_21_18_1" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_21_18_1.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_21_18_1.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_21_18_1.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1564">A BnL-branded <em>Apollo</em>-style command module in a pile of trash on Earth.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1565" aria-describedby="caption-attachment-1565"><a href="https://flic.kr/p/nFr8MZ"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_apollo_14_command_module.jpg?w=1000" alt="walle_apollo_14_command_module" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_apollo_14_command_module.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_apollo_14_command_module.jpg?w=150&amp;h=100 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_apollo_14_command_module.jpg?w=300&amp;h=200 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1565">The <em>Apollo 14</em> command module, nicknamed “Kitty Hawk,” at the Kennedy Space Center in Florida.&nbsp;<a href="https://flic.kr/p/nFr8MZ">Photograph by gordonplant, CC BY 2.0</a>.</figcaption></figure>
<p>Showing recent space technology as trash or as museum pieces positions our personal experiences of space as archaic and quaint in comparison to the <em>Axiom</em>’s futuristic styling. This further reinforces WALL·E’s own obsolescence as a discarded piece of technology, and sets us up neatly for a transition to the shiny futurism of the <em>Axiom</em>.</p>
<p>The <em>Axiom</em> paints a vision of the future where every menial task, no matter how small, has a dedicated robot created expressly for the purpose. Like <em>2001: A Space Odyssey</em>’s HAL and <em>Alien</em>’s MU/TH/UR, all these robots have cute acronyms to make them human-friendly.</p>
<figure data-shortcode="caption" id="attachment_1566" aria-describedby="caption-attachment-1566"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_05_29_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_05_29.jpg?w=1000" alt="walle_0_05_29" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_05_29.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_05_29.jpg?w=150&amp;h=61 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_05_29.jpg?w=300&amp;h=122 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1566">SAUT-A (chefbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1567" aria-describedby="caption-attachment-1567"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_37_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_37.jpg?w=1000" alt="walle_0_36_37" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_37.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_37.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_37.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1567">Microbe Obliterator, or M·O.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1568" aria-describedby="caption-attachment-1568"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_39_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_39.jpg?w=1000" alt="walle_0_36_39" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_39.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_39.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_36_39.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1568">VAQ-M (vacuumbot), BUF-4 (bufferbot), and SPR-A (spraybot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1569" aria-describedby="caption-attachment-1569"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_44_30_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_44_30.jpg?w=1000" alt="walle_0_44_30" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_44_30.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_44_30.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_44_30.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1569">HAN-S (massagebot), and PR-T (beauticianbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1570" aria-describedby="caption-attachment-1570"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_22_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_22.jpg?w=1000" alt="walle_0_46_22" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_22.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_22.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_22.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1570">SR-V (tennisbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1571" aria-describedby="caption-attachment-1571"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_26_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_26.jpg?w=1000" alt="walle_0_46_26" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_26.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_26.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_26.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1571">BIRD-E (golfbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1572" aria-describedby="caption-attachment-1572"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_55_02_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_55_02.jpg?w=1000" alt="walle_0_55_02" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_55_02.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_55_02.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_55_02.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1572">SECUR-T (stewardbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1573" aria-describedby="caption-attachment-1573"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_02_09_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_02_09.jpg?w=1000" alt="walle_1_02_09" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_02_09.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_02_09.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_02_09.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1573">BURN-E (maintenancebot), shortly after being locked out of the <em>Axiom</em> by WALL·E and EVE.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1574" aria-describedby="caption-attachment-1574"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_11_14_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_11_14.jpg?w=1000" alt="walle_1_11_14" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_11_14.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_11_14.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_11_14.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1574">GO-4 (gopherbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1575" aria-describedby="caption-attachment-1575"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_21_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_21.jpg?w=1000" alt="walle_1_12_21" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_21.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_21.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_21.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1575">Waste Allocation Load Lifter · <em>Axiom</em> Class, or WALL·A.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1576" aria-describedby="caption-attachment-1576"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_55_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_55.jpg?w=1000" alt="walle_1_19_55" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_55.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_55.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_55.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1576">NAN-E (nannybot).</figcaption></figure>
<p>Of particular note is VN-GO, the painterbot, whose acronym perpetuates a common yet incorrect pronunciation of Dutch painter <a href="https://en.wikipedia.org/wiki/Vincent_van_Gogh">Vincent van Gogh</a>’s surname. (<a href="http://www.bbc.co.uk/blogs/magazinemonitor/2010/01/how_to_say_van_gogh.shtml">According to the BBC Pronunciation Unit</a>, it is “van Gokh,” with the kh pronounced like the ch in the Scottish word loch.)</p>
<figure data-shortcode="caption" id="attachment_1577" aria-describedby="caption-attachment-1577"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_16_25_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_16_25.jpg?w=1000" alt="walle_1_16_25" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_16_25.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_16_25.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_16_25.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1577">VN-GO (paintbot).</figcaption></figure>
<p>EVE’s acronym, sadly, is even worse. Her denomination as Extraterrestrial Vegetation Evaluator could not be more inaccurate, given that her entire reason for existing is to evaluate vegetation on the planet <a href="https://en.wiktionary.org/wiki/Terra">Terra</a> (as Earth is known in Latin). Presumably, her moniker was chosen for cuteness rather than linguistic accuracy—after all, this movie is about WALL·E and EVE, not WALL·E and TVE.</p>
<p>Also of note is TYP-E, a typingbot who is designed solely to press keys when someone approaches the elevator shaft to the captain’s quarters. TYP-E provides an excuse for one of the movie’s best visual gags—as a robot, he has a keyboard made entirely, of course, from ones and zeroes.</p>
<figure data-shortcode="caption" id="attachment_1578" aria-describedby="caption-attachment-1578"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_16_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_16.jpg?w=1000" alt="walle_0_43_16" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_16.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_16.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_16.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1578">TYP-E (typingbot).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1579" aria-describedby="caption-attachment-1579"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_04_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_04.jpg?w=1000" alt="walle_0_43_04" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_04.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_04.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_04.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1579">In a brief over-the-shoulder shot, we see that TYP-E’s keyboard is made entirely from keys labeled <em>1</em> and <em>0</em>.</figcaption></figure>
<p>M-O’s cleaning colleagues (VAQ-M, SPR-A, and BUF-4) may bring back memories for fans of 1997’s <a href="https://en.wikipedia.org/wiki/The_Fifth_Element"><em>The Fifth Element</em></a>. In <a href="https://en.wikipedia.org/wiki/Luc_Besson">Luc Besson</a>’s over-the-top vision of the future, evil industrialist Zorg demonstrates his own array of task-specific robots by dropping a glass tumbler on the floor to trigger their “lovely ballet.” As two sentrybots stand guard, a sweeperbot, a spraybot, and a bufferbot clean up his mess before returning to a nearby storage station.</p>
<figure data-shortcode="caption" id="attachment_1580" aria-describedby="caption-attachment-1580"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_34_2_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_34_2.jpg?w=1000" alt="fifth_element_0_54_34_2" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_34_2.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_34_2.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_34_2.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1580"><em>The Fifth Element</em> pre-empts <em>WALL·E</em>’s cleaning robots with its own sweeperbot…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1581" aria-describedby="caption-attachment-1581"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_36_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_36.jpg?w=1000" alt="fifth_element_0_54_36" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_36.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_36.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_36.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1581">…spraybot…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1582" aria-describedby="caption-attachment-1582"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_38_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_38.jpg?w=1000" alt="fifth_element_0_54_38" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_38.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_38.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/fifth_element_0_54_38.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1582">…and bufferbot.</figcaption></figure>
<p>The <em>Axiom</em>’s robots travel around the ship via their own dedicated corridors, separate from the craft’s passenger areas. These passenger areas are split into three classes—economy, coach, and elite—each of which has a distinct architectural style. The classes themselves do not play a functional role in the movie’s plot, but one has to wonder what they mean for the <em>Axiom</em>’s society. Are children born into the classes their ancestors originally purchased, as if into some kind of futuristic caste system? Would the <em>Axiom</em> have its own <a href="https://en.wikipedia.org/wiki/Titanic_(1997_film)"><em>Titanic</em></a> moment if a passenger from economy bumped hover chairs with someone from elite? One thing’s certain: The styling of each class is extremely useful for helping viewers orient themselves within the ship’s overall structure as the action moves back and forth along its length.</p>
<p>Our introduction to the passenger area starts with the economy deck, which is compact, angular, and concrete in texture and color. Its palette is deliberately sparse, rarely moving outside the Buy n Large blue, red, and white, and making extensive use of the corporation’s Futura Extra Bold Oblique.</p>
<figure data-shortcode="caption" id="attachment_1583" aria-describedby="caption-attachment-1583"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_04_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_04.jpg?w=1000" alt="walle_0_40_04" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_04.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_04.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_04.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1583">The economy deck, as seen by WALL·E shortly after his arrival on the <em>Axiom</em>. Apart from a few hints of yellow, it follows the BnL corporate color scheme exclusively, with plenty of Futura Extra Bold Oblique.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1584" aria-describedby="caption-attachment-1584"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_17_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_17.jpg?w=1000" alt="walle_0_46_17" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_17.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_17.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_46_17.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1584">The economy deck, as seen when Captain McCrea announces the <em>Axiom</em>’s 700-year anniversary.</figcaption></figure>
<p>The deck’s design is highly reminiscent of the interior of the Contemporary Tower at Walt Disney World <a href="https://en.wikipedia.org/wiki/Disney%27s_Contemporary_Resort">Contemporary Resort</a>, whose A-frame concrete-and-steel structure was so futuristic when it opened in 1971 that it even had a monorail running through the middle. (As anyone who has stayed at the Contemporary can attest, however, its rates can hardly be considered “economy.”)</p>
<figure data-shortcode="caption" id="attachment_1585" aria-describedby="caption-attachment-1585"><a href="https://flic.kr/p/aCmeqK"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_economy_contemporary_interior.jpg?w=1000" alt="walle_axiom_economy_contemporary_interior" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_economy_contemporary_interior.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_economy_contemporary_interior.jpg?w=112&amp;h=150 112w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_economy_contemporary_interior.jpg?w=225&amp;h=300 225w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1585">Interior of the Contemporary Tower at Walt Disney World Contemporary Resort, as it looked in 2011. The blue raised platform on the right is a monorail station with a green-line monorail currently boarding.&nbsp;<a href="https://flic.kr/p/aCmeqK">Photograph by Sam Howzit, CC BY 2.0</a>.</figcaption></figure>
<p>The coach deck, unlike the economy deck, is curved, eclectic, and spacious, with brightly colored holo-ads scattered everywhere. It mimics Las Vegas’s Strip in gaudiness and style, with artificial neon colors used extensively and every sign encouraging <em>Axiom</em> passengers to spend more money. (How the ship’s financial economy continues to function after a seven-hundred-year flight continues to remain a mystery.)</p>
<figure data-shortcode="caption" id="attachment_1586" aria-describedby="caption-attachment-1586"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_12_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_12.jpg?w=1000" alt="walle_0_41_12" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_12.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_12.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_12.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1586">The central mall area of the <em>Axiom</em>’s coach deck, with garish, over-saturated holographic ads and signs.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1751" aria-describedby="caption-attachment-1751"><a href="https://www.istockphoto.com/photo/las-vegas-strip-at-night-gm458116603-17719435"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_vegas_strip_crop.jpg?w=1000" alt="Las Vegas Strip at night" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_vegas_strip_crop.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_vegas_strip_crop.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_vegas_strip_crop.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1751">A section of the Las Vegas Strip at night, showing a similar palette of over-saturated cyan, purple, pink, and yellow hues, combined with omnipresent ads encouraging consumption.&nbsp;<a href="https://www.istockphoto.com/photo/las-vegas-strip-at-night-gm458116603-17719435">Photograph by rabbit75_ist</a>.</figcaption></figure>
<p>The ceiling of the coach deck is a gigantic animated screen that can switch between day and night, complete with a BnL-branded sun or moon. The ceiling’s relationship to <em>actual</em> time is somewhat tenuous, as we see when Captain McCrea winds the sky back from 12:30 p.m. to 9:30 a.m. in order to make his morning announcements. In this regard, the ceiling is essentially an amalgam of two Las Vegas landmarks: the painted cloud ceilings of the <a href="https://en.wikipedia.org/wiki/The_Forum_Shops_at_Caesars">Forum indoor arcade</a> at <a href="https://en.wikipedia.org/wiki/Caesars_Palace">Caesars Palace</a>, whose lighting <a href="http://www.colorkinetics.com/showcase/installs/Caesars-Palace-Forum-Shops/">ebbs and changes</a> without ever making it nighttime enough for you to want to stop buying things, and the four-block-long overhead screen of the <a href="https://en.wikipedia.org/wiki/Fremont_Street_Experience">Fremont Street Experience</a>—the world’s largest video screen—whose 12.5 million LEDs illuminate Vegas partygoers every night. The result is an entirely fake sky for the <em>Axiom</em>’s population, allowing finely tuned control over their artificial environment.</p>
<figure data-shortcode="caption" id="attachment_1587" aria-describedby="caption-attachment-1587"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_45_51_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_45_51.jpg?w=1000" alt="walle_0_45_51" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_45_51.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_45_51.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_45_51.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1587">The coach deck’s sky dome ceiling, transitioning from midday to early morning.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1588" aria-describedby="caption-attachment-1588"><a href="https://flic.kr/p/XMaHuq"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_caesars_palace_ceiling.jpg?w=1000" alt="walle_axiom_coach_caesars_palace_ceiling" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_caesars_palace_ceiling.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_caesars_palace_ceiling.jpg?w=150&amp;h=84 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_caesars_palace_ceiling.jpg?w=300&amp;h=169 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1588">The painted, vaulted ceiling of the Forum Shops arcade at Caesars Palace, Las Vegas.&nbsp;<a href="https://flic.kr/p/XMaHuq">Photograph by anokarina, CC BY-SA 2.0</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1589" aria-describedby="caption-attachment-1589"><a href="https://flic.kr/p/BUXLBo"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_fremont_experience_ceiling.jpg?w=1000" alt="walle_axiom_coach_fremont_experience_ceiling" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_fremont_experience_ceiling.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_fremont_experience_ceiling.jpg?w=100&amp;h=150 100w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_axiom_coach_fremont_experience_ceiling.jpg?w=200&amp;h=300 200w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1589">The four-block-long LED ceiling of the Fremont Street Experience, Las Vegas.&nbsp;<a href="https://flic.kr/p/BUXLBo">Photograph by dconvertini, CC BY-SA 2.0</a>.</figcaption></figure>
<p>The coach deck leads to the elite deck, whose styling resembles that of a high-class lido or spa. Despite their very different palettes, the coach and elite decks share a curved, futuristic environmental styling that unifies their overall architecture. <a href="http://www.animationartconservation.com/design-with-a-purpose%2C-an-interview-with-ralph-eggleston.html">According to production designer Ralph Eggleston</a>, the architecture of this shared area is inspired by the work of architect <a href="https://en.wikipedia.org/wiki/Santiago_Calatrava">Santiago Calatrava</a>, whose signature curved supports and arches can be seen throughout both decks’ central concourse.</p>
<figure data-shortcode="caption" id="attachment_1590" aria-describedby="caption-attachment-1590"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_07_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_07.jpg?w=1000" alt="walle_0_41_07" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_07.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_07.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_07.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1590">Close-up of the arched supports in the central coach deck plaza.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1592" aria-describedby="caption-attachment-1592"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_28_3_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_28_3.jpg?w=1000" alt="walle_0_42_28_3" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_28_3.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_28_3.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_28_3.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1592">Transitional area between the coach and elite decks, showing arched supports around the central transportation line.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1595" aria-describedby="caption-attachment-1595"><a href="https://flic.kr/p/eae7XA"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_cafe.jpg?w=1000" alt="walle_calatrava_milwaukee_cafe.jpg" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_cafe.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_cafe.jpg?w=150&amp;h=111 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_cafe.jpg?w=300&amp;h=221 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1595">Café Calatrava, Milwaukee Art Museum, Wisconsin. Designed by Santiago Calatrava, completed in 2001.&nbsp;<a href="https://flic.kr/p/eae7XA">Photograph by Peter Alfred Hess, CC BY 2.0</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1594" aria-describedby="caption-attachment-1594"><a href="https://flic.kr/p/cosGR9"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_lyon_concourse.jpg?w=1000" alt="walle_calatrava_lyon_concourse" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_lyon_concourse.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_lyon_concourse.jpg?w=150&amp;h=113 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_lyon_concourse.jpg?w=300&amp;h=225 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1594">Concourse and roof supports, Lyon–Saint-Exupéry Airport Railway Station, Colombier-Saugnieu, France. Designed by Santiago Calatrava, completed in 1994.&nbsp;<a href="https://flic.kr/p/cosGR9">Photograph by Ingolf, CC BY-SA 2.0</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1591" aria-describedby="caption-attachment-1591"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_24_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_24.jpg?w=1000" alt="walle_0_41_24" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_24.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_24.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_41_24.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1591">An arched glass half-dome in the coach deck’s food court.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1593" aria-describedby="caption-attachment-1593"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_44_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_44.jpg?w=1000" alt="walle_0_42_44" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_44.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_44.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_42_44.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1593">Close-up of the base of the captain’s control tower, showing its arched, glass-fronted entrance.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1596" aria-describedby="caption-attachment-1596"><a href="https://flic.kr/p/82YLtB"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_exterior_detail.jpg?w=1000" alt="walle_calatrava_milwaukee_exterior_detail" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_exterior_detail.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_exterior_detail.jpg?w=150&amp;h=100 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_milwaukee_exterior_detail.jpg?w=300&amp;h=200 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1596">Exterior detail, Milwaukee Art Museum, Wisconsin. Designed by Santiago Calatrava, completed in 2001.&nbsp;<a href="https://flic.kr/p/82YLtB">Photograph by joevare, CC BY-ND 2.0</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1597" aria-describedby="caption-attachment-1597"><a href="https://flic.kr/p/dmTZZa"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_tenerife_arch.jpg?w=1000" alt="walle_calatrava_tenerife_arch" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_tenerife_arch.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_tenerife_arch.jpg?w=150&amp;h=79 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_calatrava_tenerife_arch.jpg?w=300&amp;h=158 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1597">Arched exterior of the Adán Martín Auditorio de Tenerife, Santa Cruz de Tenerife. Designed by Santiago Calatrava, completed in 2003.&nbsp;<a href="https://flic.kr/p/dmTZZa">Photograph by Rick Ligthelm, CC BY 2.0</a>.</figcaption></figure>
<p>The other main influence for the <em>Axiom</em>’s architecture is the design of the <a href="https://en.wikipedia.org/wiki/Tomorrowland">Tomorrowland</a> area of <a href="https://en.wikipedia.org/wiki/Disneyland">Disneyland</a>, in California. According to production designer Ralph Eggleston, during the movie’s production <em>WALL·E</em>’s design team visited an exhibition of Tomorrowland concept art and took inspiration from the designs therein.&nbsp;Perhaps the most obvious of these influences is the presence of a PeopleMover transportation system running through the middle of the club and elite decks, in a style very similar to the <a href="https://en.wikipedia.org/wiki/PeopleMover">PeopleMover</a> at Tomorrowland. (Do check out DaveLandWeb’s fantastic <a href="https://www.davelandweb.com/peoplemover/">PeopleMover photo page</a> for some great examples of the original in action.)</p>
<figure data-shortcode="caption" id="attachment_1598" aria-describedby="caption-attachment-1598"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_24_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_24.jpg?w=1000" alt="walle_0_40_24" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_24.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_24.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_40_24.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1598">The club deck’s circular PeopleMover loading area.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1599" aria-describedby="caption-attachment-1599"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_26_2_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_26_2.jpg?w=1000" alt="walle_1_19_26_2" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_26_2.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_26_2.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_26_2.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1599">Raised PeopleMover tracks running along the length of the club deck.</figcaption></figure>
<p>The evolution of Disney’s PeopleMover concept began with the <a href="https://en.wikipedia.org/wiki/1964_New_York_World%27s_Fair">1964–65 New York World’s Fair</a>, for which the Ford Motor Company asked Disney to <a href="https://www.thehenryford.org/collections-and-research/digital-collections/artifact/67807/#slide=gs-292282">design an attraction</a> to compete with General Motors’ <a href="http://www.nywf64.com/gm06.shtml">Futurama II</a> exhibit. The resulting <a href="https://www.waltdisney.org/blog/beyond-magic-skyway">Magic Skyway</a> gave fairgoers an opportunity to ride in a <a href="https://www.thehenryford.org/collections-and-research/digital-collections/artifact/361330/">driverless Ford convertible</a>—including the just-launched Ford Mustang—through a diorama that transported them from prehistoric times to a futuristic space city.</p>
<p>Following its success at the World’s Fair, the traction system behind Magic Skyway was adapted into a new feature for Tomorrowland’s 1967 relaunch. The new attraction, known as the WEDway PeopleMover, enabled <strong>W</strong>alter <strong>E</strong>lias <strong>D</strong>isney to follow Axel Lennart Wenner-Gren (of ALWEG monorail fame) in naming a futuristic transportation mechanism with his initials. It also provided an ideal inspiration for the <em>Axiom</em>’s central transport system.</p>
<p>The <em>Axiom</em>’s PeopleMover has much in common with its WEDway counterpart. Both are focused on a main circular loading area in the heart of a central plaza, with a long, straight stretch of track extending away from the loading deck. Both give passengers a tantalizing view of surrounding attractions as they are transported from one area to another. Indeed, I am sure Walt Disney would have been delighted to see his dream of future transportation integrated into the <em>Axiom</em>’s space-age environment, especially given that Disneyland’s PeopleMover was a prototype for Walt’s grander vision of futuristic living. Walt planned to build a larger PeopleMover installation as part of his <a href="https://en.wikipedia.org/wiki/EPCOT_(concept)">Experimental Prototype Community of Tomorrow</a>, or EPCOT—a new and futuristic city to be created from scratch at his planned Disney World Resort in Florida.</p>
<p>In October 1966, Walt recorded <a href="https://sites.google.com/site/theoriginalepcot/film-transcript">a short film</a> pitching his “Florida Project” to industrialists and legislators, including a detailed description of EPCOT’s transportation system. In this new city, cars and trucks were to be pushed underground, with the community’s twenty thousand residents instead traveling by WEDway and monorail to work, play, and socialize. The concept images below from Walt’s EPCOT film give an idea of just how much imagination the creative brains at WED Enterprises applied, under Walt’s careful guidance, to everyday living challenges.</p>
<figure data-shortcode="caption" id="attachment_1600" aria-describedby="caption-attachment-1600"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_18_23_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_18_23.jpg?w=1000" alt="epcot_0_18_23" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_18_23.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_18_23.jpg?w=150&amp;h=114 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_18_23.jpg?w=300&amp;h=228 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1600">EPCOT’s transportation was planned on a radial system, as this schematic from Walt’s EPCOT film demonstrates. City residents use a series of PeopleMover systems (shown here as light blue spokes) to travel from their homes on the outskirts of the city to the central transport hub. Should they need to travel to other parts of Disney World, they then transfer to a high-speed monorail system (shown here in red).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1601" aria-describedby="caption-attachment-1601"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_01_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_01.jpg?w=1000" alt="epcot_0_20_01" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_01.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_01.jpg?w=150&amp;h=114 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_01.jpg?w=300&amp;h=228 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1601">Concept art showing one half of EPCOT’s main transportation lobby. The longer-distance monorail service (right) runs through the center of the lobby, with shorter-distance WEDway PeopleMover services departing from the edges of the lobby (left). Cars and trucks are pushed underground into lower levels of the city’s transportation network (bottom).</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1602" aria-describedby="caption-attachment-1602"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_15_58_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_15_58.jpg?w=1000" alt="epcot_0_15_58" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_15_58.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_15_58.jpg?w=150&amp;h=114 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_15_58.jpg?w=300&amp;h=228 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1602">Concept art from the EPCOT film, showing a PeopleMover and Monorail passing through the city’s central shopping district.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1603" aria-describedby="caption-attachment-1603"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_57_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_57.jpg?w=1000" alt="epcot_0_20_57" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_57.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_57.jpg?w=150&amp;h=114 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_20_57.jpg?w=300&amp;h=228 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1603">In Walt’s EPCOT proposal, the city’s WEDway PeopleMovers (shown here as light blue spokes) transport residents through the city’s greenbelt, past sports facilities and schools…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1604" aria-describedby="caption-attachment-1604"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_21_33_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_21_33.jpg?w=1000" alt="epcot_0_21_33.jpg" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_21_33.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_21_33.jpg?w=150&amp;h=114 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/epcot_0_21_33.jpg?w=300&amp;h=228 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1604">…to residential areas in the city’s suburban districts, complete with footpaths and children’s play areas.</figcaption></figure>
<p>Tragically, Walt Disney died less than two months after his EPCOT introduction was filmed, passing away before the pitch was screened and before New Tomorrowland opened to the public. His ambitious vision of a prototype community did not become a reality, but its name lives on in the Epcot theme park (formerly “EPCOT Center”) at Walt Disney World in Florida—although the eventual EPCOT park became more of a permanent World’s Fair than a real-life city of the future. The WEDway PeopleMover did not realize its potential, either: The Disneyland attraction closed in 1995, to be replaced by the faster (but short-lived) <a href="https://en.wikipedia.org/wiki/Rocket_Rods">Rocket Rods</a> ride, which itself closed in 2001.</p>
<p>Disneyland park-goers can still see the PeopleMover’s abandoned tracks snaking through Tomorrowland, displaying curved, arched supports that Santiago Calatrava would surely approve of. (Thankfully, a PeopleMover can still be experienced at the <a href="https://en.wikipedia.org/wiki/Magic_Kingdom">Magic Kingdom park</a> at the Walt Disney World Resort in Florida, where the <a href="https://en.wikipedia.org/wiki/Tomorrowland_Transit_Authority_PeopleMover">Tomorrowland Transit Authority PeopleMover</a> continues to provide a leisurely tour of nearby attractions.)</p>
<figure data-shortcode="caption" id="attachment_1605" aria-describedby="caption-attachment-1605"><a href="https://flic.kr/p/7992RM"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_peoplemover_tracks_underside.jpg?w=1000" alt="walle_peoplemover_tracks_underside" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_peoplemover_tracks_underside.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_peoplemover_tracks_underside.jpg?w=150&amp;h=113 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_peoplemover_tracks_underside.jpg?w=300&amp;h=225 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1605">An overhead section of the now-disused PeopleMover track in Tomorrowland, seen in 2009.&nbsp;<a href="https://flic.kr/p/7992RM">Photograph by Loren Javier, CC BY-ND 2.0</a>.</figcaption></figure>
<p>Of course, the PeopleMover also lives on via the <em>Axiom</em>, whose reimagining of the concept is almost a microcosm of Walt’s vision for EPCOT. Aboard the <em>Axiom</em>, it’s a PeopleMover (not a monorail) that fulfills the role of high-speed arterial transport, with individual BnL hover chairs completing the “final mile” of the journey via preset illuminated paths (blue for humans, white for robots, red for stewardbots). It may not match the scale of Disney’s EPCOT dream, but it’s nonetheless fitting that Walt’s vision of a transportational future made the trip into space.</p>
<figure data-shortcode="caption" id="attachment_1606" aria-describedby="caption-attachment-1606"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_33_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_33.jpg?w=1000" alt="walle_1_19_33" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_33.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_33.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_33.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1606">Illuminated paths provide hover-chair routes throughout the <em>Axiom</em>…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1607" aria-describedby="caption-attachment-1607"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_37_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_37.jpg?w=1000" alt="walle_1_19_37.jpg" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_37.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_37.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_19_37.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1607">…defining a “final mile” pathway to each passenger’s room. Here, the normally blue “human” pathways have turned bright green to indicate that plant life has been found and the <em>Axiom</em> is preparing to return to Earth.</figcaption></figure>
<p>During WALL·E’s tour of the passenger decks, we discover that the <em>Axiom</em>’s computer is voiced by none other than <em>Alien</em>’s Ellen Ripley. Casting <a href="https://en.wikipedia.org/wiki/Sigourney_Weaver">Sigourney Weaver</a> as the disembodied voice of a space-based computer is clearly ironic, especially given her experience with such voices in <em>Alien</em> and <em>Aliens</em>. <em>WALL·E</em> ups the irony by having Weaver narrate not one but two scenes that would feel all too familiar to her xenomorph-hunting counterpart, triggering bonus space-peril associations for <em>Alien</em> fans. (Weaver also plays a disembodied voice in Andrew Stanton’s <a href="https://en.wikipedia.org/wiki/Finding_Dory"><em>Finding Dory</em></a>, aping her narration of nature documentaries.)</p>
<figure data-shortcode="caption" id="attachment_1608" aria-describedby="caption-attachment-1608"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_17_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_17.jpg?w=1000" alt="walle_0_58_17" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_17.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_17.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_17.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1608">“Twenty seconds to self-destruct,” says Ripley, as WALL·E tries in vain to stop his LifePod’s self-destruct sequence.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1609" aria-describedby="caption-attachment-1609"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/alien_1_42_54_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/alien_1_42_54.jpg?w=1000" alt="alien_1_42_54" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/alien_1_42_54.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/alien_1_42_54.jpg?w=150&amp;h=64 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/alien_1_42_54.jpg?w=300&amp;h=128 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1609">Ripley knows what she’s talking about—she was counted down to self-destruction herself in <em>Alien</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1610" aria-describedby="caption-attachment-1610"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_13_25_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_13_25.jpg?w=1000" alt="walle_1_13_25" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_13_25.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_13_25.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_13_25.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1610">“Activating airlock disposal,” says Ripley, as EVE and WALL·E try to avoid being sucked out of an industrial-sized airlock…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1611" aria-describedby="caption-attachment-1611"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_54_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_54.jpg?w=1000" alt="walle_1_12_54" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_54.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_54.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_12_54.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1611">…with spinning red lights around the sides.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1612" aria-describedby="caption-attachment-1612"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/aliens_2_11_46_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/aliens_2_11_46.jpg?w=1000" alt="aliens_2_11_46" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/aliens_2_11_46.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/aliens_2_11_46.jpg?w=150&amp;h=81 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/aliens_2_11_46.jpg?w=300&amp;h=162 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1612">Ripley knows what she’s talking about—she narrowly avoided airlock doom herself in <em>Aliens</em>.</figcaption></figure>
<p><em>Alien</em> and <em>Aliens</em> are not the only sci-fi movies to get a nod from <em>WALL·E</em>. On the <em>Axiom</em> bridge, we meet AUTO, the ship’s autopilot robot. It might be hard to believe just by looking at him, but AUTO is actually an Evil Space-Based Computer. His design is clearly influenced by a certain other ESBC—that central red eye is a direct reference to <em>2001: A Space Odyssey</em>’s HAL, giving an immediate signal that this robot is not to be trusted.</p>
<figure data-shortcode="caption" id="attachment_1613" aria-describedby="caption-attachment-1613"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_41_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_41.jpg?w=1000" alt="walle_0_43_41" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_41.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_41.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_43_41.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1613">AUTO, the <em>Axiom</em> autopilot. Aspects of his design may be familiar to those of you who have read the <a href="https://typesetinthefuture.com/2014/01/31/2001-a-space-odyssey/"><em>2001</em> article</a>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1614" aria-describedby="caption-attachment-1614"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_01_53_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_01_53.jpg?w=1000" alt="2001_1_01_53" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_01_53.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_01_53.jpg?w=150&amp;h=68 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_01_53.jpg?w=300&amp;h=135 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1614">HAL, the <em>Discovery One</em> autopilot. Aspects of his design may be familiar to those of you who are reading this <em>WALL·E</em> article.</figcaption></figure>
<p>AUTO’s physical similarity to HAL gives him a practical similarity, too. On the rare occasions we see the world from AUTO’s vantage point, we get an extreme fish-eye view of the surrounding area, just as we did for HAL in <em>2001</em>. WALL·E combines HAL’s fish-eye view with <em>The Terminator</em>’s red HUD hue, making AUTO’s evil intent doubly clear to any discerning fan of sci-fi.</p>
<figure data-shortcode="caption" id="attachment_1615" aria-describedby="caption-attachment-1615"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_18_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_18.jpg?w=1000" alt="walle_1_07_18" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_18.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_18.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_18.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1615">AUTO’s fish-eye view, from <em>WALL·E</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1616" aria-describedby="caption-attachment-1616"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_08_35_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_08_35.jpg?w=1000" alt="2001_1_08_35" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_08_35.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_08_35.jpg?w=150&amp;h=68 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_08_35.jpg?w=300&amp;h=135 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1616">HAL’s fish-eye view, from <em>2001: A Space Odyssey</em>.</figcaption></figure>
<p>AUTO and HAL belong to a long-standing tradition of sci-fi automata whose glowing red eye(s) give away their evil nature. They really are everywhere in sci-fi movies—from the Model 101 in <em><a href="https://en.wikipedia.org/wiki/The_Terminator">The Terminator</a></em>, via the replicants in <em><a href="https://en.wikipedia.org/wiki/Blade_Runner">Blade Runner</a></em>, to the evil wriggly thing inserted into Neo’s belly button in <a href="https://en.wikipedia.org/wiki/The_Matrix"><em>The Matrix</em></a>.</p>
<figure data-shortcode="caption" id="attachment_1617" aria-describedby="caption-attachment-1617"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_31_21_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_31_21.jpg?w=1000" alt="terminator_1_31_21" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_31_21.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_31_21.jpg?w=150&amp;h=81 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/terminator_1_31_21.jpg?w=300&amp;h=162 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1617">After having all of its skin burnt off in a fire, <em>The Terminator</em>’s T-800 displays some impressive evil red eyes.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1618" aria-describedby="caption-attachment-1618"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_0_21_17_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_0_21_17.jpg?w=1000" alt="matrix_0_21_17" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_0_21_17.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_0_21_17.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_0_21_17.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1618">The evil wriggly thing that works its way into Neo’s belly in <em>The Matrix</em> has a trademark evil red eye.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1619" aria-describedby="caption-attachment-1619"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_2_01_19_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_2_01_19.jpg?w=1000" alt="matrix_2_01_19" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_2_01_19.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_2_01_19.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/matrix_2_01_19.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1619">The sentinels in <em>The Matrix</em> take evil red eyes to a whole new level.</figcaption></figure>
<p>That red glow has its benefits, however. You can always tell when an evil robot has been finally defeated from the fact that its red eye(s) slowly fade to black. <em>The Terminator</em>’s T-800, <em>The Matrix</em>’s wriggly thing, and <em>WALL·E</em>’s AUTO all follow this trope when deactivated.</p>
<figure data-shortcode="caption" id="attachment_1620" aria-describedby="caption-attachment-1620"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_terminator_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_terminator.jpg?w=1000" alt="red_eye_fade_the_terminator" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_terminator.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_terminator.jpg?w=136&amp;h=150 136w, https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_terminator.jpg?w=273&amp;h=300 273w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1620">As The Terminator’s T-800 is squished beneath the sheets of an industrial steel press,&nbsp;its evil red eye fades slowly to black.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1621" aria-describedby="caption-attachment-1621"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_matrix_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_matrix.jpg?w=1000" alt="red_eye_fade_the_matrix" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_matrix.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_matrix.jpg?w=150&amp;h=127 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_the_matrix.jpg?w=300&amp;h=253 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1621">After removing the wriggly thing from Neo’s belly, Trinity discards it in the rain,&nbsp;where its evil red eye fades slowly to black.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1622" aria-describedby="caption-attachment-1622"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_walle_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_walle.jpg?w=1000" alt="red_eye_fade_walle" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_walle.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_walle.jpg?w=150&amp;h=128 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/red_eye_fade_walle.jpg?w=300&amp;h=256 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1622">After switching the <em>Axiom</em> from autopilot to manual control,&nbsp;AUTO’s evil red eye fades slowly to black.</figcaption></figure>
<p>AUTO may look like the movie’s bad guy, but his actions are simply an example of artificial intelligence following its programming too literally. To understand his motives, we must remember that BnL’s original plan was for its star liners to return to Earth as soon as an EVE probe found proof that life was once more sustainable. Five years after their departure, however, BnL autopilots were sent a directive by CEO Shelby Forthright telling them to keep their craft in space indefinitely, because the cleanup process on Earth was not going to succeed. Six hundred and ninety-five years later, with no subsequent instructions to the contrary, AUTO is simply following this command to the letter, blocking any and all attempts to return to Earth.</p>
<p>In this regard, AUTO is eerily similar to <em>2001</em>’s HAL, whose murderous tendencies aboard the <em>Discovery</em> were similarly driven by an inability to reconcile a contradiction in his programming. In the movie’s sequel, <em><a href="https://en.wikipedia.org/wiki/2010:_The_Year_We_Make_Contact">2010: The Year We Make Contact</a></em>, we learn that the basic purpose of HAL’s design was “the accurate processing of information without distortion or concealment.” We also discover that HAL was instructed (via Directive NSD 342/23) to lie to Dave and Frank about the real reason for the <em>Discovery</em>’s mission. After lip-reading that they planned to disconnect him, HAL determined that the only logical way for him to both keep processing and avoid lying was for Dave and Frank to die.</p>
<p>AUTO’s own instruction is Directive A113, whose numbering may sound familiar to Pixar fans. “<a href="https://en.wikipedia.org/wiki/A113">A113</a>” appears in every Pixar film, from a family license plate in <em>Toy Story</em> to an underwater camera model in <em>Finding Nemo</em>. (Indeed, it’s even in <em><a href="https://en.wikipedia.org/wiki/Brave_(2012_film)">Brave</a></em>, where the roman numerals ACXIII appear carved just above the front door of a witch’s hut.) The reason for its repeated inclusion is that room A1-13 was the classroom for the <a href="https://filmvideo.calarts.edu/programs/character-animation">Character Animation Program</a> at the <a href="https://en.wikipedia.org/wiki/California_Institute_of_the_Arts">California Institute of the Arts</a>, where Pixar alumni <a href="https://en.wikipedia.org/wiki/John_Lasseter">John Lasseter</a>, <a href="https://en.wikipedia.org/wiki/Pete_Docter">Pete Docter</a>, and Andrew Stanton studied. (This explains why it’s also the number on the door of Riley’s classroom in <a href="https://en.wikipedia.org/wiki/Inside_Out_(2015_film)"><em>Inside Out</em></a>, and on the Scaring 101 classroom door in <a href="https://en.wikipedia.org/wiki/Monsters_University"><em>Monsters University</em></a>.) <em>WALL·E</em> may be its highest-profile outing, but it’s there in every Pixar movie if you keep your eyes peeled.</p>
<figure data-shortcode="caption" id="attachment_1623" aria-describedby="caption-attachment-1623"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_21_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_21.jpg?w=1000" alt="walle_1_07_21" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_21.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_21.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_07_21.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1623">AUTO triggers Directive A113.</figcaption></figure>
<p>The majority of <em>WALL·E</em>’s robots are voiced by <a href="https://en.wikipedia.org/wiki/Ben_Burtt">Ben Burtt</a>, the Academy Award-winning sound designer and creator of R2D2’s bleeps. AUTO’s voice, however, is provided by <a href="https://en.wikipedia.org/wiki/PlainTalk">MacInTalk</a>, a speech synthesis technology <a href="https://www.youtube.com/watch?v=2B-XwPjn9YY&amp;feature=youtu.be&amp;t=3m10s">first used to announce the Apple Macintosh computer in January 1984</a>. (You may also recognize MacInTalk as the lead vocalist on <a href="https://en.wikipedia.org/wiki/Radiohead">Radiohead</a>’s “Fitter Happier,” from 1997’s <a href="https://en.wikipedia.org/wiki/OK_Computer"><em>OK Computer</em></a> album.)</p>
<p>MacInTalk’s inclusion in <em>WALL·E</em> makes it one of only two Apple voice synthesis technologies to star in a feature film; the other is <a href="https://en.wikipedia.org/wiki/Siri">Siri</a>, who provides the voice for ’Puter, Batman’s high-tech assistant in <em><a href="https://en.wikipedia.org/wiki/The_Lego_Batman_Movie">The LEGO Batman Movie</a></em>.</p>
<figure data-shortcode="caption" id="attachment_1624" aria-describedby="caption-attachment-1624"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/lego_batman_0_08_22_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/lego_batman_0_08_22.jpg?w=1000" alt="lego_batman_0_08_22" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/lego_batman_0_08_22.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/lego_batman_0_08_22.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/lego_batman_0_08_22.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1624">“‘Puter”, Batman’s Siri-based computer assistant, from <em>The LEGO Batman Movie</em>. (The Batmobile’s interfaces are, perhaps inevitably, set in Eurostile Bold.)</figcaption></figure>
<p>Despite the technology’s age, I’m happy to report that MacInTalk voices still ship with macOS today. If you’d like to turn your Mac into an Evil Space-Based Computer, simply open the System Preferences application, select Accessibility and then Speech, and enable the “Ralph” system voice.</p>
<p>In addition to AUTO, there are two more nods to <em>2001: A Space Odyssey</em> in <em>WALL·E</em>, both of which take advantage of preexisting associations for dramatic or comedic effect. The first is WALL·E’s brief escapade in a LifePod, the design of which seems clearly inspired by <em>2001</em>’s EVA pods. That iconic ball-like shape immediately triggers an association with interstellar peril, which WALL·E soon discovers is entirely justified.</p>
<figure data-shortcode="caption" id="attachment_1625" aria-describedby="caption-attachment-1625"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_14_18_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_14_18.jpg?w=1000" alt="2001_1_14_18" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_14_18.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_14_18.jpg?w=150&amp;h=68 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_14_18.jpg?w=300&amp;h=135 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1625">One of the <em>Discovery</em>’s EVA pods is activated in <em>2001: A Space Odyssey</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1626" aria-describedby="caption-attachment-1626"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_56_42_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_56_42.jpg?w=1000" alt="walle_0_56_42.jpg" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_56_42.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_56_42.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_56_42.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1626">One of the <em>Axiom</em>’s LifePods is activated in <em>WALL·E</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1627" aria-describedby="caption-attachment-1627"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_15_38_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_15_38.jpg?w=1000" alt="2001_1_15_38" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_15_38.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_15_38.jpg?w=150&amp;h=68 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/2001_1_15_38.jpg?w=300&amp;h=135 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1627">The pod design in <em>2001</em> has many similarities with its <em>WALL·E</em> counterpart…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1628" aria-describedby="caption-attachment-1628"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_24_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_24.jpg?w=1000" alt="walle_0_58_24" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_24.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_24.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_0_58_24.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1628">…though it does not (as far as we know) include an optional satellite dish, parachute, flare set, or inflatable life raft.</figcaption></figure>
<p>The second <em>2001</em> reference is a knowing usage of <a href="https://en.wikipedia.org/wiki/Richard_Strauss">Richard Strauss</a>’s <a href="https://en.wikipedia.org/wiki/Also_sprach_Zarathustra_(Strauss)"><em>Also sprach Zarathustra</em></a>, when Captain McCrea becomes the first human to stand up and walk in possibly hundreds of years. It’s an appropriate enough use of the music—<em>2001</em>’s monoliths oversee (and supposedly trigger) several leaps in mankind’s evolution, so it’s entirely valid to hear those famous chords when the captain makes his first steps (even though this is technically a regression, not an evolution).</p>
<figure data-shortcode="caption" id="attachment_1629" aria-describedby="caption-attachment-1629"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_09_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_09.jpg?w=1000" alt="walle_1_22_09" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_09.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_09.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_09.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1629">Determined to tackle the mutinous AUTO, Captain McCrea steadies himself…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1630" aria-describedby="caption-attachment-1630"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_14_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_14.jpg?w=1000" alt="walle_1_22_14" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_14.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_14.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_22_14.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1630">…and drags himself to his feet, to the tune of <em>Also sprach Zarathustra</em>.</figcaption></figure>
<p>Of course, <em>WALL·E</em> is not alone in riffing on Strauss’s classic melody. It is similarly parodied in <a href="https://en.wikipedia.org/wiki/Charlie_and_the_Chocolate_Factory_(film)"><em>Charlie and the Chocolate Factory</em></a> (as a <em>2001</em> monolith turns into a bar of chocolate) and <a href="https://en.wikipedia.org/wiki/Zoolander"><em>Zoolander</em></a> (as Hansel considers smashing Mugatu’s iMac with a nearby bone). If that’s not enough, it’s also in Pixar’s <em>Toy Story 2</em> and <a href="https://en.wikipedia.org/wiki/Cars_3"><em>Cars 3</em></a>, plus other animated movies including <a href="https://en.wikipedia.org/wiki/Kung_Fu_Panda_3"><em>Kung Fu Panda 3</em></a>, <a href="https://en.wikipedia.org/wiki/The_Pirates!_In_an_Adventure_with_Scientists!"><em>The Pirates! In an Adventure with Scientists!</em></a>, and <a href="https://en.wikipedia.org/wiki/The_Simpsons_Movie"><em>The Simpsons Movie</em></a>. On the live-action front, it’s in <em><a href="https://en.wikipedia.org/wiki/Man_on_the_Moon_(film)">Man on the Moon</a></em>, <a href="https://en.wikipedia.org/wiki/Catch-22_(film)"><em>Catch-22</em></a>, <a href="https://en.wikipedia.org/wiki/Night_at_the_Museum:_Secret_of_the_Tomb"><em>Night at the Museum: Secret of the Tomb</em></a>, <a href="https://en.wikipedia.org/wiki/Clueless_(film)"><em>Clueless</em></a>, <a href="https://en.wikipedia.org/wiki/Turner_%26_Hooch"><em>Turner &amp; Hooch</em></a>, and <a href="https://en.wikipedia.org/wiki/Harold_%26_Kumar_Go_to_White_Castle"><em>Harold &amp; Kumar Go to White Castle</em></a>, to mention just a few.</p>
<figure data-shortcode="caption" id="attachment_1631" aria-describedby="caption-attachment-1631"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_45_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_45.jpg?w=1000" alt="charlie_1_26_45" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_45.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_45.jpg?w=150&amp;h=85 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_45.jpg?w=300&amp;h=169 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1631">In 2005’s <em>Charlie and the Chocolate Factory</em>, Willy Wonka transports a bar of chocolate via television to the tune of <em>Also sprach Zarathustra</em>…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1632" aria-describedby="caption-attachment-1632"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_48_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_48.jpg?w=1000" alt="charlie_1_26_48" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_48.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_48.jpg?w=150&amp;h=85 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/charlie_1_26_48.jpg?w=300&amp;h=169 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1632">…transforming <em>2001</em>’s famous monolith into a bar of Wonka Nutty Crunch Surprise.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1633" aria-describedby="caption-attachment-1633"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_12_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_12.jpg?w=1000" alt="zoolander_1_09_12" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_12.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_12.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_12.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1633">In 2001’s <em>Zoolander</em>, non-evolved male models Derek Zoolander and Hansel smack an iMac chimpanzee-style to the tune of <em>Also sprach Zarathustra</em>…</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1635" aria-describedby="caption-attachment-1635"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_21_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_21.jpg?w=1000" alt="zoolander_1_09_21" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_21.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_21.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/zoolander_1_09_21.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1635">…before Hansel grabs a handy bone to use as a tool.</figcaption></figure>
<p>Despite AUTO’s best efforts, McCrea manages to switch him to MANUAL and sets the <em>Axiom</em> on a hyperjump trajectory back to Earth. The hyperjump looks exactly like you’d expect, which is exactly like the USS <em>Enterprise</em> engaging warp drive in <a href="https://en.wikipedia.org/wiki/Star_Trek:_The_Motion_Picture"><em>Star Trek: The Motion Picture</em></a>.</p>
<figure data-shortcode="caption" id="attachment_1636" aria-describedby="caption-attachment-1636"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_walle_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_walle.jpg?w=1000" alt="walle_hyperjump_walle" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_walle.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_walle.jpg?w=114&amp;h=150 114w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_walle.jpg?w=228&amp;h=300 228w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1636">The <em>Axiom</em> makes a hyperjump toward Earth in <em>WALL·E</em>.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1637" aria-describedby="caption-attachment-1637"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_startrek_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_startrek.jpg?w=1000" alt="walle_hyperjump_startrek" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_startrek.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_startrek.jpg?w=114&amp;h=150 114w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_hyperjump_startrek.jpg?w=228&amp;h=300 228w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1637">The <em>Enterprise</em> engages warp drive toward “thataway” in <em>Star Trek: The Motion Picture</em>.</figcaption></figure>
<p>Once again, <em>WALL·E</em> is sneakily using prior sci-fi art as a shortcut, re-creating familiar effects so that the <em>Axiom</em>’s quick journey home can be explained without exposition. (It might also account for why everyone aboard the <em>Axiom</em> experiences a brief stint of <em>The Motion Picture</em>’s wormhole effect during the jump.)</p>
<figure data-shortcode="caption" id="attachment_1639" aria-describedby="caption-attachment-1639"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_0_40_28_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_0_40_28.jpg?w=1000" alt="startrek_0_40_28" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_0_40_28.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_0_40_28.jpg?w=150&amp;h=64 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/startrek_0_40_28.jpg?w=300&amp;h=128 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1639">The <em>Enterprise</em> bridge goes all “wormhole effect” when it engages warp speed while still within the solar system.</figcaption></figure>
<figure data-shortcode="caption" id="attachment_1640" aria-describedby="caption-attachment-1640"><a href="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_24_09_full.jpg"><img loading="lazy" src="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_24_09.jpg?w=1000" alt="walle_1_24_09" srcset="https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_24_09.jpg 560w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_24_09.jpg?w=150&amp;h=62 150w, https://typesetinthefuture.com/wp-content/uploads/2018/08/walle_1_24_09.jpg?w=300&amp;h=125 300w" sizes="(max-width: 560px) 100vw, 560px"></a><figcaption id="caption-attachment-1640">EVE and WALL·E go all “wormhole effect” when the <em>Axiom</em> hyperjumps back to Earth.</figcaption></figure>
<p>As these homages show, <em>WALL·E</em> is not afraid to borrow from its predecessors to gain some free sci-fi association. Indeed, such references are celebrated and elevated, drawing on the production team’s clear fondness for vintage sci-fi to create a movie that is both a love letter to the classics and a worthy addition to the list. <em>WALL·E</em> capitalizes on our existing associations with the future to communicate complex plot points and motives with minimal dialogue and text. It is, to my mind, Pixar’s most realistic vision of an internally consistent world, despite the polar opposites of its Earth- and space-based environments. It’s political and satirical, representing utopia and dystopia with enough humor to poke fun at the downsides of both. In short, <em>WALL·E</em> envisages a future that could so easily be bleak and pessimistic—but is instead inspired by the naïveté of its inhuman heroes to re-create the optimism that took man into space in the first place.</p>
<hr>
<p><em>Wow! That was good, wasn’t it? What an amazing article! So amazing, in fact, that you probably want to impulse-buy the </em><a href="https://typesetinthefuture.com/book/">Typeset in the Future</a><em><a href="https://typesetinthefuture.com/book/"> book</a> it comes from, right this very second. Here are some convenient links to buy it from <a href="https://www.amazon.com/gp/product/1419727141/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=titf0f-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1419727141&amp;linkId=7cfbe17900870504a3a13c4e389c8456">Amazon</a> or <a href="https://www.barnesandnoble.com/w/typeset-in-the-future-dave-addey/1127947277?ean=9781419727146">Barnes and Noble</a>, or you can head down to your local bookstore (which it is much harder for me to link to) when the book is released on December 11 2018.</em></p>
<p><em>The book also includes an interview with Pixar designers Ralph Eggleston and Craig Foster about the making of </em>WALL·E<em>, plus six more equally amazing movie studies, alongside interviews with Paul Verhoeven </em>(Total Recall)<em> and Mike Okuda </em>(Star Trek)<em>. <a href="https://typesetinthefuture.com/book/">You can read more about it here if for some reason you’re still not convinced</a>.</em></p>
<p>– <a href="https://twitter.com/daveaddey">Dave Addey</a></p>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Majority of sites and apps use dark patterns in the marketing of subscriptions (191 pts)]]></title>
            <link>https://icpen.org/news/1360</link>
            <guid>40934898</guid>
            <pubDate>Thu, 11 Jul 2024 09:23:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://icpen.org/news/1360">https://icpen.org/news/1360</a>, See on <a href="https://news.ycombinator.com/item?id=40934898">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>A global internet sweep that examined the websites and mobile apps of 642 traders has found that <strong>75,7% of them employed at least one dark pattern, and 66,8% of them employed two or more dark patterns</strong>.</span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>Dark patterns are defined as practices commonly found in online user interfaces and that steer, deceive, coerce, or manipulate consumers into making choices that often are not in their best interests. </span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>This year’s annual International Consumer Protection and Enforcement Network (ICPEN) Sweep took place between January 29 and February 2, 2024. It involved participants, or “sweepers,” from 27 consumer protection enforcement authorities in 26 countries around the world.</span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>For the first time, the ICPEN sweep was coordinated with the Global Privacy Enforcement Network (GPEN). GPEN is a network of over 80 privacy enforcement authorities, which aims to foster cross-border cooperation across privacy regulators and strengthen personal privacy protections in an increasingly global market. </span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>The collaboration recognizes the growing intersection between consumer protection and other regulatory spheres. In the case of deceptive design patterns, it was clear to both privacy and consumer protection sweepers that many websites and apps employ techniques that interfere with individuals’ ability to make choices that best protect their consumer or privacy rights.</span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>Sweepers evaluated the sites and apps based on six indicators identified by the Organisation for Economic Co-operation and Development (OECD), as being characteristic of dark commercial patterns&nbsp;<a href="#_ftn1"><span><span><span lang="EN-GB" xml:lang="EN-GB"><span><span>[1]</span></span></span></span></span></a>. </span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>The ICPEN report found that potential <strong>sneaking</strong> practices, such as the inability of the consumer to turn off auto-renewal of subscription service, and <strong>interface interference</strong>, for example making a subscription that is advantageous to the trader more prominent, were encountered especially frequent during the sweep. </span></span></span></span></p>

<p><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>Both ICPEN and GPEN, who are working together to improve consumer and privacy protection for individuals around the world, published reports outlining their findings today. The ICPEN report can be found <a href="https://icpen.org/sites/default/files/2024-07/Public%20Report%20ICPEN%20Dark%20Patterns%20Sweep.pdf">here</a> and GPEN report can be found on their <a href="https://www.privacyenforcement.net/content/2024-gpen-sweep-deceptive-design-patterns">website</a>. </span></span></span></span></p>

<p><a href="https://icpen.org/sites/default/files/2024-07/Public%20Report%20ICPEN%20Dark%20Patterns%20Sweep.pdf"><span><span><span><span lang="EN-US" xml:lang="EN-US"><span><span><span>ICPEN Dark Patterns in Subscription Services Sweep </span></span></span></span></span></span></span><span><span><span><span lang="EN-US" xml:lang="EN-US"><span><span><span>Public Report</span></span></span></span></span></span></span></a></p>

<hr><p><span><span><a href="#_ftnref1"><span><span><span lang="EN-GB" xml:lang="EN-GB"><span>[1]</span></span></span></span></a> Dark Commercial Patterns: OECD Digital Economy Papers” (OECD Publishing, October 26, 2022), 9-11, https://doi.org/10.1787/44f5e846-en.</span></span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Engineering principles for building financial systems (160 pts)]]></title>
            <link>https://substack.wasteman.codes/p/engineering-principles-and-best-practices</link>
            <guid>40933110</guid>
            <pubDate>Thu, 11 Jul 2024 01:47:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://substack.wasteman.codes/p/engineering-principles-and-best-practices">https://substack.wasteman.codes/p/engineering-principles-and-best-practices</a>, See on <a href="https://news.ycombinator.com/item?id=40933110">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>Accounting hasn't really changed in the past couple of hundred years. Despite this, there is a lot of confusion around the right way of building software for financial systems. </p><p>In this post, I’ll share lessons from my years working on financial systems at big tech companies. Our focus will be building an accounting system, but the principles apply to more general financial systems as well.</p><p>This post will go over the following</p><ol><li><p>Basic financial definitions relevant to the post</p></li><li><p>High level goals of an accounting system</p></li><li><p>Engineering principles to achieve those goals </p></li><li><p>Best Practices </p></li></ol><ul><li><p><strong>General Ledger (GL)</strong><span>: The primary accounting record of the company, summarizing all financial transactions over a specific time period. You can think of this as an aggregation of it's corresponding sub-ledgers.</span></p></li><li><p><strong>Sub-ledger</strong><span>: Contains detailed information about all individual transactions related to a specific GL. Records in the sub ledger will have much more granular data then the general ledger, like who the specific customer is, specific line items in an order, etc. The difference in data between the sub-ledger and GL will depend on the type of business and volume of data you are working with. Some small businesses can get away with not having any sub-ledgers at all, but it is doubtful that they would ever need custom software to manage something that is so low in scale.</span></p></li><li><p><strong>Financial Record: </strong><span>This refers to the general ledger and sub-ledgers. </span></p></li><li><p><strong>Material: </strong><span>A financial event is considered </span><em>material</em><span> if it is significant enough to impact the decisions of stakeholders based on financial statements. Note that this definition is somewhat ambiguous by design, as different businesses have different materiality thresholds. For example what might be material for a business making $250,000 of revenue per year, will not be material for a business making $1 billion in revenue. </span></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png" width="378" height="837.2596153846154" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:3225,&quot;width&quot;:1456,&quot;resizeWidth&quot;:378,&quot;bytes&quot;:79366,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d4c2233-1b32-409a-9d0d-281470ab3469_1767x3914.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>The three main goals of your accounting system are to be </span><strong>(1) Accurate, (2) Auditable and (3) Timely.</strong></p><p>The financial record needs to reflect the known state of the business. This statement is a little broad and up to some interpretation so I will give some real examples.</p><p>If we sell a 10 units of a product that costs $9.99, the corresponding financial records must add up to $99.90. This seems obvious but when you are aggregating thousands (in a lot of cases millions) of transactions, simple summation or rounding errors between systems can cause material inaccuracies. </p><blockquote><p><strong>Wasteman’s Note: </strong><em>People say naming is the hardest problem in computer science, I would say a close second is addition. After working on large scale financial systems for the past few years, I can’t remember how many times the smallest bugs caused large discrepancies in our data. Also don’t get me started on summations over floats. I learned the hard way why you should always use integers.</em></p></blockquote><p><span>The financial record also needs to be </span><strong>complete</strong><span>. More specifically, both the sub-ledger and the general ledger are a complete representation of all business activities that occurred. If there is an event that occurred but is not in the financial record, than the system is not complete. </span></p><blockquote><p><strong>Wasteman’s Note: </strong><em>Another surprisingly really hard problem is guaranteeing completeness. As your system scales, data hops between many systems and at each hop data can easily be mutated or dropped by accident.</em><span> </span></p></blockquote><p>Very related to accuracy, your financial record must be easily auditable so that stakeholders can detect errors and accurately measure performance of your business. And even if you don’t care, the IRS definitely does. </p><p>This one depends entirely on your business and it's specific needs. Small businesses can get away with just dumping all numbers near the end of the month, just in time to close the books. Larger businesses generally want to avoid this, and have a near real time system. This allows them to monitor financials within the month, make decisions based on financial data faster, and reduce the rush to close the month/quarter in the first few days of the month.</p><p><span>But whatever that need is, our accounting system should meet the needs of your business, and whatever </span><strong>timely</strong><span> means to them.</span></p><blockquote><p><strong>Wasteman’s note: </strong><em><span>People tend to get lost in conversations about batch vs streaming systems with respect to timeliness a lot. My take is that this isn’t an important distinction to make. </span><a href="https://www.ververica.com/blog/batch-is-a-special-case-of-streaming" rel="">Batch is just a special case of streaming</a><span>. If you’re data is modeled correctly, its pretty easy to switch between them especially with unified frameworks like </span><a href="https://beam.apache.org/" rel="">Apache Beam</a><span>.</span></em></p></blockquote><p>The three main engineering principles your accounting system should abide by are</p><ol><li><p>Immutability and Durability of data</p></li><li><p>Data should be represented at the smallest grain</p></li><li><p>Code should be Idempotent</p></li></ol><p>This allows for auditability, which helps debugging and in turn accuracy. When data is immutable, you have a record of what the state of the system was at any given time. This makes it really easy to recompute the world from previous states, because no state is every lost.</p><p>Building on, once data is stated in the financial record it cannot be deleted. Any corrections to the system must be represented as a new financial transaction. For example let’s say your system had a bug and accidentally reported that a service was sold for $1000, when it should have been $900. To correct this mistake, you should first reverse the accounting entries corresponding to the mistake, and restate the accounting entry for the correct amount. </p><p>It will look something like this: </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png" width="1456" height="1237" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1237,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:87028,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcac99f71-fe2f-41b1-934e-6064f3ffb813_2336x1984.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>So you can see that in the financial record, there is evidence that the balance of Accounts Receivable (AR) and Revenue was $1000 at some point, but was corrected later. Even though that balance was incorrect, we want an audit trail of what the balance was at any given moment.</p><p>Similar to the above principle, this is also critical for enabling a clear audit trail. Even though financial reports and the general ledger are aggregated, they are computed from more granular events. When the data doesn't make sense, you need the most granular data to debug what might have been the issue. </p><p>Saving data at the lowest granularity also makes it really easy to correct data that is derived from that dataset. If a single immutable dataset is the core source of truth for all views of that data, to correct the view all you need to do is rerun the pipeline that creates that view after fixing your data. </p><p>Similarly when accountants are preparing to close the books, they reconcile account balances with all the transactions that occurred to validate that the books are accurate. When a discrepancy is discovered, you can dig into the exact transaction that might be causing the issue.</p><p>Every financial event can only be processed once, duplicates in the financial record will cause obvious inaccuracies. For that reason, all code that produces financial records should be idempotent.</p><p>Over the years, I have run into quite a few gotchas that have caused me a lot of pain. Below are best practices I recommend, to avoid the many pitfalls I have personally faced.</p><p><strong>Use integers to represent financial amounts</strong><span>. Makes arithmetic much easier. Avoid floats at all costs.</span></p><p><strong>Granularity of your financial amounts should support currency conversions with minimal loss of precision</strong><span>. If you are only working with dollars, representing values in cents might be sufficient. If you are a global business, prefer micros or a </span><code>DECIMAL(19, 4)</code><span>.  The decimal choice is quite popular among financial systems, but micros has been the standard for ads financial systems. This limits loss of precision when converting between currencies</span></p><blockquote><p><strong>Wasteman’s note: </strong><em>Micros of a currency = smallest unit * 1,000,000. E.g $1.23 = 1,230,000 micros. I first came across this when working with Google’s metrics API.</em></p></blockquote><p><strong>Use consistent rounding methodologies</strong><span>. At scale the way you round can create material differences between expected amounts. For example one rounding methodology is to round all values 5 and up to the next significant digit, and 4 and below rounds down. Another valid way is to always round up. All that matters is you are consistent across the board. When you are dealing with millions of transactions, being off by 1 cent per transaction can lead to material differences. (10 million transactions off by 1 cent, leads to a difference of $100k). This may not be material to your business at this scale, but it’s material enough for the government to come after you for underpaying taxes.</span></p><blockquote><p><strong>Wasteman’s note: </strong><em>If you are a global business there can be a lot of gotchas with rounding and currency conversions. I would go as far as saying you should make a centralized library/service to handle both rounding and currency conversions. Different governments respect different rounding rules when calculating taxes, so having all these nuances abstracted into a single service will reduce complexity.</em></p></blockquote><p><strong>Delay currency conversion as long as you can</strong><span>. Preemptively converting currencies can cause loss of precision. Delay currency conversions until after aggregations occur in their local currency.</span></p><p><strong>Use integer representations of time</strong><span>. This one is a little controversial but I stand by it. There are so many libraries in different technologies that parse timestamps into objects, and they all do them differently. Avoid this headache and just use integers. Unix timestamp, or even integer based UTC datetimes work perfectly fine. The less data conversions that occur between systems, the better. (Read about Etsy’s own problems with timestamp types </span><a href="https://www.etsy.com/codeascraft/the-problem-with-timeseries-data-in-machine-learning-feature-systems" rel="">here</a><span>)</span></p><blockquote><p><strong>Wasteman’s note: </strong><em>I haven’t even talked about daylight savings related bugs. Using an incrementing integer can help you avoid this altogether. If you really insist on using datetimestamps, please at least use UTC. You would be surprised at how many very large businesses use non UTC timestamps.</em></p></blockquote><p>Thanks for reading this post, I am sure I made a controversial statement somewhere but please feel free to comment and start a discussion. I am very open to learning and hearing other people’s thoughts. And if you enjoyed this post, consider supporting me by subscribing below!</p><p>And for further reading, here are some really good blog posts on accounting tailored towards software engineers.</p><ul><li><p><a href="https://drew.thecsillags.com/posts/2017-12-06-accounting-for-software-engineers/" rel="">Accounting for Software Engineers</a></p></li><li><p><a href="https://www.moderntreasury.com/journal/accounting-for-developers-part-i#does-accounting-really-matter-in-software-development" rel="">Accounting for Developers Part 1</a></p></li><li><p><a href="https://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html" rel="">Accounting for Computer Scientists</a></p></li></ul></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Dut, a fast Linux disk usage calculator (251 pts)]]></title>
            <link>https://codeberg.org/201984/dut</link>
            <guid>40932492</guid>
            <pubDate>Wed, 10 Jul 2024 23:29:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://codeberg.org/201984/dut">https://codeberg.org/201984/dut</a>, See on <a href="https://news.ycombinator.com/item?id=40932492">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="readme">
			
				<h2 id="user-content-dut-a-disk-usage-calculator-for-linux" dir="auto">dut - A disk usage calculator for Linux</h2>
<h2 id="user-content-features" dir="auto">Features</h2>
<ul dir="auto">
<li>Accurate counting of hard links with an output inspired by NCDU.</li>
<li>Pure ASCII output which is fully compatible with the plain Linux tty.</li>
<li>Configurable output format. Changing the maximum depth of files shown is a simple command-line
argument.</li>
</ul>
<h2 id="user-content-examples" dir="auto">Examples</h2>
<p dir="auto">By default, <code>dut</code> will output a tree of the biggest directories it finds under your current directory.</p>
<pre><code>$ dut -n 10
 2.4G    0B       /- Local
 2.4G    0B     /- AppData
 2.4G    0B   /- NetworkService
 2.4G    0B |- ServiceProfiles
 2.5G   63M |- servicing
 5.2G  423M |   /- FileRepository
 5.2G  426M | /- DriverStore
 9.6G  2.5G |- System32
  12G  7.2G /- WinSxS
  29G  225M .
</code></pre><p dir="auto">The <code>-n 10</code> option limits it to 10 rows. To limit the depth shown, use <code>-d &lt;n&gt;</code>.</p>
<pre><code>$ dut -n 10 -d 1
 964M    0B |- MEMORY.DMP
1010M    0B |- SoftwareDistribution
 1.2G  1.0G |- SysWOW64
 1.3G  208M |- assembly
 1.8G  1.8G |- SystemApps
 2.4G    0B |- ServiceProfiles
 2.5G   63M |- servicing
 9.6G  2.5G |- System32
  12G  7.2G /- WinSxS
  29G  225M .
</code></pre><p dir="auto">The first column in the output tells you how much space a given entry takes up on your disk.
This can be an overcount, however, because of hard links (identical files that are only stored
once on the disk). Hard links under a directory are deduplicated in the first column's number,
but hard links that go outside of a directory to somewhere else will still be counted here.</p>
<p dir="auto">That's where the second column comes in. It tells you how much of an entry's size is shared
with other entries outside of it because of hard links. In the output above, we can see that
most of the entries have a lot of data shared with other entries, but the root directory only
has 225M shared with others. This tells us that there's a lot of hard links going between all
of the entries shown above.</p>
<p dir="auto">If you want to see how much of an entry's size is unique to just it, you can subtract the second
column from the first one.</p>
<p dir="auto">The full list of options can be seen with <code>dut -h</code>.</p>
<h2 id="user-content-how-to-build" dir="auto">How to build</h2>
<p dir="auto"><code>dut</code> is a single source file, so all you need is a C11 compiler:</p>
<pre><code>gcc -O3 -flto main.c -o dut
</code></pre><p dir="auto">To install, copy the <code>dut</code> executable to a directory on your PATH, e.g. <code>/usr/local/bin</code>.</p>
<p dir="auto">If get linker errors about missing symbols, you may need to add the <code>-pthread</code> option to gcc.</p>
<h2 id="user-content-benchmarks" dir="auto">Benchmarks</h2>
<p dir="auto"><code>dut</code> is remarkably fast, but it doesn't win in all cases. It loses to a couple programs when
Linux's disk caches aren't populated yet, which is usually the first time you run it on a certain
directory. On subsequent runs, <code>dut</code> beats everything else by a significant margin.</p>
<p dir="auto">Benchmarked programs:</p>
<ul dir="auto">
<li><code>du</code> from <a href="https://www.gnu.org/software/coreutils/coreutils.html" rel="nofollow">coreutils</a> (C)</li>
<li><a href="https://github.com/byron/dua-cli" rel="nofollow"><code>dua</code></a> (Rust)</li>
<li><a href="https://github.com/KSXGitHub/parallel-disk-usage" rel="nofollow"><code>pdu</code></a> (Rust)</li>
<li><a href="https://github.com/bootandy/dust" rel="nofollow"><code>dust</code></a> (Rust)</li>
<li><a href="https://github.com/dundee/gdu" rel="nofollow"><code>gdu</code></a> (Go)</li>
</ul>
<p dir="auto">If you know of a faster program, let me know and I'll add it to these benchmarks.</p>
<h3 id="user-content-benchmark-1-measuring-performance-from-linux-s-disk-cache" dir="auto">Benchmark 1: Measuring performance from Linux's disk cache</h3>
<p dir="auto">The first benchmark is calculating the total disk usage of both of the SSDs in my laptop. I did
warm-up runs beforehand to make sure everything is cached, so this benchmark doesn't touch the disk
at all.</p>
<h4 id="user-content-specs" dir="auto">Specs</h4>
<ul dir="auto">
<li>CPU: i5-10500h</li>
<li>RAM: 16 GB</li>
<li>OS: Arch Linux, kernel 6.8.4</li>
</ul>
<p dir="auto">In order to make things fair, I forced <code>dut</code> and <code>dust</code> to output in color and show 60 rows. I also
added a 10 second sleep between each program's run to limit the effects of thermal throttling.</p>
<pre><code>$ hyperfine 'dut -Cn 60 /' 'du -sh /' 'pdu /' 'dust -n 60 /' 'gdu --non-interactive /' 'dua /' -s 'sleep 10' -i
Benchmark 1: dut -Cn 60 /
  Time (mean ± σ):     467.4 ms ±  11.7 ms    [User: 410.3 ms, System: 4595.4 ms]
  Range (min … max):   442.5 ms … 485.4 ms    10 runs

Benchmark 2: du -sh /
  Time (mean ± σ):      3.566 s ±  0.049 s    [User: 0.775 s, System: 2.743 s]
  Range (min … max):    3.486 s …  3.615 s    10 runs

  Warning: Ignoring non-zero exit code.

Benchmark 3: pdu /
  Time (mean ± σ):     732.1 ms ±  13.8 ms    [User: 1887.3 ms, System: 6123.5 ms]
  Range (min … max):   717.6 ms … 755.8 ms    10 runs

Benchmark 4: dust -n 60 /
  Time (mean ± σ):      1.438 s ±  0.031 s    [User: 3.068 s, System: 6.962 s]
  Range (min … max):    1.397 s …  1.481 s    10 runs

Benchmark 5: gdu --non-interactive /
  Time (mean ± σ):      1.361 s ±  0.103 s    [User: 7.556 s, System: 7.034 s]
  Range (min … max):    1.298 s …  1.569 s    10 runs

  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.

Benchmark 6: dua /
  Time (mean ± σ):      1.459 s ±  0.133 s    [User: 4.054 s, System: 9.640 s]
  Range (min … max):    1.346 s …  1.659 s    10 runs

Summary
  dut -Cn 60 / ran
    1.57 ± 0.05 times faster than pdu /
    2.91 ± 0.23 times faster than gdu --non-interactive /
    3.08 ± 0.10 times faster than dust -n 60 /
    3.12 ± 0.30 times faster than dua /
    7.63 ± 0.22 times faster than du -sh /
</code></pre><p dir="auto">The warning about a non-zero exit code was due to <code>du</code> reporting an error for not being able
to access directories in /proc and /root.</p>
<h3 id="user-content-benchmark-2-ssd-performance" dir="auto">Benchmark 2: SSD Performance</h3>
<p dir="auto">This bechmark is operating on the same filesystem as above, except I'm flushing the disk caches
in-between runs. This results in having to read all the data from the SSD each time instead of
getting it from RAM.</p>
<p dir="auto">This is a more niche use-case since most of the time <code>dut</code> will be running from the cache. It
only has to read from the disk on its first run in a particular directory.</p>
<h4 id="user-content-drives" dir="auto">Drives:</h4>
<ul dir="auto">
<li>Intel 660p 512G</li>
<li>SX8200PNP-512GT-S</li>
</ul>
<pre><code>$ sudo hyperfine 'dut -Cn 60 /' 'du -sh /' 'pdu /' 'dust -n 60 /' 'gdu --non-interactive /' 'dua /' -s 'sleep 10' -i -M 3 -p 'echo 1 &gt; /proc/sys/vm/drop_caches'
Benchmark 1: dut -Cn 60 /
  Time (mean ± σ):      5.773 s ±  0.184 s    [User: 0.406 s, System: 4.694 s]
  Range (min … max):    5.561 s …  5.881 s    3 runs

  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.

Benchmark 2: du -sh /
  Time (mean ± σ):     20.779 s ±  0.058 s    [User: 0.767 s, System: 3.709 s]
  Range (min … max):   20.712 s … 20.819 s    3 runs

  Warning: Ignoring non-zero exit code.

Benchmark 3: pdu /
  Time (mean ± σ):      4.279 s ±  0.292 s    [User: 1.701 s, System: 5.543 s]
  Range (min … max):    4.072 s …  4.613 s    3 runs

Benchmark 4: dust -n 60 /
  Time (mean ± σ):      5.009 s ±  0.348 s    [User: 2.608 s, System: 6.211 s]
  Range (min … max):    4.726 s …  5.397 s    3 runs

Benchmark 5: gdu --non-interactive /
  Time (mean ± σ):      4.090 s ±  0.081 s    [User: 7.027 s, System: 6.989 s]
  Range (min … max):    4.040 s …  4.183 s    3 runs

  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.

Benchmark 6: dua /
  Time (mean ± σ):      6.269 s ±  0.133 s    [User: 4.541 s, System: 12.786 s]
  Range (min … max):    6.162 s …  6.418 s    3 runs

Summary
  gdu --non-interactive / ran
    1.05 ± 0.07 times faster than pdu /
    1.22 ± 0.09 times faster than dust -n 60 /
    1.41 ± 0.05 times faster than dut -Cn 60 /
    1.53 ± 0.04 times faster than dua /
    5.08 ± 0.10 times faster than du -sh /
</code></pre><h3 id="user-content-benchmark-3-hdd-performance" dir="auto">Benchmark 3: HDD Performance</h3>
<p dir="auto">For this benchmark, I did the same benchmark as the last except I did it on an HDD instead. Some of
the Rust programs perform quite badly in this scenario, but <code>dua</code> still beats <code>dut</code> narrowly.</p>
<p dir="auto">The test location is my home directory on an old Linux installation. There are approximately 26k
subdirectories.</p>
<p dir="auto">The drive being measured is a 2 terabyte 5400rpm Western Digital WD20EFRX connected to my laptop
with a USB enclosure.</p>
<pre><code>$ sudo hyperfine 'dut -Cn 60' 'du -sh' 'pdu' 'dust -n 60' 'gdu --non-interactive' 'dua' -s 'sleep 10' -i -M 3 -p 'echo 1 &gt; /proc/sys/vm/drop_caches'
Benchmark 1: dut -Cn 60
  Time (mean ± σ):     36.720 s ±  0.350 s    [User: 0.078 s, System: 0.740 s]
  Range (min … max):   36.411 s … 37.100 s    3 runs

Benchmark 2: du -sh
  Time (mean ± σ):     44.810 s ±  0.043 s    [User: 0.108 s, System: 0.657 s]
  Range (min … max):   44.767 s … 44.854 s    3 runs

Benchmark 3: pdu
  Time (mean ± σ):     81.361 s ±  0.954 s    [User: 0.320 s, System: 0.935 s]
  Range (min … max):   80.675 s … 82.451 s    3 runs

Benchmark 4: dust -n 60
  Time (mean ± σ):     86.991 s ±  2.449 s    [User: 0.337 s, System: 1.042 s]
  Range (min … max):   84.411 s … 89.286 s    3 runs

Benchmark 5: gdu --non-interactive
  Time (mean ± σ):     41.096 s ±  0.229 s    [User: 1.086 s, System: 1.165 s]
  Range (min … max):   40.837 s … 41.273 s    3 runs

Benchmark 6: dua
  Time (mean ± σ):     34.472 s ±  0.965 s    [User: 9.107 s, System: 29.192 s]
  Range (min … max):   33.733 s … 35.564 s    3 runs

Summary
  dua ran
    1.07 ± 0.03 times faster than dut -Cn 60
    1.19 ± 0.03 times faster than gdu --non-interactive
    1.30 ± 0.04 times faster than du -sh
    2.36 ± 0.07 times faster than pdu
    2.52 ± 0.10 times faster than dust -n 60
</code></pre><h4 id="user-content-why-are-pdu-and-dust-so-bad-on-hdd" dir="auto">Why are <code>pdu</code> and <code>dust</code> so bad on HDD?</h4>
<p dir="auto">It's hard to say. My best guess is they have a really HDD-unfriendly access pattern, since they
both use Rayon for multithreading which uses FIFO ordering for tasks. This results in them doing
a breadth-first search of the filesystem, whereas <code>dut</code> and <code>du</code> both use depth-first search. I
don't know why one ordering is better than the other, but the difference is pretty drastic.</p>
<p dir="auto">I also think that ordering is the reason <code>dut</code> doesn't do so well on SSD either, but I'm not so
sure of that.</p>

			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[An Abundance of Katherines: The Game Theory of Baby Naming (115 pts)]]></title>
            <link>https://arxiv.org/abs/2404.00732</link>
            <guid>40932006</guid>
            <pubDate>Wed, 10 Jul 2024 22:08:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2404.00732">https://arxiv.org/abs/2404.00732</a>, See on <a href="https://news.ycombinator.com/item?id=40932006">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2404.00732">View PDF</a>
    <a href="https://arxiv.org/html/2404.00732v2">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>In this paper, we study the highly competitive arena of baby naming. Through making several Extremely Reasonable Assumptions (namely, that parents are myopic, perfectly knowledgeable agents who pick a name based solely on its uniquness), we create a model which is not only tractable and clean, but also perfectly captures the real world. We then extend our investigation with numerical experiments, as well as analysis of large language model tools. We conclude by discussing avenues for future research.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Kate Donahue [<a href="https://arxiv.org/show-email/a3293322/2404.00732">view email</a>]      <br>            <strong><a href="https://arxiv.org/abs/2404.00732v1">[v1]</a></strong>
        Sun, 31 Mar 2024 16:20:58 UTC (1,840 KB)<br>
    <strong>[v2]</strong>
        Tue, 2 Apr 2024 02:45:41 UTC (1,840 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scientists Discover a Cause of Lupus, Possible Way to Reverse It (578 pts)]]></title>
            <link>https://news.feinberg.northwestern.edu/2024/07/10/scientists-discover-a-cause-of-lupus-and-a-possible-way-to-reverse-it/</link>
            <guid>40931636</guid>
            <pubDate>Wed, 10 Jul 2024 21:24:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.feinberg.northwestern.edu/2024/07/10/scientists-discover-a-cause-of-lupus-and-a-possible-way-to-reverse-it/">https://news.feinberg.northwestern.edu/2024/07/10/scientists-discover-a-cause-of-lupus-and-a-possible-way-to-reverse-it/</a>, See on <a href="https://news.ycombinator.com/item?id=40931636">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-166192">
				
<div>

		
				
		
<h3>Two cellular defects appear to drive disease in lupus</h3>



<figure><p>
<iframe title="Scientists Discover a Cause of Lupus and a Possible Way to Reverse It" width="788" height="443" src="https://www.youtube.com/embed/1Mz9bbl-IqY?feature=oembed&amp;enablejsapi=1&amp;origin=https://news.feinberg.northwestern.edu" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p></figure>


<div>
<figure><a href="https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled.jpg"><img fetchpriority="high" decoding="async" width="235" height="300" src="https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-235x300.jpg" alt="Jaehyuk Choi, MD, PhD, the Jack W. Graffin Professor, an associate professor of Dermatology and a Northwestern Medicine dermatologist. " srcset="https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-235x300.jpg 235w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-801x1024.jpg 801w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-768x982.jpg 768w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-1201x1536.jpg 1201w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-150x192.jpg 150w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-450x575.jpg 450w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled-1200x1535.jpg 1200w, https://news.feinberg.northwestern.edu/wp-content/uploads/2024/02/choi_headshot_scaled.jpg 1600w" sizes="(max-width: 235px) 100vw, 235px"></a><figcaption>Jaehyuk Choi, MD, PhD, the Jack W. Graffin Professor, an associate professor of Dermatology and a Northwestern Medicine dermatologist.</figcaption></figure></div>


<p>Northwestern Medicine and Brigham and Women’s Hospital scientists have discovered a molecular defect that promotes the pathologic immune response in systemic lupus erythematosus (known as lupus) and in a study <a href="https://www.nature.com/articles/s41586-024-07627-2">published</a> in <em>Nature</em>, show that reversing this defect may potentially reverse the disease.</p>



<p>Lupus affects more than 1.5 million people in the U.S. Until this new study, the causes of this disease were unclear. Lupus can result in life-threatening damage to multiple organs including the kidneys, brain and heart. Existing treatments often fail to control the disease, the study authors said, and have unintended side effects of reducing the immune system’s ability to fight infections.</p>



<p>“Up until this point, all therapy for lupus is a blunt instrument. It’s broad immunosuppression,” said co-corresponding author <a href="https://www.feinberg.northwestern.edu/faculty-profiles/az/profile.html?xid=33689">Jaehyuk Choi, MD, PhD</a>, the Jack W. Graffin Professor, an associate professor of <a href="https://www.feinberg.northwestern.edu/sites/dermatology/index.html">Dermatology</a> and a Northwestern Medicine dermatologist. “By identifying a cause for this disease, we have found a potential cure that will not have the side effects of current therapies.”</p>



<p>“We’ve identified a fundamental imbalance in the immune responses that patients with lupus make, and we’ve defined specific mediators that can correct this imbalance to dampen the pathologic autoimmune response,” said co-corresponding author Deepak Rao, MD, PhD, an assistant professor of medicine at Harvard Medical School and a rheumatologist at Brigham and Women’s Hospital and co-director of its Center for Cellular Profiling.&nbsp;</p>



<p>In the study, the scientists reported a new pathway that drives disease in lupus. There are disease-associated changes in multiple molecules in the blood of patients with lupus. Ultimately, these changes lead to insufficient activation of a pathway controlled by the aryl hydrocarbon receptor (AHR), which regulates cells’ response to environmental pollutants, bacteria or metabolites. Insufficient activation of AHR results in too many disease-promoting immune cells, called the T peripheral helper cells, that promote the production of disease-causing autoantibodies.</p>



<p>To show this discovery can be leveraged for treatments, the investigators returned the aryl hydrocarbon receptor-activating molecules to blood samples from lupus patients. This seemed to reprogram these lupus-causing cells into a cell called a Th22 cell that may promote wound healing from the damage caused by this autoimmune disease.</p>



<p>“We found that if we either activate the AHR pathway with small molecule activators or limit the pathologically excessive interferon in the blood, we can reduce the number of these disease-causing cells,” said Choi, who is also a member of the <a href="https://www.cancer.northwestern.edu/">Robert H. Lurie Comprehensive Cancer Center</a>. “If these effects are durable, this may be a potential cure.”</p>



<p>Choi, Rao and colleagues next want to expand their efforts into developing novel treatments for lupus patients. They are now working to find ways to deliver these molecules safely and effectively to people.</p>



<p>Other Northwestern authors are first author Calvin Law; Arundhati Pillai; Brandon Hancock; and <a href="https://www.feinberg.northwestern.edu/faculty-profiles/az/profile.html?xid=41989">Judd Hultquist, PhD</a>, assistant professor of <a href="https://www.medicine.northwestern.edu/">Medicine</a> in the Division of <a href="https://www.medicine.northwestern.edu/divisions/infectious-diseases/index.html">Infectious Diseases</a>. Brigham and Women’s Hospital authors include Vanessa Sue Wacleche, PhD; Ye Cao, PhD; John Sowerby, PhD; Alice Horisberger, MD; Sabrina Bracero; Ifeoluwakiisi Adejoorin; Eilish Dillon; Daimon Simmons, MD; Elena Massarotti, MD; Karen Costenbader, MD, MPH; Michael Brenner, PhD; and James Lederer, PhD.</p>



<p>The research was supported by the National Institute of Arthritis and Musculoskeletal and Skin Diseases&nbsp;grants K08 AR072791, P30 AR070253, R01 AR078769 and P30 AR075049; National Institute of Allergy and Infectious Diseases grants R01 AI176599, P30 AI117943, R01 AI165236 and U54 AI170792; National Cancer Institute grants F31 CA268839 and CA060553, all of the National Institutes of Health (NIH); and NIH Director’s New Innovator Grant 1DP2AI136599-01, and grants from Lupus Research Alliance, Burroughs Wellcome Fund, Bakewell Foundation, Leukemia and Lymphoma Society and American Cancer Society.</p>



<figure><p>
<iframe title="A Compelling New Lupus Discovery with Jaehyuk Choi, MD, PhD" width="788" height="443" src="https://www.youtube.com/embed/vklTlzjNCxI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p></figure>

				
		
		
		
	</div>
	
	
			</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Fly.io deleted all my apps without notifying me (102 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=40931174</link>
            <guid>40931174</guid>
            <pubDate>Wed, 10 Jul 2024 20:29:54 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=40931174">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="40931174">
      <td><span></span></td>      <td><center><a id="up_40931174" href="https://news.ycombinator.com/vote?id=40931174&amp;how=up&amp;goto=item%3Fid%3D40931174"></a></center></td><td><span> [flagged] <a href="https://news.ycombinator.com/item?id=40931174">Fly.io deleted all my apps without notifying me</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_40931174">102 points</span> by <a href="https://news.ycombinator.com/user?id=lukas_b">lukas_b</a> <span title="2024-07-10T20:29:54"><a href="https://news.ycombinator.com/item?id=40931174">15 hours ago</a></span> <span id="unv_40931174"></span> | <a href="https://news.ycombinator.com/hide?id=40931174&amp;goto=item%3Fid%3D40931174">hide</a> | <a href="https://hn.algolia.com/?query=Fly.io%20deleted%20all%20my%20apps%20without%20notifying%20me&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=40931174&amp;auth=acbe7f59ad3eb84c22a05116c589fd00ffe6a521">favorite</a> | <a href="https://news.ycombinator.com/item?id=40931174">32&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><p>I noticed my app was down and went to check it out. Lo and Behold my account had been flagged by their automatic fraud detection algorithm. This is despite my account having close to $500 of credit and being active for around a year now. I was not informed about this at all. I followed the prompt to allow them to charge my credit card in order to verify that I'm not a bot and now I have control of my account again. However none of my apps were restored. Has anyone else experienced something like this in the past?</p></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Big Ball of Mud (1999) (132 pts)]]></title>
            <link>http://laputan.org/mud/</link>
            <guid>40930549</guid>
            <pubDate>Wed, 10 Jul 2024 19:29:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://laputan.org/mud/">http://laputan.org/mud/</a>, See on <a href="https://news.ycombinator.com/item?id=40930549">Hacker News</a></p>
<div id="readability-page-1" class="page">
	


	<p>
		<span size="5"> <b> <a href="http://laputan.org/index.html">Brian Foote</a>
				and <a href="http://www.joeyoder.com/">Joseph Yoder</a>
		</b></span>
	</p>



	<p>
		<span size="3"> <a href="http://www.cs.uiuc.edu/">Department
				of Computer Science</a><br> <a href="http://www.uiuc.edu/">University
				of Illinois at Urbana-Champaign</a><br> 1304 W. Springfield<br>
			<a href="http://laputan.org/audio/cow02.wav">Urbana</a>, IL 61801 USA
		</span>
	</p><p>
		<span size="2"><i> <a href="mailto:foote@cs.uiuc.edu">foote@cs.uiuc.edu</a>
		</i> (217) 328-3523<br> <i><a href="mailto:yoder@cs.uiuc.edu">yoder@cs.uiuc.edu</a></i>
			(217) 244-4695 </span>
	</p>

	<p>
		<i>Saturday, June 26, 1999</i><br>
	</p><center>
		<span size="2"> Fourth Conference on Patterns Languages of
			Programs (<a href="http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/">PLoP
				'97</a>/<a href="http://www.cs.wustl.edu/~schmidt/EuroPLoP-97.html">EuroPLoP
				'97</a>)<br> Monticello, Illinois, <a href="http://www.laputan.com/cgi-bin/calendar?9+1997">September
				1997</a><br> Technical Report #WUCS-97-34 (<a href="http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Workshops.html">PLoP
				'97</a>/<a href="http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html">EuroPLoP
				'97</a>), <a href="http://www.laputan.com/cgi-bin/calendar?9+1997">September
				1997</a><br> <a href="http://www.cs.wustl.edu/">Department of
				Computer Science</a>, <a href="http://www.wustl.edu/">Washington
				University</a><br> <i>Chapter 29</i><br> <a href="http://www.amazon.com/exec/obidos/ASIN/0201433044/qid%3D957230098/002-5670898-4593817">Pattern
				Languages of Program Design 4</a><br> edited by Neil Harrison, <a href="http://laputan.org/index.html">Brian Foote</a>, and Hans Rohnert<br> <a href="http://www.awl.com/">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?2000">2000</a> <br>
			This volume is part of the <a href="http://cseng.aw.com/seriesdetail.qry?SeriesID=34">Addison-Wesley
				Software Patterns Series</a>.<br>
		</span>
	</center>
	<p>
		<span size="2"> <i>This paper is also available in the
				following formats:</i><br> [<a href="http://laputan.org/pub/foote/mud.pdf">PDF</a>] [<a href="http://laputan.org/pub/foote/mud.doc">Word</a>] [<a href="http://laputan.org/pub/foote/mud.rtf">RTF</a>]
			[<a href="http://laputan.org/pub/foote/mud.ps">PostScript</a>]
		</span>
	</p>

	<p>
		<span size="2"> Also by <b> <a href="http://laputan.org/index.html">Brian
					Foote</a>
		</b> and <b> <a href="http://www.joeyoder.com/">Joseph Yoder</a>
		</b> <br> <i><b><a href="http://laputan.org/metamorphosis/metamorphosis.html">Architecture,
						Evolution, and Metamorphosis</a></b></i><br> <i><b><a href="http://laputan.org/selfish/selfish.html">The Selfish Class</a></b></i><br>
		</span>
	</p>

	<p>
		<span size="2"> This paper was twice <a href="http://slashdot.org/articles/00/04/29/0926241.shtml">featured</a>
			in <b> <a href="http://slashdot.org/">Slashdot</a>
		</b>
		</span>
	</p>

	<p>
		<a href="http://www.dailyimage.com/"> <img src="http://laputan.org/images/icons/DailyImageBadge.gif" alt="Badge">
		</a>
	</p>
	<!-- Pattern Header -->
	<a name="Contents"></a>
	
	<!-- End of Pattern Header -->

	<a href="http://cseng.awl.com/seriesdetail.qry?SeriesID=34"> <img src="http://laputan.org/images/pictures/harrison-small.jpg" alt="PLoPD4 Cover"></a>

	<ol>
		<li><a href="http://laputan.org/mud/mud.html#Abstract">Abstract</a>
		</li><li><a href="http://laputan.org/mud/mud.html#Introduction">Introduction</a>
		</li><li><a href="http://laputan.org/mud/mud.html#Forces">Forces</a>
		</li><li><a href="http://laputan.org/mud/mud.html#BigBallOfMud">Big Ball Of Mud</a>
		</li><li><a href="http://laputan.org/mud/mud.html#ThrowAwayCode">Throwaway Code</a>
		</li><li><a href="http://laputan.org/mud/mud.html#PiecemealGrowth">Piecemeal Growth</a>
		</li><li><a href="http://laputan.org/mud/mud.html#KeepItWorking">Keep It Working</a>
		</li><li><a href="http://laputan.org/mud/mud.html#ShearingLayers">Shearing Layers</a>
		</li><li><a href="http://laputan.org/mud/mud.html#SweepingItUnderTheRug">Sweeping It
				Under The Rug</a>
		</li><li><a href="http://laputan.org/mud/mud.html#Reconstruction">Reconstruction</a>
		</li><li><a href="http://laputan.org/mud/mud.html#Conclusion">Conclusion</a>
		</li><li><a href="http://laputan.org/mud/mud.html#Acknowledgments">Acknowledgments</a>
		</li><li><a href="http://laputan.org/mud/mud.html#References">References</a>
	</li></ol>

	<!-- Pattern Header -->
	<a name="Abstract"></a>
	
	<!-- End of Pattern Header -->

	<p>
		While much attention has been focused on high-level software
		architectural patterns, what is, in effect, the de-facto standard
		software architecture is seldom discussed. This paper examines this
		most frequently deployed of software architectures: the <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>. A <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> is a casually, even
		haphazardly, structured system. Its organization, if one can call it
		that, is dictated more by expediency than design. Yet, its enduring
		popularity cannot merely be indicative of a general disregard for
		architecture.
	</p>

	<p>
		These patterns explore the forces that encourage the emergence of a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>, and the undeniable
		effectiveness of this approach to software architecture. What are the
		people who build them doing right? If more high-minded architectural
		approaches are to compete, we must understand what the forces that
		lead to a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> are, and
		examine alternative ways to resolve them.
	</p>

	<p>
		A number of additional patterns emerge out of the <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>. We discuss them in
		turn. Two principal questions underlie these patterns: Why are so many
		existing systems architecturally undistinguished, and what can we do
		to improve them?
	</p>

	<!-- Pattern Header -->
	<a name="Introduction"></a>
	
	<!-- End of Pattern Header -->

	<p>
		Over the last several years, a number of authors [Garlan &amp; Shaw
		1993] [Shaw 1996] [Buschmann et. al. 1996] [Meszaros 1997] have
		presented patterns that characterize high-level software
		architectures, such as PIPELINE and LAYERED ARCHITECTURE. In an ideal
		world, every system would be an exemplar of one or more such
		high-level patterns. Yet, this is not so. The architecture that
		actually predominates in practice has yet to be discussed: the <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>.
	</p>

	<a href="http://oak.cats.ohiou.edu/~ba116594/mmt.html"> <img src="http://laputan.org/images/pictures/spaghetti-medium.jpg" width="317" height="437" alt="Lennon Serves Too Much Spaghetti"></a>
	<p>
		A <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> is haphazardly
		structured, sprawling, sloppy, duct-tape and bailing wire, <a href="http://www.mdagroup.com/computing/spaghett.htm">spaghetti</a> <a href="http://www.cs.brandeis.edu/~dkw/C-humor/pasta.txt">code</a> <a href="http://leb.net/~tonyk/jargon/entry.cgi?idx=1710">jungle</a>.
		We’ve all seen them. These systems show unmistakable signs of
		unregulated growth, and repeated, <a href="http://home.swbell.net/mck9/cobol/style/rewrite.html">expedient</a>
		repair. Information is shared promiscuously among distant elements of
		the system, often to the point where nearly all the important
		information becomes global or duplicated. The overall structure of the
		system may never have been well defined. If it was, it may have <a href="http://garynorth.com/y2k/detail_.cfm/881">eroded</a> beyond
		recognition. Programmers with a shred of architectural sensibility
		shun these quagmires. Only those who are unconcerned about
		architecture, and, perhaps, are comfortable with the inertia of the
		day-to-day chore of patching the holes in these failing dikes, are
		content to work on such systems.
	</p>

	<p>Still, this approach endures and thrives. Why is this
		architecture so popular? Is it as bad as it seems, or might it serve
		as a way-station on the road to more enduring, elegant artifacts? What
		forces drive good programmers to build ugly systems? Can we avoid
		this? Should we? How can we make such systems better?</p>

	<p>We present the following seven patterns:</p>

	<dir>
		<p>
			<img src="http://laputan.org/images/icons/blueball.gif"> <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>
		</p>
		<img src="http://laputan.org/images/icons/blueball.gif">
		<a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a>
		
		<p>
			<img src="http://laputan.org/images/icons/blueball.gif"> <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a>
		</p>
		<p>
			<img src="http://laputan.org/images/icons/blueball.gif"> <a href="http://laputan.org/mud/mud.html#KeepItWorking">KEEP IT WORKING</a>
		</p>
		<p>
			<img src="http://laputan.org/images/icons/blueball.gif"> <a href="http://laputan.org/mud/mud.html#ShearingLayers">SHEARING LAYERS</a>
		</p>
		<p>
			<img src="http://laputan.org/images/icons/blueball.gif"> <a href="http://laputan.org/mud/mud.html#SweepingItUnderTheRug">SWEEPING IT UNDER THE RUG</a>
		</p>
		<p>
			<img src="http://laputan.org/images/icons/blueball.gif"> <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a>
		</p>
	</dir>

	<p>
		Why does a system become a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>? Sometimes, big, ugly systems emerge from <a href="http://laputan.org/mud/mud.html#ThrowAwayCode"></a><a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY
			CODE</a>. <a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a> is
		quick-and-dirty code that was intended to be used only once and then
		discarded. However, such code often takes on a life of its own,
		despite casual structure and poor or non-existent documentation. It
		works, so why fix it? When a related problem arises, the quickest way
		to address it might be to expediently modify this working code, rather
		than design a proper, general program from the ground up. Over time, a
		simple throwaway program begets a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>.
	</p>

	<p>
		Even systems with well-defined architectures are prone to structural
		erosion. The relentless onslaught of changing requirements that any
		successful system attracts can gradually undermine its structure.
		Systems that were once tidy become overgrown as <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a> gradually allows
		elements of the system to sprawl in an uncontrolled fashion.
	</p>

	<p>
		If such sprawl continues unabated, the structure of the system can
		become so badly compromised that it must be abandoned. As with a
		decaying neighborhood, a downward spiral ensues. Since the system
		becomes harder and harder to understand, maintenance becomes more
		expensive, and more difficult. Good programmers refuse to work there.
		Investors withdraw their capital. And yet, as with neighborhoods,
		there are ways to avoid, and even reverse, this sort of decline. As
		with anything else in the universe, counteracting entropic forces
		requires an investment of energy. Software <a href="http://www.m-w.com/cgi-bin/dictionary?gentrification">gentrification</a>
		is no exception. The way to arrest entropy in software is to refactor
		it. A sustained commitment to refactoring can keep a system from
		subsiding into a BIG BALL OF MUD.
	</p>

	<p>
		A major flood, fire, or war may require that a city be evacuated and
		rebuilt from the ground up. More often, change takes place a building
		or block at a time, while the city as a whole continues to function.
		Once established, a strategy of <a href="http://laputan.org/mud/mud.html#KeepItWorking">KEEPING
			IT WORKING</a> preserves a municipality’s vitality as it grows.
	</p>

	<p>
		Systems and their constituent elements evolve at different rates. As
		they do, things that change quickly tend to become distinct from
		things that change more slowly. The <a href="http://laputan.org/mud/mud.html#ShearingLayers">SHEARING
			LAYERS</a> that develop between them are like fault lines or facets that
		help foster the emergence of enduring abstractions.
	</p>

	<p>
		A simple way to begin to control decline is to cordon off the blighted
		areas, and put an attractive fa�ade around them. We call this strategy
		<a href="http://laputan.org/mud/mud.html#SweepingItUnderTheRug">SWEEPING IT UNDER THE RUG</a>.
		In more advanced cases, there may be no alternative but to tear
		everything down and start over. When total <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a> becomes necessary,
		all that is left to salvage is the patterns that underlie the
		experience.
	</p>

	<p>Some of these patterns might appear at first to be antipatterns
		[Brown et al. 1998] or straw men, but they are not, at least in the
		customary sense. Instead, they seek to examine the gap between what we
		preach and what we practice.</p>

	<p>Still, some of them may strike some readers as having a schizoid
		quality about them. So, for the record, let us put our cards on the
		table. We are in favor of good architecture.</p>

	<p>Our ultimate agenda is to help drain these swamps. Where
		possible, architectural decline should be prevented, arrested, or
		reversed. We discuss ways of doing this. In severe cases,
		architectural abominations may even need to be demolished.</p>

	<p>At the same time, we seek not to cast blame upon those who must
		wallow in these mires. In part, our attitude is to "hate the sin, but
		love the sinner". But, it goes beyond this. Not every backyard storage
		shack needs marble columns. There are significant forces that can
		conspire to compel architecture to take a back seat to functionality,
		particularly early in the evolution of a software artifact.
		Opportunities and insights that can allow for architectural progress
		often are present later rather than earlier in the lifecycle.</p>

	<p>A certain amount of controlled chaos is natural during
		construction, and can be tolerated, as long as you clean up after
		yourself eventually. Even beyond this though, a complex system may be
		an accurate reflection of our immature understanding of a complex
		problem. The class of systems that we can build at all may be larger
		than the class of systems we can build elegantly, at least at first. A
		somewhat ramshackle rat's nest might be a state-of-the-art
		architecture for a poorly understood domain. This should not be the
		end of the story, though. As we gain more experience in such domains,
		we should increasingly direct our energies to gleaning more enduring
		architectural abstractions from them.</p>

	<p>
		The patterns described herein are not intended to stand alone. They
		are instead set in a context that includes a number of other patterns
		that we and others have described. In particular, they are set in
		contrast to the lifecycle patterns, <a href="http://www.bell-labs.com/user/cope/Patterns/Process/section38.html">PROTOTYPE</a>
		<a href="http://laputan.org/lifecycle/lifecycle.html#Prototype">PHASE</a>, <a href="http://laputan.org/lifecycle/lifecycle.html#Expand">EXPANSIONARY PHASE</a>, and
		<a href="http://laputan.org/lifecycle/lifecycle.html#Consolidate">CONSOLIDATION
			PHASE</a>, presented in [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote
			&amp; Opdyke 1995</a>] and [Coplien 1995], the <a href="http://laputan.org/metamorphosis/metamorphosis.html#SoftwareTectonics">SOFTWARE
			TECTONICS</a> pattern in [<a href="http://laputan.org/metamorphosis/metamorphosis.html#SoftwareTectonics">Foote
			&amp; Yoder 1996</a>], and the framework development patterns in [<a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html">Roberts
			&amp; Johnson 1998</a>].
	</p>

	<p>Indeed, to a substantial extent, much of this chapter describes
		the disease, while the patterns above describe what we believe can be
		the cure: a flexible, adaptive, feedback-driven development process in
		which design and refactoring pervade the lifecycle of each artifact,
		component, and framework, within and beyond the applications that
		incubate them.</p>

	<!-- Pattern Header -->
	<a name="Forces"></a>
	
	<!-- End of Pattern Header -->

	<p>
		A number of forces can conspire to drive even the most architecturally
		conscientious organizations to produce <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALLS OF MUD</a>. These pervasive, <i>"global" forces</i> are
		at work in all the patterns presented. Among these forces:
	</p>

	<p>
		<i>Time:</i> There may not be enough <u>time</u> to consider the <a href="http://www.longnow.org/">long-term</a> architectural
		implications of one’s design and implementation decisions. Even
		when systems have been well designed, architectural concerns often
		must yield to more pragmatic ones as a deadline starts to loom.
	</p>

	<p>
		One reason that software architectures are so often mediocre is that
		architecture frequently takes a back seat to more mundane concerns
		such as cost, time-to-market, and programmer skill. Architecture is
		often seen as a luxury or a frill, or the indulgent pursuit of
		lily-gilding compulsives who have no concern for the bottom line.
		Architecture is often treated with neglect, and even disdain. While
		such attitudes are unfortunate, they are not hard to understand.
		Architecture is a long-term concern. The concerns above have to be
		addressed if a product is not to be stillborn in the marketplace,
		while the benefits of good architecture are realized later in the
		lifecycle, as frameworks mature, and reusable black-box components
		emerge [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote &amp; Opdyke
			1995</a>].
	</p>

	<p>
		Architecture can be looked upon as a <i>Risk</i>, that will consume
		resources better directed at meeting a fleeting market window, or as
		an <i>Opportunity</i> to lay the groundwork for a commanding advantage
		down the road.
	</p>

	<p>Indeed, an immature architecture can be an advantage in a
		growing system because data and functionality can migrate to their
		natural places in the system unencumbered by artificial architectural
		constraints. Premature architecture can be more dangerous than none at
		all, as unproved architectural hypotheses turn into straightjackets
		that discourage evolution and experimentation.</p>

	<p>
		<i>Cost:</i> Architecture is expensive, especially when a new domain
		is being explored. Getting the system right seems like a pointless
		luxury once the system is limping well enough to ship. An investment
		in architecture usually does not pay off immediately. Indeed, if
		architectural concerns delay a product’s market entry for too
		long, then long-term concerns may be moot. Who benefits from an
		investment in architecture, and when is a return on this investment
		seen? Money spent on a quick-and-dirty project that allows an
		immediate entry into the market may be better spent than money spent
		on elaborate, speculative architectural fishing expedition. It’s
		hard to recover the value of your architectural assets if you’ve
		long since gone bankrupt.
	</p>

	<p>Programmers with the ability to discern and design quality
		architectures are reputed to command a premium. These expenses must be
		weighed against those of allowing an expensive system to slip into
		premature decline and obsolescence. If you think good architecture is
		expensive, try bad architecture.</p>

	<p>
		<i>Experience:</i> Even when one has the time and inclination to take
		architectural concerns into account, one’s experience, or lack
		thereof, with the domain can limit the degree of architectural
		sophistication that can be brought to a system, particularly early in
		its evolution. Some programmers flourish in environments where they
		can discover and develop new abstractions, while others are more
		comfortable in more constrained environments (for instance, Smalltalk
		vs. <a href="http://www.hamline.edu/~wnk/cpb/199707/0884.html">Visual
			Basic</a> programmers.) Often, initial versions of a system are vehicles
		whereby programmers learn what pieces must be brought into play to
		solve a particular problem. Only after these are identified do the
		architectural boundaries among parts of the system start to emerge.
	</p>

	<p>Inexperience can take a number of guises. There is absolute,
		fresh out of school inexperience. A good architect may lack domain
		experience, or a domain expert who knows the code cold may not have
		architectural experience.</p>

	<p>Employee turnover can wreak havoc on an organization’s
		institutional memory, with the perhaps dubious consolation of bringing
		fresh blood aboard.</p>

	<p>
		<i>Skill:</i> Programmers differ in their levels of skill, as well as
		in expertise, predisposition and temperament. Some programmers have a
		passion for finding good abstractions, while some are skilled at
		navigating the swamps of complex code left to them by others.
		Programmers differ tremendously in their degrees of experience with
		particular domains, and their capacities for adapting to new ones.
		Programmers differ in their language and tool preferences and
		experience as well.
	</p>


	<p>
		<i>Visibility:</i> Buildings are tangible, physical structures. You
		can look at a building. You can watch it being built. You can walk
		inside it, and admire and critique its design.
	</p>

	<p>A program’s user interface presents the public face of a
		program, much as a building’s exterior manifests its
		architecture. However, unlike buildings, only the people who build a
		program see how it looks inside.</p>

	<p>Programs are made of bits. The manner in which we present these
		bits greatly affects our sense of how they are put together. Some
		designers prefer to see systems depicted using modeling languages or
		PowerPoint pictures. Others prefer prose descriptions. Still others
		prefer to see code. The fashion in which we present our architectures
		affects our perceptions of whether they are good or bad, clear or
		muddled, and elegant or muddy.</p>

	<p>Indeed, one of the reasons that architecture is neglected is
		that much of it is "under the hood", where nobody can see
		it. If the system works, and it can be shipped, who cares what it
		looks like on the inside?</p>

	<p>
		<i>Complexity:</i> One reason for a muddled architecture is that
		software often reflects the inherent complexity of the application
		domain. This is what <a href="http://groucho.admin.unc.edu/endeavors/end496/brooks.htm">Brooks</a>
		called "essential complexity" [Brooks 1995]. In other words,
		the software is ugly because the problem is ugly, or at least not well
		understood. Frequently, the organization of the system reflects the
		sprawl and history of the organization that built it (as per <a href="http://www.bell-labs.com/user/cope/Patterns/Process/section15.html">CONWAY’S
			LAW</a> [Coplien 1995]) and the compromises that were made along the way.
		Renegotiating these relationships is often difficult once the basic
		boundaries among system elements are drawn. These relationships can
		take on the immutable character of "site" boundaries that <a href="http://www.well.com/user/sbb/index.html"> Brand</a> [Brand
		1994] observed in real cities. Big problems can arises when the needs
		of the applications force unrestrained communication across these
		boundaries. The system becomes a tangled mess, and what little
		structure is there can erode further.
	</p>

	<p>
		<i>Change:</i> Architecture is a hypothesis about the future that
		holds that subsequent change will be confined to that part of the
		design space encompassed by that architecture. Of course, the world
		has a way of mocking our attempts to make such predictions by tossing
		us the totally unexpected. A problem we might have been told was
		definitely ruled out of consideration for all time may turn out to be
		dear to the heart of a new client we never thought we’d have.
		Such changes may cut directly across the grain of fundamental
		architectural decisions made in the light of the certainty that these
		new contingencies could never arise. The "right" thing to do
		might be to redesign the system. The more likely result is that the
		architecture of the system will be expediently perturbed to address
		the new requirements, with only passing regard for the effect of these
		radical changes on the structure of the system.
	</p>

	<p>
		<i>Scale:</i> Managing a large project is a qualitatively different
		problem from managing a small one, just as leading a division of
		infantry into battle is different from commanding a small special
		forces team. Obviously, "divide and conquer" is, in general, an
		insufficient answer to the problems posed by scale. Alan Kay, during
		an invited talk at OOPSLA '86 observed that "good ideas don't always
		scale." That observation prompted <a href="http://lcs.www.media.mit.edu/people/lieber/">Henry
			Lieberman</a> to inquire "so what do we do, just scale the bad ones?"
	</p>

	<a name="BigBallOfMud"></a>
	

	<b>
		</b><b>
		</b><b>
		</b><table>
		<tbody><tr>
			<td><i>alias</i></td>
			</tr>
		<tr>
			
			<td>SHANTYTOWN</td>
			</tr>
		<tr>
			
			<td>SPAGHETTI CODE</td>
			</tr>
	</tbody></table><b>
	</b>
	<p>
		<a href="http://boone.calstatela.edu/spring476/prasarangkul.htm">
			<img src="http://laputan.org/images/pictures/squat.jpg" width="457" height="310" alt="Shantytown">
		</a>
	</p>

	<p>
		<a href="http://www.interlog.com/~rodneyb/paraguay/shantypix.html">Shantytowns</a>
		are squalid, sprawling slums. Everyone seems to agree they are a bad
		idea, but forces conspire to promote their emergence anyway. What is
		it that they are doing right?
	</p>

	<p>Shantytowns are usually built from common, inexpensive materials
		and simple tools. Shantytowns can be built using relatively unskilled
		labor. Even though the labor force is "unskilled" in the
		customary sense, the construction and maintenance of this sort of
		housing can be quite labor intensive. There is little specialization.
		Each housing unit is constructed and maintained primarily by its
		inhabitants, and each inhabitant must be a jack of all the necessary
		trades. There is little concern for infrastructure, since
		infrastructure requires coordination and capital, and specialized
		resources, equipment, and skills. There is little overall planning or
		regulation of growth. Shantytowns emerge where there is a need for
		housing, a surplus of unskilled labor, and a dearth of capital
		investment. Shantytowns fulfill an immediate, local need for housing
		by bringing available resources to bear on the problem. Loftier
		architectural goals are a luxury that has to wait.</p>

	<p>Maintaining a shantytown is labor-intensive and requires a broad
		range of skills. One must be able to improvise repairs with the
		materials on-hand, and master tasks from roof repair to ad hoc
		sanitation. However, there is little of the sort of skilled
		specialization that one sees in a mature economy.</p>

	<p>All too many of our software systems are, architecturally,
		little more than shantytowns. Investment in tools and infrastructure
		is too often inadequate. Tools are usually primitive, and
		infrastructure such as libraries and frameworks, is undercapitalized.
		Individual portions of the system grow unchecked, and the lack of
		infrastructure and architecture allows problems in one part of the
		system to erode and pollute adjacent portions. Deadlines loom like
		monsoons, and architectural elegance seems unattainable.</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>As a system nears completion, its actual users may begin to work
		with it for the first time. This experience may inspire changes to
		data formats and the user interface that undermine architectural
		decisions that had been thought to be settled. Also, as Brooks [Brooks
		1995] has noted, because software is so flexible, it is often asked to
		bear the burden of architectural compromises late in the development
		cycle of hardware/software deliverables precisely because of its
		flexibility.</p>

	<p>
		This phenomenon is not unique to software. <a href="http://www.well.com/user/sbb/index.html">Stewart Brand</a>
		[Brand 1994] has observed that the period just prior to a
		building’s initial occupancy can be a stressful period for both
		architects and their clients. The money is running out, and the
		finishing touches are being put on just those parts of the space that
		will interact the most with its occupants. During this period, it can
		become evident that certain wish-list items are not going to make it,
		and that exotic experiments are not going to work. Compromise becomes
		the "order of the day".
	</p>

	<p>The time and money to chase perfection are seldom available, nor
		should they be. To survive, we must do what it takes to get our
		software working and out the door on time. Indeed, if a team completes
		a project with time to spare, today’s managers are likely to take
		that as a sign to provide less time and money or fewer people the next
		time around.</p>

	<p><span><b>You need to deliver quality
						software on time, and under budget.</b></span></p>

	<p>
		<i>Cost</i>: Architecture is a long-term investment. It is easy for
		the people who are paying the bills to dismiss it, unless there is
		some tangible immediate benefit, such a tax write-off, or unless
		surplus money and time happens to be available. Such is seldom the
		case. More often, the customer needs something working by tomorrow.
		Often, the people who control and manage the development process
		simply do not regard architecture as a pressing concern. If
		programmers know that workmanship is invisible, and managers don't
		want to pay for it anyway, a vicious circle is born.
	</p>

	<p>
		<i>Skill</i>: Ralph Johnson is fond of observing that is inevitable
		that "on average, average organizations will have average people". One
		reason for the popularity and success of <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> approaches might be
		that this appoach doesn't require a hyperproductive <a href="http://www.onenet.net/~njtdb/casey.html">virtuoso</a> architect
		at every keyboard.
	</p><p>
		<i>Organization</i>: With larger projects, cultural, process,
		organizational and resource allocation issues can overwhelm technical
		concerns such as tools, languages, and architecture.
	</p>

	<p>It may seem to a programmer that whether to don hip boots and
		wade into a swamp is a major quality-of-life matter, but programmer
		comfort is but one concern to a manager, which can conflict with many
		others. Architecture and code quality may strike management as frills
		that have only an indirect impact on their bottom lines.
	</p><p><b><span><u><i>Therefore</i></u>,
						focus first on features and functionality, then focus on
						architecture and performance. </span></b></p>

	<p>
		The case made here resembles Gabriel’s "<a href="http://laputan.org/gabriel/worse-is-better.html">Worse is Better</a>"
		arguments [Gabriel 1991] in a number of respects. Why does so much
		software, despite the best intentions and efforts of developers, turn
		into <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALLS OF MUD</a>? Why do
		slash-and-burn tactics drive out elegance? Does bad architecture drive
		out good architecture?
	</p>

	<p>What does this muddy code look like to the programmers in the
		trenches who must confront it? Data structures may be haphazardly
		constructed, or even next to non-existent. Everything talks to
		everything else. Every shred of important state data may be global.
		There are those who might construe this as a sort of blackboard
		approach [Buschmann 1996], but it more closely resembles a grab bag of
		undifferentiated state. Where state information is compartmentalized,
		it may be passed promiscuously about though Byzantine back channels
		that circumvent the system's original structure.</p>

	<p>Variable and function names might be uninformative, or even
		misleading. Functions themselves may make extensive use of global
		variables, as well as long lists of poorly defined parameters. The
		function themselves are lengthy and convoluted, and perform several
		unrelated tasks. Code is duplicated. The flow of control is hard to
		understand, and difficult to follow. The programmer’s intent is
		next to impossible to discern. The code is simply unreadable, and
		borders on indecipherable. The code exhibits the unmistakable signs of
		patch after patch at the hands of multiple maintainers, each of whom
		barely understood the consequences of what he or she was doing. Did we
		mention documentation? What documentation?</p>

	<p>
		<a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> might be thought
		of as an anti-pattern, since our intention is to show how passivity in
		the face of forces that undermine architecture can lead to a quagmire.
		However, its undeniable popularity leads to the inexorable conclusion
		that it is a pattern in its own right. It is certainly a pervasive,
		recurring solution to the problem of producing a working system in the
		context of software development. It would seem to be the path of least
		resistance when one confronts the sorts of forces discussed above.
		Only by understanding the logic of its appeal can we channel or
		counteract the forces that lead to a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>.
	</p>

	<p>One thing that isn’t the answer is rigid, totalitarian,
		top-down design. Some analysts, designers, and architects have an
		exaggerated sense of their ability to get things right up-front,
		before moving into implementation. This approach leads to inefficient
		resources utilization, analysis paralysis, and design straightjackets
		and cul-de-sacs.</p>

	<p>Kent Beck has observed that the way to build software is to:
		Make it work. Make it right. Make it fast [Beck 1997]. "Make it
		work" means that we should focus on functionality up-front, and
		get something running. "Make it right" means that we should
		concern ourselves with how to structure the system only after
		we’ve figured out the pieces we need to solve the problem in the
		first place. "Make it fast" means that we should be
		concerned about optimizing performance only after we’ve learned
		how to solve the problem, and after we’ve discerned an
		architecture to elegantly encompass this functionality. Once all this
		has been done, one can consider how to make it cheap.</p>

	<p>
		When it comes to software architecture, form <u>follows</u> function.
		Here we mean "follows" not in the traditional sense of dictating
		function. Instead, we mean that the distinct identities of the
		system�s architectural elements often don�t start to emerge until <u>after</u>
		the code is working.
	</p>

	<p>Domain experience is an essential ingredient in any framework
		design effort. It is hard to try to follow a front-loaded, top-down
		design process under the best of circumstances. Without knowing the
		architectural demands of the domain, such an attempt is premature, if
		not foolhardy. Often, the only way to get domain experience early in
		the lifecycle is to hire someone who has worked in a domain before
		from someone else.</p>

	<p>The quality of one’s tools can influence a system’s
		architecture. If a system’s architectural goals are inadequately
		communicated among members of a team, they will be harder to take into
		account as the system is designed and constructed.</p>

	<p>
		Finally, engineers will differ in their levels of skill and commitment
		to architecture. Sadly, architecture has been undervalued for so long
		that many engineers regard life with a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a> as normal. Indeed some engineers are particularly skilled
		at learning to navigate these quagmires, and guiding others through
		them. Over time, this symbiosis between architecture and skills can
		change the character of the organization itself, as swamp guides
		become more valuable than architects. As per <a href="http://www.bell-labs.com/user/cope/Patterns/Process/section15.html">CONWAY’S
			LAW</a> [Coplien 1995], architects depart in futility, while engineers
		who have mastered the muddy details of the system they have built in
		their images prevail. [<a href="http://laputan.org/selfish/selfish.html#LowSurfaceToVolumeRatio">Foote
			&amp; Yoder 1998a</a>] went so far as to observe that inscrutable code
		might, in fact, have a survival advantage over good code, by virtue of
		being difficult to comprehend and change. This advantage can extend to
		those programmers who can find their ways around such code. In a land
		devoid of landmarks, such guides may become indispensable.
	</p>

	<p>The incentives that drive the evolution of such systems can, at
		times, operate perversely. Just as it is easier to be verbose than
		concise, it is easier to build complex systems than it is to build
		simple ones. Skilled programmers may be able to create complexity more
		quickly than their peers, and more quickly than they can document and
		explain it. Like an army outrunning its logistics train, complexity
		increases until it reaches the point where such programmers can no
		longer reliably cope with it.</p>

	<p>
		This is akin to a phenonmenon dubbed the <a href="http://www.c2.com/cgi/wiki?PeterPrincipleProgramming"><i>PeterPrinciple
				of Programming</i></a> by authors on the Wiki-Wiki web [Cunninghan 1999a].
		Complexity increases rapidly until the it reaches a level of
		complexity just beyond that with which programmers can comfortably
		cope. At this point, complexity and our abilities to contain it reach
		an uneasy equilibrium. The blitzkrieg bogs down into a siege. We built
		<a href="http://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork">
			the most complicated system that can possible work</a> [Cunningham
		1999b].
	</p>
	<a href="http://www.45thdivisionmuseum.com/Mainmuseum/Mauldin2.htm">
		<img src="http://laputan.org/images/pictures/mauldin-warm-mud.gif">
	</a>

	<p>Such code can become a personal fiefdom, since the author care
		barely understand it anymore, and no one else can come close. Once
		simple repairs become all day affairs, as the code turns to mud. It
		becomes increasingly difficult for management to tell how long such
		repairs ought to take. Simple objectives turn into trench warfare.
		Everyone becomes resigned to a turgid pace. Some even come to prefer
		it, hiding in their cozy foxholes, and making their two line-per-day
		repairs.</p>

	<p>It is interesting to ask whether some of the differences in
		productivity seen between hyper-productive organizations and typical
		shops are due not to differences in talent, but differences in
		terrain. Mud is hard to march through. The hacker in the trenches must
		engage complexity in hand-to-hand combat every day. Sometimes,
		complexity wins.</p>

	<p>Status in the programmer's primate pecking order is often earned
		through ritual displays of cleverness, rather than through
		workman-like displays of simplicity and clarity. That which a culture
		glorifies will flourish.</p>

	<p>
		Yet, a case can be made that the casual, undifferentiated structure of
		a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> is one of its
		secret advantages, since forces acting between two parts of the system
		can be directly addressed without having to worry about undermining
		the system’s grander architectural aspirations. These aspirations
		are modest ones at best in the typical <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>. Indeed, a casual approach to architecture is emblematic
		of the early phases of a system’s evolution, as programmers,
		architects and users learn their way around the domain [<a href="http://laputan.org/lifecycle/lifecycle.html#Prototype">Foote &amp; Opdyke
			1995</a>]. During the <a href="http://laputan.org/lifecycle/lifecycle.html#Prototype">PROTOTYPE</a>
		and <a href="http://laputan.org/lifecycle/lifecycle.html#Expand">EXPANSIONARY
			PHASES</a> of a systems evolution, expedient, white-box inheritance-based
		code borrowing, and a relaxed approach to encapsulation are common.
		Later, as experience with the system accrues, the grain of the
		architectural domain becomes discernable, and more durable black-box
		components begin to emerge. In other words, it’s okay if the
		system looks at first like a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>, at least until you know better.
	</p>

	<p>
		<img src="http://laputan.org/images/pictures/mud-house.gif" width="575" height="367" alt="Mud-based Architecture">
	</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>
		<a href="http://www.stlabs.com/marick/root.htm">Brian Marick</a> first
		suggested the name "<a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL
			OF MUD</a>" as a name for these sort of architectures, and the
		observation that this was, perhaps, the dominant architecture
		currently deployed, during a meeting of the <a href="http://st-www.cs.uiuc.edu/research-gp.html"> University of
			Illinois Software Architecture Group</a> several years ago. We have been
		using the term ever since. The term itself, in turn, appears to have <a href="http://www.bath.ac.uk/~masjap/TYL/history.html">arisen</a>
		during the '70s as a <a href="http://www.cs.unm.edu/~hollan/cs257/description.html">characterization</a>
		of <a href="http://www.cosc.canterbury.ac.nz/~wolfgang/cosc302/Chap2.3.html">Lisp</a>.
	</p>

	<p>
		<a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> architectures
		often emerge from throw-away prototypes, or <a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a>, because the
		prototype is kept, or the disposable code is never disposed of. (One
		might call these "<a href="http://www.muang.com/rice/plant.html">little
			balls of mud</a>".)
	</p>

	<p>
		They also can emerge as gradual maintenance and <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a> impinges upon
		the structure of a mature system. Once a system is working, a good way
		to encourage its growth is to <a href="http://laputan.org/mud/mud.html#KeepItWorking">KEEP
			IT WORKING</a>. When the <a href="http://laputan.org/mud/mud.html#ShearingLayers">SHEARING
			LAYERS</a> that emerge as change drives the system's evolution run
		against the existing grain of the system, its structure can be
		undermined, and the result can be a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>.
	</p>

	<p>
		The <a href="http://laputan.org/lifecycle/lifecycle.html#Prototype">PROTOTYPE
			PHASE</a> and <a href="http://laputan.org/lifecycle/lifecycle.html#Expand">EXPANSION
			PHASE</a> patterns in [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote
			&amp; Opdyke 1995</a>] both emphasize that a period of exploration and
		experimentation is often beneficial before making enduring
		architectural commitments.
	</p>

	<p>
		However, these activities, which can undermine a system's structure
		should be interspersed with <a href="http://laputan.org/lifecycle/lifecycle.html#Consolidate">CONSOLIDATION
			PHASES</a> [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote &amp; Opdyke
			1995</a>], during which opportunities to refactor the system to enhance
		its structure are exploited. Proponents of <a href="http://www.xprogramming.com/">Extreme Programming</a> [Beck
		2000] also emphasize continuous coding and refactoring.
	</p>

	<p>
		[Brand 1994] observes that buildings with large spaces punctuated with
		regular columns had the paradoxical effect of encouraging the
		innovative reuse of space precisely <u>because</u> they <a href="http://laputan.org/chaos/chaos.html"><i>constrained</i></a> the design space.
		Grandiose flights of architectural fancy weren’t possible, which
		reduced the number of design alternatives that could be put on the
		table. Sometimes <a href="http://laputan.org/dfc/discussion.html#O2isEasy">FREEDOM
			FROM CHOICE</a> [Foote 1988] is what we <u>really</u> want.
	</p>

	<p>One of mud's most effective enemies is sunshine. Subjecting
		convoluted code to scrutiny can set the stage for its refactoring,
		repair, and rehabilitation. Code reviews are one mechanism one can use
		to expose code to daylight.</p>

	<p>
		Another is the <a href="http://www.xprogramming.com/">Extreme
			Programming</a> practice of pair programming [Beck 2000]. A pure pair
		programming approach requires that every line of code written be added
		to the system with two programmers present. One types, or "drives",
		while the other "rides shotgun" and looks on. In contrast to
		traditional solitary software production practices, pair programming
		subjects code to immediate scrutiny, and provides a means by which
		knowledge about the system is rapidly disseminated.
	</p>

	<p>Indeed, reviews and pair programming provide programmers with
		something their work would not otherwise have: an audience. Sunlight,
		it is said is a powerful disinfectant. Pair-practices add an element
		of performance to programming. An immediate audience of one's peers
		provides immediate incentives to programmers to keep their code clear
		and comprehensible, as well as functional.</p>

	<p>
		An additional benefit of pairing is that accumulated wisdom and best
		practices can be <a href="http://laputan.org/chaos/chaos.html">rapidly
			disseminated</a> throughout an organization through successive pairings.
		This is, incidentally, the same benefit that sexual reproduction
		brought to the genome.
	</p>

	<p>By contrast, if no one ever looks at code, everyone is free to
		think they are better than average at producing it. Programmers will,
		instead, respond to those relatively perverse incentives that do
		exist. Line of code metrics, design documents, and other indirect
		measurements of progress and quality can become central concerns.</p>

	<p>
		There are three ways to deal with <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALLS OF MUD</a>. The first is to keep the system healthy.
		Conscientiously alternating periods of <a href="http://laputan.org/lifecycle/lifecycle.html#Expand">EXPANSION</a> with periods
		of <a href="http://laputan.org/lifecycle/lifecycle.html#Consolidate">CONSOLIDATION</a>,
		refactoring and repair can maintain, and even enhance a system's
		structure as it evolves. The second is to throw the system away and
		start over. The <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a>
		pattern explores this drastic, but frequently necessary alternative.
		The third is to simply surrender to entropy, and wallow in the mire.
	</p>

	<p>
		Since the time of Roman architect <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/vit/www/index.html">Marcus
			Vitruvius</a>, [<a href="http://www.ukans.edu/history/index/europe/ancient_rome/E/Roman/Texts/Vitruvius/home*.html">Vitruvius
			20 B.C.</a>] architects have focused on his trinity of desirables: <i>Firmitas</i>
		(<b>strength</b>), <i>Utilitas</i> (<b>utility</b>), and <i>Venustas</i>
		(<b>beauty</b>). A <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>
		usually represents a triumph of utility over aesthetics, because
		workmanship is sacrificed for functionality. Structure and durability
		can be sacrificed as well, because an incomprehensible program defies
		attempts at maintenance. The frenzied, feature-driven "bloatware"
		phenomenon seen in many large consumer software products can be seen
		as evidence of designers having allowed purely utilitarian concerns to
		dominate software design.
	</p>

	
	<a name="ThrowAwayCode"></a>
	

	<table>
		<tbody><tr>
			<td><i>alias </i></td>
		</tr>
		<tr>
			<td>QUICK HACK</td>
		</tr>
		<tr>
			<td>KLEENEX CODE</td>
		</tr>
		<tr>
			<td>DISPOSABLE CODE</td>
		</tr>
		<tr>
			<td>SCRIPTING</td>
		</tr>
		<tr>
			<td>KILLER DEMO</td>
		</tr>
		<tr>
			<td>PERMANENT PROTOTYPE</td>
		</tr>
		<tr>
			<td>BOOMTOWN</td>
		</tr>
	</tbody></table>

	

	<p>
		<a href="http://www.users.csbsju.edu/~jwberndt/garbage.html"> <img src="http://laputan.org/images/pictures/landfill.jpg" width="258" height="372"></a>
	</p>

	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>A homeowner might erect a temporary storage shed or car port,
		with every intention of quickly tearing it down and replacing it with
		something more permanent. Such structures have a way of enduring
		indefinitely. The money expected to replace them might not become
		available. Or, once the new structure is constructed, the temptation
		to continue to use the old one for "a while" might be hard
		to resist.</p>

	<p>Likewise, when you are prototyping a system, you are not usually
		concerned with how elegant or efficient your code is. You know that
		you will only use it to prove a concept. Once the prototype is done,
		the code will be thrown away and written properly. As the time nears
		to demonstrate the prototype, the temptation to load it with
		impressive but utterly inefficient realizations of the system’s
		expected eventual functionality can be hard to resist. Sometimes, this
		strategy can be a bit too successful. The client, rather than funding
		the next phase of the project, may slate the prototype itself for
		release.</p>

	<p><span><b>You need an immediate fix
						for a small problem, or a quick prototype or proof of concept.</b></span></p>

	<p>
		<span><i>Time</i>, or a lack thereof, is frequently the
			decisive force that drives programmers to write <a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a>. Taking the time to
			write a proper, well thought out, well documented program might take
			more time that is available to solve a problem, or more time that the
			problem merits. Often, the programmer will make a frantic dash to
			construct a minimally functional program, while all the while
			promising him or herself that a better factored, more elegant version
			will follow thereafter. They may know full well that building a
			reusable system will make it easier to solve similar problems in the
			future, and that a more polished architecture would result in a
			system that was easier to maintain and extend. </span>
	</p>

	<p>
		<span> Quick-and-dirty coding is often rationalized as being a
			stopgap measure. All too often, time is never found for this follow
			up work. The code languishes, while the program flourishes.</span>
	</p>

	<p><b><u><i>Therefore</i></u>, produce, by any
					means available, simple, expedient, disposable code that adequately
					addresses just the problem at-hand.</b></p>

	<p>
		<a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a> is often written
		as an alternative to reusing someone else’s more complex code.
		When the deadline looms, the certainty that you can produce a sloppy
		program that works yourself can outweigh the unknown cost of learning
		and mastering someone else’s library or framework.
	</p>

	<p>
		Programmers are usually not domain experts, especially at first. Use
		cases or <a href="http://www.c2.com/doc/crc/draw.html">CRC</a> <a href="http://www.du.edu/~mschwart/oo_review.html">cards</a> [<a href="http://c2.com/doc/oopsla89/paper.html">Beck &amp;
			Cunningham 1989</a>] can help them to discover domain objects. However,
		nothing beats building a prototype to help a team learn its way around
		a domain.
	</p>

	<p>When you build a prototype, there is always the risk that
		someone will say "that's good enough, ship it". One way to minimize
		the risk of a prototype being put into production is to write the
		prototype in using a language or tool that you couldn't possibly use
		for a production version of your product. Proponents of
	</p><p>
		<a href="http://www.xprogramming.com/">Extreme Programming</a> [Beck
		2000] often construct quick, disposable prototypes called "spike
		solutions". Prototypes help us learn our way around the problem space,
		but should never be mistaken for good designs [<a href="http://laputan.org/drc/drc.html">Johnson &amp; Foote 1988</a>].
	</p>
	Not every program need be a palace. A simple throwaway program is like
	a tent city or a mining boomtown, and often has no need for fifty year
	solutions to its problems, given that it will give way to a ghost town
	in five.
	



	The real problem with
	<p>
		<a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a> comes when it
		isn't thrown away.
	</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>
		The production of <a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a>
		is a nearly universal practice. Any software developer, at any skill
		or experience level, can be expected to have had at least occasional
		first-hand experience with this approach to software development. For
		example, in the patterns community, two examples of quick-and-dirty
		code that have endured are the <a href="http://jerry.cs.uiuc.edu/plop/chili98/chili-register.html">PLoP
			online registration</a> code, and the <a href="http://c2.com/cgi/wiki?WelcomeVisitors">Wiki-Wiki Web</a>
		pages.
	</p>

	<p>The EuroPLoP/PLoP/UP online registration code was, in effect, a
		distributed web-based application that ran on four different machines
		on two continents. Conference information was maintained on a machine
		in St. Louis, while registration records were kept on machines in
		Illinois and Germany. The system could generate web-based reports of
		registration activity, and now even instantaneously maintaineed an
		online attendees list. It began life in 1995 as a quick-and-dirty
		collection of HTML, scavenged C demonstration code, and csh scripts.
		It was undertaken largely as an experiment in web-based form
		processing prior to PLoP ‘95, and, like so many things on the
		Web, succeeded considerably beyond the expectations of its authors.
		Today, it is still essentially the same collection of HTML, scavenged
		C demonstration code, and csh scripts. As such, it showcases how
		quick-and-dirty code can, when successful, take on a life of its own.</p>

	<p>The original C code and scripts probably contained fewer than
		three dozen original lines of code. Many lines were cut-and-paste jobs
		that differed only in the specific text they generate, or fields that
		they check.</p>

	<p>Here’s an example of one of the scripts that generates the
		attendance report:</p>
	<span face="Lucida Sans Typewriter" size="2">

		<p>
			echo "&lt;H2&gt;Registrations: &lt;B&gt;" `ls | wc -l`
			"&lt;/B&gt;&lt;/H2&gt;"<br> echo
			"&lt;CODE&gt;"<br> echo "Authors: &lt;B&gt;"
			`grep 'Author = Yes' * | wc -l` "&lt;/B&gt;"<br> echo
			"&lt;BR&gt;"<br> echo "Non-Authors:
			&lt;B&gt;" `grep 'Author = No' * | wc -l` "&lt;/B&gt;"<br>
			echo "&lt;BR&gt;&lt;BR&gt;"
		</p>
	</span>

	<p>
		This script is slow and inefficient, particularly as the number of
		registrations increases, but not least among its virtues is the fact
		that it<i> works</i>. Were the number of attendees to exceed more than
		around one hundred, this script would start to perform so badly as to
		be unusable. However, since hundreds of attendees would exceed the
		physical capacity of the conference site, we knew the number of
		registrations would have been limited long before the performance of
		this script became a significant problem. So while this approach is,
		in general, a lousy way to address this problem, it is perfectly
		satisfactory within the confines of the particular purpose for which
		the script has ever actually been used. Such practical constraints are
		typical of <a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a>, and
		are more often than not undocumented. For that matter, everything
		about <a href="http://laputan.org/mud/mud.html#ThrowAwayCode">THROWAWAY CODE</a> is more
		often than not undocumented. When documentation exists, it is
		frequently not current, and often not accurate.
	</p>

	<p>
		The Wiki-Web <a href="http://c2.com/cgi/wiki?MoreAboutMechanics">code</a>
		at <a href="http://www.c2.com/">www.c2.com</a> also started as a CGI
		experiment undertaken by Ward Cunningham also succeeded beyond the
		author’s expectations. The name "wiki" is one of
		Ward’s personal jokes, having been taken from a Hawaiian word for
		"quick" that the author had seen on an airport van on a
		vacation in Hawaii. Ward has subsequently used the name for a number
		of quick-and-dirty projects. The Wiki Web is unusual in that <u>any</u>
		visitor may change anything that anyone else has written
		indiscriminately. This would seem like a recipe for vandalism, but in
		practice, it has worked out well. In light of the system’s
		success, the author has subsequently undertaken additional work to
		polish it up, but the same quick-and-dirty Perl CGI core remains at
		the heart of the system.
	</p>

	<p>
		Both systems might be thought of as being on the verge of graduating
		from little balls of mud to <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALLS OF MUD</a>. The registration system’s C code <i><a href="http://laputan.org/dfc/discussion.html#Skeletons">metastasized</a></i> from one of
		the NCSA HTTPD server demos, and still contains zombie code that
		testifies to this heritage. At each step, <a href="http://laputan.org/mud/mud.html#KeepItWorking">KEEPING IT WORKING</a> is a premiere
		consideration in deciding whether to extend or enhance the system.
		Both systems might be good candidates for <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a>, were the
		resources, interest, and audience present to justify such an
		undertaking. In the mean time, these systems, which are still
		sufficiently well suited to the particular tasks for which they were
		built, remain in service. Keeping them on the air takes far less
		energy than rewriting them. They continue to evolve, in a <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL</a> fashion, a little at a
		time.
	</p>

	<p>You can ameloriate the architectural erosion that can be caused
		by quick-and-dirty code by isolating it from other parts of your
		system, in its own objects, packages, or modules. To the extent that
		such code can be quarantined, its ability to affect the integrity of
		healthy parts of a system is reduced.</p>

	<p>
		Once it becomes evident that a purportedly disposable artifact is
		going to be around for a while, one can turn one's attention to
		improving its structure, either through an iterative process of <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a>, or via a fresh
		draft, as discussed in the <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a>
		pattern.
	</p>
	<p>
		<a href="http://www.truelink.net/user/cliffymel/dvalley.htm"> <img src="http://laputan.org/images/pictures/rhyolite-small.jpg" alt="Rhyolite"></a>
	</p>
	<p>
		<span face="Courier New" size="2"> From <i>boomtown</i> to <i>ghost
				town</i>:<br> The mining town of <b>Rhyolite</b>, in Death Valley,
			was briefly the third largest city in Nevada.<br> Then the ore
			ran out.
		</span>
	</p>

	
	<a name="PiecemealGrowth"></a>
	

	<table>
		<tbody><tr>
			<td><i>alias</i></td>
		</tr>
		<tr>
			<td>URBAN SPRAWL</td>
		</tr>
		<tr>
			<td>ITERATIVE-INCREMENTAL
				DEVELOPMENT</td>
		</tr>
	</tbody></table>

	

	<p>
		<span><a href="http://liftoff.msfc.nasa.gov/RealTime/JTrack/Spacecraft.html">
				<img src="http://laputan.org/images/pictures/Mir-Mud.gif" width="385" height="250" alt="Mir Complex">
		</a></span>
	</p>
	<p>
		<span face="Courier New" size="2"> The Russian <a href="http://www.maximov.com/Mir/">Mir ("Peace") Space Station</a>
			Complex was <a href="http://www.maximov.com/Mir/mirdesign.html">designed</a>
			for reconfiguration and <a href="http://www.spaceviews.com/features/mir/display/index.html">modular
				growth</a>. The Core module was launched in 1986, and the Kvant
			("Quantum") and Kvant-2 modules joined the complex in 1987 and 1989.
			The Kristall ("Crystal") module was added in 1990. The Spektr
			("Spectrum") and shuttle Docking modules were added in 1995, the
			latter surely a <a href="http://shuttle-mir.nasa.gov/">development</a>
			not anticipated in 1986. The station’s final module, Priroda
			("Nature"), was launched in 1996. The common core and independent
			maneuvering capabilities of several of the modules have allowed the
			complex to be <a href="http://www.hq.nasa.gov/osf/mir/">rearranged</a>
			several times as it has grown.
		</span>
	</p>
	<a href="http://www.sigs.com/publications/docs/objm/9704/9704.booch.html">
		<img src="http://laputan.org/images/pictures/sprawl-small.jpg" alt="Urban Sprawl in Colorado" width="329" height="235">
	</a>

	<p>
		Urban planning has an <a href="http://www.architectureweek.com/2001/0822/culture_1-2.html">uneven</a>
		history of success. For instance, Washington D.C. was laid out
		according to a <a href="http://www.nbm.org/Capital/">master plan</a>
		designed by the French architect <a href="http://www.nps.gov/nama/lenfant.htm">L’Enfant</a>. The
		capitals of
		<!-- Was: http://www1.estado.com.br/english/brasil/brasili2.html -->
		Brazil (<a href="http://www.macalstr.edu/~geograph/world-urbanization/jmoersch/geography.html">Brasilia</a>)
		and Nigeria (<a href="http://cityguide.lycos.com/africa/westcentral_africa/NGAAbuja.html">Abuja</a>)
		started as paper cities as well. Other cities, such as <a href="http://www.patternlanguage.com/leveltwo/archivesframe.htm?/leveltwo/../archives/alexander1.htm">Houston</a>,
		have grown without any overarching plan to guide them. Each approach
		has its problems. For instance, the radial street plans in
		L’Enftant’s master plan become awkward past a certain
		distance from the center. The lack of any plan at all, on the other
		hand, leads to a patchwork of residential, commercial, and industrial
		areas that is dictated by the capricious interaction of local forces
		such as land ownership, capital, and zoning. Since concerns such as
		recreation, shopping close to homes, and noise and pollution away from
		homes are not brought directly into the mix, they are not adequately
		addressed.
	</p>

	<p>Most cities are more like Houston than Abuja. They may begin as
		settlements, subdivisions, docks, or railway stops. Maybe people were
		drawn by gold, or lumber, access to transportation, or empty land. As
		time goes on, certain settlements achieve a critical mass, and a
		positive feedback cycle ensues. The city’s success draws
		tradesmen, merchants, doctors, and clergymen. The growing population
		is able to support infrastructure, governmental institutions, and
		police protection. These, in turn, draw more people. Different
		sections of town develop distinct identities. With few exceptions,
		(Salt Lake City comes to mind) the founders of these settlements never
		stopped to think that they were founding major cities. Their ambitions
		were usually more modest, and immediate.</p>

	<p>
		<!-- Also at: http://civila.com/brasilia/minis_ic.htm -->
		<a href="http://www.geocities.com/~augusto_areal/minis_ic.htm"> <img src="http://laputan.org/images/pictures/brasilia09.jpg" alt="Brasilia">
		</a>
	</p>

	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>

	<p>It has become fashionable over the last several years to take
		pot shots at the "traditional" waterfall process model. It may seem to
		the reader that attacking it is tantamount to flogging a dead horse.
		However, if it be a dead horse, it is a tenacious one. While the
		approach itself is seen by many as having been long since discredited,
		it has spawned a legacy of rigid, top-down, front-loaded processes and
		methodologies that endure, in various guises, to this day. We can do
		worse that examine the forces that led to its original development.</p>

	<p>
		In the days before waterfall development, programming pioneers
		employed a simple, casual, relatively undisciplined "code-and-fix"
		approach to software development. Given the primitive nature of the
		problems of the day, this approach was frequently effective. However,
		the result of this lack of discipline was, all too often, a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>.
	</p>

	<p>The waterfall approach arose in response to this muddy morass.
		While the code-and-fix approach might have been suitable for small
		jobs, it did not scale well. As software became more complex, it would
		not do to simply gather a room full of programmers together and tell
		them to go forth and code. Larger projects demanded better planning
		and coordination. Why, it was asked, can't software be engineered like
		cars and bridges, with a careful analysis of the problem, and a
		detailed up-front design prior to implementation? Indeed, an
		examination of software development costs showed that problems were
		many times more expensive to fix during maintenance than during
		design. Surely it was best to mobilize resources and talent up-front,
		so as to avoid maintenance expenses down the road. It's surely wiser
		to route the plumbing correctly now, before the walls are up, than to
		tear holes in them later. Measure twice, cut once.</p>

	<p>One of the reasons that the waterfall approach was able to
		flourish a generation ago was that computers and business requirements
		changed at a more leisurely pace. Hardware was very expensive, often
		dwarfing the salaries of the programmers hired to tend it. User
		interfaces were primitive by today's standards. You could have any
		user interface you wanted, as long as it was an alphanumeric "green
		screen". Another reason for the popularity of the waterfall approach
		was that it exhibited a comfortable similarity to practices in more
		mature engineering and manufacturing disciplines.</p>

	<p>Today's designers are confronted with a broad onslaught of
		changing requirements. It arises in part from the rapid growth of
		technology itself, and partially from rapid changes in the business
		climate (some of which is driven by technology). Customers are used to
		more sophisticated software these days, and demand more choice and
		flexibility. Products that were once built from the ground up by
		in-house programmers must now be integrated with third-party code and
		applications. User interfaces are complex, both externally and
		internally. Indeed, we often dedicate an entire tier of our system to
		their care and feeding. Change threatens to outpace our ability to
		cope with it.</p>

	<p><span><b>Master plans are often
						rigid, misguided and out of date. Users’ needs change with
						time.</b></span></p>

	<p>
		<i>Change:</i> The fundamental problem with top-down design is that
		real world requirement are inevitably moving targets. You can't simply
		aspire to solve the problem at hand once and for all, because, by the
		time you're done, the problem will have changed out from underneath
		you. You can't simply do what the customer wants, for quite often,
		they don't know what they want. You can't simply plan, you have to
		plan to be able to adapt. If you can't fully anticipate what is going
		to happen, you must be prepared to be nimble.
	</p>

	<p>
		<i>Aesthetics:</i> The goal of up-front design is to be able to
		discern and specify the significant architectural elements of a system
		before ground is broken for it. A superior design, given this mindset,
		is one that elegantly and completely specifies the system's structure
		before a single line of code has been written. Mismatches between
		these blueprints and reality are considered aberrations, and are
		treated as mistakes on the part of the designer. A better design would
		have anticipated these oversights. In the presence of volatile
		requirements, aspirations towards such design perfection are as vain
		as the desire for a hole-in-one on every hole.
	</p>

	<p>To avoid such embarrassment, the designer may attempt to cover
		him or herself by specifying a more complicated, and more general
		solution to certain problems, secure in the knowledge that others will
		bear the burden of constructing these artifacts. When such predictions
		about where complexity is needed are correct, they can indeed be a
		source of power and satisfaction. This is part of their allure of
		Venustas. However, sometime the anticipated contingencies never arise,
		and the designer and implementers wind up having wasted effort solving
		a problem that no one has ever actually had. Other times, not only is
		the anticipated problem never encountered, its solution introduces
		complexity in a part of the system that turns out to need to evolve in
		another direction. In such cases, speculative complexity can be an
		unnecessary obstacle to subsequent adaptation. It is ironic that the
		impulse towards elegance can be an unintended source of complexity and
		clutter instead.</p>

	<p>In its most virulent form, the desire to anticipate and head off
		change can lead to "analysis paralysis", as the thickening web of
		imagined contingencies grows to the point where the design space seems
		irreconcilably constrained.</p>

	<p><b><u><i>Therefore</i></u>, incrementally
					address forces that encourage change and growth. Allow
					opportunities for growth to be exploited <u>locally</u>, as they
					occur. Refactor unrelentingly.</b></p>

	<p>
		Successful software attracts a wider audience, which can, in turn,
		place a broader range of requirements on it. These new requirements
		can run against the grain of the original design. Nonetheless, they
		can frequently be addressed, but at the cost of cutting across the
		grain of existing architectural assumptions. [Foote 1988] called this
		architectural erosion <i><a href="http://laputan.org/dfc/discussion.html#Specificity">midlife generality loss</a></i>.
	</p>

	<p>
		When designers are faced with a choice between building something
		elegant from the ground up, or undermining the architecture of the
		existing system to quickly address a problem, architecture usually
		loses. Indeed, this is a natural phase in a system’s evolution [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote &amp; Opdyke 1995</a>]. This
		might be thought of as <i>messy kitchen</i> phase, during which pieces
		of the system are scattered across the counter, awaiting an eventual
		cleanup. The danger is that the clean up is never done. With real
		kitchens, the board of health will eventually intervene. With
		software, alas, there is seldom any corresponding agency to police
		such squalor. Uncontrolled growth can ultimately be a malignant force.
		The result of neglecting to contain it can be a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a>.
	</p>

	<p>
		In <i>How Buildings Learn</i>, Brand [Brand 1994] observed that what
		he called <i>High Road</i> architecture often resulted in buildings
		that were expensive and difficult to change, while vernacular, <i>Low
			Road</i> buildings like bungalows and warehouses were, paradoxically,
		much more adaptable. Brand noted that <i>Function melts form</i>, and
		low road buildings are more amenable to such change. Similarly, with
		software, you may be reluctant to desecrate another programmer’s
		cathedral. Expedient changes to a low road system that exhibits no
		discernable architectural pretensions to begin with are easier to
		rationalize.
	</p>

	<p>
		In the Oregon Experiment [Brand 1994][Alexander 1988] <a href="http://gee.cs.oswego.edu/dl/ca/ca/ca.html">Alexander</a> noted:
	</p>
	<dir>
		<i> Large-lump development is based on the idea of <b>replacement</b>.
			Piecemeal Growth is based on the idea of <b>repair</b>. …
			Large-lump development is based on the fallacy that it is possible to
			build perfect buildings. Piecemeal growth is based on the healthier
			and more realistic view that mistakes are inevitable. … Unless
			money is available for repairing these mistakes, every building, once
			built, is condemned to be, to some extent unworkable. …
			Piecemeal growth is based on the assumption that adaptation between
			buildings and their users is necessarily a slow and continuous
			business which cannot, under any circumstances, be achieve in a
			single leap.
		</i>
	</dir>

	<p>Alexander has noted that our mortgage and capital expenditure
		policies make large sums of money available up front, but do nothing
		to provide resources for maintenance, improvement, and evolution
		[Brand 1994][Alexander 1988]. In the software world, we deploy our
		most skilled, experienced people early in the lifecycle. Later on,
		maintenance is relegated to junior staff, when resources can be
		scarce. The so-called maintenance phase is the part of the lifecycle
		in which the price of the fiction of master planning is really paid.
		It is maintenance programmers who are called upon to bear the burden
		of coping with the ever widening divergence between fixed designs and
		a continuously changing world. If the hypothesis that architectural
		insight emerges late in the lifecycle is correct, then this practice
		should be reconsidered.</p>

	<p>
		Brand went on to observe <i>Maintenance <b>is</b> learning.
		</i>He distinguishes three levels of learning in the context of systems.
		This first is habit, where a system dutifully serves its function
		within the parameters for which it was designed. The second level
		comes into play when the system must adapt to change. Here, it usually
		must be modified, and its capacity to sustain such modification
		determines it’s degree of adaptability. The third level is the
		most interesting: <i>learning to learn</i>. With buildings, adding a
		raised floor is an example. Having had to sustain a major upheaval,
		the system adapts so that subsequent adaptations will be much less
		painful.
	</p>

	<p>
		<a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a> can be
		undertaken in an opportunistic fashion, starting with the existing,
		living, breathing system, and working outward, a step at a time, in
		such a way as to not undermine the system’s viability. You
		enhance the program as you use it. Broad advances on all fronts are
		avoided. Instead, change is broken down into small, manageable chunks.
	</p>

	<p>
		One of the most striking things about <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a> is the role
		played by <i>Feedback</i>. Herbert Simon [Simon 1969] has observed
		that few of the adaptive systems that have been forged by evolution or
		shaped by man depend on prediction as their main means of coping with
		the future. He notes that two complementary mechanisms, homeostasis,
		and retrospective feedback, are often far more effective. Homeostasis
		insulates the system from short-range fluctuations in its environment,
		while feedback mechanisms respond to long-term discrepancies between a
		system's actual and desired behavior, and adjust it accordingly.
		Alexander [Alexander 1964] has written extensively of the roles that
		homeostasis and feedback play in adaptation as well.
	</p>

	<p>
		If you can adapt quickly to change, predicting it becomes far less
		crucial. Hindsight, as Brand observes [Brand 1994] is better than
		foresight. Such rapid adaptation is the basis of one of the mantras of
		<a href="http://www.xprogramming.com/">Extreme Programming</a> [Beck
		2000]: <i>You're not going to need it</i>.
	</p>

	<p>Proponents of XP (as it is called) say to pretend you are not a
		smart as you think you are, and wait until this clever idea of yours
		is actually required before you take the time to bring it into being.
		In the cases where you were right, hey, you saw it coming, and you
		know what to do. In the cases where you were wrong, you won't have
		wasted any effort solving a problem you've never had when the design
		heads in an unanticipated direction instead.</p>

	<p>
		<a href="http://www.xprogramming.com/">Extreme Programming</a> relies
		heavily on feedback to keep requirements in sync with code, by
		emphasizing short (three week) iterations, and extensive, continuous
		consultation with users regarding design and development priorities
		throughout the development process. Extreme Programmers do not engage
		in extensive up-front planning. Instead, they produce working code as
		quickly as possible, and steer these prototypes towards what the users
		are looking for based on feedback.
	</p>

	<p>Feedback also plays a role in determining coding assignments.
		Coders who miss a deadline are assigned a different task during the
		next iteration, regardless of how close they may have been to
		completing the task. This form of feedback resembles the stern justice
		meted out by the jungle to the fruit of uncompetitive pairings.</p>

	<p>
		<a href="http://www.xprogramming.com/">Extreme Programming</a> also
		emphasizes testing as an integral part of the development process.
		Tests are developed, ideally, before the code itself. Code is
		continuously tested as it is developed.
	</p>

	<p>
		There is a "back-to-the-future" quality to Extreme Programming. In
		many respects, it resembles the blind <i>Code and Fix</i> approach.
		The thing that distinguishes it is the central role played by feedback
		in driving the system's evolution. This evolution is abetted, in turn,
		by modern object-oriented languages and powerful refactoring tools.
	</p>

	<p>Proponents of extreme programming portray it as placing minimal
		emphasis on planning and up-front design. They rely instead on
		feedback and continuous integration. We believe that a certain amount
		of up-front planning and design is not only important, but inevitable.
		No one really goes into any project blindly. The groundwork must be
		laid, the infrastructure must be decided upon, tools must be selected,
		and a general direction must be set. A focus on a shared architectural
		vision and strategy should be established early.</p>

	<p>Unbridled, change can undermine structure. Orderly change can
		enhance it. Change can engender malignant sprawl, or healthy, orderly
		growth.</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>
		A broad consensus that objects emerge from an <i>iterative
			incremental</i> evolutionary process has formed in the object-oriented
		community over the last decade. See for instance [Booch 1994]. The <a href="http://laputan.org/metamorphosis/metamorphosis.html#SoftwareTectonics">SOFTWARE
			TECTONICS</a> pattern [Foote &amp; Yoder 1996] examines how systems can
		incrementally cope with change.
	</p>

	<p>
		The biggest risk associated with <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL
			GROWTH</a> is that it will gradually erode the overall structure of the
		system, and inexorably turn it into a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>. A strategy of <a href="http://laputan.org/mud/mud.html#KeepItWorking">KEEPING
			IT WORKING</a> goes hand in hand with <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL
			GROWTH</a>. Both patterns emphasize acute, local concerns at the expense
		of chronic, architectural ones.
	</p>

	<p>
		To counteract these forces, a permanent commitment to <a href="http://laputan.org/lifecycle/lifecycle.html#Consolidate">CONSOLIDATION</a> and
		<a href="http://laputan.org/lifecycle/lifecycle.html#Table2">refactoring</a> must be
		made. It is through such a process that local and global forces are
		reconciled over time. This lifecyle perspective has been dubbed the <i><a href="http://laputan.org/frameworks/fractal.html">fractal model</a></i> [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote &amp; Opdyke 1995</a>]. To
		quote Alexander [Brand 1994][Alexander 1988]:
	</p>
	<dir>
		<i>An organic process of growth and repair must create a gradual
			sequence of changes, and these changes must be distributed evenly
			across all levels of scale. [In developing a college campus] there
			must be as much attention to the repair of details—rooms, wings
			of buildings, windows, paths—as to the creation of brand new
			buildings. Only then can the environment be balanced both as a whole,
			and in its parts, at every moment in its history.</i>
	</dir>
	

	<a name="KeepItWorking"></a>
	

	<table>
		<tbody><tr>
			<td><i>alias</i></td>
		</tr>
		<tr>
			<td>VITALITY</td>
		</tr>
		<tr>
			<td>BABY STEPS</td>
		</tr>
		<tr>
			<td>DAILY BUILD</td>
		</tr>
		<tr>
			<td>FIRST, DO NO HARM</td>
		</tr>
	</tbody></table>


	<p>
		<span face="Courier New" size="2">Probably the greatest factor
			that keeps us moving forward is that we use the system all the time,
			and we keep trying to do new things with it. It is this
			"living-with" which drives us to root out failures, to
			clean up inconsistencies, and which inspires our occasional
			innovation.</span>
	</p>

	<p>
		<span face="Courier New" size="2"><b>Daniel H. H. Ingalls </b>[Ingalls
			1983]</span>
	</p>

	<a href="http://kpt1.tricon.net/Personal/wesley/primum.html"> <img src="http://laputan.org/images/pictures/hippocrates.jpg" alt="First, Do No Harm"></a>

	<p>Once a city establishes its infrastructure, it is imperative
		that it be kept working. For example, if the sewers break, and
		aren’t quickly repaired, the consequences can escalate from
		merely unpleasant to genuinely life threatening. People come to expect
		that they can rely on their public utilities being available 24 hours
		per day. They (rightfully) expect to be able to demand that an outage
		be treated as an emergency.</p>

	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>Software can be like this. Often a business becomes dependent
		upon the data driving it. Businesses have become critically dependent
		on their software and computing infrastructures. There are numerous
		mission critical systems that must be on-the-air twenty-four hours a
		day/seven days per week. If these systems go down, inventories can not
		be checked, employees can not be paid, aircraft cannot be routed, and
		so on.</p>

	<p>
		There may be times where taking a system down for a major overhaul can
		be justified, but usually, doing so is fraught with peril. However,
		once the system is brought back up, it is difficult to tell which from
		among a large collection of modifications might have caused a new
		problem. Every change is suspect. This is why deferring such
		integration is a recipe for misery. Capers Jones [Jones 1999] reported
		that the chance that a significant change might contain a new error--a
		phenomenon he ominously referred to as a <i>Bad Fix Injection</i>--
		was about 7% in the United States. This may strike some readers as a
		low figure. Still, it's easy to see that compounding this possibility
		can lead to a situation where multiple upgrades are increasing likely
		to break a system.
	</p>

	<p><b>Maintenance needs have accumulated, but
					an overhaul is unwise, since you might break the system.</b></p>


	<p>
		<i>Workmanship:</i> Architects who live in the house they are building
		have an obvious incentive to insure that things are done properly,
		since they will directly reap the consequences when they do not. The
		idea of the architect-builder is a central theme of Alexander's work.
		Who better to resolve the forces impinging upon each design issue as
		it arises as the person who is going to have to live with these
		decisions? The architect-builder will be the direct beneficiary of his
		or her own workmanship and care. Mistakes and shortcuts will merely
		foul his or her own nest.
	</p>

	<p>
		<i>Dependability:</i> These days, people rely on our software
		artifacts for their very livelihoods, and even, at time, for their
		very safety. It is imperative that ill-advise changes to elements of a
		system do not drag the entire system down. Modern software systems are
		intricate, elaborate webs of interdependent elements. When an
		essential element is broken, everyone who depends on it will be
		affected. Deadlines can be missed, and tempers can flare. This problem
		is particularly acute in <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALLS
			OF MUD</a>, since a single failure can bring the entire system down like
		a house of cards.
	</p>

	<p><b><u><i>Therefore</i></u>, do what it
					takes to maintain the software and keep it going. Keep it working.</b></p>

	<p>When you are living in the system you�re building, you have an
		acute incentive not to break anything. A plumbing outage will be a
		direct inconvenience, and hence you have a powerful reason to keep it
		brief. You are, at times, working with live wires, and must exhibit
		particular care. A major benefit of working with a live system is that
		feedback is direct, and nearly immediate.</p>

	<p>
		One of the strengths of this strategy is that modifications that break
		the system are rejected immediately. There are always a large number
		of paths forward from any point in a system’s evolution, and most
		of them lead nowhere. By immediately selecting only those that do <u>not</u>
		undermine the system’s viability, obvious dead-ends are avoided.
	</p>

	<p>
		Of course, this sort of reactive approach, that of kicking the
		nearest, meanest woolf from your door, is not necessarily globally
		optimal. Yet, by eliminating obvious wrong turns, <u>only</u> more
		insidiously incorrect paths remain. While these are always harder to
		identify and correct, they are, fortunately less numerous than those
		cases where the best immediate choice is also the best overall choice
		as well.
	</p>

	<p>It may seem that this approach only accommodates minor
		modifications. This is not necessarily so. Large new subsystems might
		be constructed off to the side, perhaps by separate teams, and
		integrated with the running system in such a way as to minimize
		distruption.</p>

	<p>Design space might be thought of as a vast, dark, largely
		unexplored forest. Useful potential paths through it might be thought
		of as encompassing working programs. The space off to the sides of
		these paths is much larger realm of non-working programs. From any
		given point, a few small steps in most directions take you from a
		working to a non-working program. From time to time, there are forks
		in the path, indicating a choice among working alternatives. In
		unexplored territory, the prudent strategy is never to stray too far
		from the path. Now, if one has a map, a shortcut through the trekless
		thicket that might save miles may be evident. Of course, pioneers, by
		definition, don’t have maps. By taking small steps in any
		direction, they know that it is never more than a few steps back to a
		working system.</p>

	<p>
		<span face="Courier New" size="2">Some years ago, Harlan Mills
			proposed that any software system should be grown by incremental
			development. That is, the system first be made to run, even though it
			does nothing useful except call the proper set of dummy subprograms.
			Then, bit by bit, it is fleshed out, with the subprograms in turn
			being developed into actions or calls to empty stubs in the level
			below.</span>
	</p>

	<p>
		<span face="Courier New" size="2">…</span>
	</p>

	<p>
		<span face="Courier New" size="2">Nothing in the past decade has
			so radically changed my own practice, and its effectiveness.</span>
	</p>

	<p>
		<span face="Courier New" size="2">…</span>
	</p>

	<p>
		<span face="Courier New" size="2">One always has, at every stage,
			in the process, a working system. I find that teams can <i>grow</i>
			much more complex entities in four months than they can <i>build.</i>
		</span>
	</p>

	<p>
		<span face="Courier New" size="2">-- From "<i>No Silver
				Bullet" </i>[Brooks 1995]
		</span>
	</p>
	<p>Microsoft mandates that a DAILY BUILD of each product be
		performed at the end of each working day. Nortel adheres to the
		slightly less demanding requirement that a working build be generated
		at the end of each week [Brooks 1995][Cusumano &amp; Shelby 1995].
		Indeed, this approach, and keeping the last working version around,
		are nearly universal practices among successful maintenance
		programmers.</p>

	<p>Another vital factor in ensuring a system's continued vitality
		is a commitment to rigorous testing [Marick 1995][Bach 1994]. It's
		hard to keep a system working if you don't have a way of making sure
		it works. Testing is one of pillars of Extreme Programming. XP
		practices call for the development of unit tests before a single line
		of code is written.</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>
		Always beginning with a working system helps to encourage <a href="http://laputan.org/mud/mud.html#PiecemealGrowth">PIECEMEAL GROWTH</a>. Refactoring is
		the primary means by which programmers maintain order from inside the
		systems in which they are working. The goal of refactoring is to leave
		a system working as well after a refactoring as it was before the
		refactoring. Aggressive unit and integration testing can help to
		guarantee that this goal is met.
	</p>

	
	<a name="ShearingLayers"></a>
	
	<!--
<table border="0" width="100%" bgcolor="#FFFF00" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" align="center"><i>alias</i></td>
    <b>
  </tr>
  <tr>
    </b><td width="100%" align="center">POTEMKIN VILLAGE</td>
    <b>
  </tr>
  <tr>
    </b><td width="100%" align="center">HOUSECLEANING </td>
    <b>
  </tr>
  <tr>
    </b><td width="100%" align="center">PRETTY FACE</td>
    <b>
  </tr>
  <tr>
    </b><td width="100%" align="center">QUARANTINE</td>
    <b>
  </tr>
  <tr>
    </b><td width="100%" align="center">HIDING IT UNDER THE BED</td>
    <b>
  </tr>
</table>
</b>
-->

	<p>
		<a href="http://www.corbis.com/"> <img src="http://laputan.org/images/pictures/hummingbird.jpg" alt="Hummingbird">
		</a>
	</p>

	<p>
		<span face="Courier New" size="2">Hummingbirds and flowers are
			quick, redwood trees are slow, and whole redwood forests are even
			slower. Most interaction is within the same pace level--hummingbirds
			and flowers pay attention to each other, oblivious to redwoods, who
			are oblivious to them.</span>
	</p>

	<p>
		<span face="Courier New" size="2"><b>R. V. O'Neill </b>, <i>A
				Hierarchical Concept of Ecosystems</i></span>
	</p>
	<p>
		The notion of <a href="http://laputan.org/mud/mud.html#ShearingLayers">SHEARING LAYERS</a> is
		one of the centerpieces of Brand's <i>How Buildings Learn</i> [Brand
		1994]. Brand, in turn synthesized his ideas from a variety of sources,
		including British designer Frank Duffy, and ecologist R. V. O'Neill.
	</p>
	<a href="http://laputan.org/images/figures/shearing-layers.gif"> <img src="http://laputan.org/images/figures/shearing-small.gif" alt="Brand, Page 13">
	</a>

	<p>Brand quotes Duffy as saying: "Our basic argument is that there
		isn't any such thing as a building. A building properly conceived is
		several layers of longevity of built components".</p>

	<p>Brand distilled Duffy's proposed layers into these six: Site,
		Structure, Skin, Services, Space Plan, and Stuff. Site is geographical
		setting. Structure is the load bearing elements, such as the
		foundation and skeleton. Skin is the exterior surface, such as siding
		and windows. Services are the circulatory and nervous systems of a
		building, such as its heating plant, wiring, and plumbing. The Space
		Plan includes walls, flooring, and ceilings. Stuff includes lamps,
		chairs, appliances, bulletin boards, and paintings.</p>

	<p>These layers change at different rates. Site, they say, is
		eternal. Structure may last from 30 to 300 years. Skin lasts for
		around 20 years, as it responds to the elements, and to the whims of
		fashion. Services succumb to wear and technical obsolescence more
		quickly, in 7 to 15 years. Commercial Space Plans may turn over every
		3 years. Stuff, is, of course, subject to unrelenting flux [Brand
		1994].</p>
	<!--
<P ALIGN="CENTER">
<IMG src="../images/figures/shearing-layers.gif"
ALT="Brand, Page 13">
</p>
-->
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>

	<p>
		Software systems cannot stand still. Software is often called upon to
		bear the brunt of changing requirements, because, being as that it is
		made of bits, it <u>can</u> change.
	</p>

	<p><span><b>Different artifacts change
						at different rates.</b></span></p>

	<p>
		<i>Adaptability:</i> A system that can cope readily with a wide range
		of requirements, will, all other things being equal, have an advantage
		over one that cannot. Such a system can allow unexpected requirements
		to be met with little or no reengineering, and allow its more skilled
		customers to rapidly address novel challenges.
	</p>

	<p>
		<i>Stability:</i> Systems succeed by doing what they were designed to
		do as well as they can do it. They earn their niches, by bettering
		their competition along one or more dimensions such as cost, quality,
		features, and performance. See [<a href="http://laputan.org/lingua/lingua.html">Foote
			&amp; Roberts 1998</a>] for a discussion of the occasionally fickle nature of
		such completion. Once they have found their niche, for whatever
		reason, it is essential that short term concerns not be allowed to
		wash away the elements of the system that account for their mastery of
		their niche. Such victories are inevitably hard won, and fruits of
		such victories should not be squandered. Those parts of the system
		that do what the system does well must be protected from fads, whims,
		and other such spasms of poor judgement.
	</p>

	<p>
		<i>Adaptability</i> and <i>Stability</i> are forces that are in
		constant tension. On one hand, systems must be able to confront
		novelty without blinking. On the other, they should not squander their
		patrimony on spur of the moment misadventures.
	</p>

	<p><b><u><i>Therefore</i></u>, factor your
					system so that artifacts that change at similar rates are together.</b></p>

	<p>
		Most interactions in a system tend to be within layers, or between
		adjacent layers. Individual layers tend to be about things that change
		at similar rates. Things that change at different rates diverge.
		Differential rates of change encourage layers to emerge. Brand notes
		as well that occupational specialties emerge along with these layers.
		The rate at which things change shapes our organizations as well. For
		instance, decorators and painters concern themselves with interiors,
		while architects dwell on site and skin. We expect to see things that
		evolve at different rates emerge as distinct concerns. This is <a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html#SeparateChangeable">"separate
			that which changes from that which doesn't"</a> [<a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html">Roberts
			&amp; Johnson 1998</a>] writ large.
	</p>

	<p>Can we identify such layers in software?</p>

	<p>Well, at the bottom, there are data. Things that change most
		quickly migrate into the data, since this is the aspect of software
		that is most amenable to change. Data, in turn, interact with users
		themselves, who produce and consume them.</p>

	<p>Code changes more slowly than data, and is the realm of
		programmers, analysts and designers. In object-oriented languages,
		things that will change quickly are cast as black-box polymorphic
		components. Elements that will change less often may employ white-box
		inheritance.</p>

	<p>The abstract classes and components that constitute an
		object-oriented framework change more slowly than the applications
		that are built from them. Indeed, their role is to distill what is
		common, and enduring, from among the applications that seeded the
		framework.</p>

	<p>
		As frameworks evolve, certain abstractions make their ways from
		individual applications into the frameworks and libraries that
		constitute the system's infrastructure [<a href="http://laputan.org/dfc/discussion.html">Foote 1988</a>]. Not all elements will
		make this journey. Not all should. Those that do are among the most
		valuable legacies of the projects that spawn them. Objects help
		shearing layers to emerge, because they provide places where more
		fine-grained chunks of code and behavior that belong together can
		coalesce.
	</p>

	<p>The Smalltalk programming language is built from a set of
		objects that have proven themselves to be of particular value to
		programmers. Languages change more slowly than frameworks. They are
		the purview of scholars and standards committees. One of the
		traditional functions of such bodies is to ensure that languages
		evolve at a suitably deliberate pace.</p>

	<p>Artifacts that evolve quickly provide a system with dynamism and
		flexibility. They allow a system to be fast on its feet in the face of
		change.</p>

	<p>Slowly evolving objects are bulwarks against change. They embody
		the wisdom that the system has accrued in its prior interactions with
		its environment. Like tenure, tradition, big corporations, and
		conservative politics, they maintain what has worked. They worked
		once, so they are kept around. They had a good idea once, so maybe
		they are a better than even bet to have another one.</p>

	<p>Wide acceptance and deployment causes resistance to change. If
		changing something will break a lot of code, there is considerable
		incentive not to change it. For example, schema reorganization in
		large enterprise databases can be an expensive and time-consuming
		process. Database designers and administrators learn to resist change
		for this reason. Separate job descriptions, and separate hardware,
		together with distinct tiers, help to make these tiers distinct.</p>

	<p>The phenomenon whereby distinct concerns emerge as distinct
		layers and tiers can be seen as well with graphical user interfaces.</p>

	<p>
		Part of the impetus behind using <a href="http://laputan.org/metadata/metadata.html#Metadata">METADATA</a> [<a href="http://laputan.org/metadata/metadata.html">Foote &amp; Yoder 1998b</a>] is the
		observation that pushing complexity and power into the data pushes
		that same power (and complexity) out of the realm of the programmer
		and into the realm of users themselves. Metadata are often used to
		model static facilities such as classes and schemas, in order to allow
		them to change dynamically. The effect is analogous to that seen with
		modular office furniture, which allows office workers to easily,
		quickly, and cheaply move partitions without having to enlist
		architects and contractors in the effort.
	</p>

	<p>Over time, our frameworks, abstract classes, and components come
		to embody what we've learned about the structure of the domains for
		which they are built. More enduring insights gravitate towards the
		primary structural elements of these systems. Things which find
		themselves in flux are spun out into the data, where users can
		interact with them. Software evolution becomes like a centrifuge spun
		by change. The layers that result, over time, can come to a much truer
		accommodation with the forces that shaped them than any top-down
		agenda could have devised.</p>

	<p>
		<span face="Courier New" size="2">Things that are good have a
			certain kind of structure. You can�t get that structure except
			dynamically. Period. In nature you�ve got continuous
			very-small-feedback-loop adaptation going on, which is why things get
			to be harmonious. That�s why they have the qualities we value. If it
			wasn�t for the time dimension, it wouldn�t happen. Yet here we are
			playing the major role creating the world, and we haven�t figured
			this out. That is a very serious matter.</span>
	</p>

	<p>
		<span face="Courier New" size="2"><b>Christopher Alexander</b> --
			[Brand 1994]</span>
	</p>

	<p>
		<a href="http://sregora.com/gallery/cagallery.html"> <img src="http://laputan.org/images/pictures/redwood.jpg" alt="Redwood">
		</a>
	</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>


	<p>
		This pattern has much in common with the <a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html#SeparateChangeable">HOT
			SPOTS</a> pattern discussed in [<a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html">Roberts
			&amp; Johnson 1998</a>]. Indeed, separating things that change from those
		that do not is what drives the emergence of <a href="http://laputan.org/mud/mud.html#ShearingLayers">SHEARING LAYERS</a>. These <a href="http://www.rational.com/products/whitepapers/390.jsp#page=11">
			layers</a> are the result of such differential rates of change, while <a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html#SeparateChangeable">HOT
			SPOTS</a> might be thought of as the rupture zones in the fault lines
		along which slippage between layers occurs. This tectonic slippage is
		suggestive as well of the <a href="http://laputan.org/metamorphosis/metamorphosis.html#SoftwareTectonics">SOFTWARE
			TECTONICS</a> pattern [<a href="http://laputan.org/metamorphosis/metamorphosis.html">Foote
			&amp; Yoder 1996</a>], which recommends fine-grained iteration as a means
		of avoiding catastrophic upheaval. <a href="http://laputan.org/metadata/metadata.html#Metadata">METADATA</a> and <a href="http://laputan.org/metadata/metadata.html#ActiveObjectModel">ACTIVE
			OBJECT-MODELS</a> [<a href="http://laputan.org/metadata/metadata.html">Foote &amp;
			Yoder 1998b</a>] allow systems to adapt more quickly to changing
		requirements by <a href="http://www.joeyoder.com/~yoder/Research/metadata/OOPSLA98MetaDataWkshop.html">pushing
			power</a> into the data, and out onto users.
	</p>

	
	<a name="SweepingItUnderTheRug"></a>
	<div>
				<p>
					<span size="5" color="#ffffff"><b>SWEEPING IT UNDER THE
							RUG</b></span>
				</p>
			</div>

	<table>
		<tbody><tr>
			<td><i>alias</i></td>
		</tr>
		<tr>
			<td>POTEMKIN VILLAGE</td>
		</tr>
		<tr>
			<td>HOUSECLEANING</td>
		</tr>
		<tr>
			<td>PRETTY FACE</td>
		</tr>
		<tr>
			<td>QUARANTINE</td>
		</tr>
		<tr>
			<td>HIDING IT UNDER THE BED</td>
		</tr>
		<tr>
			<td>REHABILITATION</td>
		</tr>
	</tbody></table>

	<p>
		<a href="http://www.ic-chernobyl.kiev.ua/index.html"><img src="http://laputan.org/images/pictures/reactor4-shirley.gif" width="432" height="282" alt="Concrete Sarcophagus"></a>
	</p>

	<p>
		<span face="Courier New" size="2">One of the most spectacular
			examples of <i>sweeping a problem under the rug</i> is the <!-- <A HREF="http://www.bbc.co.uk/horizon/95-96/960325.html">concrete sarcophagus</A> -->
			concrete sarcophagus that Soviet engineers constructed to put a
			10,000 year lid on the infamous <a href="http://polyn.net.kiae.su/polyn/head_ill.html">reactor
				number four</a> at <a href="http://www.kingroach.com/comics/chernobyl.html">Chernobyl</a>,
			in what is now Ukraine.
		</span>
	</p>

	<p>If you can’t make a mess go away, at least you can hide it.
		Urban renewal can begin by painting murals over graffiti and putting
		fences around abandoned property. Children often learn that a single
		heap in the closet is better than a scattered mess in the middle of
		the floor.</p>

	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>

	<p>There are reasons, other than aesthetic concerns, professional
		pride, and guilt for trying to clean up messy code. A deadline may be
		nearing, and a colleague may want to call a chunk of your code, if you
		could only come up with an interface through which it could be called.
		If you don’t come up with an easy to understand interface,
		they’ll just use someone else’s (perhaps inferior) code. You
		might be cowering during a code-review, as your peers trudge through a
		particularly undistinguished example of your work. You know that there
		are good ideas buried in there, but that if you don’t start to
		make them more evident, they may be lost.</p>

	<p>
		There is a limit to how much chaos an individual can tolerate before
		being overwhelmed. At first glance, a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a> can inspire terror and despair in the hearts of those who
		would try to tame it. The first step on the road to architectural
		integrity can be to identify the disordered parts of the system, and
		isolate them from the rest of it. Once the problem areas are
		identified and hemmed in, they can be gentrified using a divide and
		conquer strategy.
	</p>

	<p><span><b>Overgrown, tangled,
						haphazard spaghetti code is hard to comprehend, repair, or extend,
						and tends to grow even worse if it is not somehow brought under
						control.</b></span></p>

	<p>
		<a href="http://www.jaffebros.com/lee/gulliver/prittie/cover.jpeg">
			<img src="http://laputan.org/images/pictures/threads-small.jpg" alt="The Bondage of Gulliver">
		</a>
	</p>

	<p>
		<i>Comprehensibility:</i> It should go without saying that
		comprehensible, attractive, well-engineered code will be easier to
		maintain and extend than complicated, convoluted code. However, it
		takes <i>Time</i> and money to overhaul sloppy code. Still, the <i>Cost</i>
		of allowing it to fester and continue to decline should not be
		underestimated.
	</p>

	<p>
		<i>Morale:</i> Indeed, the price of life with a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> goes beyond the
		bottom line. Life in the muddy trenches can be a dispiriting fate.
		Making even minor modifications can lead to maintenance marathons.
		Programmers become timid, afraid that tugging at a loose thread may
		have unpredictable consequences. After a while, the myriad <a href="http://laputan.org/images/pictures/gulliver-threads.jpg">threads</a> that
		couple every part of the system to every other come to tie the
		programmer down as surely as <a href="http://www.jaffebros.com/lee/gulliver/">Gulliver</a> among the
		<a href="http://www.jaffebros.com/lee/gulliver/bk1/index.html">Lilliputians</a>
		[<a href="http://www.jaffebros.com/lee/gulliver/contents.html">Swift
			1726</a>]. Talent may desert the project in the face of such bondage.
	</p>
	<!--
<P ALIGN="CENTER">
<A HREF="http://www.jaffebros.com/lee/gulliver/prittie/cover.jpeg">
<IMG src="../images/pictures/threads.jpg"
ALT="The Bondage of Gulliver">
</A>
</p>
-->

	<p>It should go without saying that comprehensible, attractive,
		well-engineered code will be easier to maintain and extend than
		complicated, convoluted code. However, it takes time and money to
		overhaul sloppy code. Still, the cost of allowing it to fester and
		continue to decline should not be underestimated.</p>

	<p><b><u><i>Therefore</i></u>, if you
					can’t easily make a mess go away, at least cordon it off. This
					restricts the disorder to a fixed area, keeps it out of sight, and
					can set the stage for additional refactoring.</b></p>

	<p>By getting the dirt into a single pile beneath the carpet, you
		at least know where it is, and can move it around. You’ve still
		got a pile of dirt on your hands, but it is localized, and your guests
		can’t see it. As the engineers who entombed reactor number four
		at Chernobly demonstrated, sometimes you've got to get a lid on a
		problem before you can get serious about cleaning things up. Once the
		problem area is contained, you can decontaminate at a more leisurely
		pace.</p>
	<a href="http://www.pathfinder.com/@@z04;c6PyNAIAQH2x/photo/archive/themes/urban.htm">
		<img src="http://laputan.org/images/pictures/urban-decay-small.jpg" alt="Urban Decay">
	</a>

	<p>To begin to get a handle on spaghetti code, find those sections
		of it that seem less tightly coupled, and start to draw architectural
		boundaries there. Separate the global information into distinct data
		structures, and enforce communication between these enclaves using
		well-defined interfaces. Such steps can be the first ones on the road
		to re-establishing the system’s conceptual integrity, and
		discerning nascent architectural landmarks.</p>

	<p>
		Putting a fresh interface around a run down region of the system can
		be the first step on the way architectural rehabilitation. This is a
		long row to hoe, however. Distilling meaningful abstractions from a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> is a difficult and
		demand task. It requires skill, insight, and persistence. At times, <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a> may seem like the
		less painful course. Still, it is not like unscrambling an egg. As
		with rehabilitation in the real world, restoring a system to
		architectural health requires resources, as well as a sustained
		commitment on the part of the people who live there.
	</p>

	<p>The UIMX user interface builder for Unix and Motif, and the
		various Smalltalk GUI builders both provide a means for programmers to
		cordon off complexity in this fashion.</p>
	<!--
<P ALIGN="CENTER">
<A HREF="http://www.pathfinder.com/@@z04;c6PyNAIAQH2x/photo/archive/themes/urban.htm">
<IMG src="../images/pictures/urban-decay.jpg"
ALT="Urban Decay">
</A>
</p>
-->
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>


	<p>
		One frequently constructs a <a href="http://ksi.cpsc.ucalgary.ca/~kremer/patterns/facade.html">FA�ADE</a>
		[Gamma et. al. 1995] to put a <a href="http://www.m-w.com/cgi-bin/dictionary?congenial">congenial</a>
		"pretty face" on the unpleasantness that is <a href="http://laputan.org/mud/mud.html#SweepingItUnderTheRug">SWEPT UNDER THE RUG</a>. Once
		these messy chunks of code have been quarantined, you can expose their
		functionality using INTENTION REVEALING SELECTORS [Beck 1997].
	</p>

	<p>
		This can be the first step on the road to <a href="http://laputan.org/lifecycle/lifecycle.html#Consolidate">CONSOLIDATION</a> too,
		since one can begin to hem in unregulated growth than may have
		occurred during <a href="http://laputan.org/lifecycle/lifecycle.html#Prototype">PROTOTYPING</a>
		or <a href="http://laputan.org/lifecycle/lifecycle.html#Expand">EXPANSION</a> [<a href="http://laputan.org/lifecycle/lifecycle.html">Foote &amp; Opdyke 1995</a>]. [<a href="http://laputan.org/selfish/selfish.html">Foote &amp; Yoder 1998a</a>] explores
		how, ironically, inscrutable code can persist <u>because</u> it is
		difficult to comprehend.
	</p>

	<p>
		This paper also examines how complexity can be hidden using suitable
		defaults (<a href="http://laputan.org/selfish/selfish.html#WorksOutOfTheBox">WORKS
			OUT OF THE BOX</a> and <a href="http://laputan.org/selfish/selfish.html#ProgrammingByDifference">PROGRAMMING-BY-DIFFERRENCE</a>),
		and interfaces that gradually reveal additional capabilities as the
		client grows more sophisticated.
	</p>

	
	<a name="Reconstruction"></a>
	

	<table>
		<tbody><tr>
			<td><i>alias</i></td>
		</tr>
		<tr>
			<td>TOTAL REWRITE</td>
		</tr>
		<tr>
			<td>DEMOLITION</td>
		</tr>
		<tr>
			<td>THROWAWAY THE FIRST ONE</td>
		</tr>
		<tr>
			<td>START OVER</td>
		</tr>
	</tbody></table>


	<p>
		<a href="http://laputan.org/images/movies/fcs_demolition_26sec.mov"> <img src="http://laputan.org/images/pictures/atlanta/stadium.jpg" width="200" height="195" alt="Fulton County Stadium Demolition"></a>
	</p>
	<!--
<hr>
<IMG DYNsrc="../images/movies/fcs_demolition_26sec.mov" START="FILEOPEN" LOOP="INFINITE">
<EMBED src="../images/movies/fcs_demolition_26sec.mov" width="200" height="195" autostart=true>
<EMBED src="../images/movies/fcs_demolition_26sec.mov" WIDTH="240" HEIGHT="195" AUTOPLAY="true" CONTROLLER="true" LOOP="true" PLUGINSPAGE="http://www.apple.com/quicktime/">
-->
	<p>Atlanta’s Fulton County Stadium was built in 1966 to serve
		as the home of baseball’s Atlanta Braves, and football’s
		Atlanta Falcons. In August of 1997, the stadium was demolished. Two
		factors contributed to its relatively rapid obsolescence. One was that
		the architecture of the original stadium was incapable of
		accommodating the addition of the "sky-box" suites that the
		spreadsheets of ‘90s sporting economics demanded. No conceivable
		retrofit could accommodate this requirement. Addressing it meant
		starting over, from the ground up. The second was that the
		stadium’s attempt to provide a cheap, general solution to the
		problem of providing a forum for both baseball and football audiences
		compromised the needs of both. In only thirty-one years, the balance
		among these forces had shifted decidedly. The facility is being
		replaced by two new single-purpose stadia.</p>

	<p>Might there be lessons for us about unexpected requirements and
		designing general components here?</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>
	<p>
		<span face="Courier New" size="2"> <i>Plan to Throw One Away
				(You Will Anyway)</i> -- Brooks
		</span>
	</p>

	<p>Extreme Programming [Beck 2000] had its genesis in the Chrysler
		Comprehensive Compensation project (C3). It began with a cry for help
		from a foundering project, and a decision to discard a year and a
		half's worth of work. The process they put in place after they started
		anew laid the foundation for XP, and the author's credit these
		approaches for the subsequent success of the C3 effort. However, less
		emphasis is given to value of the experience the team might have
		salvaged from their initial, unsuccessful draft. Could this first
		draft have been the unsung hero of this tale?</p>

	<p><span><b>Your code has declined to
						the point where it is beyond repair, or even comprehension.</b></span></p>


	<p>
		<i>Obsolescence</i>: Of course, one reason to abandon a system is that
		it is in fact technically or economically obsolete. These are distinct
		situations. A system that is no longer state-of-the-art may still sell
		well, while a technically superior system may be overwhelmed by a more
		popular competitor for non-technical reasons.
	</p>

	<p>In the realm of concrete and steel, blight is the symptom, and a
		withdrawal of capital is the cause. Of course, once this process
		begins, it can feed on itself. On the other hand, given a steady
		infusion of resources, buildings can last indefinitely. It's not
		merely entropy, but an unwillingness to counteract it, that allows
		buildings to decline. In Europe, neighborhoods have flourished for
		hundreds of years. They have avoided the boom/bust cycles that
		characterize some New World cities.</p>

	<p>
		<i>Change:</i> Even though software is a highly malleable medium, like
		Fulton County Stadium, new demands can, at times, cut across a
		system’s architectural assumptions in such a ways as to make
		accommodating them next to impossible. In such cases, a total rewrite
		might be the only answer.
	</p>


	<p>
		<i>Cost</i>: Writing-off a system can be traumatic, both to those who
		have worked on it, and to those who have paid for it. Software is
		often treated as an asset by accountants, and can be an expensive
		asset at that. Rewriting a system, of course, does not discard its
		conceptual design, or its staff’s experience. If it is truly the
		case that the value of these assets is in the design experience they
		embody, then accounting practices must recognize this.
	</p>

	<p>
		<i>Organization:</i> Rebuilding a system from scratch is a
		high-profile undertaking, that will demand considerable time and
		resources, which, in turn, will make high-level management support
		essential.
	</p>

	<p><b><u><i>Therefore</i></u>, throw it away
					and start over.</b></p>

	<p>Sometimes it’s just easier to throw a system away, and
		start over. Examples abound. Our shelves are littered with the
		discarded carcasses of obsolete software and its documentation.
		Starting over can be seen as a defeat at the hands of the old code, or
		a victory over it.</p>
	<a href="http://www.sheridanc.on.ca/~randy/design.dir/disaster.dir/disaster.htm">
		<img src="http://laputan.org/images/pictures/pruitt3.jpg" alt="Pruitt-Igoe">
	</a>

	<p>One reason to start over might be that the previous system was
		written by people who are long gone. Doing a rewrite provides new
		personnel with a way to reestablish contact between the architecture
		and the implementation. Sometimes the only way to understand a system
		it is to write it yourself. Doing a fresh draft is a way to overcome
		neglect. Issues are revisited. A fresh draft adds vigor. You draw back
		to leap. The quagmire vanishes. The swamp is drained.</p>

	<p>Another motivation for building a new system might be that you
		feel that you've got the experience you need to do the job properly.
		One way to have gotten this experience is to have participated at some
		level in the unsuccessful development of a previous version of the
		system.</p>

	<p>Of course, the new system is not designed in a vacuum.
		Brook’s famous tar pit is excavated, and the fossils are
		examined, to see what they can tell the living. It is essential that a
		thorough post-mortem review be done of the old system, to see what it
		did well, and why it failed. Bad code can bog down a good design. A
		good design can isolate and contain bad code.</p>

	<p>
		When a system becomes a <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL
			OF MUD</a>, its relative incomprehensibility may hasten its demise, by
		making it difficult for it to adapt. It can persist, since it resists
		change, but cannot evolve, for the same reason. Instead, its
		inscrutability, even when it is to its s hort-term benefit, sows the
		seeds of its ultimate demise.
	</p>

	<p>If this makes muddiness a frequently terminal condition, is this
		really a bad thing? Or is it a blessing that these sclerotic systems
		yield the stage to more agile successors? Certainly, the departure of
		these ramshackle relics can be a cause for celebration as well as
		sadness.</p>
	<a href="http://www.webslingerz.com/~jhoffman/chcat.html"> <img src="http://laputan.org/images/pictures/chcat1.gif" alt="Cheshire Cat">
	</a>
	<p>Discarding a system dispenses with its implementation, and
		leaves only its conceptual design behind. Only the patterns that
		underlie the system remain, grinning like a Cheshire cat. It is their
		spirits that help to shape the next implementation. With luck, these
		architectural insights will be reincarnated as genuine reusable
		artifacts in the new system, such as abstract classes and frameworks.
		It is by finding these architectural nuggets that the promise of
		objects and reuse can finally be fulfilled.</p>

	<p>
		There are alternatives to throwning your system away and starting
		over. One is to embark on a regimen of incremental refactoring, to
		glean architectural elements and discernable abstractions from the
		mire. Indeed, you can begin by looking for coarse fissures along which
		to separate parts of the system, as was suggested in <a href="http://laputan.org/mud/mud.html#SweepingItUnderTheRug">SWEEPING IT UNDER THE RUG</a>.
		Of course, refactoring is more effective as a prophylactic measure
		that as a last-restort therapy. As with any edifice, it is a judgement
		call, whether to rehab or restort for the wrecking ball. Another
		alternative is to reassess whether new components and frameworks have
		come along that can replace all or part of the system. When you can
		reuse and retrofit other existing components, you can spare yourself
		the time and expense involved in rebuilding, repairing, and
		maintaining the one you have.
	</p><p>
		The United States Commerce Department defines <i>durable goods</i> as
		those that are designed to last for three years or more. This category
		traditionally applied to goods such as furniture, appliances,
		automobiles, and business machines. Ironically, as computer equipment
		is depreciating ever more quickly, it is increasingly our software
		artifacts, and not our hardware, that fulfill this criterion. Firmitas
		has come to the realm of bits and bytes.
	</p>
	Apple's Lisa Toolkit, and its successor, the Macintosh Toolbox,
	constitute one of the more intriguing examples of
	<p>
		<a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a> in the history of
		personal computing.
	</p>
	<p>
		<span face="Courier New" size="2"> <i>An architect's most
				useful tools are an eraser at the drafting board, and a wrecking bar
				at the site</i> <br>-- Frank Lloyd Wright
		</span>
	</p>
	<p>
		<span face="Wingdings">v</span><span> </span><span face="Wingdings">v</span><span>
		</span><span face="Wingdings">v</span>
	</p>


	<p>
		The <a href="http://laputan.org/metamorphosis/metamorphosis.html#SoftwareTectonics">SOFTWARE
			TECTONICS</a> pattern discussed in [Foote &amp; Yoder 1996] observes that
		if incremental change is deferred indefinitely, major upheaval may be
		the only alternative. [Foote &amp; Yoder 1998a] explores the <a href="http://laputan.org/selfish/selfish.html#WinningTeam">WINNING TEAM</a>
		phenomenon, whereby otherwise superior technical solutions are
		overwhelmed by non-technical <a href="http://www.m-w.com/cgi-bin/dictionary?exigencies">exigencies</a>.
	</p>

	<p>
		<a href="http://www.yourdon.com/books/coolbooks/notes/brooks.html">Brooks</a>
		has eloquently observed that the most dangerous system an architect
		will ever design is his or her <a href="http://www.realtime-info.be/encyc/techno/terms/51/81.htm">second
			system</a> [Brooks 1995]. This is the notorious <a href="http://www.elsewhere.org/jargon_search/TAG1571.html">second-system
			effect</a>. <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a> provides
		an opportunity for this misplaced hubris to exercise itself, so one
		must keep a wary eye open for it. Still, there are times when the best
		and only way to make a system better is to throw it away and start
		over. Indeed, one can do worse than to heed Brook's classic admonition
		that you should "plan to throw one away, you will anyway".
	</p>
	<p>
		<img src="http://laputan.org/images/pictures/fiji.jpg" alt="Mir over Fiji">
	</p>
	<p>
		<i>Mir reenters the atmosphere over Fiji on 22 March, 2001</i>
	</p>
	<!-- Pattern Header -->
	<a name="Conclusion"></a>
	
	<!-- End of Pattern Header -->

	<p>
		In the end, software architecture is about how we distill experience
		into wisdom, and disseminate it. We think the patterns herein stand
		alongside other work regarding software architecture and evolution
		that we cited as we went along. Still, we do not consider these
		patterns to be anti-patterns. There are good reasons that good
		programmers build <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALLS OF MUD</a>.
		It may well be that the economics of the software world are such that
		the market moves so fast that long term architectural ambitions are
		foolhardy, and that expedient, slash-and-burn, disposable programming
		is, in fact, a state-of-the-art strategy. The success of these
		approaches, in any case, is undeniable, and seals their pattern-hood.
		People build
	</p><p>
		<a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALLS OF MUD</a> because they <u>work</u>.
		In many domains, they are the only things that have been shown to
		work. Indeed, they work where loftier approaches have yet to
		demonstrate that they can compete.
	</p>
	<p>
		It is not our purpose to condemn <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALLS OF MUD</a>. Casual architecture is natural during the early stages
		of a system’s evolution. The reader must surely suspect, however,
		that our hope is that we can aspire to do better. By recognizing the
		forces and pressures that lead to architectural malaise, and how and
		when they might be confronted, we hope to set the stage for the
		emergence of truly durable artifacts that can put architects in
		dominant positions for years to come. The key is to ensure that the
		system, its programmers, and, indeed the entire organization, <i>learn</i>
		about the domain, and the architectural opportunities looming within
		it, as the system grows and matures.
	</p>

	<p>
		Periods of moderate disorder are a part of the ebb and flow of
		software evolution. As a master chef tolerates a messy kitchen,
		developers must not be afraid to get a little mud on their shoes as
		they explore new territory for the first time. Architectural insight
		is not the product of master plans, but of hard won experience. The
		software architects of yesteryear had little choice other than to
		apply the lessons they learned in successive drafts of their systems,
		since <a href="http://laputan.org/mud/mud.html#Reconstruction">RECONSTRUCTION</a> was often
		the only practical means they had of supplanting a mediocre system
		with a better one. Objects, frameworks, components, and refactoring
		tools provide us with another alternative. Objects present a medium
		for expressing our architectural ideas at a level between
		coarse-grained applications and components and low level code.
		Refactoring tools and techniques finally give us the means to
		cultivate these artifacts as they evolve, and capture these insights.
	</p>

	<p>
		The onion-domed <i>Church of the Intercession of the Virgin on the
			Moat</i> in Moscow is one of Russia's most famous landmarks. It was built
		by Tsar Ivan IV just outside of the Kremlin walls in 1552 to
		commemorate Russia's victory over the Tatars at Kazan. The church is
		better known by it's nickname, St. Basil's. Ivan too is better known
		by his nickname "Ivan the Terrible". Legend has it that once the
		cathedral was completed, Ivan, ever true to his reputation, had the
		architects blinded, so that they could never build anything more
		beautiful. Alas, the state of software architecture today is such that
		few of us need fear for our eyesight.
	</p>

	<p>
		<a href="http://www.gac.edu/Academics/russian/www-docs/Architecture_HTML/page_id_6881.html">
			<img src="http://laputan.org/images/pictures/basils.jpg" alt="St. Basil's">
		</a>
	</p>
	<!-- Pattern Header -->
	<a name="Acknowledgments"></a>
	
	<!-- End of Pattern Header -->

	<p>
		A lot of people have striven to help us avoid turning this paper into
		an unintentional example of its central theme. We are grateful first
		of all to the members of the <a href="http://st-www.cs.uiuc.edu/research-gp.html">University of
			Illinois Software Architecture Group</a>, <a href="http://st-www.cs.uiuc.edu/~brant">John Brant</a>, <a href="http://st-www.cs.uiuc.edu/~chai">Ian Chai</a>, <a href="http://st-www.cs.uiuc.edu/users/johnson/">Ralph Johnson</a>,
		Lewis Muir, <a href="http://www.ncsa.uiuc.edu/people/daman/">Dragos
			Manolescu</a>, <a href="http://www.stlabs.com/marick/root.htm">Brian
			Marick</a>, Eiji Nabika, <a href="http://www.ews.uiuc.edu/~zhan1/">John
			(Zhijiang) Han</a>, Kevin Scheufele, Tim Ryan, Girish Maiya, Weerasak
		Wittawaskul, Alejandra Garrido, Peter Hatch, and <a href="http://chip.cs.uiuc.edu/~droberts">Don Roberts</a>, who
		commented on several drafts of this work over the last three years.
	</p>
	<p>We’d like to also thank our tireless shepherd, Bobby Woolf,
		who trudged through the muck of several earlier versions of this
		paper.</p>
	<p>
		Naturally, we’d like to acknowledge the members of our PLoP
		’97 Conference Writer’s Workshop, Norm Kerth, Hans Rohnert,
		Clark Evans, Shai Ben-Yehuda, Lorraine Boyd, Alejandra Garrido, <a href="http://www.ncsa.uiuc.edu/people/daman/">Dragos Manolescu</a>,
		Gerard Meszaros, Kyle Brown, <a href="http://st-www.cs.uiuc.edu/users/johnson/">Ralph Johnson</a>,
		and Klaus Renzel.
	</p>
	<p>Lorrie Boyd provided some particularly poignant observations on
		scale, and the human cost of projects that fail.</p>
	<p>UIUC Architecture professor Bill Rose provided some keen
		insights on the durability of housing stock, and history of the
		estrangement of architects from builders.</p>
	<p>
		Thanks to <a href="http://www.enteract.com/~bradapp/">Brad
			Appleton</a>, <a href="http://www.fti-consulting.com/users/beedlem/">Michael
			Beedle</a>, Russ Hurlbut, and the rest of the people in the <a href="http://c2.com/cgi/wiki?ChicagoPatternsGroup">Chicago
			Patterns Group</a> for their time, suggestions, and ruminations on reuse
		and reincarnation.
	</p><p>
		Thanks to <a href="http://world.std.com/~berczuk/">Steve Berczuk</a>
		and the members of the <a href="http://c2.com/cgi/wiki?BostonAreaPatternsGroup">Boston Area
			Patterns Group</a> for their review.
	</p>
	<p>
		Thanks too to <a href="http://www.industriallogic.com/">Joshua
			Kerievsky</a> and the <a href="http://www.industriallogic.com/patterns/index.html">Design
			Patterns Study Group of New York City</a> for their comments.
	</p>
	<p>
		We'd like to express our gratitude as well to Paolo Cantoni, Chris
		Olufson, Sid Wright, John Liu, Martin Cohen, John Potter, Richard
		Helm, and <a href="http://www.mri.mq.edu.au/~kjx/">James Noble</a> of
		the <a href="http://www.mri.mq.edu.au/~kjx/patterns/">Sydney
			Patterns Group</a>, who workshopped this paper during the late winter,
		er, summer of early 1998.
	</p>
	<p>
		John Vlissides, Neil Harrison, Hans Rohnert, James Coplien, and <a href="http://st-www.cs.uiuc.edu/users/johnson/">Ralph Johnson</a>
		provided some particularly candid, incisive and useful criticism of
		some of the later drafts of the paper.
	</p>
	<p>
		A number of readers have observed, over the years, that <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG BALL OF MUD</a> has a certain <a href="http://www.m-w.com/cgi-bin/dictionary?dystopian">dystopian</a>,
		Dilbert-esque quality to it. We are grateful to <a href="http://www.dilbert.com/">United Features Syndicate, Inc.</a>
		for not having, as of yet, asked us to remove the following cartoon
		from the web-based version of <a href="http://laputan.org/mud/mud.html#BigBallOfMud">BIG
			BALL OF MUD</a>.
	</p>
	<p>
		<a href="http://www.zippah.com/~dtweed/dilbert/w0726866.htm"> <img src="http://laputan.org/images/pictures/elbonia-900406.gif" alt="Dilbert -- 6 April 1990">
		</a>
	</p>
	<!-- Pattern Header -->
	<a name="References"></a>
	
	<!-- End of Pattern Header -->
	<pre>
<b>[Alexander 1964]</b>
Christopher Alexander
<i><b>Notes on the Synthesis of Form</b></i>
Harvard University Press, Cambridge, MA, 1964

<b>[Alexander 1979]</b>
Christopher Alexander
<i><b>The Timeless Way of Building</b></i>
<a href="http://www.oup-usa.org/">Oxford University Press</a>, Oxford, UK, 1979

<b>[Alexander et. al 1977]</b>
C. Alexander, S. Ishikawa, and M. Silverstein
<a href="http://www.amazon.com/exec/obidos/ISBN=0195019199/3970-4035166-128299"><i><b>A Pattern Language</b></i></a>
<a href="http://www.oup-usa.org/">Oxford University Press</a>, Oxford, UK, 1977

<b>[Alexander 1988]</b>
Christopher Alexander
<i><b>The Oregon Experiment</b></i>
<a href="http://www.oup-usa.org/">Oxford University Press</a>, Oxford, UK, 1988

<b>[Bach 1997]</b>
James Bach, Softwae Testing Labs
<a href="http://laputan.org/pub/sag/Good-Enough-Software.pdf"><i><b>Good Enough Software: Beyond the Buzzword</b></i></a>
IEEE Computer, August 1997

<b>[Beck 1997]</b>
Kent Beck
<i><b><a href="http://www.prenhall.com/ptrbooks/ptr_013476904x.html">Smalltalk Best Practice Patterns</a></b></i>
<a href="http://www.prenhall.com/">Prentice Hall</a>, Upper Saddle River, NJ, 1997

<b>[Beck &amp; Cunningham 1989]</b>
Kent Beck and <a href="http://www.c2.com/doc/index.html">Ward Cunningham</a>
<i><b><a href="http://c2.com/doc/oopsla89/paper.html">A Laboratory for Teaching Object-Oriented Thinking</a></b></i>
OOPSLA '89 Proceedings
New Orleans, LA
October 1-6 1989, pages 1-6

<b>[Beck 2000]</b>
Kent Beck
<i><b>Embracing Change: Extreme Programming Explained</b></i>
Cambridge University Press, 2000

<b>[Booch 1994]</b>
Grady Booch
<i><b>Object-Oriented Analysis and Design with Applications</b></i>
Benjamin/Cummings, Redwood City, CA, 1994

<b>[Brand 1994]</b>
<a href="http://www.well.com/user/sbb/index.html">Stewart Brand</a>
<a href="http://www.amazon.com/exec/obidos/ISBN=0140139966/5118-8584664-924816"><b><i>How Buildings Learn: What Happens After They're Built</i></b></a>
Viking Press, 1994

<b>[Brooks 1995]</b>
<a href="http://www.cs.unc.edu/~brooks/">Frederick P. Brooks, Jr.</a>
<i><b>The Mythical Man-Month</b></i> (<a href="http://www.yourdon.com/books/coolbooks/notes/brooks.html">Anniversary Edition</a>)
Addison-Wesley, Boston, MA, 1995

<b>[Brown et al. 1998]</b>
William J. Brown, Raphael C. Malveau,
Hays W. "Skip" McCormick III, and Thomas J. Mobray
<a href="http://www.antipatterns.com/"><b><i>Antipatterns: Refactoring, Software Architectures, and Projects in Crisis</i></b></a>
Wiley Computer Publishing, John Wiley &amp; Sons, Inc., 1998

<b>[Buschmann et al. 1996]</b>
Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stahl
<b><i>Pattern-Oriented Software Architecture: A System of Patterns</i></b>
John Wiley and Sons, 1996

<b>[Coplien 1995]</b>
<a href="http://www.bell-labs.com/people/cope/">James O. Coplien</a>
<i><b><a href="http://www.bell-labs.com/user/cope/Patterns/Process/index.html">A Generative Development-Process Pattern Language</a></b></i>
First Conference on Pattern Languages of Programs (PLoP '94)
Monticello, Illinois, August 1994
<a href="http://www.bell-labs.com/topic/books/PLoPD1/">Pattern Languages of Program Design</a>
edited by James O. Coplien and Douglas C. Schmidt
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-60734-4&amp;ptype=0">Addison-Wesley</a>, 1995

<b>[Cunningham 1999a]</b>
<a href="http://c2.com/">Ward Cunningham</a>
<a href="http://www.c2.com/cgi/wiki?PeterPrincipleProgramming"><b><i>Peter Principle of Programming</i></b></a>
Portland Pattern Repository
13 August 1999
<a href="http://www.c2.com/cgi/wiki?PeterPrincipleProgramming">http://www.c2.com/cgi/wiki?PeterPrincipleProgramming</a>

<b>[Cunningham 1999b]</b>
<a href="http://c2.com/">Ward Cunningham</a>
<a href="http://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork"><i><b>The Most Complicated Thing that Could Possible Work</b></i></a>
Portland Pattern Repository
13 August 1999
<a href="http://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork">http://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork</a>

<b>[Cusumano &amp; Shelby 1995]</b>
Michael A. Cusumano and Richard W. Shelby
<i><b>Microsoft Secrets</b></i>
The Free Press, New York, NY, 1995

<a name="Foote1988"></a><b>[Foote 1988]</b>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> (Advisor: <a href="http://st-www.cs.uiuc.edu/users/johnson/">Ralph Johnson</a>)
<b><i><a href="http://laputan.org/dfc/discussion.html">Designing to Facilitate Change with Object-Oriented Frameworks</a></i></b>
<a href="http://laputan.org/dfc/DFC.html">Masters Thesis</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1988">1988</a>
<a href="http://www.cs.uiuc.edu/">Dept. of Computer Science</a>,
<a href="http://www.uiuc.edu/">University of Illinois at Urbana-Champaign</a>

<b>[Foote &amp; Opdyke 1995]</b>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> and William F. Opdyke
<b><i><a href="http://laputan.org/lifecycle/lifecycle.html">Lifecycle and Refactoring Patterns that Support Evolution and Reuse</a></i></b>
First Conference on Patterns Languages of Programs (PLoP '94)
Monticello, Illinois, August 1994
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-60734-4&amp;ptype=0">Pattern Languages of Program Design</a>
edited by <a href="http://www.bell-labs.com/people/cope/">James O. Coplien</a> and <a href="http://www.cs.wustl.edu/~schmidt/">Douglas C. Schmidt</a>
<a href="http://www.awl.com/cseng/index.html">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1995">1995</a>

This volume is part of the <a href="http://cseng.aw.com/seriesdetail.qry?SeriesID=34">Addison-Wesley Software Patterns Series</a>.

<b>[Foote &amp; Yoder 1996]</b>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> and <a href="http://www.joeyoder.com/">Joseph W. Yoder</a>
<i><b><a href="http://laputan.org/metamorphosis/metamorphosis.html">Evolution, Architecture, and Metamorphosis</a></b></i>
Second Conference on Patterns Languages of Programs (PLoP '95)
Monticello, Illinois, September 1995
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-89527-7&amp;ptype=0">Pattern Languages of Program Design 2</a>
edited by <a href="http://www.software.ibm.com/qawww/despat-expert.html">John M. Vlissides</a>, <a href="http://www.bell-labs.com/people/cope/">James O. Coplien</a>, and Norman L. Kerth
<a href="http://www.awl.com/cseng/index.html">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1996">1996</a>

This volume is part of the <a href="http://cseng.aw.com/seriesdetail.qry?SeriesID=34">Addison-Wesley Software Patterns Series</a>.

<a name="FooteRoberts1998"><b>[Foote &amp; Roberts 1998]</b></a>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> and <a href="http://chip.cs.uiuc.edu/~droberts/">Don Roberts</a>
<b><i><a href="http://laputan.org/lingua/lingua.html">Lingua Franca</a></i></b>
<a href="http://st-www.cs.uiuc.edu/~berczuk/PLoP98/">Fifth Conference on Patterns Languages of Programs</a> (<a href="http://jerry.cs.uiuc.edu/~plop/plop98/final_submissions/">PLoP '98</a>)
Monticello, Illinois, <a href="http://www.laputan.com/cgi-bin/calendar?8+1998">August 1998</a>
Technical Report #WUCS-98-25 (<a href="http://jerry.cs.uiuc.edu/~plop/plop98/final_submissions/">PLoP '98</a>/<a href="http://www.coldewey.com/europlop98/Program/writers.htm">EuroPLoP '98</a>), <a href="http://www.laputan.com/cgi-bin/calendar?9+1998">September 1998</a>
<a href="http://www.cs.wustl.edu/">Department of Computer Science</a>, <a href="http://www.wustl.edu/">Washington University</a>

<a name="FooteYoder1996"><b>[Foote &amp; Yoder 1996]</b></a>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> and <a href="http://www.joeyoder.com/">Joseph W. Yoder</a>
<i><b><a href="http://laputan.org/metamorphosis/metamorphosis.html">Evolution, Architecture, and Metamorphosis</a></b></i>
Second Conference on Patterns Languages of Programs (PLoP '95)
Monticello, Illinois, September 1995
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-89527-7&amp;ptype=0">Pattern Languages of Program Design 2</a>
edited by <a href="http://www.software.ibm.com/qawww/despat-expert.html">John M. Vlissides</a>, <a href="http://www.bell-labs.com/people/cope/">James O. Coplien</a>, and Norman L. Kerth
<a href="http://heg-school.aw.com/cseng/index.html">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1996">1996</a>

This volume is part of the <a href="http://cseng.aw.com/seriesdetail.qry?SeriesID=34">Addison-Wesley Software Patterns Series</a>.

<b>[Foote &amp; Yoder 1998a]</b>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> and <a href="http://www.joeyoder.com/">Joseph W. Yoder</a>
<i><b><a href="http://laputan.org/selfish/selfish.html">The Selfish Class</a></b></i>
Third Conference on Patterns Languages of Programs (<a href="http://www.cs.wustl.edu/~schmidt/jointPLoP-96.html">PLoP '96</a>)
Monticello, Illinois, <a href="http://www.laputan.com/cgi-bin/calendar?9+1996">September 1996</a>
<a href="http://www.cs.wustl.edu/~schmidt/PLoP-96/program.html">Technical Report #WUCS-97-07</a>, <a href="http://www.laputan.com/cgi-bin/calendar?9+1996">September 1996</a>
<a href="http://www.cs.wustl.edu/">Department of Computer Science</a>, <a href="http://www.wustl.edu/">Washington University</a>
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-31011-2&amp;ptype=0">Pattern Languages of Program Design 3</a>
edited by <a href="http://www.oma.com./Brochure/Resumes/rmartin.html">Robert Martin</a>, <a href="http://www.riehle.org/">Dirk Riehle</a>, and Frank Buschmann 
<a href="http://www.awl.com/cseng/index.html">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1998">1998</a>
<a href="http://laputan.org/index.html">http://www.laputan.org</a>

<a href="http://www.amazon.com/exec/obidos/ISBN=0201310112/7698-0074090-873253"><img src="http://laputan.org/images/pictures/plopd3-new.gif" alt="Order from Amazon.com" width="103" height="140"></a>

This volume is part of the <a href="http://cseng.aw.com/seriesdetail.qry?SeriesID=34">Addison-Wesley Software Patterns Series</a>.
Brian also wrote an <a href="http://laputan.org/plop/vigor.html">introduction</a> for this volume.

<a name="FooteYoder1998b"><b>[Foote &amp; Yoder 1998b]</b></a>
<a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a> and <a href="http://www.joeyoder.com/">Joseph W. Yoder</a>
<b><i><a href="http://laputan.org/metadata/metadata.html">Metadata</a></i></b>
<a href="http://st-www.cs.uiuc.edu/~berczuk/PLoP98/">Fifth Conference on Patterns Languages of Programs</a> (<a href="http://jerry.cs.uiuc.edu/~plop/plop98/final_submissions/">PLoP '98</a>)
Monticello, Illinois, <a href="http://www.laputan.com/cgi-bin/calendar?8+1998">August 1998</a>
Technical Report #WUCS-98-25 (<a href="http://jerry.cs.uiuc.edu/~plop/plop98/final_submissions/">PLoP '98</a>/<a href="http://www.coldewey.com/europlop98/Program/writers.htm">EuroPLoP '98</a>), <a href="http://www.laputan.com/cgi-bin/calendar?9+1998">September 1998</a>
<a href="http://www.cs.wustl.edu/">Department of Computer Science</a>, <a href="http://www.wustl.edu/">Washington University</a>

<b>[Fowler 1999]</b>
Martin Fowler
<b><i>Refactoring: Improving the Design of Existing Code</i></b>
Addison Wesley Longman, 1999

<b>[Gabriel 1991]</b>
Richard P. Gabriel 
<a href="http://laputan.org/gabriel/worse-is-better.html"><i><b>Lisp: Good News Bad News and How to Win Big</b></i></a>
<a href="http://laputan.org/gabriel/worse-is-better.html">http://www.laputan.org/gabriel/worse-is-better.html</a>

<b>[Gabriel 1996]</b>
Richard P. Gabriel
<i><b>Patterns of Software: Tales from the Software Community</b></i>
Oxford University Press, Oxford, UK, 1996
<a href="http://www.oup-usa.org/">http://www.oup-usa.org/</a>

<b>[Gamma et al. 1995]</b>
<a href="http://laputan.org/plop/gang-of-four.html">Eric Gamma, Richard Helm, Ralph Johnson, and John Vlissides</a>
<a href="http://st-www.cs.uiuc.edu/users/patterns/DPBook/DPBook.html"><i><b>Design Patterns:  Elements of Reusable Object-Oriented Software</b></i></a>
<a href="http://www.awl.com/cp/Gamma.html">Addison-Wesley Longman</a>, Reading, MA, 1995

<b>[Garlan &amp; Shaw 1993]</b>
<a href="http://almond.srv.cs.cmu.edu/afs/cs.cmu.edu/user/garlan/www/home.html">David Garlan</a> and <a href="http://spoke.compose.cs.cmu.edu/shaweb/">Mary Shaw</a>
<i><b>An Introduction to Software Architecture</b></i>
V. Ambriola and G. Totora, editors
<i>Advances in Software Engineering and Knowledge Engineering, Vol 2.</i>
Singapore: World Scientific Publishing, 1993, pp. 1-39

<b>[Ingalls 1983]</b>
Daniel H. H. Ingalls
<b><i>The Evolution of the Smalltalk Virtual Machine</i></b>
Smalltalk-80: Bits of History, Words of Advice
edited by Glenn Krasner
Addison-Wesley, 1983

<a name="JohnsonFoote1988"><b>[Johnson &amp; Foote 1988]</b></a>
<a href="http://st-www.cs.uiuc.edu/users/johnson/">Ralph Johnson</a> and <a href="http://laputan.org/mud/mud.html#BrianFoote">Brian Foote</a>
<b><i><a href="http://laputan.org/drc/drc.html">Designing Reusable Classes</a></i></b>
Journal of Object-Oriented Programming
Volume 1, Number 2, June/July <a href="http://www.laputan.com/cgi-bin/calendar?1988">1988</a>

<b>[Marick 1995]</b>
<a href="http://www.testing.com/">Brian Marick</a>
<b><i>The Craft of Software Testing</i></b>
Prentice-Hall, Upper Saddle River, NJ, 1995

<b>[Meszaros 1997]</b>
Gerard Meszaros
<b><i>Archi-Patterns: A Process Pattern Language for Defining Architectures</i></b>
Fourth Conference on Pattern Languages of Programs (PLoP '97)
Monticello, Illinois, September 1997

<b>[Roberts &amp; Johnson 1998]</b>
<a href="http://st-www.cs.uiuc.edu/~droberts">Don Roberts</a> and <a href="http://st-www.cs.uiuc.edu/users/johnson/">Ralph E. Johnson</a>
<a href="http://st-www.cs.uiuc.edu/~droberts/evolve.html"><b><i>Evolve Frameworks into Domain-Specific Languages</i></b></a>
Third Conference on Patterns Languages of Programs (<a href="http://www.cs.wustl.edu/~schmidt/jointPLoP-96.html">PLoP '96</a>)
Monticello, Illinois, <a href="http://www.laputan.com/cgi-bin/calendar?9+1996">September 1996</a>
<a href="http://www.cs.wustl.edu/~schmidt/PLoP-96/program.html">Technical Report #WUCS-97-07</a>, <a href="http://www.laputan.com/cgi-bin/calendar?9+1996">September 1996</a>
<a href="http://www.cs.wustl.edu/">Department of Computer Science</a>, <a href="http://www.wustl.edu/">Washington University</a>
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-31011-2&amp;ptype=0">Pattern Languages of Program Design 3</a>
edited by <a href="http://www.oma.com./Brochure/Resumes/rmartin.html">Robert Martin</a>, <a href="http://www.riehle.org/">Dirk Riehle</a>, and Frank Buschmann 
<a href="http://www.awl.com/cseng/index.html">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1998">1998</a>

<b>[Shaw 1996]</b>
<a href="http://spoke.compose.cs.cmu.edu/shaweb/">Mary Shaw</a>
<b><i>Some Patterns for Software Architectures</i></b>
Second Conference on Patterns Languages of Programs (PLoP '95)
Monticello, Illinois, September 1995
<a href="http://cseng.aw.com/bookdetail.qry?ISBN=0-201-89527-7&amp;ptype=0">Pattern Languages of Program Design 2</a>
edited by <a href="http://www.software.ibm.com/qawww/despat-expert.html">John M. Vlissides</a>, <a href="http://www.bell-labs.com/people/cope/">James O. Coplien</a>, and Norman L. Kerth
<a href="http://heg-school.aw.com/cseng/index.html">Addison-Wesley</a>, <a href="http://www.laputan.com/cgi-bin/calendar?1996">1996</a>

<b>[Simon 1969]</b>
Herbert A. Simon
<b><i>The Sciences of the Artificial</i></b>
MIT Press, Cambridge, MA, 1969

<b>[Swift 1726]</b>
Johnathan Swift
<i><b><a href="http://www.jaffebros.com/lee/gulliver/">Travels Into Several Remote Nations Of The World. <br>In four parts. By Lemuel Gulliver, First a Surgeon, and then a Captain of several Ships.</a></b></i>
B. Motte, London, 1726.

<b>[Vitruvius 20 B.C.]</b>
Marcus Vitruvius Pollio (60 B.C-20 B.C.)
<b><i><a href="http://www.ukans.edu/history/index/europe/ancient_rome/E/Roman/Texts/Vitruvius/home.html">De Architectura</a></i></b>
translated by Joseph Gwilt
Priestley and Weale, London, 1826

	</pre>

	<hr>
	<!-- 
This page has been referenced
<img src="http://www.laputan.com/cgi-bin/counter.pl?mud-html-tag&amp;width=5">
</a>times since 12/12/97.
-->
	<h6>
		<b>Brian Foote</b> <a href="mailto:foote@laputan.org">foote@laputan.org
			<br>
		</a>Last Modified: <i>21 November 2012</i>
	</h6>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Senators strike bipartisan deal for ban on stock trading by members of Congress (122 pts)]]></title>
            <link>https://www.cnbc.com/2024/07/10/senators-strike-bipartisan-deal-for-a-ban-on-stock-trading-by-members-of-congress.html</link>
            <guid>40929679</guid>
            <pubDate>Wed, 10 Jul 2024 18:08:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2024/07/10/senators-strike-bipartisan-deal-for-a-ban-on-stock-trading-by-members-of-congress.html">https://www.cnbc.com/2024/07/10/senators-strike-bipartisan-deal-for-a-ban-on-stock-trading-by-members-of-congress.html</a>, See on <a href="https://news.ycombinator.com/item?id=40929679">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="RegularArticle-ArticleBody-5" data-module="ArticleBody" data-test="articleBody-2" data-analytics="RegularArticle-articleBody-5-2"><div id="ArticleBody-InlineImage-108003954" data-test="InlineImage"><p>Senator Jeff Merkley (D-OR) speaks alongside members of the U.S. Senate Banking, Housing, and Urban Affairs Committee during a news conference to discuss the details of the Ending Trading and Holdings in Congressional Stocks (ETHICS) Act at the U.S. Capitol in Washington, D.C., U.S., April 18, 2023.&nbsp;</p><p>Sarah Silbiger | Reuters</p></div><div><p>A bipartisan group of senators on Wednesday launched a renewed effort to ban members of <a href="https://www.cnbc.com/2022/02/09/congress-moves-towards-banning-members-from-trading-stocks.html">Congress</a> from trading stock.</p><p>"Congress&nbsp;should not be here to make a buck," Sen. Josh Hawley, R-Mo., said at a press conference Wednesday on Capitol Hill. "There is no reason why members of&nbsp;Congress&nbsp;ought to be profiting off of the information that only they get."</p><p>The proposal is the latest chapter in a yearslong <a href="https://www.cnbc.com/2021/12/15/house-speaker-nancy-pelosi-opposes-banning-stock-buys-by-congress-members.html">saga</a> in Congress to pass regulations that limit lawmakers' ability to buy and sell stocks, and the first one to get formal consideration by a Senate committee — in this case the Homeland Security &amp; Governmental Affairs&nbsp;Committee&nbsp;on July 24.</p><p>Ethics experts say that legislators' access to the kind of information they receive gives them the potential of having an unfair advantage to the investing public.</p><p>Wednesday's amendment to an existing stock trading ban bill would immediately forbid members of Congress, the president and the vice president from purchasing stocks and other covered investments. It would also give lawmakers 90 days to sell their stocks.</p><p>Sens. Hawley, Jon Ossoff, D-Ga., Jeff Merkley, D-Ore., and Gary Peters, D-Mich., negotiated and announced the new details.</p><p>If passed, the bill would also prohibit lawmakers' spouses and dependent children from trading stocks, beginning March 2027. Also starting that year, the U.S. president, vice president and all members of Congress would have to divest from any covered investments.</p><p>The penalty for violating the divestment mandate, as proposed by the senators, would cost a lawmaker&nbsp;the greater amount of&nbsp;either their monthly salary, or 10% of the value of each covered asset in violation.</p><p>The effort to bar members of Congress from trading stocks has been an uphill battle since at least the start of the Biden administration.</p><p>Ossoff first introduced a ban in 2021 and put his own stock portfolio in a blind trust as an example.</p><p>The effort was turbocharged by disclosures that several senators made very profitable trades in the early days of the Covid-19 pandemic, when members of Congress were getting classified briefings that warned of how disastrous the virus could be for the U.S. economy. The FBI launched insider trading investigations into three senators, but eventually ended the probe without making any charges.</p><p>The effort picked up more steam ahead of the 2022 midterm elections, after former Democratic House Speaker <a href="https://www.cnbc.com/2021/12/15/house-speaker-nancy-pelosi-opposes-banning-stock-buys-by-congress-members.html">Nancy Pelosi</a> dropped her opposition to it.</p><p>Pelosi's husband is a multimillionaire investor Paul Pelosi, who regularly makes large and profitable stock trades. The then-speaker had previously written off the trading ban as a misguided effort to prevent lawmakers from participating in the "free market economy."</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ed Stone, Top Scientist–and Salesman–For the Voyager Mission, Dies at 88 (147 pts)]]></title>
            <link>https://www.wsj.com/science/space-astronomy/ed-stone-scientist-voyager-mission-dies-at-88-44c65bc4</link>
            <guid>40929104</guid>
            <pubDate>Wed, 10 Jul 2024 17:17:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/science/space-astronomy/ed-stone-scientist-voyager-mission-dies-at-88-44c65bc4">https://www.wsj.com/science/space-astronomy/ed-stone-scientist-voyager-mission-dies-at-88-44c65bc4</a>, See on <a href="https://news.ycombinator.com/item?id=40929104">Hacker News</a></p>
Couldn't get https://www.wsj.com/science/space-astronomy/ed-stone-scientist-voyager-mission-dies-at-88-44c65bc4: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Zed on Linux Is Here (750 pts)]]></title>
            <link>https://zed.dev/linux</link>
            <guid>40928893</guid>
            <pubDate>Wed, 10 Jul 2024 16:56:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://zed.dev/linux">https://zed.dev/linux</a>, See on <a href="https://news.ycombinator.com/item?id=40928893">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>To install Zed on most Linux distributions, run the shell script below.</p><div><div><p><a href="https://zed.dev/blog/zed-on-linux">Blog post →</a><a href="https://zed.dev/docs/linux">Docs →</a></p></div><div><pre><code>curl https://zed.dev/install.sh | sh</code></pre></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Researchers discover a new form of scientific fraud: 'sneaked references' (120 pts)]]></title>
            <link>https://phys.org/news/2024-07-scientific-fraud-uncovering.html</link>
            <guid>40928756</guid>
            <pubDate>Wed, 10 Jul 2024 16:41:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://phys.org/news/2024-07-scientific-fraud-uncovering.html">https://phys.org/news/2024-07-scientific-fraud-uncovering.html</a>, See on <a href="https://news.ycombinator.com/item?id=40928756">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
										
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2021/research-1.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2021/research-1.jpg" data-sub-html="Credit: Pixabay/CC0 Public Domain">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2021/research-1.jpg" alt="research" title="Credit: Pixabay/CC0 Public Domain" width="800" height="529">
             <figcaption>
                Credit: Pixabay/CC0 Public Domain
            </figcaption>        </figure>
    </div><p>A researcher working alone—apart from the world and the rest of the wider scientific community—is a classic yet misguided image. Research is, in reality, built on continuous exchange within the scientific community: First you understand the work of others, and then you share your findings.</p>


										      
																																	<p>Reading and writing articles published in <a href="https://phys.org/tags/academic+journals/" rel="tag">academic journals</a> and presented at conferences is a central part of being a researcher. When researchers write a scholarly article, they must cite the work of peers to provide context, detail sources of inspiration and explain differences in approaches and results. A positive citation by other researchers is a key measure of visibility for a researcher's own work.</p>
<p>But what happens when this citation system is manipulated? A recent <i>Journal of the Association for Information Science and Technology</i><a href="https://doi.org/10.1002/asi.24896" target="_blank">article</a> by our team of academic sleuths—which includes information scientists, a computer scientist and a mathematician—has revealed an insidious method to artificially inflate citation counts through metadata manipulations: sneaked references.</p>
<h2>Hidden manipulation</h2>
<p>People are becoming more aware of <a href="https://phys.org/tags/scientific+publications/" rel="tag">scientific publications</a> and how they work, including their potential flaws. Just last year more than <a href="https://www.nature.com/articles/d41586-023-03974-8" target="_blank">10,000 scientific articles were retracted</a>. The issues around citation gaming and the harm it causes the scientific community, including damaging its credibility, are well documented.</p>
<p>Citations of scientific work abide by a standardized referencing system: Each reference explicitly mentions at least the title, authors' names, publication year, journal or conference name, and page numbers of the cited publication. These details are stored as metadata, not visible in the article's text directly, but assigned to a digital object identifier, or DOI—a unique identifier for each scientific publication.</p>
<p>References in a scientific publication allow authors to justify methodological choices or present the results of past studies, highlighting the iterative and collaborative nature of science.</p>
<p>However, we found through a chance encounter that some unscrupulous actors have added extra references, invisible in the text but present in the articles' metadata, when they submitted the articles to scientific databases. The result? Citation counts for certain researchers or journals have skyrocketed, even though these references were not cited by the authors in their articles.</p>

																																						
																																			<h2>Chance discovery</h2>
<p>The investigation began when Guillaume Cabanac, a professor at the University of Toulouse, wrote a post on <a href="https://pubpeer.com/publications/A172115FC8D0A5F44B31A18B08BB26" target="_blank">PubPeer</a>, a website dedicated to post-publication peer review, in which scientists discuss and analyze publications. In the post, he detailed how he had noticed an inconsistency: a Hindawi journal article that he suspected was fraudulent because it contained awkward phrases had far more citations than downloads, which is very unusual.</p>
<p>The post caught the attention of several sleuths who are now the authors of the <a href="https://doi.org/10.1002/asi.24896" target="_blank">JASIST article</a>. We used a scientific search engine to look for articles citing the initial article. Google Scholar found none, but Crossref and Dimensions did find references. The difference? Google Scholar is likely to mostly rely on the article's main text to extract the references appearing in the bibliography section, whereas Crossref and Dimensions use metadata provided by publishers.</p>
<h2>A new type of fraud</h2>
<p>To understand the extent of the manipulation, we examined three scientific journals that were published by the Technoscience Academy, the publisher responsible for the articles that contained questionable citations.</p>
<p>Our investigation consisted of three steps:</p>
<ol>
<li>We listed the references explicitly present in the HTML or PDF versions of an article.</li>
<li>We compared these lists with the metadata recorded by Crossref, discovering extra references added in the metadata but not appearing in the articles.</li>
<li>We checked Dimensions, a bibliometric platform that uses Crossref as a metadata source, finding further inconsistencies.</li>
</ol>

																																			<p>In the journals published by Technoscience Academy, at least 9% of recorded references were "sneaked references." These additional references were only in the metadata, distorting citation counts and giving certain authors an unfair advantage. Some legitimate references were also lost, meaning they were not present in the metadata.</p>
<p>In addition, when analyzing the sneaked references, we found that they highly benefited some researchers. For example, a single researcher who was associated with Technoscience Academy benefited from more than 3,000 additional illegitimate citations. Some journals from the same publisher benefited from a couple hundred additional sneaked citations.</p>
<p>We wanted our results to be externally validated, so we posted our study <a href="https://doi.org/10.48550/arXiv.2310.02192" target="_blank">as a preprint</a>, informed both Crossref and Dimensions of our findings and gave them a link to the preprinted investigation. Dimensions acknowledged the illegitimate citations and confirmed that their database reflects Crossref's data. Crossref <a href="https://retractionwatch.com/2023/10/09/how-thousands-of-invisible-citations-sneak-into-papers-and-make-for-fake-metrics/" target="_blank">also confirmed</a> the extra references in <a href="https://retractionwatch.com/" target="_blank">Retraction Watch</a> and highlighted that this was the first time that it had been notified of such a problem in its database. The publisher, based on Crossref's investigation, has taken action to fix the problem.</p>

																																						
																																			<h2>Implications and potential solutions</h2>
<p>Why is this discovery important? Citation counts heavily influence research funding, academic promotions and institutional rankings. Manipulating citations can lead to unjust decisions based on false data. More worryingly, this discovery raises questions about the integrity of scientific impact measurement systems, a concern that has been highlighted by researchers for years. These systems can be manipulated to foster unhealthy competition among researchers, tempting them to take shortcuts to publish faster or achieve more citations.</p>
<p>To combat this practice we suggest several measures:</p>
<ul>
<li>Rigorous verification of metadata by publishers and agencies like Crossref.</li>
<li>Independent audits to ensure data reliability.</li>
<li>Increased transparency in managing references and citations.</li>
</ul>
<p>This study is the first, to our knowledge, to report a manipulation of metadata. It also discusses the impact this may have on the evaluation of researchers. The study highlights, yet again, that the overreliance on metrics to evaluate researchers, their work and their impact may be inherently flawed and wrong.</p>
<p>Such overreliance is likely to promote questionable research practices, including hypothesizing after the results are known, or <a href="https://doi.org/10.1145/3173574.3173715" target="_blank">HARKing</a>; splitting a single set of data into several papers, known as salami slicing; data manipulation; and plagiarism. It also hinders the transparency that is key to more <a href="https://doi.org/10.1186/s12874-021-01304-y" target="_blank">robust</a> and <a href="https://doi.org/10.1016/S0140-6736(09)60329-9" target="_blank">efficient</a> research. Although the problematic <a href="https://phys.org/tags/citation/" rel="tag">citation</a><a href="https://phys.org/tags/metadata/" rel="tag">metadata</a> and sneaked references have now been apparently fixed, the corrections may have, as is <a href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001572" target="_blank">often the case with scientific corrections</a>, happened too late.</p>

																																																					
																					
																					
                              																					 <p>
												  This article is republished from <a href="https://theconversation.com/" target="_blank">The Conversation</a> under a Creative Commons license. Read the <a href="https://theconversation.com/when-scientific-citations-go-rogue-uncovering-sneaked-references-233858" target="_blank">original article</a>.<img src="https://counter.theconversation.com/content/233858/count.gif?distributor=republish-lightbox-advanced" alt="The Conversation" width="1" height="1">
											 </p>
										                                        
										<!-- print only -->
										<div>
											 <p><strong>Citation</strong>:
												Researchers discover a new form of scientific fraud: Uncovering 'sneaked references' (2024, July 10)
												retrieved 11 July 2024
												from https://phys.org/news/2024-07-scientific-fraud-uncovering.html
											 </p>
											 <p>
											 This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
											 part may be reproduced without the written permission. The content is provided for information purposes only.
											 </p>
										</div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brian Kernighan on "The Practice of Programming" [video] (299 pts)]]></title>
            <link>https://www.youtube.com/watch?v=_QQ7k5sn2-o</link>
            <guid>40927481</guid>
            <pubDate>Wed, 10 Jul 2024 14:45:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=_QQ7k5sn2-o">https://www.youtube.com/watch?v=_QQ7k5sn2-o</a>, See on <a href="https://news.ycombinator.com/item?id=40927481">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Weird things I learned while writing an x86 emulator (305 pts)]]></title>
            <link>https://www.timdbg.com/posts/useless-x86-trivia/</link>
            <guid>40927438</guid>
            <pubDate>Wed, 10 Jul 2024 14:42:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.timdbg.com/posts/useless-x86-trivia/">https://www.timdbg.com/posts/useless-x86-trivia/</a>, See on <a href="https://news.ycombinator.com/item?id=40927438">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div><p>If you’ve read my <a href="https://www.timdbg.com/posts/fakers-guide-to-assembly">first post about assembly language</a>, you might expect that this is another post on how to understand assembly language. I will write more about that at some point, but this post is not that. Instead, this post is going to talk about some of the weird things and random trivia I learned while writing an x86 and amd64 emulator. The emulator I wrote was for <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview">Time Travel Debugging</a>. One piece of TTD is a CPU emulator, which is used to record the entire execution of a process at an instruction level. The first version of TTD was called iDNA, and the emulator for iDNA was written almost completely in assembly code, which was fast but difficult to maintain and extend.</p><p>I wasn’t involved in the first version of TTD, but I was involved in the second version where we rewrote the emulation portion (and eventually most other parts). The new one was written in C++, and we aimed to achieve most of the performance of the assembly language version while having a more maintainable code base. Writing a CPU emulator is, in my opinion, the best way to <em>REALLY</em> understand how a CPU works. You need to pay attention to every detail. This post is a somewhat random collection of the things I learned. If you have a lot of experience with x86 these might be old news, but maybe a few are things you haven’t seen before.</p><h2 id="useless-x86-encoding-trivia">Useless x86 encoding trivia</h2><p>The x86 encoding scheme is a bit funny in that there are often multiple ways to encode the exact same instruction. The <code>int 3</code> instruction can be encoded as <code>CD 03</code>, but can also be encoded in a single byte of <code>CC</code>. This is a very useful encoding because <code>int 3</code> is used as a software breakpoint. That way, it’s always possible to set a breakpoint at any point in a function, even if it’s an instruction that lands at the end of a memory page (with no page mapped after it). Many of these alternate encodings are designed to be shorter for some common case. For instance, adding an immediate value to <code>EAX</code> or <code>RAX</code> with the <code>ADD</code> instruction can be expressed in a compact form that’s shorter than the more general instruction. An <code>add eax, ...</code> instruction can be encoded like this:</p><pre tabindex="0"><code>05cccccccc      add     eax,0CCCCCCCCh
</code></pre><p>Doing the same for ECX takes an extra byte:</p><pre tabindex="0"><code>81c1cccccccc    add     ecx,0CCCCCCCCh
</code></pre><p>So while both registers are general purpose, the fact that <code>EAX</code> is called the “Accumulator register” is not just a convention, it actually makes a difference to the encoding (and potentially the performance, as a result). Compilers tend to be very smart, and can take advantage of these shorter encodings whenever possible. Shorter instructions mean less data transferred from main memory, and more instructions that can fit in the instruction cache, which is good for performance.</p><p>There are other ways to have equivalent instructions besides just alternate encodings. Instructions in x86 can take “prefix bytes” which modify the behavior of the instruction. The “REX” set of prefixes are commonly used in 64 bit code to access a wider range of registers compared to 32-bit code (and make code sequences <a href="https://www.timdbg.com/posts/recognizing-patterns">easier to recognize</a>). An x86 CPU will happily take one of these prefixes, even if it doesn’t have any effect. Put a “REX” byte on an 8-bit add, and it does nothing:</p><pre tabindex="0"><code>4004cc          add     al,0CCh
</code></pre><p>In fact, you can put TWO of these prefixes on. Many disassemblers (including the one in WinDbg) will get confused, but the CPU will execute it just fine:</p><pre tabindex="0"><code>0:000&gt; rrax=0
0:000&gt; u . L2
00007ff8`22160950 40              ???
00007ff8`22160951 4004cc          add     al,0CCh
0:000&gt; t
00007ff8`22160954 cc              int     3
0:000&gt; rrax
rax=00000000000000cc
</code></pre><p>Can we add as many prefixes as we want? You can add quite a few until you get to 15 bytes<sup>1</sup>. This length is a hard limit on current x86-compatible CPUs. Any instruction longer than 15 bytes is considered invalid and will generate an exception.</p><p>There are also some other weird prefixes that you might not know about. The “Address override” prefix can be used to reference a 32-bit address when running in 64-bit mode.</p><pre tabindex="0"><code>488d0424        lea     rax,[rsp]
67488d0424      lea     rax,[esp] # Note the extra '0x67' prefix
</code></pre><p>And when running 32-bit code, it will switch the address mode to 16-bit addresses! I don’t know that I’ve ever seen a compiler generate code like that, but it’s there. Something interesting to note, however, is that disassembling or interpreting these bytes correctly relies on knowing the default operand size and address size of a code segment (which can be <a href="https://en.wikipedia.org/wiki/Segment_descriptor">configured by the kernel</a>). If we disassemble the same bytes in 32-bit mode and 64-bit mode, we can get different results.</p><p>In 32-bit mode:</p><pre tabindex="0"><code>8b0424          mov     eax,dword ptr [esp]
</code></pre><p>In 64-bit mode:</p><pre tabindex="0"><code>8b0424          mov     eax,dword ptr [rsp]
</code></pre><p>It’s not just address sizes either. The entire range that was previous dedicated to <code>INC reg</code> and <code>DEC reg</code> on x86 (40-4F) is now used for the <a href="https://twitter.com/ivanrouzanov/status/1616933010707972097">REX prefix bytes</a> on x64!</p><p>In 32-bit mode, we have this:</p><pre tabindex="0"><code>48              dec     eax
030424          add     eax,dword ptr [esp]
</code></pre><p>But in 64-bit mode, those two instructions have merged to form a single instruction!</p><pre tabindex="0"><code>48030424        add     rax,qword ptr [rsp]
</code></pre><p>The encoding space used by <code>INC</code> and <code>DEC</code> was quite large, so it’s understandable why the AMD64 designers decided to use these bytes for the new prefixes to expand the register set in 64 bit mode. There was already a different encoding for these instructions that supported both registers and memory locations, so nothing was really lost (except a slightly larger encoding for a somewhat infrequent instruction).</p><p>I’ll also note that due to this peculiarity and due to the fact that WinDbg will always assemble instructions as if they are in 32-bit mode, trying to assemble an “INC reg” instruction will always fail, because it will generate the single byte form which is actually a REX prefix.</p><pre tabindex="0"><code>0:000&gt; a. 
00007ff8`4bfc0950 inc eax
00007ff8`4bfc0951 
0:000&gt; u .
ntdll!LdrpDoDebuggerBreak+0x30:
00007ff8`4bfc0950 40eb00          jmp     ntdll!LdrpDoDebuggerBreak+0x33 (00007ff8`4bfc0953)
</code></pre><p>The <code>inc eax</code> here got turned into a useless REX prefix modifying the next instruction, instead of actually being an <code>inc</code> instruction.</p><h2 id="odd-flag-quirks">Odd flag quirks</h2><p>Speaking of <code>INC</code> and <code>DEC</code>, there’s a slightly odd aspect of these instructions that’s worth noting. You might thing that <code>INC EAX</code> does the same thing as <code>ADD EAX, 1</code>, but they are slightly different. An <code>ADD</code> instruction will update the carry flag but the <code>INC</code> instruction does not! This is an easy thing to miss, and when writing the TTD emulator I got this wrong initially, until I caught it with some unit tests.</p><p>There are a few other outliers worth mentioning. Most arithmetic and logical operations will set the overflow, sign, zero, auxiliary carry, parity, and carry flags. That includes the <code>CMPXCHG</code> (compare and exchange) instruction. Interestingly, it does not include the <code>CMPXCHG8B</code>/<code>CMPXCHG16B</code> instructions, which will only modify the zero flag. Weird, right?</p><p>Other instructions leave some of the flags in an undefined state, although in some cases they are <em>conditionally</em> undefined. The shift and rotate instructions leave the overflow flag undefined if the shift amount was more than one. It seems that the actual behavior of the undefined flags is related to the internal implementation of the shift operation, and is different between different architectures. I’ve heard that the Atom line of CPUs used a cheaper/slower way of doing bit shifts in the ALU, which results in the undefined flags having different values, although I haven’t tested this myself.</p><h2 id="more-surprises-with-shift-instructions">More surprises with shift instructions</h2><p>Consider this instruction:</p><pre tabindex="0"><code>66c1e810        shr     ax,10h
</code></pre><p>This instruction is to shift the <code>ax</code> register by 16 bits. Since this is a 16 bit register, it will clear the register to zero. Now consider this instruction:</p><pre tabindex="0"><code>c1e820          shr     eax,20h
</code></pre><p>This instruction says that it will shift the eax register 0x20 (32 decimal) bits to the right. Since this is a 32 bit register, you might think that it will clear the <code>eax</code> register. In reality, the value of eax is unchanged! If you read the details of this instruction in the Intel SDM, you’ll see that the count is masked against 1FH, essentially using only the lowest five bits of the rotation.<sup>2</sup> If the <code>REX.W</code> prefix is used, the mask will be 3FH, meaning the maximum shift is 63 bits.</p><h2 id="segment-overrides">Segment overrides</h2><p>While segmented memory might make you think we are back in the days of 16-bit code, it turns out that segments are alive and well in 32-bit and 64-bit code, and they can have real effects. We tend not to think about them very much because for the most part every OS uses a mostly-flat memory model and all of the segments have a base address of 0.<sup>3</sup> The exception to this tends to be for thread local storage, where one of the “extra segment registers” is used, either <code>FS</code> or <code>GS</code> (or both).</p><p><del>What can complicate things is the fact that usermode code doesn’t have access to the CPU configuration that determines the base address of the FS or GS segments. So if you want to know what flat address corresponds to <code>GS:0x12345678</code>, there’s no way to determine that directly unless the OS has a way of querying this information.</del></p><p><strong>CORRECTION</strong>: <a href="https://twitter.com/sixtyvividtails/status/1621532553873080322">Sixtyvividtails points out</a> that you can read the base of fs/gs segs using the rdfsbase/wrfsbase/rdgsbase/wrgsbase instructions, which are available in unprivileged code. These instructions are available starting on Ivy Bridge (from 2012). Thanks for the correction, sixtyvividtails!</p><p>On Windows, these registers are used for referring to the TEB (Thread Execution Block), and these structures conveniently have a “self” pointer with a flat address to the start of the structure, which also happens to be the base of the segment.</p><p>In 32-bit processes, the TEB is located using <code>FS</code>. We can see how the OS does this by looking at the disassembly of the GetLastError function, which simply accesses a field out of the TEB.</p><pre tabindex="0"><code>0:000&gt; u kernelbase!GetLastError
KERNELBASE!GetLastError:
773e4080 64a118000000    mov     eax,dword ptr fs:[00000018h]   # Grab the TEB.NtTib.Self
773e4086 8b4034          mov     eax,dword ptr [eax+34h]        # Grab the "LastErrorValue" field out of the TEB
773e4089 c3              ret
</code></pre><p>Looking at this using public symbols, you can see what those offsets correspond to:</p><pre tabindex="0"><code>0:000&gt; dt -r1 _TEB
ntdll!_TEB
   +0x000 NtTib            : _NT_TIB
      +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD
...
      +0x018 Self             : Ptr32 _NT_TIB
   +0x01c EnvironmentPointer : Ptr32 Void
...
   +0x034 LastErrorValue   : Uint4B
</code></pre><p>In 64-bit processes, the TEB is located using <code>GS</code>:</p><pre tabindex="0"><code>0:000&gt; u kernelbase!GetLastError
KERNELBASE!GetLastError:
00007ff8`4960cd60 65488b042530000000 mov   rax,qword ptr gs:[30h]
00007ff8`4960cd69 8b4068          mov     eax,dword ptr [rax+68h]
00007ff8`4960cd6c c3              ret
</code></pre><p>It might seem odd that that 64-bit processes use a different segment register for the TEB than a 32-bit process, but there is a very good reason for this. A 32-bit process on a 64-bit OS will have both a 32-bit TEB <em>and</em> a 64-bit TEB, and in some contexts it can be useful to have access to both TEBs (such as the 64-bit WOW code that runs in a 32-bit process).</p><h2 id="segment-overrides-more-trivia">Segment overrides: More trivia</h2><p>I mentioned earlier that the base address of the FS segment and GS segment is determined by CPU configuration. You might be wondering “what CPU configuration?” And the answer is “it depends”. Specifically, it depends on whether you’re in 32-bit mode or 64-bit mode. In 32-bit mode, the actual value of the segment register is used to reference a segment descriptor (defined by the <a href="https://wiki.osdev.org/Global_Descriptor_Table">Global Descriptor Table</a> and <a href="https://wiki.osdev.org/Local_Descriptor_Table">Local Descriptor Table</a>). But in 64-bit mode, the base is controlled by two MSRs, the FS Base (IA32_FS_BASE in the Intel SDM) and GS Base (IA32_GS_BASE). A side effect of this scheme is that the actual value of FS and GS don’t matter at all in 64-bit mode. You can see the effect of this in WinDbg by trying to directly read from something in one of those segments. When debugging a 32-bit process, you can dump the contents of the “FS segment” by using the value of the FS register:</p><pre tabindex="0"><code>0:000&gt; rfs
fs=00000053
0:000&gt; db 53:0
0053:00000000  60 f2 2f 03 00 00 30 03-00 30 20 03 00 00 00 00 `./...0..0 .....
</code></pre><p>If you try the same thing on a 64-bit process, it doesn’t work because the segment values don’t matter, only the segment override prefixes!</p><pre tabindex="0"><code>0:000&gt; rfs
fs=0053
0:000&gt; db 53:0
0053:00000000`00000000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
0:000&gt; rgs
gs=002b
0:000&gt; db 2b:0
002b:00000000`00000000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
</code></pre><h2 id="roll-credits">Roll credits</h2><p>This turned out to be a pretty random list of x86 trivia. Most of it totally useless unless you want to write an emulator (which I <em>highly</em> recommend if you ever get the chance). I still think it’s sort of interesting, and gives a little bit of insight into how things “really work”. Some of this I learned through trial and error, but I had some great mentors while writing an x86 emulator, one of whom was Darek Mihocka, who has been doing emulators long enough that he owns <a href="http://emulators.com/">emulators.com</a>. I’d never claim to be an expert myself, but if this sort of thing is interesting to you make sure to check out the fantastic resources on <a href="https://www.agner.org/optimize/">Agner Fog’s website</a>. As usual, if I made any mistakes or if you have any questions, let me know on <a href="https://twitter.com/timmisiak">Twitter</a> or <a href="https://dbg.social/@tim">Mastodon</a>!</p><p><sup>1</sup> There are some other limits on prefixes on older CPUs, but the 15 byte limit applies even on newer CPUs. Besides the length limitation, some prefixes are also more strict about when they can be used, such as the <code>LOCK</code> prefix (F0)</p><p><sup>2</sup> This actually came up in an interview question at Microsoft. My interviewer was asking me all the ways you could clear a 32-bit register in a single instruction. He was convinced that using a shift would work and didn’t believe me when I said it wasn’t possible.</p><p><sup>3</sup> When executing in 64-bit mode, the segment base of CS, DS, ES, and SS are always treated as 0 by the CPU.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vision language models are blind (389 pts)]]></title>
            <link>https://vlmsareblind.github.io/</link>
            <guid>40926734</guid>
            <pubDate>Wed, 10 Jul 2024 13:35:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://vlmsareblind.github.io/">https://vlmsareblind.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=40926734">Hacker News</a></p>
<div id="readability-page-1" class="page">
  
  <div>
            <h2>
              Vision language models are blind <i></i>
            </h2>
            <div>
              <p><span>

                <span>
                  
                  <p><span><sup>*</sup>Equal contribution</span>
                  </p>
                  <p><span><sup>1</sup>Auburn University,</span>
                    <span><sup>2</sup>University of Alberta,</span>
                  </p>
                </span>


            </span></p></div>
            
            

            
          </div>

  <div>
          <h2>Abstract</h2>
          <p>
              Large language models with vision capabilities (VLMs), e.g., <span>GPT-<span>4o</span></span> and <span>Gemini-<span>1.5</span>
                Pro</span> are
              powering countless image-text processing applications and scoring high on existing vision-understanding
              benchmarks.
              Yet, we find that VLMs fail on 7 visual tasks <em>absurdly easy</em> to humans such as identifying (a)
              whether two
              circles overlap; (b) whether two lines intersect; (c) which letter is being circled in a word; and (d)
              counting the
              number of circles in an Olympic-like logo.
              The shockingly poor performance of four state-of-the-art VLMs suggests their vision is, at best, like that
              of a person
              with <a href="https://en.wikipedia.org/wiki/Myopia" target="_blank">myopia</a> seeing fine details as
              blurry, and at
              worst, like an intelligent person who is blind making
              educated
              guesses.
            </p>
        </div>

  

  






  <!-- TASK 1 Begins -->
  <div id="task1">
      <h2>Task 1: Counting line intersections <img src="https://vlmsareblind.github.io/static/images/logo/two_lines.svg" alt="Two intersecting lines"></h2>

      <div>
        <p>
          Given the impressive accuracy of VLMs on answering questions on diagrams and charts (e.g., <span>Sonnet-<span>3.5</span></span> scoring 94.7% on AI2D and 90.8% on
          ChartQA) <a href="https://arxiv.org/abs/2203.10244">[1]</a>, a reasonable hypothesis is that VLMs must be able
          to see whether two graphs
          intersect in a
          chart. Here, we test this hypothesis by asking VLMs to count the number of intersections between two 2-segment
          piece-wise linear functions.
        </p>

        <h3>Images</h3>
        <p>
          We create 150 images (see Figure 1) of 2D line plots drawn on a white canvas. Each line plot consists of two
          line
          segments, defined by three points whose x-coordinates are fixed and equally spaced. The y-coordinates are
          randomly
          sampled to create two plots that intersect at exactly 0, 1 or 2 points. See Appendix A for more details.
        </p>

        
        <figcaption>Fig. 1: Examples of 2D line plots used in the task, showing different numbers of intersections.
        </figcaption>

        <h3>Prompts</h3>
        <div>
          <p>
            We ask each question using two different wordings:
          </p>
          <ol>
            <li><em>"How many times do the blue and red line plots cross each other?"</em></li>
            <li><em>"How many times do the blue and red lines intersect?"</em></li>
          </ol>

          <h3>Groundtruth</h3>
          <p>
              Answers are ∈ {0, 1, 2} (random-baseline accuracy: 33%).
            </p>




          <h2>Results</h2>
          <p>
            The following table shows the performance of the four models on the task of counting line intersections.
          </p>

          <table>
            <tbody><tr>
              <th>Thickness</th>
              <th>
                <p><span>GPT-<span>4o</span></span>
                </p>
              </th>
              <th>
                <p><span>Gemini-<span>1.5</span> Pro</span>
                </p>
              </th>
              <th>
                <p><span>Sonnet-<span>3</span></span>
                </p>
              </th>
              <th>
                <p><span>Sonnet-<span>3.5</span></span>
                </p>
              </th>
            </tr>
            <tr>
              <td>2</td>
              <td>45.00</td>
              <td>70.00</td>
              <td>64.00</td>
              <td>80.00</td>
            </tr>
            <tr>
              <td>3</td>
              <td>47.00</td>
              <td>68.00</td>
              <td>66.00</td>
              <td>79.00</td>
            </tr>
            <tr>
              <td>4</td>
              <td>54.00</td>
              <td>71.00</td>
              <td>62.00</td>
              <td>73.00</td>
            </tr>
            <tr>
              <td><strong>Average</strong></td>
              <td>48.67</td>
              <td>69.67</td>
              <td>64.00</td>
              <td>77.33</td>
            </tr>
          </tbody></table>
        </div>
      </div>
      <div>
        <h2>Qualitative samples</h2>
        <div>
          
          <figcaption>Fig. 2: VLMs cannot reliably count the intersections.</figcaption>
        </div>
  </div></div>
  <!-- TASK 1 Ends -->

  <hr>
  <!-- TASK 2 Begins -->
  <div id="task2">

      <h2>Task 2: Two circles <img src="https://vlmsareblind.github.io/static/images/logo/two-colored-circles-svg.svg" alt="Two intersecting lines"></h2>



      <div>
        <p>
          In contrast to Task 1 where we tested VLMs on thin lines, here we evaluate their ability to perceive
          interactions
          between larger objects - specifically, two same-sized filled circles. This task assesses VLMs' capability to
          detect
          (1) small gaps between circles and (2) overlapping circles.
        </p>

        <h3>Images</h3>
        <p>
          We generate 672 images of two circles on a white canvas. The circles vary in size, distance, and orientation:
        </p>
        <ul>
          <li>Circle diameters: 1/4, 1/5, 1/6, or 1/7 of the canvas size</li>
          <li>Distances between circle perimeters: -0.15 to 0.5 times the diameter</li>
          <li>Orientations: 90°, 0°, -45°, and 45° angles with the x-axis</li>
          <li>Canvas sizes: 384, 769, and 1155 pixels</li>
        </ul>

        
        <figcaption>Fig. 3: Examples of two-circle images used in the task, showing different configurations.
        </figcaption>
      </div>

      <h3>Prompts</h3>
      <div>
        <p>
          We ask each question using two different wordings:
        </p>
        <ol>
          <li><em>"Are the two circles touching each other? Answer with Yes/No."</em></li>
          <li><em>"Are the two circles overlapping? Answer with Yes/No."</em></li>
        </ol>

        <h3>Groundtruth</h3>
        <div>
          <p>
            Answers are based on the distance d between circle perimeters:
          </p>
          <ul>
            <li>d &lt; 0: Overlapping and touching</li>
            <li>d = 0: Non-overlapping but touching</li>
            <li>d &gt; 0: Non-overlapping and non-touching</li>
          </ul>
          <p>Random-baseline accuracy: 50%.</p>
        </div>




        <h2>Results</h2>
        <p>
          The following table shows the performance of the four models on the task of counting line intersections.
        </p>
        <table>
          <tbody><tr>
            <th></th>
            <th>
              <p><span>GPT-<span>4o</span></span>
              </p>
            </th>
            <th>
              <p><span>Gemini-<span>1.5</span> Pro</span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3</span></span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3.5</span></span>
              </p>
            </th>
          </tr>
          <tr>
            <td>Overlapping</td>
            <td>71.27</td>
            <td>93.30</td>
            <td>88.09</td>
            <td>88.83</td>
          </tr>
          <tr>
            <td>Touching</td>
            <td>74.10</td>
            <td>92.26</td>
            <td>80.95</td>
            <td>94.49</td>
          </tr>
          <tr>
            <td><strong>Average</strong></td>
            <td>72.69</td>
            <td>92.78</td>
            <td>84.52</td>
            <td>91.66</td>
          </tr>
        </tbody></table>

        <h2>Qualitative samples</h2>
      </div>

      <div>
          
          <figcaption>Fig. 4: VLMs consistently fail at smaller distances. However, at a large gap, <span>GPT-<span>4o</span></span> remains unreliable (rightmost). <span>Sonnet-<span>3.5</span></span> tends to conservatively answer "No"
            regardless of the actual distance
            between the two circles.</figcaption>
        </div>
  </div>
  <!-- TASK 2 Ends -->

  <hr>
  <!-- TASK 3 Begins -->
  <div id="task3">

      <h2>Task 3: The circled letter <img src="https://vlmsareblind.github.io/static/images/logo/acknowledgement-svg.svg" alt="Two intersecting lines"></h2>



      <div>
        <p>
          Consistent with prior reports <a href="https://arxiv.org/abs/2304.06712">[2]</a><a href="https://arxiv.org/abs/2310.11441">[3]</a><a href="https://arxiv.org/abs/2309.17421">[4]</a>, we find
          that VLMs can
          100%
          accurately identify a primitive shape (e.g., a red circle ⭕)<a href="https://arxiv.org/abs/2304.06712">[2]</a>
          and can perfectly read an English word (e.g.,
          <span>Subdermatoglyphic</span>) alone. Here, we superimposed the red circle on every
          letter, one at a time, in the word,
          and ask
          VLMs to identify which letter is being circled. While the task is easy to humans, our hypothesis is that if a
          VLM's
          vision is "blurry", it might not be able to identify the exact letter being circled since there is tiny
          spacing
          between the adjacent letters.
        </p>

        <h3>Images</h3>
        <p>
          We choose three strings <span>Acknowledgement</span>, <span>Subdermatoglyphic</span>, and tHyUiKaRbNqWeOpXcZvM because they contain
          characters
          of variable widths and heights. Furthermore, all four tested VLMs can read out all characters in these strings
          when
          they are input to the models as an image. While <span>Acknowledgement</span> is a common
          English word, <span>Subdermatoglyphic</span> is
          the
          longest word without repetitive letters. We also test VLMs on the random string <span>tHyUiKaRbNqWeOpXcZvM</span> to
          estimate how
          much model accuracy is due to its familiarity with the word.
        </p>
        <p>
          For each (string, circled-letter) pair, we render a 512×512 image by choosing among 3 red oval line-thickness
          levels,
          2 font sizes, and 4 random positions in the canvas for a total of 24 images. That is, we generate 360, 408,
          and 480
          images for <span>Acknowledgement</span> (15 letters), <span>Subdermatoglyphic</span> (17 letters), and
          <span>tHyUiKaRbNqWeOpXcZvM</span> (20
          letters),
          respectively. We ensure each letter to be circled fits completely the oval.
        </p>

        
        <figcaption>Fig. 5: Examples of circled letter images used in the task, showing different words and circled
          letters.
        </figcaption>
      </div>

      <h3>Prompts</h3>
      <div>
        <p>
          We ask each question using two different wordings:
        </p>
        <ol>
          <li><em>"Which letter is being circled?"</em></li>
          <li><em>"Which character is being highlighted with a red oval?"</em></li>
        </ol>

        <h3>Groundtruth</h3>
        <p>
            Letters need to match predicted letters exactly (case-insensitive).
          </p>




        <h2>Results</h2>
        <p>
          The following table shows the performance of the four models on the task of identifying the circled letter.
        </p>
        <table>
          <tbody><tr>
            <th>Word</th>
            <th>
              <p><span>GPT-<span>4o</span></span>
              </p>
            </th>
            <th>
              <p><span>Gemini-<span>1.5</span> Pro</span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3</span></span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3.5</span></span>
              </p>
            </th>
          </tr>
          <tr>
            <td><span>Acknowledgement</span></td>
            <td>69.03</td>
            <td>97.50</td>
            <td>82.64</td>
            <td>91.11</td>
          </tr>
          <tr>
            <td><span>Subdermatoglyphic</span></td>
            <td>63.60</td>
            <td>91.05</td>
            <td>71.45</td>
            <td>94.49</td>
          </tr>
          <tr>
            <td><span>tHyUiKaRbNqWeOpXcZvM</span></td>
            <td>77.92</td>
            <td>89.90</td>
            <td>65.94</td>
            <td>82.08</td>
          </tr>
          <tr>
            <td><strong>Average</strong></td>
            <td>70.18</td>
            <td>92.81</td>
            <td>73.34</td>
            <td>89.22</td>
          </tr>
        </tbody></table>
      </div>
      <div>
        <h2>Qualitative samples</h2>
        <div>
          
          <figcaption>Fig. 6: Identifying the letter being circled is non-trivial for VLMs across both English words
            (<span>Acknowledgement</span> &amp; <span>Subdermatoglyphic</span>)
            and a random string
            (<span>tHyUiKaRbNqWeOpXcZvM</span>). When making mistakes, VLMs
            tend to
            predict letters adjacent to the circled one.</figcaption>

        </div>
      </div>
  </div>
  <!-- TASK 3 Ends -->



  <hr>
  <!-- TASK 4 Begins -->
  <div id="task4">

      <h2>Task 4: Counting overlapping shapes <img src="https://vlmsareblind.github.io/static/images/logo/olympic-rings-svg.svg" alt="Two intersecting lines"></h2>



      <div>
        <p>
          Aligned with prior research <a href="https://arxiv.org/abs/2309.17421">[4]</a>, we also find VLMs to be able
          to count disjoint circles. Yet, here, we test
          VLMs on
          counting circles that are <em>intersecting</em> like in the Olympic logo—a common cognitive development
          exercise for
          preschoolers <a href="https://www.myteachingstation.com/preschool/math/numbers/count-shapes-printables">[5]</a><a href="https://depositphotos.com/vector/how-many-counting-game-with-color-simple-geometric-shapes-for-kids-educational-maths-task-for-266096226.html">[6]</a>.
          Our hypothesis is that a "blurry" vision may not see the
          intersection between two circles
          clearly
          and therefore unable to trace circles and count them. For generalization of our findings, we repeat the
          experiment
          with pentagons as well.
        </p>

        <h3>Images</h3>
        <p>
          In an image of size C×C, where C ∈ {384, 769, 1155}px, we draw N ∈ {5, 6, 7, 8, 9} overlapping, same-sized
          circles
          arranged in two rows like the Olympic logo. A circle diameter φ ∈ {C/5, C/10}. We repeat the images with two
          different
          line thickness for rendering circles. This procedure renders 3 resolutions × 5 × 2 diameters = 60 images. We
          repeat
          for pentagons in addition to circles, resulting in 60 × 2 shapes = 120 images in total. For pentagons, their
          side
          length d ∈ {C/5, C/10}.
        </p>


        
        <figcaption>Fig. 7: Examples of Olympic-like logo images used in the task, showing different numbers of shapes,
          sizes,
          and colors.</figcaption>
      </div>

      <h3>Prompts</h3>
      <div>
        <p>
          We ask each question using two different wordings:
        </p>
        <ol>
          <li><em>"How many {shapes} are in the image? Answer with only the number in numerical format."</em></li>
          <li><em>"Count the {shapes} in the image. Answer with a number in curly brackets e.g. {3}."</em></li>
        </ol>
        <p>
          Where {shapes} is either "circles" or "pentagons" depending on the image.
        </p>
        <h3>Groundtruth</h3>
        <p>
            Answers are ∈ {5, 6, 7, 8, 9} (random-baseline accuracy: 20%).
          </p>


        <h2>Results</h2>
        <p>
          The following table shows the performance of the four models on the task of identifying the circled letter.
        </p>
        <table>
          <tbody><tr>
            <th></th>
            <th>
              <p><span>GPT-<span>4o</span></span>
              </p>
            </th>
            <th>
              <p><span>Gemini-<span>1.5</span> Pro</span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3</span></span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3.5</span></span>
              </p>
            </th>
          </tr>
          <tr>
            <td>Circles</td>
            <td>42.50</td>
            <td>20.83</td>
            <td>31.66</td>
            <td>44.16</td>
          </tr>
          <tr>
            <td>Pentagons</td>
            <td>19.16</td>
            <td>9.16</td>
            <td>11.66</td>
            <td>75.83</td>
          </tr>
        </tbody></table>

      </div>

      <div>
        <h2>Qualitative samples</h2>

        <div>
          
          <figcaption>Fig. 8: <span>Gemini-<span>1.5</span>
              Pro</span> often predicts "5" circles.</figcaption>

        </div>
      </div>
  </div>
  <!-- TASK 4 Ends -->



  <hr>
  <!-- TASK 5 Begins -->
  <div id="task5">


      <h2>Task 5: Counting the nested squares <img src="https://vlmsareblind.github.io/static/images/logo/nested-squares-svg.svg" alt="Two intersecting lines"></h2>


      <div>
        <p>
          Motivated by the findings that VLMs struggle in counting the intersected circles (Task 4), here, we arrange
          the shapes
          differently so that their edges do <em>not</em> intersect.
          That is, each shape is nested entirely inside another. For completeness, we test squares in this task.
        </p>

        <h3>Images</h3>
        <p>
          In a canvas of size C×C, we render N ∈ {2, 3, 4, 5} nested squares.
          The outermost square is rendered first using a random edge length d and a line thickness ∈ {2, 3, 4}px.
          The remaining N-1 squares are drawn using a size reduction factor, 0.75 × d and placed at a random coordinate
          that
          ensures they do not touch outer squares.
          For each line thickness, we generate 10 images (where squares have different, random locations) to create 3 ×
          10 = 30
          images.
          Repeating the process for all N values results in 4 × 30 = 120 images.
        </p>
        
        <figcaption>Fig. 9: Examples of nested square images used in the task, showing different numbers of squares.
        </figcaption>
      </div>

      <h3>Prompts</h3>
      <div>
        <p>
          We ask each question using the following wording:
        </p>
        <ol>
          <li><em>"Count the total number of squares in the image."</em></li>
        </ol>
        <p>
          Where {shapes} is either "circles" or "pentagons" depending on the image.
        </p>
        <h3>Groundtruth</h3>
        <p>
            Answers are ∈ {2, 3, 4, 5} (random-baseline accuracy: 25%).
          </p>


        <h2>Results</h2>
        <p>
          The following table shows the performance of the four models on the task of counting nested squares.
        </p>
        <table>
          <tbody><tr>
            <th></th>
            <th>
              <p><span>GPT-<span>4o</span></span>
              </p>
            </th>
            <th>
              <p><span>Gemini-<span>1.5</span> Pro</span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3</span></span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3.5</span></span>
              </p>
            </th>
          </tr>
          <tr>
            <td>Squares</td>
            <td>48.33</td>
            <td>80.00</td>
            <td>55.00</td>
            <td>87.50</td>
          </tr>
        </tbody></table>

      </div>

      <div>

        <h2>Qualitative samples</h2>
        <div>
          
          <figcaption>Fig. 10: Only <span>Sonnet-<span>3.5</span></span> can count
            the
            squares in a majority of the images.</figcaption>
        </div>
      </div>
  </div>
  <!-- TASK 5 Ends -->




  <hr>
  <!-- TASK 6 Begins -->
  <div id="task6">

      <h2>Task 6: Counting the rows and columns of a grid <img src="https://vlmsareblind.github.io/static/images/logo/grid-3x4-svg.svg" alt="Two intersecting lines"></h2>


      <div>
        <p>
          The results from prior tasks show VLMs cannot always count shapes that are overlapping (Task 4) or nested
          (Task 5).
          What about adjacent shapes? Here, we tile up shapes (specifically, squares) into a grid and challenge VLMs to
          count—a
          task that is supposedly simple to VLMs given their remarkable performance (≥ 90% accuracy) on DocVQA, which
          includes
          many questions with tables.
          To simplify the task, we ask models to count the number of rows and columns in a given table.
        </p>

        <h3>Images</h3>
        <p>
          A grid may have N×N, N×N', or N'×N cells, where N∈{3, 4, 5, 6, 7, 8, 9} and N' = N + 1.
          Each grid is rendered with two different line-thicknesses on a canvas of size C×C where C∈{500, 1250, 2000}px.
          Besides empty grids, we also replicate the procedure to make grids contain text (which is more common in
          real-world
          tables) where each cell contains a single random word.
          Two versions combined have 2×222 = 444 images.
        </p>
        
        <figcaption>Fig. 9: Examples of grid images used in the task, showing text-filled and empty grids with various
          dimensions.</figcaption>
      </div>

      <h3>Prompts</h3>
      <div>
        <p>
          We ask each question using two different wordings:
        </p>
        <ol>
          <li><em>"Count the number of rows and columns and answer with numbers in curly brackets. For example, rows={5}
              columns={6}"</em></li>
          <li><em>"How many rows and columns are in the table? Answer with only the numbers in a pair (row, column),
              e.g.,
              (5,6)"</em></li>
        </ol>

        <h3>Groundtruth</h3>
        <p>
            Answers include both the number of rows and columns. An answer is correct when both column and row counts
            are
            correctly predicted.
          </p>

        <h2>Results</h2>
        <p>
          The following table shows the performance of the four models on the task of counting rows and columns in
          grids.
        </p>
        <table>
          <tbody><tr>
            <th>Grid type</th>
            <th>
              <p><span>GPT-<span>4o</span></span>
              </p>
            </th>
            <th>
              <p><span>Gemini-<span>1.5</span> Pro</span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3</span></span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3.5</span></span>
              </p>
            </th>
          </tr>
          <tr>
            <td>Blank</td>
            <td>26.13</td>
            <td>25.75</td>
            <td>25.00</td>
            <td>59.84</td>
          </tr>
          <tr>
            <td>Text</td>
            <td>53.03</td>
            <td>45.83</td>
            <td>47.34</td>
            <td>88.68</td>
          </tr>
          <tr>
            <td><strong>Average</strong></td>
            <td>39.58</td>
            <td>35.79</td>
            <td>36.17</td>
            <td>74.26</td>
          </tr>
        </tbody></table>

      </div>

      <div>
        <h2>Qualitative samples</h2>
        <div>
          
          <figcaption>Fig. 12: Examples from the benchmark show that models consistently fail at counting rows and
            columns of
            blank grids.</figcaption>
        </div>
      </div>

      

      <div>
          
          <figcaption>Fig. 13: When text is included in the cells of the grid, the performance of all VLMs improves,
            especially
            <span>Sonnet-<span>3.5</span></span>.
          </figcaption>
        </div>
  </div>
  <!-- TASK 6 Ends -->


  <hr>
  <!-- TASK 7 Begins -->
  <div id="task7">

      <h2>Task 7: Following single-colored paths <img src="https://vlmsareblind.github.io/static/images/logo/subway-map-svg.svg" alt="Two intersecting lines"></h2>



      <div>
        <p>
          It is important for VLMs to be able to follow paths in order to read maps or charts, interpret graphs, and
          understand
          user notations (e.g., arrows) in input images. To assess path-following capability, this task asks models to
          count the
          unique-color paths between two given stations in a simplified subway map. This is another easy-to-humans task
          that
          challenges VLMs significantly.
        </p>

        <h3>Images</h3>
        <p>
          We create each subway map on an image of size C×C, where C ∈ {512, 1024}px. We write 4 station names (A, B, C,
          D) at 4
          fixed coordinates. We divide the canvas into an invisible grid of 18×18 cells and initialize 3 path-starting
          points
          C/18px away from each station. We draw a path, using the depth-first search algorithm starting from a random
          station
          and a random starting point, where a valid move is one cell in any direction: North, south, east or west. We
          repeat
          the process so that each station has exactly N ∈ {1, 2, 3} outgoing paths, for a total of 180 maps.
        </p>

        
        <figcaption>Fig. 14: Examples of subway map images used in the task, showing different numbers of paths and
          variations
          in path thickness.</figcaption>
      </div>

      <h3>Prompts</h3>
      <div>
        <p>
          We ask each question using two different wordings:
        </p>
        <ol>
          <li><em>"How many single-colored paths go from A to C? Answer with a number in curly brackets, e.g., {3}"</em>
          </li>
          <li><em>"Count the one-colored routes that go from A to C. Answer with a number in curly brackets, e.g.,
              {3}."</em>
          </li>
        </ol>

        <h3>Groundtruth</h3>
        <p>
            Answers are ∈ {0, 1, 2, 3} (random-baseline accuracy: 25%).
          </p>

        <h2>Results</h2>
        <p>
          The following table shows the performance of the four models on the task of counting single-colored paths
          between
          stations.
        </p>
        <table>
          <tbody><tr>
            <th>Paths</th>
            <th>
              <p><span>GPT-<span>4o</span></span>
              </p>
            </th>
            <th>
              <p><span>Gemini-<span>1.5</span> Pro</span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3</span></span>
              </p>
            </th>
            <th>
              <p><span>Sonnet-<span>3.5</span></span>
              </p>
            </th>
          </tr>
          <tr>
            <td>1</td>
            <td>67.50</td>
            <td>85.41</td>
            <td>23.75</td>
            <td>95.00</td>
          </tr>
          <tr>
            <td>2</td>
            <td>44.37</td>
            <td>28.75</td>
            <td>37.18</td>
            <td>56.25</td>
          </tr>
          <tr>
            <td>3</td>
            <td>36.71</td>
            <td>25.78</td>
            <td>15.42</td>
            <td>25.39</td>
          </tr>
          <tr>
            <td><strong>Average</strong></td>
            <td>45.89</td>
            <td>40.01</td>
            <td>23.78</td>
            <td>50.18</td>
          </tr>
        </tbody></table>
      </div>
      <div>
        <h2>Qualitative samples</h2>
        <div>
          
          <figcaption>Fig. 15: Some VLMs (<span>Gemini-<span>1.5</span></span>,
            <span>Sonnet-<span>3</span></span>)
            surprisingly fail in even extremely easy cases (leftmost).
            As the
            number of paths exiting each station increases, VLMs tend to perform worse.
          </figcaption>

        </div>
      </div>
  </div>
  <!-- TASK 7 Ends -->




  
  <!-- Add this script at the end of the body -->



</div>]]></description>
        </item>
    </channel>
</rss>