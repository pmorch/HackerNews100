<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 25 Mar 2024 22:00:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Meta takes $40K, holds our business ransom (101 pts)]]></title>
            <link>https://tidbyt.com/blogs/tidbyt/meta-takes-40k-holds-our-business-ransom</link>
            <guid>39819903</guid>
            <pubDate>Mon, 25 Mar 2024 18:46:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tidbyt.com/blogs/tidbyt/meta-takes-40k-holds-our-business-ransom">https://tidbyt.com/blogs/tidbyt/meta-takes-40k-holds-our-business-ransom</a>, See on <a href="https://news.ycombinator.com/item?id=39819903">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<meta charset="utf-8">

<p><strong>tl;dr:</strong> Meta charged my credit card $40K for advertising, somehow lost track of the money, and has now suspended our account unless we wire them $40K more.</p>
<hr>
<p>When you’re running a small business, you always hear horror stories from fellow founders about dealing with large platform companies like Meta, Google, Amazon, and Apple. Depending on your business, working with these platforms ranges from “convenient” to “existentially necessary”.</p>
<p>In our case, <a href="https://tidbyt.com/">Tidbyt</a> is a very visual consumer product, making it a great fit for Instagram. Our potential customers are on Instagram and Facebook, so we really have to be there too. In fact, since launch, we’ve paid Meta literal millions of dollars for advertising on these platforms.</p>
<p>Given the size of our account, and the fact that I’m a former Facebook employee, we figured things would be fine — and they more or less have been. Ad performance has declined a bit, but hasn’t it for everyone? It also bothered me that we’ve never been assigned an account manager or given a phone number to call for issues, but that seems to be an extremely standard experience as well.</p>
<p>Once our account got large enough, Meta switched us to monthly invoicing and we continued to have a good working relationship for a couple years. Until…</p>
<h2>Pay by credit card? Sure, why not.</h2>
<p>Some time last year, Meta added the option to pay invoices by credit card. It’s not rocket science, you just click “Pay” in their billing portal and enter your credit card. It gets charged.</p>
<p>We tried the credit card payment option for the first time last month. My card was charged, the invoice state updated to “Processing”. Strangely, the portal didn’t provide a PDF receipt or anything, but Meta’s ad platform is known to be fairly buggy.</p>
<p>A little while later, we got an email from Meta with a vaguely scary message:</p>
<blockquote>Your account is 16 days past due and is at risk of being placed on a collections hold. Payment instructions are included at the bottom of each invoice. If you've recently paid this balance, please send payment remittance advice to <a href="https://tidbyt.com/cdn-cgi/l/email-protection#d2a2b3abbfb7bca692b4b0fcb1bdbf"><span data-cfemail="fa8a9b83979f948eba9c98d4999597">[email&nbsp;protected]</span></a> so we can make sure to credit your account promptly.</blockquote>
<p>Bummer, but probably just a mix up? Checking my card, it had <em>definitely</em> been charged, and the charge had even been finalized. We responded with a screenshot of the Amex statement and once again figured that was it.</p>
<p>But <strong>8 days later</strong>, we got another email from a “collections analyst”, and it became pretty clear that the collections analyst didn’t even realize that credit card payments were possible. They asked for things like an <em>“MT103 document”</em> and <em>“payment advise document”</em>. Those are the kinds of receipts you get when you send a wire transfer from a bank, but obviously we didn’t have them since I paid via credit card through Meta’s own website.</p>
<p>This dance continued about once a week, with a new email from Meta, promises from the analyst to call us by phone (they never did), and a new response from us with the credit card statement. By this point we’d actually even settled the credit card bill with Amex.</p>
<p>The last we’d heard from Meta was a week ago, and I sent over the final PDF transaction statement from Amex.&nbsp;</p>
<p><img src="https://cdn.shopify.com/s/files/1/0426/4768/3235/files/statement_a86b2107-163f-4a47-b11c-d0cb2ab6ddc8_1024x1024.png?v=1711391873"></p>
<p><em>Ironic how the credit card statement includes a link to <a href="http://metacareers.com/">metacareers.com</a> 🙃&nbsp;And nope, that phone number doesn’t go anywhere.</em></p>
<h2>I know people at Meta, right?</h2>
<p>Fearing the worst, I personally started reaching out to alumni and employees at Facebook. Like come on, I worked there for a couple years, y’all know me and we can get this figured out, right? Definitely nepotism, but when the entire business is on the line, I’m willing to pull every available lever.</p>
<p>Sadly the only actionable advice we got was to open a case with Meta’s business support. I did that, and the chat support rep was clearly not able to deal with this kind of issue. The rep gave me a link and asked me to fill out a support form to reach support… but it was the exact same form I’d just filled out to start a chat with <em>them</em>.</p>
<p>When that didn’t work, they asked me to file a bug/feedback report. I filed the bug report, but those reports clearly state “we&nbsp;can't personally&nbsp;respond to everyone”. Totally the wrong channel.</p>
<p><img alt="" src="https://cdn.shopify.com/s/files/1/0426/4768/3235/files/bug-report_600x600.png?v=1711391994"></p>
<p>And of course, the support case I originally opened is now closed as “completed”.</p>
<h2>Your Meta ad account has been disabled.</h2>
<p>This morning at 3 AM, we got an email saying that our account has been disabled:</p>
<blockquote>
<p>Dear Tidbyt, Inc.,</p>
<p>Your Meta ad account was placed on a collections hold for overdue invoices totaling USD 37,216.17.</p>
<p>Your account has been disabled and is currently inactive.</p>
<p>To reactive your credit line, we must receive payment for the past due balance.</p>
</blockquote>
<p>I responded one more time, and got the same response from the same collections analyst:</p>
<blockquote>
<p>We apologize for the inconvenience caused, upon checking from our side we haven't received the payment that you have made via Credit Card. We request you check with your bank side and give me an update on the payment status.</p>
</blockquote>
<p>But again, there’s nothing more to check on our end since we paid through Meta’s own portal. When we paid via credit card, Meta’s payment processor charged the card for $37K and would have sent that money to Meta’s bank account.</p>
<p><strong>So Meta is sitting on $37K, but has disabled our account because they can’t seem to be bothered to find it. If we want to reactivate our account, we have to double-pay and directly wire transfer them another $37K. Otherwise we’re dead in the water.</strong></p>
<h2>This kills the business.</h2>
<p>I get the inherent risk of relying on a third-party platform for a large chunk of your business, I really do. It keeps me up at night and we’ve definitely invested in alternatives where possible.</p>
<p>But in a lot of ways, Meta <em>is</em> the marketplace. Running a consumer retail business without an Instagram presence… it’s kind of like trying to build a consumer phone app without working with Apple and Google. Sure, you could try to reinvent the entire ecosystem and marketplace with unlimited time &amp; money, but even Amazon failed when they tried that.</p>
<p>What makes it even worse for us is that we base our manufacturing and inventory on sales forecasts. It’s only been 12 hours since our Instagram and Facebook&nbsp;ad accounts were blipped, but we’re already seeing a drop in traffic and sales. We’ll certainly try to course correct, but it’s going to be very, very difficult.</p>
<h2>“Just do a chargeback.”</h2>
<p>One advantage of having paid with a credit card is that we could dispute the charge with Amex. This is a nuclear option since it has a number of risks:</p>
<ol>
<li>
<strong>Will we win the dispute?</strong> Once we dispute the charge, the bank has months to investigate and render a final decision. There’s always a chance that they could side with Meta, and then we’d never see that money back. In the meantime we would still have to pay Meta another $37K to reactivate the account.</li>
<li>
<strong>Will Meta permanently close our accounts?</strong> If we file a chargeback, then $37K will immediately be withdrawn by the credit card processor from Meta’s account. I promise you, somebody at Meta is going to notice $40K <em>leaving</em> their account, and I have no idea how they would respond. They could permanently close our ad accounts, suspend our organic accounts, or even suspend our personal accounts. No way to know.</li>
</ol>
<h2>Fire and motion.</h2>
<p>Over 20 years ago, Joel Spolsky wrote a great essay that’s always stuck with me, <em><a href="https://www.joelonsoftware.com/2002/01/06/fire-and-motion/">Fire And Motion</a></em>. In it, he talks about “cover fire”:</p>
<blockquote>
<p>If you are moving forward, writing code and fixing bugs constantly, time is on your side. Watch out when your competition fires at you. Do they just want to force you to keep busy reacting to their volleys, so you can’t move forward?</p>
</blockquote>
<p>When large platform companies throw us for loops like these, it’s a form of cover fire. Instead of spending the day moving our company forward, I’m instead dealing with this curveball that Meta has thrown at us.</p>
<p>Obviously, there isn’t somebody at Meta who is intentionally trying to make our lives difficult because they see Tidbyt as some sort of strategic threat (lol). But organizations will eventually evolve to reproduce the conditions that favor their continued existence and growth.</p>
<p>When Meta has a payments issue that isn’t anyone’s priority to solve, when Google Cloud decides to deprecate another product with short notice, when Apple throws out new App Store rules… these are all cover fire. Even if the underlying intentions are genuine, the effect is that the rest of us spend more time reacting and less time innovating.</p>
<p>I’m not sure what the answer is, but man, do I really wish I hadn’t tried to pay that invoice with a credit card.</p>
<p><a href="https://news.ycombinator.com/item?id=39819903"><em>(discuss on Hacker News)</em></a></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ZenHammer: Rowhammer Attacks on AMD Zen-Based Platforms (148 pts)]]></title>
            <link>https://comsec.ethz.ch/research/dram/zenhammer/</link>
            <guid>39819599</guid>
            <pubDate>Mon, 25 Mar 2024 18:20:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://comsec.ethz.ch/research/dram/zenhammer/">https://comsec.ethz.ch/research/dram/zenhammer/</a>, See on <a href="https://news.ycombinator.com/item?id=39819599">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
			<!-- If has sidebar start -->
	<main id="main">
		<div>
			<!-- If has sidebar end -->
							<article id="post-1249" class="page">
										<!-- .entry-header -->
					<div>
						
<p><a href="https://comsec.ethz.ch/wp-content/files/zenhammer_sec24.pdf">Our work</a> shows that it is possible to <strong>trigger Rowhammer bit flips on DDR4 devices on AMD Zen 2 and Zen 3</strong> <strong>systems</strong> despite deployed TRR mitigations. This result proves that <strong>AMD systems are equally vulnerable to Rowhammer as Intel systems</strong>, which greatly increases the attack surface, considering today’s AMD market share of around 36% on x86 desktop CPUs. This poses a significant risk as DRAM devices in the wild cannot easily be fixed, and previous work showed that Rowhammer attacks are practical, for example,&nbsp;<a href="https://comsec.ethz.ch/research/dram/smash/" target="_blank" rel="noreferrer noopener">in the browser</a>,&nbsp;<a href="https://comsec.ethz.ch/wp-content/files/drammer.pdf" target="_blank" rel="noreferrer noopener">on smartphones</a>,&nbsp;<a href="https://comsec.ethz.ch/wp-content/files/flip-feng-shui_sec16.pdf" target="_blank" rel="noreferrer noopener">across VMs</a>, and even&nbsp;<a href="https://comsec.ethz.ch/wp-content/files/throwhammer_atc18.pdf" target="_blank" rel="noreferrer noopener">over the network</a>. Furthermore, we show that ZenHammer can trigger <strong>Rowhammer bit flips on a DDR5 device for the first time</strong>.</p>



<p>Our results show a high number of bit flips on Zen 2 and Zen 3 systems. Also, devices are more vulnerable on Zen 3 than Coffee Lake, simplifying exploitation. We can build the page table, RSA public key corruption, and sudo exploits from prior work on 7/6/4 of these devices, taking, on average, just 164/267/209 seconds.</p>



<h2>How did you do it?</h2>



<p>We reverse-engineered the <strong>secret DRAM address functions </strong>by adopting the <a href="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_pessl.pdf">DRAMA</a> technique for AMD systems. We found that the timing routine must be changed for more reliable results. We make the key observation that a physical offset must be applied to physical addresses before recovering the DRAM address functions due to system address remapping (see <strong>Figure 1</strong>). This allows us to recover the address functions completely. However, using these address functions gives us very few bit flips on 5 and 0 of 10 devices on AMD Zen 2 and Zen 3, respectively, as we show in <strong>Table 1</strong>.</p>



<figure><table><tbody><tr><td><strong>Fig. 1:</strong> Remapping of higher address ranges to unused parts of physical memory on Intel and AMD CPUs. The Top of Memory (TOM) is the system’s highest addressable memory location.</td><td><strong>Table 1:</strong> Result of running Blacksmith on AMD Zen 2 and Zen 3 systems, compared to our Intel Coffee Lake baseline. We report for each device the number of patterns found (|P+|) and the number of bit flips over all patterns (|F_fuzz|). We omit devices without any bit flips.</td></tr><tr><td><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_141734_ZenHammer-watermarked@2x-1024x495.png" alt=""></td><td><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_154517_paper@2x-1024x567.png" alt=""></td></tr></tbody></table></figure>



<p>We started by looking at the <strong>refresh synchronization</strong>, which previous work (e.g., <a href="https://comsec.ethz.ch/research/dram/smash/">SMASH</a>, <a href="https://comsec.ethz.ch/research/dram/blacksmith/">Blacksmith</a>) showed to be important for triggering bit flips. We demonstrate that continuous timing measurements using non-repeating rows are effective for precise and reliable refresh synchronization on AMD. The result in<strong> Listing 1</strong> shows our improved refresh synchronization method.</p>



<figure><table><tbody><tr><td></td><td data-align="center"><strong>Listing 1</strong>. Our continuous, non-repeating refresh synchronization.</td></tr><tr><td></td><td data-align="center"><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_160700_paper@2x-1024x463.png" alt=""></td></tr></tbody></table></figure>



<p>We found out that the <strong>activation rate of non-uniform Rowhammer patterns </strong>on AMD Zen+/3 systems is significantly lower than on Intel Coffee Lake (see <strong>Figure 2</strong>). To investigate this, we conducted a series of experiments to find the optimal hammering <strong>instruction sequence</strong>. Our results showed that regular loads (<code>MOV</code>) with <code>CLFLUSHOPT</code> for flushing aggressors from the cache, issued immediately after accessing an aggressor (“scatter” style), is optimal. It further revealed that, unlike on Zen 2, explicit fencing after flushing is not required on Zen 3.</p>



<figure><table><tbody><tr><td data-align="center"><strong>Fig. 2:</strong> Distribution of the activation rates of non-uniform hammering patterns on Z+, Z3, and Intel Coffee Lake (CL). The whiskers indicate the minimum and maximum values.</td></tr><tr><td data-align="center"><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_141813_ZenHammer-watermarked@2x-1024x341.png" alt=""></td></tr></tbody></table></figure>



<p>We further investigated how different <strong>fence types and fence scheduling policies</strong> affect Rowhammer patterns on AMD Zen systems. For this, we came up with six different pattern-aware and cache-avoiding fence scheduling policies (see <strong>Table 2</strong>) and tested them on our devices for 6 hours each to determine the device’s optimal policy. We found that on most devices on Zen 2 the policy SP_none is optimal while SP_pair is in most cases better suited on Zen 3.</p>



<figure><table><tbody><tr><td data-align="center"><strong>Table 2:</strong> Overview of our proposed fence scheduling policies. We indicate which policies are pattern-aware by taking the pattern’s structure into account and which are cache-avoiding.</td></tr><tr><td data-align="center"><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_164041_paper@2x-1024x666.png" alt=""></td></tr></tbody></table></figure>



<h2>How bad is it?</h2>



<p>For our <strong>evaluation</strong>, we considered a test pool of 10x DDR4 DRAM devices covering the three major manufacturers (Samsung, Micron, SK Hynix). We let our ZenHammer fuzzer run for 3 hours with each fence type (mfence, sfence) and fence scheduling policy. After each run, the best pattern is determined by using a minisweep over 4 MiB with all found patterns. Thereafter, we <em>swept</em> the best pattern of the best policy over a contiguous memory area of 256 MB and reported the number of bit flips. The results in <strong>Table 3</strong> show that our ZenHammer fuzzer is able to trigger bit flips on 7 (Zen 2) and 6 (Zen 3) of 10 DDR4 DRAM devices.</p>



<figure><table><tbody><tr><td data-align="center"><strong>Table 3:</strong> ZenHammer results on AMD Zen 2 and Zen 3 as well as Intel Coffee Lake. For each of our devices, we report the best scheduling policy (SP_opt) and both the number of effective patterns (|P+|) and bit flips (|F_fuzz|) we found while fuzzing with the best policy. We also show the number of bit flips found when sweeping the best patterns over a 256 MiB range (|F_swp|).</td></tr><tr><td data-align="center"><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_144633_paper@2x-1024x447.png" alt=""></td></tr></tbody></table></figure>



<p>We evaluated the <strong>exploitability</strong> of these bit flips based on three attacks from <a href="https://comsec.ethz.ch/wp-content/files/hammertime_raid18.pdf" target="_blank" rel="noreferrer noopener">previous work</a>: (i) an attack targeting the page frame number of a page table entry (PTE) to pivot it to an attacker-controlled page table page, (ii) an attack on the RSA-2048 public key that allows recovering the associated private key used to authenticate to an SSH host, (iii) and an attack on the password verification logic of the <code>sudoers.so</code> library that enables gaining root privileges. We report the results in <strong>Table 4</strong>. </p>



<figure><table><tbody><tr><td><strong>Table 4:</strong> Analysis of the bit flip exploitability found during the sweep over 256 MiB on AMD Zen 2, Zen 3, and Intel Coffee Lake. For each attack, we indicate the number of exploitable bit flips (#Ex.) and the average time to find an exploitable bit flip (Time). We mark DIMMs with a single exploitable bit flip by (*). We omit DIMMs without any exploitable bit flips.</td></tr><tr><td><img decoding="async" src="https://comsec.ethz.ch/wp-content/uploads/2024/03/20240319_142711_paper@2x-1024x264.png" alt=""></td></tr></tbody></table></figure>



<h2>What about DDR5?</h2>



<p>Finally, we tried ZenHammer on DDR5 by reverse engineering the DRAM functions on AMD Zen 4 and evaluating ten DDR5 devices. Out of these ten devices, ZenHammer could trigger ~42k flips on one device. <strong>This is the first public report of DDR5 bit flips on commodity systems in the wild</strong>. However, given that ZenHammer could not trigger flips on nine out of ten devices, we conclude that more research is necessary to find more effective patterns for DDR5 devices.</p>



<h2>Further Information</h2>



<p>For full details and more information about our work, please have a look at our&nbsp;<a href="https://comsec.ethz.ch/wp-content/files/zenhammer_sec24.pdf">paper</a>, which is to appear at&nbsp;<a href="https://www.usenix.org/conference/usenixsecurity24/">USENIX Security 2024</a> in August 2024. Our ZenHammer fuzzer is available on <a href="https://github.com/comsec-group/zenhammer">Github</a>.</p>



<h2>FAQs</h2>



<p>Following, we provide answers to the most frequently asked questions about our work.</p>



<p><strong>Why has nobody paid any attention to AMD systems before?</strong><br>We believe that AMD received little attention as the <a href="https://dl.acm.org/doi/pdf/10.1145/2678373.2665726">original work</a> on Rowhammer by Kim et al. showed a much higher number of bit flips on Intel systems and subsequent work also focused primarily on Intel. Further, there is much more known about the microarchitecture of Intel CPUs compared to AMD CPUs.</p>



<p><strong>Are there any DDR4 devices that are safe?</strong><br>Not likely. We could not trigger any bit flips on 3 and 4 of our 10 devices on Zen 2 and Zen 3, respectively. However, given that we triggered only a few bit flips on them on Intel Coffee Lake as well, we think that tuning the fuzzer further may expose bit flips on these devices too. </p>



<p><strong>Why does your evaluation consider ten devices only?</strong><br>Because we have a limited number of AMD Zen 2/3 machines in our lab and some of our experiments took a long time, we have decided to reduce the number of devices to ten. We made sure that our randomly chosen subset includes devices from all three major DRAM vendors.</p>



<p><strong>How can I check whether my DRAM is vulnerable?</strong><br>The code of our ZenHammer fuzzer, which you can use to assess your DRAM device for bit flips on AMD Zen 2/3/4 CPUs, is available on&nbsp;<a href="https://github.com/comsec-group/zenhammer" target="_blank" rel="noreferrer noopener">GitHub</a>.</p>



<p><strong>Why has JEDEC not fixed this issue yet?</strong><br>By now we know, thanks to a better understanding, that solving Rowhammer is hard but not impossible, as we show in our previous work <a href="https://comsec.ethz.ch/research/dram/protrr/">ProTRR</a> and <a href="https://comsec.ethz.ch/research/dram/rega/">REGA</a>. We believe that there is a lot of bureaucracy inside JEDEC that makes it difficult to properly address Rowhammer.</p>



<p><strong>What about DIMMs with Error Correction Codes (ECC)?</strong><br><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8835222" target="_blank" rel="noreferrer noopener">Previous work</a>&nbsp;on DDR3 showed that ECC cannot provide protection against Rowhammer. Due to the even larger number of bit flips in current DDR4 devices, we believe that ECC cannot provide complete protection against Rowhammer but just makes exploitation harder.</p>



<p><strong>What if my system runs with a double refresh rate?</strong><br>Besides an increased performance overhead and power consumption, previous work (e.g.,&nbsp;<a href="https://arxiv.org/abs/1904.09724" target="_blank" rel="noreferrer noopener">Mutlu et al.</a>&nbsp;and&nbsp;<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9152631" target="_blank" rel="noreferrer noopener">Frigo et al.</a>) showed that doubling the refresh rate is a weak solution not providing complete protection.</p>



<h2>Responsible Disclosure</h2>



<p>Rowhammer is a known industry-wide issue, and we did not see a need to go through the typical disclosure process. Nonetheless, we informed AMD on February 26, 2024, and at their request, we did not publicly disclose the issue until March 25, 2024. This page was briefly online by mistake on March 21.</p>



<h2>Acknowledgments</h2>



<p>This research was supported by the Swiss National Science Foundation (SNSF) under NCCR Automation, grant agreement 51NF40_180545, by the Swiss State Secretariat for Education, Research and Innovation under contract number MB22.00057 (ERC-StG PROMISE), and by a Microsoft Swiss JRC grant.</p>



<figure><img fetchpriority="high" decoding="async" width="493" height="102" src="https://comsec.ethz.ch/wp-content/uploads/2021/11/nccr-logo.png" alt="" srcset="https://comsec.ethz.ch/wp-content/uploads/2021/11/nccr-logo.png 493w, https://comsec.ethz.ch/wp-content/uploads/2021/11/nccr-logo-300x62.png 300w" sizes="(max-width: 493px) 100vw, 493px"></figure>
					</div><!-- .entry-content -->
				</article><!-- #post -->
							<!-- If has sidebar start -->
		</div>
				<!-- If has sidebar end -->
		</main><!-- .site-main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Tracecat – Open-source security alert automation / SOAR alternative (102 pts)]]></title>
            <link>https://github.com/TracecatHQ/tracecat</link>
            <guid>39819458</guid>
            <pubDate>Mon, 25 Mar 2024 18:05:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/TracecatHQ/tracecat">https://github.com/TracecatHQ/tracecat</a>, See on <a href="https://news.ycombinator.com/item?id=39819458">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
  <p dir="auto"><h2 tabindex="-1" dir="auto">
    Open source Tines / Splunk SOAR alternative
  </h2><a id="user-content-----open-source-tines--splunk-soar-alternative--" aria-label="Permalink: 
    Open source Tines / Splunk SOAR alternative
  " href="#----open-source-tines--splunk-soar-alternative--"></a></p>
  <p><a target="_blank" rel="noopener noreferrer" href="https://github.com/TracecatHQ/tracecat/blob/main/img/banner.svg"><img src="https://github.com/TracecatHQ/tracecat/raw/main/img/banner.svg" alt="tracecat"></a>
</p></div>

<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/af1ef7f76a45db6652237b7dee0587e5b37d8f65075e6689310e2ec2c4daa227/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75653f7374796c653d666f722d7468652d6261646765266c6f676f3d617061636865"><img src="https://camo.githubusercontent.com/af1ef7f76a45db6652237b7dee0587e5b37d8f65075e6689310e2ec2c4daa227/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75653f7374796c653d666f722d7468652d6261646765266c6f676f3d617061636865" alt="License" data-canonical-src="https://img.shields.io/badge/License-Apache%202.0-blue?style=for-the-badge&amp;logo=apache"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6c26a017b8cecb2296adc66f54bf18616ab09f50829f16566600d30d62f9887c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f547261636563617448512f74726163656361743f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562"><img src="https://camo.githubusercontent.com/6c26a017b8cecb2296adc66f54bf18616ab09f50829f16566600d30d62f9887c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f547261636563617448512f74726163656361743f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562" alt="Commit Activity" data-canonical-src="https://img.shields.io/github/commit-activity/m/TracecatHQ/tracecat?style=for-the-badge&amp;logo=github"></a>
<a href="https://docs.tracecat.com/" rel="nofollow"><img src="https://camo.githubusercontent.com/29aac5757906875ba739ee3b20119878796e795f3118736c8c8727b88cb8f1d4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d617661696c61626c652d626c75653f7374796c653d666f722d7468652d6261646765266c6f676f436f6c6f723d7768697465" alt="Docs" data-canonical-src="https://img.shields.io/badge/Docs-available-blue?style=for-the-badge&amp;logoColor=white"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bad4f2eb8bf92e1146448fd81c4ffbfdacd4ddcffbae47d9cae1cda7e6e5bc77/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742e6a732d2532333030303030302e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"><img src="https://camo.githubusercontent.com/bad4f2eb8bf92e1146448fd81c4ffbfdacd4ddcffbae47d9cae1cda7e6e5bc77/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742e6a732d2532333030303030302e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465" alt="Next.js" data-canonical-src="https://img.shields.io/badge/next.js-%23000000.svg?style=for-the-badge&amp;logo=next.js&amp;logoColor=white"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6d56faef03529ac56db4d6f0945f8deff412674e8ce7a77791fd7e41b771ac4b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466173744150492d3030353537313f7374796c653d666f722d7468652d6261646765266c6f676f3d66617374617069"><img src="https://camo.githubusercontent.com/6d56faef03529ac56db4d6f0945f8deff412674e8ce7a77791fd7e41b771ac4b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466173744150492d3030353537313f7374796c653d666f722d7468652d6261646765266c6f676f3d66617374617069" alt="FastAPI" data-canonical-src="https://img.shields.io/badge/FastAPI-005571?style=for-the-badge&amp;logo=fastapi"></a>
<a href="https://docs.pydantic.dev/latest/contributing/#badges" rel="nofollow"><img src="https://camo.githubusercontent.com/b89d5c844ea712be5f9eea1aef2457593316392df08a9e517bc128538eb4ab39/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f7374796c653d666f722d7468652d62616467652675726c3d68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f707964616e7469632f707964616e7469632f6d61696e2f646f63732f62616467652f76322e6a736f6e" alt="Pydantic v2" data-canonical-src="https://img.shields.io/endpoint?style=for-the-badge&amp;url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v2.json"></a>
<a href="https://discord.gg/n3GF4qxFU8" rel="nofollow"><img src="https://camo.githubusercontent.com/0536520f04c43165102009e15d1dd11a79cd4915eea490a745b396dc64ee60f1/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f313231323534383039373632343930333638312e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465" alt="Discord" data-canonical-src="https://img.shields.io/discord/1212548097624903681.svg?style=for-the-badge&amp;logo=discord&amp;logoColor=white"></a></p>
<p dir="auto"><em>Disclaimer: Tracecat is currently in public alpha. If you'd like to use Tracecat in production, please reach out to us on Discord or <a href="mailto:founders@tracecat.com">founders@tracecat.com</a>!</em>
<em>Want to take Tracecat for a spin? Try out our <a href="https://docs.tracecat.com/quickstart" rel="nofollow">tutorials</a> with <a href="https://platform.tracecat.com/" rel="nofollow">Tracecat Cloud</a> or <a href="https://docs.tracecat.com/installation" rel="nofollow">self-hosted</a>.</em></p>
<p dir="auto"><a href="https://tracecat.com/" rel="nofollow">Tracecat</a> is an open source automation platform for security teams. We're building the features of Tines / Splunk SOAR with:</p>
<ul dir="auto">
<li>Enterprise-grade open source tools</li>
<li>Open source AI infra and GPT models</li>
<li><a href="#faq">Practitioner-obsessed UI/UX</a></li>
</ul>
<p dir="auto">It's designed to be simple but powerful. Security automation should be accessible to everyone, <del>including</del> especially understaffed small-to-mid sized teams.</p>
<p dir="auto">Check out our <a href="https://docs.tracecat.com/quickstart" rel="nofollow">quickstart</a> and build your first AI workflow in 15 minutes.
The easiest way to get started is to sign-up for <a href="https://platform.tracecat.com/" rel="nofollow">Tracecat Cloud</a>.
We also support <a href="https://docs.tracecat.com/installation" rel="nofollow">self-hosted</a> Tracecat.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/46541035/315307510-52b822a9-fbd5-4f08-a4ec-54e8fd1b8f02.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE0MDQzMDUsIm5iZiI6MTcxMTQwNDAwNSwicGF0aCI6Ii80NjU0MTAzNS8zMTUzMDc1MTAtNTJiODIyYTktZmJkNS00ZjA4LWE0ZWMtNTRlOGZkMWI4ZjAyLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDIyMDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUzNDVkN2Q5YjhiZmNhYTgzN2FiYTM0ZjhjNTBhYWFkZTAzZmIyZTZiNzM0OWZhMzdjYTdlYzYxMmY2MDJkY2YmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.6n3Q2l3lb3_b4uM--HXS8-tZ_jpvzMW4rgedFK3hmHY"><img src="https://private-user-images.githubusercontent.com/46541035/315307510-52b822a9-fbd5-4f08-a4ec-54e8fd1b8f02.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE0MDQzMDUsIm5iZiI6MTcxMTQwNDAwNSwicGF0aCI6Ii80NjU0MTAzNS8zMTUzMDc1MTAtNTJiODIyYTktZmJkNS00ZjA4LWE0ZWMtNTRlOGZkMWI4ZjAyLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDIyMDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUzNDVkN2Q5YjhiZmNhYTgzN2FiYTM0ZjhjNTBhYWFkZTAzZmIyZTZiNzM0OWZhMzdjYTdlYzYxMmY2MDJkY2YmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.6n3Q2l3lb3_b4uM--HXS8-tZ_jpvzMW4rgedFK3hmHY" alt="autocomplete_gif" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<p dir="auto">Let's automate a phishing email investigation, collect evidence, and generate a remediation plan using AI.
You can follow the <a href="https://docs.tracecat.com/quickstart" rel="nofollow">tutorial here</a>.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description phishing.mov">phishing.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/46541035/315292776-580149cf-624b-4815-a62a-e59bbf61280e.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE0MDQzMDUsIm5iZiI6MTcxMTQwNDAwNSwicGF0aCI6Ii80NjU0MTAzNS8zMTUyOTI3NzYtNTgwMTQ5Y2YtNjI0Yi00ODE1LWE2MmEtZTU5YmJmNjEyODBlLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDIyMDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWNiMThmYjIyYzc0NjY4NTgzMDYzNmJhZTAxZjkzMDc5MWVmNzliMjNhODU3OTNhZmY5ZjJiZjVmMGU5YmZmMjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.e0i4TCEwbzDMxuaEclcCxiOaNDJxmA30EyGtfNYatpQ" data-canonical-src="https://private-user-images.githubusercontent.com/46541035/315292776-580149cf-624b-4815-a62a-e59bbf61280e.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE0MDQzMDUsIm5iZiI6MTcxMTQwNDAwNSwicGF0aCI6Ii80NjU0MTAzNS8zMTUyOTI3NzYtNTgwMTQ5Y2YtNjI0Yi00ODE1LWE2MmEtZTU5YmJmNjEyODBlLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDIyMDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWNiMThmYjIyYzc0NjY4NTgzMDYzNmJhZTAxZjkzMDc5MWVmNzliMjNhODU3OTNhZmY5ZjJiZjVmMGU5YmZmMjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.e0i4TCEwbzDMxuaEclcCxiOaNDJxmA30EyGtfNYatpQ" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto">Build AI-assisted workflows, enrich alerts, and close cases fast.</p>
<ul dir="auto">
<li>Workflows
<ul>
<li> Drag-and-drop builder</li>
<li> Core primitives (webhook, HTTP, if-else, send email, etc.)</li>
<li> AI Actions (label, summarize, enrich etc.)</li>
<li> Secrets</li>
<li> Batch-stream data transforms (expected April 2024)</li>
<li> Formulas (expected May 2024)</li>
<li> Versioning (expected June 2024)</li>
</ul>
</li>
<li>Case management
<ul>
<li> <a href="https://www.rapid7.com/blog/post/2021/02/12/talkin-smac-alert-labeling-and-why-it-matters/" rel="nofollow">SMAC (status, malice, action, context)</a></li>
<li> Suppression</li>
<li> Deduplication (expected 1st week April)</li>
<li> AI-assisted labelling (e.g. MITRE ATT&amp;CK)</li>
<li> Metrics</li>
<li> Analytics dashboard</li>
</ul>
</li>
<li>Event logs
<ul>
<li> Unlimited logs storage</li>
<li> Logs search</li>
<li> Visual detection rules</li>
<li> Piped query language</li>
</ul>
</li>
<li>Data validation
<ul>
<li> <a href="https://github.com/pydantic/pydantic">Pydantic V2</a> for fast data model and input / output validation in the backend</li>
<li> <a href="https://github.com/colinhacks/zod">Zod</a> for fast form and input / output validation in the frontend</li>
</ul>
</li>
<li>Teams
<ul>
<li> Collaboration</li>
<li> Tenants</li>
</ul>
</li>
<li>AI infrastructure
<ul>
<li> Vector database for RAG</li>
<li> LLM evaluation and security</li>
<li> Bring-your-own LLM (OpenAI, Mistral, Anthropic etc.)</li>
</ul>
</li>
</ul>
<p dir="auto">Tracecat is <strong>not</strong> a 1-to-1 mapping of Tines / Splunk SOAR. Our aim is to give technical teams a Tines-like experience, but with a focus on open source and AI features. <a href="#what-does-ai-native-mean">What do we mean by AI-native?</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Tracecat is Cloud agnostic and deploys anywhere that supports Docker.
Learn how to <a href="https://docs.tracecat.com/installation" rel="nofollow">install Tracecat locally</a>.</p>
<ul>
<li> Authentication
<ul>
<li> Supabase</li>
<li> Auth.js</li>
<li> Supertokens</li>
</ul>
</li>
<li> Deployment
<ul>
<li> Docker Compose</li>
<li> AWS</li>
<li> Azure</li>
<li> GCP</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Is Tracecat enterprise ready?</h2><a id="user-content-is-tracecat-enterprise-ready" aria-label="Permalink: Is Tracecat enterprise ready?" href="#is-tracecat-enterprise-ready"></a></p>
<p dir="auto"><em>We are currently in Public Alpha. We don't recommend using Tracecat for production until Public Beta is out! Nevertheless, we are building remarkably fast and expect to get there in the next 3-4 months.</em></p>
<p dir="auto">There are two "flavors" of Tracecat.
Tracecat Embedded, which runs on a single instance and scales vertically, and Tracecat Distributed, which scales horizontally with self-healing / resillience.
Tracecat Embedded is designed to run automation workflows, store event logs, and run search queries with <em>extreme</em> efficiency on a single instance (e.g. EC2, laptop).</p>
<p dir="auto">Embedded Tracecat should already scale beyond Tines' free tier (3 workflows, 500 workflow runs daily) given sufficient memory, cpu, and network capacity.
With Tracecat on <a href="https://github.com/quickwit-oss/quickwit">Quickwit</a>, you can also store events logs in S3 at unlimited scale and time length.</p>
<p dir="auto">For enterprise use-cases that require 99.99% SLAs, however, we recommend waiting for Tracecat Distributed!</p>
<ul>
<li> Embedded architecture
<ul>
<li> Flunk: homegrown workflow engine based on Flink</li>
<li> LanceDB</li>
<li> Polars</li>
<li> Tantivy</li>
</ul>
</li>
<li> Distributed architecture
<ul>
<li> Apache Flink</li>
<li> LanceDB / Lantern</li>
<li> Quickwit</li>
</ul>
</li>
</ul>
<p dir="auto">If you'd like to stress test Tracecat, please ping us on <a href="https://discord.gg/n3GF4qxFU8" rel="nofollow">Discord</a> and we can help you get started!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Status</h2><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<ul>
<li> Public Alpha: Anyone can sign up over at <a href="https://tracecat.com/" rel="nofollow">tracecat.com</a> but go easy on us, there are kinks and we are just getting started.</li>
<li> Public Beta: Stable enough for most non-enteprise use-cases</li>
<li> Public: Production-ready</li>
</ul>
<p dir="auto">We're currently in Public Alpha.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Community &amp; Support</h2><a id="user-content-community--support" aria-label="Permalink: Community &amp; Support" href="#community--support"></a></p>
<p dir="auto">Join us in building a newer, more open, kind of automation platform.</p>
<ul dir="auto">
<li><a href="https://discord.gg/n3GF4qxFU8" rel="nofollow">Tracecat Discord</a> for hanging out with the community</li>
<li><a href="https://github.com/TracecatHQ/tracecat/issues">GitHub issues</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Integrations and pre-built workflows</h2><a id="user-content-integrations-and-pre-built-workflows" aria-label="Permalink: Integrations and pre-built workflows" href="#integrations-and-pre-built-workflows"></a></p>
<p dir="auto">We are working hard to reach core feature parity with Tines. Integrations and out-of-the-box automations will be prioritized according to user feedback. If you've got any suggestions, please let us know on <a href="https://discord.gg/n3GF4qxFU8" rel="nofollow">Discord</a> 🦾.</p>
<p dir="auto">Here are a few integrations on our roadmap:</p>
<ul>
<li> Slack</li>
<li> Microsoft Teams</li>
<li> GitHub</li>
<li> CrowdStrike</li>
<li> Terraform</li>
<li> AWS CloudTrail</li>
<li> Vanta</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Security</h2><a id="user-content-security" aria-label="Permalink: Security" href="#security"></a></p>
<p dir="auto">Looking to report a security vulnerability? Please don't post about it in GitHub issue. Instead, refer to our <a href="https://github.com/TracecatHQ/tracecat/blob/main/SECURITY.md">SECURITY.md</a> file.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What does it mean to be "practitioner-obsessed"?</h3><a id="user-content-what-does-it-mean-to-be-practitioner-obsessed" aria-label="Permalink: What does it mean to be &quot;practitioner-obsessed&quot;?" href="#what-does-it-mean-to-be-practitioner-obsessed"></a></p>
<p dir="auto">Core features, user-interfaces, and day-to-day workflows are based on existing best-practices from <a href="https://medium.com/brexeng/elevating-security-alert-management-using-automation-828004ad596c" rel="nofollow">best-in-class security teams</a>. We won't throw in a Clippy chatbot just for the sake of it.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Does the world really need another SOAR?</h3><a id="user-content-does-the-world-really-need-another-soar" aria-label="Permalink: Does the world really need another SOAR?" href="#does-the-world-really-need-another-soar"></a></p>
<ul dir="auto">
<li>Big enterprise SOARs are too expensive. They also lack transparency regarding their AI features.</li>
<li>Open source SOARs were popular two years ago, but failed to mature from side-projects into enterprise-ready software.</li>
<li>Most SIEMs are bundled with a SOAR, but lack flexibility for security teams (e.g. MSSPs) that work across multiple SIEMs or no SIEM at all.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Why build open source?</h3><a id="user-content-why-build-open-source" aria-label="Permalink: Why build open source?" href="#why-build-open-source"></a></p>
<ul dir="auto">
<li>We love using and building open source tools.</li>
<li>Existing "AI" security products hide behind demo-ware, sales calls, and white papers. We want to build in the open: open community, open tutorials, and open vision.</li>
<li>Create a safe space for practitioners to experiment with open source AI models in their own isolated environments.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">What does AI-native mean?</h3><a id="user-content-what-does-ai-native-mean" aria-label="Permalink: What does AI-native mean?" href="#what-does-ai-native-mean"></a></p>
<p dir="auto">We believe the most useful AI is "boring AI" (e.g. summarization, semantic search, data enrichment, labelling) that integrates with existing workflows, but with modern UI/UX and robust data engineering.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Whether it's big or small, we love contributions.
There's plenty of opportunity for new integrations and bug fixes.
The best way to get started is to ping us on <a href="https://discord.gg/n3GF4qxFU8" rel="nofollow">Discord</a>!</p>






<p dir="auto"><h2 tabindex="-1" dir="auto">Open source vs paid</h2><a id="user-content-open-source-vs-paid" aria-label="Permalink: Open source vs paid" href="#open-source-vs-paid"></a></p>
<p dir="auto">The Tracecat codebase is 100% open source under Apache-2.0. This includes (soon-to-be-built) enterprise features such as SSO and multi-tenancy. We offer a paid Cloud version for small-to-mid sized teams. Moreover, we plan to charge service fees to enterprises that want to deploy and maintain a self-hosted distributed version of Tracecat.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto"><a href="https://github.com/TracecatHQ/tracecat/blob/main/LICENSE">Apache-2.0</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Jampack – Optimizes static websites as a post-processing step (224 pts)]]></title>
            <link>https://github.com/divriots/jampack</link>
            <guid>39816836</guid>
            <pubDate>Mon, 25 Mar 2024 14:32:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/divriots/jampack">https://github.com/divriots/jampack</a>, See on <a href="https://news.ycombinator.com/item?id=39816836">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div data-snippet-clipboard-copy-content="     __                                    __    
    |__|____    _____ ___________    ____ |  | __
    |  \__  \  /     \\____ \__  \ _/ ___\|  |/ /
    |  |/ __ \|  Y Y  \  |_> > __ \\  \___|    < 
/\__|  (____  /__|_|  /   __(____  /\___  >__|_ \
\______|    \/      \/|  |       \/     \/     \/
                      |__|" dir="auto"><pre><code>     __                                    __    
    |__|____    _____ ___________    ____ |  | __
    |  \__  \  /     \\____ \__  \ _/ ___\|  |/ /
    |  |/ __ \|  Y Y  \  |_&gt; &gt; __ \\  \___|    &lt; 
/\__|  (____  /__|_|  /   __(____  /\___  &gt;__|_ \
\______|    \/      \/|  |       \/     \/     \/
                      |__|
</code></pre></div>
<p dir="auto"><a href="https://npmjs.org/package/@divriots/jampack" rel="nofollow"><img src="https://camo.githubusercontent.com/1d3c695f1ca57a09187080e07acf43d57e2861fe0fa06331359950484729bc6a/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4064697672696f74732f6a616d7061636b" alt="npm version" data-canonical-src="https://img.shields.io/npm/v/@divriots/jampack"></a>
<a href="https://discord.gg/XkQxSU9" rel="nofollow"><img src="https://camo.githubusercontent.com/316f69525b52e7b6fc90424f682bd2c466a40fe26411d8ee7fa4147f1b2c9c43/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d646973636f72642d626c75653f7374796c653d666c6174266c6f676f3d646973636f7264" alt="Discord" data-canonical-src="https://img.shields.io/badge/chat-discord-blue?style=flat&amp;logo=discord"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Jampack</h2><a id="user-content-jampack" aria-label="Permalink: Jampack" href="#jampack"></a></p>
<p dir="auto">Optimizes static websites for best user experience and best Core Web Vitals scores.</p>
<div id="user-content-banner" dir="auto">
  <p>Brought to you by</p>
  <p><a href="https://divriots.com/#gh-light-mode-only" rel="nofollow">
    <img width="150" height="40" src="https://camo.githubusercontent.com/27fdc92c0985aa84cb930a93146946b89343dec326efbd7deb745e5d2560d41e/68747470733a2f2f64697652494f54532e636f6d2f64697672696f74732e737667" alt="‹div›RIOTS" data-canonical-src="https://divRIOTS.com/divriots.svg">
  </a>
  <a href="https://divriots.com/#gh-dark-mode-only" rel="nofollow">
    <img width="150" height="40" src="https://camo.githubusercontent.com/3947853a249b0138849daec6b552c319436b10139013b9c8376912499b10c9dc/68747470733a2f2f64697652494f54532e636f6d2f64697672696f74732d6461726b2e737667" alt="‹div›RIOTS" data-canonical-src="https://divRIOTS.com/divriots-dark.svg">
  </a>
</p></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">What is <code>jampack</code>?</h2><a id="user-content-what-is-jampack" aria-label="Permalink: What is jampack?" href="#what-is-jampack"></a></p>
<blockquote>
<p dir="auto">Not a bundler. Not a framework.</p>
</blockquote>
<p dir="auto"><code>jampack</code> is a post-processing tool that takes the output of your <a href="https://jamstack.org/generators/" rel="nofollow">Static Site Generator (aka SSG)</a> and optimizes it for best user experience and best <a href="https://web.dev/learn-core-web-vitals/" rel="nofollow">Core Web Vitals</a> scores.</p>
<p dir="auto"><a href="https://divriots.com/blog/introducing-jampack/" rel="nofollow">Read the introduction blog post</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What can <code>jampack</code> do?</h2><a id="user-content-what-can-jampack-do" aria-label="Permalink: What can jampack do?" href="#what-can-jampack-do"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>&lt;img&gt;</code></h3><a id="user-content-img" aria-label="Permalink: <img>" href="#img"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<img src=&quot;./redpanda.jpg&quot; alt=&quot;Red panda&quot;>"><pre><span>&lt;</span><span>img</span> <span>src</span>="<span>./redpanda.jpg</span>" <span>alt</span>="<span>Red panda</span>"<span>&gt;</span></pre></div>
<p dir="auto">becomes responsive with dimensions:</p>
<div dir="auto" data-snippet-clipboard-copy-content="<img src=&quot;./redpanda.jpg.webp&quot; alt=&quot;Red panda&quot; 
     srcset=&quot;
     ./redpanda.jpg.webp 3872w, ./redpanda@3572w.jpg.webp 3572w, ./redpanda@3272w.jpg.webp 3272w, 
     ./redpanda@2972w.jpg.webp 2972w, ./redpanda@2672w.jpg.webp 2672w, ./redpanda@2372w.jpg.webp 2372w,
     ./redpanda@2072w.jpg.webp 2072w, ./redpanda@1772w.jpg.webp 1772w, ./redpanda@1472w.jpg.webp 1472w,
     ./redpanda@1172w.jpg.webp 1172w, ./redpanda@872w.jpg.webp 872w&quot;
     sizes=&quot;100vw&quot;
     loading=&quot;lazy&quot;
     decoding=&quot;async&quot;
     width=&quot;3872&quot; 
     height=&quot;2592&quot;>"><pre><span>&lt;</span><span>img</span> <span>src</span>="<span>./redpanda.jpg.webp</span>" <span>alt</span>="<span>Red panda</span>" 
     <span>srcset</span>="<span></span>
<span>     ./redpanda.jpg.webp 3872w, ./redpanda@3572w.jpg.webp 3572w, ./redpanda@3272w.jpg.webp 3272w, </span>
<span>     ./redpanda@2972w.jpg.webp 2972w, ./redpanda@2672w.jpg.webp 2672w, ./redpanda@2372w.jpg.webp 2372w,</span>
<span>     ./redpanda@2072w.jpg.webp 2072w, ./redpanda@1772w.jpg.webp 1772w, ./redpanda@1472w.jpg.webp 1472w,</span>
<span>     ./redpanda@1172w.jpg.webp 1172w, ./redpanda@872w.jpg.webp 872w</span>"
     <span>sizes</span>="<span>100vw</span>"
     <span>loading</span>="<span>lazy</span>"
     <span>decoding</span>="<span>async</span>"
     <span>width</span>="<span>3872</span>" 
     <span>height</span>="<span>2592</span>"<span>&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>&lt;picture&gt;</code></h3><a id="user-content-picture" aria-label="Permalink: <picture>" href="#picture"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<picture>
    <img src=&quot;./redpanda.jpg&quot; alt=&quot;Red panda&quot;>
</picture>"><pre><span>&lt;</span><span>picture</span><span>&gt;</span>
    <span>&lt;</span><span>img</span> <span>src</span>="<span>./redpanda.jpg</span>" <span>alt</span>="<span>Red panda</span>"<span>&gt;</span>
<span>&lt;/</span><span>picture</span><span>&gt;</span></pre></div>
<p dir="auto">becomes responsive with multiple formats including AVIF:</p>
<div dir="auto" data-snippet-clipboard-copy-content="<picture>
    <source type=&quot;image/avif&quot; 
            srcset=&quot;./redpanda@1936w.avif 1936w, ./redpanda@1636w.avif 1636w,
                    ./redpanda@1336w.avif 1336w, ./redpanda@1036w.avif 1036w,
                    ./redpanda@736w.avif 736w&quot;>
    <source type=&quot;image/webp&quot; 
            srcset=&quot;./redpanda@1936w.webp 1936w, ./redpanda@1636w.webp 1636w,
                    ./redpanda@1336w.webp 1336w, ./redpanda@1036w.webp 1036w,
                    ./redpanda@736w.webp 736w&quot;>
    <img src=&quot;./redpanda.jpg&quot; 
         alt=&quot;Red panda&quot; 
         loading=&quot;lazy&quot; 
         decoding=&quot;async&quot; 
         width=&quot;1936&quot; 
         height=&quot;1296&quot; 
         srcset=&quot;./redpanda.jpg 1936w, ./redpanda@1636w.jpg 1636w,
                 ./redpanda@1336w.jpg 1336w, ./redpanda@1036w.jpg 1036w,
                 ./redpanda@736w.jpg 736w&quot;
         sizes=&quot;100vw&quot;>
</picture>"><pre><span>&lt;</span><span>picture</span><span>&gt;</span>
    <span>&lt;</span><span>source</span> <span>type</span>="<span>image/avif</span>" 
            <span>srcset</span>="<span>./redpanda@1936w.avif 1936w, ./redpanda@1636w.avif 1636w,</span>
<span>                    ./redpanda@1336w.avif 1336w, ./redpanda@1036w.avif 1036w,</span>
<span>                    ./redpanda@736w.avif 736w</span>"<span>&gt;</span>
    <span>&lt;</span><span>source</span> <span>type</span>="<span>image/webp</span>" 
            <span>srcset</span>="<span>./redpanda@1936w.webp 1936w, ./redpanda@1636w.webp 1636w,</span>
<span>                    ./redpanda@1336w.webp 1336w, ./redpanda@1036w.webp 1036w,</span>
<span>                    ./redpanda@736w.webp 736w</span>"<span>&gt;</span>
    <span>&lt;</span><span>img</span> <span>src</span>="<span>./redpanda.jpg</span>" 
         <span>alt</span>="<span>Red panda</span>" 
         <span>loading</span>="<span>lazy</span>" 
         <span>decoding</span>="<span>async</span>" 
         <span>width</span>="<span>1936</span>" 
         <span>height</span>="<span>1296</span>" 
         <span>srcset</span>="<span>./redpanda.jpg 1936w, ./redpanda@1636w.jpg 1636w,</span>
<span>                 ./redpanda@1336w.jpg 1336w, ./redpanda@1036w.jpg 1036w,</span>
<span>                 ./redpanda@736w.jpg 736w</span>"
         <span>sizes</span>="<span>100vw</span>"<span>&gt;</span>
<span>&lt;/</span><span>picture</span><span>&gt;</span></pre></div>
<p dir="auto"><a href="https://github.com/divriots/jampack/blob/main/features/optimize-images">Read more</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">CDN images become responsive</h3><a id="user-content-cdn-images-become-responsive" aria-label="Permalink: CDN images become responsive" href="#cdn-images-become-responsive"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<img
      src=&quot;https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&quot;
      alt=&quot;Clouds in the sky by Taylor Van Riper&quot;
      width=&quot;2848&quot;
      height=&quot;4272&quot;
    />"><pre><span>&lt;</span><span>img</span>
      <span>src</span>="<span>https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D</span>"
      <span>alt</span>="<span>Clouds in the sky by Taylor Van Riper</span>"
      <span>width</span>="<span>2848</span>"
      <span>height</span>="<span>4272</span>"
    /&gt;</pre></div>
<p dir="auto">becomes</p>
<div dir="auto" data-snippet-clipboard-copy-content="<img
      src=&quot;https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&quot;
      alt=&quot;Clouds in the sky by Taylor Van Riper&quot;
      width=&quot;2848&quot;
      height=&quot;4272&quot;
      loading=&quot;lazy&quot;
      decoding=&quot;async&quot;
      srcset=&quot;
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=2848&amp;amp;fit=min&amp;amp;auto=format 2848w,
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=2548&amp;amp;fit=min&amp;amp;auto=format 2548w,
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=2248&amp;amp;fit=min&amp;amp;auto=format 2248w,
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1948&amp;amp;fit=min&amp;amp;auto=format 1948w,
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1648&amp;amp;fit=min&amp;amp;auto=format 1648w,
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1348&amp;amp;fit=min&amp;amp;auto=format 1348w,
        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1048&amp;amp;fit=min&amp;amp;auto=format 1048w
      &quot;
      sizes=&quot;100vw&quot;
    />"><pre><span>&lt;</span><span>img</span>
      <span>src</span>="<span>https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D</span>"
      <span>alt</span>="<span>Clouds in the sky by Taylor Van Riper</span>"
      <span>width</span>="<span>2848</span>"
      <span>height</span>="<span>4272</span>"
      <span>loading</span>="<span>lazy</span>"
      <span>decoding</span>="<span>async</span>"
      <span>srcset</span>="<span></span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=2848&amp;amp;fit=min&amp;amp;auto=format 2848w,</span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=2548&amp;amp;fit=min&amp;amp;auto=format 2548w,</span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=2248&amp;amp;fit=min&amp;amp;auto=format 2248w,</span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1948&amp;amp;fit=min&amp;amp;auto=format 1948w,</span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1648&amp;amp;fit=min&amp;amp;auto=format 1648w,</span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1348&amp;amp;fit=min&amp;amp;auto=format 1348w,</span>
<span>        https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;amp;w=1048&amp;amp;fit=min&amp;amp;auto=format 1048w</span>
<span>      </span>"
      <span>sizes</span>="<span>100vw</span>"
    /&gt;</pre></div>
<p dir="auto"><a href="https://github.com/divriots/jampack/blob/main/features/optimize-images-cdn">Read more</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">External images can be downloaded and optimized</h3><a id="user-content-external-images-can-be-downloaded-and-optimized" aria-label="Permalink: External images can be downloaded and optimized" href="#external-images-can-be-downloaded-and-optimized"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<img
     src=&quot;https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=jpg&amp;fit=crop&amp;w=1287&amp;q=80&quot;
     alt=&quot;Clouds in the sky by Taylor Van Riper&quot;
/>"><pre><span>&lt;</span><span>img</span>
     <span>src</span>="<span>https://images.unsplash.com/photo-1513002749550-c59d786b8e6c?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=jpg&amp;fit=crop&amp;w=1287&amp;q=80</span>"
     <span>alt</span>="<span>Clouds in the sky by Taylor Van Riper</span>"
/&gt;</pre></div>
<p dir="auto">becomes</p>
<div dir="auto" data-snippet-clipboard-copy-content="<img
     src=&quot;_jampack/ab99b9d280ce4cf7cfc810b59f3a7739.jpg.webp&quot;
     alt=&quot;Clouds in the sky by Taylor Van Riper&quot;
     loading=&quot;lazy&quot;
     decoding=&quot;async&quot;
     width=&quot;1287&quot;
     height=&quot;1931&quot;
     srcset=&quot;
        _jampack/ab99b9d280ce4cf7cfc810b59f3a7739.jpg.webp  1287w,
        _jampack/ab99b9d280ce4cf7cfc810b59f3a7739@987w.webp  987w,
        _jampack/ab99b9d280ce4cf7cfc810b59f3a7739@687w.webp  687w
     &quot;
     sizes=&quot;100vw&quot;
    />"><pre><span>&lt;</span><span>img</span>
     <span>src</span>="<span>_jampack/ab99b9d280ce4cf7cfc810b59f3a7739.jpg.webp</span>"
     <span>alt</span>="<span>Clouds in the sky by Taylor Van Riper</span>"
     <span>loading</span>="<span>lazy</span>"
     <span>decoding</span>="<span>async</span>"
     <span>width</span>="<span>1287</span>"
     <span>height</span>="<span>1931</span>"
     <span>srcset</span>="<span></span>
<span>        _jampack/ab99b9d280ce4cf7cfc810b59f3a7739.jpg.webp  1287w,</span>
<span>        _jampack/ab99b9d280ce4cf7cfc810b59f3a7739@987w.webp  987w,</span>
<span>        _jampack/ab99b9d280ce4cf7cfc810b59f3a7739@687w.webp  687w</span>
<span>     </span>"
     <span>sizes</span>="<span>100vw</span>"
    /&gt;</pre></div>
<p dir="auto"><a href="https://github.com/divriots/jampack/blob/main/features/optimize-images-external">Read more</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Above &amp; below-the-fold</h3><a id="user-content-above--below-the-fold" aria-label="Permalink: Above &amp; below-the-fold" href="#above--below-the-fold"></a></p>
<p dir="auto"><code>jampack</code> optimizes assets above-the-fold ⬆️.</p>
<ul dir="auto">
<li>Images are loaded with higher priority.</li>
<li>Images are compress as Progressive JPEG.</li>
<li>Small images are embedded in HTML.</li>
</ul>
<p dir="auto">Lazy-load assets below-the-fold ⬇️.</p>
<ul dir="auto">
<li>Images and Iframes are lazy loaded.</li>
</ul>
<p dir="auto"><a href="https://jampack.divriots.com/features/optimize-above-the-fold/" rel="nofollow">Read more</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Inline critical CSS</h2><a id="user-content-inline-critical-css" aria-label="Permalink: Inline critical CSS" href="#inline-critical-css"></a></p>
<p dir="auto">Avoid <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content" rel="nofollow">FOUC</a> while stylesheets are downloaded and parsed.
<code>jampack</code> will inline critical CSS and lazy-load the rest of CSS.</p>
<p dir="auto"><a href="https://jampack.divriots.com/features/inline-critical-css/" rel="nofollow">Read more</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Prefetch links</h2><a id="user-content-prefetch-links" aria-label="Permalink: Prefetch links" href="#prefetch-links"></a></p>
<p dir="auto">Speedup the future page navigations by prefetching the links on the page.
Thanks to <a href="https://github.com/GoogleChromeLabs/quicklink">quicklink</a>, this can be done dynamically as links enter the viewport.</p>
<p dir="auto"><a href="https://jampack.divriots.com/features/prefetch-links/" rel="nofollow">Read more</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">All assets are compressed</h3><a id="user-content-all-assets-are-compressed" aria-label="Permalink: All assets are compressed" href="#all-assets-are-compressed"></a></p>
<p dir="auto">In a 2nd PASS, <code>jampack</code> compresses all untouched assets and keep the same name and the same format.</p>
<table>
<thead>
<tr>
<th>Extension</th>
<th>Compressor</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.html</code>,<code>.htm</code></td>
<td><a href="https://github.com/terser/html-minifier-terser"><code>html-minifier-terser</code></a></td>
</tr>
<tr>
<td><code>.css</code></td>
<td><a href="https://lightningcss.dev/" rel="nofollow"><code>lightningCSS</code></a></td>
</tr>
<tr>
<td><code>.js</code></td>
<td><a href="https://esbuild.github.io/" rel="nofollow"><code>esbuild</code></a> or <a href="https://swc.rs/" rel="nofollow"><code>swc</code></a></td>
</tr>
<tr>
<td><code>.svg</code></td>
<td><a href="https://github.com/svg/svgo"><code>svgo</code></a></td>
</tr>
<tr>
<td><code>.jpg</code>,<code>.jpeg</code></td>
<td><a href="https://sharp.pixelplumbing.com/" rel="nofollow"><code>sharp</code></a></td>
</tr>
<tr>
<td><code>.png</code></td>
<td><a href="https://sharp.pixelplumbing.com/" rel="nofollow"><code>sharp</code></a></td>
</tr>
<tr>
<td><code>.webp</code></td>
<td><a href="https://sharp.pixelplumbing.com/" rel="nofollow"><code>sharp</code></a></td>
</tr>
<tr>
<td><code>.avif</code></td>
<td><a href="https://sharp.pixelplumbing.com/" rel="nofollow"><code>sharp</code></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://jampack.divriots.com/" rel="nofollow">And a lot more!</a></h3><a id="user-content-and-a-lot-more" aria-label="Permalink: And a lot more!" href="#and-a-lot-more"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick use</h2><a id="user-content-quick-use" aria-label="Permalink: Quick use" href="#quick-use"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Optimize static website in `dist` folder
npx @divriots/jampack ./dist"><pre><span><span>#</span> Optimize static website in `dist` folder</span>
npx @divriots/jampack ./dist</pre></div>
<p dir="auto">For more options see <a href="https://jampack.divriots.com/cli-options/" rel="nofollow">CLI options</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><code>jampack</code> used in the wild</h2><a id="user-content-jampack-used-in-the-wild" aria-label="Permalink: jampack used in the wild" href="#jampack-used-in-the-wild"></a></p>
<ul dir="auto">
<li>Powering all <a href="https://divriots.com/" rel="nofollow">‹div›RIOTS</a>' websites</li>
<li><a href="https://keycloak.ch/" rel="nofollow">keycloak.ch</a></li>
<li><a href="https://bayjs.org/" rel="nofollow">bayjs.org</a></li>
<li><a href="https://qwind.pages.dev/" rel="nofollow">qwind.pages.dev</a></li>
<li><a href="https://bloycey.blog/" rel="nofollow">Bloycey's Blog</a></li>
<li><a href="https://gxanshu.in/" rel="nofollow">gxanshu.in</a></li>
<li><a href="https://cloudcannon.com/" rel="nofollow">cloudcannon.com</a></li>
</ul>
<blockquote>
<p dir="auto">Add yours here</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why is it called <code>jampack</code>?</h2><a id="user-content-why-is-it-called-jampack" aria-label="Permalink: Why is it called jampack?" href="#why-is-it-called-jampack"></a></p>
<ul dir="auto">
<li><code>jam</code>: From <a href="https://en.wikipedia.org/wiki/Jamstack" rel="nofollow">Jamstack</a>.</li>
<li><code>pack</code>: Reminescent of the <a href="https://en.wikipedia.org/wiki/Executable_compression#List_of_executable_packers" rel="nofollow">Executable Packers</a> from the 90s.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This software is released under the terms of the <a href="https://github.com/divriots/jampack/blob/main/LICENSE">MIT license</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[For Brilliant Color: Packaging the First LSD Blotter (153 pts)]]></title>
            <link>https://thereader.mitpress.mit.edu/for-brilliant-color-packaging-the-first-lsd-blotter/</link>
            <guid>39816423</guid>
            <pubDate>Mon, 25 Mar 2024 14:01:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thereader.mitpress.mit.edu/for-brilliant-color-packaging-the-first-lsd-blotter/">https://thereader.mitpress.mit.edu/for-brilliant-color-packaging-the-first-lsd-blotter/</a>, See on <a href="https://news.ycombinator.com/item?id=39816423">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container"><article><p>Eric Ghost's cleverly disguised LSD packaging mirrored the 1960s counterculture's psychedelic vision.</p><figure><img width="700" height="420" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/lsd-lead-700x420.jpg" alt="" decoding="async" fetchpriority="high"></figure><p>The image that follows is not of actual Kodak film but rather of a clever and gently satiric stealth packaging for underground LSD made by the New Yorker Eric Ghost — aka Eric Brown — in 1968. Ghost first took LSD in the Lower East Side around 1965, after a peripatetic life of military service, armed robbery, and prison. He swallowed nearly 4,000 micrograms, or mics, of pure Sandoz, smeared across a sugar cube, and the thermonuclear revelation occasioned by this enormous dose convinced him to co-found the Psychedelicatessen, a legendary though short-lived head shop that opened on 164 Avenue A in 1966. Like many acid people at the time, Ghost was messianic about the molecule and its potential to improve people and the world. Once LSD was banned, he decided to start cooking and distributing the material himself.</p><figure><img decoding="async" width="1000" height="1295" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/kodak.jpg" alt=""></figure><p>In contrast to today, when psychedelics are imagined to be medicines, party favors, or indigenous sacraments, many LSD users in the 1960s imagined their favorite substance as a kind of media. Like the increasingly technological media of the postwar world, LSD filters, transforms, and amplifies non-drug phenomena. Ghost played with this association by disguising his acid as film stock promising “brilliant color.” Each sheet was wrapped inside mylar, which not only protected the acid from damaging UV light, but also discouraged suspicious parties from opening the package on a whim, potentially destroying unexposed film. This “medium is the message” idea permeated acid discourse and marketing. Other examples include “Window pane,” “Clearlist,” and some of the first printed LSD blotters, which featured electric light bulbs.</p><div><figure><img decoding="async" width="787" height="242" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/100-exposures.jpg" alt=""></figure></div><div><figure><img loading="lazy" decoding="async" width="100" height="100" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/arrow.jpg" alt=""></figure></div><p>Ghost’s stealth packaging contained a novel and significant development in LSD distribution: the first mechanically produced examples of blotter paper dosed with drops of LSD. Liquid LSD had been placed on actual blotting paper and other paper products before, but these transfers would occur one drop at a time, using a pipette or eye-dropper. Ghost and a colleague accelerated this process by designing and building the Mark I, a device that allowed 100 pins to be dipped simultaneously into a pan of LSD in solution, and then moved as a single unit and impressed simultaneously onto a single absorbent piece of paper. The pins, and the dosed paper that resulted, followed a compact grid, which took the form of five tight rows of 20 columns each — the “5-20” pattern slyly referred to above. Each one of the Ghost’s drops contained a hefty 1,000 mics of LSD, which were left to the distributor or client to manually cut into four smaller hits, each packing a still solid 250 mic punch. This arrangement — the “four-way” — would recur throughout the history of blotter.</p><figure><img loading="lazy" decoding="async" width="922" height="566" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/Historic-Factors.jpg" alt=""></figure><div><figure><img loading="lazy" decoding="async" width="100" height="100" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/arrow.jpg" alt=""></figure></div><p>Opening Ghost’s package, purchasers would discover a handy information sheet that today gives us a sense of how some underground purveyors understood and promoted their wares. Rather than hippie mysticism or revolutionary cant, Ghost’s text presents LSD as a scientific product of a modern research lab run by a pharmaceutical corporation. Though LSD was related to an organic material — the ergot fungus on rye — part of the drug’s curious profile emerged from its origins at the heart of European technological modernity. Though some of Ghost’s information is off (LSD is not chemically similar to mescaline), it demonstrates the nerdy fascination that was always part of modern psychedelic culture.</p><figure><img loading="lazy" decoding="async" width="869" height="306" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/psychological-effect.jpg" alt=""></figure><div><figure><img loading="lazy" decoding="async" width="100" height="100" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/arrow.jpg" alt=""></figure></div><p>The most dominant and consistent idea in postwar psychedelic culture and research, still widely used today, is the role of “set and setting” in influencing the experience. Though trumpeted by Timothy Leary and his co-authors in the 1964 book “The Psychedelic Experience,” the notion that LSD reflects and amplifies internal attitudes and environment cues had been recognized by researchers and users in the 1950s. This recursive effect helps explain the wide variety and plasticity of psychedelic effects, as well as the importance of the cultural stories that surround these compounds — expanded consciousness in the 1960s; cluster headaches and PTSD today. Even in those hedonistic and experimental eras, though, the important role of the guide was recognized.</p><figure><img loading="lazy" decoding="async" width="876" height="272" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/research.jpg" alt=""></figure><div><figure><img loading="lazy" decoding="async" width="100" height="100" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2024/03/arrow.jpg" alt=""></figure></div><p>Today’s clinical and therapeutic promoters of the “psychedelic renaissance” often present themselves as novel pioneers. Ghost’s text reminds us that the 1960s research community had already explored many clinical applications of LSD — for alcoholism, pain and anxiety among cancer patients, psychological repression, and even the challenges of autism. At the same time, the mention of LSD as a possible “cure” for homosexuality — something that was explored earlier in the 1960s by Timothy Leary and Richard Alpert, who later embraced his gay identity — reminds us of the distortion inherent in such research agendas, as well as LSD’s darker legacy as an agent of behavioral modification.</p><hr><p><em><strong>Erik Davis</strong> is a scholar, award-winning journalist, and speaker whose writing has ranged from rock criticism to media studies to creative explorations of esoteric mysticism. He is the author of, among other books, “<a href="https://mitpress.mit.edu/9781907222870/high-weirdness/" target="_blank">High Weirdness: Drugs, Esoterica, and Visionary Experience in the Seventies</a>” and “<a href="https://mitpress.mit.edu/9780262048507/blotter/" target="_blank">Blotter: The Untold Story of an Acid Medium</a>.”</em></p></article><div><p><strong>The MIT Press</strong> is a mission-driven, not-for-profit scholarly publisher. Your support helps make it possible for us to create open publishing models and produce books of superior design quality.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Nano-web – a low latency one binary webserver designed for serving SPAs (141 pts)]]></title>
            <link>https://github.com/radiosilence/nano-web</link>
            <guid>39815976</guid>
            <pubDate>Mon, 25 Mar 2024 13:23:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/radiosilence/nano-web">https://github.com/radiosilence/nano-web</a>, See on <a href="https://news.ycombinator.com/item?id=39815976">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">nano-web</h2><a id="user-content-nano-web" aria-label="Permalink: nano-web" href="#nano-web"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/radiosilence/nano-web/actions/workflows/publish-container.yml/badge.svg"><img src="https://github.com/radiosilence/nano-web/actions/workflows/publish-container.yml/badge.svg" alt="publish-container"></a></p>
<p dir="auto">Hyper-minimal low-latency webserver for serving SPAs and static content based on fasthttp.</p>
<ul dir="auto">
<li>Precaches, templates, compresses all resources into memory at startup to reduce latency.</li>
<li>Brotli and gzip compression.</li>
<li>Designed to work as a docker base image or as a nanovm unikernel.</li>
<li>Includes runtime templating of environment variables (configurable prefix).</li>
<li>Index pages so works nicely with things like Astro from the get-go.</li>
<li>SPA mode to service 404s as index (200) to support client side routing.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Config as ENV</h2><a id="user-content-config-as-env" aria-label="Permalink: Config as ENV" href="#config-as-env"></a></p>
<ul dir="auto">
<li><code>PORT</code> The port to listen on. Defaults to <code>80</code></li>
<li><code>SPA_MODE</code> when set to <code>1</code> 404 request will return <code>/public/index.html</code> as a <code>200</code>.</li>
<li><code>CONFIG_PREFIX</code> will set the prefix to scan environment variables in order to enable runtime config. Defaults to <code>VITE_</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Docker Quick Start</h2><a id="user-content-docker-quick-start" aria-label="Permalink: Docker Quick Start" href="#docker-quick-start"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="
FROM ghcr.io/radiosilence/nano-web:latest
COPY ./dist /public/
ENV PORT=8081
ENV SPA_MODE=1
"><pre><span>FROM</span> ghcr.io/radiosilence/nano-web:latest
<span>COPY</span> ./dist /public/
<span>ENV</span> PORT=8081
<span>ENV</span> SPA_MODE=1
</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Nanos/OPS Quick Start</h2><a id="user-content-nanosops-quick-start" aria-label="Permalink: Nanos/OPS Quick Start" href="#nanosops-quick-start"></a></p>
<p dir="auto">You'll want a <code>config.json</code> for your project that looks something like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="{
  &quot;Dirs&quot;: [&quot;public&quot;],
  &quot;Env&quot;: {
    &quot;SPA_MODE&quot;: &quot;1&quot;,
    &quot;PORT&quot;: &quot;8081&quot;
  },
  &quot;RunConfig&quot;: {
    &quot;Ports&quot;: [&quot;8081&quot;]
  }
}"><pre>{
  <span>"Dirs"</span>: [<span><span>"</span>public<span>"</span></span>],
  <span>"Env"</span>: {
    <span>"SPA_MODE"</span>: <span><span>"</span>1<span>"</span></span>,
    <span>"PORT"</span>: <span><span>"</span>8081<span>"</span></span>
  },
  <span>"RunConfig"</span>: {
    <span>"Ports"</span>: [<span><span>"</span>8081<span>"</span></span>]
  }
}</pre></div>
<p dir="auto">Make sure your public files are in a <code>./public</code> directory relative to CWD.</p>
<p dir="auto">Then you can run this command to build your image:</p>
<div data-snippet-clipboard-copy-content="ops image create -c config.json --package radiosilence/nano-web:latest -i my-website"><pre><code>ops image create -c config.json --package radiosilence/nano-web:latest -i my-website
</code></pre></div>
<p dir="auto">Then run locally to test:</p>
<div data-snippet-clipboard-copy-content="ops instance create my-website -c ./config.json --port 8081"><pre><code>ops instance create my-website -c ./config.json --port 8081
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Runtime config for SPAs</h2><a id="user-content-runtime-config-for-spas" aria-label="Permalink: Runtime config for SPAs" href="#runtime-config-for-spas"></a></p>
<p dir="auto"><strong>THIS IS NOT INTENDED FOR STORING SECRETS, ALL VARIABLES WILL BE PUBLIC TO CLIENT</strong></p>
<p dir="auto">If are using <code>SPA_MODE</code> and you have set <code>CONFIG_PREFIX</code>, or use variables starting with <code>VITE_</code> by default, the server will
allow injection of environment variables at runtime, which is useful for configuring dynamically changing API urls, client IDs,
etc, in a dynamically scaling/routing environment such as Kubernetes.</p>
<p dir="auto">Here's an example <code>index.html</code> that utilises this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="<!DOCTYPE html>
<html lang=&quot;en&quot; data-theme=&quot;cf&quot;>
  <head>
    <script>
      window.RUNTIME_ENV = &quot;{{.EscapedJson}}&quot;;
    </script>
  </head>
</html>"><pre><span>&lt;!DOCTYPE html<span>&gt;</span></span>
<span>&lt;</span><span>html</span> <span>lang</span>="<span>en</span>" <span>data-theme</span>="<span>cf</span>"<span>&gt;</span>
  <span>&lt;</span><span>head</span><span>&gt;</span>
    <span>&lt;</span><span>script</span><span>&gt;</span>
      <span>window</span><span>.</span><span>RUNTIME_ENV</span> <span>=</span> <span>"{{.EscapedJson}}"</span><span>;</span>
    <span>&lt;/</span><span>script</span><span>&gt;</span>
  <span>&lt;/</span><span>head</span><span>&gt;</span>
<span>&lt;/</span><span>html</span><span>&gt;</span></pre></div>
<p dir="auto">And your client side TS which is safe to be bundled:</p>
<div dir="auto" data-snippet-clipboard-copy-content="let runtimeEnv: Record<string, string> = {};
try {
  runtimeEnv = JSON.parse((window as any).RUNTIME_ENV ?? &quot;{}&quot;);
} catch {
  // do nothing
}"><pre><span>let</span> <span>runtimeEnv</span>: <span>Record</span><span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>&gt;</span> <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>try</span> <span>{</span>
  <span>runtimeEnv</span> <span>=</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span><span>(</span><span>window</span> <span>as</span> <span>any</span><span>)</span><span>.</span><span>RUNTIME_ENV</span> <span>??</span> <span>"{}"</span><span>)</span><span>;</span>
<span>}</span> <span>catch</span> <span>{</span>
  <span>// do nothing</span>
<span>}</span></pre></div>
<p dir="auto">In this way, you can reference these variables that can be set when the container is spun-up.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Barcelona’s Sagrada Familia will be completed in 2026 (398 pts)]]></title>
            <link>https://www.cnn.com/2024/03/25/travel/sagrada-familia-barcelona-completion-scli-intl/index.html</link>
            <guid>39815805</guid>
            <pubDate>Mon, 25 Mar 2024 13:06:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnn.com/2024/03/25/travel/sagrada-familia-barcelona-completion-scli-intl/index.html">https://www.cnn.com/2024/03/25/travel/sagrada-familia-barcelona-completion-scli-intl/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=39815805">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-editable="main" data-track-zone="main" data-reorderable="main">  <article data-uri="cms.cnn.com/_components/article/instances/clu6v6dch000kc1ql2kv5es48@published" role="main" data-unselectable="true" data-regwall-disabled="">
      
  <section data-tabcontent="Content">
    <main>
                <div data-image-variation="image" data-breakpoints="{&quot;image--eq-extra-small&quot;: 115, &quot;image--eq-small&quot;: 300}" data-uri="cms.cnn.com/_components/image/instances/clu6v9oi3000t356hwf7ranp5@published" data-name="2021-05-24T000000Z_1024312969_RC2GMN99OZQH_RTRMADP_3_HEALTH-CORONAVIRUS-SPAIN-SAGRADA-FAMILIA.JPG" data-component-name="image" data-observe-resizes="" data-original-ratio="0.694" data-original-height="1388" data-original-width="2000" data-url="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=original" data-editable="lede" data-freewheel-lede="true" data-optimizely-image="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=original" data-optimizely-caption="The landmark of Sagrada Familia basilica, called Facade of Passion is seen, closed since October of last year, delaying its target of finishing construction by 2026, amid the coronavirus disease (COVID-19) pandemic in Barcelona Spain, May 24, 2021. Picture taken May 24, 2021. REUTERS/Nacho Doce" data-optimizely-credit="Nacho Doce/Reuters">
       <picture><source height="383" width="680" media="(max-width: 479px)" srcset="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=16x9&amp;q=h_383,w_680,c_fill/f_webp" type="image/webp"><source height="653" width="1160" media="(min-width: 480px)" srcset="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=16x9&amp;q=h_653,w_1160,c_fill/f_webp" type="image/webp"><source height="605" width="1075" media="(min-width: 960px)" srcset="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=16x9&amp;q=h_605,w_1075,c_fill/f_webp" type="image/webp"><source height="833" width="1480" media="(min-width: 1280px)" srcset="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=16x9&amp;q=h_833,w_1480,c_fill/f_webp" type="image/webp"><img src="https://media.cnn.com/api/v1/images/stellar/prod/2021-05-24t000000z-1024312969-rc2gmn99ozqh-rtrmadp-3-health-coronavirus-spain-sagrada-familia.JPG?c=16x9" alt="The Sagrada Familia sits in the center of Barcelona." onload="this.classList.remove('image__dam-img--loading')" onerror="imageLoadError(this)" height="1388" width="2000"></picture>
    </div>
        
        
            <div data-editable="content" itemprop="articleBody" data-reorderable="content">
                    <p><cite>
      <span data-editable="location"></span>
      <span data-editable="source">CNN</span>
        &nbsp;—&nbsp;
    </cite>
</p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v6dch000jc1qlaxfbguz6@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            The <a href="https://www.cnn.com/travel/article/sagrada-familia-penultimate-towers-completed-intl-scli/index.html">Sagrada Fam</a><a href="https://www.cnn.com/travel/article/sagrada-familia-penultimate-towers-completed-intl-scli/index.html">ilia</a> in Barcelona will finally be finished in 2026, more than 140 years after construction started, officials have confirmed.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6vukxg0011356h2kr9ljrh@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            The construction of the last of six towers will mark the completion of the structure of the basilica, the organization responsible for managing the site announced last week.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v7hus0002356h57y89iam@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            “The Chapel of the Assumption is expected to be finished in 2025 and the tower of Jesus Christ, in 2026,” the Sagrada Familia said in a statement announcing the publication of its 2023 annual report.
    </p>

<div data-image-variation="image" data-breakpoints="{&quot;image--eq-extra-small&quot;: 115, &quot;image--eq-small&quot;: 300}" data-uri="cms.cnn.com/_components/image/instances/clu6vaksa000z356hhn8kjk4w@published" data-name="GettyImages-1247780774.jpg" data-component-name="image" data-observe-resizes="" data-original-ratio="0.666" data-original-height="1332" data-original-width="2000" data-url="https://media.cnn.com/api/v1/images/stellar/prod/gettyimages-1247780774.jpg?c=original" data-editable="settings">
       <picture><img src="https://media.cnn.com/api/v1/images/stellar/prod/gettyimages-1247780774.jpg?c=original" alt="A scene of the interior of the Sagrada Familia during a mass to consecrate the cathedral in November 2010" onload="this.classList.remove('image__dam-img--loading')" onerror="imageLoadError(this)" height="1332" width="2000" loading="lazy"></picture>
    </div>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6wsy6s0015356htgpqxybm@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            The tower of Jesus Christ will stand at 172.5 meters (566 feet) tall, and will be finished with a 17-meter-tall (56-foot) four-armed cross, according to the cathedral.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6wr9sm0013356heu5t1itp@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            When complete, the Sagrada Familia will become the world’s tallest church, overtaking Ulm Minster in Germany.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v7px10005356hwi9k68m9@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            Construction began in 1882 according to a design spearheaded by celebrated Catalan architect Antoni Gaudí, who decided the monumental structure would have 18 huge, spindle-shaped towers, each symbolizing a different biblical figure—the 12 apostles, the four evangelists, the Virgin Mary and Jesus.
    </p>

<div data-image-variation="image" data-breakpoints="{&quot;image--eq-extra-small&quot;: 115, &quot;image--eq-small&quot;: 300}" data-uri="cms.cnn.com/_components/image/instances/clu6va5aw000v356h4vi6vlt7@published" data-name="GettyImages-154510598.jpg" data-component-name="image" data-observe-resizes="" data-original-ratio="0.697" data-original-height="1394" data-original-width="2000" data-url="https://media.cnn.com/api/v1/images/stellar/prod/gettyimages-154510598.jpg?c=original" data-editable="settings">
       <picture><img src="https://media.cnn.com/api/v1/images/stellar/prod/gettyimages-154510598.jpg?c=original" alt="The Sagrada Familia pictured in 1940" onload="this.classList.remove('image__dam-img--loading')" onerror="imageLoadError(this)" height="1394" width="2000" loading="lazy"></picture>
    </div>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v8k8j000h356hyjecmm9q@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            When Gaudí died in 1926,&nbsp;<a href="https://www.cnn.com/style/article/sagrada-familia-history-robots-test-of-time/index.html">only an estimated 10%-15% of the project had been built</a>, including one transept, a crypt and some of the apse wall.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v8xm1000j356hn31d6bd9@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            Construction, already slow, was interrupted in the late 1930s by the Spanish Civil War, when most of the designs and models of Gaudí— whose tomb lies beneath the cathedral—were destroyed.
    </p>

  


    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v8yvp000l356hr3jzn589@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            Current designs are based on surviving and reconstructed materials, as well as reimagined adaptations of the original.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v9986000n356hv5a8vl83@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            In 1984, the building was designated a UNESCO World Heritage site, and it was consecrated by Pope Benedict XVI for religious worship in 2010.
    </p>

    <p data-uri="cms.cnn.com/_components/paragraph/instances/clu6v9al2000p356hc2gin6kz@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
            The&nbsp;<a href="https://www.cnn.com/travel/article/spain-sagrada-familia-permit-intl/index.html">construction of the church was carried out illegally for 137 years</a>, until 2019, when a building permit was finally issued by Barcelona’s city council. Authorities only discovered the “anomaly” that it had never been granted planning permission in 2016.
    </p>

                </div>
    </main>
  </section>
</article>

</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boeing CEO Calhoun to step down at end of 2024 (191 pts)]]></title>
            <link>https://www.reuters.com/business/aerospace-defense/boeing-ceo-calhoun-step-down-2024-03-25/</link>
            <guid>39815408</guid>
            <pubDate>Mon, 25 Mar 2024 12:22:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/business/aerospace-defense/boeing-ceo-calhoun-step-down-2024-03-25/">https://www.reuters.com/business/aerospace-defense/boeing-ceo-calhoun-step-down-2024-03-25/</a>, See on <a href="https://news.ycombinator.com/item?id=39815408">Hacker News</a></p>
Couldn't get https://www.reuters.com/business/aerospace-defense/boeing-ceo-calhoun-step-down-2024-03-25/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[SPQR 1.3.0: a production-ready system for horizontal scaling of PostgreSQL (165 pts)]]></title>
            <link>https://github.com/pg-sharding/spqr/discussions/569</link>
            <guid>39814877</guid>
            <pubDate>Mon, 25 Mar 2024 11:24:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/pg-sharding/spqr/discussions/569">https://github.com/pg-sharding/spqr/discussions/569</a>, See on <a href="https://news.ycombinator.com/item?id=39814877">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="presentation" data-paste-markdown-skip="">
    <tbody data-target-translation-id="6418314" data-target-translation-type="discussion">
        <tr>
    <td>
        <p dir="auto">It's been a long time since the last SPQR release, and a lot of work has been done. Here's a brief review of what we've been working on.</p>
<p dir="auto"><strong>SPQR 2.0 news <a data-error-text="Failed to load title" data-id="6096868" data-permission-text="Title is private" data-url="https://github.com/pg-sharding/spqr/discussions/431" data-hovercard-type="discussion" data-hovercard-url="/pg-sharding/spqr/discussions/431/hovercard" href="https://github.com/pg-sharding/spqr/discussions/431">#431</a></strong><br>
In this release, we add new syntax to handle sharding configuration. To make all things work, you should create a distribution via <code>CREATE DISTRIBUTION</code> command. The next step is to specify a list of tables and columns via <code>ATTACH RELATION</code> command. At the end specify a list of ranges: which values to route to which shard via <code>CREATE KEY RANGE</code> command.  You can see an example at <a href="https://github.com/pg-sharding/spqr/blob/master/docs/Syntax.md">Syntax.md</a>. <code>SHARDING RULE</code> syntax is deprecated now.</p>
<p dir="auto"><strong>Extended Protocol improvements</strong><br>
We continue to work on the extended protocol support in SPQR. A lot of work has already been done, and in most cases, the router works correctly.</p>
<p dir="auto"><strong>Shards [re]balancing news</strong><br>
The essential part of our solution is smart shard rebalancing. We made the first version of this component (again). Data migration between shards aims to balance the workload across shards proportionally. The main idea is to minimize any locking impact during these migrations, which is accomplished by reducing the size of the data ranges being transferred.</p>
<p dir="auto">We still have a lot of room for improvement. The full list of changes can be found in the <a href="https://github.com/pg-sharding/spqr/releases/tag/1.3.0">release notes</a>. Stay tuned!</p>
    </td>
  </tr>

    </tbody>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EU Launches Probes into Apple, Meta, Google Under New Digital Competition Law (464 pts)]]></title>
            <link>https://www.wsj.com/tech/eu-launches-probes-into-apple-meta-google-under-new-digital-competition-law-4d383201</link>
            <guid>39814558</guid>
            <pubDate>Mon, 25 Mar 2024 10:38:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/tech/eu-launches-probes-into-apple-meta-google-under-new-digital-competition-law-4d383201">https://www.wsj.com/tech/eu-launches-probes-into-apple-meta-google-under-new-digital-competition-law-4d383201</a>, See on <a href="https://news.ycombinator.com/item?id=39814558">Hacker News</a></p>
Couldn't get https://www.wsj.com/tech/eu-launches-probes-into-apple-meta-google-under-new-digital-competition-law-4d383201: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Pyenv – lets you easily switch between multiple versions of Python (220 pts)]]></title>
            <link>https://github.com/pyenv/pyenv</link>
            <guid>39813883</guid>
            <pubDate>Mon, 25 Mar 2024 08:34:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a>, See on <a href="https://news.ycombinator.com/item?id=39813883">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Simple Python Version Management: pyenv</h2><a id="user-content-simple-python-version-management-pyenv" aria-label="Permalink: Simple Python Version Management: pyenv" href="#simple-python-version-management-pyenv"></a></p>
<p dir="auto"><a href="https://gitter.im/yyuu/pyenv?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/2da7039d862cabe847953554272000b86e80b158a0723c9a832720b935df3f43/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/yyuu/pyenv" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg"></a></p>
<p dir="auto">pyenv lets you easily switch between multiple versions of Python. It's
simple, unobtrusive, and follows the UNIX tradition of single-purpose
tools that do one thing well.</p>
<p dir="auto">This project was forked from <a href="https://github.com/rbenv/rbenv">rbenv</a> and
<a href="https://github.com/rbenv/ruby-build">ruby-build</a>, and modified for Python.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/pyenv/pyenv/blob/master/terminal_output.png"><img src="https://github.com/pyenv/pyenv/raw/master/terminal_output.png" alt="Terminal output example"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What pyenv <em>does...</em></h3><a id="user-content-what-pyenv-does" aria-label="Permalink: What pyenv does..." href="#what-pyenv-does"></a></p>
<ul dir="auto">
<li>Lets you <strong>change the global Python version</strong> on a per-user basis.</li>
<li>Provides support for <strong>per-project Python versions</strong>.</li>
<li>Allows you to <strong>override the Python version</strong> with an environment
variable.</li>
<li>Searches for commands from <strong>multiple versions of Python at a time</strong>.
This may be helpful to test across Python versions with <a href="https://pypi.python.org/pypi/tox" rel="nofollow">tox</a>.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">In contrast with pythonbrew and pythonz, pyenv <em>does not...</em></h3><a id="user-content-in-contrast-with-pythonbrew-and-pythonz-pyenv-does-not" aria-label="Permalink: In contrast with pythonbrew and pythonz, pyenv does not..." href="#in-contrast-with-pythonbrew-and-pythonz-pyenv-does-not"></a></p>
<ul dir="auto">
<li><strong>Depend on Python itself.</strong> pyenv was made from pure shell scripts.
There is no bootstrap problem of Python.</li>
<li><strong>Need to be loaded into your shell.</strong> Instead, pyenv's shim
approach works by adding a directory to your <code>PATH</code>.</li>
<li><strong>Manage virtualenv.</strong> Of course, you can create <a href="https://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a>
yourself, or <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>
to automate the process.</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Table of Contents</h2><a id="user-content-table-of-contents" aria-label="Permalink: Table of Contents" href="#table-of-contents"></a></p>
<ul dir="auto">
<li><strong><a href="#how-it-works">How It Works</a></strong>
<ul dir="auto">
<li><a href="#understanding-path">Understanding PATH</a></li>
<li><a href="#understanding-shims">Understanding Shims</a></li>
<li><a href="#understanding-python-version-selection">Understanding Python version selection</a></li>
<li><a href="#locating-pyenv-provided-python-installations">Locating Pyenv-provided Python Installations</a></li>
</ul>
</li>
<li><strong><a href="#installation">Installation</a></strong>
<ul dir="auto">
<li><a href="#getting-pyenv">Getting Pyenv</a>
<ul dir="auto">
<li><a href="#unixmacos">UNIX/MacOS</a>
<ul dir="auto">
<li><a href="#homebrew-in-macos">Homebrew in macOS</a></li>
<li><a href="#automatic-installer">Automatic installer</a></li>
<li><a href="#basic-github-checkout">Basic GitHub Checkout</a></li>
</ul>
</li>
<li><a href="#windows">Windows</a></li>
</ul>
</li>
<li><a href="#set-up-your-shell-environment-for-pyenv">Set up your shell environment for Pyenv</a></li>
<li><a href="#restart-your-shell">Restart your shell</a></li>
<li><a href="#install-python-build-dependencies">Install Python build dependencies</a></li>
</ul>
</li>
<li><strong><a href="#usage">Usage</a></strong>
<ul dir="auto">
<li><a href="#install-additional-python-versions">Install additional Python versions</a>
<ul dir="auto">
<li><a href="#prefix-auto-resolution-to-the-latest-version">Prefix auto-resolution to the latest version</a></li>
<li><a href="#python-versions-with-extended-support">Python versions with extended support</a></li>
</ul>
</li>
<li><a href="#switch-between-python-versions">Switch between Python versions</a></li>
<li><a href="#uninstall-python-versions">Uninstall Python versions</a></li>
<li><a href="#other-operations">Other operations</a></li>
</ul>
</li>
<li><a href="#upgrading">Upgrading</a>
<ul dir="auto">
<li><a href="#upgrading-with-homebrew">Upgrading with Homebrew</a></li>
<li><a href="#upgrading-with-installer-or-git-checkout">Upgrading with Installer or Git checkout</a></li>
</ul>
</li>
<li><a href="#uninstalling-pyenv">Uninstalling pyenv</a></li>
<li><a href="#pyenv-plugins">Pyenv plugins</a></li>
<li><a href="#advanced-configuration">Advanced Configuration</a>
<ul dir="auto">
<li><a href="#using-pyenv-without-shims">Using Pyenv without shims</a></li>
<li><a href="#environment-variables">Environment variables</a></li>
</ul>
</li>
<li><strong><a href="#development">Development</a></strong>
<ul dir="auto">
<li><a href="#contributing">Contributing</a></li>
<li><a href="#version-history">Version History</a></li>
<li><a href="#license">License</a></li>
</ul>
</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">How It Works</h2><a id="user-content-how-it-works" aria-label="Permalink: How It Works" href="#how-it-works"></a></p>
<p dir="auto">At a high level, pyenv intercepts Python commands using shim
executables injected into your <code>PATH</code>, determines which Python version
has been specified by your application, and passes your commands along
to the correct Python installation.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Understanding PATH</h3><a id="user-content-understanding-path" aria-label="Permalink: Understanding PATH" href="#understanding-path"></a></p>
<p dir="auto">When you run a command like <code>python</code> or <code>pip</code>, your operating system
searches through a list of directories to find an executable file with
that name. This list of directories lives in an environment variable
called <code>PATH</code>, with each directory in the list separated by a colon:</p>
<div data-snippet-clipboard-copy-content="/usr/local/bin:/usr/bin:/bin"><pre><code>/usr/local/bin:/usr/bin:/bin
</code></pre></div>
<p dir="auto">Directories in <code>PATH</code> are searched from left to right, so a matching
executable in a directory at the beginning of the list takes
precedence over another one at the end. In this example, the
<code>/usr/local/bin</code> directory will be searched first, then <code>/usr/bin</code>,
then <code>/bin</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Understanding Shims</h3><a id="user-content-understanding-shims" aria-label="Permalink: Understanding Shims" href="#understanding-shims"></a></p>
<p dir="auto">pyenv works by inserting a directory of <em>shims</em> at the front of your
<code>PATH</code>:</p>
<div data-snippet-clipboard-copy-content="$(pyenv root)/shims:/usr/local/bin:/usr/bin:/bin"><pre><code>$(pyenv root)/shims:/usr/local/bin:/usr/bin:/bin
</code></pre></div>
<p dir="auto">Through a process called <em>rehashing</em>, pyenv maintains shims in that
directory to match every Python command across every installed version
of Python—<code>python</code>, <code>pip</code>, and so on.</p>
<p dir="auto">Shims are lightweight executables that simply pass your command along
to pyenv. So with pyenv installed, when you run, say, <code>pip</code>, your
operating system will do the following:</p>
<ul dir="auto">
<li>Search your <code>PATH</code> for an executable file named <code>pip</code></li>
<li>Find the pyenv shim named <code>pip</code> at the beginning of your <code>PATH</code></li>
<li>Run the shim named <code>pip</code>, which in turn passes the command along to
pyenv</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Understanding Python version selection</h3><a id="user-content-understanding-python-version-selection" aria-label="Permalink: Understanding Python version selection" href="#understanding-python-version-selection"></a></p>
<p dir="auto">When you execute a shim, pyenv determines which Python version to use by
reading it from the following sources, in this order:</p>
<ol dir="auto">
<li>
<p dir="auto">The <code>PYENV_VERSION</code> environment variable (if specified). You can use
the <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell"><code>pyenv shell</code></a> command to set this environment
variable in your current shell session.</p>
</li>
<li>
<p dir="auto">The application-specific <code>.python-version</code> file in the current
directory (if present). You can modify the current directory's
<code>.python-version</code> file with the <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local"><code>pyenv local</code></a>
command.</p>
</li>
<li>
<p dir="auto">The first <code>.python-version</code> file found (if any) by searching each parent
directory, until reaching the root of your filesystem.</p>
</li>
<li>
<p dir="auto">The global <code>$(pyenv root)/version</code> file. You can modify this file using
the <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-global"><code>pyenv global</code></a> command.
If the global version file is not present, pyenv assumes you want to use the "system"
Python (see below).</p>
</li>
</ol>
<p dir="auto">A special version name "<code>system</code>" means to use whatever Python is found on <code>PATH</code>
after the shims <code>PATH</code> entry (in other words, whatever would be run if Pyenv
shims weren't on <code>PATH</code>). Note that Pyenv considers those installations outside
its control and does not attempt to inspect or distinguish them in any way.
So e.g. if you are on MacOS and have OS-bundled Python 3.8.9 and Homebrew-installed
Python 3.9.12 and 3.10.2 -- for Pyenv, this is still a single "<code>system</code>" version,
and whichever of those is first on <code>PATH</code> under the executable name you
specified will be run.</p>
<p dir="auto"><strong>NOTE:</strong> You can activate multiple versions at the same time, including multiple
versions of Python2 or Python3 simultaneously. This allows for parallel usage of
Python2 and Python3, and is required with tools like <code>tox</code>. For example, to instruct
Pyenv to first use your system Python and Python3 (which are e.g. 2.7.9 and 3.4.2)
but also have Python 3.3.6, 3.2.1, and 2.5.2 available, you first <code>pyenv install</code>
the missing versions, then set <code>pyenv global system 3.3.6 3.2.1 2.5.2</code>.
Then you'll be able to invoke any of those versions with an appropriate <code>pythonX</code> or
<code>pythonX.Y</code> name.
You can also specify multiple versions in a <code>.python-version</code> file by hand,
separated by newlines. Lines starting with a <code>#</code> are ignored.</p>
<p dir="auto"><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-which"><code>pyenv which &lt;command&gt;</code></a> displays which real executable would be
run when you invoke <code>&lt;command&gt;</code> via a shim.
E.g. if you have 3.3.6, 3.2.1 and 2.5.2 installed of which 3.3.6 and 2.5.2 are selected
and your system Python is 3.2.5,
<code>pyenv which python2.5</code> should display <code>$(pyenv root)/versions/2.5.2/bin/python2.5</code>,
<code>pyenv which python3</code> -- <code>$(pyenv root)/versions/3.3.6/bin/python3</code> and
<code>pyenv which python3.2</code> -- path to your system Python due to the fall-through (see below).</p>
<p dir="auto">Shims also fall through to anything further on <code>PATH</code> if the corresponding executable is
not present in any of the selected Python installations.
This allows you to use any programs installed elsewhere on the system as long as
they are not shadowed by a selected Python installation.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Locating Pyenv-provided Python installations</h3><a id="user-content-locating-pyenv-provided-python-installations" aria-label="Permalink: Locating Pyenv-provided Python installations" href="#locating-pyenv-provided-python-installations"></a></p>
<p dir="auto">Once pyenv has determined which version of Python your application has
specified, it passes the command along to the corresponding Python
installation.</p>
<p dir="auto">Each Python version is installed into its own directory under
<code>$(pyenv root)/versions</code>.</p>
<p dir="auto">For example, you might have these versions installed:</p>
<ul dir="auto">
<li><code>$(pyenv root)/versions/2.7.8/</code></li>
<li><code>$(pyenv root)/versions/3.4.2/</code></li>
<li><code>$(pyenv root)/versions/pypy-2.4.0/</code></li>
</ul>
<p dir="auto">As far as Pyenv is concerned, version names are simply directories under
<code>$(pyenv root)/versions</code>.</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Getting Pyenv</h3><a id="user-content-getting-pyenv" aria-label="Permalink: Getting Pyenv" href="#getting-pyenv"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">UNIX/MacOS</h4><a id="user-content-unixmacos" aria-label="Permalink: UNIX/MacOS" href="#unixmacos"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Homebrew in macOS</h5><a id="user-content-homebrew-in-macos" aria-label="Permalink: Homebrew in macOS" href="#homebrew-in-macos"></a></p>
<ol dir="auto">
<li>
<p dir="auto">Consider installing with <a href="https://brew.sh/" rel="nofollow">Homebrew</a>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="brew update
brew install pyenv"><pre>brew update
brew install pyenv</pre></div>
<p dir="auto">If you want to install (and update to) the latest development head of Pyenv
rather than the latest release, instead run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="brew install pyenv --head"><pre>brew install pyenv --head</pre></div>
</li>
<li>
<p dir="auto">Then follow the rest of the post-installation steps, starting with
<a href="#set-up-your-shell-environment-for-pyenv">Set up your shell environment for Pyenv</a>.</p>
</li>
<li>
<p dir="auto">OPTIONAL. To fix <code>brew doctor</code>'s warning <em>""config" scripts exist outside your system or Homebrew directories"</em></p>
<p dir="auto">If you're going to build Homebrew formulae from source that link against Python
like Tkinter or NumPy
<em>(This is only generally the case if you are a developer of such a formula,
or if you have an EOL version of MacOS for which prebuilt bottles are no longer provided
and you are using such a formula).</em></p>
<p dir="auto">To avoid them accidentally linking against a Pyenv-provided Python,
add the following line into your interactive shell's configuration:</p>
<ul dir="auto">
<li>
<p dir="auto">Bash/Zsh:</p>
<div dir="auto" data-snippet-clipboard-copy-content="alias brew='env PATH=&quot;${PATH//$(pyenv root)\/shims:/}&quot; brew'"><pre><span>alias</span> brew=<span><span>'</span>env PATH="${PATH//$(pyenv root)\/shims:/}" brew<span>'</span></span></pre></div>
</li>
<li>
<p dir="auto">Fish:</p>
<div dir="auto" data-snippet-clipboard-copy-content="alias brew=&quot;env PATH=(string replace (pyenv root)/shims '' \&quot;\$PATH\&quot;) brew&quot;"><pre><span>alias</span> brew=<span><span>"</span>env PATH=(string replace (pyenv root)/shims '' <span>\"\$</span>PATH<span>\"</span>) brew<span>"</span></span></pre></div>
</li>
</ul>
</li>
</ol>
<p dir="auto"><h5 tabindex="-1" dir="auto">Automatic installer</h5><a id="user-content-automatic-installer" aria-label="Permalink: Automatic installer" href="#automatic-installer"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="curl https://pyenv.run | bash"><pre>curl https://pyenv.run <span>|</span> bash</pre></div>
<p dir="auto">For more details visit our other project:
<a href="https://github.com/pyenv/pyenv-installer">https://github.com/pyenv/pyenv-installer</a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Basic GitHub Checkout</h5><a id="user-content-basic-github-checkout" aria-label="Permalink: Basic GitHub Checkout" href="#basic-github-checkout"></a></p>
<p dir="auto">This will get you going with the latest version of Pyenv and make it
easy to fork and contribute any changes back upstream.</p>
<ul dir="auto">
<li><strong>Check out Pyenv where you want it installed.</strong>
A good place to choose is <code>$HOME/.pyenv</code> (but you can install it somewhere else):
<div data-snippet-clipboard-copy-content="git clone https://github.com/pyenv/pyenv.git ~/.pyenv"><pre><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv
</code></pre></div>
</li>
<li>Optionally, try to compile a dynamic Bash extension to speed up Pyenv. Don't
worry if it fails; Pyenv will still work normally:
<div data-snippet-clipboard-copy-content="cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src"><pre><code>cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src
</code></pre></div>
</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Windows</h4><a id="user-content-windows" aria-label="Permalink: Windows" href="#windows"></a></p>
<p dir="auto">Pyenv does not officially support Windows and does not work in Windows outside
the Windows Subsystem for Linux.
Moreover, even there, the Pythons it installs are not native Windows versions
but rather Linux versions running in a virtual machine --
so you won't get Windows-specific functionality.</p>
<p dir="auto">If you're in Windows, we recommend using @kirankotari's <a href="https://github.com/pyenv-win/pyenv-win"><code>pyenv-win</code></a> fork --
which does install native Windows Python versions.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Set up your shell environment for Pyenv</h3><a id="user-content-set-up-your-shell-environment-for-pyenv" aria-label="Permalink: Set up your shell environment for Pyenv" href="#set-up-your-shell-environment-for-pyenv"></a></p>
<p dir="auto"><strong>Upgrade note:</strong> The startup logic and instructions have been updated for simplicity in 2.3.0.
The previous, more complicated configuration scheme for 2.0.0-2.2.5 still works.</p>
<ul dir="auto">
<li>Define environment variable <code>PYENV_ROOT</code> to point to the path where
Pyenv will store its data. <code>$HOME/.pyenv</code> is the default.
If you installed Pyenv via Git checkout, we recommend
to set it to the same location as where you cloned it.</li>
<li>Add the <code>pyenv</code> executable to your <code>PATH</code> if it's not already there</li>
<li>run <code>eval "$(pyenv init -)"</code> to install <code>pyenv</code> into your shell as a shell function, enable shims and autocompletion
<ul dir="auto">
<li>You may run <code>eval "$(pyenv init --path)"</code> instead to just enable shims, without shell integration</li>
</ul>
</li>
</ul>
<p dir="auto">The below setup should work for the vast majority of users for common use cases.
See <a href="#advanced-configuration">Advanced configuration</a> for details and more configuration options.</p>
<ul dir="auto">
<li>
<p dir="auto">For <strong>bash</strong>:</p>
<p dir="auto">Stock Bash startup files vary widely between distributions in which of them source
which, under what circumstances, in what order and what additional configuration they perform.
As such, the most reliable way to get Pyenv in all environments is to append Pyenv
configuration commands to both <code>.bashrc</code> (for interactive shells)
and the profile file that Bash would use (for login shells).</p>
<p dir="auto">First, add the commands to <code>~/.bashrc</code> by running the following in your terminal:</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo 'export PYENV_ROOT=&quot;$HOME/.pyenv&quot;' >> ~/.bashrc
echo 'command -v pyenv >/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' >> ~/.bashrc
echo 'eval &quot;$(pyenv init -)&quot;' >> ~/.bashrc"><pre><span>echo</span> <span><span>'</span>export PYENV_ROOT="$HOME/.pyenv"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.bashrc
<span>echo</span> <span><span>'</span>command -v pyenv &gt;/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.bashrc
<span>echo</span> <span><span>'</span>eval "$(pyenv init -)"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.bashrc</pre></div>
<p dir="auto">Then, if you have <code>~/.profile</code>, <code>~/.bash_profile</code> or <code>~/.bash_login</code>, add the commands there as well.
If you have none of these, add them to <code>~/.profile</code>.</p>
<ul dir="auto">
<li>
<p dir="auto">to add to <code>~/.profile</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo 'export PYENV_ROOT=&quot;$HOME/.pyenv&quot;' >> ~/.profile
echo 'command -v pyenv >/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' >> ~/.profile
echo 'eval &quot;$(pyenv init -)&quot;' >> ~/.profile"><pre><span>echo</span> <span><span>'</span>export PYENV_ROOT="$HOME/.pyenv"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.profile
<span>echo</span> <span><span>'</span>command -v pyenv &gt;/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.profile
<span>echo</span> <span><span>'</span>eval "$(pyenv init -)"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.profile</pre></div>
</li>
<li>
<p dir="auto">to add to <code>~/.bash_profile</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo 'export PYENV_ROOT=&quot;$HOME/.pyenv&quot;' >> ~/.bash_profile
echo '[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' >> ~/.bash_profile
echo 'eval &quot;$(pyenv init -)&quot;' >> ~/.bash_profile"><pre><span>echo</span> <span><span>'</span>export PYENV_ROOT="$HOME/.pyenv"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.bash_profile
<span>echo</span> <span><span>'</span>[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH="$PYENV_ROOT/bin:$PATH"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.bash_profile
<span>echo</span> <span><span>'</span>eval "$(pyenv init -)"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.bash_profile</pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto">For <strong>Zsh</strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo 'export PYENV_ROOT=&quot;$HOME/.pyenv&quot;' >> ~/.zshrc
echo '[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' >> ~/.zshrc
echo 'eval &quot;$(pyenv init -)&quot;' >> ~/.zshrc"><pre><span>echo</span> <span><span>'</span>export PYENV_ROOT="$HOME/.pyenv"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.zshrc
<span>echo</span> <span><span>'</span>[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH="$PYENV_ROOT/bin:$PATH"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.zshrc
<span>echo</span> <span><span>'</span>eval "$(pyenv init -)"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.zshrc</pre></div>
<p dir="auto">If you wish to get Pyenv in noninteractive login shells as well, also add the commands to <code>~/.zprofile</code> or <code>~/.zlogin</code>.</p>
</li>
<li>
<p dir="auto">For <strong>Fish shell</strong>:</p>
<p dir="auto">If you have Fish 3.2.0 or newer, execute this interactively:</p>
<div dir="auto" data-snippet-clipboard-copy-content="set -Ux PYENV_ROOT $HOME/.pyenv
fish_add_path $PYENV_ROOT/bin"><pre><span>set</span> <span>-Ux</span> PYENV_ROOT <span>$HOME</span>/.pyenv
fish_add_path <span>$PYENV_ROOT</span>/bin</pre></div>
<p dir="auto">Otherwise, execute the snippet below:</p>
<div dir="auto" data-snippet-clipboard-copy-content="set -Ux PYENV_ROOT $HOME/.pyenv
set -U fish_user_paths $PYENV_ROOT/bin $fish_user_paths"><pre><span>set</span> <span>-Ux</span> PYENV_ROOT <span>$HOME</span>/.pyenv
<span>set</span> <span>-U</span> fish_user_paths <span>$PYENV_ROOT</span>/bin <span>$fish_user_paths</span></pre></div>
<p dir="auto">Now, add this to <code>~/.config/fish/config.fish</code>:</p>

</li>
</ul>
<p dir="auto"><strong>Bash warning</strong>: There are some systems where the <code>BASH_ENV</code> variable is configured
to point to <code>.bashrc</code>. On such systems, you should almost certainly put the
<code>eval "$(pyenv init -)"</code> line into <code>.bash_profile</code>, and <strong>not</strong> into <code>.bashrc</code>. Otherwise, you
may observe strange behaviour, such as <code>pyenv</code> getting into an infinite loop.
See <a href="https://github.com/pyenv/pyenv/issues/264" data-hovercard-type="issue" data-hovercard-url="/pyenv/pyenv/issues/264/hovercard">#264</a> for details.</p>
<p dir="auto"><strong>Proxy note</strong>: If you use a proxy, export <code>http_proxy</code> and <code>https_proxy</code>, too.</p>
<p dir="auto">In MacOS, you might also want to install <a href="https://fig.io/" rel="nofollow">Fig</a> which
provides alternative shell completions for many command line tools with an
IDE-like popup interface in the terminal window.
(Note that their completions are independent from Pyenv's codebase
so they might be slightly out of sync for bleeding-edge interface changes.)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Restart your shell</h3><a id="user-content-restart-your-shell" aria-label="Permalink: Restart your shell" href="#restart-your-shell"></a></p>
<p dir="auto">for the <code>PATH</code> changes to take effect.</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Install Python build dependencies</h3><a id="user-content-install-python-build-dependencies" aria-label="Permalink: Install Python build dependencies" href="#install-python-build-dependencies"></a></p>
<p dir="auto"><a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment"><strong>Install Python build dependencies</strong></a>
before attempting to install a new Python version.</p>
<p dir="auto">You can now begin using Pyenv.</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install additional Python versions</h3><a id="user-content-install-additional-python-versions" aria-label="Permalink: Install additional Python versions" href="#install-additional-python-versions"></a></p>
<p dir="auto">To install additional Python versions, use <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-install"><code>pyenv install</code></a>.</p>
<p dir="auto">For example, to download and install Python 3.10.4, run:</p>

<p dir="auto">Running <code>pyenv install -l</code> gives the list of all available versions.</p>
<p dir="auto"><strong>NOTE:</strong> Most Pyenv-provided Python releases are source releases and are built
from source as part of installation (that's why you need Python build dependencies preinstalled).
You can pass options to Python's <code>configure</code> and compiler flags to customize the build,
see <a href="https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md#special-environment-variables"><em>Special environment variables</em> in Python-Build's README</a>
for details.</p>
<p dir="auto"><strong>NOTE:</strong> If you are having trouble installing a Python version,
please visit the wiki page about
<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems">Common Build Problems</a>.</p>
<p dir="auto"><strong>NOTE:</strong> If you want to use proxy for download, please set the <code>http_proxy</code> and <code>https_proxy</code>
environment variables.</p>
<p dir="auto"><strong>NOTE:</strong> If you'd like a faster interpreter at the cost of longer build times,
see <a href="https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md#building-for-maximum-performance"><em>Building for maximum performance</em> in Python-Build's README</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Prefix auto-resolution to the latest version</h4><a id="user-content-prefix-auto-resolution-to-the-latest-version" aria-label="Permalink: Prefix auto-resolution to the latest version" href="#prefix-auto-resolution-to-the-latest-version"></a></p>
<p dir="auto">All Pyenv subcommands except <code>uninstall</code> automatically resolve full prefixes to the latest version in the corresponding version line.</p>
<p dir="auto"><code>pyenv install</code> picks the latest known version, while other subcommands pick the latest installed version.</p>
<p dir="auto">E.g. to install and then switch to the latest 3.10 release:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pyenv install 3.10
pyenv global 3.10"><pre>pyenv install 3.10
pyenv global 3.10</pre></div>
<p dir="auto">You can run <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-latest"><code>pyenv latest -k &lt;prefix&gt;</code></a> to see how <code>pyenv install</code> would resolve a specific prefix, or <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-latest"><code>pyenv latest &lt;prefix&gt;</code></a> to see how other subcommands would resolve it.</p>
<p dir="auto">See the <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-latest"><code>pyenv latest</code> documentation</a> for details.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Python versions with extended support</h4><a id="user-content-python-versions-with-extended-support" aria-label="Permalink: Python versions with extended support" href="#python-versions-with-extended-support"></a></p>
<p dir="auto">For the following Python releases, Pyenv applies user-provided patches that add support for some newer environments.
Though we don't actively maintain those patches, since existing releases never change,
it's safe to assume that they will continue working until there are further incompatible changes
in a later version of those environments.</p>
<ul dir="auto">
<li><em>3.7.8-3.7.15, 3.8.4-3.8.12, 3.9.0-3.9.7</em> : XCode 13.3</li>
<li><em>3.5.10, 3.6.15</em> : MacOS 11+ and XCode 13.3</li>
<li><em>2.7.18</em> : MacOS 10.15+ and Apple Silicon</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Switch between Python versions</h3><a id="user-content-switch-between-python-versions" aria-label="Permalink: Switch between Python versions" href="#switch-between-python-versions"></a></p>
<p dir="auto">To select a Pyenv-installed Python as the version to use, run one
of the following commands:</p>
<ul dir="auto">
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell"><code>pyenv shell &lt;version&gt;</code></a> -- select just for current shell session</li>
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local"><code>pyenv local &lt;version&gt;</code></a> -- automatically select whenever you are in the current directory (or its subdirectories)</li>
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell"><code>pyenv global &lt;version&gt;</code></a> -- select globally for your user account</li>
</ul>
<p dir="auto">E.g. to select the above-mentioned newly-installed Python 3.10.4 as your preferred version to use:</p>

<p dir="auto">Now whenever you invoke <code>python</code>, <code>pip</code> etc., an executable from the Pyenv-provided
3.10.4 installation will be run instead of the system Python.</p>
<p dir="auto">Using "<code>system</code>" as a version name would reset the selection to your system-provided Python.</p>
<p dir="auto">See <a href="#understanding-shims">Understanding shims</a> and
<a href="#understanding-python-version-selection">Understanding Python version selection</a>
for more details on how the selection works and more information on its usage.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Uninstall Python versions</h3><a id="user-content-uninstall-python-versions" aria-label="Permalink: Uninstall Python versions" href="#uninstall-python-versions"></a></p>
<p dir="auto">As time goes on, you will accumulate Python versions in your
<code>$(pyenv root)/versions</code> directory.</p>
<p dir="auto">To remove old Python versions, use <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-uninstall"><code>pyenv uninstall &lt;versions&gt;</code></a>.</p>
<p dir="auto">Alternatively, you can simply <code>rm -rf</code> the directory of the version you want
to remove. You can find the directory of a particular Python version
with the <code>pyenv prefix</code> command, e.g. <code>pyenv prefix 2.6.8</code>.
Note however that plugins may run additional operations on uninstall
which you would need to do by hand as well. E.g. Pyenv-Virtualenv also
removes any virtual environments linked to the version being uninstalled.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Other operations</h3><a id="user-content-other-operations" aria-label="Permalink: Other operations" href="#other-operations"></a></p>
<p dir="auto">Run <code>pyenv commands</code> to get a list of all available subcommands.
Run a subcommand with <code>--help</code> to get help on it, or see the <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md">Commands Reference</a>.</p>
<p dir="auto">Note that Pyenv plugins that you install may add their own subcommands.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Upgrading</h2><a id="user-content-upgrading" aria-label="Permalink: Upgrading" href="#upgrading"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Upgrading with Homebrew</h3><a id="user-content-upgrading-with-homebrew" aria-label="Permalink: Upgrading with Homebrew" href="#upgrading-with-homebrew"></a></p>
<p dir="auto">If you've installed Pyenv using Homebrew, upgrade using:</p>

<p dir="auto">To switch from a release to the latest development head of Pyenv, use:</p>
<div dir="auto" data-snippet-clipboard-copy-content="brew uninstall pyenv
brew install pyenv --head"><pre>brew uninstall pyenv
brew install pyenv --head</pre></div>
<p dir="auto">then you can upgrade it with <code>brew upgrade pyenv</code> as usual.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Upgrading with Installer or Git checkout</h3><a id="user-content-upgrading-with-installer-or-git-checkout" aria-label="Permalink: Upgrading with Installer or Git checkout" href="#upgrading-with-installer-or-git-checkout"></a></p>
<p dir="auto">If you've installed Pyenv with Pyenv-installer, you likely have the
<a href="https://github.com/pyenv/pyenv-update">Pyenv-Update</a> plugin that would
upgrade Pyenv and all installed plugins:</p>

<p dir="auto">If you've installed Pyenv using Pyenv-installer or Git checkout, you can also
upgrade your installation at any time using Git.</p>
<p dir="auto">To upgrade to the latest development version of pyenv, use <code>git pull</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd $(pyenv root)
git pull"><pre><span>cd</span> <span><span>$(</span>pyenv root<span>)</span></span>
git pull</pre></div>
<p dir="auto">To upgrade to a specific release of Pyenv, check out the corresponding tag:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd $(pyenv root)
git fetch
git tag
git checkout v0.1.0"><pre><span>cd</span> <span><span>$(</span>pyenv root<span>)</span></span>
git fetch
git tag
git checkout v0.1.0</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Uninstalling pyenv</h2><a id="user-content-uninstalling-pyenv" aria-label="Permalink: Uninstalling pyenv" href="#uninstalling-pyenv"></a></p>
<p dir="auto">The simplicity of pyenv makes it easy to temporarily disable it, or
uninstall from the system.</p>
<ol dir="auto">
<li>
<p dir="auto">To <strong>disable</strong> Pyenv managing your Python versions, simply remove the
<code>pyenv init</code> invocations from your shell startup configuration. This will
remove Pyenv shims directory from <code>PATH</code>, and future invocations like
<code>python</code> will execute the system Python version, as it was before Pyenv.</p>
<p dir="auto"><code>pyenv</code> will still be accessible on the command line, but your Python
apps won't be affected by version switching.</p>
</li>
<li>
<p dir="auto">To completely <strong>uninstall</strong> Pyenv, remove <em>all</em> Pyenv configuration lines
from your shell startup configuration, and then remove
its root directory. This will <strong>delete all Python versions</strong> that were
installed under the <code>$(pyenv root)/versions/</code> directory:</p>

<p dir="auto">If you've installed Pyenv using a package manager, as a final step,
perform the Pyenv package removal. For instance, for Homebrew:</p>

</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Pyenv plugins</h2><a id="user-content-pyenv-plugins" aria-label="Permalink: Pyenv plugins" href="#pyenv-plugins"></a></p>
<p dir="auto">Pyenv provides a simple, flexible and maintainable way to extend and customize its functionality with plugins --
as simple as creating a plugin directory and dropping a shell script on a certain subpath of it
with whatever extra logic you need to be run at certain moments.</p>
<p dir="auto">See <a href="https://github.com/pyenv/pyenv/wiki/Plugins"><em>Plugins</em> on the wiki</a> on how to install and use plugins
as well as a catalog of some useful existing plugins for common needs.</p>
<p dir="auto">See <a href="https://github.com/pyenv/pyenv/wiki/Authoring-plugins"><em>Authoring plugins</em> on the wiki</a> on writing your own plugins.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Advanced Configuration</h2><a id="user-content-advanced-configuration" aria-label="Permalink: Advanced Configuration" href="#advanced-configuration"></a></p>
<p dir="auto">Skip this section unless you must know what every line in your shell
profile is doing.</p>
<p dir="auto">Also see the <a href="#environment-variables">Environment variables</a> section
for the environment variables that control Pyenv's behavior.</p>
<p dir="auto"><code>pyenv init</code> is the only command that crosses the line of loading
extra commands into your shell. Coming from RVM, some of you might be
opposed to this idea. Here's what <code>eval "$(pyenv init -)"</code> actually does:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Sets up the shims path.</strong> This is what allows Pyenv to intercept
and redirect invocations of <code>python</code>, <code>pip</code> etc. transparently.
It prepends <code>$(pyenv root)/shims</code> to your <code>$PATH</code>.
It also deletes any other instances of <code>$(pyenv root)/shims</code> on <code>PATH</code>
which allows to invoke <code>eval "$(pyenv init -)"</code> multiple times without
getting duplicate <code>PATH</code> entries.</p>
</li>
<li>
<p dir="auto"><strong>Installs autocompletion.</strong> This is entirely optional but pretty
useful. Sourcing <code>$(pyenv root)/completions/pyenv.bash</code> will set that
up. There are also completions for Zsh and Fish.</p>
</li>
<li>
<p dir="auto"><strong>Rehashes shims.</strong> From time to time you'll need to rebuild your
shim files. Doing this on init makes sure everything is up to
date. You can always run <code>pyenv rehash</code> manually.</p>
</li>
<li>
<p dir="auto"><strong>Installs <code>pyenv</code> into the current shell as a shell function.</strong>
This bit is also optional, but allows
pyenv and plugins to change variables in your current shell.
This is required for some commands like <code>pyenv shell</code> to work.
The sh dispatcher doesn't do
anything crazy like override <code>cd</code> or hack your shell prompt, but if
for some reason you need <code>pyenv</code> to be a real script rather than a
shell function, you can safely skip it.</p>
</li>
</ol>
<p dir="auto"><code>eval "$(pyenv init --path)"</code> only does items 1 and 3.</p>
<p dir="auto">To see exactly what happens under the hood for yourself, run <code>pyenv init -</code>
or <code>pyenv init --path</code>.</p>
<p dir="auto"><code>eval "$(pyenv init -)"</code> is supposed to run at any interactive shell's
startup (including nested shells -- e.g. those invoked from editors)
so that you get completion and convenience shell functions.</p>
<p dir="auto"><code>eval "$(pyenv init --path)"</code> can be used instead of <code>eval "$(pyenv init -)"</code>
to just enable shims, without shell integration. It can also be used to bump shims
to the front of <code>PATH</code> after some other logic has prepended stuff to <code>PATH</code>
that may shadow Pyenv's shims.</p>
<ul dir="auto">
<li>In particular, in Debian-based distributions, the stock <code>~/.profile</code>
prepends per-user <code>bin</code> directories to <code>PATH</code> after having sourced <code>~/.bashrc</code>.
This necessitates appending a <code>pyenv init</code> call to <code>~/.profile</code> as well as <code>~/.bashrc</code>
in these distributions because the system's Pip places executables for
modules installed by a non-root user into those per-user <code>bin</code> directories.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Using Pyenv without shims</h3><a id="user-content-using-pyenv-without-shims" aria-label="Permalink: Using Pyenv without shims" href="#using-pyenv-without-shims"></a></p>
<p dir="auto">If you don't want to use <code>pyenv init</code> and shims, you can still benefit
from pyenv's ability to install Python versions for you. Just run
<code>pyenv install</code> and you will find versions installed in
<code>$(pyenv root)/versions</code>.</p>
<p dir="auto">You can manually execute or symlink them as required,
or you can use <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-exec"><code>pyenv exec &lt;command&gt;</code></a>
whenever you want <code>&lt;command&gt;</code> to be affected by Pyenv's version selection
as currently configured.</p>
<p dir="auto"><code>pyenv exec</code> works by prepending <code>$(pyenv root)/versions/&lt;selected version&gt;/bin</code>
to <code>PATH</code> in the <code>&lt;command&gt;</code>'s environment, the same as what e.g. RVM does.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Environment variables</h3><a id="user-content-environment-variables" aria-label="Permalink: Environment variables" href="#environment-variables"></a></p>
<p dir="auto">You can affect how Pyenv operates with the following environment variables:</p>
<table>
<thead>
<tr>
<th>name</th>
<th>default</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>PYENV_VERSION</code></td>
<td></td>
<td>Specifies the Python version to be used.<br>Also see <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell"><code>pyenv shell</code></a></td>
</tr>
<tr>
<td><code>PYENV_ROOT</code></td>
<td><code>~/.pyenv</code></td>
<td>Defines the directory under which Python versions and shims reside.<br>Also see <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-root"><code>pyenv root</code></a></td>
</tr>
<tr>
<td><code>PYENV_DEBUG</code></td>
<td></td>
<td>Outputs debug information.<br>Also as: <code>pyenv --debug &lt;subcommand&gt;</code></td>
</tr>
<tr>
<td><code>PYENV_HOOK_PATH</code></td>
<td><a href="https://github.com/pyenv/pyenv/wiki/Authoring-plugins#pyenv-hooks"><em>see wiki</em></a></td>
<td>Colon-separated list of paths searched for pyenv hooks.</td>
</tr>
<tr>
<td><code>PYENV_DIR</code></td>
<td><code>$PWD</code></td>
<td>Directory to start searching for <code>.python-version</code> files.</td>
</tr>
<tr>
<td><code>PYTHON_BUILD_ARIA2_OPTS</code></td>
<td></td>
<td>Used to pass additional parameters to <a href="https://aria2.github.io/" rel="nofollow"><code>aria2</code></a>.<br>If the <code>aria2c</code> binary is available on <code>PATH</code>, pyenv uses <code>aria2c</code> instead of <code>curl</code> or <code>wget</code> to download the Python Source code. If you have an unstable internet connection, you can use this variable to instruct <code>aria2</code> to accelerate the download.<br>In most cases, you will only need to use <code>-x 10 -k 1M</code> as value to <code>PYTHON_BUILD_ARIA2_OPTS</code> environment variable</td>
</tr>
</tbody>
</table>
<p dir="auto">See also <a href="https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md#special-environment-variables"><em>Special environment variables</em> in Python-Build's README</a>
for environment variables that can be used to customize the build.</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Development</h2><a id="user-content-development" aria-label="Permalink: Development" href="#development"></a></p>
<p dir="auto">The pyenv source code is <a href="https://github.com/pyenv/pyenv">hosted on
GitHub</a>.  It's clean, modular,
and easy to understand, even if you're not a shell hacker.</p>
<p dir="auto">Tests are executed using <a href="https://github.com/bats-core/bats-core">Bats</a>:</p>
<div data-snippet-clipboard-copy-content="bats test
bats/test/<file>.bats"><pre><code>bats test
bats/test/&lt;file&gt;.bats
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Contributing</h3><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Feel free to submit pull requests and file bugs on the <a href="https://github.com/pyenv/pyenv/issues">issue
tracker</a>.</p>
<p dir="auto">See <a href="https://github.com/pyenv/pyenv/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> for more details on submitting changes.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Version History</h3><a id="user-content-version-history" aria-label="Permalink: Version History" href="#version-history"></a></p>
<p dir="auto">See <a href="https://github.com/pyenv/pyenv/blob/master/CHANGELOG.md">CHANGELOG.md</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">License</h3><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto"><a href="https://github.com/pyenv/pyenv/blob/master/LICENSE">The MIT License</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ugly Avatar (195 pts)]]></title>
            <link>https://txstc55.github.io/ugly-avatar/</link>
            <guid>39813560</guid>
            <pubDate>Mon, 25 Mar 2024 07:36:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://txstc55.github.io/ugly-avatar/">https://txstc55.github.io/ugly-avatar/</a>, See on <a href="https://news.ycombinator.com/item?id=39813560">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Windows 98 Icons (203 pts)]]></title>
            <link>https://win98icons.alexmeub.com/</link>
            <guid>39813240</guid>
            <pubDate>Mon, 25 Mar 2024 06:22:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://win98icons.alexmeub.com/">https://win98icons.alexmeub.com/</a>, See on <a href="https://news.ycombinator.com/item?id=39813240">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<a href="https://alexmeub.com/old-windows-icons/" title="Start Menu" target="_blank">
			
		</a>
		<p><span>Windows 98 Icon Viewer</span>
		<span>Made by <a href="https://alexmeub.com/about/" target="_blank">Alex Meub</a></span>
	</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Best engineering interview question I've gotten (169 pts)]]></title>
            <link>https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/</link>
            <guid>39813067</guid>
            <pubDate>Mon, 25 Mar 2024 05:28:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/">https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/</a>, See on <a href="https://news.ycombinator.com/item?id=39813067">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>It’s been a while since I was on the receiving end of a software engineering
interview. But I still remember my favorite interview question. It was at MemSQL circa 2013.
(They <a href="https://www.singlestore.com/blog/revolution/">haven’t even kept their name</a>,
so I assume they’re not still relying on this specific interview question.
I don’t feel bad for revealing it. It’s a great story that I tell people a lot;
I’ve just never blogged it before.)</p>

<p>Okay, so this isn’t a “question” per se; it’s a programming challenge.
I forget how much time they gave for it. Let’s say three hours, counting
the time to explain the problem.</p>

<p>Since MemSQL was a database company, this is a database challenge.</p>

<h2 id="introducing-memcached">Introducing memcached</h2>

<p>You know about <code>memcached</code>? No? Well, it’s an in-memory key-value store.
(<a href="https://memcached.org/about">Read its About page here.</a>) Let’s download
its code and build it so I can show you what it does.</p>

<blockquote>
  <p>You may need to <code>brew install libevent</code> and maybe some other
stuff in order to build memcached successfully. It won’t be too
difficult to figure out; but anyway, wrangling with your environment
wasn’t part of the test. You can assume interviewees were given
access to a Linux box with all the right dependencies in place already.</p>
</blockquote>

<p>For the authentic 2013 experience, let’s bypass the <a href="https://github.com/memcached/memcached">GitHub repo</a>
and untar a contemporary source distribution:</p>

<div><pre><code>curl -O https://memcached.org/files/memcached-1.4.15.tar.gz
tar zxvf memcached-1.4.15.tar.gz
cd memcached-1.4.15
./configure
make
</code></pre></div>

<p>Now we’ve built the <code>memcached</code> executable. Let’s start it running:</p>



<p>We can talk to the server via the default memcached port, port 11211.
Its protocol is basically plain text, so we can use plain old <code>telnet</code>
to talk to it. (If you don’t have <code>telnet</code> anymore, substitute the
words <a href="https://www.unixfu.ch/use-netcat-instead-of-telnet/"><code>nc -c</code></a> for <code>telnet</code>.)</p>

<div><pre><code>$ telnet 127.0.0.1 11211
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
</code></pre></div>

<h2 id="playing-with-memcached">Playing with memcached</h2>

<p>memcached is a key-value store. That means we can tell it to remember
something (an association between a key and a value), and then later ask for
that key again, and it’ll tell us the value it remembered. In memcached,
keys are always ASCII strings and values are always arbitrary byte streams
(which means you must specify their length manually). For example,
type this into your telnet session:</p>

<div><pre><code>set fullname 0 3600 10
John Smith
</code></pre></div>

<p>This tells memcached to remember an association between the string key <code>fullname</code>
and the 10-byte value <code>John Smith</code>. The other numbers on that line are a “flags” value
(<code>0</code>) to remember alongside the byte-stream value; and an expiry timeout (<code>3600</code>)
measured in seconds, after which memcached will forget this association.
Anyway, after you type these two lines, memcached will respond:</p>



<p>Now you can retrieve the value of <code>fullname</code> by typing into the same telnet
session:</p>



<p>memcached will respond:</p>

<div><pre><code>VALUE fullname 0 10
John Smith
END
</code></pre></div>

<p>You can overwrite the value associated with <code>fullname</code> by issuing another
<code>set fullname</code> command. You can also ask memcached to modify the value in certain
ways; for example, there are special dedicated commands for <code>append</code> and <code>prepend</code>.</p>

<div><pre><code>append fullname 0 3600 6
-Jones
STORED
get fullname
VALUE fullname 0 16
John Smith-Jones
END
</code></pre></div>

<p>Of course if you wanted to append <code>-Jones</code> to <code>fullname</code> from within a client program,
you <em>could</em> do something like this:</p>

<div><pre><code># pip install python-memcached
import memcache
mc = memcache.Client(['127.0.0.1:11211'])
v = mc.get('fullname')    # get the old value from memcached
v += '-Jones'             # append -Jones
mc.set('fullname', v)     # set the new value into memcached
</code></pre></div>

<p>But the advantage of memcached’s dedicated <code>append</code> command is that it’s guaranteed
to execute <em>atomically</em>. If you have multiple clients connected to the same memcached
server, and they’re all trying to append to the same key at the same time, the
<code>get/set</code> version might cause some of those updates to be lost, whereas with <code>append</code>
you’re assured they’ll all be accounted for.</p>

<p>Another dedicated command that executes atomically is <code>incr</code>:</p>

<div><pre><code>set age 0 3600 2
37
STORED
incr age 1
</code></pre></div>

<p>memcached responds with the postincremented value:</p>



<p>This response is useful because of the multiple clients thing. If you issued a separate
<code>get age</code> command, you might see the new value only after several other clients had
done their own updates. If you’re intending to use the value as a serial number,
or a SQL primary key, or something like that, then it’s very good that there’s a
way to see the incremented value <em>atomically</em>.</p>

<p>memcached remembers the incremented value too, of course:</p>

<div><pre><code>get age
VALUE age 0 2
38
END
</code></pre></div>

<p>Notice that <code>37</code> and <code>38</code> are still being stored and returned as byte-strings;
they’re decoded from ASCII into integers and back as part of the atomic operation.
If you try to <code>incr</code> a non-integer value, you get an error:</p>

<div><pre><code>incr fullname 1
CLIENT_ERROR cannot increment or decrement non-numeric value
</code></pre></div>

<p>Finally, note that <code>incr</code> is a full-fledged addition operation: you can increment
(or <code>decr</code>) by any positive value, not just by <code>1</code>.</p>

<div><pre><code>incr age 10
48
decr age 10
38
incr age -1
CLIENT_ERROR invalid numeric delta argument
</code></pre></div>

<p>By the way, when you’re done talking to memcached and want to kill the connection,
you can type the memcached command <code>quit</code>. (If you’re using <code>nc -c</code>, Ctrl+D also
works. Or, just go to the terminal window where the <code>memcached</code> server is running
and Ctrl+C to bring it down.)</p>

<h2 id="the-challenge-modifying-memcached">The challenge: Modifying memcached</h2>

<p>Via its <code>incr</code> and <code>decr</code> commands, memcached provides a built-in way to
atomically add \(k\) to a number. But it doesn’t provide other arithmetic
operations; in particular, there is no “atomic multiply by \(k\)” operation.</p>

<p>Your programming challenge: <b>Add a <code>mult</code> command to memcached.</b></p>

<p>When you’re done, I should be able to telnet to your memcached client
and run commands like</p>



<p>You have three hours. Go!</p>

<hr>

<p>For spoilers and analysis, see
<a href="https://quuxplusone.github.io/blog/2022/01/07/memcached-interview-solution/">“The best engineering interview question I’ve ever gotten, Part 2.”</a></p>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EVGA power supply kills 22TB of customer storage then denies responsibility (102 pts)]]></title>
            <link>https://www.tomshardware.com/pc-components/power-supplies/evga-power-supply-allegedly-blows-up-22tb-of-customer-storage-revised-model-from-rma-had-a-different-pin-layout-and-killed-all-sata-powered-devices</link>
            <guid>39813032</guid>
            <pubDate>Mon, 25 Mar 2024 05:18:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/pc-components/power-supplies/evga-power-supply-allegedly-blows-up-22tb-of-customer-storage-revised-model-from-rma-had-a-different-pin-layout-and-killed-all-sata-powered-devices">https://www.tomshardware.com/pc-components/power-supplies/evga-power-supply-allegedly-blows-up-22tb-of-customer-storage-revised-model-from-rma-had-a-different-pin-layout-and-killed-all-sata-powered-devices</a>, See on <a href="https://news.ycombinator.com/item?id=39813032">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-body">
<p>Reddit user u/sgircys on the DataHoarder subreddit reports that EVGA accidentally destroyed 22TB of storage in his work PC. After RMAing his EVGA power supply for coil whine issues, EVGA sent him a newly revised version of the same unit he bought featuring an upgraded pin layout. Unfortunately, EVGA forgot to send sgircys updated power supply cables to account for the changes. So when sgircys went to plug everything in, the power supply sent too much voltage to the wrong wires, frying all his storage devices.</p><p>The story starts with Sgircy contacting EVGA regarding a coil whine issue with his shiny new <a data-analytics-id="inline-link" href="https://www.tomshardware.com/news/evga-gq-series-power-supplies,30526.html" data-before-rewrite-localise="https://www.tomshardware.com/news/evga-gq-series-power-supplies,30526.html">EVGA GQ 1000W</a> Gold power supply. After contacting EVGA, he sent the unit (at his own expense) to EVGA to get the problem resolved. But in typical fashion, EVGA told the Reddit post to keep all his accessories and power supply cables as they wouldn't be returned if shipped. This is not an unusual practice for most power supply manufacturers.</p><p>After getting the unit back, he plugged the unit back into his machine, only to find that the PC was not working. Worse, he heard a click indicating an OCP mechanism was being triggered. After troubleshooting, he found he could power on the system, but only after he unplugged all his SATA-powered devices.</p><blockquote><a href="https://www.reddit.com/r/DataHoarder/comments/1bilja1/egva_power_supply_pin_layout_change_featuring" data-url="https://www.reddit.com/r/DataHoarder/comments/1bilja1/egva_power_supply_pin_layout_change_featuring">EGVA power supply pin layout change - featuring fried hard drives. Beware when warrantying a PSU.</a> from <a href="https://www.reddit.com/r/DataHoarder" data-url="https://www.reddit.com/r/DataHoarder">r/DataHoarder</a></blockquote><p>When he contacted EVGA again, an EVGA rep informed him that “at some point, the pin layout of these power supplies was changed,” confirming why the power supply wasn’t working. The EVGA rep sent him a new batch of cables compatible with the newly rewired version of his power supply for him to use.</p><p>However, this is where the story hits rock bottom. After plugging in the new cables, Sgircys discovered that all of his drives—22TB worth—were fried. The old cables he used previously fried all of his SATA-powered storage due to the improper voltages flowing through the incorrect wires.</p><p>Contacting EVGA again, the Reddit poster reported that EVGA did not want to replace his storage devices, saying the following: “I’ve never encountered a warranty that offers to cover loss of data or the costs related to the recovery of data and to the letter of our warranty terms, we technically don’t cover any loss or damages incurred by our products either.” EVGA also encouraged the Reddit poster to make a warranty claim from the drive manufacturer(s) themselves to get his storage drives replaced.</p><blockquote><a href="https://www.reddit.com/r/DataHoarder/comments/1bjsvkm/update_egva_power_supply_pin_layout_change" data-url="https://www.reddit.com/r/DataHoarder/comments/1bjsvkm/update_egva_power_supply_pin_layout_change">UPDATE - EGVA power supply pin layout change - featuring fried hard drives.</a> from <a href="https://www.reddit.com/r/DataHoarder" data-url="https://www.reddit.com/r/DataHoarder">r/DataHoarder</a></blockquote><p>Thankfully, this issue is scarce and only happened due to EVGA switching power supply pin layouts on its existing GQ lineup, which doesn't always happen. Regardless, it is somewhat surprising that EVGA has not replaced Sgircy's affected storage devices, especially since this is rare. If the Reddit poster can't get his drives replaced through his drive's warranty, he'll have to replace all of his storage devices out of pocket, which won't be cheap.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-Gj8YcKoiQa9SPYxF4G3Kf5"><section><p>Join the experts who read Tom's Hardware for the inside track on enthusiast PC tech news — and have for over 25 years. We'll send breaking news and in-depth reviews of CPUs, GPUs, AI, maker hardware and more straight to your inbox.</p></section></div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why choose async/await over threads? (385 pts)]]></title>
            <link>https://notgull.net/why-not-threads/</link>
            <guid>39812969</guid>
            <pubDate>Mon, 25 Mar 2024 04:56:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://notgull.net/why-not-threads/">https://notgull.net/why-not-threads/</a>, See on <a href="https://news.ycombinator.com/item?id=39812969">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>A common refrain is that threads can do everything that <code>async</code>/<code>await</code> can, but
simpler. So why would anyone choose <code>async</code>/<code>await</code>?</p>

<p>This is a common question that I’ve seen a lot in the Rust community. Frankly, I completely understand
where it’s coming from.</p>

<p>Rust is a low-level language that doesn’t hide the
complexity of coroutines from you. This is in opposition to languages like Go,
where <code>async</code> happens by default, without the programmer needing to even
consider it.</p>

<p>Smart programmers try to avoid complexity. So, they see the extra complexity in
<code>async</code>/<code>await</code> and question why it is needed. This question is especially
pertinent when considering that a reasonable alternative exists in OS threads.</p>

<p>Let’s take a mind-journey through <code>async</code> and see how it stacks up.</p>

<h2 id="background-blitz">Background Blitz</h2>

<p>Rust is a low-level language. Normally, code is linear; one thing runs after
another. It looks like this:</p>

<div><pre><code><span>fn</span> <span>main</span><span>()</span> <span>{</span>
    <span>foo</span><span>();</span>
    <span>bar</span><span>();</span>
    <span>baz</span><span>();</span>
<span>}</span>
</code></pre></div>

<p>Nice and simple, right?</p>

<p>However, sometimes you will want to run many things at once. The canonical
example for this is a web server. Consider the following written in linear
code:</p>

<div><pre><code><span>fn</span> <span>main</span><span>()</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span> <span>{</span>
    <span>let</span> <span>socket</span> <span>=</span> <span>TcpListener</span><span>::</span><span>bind</span><span>(</span><span>"0.0.0.0:80"</span><span>)</span><span>?</span><span>;</span>

    <span>loop</span> <span>{</span>
        <span>let</span> <span>(</span><span>client</span><span>,</span> <span>_</span><span>)</span> <span>=</span> <span>socket</span><span>.accept</span><span>()</span><span>?</span><span>;</span>
        <span>handle_client</span><span>(</span><span>client</span><span>)</span><span>?</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre></div>

<p>Imagine if <code>handle_client</code> takes a few milliseconds, and two clients try to
connect to your webserver at the same time. You’ll run into a serious
problem!</p>

<ul>
  <li>Client #1 connects to the webserver, and is accepted by the <code>accept()</code>
function. It starts running <code>handle_client()</code>.</li>
  <li>Client #2 connects to the webserver. However, since <code>accept()</code> is not
currently running, we have to wait for <code>handle_client()</code> for Client #1 to
finish running.</li>
  <li>After waiting a few milliseconds, we get back to <code>accept()</code>. Client #2 can
connect.</li>
</ul>

<p>Now imagine that instead of two clients, there are two million simultaneous
clients. At the end of the queue, you’ll have to wait several minutes
before the web server can help you. It becomes un-scalable very quickly.</p>

<p>Obviously, the embryonic web tried to solve this problem. The original solution was to introduce threading. By saving
the value of some registers and the program’s stack into memory, the operating
system can stop a program, run another program in its place, then resume running
that program later. Essentially, it allows for multiple routines (or “threads”,
or “processes”) to run on the same CPU.</p>

<p>Using threads, we can rewrite the above code as follows:</p>

<div><pre><code><span>fn</span> <span>main</span><span>()</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span> <span>{</span>
    <span>let</span> <span>socket</span> <span>=</span> <span>TcpListener</span><span>::</span><span>bind</span><span>(</span><span>"0.0.0.0:80"</span><span>)</span><span>?</span><span>;</span>

    <span>loop</span> <span>{</span>
        <span>let</span> <span>(</span><span>client</span><span>,</span> <span>_</span><span>)</span> <span>=</span> <span>socket</span><span>.accept</span><span>()</span><span>?</span><span>;</span>
        <span>thread</span><span>::</span><span>spawn</span><span>(</span><span>move</span> <span>||</span> <span>handle_client</span><span>(</span><span>client</span><span>));</span>
    <span>}</span>
<span>}</span>
</code></pre></div>

<p>Now, the client is being handled by a separate thread than the one handling
waiting for new connections. Great! This avoids the problem by allowing concurrent
thread access.</p>

<ul>
  <li>Client #1 is <code>accept</code>ed by the server. The server spawns a thread that calls
<code>handle_client</code>.</li>
  <li>Client #2 tries to connect to the server.</li>
  <li>Eventually, <code>handle_client</code> blocks on something. The OS saves the thread
handling Client #1 and brings back the main thread.</li>
  <li>The main thread <code>accept</code>s Client #2. It spawns a separate thread to handle
Client #2. With only a few microseconds of delay, Client #1 and Client #2
are run in parallel.</li>
</ul>

<p>Threads work especially well when you consider that production-grade web servers
have dozens of CPU cores. It’s not just that the OS can give the <em>illusion</em> that
all of these threads run at the same time; it’s that the OS can <em>actually</em> make
them all run at once.</p>

<p>Eventually, for reasons I’ll elaborate later, programmers wanted to bring this
concurrency out of the OS space and into the user space. There are many
different models for userspace concurrency. There is event-driven programming,
actors, and coroutines. The one Rust settled on is <code>async</code>/<code>await</code>.</p>

<p>To oversimplify, you compile the program as a grab-bag of state machines that
can all be run independently of another. Rust itself provides a mechanism for
creating state machines; the mechanism of <code>async</code> and <code>await</code>. The above program in terms of <code>async</code>/<code>await</code> would
look like this, written using <a href="https://crates.io/crates/smol"><code>smol</code></a>:</p>

<div><pre><code><span>#[apply(smol_macros::main</span><span>!</span><span>)]</span>
<span>async</span> <span>fn</span> <span>main</span><span>(</span><span>ex</span><span>:</span> <span>&amp;</span><span>smol</span><span>::</span><span>Executor</span><span>)</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span> <span>{</span>
    <span>let</span> <span>socket</span> <span>=</span> <span>TcpListener</span><span>::</span><span>bind</span><span>(</span><span>"0.0.0.0:80"</span><span>)</span><span>.await</span><span>?</span><span>;</span>

    <span>loop</span> <span>{</span>
        <span>let</span> <span>(</span><span>client</span><span>,</span> <span>_</span><span>)</span> <span>=</span> <span>socket</span><span>.accept</span><span>()</span><span>.await</span><span>?</span><span>;</span>
        <span>ex</span><span>.spawn</span><span>(</span><span>async</span> <span>move</span> <span>{</span>
            <span>handle_client</span><span>(</span><span>client</span><span>)</span><span>.await</span><span>;</span>
        <span>})</span><span>.detach</span><span>();</span>
    <span>}</span>
<span>}</span>
</code></pre></div>

<ul>
  <li>The main function is preceded with the <code>async</code> keyword. This means that it is
not a traditional function, but one that returns a state machine. Roughly, the
function’s contents correspond to that state machine.</li>
  <li><code>await</code> includes another state machine as a part of the currently running
state machine. For <code>accept()</code>, it means that the state machine will include it
as a step.</li>
  <li>Eventually, one of the inner functions will <em>yield</em>, or give up control. For
example, when <code>accept()</code> waits
for a new connection. At this point the entire state machine will yield its execution to
the higher-level executor. For us, that is <code>smol::Executor</code>.</li>
  <li>Once execution is yielded, the <code>Executor</code> will replace the current state
machine with another one that is running concurrently, spawned through the
<code>spawn</code> function.</li>
  <li>We pass an <code>async</code> block to the <code>spawn</code> function. This block represents an entire new state
machine, independent of the one created by the <code>main</code> function. All this state
machine does is run the <code>handle_client</code> function.</li>
  <li>Once <code>main</code> yields, one of the clients is selected to run in its place. Once that
client yields, the cycle repeats.</li>
  <li>You can now handle millions of simultaneous clients.</li>
</ul>

<p>Of course, user-space concurrency like this introduces an uptick in
complexity. When you’re using threads, you don’t have to deal with executors
and tasks and state machines and all.</p>

<p>If you’re a reasonable person, you might be asking “why do we need to do all of
this? Threads work well; for 99% of programs, we don’t need to involve any kind
of user-space concurrency. Introducing new complexity is technical debt, and
technical debt costs us time and money.</p>

<p>“So why wouldn’t we use threads?”</p>

<h2 id="timeout-trouble">Timeout Trouble</h2>

<p>Perhaps one of Rust’s biggest strengths is <em>composability</em>. It provides a set of
abstractions that can be nested, built upon, put together, and expanded upon.</p>

<p>I recall that <em>the</em> thing that made me stick with Rust is the <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a>
trait. It blew my mind that you could make something an <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a>, apply
a handful of different combinators, then pass the resulting <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a> into
any function that took an <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a>.</p>

<p>It continues to impress me how powerful it is. Let’s say you want to receive a list of
integers from another thread, only take the ones that are immediately available,
discard any integers that aren’t even, add one to all of them, then push them
onto a new list.</p>

<p>That would be fifty lines and a helper function in some other languages. In Rust
it can be done in five:</p>

<div><pre><code><span>let</span> <span>(</span><span>send</span><span>,</span> <span>recv</span><span>)</span> <span>=</span> <span>mpsc</span><span>::</span><span>channel</span><span>();</span>
<span>my_list</span><span>.extend</span><span>(</span>
    <span>recv</span><span>.try_iter</span><span>()</span>
        <span>.filter</span><span>(|</span><span>x</span><span>|</span> <span>x</span> <span>&amp;</span> <span>1</span> <span>==</span> <span>0</span><span>)</span>
        <span>.map</span><span>(|</span><span>x</span><span>|</span> <span>x</span> <span>+</span> <span>1</span><span>)</span>
<span>);</span>
</code></pre></div>

<p>The best thing about <code>async</code>/<code>await</code> is that it lets you apply this composability
to I/O-bound functions. Let’s say you have a new client requirement; you want to add a timeout to your above
function. Assume that our <code>handle_client</code> above function looks like this:</p>

<div><pre><code><span>async</span> <span>fn</span> <span>handle_client</span><span>(</span><span>client</span><span>:</span> <span>TcpStream</span><span>)</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span> <span>{</span>
    <span>let</span> <span>mut</span> <span>data</span> <span>=</span> <span>vec!</span><span>[];</span>
    <span>client</span><span>.read_to_end</span><span>(</span><span>&amp;</span><span>mut</span> <span>data</span><span>)</span><span>.await</span><span>?</span><span>;</span>
    
    <span>let</span> <span>response</span> <span>=</span> <span>do_something_with_data</span><span>(</span><span>data</span><span>)</span><span>.await</span><span>?</span>
    <span>client</span><span>.write_all</span><span>(</span><span>&amp;</span><span>response</span><span>)</span><span>.await</span><span>?</span><span>;</span>

    <span>Ok</span><span>(())</span>
<span>}</span>
</code></pre></div>

<p>If we want to add, say, a three-second timeout, we can combine two combinators
to do that:</p>

<ul>
  <li>The <a href="https://docs.rs/smol/latest/smol/future/fn.race.html"><code>race</code></a> function takes two futures and runs them at the same time.</li>
  <li>The <a href="https://docs.rs/smol/latest/smol/struct.Timer.html"><code>Timer</code></a> future waits for some time before returning.</li>
</ul>

<p>Here is what the final code looks like:</p>

<div><pre><code><span>async</span> <span>fn</span> <span>handle_client</span><span>(</span><span>client</span><span>:</span> <span>TcpStream</span><span>)</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span> <span>{</span>
    <span>// Future that handles the actual connection.</span>
    <span>let</span> <span>driver</span> <span>=</span> <span>async</span> <span>move</span> <span>{</span>
        <span>let</span> <span>mut</span> <span>data</span> <span>=</span> <span>vec!</span><span>[];</span>
        <span>client</span><span>.read_to_end</span><span>(</span><span>&amp;</span><span>mut</span> <span>data</span><span>)</span><span>.await</span><span>?</span><span>;</span>
        
        <span>let</span> <span>response</span> <span>=</span> <span>do_something_with_data</span><span>(</span><span>data</span><span>)</span><span>.await</span><span>?</span>
        <span>client</span><span>.write_all</span><span>(</span><span>&amp;</span><span>response</span><span>)</span><span>.await</span><span>?</span><span>;</span>

        <span>Ok</span><span>(())</span>
    <span>};</span>

    <span>// Future that handles waiting for a timeout.</span>
    <span>let</span> <span>timeout</span> <span>=</span> <span>async</span> <span>{</span>
        <span>Timer</span><span>::</span><span>after</span><span>(</span><span>Duration</span><span>::</span><span>from_secs</span><span>(</span><span>3</span><span>))</span><span>.await</span><span>;</span>

        <span>// We just hit a timeout! Return an error.</span>
        <span>Err</span><span>(</span><span>io</span><span>::</span><span>ErrorKind</span><span>::</span><span>TimedOut</span><span>.into</span><span>())</span>
    <span>};</span>

    <span>// Run both in parallel.</span>
    <span>driver</span><span>.race</span><span>(</span><span>timeout</span><span>)</span><span>.await</span>
<span>}</span>
</code></pre></div>

<p>I find this to be a very easy process. All you have to do is wrap your existing
code in an <code>async</code> block and race it against another future.</p>

<p>An added bonus of this approach is that it works with any kind of stream. Here,
we use a <code>TcpStream</code>. However we can easily replace it with anything that
implements <code>impl AsyncRead + AsyncWrite</code>. It could be a GZIP stream on top of
the normal stream, or a Unix socket, or a file. <code>async</code> just slides into
whatever pattern you need from it.</p>

<h2 id="thematic-threads">Thematic Threads</h2>

<p>What if we wanted to implement this in our threaded example above?</p>

<div><pre><code><span>fn</span> <span>handle_client</span><span>(</span><span>client</span><span>:</span> <span>TcpStream</span><span>)</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span> <span>{</span>
    <span>let</span> <span>mut</span> <span>data</span> <span>=</span> <span>vec!</span><span>[];</span>
    <span>client</span><span>.read_to_end</span><span>(</span><span>&amp;</span><span>mut</span> <span>data</span><span>)</span><span>?</span><span>;</span>
    
    <span>let</span> <span>response</span> <span>=</span> <span>do_something_with_data</span><span>(</span><span>data</span><span>)</span><span>?</span>
    <span>client</span><span>.write_all</span><span>(</span><span>&amp;</span><span>response</span><span>)</span><span>?</span><span>;</span>

    <span>Ok</span><span>(())</span>
<span>}</span>
</code></pre></div>

<p>Well, it’s not easy. Generally, you can’t interrupt the <code>read</code> or <code>write</code>
system calls in blocking code, without doing something catastrophic like
closing the file descriptor (which can’t be done in Rust).</p>

<p>Thankfully, <a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html"><code>TcpStream</code></a> has two functions <a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.set_read_timeout"><code>set_read_timeout</code></a> and
<a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.set_write_timeout"><code>set_write_timeout</code></a> that can be used to set the timeouts for reading and
writing, respectively. However, we can’t just use it naively. Imagine a client
that sends one byte every 2.9 seconds, just to reset the timeout.</p>

<p>So we have to program a little defensively here. Due to the power of Rust combinators, we can write our own
type wrapping around the <a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html"><code>TcpStream</code></a> to program the timeout.</p>

<div><pre><code><span>// Deadline-aware wrapper around `TcpStream.</span>
<span>struct</span> <span>DeadlineStream</span> <span>{</span>
    <span>tcp</span><span>:</span> <span>TcpStream</span><span>,</span>
    <span>deadline</span><span>:</span> <span>Instant</span>
<span>}</span>

<span>impl</span> <span>DeadlineStream</span> <span>{</span>
    <span>/// Create a new `DeadlineStream` that expires after some time.</span>
    <span>fn</span> <span>new</span><span>(</span><span>tcp</span><span>:</span> <span>TcpStream</span><span>,</span> <span>timeout</span><span>:</span> <span>Duration</span><span>)</span> <span>-&gt;</span> <span>Self</span> <span>{</span>
        <span>Self</span> <span>{</span>
            <span>tcp</span><span>,</span>
            <span>deadline</span><span>:</span> <span>Instant</span><span>::</span><span>now</span><span>()</span> <span>+</span> <span>timeout</span><span>,</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>impl</span> <span>io</span><span>::</span><span>Read</span> <span>for</span> <span>DeadlineStream</span> <span>{</span>
    <span>fn</span> <span>read</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> <span>buf</span><span>:</span> <span>&amp;</span><span>mut</span> <span>[</span><span>u8</span><span>])</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>usize</span><span>&gt;</span> <span>{</span>
        <span>// Set the deadline.</span>
        <span>let</span> <span>time_left</span> <span>=</span> <span>self</span><span>.deadline</span><span>.saturating_duration_since</span><span>(</span><span>Instant</span><span>::</span><span>now</span><span>());</span>
        <span>self</span><span>.tcp</span><span>.set_read_timeout</span><span>(</span><span>Some</span><span>(</span><span>time_left</span><span>))</span><span>?</span><span>;</span>

        <span>// Read from the stream.</span>
        <span>self</span><span>.tcp</span><span>.read</span><span>(</span><span>buf</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>impl</span> <span>io</span><span>::</span><span>Write</span> <span>for</span> <span>DeadlineStream</span> <span>{</span>
    <span>fn</span> <span>write</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> <span>buf</span><span>:</span> <span>&amp;</span><span>[</span><span>u8</span><span>])</span> <span>-&gt;</span> <span>io</span><span>::</span><span>Result</span><span>&lt;</span><span>usize</span><span>&gt;</span> <span>{</span>
        <span>// Set the deadline.</span>
        <span>let</span> <span>time_left</span> <span>=</span> <span>self</span><span>.deadline</span><span>.saturating_duration_since</span><span>(</span><span>Instant</span><span>::</span><span>now</span><span>());</span>
        <span>self</span><span>.tcp</span><span>.set_write_timeout</span><span>(</span><span>Some</span><span>(</span><span>time_left</span><span>))</span><span>?</span><span>;</span>

        <span>// Read from the stream.</span>
        <span>self</span><span>.tcp</span><span>.write</span><span>(</span><span>buf</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>// Create the wrapper.</span>
<span>let</span> <span>client</span> <span>=</span> <span>DeadlineStream</span><span>::</span><span>new</span><span>(</span><span>client</span><span>,</span> <span>Duration</span><span>::</span><span>from_secs</span><span>(</span><span>3</span><span>));</span>

<span>let</span> <span>mut</span> <span>data</span> <span>=</span> <span>vec!</span><span>[];</span>
<span>client</span><span>.read_to_end</span><span>(</span><span>&amp;</span><span>mut</span> <span>data</span><span>)</span><span>?</span><span>;</span>

<span>let</span> <span>response</span> <span>=</span> <span>do_something_with_data</span><span>(</span><span>data</span><span>)</span><span>?</span>
<span>client</span><span>.write_all</span><span>(</span><span>&amp;</span><span>response</span><span>)</span><span>?</span><span>;</span>

<span>Ok</span><span>(())</span>
</code></pre></div>

<p>On one hand, it could be argued that this is elegant. We used Rust’s
capabilities to solve the problem with a relatively simple combinator. I’m sure
it would work well enough.</p>

<p>On the other hand, it’s definitely hacky.</p>

<ul>
  <li>We’ve locked ourselves into using <a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html"><code>TcpStream</code></a>. There’s no trait in Rust to
abstract over using the <a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.set_read_timeout"><code>set_read_timeout</code></a> and <a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.set_write_timeout"><code>set_write_timeout</code></a> types.
So it would take a lot of additional work to make it use any kind of writer.</li>
  <li>It involves an extra system call for setting the timeout.</li>
  <li>I imagine this type is much more unwieldy to use for the kinds of actual logic
that web servers demand.</li>
</ul>

<p>If I saw this code in production, I would ask the author why they avoided using
<code>async</code>/<code>await</code> to solve this problem. This is the phenomenon I was describing
in my post “<a href="https://notgull.net/why-you-want-async/">Why you might actually want async in your project</a>”.
Quite frequently I encounter a pattern where synchronous code can’t be used
without contortion, so I have to rewrite it in <code>async</code>.</p>

<h2 id="async-success-stories">Async Success Stories</h2>

<p>There’s a reason why the HTTP ecosystem has adopted <code>async</code>/<code>await</code> as its
primary runtime mechanism, even for clients. You can take any function that
makes an HTTP call, and make it fit whatever hole or use case you want it to.</p>

<p><a href="https://crates.io/crates/tower"><code>tower</code></a> is probably the best example of this phenomenon I can think of, and
it’s really <em>the</em> thing that made me realize how powerful <code>async</code>/<code>await</code> can
be. If you implement your service as an <code>async</code> function, you get timeouts,
rate limiting, load balancing, <a href="https://docs.rs/tower/0.4.13/tower/hedge/index.html">hedging</a>
and back-pressure handling. All of that for free.</p>

<p>It doesn’t matter what runtime you used, or what you’re actually doing in your
service. You can throw <a href="https://crates.io/crates/tower"><code>tower</code></a> at it to make it more robust.</p>

<p><a href="https://docs.rs/macroquad"><code>macroquad</code></a> is a miniature Rust game engine that aims to make game development
as easy as possible. Its main function uses <code>async</code>/<code>await</code> in order to run its
engine. This is because <code>async</code>/<code>await</code> is really the best way in Rust to
express a linear function that needs to be stopped in order to wait for
something else.</p>

<p>In practice, this can be extremely powerful. Imagine simultaneously polling
a network connection to your game server and your GUI framework, on the same
thread. The possibilities are endless.</p>

<h2 id="improving-asyncs-image">Improving Async’s Image</h2>

<p>I don’t think the issue is that some people think threads are better than
<code>async</code>. I think the issue is that the benefits of <code>async</code> aren’t widely
broadcast. This leads some people to be misinformed about the benefits of
<code>async</code>.</p>

<p>If this is an educational problem, I think it’s worth taking a look at the
educational material. Here’s what the <a href="https://rust-lang.github.io/async-book/01_getting_started/02_why_async.html">Rust Async Book</a> says when comparing
<code>async</code>/<code>await</code> to operating system threads.</p>

<blockquote>
  <p><strong>OS threads</strong> don’t require any changes to the programming model, which makes it very easy to express concurrency. However, synchronizing between threads can be difficult, and the performance overhead is large. Thread pools can mitigate some of these costs, but not enough to support massive IO-bound workloads.</p>

  <p><em>- <a href="https://rust-lang.github.io/async-book/01_getting_started/02_why_async.html">Rust Async Book</a>, various authors</em></p>
</blockquote>

<p>I think this is a consistent problem throughout the <code>async</code> community. When
someone asks the question of “why do we want to use this over OS threads”,
people have a tendency to kind of wave their hand and say “<code>async</code> has less
overhead. Other than that, everything’s the same.”</p>

<p>This is the reason why web server authors switched to <code>async</code>/<code>await</code>. It’s how
they solved the <a href="https://en.wikipedia.org/wiki/C10k_problem">C10k problem</a>. But, it’s not going to be the reason why
everyone else switches to <code>async</code>/<code>await</code>.</p>

<p>Performance gains are
fickle and can disappear in the wrong circumstances. There are plenty of cases
where a threaded workflow can be faster than an equivalent <code>async</code> workflow
(mostly, in the case of CPU bound tasks). I think that we, as a community, have
over-emphasized the ephemeral performance benefits of <code>async</code> Rust while
downplaying its semantic benefits.</p>

<p>In the worst case, it leads to people shrugging off <code>async</code>/<code>await</code> as
“<a href="https://shnatsel.medium.com/smoke-testing-rust-http-clients-b8f2ee5db4e6">a weird thing that you resort to for niche use cases</a>”. It should be seen as
a powerful programming model that lets you succinctly express patterns that
can’t be expressed in synchronous Rust without dozens of threads and channels.</p>

<p>I also think there’s a tendency to try to make <code>async</code> Rust “just like sync
Rust” in a way that encourages negative comparison. By “tendency”, I mean that
it’s <a href="https://blog.rust-lang.org/inside-rust/2022/02/03/async-in-2022.html">the stated roadmap for the Rust project</a>,
saying that “that writing async Rust code should be as easy as writing sync code, apart from the occasional <code>async</code> and <code>await</code> keyword.”.</p>

<p>I reject this framing because it’s fundamentally impossible. It’s like trying to
host a pizza party on a ski slope. Sure, you can probably get 99% of the way
there, especially if you’re really talented. But there are differences that the
average bear <em>will</em> notice, no matter how good you are.</p>

<p>We shouldn’t be trying to force our model into unfriendly idioms to
appease programmers who refuse to adopt another type of pattern. We should be
trying to highlight the strengths of Rust’s <code>async</code>/<code>await</code> ecosystem; its
composability and its power. We should be trying to make it so <code>async</code>/<code>await</code>
is the <em>default</em> choice whenever a programmer reaches for concurrency. Rather
than trying to make sync Rust and <code>async</code> Rust the same, we should embrace the
differences.</p>

<p>In short, we shouldn’t be using technical reasons to argue for a semantic model.
We should be using semantic reasons.</p>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Real-time map of every Starlink satellite in orbit (273 pts)]]></title>
            <link>https://www.starlinkmap.org/</link>
            <guid>39812652</guid>
            <pubDate>Mon, 25 Mar 2024 03:35:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.starlinkmap.org/">https://www.starlinkmap.org/</a>, See on <a href="https://news.ycombinator.com/item?id=39812652">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Supervision: Reusable Computer Vision (222 pts)]]></title>
            <link>https://github.com/roboflow/supervision</link>
            <guid>39812259</guid>
            <pubDate>Mon, 25 Mar 2024 01:58:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/roboflow/supervision">https://github.com/roboflow/supervision</a>, See on <a href="https://news.ycombinator.com/item?id=39812259">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto"><h2 tabindex="-1" dir="auto">👋 hello</h2><a id="user-content--hello" aria-label="Permalink: 👋 hello" href="#-hello"></a></p>
<p dir="auto"><strong>We write your reusable computer vision tools.</strong> Whether you need to load your dataset from your hard drive, draw detections on an image or video, or count how many detections are in a zone. You can count on us! 🤝</p>
<p dir="auto"><a href="https://github.com/orgs/roboflow/projects/10"><img src="https://private-user-images.githubusercontent.com/26109316/303423584-c05cc954-b9a6-4ed5-9a52-d0b4b619ff65.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8zMDM0MjM1ODQtYzA1Y2M5NTQtYjlhNi00ZWQ1LTlhNTItZDBiNGI2MTlmZjY1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTMwNzFhZTU1NmQxNWRmMWM1NWEwOWM2YjdlYTI4MzY4OTlmOTk3NDdlM2EwNWFiY2YwNDYzYzI5M2FmNDM0NjgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.-ckN5ZJS1Q2gy8x6xU29T6JaHr6ynjEUuVa4GEMv3LI" alt="supervision-hackfest" secured-asset-link=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">💻 install</h2><a id="user-content--install" aria-label="Permalink: 💻 install" href="#-install"></a></p>
<p dir="auto">Pip install the supervision package in a
<a href="https://www.python.org/" rel="nofollow"><strong>Python&gt;=3.8</strong></a> environment.</p>

<p dir="auto">Read more about desktop, headless, and local installation in our <a href="https://roboflow.github.io/supervision/" rel="nofollow">guide</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🔥 quickstart</h2><a id="user-content--quickstart" aria-label="Permalink: 🔥 quickstart" href="#-quickstart"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">models</h3><a id="user-content-models" aria-label="Permalink: models" href="#models"></a></p>
<p dir="auto">Supervision was designed to be model agnostic. Just plug in any classification, detection, or segmentation model. For your convenience, we have created <a href="https://supervision.roboflow.com/latest/detection/core/#detections" rel="nofollow">connectors</a> for the most popular libraries like Ultralytics, Transformers, or MMDetection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import cv2
import supervision as sv
from ultralytics import YOLO

image = cv2.imread(...)
model = YOLO('yolov8s.pt')
result = model(image)[0]
detections = sv.Detections.from_ultralytics(result)

len(detections)
# 5"><pre><span>import</span> <span>cv2</span>
<span>import</span> <span>supervision</span> <span>as</span> <span>sv</span>
<span>from</span> <span>ultralytics</span> <span>import</span> <span>YOLO</span>

<span>image</span> <span>=</span> <span>cv2</span>.<span>imread</span>(...)
<span>model</span> <span>=</span> <span>YOLO</span>(<span>'yolov8s.pt'</span>)
<span>result</span> <span>=</span> <span>model</span>(<span>image</span>)[<span>0</span>]
<span>detections</span> <span>=</span> <span>sv</span>.<span>Detections</span>.<span>from_ultralytics</span>(<span>result</span>)

<span>len</span>(<span>detections</span>)
<span># 5</span></pre></div>
<details>
<summary>👉 more model connectors</summary>
<ul dir="auto">
<li>
<p dir="auto">inference</p>
<p dir="auto">Running with <a href="https://github.com/roboflow/inference">Inference</a> requires a <a href="https://docs.roboflow.com/api-reference/authentication#retrieve-an-api-key" rel="nofollow">Roboflow API KEY</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import cv2
import supervision as sv
from inference.models.utils import get_roboflow_model

image = cv2.imread(...)
model = get_roboflow_model(model_id=&quot;yolov8s-640&quot;, api_key=<ROBOFLOW API KEY>)
result = model.infer(image)[0]
detections = sv.Detections.from_inference(result)

len(detections)
#&nbsp;5
"><pre><span>import</span> <span>cv2</span>
<span>import</span> <span>supervision</span> <span>as</span> <span>sv</span>
<span>from</span> <span>inference</span>.<span>models</span>.<span>utils</span> <span>import</span> <span>get_roboflow_model</span>

<span>image</span> <span>=</span> <span>cv2</span>.<span>imread</span>(...)
<span>model</span> <span>=</span> <span>get_roboflow_model</span>(<span>model_id</span><span>=</span><span>"yolov8s-640"</span>, <span>api_key</span><span>=</span><span>&lt;</span><span>ROBOFLOW</span> <span>API</span> <span>KEY</span><span>&gt;</span>)
<span>result</span> <span>=</span> <span>model</span>.<span>infer</span>(<span>image</span>)[<span>0</span>]
<span>detections</span> <span>=</span> <span>sv</span>.<span>Detections</span>.<span>from_inference</span>(<span>result</span>)

<span>len</span>(<span>detections</span>)
<span>#&nbsp;5</span></pre></div>
</li>
</ul>
</details>
<p dir="auto"><h3 tabindex="-1" dir="auto">annotators</h3><a id="user-content-annotators" aria-label="Permalink: annotators" href="#annotators"></a></p>
<p dir="auto">Supervision offers a wide range of highly customizable <a href="https://supervision.roboflow.com/latest/annotators/" rel="nofollow">annotators</a>, allowing you to compose the perfect visualization for your use case.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import cv2
import supervision as sv

image = cv2.imread(...)
detections = sv.Detections(...)

bounding_box_annotator = sv.BoundingBoxAnnotator()
annotated_frame = bounding_box_annotator.annotate(
    scene=image.copy(),
    detections=detections
)"><pre><span>import</span> <span>cv2</span>
<span>import</span> <span>supervision</span> <span>as</span> <span>sv</span>

<span>image</span> <span>=</span> <span>cv2</span>.<span>imread</span>(...)
<span>detections</span> <span>=</span> <span>sv</span>.<span>Detections</span>(...)

<span>bounding_box_annotator</span> <span>=</span> <span>sv</span>.<span>BoundingBoxAnnotator</span>()
<span>annotated_frame</span> <span>=</span> <span>bounding_box_annotator</span>.<span>annotate</span>(
    <span>scene</span><span>=</span><span>image</span>.<span>copy</span>(),
    <span>detections</span><span>=</span><span>detections</span>
)</pre></div>
<details open="">
  <summary>
    
    <span aria-label="Video description supervision-0.16.0-annotators.mp4">supervision-0.16.0-annotators.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/26109316/276552454-691e219c-0565-4403-9218-ab5644f39bce.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yNzY1NTI0NTQtNjkxZTIxOWMtMDU2NS00NDAzLTkyMTgtYWI1NjQ0ZjM5YmNlLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTVhOGFmODJmMTlkYjhhZmE4MTVhMThmM2M2ZjI2NjYxM2E3YjVjODc1ZWI1YWIyMjc4MTM1ZDZlZTcxMTk4ZTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.6cAuBEaKD8DTNuJtR5ssbD1YMGyNmSEw6SRxU1ZB4Kc" data-canonical-src="https://private-user-images.githubusercontent.com/26109316/276552454-691e219c-0565-4403-9218-ab5644f39bce.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yNzY1NTI0NTQtNjkxZTIxOWMtMDU2NS00NDAzLTkyMTgtYWI1NjQ0ZjM5YmNlLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTVhOGFmODJmMTlkYjhhZmE4MTVhMThmM2M2ZjI2NjYxM2E3YjVjODc1ZWI1YWIyMjc4MTM1ZDZlZTcxMTk4ZTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.6cAuBEaKD8DTNuJtR5ssbD1YMGyNmSEw6SRxU1ZB4Kc" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h3 tabindex="-1" dir="auto">datasets</h3><a id="user-content-datasets" aria-label="Permalink: datasets" href="#datasets"></a></p>
<p dir="auto">Supervision provides a set of <a href="https://supervision.roboflow.com/latest/datasets/" rel="nofollow">utils</a> that allow you to load, split, merge, and save datasets in one of the supported formats.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import supervision as sv

dataset = sv.DetectionDataset.from_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
)

dataset.classes
['dog', 'person']

len(dataset)
#&nbsp;1000"><pre><span>import</span> <span>supervision</span> <span>as</span> <span>sv</span>

<span>dataset</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>.<span>from_yolo</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...,
    <span>data_yaml_path</span><span>=</span>...
)

<span>dataset</span>.<span>classes</span>
[<span>'dog'</span>, <span>'person'</span>]

<span>len</span>(<span>dataset</span>)
<span>#&nbsp;1000</span></pre></div>
<details>
<summary>👉 more dataset utils</summary>
<ul dir="auto">
<li>
<p dir="auto">load</p>
<div dir="auto" data-snippet-clipboard-copy-content="dataset = sv.DetectionDataset.from_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
)

dataset = sv.DetectionDataset.from_pascal_voc(
    images_directory_path=...,
    annotations_directory_path=...
)

dataset = sv.DetectionDataset.from_coco(
    images_directory_path=...,
    annotations_path=...
)"><pre><span>dataset</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>.<span>from_yolo</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...,
    <span>data_yaml_path</span><span>=</span>...
)

<span>dataset</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>.<span>from_pascal_voc</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...
)

<span>dataset</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>.<span>from_coco</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_path</span><span>=</span>...
)</pre></div>
</li>
<li>
<p dir="auto">split</p>
<div dir="auto" data-snippet-clipboard-copy-content="train_dataset, test_dataset = dataset.split(split_ratio=0.7)
test_dataset, valid_dataset = test_dataset.split(split_ratio=0.5)

len(train_dataset), len(test_dataset), len(valid_dataset)
#&nbsp;(700, 150, 150)"><pre><span>train_dataset</span>, <span>test_dataset</span> <span>=</span> <span>dataset</span>.<span>split</span>(<span>split_ratio</span><span>=</span><span>0.7</span>)
<span>test_dataset</span>, <span>valid_dataset</span> <span>=</span> <span>test_dataset</span>.<span>split</span>(<span>split_ratio</span><span>=</span><span>0.5</span>)

<span>len</span>(<span>train_dataset</span>), <span>len</span>(<span>test_dataset</span>), <span>len</span>(<span>valid_dataset</span>)
<span>#&nbsp;(700, 150, 150)</span></pre></div>
</li>
<li>
<p dir="auto">merge</p>
<div dir="auto" data-snippet-clipboard-copy-content="ds_1 = sv.DetectionDataset(...)
len(ds_1)
#&nbsp;100
ds_1.classes
#&nbsp;['dog', 'person']

ds_2 = sv.DetectionDataset(...)
len(ds_2)
# 200
ds_2.classes
#&nbsp;['cat']

ds_merged = sv.DetectionDataset.merge([ds_1, ds_2])
len(ds_merged)
#&nbsp;300
ds_merged.classes
#&nbsp;['cat', 'dog', 'person']"><pre><span>ds_1</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>(...)
<span>len</span>(<span>ds_1</span>)
<span>#&nbsp;100</span>
<span>ds_1</span>.<span>classes</span>
<span>#&nbsp;['dog', 'person']</span>

<span>ds_2</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>(...)
<span>len</span>(<span>ds_2</span>)
<span># 200</span>
<span>ds_2</span>.<span>classes</span>
<span>#&nbsp;['cat']</span>

<span>ds_merged</span> <span>=</span> <span>sv</span>.<span>DetectionDataset</span>.<span>merge</span>([<span>ds_1</span>, <span>ds_2</span>])
<span>len</span>(<span>ds_merged</span>)
<span>#&nbsp;300</span>
<span>ds_merged</span>.<span>classes</span>
<span>#&nbsp;['cat', 'dog', 'person']</span></pre></div>
</li>
<li>
<p dir="auto">save</p>
<div dir="auto" data-snippet-clipboard-copy-content="dataset.as_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
)

dataset.as_pascal_voc(
    images_directory_path=...,
    annotations_directory_path=...
)

dataset.as_coco(
    images_directory_path=...,
    annotations_path=...
)"><pre><span>dataset</span>.<span>as_yolo</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...,
    <span>data_yaml_path</span><span>=</span>...
)

<span>dataset</span>.<span>as_pascal_voc</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...
)

<span>dataset</span>.<span>as_coco</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_path</span><span>=</span>...
)</pre></div>
</li>
<li>
<p dir="auto">convert</p>
<div dir="auto" data-snippet-clipboard-copy-content="sv.DetectionDataset.from_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
).as_pascal_voc(
    images_directory_path=...,
    annotations_directory_path=...
)"><pre><span>sv</span>.<span>DetectionDataset</span>.<span>from_yolo</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...,
    <span>data_yaml_path</span><span>=</span>...
).<span>as_pascal_voc</span>(
    <span>images_directory_path</span><span>=</span>...,
    <span>annotations_directory_path</span><span>=</span>...
)</pre></div>
</li>
</ul>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">🎬 tutorials</h2><a id="user-content--tutorials" aria-label="Permalink: 🎬 tutorials" href="#-tutorials"></a></p>
<p dir="auto">
<a href="https://youtu.be/uWP6UjDeZvY" title="Speed Estimation &amp; Vehicle Tracking | Computer Vision | Open Source" rel="nofollow"><img src="https://private-user-images.githubusercontent.com/26109316/297074306-61a444c8-b135-48ce-b979-2a5ab47c5a91.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yOTcwNzQzMDYtNjFhNDQ0YzgtYjEzNS00OGNlLWI5NzktMmE1YWI0N2M1YTkxLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWM5ZmQxZTc1NTQ1NzBmNmZlM2JhMjQ3MTE3MmEwOGZkNjNlNzQ3OTI2ZGFiYWQ2ZTNlYThlMzA2M2ZiN2Q3MzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.WG7tTOEhGYP-SYCeMNFeZp6AhWYNnKepTwqUVb06uoY" alt="Speed Estimation &amp; Vehicle Tracking | Computer Vision | Open Source" width="300px" secured-asset-link=""></a>
<a href="https://youtu.be/uWP6UjDeZvY" title="Speed Estimation &amp; Vehicle Tracking | Computer Vision | Open Source" rel="nofollow"><strong>Speed Estimation &amp; Vehicle Tracking | Computer Vision | Open Source</strong></a>
</p><p><strong>Created: 11 Jan 2024</strong> | <strong>Updated: 11 Jan 2024</strong></p>
<br> Learn how to track and estimate the speed of vehicles using YOLO, ByteTrack, and Roboflow Inference. This comprehensive tutorial covers object detection, multi-object tracking, filtering detections, perspective transformation, speed estimation, visualization improvements, and more.

<p dir="auto">
<a href="https://youtu.be/4Q3ut7vqD5o" title="Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking" rel="nofollow"><img src="https://private-user-images.githubusercontent.com/26109316/269923863-54afdf1c-218c-4451-8f12-627fb85f1682.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yNjk5MjM4NjMtNTRhZmRmMWMtMjE4Yy00NDUxLThmMTItNjI3ZmI4NWYxNjgyLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTZkMTk0ZWUzNjhjODA2MmNiNzIxMWQ0Yjk5OGJmNWE1NjQ2MTc2N2Q1ZGY3NjcyZjhlMzJmZWY4OGQ3YTUzZDcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.2SFXjnV80px79bOAGEpxiTTmfCeVaWWBX1vGp-yBFkI" alt="Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking" width="300px" secured-asset-link=""></a>
<a href="https://youtu.be/4Q3ut7vqD5o" title="Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking" rel="nofollow"><strong>Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking</strong></a>
</p><p><strong>Created: 6 Sep 2023</strong> | <strong>Updated: 6 Sep 2023</strong></p>
<br> In this video, we explore real-time traffic analysis using YOLOv8 and ByteTrack to detect and track vehicles on aerial images. Harnessing the power of Python and Supervision, we delve deep into assigning cars to specific entry zones and understanding their direction of movement. By visualizing their paths, we gain insights into traffic flow across bustling roundabouts... 
<p dir="auto"><h2 tabindex="-1" dir="auto">💜 built with supervision</h2><a id="user-content--built-with-supervision" aria-label="Permalink: 💜 built with supervision" href="#-built-with-supervision"></a></p>
<p dir="auto">Did you build something cool using supervision? <a href="https://github.com/roboflow/supervision/discussions/categories/built-with-supervision">Let us know!</a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description football-players-tracking-25.mp4">football-players-tracking-25.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/26109316/207858600-ee862b22-0353-440b-ad85-caa0c4777904.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yMDc4NTg2MDAtZWU4NjJiMjItMDM1My00NDBiLWFkODUtY2FhMGM0Nzc3OTA0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJhNDE5M2FjODI1MDBhNjdmNTMwMzdkOTU3N2ViYzY5NTRjZTc1MjUzOTQyZmFkODg2Zjc1OGI4YTYxNzNmYzImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.2hwvBNC326YQy8DO_PuAsOqJymUKI6iV-Sr5GABiixY" data-canonical-src="https://private-user-images.githubusercontent.com/26109316/207858600-ee862b22-0353-440b-ad85-caa0c4777904.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yMDc4NTg2MDAtZWU4NjJiMjItMDM1My00NDBiLWFkODUtY2FhMGM0Nzc3OTA0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJhNDE5M2FjODI1MDBhNjdmNTMwMzdkOTU3N2ViYzY5NTRjZTc1MjUzOTQyZmFkODg2Zjc1OGI4YTYxNzNmYzImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.2hwvBNC326YQy8DO_PuAsOqJymUKI6iV-Sr5GABiixY" controls="controls" muted="muted">

  </video>
</details>

<details open="">
  <summary>
    
    <span aria-label="Video description traffic_analysis_result.mov">traffic_analysis_result.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/26109316/265538033-c9436828-9fbf-4c25-ae8c-60e9c81b3900.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yNjU1MzgwMzMtYzk0MzY4MjgtOWZiZi00YzI1LWFlOGMtNjBlOWM4MWIzOTAwLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1YjI2YjU3ZTI4MTEzN2VhNDA2NjQzZTBhYjIyNWQyNGFiN2I1NTRlOGUxZGFjODI3MmM2NzZjYTkzZmVlOTMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.yXXBrciL3i_f17pfwtehXAmZ75kdofDL1ZgYE1Fuut8" data-canonical-src="https://private-user-images.githubusercontent.com/26109316/265538033-c9436828-9fbf-4c25-ae8c-60e9c81b3900.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yNjU1MzgwMzMtYzk0MzY4MjgtOWZiZi00YzI1LWFlOGMtNjBlOWM4MWIzOTAwLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1YjI2YjU3ZTI4MTEzN2VhNDA2NjQzZTBhYjIyNWQyNGFiN2I1NTRlOGUxZGFjODI3MmM2NzZjYTkzZmVlOTMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.yXXBrciL3i_f17pfwtehXAmZ75kdofDL1ZgYE1Fuut8" controls="controls" muted="muted">

  </video>
</details>

<details open="">
  <summary>
    
    <span aria-label="Video description vehicles-step-7-new.mp4">vehicles-step-7-new.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/26109316/297419069-3ac6982f-4943-4108-9b7f-51787ef1a69f.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yOTc0MTkwNjktM2FjNjk4MmYtNDk0My00MTA4LTliN2YtNTE3ODdlZjFhNjlmLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTc3NWRiYWNhNzAyMjI3MTgzMTAxOWJlNTc3N2JhNjQ5Yjc0ZDkzZTQwNjVkY2Q0ZmJkYmNhMWJmOWJjMGExZjcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.BklKQyxb-nwzjAN0uxK2Zu7MLDnfET94_Mn2S2PDp9Q" data-canonical-src="https://private-user-images.githubusercontent.com/26109316/297419069-3ac6982f-4943-4108-9b7f-51787ef1a69f.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEzNjQ3MDQsIm5iZiI6MTcxMTM2NDQwNCwicGF0aCI6Ii8yNjEwOTMxNi8yOTc0MTkwNjktM2FjNjk4MmYtNDk0My00MTA4LTliN2YtNTE3ODdlZjFhNjlmLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI1VDExMDAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTc3NWRiYWNhNzAyMjI3MTgzMTAxOWJlNTc3N2JhNjQ5Yjc0ZDkzZTQwNjVkY2Q0ZmJkYmNhMWJmOWJjMGExZjcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.BklKQyxb-nwzjAN0uxK2Zu7MLDnfET94_Mn2S2PDp9Q" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">📚 documentation</h2><a id="user-content--documentation" aria-label="Permalink: 📚 documentation" href="#-documentation"></a></p>
<p dir="auto">Visit our <a href="https://roboflow.github.io/supervision" rel="nofollow">documentation</a> page to learn how supervision can help you build computer vision applications faster and more reliably.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🏆 contribution</h2><a id="user-content--contribution" aria-label="Permalink: 🏆 contribution" href="#-contribution"></a></p>
<p dir="auto">We love your input! Please see our <a href="https://github.com/roboflow/supervision/blob/main/CONTRIBUTING.md">contributing guide</a> to get started. Thank you 🙏 to all our contributors!</p>
<p dir="auto">
    <a href="https://github.com/roboflow/supervision/graphs/contributors">
      <img src="https://camo.githubusercontent.com/462e86778f62f52ced43c5e7322cc74ba04dd49741808dc6eb539ce73a01c594/68747470733a2f2f636f6e747269622e726f636b732f696d6167653f7265706f3d726f626f666c6f772f7375706572766973696f6e" data-canonical-src="https://contrib.rocks/image?repo=roboflow/supervision">
    </a>
</p>
<br>

</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Northern lights forecasted to be visible into upper United States tonight (125 pts)]]></title>
            <link>https://www.swpc.noaa.gov/products/aurora-viewline-tonight-and-tomorrow-night-experimental</link>
            <guid>39812122</guid>
            <pubDate>Mon, 25 Mar 2024 01:27:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.swpc.noaa.gov/products/aurora-viewline-tonight-and-tomorrow-night-experimental">https://www.swpc.noaa.gov/products/aurora-viewline-tonight-and-tomorrow-night-experimental</a>, See on <a href="https://news.ycombinator.com/item?id=39812122">Hacker News</a></p>
<div id="readability-page-1" class="page"><div class="page" id="page">
    <div id="block-swx-noaa-scales-noaascalesmini">
              <h2>NOAA Scales mini</h2>
            
    <div>
      <div title="Click the scale value for more information">
	
	<p><a href="#" title="minimize"><img src="https://www.swpc.noaa.gov/sites/all/modules/custom/swx_noaa_scales/minimize.svg" alt="minimize icon"></a></p><p>Space Weather Conditions</p> 
    <div>
        <div>
			<p>24-Hour Observed Maximums</p>
            
            
            
        </div>
        

		<!-- Predictions -->
        <div>
			
			<table>
				<tbody><tr id="minor_prob_day_1">
					<th>R1-R2</th>
					<td>--</td>
				</tr>
				<tr id="major_prob_day_1">
					<th>R3-R5</th>
					<td>--</td>
				</tr>
			</tbody></table>
			<table>
				<tbody><tr id="prob_day_1">
					<th>S1 or greater</th>
					<td>--</td>
				</tr>
			</tbody></table>
            
        </div>
        <div>
			
			<table>
				<tbody><tr id="minor_prob_day_2">
					<th>R1-R2</th>
					<td>--</td>
				</tr>
				<tr id="major_prob_day_2">
					<th>R3-R5</th>
					<td>--</td>
				</tr>
			</tbody></table>
			<table>
				<tbody><tr id="prob_day_2">
					<th>S1 or greater</th>
					<td>--</td>
				</tr>
			</tbody></table>
            
        </div>
        <div>
			
			<table>
				<tbody><tr id="minor_prob_day_3">
					<th>R1-R2</th>
					<td>--</td>
				</tr>
				<tr id="major_prob_day_3">
					<th>R3-R5</th>
					<td>--</td>
				</tr>
			</tbody></table>
			<table>
				<tbody><tr id="prob_day_3">
					<th>S1 or greater</th>
					<td>--</td>
				</tr>
			</tbody></table>
            
        </div>
    </div>
</div>



<!-- Mini-scale for now -->
<div>
	<div>
		<p><a href="#" title="maximize"><img src="https://www.swpc.noaa.gov/sites/all/modules/custom/swx_noaa_scales/maximize.svg" alt="maximize icon"></a></p>
		
		
	</div>
	<p>Current Space Weather Conditions</p> 	
</div>

<div id="noaa_scale_info">
    <p><span>HF Radio: </span>Weak or minor degradation of HF radio communication on sunlit side, occasional loss of radio contact.
    <br>
    <span>Navigation: </span>Low-frequency navigation signals degraded for brief intervals.
    </p>
    <p><a href="https://www.swpc.noaa.gov/noaa-scales-explanation">More about the NOAA Space Weather Scales</a>
  </p></div>
    </div>
  </div><div id="block-system-main">
      <article about="/products/aurora-viewline-tonight-and-tomorrow-night-experimental" typeof="sioc:Item foaf:Document" id="node-product-967">
        <span property="dc:title" content="Aurora Viewline for Tonight and Tomorrow Night (Experimental)"></span>    
  
  <div>
<table id="product-grid-1">
    <tbody>
        <tr>
            <td>
                <p>Tonight's Aurora Viewline</p>
                <a href="https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tonights_static_viewline_forecast.png">
                    <img src="https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tonights_static_viewline_forecast.png" alt="Tonight's Static Viewline Forecast">
                </a>
            </td>
            <td>
                <p>Tomorrow Night's Aurora Viewline</p>
                <a href="https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tomorrow_nights_static_viewline_forecast.png">
                    <img src="https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tomorrow_nights_static_viewline_forecast.png" alt="Tomorrow Night's Static Viewline Forecast">
                </a>
            </td>
        </tr>
    </tbody>
</table>
</div>

  <div id="tabs">
    <ul>
      <li><a href="#tabs-1">Usage</a></li>
      <li><a href="#tabs-2">Impacts</a></li>
      <li><a href="#tabs-3">Details</a></li>
      <li><a href="#tabs-4">History</a></li>
      <li><a href="#tabs-5">Data</a></li>
    </ul>
  
    <div id="tabs-1"><p>This is a prediction of the intensity and location of the aurora borealis tonight and tomorrow night over North America. It also shows a 'viewline' that represents the southern-most locations from which you may see the aurora on the northern horizon.This product is based on the OVATION model and uses the maximum forecast geomagnetic activity (Kp) between 6pm and 6am US Central Time.</p>
<p>The two maps show the aurora and&nbsp;viewline&nbsp;tonight and tomorrow night. The brightness and location of the aurora is typically shown as a green oval centered on Earth’s magnetic pole.&nbsp; The green ovals turn red when the aurora is forecasted to be more intense.&nbsp; Aurora can often be observed somewhere on Earth from just after sunset or just before sunrise. The aurora is not visible during daylight hours.&nbsp; The aurora does not need to be directly overhead but can be observed from as much as a 1000 km away when the aurora is bright and if conditions are right.&nbsp;</p>
<p>A short term forecast (~30 minutes) along with the last 24 hours of activity can be found on the&nbsp;<a href="https://www.swpc.noaa.gov/products/aurora-30-minute-forecast" target="_self">Aurora - 30 Minute Forecast</a>&nbsp;page. And&nbsp;SWPC's&nbsp;new Aurora Dashboard (Experimental) collects the products and information from across&nbsp;SWPC's&nbsp;website for a one-stop shop.</p>
</div>
    
    <div id="tabs-3"><p>The OVATION (Oval Variation, Assessment, Tracking, Intensity, and Online&nbsp;Nowcasting) model&nbsp; is an empirical model of the intensity of the aurora developed at the Johns Hopkins University, Applied Physics Laboratory by Patrick Newell and co-workers[1].&nbsp; For tonight's and tomorrow night's aurora&nbsp;viewline&nbsp;prediction the&nbsp;SWPC&nbsp;<a href="https://www.swpc.noaa.gov/products/3-day-geomagnetic-forecast" target="_self">3-Day Geomagnetic Forecast</a>&nbsp;(Kp index) is used to drive the OVATION&nbsp; model. The model uses maximum forecast geomagnetic activity (Kp) between 6pm and 6am US Central&nbsp;Time tonight and tomorrow night</p>
<p>For more information on the OVATION model and aurora products, see:</p>
<ol><li>Newell, P. T., T.&nbsp;Sotirelis, and S. Wing (2009), Diffuse,&nbsp;monoenergetic, and broadband aurora: The global precipitation budget, J.&nbsp;Geophys. Res., 114, A09207,&nbsp;doi:<a href="https://dx.doi.org/10.1029/2009JA014326" target="_blank">10.1029/2009JA014326(link is external)</a>.</li>
<li>Machol, J. L., Green., J. C.,&nbsp;Redmon, R. J.,&nbsp;Viereck, R. A., Newell, P. T., (2012), Evaluation of OVATION Prime as a forecast model for visible&nbsp;aurorae, Space Weather, 10, 3,&nbsp;<a href="https://doi.org/10.1029/2011SW000746" target="_blank">doi.org/10.1029/2011SW000746</a></li>
</ol></div>
    <div id="tabs-4"><p>In 2022, the view-line product presented here for tonight's and tomorrow night's aurora first debuted.</p>
<p>The history of the OVATION model can be found on the 'History' tab of the&nbsp;<a href="https://www.swpc.noaa.gov/products/aurora-30-minute-forecast" target="_self">Aurora - 30 Minute</a>&nbsp;Forecast page.</p>

</div>
    <div id="tabs-5"><p>Because the view-line images are based on forecast Kp, the images themselves are not archived.</p></div>
  </div>  
  
  
</article>    </div>      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Format Dialog in Windows NT (224 pts)]]></title>
            <link>https://twitter.com/davepl1968/status/1772042158046146792</link>
            <guid>39811604</guid>
            <pubDate>Sun, 24 Mar 2024 23:52:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/davepl1968/status/1772042158046146792">https://twitter.com/davepl1968/status/1772042158046146792</a>, See on <a href="https://news.ycombinator.com/item?id=39811604">Hacker News</a></p>
Couldn't get https://twitter.com/davepl1968/status/1772042158046146792: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[DongleHider+ Framework Laptop Expansion Card (210 pts)]]></title>
            <link>https://github.com/LeoDJ/FW-EC-DongleHiderPlus</link>
            <guid>39811261</guid>
            <pubDate>Sun, 24 Mar 2024 22:53:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus">https://github.com/LeoDJ/FW-EC-DongleHiderPlus</a>, See on <a href="https://news.ycombinator.com/item?id=39811261">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">DongleHider+ Framework Laptop Expansion Card</h2><a id="user-content-donglehider-framework-laptop-expansion-card" aria-label="Permalink: DongleHider+ Framework Laptop Expansion Card" href="#donglehider-framework-laptop-expansion-card"></a></p>
<p dir="auto">Want to use a Logitech Unifying Dongle (or similar) without having a dongle permanently sticking out and giving up on a precious expansion card slot?</p>
<p dir="auto">Now there's the <code>DongleHider+</code>!</p>
<p dir="auto">Simply (permanently) mount the dongle inside the card and still have an USB A port available!</p>
<p dir="auto">There even is room and solder pads for 1-2 additional dongles. Your imagination (and physics) are the only limits!</p>
<p dir="auto">See also the <a href="https://chaos.social/@LeoDJ/112040053271880119" rel="nofollow">thread on Mastodon about the build process etc</a>.</p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/doc/DongleHider+%20assembled.jpeg"><img src="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/raw/main/doc/DongleHider+%20assembled.jpeg" width="49%"></a>&nbsp;
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/doc/DongleHider+%20installed.jpg"><img src="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/raw/main/doc/DongleHider+%20installed.jpg" width="49%"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Compatibility Notes</h2><a id="user-content-compatibility-notes" aria-label="Permalink: Compatibility Notes" href="#compatibility-notes"></a></p>
<p dir="auto">The expansion card was only tested on <strong>Windows</strong> and <strong>AMD</strong> Framework <strong>13 and 16</strong> laptops as of right now. There the following behaviour has been observed:</p>
<ul dir="auto">
<li>With only a dongle active, the CH334 hub IC draws around 20mA. (In addition to the ~25mA of the Unifying dongle)
<ul dir="auto">
<li>When nothing is connected to the hub, it goes to sleep and draws &lt;1mA. (But this is seldomly the case with a dongle permanently attached to it :P )</li>
</ul>
</li>
<li>Despite earlier fears, the USB 3 "route-around-2.0-hub" topology doesn't seem to cause problems in the wild, except:</li>
<li>When connected to a <strong>USB4 capable expansion card slot</strong> and an external <strong>USB 3 device</strong> is plugged in, the <strong>internal dongle stops working</strong>, but is still displayed as connected in Windows.
<ul dir="auto">
<li>As soon as the USB 3 device gets unplugged, the internal dongle immediately begins to work again (probably without a re-enumeration).</li>
<li>USB 2 devices seem to work without a problem for the most part, although one of the tested USB thumb drives took a few re-plugs until it enumerated.</li>
<li>This behaviour is not seen on the other non-USB4-capable expansion card slots, there USB 3 devices work great alongside the internal dongle</li>
</ul>
</li>
</ul>
<p dir="auto">It's currently unclear what the behaviour would be under Linux or on Intel laptops. <sup>[You can help expand this]</sup></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Dongles</h3><a id="user-content-dongles" aria-label="Permalink: Dongles" href="#dongles"></a></p>
<p dir="auto">This project was aimed first and foremost at Logitech Unifying dongles. But you can check if your dongle would fit by disassembling it and checking its size against the CAD model (linked below).<br>
Keep in mind that there is more room under / above the PCB too. (I just made the cutout so a Unifying dongle PCB would fit neat-ish)</p>
<p dir="auto">The Unifying dongles can be disassembled pretty easily:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/49ca7b68679b3efc66027cdc9d114202bf0e8f6669718bdfa7b6d9846afc6058/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f372f37642f4c6f6769746563685f756e696679696e675f72656365697665722e6a70672f36343070782d4c6f6769746563685f756e696679696e675f72656365697665722e6a7067"><img src="https://camo.githubusercontent.com/49ca7b68679b3efc66027cdc9d114202bf0e8f6669718bdfa7b6d9846afc6058/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f372f37642f4c6f6769746563685f756e696679696e675f72656365697665722e6a70672f36343070782d4c6f6769746563685f756e696679696e675f72656365697665722e6a7067" width="200px" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Logitech_unifying_receiver.jpg/640px-Logitech_unifying_receiver.jpg"></a></td>
<td><strong>Gen 1:</strong> <br>Carefully break off the plastic from the metal part using a pair of pliers. <br>(Can be glued back together, if needed)</td>
</tr>
<tr>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ce2fcb58b1cffbb74ac36e9c8a95e229a095c32a65d169947a8ad84b8f592328/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f322f32652f4c6f6769746563685f556e696679696e675f52656365697665725f5553422e6a70672f35363670782d4c6f6769746563685f556e696679696e675f52656365697665725f5553422e6a7067"><img src="https://camo.githubusercontent.com/ce2fcb58b1cffbb74ac36e9c8a95e229a095c32a65d169947a8ad84b8f592328/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f322f32652f4c6f6769746563685f556e696679696e675f52656365697665725f5553422e6a70672f35363670782d4c6f6769746563685f556e696679696e675f52656365697665725f5553422e6a7067" width="200px" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Logitech_Unifying_Receiver_USB.jpg/566px-Logitech_Unifying_Receiver_USB.jpg"></a></td>
<td><strong>Gen 2:</strong> <br>Slide flat screwdriver (or similar) between the metal and the orange plastic of the front of the USB a plug and carefully pry open the metal shell until it slides off. <br><a href="https://www.youtube.com/watch?v=NB5uVCrXxT8" rel="nofollow">Youtube video</a></td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">PCB</h2><a id="user-content-pcb" aria-label="Permalink: PCB" href="#pcb"></a></p>
<ul dir="auto">
<li><a href="https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FLeoDJ%2FFW-EC-DongleHiderPlus%2Ftree%2Fmain%2FDongleHiderPlus_PCB" rel="nofollow">View the latest schematic and board view</a> thanks to KiCanvas.</li>
<li><a href="https://leodj.github.io/FW-EC-DongleHiderPlus/DongleHiderPlus_PCB/DongleHiderPlus_PCB.ibom.html" rel="nofollow">Interactive HTML BOM</a></li>
<li>I've ordered the PCB and assembled it myself, but it should be able to be mostly assembled by PCBA services (like JLCPCB) too. The Gerber/BOM/CPL files are provided in the <a href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/DongleHiderPlus_PCB/jlcpcb/production_files">PCB/jlcpcb/production_files/</a> folder.</li>
</ul>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/doc/PCB%203D.png"><img src="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/raw/main/doc/PCB%203D.png" width="49%"></a>&nbsp;
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/doc/PCB%20assembled.jpeg"><img src="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/raw/main/doc/PCB%20assembled.jpeg" width="49%"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mechanical Design</h2><a id="user-content-mechanical-design" aria-label="Permalink: Mechanical Design" href="#mechanical-design"></a></p>
<ul dir="auto">
<li>The <a href="https://cad.onshape.com/documents/ed6483270486e65268e8fd84/w/d29ba2284b9bcf206122f777/e/2459b9ec86bce6d6c9526a6b?renderMode=0&amp;uiState=65e6561b74c806687c72f766" rel="nofollow">CAD model</a> for the shell etc. was done in OnShape.</li>
<li>The PCB is fastened to the case using 3 M2x3 self-tapping screws</li>
<li>Simply print the .step file from the <a href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/Mechanical/DongleHiderPlus_Shell.step">Mechanical/</a> folder. I printed it lying down with 0.1mm layer height and supports (for the lip on the bottom). But standing vertically (on the USB-C hole side) should work too.</li>
</ul>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/blob/main/doc/Shell%20CAD.png"><img src="https://github.com/LeoDJ/FW-EC-DongleHiderPlus/raw/main/doc/Shell%20CAD.png" width="49%"></a>
</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[“Emergent” abilities in LLMs actually develop gradually and predictably – study (245 pts)]]></title>
            <link>https://www.quantamagazine.org/how-quickly-do-large-language-models-learn-unexpected-skills-20240213/</link>
            <guid>39811155</guid>
            <pubDate>Sun, 24 Mar 2024 22:36:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/how-quickly-do-large-language-models-learn-unexpected-skills-20240213/">https://www.quantamagazine.org/how-quickly-do-large-language-models-learn-unexpected-skills-20240213/</a>, See on <a href="https://news.ycombinator.com/item?id=39811155">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Two years ago, in a project called the <a href="https://arxiv.org/abs/2206.04615">Beyond the Imitation Game benchmark</a>, or BIG-bench, 450 researchers compiled a list of 204 tasks designed to test the capabilities of large language models, which power chatbots like ChatGPT. On most tasks, performance improved predictably and smoothly as the models scaled up — the larger the model, the better it got. But with other tasks, the jump in ability wasn’t smooth. The performance remained near zero for a while, then performance jumped. Other studies found similar leaps in ability.</p>
<p>The authors described this as “breakthrough” behavior; other researchers have likened it to a phase transition in physics, like when liquid water freezes into ice. In <a href="https://arxiv.org/abs/2206.07682">a paper</a> published in August 2022, researchers noted that these behaviors are not only surprising but unpredictable, and that they should inform the evolving conversations around AI safety, potential and risk. They called the abilities “<a href="https://www.quantamagazine.org/the-unpredictable-abilities-emerging-from-large-ai-models-20230316/">emergent</a>,” a word that describes collective behaviors that only appear once a system reaches a high level of complexity.</p>
<p>But things may not be so simple. <a href="https://arxiv.org/abs/2304.15004">A new paper</a> by a trio of researchers at Stanford University posits that the sudden appearance of these abilities is just a consequence of the way researchers measure the LLM’s performance. The abilities, they argue, are neither unpredictable nor sudden. “The transition is much more predictable than people give it credit for,” said <a href="https://cs.stanford.edu/~sanmi/">Sanmi Koyejo</a>, a computer scientist at Stanford and the paper’s senior author. “Strong claims of emergence have as much to do with the way we choose to measure as they do with what the models are doing.”</p>

<p>We’re only now seeing and studying this behavior because of how large these models have become. Large language models train by analyzing enormous <a href="https://openai.com/research/language-unsupervised">datasets of text</a> — words from online sources including books, web searches and Wikipedia — and finding links between words that often appear together. The size is measured in terms of parameters, roughly analogous to all the ways that words can be connected. The more parameters, the more connections an LLM can find. GPT-2 had 1.5 billion parameters, while GPT-3.5, the LLM that powers ChatGPT, uses 350 billion. GPT-4, which debuted in March 2023 and now underlies Microsoft Copilot, reportedly uses 1.75 trillion.</p>
<p>That rapid growth has brought an astonishing surge in performance and efficacy, and no one is disputing that large enough LLMs can complete tasks that smaller models can’t, including ones for which they weren’t trained. The trio at Stanford who cast emergence as a “mirage” recognize that LLMs become more effective as they scale up; in fact, <a href="https://www.quantamagazine.org/new-theory-suggests-chatbots-can-understand-text-20240122/">the added complexity</a> of larger models should make it possible to get better at more difficult and diverse problems. But they argue that whether this improvement looks smooth and predictable or jagged and sharp results from the choice of metric — or even a paucity of test examples — rather than the model’s inner workings.</p>

<p>Three-digit addition offers an example. In the 2022 BIG-bench study, researchers reported that with fewer parameters, both GPT-3 and another LLM named LAMDA failed to accurately complete addition problems. However, when GPT-3 trained using 13 billion parameters, its ability changed as if with the flip of a switch. Suddenly, it could add — and LAMDA could, too, at 68 billion parameters. This suggests that the ability to add emerges at a certain threshold.</p>
<p>But the Stanford researchers point out that the LLMs were judged only on accuracy: Either they could do it perfectly, or they couldn’t. So even if an LLM predicted most of the digits correctly, it failed. That didn’t seem right. If you’re calculating 100 plus 278, then 376 seems like a much more accurate answer than, say, −9.34.</p>
<p>So instead, Koyejo and his collaborators tested the same task using a metric that awards partial credit. “We can ask: How well does it predict the first digit? Then the second? Then the third?” he said.</p>
<p>Koyejo credits the idea for the new work to his graduate student Rylan Schaeffer, who he said noticed that an LLM’s performance seems to change with how its ability is measured. Together with Brando Miranda, another Stanford graduate student, they chose new metrics showing that as parameters increased, the LLMs predicted an increasingly correct sequence of digits in addition problems. This suggests that the ability to add isn’t emergent — meaning that it undergoes a sudden, unpredictable jump — but gradual and predictable. They find that with a different measuring stick, emergence vanishes.</p>
</div></div>]]></description>
        </item>
    </channel>
</rss>