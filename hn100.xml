<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 23 Dec 2023 19:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Xmas.c, winner of the 1988 International Obfuscated C Code Contest (177 pts)]]></title>
            <link>https://udel.edu/~mm/xmas/</link>
            <guid>38745668</guid>
            <pubDate>Sat, 23 Dec 2023 16:56:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://udel.edu/~mm/xmas/">https://udel.edu/~mm/xmas/</a>, See on <a href="https://news.ycombinator.com/item?id=38745668">Hacker News</a></p>
<div id="readability-page-1" class="page">



 In 1988 an impressive piece of C code named xmas.c
 was a winner in the International Obfuscated C Code Contest.
 After years of being impressed by the program (I first
 saw it around 2000), in November 2008, with some spare time on my hands,
 I decided to rip apart the code and figure out what was going on.

 <h3>The Code</h3>
 <a href="https://udel.edu/~mm/xmas/xmas.c">Click here to download the code.</a>
<xmp>
/*
Least likely to compile successfully: <ian@unipalm.co.uk> Ian Phillipps 

    Ian Phillipps
    Cambridge Consultants Ltd
    Science Park
    Milton Road
    Cambridge CB4 4DW
    England

Compile and run without parameters.

The program is smaller than even the 'compressed' form of its output,
and thus represents a new departure in text compression standards.

The judges thought that this program looked like what you would get
by pounding on the keys of an old typewriter at random.

Copyright (c) 1988, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use
is granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from both Landon Curt Noll and Larry Bassel.
*/

#include <stdio.h>
main(t,_,a)
char
*
a;
{
        return!

0<t?
t<3?

main(-79,-13,a+
main(-87,1-_,
main(-86, 0, a+1 )


+a)):

1,
t<_?
main(t+1, _, a )
:3,

main ( -94, -27+t, a )
&&t == 2 ?_
<13 ?

main ( 2, _+1, "%s %d %d\n" )

:9:16:
t<0?
t<-72?
main( _, t,
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l,+,/n{n+,/+#n+,/#;\
#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l q#'+d'K#!/+k#;\
q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# ){nl]!/n{n#'; \
r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#\
\
n'wk nw' iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c ;;\
{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;\
#'rdq#w! nr'/ ') }+}{rl#'{n' ')# }'+}##(!!/")
:
t<-50?
_==*a ?
putchar(31[a]):

main(-65,_,a+1)
:
main((*a == '/') + t, _, a + 1 )
:

0&#60;t?

main ( 2, 2 , "%s")
:*a=='/'||

main(0,

main(-61,*a, "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m
.vpbks,fxntdCeghiry")

,a+1);}

</xmp>

<h3>The Output</h3>

Amazingly, the output is

<pre>[mm@noise]$ xmas
On the first day of Christmas my true love gave to me
a partridge in a pear tree.

On the second day of Christmas my true love gave to me
two turtle doves
and a partridge in a pear tree.

On the third day of Christmas my true love gave to me
three french hens, two turtle doves
and a partridge in a pear tree.

On the fourth day of Christmas my true love gave to me
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the fifth day of Christmas my true love gave to me
five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the sixth day of Christmas my true love gave to me
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the seventh day of Christmas my true love gave to me
seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the eigth day of Christmas my true love gave to me
eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the ninth day of Christmas my true love gave to me
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the tenth day of Christmas my true love gave to me
ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the eleventh day of Christmas my true love gave to me
eleven pipers piping, ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the twelfth day of Christmas my true love gave to me
twelve drummers drumming, eleven pipers piping, ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.
</pre>

<h3>Analysis</h3>

So, how in the world was this accomplished?  First, the code needs to be
rewritten in a more legible manner.  Let's replace all <tt>a ? b : c</tt>
constructs with explicit <tt>if-then-else</tt> blocks.  Additionally, it is
helpful to define character strings whose names will become clear shortly.

<pre>#include &lt;stdio.h&gt;

char *words =
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/";

char *shift = "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry";

main() {
    xmas(1, 0, '\0');
}

xmas(int t, int _, char *a) {

    if (t &lt; -72) {
        return xmas(_, t, words);
    }

    if (t &lt; -50) {
        if (_ == *a) {
            return putchar(a[31]);
        } else {
            return xmas(-65, _, a+1);
        }
    }

    if (t &lt; 0) {
        return xmas((*a == '/')+t, _, a+1);
    }

    if (t == 0) {
        if (*a == '/') {
            return 1;
        } else {
            return xmas(0, xmas(-61, *a, shift), a+1);
        }
    }

    if (t == 1) {
        return xmas(2, 2, "%s");
    }

    if (t == 2)
        xmas(-79, -13, a + xmas(-87, 1-_, a + xmas(-86, 0, a+1)));

    if (t &lt; _)
        xmas(t+1, _, a);

    if (xmas(-94, -27+t, a) &amp;&amp; t == 2) {
        if (_ &lt; 13)
            return xmas(2, _+1, "%s %d %d\n");
        else
            return 9;
    } else {
        return 16;
    }
}
</pre>

Already we can see some hint of what is happening.  The variable <tt>t</tt> has
special significance in controlling the direction of recursion.  The
first conditional, <tt>if (t &lt; -72)</tt>, is just misdirection mostly
for the fun of
it.  It swaps the first two arguments and recurses using the encrypted string
of words for the final argument.  The utility of the conditional is how it
allows nested recursion as seen in the <tt>if (t == 2)</tt> block by ignoring
the third argument.

<p>The second block has more real work going on.  If the character stored
in the variable <tt>_</tt> does not match the first character of the
string <tt>a</tt>, the code recurses in such a way that this same block
of code will again be entered.  That is, <tt>t=-65</tt> forces a return
to the <tt>if (t &lt; -50)</tt> block.  The recursion steps through string
<tt>a</tt>, character by character.  When finally <tt>_ == a</tt>, the
character at <tt>a+31</tt> is printed and returned.

</p><p>Further study shows why this is done.  The string I renamed to
<tt>shift</tt> is really two strings concatenated.  A character found in the
first half of the string is 31 places away from its decoded equivalent.  For
instance, the exclamation point at the first place in the string is followed 31
places later by a newline.  So the string offers the solution to a
substitution cipher.

</p><p>In the code below, comments are added.  The variable <tt>shift</tt> has a
comment under it lining up the decoded (shifted by 31) values of the string.
For example, under the first character <tt>!</tt>, is character in the string
shifted by 31 places, the newline character.  The encoded/decoded halves of
the string are separated at the colon character.

</p><p>The other variable, newly named <tt>words</tt> in the code below, is the
set of encrypted words used to print the Christmas carol lyrics.  Using the
cipher solution string, the words have been decoded in the comments of the
source code below.  Notice that the ordinal numbers and lines of verses are
separated by slash characters.

</p><p>The third conditional, <tt>if (t &lt; 0)</tt> is used to find <tt>|t|</tt> slash
characters and then after <tt>t</tt> recursions, to return <tt>xmas(0, _,
a+1)</tt>, where <tt>a+1</tt> is the string starting at the character after the
slash.  Again, through recursion it simply gets us to the character after 
|t|'th slash.  The next call goes into the conditional block described next.

</p><p>The fourth conditional, <tt>if (t == 0)</tt>, uses recursion with the
2nd conditional block, <tt>t &lt; -50</tt>, to print out the decoded string up
to the next slash and then returns 1.

</p><p>The <tt>t == 1</tt> block is used just a single time at the start to get
the recursion going properly, that is, with <tt>xmas(2, 2, "%s")</tt> where
the string is unimportant because it is never used.

</p><p>The <tt>t == 2</tt> block is used to print "On the <i>[ordinal]</i> day of
Christmas my true love gave to me\n".

</p><p>The final two conditional blocks keep the recursion running in two
directions.  First, the final block counts up to day 12.  The second
to last block, counts down from the current day to print lyrics of the
current verse in reverse order.

</p><pre>#include &lt;stdio.h&gt;

<span color="#0000ff">/*
 * Substitution cipher solution.  Letters up to and including the colon are 
 * shifted by 31 places to the right to find the decoded value.
 */</span>
char *shift = "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry";
<span color="#0000ff">         /*  "\nuwloca-O;m .vpbks,fxntdCeghiry"; */</span>

char *words =
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/";

<span color="#0000ff">/*
  Decoded values of 'words' using the substitution cipher string 'shift':

"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
 <span color="#00ff00">On the /first/second/third/fourth/fifth/sixth/seventh/eigth/ninth/tenth/e </span>

;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
<span color="#00ff00">leventh/twelfth/ day of Christmas my true love ga </span>

q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
<span color="#00ff00">ve to me0/twelve drummers drumming, /eleven pipers piping, /ten lords a-lea </span>

){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
<span color="#00ff00">ping,0/nine ladies dancing, /eight maids a-milking, /seven swans a\ </span>

iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
<span color="#00ff00">-swimming,0/six geese a-laying, /five gold rings;0/four ca
</span>

;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
<span color="#00ff00">lling birds, /three french hens, /two turtle doves0and /a partridge in a pea </span>

}'+}##(!!/";
<span color="#00ff00">r tree.00/ </span>

*/</span>

main() {
    xmas(1, 0, '\0');
}

xmas(int t, int _, char *a) {

    <span color="#0000ff">/* Swap first two args and use new 3rd. */</span>
    if (t &lt; -72) {
        return xmas(_, t, words);
    }

    <span color="#0000ff">/*
     * Loop through a till a==_, then print char at a+31.
     * That is, given character in variable '_' and substitution cipher
     * solution in 'a', decode character '_' and print &amp; return it.
     */</span>
    if (t &lt; -50) {
        if (_ == *a) {
            return putchar(a[31]);
        } else {
            <span color="#0000ff">/* Loop until _ == *a. */</span>
            return xmas(-65, _, a+1);
        }
    }

    <span color="#0000ff">/*
     * Loop until finding -t number of slash characters in a[] and
     * return string starting at character after that slash.
     */</span>
    if (t &lt; 0) {
        return xmas((*a == '/')+t, _, a+1);
    }

    <span color="#0000ff">/*
     * Decode &amp; print word up to next slash character and then return 1.
     */</span>
    if (t == 0) {
        if (*a == '/') {
            return 1;
        } else {
            return xmas(0, xmas(-61, *a, shift), a+1);
        }
    }

    <span color="#0000ff">/*
     * Start off recursion.  Only called once at very start.
     */</span>
    if (t == 1) {
        return xmas(2, 2, "%s");
    }

    if (t == 2)
        xmas(-79, <span color="#0000ff">/* " day of Christmas my true love gave to me\n" */</span>
             -13,
             a + xmas(-87, <span color="#0000ff">/* print which day of Christmas it is */</span>
                      1-_,
                      a + xmas(-86, 0, a+1))); <span color="#0000ff">/* "On the " */</span>

    <span color="#0000ff">/*
     * Recurse, count down days of Christmas
     * from '_' to print lyrics of current verse in reverse day order.
     * I.e., day 12, day 11, etc.
     */</span>
    if (t &lt; _)
        xmas(t+1, _, a);

    <span color="#0000ff">/*
     * Print phrase for current verse.
     * E.g., t == 2: "a partridge in a pear tree\n\n"
     * etc.
     */</span>
    if (xmas(-94, -27+t, a) &amp;&amp; t == 2) {
        if (_ &lt; 13)
            <span color="#0000ff">/* Recurse to next higher day of Christmas.  String not used. */</span>
            return xmas(2, _+1, "%s %d %d\n");
        else
            <span color="#0000ff">/* Just misdirection, return value not used. */</span>
            return 9;
    } else {
        <span color="#0000ff">/* More misdirection! */</span>
        return 16;
    }
}
</pre>

<h2>Simpler</h2>

With new understanding of what's going on, the program can be simplified
by using some iteration and C string library routines.  I have to admit to
preferring recursion myself, but since the analysis has gone this far, let's
not stop now.  Here's what we might see after further simplification:

<pre>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char *words =
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/";

char *shift = "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry";

main() {
    xmas(2, 2, "");
}

xmas(int t, int _, char *a) {

    <span color="#0000ff">/*
     * Loop until finding |t| number of slash characters in a[] and
     * return string starting at character after that slash.
     */</span>
    if (t &lt; 0) {
        while (t++ &lt; 0)
            a = 1 + index(a, '/');
        return xmas(0, _, a);
    }

    <span color="#0000ff">/*
     * Decode &amp; print word up to next slash character and return 0 or any int.
     */</span>
    if (t == 0) {
        while (*a != '/')
            putchar(index(shift, *a++)[31]); <span color="#0000ff">/* Decode *a and print it. */</span>
        return 0;
    }

    if (t == 2) {
        <span color="#0000ff">/* 2nd arg is a don't-care since it's unused. */</span>
        xmas(0, 0, words); <span color="#0000ff">/* "On the " */</span>
        xmas(1-_, 0, words); <span color="#0000ff">/* print which day of Christmas it is */</span>
        xmas(-13, 0, words); <span color="#0000ff">/* " my true love gave to me\n" */</span>
    }

    <span color="#0000ff">/*
     * Recurse and count down days of Christmas
     * from '_' down to and including day 2.
     */</span>
    if (t &lt; _)
        xmas(t+1, _, a);

    <span color="#0000ff">/*
     * t==2: "a partridge in a pear tree\n\n"
     * etc.
     */</span>
    xmas(-27+t, 0, words);
    if (t == 2 &amp;&amp; _ &lt; 13)
        return xmas(2, _+1, ""); <span color="#0000ff">/* Next higher day of Christmas. */</span>
}
</pre>

<h2>In Conclusion...</h2>

This could go on till the ultimate simplification of doing nothing more than
printing out the lyrics, but you get the idea.  This is one of the better
obfuscated C programs I've come across because of using the
substitution cipher along with recursion.  That was followed by the addition
of a small bit of unnecessary code and use of random arguments when the
arguments were in fact not made use of.  A very nice little bundle of C
code!

<p>Understanding what's happening is still a long way from writing it.  What a
great example of creativity.

</p><p>Merry Christmas!<br>
Mike Markowski, mike.ab3ap -A- gmail -D- com

<!-- Start of StatCounter Code -->



<!-- End of StatCounter Code -->



</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ferret: A Multimodal Large Language Model by Apple (239 pts)]]></title>
            <link>https://github.com/apple/ml-ferret</link>
            <guid>38745348</guid>
            <pubDate>Sat, 23 Dec 2023 16:19:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/apple/ml-ferret">https://github.com/apple/ml-ferret</a>, See on <a href="https://news.ycombinator.com/item?id=38745348">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text">
<h2 tabindex="-1" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apple/ml-ferret/blob/main/figs/ferret_icon.png"><img src="https://github.com/apple/ml-ferret/raw/main/figs/ferret_icon.png" alt="Alt text for the image" width="40" height="45"></a> Ferret: Refer and Ground Anything Anywhere at Any Granularity</h2>
<p dir="auto"><em>An End-to-End MLLM that Accept Any-Form Referring and Ground Anything in Response.</em> [<a href="https://arxiv.org/abs/2310.07704" rel="nofollow">Paper</a>]</p>
<p dir="auto"><a href="https://hxyou.github.io/" rel="nofollow">Haoxuan You*</a>, <a href="https://haotian-zhang.github.io/" rel="nofollow">Haotian Zhang*</a>, <a href="https://zhegan27.github.io/" rel="nofollow">Zhe Gan</a>, <a href="https://scholar.google.com/citations?user=l1hP40AAAAAJ&amp;hl=en" rel="nofollow">Xianzhi Du</a>, <a href="https://zbwglory.github.io/" rel="nofollow">Bowen Zhang</a>, <a href="https://www.cs.cmu.edu/~ziruiw/" rel="nofollow">Zirui Wang</a>, <a href="http://llcao.net/" rel="nofollow">Liangliang Cao</a>, <a href="https://www.ee.columbia.edu/~sfchang/" rel="nofollow">Shih-Fu Chang</a>, <a href="https://sites.google.com/site/yinfeiyang/" rel="nofollow">Yinfei Yang</a>
[*: equal contribution]</p>
<h2 tabindex="-1" dir="auto">Overview</h2>
<p dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/apple/ml-ferret/blob/main/figs/ferret_fig_diagram_v2.png"><img src="https://github.com/apple/ml-ferret/raw/main/figs/ferret_fig_diagram_v2.png" width="100%"></a> <br>
    Diagram of Ferret Model.
</p>
<p dir="auto">Key Contributions:</p>
<ul dir="auto">
<li>Ferret Model - <strong>Hybrid Region Representation + Spatial-aware Visual Sampler</strong> enable fine-grained and open-vocabulary referring and grounding in MLLM.</li>
<li>GRIT Dataset (~1.1M) - A <strong>Large-scale, Hierarchical, Robust</strong> ground-and-refer instruction tuning dataset.</li>
<li>Ferret-Bench - A multimodal evaluation benchmark that jointly requires <strong>Referring/Grounding, Semantics, Knowledge, and Reasoning</strong>.</li>
</ul>
<h2 tabindex="-1" dir="auto">Release</h2>
<ul dir="auto">
<li>[12/14] 🔥 We released the <a href="#checkpoints">checkpoints(7B, 13B)</a>.</li>
<li>[10/30] 🔥 We released the code of <strong>FERRET</strong> model and <a href="https://github.com/apple/ml-ferret/blob/main/ferret/eval/ferret_gpt4_data">Ferret-Bench</a>.</li>
</ul>
<p dir="auto"><strong>Usage and License Notices</strong>: The data, and code is intended and licensed for research use only. They are also restricted to uses that follow the license agreement of LLaMA, Vicuna and GPT-4. The dataset is CC BY NC 4.0 (allowing only non-commercial use) and models trained using the dataset should not be used outside of research purposes.</p>
<h2 tabindex="-1" dir="auto">Contents</h2>
<ul dir="auto">
<li><a href="#install">Install</a></li>
<li><a href="#train">Train</a></li>
<li><a href="#evaluation">Evaluation</a></li>
<li><a href="#demo">Demo</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Install</h2>
<ol dir="auto">
<li>Clone this repository and navigate to FERRET folder</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/apple/ml-ferret
cd ml-ferret"><pre>git clone https://github.com/apple/ml-ferret
<span>cd</span> ml-ferret</pre></div>
<ol start="2" dir="auto">
<li>Install Package</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="conda create -n ferret python=3.10 -y
conda activate ferret
pip install --upgrade pip  # enable PEP 660 support
pip install -e .
pip install pycocotools
pip install protobuf==3.20.0"><pre>conda create -n ferret python=3.10 -y
conda activate ferret
pip install --upgrade pip  <span><span>#</span> enable PEP 660 support</span>
pip install -e <span>.</span>
pip install pycocotools
pip install protobuf==3.20.0</pre></div>
<ol start="3" dir="auto">
<li>Install additional packages for training cases</li>
</ol>
<div data-snippet-clipboard-copy-content="pip install ninja
pip install flash-attn --no-build-isolation"><pre><code>pip install ninja
pip install flash-attn --no-build-isolation
</code></pre></div>
<h2 tabindex="-1" dir="auto">Train</h2>
<p dir="auto">FERRET is trained on 8 A100 GPUs with 80GB memory. To train on fewer GPUs, you can reduce the <code>per_device_train_batch_size</code> and increase the <code>gradient_accumulation_steps</code> accordingly. Always keep the global batch size the same: <code>per_device_train_batch_size</code> x <code>gradient_accumulation_steps</code> x <code>num_gpus</code>.</p>
<h3 tabindex="-1" dir="auto">Hyperparameters</h3>
<p dir="auto">We use a similar set of hyperparameters as LLaVA(Vicuna) in finetuning.</p>
<table>
<thead>
<tr>
<th>Hyperparameter</th>
<th>Global Batch Size</th>
<th>Learning rate</th>
<th>Epochs</th>
<th>Max length</th>
<th>Weight decay</th>
</tr>
</thead>
<tbody>
<tr>
<td>FERRET-7B</td>
<td>128</td>
<td>2e-5</td>
<td>3</td>
<td>2048</td>
<td>0</td>
</tr>
<tr>
<td>FERRET-13B</td>
<td>128</td>
<td>2e-5</td>
<td>3</td>
<td>2048</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 tabindex="-1" dir="auto">Prepare Vicuna checkpoint and LLaVA's projector</h3>
<p dir="auto">Before you start, prepare our base model Vicuna, which is an instruction-tuned chatbot. Please download its weights following the instructions <a href="https://github.com/lm-sys/FastChat#model-weights">here</a>. Vicuna v1.3 is used in FERRET.</p>
<p dir="auto">Then download LLaVA's first-stage pre-trained projector weight (<a href="https://huggingface.co/liuhaotian/llava-336px-pretrain-vicuna-7b-v1.3" rel="nofollow">7B</a>, <a href="https://huggingface.co/liuhaotian/llava-336px-pretrain-vicuna-13b-v1.3" rel="nofollow">13B</a>).</p>
<h3 tabindex="-1" dir="auto">FERRET Training</h3>
<p dir="auto">The scripts are provided (<a href="https://github.com/apple/ml-ferret/blob/main/experiments/ferret_7b_train.sh">7B</a>, <a href="https://github.com/apple/ml-ferret/blob/main/experiments/ferret_13b_train.sh">13B</a>).</p>
<h2 tabindex="-1" dir="auto">Evaluation</h2>
<p dir="auto">Please see this <a href="https://github.com/apple/ml-ferret/blob/main/EVAL.md">doc</a> for the details.</p>
<h2 tabindex="-1" dir="auto">Checkpoints</h2>
<p dir="auto">We extracted the <code>delta</code> between our pre-trained model and Vicuna. Please first download weights of Vicuna following the <a href="#prepare-vicuna-checkpoint-and-llavas-projector">previous instruction</a>. Then download our prepared offsets of weights: <a href="https://docs-assets.developer.apple.com/ml-research/models/ferret/ferret-7b/ferret-7b-delta.zip" rel="nofollow">7B</a>, <a href="https://docs-assets.developer.apple.com/ml-research/models/ferret/ferret-13b/ferret-13b-delta.zip" rel="nofollow">13B</a> using <code>wget</code> or <code>curl</code>, and unzip the downloaded offsets. Lastly, apply the offset to the Vicuna's weight by running the following script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# 7B
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-7b-v1-3 \
    --target ./model/ferret-7b-v1-3 \
    --delta path/to/ferret-7b-delta
# 13B
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-13b-v1-3 \
    --target ./model/ferret-13b-v1-3 \
    --delta path/to/ferret-13b-delta"><pre><span><span>#</span> 7B</span>
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-7b-v1-3 \
    --target ./model/ferret-7b-v1-3 \
    --delta path/to/ferret-7b-delta
<span><span>#</span> 13B</span>
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-13b-v1-3 \
    --target ./model/ferret-13b-v1-3 \
    --delta path/to/ferret-13b-delta</pre></div>
<p dir="auto"><strong>Notices</strong>: Apple's rights in the attached weight differentials are hereby licensed under the CC-BY-NC license. Apple makes no representations with regards to LLaMa or any other third party software, which are subject to their own terms.</p>
<p dir="auto">Please refer to the next section about how to set up a local demo with pre-trained weight.</p>
<h2 tabindex="-1" dir="auto">Demo</h2>
<p dir="auto">To run our demo, you need to train FERRET and use the checkpoints locally. Gradio web UI is used. Please run the following commands one by one.</p>
<h4 tabindex="-1" dir="auto">Launch a controller</h4>
<div dir="auto" data-snippet-clipboard-copy-content="python -m ferret.serve.controller --host 0.0.0.0 --port 10000"><pre>python -m ferret.serve.controller --host 0.0.0.0 --port 10000</pre></div>
<h4 tabindex="-1" dir="auto">Launch a gradio web server.</h4>
<div dir="auto" data-snippet-clipboard-copy-content="python -m ferret.serve.gradio_web_server --controller http://localhost:10000 --model-list-mode reload --add_region_feature"><pre>python -m ferret.serve.gradio_web_server --controller http://localhost:10000 --model-list-mode reload --add_region_feature</pre></div>
<h4 tabindex="-1" dir="auto">Launch a model worker</h4>
<p dir="auto">This is the worker that load the ckpt and do the inference on the GPU.  Each worker is responsible for a single model specified in <code>--model-path</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="CUDA_VISIBLE_DEVICES=0 python -m ferret.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path ./checkpoints/FERRET-13B-v0 --add_region_feature"><pre>CUDA_VISIBLE_DEVICES=0 python -m ferret.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path ./checkpoints/FERRET-13B-v0 --add_region_feature</pre></div>
<p dir="auto">Wait until the process finishes loading the model and you see "Uvicorn running on ...".  Now, refresh your Gradio web UI, and you will see the model you just launched in the model list.</p>
<p dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/apple/ml-ferret/blob/main/figs/ferret_demo.png"><img src="https://github.com/apple/ml-ferret/raw/main/figs/ferret_demo.png" width="105%"></a> <br>
    Example of Ferret Interactive Demo.
</p>
<h2 tabindex="-1" dir="auto">Citation</h2>
<p dir="auto">If you find Ferret useful, please cite using this BibTeX:</p>
<div dir="auto" data-snippet-clipboard-copy-content="@article{you2023ferret,
  title={Ferret: Refer and Ground Anything Anywhere at Any Granularity},
  author={You, Haoxuan and Zhang, Haotian and Gan, Zhe and Du, Xianzhi and Zhang, Bowen and Wang, Zirui and Cao, Liangliang and Chang, Shih-Fu and Yang, Yinfei},
  journal={arXiv preprint arXiv:2310.07704},
  year={2023}
}"><pre><span>@article</span>{<span>you2023ferret</span>,
  <span>title</span>=<span><span>{</span>Ferret: Refer and Ground Anything Anywhere at Any Granularity<span>}</span></span>,
  <span>author</span>=<span><span>{</span>You, Haoxuan and Zhang, Haotian and Gan, Zhe and Du, Xianzhi and Zhang, Bowen and Wang, Zirui and Cao, Liangliang and Chang, Shih-Fu and Yang, Yinfei<span>}</span></span>,
  <span>journal</span>=<span><span>{</span>arXiv preprint arXiv:2310.07704<span>}</span></span>,
  <span>year</span>=<span><span>{</span>2023<span>}</span></span>
}</pre></div>
<h2 tabindex="-1" dir="auto">Acknowledgement</h2>
<ul dir="auto">
<li><a href="https://github.com/haotian-liu/LLaVA">LLaVA</a>: the codebase we built upon.</li>
<li><a href="https://github.com/lm-sys/FastChat">Vicuna</a>: the LLM codebase.</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding every byte in a WASM module (106 pts)]]></title>
            <link>https://danielmangum.com/posts/every-byte-wasm-module/</link>
            <guid>38744168</guid>
            <pubDate>Sat, 23 Dec 2023 13:41:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://danielmangum.com/posts/every-byte-wasm-module/">https://danielmangum.com/posts/every-byte-wasm-module/</a>, See on <a href="https://news.ycombinator.com/item?id=38744168">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        <p>In <a href="https://danielmangum.com/posts/wasm-wasi-clang-17/">my last post</a>, we
explored how to build <a href="https://webassembly.github.io/spec/core/">WASM</a> modules,
both with and without <a href="https://wasi.dev/">WASI</a> support, using
<a href="https://clang.llvm.org/">Clang</a>. In a <a href="https://www.reddit.com/r/WebAssembly/comments/18m6xjr/comment/ke2f5xy/">comment on
Reddit</a>,
it was mentioned that much of the setup I walked through in that post could be
avoided by just leveraging <a href="https://www.reddit.com/r/WebAssembly/comments/18m6xjr/comment/ke2f5xy/">Zig’s WASI
supprt</a>.
This is a great point, and I would recommend doing the same. The following
command is inarguably simpler than what I described.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ zig cc --target=wasm32-wasi
</span></span></code></pre></div><p>However, there are two reasons why knowing how to use Clang for compilation is
useful. First, and most practical, is that I am working on a codebase that uses
Clang for its compiler toolchain, so leveraging Zig is not currently an option.
Second is that understanding the, admittedly more involved, Clang incantations
taught us a little more about what actually goes into a WASM module, and how
that changes when using WASI. In order to know <em>exactly</em> what is inside a WASM
module, we need to crack it open though. That is what we are going to do today!</p>
<p>As a recap, one of the programs we compiled was a simple <code>add()</code> function, which
accepted two integers and returned their sum.</p>
<p><code>wasm32_args.c</code></p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>int</span> add(<span>int</span> a, <span>int</span> b) {
</span></span><span><span>  <span>return</span> a+b;
</span></span><span><span>}
</span></span></code></pre></div><p>We compiled it to a WASM module using the following command.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ /usr/lib/llvm-17/bin/clang -target wasm32 -nostdlib -Wl,--no-entry -Wl,--export-all  -o wasm32_args.wasm wasm32_args.c
</span></span></code></pre></div><p>This produced a binary file which can be recognized as a v1 WASM module.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ file wasm32_args.wasm 
</span></span><span><span>wasm32_args.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)
</span></span></code></pre></div><p>We can view the hex contents of the file using <code>xxd</code>.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: 0061 736d 0100 0000 010a 0260 0000 6002  .asm.......`..`.
</span></span><span><span>00000010: 7f7f 017f 0303 0200 0105 0301 0002 063f  ...............?
</span></span><span><span>00000020: 0a7f 0141 8088 040b 7f00 4180 080b 7f00  ...A......A.....
</span></span><span><span>00000030: 4180 080b 7f00 4180 080b 7f00 4180 8804  A.....A.....A...
</span></span><span><span>00000040: 0b7f 0041 8008 0b7f 0041 8088 040b 7f00  ...A.....A......
</span></span><span><span>00000050: 4180 8008 0b7f 0041 000b 7f00 4101 0b07  A......A....A...
</span></span><span><span>00000060: a701 0c06 6d65 6d6f 7279 0200 115f 5f77  ....memory...__w
</span></span><span><span>00000070: 6173 6d5f 6361 6c6c 5f63 746f 7273 0000  asm_call_ctors..
</span></span><span><span>00000080: 0361 6464 0001 0c5f 5f64 736f 5f68 616e  .add...__dso_han
</span></span><span><span>00000090: 646c 6503 010a 5f5f 6461 7461 5f65 6e64  dle...__data_end
</span></span><span><span>000000a0: 0302 0b5f 5f73 7461 636b 5f6c 6f77 0303  ...__stack_low..
</span></span><span><span>000000b0: 0c5f 5f73 7461 636b 5f68 6967 6803 040d  .__stack_high...
</span></span><span><span>000000c0: 5f5f 676c 6f62 616c 5f62 6173 6503 050b  __global_base...
</span></span><span><span>000000d0: 5f5f 6865 6170 5f62 6173 6503 060a 5f5f  __heap_base...__
</span></span><span><span>000000e0: 6865 6170 5f65 6e64 0307 0d5f 5f6d 656d  heap_end...__mem
</span></span><span><span>000000f0: 6f72 795f 6261 7365 0308 0c5f 5f74 6162  ory_base...__tab
</span></span><span><span>00000100: 6c65 5f62 6173 6503 090a 4202 0200 0b3d  le_base...B....=
</span></span><span><span>00000110: 0106 7f23 8080 8080 0021 0241 1021 0320  ...#.....!.A.!. 
</span></span><span><span>00000120: 0220 036b 2104 2004 2000 3602 0c20 0420  . .k!. . .6.. . 
</span></span><span><span>00000130: 0136 0208 2004 2802 0c21 0520 0428 0208  .6.. .(..!. .(..
</span></span><span><span>00000140: 2106 2005 2006 6a21 0720 070f 0b00 3404  !. . .j!. ....4.
</span></span><span><span>00000150: 6e61 6d65 0119 0200 115f 5f77 6173 6d5f  name.....__wasm_
</span></span><span><span>00000160: 6361 6c6c 5f63 746f 7273 0103 6164 6407  call_ctors..add.
</span></span><span><span>00000170: 1201 000f 5f5f 7374 6163 6b5f 706f 696e  ....__stack_poin
</span></span><span><span>00000180: 7465 7200 6609 7072 6f64 7563 6572 7301  ter.f.producers.
</span></span><span><span>00000190: 0c70 726f 6365 7373 6564 2d62 7901 0c55  .processed-by..U
</span></span><span><span>000001a0: 6275 6e74 7520 636c 616e 673f 3137 2e30  buntu clang?17.0
</span></span><span><span>000001b0: 2e36 2028 2b2b 3230 3233 3132 3039 3132  .6 (++2023120912
</span></span><span><span>000001c0: 3432 3237 2b36 3030 3937 3038 6234 3336  4227+6009708b436
</span></span><span><span>000001d0: 372d 317e 6578 7031 7e32 3032 3331 3230  7-1~exp1~2023120
</span></span><span><span>000001e0: 3931 3234 3333 362e 3737 2900 2c0f 7461  9124336.77).,.ta
</span></span><span><span>000001f0: 7267 6574 5f66 6561 7475 7265 7302 2b0f  rget_features.+.
</span></span><span><span>00000200: 6d75 7461 626c 652d 676c 6f62 616c 732b  mutable-globals+
</span></span><span><span>00000210: 0873 6967 6e2d 6578 74                   .sign-ext
</span></span></code></pre></div><p>As described in the Binary Format portion of the <a href="https://webassembly.github.io/spec/core/_download/WebAssembly.pdf">WASM
specification</a>,
each module is made up of sections. Each section begins with a 1-byte
identifier.</p>
<table>
<thead>
<tr>
<th>ID (Decimal)</th>
<th>ID (Hex)</th>
<th>Section</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0x00</td>
<td>Custom</td>
</tr>
<tr>
<td>1</td>
<td>0x01</td>
<td>Type</td>
</tr>
<tr>
<td>2</td>
<td>0x02</td>
<td>Import</td>
</tr>
<tr>
<td>3</td>
<td>0x03</td>
<td>Function</td>
</tr>
<tr>
<td>4</td>
<td>0x04</td>
<td>Table</td>
</tr>
<tr>
<td>5</td>
<td>0x05</td>
<td>Memory</td>
</tr>
<tr>
<td>6</td>
<td>0x06</td>
<td>Global</td>
</tr>
<tr>
<td>7</td>
<td>0x07</td>
<td>Export</td>
</tr>
<tr>
<td>8</td>
<td>0x08</td>
<td>Start</td>
</tr>
<tr>
<td>9</td>
<td>0x09</td>
<td>Element</td>
</tr>
<tr>
<td>10</td>
<td>0x0a</td>
<td>Code</td>
</tr>
<tr>
<td>11</td>
<td>0x0b</td>
<td>Data</td>
</tr>
<tr>
<td>12</td>
<td>0x0c</td>
<td>Data Count</td>
</tr>
</tbody>
</table>
<p>Each section must be present at most once, and they must be provided in-order,
with the exception being Custom sections, for which there may be an arbitrary
number and they may be present anywhere in the file. Every section begins with
its identifier, then an <a href="https://en.wikipedia.org/wiki/LEB128">LEB128</a>
variable-length encoded <code>u32</code> size, followed by the contents of the section. In fact,
all integers in a WASM module are encoded using LEB128.</p>
<hr>
<p><strong>Decoding LEB128 Integers</strong></p>
<p>LEB128 can be used to encode signed and unsigned integers of arbitrary length.
We will primarily be focused on <code>u32</code> (unsigned 32-bit) integers today, so we’ll
skip detailing how to decode signed integers. You can find more details on the
previously linked Wikipedia page.</p>
<p>The algorithm for decoding unsigned integers is as follows:</p>
<ol>
<li>Take the least significant (lower) 7 bits of the next byte.</li>
<li>Binary shift the 7 bits to the left by 7 multiplied by the byte number
(initially 0) and bitwise <code>OR</code> with previously decoded bits.</li>
<li>If the most significant bit (i.e. the 8th bit) is a <code>0</code>, stop decoding.
Otherwise, go to step (1).</li>
</ol>
<p>As an example, if we had the byte sequence <code>a6 03</code>, we would decode it using the
following steps.</p>
<p>Take first byte and convert hex to binary.</p>
<p>Take least significant 7 bits.</p>
<p>Shift bits left by 0 (this is the “0th” byte, <code>7*0 = 0</code>) and <code>OR</code> with
previously decoded bits (none decoded yet).</p>
<p>Observe that the 8th bit in <code>0xa6</code> is a <code>1</code>, so continue to the next byte.</p>
<p>Take least significant 7 bits.</p>
<p>Shift bits left by 7 (this is the “1st” byte, <code>7*1 = 7</code>) and <code>OR</code> with
previously decoded bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000011 -&gt; 0000011 0000000
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="fallback"><span><span>0000000 0100110 | 0000011 0000000 = 0000011 0100110
</span></span></code></pre></div><p>Observe that the 8th bit in <code>0x03</code> is <code>0</code>. We are done. Convert the final result
to decimal.</p>
<hr>
<p>Now that we know how to interpret integers, let’s start breaking down the
sections.</p>
<h2 id="preamble">
  Preamble
  <a href="#preamble">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: 0061 736d 0100 0000 .... .... .... ....  .asm.......`..`.
</span></span></code></pre></div><p>Before the first section is the “preamble”, which is how <code>file</code> was able to
recognize that our binary was a v1 WASM module. The first 4 bytes decode to
<code>\0asm</code>, with the next 4 bytes indicating the version. WASM is
<a href="https://en.wikipedia.org/wiki/Endianness">little-endian</a>, meaning that the
least significant byte is first. Therefore, the version number is 1.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0100 0000 -&gt; 0000 0001 -&gt; 1
</span></span></code></pre></div><p>The first section begins following the preamble.</p>
<h2 id="type-section">
  Type Section
  <a href="#type-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: .... .... .... .... 010a 0260 0000 6002  .asm.......`..`.
</span></span><span><span>00000010: 7f7f 017f .... .... .... .... .... ....  ...............?
</span></span></code></pre></div><p>We can identify the first section as the Type section, as indicated by the first
byte <code>01</code>. Following the identifier is the size, to which we can apply our LEB128
decoding.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0x0a -&gt; 00001010 -&gt; 0001010 -&gt; 10
</span></span></code></pre></div><p>This informs us that the contents of this section should be 10 bytes in size.
The WASM specification describes the Type section contents as a <code>vec</code> of
<code>functype</code>. <em>Vectors</em> are simply an LEB128 encoded <code>u32</code> length followed by a
sequence of their specified element type. The first byte is <code>02</code>, which by now
you can probably recognize as <code>2</code> without needing to actually perform LEB128
decoding. This means that we should see 2 <code>functype</code> elements next.</p>
<p>Function types are prefixed with <code>0x60</code>, then two <code>vec</code>, one for parameter
types, and one for return types, follows. We have <code>00 00</code> for the first
<code>functype</code>. Remembering that <code>vec</code> are prefixed with length. This is essentially
saying that our first function takes 0 parameters and returns 0 values. We can
use <a href="https://webassembly.github.io/wabt/doc/wasm2wat.1.html">the <code>wasm2wat</code>
tool</a> to verify.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -2 | tail -1
</span></span><span><span>  (type (;0;) (func))
</span></span></code></pre></div><p>The next <code>functype</code> does have parameter and result types. There are two
parameters (<code>0x02</code>), each encoded as <code>0x7f</code>, which corresponds to a signed
32-bit integer (<code>i32</code>). There is one return type (<code>0x01</code>), which is also an
<code>i32</code> (<code>0x7f</code>). Though we don’t have symbol information about this function yet,
given that it is the last one defined we can safely assume this is our <code>add()</code>.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -3 | tail -1
</span></span><span><span>  (type (;1;) (func (param i32 i32) (result i32)))
</span></span></code></pre></div><h2 id="function-section">
  Function Section
  <a href="#function-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000010: .... .... 0303 0200 01.. .... .... ....  ...............?
</span></span></code></pre></div><p>Next is the Function section (<code>0x03</code>). We do not have an Import section (<code>0x02</code>)
in this module because we did not import any symbols. Because sections must be
provided in-order, we can be certain that no Import section will be provided now
that we have seen the Function section.</p>
<p>The size of this section is <code>3</code> (<code>0x03</code>), and the contents are specified as a
<code>vec</code> of <code>typeidx</code> (type index). A type index is a <code>u32</code>, which will once again
be LEB128 encoded. Our <code>vec</code> begins with <code>0x02</code>, so we should expect two type
indices. The following two bytes, <code>0x00</code> and <code>0x01</code>, correspond to the entries
in our previously detailed Types section.</p>
<p>At this point, we have two functions, each with their own type signature. For
this specific module, the Type and Function sections may seem redundant.
However, consider if we had another function in our module.</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>int</span> multiply (<span>int</span> a, <span>int</span> b) {
</span></span><span><span>  <span>return</span> a*b
</span></span><span><span>}
</span></span></code></pre></div><p><code>multiply()</code> has the same function signature as <code>add()</code>, meaning that we would
have only one entry for <code>(i32, i32) i32</code> in the Type section, then two entries
in the Function section that referenced the type signature by the corresponding
index. Compiling the new program with <code>multiply()</code> added results in an
indentical preamble and Type section, but we can see that the Function section
(<code>0x03</code>) now has length <code>4</code> (<code>0x04</code>), with a type index <code>vec</code> of length <code>3</code>
(<code>0x03</code>), and three type index entries (<code>0x00</code>, <code>0x01</code>, <code>0x01</code>) with the latter
two referring to the same type signature.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: 0061 736d 0100 0000 010a 0260 0000 6002
</span></span><span><span>00000010: 7f7f 017f 0304 0300 0101 .... .... ....
</span></span></code></pre></div><h2 id="memory-section">
  Memory Section
  <a href="#memory-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000010: .... .... .... .... ..05 0301 0002 ....  ...............?
</span></span></code></pre></div><p>We once again skip a section that is not present in our module (Table with ID
<code>0x04</code>), and move on to Memory (<code>0x05</code>). The Memory section contains a <code>vec</code> of
memories (<code>mem</code>), which are made up of <code>limits</code>. In the current WASM
specification, only one memory may be defined. Our Memory section has size of
<code>3</code> bytes (<code>0x03</code>), and, as expected, the first byte (<code>0x01</code>) specifies that the
length of the <code>vec</code> is <code>1</code>. A <code>limit</code> can include both a maximum and a minimum
size (both LEB128 encoded <code>u32</code>), as indicated by the first byte. In our case,
the first byte is <code>0x00</code>, which means that only a minimum size will be defined,
and the maximum is free to grow to any size. If the first byte was <code>0x01</code>, both
a minimum and a maximum would be defined.</p>
<blockquote>
<p>The <a href="https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#spec-changes">threads
proposal</a>
extends <code>limits</code> to be allow specifying whether memory is shared or unshared.</p>
</blockquote>
<p>In our module, the minimum memory size is <code>2</code> (<code>0x02</code>).</p>
<h2 id="global-section">
  Global Section
  <a href="#global-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000010: .... .... .... .... .... .... .... 063f  ...............?
</span></span><span><span>00000020: 0a7f 0141 8088 040b 7f00 4180 080b 7f00  ...A......A.....
</span></span><span><span>00000030: 4180 080b 7f00 4180 080b 7f00 4180 8804  A.....A.....A...
</span></span><span><span>00000040: 0b7f 0041 8008 0b7f 0041 8088 040b 7f00  ...A.....A......
</span></span><span><span>00000050: 4180 8008 0b7f 0041 000b 7f00 4101 0b..  A......A....A...
</span></span></code></pre></div><p>The Global section (<code>0x06</code>) is next, with a size of <code>0x3f</code>. With a larger size,
we can quickly check our LEB128 decoding to ensure that we don’t need to
consider subsequent bytes.</p>
<p>The 8th bit is <code>0</code>, so we can simply convert to the decimal value of <code>63</code> for
our size. The section includes a <code>vec</code> of globals (<code>global</code>), where each
<code>global</code> consists of a type (<code>globaltype</code>) and expression (<code>expr</code>). A
<code>globaltype</code> is made up of a value type (<code>valtype</code>) and a 1-byte flag (<code>mut</code>)
indicating whether the value is mutable or not.</p>
<p>An expression is encoded by a sequence of instructions (<code>instr</code>) with a
terminating byte (<code>0x0b</code>) specifying the end of the sequence. The byte following
the section size, <code>0x0a</code>, informs us that 10 globals will be defined in the
<code>vec</code>. We can easily
extract the first one by looking for the first instance of <code>0x0b</code>.</p>
<p>The <code>0x7f</code> should be familiar at this point as an <code>i32</code>, which is the
<code>globaltype</code> of this <code>global</code>. The following byte, <code>0x01</code>, marks it as mutable
(<code>mut</code>).</p>
<p>This is followed by the initialization expression, which includes the first
instruction we have seen. <code>0x41</code> is the opcode for <code>i32.const</code>, which simply
returns a static <code>i32</code> constant, which is specified by the following bytes.
We’ll need to use our LEB128 decoding to interpret it.</p>
<p>Take the first byte.</p>
<p>Take the least significant 7 bits and shift left 0 bits.</p>
<p>The 8th bit is a <code>1</code> so take the next byte.</p>
<p>Take the least significant 7 bits and shift left 7 bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>10001000 -&gt; 0001000 0000000
</span></span></code></pre></div><p><code>OR</code> with previously decoded bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000000 0000000 | 0001000 0000000 = 0001000 0000000
</span></span></code></pre></div><p>The 8th bit is a <code>1</code> so take the next byte.</p>
<p>Take the least significant 7 bits and shift left 14 bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000100 -&gt; 0000100 0000000 0000000
</span></span></code></pre></div><p><code>OR</code> with previously decoded bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000000 0001000 0000000 | 0000100 0000000 0000000 = 0000100 0001000 0000000 
</span></span></code></pre></div><p>The 8th bit is a <code>0</code> so we are done.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000100 0001000 0000000 -&gt; 66560
</span></span></code></pre></div><p>We can verify our decoding using <code>wasm2wat</code> again.</p>
<blockquote>
<p>The <code>$__stack_pointer</code> symbol name will be found in a later section.</p>
</blockquote>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -34 | tail -1
</span></span><span><span>  (global $__stack_pointer (mut i32) (i32.const 66560))
</span></span></code></pre></div><p>The same process can be applied to all globals in the <code>vec</code>, as shown in the
textual representation.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -43 | tail -10
</span></span><span><span>  (global $__stack_pointer (mut i32) (i32.const 66560))
</span></span><span><span>  (global (;1;) i32 (i32.const 1024))
</span></span><span><span>  (global (;2;) i32 (i32.const 1024))
</span></span><span><span>  (global (;3;) i32 (i32.const 1024))
</span></span><span><span>  (global (;4;) i32 (i32.const 66560))
</span></span><span><span>  (global (;5;) i32 (i32.const 1024))
</span></span><span><span>  (global (;6;) i32 (i32.const 66560))
</span></span><span><span>  (global (;7;) i32 (i32.const 131072))
</span></span><span><span>  (global (;8;) i32 (i32.const 0))
</span></span><span><span>  (global (;9;) i32 (i32.const 1))
</span></span></code></pre></div><h2 id="export-section">
  Export Section
  <a href="#export-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000050: .... .... .... .... .... .... .... ..07  A......A....A...
</span></span><span><span>00000060: a701 0c06 6d65 6d6f 7279 0200 115f 5f77  ....memory...__w
</span></span><span><span>00000070: 6173 6d5f 6361 6c6c 5f63 746f 7273 0000  asm_call_ctors..
</span></span><span><span>00000080: 0361 6464 0001 0c5f 5f64 736f 5f68 616e  .add...__dso_han
</span></span><span><span>00000090: 646c 6503 010a 5f5f 6461 7461 5f65 6e64  dle...__data_end
</span></span><span><span>000000a0: 0302 0b5f 5f73 7461 636b 5f6c 6f77 0303  ...__stack_low..
</span></span><span><span>000000b0: 0c5f 5f73 7461 636b 5f68 6967 6803 040d  .__stack_high...
</span></span><span><span>000000c0: 5f5f 676c 6f62 616c 5f62 6173 6503 050b  __global_base...
</span></span><span><span>000000d0: 5f5f 6865 6170 5f62 6173 6503 060a 5f5f  __heap_base...__
</span></span><span><span>000000e0: 6865 6170 5f65 6e64 0307 0d5f 5f6d 656d  heap_end...__mem
</span></span><span><span>000000f0: 6f72 795f 6261 7365 0308 0c5f 5f74 6162  ory_base...__tab
</span></span><span><span>00000100: 6c65 5f62 6173 6503 09.. .... .... ....  le_base...B....=
</span></span></code></pre></div><p>The Export section (<code>0x07</code>) consists of a <code>vec</code> of <code>export</code>, with each
containing a <code>name</code> and an export description (<code>exportdesc</code>). The <code>name</code> is a
<code>vec</code> of <code>byte</code>, while the <code>exportdesc</code> contains a 1-byte prefix indicating the
type of export, followed by an index to the appropriate section where the export
is defined.</p>
<p>I’ll leave it to the reader to LEB128 decode <code>0xa701</code> as the section size (<code>167</code>
bytes). The first byte following the section size, <code>0x0c</code>, indicates that the
<code>vec</code> will contain 12 exports. The next byte, <code>0x06</code>, is the first byte of the
first export, and thus is defining the length of its name as <code>6</code>. The following
6 bytes can be converted to <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8
characters</a>.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>6d 65 6d 6f 72 79 -&gt; memory
</span></span></code></pre></div><p>Because we compiled with <code>-Wl,--export-all</code>, all symbols will be exported. In
this case, <code>memory</code> is referring to the first element in the <code>vec</code> in our Memory
section. The export type prefixes are defined as follows.</p>
<table>
<thead>
<tr>
<th>ID (Hex)</th>
<th>Export</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x00</td>
<td>Function</td>
</tr>
<tr>
<td>0x01</td>
<td>Table</td>
</tr>
<tr>
<td>0x02</td>
<td>Memory</td>
</tr>
<tr>
<td>0x03</td>
<td>Global</td>
</tr>
</tbody>
</table>
<p>As expected, the prefix following <code>memory</code> is <code>0x02</code>. The next byte <code>0x00</code>,
specifies that this export corresponds to the first memory in the <code>vec</code>. The
next two exports are our functions. The first is <code>__wasm_call_ctors</code>, which,
following the name definition, has a function prefix (<code>0x00</code>) and an index to
the first function in the Function section <code>vec</code> (<code>0x00</code>).</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>11 5f 5f 77 61 73 6d 5f 63 61 6c 6c 5f 63 74 6f 72 73 -&gt; __wasm_call_ctors
</span></span></code></pre></div><p>The second correponds out our <code>add()</code> function, and refers to the second
(<code>0x01</code>) function (<code>0x00</code>) in the Function section.</p>
<p>The remaining exports are shown in their textual representation below.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -55 | tail -12
</span></span><span><span>  (export "memory" (memory 0))
</span></span><span><span>  (export "__wasm_call_ctors" (func $__wasm_call_ctors))
</span></span><span><span>  (export "add" (func $add))
</span></span><span><span>  (export "__dso_handle" (global 1))
</span></span><span><span>  (export "__data_end" (global 2))
</span></span><span><span>  (export "__stack_low" (global 3))
</span></span><span><span>  (export "__stack_high" (global 4))
</span></span><span><span>  (export "__global_base" (global 5))
</span></span><span><span>  (export "__heap_base" (global 6))
</span></span><span><span>  (export "__heap_end" (global 7))
</span></span><span><span>  (export "__memory_base" (global 8))
</span></span><span><span>  (export "__table_base" (global 9))
</span></span></code></pre></div><h2 id="code-section">
  Code Section
  <a href="#code-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000100: .... .... .... .... ..0a 4202 0200 0b3d  le_base...B....=
</span></span><span><span>00000110: 0106 7f23 8080 8080 0021 0241 1021 0320  ...#.....!.A.!. 
</span></span><span><span>00000120: 0220 036b 2104 2004 2000 3602 0c20 0420  . .k!. . .6.. . 
</span></span><span><span>00000130: 0136 0208 2004 2802 0c21 0520 0428 0208  .6.. .(..!. .(..
</span></span><span><span>00000140: 2106 2005 2006 6a21 0720 070f 0b.. ....  !. . .j!. ....4.
</span></span></code></pre></div><p>In this module, we don’t have a Start (<code>0x08</code>) or Element (<code>0x09</code>) section, so
next is the Code section (<code>0x0a</code>). The section size is <code>66</code> (LEB128 encoded
<code>0x42</code>), and it consists of the body and local variables of the each function as
a <code>vec</code> of <code>code</code>. Each <code>code</code> element consists of a size (<code>u32</code>), <code>vec</code> of
<code>locals</code>, and an expression (<code>expr</code>) made up of instructions.</p>
<blockquote>
<p>Keep in mind that we didn’t specify any optimizations when compiling this
module (e.g. <code>-O3</code>), so our code section is going to be much longer than it
needs to be. However, the unoptimized function body gives us an opportunity to
explore more WASM instructions.</p>
</blockquote>
<p>The <code>vec</code> has two elements (<code>0x02</code>), which correspond to the two entries in the
Function section. The first function has a size of <code>2</code> (<code>0x02</code>), which we can
immediately know means that it has no locals or instructions. The <code>vec</code> of
<code>locals</code> has a length of <code>0</code> (<code>0x00</code>) and the <code>expr</code>, which is its sequence of
instructions, is a single <code>0x0b</code> (the expression terminating byte).</p>
<p>The next function, which is our <code>add()</code>, has a size of <code>61</code> (<code>0x3d</code>). Its <code>vec</code>
of <code>locals</code> has length <code>1</code> (<code>0x01</code>). Locals are encoded as a <code>u32</code> count and a
value type (<code>valtype</code>). That is, there is a single element in the <code>vec</code> for each
value type for which at least one local exists. Because our <code>vec</code> has length
<code>1</code>, we know that all <code>locals</code> are the same value type. Specifically, there are
<code>6</code> (<code>0x06</code>) locals of type <code>i32</code> (<code>0x7f</code>).</p>
<p>We’ll save a deep dive into the WASM instruction set architecture (ISA) for a
future post, but the key difference from most ISAs you have likely interacted
with is that WASM operates as a stack machine. Values that are to be used as
operands for an instruction must first be pushed onto the stack, before
subsequently being popped off the stack and used to compute a result, which is
then pushed onto the stack.</p>
<p>The first instruction in our <code>add()</code> function is encoded as <code>0x23</code>, which
corresponds to <code>global.get</code>. This instruction takes the index (<code>u32</code>) of a symbol in
the Global section, but you may notice something strange when LEB128 decoding
it.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>80 80 80 80 00 -&gt; 00000000 00000000 00000000 00000000
</span></span></code></pre></div><p>Why are we using the maximum length for LEB128 encoding an unsigned 32-bit
integer? The reason is related to <a href="https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#merging-global-sections">Global section merging during
linking</a>.
Though we only need one byte to encode index <code>0</code>, if the index of
<code>$__stack_pointer</code> changes, we can now be certain that the <code>global.get</code>
instruction can be updated without changing the position of any other bytes in
the module.</p>
<p>As previously mentioned, WASM is a stack machine, so <code>global.get</code> is going to
push the value of <code>$__stack_pointer</code> onto the stack.</p>
<p>Our next instruction is <code>0x21</code>, which corresponds to <code>local.set</code>. It pops a
value off the top of the stack, then stores it in the local at the index
specified by the supplied immediate, which in this case is <code>2</code> (<code>0x02</code>).
Combining this instruction with the previous one results in storing the value of
<code>$__stack_pointer</code> in the local at index <code>2</code>. Why use <code>2</code> and not <code>0</code>? In
accordance with the WASM specification, <code>2</code> actually refers to the first
declared local, as parameters are referenced as the first locals.</p>
<blockquote>
<p>The parameters of the function are referenced through 0-based local indices in
the function’s body; they are mutable.</p>
</blockquote>
<p>You may already recognize these first few instructions as part of a <a href="https://danielmangum.com/posts/risc-v-bytes-caller-callee-registers/#an-example">function
prologue</a>
in which we are “growing the stack”. The use of a stack when coming from a
language like C can be confusing given that WASM has its own implicit stack.
Also, in this particular example, it is unnecessary to manage a stack, and, as
you’ll see in a moment, compiling with optimization removes these instructions.
Nevertheless, a “shadow stack” is necessary in some real programs, and we’ll
explore some examples in a future post.</p>
<p>Decompiling the full function body results in the following.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -32 | tail -28
</span></span><span><span>  (func $add (type 1) (param i32 i32) (result i32)
</span></span><span><span>    (local i32 i32 i32 i32 i32 i32)
</span></span><span><span>    global.get $__stack_pointer
</span></span><span><span>    local.set 2
</span></span><span><span>    i32.const 16
</span></span><span><span>    local.set 3
</span></span><span><span>    local.get 2
</span></span><span><span>    local.get 3
</span></span><span><span>    i32.sub
</span></span><span><span>    local.set 4
</span></span><span><span>    local.get 4
</span></span><span><span>    local.get 0
</span></span><span><span>    i32.store offset=12
</span></span><span><span>    local.get 4
</span></span><span><span>    local.get 1
</span></span><span><span>    i32.store offset=8
</span></span><span><span>    local.get 4
</span></span><span><span>    i32.load offset=12
</span></span><span><span>    local.set 5
</span></span><span><span>    local.get 4
</span></span><span><span>    i32.load offset=8
</span></span><span><span>    local.set 6
</span></span><span><span>    local.get 5
</span></span><span><span>    local.get 6
</span></span><span><span>    i32.add
</span></span><span><span>    local.set 7
</span></span><span><span>    local.get 7
</span></span><span><span>    return)
</span></span></code></pre></div><p>The only essential instructions are accesing the parameters (<code>local.get 0</code> and
<code>local.get 1</code>), and the eventual adding of the values with <code>i32.add</code>. This can
be observed by recompiling with ooptimization, then Decompiling.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>clang -target wasm32 -nostdlib -Wl,--no-entry -Wl,--export-all -O3-o wasm32_args_optimized.wasm wasm32_args.c
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args_optimized.wasm | head -8 | tail -4
</span></span><span><span>  (func $add (type 1) (param i32 i32) (result i32)
</span></span><span><span>    local.get 1
</span></span><span><span>    local.get 0
</span></span><span><span>    i32.add)
</span></span></code></pre></div><h2 id="custom-sections">
  Custom Sections
  <a href="#custom-sections">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000140: .... .... .... .... .... .... ..00 3404  !. . .j!. ....4.
</span></span><span><span>00000150: 6e61 6d65 0119 0200 115f 5f77 6173 6d5f  name.....__wasm_
</span></span><span><span>00000160: 6361 6c6c 5f63 746f 7273 0103 6164 6407  call_ctors..add.
</span></span><span><span>00000170: 1201 000f 5f5f 7374 6163 6b5f 706f 696e  ....__stack_poin
</span></span><span><span>00000180: 7465 7200 6609 7072 6f64 7563 6572 7301  ter.f.producers.
</span></span><span><span>00000190: 0c70 726f 6365 7373 6564 2d62 7901 0c55  .processed-by..U
</span></span><span><span>000001a0: 6275 6e74 7520 636c 616e 673f 3137 2e30  buntu clang?17.0
</span></span><span><span>000001b0: 2e36 2028 2b2b 3230 3233 3132 3039 3132  .6 (++2023120912
</span></span><span><span>000001c0: 3432 3237 2b36 3030 3937 3038 6234 3336  4227+6009708b436
</span></span><span><span>000001d0: 372d 317e 6578 7031 7e32 3032 3331 3230  7-1~exp1~2023120
</span></span><span><span>000001e0: 3931 3234 3333 362e 3737 2900 2c0f 7461  9124336.77).,.ta
</span></span><span><span>000001f0: 7267 6574 5f66 6561 7475 7265 7302 2b0f  rget_features.+.
</span></span><span><span>00000200: 6d75 7461 626c 652d 676c 6f62 616c 732b  mutable-globals+
</span></span><span><span>00000210: 0873 6967 6e2d 6578 74                   .sign-ext
</span></span></code></pre></div><p>The remaining bytes make up three Custom sections (<code>0x00</code>), as there is no Data
(<code>0x0b</code>) section or Data Count (<code>0x0c</code>) section in our module. Custom sections
are mostly unstructured, but do begin with the same <code>u32</code> size as other
sections, followed by a <code>name</code>. The <code>0x00</code> byte identifies our first custom
section, and its size is <code>52</code> bytes (<code>0x34</code>). The <code>name</code> encoding starts with
the number of bytes in the <code>name</code>, which in this case is <code>4</code> (<code>0x04</code>). The
following 4 bytes are UTF-8 characters making up the <code>name</code>.</p>
<p>The <code>name</code> of this custom section happens to literally be “name”. It also
happens to be the only Custom section that is defined in the WASM specification
(see Custom Sections in the Appendix). Like other sections, it should only be
included at most once, and it has the additional requirement of occurring after
the Data section. There are three subsections that may be included in the “name”
Custom section, identified by the following IDs.</p>
<table>
<thead>
<tr>
<th>ID (Hex)</th>
<th>Subsection</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x00</td>
<td>Module name</td>
</tr>
<tr>
<td>0x01</td>
<td>Function names</td>
</tr>
<tr>
<td>0x02</td>
<td>Local names</td>
</tr>
</tbody>
</table>
<p>The first subsection is Function names (<code>0x01</code>), and has size of <code>25</code> (<code>0x19</code>).
It consists of a <code>vec</code> of <code>name</code> / <code>index</code> pairs, otherwise known as a “name
map”, which assigns the provided <code>name</code> to the given <code>index</code> in the Function
section. The <code>vec</code> here is of length <code>2</code> (<code>0x02</code>), and first element corresponds
to the first function in the Function section (<code>0x00</code>). The name assigned to the
function is <code>17</code> bytes long (<code>0x11</code>).</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>5f 5f 77 61 73 6d 5f 63 61 6c 6c 5f 63 74 6f 72 73 -&gt; __wasm_call_ctors
</span></span></code></pre></div><p>The following function name entry can be decoded in the same manner, predictably
assigning <code>add</code> to the second function in the Function section (<code>0x01</code>).</p>
<p>The next and final subsection of the “name” Custom section is not actually
standardized in the core WASM specification, but rather part of the <a href="https://github.com/WebAssembly/extended-name-section/blob/main/proposals/extended-name-section/Overview.md#global-names">Extended
Name Section
proposal</a>.
In the proposal, <code>7</code> (<code>0x07</code>) is the index for the Global names subsection. This
subsection also contains a “name map”, providing pairs of a Global section index
and name. The first entry in our Global section (<code>0x00</code>) is being assigned the
name <code>__stack_pointer</code>.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>5f 5f 73 74 61 63 6b 5f 70 6f 69 6e 74 65 72 -&gt; __stack_pointer
</span></span></code></pre></div><p>The next two Custom sections are defined in the <a href="https://github.com/WebAssembly/tool-conventions/">WASM <code>tool-conventions</code>
repository</a>. The first is
<a href="https://github.com/WebAssembly/tool-conventions/blob/c74267a5897c1bdc9aa60adeaf41816387d3cd12/ProducersSection.md">named
<code>producers</code></a>,
and is meant to denote the tools that were used to produce the WASM module. The
second is <a href="https://github.com/WebAssembly/tool-conventions/blob/c74267a5897c1bdc9aa60adeaf41816387d3cd12/Linking.md#target-features-section">named
<code>target_features</code></a>
and must come after the <code>producers</code> Custom secion when included. It describes
what features are used, and whether linking should fail if a given feature is or
is not in the allowed set.</p>
<p>The full decompilation of all three Custom sections is as follows.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | tail -3
</span></span><span><span>  (@custom "name" "\01\19\02\00\11__wasm_call_ctors\01\03add\07\12\01\00\0f__stack_pointer")
</span></span><span><span>  (@custom "producers" "\01\0cprocessed-by\01\0cUbuntu clang?17.0.6 (++20231209124227+6009708b4367-1~exp1~20231209124336.77)")
</span></span><span><span>  (@custom "target_features" "\02+\0fmutable-globals+\08sign-ext"))
</span></span></code></pre></div><blockquote>
<p>The <code>--enable-annotations</code>, which we have been using for all <code>wasm2wat</code>
invocations, is required to include Custom sections in the WAT output.</p>
</blockquote>
<h2 id="final-thoughts">
  Final Thoughts
  <a href="#final-thoughts">
    
    <span>Link to heading</span>
  </a>
</h2>
<p>The WASM module in this post did not include every section that can occur, but
hopefully this breakdown was thorough enough that you feel confident in
dissecting those that were omitted on your own. There are a number of topics,
such as linking, optimization, and shadow stacks, that were mentioned in this
post but were not covered in depth. Check back for future posts where we will go
into greater detail.</p>
<p>As always, if you have feedback, questions, or just want to chat, feel free to
reach out to <code>@hasheddan</code> on any of the platforms listed on the <a href="https://danielmangum.com/">home
page</a>.</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["King of the Cannibals": How Sam Altman Took over Silicon Valley (119 pts)]]></title>
            <link>https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/</link>
            <guid>38744021</guid>
            <pubDate>Sat, 23 Dec 2023 13:13:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/">https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/</a>, See on <a href="https://news.ycombinator.com/item?id=38744021">Hacker News</a></p>
Couldn't get https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Suno AI (167 pts)]]></title>
            <link>https://www.suno.ai/</link>
            <guid>38743719</guid>
            <pubDate>Sat, 23 Dec 2023 12:24:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.suno.ai/">https://www.suno.ai/</a>, See on <a href="https://news.ycombinator.com/item?id=38743719">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__next"><header><div><nav></nav><nav><ul><li><a href="https://app.suno.ai/" target="_blank" rel="noopener noreferrer" aria-label="Go to our web app"><span>Make a song</span></a></li></ul></nav></div></header><main></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DIY ventilation heat exchanger (2010) (113 pts)]]></title>
            <link>https://ecorenovator.org/forum/showthread.php?s=41c17447383e29b03903f4e0136e55be&amp;p=5792</link>
            <guid>38742694</guid>
            <pubDate>Sat, 23 Dec 2023 08:52:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ecorenovator.org/forum/showthread.php?s=41c17447383e29b03903f4e0136e55be&#x26;p=5792">https://ecorenovator.org/forum/showthread.php?s=41c17447383e29b03903f4e0136e55be&#x26;p=5792</a>, See on <a href="https://news.ycombinator.com/item?id=38742694">Hacker News</a></p>
<div id="readability-page-1" class="page"><p><img src="https://ecorenovator.org/forum/images/icons/icon1.gif" alt="Default">
				<strong>ERV, HRV, de-humidifier hack...</strong>
			</p><div id="post_message_5869"><div>
	<p>Quote:</p>
	<div>
			
				<p>
					Originally Posted by <strong>Piwoslaw</strong>
					<a href="https://ecorenovator.org/forum/showthread.php?s=f8ab0f8e51c7716389568bed290217d5&amp;p=5792#post5792" rel="nofollow"><img src="https://ecorenovator.org/forum/images/ramadhan/buttons/viewpost.gif" alt="View Post"></a>
				</p>
				<p>Any ideas on how to go about making a more or less efficient (60+%) heat exchanger? Pictures/drawings of the insides of different types would be nice, as would a cost vs. efficiency comparison.</p>
			
		</div>
</div><p>Piwoslaw,</p><p>

Here's a URL for a DIY Heat Recovery Ventilator:</p><p>

<a href="http://www.make-digital.com/make/vol18/?pg=58" target="_blank">Make - Volume 18</a></p><p>

* * * </p><p>

The photos I see of Heat Recovery Ventilators usually use a cross-flow cell, with the air paths crossing at a 90 degree angle. They usually have an efficiency of about 60% to 70%. I have seen write-ups of experiments done on cells that had a 180 degree cross-flow and the efficiency was increased to some degree (maybe 5% to 8%). Sorry, but I didn't book mark the studies.</p><p>

There's also a wheel type that claims efficiency up to 90%. Here's an example:</p><p>

<a href="http://www.xetexinc.com/energy_recovery/products/heat_wheels.html" target="_blank">Heat Exchangers Energy Recovery Ventilator Air</a></p><p>

Additionally, there's a heat pipe HRV, but I don't see very many Internet references to that type, but here is one:</p><p>

<a href="http://www.computerenvironment.com/page.asp?page=heatpipe_ext" target="_blank">Computer Environment, Inc. Website</a></p><p>

Here's a page with a pretty good overview of the topic:</p><p>

<a href="http://energyrecoveryvent.sustainablesources.com/" target="_blank">SustainableSources.com: Energy Recovery Ventilator</a></p><p>

It looks like the need for and success of a HRV/ERV are based on having a very tight house...</p><p>

* * *</p><p>

Regarding the 90 degree cross-flow types, if my understanding is correct, there are Heat Recovery Ventilators (HRV) and then there are Energy Recovery Ventilators (ERV), the difference being that the ERV uses a water permeable membrane to allow outgoing air condensed moisture to be used to re-humidify the incoming air.</p><p>

I have seen a page that represented various Chinese companies, that listed just the cross-flow cells of various sizes. I tried to locate that URL for this post but was not able to find the page I remembered. But I'm pretty sure that the cells for most, if not all of the ERVs made in the US and probably also Europe are manufactured in China, and put into locally made boxes. I have seen the completed units coming from China:</p><p>

<a href="http://www.alibaba.com/product/bestechbuildings-10943077-10689947/Heat_Recovery_Ventilator_HRV_ERV.html" target="_blank">Here</a></p><p>

<a href="http://www.tradekey.com/ks-heat-recovery-ventilator-hrv/" target="_blank">Here also</a></p><p>

* * * </p><p><img src="http://ecorenovator.org/forum/attachment.php?attachmentid=614&amp;stc=1&amp;d=1267393897" alt=""></p><p>
In this photo is the de-humidifier someone left on my front porch, minus the plastic &amp; steel covers.</p><p>

The way it works is air is drawn through the evaporator coils, where it is chilled and frost forms and then passes through the condenser coils, where the air is warmed back up. There is a sensor on the evaporator coil and when it senses that the evaporator is likely to be full of frost, the compressor stops for a few minutes, the frost melts to water that goes into a bucket.</p><p>

But the evaporator core and the condenser core are made separately, and are attached by sheet metal screws. With a little bit of luck and some very gentle handling, the cores can be separated, with the refrigeration lines intact. Then incoming air could be made to pass through an air filter and then through the condenser (hot) and into the house, while outgoing air would be made to pass through an air filter and then through the evaporator (cold) and out to the world.</p><p>

Thus, the hacked de-humidifier would extract heat from the air that is exiting the house, and then return that heat to the air that is entering the house.</p><p>

This is a hack that is begging to be done!</p><p>

Regards,</p><p>

-AC_Hacker</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pinterest's simple tech stack to scale to 11M monthly users (158 pts)]]></title>
            <link>https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million</link>
            <guid>38742692</guid>
            <pubDate>Sat, 23 Dec 2023 08:51:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million">https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million</a>, See on <a href="https://news.ycombinator.com/item?id=38742692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>In January 2012, Pinterest hit 11.7 million monthly unique users with only 6 engineers.</p><p><span>Having launched in March 2010, it was </span><a href="https://techcrunch.com/2012/02/07/pinterest-monthly-uniques/#:~:text=11.7%20million%20unique%20monthly%20U.S.%20visitors%2C%20crossing%20the%2010%20million%20mark%20faster%20than%20any%20other%20standalone%20site%20in%20history." rel="">the fastest company to race past 10 million monthly users at the time</a><span>.</span></p><p><a href="https://pinterest.com/" rel="">Pinterest</a><span> is an image-heavy social network, where users can save or “pin” images to their boards.</span></p><blockquote><p>When I say “users” below, I mean “monthly active users” (MAUs).</p></blockquote><ul><li><p><strong>Use known, proven technologies. </strong><span>Pinterest’s dive into newer technologies at the time led to issues like data corruption.</span></p></li><li><p><strong>Keep it simple. </strong><span>(A recurring theme!)</span></p></li><li><p><strong>Don’t get too creative. </strong><span>The team settled on an architecture where they could add more of the same nodes to scale.</span></p></li><li><p><strong>Limit your options</strong><span>.</span></p></li><li><p><strong>Sharding databases &gt; clustering.</strong><span> It reduced data transfer across nodes, which was a good thing.</span></p></li><li><p><strong>Have fun!</strong><span> New engineers would contribute code in their first week.</span></p></li></ul><p><a href="https://engineercodex.substack.com/p/how-instagram-scaled-to-14-million" rel="">The Instagram team had similar lessons from scaling to 14 million users with 3 engineers</a><span>.</span></p><p>Pinterest launched in March 2010 with 1 small MySQL database, 1 small web server, and 1 engineer (along with the 2 co-founders).</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png" width="652" height="259.87188612099646" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:448,&quot;width&quot;:1124,&quot;resizeWidth&quot;:652,&quot;bytes&quot;:60465,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Nine months later in January 2011, Pinterest’s architecture had evolved to handle more users. They were still invite-only and had 2 engineers.</p><p>They had:</p><ul><li><p>a basic web server stack (Amazon EC2, S3, and CloudFront)</p><ul><li><p>Django (Python) for their backend</p></li></ul></li><li><p>4 web servers for redundancy</p></li><li><p>NGINX as their reverse proxy and load balancer.</p></li><li><p>1 MySQL database at this point + 1 read-only secondary</p></li><li><p>MongoDB for counters</p></li><li><p>1 task queue and 2 task processors for asynchronous tasks</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png" width="1255" height="615" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:615,&quot;width&quot;:1255,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:125783,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>From January 2011 to October 2011, Pinterest grew extremely fast, doubling users every month and a half.</p><p>Their iPhone app launch in March 2011 was one of the factors fueling this growth.</p><p>When things grow fast, technology breaks more often than you expect.</p><p><span>Pinterest made a mistake: </span><strong>they over-complicated their architecture immensely.</strong></p><p>They had only 3 engineers, but 5 different database technologies for their data.&nbsp;</p><p>They were both manually sharding their MySQL databases and clustering their data using Cassandra and Membase (now Couchbase).</p><p><strong><a href="https://www.infoq.com/presentations/Pinterest/" rel="">Their “overcomplicated stack"</a><span>:</span></strong></p><ul><li><p>Web server stack (EC2 + S3 + CloudFront)</p><ul><li><p><a href="https://www.quora.com/What-challenges-has-Pinterest-encountered-with-Flask" rel="">Pinterest started moving to Flask (Python) for their backend</a></p></li></ul></li><li><p>16 web servers</p></li><li><p>2 API engines</p></li><li><p>2 NGINX proxies</p></li><li><p>5 manually-sharded MySQL DBs + 9 read-only secondaries</p></li><li><p>4 Cassandra Nodes</p></li><li><p>15 Membase Nodes (3 separate clusters) </p></li><li><p>8 Memcache Nodes</p></li><li><p>10 Redis Nodes</p></li><li><p>3 Task Routers + 4 Task Processors</p></li><li><p>4 Elastic Search Nodes</p></li><li><p>3 Mongo Clusters</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png" width="1357" height="1047" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png&quot;,&quot;srcNoWatermark&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e38b29ee-2ec4-43ba-b807-26411616429e_1357x1047.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1047,&quot;width&quot;:1357,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:208783,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><strong>Database clustering</strong><span> is the process of connecting multiple database servers to work together as a single system.</span></p></blockquote><p>In theory, clustering automatically scales datastores, provides high availability, free load balancing, and doesn’t have a single point of failure.</p><p><span>Unfortunately, in practice, clustering was overly complex, had difficult upgrade mechanisms, and </span><strong>it had a big single point of failure.</strong></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png" width="1456" height="642" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b2198073-6421-434e-be2f-2904aa5ff975_1462x645.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:642,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:286865,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Each DB has a Cluster Management Algorithm that routes from DB to DB.</p><p>When something goes wrong with a DB, a new DB is added to replace it.</p><p>In theory, the Cluster Management Algorithm should handle this just fine.&nbsp;</p><p><span>In reality, there was a bug in Pinterest’s Cluster Management Algorithm that </span><strong>corrupted data on all their nodes, broke their data rebalancing, and created some unfixable problems</strong><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png" width="1306" height="538" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:538,&quot;width&quot;:1306,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:205901,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Pinterest’s solution? </span><strong>Remove all clustering tech (Cassandra, Membase) from the system. Go all-in with MySQL + Memcached (more proven).</strong></p><p><span>MySQL and Memcached are well-proven technologies. </span><a href="https://engineercodex.substack.com/p/how-facebook-scaled-memcached" rel="">Facebook used the two to create the largest Memcached system in the world, which handled billions of requests per second for them with ease.</a></p><p>In January 2012, Pinterest was handling ~11 million monthly active users, with anywhere between 12 million to 21 million daily users.</p><p>At this point, Pinterest had taken the time to simplify their architecture.</p><p>They removed less-proven ideas, like clustering and Cassandra at the time, and replaced them with proven ones, like MySQL, Memcache, and sharding.</p><p><strong>Their simplified stack:</strong></p><ul><li><p><span>Amazon EC2 + S3 + </span><a href="https://www.akamai.com/" rel="">Akamai</a><span> (replaced CloudFront)</span></p></li><li><p><a href="https://aws.amazon.com/elasticloadbalancing/" rel="">AWS ELB (Elastic Load Balancing)</a></p></li><li><p><span>90 Web Engines + 50 API Engines (</span><a href="https://www.quora.com/What-challenges-has-Pinterest-encountered-with-Flask" rel="">using Flask</a><span>)</span></p></li><li><p>66 MySQL DBs + 66 secondaries</p></li><li><p>59 Redis Instances</p></li><li><p>51 Memcache Instances</p></li><li><p>1 Redis Task Manager + 25 Task Processors</p></li><li><p><span>Sharded </span><a href="https://solr.apache.org/" rel="">Apache Solr</a><span> (replaced Elasticsearch)</span></p></li><li><p><strong>Removed Cassanda, Membase, Elasticsearch, MongoDB, NGINX</strong></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png" width="1456" height="694" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:694,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:220179,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><strong>Database sharding</strong><span> is a method of splitting a single dataset into multiple databases.</span></p><p><strong>Benefits:</strong><span> high availability, load balancing, simple algorithm for placing data, easy to split databases to add more capacity, easy to locate data</span></p></blockquote><p><span>When Pinterest first sharded their databases, they had a feature freeze. Over the span of a few months, </span><strong>they sharded their databases incrementally and manually:</strong></p><p>The team removed table joins and complex queries from the database layer. They added lots of caching.</p><p>Since it was extra effort to maintain unique constraints across databases, they kept data like usernames and emails in a huge, unsharded database.</p><p>All their tables existed on all their shards.</p><p>Since they had billions of “pins”, their database indexes ran out of memory. </p><p>They would take the largest table on the database and move it to its own database. </p><p>Then, when that database ran out of space, they would shard.</p><p>In October 2012, Pinterest had around 22 million monthly users, but their engineering team had quadrupled to 40 engineers.</p><p><strong>The architecture was the same. They just added more of the same systems.</strong><span>&nbsp;</span></p><ul><li><p>Amazon EC2 + S3 + CDNs (EdgeCast, Akamai, Level 3)</p></li><li><p>180 web servers + 240 API engines (using Flask)</p></li><li><p>88 MySQL DBs + 88 secondaries each</p></li><li><p>110 Redis instances</p></li><li><p>200 Memcache instances</p></li><li><p>4 Redis Task Managers + 80 Task Processors</p></li><li><p>Sharded Apache Solr</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png" width="1456" height="694" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:694,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:231606,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>They started moving from hard disk drives to SSDs.</p><p><span>An important lesson learned: </span><strong>limited, proven choices was a good thing</strong><span>. </span></p><p>Sticking with EC2 and S3 meant they had limited configuration choices, leading to less headaches and more simplicity.</p><p><strong>However, new instances could be ready in seconds. </strong><span>This meant that they could add 10 Memcache instances in a matter of minutes.</span></p><p><a href="https://engineercodex.substack.com/p/how-instagram-scaled-to-14-million" rel="">Like Instagram</a><span>, Pinterest had a unique ID structure because they had sharded databases.</span></p><p>Their 64-bit ID looked like:&nbsp;</p><blockquote><p><strong>Shard ID:</strong><span> which shard (16 bits)</span></p><p><strong>Type:</strong><span> object type, such as pins (10 bits)</span></p><p><strong>Local ID:</strong><span> position in table (38 bits)</span></p></blockquote><p><span>The lookup structure for these IDs was </span><strong>a simple Python dictionary.</strong></p><p>They had Object tables and Mapping tables.</p><p><strong>Object tables were for pins, boards, comments, users, and more.</strong><span> They had a Local ID mapped to a MySQL blob, like JSON.</span></p><p><strong>Mapping tables were for relational data between objects, like mapping boards to a user or likes to a pin.</strong><span> They had a Full ID mapped to a Full ID and a timestamp.</span></p><p>All queries were PK (primary key) or index lookups for efficiency. They cut out all JOINs.</p><p><strong><span>This article is based on </span><a href="https://www.infoq.com/presentations/Pinterest/" rel="">Scaling Pinterest</a><span>, a talk given by the Pinterest team in 2012.</span></strong></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Endurain: Self-hosted Strava like service (206 pts)]]></title>
            <link>https://github.com/joaovitoriasilva/endurain</link>
            <guid>38742637</guid>
            <pubDate>Sat, 23 Dec 2023 08:40:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/joaovitoriasilva/endurain">https://github.com/joaovitoriasilva/endurain</a>, See on <a href="https://news.ycombinator.com/item?id=38742637">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto">Endurain is a Strava like service that you can selfhost.
It uses for the frontend PHP+HTML+basic JS+Bootstrap CSS, for the backend Python FastAPI and stravalib, MariaDB for the database engine and Jaeger for observability basic usage.
Docker images are available to deploy the service and you can check "docker-compose.yml" file for an example. Environemnt variables detailed bellow.</p>
<p dir="auto">I'm not a developer by profession (my dev concepts are from university ten years ago) so this work had a lot of help from ChatGPT and the main purpose was to learn new technologies and new concepts, so please be gentle.
If you have recommendations for any topic please let me know.</p>
<p dir="auto">Currently the service supports:</p>
<ul dir="auto">
<li>Multi-user</li>
<li>Create/edit/delete users</li>
<li>Basic admin and regular users profiles that adapt the interface</li>
<li>Import activities using .gpx files</li>
<li>Connect with Strava and retrieve activities from Strava</li>
<li>Feed with user activities, current user week stats and month stats</li>
<li>Feed with followers activities</li>
<li>Basic activity privacy</li>
<li>Activity page with more in depth info of the activity</li>
<li>Delete activities</li>
<li>Create/edit/delete gear (wetsuit, bycicle and running shoes)</li>
<li>Add/edit/delete activity gear</li>
<li>User page with user stats and user activities per week</li>
<li>Follow user basic implementation</li>
</ul>
<p dir="auto">To do features (not by order):</p>
<ul dir="auto">
<li>Retrieve gear from Strava</li>
<li>Default gear for activity type</li>
<li>Track gear usage</li>
<li>Gear components logic for component usage tracking</li>
<li>Comments and likes logic for activities</li>
<li>Notifications logic</li>
<li>Activity Pub integration?</li>
</ul>
<hr>
<h2 tabindex="-1" dir="auto">Frontend</h2>
<p dir="auto">Table bellow shows supported environemnt variables. Variables marked with optional "No" should be set to avoid errors.</p>
<table>
<thead>
<tr>
<th>Environemnt variable</th>
<th>Default value</th>
<th>Optional</th>
</tr>
</thead>
<tbody>
<tr>
<td>BACKEND_PROTOCOL</td>
<td>http</td>
<td>Yes</td>
</tr>
<tr>
<td>BACKEND_HOST</td>
<td>backend</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p dir="auto">Frontend dependencies:</p>
<ul dir="auto">
<li>php:8.3-apache</li>
<li>User avatars create using DiceBear (<a href="https://www.dicebear.com/" rel="nofollow">https://www.dicebear.com</a>) avataaars style.</li>
<li>Bootstrap CSS v5.3.2</li>
<li>leaflet v1.7.1</li>
<li>fontawesome icons free version</li>
<li>Logo created using Canvas</li>
<li><a href="https://geocode.maps.co/" rel="nofollow">https://geocode.maps.co/</a> for reverse Geocode logic on activity parsing</li>
</ul>
<hr>
<h2 tabindex="-1" dir="auto">Backend</h2>
<p dir="auto">Table bellow shows supported environemnt variables. Variables marked with optional "No" should be set to avoid errors.</p>
<table>
<thead>
<tr>
<th>Environemnt variable</th>
<th>Default value</th>
<th>Optional</th>
</tr>
</thead>
<tbody>
<tr>
<td>DB_HOST</td>
<td>mariadb</td>
<td>Yes</td>
</tr>
<tr>
<td>DB_PORT</td>
<td>3306</td>
<td>Yes</td>
</tr>
<tr>
<td>DB_USER</td>
<td>gearguardian</td>
<td>Yes</td>
</tr>
<tr>
<td>DB_PASSWORD</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>DB_DATABASE</td>
<td>gearguardian</td>
<td>Yes</td>
</tr>
<tr>
<td>SECRET_KEY</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>ALGORITHM</td>
<td>HS256</td>
<td>Yes</td>
</tr>
<tr>
<td>ACCESS_TOKEN_EXPIRE_MINUTES</td>
<td>30</td>
<td>Yes</td>
</tr>
<tr>
<td>STRAVA_CLIENT_ID</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>STRAVA_CLIENT_SECRET</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>STRAVA_AUTH_CODE</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>JAEGER_ENABLED</td>
<td>true</td>
<td>Yes</td>
</tr>
<tr>
<td>JAEGER_PROTOCOL</td>
<td>http</td>
<td>Yes</td>
</tr>
<tr>
<td>JAEGER_HOST</td>
<td>jaeger</td>
<td>Yes</td>
</tr>
<tr>
<td>JAGGER_PORT</td>
<td>4317</td>
<td>Yes</td>
</tr>
<tr>
<td>STRAVA_DAYS_ACTIVITIES_ONLINK</td>
<td>30</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p dir="auto">Table bellow shows the obligatory environemnt variables for mariadb container. You should set them based on what was also set for backend container.</p>
<table>
<thead>
<tr>
<th>Environemnt variable</th>
<th>Default value</th>
<th>Optional</th>
</tr>
</thead>
<tbody>
<tr>
<td>MYSQL_ROOT_PASSWORD</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>MYSQL_DATABASE</td>
<td>gearguardian</td>
<td><code>No</code></td>
</tr>
<tr>
<td>MYSQL_USER</td>
<td>gearguardian</td>
<td><code>No</code></td>
</tr>
<tr>
<td>MYSQL_PASSWORD</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
</tbody>
</table>
<p dir="auto">Python backend dependencies used:</p>
<ul dir="auto">
<li>python:3.11</li>
<li>fastapi</li>
<li>pydantic</li>
<li>uvicorn</li>
<li>python-dotenv</li>
<li>sqlalchemy</li>
<li>mysqlclient</li>
<li>python-jose[cryptography]</li>
<li>passlib[bcrypt]</li>
<li>apscheduler</li>
<li>requests</li>
<li>stravalib</li>
<li>opentelemetry-sdk</li>
<li>opentelemetry-instrumentation-fastapi</li>
<li>opentelemetry.exporter.otlp</li>
<li><a href="https://geocode.maps.co/" rel="nofollow">https://geocode.maps.co/</a> for reverse Geocode logic on activity parsing</li>
</ul>
<hr>
<h2 tabindex="-1" dir="auto">Strava integration</h2>
<p dir="auto">For Strava integration API endpoint must be available to the Internet.
You will also need to create a API Application using a Strava account -&gt; more info here <a href="https://developers.strava.com/docs/getting-started/" rel="nofollow">https://developers.strava.com/docs/getting-started/</a></p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[They want you to forget what a film looks like (265 pts)]]></title>
            <link>https://aftermath.site/true-lies-4k-uhd-blu-ray-james-cameron-peter-jackson-park-road-post</link>
            <guid>38741536</guid>
            <pubDate>Sat, 23 Dec 2023 04:06:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aftermath.site/true-lies-4k-uhd-blu-ray-james-cameron-peter-jackson-park-road-post">https://aftermath.site/true-lies-4k-uhd-blu-ray-james-cameron-peter-jackson-park-road-post</a>, See on <a href="https://news.ycombinator.com/item?id=38741536">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>The most grotesque videos on YouTube fit into a specific category. It consists of old footage run through an AI upscaler. Sometimes the videos are colorized, sometimes they’re interpolated to 60 frames per second. Uniformly they look atrocious, smeary, and garish, unless you don’t know what a film is supposed to look like. Increasingly that’s a lot of people, including, evidently, the people responsible for the latest transfers of the movie <em>True Lies</em> and to a lesser extent <em>Aliens</em>, <em>The Abyss</em>, and <em>Titanic</em>.</p><div><figure><p><iframe title="[4K, 60 fps, color] The lumiere family goes on a trip.1895." width="710" height="399" src="https://www.youtube.com/embed/GHHt-CBKkS0?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><figcaption>There's like a million of these and they're all uniformly disgusting.</figcaption></figure></div><p>If you have never seen the movie <em>True Lies</em>, you are probably under 30. Arnold Schwarzenegger plays an agent in a government counter-terrorist organization that has to fight bad guys while keeping his dangerous lifestyle a secret from his mousey wife played by Jamie Lee Curtis. It’s a goofy big budget action comedy remake that has some fantastic set pieces, an incredible cast, some great bits, and ages exactly how you would expect from an airheaded action movie from 1994. In James Cameron’s career, It’s probably the weirdest movie James Cameron ever made outside of <em>Piranha II: The Spawning</em>.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>The Folders. The pictures on the left. It all looks bad. Credit: 20th Century Fox.</figcaption></figure><p>I have a deep fondness for this movie in my heart, partially because I played the <a href="https://en.wikipedia.org/wiki/True_Lies_(video_game)" target="_blank" rel="noreferrer noopener">pretty bad Super Nintendo</a> game too much but also because it’s rare to get a comedy where the hero airholes the side of a skyscraper with a harrier jet. So when I saw people posting that it had gotten a garish transfer, I was particularly insulted. But even with prior warning, I was unprepared for how disgusting it looked.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>It looks like they airbrushed her soul. Credit: 20th Century FOX</figcaption></figure><p>The transfer of <em>True Lies</em> has a truly vile quality to it, a feeling like someone clandestinely dosed you with LSD just a hair below the threshold. At times it can look passable in motion, but then you notice something out of the corner of your eye: a thick fold of skin, a framed photo of a child, folders that are too thick at the margins, cheeks that look rendered. It’s that familiar dread at the pit of your gut when you spot AI generated imagery, a combination of edges not looking quite right and surfaces that are simultaneously too smooth and too sharp. A crime was committed here, and you can tell.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Game over. Credit: 20th Century Fox.</figcaption></figure><p>The transfers of <em>Aliens </em>and <em>The Abyss </em>are markedly less bad than <em>True Lies</em>, but I still have difficulty watching them. The skin looks sterile and waxy with too much film grain removed. Everything looks like it has raytracing on. Both transfers are, however, within acceptable parameters for most normal people.&nbsp;</p><p>The recent transfer of <em>Titanic </em>got a similar treatment, with <a href="https://forum.blu-ray.com/showthread.php?t=302519" target="_blank" rel="noreferrer noopener">similarly mixed reactions online</a>.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Rose lookin' like a Pixar character over here. <em>Credit: 20th Century Fox</em>.</figcaption></figure><p>“Why would you do this?” is a logical question. It’s worth contextualizing who handled these “restorations” – namely Park Road Post, a subsidiary of Peter Jackson’s WingNut Films. They have worked on multiple films in the past, but the two that are most germane here are Jackson’s <em>They Shall Not Grow Old</em> and the 3-part Disney+ documentary <em>The Beatles: Get Back. </em>Both movies recontextualize pre-existing footage and, importantly, do so with an aggressive use of machine learning. <em>They Shall Not Grow Old </em>upscales and colorizes old World War I imagery in an attempt to set the bloodshed in a more modern context, while <em>Get Back</em> recycled footage shot for Michael Lindsay-Hogg’s <em>Let It Be</em>, including moments never before seen by the public, to elucidate the process behind the creation of some of The Beatles’ most iconic songs.&nbsp;</p><p>I understand the intent of using machine learning in both works. In the case of Hogg’s <em>Let it Be</em>,<em> </em>much of the footage was chunky and rough, and they used audio isolation narratively in an interesting way.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>They should have called it They Shall Grow Really Weird Looking. <em>Credit: Warner Bros. Pictures</em></figcaption></figure><p>Unfortunately they both look<em> really fucking bad</em>. And they look worse as the years go on.&nbsp;</p><p><em>They Shall Not Grow Old</em> is difficult to stomach, with the soldiers being motion interpolated in a melting, shambolic manner. The digital noise reduction is inconsistent – film grain is present on the skin of soldiers and absent in other places, following their faces like reptilian scales. This is an enthusiastic, clumsy use of a technology on severely damaged footage.&nbsp;</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Mods are asleep, post smooth Paul. <em>Credit: Disney+</em></figcaption></figure><p>The same is true to a lesser extent for <em>The Beatles: Get Back</em>. Nobody would begrudge Jackson for color grading and restoring rough footage, but the effect is sterilizing and alien. Hair and fur coats are simultaneously shiny and oily, with gorgon-esque strands that undulate and melt into themselves. The folds of skin and clothing have an unnatural heft. The edges of objects will catch and melt into each other. The grain structure is slightly more natural than in <em>They Shall Not Grow Old</em>, but it looks like it was artificially added over heavily denoised footage. <em>Get Back </em>was wildly successful, in part because the only semi-available version of <em>Let It Be</em> is an atrocious DVD transfer, but also on the strength of 60 hours of unused footage, an unseen insight into an iconic band.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>They should have let it be. <em>Credit: WingNut Films Productions Ltd</em>.</figcaption></figure><p>I wish we had stopped Jackson then and there. As my good friend Danielle joked, this was a trial balloon. People praised Jackson for doing this to Lindsay-Hogg’s footage in the name of restoration, and it emboldened him to do worse things. Before the <em>True Lies </em>debacle, the most recent example of this was the aggressively saccharine and confusing <em>Now &amp; Then</em>, a long unfinished demo now finished by Ringo and Paul, edited together with archival footage of younger John and George composited in an a fashion that can be charitably described as tremendously weird.</p><div><figure><p><iframe title="The Beatles - Now And Then (Official Music Video)" width="710" height="399" src="https://www.youtube.com/embed/Opxhh9Oh3rg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><figcaption>Every part of this is strange.</figcaption></figure></div><p>Lest I am accused of being a luddite, I firmly believe there are many use cases for this technology. Nvidia’s DLSS and competing variants generally work very well on the games they are trained on. I regularly use <a href="https://nmkd.itch.io/flowframes" target="_blank" rel="noreferrer noopener">Flowframes</a> in the rare case that I need interpolation. I have often used waifu2x and now <a href="https://github.com/chaiNNer-org/chaiNNer" target="_blank" rel="noreferrer noopener">chainner</a> if I need to photoshop a still and my source is bad, and there are databases of countless <a href="https://openmodeldb.info/" target="_blank" rel="noreferrer noopener">AI upscaling models</a>. But the flip side to this is that these technologies are often used in place of proper ingest. “Crap in, crap out” is a truism for a reason. I spend a lot of time regularly capturing VHS and Laserdisc at the highest possible quality for fun, and when I see people who should know better say “Just use Topaz” (a commercial AI upscaler) instead of learning how to correctly ingest footage and deinterlace it, it makes me want to pull out my hair, because it almost uniformly looks bad to anyone who works with video professionally.&nbsp;</p><div><figure><p><iframe title="The Cure - Catch &amp; Why Can't I Be You? (Live) - The Tube (1987)" width="710" height="533" src="https://www.youtube.com/embed/ks1wE_NXWv8?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><figcaption>This is captured on a home VHS with <a href="https://github.com/oyvindln/vhs-decode">VHS-Decode,</a> and then upscaled to 4k for YouTube and deinterlaced to 50 FPS <a href="http://avisynth.nl/index.php/QTGMC">QTGMC</a>, and as a result it looks great.</figcaption></figure></div><p>When you finally do see a piece of footage transferred well, it can be breathtaking. Good archival practices require a lot of institutional knowledge and labor. It’s an art when done well, and the people who do it care so much about what they do. But the modern application of much of AI is precisely about taking labor out of the equation. Why transfer a tape correctly when we can just have a computer guess badly instead? What if crap goes in, and it doesn’t come out?</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Neck. NECK! <em>Credit: 20th Century Fox</em></figcaption></figure><p>What makes all of this worse is that <em>True Lies</em>, as I understand it, did not need to be shoved through the AI wringer. According to <a href="https://thedigitalbits.com/item/true-lies-2023-digital-uhd" target="_blank" rel="noreferrer noopener">The Digital Bits</a>, Park Road Post had a recent 4k scan of <em>True Lies </em>from the original camera negative. Park Road Post’s own website claims they have a Lasergraphics Director 10K film scanner on the premises. So what is the purpose of adding AI to this mix? Why do that to a perfectly fine-looking film? What is gained here, other than to slightly yassify an Arnold film? At this point, maybe they are simply doing it just to say that they did, because the technology is lying around, like a loaded gun with the safety off.</p><p>Nerds who post on blu-ray forums as a rule often need to calm down, and the forum threads I have read about this are no exception, but there are certain cases where a filmmaker is just wrong about how their films should look. Lucas is the infamous notable example, but Cameron is not innocent here in his treatment of his own films. Wong Kar-wai is another notable example, as what he did to <em>Ashes of Time</em> is criminal as was his recent “remasters” of his movies like<em> In The Mood For Love</em>. In certain rare conditions like this, it’s healthy to question if directors have the best interests of their own films in mind, <a href="https://thedigitalbits.com/item/titanic-4k-25thle-uhd-2023" target="_blank" rel="noreferrer noopener">as Cameron himself personally approved of these remasters</a>.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Why did you change the color of your movie like this? <em>Credit: Block 2 Pictures</em></figcaption></figure><p>What actually chills my blood more than anything is the thought that a lot of people think this all looks pretty good. You see this mindset at work whenever an AI fetishist posts a stable diffusion image of a woman with 13 fingers, 40 incisors and comically huge breasts. There’s an entire portion of the population that takes overt pleasure in the over-smoothed, perverts that prefer all media to be fast, high frame rate, and scrubbed squeaky clean. The cameras on our phones don’t simply capture images anymore, <a href="https://www.newyorker.com/culture/infinite-scroll/have-iphone-cameras-become-too-smart" target="_blank" rel="noreferrer noopener">they compute them and ‘optimize’ them</a>. It’s Italian Futurism in 4k, a noise reduction death drive. It’s not simply enough for much of digital cinema to look crystal clear and lifeless; the past should be denoised, grain managed and cleaned to conform to that standard. It is expedient and profitable if people don’t remember what film is supposed to look like.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>That's too much detail. <em>Credit: 20th Century Fox</em></figcaption></figure><p>I don’t think anyone gets into preservation to destroy film. I believe that everyone involved with this process worked hard and had the best interests of the film in mind, but the exact nature of restoration itself can vary wildly. I believe that some companies get blinded by new tech, get high on their own supply, and that can result in work that is destructive instead of restorative. I don’t know what the solution to this is in the world we live in, outside of decoupling film preservation from the profit motive whenever possible.</p><p>But I am certain about one thing. For a while, much of gaming tried looking like <em>Aliens</em>. Now, <em>Aliens</em> looks like a video game. And that doesn’t sit right with me.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Researchers discover neuronal biomarkers of schizophrenia in the blood (108 pts)]]></title>
            <link>https://hmri.org.au/news-article/researchers-discover-neuronal-biomarkers-schizophrenia-blood</link>
            <guid>38740544</guid>
            <pubDate>Sat, 23 Dec 2023 00:44:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hmri.org.au/news-article/researchers-discover-neuronal-biomarkers-schizophrenia-blood">https://hmri.org.au/news-article/researchers-discover-neuronal-biomarkers-schizophrenia-blood</a>, See on <a href="https://news.ycombinator.com/item?id=38740544">Hacker News</a></p>
<div id="readability-page-1" class="page"><div property="content:encoded"><p><img alt="HMRI and University of Newcastle researcher, Professor Murray Cairns, along with his Precision Medicine team have discovered a unique biomarker in the blood of people with schizophrenia. The findings, published in&nbsp;Science Advances&nbsp;this week, offer a rare insight into the molecular characteristics of the brain by using neuronally derived material present in circulating blood.&nbsp;" src="https://hmri.org.au/sites/default/files/awards_tbt_2.png"></p>
<h3>HMRI and University of Newcastle researcher, <a href="https://hmri.org.au/researchers/murray-cairns">Professor Murray Cairns</a>, along with his Precision Medicine team have discovered a unique biomarker in the blood of people with schizophrenia. The findings, published in&nbsp;<em>Science Advances</em>&nbsp;this week, offer a rare insight into the molecular characteristics of the brain by using neuronally derived material present in circulating blood.&nbsp;</h3>
<p>Professor Cairns explains, “Understanding schizophrenia on a molecular level has been notoriously difficult because, until now, we’ve needed to extract tissue from the brain. This can only be done postmortem and over the past decade, we’ve only had limited access to this precious resource.&nbsp;</p>
<p>&nbsp;“The new technique that we have pioneered, in partnership with the Australian Schizophrenia Research biobank, allowed us to analyse blood serum from 600 participants, including 230 people diagnosed with schizophrenia.</p>
<blockquote><p><strong>“We have been able to use blood from living people to understand what is different about the neurons in the brain. The blood contains small liposome-like vesicles that encapsulate molecules from the neurons in the brain where they originate.</strong></p>
</blockquote>
<p>“Because we were able to use blood from living clinical trial participants, we can compare with other data including MRI images, genome sequences, diagnostic instruments, and other cognitive parameters,” says Professor Cairns.&nbsp;</p>
<p>The bottom line for this new technique is that Professor Cairns and his team will be able to more specifically direct treatment and potentially measure the response in participants with schizophrenia.&nbsp;</p>
<p>&nbsp;Professor Cairns says, “Nearly one per cent of people are diagnosed with schizophrenia during their life and up to 50 per cent end up with treatment-resistant disease that fails to respond to the standard-of-care medications. It’s important to help people experiencing psychosis quickly before they withdraw from work and social connections; before an acute episode becomes a chronic condition.</p>
<p>&nbsp;“The neurons in the brain are responsible for controlling memory, movement and cognition. By understanding what’s different about the neurons of people with schizophrenia, and being able to test for the biomarkers of the disease, we are better able to diagnose and effectively treat people with the right medication,” says Professor Cairns.&nbsp;</p>
<p>HMRI is a partnership between the University of Newcastle, Hunter New England Health and the community.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How big is YouTube? (698 pts)]]></title>
            <link>https://ethanzuckerman.com/2023/12/22/how-big-is-youtube/</link>
            <guid>38739563</guid>
            <pubDate>Fri, 22 Dec 2023 22:55:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ethanzuckerman.com/2023/12/22/how-big-is-youtube/">https://ethanzuckerman.com/2023/12/22/how-big-is-youtube/</a>, See on <a href="https://news.ycombinator.com/item?id=38739563">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
		
	<main id="content" role="main">

	<div>
						<article id="post-6596">
				<div><p>How big is YouTube?</p>
<p>I got interested in this question a few years ago, when I started writing about the <a href="https://theconversation.com/facebook-has-a-misinformation-problem-and-is-blocking-access-to-data-about-how-much-there-is-and-who-is-affected-164838">“denominator problem”</a>. A great deal of social media research focuses on finding unwanted behavior – mis/disinformation, hate speech – on platforms. This isn’t that hard to do: search for “white genocide” or “ivermectin” and count the results. Indeed, a lot of eye-catching research does just this – consider <a href="https://secure.avaaz.org/campaign/en/facebook_threat_health/">Avaaz’s August 2020 report about COVID misinformation</a>. It reports 3.8 billion views of COVID misinfo in a year, which is a very big number. But it’s a numerator without a denominator – Facebook generates dozens or hundreds of views a day for each of its 3 billion users – 3.8 billion views is actually a very small number, contextualized with a denominator.</p>
<p>A few social media platforms have made it possible to calculate denominators. Reddit, for many years, permitted Pushshift to collect all Reddit posts, which means we can calculate what a small fraction of Reddit is focused on meme stocks or crypto, versus conversations about mental health or board gaming. Our <a href="https://redditmap.social/">Redditmap.social platform</a> – primarily built by Virginia Partridge and Jasmine Mangat – is based around the idea of looking at the platform as a whole and understanding how big or small each community is compared to the whole. Alas, Reddit cut off public access to Pushshift this summer, so Redditmap.social can only use data generated early this year. </p>
<p>Twitter was also a good platform for studying denominators, because it created a research API that took a statistical sample of all tweets and gave researchers access to every 10th or 100th one. If you found 2500 tweets about ivermectin a day, and saw 100m tweets through the decahose (which gave researchers 1/10th of tweet volume), you could calculate an accurate denominator (100m x 10) (All these numbers are completely made up.) Twitter has cut off access to these excellent academic APIs and now charges massive amounts of money for much less access, which means that it’s no longer possible for most researchers to do denominator-based work.</p>
<p>Interesting as Reddit and Twitter are, they are much less widely used than YouTube, which is used by virtually all internet users. <a href="https://www.pewresearch.org/internet/2023/12/11/teens-social-media-and-technology-2023/">Pew reports that 93% of teens use YouTube</a> – the closest service in terms of usage is Tiktok with 63% and Snapchat with 60%. While YouTube has a good, well-documented API, there’s no good way to get a random, representative sample of YouTube. Instead, most research on YouTube either studies a collection of videos (all videos on the channels of a selected set of users) or videos discovered via recommendation (start with <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">Never Going to Give You Up</a>, objectively the center of the internet, and collect recommended videos.) You can do excellent research with either method, but you won’t get a sample of all YouTube videos and you won’t be able to calculate the size of YouTube.</p>
<p>I brought this problem to Jason Baumgartner, creator of PushShift, and prince of the dark arts of data collection. One of Jason’s skills is a deep knowledge of undocumented APIs, ways of collecting data outside of official means. Most platforms have one or more undocumented APIs, widely used by programmers for that platform to build internal tools. In the case of YouTube, that API is called <a href="https://gizmodo.com/how-project-innertube-helped-pull-youtube-out-of-the-gu-1704946491">“Inner Tube”</a> and its existence is an open secret in programmer communities. Using InnerTube, Jason suggested we do something that’s both really smart and really stupid: guess at random URLs and see if there are videos there.</p>
<p>Here’s how this works: YouTube URLs look like this: <code> https://www.youtube.com/ watch?v=vXPJVwwEmiM</code></p>
<p>That bit after “watch?v=” is an 11 digit string. The first ten digits can be a-z,A-Z,0-9 and _-. The last digit is special, and can only be one of 16 values. Turns out there are 2^64 possible YouTube addresses, an enormous number: 18.4 quintillion. There are lots of YouTube videos, but not that many. Let’s guess for a moment that there are 1 billion YouTube videos – if you picked URLs at random, you’d only get a valid address roughly once every 18.4 billion tries. </p>
<p>We refer to this method as “drunk dialing”, as it’s basically as sophisticated as taking swigs from a bottle of bourbon and mashing digits on a telephone, hoping to find a human being to speak to. Jason found a couple of cheats that makes the method roughly 32,000 times as efficient, meaning our “phone call” connects lots more often. Kevin Zheng wrote a whole bunch of scripts to do the dialing, and over the course of several months, we collected more than 10,000 truly random YouTube videos.</p>
<p>There’s lots you can do once you’ve got those videos. Ryan McCarthy is lead author <a href="https://journalqd.org/article/view/4066">on our paper in the Journal of Quantitative Description</a>, and he led the process of watching a thousand of these videos and hand-coding them, a massive and fascinating task. Kevin wired together his retrieval scripts with a variety of language detection systems, and we now have a defensible – if far from perfect – estimate of what languages are represented on YouTube. We’re starting some experiments to understand how the videos YouTube recommends differ from the “average” YouTube video – YouTube likes recommending videos with at least ten thousand views, while the median YouTube video has 39 views.</p>
<p>I’ll write at some length in the future about what we can learn from a true random sample of YouTube videos. I’ve been doing a lot of thinking about the idea of “the quotidian web”, learning from the bottom half of the long tail of user-generated media so we can understand what most creators are doing with these tools, not just from the most successful influencers. But I’m going to limit myself to the question that started this blog post: how big is YouTube?</p>
<p><img decoding="async" src="https://ethanzuckerman.com/wp-content/2023/12/Screenshot-2023-12-22-at-12.18.43?PM-1.png" alt="" width="1" height="1"><img decoding="async" fetchpriority="high" src="https://ethanzuckerman.com/wp-content/2023/12/tubestats-1024x758.jpg" alt="" width="1024" height="758" srcset="https://ethanzuckerman.com/wp-content/2023/12/tubestats-1024x758.jpg 1024w, https://ethanzuckerman.com/wp-content/2023/12/tubestats-600x444.jpg 600w, https://ethanzuckerman.com/wp-content/2023/12/tubestats-150x111.jpg 150w, https://ethanzuckerman.com/wp-content/2023/12/tubestats-768x569.jpg 768w, https://ethanzuckerman.com/wp-content/2023/12/tubestats.jpg 1334w" sizes="(max-width: 1024px) 100vw, 1024px"></p>
<p>Consider drunk dialing again. Let’s assume you only dial numbers in the 413 area code: 413-000-0000 through 413-999-9999. That’s 10,000,000 possible numbers. If one in 100 phone calls connect, you can estimate that 100,000 people have numbers in the 413 area code. In our case, our drunk dials tried roughly 32k numbers at the same time, and we got a “hit” every 50,000 times or so. Our current estimate for the size of YouTube is 13.325 billion videos – we are now updating this number every few weeks at <a href="https://tubestats.org/">tubestats.org</a>.</p>
<p>Once you’re collecting these random videos, other statistics are easy to calculate. We can look at how old our random videos are and calculate how fast YouTube is growing: we estimate that over 4 billion videos were posted to YouTube just in 2023. We can calculate the mean and median views per video, and show just how long the “long tail” is – videos with 10,000 or more videos are roughly 4% of our data set, though they represent the lion’s share of views of the YouTube platform. </p>
<p>Perhaps the most important thing we did with our set of random videos is to demonstrate a vastly better way of studying YouTube than drunk dialing. We know our method is random because it iterates through the entire possible address space. By comparing our results to other ways of generating lists of YouTube videos, we can declare them “plausibly random” if they generate similar results. Fortunately, one method does – it was <a href="https://dl.acm.org/doi/10.1145/2068816.2068851">discovered by Jia Zhou et. al. in 2011</a>, and it’s far more efficient than our naïve method. (You generate a five character string where one character is a dash – YouTube will autocomplete those URLs and spit out a matching video if one exists.) Kevin now polls YouTube using the “dash method” and uses the results to maintain our dashboard at Tubestats. </p>
<p>We have lots more research coming out from this data set, both about what we’re discovering and about some complex ethical questions about how to handle this data. (Most of the videos we’re discovering were only seen by a few dozen people. If we publish those URLs, we run the risk of exposing to public scrutiny videos that are “public” but whose authors could reasonably expect obscurity. Thus our paper does not include the list of videos discovered.) <a href="https://publicinfrastructure.org/2023/12/21/notes-from-random-youtube-coding/">Ryan has a great introduction to main takeaways from our hand-coding</a>. He and I are both working on longer writing about the weird world of random videos – what can we learn from spending time deep in the long tail? </p>
<p>Perhaps most importantly, we plan to maintain <a href="https://tubestats.org/">Tubestats</a> so long as we can. It’s possible that YouTube will object to the existence of this resource or the methods we used to create it. Counterpoint: I believe that high level data like this should be published regularly for all large user-generated media platforms. These platforms are some of the most important parts of our digital public sphere, and we need far more information about what’s on them, who creates this content and who it reaches.</p>
<p>Many thanks to the Journal for Quantitative Description of publishing such a large and unwieldy paper – it’s 85 pages! Thanks and congratulations to all authors: Ryan McGrady, Kevin Zheng, Rebecca Curran, Jason Baumgartner and myself. And thank you to everyone who’s funded our work: the Knight Foundation has been supporting a wide range of our work on studying extreme speech on social media, and other work in our lab is supported by the Ford Foundation and the MacArthur Foundation.</p>
<p>Finally – I’ve got COVID, so if this post is less coherent than normal, that’s to be expected. Feel free to use the comments to tell me what didn’t make sense and I will try to clear it up when my brain is less foggy.</p>
</div>

			</article>
			
		</div>
</main><!--/.neve-main-->




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Groqchat (158 pts)]]></title>
            <link>https://chat.groq.com/</link>
            <guid>38739199</guid>
            <pubDate>Fri, 22 Dec 2023 22:03:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chat.groq.com/">https://chat.groq.com/</a>, See on <a href="https://news.ycombinator.com/item?id=38739199">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Bluesky makes web view public, login no longer required to read posts (272 pts)]]></title>
            <link>https://bsky.app/profile/bsky.app/post/3kh5rbndrjd2x</link>
            <guid>38739130</guid>
            <pubDate>Fri, 22 Dec 2023 21:56:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bsky.app/profile/bsky.app/post/3kh5rbndrjd2x">https://bsky.app/profile/bsky.app/post/3kh5rbndrjd2x</a>, See on <a href="https://news.ycombinator.com/item?id=38739130">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Shein forces Amazon to lower seller fees (130 pts)]]></title>
            <link>https://www.marketplacepulse.com/articles/shein-forces-amazon-to-lower-seller-fees</link>
            <guid>38739086</guid>
            <pubDate>Fri, 22 Dec 2023 21:50:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.marketplacepulse.com/articles/shein-forces-amazon-to-lower-seller-fees">https://www.marketplacepulse.com/articles/shein-forces-amazon-to-lower-seller-fees</a>, See on <a href="https://news.ycombinator.com/item?id=38739086">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Amazon will lower the transaction fee it charges sellers from 17% to just 5% for under-$15 apparel items as it faces Shein’s competition.</p>
<p>Amazon is the largest clothing retailer in the U.S., including online and offline retail. But it charges sellers a 17% fee plus additional fees for fulfillment and advertising, making it one of the most expensive Amazon categories to sell in. Amazon increased the fee to 17% from 15% five years ago, in April 2018.</p>
<p>Shein is an order of magnitude smaller than Amazon - its GMV this year, more than $40 billion, is less than 10% of Amazon’s. But most of that $40 billion is in clothing, which Shein is best known for and strongest in. Its supply chain, tuned to introduce thousands of new designs daily while dynamically adjusting which products get manufactured, is uniquely fit for clothing. It is the biggest online-native clothing retailer. </p>
<p>Amazon is reacting to Shein by lowering referral fees from 17% to 5% for clothing items priced under $15. For products priced between $15 and $20, it will decrease referral fees from 17% to 10%. Lower fees will allow sellers to lower prices by a few dollars and maintain the same margin. More expensive items remain at 17%. </p>
<p><img src="https://cdn.marketplacepulse.com/articles/641/amazon-clothing-referral-fee-now-vs-starting-2024.png" alt="Amazon Clothing Referral Fee Now vs. Starting 2024"></p>
<p>Shein can’t match Amazon’s one-day or two-day delivery, but it can offer bargain prices while taking a week to deliver. Amazon sells products and fast shipping; Shein sells products and slow shipping. The two are inseparable - <a href="https://www.marketplacepulse.com/articles/amazon-sells-fast-shipping-not-products">the logistics are as much part of the product as the products themselves</a>. However, Amazon’s high fees made the price difference even greater. </p>
<p>Amazon will remain more expensive than Shein even after the fee reduction because the biggest cost is fulfillment. Items stored in domestic Amazon warehouses will always be more costly than Shein’s direct shipments to consumers from China, which also skip inspection and taxation by U.S. Customs. </p>
<p>Shein is not a direct competitor to Amazon in general, but in clothing, it absolutely is. Shein has expanded to more categories, started manufacturing outside China, built domestic warehouses, and <a href="https://www.marketplacepulse.com/articles/amazon-sellers-are-joining-shein-marketplace">launched a marketplace</a> to attract sellers. But its core remains clothing shipped from China. Yet Shein’s critical innovation was dressing the supply chain advantage in an experience that delights. Shein looks and feels like a brand store rather than a random selection of products.</p>
<p>Amazon rarely changes referral fees, and reducing the fee by 70% for items in Shein’s key price segment is unquestionably a response to Shein. But even if fees were to go to zero, Amazon would still have no answer for Shein. For instance, Amazon doesn’t have the tens of millions of followers Shein has on Instagram nor the billions of views Shein hauls have on TikTok. Perhaps Amazon doesn’t need to answer, but the seller fee is not it. Focusing on fees is missing the forest for the trees. </p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google search overwhelmed by spam attack (309 pts)]]></title>
            <link>https://www.searchenginejournal.com/google-search-overwhelmed-by-massive-spam-attack/504527/</link>
            <guid>38738619</guid>
            <pubDate>Fri, 22 Dec 2023 21:00:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.searchenginejournal.com/google-search-overwhelmed-by-massive-spam-attack/504527/">https://www.searchenginejournal.com/google-search-overwhelmed-by-massive-spam-attack/504527/</a>, See on <a href="https://news.ycombinator.com/item?id=38738619">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="narrow-cont"><p><a href="https://www.searchenginejournal.com/serp-search-engine-results-page-features-guide/377094/">Google’s search results</a> have been hit by a spam attack for the past few days in what can only be described as completely out of control. Many domains are ranking for hundreds of thousands of keywords each, an indication that the scale of this attack could easily reach into the millions of keyword phrases.</p>
<p><strong>Updated:</strong><br>
The spam was initially discovered by Lily Ray:</p>
<blockquote id="tweet-1737499776386576538" data-width="550" data-dnt="true">
<p lang="en" dir="ltr">If you currently Google "craigslist used auto parts," every single result in the top 20 is spam, minus the first two results from Craigslist.</p>
<p>— Lily Ray 😏 (@lilyraynyc) <a href="https://twitter.com/lilyraynyc/status/1737499776386576538?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 20, 2023</a></p></blockquote>

<p>Surprisingly, <a href="https://www.searchenginejournal.com/google-what-to-do-about-spammy-links-from-malicious-domains/449215/">many of the domains</a> have only been registered within the past 24-48 hours.</p>
<p>This recently came to my attention from a series of posts by Bill Hartzer (<a href="https://www.linkedin.com/in/bhartzer/" target="_blank" rel="noopener">LinkedIn profile</a>) where he published a <a href="https://www.searchenginejournal.com/link-graphs-and-google-rankings/435688/">link graph</a> generated by the Majestic backlinks tool that exposed the link networks of several of the spam sites.</p>
<p>The link graph that he posted showed scores of websites tightly <a href="https://www.searchenginejournal.com/seo-internal-links-best-practices/214886/">interlinking</a> with each other, which is a fairly typical pattern for <a href="https://www.searchenginejournal.com/link-building-guide/bad-links-risky-tactics/">spammy link</a> networks.</p>
<h3>Screenshot Of Tightly Interlinked Network</h3>
<p><img fetchpriority="high" decoding="async" src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/link-network-65841b421292a-sej.jpg" alt="Google Search Overwhelmed By Massive Spam Attack" width="500" height="618" sizes="(max-width: 500px) 100vw, 500px" data-srcset="https://www.searchenginejournal.com/wp-content/uploads/2023/12/link-network-65841b421292a-sej.jpg 500w, https://www.searchenginejournal.com/wp-content/uploads/2023/12/link-network-65841b421292a-sej-480x593.jpg 480w" data-src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/link-network-65841b421292a-sej.jpg" srcset="https://www.searchenginejournal.com/wp-content/uploads/2023/12/link-network-65841b421292a-sej.jpg 500w, https://www.searchenginejournal.com/wp-content/uploads/2023/12/link-network-65841b421292a-sej-480x593.jpg 480w"><span>Image by Bill Hartzer via Majestic</span></p>
<p>Bill and I talked about the spam sites over Facebook messenger and we both agreed that although the spammers put a lot of work into creating a backlink network, the links weren’t actually responsible for the high rankings.</p>
<p><strong>Bill said:</strong></p>
<blockquote><p>“This, in my opinion, is partly the fault of Google, who appears to be putting more emphasis on content rather than links.”</p></blockquote>
<p>I agree 100% that Google is putting more emphasis on content than links. But my thoughts are that the <a href="https://www.searchenginejournal.com/link-building-guide/bad-links-risky-tactics/">spam links</a> are there so that Googlebot can discover the spam pages and index them, even if just for one or two days.</p>
<p>Once indexed the spam pages are likely exploiting what I consider two loopholes in <a href="https://www.searchenginejournal.com/google-algorithm-history/">Google’s algorithms</a>, which I talk about next.</p>
<h2>Out of Control Spam in Google SERPs</h2>
<p>Multiple sites are ranking for longtail phrases that are somewhat easy to rank, as well as phrases with a local search component, which are also easy to rank.</p>
<p>Longtail phrases are keyword phrases that are used by people but exceedingly rarely. Longtail is a concept that’s been around for almost twenty years and subsequently popularized by a 2006 book called The Long Tail: Why the Future of Business is Selling Less of More.</p>
<p>Spammers are able to rank for these rarely searched phrases because there is little competition for those phrases, which makes it easy to rank.</p>
<p>So if a spammer creates millions of pages of longtail phrases those pages can then rank for hundreds of thousands of keywords every day in a short period of time.</p>
<p>Companies like Amazon use the principle of the longtail to sell hundreds of thousands of individual products a day which is different than selling one product hundreds of thousands of times per day.</p>
<p>That’s what the spammers are exploiting, the ease of ranking for <a href="https://www.searchenginejournal.com/keyword-research/long-tail-keywords/">longtail phrase</a>s.</p>
<p>The second thing that the spammers are exploiting is the loophole that’s inherent in Local Search.</p>
<p>The local search algorithm is not the same as the algorithm for ranking non-local keywords.</p>
<p>The examples that have come to light are variations of Craigslist and related keywords.</p>
<p>Examples are phrases like <em>Craigslist auto parts</em>, <em>Craigslist rooms to rent</em>, <em>Craigslist for sale by owner</em> and thousands of other keywords, most of which don’t use the word Craigslist.</p>
<p>The scale of the spam is huge and it goes far beyond than keywords with the word “Craigslist” in it.</p>
<h2>What The Spam Page Looks Like</h2>
<p>Taking a look at what the spam page looks like is impossible by visiting the pages with a browser.</p>
<p>I tried to see the source code of the sites that rank in Google but all of the spam sites automatically redirect to another domain.</p>
<p>I next entered the spam URL into the <a href="https://www.searchenginejournal.com/w3c-validator-guide/437030/">W3C</a> link checker to visit the website but the W3C bot couldn’t see the site either.</p>
<p>So I changed my browser user agent to identify itself as Googlebot but the spam site still redirected me.</p>
<p>That indicated that the site was not checking if the user agent was Googlebot.</p>
<p>The spam site was checking for Googlebot IP addresses. If the visitor’s IP address matched as belonging to Google then the spam page displayed content to Googlebot.</p>
<p>All other visitors got a redirect to other domains that displayed sketchy content.</p>
<p>In order to see the <a href="https://www.searchenginejournal.com/google-valid-html/258881/">HTML</a> of the website I had to visit with a Google IP address. So I used Google’s Rich Results tester to visit the spam site and record the HTML of the page.</p>
<p>I showed Bill Hartzer how to extract the HTML by using the Rich Results tester and he immediately went off to tweet about it, lol. Dang!</p>
<p>The Rich Results Tester has an option to show the HTML of a webpage. So copied the HTML, pasted it into a text file then saved it it as an HTML file.</p>
<h3>Screenshot Of HTML Provided By Rich Results Tool</h3>
<p><img src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/screenshot-html-658423275fce1-sej.jpg" alt="Google Search Overwhelmed By Massive Spam Attack" data-old-src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20400%20473%22%3E%3C/svg%3E" data-src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/screenshot-html-658423275fce1-sej.jpg"></p>
<p>I next edited the HTML file to remove any JavaScript then saved the file again.</p>
<p><strong>I was now able to see what the webpage looks like to Google:</strong></p>
<h3>Screenshot Of Spam Webpage</h3>
<p><img src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/screenshot-of-spam-page-65841ab85e154-sej.png" alt="Screenshot of a spam webpage that ranks in Google" data-old-src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20447%20644%22%3E%3C/svg%3E" data-src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/screenshot-of-spam-page-65841ab85e154-sej.png"></p>
<h2>One Domain Ranks For 300,000+ Keywords</h2>
<p>Bill sent me a spreadsheet containing a list of keyword phrases that just one of the spam sites ranked for. One spam site, just one of them, ranked for over 300,000 keyword phrases.</p>
<h3>Screenshot Showing Keywords For One Domain</h3>
<p><img src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/screenshot-spreadsheet-65841a432f6d1-sej.png" alt="Image showing a closeup of a spreadsheet with keyword phrases on it" data-old-src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20320%20420%22%3E%3C/svg%3E" data-src="https://www.searchenginejournal.com/wp-content/uploads/2023/12/screenshot-spreadsheet-65841a432f6d1-sej.png"></p>
<p>There were a lot of Craigslist keyword phrases but there were also other longtail phrases, many of which contained a local search element. As I mentioned, it’s easy to rank for longtail phrases, easy to rank for local search phrases and combine the two kinds of phrases and it’s really easy to rank for these keyword phrases.</p>
<h2>Why Does This Spam Technique Work?</h2>
<p><a href="https://www.searchenginejournal.com/local-seo/what-is-local-seo-why-local-search-is-important/">Local search</a> uses a different algorithm than the non-local algorithm. For example, a local site, in general, doesn’t need a lot of links to rank for a query. The pages just need the right kinds of keywords to trigger a local search algorithm and rank it for a geographic area.</p>
<p>So if you search for “Craigslist auto parts” that’s going to trigger the local search algorithm and because it’s longtail it’s not going to take too much to rank it.</p>
<p>This is an ongoing problem for many years. Several years ago a website was able to rank for “Rhinoplasty Plano, Texas” with a site that contained old Roman Latin content and headings in English. Rhinoplasty is a longtail local search and Plano, Texas is a relatively small town. Ranking for that Rhinoplasty keyword phrase was so easy that the latin language website was able to easily rank for it.</p>
<p>Google has known about this spam problem since at least December 19th, as acknowledged in a tweet by Danny Sullivan.</p>
<blockquote id="tweet-1737236506190987682" data-width="550" data-dnt="true">
<p lang="en" dir="ltr">Yes, I already passed that one on to the search team. Here’s a peek. And it’s being looked at. <a href="https://t.co/vJH3EisnXD" target="_blank" rel="noopener">pic.twitter.com/vJH3EisnXD</a></p>
<p>— Google SearchLiaison (@searchliaison) <a href="https://twitter.com/searchliaison/status/1737236506190987682?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 19, 2023</a></p></blockquote>

<p>It will be interesting to see if Google finally after all this time figures out a way to combat this kind of spam.</p>
<p><em>Featured Image by Shutterstock/Kateryna Onyshchuk</em></p>



</div></div>]]></description>
        </item>
    </channel>
</rss>