<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 24 Dec 2024 04:30:21 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Making AMD GPUs competitive for LLM inference (2023) (112 pts)]]></title>
            <link>https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference</link>
            <guid>42498634</guid>
            <pubDate>Tue, 24 Dec 2024 00:17:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference">https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference</a>, See on <a href="https://news.ycombinator.com/item?id=42498634">Hacker News</a></p>
Couldn't get https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Why are cancer guidelines stuck in PDFs? (106 pts)]]></title>
            <link>https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in</link>
            <guid>42498462</guid>
            <pubDate>Mon, 23 Dec 2024 23:36:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in">https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in</a>, See on <a href="https://news.ycombinator.com/item?id=42498462">Hacker News</a></p>
Couldn't get https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Complete decompilation of Lego Island (156 pts)]]></title>
            <link>https://github.com/isledecomp/isle</link>
            <guid>42497173</guid>
            <pubDate>Mon, 23 Dec 2024 20:03:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/isledecomp/isle">https://github.com/isledecomp/isle</a>, See on <a href="https://news.ycombinator.com/item?id=42497173">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">LEGO Island Decompilation</h2><a id="user-content-lego-island-decompilation" aria-label="Permalink: LEGO Island Decompilation" href="#lego-island-decompilation"></a></p>
<p dir="auto"><a href="https://www.youtube.com/playlist?list=PLbpl-gZkNl2COf_bB6cfgTapD5WduAfPz" rel="nofollow">Development Vlog</a> | <a href="https://github.com/isledecomp/isle/blob/master/CONTRIBUTING.md">Contributing</a> | <a href="https://matrix.to/#/#isledecomp:matrix.org" rel="nofollow">Matrix</a> | <a href="https://forum.mattkc.com/viewforum.php?f=1" rel="nofollow">Forums</a> | <a href="https://www.patreon.com/mattkc" rel="nofollow">Patreon</a></p>
<p dir="auto">This is a functionally complete decompilation of LEGO Island (Version 1.1, English). It aims to be as accurate as possible, matching the recompiled instructions to the original machine code as much as possible. The goal is to provide a workable codebase that can be modified, improved, and ported to other platforms later on.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Status</h2><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d27978e87b3d5547e472ae3f6610ae64892cffc1ab7628ed0b8e683142d2bf8e/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f49534c4550524f47524553532e535647"><img src="https://camo.githubusercontent.com/d27978e87b3d5547e472ae3f6610ae64892cffc1ab7628ed0b8e683142d2bf8e/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f49534c4550524f47524553532e535647" width="50%" data-canonical-src="https://legoisland.org/progress/ISLEPROGRESS.SVG"></a><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dd9ae27b175ec9c47fa3d75495cf660d5a16c83f8c303b97e87fea750a234c7a/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f4c45474f3150524f47524553532e535647"><img src="https://camo.githubusercontent.com/dd9ae27b175ec9c47fa3d75495cf660d5a16c83f8c303b97e87fea750a234c7a/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f4c45474f3150524f47524553532e535647" width="50%" data-canonical-src="https://legoisland.org/progress/LEGO1PROGRESS.SVG"></a></p>
<p dir="auto">Both <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> are completely decompiled and, to the best of our knowledge, are functionally identical to the originals. However, work is still ongoing to improve the accuracy, naming, documentation, and structure of the source code. While there may still be unresolved bugs that are not present in retail, the game should be fully playable with the binaries derived from this source code.</p>
<p dir="auto">Due to various complexities with regard to the compiler, these binaries are not a byte-for-byte match of the original executables. We remain hopeful that this can be resolved at some point.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building</h2><a id="user-content-building" aria-label="Permalink: Building" href="#building"></a></p>
<p dir="auto">This project uses the <a href="https://cmake.org/" rel="nofollow">CMake</a> build system, which allows for a high degree of versatility regarding compilers and development environments. For the most accurate results, Microsoft Visual C++ 4.20 (the same compiler used to build the original game) is recommended. Since we're trying to match the output of this code to the original executables as closely as possible, all contributions will be graded with the output of this compiler.</p>
<p dir="auto">These instructions will outline how to compile this repository using Visual C++ 4.2 into highly-accurate binaries where the majority of functions are instruction-matching with retail. If you wish, you can try using other compilers, but this is at your own risk and won't be covered in this guide.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Prerequisites</h4><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<p dir="auto">You will need the following software installed:</p>
<ul dir="auto">
<li>Microsoft Visual C++ 4.2. This can be found on many abandonware sites, but the installer can be a little iffy on modern versions of Windows. For convenience, a <a href="https://github.com/itsmattkc/msvc420">portable version</a> is available that can be downloaded and used quickly instead.</li>
<li><a href="https://cmake.org/" rel="nofollow">CMake</a>. A copy is often included with the "Desktop development with C++" workload in newer versions of Visual Studio; however, it can also be installed as a standalone app.</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Compiling</h4><a id="user-content-compiling" aria-label="Permalink: Compiling" href="#compiling"></a></p>
<ol dir="auto">
<li>Open a Command Prompt (<code>cmd</code>).</li>
<li>From Visual C++ 4.2, run <code>BIN/VCVARS32.BAT x86</code> to populate the path and other environment variables for compiling with MSVC.</li>
<li>Make a folder for compiled objects to go, such as a <code>build</code> folder inside the source repository (the folder you cloned/downloaded to).</li>
<li>In your Command Prompt, <code>cd</code> to the build folder.</li>
<li>Configure the project with CMake by running:</li>
</ol>
<div data-snippet-clipboard-copy-content="cmake <path-to-source> -G &quot;NMake Makefiles&quot; -DCMAKE_BUILD_TYPE=RelWithDebInfo"><pre><code>cmake &lt;path-to-source&gt; -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo
</code></pre></div>
<ul dir="auto">
<li><strong>Visual C++ 4.2 has issues with paths containing spaces</strong>. If you get configure or build errors, make sure neither CMake, the repository, nor Visual C++ 4.2 is in a path that contains spaces.</li>
<li>Replace <code>&lt;path-to-source&gt;</code> with the source repository. This can be <code>..</code> if your build folder is inside the source repository.</li>
<li><code>RelWithDebInfo</code> is recommended because it will produce debug symbols useful for further decompilation work. However, you can change this to <code>Release</code> if you don't need them. <code>Debug</code> builds are not recommended because they are unlikely to be compatible with the retail <code>LEGO1.DLL</code>, which is currently the only way to use this decompilation for gameplay.</li>
<li><code>NMake Makefiles</code> is most recommended because it will be immediately compatible with Visual C++ 4.2. For faster builds, you can use <code>Ninja</code> (if you have it installed), however due to limitations in Visual C++ 4.2, you can only build <code>Release</code> builds this way (debug symbols cannot be generated with <code>Ninja</code>).</li>
</ul>
<ol dir="auto">
<li>Build the project by running <code>nmake</code> or <code>cmake --build &lt;build-folder&gt;</code></li>
<li>When this is done, there should be a recompiled <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> in the build folder.</li>
<li>Note that <code>nmake</code> must be run twice under certain conditions, so it is advisable to always (re-)compile using <code>nmake &amp;&amp; nmake</code>.</li>
</ol>
<p dir="auto">If you have a CMake-compatible IDE, it should be pretty straightforward to use this repository, as long as you can use <code>VCVARS32.BAT</code> and set the generator to <code>NMake Makefiles</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">Simply place the compiled <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> into LEGO Island's install folder (usually <code>C:\Program Files\LEGO Island</code> or <code>C:\Program Files (x86)\LEGO Island</code>). Alternatively, LEGO Island can run from any directory as long as <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> are in the same directory, and the registry keys (usually <code>HKEY_LOCAL_MACHINE\Software\Mindscape\LEGO Island</code> or <code>HKEY_LOCAL_MACHINE\Software\Wow6432Node\Mindscape\LEGO Island</code>) point to the correct location for the asset files.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">If you're interested in helping or contributing to this project, check out the <a href="https://github.com/isledecomp/isle/blob/master/CONTRIBUTING.md">CONTRIBUTING</a> page.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional Information</h2><a id="user-content-additional-information" aria-label="Permalink: Additional Information" href="#additional-information"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Which version of LEGO Island do I have?</h3><a id="user-content-which-version-of-lego-island-do-i-have" aria-label="Permalink: Which version of LEGO Island do I have?" href="#which-version-of-lego-island-do-i-have"></a></p>
<p dir="auto">Right click on <code>LEGO1.DLL</code>, select <code>Properties</code>, and switch to the <code>Details</code> tab. Under <code>Version</code> you should either see <code>1.0.0.0</code> (1.0) or <code>1.1.0.0</code> (1.1). Additionally, you can look at the game disc files; 1.0's files will all say August 8, 1997, and 1.1's files will all say September 8, 1997. Version 1.1 is by far the most common, especially if you're not using the English or Japanese versions, so that's most likely the version you have.</p>
<p dir="auto">Please note that some localized versions of LEGO Island were recompiled with small changes despite maintaining a version number parallel with other versions; this decompilation specifically targets the English release of version 1.1 of LEGO Island. You can verify you have the correct version using the checksums below:</p>
<ul dir="auto">
<li>ISLE.EXE <code>md5: f6da12249e03eed1c74810cd23beb9f5</code></li>
<li>LEGO1.DLL <code>md5: 4e2f6d969ea2ef8655ba3fc221a0c8fe</code></li>
<li>CONFIG.EXE <code>md5: 92d958a64a273662c591c88b09100f4a</code></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The journey to save the last known 43-inch Sony CRT (408 pts)]]></title>
            <link>https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known</link>
            <guid>42497093</guid>
            <pubDate>Mon, 23 Dec 2024 19:49:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known">https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known</a>, See on <a href="https://news.ycombinator.com/item?id=42497093">Hacker News</a></p>
Couldn't get https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Why HNSW is not the answer and disk-based alternatives might be more practical (121 pts)]]></title>
            <link>https://blog.pgvecto.rs/why-hnsw-is-not-the-answer</link>
            <guid>42496465</guid>
            <pubDate>Mon, 23 Dec 2024 18:24:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.pgvecto.rs/why-hnsw-is-not-the-answer">https://blog.pgvecto.rs/why-hnsw-is-not-the-answer</a>, See on <a href="https://news.ycombinator.com/item?id=42496465">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content-parent"><p>HNSW (Hierarchical Navigable Small World) has become the go-to algorithm for many vector databases. Its multi-layered graph structure and ability to efficiently navigate vector embeddings make it particularly appealing. However, despite its apparent advantages, HNSW may not be the optimal solution for large-scale and dynamic vector similarity search. In this blog post, we challenge the dominance of HNSW and explore why disk-based alternatives, such as IVF (Inverted File Index), might be more practical for massive datasets.</p>
<hr>
<h2 id="heading-the-appeal-of-hnsw">The Appeal of HNSW</h2>
<p>HNSW offers several advantages:</p>
<ul>
<li><p><strong>Efficient Search</strong>: Its graph-based structure enables quick nearest-neighbor searches, especially for smaller datasets.</p>
</li>
<li><p><strong>Incremental Updates</strong>: The ability to add new vectors incrementally without needing to rebuild the index is a major benefit for dynamic environments.</p>
</li>
<li><p><strong>High Recall</strong>: HNSW delivers high recall with relatively low latency, making it an ideal option for real-time applications.</p>
</li>
</ul>
<p>However, these benefits come with trade-offs that become more noticeable as dataset sizes increase.</p>
<hr>
<h2 id="heading-the-problem-of-hnsw">The Problem of HNSW</h2>
<p>One of the main challenges of HNSW is its significant dependence on memory for indexing and search operations. Here are the primary issues that emerge:</p>
<ul>
<li><p><strong>Memory Overhead</strong>: Traversing HNSW’s graph structure involves highly random access patterns. The entire dataset must be stored in memory to achieve reasonable performance. This becomes infeasible for large-scale datasets with billions of high-dimensional vectors due to exorbitant memory requirements.</p>
</li>
<li><p><strong>Performance Sensitivity to Memory Size</strong>: HNSW’s performance degrades sharply if the memory is even slightly insufficient to hold all vectors. In such cases, swapping data to disk drastically impacts search speed, making it impractical for systems with constrained memory.</p>
</li>
<li><p><strong>Unsuitability for Disk-Based Environments</strong>: HNSW is fundamentally designed for in-memory operations and performs poorly in disk-oriented scenarios, such as PostgreSQL. Its reliance on frequent random access patterns makes it incompatible with the sequential access nature of disk storage.</p>
</li>
<li><p><strong>Insertion and Deletion Costs</strong>: Updating the index in HNSW involves cascading modifications throughout the graph, leading to significant computation and write amplification. This makes insertion and deletion operations both slow and resource-intensive.</p>
</li>
</ul>
<p>In contrast, disk-based solutions like IVF excel in scenarios requiring scalability and efficiency at the cost of minimal complexity.</p>
<hr>
<h2 id="heading-why-ivf-can-be-faster-than-hnsw">Why IVF Can Be Faster Than HNSW</h2>
<p><img data-zoomable="true" loading="lazy" src="https://www.researchgate.net/publication/357875438/figure/fig15/AS:1113078611607560@1642390029247/Two-state-of-the-art-ANN-indexing-methods-the-IVF-index-Left-and-the-three-layer.ppm" alt="10: Two state-of-the-art ANN indexing methods: the IVF index (Left) and the (three-layer) HNSW index (Right). Figure credit: Li et al. [2020] ."></p>
<p>A critical observation across all vector search algorithms is that their performance largely hinges on the number of distance computations they perform. Minimizing these computations is essential for improving search speed. Although the original IVF index required scanning 1% to 5% of the total vectors, modern advancements in quantization and optimization have significantly enhanced its efficiency, making IVF a strong competitor to HNSW.</p>
<h3 id="heading-quantization-the-game-changer">Quantization: The Game Changer</h3>
<p>Quantization compresses high-dimensional vectors into compact representations. For instance:</p>
<ul>
<li><p><strong>RaBitQ</strong>: Leverages concentration of measure phenomena to enhance binary and scalar quantization accuracy, quantizing each dimension into 1 bit for a 32x compression ratio.</p>
</li>
<li><p><strong>Product Quantization (PQ)</strong>: Works by dividing the vector space into subspaces, quantizing each subspace independently to minimize approximation error. This method offers flexible compression ratios from 4x to 64x in FAISS, enabling finer compression and faster approximate searches.</p>
</li>
<li><p><strong>Scalar Quantization (SQ)</strong>: Quantizes each vector dimension independently by dividing its range into discrete levels, typically achieving a 4x compression ratio by converting from float to int8.</p>
</li>
<li><p><strong>ScaNN</strong>: Uses anisotropic vector quantization to optimize inner product accuracy by penalizing errors in directions that impact high inner products, achieving superior recall and speed.</p>
</li>
</ul>
<p>Quantization reduces memory and disk space usage significantly—often by a factor of 32x when converting floats into bits—while drastically lowering computational overhead. Despite some loss of precision, quantization makes vector comparisons far more efficient. For example, the typical distance computation complexity between two D-dimensional vectors is O(D^2), but compressing floats into bits reduces this by a factor of 1024 (32x32). With fast-scan optimizations, these computations are further accelerated via efficient CPU register lookups. Combined with IVF, many quantization methods consistently outperform HNSW in both speed and scalability. The typical workflow involves:</p>
<ol>
<li><p><strong>Initial Search</strong>: Leveraging compressed representations to rapidly identify candidate vectors.</p>
</li>
<li><p><strong>Reranking</strong>: Refining results using full-precision distance calculations on a smaller subset of candidates.</p>
</li>
</ol>
<h3 id="heading-comparing-rabitqivf-and-hnsw">Comparing RaBitQ+IVF and HNSW</h3>
<p>IVF with quantization provides a highly efficient way to store all quantized vectors in memory. By leveraging RaBitQ, memory usage is reduced by a factor of 32 compared to full-size vectors, allowing the entire quantized dataset to fit in memory. This design enables the index to rapidly retrieve approximate nearest neighbors using bit vectors and rerank them with full-precision vectors fetched from disk. For a typical Top-10 query, IVF fetches only 100-200 vectors from disk, compared to HNSW, which may require 800-1000 vectors. This efficient approach achieves an optimal balance between memory usage and disk access, offering outstanding cost-performance benefits.</p>
<p><img data-zoomable="true" loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1734489380210/a2812b59-5ffd-4ee3-ac35-1681950ef550.png?auto=compress,format&amp;format=webp" alt=""></p>
<p>While similar quantization techniques could theoretically be applied to HNSW, practical constraints reduce their effectiveness:</p>
<ul>
<li><p><strong>Vector Packing</strong>: Fast scan optimization relies on packing 32 compressed vectors together, which is incompatible with HNSW’s graph structure.</p>
</li>
<li><p><strong>Random Access Costs</strong>: HNSW involves frequent random access across graph nodes and edges, making traversal inefficient. In contrast, IVF organizes vectors sequentially in posting lists, enabling faster prefetching and efficient sequential scans.</p>
</li>
<li><p><strong>Reranking Costs</strong>: Both IVF and HNSW share similar reranking computational costs due to their reliance on quantized representations in the first stage.</p>
</li>
</ul>
<p>Ultimately, the performance difference between quantized IVF and HNSW is likely minimal, but IVF stands out with its simplicity and efficiency.</p>
<hr>
<div>
<table>
<thead>
<tr>
<td>Feature</td><td>IVF</td><td>IVF + RaBitQ</td><td>HNSW</td></tr>
</thead>
<tbody>
<tr>
<td>Indexing Method</td><td>KMeans can be offloaded to GPU</td><td>KMeans + Quantization</td><td>Nearest Neighbor Graph, need to keep everything in memory</td></tr>
<tr>
<td>Overlapped Data Across Query</td><td>Centroids</td><td>Quantized vectors</td><td>No</td></tr>
<tr>
<td>Scalability</td><td>Limited by CPU and memory</td><td>Outstanding</td><td>Limited by memory</td></tr>
<tr>
<td>Insertion/Deletion</td><td>Simple (updates posting lists)</td><td>Simple (updates posting lists)</td><td>Complex (cascading graph changes)</td></tr>
<tr>
<td>Search Speed</td><td>Slow</td><td>Extremely Fast with Quantization</td><td>Fast with sufficient memory</td></tr>
<tr>
<td>Overall Complexity</td><td>Low</td><td>Low</td><td>High</td></tr>
</tbody>
</table>
</div><hr>
<h2 id="heading-operational-simplicity-of-ivf">Operational Simplicity of IVF</h2>
<p>IVF’s simplicity makes it a more practical choice for real-world applications:</p>
<ul>
<li><p><strong>Insertion and Deletion</strong>: In HNSW, these operations trigger cascading modifications throughout the graph, resulting in significant computation and write amplification. IVF, in contrast, only requires updating the relevant posting list.</p>
</li>
<li><p><strong>Disk-Based Storage</strong>: IVF’s reliance on disk-based indexing enables it to scale efficiently without the prohibitive memory costs associated with HNSW.</p>
</li>
<li><p><strong>Adaptability</strong>: IVF can be easily combined with advanced quantization techniques, enabling further optimizations.</p>
</li>
</ul>
<hr>
<h2 id="heading-conclusion">Conclusion</h2>
<p>While HNSW has solidified its reputation as a fast and accurate algorithm for vector similarity search, it is not without limitations. Its memory-intensive nature and operational complexity make it less suitable for large-scale applications. In contrast, IVF offers a scalable and cost-effective alternative, particularly when paired with modern quantization techniques.</p>
<p>As the demand for vector search continues to grow, practitioners must carefully evaluate the trade-offs between memory-based and disk-based solutions. HNSW may dominate small to medium-scale applications, but for massive datasets, it’s time to look beyond HNSW and embrace simpler, scalable approaches like IVF.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Llama 3.3 70B Sparse Autoencoders with API access (146 pts)]]></title>
            <link>https://www.goodfire.ai/papers/mapping-latent-spaces-llama/</link>
            <guid>42495936</guid>
            <pubDate>Mon, 23 Dec 2024 17:18:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.goodfire.ai/papers/mapping-latent-spaces-llama/">https://www.goodfire.ai/papers/mapping-latent-spaces-llama/</a>, See on <a href="https://news.ycombinator.com/item?id=42495936">Hacker News</a></p>
Couldn't get https://www.goodfire.ai/papers/mapping-latent-spaces-llama/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[C++ is an absolute blast (208 pts)]]></title>
            <link>https://learncodethehardway.com/blog/31-c-plus-plus-is-an-absolute-blast/</link>
            <guid>42495135</guid>
            <pubDate>Mon, 23 Dec 2024 15:37:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://learncodethehardway.com/blog/31-c-plus-plus-is-an-absolute-blast/">https://learncodethehardway.com/blog/31-c-plus-plus-is-an-absolute-blast/</a>, See on <a href="https://news.ycombinator.com/item?id=42495135">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><info><author><b>By</b> Zed A. Shaw</author></info><!-- HTML_TAG_START --><p>I want you to ask yourself an honest question. When was the last time you actually had <em>fun</em> in programming? Looking back, I don't think I've actually had fun in programming for close to...10 years? I don't have fun with JavaScript, Python, Ruby, C, nothing. When I say "fun" I mean, you genuinely were excited to work on your project and the whole time you work on it you're thinking, "Damn this is a blast. I can't believe that wild idea I had actually worked!"</p><p>For example, I'm working on a little roguelike game and I had the idea, <em>"I bet I could use this dijkstra algorithm to connect rooms during map generation by inverting the map and then running it. It'd probably make really cool carved out tunnels between rooms."</em> I then had the greatest time figuring out how to pull it off and didn't feel like C++ got in my way. I managed to <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/roguish/src/branch/main/map.cpp#L296">pull it off</a> and learned a lot in the process. I then had the idea, <em>"I wonder if I can take my <a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a> user interface and just render it directly into an <a href="https://www.sfml-dev.org/">SFML</a> render window."</em> Sure enough, I could <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/roguish/src/branch/main/gui.cpp#L150">totally do that too</a> and not only was it not that difficult but I learned a lot about how C++ does unicode. None of this was <em>easy</em>, it was just all possible and I can't think of too may ways C++ would stop me from doing what I want. That's fun.</p><p>I think programmers have lost the story of why they got into programming in the first place. I know I didn't learn to code just so I can make a bunch of billionaires more billions. I didn't get into programming so that I can fight an immutable rendering engine into finally showing a cornflower blue button. I definitely didn't get into programming just to make a few authoritarians at the top of a random open source project happy.</p><p>I got into programming because it was <em>fun</em>. I remember staying up late until 4am desperately trying to get my shitty gwBASIC code to render a character to an MS-DOS console. I remember working on weird GUI ideas and network servers for weeks on end <em>just because I had an idea</em>. I remember fighting one bug for a month only to find out it was a stupid spelling mistake. I <em>remember</em> that all of this--even the frustration--was a hell of a lot of fun. Easily more entertaining than anything else I've learned.</p><p>One thing I definitely remember was that C++ was also a lot of fun. Even back in the day when it was an overhyped and honestly terrible language. It was fun because I could probably make almost anything with C++. No waiting around for someone blessed by the Python Illuminati to create that terrible wrapper around a C++ project's code.</p><p>But...somewhere along the way, C++ became...unfun, and I think the trend continued with every language to this day. The story of C++ is a possible warning to other languages, and a story of a great comeback from the dead that nobody realized happened.</p><p>In the late 90s to early 2ks, I was actively using both C++ and Java until I mostly quit using C++ about the same time the C++ community did this:</p><p><img src="https://learncodethehardway.com/images/blog/meta_programming_cocaine.jpg" alt="I do metaprogramming."></p><p>That's how it felt anyway. Just a bunch of idiots finding the new angle bracket shaped Template Metaprogramming Hammer and bashing everything nailshaped within 100 meters. I remember insane discussions with people who thought adding two numbers with a template was "faster" than adding two numbers directly, even though the assembly language output was exactly the same.</p><p>This obsession with using template metaprogramming for <em>everything</em>--combined with what I recall as a weird arrogance in the C++ standards committee to refuse to make things nice for programmers--is what tainted C++ for me and many people. It became the language for architecture astronauts who cared more about the Pimpl pattern and metaprogramming than actually making the language nice to use.</p><p>That's why I loved Java. Sun Microsystems totally cared about programmers and what they needed. Java had a Garbage Collector! Java <em>totally</em> would <em>never</em> end up doing the exact same thing. No, not at all. Java programmers would never become obsessed with insane boilerplate, AbstractFactoryFactory Visitor patterns, and caring more about standards than usability? No, never. <code>&lt;cough&gt;</code></p><p>I think this is probably about the same time that many people my age quit using C++, and most of you probably remember an overly wordy complex language with a bunch of syntax but not a lot of gain for all the <code>&lt;&gt;</code> angle-brackets.</p><p>But, C++ kept evolving, and the standards committee seemed to realize that if they don't do something they'll become an obscure language only used by a single 10 trillion dollar industry. How pathetic!</p><p>They did the work, improved the language dramatically, and actually made it fun again all without losing their original goals. Sadly, nobody knows about this <em>huge</em> revolution in C++ so I'm going to update your perception of the language.</p><h2 id="the-amazing-comeback-of-c11">The Amazing Comeback of C++11</h2><p>I want you to go ahead and look at what was <a href="https://en.cppreference.com/w/cpp/11">added to C++ in C++11</a>. Go ahead, click that link and look at that list of insane improvements. Let's highlight a few <em>massive</em> changes:</p><ul><li><code>auto</code> -- Yes, C++ actually added an automatic type inference keyword. I was as shocked as you because I remember C++ being an obnoxious jerk that made me type the same damn word over and over for no reason.</li><li><code>nullptr</code> -- What? Yes, they fixed the bullshit C thing of this weirdly defined <code>NULL</code> that's a zero but not a zero because some jackass on the C standards committee still writes code for a PDP-11 that has 13.5 bit words and no zero address.</li><li><code>range-for</code> -- Are you reading this right? Yes, C++ has similar iterators and <code>for(x in list)</code> that Python has. Best of all, <em>it works with <code>auto</code></em> so you can loop over lists and not care about getting the type right. JavaScript still can't even figure out what a <code>for-loop</code> is but C++ has one.</li><li><code>lambda expressions</code> -- What?! Yes, C++ has lambda, and <em>it's not bullshit like Python's lambda</em>. Lambda's in C++ are so good I think they end up dramatically changing how you can approach design. Checkout how <a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a> uses them to see how much they improve the usability of APIs.</li><li><code>&lt;chrono&gt;</code> -- Do you understand what just happened? In 2011 C++ had a better <em>default</em> time library than almost every language I've ever used. It's so good you can actually write <code>100ms</code> to create a 100 milisecond time point. Yes, and this is valid syntax and is type safe.</li><li><code>&lt;regex&gt;</code> -- What? Yes, C++ has built-in regex now and they're pretty damn good too. They do have one flaw that it's not actually exactly like JavaScript in the "ECMAScript" mode, but it works really well otherwise.</li><li><code>unique_ptr</code> and <code>shared_ptr</code> -- Yes, these implement various kinds of reference counting and enforcing memory ownership. Once these were added people largely stopped doing loads of heap allocation and instead now opt for more on the stack and only these pointers where needed.</li><li><code>&lt;thread&gt;</code> -- Yes! Multi-threading is baked into the language by default. What is this language? The C++ I remember said, "You want threads? Write it yourself dipshit." New C++ is saying, "Yeah! Threads are really nice! Here you go."</li></ul><p>I honestly don't know what happened or why C++11 was such a massive improvement to the language but it reminds me a lot of ES6 in the JavaScript world. Just a complete overhaul of the language's philosophy and style without alienating the previous way of doing things.</p><h2 id="yep-cs-got-thatsort-of">Yep, C++'s Got That...Sort Of</h2><p>More importantly though, C++ is now a more modern language with quite a lot of the things you find in other languages. Here's a list of some common things you may need:</p><ul><li>Need to traverse the filesystem? Check out <a href="https://en.cppreference.com/w/cpp/filesystem">filesystem</a>.</li><li>Need package management? Check out <a href="https://conan.io/">Conan</a>, <a href="https://mesonbuild.com/Wrapdb-projects.html">Meson's WrapDB</a>, and <a href="https://vcpkg.io/en/">vcpkg</a>.</li><li>Need a matrix library? Checkout <a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a>.</li><li>Tensorflow is written in C++, <a href="https://www.tensorflow.org/api_docs/cc">FYI</a>.</li><li>Graphics? I mean do I need to mention that tons of games are written in C++? Well try out <a href="https://www.sfml-dev.org/">SFML</a> for a good start.</li><li>GUI? Ehhhh, yeah you have <a href="https://www.qt.io/">Qt</a> and <a href="https://www.wxwidgets.org/">wxWidgets</a> I guess. There's also <a href="https://github.com/ocornut/imgui">ImGui</a> but my favorite is...</li><li>TUI? Yes, I believe that <a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a> is the best designed GUI library in <em>any</em> langauge. It's that good, but only for Terminal UIs.</li></ul><p>C++ pretty much has everything you might need, but if I'm being honest, it can be hit or miss on quality. I'd say the quality is generally higher than you expect, and I'd say it's higher than what I find in JavaScript and Python. I think "hit or miss quality" is something I could say about every language if we're all being honest here. I mean, do you <em>really</em> think Python's package management is top notch? You do? Why are there like 10 package managers then? Do you <em>really</em> think <em>any</em> GUI API is good? How about filesystem APIs? I mean c'mon, they're all pretty bad, so I'd say C++'s are about the same, and most are slightly better. Things like FTXUI are amazing. The STL is pretty awesome too.</p><h2 id="yeah-yeah-but-you-said-fun">Yeah, Yeah, But You Said "Fun"</h2><p>I can hear you now. "Oh yeah, well Rust has really good web servers...and...and data structures...and..uh uh uh a standard library. Rust is just as fun as C++!" Yes, my point is not that all these new things are what makes C++ fun. The point so far is this:</p><blockquote><p>If you believe that C++ is old and stodgy with tons of angle brackets, pointers, and <code>this-&gt;</code> bullshit you're wrong.</p></blockquote><p>I'm finding that C++ is probably the most capable language in existence right now, by a vast margin. I don't think I've ran into anything I can't do, and not only that but there's multiple options for almost anything I want to do.</p><ul><li>If I want to make a desktop app I can hand code it myself using use something like <a href="https://github.com/zserge/fenster">fenster</a>, or use something like <a href="https://www.sfml-dev.org/">SFML</a>, or use <a href="https://www.qt.io/">QT</a> or directly code it old school style (see fenster for a good guide on doing that).</li><li>If I want to play sounds there's a ton of options from open source to paid to any kind of DIY. I can go grab <a href="">SFML</a> for something quick and dirty, or even pay for <a href="https://www.audiokinetic.com/en/wwise/overview/">wwise</a> to get the best in the industry.</li><li>If I want to do 3D graphics I can use OpenGL, Vulkan, Direct3d, Ogre3d, and so many others. You'll trip over a 3D library in C++ when you walk out your door.</li><li>If I need math there's everything from <a href="https://www.netlib.org/blas/">BLAS</a>, <a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a> to game specific libraries like <a href="https://ggt.sourceforge.net/html/main.html">GMTL</a>.</li><li>Do you need to do AI? Did you know <a href="https://www.tensorflow.org/api_docs/cc">Tensorflow is actually written in C++</a>.</li><li>If there's not a library for it, it's not too difficult to directly hook into almost any OS API and roll my own, and rolling my own gear is <em>fun</em>.</li></ul><p>That's only a few examples, but the most important thing to understand is, C++ doesn't really get in your way. Since you have direct access to almost every library with C or C++ ABI, and also direct access to every OS, you're pretty much able to make anything you need by yourself.</p><h2 id="c-dgaf">C++ DGAF</h2><p>Alright, so you can do anything you want with C++, and the C++ standards committee has corrected course to focus on developer productivity since 2011. How exactly is that fun Mr. Zed A. Shaw?</p><p>C++ is in this weird creative sweet spot where the language and the ecosystem are extremely high quality, but the language isn't popular enough to attract the weirdos who ruin languages.</p><p>You know who I'm talking about. Remember how I said that I left C++ because a bunch of weirdos went insane with design patterns and template metaprogramming? Then I joked that this exact same thing happened to Java with design patterns and insane XML files? Then it happened with Ruby when Ruby on Rails became popular. Then it happened with Python, and JavaScript, and Rust, and pretty much every time a language gets popular there's those insufferable idiots who ruin languages?</p><p>You see, C++ is unfashionable now so those morons don't care about it. C++ is so unfashionable even the <a href="https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/">White House</a> hates it, so all those authoritarian douchebags who run around smashing you over the head with standards documents have fled to languages where they can peddle their bullshit influencer garbage.</p><p>Those idiots are in your mentions, yelling at people, "Why don't you use Rust?!" They're the ones who shame you with, "Why don't you use React?!" They're the ones screaming, "Why are you using so much <code>unsafe</code> in your Rust code?!" They're the ones who scream, "Seriously?! A for-loop in Ruby code! Gah! Amateur!" And thankfully, C++ is not popular enough for those grifters to profit so they mostly ignore it.</p><p>Well, actually the Rust weirdos will bother you but they're usually too busy making the borrow checker happy to actually get anything done so you can ignore them.</p><p>This means that C++ the language--and C++ the community--simply <em>Does Not Give a Fuck</em> what you do. Do you want to write a matrix library? Go for it. Want to make a GUI library? Go for it. Want to write a game engine? <a href="https://www.youtube.com/watch?v=YromjVUQodM">Sit on your couch in the dark and go for it.</a> How about a <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/turings-tarpit">weird game that watches you code and makes fun of you?</a> Seriously, nobody cares and most people think it's hilarious or fun.</p><h2 id="dgaf-is-essential-for-creativity">DGAF is Essential for Creativity</h2><blockquote><p>"But Zed, don't we need a Great Glorious Leader to tell us how best to behave? Won't C++'s lack of an authoritarian Benevolent Dictator for Life leave you without direction? Won't you make...dare I say...<strong>mistakes?!</strong> How can you possibly survive without the BDFL grifters shaming you into working for them for free?"</p></blockquote><p>I mean, I think you are probably not saying this exactly but you're definitely saying it tangentially. This mentality is one of the biggest reasons why other languages are not fun. Other languages are strictly controlled by organizations that actively <a href="https://thephd.dev/i-am-no-longer-speaking-at-rustconf-2023">shit on you if you try to make something cool</a>. If you try to make a competing project to one that a BDFL profits from, then you better be ready for their attack dogs to hound you for years.</p><p>I firmly believe that for creativity to blossom you need to be able to get your idea out without fear of criticism and shame. You have to be able to express yourself and only <em>after</em> you've pulled your idea out of your body kicking and screaming can you step back and look at it critically. However, once you get your idea out there you <em>better</em> be ready to critique it before someone else does. It's this change in modes from "creative freedom from criticism" to "highly focused on quality" that makes for great creative work.</p><p>The best explanation of this concept comes from a painting teacher I used to have. Actually, this was every painting teacher I ever had. They would walk over to student's <em>unfinished</em> work and try to correct it. They'd annoyingly stand in the wrong place--usually their 5' tall eyes vs. my 6'2" tall eyes--and say my drawing is wrong even though their perspective is totally different from mine. Or they'd comment on some aspect of the in-progress work that was difficult to judge because it wasn't shown in the context of the full painting.</p><p>The mistake these teachers made was that they assumed a "mistake" early couldn't be corrected as you go, and would stay a "mistake" in the final work. It's entirely possible that what the student finally creates ends up working just fine when it's finished, but in the middle of the process nothing looks right so trying to "correct" it is pointless.</p><p>This is an important thing about creativity these teachers didn't realize. Everything looks and feels like crap in the "ugly middle" stage. In the beginning things will seem great, but as you work everything gets messy because you're reshaping and moving everything around to reach your final vision. It's more like walking a tightrope than driving a car where you're balancing on a thin line trying to reach the other side, and the only way you learn to walk the tightrope is to fall over and over until you get your balance right.</p><p>A lot of other languages feel like people are constantly trying to push you off the tightrope midway just so they can sell you a car instead.</p><p>C++'s nearly unlimited space to create, combined with the relative lack of shame grifters makes it an incredibly creative experience. If I have an idea I'm only limited by my skills, not by a limitation of the language or some C++ blowhard influencer declaring me <a href="https://www.reddit.com/r/Python/comments/5eljwc/comment/dadkyqf/">unqualified to teach</a> because I don't like his Benevolent Dictator for Life.</p><p>I think <a href="https://cppreference.com/">cppreference.com</a> is the best programming language documentation I've ever used. It has nearly every single thing I believe languages need except for one:</p><ol><li>Every single keyword and library is fully documented with reference material.</li><li>Every one of these also has extensive <em>working</em> examples. I think I've only hit about 5% that didn't actually work as written, and most of those were due to the compiler's implementation not the documentation.</li><li>Every single feature not only indicates <em>the C++ standard version that introduced it</em> but it also links to <em>the exact standard documents and other reference material that standardized it</em>.</li><li>It has a search bar that uses duckduckgo so it actually does find things even if you make spelling mistakes or can't quite remember the exact terminology.</li><li>In addition to fully explained reference material, very good examples, and exact version information, it also has full explanations of important concepts with examples. Take a look at the <a href="https://en.cppreference.com/w/cpp/language/copy_elision">documentation on Copy elision</a>. While still very technical, it is well written and includes many examples to show you what they're talking about.</li></ol><p>The <em>only</em> thing missing from the <a href="https://cppreference.com/">cppreference.com</a> documentation is how to install various compilers on different platforms. I'm kind of mixed on whether they should do this or not. For other languages this kind of documentation is very important, but for C++ I think they most likely would get pushback from various members (<code>*cough*</code> Microsoft) and probably can't. However, given that there's only a few C++ compilers and a few platforms, it's entirely possibly they could add a series of getting started guides.</p><h2 id="its-not-all-puppies-and-butterflies">It's Not All Puppies and Butterflies</h2><p>While I'm having an absolute blast coding C++ I want you to understand that I do <em>not</em> in no way think the language is without flaws. Not even close. My thinking is C++ is now about as good as any other language out there, and that no language is perfect. You'll have annoying things to deal with in C++ just as you have to in any other language, it's just C++'s annoying things are different.</p><p>For example, in C++ it's a real pain in the ass to get a non-microsoft installer working on Windows. <a href="https://learncodethehardway.com/blog/30-just-use-msys2-you-say/">No, MSYS2 does not work. MSYS2 is hot garbage so shut up.</a> I had to create a whole set of <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/lcthw-windows-installers">PowerShell scripts just to make installing compilers and dev tools easier.</a>. If you think that's terrible, then why are you using Python? If you try to install <em>any</em> Python on Windows you have to deal with the installers not adding Python to the PATH...unless it's a blessed installer from Microsoft or ActiveState. <em>Then</em> the installers are allowed to add Python to the PATH on Windows.</p><p>You see, C++ wins here because I don't have to deal with some arbitrary backroom dealing that gave Microsoft and ActiveState a free pass to violate the apparent "law" that no Python installer shall use the PATH. That alone is a massive win for me. It's not fun to have to argue with idiots who think this situation is normal in Python.</p><p>If you think your language is superior, give me about 1 hour and I'll find enough irritating bullshit to make your language look like a pathetic usability nightmare. The <em>all</em> suck, it's just C++'s suckage doesn't seem to ruin its fun.</p><p>Just a few of the pain points I have with C++ currently are:</p><ul><li><em>+95% of the compiler errors are the worst in the entire industry.</em> I'm not even being hyperbolic here. C++ error messages are just the worst. I think if the standards committee wants to make the biggest impact it'd create a standard for error messages, because the current state of error messages is almost malicious.</li><li><em>The build tools are so bad</em>. I have no idea why C++ build tools are just nightmares to use but the people who make them just make the dumbest decisions. The best one I've found so far is <a href="https://mesonbuild.com/">Meson</a> and it's full of idiotic decisions like ignoring installed package directives to use broken system libraries without telling you. I literally ran into this the day I wrote this essay and it was infuriating.</li><li><em>There's no incentive for compiler manufacturers to follow the standard.</em> I mentioned that Clang as a bug in <code>std::source_location</code> and it's a great example of the kinds of crap you run into sometimes. I really think the standards committee needs to start listing compilers that leave bugs like this unfixed. Just a simple page that lists compilers and how compliant they are, with special callouts for compilers that have obvious bugs would do a lot.</li><li><em>The language is insanely complex because of its history.</em> C++ does have a ton of legacy stuff you have to wade through to find the nuggets. My understanding is it's kind of like C++ is three (or more) languages similar to JavaScript. You have the old style where almost everything is heap allocated and raw pointers are everywhere, then you have the Template Metapocalypse style, then you have post-2011 style where almost everything is on the stack with very few pointers, and I'm seeing a newer style where everyone just uses <code>struct</code> instead of <code>class</code> and doesn't use a lot of inheritance. Navigating all of these "eras" of C++ can be daunting, and there's more than a few code review Youtubers who seem to be stuck in one era or another.</li><li><em>I really hate RAII.</em> I'm finding that there's a <em>ton</em> of situations where RAII gets in the way of real world configuration situations, to the point that this one "feature" of C++ seems more like a glitch than an actually useful thing. In my opinion--given how so many other languages don't have this at all and are just fine--C++ could do well to devise a middle ground between the current RAII and the initialization constructors other languages have.</li></ul><p>But, that's for another essay. For now, I just wanted to express how much fun I'm having doing dumb stuff in C++ and hopefully educate people that C++ isn't the language you think it is. If you ever see a course that tries to shame C++ with a billion angle brackets, just know that the author of that course is a clueless moron who has no idea what they're talking about. I mean, check out this GUI layout code from <a href="">FXTUI</a>:</p><pre><code>  document_ <span>=</span> <span>Renderer</span><span>(</span><span>[</span><span>&amp;</span><span>]</span><span>{</span>
    <span>return</span> <span>hbox</span><span>(</span><span>{</span>
        <span>hflow</span><span>(</span>
          <span>vbox</span><span>(</span>
              <span>text</span><span>(</span><span>format</span><span>(</span><span>"HP: {}"</span><span>,</span> player_<span>.</span>hp<span>)</span><span>)</span> <span>|</span> border<span>,</span>
              <span>text</span><span>(</span>status_text_<span>)</span> <span>|</span> border
              <span>)</span>  <span>|</span> xflex_grow
        <span>)</span><span>,</span>
        <span>separator</span><span>(</span><span>)</span><span>,</span>
        <span>hbox</span><span>(</span>map_view_<span>-&gt;</span><span>Render</span><span>(</span><span>)</span><span>)</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
</code></pre><p>Be honest, if you didn't know this was C++ could you guess what language it was? I rest my case.</p><!-- HTML_TAG_END --><hr><h6>More from Learn Code the Hard Way</h6></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fogus: Things and Stuff of 2024 (216 pts)]]></title>
            <link>https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/</link>
            <guid>42495077</guid>
            <pubDate>Mon, 23 Dec 2024 15:30:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/">https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=42495077">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
                 <h3><a href="https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/" title="The best things and stuff of 2024">The best things and stuff of 2024</a></h3>
                 <p><span>Dec 23, 2024 </span></p><p>Great things and people that I discovered, learned, read, met, etc. in 2024.  No particular ordering is implied.  Not everything is new.</p>

<p><em>also: see the lists from <a href="https://blog.fogus.me/2023/12/18/the-best-things-and-stuff-of-2023/">2023</a>, <a href="http://blog.fogus.me/2022/12/13/the-best-things-and-stuff-of-2022/">2022</a>, <a href="https://blog.fogus.me/2021/12/27/the-best-things-and-stuff-of-2021/">2021</a>, <a href="http://blog.fogus.me/2020/12/31/the-best-things-and-stuff-of-2020/">2020</a>, <a href="http://blog.fogus.me/2019/12/30/the-best-things-and-stuff-of-2019/">2019</a>, <a href="http://blog.fogus.me/2019/01/02/the-best-things-and-stuff-of-2018/">2018</a>, <a href="http://blog.fogus.me/2018/01/02/the-best-things-and-stuff-of-2017/">2017</a>, <a href="http://blog.fogus.me/2016/12/29/the-best-things-and-stuff-of-2016/">2016</a>, <a href="http://blog.fogus.me/2015/12/29/the-best-things-and-stuff-of-2015/">2015</a>, <a href="http://blog.fogus.me/2014/12/29/the-best-things-and-stuff-of-2014/">2014</a>, <a href="http://blog.fogus.me/2013/12/27/the-best-things-and-stuff-of-2013/">2013</a>, <a href="http://blog.fogus.me/2012/12/26/the-best-things-and-stuff-of-2012/">2012</a>, <a href="http://blog.fogus.me/2011/12/31/the-best-things-and-stuff-of-2011/">2011</a> and <a href="http://blog.fogus.me/2010/12/30/the-best-things-in-2010/">2010</a></em></p>

<h2>Great posts | articles | talks read/watched</h2>

<ul>
<li><em><a href="https://www.youtube.com/watch?v=lC4YLMLar5I">ELITE: The game that couldn’t be written</a></em> from Alexander the ok – <em>Elite was one of my favorite games on my Commodore 64 1,000,000 years ago and so I’m a sucker for articles on this gem. If you’re interested, also check out <a href="https://elite.bbcelite.com/c64/">the annotated C64 source code</a>.</em> <sup id="fnref:elite"><a href="#fn:elite" rel="footnote">1</a></sup></li>
<li><em><a href="https://thereader.mitpress.mit.edu/the-rich-history-of-ham-radio-culture/">The Rich History of Ham Radio Culture</a></em> by Kristen Haring – <em>I missed out on the Ham radio craze and only recently learned about its rich history. This article is a good overview and starting point if you’re interested in learning too.</em></li>
<li><em><a href="https://www.atlasobscura.com/articles/japans-bathroom-ghosts">Get to Know Your Japanese Bathroom Ghosts</a></em> by Eric Grundhauser – <em>Describes the interesting Japanese cultural folklore around bathroom ghosts.</em></li>
<li><em><a href="https://www.abortretry.fail/p/arrogant-difficult-powerful">The History of WordStar</a></em> by Abort Retry Fail LLC – <em>A great historical article about one of the most influential software suites ever created. Additionally, the comments are a goldmine of additional information and corrections and should not be skipped.</em></li>
<li><em><a href="https://blog.zdsmith.com/series/combinatory-programming.html">Combinatory Programming</a></em> by zdsmith – <em>Describes combinatorial programming using motivated examples — a technique that’s surprisingly scarce in articles about the topic.</em></li>
<li><em><a href="https://www.openculture.com/2014/05/philip-k-dicks-favorite-classical-music.html">Philip K. Dick’s Favorite Classical Music</a></em> by Open Culture – <em>Discusses PKD’s love for classical music and the references to composers and their works in his fiction. The post also, includes an <a href="https://open.spotify.com/playlist/1RsnkX0bQWd2CVWW8jcxBR">11-hour classical music playlist</a> for your listening pleasure.</em></li>
<li><em><a href="https://new.wunderland.com/2024/11/20/goodbye-kory/">Goodbye, Kory</a></em> by Andy Looney – <em>The world lost Kory Heath, a game designer whom I admire immensely. I’ve talked about his magnum opus <a href="https://blog.fogus.me/2014/10/23/games-of-interest-zendo/">Zendo</a> on this blog before and have run numerous play sessions over the years. He was single-handedly responsible for hundreds of hours of enjoyment around my home and within my group of friends. The world is much the poorer without him in it. RIP.</em> <sup id="fnref:chalker"><a href="#fn:chalker" rel="footnote">2</a></sup></li>
</ul>

<h2>Most viewed blog posts by me</h2>

<ul>
<li><em><a href="https://blog.fogus.me/2024/08/19/on-method-values-part-1/">On method values, part 1</a></em> – <em>We released Clojure 1.12.0 this year and so I wanted to write about one of the features that I worked on. Method values are symbolic references to Java methods that can be used in value contexts and the design and implementation of this feature was interesting enough to talk about. The feature has been generally well received by the Clojure community.</em></li>
</ul>

<h2>Favorite technical (and technical-adjacent) books discovered (and read)</h2>

<ul>
<li><em><a href="https://books.google.com/books/about/And_So_FORTH.html?id=iqUZAQAAIAAJ">And so FORTH</a></em> by Timothy Huang – <em>I found this long out of print Forth tome via inter library loan and enjoyed it immensely. It’s a nice blend of the ideas in Brodie’s <a href="https://thinking-forth.sourceforge.net/">Thinking Forth</a> and something like Geere’s <a href="https://archive.org/details/forth-the-next-step-ron-geere">Forth: The Next Step</a>. It was a sad day when I had to return this beauty back to the library because I could have used another read or two at least.</em></li>
<li><em><a href="https://www.amazon.com/BASIC-FORTH-Parallel-S-J-Wainwright/dp/0859341135?tag=fogus-20">BASIC and FORTH in Parallel</a></em> by S.J. Wainwright – <em>This style of book is exactly the kind of book that I would one day like to write. While the specifics of any such book would be different, the central conceit is perfect. That is, this book uses BASIC to create a simple stack machine and Forth interpreter and then presents simple Forth programs exercising them.</em></li>
</ul>

<h2>Favorite non-technical books read</h2>

<ul>
<li><em><a href="https://www.amazon.com/Butchers-Crossing-Review-Books-Classics/dp/1590171985/?tag=fogus-20">Butcher’s Crossing</a></em> by John Williams – <em>Follows Harvard drop-out Will Andrews as he escapes to the American frontier with a wad of cash to find adventure and “an original relation to nature”. Andrews eventually finds Miller who is more than happy to help the young man part with his money in an attempt to find a hidden Colorado valley filled with buffalo that may or may not still (if it ever did) exist. The book follows Miller and Andrews’ (plus a skinner Schneider and driver Hoge) trek throw the frontier and describes in harrowing detail their tribulations. I could not stop reading and finished the book in a weekend. This one demands multiple reads to really absorb the nuance.</em></li>
<li><em><a href="https://www.amazon.com/Spectral-Link-Thomas-Ligotti-ebook/dp/B00LE52256/?tag=fogus-20">The Spectral Link</a></em> by Thomas Ligotti – <em>Contains two stories by Ligotti: “Metaphysica Morum” and “The Small People”. The first is quite different than most of Ligotti’s work that I’ve read so far. It follows a self-described “metaphysical mutant” and blends overtly dark humor with an underlying pessimistic philosophy centered on a theme of euthanasia. “The Small People” is a dream-like exploration of paranoia and isolation. Both stories are a good introduction to the range in Ligotti’s work if you’re interested in checking him out.</em></li>
<li><em><a href="https://www.amazon.com/Corvo-Cult-History-Obsession-2014-10-09/dp/B01FIY47AQ/?tag=fogus-20">The Corvo Cult</a></em> by Robert Scoble – <em>Frederick Rolfe (aka Baron Corvo) was an little-known Edwardian author who is often remembered more for his bombastic personality than his fictional works. This book talks about the rise and growth of the still active “Corvo Cult” — an obscure literary fandom. In many cases, Rolfe’s fervid devotees matched the controversial author in eccentricity, but the true fascination lies in the broad range of people drawn to his eclectic works.</em></li>
</ul>

<h2>Number of books written or published</h2>

<p>0</p>

<h2>Number of programming languages designed</h2>

<p>0.5</p>

<h2>Favorite music discovered</h2>

<ul>
<li><em><a href="https://www.youtube.com/watch?v=o6TI2FfqGJ8&amp;pp=ygUOInRoZSBwYXJhZ29ucyI%3D">The Paragons</a></em> – <em>At some point I became interested in the roots of ska and The Paragons were the best group that I discovered during my explorations.</em></li>
<li><em><a href="https://en.wikipedia.org/wiki/That%27s_All!">That’s All!</a> by Sammy Davis Jr. – *A fantastic performance from a master of the vocal form. The songs are brilliant but the banter between songs will keep me listening into the distant future.</em></li>
</ul>

<h2>Favorite films discovered</h2>

<ul>
<li><em><a href="https://en.wikipedia.org/wiki/Withnail_and_I">Withnail &amp; I</a></em> – <em><a href="http://sam.aaron.name/">Sam Aaron</a> recommended this film to me years ago but I only managed to watch it in 2024. It’s a great example of a dry comedy following a couple of screw-ups and their misadventures.</em></li>
<li><em><a href="https://en.wikipedia.org/wiki/Jodorowsky%27s_Dune">Jodorowsky’s Dune</a></em> – <em>A documentary about the most influential film that never was.</em></li>
<li><em><a href="https://en.wikipedia.org/wiki/Requiem_for_a_Dream">Requiem for a Dream</a></em> – <em>I’m probably the last person in the world to watch this relentless survey of despair. Not for the faint of heart.</em></li>
</ul>

<h2>Favorite podcasts</h2>

<ul>
<li><em><a href="https://www.youtube.com/@WilliamEByrd">Will Radio</a></em> – <em>Will Byrd started the year promising a KiloTube of videos (i.e. 1024 videos) in 2024 and it’s been a blast following along! There’s no one quite like Will and so any chance that I can get to experience more of him I will jump on.</em></li>
<li><em><a href="https://cinepunx.com/podcast-episodes/eros-massacre/">Eros + Massacre</a></em> – <em>Another podcast triumph by Samm Deighan surveying the weird world of psychotronic cinema.</em></li>
</ul>

<h2>Favorite programming languages (or related) I hacked on/with on my own time</h2>

<ul>
<li><em><a href="https://hypercubed.github.io/joy/joy.html">Joy</a></em> – <em>Joy is a mindfrak of a programming language in the concatenative functional language family. The core of Joy is beautiful and among the foundational programming languages in my opinion.</em></li>
<li><em><a href="https://www.forth.com/forth/">Forth</a></em> – <em>Sticking with the concatenative family in 2024, I continued to explore Forth. Interestingly the language is incredibly rich in history and conducive to a wide range of techniques and paradigms. I’m unsure if I’ll ever find the opportunity to use Forth in anger, but I will say that I should come out of my explorations a stronger programmer and program designer.</em></li>
</ul>

<h2>Programming languages used for work-related projects</h2>

<ul>
<li><a href="https://mail.openjdk.org/pipermail/amber-spec-experts/2023-December/003959.html">Java</a> – <em>Working deep in the Clojure compiler means that much of my work in 2024 was in Java.</em></li>
<li><a href="http://www.clojure.org/">Clojure</a> – <em>2024 marks the 15th year<sup id="fnref:15th"><a href="#fn:15th" rel="footnote">3</a></sup> as a full-time Clojure programmer and the 1st year as a full-time Clojure core developer.</em></li>
<li><a href="http://www.clojurescript.org/">ClojureScript</a> – <em>Less-so now than when I was consulting full-time but I occasionally dig into explore the implications of changes to Clojure on CLJS.</em></li>
<li><a href="http://www.datomic.com/">Datalog</a> – <em>The <a href="https://www.datomic.com/">Datomic</a> flavor of Datalog is the flavor of choice for database access, be it in-process or in the cloud. Again, my day-to-day usage is limited, but I have my share of personal databases hosted on Datomic.</em></li>
</ul>

<h2>Programming languages (and related) that I hope to explore more deeply</h2>

<ul>
<li><em><a href="https://hypercubed.github.io/joy/joy.html">Joy</a></em> – <em>There’s a mountain of deep information on Joy that I would like to devour in 2025.<sup id="fnref:joy"><a href="#fn:joy" rel="footnote">4</a></sup></em></li>
<li><em><a href="https://en.wikipedia.org/wiki/Mouse_(programming_language)">Mouse</a></em> – <em>Yet another concatenative language to explore that’s long-dead but still has some lessons to teach one such as myself.</em></li>
<li><em><a href="https://poplogarchive.getpoplog.org/poplog.info.html">POP-11</a></em> – <em>Another dead language that was designed to support AI applications in the 70s and 80s. I love the idea of exploring the language and the suite of applications that built up around it.</em></li>
</ul>

<h2>Favorite papers discovered (and read)</h2>

<ul>
<li><em><a href="https://hypercubed.github.io/joy/html/j05cmp.html">Recursion Theory and Joy</a></em> by Manfred von Thun – <em>Joy’s underlying reliance on combanatory programming manifests deep in the language even to the degree that recursion in the language is implemented in userspace via recursive combinators. This paper describes the “Joy Way” and its relationship to recursion.</em></li>
<li><em><a href="https://www.cs.tufts.edu/~nr/cs257/archive/dominique-clement/applicative.pdf">A Simple Applicative Language: Mini-ML</a> (PDF) by D. Clement and J. Despeyroux and T. Despeyroux and G. Kahn</em> – <em>Presents a beautiful definition of ML language and its compilation to an abstract machine.</em></li>
</ul>

<h2>Still haven’t read…</h2>

<p>I Ching, A Fire upon the Deep, Don Quixote, and <strong><a href="http://blog.fogus.me/2012/09/21/the-amazing-colossal-science-fiction-ketchup/">a boat-load of sci-fi</a></strong></p>

<h2>Favorite technical conference attended</h2>

<ul>
<li><em><a href="https://2024.clojure-conj.org/">Clojure/conj 2024</a></em> – <em>This was the first Clojure conference that I played a somewhat active part in organizing. Let me be clear, my part in the matter was minimal at best, but it did provide me a window into the complexities of organizing a conference. The conference itself was a blast and it was great to meet old and new Clojure friends as well as <a href="https://www.nubank.com/">colleagues</a>!</em></li>
</ul>

<h2>Favorite code read</h2>

<ul>
<li><em><a href="https://buttondown.com/tensegritics-curiosities/archive/restrained-datalog-in-39loc/">Restrained Datalog in 39loc</a></em> by Christophe Grande – <em>I’ve learned over the years that if Christophe writes a technical article then it behooves me to study it deeply. The highlight of the year from Christophe was his simple, yet rich, Datalog implementation in 39 lines of Clojure code. It’s clear that 39 lines of Clojure goes a long way and especially so when a master of the language plays in it.</em></li>
<li><em><a href="https://zserge.com/posts/post-apocalyptic-programming/">Post-Apocalyptic Programming</a></em> by Serge Zaitsev – <em>I love the central conceit of the post, summarized as “what technology could/should we create in the absence of modern computing niceties?” The post starts with a CPU emulator, builds a language for it, and motives its decisions along the way. There’s a brilliant hard science fiction story in here somewhere, I can feel it.</em></li>
<li><em><a href="https://github.com/monsonite/MINT">MINT</a></em> – <em>MINT is highly inspirational to me as a lesson in minimal programming language design. Based on Forth, MINT makes various design decisions and trade-offs to remain small and fast.</em></li>
</ul>

<h2>Life-changing technology “discovered”</h2>

<p>Nothing this year.</p>

<h2>State of plans from 2023</h2>

<ul>
<li><em>Clojure 1.12</em> – Released in <a href="https://clojure.org/news/2024/09/05/clojure-1-12-0">early September</a> and one of the biggest releases in years as far as feature additions go.</li>
<li><em>Go much deeper down the concatenative rabbit-hole</em> – An unmitigated success!</li>
<li><em>Publish even more non-technical writing</em> – My research into the Corvo-related archives stored at Georgetown University was a success. However, my efforts in writing up my findings has stalled.</li>
</ul>

<h2>Plans for 2025</h2>

<ul>
<li><em><a href="https://www.clojure.org/">Clojure 1.13</a></em> – <em>Thinking around the 1.13 release is ongoing and we’d like to get it out sooner rather than later. Stay tuned.</em></li>
<li><em><a href="https://github.com/clojure/core.async">clojure.core.async next</a></em> – <em>We’ve laid the groundwork for a new version of core.async and released it as version 1.7.701. We’d love to leverage JDK 21+ virtual threads to vastly simplify core.async’s implementation and have started along this path in earnest.</em></li>
<li><em><a href="">Simplify my blog</a></em> – <em>I’d love to move away from WordPress in 2025.</em></li>
<li><em><a href="https://gist.github.com/fogus/6d716276678b0698c96dd13e040c71eb">Juxt</a></em> – <em>Juxt is my exploration in functional concatenative language design built on the JVM. It’s not yet clear to me if or when I would ever release this into the wild, but the explorations have been great fun and I’ve used Juxt as a vehicle for finding relevant books and papers.<sup id="fnref:juxtbib"><a href="#fn:juxtbib" rel="footnote">5</a></sup> That said, most of my programming time is spent maintaining and evolving Clojure, but there are rare moments of time that I can spend on Juxt, and I plan to continue to do so in 2025.</em></li>
</ul>

<center><a href="https://blog.fogus.me/wp-content/uploads/2024/12/juxt.jpg"><img decoding="async" src="https://blog.fogus.me/wp-content/uploads/2024/12/juxt-274x300.jpg" alt="" width="274" height="300" srcset="https://blog.fogus.me/wp-content/uploads/2024/12/juxt-274x300.jpg 274w, https://blog.fogus.me/wp-content/uploads/2024/12/juxt-768x840.jpg 768w, https://blog.fogus.me/wp-content/uploads/2024/12/juxt.jpg 816w" sizes="(max-width: 274px) 100vw, 274px"></a></center>

<h2>2024 Tech Radar</h2>

<ul>
<li>try: <a href="https://www.amazon.com/BOOX-Tablet-Go-10-3-ePaper/dp/B0D4DFT3W3/?tag=fogus-20">Boox Go 10.3 tablet</a> – recommended by many colleagues</li>
<li>adopt: <a href="https://apps.apple.com/us/app/blank-spaces-launcher/id1570856853">Blank Spaces app</a> – helps to avoid phone brain-drain </li>
<li>assess: <a href="https://www.typescriptlang.org/">TypeScript</a> – What does it buy <em>me</em> over JS?</li>
<li>hold: <a href="https://ziglang.org/">Zig</a> – This looks like a dead-end for me</li>
<li>stop: <a href="https://www.amazon.com/Joy-Clojure-Michael-Fogus/dp/1617291412/?tag=fogus-20">Joy of Clojure</a> 3rd edition – Another edition is unlikely but hopefully something else may come of this work… this is an evolving situation.</li>
</ul>

<h2>People who inspired me in 2024 (in no particular order)</h2>

<p>Yuki, Keita, Shota, Craig Andera, Carin Meier, Justin Gehtland, Rich Hickey, Nick Bentley, Paula Gearon, Zeeshan Lakhani, Brian Goetz, David Nolen, Jeb Beich, Paul Greenhill, Kristin Looney, Andy Looney, Kurt Christensen, Samm Deighan, David Chelimsky, Chas Emerick, Stacey Abrams, Paul deGrandis, Nada Amin, Michiel Borkent, Alvaro Videla, Slava Pestov, Yoko Harada, Mike Fikes, Dan De Aguiar, Christian Romney, Russ Olsen, Alex Miller, Adam Friedman, Tracie Harris, Alan Kay, Janet A. Carr, Wayne Applewhite, Naoko Higashide, Zach Tellman, Nate Prawdzik, Bobbi Towers, JF Martel, Phil Ford, Nate Hayden, Sean Ross, Tim Good, Chris Redinger, Steve Jensen, Jordan Miller, Tim Ewald, Stu Halloway, Jack Rusher, Michael Berstein, Benoît Fleury, Rafael Ferreira, Robert Randolph, Joe Lane, Renee Lee, Pedro Matiello, Jarrod Taylor, Jaret Binford, Ailan Batista, Matheus Machado, Quentin S. Crisp, John Cooper, Conrad Barski, Amabel Holland, Ben Kamphaus, Barry Malzberg (RIP), Kory Heath (RIP).</p>

<p>Onward to 2025!</p>

<p>:F</p>



            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Keypub.sh – OAuth for the terminal using SSH keys (148 pts)]]></title>
            <link>https://keypub.sh/</link>
            <guid>42494997</guid>
            <pubDate>Mon, 23 Dec 2024 15:19:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://keypub.sh/">https://keypub.sh/</a>, See on <a href="https://news.ycombinator.com/item?id=42494997">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <pre>██   ██ ███████ ██    ██ ██████  ██    ██ ██████
██  ██  ██       ██  ██  ██   ██ ██    ██ ██   ██
█████   █████     ████   ██████  ██    ██ ██████
██  ██  ██         ██    ██      ██    ██ ██   ██
██   ██ ███████    ██    ██       ██████  ██████</pre>
            
            
            
            <p><span>$</span>
                <span>ssh keypub.sh about</span>
            </p>
            
            <ul>
                <li>Verified registry linking SSH public keys to email addresses</li>
                <li>No installation or configuration needed - works with your existing SSH setup</li>
                <li>Privacy-focused: you control what information is public or private</li>
                <li>Simple email verification process</li>
                <li>Free public service</li>
            </ul>
            
            <p><span>$</span>
                <span>ssh keypub.sh register alice@example.com</span>
            </p>
            
            <p>[info] Verification email sent to alice@example.com</p>
            <p>[info] Please check your inbox and run: ssh keypub.sh confirm VERIFICATION-CODE</p>

            <p><span>$</span>
                <span>ssh keypub.sh confirm 346758</span>
            </p>

            <p>[success] Key registered successfully</p>
            <p>[info] Fingerprint: SHA256:llcK7K7Zc6JGHMnrekqr2X/lVkJEoaam4S5eeCPOg0w</p>
            <p>[info] Email: alice@example.com verified</p>
            
            <p><span>$</span>
                <span>ssh keypub.sh help</span>
            </p>
            
            <p>KeyPub.sh uses your SSH public key as your identity. Access the service via SSH commands. Reference other users by email or key fingerprint. For json output append `--json` or `-j`</p>
            
            <div>
                <table>
                    <thead>
                        <tr>
                            <th>Command</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>register &lt;email&gt;</td>
                            <td>Register your SSH key with an email address</td>
                        </tr>
                        <tr>
                            <td>confirm &lt;code&gt;</td>
                            <td>Verify email with code from confirmation mail</td>
                        </tr>
                        <tr>
                            <td>whoami</td>
                            <td>Show your registration details</td>
                        </tr>
                        <tr>
                            <td>allow &lt;email&gt;</td>
                            <td>Grant email visibility to another user</td>
                        </tr>
                        <tr>
                            <td>deny &lt;email&gt;</td>
                            <td>Revoke email visibility from user</td>
                        </tr>
                        <tr>
                            <td>get email &lt;fingerprint&gt;</td>
                            <td>Get email for key (if authorized)</td>
                        </tr>
                        <tr>
                            <td>unregister</td>
                            <td>Remove your key from registry</td>
                        </tr>
                        <tr>
                            <td>help</td>
                            <td>Show this help message</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            
            <p><span>$</span>
                <span>alias kp='ssh keypub.sh'</span>
            </p>
            
            <p><span>$</span>
                <span>kp why</span>
            </p>

            <ul>
                <li>Single verified identity for all SSH-based applications - register once, use everywhere</li>
                <li>Perfect for SSH application developers - no need to build and maintain user verification systems</li>
                <li>Users control their privacy - they decide which applications can access their email</li>
                <li>Lightweight alternative to OAuth for CLI applications - just use SSH keys that users already have</li>
                <li>Central identity system that respects privacy and puts users in control</li>
            </ul>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Commercial tea bags release microplastics, entering human cells (368 pts)]]></title>
            <link>https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html</link>
            <guid>42494746</guid>
            <pubDate>Mon, 23 Dec 2024 14:47:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html">https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html</a>, See on <a href="https://news.ycombinator.com/item?id=42494746">Hacker News</a></p>
Couldn't get https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[The intricacies of implementing memoization in Ruby (111 pts)]]></title>
            <link>https://denisdefreyne.com/articles/2024-memoization/</link>
            <guid>42494291</guid>
            <pubDate>Mon, 23 Dec 2024 13:37:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://denisdefreyne.com/articles/2024-memoization/">https://denisdefreyne.com/articles/2024-memoization/</a>, See on <a href="https://news.ycombinator.com/item?id=42494291">Hacker News</a></p>
Couldn't get https://denisdefreyne.com/articles/2024-memoization/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[My Colleague Julius (232 pts)]]></title>
            <link>https://ploum.net/2024-12-23-julius-en.html</link>
            <guid>42494090</guid>
            <pubDate>Mon, 23 Dec 2024 13:03:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ploum.net/2024-12-23-julius-en.html">https://ploum.net/2024-12-23-julius-en.html</a>, See on <a href="https://news.ycombinator.com/item?id=42494090">Hacker News</a></p>
Couldn't get https://ploum.net/2024-12-23-julius-en.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Xerox to acquire Lexmark (204 pts)]]></title>
            <link>https://newsroom.lexmark.com/2024-12-23-Xerox-to-Acquire-Lexmark</link>
            <guid>42494067</guid>
            <pubDate>Mon, 23 Dec 2024 12:57:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsroom.lexmark.com/2024-12-23-Xerox-to-Acquire-Lexmark">https://newsroom.lexmark.com/2024-12-23-Xerox-to-Acquire-Lexmark</a>, See on <a href="https://news.ycombinator.com/item?id=42494067">Hacker News</a></p>
Couldn't get https://newsroom.lexmark.com/2024-12-23-Xerox-to-Acquire-Lexmark: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Can AI do maths yet? Thoughts from a mathematician (286 pts)]]></title>
            <link>https://xenaproject.wordpress.com/2024/12/22/can-ai-do-maths-yet-thoughts-from-a-mathematician/</link>
            <guid>42493464</guid>
            <pubDate>Mon, 23 Dec 2024 10:50:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xenaproject.wordpress.com/2024/12/22/can-ai-do-maths-yet-thoughts-from-a-mathematician/">https://xenaproject.wordpress.com/2024/12/22/can-ai-do-maths-yet-thoughts-from-a-mathematician/</a>, See on <a href="https://news.ycombinator.com/item?id=42493464">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p>So the big news this week is that o3, OpenAI’s new language model, got 25% on FrontierMath. Let’s start by explaining what this means.</p>



<h2>What is o3? What is FrontierMath?</h2>



<p>A language model, as probably most people know, is one of these things like ChatGPT where you can ask it a question and it will write some sentences which are an attempt to give you an answer. There were language models before ChatGPT, and on the whole they couldn’t even write coherent sentences and paragraphs. ChatGPT was really the first public model which was coherent. There have been many other models since. Right now they’re still getting better really fast. How much longer this will go on for nobody knows, but there are lots of people pouring lots of money into this game so it would be a fool who bets on progress slowing down any time soon. o3 is a new language model. </p>



<p>FrontierMath is a secret dataset of “hundreds” of hard maths questions, curated by Epoch AI, and announced last month. “Hundreds” is a quote from <a href="https://arxiv.org/abs/2411.04872" target="_blank" rel="noreferrer noopener">the paper</a> (first line of the abstract), but I’ve heard a rumour that when the paper came out there were under 200 questions, although I’ve heard another rumour that apparently more are have been added since. As an academic mathematician who spent their entire life collaborating openly on research problems and sharing my ideas with other people, it frustrates me a little that already in this paragraph we’ve seen more questions than answers — I am not even to give you a coherent description of some basic facts about this dataset, for example, its size. However there is a good reason for the secrecy. Language models train on large databases of knowledge, so you moment you make a database of maths questions public, the language models will train on it. And then if you ask such a model a question from the database they’ll probably just rattle off the answer which they already saw.</p>



<h2>How hard is the FrontierMath dataset?</h2>



<p>So what are the questions in the FrontierMath dataset like? Here’s what we know. They’re not “prove this theorem!” questions, they’re “find this number!” questions. More precisely, the paper says “Problems had to possess definitive, computable answers that could be automatically verified”, and in the five sample problems which were made public from the dataset (Appendix A of the paper, pages 14 to 23) the solutions are all positive whole numbers (one answer is 9811, another is 367707, and the final three solutions are even larger — clearly these questions are designed in such a way that random guesswork is extremely unlikely to succeed). The sample questions are nontrivial, even to a research mathematician. I understood the statements of all five questions. I could do the third one relatively quickly (I had seen the trick before that the function mapping a natural n to alpha^n was p-adically continuous in n iff the p-adic valuation of alpha-1 was positive) and I knew exactly how to do the 5th one (it’s a standard trick involving the Weil conjectures for curves) but I didn’t bother doing the algebra to work out the exact 13-digit answer. The first and second question I knew I couldn’t do, and I figured I might be able to make progress on the 4th one if I put some real effort in, but ultimately I didn’t attempt it, I just read the solution. I suspect that a typical smart mathematics undergraduate would struggle to do even one of these questions. To do the first one you would, I imagine, have to be at least a PhD student in analytic number theory. The FrontierMath paper contains some quotes from mathematicians about the difficulty level of the problems. Tao (Fields Medal) says “These are extremely challenging” and suggests that they can only be tackled by a domain expert (and indeed the two sample questions which I could solve are in arithmetic, my area of expertise; I failed to do all of the ones outside my area). Borcherds (also Fields Medal) however is quoted in the paper as saying that machines producing numerical answers “aren’t quite the same as coming up with original proofs”.</p>



<p>So why make such a dataset? The problem is that grading solutions to “hundreds” of answers to “prove this theorem!” questions is expensive (one would not trust a machine to do grading at this level, at least in 2024, so one would have to pay human experts), whereas checking whether hundreds of numbers in one list correspond to hundreds of numbers in another list can be done in a fraction of a second by a computer. As Borcherds pointed out, mathematics researchers spend most of the time trying to come up with proofs or ideas, rather than numbers, however the FrontierMath dataset is still extremely valuable because the area of AI for mathematics is desperately short of hard datasets, and creating a dataset such as this is very hard work (or equivalently very expensive). </p>



<p>So there was an article about the dataset in <a href="https://www.science.org/content/article/brutal-math-test-stumps-ai-not-human-experts" target="_blank" rel="noreferrer noopener">Science</a> and I was quoted in it as saying “If you have a system that can ace that database, then it’s game over for mathematicians.” Just to be clear: I had nothing to do with the dataset, I’ve only seen the five public questions, and was basing my comments on those. I also said “In my opinion, currently, AI is a long way away from being able to do those questions … but I’ve been wrong before”. And then this week there’s an announcement that the language model o3 got a score of 25 percent on the dataset. I was shocked.</p>



<h2>What exactly has happened here?</h2>



<p>Why was I shocked? Because my mental model on where “AI” is currently, when it comes to doing mathematics, is “undergrad or pre-undergrad”. It’s getting very good at “Olympiad-style” problems of the sort given to bright high-schoolers. Within a year it’s absolutely clear that AI systems will be passing undergraduate mathematics exams (not least because when you’re setting an undergraduate mathematics exam you ideally need to make sure that you don’t fail 50 percent of the class, so you throw in a couple of standard questions which are very similar to questions that the students have seen already, to ensure that those with a basic understanding of the course will pass the exam. Machines will easily be able to ace such questions). But the jump from that to having innovative ideas at advanced undergrad/early PhD level beyond recycling standard ideas seems <em>to me</em> to be quite a big one. For example I was very unimpressed by the ChatGPT answers to the recent Putnam exam posted <a href="https://x.com/danhendrycks/status/1866191952531845547?s=46">here</a> — as far as I can see only question B4 was answered adequately by the machine, most other answers are worth one or two out of 10 at most. So I was expecting this dataset to remain pretty unattackable for a couple of years. </p>



<p>My initial excitement was tempered however by a post from Elliot Glazer from Epoch AI on <a href="https://www.reddit.com/r/OpenAI/comments/1hiq4yv/comment/m30yfqp/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button" target="_blank" rel="noreferrer noopener">Reddit</a> where he claimed that in fact 25 percent of the problems in the dataset were “IMO/undergrad style problems”. This claim is a little confusing because I would be hard pressed to apply such adjectives to any of the five publically-released problems in the dataset; even the simplest one used the Weil conjectures for curves (or a brute force argument which is probably just about possible but would be extremely painful, as it involves factoring 10^12 degree 3 polynomials over a finite field, although this could certainly be parallelised). This of course raises questions in my mind about what the actual level of the problems in this secret dataset is (or equivalently whether the five public questions are actually a representative sample), but this is not knowledge which we’re likely to have access to. Given this new piece of information that 25 percent of the problems are undergraduate level, perhaps I will revert to being unsurprised again, but will look forward to being surprised when AI is getting nearer 50 percent on the dataset, because performance at “qual level” (as Elliot describes it — the next 50 percent of the questions) is exactly what I’m waiting to see from these systems — for me this would represent a big breakthrough.</p>



<h2>Prove this theorem!</h2>



<p>However, as Borcherds points out, even if we ended up with a machine which was super-human at “find this number!” questions, it would still have limited applicability in many areas of research mathematics, where the key question of interest is usually how to “prove this theorem!”.  In my mind, the biggest success story in 2024 is DeepMind’s <a href="https://deepmind.google/discover/blog/ai-solves-imo-problems-at-silver-medal-level/" target="_blank" rel="noreferrer noopener">AlphaProof</a>, which solved four out of the six 2024 IMO (International Mathematics Olympiad) problems. These were either “prove this theorem!” or “find a number and furthermore prove that it’s the right number” questions and for three of them, the output of the machine was a fully formalized Lean proof. <a href="https://lean-lang.org/" target="_blank" rel="noreferrer noopener">Lean</a> is an interactive theorem prover with a solid mathematics library <a href="https://github.com/leanprover-community/mathlib4" target="_blank" rel="noreferrer noopener">mathlib</a> containing many of the techniques needed to solve IMO problems and a lot more besides; DeepMind’s system’s solutions were human-checked and verified to be “full marks” solutions. However, we are back at high school level again; whilst the questions are extremely hard, the solutions use only school-level techniques. In 2025 I’m sure we’ll see machines performing at gold level standard in the IMO. However this now forces us to open up the “grading” can of worms which I’ve already mentioned once, and I’ll finish this post by talking a little more about it.</p>



<h2>Who is marking the machines?</h2>



<p>July 2025. I can envisage the following situation. As well as hundreds of the world’s smartest schoolchildren entering the IMO, there will be machines entering. Hopefully not too many though. Because the systems will be of two types. There will be systems submitting answers in the language of a computer proof checker like Lean (or Rocq, Isabelle, or many others). And there will be language models submitting answers in human language. The big difference between these two submissions are that: if a marker verifies that the <em>statement</em> of the question has been correctly translated into the computer proof checker, then all they need to do is to check that the proof compiles and then they basically know that it is a “full marks” solution. For the language models we will have a situation like the poor Putnam solutions above — the computer will write something, it will look convincing, but a human is going to have to read it carefully and grade it, and there is certainly no guarantee that it will be a “full marks” solution. Borcherds is right to remind the AI community that “prove this theorem!” is what we really want to see as mathematicians, and language models are currently at least an order of magnitude less accurate than expert humans when it comes to logical reasoning. I am dreading the inevitable onslaught in a year or two of language model “proofs” of the Riemann hypothesis which will just contain claims which are vague or inaccurate in the middle of 10 pages of correct mathematics which the human will have to wade through to find the line which doesn’t hold up. On the other hand, theorem provers are at least an order of magnitude more accurate: every time I’ve seen Lean not accept a human argument in the mathematical literature, the human has been wrong. </p>



<p>In fact, as mathematicians, we would like to see more than “prove this theorem!”. We would like to see “prove this theorem, correctly, and explain what makes the proof work in a way which we humans understand”. With the language model approach I worry (a lot) about “correctly” and with the theorem prover approach I worry about “in a way which we humans understand”. There is still a huge amount to be done. Progress is currently happening really quickly. But we are a long way away. When will we “beat the undergraduate barrier”? Nobody knows.</p>

			
														</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I built a platform for discovering and sharing Chrome extension collections (117 pts)]]></title>
            <link>https://webextension.net/collections</link>
            <guid>42492753</guid>
            <pubDate>Mon, 23 Dec 2024 08:15:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webextension.net/collections">https://webextension.net/collections</a>, See on <a href="https://news.ycombinator.com/item?id=42492753">Hacker News</a></p>
Couldn't get https://webextension.net/collections: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[WSDA, USDA announce eradication of northern giant hornet from the United States (128 pts)]]></title>
            <link>https://agr.wa.gov/about-wsda/news-and-media-relations/news-releases?article=41658</link>
            <guid>42491979</guid>
            <pubDate>Mon, 23 Dec 2024 05:16:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://agr.wa.gov/about-wsda/news-and-media-relations/news-releases?article=41658">https://agr.wa.gov/about-wsda/news-and-media-relations/news-releases?article=41658</a>, See on <a href="https://news.ycombinator.com/item?id=42491979">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>
                                    OLYMPIA – After three years without confirmed detections, the Washington State Department of Agriculture (WSDA) and the United States Department of Agriculture (USDA) have declared the northern giant hornet (<em>Vespa mandarinia</em>) eradicated from Washington and the United States. &nbsp;</p><p>

“We’re pleased to announce the eradication of the northern giant hornet in Washington state,” Derek Sandison, WSDA director, said. “I’m incredibly proud of our team, which has dedicated years of hard work to safeguarding our state and the nation from this invasive threat to our native pollinators and agriculture. I’d also like to acknowledge the federal, state, and local support that made this feat possible. This success is the result of our combined efforts.”</p><p>

<a href="https://cms.agr.wa.gov/getmedia/ca617748-7e11-4889-91d2-b535505d8d2b/FirstAGHErad1024202010.jpg" target="_blank"><img alt="4 people in hornet suits holding a canister with hornets" src="https://cms.agr.wa.gov/getmedia/ca617748-7e11-4889-91d2-b535505d8d2b/FirstAGHErad1024202010.jpg?width=799&amp;height=533"></a><br>
<em><sub>WSDA's hornet eradication team after removing hornets from the tree at the first hornet nest detection in the United States, Oct. 2020. Left to right: Chris Looney, Cassie Cichorz, Sven Spichiger, and Rian Wojahn.&nbsp;</sub></em></p><p>

“We are proud of this landmark victory in the fight against invasive species,” said Dr. Mark Davidson Deputy Administrator at USDA’s Animal and Plant Health Inspection Service. “The success of this effort demonstrates what’s possible when agencies and communities unite toward a common goal. USDA played a key role by providing critical funding, technology, personnel and research support, and scientific expertise that helped WSDA eradicate this pest. By tackling this threat head-on, we protected not only pollinators and crops, but also the industries, communities, and ecosystems that depend on them.”</p><p>

The eradication success was the result of a multiyear effort to find and eradicate the hornets, which began in 2019. It involved extensive collaboration between state, federal, and international government agencies as well as significant support from community members and groups, especially in Whatcom County.</p><p>

“Without the public’s support for this effort, it is unlikely we would be announcing the eradication of northern giant hornet today,” Sven Spichiger, WSDA pest program manager, said. “All of our nest detections resulted directly or indirectly from public reports. And half of our confirmed detections came from the public. The people of Washington can be proud that we did this by working together.”</p><p>

Had the hornets become established in the country, they could have posed a significant threat to honey bees and other pollinators and native insects. Northern giant hornets are able to kill an entire honey bee hive in as little as 90 minutes. They also pose a threat to human health as their sting is more dangerous than that of a honey bee.</p><p>

<a href="https://cms.agr.wa.gov/getmedia/fc549492-049a-4137-a0a2-17872108f877/NGHCrewOct2020.jpg" target="_blank"><img alt="six people beside a log" src="https://cms.agr.wa.gov/getmedia/fc549492-049a-4137-a0a2-17872108f877/NGHCrewOct2020.jpg?width=798&amp;height=505"></a><br>
<em><sub>WSDA staff opened the section of tree containing the first hornet nest detected in the United States at a Washington State University facility during COVID-19. Oct. 2020. Left to right: Rian Wojahn, Chris Looney, Sven Spichiger, Jessica La Belle, Cassie Cichorz, Karla Salp</sub></em></p><p>

<strong>Kitsap County</strong></p><p>

A community member reported a suspicious hornet sighting in Kitsap County, south of Port Orchard, in October 2024. WSDA was never able to obtain the hornet. Without a specimen, officials are unable to confirm the presence of a new county record for a species.</p><p>

“All we can say is that the image appears to be a hornet of some kind. How it came to be in Kitsap County, we don’t know,” Spichiger said.&nbsp;</p><p>

Although unable to obtain the specimen, WSDA did place traps in the area and conduct outreach to encourage reports of additional suspected sightings. Neither trapping nor outreach yielded additional evidence of hornets in the area. WSDA will conduct trapping in the area in 2025 as a precautionary measure.</p><p>

A similar situation occurred in 2020 when a single hornet specimen was found in Snohomish County. DNA evidence ruled out that specimen as being related to the Whatcom County detections. No additional hornets were ever found in Snohomish County.</p><p>

“Luckily, we were already on the lookout for hornets when they showed up in Washington in 2019,” Spichiger said. “Although they are now eradicated from the state, we’ll always be keeping an eye out for them and encourage community members to do the same. They got here once and they could do it again.”</p><p>

<strong>History</strong></p><p>

The northern giant hornet was first detected in North America in British Columbia, Canada in August 2019 and confirmed in Washington state in December 2019. Although the two detections were close in time and location, DNA evidence suggests there were two different introductions as specimens from each location appeared to originate from different countries.</p><p>

WSDA found and eradicated a single hornet nest in October 2020 and three nests in August and September 2021. All nests were inside alder tree cavities. WSDA continued state and public trapping efforts through 2024 in Whatcom County. Despite trapping and continued public outreach, no additional hornets were detected in the area.
</p></div></div>]]></description>
        </item>
    </channel>
</rss>