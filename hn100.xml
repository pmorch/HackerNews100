<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 14 Dec 2024 06:30:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Htmx 2.0.4 Released (105 pts)]]></title>
            <link>https://github.com/bigskysoftware/htmx/blob/v2.0.4/CHANGELOG.md</link>
            <guid>42413845</guid>
            <pubDate>Sat, 14 Dec 2024 01:23:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/CHANGELOG.md">https://github.com/bigskysoftware/htmx/blob/v2.0.4/CHANGELOG.md</a>, See on <a href="https://news.ycombinator.com/item?id=42413845">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text">
<p dir="auto"><h2 tabindex="-1" dir="auto">[2.0.4] - 2024-12-13</h2><a id="user-content-204---2024-12-13" aria-label="Permalink: [2.0.4] - 2024-12-13" href="#204---2024-12-13"></a></p>
<ul dir="auto">
<li>Calling <code>htmx.ajax</code> with no target or source now defaults to body (previously did nothing)</li>
<li>Nested <a href="https://github.com/bigskysoftware/htmx/commit/5ab508f6523a37890932176f7dc54be9f7a281ff">shadow root</a> fix</li>
<li>The <code>htmx:trigger</code> event now properly fires on the synthetic <code>load</code> event</li>
<li>The synthetic <code>load</code> event will not be re-called when an element is reinitialized via <code>htmx.process()</code></li>
<li>Boosted <code>&lt;form&gt;</code> tags that issue a <code>GET</code> with no or empty <code>action</code> attributes will properly replace all existing query
parameters</li>
<li>Events that are triggered on htmx-powered elements located outside a form, but that refer to a form via the<code>form</code>
attribute, now properly cancel the submission of the referred-to form</li>
<li>Extension Updates
<ul dir="auto">
<li><code>preload</code> extension was
<a href="https://github.com/bigskysoftware/htmx-extensions/commit/fb68dfb48063505d2d7420d717c24ac9a8dae244">completely reworked</a>
by @marisst to be compatible with <code>hx-boost</code>, not cause side effect, etc. Thank you!</li>
<li><code>response-targets</code> was updated to not use deprecated methods</li>
<li>A <a href="https://github.com/bigskysoftware/htmx-extensions/commit/e87e1c3d0bf728b4e43861c7459f3f937883eb99">small fix</a> to
<code>ws</code> to avoid an error when closing in some cases</li>
<li>The <code>head-support</code> extension was updated to work with the <code>sse</code> extension</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[2.0.3] - 2024-10-03</h2><a id="user-content-203---2024-10-03" aria-label="Permalink: [2.0.3] - 2024-10-03" href="#203---2024-10-03"></a></p>
<ul dir="auto">
<li>Added support for the experimental <code>moveBefore()</code> functionality in <a href="https://www.google.com/chrome/canary/" rel="nofollow">Chrome Canary</a>,
see the <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/examples/move-before">demo page</a> for more information.</li>
<li>Fixed <code>revealed</code> event when a resize reveals an element</li>
<li>Enabled <code>hx-preserve</code> in oob-swaps</li>
<li>Better degredation of <code>hx-boost</code> on forms with query parameters in their <code>action</code></li>
<li>Improved shadowRoot support</li>
<li>Many smaller bug fixes</li>
<li>Moved the core extension documentation back to <a href="https://htmx.org/extensions" rel="nofollow">https://htmx.org/extensions</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[2.0.2] - 2024-08-12</h2><a id="user-content-202---2024-08-12" aria-label="Permalink: [2.0.2] - 2024-08-12" href="#202---2024-08-12"></a></p>
<ul dir="auto">
<li>no longer boost forms of type <code>dialog</code></li>
<li>properly trigger the <code>htmx:trigger</code> event when an event is delayed or throttled</li>
<li>file upload is now fixed</li>
<li>empty templates that are not used for oob swaps are no longer removed from the DOM</li>
<li>request indicators are not removed when a full page redirect or refresh occurs</li>
<li>elements that have been disabled for a request are properly re-enabled before snapshotting for history</li>
<li>you can now trigger events on other elements using the <code>HX-Trigger</code> response header</li>
<li>The <code>.d.ts</code> file should now work properly</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[2.0.1] - 2024-07-12</h2><a id="user-content-201---2024-07-12" aria-label="Permalink: [2.0.1] - 2024-07-12" href="#201---2024-07-12"></a></p>
<ul dir="auto">
<li>Make the <code>/dist/htmx.esm.js</code> file the <code>main</code> file in <code>package.json</code> to make installing htmx smoother</li>
<li>Update <code>htmx.d.ts</code> &amp; include it in the distribution</li>
<li>A fix to avoid removing text-only templates on htmx cleanup</li>
<li>A fix for outerHTML swapping of the <code>body</code> tag</li>
<li>Many docs fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[2.0.0] - 2024-06-17</h2><a id="user-content-200---2024-06-17" aria-label="Permalink: [2.0.0] - 2024-06-17" href="#200---2024-06-17"></a></p>
<ul dir="auto">
<li>Removed extensions and moved to their own repos linked off of <a href="https://extensions.htmx.org/" rel="nofollow">https://extensions.htmx.org</a></li>
<li>The website now supports dark mode! (Thanks <a href="https://github.com/pokonski">@pokonski</a>!)</li>
<li>The older, deprecated <a href="https://v1.htmx.org/docs/#websockets-and-sse" rel="nofollow">SSE &amp; WS</a> attributes were removed</li>
<li>Better support for <a href="https://htmx.org/examples/web-components/" rel="nofollow">Web Components &amp; Shadow DOM</a></li>
<li>HTTP <code>DELETE</code> requests now use parameters, rather than form encoded bodies, for their payload (This is in accordance w/ the spec.)</li>
<li>Module support was split into different files:</li>
<li>We now provide specific files in <code>/dist</code> for the various JavaScript module styles:
<ul dir="auto">
<li>ESM Modules: <code>/dist/htmx.esm.js</code></li>
<li>AMD Modules: <code>/dist/htmx.amd.js</code></li>
<li>CJS Modules: <code>/dist/htmx.cjs.js</code></li>
<li>The <code>/dist/htmx.js</code> file continues to be browser-loadable</li>
</ul>
</li>
<li>The <code>hx-on</code> attribute, with its special syntax, has been removed in favor of the less-hacky <code>hx-on:</code> syntax.</li>
<li>See the <a href="https://htmx.org/migration-guide-htmx-1/" rel="nofollow">Upgrade Guide</a> for more details on upgrade steps</li>
<li>The <code>selectAndSwap()</code> internal API method was replaced with the public (and much better) <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/api/#swap"><code>swap()</code></a> method</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.12] - 2024-04-17</h2><a id="user-content-1912---2024-04-17" aria-label="Permalink: [1.9.12] - 2024-04-17" href="#1912---2024-04-17"></a></p>
<ul dir="auto">
<li><a href="https://github.com/bigskysoftware/htmx/commit/e64238dba3113c2eabe26b1e9e9ba7fe29ba3010">IE Fixes</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.11] - 2024-03-15</h2><a id="user-content-1911---2024-03-15" aria-label="Permalink: [1.9.11] - 2024-03-15" href="#1911---2024-03-15"></a></p>
<ul dir="auto">
<li>Fix for new issue w/ web sockets &amp; SSE on iOS 17.4 (thanks apple!)</li>
<li>Fix for double script execution issue when using template parsing</li>
<li>Fix TypeScript types file</li>
<li>Fix SSE Ext: reinstantiate EventSource listeners upon reconnection logic (#2272)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.10] - 2023-12-21</h2><a id="user-content-1910---2023-12-21" aria-label="Permalink: [1.9.10] - 2023-12-21" href="#1910---2023-12-21"></a></p>
<ul dir="auto">
<li><code>hx-on*</code> attributes now support the form <code>hx-on-</code>, with a trailing dash, to better support template systems (such as EJS)
that do not like double colons in HTML attributes.</li>
<li>Added an <code>htmx.config.triggerSpecsCache</code> configuration property that can be set to an object to cache the trigger spec parsing</li>
<li>Added a <code>path-params.js</code> extension for populating request paths with variable values</li>
<li>Many smaller bug fixes &amp; improvements</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.9] - 2023-11-21</h2><a id="user-content-199---2023-11-21" aria-label="Permalink: [1.9.9] - 2023-11-21" href="#199---2023-11-21"></a></p>
<ul dir="auto">
<li>Allow CSS selectors with whitespace in attributes like <code>hx-target</code> by using parens or curly-braces</li>
<li>Properly allow users to override the <code>Content-Type</code> request header</li>
<li>Added the <code>select</code> option to <code>htmx.ajax()</code></li>
<li>Fixed a race condition in readystate detection that lead to htmx not being initialized in some scenarios with 3rd
party script loaders</li>
<li>Fixed a bug that caused relative resources to resolve against the wrong base URL when a new URL is pushed</li>
<li>Fixed a UI issue that could cause indicators to briefly flash</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.8] - 2023-11-06</h2><a id="user-content-198---2023-11-06" aria-label="Permalink: [1.9.8] - 2023-11-06" href="#198---2023-11-06"></a></p>
<ul dir="auto">
<li>Fixed a few npm &amp; build related issues</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.7] - 2023-11-03</h2><a id="user-content-197---2023-11-03" aria-label="Permalink: [1.9.7] - 2023-11-03" href="#197---2023-11-03"></a></p>
<ul dir="auto">
<li>Fixed a bug where a button associated with a form that is swapped out of the DOM caused errors</li>
<li>The <code>hx-target-error</code> attribute was added to the <code>response-targets</code> extension, allowing you to capture all 400 &amp; 500
responses with a single attribute</li>
<li><code>hx-on</code> now properly supports multiple listeners</li>
<li>The <code>hx-confirm</code> prompt is now passed into custom confirmation handlers</li>
<li><code>next</code> and <code>previous</code> are now valid <em>extended CSS</em> symbols in htmx</li>
<li>The <code>htmx:beforeHistoryUpdate</code> event was added</li>
<li>Properly ignore the <code>dialog</code> formmethod on buttons when resolving the HTTP method to use</li>
<li>Added a <code>htmx.config.scrollIntoViewOnBoost</code> option that may be set to <code>false</code> to disable scrolling the top of the
body into view for boosted elements</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.6] - 2023-09-22</h2><a id="user-content-196---2023-09-22" aria-label="Permalink: [1.9.6] - 2023-09-22" href="#196---2023-09-22"></a></p>
<ul dir="auto">
<li>IE support has been restored (thank you @telroshan!)</li>
<li>Introduced the <code>hx-disabled-elt</code> attribute to allow specifying elements to disable during a request</li>
<li>You can now explicitly decide to ignore <code>title</code> tags found in new content via the <code>ignoreTitle</code> option in <code>hx-swap</code> and the <code>htmx.config.ignoreTitle</code> configuration variable.</li>
<li><code>hx-swap</code> modifiers may be used without explicitly specifying the swap mechanism</li>
<li>Arrays are now supported in the <code>client-side-templates</code> extension</li>
<li>XSLT support in the <code>client-side-templates</code> extension</li>
<li>Support <code>preventDefault()</code> in extension event handling</li>
<li>Allow the <code>HX-Refresh</code> header to apply even after an <code>HX-Redirect</code> has occurred</li>
<li>the <code>formaction</code> and <code>formmethod</code> attributes on buttons are now properly respected</li>
<li><code>hx-on</code> can now handle events with dots in their name</li>
<li><code>htmx.ajax()</code> now always returns a Promise</li>
<li>Handle leading <code>style</code> tag parsing more effectively</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.5] - 2023-08-25</h2><a id="user-content-195---2023-08-25" aria-label="Permalink: [1.9.5] - 2023-08-25" href="#195---2023-08-25"></a></p>
<ul dir="auto">
<li>Web sockets now properly pass the target id in the HEADERS struct</li>
<li>A very rare loading state bug was fixed (see <a href="https://github.com/bigskysoftware/htmx/commit/93bd81b6d003bb7bc445f10192bdb8089fa3495d">https://github.com/bigskysoftware/htmx/commit/93bd81b6d003bb7bc445f10192bdb8089fa3495d</a>)</li>
<li><code>hx-on</code> will not evaluate if <code>allowEval</code> is set to false</li>
<li>You can disable the interpretation of script tags with the new <code>htmx.config.allowScriptTags</code> config variable</li>
<li>You can now disable htmx-based requests to non-origin hosts via the <code>htmx.config.selfRequestsOnly</code> config variable</li>
<li>The <a href="https://htmx.org/docs#security" rel="nofollow">Security</a> section has been expanded to help developers better understand how to
properly secure their htmx-based applications.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.4] - 2023-07-25</h2><a id="user-content-194---2023-07-25" aria-label="Permalink: [1.9.4] - 2023-07-25" href="#194---2023-07-25"></a></p>
<ul dir="auto">
<li>This is a bug-fix release for the most part, w/a heavy dose of @telroshan</li>
<li>The <code>HX-Trigger</code> response header now supports comma separated event names</li>
<li>Submit buttons that use the <code>form</code> attribute now work correctly</li>
<li>The <code>changed</code> modifier now uses the triggering element, rather than the element the <code>hx-trigger</code> is defined on</li>
<li><code>hx-disable</code> is now handled dynamically so it can be added and removed</li>
<li>IE11 compatibility restored! (maybe, hard to test)</li>
<li>Fixed bug with <code>hx-on</code> event handler cleanup</li>
<li>Many smaller bug fixes, typo fixes and general improvements</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.3] - 2023-07-14</h2><a id="user-content-193---2023-07-14" aria-label="Permalink: [1.9.3] - 2023-07-14" href="#193---2023-07-14"></a></p>
<ul dir="auto">
<li>The <code>hx-on</code> attribute has been deprecated (sorry) in favor of <code>hx-on:&lt;event name&gt;</code> attributes.  See <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/attributes/hx-on"><code>hx-on</code></a> for more information.</li>
<li>We now have functioning CI using GitHub actions!</li>
<li>You can now configure if a type of HTTP request uses the body for parameters or not.  In particular, the <code>DELETE</code> <em>should</em> use
query parameters, according to the spec.  htmx has used the body, instead.  To avoid breaking code we are keeping this undefined
behavior for now, but allowing people to fix it for their use cases by updating the <code>htmx.config.methodsThatUseUrlParams</code> config
option.  Thank you to Alex and Vincent for their feedback and work on this issue!</li>
<li>The <code>this</code> symbol is now available in event filter expressions, and refers to the element the <code>hx-trigger</code> is on</li>
<li>Fix bug where the <code>htmx:afterSettle</code> event was raised multiple times with oob swaps occurred</li>
<li>A large number of accessibility fixes were made in the docs (Thank you Denis &amp; crew!)</li>
<li>Fixed bug w/ WebSocket extension initialization caused by "naked" <code>hx-trigger</code> feature</li>
<li>The <code>HX-Reselect</code> HTTP response header has been added to change the selection from the returned content</li>
<li>Many other smaller bug fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.2] - 2023-04-28</h2><a id="user-content-192---2023-04-28" aria-label="Permalink: [1.9.2] - 2023-04-28" href="#192---2023-04-28"></a></p>
<ul dir="auto">
<li>Fixed bug w/ <code>hx-on</code> not properly de-initializing</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.1] - 2023-04-27</h2><a id="user-content-191---2023-04-27" aria-label="Permalink: [1.9.1] - 2023-04-27" href="#191---2023-04-27"></a></p>
<ul dir="auto">
<li>Fixed a bug with the new naked triggers that prevented boosted elements with explicit <code>hx-trigger</code>'s from functioning
properly</li>
<li>Added code to play well with other libraries that also use the <code>window.onpopstate</code> Daily reminder: <a href="https://htmx.org/img/memes/javascripthistory.png" rel="nofollow">https://htmx.org/img/memes/javascripthistory.png</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.9.0] - 2023-04-11</h2><a id="user-content-190---2023-04-11" aria-label="Permalink: [1.9.0] - 2023-04-11" href="#190---2023-04-11"></a></p>
<ul dir="auto">
<li>Support for generalized inline event handling via the new <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/attributes/hx-on"><code>hx-on</code></a> attribute, which addresses
the shortcoming of limited <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers#using_onevent_properties" rel="nofollow"><code>onevent</code> properties</a> attributes in HTML.</li>
<li>Support for <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/docs#view-transitions">view transitions</a>, based on the experimental <a href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API" rel="nofollow">View Transitions API</a>
currently available in Chrome 111+ and coming to other browsers soon.</li>
<li>Support for "naked" <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/attributes/hx-trigger"><code>hx-trigger</code></a> attributes, where an <code>hx-trigger</code> is present on an element
that does not have an <code>hx-get</code>, etc. defined on it.  Instead, it will trigger the new <code>htmx:triggered</code> event, which can
be responded to via your <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/docs#scripting">preferred scripting solution</a>.</li>
<li>A memory leak fix by <a href="https://github.com/bigskysoftware/htmx/commit/8cd3a480a7388877628ce8b9b8e50cd5df48bb81">@croxton</a></li>
<li>The htmx website has been migrated from 11ty to <a href="https://www.getzola.org/" rel="nofollow">zola</a> by <a href="https://github.com/danieljsummers">@danieljsummers</a>, cutting
way down on the number of "development" javascript dependencies</li>
<li>Many other smaller bug fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.6] - 2023-03-02</h2><a id="user-content-186---2023-03-02" aria-label="Permalink: [1.8.6] - 2023-03-02" href="#186---2023-03-02"></a></p>
<ul dir="auto">
<li>ESM support!</li>
<li>Sass has been vanquished from the htmx.org website, which should set us up for some good progress going forward</li>
<li>Fixed a bug where the <code>changed</code> modifier on <code>keyup</code> did not work properly if an input was tabbed into</li>
<li>Many other smaller bug fixes and doc fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.5] - 2023-01-17</h2><a id="user-content-185---2023-01-17" aria-label="Permalink: [1.8.5] - 2023-01-17" href="#185---2023-01-17"></a></p>
<ul dir="auto">
<li>Support a new optional cache-busting configuration option, <code>getCacheBusterParam</code>, to allow browsers to disambiguate
between <code>GET</code> requests from htmx and from the raw browser</li>
<li>Support new <code>hx-history='false'</code> attribute, to prevent sensitive data from being stored in the history cache. (Thank you @croxton!)</li>
<li>Extensive new event-oriented features are available in the <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/web-sockets">Web Socket</a> extension (Thank you @Renerick!)</li>
<li>A bug fix for when a form contains multiple empty input values with the same name (Thank you @bluekeyes!)</li>
<li>A bug fix around inputs that throw exceptions when calling <code>setSelectionRange()</code> (Thank you @gone!)</li>
<li>A bug fix to pass through the proper event for the <code>htmx:configRequest</code> event</li>
<li>A bug fix/improvement for the <code>preload</code> extension</li>
<li>Many other small bug fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.4] - 2022-11-05</h2><a id="user-content-184---2022-11-05" aria-label="Permalink: [1.8.4] - 2022-11-05" href="#184---2022-11-05"></a></p>
<ul dir="auto">
<li>Fix the <em>exact same</em> regression in <code>revealed</code> logic as in 1.8.2</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.3] - 2022-11-04</h2><a id="user-content-183---2022-11-04" aria-label="Permalink: [1.8.3] - 2022-11-04" href="#183---2022-11-04"></a></p>
<ul dir="auto">
<li>A new <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/events#htmx:confirm"><code>htmx:confirm</code> event</a> was added that allows for asynchronous confirmation dialogs to
be integrated into htmx requests</li>
<li>The new <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/head-support">head-support</a> extension allows for more elaborate head tag merging than standard htmx
supports.  This functionality may be integrated into htmx 2.0, depending on feedback.</li>
<li>The new <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/multi-swap">multi-swap</a> provides more elaborate swapping of multiple elements on a screen using
a custom swap strategy</li>
<li>Many doc fixes (thank you to everyone who contributed!)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.2] - 2022-10-12</h2><a id="user-content-182---2022-10-12" aria-label="Permalink: [1.8.2] - 2022-10-12" href="#182---2022-10-12"></a></p>
<ul dir="auto">
<li>Fix regression in <code>revealed</code> logic</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.1] - 2022-10-11</h2><a id="user-content-181---2022-10-11" aria-label="Permalink: [1.8.1] - 2022-10-11" href="#181---2022-10-11"></a></p>
<ul dir="auto">
<li>We now keep a count of outstanding requests for an indicator, so more than one overlapping request can share the same
indicator without issues</li>
<li>We now track the attribute state of an element and re-initialize it if <code>htmx.process()</code> is called on the element and
the attributes have changed</li>
<li><a href="https://github.com/bigskysoftware/idiomorph">Idiomorph</a> is now available for all your morph-swapping needs</li>
<li>The <code>unset</code> directive now works properly for <code>hx-vals</code> and <code>hx-vars</code></li>
<li>The title of the page is now properly set on a history cache miss</li>
<li>The new <a href="https://htmx.org/attributes/hx-validate" rel="nofollow"><code>hx-validate</code></a> attribute will force elements to validate before a request, even if
they are not within a form being submitted</li>
<li>Many smaller bug and docs fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.8.0] - 2022-7-12</h2><a id="user-content-180---2022-7-12" aria-label="Permalink: [1.8.0] - 2022-7-12" href="#180---2022-7-12"></a></p>
<ul dir="auto">
<li><strong>NOTE</strong>: This release involved some changes to touchy code (e.g. history support) so please test thoroughly and let
us know if you see any issues</li>
<li>Boosted forms now will automatically push URLs into history as with links.  The <a href="https://caniuse.com/mdn-api_xmlhttprequest_responseurl" rel="nofollow">response URL</a>
detection API support is good enough that we feel comfortable making this the default now.
<ul dir="auto">
<li>If you do not want this behavior you can add <code>hx-push-url='false'</code> to your boosted forms</li>
</ul>
</li>
<li>The <a href="https://htmx.org/attributes/hx-replace-url" rel="nofollow"><code>hx-replace-url</code></a> attribute was introduced, allowing you to replace
the current URL in history (to complement <code>hx-push-url</code>)</li>
<li>Bug fix - if htmx is included in a page more than once, we do not process elements multiple times</li>
<li>Bug fix - When localStorage is not available we do not attempt to save history in it</li>
<li><a href="https://github.com/bigskysoftware/htmx/issues/908" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/908/hovercard">Bug fix</a> - <code>hx-boost</code> respects the <code>enctype</code> attribute</li>
<li><code>m</code> is now a valid timing modifier (e.g. <code>hx-trigger="every 2m"</code>)</li>
<li><code>next</code> and <code>previous</code> are now valid extended query selector modifiers, e.g. <code>hx-target="next div"</code> will target the
next div from the current element</li>
<li>Bug fix - <code>hx-boost</code> will boost anchor tags with a <code>_self</code> target</li>
<li>The <code>load</code> event now properly supports event filters</li>
<li>The websocket extension has had many improvements: (A huge thank you to Denis Palashevskii, our newest committer on the project!)
<ul dir="auto">
<li>Implement proper <code>hx-trigger</code> support</li>
<li>Expose trigger handling API to extensions</li>
<li>Implement safe message sending with sending queue</li>
<li>Fix <code>ws-send</code> attributes connecting in new elements</li>
<li>Fix OOB swapping of multiple elements in response</li>
</ul>
</li>
<li>The <code>HX-Location</code> response header now implements client-side redirects entirely within htmx</li>
<li>The <code>HX-Reswap</code> response header allows you to change the swap behavior of htmx</li>
<li>The new <a href="https://htmx.org/attributes/hx-select-oob" rel="nofollow"><code>hx-select-oob</code></a> attribute selects one or more elements from a server response to swap in via an out of band swap</li>
<li>The new <a href="https://htmx.org/attributes/hx-replace-url" rel="nofollow"><code>hx-replace-url</code></a> attribute can be used to replace the current URL in the location
bar (very similar to <code>hx-push-url</code> but no new history entry is created).  The corresponding <code>HX-Replace-Url</code> response header can be used as well.</li>
<li>htmx now properly handles anchors in both boosted links, as well as in <code>hx-get</code>, etc. attributes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.7.0] - 2022-02-22</h2><a id="user-content-170---2022-02-22" aria-label="Permalink: [1.7.0] - 2022-02-22" href="#170---2022-02-22"></a></p>
<ul dir="auto">
<li>The new <a href="https://htmx.org/attributes/hx-sync" rel="nofollow"><code>hx-sync</code></a> attribute allows you to synchronize multiple element requests on a single
element using various strategies (e.g. replace)
<ul dir="auto">
<li>You can also now abort an element making a request by sending it the <code>htmx:abort</code> event</li>
</ul>
</li>
<li><a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/server-sent-events">Server Sent Events</a> and <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/web-sockets">Web Sockets</a> are now available as
extensions, in addition to the normal core support.  In htmx 2.0, the current <code>hx-sse</code> and <code>hx-ws</code> attributes will be
moved entirely out to these new extensions.  By moving these features to extensions we will be able to add functionality
to both of them without compromising the core file size of htmx.  You are encouraged to move over to the new
extensions, but <code>hx-sse</code> and <code>hx-ws</code> will continue to work indefinitely in htmx 1.x.</li>
<li>You can now mask out <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/docs#inheritance">attribute inheritance</a> via the <a href="https://htmx.org/attributes/hx-disinherit" rel="nofollow"><code>hx-disinherit</code></a> attribute.</li>
<li>The <code>HX-Push</code> header can now have the <code>false</code> value, which will prevent a history snapshot from occurring.</li>
<li>Many new extensions, with a big thanks to all the contributors!
<ul dir="auto">
<li>A new <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/alpine-morph"><code>alpine-morph</code></a> allows you to use Alpine's swapping engine, which preserves Alpine</li>
<li>A <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/restored">restored</a> extension was added that will trigger a <code>restore</code> event on all elements in the DOM
on history restoration.</li>
<li>A <a href="https://github.com/bigskysoftware/htmx/blob/v2.0.4/extensions/loading-states">loading-states</a> extension was added that allows you to easily manage loading states
while a request is in flight, including disabling elements, and adding and removing CSS classes.</li>
</ul>
</li>
<li>The <code>this</code> symbol now resolves properly for the <a href="https://htmx.org/attributes/hx-include" rel="nofollow"><code>hx-include</code></a> and <a href="https://htmx.org/attributes/hx-indicator" rel="nofollow"><code>hx-indicator</code></a>
attributes</li>
<li>When an object is included via the <a href="https://htmx.org/attributes/hx-vals" rel="nofollow"><code>hx-vals</code></a> attribute, it will be converted to JSON (rather
than rendering as the string <code>[Object object]"</code>)</li>
<li>You can now pass a swap style in to the <code>htmx.ajax()</code> function call.</li>
<li>Poll events now contain a <code>target</code> attribute, allowing you to filter a poll on the element that is polling.</li>
<li>Two new Out Of Band-related events were added: <code>htmx:oobBeforeSwap</code> &amp; <code>htmx:oobAfterSwap</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.6.1] - 2021-11-22</h2><a id="user-content-161---2021-11-22" aria-label="Permalink: [1.6.1] - 2021-11-22" href="#161---2021-11-22"></a></p>
<ul dir="auto">
<li>A new <code>HX-Retarget</code> header allows you to change the default target of returned content</li>
<li>The <code>htmx:beforeSwap</code> event now includes another configurable property: <code>detail.isError</code> which can
be used to indicate if a given response should be treated as an error or not</li>
<li>The <code>htmx:afterRequest</code> event has two new detail properties: <code>success</code> and <code>failed</code>, allowing you to write
trigger filters in htmx or hyperscript:
<div dir="auto" data-snippet-clipboard-copy-content="  on htmx:afterRequest[failed]
    set #myCheckbox's checked to true"><pre>  <span>on</span> htmx:afterRequest[failed]
    <span>set</span> <span><span>#</span>myCheckbox's checked to true</span></pre></div>
</li>
<li>Fixed the <code>from:</code> option in <a href="https://htmx.org/attributes/hx-trigger" rel="nofollow"><code>hx-trigger</code></a> to support <code>closest &lt;CSS selector&gt;</code>
and <code>find &lt;CSS selector&gt;</code> forms</li>
<li>Don't boost anchor tags with an explicit <code>target</code> set</li>
<li>Don't cancel all events on boosted elements, only the events that naturally trigger them (click for anchors, submit
for forms)</li>
<li>Persist revealed state in the DOM so that on history navigation, revealed elements are not re-requested</li>
<li>Process all <a href="https://htmx.org/attributes/hx-ext" rel="nofollow"><code>hx-ext</code></a> attributes, even if no other htmx attribute is on the element</li>
<li>Snapshot the current URL on load so that history support works properly after a page refresh occurs</li>
<li>Many, many documentation updates (thank you to all the contributors!)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.6.0] - 2021-10-01</h2><a id="user-content-160---2021-10-01" aria-label="Permalink: [1.6.0] - 2021-10-01" href="#160---2021-10-01"></a></p>
<ul dir="auto">
<li>Completely reworked <code>&lt;script&gt;</code> tag support that now supports the <code>&lt;script src="...'/&gt;</code> form</li>
<li>You can now use the value <code>unset</code> to clear a property that would normally be inherited (e.g. hx-confirm)</li>
<li>The <code>htmx-added</code> class is added to new content before a swap and removed after the settle phase, which allows you
more flexibility in writing CSS transitions for added content (rather than relying on the target, as with <code>htmx-settling</code>)</li>
<li>The <code>htmx:beforeSwap</code> event has been updated to allow you to <a href="https://htmx.org/docs/#modifying_swapping_behavior_with_events" rel="nofollow">configure swapping</a>
behavior</li>
<li>Improved <code>&lt;title&gt;</code> extraction support</li>
<li>You can listen to events on the <code>window</code> object using the <code>from:</code> modifier in <code>hx-trigger</code></li>
<li>The <code>root</code> option of the <code>intersect</code> event was fixed</li>
<li>Boosted forms respect the <code>enctype</code> declaration</li>
<li>The <code>HX-Boosted</code> header will be sent on requests from boosted elements</li>
<li>Promises are not returned from the main ajax function unless it is an api call (i.e. <code>htmx.ajax</code>)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.5.0] - 2021-7-12</h2><a id="user-content-150---2021-7-12" aria-label="Permalink: [1.5.0] - 2021-7-12" href="#150---2021-7-12"></a></p>
<ul dir="auto">
<li>Support tracking of button clicked during a form submission</li>
<li>Conditional polling via the <a href="https://htmx.org/attributes/hx-trigger" rel="nofollow">hx-trigger</a> attribute</li>
<li><code>document</code> is now a valid pseudo-selector on the <a href="https://htmx.org/attributes/hx-trigger" rel="nofollow">hx-trigger</a> <code>from:</code> argument, allowing you
to listen for events on the document.</li>
<li>Added the <a href="https://htmx.org/attributes/hx-request" rel="nofollow">hx-request</a> attribute, allowing you to configure the following aspects of the request
<ul dir="auto">
<li><code>timeout</code> - the timeout of the request</li>
<li><code>credentials</code> - if the request will send credentials</li>
<li><code>noHeaders</code> - strips all headers from the request</li>
</ul>
</li>
<li>Along with the above attribute, you can configure the default values for each of these via the corresponding <code>htmx.config</code>
properties (e.g. <code>htmx.config.timeout</code>)</li>
<li>Both the <code>scroll</code> and <code>show</code> options on <a href="https://htmx.org/attributes/hx-swap" rel="nofollow">hx-swap</a> now support extended syntax for selecting the
element to scroll or to show, including the pseudo-selectors <code>window:top</code> and <code>window:bottom</code>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.4.1] - 2021-6-1</h2><a id="user-content-141---2021-6-1" aria-label="Permalink: [1.4.1] - 2021-6-1" href="#141---2021-6-1"></a></p>
<ul dir="auto">
<li>typo fix</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.4.0] - 2021-5-25</h2><a id="user-content-140---2021-5-25" aria-label="Permalink: [1.4.0] - 2021-5-25" href="#140---2021-5-25"></a></p>
<ul dir="auto">
<li>Added the <code>queue</code> option to the <a href="https://htmx.org/attributes/hx-trigger" rel="nofollow">hx-trigger</a> attribute, allowing you to specify how events
should be queued when they are received with a request in flight</li>
<li>The <code>htmx.config.useTemplateFragments</code> option was added, allowing you to use HTML template tags for parsing content
from the server.  This allows you to use Out of Band content when returning things like table rows, but it is not
IE11 compatible.</li>
<li>The <code>defaultSettleDelay</code> was dropped to 20ms from 100ms</li>
<li>Introduced a new synthetic event, <a href="https://htmx.org/docs#pecial-events" rel="nofollow">intersect</a> that allows you to trigger when an item is scrolled into view
as specified by the <code>IntersectionObserver</code> API</li>
<li>Fixed timing issue that caused exceptions in the <code>reveal</code> logic when scrolling at incredible speeds - <a data-error-text="Failed to load title" data-id="868189825" data-permission-text="Title is private" data-url="https://github.com/bigskysoftware/htmx/issues/463" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/463/hovercard" href="https://github.com/bigskysoftware/htmx/issues/463">#463</a></li>
<li>Fixed bug causing SVG titles to be incorrectly used as page title - <a data-error-text="Failed to load title" data-id="863194897" data-permission-text="Title is private" data-url="https://github.com/bigskysoftware/htmx/issues/459" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/459/hovercard" href="https://github.com/bigskysoftware/htmx/issues/459">#459</a></li>
<li>Boosted forms that issue a GET will now push the URL by default - <a data-error-text="Failed to load title" data-id="891349891" data-permission-text="Title is private" data-url="https://github.com/bigskysoftware/htmx/issues/485" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/485/hovercard" href="https://github.com/bigskysoftware/htmx/issues/485">#485</a></li>
<li>Better dispatch of request events when an element is removed from the DOM</li>
<li>Fixed a bug causing <code>hx-prompt</code> to fail</li>
<li>The <code>htmx.config.withCredentials</code> option was added, to send credentials with ajax requests (default is <code>false</code>)</li>
<li>The <code>throttle</code> option on <code>hx-trigger</code> does not delay the initial request any longer</li>
<li>The <code>meta</code> key is ignored on boosted links</li>
<li><code>&lt;script&gt;</code> tags are now evaluated in the global scope</li>
<li><code>hx-swap</code> now supports the <code>none</code> option</li>
<li>Safari text selection bug - <a data-error-text="Failed to load title" data-id="844318856" data-permission-text="Title is private" data-url="https://github.com/bigskysoftware/htmx/issues/438" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/438/hovercard" href="https://github.com/bigskysoftware/htmx/issues/438">#438</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.3.3] - 2021-4-5</h2><a id="user-content-133---2021-4-5" aria-label="Permalink: [1.3.3] - 2021-4-5" href="#133---2021-4-5"></a></p>
<ul dir="auto">
<li>Added the <a href="https://htmx.org/docs#security" rel="nofollow"><code>hx-disabled</code></a> attribute to allow htmx to be turned off for parts of the DOM</li>
<li>SSE now uses a full-jitter exponential backoff algorithm on reconnection, using the <code>htmx.config.wsReconnectDelay</code>
setting</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.3.2] - 2021-3-9</h2><a id="user-content-132---2021-3-9" aria-label="Permalink: [1.3.2] - 2021-3-9" href="#132---2021-3-9"></a></p>
<ul dir="auto">
<li>Bug fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.3.1] - 2021-3-9</h2><a id="user-content-131---2021-3-9" aria-label="Permalink: [1.3.1] - 2021-3-9" href="#131---2021-3-9"></a></p>
<ul dir="auto">
<li>IE11 fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.3.0] - 2021-3-6</h2><a id="user-content-130---2021-3-6" aria-label="Permalink: [1.3.0] - 2021-3-6" href="#130---2021-3-6"></a></p>
<ul dir="auto">
<li>Support a <code>target</code> modifier on <code>hx-trigger</code> to filter based on the element targeted by an event.  This allows
lazy binding to that target selector.</li>
<li>Events are no longer consumed by the first element that might handle them, unless the <code>consume</code> keyword is
added to the <code>hx-trigger</code> specification</li>
<li>Added the <code>htmx:beforeSend</code> event, fired just before an ajax request begins</li>
<li>SSE swaps are properly settled</li>
<li>Fixed bug that was improperly cancelling all clicks on anchors</li>
<li><code>htmx.ajax()</code> now returns a promise</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.2.1] - 2021-2-19</h2><a id="user-content-121---2021-2-19" aria-label="Permalink: [1.2.1] - 2021-2-19" href="#121---2021-2-19"></a></p>
<ul dir="auto">
<li>Fixed an issue with the history cache, where the cache was getting blown out after the first navigation backwards</li>
<li>Added the <code>htmx.config.refreshOnHistoryMiss</code> option, allowing users to trigger a full page refresh on history cache miss
rather than issuing an AJAX request</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.2.0] - 2021-2-13</h2><a id="user-content-120---2021-2-13" aria-label="Permalink: [1.2.0] - 2021-2-13" href="#120---2021-2-13"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">New Features</h3><a id="user-content-new-features" aria-label="Permalink: New Features" href="#new-features"></a></p>
<ul dir="auto">
<li><code>hx-vars</code> has been deprecated in favor of <code>hx-vals</code></li>
<li><code>hx-vals</code> now supports a <code>javascript:</code> prefix to achieve the behavior that <code>hx-vars</code> provided</li>
<li>The new <code>hx-headers</code> attribute allows you to add headers to a request via an attribute.  Like <code>hx-vals</code> it supports
JSON or javascript via the <code>javascript:</code> prefix</li>
<li><code>hx-include</code> will now include all inputs under an element, even if that element is not a form tag</li>
<li>The <a href="https://htmx.org/extensions/preload/" rel="nofollow">preload extension</a> now offers a <code>preload-images="true"</code> attribute that will aggressively load images in preloaded content</li>
<li>On requests driven by a history cache miss, the new <code>HX-History-Restore-Request</code> header is included so that the server
can differentiate between history requests and normal requests</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Improvements &amp; Bug fixes</h3><a id="user-content-improvements--bug-fixes" aria-label="Permalink: Improvements &amp; Bug fixes" href="#improvements--bug-fixes"></a></p>
<ul dir="auto">
<li>Improved handling of precedence of input values to favor the enclosing form (see <a href="https://github.com/bigskysoftware/htmx/commit/a10e43d619dc340aa324d37772c06a69a2f47ec9">here</a>)</li>
<li>Moved event filtering logic <em>after</em> <code>preventDefault</code> so filtering still allows events to be properly handled</li>
<li>No longer trigger after swap events on elements that have been removed via an <code>outerHTML</code> swap</li>
<li>Properly remove event handlers added to other elements when an element is removed from the DOM</li>
<li>Handle the <code>scroll:</code> modifier in <code>hx-swap</code> properly when an <code>outerHTML</code> swap occurs</li>
<li>Lots of docs fixes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.1.0] - 2021-1-6</h2><a id="user-content-110---2021-1-6" aria-label="Permalink: [1.1.0] - 2021-1-6" href="#110---2021-1-6"></a></p>
<ul dir="auto">
<li>Newly added <a href="https://htmx.org/extensions/preload/" rel="nofollow">preload extension</a> allows you to preload resources for lower
latency requests!</li>
<li>Support the <code>ignore:</code> modifier for extensions</li>
<li>Updated form variable order inclusion to include the enclosing form <em>last</em> so that, in the presence of multiple
values, the most relevant value is the most likely to be selected by the server</li>
<li>Support for the <a href="https://dev.htmx.org/api/#ajax" rel="nofollow"><code>htmx.ajax()</code></a> javascript function, to issue an htmx-style ajax
request from javascript</li>
<li>Removed the following htmx request headers for better cache behavior: <code>HX-Event-Target</code>, <code>HX-Active-Element</code>,
<code>HX-Active-Element-Name</code>, <code>HX-Active-Element-Value</code></li>
<li>Added the <a href="https://dev.htmx.org/attributes/hx-preserve" rel="nofollow"><code>hx-preserve</code></a> attribute, which allows
you to preserve elements across requests (for example, to keep a video element playing properly)</li>
<li>The <a href="https://dev.htmx.org/extensions/path-deps/#refresh" rel="nofollow">path-deps</a> now surfaces a small api
for refreshing path dependencies manually in javascript</li>
<li>Now support the <code>from:</code> clause on <a href="https://dev.htmx.org/attributes/hx-trigger" rel="nofollow"><code>hx-trigger</code></a> to
allow an element to respond to events on other elements.</li>
<li>Added the <code>htmx:beforeProcessNode</code> event, renamed the (previously undocumented) <code>htmx:processedNode</code> to <code>htmx:afterProcessNode</code></li>
<li>Added <code>closest</code> syntax support for the <a href="https://dev.htmx.org/attributes/hx-indicator" rel="nofollow"><code>hx-indicator</code></a> attribute</li>
<li>Added <code>on load</code> support for the newest version of <a href="https://hyperscript.org/" rel="nofollow">hyperscript</a></li>
<li>Added the <code>htmx.config.allowEval</code> configuration value, for CSP compatibility</li>
<li>Bug fixes &amp; improvements</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.0.2] - 2020-12-12</h2><a id="user-content-102---2020-12-12" aria-label="Permalink: [1.0.2] - 2020-12-12" href="#102---2020-12-12"></a></p>
<ul dir="auto">
<li>Extend all API methods to take a string selector as well as an element</li>
<li>Out of band swap elements need not be top level now</li>
<li><a href="https://htmx.org/attributes/hx-swap-oob" rel="nofollow"><code>hx-swap-oob</code></a> now can accept a CSS selector to retarget with</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.0.1] - 2020-12-04</h2><a id="user-content-101---2020-12-04" aria-label="Permalink: [1.0.1] - 2020-12-04" href="#101---2020-12-04"></a></p>
<ul dir="auto">
<li>AJAX file upload now correctly fires events, allowing for <a href="https://htmx.org/examples/file-upload" rel="nofollow">a proper progress bar</a></li>
<li>htmx api functions that expect an element now can accept a string selector instead:
<div dir="auto" data-snippet-clipboard-copy-content=" htmx.on('#form', 'htmx:xhr:progress', function(evt) {
   htmx.find('#progress').setAttribute('value', evt.detail.loaded/evt.detail.total * 100)
 });"><pre> <span>htmx</span><span>.</span><span>on</span><span>(</span><span>'#form'</span><span>,</span> <span>'htmx:xhr:progress'</span><span>,</span> <span>function</span><span>(</span><span>evt</span><span>)</span> <span>{</span>
   <span>htmx</span><span>.</span><span>find</span><span>(</span><span>'#progress'</span><span>)</span><span>.</span><span>setAttribute</span><span>(</span><span>'value'</span><span>,</span> <span>evt</span><span>.</span><span>detail</span><span>.</span><span>loaded</span><span>/</span><span>evt</span><span>.</span><span>detail</span><span>.</span><span>total</span> <span>*</span> <span>100</span><span>)</span>
 <span>}</span><span>)</span><span>;</span></pre></div>
</li>
<li>htmx now properly handles the <code>multiple</code> attribute on <code>&lt;select&gt;</code> elements</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[1.0.0] - 2020-11-24</h2><a id="user-content-100---2020-11-24" aria-label="Permalink: [1.0.0] - 2020-11-24" href="#100---2020-11-24"></a></p>
<ul dir="auto">
<li>Bumped the release version :)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.4.1] - 2020-11-23</h2><a id="user-content-041---2020-11-23" aria-label="Permalink: [0.4.1] - 2020-11-23" href="#041---2020-11-23"></a></p>
<ul dir="auto">
<li>Fixed bug with title tag support when title tag contained HTML entities</li>
<li>Pass properties for the <code>loadstart</code>, <code>loadend</code>, <code>progress</code>, <code>abort</code> events through properly to the htmx equivalents</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.4.0] - 2020-11-16</h2><a id="user-content-040---2020-11-16" aria-label="Permalink: [0.4.0] - 2020-11-16" href="#040---2020-11-16"></a></p>
<ul dir="auto">
<li>Now support the <code>HX-Redirect</code> and <code>HX-Refresh</code> response headers for redirecting client side and triggering a page refresh, respectively</li>
<li><code>hx-vars</code> now overrides input values</li>
<li><code>&lt;title&gt;</code> tags in responses will be used to update page titles</li>
<li>All uses of <code>eval()</code> have been removed in favor of <code>Function</code></li>
<li><a href="https://htmx.org/attributes/hx-vals" rel="nofollow"><code>hx-vals</code></a> is available as a safe alternative to <code>hx-vars</code>.  It uses <code>JSON.parse()</code> rather than evaluation, if you wish to safely pass user-provided values through to htmx.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.3.0] - 2020-10-27</h2><a id="user-content-030---2020-10-27" aria-label="Permalink: [0.3.0] - 2020-10-27" href="#030---2020-10-27"></a></p>
<ul dir="auto">
<li><code>hx-trigger</code> parsing has been rewritten and now supports <a href="https://htmx.org/docs/#trigger-filters" rel="nofollow">trigger filters</a> to filter
events based on arbitrary javascript expressions</li>
<li>htmx now supports two additional response headers <code>HX-Trigger-After-Swap</code> and <code>HX-Trigger-After-Settle</code> allowing
an event to be triggered after a given life cycle event (instead of before the swap)</li>
<li>The <code>requestConfig</code> is now passed out to events surrounding the AJAX life cycle</li>
<li>htmx now evaluates <code>&lt;script&gt;</code> tags as javascript when no language is defined on them</li>
<li>A new <a href="https://htmx.org/extensions/event-header" rel="nofollow"><code>event-header</code></a> extension, which will include a serialized JSON representation of the triggering event in requests</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.2.0] - 2020-9-30</h2><a id="user-content-020---2020-9-30" aria-label="Permalink: [0.2.0] - 2020-9-30" href="#020---2020-9-30"></a></p>
<ul dir="auto">
<li>AJAX file upload <a href="https://htmx.org/docs#files" rel="nofollow">support</a></li>
<li>The HTML validation API is <a href="https://htmx.org/docs#validation" rel="nofollow">respected</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.1.0] - 2020-9-18</h2><a id="user-content-010---2020-9-18" aria-label="Permalink: [0.1.0] - 2020-9-18" href="#010---2020-9-18"></a></p>
<ul dir="auto">
<li><em>BREAKING CHANGE</em>: The SSE attribute <a href="https://htmx.org/attributes/hx-sse/" rel="nofollow"><code>hx-sse</code></a> and the Web Sockets attribute <a href="https://htmx.org/attributes/hx-ws" rel="nofollow"><code>hx-ws</code></a> have changed syntax to now use colon separators: <code>hx-sse='connect:/chat swap:message'</code></li>
<li>The SSE attribute <a href="https://htmx.org/attributes/hx-sse/" rel="nofollow"><code>hx-sse</code></a> allows for swapping content directly on an event, in addition to triggering an htmx element,
with the new <code>swap:&lt;event name&gt;</code> syntax.</li>
<li><a href="https://htmx.org/attributes/hx-target" rel="nofollow"><code>hx-target</code></a> now supports a <code>find</code> syntax to find elements below the element by a CSS selector</li>
<li>htmx plays better with deferred loading and many package managers</li>
<li>All htmx events are dispatched in both camelCase as well as kebab-case, for better compatibility with AlpineJS and other frameworks.  (e.g. <code>htmx:afterOnLoad</code> will also be triggered as
<code>htmx:after-on-load</code>)</li>
<li><a href="https://hyperscript.org/" rel="nofollow">hypeerscript</a> is now initialized independently of htmx</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.0.8] - 2020-7-8</h2><a id="user-content-008---2020-7-8" aria-label="Permalink: [0.0.8] - 2020-7-8" href="#008---2020-7-8"></a></p>
<ul dir="auto">
<li>The <code>view</code> modifier on <code>hx-swap</code> has been renamed to <code>show</code>: <code>hx-swap='innerHTML show:top'</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.0.7] - 2020-6-30</h2><a id="user-content-007---2020-6-30" aria-label="Permalink: [0.0.7] - 2020-6-30" href="#007---2020-6-30"></a></p>
<ul dir="auto">
<li>The <a href="https://htmx.org/attributes/hx-swap" rel="nofollow"><code>hx-swap</code></a> attribute now supports two new modifiers:
<ul dir="auto">
<li><code>scroll</code> - allows you to scroll the target to the <code>top</code> or <code>bottom</code></li>
<li><code>view</code> - allows you to scroll the <code>top</code> or <code>bottom</code> of the target into view</li>
</ul>
</li>
<li>The <a href="https://htmx.org/attributes/hx-push-url" rel="nofollow"><code>hx-push-url</code></a> attribute now can optionally take a URL to push, in addition to <code>true</code> and <code>false</code></li>
<li>Added the <a href="https://htmx.org/attributes/hx-vars" rel="nofollow"><code>hx-vars</code></a> attribute that allows you to dynamically add to the parameters that will be submitted with a request</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.0.6] - 2020-6-20</h2><a id="user-content-006---2020-6-20" aria-label="Permalink: [0.0.6] - 2020-6-20" href="#006---2020-6-20"></a></p>
<ul dir="auto">
<li>Custom request/response headers no longer start with the <code>X-</code> prefix, which is no longer recommended</li>
<li>empty verb attributes are now allowed and follow the anchor tag semantics (e.g. <code>&lt;div hx-get&gt;&lt;/div&gt;</code>)</li>
<li>nunjuks inline rendering is now supported in the <code>client-side-templates</code> extension</li>
<li>the new <code>ajax-header</code> extension includes the <code>X-Requested-With</code> header</li>
<li>bad JSON is now handled more gracefully</li>
<li><code>hx-swap="none"</code> will cause no swap to take place <a data-error-text="Failed to load title" data-id="636558621" data-permission-text="Title is private" data-url="https://github.com/bigskysoftware/htmx/issues/89" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/89/hovercard" href="https://github.com/bigskysoftware/htmx/issues/89">#89</a></li>
<li><code>hx-trigger</code> now supports a <code>throttle</code> modifier <a data-error-text="Failed to load title" data-id="636555082" data-permission-text="Title is private" data-url="https://github.com/bigskysoftware/htmx/issues/88" data-hovercard-type="issue" data-hovercard-url="/bigskysoftware/htmx/issues/88/hovercard" href="https://github.com/bigskysoftware/htmx/issues/88">#88</a></li>
<li>the focused element is preserved if possible after a replacement</li>
<li>perf improvements for large DOM trees with sparse <code>hx-</code> annotations</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.0.4] - 2020-5-24</h2><a id="user-content-004---2020-5-24" aria-label="Permalink: [0.0.4] - 2020-5-24" href="#004---2020-5-24"></a></p>
<ul dir="auto">
<li>Extension mechanism added</li>
<li>SSE support added</li>
<li>WebSocket support added</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.0.3] - 2020-5-17</h2><a id="user-content-003---2020-5-17" aria-label="Permalink: [0.0.3] - 2020-5-17" href="#003---2020-5-17"></a></p>
<ul dir="auto">
<li>Renamed to htmx</li>
<li>A bug fix for the <code>hx-prompt</code> attribute</li>
<li>A bug fix for multiple <code>hx-swap-oob</code> attributes</li>
<li>Moved the default CSS indicator injection into its own sheet to avoid breaking</li>
<li>Added the <code>htmx.config.includeIndicatorStyles</code> configuration option so people can opt out of injecting the indicator CSS</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">[0.0.1] - 2020-5-15</h2><a id="user-content-001---2020-5-15" aria-label="Permalink: [0.0.1] - 2020-5-15" href="#001---2020-5-15"></a></p>
<ul dir="auto">
<li>Initial release (originally named kutty)</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[macOS 15.2 breaks the ability to copy the OS to another drive (222 pts)]]></title>
            <link>https://www.shirtpocket.com/blog/index.php/shadedgrey/youre_a_mean_one/</link>
            <guid>42413757</guid>
            <pubDate>Sat, 14 Dec 2024 01:04:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.shirtpocket.com/blog/index.php/shadedgrey/youre_a_mean_one/">https://www.shirtpocket.com/blog/index.php/shadedgrey/youre_a_mean_one/</a>, See on <a href="https://news.ycombinator.com/item?id=42413757">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><em><a href="https://www.shirtpocket.com/blog/index.php/shadedgrey/comments/youre_a_mean_one/">You’re a Mean One</a></em> Friday, December 13, 2024 </p></div><div>

<p>macOS 15.2 was released a few days ago, with a surprise. A terrible, awful surprise.</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/oUUdW2bTa3Y?si=jBClddjKqYf7jqLu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>Apple broke the replicator. Towards the end of replicating the Data volume, seemingly when it's about to copy either Preboot or Recovery, it fails with a <strong>Resource Busy</strong> error.</p>

<p>In the past, <strong>Resource Busy</strong> could be worked around by ensuring the system was kept awake. But this new bug means, on most systems, there's no fix. It just fails.</p>

<h3>Puppet on Strings</h3>

<p>Since Apple took away the ability for 3rd parties (eg, us) to copy the OS, and took on the responsibility themselves, it's been up to them to ensure this functionality continues to work. And in that, they've failed in macOS 15.2.</p>

<p>Because this is their code, and we're forced to rely on it to copy the OS, OS copying will not work until they fix it.</p>

<p>To put it bluntly, this sucks. It's bad enough we have to work around other bugs in this code, but when it breaks completely, we're stuck pointing fingers and offering workarounds that don't involve the replicator.</p>

<h3>Workaround Runaround Redux</h3>

<p>What this means is this: until Apple fixes the bug, you'll have to use "Backup - all files" with "Smart Update" to copy everything but the OS.</p>

<p>This backup, as I've explained before, has all your stuff: applications, data, settings, etc. The System volume (the OS, effectively), is read-only and you can't change it. So a clean install brings it back exactly as it was...and then you can restore when prompted during first boot.</p>

<h3>We Know This Sucks</h3>

<p>The section title says it all. I know. This sucks. We think it sucks. You think it sucks. But we can't fix it: Apple has to do so.</p>

<p>For those who may be working for Apple, or have good contacts, the bug is FB16090831. A fix would be really helpful, folks.</p>

<h3>Happy Holidays</h3>

<p>It's unfortunate this is happening during this period, since Apple rarely releases updates between now and New Year's.</p>

<p>I sincerely hope you'll be having a better Holiday Season than I am about to have, with fewer emails and more fun.</p>

<p>Thanks for using SuperDuper, and thanks for your understanding.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Luon programming language (104 pts)]]></title>
            <link>https://github.com/rochus-keller/Luon/blob/master/Readme.md</link>
            <guid>42413343</guid>
            <pubDate>Fri, 13 Dec 2024 23:37:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/rochus-keller/Luon/blob/master/Readme.md">https://github.com/rochus-keller/Luon/blob/master/Readme.md</a>, See on <a href="https://news.ycombinator.com/item?id=42413343">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a23297ec362f4920d47ecc5869aee3773ca25ff3ee2cf7c07be4f6bf0b90f8e9/687474703a2f2f736f6674776172652e726f636875732d6b656c6c65722e63682f6c756f6e5f6c6f676f5f323030783133302e706e67"><img src="https://camo.githubusercontent.com/a23297ec362f4920d47ecc5869aee3773ca25ff3ee2cf7c07be4f6bf0b90f8e9/687474703a2f2f736f6674776172652e726f636875732d6b656c6c65722e63682f6c756f6e5f6c6f676f5f323030783133302e706e67" alt="Logo" data-canonical-src="http://software.rochus-keller.ch/luon_logo_200x130.png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Welcome to the Luon Programming Language</h2><a id="user-content-welcome-to-the-luon-programming-language" aria-label="Permalink: Welcome to the Luon Programming Language" href="#welcome-to-the-luon-programming-language"></a></p>
<p dir="auto">Luon is a high-level programming language with a syntax similar to <a href="https://github.com/rochus-keller/oberon/">Oberon+</a>, Oberon-07 and Oberon-2, integrating concepts from Lua, and targeting the LuaJIT VM. Luon can be regarded as a statically typed version of Lua. The name is thus a combination of "Lua" and "Oberon".</p>
<p dir="auto">Luon procedures can be declared "external" and be implemented in Lua. This allows the re-use of libraries written in Lua, and also C libraries via
the LuaJIT foreign function interface.</p>
<p dir="auto">The language specification can be found in the <a href="https://github.com/rochus-keller/Luon/tree/master/specification">specification subdirectory</a>.
See also the code examples below.</p>
<p dir="auto">The project is the result of the author's experience with the <a href="https://github.com/rochus-keller/Smalltalk/">Smalltalk-80</a> and <a href="https://github.com/rochus-keller/Som/">SOM VM</a> implementation, and the prospect to build a <a href="https://github.com/rochus-keller/Gingko/">LuaJIT based Interlisp VM</a>.</p>
<p dir="auto">In contrast to Oberon+, Luon doesn't have pointers, but instead all structured datatypes have reference semantics and are dynamically created. In addition to the ARRAY type, there is also a HASHMAP type for compatibility with Lua. There is also a STRING data type which - like Lua - is immutable and follows a value semantics.</p>
<p dir="auto">In particular, Luon solves the following Lua shortcomings recognized during the aforementioned projects:</p>
<ul dir="auto">
<li>conditional compilation to enable or disable statements only used for debugging and to avoid wasting calculation time</li>
<li>constants not requiring local slots or hashed element access</li>
<li>explicit inline declaration, so the code can be better structured without additional context
switches and slot consumption</li>
<li>no implicit global declarations, and other means to detect as many errors as possible during compile time</li>
<li>locals can no longer be used before declaration</li>
<li>switch/case control statement to avoid writing the relation expression all over again</li>
</ul>
<p dir="auto">This project implements a compiler and IDE for the Luon programming language. Representative example projects demonstrating the
capabilities of the language and the IDE can be found in the <a href="https://github.com/rochus-keller/Luon/tree/master/testcases/">testcases subdirectory</a>.</p>
<p dir="auto">Here is a screenshot of the IDE:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b36d0d0e54171fe3534c92f705581ba3dbd79da18a812e2e71bd78aac4080ef9/687474703a2f2f736f6674776172652e726f636875732d6b656c6c65722e63682f6c756f6e2d6964652d73637265656e73686f742d302e372e302d312e706e67"><img src="https://camo.githubusercontent.com/b36d0d0e54171fe3534c92f705581ba3dbd79da18a812e2e71bd78aac4080ef9/687474703a2f2f736f6674776172652e726f636875732d6b656c6c65722e63682f6c756f6e2d6964652d73637265656e73686f742d302e372e302d312e706e67" alt="IDE Screenshot 1" data-canonical-src="http://software.rochus-keller.ch/luon-ide-screenshot-0.7.0-1.png"></a></p>
<p dir="auto">And here is the source-level debugger of the IDE:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0f2996c7901d0807b60a9d66738643c8b36ffaf67d9025da37d2d7e130a09507/687474703a2f2f736f6674776172652e726f636875732d6b656c6c65722e63682f6c756f6e2d6964652d73637265656e73686f742d302e372e302d322e706e67"><img src="https://camo.githubusercontent.com/0f2996c7901d0807b60a9d66738643c8b36ffaf67d9025da37d2d7e130a09507/687474703a2f2f736f6674776172652e726f636875732d6b656c6c65722e63682f6c756f6e2d6964652d73637265656e73686f742d302e372e302d322e706e67" alt="IDE Screenshot 2" data-canonical-src="http://software.rochus-keller.ch/luon-ide-screenshot-0.7.0-2.png"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Code examples</h3><a id="user-content-code-examples" aria-label="Permalink: Code examples" href="#code-examples"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Procedural Programming</h5><a id="user-content-procedural-programming" aria-label="Permalink: Procedural Programming" href="#procedural-programming"></a></p>
<div data-snippet-clipboard-copy-content="module Fibonacci
  proc calc*(n : integer): integer
    var a, b, i, next: integer // comma is optional
  begin
   <* if use_recursion then *>
    if n > 1 then 
      a := calc(n - 1)
      b := calc(n - 2)
      return a + b
    elsif n = 0 then return 0
    else return 1
    end
   <* else *>
    b := 1
    for i := 0 to n-1 do
      next := a + b
      a := b
      b := next
    end
    return a
   <* end *>
  end calc
  var res: integer
begin
  res := calc(21)
  assert(res = 10946)
  print(&quot;Fibonaccy result: &quot;)
  println(res)
end Fibonacci
"><pre><code>module Fibonacci
  proc calc*(n : integer): integer
    var a, b, i, next: integer // comma is optional
  begin
   &lt;* if use_recursion then *&gt;
    if n &gt; 1 then 
      a := calc(n - 1)
      b := calc(n - 2)
      return a + b
    elsif n = 0 then return 0
    else return 1
    end
   &lt;* else *&gt;
    b := 1
    for i := 0 to n-1 do
      next := a + b
      a := b
      b := next
    end
    return a
   &lt;* end *&gt;
  end calc
  var res: integer
begin
  res := calc(21)
  assert(res = 10946)
  print("Fibonaccy result: ")
  println(res)
end Fibonacci

</code></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">Generic Programming</h5><a id="user-content-generic-programming" aria-label="Permalink: Generic Programming" href="#generic-programming"></a></p>
<div data-snippet-clipboard-copy-content="module Collections(T) 
  type Deque* = record data: array of T
                      size: integer end
                      
  proc createDeque*(): Deque 
    const initial_len = 1_000 // separators
    var this: Deque  // this is initialized to nil
  begin 
    new(this); 
    new(this.data,initial_len) 
    return this 
    // this and data will be garbage collected
  end createDeque
  
  proc (this: Deque) append*(element: T)
  begin 
    if this.size = len(this.data) then assert(false) end
    this.data[this.size] := element inc(this.size) 
  end append
  
  type Iterator* = record end
  proc (this: Iterator) apply*(element: T) end
  
  proc (this: Deque) forEach*(iter: Iterator)
    var i: integer; val: T
  begin 
    for i := 0 to this.size-1 do 
      iter.apply(this.data[i]) 
    end
  end forEach
end Collections"><pre><code>module Collections(T) 
  type Deque* = record data: array of T
                      size: integer end
                      
  proc createDeque*(): Deque 
    const initial_len = 1_000 // separators
    var this: Deque  // this is initialized to nil
  begin 
    new(this); 
    new(this.data,initial_len) 
    return this 
    // this and data will be garbage collected
  end createDeque
  
  proc (this: Deque) append*(element: T)
  begin 
    if this.size = len(this.data) then assert(false) end
    this.data[this.size] := element inc(this.size) 
  end append
  
  type Iterator* = record end
  proc (this: Iterator) apply*(element: T) end
  
  proc (this: Deque) forEach*(iter: Iterator)
    var i: integer; val: T
  begin 
    for i := 0 to this.size-1 do 
      iter.apply(this.data[i]) 
    end
  end forEach
end Collections
</code></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">Object Oriented Programming</h5><a id="user-content-object-oriented-programming" aria-label="Permalink: Object Oriented Programming" href="#object-oriented-programming"></a></p>
<div data-snippet-clipboard-copy-content="module Drawing
  import F := Fibonacci
         C := Collections(Figure)
  
  type Figure* = record position: record 
                     x,y: integer end end  
  proc (this: Figure) draw*() end
    
  type
    Circle* = record (Figure) diameter: integer end
    Square* = record (Figure) width: integer end 
    proc (this: Circle) draw*() end
    proc (this: Square) draw*() end
        
  var figures: C.Deque
      circle: Circle
      square: Square
    
  proc drawAll()
    type I = record(C.Iterator) count: integer end
    proc (this: I) apply( figure: Figure ) 
    begin 
      figure.draw(); inc(this.count) 
    end apply
    var i: I // count is initialized to zero
  begin
    new(i)
    figures.forEach(i)
    assert(i.count = 2)
    println(&quot;drawing done&quot;)
  end drawAll
  
begin 
  figures := C.createDeque()
  // use constructors instead of new:
  circle := { { F.calc(3), F.calc(4) }, diameter: 3 }
  figures.append(circle)
  square := { { x: F.calc(5), y: F.calc(6) }, 4 }
  figures.append(square)
  drawAll()
end Drawing  "><pre><code>module Drawing
  import F := Fibonacci
         C := Collections(Figure)
  
  type Figure* = record position: record 
                     x,y: integer end end  
  proc (this: Figure) draw*() end
    
  type
    Circle* = record (Figure) diameter: integer end
    Square* = record (Figure) width: integer end 
    proc (this: Circle) draw*() end
    proc (this: Square) draw*() end
        
  var figures: C.Deque
      circle: Circle
      square: Square
    
  proc drawAll()
    type I = record(C.Iterator) count: integer end
    proc (this: I) apply( figure: Figure ) 
    begin 
      figure.draw(); inc(this.count) 
    end apply
    var i: I // count is initialized to zero
  begin
    new(i)
    figures.forEach(i)
    assert(i.count = 2)
    println("drawing done")
  end drawAll
  
begin 
  figures := C.createDeque()
  // use constructors instead of new:
  circle := { { F.calc(3), F.calc(4) }, diameter: 3 }
  figures.append(circle)
  square := { { x: F.calc(5), y: F.calc(6) }, 4 }
  figures.append(square)
  drawAll()
end Drawing  
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Planned features</h3><a id="user-content-planned-features" aria-label="Permalink: Planned features" href="#planned-features"></a></p>
<ul>
<li> Implement lexer with directive support</li>
<li> Implement parser and AST</li>
<li> Implement semantic validator</li>
<li> Implement a LuaJIT backend based on LjTools</li>
<li> Implement an IDE similar to the Oberon+ IDE</li>
<li> Document the language (specification is available)</li>
<li> Migrate the Smalltalk-80 VM to Luon as a proof-of-concept and to optimize the language</li>
<li> BUSY build and precompiled versions for some platforms</li>
<li> Migrate PAL2 from C to Lua, fix BitBlt, separate deployment</li>
<li> Complete the language implementation according to the specification (inline, invar, pcall, visibility, etc.)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Development history</h3><a id="user-content-development-history" aria-label="Permalink: Development history" href="#development-history"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on October 14, 2024</h5><a id="user-content-status-on-october-14-2024" aria-label="Permalink: Status on October 14, 2024" href="#status-on-october-14-2024"></a></p>
<p dir="auto">Derived the syntax from Oberon+ and Micron and generated a parser using <a href="https://github.com/micron-language/specification/blob/master/Micron_Programming_Language.ebnf">the grammar</a> and adopted the lexer from <a href="https://github.com/rochus-keller/Micron">the Micron project</a>. The parser is able to successfully read the ongoing Luon migration of the
<a href="https://github.com/rochus-keller/Are-we-fast-yet/tree/main/Luon">Are-we-fast-yet benchmark suite</a> (not yet commited).</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on October 15, 2024</h5><a id="user-content-status-on-october-15-2024" aria-label="Permalink: Status on October 15, 2024" href="#status-on-october-15-2024"></a></p>
<p dir="auto">Adopted the AST infrastructure from Micron and extended the AST for full program coverage.
Implemented a recursive descent parser (modified the one generated  by <a href="https://github.com/rochus-keller/EbnfStudio">EbnfStudio</a>) which generates the AST.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on October 16, 2024</h5><a id="user-content-status-on-october-16-2024" aria-label="Permalink: Status on October 16, 2024" href="#status-on-october-16-2024"></a></p>
<p dir="auto">Improved language: constructors generate object, extended for arrays and hashmaps; extra set constructor no longer needed. Can generate AST for ongoing AWFY with no memory leaks.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on October 25, 2024</h5><a id="user-content-status-on-october-25-2024" aria-label="Permalink: Status on October 25, 2024" href="#status-on-october-25-2024"></a></p>
<p dir="auto">The semantic validator is complete and tested. I developed it in parallel with <a href="https://github.com/rochus-keller/Are-we-fast-yet/tree/main/Luon">the Luon version of the Are-we-fast-yet benchmark suite</a>. Some refactorings and language changes were necessary. As in Oberon-07, there is now only one INTEGER and REAL type, the former with 53 bits of precision. The validator was feature complete on October 22, so development took six, and testing and debugging three calendar days.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on October 27, 2024</h5><a id="user-content-status-on-october-27-2024" aria-label="Permalink: Status on October 27, 2024" href="#status-on-october-27-2024"></a></p>
<p dir="auto">The IDE is ready for testing and debugging. I derived it from the LuaJIT version of the Oberon IDE, but many changes were necessary because the AST and code model are completely different. This included an optional cross-referencing infrastructure integrated with the validator. Also the import logic had to be extended for compatibility with the project file concept, which required refactoring of AST, parser and validator.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on November 05, 2024</h5><a id="user-content-status-on-november-05-2024" aria-label="Permalink: Status on November 05, 2024" href="#status-on-november-05-2024"></a></p>
<p dir="auto">The LuaJIT bytecode generator including most built-in procedures is complete and ready for testing and debugging. All functions of the LuonFfi.c file
were migrated to LUON.lua to avoid C dependencies. Added Oakwood implementations in Lua (Files is no longer Oakwood compatible).</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on November 09, 2024</h5><a id="user-content-status-on-november-09-2024" aria-label="Permalink: Status on November 09, 2024" href="#status-on-november-09-2024"></a></p>
<p dir="auto">After a lot of testing, debugging and fixes the generated code seems to be sufficiently correct for the moment to continue with other stuff. The testcases
in the all.lnpro project, which I migrated from Oberon+ ("features" subfolder), work, which covers most aspect of the language. I also
implemented delegates and the copy() builtin, and made some other language changes (e.g. := no longer copies char arrays by value). Next goal is
to run the Luon Awfy suite.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on November 13, 2024</h5><a id="user-content-status-on-november-13-2024" aria-label="Permalink: Status on November 13, 2024" href="#status-on-november-13-2024"></a></p>
<p dir="auto">The Luon Are-we-fast-yet suite works up to Json; a significant refactoring of the code generator was necessary for this to properly intitialize all
class objects up-front; the performance is currently slightly (1%) better than Lua, and there is room for improvement. Now after a calendar month
in the project, the compiler and IDE seem ready for implementing a Smalltalk VM, so let's go for it.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on November 26, 2024</h5><a id="user-content-status-on-november-26-2024" aria-label="Permalink: Status on November 26, 2024" href="#status-on-november-26-2024"></a></p>
<p dir="auto">All benchmarks of the Luon Are-we-fast-yet suite now work and show a performance equal to the Lua on LuaJIT version of the benchmark. The debugger has been significantly improved. The BYTE type and TOSTRING builtin have been added to the language.
The Project Oberon System has been migrated to Luon; the code works so far, but for correct display output many changes would be required (maybe in future).
The Smalltalk VM is work in progress and expected to be complete in a week. Both compiler and IDE are used to implement the Smalltalk VM and have proved to be useful so far.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on December 1. 2024</h5><a id="user-content-status-on-december-1-2024" aria-label="Permalink: Status on December 1. 2024" href="#status-on-december-1-2024"></a></p>
<p dir="auto">The migration of <a href="https://github.com/rochus-keller/Smalltalk/blob/master/Smalltalk.lnpro">the Luon implementation of the Smalltalk VM</a> (see for *.luon and *.lnpro) is complete. I migrated the C++ version with a few architectural changes. In contrast to the C++ version which uses Qt, this version uses SDL2 via LuaJIT FFI. It is also an example how the EXTERN keyword works, i.e. how the external implementations are provided. Now the debugging starts; wish me luck ;-)</p>
<p dir="auto">Meanwhile also <a href="https://github.com/rochus-keller/Luon/tree/master/specification">the Luon specification</a> is available, though not all features are yet implemented.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on December 8. 2024</h5><a id="user-content-status-on-december-8-2024" aria-label="Permalink: Status on December 8. 2024" href="#status-on-december-8-2024"></a></p>
<p dir="auto">The ST-80 display representation works, but only with the C version of the BitBlt so far. Also added a Qt version of the PAL to ease debugging. Extended the language (KEYS function) and made other hasmap fixes. The ST VM requires still more debugging.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on December 10. 2024</h5><a id="user-content-status-on-december-10-2024" aria-label="Permalink: Status on December 10. 2024" href="#status-on-december-10-2024"></a></p>
<p dir="auto">The Smalltalk-80 VM implemented in Luon works (with a few issues WIP), with both the SDL2 and Qt based PAL. Added the source code of the VM as
a local testcase and demonstration to the Luon repository (as a copy of the corresponding files in the Smalltalk repository).
The same applies to the Are-we-fast-yet implementation. The project is close to an MVP release.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Status on December 12. 2024</h5><a id="user-content-status-on-december-12-2024" aria-label="Permalink: Status on December 12. 2024" href="#status-on-december-12-2024"></a></p>
<p dir="auto">With only a few changes, the IDE and demo projects also work on Windows. Provided precompiled packages for a few platforms. LuaJIT is statically linked
on all platforms. MVP release.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Precompiled versions</h3><a id="user-content-precompiled-versions" aria-label="Permalink: Precompiled versions" href="#precompiled-versions"></a></p>
<p dir="auto">The following precompiled versions are available at this time:</p>
<ul dir="auto">
<li><a href="http://software.rochus-keller.ch/LuonIDE_linux_i386.tar.gz" rel="nofollow">Linux x86</a></li>
<li><a href="http://software.rochus-keller.ch/LuonIDE_linux_x64.tar.gz" rel="nofollow">Linux x86_64</a></li>
<li><a href="http://software.rochus-keller.ch/LuonIDE_win32.zip" rel="nofollow">Windows x86</a></li>
</ul>
<p dir="auto">Just download and unpack the compressed file to a directory. Start the IDE by double clicking on the LuonIDE executable. The specification and some demonstration projects are included.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">How to build</h3><a id="user-content-how-to-build" aria-label="Permalink: How to build" href="#how-to-build"></a></p>
<p dir="auto">Follow these steps if you want to build the Luon IDE yourself. The build is using LeanQt and the BUSY build system. Note that compiling on Linux requires the build essentials, xcb, libxcb1-dev and libx11-dev packages. On Mac and Windows there are no additional requirements than a toolchain.</p>
<ol dir="auto">
<li>Create a new directory; we call it the root directory here</li>
<li>Download <a href="https://github.com/rochus-keller/Luon/archive/refs/heads/master.zip">https://github.com/rochus-keller/Luon/archive/refs/heads/master.zip</a> and unpack it to the root directory; rename the resulting directory to "Oberon".</li>
<li>Download <a href="https://github.com/rochus-keller/LuaJIT/archive/refs/heads/LjTools.zip">https://github.com/rochus-keller/LuaJIT/archive/refs/heads/LjTools.zip</a> and unpack it to the root directory; rename the resulting directory to "LuaJIT".</li>
<li>Download <a href="https://github.com/rochus-keller/LjTools/archive/refs/heads/master.zip">https://github.com/rochus-keller/LjTools/archive/refs/heads/master.zip</a> and unpack it to the root directory; rename the resulting directory to "MonoTools".</li>
<li>Download <a href="https://github.com/rochus-keller/GuiTools/archive/refs/heads/master.zip">https://github.com/rochus-keller/GuiTools/archive/refs/heads/master.zip</a> and unpack it to the root directory; rename the resulting directory to "GuiTools".</li>
<li>Download <a href="https://github.com/rochus-keller/LeanQt/archive/refs/heads/master.zip">https://github.com/rochus-keller/LeanQt/archive/refs/heads/master.zip</a> and unpack it to the root directory; rename the resulting directory to "LeanQt".</li>
<li>Download <a href="https://github.com/rochus-keller/BUSY/archive/refs/heads/master.zip">https://github.com/rochus-keller/BUSY/archive/refs/heads/master.zip</a> and unpack it to the root directory; rename the resulting directory to "build".</li>
<li>Open a command line in the "LuaJIT" directory and follow the instructions there to build LuaJIT for your platform.</li>
<li>Open a command line in the "build" directory and type <code>cc *.c -O2 -lm -o lua</code> or <code>cl /O2 /MD /Fe:lua.exe *.c</code> depending on whether you are on a Unix or Windows machine; wait a few seconds until the Lua executable is built.</li>
<li>Now type <code>./lua build.lua ../Luon</code> (or <code>lua build.lua ../Luon</code> on Windows); wait until the LuonIDE executable is built; you find it in the output subdirectory.</li>
</ol>
<p dir="auto">Instead of the command line you can run the build using <a href="https://github.com/rochus-keller/LeanCreator">LeanCreator</a> which uses multiple cores and thus builds faster.</p>
<p dir="auto">It is still possible to build the IDE using Qt 5 with qmake; use LnIde.pro for this purpose and proceed as usual when building with Qt.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Support</h3><a id="user-content-support" aria-label="Permalink: Support" href="#support"></a></p>
<p dir="auto">If you need support or would like to post issues or feature requests please use the Github issue list at <a href="https://github.com/rochus-keller/Luon/issues">https://github.com/rochus-keller/Luon/issues</a> or send an email to the author.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">License</h3><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Luon is available under GPL 2 or 3. The runtime libraries in the runtime subfolder, in addition, are available under MPL or LGPL.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Additional Credits</h3><a id="user-content-additional-credits" aria-label="Permalink: Additional Credits" href="#additional-credits"></a></p>
<ul dir="auto">
<li><a href="http://luajit.org/" rel="nofollow">LuaJIT</a> is Copyright © 2005-2023 Mike Pall, released under the MIT open source license.</li>
<li><a href="https://github.com/rochus-keller/LeanQt">LeanQt</a> is based on Qt, which is Copyright (C) 2016 by The Qt Company Ltd, 2008 by Nokia Corporation and/or its subsidiary(-ies), 1992-2005 by Trolltech AS, and many individual contributors around the world.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI whistleblower found dead in apartment (116 pts)]]></title>
            <link>https://old.reddit.com/r/sanfrancisco/comments/1hdmn62/openai_whistleblower_suchir_balaji_found_dead_in/</link>
            <guid>42413195</guid>
            <pubDate>Fri, 13 Dec 2024 23:14:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/sanfrancisco/comments/1hdmn62/openai_whistleblower_suchir_balaji_found_dead_in/">https://old.reddit.com/r/sanfrancisco/comments/1hdmn62/openai_whistleblower_suchir_balaji_found_dead_in/</a>, See on <a href="https://news.ycombinator.com/item?id=42413195">Hacker News</a></p>
Couldn't get https://old.reddit.com/r/sanfrancisco/comments/1hdmn62/openai_whistleblower_suchir_balaji_found_dead_in/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[McKinsey and Company to pay $650M for role in opioid crisis (206 pts)]]></title>
            <link>https://www.npr.org/2024/12/13/nx-s1-5155962/mckinsey-purdue-opioid-prosecution-doj</link>
            <guid>42413086</guid>
            <pubDate>Fri, 13 Dec 2024 22:57:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.npr.org/2024/12/13/nx-s1-5155962/mckinsey-purdue-opioid-prosecution-doj">https://www.npr.org/2024/12/13/nx-s1-5155962/mckinsey-purdue-opioid-prosecution-doj</a>, See on <a href="https://news.ycombinator.com/item?id=42413086">Hacker News</a></p>
Couldn't get https://www.npr.org/2024/12/13/nx-s1-5155962/mckinsey-purdue-opioid-prosecution-doj: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI whistleblower found dead in San Francisco apartment (502 pts)]]></title>
            <link>https://www.mercurynews.com/2024/12/13/openai-whistleblower-found-dead-in-san-francisco-apartment/</link>
            <guid>42412718</guid>
            <pubDate>Fri, 13 Dec 2024 21:56:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.mercurynews.com/2024/12/13/openai-whistleblower-found-dead-in-san-francisco-apartment/">https://www.mercurynews.com/2024/12/13/openai-whistleblower-found-dead-in-san-francisco-apartment/</a>, See on <a href="https://news.ycombinator.com/item?id=42412718">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>SAN FRANCISCO — A former OpenAI researcher known for whistleblowing&nbsp;the blockbuster artificial intelligence company facing <a href="https://www.mercurynews.com/2024/04/30/mercury-news-and-other-papers-sue-microsoft-openai-over-the-new-artificial-intelligence/" target="_blank" rel="noopener">a swell of lawsuits over its business model</a>&nbsp;has died, authorities confirmed this week.</p><p>Suchir Balaji, 26, was found dead inside his Buchanan Street apartment on Nov. 26, San Francisco police and the Office of the Chief Medical Examiner said. Police had been called to the Lower Haight residence at about 1 p.m. that day, after receiving a call asking officers to check on his well-being, a police spokesperson said.</p><figure id="attachment_11311118"><img decoding="async" src="https://i0.wp.com/www.mercurynews.com/wp-content/uploads/2024/12/SJM-L-OPENAI-1213-2.jpg?fit=620%2C9999px&amp;ssl=1" alt="Suchir Balaji, a former OpenAi employee, in San Francisco, on Oct. 3, 2024. Balaji helped gather and organize the enormous amounts of internet data used to train the startup's ChatGPT chatbot. (Ulysses Ortega/The New York Times)" width="3000" data-sizes="auto" data-src="https://i0.wp.com/www.mercurynews.com/wp-content/uploads/2024/12/SJM-L-OPENAI-1213-2.jpg?fit=620%2C9999px&amp;ssl=1" data-attachment-id="11311118" data-srcset="https://i0.wp.com/www.mercurynews.com/wp-content/uploads/2024/12/SJM-L-OPENAI-1213-2.jpg?fit=620%2C9999px&amp;ssl=1 620w,https://i0.wp.com/www.mercurynews.com/wp-content/uploads/2024/12/SJM-L-OPENAI-1213-2.jpg?fit=210%2C9999px&amp;ssl=1 210w"><figcaption>Suchir Balaji, a former OpenAi employee, in San Francisco, on Oct. 3, 2024. Balaji helped gather and organize the enormous amounts of internet data used to train the startup’s ChatGPT chatbot. (Ulysses Ortega/The New York Times)&nbsp;</figcaption></figure><p>The medical examiner’s office has not released his cause of death, but police officials this week said there is “currently, no evidence of foul play.”</p><p>Information he held was expected to play a key part in lawsuits against the San Francisco-based company.</p><p>Balaji’s death comes three months after he publicly accused OpenAI of violating U.S. copyright law while developing ChatGPT, a generative artificial intelligence program that has become a moneymaking sensation used by hundreds of millions of people across the world.</p><p>Its public release in late 2022 spurred a torrent of lawsuits against OpenAI from authors, computer programmers and journalists, who say the company illegally stole <a href="https://www.mercurynews.com/2023/06/18/new-artificial-intelligence-will-silicon-valley-ride-again-to-riches-on-other-peoples-products/" target="_blank" rel="noopener">their copyrighted material to train its program</a> and elevate its value past $150 billion.</p><p>The Mercury News and seven sister news outlets are among several newspapers, including the New York Times, to sue OpenAI in the past year.</p><p>In <a href="https://www.nytimes.com/2024/10/23/technology/openai-copyright-law.html" target="_blank" rel="noopener">an interview with the New York Times</a> published Oct. 23, Balaji argued OpenAI was harming businesses and entrepreneurs whose data were used to train ChatGPT.</p><p>“If you believe what I believe, you have to just leave the company,” he told the outlet, adding that “this is not a sustainable model for the internet ecosystem as a whole.”</p><p>Balaji grew up in Cupertino before attending UC Berkeley to study computer science. It was then he became a believer in the potential benefits that artificial intelligence could offer society, including its ability to cure diseases and stop aging, the Times reported. “I thought we could invent some kind of scientist that could help solve them,” he told the newspaper.</p><p>But his outlook began to sour in 2022, two years after joining OpenAI as a researcher. He grew particularly concerned about his assignment of gathering data from the internet for the company’s GPT-4 program, which analyzed text from nearly the entire internet to train its artificial intelligence program, the news outlet reported.</p><p>The practice, he told the Times, ran afoul of the country’s “fair use” laws governing how people can use previously published work. In late October, he posted <a href="https://suchir.net/fair_use.html" target="_blank" rel="noopener">an analysis on his personal website</a> arguing that point.</p><p>No known factors “seem to weigh in favor of ChatGPT being a fair use of its training data,” Balaji wrote. “That being said, none of the arguments here are fundamentally specific to ChatGPT either, and similar arguments could be made for many generative AI products in a wide variety of domains.”</p><p>Reached by this news agency, Balaji’s mother requested privacy while grieving the death of her son.</p><p>In a Nov. 18 letter filed in federal court, attorneys for The New York Times named Balaji as someone who had “unique and relevant documents” that would support their case against OpenAI. He was among at least 12 people — many of them past or present OpenAI employees — the newspaper had named in court filings as having material helpful to their case, ahead of depositions.</p><p>Generative artificial intelligence programs work by <a href="https://www.mercurynews.com/2023/04/25/chatbots-and-the-new-ai-what-will-silicon-valley-unleash-upon-the-world-this-time/" target="_blank" rel="noopener">analyzing an immense amount of data from the internet</a> and using it to answer prompts submitted by users, or to create text, images or videos.</p><p>When OpenAI released its ChatGPT program in late 2022, it turbocharged an industry of companies seeking to write essays, make art and create computer code. Many of the most valuable companies in the world now work in the field&nbsp;of artificial intelligence, or manufacture the computer chips needed to run those programs. OpenAI’s own value nearly doubled in the past year.</p><p>News outlets have argued that OpenAI and Microsoft — which is in business with OpenAI also has been sued by The Mercury News — have plagiarized and stole its articles, undermining their business models.</p><p>“Microsoft and OpenAI simply take the work product of reporters, journalists, editorial writers, editors and others who contribute to the work of local newspapers — all without any regard for the efforts, much less the legal rights, of those who create and publish the news on which local communities rely,” the newspapers’ lawsuit said.</p><p>OpenAI has staunchly refuted those claims, stressing that all of its work remains legal under “fair use” laws.</p><p>“We see immense potential for AI tools like ChatGPT to deepen publishers’ relationships with readers and enhance the news experience,” the company said when the lawsuit was filed.</p><p><em>Jakob Rodgers is a senior breaking news reporter. Call, text or send him an encrypted message via Signal at 510-390-2351, or email him at jrodgers@bayareanewsgroup.com.</em></p>

			<p>Originally Published: <time datetime="2024-12-13 13:12:51">December 13, 2024 at 1:12 PM PST</time></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sharing new research, models, and datasets from Meta FAIR (208 pts)]]></title>
            <link>https://ai.meta.com/blog/meta-fair-updates-agents-robustness-safety-architecture/?_fb_noscript=1</link>
            <guid>42412360</guid>
            <pubDate>Fri, 13 Dec 2024 21:07:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.meta.com/blog/meta-fair-updates-agents-robustness-safety-architecture/?_fb_noscript=1">https://ai.meta.com/blog/meta-fair-updates-agents-robustness-safety-architecture/?_fb_noscript=1</a>, See on <a href="https://news.ycombinator.com/item?id=42412360">Hacker News</a></p>
Couldn't get https://ai.meta.com/blog/meta-fair-updates-agents-robustness-safety-architecture/?_fb_noscript=1: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: @smoores/epub, a JavaScript library for working with EPUB publications (111 pts)]]></title>
            <link>https://www.npmjs.com/package/@smoores/epub</link>
            <guid>42411727</guid>
            <pubDate>Fri, 13 Dec 2024 19:52:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.npmjs.com/package/@smoores/epub">https://www.npmjs.com/package/@smoores/epub</a>, See on <a href="https://news.ycombinator.com/item?id=42411727">Hacker News</a></p>
Couldn't get https://www.npmjs.com/package/@smoores/epub: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Elon Musk wanted an OpenAI for-profit (451 pts)]]></title>
            <link>https://openai.com/index/elon-musk-wanted-an-openai-for-profit/</link>
            <guid>42411608</guid>
            <pubDate>Fri, 13 Dec 2024 19:36:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/index/elon-musk-wanted-an-openai-for-profit/">https://openai.com/index/elon-musk-wanted-an-openai-for-profit/</a>, See on <a href="https://news.ycombinator.com/item?id=42411608">Hacker News</a></p>
Couldn't get https://openai.com/index/elon-musk-wanted-an-openai-for-profit/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[MarkItDown: Python tool for converting files and office documents to Markdown (242 pts)]]></title>
            <link>https://github.com/microsoft/markitdown</link>
            <guid>42410803</guid>
            <pubDate>Fri, 13 Dec 2024 18:02:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/markitdown">https://github.com/microsoft/markitdown</a>, See on <a href="https://news.ycombinator.com/item?id=42410803">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">MarkItDown</h2><a id="user-content-markitdown" aria-label="Permalink: MarkItDown" href="#markitdown"></a></p>
<p dir="auto">The MarkItDown library is a utility tool for converting various files to Markdown (e.g., for indexing, text analysis, etc.)</p>
<p dir="auto">It presently supports:</p>
<ul dir="auto">
<li>PDF (.pdf)</li>
<li>PowerPoint (.pptx)</li>
<li>Word (.docx)</li>
<li>Excel (.xlsx)</li>
<li>Images (EXIF metadata, and OCR)</li>
<li>Audio (EXIF metadata, and speech transcription)</li>
<li>HTML (special handling of Wikipedia, etc.)</li>
<li>Various other text-based formats (csv, json, xml, etc.)</li>
</ul>
<p dir="auto">The API is simple:</p>
<div dir="auto" data-snippet-clipboard-copy-content="from markitdown import MarkItDown

markitdown = MarkItDown()
result = markitdown.convert(&quot;test.xlsx&quot;)
print(result.text_content)"><pre><span>from</span> <span>markitdown</span> <span>import</span> <span>MarkItDown</span>

<span>markitdown</span> <span>=</span> <span>MarkItDown</span>()
<span>result</span> <span>=</span> <span>markitdown</span>.<span>convert</span>(<span>"test.xlsx"</span>)
<span>print</span>(<span>result</span>.<span>text_content</span>)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">This project welcomes contributions and suggestions.  Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit <a href="https://cla.opensource.microsoft.com/" rel="nofollow">https://cla.opensource.microsoft.com</a>.</p>
<p dir="auto">When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.</p>
<p dir="auto">This project has adopted the <a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow">Microsoft Open Source Code of Conduct</a>.
For more information see the <a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow">Code of Conduct FAQ</a> or
contact <a href="mailto:opencode@microsoft.com">opencode@microsoft.com</a> with any additional questions or comments.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Trademarks</h2><a id="user-content-trademarks" aria-label="Permalink: Trademarks" href="#trademarks"></a></p>
<p dir="auto">This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
<a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general" rel="nofollow">Microsoft's Trademark &amp; Brand Guidelines</a>.
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Garbage collected smart pointers in Rust via concurrent cycle collection (105 pts)]]></title>
            <link>https://maplant.com/2024-12-13-Scheme-to-the-Spec-Part-I:-Concurrent-Cycle-Collection.html</link>
            <guid>42410663</guid>
            <pubDate>Fri, 13 Dec 2024 17:48:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://maplant.com/2024-12-13-Scheme-to-the-Spec-Part-I:-Concurrent-Cycle-Collection.html">https://maplant.com/2024-12-13-Scheme-to-the-Spec-Part-I:-Concurrent-Cycle-Collection.html</a>, See on <a href="https://news.ycombinator.com/item?id=42410663">Hacker News</a></p>
Couldn't get https://maplant.com/2024-12-13-Scheme-to-the-Spec-Part-I:-Concurrent-Cycle-Collection.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What should I do with meet.hn? (173 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42410582</link>
            <guid>42410582</guid>
            <pubDate>Fri, 13 Dec 2024 17:38:30 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42410582">Hacker News</a></p>
Couldn't get https://news.ycombinator.com/item?id=42410582: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[People who are good at reading have different brains: study (126 pts)]]></title>
            <link>https://theconversation.com/people-who-are-good-at-reading-have-different-brains-244786</link>
            <guid>42410508</guid>
            <pubDate>Fri, 13 Dec 2024 17:32:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theconversation.com/people-who-are-good-at-reading-have-different-brains-244786">https://theconversation.com/people-who-are-good-at-reading-have-different-brains-244786</a>, See on <a href="https://news.ycombinator.com/item?id=42410508">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <p>The number of people who read for fun appears to be steadily dropping. Fifty percent of UK adults say they don’t read regularly (up from 42% in 2015)
and almost one in four young people aged 16-24 say they’ve never been readers, according to <a href="https://readingagency.org.uk/the-british-reader-is-in-decline-as-the-reading-agency-reveals-half-of-uk-adults-dont-read-regularly/">research by The Reading Agency</a>.</p>

<p>But what are the implications? Will people’s preference for video over text affect our brains or our evolution as a species? What kind of brain structure do good readers actually have? My <a href="https://pubmed.ncbi.nlm.nih.gov/39550055/">new study</a>, published in Neuroimage, has found out.</p>

<p>I analysed open-source data from more than 1,000 participants to discover that readers of varying abilities had distinct traits in brain anatomy.</p>

<p>The structure of two regions in the left hemisphere, which are crucial for language, were different in people who were good at reading. </p>

<p>One was the anterior part of the temporal lobe. The left temporal pole helps associate and categorise different types of meaningful information. To assemble the meaning of a word such as <em>leg</em>, this brain region associates the visual, sensory and motor information <a href="https://www.nature.com/articles/nrn2277">conveying how legs look, feel and move</a>. </p>

<p>The other was Heschl’s gyrus, a fold on the upper temporal lobe which hosts the auditory cortex (the cortex is the outermost layer of the brain). Better reading ability was linked to a larger anterior part of the temporal lobe in the left hemisphere compared to the right. It makes sense that having a larger brain area dedicated to meaning makes it easier to understand words and, therefore, to read.</p>

<p>What might seem less intuitive is that the auditory cortex would be related to reading. Isn’t reading mainly a visual skill? Not only. To pair letters with speech sounds, we first need to be aware of the sounds of the language. This <em>phonological awareness</em> is a <a href="https://pubmed.ncbi.nlm.nih.gov/16389701/">well-established precursor</a> to children’s reading development.</p>

<p>A thinner left Heschl’s gyrus has previously been related to dyslexia, which <a href="https://pubmed.ncbi.nlm.nih.gov/25125610/">involves severe reading difficulties</a>. My research shows that this variation in cortical thickness does not draw a simple dividing line between people with or without dyslexia. Instead, it spans the larger population, in which a thicker auditory cortex correlates with more adept reading. </p>

<h2>Why size matters</h2>

<p>Is thicker always better? When it comes to cortical structure, no, not necessarily. We know the auditory cortex has more myelin in the left hemisphere of most people. Myelin is a fatty substance that acts as an insulator for nerve fibres. It increases neural communication speed and can also insulate columns of brain cells from each other. Neural columns <a href="https://pubmed.ncbi.nlm.nih.gov/3291116/">are believed to function</a> as small processing units. </p>

<p>Their increased isolation and rapid communication in the left hemisphere can be thought to enable the fast, categorical processing necessary for language. We need to know if a speaker uses the category <em>d</em> or <em>t</em> when saying <em>dear</em> or <em>tear</em> rather than detecting the exact point where the vocal folds start vibrating. </p>

<p>According to the “balloon model” of cortical growth, the larger amount of myelin squeezes out left-hemispheric cortical areas, <a href="https://pubmed.ncbi.nlm.nih.gov/15513225/">making them flatter but more extended</a>. So while the left auditory cortex may be thicker in good readers, it is still thinner (but much more extended) than the corresponding right cortex.</p>

<p>This hypothesis was corroborated in the recent research. The left hemisphere had generally larger but thinner cortical areas with a higher degree of myelin.</p>

<p>So is thinner better, then? Again, the answer is no, not necessarily. Complex abilities that require integrating information tend to benefit from a thicker cortex. The anterior temporal lobe with its complex way of integrating information is indeed the thickest structure of all cortical areas. An underlying mechanism might be the existence of more overlapping, interacting neurons which <a href="https://pubmed.ncbi.nlm.nih.gov/15513225/">process information more holistically</a>. </p>

<p>Phonology is a highly complex skill, where different sound and motor features are integrated into speech sounds. It appears to <a href="https://pubmed.ncbi.nlm.nih.gov/29223785/">correlate with a thicker cortex</a> in an area near the left Heschl’s gyrus. While it is unclear to what extent phonology is processed in Heschl’s gyrus, the fact that phoneticians often have multiple left Heschl’s gyri <a href="https://www.jneurosci.org/content/31/11/4213">suggests it is linked to speech sounds</a>.</p>

<figure>
            <p><img alt="Brain with lower middle section highlighted." data-src="https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=754&amp;fit=clip" data-srcset="https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=600&amp;h=375&amp;fit=crop&amp;dpr=1 600w, https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=30&amp;auto=format&amp;w=600&amp;h=375&amp;fit=crop&amp;dpr=2 1200w, https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=15&amp;auto=format&amp;w=600&amp;h=375&amp;fit=crop&amp;dpr=3 1800w, https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=754&amp;h=471&amp;fit=crop&amp;dpr=1 754w, https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=30&amp;auto=format&amp;w=754&amp;h=471&amp;fit=crop&amp;dpr=2 1508w, https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=15&amp;auto=format&amp;w=754&amp;h=471&amp;fit=crop&amp;dpr=3 2262w" sizes="(min-width: 1466px) 754px, (max-width: 599px) 100vw, (min-width: 600px) 600px, 237px" src="https://images.theconversation.com/files/636861/original/file-20241206-15-caxln5.jpg?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=754&amp;fit=clip"></p>
            <figcaption>
              <span>The temporal lobe is involved in reading.</span>
              <span><a href="https://www.shutterstock.com/image-illustration/temporal-lobe-responsible-encoding-memory-processing-2015145218">Shutterstock</a></span>
            </figcaption>
          </figure>

<p>Clearly, brain structure can tell us a lot about reading skills. Importantly, though, the brain is malleable — it changes when we learn a new skill or practice an already acquired one. </p>

<p>For instance, young adults who studied language intensively increased their <a href="https://pubmed.ncbi.nlm.nih.gov/22750568/">cortical thickness in language areas</a>. Similarly, reading is likely to shape the structure of the left Heschl’s gyrus and temporal pole. So, if you want to keep your Heschl’s thick and thriving, pick up a good book and start reading.</p>

<p>Finally, it’s worth considering what might happen to us as a species if skills like reading become less prioritised. Our capacity to interpret the world around us and understand the minds of others would surely diminish. In other words, that cosy moment with a book in your armchair isn’t just personal – it’s a service to humanity.</p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Imposter Attack – Among Us-themed infrared game made with ESP32 (162 pts)]]></title>
            <link>https://blog.langworth.com/imposter-attack</link>
            <guid>42410229</guid>
            <pubDate>Fri, 13 Dec 2024 17:00:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.langworth.com/imposter-attack">https://blog.langworth.com/imposter-attack</a>, See on <a href="https://news.ycombinator.com/item?id=42410229">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <figure><img src="https://blog.langworth.com/assets/imposter-attack/main-1200.jpg" alt="A custom gaming setup featuring Among Us-themed glowing targets in various designs, a laptop displaying the game &quot;Imposter Attack&quot; with a high score of 4900, and infrared components, all illuminated under colorful lighting." loading="eager"></figure>
<p>At Legoland California this past summer I rode <a href="https://en.wikipedia.org/wiki/Lost_Kingdom_Adventure">a Lego-styled ancient Egyptian adventure ride</a> where you travel through a tomb and shoot as many snakes and mummies and things as you can with a laser gun. Two things occurred to me while riding: the fact that Legoland thought it a good idea to equip kids with lasers, and the thought that I could make a shooting gallery game like this that people would like.</p>
<p>Making games is fun. Games are the reason lots of people get into programming, including me. Some people even make a profession out of them. Even though this was months before Halloween, the game that appeared in my mind was a fun, shoot-em-up carnival-style game, and maybe I could inspire a few kids with software and hardware along the way.</p>
<p>But this wasn’t just a “this will be fun” idea. I’ve noticed a pattern about myself and it’s been the basis of many of my projects or even companies. I see bits of technology and how they fit together, especially those that have become recently available or economical. If the result is novel product or game that nobody else has created before, I’m locked in, and I tend to not shut up about it.</p>
<p>In this case, I had recently learned about inexpensive programmable microprocessors, particularly the <a href="https://esp32.com/">ESP32</a>, and I finally had an excuse to get into rudimentary electrical engineering. I was stunned at how cheap and accessible electronic components had become, and the online learning resources seemed infinite. I googled around and couldn’t find anything too similar to what I wanted to build, and thus this goofy and fun idea took hold.</p>
<h2 id="what-the-heck-is-esp32">What the heck is ESP32?</h2>
<p>One of the greatest fears as a homeowner is uncontrolled running water. A great product to deal with this fear is <a href="https://flumewater.com/">Flume</a>, an internet-connected water meter that gives you reports and alerts you to leaks. Flume had recently informed me that my old unit was defective and sent me a free replacement, so naturally I took apart the old one to see what was inside. Made of two components, a reader and base station that communicate wirelessly, opening them revealed that they were powered by a versatile, programmable chip called ESP32.</p>
<p>As someone who hadn’t been following makers, Arduino, or any kind of hardware, the ESP32 platform was astounding. It has a dual-core CPU that runs at up to 240 MHz, it can do wifi and Bluetooth, and it’s got about forty pins that can be used for all sorts of stuff. You can program it with the free <a href="https://www.arduino.cc/en/software">Arduino IDE</a> and a USB cable, and they <a href="https://amazon.com/s?k=esp32">cost about $6 per board</a>. For someone who wanted to experiment efficiently <em>and</em> knew that they’d probably set one or two prototypes on fire, this was perfect.</p>
<p>I watched <a href="https://www.youtube.com/playlist?list=PLUhbm0oyg91ZyRa5XK_S947yB354VmN8W">a <em>lot</em> of videos on electronics basics and Arduino</a> and figured out what I’d need to buy to start learning. Initially I bought a single board and some LEDs from <a href="https://www.sparkfun.com/">SparkFun</a>, which is a popular site, but the lengthy ship times made me impatient. I turned to Amazon — yes, I’m sorry — where I could get components much more quickly and cheaply, and spent a few dollars on <a href="https://a.co/d/a7I6lh6">a few ESP-WROOM-32 boards</a> and <a href="https://a.co/d/6HOSekd">a breadboard starter kit</a>. Learning the Arduino IDE was pretty quick, and before long I had some LEDs blinking and was reading infrared signals from a soundbar remote I had lying around.</p>
<lite-vimeo data-id="1038078166" data-params="loop=true&amp;autoplay=1&amp;dnt=1"> <a href="https://vimeo.com/1038078166" aria-label="Play"></a> </lite-vimeo> 
<p>The game started to solidify in my head, and the idea of zapping aliens seemed reasonably fun. I decided to create <a href="https://en.wikipedia.org/wiki/Among_Us">Among Us</a>-style characters for the target faces since every kid loves that game (mine do) and the characters are very recognizable. So I decided to build out the first version of a Node.js game server with a web-driven scoreboard, and I had the ESP32 target connect to my wifi and communicate “hits” over UDP:</p>
<figure><lite-vimeo data-id="1038081093" data-params="autoplay=1&amp;dnt=1"> <a href="https://vimeo.com/1038081093" aria-label="Play"></a> </lite-vimeo> <figcaption>It’s basically done, right?</figcaption></figure>
<h2 id="moving-to-micropython">Moving to MicroPython</h2>
<p>While working on the game I used my newfound ESP32 skills to do some other projects, such as automating the remote-controlled blinds in our bedroom as well as a motion sensor that would send <a href="https://pushover.net/">Pushover</a> notifications to my phone. I started to run into issues with keeping time and went down rabbit holes of using NTP and <a href="https://a.co/d/h8FzOZ5">DS3231 realtime clock modules</a>. Online friends convinced me to look at <a href="https://micropython.org/">MicroPython</a><sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>, which seemed to have a better ecosystem than Arduino, so I switched.</p>
<p>I was hesitant to switch to MicroPython because I wanted to stay low-level and better understand the hardware. But I quickly discovered that iterating with MicroPython was <em>much</em> faster. Python is a much easier language to work with, of course, but the real win was that there was no compilation or flashing step. In theory, you simply copy files to the board and reset it with the <a href="https://docs.micropython.org/en/latest/reference/mpremote.html"><code>mpremote</code> command</a>. This was <em>mostly</em> true, but watching <code>main.py</code> for changes, copying the files, and monitoring the serial port for output gets cumbersome and buggy, so I built <a href="https://github.com/statico/imposter-attack-2024/blob/main/devtool/devtool.py">a tool</a> to automate this. It worked most of the time but still occasionally required unplugging and reconnecting the board.</p>
<p>The switch to MicroPython really paid off later when I started using <a href="https://github.com/mkomon/uota">uOTA</a>, an over-the-air updater framework. By hosting a tarball on my laptop and sending the targets an “update” command, I was able to update all 15 devices wirelessly without connecting them via USB. More on that later.</p>
<h2 id="infrared">Infrared</h2>
<p>Sending and receiving infrared (IR) signals with microcontrollers is well-documented with a handful of protocols. After some experimentation I found all of the remotes I had used <a href="http://exploreembedded.com/wiki/NEC_IR_Remote_Control_Interface_with_8051">NEC</a>, which basically sends one long pulse, then a space, then bits of data with some simple error checking.</p>
<figure><img src="https://blog.langworth.com/assets/imposter-attack/ir-nec.png" alt="Diagram illustrating the NEC infrared remote control signal protocol" loading="lazy"><figcaption><p>NEC infrared remote control signal protocol from <a href="https://exploreembedded.com/wiki/NEC_IR_Remote_Control_Interface_with_8051">Explore
Embedded</a></p></figcaption></figure>

<p>The <a href="https://github.com/Arduino-IRremote/Arduino-IRremote">IRremote library for Arduino</a> is great. It’s well-documented, has lots of examples, and decodes the IR protocol automatically. Even though I didn’t use it, one of the best features is how it creates a 4-byte hash of any incoming IR command, which makes it trivial to check for button presses on an IR remote.</p>
<p>For inputs, I was definitely set on using <a href="https://a.co/d/21eXs0B">the cheapest IR laser tag guns I could find</a>, which use IR despite being called “laser” tag. I also had an <a href="https://www.youtube.com/watch?v=CZkqtpVFRTE">“MagiQuest” wand</a> from a local water park with a <em>definitely-not-Harry-Potter</em> game where you wave a wand to collect points. Importantly, I felt the wand would be more appropriate to use the wand at a school event.</p>
<p>Neither the pistols nor the MagiQuest wand used any known protocol<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>, so I had to parse the raw timing data and look for patterns there. I discovered that there was a particular tolerance needed when decoding an IR signal as they tend to get more corrupted or “wrong” the farther away you are and how accurately you’re aiming the transmitter at the receiver. I assume IR signals are bright and bouncy to allow the changing TV channels from a hundred feet away, but other than that I haven’t really researched the physics as to why this happens. Regardless, I was able to use this property to more accurately detect hits from the laser guns and wands.</p>
<figure><img src="https://blog.langworth.com/assets/imposter-attack/pistols-and-wand.jpg" alt="Two toy laser tag pistols in blue and red lightning designs and a wooden wand with tan grip wrappings, arranged on a green cutting mat. A small clear plastic case containing electronic components and a USB cable is also visible." loading="lazy"><figcaption>A proper alien-blasting arsenal</figcaption></figure>
<p>Around this time I also switched to MicroPython and began using <a href="https://github.com/peterhinch/micropython_ir">Peter Hinch’s micropython_ir libraries</a>. I decided that a <code>1</code> bit was any burst longer than 750µs for the laser guns and 500µs for the wand. The entire receiving code ended up looking like this:</p>
<pre tabindex="0" data-language="python"><code><span><span># `burst` is an array of IR pulse lengths</span></span>
<span><span>bits </span><span>=</span><span> ""</span></span>
<span><span>if</span><span> burst</span><span>[</span><span>0</span><span>]</span><span> &gt;</span><span> 1200</span><span> and</span><span> burst</span><span>[</span><span>0</span><span>]</span><span> &lt;</span><span> 1800</span><span>:</span></span>
<span><span>  # Laser gun</span></span>
<span><span>  for</span><span> i</span><span>,</span><span> value </span><span>in</span><span> enumerate</span><span>(</span><span>burst</span><span>):</span></span>
<span><span>    if</span><span> i </span><span>==</span><span> 0</span><span>:</span></span>
<span><span>      continue</span></span>
<span><span>    if</span><span> i </span><span>%</span><span> 2</span><span> ==</span><span> 1</span><span>:</span></span>
<span><span>      bits </span><span>+=</span><span> "</span><span>1</span><span>"</span><span> if</span><span> value </span><span>&gt;</span><span> 750</span><span> else</span><span> "</span><span>0</span><span>"</span></span>
<span><span>else</span><span>:</span></span>
<span><span>  # Wand or anything else</span></span>
<span><span>  for</span><span> i</span><span>,</span><span> value </span><span>in</span><span> enumerate</span><span>(</span><span>burst</span><span>):</span></span>
<span><span>    bits </span><span>+=</span><span> "</span><span>1</span><span>"</span><span> if</span><span> value </span><span>&gt;</span><span> 500</span><span> else</span><span> "</span><span>0</span><span>"</span></span>
<span></span>
<span><span># Wand is acting strangely. Trim any leading 10+</span></span>
<span><span>bits</span><span>.</span><span>replace</span><span>(</span><span>"</span><span>1</span><span>"</span><span> +</span><span> "</span><span>0</span><span>"</span><span> *</span><span> (</span><span>len</span><span>(</span><span>bits</span><span>)</span><span> -</span><span> len</span><span>(</span><span>bits</span><span>.</span><span>lstrip</span><span>(</span><span>"</span><span>0</span><span>"</span><span>))),</span><span> ""</span><span>,</span><span> 1</span><span>)</span></span>
<span></span>
<span><span>if</span><span> len</span><span>(</span><span>bits</span><span>)</span><span> ==</span><span> 20</span><span> and</span><span> bits</span><span>[:</span><span>8</span><span>]</span><span> ==</span><span> "</span><span>00001111</span><span>"</span><span>:</span></span>
<span><span>  print</span><span>(</span><span>"</span><span>hit (pistol)</span><span>"</span><span>)</span></span>
<span><span>  handle_hit</span><span>()</span></span>
<span><span>elif</span><span> len</span><span>(</span><span>bits</span><span>)</span><span> &gt;=</span><span> 12</span><span> and</span><span> bits</span><span>[:</span><span>12</span><span>]</span><span> ==</span><span> "</span><span>100101010101</span><span>"</span><span>:</span></span>
<span><span>  print</span><span>(</span><span>"</span><span>hit (wand)</span><span>"</span><span>)</span></span>
<span><span>  handle_hit</span><span>()</span></span>
<span><span>else</span><span>:</span></span>
<span><span>  print</span><span>(</span><span>f</span><span>"unknown IR signal: </span><span>{</span><span>bits</span><span>}</span><span>"</span><span>)</span></span></code></pre>
<h2 id="lighting">Lighting</h2>
<p>My vision was to have 10-15 targets that, once the game started, would all light up at random intervals to signal that they were ready to be shot. I wanted the targets to flash if shot, but also flicker and turn off if the player didn’t shoot them as it’s a common mechanic in platformer games to flicker and remove items if they’re not picked up in time. Since this game was going to be played by kids on Halloween, I figured that UV (blacklight) against neon paper would fit the spooky motif. Thus, I needed two LEDs: one UV for the “ready” light and something else for the “shot” light.</p>
<p>One of the first real challenges I had was figuring out how much light I could produce with an ESP32. The GPIO pins produce 3.3V, but the maximum current is a little mysterious even though the datasheets say something like 40mA. I really wanted to drive the LEDs right from the board and avoid any extra components to keep things simple and reliable. A relay or step-up voltage converter would mean lots of extra soldering for fifteen targets, and another part meant another thing that could fail.</p>
<p>I ordered a few different types of LED components to experiment with and decided that <a href="https://a.co/d/5ve473u">3W 420nm UV</a> and <a href="https://a.co/d/6pGWnzx">1W white LED</a> “lamp chips” would be sufficient as long as the LED was oriented correctly. I made a prototype with a little stalk to angle the LEDs properly and a little tin foil reflector to help add the light. The reflector doubled as a shield to prevent me from looking at the UV light, which left yellow spots in my vision for a few minutes. I’m sure that that’s totally safe.</p>
<figure><lite-vimeo data-id="1038439862" data-params="loop=true&amp;autoplay=1&amp;dnt=1"> <a href="https://vimeo.com/1038439862" aria-label="Play"></a> </lite-vimeo> <figcaption><p>Glow-in-the-dark paint didn’t look nearly as cool as I thought it would</p></figcaption></figure>
<p>This was before I discovered the world of RGB lighting and WS2812B strips, which I’ll cover in a later post when I talk about my holiday lights project. In the future, I might use one or more 5V WS2812B LED lamp chips which, in theory, could be driven using the full 5V from the power supply and controlled via a data pin. Noted for next year!</p>
<h2 id="power">Power</h2>
<p>Power was another big question. I wasn’t sure whether I should keep each device plugged with long USB cables or use battery power. Long cables meant I wouldn’t have to worry about battery life and swapping out batteries during an event, but I also imagined a tripping hazard, and I worried about voltage drop. Instead, I decided to give batteries a try.</p>
<p>I learned about the ubiquitous <a href="https://www.reddit.com/r/18650masterrace/">18650 li-ion “flashlight battery”</a>, a form factor that is apparently in everything rechargeable from power tools to <a href="https://insideevs.com/news/587455/batteries-tesla-using-electric-cars/">Teslas</a>. In fact, I already had a few left over from when I fixed the battery pack in a handheld vacuum cleaner. Since they’re unprotected and can cause fires if overcharged, undercharged, or looked at menacingly,<sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup> a charging and discharging protection circuit is necessary. Luckily, <a href="https://a.co/d/8J2QXgp">TP4056 charging modules</a> are cheap and abundant.</p>
<p>With power figured out, my prototype was now complete hardware-wise.</p>
<figure><img src="https://blog.langworth.com/assets/imposter-attack/prototype.jpg" alt="Back and front of the target prototype. Pictured is an 18650 battery connected to a TP4056 li-ion protection circuit, which is powering a D1 Mini ESP32 board via USB." loading="lazy"><figcaption>Back and front of the target prototype</figcaption></figure>
<p>Once the charging components arrived, I made a prototype of my first battery-powered self-contained ESP-NOW powered target and it worked! The only glitch was that the TP4056 required a repeat insertion of the battery. It seemed like something needed to be powered up for the charging component to activate, and only with the second battery insertion did they begin to provide 5V continuously. The modules were meant to drive USB battery packs, so I’m guessing this behavior is related to that somehow. In the future I’ll either add a power switch to make the process easier or I’ll find a way to circumvent it completely.</p>
<h2 id="communication">Communication</h2>
<p>I was still worried about power consumption, and this led me to discover <a href="https://randomnerdtutorials.com/esp-now-esp32-arduino-ide/">ESP-NOW</a>, a UDP-like 2.4 GHz communication protocol available on ESP32 systems. Not connecting to wifi sounded much more efficient since the CPU wouldn’t need to waste valuable cycles and energy processing packets and such. Also, I was already disappointed to find that UDP retransmission was necessary even on my private and quiet home network. The only downside was that I would need yet another ESP32 plugged into my laptop to act as an ESP32-NOW bridge.<sup><a href="#user-content-fn-4" id="user-content-fnref-4" data-footnote-ref="" aria-describedby="footnote-label">4</a></sup></p>
<p>When manufactured, each ESP32 gets a unique MAC address. I was already using this as a device identifier when communicating over UDP, so converting the code to use ESP-NOW was simple. I used an extra <a href="https://www.sparkfun.com/products/23484">ESP32-C3</a> I had ordered since it fit nicely into a plastic battery box and could stick to my laptop with blue tak. Testing them demonstrated communication distances of over 200 feet <em>without retransmission</em>, which was impressive. ESP-NOW became an easy win.</p>
<p>I wasn’t finished with wifi, though. I plumbed in <a href="https://github.com/mkomon/uota">uOTA</a>, a MicroPython framework that does over-the-air updates over wifi, and updated the targets to only connect to wifi once they received a special “update” command over ESP-NOW. Once connected, they would check for updates from a web server running on my laptop with a fixed IP, update themselves, and reboot. This ended up working <em>perfectly</em>, and later it became the primary way I made changes to the target code.</p>
<h2 id="more-target-work">More target work</h2>
<p>With the prototype working, I thought carefully on how construct fifteen of these targets in the most foolproof, reliable, and easily-debuggable way. I decided on the following:</p>
<ul>
<li><a href="https://a.co/d/aer4OII">18650 li-ion batteries</a> with <a href="https://a.co/d/2RUgmFJ">holders</a> and <a href="https://a.co/d/9qqIEh4">TP4056 charging modules</a> as the power source</li>
<li><a href="https://a.co/d/jeLaDBc">D1 Mini ESP-WROOM-32</a> boards since they were the cheapest and, not having any header pins soldered, the most versatile</li>
<li><a href="https://a.co/d/72jX1Bq">Neon project paper</a> on which to print the target faces, <a href="https://a.co/d/fARe4w1">spray-gluing</a> them to cardboard to make them sturdy, and punching a hole with an awl for the IR received to peek through</li>
<li>Small pieces of <a href="https://a.co/d/83qRSb8">mirror paper</a> to act as reflectors</li>
<li><a href="https://a.co/d/6rqoSjI">Clear plastic storage cases</a> to protect the components and make handling easier</li>
<li>Simple wood T’s, black spray paint, and hot glue as a frame</li>
<li><a href="https://a.co/d/aOjW3op">Blu-Tak putty</a> to stick components to the case and frame</li>
<li><a href="https://a.co/d/2fd04dm">3M Command Strips</a> (like velcro) to stick the case to the frame and the target to the case</li>
<li><a href="https://a.co/d/9AyDcFh">Stick-on hangers</a> so the targets could be hung easily, such as with <a href="https://a.co/d/7hlgE0m">strong magnetic hangers</a> on a garage door</li>
<li>Dupont jumper wires (<a href="https://a.co/d/7y3kHFk">1</a>, <a href="https://a.co/d/8y4yhWP">2</a>, <a href="https://a.co/d/6jH10Aw">3</a>) instead of soldering in order to make service and assembly easier</li>
<li>My own 4- or 5-pin jumper bridges created from soldering extra headers as a common ground</li>
</ul>
<p>Making the targets modular — a case, a target face, and frame — let them be easily constructed and serviceable. With the command strips, if a target face seemed off-center or unbalanced, I could take it off and reposition it. Also, all of the targets packed up neat and tidy in a box when no longer in use.</p>
<figure><img src="https://blog.langworth.com/assets/imposter-attack/prototype2.jpg" alt="Two game targets on a workbench, one facing front and one facing back. The front-facing one shows an orange neon sign with an Among Us imposter graphic and the back of the reflector attached to a T-frame on the bottom. The one facing back shows the clear case with the ESP32, battery holder, and charging module inside, with connectors going out to the IR receiver and LEDs." loading="lazy"><figcaption>Two more prototypes using the new parts</figcaption></figure>
<p>Using Dupont jumper wires for everything had mixed results. On one hand, I liked the idea of making the ESP32 boards reusable. On the other hand, jumper wires tend to work themselves free, and I ended up adding blu-tak to all of them. Also, the project boxes weren’t quite tall enough, so repeated pressure from handling and inserting batteries tended to knock the wires loose. Despite this, everything mostly worked, and figuring out why something wasn’t working was usually a matter of fixing a loose connection.</p>
<p>Using some Among Us clip art and <a href="https://www.iconfinder.com/iconsets/halloween-01">a Halloween icon pack</a>, I made fifteen graphics in Figma to use for target faces. I wanted to use a local shop to print the targets but, for some reason, couldn’t find one that would do it. One shop owner said to just use my own laser printer with the “thick paper” setting, which is what I did. Some neon paper colors held toner better than others, and all of the target faces had some amount of ghosting. The toner also tended to rub off after printing, so every print was sprayed down with aerosol Minwax polycrylic to seal it up.</p>
<figure><div data-astro-cid-juhulabb=""> <p><img src="https://blog.langworth.com/assets/imposter-attack/build1.jpg" alt="Brightly colored Among Us characters with tools, printed on fluorescent paper, scattered on a workbench." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build2.jpg" alt="Small breadboard with a mounted breakout board, secured by a rubber band on a green cutting mat." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build3.jpg" alt="A pile of blue breakout boards with scattered components on a workbench." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build4.jpg" alt="Neatly organized multicolored wires and LED modules on top of clear plastic storage boxes." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build5.jpg" alt="A green cutting mat with multiple black-painted, T-shaped wood pieces arranged in a pattern." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build6.jpg" alt="A small project setup featuring an ESP32 board, battery pack, and connected LEDs on a workbench." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build7.jpg" alt="Prototyping station with a plastic container holding electronics, including a sensor module and wires." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build8.jpg" alt="The backs of three targets showing different states of assembly placed in front of four target faces." loading="lazy"></p><p><img src="https://blog.langworth.com/assets/imposter-attack/build9.jpg" alt="Targets that have been deconstructed and are ready for storage." loading="lazy"></p> </div>  <figcaption>Various progress pictures</figcaption></figure>
<p>After a few nights of doing everything 15-20 times (I needed redundancy for every step of course), I had fifteen working targets ready to go! I strung up some rope in the garage and hung them all for easy testing.</p>
<figure><lite-vimeo data-id="1038463145" data-params="loop=true&amp;autoplay=1&amp;dnt=1"> <a href="https://vimeo.com/1038463145" aria-label="Play"></a> </lite-vimeo> <figcaption>Thirteen targets flashing in “test” mode</figcaption></figure>
<p>The final idea to implement was a “boss” target that would have special sounds and take more hits to destroy. Originally I had intended the boss target to be bigger and scarier, but since I had to print the targets myself I settled for a unique face and just told players which target was “special.” Since I didn’t want to have a unique version of the code for bosses, I designated a single pin as a pull-up resistor which the code could read to determine whether it was a regular or boss target, and on the special target I connected that pin to ground.</p>
<pre tabindex="0" data-language="python"><code><span><span>imposter_pin </span><span>=</span><span> Pin</span><span>(</span><span>16</span><span>,</span><span> Pin</span><span>.</span><span>IN</span><span>,</span><span> Pin</span><span>.</span><span>PULL_UP</span><span>)</span></span>
<span></span>
<span><span># ...</span></span>
<span></span>
<span><span>def</span><span> is_imposter</span><span>():</span></span>
<span><span>  return</span><span> imposter_pin</span><span>.</span><span>value</span><span>()</span><span> ==</span><span> 0</span></span></code></pre>
<h2 id="the-big-day-or-days">The big day (or days)</h2>
<p>The first trial run was at our elementary school’s <a href="https://en.wikipedia.org/wiki/Trunk-or-treating">“Trunk or Treat”</a> event, where people parked cars at the school and made Halloween-themed exhibits.</p>
<figure><img src="https://blog.langworth.com/assets/imposter-attack/trunk.jpg" alt="" loading="lazy"></figure>
<p>Everyone had a blast! About 115 kids played, with a few making second or third attempts at breaking the high score. I was told that I had the <em>second biggest</em> crowd, second only to a Pokémon bean bag game (which did look pretty cool). Some adults were curious, but most importantly, a handful of questions from kids who wanted to know how I built it. It was especially rewarding to show one off one of the extra targets I brought. One kid even recognized the ESP32 chips and said, “Oh, these are the ones you can make drones out of!”</p>
<figure><lite-vimeo data-id="1038824565" data-params="autoplay=1&amp;dnt=1"> <a href="https://vimeo.com/1038824565" aria-label="Play"></a> </lite-vimeo> <figcaption>Example gameplay with the wand</figcaption></figure>
<p>Halloween, however, was the <em>big</em> show. I set up a table in front of our garage and used [magnetic hooks] to mount the targets, of which only 13 were working. Having learned from the event at the school, I taped off a line for people to stand behind so they’d have the best chance at shooting the targets. I also added a counter to track how many games were played, and it came out to almost 90. A handful of people came back to try and get the high score, which I think was around 5,200.</p>
<figure><lite-vimeo data-id="1038824555" data-params="autoplay=1&amp;dnt=1"> <a href="https://vimeo.com/1038824555" aria-label="Play"></a> </lite-vimeo> <figcaption>Example gameplay with the laser guns</figcaption></figure>
<h2 id="improvements-for-next-time">Improvements for next time</h2>
<p>People really liked the game, and I’ve set it up a few more times for other events. However, there’s a host of improvements that need to be made to make the game more fun and reliable.</p>
<ul>
<li>An on/off switch — Popping batteries in and out was a lot of toil because the targets were so fragile.</li>
<li>Better target faces — Surely I can find a local sign shop to do coroplast signs. And I might try a different theme than Among Us.</li>
<li>Better lighting — WS2812B LEDs might be the solution since I can drive a few at once as well as change the colors for different effects and events.</li>
<li>Custom boards — Using something like <a href="https://www.pcbway.com/">PCBWay</a> to print my own boards might be a good idea. I could make sockets to drop the ESP32s and other components into and use headers to get rid of the unreliable jumper wires.</li>
</ul>
<p>Until next time, please enjoy the videos. You can checkout the <a href="https://github.com/statico/imposter-attack-2024">source code for the entire project</a> on GitHub.</p>
<section data-footnotes="">
<ol>
<li id="user-content-fn-2">
<p>I also considered CircuitPython, and choosing between that and MicroPython was difficult. I decided that CircuitPython is more focused on pushing people into the Adafruit branded hardware ecosystem, so I stuck with the more organic-feeling MicroPython. <a href="#user-content-fnref-2" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-1">
<p>There does appear to be <a href="https://github.com/patricknevindwyer/arduino-magiquest">a project</a> where someone decodes the wand ID and shake magnitude of MagiQuest wands with Arduino. <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3">
<p>The biggest problem with 18650 batteries appears to be <a href="https://youtube.com/watch?v=rammyIePuGc&amp;t=167">their design</a>. The negative pole makes up most of the case while the positive “button” is a thin cap at the top. The gap between the two parts is small, so if they get dropped or damaged in the right way, those terminals can touch. This leads to thermal runaway, scary moments, and insurance claims. <a href="#user-content-fnref-3" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
<li id="user-content-fn-4">
<p>Maybe there’s a way to send ESP-NOW packets from a regular wifi NIC, but I couldn’t figure this out. <a href="https://www.instructables.com/ESPNow-a-Deeper-Look-Unicast-Vs-Broadcast-ACKs-Ret/">Wireshark can sniff ESP-NOW packets</a>, though, so maybe? If you know, let me know. <a href="#user-content-fnref-4" data-footnote-backref="" aria-label="Back to reference 4">↩</a></p>
</li>
</ol>
</section> </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Feds help health insurers hide their dirty secret: denials on the rise (147 pts)]]></title>
            <link>https://nypost.com/2024/12/12/opinion/feds-help-health-insurers-hide-dirty-secret-rising-denials/</link>
            <guid>42408925</guid>
            <pubDate>Fri, 13 Dec 2024 14:51:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nypost.com/2024/12/12/opinion/feds-help-health-insurers-hide-dirty-secret-rising-denials/">https://nypost.com/2024/12/12/opinion/feds-help-health-insurers-hide-dirty-secret-rising-denials/</a>, See on <a href="https://news.ycombinator.com/item?id=42408925">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							


<p>The <a href="https://nypost.com/2024/12/05/us-news/anthem-blue-cross-blue-shield-to-impose-limits-on-surgical-anesthesia/">health insurance industry’s</a> dirty secret is that it’s no longer selling insurance: It’s selling a crapshoot.&nbsp;</p>



<p>The risk of having your health insurance claim denied is roughly 10 times what it was a decade ago.</p>



<p>Back then, insurers seldom rejected claims.&nbsp;</p>





<p>UnitedHealthcare nixed 1.1%, Humana 1.9%, Aetna 1.5% in 2013, per the American Medical Association.</p>



<p>By 2022, major insurers were refusing to pay, on average, 15% of claims, according to a national survey of hospitals and health-care providers by Premier, an insurance consultant.</p>






<p>The&nbsp;figure&nbsp;continues to shoot&nbsp;upward, with some companies today denying almost <em>half</em> of all claims, according to researchers at the Kaiser Family Foundation.&nbsp;</p>



<p>But you can’t find out <em>which</em> companies, and that makes choosing a plan a high-stakes gamble. </p>



<p>If you’re seriously ill and need costly care, a denied claim could push you into bankruptcy. &nbsp;</p>



<p>The&nbsp;<a href="https://nypost.com/2024/08/16/us-news/trump-shares-promises-for-affordable-care-act-social-security-medicare/">Affordable Care Act </a>of 2010 requires the Department of Health and Human Services to monitor claims denials and provide the information to the public.</p>



<p>But government officials — coopted by the industry — simply don’t do it.&nbsp;</p>



<p>Consumers be damned.</p>



<p>Uncle Sam is allowing claims denial to become a major profit center for insurers.</p>



<p>The assassination of UnitedHealthcare CEO Brian Thompson is igniting an outpouring of vitriol against insurers.&nbsp;</p>



<p>Alleged killer Luigi Mangione railed in a manifesto against the&nbsp;<a href="https://nypost.com/2024/12/09/us-news/luigi-mangione-unitedhealthcare-ceo-brian-thompsons-suspected-killer-expresses-disdain-for-health-insurance-industry-in-manifesto/" target="_blank" rel="noreferrer noopener">“corruption and greed”</a> of the industry.</p>



<p>No industry malfeasance could ever excuse murder.&nbsp;</p>



<p>Period.</p>



<p>Even so, it’s past time for companies’ denial rates to be made public. </p>



<p>You aren’t really insured if your insurer can deny valid claims with impunity.</p>



<p>That is what’s happening,&nbsp;based on information that Kaiser researchers&nbsp;were able get about plans sold on the Affordable Care Act exchanges.</p>



<p>ACA plans on average refuse to pay 17% of claims. </p>



<p>But the researchers found that numerous insurers nix 30% or more, including&nbsp;Meridian Health Plan of Michigan, United Healthcare of Arizona, and Optimum Choice in Virginia.</p>



<p>Celtic Insurance Company in Florida refused 42%&nbsp;of claims in 2021.&nbsp;</p>



<p>You can’t really call that insurance.</p>



<p>The problem is not unique to ACA plans.&nbsp;</p>



<p>Premier’s March 2024 survey found that insurers overall denied 15.7% of Medicare Advantage claims, 15.1% of Medicaid managed care claims and 13.9% of claims from non-government plans.&nbsp;</p>



<p>That staggering denial rate should be the first fact any consumer sees <a href="https://nypost.com/2024/10/02/lifestyle/americans-would-rather-do-these-annoying-things-than-pick-an-insurance-plan/">when choosing a plan</a>, and plan ratings should include denial rates. </p>



<p>Hiding them is an outrage.</p>



<p>Insurers&nbsp;cite lack&nbsp;of medical necessity for under 2% of denials,&nbsp;lack of prior authorization for 8%, and about 13.5% for the service not being covered under the plan.</p>



<p>But the major reason for denials — “other,” accounting for 76% of them — is a big black hole. Anybody’s guess.</p>



<p>Patients rarely appeal — only 0.2% of the time, per Kaiser.</p>



<p>An appeal means coaxing your doctor and staff to spend hours filling out forms and making repeated phone calls to joust with an insurance company employee.</p>



<div>
			
			<div>
				<h3>
					Start and end your day informed with our newsletters				</h3>
				<p>
					Morning Report and Evening Update: Your source for today's top stories				</p>
			</div>
			<p>
				<h3>
					Thanks for signing up!				</h3>
			</p>
		</div>



<p>Few doctors are eager to take on this ordeal.&nbsp;</p>



<p>But appeals pay off. In the ACA plans,&nbsp;Kaiser reports that&nbsp;41% of turn-downs get reversed&nbsp;— an&nbsp;indication that plenty of necessary care covered by plans is being denied.</p>



<p>Employers and their workers should be able to get information on how often insurers deny claims, and so should Medicare Advantage plan users.&nbsp;</p>



<p>But federal regulators&nbsp;have capitulated to pushback from the industry, and refuse to collect the information.</p>



<p>State regulators aren’t any better. </p>



<p>State insurance commissioners collect denial data, but with the exception of Connecticut and Vermont,&nbsp;they don’t disclose that information, a ProPublica investigation found.&nbsp;</p>



<p>New York state publicizes the number of complaints against insurers, but not actual denial rates — which would be more telling.</p>



<p>Nationwide, health coverage for a family of four topped $25,000 this year — a staggering amount. Young families will likely never meet their annual deductible.</p>



<p>All they’re getting for their premium is peace of mind — the knowledge that if a terrible illness or accident happens, they’re covered.&nbsp;&nbsp;</p>



<p>Truth is, they may <em>not</em> be covered. </p>



<p>They may be insured by a company that denies a third or more of all claims. </p>



<p>And they won’t know it until it’s too late.</p>



<p>Transparency is the only way to make the insurance market fair.&nbsp;</p>



<p>President-elect Trump’s health nominees have argued that there’s <a href="https://nypost.com/2024/11/14/us-news/trump-to-nominate-rfk-jr-to-head-department-of-health-and-human-services-sources/">too much coziness</a> between industry and the federal bureaucracy, with the public paying the price. </p>



<p>They’re right — and this is an odious example.</p>



<p>Federal regulators need to do what the law requires: Expose companies that take our money and then deny legitimate claims. </p>







<p>No new law is needed. </p>



<p>Just an order from the top.&nbsp; </p>



<p>President Trump, are you listening?</p>



<p><em>Betsy McCaughey is a former lieutenant governor of New York and co-founder of the </em><a href="https://www.saveourcityny.org/"><em>Committee to Save Our City</em></a><em>.</em></p>
						</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AT&T won't upgrade millions of DSL users to fiber despite billions in subsidies (102 pts)]]></title>
            <link>https://www.techdirt.com/2024/12/13/att-refuses-to-upgrade-millions-of-dsl-customers-to-fiber-despite-untold-billions-in-taxpayer-subsidies-and-government-favors/</link>
            <guid>42408885</guid>
            <pubDate>Fri, 13 Dec 2024 14:48:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techdirt.com/2024/12/13/att-refuses-to-upgrade-millions-of-dsl-customers-to-fiber-despite-untold-billions-in-taxpayer-subsidies-and-government-favors/">https://www.techdirt.com/2024/12/13/att-refuses-to-upgrade-millions-of-dsl-customers-to-fiber-despite-untold-billions-in-taxpayer-subsidies-and-government-favors/</a>, See on <a href="https://news.ycombinator.com/item?id=42408885">Hacker News</a></p>
Couldn't get https://www.techdirt.com/2024/12/13/att-refuses-to-upgrade-millions-of-dsl-customers-to-fiber-despite-untold-billions-in-taxpayer-subsidies-and-government-favors/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Web Origami, for making websites where you can understand how they're made (178 pts)]]></title>
            <link>https://weborigami.org</link>
            <guid>42408819</guid>
            <pubDate>Fri, 13 Dec 2024 14:43:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://weborigami.org">https://weborigami.org</a>, See on <a href="https://news.ycombinator.com/item?id=42408819">Hacker News</a></p>
Couldn't get https://weborigami.org: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Noninvasive imaging method can penetrate deeper into living tissue (159 pts)]]></title>
            <link>https://news.mit.edu/2024/noninvasive-imaging-method-can-penetrate-deeper-living-tissue-1211</link>
            <guid>42408271</guid>
            <pubDate>Fri, 13 Dec 2024 13:34:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.mit.edu/2024/noninvasive-imaging-method-can-penetrate-deeper-living-tissue-1211">https://news.mit.edu/2024/noninvasive-imaging-method-can-penetrate-deeper-living-tissue-1211</a>, See on <a href="https://news.ycombinator.com/item?id=42408271">Hacker News</a></p>
Couldn't get https://news.mit.edu/2024/noninvasive-imaging-method-can-penetrate-deeper-living-tissue-1211: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Test (481 pts)]]></title>
            <link>https://www.defense.gov/News/News-Stories/Article/Article/4000004/test/</link>
            <guid>42408202</guid>
            <pubDate>Fri, 13 Dec 2024 13:23:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.defense.gov/News/News-Stories/Article/Article/4000004/test/">https://www.defense.gov/News/News-Stories/Article/Article/4000004/test/</a>, See on <a href="https://news.ycombinator.com/item?id=42408202">Hacker News</a></p>
Couldn't get https://www.defense.gov/News/News-Stories/Article/Article/4000004/test/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[My PhD advisor rewrote himself in bash (2010) (105 pts)]]></title>
            <link>https://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/</link>
            <guid>42407250</guid>
            <pubDate>Fri, 13 Dec 2024 09:41:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/">https://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/</a>, See on <a href="https://news.ycombinator.com/item?id=42407250">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="abstract-container">

 <h2>3 shell scripts to improve your writing, or "My Ph.D. advisor rewrote himself in bash."
</h2>

 

 <p> The hardest part of advising Ph.D. students is teaching
them how to write.</p>

<p>Fortunately, I've seen patterns emerge over the past couple years.</p>

<p>
So, I've decided to replace myself with a shell script.
</p>

<p> In particular, I've created shell scripts for catching three problems:
</p><ol>
<li>abuse of the passive voice,</li>
<li>weasel words, and</li>
<li>lexical illusions.</li>
</ol>


<p> And, I've integrated these into the build system of our LaTeX documents.  </p>


<p> The point of these scripts is not to ban all use of constructs
like the passive voice.

(When it comes to writing, there are exceptions to every "rule.")
</p>

<p>
The point of these scripts is to make sure that my students and I make a
<em>conscious</em> choice to use these constructs.
</p>

<p> When these scripts highlight a sentence, my students should ask
themselves, "Is there a better way to say what I said--a way to make
the text read with more clarity and precision?"  Often enough, the
answer is "yes."  </p>


<p> The meta-point of this article is that writers should learn their
individual weaknesses.

And, when writers are programmers, we should enlist automation to
combat these weaknesses.<sup>1</sup></p>



  
</div><div id="content-container">

  

<h2>More resources</h2>

<p>
There are four books at arm's length in my office:
</p>





<h2>Precision and clarity</h2>

<p> My Ph.D. advisor, <a href="http://www.ccs.neu.edu/home/shivers/">Olin Shivers</a>, taught me that technical writing is a balancing
act between precision, clarity and marketing. </p>

<p> After a recent round of paper submissions with my own
Ph.D. students, I've identified mechanically recognizable ways that
precision and clarity leak out of a paper: weasel words and abuse of
the passive voice.</p>

<p> So, I've written shell scripts to detect these leaks.  </p>


<p> (I don't think I'll ever be able to write a shell script that
detects bad marketing for a scientific idea.)  </p>






<p>Weasel words--phrases or words that sound good without conveying
information--obscure precision.  </p>


<p> I notice three kinds of weasel words in my students' writing: (1)
salt and pepper words, (2) beholder words and (3) lazy words.  </p>


<h3>Salt and pepper words</h3>

<p> New grad students sprinkle in salt and pepper words for seasoning.

These words look and feel like technical words, but convey nothing.  </p>


<p> My favorite salt and pepper words/phrases are <em>various</em>,
<em>a number of</em>, <em>fairly</em>, and <em>quite</em>.

Sentences that cut these words out become stronger.
</p>


<pre> Bad:    It is quite difficult to find untainted samples.
 Better: It is difficult to find untainted samples.
</pre>

<pre> Bad:    We used various methods to isolate four samples.
 Better: We isolated four samples.
</pre>



<h3>Beholder words</h3>

<p>
Beholder words are those whose meaning is a function of the reader; for example:
<em>interestingly</em>,
<em>surprisingly</em>,
<em>remarkably</em>,
or
<em>clearly</em>.
</p>


<p>
Peer reviewers don't like judgments drawn for them.
</p>

<pre>Bad:    False positives were surprisingly low.
Better: To our surprise, false positives were low.
Good:   To our surprise, false positives were low (3%).
</pre>


<h3>Lazy words</h3>

<p> Students insert lazy words in order to avoid making a quantitative
characterization.

They give the impression that the author has not yet conducted 
said characterization.
</p>

<p>
These words make the science feel unfirm and unfinished.
</p>


<p> The two worst offenders in this category are the words
<em>very</em> and <em>extremely</em>.  These two adverbs are never
excusable in technical writing.  Never. </p>


<p> Other offenders include <em>several</em>, <em>exceedingly</em>,
<em>many</em>, <em>most</em>, <em>few</em>, <em>vast</em>.  </p>


<pre> Bad:    There is very close match between the two semantics.
 Better: There is a close match between the two semantics.
</pre>


<h3>Adverbs</h3>

<p>
In technical writing, adverbs tend to come off as weasel words.
</p>

<p> I'd even go so far as to say that the removal of all adverbs from
any technical writing would be a net positive for my newest graduate
students.

(That is, new graduate students weaken a sentence when they insert adverbs more frequently than they strengthen it.)</p>


<pre> Bad:    We offer a completely different formulation of CFA.
 Better: We offer a different formulation of CFA.
</pre>


<h3>A script to find weasel words</h3>

<p> With this script, you can supply an alternate list of weasel words
in a file if you don't like the default: </p>

<pre>#!/bin/bash

weasels="many|various|very|fairly|several|extremely\
|exceedingly|quite|remarkably|few|surprisingly\
|mostly|largely|huge|tiny|((are|is) a number)\
|excellent|interestingly|significantly\
|substantially|clearly|vast|relatively|completely"

wordfile=""

# Check for an alternate weasel file
if [ -f $HOME/etc/words/weasels ]; then
    wordfile="$HOME/etc/words/weasels"
fi

if [ -f $WORDSDIR/weasels ]; then
    wordfile="$WORDSDIR/weasels"
fi

if [ -f words/weasels ]; then
    wordfile="words/weasels"
fi

if [ ! "$wordfile" = "" ]; then
    weasels="xyzabc123";
    for w in `cat $wordfile`; do
        weasels="$weasels|$w"
    done
fi


if [ "$1" = "" ]; then
 echo "usage: `basename $0` &lt;file&gt; ..."
 exit
fi

egrep -i -n --color "\\b($weasels)\\b" $*

exit $?






</pre>



<h2>Passive voice</h2>

<p> There are times when the passive voice is acceptable in
technical writing. </p>


<p> I also believe, as with adverbs, that removal of the passive voice would have been a net improvement for over half the technical writing I've edited.

(That is, students abuse the passive voice more often than
they use it well.)
</p>

<p>
Of course, I do not advocate dogmatic removal of the passive voice.
</p>


<p>
The passive voice is tough to shake.

Even while writing this article, I caught myself defaulting to the passive
in situations where the active was better.
</p>

<p>
The passive voice is bad when it hides relevant or explanatory information:
</p>

<pre> Bad:    Termination is guaranteed on any input.
 Better: Termination is guaranteed on any input by a finite state-space.
 OK:     A finite state-space guarantees termination on any input.
</pre>

<p>
In the first sentence, the passive hides relevant information.
</p>

<p> The second sentence includes the relevant information, but the passive misplaces the emphasis.  </p>

<p>
The third sentence contains all the relevant information, and it feels crisp.
</p>


<p> There's one case where I think the passive is preferrable in technical writing--when the subject is truly irrelevant: </p>


<pre> OK: 4 mL HCl were added to the solution.
</pre>

<p>
Even in this example, I personally don't believe it's egregious to use <em>we</em>:
</p>

<pre> OK (to me): We added 4 mL HCl to the solution.
</pre>


<p>
In summary, 
for each use of the passive highlighted by my script, ask the following questions:
</p>

<ol>
  <li>Is the agent relevant yet unclear?</li>
  <li>Does the text read better with the sentence in the active?</li>
</ol>

<p> If the answer to both questions is "yes," then change to the active.  </p>

<p> If only the answer to the first question is "yes," then specify the agent. </p>


<h3>A script to find passive voice</h3>
<pre>#!/bin/bash

irregulars="awoken|\
been|born|beat|\
become|begun|bent|\
beset|bet|bid|\
bidden|bound|bitten|\
bled|blown|broken|\
bred|brought|broadcast|\
built|burnt|burst|\
bought|cast|caught|\
chosen|clung|come|\
cost|crept|cut|\
dealt|dug|dived|\
done|drawn|dreamt|\
driven|drunk|eaten|fallen|\
fed|felt|fought|found|\
fit|fled|flung|flown|\
forbidden|forgotten|\
foregone|forgiven|\
forsaken|frozen|\
gotten|given|gone|\
ground|grown|hung|\
heard|hidden|hit|\
held|hurt|kept|knelt|\
knit|known|laid|led|\
leapt|learnt|left|\
lent|let|lain|lighted|\
lost|made|meant|met|\
misspelt|mistaken|mown|\
overcome|overdone|overtaken|\
overthrown|paid|pled|proven|\
put|quit|read|rid|ridden|\
rung|risen|run|sawn|said|\
seen|sought|sold|sent|\
set|sewn|shaken|shaven|\
shorn|shed|shone|shod|\
shot|shown|shrunk|shut|\
sung|sunk|sat|slept|\
slain|slid|slung|slit|\
smitten|sown|spoken|sped|\
spent|spilt|spun|spit|\
split|spread|sprung|stood|\
stolen|stuck|stung|stunk|\
stridden|struck|strung|\
striven|sworn|swept|\
swollen|swum|swung|taken|\
taught|torn|told|thought|\
thrived|thrown|thrust|\
trodden|understood|upheld|\
upset|woken|worn|woven|\
wed|wept|wound|won|\
withheld|withstood|wrung|\
written"

if [ "$1" = "" ]; then
 echo "usage: `basename $0` &lt;file&gt; ..."
 exit
fi

egrep -n -i --color \
 "\\b(am|are|were|being|is|been|was|be)\
\\b[ ]*(\w+ed|($irregulars))\\b" $*

exit $?
</pre>



<h2>A script to find lexical illusions</h2>

<p>
Read the following text:
</p>

 <pre> Many readers are not aware that the
 the brain will automatically ignore
 a second instance of the word "the"
 when it starts a new line. </pre>

<p>
Read that same text again, but with different line breaks:
</p>

 <pre> Many readers are not aware that the the
 brain will automatically ignore a second
 instance of the word "the" when it starts
 a new line. </pre>

<p>Duplicating words is a phenomenon of electronic composition.  </p>

<p> They seem to happen as cut and paste accidents, and most
frequently it's with the word <em>the</em>.</p>

<p> Unfortunately, it can be difficult to proofread away duplicate
words, because this lexical illusion prevents us from finding
them.</p>

<p> No reviewer will shoot down a submission solely because it contains
duplicate words, but when small mistakes like spelling errors and
duplicate words pile up, they convey a lack of proofreading. </p>

<p> Reviewers will (rightfully) interpret inadequate proofreading as a
lack of respect for their time and attention.  </p>

<p>
Fortunately, a short perl script hunts these bugs down:
</p>

<pre>#!/usr/bin/env perl

# Finds duplicate adjacent words.

use strict ;

my $DupCount = 0 ;

if (!@ARGV) {
  print "usage: dups &lt;file&gt; ...\n" ;
  exit ;
}

while (1) {
  my $FileName = shift @ARGV ;

  # Exit code = number of duplicates found.  
  exit $DupCount if (!$FileName) ;

  open FILE, $FileName or die $!; 
  
  my $LastWord = "" ;
  my $LineNum = 0 ;
  
  while (&lt;FILE&gt;) {
    chomp ;

    $LineNum ++ ;
    
    my @words = split (/(\W+)/) ;
    
    foreach my $word (@words) {
      # Skip spaces:
      next if $word =~ /^\s*$/ ;

      # Skip punctuation:
      if ($word =~ /^\W+$/) {
        $LastWord = "" ;
        next ;
      }
      
      # Found a dup? 
      if (lc($word) eq lc($LastWord)) {
        print "$FileName:$LineNum $word\n" ;
        $DupCount ++ ;
      } # Thanks to Sean Cronin for tip on case.

      # Mark this as the last word:
      $LastWord = $word ;
    }
  }
  
  close FILE ;
}


</pre>



<h2>Makefile integration</h2>

<p> I keep a local copy of the scripts in the <code>bin/</code>
directory of each paper's repository.

Then, I add a <code>make proof</code> rule to Makefile: </p>

<pre># Check style:
proof:
        echo "weasel words: "
        sh bin/weasel *.tex
        echo
        echo "passive voice: "
        sh bin/passive *.tex
        echo
        echo "duplicates: "
        perl bin/dups *.tex
</pre>



<h2>A few words on marketing</h2>

<p> A grad student's first impulse when she starts grad school is to
assume that, as long as she tells the whole truth and nothing but the
truth, everything she writes has to be accepted for publication.</p>

<p>
But, there are a lot of true things.
</p>

<p> Given the volume of submissions to top peer-reviewed venues, there
will always be more than enough technically correct papers to fill the
venue. </p>

<p> The function of peer review has become to decide which true
things are worth knowing.  </p>

<p> In that sense, peer reviewers are the guardians of the scientific
community's most limited resource: our collective attention span.  </p>

<p> To market a paper, the author must make a compelling case for why
her idea deserves access to that resource.</p>



<h2>Resources</h2>

<ul>
  <li>
Benjamin Beckwith has contributed a
<a href="http://github.com/bnbeckwith/writegood-mode">"writegood"</a> mode for emacs inspired by these scripts.
  </li>
</ul>



<hr>

<p> [1] For example, my colleague <a href="http://blog.regehr.org/">John Regehr,</a> suggested simple scripts to catch
students' use of superfluous phrases like, "Note that," and "Notice that."

Others have suggested scripts for using the future tense in technical writing.
</p>




  

 <hr>

 


  
</div></div>]]></description>
        </item>
    </channel>
</rss>