<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 11 Apr 2025 21:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Social Security Administration Moving Public Communications to X (155 pts)]]></title>
            <link>https://www.wired.com/story/social-security-administration-regional-office-elon-musk-x/</link>
            <guid>43657079</guid>
            <pubDate>Fri, 11 Apr 2025 18:47:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/social-security-administration-regional-office-elon-musk-x/">https://www.wired.com/story/social-security-administration-regional-office-elon-musk-x/</a>, See on <a href="https://news.ycombinator.com/item?id=43657079">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>The Social Security Administration will no longer be communicating with the media and the public through press releases and “dear colleague” letters, as it shifts its public communication exclusively to X, sources tell WIRED. The news comes amid major staffing cuts at the agency.</p><p>“We are no longer planning to issue press releases or those dear colleague letters to inform the media and public about programmatic and service changes,” said SSA regional commissioner Linda Kerr-Davis in a meeting with managers earlier this week. “Instead, the agency will be using X to communicate to the press and the public … so this will become our communication mechanism.”</p><p>Previously, the agency used dear colleague letters to engage with advocacy groups and third-party organizations that help people access social security benefits. Recent letters covered everything from the agency’s new <a data-offer-url="https://www.ssa.gov/news/advocates/2025/#2025-03-26" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.ssa.gov/news/advocates/2025/#2025-03-26&quot;}" href="https://www.ssa.gov/news/advocates/2025/#2025-03-26" rel="nofollow noopener" target="_blank">identity verification procedures</a> to updates on the accuracy of SSA <a data-offer-url="https://www.ssa.gov/news/advocates/2025/#2025-03-17" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.ssa.gov/news/advocates/2025/#2025-03-17&quot;}" href="https://www.ssa.gov/news/advocates/2025/#2025-03-17" rel="nofollow noopener" target="_blank">death records</a> (“less than one-third of 1 percent are erroneously reported deaths that need to be corrected,” the agency wrote, in contrast to what <a href="https://www.wired.com/story/elon-musk-doge-social-security-150-year-old-benefits/">Elon Musk</a> claims).</p><p>The letters and press releases were also a crucial communications tool for SSA employees, who used them to stay up on agency news. Since SSA staff cannot sign up for social media on government computers without submitting a special security request, the change could have negative consequences on the ability for employees to do their jobs.</p><p>It could also impact people receiving social security benefits who rely on the letters for information about access benefits. “Do they really expect senior citizens will join this platform?” asked one current employee. “Most managers aren’t even on it. How isn’t this a conflict of interest?” Another staffer added: “This will ensure that the public does not get the information they need to stay up-to-date.”</p><p>Linda Kerr-Davis also did not immediately respond to a request for comment by WIRED.</p><p>“This reporting is misleading. The Social Security Administration is actively communicating with beneficiaries and stakeholders,” says Liz Huston, a White House spokesperson. "There has not been a reduction in workforce. Rather, to improve the delivery of services, staff are being reassigned from regional offices to front-line help – allocating finite resources where they are most needed. President Trump will continue to always protect Social Security.”</p><p>Elon Musk, who is leading the charge to radically reduce the size of the federal workforce on behalf of President Trump, bought X (then Twitter) in October 2022. The platform has for years battled the spread of misinformation. After he purchased the company, Musk fired contract content moderators and shifted content moderation efforts to a crowd-sourced fact-checking tool called Community Notes. In 2023, <a href="https://www.pbs.org/newshour/politics/musks-x-is-the-largest-source-of-disinformation-eu-official-says">an EU official warned</a> the platform was a major source of fake news, based on a commissioned study that reported “Twitter has the highest discoverability" of disinformation.</p><p>The regional office workforce will soon be cut by roughly 87 percent, sources tell WIRED. Regional office staff manage IT support, policy questions, labor relations issues, reasonable accommodations guidance, and public relations. Since February, the SSA has cut 7,000 jobs, according to <a data-offer-url="https://www.washingtonpost.com/politics/2025/04/04/social-security-layoffs-trump-musk/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.washingtonpost.com/politics/2025/04/04/social-security-layoffs-trump-musk/&quot;}" href="https://www.washingtonpost.com/politics/2025/04/04/social-security-layoffs-trump-musk/" rel="nofollow noopener" target="_blank"><em>The Washington Post</em></a>.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>Today, the agency has 547 employees working in the nearly dozen regional offices (previously, the number was closer to 700, but many people have retired, a current employee with knowledge of the staffing numbers says). After the cuts, the number is expected to be closer to 70. “We know that you all depend on these folks to manage your front line, to help with questions,” said Kerr-Davis, who works in the Kansas City regional office. “I'm going to be pretty candid here in sharing that the support will be pretty minimal until we can stand up our skinny regional office.”</p><p>Kerr-Davis acknowledged that the restructuring could limit the agency’s ability to combat fraud, a major goal of Elon Musk’s so-called Department of Government Efficiency. “Won't losing subject matter experts lead directly to fraud, waste, and abuse?” she asked on the call, reading a question from an SSA staffer. “And yes, I mean, we do rely on [their] help … Things are going to break, and they're going to break fast.”</p><p>On the call, Kerr-Davis sounded resigned as she relayed news of the changes. “I know this probably sounds very foreign to you. It did to me as well,” she said. “It’s not what we are used to, but we are in different times now.”</p><p><em>Vittoria Elliott and David Gilbert contributed reporting.</em></p><p><em>This story has been updated with comment from the White House.</em></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The PS3 Licked the Many Cookie (103 pts)]]></title>
            <link>https://darkcephas.github.io/ps3_failed/ps3_failed.html</link>
            <guid>43656279</guid>
            <pubDate>Fri, 11 Apr 2025 17:27:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://darkcephas.github.io/ps3_failed/ps3_failed.html">https://darkcephas.github.io/ps3_failed/ps3_failed.html</a>, See on <a href="https://news.ycombinator.com/item?id=43656279">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    <p>
      This post is inspired by
      <a href="https://raphlinus.github.io/gpu/2025/03/21/good-parallel-computer.html#cell" target="_blank"> I want a
        good parallel computer</a>
    </p>

    <p>
      It is important to understand why the <a href="https://en.wikipedia.org/wiki/PlayStation_3" target="_blank">
        PS3</a> failed. The perspective here was juniorish dev working on simulation and
      rendering in triple-A. I remember less than I knew and knew less than most!
    </p>
    <p><img src="https://darkcephas.github.io/ps3_failed/ps3_og_image.png" alt="OG PS3"></p><p>
      <i>However</i>, what I can provide here is the hindsight of someone who actually developed and shipped titles
      <sup>1</sup> on
      the PS3.
      I wanted the PS3 to succeed. To be more specific; I wanted <a href="https://en.wikipedia.org/wiki/Manycore_processor" target="_blank">Many-Core</a> to succeed.
    </p>
    <p><b>
      The PS3 failed developers because it was an excessively <a href="https://en.wikipedia.org/wiki/Heterogeneous_computing" target="_blank"> heterogenous</a> computer;
    </b>
    and low level heterogeneous compute resists composability.<sup>2</sup></p><h2>
      More like Multicore than Many
    </h2>
    <div><p>
      The primary characteristic of <a href="https://en.wikipedia.org/wiki/Manycore_processor" target="_blank">Many-Core</a> is, by virtue of the name, the high core count. Many-core is simply a tradeoff
      that enables wide parallelism through more explicit  (programmer) control.
      </p><table>
      <tbody><tr>
        <th>CPU</th>
        <th>GPU</th>
        <th>Many</th>
      </tr>
      <tr>
        <td>Few Complex Cores</td>
        <td>Wide SIMD</td>
        <td>Many Simpler Cores</td>
      </tr>
      <tr>
        <td>Low latency, OOO, SuperScalar</td>
        <td>vector instruction pipe, High latency</td>
        <td>RISC-like, scalar</td>
      </tr>
      <tr>
        <td>Cached and Coherency Protocol</td>
        <td>Fences, flushes, incoherence</td>
        <td>Message passing, local storage, DMA</td>
      </tr>
      <tr>
        <td>Explicit coarse synchronization</td>
        <td>Implicit scheduling</td>
        <td>Explicit fine synchronization</td>
      </tr>
    </tbody></table>
    <p>
    


    At first glance, the SPEs of the PS3 fit the bill. They <i>seem</i> to have all the characteristics of Many-Core.
    The
    problem is that most important characteristic, <i>that there is many cores</i>, is significantly lacking.
    </p><p>
    
    <img src="https://darkcephas.github.io/ps3_failed/ps3_hetrogenous_image.png" alt="PS3 heterogeneous diagram">
    First off you didnt get the full 8 SPEs as a (game) developer. Out of the 8 SPEs one was disabled due to die yield
    and the
    OS got a core and a half. While this changed with updates one only really got 5-6 SPEs to work with. The Xbox360
    in
    contrast had what amounted to 3 PPEs (2 more). So the Cell really featured at most 3 more (<a href="#local_memory_id">difficult to use</a>) cores
    than the Xbox360.
    </p></div>

    <h2>
      Computationally Weak Components
    </h2>

    <p>
      The claim from wiki is a single SPE has 25 GFlops and the <a href="https://en.wikipedia.org/wiki/RSX_Reality_Synthesizer" target="_blank"> PS3 GPU</a> has 192 GFlops.<b> If
        you
        absolutely maxed out your SPE
        usage you would still not even be close to the power of the underpowered PS3 GPU. </b> For contrast the Xbox360
      gpu had
      240
      GFlops. The GPU of the PS3 has separate Vertex and Pixel shading. In contrast, the XBox360 was shared
      computational resources so it could load balance between heavy vertex shading vs heavy pixel shading. (Examples
      here would be <a href="https://en.wikipedia.org/wiki/Skeletal_animation" target="_blank">character skinning</a>
      vs UI rendering)
    </p>


    <p><img src="https://darkcephas.github.io/ps3_failed/ps3_vs_xbox.png" alt="PS3 heterogeneous diagram"></p><p>
      As a game developer these Flops numbers reflect the experience of developing on these respective platforms. This
      was particularly noticeable in something like post processing where the demands of the vertex unit are very low
      (large quads).
    </p>

    <p>
      Due to the weakness of the GPU vertex unit developers would use the SPEs to do skinning.
      The pixel shading unit did not have constants. So one would also have to do shader patching on the SPEs before
      these
      programs could be sent to the GPU. All of these things require synchronization between the CPU, SPE and GPU and
      interact with workload balancing. In retrospect I also assume that dynamic branching in the shader was either
      impossible or prohibitive so this is why everyone did excessive shader permutations. This means 10s of megabytes
      of shaders. Again contrast this with the XBOX360 which supported wave
      operations <sup>3</sup> and I even used this feature back in the day. <b> Because each component of the PS3 is
        weak on its own they all must be employed in concert to compete with (the) less heterogeneous platforms. </b>
    </p>

    <h2>
      Computer Not Super
    </h2>

    <p>
      While the Cell could behave more like a supercomputer I saw it mostly used more like generic GPU compute. I never
      saw production code that did anything but dispatch N jobs from the PPE. I never saw direct inter SPE communication
      even though I recall such a thing was possible (mailboxes). This is similar to how GPU inter workgroup workloads
      are more rare and difficult.
    </p>

    <p>
      The hetrogenous nature was everywhere. Even the PPE was quite different from an SPE. The SPEs had only vector
      registers; the PPE had fp, gp, and vector
      registers. Is this really bad? No<sup>4</sup>, but it makes everything more heterogeneous and therefore more
      complex. Getting
      maximum performance out of these SPE units means that you were likely doing async DMAs while also doing compute
      work. <b>These nuances could be a fun challenge for a top programmer but ends of being more of an obstacle to
        development for game studios. </b>
    </p>

    <h2>
      Sharp Edges
    </h2>

    <p>
      The PS3 had 512 Mb total memory but 256 MB was dedicated to graphics and only had REDACTED Mb/s access from the
      CPU. So
      this means in addition to the 256 MB purely for graphics you would also have to dedicate system memory for
      anything that was written to and from the GPU. The point here is inflexibility and heterogeneous nature.
    </p>

    <p>
      The PS3 had cool features but these were never general purpose and could only be exploited by careful attention to
      detail and sometimes significant engine changes. I recall using depth bounds for screen space shadowing and
      one could probably use it for a few other similar gpu techniques (lighting). There was also the alluring double z
      writes which is a one-off for depth maps if you dont actually use a pixel shader. I don't recall all the edges,
      but they were sharp and it meant performance cliffs if one strayed off them. The next section covers the sharpest
      edge of them all.
    </p>

    <h2 id="local_memory_id">
      The Challenge of Local memory
    </h2>

    <p>
      Of course the challenge that everyone knows about the SPEs is the constraint of memory access to local memory. You
      got 256Kb but in reality once you factored in stack and program you were probably down to 128Kb. This
      computational model is far more restrictive than even modern GPU compute where at least there you can access
      storage buffers directly.
    </p>

    <p>
      <b>Most code and algorithms cannot be trivially ported to the SPE. </b>
      C++ virtual functions and methods will not work out of the box. C++ encourages dynamic allocation of objects but
      these can point to anywhere in main memory. You would
      need to map pointer addresses from PPE to SPE to even attempt running a normal c++ program on the SPE. Also null
      (address 0x0) points to the start of local memory and is not a segfault to load from it.
    </p>

    <p>
      So, instead of running generic code on the SPE, what developers did was write handcrafted SPE friendly code for
      heavy
      but parallelizable parts of their engine. <b>With enough talent and investment you can eke out the full compute
        power of the PS3.<sup>5</sup> </b> Of course this is maybe easier as a <a href="https://en.wikipedia.org/wiki/Video_game_developer#Types" target="_blank">first party developer</a> as you
      can at least
      focus on this exotic hardware and craft your engine and game features around the type compute available. This is
      why <a href="https://en.wikipedia.org/wiki/Uncharted_3:_Drake%27s_Deception" target="_blank">Naughty Dog</a>
      famously came so close to showing us the full potential of the console.

    </p><figure>
      <figcaption>
        <a href="https://www.mobygames.com/game/53611/uncharted-3-drakes-deception/screenshots/ps3/531831/" target="_blank">Uncharted 3: Mobygames image</a>
      </figcaption>
      <img src="https://cdn.mobygames.com/screenshots/4207546-uncharted-3-drakes-deception-playstation-3-is-that-a-well-in-the.jpg" alt="Uncharted 3 PS3 credit mobygames">
    </figure>
    

    <h2>
      What could have been
    </h2>

    <p>
      Had the PS3 been what was originally designed it would have been a much more exotic but much less heterogeneous
      machine.
    </p>

    <p>
      The original design was approximately 4 Cell processors with high frequencies. Perhaps massaging this design would
      have led to very homogenous high performance Many-Core architecture. At more than 1 TFlop of general purpose
      compute it would have been a beast and not a gnarly beast but a sleek smooth uniform tiger.
    </p>
    <p>
      One has to actually look at the PS3 as the
      <a href="https://devblogs.microsoft.com/oldnewthing/20091201-00/?p=15843" target="_blank">licked cookie</a>
      <sup>6</sup> of
      Many-Core designs. This half-baked, half-hearted attempt became synonymous with the failure of Many-Core. <b>
        I
        used to think that PS3 set back Many-Core for decades, now I wonder if it simply killed it forever. </b>
    </p>



    <h2>
      Refs
    </h2>

    <p>
      <sup> 1 </sup> <a href="https://www.mobygames.com/person/516875/peter-mcneeley/credits/" target="_blank"> Some of
        the titles I have worked on. </a>
    </p>

    <p>
      <sup> 2 </sup> I will not provide a proof or reference but the mathematical issue is that the space is not covered
      uniformly. This low level composability problem is often seen instruction selection when writing assembly.
    </p>

    <p>
      <sup> 3 </sup>The XBox360 gpu had wave operations like ifany/ifall that are similar to modern control flow
      subgroup operations.
    </p>

    <p>
      <sup> 4 </sup> The fact that it was only vectors on the SPEs was present to the programmer due to loads/stores
      having to also be vector aligned
    </p>

    <p>
      <sup> 5 </sup> <a href="https://www.neogaf.com/threads/ps3-games-list-spe-usages.184843/" target="_blank"> PS3
        SPE usage</a> : it is clear that some games had higher utilization than others.
    </p>

    <p>
      <sup> 6 </sup>I am not sure my usage fits Raymond's narrow specifications.
    </p>


    <p>
      <a href="https://classic.copetti.org/writings/consoles/playstation-3/" target="_blank"> classic.copetti.org </a>
      Source for images and some technical specifications.
    </p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Datastar: Web Framework for the Future? (103 pts)]]></title>
            <link>https://chrismalek.me/posts/data-star-first-impressions/</link>
            <guid>43655914</guid>
            <pubDate>Fri, 11 Apr 2025 16:53:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chrismalek.me/posts/data-star-first-impressions/">https://chrismalek.me/posts/data-star-first-impressions/</a>, See on <a href="https://news.ycombinator.com/item?id=43655914">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="tldr"><p><a href="#tldr">#
</a>TLDR</p></h2><p><a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>is a new <a href="https://hypermedia.systems/" target="_blank" rel="noopener noreferrer">hypermedia
</a>framework that makes building real-time web applications simpler and more efficient. It prioritizes server-side logic, uses “signals” for automatic UI updates, and leverages Server-Sent Events for lightning-fast performance. If you’re looking for a streamlined alternative to traditional JavaScript frameworks or HTMX, <a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>is worth exploring.</p><p>However, it requires that you approach web development with a fresh perspective, embracing server-driven architecture and reactive programming.</p><h2 id="introduction"><p><a href="#introduction">#
</a>Introduction</p></h2><p>I’ve been diving into <a href="https://hypermedia.systems/" target="_blank" rel="noopener noreferrer">hypermedia
</a>lately looking at frameworks and libraries to build a new product and to help quickly create proof of concepts and web tools for clients.</p><p>HTMX at the time of writing was getting basically all the attention in the Hypermedia world. It demos really well and the examples are great. However, this article is NOT about HTMX.</p><p>I believe hypermedia and HTMX offer a promising direction, but when I tried to develop a new product using HTMX, I felt stuck due to challenges in figuring out the project structure, the HTML structure combined with excessive HTMX tags and realizing HTMX cannot handle the front-end interactively for which you have to bring in something like AlpineJS. (Did I mention I hate javascript?). HTMX is cool but I think before you start a new project with it you might want to look at <a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>as well.</p><p>I had looked at Datastar in the past while evaluating HTMX but I did not grasp its potential over HTMX until I took a second look at started to feel some HTMX pain. Your results may vary.</p><h3 id="my-background"><p><a href="#my-background">##
</a>My Background</p></h3><p>First let’s understand my biased perspective. Everyone’s background is different and I think it is important to understand where I am coming from.</p><ul><li>I am an expert in the PeopleSoft ERP platform creating “enterprise” applications<ul><li>PeopleSoft is a large ERP system that is used by many large organizations. It is a very powerful but a bit dated. Since it is the hub of most corporate data it is not going away anytime soon but SAAS apps are slowly chipping away at it.</li><li>I spent most of my time creating business CRUD applications that are used by business users and students.</li><li>These are always “config” driven because PeopleSoft makes it easy to create setup/config tables and GUIs to manage the data. Think of PeopleSoft has one big ball of “feature flags” in the form of setup tables.</li><li>PeopleSoft completely abstracts the front-end away. You never worry about the front-end. The back-end controls the front-end. PeopleSoft was built 30 years ago and it’s meta-data architecture allowed the porting from a client-server architecture to a web architecture. Developers can deploy applications and never worry about JavaScript or even HTML and CSS at all. This is amazing.<ul><li>This has kept me away from the front-end for most of my career. I have always been a back-end developer <strong>but with PeopleSoft a back-end developer can easily deploy front-end user-facing applications.</strong> So I am used to handling and delivering solutions to clients that are 100% server-side but also user facing. You don’t need a front-end developer to deploy a PeopleSoft application.</li></ul></li><li>These applications contain some of the most sensitive corporate data from payroll, biographic data, student data, financial data, etc. You cannot “move fast and break things” in these applications. You have to be very careful with the data and the business logic.</li><li>In these applications, you cannot trust code running in the browser and your backend code must protect access to the data.</li></ul></li><li>I use Go for most of my side projects. I like the simplicity, speed and type safety of Go.</li></ul><h2 id="what-am-i-looking-for"><p><a href="#what-am-i-looking-for">#
</a>What Am I looking for?</p></h2><p>I have been looking for a framework or a set of libraries to build a new product that is modern and efficient. I had been looking at Hypermedia to do this.</p><p>My rough requirements are:</p><ul><li>A modern web framework that is efficient and can handle real-time updates.</li><li>A framework that can handle the front-end and the back-end but rely 100% on the back-end where possible.</li><li>A framework that can handle the front-end state and interactions.</li><li>Simplicity, Simplicity, Simplicity</li><li>A framework where I can use Go on the back-end.</li><li>Rapid development and prototyping</li><li>Avoid Javascript and NPM as much as possible or totally from a development perspective.<ul><li>Javascript makes me queezy 🤢 and every time I see NPM I get a headache 😵‍💫 and my instincts tell me to run away. I am not a fan of the JavaScript ecosystem.</li></ul></li><li>A “stable” platform that I can deploy something and just have it work for years without me worrying about it.</li><li>Rapid deployment to the cloud like Fly.io.</li><li>Freedom to use any CSS framework I want because those seem to change with the wind.</li><li>Avoid the split-team, JSON API approach of modern web apps where frontend and backend are disjointed.</li></ul><p>Previously I was looking at <a href="https://www.phoenixframework.org/" target="_blank" rel="noopener noreferrer">Phoenix
</a>but did not want to shift to another language. If you google “hypermedia” you will see a lot of articles about HTMX and it seems GitHub is full of projects using it. I think it is the most popular hypermedia library at the moment. I had looked hard at the <a href="https://github.com/jfyne/live" target="_blank" rel="noopener noreferrer">Live Golang Library
</a>.</p><h3 id="my-first-impressions-of-htmx"><p><a href="#my-first-impressions-of-htmx">##
</a>My First Impressions of HTMX</p></h3><p>Of course, I looked at HTMX and started to get excited about its potential. So I started to develop a real application after deploying some fairly simple “web tools” that my clients use for some one-off tasks.</p><p>I created some <strong>simple</strong> tools for myself and clients. I did not need any front-end state or interactions. I was just updating the UI with new HTML fragments from the server mostly as a result of field change or clicks. <strong>In these simple cases, HTMX handles those well.</strong></p><p>In my HTMX prototyping of a <strong>more complex</strong> application, the HTML code became a mess with HTMX tags for some parts that were non-trivial. I found myself struggling to understand the project structure and myriad of HTMX tags and how to manage the front-end and the back-end. I also needed some front-end functionality and state and HTMX is NOT designed to handle that. With HTMX you have to import AlpineJS and I broke out in hives because I hate JavaScript 😢.</p><p><strong>It was when I got to the more complex parts of the application that I felt HTMX was sort of getting in the way.</strong> I was starting to a get a huge lint ball building up. My intuition told me I was headed in the wrong direction. I hit the pause button and started to look for alternatives because I felt I was working too hard and the code was getting too complex.</p><h2 id="revisiting-datastar-and-a-turning-point"><p><a href="#revisiting-datastar-and-a-turning-point">#
</a>Revisiting Datastar and a Turning Point</p></h2><p>I was busy working at client sites and I had put a pause on my research for HTMX alterntives or some non-trival TODO application examples. Then on my YouTube feed one day, I saw an <a href="https://www.youtube.com/watch?v=HbTFlUqELVc" target="_blank" rel="noopener noreferrer">interview with creator of Datastar
</a>, and it had me look again. If I had not had some experience with HTMX I would not have “been ready” for that interview and understood some of the points he was making.</p><p>Here are some AI Generated main points of the interview. The ones I put in bold are the ones that got me to look again at Datastar:</p><ol><li>Delaney explores hypermedia beyond HTMX, focusing on real-time applications.</li><li>HTMX is seen as solving 1999’s hypermedia issues, but not pushing current boundaries.</li><li>Server-sent events (SSE) offer efficient real-time updates, surpassing traditional AJAX.</li><li><strong>Datastar, a modular alternative to HTMX, aims to simplify code and enhance performance.</strong></li><li>Game development’s efficiency can inspire web development’s speed and capability.</li><li><strong>SSE enables microsecond updates, challenging the limitations of polling in HTMX.</strong></li><li>The event-driven architecture is vital for scalable, efficient, real-time applications.</li><li><strong>Datastar’s declarative approach reduces complexity compared to HTMX.</strong></li><li><strong>Emphasizing server control, SSE can optimize and simplify web interactions.</strong></li><li>Delaney argues for a paradigm shift towards smarter use of hypermedia technology.</li></ol><p>I had looked at the <a href="https://data-star.dev/" target="_blank" rel="noopener noreferrer">Datastar
</a>documention previously when I was evaluating HTMX. I probably found it from some discussions on Reddit. However, I previously struggled to grasp its purpose and found its documentation confusing and dense. <strong>Honestly, I think it was just over my head when I first read the Datastar docs</strong>. I was not ready to understand it. It claims to be a better alternative to HTMX and AlpineJS. Another thing that turned me off was the project did not have a huge amount of contributors. <strong>However, after watching the interview from the Datastar author, I realized he might have some serious insights and I should give it another look. He is also a contributor to HTMX.</strong></p><p>The two things that I originally found confusing about Datastar were:</p><ul><li>Use of SSE (Server-Sent Events) for real-time updates.<ul><li>I had no experience with SSE and didn’t understand how it could be used in a real-time application. I had some vague memories from reading about how they did not scale or they suffered from issues with the connection being dropped. I had not looked at them in years. I have zero experience with them.</li></ul></li><li>The concept of “signals” for reactive programming.<ul><li>I did not realize how this can drastically simplify your code.</li><li>The term <code>signal</code> was confusing and I just did NOT get it on the first read. I had no experience with reactive programming. It turns out <code>signals</code> can help me avoid a lot of front-end code and state management but I did not realize that at first.</li></ul></li></ul><p>That interview had me look at the <a href="https://data-star.dev/guide/getting_started" target="_blank" rel="noopener noreferrer">documentation
</a><strong>again</strong> which had undergone some updates. After I spent some time reading and re-reading the documentation and looking at the <a href="https://data-star.dev/examples/click_to_edit" target="_blank" rel="noopener noreferrer">examples
</a>then trying some “hello world” examples on my own then the light bulb went off.</p><p><strong>Datastar might be the library I had been looking for. It looked promising after I started to peel off some onion layers.</strong></p><h2 id="what-is-datastar"><p><a href="#what-is-datastar">#
</a>What is Datastar?</p></h2><p>It seems the author <a href="https://github.com/delaneyj" target="_blank" rel="noopener noreferrer">delaneyj
</a>is taking some base primitives of HTMX and Hypermedia and making it easier to use and Datastar is his answer. Those are the claims at least. At the time of writing, I am still creating my first application with it. I am not ready to give a full review. But I am excited about the potential.</p><p>It seems that the Author is also a big fan of Go which helps me because any examples and libraries will have Go examples.</p><p>First let me clarify. I am not an expert in Datastar. I am just starting to learn it. <strong>I am also <em>NOT</em> a contributor or author to Datastar in any way.</strong> I am NOT taking any credit. I just want to spread the word about it as I don’t think it is getting the attention it deserves.</p><p>From my current understanding of Datastar, there are some key concepts that form the foundation of Datastar:</p><ul><li><strong>Signals</strong>: Reactive programming primitives that automatically update the UI when data changes.<ul><li>We will explore what the heck these are shortly.</li><li>You as the developer will decide what signals you want and put some special tags on the HTML elements that will trigger the server to send back updates to the signals. This will be associated with some sort of server state.</li></ul></li><li><strong>Server-Sent Events (SSE)</strong>: Efficient data streaming for real-time updates and page changes.<ul><li>These are just the repsonses sent back from the server to the client. They are just text over HTTP and are generally HTML fragments that update the UI. You can do many other things but let’s not get ahead of ourselves.</li></ul></li><li><strong>Actions</strong>: HTTP verbs (GET, POST, PUT, DELETE) that trigger server-side logic and UI updates.<ul><li>These are the HTML tags that you put on HTML elements that trigger the server to send back updates to the signals or new HTML fragments that update the UI.</li></ul></li><li><strong>Fragments</strong>: HTML snippets that update the UI based on server-side logic and user interactions.<ul><li>Your server side has to be structured to send back these HTML fragments that will update the UI.</li></ul></li></ul><p>You include the Datastar JavaScript library in your HTML and then you can start to use these concepts to build your application. You will also need to structure your server to handle the SSE requests and the GET/POST/PUT/DELETE requests.</p><p>Your backend choice does not matter.</p><h3 id="comparing-to-htmx"><p><a href="#comparing-to-htmx">##
</a>Comparing to HTMX</p></h3><p>I will mostly compare it to HTMX because that is the current perspective I have and HTMX is getting a ton of ink and attention.</p><ul><li><p>With HTMX to build a real application you need:</p><ul><li>Front End<ul><li>HTML</li><li>HTMX JavaScript and Tags to handle the triggers to backend updates</li><li><strong>AlpineJS</strong> (or other JavaScript framework) to handle front end logic and interactions and state.</li></ul></li><li>Backend<ul><li>HTML fragments that are that is dependent on your UX</li><li>Routes and Code to handle the GET/POST/PUT/DELETE</li></ul></li></ul></li><li><p>With Datastar to build a real application you need:</p><ul><li>Front End<ul><li>HTML</li><li>Datastar JavaScript to handle the triggers to backend updates and all the UI state and interactions.</li></ul></li><li>Backend<ul><li>HTML fragments that are dependent on your UX</li><li>Routes and Code to handle the GET/POST/PUT/DELETE</li><li>SSE routes to handle the updates to the signals</li></ul></li></ul></li></ul><p>So just from looking at the dependencies, Datastar gives you a single JavaScript library that can handle state on the front-end (signals) and making HTML attributes perform actions (GET/POST/PUT/DELETE) and handle the updates from the server. The server is 100% responsible for generating the HTML fragments and the updates to the signals.</p><ul><li>Datastar provides the benefits of HTMX and AlpineJS under a single library. You get the best of both worlds.</li><li>You can ditch much of what a front-end framework like React or Vue.js would provide and use Datastar. (Bold claim)</li><li>Your server is 100% responsible for generating HTML snippets and templates very similar to what you would do with HTMX.</li><li>It is back-end agnostic and can be used with Go, Node.js, PHP, etc. I prefer Go but it does NOT matter.</li><li>It relies heavily on Server-Sent Events (SSE) for real-time updates but after you pull the cover off of SSE it is just text HTTP responses with a some different headers.</li></ul><h3 id="what-is-a-signal-and-what-is-reactive-programming"><p><a href="#what-is-a-signal-and-what-is-reactive-programming">##
</a>What is a “Signal” and what is “Reactive Programming”?</p></h3><p>I think one of the biggest things that I missed in my initial read of the docs was the concept of a <code>signal</code>. This was not invented by Datastar and I believe is implemented in Datastar using a library from another developer.</p><p>I’m sure I’m just behind the curve and you may already know what a <code>signal</code>. I’m going to try to explain it. <strong>Getting an fundamental understanding of what a signal represents and can do for you is what give Datastar its power.</strong> It makes creating user interfaces much simpler and more maintainable.</p><p>Before we talk about signals, let’s talk about <code>reactive programming</code> because they are related. Reactive programming makes your application code automatically “react” to changes in data and propagate those changes automatically through the application. Instead of telling the computer how to do things step-by-step, you tell it what should happen when data changes and the computer figures out how to do it. It allows you to define a relationship between data sources and data consumers. When the data source changes, the data consumer is automatically updated. In a non-reactive system, you would have to manually update the data consumer when the data source changes. This is generally in the form of “on-change” Javascript events and functions to bind all the data and UI together.</p><p><em>Ok, Ok that is still too much jargon!!!!</em></p><h3 id="understanding-reactive-programming-via-spreadsheets"><p><a href="#understanding-reactive-programming-via-spreadsheets">##
</a>Understanding Reactive Programming via Spreadsheets</p></h3><p>I think the best way to understand reactive programming is to think about a spreadsheet.</p><ul><li>A spreadsheet application like Microsoft Excel or Google Sheets is the best example here.<ul><li>If you have any experience working with a complex spreadsheet in the engineering or financial realms, you have already worked with reactive programming.</li><li>I am NOT talking about using excel as a CSV viewer.</li><li>I am talking about using it as a tool to do calculations, and you “build up layers” of intermediate calculations to get to a final result.<ul><li>Very often you have intermediate calculations you need for other calculations or just doing checks for mistakes. This leads to a series of calculations that are dependent on each other. This is represented in formulas in spreadsheet cells that reference other cells. For complex calculations, you can have a “pipeline” or spiderweb of calculations that are dependent on each other.</li><li>I have an engineering degree and worked for engineering firms while in college and after college, I have used Excel for some very complex calculations and engineering modeling for HVAC cooling and plumbing systems. Excel is an great tool for this.</li></ul></li></ul></li></ul><p><strong>The amazing thing about Spreadsheets is that it is reactive.</strong> When you change a value in a cell, all the dependent cells are automatically updated. This is the essence of reactive programming. In you define the relationships between the “cells” or data elements and the underlying framework progates changes when data changes. This is very powerful and can simplify your code and make it more maintainable.</p><p>Here is a rough schematic of that where the arrows represent the dependencies between cells:</p><p><img alt="diagram" id="kroki-1" src="https://chrismalek.me/_4184341436229191900.svg"></p><p><strong>Datastar gives you some of these some of these same capabilities in a web application via the concept of a <code>signal</code>.</strong></p><p>I conceptually think of a Datastar <code>signal</code> as a link between “cell” or HTML elements. I did not make this connection at first.</p><ul><li>In Datastar, signals are used to update the UI when the data changes.</li><li>It can also trigger back end posts/gets/puts/deletes.</li></ul><p><code>Signals</code> are part of the glue of a Datastar application. You place <code>signals</code> on the page and the UI can be automatically updated. See the <a href="https://data-star.dev/examples/model_binding" target="_blank" rel="noopener noreferrer">Model Binding Example
</a>and the <a href="https://data-star.dev/examples/signals_changed" target="_blank" rel="noopener noreferrer">Signals change example</a></p><p>The server can send down updates to the “signals” (spreadsheet cells contents) or even send down a new HTML fragment that update the UI. In spreadsheet terms, this would be like adding new cells, charts, etc from the server.</p><p>There is more you can do with signals. If you read the docs and still don’t understand, I would re-read them. I had to read them a few times to get it.</p><h2 id="actions---getspostsputsdeletes"><p><a href="#actions---getspostsputsdeletes">#
</a>Actions - GETS/POSTS/PUTS/DELETES</p></h2><p>When/if you start looking at HTMX you see that you can trigger <a href="https://data-star.dev/reference/action_plugins" target="_blank" rel="noopener noreferrer">actions
</a>on the server with a GET/POST/PUT/DELETE. This is the same in Datastar. You can trigger these actions with a signal.</p><p>HTMX and Datastar both trigger this server request to the server to update or get updated UI elements. The difference is that Datastar uses SSE to get the updates back to the client. I was scratching my head on this until I started reading more about it and looking at the examples.</p><p>SSE is very simple. It is just text which I maybe had read before but since I had no real experience doing development work I did not understand. I work daily with HTTP web services and have a firm grasp on how HTTP works.</p><p>You can add some “tags” to the HTML elements (button on click, input on change, etc) and then when the user interacts with the page, the server can send down updates to the signals.</p><p>From the <a href="https://data-star.dev/examples/click_to_edit" target="_blank" rel="noopener noreferrer">Datastar examples
</a>:</p><div><pre tabindex="0"><code data-lang="html"><span><span>
</span></span><span><span><span>&lt;</span><span>div</span> <span>id</span><span>=</span><span>"contact_1"</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>label</span><span>&gt;</span>First Name: John<span>&lt;/</span><span>label</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>label</span><span>&gt;</span>Last Name: Doe<span>&lt;/</span><span>label</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>label</span><span>&gt;</span>Email: joe@blow.com<span>&lt;/</span><span>label</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;</span><span>div</span><span>&gt;</span>
</span></span><span><span>    <span>&lt;</span><span>button</span> <span>data-on-click</span><span>=</span><span>"@get('/examples/click_to_edit/contact/1/edit')"</span><span>&gt;</span>
</span></span><span><span>      Edit
</span></span><span><span>    <span>&lt;/</span><span>button</span><span>&gt;</span>
</span></span><span><span>    <span>&lt;</span><span>button</span> <span>data-on-click</span><span>=</span><span>"@get('/examples/click_to_edit/contact/1/reset')"</span><span>&gt;</span>
</span></span><span><span>      Reset
</span></span><span><span>    <span>&lt;/</span><span>button</span><span>&gt;</span>
</span></span><span><span>  <span>&lt;/</span><span>div</span><span>&gt;</span>
</span></span><span><span><span>&lt;/</span><span>div</span><span>&gt;</span>
</span></span></code></pre></div><p>The Datastar Javascript library running in the browser connects to the server with a connection that is kept open (until the server closes it). The server can send down updates to the signals. The server can also send down new HTML fragments that update the UI.</p><p>Datastar and HTMX have a similar concept but Datastar is built out of the box to handle updating <strong>any</strong> part of the page using the “ID” of the element. This is possible in HTMX but requires some extra work/tags.</p><p><strong>Basically, the Datastar “actions” can do anything that HTMX can do.</strong></p><h3 id="understanding-sse---it-is-just-text"><p><a href="#understanding-sse---it-is-just-text">##
</a>Understanding SSE - It is just text</p></h3><p>First let’s quickly understand SSE. At we will see SSE is just text. It is not some magical protocol. It is just text over HTTP with some special headers and browsers support it out of the box.</p><p>Datastar leverages SSE and the Javascript library expects and interprets the responses from the server in a certain way. The server can send down updates to the signals or new HTML fragments that will update the UI. The server can also close the connection when it is done.</p><p>For the authoritative source, refer to the <a href="https://data-star.dev/reference/sse_events" target="_blank" rel="noopener noreferrer">Datastar SEE Reference</a></p><p>In Datastar, you add some “tags” to the HTML elements (button “on click”, input “on change”, etc) which causes the browser to send a request to the server to open an SSE connection. That connection stays open until the server closes it. The server can send down updates to the signals or new HTML fragments that will update the UI.</p><p>For most CRUD applications you will be sending down HTML fragments that will update the UI. Then close the connection. If you were making some sort of real-time dashboard you would keep the connection open and send down updates to the UI as the server finds changes in the data. The server might be monitoring a database or some other data source and sending down updates to the UI as they change.</p><p>Let’s first look at the simplest case that is most like the HTMX examples which is more inline with CRUD applications.</p><p>You will have some attribute on an HTML element that will trigger an SSE call to the server. For simplicity, let’s say it is a button click.</p><div><pre tabindex="0"><code data-lang="html"><span><span><span>&lt;</span><span>button</span> <span>id</span><span>=</span><span>"button1"</span> <span>data-on-click</span><span>=</span><span>"@get('/example/buttonpress')"</span><span>&gt;</span>
</span></span><span><span>  Click Me
</span></span><span><span><span>&lt;/</span><span>button</span><span>&gt;</span>
</span></span></code></pre></div><p>That triggers an HTTP call by the browser with the SSE header of <code>Accept: text/event-stream</code> to the server.</p><div><pre tabindex="0"><code data-lang="http"><span><span><span>GET</span> <span>/example/buttonpress</span> <span>HTTP</span><span>/</span><span>1.1</span>
</span></span><span><span><span>Host</span><span>:</span> <span>example.com</span>
</span></span><span><span><span>Accept</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>Cache-Control</span><span>:</span> <span>no-cache</span>
</span></span></code></pre></div><p>There are options to send extra data and Datastar will automatically send along any local signals on the page. This automatic signal sending is a feature of Datastar that is not in HTMX and I did not realize how powerful it can be. In the HTTP example above I am NOT showing any signals because they are not needed for this simple example.</p><ul><li>Here the browser will keep the connection open and listen for updates from the server.</li><li>The server can send down updates to the <code>signals</code> or new HTML fragments that will update the UI.<ul><li>In this example, we will focus on HTML Fragments</li><li>The server sends back a response with the <code>event</code> of <code>Datastar-merge-fragments</code> and the <code>data</code> of the new HTML fragment that will update the UI.<ul><li>In this case, the server “knows” that its only job is to send back some HTML when the button in pressed and close the connection.</li></ul></li><li>The HTTP response will look like this:</li></ul></li></ul><div><pre tabindex="0"><code data-lang="http"><span><span><span>HTTP</span><span>/</span><span>1.1</span> <span>200</span> <span>OK</span>
</span></span><span><span><span>Content-Type</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>Cache-Control</span><span>:</span> <span>no-cache</span>
</span></span><span><span><span>Connection</span><span>:</span> <span>close</span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>data: fragments &lt;div id="button1"&gt;Button Pressed and removed.&lt;/div&gt;
</span></span></code></pre></div><p>In the example above, the server sends back a new HTML fragment that will replace the button that was clicked. The Datastar JavaScript running in the browser will match the <code>ID</code> of the element and replace it with the new HTML fragment.</p><p>The server could have sent several fragments to update any part of the page. HTMX can do this but I think Datastar is built out of the box to handle this.</p><ul><li>What is an example of a case where the SSE connection is kept open and the server sends down updates to the signals?<ul><li>Imagine a case, where you have a web page that is tracking the location of a food delivery vehicle.</li><li>The server is monitoring the GPS location of the vehicle and sending down updates to the signals to update the location of the truck on the map. The server can also send down new HTML fragments that update the UI.</li><li>The browser keeps an SSE connection open and the server can send down updates.</li><li>The HTTP response from the server will look like the following where there is some time elapsed between each of those <code>event</code> and <code>data</code> pairs.</li></ul></li></ul><div><pre tabindex="0"><code data-lang="http"><span><span><span>HTTP</span><span>/</span><span>1.1</span> <span>200</span> <span>OK</span>
</span></span><span><span><span>Content-Type</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>Cache-Control</span><span>:</span> <span>no-cache</span>
</span></span><span><span><span>Connection</span><span>:</span> <span>keep-alive</span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>data: fragments &lt;div id="truckstatus"&gt;The Truck is under a bridge&lt;/div&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>data: fragments &lt;div id="truckstatus"&gt;The truck is at Jersey Mikes and the driver is enjoying a sandwich&lt;/div&gt;
</span></span></code></pre></div><p>In HTMX you would have to implement polling which works but is not as efficient as SSE.</p><p>If you look at the <a href="https://data-star.dev/examples/progress_bar" target="_blank" rel="noopener noreferrer">Progress Bar Example
</a>you can see that there is an SEE endpoint there like this:</p><div><pre tabindex="0"><code data-lang="http"><span><span><span>GET https://data-star.dev/examples/progress_bar/data
</span></span></span></code></pre></div><p>It sends back a stream of updates to both the title and <code>div</code> with <code>id="progress_bar"</code>. As the browser receives the updates, it updates the UI in real-time. The browser keeps an SSE connection open and the server can send down updates to the signals. The server can also send down new HTML fragments that update the UI.</p><div><pre tabindex="0"><code data-lang="http"><span><span><span>HTTP</span><span>/</span><span>1.1</span> <span>200</span> <span>OK</span>
</span></span><span><span><span>cache-control</span><span>:</span> <span>no-cache</span>
</span></span><span><span><span>connection</span><span>:</span> <span>keep-alive</span>
</span></span><span><span><span>content-type</span><span>:</span> <span>text/event-stream</span>
</span></span><span><span><span>date</span><span>:</span> <span>Thu, 16 Jan 2025 05:36:26 GMT</span>
</span></span><span><span><span>fly-request-id</span><span>:</span> <span>01JHPSSQHJMTZ82JYZXE5T43BM-sjc</span>
</span></span><span><span><span>server</span><span>:</span> <span>Fly/3f202fc64 (2025-01-13)</span>
</span></span><span><span><span>transfer-encoding</span><span>:</span> <span>chunked</span>
</span></span><span><span><span>via</span><span>:</span> <span>1.1 fly.io</span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>retry: 1000
</span></span><span><span>data: fragments &lt;div id="progress_bar"&gt;&lt;svg width="200" height="200" viewbox="-25 -25 250 250" style="transform: rotate(-90deg)"&gt;&lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#e0e0e0" stroke-width="16px" stroke-dasharray="565.48px" stroke-dashoffset="565px"&gt;&lt;/circle&gt; &lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#6bdba7" stroke-width="16px" stroke-linecap="round" stroke-dashoffset="559px" stroke-dasharray="565.48px"&gt;&lt;/circle&gt; &lt;text x="44px" y="115px" fill="#6bdba7" font-size="52px" font-weight="bold" style="transform:rotate(90deg) translate(0px, -196px)"&gt;1%&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>retry: 1000
</span></span><span><span>data: selector title
</span></span><span><span>data: fragments &lt;title&gt;1%&lt;/title&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>event: Datastar-merge-fragments
</span></span><span><span>retry: 1000
</span></span><span><span>data: fragments &lt;div id="progress_bar"&gt;&lt;svg width="200" height="200" viewbox="-25 -25 250 250" style="transform: rotate(-90deg)"&gt;&lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#e0e0e0" stroke-width="16px" stroke-dasharray="565.48px" stroke-dashoffset="565px"&gt;&lt;/circle&gt; &lt;circle r="90" cx="100" cy="100" fill="transparent" stroke="#6bdba7" stroke-width="16px" stroke-linecap="round" stroke-dashoffset="554px" stroke-dasharray="565.48px"&gt;&lt;/circle&gt; &lt;text x="44px" y="115px" fill="#6bdba7" font-size="52px" font-weight="bold" style="transform:rotate(90deg) translate(0px, -196px)"&gt;2%&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>...
</span></span></code></pre></div><h3 id="example-of-a-datastar-application"><p><a href="#example-of-a-datastar-application">##
</a>Example of a Datastar Application</p></h3><p>Let’s take a look at a high level of how a Datastar application might be structured. This is a very high level and I am still learning Datastar so don’t nitpick me if there are mistakes here.</p><p>Let’s imagine you have a page that allows you to track your food delivery.</p><ul><li>The driver has some application in his phone that reports up to a central server where they are.</li><li>There is a web page I can go to that will allow me to track the driver up until the order goes into “delivered” status.</li><li>That Datastar application might look like this:<ul><li>The browser sends a GET request to the server to get the initial page at <code>https://feedme.now/delivery/driver/location</code></li><li>The server sends back the full page HTML template.<ul><li>This page has some specific HTML tags that presents a button that allows you to start the status updates of how far the driver is from their house. The page will automatically update as the driver gets closer.</li></ul></li><li>The user presses the “Track Driver” button and the browser sends a GET request to the server to open an SSE connection to <code>https://feedme.now/delivery/driver/location/_monitor</code> (This can be any URL)<ul><li>The browser will keep this SSE connection open until the server closes it.</li><li>The Datastar library is listening to those SSE events sent by the server.<ul><li>They could come all at once or trickle in over a few minutes.</li><li>Since this is a delivery driver tracking it will probably take several minutes for the driver to get to the house.</li></ul></li><li>In the simplest case, the server sends back “html fragments” in the SSE event and Datastar figures out how to update the DOM.<ul><li>There will be an event every few minutes to update the UI with:<ul><li>The driver is 3 miles away.</li><li>The driver is 2 miles away.</li><li>The driver is 1 mile away.</li><li>The driver has entered your driveway</li><li>The food was delivered. {Close connection}</li></ul></li></ul></li></ul></li></ul></li></ul><p>The sequence diagram version of this follows.</p><p><img alt="diagram" id="kroki-9" src="https://chrismalek.me/_15370342953620332082.svg"></p><h2 id="rethinking-web-development"><p><a href="#rethinking-web-development">#
</a>Rethinking Web Development</p></h2><p>If you’ve done any web development in the past decade, it’s worth reconsidering how you approach projects and develop proof-of-concept ideas. You might be surprised at how much simpler and more maintainable your code can become. While having everything on the server is advantageous, it requires a different approach to project structure.</p><p>With Datastar, a significant portion of your application logic and state management can reside on the server. This shift in perspective may require you to rethink traditional web development paradigms.</p><p>Additional Considerations:</p><ul><li><strong>Project Structure:</strong> Carefully plan how you’ll organize your server-side code to handle SSE connections, manage signals, and generate HTML fragments efficiently.</li><li><strong>State Management:</strong> Leverage Datastar’s signals to manage your application state primarily on the server. This can simplify your client-side code and reduce the need for complex frontend frameworks.</li><li><strong>Templating:</strong> Choose a templating engine that allows you to easily create and send dynamic HTML fragments. Consider using a template language that promotes code reusability and maintainability.</li><li><strong>Real-time Updates:</strong> Explore the power of SSE for real-time updates in your application. Think about how you can use real-time data to enhance the user experience.</li><li><strong>Security:</strong> As with any web application, security should be a top priority. Ensure that your server-side code is secure and protects sensitive data.</li></ul><p>By rethinking your approach to web development and embracing the capabilities of Datastar, you can create highly efficient, maintainable, and real-time applications.</p><h2 id="server-requirements"><p><a href="#server-requirements">#
</a>Server Requirements</p></h2><p>Your server-side setup will involve a few key components:</p><ul><li>An HTML templating system that’s organized to send HTML fragments for UI updates. This likely means breaking down your HTML into smaller, manageable chunks that can be generated and sent to the client.</li><li>The concept of “routes” is central to all web frameworks. A route maps a URL to a function that handles requests and sends responses.</li><li>In Datastar, you’ll often need a route to handle the initial HTML request and another to handle SSE requests. There are multiple ways to structure this on your backend.</li></ul><p>The server must also handle SSE requests, GET/POST/PUT/DELETE requests, and send back the HTML fragments that update the UI.</p><h3 id="additional-considerations"><p><a href="#additional-considerations">##
</a>Additional Considerations</p></h3><ul><li><strong>SSE Endpoint:</strong> Establish a dedicated endpoint for handling SSE connections. This endpoint will be responsible for managing the persistent connections and sending updates to the client.</li><li><strong>Data Handling:</strong> Implement server-side logic to process incoming data, update signals, and generate the appropriate HTML fragments to send back to the client.</li><li><strong>Error Handling:</strong> Incorporate robust error handling to manage unexpected situations and ensure the stability of your application.</li><li><strong>Scalability:</strong> If you anticipate high traffic or require your application to scale, consider using a backend technology that can handle a large number of concurrent SSE connections efficiently.</li><li><strong>Deployment:</strong> Choose a deployment platform that supports SSE and can accommodate the requirements of your Datastar application.</li></ul><p>By carefully considering these server requirements, you can build a solid foundation for your Datastar application and ensure its performance, stability, and scalability.</p><h2 id="conclusion"><p><a href="#conclusion">#
</a>Conclusion</p></h2><p>Datastar offers a fresh approach to web development, streamlining real-time applications and minimizing front-end dependencies. While it demands a shift in perspective, its potential for simplicity, efficiency, and maintainability makes it worth exploring for modern developers. With its unified architecture and focus on server-driven logic, Datastar stands out as a promising alternative to traditional frameworks.</p><h2 id="further-reading"><p><a href="#further-reading">#
</a>Further Reading</p></h2><ul><li><a href="https://hypermedia.systems/book/contents/" target="_blank" rel="noopener noreferrer">Hypermedia Systems Books</a></li><li>Datastar <a href="https://data-star.dev/guide/getting_started" target="_blank" rel="noopener noreferrer">Getting Started
</a>and <a href="https://data-star.dev/reference/" target="_blank" rel="noopener noreferrer">Reference
</a>and <a href="https://data-star.dev/examples/" target="_blank" rel="noopener noreferrer">Examples</a></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Leaked Meta data reveals massive campaign to remove pro-Palestine posts (458 pts)]]></title>
            <link>https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta</link>
            <guid>43655603</guid>
            <pubDate>Fri, 11 Apr 2025 16:24:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta">https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta</a>, See on <a href="https://news.ycombinator.com/item?id=43655603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg" width="1200" height="800.2747252747253" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:20678795,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Pro-Palestine protesters in front of Meta headquarters on November 3, 2023. Photo by Tayfun Coskun/Anadolu via Getty Images.</figcaption></figure></div><p>A sweeping crackdown on posts on Instagram and Facebook that are critical of Israel—or even vaguely supportive of Palestinians—was directly orchestrated by the government of Israel, according to internal Meta data obtained by Drop Site News. The data show that Meta has complied with 94% of takedown requests issued by Israel since October 7, 2023. Israel is the biggest originator of takedown requests globally by far, and Meta has followed suit—widening the net of posts it automatically removes, and creating what can be called the largest mass censorship operation in modern history.</p><p>Government requests for takedowns generally focus on posts made by citizens inside that government’s borders, Meta insiders said. What makes Israel’s campaign unique is its success in censoring speech in many countries outside of Israel. What’s more, Israel's censorship project will echo well into the future, insiders said, as the AI program Meta is currently training how to moderate content will base future decisions on the successful takedown of content critical of Israel’s genocide.</p><p>The data, compiled and provided to Drop Site News by whistleblowers, reveal the internal mechanics of Meta’s “Integrity Organization”—an organization within Meta dedicated to ensuring the safety and authenticity on its platforms. Takedown requests (TDRs) allow individuals, organizations, and government officials to request the removal of content that allegedly violates Meta’s policies. The documents indicate that the vast majority of Israel’s requests—95%—fall under Meta’s “terrorism” or “violence and incitement” categories. And Israel’s requests have overwhelmingly targeted users from Arab and Muslim-majority nations in a massive effort to silence criticism of Israel.</p><p>Multiple independent sources inside Meta confirmed the authenticity of the information provided by the whistleblowers. The data also show that Meta removed over 90,000 posts to comply with TDRs submitted by the Israeli government in an average of 30 seconds. Meta also significantly expanded automated takedowns since October 7, resulting in an estimated 38.8 million additional posts being “actioned upon” across Facebook and Instagram since late 2023. “Actioned upon” in Facebook terms means that a post was either removed, banned, or suppressed.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_5760,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;full&quot;,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2137517,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1456w" sizes="100vw"></picture></div></a><figcaption>Number of posts reported by the Israeli government over time, by country of post origin. Obtained by Drop Site News.</figcaption></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_5760,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;full&quot;,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:4628638,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1456w" sizes="100vw"></picture></div></a><figcaption>Number of posts actioned upon by Meta over time, by country of post origin. Obtained by Drop Site News.</figcaption></figure></div><p>All of the Israeli government’s TDRs post-October 7th contain the exact same complaint text, according to the leaked information, regardless of the substance of the underlying content being challenged. Sources said that not a single Israeli TDR describes the exact nature of the content being reported, even though the requests link to an average of 15 different pieces of content. Instead, the reports simply state, in addition to a description of the October 7th attacks, that:</p><blockquote><p><em>This is an urgent request regarding videos posted on Facebook which contain inciting content. The file attached to this request contains link [sic] to content which violated articles 24(a) and 24(b) of the Israeli Counter-Terrorism Act (2016), which prohibits incitement to terrorism praise for acts of terrorism and identification or support of terror organizations. Moreover, several of the links violate article 2(4) of the Privacy Protection Act (1982), which prohibits publishing images in circumstances that could humiliate the person depicted, as they contain images of the killed, injured, and kidnapped. Additionally, to our understanding, the content in the attached report violates Facebook’s community standards.</em></p></blockquote><p>Meta's content enforcement system processes user-submitted reports through different pathways, depending on who is reporting it. Regular users can report posts via the platform’s built-in reporting function, triggering a review. Reported posts are typically first labeled as violating or non-violating by machine-learning models, though sometimes human moderators review them as well. If the AI assigns a high confidence score indicating a violation, the post is removed automatically. If the confidence score is low, human moderators review the post before deciding whether to take action.</p><p>Governments and organizations, on the other hand, have privileged channels to trigger content review. Reports submitted through these channels receive higher priority and are almost always reviewed by human moderators rather than AI. Once reviewed by humans, the reviews are fed back into Meta’s AI system to help it better assess similar content in the future. While everyday users can also file TDRs, they are rarely acted upon. Government-submitted TDRs are far more likely to result in content removal.</p><p><span>Meta has overwhelmingly complied with Israel’s requests, making an exception for the government account by taking down posts without human reviews, according to the whistleblowers, while still feeding that data back into Meta’s AI. A Human Rights Watch (HRW) report </span><a href="https://www.hrw.org/report/2023/12/21/metas-broken-promises/systemic-censorship-palestine-content-instagram-and" rel="">investigating Meta’s moderation of pro-Palestine content</a><span> post-October 7th found that, of 1,050 posts HRW documented as taken-down or suppressed on Facebook or Instagram, 1,049 involved peaceful content in support of Palestine, while just one post was content in support of Israel.</span></p><p>A source within Meta’s Integrity Organization confirmed that internal reviews of their automated moderation found that pro-Palestinian content that did not violate Meta’s policies was frequently removed. In other cases, pro-Palestinian content that should have been simply removed was given a “strike,” which indicates a more serious offense. Should a single account receive too many strikes on content that it publishes, the entire account can be removed from Meta platforms.</p><p>When concerns about overenforcement against pro-Palestinian content were raised inside the Integrity Organization, the source said, leadership responded by saying that they preferred to overenforce against potentially violating content, rather than underenforce and risk leaving violating content live on Meta platforms.</p><p>Within Meta, several key leadership positions are filled by figures with personal connections to the Israeli government. The Integrity Organization is run by Guy Rosen, a former Israeli military official who served in the Israeli military’s signals intelligence unit, Unit 8200. Rosen was the founder of Onavo, a web analytics and VPN firm that then-Facebook acquired in October 2013. (Previous reporting has revealed that, prior to acquiring the company, Facebook used data Onavo collected from their VPN users to monitor the performance of competitors—part of the anti-competitive behavior alleged by the Federal Trade Commission under the Biden administration in its suit against Meta.)</p><p>Rosen’s Integrity Organization works synergistically with Meta’s Policy Organization, according to employees. The Policy Organization sets the rules, and the Integrity Organization enforces them—but the two feed one another, they said. “Policy changes are often driven by data from the integrity org,” explained one Meta employee. As of this year, Joel Kaplan replaced Nick Clegg as the head of the Policy Organization. Kaplan is a former Bush administration official who has worked with Israeli officials in the past on fighting “online incitement.”</p><p><span>Meta’s Director of Public Policy for Israel and the Jewish Diaspora, Jordana Cutler, has also intervened to investigate pro-Palestine content. Cutler is a former senior Israeli government official and advisor to Prime Minister Benjamin Netanyahu. Cutler </span><a href="https://theintercept.com/2024/10/21/instagram-israel-palestine-censorship-sjp/" rel="">has reportedly used her role</a><span> to flag pro-Palestine content. According to internal communications reviewed by Drop Site, as recently as March, Cutler actively instructed employees of the company to search for and review content mentioning Ghassan Kanafani, an Arab novelist considered to be a pioneer of Palestinian literature. Immediately prior to joining Meta as a senior policymaker, she spent nearly three years as Chief of Staff at the Israeli Embassy in Washington, D.C—and nearly five years serving as deputy to one of Netanyahu’s senior advisors, before becoming Netanyahu’s advisor on Diaspora Affairs.</span></p><p>According to internal information reviewed by Drop Site, Cutler has continued to demand the review of content related to Kanafani under Meta’s policy “Glorification, Support or Representation” of individuals or organizations “that proclaim a violent mission or are engaged in violence to have a presence on our platforms.” Kanafani, who was killed in a 1972 car bombing orchestrated by the Mossad, served as a spokesperson for the left-wing Palestinian nationalist group, the Popular Front for the Liberation of Palestine (PFLP). The PFLP was designated as a terrorist group over a quarter century after he was killed, which, according to Meta’s guidelines and Cutler’s efforts, serves as a basis to flag his content for removal, strikes, and possible suspension.</p><p>The leaked documents reveal that Israel’s takedown requests have overwhelmingly targeted users from Arab and Muslim-majority nations, with the top 12 countries affected being: Egypt (21.1%), Jordan (16.6%), Palestine (15.6%), Algeria (8.2%), Yemen (7.5%), Tunisia (3.3%), Morocco (2.9%), Saudi Arabia (2.7%), Lebanon (2.6%), Iraq (2.6%), Syria (2%), Turkey (1.5%). In total, users from over 60 countries have reported censorship of content related to Palestine, according to Human Rights Watch—with posts being removed, accounts suspended, and visibility reduced through shadow banning.</p><p>Notably, only 1.3% of Israel’s takedown requests target Israeli users, making Israel an outlier among governments that typically focus their censorship efforts on their own citizens. For example, 63% of Malaysia’s takedown requests target Malaysian content, and 95% of Brazil’s requests target Brazilian content. Israel, however, has turned its censorship efforts outward, focusing on silencing critics and narratives that challenge its policies, particularly in the context of the ongoing conflict in Gaza and the West Bank.</p><p>Despite Meta’s awareness of Israel’s aggressive censorship tactics for at least seven years, according to Meta whistleblowers, the company has failed to curb the abuse. Instead, one said, the company “actively provided the Israeli government with a legal entry-point for carrying out its mass censorship campaign.”</p><p data-attrs="{&quot;url&quot;:&quot;https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta/comments" rel=""><span>Leave a comment</span></a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Erlang's not about lightweight processes and message passing (143 pts)]]></title>
            <link>https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html</link>
            <guid>43655221</guid>
            <pubDate>Fri, 11 Apr 2025 15:50:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html">https://stevana.github.io/erlangs_not_about_lightweight_processes_and_message_passing.html</a>, See on <a href="https://news.ycombinator.com/item?id=43655221">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<nav id="TOC" role="doc-toc">
<h2 id="toc-title">Table of contents</h2>
<ul>
<li><a href="#background" id="toc-background">Background</a></li>
<li><a href="#behaviours" id="toc-behaviours">Behaviours</a>
<ul>
<li><a href="#generic-server-behaviour" id="toc-generic-server-behaviour">Generic server behaviour</a></li>
<li><a href="#event-manager-behaviour" id="toc-event-manager-behaviour">Event manager behaviour</a></li>
<li><a href="#state-machine-behaviour" id="toc-state-machine-behaviour">State machine behaviour</a></li>
<li><a href="#supervisor-behaviour" id="toc-supervisor-behaviour">Supervisor behaviour</a></li>
<li><a href="#application-and-release-behaviours" id="toc-application-and-release-behaviours">Application and release
behaviours</a></li>
</ul></li>
<li><a href="#how-behaviours-can-be-implemented" id="toc-how-behaviours-can-be-implemented">How behaviours can be
implemented</a></li>
<li><a href="#correctness-of-behaviours" id="toc-correctness-of-behaviours">Correctness of behaviours</a></li>
<li><a href="#contributing" id="toc-contributing">Contributing</a></li>
<li><a href="#see-also" id="toc-see-also">See also</a></li>
<li><a href="#discussion" id="toc-discussion">Discussion</a></li>
</ul>
</nav>
<p>Posted on Jan 18, 2023</p>
<p>I used to think that the big idea of Erlang is its lightweight
processes and message passing. Over the last couple of years I’ve
realised that there’s a bigger insight to be had, and in this post I’d
like to share it with you.</p>
<section id="background">
<h2><a href="#background" title="Background">Background</a></h2>
<p>Erlang has an interesting history. If I understand things correctly,
it started off as a Prolog library for building reliable distributed
systems, morphed into a Prolog dialect, before finally becoming a
language in its own right.</p>
<p>The goal seemed to have always been to solve the problem of building
reliable distributed systems. It was developed at Ericsson and used to
program their telephone switches. This was sometime in the 80s and 90s,
before internet use become widespread. I suppose they were already
dealing with “internet scale” traffic, i.e.&nbsp;hundreds of millions of
users, with stricter SLAs than most internet services provide today. So
in a sense they were ahead of their time.</p>
<p>In 1998 Ericsson decided to ban all use of Erlang<a href="#fn1" id="fnref1" role="doc-noteref"><sup>1</sup></a>.
The people responsible for developing it argued that if they were going
to ban it, then they might as well open source it. Which Ericsson did
and shortly after most of the team that created Erlang quit and started
their own company.</p>
<p>One of these people was Joe Armstrong, which also was one of the main
people behind the design and implementation of Erlang. The company was
called Bluetail and they got bought up a couple of times but in the end
Joe got fired in 2002.</p>
<p>Shortly after, still in 2002, Joe starts writing his PhD thesis at
the Swedish Institute of Computer Science (SICS). Joe was born 1950, so
he was probably 52 years old at this point. The topic of the thesis is
<em>Making reliable distributed systems in the presence of software
errors</em> and it was finished the year after in 2003.</p>
<p>It’s quite an unusual thesis in many ways. For starters, most theses
are written by people in their twenties with zero experience of
practical applications. Whereas in Joe’s case he has been working
professionally on this topic since the 80s, i.e.&nbsp;about twenty years. The
thesis contains no math nor theory, it’s merely a presentation of the
ideas that underpin Erlang and how they used Erlang to achieve the
original goal of building reliable distributed systems.</p>
<p>I highly commend reading his <a href="http://kth.diva-portal.org/smash/record.jsf?pid=diva2%3A9492&amp;dswid=-1166">thesis</a>
and forming your own opinion, but to me it’s clear that the big idea
there isn’t lightweight processes<a href="#fn2" id="fnref2" role="doc-noteref"><sup>2</sup></a> and message passing, but
rather the generic components which in Erlang are called
<em>behaviours</em>.</p>
</section>
<section id="behaviours">
<h2><a href="#behaviours" title="Behaviours">Behaviours</a></h2>
<p>I’ll first explain in more detail what behaviours are, and then I’ll
come back to the point that they are more important than the idea of
lightweight processes.</p>
<p>Erlang behaviours are like interfaces in, say, Java or Go. It’s a
collection of type signatures which can have multiple implementations,
and once the programmer provides such an implementation they get access
to functions written against that interface. To make it more concrete
here’s a contrived example in Go:</p>
<div id="cb1"><pre><code><span id="cb1-1"><span>// The interface.</span></span>
<span id="cb1-2"><span>type</span> HasName <span>interface</span> <span>{</span></span>
<span id="cb1-3">        Name<span>()</span> <span>string</span></span>
<span id="cb1-4"><span>}</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span>// A generic function written against the interface.</span></span>
<span id="cb1-7"><span>func</span> Greet<span>(</span>n HasName<span>)</span> <span>{</span></span>
<span id="cb1-8">    fmt<span>.</span>Printf<span>(</span><span>"Hello %s!</span><span>\n</span><span>"</span><span>,</span> n<span>.</span>Name<span>())</span></span>
<span id="cb1-9"><span>}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span>// First implementation of the interface.</span></span>
<span id="cb1-12"><span>type</span> Joe <span>struct</span> <span>{}</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span>func</span> <span>(</span>_ <span>*</span>Joe<span>)</span> Name<span>()</span> <span>string</span> <span>{</span></span>
<span id="cb1-15">        <span>return</span> <span>"Joe"</span></span>
<span id="cb1-16"><span>}</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span>// Second implementation of the interface.</span></span>
<span id="cb1-19"><span>type</span> Mike <span>struct</span> <span>{}</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span>func</span> <span>(</span>_ <span>*</span>Mike<span>)</span> Name<span>()</span> <span>string</span> <span>{</span></span>
<span id="cb1-22">        <span>return</span> <span>"Mike"</span></span>
<span id="cb1-23"><span>}</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span>func</span> main<span>()</span> <span>{</span></span>
<span id="cb1-26">        joe <span>:=</span> <span>&amp;</span>Joe<span>{}</span></span>
<span id="cb1-27">        mike <span>:=</span> <span>&amp;</span>Mike<span>{}</span></span>
<span id="cb1-28">        Greet<span>(</span>mike<span>)</span></span>
<span id="cb1-29">        Greet<span>(</span>joe<span>)</span></span>
<span id="cb1-30"><span>}</span></span></code></pre></div>
<p>Running the above program will display:</p>
<pre><code>Hello Mike!
Hello Joe!</code></pre>
<p>This hopefully illustrates how <code>Greet</code> is generic in, or
parametrised by, the interface <code>HasName</code>.</p>
<section id="generic-server-behaviour">
<h3><a href="#generic-server-behaviour" title="Generic server behaviour">Generic server behaviour</a></h3>
<p>Next lets have a look at a more complicated example in Erlang taken
from Joe’s thesis (p.&nbsp;136). It’s a key-value store where we can
<code>store</code> a key value pair or <code>lookup</code> the value of
a key, the <code>handle_call</code> part is the most interesting:</p>
<div id="cb3"><pre><code><span id="cb3-1"><span>-module</span><span>(</span><span>kv</span><span>).</span></span>
<span id="cb3-2"><span>-</span><span>behaviour(</span><span>gen_server</span><span>).</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span>-export</span><span>([</span><span>start</span><span>/</span><span>0</span><span>,</span> <span>stop</span><span>/</span><span>0</span><span>,</span> <span>lookup</span><span>/</span><span>1</span><span>,</span> <span>store</span><span>/</span><span>2</span><span>]).</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span>-export</span><span>([</span><span>init</span><span>/</span><span>1</span><span>,</span> <span>handle_call</span><span>/</span><span>3</span><span>,</span> <span>handle_cast</span><span>/</span><span>2</span><span>,</span> <span>terminate</span><span>/</span><span>2</span><span>]).</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span>start()</span> <span>-&gt;</span></span>
<span id="cb3-9">  <span>gen_server:start_link({</span><span>local</span><span>,</span><span>kv</span><span>},</span><span>kv</span><span>,</span><span>arg1</span><span>,[]).</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span>stop()</span> <span>-&gt;</span> <span>gen_server:cast(</span><span>kv</span><span>,</span> <span>stop</span><span>).</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span>init(</span><span>arg1</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-14">  <span>io:format(</span><span>"Key-Value server starting~n"</span><span>),</span></span>
<span id="cb3-15">  <span>{</span><span>ok</span><span>,</span> <span>dict:new()}.</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span>store(</span><span>Key</span><span>,</span> <span>Val</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-18">  <span>gen_server:call(</span><span>kv</span><span>,</span> <span>{</span><span>store</span><span>,</span> <span>Key</span><span>,</span> <span>Val</span><span>}).</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span>lookup(</span><span>Key</span><span>)</span> <span>-&gt;</span> <span>gen_server:call(</span><span>kv</span><span>,</span> <span>{</span><span>lookup</span><span>,</span> <span>Key</span><span>}).</span></span>
<span id="cb3-21"></span>
<span id="cb3-22"><span>handle_call({</span><span>store</span><span>,</span> <span>Key</span><span>,</span> <span>Val</span><span>},</span> <span>From</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-23">  <span>Dict1</span> <span>=</span> <span>dict:store(</span><span>Key</span><span>,</span> <span>Val</span><span>,</span> <span>Dict</span><span>),</span></span>
<span id="cb3-24">  <span>{</span><span>reply</span><span>,</span> <span>ack</span><span>,</span> <span>Dict1</span><span>};</span></span>
<span id="cb3-25"><span>handle_call({</span><span>lookup</span><span>,</span> <span>crash</span><span>},</span> <span>From</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-26">  <span>1</span><span>/</span><span>0</span><span>;</span> <span>%% &lt;- deliberate error :-)</span></span>
<span id="cb3-27"><span>handle_call({</span><span>lookup</span><span>,</span> <span>Key</span><span>},</span> <span>From</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-28">  <span>{</span><span>reply</span><span>,</span> <span>dict:find(</span><span>Key</span><span>,</span> <span>Dict</span><span>),</span> <span>Dict</span><span>}.</span></span>
<span id="cb3-29"></span>
<span id="cb3-30"><span>handle_cast(</span><span>stop</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span> <span>{</span><span>stop</span><span>,</span> <span>normal</span><span>,</span> <span>Dict</span><span>}.</span></span>
<span id="cb3-31"></span>
<span id="cb3-32"><span>terminate(</span><span>Reason</span><span>,</span> <span>Dict</span><span>)</span> <span>-&gt;</span></span>
<span id="cb3-33">  <span>io:format(</span><span>"K-V server terminating~n"</span><span>).</span></span></code></pre></div>
<p>This is an implementation of the <code>gen_server</code>
behaviour/interface. Notice how <code>handle_call</code> updates the
state (<code>Dict</code>) in case of a <code>store</code> and
<code>lookup</code>s the key in the state. Once <code>gen_server</code>
is given this implementation it will provide a server which can handle
concurrent <code>store</code> and <code>lookup</code> requests,
similarly to how <code>Greet</code> provided the displaying
functionality.</p>
<p>At this point you might be thinking “OK, so what? Lots of programming
languages have interfaces…”. That’s true, but notice how
<code>handle_call</code> is completely sequential, i.e.&nbsp;all concurrency
is hidden away in the generic <code>gen_server</code> component. “Yeah,
but that’s just good engineering practice which can be done in any
language” you say. That’s true as well, but the thesis pushes this idea
quite far. It identifies six behaviours: <code>gen_server</code>,
<code>gen_event</code>, <code>gen_fsm</code>, <code>supervisor</code>,
<code>application</code>, and <code>release</code> and then says these
are enough to build reliable distributed systems. As a case study Joe
uses one of Ericsson’s telephone switches (p.&nbsp;157):</p>
<blockquote>
<p>When we look at the AXD301 project in chapter 8, we will see that
there were 122 instances of gen_server, 36 instances of gen_event and 10
instances of gen_fsm. There were 20 supervisors and 6 applications. All
this is packaged into one release.</p>
</blockquote>
<p>Joe gives several arguments for why behaviour should be used
(pp.&nbsp;157-158):</p>
<ol type="1">
<li><p>The application programmer only has to provide the part of the
code which defines the <em>semantics</em> (or “business logic”) of their
problem, while the <em>infrastructure</em> code is provided
automatically by the behaviour;</p></li>
<li><p>The application programmer writes sequential code, all
concurrency is hidden away in the behaviour;</p></li>
<li><p>Behaviours are written by experts, and based on years of
experience and represent “best practices”;</p></li>
<li><p>Easier for new team members to get started: business logic is
sequential, similar structure that they might have seen before
elsewhere;</p></li>
<li><p>If whole systems are implemented reusing a small set of
behaviours: as behaviour implementations improve the whole systems will
improve without requiring any code changes;</p></li>
<li><p>Sticking to only using behaviours enforces structure, which in
turn makes testing and formal verification much easier.</p></li>
</ol>
<p>We’ll come back to this last point about testing later.</p>
</section>
<section id="event-manager-behaviour">
<h3><a href="#event-manager-behaviour" title="Event manager behaviour">Event manager behaviour</a></h3>
<p>Lets come back to the behaviours we listed above first. We looked at
<code>gen_server</code>, but what are the others for? There’s
<code>gen_event</code> which is a generic event manager, which lets you
register event handlers that are then run when the event manager gets
messages associated with the handlers. Joe says this is useful for,
e.g., error logging and gives the following example of an simple logger
(p.&nbsp;142):</p>
<div id="cb4"><pre><code><span id="cb4-1"><span>-module</span><span>(</span><span>simple_logger</span><span>).</span></span>
<span id="cb4-2"><span>-</span><span>behaviour(</span><span>gen_event</span><span>).</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span>-export</span><span>([</span><span>start</span><span>/</span><span>0</span><span>,</span> <span>stop</span><span>/</span><span>0</span><span>,</span> <span>log</span><span>/</span><span>1</span><span>,</span> <span>report</span><span>/</span><span>0</span><span>]).</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span>-export</span><span>([</span><span>init</span><span>/</span><span>1</span><span>,</span> <span>terminate</span><span>/</span><span>2</span><span>,</span></span>
<span id="cb4-7">         <span>handle_event</span><span>/</span><span>2</span><span>,</span> <span>handle_call</span><span>/</span><span>2</span><span>]).</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span>-define</span><span>(</span><span>NAME</span><span>,</span> <span>my_simple_event_logger</span><span>).</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span>start()</span> <span>-&gt;</span></span>
<span id="cb4-12">  <span>case</span> <span>gen_event:start_link({</span><span>local</span><span>,</span> <span>?</span><span>NAME</span><span>})</span> <span>of</span></span>
<span id="cb4-13">    <span>Ret</span> <span>=</span> <span>{</span><span>ok</span><span>,</span> <span>Pid</span><span>}</span> <span>-&gt;</span></span>
<span id="cb4-14">      <span>gen_event:add_handler(?</span><span>NAME</span><span>,?</span><span>MODULE</span><span>,</span><span>arg1</span><span>),</span></span>
<span id="cb4-15">      <span>Ret</span><span>;</span></span>
<span id="cb4-16">  <span>Other</span> <span>-&gt;</span></span>
<span id="cb4-17">    <span>Other</span></span>
<span id="cb4-18">  <span>end</span><span>.</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span>stop()</span> <span>-&gt;</span> <span>gen_event:stop(?</span><span>NAME</span><span>).</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span>log(</span><span>E</span><span>)</span> <span>-&gt;</span> <span>gen_event:notify(?</span><span>NAME</span><span>,</span> <span>{</span><span>log</span><span>,</span> <span>E</span><span>}).</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span>report()</span> <span>-&gt;</span></span>
<span id="cb4-25">  <span>gen_event:call(?</span><span>NAME</span><span>,</span> <span>?</span><span>MODULE</span><span>,</span> <span>report</span><span>).</span></span>
<span id="cb4-26"></span>
<span id="cb4-27"><span>init(</span><span>arg1</span><span>)</span> <span>-&gt;</span></span>
<span id="cb4-28">  <span>io:format(</span><span>"Logger starting~n"</span><span>),</span></span>
<span id="cb4-29">  <span>{</span><span>ok</span><span>,</span> <span>[]}.</span></span>
<span id="cb4-30"></span>
<span id="cb4-31"><span>handle_event({</span><span>log</span><span>,</span> <span>E</span><span>},</span> <span>S</span><span>)</span> <span>-&gt;</span> <span>{</span><span>ok</span><span>,</span> <span>trim([</span><span>E</span><span>|</span><span>S</span><span>])}.</span></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span>handle_call(</span><span>report</span><span>,</span> <span>S</span><span>)</span> <span>-&gt;</span> <span>{</span><span>ok</span><span>,</span> <span>S</span><span>,</span> <span>S</span><span>}.</span></span>
<span id="cb4-34"></span>
<span id="cb4-35"><span>terminate(</span><span>stop</span><span>,</span> <span>_</span><span>)</span> <span>-&gt;</span> <span>true</span><span>.</span></span>
<span id="cb4-36"></span>
<span id="cb4-37"><span>trim([</span><span>X1</span><span>,</span><span>X2</span><span>,</span><span>X3</span><span>,</span><span>X4</span><span>,</span><span>X5</span><span>|</span><span>_</span><span>])</span> <span>-&gt;</span> <span>[</span><span>X1</span><span>,</span><span>X2</span><span>,</span><span>X3</span><span>,</span><span>X4</span><span>,</span><span>X5</span><span>];</span></span>
<span id="cb4-38"><span>trim(</span><span>L</span><span>)</span> <span>-&gt;</span> <span>L</span><span>.</span></span></code></pre></div>
<p>The interesting part is <code>handle_event</code>, <code>trim</code>
and <code>report</code>. Together they let the user log, keep track and
display the last five error messages.</p>
</section>
<section id="state-machine-behaviour">
<h3><a href="#state-machine-behaviour" title="State machine behaviour">State machine behaviour</a></h3>
<p>The <code>gen_fsm</code> behavior has been renamed to
<code>gen_statem</code> (for state machine) since thesis was written.
It’s very similar to <code>gen_server</code>, but more geared towards
implementing protocols, which often are specified as state machines. I
believe any <code>gen_server</code> can be implemented as a
<code>gen_statem</code> and vice versa so we won’t go into the details
of <code>gen_statem</code>.</p>
</section>
<section id="supervisor-behaviour">
<h3><a href="#supervisor-behaviour" title="Supervisor behaviour">Supervisor behaviour</a></h3>
<p>The next interesting behavior is <code>supervisor</code>. Supervisors
are processes which sole job is to make sure that other processes are
healthy and doing their job. If a supervised process fails then the
supervisor can restart it according to some predefined strategy. Here’s
an example due to Joe (p.&nbsp;148):</p>
<div id="cb5"><pre><code><span id="cb5-1"><span>-module</span><span>(</span><span>simple_sup</span><span>).</span></span>
<span id="cb5-2"><span>-</span><span>behaviour(</span><span>supervisor</span><span>).</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span>-export</span><span>([</span><span>start</span><span>/</span><span>0</span><span>,</span> <span>init</span><span>/</span><span>1</span><span>]).</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span>start()</span> <span>-&gt;</span></span>
<span id="cb5-7">  <span>supervisor:start_link({</span><span>local</span><span>,</span> <span>simple_supervisor</span><span>},</span></span>
<span id="cb5-8">  <span>?</span><span>MODULE</span><span>,</span> <span>nil</span><span>).</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span>init(</span><span>_</span><span>)</span> <span>-&gt;</span></span>
<span id="cb5-11">  <span>{</span><span>ok</span><span>,</span></span>
<span id="cb5-12">  <span>{{</span><span>one_for_one</span><span>,</span> <span>5</span><span>,</span> <span>1000</span><span>},</span></span>
<span id="cb5-13">  <span>[</span></span>
<span id="cb5-14">   <span>{</span><span>packet</span><span>,</span></span>
<span id="cb5-15">     <span>{</span><span>packet_assembler</span><span>,</span> <span>start</span><span>,</span> <span>[]},</span></span>
<span id="cb5-16">     <span>permanent</span><span>,</span> <span>500</span><span>,</span> <span>worker</span><span>,</span> <span>[</span><span>packet_assembler</span><span>]},</span></span>
<span id="cb5-17">   <span>{</span><span>server</span><span>,</span></span>
<span id="cb5-18">     <span>{</span><span>kv</span><span>,</span> <span>start</span><span>,</span> <span>[]},</span></span>
<span id="cb5-19">     <span>permanent</span><span>,</span> <span>500</span><span>,</span> <span>worker</span><span>,</span> <span>[</span><span>kv</span><span>]},</span></span>
<span id="cb5-20">   <span>{</span><span>logger</span><span>,</span></span>
<span id="cb5-21">     <span>{</span><span>simple_logger</span><span>,</span> <span>start</span><span>,</span> <span>[]},</span></span>
<span id="cb5-22">     <span>permanent</span><span>,</span> <span>500</span><span>,</span> <span>worker</span><span>,</span> <span>[</span><span>simple_logger</span><span>]}]}}.</span></span></code></pre></div>
<p>The <code>{one_for_one, 5, 1000}</code> is the restart strategy. It
says that if one of the supervised processes
(<code>packet_assembler</code>, <code>kv</code>, and
<code>simple_logger</code>) fail then only restart the failing process
(<code>one_for_one</code>). If the supervisor needs to restart more than
<code>5</code> times in <code>1000</code> seconds then the supervisor
itself should fail.</p>
<p>The <code>permanent, 500, worker</code> part means that this is a
worker process which should be permanently kept alive and its given 500
milliseconds to gracefully stop what it’s doing in case the supervisor
wants to restart it.</p>
<p>“Why would the supervisor want to restart it if it’s not dead
already?”, one might wonder. Well, there are other restart strategies
than <code>one_for_one</code>. For example, <code>one_for_all</code>
where if one process fails then the supervisor restarts all of its
children.</p>
<p>If we also consider that supervisors can supervise supervisors, which
are not necessarily running on the same computer, then I hope that you
get an idea of how powerful this behaviour can be. And, no, this isn’t
“just Kubernetes”, because it’s at the thread/lightweight process level
rather than docker container level.</p>
<p>The idea for supervisors and their restart strategies comes from the
observation that often a restart appears to fix the problem, as captured
in the <em>Have You Tried Turning It Off And On Again?</em> sketches
from IT Crowd.</p>
<p>Knowing that failing processes will get restarted coupled with Jim
Gray’s idea of failing fast, that’s either produce the output according
to the specification or signal failure and stop operating, leads to
Joe’s slogan: “Let it crash!” (p. 107). Another way to think of it is
that a program should only express its “happy path”, should anything go
wrong on its happy way it should crash, rather than trying to be clever
about it and try to fix the problem (potentially making it worse), and
another program higher up the supervisor tree will handle it.</p>
<p>Supervisors and the “let it crash” philosophy, appear to produce
reliable systems. Joe uses the Ericsson AXD301 telephone switch example
again (p.&nbsp;191):</p>
<blockquote>
<p>Evidence for the long-term operational stability of the system had
also not been collected in any systematic way. For the Ericsson AXD301
the only information on the long-term stability of the system came from
a power-point presentation showing some figures claiming that a major
customer had run an 11 node system with a 99.9999999% reliability,
though how these figure had been obtained was not documented.</p>
</blockquote>
<p>To put this in perspective, five nines (99.999%) reliability is
considered good (5.26 minutes of downtime per year). “59% of Fortune 500
companies experience a minimum of 1.6 hours of downtime per week”,
according to some <a href="https://courseware.cutm.ac.in/wp-content/uploads/2020/06/Assessing-the-Financial-Impact-of-Downtime-UK.pdf">report</a>
from a biased company. Notice per <em>year</em> vs per <em>week</em>,
but as we don’t know how either reliability numbers are obtained its
probably safe to assume that the truth is somewhere in the middle –
still a big difference, but not 31.56 milliseconds (nine nines) of
downtime per year vs 1.6 hours of downtime per week.</p>
</section>
<section id="application-and-release-behaviours">
<h3><a href="#application-and-release-behaviours" title="Application and release behaviours">Application and release
behaviours</a></h3>
<p>I’m not sure if <code>application</code> and <code>release</code>
technically are behaviours, i.e. interfaces. They are part of the same
chapter as the other behaviours in the thesis and they do provide a
clear structure which is a trait of the other behaviours though, so
we’ll include them in the discussion.</p>
<p>So far we’ve presented behaviours from the bottom up. We started with
“worker” behaviours <code>gen_server</code>, <code>gen_statem</code> and
<code>gen_event</code> which together capture the semantics of our
problem. We then saw how we can define <code>supervisor</code> trees
whose children are other supervisor trees or workers, to deal with
failures and restarts.</p>
<p>Next level up is an <code>application</code> which consists of a
supervisor tree together with everything else we need to deliver a
particular application.</p>
<p>A system can consist of several <code>application</code> and that’s
where the final “behaviour” comes in. A <code>release</code> packages up
one or more applications. They also contain code to handle upgrades. If
the upgrade fails, it must be able to rollback to the previous stable
state.</p>
</section>
</section>
<section id="how-behaviours-can-be-implemented">
<h2><a href="#how-behaviours-can-be-implemented" title="How behaviours can be implemented">How behaviours can be
implemented</a></h2>
<p>I hope that by now I’m managed to convince you that it’s not actually
the lightweight processes and message passing by themselves that make
Erlang great for building reliable systems.</p>
<p>At best one might be able to claim that lightweight processes and
supervisors are the key mechanisms at play<a href="#fn3" id="fnref3" role="doc-noteref"><sup>3</sup></a>,
but I think it would be more honest to recognise the structure that
behaviours provide and how that ultimately leads to reliable
software.</p>
<p>I’ve not come across any other language, library, or framework which
provides such relatively simple building blocks that compose into big
systems like the AXD301 (“over a million lines of Erlang code”,
p.&nbsp;167).</p>
<p>This begs the question: why aren’t language and library designers
stealing the structure behind Erlang’s behaviours, rather than copying
the ideas of lightweight processes and message passing?</p>
<p>Let’s take a step back. We said earlier that behaviours are
interfaces and many programming languages have interfaces. How would we
go about starting to implement behaviours in other languages?</p>
<p>Lets start with <code>gen_server</code>. I like to think its
interface signature as being:</p>
<div id="cb6"><pre><code><span id="cb6-1"><span>Input</span> <span>-&gt;</span> <span>State</span> <span>-&gt;</span> (<span>State</span>, <span>Output</span>)</span></code></pre></div>
<p>That’s it takes some input, its current state and produces a pair of
the new updated state and an output.</p>
<p>How do we turn this sequential signature into something that can
handle concurrent requests? One way would be to fire up a HTTP server
which transforms requests into <code>Input</code>s and puts them on a
queue, have an event loop which pops inputs from the queue and feeds it
to the sequential implementation, then writing the output back to the
client response. It wouldn’t be difficult to generalise this to be able
to handle multiple <code>gen_server</code>s at the same time, by giving
each a name and let the request include the name in addition to the
input.</p>
<p><code>gen_event</code> could be implemented by allowing registration
of callbacks to certain types of event on the queue.</p>
<p><code>supervisor</code>s is more interesting, one simple way to think
of it is: when we feed the <code>gen_server</code> function the next
input from the queue, we wrap that call in an exception handler, and
should it throw we notify its supervisor. It gets a bit more complicated
if the supervisor is not running on the same computer as the
<code>gen_server</code>.</p>
<p>I haven’t thought about <code>application</code> and
<code>release</code>s much yet, but given that configuration, deployment
and upgrades are difficult problems they seem important.</p>
</section>
<section id="correctness-of-behaviours">
<h2><a href="#correctness-of-behaviours" title="Correctness of behaviours">Correctness of behaviours</a></h2>
<p>Writing a post solely about stealing from Erlang doesn’t seem fair,
even though it’s the right thing to do, so I’d like to finish off with
how we can build upon the insights of Joe and the Erlang community.</p>
<p>I’ve been interesting in testing for a while now. Most recently I’ve
been looking into <a href="https://github.com/stevana/property-based-testing-stateful-systems-tutorial">simulation
testing</a> distributed systems à la <a href="https://www.youtube.com/watch?v=4fFDFbi3toc">FoundationDB</a>.</p>
<p>Simulation testing in a nutshell is running your system in a
simulated world, where the simulation has full control over which
messages get sent when over the network.</p>
<p>FoundationDB built their own programming language, or dialect of C++
with actors, in order do the simulation testing. Our team seemed to be
able to get quite far with merely using state machines of type:</p>
<div id="cb7"><pre><code><span id="cb7-1"><span>Input</span> <span>-&gt;</span> <span>State</span> <span>-&gt;</span> (<span>State</span>, [<span>Output</span>])</span></code></pre></div>
<p>where <code>[Output]</code> is a sequence of outputs.</p>
<p>The idea being that the simulator keeps track of a priority queue of
messages sorted by their arrival time, it pops a message, advances the
clock to the arrival time of that message, feeds the message to the
receiving state machine, generates new arrival times for all output
messages and puts them back into the priority queue, rinse and repeat.
As long as everything is deterministic and the arrival times are
generated using a seed we can explore many different interleavings and
get reproducible failures. It’s also much faster than Jepsen, because
messaging is done in-memory and we advance the clock to the arrival
time, thereby triggering any timeouts without having to wait for
them.</p>
<p>We used to say that programs of this state machine type where written
in “network normal form”, and conjectured that every program which can
receive and send stuff over the network can be refactored into this
shape<a href="#fn4" id="fnref4" role="doc-noteref"><sup>4</sup></a>. Even if we had a proof, “network
normal form” always felt a bit arbitrary. But then I read Joe’s thesis
and realised that <code>gen_server</code> and <code>gen_statem</code>
basically have the same type, so I stopped being concerned about it. As
I think that if a structure is found to be useful by different people,
then it’s usually a sign that it isn’t arbitrary.</p>
<p>Anyway, in, at least, one of Joe’s <a href="https://youtu.be/cNICGEwmXLU?t=1439">talks</a> he mentions how
difficult it’s to correctly implement distributed leader election.</p>
<p>I believe this is a problem that would be greatly simplified by
having access to a simulator. A bit like I’d imagine having access to a
wind tunnel would make building an airplane easier. Both lets you test
your system under extreme conditions, such as unreliable networking or
power loss, before they happen in “production”. Furthermore, this
simulator can be generic in, or parametrised by, behaviours. Which means
that the developer gets it for free while the complexity of the
simulator is hidden away, just like the concurrent code of
<code>gen_server</code>!</p>
<p>FoundationDB is a good example of simulation testing working, as
witnessed by this <a href="https://twitter.com/aphyr/status/405017101804396546">tweet</a>
where somebody asked Kyle “aphyr” Kingsbury to Jepsen test
FoundationDB:</p>
<blockquote>
<p>“haven’t tested foundation[db] in part because their testing appears
to be waaaay more rigorous than mine.”</p>
</blockquote>
<p>Formal verification is also made easier if the program is written a
state machine. Basically all of Lamport’s model checking <a href="https://www.microsoft.com/en-us/research/publication/computation-state-machines/">work</a>
with TLA+ assumes that the specification is a state machine. Also more
recently Kleppmann has <a href="https://lawrencecpaulson.github.io/2022/10/12/verifying-distributed-systems-isabelle.html">shown</a>
how to exploit the state machine structure to do proof by (structural)
induction to solve the state explosion problem.</p>
<p>So there you have it, we’ve gone full circle. We started by taking
inspiration from Joe and Erlang’s behaviours, and ended up using the
structure of the <code>gen_server</code> behaviour to make it easier to
solve a problem that Joe used to have.</p>
</section>
<section id="contributing">
<h2><a href="#contributing" title="Contributing">Contributing</a></h2>
<p>There are a bunch of related ideas that I have started working
on:</p>
<ul>
<li>Stealing ideas from Martin Thompson’s work on the LMAX Disruptor and
<a href="https://github.com/real-logic/aeron">aeron</a> to <a href="https://github.com/stevana/pipelined-state-machines">make</a> a
fast event loop, on top of which the behaviours run;</li>
<li>Enriching the state machine type with <a href="https://github.com/stevana/coroutine-state-machines">async
I/O</a>;</li>
<li>How to implement <a href="https://github.com/stevana/supervised-state-machines">supervisors</a>
in more detail;</li>
<li>Hot code <a href="https://github.com/stevana/hot-swapping-state-machines">swapping</a>
of state machines.</li>
</ul>
<p>Feel free to get in touch, if you find any of this interesting and
would like to get involved, or if you have have comments, suggestions or
questions.</p>
</section>
<section id="see-also">
<h2><a href="#see-also" title="See also">See also</a></h2>
<ul>
<li>Chapter 6.1 on behaviours in Joe Armstrong’s <a href="http://kth.diva-portal.org/smash/record.jsf?pid=diva2%3A9492&amp;dswid=-1166">thesis</a>,
p.&nbsp;129;</li>
<li><a href="https://www.erlang.org/doc/design_principles/des_princ.html">OTP
design principles</a>;</li>
<li>The documentation for behaviours:
<ul>
<li><a href="https://www.erlang.org/doc/man/gen_server.html"><code>gen_server</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/gen_event.html"><code>gen_event</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/gen_statem.html"><code>gen_statem</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/supervisor.html"><code>supervisor</code></a>;</li>
<li><a href="https://www.erlang.org/doc/man/application.html"><code>application</code></a>;</li>
<li><a href="https://www.erlang.org/doc/design_principles/release_structure.html">release</a>.</li>
</ul></li>
<li><a href="https://youtube.com/watch?v=7erJ1DV_Tlo">Hewitt, Meijer and
Szyperski: The Actor Model (everything you wanted to know, but were
afraid to ask)</a> (2012);</li>
<li>Erlang the <a href="https://www.youtube.com/watch?v=xrIjfIjssLE">movie</a>
(1990);</li>
<li><a href="https://www.youtube.com/watch?v=cNICGEwmXLU">Systems that
run forever self-heal and scale</a> by Joe Armstrong (Strange Loop,
2013);</li>
<li><a href="https://www.youtube.com/watch?v=TTM_b7EJg5E">The Do’s and
Don’ts of Error Handling</a> by Joe Armstrong (GOTO, 2018);</li>
<li><a href="https://ferd.ca/the-zen-of-erlang.html">The Zen of
Erlang</a> by Fred Hebert (2016);</li>
<li><a href="https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html">The
Hitchhiker’s Guide to the Unexpected</a> by Fred Hebert (2018);</li>
<li><a href="https://www.hpl.hp.com/techreports/tandem/TR-85.7.pdf">Why
Do Computers Stop and What Can Be Done About It?</a> by Jim Gray
(1985);</li>
<li>The supervision trees chapter of <a href="https://adoptingerlang.org/docs/development/supervision_trees/"><em>Adopting
Erlang</em></a> (2019);</li>
<li>“If there’s one thing I’d say to the Erlang folks, it’s you got the
stuff right from a high-level, but you need to invest in your messaging
infrastructure so it’s super fast, super efficient and obeys all the
right properties to let this stuff work really well.” <a href="https://youtu.be/OqsAGFExFgQ?t=2532">quote</a> by Martin Thompson
(Functional Conf, 2017).</li>
</ul>
</section>
<section id="discussion">
<h2><a href="#discussion" title="Discussion">Discussion</a></h2>
<ul>
<li><a href="https://news.ycombinator.com/item?id=34545061">Hacker
News</a></li>
<li><a href="https://lobste.rs/s/7dguth/erlang_s_not_about_lightweight_processes">lobste.rs</a></li>
<li><a href="https://old.reddit.com/r/programming/comments/10mt6hz/erlangs_not_about_lightweight_processes_and/">r/programming</a></li>
<li><a href="https://old.reddit.com/r/haskell/comments/10mgd0a/erlangs_not_about_lightweight_processes_and/">r/haskell</a></li>
<li><a href="https://old.reddit.com/r/erlang/comments/10g0zbg/erlangs_not_about_lightweight_processes_and/">r/erlang</a></li>
<li><a href="https://elixirforum.com/t/erlangs-not-about-lightweight-processes-and-message-passing/53484/7">Elixir
Forum</a></li>
</ul>
</section>
<section id="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>From Joe Armstrong’s thesis (p.&nbsp;6):</p>
<blockquote>
<p>In February 1998 Erlang was banned for new product development within
Ericsson—the main reason for the ban was that Ericsson wanted to be a
consumer of sodware technologies rather than a producer.</p>
</blockquote>
<p>From Bjarne Däcker’s thesis (2000, p.&nbsp;37):</p>
<blockquote>
<p>In February 1998, Erlang was banned within Ericsson Radio AB (ERA)
for new product projects aimed for external customers because:</p>
<p>“The selection of an implementation language implies a more long-term
commitment than selection of processors and OS, due to the longer life
cycle of implemented products. Use of a proprietary language, implies a
continued effort to maintain and further develop the support and the
development environment. It further implies that we cannot easily
benefit from, and find synergy with, the evolution following the large
scale deployment of globally used languages.”</p>
</blockquote>
<p>Joe also says, in this <a href="https://vimeo.com/97329186">talk</a>
(34:30), that there were two reasons for Erlang getting banned: 1) that
it wasn’t Java, and 2) that it wasn’t C++.<a href="#fnref1" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>It’s a common misconception is that Erlang is about
actors.</p>
<p>The actor model first presented in <a href="https://www.ijcai.org/Proceedings/73/Papers/027B.pdf"><em>A
Universal Modular Actor Formalism for Artificial Intelligence</em></a>
by Carl Hewitt, Peter Bishop, Richard Steiger (1973) and refined by
others over time, e.g.&nbsp;see Irene Greif’s <a href="https://dspace.mit.edu/handle/1721.1/57710">thesis</a> (1975) or
Gul Agha’s <a href="https://dspace.mit.edu/handle/1721.1/6952">thesis</a> (1985).</p>
<p>Erlang first appeard later in 1986, but the Erlang developers were <a href="https://erlang.org/pipermail/erlang-questions/2014-June/079794.html">not
aware</a> of the actor model. In fact Robert Virding, one of the
original Erlang designers, <a href="https://erlang.org/pipermail/erlang-questions/2014-June/079865.html">claims</a>
that knowing about the actor model might even have slowed them down.</p>
<p>Carl Hewitt has written a paper called <a href="https://arxiv.org/abs/1008.1459"><em>Actor Model of Computation:
Scalable Robust Information Systems</em></a> (2015) which documents the
differences between Erlang’s processes and the actor model.<a href="#fnref2" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Scala’s Akka seems to be of this opinion. They got
something they call “actors”, not to be confused with the actor model as
per footnote 1, and obligatory supervisors trees. They don’t appear to
have any analogues of the other Erlang behaviours though.</p>
<p>Confusingly Akka has a concept called <a href="https://doc.akka.io/docs/akka/current/general/actors.html#behavior">“behavior”</a>,
but it has nothing to do with Erlang behaviours.<a href="#fnref3" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>The intuition being that since every program using the
state monad can be rewritten to a normal form where a single
<code>read</code>/<code>get</code> followed by a single
<code>write</code>/<code>put</code>, it seems reasonable to assume that
something similar would work for <code>recv</code> and <code>send</code>
over the network. I forget the reference for the state monad normal
form, either Plotkin and Power or Uustalu?<a href="#fnref4" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[She Worked in a Harvard Lab to Reverse Aging, Until ICE Jailed Her (142 pts)]]></title>
            <link>https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html</link>
            <guid>43653998</guid>
            <pubDate>Fri, 11 Apr 2025 14:10:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html">https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html</a>, See on <a href="https://news.ycombinator.com/item?id=43653998">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Fedora change aims for 99% package reproducibility (275 pts)]]></title>
            <link>https://lwn.net/Articles/1014979/</link>
            <guid>43653672</guid>
            <pubDate>Fri, 11 Apr 2025 13:40:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/1014979/">https://lwn.net/Articles/1014979/</a>, See on <a href="https://news.ycombinator.com/item?id=43653672">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<b>Benefits for LWN subscribers</b>
<p>
The primary benefit from <a href="https://lwn.net/Promo/nst-nag5/subscribe">subscribing to LWN</a>
       is helping to keep us publishing, but, beyond that, subscribers get
       immediate access to all site content and access to a number of extra
       site features.  Please sign up today!
</p></blockquote>

<p>The effort to ensure that open-source software is <a href="https://reproducible-builds.org/">reproducible</a> has been
gathering steam over the years, and gaining traction with major Linux
distributions. Debian, for example, has been <a href="https://lwn.net/Articles/985739/">working toward reproducible
builds</a> for more than a decade; it can <a href="https://lists.reproducible-builds.org/pipermail/rb-general/2025-March/003675.html">now</a>
produce <a href="https://wiki.debian.org/ReproducibleInstalls/LiveImages#Status">official
live CDs</a> of the current stable release that are 
reproducible. Fedora started on the path much later, but it has
progressed far enough that the project is now considering a <a href="https://fedoraproject.org/wiki/Changes/Package_builds_are_expected_to_be_reproducible">change
proposal</a> for the Fedora&nbsp;43 development cycle, expected to be
released in October, with a goal of
making 99% of Fedora's package builds reproducible. So far, reaction
to the proposal seems favorable and focused primarily on how to
achieve the <span>goal—with</span> minimal pain for <span>packagers—rather</span> than whether to attempt it.</p>

<h4>Defining reproducible builds</h4>

<p>The Reproducible Builds project <a href="https://reproducible-builds.org/docs/definition/">defines</a> a
build as reproducible if "<q>given the same source code, build
environment and build instructions, any party can recreate bit-by-bit
identical copies of all specified artifacts</q>". In a <a href="https://discussion.fedoraproject.org/t/report-from-the-reproducible-builds-hackfest-during-flock-2023/87469">2023
hackfest report</a>, Zbigniew Jędrzejewski-Szmek said that Fedora has
not prioritized reproducible builds in the past because Fedora has
more control over its build process than Debian and other
distributions. Because Debian allows maintainers to
generate source packages on their local system and to upload
some locally built packages for distribution to users, he said that "<q>trust
in the contents of both source and binary packages is low</q>."
(Debian's build daemons build <em>most</em> binary packages from
source for distribution to users, <a href="https://www.debian.org/doc/manuals/developers-reference/pkgs.html#source-and-binary-uploads">but
there are exceptions</a>.)
Fedora, on the other hand, exercises much more control over packages.</p>

<blockquote>
In Fedora, all packages that are distributed to users are built in the
centralized, strongly controlled infrastructure. All source rpms are
built from "dist-git": a git repository which contains the build
"recipe" and a cryptographic hash of package sources, so it is
relatively easy to verify what changed between package versions, what
"inputs" went into a particular source package, and in what
environment the binary packages were built.
</blockquote>

<p>However, even though Fedora has a tighter control over its
packages, <span>Jędrzejewski-Szmek</span> said that
one of the benefits of reproducible builds was to help detect and
mitigate any kind of supply-chain attack on Fedora's builders and
allow others to perform independent verification that the package
sources match the binaries that are delivered by Fedora. It's
interesting to note that Fedora had embarked on this work before <a href="https://lwn.net/Articles/967866/">the XZ backdoor</a> drew even
more attention to supply-chain attacks.</p>

<p>He acknowledges that Debian is more advanced in its reproducible
builds processes, and notes that Fedora is setting a different 
<a href="https://docs.fedoraproject.org/en-US/reproducible-builds/">definition</a>
for reproducible builds. This definition excludes signatures and
some metadata and focuses solely on the payload of packaged files in a given
RPM:</p>

<blockquote>
A build is reproducible if given the same source code, build
environment and build instructions, and metadata from the build
artifacts, any party can recreate copies of the artifacts that are
identical except for the signatures and parts of metadata.
</blockquote>

<p>The reason Fedora is pursuing a different definition of
reproducible build is that it <em><a href="https://docs.fedoraproject.org/en-US/reproducible-builds/#_caveats">cannot</a></em>
achieve "<q>bit-by-bit</q>" reproducibility by the
original definition. This is because of differences in the package
format and the way that Fedora builds its packages. RPMs embed the
package signature in the RPM when they are built, but Debian uses
detached signatures. RPMs also include information, such as the build
time (<tt>BUILDTIME</tt>) and build host (<tt>BUILDHOST</tt>) in the RPM's
header, that can affect reproducibilty. There was a <a href="https://github.com/rpm-software-management/rpm/issues/2603">discussion</a>
about allowing these variables to be overridden. However, the
prevailing opinion was that the information provided by
<tt>BUILDHOST</tt> is useful, and
overriding its inclusion is not desirable. The contents, however,
should still be "<q>bit-by-bit</q>" identical, even though that phrase
does not turn up in Fedora's definition.</p>

<p>The openSUSE project, which also distributes software using the RPM
format, sets <tt>BUILDHOST</tt> to "<tt>reproducible</tt>", <a href="https://github.com/rpm-software-management/rpm/issues/2603#issuecomment-1713960828">according</a>
to Jan Zerebecki. The actual build host is printed in the build logs,
and interested users can search openSUSE's build logs to find the
host.</p>

<h4>Path to reproducibility</h4>

<p>For <tt>BUILDTIME</tt>, openSUSE sets the build time to the date of
the latest changelog entry. This is provided to builds by the <a href="https://reproducible-builds.org/docs/source-date-epoch/"><tt>SOURCE_DATE_EPOCH</tt></a>
environment variable. This is where Fedora's reproducible builds work
began, with a <a href="https://fedoraproject.org/wiki/Changes/ReproducibleBuildsClampMtimes">change</a>
that was made during the Fedora&nbsp;38 development cycle to "clamp"
the modification time (mtime) of packaged files to
<tt>SOURCE_DATE_EPOCH</tt>. This ensured that the mtimes were
independent of the time of an actual build. Packagers were given the
ability to <span>opt-out</span> of this if, for some
reason, their package would be broken by the new behavior. </p>

<!-- middle-ad -->

<p>During the Fedora&nbsp;41 development cycle, the project
implemented another <a href="https://fedoraproject.org/wiki/Changes/ReproduciblePackageBuilds">change
in the RPM build process</a> to remove common sources of
irreproducibility. That change made use of a Rust program, <a href="https://github.com/keszybz/add-determinism?tab=readme-ov-file#build-postprocessor-to-reset-metadata-fields-for-build-reproducibility"><tt>add-determinism</tt></a>,
that attempts to standardize metadata in binary or source files to
ensure consistency. It is similar to Debian's <a href="https://salsa.debian.org/reproducible-builds/strip-nondeterminism"><tt>strip-nondeterminism</tt></a>,
which is a Perl library that is part of the <a href="https://man7.org/linux/man-pages/man7/debhelper.7.html"><tt>debhelper</tt></a>
tool for building Debian packages. Using
<tt>strip-nondeterminism</tt>, the <tt>debhelper</tt> tool removes
non-deterministic information such as timestamps and filesystem
ordering from various file and archive formats. The Fedora project
chose to write its own tool because it was undesirable to pull Perl
into the build root for every package.</p>

<p>According to the new change proposal, the modifications to Fedora's build
infrastructure to date have allowed it to make 90% of package builds
reproducible. The goal now is to reach 99% of package builds. 
It appears that Fedora has gotten as much mileage out of
infrastructure changes, without requiring individual packagers to deal
with reproducibility problems, as it can. To get to 99% the project is going
to have to ask packagers to treat reproducibility problems in their
packages as bugs.</p>

<p>The change <span>owners—Jędrzejewski-Szmek</span>, Davide
Cavalca, and Jelle <span>van der Waa—would</span>
package the <a href="https://github.com/keszybz/fedora-repro-build"><tt>fedora-repro-build</tt></a>
utility to allow developers to make local rebuilds of packages built in <a href="https://fedoraproject.org/wiki/Koji">Koji</a> (Fedora's build
system) to test their reproducibility. It will also require standing up a public instance of <a href="https://github.com/kpcyrd/rebuilderd/?tab=readme-ov-file#rebuilderd1---">rebuilderd</a>, which is a system for providing independent verification that binary
packages can be reproduced from source code. It can scan a package
repository's metadata for new or updated packages and then queue them
for rebuilding, and it provides an API to query for the reproducibility
status of packages. Rebuilderd can also, optionally, use the <a href="https://diffoscope.org/">diffoscope</a> tool to generate a
report of differences. The <a href="https://reproducible.archlinux.org/">Arch Linux reproducible
status page</a> provides a good example of rebuilderd in use.</p>

<p>If accepted, the proposal would also require an update to Fedora's <a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/">packaging
guidelines</a> that would say packages should (not, at least
currently, "must") build reproducibly and allow bugs to be filed
against packages when they are not reproducible.</p>

<p>Aside from the security benefits of reproducibility, the proposal
also makes the case that it will lead to packages of higher
quality. Irreproducible bits in packages are quite often "<q>caused by
an error or sloppiness in the code</q>". For example, dependence on
hardware architecture in architecture-independent (noarch) packages is
"<q>almost always unwanted and/or a bug</q>", and reproducibility tests
can uncover those bugs.</p>

<p>The proposal acknowledges that some packages will have problems
with reproducibility that cannot be fixed easily. For example, Haskell
packages are not currently reproducible when compiled by more than one
thread, though <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12935">a fix is
being worked on</a>. Packages produced with Go have <a href="https://pagure.io/fedora-reproducible-builds/project/issue/15">debug
data that is not reproducible</a> because the GNU Debugger index file
(<tt>.gdb_index</tt>) can be of varying size even given the same
input. No fix is yet in the works for that. Another known problem is
that the Linux kernel uses an ephemeral key for module signatures. LWN <a href="https://lwn.net/Articles/1012946/">covered</a> a patch set from
Thomas Weißschuh that may solve that problem.</p>

<h4>Feedback</h4>

<p>In the discussion thread on Fedora's Discourse forum, Fedora's
infrastructure lead Kevin Fenzi <a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/8">asked</a>,
"<q>where will this [rebuilderd] instance live and who will maintain
it? 🙂</q>" He also noted it would be good to have documentation on
setting up a rebuilderd instance. "<q>Otherwise I like the
idea!</q>" Cavalca <a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/9">said</a>
that the reproducibility work was currently using an Amazon Web
Services (AWS) account sponsored by Meta, but "<q>we can look at
moving into Fedora infra if there's a preference for that</q>". Fenzi
<a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/10">replied</a>
that it might be good to keep running the work outside Fedora
infrastructure to make it more independent. "<q>Although of course we could run one and
then others could run others and compare</q>".</p>

<p>Daniel P. Berrangé <a href="https://lwn.net/ml/all/Z9vPRyCDNOunM0yY%40redhat.com/">asked</a>
if rebuilderd could be integrated with Koji so that maintainers did
not have to learn another build tool. "<q>I'm pretty unenthusiastic
about dealing with yet another standalone web service providing
post-build testing.</q>" Jędrzejewski-Szmek <a href="https://lwn.net/ml/all/Z9vacXyfaLMAqpbu@kawka3.in.waw.pl/">said</a>
that using Koji to perform the build was an interesting idea, but "<q>we
also want our rebuilds to be as independent as possible</q>", so it
would still be desirable to do them in a system other than
Koji. Rebuilding a package the second time in the same build
environment means "<q>we are not testing much</q>".</p>

<p>Miroslav Suchý, a member of Fedora's infrastructure team, 
<a href="https://lwn.net/ml/all/1f4e42ae-8730-4c12-b9b3-b9ba98ab4979@redhat.com/">wondered</a>
if rebuilderd could submit builds to Fedora's <a href="https://copr.fedorainfracloud.org/">Copr</a> build system
instead of standing up yet another build system in Fedora. This led to
a discussion about Copr's capabilities and whether it would integrate
well with rebuilderd. Jędrzejewski-Szmek <a href="https://lwn.net/ml/all/Z9vUWrmpqwMi4RDm@kawka3.in.waw.pl/">noted</a>
that rebuilderd is a "<q>complete project that does things in its own
way</q>" and it may be complicated to try to teach it to talk to an
external service asynchronously.</p>

<p>Integrating rebuilderd tooling and reports into Fedora's existing
infrastructure has been a recurring theme in the discussion. Simon de
Vlieger <a href="https://lwn.net/ml/all/e47d555a-9bb1-42fd-81ad-6c08eaee5214@app.fastmail.com/#t">said</a>
he was not set on having builds performed in Koji, but wanted the
project "<q>to integrate well with Fedora's <span>pre-existing</span> tools and things so it has the
highest chance of people actually using it</q>" and performing as
people expect.</p>

<h4>Next</h4>

<p>The next step for the proposal is to file a <a href="https://docs.fedoraproject.org/en-US/fesco/#ticket-votes">ticket</a>
with the Fedora Engineering Steering Committee (FESCo), at least one
week after the proposal was <a href="https://lwn.net/ml/all/CAJqbrbcQ2g-rWNUQ4ee2g8bOR3z-_bgvGL+zNKBS48+C5GVFmw@mail.gmail.com/#t">announced</a>. In
this case, that would be no sooner than March&nbsp;26. If FESCo
approves, the owners can begin work on the proposal with an eye to
completion by October, when Fedora&nbsp;43 is planned for release.</p>

<p>Most of Fedora's users have probably not noticed the
reproducibility work in Fedora thus far and won't appreciate any
difference when they install Fedora&nbsp;43 (or 44, 45, and so
on). However, given the continual efforts of bad actors to find and
exploit supply-chain weaknesses in open-source projects, it is a
valuable effort nonetheless.</p><br clear="all"><hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pentagon to terminate $5.1B in IT contracts with Accenture, Deloitte (417 pts)]]></title>
            <link>https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/</link>
            <guid>43653004</guid>
            <pubDate>Fri, 11 Apr 2025 12:23:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/">https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/</a>, See on <a href="https://news.ycombinator.com/item?id=43653004">Hacker News</a></p>
Couldn't get https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[But what if I want a faster horse? (1100 pts)]]></title>
            <link>https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse</link>
            <guid>43652723</guid>
            <pubDate>Fri, 11 Apr 2025 11:39:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse">https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse</a>, See on <a href="https://news.ycombinator.com/item?id=43652723">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>People in tech business circles love this quote by Henry Ford:</p>
<blockquote>
<p>If I had asked people what they wanted, they would have said faster horses.</p>
</blockquote>
<p>The idea is to think outside the box and create entirely new markets instead of just new products in existing ones. Like Apple creating the iPhone (sure, smartphones existed before—but cars also existed before the Ford Model T).</p>
<p>But sometimes, I really want a faster horse.</p>
<p>Netflix in 2012 was a super fast horse. It had a simple but massive catalog of movies and shows, solid recommendations, and basic library management. Compared to my limited local media library it was great. You could actively tune your tastes and rate things with a 5-star system.</p>
<p><img src="https://img.exotext.com/1/vzBUOzXXWZU_1BzCoyxsZ.jpg" alt="">
<img src="https://img.exotext.com/1/uJGx0a12ohaZNjAlWkdGO.jpg" alt="">
<img src="https://img.exotext.com/1/48DF8RvJ0y7NGhXiHV35C.jpg" alt=""></p>
<p>Netflix today is very different. It’s not a library—it’s an <em>experience</em>.
Instead of reliably showing me what I "have" and recommending what I might like, it shuffles content on each interaction, sometimes changing the cover images of shows in real time, like some black-market charlatan. It has no meaningful catalog, no real categories—just short-lived, auto-generated groups like “Binge-worthy” or “Festive spirit.”</p>
<p>Even the “New” section is meaningless. It opens with a “For You” row (huh?), then “Continue Watching”, followed by generic "Popular in <your country="">" rows. It feels like YouTube search: ask for something specific, get a few hits, and then a flood of unrelated "popular" and "recommended" content.</your></p>
<p>“My List” on Netflix randomly shuffles items and changes their covers every few hours. “Continue Watching” may or may not include what I actually watched recently. Sometimes, the engagement algorithms resurrect some random Slovakian cartoon I opened three years ago—one and immediately closed because it that had no English subtitles here in Finland, even though they do exist in other regions.</p>
<p>I just want a faster horse.</p>
<p>Spotify in 2015 was also a super fast horse. It was like my iTunes library, but with millions more tracks. Getting new music became faster, but it didn’t change the nature of my relationship with music.</p>
<p><img src="https://img.exotext.com/1/2fD6yw340md6C_hY0gy2L.png" alt=""></p>
<p><img src="https://img.exotext.com/1/k2gx8LUtCVBrliige2EgS.png" alt=""></p>
<p>Spotify today is... basically Netflix. An inconsistent stream of ever-changing content, weak library tools, and an endless barrage of podcasts.</p>
<p>Overall, consistency, user control, and actual UX innovation are in decline. Everything is converging on TikTok—which is basically TV with infinite channels. You don’t control anything except the channel switch. It's like <a href="https://en.wikipedia.org/wiki/Carcinisation">Carcinisation</a>, a form of convergent evolution where unrelated crustaceans all evolve into something vaguely crab-shaped.</p>
<p>The list goes on:</p>
<ul>
<li>YouTube. YouTube: Once a video catalog with social discovery. Now? TikTok.</li>
<li>LinkedIn. Once a network of resumes. Now? TikTok.</li>
<li>Substack. Yeah, a newsletter platform... now launching TikTok-style videos. <a href="https://techcrunch.com/2025/03/31/substack-is-rolling-out-a-tiktok-like-video-feed-in-its-app/">Seriously</a>.</li>
</ul>
<p><img src="https://img.exotext.com/1/rUsJccBXf09TTBnG2OD-r.jpg" alt=""></p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Make a Longbow (115 pts)]]></title>
            <link>https://www.howtomakealongbow.co.uk</link>
            <guid>43652160</guid>
            <pubDate>Fri, 11 Apr 2025 09:49:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.howtomakealongbow.co.uk">https://www.howtomakealongbow.co.uk</a>, See on <a href="https://news.ycombinator.com/item?id=43652160">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="main" data-uniqueid="WZAtJMbXhLcaXcp" data-parentuniqueid="" role="main">            
<div id="page-zones__main-widgets__591b1f41b22ff" data-name="content" data-uniqueid="GuvOCfBgYTiOQuC" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <h2>We are always updating and expanding this site, keep coming back.&nbsp; <a href="https://www.howtomakealongbow.co.uk/contact" target="_self">Let me know</a> what information you would like to see, we are always glad to hear from you.</h2>
          
      </span>
    </p>

    

</div>
                
<div id="page-zones__main-widgets__591b1f41b503f" data-name="content" data-uniqueid="ouCy6AO4H7DF6Cd" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <h4> <span>Have you always wanted to make your own Longbow (and Arrows!) and learn how to shoot using the equipment you made? &nbsp;Yes! &nbsp;Then you have something in common with me.</span></h4><span>I started out (a long time ago!) making my own Longbow because that is what I wanted to shoot with, my boyhood dream of becoming like my hero, Robin Hood, coupled with the scant availability of `off the shelf` Longbows meant I had to have a go at making my own!&nbsp;&nbsp;</span><span><br></span><span>I started out using the garage as a workshop, never to house a car again!<br></span><span><img alt="richard in first workshop in the garage small again insertjpg" src="https://d2f0ora2gkri0g.cloudfront.net/d5/fa/d5fae7c5-1274-4729-b82e-47e41d12d9e5.jpg"><br></span><span>Eventually turning my new hobby into a full time business, my son, Philip and my wife, Lindsay, joined me in the business, Philip became the first Bowyer apprenticed to his father for hundreds of years. &nbsp;For the past few years Philip and myself have been making videos on the various aspects of Bow and Arrow making, trying to pass on my 35+ years of experience to a wider audience, passing on the knowledge to people like you! &nbsp;Here we present those videos, over time we will regularly update the page with written guides and pictures explaining processes <b>you request to see</b>, hopefully building this page into a repository of all the Longbow making skills you will need. &nbsp;Keep checking back to see new info as its added and subscribe to our YouTube channel and join us on Facebook.</span>
          
      </span>
    </p>

    

</div>
                
<div id="page-zones__main-widgets__6061901ccecbe" data-name="content" data-uniqueid="b0wHMFZ7GWosYfB" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <p>WE NEED HELP!<br>The website you are on now costs me money, yes, if you have never owned or run a website before you may not realise this.<br>Our aim is to collect the knowledge/experience Richard has gained over the years, the very same information he has been imparting to Philip, also to preserve it for years to come, this includes making instructional videos.&nbsp; However, we cannot afford to do this without your help, time making the videos and website is time away from the workshop, also, as I mentioned, the website is surprisingly expensive per month.&nbsp; We were hoping, perhaps naively, that we would become YouTube stars and it would all pay for itself, sadly not.&nbsp;&nbsp;<br>So we have taken the decision to set up a `donate` button, if you feel you are able to help with the monthly costs to keep this resource online and expanding with more videos/content then please use the donate button below, you can donate as much or as little as you wish, its a `one off` donation, we wont hassle you or anything like that...thanks for helping us, it means a great deal.</p><a href="https://www.paypal.com/donate/?hosted_button_id=SPKPNPZL55NLE" target="_blank">https://paypal.me/richardheadlongbows?locale.x=en_GB</a></span>
    </p>

    

</div>
                

                
<div id="page-zones__main-widgets__591d80f78432f" data-name="image" data-uniqueid="DwWpgTP0mzW4gLE" data-parentuniqueid="WZAtJMbXhLcaXcp">

        <figure itemscope="" itemtype="https://schema.org/ImageObject">

                                <a href="https://d2f0ora2gkri0g.cloudfront.net/bkpam2329260_5516301c-b005-4070-8961-6193a62eaef8.jpg" target="_self" rel="nofollow" title="The English Longbow" aria-label="Image preview" itemprop="url">

                                <img src="https://d2f0ora2gkri0g.cloudfront.net/bkpam2329260_5516301c-b005-4070-8961-6193a62eaef8.jpg" alt="The English Longbow" data-path="//d2f0ora2gkri0g.cloudfront.net/bkpam2329260_5516301c-b005-4070-8961-6193a62eaef8.jpg" title="The English Longbow" data-filename="5516301c-b005-4070-8961-6193a62eaef8.jpg" data-filesize="" width="300" itemprop="contentURL">
            </a>
        
                                <figcaption>

                                                    <span itemprop="name">The English Longbow</span>
                
                                                    <span itemprop="description">Lets take a look at what it is and what you are aiming for.</span>
                
            </figcaption>
        
    </figure>

</div>
                
<div id="page-zones__main-widgets__591f04fe5da00" data-name="content" data-uniqueid="0cajdY99W0RxtWk" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <p><span>If you have sought out this site, then chances are you already know what a Longbow is or at least what it means to you, there are many types of Longbow and many ways to make one. &nbsp;We specialise in making the English Longbow, essentially a Victorian recreational and sporting bow, a bow once used by Archers in the Olympics, a bow very different to that of its Medieval forebear.&nbsp; This is the type of equipment we will be concentrating on, though we cover many time periods and bows throughout the range of our instructional videos, so you will be able to glean a good taster of many disciplines. &nbsp;A very popular pastime and sport in the Victorian era, the Longbow was also popular with ladies, one of the few sports at the time where woman could compete &nbsp;and take part in the same events as the men. &nbsp;Often an elegant and beautiful item of sporting equipment, handles made with elaborate materials and designs, if you get a chance to see some original Victorian bows then do. &nbsp;The following videos show nice close ups of the finished product, the completed English Longbow, take a look.</span><br></p>
          
      </span>
    </p>

    

</div>
                
<div id="page-zones__main-widgets__591d8c29ab2ca" data-name="youtube" data-uniqueid="99tSJNHQwDTb0Yy" data-parentuniqueid="WZAtJMbXhLcaXcp">

        <p>

                <iframe width="100" height="215" data-src="https://www.youtube.com/embed/QAUkYkesJlk?wmode=transparent" allowfullscreen="" aria-label="Interactive video"></iframe>

    </p>

</div>
                

                
<div id="page-zones__main-widgets__6319f8ff9edd8" data-name="content" data-uniqueid="WCmnjlER5hLin9c" data-parentuniqueid="WZAtJMbXhLcaXcp">
        <p><span itemprop="mainContentOfPage" itemscope="" itemtype="https://schema.org/WebPageElement">

                    <p>We have broken the process down into easily digestible chunks, if you are using a laptop computer you will see a menu over on the left, if you are on your phone/tablet you will see a menu button at the top of the page.&nbsp; Either place will show you a number of parts, probably best to start with part 1, but, maybe you have a particular subject in bow making you want to look at, well, you can jump to that section straight away.&nbsp; I hope you like our little lessons and find them useful and inspirational.&nbsp; Starting anything new can seem daunting, but if you go slowly, one step at a time you will lose those fears and soon be on your way.&nbsp; The information we give you here is by no way exhaustive, there are many aspects of bow making we haven't got round to filming yet and we dont know everything!&nbsp; There are many other makers out there offering advice, telling you how to do it, we do not claim to be THE experts, we do not claim to be definitive, take everything you here with a pinch of salt, after all, this is the internet!</p>
          
      </span>
    </p>

    

</div>
                

    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Strengths Are Your Weaknesses (247 pts)]]></title>
            <link>https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/</link>
            <guid>43652024</guid>
            <pubDate>Fri, 11 Apr 2025 09:27:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/">https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/</a>, See on <a href="https://news.ycombinator.com/item?id=43652024">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<p><em>“People are package deals; you take the good with the confused. In most cases, strengths and weaknesses are two sides of the same coin.”</em> — Steve Jobs</p>
</blockquote>



<p>I’ve noticed something interesting about almost every engineer I’ve managed: their biggest strengths and their most frustrating weaknesses are often the exact same trait showing up in different contexts.</p>



<p>I learned this lesson personally when I was still a junior engineer. My ability to code quickly made me very productive — I’d often ship features in half the time estimated. My manager praised my speed constantly. </p>



<p>Well, until one day… During a particularly painful postmortem, we discovered that a production issue happened because of an edge case I had missed in my rush to complete the feature. My strength (coding speed) and my weakness (occasionally overlooking details) weren’t separate traits — they were the exact same characteristic showing up differently depending on the context.</p>



<p>This isn’t just true for me or a few people — it’s nearly universal. <strong>The qualities we celebrate in our team members are usually the same ones causing our biggest headaches</strong>. They’re not separate traits; they’re two sides of the same coin.</p>



<p>So what can we do about this? Three things have helped me:</p>



<ol>
<li><strong>Get real about this duality in your 1:1s.</strong> Most people see their strengths and weaknesses as separate things. They’re not. In 1:1s, I’ll say something like: “Your ability to dive deep into problems is why you find solutions nobody else can. It’s also why you sometimes miss deadlines. Same trait, different outcomes.” This simple reframing helps people stop beating themselves up over their “flaws.”</li>



<li><strong>Be crystal clear about context.</strong> Don’t make people guess when their natural tendencies help versus hurt. One of my engineers was incredibly collaborative—wouldn’t make a single decision without getting everyone’s input. I told him exactly when this worked and when it didn’t: “For architecture decisions? Get all the input you want. For day-to-day coding decisions? You have permission to just decide and move on.” This clear guidance helped him develop his own judgment about when to lean into his collaborative nature.</li>



<li><strong>Use tension as a feature, not a bug.</strong> Some managers try to build teams where everyone works the same way. <a href="https://terriblesoftware.org/2025/03/12/why-your-harmonious-team-is-actually-failing/">That’s a mistake</a>. I once paired our fastest coder with our most methodical, thorough reviewer. The first week was pure chaos—they drove each other nuts. By the third week, they were producing better code than either could alone; the fast coder started anticipating the thorough one’s concerns, and the methodical one learned which shortcuts were actually okay to take.</li>
</ol>



<p>The goal isn’t to create “balanced” engineers with no pronounced strengths or weaknesses. That’s just impossible. <strong>We want self-aware engineers who understand their natural tendencies and can adjust them based on what each situation demands</strong>.</p>



<p>I don’t think our job is to sand down people’s edges until everyone’s the same boring shape. We’re not trying to “fix” our engineers. Instead, we’re helping them see themselves clearly, warts and all, and teaching them when to crank up or dial back their natural tendencies. It’s more like coaching someone to use their power effectively than trying to rebuild them from scratch.</p>



<p>After all, we’re all package deals. The traits that make us brilliant will inevitably challenge us in other contexts. Understanding this doesn’t just make us better managers — it makes us more compassionate humans.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why I Program in Lisp (202 pts)]]></title>
            <link>http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html</link>
            <guid>43651576</guid>
            <pubDate>Fri, 11 Apr 2025 08:26:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html">http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html</a>, See on <a href="https://news.ycombinator.com/item?id=43651576">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3404727118065375102" itemprop="description articleBody">
<p>Lisp is not the most popular language.  It never was.  Other
  general purpose languages are more popular and ultimately can do
  everything that Lisp can (if Church and Turing are correct).  They
  have more libraries and a larger user community than Lisp does.
  They are more likely to be installed on a machine than Lisp is.</p>

<p>Yet I prefer to program in Lisp.  I keep a Lisp REPL open at all
  times, and I write prototypes and exploratory code in Lisp.  Why do
  I do this?  Lisp is easier to remember, has fewer limitations and hoops you
  have to jump through, has lower “friction” between my
  thoughts and my program, is easily customizable, and, frankly, more
  fun.</p>

<p>Lisp's dreaded Cambridge Polish notation is uniform and
  universal.  I don't have to remember whether a form takes curly
  braces or square brackets or what the operator precedency is or some
  weird punctuated syntax that was invented for no good reason.  It is (operator
  operands ...) for everything.  Nothing to remember.  I basically stopped
  noticing the parenthesis 40 years ago.  I can indent how I
  please.</p> 

<p>I program mostly functionally, and Lisp has three features that
  help out tremendously here.  First, if you avoid side effects, it
  directly supports the substitution model.  You can tell Lisp
  that when it sees this simple form, it can just replace it with that
  more complex one.  Lisp isn't constantly pushing you into thinking
  imperatively.  Second, since the syntax is uniform and doesn't depend on
  the context, you can refactor and move code around at will.  Just
  move things in balanced parenthesis and you'll pretty much be
  ok.</p>

<p>Third, in most computer languages, you can abstract a specific value by
  replacing it with a variable that names a value.  But you can perform a further
  abstraction by replacing a variable that names a quantity with a
  function that computes a quantity.  In functional programming, you often downplay
  the distinction between a value and a function that produces that
  value.  After all, the difference is only one of time spent waiting for the
  answer.  In Lisp, you can change an expression that denotes an
  object into an abtraction that computes an object by simply wrapping
  a <code>lambda</code> around it.  It's less of a big deal these
  days, but properly working <code>lambda</code> expressions were only
  available in Lisp until recently.  Even so, <code>lambda</code>
  expressions are generally pretty clumsy in other languages.</p>

<p>Functional programming focuses on functions (go figure!).  These
  are the ideal black box abstraction:  values go in, answer comes
  out.  What happens inside?  Who knows!  Who cares! But you can plug
  little simple functions together and get bigger more complex
  functions.  There is no limit on doing this.  If you can frame your
  problem as "I have this, I want that", then you can code it as a
  functional program.  It is true that functional programming takes a
  bit of practice to get used to, but it allows you to build complex
  systems out of very simple parts.  Once you get the hang of it, you
  start seeing everything as a function.  (This isn't a limitation.
  Church's lambda calculus is a model of computation based on
  functional composition.)</p>

<p>Lisp lets me try out new ideas as quickly as I can come up
  with them.  New programs are indistinguishable from those built in to
  the language, so I can build upon them just as easily.  Lisp's
  debugger means I don't have to stop everything and restart the world
  from scratch every time something goes wrong.  Lisp's safe memory
  model means that bugs don't trash my workspace as I explore the
  problem.</p>

<p>The REPL in lisp evaluates <em>expressions</em>, which are the
  fundamental fragments of Lisp programs.  You can type in part of a
  Lisp program and see what it does immediately.  If it works, you can
  simply embed the expression in a larger program.  Your program takes
  shape in real time as you explore the problem.</p>

<p>Lisp's dynamic typing gives you virtually automatic ad hoc
  polymorphism.  If you write a program that calls +, it will work on
  any pair of objects that have a well-defined + operator.  Now this
  can be a problem if you are cavalier about your types, but if
  you exercise a little discipline (like not defining + on
  combinations of strings and numbers, for example), and if you avoid
  automatic type coercion, then you can write very generic code that
  works on a superset of your data types.  (Dynamic typing is a
  two-edged sword.  It allows for fast prototyping, but it can hide
  bugs that would be caught at compile time in a statically typed
  language.)</p>

<p>Other languages may share some of these features, but Lisp has them all
  together.  It is a language that was designed to be used as a tool
  for thinking about problems, and that is the fun part of
  programming.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The thing about Europe: it's the actual land of the free now (150 pts)]]></title>
            <link>https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now</link>
            <guid>43651489</guid>
            <pubDate>Fri, 11 Apr 2025 08:04:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now">https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now</a>, See on <a href="https://news.ycombinator.com/item?id=43651489">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><time datetime="2025-04-10T12:53:53.593Z"> <!-- -->Apr 10th 2025</time></p></div><section><p data-component="paragraph"><span data-caps="initial">T</span><small>he thing </small>about Europe, the sneerers say, is that it is over-regulated. Mounds of red tape and punitive taxes mean there are no trillion-dollar entrepreneurial ventures in France or Germany to match Amazon, Google or Tesla. But that is not all Europe is lacking. Also absent from the continent are the broligarchs who sit atop such behemoths, some of whom have a tighter grip on power than on reality. There are thus no European Rasputins pumping untold millions into political campaigns, getting pride of place at leaders’ inaugurations or their own new-minted government departments to run. There are few unicorns in Europe, alas, and too little innovation. That said, there are absolutely no tech executives boasting on social media of spending their weekends feeding bits of the state “into the wood chipper”.</p></section><p><h3 id="article-tags">Explore more</h3><nav aria-labelledby="article-tags"><a href="https://www.economist.com/topics/world" data-analytics="tags:world"><span>World</span></a><a href="https://www.economist.com/topics/charlemagne" data-analytics="tags:charlemagne"><span>Charlemagne</span></a><a href="https://www.economist.com/topics/europe" data-analytics="tags:europe"><span>Europe</span></a></nav></p><p>This article appeared in the Europe section of the print edition under the headline “The thing about Europe”</p><div data-test-id="chapterlist" data-tracking-id="content-well-chapter-list"><div><hr data-testid="rule-accent"><div><h3><a href="https://www.economist.com/europe" text="Europe" data-analytics="chapter_list_header:Europe">Europe</a></h3><p><span>April 12th 2025</span></p></div></div><ul><li><a href="https://www.economist.com/europe/2025/04/09/germanys-new-centrist-government-is-reassuring-but-bland" id="e5df72b7-5b2b-464e-93b4-77ddd0878a14" data-analytics="article:reports_headline:1" data-test-id="chapterlist-link-0"><span data-testid="right-london-5-false"><span>→</span></span><span>Germany’s new centrist government is reassuring but bland</span></a></li><li><a href="https://www.economist.com/europe/2025/04/09/the-eus-response-to-donald-trumps-tariffs-seems-to-work" id="3962b04a-a8db-42bf-868c-90261c728b3a" data-analytics="article:reports_headline:2" data-test-id="chapterlist-link-1"><span data-testid="right-london-5-false"><span>→</span></span><span>The EU’s response to Donald Trump’s tariffs seems to work</span></a></li><li><a href="https://www.economist.com/europe/2025/04/08/ukraine-thinks-it-can-hold-off-russia-as-long-as-it-needs-to" id="aca46504-49d9-4373-9c65-7630bd24d811" data-analytics="article:reports_headline:3" data-test-id="chapterlist-link-2"><span data-testid="right-london-5-false"><span>→</span></span><span>Ukraine thinks it can hold off Russia as long as it needs to</span></a></li><li><a href="https://www.economist.com/europe/2025/04/06/how-europe-hopes-to-turn-ukraine-into-a-steel-porcupine" id="65fd8bdb-3472-4072-93b9-fd540b68f13b" data-analytics="article:reports_headline:4" data-test-id="chapterlist-link-3"><span data-testid="right-london-5-false"><span>→</span></span><span>How Europe hopes to turn Ukraine into a “steel porcupine”</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/turkeys-government-is-trying-to-repress-its-way-out-of-a-crisis" id="7d8658c9-66aa-49d5-a850-c42b0c85f2d5" data-analytics="article:reports_headline:5" data-test-id="chapterlist-link-4"><span data-testid="right-london-5-false"><span>→</span></span><span>Turkey’s government is trying to repress its way out of a crisis</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/spanish-morgues-are-straining-to-identify-migrants" id="35e164dd-f80a-4370-bcc3-47e3961713f8" data-analytics="article:reports_headline:6" data-test-id="chapterlist-link-5"><span data-testid="right-london-5-false"><span>→</span></span><span>Spanish morgues are straining to identify migrants</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now" id="ad25ce23-9bae-4699-9124-6b5bf8776946" data-analytics="article:reports_headline:7" data-test-id="chapterlist-link-6"><span data-testid="right-economist-red-false"><span>→</span></span><span>The thing about Europe: it’s the actual land of the free now</span></a></li></ul></div><div orientation="vertical" data-test-id="vertical"><div orientation="vertical"><figure><img loading="lazy" width="1280" height="1709" decoding="async" data-nimg="1" sizes="300px" srcset="https://www.economist.com/cdn-cgi/image/width=16,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 16w, https://www.economist.com/cdn-cgi/image/width=32,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 32w, https://www.economist.com/cdn-cgi/image/width=48,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 48w, https://www.economist.com/cdn-cgi/image/width=64,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 64w, https://www.economist.com/cdn-cgi/image/width=96,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 96w, https://www.economist.com/cdn-cgi/image/width=128,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 128w, https://www.economist.com/cdn-cgi/image/width=256,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 256w, https://www.economist.com/cdn-cgi/image/width=360,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 360w, https://www.economist.com/cdn-cgi/image/width=384,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 384w, https://www.economist.com/cdn-cgi/image/width=480,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 480w, https://www.economist.com/cdn-cgi/image/width=600,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 600w, https://www.economist.com/cdn-cgi/image/width=834,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 834w, https://www.economist.com/cdn-cgi/image/width=960,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 960w, https://www.economist.com/cdn-cgi/image/width=1096,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1096w, https://www.economist.com/cdn-cgi/image/width=1280,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1280w, https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1424w" src="https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg"></figure></div><div orientation="vertical"><h3 orientation="vertical">From the April 12th 2025 edition</h3><p orientation="vertical">Discover stories from this section and more in the list of contents</p><p><a href="https://www.economist.com/weeklyedition/2025-04-12" data-analytics="sidebar:weekly_edition"><span data-testid="right-economist-red-true"><span>⇒</span></span><span>Explore the edition</span></a></p></div></div><div><a href="https://s100.copyright.com/AppDispatchServlet?publisherName=economist&amp;publication=economist&amp;title=The%20thing%20about%20Europe%3A%20it%E2%80%99s%20the%20actual%20land%20of%20the%20free%20now&amp;publicationDate=2025-04-10&amp;contentID=%2Fcontent%2F2uekcbhb1cdfhkhgafg61bvhel9pm03o&amp;type=A&amp;orderBeanReset=TRUE" target="_blank" rel="noreferrer" data-analytics="end_of_article:reuse_this_content"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" data-testid="renew-outline"><path fill="var(--mb-colour-base-chicago-45)" d="M5.1 16.05a8.25 8.25 0 0 1-.825-1.95A7.696 7.696 0 0 1 4 12.05c0-2.233.775-4.133 2.325-5.7C7.875 4.783 9.767 4 12 4h.175l-1.6-1.6 1.4-1.4 4 4-4 4-1.4-1.4 1.6-1.6H12c-1.667 0-3.083.588-4.25 1.763C6.583 8.938 6 10.367 6 12.05c0 .433.05.858.15 1.275.1.417.25.825.45 1.225l-1.5 1.5ZM12.025 23l-4-4 4-4 1.4 1.4-1.6 1.6H12c1.667 0 3.083-.587 4.25-1.762C17.417 15.063 18 13.633 18 11.95c0-.433-.05-.858-.15-1.275-.1-.417-.25-.825-.45-1.225l1.5-1.5c.367.633.642 1.283.825 1.95.183.667.275 1.35.275 2.05 0 2.233-.775 4.133-2.325 5.7C16.125 19.217 14.233 20 12 20h-.175l1.6 1.6-1.4 1.4Z"></path></svg><span>Reuse this content</span></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Live Map of the London Underground (438 pts)]]></title>
            <link>https://www.londonunderground.live/</link>
            <guid>43651390</guid>
            <pubDate>Fri, 11 Apr 2025 07:41:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.londonunderground.live/">https://www.londonunderground.live/</a>, See on <a href="https://news.ycombinator.com/item?id=43651390">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    
    <p>
      Right click to orbit<br>
      Zoom for buildings<br>
      Hover for details
    </p>
    <p id="live-icon">
      <svg viewBox="0 0 100 40" xmlns="http://www.w3.org/2000/svg">
        <circle cx="20" cy="20" r="10" fill="#ff0000"></circle>
        <text x="45" y="29" fill="#ff0000" font-size="30">LIVE</text>
      </svg>
    </p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Playing in the Creek (318 pts)]]></title>
            <link>https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek</link>
            <guid>43650656</guid>
            <pubDate>Fri, 11 Apr 2025 05:05:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek">https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek</a>, See on <a href="https://news.ycombinator.com/item?id=43650656">Hacker News</a></p>
Couldn't get https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Default styles for h1 elements are changing (334 pts)]]></title>
            <link>https://developer.mozilla.org/en-US/blog/h1-element-styles/</link>
            <guid>43649853</guid>
            <pubDate>Fri, 11 Apr 2025 02:14:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developer.mozilla.org/en-US/blog/h1-element-styles/">https://developer.mozilla.org/en-US/blog/h1-element-styles/</a>, See on <a href="https://news.ycombinator.com/item?id=43649853">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main><article lang="en-US"><figure><img alt="Default styles for h1 elements are changing." src="https://developer.mozilla.org/en-US/blog/h1-element-styles/featured.png" height="420" width="800"></figure><p>Browsers are starting to roll out changes in default UA styles for nested section headings. Developers should check that their sites don't rely on UA styles for certain cases to avoid unexpected results and failing Lighthouse checks. In this post, we'll have a look at what the incoming changes are, how to identify if it's an issue on your pages, and some hints for conformant and better-structured websites.</p><section aria-labelledby="whats_changing"><h2 id="whats_changing"><a href="#whats_changing">What's changing</a></h2><div><p>The HTML spec used to define an outline algorithm that gave <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements"><code>&lt;h1&gt;</code></a> elements an implicit semantic heading level based on how many sectioning elements (<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/section"><code>&lt;section&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/aside"><code>&lt;aside&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/nav"><code>&lt;nav&gt;</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/article"><code>&lt;article&gt;</code></a>) it was nested inside.</p>
<p>The browser rendering was such that <code>section &gt; h1</code> would have the same font-size and margin as <code>&lt;h2&gt;</code>. The <code>section &gt; section &gt; h1</code> would be represented as <code>&lt;h3&gt;</code>, and so on. The default rendering was implemented in browsers in their UA styles, but not the heading level in the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Accessibility_tree">accessibility tree</a> (what screen readers use). Websites started to use sectioning elements, but didn't expect to see the automatic heading levels from the outline algorithm.</p>
<p>In general, this created confusion about where developers could use <code>&lt;h1&gt;</code> elements, tools handled the HTML differently, and the outline algorithm was considered problematic. The outline algorithm was <a href="https://github.com/whatwg/html/pull/7829" target="_blank">removed from the HTML spec in 2022</a>, but the UA stylesheet rules still remain. The rules in the default styles are what browser vendors are starting to remove now.</p>
<!--  prettier-ignore-start  -->
<div><pre><code>/* where x is :is(article, aside, nav, section) */
x h1 { margin-block: 0.83em; font-size: 1.50em; }
x x h1 { margin-block: 1.00em; font-size: 1.17em; }
x x x h1 { margin-block: 1.33em; font-size: 1.00em; }
x x x x h1 { margin-block: 1.67em; font-size: 0.83em; }
x x x x x h1 { margin-block: 2.33em; font-size: 0.67em; }
</code></pre></div>
<!--  prettier-ignore-end  -->
<p>For example:</p>
<div><pre><code>&lt;body&gt;
  &lt;h1&gt;Level 1&lt;/h1&gt;
  &lt;section&gt;
    &lt;h1&gt;Level 2&lt;/h1&gt;
    &lt;section&gt;
      &lt;h1&gt;Level 3&lt;/h1&gt;
      &lt;section&gt;
        &lt;h1&gt;Level 4&lt;/h1&gt;
      &lt;/section&gt;
    &lt;/section&gt;
  &lt;/section&gt;
&lt;/body&gt;
</code></pre></div></div></section><section aria-labelledby="what_to_expect_and_when"><h2 id="what_to_expect_and_when"><a href="#what_to_expect_and_when">What to expect and when</a></h2><div><p>Alongside the changes in browser styles, page auditing tools like Lighthouse now flag cases of <code>&lt;h1&gt;</code>s without defined <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code>font-size</code></a> as bad practice. Here's the gist of what to expect:</p>
<ul>
<li><code>&lt;h1&gt;</code> will no longer adapt its style based on surrounding sectioning elements like <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;aside&gt;</code>. UA stylesheet will apply the same style to <code>&lt;h1&gt;</code> with no implicit styles that demote <code>&lt;h1&gt;</code> to match <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, etc.</li>
<li>Lighthouse will flag a warning if <code>&lt;h1&gt;</code> is used without a specified font-size. The Lighthouse deprecation warning to look out for is <code>H1UserAgentFontSizeInSection</code>. Hints for dealing with this are described in the next section.</li>
</ul>
<p>In terms of when this is happening, changes are rolling out in the following browsers in this timeline:</p></div></section><section aria-labelledby="firefox"><h3 id="firefox"><a href="#firefox">Firefox</a></h3><div><ul>
<li>From March 31, 2025, Firefox is rolling out changes to 50% of <a href="https://www.mozilla.org/en-US/firefox/channel/desktop/#beta" target="_blank">Beta 138</a> users to remove UA styles for <code>h1</code> in <code>article</code>, <code>aside</code>, <code>nav</code>, or <code>section</code> on desktop. The plan is to roll out to 5% of users on the Firefox 138 stable release, ramp up to 50% of users, then ship on all platforms in Firefox 140. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1885509" target="_blank">bug 1885509</a>.</li>
<li>Since Firefox 136, developers will see a console warning for <code>h1</code>s in <code>article</code>/<code>aside</code>/<code>nav</code>/<code>section</code> without author-defined font-size or margins: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1937568" target="_blank">bug 1937568</a>.</li>
<li>To test in Firefox with the new behavior, set <code>layout.css.h1-in-section-ua-styles.enabled</code> to false in about:config.</li>
</ul></div></section><section aria-labelledby="chrome"><h3 id="chrome"><a href="#chrome">Chrome</a></h3><div><ul>
<li>Since version 136, Chrome shows deprecation warnings for <code>&lt;h1&gt;</code> inside the 4 elements, when the <code>&lt;h1&gt;</code> uses the default smaller font size. Marking something deprecated in Chromium <strong>will lower Lighthouse scores</strong> for "Best Practices": <a href="https://issues.chromium.org/issues/394111284" target="_blank">issue 394111284</a></li>
</ul></div></section><section aria-labelledby="safari"><h3 id="safari"><a href="#safari">Safari</a></h3><div><ul>
<li>There's no implementation bugs to track in Safari for these changes yet, but we <a href="https://github.com/whatwg/html/issues/7867#issuecomment-2124317504" target="_blank">can expect WebKit to follow</a> with equivalent updates.</li>
</ul></div></section><section aria-labelledby="fixing_the_lighthouse_warning"><h2 id="fixing_the_lighthouse_warning"><a href="#fixing_the_lighthouse_warning">Fixing the Lighthouse warning</a></h2><div><p>Lighthouse has recently <a href="https://github.com/GoogleChrome/lighthouse/issues/16404" target="_blank">inherited a check</a> based on Chromium's DevTools warnings for sites that don't specify a <code>font-size</code> for <code>&lt;h1&gt;</code> elements. The new rule is called <code>H1UserAgentFontSizeInSection</code> and shows up since March following the addition of deprecation warnings. If you see the <code>&lt;h1&gt;</code> warning, make sure you're applying an explicit <code>&lt;h1&gt;</code> font-size and margins. Here's some recommended styles to use:</p>
<div><pre><code>h1 {
  margin-block: 0.67em;
  font-size: 2em;
}
</code></pre></div>
<p>To avoid overwriting other style rules that target <code>&lt;h1&gt;</code> you can use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:where"><code>:where()</code></a>, which has zero <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity">specificity</a>:</p>
<div><pre><code>:where(h1) {
  margin-block: 0.67em;
  font-size: 2em;
}
</code></pre></div>
<p>The MDN page for heading elements now contains <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements#specifying_a_uniform_font_size_for_h1">the usage notes listed above</a> so there is a visible place for developers to see this information.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a href="#summary">Summary</a></h2><div><p>Here's some things to keep in mind:</p>
<ul>
<li><strong>Do not</strong> rely on default browser styles for conveying a heading hierarchy. Explicitly define your document hierarchy using <code>&lt;h2&gt;</code> for second-level headings, <code>&lt;h3&gt;</code> for third-level, etc.</li>
<li>Always define your own <code>font-size</code> and <code>margin</code> for <code>&lt;h1&gt;</code> elements.</li>
<li>Consider updating your CSS resets to account for the change.</li>
<li>Audit your site <a href="https://pagespeed.web.dev/" target="_blank">using Lighthouse</a> and browser <a href="https://firefox-dev.tools/" target="_blank">DevTools</a> to check for deprecated usage.</li>
<li>Check the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements#specifying_a_uniform_font_size_for_h1">usage notes</a> on the MDN documentation for HTML section headings.</li>
</ul></div></section><section aria-labelledby="see_also"><h2 id="see_also"><a href="#see_also">See also</a></h2></section><section><a href="https://developer.mozilla.org/en-US/blog/global-privacy-control/"><article><h2><strong>Previous<!-- --> Post</strong> <!-- -->Implications of Global Privacy Control</h2></article></a></section></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why do AI company logos look like buttholes? (124 pts)]]></title>
            <link>https://velvetshark.com/ai-company-logos-that-look-like-buttholes</link>
            <guid>43649640</guid>
            <pubDate>Fri, 11 Apr 2025 01:39:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://velvetshark.com/ai-company-logos-that-look-like-buttholes">https://velvetshark.com/ai-company-logos-that-look-like-buttholes</a>, See on <a href="https://news.ycombinator.com/item?id=43649640">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="AI company logos with suspicious circular designs" loading="lazy" width="1800" height="1000" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fwhy-do-AI-company-logos-look-like-buttholes.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fwhy-do-AI-company-logos-look-like-buttholes.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fwhy-do-AI-company-logos-look-like-buttholes.png&amp;w=3840&amp;q=75"></p>
<p>If you pay attention to AI company branding, you'll notice a pattern:</p>
<ol>
<li>Circular shape (often with a gradient)</li>
<li>Central opening or focal point</li>
<li>Radiating elements from the center</li>
<li>Soft, organic curves</li>
</ol>
<p>Sound familiar? It should, because it's also an apt description of... well, you know.</p>
<p>A butthole.</p>
<h2>The circular AI logo epidemic</h2>
<p>If you ever thought that AI company logos look like buttholes, you're not alone.</p>
<p>FastCompany noticed this trend in 2023 and published an article about it, but (I could only presume) their editors and lawyers didn't let them title the article the way the wanted it to title, so it got published with a more safe for work title: <a href="https://www.fastcompany.com/90869029/ai-boom-logo-trend-swirling-hexagon">The AI boom is creating a new logo trend: the swirling hexagon</a>. They also were careful not to mention anything anatomical.</p>
<p>I don't have editors or lawyers, so let's take a closer look at some examples:</p>
<h4>OpenAI's logo evolution</h4>
<p><img alt="OpenAI's logo evolution" loading="lazy" width="1510" height="438" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fopenai-logo-evolution.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fopenai-logo-evolution.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fopenai-logo-evolution.png&amp;w=3840&amp;q=75"></p>
<p>OpenAI's original logo was a simple, text-based mark. Then came the redesign: a perfect circle with a subtle gradient and central void.</p>
<p><a href="https://openai.com/brand/">OpenAI's official explanation</a> is a masterclass in corporate euphemism:</p>
<p><em>"The Blossom logo is more than just a visual symbol; it represents the core philosophy that guides our approach to design and innovation. At its heart, the logo captures the dynamic intersection between humanity and technology—two forces that shape our world and inspire our work. The design embodies the fluidity and warmth of human-centered thinking through the use of circles, while right angles introduce the precision and structure that technology demands."</em></p>
<p>Sure, Sam.</p>
<p>Translation: "We made a circular shape with some angles because it looked nice, then wrote flowery language to justify why our butthole-adjacent design is actually profound."</p>
<p>The <strong>fluidity and warmth of human-centered thinking through the use of circles</strong> is perhaps the most elegant way anyone has ever described making a logo that resembles an anus.</p>
<h4>The Big AI companies</h4>
<p><img alt="Big AI companies logos" loading="lazy" width="1800" height="1000" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fbig-ai-companies-logos.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fbig-ai-companies-logos.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fbig-ai-companies-logos.png&amp;w=3840&amp;q=75"></p>
<p>Looking at the logos of the Big AI companies, you can see that they almost all of them have a circular or snowflake-like shape and a central opening.</p>
<p>Only DeepSeek and DeepMind don't follow the trend. Interestingly, both are sea-related.</p>
<h4>Smoking gun: Anthropic's Claude</h4>
<p>Up until this point, the logos have been subtle. You might say that the logos are simply circular and there's not much more to it.</p>
<p>But Anthropic's Claude takes it to the next level.</p>
<p>Here's a side-by-side comparison with a drawing from Kurt Vonnegut's book "Breakfast of Champions". I added Claude's logo below for easy comparison.</p>
<p><img alt="Vonnegut vs Claude" loading="lazy" width="832" height="687" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2FVonnegut-vs-Claude.png&amp;w=1080&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2FVonnegut-vs-Claude.png&amp;w=1920&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2FVonnegut-vs-Claude.png&amp;w=1920&amp;q=75"></p>
<p>Both the drawing and the description in the book are unambiguous. This is not just "a circular shape with a gradient" anymore, is it?</p>
<h4>It's not just AI companies</h4>
<p>Even traditional companies aren't immune. Here are a few notable or funny examples. But the percentage of AI company logos that look like buttholes is still significanly higher than than any other industry.</p>
<p><img alt="Non-AI butthole logos" loading="lazy" width="1800" height="481" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fnon-ai-logos.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fnon-ai-logos.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fnon-ai-logos.png&amp;w=3840&amp;q=75"></p>
<p>I especially like the Electrolux one. It's simple, memorable, and once you see a butt and bikini, you can't unsee it.</p>
<h2>Why does this keep happening?</h2>
<p>There are several factors at play:</p>
<h4>Circular design psychology</h4>
<p>Circles represent wholeness, completion, and infinity—concepts that align with AI's promise. They're also friendly and non-threatening, qualities companies desperately want to project when selling potentially job-replacing technology.</p>
<h4>Unintentional biomimicry</h4>
<p><img alt="Face on Mars" loading="lazy" width="832" height="614" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fface-on-mars.jpg&amp;w=1080&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fface-on-mars.jpg&amp;w=1920&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fface-on-mars.jpg&amp;w=1920&amp;q=75"></p>
<p>The human brain finds familiar patterns in random shapes (<a href="https://en.wikipedia.org/wiki/Pareidolia">pareidolia</a>), like a face on Mars, taken by the Viking 1 orbiter and released by NASA in 1976.</p>
<p>But sometimes, designers inadvertently recreate biological forms without realizing the... anatomical implications.</p>
<h4>The copycat effect</h4>
<p>Once a few major players adopted the circular sphincter aesthetic, everyone followed suit. Now we have an industry where standing out means looking exactly like everyone else's butthole.</p>
<p>Basically, the same reason <a href="https://velvetshark.com/why-do-brands-change-their-logos-and-look-like-everyone-else">why so many brands change their logos and look like everyone else</a>.</p>
<p><img alt="Tech and fashion logos using sans serif fonts" loading="lazy" width="2483" height="1419" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fb51d96d2b8eae559c71d90_tech-fashion-logos-sans-serif.png&amp;w=3840&amp;q=75 1x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fb51d96d2b8eae559c71d90_tech-fashion-logos-sans-serif.png&amp;w=3840&amp;q=75"></p>
<h4>Design by committee</h4>
<p>Another factor is how these logos are created. Important corporate decisions involve many stakeholders. The result is often the safest, most inoffensive option, the average of everyone's opinions. In design meetings at AI companies, conversations probably sound like:</p>
<ul>
<li>Can we make it more futuristic?</li>
<li>It needs to feel advanced but approachable.</li>
<li>Let's add a subtle gradient to convey intelligence.</li>
</ul>
<p>No single person suggests making a logo that resembles an anus, but when everyone's feedback gets incorporated, that's what often emerges. Risk aversion in corporate environments naturally pushes designs toward familiar, "safe" territory, which apparently means anatomical openings.</p>
<h2>What this says about tech branding</h2>
<p>This phenomenon reveals something deeper about the tech industry: the fear of standing out too much. Despite claims of innovation and disruption, there's tremendous pressure to look legitimate by conforming to established visual language.</p>
<p>When OpenAI's sphincter-like logo became successful, it created a template that said, "This is what serious AI looks like." Now, any new AI company that doesn't resemble a colorful anatomical opening risks being seen as unserious or unprofessional.</p>
<h3>Tech design trends through history</h3>
<p>This isn't the first time tech design has gone through a conformity phase. Consider these previous waves:</p>
<ul>
<li><strong>1990s-2000s: 3D and Glossy</strong> - Remember when every logo needed a drop shadow and a glassy shine? Apple's aqua interface set the standard.</li>
<li><strong>2010-2013: Skeuomorphism</strong> - Digital designs mimicking physical objects, with stitched leather textures and realistic dials.</li>
<li><strong>2013-2018: Flat Design</strong> - Reaction to skeuomorphism brought minimal, clean interfaces with bright colors and no shadows.</li>
<li><strong>2018-2022: Neomorphism</strong> - Soft shadows and semi-flat design creating subtle, "touchable" interfaces.</li>
<li><strong>2022-Present: The Butthole Era</strong> - Circular gradients with central focal points dominating AI branding.</li>
</ul>
<p>Each era started with innovations that were quickly copied until the industry reached saturation point and moved on to the next trend.</p>
<p><img alt="Sans serif bags" loading="lazy" width="1600" height="667" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fbf32ea6160018ba6a9cb84_sans-serif-bags.jpg&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fbf32ea6160018ba6a9cb84_sans-serif-bags.jpg&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fbf32ea6160018ba6a9cb84_sans-serif-bags.jpg&amp;w=3840&amp;q=75"></p>
<p><em>Logos become increasingly interchangeable (one of the bags is real, but they all look the same)</em></p>
<h2>Historic logo disasters: You're not alone</h2>
<p>AI companies can take some comfort in knowing they're not the first to face unintended anatomical comparisons. Logo history is filled with disasters but to keep this consistent with the theme of the article, here's a couple of them.</p>
<p><img alt="Logo disasters" loading="lazy" width="1800" height="481" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fother-logo-disasters.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fother-logo-disasters.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fother-logo-disasters.png&amp;w=3840&amp;q=75"></p>
<ul>
<li>Zune logo, when flipped, says something different. Maybe that's one of the reasons why iPod won?</li>
<li>Brazilian Institute of Oriental Studies is a stylized pagoda sillhouetted against the setting sun. Or so the designers wanted it to look. The final result was much more... anatomical. They since changed it to something less suggestive.</li>
</ul>
<p>Maybe companies should have a panel of "middle schoolers" on their payroll to review logos before launch. They'll find every possible inappropriate interpretation with ruthless efficiency.</p>
<h2>Breaking free from the butthole</h2>
<p>For companies brave enough to differentiate, here are some alternatives:</p>
<ol>
<li><strong>Embrace sharp angles</strong> - geometric shapes with defined edges create a distinct visual identity</li>
<li><strong>Use negative space creatively</strong> - think FedEx arrow, not biological openings</li>
<li><strong>Avoid radial symmetry</strong> - not everything needs to be perfectly circular</li>
<li><strong>Skip the gradient</strong> - flat design still works</li>
<li><strong>Test with diverse audiences</strong> - if five different people independently say "that looks like a butthole," it probably does (show it to teenagers if you want to uncover even the most subtle anatomical implications)</li>
</ol>
<h2>Conclusion</h2>
<p>Does this mean AI companies should change their branding? Not necessarily. The familiarity clearly works in building trust. But perhaps the next wave of AI innovation could be accompanied by some visual innovation too.</p>
<p>For companies looking to break the mold, consider these approaches that successful tech brands have used:</p>
<ul>
<li><strong>Embrace meaningful abstraction</strong> - Slack's hashtag-inspired logo communicates collaboration without circular clichés</li>
<li><strong>Leverage letterforms</strong> - Netflix's simple "N" has become instantly recognizable without anatomical confusion</li>
<li><strong>Tell a story</strong> - Stripe's distinctive parallel lines reflect payment flows moving seamlessly</li>
<li><strong>Use distinctive color combinations</strong> - Twitch's purple branding stands out in a sea of blue tech logos</li>
</ul>
<p>The challenge for the next generation of AI companies isn't just technological - it's finding visual language that communicates innovation without resorting to the same tired sphincter-inspired patterns.</p>
<p><strong>PS.</strong> <em>This post is meant to be humorous, but let's not pretend there isn't a serious point here about <a href="https://velvetshark.com/why-do-brands-change-their-logos-and-look-like-everyone-else">the depressing sameness in modern design</a>. No actual anuses were consulted during this research, though several designers were clearly thinking about them.</em></p><div><blockquote><h4><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right:0.4rem;flex-shrink:0"><path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334v-.425A6.673 6.673 0 0 0 16 3.542a6.573 6.573 0 0 1-1.884.517 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.084.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115c-.211 0-.417-.02-.616-.058a3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 0 13.58a9.29 9.29 0 0 0 5.031 1.468"></path></svg><span>If you like what you see, you'll find more stuff like this on<!-- --> <a href="https://twitter.com/velvet_shark" target="_blank" rel="noopener">my Twitter</a>.</span></h4></blockquote></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Crystal 1.16.0 (123 pts)]]></title>
            <link>https://crystal-lang.org/2025/04/09/1.16.0-released/</link>
            <guid>43649618</guid>
            <pubDate>Fri, 11 Apr 2025 01:36:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://crystal-lang.org/2025/04/09/1.16.0-released/">https://crystal-lang.org/2025/04/09/1.16.0-released/</a>, See on <a href="https://news.ycombinator.com/item?id=43649618">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">


<p>We are announcing a new Crystal release 1.16.0 with several new features and bug fixes.</p>

<p>Pre-built packages are available on <a href="https://github.com/crystal-lang/crystal/releases/tag/1.16.0">GitHub Releases</a>
and our official distribution channels.
See <a href="https://crystal-lang.org/install/">crystal-lang.org/install</a> for
installation instructions.</p>

<h2 id="stats">Stats</h2>

<p>This release includes <a href="https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.16.0">162 changes since 1.15.1</a>
by 19 contributors.  We thank all the contributors for all the effort put into
improving the language! ❤️</p>

<h2 id="changes">Changes</h2>

<p>Below we list the most remarkable changes in the language, compiler and stdlib.
For more details, visit the <a href="https://github.com/crystal-lang/crystal/releases/tag/1.16.0">full changelog</a>.</p>

<h3 id="breaking">Breaking</h3>

<p>The following changes break prior behavior of the compiler, but we expect them to not break much in existing code. If this is not the case, please let us know in the <a href="https://github.com/crystal-lang/crystal/issues">issue tracker</a> or <a href="https://forum.crystal-lang.org/">forum</a>.</p>

<h4 id="fixed-implementation-of-filematch">Fixed implementation of <code><span>File</span><span>.</span><span>match?</span></code></h4>

<p>The implementation of <a href="https://crystal-lang.org/api/1.16.0/File.html#match%3F(pattern%3AString%2Cpath%3APath|String)%3ABool-class-method"><code><span>File</span><span>.</span><span>match?</span></code></a> was insufficient and has been replaced by a new algorithm.
This change should not affect any behaviour that was previously working as documented.</p>

<p>The correction of implementation bugs leads to the following changes in observed behaviour:</p>

<ul>
  <li>Wildcard and globstar are able to match non-greedily. For example, <code><span>**</span><span>/a</span></code> now matches <code><span>a</span></code>.</li>
  <li>Globstar matches full path segments only, otherwise it’s just two wildcards (which is equivalent to a single one). For example, <code><span>a</span><span>**</span></code> no longer matches <code><span>ab</span><span>/</span><span>c</span></code> (but it matches <code><span>ab</span></code>).</li>
  <li>Subpatterns in branches are parsed with respect to their respective syntactical context. For example, <code><span>{[}]}</span></code> now matches <code><span>}</span></code>.
It parses as a branch with one subpattern that describes the character set <code><span>}</span></code>. Previously, this was a parse error.</li>
  <li>Escapes for special character are recognized. For example, <code><span>\\</span><span>t</span></code> now matches <code><span>\</span><span>t</span></code> while previously it matched <code><span>t</span></code>.</li>
  <li>The grammar for parsing character classes is more flexible. For example, <code><span>[</span><span>a</span><span>-</span><span>]</span></code>, now matches <code><span>a</span></code> and <code><span>-</span></code>. Previously, it was a pattern error (incomplete character range).</li>
</ul>

<p>Note: <a href="https://crystal-lang.org/api/1.16.0/Dir.html#glob(patterns:Enumerable,match:File::MatchOptions=File::MatchOptions.glob_default,follow_symlinks:Bool=false):Array(String)-class-method"><code><span>Dir</span><span>.</span><span>glob</span></code></a> is implemented differently and is not affected by that invalid behaviour. There were no changes to it.</p>

<p><em>Thanks, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<h4 id="parameter-name-suffixes-are-deprecated">Parameter name suffixes are deprecated</h4>

<p>The suffixes <code><span>?</span></code> and <code><span>!</span></code> for parameter names of defs, macros and blocks are deprecated.  This aligns them with other variable names.  They produce a warning now (<a href="https://github.com/crystal-lang/crystal/issues/12197">#12197</a>).</p>

<p><em>Thanks, <a href="https://github.com/potomak">@potomak</a></em></p>

<h4 id="implicit-return-type-of-enumerablesum-and-product">Implicit return type of <code><span>Enumerable</span><span>#sum</span></code> and <code><span>#product</span></code></h4>

<p><a href="https://crystal-lang.org/api/1.16.0/Enumerable.html#sum-instance-method"><code><span>Enumerable</span><span>#sum</span></code></a> and <a href="https://crystal-lang.org/api/1.16.0/Enumerable.html#product-instance-method"><code><span>#product</span></code></a> no longer resolve an implicit return type when the element type is a union. This can’t work reliably.
Instead, you need to specify the sum/product type explicitly by the <code><span>initial</span></code> parameter with a value of the intended return type (<a href="https://github.com/crystal-lang/crystal/issues/15314">#15314</a>).
In effect, this moves a runtime error condition to a compile time error.</p>

<div><pre><code><span># Crystal 1.16.0</span>
<span>[</span><span>1</span><span>,</span> <span>10000000000_u64</span><span>].</span><span>sum</span> <span># Error: `Enumerable#sum` and `#product` do not support Union types.</span>
                         <span># Instead, use `Enumerable#sum(initial)` and `#product(initial)`,</span>
                         <span># respectively, with an initial value of the intended type of the call.</span>

<span># Crystal &lt; 1.16.0</span>
<span>[</span><span>1</span><span>,</span> <span>10000000000_u64</span><span>].</span><span>sum</span> <span># OverflowError: Arithmetic overflow</span>

<span># Passing an explicit initial value works, before and after:</span>
<span>[</span><span>1</span><span>,</span> <span>10000000000_u64</span><span>].</span><span>sum</span><span>(</span><span>0_u64</span><span>)</span> <span># =&gt; 10000000001_u64</span>
</code></pre></div>

<p><em>Thanks, <a href="https://github.com/rvprasad">@rvprasad</a></em></p>

<h4 id="resource-string-in-httprequest">Resource string in <code><span>HTTP</span><span>::</span><span>Request</span></code></h4>

<p><a href="https://crystal-lang.org/api/1.16.0/HTTP/Request.html#-instance-method"><code><span>HTTP</span><span>::</span><span>Request</span></code></a> was fixed to correctly parse HTTP resource strings that look like an absolute URL.
This may break code that relied on the previous, buggy behaviour (<a href="https://github.com/crystal-lang/crystal/issues/15499">#15499</a>).</p>

<div><pre><code><span># Crystal 1.16.0</span>
<span>HTTP</span><span>::</span><span>Request</span><span>.</span><span>new</span><span>(</span><span>"GET"</span><span>,</span> <span>"http://example.com/foo"</span><span>).</span><span>path</span> <span># =&gt; "http://example.com/foo"</span>

<span># Crystal &lt; 1.16.0</span>
<span>HTTP</span><span>::</span><span>Request</span><span>.</span><span>new</span><span>(</span><span>"GET"</span><span>,</span> <span>"http://example.com/foo"</span><span>).</span><span>path</span> <span># =&gt; "/foo"</span>
</code></pre></div>

<p><em>Thanks, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<h4 id="environment-changes-for-subcommands">Environment changes for subcommands</h4>

<p>The compiler won’t set the environment variable <code><span>$CRYSTAL</span></code> when running a process for a subcommand.
This variable was only in introduced in <a href="https://github.com/crystal-lang/crystal/issues/14953">#14953</a> in 1.14.0.
We addded a more flexible alternative <code><span>$CRYSTAL_EXEC_PATH</span></code>, and the equivalent to <code><span>$CRYSTAL</span></code> is now <code><span>$CRYSTAL_EXEC_PATH</span><span>/</span><span>crystal</span></code>. The compiler also prepends its path to <code><span>$PATH</span></code> (<a href="https://github.com/crystal-lang/crystal/issues/15186">#15186</a>).</p>

<p><em>Thanks, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<h3 id="execution-contexts">Execution Contexts</h3>

<p>Execution contexts from <a href="https://github.com/crystal-lang/rfcs/pull/2">RFC 0002</a> are available as a preview feature.
It has already proven to be quite robust, but there might be some rough edges.</p>

<p>You can test execution contexts with the compiler flags <code><span>-</span><span>Dpreview_mt</span> <span>-</span><span>Dexecution_context</span></code>.
The default context is single threaded (unlike standalone <code><span>-</span><span>Dpreview_mt</span></code>).
But you can then start additional contexts as you need (for example, a <a href="https://crystal-lang.org/api/master/Fiber/ExecutionContext/MultiThreaded.html"><code><span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>MultiThreaded</span></code></a> or <a href="https://crystal-lang.org/api/master/Fiber/ExecutionContext/Isolated.html"><code><span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>Isolated</span></code></a>).</p>

<div><pre><code><span>mt_context</span> <span>=</span> <span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>MultiThreaded</span><span>.</span><span>new</span><span>(</span><span>"worker-threads"</span><span>,</span> <span>4</span><span>)</span>

<span>10</span><span>.</span><span>times</span> <span>do</span>
  <span>mt_context</span><span>.</span><span>spawn</span> <span>do</span>
    <span>do_something</span>
  <span>end</span>
<span>end</span>

<span>gtk</span> <span>=</span> <span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>Isolated</span><span>.</span><span>new</span><span>(</span><span>"Gtk"</span><span>)</span> <span>do</span>
  <span>Gtk</span><span>.</span><span>main</span>
<span>end</span>
<span>gtk</span><span>.</span><span>wait</span>
</code></pre></div>

<p>Execution contexts are supported on most targets, including, Linux, macOS, Windows and the different BSDs, on X86 and ARM architectures.
This addition marks the peak of the <a href="https://crystal-lang.org/2024/02/09/84codes-manas-mt/">ongoing project to improve multi-threading support</a> with the help of <a href="https://www.84codes.com/">84codes</a>.</p>

<h3 id="language">Language</h3>

<ul>
  <li><a href="https://crystal-lang.org/api/1.16.0/Slice.html#literal(*args)-class-method"><code><span>Slice</span><span>.</span><span>literal</span></code></a> can infer the element type (<a href="https://github.com/crystal-lang/crystal/issues/15529">#15529</a>) and works in the interpreter (<a href="https://github.com/crystal-lang/crystal/issues/15531">#15531</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<ul>
  <li>Macro <a href="https://crystal-lang.org/api/1.16.0/Crystal/Macros.html#sizeof(type):NumberLiteral-instance-method"><code><span>sizeof</span></code></a> and <a href="https://crystal-lang.org/api/1.16.0/Crystal/Macros.html#alignof(type):NumberLiteral-instance-method"><code><span>alignof</span></code></a> provide information on stable types (<a href="https://github.com/crystal-lang/crystal/issues/15497">#15497</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<h3 id="standard-library">Standard library</h3>

<ul>
  <li>Several bug fixes and performance improvements to <code><span>Path</span></code> handling, especially for Windows paths.</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<ul>
  <li>New methods <a href="https://crystal-lang.org/api/1.16.0/Indexable.html#find(if_none=nil,offset:Int=0,&amp;:T-%3E)-instance-method"><code><span>Indexable</span><span>#find</span></code></a> and <a href="https://crystal-lang.org/api/1.16.0/Indexable.html#find%21%28offset%3AInt%3D0%2C%26%3AT-%3E%29-instance-method"><code><span>#find!</span></code></a> (<a href="https://github.com/crystal-lang/crystal/issues/15552">#15552</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/punteek">@punteek</a></em></p>

<ul>
  <li>New methods <a href="https://crystal-lang.org/api/1.16.0/Crystal/EventLoop/FileDescriptor.html#wait_readable%28file_descriptor%3ACrystal%3A%3ASystem%3A%3AFileDescriptor%29%3ANil-instance-method"><code><span>EventLoop</span><span>#wait_readable</span></code></a>, <a href="https://crystal-lang.org/api/1.16.0/Crystal/EventLoop/FileDescriptor.html#wait_writeable%28file_descriptor%3ACrystal%3A%3ASystem%3A%3AFileDescriptor%29%3ANil-instance-method"><code><span>#wait_writable</span></code></a> (<a href="https://github.com/crystal-lang/crystal/issues/15376">#15376</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/ysbaddaden">@ysbaddaden</a></em></p>

<h3 id="compiler">Compiler</h3>

<ul>
  <li>The compiler CLI understand the long option <code><span>--</span><span>output</span></code> everywhere, instead of just the short variant <code><span>-</span><span>o</span></code> (<a href="https://github.com/crystal-lang/crystal/issues/15519">#15519</a>). It also accepts a directory name as value, in which case the file name is derived from the source filename (<a href="https://github.com/crystal-lang/crystal/issues/15471">#15471</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a>, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<ul>
  <li>The compiler respects the environment variable <code><span>$MACOSX_DEPLOYMENT_TARGET</span></code>, which gets
rid of annoying linker warnings when target versions are mismatched (<a href="https://github.com/crystal-lang/crystal/issues/15603">#15603</a>)</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<h3 id="compiler-tools">Compiler tools</h3>

<p>The doc generator can optionally include <code><span>private</span></code> and <code><span>protected</span></code> objects as well as objects in lib bindings (<code><span>lib</span></code>, <code><span>fun</span></code>, <code><span>union</span></code>, <code><span>cstruct</span></code>, <code><span>external</span></code>, and <code><span>type</span></code>), as proposed in <a href="https://github.com/crystal-lang/rfcs/blob/main/text/0011-extending-api-docs.md">RFC 0011</a>. The <code><span>:showdoc</span><span>:</span></code> directive enables that.</p>

<div><pre><code><span># :showdoc:</span>
<span>#</span>
<span># Documentation for LibFoo</span>
<span>lib</span> <span>Foo</span>
  <span># Documentation for function foo</span>
  <span>fun</span> <span>foo</span> <span>:</span> <span>Void</span>
<span>end</span>

<span># :showdoc:</span>
<span>#</span>
<span># Documentation for method bar</span>
<span>private</span> <span>def</span> <span>bar</span>
<span>end</span>
</code></pre></div>

<p><em>Thanks <a href="https://github.com/nobodywasishere">@nobodywasishere</a></em></p>

<h3 id="dependency-updates">Dependency Updates</h3>

<ul>
  <li>Support for LLVM 20 (<a href="https://github.com/crystal-lang/crystal/issues/15412">#15412</a>)</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<h3 id="deprecations">Deprecations</h3>

<ul>
  <li><a href="https://crystal-lang.org/api/1.16.0/LLVM/ABI.html"><code><span>LLVM</span><span>::</span><span>ABI</span></code></a> (and <a href="https://crystal-lang.org/api/1.16.0/LLVM/TargetMachine.html#abi-instance-method"><code><span>LLVM</span><span>::</span><span>TargetMachine</span><span>#abi</span></code></a>) is deprecated without replacement (<a href="https://github.com/crystal-lang/crystal/issues/15227">#15227</a>).</li>
</ul>

<hr>

<div>
  <p>Thanks
</p>
<p>We have been able to do all of this thanks to the continued support of [84codes] and every other <a href="https://crystal-lang.org/sponsors">sponsor</a>.
 To maintain and increase the development pace, donations and sponsorships are
 essential.  <a href="https://opencollective.com/crystal-lang">OpenCollective</a> is
 available for that.</p>

<p>Reach out to <a href="mailto:crystal@manas.tech">crystal@manas.tech</a>
 if you’d like to become a direct sponsor or find other ways to support Crystal.
 We thank you in advance!</p>


  <p><a href="https://crystal-lang.org/sponsors#contribute">Contribute</a>
</p></div>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fintech founder charged with fraud; AI app found to be humans in the Philippines (451 pts)]]></title>
            <link>https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/</link>
            <guid>43648950</guid>
            <pubDate>Thu, 10 Apr 2025 23:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/">https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/</a>, See on <a href="https://news.ycombinator.com/item?id=43648950">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p id="speakable-summary">Albert Saniger, the founder and former CEO of Nate, an AI shopping app that promised a “universal” checkout experience, was charged with defrauding investors on Wednesday, <a href="https://www.justice.gov/usao-sdny/pr/tech-ceo-charged-artificial-intelligence-investment-fraud-scheme" target="_blank" rel="noreferrer noopener nofollow">according</a> to a press release from the U.S. Department of Justice.</p>

<p>Founded in 2018, Nate raised over $50 million from investors like Coatue and Forerunner Ventures, most recently <a href="https://www.businesswire.com/news/home/20210617005139/en/Universal-Shopping-App-nate-Raises-%2438M-to-Expand-Its-Online-Payment-Solutions" target="_blank" rel="noreferrer noopener nofollow">raising</a> a $38 million Series A in 2021 led by Renegade Partners.</p>







<p>Nate said its app’s users could buy from any e-commerce site with a single click, thanks to AI. In reality, however, Nate relied heavily on hundreds of human contractors in a call center in the Philippines to manually complete those purchases, the DOJ’s Southern District of New York alleges.</p>

<p>Saniger raised millions in venture funding by claiming that Nate was able to transact online “without human intervention,” except for edge cases where the AI failed to complete a transaction. But despite Nate acquiring some AI technology and hiring data scientists, its app’s actual automation rate was effectively 0%, the DOJ claims.</p>

<p>Nate’s heavy usage of human contractors was the subject of <a href="https://www.theinformation.com/articles/shaky-tech-and-cash-burning-giveaways-ai-shopping-startup-shows-excesses-of-funding-boom" target="_blank" rel="noreferrer noopener nofollow">an investigation</a> by The Information in 2022.</p>

<p>Saniger didn’t respond to a request for comment. He is currently <a href="https://buttercore.com/" target="_blank" rel="noreferrer noopener nofollow">listed</a> as a managing partner at New York VC Buttercore Partners, which didn’t respond to a request for comment either.</p>

<p>The DOJ’s <a href="https://www.justice.gov/usao-sdny/media/1396131/dl?inline" target="_blank" rel="noreferrer noopener nofollow">indictment</a> says that Nate ran out of money and was forced to sell its assets in January 2023, leaving its investors with “near total” losses. Albert Saniger’s LinkedIn profile indicates he was no longer CEO as of 2023.</p>


<p>Nate isn’t the only startup that has allegedly exaggerated its AI capabilities. For example, an “AI” drive-through software startup was also powered largely by humans in the Philippines, The Verge <a href="https://www.theverge.com/2023/12/8/23993427/artificial-intelligence-presto-automation-fast-food-drive-thru-philippines-workers" target="_blank" rel="noreferrer noopener nofollow">reported</a> in 2023.&nbsp;</p>

<p>More recently, Business Insider <a href="https://www.businessinsider.com/evenup-ai-errors-hallucinations-former-employees-2024-11" target="_blank" rel="noreferrer noopener nofollow">reported</a> that an AI legal tech unicorn, EvenUp, used humans to do much of its work.</p>
</div><div>
	
	
	
	

	
<div>
	<p>
		Charles Rollet is a senior reporter at TechCrunch. His investigative reporting has led to U.S. government sanctions against four tech companies, including China’s largest AI firm. Prior to joining TechCrunch, Charles covered the surveillance industry for IPVM. Charles is based in San Francisco, where he enjoys hiking with his dogs. You can contact Charles securely on Signal at charlesrollet.12 or +1-628-282-2811. 	</p>
</div>


	
	<p>
		<a data-ctatext="View Bio" data-destinationlink="https://techcrunch.com/author/charles-rollet/" data-event="button" href="https://techcrunch.com/author/charles-rollet/">View Bio <svg style="width: 1em;" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="var(--c-svg, currentColor)" d="M16.5 12 9 19.5l-1.05-1.05L14.4 12 7.95 5.55 9 4.5z"></path></svg></a>
	</p>
	
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Black Mirror's pessimism porn won't lead us to a better future (165 pts)]]></title>
            <link>https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism</link>
            <guid>43648890</guid>
            <pubDate>Thu, 10 Apr 2025 23:24:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism">https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism</a>, See on <a href="https://news.ycombinator.com/item?id=43648890">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Black Mirror is more than science fiction – its stories about modernity have become akin to science folklore, shaping our collective view of technology and the future.</p><p>Each new innovation gets an allegory: smartphones as tools for a new age caste system, robot dogs as overzealous human hunters, drones as a murderous swarm, artificial intelligence as new age necromancy, virtual reality and brain chips as seizure-inducing nightmares, to name a few. Episodes most often channel our collective anxieties about the future – or foment new ones through masterly writing, directing, casting and acting. It is a must-watch, but must we take it so seriously?</p><p>Black Mirror fails to consistently explore the duality of technology and our reactions to it. It is a critical deficit. The show mimics the folly of Icarus and Daedalus – the original tech bros – and the hubris of Jurassic Park’s Dr Hammond. Missing are the lessons of the Prometheus myth, which shows fire as a boon for humanity, not doom, though its democratization angered benevolent gods. Absent is the plot twist of Pandora’s box that made it philosophically useful: the box also contained hope and opportunity that new knowledge brings. While Black Mirror explores how humans react to technology, it too often does so in service of a dystopian narrative, ignoring Isaac Asimov’s <a href="https://newsletter.pessimistsarchive.org/p/how-isaac-asimov-predicted-the-openai" data-link-name="in body link">observation</a>: that humans are prone to irrationally fear or resist technology.</p><p>Black Mirror is more pessimism porn than Plato’s parable, imparting to its audience a tacit lesson: fear the future more than the past. Fear too much technological change, not too little. It is an inherently populist narrative, one that appeals to nostalgia: intellectually, we understand the present is better than the past in large part due to scientific and technological change, yet emotionally and instinctually we can’t help but feel this time in history is different, that the future can only get worse.</p><h2 id="the-heavy-consequences-of-technological-fearmongering">The heavy consequences of technological fearmongering</h2><p>This kind of reductive dystopianism – a hallmark of post-1960s science fiction – clouds our thinking about the future because it “cannot imagine a better future, and it doesn’t ask anyone to bother to make one”, as New Yorker writer Jill Lepore <a href="https://www.newyorker.com/magazine/2017/06/05/a-golden-age-for-dystopian-fiction" data-link-name="in body link">noted</a> in 2017.</p><p>We run from the speculative risks of the future, towards the proven dangers of the past, a dynamic I call the <a href="https://x.com/LouisAnslow/status/1786627656655818781" data-link-name="in body link">Frankenstein fallacy</a>. This pessimistic archetype has bipartisan allure because “it requires so little by way of literary, political, or moral imagination”, <a href="https://www.newyorker.com/magazine/2017/06/05/a-golden-age-for-dystopian-fiction" data-link-name="in body link">according</a> to Lepore; consequently, it is politically useful but unconstructive – as populism tends to be.</p><p>Technological pessimism will not insure against a more dystopian tomorrow. Fear of genetically modified organisms – which kicked off around the <a href="https://medium.com/timeline/gmo-food-labeling-rifkin-d5f125ba19f7" data-link-name="in body link">release</a> of Jurassic Park – has seen countries run from GMO <a href="https://www.theguardian.com/science/2002/jun/01/gm.zimbabwenews" data-link-name="in body link">food aid</a> toward famine, from vitamin-enriched GMO “golden rice” towards malnutrition leading to <a href="https://www.theguardian.com/environment/2019/oct/26/gm-golden-rice-delay-cost-millions-of-lives-child-blindness" data-link-name="in body link">millions of avoidable deaths</a>. Countries such as the United States and <a href="https://www.dw.com/en/germany-shuts-down-its-last-nuclear-power-stations/a-65249019" data-link-name="in body link">Germany</a> ran from a future of nuclear energy, <a href="https://www.theguardian.com/environment/2024/mar/20/nuclear-plant-closure-carbon-emissions-new-york" data-link-name="in body link">towards coal</a> and oil. In the Philippines, a nuclear plant built in the 1970s sits unused – <a href="https://www.rappler.com/philippines/145299-national-consensus-reopen-bataan-nuclear-power-plant-doe/" data-link-name="in body link">never turned on</a> – while its population deals with sky-high energy prices. All three countries are now trying to <a href="https://www.reuters.com/world/europe/germanys-nuclear-lobby-says-up-six-reactors-could-restart-2025-03-05/" data-link-name="in body link">reverse course</a>, realizing that the certainty of stasis and stagnation is its own form of dystopia. In contrast, France ran from the past towards the future, overcoming public fears of nuclear disasters, now getting <a href="https://www.euronews.com/business/2024/05/16/economics-of-nuclear-power-the-france-germany-divide-explained" data-link-name="in body link">70%</a> of its electricity from nuclear power.</p><p>Countries such as India, Brazil, Mexico and Thailand have run from vapes – <a href="https://www.usnews.com/news/best-countries/articles/countries-that-ban-the-sale-of-vapes-e-cigarettes" data-link-name="in body link">outlawing</a> them, while permitting traditional tobacco cigarettes for 1.8 billion of their citizens. Better unsafe than sorry.</p><p>In the US, Robert F Kennedy Jr runs from vaccines towards natural herd immunity – although he might be having second <a href="https://www.npr.org/sections/shots-health-news/2025/04/07/nx-s1-5354900/hhs-rfk-endorses-mmr-measles-vaccine-stoking-supporters-fury" data-link-name="in body link">thoughts</a> now that the risks have become less abstract. Bipartisan efforts have sought to <a href="https://www.theverge.com/2023/8/4/23819578/kosa-kids-online-safety-act-privacy-danger" data-link-name="in body link">remove online anonymity</a> to protect children, forgetting that as adults they’ll lose the protection that anonymity brings in the context of free speech. Attacks on environmentally friendly lab-grown beef from Republicans have drawn support by Democrats such as <a href="https://x.com/SenFettermanPA/status/1786509165340357115" data-link-name="in body link">John Fetterman</a>.</p><p>In the UK, encryption is <a href="https://www.theverge.com/news/644367/apple-inc-v-the-uk-government" data-link-name="in body link">under siege</a>, a modern-day Promethean protection that angers the powerful, in the name of keeping society from runaway technology. Meanwhile, <a href="https://www.euronews.com/culture/2025/04/07/boris-johnson-criticises-plans-to-show-hit-netflix-show-adolescence-in-secondary-schools" data-link-name="in body link">Adolescence</a> is the latest dystopian Netflix show to shape public policy conversations about technology and the future.</p><p>Artificial intelligence has been touted as an <a href="https://futureoflife.org/open-letter/pause-giant-ai-experiments/" data-link-name="in body link">existential threat</a> to humanity while it accelerates <a href="https://www.washingtonpost.com/wellness/2025/04/07/ai-is-coming-skin-cancer-detection/" data-link-name="in body link">cancer treatments</a>, <a href="https://fortune.com/2024/03/27/1-in-3-americans-who-die-in-hospital-had-sepsis-and-thats-just-one-of-the-many-areas-where-ai-can-improve-early-diagnosis/" data-link-name="in body link">reduces</a> sepsis deaths and produces <a href="https://www.bbc.com/news/articles/clyz6e9edy3o" data-link-name="in body link">new antibiotics</a> to treat stubborn superbugs.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-12">skip past newsletter promotion</a><p id="EmailSignup-skip-link-12" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>The folly of treating the miracles of science and technology as inevitable curses became unavoidable in the global coronavirus pandemic. The risk of inaction and stasis was too real to ignore, and the absence of technology became the threat. Tellingly, it was in this period – between 2020 and 2022 – that Black Mirror went on hiatus. Charlie Brooker <a href="https://www.cnet.com/culture/entertainment/black-mirror-creator-charlie-booker-not-working-on-black-mirror-because-life-is-black-mirror/" data-link-name="in body link">said</a> this was because people didn’t want to consume dystopian fiction when everything felt so bleak. In a moment when screens kept us connected, protected and employed, the reductiveness of dystopian science fiction felt silly. Biotechnology like GMOs and mRNA offered existential hope, rather than risk.</p><p>Suddenly, it became deeply uncool and unintellectual to fear technology – as 5G masts burned and Black Mirror-esque conspiracy theories of computer chips being injected through vaccines spread, dystopian fiction lost its allure, though its vestiges still lurked: Chipotle offered free burritos to the vaccinated, burritos it proudly markets as GMO-free. King Charles, who once <a href="https://www.theguardian.com/environment/2008/aug/13/prince.charles.gm.farming#:~:text=Prince%20Charles%20has%20warned%20that,environmentally%2C%20of%20all%20time%22." data-link-name="in body link">warned</a> that genetically modified organisms would cause the biggest environmental disaster of all time, would <a href="https://eu.usatoday.com/story/entertainment/celebrities/2020/11/23/vaccine-news-astrazeneca-oxford-earns-praise-prince-william/6389217002/" data-link-name="in body link">congratulate</a> Oxford researchers for their GMO-based Covid vaccine. Publications like Scientific American would deplore pandemic conspiracy theories, when less than a year earlier it would <a href="https://www.scientificamerican.com/blog/observations/we-have-no-reason-to-believe-5g-is-safe/" data-link-name="in body link">amplify</a> unfounded alarmism about 5G.</p><h2 id="new-parables">New parables</h2><p>A new progressivism, one that embraces construction over obstruction, of pragmatism over precaution, must find new allegories to think about technology and the future – stories that challenge a mindset the British prime minister, Keir Starmer, criticized for leading us to miss massive opportunities <a href="https://x.com/Keir_Starmer/status/1878811596182667578" data-link-name="in body link">“because of the fears of small risk”</a>.</p><p>We must move away from binary tales of catastrophe, not towards naive utopianism that ignores problems and risks that comes with change, but hopeful solutionism that reminds us we can solve and mitigate them – stories that don’t make us forget that brain chips can liberate paraplegics, robot dogs can <a href="https://foreignpolicy.com/2022/06/22/ukraine-bomb-quad-robotic-dog/" data-link-name="in body link">protect us</a> from landmines, AI can <a href="https://www.abc.net.au/news/2019-07-02/computer-invents-flu-vaccine-in-world-first/11271170" data-link-name="in body link">prevent </a>super bugs and VR can <a href="https://www.abc.net.au/news/2019-07-02/computer-invents-flu-vaccine-in-world-first/11271170" data-link-name="in body link">connect us</a> rather than cut us off from reality – even if their vibes are “a bit Black Mirror”.</p></div></div>]]></description>
        </item>
    </channel>
</rss>