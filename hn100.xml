<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 06 Aug 2024 06:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[No Salt (209 pts)]]></title>
            <link>https://jakeseliger.com/2024/08/05/no-salt/</link>
            <guid>41167467</guid>
            <pubDate>Tue, 06 Aug 2024 03:03:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jakeseliger.com/2024/08/05/no-salt/">https://jakeseliger.com/2024/08/05/no-salt/</a>, See on <a href="https://news.ycombinator.com/item?id=41167467">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p><em>This is by my brother, Sam. </em></p>



<p>I arrived to Arizona late Saturday, after learning that my brother <a href="https://jakeseliger.com/2024/08/04/starting-hospice-the-end/">has only a few days left</a> before cancer <a href="https://jakeseliger.com/2023/07/22/i-am-dying-of-squamous-cell-carcinoma-and-the-treatments-that-might-save-me-are-just-out-of-reach/">ends him</a>. Jake’s wife, <a href="https://bessstillman.substack.com/">Bess</a>, confessed that she had neither the willpower or the energy to take care of the post-death rituals—in this case, cremation, followed by a celebration of life at some point in the future. Likely at <a href="https://jakeseliger.com/2023/08/21/i-know-what-happens-to-me-after-i-die-but-what-about-those-left-behind/">a memorial bench at Stuyvesant Park in New York City</a>, where he and Bess built their life together, met their core group of friends, and made their fondest memories.</p>



<p>I do a lot of research, and finding a funeral home for my brother’s remains was and is quite a bit different than looking for, say, a great sushi restaurant. What should I look for out of a funeral home? Do they have five stars on Yelp? Do they seem “nice?”</p>



<p>Several funeral homes that had good reviews online. The folks on the other end of the line seemed nice. They said the right things, which makes sense because they’ve got a sales funnel. And then they asked for a credit card. I get that funeral homes are businesses that need to make money, just as most of us do. It still feels callous and transactional. Send me an agreement, or something. I’ll DocuSign it. You’ll get your money. I’m barely functional at the moment—sleepwalking through my days as if I will somehow wake from this nightmare, watching my brother and his wonderful wife fall into despair.</p>



<p><strong>Prior to his illness</strong>, Jake and I had been at odds for many years. I didn’t understand him, and neither did he. Both of us lacked the <a href="https://www.amazon.com/Adult-Children-Emotionally-Immature-Parents/dp/1626251703?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957">emotional maturity</a> to form deep, meaningful relationships with other people. In my case, this manifested in self-destructive behaviors like drinking, partying, womanizing, and things of that nature. For Jake, he withdrew from most of society, finding more comfort from the pages of a novel or the many works he himself has written. He eventually found meaning in teaching, and focused on his relationship with Bess.</p>



<p>In turn, I eventually found a partner and a wife who made me a better person. Somehow, both of us <a href="https://jakeseliger.com/2023/09/25/strange-trip-psychedelics-and-confronting-the-fear-of-death/">found our way to psychedelics</a> as a way of dealing with reality and exploring the deeper, more esoteric corners of the world. Over the last two years, Jake and I have talked extensively about our experiences with these substances. Therapy has never worked for me. <a href="https://www.wired.com/2000/05/mckenna/">As Terrence McKenna once said</a>, “The real truth, that dare not speak itself, is that no one is in control. Absolutely no one.”</p>



<p>This is not meant to disparage therapists, advocates, or grief counselors. Each person must find their own way to deal with the reality that we perceive: what works for one may not work for others. Changing your life is difficult. It requires hard work. But your life may depend on it, so stop procrastinating and find something that works.</p>



<p><strong><a href="https://jakeseliger.com/2023/08/21/i-know-what-happens-to-me-after-i-die-but-what-about-those-left-behind/">Besides psychedelics</a>, Jake</strong> and I have discovered over the past year that we share a love of cooking, particularly using modern gadgets like Instant Pots, sous vide, and interesting spices. Jake loves his <a href="https://www.amazon.com/gp/product/B01G5MZZ5Q?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957">plug-in induction stovetop</a>, and thinks it worthwhile despite its cost. At one point I was supposed to go to the final auditions for a show called <a href="https://www.imdb.com/title/tt1694423/">MasterChef</a>, which pits amateur cooks against each other behind the gentle coaching of Gordon Ramsay. I foolishly accepted a job offer instead, but perhaps I’ll try again someday in honor of my brother.</p>



<p>Which brings me to the title of this essay. When I arrived at their home yesterday, I observed Jake in the worst condition I’ve ever seen: emaciated, with obvious tumors rampaging throughout his neck and jaw. Bess is seven months pregnant, worrying about the impending death of her soulmate, clinging to what seems like an irrational hope of a miracle turnaround.</p>



<p>I noticed an extremely uncharacteristic lack of food in their home—usually, when I walk in, Jake offers something to eat even when he knows I just ate—so I immediately went to the store to at least ensure that Bess had some food. Jake can scarcely take a sip of water, but says that “normal” food feels more wholesome going through his PEG tube than the brown, yet nutritious, <a href="https://www.functionalformularies.com/product/liquid-hope/">Liquid Hope</a> that gives him most of his daily calories.</p>



<p>Jake still has a larder of dried goods, spices, and gadgets that would be the envy of even a professional chef. Fenugreek sourced directly from Egypt. Fermented locust beans from Nigeria. More forms of masala and curry than most Indian restaurants. I had ambitions to use these spices for what Jake labeled as “possibly his final real meal,”<sup data-fn="f8512c1c-7cae-4665-b5ba-b76a84e5b6e9"><a href="#f8512c1c-7cae-4665-b5ba-b76a84e5b6e9" id="f8512c1c-7cae-4665-b5ba-b76a84e5b6e9-link">1</a></sup> only to realize that antibiotics have ruined his gastrointestinal system to the point that making anything exotic might bug his stomach.</p>



<p>So I opted for something simple: a shakshuka. Tomatoes, vegetables, sauce, and mild flavorings, topped with feta cheese, eggs, and basil. I reached for the salt, and found the bottle empty. I’m not sure why, but I started weeping. No salt. No salt means that he’s not cooking. He’ll never cook again. Salt is the most basic ingredient. <a href="https://jakeseliger.com/2024/02/26/food-and-friends-part-i-food-is-social-life/">Food is (was, I guess) so important to him.</a> He cooked for Bess throughout the summer of 2023, when he couldn’t eat anything except by PEG tube.</p>



<p>I’ll go over to their house again later today, and make sure I cook enough food at least for Bess to be able to eat, and hopefully for Jake to eat via the tube. I’ll stop for more salt on my way.</p>



<p>If the salt is gone, then Jake is too.</p>



<figure><a href="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg"><img data-attachment-id="9024" data-permalink="https://jakeseliger.com/2024/08/05/no-salt/dsc00635/" data-orig-file="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg" data-orig-size="2048,1365" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="DSC00635" data-image-description="" data-image-caption="" data-medium-file="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg?w=300" data-large-file="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg?w=550" tabindex="0" role="button" width="1024" height="682" src="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg?w=1024" alt=""></a></figure>


<ol><li id="f8512c1c-7cae-4665-b5ba-b76a84e5b6e9">Jake’s wonderful friend <a href="https://www.yelp.com/biz/tracy-dempsey-originals-tempe">Tracey Dempsey</a> also dropped off a plethora of baked goods. Everything she makes is incredible, but I’m partial to the cheesecake. <a href="#f8512c1c-7cae-4665-b5ba-b76a84e5b6e9-link">↩︎</a></li></ol>					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Can we stop the decline of monarch butterflies and other pollinators? (173 pts)]]></title>
            <link>https://www.wisfarmer.com/story/news/2024/08/05/can-we-stop-the-decline-of-monarch-butterflies-and-other-pollinators/74638545007/</link>
            <guid>41165273</guid>
            <pubDate>Mon, 05 Aug 2024 20:30:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wisfarmer.com/story/news/2024/08/05/can-we-stop-the-decline-of-monarch-butterflies-and-other-pollinators/74638545007/">https://www.wisfarmer.com/story/news/2024/08/05/can-we-stop-the-decline-of-monarch-butterflies-and-other-pollinators/74638545007/</a>, See on <a href="https://news.ycombinator.com/item?id=41165273">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><article><div id="videoWrap"><media-video video-id="11622236002" title="Not just monarchs. Other butterflies you find around Wisconsin" poster="https://www.gannett-cdn.com/authoring/video-thumbnails/37786da8-df66-4c12-9ef8-4947419f99f7_poster.jpg" util-module-path="elements/media" placement="snow-video-story-priority"><div id="uwVideoPlaceholder" slot="placeholder"><p><img src="https://www.gannett-cdn.com/authoring/video-thumbnails/37786da8-df66-4c12-9ef8-4947419f99f7_poster.jpg"></p><p><img src="https://www.gannett-cdn.com/appservices/universal-web/universal/icons/icon-play-alt-white.svg" alt="play"></p></div></media-video></div><p>If you have noticed fewer monarch butterflies fluttering around the yard this summer, you're not alone. Several butterfly aficionados recently shared their concerns during a Facebook discussion on Monarch Madness in Wisconsin.</p><partner-banner util-module-path="elements/partner" min-height="600" fluid="" outstream="" momentum=""></partner-banner><p>Because just 5% of monarch eggs survive to become butterflies, conservation-minded people like Nina Bottomley of Elkhorn is trying to help. She says the number of monarch butterflies she's raised from eggs and newly hatched caterpillars has plummeted alarmingly.</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg?crop=1439,1080,x0,y384 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg?crop=1439,1919,x0,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg?crop=1439,810,x0,y480 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A trio of monarch butterflies feed on the nectar of this liatris plant in a small pollinator garden. Whether it's a field, roadside area, open area, wet area, or urban garden; milkweed and flowering plants are needed for monarch habitat." orientation="vertical" util-module-path="elements/media"></media-image><p>"I went from 124 down to nearly none!" she posted. "What's going on?"</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg?crop=1919,1439,x0,y0 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg?crop=1080,1439,x480,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg?crop=1919,1081,x0,y179 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A monarch caterpillar eats its fill on a swamp milkweed plant. Even a caterpillar this size can fall prey to predators like paper wasps." orientation="horizontal" util-module-path="elements/media"></media-image><h2>Where are all the pollinators this summer?</h2><p>PJ Liesch, director of the University of Wisconsin-Madison's Insect Diagnostics Lab, says he's heard several reports of general pollinator activity and numbers — including bees — being down this summer. Unfortunately, reasons for the decline are many.</p><p>In early fall, monarchs begin their 2,500-mile migration to the overwintering grounds in central Mexico. The fragile butterflies face ever-changing weather conditions along the way and declining habitat to fuel them for their arduous journey.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>Liesch says the eastern monarch butterfly population in Mexico's oyamel fir forests this past winter was nearly 60% less than the previous year. Because counting individual monarchs is an impossible task, researchers estimate the population by measuring the area they occupy (in hectares, which is approximately 2.47 acres). Scientists estimate there are between 20-30 million monarchs per hectare.</p><p>"In the winter of 2022-23, butterflies occupied just over two hectares. Last winter monarchs occupied under 1 hectare," said Liesch, adding that this is the first time since the 2013-14 overwintering season that the monarchs have occupied less than one hectare. "If you look back farther into the late 1990s, there has been a definite downward trend over time.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><h2>How do extreme weather events impact the success of migration?</h2><p>Liesch says butterflies across the eastern U.S. heading toward their overwintering ground last fall were met with brutal conditions thanks to a drought that left parched vegetation and fewer late-season nectar sources along waterways.</p><p>Monarch butterflies pass through Central Texas on their fall migration south, but this summer’s drought has made the butterflies' journey harder and may change where you'll see them.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="600" outstream="" momentum=""></partner-banner><p>"When they fly from the Midwest to Mexico, it's a marathon for them and they essentially need Gatorade, if you will, a carbohydrate source. If you have a drought and don't have many flowering plants, that can make it pretty hard for them," Liesch said.</p><p>Droughts during fall migration can also affect monarch lipid levels, which are crucial for overwintering survival and subsequent spring breeding, according to a report from the National Institutes of Health.</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg?crop=844,633,x0,y0 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg?crop=669,890,x126,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg?crop=844,475,x0,y0 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="In the wild, scientists estimate that 90 percent of monarch eggs and caterpillars fall victim to predators and parasites." orientation="vertical" util-module-path="elements/media"></media-image><h2>Pathogens and predators make life tough for young monarchs</h2><p>The milkweed plant is essential to the monarch's survival. Adult butterflies lay their eggs on the undersides of the leaves, and when the young larvae hatch out, they begin munching on the leaves, ingesting the toxins from the plant that give them some degree of protection from predators.</p><p>Liesch says the black, white and yellow caterpillars, as well as the adult butterflies, are still vulnerable to predation and disease.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>"Predators that feed on monarchs can range from assassin bugs and predatory stink bugs to paper wasps, which is a key predator," Liesch said. "If these wasps find a particular patch that has a high density of caterpillars, they can swoop in and pick them off one by one."</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>The rains during June may have contributed to lush gardens supporting pollinator-friendly plants, but hiding in that vegetation are insect-infecting pathogens, said Liesch.</p><p>"There's plenty of these naturally occurring insect pathogens out there, but this moisture can sometimes encourage that fungi or bacteria to kick in," he said.</p><p>The UW-Madison entomologist says weather patterns impacted by climate change may affect wider populations of pollinators.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>"There are insects associated with specific plants, and if all of a sudden conditions are no longer conducive for those plants to survive, then the insects that rely on them are going to struggle," Liesch said. "Certain plants bloom at different times, and if insects are emerging at a time when the plants aren't at the right stage for them, that could also lead to some complications."</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg?crop=1279,959,x0,y0 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg?crop=720,959,x192,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg?crop=1279,721,x0,y119 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A study released by Michigan State University shows a link between the decline of butterflies and the use of agricultural insecticides in the Midwest." orientation="horizontal" util-module-path="elements/media"></media-image><h2>Insecticides are big factor in lower butterfly numbers, study says</h2><p>While climate change and disappearing habitat appear to play a role in declining pollinator numbers, <a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0304319">a study published</a> by researchers from Michigan State University points to insecticides as the largest contributor.</p><p>According to the 17-year-long study, co-author Scott Swinton said insecticides — rather than herbicides — are the single largest factor contributing to a decline in total butterfly abundance and species diversity in the Midwest.</p><p>“What drives butterfly decline is a hard nut to crack, due to rapid changes in chemical and genetic technologies alongside changes in climate and butterfly habitat,” said Swinton.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>The study, which collected data on land use, climate, multiple classes of pesticides and butterfly survey information, was gathered across 81 counties in five states including Wisconsin. According to the study, six different kinds of pesticides, and two types of herbicides, as well as glyphosate, and finally neonicotinoid seed treatments.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>The major technological shift in weed control since the 1990s has been the rise and continued dominance of glyphosate herbicides, commonly marketed as “Roundup”. Since the introduction of corn and soybean seed genetically engineered to tolerate this broad-spectrum herbicide, farmers have come to rely primarily on glyphosate for weed control in these crops.</p><p>"As a result, farmers increased glyphosate use while reducing the use of other herbicides," Swinton noted. "This became particularly concerning for monarch butterflies since their host plants are strongly associated with row crops and their numbers began a sharp decline during the period of glyphosate adoption."</p><p>Researchers found that shifts in insecticide use toward neonicotinoid-treated seeds are associated with an 8% decline in butterfly species diversity across the Midwest. Swinton told WPR that monarch butterflies were especially impacted, with populations declining over 20%.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>Ecologist Nick Haddad from the MSU&nbsp;<a href="https://www.kbs.msu.edu/">W.K. Kellogg Biological Station</a>&nbsp;and the&nbsp;<a href="https://integrativebiology.natsci.msu.edu/">Department of Integrative Biolog</a>y said the results of the years-long research is particularly impactful as butterflies play an essential role in pollination and serve as key markers of environmental health.</p><p>“As the best-known insect group, butterflies are key indicators of broader insect decline, and the implications of our findings for conservation will extend to the entire insect world,” Haddad said. "Understanding the primary factors contributing to their decline will help researchers working to protect these species, benefiting our environment and the sustainability of food systems."</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg?crop=1919,1440,x0,y374 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg?crop=1641,2188,x139,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg?crop=1919,1080,x0,y554 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A native bees burrows into a blazing star plant, a favorite of pollinators." orientation="vertical" util-module-path="elements/media"></media-image><h2>How can you help support pollinators?</h2><p>Pollinators are the engine that keeps our ecosystem healthy and our food supply abundant. According to the U.S. Forest Service, over 80% of flowering plants need pollinators to reproduce, and about one-third of the world's food crops depend on them.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>So, how can we help them? Here are some tips from the U.S. Fish and Wildlife Service:</p><ul><li>Everyone can do something to help keep pollinators abundant. From a simple window boxes filled with blooms to a few rows of flowers around the edge of your vegetable garden.</li><li>To attract a variety of pollinators, include a selection of plants native to your region. Pollinators need a variety of nectar and pollen sources.&nbsp;Check field guides to find out which plants attract native pollinators.</li><li>Select a site that is removed from wind, has at least partial sun, and can provide water.</li><li>Aim for early and late blooming plants. Selecting some plants that bloom early and others that keep their flowers late in the season helps ensure food for pollinators when other sources are scarce.</li><li>Make pesticides your last option in battling weeds and crop and garden pests.&nbsp;</li><li>Save the stems. Stems and twigs provide nesting sites for solitary bees and other insects. Hold off on pruning and snipping until late spring or just let stems naturally decompose.&nbsp;</li><li>Make your yard or garden friendly to overwintering pollinators. Some butterflies and native bees overwinter as larvae, seeking shelter in leaf litter or by burrowing deep into the ground.&nbsp;And don't be in a hurry to clean out that garden bed in early spring.</li></ul><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p><em>Contact Colleen Kottke at 920-517-2653 or&nbsp;</em><a href="mailto:ckottke@gannett.com">ckottke@gannett.com</a><em>. Follow her on X (formerly Twitter) at&nbsp;</em><a href="https://twitter.com/DukeBehnke" target="_blank" rel="noreferrer noopener"><em>@ColleenKottke</em></a><em>.</em></p><lit-timestamp slot="timestamp" publishdate="2024-08-05 10:05:15 +0000 UTC" updatedate="2024-08-05 18:27:45 +0000 UTC"></lit-timestamp><p><a alt="Post the article to your Facebook Timeline" data-size="large" onclick="fireNavShareAnalytics('facebook');" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
                <path d="M12.6143832,21 L3.99346182,21 C3.44462725,21 3,20.5550968 3,20.006476 L3,3.99345411 C3,3.44469364 3.44469709,3 3.99346182,3 L20.006608,3 C20.5552331,3 21,3.44469364 21,3.99345411 L21,20.006476 C21,20.5551667 20.5551632,21 20.006608,21 L15.4197395,21 L15.4197395,14.029408 L17.7594454,14.029408 L18.1097832,11.3128446 L15.4197395,11.3128446 L15.4197395,9.57849053 C15.4197395,8.79198274 15.6381418,8.25600363 16.7659836,8.25600363 L18.2044917,8.25537504 L18.2044917,5.82565895 C17.9557072,5.79255313 17.1017938,5.71858885 16.108332,5.71858885 C14.0343128,5.71858885 12.6143832,6.98457234 12.6143832,9.30945332 L12.6143832,11.3128446 L10.2686707,11.3128446 L10.2686707,14.029408 L12.6143832,14.029408 L12.6143832,21 L12.6143832,21 Z"></path>
            </svg><span>Facebook</span></a>
<a alt="Tweet about this article" data-size="large" onclick="fireNavShareAnalytics('twitter')" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
                <path d="M21,6.77573131 C20.338616,7.07692308 19.6265188,7.28060672 18.8795563,7.3716143 C19.6423666,6.9035753 20.2276809,6.16143012 20.5034337,5.27735645 C19.7892235,5.71072589 19,6.02600217 18.1568938,6.19501625 C17.4849445,5.45937161 16.5245642,5 15.461701,5 C13.4236661,5 11.770206,6.69555796 11.770206,8.78656555 C11.770206,9.08342362 11.8019017,9.3716143 11.8652932,9.64897075 C8.79609086,9.4907909 6.07554147,7.98483207 4.25303751,5.69122427 C3.93502377,6.2524377 3.75330164,6.9035753 3.75330164,7.59696641 C3.75330164,8.91007584 4.40517697,10.0693391 5.39619651,10.7486457 C4.79186476,10.7302275 4.22134179,10.5579632 3.72266244,10.276273 L3.72266244,10.3228602 C3.72266244,12.1581798 4.9957739,13.6890574 6.68621236,14.035753 C6.37665082,14.1245937 6.05018489,14.1690141 5.71315372,14.1690141 C5.47543582,14.1690141 5.24300053,14.1462622 5.01796091,14.1018418 C5.4881141,15.6056338 6.85103011,16.7009751 8.46751189,16.7302275 C7.20390914,17.7464789 5.61067089,18.3521127 3.88114105,18.3521127 C3.58320127,18.3521127 3.28843106,18.3347779 3,18.3001083 C4.63444268,19.3726977 6.57633386,20 8.66085578,20 C15.4543053,20 19.1679873,14.2307692 19.1679873,9.22643554 C19.1679873,9.06175515 19.1648177,8.89707476 19.1584786,8.73564464 C19.8800845,8.20151679 20.5066033,7.53521127 21,6.77573131"></path>
            </svg><span>Twitter</span></a>
<a alt="Email this article" onclick="fireNavShareAnalytics('email')" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
            <path d="M3,5.8757627 C3,5.39209232 3.39269552,5 3.8926228,5 L20.1073772,5 C20.6003592,5 21,5.40389442 21,5.8757627 L21,18.1242373 C21,18.6079077 20.6073045,19 20.1073772,19 L3.8926228,19 C3.39964084,19 3,18.5961056 3,18.1242373 L3,5.8757627 Z M12,11.09375 L3,6.74107143 L3,8.48214286 L12,12.8348214 L21,8.48214286 L21,6.74107143 L12,11.09375 Z"></path>
        </svg><span>Email</span></a></p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Debugging a rustc segfault on Illumos (113 pts)]]></title>
            <link>https://sunshowers.io/posts/rustc-segfault-illumos/</link>
            <guid>41164885</guid>
            <pubDate>Mon, 05 Aug 2024 19:54:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sunshowers.io/posts/rustc-segfault-illumos/">https://sunshowers.io/posts/rustc-segfault-illumos/</a>, See on <a href="https://news.ycombinator.com/item?id=41164885">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>At <a href="https://oxide.computer/">Oxide</a>, we use <a href="https://github.com/oxidecomputer/helios/">Helios</a> as
the base OS for the cloud computers we sell. Helios is a distribution of
<a href="https://illumos.org/">illumos</a>, a Unix-based operating system descended from Solaris.</p><p>As someone who learned illumos on the job, I’ve been really impressed by the powerful debugging
tools it provides. I had a chance to use some of them recently to track down a <a href="https://en.wikipedia.org/wiki/Segmentation_fault">segmentation
fault</a> in the Rust compiler, with the help of
several of my colleagues. I learned a lot from the process, and I thought I’d write about it!</p><p>I’m writing this post for an audience of curious technologists who aren’t necessarily familiar with
systems work. If you’re an experienced systems developer, parts of it are likely familiar to
you—feel free to skip over them.</p><h2 id="the-crash">The crash<a href="#the-crash" arialabel="Anchor">#</a></h2><p>A couple of weeks ago, I wanted to make a change to the Rust standard library on illumos. I logged
into my illumos box and cloned the <a href="https://github.com/rust-lang/rust">Rust repository</a> (revision
<code>2d5a628</code>). Following the <a href="https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html">setup
instructions</a>, I configured the <code>rustc</code> build system with the <code>library</code> build profile.</p><p>When I went to run <code>./x.py check</code>, I saw an error with the following output:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ ./x.py check
</span></span><span><span>Checking stage0 cranelift (x86_64-unknown-illumos)
</span></span><span><span>    Checking cranelift-codegen v0.109.0
</span></span><span><span>rustc exited with signal: 11 (SIGSEGV) (core dumped)
</span></span><span><span>error: could not compile `cranelift-codegen` (lib)
</span></span><span><span><span>
</span></span></span><span><span><span></span>Caused by:
</span></span><span><span>  process didn't exit successfully: ...
</span></span><span><span>Build completed unsuccessfully in 0:00:03
</span></span></code></pre></div><p>Quite concerning! Like any good technologist I tried running the command again. But the segfault
seemed to be completely deterministic: the program would crash while compiling <code>cranelift-codegen</code>
every time.</p><p>Coincidentally, we had our <abbr title="Every 2 weeks">fortnightly</abbr> “Rust @ Oxide” virtual meetup at around that time. There wasn’t much to discuss there, so we turned that meeting into a debugging session. (I love how my coworkers get excited about debugging strange issues.)</p><h2 id="background-the-bootstrap-process">Background: the bootstrap process<a href="#background-the-bootstrap-process" arialabel="Anchor">#</a></h2><figure><img src="https://sunshowers.io/images/bootstrap-stages.png" alt="A flowchart to indicate stages of compilation. For a full description, see the link for &quot;a series of stages&quot;."><figcaption>Rust compiler build stages.</figcaption></figure><p>Like the compilers for many other languages, the Rust compiler is written in the language it is
intending to compile (in this case, Rust). In other words, the Rust compiler is
<a href="https://en.wikipedia.org/wiki/Self-hosting_(compilers)#Compilers"><em>self-hosting</em></a>.</p><p>Any self-hosting compiler needs to answer the question: how in the world do you compile the compiler
if you don’t already have a working compiler? This is known as the <a href="https://en.wikipedia.org/wiki/Bootstrapping_(compilers)"><em>bootstrapping
problem</em></a>. There are several ways to
address the problem, but the two most common are:</p><ol><li><p><strong>Use the previous version of the compiler.</strong> In other words, use version N-1 of the compiler to
compile version N. For example, use Rust 1.75 to compile Rust 1.76.</p><details><summary>From where do you begin, though?</summary><p>The earliest versions of Rust were written in Ocaml. So if
you’re spinning up Rust on a brand new platform and have an Ocaml compiler available, you can
actually start <a href="https://github.com/rust-lang/rust/tree/ef75860a0a72f79f97216f8aaa5b388d98da6480/src/boot">from
there</a>
and effectively create your own lineage of compilers.</p><p>There are also implementations of Rust in other languages, like <a href="https://github.com/thepowersgang/mrustc"><code>mrustc</code></a> in C++, which can be used to build some (typically pretty old) version of the compiler. Interestingly, these other implementations don’t need to be perfect—for example, since they’re only used to compile code that’s known to be valid, they don’t need to handle errors well. That’s a large chunk of the complexity of a real compiler.</p></details></li><li><p><strong>Cross-compile from another platform.</strong> As a shortcut, if you have a way to cross-compile code
from another platform, you can use that to set up the initial compiler. This is the most common
method for setting up Rust on a new platform. (But note that method 1 must be used on at least
one platform.)</p></li></ol><p>While bootstrapping from the previous version of Rust, the toolchain follows <a href="https://rustc-dev-guide.rust-lang.org/building/bootstrapping/what-bootstrapping-does.html#stages-of-bootstrapping">a series of
stages</a>, ranging from <em>stage 0</em> to <em>stage 2</em>.</p><p>In our case, since we’re working with the standard library we’re only concerned with <em>stage 0</em>: the
standard library compiled with the previous version of <code>rustc</code>. That is the build process that crashed.</p><h2 id="orienting-ourselves">Orienting ourselves<a href="#orienting-ourselves" arialabel="Anchor">#</a></h2><p>The first thing to find is the version of <code>rustc</code> that’s crashing. There are a few ways to find the compiler, but a simple <code>find</code> command works well:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ find . -name rustc
</span></span><span><span>./compiler/rustc
</span></span><span><span>./src/doc/rustc
</span></span><span><span>./build/x86_64-unknown-illumos/stage0/bin/rustc
</span></span></code></pre></div><p>This command finds <code>rustc</code> at <code>./build/x86_64-unknown-illumos/stage0/bin/rustc</code>. Let’s ask it for its version:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ ./build/x86_64-unknown-illumos/stage0/bin/rustc -Vv
</span></span><span><span>rustc 1.80.0-beta.1 (75ac3b633 2024-06-10)
</span></span><span><span>binary: rustc
</span></span><span><span>commit-hash: 75ac3b6331873133c4f7a10f2252afd6f3906c6a
</span></span><span><span>commit-date: 2024-06-10
</span></span><span><span>host: x86_64-unknown-illumos
</span></span><span><span>release: 1.80.0-beta.1
</span></span><span><span>LLVM version: 18.1.7
</span></span></code></pre></div><p>Can the bug be reproduced independently of the Rust toolchain? The toolchain does all sorts of
non-standard things, so it’s worth checking. The output says <code>cranelift-codegen v0.109.0</code>, so let’s try building that separately. Again, there are a few ways to do this, but the easiest is to make a simple Cargo project that depends on the crate.</p><div><pre tabindex="0"><code data-lang="toml"><span><span>[<span>package</span>]
</span></span><span><span><span>name</span> = <span>"cranelift-codegen-test"</span>
</span></span><span><span><span>version</span> = <span>"0.1.0"</span>
</span></span><span><span><span>edition</span> = <span>"2021"</span>
</span></span><span><span>
</span></span><span><span>[<span>dependencies</span>]
</span></span><span><span><span>cranelift-codegen</span> = <span>"=0.109.0"</span>
</span></span></code></pre></div><p>And then run <code>cargo build</code>. I didn’t have rustc 1.80.0 beta 1 on the machine, so I tried with the 1.80.0 release:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ cargo +1.80.0 build
</span></span><span><span>   Compiling cranelift-codegen v0.109.0
</span></span><span><span>error: could not compile `cranelift-codegen` (lib)
</span></span><span><span><span>
</span></span></span><span><span><span></span>Caused by:
</span></span><span><span>  process didn't exit successfully: `/home/rain/.rustup/toolchains/1.80.0-x86_64-unknown-illumos/bin/rustc ...` (signal: 11, SIGSEGV: invalid memory reference)
</span></span></code></pre></div><p>Yep, it crashes in the same spot.</p><p>This is a minimal-enough example, so let’s work with this.</p><h2 id="finding-the-core-file">Finding the core file<a href="#finding-the-core-file" arialabel="Anchor">#</a></h2><figure><img src="https://sunshowers.io/images/dumpster-fire.jpg" alt="A cute cartoon depiction of a dumpster fire with a smiley face."><figcaption>Not this kind of dump! (<a href="https://www.pinterest.com/pin/dumpster-fire-2021-by-bywayanyone--227502218670597019/">Pinterest</a>)</figcaption></figure><p>When a program crashes, systems are typically configured to generate a <a href="https://en.wikipedia.org/wiki/Core_dump">core dump</a>, also known as a core file. The first step while debugging any crash is to ensure that core dumps are generated, and then to find one to examine it.</p><p>On illumos, many of the system-level administration tools are called <code>&lt;something&gt;adm</code>. The tool for managing core files is called <code>coreadm</code>. Let’s run that:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ coreadm
</span></span><span><span>     global core file pattern:
</span></span><span><span>     global core file content: default
</span></span><span><span>       init core file pattern: core
</span></span><span><span>       init core file content: default
</span></span><span><span>            global core dumps: disabled
</span></span><span><span>       per-process core dumps: enabled
</span></span><span><span>      global setid core dumps: disabled
</span></span><span><span> per-process setid core dumps: disabled
</span></span><span><span>     global core dump logging: disabled
</span></span></code></pre></div><p>This suggests that core “per-process core dumps” are enabled. The lack of a pattern indicates that the defaults are used. Generally, on Unix systems the default is to generate a file named <code>core</code> in the current directory of the crashing process.</p><p>A simple <code>ls</code> in our little test project doesn’t show a <code>core</code> file, which means that it might be elsewhere. Let’s just do a global <code>find</code> for it.</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ find / -name core -type f
</span></span></code></pre></div><p>This showed a few files on my system, including: <code>~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cranelift-codegen-0.109.0/core</code>. Bingo! That looks like a hit. (Why is it in the registry? Because when compiling a crate, Cargo sets the current working directory of the child <code>rustc</code> process to the crate’s directory.)</p><p>The next step is to move the file into another directory<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>. After doing that, let’s start examining it.</p><h2 id="examining-the-core-file-registers-and-call-stack">Examining the core file: registers and call stack<a href="#examining-the-core-file-registers-and-call-stack" arialabel="Anchor">#</a></h2><p>The best way to examine a core file on illumos is with the <a href="https://illumos.org/books/mdb/preface.html">Modular Debugger, <code>mdb</code></a>. <code>mdb</code> is a powerful tool that can be used to inspect the state of both live and dead processes, as well as the kernel itself.</p><p>Using <code>mdb</code> with the core file is simple: just run <code>mdb core</code>.</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ mdb core
</span></span><span><span>Loading modules: [ libumem.so.1 libc.so.1 ld.so.1 ]
</span></span><span><span>&gt;
</span></span></code></pre></div><p>The first step is to enable symbol demangling<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup>. The command to do that in <code>mdb</code> is <code>$G</code>, so let’s run that:</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; $G
</span></span><span><span>C++ symbol demangling enabled
</span></span></code></pre></div><p>(The output says “C++”, but illumos’s demangler can handle Rust symbols, too.)</p><p>Let’s look at the <a href="https://en.wikipedia.org/wiki/Processor_register">CPU registers</a> now. A register stores a small amount of data that the CPU can access very quickly. Core files typically have the contents of registers at the time of the crash, which can be very useful for debugging.</p><p>In <code>mdb</code>, the command to print out registers is <code>$r</code> or <code>::regs</code>. Here’s the output:</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; $r
</span></span><span><span>%rax <span>=</span> 0x000000000fb0d460       %r8  <span>=</span> 0x0000000001000000
</span></span><span><span>%rbx <span>=</span> 0x0000000000000000       %r9  <span>=</span> 0x0000000000000000
</span></span><span><span>%rcx <span>=</span> 0x0000000000000000       %r10 <span>=</span> 0x0000000000000010
</span></span><span><span>%rdx <span>=</span> 0x0000000000000001       %r11 <span>=</span> 0x0000000000000286
</span></span><span><span>%rsi <span>=</span> 0x000000000fb0d3d0       %r12 <span>=</span> 0x0000000000000d96
</span></span><span><span>%rdi <span>=</span> 0xfffffc7fed8e5f30       %r13 <span>=</span> 0x0000000000000000
</span></span><span><span>                                %r14 = 0x000000000fb0d3d0
</span></span><span><span>                                %r15 = 0xfffffc7fed8e6200
</span></span><span><span><span>
</span></span></span><span><span><span></span>%cs <span>=</span> 0x0053    %fs <span>=</span> 0x0000    %gs <span>=</span> 0x0000
</span></span><span><span>%ds <span>=</span> 0x004b    %es <span>=</span> 0x004b    %ss <span>=</span> 0x004b
</span></span><span><span><span>
</span></span></span><span><span><span></span>%rip <span>=</span> 0xfffffc7fd1adc4bb librustc_driver-86178b5e8d46877c.so<span>`</span>&lt;rustc_parse::parser::Parser&gt;::parse_path_segment+0x7b
</span></span><span><span>%rbp <span>=</span> 0xfffffc7fed8e6140
</span></span><span><span>%rsp <span>=</span> 0xfffffc7fed8e5c20
</span></span><span><span><span>
</span></span></span><span><span><span></span>%rflags <span>=</span> 0x00010216
</span></span><span><span>  id=0 vip=0 vif=0 ac=0 vm=0 rf=1 nt=0 iopl=0x0
</span></span><span><span>  status=&lt;of,df,IF,tf,sf,zf,AF,PF,cf&gt;
</span></span><span><span><span>
</span></span></span><span><span><span></span>%gsbase <span>=</span> 0x0000000000000000
</span></span><span><span>%fsbase <span>=</span> 0xfffffc7fee830a80
</span></span><span><span>%trapno <span>=</span> 0xe
</span></span><span><span>   %err = 0x6
</span></span></code></pre></div><p>All right, there’s a lot going on here. A full accounting of the registers on x86-64 is beyond the scope of this post, but if you’re interested <a href="https://math.hws.edu/eck/cs220/f22/registers.html">here’s a quick summary</a>. The most important registers here are <code>%rip</code>, <code>%rsp</code>, and <code>%rbp</code>. All three of these are 64-bit addresses.</p><figure><img src="https://sunshowers.io/images/call-stack.png" alt="A visual depiction of a call stack, showing three inactive frames plus an active frame."><figcaption>A visual depiction of a call stack.</figcaption></figure><ul><li><p><code>%rip</code> is the <strong>instruction pointer</strong>, also known as the <strong>program counter</strong>. <code>%rip</code> is a special register that points to the next instruction to be executed. The CPU uses to keep track of where it is in the program.</p></li><li><p><code>%rsp</code> is the <strong>stack pointer</strong>. The call stack is a region of memory that is used to store function call information and local variables. The stack pointer points to the head of the stack.</p><p>Note that on most architectures including x86-64, the stack grows down in memory: when a function is called, a new <em>stack frame</em> is set up and the stack pointer is decremented by however much space the function needs.</p></li><li><p><code>%rbp</code> is the <strong>base pointer</strong>, more commonly known as the <strong>frame pointer</strong>. It points to the base of the current stack frame<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>.</p></li></ul><p>We can also look at the call stack via the <code>$C</code> command. The stack turns out to be enormous (<a href="https://gist.github.com/sunshowers/5edb7207c1e1234b0400bc6517f45b29">full output</a>):</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; $C ! wc -l
</span></span><span><span>1493
</span></span><span><span>&gt; $C
</span></span><span><span>fffffc7fed8e6140 librustc_driver-86178b5e8d46877c.so`&lt;rustc_parse::parser::Parser&gt;::parse_path_segment+0x7b()
</span></span><span><span>&lt;... snipped ...&gt;
</span></span></code></pre></div><p>(The <code>!</code> is used to send the output to a shell command, in this case one that counts the number of lines.)</p><p>It looks like the crash is in the <code>rustc</code> parser. (Notably, the crash is while compiling a crate called <code>cranelift-codegen</code>, which suggests automatic code generation. Generated code often tends to stress the parser in ways that manually written code does not.)</p><p>Based on the call stack, it looks like the <code>rustc</code> parser is recursive in nature. A quick Google
search
<a href="https://users.rust-lang.org/t/what-type-of-parser-does-the-rust-compiler-use/71430">confirms</a> that
the <code>rustc</code> parser is a “simple hand-written recursive descent parser”. This isn’t surprising, since
most production parsers are written this way. (For example, <a href="https://docs.rs/syn"><code>syn</code></a> is also a
recursive descent parser.)</p><p>Turning our attention to the instruction pointer <code>fffffc7fd1adc4bb</code>, we can use the <code>::dis</code> command to disassemble the function at that address. (<a href="https://gist.github.com/sunshowers/959c649926fe4a9d8bc53d967f895cdf#file-gistfile0-txt-L11">Full output</a>; the <code>-a</code> flag ensures that addresses are not converted to very long function names.)</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; fffffc7fd1adc4bb::dis -a
</span></span><span><span>&lt;... snipped ...&gt;
</span></span><span><span>fffffc7fd1adc4b6                movl   $0x1,%edx
</span></span><span><span>fffffc7fd1adc4bb                call   +0x1caf0 &lt;librustc_driver-86178b5e8d46877c.so`&lt;rustc_parse::parser::Parser&gt;::parse_ident_common&gt;
</span></span><span><span>fffffc7fd1adc4c0                cmpl   $0x0,0xfffffffffffffdf0(%rbp)
</span></span><span><span>&lt;... snipped ...&gt;
</span></span></code></pre></div><p>So it looks like the crash is happening in a <code>call</code> instruction to another function,
<code>parse_ident_common</code>.</p><p>(Keep in mind that this information could be completely unreliable! The stack might be corrupted, the registers might be wrong, and so on. But it’s what we have for now.)</p><h2 id="examining-the-address-space">Examining the address space<a href="#examining-the-address-space" arialabel="Anchor">#</a></h2><p>On <a href="https://en.wikipedia.org/wiki/Virtual_memory">virtual memory systems</a>, which includes all modern
desktop and server systems, each process gets the illusion that it has a very large amount of memory
all to itself. This is called the address space of a process. The instructions, the call stack, and
the heap all get their own regions of addresses in that space, called <em>memory mappings</em>. The 64-bit
addresses that we saw earlier are all part of the address space.</p><p><code>mdb</code> has a command called <code>whatis</code> to look up which part of memory an address is at. Let’s look at the stack pointer first:</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; fffffc7fed8e5c20::whatis
</span></span><span><span>fffffc7fed8e5c20 is in [ unknown ] [fffffc7fed8e5000,fffffc7fed8e6000)
</span></span></code></pre></div><p>This tells us that the address is in the range <code>0xfffffc7fed8e5000</code> to <code>0xfffffc7fed8e6000</code>. This is
a small 4 KiB range.</p><p>What about the frame pointer?</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; fffffc7fed8e6140::whatis
</span></span><span><span>fffffc7fed8e6140 is in [ unknown ] [fffffc7fed8e6000,fffffc7fed9e7000)
</span></span></code></pre></div><p>This appears to be in a different range.</p><p>In this case, the ending address is <code>fffffc7fed9e7000</code> (note the <code>9e</code>, not the <code>8e</code>!). This address
is <strong><code>0x101000</code></strong> bytes away from the starting address. That is equal to 1028 <abbr title="Kibibyte, or 1024 bytes">KiB</abbr>, or 1 <abbr title="Mebibyte, or 1024 kibibytes">MiB</abbr> + 4 KiB page<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup>.</p><p>Something else that’s relevant here is what permissions each range of addresses has. Like files on Unix, a block of virtual memory can have <em>read</em>, <em>write</em>, or <em>execute</em> permissions. (In this case, <em>execute</em> means that it is valid for the instruction pointer to point here<sup id="fnref:5"><a href="#fn:5" role="doc-noteref">5</a></sup>.)</p><p>On illumos, a tool called <code>pmap</code> can show these spaces. <code>pmap</code> works on both live processes and core files. Running <code>pmap core</code> shows the permissions for the addresses we’re interested in (<a href="https://gist.github.com/sunshowers/03fdbd76162a838d9b11b3c9beba6a81#file-gistfile0-txt-L27-L28">full output</a>):</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ pmap core
</span></span><span><span>&lt;... snipped ..&gt;
</span></span><span><span>FFFFFC7FED8E5000          4K -----    [ anon ]
</span></span><span><span>FFFFFC7FED8E6000       1028K rw---    [ anon ]
</span></span><span><span>&lt;... snipped ..&gt;
</span></span></code></pre></div><p>The 1028 KiB range is read-write, and the 4 KiB range above that doesn’t have any permissions whatsoever.</p><p><strong>This would explain the segfault</strong>. A segfault is an attempt to operate on a part of memory that the program doesn’t have permissions for. Attempting to read from or write to memory which has no permissions is an example of that.</p><h2 id="formulating-a-theory">Formulating a theory<a href="#formulating-a-theory" arialabel="Anchor">#</a></h2><p>At this point, we have enough information to come up with a theory:</p><ul><li>The thread had a call stack of 1028 KiB available to it, starting at <code>fffffc7fed8e6000</code>.</li><li>The call stack pointer was at <code>fffffc7fed8e6140</code> (only <code>0x140</code> = 320 bytes away), and it tried to create a frame of size <code>0x520</code> (1312) bytes, at <code>fffffc7fed8e5c20</code>.</li><li>This caused the call stack to be <em>exhausted</em>: the thread ran out of space<sup id="fnref:6"><a href="#fn:6" role="doc-noteref">6</a></sup>.</li><li>When the thread ran out of space, it indexed into a 4 KiB section known as a <em>guard page</em>. The thread did not have any permissions to operate on the page, and was in fact designed to cause a segfault if accessed in any way.</li><li>The program then (correctly) segfaulted.</li></ul><p>But there are also other bits of evidence that this theory doesn’t explain, or even cuts against. (This is what makes post-mortem debugging exciting! There are often contradictory-seeming pieces of information that need to be explained.)</p><ol><li><p><strong>The memory is marked <code>anon</code> or <code>unknown</code>.</strong> That’s not how call stacks are supposed to be marked! In the <code>pmap</code> output, there’s a line which says:</p><pre tabindex="0"><code>FFFFFC7FED7B1000        316K rw---    [ stack tid=3 ]
</code></pre><p>So you’d expect call stacks to be marked with <code>[ stack tid=&lt;something&gt; ]</code>, not <code>[ anon ]</code>.</p></li><li><p><strong>Why is the size of the allocation 1028 KiB?</strong> You’d generally expect stack sizes to be a round power of two.</p></li><li><p><strong>Isn’t 1028 KiB kind of small?</strong> The thread is a non-main thread, and <a href="https://doc.rust-lang.org/std/thread/#stack-size">the default stack size for Rust threads is 2 MiB</a>. Why is our thread ~1 MiB and not 2 MiB?</p><details><summary>How are call stack sizes determined?</summary><p>On Unix platforms, for the main thread, the call stack size is determined by <code>ulimit -s</code> (in KiB). On my illumos machine, this printed <code>10240</code>, indicating a 10 MiB call stack.</p><p>For child threads, the call stack size is determined by whatever created them. For Rust, the default is 2 MiB.</p></details></li><li><p><strong>Why doesn’t this crash happen on other platforms?</strong> If this is a crash in the <code>rustc</code> parser, one would ordinarily expect it to arise everywhere. Yet it doesn’t seem to occur on Linux, macOS, or Windows. What’s special about illumos?</p></li><li><p><strong>Setting <code>RUST_MIN_STACK</code> doesn’t help.</strong> Rust-created thread stack sizes can be configured via <a href="https://doc.rust-lang.org/std/thread/#stack-size">the <code>RUST_MIN_STACK</code> environment variable</a>. If we try to use that:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ RUST_MIN_STACK<span>=</span><span>$((</span><span>4</span> <span>*</span> <span>1024</span> <span>*</span> <span>1024</span><span>))</span> cargo build
</span></span></code></pre></div><p>It turns out that <code>rustc</code> crashes at exactly the same spot. That’s really strange!</p><p>It is possible that the stack size was overridden at thread creation time. The documentation for <code>RUST_MIN_STACK</code> says: “Note that setting <code>Builder::stack_size</code> will override this.” But that seems unlikely.</p></li></ol><h2 id="a-closer-look-at-the-call-stack">A closer look at the call stack<a href="#a-closer-look-at-the-call-stack" arialabel="Anchor">#</a></h2><p>Looking towards the bottom of the call stack, there’s <a href="https://gist.github.com/sunshowers/5edb7207c1e1234b0400bc6517f45b29#file-gistfile0-txt-L1478-L1483">something really strange</a>:</p><pre tabindex="0"><code>fffffc7fed9e5f80 librustc_driver-86178b5e8d46877c.so`rustc_query_system::query::plumbing::try_execute_query...
fffffc7fed9e5fd0 librustc_driver-86178b5e8d46877c.so`stacker::grow::&lt;rustc_middle::query::erase::Erased&lt;[u8; 16]&gt;, ...&gt;
fffffc7fed9e5ff0 librustc_driver-86178b5e8d46877c.so`psm::on_stack::with_on_stack...
fffffc7fed7e4960 librustc_driver-86178b5e8d46877c.so`rust_psm_on_stack+9()
fffffc7fed7e4a20 librustc_driver-86178b5e8d46877c.so`stacker::_grow+0x13e()
fffffc7fed7e4ad0 librustc_driver-86178b5e8d46877c.so`rustc_query_impl::query_impl::resolver_for_lowering_raw::get_query_non_incr...
</code></pre><p>Notice the jump in addresses from <code>fffffc7fed7e4960</code> to <code>fffffc7fed9e5ff0</code>? Normally, stack addresses are decremented as new functions are called: the number goes down. In this case the stack address is <em>incremented</em>. The number went up. Strange.</p><p>Also notice that this coincides with the use of a function called <code>stacker::_grow</code>. Now that’s a real lead!</p><p><strong>What part of memory is <code>fffffc7fed7e4960</code> in?</strong> <code>mdb</code> says:</p><pre tabindex="0"><code>&gt; fffffc7fed7e4960::whatis
fffffc7fed7e4960 is in [ stack tid=3 ]
</code></pre><p>So <em>this</em> address is part of the stack for thread 3. <a href="https://gist.github.com/sunshowers/03fdbd76162a838d9b11b3c9beba6a81#file-gistfile0-txt-L26"><code>pmap</code> agrees</a>:</p><pre tabindex="0"><code>FFFFFC7FED7B1000        316K rw---    [ stack tid=3 ]
</code></pre><p><strong>What is <code>stacker</code>?</strong> Time for some googling! Per <a href="https://docs.rs/stacker">the documentation</a>, <code>stacker</code> is:</p><blockquote><p>A library to help grow the stack when it runs out of space.</p><p>This is an implementation of manually instrumented segmented stacks where
points in a program’s control flow are annotated with “maybe grow the stack
here”. Each point of annotation indicates how far away from the end of the
stack it’s allowed to be, plus the amount of stack to allocate if it does
reach the end.</p></blockquote><p>Because the <code>rustc</code> parser is recursive, it is susceptible to call stack exhaustion. The use of <code>stacker</code> is supposed to prevent, or at least mitigate, that.</p><p><strong>How does <code>stacker</code> work?</strong> The library has <a href="https://docs.rs/stacker/0.1.15/stacker/fn.maybe_grow.html">a pretty simple API</a>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span> <span>fn</span> <span>maybe_grow</span><span>&lt;</span>R, F: FnOnce() -&gt; <span>R</span><span>&gt;</span>(
</span></span><span><span>    red_zone: <span>usize</span>,
</span></span><span><span>    stack_size: <span>usize</span>,
</span></span><span><span>    callback: <span>F</span>,
</span></span><span><span>) -&gt; <span>R</span> { <span>..</span>. }
</span></span></code></pre></div><figure><img src="https://sunshowers.io/images/rust-stack.jpg" alt="An image from YouTube showing Rust the video game, titled &quot;EZ Triple Floor Stack&quot;."><figcaption>Er, wrong Rust.</figcaption></figure><p>The developer is expected to intersperse calls to <code>maybe_grow</code> within their recursive function. If less than <code>red_zone</code> bytes of stack space remain, <code>stacker</code> will allocate a new segment of <code>stack_size</code> bytes, and run <code>callback</code> with the stack pointer pointing to the new segment.</p><p><strong>How does rustc use <code>stacker</code>?</strong> The code is in <a href="https://github.com/rust-lang/rust/blob/dba8e2d2c2890a8b9e88cbf4855ac5711337946c/compiler/rustc_data_structures/src/stack.rs#L17">this file</a>. The code requests an additional 1 MiB stack with a red zone of 100 KiB.</p><p><strong>Why did <code>stacker</code> create a new stack segment?</strong> In our case, the call is at the very bottom of the stack, when plenty of space should be available, so ordinarily <code>stacker</code> should not need to allocate a new segment. Why did it do so here?</p><p>The answer is <a href="https://github.com/rust-lang/stacker/blob/5df2309ccf7b1671909386c2670c7342a4d44142/src/lib.rs#L412-L457">in <code>stacker</code>’s source code</a>. There is code to guess the stack size on many platforms. But it isn’t enabled on illumos: <code>guess_os_stack_limit</code> always returns <code>None</code>.</p><h2 id="putting-it-together">Putting it together<a href="#putting-it-together" arialabel="Anchor">#</a></h2><p>With this information in hand, we can flesh out our call stack exhaustion theory:</p><ul><li><p>Some file in <code>cranelift-codegen</code> was triggering the crash by requiring more than 1 MiB of stack space.</p><ul><li>The <code>rustc</code> parser running against <code>cranelift-codegen</code> needed more than 1 MiB of stack space, but less than 2 MiB.</li></ul></li><li><p>Had this bug occurred on other platforms like Linux, this issue would have been a showstopper. However, it wasn’t visible on those platforms because:</p><ul><li>Threads created by Rust use a 2 MiB stack by default.</li><li><code>rustc</code> requested that <code>stacker</code> create a 1 MiB stack segment, but only if less than 100 KiB of stack space was left.</li><li>On the other platforms, <code>stacker</code> could see that well over 100 KiB of stack space was left, and so it did not allocate a new segment.</li><li>On illumos, <code>stacker</code> could not see how much stack was left, and so it allocated a new 1 MiB segment.</li><li>This 1 MiB stack was simply not enough to parse <code>cranelift-codegen</code>.</li></ul></li><li><p><code>rustc</code> didn’t call <code>stacker::maybe_grow</code> enough! In order for it to work, <code>stacker</code> needs to be interspersed throughout the recursive code. But some recursive parts did not appear to have called it.</p></li></ul><p>(It is somewhat ironic that <code>stacker</code>, a library meant to prevent call stack exhaustion, was actively making life worse here.)</p><p><strong>Where does the 1028 KiB come from?</strong> Looking at the <a href="https://github.com/rust-lang/stacker/blob/5df2309ccf7b1671909386c2670c7342a4d44142/src/lib.rs#L228-L234"><code>stacker</code> source code</a>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>let</span> page_size <span>=</span> page_size();
</span></span><span><span><span>let</span> requested_pages <span>=</span> stack_size
</span></span><span><span>    .checked_add(page_size <span>-</span> <span>1</span>)
</span></span><span><span>    .expect(<span>"unreasonably large stack requested"</span>) <span>/</span> page_size;
</span></span><span><span><span>let</span> stack_pages <span>=</span> std::cmp::max(<span>1</span>, requested_pages) <span>+</span> <span>2</span>;
</span></span><span><span><span>let</span> stack_bytes <span>=</span> stack_pages.checked_mul(page_size)
</span></span><span><span>    .expect(<span>"unreasonably large stack requesteed"</span>);
</span></span></code></pre></div><p>It looks like <code>stacker</code> first computes the number of requested pages by dividing the requested stack size by the page size, rounding up. Then it adds 2 to that. In our case:</p><ul><li>The requested stack size is 1 MiB.</li><li>With 4 KiB pages, this works out to 256 pages.</li><li><code>stacker</code> then requests 256 + 2 = 258 pages, which is 1032 KiB.</li></ul><p>This explains both the 1028 KiB allocation (one guard page after the stack), and the 4 KiB guard page we’re crashing at (one guard page before the stack).</p><h2 id="triggering-the-bug-on-other-platforms">Triggering the bug on other platforms<a href="#triggering-the-bug-on-other-platforms" arialabel="Anchor">#</a></h2><p>If the issue is that a 1 MiB stack isn’t enough, it should be possible to reproduce this on other platforms by setting their stack size to something smaller than the 2 MiB default.</p><p>With a stack size &lt;= 1 MiB, we would expect that:</p><ol><li><code>rustc</code> calls <code>stacker</code> as before.</li><li>There are two possibilities: either <code>stacker</code> decides there is enough stack space and doesn’t create a new segment, or it decides there isn’t enough and does create a new 1 MiB segment.</li><li>In either case, 1 MiB is simply not enough to parse <code>cranelift-codegen</code>, and the program crashes.</li></ol><p>Let’s try to compile <code>cranelift-codegen</code> on Linux with a reduced stack size.</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ cd cranelift-codegen-test
</span></span><span><span>$ RUST_MIN_STACK<span>=</span><span>1048576</span> cargo +1.80.0 build
</span></span><span><span><span>
</span></span></span><span><span><span></span>note: rustc unexpectedly overflowed its stack! this is a bug
</span></span><span><span>note: maximum backtrace depth reached, frames may have been lost
</span></span><span><span>note: we would appreciate a report at https://github.com/rust-lang/rust
</span></span><span><span>help: you can increase rustc's stack size by setting RUST_MIN_STACK=2097152
</span></span><span><span>note: backtrace dumped due to SIGSEGV! resuming signal
</span></span></code></pre></div><p>This does crash as expected. The full output is <a href="https://gist.github.com/sunshowers/3ac000e5a5022acd3f07886a16a39520">here</a>. Some of the symbols are missing, but the crash does seem to be in parser code.</p><p>(At this point, we could have gone further and tried to make <a href="https://github.com/rust-lang/rust/issues/116249#issuecomment-1741572717">a debug-assertions build of <code>rustc</code></a> – but it was already pretty clear why the crash was happening.)</p><h2 id="what-codes-failing-to-parse-anyway">What code’s failing to parse, anyway?<a href="#what-codes-failing-to-parse-anyway" arialabel="Anchor">#</a></h2><p>Call stack exhaustion in the parser suggests that the crash is happening in some kind of large, automatically generated file. But what file is it?</p><figure><img src="https://sunshowers.io/images/strace-mascot.png" alt="A cartoon ostrich with a light orange head, yellow eyes, orange beak and feet, and a coat of black and a couple shades of grey."><figcaption>Der Strauß, the strace mascot. CC BY-SA 4.0, by Vitaly Chaykovsky.</figcaption></figure><p>It’s hard to tell by looking at the core file itself, but we have another dimension of debugging at hand: syscall tracers! These tools print out all the <abbr title="System calls: calls from user programs into the kernel">syscalls</abbr> made by a process. Most OSes have some means to trace syscalls: <a href="https://strace.io/"><code>strace</code></a> on Linux, <a href="https://opensource.apple.com/source/dtrace/dtrace-147/DTTk/dtruss.auto.html"><code>dtruss</code></a> on macOS, <a href="https://en.wikipedia.org/wiki/Process_Monitor">Process Monitor</a> on Windows, and <a href="https://illumos.org/man/1/truss"><code>truss</code></a> on illumos<sup id="fnref:7"><a href="#fn:7" role="doc-noteref">7</a></sup>.</p><p>Since we’re interested in file reads, we can try filtering it down to <a href="https://pubs.opengroup.org/onlinepubs/9699919799/">the <code>open</code> and <code>openat</code> syscalls</a>. You need to open a file to read it, after all. (Alternatively, we can also simply not filter out any syscalls, dump the entire trace to a file, and then look at it afterwards.)</p><p>On illumos, we tell <code>truss</code> to run <code>cargo build</code>, filtering syscalls to <code>open</code> and <code>openat</code> (<code>-t</code>), and following child processes (<code>-f</code>):</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ truss -ft open,openat cargo build
</span></span></code></pre></div><p>This prints out every file that the child <code>rustc</code> tries to open (<a href="https://gist.github.com/sunshowers/1d9d67722d10b4b3f80ac2fe42d61e7a#file-gistfile0-txt-L549-L555">full output</a>):</p><pre tabindex="0"><code>20755/3:	open("/home/rain/dev/cranelift-codegen-test/target/debug/build/cranelift-codegen-dad37ce046df129a/out/isle_opt.rs", O_RDONLY|O_CLOEXEC) = 13
20755/3:	    Incurred fault #6, FLTBOUNDS  %pc = 0xFFFFFC7FD9E74361
20755/3:	      siginfo: SIGSEGV SEGV_ACCERR addr=0xFFFFFC7FED22CA58
20755/3:	    Received signal #11, SIGSEGV [default]
20755/3:	      siginfo: SIGSEGV SEGV_ACCERR addr=0xFFFFFC7FED22CA58
20754/3:	    Received signal #18, SIGCLD, in waitid() [default]
20754/3:	      siginfo: SIGCLD CLD_DUMPED pid=20755 status=0x000B
</code></pre><p>It looks like the crash is in a file called <code>isle_opt.rs</code> in the <code>out/</code> directory. With Cargo, a file being in an <code>out/</code> directory is a pretty strong indication that it is generated by a build script.</p><p>On Linux, a similar <code>strace</code> command is:</p><div><pre tabindex="0"><code data-lang="console"><span><span>RUST_MIN_STACK=1048576 strace -fe open,openat cargo build
</span></span></code></pre></div><p>This command also blames the same file, <code>isle_opt.rs</code>.</p><p>What does this file look like, anyway? <a href="https://gist.githubusercontent.com/sunshowers/22b1a612ee1cb88047c456532e0f6877/raw/9403b8b644f25c600d426ee1a39e2459684244dc/gistfile0.txt">Here’s my copy.</a> It’s pretty big and deeply nested! It does look large and complex enough to trigger call stack exhaustion.</p><p>Syscall traces would definitely be somewhat harder to get if the crash weren’t so easily reproducible. Someone smarter than me should write about how to figure this out using just the core file. The file’s fully loaded into memory so it seems like it should be possible.</p><h2 id="unblocking-myself">Unblocking myself<a href="#unblocking-myself" arialabel="Anchor">#</a></h2><p>Going back to the beginning: the reason I went down this adventure was because I wanted to make an unrelated change to the Rust standard library. But the stage 0 compiler being broken meant that it was impossible to get to the point where I could build the standard library as-is, let alone test that change.</p><p>How can we work around this? Well, going back to basics, where did the stage 0 compiler come from? It came from Rust’s CI, and it wasn’t actually built on illumos! (Partly because there’s no publicly-available CI system running illumos.) Instead, it was cross-compiled from Linux to illumos.</p><p>Based on this, my coworker Joshua suggested that I try and do whatever Rust’s CI does to build a stage 0 compiler for illumos.</p><p>Rust’s CI uses <a href="https://github.com/rust-lang/rust/tree/75ac3b633/src/ci/docker">a set of Docker images</a> to build distribution artifacts. In theory, building a patched rustc should be as simple as running these commands on my Linux machine:</p><div><pre tabindex="0"><code data-lang="console"><span><span># Check out the exact version of the stage0 compiler
</span></span><span><span>$ git checkout 75ac3b633
</span></span><span><span><span>
</span></span></span><span><span><span></span># Make changes...
</span></span><span><span><span>
</span></span></span><span><span><span></span># Run Docker build
</span></span><span><span>$ ./src/ci/docker/run.sh dist-x86_64-illumos
</span></span></code></pre></div><p>In reality, there were some Docker permissions issues due to which I had to make a couple of changes to the script. Overall, though, it was quite simple. <a href="https://gist.github.com/sunshowers/2dacc5902ad4aecc50d215f018f55232">Here’s the patch</a> I built the compiler with, including the changes to the CI scripts.</p><p>The result of building the compiler was a set of <code>.tar.xz</code> files, just like <a href="https://github.com/rust-lang/rust/blob/2d5a628a1de1d38318909a710ef37da6251e362e/src/stage0">the ones published by Rust’s CI</a>. After copying the files over to my illumos machine, I wasn’t sure which tarballs to extract. So I made <a href="https://gist.github.com/sunshowers/9b6774edfabbea6985881617302caf34">a small change</a> to the bootstrap script to use my patched tarballs.</p><p>With this patch, I was able to successfully build Rust’s standard library on illumos and test my changes. Hooray! (<a href="https://github.com/rust-lang/rust/pull/128259">Here’s</a> what I was trying to test.)</p><p><em>Update 2024-08-05: After this post was published, jyn pointed out <a href="https://hachyderm.io/deck/@jyn@tech.lgbt/112906410687051157">on Mastodon</a> that <code>cranelift-codegen</code> is actually optional, and that I could have also worked around the issue by disabling it in the <code>rustc</code> build system’s <code>config.toml</code>. Thanks!</em></p><h2 id="what-did-we-learn">What did we learn?<a href="#what-did-we-learn" arialabel="Anchor">#</a></h2><p>The bug occurred due to a combination of several factors. It also revealed a few other issues, such as the lack of an environment variable workaround and some missing error reporting.</p><p>Here are some ways we can make the situation better, and help us have an easier time
debugging similar issues in the future.</p><ol><li><p><strong><code>rustc</code> isn’t using <code>stacker</code> enough.</strong> The basic problem underneath it all is that the part of the <code>rustc</code> parser that triggered the bug wasn’t calling <code>stacker</code> often enough to make new stack segments. <code>rustc</code> should be calling <code>stacker</code> more than it is today.</p><ul><li>Filed as <a href="https://github.com/rust-lang/rust/issues/128422">rust-lang/rust#128422</a>.</li></ul></li><li><p><strong><code>stacker</code> cannot detect the stack size on illumos.</strong> This is something that we should fix in <code>stacker</code>, but this is actually a secondary issue here. On other platforms, <code>stacker</code>’s ability to detect the stack size was masking the <code>rustc</code> bug.</p><p>Fixing this requires two changes:</p><ul><li>A <a href="https://github.com/rust-lang/libc/pull/3788">PR to <code>libc</code></a> to add the <code>pthread_attr_get_np</code> function to it.</li><li>A <a href="https://github.com/rust-lang/stacker/pull/88">PR to <code>stacker</code></a> to use this function to detect the stack size on illumos.</li></ul></li><li><p><strong><code>stacker</code>-created segments don’t print a nice message on stack exhaustion.</strong> This is a bit ironic because <code>stacker</code> is supposed to prevent stack exhaustion. But when it does happen, it would be nice if <code>stacker</code> printed out a message like standard Rust does.</p><ul><li>This is <a href="https://github.com/rust-lang/stacker/issues/59">rust-lang/stacker#59</a>.</li></ul></li><li><p><strong>On illumos, the Rust runtime doesn’t print a message on stack exhaustion.</strong> Separate from the previous point, on illumos the Rust runtime doesn’t print a message on stack exhaustion even when using native stacks.</p><ul><li>Filed as <a href="https://github.com/rust-lang/rust/issues/128568">rust-lang/rust#128568</a>.</li></ul></li><li><p><strong>Rust’s CI doesn’t run on illumos.</strong> At Oxide, we have an existential dependency on Rust targeting illumos. Even a shadow CI that ran on nightly releases would have caught this issue right away.</p><p>We’re discussing the possibilities for this internally; stay tuned!</p></li><li><p><strong><code>stacker</code> segment sizes can’t be controlled via the environment.</strong> Being able to control stack sizes with <code>RUST_MIN_STACK</code> is a great way to work around issues. It doesn’t appear that <code>stacker</code> segment sizes can be controlled in this manner. Maybe that functionality should be added to <code>rustc</code>, or to <code>stacker</code> itself?</p><ul><li>Opened a <a href="https://internals.rust-lang.org/t/allow-controlling-rustc-stacker-segment-sizes-via-the-environment/21292">discussion on internals.rust-lang.org</a>.</li></ul></li><li><p><strong>Maybe a <a href="https://github.com/rust-lang/crater">crater</a> run with a smaller stack size?</strong> It would be interesting to see if there are other parts of the Rust codebase that need to call <code>stacker</code> more as well.</p></li><li><p><strong><code>x.py</code> suggests disabling optional components.</strong> Since <code>cranelift-codegen</code> was an optional component that can be disabled, the <code>x.py</code> tooling
could notice if a build failed in such a component, and recommend disabling that component. <em>Added 2024-08-05, suggested <a href="https://hachyderm.io/deck/@jyn@tech.lgbt/112906451310138312">by jyn</a>.</em></p></li></ol><p>To me, this is the most exciting part of debugging: what kinds of changes can we make, both
specific and systemic ones, to make life easier for our future selves?</p><h2 id="conclusion-and-credits">Conclusion and credits<a href="#conclusion-and-credits" arialabel="Anchor">#</a></h2><p>This was a really fun debugging experience because I got to learn about several illumos debugging
tools, and also because we could synthesize information from several sources to figure out a complex
issue. (Thankfully, the root cause was straightforward, with no memory corruption or other “spooky
action at a distance” involved.)</p><p>Debugging this was a real team effort. I couldn’t have done it without the assistance of several of
my exceptional colleagues. In no particular order:</p><ul><li><a href="https://m.unix.house/@jmc">Joshua M. Clulow</a></li><li><a href="https://mattkeeter.com/">Matt Keeter</a></li><li><a href="https://discuss.systems/@cross">Dan Cross</a></li><li><a href="https://cliffle.com/">Cliff Biffle</a></li><li><a href="https://steveklabnik.com/">Steve Klabnik</a></li><li><a href="https://artemis.sh/">artemis everfree</a></li></ul><p>Thanks to all of you!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Loses DOJ Antitrust Suit Over Search (801 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search</link>
            <guid>41164240</guid>
            <pubDate>Mon, 05 Aug 2024 18:58:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search">https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search</a>, See on <a href="https://news.ycombinator.com/item?id=41164240">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Iso20022.js – Create payments in 3 lines of code (196 pts)]]></title>
            <link>https://www.iso20022js.com/</link>
            <guid>41163645</guid>
            <pubDate>Mon, 05 Aug 2024 17:55:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.iso20022js.com/">https://www.iso20022js.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41163645">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><header></header><main><div><h2><span>Open source</span><br>Enterprise-grade ISO20022 Infrastructure</h2><p><code>iso20022.js</code> is a low-dependency, open-source node library that helps companies communicate with banks using open ISO20022 standards.<!-- --> <a href="https://docs.iso20022js.com/" target="_blank" rel="noopener noreferrer">Try sending a SWIFT payment in three lines of code.</a></p><p><code>npm install iso20022.js</code></p><p><span>Code</span><label><span></span></label><span>XML</span></p><div><pre><code>import { ISO20022 } from 'iso20022.js'

const iso20022 = new ISO20022({
    initiatingParty: {
        name: 'Acme Corporation',
        id: 'ACMECORP',
        account: {
            accountNumber: '123456789012',
        },
        agent: {
            bic: 'CHASUS33',
            bankAddress: {
                country: 'US',
            }
        }
    }
});

const creditPaymentInitiation = iso20022.createSWIFTCreditPaymentInitiation({
    paymentInstructions: [{
        type: 'swift',
        direction: 'credit',
        amount: 1000,
        currency: 'USD',
        creditor: {
            name: 'Jane Smith',
            account: {
                iban: 'DE89370400440532013000'
            },
            agent: {
                bic: 'DEUTDEFF',
            },
            address: {
                streetName: "123 Main St",
                townName: "Funkytown",
                postalCode: "12345",
                country: "DE",
            }
        }
    }]
});

console.log(creditPaymentInitiation.toString());</code></pre></div></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Airhart Aeronautics (YC S22) – A modern personal airplane (452 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=41163382</link>
            <guid>41163382</guid>
            <pubDate>Mon, 05 Aug 2024 17:26:43 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=41163382">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="41163382">
      <td><span></span></td>      <td><center><a id="up_41163382" href="https://news.ycombinator.com/vote?id=41163382&amp;how=up&amp;goto=item%3Fid%3D41163382"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=41163382">Launch HN: Airhart Aeronautics (YC S22) – A modern personal airplane</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_41163382">104 points</span> by <a href="https://news.ycombinator.com/user?id=n_ermosh">n_ermosh</a> <span title="2024-08-05T17:26:43"><a href="https://news.ycombinator.com/item?id=41163382">3 hours ago</a></span> <span id="unv_41163382"></span> | <a href="https://news.ycombinator.com/hide?id=41163382&amp;goto=item%3Fid%3D41163382">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20Airhart%20Aeronautics%20(YC%20S22)%20%E2%80%93%20A%20modern%20personal%20airplane&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=41163382&amp;auth=31ffb8bc42a23118d4b11c8ab7459e5e28c5f2c6">favorite</a> | <a href="https://news.ycombinator.com/item?id=41163382">117&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey Hacker News! I’m Nikita, founder of Airhart Aeronautics (<a href="https://www.airhartaero.com/">https://www.airhartaero.com/</a>). We are building an airplane for people who don’t fly airplanes. The goal is to make flying as easy as driving a car—while maintaining a high bar for safety. Here’s a video that shows a bit of our hardware and quite a bit of our software: <a href="https://youtu.be/PGJUGUceu8A" rel="nofollow">https://youtu.be/PGJUGUceu8A</a></p><p>In the US, trips that are 50-300 miles are almost all done by car because that distance is too short for commercial airlines and too far for public transportation. Thanks to the Wright Brothers we've had aerial transport for over 100 years. The US has over 19,000 airports, and large commercial airplane technology has developed to the point that the planes practically fly themselves. If we already have the infrastructure and the technology, why isn't everyone flying planes?</p><p>The problem is that small airplane technology hasn’t innovated and is stuck in the past. Flying a small airplane is complicated, mentally taxing, and dangerous—about 28x more dangerous than driving a car. Outdated airplanes, coupled with outdated flight controls, lead to regular accidents, often due to some form of loss of control. The planes are expensive and margins are small. There is no incentive to innovate within the current market, so we are looking at the new, untapped market of those who don’t think about flying as an option today and making it an option.</p><p>I first came across this when I learned to fly in 2020. I was learning in a “modern” GA airplane but was immediately struck by the fact that an airplane built in 2018 did not have an engine computer and there was a manual level to control the fuel/air mixture ratio. Starting it on a hot day was like starting a stubborn lawn mower. On top of that, my instructor was telling me all the various ways I could kill myself if I’m not running at 100% concentration for hours on end. This just didn’t sit right with me.</p><p>At the time I was working at SpaceX as an avionics engineer, leading the development of the avionics for the fairing recovery program. I also built autonomous aircraft when I was a student at Cornell, where I got a degree in electrical and computer engineering. It was clear to me that the core problem is that airplanes are too unsafe and too complicated to operate which is keeping too many people out of aviation. So, I decided to leave SpaceX and was joined by my long-time friend Brendan (he was a software engineer at Apple at the time; we built autonomous aircraft together at Cornell) to start Airhart to tackle this problem and make flying safer and more accessible.</p><p>We are developing a full hardware and software package to change how people fly airplanes. It’s a fly-by-wire control system, meaning instead of mechanical linkages between the pilot’s control stick and the control surfaces, it’s a joystick that sends digital commands to a computer that then moves the control surfaces accordingly with servo actuators. We’re developing all of the hardware ourselves: the computers, the sensors, the actuators–and all of the software that actually does the control. But it’s not just fly-by-wire. On top of it, we are implementing a simplified control scheme that reduces flying the airplane to just one action to perform one maneuver.</p><p>For readers who aren’t pilots: all flying is basically coordinating the aircraft pitch, roll, yaw, and throttle to coordinate actions. Something as simple as a level turn to the right means you have to 1) roll the airplane, 2) use your feet on the rudder pedals to keep the turn coordinated, 3) pull back to increase your lift since you are now losing lift in a bank, 4) monitor your airspeed (especially if at slow speeds when coming in to land), 5) monitor your altitude as you’re adjusting your lift in (3), 6) monitor your turn coordination as you adjust it in (2). You are now established in a turn. To return to flying straight and level do those in reverse. And while doing all this, you need to be navigating through complex airpaces and talking to air traffic control over 1940s radio technology. All this together makes it very hard to fly and very easy for a pilot (especially a new pilot) to lose control of the airplane, which is still the leading cause of fatalities in general aviation.</p><p>With Airhart Assist (that’s what we call our system), you just push a control stick to the right and the flight computers do all those steps to put you into a coordinated level turn.</p><p>So, how does this actually work?</p><p>The force-feedback joystick in the plane sends its position to a flight controller (actually 3 that work in parallel for safety and redundancy, more on that later). The flight controller interprets the position as a turn rate or climb rate command (for left/right or forward/back). The flight controller also reads a bunch of sensors (gyroscope, accelerometer, magnetometer, air pressure, GPS, etc) to develop an accurate estimate of the airplane’s state: roll, pitch, yaw, velocity, position, etc. Using the current state from the sensor fusion algorithms and the desired state from the joystick, the controller does a bunch of aerodynamics and control theory math to compute the control surface position necessary to bring the aircraft to the desired state. Mixed into this is error checking, envelope protection, and other various safety measures to make sure the aircraft never enters an unsafe state.</p><p>Unlike a traditional airplane, it becomes impossible to command the airplane into a stall, a spin, unsafe attitudes, or other bad states. This is the key to the safety of the system: it prevents the common mistakes that pilots make that lead to disastrous consequences.</p><p>To make sure that this system is always functioning, everything is single-fault tolerant. That means that there are no single points of failure. Any fault that might occur–a broken wire, a fried resistor, a bitflip in a processor, a random hang in a kernel–does not affect the functionality of the system. This is achieved by having three flight controllers that take in information from two different sets of sensors (we call them “strings”), independently compute the desired actions to take, and vote on what to do. Each string has its own power source, backup battery, networking hardware, and set of critical sensors.</p><p>The only real single point of failure is the engine. We only have one, though the engine itself has redundant ignition systems, fuel pumps, controllers, etc. If the engine were to die, the batteries would keep the system running for ~30 minutes, giving you time to make an emergency landing. If the pilot somehow becomes incapacitated, any passenger can initiate an autonomous emergency landing. And if many things go wrong and the system does fail, there’s a full airframe parachute that can be activated to bring the airplane safely to the ground.</p><p>A lot of people will likely wonder: “isn’t removing stick and rudder skills going to make worse pilots”? Short answer: no. The core of what makes a good pilot isn’t stick and rudder skills; it’s good decision making and risk management. For single pilots in GA, it’s even more important. So we are building a system that will give our pilots the tools to focus entirely on decision making and risk management and remove the distraction of stick and rudder that creates so many problems today. We think stick and rudder skills are definitely a necessity for airline pilots flying hundreds of people on board for the extremely rare cases where emergencies do happen and many people's lives are at risk, but not for an average person flying a four seat airplane to go on a weekend trip to the mountains. Our system makes it impossible to lose control of the airplane, potentially solving 80% of today’s fatal accidents in general aviation.</p><p>Fly-by-wire systems typically cost millions of dollars. We intend to build it for much less. How? By leveraging automotive grade components, clever sensor fusion math so that we can use MEMS gyroscopes that cost &lt;$100 instead of laser-ring gyros that cost $1000 if not $10k, and by a first principles approach to the design of our system. This requires that we build a lot of our own hardware. We’ve developed our own control surface actuators, our own display assemblies, we’re developing our own radios and GPS hardware (an aviation grade GPS can cost upwards of $10k, but it’s the same hardware as in a $20 consumer grade GPS).</p><p>To take advantage of this automotive style approach requires scale. Enter the final third of the problem: flying isn’t sexy. Modern airplanes look like they are from the 90s. With our first airplane, the Airhart Sling, we are redesigning the entire UI/UX of the flight deck to make it as easy as possible to use, redesigning the cabin to feel much more like a luxury car than an airplane today, and integrating Airhart Assist to make flying much more accessible and much more inviting. You can see previews of the Airhart Sling on our website, <a href="https://www.airhartaero.com/">https://www.airhartaero.com/</a>. The sexiness of design is extremely important for the economies of scale of an automotive-style approach to work.</p><p>There’s a plethora of other problems that make flying cumbersome: weight and balance worksheets, complicated route planning, talking to ATC, lengthy preflight checks, a fractured system of FBOs, difficult access to instruction, the list goes on. We are working on all of these too, but no amount of extra UI features can solve the fundamental problem that aviating itself is hard. So that’s what we’re solving first.</p><p>We want people who don’t think about airplanes as a mode of transportation to start flying and are hoping that Airhart will pave the way. Whether you fly planes today or not, I’d love to hear your thoughts. This is a very exciting topic with lots to discuss so I’m very much looking forward to the conversation!</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A new type of neural network is more interpretable (239 pts)]]></title>
            <link>https://spectrum.ieee.org/kan-neural-network</link>
            <guid>41162676</guid>
            <pubDate>Mon, 05 Aug 2024 16:15:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/kan-neural-network">https://spectrum.ieee.org/kan-neural-network</a>, See on <a href="https://news.ycombinator.com/item?id=41162676">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="A New Type of Neural Network Is More Interpretable"><p><a href="https://spectrum.ieee.org/what-is-deep-learning" target="_blank">Artificial neural networks</a>—algorithms inspired by biological brains—are at the center of modern <a href="https://spectrum.ieee.org/topic/artificial-intelligence/">artificial intelligence</a>, behind both chatbots and image generators. But with their many neurons, they can be <a href="https://www.nature.com/articles/d41586-024-01314-y" rel="noopener noreferrer" target="_blank">black boxes</a>, their inner workings uninterpretable to users. </p><p>Researchers have now created a fundamentally new way to make <a href="https://spectrum.ieee.org/tag/neural-networks">neural networks</a> that in some ways surpasses traditional systems. These new networks are more interpretable and also more accurate, proponents say, even when they’re smaller. Their developers say the way they learn to represent physics data concisely could help scientists uncover new laws of nature. </p><p>“It’s great to see that there is a new architecture on the table.” <strong></strong><strong>—Brice Ménard, Johns Hopkins University</strong><strong></strong></p><p>For the past decade or more, engineers have mostly tweaked neural-network designs through trial and error, says Brice Ménard, a physicist at Johns Hopkins University who studies how neural networks operate but was not involved in the new work, which <a href="https://arxiv.org/abs/2404.19756" rel="noopener noreferrer" target="_blank">was posted on arXiv</a> in April. “It’s great to see that there is a new architecture on the table,” he says, especially one designed from first principles.</p><p>One way to think of neural networks is by analogy with neurons, or nodes, and synapses, or connections between those nodes. In traditional neural networks, called multi-layer perceptrons (MLPs), each synapse learns a weight—a number that determines <em>how strong</em> the connection is between those two neurons. The neurons are arranged in layers, such that a neuron from one layer takes input signals from the neurons in the previous layer, weighted by the strength of their synaptic connection. Each neuron then applies a simple function to the sum total of its inputs, called an activation function.</p><p><img alt="black text on a white background with red and blue lines connecting on the left and black lines connecting on the right " data-rm-shortcode-id="16c6aa72c8d9515c82ff8f3ee8448e30" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/black-text-on-a-white-background-with-red-and-blue-lines-connecting-on-the-left-and-black-lines-connecting-on-the-right.png?id=53100120&amp;width=980" height="1128" id="e42c9" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/black-text-on-a-white-background-with-red-and-blue-lines-connecting-on-the-left-and-black-lines-connecting-on-the-right.png?id=53100120&amp;width=980" width="1768"><small placeholder="Add Photo Caption...">In traditional neural networks, sometimes called multi-layer perceptrons [left], each synapse learns a number called a weight, and each neuron applies a simple function to the sum of its inputs. In the new Kolmogorov-Arnold architecture [right], each synapse learns a function, and the neurons sum the outputs of those functions.</small><small placeholder="Add Photo Credit...">The NSF Institute for Artificial Intelligence and Fundamental Interactions</small></p><p>In the new architecture, the synapses play a more complex role. Instead of simply learning <em>how strong</em> the connection between two neurons is, they learn the <em>full nature</em> of that connection—the function that maps input to output. Unlike the activation function used by neurons in the traditional architecture, this function could be more complex—in fact a “spline” or combination of several functions—and is different in each instance. Neurons, on the other hand, become simpler—they just sum the outputs of all their preceding synapses. The new networks are called Kolmogorov-Arnold Networks (KANs), after two mathematicians who studied how functions could be combined. The idea is that KANs would provide greater flexibility when learning to represent data, while using fewer learned parameters. </p><p>“It’s like an alien life that looks at things from a different perspective but is also kind of understandable to humans.” <strong>—Ziming Liu, Massachusetts Institute of Technology</strong></p><p><span></span>The researchers tested their KANs on relatively simple scientific tasks. In some experiments, they took simple physical laws, such as the velocity with which two relativistic-speed objects pass each other. They used these equations to generate input-output data points, then, for each physics function, trained a network on some of the data and tested it on the rest. They found that increasing the size of KANs improves their performance at a faster rate than increasing the size of MLPs did. When solving partial differential equations, a KAN was 100 times as accurate as an MLP that had 100 times as many parameters.</p><p>In another experiment, they trained networks to predict one attribute of topological knots, called their signature, based on other attributes of the knots. An MLP achieved 78 percent test accuracy using about 300,000 parameters, while a KAN achieved 81.6 percent test accuracy using only about 200 parameters.</p><p>What’s more, the researchers could visually map out the KANs and look at the shapes of the activation functions, as well as the importance of each connection. Either manually or automatically they could prune weak connections and replace some activation functions with simpler ones, like sine or exponential functions. Then they could summarize the entire KAN in an intuitive one-line function (including all the component activation functions), in some cases perfectly reconstructing the physics function that created the dataset.</p><p>“In the future, we hope that it can be a <a href="https://spectrum.ieee.org/ai-for-science" target="_self">useful tool for everyday scientific research</a>,” says Ziming Liu, a computer scientist at the Massachusetts Institute of Technology and the paper’s first author. “Given a dataset we don’t know how to interpret, we just throw it to a KAN, and it can <a href="https://www.nature.com/articles/d41586-023-03596-0" target="_blank">generate some hypothesis</a> for you. You just stare at the brain [the KAN diagram] and you can even perform surgery on that if you want.” You might get a tidy function. “It’s like an alien life that looks at things from a different perspective but is also kind of understandable to humans.”</p><p>Dozens of papers have already cited the KAN preprint. “It seemed very exciting the moment that I saw it,” says Alexander Bodner, an undergraduate student of computer science at the University of San Andrés, in Argentina. Within a week, he and three classmates had combined KANs with convolutional neural networks, or CNNs, a popular architecture for processing images. They tested their <a href="https://arxiv.org/abs/2406.13155" target="_blank">Convolutional KANs</a> on their ability to categorize handwritten digits or pieces of clothing. The best one approximately matched the performance of a traditional CNN (99 percent accuracy for both networks on digits, 90 percent for both on clothing) but using about 60 percent fewer parameters. The datasets were simple, but Bodner says other teams with more computing power have begun scaling up the networks. Other people are combining KANs with transformers, an architecture popular in <a href="https://www.nature.com/articles/d41586-021-00530-0" target="_blank">large language models</a>.</p><p>One downside of KANs is that they take longer per parameter to train—in part because they can’t take advantage of <a href="https://spectrum.ieee.org/tag/gpus">GPUs</a>. But they need fewer parameters. Liu notes that even if KANs don’t replace giant CNNs and transformers for processing images and language, training time won’t be an issue at the smaller scale of many physics problems. He’s looking at ways for experts to insert their prior knowledge into KANs—by manually choosing activation functions, say—and to easily extract knowledge from them using a simple interface. Someday, he says, KANs could help physicists discover high-temperature <a href="https://spectrum.ieee.org/tag/superconductors">superconductors</a> or ways to control nuclear fusion.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Andy Warhol's lost Amiga art found (414 pts)]]></title>
            <link>https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/</link>
            <guid>41162311</guid>
            <pubDate>Mon, 05 Aug 2024 15:33:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/">https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/</a>, See on <a href="https://news.ycombinator.com/item?id=41162311">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>After 39 years, Andy Warhol’s lost Amiga art has been found. And it’s for sale. Details of the reemergence help to shed light on an earlier discovery from about a decade ago. And those details come from the very person who taught Andy Warhol how to use a computer. In this blog post, I’ll put these discoveries in context, and offer some thoughts from both an art teacher and a sales engineer.</p><h2>The lost Andy Warhol image of Debbie Harry</h2><figure id="attachment_35575" aria-describedby="caption-attachment-35575"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/andy-warhol-debbie-harry-amiga-art/" rel="attachment wp-att-35575"><img fetchpriority="high" decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=294%2C300&amp;ssl=1" alt="Debbie Harry by Andy Warhol, Amiga art from 1985" width="294" height="300" srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=294%2C300&amp;ssl=1 294w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=55%2C55&amp;ssl=1 55w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?w=490&amp;ssl=1 490w" sizes="(max-width: 294px) 100vw, 294px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35575">The original digital copy of this famous Andy Warhol-created image of Debbie Harry resurfaced in July 2024.</figcaption></figure><p>Commodore famously commissioned Andy Warhol to demonstrate the artistic capabilities of its new <a href="https://dfarq.homeip.net/amiga-1000-ten-years-ahead-of-its-time/">Amiga 1000 computer</a> in 1985. As part of his demonstration, Warhol created some digital art images, including a self-portrait of himself sitting in front of the computer, which in turn was displaying the self portrait. Another image he created was a famous portrait of Debbie Harry, the photogenic lead singer of the New Wave band Blondie.</p><p>In recounting the event, Debbie Harry said in her autobiography that she had a copy of the images from the event, and as far as she knew, only one other person had a copy. She did not identify the other person.</p><h3>The unnamed other person</h3><p>In July 2024, former Commodore engineer <a href="https://www.artnews.com/art-news/news/andy-warhol-lost-portrait-blondie-debbie-harry-resurfaces-1234713192/">Jeff Bruette came forward and said he owns a print of the image Andy Warhol created</a> at the event, and a signed floppy disk containing eight images that Andy Warhol created that day. He said he’s had them on display in his home for about 39 years.</p><p>Some of the accounts of the Warhol art resurfacing describe Bruette as a technician, and although that was essentially the role he was serving at the event, he was much more than a technician. He was a long time Commodore employee, and he programmed two popular early Commodore 64 games that Commodore distributed commercially, Gorf and Wizard of Wor. Bruette also acted as the product manager of the graphics software Warhol used.</p><p>He was more than a technician to Andy Warhol as well. He was the one who taught Andy Warhol how to use an Amiga. For that matter, he probably taught Andy Warhol almost everything he knew about computers in general, not just Amigas.</p><h2>Andy Warhol’s demonstration Amiga art</h2><p>The digital images Andy Warhol created are rudimentary by today’s standards, and in some ways, perhaps less ambitious then some of the thumbnails I create for my blog posts. But this was 39 years ago, and I have much better tools than he did. The maximum resolution he had to work with was 640 pixels in one direction and 400 pixels the other direction. And while he had 4,096 colors to choose from, he could only use 32 of them at a time. He had a digital camera available to him, but it wasn’t a digital camera in any modern sense. It was really best suited to taking monochromatic images.</p><p>To a casual viewer, they look like low resolution images with a very limited number of colors, and it’s not completely unfair to say they bear some resemblance to something my kids would have created in Microsoft Paint when they were little.</p><h3>An art teacher’s impression</h3><p>But when I showed the images to my wife, a former high school art teacher, the first thing she noticed was his choice of colors. He deliberately chose colors that contrasted with each other, and the other colors he used were colors you would get from mixing two or more of the other colors he used. Rule number one of painting, she said, is to never use black or brown, but make your own from the other colors you’re using. Warhol’s images contain odd shades that result from mixing other colors in the image together.</p><p>When you look at Andy Warhol paintings, his style suited these specific tools. He often worked from photographs, creating stark images containing bold flood fills with only a few colors. Sometimes he would cut up photographs, or have someone else cut up the photographs, then he would arrange the pieces and then paint what he saw.</p><p>With the Amiga, he could do all of this digitally. So the choice of Andy Warhol to demonstrate how to use the machine was a brilliant idea. This computer with advanced graphics capabilities for its time, and the ability to multitask and switch between different tools so he could cut up and resize images and then paste the result into the image he was working on couldn’t have suited him any better if he’d designed it himself.</p><p>Problem was, he didn’t know how to use a computer.</p><h3>Andy Warhol’s body language</h3><figure id="attachment_35581" aria-describedby="caption-attachment-35581"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/andy-warhol-self-portrait-amiga-art-2/" rel="attachment wp-att-35581"><img decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1" data-src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1" alt="Andy Warhol self portrait with Amiga computer" width="195" height="300" data-srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1 195w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?w=416&amp;ssl=1 416w" data-sizes="(max-width: 195px) 100vw, 195px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35581">Note how Warhol is holding the mouse in this self portrait, keeping his fingers clear of the mouse buttons.</figcaption></figure><p>In all of the photographs I have seen of Andy Warhol with an Amiga, I noticed something. He is never, ever holding the mouse the way I would hold it. He has a death grip on the sides with his thumb on one side and his index and pinky finger on the other. And then he has his pointer and middle fingers curled up, as far away from the two mouse buttons and he can possibly get them while still being able to maintain the death grip on the mouse body. It betrays a fear of accidentally clicking either of the mouse buttons and another fear of accidentally dropping the mouse, or perhaps even accidentally moving the mouse.</p><h3>Warhol’s lament</h3><p>I read somewhere that Andy Warhol didn’t think he was very good at demonstrating how to use the computer, and he wished he could get good at it, because it seemed like a really good way to make money. I asked Jeff Bruette about that, and he said that was consistent with his experience with Warhol. “He saw the things that [AmigaWorld magazine’s art director] was able to create and how I could fluidly click the tools, colors, and menus to create things. He was completely inexperienced with computers and struggled with the process,” Bruette said.</p><p>“In fact, we would go through things together in the morning. After breaking for lunch he’d need a refresher on the difference between the right and left mouse buttons. True story,” he added.</p><p>For those unfamiliar with the Amiga, the left mouse button works like the left mouse button in Windows and other operating systems. The right mouse button activated the pull-down menus at the top of the screen. Conceptually, it was similar to context menus in today’s operating systems.</p><h3>A modern sales engineer’s critique</h3><p>Warhol’s results in creating his computer art were inconsistent. The famous image of Debbie Harry was not the result of the live demonstration. It came from a rehearsal earlier in the day. When he tried to recreate the image live with an audience, the result didn’t look like an Andy Warhol painting. Bruette shared the image in a private group, so I don’t feel like I am at liberty to share it, but I’ll share the story.</p><p>The lighting conditions were different during the event than they had been at rehearsal, so the photo he started with had different contrast. The flood fill to the right of Debbie Harry went fine. When he filled her hair, it was fine on the right side of the image, but not so good on the left. And exactly zero of his other flood fills did what he intended. Without the level of undo that modern paint programs have, he didn’t have an easy way to correct even that first mistake. His efforts to correct it just ended up blowing out her face. Instead of looking like an Andy Warhol painting of Debbie Harry, it looked like what you’d get if you told an impressionist to paint a woman with long hair.</p><p>In my day job, one of my responsibilities happens to be giving product demos. I’ve experienced demos where one mistake compounds the next. You learn to roll with it, but it takes practice.</p><p>When Commodore released the video of the event, they spliced in the image from the rehearsal session.</p><h3>What about flood fills?</h3><p>I’ve heard several stories from other Commodore engineers about how the flood fill function in the software they were using would crash the machine. I’m pretty sure those stories have even ended up in books about Commodore. Bruette said the flood fills were working in the versions of the software Warhol had, and that’s pretty clear even from the images in Warhol’s estate.</p><p>To create Warhol-style digital art, you need to be able to capture an image from a camera, resize it, copy and paste it, select your colors, and do flood fills on it. In a pinch you can get by without resizing and copying and pasting, but not having flood fills would be a showstopper.</p><h2>How the earlier discovery relates</h2><figure id="attachment_35582" aria-describedby="caption-attachment-35582"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/warhol-self-portrait-1985/" rel="attachment wp-att-35582"><img decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1" data-src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1" alt="A self portrait from Warhol's own collection" width="300" height="225" data-srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?w=534&amp;ssl=1 534w" data-sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35582">In this portion of an image recovered from Warhol’s estate in 2014, you can see how he was messing around with copying and pasting images and flood fills, two techniques he widely used in his other art.</figcaption></figure><p>In 2014, a series of images was recovered from disks found in Andy Warhol’s estate. His personal effects included two pre-production Amiga computers and a collection of disks containing not just the files he created, but also the software he used to create those images, including a previously undiscovered early version of the operating system. In <a href="https://dfarq.homeip.net/the-warhol-amiga-discovery-in-context/">a blog post I wrote at the time</a>, I speculated that the images were the result of him trying to learn how to use the computer.</p><p>Looking at the images again, I think they were more than that. He was experimenting with techniques. One of the images appears to be a photograph of himself where he clicked around with the fill function. But when you look at the image more closely, you can see where he had three different images of himself of differing sizes, and he superimposed the three, then he started messing around with fills.</p><h3>Insights into how (and what) Warhol learned</h3><p>I can almost see and hear Jeff Bruette explaining the capabilities of the computer to Andy Warhol, and then him walking through what Bruette had just described, trying to create in his own style using what he had just learned.</p><p>That’s because I had to do something similar. The discomfort level in the photographs of Andy Warhol with the computer remind me of something. I was in the odd position of teaching my own teachers about computers from the time I was a teenager into my mid 20s. Many of them had the same level of discomfort with the mouse. I would fire up Solitaire and have them play that to get used to clicking and dragging. Bruette didn’t have that luxury when tutoring Warhol.</p><h2>The lost opportunity</h2><p>I always wished Commodore had <a href="https://dfarq.homeip.net/the-trade-off-of-fidelity-and-convenience-in-marketing-and-how-it-doomed-my-favorite-company/">pursued the Andy Warhol connection further</a>. Now I understand why it didn’t happen. I don’t think Commodore marketing recognized the opportunity, but I also don’t think Andy Warhol was comfortable with it. It wasn’t the same as sitting William Shatner down in front of a VIC-20 with a simulated screen on the TV and showing him how to position his hands so it looked like he was typing and showing him where the cameras were so he could make sure he was looking at the camera while he was smiling. He was trying to do it right, he struggled to do it live, and he gave up.</p><p>He was trying to be a modern day sales engineer, but without the benefit of the professional training that I received. I also had at least five years of professional experience with the product I was demonstrating before gaining the title of sales engineer. I also sometimes had to give product demos at another company, a company whose software was not as far along, and where I had about the same level of experience and as Andy Warhol did, and let’s just say that didn’t go as well.</p><h3>A possible workaround</h3><p>But they had options. They could have done a Shatner-like maneuver in print advertising, having Warhol mime in front of the computer, with a copy of the image on screen but the mouse unplugged, just to make it look like he was producing it live. And then they could have added some text about how this new computer is the first one ever that works the way Andy Warhol does.</p><p>At any rate, I think it’s fantastic that the images Andy Warhol created on that day survive, we now know where the copy is, and the person who preserved them for 39 years will have a chance to get them into the hands of someone who will enjoy them, and use the proceeds to fund his retirement. That sounds like a win all around to me, and it closes the loop on some details of Andy Warhol’s involvement with the Amiga computer.</p><div itemtype="http://schema.org/Person" itemscope="" itemprop="author"><p>David Farquhar is a computer security professional, entrepreneur, and author. He started his career as a part-time computer technician in 1994, worked his way up to system administrator by 1997, and has specialized in vulnerability management since 2013. He invests in real estate on the side and his hobbies include O gauge trains, baseball cards, and retro computers and video games. A University of Missouri graduate, he holds CISSP and Security+ certifications. He lives in St. Louis with his family.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebGL visual programming editor cables.gl is now open source (149 pts)]]></title>
            <link>https://cables.gl/standalone</link>
            <guid>41162036</guid>
            <pubDate>Mon, 05 Aug 2024 15:05:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cables.gl/standalone">https://cables.gl/standalone</a>, See on <a href="https://news.ycombinator.com/item?id=41162036">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="content"><canvas id="glcanvasmouse"></canvas><section><div><div><p><span>You can now <span>create</span> next generation interaction, motion and 3D online or <span>offline</span>!</span></p></div><div><p>Whether you're a seasoned developer or a creative with little to no coding experience.<br>Create interaction, motion and 3D content with our new open-source, offline version that puts the full power of cables in your hands.</p></div></div><div><div><h2>Open source: peek under the hood</h2><ul><li><b>Licence</b>: MIT licence gives you all the freedom for your work</li><li><b>Transparency</b>: inspect the code, understand the tool, help us improve</li><li><b>Make it yours</b>: customise cables to fit your specific needs</li><li><b>Join the dev community</b>: contribute to cables development</li><li><b>Smooth workflow</b>: integrate easily with your local development setup</li></ul><p><a href="https://cables.gl/docs/6_1_developing_cables/1_setup_dev_env/setup_dev_env">Start developing cables!</a></p></div><div><h2>Standalone: unplug and create</h2><ul><li><b>Work anywhere</b>: even offline - no internet required. </li><li><b>Local asset freedom</b>: use files and assets without restrictions, ensuring privacy</li><li><b>Code your way</b>: use your preferred code editor for development</li><li><b>Fixed version</b>: work with one version for reliability</li><li><b>Security unchained</b>: wave goodbye to browser security headaches</li><li><b>Develop with npm</b>: use npm packages for native functionality</li></ul></div></div><div><br><h2>create</h2><ul><li>Easy to use node based interface</li><li>Real time adjustments allow for rapid prototyping of interaction, motion, 3D, generative and digital environments</li><li>Import and work with many different file formats: image, video, 3d, fonts, audio, json</li></ul></div><div><br><h2>contribute</h2><ul><li>Clone existing or write your own operators</li><li>Embed patches into your website</li><li>Build stunning visual experiences</li><li>Share, explore and learn with the cables community</li></ul></div><div><p><h2>support</h2></p></div></section></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A 20-something dethroned dotcom CEO that went to work the counter at McDonald's (2000) (115 pts)]]></title>
            <link>https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/</link>
            <guid>41161947</guid>
            <pubDate>Mon, 05 Aug 2024 14:55:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/">https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/</a>, See on <a href="https://news.ycombinator.com/item?id=41161947">Hacker News</a></p>
<div id="readability-page-1" class="page">

<br>
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">heiferman.com</a> / <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">my photo of the day</a><p><span size="5" color="#000000">i was a 20-something dethroned dotcom ceo that
went to work the counter at&nbsp; mcdonald's</span></p>
<p><span color="#000000">by scott heiferman (12/00)</span></p>

<p><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy4.jpg" width="360" height="272"></span></p>

<p><span color="#000000"><span size="5">background:</span>5/94: graduated from the university of iowa<br>
5/94-4/95: <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/sonycard.htm">"interactive marketing frontiersman"
at sony</a><br>
4/95-10/99: founder/ceo <a href="https://web.archive.org/web/20040616091238/http://www.i-traffic.com/">i-traffic</a>
(acquired by agency.com 10/99)<br>
10/99-10/01: chairman, i-traffic (an agency.com company)<br>
10/00-10/00:&nbsp; counterperson, mcdonald's (4th &amp; broadway, nyc)<br>
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/scott">more about me</a></span></p>

<p><span color="#000000"><span size="5">why i got a job at mcdonald's:</span> </span></p>
<p><span color="#000000">i spend a lot of time with <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/seth6million.htm">bankers</a>, <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/europeanstyling.htm">lawyers</a>,
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/saul.htm">
internet freaks</a>, <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/bubba-drain.htm"> corporate wonks</a>, and other people living
strange lives.&nbsp; as a good marketing guy, that's a bad thing.&nbsp; and as a
practicing anti-consumerist, that's a bad thing.&nbsp; i got a job at mcdonald's
to help get back in touch with the real world.&nbsp; also, after over 6 grueling
years in the internet whirlwind, i wanted to experience a profitable,
well-oiled, multi-billion-dollar machine. and&nbsp; i deserved a break today. </span></p>

<p><span size="5" color="#000000">how i got the job:</span></p>
<p><span color="#000000"><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/app.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/app_small.jpg" alt="app.jpg (40139 bytes)" width="250" height="156"></a><p>

i walked in, filled out an application, and was interviewed.&nbsp; i was
truthful.&nbsp; in my interview, the manager (ralph) asked if i can handle a
fast-paced, intense environment.&nbsp; i said yes.&nbsp; he looked at my resume and asked about my current part-time job as chairman at i-traffic.&nbsp; i said,
"it's an internet thing."&nbsp; he said "ok" and then asked
me for my waist size.</p></span></p>

<p><span size="5" color="#000000">a few observations:</span></p>
<p><span color="#000000">1. people like the "dollar menu".&nbsp; the
dollar menu consists of about a dozen items at mcdonald's that sell for a
dollar.&nbsp; not 99 cents, but one dollar.&nbsp; most of these items had had
existed elsewhere on the menu for about a dollar. mcdonald's has done a good job
of keeping their menu relatively simple and short, but people clearly respond to
the ultra-simplicity of the dollar menu.&nbsp; most people weren't primarily
ordering from the dollar menu because they were overwhelmed by the wider menu,
but because they perceived it to be the best value.&nbsp; someone call <a href="https://web.archive.org/web/20040616091238/http://abcnews.go.com/onair/ABCNEWSspecials/JohnStossel.html"> john
stossel</a>... but the dollar menu isn't always the best value. </span>interestingly,
"dollar stores" preceded mcdonald's "dollar menu" ---&nbsp; <span color="#000000">it's
fun to see "blue chip" kellogg-trained marketers from&nbsp;
mcdonald's borrow strategy from sleaze-level marketers.&nbsp; </span></p>
<p><span color="#000000">2. $5.75 ain't much. $5.75/hour X 40 hours/week X 52
weeks/year = $11,960.&nbsp; that's before taxes are taken out.&nbsp; some people said
it was disrespectful for me to take a job at mcdonalds --- i didn't need the
money, and they thought
that i was making fun of people that work there.&nbsp; the opposite is true:&nbsp; i gained a bucket of respect for people
that bust their butt for such low pay.&nbsp; it's one thing to scan past stats
about americans that make $12,000 per year -- or read about them in <a href="https://web.archive.org/web/20040616091238/http://www.nytimes.com/2000/12/12/nyregion/12SHEE.html">the
paper</a>.&nbsp; but, to actually work a tough fry-heaving, mcnugget-wielding
6-hour shift --- and get home smelling like those fries and mcnuggets -- and
realize that you only made about $30 that day... that's a serious
eye-opener.&nbsp; interpret as you see fit.</span></p>
<p><span color="#000000">3.&nbsp; i was never told to treat customers
well.&nbsp; correction:&nbsp; i was never told by management to treat customers
well.&nbsp;&nbsp; before i started the job, i had read on the mcdonald's website
that "<a href="https://web.archive.org/web/20040616091238/http://www.mcdonalds.com/countries/usa/careers/regional/expect/index.html">our
crewmembers make each customer feel like a welcomed guest</a>."&nbsp; i had
even noticed a few months before that mcdonald's even went so far as to change
their <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/smilogos">logo &amp; tagline to feature
the message "we love to see you smile."</a>  i expected to be
specifically, officially instructed to smile and make customers feel like a
welcomed guest.&nbsp; well, as any patron of a manhattan mcdonald's knows, there
ain't much feel-good from the counter staff.&nbsp; my co-workers were downright
rude to customers.&nbsp; i got funny looks from my co-workers when i was
friendly with customers.&nbsp; they must not have seen the logo or tagline or
website.</span></p>
<p><span color="#000000">4.&nbsp; nobody thanked me.&nbsp; i worked hard.&nbsp;
i got paid peanuts.&nbsp; i even ate mcdonald's food during my break (deducted
from my pay).&nbsp; it was intense:&nbsp; the cash register was complex, people
want their food NOW, the lines get deep, the mcflurry must be made just
right.&nbsp; i was trying hard and i was doing an ok job.&nbsp; now, i've been
the leader/manager for most of my life.&nbsp; i've had plenty of crap jobs, but
i've been the boss for the past few years.&nbsp; i faithfully read my fast
company magazine and my harvard business review.&nbsp; i've been taught
countless times the value of a leader/manager showing appreciation for people's
effort.&nbsp; however, my instinct has often been that showing appreciation
really isn't too necessary for good people.&nbsp; they just take pride in a job
well done --- and, anyway, they can read my mind and see the appreciation.&nbsp;
well, from day 1 at mcdonald's, i was yearning for someone there to say
"thanks".&nbsp; even a "you're doing ok" would
suffice.&nbsp; but, no.&nbsp; neither management experience -- nor reading about
management --- teaches this lesson as well as being an under-appreciated
employee.</span></p>
<p><span color="#000000">5. most of my mcdonald's co-workers did their jobs much
better than i ever could.&nbsp; they just seemed quicker.&nbsp; they had various
talents and intuition that i don't have.&nbsp;&nbsp;&nbsp;</span></p>
<p><span color="#000000">6.&nbsp; the fry basket burns skin.&nbsp;&nbsp;<br>
<img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/DSCF0003.JPG" width="247" height="189"><br>
</span>i got burned.</p>

<p><span size="5">other&nbsp;</span></p>
<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/fry_guy7.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy7_small1.jpg" alt="fry_guy7.jpg (131659 bytes)" width="250" height="187"></a>&nbsp;&nbsp;&nbsp;
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/fry_guy2.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy2_small1.jpg" alt="fry_guy2.jpg (123668 bytes)" width="250" height="187"></a></p>

<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/check.jpg"><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/check_small.jpg" alt="check.jpg (41341 bytes)" width="250" height="203"><br>
</span></a><span color="#000000">i got paid.</span></p>



<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/crains2.jpg"><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/crains2_small.jpg" width="250" height="344"><br>
</span></a><span color="#000000">crain's called me a couple days before i started at mcdonalds.&nbsp; they were doing a
story on post-acquisition internet ceo's in new york.&nbsp; i told
them that i was starting a job at mcdonald's and didn't say much else.&nbsp; i let them take my picture
after i got off work one day.&nbsp;they put a strange spin on the piece.&nbsp;
most annoying were the people who thought that this was a publicity stunt.</span></p>

<br>


<p><span size="4"><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">heiferman.com photo of the day</a></span></p><span size="4">









</span></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A cryptographically secure bootloader for RISC-V in Rust (150 pts)]]></title>
            <link>https://www.codethink.co.uk/articles/2024/secure_bootloader/</link>
            <guid>41161580</guid>
            <pubDate>Mon, 05 Aug 2024 14:18:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.codethink.co.uk/articles/2024/secure_bootloader/">https://www.codethink.co.uk/articles/2024/secure_bootloader/</a>, See on <a href="https://news.ycombinator.com/item?id=41161580">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
        <p><a href="https://github.com/LawrenceHunter/SentinelBoot">SentinelBoot</a> is a demonstrative, cryptographically secure <a href="https://riscv.org/">RISC-V</a> bootloader written in <a href="https://www.rust-lang.org/">Rust</a>. This project forms a final-year project at <a href="https://www.manchester.ac.uk/">The University of Manchester</a> sponsored by Codethink.</p>
<h2>Motivation</h2>
<p>Memory safety is a persistent issue in software, especially system software, such as bootloaders. Implementing some kinds of run-time safety checks can be very computationally expensive, as such, programming languages which employ them to promote memory safety are incompatible with system software due to performance degradation<sup id="fnref:1"><a href="#fn:1">1</a></sup>. That said, exploiting vulnerabilities that arise from a lack of memory safety leads to a myriad of issues, including data leaks, denial-of-service, and arbitrary code execution<sup id="fnref:2"><a href="#fn:2">2</a></sup>. Until recently, there has been no viable memory-safe alternative to C/C++/Assembly for such applications. However, the Rust programming language, which performs static analysis at compile time, has been presented as a viable alternative and has begun being explored for such applications, with projects such as <a href="https://rust-for-linux.com/">Rust for Linux</a>.</p>
<p>SentinelBoot is a cryptographically secure bootloader aimed at enhancing boot flow safety of RISC-V through memory-safe principles, predominantly leveraging the Rust programming language with its ownership, borrowing, and lifetime constraints. Additionally, SentinelBoot employs public-key cryptography to verify the integrity of a booted kernel (digital signature), by the use of the RISC-V Vector Cryptography extension, establishing secure boot functionality. SentinelBoot achieves these objectives with a 20.1% hashing overhead (approximately 0.27s additional runtime) when compared to an example U-Boot binary (mainline at time of development), and produces a resulting binary one-tenth the size of an example U-Boot binary with half the memory footprint.</p>
<h2>Background</h2>
<p>There are three main principles employed by Rust that aid in reducing the likelihood of memory safety vulnerabilities. Note, however, the keyword ‘reduce’: a developer can overrule these checks, and even then, vulnerabilities can still exist in allegedly 100% safe, non-overruled Rust code, they’re just less likely<sup id="fnref:3"><a href="#fn:3">3</a></sup>. The three principles are:</p>
<ol>
<li>
<p>Ownership: aims to ensure that a piece of memory has a single 'owner'. This is primarily to allow automatic deallocation when the owner goes out of scope, helping to prevent vulnerabilities such as memory leaks.</p>
</li>
<li>
<p>Borrowing: allows a variable that does not own a certain piece of memory to access the memory location, by 'borrowing' from the owner, helping to prevent vulnerabilities such as data races due to the two types of borrowing that exist:</p>
<ul>
<li>
<p>Non-mutable (shared) borrows, where the borrower can read the data in the memory location but not write to it, any number of non-mutable borrows can exist simultaneously.</p>
</li>
<li>
<p>Mutable (exclusive) borrows, where the borrower can read and write to the memory location. If a mutable borrow exists, no other borrows (mutable or non-mutable) may exist.</p>
</li>
</ul>
</li>
<li>
<p>Lifetimes: defines the 'duration' of a memory location (i.e. a variable has a lifetime from when it is declared to when it is last used) or of a borrow of that location (i.e. all borrows have a lifetime associated with them). This allows Rust to avoid using a garbage collector, as the memory location can be automatically deallocated when its lifetime expires, and it also allows the static analysis to determine if a program could be at risk of accessing a freed memory location, helping to prevent use-after-free errors.</p>
</li>
</ol>
<p>The Linux kernel's bootflow can be viewed as a sequential series of steps that load and execute the following stage, as seen below.</p>
<p><img alt="Kernel Bootflow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/bootflow.png"></p>
<h2>Threat Model</h2>
<p>SentinelBoot's threat model focuses on thin client devices which do not store their own OS and <a href="https://en.wikipedia.org/wiki/Over-the-air_update">over-the-air updates</a> (e.g. how phones are updated): both of these cases involve executable code being sent over a network, usually the internet. We ignore the risk of direct hardware modification, as an attacker can just swap out the bootloader (making any potential defence implemented by SentinelBoot in vain). Instead, SentinelBoot focuses on defending against a subclass of <a href="https://en.wikipedia.org/wiki/Social_engineering_(security)">social engineering</a> and <a href="https://en.wikipedia.org/wiki/Evil_maid_attack">Evil Maid</a> attack vectors, where the goal is to modify the root-of-trust. As well as defending against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-In-The-Middle</a> attacks which undermine secure communication, shown below. Finally, SentinelBoot aims to prevent exploitation by minimising memory safety vulnerabilities.</p>
<p><img alt="Man-In-The-Middle attack" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/mitm.png"></p>
<h2>Assembly to Rust</h2>
<p>Firstly, it is necessary to write a <a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html">linker script</a> to format the resulting binary into an <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF format</a>. Next, it is necessary to write RISC-V assembly to initialise hardware, including handling multiple hardware threads (HARTs), setting control and status registers, disabling interrupts, etc. The control flow is shown below.</p>
<p><img alt="Machine mode control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/mm_control_flow.png"></p>
<p>As a final-year university project, a decision was taken to limit the projects' scope by allowing U-Boot to perform <a href="https://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol">TFTP</a> operations on SentinelBoot's behalf. To support this decision, additional assembly was needed to handle executing from supervisor mode.</p>
<h2>'Unsafe' to 'Safe' Rust</h2>
<p>The assembly code has now jumped to the Rust entry point, which is nominally memory-safe. The next two steps in the initialisation - initialising a serial driver and a memory allocator - both require a lot of unsafe work, which can be done in Rust with an <code>unsafe</code> overrule (this tells the compiler that certain operations it would otherwise be unprepared to permit are acceptable and that the programmer has verified that at the end of the overrule block memory-safety rules are now being observed). After that, there is a symbolic change from this "unsafe" Rust to "truly safe" Rust.</p>
<p>The serial driver implements <a href="https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter">UART</a>, a simple protocol for asynchronous communication that groups data in frames according to an agreed configuration. The actual transmission is handled by a memory-mapped chip, so we need to set the configuration and wrap the raw register interactions with an API in order to enforce checks around unsafe operations. The control flow of the API is shown below.</p>
<p><img alt="Serial driver control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/serial_driver.png"></p>
<p>To allow dynamic memory allocation we need a memory allocator: doing so allows for more advanced data structures, such as vectors. By implementing the <a href="https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html">GlobalAlloc trait</a> and therefore facilitating more advanced data structures, SentinelBoot provides wider support for Rust crates. SentinelBoot implements a simple memory allocator based upon a doubly linked list of memory allocation structures. The doubly linked list data structure is useful as it allows bidirectional traversal of the data structure, allowing efficient amalgamation of allocations, as shown below.</p>
<p><img alt="Memory allocator amalgamation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/allocator_amalgamation.png"></p>
<p>Additionally, implementing the doubly linked list comes with its own problems: it violates Rust's borrowing rules as each allocation structure has mutable pointers to the next and previous structures, and therefore each structure is mutably borrowed twice. That said, it is possible to still safely implement the doubly linked list by wrapping the mutable borrows in a <a href="https://en.wikipedia.org/wiki/Lock_(computer_science)">mutex</a> and performing accesses through them, shown below; however, the project deadline meant this feature was not implemented, as SentinelBoot only runs on a single HART, so a race is not possible.</p>
<p><img alt="Memory allocator mutex" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/allocator_mutex.png"></p>
<h2>Verifying &amp; Booting</h2>
<p>Utilising a hashing function that provides properties such as <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">collision resistance, preimage resistance, and second pre-image resistance</a>, it is possible to be extremely confident of the integrity of a binary object. An example of a hashing algorithm that provides such properties is <a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a>, and therefore it was suitable for SentinelBoot. To hash the kernel we need to accurately determine the size of the kernel binary from just a pointer, as including a single extra memory location will completely change the result (due to the <a href="https://en.wikipedia.org/wiki/Avalanche_effect">avalanche effect</a>). Therefore, functionality to parse the kernel’s ELF header and sum the section sizes was required, shown below.</p>
<p><img alt="ELF binary parsing" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/elf_parsing.png"></p>
<p>Hashing only goes so far: if we are sent a binary and an accompanying hash, we can verify they match - ensuring integrity - however, we need to ensure authenticity too. Currently, an attacker can simply intercept the kernel, inject malicious code, rehash, and then forward the malicious kernel and valid hash for that malicious kernel to SentinelBoot.</p>
<p>Therefore, to enhance the security model, we can utilise <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">public key cryptography</a> (PKC). PKC utilises a pair of keys, one widely known and one secret, which are mathematically linked. Additionally, a <a href="https://en.wikipedia.org/wiki/Certificate_authority">trusted 3rd party</a> can verify the public key by using certificates. The operation of an example PKC system is shown below.</p>
<p><img alt="Public key cryptography operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/pkc.png"></p>
<p>This would allow us to fully encrypt the kernel binary, ensuring it cannot be altered without the secret key. However, PKC works on fixed block sizes, only <a href="https://mbed-tls.readthedocs.io/en/latest/kb/cryptography/rsa-encryption-maximum-data-size/">245 bytes for RSA</a>, and performs expensive mathematical operations with very large numbers - as such it is far too slow.</p>
<p>However, by modifying PKC slightly, we only need to encrypt a small chunk of data: when the server hashes the kernel it can encrypt the hash with its private key (this is a "<a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a>"). When SentinelBoot receives the hash, SentinelBoot will decrypt it with the server's public key (which can be verified by a certificate from a trusted 3rd party) to compare hashes, thereby authenticating the server (as an attacker would not be able to sign the kernel correctly without access to the server's private key). Further, as the hash could not have been re-encrypted, we also verify the integrity. This operation is shown below.</p>
<p><img alt="Digital signature operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/digital_signature.png"></p>
<p>Finally, once the kernel has been verified, we can <a href="https://github.com/torvalds/linux/blob/e33c4963bf536900f917fb65a687724d5539bc21/Documentation/arch/riscv/boot.rst">set up for the kernel jump</a> by setting <code>a0</code> to contain the <code>HARTID</code> and <code>a1</code> to contain the address of the DTB. After debugging using Ghidra to decompile the kernel, and then comparing the decompiled instructions against the control flow shown in GDB, it was possible to achieve full booting, as shown below.</p>
<p><img alt="Kernel successful boot" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/kernel_execution_handoff.png"></p>
<h2>Accelerating SHA256</h2>
<p>It is possible, due to <a href="https://www.codethink.co.uk/articles/2023/vcrypto_qemu/">support in QEMU</a>, to emulate the RISC-V Vector Cryptography extension to 'accelerate' the SHA256 hashing of the kernel. The QEMU implementation is not optimised for speed, however, the extension is fully supported and therefore demonstrates functionality for future hardware support. The extension utilises <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> principles to improve throughput.</p>
<p><img alt="SIMD operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/simd.png">
<img alt="SISD operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/sisd.png"></p>
<p>As the <a href="https://wiki.riscv.org/display/HOME/Vector+Crypto+Standardization+Status+Summary">extension was only ratified in September 2023</a>, tooling is still in its infancy, so the vector cryptography assembly instructions had to be pre-assembled to be included.</p>
<p><img alt="Vector Cryptography instruction assembly" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/assembling.png"></p>
<p>With the assembly instructions pre-assembled, the raw binary word could be included into Rust. Finally, the full SHA256 algorithm had to be implemented in vector cryptography assembly where the control flow operated on 512 bit chunks with 16 quad rounds. The SHA256 algorithm control flow is shown below.</p>
<p><img alt="SHA2 control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/sha2.png"></p>
<h2>Continuous Integration</h2>
<p>Throughout the development process, <a href="https://docs.github.com/en/actions">GitHub actions</a> were employed to verify all of SentinelBoot's targets were buildable, the code met <a href="https://doc.rust-lang.org/stable/clippy/usage.html">clippy</a> standards, and that SentinelBoot executed as expected both under emulation and on a <a href="https://www.starfivetech.com/en/site/boards">VisionFive 2</a> connected to a Raspberry Pi which acted as a rig controller.</p>
<h2>Analysis</h2>
<p>SentinelBoot achieves the secure boot mechanism with only a 20.1% performance overhead, compared to an example U-Boot binary.</p>
<p><img alt="Performance analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/performance.png"></p>
<p>Secondly, ~80% of lines were marked safe for the serial hashing implementation and ~68% of lines marked safe for vector cryptography implementation (due to SHA256 needing to be implemented in assembly).</p>
<p><img alt="Safe line serial analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/safe_line_serial.png">
<img alt="Safe line vector cryptography analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/safe_line_vector.png"></p>
<p>Thirdly, SentinelBoot's resulting binary is approximately one-tenth the size of an example U-Boot binary at about 70kB.</p>
<table>
<thead>
<tr>
<th>Target</th>
<th>Binary Size (kB)</th>
</tr>
</thead>
<tbody>
<tr>
<td>QEMU</td>
<td>73.824</td>
</tr>
<tr>
<td>QEMU Vector Cryptography</td>
<td>61.504</td>
</tr>
<tr>
<td>Visionfive 2</td>
<td>73.824</td>
</tr>
<tr>
<td>HiFive Unmatched</td>
<td>73.824</td>
</tr>
<tr>
<td>U-Boot example</td>
<td>742.70</td>
</tr>
</tbody>
</table>
<p>Finally, SentinelBoot compiles in approximately one-quarter the time of an example U-Boot binary, compiled with -j8, whereas Rust's toolchain does not fully utilise parallelism yet.</p>
<p><img alt="Compile time analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/compile_time.png"></p>
<h2>Conclusion</h2>
<p>By developing SentinelBoot, the utilisation of the Rust programming language (and memory-safe principles) to improve the memory safety of RISC-V bootflow has been shown, all while additionally implementing a cryptographic secure boot mechanism. SentinelBoot is able to execute both on hardware and under emulation, where the SHA256 implementation in QEMU is accelerated via the RISC-V Vector Cryptography extension. SentinelBoot achieves this functionality with ~80% of serial and ~68% vector cryptography safe line proportions. Even with the additional functionality and safety provided by SentinelBoot, when compared to an example U-Boot binary, SentinelBoot is one-tenth the size with only a 20.1% performance overhead.</p>
<h3>Concluding Remarks</h3>
<p>This blog post summarises the <a href="https://lawrencehunter.github.io/SentinelBoot-Thesis/SentinelBoot.pdf">SentinelBoot Thesis</a> and the corresponding <a href="https://github.com/LawrenceHunter/SentinelBoot">SentinelBoot GitHub</a>. Additionally, if you'd like to discuss RISC-V or Codethink's work in Rust, contact <a href="mailto:sales@codethink.co.uk">sales@codethink.co.uk</a>.</p>

    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Pie Menu – a radial menu for macOS (209 pts)]]></title>
            <link>https://www.pie-menu.com/</link>
            <guid>41160268</guid>
            <pubDate>Mon, 05 Aug 2024 11:38:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pie-menu.com/">https://www.pie-menu.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41160268">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Are you a shortcut illiterate like me?</p><p>You accept that shortcuts will make you more effective, but you can't remember them or mix up the shortcuts from other programs.</p><p>Shortcuts deserves some love. A rethink.</p><p>With Pie Menu, I've done just that. I've distilled shortcuts until they couldn't be more simple. </p><p>How is that possible? Well, you only have to remember one special shortcut for all of your programs. The best part is that you can pick your own favorite combination!</p><p>When you trigger your perfect shortcut, a menu opens around your cursor. Your favorite shortcuts for that app are available like a menu of pies around your mouse. Try it out now by holding ⇧ + z.</p><p>Are you using another program? Same shortcut to open the menu, different shortcuts to choose from!</p><p>What are you waiting for? <br><a href="https://apps.apple.com/app/apple-store/id1631568126?pt=124155388&amp;ct=pie-menu-website&amp;mt=8">Download Pie Menu and start saving time immediately.</a></p><div><p><img src="https://www.pie-menu.com/hauken-portrait.webp?22" alt="Marius Hauken" height="150" width="150" loading="lazy"></p><div><p><img src="https://www.pie-menu.com/hauken.png" height="88" width="162" alt="Hauken signatur" loading="lazy"></p><p><strong>Marius Hauken</strong> <br>Creator of Pie Menu</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Intelligence beta flagged a phishing email as "Priority" (208 pts)]]></title>
            <link>https://social.panic.com/@cabel/112905175504595751</link>
            <guid>41159680</guid>
            <pubDate>Mon, 05 Aug 2024 10:12:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://social.panic.com/@cabel/112905175504595751">https://social.panic.com/@cabel/112905175504595751</a>, See on <a href="https://news.ycombinator.com/item?id=41159680">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Japan's Nikkei Posts Biggest Single-Day Fall Since 1987 After Weak U.S. Data (105 pts)]]></title>
            <link>https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f</link>
            <guid>41159372</guid>
            <pubDate>Mon, 05 Aug 2024 09:05:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f">https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f</a>, See on <a href="https://news.ycombinator.com/item?id=41159372">Hacker News</a></p>
Couldn't get https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Postgres stores data on disk – this one's a page turner (488 pts)]]></title>
            <link>https://drew.silcock.dev/blog/how-postgres-stores-data-on-disk/</link>
            <guid>41159180</guid>
            <pubDate>Mon, 05 Aug 2024 08:28:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://drew.silcock.dev/blog/how-postgres-stores-data-on-disk/">https://drew.silcock.dev/blog/how-postgres-stores-data-on-disk/</a>, See on <a href="https://news.ycombinator.com/item?id=41159180">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <p>I remember when I first started on server-side applications – the kind that need to persist data – and not getting what the big deal about databases was. Why are databases such a big thing? Can’t we just store some data on disk and read / write from it when we need to? (<strong>Spoiler:</strong> no.)</p>
<p>Once I started working with real-life applications instead of just hobby projects, I realised that databases are basically magic, and SQL is the arcane tongue that allows you to channel that magic. In fact, it’s easy to think of databases like a black box where you make sure your tables are indexed sensibly and your queries aren’t doing anything silly, and the rest <em>just happens</em>.</p>
<p>But really, databases aren’t <em>that</em> complicated. I mean, they kind of are but if you dig inside the database engine a bit, you realise that it’s really just some immensely powerful and clever abstractions and that, like most software, most of the actual complexity in these pieces of software comes from the edge cases, often around concurrency.</p>
<p>I’d like crack open the hard shell of database engines with some friendly introductions to those who are familiar with relational databases but don’t know their inner machinations. I’m going to talk about PostgreSQL because that’s what I’m most familiar with, and it’s also the most popular database in use by developers according to the <a href="https://survey.stackoverflow.co/2023/#section-most-popular-technologies-databases">Stack Overflow Developer Survey 2023</a> and <a href="https://survey.stackoverflow.co/2024/technology#1-databases">Stack Overflow Developer Survey 2024</a>.</p>
<p>To start things off, I’m going to discuss how Postgres actually stores data on disk. I mean, it’s all just files, right?</p>
<h2 id="loading-a-nice-fresh-postgres-install">Loading a nice fresh Postgres install</h2>
<p>Postgres stores all its data in a directory sensibly called <code>/var/lib/postgresql/data</code> <sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup> . Let’s spin up an empty Postgres installation with Docker and mount the data directory in a local folder so that we can see what’s going on in there. (Feel free to follow along and explore the files for yourself!)</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>docker</span><span> </span><span>run</span><span> </span><span>--rm</span><span> </span><span>-v</span><span> </span><span>./pg-data:/var/lib/postgresql/data</span><span> </span><span>-e</span><span> </span><span>POSTGRES_PASSWORD=password</span><span> </span><span>postgres:16</span></p></div></code></pre></figure></div>
<p>You should see a bunch of text saying all kinds of interesting things like <code>selecting dynamic shared memory implementation ... posix</code> and <code>performing post-bootstrap initialization ... ok</code> and then eventually <code>LOG:  database system is ready to accept connections</code>. Now kill the server with ctrl-C so that we can have a look at what files have been created.</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l pg-data</span></p></div><div><div><p>2</p></div><p><span>drwx------     -   base/</span></p></div><div><div><p>3</p></div><p><span>drwx------     -   global/</span></p></div><div><div><p>4</p></div><p><span>drwx------     -   pg_commit_ts/</span></p></div><div><div><p>5</p></div><p><span>drwx------     -   pg_dynshmem/</span></p></div><div><div><p>6</p></div><p><span>.rw-------@ 5.7k   pg_hba.conf</span></p></div><div><div><p>7</p></div><p><span>.rw-------@ 2.6k   pg_ident.conf</span></p></div><div><div><p>8</p></div><p><span>drwx------     -   pg_logical/</span></p></div><div><div><p>9</p></div><p><span>drwx------     -   pg_multixact/</span></p></div><div><div><p>10</p></div><p><span>drwx------     -   pg_notify/</span></p></div><div><div><p>11</p></div><p><span>drwx------     -   pg_replslot/</span></p></div><div><div><p>12</p></div><p><span>drwx------     -   pg_serial/</span></p></div><div><div><p>13</p></div><p><span>drwx------     -   pg_snapshots/</span></p></div><div><div><p>14</p></div><p><span>drwx------     -   pg_stat/</span></p></div><div><div><p>15</p></div><p><span>drwx------     -   pg_stat_tmp/</span></p></div><div><div><p>16</p></div><p><span>drwx------     -   pg_subtrans/</span></p></div><div><div><p>17</p></div><p><span>drwx------     -   pg_tblspc/</span></p></div><div><div><p>18</p></div><p><span>drwx------     -   pg_twophase/</span></p></div><div><div><p>19</p></div><p><span>.rw-------     3   PG_VERSION</span></p></div><div><div><p>20</p></div><p><span>drwx------     -   pg_wal/</span></p></div><div><div><p>21</p></div><p><span>drwx------     -   pg_xact/</span></p></div><div><div><p>22</p></div><p><span>.rw-------@   88   postgresql.auto.conf</span></p></div><div><div><p>23</p></div><p><span>.rw-------@  30k   postgresql.conf</span></p></div><div><div><p>24</p></div><p><span>.rw-------    36   postmaster.opts</span></p></div></code></pre></figure></div>
<p>There’s a lot of folders here, but if you look, most of them are empty.</p>
<p>Before we dig into these, a quick terminology overview:</p>

















































<table><thead><tr><th>Term</th><th>Meaning</th></tr></thead><tbody><tr><td>Database cluster</td><td>The term ‘cluster’ is a bit overloaded here - we’re using it the <a href="https://www.postgresql.org/docs/current/creating-cluster.html">same way that the Postgres docs use it</a>, meaning a single instance of a PostgreSQL server which is running multiple databases on the same machine (where each database is created with <code>create database mydbname</code>).</td></tr><tr><td>Database connection</td><td>When a client connects to the Postgres server, it initiates a database connection. When this happens, Postgres creates a sub-process on the server.</td></tr><tr><td>Database session</td><td>Once the connection has been authenticated, the client has established a session, which it can then use to execute SQL.</td></tr><tr><td>Transaction a.k.a. tx, xact</td><td>SQL is executed within the session inside transactions, which are units of work which are executed, committed and succeed or fail as a single unit of work. If a transaction fails, it is rolled back and all the changes made in the transaction are undone.</td></tr><tr><td>Snapshot</td><td>Each transaction sees its own copy of the database, called its snapshot. If you have multiple sessions reading and writing the same data at the same time, they will in general not see the exact same data but will see different snapshots depending on the exact timing of the transactions. It’s possible to synchronise and export snapshots.</td></tr><tr><td>Schema</td><td>A database consists of multiple schemas (or <em>schemata</em>, if you’re being pretentious), each of which is a logical namespace for tables, functions, triggers and every thing that databases store. The default schema is called <code>public</code> and if you don’t specify a schema, it’s the same as manually specifying <code>public</code>.</td></tr><tr><td>Table</td><td>A database consists of multiple tables, each of which represents a single unordered collection of items with a particular number of columns, each of a specific type.</td></tr><tr><td>Tablespace</td><td>A tablespace is a physical separation (as opposed to schemas, which are a logical separation). We’ll see more about tablespaces later.</td></tr><tr><td>Row</td><td>A table consists of multiple unordered rows, each of which is a single collection of data points defining a specific <em>thing</em>.</td></tr><tr><td>Tuple</td><td>A tuple is very similar to a row, but a tuple is immutable. The state of a specific row at a specific time is a tuple, but a tuple is a more general term for a collection of data points. When you return data from a query, you can get tuples.</td></tr></tbody></table>
<p>Now let’s do a quick overview of what all these top-level files and folders are for. You don’t need to worry about every single one of these – most of them cover more complicated use cases, which is why they’re empty for us – but I still think it’s interesting to know what each files and folder is for.</p>





































































































<table><thead><tr><th>Directory</th><th>Explanation</th></tr></thead><tbody><tr><td><code>  base/</code></td><td>Contains a subdirectory for each database. Inside each sub-directory are the files with the actual data in them. We’ll dig into this more in a second.</td></tr><tr><td><code>  global/</code></td><td>Directly contains files for cluster-wide tables like <code>pg_database</code>.</td></tr><tr><td><code>  pg_commit_ts/</code></td><td>As the name suggests, contains timestamps for transaction commits. We don’t have any commits or transactions yet, so this is empty.</td></tr><tr><td><code>  pg_dynshmem/</code></td><td>Postgres uses multiple processes (not multiple threads, although there has been <a href="https://www.postgresql.org/message-id/31cc6df9-53fe-3cd9-af5b-ac0d801163f4%40iki.fi">discussion around it</a>) so in order to share memory between processes, Postgres has a dynamic shared memory subsystem. This can use <a href="https://man7.org/linux/man-pages/man3/shm_open.3.html"><code>shm_open</code></a>, <a href="https://man7.org/linux/man-pages/man2/shmget.2.html"><code>shmget</code></a> or <a href="https://man7.org/linux/man-pages/man2/mmap.2.html"><code>mmap</code></a> on Linux – by default it uses <code>shm_open</code>. The shared memory object files are stored in this folder.</td></tr><tr><td><code>  pg_hba.conf</code></td><td>This is the <a href="https://www.postgresql.org/docs/current/auth-pg-hba-conf.html">Host-Based Authentication (HBA) file</a> which allows you to configure access to your cluster based on hostname. For instance, by default this file has <code>host all all 127.0.0.1/32 trust</code> which means “trust anyone connecting to any database without a password if they’re connecting from localhost”. If you’ve ever wondered why you don’t need to put your password in when running <code>psql</code> on the same machine as the server, this is why.</td></tr><tr><td><code>  pg_ident.conf</code></td><td>This is a <a href="https://www.postgresql.org/docs/current/auth-username-maps.html">user name mapping file</a> which isn’t particularly interesting for our purposes.</td></tr><tr><td><code>  pg_logical/</code></td><td>Contains status data for logical decoding. We don’t have time to talk about how the Write-Ahead Log (WAL) works in full, but in short, Postgres writes changes that it’s going to make to the WAL, then if it crashes it can just re-read and re-run all the operations in the WAL to get back to the expected database state. The process of turning the WAL back into the high-level operations – for the purposes of recovery, replication, or auditing –  is called logical decoding and Postgres stores files related to this process in here.</td></tr><tr><td><code>  pg_multixact/</code></td><td>”xact” is what the Postgres calls transactions so this contains status data for multitransactions. Multitransactions are a <a href="https://www.highgo.ca/2020/06/12/transactions-in-postgresql-and-their-mechanism/">thing that happens when you’ve got multiple sessions</a> who are all trying to do a row-level lock on the same rows.</td></tr><tr><td><code>  pg_notify/</code></td><td>In Postgres you can <a href="https://tapoueh.org/blog/2018/07/postgresql-listen-notify/">listen for changes on a channel and notify listeners of changes</a>. This is useful if you have an application that wants to action something whenever a particular event happens. For instance, if you have an application that wants to know every time a row is added or updated in a particular table so that it can synchronise with an external system. You can set up a trigger which notifies all the listeners whenever this change occurs. Your application can then listen for that notification and update the external data store however it wants to.</td></tr><tr><td><code>  pg_replslot/</code></td><td>Replication is the mechanism by which databases can synchronise between multiple running server instances. For instance, if you have some really important data that you don’t want to lose, you could set up a couple of replicas so that if your main database dies and you lose all your data, you can recover from one of the replicas. This can be physical replication (literally copying disk files) and logical replication (basically copying the WAL to all the replicas so that the main database can eb reconstructed from the replica’s WAL via logical decoding.) This folder contains data for the various replication slots, which are a way of ensuring WAL entries are kept for particular replicas even when it’s not needed by the main database.</td></tr><tr><td><code>  pg_serial/</code></td><td>Contains information on committed serialisable transactions. Serialisable transactions are the highest level of strictness for transaction isolation, which you can read more about <a href="https://www.postgresql.org/docs/current/transaction-iso.html">in the docs</a>.</td></tr><tr><td><code>  pg_snapshots/</code></td><td>Contains exported snapshots, used e.g. by <code>pg_dump</code> which can dump a database in parallel.</td></tr><tr><td><code>  pg_stat/</code></td><td>Postgres calculates statistics for the various tables which it uses to inform sensible query plans and plan executions. For instance, if the query planner knows it needs to do a sequential scan across a table, it can look at approximately how many rows are in that table to determine how much memory should be allocated. This folder contains permanent statistics files calculated form the tables. Understanding statistics is really important to analysing and fixing poor query performance.</td></tr><tr><td><code>  pg_stat_tmp/</code></td><td>Similar to <code>pg_stat/</code> apart from this folder contains temporary files relating to the statistics that Postgres keeps, not the permanent files.</td></tr><tr><td><code>  pg_subtrans/</code></td><td>Subtransactions are another kind of transaction, like multitransactions. They’re a way to split a single transaction into multiple smaller subtransactions, and this folder contains status data for them.</td></tr><tr><td><code>  pg_tblspc/</code></td><td>Contains symbolic references to the different tablespaces. A <a href="https://www.postgresql.org/docs/current/manage-ag-tablespaces.html">tablespace</a> is a physical location which can be used to store some of the database objects, as configured by the DB administrator. For instance, if you have a really frequently used index, you could use a tablespace to put that index on a super speedy expensive solid state drive while the rest of the table sits on a cheaper, slower disk.</td></tr><tr><td><code>  pg_twophase/</code></td><td>It’s possible to <a href="https://www.postgresql.org/docs/current/sql-prepare-transaction.html">“prepare”</a> transactions, which means that the transaction is dissociated from the current session and is stored on disk. This is useful for two-phase commits, where you want to commit changes to multiple systems at the same time and ensure that both transactions either fail and rollback or succeed and commit</td></tr><tr><td><code>  PG_VERSION</code></td><td>This one’s easy – it’s got a single number in which is the major version of Postgres we’re in, so in this case we’d expect this to have the number <code>16</code> in.</td></tr><tr><td><code>  pg_wal/</code></td><td>This is where the Write-Ahead Log (WAL) files are stored.</td></tr><tr><td><code>  pg_xact/</code></td><td>Contains status data for transaction commits, i.e. metadata logs.</td></tr><tr><td><code>  postgresql.auto.conf</code></td><td>This contains server configuration parameters, like <code>postgresql.conf</code>, but is automatically written to by <code>alter system</code> commands, which are SQL commands that you can run to dynamically modify server parameters.</td></tr><tr><td><code>  postgresql.conf</code></td><td>This file contains all the possible server parameters you can configure for a Postgres instance. This goes all the way from <code>autovacuum_naptime</code> to <code>zero_damaged_pages</code>. If you want to understand all the possible Postgres server parameters and what they do in human language, I’d highly recommend checking out <a href="https://postgresqlco.nf/">postgresqlco.nf</a></td></tr><tr><td><code>  postmaster.opts</code></td><td>This simple file contains the full CLI command used to invoke Postgres the last time that it was run.</td></tr></tbody></table>
<p>There’s also a file called <code>postmaster.pid</code> which you only see while the Postgres process is actively running, which contains information about the postmaster process ID, what port its listening on, what time it started, etc. We won’t see that here because we stopped our Postgres server to examine the files.</p>
<p>So that was quite intense – don’t worry if you didn’t fully understand what all those things mean – it’s all super interesting stuff but you don’t need to follow most of that to understand what we’re going to talk about, which is the actual database storage.</p>
<h2 id="exploring-the-database-folders">Exploring the database folders</h2>
<p>Okay, so we mentioned the <code>base/</code> directory above, which has a subdirectory for each individual database in your cluster. Let’s take a look at what we’ve got here:</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l pg-data/base</span></p></div><div><div><p>2</p></div><p><span>drwx------ -   1/</span></p></div><div><div><p>3</p></div><p><span>drwx------ -   4/</span></p></div><div><div><p>4</p></div><p><span>drwx------ -   5/</span></p></div></code></pre></figure></div>
<p>Wait, why are there already 3 folders in here? We haven’t even created any databases yet.</p>
<p>The reason is that when you start up a fresh Postgres server, Postgres will automatically create 3 databases for you. They are:</p>
<ul>
<li><code>postgres</code> – when you connect to a server, you need the name of a database to connect to, but you don’t always know what the name is. This is also true of database management tools. While it’s not strictly necessary, you can almost always rely on the <code>postgres</code> database existing – once you’ve connected to this empty, default database, you can list all the other databases on the server, create new databases, and so on.</li>
<li><code>template0</code>, <code>template1</code> – as the name suggests, these databases are templates used to create future databases.</li>
</ul>
<p>Why are the subdirectories called numbers instead of names?</p>
<p>Well in Postgres, all the system tables for things like namespaces, roles, tables and functions use an Object IDentifier (OID) to identify them. In this case, <code>1</code>, <code>4</code> and <code>5</code> are the OIDs for <code>postgres</code>, <code>template0</code> and <code>template1</code>.</p>
<h2 id="lets-play-with-some-data">Let’s play with some data</h2>
<p>These in-built tables don’t have anything in them and are generally pretty boring, so let’s create ourselves a new database and put them data in so that we can examine the data files themselves.</p>
<p>First, let’s run and detach the Postgres container so that we can query it.</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>docker</span><span> </span><span>run</span><span> </span><span>-d</span><span> </span><span>--rm</span><span> </span><span>-v</span><span> </span><span>./pg-data:/var/lib/postgresql/data</span><span> </span><span>-e</span><span> </span><span>POSTGRES_PASSWORD=password</span><span> </span><span>postgres:16</span></p></div></code></pre></figure></div>
<p>We could use anything as our play dataset, but I like geography so let’s make a table with some countries in. Let’s download some country data into our container and load it into a new database.</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>curl</span><span> </span><span>'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv'</span><span> </span><span>\</span></p></div><div><div><p>2</p></div><p><span>    </span><span>--output</span><span> </span><span>./pg-data/countries.csv</span></p></div></code></pre></figure></div>
<p>We can use a local tool like psql or TablePlus to examine the database, but we’re going to just exec into the container and use psql from inside the container. This way, we don’t have to worry about mapping ports or mismatching psql and Postgres server versions. (Also, it’s easier for everyone to follow along at home.)</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>pg_container_id</span><span>=</span><span>$(</span><span>docker</span><span> </span><span>ps</span><span> </span><span>--filter</span><span> </span><span>expose=</span><span>5432</span><span> </span><span>--format</span><span> </span><span>"{{.ID}}"</span><span>)</span></p></div><div><div><p>2</p></div><p><span>docker</span><span> </span><span>exec</span><span> </span><span>-it</span><span> $pg_container_id </span><span>psql</span><span> </span><span>-U</span><span> </span><span>postgres</span></p></div></code></pre></figure></div>
<p>Here we’re getting the container ID of the running Postgres container by filtering by containers which expose port 5432 as Postgres does and putting that into the <code>docker exec</code> command to give us an interactive psql shell. The <code>-U postgres</code> is because the default Postgres user in the official Docker image is <code>postgres</code>, not <code>root</code> which is the psql default.</p>
<p>If that works, you should see something like:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>psql (</span><span>16</span><span>.</span><span>3</span><span> (Debian </span><span>16</span><span>.</span><span>3</span><span>-</span><span>1</span><span>.pgdg120</span><span>+</span><span>1</span><span>))</span></p></div><div><div><p>2</p></div><p><span>Type</span><span> </span><span>"help"</span><span> </span><span>for</span><span> help.</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>postgres</span><span>=</span><span>#</span></p></div></code></pre></figure></div>
<p>Now let’s create our new database and load the data in: <sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup></p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>create</span><span> </span><span>database</span><span> </span><span>blogdb</span><span>;</span></p></div><div><div><p>2</p></div><p><span>\c blogdb;</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>create</span><span> </span><span>table</span><span> </span><span>countries</span><span> (</span></p></div><div><div><p>5</p></div><p><span><span>  </span></span><span>id </span><span>integer</span><span> </span><span>primary key</span><span> </span><span>generated</span><span> </span><span>always</span><span> </span><span>as</span><span> </span><span>identity</span><span>,</span></p></div><div><div><p>6</p></div><p><span>  </span><span>name</span><span> </span><span>text</span><span> </span><span>not null</span><span> </span><span>unique</span><span>,</span></p></div><div><div><p>7</p></div><p><span><span>  </span></span><span>alpha_2 </span><span>char</span><span>(</span><span>2</span><span>) </span><span>not null</span><span>,</span></p></div><div><div><p>8</p></div><p><span><span>  </span></span><span>alpha_3 </span><span>char</span><span>(</span><span>3</span><span>) </span><span>not null</span><span>,</span></p></div><div><div><p>9</p></div><p><span><span>  </span></span><span>numeric_3 </span><span>char</span><span>(</span><span>3</span><span>) </span><span>not null</span><span>,</span></p></div><div><div><p>10</p></div><p><span><span>  </span></span><span>iso_3166_2 </span><span>text</span><span> </span><span>not null</span><span>,</span></p></div><div><div><p>11</p></div><p><span><span>  </span></span><span>region </span><span>text</span><span>,</span></p></div><div><div><p>12</p></div><p><span><span>  </span></span><span>sub_region </span><span>text</span><span>,</span></p></div><div><div><p>13</p></div><p><span><span>  </span></span><span>intermediate_region </span><span>text</span><span>,</span></p></div><div><div><p>14</p></div><p><span><span>  </span></span><span>region_code </span><span>char</span><span>(</span><span>3</span><span>),</span></p></div><div><div><p>15</p></div><p><span><span>  </span></span><span>sub_region_code </span><span>char</span><span>(</span><span>3</span><span>),</span></p></div><div><div><p>16</p></div><p><span><span>  </span></span><span>intermediate_region_code </span><span>char</span><span>(</span><span>3</span><span>)</span></p></div><div><div><p>17</p></div><p><span>);</span></p></div><div><p>18</p></div><div><div><p>19</p></div><p><span>copy</span><span> countries (</span></p></div><div><div><p>20</p></div><p><span>  </span><span>name</span><span>,</span></p></div><div><div><p>21</p></div><p><span><span>  </span></span><span>alpha_2,</span></p></div><div><div><p>22</p></div><p><span><span>  </span></span><span>alpha_3,</span></p></div><div><div><p>23</p></div><p><span><span>  </span></span><span>numeric_3,</span></p></div><div><div><p>24</p></div><p><span><span>  </span></span><span>iso_3166_2,</span></p></div><div><div><p>25</p></div><p><span><span>  </span></span><span>region,</span></p></div><div><div><p>26</p></div><p><span><span>  </span></span><span>sub_region,</span></p></div><div><div><p>27</p></div><p><span><span>  </span></span><span>intermediate_region,</span></p></div><div><div><p>28</p></div><p><span><span>  </span></span><span>region_code,</span></p></div><div><div><p>29</p></div><p><span><span>  </span></span><span>sub_region_code,</span></p></div><div><div><p>30</p></div><p><span><span>  </span></span><span>intermediate_region_code</span></p></div><div><div><p>31</p></div><p><span>)</span></p></div><div><div><p>32</p></div><p><span>from</span><span> </span><span>'/var/lib/postgresql/data/countries.csv'</span></p></div><div><div><p>33</p></div><p><span>delimiter </span><span>','</span><span> csv header;</span></p></div><div><p>34</p></div><div><div><p>35</p></div><p><span>-- Check that the data got loaded into the table ok.</span></p></div><div><div><p>36</p></div><p><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> countries </span><span>limit</span><span> </span><span>10</span><span>;</span></p></div><div><p>37</p></div><div><div><p>38</p></div><p><span>-- Should say 249.</span></p></div><div><div><p>39</p></div><p><span>select</span><span> </span><span>count</span><span>(</span><span>*</span><span>) </span><span>from</span><span> countries;</span></p></div></code></pre></figure></div>
<p>Great, so we’ve got a table with 249 rows and a single index corresponding to our unique constraint on the <code>name</code> column.</p>
<h2 id="show-me-the-files">Show me the files</h2>
<p>Let’s take another look at our <code>base/</code> folder:</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l pg-data/base</span></p></div><div><div><p>2</p></div><p><span>drwx------ -   1/</span></p></div><div><div><p>3</p></div><p><span>drwx------ -   4/</span></p></div><div><div><p>4</p></div><p><span>drwx------ -   5/</span></p></div><div><div><p>5</p></div><p><span>drwx------ -   16388/</span></p></div></code></pre></figure></div>
<p>In this case it’s pretty obvious that our <code>blogdb</code> is <code>16388</code> but if you’re working with loads of database on the same cluster, you might not know. If you’re following along from home, it probably has a different value. If you want to find out, simply do:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>postgres</span><span>=</span><span># </span><span>select</span><span> </span><span>oid</span><span>, datname </span><span>from</span><span> pg_database;</span></p></div><div><div><p>2</p></div><p><span>  </span><span>oid</span><span>  |  datname</span></p></div><div><div><p>3</p></div><p><span>-------+-----------</span></p></div><div><div><p>4</p></div><p><span>     </span><span>5</span><span> | postgres</span></p></div><div><div><p>5</p></div><p><span> </span><span>16388</span><span> | blogdb</span></p></div><div><div><p>6</p></div><p><span>     </span><span>1</span><span> | template1</span></p></div><div><div><p>7</p></div><p><span>     </span><span>4</span><span> | template0</span></p></div><div><div><p>8</p></div><p><span>(</span><span>4</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>Let’s have a peek at what’s inside this folder:</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ cd pg-data/base/16388</span></p></div><div><div><p>2</p></div><p><span>$ ls -l </span><span>.</span></p></div><div><div><p>3</p></div><p><span>.rw------- 8.2k   112</span></p></div><div><div><p>4</p></div><p><span>.rw------- 8.2k   113</span></p></div><div><div><p>5</p></div><p><span>.rw------- 8.2k   174</span></p></div><div><div><p>6</p></div><p><span>.rw------- 8.2k   175</span></p></div><div><div><p>7</p></div><p><span>.rw------- 8.2k   548</span></p></div><div><div><p>8</p></div><p><span>.rw------- 8.2k   549</span></p></div><div><div><p>9</p></div><p><span>.rw-------    0   826</span></p></div><div><div><p>10</p></div><p><span>.rw------- 8.2k   827</span></p></div><div><div><p>11</p></div><p><span>.rw------- 8.2k   828</span></p></div><div><div><p>12</p></div><p><span>.rw------- 123k   1247</span></p></div><div><div><p>13</p></div><p><span>.rw-------  25k   1247_fsm</span></p></div><div><div><p>14</p></div><p><span>.rw------- 8.2k   1247_vm</span></p></div><div><div><p>15</p></div><p><span>.rw------- 475k   1249</span></p></div><div><div><p>16</p></div><p><span>.rw-------  25k   1249_fsm</span></p></div><div><div><p>17</p></div><p><span>...</span></p></div><div><div><p>18</p></div><p><span>.rw-------  25k   16390_fsm</span></p></div><div><div><p>19</p></div><p><span>.rw-------    0   16393</span></p></div><div><div><p>20</p></div><p><span>.rw------- 8.2k   16394</span></p></div><div><div><p>21</p></div><p><span>.rw-------  16k   16395</span></p></div><div><div><p>22</p></div><p><span>.rw-------  16k   16397</span></p></div><div><div><p>23</p></div><p><span>.rw-------  524   pg_filenode.map</span></p></div><div><div><p>24</p></div><p><span>.rw------- 160k   pg_internal.init</span></p></div><div><div><p>25</p></div><p><span>.rw-------    3   PG_VERSION</span></p></div><div><div><p>26</p></div><p><span>$ ls -l </span><span>|</span><span> </span><span>wc</span><span> </span><span>-l</span></p></div><div><div><p>27</p></div><p><span>306</span></p></div><div><div><p>28</p></div><p><span>$ du -h </span><span>.</span></p></div><div><div><p>29</p></div><p><span>7.6M    .</span></p></div></code></pre></figure></div>
<p>There’s a surprising number of files in there considering we’ve only got 249 rows. So what’s going on?</p>
<p>There are a few useful system catalogs that we can use to make sense of this:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>-- First, let's get the OID of the 'public' namespace that our table lives in - you need</span></p></div><div><div><p>2</p></div><p><span>-- to run this in the 'blogdb' database, otherwise you'll get the OID of the 'public'</span></p></div><div><div><p>3</p></div><p><span>-- namespace for the database you're currently connected to.</span></p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> to_regnamespace(</span><span>'public'</span><span>)::</span><span>oid</span><span>;</span></p></div><div><div><p>5</p></div><p><span><span> </span></span><span>to_regnamespace</span></p></div><div><div><p>6</p></div><p><span>-----------------</span></p></div><div><div><p>7</p></div><p><span>            </span><span>2200</span></p></div><div><div><p>8</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span>-- Now let's list all the tables, indexes, etc. that live in this namespace.</span></p></div><div><div><p>11</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> pg_class</span></p></div><div><div><p>12</p></div><p><span>blogdb</span><span>-</span><span># </span><span>where</span><span> relnamespace </span><span>=</span><span> to_regnamespace(</span><span>'public'</span><span>)::</span><span>oid</span><span>;</span></p></div><div><div><p>13</p></div><p><span>  </span><span>oid</span><span>  |      relname       | relnamespace | reltype | reloftype | relowner | relam | relfilenode | reltablespace | relpages | reltuples | relallvisible | reltoastrelid | relhasindex | relisshared | relpersistence | relkind | relnatts | relchecks | relhasrules | relhastriggers | relhassubclass | relrowsecurity | relforcerowsecurity | relispopulated | relreplident | relispartition | relrewrite | relfrozenxid | relminmxid | relacl | reloptions | relpartbound</span></p></div><div><div><p>14</p></div><p><span>-------+--------------------+--------------+---------+-----------+----------+-------+-------------+---------------+----------+-----------+---------------+---------------+-------------+-------------+----------------+---------+----------+-----------+-------------+----------------+----------------+----------------+---------------------+----------------+--------------+----------------+------------+--------------+------------+--------+------------+--------------</span></p></div><div><div><p>15</p></div><p><span> </span><span>16389</span><span> | countries_id_seq   |         </span><span>2200</span><span> |       </span><span>0</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |     </span><span>0</span><span> |       </span><span>16389</span><span> |             </span><span>0</span><span> |        </span><span>1</span><span> |         </span><span>1</span><span> |             </span><span>0</span><span> |             </span><span>0</span><span> | f           | f           | p              | S       |        </span><span>3</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | n            | f              |          </span><span>0</span><span> |            </span><span>0</span><span> |          </span><span>0</span><span> |        |            |</span></p></div><div><div><p>16</p></div><p><span> </span><span>16390</span><span> | countries          |         </span><span>2200</span><span> |   </span><span>16392</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |     </span><span>2</span><span> |       </span><span>16390</span><span> |             </span><span>0</span><span> |        </span><span>4</span><span> |       </span><span>249</span><span> |             </span><span>0</span><span> |         </span><span>16393</span><span> | t           | f           | p              | r       |       </span><span>12</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | d            | f              |          </span><span>0</span><span> |          </span><span>743</span><span> |          </span><span>1</span><span> |        |            |</span></p></div><div><div><p>17</p></div><p><span> </span><span>16395</span><span> | countries_pkey     |         </span><span>2200</span><span> |       </span><span>0</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |   </span><span>403</span><span> |       </span><span>16395</span><span> |             </span><span>0</span><span> |        </span><span>2</span><span> |       </span><span>249</span><span> |             </span><span>0</span><span> |             </span><span>0</span><span> | f           | f           | p              | i       |        </span><span>1</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | n            | f              |          </span><span>0</span><span> |            </span><span>0</span><span> |          </span><span>0</span><span> |        |            |</span></p></div><div><div><p>18</p></div><p><span> </span><span>16397</span><span> | countries_name_key |         </span><span>2200</span><span> |       </span><span>0</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |   </span><span>403</span><span> |       </span><span>16397</span><span> |             </span><span>0</span><span> |        </span><span>2</span><span> |       </span><span>249</span><span> |             </span><span>0</span><span> |             </span><span>0</span><span> | f           | f           | p              | i       |        </span><span>1</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | n            | f              |          </span><span>0</span><span> |            </span><span>0</span><span> |          </span><span>0</span><span> |        |            |</span></p></div><div><div><p>19</p></div><p><span>(</span><span>4</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>We can see here that we’ve only actually got 4 table-like objects – the rest of the files in this folder are boilerplate – if you look in the DB folders for <code>template0</code>, <code>template1</code> or <code>postgres</code> (i.e. <code>1/</code>, <code>2/</code>, or <code>5/</code>) you’ll see that almost all of the files are exactly the same as our <code>blogdb</code> database.</p>
<p>So what are these <code>pg_class</code> objects and how do they relate to all these files?</p>
<p>Well we can see that <code>countries</code> is there with oid and relfilenode values of 16390 – that’s our actual table. There’s also <code>countries_pkey</code> with oid and relfilenode values of 16395 – that’s the index for our primary key. There’s <code>countries_name_key</code> with 16397 – the index for our name unique constraint – and finally <code>countries_id_seq</code> with 16389 – the sequence used to generate new ID values (we use <code>primary key generated always as identity</code>, which just like <code>serial</code> generates new values in a numerically increasing sequence).</p>
<p>The relfilenode here corresponds to the “filenode” of the object, which is the name of the file on disk. Let’s start off with our <code>countries</code> table.</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l 16390</span><span>*</span></p></div><div><div><p>2</p></div><p><span>.rw-------@ 33k   16390</span></p></div><div><div><p>3</p></div><p><span>.rw-------@ 25k   16390_fsm</span></p></div></code></pre></figure></div>
<p>For a general object, you’re likely to see three or more files: <sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup></p>
<ul>
<li><code>{filenode}</code> – Postgres splits large objects into multiple files called segments, to avoid issues some operating systems have with large files (mostly historical, to be honest). By default these are 1 GB in size, although this is configurable. This is the first segment file.</li>
<li><code>{filenode}.1</code>, <code>{filenode}.2</code> – these are the subsequent segment files. We don’t have &gt; 1 GB of data yet so we don’t have these.</li>
<li><code>{filenode}_fsm</code> – this is the <a href="https://www.postgresql.org/docs/current/storage-fsm.html">Free Space Map (FSM)</a> file for the object, which contains a binary tree telling you how much free space is available in each page of the heap. Don’t worry, we’re going to explain exactly what the heap and pages are in a minute.</li>
<li><code>{filenode}_vm</code> – this is the <a href="https://www.postgresql.org/docs/current/storage-vm.html">Visibility Map (VM)</a> file for the object, which tells you about the visibility of tuples in your pages. We’ll go into this a bit more later as well.</li>
</ul>
<h2 id="whats-the-heap">What’s the heap?</h2>
<p>All these main segment data files (excluding the FSM and VM) are called the <em>heap</em>.</p>
<p>Something really important about tables which isn’t obvious at first is that, even though they might have sequential primary keys, tables are <em>not ordered</em>. (Hence why we need a separate sequence object to be able to produce the sequential ID values.) For this reason tables are sometimes called a <em>bag</em> of rows. Postgres calls it a <em>heap</em>. For any real-life table that’s being added to and updated and vacuumed, the rows in the heap will <em>not</em> be in sequential order of their primary key.</p>
<p>Importantly, the heap in Postgres is very different to the heap in system memory (as opposed to the stack). They are related concepts and if you’re familiar with the structure of the stack vs. heap in memory you might find the page diagram in the next section very familiar, but it’s important to remember that they are very much separate concepts.</p>
<p>The object heap consists of many different pages (also known as blocks) sequentially stored in the file.</p>
<h2 id="so-whats-a-page">So what’s a page?</h2>
<p>Within a single segment file, you will find multiple pages of fixed size stitched together. By default, a page is 8 KB in size so we’d expect all our object files to be multiple of 8 KB. In this case, our table file is 32 KB which means there must be 4 pages in it.</p>
<p>You might be thinking – why use pages? Why not just have one page per segment? The answer is that each page is written in one atomic operation and the larger the size of the page, the more likely there will be a write failure during the write. The higher the page size, the more performant the database will be while the higher the page size, the higher the likelihood of write failures. The Postgres maintainers chose 8 KB as the default and they know what they’re doing so there’s generally no reason to change this.</p>
<p>This diagram shows what the structure of a page is, and how it relates to the segment and whole object.</p>
<img alt="Postgres database layout" src="https://drew.silcock.dev/media/how-postgres-stores-data-on-disk/database-layout-dark.png">
<img alt="Postgres database layout" src="https://drew.silcock.dev/media/how-postgres-stores-data-on-disk/database-layout-light.png">

<p>In our example here, our main table is 2.7 GiB which requires 3 separate segments of 1 GiB each. 131,072 pages of size 8 KiB into 1 GiB and each page consists of around 40 items (based on each item taking up about 200 bytes).</p>
<h2 id="page-layout">Page layout</h2>
<p>Let’s dive down into our page layout.</p>
<p>You can see that there are three areas of the page:</p>
<ul>
<li>The header &amp; line pointers, which grow “upwards”, meaning line pointer n + 1 has a higher initial offset into the page than line pointer n – the end of the final line pointer is called “lower”.</li>
<li>The special data &amp; items which grow “downwards”, meaning item n + 1 has a lower initial offset into the page than item n – the end of the final item is called “upper”.</li>
<li>The free space, which is in between the last line pointer and the last item, i.e. goes from “lower” to “upper” – you can calculate the remaining free space in the page by doing “upper” - “lower”.</li>
</ul>
<p>The page header itself contains things like:</p>
<ul>
<li>A checksum of the page</li>
<li>The offset to the end of the line pointers (a.k.a. “lower”)</li>
<li>The offset to the end of the free space (i.e. to the start of the items, a.k.a. “upper”)</li>
<li>The offset to the start of the special space</li>
<li>Version information</li>
</ul>
<p>There’s actually an in-built extension called <a href="https://www.postgresql.org/docs/current/pageinspect.html"><code>pageinspect</code></a> which we can use to look at our page header information:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>create</span><span> extension pageinspect;</span></p></div><div><div><p>2</p></div><p><span>CREATE</span><span> EXTENSION</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>0</span><span>));</span></p></div><div><div><p>5</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>6</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>7</p></div><p><span> </span><span>0</span><span>/</span><span>1983F70 |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>292</span><span> |   </span><span>376</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>8</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>));</span></p></div><div><div><p>11</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>12</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>13</p></div><p><span> </span><span>0</span><span>/</span><span>19858E0 |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>308</span><span> |   </span><span>408</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>14</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>15</p></div><div><div><p>16</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>2</span><span>));</span></p></div><div><div><p>17</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>18</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>19</p></div><p><span> </span><span>0</span><span>/</span><span>1987278</span><span> |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>296</span><span> |   </span><span>416</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>20</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>21</p></div><div><div><p>22</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>3</span><span>));</span></p></div><div><div><p>23</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>24</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>25</p></div><p><span> </span><span>0</span><span>/</span><span>19882C8 |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>196</span><span> |  </span><span>3288</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>26</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>The first thing you might notice is that <code>special</code> is the same as <code>pagesize</code> – this is just saying that there is no special data section for this page. The special data section is not used for table pages, only for other types like indexes where it stores information about the binary tree structure.</p>
<p>You might be wondering why all the <code>checksum</code> values are all 0. Turns out that Postgres <a href="https://www.postgresql.org/docs/current/checksums.html">disables checksum protection by default</a> for performance reasons and you have to <a href="https://www.postgresql.org/docs/current/app-initdb.html#APP-INITDB-DATA-CHECKSUMS">manually enable it</a>.</p>
<p>If we compare the <code>lower</code> and <code>upper</code> values for these pages, we can see that:</p>
<ul>
<li>Page 0 has 376 - 292 = 84 bytes of free space</li>
<li>Page 1 has 408 - 308 = 100 bytes of free space</li>
<li>Page 2 has 416 - 296 = 120 bytes of free space</li>
<li>Page 3 has 3288 - 196 = 3092 bytes of free space.</li>
</ul>
<p>We can infer from this that:</p>
<ul>
<li>The rows in our countries table is ~100 bytes as that’s how much space is left in the full pages.</li>
<li>Page 3 is the final page as there’s plenty of space left in there.</li>
</ul>
<p>We can confirm the row size using the <code>heap_page_items()</code> function from pageinspect:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>2</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>))</span></p></div><div><div><p>3</p></div><p><span>blogdb</span><span>-</span><span># </span><span>limit</span><span> </span><span>10</span><span>;</span></p></div><div><div><p>4</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                                                                           t_data</span></p></div><div><div><p>5</p></div><p><span>----+--------+--------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>6</p></div><p><span>  </span><span>1</span><span> |   </span><span>8064</span><span> |    </span><span>123</span><span> | (</span><span>1</span><span>,</span><span>1</span><span>)  | \x440000002545717561746f7269616c204775696e656107475109474e51093232361d49534f20333136362d323a47510f416672696361275375622d5361686172616e204166726963611d4d6964646c6520416672696361093030320932303209303137</span></p></div><div><div><p>7</p></div><p><span>  </span><span>2</span><span> |   </span><span>7944</span><span> |    </span><span>114</span><span> | (</span><span>1</span><span>,</span><span>2</span><span>)  | \x45000000114572697472656107455209455249093233321d49534f20333136362d323a45520f416672696361275375622d5361686172616e204166726963611f4561737465726e20416672696361093030320932303209303134</span></p></div><div><div><p>8</p></div><p><span>  </span><span>3</span><span> |   </span><span>7840</span><span> |     </span><span>97</span><span> | (</span><span>1</span><span>,</span><span>3</span><span>)  | \x46000000114573746f6e696107454509455354093233331d49534f20333136362d323a45450f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>9</p></div><p><span>  </span><span>4</span><span> |   </span><span>7720</span><span> |    </span><span>116</span><span> | (</span><span>1</span><span>,</span><span>4</span><span>)  | \x47000000134573776174696e6907535a0953575a093734381d49534f20333136362d323a535a0f416672696361275375622d5361686172616e2041667269636121536f75746865726e20416672696361093030320932303209303138</span></p></div><div><div><p>10</p></div><p><span>  </span><span>5</span><span> |   </span><span>7600</span><span> |    </span><span>115</span><span> | (</span><span>1</span><span>,</span><span>5</span><span>)  | \x4800000013457468696f70696107455409455448093233311d49534f20333136362d323a45540f416672696361275375622d5361686172616e204166726963611f4561737465726e20416672696361093030320932303209303134</span></p></div><div><div><p>11</p></div><p><span>  </span><span>6</span><span> |   </span><span>7448</span><span> |    </span><span>148</span><span> | (</span><span>1</span><span>,</span><span>6</span><span>)  | \x490000003946616c6b6c616e642049736c616e647320284d616c76696e61732907464b09464c4b093233381d49534f20333136362d323a464b13416d657269636173414c6174696e20416d657269636120616e64207468652043617269626265616e1d536f75746820416d6572696361093031390934313909303035</span></p></div><div><div><p>12</p></div><p><span>  </span><span>7</span><span> |   </span><span>7344</span><span> |    </span><span>103</span><span> | (</span><span>1</span><span>,</span><span>7</span><span>)  | \x4a0000001d4661726f652049736c616e647307464f0946524f093233341d49534f20333136362d323a464f0f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>13</p></div><p><span>  </span><span>8</span><span> |   </span><span>7248</span><span> |     </span><span>89</span><span> | (</span><span>1</span><span>,</span><span>8</span><span>)  | \x4b0000000b46696a6907464a09464a49093234321d49534f20333136362d323a464a114f6365616e6961154d656c616e6573696103093030390930353409202020</span></p></div><div><div><p>14</p></div><p><span>  </span><span>9</span><span> |   </span><span>7144</span><span> |     </span><span>97</span><span> | (</span><span>1</span><span>,</span><span>9</span><span>)  | \x4c0000001146696e6c616e640746490946494e093234361d49534f20333136362d323a46490f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>15</p></div><p><span> </span><span>10</span><span> |   </span><span>7048</span><span> |     </span><span>95</span><span> | (</span><span>1</span><span>,</span><span>10</span><span>) | \x4d0000000f4672616e636507465209465241093235301d49534f20333136362d323a46520f4575726f70651f5765737465726e204575726f706503093135300931353509202020</span></p></div><div><div><p>16</p></div><p><span>(</span><span>10</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>Here <code>lp</code> means the line pointer, <code>lp_off</code> means the offset to the start of the item, <code>lp_len</code> is the size of the item in bytes and <code>t_ctid</code> refers to the ctid of the item. The ctid (Current Tuple ID)<sup><a href="#user-content-fn-4" id="user-content-fnref-4" data-footnote-ref="" aria-describedby="footnote-label">4</a></sup> tells you where the item is located in the form <code>(page index, item index within page)</code> so <code>(1, 1)</code> means the first item in page 1 (pages are zero-indexed, item index is not for some reason).</p>
<p>We can also see the actual data for the item here as well, which is pretty cool – this long hex string is exactly the bytes that Postgres has stored on disk. Let’s check which row we’re looking at with some Python:</p>
<div><figure><pre data-language="bash"><code><div><div><p>1</p></div><p><span>$</span><span> </span><span>row_data=</span><span>$(</span><span>docker</span><span> </span><span>exec</span><span> $pg_container_id </span><span>psql</span><span> </span><span>-U</span><span> </span><span>postgres</span><span> </span><span>blogdb</span><span> </span><span>--tuples-only</span><span> </span><span>-c</span><span> </span><span>"select t_data from heap_page_items(get_raw_page('countries', 1)) limit 1;"</span><span>)</span></p></div><div><div><p>2</p></div><p><span>$</span><span> </span><span>python3</span><span> </span><span>-c</span><span> </span><span>"print(bytearray.fromhex(r'</span><span>$row_data</span><span>'.strip().replace('</span><span>\\\\</span><span>x', '')).decode('utf-8', errors='ignore'))"</span><span> </span><span>&gt;</span><span> </span><span>row_data.bin</span></p></div><div><div><p>3</p></div><p><span>$</span><span> </span><span>cat</span><span> </span><span>row_data.bin</span></p></div><div><div><p>4</p></div><p><span>D%Equatorial</span><span> </span><span>GuineaGQ</span><span>   </span><span>GNQ</span><span>     </span><span>226ISO</span><span> </span><span>3166-2:GQAfrica'Sub-Saharan AfricaMiddle Africa  002     202     017</span></p></div><div><div><p>5</p></div><p><span>$ hexyl row_data.bin</span></p></div><div><div><p>6</p></div><p><span>┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐</span></p></div><div><div><p>7</p></div><p><span>│00000000│ 44 00 00 00 25 45 71 75 ┊ 61 74 6f 72 69 61 6c 20 │D⋄⋄⋄%Equ┊atorial │</span></p></div><div><div><p>8</p></div><p><span>│00000010│ 47 75 69 6e 65 61 07 47 ┊ 51 09 47 4e 51 09 32 32 │Guinea•G┊Q_GNQ_22│</span></p></div><div><div><p>9</p></div><p><span>│00000020│ 36 1d 49 53 4f 20 33 31 ┊ 36 36 2d 32 3a 47 51 0f │6•ISO 31┊66-2:GQ•│</span></p></div><div><div><p>10</p></div><p><span>│00000030│ 41 66 72 69 63 61 27 53 ┊ 75 62 2d 53 61 68 61 72 │Africa'S┊ub-Sahar│</span></p></div><div><div><p>11</p></div><p><span>│00000040│</span><span> </span><span>61</span><span> </span><span>6e</span><span> </span><span>20</span><span> </span><span>41</span><span> </span><span>66</span><span> </span><span>72</span><span> </span><span>69</span><span> </span><span>63</span><span> </span><span>┊</span><span> </span><span>61</span><span> </span><span>1d</span><span> </span><span>4d</span><span> </span><span>69</span><span> </span><span>64</span><span> </span><span>64</span><span> </span><span>6c</span><span> </span><span>65</span><span> </span><span>│an</span><span> </span><span>Afric┊a•Middle│</span></p></div><div><div><p>12</p></div><p><span>│00000050│</span><span> </span><span>20</span><span> </span><span>41</span><span> </span><span>66</span><span> </span><span>72</span><span> </span><span>69</span><span> </span><span>63</span><span> </span><span>61</span><span> </span><span>09</span><span> </span><span>┊</span><span> </span><span>30</span><span> </span><span>30</span><span> </span><span>32</span><span> </span><span>09</span><span> </span><span>32</span><span> </span><span>30</span><span> </span><span>32</span><span> </span><span>09</span><span> </span><span>│</span><span> </span><span>Africa_┊002_202_│</span></p></div><div><div><p>13</p></div><p><span>│00000060│</span><span> </span><span>30</span><span> </span><span>31</span><span> </span><span>37</span><span> </span><span>0a</span><span>             </span><span>┊</span><span>                         </span><span>│017_</span><span>    </span><span>┊</span><span>        </span><span>│</span></p></div><div><div><p>14</p></div><p><span>└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘</span></p></div><div><div><p>15</p></div><p><span>$</span><span> </span><span>docker</span><span> </span><span>exec</span><span> $pg_container_id </span><span>psql</span><span> </span><span>-U</span><span> </span><span>postgres</span><span> </span><span>blogdb</span><span> </span><span>-c</span><span> </span><span>"select * from countries where name = 'Equatorial Guinea';"</span></p></div><div><div><p>16</p></div><p><span> </span><span>ctid</span><span>  </span><span>|</span><span> </span><span>id</span><span> </span><span>|</span><span>       </span><span>name</span><span>        </span><span>|</span><span> </span><span>alpha_2</span><span> </span><span>|</span><span> </span><span>alpha_3</span><span> </span><span>|</span><span> </span><span>numeric_3</span><span> </span><span>|</span><span>  </span><span>iso_3166_2</span><span>   </span><span>|</span><span> </span><span>region</span><span> </span><span>|</span><span>     </span><span>sub_region</span><span>     </span><span>|</span><span> </span><span>intermediate_region</span><span> </span><span>|</span><span> </span><span>region_code</span><span> </span><span>|</span><span> </span><span>sub_region_code</span><span> </span><span>|</span><span> </span><span>intermediate_region_code</span></p></div><div><div><p>17</p></div><p><span>-------+----+-------------------+---------+---------+-----------+---------------+--------+--------------------+---------------------+-------------+-----------------+--------------------------</span></p></div><div><div><p>18</p></div><p><span><span> </span></span><span>(</span><span>1,1</span><span>) </span><span>|</span><span> </span><span>68</span><span> </span><span>|</span><span> </span><span>Equatorial</span><span> </span><span>Guinea</span><span> </span><span>|</span><span> </span><span>GQ</span><span>      </span><span>|</span><span> </span><span>GNQ</span><span>     </span><span>|</span><span> </span><span>226</span><span>       </span><span>|</span><span> </span><span>ISO</span><span> </span><span>3166-2:GQ</span><span> </span><span>|</span><span> </span><span>Africa</span><span> </span><span>|</span><span> </span><span>Sub-Saharan</span><span> </span><span>Africa</span><span> </span><span>|</span><span> </span><span>Middle</span><span> </span><span>Africa</span><span>       </span><span>|</span><span> </span><span>002</span><span>         </span><span>|</span><span> </span><span>202</span><span>             </span><span>|</span><span> </span><span>017</span></p></div><div><div><p>19</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>Ahah, we are looking at the data for Equatorial Guinea, the only continental African country to speak Spanish as an official language. (If you’re wondering why <code>(1,1)</code> isn’t Afghanistan, the country with ID 1, remember that the pages start at 0 so we’d expect to find Afghanistan at <code>(0,1)</code>.)</p>
<p>We can see here that each column is being stored right next to each other with a random byte in between each one. Let’s dive in:</p>
<ul>
<li><code>0x 44 00 00 00</code> = <code>68</code> (must be little endian) so the first 4 bytes is the row’s ID</li>
<li>Then, there’s a random byte like <code>0x25</code> or <code>0x07</code> followed by the column data – the rest of the columns are string types so they’re all stored in UTF-8. If you know what these inter-column bytes mean, leave a comment below! I can’t figure it out.</li>
</ul>
<p>Individual values that are too big to store in here (e.g. they’re more than 8 KiB in size) get stored in a separate relation, or <a href="https://www.postgresql.org/docs/current/storage-toast.html">TOASTed</a> – this will be the topic of a future post 🍞.</p>
<h2 id="what-happens-when-a-row-gets-modifed-or-deleted">What happens when a row gets modifed or deleted?</h2>
<p>Postgres uses MVCC (Multiversion Concurrency Control) to handle concurrent access to data. The “multiversion” here means that when a transaction comes in and modifies a row, it doesn’t touch the existing tuple on disk at all. Instead, it creates a new tuples at the end of the last page with the modified row. When it commits the update, it swaps the version of the data that a new transaction will see from the old tuple to the new one.</p>
<p>Let’s see this in action:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> ctid </span><span>from</span><span> countries </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span>;</span></p></div><div><div><p>2</p></div><p><span><span> </span></span><span>ctid</span></p></div><div><div><p>3</p></div><p><span>-------</span></p></div><div><div><p>4</p></div><p><span><span> </span></span><span>(</span><span>0</span><span>,</span><span>9</span><span>)</span></p></div><div><div><p>5</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>6</p></div><div><div><p>7</p></div><p><span>blogdb</span><span>=</span><span># </span><span>update</span><span> countries </span><span>set</span><span> region </span><span>=</span><span> </span><span>'The South Pole'</span><span> </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span>;</span></p></div><div><div><p>8</p></div><p><span>UPDATE</span><span> </span><span>1</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> ctid </span><span>from</span><span> countries </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span>;</span></p></div><div><div><p>11</p></div><p><span><span>  </span></span><span>ctid</span></p></div><div><div><p>12</p></div><p><span>--------</span></p></div><div><div><p>13</p></div><p><span><span> </span></span><span>(</span><span>3</span><span>,</span><span>44</span><span>)</span></p></div><div><div><p>14</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>15</p></div><div><div><p>16</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>17</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>0</span><span>))</span></p></div><div><div><p>18</p></div><p><span>blogdb</span><span>-</span><span># offset </span><span>8</span><span> </span><span>limit</span><span> </span><span>1</span><span>;</span></p></div><div><div><p>19</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid | t_data</span></p></div><div><div><p>20</p></div><p><span>----+--------+--------+--------+--------</span></p></div><div><div><p>21</p></div><p><span>  </span><span>9</span><span> |      </span><span>0</span><span> |      </span><span>0</span><span> |        |</span></p></div><div><div><p>22</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>We can see that once we update the row, its ctid changes from <code>(0,9)</code> to <code>(3,44)</code> (which is probably at the end of the last page). The old data and ctid is also wiped from the old item location.</p>
<p>What about deletions? Let’s take a look:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>delete</span><span> </span><span>from</span><span> countries </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Equatorial Guinea'</span><span>;</span></p></div><div><div><p>2</p></div><p><span>DELETE</span><span> </span><span>1</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>5</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>))</span></p></div><div><div><p>6</p></div><p><span>blogdb</span><span>-</span><span># </span><span>limit</span><span> </span><span>1</span><span>;</span></p></div><div><div><p>7</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                                                  t_data</span></p></div><div><div><p>8</p></div><p><span>----+--------+--------+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>9</p></div><p><span>  </span><span>1</span><span> |   </span><span>8064</span><span> |    </span><span>123</span><span> | (</span><span>1</span><span>,</span><span>1</span><span>)  | \x440000002545717561746f7269616c204775696e656107475109474e51093232361d49534f20333136362d323a47510f416672696361275375622d5361686172616e204166726963611d4d6964646c6520416672696361093030320932303209303137</span></p></div><div><div><p>10</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>The data is still there! That’s because Postgres doesn’t bother actually deleting the data, it just marks the data as deleted. But you might be thinking, if rows are constantly getting deleted and added, you’ll end up with constantly increasing segments files full of deleted data (called “dead tuples” in the Postgres lingo). This is where vacuuming comes in. Let’s trigger a manual vacuum and see what happens.</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># vacuum full;</span></p></div><div><div><p>2</p></div><p><span>VACUUM</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>5</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>))</span></p></div><div><div><p>6</p></div><p><span>blogdb</span><span>-</span><span># </span><span>limit</span><span> </span><span>1</span><span>; </span><span>-- This used to be the dead tuple where 'Equatorial Guinea' was.</span></p></div><div><div><p>7</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                        t_data</span></p></div><div><div><p>8</p></div><p><span>----+--------+--------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>9</p></div><p><span>  </span><span>1</span><span> |   </span><span>8088</span><span> |     </span><span>97</span><span> | (</span><span>1</span><span>,</span><span>1</span><span>)  | \x46000000114573746f6e696107454509455354093233331d49534f20333136362d323a45450f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>10</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>11</p></div><div><div><p>12</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>13</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>0</span><span>))</span></p></div><div><div><p>14</p></div><p><span>blogdb</span><span>-</span><span># offset </span><span>8</span><span> </span><span>limit</span><span> </span><span>1</span><span>; </span><span>-- This used to be the dead tuple where the old 'Antarctica' version was.</span></p></div><div><div><p>15</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                                                               t_data</span></p></div><div><div><p>16</p></div><p><span>----+--------+--------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>17</p></div><p><span>  </span><span>9</span><span> |   </span><span>7192</span><span> |    </span><span>136</span><span> | (</span><span>0</span><span>,</span><span>9</span><span>)  | \x0a00000029416e746967756120616e64204261726275646107414709415447093032381d49534f20333136362d323a414713416d657269636173414c6174696e20416d657269636120616e64207468652043617269626265616e1543617269626265616e093031390934313909303239</span></p></div><div><div><p>18</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>19</p></div><div><div><p>20</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> ctid, </span><span>name</span><span> </span><span>from</span><span> countries</span></p></div><div><div><p>21</p></div><p><span>blogdb</span><span>-</span><span># </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span> </span><span>or</span><span> ctid </span><span>=</span><span> </span><span>'(0,9)'</span><span> </span><span>or</span><span> ctid </span><span>=</span><span> </span><span>'(1,1)'</span><span>;</span></p></div><div><div><p>22</p></div><p><span><span>  </span></span><span>ctid  |        </span><span>name</span></p></div><div><div><p>23</p></div><p><span>--------+---------------------</span></p></div><div><div><p>24</p></div><p><span><span> </span></span><span>(</span><span>0</span><span>,</span><span>9</span><span>)  | Antigua </span><span>and</span><span> Barbuda</span></p></div><div><div><p>25</p></div><p><span><span> </span></span><span>(</span><span>1</span><span>,</span><span>1</span><span>)  | Estonia</span></p></div><div><div><p>26</p></div><p><span><span> </span></span><span>(</span><span>3</span><span>,</span><span>42</span><span>) | Antarctica</span></p></div><div><div><p>27</p></div><p><span>(</span><span>3</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>Now that we’ve vacuumed, a couple of things have happened:</p>
<ul>
<li>The dead tuple where the outdated first version of the Antarctica row was located has now been replaced with Antigua and Barbuda, which is the next country along.</li>
<li>The dead tuple where the Equatorial Guinea row was located has now been replaced with Estonia, the next country along.</li>
<li>Antarctica has moved from <code>(3,44)</code> down to <code>(3,42)</code> because the 2 dead tuples has now been cleaned out and the Antarctica row can move down 2 slots.</li>
</ul>
<h2 id="what-about-indexes">What about indexes?</h2>
<p>Indexes work exactly the same as tables! The only difference is that the tuple stored as items in each page contains the indexed data instead of the full row data and the special data contains sibling node information for the binary tree.</p>
<p><strong>Exercise for the reader:</strong> Find the segment file for the <code>name</code> column unique index and investigate the values of the <code>t_data</code> in each item and “special data” for each page. Comment below what you find!</p>
<h2 id="why-would-i-ever-need-to-know-any-of-this">Why would I ever need to know any of this?</h2>
<p>There’s a few reasons:</p>
<ul>
<li>It’s interesting!</li>
<li>It helps understand how Postgres queries your data on disk, how MVCC works and lots more that’s really useful when you’re trying to gain a deep understanding of how your database works for the purpose of fine-tuning performance.</li>
<li>In certain rare circumstances, it can actually be quite useful for data recovery. Take the following examples:
<ul>
<li>You have someone who through incompetence or malice decides to corrupt your database by removing or messing up a couple of files on disk. Postgres can no longer understand the database so starting Postgres up will just result in a corrupted state. You can swoop in and use your knowledge to manually recover the data. This would still be a fairly large undertaking to do this, and in real life you’d probably call in a professional data recovery specialist, but maybe in this imaginary scenario your company can’t afford one so you have to make do.</li>
<li>Someone accidentally set the super-important customers table on the production database as unlogged<sup><a href="#user-content-fn-5" id="user-content-fnref-5" data-footnote-ref="" aria-describedby="footnote-label">5</a></sup> and then the server crashes. Because in an unlogged table changes aren’t written to the WAL, a database recovery via logical decoding will not include any of the unlogged table data. If you restart the server, Postgres will wipe clean the whole unlogged table because it will restore the database state from the WAL. However, if you copy out the raw database files, you can use the knowledge you have gained from this post to recover the contents of the data. (There’s probably a tool that does this already, but if not you could write your own – that would be an interesting project…)</li>
</ul>
</li>
<li>It’s a good conversation starter at parties <sup><a href="#user-content-fn-6" id="user-content-fnref-6" data-footnote-ref="" aria-describedby="footnote-label">6</a></sup>.</li>
</ul>
<h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://ketansingh.me/posts/how-postgres-stores-rows/">Ketan Singh – How Postgres Stores Rows</a></li>
<li><a href="https://www.postgresql.org/docs/current/storage.html">PostgreSQL Documentation – Chapter 73. Database Physical Storage</a></li>
<li><a href="https://www.youtube.com/watch?v=L-dw1yRFYVg">Advanced SQL (Summer 2020), U Tübingen – DB2 — Chapter 03 — Video #09 — Row storage in PostgreSQL, heap file page layout</a></li>
<li><a href="https://www.youtube.com/watch?v=1D81vXw2T_w">15-445/645 Intro to Database Systems (Fall 2019), Carnegie Mellon University – 03 - Database Storage I</a></li>
<li><a href="https://medium.com/quadcode-life/structure-of-heap-table-in-postgresql-d44c94332052">Structure of Heap Table in PostgreSQL</a></li>
<li><a href="https://pgpedia.info/categories/data-directory.html">pgPedia – Data Directory</a></li>
</ul>
<h2 id="future-topics">Future topics</h2>
<p>Database engines is an endlessly interesting topic, and there’s lots more I’d like to write about in this series. Some ideas are:</p>
<ul>
<li>How Postgres stores oversized values – let’s raise a TOAST</li>
<li>How Postgres handles concurrency – MVCC is the real MVP</li>
<li>How Postgres turns a SQL string into data</li>
<li>How Postgres ensures data integrity – where’s WAL</li>
</ul>
<p>If you’d like me to write about one of these, leave a comment below 🙂</p>
<h2 id="updates">Updates</h2>
<ul>
<li>2024-08-05 – Rephrased the explanation of logical decoding based on <a href="https://news.ycombinator.com/item?id=41160109">HN comment from dfox</a>, added explanation of why checksums are all 0 after <a href="https://news.ycombinator.com/item?id=41160233">HN discussion</a>, expanded teaser for future TOAST post.</li>
</ul>
<section data-footnotes="">
<ol>
<li id="user-content-fn-1">
<p>Technically, the data directory is whatever you specify in environment variable <code>PGDATA</code> and it’s possible to put some of the cluster config files elsewhere, but the only reason you’d be messing with any of that is if you were hosting multiple clusters on the same machine using different Postgres server instances, which is a more advanced use case than we’re interesting in here. <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-2">
<p>You might be wondering why the numeric country code is stored as <code>char(3)</code> instead of <code>integer</code>. You could store it as an integer if you want, but – exactly like phone numbers – it doesn’t make any sense to say “Austria ÷ Afghanistan = Antarctica” (even though numerically it’s true) so what’s the point in storing it as an integer? Really it’s still a 3-character identifier, it’s just restricting the available characters to 0-9 instead of a-z as with the alpha-2 and alpha-3 country codes. <a href="#user-content-fnref-2" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3">
<p>There’s also a filed called <code>{filenode}_init</code> which is used to store initialisation information for unlogged tables, but you won’t see these unless you’re using unlogged tables. <a href="#user-content-fnref-3" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
<li id="user-content-fn-4">
<p>I think this is what the C stands for but I’m not sure. <a href="#user-content-fnref-4" data-footnote-backref="" aria-label="Back to reference 4">↩</a></p>
</li>
<li id="user-content-fn-5">
<p>You can pretend that you’ve never accidentally run a query on prod instead of your local dev database, but we all do it sooner or later. <a href="#user-content-fnref-5" data-footnote-backref="" aria-label="Back to reference 5">↩</a></p>
</li>
<li id="user-content-fn-6">
<p>It’s not, please don’t do this unless you don’t want to be invited back to said parties. <a href="#user-content-fnref-6" data-footnote-backref="" aria-label="Back to reference 6">↩</a></p>
</li>
</ol>
</section>   </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stop Killing Games (456 pts)]]></title>
            <link>https://eci.ec.europa.eu/045/public/</link>
            <guid>41159063</guid>
            <pubDate>Mon, 05 Aug 2024 08:06:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eci.ec.europa.eu/045/public/">https://eci.ec.europa.eu/045/public/</a>, See on <a href="https://news.ycombinator.com/item?id=41159063">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>