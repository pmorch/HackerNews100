<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 13 Apr 2025 18:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The Dark Side of the Moomins (176 pts)]]></title>
            <link>https://www.newstatesman.com/culture/books/2025/04/dark-side-of-the-moomins-tove-jansson</link>
            <guid>43672593</guid>
            <pubDate>Sun, 13 Apr 2025 13:15:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newstatesman.com/culture/books/2025/04/dark-side-of-the-moomins-tove-jansson">https://www.newstatesman.com/culture/books/2025/04/dark-side-of-the-moomins-tove-jansson</a>, See on <a href="https://news.ycombinator.com/item?id=43672593">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="the-post">

        
<header>
    <div>
        <figure>

        <img width="708" height="945" src="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain.jpg" alt="" decoding="async" fetchpriority="high" srcset="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain.jpg 708w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-397x529.jpg 397w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-135x180.jpg 135w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-464x618.jpg 464w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-225x300.jpg 225w" sizes="(max-width: 1407px) 1407px, (max-width: 335px) 335px, (max-width: 705px) 705px, (max-width: 335px) 335px, (max-width: 689px) 689px, (max-width: 336px) 336px, (max-width: 210px) 210px, (max-width: 101px) 101px, (max-width: 1024px) 1024px, (max-width: 101px) 101px, (max-width: 397px) 397px, (max-width: 464px) 464px, (max-width: 797px) 797px, (max-width: 960px) 960px, (max-width: 314px) 314px, (max-width: 464px) 464px, (max-width: 735px) 735px, (max-width: 1038px) 1038px">
                <figcaption>Illustration by Moomin Characters™</figcaption>
            </figure>
</div></header><!-- .entry-header-outer /-->
    
        <div id="figarocontent">
                

                <p>“I could vomit over Moomintroll,” Tove Jansson confided in her notebook in the late 1950s. A decade after the hippo-like creature with low self-esteem made his debut appearance in 1945, Scandinavian homes had become versions of Moominvalley, with Moomin-themed aprons, curtains, wallpaper and crockery, while department stores stocked Moomins modelled in marzipan, ceramic and white leather (Jansson drew the line at Moomin sanitary towels). This world of whimsy bore little relation to the Finnish artist’s initial conception of the Moomintrolls.</p>



<p><em>The Moomins and the Great Flood</em>, the 60-page picture book not translated into English until 2005 and now celebrating its 80th anniversary, was written during the Winter War in 1939, when Russia’s invasion of Finland left 300,000 Finns homeless. (The Moomin estate is marking the anniversary by partnering with Counterpoints Arts and Refugee Week to commission artists to create public artworks inspired by the book.) A tale of displaced people and dangerous predators and living on borders, the first of the nine Moomin books begins with Moomintroll and Moominmamma arriving, “late in the afternoon one day at the end of August”, in “the deepest part of the great forest”. August, Jansson believed, was “the border between summer and winter” and twilight “the border between day and night”.</p>



<p>Half-Swedish and half-Finnish, half-storyteller and half-illustrator, a lover of both men and women, and an artist appealing equally to adults and children, Jansson was a border-dweller herself. A scratchy ink illustration on page one shows two tiny dark shapes, which might be roots or rocks, suspended beneath trees the size of Giant redwoods. Mother and son are in search of somewhere “snug” in which to hibernate, but they are also in search of Moominpappa, who long ago disappeared with the “mostly invisible” Hattifatteners: it is striking how many of the characters in Jansson’s stories are searching for something, waiting for something, and in need of a home. The Moomins find another lost creature who will, in the later books, become Moomintroll’s best friend and foster-brother, Sniff. There was a time, Moominmamma tells the small boys, when Moomins made their homes behind the stoves in other peoples’ houses and did not need to “travel through fearsome forests and swamps in order to find somewhere to live”.</p>



<p>The Moomin stories were born, Jansson wrote to her friend Eva, “when I was feeling sad and scared of bombs and wanted to get away from gloomy thoughts… I would creep into an unbelievable world where everything was natural and friendly – and possible.” The first book “had to be a fairy tale” with a “happy ending”, and so when the Moomins find Moominpappa they move into his stove-shaped house, which a flood has transplanted, Ark-like, to the valley where they will live, we are told, for “the whole of their lives”. There were no illustrations in Jansson’s first draft of <em>The Moomins and the Great Flood</em>. She had trained as a painter but during the war she “stood still” as an artist and was no longer able to think in colour, so “it felt completely pointless to try to create pictures”. Putting the pages in a drawer, she forgot about them for the next six years until a friend suggested that they could, with pictures, be turned into a children’s book. <em>The Moomins and the Great Flood</em>, illustrated in sepia and black ink, was published only in Sweden, selling 219 copies in the first year.</p>



<p>The Moomins, at this point in their gestation, were broad-backed with trunk-like noses, horn-like ears, and flattish stomachs. Their waistlines increased with fame, but their characteristics remained the same: anxious, romantic Moomintroll, dependable Moominmamma, and Moominpappa, the reckless, self-absorbed melancholic whose longing for adventure threatens to destroy them all. Jansson had found her cast, her perfect length – short to medium – and the balance between words and pictures that would prove her genius. The writing is spare, weighed down with silences, the images saying what the words elide. <em>The Moomins and the Great Flood</em> ends with the creation of Moominvalley, the kind of place that the psychotherapist Donald Winnicott – in whom Jansson had a strong interest – would call a “holding environment” where we can be determinedly ourselves. United in solipsism and contained by the love of Moominmamma, the Moomins and their eccentric friends live out their philosophies, compulsions, obsessions, paranoias, and various neuroses.</p>



<p>Five further Moomin books followed in quick succession:<em> Comet in Moominland</em> (1946), in which a fireball is seen “diving headlong” towards Moominvalley and the Moomins wait in a cave for extinction (a response to the Soviet bombing of Helsinki and the American bombings of Nagasaki and Hiroshima); <em>Finn Family Moomintroll </em>(1948), a celebration of Jansson’s first affair with a woman, the theatre director Vivica Bandler (“O, to be a newly awakened Moomin dancing in the glass-green waves while the sun is rising”); <em>The Memoirs of Moominpappa</em>, a parody of the life of the 16th-century Italian sculptor Benvenuto Cellini and of male pomposity (“When people read this book,” Moomintroll tells his father, “they are going to believe you are famous”); and<em> Moominsummer Madness</em> (1954), when another flood renders the creatures once again homeless.</p>



<p>The sixth novel, <em>Moominland Midwinter </em>(1958), written when Jansson was ready to “vomit” over her creation, contains the most devastating account of depression in 20th-century literature. Waking up early during the annual hibernation, Moomintroll finds himself snowed in and utterly alone in an alien world whose pleasure principle has disappeared. From now on in the books, things get darker. Family relations break down completely in <em>Moominpappa at Sea</em> (1965) when Moominpappa, realising that he is a failed artist, drags his family away from Moominvalley to an uninhabited rock in the middle of the sea that is “completely silent and terribly, terribly cold”. Here, in his attempt to control the waves, he loses his mind, while a desolate Moominmamma hides inside the mural of Moominvalley that she’s painted on the wall and Moomintroll, in love with a seahorse and profoundly depressed, finds a patch of earth on which to sleep. The island, meanwhile, shrinks with unhappiness.</p><section>
                        <p><a href="https://www.newstatesman.com/culture/books/2025/04/javascript(void);"><img decoding="async" src="https://dl6pgk4f88hky.cloudfront.net/2021/09/TNS_master_logo.svg"></a>
                        </p>
                            <p>Subscribe to The New Statesman today from only £8.99 per month</p>
                            
                        </section>



<p>The final book, <em>Moominvalley in November</em> (1970), a spin on <em>Waiting for Godot</em>, takes place during the family’s absence. Their friends, not knowing where they have gone or why they left without saying goodbye, wait in the Moomins’ abandoned house&nbsp; (the one in which they would live for “the whole of their lives”) for their return. There is no happy ending, and the readers who drank out of their Moomin mugs and slept beneath their Moomin duvet covers felt angry and cheated. But Jansson, aged 56, was at last free of her Frankenstein’s monster. A book in which nothing happens save the passing of time, <em>Moominvalley in November</em> is an absurdist masterpiece. There is an aesthetic satisfaction to the series, which begins and ends with disappearance. It is Moominpappa who vanishes in the first book, and the entire family in the last. One of the oddest aspects of the Moomin phenomenon is how these complex tales of apocalypse, breakdown and disfunction have been consistently misread as cutesy celebrations of domestic life.</p>



<figure><img decoding="async" width="768" height="1024" src="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-768x1024.jpg" alt="" srcset="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-768x1024.jpg 768w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-397x529.jpg 397w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-135x180.jpg 135w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-464x618.jpg 464w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-225x300.jpg 225w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson.jpg 778w" sizes="(max-width: 768px) 100vw, 768px"><figcaption>Jansson’s characters were a canvas for her own personality traits.  <em>Photo by Eva Konikoff</em></figcaption></figure>



<p>Tove Jansson was born in Helsinki in August 1914. Her father, Viktor (known as “Faffan”) was a sculptor from Finland’s Swedish-speaking minority and her mother, Signe Hammarsten (“Ham”) was a well-known draughtswoman, the daughter of a Swedish clergyman. Faffan’s work did not sell and so Ham was the principal breadwinner. By the time she was 14, Tove was also contributing to the family finances by drawing cartoons for the satirical magazine <em>Garm</em>. In her early twenties, her satires of Hitler and Stalin were placed on <em>Garm</em>’s cover. Faffan, who had returned from the Finnish Civil War (January-May 1918) a broken man, now fervently supported Germany and so he and his daughter were at loggerheads.</p>



<p>The Janssons saw themselves as bohemians but there is nothing relaxed about the family portrait Tove painted in 1942, which shows five stiff figures in a cramped room, each locked in their own isolation and looking in different directions. Ham and Faffan are in white overalls, one of Tove’s two brothers is in military uniform, while Tove herself, standing in the middle in a black hat, coat and gloves, looks as though her suitcase is packed and she is ready to board a train. “Faffan and I have said we hate each other,” she told a friend during this same year. “It’s hell to be still living at home.”</p>



<p>Jansson had lived with Moomins since childhood, when her uncle told her tales about the trolls behind the kitchen stove who would, if she stole jam from the larder, rub their cold snouts against her legs until she froze. By the time she was in her teens the trolls had evolved in her imagination into frightening “house ghosts” who made their presence known by breathing cold air on her neck: “Terrified, I turned the key in the lock and jumped into bed like a shot, and all that night I could hear the Moomintrolls pulling my slippers backwards and forwards under my bed.” Jansson’s first Moomin illustration (“the ugliest thing I could think of”) was on the lavatory wall of the family’s island summer house, where it can still be admired by tourists.</p>



<p>The creatures had turned, by her late teens, into what Jansson’s biographer Boel Westin describes as “ominous creatures associated with dreams, confusion and emptiness”, drawn in a series of “expressive landscapes of boulders, seas, dark islands and deserted roads, fenced around with agitation, uncertainty and anguish”. By her early twenties Moomintroll had become Jansson’s “angry signature character”. It is easy to overlook Moomintroll’s anger, which expresses itself largely as fear, but it comes to the surface when his <em>amour propre</em> is challenged, such as in the comic strip story <em>Moomin on the Riviera</em>, where his girlfriend, Snorkmaiden, runs off with the movie star Mr Brisk and Moomintroll challenges him to a duel.</p>



<p>The Moomintrolls were first introduced to an English audience in 1954 in the form of a comic strip in the <em>London Evening News</em> (circulation: 12 million) which by 1956 had been syndicated to 120 other papers in 20 further countries. These stories are funnier than those in the books and focus on what Jansson called “psychological moments” and Winnicott would call “nameless dread”. Jansson had inadvertently become the analyst of the postwar psyche, but it was her own psyche she was exploring. The Moomin stories were, she said, “abreactions”, a psychoanalytical term for catharsis (“I abreacted hugely through this book,” she wrote of <em>Moominpappa at Sea</em>), and Jansson distributed herself throughout her characters: she was as dutiful and unassertive as Moomintroll, as misanthropic and frustrated as Moominpappa, as empathetic and reliable as Moominmamma, and as wild as the furious urchin Little My.</p>



<p>She hoped that the income from the comic strips would allow her to return to painting, but it became clear by 1957 that this would never happen. As well as containing the world’s fears, Jansson now singlehandedly controlled the Moomin merchandise industry, which involved answering by hand each of the 2,000 letters she received every year. “We look forward to your valued reply soonest concerning Moomin motifs on toilet paper in pastel shades,” reads one letter.” “Hi, my name is Olavi,” reads another. “You write well but last time you did not make a happy ending. Why do you do this?” “What shall I do with my parents?” reads a third. “They’re becoming more and more hopeless. Write!”</p>



<p>Jansson, like the Moomins, wanted only to hibernate but instead she found herself snowed in beneath “an avalanche of things”, her world now composed, she said, of “newspapers, telephones, telegrams, post post post in heaps, stacks, avalanches, strangers, lectures, conversations, conversations, masses of words and myriads of children. And never alone. Never ever really alone”. One of the mysteries of Jansson’s personality is why she allowed the mass commercialisation of her delicate, subtle work; another is why, given the urgency of her creative drive, she didn’t employ a secretary to take over the administrative burden.</p>



<p>In 1969, around the same time that she completed the Moomin books with<em> Moominvalley in November</em>, Jansson drew her last comic strip and killed off her main character. Moomintroll is diagnosed by a psychiatrist, Dr Schrünkel, with numerous complexes, and prescribed medication which makes him shrink until he completely disappears. The following year, Jansson’s younger brother Lasse took over the cartoons. Moomintroll was now resurrected, after which the stories continued to run until 1975.</p>



<p>Tove Jansson is not the first writer to fall out with her characters. Arthur Conan Doyle tried to kill off Sherlock Holmes by throwing him down the Reichenbach Falls, and after 30 years of living with Hercule Poirot, Agatha Christie described him as a “detestable, bombastic, tiresome, egocentric little creep”. What distinguishes Jansson is that she detested her readers even more than her characters. They are satirised in her first cartoon, <em>Moomin and the Brigands</em>, as the hordes of uninvited guests who exploit Moomin’s generosity and, once they have eaten him out of house and home, eat the home itself: “It’s so difficult to tell your guests that you’d like your own bed sometimes,” Moomintroll confides to Sniff. “I must learn to say No”.</p>



<p>In 1963, Jansson and her partner, the graphic artist Tuulikki Pietilä, built a cabin on the “angry little skerry” of Klovharu, a rocky and isolated island which could be circumnavigated in four and a half minutes. Even here, where for the next 30 summers she did her best to disappear, she was pursued by boatloads of Moomin fans. “Seven strangers came… to have coffee, drinks and soft drinks and talk and ‘look at me’”, Jansson wrote in her diary. “Kiss my arse… Threw stones. Angry.”</p>



<p><em>Frances Wilson’s “Burning Man: The Ascent of DH Lawrence” is published by Bloomsbury</em></p>



<p><em><strong>[See also: <a href="https://www.newstatesman.com/culture/art-design/2025/04/david-hockney-writ-large" target="_blank" rel="noopener">David Hockney writ large</a>]</strong></em></p>
<div>
    <h6>Content from our partners</h6>

        
            
            
        </div>

                        
                                        
        

    
<p>This article appears in the 10 Apr 2025 issue of the New Statesman, <a href="https://www.newstatesman.com/magazine/spring-special-2025"><span>Spring Special 2025</span></a></p>                
                                    <!-- <div class="dianomiMainDiv" style="min-height: 50px;position: relative!important;">
         
                        <div id='div-gpt-ad-3393934-1'>
                        <script>
                            googletag.cmd.push(function() { googletag.display('div-gpt-ad-3393934-1'); });
                        </script>
                        </div>
                    </div> -->
                    
                    
				            </div><!-- .entry-content /-->

        



    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Reddit Bot Drove Me Insane (153 pts)]]></title>
            <link>https://posthuman.blog/this-reddit-post-fried-my-brain/</link>
            <guid>43672139</guid>
            <pubDate>Sun, 13 Apr 2025 12:03:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://posthuman.blog/this-reddit-post-fried-my-brain/">https://posthuman.blog/this-reddit-post-fried-my-brain/</a>, See on <a href="https://news.ycombinator.com/item?id=43672139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-04-12T11:00Z">
                    12 Apr, 2025
                </time>
            </i>
        </p>
    

    <p>I'm doomscrolling Reddit.</p>
<p>Every post is either political ragebait, recycled "funny" cat videos, "Am I the asshole for divorcing my husband after he killed our two children while drunk and high?"-type slop, or tired wojack memes.</p>
<p>Then, finally: an authentic, human-sounding title.</p>
<p>"Anyone else feel like the internet is just… broken now?"</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/posthuman/post-1.webp" alt="post"></p>
<p>The post has nearly 6,000 upvotes, hundreds of comments, and an unsettling sense of genuine despair:</p>
<p>"Everything online feels either like an ad, a hustle, or someone desperately trying to go viral. Nothing feels real anymore."</p>
<p>It resonates deeply. But as I read further, something nags at the back of my mind. The wording, the rhythm is too perfectly calibrated, suspiciously optimized to trigger maximum relatability. I click on the poster's username.</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/posthuman/profile-1.webp" alt="profile"></p>
<p>Their profile is a barren wasteland of karma-farming garbage: viral pet clips, recycled feel-good stories, endless reposted memes. They churn out multiple threads daily yet never engage in comments. Typical bot behavior.</p>
<p>Returning to the original post, the last sentence catches my eye:</p>
<p>"This was written in 1928—it’s incredible how it predicted the moment we’re living in today and where we're heading."</p>
<p>The sentence is underlined, and colored blue: it's a hyperlink. Embedded neatly into the text, it uses a shortened domain "rddit.org". At first it seems legit. Platforms do shorten links for tracking and branding, after all. Twitter has t.co, Facebook uses fb.me. Makes sense Reddit might have something similar.</p>
<p>Yet I've never noticed Reddit using "rddit.org" before. Curiosity, perhaps paranoia, drives me to a quick WHOIS lookup.</p>
<p>Turns out "rddit.org" isn't owned by Reddit. It’s registered anonymously via a cheap freemium link shortener. It could redirect anywhere. I know better than to click shady links on Reddit...</p>
<p>I click it.</p>
<p>I'm swiftly redirected to Amazon, landing on a listing for a modern, illustrated edition of Edward L. Bernays' classic: "Propaganda." And there it is, undeniable in the URL bar: the affiliate tag, "manwithhairwe-20".</p>
<p>The book has thirteen oddly generic reviews. After clicking my way to the illustrator's Amazon profile, the truth emerges: the seller specializes in selling classic texts freshly "enhanced" with AI-generated art.</p>
<p>An AI-powered bot pretending to be a human, lamenting AI-powered bots who pretend to be human, to gain human trust, so that it can covertly market AI-illustrated books. The Trojan horse of late-stage capitalism, cyberpunk dystopia and fuckity-fuck-what-the-fuck-is-going-on.</p>
<p>I scroll back to the comments. There's hundreds of users interacting, none apparently noticing the ruse. The top comment mentions something called "Dead Internet Theory": the belief that most online interactions are automated loops of bots communicating with eachother.</p>
<p>The irony hits like a train. Did anyone commenting realize they were trying to engage with a bot designed to monetize their empathy? Maybe they were also bots, spiraling endlessly into their algorithmically optimized oblivion?</p>
<p>Sorting by controversial, I find one tiny, nearly invisible, buried comment:</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/posthuman/comment-1.webp" alt="comment"></p>
<p>Is this commenter the only other surviving human? Or just another bot, designed to provoke more comments, more engagement?</p>
<p>My browser tabs multiply frantically. Reddit melts into conspiracy forums, WHOIS lookups, and archived Amazon profiles. Everything is spinning.</p>
<p>A bot selling fake empathy to promote fake products through a fake sense of community.</p>
<p>Maybe nothing is real anymore.</p>
<p>Was my spiraling paranoia exactly what they wanted? To drive me insane, so that I click more frantically, driving engagement metrics higher?</p>
<p>Are they watching, judging my reaction whilst calibrating tomorrow's psyop?</p>
<p>Quoting Orwell feels cliché:</p>
<p>"If you want a picture of the future, <del>imagine a boot stamping on a human face</del> imagine a bot making you sad and angry in order to farm engagement and sell you AI-generated slop--forever."</p>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Whenever – typed and DST-safe datetimes for Python (192 pts)]]></title>
            <link>https://github.com/ariebovenberg/whenever</link>
            <guid>43671308</guid>
            <pubDate>Sun, 13 Apr 2025 09:12:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ariebovenberg/whenever">https://github.com/ariebovenberg/whenever</a>, See on <a href="https://news.ycombinator.com/item?id=43671308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">⏰ Whenever</h2><a id="user-content--whenever" aria-label="Permalink: ⏰ Whenever" href="#-whenever"></a></p>
<p dir="auto"><a href="https://pypi.python.org/pypi/whenever" rel="nofollow"><img src="https://camo.githubusercontent.com/4e74f63922fe9f56e3d70c0fbeed956f0a125040e18bb4ae7dc9d4d1358e9960/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7768656e657665722e7376673f7374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="" data-canonical-src="https://img.shields.io/pypi/v/whenever.svg?style=flat-square&amp;color=blue"></a>
<a href="https://pypi.python.org/pypi/whenever" rel="nofollow"><img src="https://camo.githubusercontent.com/8ce85e0a35a60938657735fbca66544717e1e3deb6d7c507934c86a4f408ea66/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7768656e657665722e7376673f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/pypi/pyversions/whenever.svg?style=flat-square"></a>
<a href="https://pypi.python.org/pypi/whenever" rel="nofollow"><img src="https://camo.githubusercontent.com/b889c52d3c2a3b09e46dc4242bf61ee73e2b0a169701b52ffed29a661b61a7e4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7768656e657665722e7376673f7374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="" data-canonical-src="https://img.shields.io/pypi/l/whenever.svg?style=flat-square&amp;color=blue"></a>
<a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-strict" rel="nofollow"><img src="https://camo.githubusercontent.com/407127697b56855b4a682102b20524f780da1e716901b9f8e5b03bdd5c148e7d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d7970792d7374726963742d666f72657374677265656e3f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/badge/mypy-strict-forestgreen?style=flat-square"></a>
<a href="https://github.com/ariebovenberg/whenever"><img src="https://camo.githubusercontent.com/eac205dbafd14a7c56d3470ab026a51508a217827d349ce0c5b4a9d62e3e7f41/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d666f72657374677265656e3f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/badge/coverage-100%25-forestgreen?style=flat-square"></a>
<a href="https://github.com/ariebovenberg/whenever"><img src="https://camo.githubusercontent.com/78ca0108cd2e4c0c07e5c95aa381db672c00e2594d551defa19597fd13352ab4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f61726965626f76656e626572672f7768656e657665722f636865636b732e796d6c3f6272616e63683d6d61696e267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/github/actions/workflow/status/ariebovenberg/whenever/checks.yml?branch=main&amp;style=flat-square"></a>
<a href="http://whenever.readthedocs.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/523d0dfc97a5f853280a2e080e6b1efae52b385cd5449cd895656b604ff0279d/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f7768656e657665722e7376673f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/readthedocs/whenever.svg?style=flat-square"></a></p>
<p dir="auto"><strong>Typed and DST-safe datetimes for Python, available in Rust or pure Python.</strong></p>
<p dir="auto">Do you cross your fingers every time you work with Python's datetime—hoping that you didn't mix naive and aware?
or that you avoided its <a href="https://dev.arie.bovenberg.net/blog/python-datetime-pitfalls/" rel="nofollow">other pitfalls</a>?
There’s no way to be sure...</p>
<p dir="auto">✨ Until now! ✨</p>
<p dir="auto"><em>Whenever</em> helps you write <strong>correct</strong> and <strong>type checked</strong> datetime code,
using <strong>well-established concepts</strong> from <a href="#acknowledgements">modern libraries</a> in other languages.
It's also <strong>way faster</strong> than other third-party libraries—and usually the standard library as well.
If performance isn't your top priority, a <strong>pure Python</strong> version is available as well.</p>
  <p dir="auto">
    <themed-picture data-catalyst-inline="true"><picture>
        <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ariebovenberg/whenever/main/benchmarks/comparison/graph-dark.svg">
        <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/ariebovenberg/whenever/main/benchmarks/comparison/graph-light.svg">
        <img alt="Shows a bar chart with benchmark results." src="https://raw.githubusercontent.com/ariebovenberg/whenever/main/benchmarks/comparison/graph-light.svg">
    </picture></themed-picture>
  </p>
  <p dir="auto">
    <i>RFC3339-parse, normalize, compare to now, shift, and change timezone (1M times)</i>
  </p>

<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> <strong>Note</strong>: A 1.0 release is coming soon. Until then, the API may change
as we gather feedback and improve the library.
Leave a ⭐️ on GitHub if you'd like to see how this project develops!</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why not the standard library?</h2><a id="user-content-why-not-the-standard-library" aria-label="Permalink: Why not the standard library?" href="#why-not-the-standard-library"></a></p>
<p dir="auto">Over 20+ years, Python's <code>datetime</code> has grown
out of step with what you'd expect from a modern datetime library.
Two points stand out:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>It doesn't always account for Daylight Saving Time (DST)</strong>.
Here is a simple example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="bedtime = datetime(2023, 3, 25, 22, tzinfo=ZoneInfo(&quot;Europe/Paris&quot;))
full_rest = bedtime + timedelta(hours=8)
# It returns 6am, but should be 7am—because we skipped an hour due to DST!"><pre><span>bedtime</span> <span>=</span> <span>datetime</span>(<span>2023</span>, <span>3</span>, <span>25</span>, <span>22</span>, <span>tzinfo</span><span>=</span><span>ZoneInfo</span>(<span>"Europe/Paris"</span>))
<span>full_rest</span> <span>=</span> <span>bedtime</span> <span>+</span> <span>timedelta</span>(<span>hours</span><span>=</span><span>8</span>)
<span># It returns 6am, but should be 7am—because we skipped an hour due to DST!</span></pre></div>
<p dir="auto">Note this isn't a bug, but a design decision that DST is only considered
when calculations involve <em>two</em> timezones.
If you think this is surprising, you
<a href="https://github.com/python/cpython/issues/91618" data-hovercard-type="issue" data-hovercard-url="/python/cpython/issues/91618/hovercard">are</a>
<a href="https://github.com/python/cpython/issues/116035" data-hovercard-type="issue" data-hovercard-url="/python/cpython/issues/116035/hovercard">not</a>
<a href="https://github.com/python/cpython/issues/112638" data-hovercard-type="issue" data-hovercard-url="/python/cpython/issues/112638/hovercard">alone</a>.</p>
</li>
<li>
<p dir="auto"><strong>Typing can't distinguish between naive and aware datetimes</strong>.
Your code probably only works with one or the other,
but there's no way to enforce this in the type system!</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Does this expect naive or aware? Can't tell!
def schedule_meeting(at: datetime) -> None: ..."><pre><span># Does this expect naive or aware? Can't tell!</span>
<span>def</span> <span>schedule_meeting</span>(<span>at</span>: <span>datetime</span>) <span>-&gt;</span> <span>None</span>: ...</pre></div>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why not other libraries?</h2><a id="user-content-why-not-other-libraries" aria-label="Permalink: Why not other libraries?" href="#why-not-other-libraries"></a></p>
<p dir="auto">There are two other popular third-party libraries, but they don't (fully)
address these issues. Here's how they compare to <em>whenever</em> and the standard library:</p>
<div dir="auto">
<markdown-accessiblity-table><table>
<thead>
<tr>
<th></th>
<th>Whenever</th>
<th>datetime</th>
<th>Arrow</th>
<th>Pendulum</th>
</tr>
</thead>
<tbody>
<tr>
<td>DST-safe</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td><g-emoji alias="warning">⚠️</g-emoji></td>
</tr>
<tr>
<td>Typed aware/naive</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>Fast</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
</div>
<p dir="auto"><a href="https://pypi.org/project/arrow/" rel="nofollow"><strong>Arrow</strong></a>
is probably the most historically popular 3rd party datetime library.
It attempts to provide a more "friendly" API than the standard library,
but doesn't address the core issues:
it keeps the same footguns, and its decision to reduce the number
of types to just one (<code>arrow.Arrow</code>) means that it's even harder
for typecheckers to catch mistakes.</p>
<p dir="auto"><a href="https://pypi.org/project/pendulum/" rel="nofollow"><strong>Pendulum</strong></a>
arrived on the scene in 2016, promising better DST-handling,
as well as improved performance.
However, it only fixes <a href="https://dev.arie.bovenberg.net/blog/python-datetime-pitfalls/#datetime-library-scorecard" rel="nofollow"><em>some</em> DST-related pitfalls</a>,
and its performance has significantly <a href="https://github.com/sdispater/pendulum/issues/818" data-hovercard-type="issue" data-hovercard-url="/python-pendulum/pendulum/issues/818/hovercard">degraded over time</a>.
Additionally, it's in maintenance limbo with only one release in the last four years,
and many issues remaining unaddressed.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why use whenever?</h2><a id="user-content-why-use-whenever" aria-label="Permalink: Why use whenever?" href="#why-use-whenever"></a></p>
<ul dir="auto">
<li>🌐 DST-safe arithmetic</li>
<li>🛡️ Typesafe API prevents common bugs</li>
<li>✅ Fixes issues <a href="https://dev.arie.bovenberg.net/blog/python-datetime-pitfalls/#datetime-library-scorecard" rel="nofollow">arrow/pendulum don't</a></li>
<li>⚖️  Based on proven and <a href="https://www.youtube.com/watch?v=saeKBuPewcU" rel="nofollow">familiar concepts</a></li>
<li>⚡️ Unmatched performance</li>
<li>💎 Thoroughly tested and documented</li>
<li>📆 Support for date arithmetic</li>
<li>⏱️ Nanosecond precision</li>
<li>🦀 Rust!—but with a <a href="https://whenever.readthedocs.io/en/latest/faq.html#how-can-i-use-the-pure-python-version" rel="nofollow">pure-Python option</a></li>
<li>🚀 Support for the latest GIL-related improvements (experimental)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quickstart</h2><a id="user-content-quickstart" aria-label="Permalink: Quickstart" href="#quickstart"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from whenever import (
...    # Explicit types for different use cases
...    Instant,
...    ZonedDateTime,
...    LocalDateTime,
... )

# Identify moments in time, without timezone/calendar complexity
>>> now = Instant.now()
Instant(2024-07-04 10:36:56Z)

# Simple, explicit conversions
>>> now.to_tz(&quot;Europe/Paris&quot;)
ZonedDateTime(2024-07-04 12:36:56+02:00[Europe/Paris])

# A 'naive' local time can't accidentally mix with other types.
# You need to explicitly convert it and handle ambiguity.
>>> party_invite = LocalDateTime(2023, 10, 28, hour=22)
>>> party_invite.add(hours=6)
Traceback (most recent call last):
  ImplicitlyIgnoringDST: Adjusting a local datetime implicitly ignores DST [...]
>>> party_starts = party_invite.assume_tz(&quot;Europe/Amsterdam&quot;)
ZonedDateTime(2023-10-28 22:00:00+02:00[Europe/Amsterdam])

# DST-safe arithmetic
>>> party_starts.add(hours=6)
ZonedDateTime(2023-10-29 03:00:00+01:00[Europe/Amsterdam])

# Comparison and equality
>>> now > party_starts
True

# Rounding and truncation
>>> now.round(&quot;minute&quot;, increment=15)
Instant(2024-07-04 10:30:00Z)

# Formatting &amp; parsing common formats (ISO8601, RFC3339, RFC2822)
>>> now.format_rfc2822()
&quot;Thu, 04 Jul 2024 10:36:56 GMT&quot;

# If you must: you can convert to/from the standard lib
>>> now.py_datetime()
datetime.datetime(2024, 7, 4, 10, 36, 56, tzinfo=datetime.timezone.utc)"><pre><span>&gt;</span><span>&gt;&gt;</span> <span>from</span> <span>whenever</span> <span>import</span> (
...    <span># Explicit types for different use cases</span>
...    <span>Instant</span>,
...    <span>ZonedDateTime</span>,
...    <span>LocalDateTime</span>,
... )

<span># Identify moments in time, without timezone/calendar complexity</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>now</span> <span>=</span> <span>Instant</span>.<span>now</span>()
<span>Instant</span>(<span>2024</span><span>-</span><span>07</span><span>-</span><span>04</span> <span>10</span>:<span>36</span>:<span>56</span><span>Z</span>)

<span># Simple, explicit conversions</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>to_tz</span>(<span>"Europe/Paris"</span>)
<span>ZonedDateTime</span>(<span>2024</span><span>-</span><span>07</span><span>-</span><span>04</span> <span>12</span>:<span>36</span>:<span>56</span><span>+</span><span>02</span>:<span>00</span>[<span>Europe</span><span>/</span><span>Paris</span>])

<span># A 'naive' local time can't accidentally mix with other types.</span>
<span># You need to explicitly convert it and handle ambiguity.</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>party_invite</span> <span>=</span> <span>LocalDateTime</span>(<span>2023</span>, <span>10</span>, <span>28</span>, <span>hour</span><span>=</span><span>22</span>)
<span>&gt;</span><span>&gt;&gt;</span> <span>party_invite</span>.<span>add</span>(<span>hours</span><span>=</span><span>6</span>)
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>ImplicitlyIgnoringDST</span>: <span>Adjusting</span> <span>a</span> <span>local</span> <span>datetime</span> <span>implicitly</span> <span>ignores</span> <span>DST</span> [...]
<span>&gt;&gt;</span><span>&gt;</span> <span>party_starts</span> <span>=</span> <span>party_invite</span>.<span>assume_tz</span>(<span>"Europe/Amsterdam"</span>)
<span>ZonedDateTime</span>(<span>2023</span><span>-</span><span>10</span><span>-</span><span>28</span> <span>22</span>:<span>00</span>:<span>00</span><span>+</span><span>02</span>:<span>00</span>[<span>Europe</span><span>/</span><span>Amsterdam</span>])

<span># DST-safe arithmetic</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>party_starts</span>.<span>add</span>(<span>hours</span><span>=</span><span>6</span>)
<span>ZonedDateTime</span>(<span>2023</span><span>-</span><span>10</span><span>-</span><span>29</span> <span>03</span>:<span>00</span>:<span>00</span><span>+</span><span>01</span>:<span>00</span>[<span>Europe</span><span>/</span><span>Amsterdam</span>])

<span># Comparison and equality</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span> <span>&gt;</span> <span>party_starts</span>
<span>True</span>

<span># Rounding and truncation</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>round</span>(<span>"minute"</span>, <span>increment</span><span>=</span><span>15</span>)
<span>Instant</span>(<span>2024</span><span>-</span><span>07</span><span>-</span><span>04</span> <span>10</span>:<span>30</span>:<span>00</span><span>Z</span>)

<span># Formatting &amp; parsing common formats (ISO8601, RFC3339, RFC2822)</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>format_rfc2822</span>()
<span>"Thu, 04 Jul 2024 10:36:56 GMT"</span>

<span># If you must: you can convert to/from the standard lib</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>py_datetime</span>()
<span>datetime</span>.<span>datetime</span>(<span>2024</span>, <span>7</span>, <span>4</span>, <span>10</span>, <span>36</span>, <span>56</span>, <span>tzinfo</span><span>=</span><span>datetime</span>.<span>timezone</span>.<span>utc</span>)</pre></div>
<p dir="auto">Read more in the <a href="https://whenever.readthedocs.io/en/latest/overview.html" rel="nofollow">feature overview</a>
or <a href="https://whenever.readthedocs.io/en/latest/api.html" rel="nofollow">API reference</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Roadmap</h2><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<ul dir="auto">
<li>
<p dir="auto">🧪 <strong>0.x</strong>: get to feature-parity, process feedback, and tweak the API:</p>
<ul dir="auto">
<li>✅ Datetime classes</li>
<li>✅ Deltas</li>
<li>✅ Date and time of day (separate from datetime)</li>
<li>✅ Implement Rust extension for performance</li>
<li>🚧 Tweaks to the delta API</li>
</ul>
</li>
<li>
<p dir="auto">🔒 <strong>1.0</strong>: API stability and backwards compatibility</p>
<ul dir="auto">
<li>🚧 Customizable parsing and formatting</li>
<li>🚧 Intervals</li>
<li>🚧 Ranges and recurring times</li>
<li>🚧 Parsing leap seconds</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Limitations</h2><a id="user-content-limitations" aria-label="Permalink: Limitations" href="#limitations"></a></p>
<ul dir="auto">
<li>Supports the proleptic Gregorian calendar between 1 and 9999 AD</li>
<li>Timezone offsets are limited to whole seconds (consistent with IANA TZ DB)</li>
<li>No support for leap seconds (consistent with industry standards and other modern libraries)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Versioning and compatibility policy</h2><a id="user-content-versioning-and-compatibility-policy" aria-label="Permalink: Versioning and compatibility policy" href="#versioning-and-compatibility-policy"></a></p>
<p dir="auto"><strong>Whenever</strong> follows semantic versioning.
Until the 1.0 version, the API may change with minor releases.
Breaking changes will be meticulously explained in the changelog.
Since the API is fully typed, your typechecker and/or IDE
will help you adjust to any API changes.</p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> <strong>Note</strong>: until 1.x, pickled objects may not be unpicklable across
versions. After 1.0, backwards compatibility of pickles will be maintained
as much as possible.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto"><strong>Whenever</strong> is licensed under the MIT License.
The binary wheels contain Rust dependencies which are licensed under
similarly permissive licenses (MIT, Apache-2.0, and others).
For more details, see the licenses included in the distribution.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgements</h2><a id="user-content-acknowledgements" aria-label="Permalink: Acknowledgements" href="#acknowledgements"></a></p>
<p dir="auto">This project is inspired by—and borrows most concepts from—the following projects. Check them out!</p>
<ul dir="auto">
<li><a href="https://tc39.es/proposal-temporal/docs/" rel="nofollow">Temporal</a></li>
<li><a href="https://nodatime.org/" rel="nofollow">Noda Time</a> and <a href="https://www.joda.org/joda-time/" rel="nofollow">Joda Time</a></li>
</ul>
<p dir="auto">The benchmark comparison graph is based on the one from the <a href="https://github.com/astral-sh/ruff">Ruff</a> project.
For timezone data, <strong>Whenever</strong> uses Python's own <code>zoneinfo</code> module.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Go channels are bad (2016) (114 pts)]]></title>
            <link>https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad/</link>
            <guid>43670373</guid>
            <pubDate>Sun, 13 Apr 2025 05:43:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad/">https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad/</a>, See on <a href="https://news.ycombinator.com/item?id=43670373">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  

<p><em>Update: If you’re coming to this blog post from a compendium titled “Go is
not good,” I want to make it clear that I am ashamed to be on such a list. Go
is absolutely the least worst programming language I’ve ever used. At the
time I wrote this, I wanted to curb a trend I was seeing, namely, overuse of
one of the more warty parts of Go. I still think channels could be much better,
but overall, Go is wonderful. It’s like if your favorite toolbox had
<a href="https://blog.codinghorror.com/content/images/uploads/2012/06/6a0120a85dcdae970b017742d249d5970d-800wi.jpg">this</a>
in it; the tool can have uses (even if it could have had more uses), and it
can still be your favorite toolbox!</em></p>

<p><em>Update 2: I would be remiss if I didn’t point out this excellent survey of real
issues: <a href="https://songlh.github.io/paper/go-study.pdf">Understanding Real-World Concurrency Bugs In Go</a>.
A significant finding of this survey is that… Go channels cause lots of bugs.</em></p>

<p>I’ve been using Google’s <a href="http://golang.org/">Go programming language</a> on and
off since mid-to-late 2010, and I’ve had legitimate product code written in Go
for <a href="http://www.spacemonkey.com/">Space Monkey</a> since January 2012 (before Go
1.0!). My initial experience with Go was back when I was researching Hoare’s
<a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes</a>
model of concurrency and the <a href="https://en.wikipedia.org/wiki/%CE%A0-calculus">π-calculus</a>
under <a href="http://matt.might.net/">Matt Might</a>’s
<a href="http://www.ucombinator.org/">UCombinator research group</a> as part of my
(<a href="https://www.jtolio.com/writing/2015/11/research-log-cell-states-and-microarrays/">now redirected</a>)
PhD work to better enable multicore development. Go was announced right then
(how serendipitous!) and I immediately started kicking tires.</p>

<p>It quickly became a core part of Space Monkey development. Our production
systems at Space Monkey currently account for over 425k lines of pure
Go (<em>not</em> counting all of our vendored libraries, which would make it just shy
of 1.5 million lines), so not the most Go you’ll ever
see, but for the relatively young language we’re heavy users. We’ve
<a href="https://www.jtolio.com/writing/2014/04/go-space-monkey/">written about our Go usage</a>
before. We’ve open-sourced some fairly heavily used libraries; many people seem
to be fans of our
<a href="https://godoc.org/github.com/spacemonkeygo/openssl">OpenSSL bindings</a>
(which are faster than <a href="https://golang.org/pkg/crypto/tls/">crypto/tls</a>, but
please keep openssl itself up-to-date!), our
<a href="https://godoc.org/github.com/spacemonkeygo/errors">error handling library</a>,
<a href="https://godoc.org/github.com/spacemonkeygo/spacelog">logging library</a>, and
<a href="https://godoc.org/gopkg.in/spacemonkeygo/monitor.v1">metric collection library/zipkin client</a>.
We use Go, we love Go, we think it’s the least bad programming language for our
needs we’ve used so far.</p>

<p>Although I don’t think I can talk myself out of mentioning my widely avoided
<a href="https://github.com/jtolds/gls">goroutine-local-storage library</a> here either
(which even though it’s a hack that you shouldn’t use, it’s a beautiful hack),
hopefully my other experience will suffice as valid credentials that I kind of
know what I’m talking about before I explain my deliberately inflamatory post
title.</p>




<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/darth-helmet.jpg" alt="Darth Helmet" onmouseover="this.src='\/images\/wat\/darth-helmet.gif';" onclick="this.src='\/images\/wat\/darth-helmet.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/darth-helmet.jpg';">

</figure>

</div>


<h2 id="wait-what:7de476e370ca6a780a51fd680c5a51dd">Wait, what?</h2>

<p>If you ask the proverbial programmer on the street what’s so special
about Go, she’ll most likely tell you that Go is most known for channels and
goroutines. Go’s theoretical underpinnings are heavily based in Hoare’s CSP
model, which is itself incredibly fascinating and interesting and I firmly
believe has much more to yield than we’ve appropriated so far.</p>

<p>CSP (and the π-calculus) both use communication as the core synchronization
primitive, so it makes sense Go would have channels. Rob Pike has been
fascinated with CSP (with good reason) for a
<a href="https://en.wikipedia.org/wiki/Newsqueak">considerable</a>
<a href="https://en.wikipedia.org/wiki/Alef_%28programming_language%29">while</a>
<a href="https://en.wikipedia.org/wiki/Limbo_%28programming_language%29">now</a>.</p>

<p>But from a pragmatic perspective (which Go prides itself on), Go got channels
wrong. Channels as implemented are pretty much a solid anti-pattern in my book
at this point. Why? Dear reader, let me count the ways.</p>




<h3 id="you-probably-won-t-end-up-using-just-channels:7de476e370ca6a780a51fd680c5a51dd">You probably won’t end up using just channels.</h3>

<p>Hoare’s Communicating Sequential Processes is a computational model where
essentially the only synchronization primitive is sending or receiving on a
channel. As soon as you use a mutex, semaphore, or condition variable, bam,
you’re no longer in pure CSP land. Go programmers often tout this model and
philosophy through the chanting of the
<a href="http://lesswrong.com/lw/k5/cached_thoughts/">cached thought</a>
“<a href="https://blog.golang.org/share-memory-by-communicating">share memory by communicating</a>.”</p>

<p>So let’s try and write a small program using just CSP in Go! Let’s make a
high score receiver. All we will do is keep track of the largest high score
value we’ve seen. That’s it.</p>

<p>First, we’ll make a <code>Game</code> struct.</p>

<div><pre><span></span><span>type</span> Game <span>struct</span> {
  bestScore <span>int</span>
  scores    <span>chan</span> <span>int</span>
}
</pre></div>


<p><code>bestScore</code> isn’t going to be protected by a mutex! That’s fine, because we’ll
simply have one goroutine manage its state and receive new scores over a
channel.</p>

<div><pre><span></span><span>func</span> (g *Game) run() {
  <span>for</span> score := <span>range</span> g.scores {
    <span>if</span> g.bestScore &lt; score {
      g.bestScore = score
    }
  }
}
</pre></div>


<p>Okay, now we’ll make a helpful constructor to start a game.</p>

<div><pre><span></span><span>func</span> NewGame() (g *Game) {
  g = &amp;Game{
    bestScore: 0,
    scores:    make(<span>chan</span> <span>int</span>),
  }
  <span>go</span> g.run()
  <span>return</span> g
}
</pre></div>


<p>Next, let’s assume someone has given us a <code>Player</code> that can return scores.
It might also return an error, cause hey maybe the incoming TCP stream can die
or something, or the player quits.</p>

<div><pre><span></span><span>type</span> Player <span>interface</span> {
  NextScore() (score <span>int</span>, err <span>error</span>)
}
</pre></div>


<p>To handle the player, we’ll assume all errors are fatal and pass received
scores down the channel.</p>

<div><pre><span></span><span>func</span> (g *Game) HandlePlayer(p Player) <span>error</span> {
  <span>for</span> {
    score, err := p.NextScore()
    <span>if</span> err != <span>nil</span> {
      <span>return</span> err
    }
    g.scores &lt;- score
  }
}
</pre></div>


<p>Yay! Okay, we have a <code>Game</code> type that can keep track of the highest score a
<code>Player</code> receives in a thread-safe way.</p>

<p>You wrap up your development and you’re on your way to having customers. You
make this game server public and you’re incredibly successful! Lots of games
are being created with your game server.</p>

<p>Soon, you discover people sometimes leave your game. Lots of games no longer
have any players playing, but nothing stopped the game loop. You are getting
overwhelmed by dead <code>(*Game).run</code> goroutines.</p>

<p><strong>Challenge:</strong> fix the goroutine leak above without mutexes or panics.
For real, scroll up to the above code and come up with a plan for fixing this
problem using just channels.</p>



<p>For what it’s worth, it totally can be done with channels only, but observe the
simplicity of the following solution which doesn’t even have this problem:</p>

<div><pre><span></span><span>type</span> Game <span>struct</span> {
  mtx sync.Mutex
  bestScore <span>int</span>
}

<span>func</span> NewGame() *Game {
  <span>return</span> &amp;Game{}
}

<span>func</span> (g *Game) HandlePlayer(p Player) <span>error</span> {
  <span>for</span> {
    score, err := p.NextScore()
    <span>if</span> err != <span>nil</span> {
      <span>return</span> err
    }
    g.mtx.Lock()
    <span>if</span> g.bestScore &lt; score {
      g.bestScore = score
    }
    g.mtx.Unlock()
  }
}
</pre></div>


<p>Which one would you rather work on? Don’t be deceived into thinking that the
channel solution somehow makes this more readable and understandable in more
complex cases. Teardown is very hard. This sort of teardown is just a piece of
cake with a mutex, but the hardest thing to work out with Go-specific channels
only. Also, if anyone replies that channels sending channels is easier to
reason about here it will cause me an immediate head-to-desk motion.</p>

<p>Importantly, this particular case might actually be <em>easily</em> solved <em>with
channels</em> with some runtime assistance Go doesn’t provide! Unfortunately, as
it stands, there are simply a surprising amount of problems that are solved
better with traditional synchronization primitives than with Go’s version of
CSP. We’ll talk about what Go could have done to make this case easier later.</p>

<p><strong>Exercise:</strong> Still skeptical? Try making both solutions above (channel-only
vs. mutex-only) stop asking for scores from <code>Players</code> once <code>bestScore</code> is 100
or greater. Go ahead and open your text editor. This is a small, toy problem.</p>

<p>The summary here is that you will be using traditional synchronization
primitives in addition to channels if you want to do anything real.</p>




<h3 id="channels-are-slower-than-implementing-it-yourself:7de476e370ca6a780a51fd680c5a51dd">Channels are slower than implementing it yourself</h3>

<p>One of the things I assumed about Go being so heavily based in CSP theory is
that there should be some pretty killer scheduler optimizations the runtime
can make with channels. Perhaps channels aren’t always the most straightforward
primitive, but surely they’re efficient and fast, right?</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/jon-stewart.jpg" alt="John Stewart" onmouseover="this.src='\/images\/wat\/jon-stewart.gif';" onclick="this.src='\/images\/wat\/jon-stewart.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/jon-stewart.jpg';">

</figure>

</div>


<p>As <a href="https://twitter.com/HiattDustin">Dustin Hiatt</a> points out on
<a href="http://bravenewgeek.com/go-is-unapologetically-flawed-heres-why-we-use-it/">Tyler Treat’s post about Go</a>,</p>

<blockquote>
<p>Behind the scenes, channels are using locks to serialize access and provide
threadsafety. So by using channels to synchronize access to memory, you are,
in fact, using locks; locks wrapped in a threadsafe queue. So how do Go’s
fancy locks compare to just using mutex’s from their standard library <code>sync</code>
package? The following numbers were obtained by using Go’s builtin
benchmarking functionality to serially call Put on a single set of their
respective types.</p>

<pre><code>BenchmarkSimpleSet-8 3000000 391 ns/op
BenchmarkSimpleChannelSet-8 1000000 1699 ns/o
</code></pre>
</blockquote>

<p>It’s a similar story with unbuffered channels, or even the same test under
contention instead of run serially.</p>

<p>Perhaps the Go scheduler will improve, but in the meantime, good old mutexes
and condition variables are very good, efficient, and fast. If you want
performance, you use the tried and true methods.</p>




<h3 id="channels-don-t-compose-well-with-other-concurrency-primitives:7de476e370ca6a780a51fd680c5a51dd">Channels don’t compose well with other concurrency primitives</h3>

<p>Alright, so hopefully I have convinced you that you’ll at least be interacting
with primitives besides channels sometimes. The standard library certainly
seems to prefer traditional synchronization primitives over channels.</p>

<p>Well guess what, it’s actually somewhat challenging to use channels alongside
mutexes and condition variables correctly!</p>

<p>One of the interesting things about channels that makes a lot of sense coming
from CSP is that channel sends are synchronous. A channel send and channel
receive are intended to be synchronization barriers, and the send and receive
should happen at the same virtual time. That’s wonderful if you’re in
well-executed CSP-land.</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/obama.jpg" alt="Barack Obama" onmouseover="this.src='\/images\/wat\/obama.gif';" onclick="this.src='\/images\/wat\/obama.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/obama.jpg';">

</figure>

</div>


<p>Pragmatically, Go channels also come in a buffered variety. You can allocate a
fixed amount of space to account for possible buffering so that sends and
receives are disparate events, but the buffer size is capped. Go doesn’t
provide a way to have arbitrarily sized buffers - you have to allocate the
buffer size in advance. <em>This is fine</em>, I’ve seen people argue on the mailing
list, <em>because memory is bounded anyway.</em></p>

<p>Wat.</p>

<p>This is a bad answer. There’s all sorts of reasons to use an arbitrarily
buffered channel. If we knew everything up front, why even have <code>malloc</code>?</p>




<p>Not having arbitrarily buffered channels means that a naive send on <em>any</em>
channel could block at any time. You want to send on a channel and update some
other bookkeeping under a mutex? Careful! Your channel send might block!</p>

<div><pre><span></span>  <span>// ...</span>
  s.mtx.Lock()
  <span>// ...</span>
  s.ch &lt;- val <span>// might block!</span>
  s.mtx.Unlock()
  <span>// ...</span>
</pre></div>


<p>This is a recipe for dining philosopher dinner fights. If you take a lock, you
should quickly update state and release it and not do anything blocking under
the lock if possible.</p>

<p>There is a way to do a non-blocking send on a channel in Go, but it’s not the
default behavior. Assume we have a channel <code>ch := make(chan int)</code> and we want
to send the value <code>1</code> on it without blocking. Here is the minimum amount of
typing you have to do to send without blocking:</p>

<div><pre><span></span>  <span>select</span> {
  <span>case</span> ch &lt;- 1: <span>// it sent</span>
  <span>default</span>: <span>// it didn't</span>
  }
</pre></div>


<p>This isn’t what naturally leaps to mind for beginning Go programmers.</p>

<p>The summary is that because many operations on channels block, it takes careful
reasoning about philosophers and their dining to successfully use channel
operations alongside and under mutex protection, without causing deadlocks.</p>




<h3 id="callbacks-are-strictly-more-powerful-and-don-t-require-unnecessary-goroutines:7de476e370ca6a780a51fd680c5a51dd">Callbacks are strictly more powerful and don’t require unnecessary goroutines.</h3>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/yael-grobglas.jpg" alt="Yael Grobglas" onmouseover="this.src='\/images\/wat\/yael-grobglas.gif';" onclick="this.src='\/images\/wat\/yael-grobglas.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/yael-grobglas.jpg';">

</figure>

</div>


<p>Whenever an API uses a channel, or whenever I point out that a channel makes
something hard, someone invariably points out that I should just spin up
a goroutine to read off the channel and make whatever translation or fix I need
as it reads of the channel.</p>

<p>Um, no. What if my code is in a hotpath? There’s very few instances that
require a channel, and if your API could have been designed with mutexes,
semaphores, and callbacks and no additional goroutines (because all event edges
are triggered by API events), then using a channel forces me to add another
stack of memory allocation to my resource usage. Goroutines are much lighter
weight than threads, yes, but lighter weight doesn’t mean the lightest weight
possible.</p>

<p>As I’ve formerly <a href="http://www.informit.com/articles/article.aspx?p=2359758#comment-2061767464">argued in the comments on an article about using channels</a> (lol the internet),
your API can <em>always</em> be more general, <em>always</em> more flexible, and take
drastically less resources if you use callbacks instead of channels.
“Always” is a scary word, but I mean it here. There’s proof-level stuff going
on.</p>

<p>If someone provides a callback-based API to you and you need a channel, you can
provide a callback that sends on a channel with little overhead and full
flexibility.</p>

<p>If, on the other hand, someone provides a channel-based API to you and you need
a callback, you have to spin up a goroutine to read off the channel <em>and</em> you
have to hope that no one tries to send more on the channel when you’re done
reading so you cause blocked goroutine leaks.</p>

<p>For a super simple real-world example, check out the
<a href="https://godoc.org/golang.org/x/net/context">context interface</a> (which
incidentally is an incredibly useful package and what you should be using
instead of <a href="https://github.com/jtolds/gls">goroutine-local storage</a>):</p>

<div><pre><span></span><span>type</span> Context <span>interface</span> {
  ...
  <span>// Done returns a channel that closes when this work unit should be canceled.</span>
  Done() &lt;-<span>chan</span> <span>struct</span>{}

  <span>// Err returns a non-nil error when the Done channel is closed</span>
  Err() <span>error</span>
  ...
}
</pre></div>


<p>Imagine all you want to do is log the corresponding error when the <code>Done()</code>
channel fires. What do you have to do? If you don’t have a good place you’re
already selecting on a channel, you have to spin up a goroutine to deal with
it:</p>

<div><pre><span></span>  <span>go</span> <span>func</span>() {
    &lt;-ctx.Done()
    logger.Errorf(<span>"canceled: %v"</span>, ctx.Err())
  }()
</pre></div>


<p>What if <code>ctx</code> gets garbage collected without closing the channel <code>Done()</code>
returned? Whoops! Just leaked a goroutine!</p>

<p>Now imagine we changed <code>Done</code>’s signature:</p>

<div><pre><span></span>  <span>// Done calls cb when this work unit should be canceled.</span>
  Done(cb <span>func</span>())
</pre></div>


<p>First off, logging is so easy now. Check it out:
<code>ctx.Done(func() { log.Errorf("canceled: %v", ctx.Err()) })</code>.
But lets say you really do need some select behavior. You can just call it like
this:</p>

<div><pre><span></span>  ch := make(<span>chan</span> <span>struct</span>{})
  ctx.Done(<span>func</span>() { close(ch) })
</pre></div>


<p>Voila! No expressiveness lost by using a callback instead. <code>ch</code> works like
the channel <code>Done()</code> used to return, and in the logging case we didn’t need to
spin up a whole new stack. I got to keep my stack traces (if our log package
is inclined to use them); I got to avoid another stack allocation and another
goroutine to give to the scheduler.</p>

<p>Next time you use a channel, ask yourself if there’s some goroutines you could
eliminate if you used mutexes and condition variables instead. If the answer is
yes, your code will be more efficient if you change it. And if you’re trying to
use channels just to be able to use the <code>range</code> keyword over a collection, I’m
going to have to ask you to put your keyboard away or just go back to writing
Python books.</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/zooey-deschanel.jpg" alt="Zooey Deschanel" onmouseover="this.src='\/images\/wat\/zooey-deschanel.gif';" onclick="this.src='\/images\/wat\/zooey-deschanel.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/zooey-deschanel.jpg';">

<figcaption>
      <p>more like Zooey De-channel, amirite</p>
  </figcaption>

</figure>

</div>





<h3 id="the-channel-api-is-inconsistent-and-just-cray-cray:7de476e370ca6a780a51fd680c5a51dd">The channel API is inconsistent and just cray-cray</h3>

<p>Closing or sending on a closed channel panics! Why? If you want to close a
channel, you need to either synchronize its closed state externally (with
mutexes and so forth that don’t compose well!) so that other writers don’t
write to or close a closed channel, or just charge forward and close or write
to closed channels and expect you’ll have to recover any raised panics.</p>

<p>This is such bizarre behavior. Almost every other operation in Go has a way to
avoid a panic (type assertions have the <code>, ok =</code> pattern, for example), but
with channels you just get to deal with it.</p>

<p>Okay, so when a send will fail, channels panic. I guess that makes some kind
of sense. But unlike almost everything else with nil values, sending to a nil
channel won’t panic. Instead, it will block forever! That’s pretty
counter-intuitive. That might be useful behavior, just like having a can-opener
attached to your weed-whacker might be useful (and found in Skymall), but it’s
certainly unexpected. Unlike interacting with nil maps (which do implicit
pointer dereferences), nil interfaces (implicit pointer dereferences),
unchecked type assertions, and all sorts of other things, nil channels exhibit
actual channel behavior, as if a brand new channel was just instantiated for
this operation.</p>

<p>Receives are slightly nicer. What happens when you receive on a closed channel?
Well, that works - you get a zero value. Okay that makes sense I guess. Bonus!
Receives allow you to do a <code>, ok =</code>-style check if the channel was open when
you received your value. Thank heavens we get <code>, ok =</code> here.</p>

<p>But what happens if you receive from a nil channel? <em>Also blocks forever!</em> Yay!
Don’t try and use the fact that your channel is nil to keep track of if you
closed it!</p>




<h2 id="what-are-channels-good-for:7de476e370ca6a780a51fd680c5a51dd">What are channels good for?</h2>

<p>Of course channels are good for some things (they are a generic container
after all), and there are certain things you can only do with them (<code>select</code>).</p>




<h3 id="they-are-another-special-cased-generic-datastructure:7de476e370ca6a780a51fd680c5a51dd">They are another special-cased generic datastructure</h3>

<p>Go programmers are so used to arguments about generics that I can feel the PTSD
coming on just by bringing up the word. I’m not here to talk about it so wipe
the sweat off your brow and let’s keep moving.</p>

<p>Whatever your opinion of generics is, Go’s maps, slices, and channels are data
structures that support generic element types, because they’ve been
special-cased into the language.</p>

<p>In a language that doesn’t allow you to write your own generic containers,
<em>anything</em> that allows you to better manage collections of things is valuable.
Here, channels are a thread-safe datastructure that supports arbitrary value
types.</p>

<p>So that’s useful! That can save some boilerplate I suppose.</p>

<p>I’m having trouble counting this as a win for channels.</p>




<h3 id="select:7de476e370ca6a780a51fd680c5a51dd">Select</h3>

<p>The main thing you can do with channels is the <code>select</code> statement. Here you
can wait on a fixed number of inputs for events. It’s kind of like epoll, but
you have to know upfront how many sockets you’re going to be waiting on.</p>

<p>This is truly a useful language feature. Channels would be a complete wash if
not for <code>select</code>. But holy smokes, let me tell you about the first time you
decide you might need to select on multiple things but you don’t know how many
and you have to use <code>reflect.Select</code>.</p>




<h2 id="how-could-channels-be-better:7de476e370ca6a780a51fd680c5a51dd">How could channels be better?</h2>

<p>It’s really tough to say what the most tactical thing the Go language team
could do for Go 2.0 is (the Go 1.0 compatibility guarantee is good but
hand-tying), but that won’t stop me from making some suggestions.</p>




<h3 id="select-on-condition-variables:7de476e370ca6a780a51fd680c5a51dd">Select on condition variables!</h3>

<p>We could just obviate the need for channels! This is where I propose we get
rid of some sacred cows, but let me ask you this, how great would it be if you
could select on any custom synchronization primitive? (A: So great.) If we had
that, we wouldn’t need channels at all.</p>




<h3 id="gc-could-help-us:7de476e370ca6a780a51fd680c5a51dd">GC could help us?</h3>

<p>In the very first example, we could easily solve the high score server cleanup
with channels if we were able to use directionally-typed channel garbage
collection to help us clean up.</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/joel-mchale.jpg" alt="Joel McHale" onmouseover="this.src='\/images\/wat\/joel-mchale.gif';" onclick="this.src='\/images\/wat\/joel-mchale.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/joel-mchale.jpg';">

</figure>

</div>


<p>As you know, Go has directionally-typed channels. You can have a channel type
that only supports reading (<code>&lt;-chan</code>) and a channel type that only supports
writing (<code>chan&lt;-</code>). Great!</p>

<p>Go also has garbage collection. It’s clear that certain kinds of book keeping
are just too onerous and we shouldn’t make the programmer deal with
them. We clean up unused memory! Garbage collection is useful and neat.</p>

<p>So why not help clean up unused or deadlocked channel reads? Instead of having
<code>make(chan Whatever)</code> return one bidirectional channel, have it return two
single-direction channels (<code>chanReader, chanWriter := make(chan Type)</code>).</p>




<p>Let’s reconsider the original example:</p>

<div><pre><span></span><span>type</span> Game <span>struct</span> {
  bestScore <span>int</span>
  scores    <span>chan</span>&lt;- <span>int</span>
}

<span>func</span> run(bestScore *<span>int</span>, scores &lt;-<span>chan</span> <span>int</span>) {
  <span>// we don't keep a reference to a *Game directly because then we'd be holding</span>
  <span>// onto the send side of the channel.</span>
  <span>for</span> score := <span>range</span> scores {
    <span>if</span> *bestScore &lt; score {
      *bestScore = score
    }
  }
}

<span>func</span> NewGame() (g *Game) {
  <span>// this make(chan) return style is a proposal!</span>
  scoreReader, scoreWriter := make(<span>chan</span> <span>int</span>)
  g = &amp;Game{
    bestScore: 0,
    scores:    scoreWriter,
  }
  <span>go</span> run(&amp;g.bestScore, scoreReader)
  <span>return</span> g
}

<span>func</span> (g *Game) HandlePlayer(p Player) <span>error</span> {
  <span>for</span> {
    score, err := p.NextScore()
    <span>if</span> err != <span>nil</span> {
      <span>return</span> err
    }
    g.scores &lt;- score
  }
}
</pre></div>


<p>If garbage collection closed a channel when we could prove no more values are
ever coming down it, this solution is completely fixed. Yes yes, the comment
in <code>run</code> is indicative of the existence of a rather large gun aimed at your
foot, but at least the problem is easily solveable now, whereas it really
wasn’t before. Furthermore, a smart compiler could probably make appropriate
proofs to reduce the damage from said foot-gun.</p>




<h3 id="other-smaller-issues:7de476e370ca6a780a51fd680c5a51dd">Other smaller issues</h3>

<ul>
<li><strong>Dup channels?</strong> - If we could use an equivalent of the <code>dup</code> syscall on
channels, then we could also solve the multiple producer problem quite
easily. Each producer could close their own <code>dup</code>-ed channel without ruining
the other producers.</li>
<li><strong>Fix the channel API!</strong> - Close isn’t idempotent? Send on closed
channel panics with no way to avoid it? Ugh!</li>
<li><strong>Arbitrarily buffered channels</strong> - If we could make buffered channels with
no fixed buffer size limit, then we could make channels that don’t block.</li>
</ul>




<h2 id="what-do-we-tell-people-about-go-then:7de476e370ca6a780a51fd680c5a51dd">What do we tell people about Go then?</h2>

<p>If you haven’t yet, please go take a look at my current favorite programming
post: <a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">What Color is Your Function</a>. Without being about Go specifically, this blog post much more
eloquently than I could lays out exactly why goroutines are Go’s best feature
(and incidentally one of the ways Go is better than Rust for some
applications).</p>

<p>If you’re still writing code in a programming language that forces keywords
like <code>yield</code> on you to get high performance, concurrency, or an event-driven
model, you are living in the past, whether or not you or anyone else knows it.
Go is so far one of the best entrants I’ve seen of languages that implement an
M:N threading model that’s not 1:1, and dang that’s powerful.</p>

<p>So, tell folks about goroutines.</p>

<p>If I had to pick one other leading feature of Go, it’s interfaces.
Statically-typed <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing</a> makes
extending and working with your own or someone else’s project so fun and
amazing it’s probably worth me writing an entirely different set of words about
it some other time.</p>




<h2 id="so:7de476e370ca6a780a51fd680c5a51dd">So…</h2>

<p>I keep seeing people charge in to Go, eager to use channels to their full
potential. Here’s my advice to you.</p>

<p><strong>JUST STAHP IT</strong></p>

<p>When you’re writing APIs and interfaces, as bad as the advice “never” can be,
I’m pretty sure there’s never a time where channels are better, and every Go
API I’ve used that used channels I’ve ended up having to fight. I’ve never
thought “oh good, there’s a channel here;” it’s always instead been some
variant of <em><strong>WHAT FRESH HELL IS THIS?</strong></em></p>

<p>So, <em>please, please use channels where appropriate and only
where appropriate.</em></p>

<p>In all of my Go code I work with, I can count on one hand the number of times
channels were really the best choice. Sometimes they are. That’s great! Use
them then. But otherwise just stop.</p>

<div>
 <figure>
  <img src="https://www.jtolio.com/images/wat/michael-cera.jpg" alt="Michael Cera" onmouseover="this.src='\/images\/wat\/michael-cera.gif';" onclick="this.src='\/images\/wat\/michael-cera.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/michael-cera.jpg';">

</figure>

</div>


<p><em>Special thanks for the valuable feedback provided by my proof readers
Jeff Wendling, <a href="https://github.com/azdagron">Andrew Harding</a>,
<a href="https://twitter.com/taterbase">George Shank</a>, and
<a href="http://bravenewgeek.com/">Tyler Treat</a>.</em></p>

<p>If you want to work on Go with us at Space Monkey, please
<a href="https://www.jtolio.com/contact/">hit me up</a>!</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to not build a two stage model rocket (108 pts)]]></title>
            <link>https://knowone08.gitbook.io/vgecrocketry</link>
            <guid>43669981</guid>
            <pubDate>Sun, 13 Apr 2025 04:00:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://knowone08.gitbook.io/vgecrocketry">https://knowone08.gitbook.io/vgecrocketry</a>, See on <a href="https://news.ycombinator.com/item?id=43669981">Hacker News</a></p>
<div id="readability-page-1" class="page"><header id="site-header"></header><!--$--><!--/$--><div hidden="" id="S:0"><main><header><h2>How to NOT build a two stage model rocket</h2><p>When engineering meets ambition… and occasionally, the ground</p></header><!--$--><div><p>So… I don’t usually write blogs  mostly because I thought I wasn’t the “blogging type” (whatever that means). Actually, this is my first one. But after what happened during our first two-stage rocket attempt, I figured — yeah, it’s probably worth writing about. If nothing else, maybe someone else can laugh, learn, and avoid making the same mistakes we did.</p><p>It started off like any good launch day. The rocket was prepped, the team was hyped, someone shouted “start!” (it was me) even though the rocket was somewhere in the shot — if you squint and use your imagination.</p><p>We began the countdown with full confidence.</p><p>3… 2… 1… LAUNCH!</p><p>What followed was… not flight. The rocket lifted maybe a few meters off the pad, sighed like it had second thoughts, and flopped over like a fainting goat. The motor technically fired — just not enough to impress anyone, including the rocket itself.</p><p>We stood there in silence. Someone clapped. We all laughed.</p><p>This blog is a mix of that story — and all the other things that went slightly or wildly wrong — wrapped up with actual lessons about what not to do when building a two-stage model rocket. If you're a fellow enthusiast, a curious beginner, or just here for the explosions, welcome aboard.</p><h2 id="the-dream"></h2><p>Before we talk about Venessa’s (yes, it was a concious decision to name the rocket Venessa) design, problems, and the oh-my-god-what-just-happened moments, let’s take a step back.</p><p><strong>Why even build a two-stage rocket in the first place?</strong></p><p>It’s simple—because it’s cool. But also because it’s hard. And that’s exactly what makes it worth doing. Two-stage rockets introduce a whole new layer of complexity compared to single-stage flights. You’re not just launching a rocket anymore—you’re launching a rocket that splits into two mid-air, and both halves need to do what they’re supposed to.</p><p>This complexity is exactly why we decided to build Venessa, our first two-stage rocket.</p><p>We weren’t chasing records or altitude this time. The goal was simple:
Design, build, and successfully execute a stage separation event—the part where the upper stage cleanly detaches and continues its journey after the first stage burns out.</p><p>That’s it.</p><p>This small but critical demonstration was meant to pave the way for <i>Asthsiddhi</i>, our larger and more capable two-stage rocket that’s currently in development. Venessa was a stepping stone— an experiment, and more importantly, a learning experience.</p><p>Our guiding principle from day one was:
“Do it in the simplest way that still teaches you the hard stuff.”</p><!--$--><p>This philosophy shaped everything—how we built our motors, chose our materials, designed our avionics, and even decided which parts were worth overengineering (and which ones we could just glue together and pray for the best).</p><!--/$--><!--$--><p>What followed was months of design, iteration, fabrication, failed tests, and re-dos.</p><!--/$--><!--$--><p>But it all started with a single goal:</p><!--/$--><!--$--><p>Can we design a rocket that breaks apart mid-flight—intentionally—and not get absolutely roasted by gravity?</p><!--/$--><!--$--><p>Let’s see how that went.</p><!--/$--><!--$--><p>Vanessa wasn’t about going higher or faster. It was about going smarter.</p><!--/$--><!--$--><p>From the very beginning, the design philosophy was simple:
Focus on mastering stage separation, not perfection.</p><!--/$--><!--$--><p>So instead of chasing every performance metric, we kept our sights on the core challenge—making a two-stage rocket separate mid-flight in a controlled and reliable way. Everything else—structure, propulsion, avionics—was built around that singular goal.</p><!--/$--><!--$--><p>We knew there would be compromises. And we were okay with that. Not everything needed to be aerospace-grade. We didn’t need fiberglass or carbon fiber. What we needed was something that worked just well enough to get us to the learning moment.</p><!--/$--><!--$--><p>At every step, we asked ourselves:</p><!--/$--><!--$--><p>“What’s the easiest way we can build this and still learn the hard lesson?”</p><!--/$--><!--$--><p>Sometimes that meant using a cardboard cut out part that could’ve been 3D printed. Sometimes it meant using a paper tube instead of an expensive composite body. Sometimes it meant letting a stage fall ballistically with no recovery system (RIP first stage, you did your job).</p><!--/$--><!--$--><p>But that’s the beauty of a learning prototype—freedom to make mistakes on purpose.</p><!--/$--><!--$--><p>Vanessa wasn't a rocket built for glory—it was a rocket built to teach us.</p><!--/$--><!--$--><h3 id="propulsion"></h3><!--/$--><!--$--><p>When it came to propulsion, we decided to graduate from our unreliable PVC days and finally enter the metal age.</p><!--/$--><!--$--><p>We designed solid rocket motors with a stainless steel casing, aluminum end cap, and a mild steel nozzle. Fancy, right? Turns out, PVC was never the move. It’s lightweight, yes, but also has the structural integrity of a soggy biscuit under pressure. Metal, while harder to work with, gave us something far more valuable—consistency and peace of mind (plus fewer heart attacks during static tests).</p><!--/$--><!--$?--><template id="B:1"></template><!--/$--><!--$--><!--/$--><!--$--><p>For the fuel, we used good ol’ KNDX—a mixture of Potassium Nitrate (oxidizer) and Dextrose (fuel). Why? Because we’ve been cooking this sugary goodness for over a year now. At this point, our mixers could probably run a bakery. Or so we thought (This isn’t foreshadowing I promise)</p><!--/$--><!--$--><p>The process involves mixing the components in their stoichiometric ratio, then carefully melting, casting, and curing them into grains—those little cylindrical packets of thrust that determine your burn profile. Honestly, this whole thing deserves its own blog. Maybe one day.</p><!--/$--><!--$?--><template id="B:2"></template><!--/$--><!--$--><!--/$--><!--$?--><template id="B:3"></template><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>Thrust (how fast we want to go)</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Impulse (how far we want to go)</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$?--><template id="B:4"></template><!--/$--><!--$--><p>Once we have those locked in, it’s a game of tweaking until the graph looks like something you’d proudly frame on your lab wall.</p><!--/$--><!--$--><p>We ended up with two motors:</p><!--/$--><!--$--><ul><!--$--><li></li><!--/$--><!--$--><li></li><!--/$--></ul><!--/$--><!--$?--><template id="B:5"></template><!--/$--><!--$--><p>Each stage had its own motor. G136 powered the first stage, and G96 took over once separation happened. No fancy ignition system—just the pure hope that our avionics systems and calculations were right.</p><!--/$--><!--$--><p>So, propulsion was equal parts physics, math, and crossing fingers. And somehow, that combination didn’t blow up in our faces.</p><!--/$--><!--$--><p>Not too badly, anyway.</p><!--/$--><!--$--><h3 id="structure"></h3><!--/$--><!--$--><p>If propulsion is the fire, structure is the skeleton that holds it all together—and for us, that skeleton was made of… paper. Yep, you read that right.</p><!--/$--><!--$--><h4 id="body"></h4><!--/$--><!--$--><p>The main body tube of our rocket was handcrafted using strips of paper—specifically, old Engineering Drawing sheets left abandoned by students. Instead of buying off-the-shelf cardboard tubes, we repurposed these thick, high-quality sheets. Not only did it make the build more fun and hands-on, but it also saved us a bit of cost (though that wasn’t the primary reason).</p><!--/$--><!--$--><p><strong>The construction method was pretty neat</strong></p><!--/$--><!--$--><p>We built the body tube layer by layer by spirally winding strips of paper over a PVC pipe. Each layer used about 5–6 strips, and every new layer was wound in the opposite direction of the previous one. This alternating spiral created a crosshatched pattern that added impressive strength and rigidity. In total, we applied around 5–6 such layers, all bonded with our trusty Fevicol-and-water mix—like a well-crafted paper-mâché shell, but engineered for flight.</p><!--/$--><!--$?--><template id="B:6"></template><!--/$--><!--$--><h4 id="nose-cone"></h4><!--/$--><!--$--><p>Our nose cone followed a clean ogive profile and was 3D printed using PLA filament. 
While we’ve experimented with paper-crafted nose cones in the past, 3D printing offers consistency, precision, and speed. If you’ve got a printer—it’s a no-brainer.</p><!--/$--><!--$?--><template id="B:7"></template><!--/$--><!--$--><h4 id="fincan-and-fins"></h4><!--/$--><!--$--><p>The fincan and fins were also 3D printed. Sure, we traded off some strength compared to fiberglass or carbon fiber, but for this flight, structural integrity wasn’t the primary concern—stage separation testing was.
3D printing allowed us to prototype fast and focus on what really mattered: functionality over overengineering.</p><!--/$--><!--$?--><template id="B:8"></template><!--/$--><!--$--><h4 id="first-stage"></h4><!--/$--><!--$--><p>The first stage was as simple as it gets:</p><!--/$--><!--$--><ul><!--$--><li></li><!--/$--><!--$--><li></li><!--/$--><!--$--><li></li><!--/$--></ul><!--/$--><!--$--><p>We didn’t use any mechanical separation system. It was “loosely” attached, so after burnout, it would just fall away—or get hot staged after the second stage lit up. (Honestly, part of us kinda wanted to see that hot staging happen.)</p><!--/$--><!--$?--><template id="B:9"></template><!--/$--><!--$--><h4 id="avionics-bay"></h4><!--/$--><!--$--><p>This was where the brains of the rocket lived.
We 3D printed a mounting plate with a slot for the power switch, and two discs with holes to mount it inside the body using screws. It held two flight computers, one on each side of the plate.</p><!--/$--><!--$--><p>Right above it, we mounted a spring-loaded ejection system—secured with screws.
(More on that later in the Recovery section.)</p><!--/$--><!--$?--><template id="B:a"></template><!--/$--><!--$--><h4 id="engine-block"></h4><!--/$--><!--$--><p>To keep the motor from sliding up the rocket, we added a wooden engine block—just a disc cut from plywood and epoxied into place. Simple, strong, and effective at transferring thrust directly to the airframe.</p><!--/$--><!--$--><p>We used OpenRocket, an awesome open-source simulator, to model our full design. It let us estimate stability, CG/CP, and flight performance. OpenRocket is to structure what OpenMotor is to propulsion—super helpful and beginner-friendly.</p><!--/$--><!--$--><h3 id="avionics"></h3><!--/$--><!--$--><p>This was the most important subsystem of the mission—our primary challenge was to design an avionics system capable of active stage separation.</p><!--/$--><!--$--><p>In most traditional 2-stage model rockets, stage separation is passive. These rockets often use COTS (Commercial Off-The-Shelf) motors with well-known thrust curves. That makes it easy to design a system that simply triggers stage separation after a fixed time delay or at a certain altitude, based on predictable motor behavior.</p><!--/$--><!--$--><p>But our case was different—we were flying in-house manufactured motors, so we didn’t have the luxury of precise thrust profiles. That meant we had to trigger the separation actively and intelligently, based on real-time sensor data.</p><!--/$--><!--$--><h4 id="burnout-detection-logic"></h4><!--/$--><!--$--><p>We decided to rely on acceleration values to detect motor burnout. During thrust, acceleration is significantly positive. The moment the motor burns out, acceleration drops— going negative due to drag and loss of thrust. We used this sudden drop as the primary indicator for burnout.</p><!--/$--><!--$--><p>To make it more robust, we also checked how long the negative acceleration persisted—adding a layer of redundant logic to avoid false triggers.</p><!--/$--><!--$?--><template id="B:b"></template><!--/$--><!--$--><!--/$--><!--$--><h4 id="hardware-overview"></h4><!--/$--><!--$--><p>Redundancy in avionics is critical—and dissimilar redundancy (using different hardware architectures) is even better. While we did that well in some areas, we also had room for improvement.</p><!--/$--><!--$--><p>We flew two independent flight computers:</p><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>Grace – Based on an Arduino Nano</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>RocketNerve – Based on a NodeMCU with 4MB of internal flash (used for logging)</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$?--><template id="B:c"></template><!--/$--><!--$--><p>Both systems followed the same basic architecture:</p><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>1 main microcontroller to process sensor data and trigger events</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>BMP280 for barometric pressure and altitude</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>MPU6050 for 6-axis inertial sensing (acceleration + angular velocity)</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Two pyro/ejection channels controlled via transistors acting as switches</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Powered by a 1S LiPo battery</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$--><p>This modular setup allowed us to process real-time flight data and trigger both stage separation and parachute ejection reliably.</p><!--/$--><!--$?--><template id="B:d"></template><!--/$--><!--$--><h4 id="firmware-and-control-logic"></h4><!--/$--><!--$--><p>Both flight computers ran custom firmware, designed to:</p><!--/$--><!--$--><ol><!--$--><li><div><!--$--><p>Continuously monitor acceleration and altitude</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Detect burnout based on the acceleration drop</p><!--/$--></div></li><!--/$--><!--$--><li></li><!--/$--><!--$--><li><div><!--$--><p>Monitor altitude for apogee detection</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Trigger parachute ejection</p><!--/$--></div></li><!--/$--></ol><!--/$--><!--$--><p>We'll cover the detailed firmware and flowcharts for this logic in an upcoming blog post, but the key point is: everything was real-time and event-driven, not time-based.</p><!--/$--><!--$?--><template id="B:e"></template><!--/$--><!--$--><h3 id="recovery"></h3><!--/$--><!--$--><p>For this flight, we decided to recover only the second stage. Technically, we did recover the first stage as well—but not through any dedicated system. It simply fell ballistically. Since the rocket wasn’t going to reach extreme altitudes, we figured that was acceptable.</p><!--/$--><!--$--><h4 id="second-stage-recovery"></h4><!--/$--><!--$--><p>The upper stage (second stage) had a spring-loaded parachute ejection system paired with a spherical ripstop nylon parachute. The parachute was connected to both the ejection mechanism and the nosecone, allowing for a safe recovery of both components after apogee.</p><!--/$--><!--$?--><template id="B:f"></template><!--/$--><!--$--><h4 id="how-the-ejection-system-worked"><div>How the Ejection System Worked</div></h4><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>A spring was mounted on top of the avionics bay, with help of a simple bottom mount structure, made with wood and PVC. </p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The spring was compressed and held in place by a thread tied between two screws—one at the bottom and one at the top of the ejection assembly.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>A disc-like platform sat on top of the spring, serving as a base for the neatly folded parachute.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The thread holding the spring was rigged with an e-match (electronic match), surrounded by a small amount of gunpowder and secured with paper tape.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>This e-match was wired to both flight computers, giving either of them the ability to trigger deployment.</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$--><h4 id="deployment-logic"></h4><!--/$--><!--$--><p>Once apogee was detected, either of the flight computers could trigger the e-match. When fired:</p><!--/$--><!--$--><ol><!--$--><li><div><!--$--><p>The e-match burns the thread.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The spring is released, pushing the parachute and nosecone outward.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The parachute unfurls mid-air, safely recovering the second stage.</p><!--/$--></div></li><!--/$--></ol><!--/$--><!--$--><p>It was a simple, robust, and lightweight recovery system that worked just as planned—no pistons, no CO₂ canisters, just good old mechanical ingenuity and a bit of gunpowder magic.</p><!--/$--><!--$?--><template id="B:10"></template><!--/$--></div><!--/$--></main></div><div hidden="" id="S:3"><p>To simulate and design the motor, we used<template id="P:13"></template>, an open-source software where you throw in your grain geometry, number of grains and nozzle dimensions etc —and it spits out performance predictions. Two things we always fix first in our motor design:</p></div><div hidden="" id="S:5"><p>The naming isn’t random; check out<template id="P:16"></template> if you want to get nerdy about it.
TL;DR: The number after the letter tells you average thrust (in Newtons). So yeah, G136 hits harder than G96.</p></div><div hidden="" id="S:1"><picture><figcaption>Cross Section of a Solid Rocket Motor</figcaption></picture></div><div hidden="" id="S:b"><img data-testid="zoom-image" alt="Drawing" src="https://755459895-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FRA4M4jXg9Me4sjVHIEMe%2Fuploads%2FkGy4G1S7wG3BCZOJxKsI%2Ffile.excalidraw.svg?alt=media&amp;token=da7f5755-3d1d-499e-998e-7ac617a97bac" width="1416" height="1207"></div><div hidden="" id="S:d"><picture><figcaption>Flight Computer Hardware Architecture</figcaption></picture></div><div hidden="" id="S:e"><picture><figcaption>Avionics Firmware Architecture</figcaption></picture></div><div hidden="" id="S:17"><picture><figcaption>Our New Recurits learning how to make paper body</figcaption></picture></div><div hidden="" id="S:19"><picture><figcaption>Ejecjected Nosecone after Flight</figcaption></picture></div><div hidden="" id="S:1a"><picture><figcaption>First and Second stage Fincans</figcaption></picture></div><div hidden="" id="S:1c"><picture><figcaption>First stage Inspection After Lauch</figcaption></picture></div><div hidden="" id="S:1d"><picture><figcaption>First stage meeting the ground after it's ballistic descent</figcaption></picture></div><div hidden="" id="S:1e"><picture><figcaption>Avionics Bay (3D Printed)</figcaption></picture></div><div hidden="" id="S:1f"><picture><figcaption>Ejection System mounted on Avionics Bay (wooden)</figcaption></picture></div><div hidden="" id="S:24"><picture><figcaption>Tesing the ejection system</figcaption></picture></div><div hidden="" id="S:25"><picture><figcaption>Damaged Ejection system after launch</figcaption></picture></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[BPS is a GPS alternative that nobody's heard of (344 pts)]]></title>
            <link>https://www.jeffgeerling.com/blog/2025/bps-gps-alternative-nobodys-heard</link>
            <guid>43669308</guid>
            <pubDate>Sun, 13 Apr 2025 01:31:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeffgeerling.com/blog/2025/bps-gps-alternative-nobodys-heard">https://www.jeffgeerling.com/blog/2025/bps-gps-alternative-nobodys-heard</a>, See on <a href="https://news.ycombinator.com/item?id=43669308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I came to the NAB (National Association of Broadcasters) show this year with my Dad to learn more about time in broadcast and live production.</p>

<p>I was expecting to learn more about grandmaster clocks, AV sync, timing in protocols like Dante, Livewire, AES67, and more—and I <em>have</em>. But then on the first day here I found this odd little corner of the building with a completely empty booth:</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/bps-demo-booth-empty.jpeg" width="700" height="467" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-c92190f2-fa60-4fb5-b03f-45b20588b7c4" data-insert-attach="{&quot;id&quot;:&quot;c92190f2-fa60-4fb5-b03f-45b20588b7c4&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="BPS Demo Booth - it is empty"></p>

<p>When you see an oscilloscope that costs 3x the value of your car on a trade show floor... well, let's just say my interest was piqued.</p>

<p>I looked at it, and found something interesting—the trigger was on a GPS PPS timing signal output from a u-blox GPS receiver. But the 2nd channel was monitoring <a href="https://news3lv.com/">KSNV-TV</a>, a US television station broadcasting an <em>ATSC 3.0</em> signal.</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/bps-gps-vs-ksnv-timing-signal.jpg" width="700" height="394" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-72f669c9-563f-466c-9c5b-a5d3b0634e6e" data-insert-attach="{&quot;id&quot;:&quot;72f669c9-563f-466c-9c5b-a5d3b0634e6e&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="BPS KSNV-TV vs GPS pps"></p>

<p>The scope showed a PPS output (Pulse Per Second) demonstrating a pulse sync of +/- 10 ns between GPS and the TV signal output—which so happens to be <em>BPS</em>, an experimental timing standard that may be incorporated into the ATSC 3.0 rollout in the US (there are currently about 1,700 TV stations that could be upgraded).</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/bps-scope-10-ns-sync-gps.jpg" width="700" height="394" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-8926d48d-f994-4820-838c-2b2b8beed4bd" data-insert-attach="{&quot;id&quot;:&quot;8926d48d-f994-4820-838c-2b2b8beed4bd&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="BPS showing 10ns sync"></p>

<p>After seeing the demo, I found out there <em>are</em> a few people who've heard of BPS... and many of them were presenting on it, as they were also the ones who were doing the initial rollout and experimentation.</p>

<p>ATSC 3.0 is a newer IP broadcast standard being rolled out in some countries—my own home city has two TV stations broadcasting it right now, under the 'NEXTGEN TV' moniker. But so far only a few TV stations are participating in the BPS testing.</p>

<p>Because accurate timing is critical in many areas, from media, to the power grid, to 5G and communications, having a reliable terrestrial backup to GPS—especially one that can be hardened against different types of jamming attempts—may be important to our economy, communications and power grid... or people like who just want to have a good time!</p>

<p>And speaking of time stuff at the NAB Show... can you guess what I'm pointing to in this photo, from the ASUS booth?</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/jeff-geerling-nab-2025-asus-proart-motherboard-pps-tgpio.jpeg" width="700" height="394" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-8a6e7c70-c424-44e5-b834-fc4b80117316" data-insert-attach="{&quot;id&quot;:&quot;8a6e7c70-c424-44e5-b834-fc4b80117316&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="Jeff Geerling pointing to PPS in out on ASUS ProArt motherboard"></p>

<p>If you guessed built-in PPS in/out connectors on a consumer Intel motherboard that syncs to <a href="https://eci.intel.com/docs/3.0/development/tcc-tools.html">TGPIO</a> (Time-Aware GPIO) on an Intel CPU... you'd be right! And if you have no clue what that means, well, I'll cover it more in depth later this year :)</p>

<p>Anyway, I am still learning about BPS, so I'll probably go deeper into it later in my timing series on my YouTube channel, but for now, I'll leave with with a quick video showing the demo (below), and a couple links for those who want to learn more:</p>

<div>
<p><iframe src="https://www.youtube.com/embed/cPCzNdUz5z0" frameborder="0" allowfullscreen=""></iframe></p>
</div>

<p>More resources:</p>

<ul>
<li><a href="https://www.nab.org/bps/ITM25-0009.pdf">BPS / NIST time experiment results</a></li>
<li><a href="https://nabpilot.org/broadcast-positioning-system-bps/">NAB PILOT - BPS Info</a></li>
<li><a href="https://www.ursanav.com/wp-content/uploads/UrsaNav-PTTI-Conference-Presentation.pdf">UrsaNav's eLoran timing</a></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Experimental release of GrapheneOS for Pixel 9a (321 pts)]]></title>
            <link>https://grapheneos.social/@GrapheneOS/114327666433966529</link>
            <guid>43669185</guid>
            <pubDate>Sun, 13 Apr 2025 01:05:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://grapheneos.social/@GrapheneOS/114327666433966529">https://grapheneos.social/@GrapheneOS/114327666433966529</a>, See on <a href="https://news.ycombinator.com/item?id=43669185">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Anubis Works (254 pts)]]></title>
            <link>https://xeiaso.net/notes/2025/anubis-works/</link>
            <guid>43668433</guid>
            <pubDate>Sat, 12 Apr 2025 22:32:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xeiaso.net/notes/2025/anubis-works/">https://xeiaso.net/notes/2025/anubis-works/</a>, See on <a href="https://news.ycombinator.com/item?id=43668433">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article>
    
    
    <p>
        Published on <time datetime="2025-04-12">04/12/2025</time>, 441 words, 2 minutes to read
    </p>

    

    
        
            
    

    

        
    

    
        <center>
            <figure><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/hero/dominos-un.avif"><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/hero/dominos-un.webp"><img alt="An image of A 'domino effect' meme starting with 'Amazon takes out my Git server' and ending with 'Software deployed by the United Nations'." loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/hero/dominos-un.jpg"></picture></figure>
        </center>
        <small>A 'domino effect' meme starting with 'Amazon takes out my Git server' and ending with 'Software deployed by the United Nations'. - Meme generated on imgflip.com</small>
    

    <p>That meme is not an understatement, <a href="https://anubis.techaro.lol/">Anubis</a> has been deployed by the United Nations.</p>
<p>For your amusement, here is how the inner monologue of me finding out about this went:</p>
<div><div><p><img alt="Aoi is wut" loading="lazy" src="https://stickers.xeiaso.net/sticker/aoi/wut"></p><div><p><span><a href="https://xeiaso.net/characters#aoi">Aoi</a></span><span></span></p><p>What. You can't be serious, can you?</p></div></div><div><p><img alt="Cadey is coffee" loading="lazy" src="https://stickers.xeiaso.net/sticker/cadey/coffee"></p></div><div><p><img alt="Aoi is wut" loading="lazy" src="https://stickers.xeiaso.net/sticker/aoi/wut"></p><div><p><span><a href="https://xeiaso.net/characters#aoi">Aoi</a></span><span></span></p><p>No, that can't be a real domain of the United Nations, can it?</p></div></div><div><p><img alt="Cadey is coffee" loading="lazy" src="https://stickers.xeiaso.net/sticker/cadey/coffee"></p></div><div><p><img alt="Aoi is sus" loading="lazy" src="https://stickers.xeiaso.net/sticker/aoi/sus"></p><div><p><span><a href="https://xeiaso.net/characters#aoi">Aoi</a></span><span></span></p><p>No way. No fucking way. What the heck, how is this real. What is YOUR
LIFE??? God I got the worst 2025 bingo card this year.</p></div></div></div>
<p>I hate to shake my can and ask for donations, but if you are using Anubis and it helps, please <a href="https://patreon.com/cadey">donate on Patreon</a>. I would really love to not have to work in generative AI anymore because the doublethink is starting to wear at my soul.</p>
<p>Also, do I happen to know anyone at UNESCO? I would love to get in touch with their systems administrator team and see if they had any trouble with setting it up. I'm very interested in making it easier to install.</p>
<p>This makes the big deployments that I know about include:</p>
<ul>
<li>The Linux Kernel Mailing List archives</li>
<li>FreeBSD's SVN (and soon git)</li>
<li>SourceHut</li>
<li>FFmpeg</li>
<li>Wine</li>
<li>UNESCO</li>
<li>The Science Olympiad Student Center</li>
<li>Enlightenment (the desktop environment)</li>
</ul>
<p>The conversation I'm about to have with my accountant is going to be one of the most surreal conversations of all time.</p>
<p>The part that's the most wild to me is when I stop and consider the scale of these organizations. I think that this means that the problem is <em>much worse</em> than I had previously anticipated. I know that at some point YouTube was about to hit "the inversion" where they get more bot traffic than they get human traffic. I wonder how much this is true across most of, if not all of the Internet right now.</p>
<p>I guess this means that I really need to start putting serious amounts of effort into Anubis and the stack around it. The best way that can be ensured is if I can get enough money to survive so I can put my full time effort into it. I may end up hiring people.</p>
<p>This is my life now. Follow me <a href="https://bsky.app/profile/xeiaso.net">on Bluesky</a> if you want to know when the domino meme gets more ridiculous!</p>

    <hr>

    

    

    <p>Facts and circumstances may have changed since publication. Please contact me before jumping to conclusions if something seems wrong or unclear.</p>

    <p>Tags: </p>
</article>
        </div><div>
            <p>Copyright 2012-2025 Xe Iaso. Any and all opinions listed here are my own and
                not representative of any of my employers, past, future, and/or present.</p>
            
            <p>Served by xesite v4 (/app/xesite) with site version 
                        <a href="https://github.com/Xe/site/commit/39be1916f1f429bbae7da0b45534d72ceb01d8f0">39be1916</a>
                    , source code available <a href="https://github.com/Xe/site">here</a>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[YAML: The Norway Problem (2022) (196 pts)]]></title>
            <link>https://www.bram.us/2022/01/11/yaml-the-norway-problem/</link>
            <guid>43668290</guid>
            <pubDate>Sat, 12 Apr 2025 22:10:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bram.us/2022/01/11/yaml-the-norway-problem/">https://www.bram.us/2022/01/11/yaml-the-norway-problem/</a>, See on <a href="https://news.ycombinator.com/item?id=43668290">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">
	<p><a href="#content">
		Skip to content	</a></p><!-- #masthead -->

	<div id="content">
		<main id="main">

			
<article id="post-31489">
		
	
	<div>
		<p><a href="https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383.webp" data-slb-active="1" data-slb-asset="1019124662" data-slb-internal="0" data-slb-group="31489"><img fetchpriority="high" decoding="async" src="https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383-560x194.webp" alt="" width="560" height="194" srcset="https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383-560x194.webp 560w, https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383-768x266.webp 768w, https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383.webp 1110w" sizes="(max-width: 560px) 100vw, 560px"></a></p>
<p>Earlier this week, <a href="https://twitter.com/haroenv/">Haroen Viaene</a> posted this tweet about YAML:</p>
<blockquote>
<p lang="en" dir="ltr">worst part of yaml: <a href="https://t.co/iiK37EpChV">https://yaml.org/type/bool.html</a></p>
<p>— Haroen Viaene (@haroenv) <a href="https://twitter.com/haroenv/status/1480520812063080456?ref_src=twsrc%5Etfw">January 10, 2022</a></p></blockquote>

<p>The linked-to page contains the documentation on what defines a boolean in YAML, and details that it can be parsed using this <abbr title="Regular Expression">regex</abbr>:</p>
<pre><code>y|Y|yes|Yes|YES|n|N|no|No|NO
|true|True|TRUE|false|False|FALSE
|on|On|ON|off|Off|OFF</code></pre>
<p>~</p>
<p>The reason to why this is problematic in some cases, is “The Norway Problem” YAML has: when you abbreviate Norway to its ISO 3166-1 ALPHA-2 form <code>NO</code>, YAML will return <code>false</code> when parsing it:</p>
<pre><code>countries:
- GB
- IE
- FR
- DE
- NO</code></pre>
<pre><code>&gt;&gt;&gt; from pyyaml import load
&gt;&gt;&gt; load(the_configuration)
{'countries': ['GB', 'IE', 'FR', 'DE', False]}</code></pre>
<p>👉 The solution is to either escape these values in double quotes, or to use a library — such as StrictYAML for Python — that won’t convert <code>NO</code> to <code>False</code>.</p>
<p>~</p>
<p>Other problematic values in YAML are version numbers that end in <code>.0</code> and a lastname such as <code>Null</code>. By default these get converted to numbers or <code>NULL</code> respectively.</p>
<p><a href="https://hitchdev.com/strictyaml/why/implicit-typing-removed/">The Norway Problem →</a><br><a href="https://hitchdev.com/strictyaml/">StrictYAML →</a></p>
	</div><!-- .entry-content -->

	<!-- .entry-footer -->

			<div>
	
	<p>
		Bramus is a frontend web developer from Belgium, working as a Chrome Developer Relations Engineer at Google. From the moment he discovered view-source at the age of 14 <em>(way back in 1997)</em>, he fell in love with the web and has been tinkering with it ever since <i><a href="https://www.bram.us/about">(more …)</a></i>		<a href="https://www.bram.us/author/bramus/" rel="author">
			View more posts		</a>
	</p><!-- .author-description -->
</div><!-- .author-bio -->
				
</article><!-- #post-31489 -->

	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
<!-- #comments -->

		</main><!-- #main -->
	</div><!-- #content -->

	<!-- #colophon -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebTUI – A CSS Library That Brings the Beauty of Terminal UIs to the Browser (265 pts)]]></title>
            <link>https://webtui.ironclad.sh</link>
            <guid>43668250</guid>
            <pubDate>Sat, 12 Apr 2025 22:02:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webtui.ironclad.sh">https://webtui.ironclad.sh</a>, See on <a href="https://news.ycombinator.com/item?id=43668250">Hacker News</a></p>
<div id="readability-page-1" class="page"><div flex-="col gap:1" space-="px:1" data-astro-cid-j7pv25f6="">  <p tabindex="0" data-astro-cid-j7pv25f6="">
WebTUI is a modular CSS library that brings the beauty of Terminal
              UIs to the browser
</p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I ditched my laptop for a pocketable mini PC and a pair of AR glasses (285 pts)]]></title>
            <link>https://www.tomsguide.com/computing/i-ditched-my-laptop-for-a-pocketable-mini-pc-and-a-pair-of-ar-glasses-heres-what-happened</link>
            <guid>43668192</guid>
            <pubDate>Sat, 12 Apr 2025 21:50:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomsguide.com/computing/i-ditched-my-laptop-for-a-pocketable-mini-pc-and-a-pair-of-ar-glasses-heres-what-happened">https://www.tomsguide.com/computing/i-ditched-my-laptop-for-a-pocketable-mini-pc-and-a-pair-of-ar-glasses-heres-what-happened</a>, See on <a href="https://news.ycombinator.com/item?id=43668192">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1920-80.jpg.webp 1920w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" alt="A person using Xreal One AR glasses with the Khadas Mind 2S mini PC at a coffee shop" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1920-80.jpg 1920w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>(Image credit: Tom's Guide)</span>
</figcaption>
</div>

<div id="article-body">
<p>I work best seated at my <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/i-revamped-my-desk-setup-using-the-worlds-most-expensive-cable-management-accessory-this-changes-everything" data-before-rewrite-localise="https://www.tomsguide.com/computing/i-revamped-my-desk-setup-using-the-worlds-most-expensive-cable-management-accessory-this-changes-everything">desk setup</a> with multiple screens in front of me However, when I travel or just need to get out of the house for a bit, I can’t bring my setup with me—or at least I thought I couldn’t.</p><p>Now I know what you’re thinking. Why don’t I just go with one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-laptops" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-laptops">best laptops</a> instead? Well, I’ve tried and while my <a data-analytics-id="inline-link" href="https://www.tomsguide.com/opinion/i-love-my-desktop-but-this-thinkpad-convinced-me-to-give-laptops-a-second-chance" data-before-rewrite-localise="https://www.tomsguide.com/opinion/i-love-my-desktop-but-this-thinkpad-convinced-me-to-give-laptops-a-second-chance">trusty ThinkPad</a> hasn’t let me down yet, I still end up using it with extra peripherals and oftentimes, a <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/monitors/this-dual-screen-portable-monitor-changed-how-i-use-my-laptop-and-now-i-cant-imagine-traveling-without-it" data-before-rewrite-localise="https://www.tomsguide.com/computing/monitors/this-dual-screen-portable-monitor-changed-how-i-use-my-laptop-and-now-i-cant-imagine-traveling-without-it">portable monitor</a> too, which kind of defeats the purpose of using a laptop in the first place.</p><p>Over the past few years, I’ve also downsized from a full desktop and I now do the majority of my work from one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/us/best-mini-pc.html" data-before-rewrite-localise="https://www.tomsguide.com/us/best-mini-pc.html">best mini PCs</a>. I like the experience of using a mini PC over a desktop or a laptop so much that I even <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/i-brought-a-mini-pc-with-me-on-my-last-trip-and-id-do-it-again-in-a-heartbeat" data-before-rewrite-localise="https://www.tomsguide.com/computing/i-brought-a-mini-pc-with-me-on-my-last-trip-and-id-do-it-again-in-a-heartbeat">took a mini PC with me to Taiwan</a> last summer.</p><p>Of all the mini PCs I’ve tested and reviewed, one in particular has stuck with me and that’s due to how portable it is and the fact that it uses a USB-C port for power instead of a barrel port connector. After trying out a pair of AR glasses for the first time when I <a data-analytics-id="inline-link" href="https://www.tomsguide.com/tablets/i-spent-two-weeks-with-the-ipad-mini-7-and-it-reignited-my-love-for-smaller-tablets" data-before-rewrite-localise="https://www.tomsguide.com/tablets/i-spent-two-weeks-with-the-ipad-mini-7-and-it-reignited-my-love-for-smaller-tablets">spent two weeks with the iPad mini</a>, I decided why not combine the two together and throw one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-portable-chargers" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-portable-chargers">best power banks</a> into the mix for good measure. Then, I could truly work from anywhere just like I do from the comfort of my home office.</p><p>I’ve been using a pocketable mini PC, a pair of AR glasses and a massive 25,000 mAh power bank together for the past two weeks and it’s completely transformed the way I work. Here’s how I came up with this novel approach to on-the-go computing to better fit my unique workflow.</p><h2 id="pocketable-meets-private-3">Pocketable meets private</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP.jpg" alt="Slipping the Khadas Mind mini PC into a pocket" srcset="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>Last year, I got to try out the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/desktop-computers/khadas-mind-review" data-before-rewrite-localise="https://www.tomsguide.com/computing/desktop-computers/khadas-mind-review">Khadas Mind</a> and even now, there’s no mini PC quite like it. Instead of being rectangular or having a cube-like shape, the Mind looks a lot more like one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-external-hard-drives" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-external-hard-drives">best external hard drives</a>. Not only is it powerful, it’s also pocketable thanks to its tiny 5.75 x 4.13 x 0.79-inch frame.</p><p>Another thing that sets the Khadas Mind apart from other mini PCs is that Khadas has created a whole ecosystem of accessories around it. There’s the standard Mind Dock which adds more ports, dual-monitor support, a fingerprint reader and even a volume knob on the side, as well as the premium Mind Graphics dock which adds even more ports as well as a full-size Nvidia RTX 4060 Ti desktop graphics card.</p><p>Khadas is also working on a portable display with a keyboard that magnetically attaches to this mini PC like both of these docks do if you prefer a more laptop-like experience.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk.jpg" alt="The rear ports on the Khadas Mind mini PC" srcset="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>The main reason I chose the Khadas Mind for this project is because of its ports and portability though. Like I said before, it uses a USB-C port for power (on the far left) but it also has a second, full-featured USB-C port for video out in addition to two USB-A ports and an HDMI port. With one USB-C port for power and another for video, the Khadas Mind turned out to be the perfect fit for this one-of-a-kind mobile setup.</p><p>After I reviewed the original Mind last year, Khadas unveiled the Mind 2S at <a data-analytics-id="inline-link" href="https://www.tomsguide.com/tech-events/10-weirdest-gadgets-of-ces-2025" data-before-rewrite-localise="https://www.tomsguide.com/tech-events/10-weirdest-gadgets-of-ces-2025">CES</a> back in January as a more powerful followup to the Mind 2. I had already sent the Mind 1 back, so I reached out to Khadas directly and they sent over this new more powerful mini PC for this project, though I am working on a review of it too.</p><p>While the Mind 1 handled everything I threw at quite well, the Mind 2S is an absolute powerhouse with an Intel Core Ultra 7 255H processor, 64GB of LPDDR5X RAM and a 2TB SSD. Khadas also upgraded its two USB-C ports to Thunderbolt 4 ones for faster data transfer speeds and enhanced display capabilities.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We.jpg" alt="Xreal One" srcset="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>As I haven’t had a chance to try out a pair of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/vr-ar/best-smart-glasses" data-before-rewrite-localise="https://www.tomsguide.com/computing/vr-ar/best-smart-glasses">best smart glasses yet</a>, I had my colleague Jason England recommend a pair for this project. He suggested the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/vr-ar/xreal-one-ar-glasses-review" data-before-rewrite-localise="https://www.tomsguide.com/computing/vr-ar/xreal-one-ar-glasses-review">Xreal One AR glasses</a> as they have Xreal’s X1 spatial computing chip built-in. This chip gives you full control over the glasses’ 3 Degrees of Freedom tracking and also lets you go from a standard 16:9 display to an ultrawide one at the push of a button.</p><p>Another thing that I really like about the Xreal One glasses is that unlike the Meta Quest 3 or even the Apple Vision Pro, they don’t have a built-in battery. Not only does this make them lighter and more comfortable to wear, you don’t have to worry about charging which would make my mini PC/AR glasses setup more difficult to use at a moment’s notice. Instead, they draw their power from the device they’re connected to.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA.jpg" alt="A person sitting on a chair watching videos on an iPad mini 7 using the XReal One AR glasses" srcset="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>After unboxing the Xreal Ones that Xreal sent over to help me turn this dream into reality, I was very impressed by how they worked immediately when plugged into the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/tablets/ipads/ipad-mini-7-review" data-before-rewrite-localise="https://www.tomsguide.com/tablets/ipads/ipad-mini-7-review">iPad mini</a>. I didn’t have to configure anything and they were truly plug and play.</p><p>If you’re thinking about trying out a pair of AR glasses yourself, just make sure that your smartphone, tablet or whatever device you want to use them with comes equipped with DisplayPort Alt Mode over USB-C. Otherwise, you’re going to need an adapter, which adds a bit of bulk and makes using them slightly more complicated.</p><h2 id="powered-and-portable-3">Powered and portable</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK.jpg" alt="The Xreal One AR glasses next to the Ugreen Nexode Power Bank and the Khadas Mind 2S on a desk" srcset="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>With the Khadas Mind 2S and the Xreal One AR glasses in hand, I just needed one more thing: a way to power them. At home or at a hotel, I was able to power this whole setup using a GaN charger but I wanted a way to use it during those times when there wasn’t an outlet nearby.</p><p>To that end, I decided to pick up the 25,000 mAh version of the Ugreen Nexode Power Bank. I’ve always had a great experience with Ugreen’s chargers, cables and other products in the past, so I wanted to see how well its largest power bank performed. Another reason that I picked this particular power bank is that it’s flight approved but more on that later.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU.jpg" alt="Holding up the Xreal One AR glasses in front of the Khadas Mind 2S, a mechanical keyboard, a trackball mouse and a Ugreen power bank on a desk" srcset="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>With two USB-C ports at the top with one capable of putting out 100 watts and the other able to deliver 140 watts of power, I had more than enough power on hand for both the Khadas Mind 2S and the Xreal One AR glasses. I paired the two devices with my favorite budget mechanical keyboard (<a data-analytics-id="inline-link" href="https://target.georiot.com/Proxy.ashx?tsid=45724&amp;GR_URL=https%3A%2F%2Famazon.com%2FUKVEY-Low-Profile-Mechanical-Compatible-Rechargeable%2Fdp%2FB0CXLVPN98%3Fth%3D1%26tag%3Dhawk-future-20%26ascsubtag%3Dtomsguide-us-8673277385632634263-20" target="_blank" rel="sponsored noopener" data-url="https://www.amazon.com/UKVEY-Low-Profile-Mechanical-Compatible-Rechargeable/dp/B0CXLVPN98?th=1" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="hawklinks" data-placeholder-url="https://target.georiot.com/Proxy.ashx?tsid=45724&amp;GR_URL=https%3A%2F%2Famazon.com%2FUKVEY-Low-Profile-Mechanical-Compatible-Rechargeable%2Fdp%2FB0CXLVPN98%3Fth%3D1%26tag%3Dhawk-future-20%26ascsubtag%3Dhawk-custom-tracking-20" data-google-interstitial="false" data-merchant-name="Amazon US" data-merchant-id="1471" data-merchant-network="Amazon" data-merchant-url="amazon.com">$40, Amazon</a>) and a <a data-analytics-id="inline-link" href="https://www.tomsguide.com/reference/what-is-a-trackball-mouse" data-before-rewrite-localise="https://www.tomsguide.com/reference/what-is-a-trackball-mouse">mini trackball mouse</a> from <a data-analytics-id="inline-link" href="https://www.tomsguide.com/opinion/forget-logitech-im-obsessed-with-this-obscure-japanese-mouse-maker" data-before-rewrite-localise="https://www.tomsguide.com/opinion/forget-logitech-im-obsessed-with-this-obscure-japanese-mouse-maker">Elecom</a>.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc.jpg" alt="A person sitting in an office chair working at a desk with AR glasses on powered by a mini PC" srcset="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>Much to my surprise, it didn’t take long at all to get used to working while wearing AR glasses. Maybe it was because this was the same mechanical keyboard/trackball mouse combo I always bring with me while traveling but I settled in to using this setup in no time at all.</p><p>Now though, it was time to take it out into the world and see whether it was really better for me than using a laptop.</p><h2 id="a-whole-new-way-to-work-3">A whole new way to work</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" alt="A person using Xreal One AR glasses with the Khadas Mind 2S mini PC at a coffee shop" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>As silly as I felt taking this picture at my local coffee shop, I actually didn’t get any odd looks from the other patrons there. After connecting to the Wi-Fi, I got to work editing reviews and writing stories just like if I was back home.</p><p>One thing that I really liked about wearing the Xreal One glasses is that you can change their transparency. For instance, at home, I really enjoyed using the completely black theater mode while watching content online. However, while at the coffee shop, I switched them to clear mode so I was still aware of my surroundings.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm.jpg" alt="The Xreal One AR glasses, the Khadas Mind 2S mini PC, a mechanical keyboard, a trackball mouse and a Ugreen power bank set up on a counter at a coffee shop" srcset="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>You can’t take native screenshots directly from within the Xreal One glasses but what you see inside them is a sight to behold. With ultrawide mode enabled, I was able to have two full-size Chrome windows side by side just like on the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/i-ditched-my-ultrawide-display-for-this-dual-monitor-setup-heres-what-happened" data-before-rewrite-localise="https://www.tomsguide.com/computing/i-ditched-my-ultrawide-display-for-this-dual-monitor-setup-heres-what-happened">dual-monitor setup</a> I put together last month. However, clear mode took the whole experience up a notch as it made it feel like I was using a transparent monitor straight out of <a data-analytics-id="inline-link" href="https://www.tomsguide.com/news/i-just-saw-the-future-of-oleds-at-ces-2024-this-feels-like-the-next-big-thing" data-before-rewrite-localise="https://www.tomsguide.com/news/i-just-saw-the-future-of-oleds-at-ces-2024-this-feels-like-the-next-big-thing">Minority Report</a>.</p><p>Sitting at the window, I was able to watch the cars go by while I worked as if my desk was right up next to a window with a great view. I used to work in coffee shops a whole lot more back before I set up a home office in my house. With this setup though, I could easily see myself getting back out of the house and doing so again.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65.jpg" alt="Packing a mini PC/AR glasses work from anywhere setup into a backpack" srcset="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>When it was time to head out, packing everything up into my bag was a cinch and only took me a minute or so. Surprisingly, the Ugreen Nexode Power Bank is the heaviest item in this setup at just over 500 grams while the Khadas Mind 2S weighs 435 grams and the Xreal One glasses weigh 84 grams.</p><h2 id="not-just-for-coffee-shops-3">Not just for coffee shops</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9.jpg" alt="Using the Khadas Mind 2S and the Xreal One AR glasses on a tray table on an airplane" srcset="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>Now for the kicker. I actually brought this mini PC/AR glasses setup with me to New York last week when I went to try out the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/news/nintendo-switch-2" data-before-rewrite-localise="https://www.tomsguide.com/news/nintendo-switch-2">Nintendo Switch 2</a>.</p><p>As the tray table on an airplane is known for being notoriously small, I decided to break out all my gear and try to set it up there too. It was cramped getting everything out of my bag but once I had it all set up, I was able to get the full desktop experience while cruising at over 30,000 feet up in the air.</p><p>After checking into my hotel, I broke out everything again and got to work. In fact, I wrote my entire <a data-analytics-id="inline-link" href="https://www.tomsguide.com/gaming/nintendo/nintendo-switch-2-review" data-before-rewrite-localise="https://www.tomsguide.com/gaming/nintendo/nintendo-switch-2-review">hands-on review of the Switch 2</a> using this setup over the course of a few hours. Even though I was far from my desk, I felt right at home typing away with a pair of AR specs on my head. I even gave my guide on the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-office-chairs" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-office-chairs">best office chairs</a> a big update while using this mobile setup and that too went surprisingly well.</p><p>I know that even if you made it this far, you still might be wondering why I don’t just work from a laptop instead. The big reason for me is that I love the feel of one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-mechanical-keyboards" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-mechanical-keyboards">best mechanical keyboards</a> under my fingertips while typing along with the level of control and customizable buttons that I get with a trackball mouse. Another thing that has always turned me off from laptops is that you can’t easily swap out a broken keyboard or upgrade their components, that is unless you get one from <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/laptops/framework-announces-two-upgradeable-laptops-and-a-brand-new-modular-mini-pc" data-before-rewrite-localise="https://www.tomsguide.com/computing/laptops/framework-announces-two-upgradeable-laptops-and-a-brand-new-modular-mini-pc">Framework</a>. Likewise, I’ve yet to see a laptop with an ultrawide display and I doubt I will anytime soon.</p><p>This setup has been kicking around in my head for months now but thanks to Khadas and Xreal’s help, I got to make it a reality. And after using it for the past two weeks, I can honestly say it’s even better than I expected it would be.</p><p>So what about you? Could you see yourself spending a full day working with smart glasses instead of using a monitor? Likewise, would you try this setup out if you had the chance? Let me know in the comments!</p><h3 id="section-more-from-tom-s-guide"><span>More from Tom's Guide</span></h3><ul><li><a href="https://www.tomsguide.com/computing/monitors/i-spent-a-week-trying-3-different-stacked-monitor-setups-and-this-is-my-favorite" data-before-rewrite-localise="https://www.tomsguide.com/computing/monitors/i-spent-a-week-trying-3-different-stacked-monitor-setups-and-this-is-my-favorite">I put 3 stacked monitor setups to the test and this is the one I’m sticking with</a></li><li><a href="https://www.tomsguide.com/computing/smart-glasses/xreal-one-vs-viture-pro-ar-glasses" data-before-rewrite-localise="https://www.tomsguide.com/computing/smart-glasses/xreal-one-vs-viture-pro-ar-glasses">Xreal One vs Viture Pro: Which AR glasses should you buy?</a></li><li><a href="https://www.tomsguide.com/computing/peripherals/i-spent-just-dollar30-on-a-mechanical-keyboard-to-prove-you-dont-need-to-waste-your-money" data-before-rewrite-localise="https://www.tomsguide.com/computing/peripherals/i-spent-just-dollar30-on-a-mechanical-keyboard-to-prove-you-dont-need-to-waste-your-money">I spent just $30 on a mechanical keyboard to prove you don’t need to waste your money</a></li></ul>
</div>
<div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-X9dpnXp5M4v9MZotSkGWCc"><section><p>Get instant access to breaking news, the hottest reviews, great deals and helpful tips.</p></section></div>



<!-- Drop in a standard article here maybe? -->

<div id="slice-container-authorBio-X9dpnXp5M4v9MZotSkGWCc"><p>Anthony Spadafora is the managing editor for security and home office furniture at Tom’s Guide where he covers everything from data breaches to password managers and the best way to cover your whole home or business with Wi-Fi. He also reviews standing desks, office chairs and other home office accessories with a penchant for building desk setups. Before joining the team, Anthony wrote for ITProPortal while living in Korea and later for TechRadar Pro after moving back to the US. Based in Houston, Texas, when he’s not writing Anthony can be found tinkering with PCs and game consoles, managing cables and upgrading his smart home.&nbsp;</p></div>
</section>






</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Zod v4 Beta (168 pts)]]></title>
            <link>https://v4.zod.dev/v4</link>
            <guid>43667925</guid>
            <pubDate>Sat, 12 Apr 2025 21:03:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://v4.zod.dev/v4">https://v4.zod.dev/v4</a>, See on <a href="https://news.ycombinator.com/item?id=43667925">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>Refer to the <a href="https://v4.zod.dev/v4/changelog">Changelog</a> for a complete list of breaking changes.</p></div></div>
<p>Zod 4 is now in beta after over a year of active development. It's faster, slimmer, more <code>tsc</code>-efficient, and implements some long-requested features.</p>
<p>To install the beta:</p>
<figure tabindex="0"></figure>
<p>Development will continue on the <a href="https://github.com/colinhacks/zod/tree/v4" rel="noreferrer noopener" target="_blank"><code>v4</code></a> branch over a 4-6 week beta period as I work with libraries to ensure day-one compatibility with the first stable release.</p>
<div><p>❤️</p><div><p>Huge thanks to <a href="https://go.clerk.com/zod-clerk" rel="noreferrer noopener" target="_blank">Clerk</a>, who supported my work on Zod 4 through their extremely generous <a href="https://clerk.com/blog/zod-fellowship" rel="noreferrer noopener" target="_blank">OSS Fellowship</a>. They were an amazing partner throughout the (much longer than anticipated!) development process.</p></div></div>

<p>Zod v3.0 was released in May 2021 (!). Back then Zod had 2700 stars on GitHub and 600k weekly downloads. Today it has 36.5k stars and 23M weekly downloads. After 24 minor versions, the Zod 3 codebase has hit a ceiling; the most commonly requested features and improvements require breaking changes.</p>
<p>Zod 4 implements all of these in one fell swoop. It uses an entirely new internal architecture that solves some long-standing design limitations, lays the groundwork for some long-requested features, and closes 9 of Zod's <a href="https://github.com/colinhacks/zod/issues?q=is%3Aissue%20state%3Aopen%20sort%3Areactions-%2B1-desc" rel="noreferrer noopener" target="_blank">10 most upvoted open issues</a>. With luck, it will serve as the new foundation for many more years to come.</p>
<p>For a scannable breakdown of what's new, see the table of contents. Click on any item to jump to that section.</p>

<p>You can run these benchmarks yourself in the Zod repo:</p>
<figure tabindex="0"></figure>
<p>Then to run a particular benchmark:</p>
<figure tabindex="0"></figure>
<h3 id="26x-faster-string-parsing"><a data-card="" href="#26x-faster-string-parsing">2.6x faster string parsing</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<figure tabindex="0"></figure>
<h3 id="3x-faster-array-parsing"><a data-card="" href="#3x-faster-array-parsing">3x faster array parsing</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<figure tabindex="0"></figure>
<h3 id="7x-faster-object-parsing"><a data-card="" href="#7x-faster-object-parsing">7x faster object parsing</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>This runs the <a href="https://moltar.github.io/typescript-runtime-type-benchmarks/" rel="noreferrer noopener" target="_blank">Moltar validation library benchmark</a>.</p>
<figure tabindex="0"></figure>

<p>Consider the following simple file:</p>
<figure tabindex="0"></figure>
<p>Compiling this file with <code>tsc --extendedDiagnostics</code> using <code>zod@3</code> results in &gt;25000 type instantiations. With <code>zod@4</code> it only results in ~1100.</p>
<div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>The Zod repo contains a <code>tsc</code> benchmarking playground. Try this for yourself using the compiler benchmarks in <code>packages/tsc</code>. The exact numbers may change as the implementation evolves.</p><figure tabindex="0"></figure></div></div>
<p>More importantly, Zod 4 has redesigned and simplified the generics of <code>ZodObject</code> and other schema classes to avoid some pernicious "instantiation explosions". For instance, chaining <code>.extend()</code> and <code>.omit()</code> repeatedly—something that previously caused compiler issues:</p>
<figure tabindex="0"></figure>
<p>In Zod 3, this took <code>4000ms</code> to compile; and adding additional calls to <code>.extend()</code> would trigger a "Possibly infinite" error. In Zod 4, this compiles in <code>400ms</code>, <code>10x</code> faster.</p>
<div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>Coupled with the upcoming <a href="https://github.com/microsoft/typescript-go" rel="noreferrer noopener" target="_blank"><code>tsgo</code></a> compiler, Zod 4's editor performance will scale to vastly larger schemas and codebases.</p></div></div>

<p>Consider the following simple script.</p>
<figure tabindex="0"></figure>
<p>It's about as simple as it gets when it comes to validation. That's intentional; it's a good way to measure the <em>core bundle size</em>—the code that will end up in the bundle even in simple cases. We'll bundle this with <code>rollup</code> using both Zod 3 and Zod 4 and compare the final bundles.</p>
<div><table><thead><tr><th>Package</th><th>Bundle (gzip)</th></tr></thead><tbody><tr><td><code>zod@3</code></td><td><code>12.47kb</code></td></tr><tr><td><code>zod@4</code></td><td><code>5.36kb</code></td></tr></tbody></table></div>
<p>The core bundle is ~57% smaller in Zod 4 (2.3x). That's good! But we can do a lot better.</p>

<p>Zod's method-heavy API is fundamentally difficult to tree-shake. Even our simple <code>z.boolean()</code> script pulls in the implementations of a bunch of methods we didn't use, like <code>.optional()</code>, <code>.array()</code>, etc. Writing slimmer implementations can only get you so far. That's where <code>@zod/mini</code> comes in.</p>
<figure tabindex="0"></figure>
<p>It's a sister library with a functional, tree-shakable API that corresponds one-to-one with <code>zod</code>. Where Zod uses methods, <code>@zod/mini</code> generally uses wrapper functions:</p>

<p>Not all methods are gone! The parsing methods are identical in <code>zod</code> and <code>@zod/mini</code>.</p>
<figure tabindex="0"></figure>
<p>There's also a general-purpose <code>.check()</code> method used to add refinements.</p>

<p>The following top-level refinements are available in <code>@zod/mini</code>. It should be fairly self-explanatory which <code>zod</code> methods they correspond to.</p>
<figure tabindex="0"></figure>
<p>This more functional API makes it easier for bundlers to tree-shaking the APIs you don't use. While <code>zod</code> is still recommended for the majority of use cases, any projects with uncommonly strict bundle size constraints should consider <code>@zod/mini</code>.</p>
<h3 id="66x-reduction-in-core-bundle-size"><a data-card="" href="#66x-reduction-in-core-bundle-size">6.6x reduction in core bundle size</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>Here's the script from above, updated to use <code>"@zod/mini"</code> instead of <code>"zod"</code>.</p>
<figure tabindex="0"></figure>
<p>When we build this with <code>rollup</code>, the gzipped bundle size is <code>1.88kb</code>. That's an 85% (6.6x) reduction in core bundle size compared to <code>zod@3</code>.</p>
<div><table><thead><tr><th>Package</th><th>Bundle (gzip)</th></tr></thead><tbody><tr><td><code>zod@3</code></td><td><code>12.47kb</code></td></tr><tr><td><code>zod@4</code></td><td><code>5.36kb</code></td></tr><tr><td><code>@zod/mini</code></td><td><code>1.88kb</code></td></tr></tbody></table></div>
<p>Learn more on the dedicated <a href="https://v4.zod.dev/packages/mini"><code>@zod/mini</code></a> docs page. Complete API details are mixed into existing documentation pages; code blocks contain separate tabs for <code>zod</code> and <code>@zod/mini</code> wherever their APIs diverge.</p>

<p>Zod 4 introduces a new system for adding strongly-typed metadata to your schemas. Metadata isn't stored inside the schema itself; instead it's stored in a "schema registry" that associates a schema with some typed metadata. To create a registry with <code>z.registry()</code>:</p>
<figure tabindex="0"></figure>
<p>To add schemas to your registry:</p>
<figure tabindex="0"></figure>
<p>Alternatively, you can use the <code>.register()</code> method on a schema for convenience:</p>
<!-- -->
<figure tabindex="0"></figure>
<h3 id="the-global-registry"><a data-card="" href="#the-global-registry">The global registry</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>Zod also exports a global registry <code>z.globalRegistry</code> that accepts some common JSON Schema-compatible metadata:</p>
<figure tabindex="0"></figure>
<h3 id="meta"><a data-card="" href="#meta"><code>.meta()</code></a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>To conveniently add a schema to <code>z.globalRegistry</code>, use the <code>.meta()</code> method.</p>
<!-- -->
<figure tabindex="0"></figure>
<div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>For compatibility with Zod 3, <code>.describe()</code> is still available, but <code>.meta()</code> is preferred.</p><figure tabindex="0"></figure></div></div>

<p>Zod 4 introduces first-party JSON Schema conversion via <code>z.toJSONSchema()</code>.</p>
<figure tabindex="0"></figure>
<p>Any metadata in <code>z.globalRegistry</code> is automatically included in the JSON Schema output.</p>
<figure tabindex="0"></figure>
<p>Refer to the <a href="https://v4.zod.dev/json-schema">JSON Schema docs</a> for information on customizing the generated JSON Schema.</p>

<p>Zod 4 introduces a new API for defining object types: <code>z.interface()</code>. This may seem surprising or confusing, so I'll briefly explain the reasoning here. (A full blog post on this topic is coming soon.)</p>
<h3 id="exacter-optional-properties"><a data-card="" href="#exacter-optional-properties">Exact(er) optional properties</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>In TypeScript a property can be "optional" in two distinct ways:</p>
<figure tabindex="0"></figure>
<p>In <code>KeyOptional</code>, the <code>prop</code> key can be omitted from the object ("key optional"). In <code>ValueOptional</code>, the <code>prop</code> key <em>must be set</em> however it can be set to <code>undefined</code> ("value optional").</p>
<p>Zod 3 cannot represent <code>ValueOptional</code>. Instead, <code>z.object()</code> automatically adds question marks to any key that accepts a value of <code>undefined</code>:</p>
<figure tabindex="0"></figure>
<p>This includes special schema types like <code>z.unknown()</code>:</p>
<figure tabindex="0"></figure>
<p>To properly represent "key optionality", Zod needed an <em>object-level</em> API for marking keys as optional, instead of trying to guess based on the value schema.</p>
<p>This is why Zod 4 introduces a new API for defining object types: <code>z.interface()</code>.</p>
<figure tabindex="0"></figure>
<p>Key optionality is now defined with a <code>?</code> suffix in the key itself. This way, you have the power to differentiate between key- and value-optionality.</p>
<div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>Besides this change to optionality, <code>z.object()</code> and <code>z.interface()</code> are functionality identical. They even use the same parser internally.</p></div></div>
<p>The <code>z.object()</code> API is <em>not deprecated</em>; feel free to continue using it if you prefer it! For the sake of backwards compatibility, <code>z.interface()</code> was added as an opt-in API.</p>
<h3 id="true-recursive-types"><a data-card="" href="#true-recursive-types">True recursive types</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>But wait there's more! After implementing <code>z.interface()</code>, I had a huge realization. The <code>?</code>-suffix API in <code>z.interface()</code> lets Zod sidestep a TypeScript limitation that has long prevented Zod from cleanly representing recursive (cyclical) types. Take this example from the old Zod 3 docs:</p>
<figure tabindex="0"></figure>
<p>This has been a thorn in my side for years. To define a cyclical object type, you must</p>
<ul>
<li>define a redundant interface</li>
<li>use <code>z.lazy()</code> to avoid reference errors</li>
<li>cast your schema to <code>z.ZodType</code></li>
</ul>
<p>That's terrible.</p>
<p>Here's the same example in Zod 4:</p>
<figure tabindex="0"></figure>
<p>No casting, no <code>z.lazy()</code>, no redundant type signatures. Just use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get" rel="noreferrer noopener" target="_blank">getters</a> to define any cyclical properties. The resulting instance has all the object methods you expect:</p>
<figure tabindex="0"></figure>
<p>This means Zod can finally represent commonly cyclical data structure like ORM schemas, GraphQL types, etc.</p>
<div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>Given its ability to represent both cyclical types and more exact optionality, I recommend always using <code>z.interface()</code> over <code>z.object()</code> without reservation. That said, <code>z.object()</code> will never be deprecated or removed, so feel free to keep using it if you prefer.</p></div></div>

<p>To validate <code>File</code> instances:</p>
<figure tabindex="0"></figure>

<p>Zod 4 introduces a new <code>locales</code> API for globally translating error messages into different languages.</p>
<figure tabindex="0"></figure>
<p>At the time of this writing only the English locale is available; There will be a call for pull request from the community shortly; this section will be updated with a list of supported languages as they become available.</p>

<p>The success of the <a href="https://www.npmjs.com/package/zod-validation-error" rel="noreferrer noopener" target="_blank"><code>zod-validation-error</code></a> package demonstrates that there's significant demand for an official API for pretty-printing errors. If you are using that package currently, by all means continue using it.</p>
<p>Zod now implements a top-level <code>z.prettifyError</code> function for converting a <code>ZodError</code> to a user-friendly formatted string.</p>
<figure tabindex="0"></figure>
<p>This returns the following pretty-printable multi-line string:</p>
<figure tabindex="0"></figure>
<p>Currently the formatting isn't configurable; this may change in the future.</p>

<p>All "string formats" (email, etc.) have been promoted to top-level functions on the <code>z</code> module. This is both more concise and more tree-shakable. The method equivalents (<code>z.string().email()</code>, etc.) are still available but have been deprecated. They'll be removed in the next major version.</p>
<figure tabindex="0"></figure>
<h3 id="custom-email-regex"><a data-card="" href="#custom-email-regex">Custom email regex</a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>The <code>z.email()</code> API now supports a custom regular expression. There is no one canonical email regex; different applications may choose to be more or less strict. For convenience Zod exports some common ones.</p>
<figure tabindex="0"></figure>

<p>Zod 4 implements <code>z.templateLiteral()</code>. Template literal types are perhaps the biggest feature of TypeScript's type system that wasn't previously representable.</p>
<figure tabindex="0"></figure>
<p>Every Zod schema type that can be stringified stores an internal regex: strings, string formats like <code>z.email()</code>, numbers, boolean, bigint, enums, literals, undefined/optional, null/nullable, and other template literals. The <code>z.templateLiteral</code> constructor concatenates these into a super-regex, so things like string formats (<code>z.email()</code>) are properly enforced (but custom refinements are not!).</p>
<p>Read the <a href="https://v4.zod.dev/api#template-literals">template literal docs</a> for more info.</p>

<p>New numeric "formats" have been added for representing fixed-width integer and float types. These return a <code>ZodNumber</code> instance with proper minimum/maximum constraints already added.</p>
<figure tabindex="0"></figure>
<p>Similarly the following <code>bigint</code> numeric formats have also been added. These integer types exceed what can be safely represented by a <code>number</code> in JavaScript, so these return a <code>ZodBigInt</code> instance with the proper minimum/maximum constraints already added.</p>
<figure tabindex="0"></figure>

<p>The existing <code>z.coerce.boolean()</code> API is very simple: falsy values (<code>false</code>, <code>undefined</code>, <code>null</code>, <code>0</code>, <code>""</code>, <code>NaN</code> etc) become <code>false</code>, truthy values become <code>true</code>.</p>
<p>This is still a good API, and its behavior aligns with the other <code>z.coerce</code> APIs. But some users requested a more sophisticated "env-style" boolean coercion. To support this, Zod 4 introduces <code>z.stringbool()</code>:</p>
<figure tabindex="0"></figure>
<p>To customize the truthy and falsy values:</p>
<figure tabindex="0"></figure>
<p>Refer to the <a href="https://v4.zod.dev/api#stringbools"><code>z.stringbool()</code> docs</a> for more information.</p>

<p>The majority of breaking changes in Zod 4 involve the <em>error customization</em> APIs. They were a bit of a mess in Zod 3; Zod 4 makes things significantly more elegant, to the point where I think it's worth highlighting here.</p>
<p>Long story short, there is now a single, unified <code>error</code> parameter for customizing errors, replacing the following APIs:</p>
<p>Replace <code>message</code> with <code>error</code>. (The <code>message</code> parameter is still supported but deprecated.)</p>
<figure tabindex="0"></figure>
<p>Replace <code>invalid_type_error</code> and <code>required_error</code> with <code>error</code> (function syntax):</p>
<figure tabindex="0"></figure>
<p>Replace <code>errorMap</code> with <code>error</code> (function syntax):</p>
<figure tabindex="0"></figure>

<p>Discriminated union support has improved in a couple ways. First, you no longer need to specify the discriminator key. Zod now has a robust way to identify the discriminator key automatically. If no shared discriminator key is found, Zod will throw an error at schema initialization time.</p>
<figure tabindex="0"></figure>
<p>Discriminated unions schema now finally <em>compose</em>—you can use one discriminated union as a member of another. Zod determines the optimal discrimination strategy.</p>
<figure tabindex="0"></figure>

<p>The <code>z.literal()</code> API now optionally supports multiple values.</p>
<figure tabindex="0"></figure>

<p>In Zod 3, they were stored in a <code>ZodEffects</code> class that wrapped the original schema. This was inconvenient, as it meant you couldn't interleave <code>.refine()</code> with other schema methods like <code>.min()</code>.</p>
<figure tabindex="0"></figure>
<p>In Zod 4, refinements are stored inside the schemas themselves, so the code above works as expected.</p>
<figure tabindex="0"></figure>
<h3 id="overwrite"><a data-card="" href="#overwrite"><code>.overwrite()</code></a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-label="Link to section"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg></h3>
<p>The <code>.transform()</code> method is extremely useful, but it has one major downside: the output type is no longer <em>introspectable</em> at runtime. The transform function is a black box that can return anything. This means (among other things) there's no sound way to convert the schema to JSON Schema.</p>
<figure tabindex="0"></figure>
<p>Zod 4 introduces a new <code>.overwrite()</code> method for representing transforms that <em>don't change the inferred type</em>. Unlike <code>.transform()</code>, this method returns an instance of the original class. The overwrite function is stored as a refinement, so it doesn't (and can't) modify the inferred type.</p>
<figure tabindex="0"></figure>
<div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg><div><p>The existing <code>.trim()</code>, <code>.toLowerCase()</code> and <code>.toUpperCase()</code> methods have been reimplemented using <code>.overwrite()</code>.</p></div></div>

<p>While this will not be relevant to the majority of Zod users, it's worth highlighting. The addition of <code>@zod/mini</code> necessitated the creation of a third package <code>@zod/core</code> that contains the core functionality shared between <code>zod</code> and <code>@zod/mini</code>.</p>
<p>I was resistant to this at first, but now I see it as one of Zod 4's most important features. It lets Zod level up from a simple library to a fast validation "substrate" that can be sprinkled into other libraries.</p>
<p>If you're building a schema library, refer to the implementations of <code>zod</code> and <code>@zod/mini</code> to see how to build on top of the foundation <code>@zod/core</code> provides. Don't hesitate to get in touch in GitHub discussions or via <a href="https://x.com/colinhacks" rel="noreferrer noopener" target="_blank">X</a>/<a href="https://bsky.app/profile/colinhacks.com" rel="noreferrer noopener" target="_blank">Bluesky</a> for help or feedback.</p>

<p>I'm planning to write up a series of additional posts explaining the design process and rationale behind some major features like <code>@zod/mini</code> and <code>z.interface()</code>. I'll update this section as those get posted.</p>
<p>Zod 4 will remain in beta for roughly 6 weeks as I work with library authors and major adopters to ensure a smooth day-one transition from Zod 3 to Zod 4. I encourage all users of Zod to upgrade their installation and provide feedback during the beta window.</p>
<figure tabindex="0"></figure>
<p>Happy parsing!<br>
— Colin McDonnell <a href="https://x.com/colinhacks" rel="noreferrer noopener" target="_blank">@colinhacks</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: How do you monetize personal code if it's not an "app"? (147 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43667887</link>
            <guid>43667887</guid>
            <pubDate>Sat, 12 Apr 2025 20:56:48 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43667887">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="43667887">
      <td><span></span></td>      <td><center><a id="up_43667887" href="https://news.ycombinator.com/vote?id=43667887&amp;how=up&amp;goto=item%3Fid%3D43667887"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=43667887">Ask HN: How do you monetize personal code if it's not an "app"?</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_43667887">104 points</span> by <a href="https://news.ycombinator.com/user?id=splimeproject">splimeproject</a> <span title="2025-04-12T20:56:48 1744491408"><a href="https://news.ycombinator.com/item?id=43667887">7 hours ago</a></span> <span id="unv_43667887"></span> | <a href="https://news.ycombinator.com/hide?id=43667887&amp;goto=item%3Fid%3D43667887">hide</a> | <a href="https://hn.algolia.com/?query=Ask%20HN%3A%20How%20do%20you%20monetize%20personal%20code%20if%20it%27s%20not%20an%20%22app%22%3F&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=43667887&amp;auth=a791293e2baeb64a463f4745dab5fac204be12ad">favorite</a> | <a href="https://news.ycombinator.com/item?id=43667887">37&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey HN,</p><p>I’ve been thinking a lot about this lately and wanted to ask — how do you monetize your personal code if it doesn’t really fit into a classic product or SaaS model?</p><p>For example:</p><p>* I have a trained ML model that solves a niche task really well — but turning it into a full-blown app seems like overkill.</p><p>* I’ve written a CLI tool that processes log files better than anything else I’ve found, but it’s too specialized to justify making a company out of it.</p><p>* I built a few small functions in different languages (Python, Go, Rust) that do neat things — data cleanup, API scraping, PDF generation — but none of them are “products” by themselves.</p><p>I’m exploring ways to package and expose this kind of work: maybe as paid APIs, small function services, or even “pocket FaaS” instances others can plug into.</p><p>Curious if anyone here has tried something similar — or if you’ve seen creative ways to turn technical tools or utilities into sustainable side income.</p><p>Thanks in advance for sharing ideas or examples!</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: memEx, a personal knowledge base inspired by zettlekasten and org-mode (172 pts)]]></title>
            <link>https://gitea.bubbletea.dev/shibao/memex</link>
            <guid>43667061</guid>
            <pubDate>Sat, 12 Apr 2025 19:02:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gitea.bubbletea.dev/shibao/memex">https://gitea.bubbletea.dev/shibao/memex</a>, See on <a href="https://news.ycombinator.com/item?id=43667061">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				



				
				
					
						

					
					
<div id="repo-files-table">
	<div>
		<div>
	
		<p><img loading="lazy" src="https://gitea.bubbletea.dev/avatars/d77ebd6c802813bab859df9afebed22f324e701735f587198fd9736e19e76fd0?size=48" title="shibao" width="24" height="24">
		
			<a title="shibao" href="https://gitea.bubbletea.dev/shibao"><strong>shibao</strong></a>
		
	
	<a rel="nofollow" href="https://gitea.bubbletea.dev/shibao/memEx/commit/926d4f983769542ff79e1e57c75514dabc7fc61a">
		<span>926d4f9837</span>
		
	</a>
	
	
		<span data-tippy="commit-statuses" tabindex="0">
			


	





		</span></p><div>
	<p>
		
			All checks were successful
		

		
	</p>

	<div>
		
			<div>
				


	





				<p>continuous-integration/drone/tag <span>Build is passing</span></p>
				
			</div>
		
			<div>
				


	





				<p>continuous-integration/drone/push <span>Build is passing</span></p>
				
			</div>
		
		
	</div>
</div>


	
	<p><span title="fix style"><span><a href="https://gitea.bubbletea.dev/shibao/memEx/commit/926d4f983769542ff79e1e57c75514dabc7fc61a">fix style</a></span>
		
	</span>

</p></div>
		<p><relative-time prefix="" tense="past" datetime="2025-04-05T04:02:14Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 04:02:14 +00:00</relative-time></p>
	</div>
	
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T04:02:14Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 04:02:14 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T04:02:14Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 04:02:14 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T04:02:14Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 04:02:14 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2023-02-04T17:36:27-05:00" data-tooltip-content="" data-tooltip-interactive="true">2023-02-04 17:36:27 -05:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2023-04-13T23:29:29-04:00" data-tooltip-content="" data-tooltip-interactive="true">2023-04-13 23:29:29 -04:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-02-13T22:01:54Z" data-tooltip-content="" data-tooltip-interactive="true">2025-02-13 22:01:54 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:51Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:51 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2022-12-19T21:09:50-05:00" data-tooltip-content="" data-tooltip-interactive="true">2022-12-19 21:09:50 -05:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-02-15T06:01:03Z" data-tooltip-content="" data-tooltip-interactive="true">2025-02-15 06:01:03 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2024-12-31T00:32:20-05:00" data-tooltip-content="" data-tooltip-interactive="true">2024-12-31 00:32:20 -05:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-04-05T03:42:43Z" data-tooltip-content="" data-tooltip-interactive="true">2025-04-05 03:42:43 +00:00</relative-time></p>
		</div>
	
		<div>
			
			
			
			
			
			<p><relative-time prefix="" tense="past" datetime="2025-02-15T06:01:03Z" data-tooltip-content="" data-tooltip-interactive="true">2025-02-15 06:01:03 +00:00</relative-time></p>
		</div>
	
</div>

					
						<div id="readme">

	

	<h4>
		
		
	</h4>
	<div>
			
				
<p dir="auto"><a href="https://gitea.bubbletea.dev/shibao/memEx/raw/branch/stable/home.png" target="_blank" rel="nofollow noopener"><img src="https://gitea.bubbletea.dev/shibao/memEx/raw/branch/stable/home.png" alt="home page screenshot"></a></p>
<p dir="auto">A structured personal knowledge base, inspired by zettlekasten and org-mode.</p>
<ul dir="auto">
<li>Notes: Document notes about individual items or concepts</li>
<li>Contexts: Provide context around a single topic and hotlink to individual
concepts in your notes</li>
<li>Pipelines: Document your processes, attaching contexts to each step.</li>
</ul>
<h2 id="user-content-features" dir="auto">Features</h2>
<ul dir="auto">
<li>Multi-user: Built with sharing and collaboration in mind</li>
<li>Privacy: Privacy controls on a per-note, context or pipeline basis</li>
<li>Convenient: Accessible from any internet-capable device</li>
<li>Backlinks: View referencing items from the referenced item</li>
</ul>
<h2 id="user-content-installation" dir="auto">Installation</h2>
<ol dir="auto">
<li>Install <a href="https://docs.docker.com/compose/install/" rel="nofollow">Docker Compose</a> or alternatively <a href="https://docs.docker.com/desktop/" rel="nofollow">Docker Desktop</a> on your machine.</li>
<li>Copy the example <a href="https://gitea.bubbletea.dev/shibao/memEx/src/branch/stable/docker-compose.yml" rel="nofollow">docker-compose.yml</a>. into your local machine where you want.
Bind mounts are created in the same directory by default.</li>
<li>Set the configuration variables in <code>docker-compose.yml</code>. You'll need to run
<code>docker run -it shibaobun/memex /app/priv/random.sh</code> to generate a new
secret key base.</li>
<li>Use <code>docker-compose up</code> or <code>docker-compose up -d</code> to start the container!</li>
</ol>
<p dir="auto">The first created user will be created as an admin.</p>
<h2 id="user-content-configuration" dir="auto">Configuration</h2>
<p dir="auto">You can use the following environment variables to configure memEx in
<a href="https://gitea.bubbletea.dev/shibao/memEx/src/branch/stable/docker-compose.yml" rel="nofollow">docker-compose.yml</a>.</p>
<ul dir="auto">
<li><code>HOST</code>: External url to generate links with. Must be set with your hosted
domain name! I.e. <code>memex.mywebsite.tld</code></li>
<li><code>PORT</code>: Internal port to bind to. Defaults to <code>4000</code>. Must be reverse proxied!</li>
<li><code>DATABASE_URL</code>: Controls the database url to connect to. Defaults to
<code>ecto://postgres:postgres@memex-db/memex</code>.</li>
<li><code>ECTO_IPV6</code>: If set to <code>true</code>, Ecto should use ipv6 to connect to PostgreSQL.
Defaults to <code>false</code>.</li>
<li><code>POOL_SIZE</code>: Controls the pool size to use with PostgreSQL. Defaults to <code>10</code>.</li>
<li><code>SECRET_KEY_BASE</code>: Secret key base used to sign cookies. Must be generated
with <code>docker run -it shibaobun/memex priv/random.sh</code> and set for server to start.</li>
<li><code>REGISTRATION</code>: Controls if user sign-up should be invite only or set to
public. Set to <code>public</code> to enable public registration. Defaults to <code>invite</code>.</li>
<li><code>LOCALE</code>: Sets a custom default locale. Defaults to <code>en_US</code>.</li>
<li><code>SMTP_HOST</code>: The url for your SMTP email provider. Must be set</li>
<li><code>SMTP_PORT</code>: The port for your SMTP relay. Defaults to <code>587</code>.</li>
<li><code>SMTP_USERNAME</code>: The username for your SMTP relay. Must be set!</li>
<li><code>SMTP_PASSWORD</code>: The password for your SMTP relay. Must be set!</li>
<li><code>SMTP_SSL</code>: Set to <code>true</code> to enable SSL for emails. Defaults to <code>false</code>.</li>
<li><code>EMAIL_FROM</code>: Sets the sender email in sent emails. Defaults to
<code>no-reply@HOST</code> where <code>HOST</code> was previously defined.</li>
<li><code>EMAIL_NAME</code>: Sets the sender name in sent emails. Defaults to "memEx".</li>
</ul>
<h2 id="user-content-contribution" dir="auto">Contribution</h2>
<p dir="auto">Contributions are greatly appreciated, no ability to code needed! You can browse
the <a href="https://gitea.bubbletea.dev/shibao/memex/src/branch/stable/contributing.md" rel="nofollow">Contribution
Guide</a>
to learn more.</p>
<p dir="auto">I can be contacted at <a href="mailto:shibao@bubbletea.dev" rel="nofollow">shibao@bubbletea.dev</a>, or on
the fediverse at
<a href="https://misskey.bubbletea.dev/@shibao" rel="nofollow">@shibao@misskey.bubbletea.dev</a>. Thank
you!</p>
<h2 id="user-content-license" dir="auto">License</h2>
<p dir="auto">memEx is licensed under AGPLv3 or later. A copy of the latest version of the
license can be found at
<a href="https://gitea.bubbletea.dev/shibao/memex/src/branch/stable/license.md" rel="nofollow">license.md</a>.</p>
<h2 id="user-content-links" dir="auto">Links</h2>
<ul dir="auto">
<li><a href="https://gitea.bubbletea.dev/shibao/memex" rel="nofollow">Gitea</a>: Main repo, feature
requests and bug reports</li>
<li><a href="https://github.com/shibaobun/memex" rel="nofollow">Github</a>: Source code mirror, please
don't open pull requests to this repository</li>
<li><a href="https://weblate.bubbletea.dev/engage/memex" rel="nofollow">Weblate</a>: Contribute to
translations!</li>
</ul>
<hr>
<p dir="auto"><a href="https://drone.bubbletea.dev/shibao/memEx" rel="nofollow"><img src="https://drone.bubbletea.dev/api/badges/shibao/memEx/status.svg?ref=refs/heads/dev" alt="Build
Status"></a>
<a href="https://weblate.bubbletea.dev/engage/memEx/" rel="nofollow"><img src="https://weblate.bubbletea.dev/widgets/memEx/-/svg-badge.svg" alt="translation
status"></a></p>

			
		</div>
</div>

					
				
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why is there a "small house" in IBM's Code page 437? (213 pts)]]></title>
            <link>https://blog.glyphdrawing.club/why-is-there-a-small-house-in-ibm-s-code-page-437/</link>
            <guid>43667010</guid>
            <pubDate>Sat, 12 Apr 2025 18:55:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.glyphdrawing.club/why-is-there-a-small-house-in-ibm-s-code-page-437/">https://blog.glyphdrawing.club/why-is-there-a-small-house-in-ibm-s-code-page-437/</a>, See on <a href="https://news.ycombinator.com/item?id=43667010">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <div>
<h4 id="note">Note:</h4>
<p>This post is a companion piece to my article <a href="https://blog.glyphdrawing.club/the-origins-of-del-0x7f-and-its-legacy-in-amiga-ascii-art/">The origins of DEL (0x7F) and its Legacy in Amiga ASCII art</a>. That article is all about the character DEL, what it is, how it was used, and why it even has a visual representation, but with a focus on Commodore's Amiga computers. Whereas AmigaOS's Topaz font renders DEL with diagonal lines, IBM's PC renders it... as a house. This bonus article is about that.</p>
<p>This article wouldn't have happened without the great help and insights of <a href="https://mw.rat.bz/">Michael Walden</a> and <a href="https://int10h.org/blog/">VileR</a>, thank you!</p>
<p>If you want to comment on something (minor or major), please send me an email at <strong><a href="mailto:hlotvonen@gmail.com">hlotvonen@gmail.com</a></strong>. I would greatly appreciate it, and if something needs fixing I would gladly update the article with proper credit.</p>
</div>
<hr>
<div>
<h2 id="a-b-c-d-x-y-zhouse">a-b-c-d-x-y-z...HOUSE?</h2>
<p>There's a small house ( <span>⌂</span> ) in the middle of IBM's infamous character set Code Page 437. <strong>"Small house"</strong>—that's the official IBM name given to the glyph at code position 0x7F, where a control character for "Delete" (DEL) should logically exist. It's cute, but a little strange. I wonder, how did it get there? Why did IBM represent DEL as a <em>house</em>, of all things?</p>
</div>
<figure>
    <img alt="Code Page 437 table, highlighting the character 'small house' at 0x7F" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/WtGwIoZIJW-512.png" width="512" height="640">
    <figcaption>IBM PC's Code Page 437</figcaption>
</figure>
<h2 id="the-rise-of-code-page-437">The rise of Code Page 437</h2>
<p>Released in 1981, the <em>IBM Personal Computer</em> (PC) launched IBM's first microcomputer model line. Alongside it, they introduced an 8-bit character set, which later became known as <em>Code Page 437</em> (CP437). Unlike earlier IBM machines, the PC was built using off-the-shelf components instead of proprietary IBM technology, which spawned a wave of third-party clones marketed as "IBM-compatible" systems. IBM PC architecture quickly became the dominant global computing standard. By the end of the '80s, 84% of all sold microcomputers were either IBM PC's or its clones.<sup><a href="#fn1" id="fnref1">[1]</a></sup></p>
<p>The rise of PC also meant the widespread adoption of CP437, making it one of the most copied and recognizable character sets ever. VileR's <a href="https://int10h.org/oldschool-pc-fonts/">Ultimate Oldschool PC Font Pack</a> lists over 200 fonts based on CP437 from various IBM PC models and their clones.</p>
<p>CP437 was based on <em>American Standard Code for Information Interchange</em> (ASCII), which defines the first 127 characters. This was a big change for IBM who had previously used the fundamentally different EBCDIC standard. But as ASCII covers only 96 <em>printable</em> characters of the total 256 available in 8-bit code, IBM had to figure out what to do with the rest of them. Instead of basing their choices on any predefined standards extending ASCII, or copying others, they decided (yet again) to do their own thing.</p>
<h2 id="a-set-of-not-serious-characters">A set of "not serious" characters</h2>
<p>The extended bits (characters 128–255) of CP437 contain mainly a mishmash of international text characters, box drawing shapes and mathematical symbols. But for the undefined control characters they did something wildly different. Dr. David J. Bradley, one of the creators of the IBM PC, recounts the <a href="https://www.vintagecomputing.com/index.php/archives/790/the-ibm-smiley-character-turns-30"><em>origins of the ASCII smiley character</em></a> in an email conversation with Benj Edwards of <a href="http://vintagecomputing.com/">vintagecomputing.com</a>:</p>
<blockquote>
<p>"Now, what to do about the first 32 characters (x00-x1F)? ASCII defines them as control codes, carriage return, line feed, tab… These characters originated with teletype transmission. But we could display them on the character based screens. So we added a set of “not serious” characters. They were intended as display only characters, not for transmission or storage. Their most probable use would be in [text] character based games."<sup><a href="#fn2" id="fnref2">[2]</a></sup></p>
</blockquote>
<p>The first 32 characters (x00-x1F) of CP437 mentioned by Bradley include smileys, playing card suits, musical notes, a solar symbol, gender symbols and arrows. What Bradley doesn't explicitly mention is the character at 0x7F, which is also a (sort-of) control character used in teletype transmission. It's assigned to the Delete character, which was used to obliterate undesirable characters on paper tape by punching it full of holes. The all-holes pattern in ASCII is at the 127th code point, represented by 0x7F in hexadecimal. This character is like all the other 32 control characters in that it doesn't have a defined visual representation, nor any particular use in digital computers like the IBM PC. So, even though Bradley doesn't explicitly mention 0x7F, it's represented in CP437 as a tiny pixel-house ( <span>⌂</span> ), suggesting it also belongs to the "not serious" group of characters.</p>
<figure>
    <img alt="Code Page 437 table, highlighting the 'not serious' characters" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/td-XacaseR-304.png" width="304" height="568">
    <figcaption>The "not serious" characters</figcaption>
</figure>
<p>According to Bradley, the "not serious" characters were developed during a 4-hour plane travel. He's of course exaggerating, but gave it as an "indication of the rapidity in which many significant decisions were undertaken". But even though they developed them relatively quickly, they must have based them on <em>something</em>.</p>
<p>What is this something? IBM could have followed an existing standard and taken the graphics for control characters from ANSI X3.32-1973—but they are ambiguous and hard-to-use (see part 2 of <a href="https://blog.glyphdrawing.club/the-origins-of-del-0x7f-and-its-legacy-in-amiga-ascii-art/#part-2">The origins of DEL (0x7F) and its Legacy in Amiga ASCII art</a>). Instead, going with these "not serious" characters was arguably a better choice, especially as a business decision. Characters like the smiley face at 0x01 became iconic, precisely because they offered a simple way to represent player characters in text-based games like <a href="https://en.wikipedia.org/wiki/Rogue_(video_game)">Rogue</a> and <a href="https://en.wikipedia.org/wiki/ZZT">ZZT</a>.</p>
<p>IBM was by no means the first to include "not serious" characters. For example, Commodore's PETSCII character set from 1977 is known for its graphical shapes which also include card suites.<sup><a href="#fn3" id="fnref3">[3]</a></sup></p>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/P91gLYO8_N-259.png" width="259" height="293">
    <figcaption>PETSCII (manually ordered)</figcaption>
</figure>
<p>Even the American National Standards Institute's (ANSI) X3.2 committee considered including some "not serious" symbols for an official 8-bit ASCII extension.</p>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/IKput0bqT4-800.png" width="800" height="715">
    <figcaption>Proposal for an 8-bit extension for ASCII. It didn't get standardized. The closest to an "official" 8-bit extension to ASCII is ISO 8859-1 (also called ISO Latin-1), which extended support for additional Latin based languages, standardized by the International Organization for Standardization (ISO) in 1987.</figcaption>
</figure>
<p>But, why add these quirky characters, when arguably more useful characters, like extending support for additional languages or writing systems, could be added? Bob Bemer ("The Father of ASCII") defends their inclusion in an article for the <em>Interface Age</em> in July 1978:</p>
<blockquote>
<p>"Presumably the card suits will strike your eye, and you will wonder why so many other useful symbols were ignored in favor of these. Don't worry, they will always come in handy; it's sometimes useful to have symbols whose meaning you can reassign without harm to programming languages, etc."<sup><a href="#fn4" id="fnref4">[4]</a></sup></p>
</blockquote>
<p>This is definitely the case with Code Page 437's house symbol ( <span>⌂</span> ). It is ambiguous enough that it can resemble many different things, not just a house. For example, in the DOS games <a href="https://www.mobygames.com/game/16049/by-fire-sword/"><em>By Fire &amp; Sword</em></a> (1985) it's a <strong>town</strong>, in <a href="https://cheerfulghost.com/jdodson/posts/1179/zzt-an-epic-dos-ansi-adventure"><em>ZZT</em></a> (1991) it stands for <strong>"energizers"</strong>, in <a href="https://www.mobygames.com/game/67110/bugs/"><em>Bugs!</em></a> (1982) it's the <strong>player's gun</strong>, in <a href="https://www.mobygames.com/game/72491/ibm-personal-computer-basic-compiler-included-game/"><em>Target</em></a> (1982) it represents <strong>player's ammo</strong>, and in <a href="https://sparcie.wordpress.com/2018/03/28/numjump-for-dos/"><em>Numjump</em></a> (2017) they're deadly <strong>spikes</strong>.</p>
<figure>
    <img alt="Screenshot from Numjump. In this game, the house symbols represent spikes." loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/eiKv43OuWf-711.png" width="711" height="444">
    <figcaption>In the 2017 homebrew DOS game <em>Numjump</em> by Daniel Remar, the house symbols represent spikes.</figcaption>
</figure>
<figure>
    <img alt="Screenshot from ZZT. In this game, the house symbols represent energizers." loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/hjr_rWbs7m-640.gif" width="640" height="350">
    <figcaption>Screenshot from ZZT, made by Tim Sweeney (the CEO of Epic Games!) in 1991. In this game, the house symbols represent energizers (on the right edge of the game view).</figcaption>
</figure>
<p>PC ASCII artists have used the house symbol, not as a specific thing with meaning, but purely for its shape and size, to create what is called "newskool", or filled ASCII art. In the classic 8×16 pixels-per-character IBM VGA font, it's one of the few characters that sit one pixel <em>higher</em> from the baseline.</p>
<figure>
    <img alt="The house, compared to a and $" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/Qimy5q8QQv-260.png" width="260" height="178">
</figure>
<p>When combined with other characters that are just slighly larger or smaller creates an illusion of a continuous shape: <span>·∙•↔*⌂S§¼╣$♫b%⌂≈←·</span>.</p>
<p>It's also fairly wide and "dark" in its typographic color, so it fills the space it occupies, without leaving any considerable gaps of negative space. In other words, it doesn't stand out when used carefully.</p>
<p>Its angled top makes it useful for creating curves, as seen in ddrj's <a href="https://16colo.rs/pack/mimic73/drj-mmc.ans">drj-mmc.ans</a> from 2004 (house characters are highlighted in red):</p>
<figure>
    <img alt="Screenshot from Numjump. In this game, the house symbols represent spikes." loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/UuUNxQ4W3c-640.png" width="640" height="672">
    <figcaption>drj-mmc.ans. Colors have been changed from original to highlight the use of 0x7F.</figcaption>
</figure>
<h2 id="theories-on-the-origins-of-cp437s-house">Theories on the origins of CP437's house</h2>
<p>But what about IBM? Why did IBM decide to include a symbol representing a house in their character set? It's a strange glyph; adding a smiley is readily arguable, and playing card suits have existed in prior character sets, but a house—as far as I can tell—it didn't exist as a glyph anywhere before IBM's Code Page 437. It seems to come out of thin air. To my knowledge, there are no (surviving) documents on the design process of the character set. The little bit we know comes from a few interviews, like the one with David J. Bradley, and from meticulous research done by people like <a href="https://int10h.org/blog/2024/10/missing-ibm-pc-localization-disks-roms/">VileR</a>. So, the only thing I can do is speculate. Here are my thoughts:</p>
<div>
<h4 id="acknowledgements">Acknowledgements</h4>
<p>Most of these theories are based on my conversations with VileR and Michael Walden, credit goes to them!</p>
</div>
<h4 id="theory-1-house-as-a-symbol-for-home-computers">Theory #1: House as a symbol for home computers</h4>
<p>My first thought was that maybe the house was included as a symbol for IBM's new line of personal <strong>home</strong> computers? Before IBM PC's launch in 1981, IBM had largely been known for their business computers. So, it makes sense that, as IBM was entering the growing market of personal computers, they wanted to signal to the home users that their PC had something <em>fun</em> to offer—hence the "not serious" glyphs, like the smiley, which were added with text-based games in mind. So maybe they added the house glyph for the same reason? Surely the smileys must have a house they live in! It's compelling to think this might be true, but to be clear, this is pure speculation, and there's nothing to support this claim.</p>

<p>Another "hunch" was suggested by VileR. He entertained the idea that the house character itself was associated with the action of deleting text, or related to the backspace symbol ⌫ (U+232B). If you rotate ⌫ 90˚ clockwise, you do get a house ⌂ (with an × in it). It's an interesting idea, but there doesn't seem to be anything to support this claim either.</p>
<h4 id="theory-3-its-borrowed-from-system23-datamaster">Theory #3: It's borrowed from System/23 Datamaster</h4>
<p>In the Benj Edwards' email interview, David Bradley also mentions that the choice of "serious characters" was based on the immediate ancestor of PC at IBM, the System/23 Datamaster.<sup><a href="#fn5" id="fnref5">[5]</a></sup> VileR found the Datamaster <a href="https://forum.vcfed.org/index.php?threads/ibm-system-23-datamaster-display-and-character-generation.1247762/">character ROM image</a>, which confirms that some character sequences <em>were</em> copied to CP437 unchanged (üéâäàåçêëèïî). But, there is no house symbol, or anything resembling it.</p>
<h4 id="theory-4-its-borrowed-from-wang-word-processing-machines">Theory #4: It's borrowed from Wang word processing machines</h4>
<p>In a blog post <a href="https://www.os2museum.com/wp/weird-tales/">Weird Tales</a>, Michal Necasek of OS/2 Museum examines claims made by Bill Gates that Microsoft wanted IBM to copy some Wang word processing characters ("smiley faces and boxes and triangles and stuff") into the IBM PC's character set because they were considering creating their own Wang clone. Necasek half-debunks and half-confirms these claims, as none of the Wang character sets have smileys, yet they do share some strikingly similiar characters with CP437, that are unlikely to be a coincidence. These include left/right triangles, a box, a diamond, double exclamation mark, and several arrows.<sup><a href="#fn6" id="fnref6">[6]</a></sup> But again, none of the Wang character sets include a house symbol, so IBM couldn't have copied it from there.</p>
<h4 id="theory-5-it-comes-from-blissymbolics">Theory #5: It comes from Blissymbolics</h4>
<p>So, IBM didn't get the house glyph by copying it from other character sets. But it's unlikely that IBM's team designed the house symbol in a vacuum. If it's not from another computer system, then maybe they found it by looking at books for existing symbol systems and iconography?</p>
<figure>
    <img alt="An icon for a hotel resembles CP437's house glyph" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/C9a5Pmlz33-160.jpeg" width="160" height="160">
</figure>
<p>For example, a hotel icon used by the <abbr title="International Civil Aviation Organization">ICAO</abbr> in the 1970s is quite similar in shape to CP437's house.<sup><a href="#fn7" id="fnref7">[7]</a></sup></p>
<figure>
    <img alt="A house symbol from blissymbolics" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/eH3vupWSkh-160.jpeg" width="160" height="160">
</figure>
<p>Another possibile influence is Blissymbolics. It was originally developed in 1949, but gained some renewed popularity in the 1970s and 1980s.<sup><a href="#fn8" id="fnref8">[8]</a></sup> The Blissymbolics house glyph is striking similar to IBM's character at 0x7F.<sup><a href="#fn9" id="fnref9">[9]</a></sup> If IBM was looking at symbol books, searching for inspiration for their new character set, it's possible they would have come upon Blissymbolics. The timeline fits: a book <em>Teaching and Using Blissymbolics</em> was published in 1980, at the time when IBM was developing CP437.</p>

<h4 id="theory-6-botched-copy-of-a-dot-stretched-wang-delta">Theory #6: Botched copy of a dot-stretched Wang delta</h4>
<p>Or maybe it <em>does</em> come from Wang? Viler makes an interesting observation: a 1979 Wang character set for the <em>2236DE terminal</em> includes a delta symbol ( Δ ) at position 0x9A. At first glance this seemed unrelated to IBM's house symbol at 0x7F. But after viewing the ROM data as a bitmap, VileR discovered two interesting things. First, Wang's delta wasn't a clean equilateral triangle (angles at 60°, 60°, 60°); to avoid uneven displacements between scanlines, which could produce very obvious "jaggies" on low-res CRTs, the delta was instead rendered as a right triangle (angles 45°, 90°, 45°). However, because of this, the triangle's side-corners had to be chopped off, to fit it into its 7×7 pixels-per-character space. Secondly, VileR discovered that the bitmap's pixels were spaced-out, implying that the glyphs relied on some sort of dot-stretching effect in the display circuitry. After these realizations, rendering the bitmap with his <a href="https://int10h.org/blog/2021/01/simulating-crt-monitors-ffmpeg-pt-1-color/">CRT emulator</a> revealed that Wang's delta actually resembles IBM's blocky house symbol.</p>
<figure>
    <img alt="Comparison between Wang's character set as raw ROM data and CRT emulated" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/dwF5gRHI4L-740.png" width="740" height="792">
    <figcaption>Comparison between Wang's character set as raw ROM data and CRT emulated. Is this the origin of IBM PC's house? Compiled from images by VileR.</figcaption>
</figure>
<p>So, if Bill Gates was correct about IBM copying characters from Wang, it's entirely possible that the people at IBM, who were copying glyphs directly from a Wang terminal screen, misinterpreted the delta as a house, especially considering, as Bradley notes, that the whole process was rushed. This is not a definitive proof, but a compelling theory nonetheless!</p>
<h4 id="theory-7-is-it-delta">Theory #7: Is it delta?</h4>
<p>But, in an email conversation, Michael Walden speculates that it might not even be a coincidence that the DELete character has DELta as its printable character glyph.</p>
<p>Delta as a symbol ( Δ ) originates from the Greek alphabet. CP437 already includes some Greek characters in the 0xEO–0xEB range, notably 0xEB being the symbol for Greek <em>small</em> delta ( δ ). These characters were not included to support Greek language, but as math symbols. In mathematics and other sciences, the uppercase delta is often used to denote a "change of any changeable quantity", which might have been a reason to include it in the character set.</p>
<p>Delta doesn't only appear in Wang's character set, but in many character sets before it. For example, the Array-oriented Programming Language (APL), which originated at IBM in the 1960s, includes delta ( Δ ), and inverted delta ( ∇ ) in its syntax. As a curious but unrelated coincidence, the IBM name for the inverted delta is DEL—the same as the control character DEL (Delete) at 0x7F.<sup><a href="#fn10" id="fnref10">[10]</a></sup></p>
<p>The APL symbols appeared on some early IBM APL keyboards, like in the 1971 <a href="https://geekhack.org/index.php?topic=104046.0">IBM 3270</a>. VileR also notes that IBM's first desktop machines from the mid 1970s, the <a href="https://voidstar.blog/the-ibm-5100-5110-mame-emulators-how-to/">5100/5110/5120</a>, were intended for APL from the get go, but there's no evidence that they ever influenced the development of IBM PC in any way, even if they are in the same model numbering system (IBM PC is 5150). It's also worth noting that IBM's APL character sets, like the <a href="https://web.archive.org/web/20130121103608/http://www-03.ibm.com/systems/resources/systems_i_software_globalization_pdf_cp00909z.pdf">Code Page 909</a>, sometimes include both delta <em>and</em> the house symbol. As such, it doesn't seem like there's a strong connection between the house and APL's delta.</p>
<h4 id="theory-8-it-is-delta">Theory #8: It IS delta?!</h4>
<p>Hold on... let's examine our basic assumptions. How can we be <em>absolutely certain</em> that IBM even intended for the glyph <span>⌂</span> at 0x7F to represent a house? What if the whole premise is wrong?</p>
<p>When I browsed through the original 1981 <a href="https://www.minuszerodegrees.net/manuals/IBM_5150_Technical_Reference_6025005_AUG81.pdf"><em>Technical Reference</em></a> manual for IBM PC, I realized that there's no mention of a "house" anywhere. In fact, the character explicitly listed at position 0x7F isn't a house at all—it's a delta ( Δ )!</p>
<figure>
    <img alt="0x7F is displayed as delta" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/yQrMFrOoOU-800.png" width="800" height="67">
    <figcaption>1981 IBM PC Technical Reference</figcaption>
</figure>
<p>Was it intended to be delta all along?</p>
<p>But of course it's not so simple. The 1982 edition of <a href="https://archive.org/details/IBMBASICAV1.10Manual/page/n483/mode/2up"><em>IBM BASIC Manual</em></a> displays the code point 0x7F quite unambiguously as a <strong>house</strong>!</p>
<figure>
    <img alt="IBM BASIC Manual displays 0x7F as house" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/WCK0PI0uHp-218.png" width="218" height="66">
    <figcaption>1982 IBM BASIC Manual</figcaption>
</figure>
<p>What is going on? Was the 1981 Technical Reference was printed in error, and corrected later? It doesn't seem like it: the 1984 revised edition of the <a href="https://archive.org/details/IBMPCIBM5150TechnicalReference6322507APR84/page/n246/mode/1up">IBM PC <em>Technical Reference</em></a> still display 0x7F as <strong>delta</strong>. There's no mistake, even the <strong>text label</strong> of 0x7F is "delta", as listed in the printed System BIOS character generator routines.</p>
<figure>
    <img alt="0x7F is displayed as delta" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/Jg6U9BLOAT-673.png" width="673" height="92">
    <figcaption>1984 IBM PC Technical Reference</figcaption>
</figure>
<p>Still, the original 1981 <a href="https://int10h.org/oldschool-pc-fonts/fontlist/font?ibm_bios">IBM PC System BIOS fonts</a> clearly renders it as a <strong>house</strong>: <span>⌂</span>. It seems very unlikely that anybody would actually associate the shape of it with the delta character—let alone use the house character <em>as</em> delta in any scientific syntax.</p>
<p>Maybe it's just some careless disparity between printed material and the actual font rendering? It isn't so either: 0x7F isn't consistently rendered as a house in every CP437 font, as can be seen from the following chart, which display the 0x7F character from various <a href="https://github.com/viler-int10h/vga-text-mode-fonts/releases/tag/2020-11-25">CP437-compatible VGA fonts</a>:</p>

<p>While most of the fonts render 0x7F as a house, some of them are quite undeniably deltas (listed near the bottom of the chart).</p>
<p>To make matters more confusing (or maybe in an attempt to prevent further confusion?), in 1984, IBM's own authoritative registry of glyph names (<a href="https://public.dhe.ibm.com/software/globalization/gcoc/attachments/CP00437.txt">GCGID</a>) officially names 0x7F in CP437 as <strong>"small house"</strong>. In fact, originally <em>the whole character set had no name</em>, until this registration. Code Page 437 was not born as a real code page at all—it was merely a bunch of graphical glyphs, stored in the Read-Only Memory (ROM) of the System BIOS, available for the computer to use immediately on booting. Because the characters were implemented in the hardware, the font, and its derivatives, were often just called "OEM fonts", where OEM stands for "Original Equipment Manufacturer". All "official" IBM names, for the character set and its glyphs, were given retroactively in 1984.</p>
<p>But even officially naming the Code Page 437 and its glyphs wasn't enough to correct their rendering. In 1986, the <a href="https://int10h.org/oldschool-pc-fonts/fontlist/font?ibm_conv"><em>IBM PC Convertible</em></a> system font renders 0x7F as <strong>delta</strong>, and the 1986 <a href="https://bitsavers.org/pdf/ibm/pc/at/6183355_PC_AT_Technical_Reference_Mar86.pdf">IBM PC/AT <em>Technical Reference</em></a> still lists and labels 0x7F as delta. Even in 1989, the Olivetti <a href="https://www.minuszerodegrees.net/manuals/Olivetti/Olivetti%20-%20MS-DOS%203.30%20-%20Software%20Installation%20Guide.pdf"><em>MS-DOS Software Installation Guide</em></a> renders the 0x7F as delta.</p>
<h4 id="theory-9-it-must-be-a-delta-because-even-the-greek-delta-looks-like-a-house">Theory #9: It MUST be a delta because even the GREEK delta looks like a house!</h4>
<p>As I was taking another look at VileR's oldschool PC fonts page on the original <a href="https://int10h.org/oldschool-pc-fonts/fontlist/font?ibm_bios">IBM BIOS font</a>, something caught my eye. Because the IBM PC was sold in many non-English speaking countries, the original character set had language specific variants. The Greek language IBM PC of course added support for additional greek characters—including the actual Greek uppercase delta. And—this came to me as a complete surprise—its glyph looks <em>even more</em> like a house, than the actual house character!</p>
<figure>
    <img alt="The greek delta is displayed as a house!" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/3x0gTnaSLk-1184.png" width="1184" height="544">
    <figcaption>The Greek variant of IBM PC's font (Code Page 737) renders the greek delta as a house!</figcaption>
</figure>
<p>If even the actual Greek uppercase delta is, quite unmistakenly, rendered as a house, then the theory that DEL is just a badly formed uppercase Greek delta character with the bottom corners cut off (due to a lack of horizontal pixels) starts to seem more and more convincing.</p>
<h4 id="delta-theory-doubt">Delta theory doubt</h4>
<p>There is just one thing I cant't quite comprehend. Let's assume for a second that DEL was supposed to be delta. Did IBM seriously <em>not</em> try different ways of drawing a delta, before settling on the house glyph? With a little bit of effort, it is completely possible to draw a convincing delta, even in 8×8 pixel space. Here's a chart to compare. The first three are IBM's renditions of the "delta", the rest are my own attempts I threw together in 10 minutes. I think that any of the versions I drew could have been more clearly understood as deltas. So, if IBM <em>did</em> go through some versions of the delta, they would have likely landed on the same, or very similar shapes to mine—yet they <em>still</em> chose the house-looking glyph to represent it. Why would they do that?</p>
<p>Click on the patterns to change the view. You can also edit/draw on the canvas, see if you can come up with something better:</p>

<h3 id="what-do-we-know">What DO we know?</h3>
<p>It seems the only thing we know for certain is that even IBM was confused, or just didn't care, whether 0x7F should be a delta, or a house. The fact is, that while the character at code point 0x7F in the 1981 IBM PC's System BIOS font might look like a house, we can't definitely claim that it was <em>intended</em> to look like a house. The <em>only</em> thing we can say for sure, is that 0x7F has been labeled as "delta" in the IBM PC's System BIOS since 1981, and that the IBM's official registry named it "small house" in 1984.</p>
<p>What does this tell us? The consistent <em>inconsistencies</em> in IBM's technical documentations, fonts, and registries, sounds like a classic case of miscommunication between the different departments of IBM. Did the font's designers intend 0x7F to be a house, but the engineers interpreted it as a delta, mislabeling it in the System BIOS? Or did the designers intend it to be delta, but the botched rendering made it look like a house, and publications like the <em>IBM BASIC Manual</em> perpetuated the wrong interpretation until IBM decided to make it official in the registry? Or what? There is no clear answer.</p>
<div>
<h5 id="sidenote">Sidenote</h5>
<p>The house symbol ( ⌂ ) was added to Unicode in <a href="https://www.unicode.org/versions/Unicode1.1.0/appI.pdf">version 1.1.0</a> in 1993. It was given the Unicode value <a href="https://graphemica.com/%E2%8C%82">U+2302</a>.</p>
</div>
<p>Whether IBM meant 0x7F to be a delta, or a house, remains a mystery. But it doesn't really matter. <em>What</em> the house character looks like, is, after all, just a matter of interpretation. The legacy of CP437 is not defined by IBM's intentions, but by all the different ways designers, programmers, ASCII artists and other users adopted it. It is delta <em>and</em> house, but <em>also</em> rocket, players ammo, gun, spike, energizer, or whatever else we want it to be. As IBM engineer Charles E. Mackenzie observes in <em>Coded Character Sets, History and Development</em>:</p>
<blockquote>
<p>"There is an aspect of human nature which surfaces in data processing. Experience has shown that if graphics are provided on a computing system, they will be used in one way or another by customers, even if they have no intrinsic meaning."<sup><a href="#fn11" id="fnref11">[11]</a></sup></p>
</blockquote>
<p>This is probably best exemplified by how the house character is used in PC ASCII art. In the hands of ASCII artists, the character goes <em>beyond</em> meaning and returns to pure form, demonstrating that there is no shape that has an "intrinsic" meaning, until we give them meaning.</p>
<p>To see how <span>⌂</span> was used in PC ASCII art, I wrote a script that scanned the <a href="https://16colo.rs/">16colo.rs</a> archive for any artwork containing 0x7F. Here are some of my favourites:</p>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/SvDOE2Nk7y-640.png" width="640" height="352">
    <figcaption>1997_clit-63.zip_dy1-pen.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/dhNbpa5Z6m-640.png" width="640" height="368">
    <figcaption>1997_labia314.zip_dy1-bed.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/NCQKct_K5z-640.png" width="640" height="368">
    <figcaption>1999_bj-creep.zip_bjasc147.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/-91OA6w5tc-640.png" width="640" height="464">
    <figcaption>1999_mimic11.zip_ess#0002.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/0bwGdF8TaT-640.png" width="640" height="432">
    <figcaption>1999_mimic15.zip_dy-blue.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/9wYWhNRG4j-640.png" width="640" height="976">
    <figcaption>1999_mimic16.zip_bjasc159.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/8kZO9PXsO5-640.png" width="640" height="560">
    <figcaption>1999_mimic17.zip_bjasc168.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/XtHGRIXvcg-640.png" width="640" height="400">
    <figcaption>1999_rmrs-29.zip_tum-egun.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/3dyyxCviuh-640.png" width="640" height="464">
    <figcaption>1999_rmrs-29.zip_tum-jule.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/SFNAJP7TZM-640.png" width="640" height="384">
    <figcaption>2000_mimic25.zip_us-bj189.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/B4eDwlQUgz-640.png" width="640" height="336">
    <figcaption>2000_mimic27.zip_dr-mmc27.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/H2dvsbMk3d-640.png" width="640" height="560">
    <figcaption>2000_mimic30.zip_tb-epic.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/n_2YzSt_gv-640.png" width="640" height="416">
    <figcaption>2000_mimic30.zip_us-tw.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/RqS99D4ZR0-640.png" width="640" height="1184">
    <figcaption>2001_bommc01.zip_mmc10-12.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/9Bpo8RXOSm-640.png" width="640" height="384">
    <figcaption>2001_mimic33.zip_ko-cats.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/5gkIL2ajV--640.png" width="640" height="384">
    <figcaption>2001_mimic34.zip_h4-soap.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/BRK8idGZLx-640.png" width="640" height="384">
    <figcaption>2002_mimic44.zip_h4-tune.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/CTVHQJ086u-640.png" width="640" height="624">
    <figcaption>2003_buzina6.zip_crs-hmes.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/k4BtR32V6I-640.png" width="640" height="672">
    <figcaption>2003_galza-18.zip_shd-sx09.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/yDDh8oNUd6-640.png" width="640" height="384">
    <figcaption>2003_mimic57.zip_ko-taima.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/12Nv_Ymr4R-640.png" width="640" height="448">
    <figcaption>2003_mimic61.zip_us-m.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/H0Cj4pM1nR-640.png" width="640" height="496">
    <figcaption>2003_mimic66.zip_jf-fukk.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/FiXixDOiiT-640.png" width="640" height="368">
    <figcaption>2003_mimic66.zip_jf-inn2.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/F8dAk4q-3M-640.png" width="640" height="400">
    <figcaption>2004_mimic69.zip_us-nons.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/G2pfyFY8rk-640.png" width="640" height="672">
    <figcaption>2004_mimic73.zip_drj-mmc.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/Mi4fZ8WGUi-640.png" width="640" height="768">
    <figcaption>2004_mimic77.zip_je-eul.ans</figcaption>
</figure>
<hr>
<figure>
    <img alt="" loading="lazy" decoding="async" src="https://blog.glyphdrawing.club/assets/N3857PVjXi-640.png" width="640" height="960">
    <figcaption>2018_impure69.zip_arl-radio_final.ans</figcaption>
</figure><hr>
<section>
<ol>
<li id="fn1"><p>Reimer, Jeremy (2005): <a href="http://arstechnica.com/old/content/2005/12/total-share.ars/">Total Share: 30 Years of Computer Market Share Figures</a>, <em>Ars Technica</em>. 20.3.2025 <a href="#fnref1">↩︎</a></p>
</li>
<li id="fn2"><p>Edwards, Benj (2015): <a href="https://www.vintagecomputing.com/index.php/archives/790/the-ibm-smiley-character-turns-30#more-790">Origins of the ASCII Smiley Character: An Email Exchange With Dr. David Bradley (2011)</a>, <em><a href="http://vintagecomputing.com/">vintagecomputing.com</a></em>. 19.3.2025 <a href="#fnref2">↩︎</a></p>
</li>
<li id="fn3"><p>Reunanen, Markku; Heikkinen, Tero; Carlsson, Anders (2019): <a href="https://acris.aalto.fi/ws/portalfiles/portal/39040680/PETSCII_A_Character_Set_and_a_Creative_Platform.pdf"><em>PETSCII – A Character Set and a Creative Platform</em></a> <a href="#fnref3">↩︎</a></p>
</li>
<li id="fn4"><p>R.W. Bemer (1978): Inside ASCII, part 3 of 3 parts. Included in the "Source documents on the history of character codes, 1977-1981", compiled by Eric Fischer, <a href="https://archive.org/details/enf-ascii-1977-1981/page/n40/mode/1up">on Internet Archive</a> <a href="#fnref4">↩︎</a></p>
</li>
<li id="fn5"><p>Edwards, Benj (2015): <a href="https://www.vintagecomputing.com/index.php/archives/790/the-ibm-smiley-character-turns-30#more-790">Origins of the ASCII Smiley Character: An Email Exchange With Dr. David Bradley (2011)</a>, <em><a href="http://vintagecomputing.com/">vintagecomputing.com</a></em>. 19.3.2025 <a href="#fnref5">↩︎</a></p>
</li>
<li id="fn6"><p>Necasek, Michal (2021): <a href="https://www.os2museum.com/wp/weird-tales/">Weird Tales</a>, <em>OS/2 Museum</em>. 19.3.2025 <a href="#fnref6">↩︎</a></p>
</li>
<li id="fn7"><p>Dreyfuss, Henry (1972): <a href="https://archive.org/details/symbolsourcebook0000henr/page/n9/mode/2up"><em>Symbol sourcebook : an authoritative guide to international graphic symbols</em></a> <a href="#fnref7">↩︎</a></p>
</li>
<li id="fn8"><p>Radiolab (2012): <a href="https://radiolab.org/podcast/257194-man-became-bliss">Mr.Bliss</a> <a href="#fnref8">↩︎</a></p>
</li>
<li id="fn9"><p>Blissymbolics Communication Institute (1980): <a href="https://archive.org/details/OTUED_8-2-3-3/page/21/mode/1up"><em>Teaching and Using Blissymbolics</em></a> <a href="#fnref9">↩︎</a></p>
</li>
<li id="fn10"><p>Wikipedia article <a href="https://en.wikipedia.org/wiki/Digital_encoding_of_APL_symbols#Character_repertoire">Digital encoding of APL symbols</a> 3.4.2025 <a href="#fnref10">↩︎</a></p>
</li>
<li id="fn11"><p>Mackenzie, Charles E. (1980): <a href="https://archive.org/details/mackenzie-coded-char-sets/page/99/mode/1up"><em>Coded Character Sets, History and Development</em></a> <a href="#fnref11">↩︎</a></p>
</li>
</ol>
</section>

    </div></div>]]></description>
        </item>
    </channel>
</rss>