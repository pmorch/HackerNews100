<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 27 Jul 2024 18:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Oscar Zariski  was one of the founders of modern algebraic geometry (118 pts)]]></title>
            <link>https://boogiemath.org/meta/meta-9.html</link>
            <guid>41086060</guid>
            <pubDate>Sat, 27 Jul 2024 12:12:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://boogiemath.org/meta/meta-9.html">https://boogiemath.org/meta/meta-9.html</a>, See on <a href="https://news.ycombinator.com/item?id=41086060">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <center><img src="https://boogiemath.org/assets/img/zariski.283fce0c.png" width="80%"></center> <p>I am always excited when I stumble upon a biography of a mathematician I wasn’t previously aware of. It’s strange (or perhaps not, given we’re talking about mathematics) how many brilliant minds in the field lack the biographical treatment they deserve. Consider just a few luminaries from the first half of the 20th century:
<a href="https://en.wikipedia.org/wiki/Andr%C3%A9_Weil" target="_blank" rel="noopener noreferrer">André Weil<span> <span>(opens new window)</span></span></a>,
<a href="https://en.wikipedia.org/wiki/Hermann_Weyl" target="_blank" rel="noopener noreferrer">Hermann Weyl<span> <span>(opens new window)</span></span></a>,
<a href="https://en.wikipedia.org/wiki/Carl_Ludwig_Siegel" target="_blank" rel="noopener noreferrer">Carl Ludwig Siegel<span> <span>(opens new window)</span></span></a>,
<a href="https://en.wikipedia.org/wiki/Emil_Artin" target="_blank" rel="noopener noreferrer">Emil Artin<span> <span>(opens new window)</span></span></a>,
<a href="https://en.wikipedia.org/wiki/Edmund_Landau" target="_blank" rel="noopener noreferrer">Edmund Landau<span> <span>(opens new window)</span></span></a>,
<a href="https://en.wikipedia.org/wiki/Helmut_Hasse" target="_blank" rel="noopener noreferrer">Helmut Hasse<span> <span>(opens new window)</span></span></a>.</p> <p>For physicists, it’s a bit different. I think they are much better covered.
The reason might be that their work is more directly connected to everyday life. Just think of nuclear energy
or the theory of relativity, which is crucial for
<a href="https://en.wikipedia.org/wiki/Global_Positioning_System" target="_blank" rel="noopener noreferrer">GPS<span> <span>(opens new window)</span></span></a> to work properly.</p> <p>So, recently I came across the
<a href="https://amzn.to/3HX6kUq" target="_blank" rel="noopener noreferrer">biography of Oscar Zariski<span> <span>(opens new window)</span></span></a>.
Zariski (1899-1986) was one of the founders of modern algebraic geometry.</p> <p>My wish is that one day I will be able to read Zariski’s book Algebraic Surfaces from 1935, as well as the 1971 version, which includes notes from his students—remarkable mathematicians like
<a href="https://en.wikipedia.org/wiki/Robin_Hartshorne" target="_blank" rel="noopener noreferrer">Robin Hartshorne<span> <span>(opens new window)</span></span></a>
and <a href="https://en.wikipedia.org/wiki/David_Mumford" target="_blank" rel="noopener noreferrer">David Mumford<span> <span>(opens new window)</span></span></a>.
Zariski mentioned that with this book, he began doing real mathematics, real algebraic geometry. In it, he reconstructed the algebraic geometry developed by the Italian school using the modern algebra introduced by
<a href="https://en.wikipedia.org/wiki/Emmy_Noether" target="_blank" rel="noopener noreferrer">Emmy Noether<span> <span>(opens new window)</span></span></a> and
<a href="https://en.wikipedia.org/wiki/Wolfgang_Krull" target="_blank" rel="noopener noreferrer">Wolfgang Krull<span> <span>(opens new window)</span></span></a>.</p> <p>But what about his life?
Let’s consider the following paragraph from the book:
“I spent hours and hours doing math problems without a teacher forcing me. Whole books of algebra
problems – I did them one after another. I was only seven or eight, but I always wanted mathematics.”</p> <p>That might be something you’d find in many biographies of world-renowned mathematicians, right? However, Carol Parikh notes: “Although Zariski was by all accounts an exceptionally quick and eager math student, the full extent of his gifts became apparent relatively late in life. He was almost twenty-five before he published his first paper and almost fifty when he did his great work on holomorphic functions...”</p> <p>In fact, Zariski remained active and productive even into his eighties.</p> <p>But how did Zariski’s story begin? It seems his older brother Moses played a significant role in shaping young Oscar. He taught him elementary algebra, and even when Oscar began surpassing him, he never resented it. While Oscar was in gymnasium, Moses would buy math and philosophy books for him during his business trips to Moscow and Petrograd. Oscar was especially interested in Hegel and Marx.</p> <p>I think it’s difficult for us today to fully grasp the hope that the Russian Revolution brought to the working people. There’s the following paragraph in the biography that illustrates this well: “He crossed the border into Italy in the late winter of 1921, having decided to enroll at the University of Pisa. On the platform at Udine, where he had stopped to change trains, he was recognized as Russian. Before he could even step into the waiting room, he found himself surrounded by a crowd of railway workers eager to hear about the revolution.”</p> <p>Of course, Italy was a turbulent country at that time, and Parikh continues: “Had there been a Fascist among the workers, the warmth of his welcome might have been quite otherwise...”</p> <p>But back to mathematics.
I was quite surprised when I read the following paragraph: “In the fall of 1921 the University of Rome was the most important center
of algebraic geometry in the world. What is now known as 'the Italian School' had been started by
<a href="https://en.wikipedia.org/wiki/Luigi_Cremona" target="_blank" rel="noopener noreferrer">Luigi Cremona<span> <span>(opens new window)</span></span></a>...
It was only after 1900, however, as a result of the combined efforts of three great
Italian mathematicians –
<a href="https://en.wikipedia.org/wiki/Guido_Castelnuovo" target="_blank" rel="noopener noreferrer">Guido Castelnuovo<span> <span>(opens new window)</span></span></a>,
<a href="https://en.wikipedia.org/wiki/Federigo_Enriques" target="_blank" rel="noopener noreferrer">Federigo Enriques<span> <span>(opens new window)</span></span></a>,
and <a href="https://en.wikipedia.org/wiki/Francesco_Severi" target="_blank" rel="noopener noreferrer">Francesco Severi<span> <span>(opens new window)</span></span></a>
– that the Italians
had carried algebraic geometry off in a startling new direction.”</p> <p>In many history books on mathematics, you read so much about Göttingen mathematicians that you might easily get the impression that most of the important work was done there. Of course, that was not the case. I was surprised to learn that algebraic geometry actually began in Rome.</p> <p>However, Zariski later regretted not engaging with Göttingen mathematics earlier: “It was a pity that my Italian teachers never told me there was such a tremendous development of algebra connected with algebraic geometry.”</p> <p>The leader of the algebra revolution in Göttingen was, of course, Emmy Noether. Emmy Noether is one of my favorite mathematicians, and I’m always happy when I discover something new about her. Her lectures were legendary, but there are two anecdotes from Zariski’s biography that I hadn’t heard before: “Once, for example, when she was lecturing, her slip came down. She bent down, pulled off the slip, threw it into the corridor, and kept on lecturing.” And another: “Noether would be so eager to get her thoughts down that she would write across a wet blackboard, leaving her students to wait patiently for it to dry so they could read it.”</p> <p>There was at least some interaction with Göttingen, though. It is mentioned that Edmund Landau visited Rome at some point, and when he heard that the young Zariski liked to play chess, he invited him to a game. “But how can we play with all these people around?” asked Zariski, as they were in the middle of a party. “Easily,” Landau replied. “Blank. You know, without a board.”</p> <p>Zariski and other mathematicians and physicists regularly gathered at Caffè Greco to gossip and play chess. It’s interesting how important cafés were at that time. A recurring theme in the biographies of European mathematicians from the first half of the 20th century is their role in cafés. Just think of the
<a href="https://en.wikipedia.org/wiki/Vienna_Circle" target="_blank" rel="noopener noreferrer">Vienna circle<span> <span>(opens new window)</span></span></a>
or the
<a href="https://en.wikipedia.org/wiki/Scottish_Caf%C3%A9" target="_blank" rel="noopener noreferrer">Scottish Café<span> <span>(opens new window)</span></span></a>.</p> <p>What also surprised me in the biography was the striking difference between Jews in Italy and in Poland. Last year, I read Leopold Infeld’s autobiography, where he describes the Jewish ghettos in Poland as being almost completely isolated from the general population. In contrast, Zariski’s wife, Yole, who was an Italian Jew, was raised as an Italian and was largely unfamiliar with Jewish traditions. She was utterly surprised when she first saw the Jewish quarter in Warsaw, remarking: “The Jews in side curls and kaftans made me feel that I was living in two different nations.”</p> <p>But the story in the book that I liked the most is this one: Zariski was, of course, very much obsessed with mathematics. On the day he and his fiancée Yole were getting married, with Yole already dressed in white and veiled and the rabbi standing by, the bridegroom was nowhere to be found. It turned out he was working on a mathematical problem. Luckily, Yole was neither angry nor surprised; she was amused. Ha! I need to tell this to my wife.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sqlitefs: SQLite as a Filesystem (126 pts)]]></title>
            <link>https://github.com/narumatt/sqlitefs</link>
            <guid>41085856</guid>
            <pubDate>Sat, 27 Jul 2024 11:29:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/narumatt/sqlitefs">https://github.com/narumatt/sqlitefs</a>, See on <a href="https://news.ycombinator.com/item?id=41085856">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">sqlite-fs</h2><a id="user-content-sqlite-fs" aria-label="Permalink: sqlite-fs" href="#sqlite-fs"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">About</h2><a id="user-content-about" aria-label="Permalink: About" href="#about"></a></p>
<p dir="auto">sqlite-fs allows Linux and MacOS to mount a sqlite database file as a normal filesystem.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>Latest Rust Programming Language (≥ 1.38)</li>
<li>libfuse(Linux) or osxfuse(MacOS) is requied by <a href="https://github.com/zargony/fuse-rs">fuse-rs</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Mount a filesystem</h3><a id="user-content-mount-a-filesystem" aria-label="Permalink: Mount a filesystem" href="#mount-a-filesystem"></a></p>
<div data-snippet-clipboard-copy-content="$ sqlite-fs <mount_point> [<db_path>]"><pre><code>$ sqlite-fs &lt;mount_point&gt; [&lt;db_path&gt;]
</code></pre></div>
<p dir="auto">If a database file doesn't exist, sqlite-fs create db file and tables.</p>
<p dir="auto">If a database file name isn't specified, sqlite-fs use in-memory-db instead of a file.
All data will be deleted when the filesystem is closed.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Unmount a filesystem</h3><a id="user-content-unmount-a-filesystem" aria-label="Permalink: Unmount a filesystem" href="#unmount-a-filesystem"></a></p>
<ul dir="auto">
<li>Linux</li>
</ul>
<div data-snippet-clipboard-copy-content="$ fusermount -u <mount_point>"><pre><code>$ fusermount -u &lt;mount_point&gt;
</code></pre></div>
<ul dir="auto">
<li>Mac</li>
</ul>

<p dir="auto"><h2 tabindex="-1" dir="auto">example</h2><a id="user-content-example" aria-label="Permalink: example" href="#example"></a></p>
<div data-snippet-clipboard-copy-content="$ sqlite-fs ~/mount ~/filesystem.sqlite &amp;
$ echo &quot;Hello world\!&quot; > ~/mount/hello.txt
$ cat ~/mount/hello.txt
Hello world!"><pre><code>$ sqlite-fs ~/mount ~/filesystem.sqlite &amp;
$ echo "Hello world\!" &gt; ~/mount/hello.txt
$ cat ~/mount/hello.txt
Hello world!
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">functions</h2><a id="user-content-functions" aria-label="Permalink: functions" href="#functions"></a></p>
<ul>
<li> Create/Read/Delete directories</li>
<li> Create/Read/Write/Delete files</li>
<li> Change attributions</li>
<li> Copy/Move files</li>
<li> Create Hard Link and Symbolic Link</li>
<li> Read/Write extended attributes</li>
<li>[] File lock operations</li>
<li>[] Strict error handling</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SQLite: 35% Faster Than the Filesystem (413 pts)]]></title>
            <link>https://sqlite.org/fasterthanfs.html</link>
            <guid>41085376</guid>
            <pubDate>Sat, 27 Jul 2024 09:10:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sqlite.org/fasterthanfs.html">https://sqlite.org/fasterthanfs.html</a>, See on <a href="https://news.ycombinator.com/item?id=41085376">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div>
<p>
35% Faster Than The Filesystem
</p>


</div>





<h2 id="summary"><span>1. </span>Summary</h2>

<p>SQLite reads and writes small blobs (for example, thumbnail images)
<a href="#approx">35% faster¹</a> than the same blobs
can be read from or written to individual files on disk using
fread() or fwrite().

</p><p>Furthermore, a single SQLite database holding
10-kilobyte blobs uses about 20% less disk space than
storing the blobs in individual files.

</p><p>The performance difference arises (we believe) because when
working from an SQLite database, the open() and close() system calls
are invoked only once, whereas
open() and close() are invoked once for each blob
when using blobs stored in individual files.  It appears that the
overhead of calling open() and close() is greater than the overhead
of using the database.  The size reduction arises from the fact that
individual files are padded out to the next multiple of the filesystem
block size, whereas the blobs are packed more tightly into an SQLite
database.

</p><p>
The measurements in this article were made during the week of 2017-06-05
using a version of SQLite in between 3.19.2 and 3.20.0.  You may expect
future versions of SQLite to perform even better.

</p><h2 id="caveats"><span>1.1. </span>Caveats</h2>

<p>
¹The 35% figure above is approximate.  Actual timings vary
depending on hardware, operating system, and the
details of the experiment, and due to random performance fluctuations
on real-world hardware.  See the text below for more detail.
Try the experiments yourself.  Report significant deviations on
the <a href="https://sqlite.org/support.html#fx">SQLite forum</a>.
</p>

<p>
The 35% figure is based on running tests on every machine
that the author has easily at hand.
Some reviewers of this article report that SQLite has higher 
latency than direct I/O on their systems.  We do not yet understand
the difference.  We also see indications that SQLite does not
perform as well as direct I/O when experiments are run using
a cold filesystem cache.

</p><p>
So let your take-away be this: read/write latency for
SQLite is competitive with read/write latency of individual files on
disk.  Often SQLite is faster.  Sometimes SQLite is almost
as fast.  Either way, this article disproves the common
assumption that a relational database must be slower than direct
filesystem I/O.

</p>

<p>
A <a href="https://golangexample.com/an-unscientific-benchmark-of-sqlite-vs-the-file-system-btrfs/">2022 study</a>
(<a href="https://github.com/chrisdavies/dbench">alternative link on GitHub</a>) found that
SQLite is <i>roughly</i> twice as fast at real-world workloads compared to Btrfs and Ext4 on Linux.

</p><p>
<a href="https://www.microsoft.com/en-us/research/people/gray/">Jim Gray</a>
and others studied the read performance of BLOBs
versus file I/O for Microsoft SQL Server and found that reading BLOBs 
out of the 
database was faster for BLOB sizes less than between 250KiB and 1MiB.
(<a href="https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/">Paper</a>).
In that study, the database still stores the filename of the content even
if the content is held in a separate file.  So the database is consulted
for every BLOB, even if it is only to extract the filename.  In this
article, the key for the BLOB is the filename, so no preliminary database
access is required.  Because the database is never used at all when
reading content from individual files in this article, the threshold
at which direct file I/O becomes faster is smaller than it is in Gray's
paper.

</p><p>
The <a href="https://sqlite.org/intern-v-extern-blob.html">Internal Versus External BLOBs</a> article on this website is an
earlier investigation (circa 2011) that uses the same approach as the
Jim Gray paper — storing the blob filenames as entries in the
database — but for SQLite instead of SQL Server.



</p><h2 id="how_these_measurements_are_made"><span>2. </span>How These Measurements Are Made</h2>

<p>I/O performance is measured using the
<a href="https://www.sqlite.org/src/file/test/kvtest.c">kvtest.c</a> program
from the SQLite source tree.
To compile this test program, first gather the kvtest.c source file
into a directory with the <a href="https://sqlite.org/amalgamation.html">SQLite amalgamation</a> source
files "sqlite3.c" and "sqlite3.h".  Then on unix, run a command like
the following:

</p><div><pre>gcc -Os -I. -DSQLITE_DIRECT_OVERFLOW_READ \
  kvtest.c sqlite3.c -o kvtest -ldl -lpthread
</pre></div>

<p>Or on Windows with MSVC:

</p><div><pre>cl -I. -DSQLITE_DIRECT_OVERFLOW_READ kvtest.c sqlite3.c
</pre></div>

<p>Instructions for compiling for Android
are <a href="#compile-android">shown below</a>.

</p><p>
Use the resulting "kvtest" program to
generate a test database with 100,000 random uncompressible
blobs, each with a random
size between 8,000 and 12,000 bytes
using a command like this:

</p><div><pre>./kvtest init test1.db --count 100k --size 10k --variance 2k
</pre></div>

<p>
If desired, you can verify the new database by running this command:

</p>

<p>
Next, make copies of all the blobs into individual files in a directory
using a command like this:

</p><div><pre>./kvtest export test1.db test1.dir
</pre></div>

<p>
At this point, you can measure the amount of disk space used by
the test1.db database and the space used by the test1.dir directory
and all of its content.  On a standard Ubuntu Linux desktop, the
database file will be 1,024,512,000 bytes in size and the test1.dir
directory will use 1,228,800,000 bytes of space (according to "du -k"),
about 20% more than the database.

</p><p>
The "test1.dir" directory created above puts all the blobs into a single
folder.  It was conjectured that some operating systems would perform 
poorly when a single directory contains 100,000 objects.  To test this,
the kvtest program can also store the blobs in a hierarchy of folders with no
more than 100 files and/or subdirectories per folder.  The alternative
on-disk representation of the blobs can be created using the --tree
command-line option to the "export" command, like this:

</p><div><pre>./kvtest export test1.db test1.tree --tree
</pre></div>

<p>
The test1.dir directory will contain 100,000 files
with names like "000000", "000001", "000002" and so forth but the
test1.tree directory will contain the same files in subdirectories like
"00/00/00", "00/00/01", and so on.  The test1.dir and test1.test
directories take up approximately the same amount of space, though
test1.test is very slightly larger due to the extra directory entries.

</p><p>
All of the experiments that follow operate the same with either 
"test1.dir" or "test1.tree".  Very little performance difference is
measured in either case, regardless of operating system.

</p><p>
Measure the performance for reading blobs from the database and from
individual files using these commands:

</p><div><pre>./kvtest run test1.db --count 100k --blob-api
./kvtest run test1.dir --count 100k --blob-api
./kvtest run test1.tree --count 100k --blob-api
</pre></div>

<p>
Depending on your hardware and operating system, you should see that reads 
from the test1.db database file are about 35% faster than reads from 
individual files in the test1.dir or test1.tree folders.  Results can vary
significantly from one run to the next due to caching, so it is advisable
to run tests multiple times and take an average or a worst case or a best
case, depending on your requirements.

</p><p>The --blob-api option on the database read test causes kvtest to use
the <a href="https://sqlite.org/c3ref/blob_read.html">sqlite3_blob_read()</a> feature of SQLite to load the content of the
blobs, rather than running pure SQL statements.  This helps SQLite to run
a little faster on read tests.  You can omit that option to compare the
performance of SQLite running SQL statements.
In that case, the SQLite still out-performs direct reads, though
by not as much as when using <a href="https://sqlite.org/c3ref/blob_read.html">sqlite3_blob_read()</a>.
The --blob-api option is ignored for tests that read from individual disk
files.

</p><p>
Measure write performance by adding the --update option.  This causes
the blobs are overwritten in place with another random blob of
exactly the same size.

</p><div><pre>./kvtest run test1.db --count 100k --update
./kvtest run test1.dir --count 100k --update
./kvtest run test1.tree --count 100k --update
</pre></div>

<p>
The writing test above is not completely fair, since SQLite is doing
<a href="https://sqlite.org/transactional.html">power-safe transactions</a> whereas the direct-to-disk writing is not.
To put the tests on a more equal footing, add either the --nosync
option to the SQLite writes to disable calling fsync() or
FlushFileBuffers() to force content to disk, or using the --fsync option
for the direct-to-disk tests to force them to invoke fsync() or
FlushFileBuffers() when updating disk files.

</p><p>
By default, kvtest runs the database I/O measurements all within
a single transaction.  Use the --multitrans option to run each blob
read or write in a separate transaction.  The --multitrans option makes
SQLite much slower, and uncompetitive with direct disk I/O.  This
option proves, yet again, that to get the most performance out of
SQLite, you should group as much database interaction as possible within
a single transaction.

</p><p>
There are many other testing options, which can be seen by running
the command:

</p>

<h2 id="read_performance_measurements"><span>2.1. </span>Read Performance Measurements</h2>

<p>The chart below shows data collected using 
<a href="https://www.sqlite.org/src/file/test/kvtest.c">kvtest.c</a> on five different
systems:

</p><ul>
<li><b>Win7</b>: A circa-2009 Dell Inspiron laptop, Pentium dual-core
    at 2.30GHz, 4GiB RAM, Windows7.
</li><li><b>Win10</b>: A 2016 Lenovo YOGA 910, Intel i7-7500 at 2.70GHz,
    16GiB RAM, Windows10.
</li><li><b>Mac</b>: A 2015 MacBook Pro, 3.1GHz intel Core i7, 16GiB RAM,
    MacOS 10.12.5
</li><li><b>Ubuntu</b>: Desktop built from Intel i7-4770K at 3.50GHz, 32GiB RAM,
    Ubuntu 16.04.2 LTS
</li><li><b>Android</b>: Galaxy S3, ARMv7, 2GiB RAM
</li></ul>

<p>All machines use SSD except Win7 which has a
hard-drive. The test database is 100K blobs with sizes uniformly
distributed between 8K and 12K, for a total of about 1 gigabyte
of content.  The database page size
is 4KiB.  The -DSQLITE_DIRECT_OVERFLOW_READ compile-time option was
used for all of these tests.
Tests were run multiple times.
The first run was used to warm up the cache and its timings were discarded.

</p><p>
The chart below shows average time to read a blob directly from the
filesystem versus the time needed to read the same blob from the SQLite 
database.
The actual timings vary considerably from one system to another 
(the Ubuntu desktop is much
faster than the Galaxy S3 phone, for example).  
This chart shows the ratio of the
times needed to read blobs from a file divided by the time needed to
from the database.  The left-most column in the chart is the normalized
time to read from the database, for reference.

</p><p>
In this chart, an SQL statement ("SELECT v FROM kv WHERE k=?1") 
is prepared once.  Then for each blob, the blob key value is bound 
to the ?1 parameter and the statement is evaluated to extract the
blob content.

</p><p>
The chart shows that on Windows10, content can be read from the SQLite
database about 5 times faster than it can be read directly from disk.
On Android, SQLite is only about 35% faster than reading from disk.

</p><center>
<p><img src="https://sqlite.org/images/faster-read-sql.jpg">
</p>
<br>
Chart 1:  SQLite read latency relative to direct filesystem reads.<br>
100K blobs, avg 10KB each, random order using SQL
</center>

<p>
The performance can be improved slightly by bypassing the SQL layer
and reading the blob content directly using the
<a href="https://sqlite.org/c3ref/blob_read.html">sqlite3_blob_read()</a> interface, as shown in the next chart:

</p><center>
<p><img src="https://sqlite.org/images/faster-read-blobapi.jpg">
</p>
<br>
Chart 2:  SQLite read latency relative to direct filesystem reads.<br>
100K blobs, avg size 10KB, random order<br>
using sqlite3_blob_read().
</center>

<p>
Further performance improves can be made by using the
<a href="https://sqlite.org/mmap.html">memory-mapped I/O</a> feature of SQLite.  In the next chart, the
entire 1GB database file is memory mapped and blobs are read
(in random order) using the <a href="https://sqlite.org/c3ref/blob_read.html">sqlite3_blob_read()</a> interface.
With these optimizations, SQLite is twice as fast as Android
or MacOS-X and over 10 times faster than Windows.

</p><center>
<p><img src="https://sqlite.org/images/faster-read-mmap.jpg">
</p>
<br>
Chart 3:  SQLite read latency relative to direct filesystem reads.<br>
100K blobs, avg size 10KB, random order<br>
using sqlite3_blob_read() from a memory-mapped database.
</center>

<p>
The third chart shows that reading blob content out of SQLite can be
twice as fast as reading from individual files on disk for Mac and
Android, and an amazing ten times faster for Windows.

</p><h2 id="write_performance_measurements"><span>2.2. </span>Write Performance Measurements</h2>

<p>
Writes are slower.
On all systems, using both direct I/O and SQLite, write performance is
between 5 and 15 times slower than reads.

</p><p>
Write performance measurements were made by replacing (overwriting)
an entire blob with a different blob.  All of the blobs in these
experiment are random and incompressible.  Because writes are so much
slower than reads, only 10,000 of the 100,000 blobs in the database
are replaced.  The blobs to be replaced are selected at random and
are in no particular order.

</p><p>
The direct-to-disk writes are accomplished using fopen()/fwrite()/fclose().
By default, and in all the results shown below, the OS filesystem buffers are
never flushed to persistent storage using fsync() or
FlushFileBuffers().  In other words, there is no attempt to make the
direct-to-disk writes transactional or power-safe.
We found that invoking fsync() or FlushFileBuffers() on each file
written causes direct-to-disk storage
to be about 10 times or more slower than writes to SQLite.

</p><p>
The next chart compares SQLite database updates in <a href="https://sqlite.org/wal.html">WAL mode</a>
against raw direct-to-disk overwrites of separate files on disk.
The <a href="https://sqlite.org/pragma.html#pragma_synchronous">PRAGMA synchronous</a> setting is NORMAL.
All database writes are in a single transaction.
The timer for the database writes is stopped after the transaction
commits, but before a <a href="https://sqlite.org/wal.html#ckpt">checkpoint</a> is run.
Note that the SQLite writes, unlike the direct-to-disk writes,
are <a href="https://sqlite.org/transactional.html">transactional</a> and <a href="https://sqlite.org/transactional.html">power-safe</a>, though because the synchronous
setting is NORMAL instead of FULL, the transactions are not durable.

</p><center>
<p><img src="https://sqlite.org/images/faster-write-safe.jpg">
</p>
<br>
Chart 4:  SQLite write latency relative to direct filesystem writes.<br>
10K blobs, avg size 10KB, random order,<br>
WAL mode with synchronous NORMAL,<br>
exclusive of checkpoint time
</center>

<p>
The android performance numbers for the write experiments are omitted
because the performance tests on the Galaxy S3 are so random.  Two
consecutive runs of the exact same experiment would give wildly different
times.  And, to be fair, the performance of SQLite on android is slightly
slower than writing directly to disk.

</p><p>
The next chart shows the performance of SQLite versus direct-to-disk
when transactions are disabled (<a href="https://sqlite.org/pragma.html#pragma_journal_mode">PRAGMA journal_mode=OFF</a>)
and <a href="https://sqlite.org/pragma.html#pragma_synchronous">PRAGMA synchronous</a> is set to OFF.  These settings put SQLite on an
equal footing with direct-to-disk writes, which is to say they make the
data prone to corruption due to system crashes and power failures.

</p><center>
<p><img src="https://sqlite.org/images/faster-write-unsafe.jpg">
</p>
<br>
Chart 5:  SQLite write latency relative to direct filesystem writes.<br>
10K blobs, avg size 10KB, random order,<br>
journaling disabled, synchronous OFF.
</center>

<p>
In all of the write tests, it is important to disable anti-virus software
prior to running the direct-to-disk performance tests.  We found that
anti-virus software slows down direct-to-disk by an order of magnitude
whereas it impacts SQLite writes very little.  This is probably due to the
fact that direct-to-disk changes thousands of separate files which all need
to be checked by anti-virus, whereas SQLite writes only changes the single
database file.

</p><h2 id="variations"><span>2.3. </span>Variations</h2>

<p>The <a href="https://sqlite.org/compile.html#direct_overflow_read">-DSQLITE_DIRECT_OVERFLOW_READ</a> compile-time option causes SQLite
to bypass its page cache when reading content from overflow pages.  This
helps database reads of 10K blobs run a little faster, but not all that much
faster.  SQLite still holds a speed advantage over direct filesystem reads
without the SQLITE_DIRECT_OVERFLOW_READ compile-time option.

</p><p>Other compile-time options such as using -O3 instead of -Os or
using <a href="https://sqlite.org/compile.html#threadsafe">-DSQLITE_THREADSAFE=0</a> and/or some of the other
<a href="https://sqlite.org/compile.html#rcmd">recommended compile-time options</a> might help SQLite to run even faster
relative to direct filesystem reads.

</p><p>The size of the blobs in the test data affects performance.
The filesystem will generally be faster for larger blobs, since
the overhead of open() and close() is amortized over more bytes of I/O,
whereas the database will be more efficient in both speed and space
as the average blob size decreases.


</p><h2 id="general_findings"><span>3. </span>General Findings</h2>

<ol type="A">
<li>
<p>SQLite is competitive with, and usually faster than, blobs stored in
separate files on disk, for both reading and writing.

</p></li><li>
<p>SQLite is much faster than direct writes to disk on Windows
when anti-virus protection is turned on.  Since anti-virus software
is and should be on by default in Windows, that means that SQLite
is generally much faster than direct disk writes on Windows.

</p></li><li>
<p>Reading is about an order of magnitude faster than writing, for all
systems and for both SQLite and direct-to-disk I/O.

</p></li><li>
<p>I/O performance varies widely depending on operating system and hardware.
Make your own measurements before drawing conclusions.

</p></li><li>
<p>Some other SQL database engines advise developers to store blobs in separate
files and then store the filename in the database.  In that case, where
the database must first be consulted to find the filename before opening
and reading the file, simply storing the entire blob in the database
gives much faster read and write performance with SQLite.
See the <a href="https://sqlite.org/intern-v-extern-blob.html">Internal Versus External BLOBs</a> article for more information.
</p></li></ol>


<h2 id="additional_notes"><span>4. </span>Additional Notes</h2>

<h2 id="compiling_and_testing_on_android"><span>4.1. </span>Compiling And Testing on Android</h2>

<p>
The kvtest program is compiled and run on Android as follows.
First install the Android SDK and NDK.  Then prepare a script
named "android-gcc" that looks approximately like this:

</p><div><pre>#!/bin/sh
#
NDK=/home/drh/Android/Sdk/ndk-bundle
SYSROOT=$NDK/platforms/android-16/arch-arm
ABIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin
GCC=$ABIN/arm-linux-androideabi-gcc
$GCC --sysroot=$SYSROOT -fPIC -pie $*
</pre></div>

<p>Make that script executable and put it on your $PATH.  Then
compile the kvtest program as follows:

</p><div><pre>android-gcc -Os -I. kvtest.c sqlite3.c -o kvtest-android
</pre></div>

<p>Next, move the resulting kvtest-android executable to the Android
device:

</p><div><pre>adb push kvtest-android /data/local/tmp
</pre></div>

<p>Finally use "adb shell" to get a shell prompt on the Android device,
cd into the /data/local/tmp directory, and begin running the tests
as with any other unix host.
</p><p><small><i>This page last modified on  <a href="https://sqlite.org/docsrc/honeypot" id="mtimelink" data-href="https://sqlite.org/docsrc/finfo/pages/fasterthanfs.in?m=0f7552234f">2023-12-05 14:43:20</a> UTC </i></small></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In the Beginning Was the Command Line (235 pts)]]></title>
            <link>https://web.stanford.edu/class/cs81n/command.txt</link>
            <guid>41084795</guid>
            <pubDate>Sat, 27 Jul 2024 06:25:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://web.stanford.edu/class/cs81n/command.txt">https://web.stanford.edu/class/cs81n/command.txt</a>, See on <a href="https://news.ycombinator.com/item?id=41084795">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Bril: An Intermediate Language for Teaching Compilers (109 pts)]]></title>
            <link>https://www.cs.cornell.edu/~asampson/blog/bril.html</link>
            <guid>41084318</guid>
            <pubDate>Sat, 27 Jul 2024 03:50:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.cornell.edu/~asampson/blog/bril.html">https://www.cs.cornell.edu/~asampson/blog/bril.html</a>, See on <a href="https://news.ycombinator.com/item?id=41084318">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
<p>When I started a new <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/">PhD-level compilers course</a> a few years ago,
I thought it was important to use a “hands-on” structure.
There is a big difference between understanding an algorithm on a whiteboard and implementing it, inevitably running into bugs when your implementation encounters real programs.
At the same time, I wanted students to get started quickly, without learning the overwhelming APIs that come with industrial-strength compilers.</p>

<p>I created <a href="https://capra.cs.cornell.edu/bril/">Bril</a>, the Big Red Intermediate Language, to support the class’s implementation projects.
Bril isn’t very interesting from a compiler engineering perspective, but
I think it’s pretty good for the specific use case of teaching compilers classes.
Here’s a factorial program:</p>

<div><pre><code><span>@main</span><span>(</span><span>input</span><span>:</span><span> </span><span>int</span><span>)</span><span> </span><span>{</span><span>
  </span><span>res</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>call</span><span> </span><span>@fact</span><span> </span><span>input</span><span>;</span><span>
  </span><span>print</span><span> </span><span>res</span><span>;</span><span>
</span><span>}</span><span>

</span><span>@fact</span><span>(</span><span>n</span><span>:</span><span> </span><span>int</span><span>):</span><span> </span><span>int</span><span> </span><span>{</span><span>
  </span><span>one</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>const</span><span> </span><span>1</span><span>;</span><span>
  </span><span>cond</span><span>:</span><span> </span><span>bool</span><span> </span><span>=</span><span> </span><span>le</span><span> </span><span>n</span><span> </span><span>one</span><span>;</span><span>
  </span><span>br</span><span> </span><span>cond</span><span> </span><span>.then</span><span> </span><span>.else</span><span>;</span><span>
</span><span>.then</span><span>:</span><span>
  </span><span>ret</span><span> </span><span>one</span><span>;</span><span>
</span><span>.else</span><span>:</span><span>
  </span><span>decr</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>sub</span><span> </span><span>n</span><span> </span><span>one</span><span>;</span><span>
  </span><span>rec</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>call</span><span> </span><span>@fact</span><span> </span><span>decr</span><span>;</span><span>
  </span><span>prod</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>mul</span><span> </span><span>n</span><span> </span><span>rec</span><span>;</span><span>
  </span><span>ret</span><span> </span><span>prod</span><span>;</span><span>
</span><span>}</span><span>
</span></code></pre></div>

<p>Bril is the only compiler IL I know of that is specifically designed for education.
Focusing on teaching means that Bril prioritizes these goals:</p>

<ul>
  <li>It is fast to get started working with the IL.</li>
  <li>It is easy to mix and match components that work with the IL, including things that fellow students write.</li>
  <li>The semantics are simple, without too many distractions.</li>
  <li>The syntax is ruthlessly regular.</li>
</ul>

<p>Bril is different from other ILs because it prioritizes those goals above other, more typical ones:
code size, compiler speed, and performance of the generated code.</p>

<p>Aside from that inversion of priorities, Bril looks a lot like any other modern compiler IL.
It’s an instruction-based, assembly-like, typed, <a href="https://en.wikipedia.org/wiki/A-normal_form">ANF</a> language.
There’s a quote from <a href="https://en.wikipedia.org/wiki/Why_the_lucky_stiff">why the lucky stiff</a> where he introduces <a href="https://camping.github.io/camping.io/">Camping</a>, the original web microframework, as “a little white blood cell in the vein of Rails.”
If LLVM is an entire circulatory system, Bril is a single blood cell.</p>

<h2 id="bril-is-json">Bril is JSON</h2>

<p>Bril programs are JSON documents.
Here’s how students get started working with Bril code using Python:</p>

<div><pre><code><span>import</span> <span>json</span>
<span>import</span> <span>sys</span>
<span>prog</span> <span>=</span> <span>json</span><span>.</span><span>load</span><span>(</span><span>sys</span><span>.</span><span>stdin</span><span>)</span>
</code></pre></div>

<p>I’m obviously being a little silly here.
But seriously, the JSON-as-syntax idea is in service of the <em>fast to get started</em> and <em>easy to mix and match components</em> goals above.
I wanted Bril to do these things:</p>

<ul>
  <li><strong>Let students use any programming language they want.</strong>
I wanted my compilers course to be accessible to lots of PhD students, including people with only tangential interest in compilers.
Letting them use the languages they’re comfortable with is a great way to avoid any ramp-up phase where students must learn some specific “realistic” compiler implementation language if they don’t already know it.</li>
  <li><strong>No framework is required to get started.</strong>
For the first offering of CS 6120, no libraries existed, and I needed to run the course somehow.
Beyond that practical matter, this constraint is valuable as a complexity limiter:
students can get started with simple stuff without learning any APIs.
These days, Bril does come with libraries that are great for avoiding JSON-handling frustrations when you scale up:
for <a href="https://github.com/sampsyo/bril/tree/main/bril-rs">Rust</a>, <a href="https://github.com/sampsyo/bril/tree/main/bril-ocaml">OCaml</a>, <a href="https://github.com/sampsyo/bril/tree/main/bril-swift">Swift</a>, and <a href="https://github.com/sampsyo/bril/tree/main/bril-ts">TypeScript</a>.
But the fact that they’re not really <em>required</em> keeps the onramps gentle.</li>
  <li><strong>Compose small pieces with Unix pipelines.</strong>
You can wire up Bril workflows with shell pipelines, like <code>cat code.json | my_opt | my_friends_opt | brilck</code>.
I want students in CS 6120 to freely share code with each other and to borrow bits of functionality I wrote.
For a PhD-level class, this trust-based “open-source” course setup makes way more sense to me than a typical undergrad-style class where collaboration is forbidden.
Piping JSON from one tool to the next is a great vehicle for sharing.</li>
</ul>

<p>So, JSON is the canonical form for Bril code.
Here’s a complete Bril program:</p>

<div><pre><code><span>{</span><span>
  </span><span>"functions"</span><span>:</span><span> </span><span>[{</span><span>
    </span><span>"name"</span><span>:</span><span> </span><span>"main"</span><span>,</span><span>
    </span><span>"args"</span><span>:</span><span> </span><span>[],</span><span>
    </span><span>"instrs"</span><span>:</span><span> </span><span>[</span><span>
      </span><span>{</span><span> </span><span>"op"</span><span>:</span><span> </span><span>"const"</span><span>,</span><span> </span><span>"type"</span><span>:</span><span> </span><span>"int"</span><span>,</span><span> </span><span>"dest"</span><span>:</span><span> </span><span>"v0"</span><span>,</span><span> </span><span>"value"</span><span>:</span><span> </span><span>1</span><span> </span><span>},</span><span>
      </span><span>{</span><span> </span><span>"op"</span><span>:</span><span> </span><span>"const"</span><span>,</span><span> </span><span>"type"</span><span>:</span><span> </span><span>"int"</span><span>,</span><span> </span><span>"dest"</span><span>:</span><span> </span><span>"v1"</span><span>,</span><span> </span><span>"value"</span><span>:</span><span> </span><span>2</span><span> </span><span>},</span><span>
      </span><span>{</span><span> </span><span>"op"</span><span>:</span><span> </span><span>"add"</span><span>,</span><span> </span><span>"type"</span><span>:</span><span> </span><span>"int"</span><span>,</span><span> </span><span>"dest"</span><span>:</span><span> </span><span>"v2"</span><span>,</span><span> </span><span>"args"</span><span>:</span><span> </span><span>[</span><span>"v0"</span><span>,</span><span> </span><span>"v1"</span><span>]</span><span> </span><span>},</span><span>
      </span><span>{</span><span> </span><span>"op"</span><span>:</span><span> </span><span>"print"</span><span>,</span><span> </span><span>"args"</span><span>:</span><span> </span><span>[</span><span>"v2"</span><span>]</span><span> </span><span>}</span><span>
    </span><span>]</span><span>
  </span><span>}]</span><span>
</span><span>}</span><span>
</span></code></pre></div>

<p>This program has one function, <code>main</code>, with no arguments and 4 instructions:
two <code>const</code> instructions, an <code>add</code>, and a <code>print</code>.</p>

<p>Even though Bril is JSON, it also has a text form.
I will, however, die on the following hill:
<em>the text form is only a second-class convenience</em>, and it is not the language itself.
The text syntax exists solely to cater to our foibles as humans for whom reading JSON directly is annoying.
Bril itself is the JSON format you see above.
But as a concession to our foibles, among Bril’s many tools are a <a href="https://github.com/sampsyo/bril/blob/main/bril-txt/briltxt.py">parser and pretty-printer</a>.
Here’s the text form of the program above:</p>

<div><pre><code><span>@main</span><span> </span><span>{</span><span>
  </span><span>v0</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>const</span><span> </span><span>1</span><span>;</span><span>
  </span><span>v1</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>const</span><span> </span><span>2</span><span>;</span><span>
  </span><span>v2</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>add</span><span> </span><span>v0</span><span> </span><span>v1</span><span>;</span><span>
  </span><span>print</span><span> </span><span>v2</span><span>;</span><span>
</span><span>}</span><span>
</span></code></pre></div>

<p>As a consequence, working with Bril means typing commands like this a lot:</p>

<div><pre><code>$ bril2json &lt; program.bril | do_something | bril2txt
</code></pre></div>

<p>It can get tedious to constantly convert to and from JSON,
and it’s wasteful to serialize and deserialize programs at each stage in a long pipeline.
But the trade-off is that the Bril ecosystem comprises a large number of small pieces, loosely joined and infinitely remixable on the command line.</p>

<h2 id="language-design-good-bad-and-ugly">Language Design: Good, Bad, and Ugly</h2>

<p>There are a few design decisions in the language itself that reflect Bril’s education-over-practicality priorities.
For instance, <code>print</code> is a <a href="https://capra.cs.cornell.edu/bril/lang/core.html">core opcode</a> in Bril; I don’t think this would be a good idea in most compilers, but it makes it easy to write small examples.</p>

<p>Another quirk is that Bril is <em>extremely</em> <a href="https://en.wikipedia.org/wiki/A-normal_form">A-normal form</a>, to the point that constants always have to go in their own instructions and get their own names.
To increment an integer, for example, you can’t do this:</p>



<p>Instead, Bril code is full of one-off constant variables, like this:</p>

<div><pre><code><span>one</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>const</span><span> </span><span>1</span><span>;</span><span>
</span><span>incr</span><span>:</span><span> </span><span>int</span><span> </span><span>=</span><span> </span><span>add</span><span> </span><span>n</span><span> </span><span>one</span><span>;</span><span>
</span></code></pre></div>

<p>This more-ANF-than-ANF approach to constants is verbose to the point of silliness.
But it simplifies the way you write some basic IL traversals because you don’t have to worry about whether operands come from variables or constants.
For many use cases, you get to handle constants the same way you do any other instruction.
For teaching, I think the regularity is worth the silliness.</p>

<p>Bril is extensible, in a loosey-goosey way.
The string-heavy JSON syntax means it’s trivial to add new opcodes and data types.
Beyond the <a href="https://capra.cs.cornell.edu/bril/lang/core.html">core language</a>, there are “official” extensions for <a href="https://capra.cs.cornell.edu/bril/lang/memory.html">manually managed memory</a>, <a href="https://capra.cs.cornell.edu/bril/lang/float.html">floating-point numbers</a>, a funky form of <a href="https://capra.cs.cornell.edu/bril/lang/spec.html">speculation</a> I use for teaching JIT principles, <a href="https://capra.cs.cornell.edu/bril/lang/import.html">module imports</a>, and <a href="https://capra.cs.cornell.edu/bril/lang/char.html">characters</a>.
While a <em>laissez faire</em> approach to extensions has worked so far, it’s also a mess:
there’s no systematic way to tell which extensions a given program uses or which language features a given tool supports.
<a href="https://github.com/sampsyo/bril/issues/38">A more explicit approach to extensibility</a> would make the growing ecosystem easier to manage.</p>

<p>Finally, Bril does not require SSA.
There is <a href="https://capra.cs.cornell.edu/bril/lang/ssa.html">an SSA form</a> that includes a <code>phi</code> instruction, but the language itself has mutable variables.
I wouldn’t recommend this strategy for any other IL, but it’s helpful for teaching for three big reasons:</p>

<ol>
  <li>I want students to feel the pain of working with non-SSA programs before the course introduces SSA. This frustration can help motivate why SSA is the modern consensus.</li>
  <li>The course includes a task where students <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/6/#tasks">implement into-SSA and out-of-SSA transformations</a>.</li>
  <li>It’s really easy to generate Bril code from frontend languages that have mutable variables. The alternative would be LLVM’s <a href="https://llvm.org/doxygen/Mem2Reg_8cpp_source.html">mem2reg</a>/”just put all the frontend variables in memory” trick, but Bril avoids building memory into the core language for simplicity.</li>
</ol>

<p>Unfortunately, this aftermarket SSA retrofit has been a huge headache.
It has caused <a href="https://github.com/sampsyo/bril/issues/108">persistent problems with undefinedness</a> and <a href="https://github.com/sampsyo/bril/issues/330">classic correctness problems when translating out of SSA</a>.
I think my original design is fundamentally flawed;
it was a mistake to treat <code>phi</code> semantically as “just another instruction” instead of a more invasive change to the language.
Bril’s SSA form needs a full rework, probably including an actual language extension along the lines of <a href="https://mlir.llvm.org/docs/Rationale/Rationale/#block-arguments-vs-phi-nodes">MLIR’s basic block arguments</a>.
It has been an interesting lesson for me that SSA comes with subtle design implications that are difficult to retrofit onto an existing mutation-oriented IL.</p>

<h2 id="the-bril-ecosystem">The Bril Ecosystem</h2>

<p><img src="https://www.cs.cornell.edu/~asampson/media/bril/ecosystem.svg"></p>

<p>I cobbled together the first version of Bril in a hurry in the weeks before the fall 2019 semester began.
Since then, via the “open-source class” nature of <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/">CS 6120</a>, students have contributed a host of tools for working with the language.
The diagram above shows a sampling of what is in <a href="https://github.com/sampsyo/bril">the monorepo</a>;
empty boxes are things I made and shaded boxes are things students contributed.
One <a href="https://agentcooper.io/">satisfied CS 6120 customer</a>
built a snazzy <a href="https://agentcooper.github.io/bril-playground/">web playground</a> that I find super impressive.
You can find many more random tools by <a href="https://github.com/search?q=bril+compiler&amp;type=repositories">searching on GitHub</a>.</p>

<p>Most of the language extensions I mentioned were contributed by CS 6120 students.
In the run-up to the first semester, I was low on time and left memory, function calls, and floating-point numbers as “exercises for the reader.”
You can read 2019 blog posts <a href="https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/manually-managed-memory/">by Drew Zagieboylo &amp; Ryan Doenges about the memory extension</a>,
<a href="https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/function-calls/">by Alexa VanHattum &amp; Gregory Yauney about designing function calls</a>,
and <a href="https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/floats-static-arrays/">by Dietrich Geisler about floats</a>.
Laziness can pay off.</p>

<p>Please <a href="https://discuss.systems/@adrian">get in touch</a> if you’re using Bril for something unconventional!
I love learning about the weird places it has gone.</p>


</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Windows recovery environment and bootable USB creator in 200kb (160 pts)]]></title>
            <link>https://github.com/joshuacline/windick</link>
            <guid>41083987</guid>
            <pubDate>Sat, 27 Jul 2024 02:09:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/joshuacline/windick">https://github.com/joshuacline/windick</a>, See on <a href="https://news.ycombinator.com/item?id=41083987">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_subnav_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;packages&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;packages_link_product_subnav_navbar&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_subnav_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_subnav_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_subnav_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_subnav_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_subnav_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_subnav_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>

                  <li>
      
      <div>
              <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_subnav_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_subnav_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_subnav_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_subnav_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_subnav_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_subnav_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise_subnav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_subnav_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global_nav&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_nav_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:joshuacline/windick" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="EVJYFJrXX4qUPEoghlRWS_ZxVhHsqnF87sXIjvbQ7CG2VEDSQJJPie9q0lxPeAeSyCaThsecIlt533SMV6AxeA" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="joshuacline/windick" data-current-org="" data-current-owner="joshuacline" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=joshuacline%2Fwindick" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/joshuacline/windick&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="a0081141a489e1a9aac8ec519df86cd5cfc0d09c2ed948504eb2c3ebb4c900f7" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Linux Kernel Module Programming Guide (263 pts)]]></title>
            <link>https://sysprog21.github.io/lkmpg/</link>
            <guid>41083972</guid>
            <pubDate>Sat, 27 Jul 2024 02:04:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sysprog21.github.io/lkmpg/">https://sysprog21.github.io/lkmpg/</a>, See on <a href="https://news.ycombinator.com/item?id=41083972">Hacker News</a></p>
<div id="readability-page-1" class="page">  

   <p><img alt="PIC" src="https://sysprog21.github.io/lkmpg/assets/cover-with-names.png"></p>
   <p><span>1 <a href="#introduction" id="QQ2-1-1">Introduction</a></span>
<br>   &nbsp;&nbsp;<span>1.1 <a href="#authorship" id="QQ2-1-2">Authorship</a></span>
<br>   &nbsp;&nbsp;<span>1.2 <a href="#acknowledgements" id="QQ2-1-3">Acknowledgements</a></span>
<br>   &nbsp;&nbsp;<span>1.3 <a href="#what-is-a-kernel-module" id="QQ2-1-4">What Is A Kernel Module?</a></span>
<br>   &nbsp;&nbsp;<span>1.4 <a href="#kernel-module-package" id="QQ2-1-5">Kernel module package</a></span>
<br>   &nbsp;&nbsp;<span>1.5 <a href="#what-modules-are-in-my-kernel" id="QQ2-1-6">What Modules are in my Kernel?</a></span>
<br>   &nbsp;&nbsp;<span>1.6 <a href="#is-there-a-need-to-download-and-compile-the-kernel" id="QQ2-1-7">Is there a need to download and compile the kernel?</a></span>
<br>   &nbsp;&nbsp;<span>1.7 <a href="#before-we-begin" id="QQ2-1-8">Before We Begin</a></span>
<br>   &nbsp;<span>2 <a href="#headers" id="QQ2-1-9">Headers</a></span>
<br>   &nbsp;<span>3 <a href="#examples" id="QQ2-1-10">Examples</a></span>
<br>   &nbsp;<span>4 <a href="#hello-world" id="QQ2-1-11">Hello World</a></span>
<br>   &nbsp;&nbsp;<span>4.1 <a href="#the-simplest-module" id="QQ2-1-12">The Simplest Module</a></span>
<br>   &nbsp;&nbsp;<span>4.2 <a href="#hello-and-goodbye" id="QQ2-1-13">Hello and Goodbye</a></span>
<br>   &nbsp;&nbsp;<span>4.3 <a href="#the-init-and-exit-macros" id="QQ2-1-14">The __init and __exit Macros</a></span>
<br>   &nbsp;&nbsp;<span>4.4 <a href="#licensing-and-module-documentation" id="QQ2-1-15">Licensing and Module Documentation</a></span>
<br>   &nbsp;&nbsp;<span>4.5 <a href="#passing-command-line-arguments-to-a-module" id="QQ2-1-16">Passing Command Line Arguments to a Module</a></span>
<br>   &nbsp;&nbsp;<span>4.6 <a href="#modules-spanning-multiple-files" id="QQ2-1-17">Modules Spanning Multiple Files</a></span>
<br>   &nbsp;&nbsp;<span>4.7 <a href="#building-modules-for-a-precompiled-kernel" id="QQ2-1-18">Building modules for a precompiled kernel</a></span>
<br>   &nbsp;<span>5 <a href="#preliminaries" id="QQ2-1-19">Preliminaries</a></span>
<br>   &nbsp;&nbsp;<span>5.1 <a href="#how-modules-begin-and-end" id="QQ2-1-20">How modules begin and end</a></span>
<br>   &nbsp;&nbsp;<span>5.2 <a href="#functions-available-to-modules" id="QQ2-1-21">Functions available to modules</a></span>
<br>   &nbsp;&nbsp;<span>5.3 <a href="#user-space-vs-kernel-space" id="QQ2-1-22">User Space vs Kernel Space</a></span>
<br>   &nbsp;&nbsp;<span>5.4 <a href="#name-space" id="QQ2-1-23">Name Space</a></span>
<br>   &nbsp;&nbsp;<span>5.5 <a href="#code-space" id="QQ2-1-24">Code space</a></span>
<br>   &nbsp;&nbsp;<span>5.6 <a href="#device-drivers" id="QQ2-1-25">Device Drivers</a></span>
<br>   &nbsp;<span>6 <a href="#character-device-drivers" id="QQ2-1-26">Character Device drivers</a></span>
<br>   &nbsp;&nbsp;<span>6.1 <a href="#the-fileoperations-structure" id="QQ2-1-27">The file_operations Structure</a></span>
<br>   &nbsp;&nbsp;<span>6.2 <a href="#the-file-structure" id="QQ2-1-28">The file structure</a></span>
<br>   &nbsp;&nbsp;<span>6.3 <a href="#registering-a-device" id="QQ2-1-29">Registering A Device</a></span>
<br>   &nbsp;&nbsp;<span>6.4 <a href="#unregistering-a-device" id="QQ2-1-30">Unregistering A Device</a></span>
<br>   &nbsp;&nbsp;<span>6.5 <a href="#chardevc" id="QQ2-1-31">chardev.c</a></span>
<br>   &nbsp;&nbsp;<span>6.6 <a href="#writing-modules-for-multiple-kernel-versions" id="QQ2-1-32">Writing Modules for Multiple Kernel Versions</a></span>
<br>   &nbsp;<span>7 <a href="#the-proc-file-system" id="QQ2-1-33">The /proc File System</a></span>
<br>   &nbsp;&nbsp;<span>7.1 <a href="#the-procops-structure" id="QQ2-1-34">The proc_ops Structure</a></span>
<br>   &nbsp;&nbsp;<span>7.2 <a href="#read-and-write-a-proc-file" id="QQ2-1-35">Read and Write a /proc File</a></span>
<br>   &nbsp;&nbsp;<span>7.3 <a href="#manage-proc-file-with-standard-filesystem" id="QQ2-1-36">Manage /proc file with standard filesystem</a></span>
<br>   &nbsp;&nbsp;<span>7.4 <a href="#manage-proc-file-with-seqfile" id="QQ2-1-37">Manage /proc file with seq_file</a></span>
<br>   &nbsp;<span>8 <a href="#sysfs-interacting-with-your-module" id="QQ2-1-39">sysfs: Interacting with your module</a></span>
<br>   &nbsp;<span>9 <a href="#talking-to-device-files" id="QQ2-1-40">Talking To Device Files</a></span>
<br>   &nbsp;<span>10 <a href="#system-calls" id="QQ2-1-41">System Calls</a></span>
<br>   &nbsp;<span>11 <a href="#blocking-processes-and-threads" id="QQ2-1-42">Blocking Processes and threads</a></span>
                                                                  

                                                                  
<br>   &nbsp;&nbsp;<span>11.1 <a href="#sleep" id="QQ2-1-43">Sleep</a></span>
<br>   &nbsp;&nbsp;<span>11.2 <a href="#completions" id="QQ2-1-44">Completions</a></span>
<br>   &nbsp;<span>12 <a href="#avoiding-collisions-and-deadlocks" id="QQ2-1-45">Avoiding Collisions and Deadlocks</a></span>
<br>   &nbsp;&nbsp;<span>12.1 <a href="#mutex" id="QQ2-1-46">Mutex</a></span>
<br>   &nbsp;&nbsp;<span>12.2 <a href="#spinlocks" id="QQ2-1-47">Spinlocks</a></span>
<br>   &nbsp;&nbsp;<span>12.3 <a href="#read-and-write-locks" id="QQ2-1-48">Read and write locks</a></span>
<br>   &nbsp;&nbsp;<span>12.4 <a href="#atomic-operations" id="QQ2-1-49">Atomic operations</a></span>
<br>   &nbsp;<span>13 <a href="#replacing-print-macros" id="QQ2-1-50">Replacing Print Macros</a></span>
<br>   &nbsp;&nbsp;<span>13.1 <a href="#replacement" id="QQ2-1-51">Replacement</a></span>
<br>   &nbsp;&nbsp;<span>13.2 <a href="#flashing-keyboard-leds" id="QQ2-1-52">Flashing keyboard LEDs</a></span>
<br>   &nbsp;<span>14 <a href="#scheduling-tasks" id="QQ2-1-53">Scheduling Tasks</a></span>
<br>   &nbsp;&nbsp;<span>14.1 <a href="#tasklets" id="QQ2-1-54">Tasklets</a></span>
<br>   &nbsp;&nbsp;<span>14.2 <a href="#work-queues" id="QQ2-1-55">Work queues</a></span>
<br>   &nbsp;<span>15 <a href="#interrupt-handlers" id="QQ2-1-56">Interrupt Handlers</a></span>
<br>   &nbsp;&nbsp;<span>15.1 <a href="#interrupt-handlers1" id="QQ2-1-57">Interrupt Handlers</a></span>
<br>   &nbsp;&nbsp;<span>15.2 <a href="#detecting-button-presses" id="QQ2-1-58">Detecting button presses</a></span>
<br>   &nbsp;&nbsp;<span>15.3 <a href="#bottom-half" id="QQ2-1-59">Bottom Half</a></span>
<br>   &nbsp;&nbsp;<span>15.4 <a href="#threaded-irq" id="QQ2-1-60">Threaded IRQ</a></span>
<br>   &nbsp;<span>16 <a href="#virtual-input-device-driver" id="QQ2-1-61">Virtual Input Device Driver</a></span>
<br>   &nbsp;<span>17 <a href="#standardizing-the-interfaces-the-device-model" id="QQ2-1-62">Standardizing the interfaces: The Device Model</a></span>
<br>   &nbsp;<span>18 <a href="#optimizations" id="QQ2-1-63">Optimizations</a></span>
<br>   &nbsp;&nbsp;<span>18.1 <a href="#likely-and-unlikely-conditions" id="QQ2-1-64">Likely and Unlikely conditions</a></span>
<br>   &nbsp;&nbsp;<span>18.2 <a href="#static-keys" id="QQ2-1-65">Static keys</a></span>
<br>   &nbsp;<span>19 <a href="#common-pitfalls" id="QQ2-1-66">Common Pitfalls</a></span>
<br>   &nbsp;&nbsp;<span>19.1 <a href="#using-standard-libraries" id="QQ2-1-67">Using standard libraries</a></span>
<br>   &nbsp;&nbsp;<span>19.2 <a href="#disabling-interrupts" id="QQ2-1-68">Disabling interrupts</a></span>
<br>   &nbsp;<span>20 <a href="#where-to-go-from-here" id="QQ2-1-69">Where To Go From Here?</a></span>
   </p>
   <h3 id="introduction"><span>1   </span> <a id="x1-10001"></a>Introduction</h3>
<!-- l. 65 --><p>The Linux Kernel Module Programming Guide is a free book; you may reproduce
and/or modify it under the terms of the <a href="https://opensource.org/licenses/OSL-3.0">Open Software License</a>, version
3.0.
</p><!-- l. 67 --><p>   This book is distributed in the hope that it would be useful, but without any
warranty, without even the implied warranty of merchantability or fitness for a
particular purpose.
</p><!-- l. 69 --><p>   The author encourages wide distribution of this book for personal or commercial
use, provided the above copyright notice remains intact and the method adheres to
the provisions of the <a href="https://opensource.org/licenses/OSL-3.0">Open Software License</a>. In summary, you may copy and
distribute this book free of charge or for a profit. No explicit permission is required
from the author for reproduction of this book in any medium, physical or
electronic.
</p><!-- l. 72 --><p>   Derivative works and translations of this document must be placed under the
Open Software License, and the original copyright notice must remain intact. If you
have contributed new material to this book, you must make the material and source
code available for your revisions. Please make revisions and updates available directly
                                                                  

                                                                  
to the document maintainer, Jim Huang &lt;jserv@ccns.ncku.edu.tw&gt;. This will allow
for the merging of updates and provide consistent revisions to the Linux
community.
</p><!-- l. 77 --><p>   If you publish or distribute this book commercially, donations, royalties, and/or
printed copies are greatly appreciated by the author and the <a href="https://tldp.org/">Linux Documentation
Project</a> (LDP). Contributing in this way shows your support for free software and
the LDP. If you have questions or comments, please contact the address
above.
</p><!-- l. 80 -->
   <h4 id="authorship"><span>1.1   </span> <a id="x1-20001.1"></a>Authorship</h4>
<!-- l. 83 --><p>The Linux Kernel Module Programming Guide was initially authored by Ori
Pomerantz for Linux v2.2. As the Linux kernel evolved, Ori’s availability to maintain
the document diminished. Consequently, Peter Jay Salzman assumed the role of
maintainer and updated the guide for Linux v2.4. Similar constraints arose for Peter
when tracking developments in Linux v2.6, leading to Michael Burian joining
as a co-maintainer to bring the guide up to speed with Linux v2.6. Bob
Mottram contributed to the guide by updating examples for Linux v3.8
and later. Jim Huang then undertook the task of updating the guide for
recent Linux versions (v5.0 and beyond), along with revising the LaTeX
document.
</p><!-- l. 92 -->
   <h4 id="acknowledgements"><span>1.2   </span> <a id="x1-30001.2"></a>Acknowledgements</h4>
<!-- l. 95 --><p>The following people have contributed corrections or good suggestions:
</p>
<p>
 Amit Dhingra, Andy Shevchenko, Arush Sharma, Benno Bielmeier, Bob Lee,
Brad Baker, Che-Chia Chang, Cheng-Shian Yeh, Chih-En Lin, Chih-Hsuan
Yang, Chih-Yu Chen, Ching-Hua (Vivian) Lin, Chin Yik Ming, cvvletter,
Cyril Brulebois, Daniele Paolo Scarpazza, David Porter, demonsome, Dimo
Velev, Ekang Monyet, Ethan Chan, Francois Audeon, Gilad Reti, heartofrain,
Horst Schirmeier, Hsin-Hsiang Peng, Ignacio Martin, I-Hsin Cheng, Iûnn
Kiàn-îng, Jian-Xing Wu, Johan Calle, keytouch, Kohei Otsuka, Kuan-Wei
Chiu, manbing, Marconi Jiang, mengxinayan, Meng-Zong Tsai, Peter Lin,
Roman Lakeev, Sam Erickson, Shao-Tse Hung, Shih-Sheng Yang, Stacy
Prowell, Steven Lung, Tristan Lelong, Tse-Wei Lin, Tucker Polomik, Tyler
Fanelli, VxTeemo, Wei-Hsin Yeh, Wei-Lun Tsai, Xatierlike Lee, Yen-Yu Chen,
Yin-Chiuan Chen, Yi-Wei Lin, Yo-Jung Lin, Yu-Hsiang Tseng, YYGO. </p>
                                                                  

                                                                  
<!-- l. 101 -->
   <h4 id="what-is-a-kernel-module"><span>1.3   </span> <a id="x1-40001.3"></a>What Is A Kernel Module?</h4>
<!-- l. 104 --><p>Involvement in the development of Linux kernel modules requires a foundation in the
C programming language and a track record of creating conventional programs
intended for process execution. This pursuit delves into a domain where an
unregulated pointer, if disregarded, may potentially trigger the total elimination of
an entire file system, resulting in a scenario that necessitates a complete system
reboot.
</p><!-- l. 109 --><p>   A Linux kernel module is precisely defined as a code segment capable of dynamic
loading and unloading within the kernel as needed. These modules enhance kernel
capabilities without necessitating a system reboot. A notable example is seen in the
device driver module, which facilitates kernel interaction with hardware components
linked to the system. In the absence of modules, the prevailing approach leans toward
monolithic kernels, requiring direct integration of new functionalities into the
kernel image. This approach leads to larger kernels and necessitates kernel
rebuilding and subsequent system rebooting when new functionalities are
desired.
</p><!-- l. 116 -->
   <h4 id="kernel-module-package"><span>1.4   </span> <a id="x1-50001.4"></a>Kernel module package</h4>
<!-- l. 119 --><p>Linux distributions provide the commands
<code> <span>modprobe</span>
</code>, <code>  <span>insmod</span>
</code> and <code>  <span>depmod</span>
</code> within a package.
</p><!-- l. 121 --><p>   On Ubuntu/Debian GNU/Linux: 
</p>
   <pre id="fancyvrb1"><a id="x1-5006r1"></a><span>1</span><span>sudo&nbsp;apt-get&nbsp;install&nbsp;build-essential&nbsp;kmod</span></pre>
<!-- l. 126 --><p>   On Arch Linux: 
</p>
   <pre id="fancyvrb2"><a id="x1-5009r1"></a><span>1</span><span>sudo&nbsp;pacman&nbsp;-S&nbsp;gcc&nbsp;kmod</span></pre>
                                                                  

                                                                  
<!-- l. 131 -->
   <h4 id="what-modules-are-in-my-kernel"><span>1.5   </span> <a id="x1-60001.5"></a>What Modules are in my Kernel?</h4>
<!-- l. 134 --><p>To discover what modules are already loaded within your current kernel use the command
<code> <span>lsmod</span>
</code>. 
</p>
   <pre id="fancyvrb3"><a id="x1-6004r1"></a><span>1</span><span>sudo&nbsp;lsmod</span></pre>
<!-- l. 139 --><p>   Modules are stored within the file <span><span><span>/proc/modules</span></span></span>, so you can also see them with:

</p>
   <pre id="fancyvrb4"><a id="x1-6007r1"></a><span>1</span><span>sudo&nbsp;cat&nbsp;/proc/modules</span></pre>
<!-- l. 144 --><p>   This can be a long list, and you might prefer to search for something particular.
To search for the <span><span><span>fat</span></span></span> module: 
</p>
   <pre id="fancyvrb5"><a id="x1-6010r1"></a><span>1</span><span>sudo&nbsp;lsmod&nbsp;|&nbsp;grep&nbsp;fat</span></pre>
<!-- l. 150 -->
   <h4 id="is-there-a-need-to-download-and-compile-the-kernel"><span>1.6   </span> <a id="x1-70001.6"></a>Is there a need to download and compile the kernel?</h4>
<!-- l. 152 --><p>To effectively follow this guide, there is no obligatory requirement for performing
such actions. Nonetheless, a prudent approach involves executing the examples within
a test distribution on a virtual machine, thus mitigating any potential risk of
disrupting the system.
</p><!-- l. 156 -->
   <h4 id="before-we-begin"><span>1.7   </span> <a id="x1-80001.7"></a>Before We Begin</h4>
<!-- l. 158 --><p>Before delving into code, certain matters require attention. Variances exist among
individuals’ systems, and distinct personal approaches are evident. The achievement
of successful compilation and loading of the inaugural “hello world” program may, at
times, present challenges. It is reassuring to note that overcoming the initial
obstacle in the first attempt paves the way for subsequent endeavors to proceed
seamlessly.
</p><!-- l. 164 --><ol>
<li id="x1-8002x1">Modversioning. A module compiled for one kernel will not load if a different
     kernel is booted, unless <code>  <span>CONFIG_MODVERSIONS</span>
     </code> is enabled in the kernel. Module versioning will be discussed later in
     this guide. Until module versioning is covered, the examples in this guide
     may not work correctly if running a kernel with modversioning turned on.
     However, most stock Linux distribution kernels come with modversioning
     enabled. If difficulties arise when loading the modules due to versioning
     errors, consider compiling a kernel with modversioning turned off.
     </li>
<li id="x1-8005x2">
     <!-- l. 173 --><p>Using X Window System. It is highly recommended to extract, compile,
     and load all the examples discussed in this guide from a console. Working
     on these tasks within the X Window System is discouraged.
     </p><!-- l. 177 --><p>Modules cannot directly print to the screen like <code>  <span>printf()</span>
     </code> can,  but  they  can  log  information  and  warnings  that  are  eventually
     displayed on the screen, specifically within a console. If a module is loaded
     from an <code>  <span>xterm</span>
     </code>, the information and warnings will be logged, but solely within the systemd
     journal. These logs will not be visible unless consulting the <code>  <span>journalctl</span>
     </code>. Refer to <a href="#hello-world">4<!-- tex4ht:ref: sec:helloworld  --></a> for more information. For instant access to this information,
     it is advisable to perform all tasks from the console.
     </p></li>
<li id="x1-8010x3">
     <!-- l. 184 --><p>SecureBoot.  Numerous  modern  computers  arrive  pre-configured  with
     UEFI  SecureBoot  enabled—an  essential  security  standard  ensuring
     booting  exclusively  through  trusted  software  endorsed  by  the  original
     equipment manufacturer. Certain Linux distributions even ship with the
     default Linux kernel configured to support SecureBoot. In these cases, the
     kernel module necessitates a signed security key.
     </p><!-- l. 189 --><p>Failing this, an attempt to insert your first “hello world” module would
     result in the message: “<span>ERROR: could not insert module</span>”. If this message
     <span>Lockdown: insmod: unsigned module loading is restricted; see man kernel
     </span><span>lockdown.7 </span>appears in the <code>  <span>dmesg</span>
                                                                  

                                                                  
     </code> output, the simplest approach involves disabling UEFI SecureBoot from
     the boot menu of your PC or laptop, allowing the successful insertion
     of  “hello  world”  module.  Naturally,  an  alternative  involves  undergoing
     intricate procedures such as generating keys, system key installation, and
     module signing to achieve functionality. However, this intricate process
     is less appropriate for beginners. If interested, more detailed steps for
     <a href="https://wiki.debian.org/SecureBoot">SecureBoot</a> can be explored and followed.</p></li></ol>
<!-- l. 200 -->
   
<!-- l. 202 --><p>Before building anything, it is necessary to install the header files for the
kernel.
</p><!-- l. 204 --><p>   On Ubuntu/Debian GNU/Linux: 
</p>
   <pre id="fancyvrb6"><a id="x1-9004r1"></a><span>1</span><span>sudo&nbsp;apt-get&nbsp;update</span> 
<a id="x1-9006r2"></a><span>2</span><span>apt-cache&nbsp;search&nbsp;linux-headers-</span><span id="textcolor1"><span>`</span></span><span>uname&nbsp;-r</span><span id="textcolor2"><span>`</span></span></pre>
<!-- l. 210 --><p>   The following command provides information on the available kernel header files.
Then for example: 
</p>
   <pre id="fancyvrb7"><a id="x1-9009r1"></a><span>1</span><span>sudo&nbsp;apt-get&nbsp;install&nbsp;kmod&nbsp;linux-headers-5.4.0-80-generic</span></pre>
<!-- l. 216 --><p>   On Arch Linux: 
</p>
   <pre id="fancyvrb8"><a id="x1-9012r1"></a><span>1</span><span>sudo&nbsp;pacman&nbsp;-S&nbsp;linux-headers</span></pre>
<!-- l. 221 --><p>   On Fedora: 
</p>
   <pre id="fancyvrb9"><a id="x1-9015r1"></a><span>1</span><span>sudo&nbsp;dnf&nbsp;install&nbsp;kernel-devel&nbsp;kernel-headers</span></pre>
<!-- l. 226 -->
   <h3 id="examples"><span>3   </span> <a id="x1-100003"></a>Examples</h3>
<!-- l. 228 --><p>All the examples from this document are available within the <span><span><span>examples</span></span></span>
subdirectory.
                                                                  

                                                                  
</p><!-- l. 230 --><p>   Should compile errors occur, it may be due to a more recent kernel version being
in use, or there might be a need to install the corresponding kernel header
files.
</p><!-- l. 233 -->
   <h3 id="hello-world"><span>4   </span> <a id="x1-110004"></a>Hello World</h3>
<!-- l. 235 -->
   <h4 id="the-simplest-module"><span>4.1   </span> <a id="x1-120004.1"></a>The Simplest Module</h4>
<!-- l. 237 --><p>Most individuals beginning their programming journey typically start with some
variant of a <span>hello world </span>example. It is unclear what the outcomes are for those who
deviate from this tradition, but it seems prudent to adhere to it. The learning process
will begin with a series of hello world programs that illustrate various fundamental
aspects of writing a kernel module.
</p><!-- l. 241 --><p>   Presented next is the simplest possible module.
</p><!-- l. 243 --><p>   Make a test directory: 
</p>
   <pre id="fancyvrb10"><a id="x1-12004r1"></a><span>1</span><span>mkdir&nbsp;-p&nbsp;~/develop/kernel/hello-1</span> 
<a id="x1-12006r2"></a><span>2</span><span>cd&nbsp;~/develop/kernel/hello-1</span></pre>
<!-- l. 249 --><p>   Paste this into your favorite editor and save it as <span><span><span>hello-1.c</span></span></span>:
</p><!-- l. 1 -->
   <pre id="fancyvrb11"><a id="x1-12008r1"></a><span>1</span><span id="textcolor3"><span>/*</span></span> 
<a id="x1-12010r2"></a><span>2</span><span id="textcolor4"><span>&nbsp;*&nbsp;hello-1.c&nbsp;-&nbsp;The&nbsp;simplest&nbsp;kernel&nbsp;module.</span></span> 
<a id="x1-12012r3"></a><span>3</span><span id="textcolor5"><span>&nbsp;*/</span></span> 
<a id="x1-12014r4"></a><span>4</span><span id="textcolor6"><span>#include</span></span><span>&nbsp;</span><span id="textcolor7"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Needed&nbsp;by&nbsp;all&nbsp;modules&nbsp;*/</span></span> 
<a id="x1-12016r5"></a><span>5</span><span id="textcolor8"><span>#include</span></span><span>&nbsp;</span><span id="textcolor9"><span>&lt;linux/printk.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;pr_info()&nbsp;*/</span></span> 
<a id="x1-12018r6"></a><span>6</span> 
<a id="x1-12020r7"></a><span>7</span><span id="textcolor10"><span>int</span></span><span>&nbsp;init_module(</span><span id="textcolor11"><span>void</span></span><span>)</span> 
<a id="x1-12022r8"></a><span>8</span><span>{</span> 
<a id="x1-12024r9"></a><span>9</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor12"><span>"Hello&nbsp;world&nbsp;1.</span></span><span id="textcolor13"><span>\n</span></span><span id="textcolor14"><span>"</span></span><span>);</span> 
<a id="x1-12026r10"></a><span>10</span> 
<a id="x1-12028r11"></a><span>11</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor15"><span>/*&nbsp;A&nbsp;non&nbsp;0&nbsp;return&nbsp;means&nbsp;init_module&nbsp;failed;&nbsp;module&nbsp;can</span><span>'</span><span>t&nbsp;be&nbsp;loaded.&nbsp;*/</span></span> 
<a id="x1-12030r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor16"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-12032r13"></a><span>13</span><span>}</span> 
<a id="x1-12034r14"></a><span>14</span> 
<a id="x1-12036r15"></a><span>15</span><span id="textcolor17"><span>void</span></span><span>&nbsp;cleanup_module(</span><span id="textcolor18"><span>void</span></span><span>)</span> 
<a id="x1-12038r16"></a><span>16</span><span>{</span> 
<a id="x1-12040r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor19"><span>"Goodbye&nbsp;world&nbsp;1.</span></span><span id="textcolor20"><span>\n</span></span><span id="textcolor21"><span>"</span></span><span>);</span> 
<a id="x1-12042r18"></a><span>18</span><span>}</span> 
<a id="x1-12044r19"></a><span>19</span> 
<a id="x1-12046r20"></a><span>20</span><span>MODULE_LICENSE(</span><span id="textcolor22"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 253 --><p>   Now you will need a <span><span><span>Makefile</span></span></span>. If you copy and paste this, change the indentation
to use <span>tabs</span>, not spaces.
</p><!-- l. 1 -->
   <pre id="fancyvrb12"><a id="x1-12057r1"></a><span>1</span><span>obj-m&nbsp;+=&nbsp;hello-1.o</span> 
<a id="x1-12059r2"></a><span>2</span> 
<a id="x1-12061r3"></a><span>3</span><span>PWD&nbsp;:=&nbsp;</span><span id="colorbox23"><span>$</span></span><span>(CURDIR)</span> 
<a id="x1-12063r4"></a><span>4</span> 
<a id="x1-12065r5"></a><span>5</span><span>all:</span> 
<a id="x1-12067r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;-C&nbsp;/lib/modules/</span><span id="colorbox24"><span>$</span></span><span>(shell&nbsp;uname&nbsp;-r)/build&nbsp;M=</span><span id="colorbox25"><span>$</span></span><span>(PWD)&nbsp;modules</span> 
<a id="x1-12069r7"></a><span>7</span> 
<a id="x1-12071r8"></a><span>8</span><span>clean:</span> 
<a id="x1-12073r9"></a><span>9</span><span>&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;-C&nbsp;/lib/modules/</span><span id="colorbox26"><span>$</span></span><span>(shell&nbsp;uname&nbsp;-r)/build&nbsp;M=</span><span id="colorbox27"><span>$</span></span><span>(PWD)&nbsp;clean</span></pre>
<!-- l. 267 --><p>   In <span><span><span>Makefile</span></span></span>, <span><span><span>$(CURDIR)</span></span></span> can set to the absolute pathname of the current working
directory(after all <span><span><span>-C</span></span></span> options are processed, if any). See more about <span><span><span>CURDIR</span></span></span> in <a href="https://www.gnu.org/software/make/manual/make.html">GNU
make manual</a>.
</p><!-- l. 270 --><p>   And finally, just run <span><span><span>make</span></span></span> directly.
</p><!-- l. 1 -->
   <pre id="fancyvrb13"><a id="x1-12076r1"></a><span>1</span><span>make</span></pre>
                                                                  

                                                                  
<!-- l. 276 --><p>   If there is no <span><span><span>PWD&nbsp;:=&nbsp;$(CURDIR)</span></span></span> statement in Makefile, then it may not compile
correctly with <span><span><span>sudo&nbsp;make</span></span></span>. Because some environment variables are specified by
the security policy, they can’t be inherited. The default security policy is
<span><span><span>sudoers</span></span></span>. In the <span><span><span>sudoers</span></span></span> security policy, <span><span><span>env_reset</span></span></span> is enabled by default,
which restricts environment variables. Specifically, path variables are not
retained from the user environment, they are set to default values (For more
information see: <a href="https://www.sudo.ws/docs/man/sudoers.man/">sudoers manual</a>). You can see the environment variable settings
by:
                                                                  

                                                                  
</p>
   <pre id="verbatim-1">$&nbsp;sudo&nbsp;-s
#&nbsp;sudo&nbsp;-V
</pre>
<!-- l. 286 --><!-- l. 288 --><p>   Here is a simple Makefile as an example to demonstrate the problem mentioned
above.
</p><!-- l. 1 -->
   <pre id="fancyvrb14"><a id="x1-12080r1"></a><span>1</span><span>all:</span> 
<a id="x1-12082r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span id="colorbox28"><span>$</span></span><span>(PWD)</span></pre>
<!-- l. 295 --><p>   Then, we can use <span><span><span>-p</span></span></span> flag to print out the environment variable values from the
Makefile.
                                                                  

                                                                  
</p>
   <pre id="verbatim-2">$&nbsp;make&nbsp;-p&nbsp;|&nbsp;grep&nbsp;PWD
PWD&nbsp;=&nbsp;/home/ubuntu/temp
OLDPWD&nbsp;=&nbsp;/home/ubuntu
&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$(PWD)
</pre>
<!-- l. 302 --><!-- l. 304 --><p>   The <span><span><span>PWD</span></span></span> variable won’t be inherited with <span><span><span>sudo</span></span></span>.
                                                                  

                                                                  
</p>
   <pre id="verbatim-3">$&nbsp;sudo&nbsp;make&nbsp;-p&nbsp;|&nbsp;grep&nbsp;PWD
&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$(PWD)
</pre>
<!-- l. 309 --><!-- l. 311 --><p>   However, there are three ways to solve this problem.
</p><!-- l. 313 --><ol>
<li id="x1-12084x1">
     <!-- l. 314 --><p> You can use the <span><span><span>-E</span></span></span> flag to temporarily preserve them.
     </p><!-- l. 1 -->
     <pre id="fancyvrb15"><a id="x1-12090r1"></a><span>1</span><span>&nbsp;&nbsp;&nbsp;&nbsp;$&nbsp;sudo&nbsp;-E&nbsp;make&nbsp;-p&nbsp;|&nbsp;grep&nbsp;PWD</span> 
<a id="x1-12092r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;PWD&nbsp;=&nbsp;/home/ubuntu/temp</span> 
<a id="x1-12094r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;OLDPWD&nbsp;=&nbsp;/home/ubuntu</span> 
<a id="x1-12096r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span id="textcolor29"><span>$(</span></span><span>PWD</span><span id="textcolor30"><span>)</span></span></pre>
     </li>
<li id="x1-12098x2">
     <!-- l. 325 --><p> You can set the <span><span><span>env_reset</span></span></span> disabled by editing the <span><span><span>/etc/sudoers</span></span></span> with
     root and <span><span><span>visudo</span></span></span>.
     </p><!-- l. 1 -->
     <pre id="fancyvrb16"><a id="x1-12105r1"></a><span>1</span><span>&nbsp;&nbsp;</span><span id="textcolor31"><span>##&nbsp;sudoers&nbsp;file.</span></span> 
<a id="x1-12107r2"></a><span>2</span><span>&nbsp;&nbsp;</span><span id="textcolor32"><span>##</span></span> 
<a id="x1-12109r3"></a><span>3</span><span>&nbsp;&nbsp;...</span> 
<a id="x1-12111r4"></a><span>4</span><span>&nbsp;&nbsp;Defaults&nbsp;env_reset</span> 
<a id="x1-12113r5"></a><span>5</span><span>&nbsp;&nbsp;</span><span id="textcolor33"><span>##&nbsp;Change&nbsp;env_reset&nbsp;to&nbsp;!env_reset&nbsp;in&nbsp;previous&nbsp;line&nbsp;to&nbsp;keep&nbsp;all&nbsp;environment&nbsp;variables</span></span></pre>
     <!-- l. 336 --><p>Then execute <span><span><span>env</span></span></span> and <span><span><span>sudo&nbsp;env</span></span></span> individually.
     </p><!-- l. 1 -->
     <pre id="fancyvrb17"><a id="x1-12121r1"></a><span>1</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor34"><span>#&nbsp;disable&nbsp;the&nbsp;env_reset</span></span> 
<a id="x1-12123r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span id="textcolor35"><span>"user:"</span></span><span>&nbsp;&gt;&nbsp;non-env_reset.log;&nbsp;env&nbsp;&gt;&gt;&nbsp;non-env_reset.log</span> 
<a id="x1-12125r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span id="textcolor36"><span>"root:"</span></span><span>&nbsp;&gt;&gt;&nbsp;non-env_reset.log;&nbsp;sudo&nbsp;env&nbsp;&gt;&gt;&nbsp;non-env_reset.log</span> 
<a id="x1-12127r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor37"><span>#&nbsp;enable&nbsp;the&nbsp;env_reset</span></span> 
<a id="x1-12129r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span id="textcolor38"><span>"user:"</span></span><span>&nbsp;&gt;&nbsp;env_reset.log;&nbsp;env&nbsp;&gt;&gt;&nbsp;env_reset.log</span> 
<a id="x1-12131r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span id="textcolor39"><span>"root:"</span></span><span>&nbsp;&gt;&gt;&nbsp;env_reset.log;&nbsp;sudo&nbsp;env&nbsp;&gt;&gt;&nbsp;env_reset.log</span></pre>
     <!-- l. 347 --><p>You  can  view  and  compare  these  logs  to  find  differences  between
     <span><span><span>env_reset</span></span></span> and <span><span><span>!env_reset</span></span></span>.
     </p></li>
<li id="x1-12133x3">
     <!-- l. 350 --><p>You can preserve environment variables by appending them to <span><span><span>env_keep</span></span></span>
     in <span><span><span>/etc/sudoers</span></span></span>.
     </p><!-- l. 1 -->
     <pre id="fancyvrb18"><a id="x1-12136r1"></a><span>1</span><span>&nbsp;&nbsp;Defaults&nbsp;env_keep&nbsp;+=&nbsp;</span><span id="textcolor40"><span>"PWD"</span></span></pre>
     <!-- l. 356 --><p>After applying the above change, you can check the environment variable
     settings by:
                                                                  

                                                                  
</p>
     <pre id="verbatim-4">     &nbsp;&nbsp;&nbsp;&nbsp;$&nbsp;sudo&nbsp;-s
     &nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;sudo&nbsp;-V
     &nbsp;&nbsp;
</pre>
     <!-- l. 361 --></li></ol>
<!-- l. 365 --><p>   If all goes smoothly you should then find that you have a compiled <span><span><span>hello-1.ko</span></span></span>
module. You can find info on it with the command: 
</p>
   <pre id="fancyvrb19"><a id="x1-12139r1"></a><span>1</span><span>modinfo&nbsp;hello-1.ko</span></pre>
<!-- l. 371 --><p>   At this point the command: 
</p>
   <pre id="fancyvrb20"><a id="x1-12142r1"></a><span>1</span><span>sudo&nbsp;lsmod&nbsp;|&nbsp;grep&nbsp;hello</span></pre>
<!-- l. 376 --><p>   should return nothing. You can try loading your shiny new module with: 
</p>
   <pre id="fancyvrb21"><a id="x1-12145r1"></a><span>1</span><span>sudo&nbsp;insmod&nbsp;hello-1.ko</span></pre>
<!-- l. 382 --><p>   The dash character will get converted to an underscore, so when you again try: 
</p>
   <pre id="fancyvrb22"><a id="x1-12148r1"></a><span>1</span><span>sudo&nbsp;lsmod&nbsp;|&nbsp;grep&nbsp;hello</span></pre>
<!-- l. 387 --><p>   You should now see your loaded module. It can be removed again with: 
</p>
   <pre id="fancyvrb23"><a id="x1-12151r1"></a><span>1</span><span>sudo&nbsp;rmmod&nbsp;hello_1</span></pre>
<!-- l. 392 --><p>   Notice that the dash was replaced by an underscore. To see what just happened in
the logs: 
                                                                  

                                                                  
</p>
   <pre id="fancyvrb24"><a id="x1-12154r1"></a><span>1</span><span>sudo&nbsp;journalctl&nbsp;--since&nbsp;</span><span id="textcolor41"><span>"1&nbsp;hour&nbsp;ago"</span></span><span>&nbsp;|&nbsp;grep&nbsp;kernel</span></pre>
<!-- l. 398 --><p>   You now know the basics of creating, compiling, installing and removing modules.
Now for more of a description of how this module works.
</p><!-- l. 401 --><p>   Kernel modules must have at least two functions: a "start" (initialization) function
called <code>  <span>init_module()</span>
</code> which is called when the module is <code>  <span>insmod</span>
</code>ed into the kernel, and an "end" (cleanup) function called
<code> <span>cleanup_module()</span>
</code> which is called just before it is removed from the kernel. Actually, things have
changed starting with kernel 2.3.13. You can now use whatever name you like for the
start and end functions of a module, and you will learn how to do this in Section <a href="#hello-and-goodbye">4.2<!-- tex4ht:ref: hello_n_goodbye  --></a>.
In fact, the new method is the preferred method. However, many people still use
<code> <span>init_module()</span>
</code> and <code>  <span>cleanup_module()</span>
</code> for their start and end functions.
</p><!-- l. 408 --><p>   Typically, <code>  <span>init_module()</span>
</code> either registers a handler for something with the kernel, or it replaces one of the kernel
functions with its own code (usually code to do something and then call the original function).
The <code>  <span>cleanup_module()</span>
</code> function is supposed to undo whatever
<code> <span>init_module()</span>
</code> did, so the module can be unloaded safely.
</p><!-- l. 411 --><p>   Lastly, every kernel module needs to include <span><span><span>&lt;linux/module.h&gt;</span></span></span>. We
needed to include <span><span><span>&lt;linux/printk.h&gt;</span></span></span> only for the macro expansion for the
<code> <span>pr_alert()</span>
</code> log level, which you’ll learn about in Section <a href="#x1-121662">2<!-- tex4ht:ref: sec:printk  --></a>.
</p><!-- l. 415 --><ol>
<li id="x1-12165x1">A point about coding style. Another thing which may not be immediately
     obvious  to  anyone  getting  started  with  kernel  programming  is  that
     indentation within your code should be using <span>tabs </span>and <span>not spaces</span>. It is
     one of the coding conventions of the kernel. You may not like it, but you’ll
     need to get used to it if you ever submit a patch upstream.
     </li>
<li id="x1-12167x2">Introducing print macros. <a id="x1-121662"></a>In the beginning there was <code>  <span>printk</span>
     </code>, usually followed by a priority such as <code>  <span>KERN_INFO</span>
                                                                  

                                                                  
     </code> or <code>  <span>KERN_DEBUG</span>
     </code>. More recently this can also be expressed in abbreviated form using a set of
     print macros, such as <code>  <span>pr_info</span>
     </code> and <code>  <span>pr_debug</span>
     </code>. This just saves some mindless keyboard bashing and looks a bit neater.
     They can be found within <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/printk.h">include/linux/printk.h</a>. Take time to read through
     the available priority macros.
     </li>
<li id="x1-12174x3">
     <!-- l. 429 --><p>About Compiling. Kernel modules need to be compiled a bit differently
     from  regular  userspace  apps.  Former  kernel  versions  required  us  to
     care much about these settings, which are usually stored in Makefiles.
     Although hierarchically organized, many redundant settings accumulated
     in sublevel Makefiles and made them large and rather difficult to maintain.
     Fortunately, there is a new way of doing these things, called kbuild, and
     the build process for external loadable modules is now fully integrated into
     the standard kernel build mechanism. To learn more on how to compile
     modules which are not part of the official kernel (such as all the examples
     you will find in this guide), see file <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/kbuild/modules.rst">Documentation/kbuild/modules.rst</a>.
     </p><!-- l. 436 --><p>Additional  details  about  Makefiles  for  kernel  modules  are  available  in
     <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/kbuild/makefiles.rst">Documentation/kbuild/makefiles.rst</a>. Be sure to read this and the related
     files before starting to hack Makefiles. It will probably save you lots of
     work.
     </p><!-- l. 438 --><blockquote>
         <!-- l. 439 --><p>Here is another exercise for the reader. See that comment above
         the return statement in <code>  <span>init_module()</span>
         </code>? Change the return value to something negative, recompile and
         load the module again. What happens?</p></blockquote>
     </li></ol>
<!-- l. 446 -->
   <h4 id="hello-and-goodbye"><span>4.2   </span> <a id="x1-130004.2"></a>Hello and Goodbye</h4>
<!-- l. 448 --><p>In early kernel versions you had to use the
                                                                  

                                                                  
<code> <span>init_module</span>
</code> and <code>  <span>cleanup_module</span>
</code> functions, as in the first hello world example, but these days you can name those anything you
want by using the <code>  <span>module_init</span>
</code> and <code>  <span>module_exit</span>
</code> macros. These macros are defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/module.h">include/linux/module.h</a>. The only requirement
is that your init and cleanup functions must be defined before calling the those
macros, otherwise you’ll get compilation errors. Here is an example of this
technique:
</p><!-- l. 1 -->
   <pre id="fancyvrb25"><a id="x1-13006r1"></a><span>1</span><span id="textcolor42"><span>/*</span></span> 
<a id="x1-13008r2"></a><span>2</span><span id="textcolor43"><span>&nbsp;*&nbsp;hello-2.c&nbsp;-&nbsp;Demonstrating&nbsp;the&nbsp;module_init()&nbsp;and&nbsp;module_exit()&nbsp;macros.</span></span> 
<a id="x1-13010r3"></a><span>3</span><span id="textcolor44"><span>&nbsp;*&nbsp;This&nbsp;is&nbsp;preferred&nbsp;over&nbsp;using&nbsp;init_module()&nbsp;and&nbsp;cleanup_module().</span></span> 
<a id="x1-13012r4"></a><span>4</span><span id="textcolor45"><span>&nbsp;*/</span></span> 
<a id="x1-13014r5"></a><span>5</span><span id="textcolor46"><span>#include</span></span><span>&nbsp;</span><span id="textcolor47"><span>&lt;linux/init.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;the&nbsp;macros&nbsp;*/</span></span> 
<a id="x1-13016r6"></a><span>6</span><span id="textcolor48"><span>#include</span></span><span>&nbsp;</span><span id="textcolor49"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Needed&nbsp;by&nbsp;all&nbsp;modules&nbsp;*/</span></span> 
<a id="x1-13018r7"></a><span>7</span><span id="textcolor50"><span>#include</span></span><span>&nbsp;</span><span id="textcolor51"><span>&lt;linux/printk.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;pr_info()&nbsp;*/</span></span> 
<a id="x1-13020r8"></a><span>8</span> 
<a id="x1-13022r9"></a><span>9</span><span id="textcolor52"><span>static</span></span><span>&nbsp;</span><span id="textcolor53"><span>int</span></span><span>&nbsp;__init&nbsp;hello_2_init(</span><span id="textcolor54"><span>void</span></span><span>)</span> 
<a id="x1-13024r10"></a><span>10</span><span>{</span> 
<a id="x1-13026r11"></a><span>11</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor55"><span>"Hello,&nbsp;world&nbsp;2</span></span><span id="textcolor56"><span>\n</span></span><span id="textcolor57"><span>"</span></span><span>);</span> 
<a id="x1-13028r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor58"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-13030r13"></a><span>13</span><span>}</span> 
<a id="x1-13032r14"></a><span>14</span> 
<a id="x1-13034r15"></a><span>15</span><span id="textcolor59"><span>static</span></span><span>&nbsp;</span><span id="textcolor60"><span>void</span></span><span>&nbsp;__exit&nbsp;hello_2_exit(</span><span id="textcolor61"><span>void</span></span><span>)</span> 
<a id="x1-13036r16"></a><span>16</span><span>{</span> 
<a id="x1-13038r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor62"><span>"Goodbye,&nbsp;world&nbsp;2</span></span><span id="textcolor63"><span>\n</span></span><span id="textcolor64"><span>"</span></span><span>);</span> 
<a id="x1-13040r18"></a><span>18</span><span>}</span> 
<a id="x1-13042r19"></a><span>19</span> 
<a id="x1-13044r20"></a><span>20</span><span>module_init(hello_2_init);</span> 
<a id="x1-13046r21"></a><span>21</span><span>module_exit(hello_2_exit);</span> 
<a id="x1-13048r22"></a><span>22</span> 
<a id="x1-13050r23"></a><span>23</span><span>MODULE_LICENSE(</span><span id="textcolor65"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 455 --><p>   So now we have two real kernel modules under our belt. Adding another module
is as simple as this:
</p><!-- l. 1 -->
   <pre id="fancyvrb26"><a id="x1-13062r1"></a><span>1</span><span>obj-m&nbsp;+=&nbsp;hello-1.o</span> 
<a id="x1-13064r2"></a><span>2</span><span>obj-m&nbsp;+=&nbsp;hello-2.o</span> 
<a id="x1-13066r3"></a><span>3</span> 
<a id="x1-13068r4"></a><span>4</span><span>PWD&nbsp;:=&nbsp;</span><span id="colorbox66"><span>$</span></span><span>(CURDIR)</span> 
<a id="x1-13070r5"></a><span>5</span> 
<a id="x1-13072r6"></a><span>6</span><span>all:</span> 
<a id="x1-13074r7"></a><span>7</span><span>&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;-C&nbsp;/lib/modules/</span><span id="colorbox67"><span>$</span></span><span>(shell&nbsp;uname&nbsp;-r)/build&nbsp;M=</span><span id="colorbox68"><span>$</span></span><span>(PWD)&nbsp;modules</span> 
<a id="x1-13076r8"></a><span>8</span> 
<a id="x1-13078r9"></a><span>9</span><span>clean:</span> 
<a id="x1-13080r10"></a><span>10</span><span>&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;-C&nbsp;/lib/modules/</span><span id="colorbox69"><span>$</span></span><span>(shell&nbsp;uname&nbsp;-r)/build&nbsp;M=</span><span id="colorbox70"><span>$</span></span><span>(PWD)&nbsp;clean</span></pre>
<!-- l. 470 --><p>   Now have a look at <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/drivers/char/Makefile">drivers/char/Makefile</a> for a real world example. As
you can see, some things got hardwired into the kernel (<span><span><span>obj-y</span></span></span>) but where
have all those <span><span><span>obj-m</span></span></span> gone? Those familiar with shell scripts will easily be
able to spot them. For those who are not, the <span><span><span>obj-$(CONFIG_FOO)</span></span></span> entries
you see everywhere expand into <span><span><span>obj-y</span></span></span> or <span><span><span>obj-m</span></span></span>, depending on whether the
<span><span><span>CONFIG_FOO</span></span></span> variable has been set to <span><span><span>y</span></span></span> or <span><span><span>m</span></span></span>. While we are at it, those were
exactly the kind of variables that you have set in the <span><span><span>.config</span></span></span> file in the
top-level directory of Linux kernel source tree, the last time when you said
<code> <span>make&nbsp;menuconfig</span>
</code> or something like that.
</p><!-- l. 476 -->
   <h4 id="the-init-and-exit-macros"><span>4.3   </span> <a id="x1-140004.3"></a>The __init and __exit Macros</h4>
<!-- l. 478 --><p>The <code>  <span>__init</span>
</code> macro causes the init function to be discarded and its memory freed once the init
function finishes for built-in drivers, but not loadable modules. If you think about
when the init function is invoked, this makes perfect sense.
</p><!-- l. 481 --><p>   There is also an <code>  <span>__initdata</span>
</code> which works similarly to <code>  <span>__init</span>
</code> but for init variables rather than functions.
</p><!-- l. 483 --><p>   The <code>  <span>__exit</span>
</code> macro causes the omission of the function when the module is built into the kernel, and
like <code>  <span>__init</span>
</code>, has no effect for loadable modules. Again, if you consider when the cleanup function
runs, this makes complete sense; built-in drivers do not need a cleanup function,
                                                                  

                                                                  
while loadable modules do.
</p><!-- l. 486 --><p>   These macros are defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/init.h">include/linux/init.h</a> and serve to free up kernel
memory. When you boot your kernel and see something like Freeing unused kernel
memory: 236k freed, this is precisely what the kernel is freeing.
</p><!-- l. 1 -->
   <pre id="fancyvrb27"><a id="x1-14007r1"></a><span>1</span><span id="textcolor71"><span>/*</span></span> 
<a id="x1-14009r2"></a><span>2</span><span id="textcolor72"><span>&nbsp;*&nbsp;hello-3.c&nbsp;-&nbsp;Illustrating&nbsp;the&nbsp;__init,&nbsp;__initdata&nbsp;and&nbsp;__exit&nbsp;macros.</span></span> 
<a id="x1-14011r3"></a><span>3</span><span id="textcolor73"><span>&nbsp;*/</span></span> 
<a id="x1-14013r4"></a><span>4</span><span id="textcolor74"><span>#include</span></span><span>&nbsp;</span><span id="textcolor75"><span>&lt;linux/init.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;the&nbsp;macros&nbsp;*/</span></span> 
<a id="x1-14015r5"></a><span>5</span><span id="textcolor76"><span>#include</span></span><span>&nbsp;</span><span id="textcolor77"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Needed&nbsp;by&nbsp;all&nbsp;modules&nbsp;*/</span></span> 
<a id="x1-14017r6"></a><span>6</span><span id="textcolor78"><span>#include</span></span><span>&nbsp;</span><span id="textcolor79"><span>&lt;linux/printk.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;pr_info()&nbsp;*/</span></span> 
<a id="x1-14019r7"></a><span>7</span> 
<a id="x1-14021r8"></a><span>8</span><span id="textcolor80"><span>static</span></span><span>&nbsp;</span><span id="textcolor81"><span>int</span></span><span>&nbsp;hello3_data&nbsp;__initdata&nbsp;=&nbsp;3;</span> 
<a id="x1-14023r9"></a><span>9</span> 
<a id="x1-14025r10"></a><span>10</span><span id="textcolor82"><span>static</span></span><span>&nbsp;</span><span id="textcolor83"><span>int</span></span><span>&nbsp;__init&nbsp;hello_3_init(</span><span id="textcolor84"><span>void</span></span><span>)</span> 
<a id="x1-14027r11"></a><span>11</span><span>{</span> 
<a id="x1-14029r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor85"><span>"Hello,&nbsp;world&nbsp;%d</span></span><span id="textcolor86"><span>\n</span></span><span id="textcolor87"><span>"</span></span><span>,&nbsp;hello3_data);</span> 
<a id="x1-14031r13"></a><span>13</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor88"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-14033r14"></a><span>14</span><span>}</span> 
<a id="x1-14035r15"></a><span>15</span> 
<a id="x1-14037r16"></a><span>16</span><span id="textcolor89"><span>static</span></span><span>&nbsp;</span><span id="textcolor90"><span>void</span></span><span>&nbsp;__exit&nbsp;hello_3_exit(</span><span id="textcolor91"><span>void</span></span><span>)</span> 
<a id="x1-14039r17"></a><span>17</span><span>{</span> 
<a id="x1-14041r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor92"><span>"Goodbye,&nbsp;world&nbsp;3</span></span><span id="textcolor93"><span>\n</span></span><span id="textcolor94"><span>"</span></span><span>);</span> 
<a id="x1-14043r19"></a><span>19</span><span>}</span> 
<a id="x1-14045r20"></a><span>20</span> 
<a id="x1-14047r21"></a><span>21</span><span>module_init(hello_3_init);</span> 
<a id="x1-14049r22"></a><span>22</span><span>module_exit(hello_3_exit);</span> 
<a id="x1-14051r23"></a><span>23</span> 
<a id="x1-14053r24"></a><span>24</span><span>MODULE_LICENSE(</span><span id="textcolor95"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 491 -->
   <h4 id="licensing-and-module-documentation"><span>4.4   </span> <a id="x1-150004.4"></a>Licensing and Module Documentation</h4>
<!-- l. 493 --><p>Honestly, who loads or even cares about proprietary modules? If you do then you
might have seen something like this:
                                                                  

                                                                  
</p>
   <pre id="verbatim-5">$&nbsp;sudo&nbsp;insmod&nbsp;xxxxxx.ko
loading&nbsp;out-of-tree&nbsp;module&nbsp;taints&nbsp;kernel.
module&nbsp;license&nbsp;'unspecified'&nbsp;taints&nbsp;kernel.
</pre>
<!-- l. 499 --><!-- l. 501 --><p>   You can use a few macros to indicate the license for your module. Some examples
are "GPL", "GPL v2", "GPL and additional rights", "Dual BSD/GPL", "Dual
MIT/GPL", "Dual MPL/GPL" and "Proprietary". They are defined within
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/module.h">include/linux/module.h</a>.
</p><!-- l. 505 --><p>   To reference what license you’re using a macro is available called
<code> <span>MODULE_LICENSE</span>
</code>. This and a few other macros describing the module are illustrated in the below
example.
</p><!-- l. 1 -->
   <pre id="fancyvrb28"><a id="x1-15003r1"></a><span>1</span><span id="textcolor96"><span>/*</span></span> 
<a id="x1-15005r2"></a><span>2</span><span id="textcolor97"><span>&nbsp;*&nbsp;hello-4.c&nbsp;-&nbsp;Demonstrates&nbsp;module&nbsp;documentation.</span></span> 
<a id="x1-15007r3"></a><span>3</span><span id="textcolor98"><span>&nbsp;*/</span></span> 
<a id="x1-15009r4"></a><span>4</span><span id="textcolor99"><span>#include</span></span><span>&nbsp;</span><span id="textcolor100"><span>&lt;linux/init.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;the&nbsp;macros&nbsp;*/</span></span> 
<a id="x1-15011r5"></a><span>5</span><span id="textcolor101"><span>#include</span></span><span>&nbsp;</span><span id="textcolor102"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Needed&nbsp;by&nbsp;all&nbsp;modules&nbsp;*/</span></span> 
<a id="x1-15013r6"></a><span>6</span><span id="textcolor103"><span>#include</span></span><span>&nbsp;</span><span id="textcolor104"><span>&lt;linux/printk.h&gt;&nbsp;/*&nbsp;Needed&nbsp;for&nbsp;pr_info()&nbsp;*/</span></span> 
<a id="x1-15015r7"></a><span>7</span> 
<a id="x1-15017r8"></a><span>8</span><span>MODULE_LICENSE(</span><span id="textcolor105"><span>"GPL"</span></span><span>);</span> 
<a id="x1-15019r9"></a><span>9</span><span>MODULE_AUTHOR(</span><span id="textcolor106"><span>"LKMPG"</span></span><span>);</span> 
<a id="x1-15021r10"></a><span>10</span><span>MODULE_DESCRIPTION(</span><span id="textcolor107"><span>"A&nbsp;sample&nbsp;driver"</span></span><span>);</span> 
<a id="x1-15023r11"></a><span>11</span> 
<a id="x1-15025r12"></a><span>12</span><span id="textcolor108"><span>static</span></span><span>&nbsp;</span><span id="textcolor109"><span>int</span></span><span>&nbsp;__init&nbsp;init_hello_4(</span><span id="textcolor110"><span>void</span></span><span>)</span> 
<a id="x1-15027r13"></a><span>13</span><span>{</span> 
<a id="x1-15029r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor111"><span>"Hello,&nbsp;world&nbsp;4</span></span><span id="textcolor112"><span>\n</span></span><span id="textcolor113"><span>"</span></span><span>);</span> 
<a id="x1-15031r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor114"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-15033r16"></a><span>16</span><span>}</span> 
<a id="x1-15035r17"></a><span>17</span> 
<a id="x1-15037r18"></a><span>18</span><span id="textcolor115"><span>static</span></span><span>&nbsp;</span><span id="textcolor116"><span>void</span></span><span>&nbsp;__exit&nbsp;cleanup_hello_4(</span><span id="textcolor117"><span>void</span></span><span>)</span> 
<a id="x1-15039r19"></a><span>19</span><span>{</span> 
<a id="x1-15041r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor118"><span>"Goodbye,&nbsp;world&nbsp;4</span></span><span id="textcolor119"><span>\n</span></span><span id="textcolor120"><span>"</span></span><span>);</span> 
<a id="x1-15043r21"></a><span>21</span><span>}</span> 
<a id="x1-15045r22"></a><span>22</span> 
<a id="x1-15047r23"></a><span>23</span><span>module_init(init_hello_4);</span> 
<a id="x1-15049r24"></a><span>24</span><span>module_exit(cleanup_hello_4);</span></pre>
<!-- l. 510 -->
   <h4 id="passing-command-line-arguments-to-a-module"><span>4.5   </span> <a id="x1-160004.5"></a>Passing Command Line Arguments to a Module</h4>
<!-- l. 512 --><p>Modules can take command line arguments, but not with the argc/argv you might be
used to.
</p><!-- l. 514 --><p>   To allow arguments to be passed to your module, declare the variables that will
take the values of the command line arguments as global and then use the
<code> <span>module_param()</span>
</code> macro, (defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/moduleparam.h">include/linux/moduleparam.h</a>) to set the mechanism up. At runtime,
<code> <span>insmod</span>
</code> will fill the variables with any command line arguments that are given, like
<code> <span>insmod&nbsp;mymodule.ko&nbsp;myvariable=5</span>
</code>. The variable declarations and macros should be placed at the beginning of the
module for clarity. The example code should clear up my admittedly lousy
explanation.
</p><!-- l. 519 --><p>   The <code>  <span>module_param()</span>
</code> macro takes 3 arguments: the name of the variable, its type and
permissions for the corresponding file in sysfs. Integer types can be signed
as usual or unsigned. If you’d like to use arrays of integers or strings see
<code> <span>module_param_array()</span>
</code> and <code>  <span>module_param_string()</span>
</code>.
</p><!-- l. 1 -->
   <pre id="fancyvrb29"><a id="x1-16010r1"></a><span>1</span><span id="textcolor121"><span>int</span></span><span>&nbsp;myint&nbsp;=&nbsp;3;</span> 
<a id="x1-16012r2"></a><span>2</span><span>module_param(myint,&nbsp;</span><span id="textcolor122"><span>int</span></span><span>,&nbsp;0);</span></pre>
<!-- l. 527 --><p>   Arrays are supported too, but things are a bit different now than they were in the
olden days. To keep track of the number of parameters you need to pass a pointer to
a count variable as third parameter. At your option, you could also ignore the count and
pass <code>  <span>NULL</span>
</code> instead. We show both possibilities here:
</p><!-- l. 1 -->
   <pre id="fancyvrb30"><a id="x1-16021r1"></a><span>1</span><span id="textcolor123"><span>int</span></span><span>&nbsp;myintarray[2];</span> 
<a id="x1-16023r2"></a><span>2</span><span>module_param_array(myintarray,&nbsp;</span><span id="textcolor124"><span>int</span></span><span>,&nbsp;NULL,&nbsp;0);&nbsp;</span><span id="textcolor125"><span>/*&nbsp;not&nbsp;interested&nbsp;in&nbsp;count&nbsp;*/</span></span> 
<a id="x1-16025r3"></a><span>3</span> 
<a id="x1-16027r4"></a><span>4</span><span id="textcolor126"><span>short</span></span><span>&nbsp;myshortarray[4];</span> 
<a id="x1-16029r5"></a><span>5</span><span id="textcolor127"><span>int</span></span><span>&nbsp;count;</span> 
<a id="x1-16031r6"></a><span>6</span><span>module_param_array(myshortarray,&nbsp;</span><span id="textcolor128"><span>short</span></span><span>,&nbsp;&amp;count,&nbsp;0);&nbsp;</span><span id="textcolor129"><span>/*&nbsp;put&nbsp;count&nbsp;into&nbsp;"count"&nbsp;variable&nbsp;*/</span></span></pre>
<!-- l. 540 --><p>   A good use for this is to have the module variable’s default values set, like a port
or IO address. If the variables contain the default values, then perform autodetection
(explained elsewhere). Otherwise, keep the current value. This will be made clear
later on.
</p><!-- l. 544 --><p>   Lastly, there is a macro function, <code>  <span>MODULE_PARM_DESC()</span>
</code>, that is used to document arguments that the module can take. It takes two
parameters: a variable name and a free form string describing that variable.
</p><!-- l. 1 -->
   <pre id="fancyvrb31"><a id="x1-16034r1"></a><span>1</span><span id="textcolor130"><span>/*</span></span> 
<a id="x1-16036r2"></a><span>2</span><span id="textcolor131"><span>&nbsp;*&nbsp;hello-5.c&nbsp;-&nbsp;Demonstrates&nbsp;command&nbsp;line&nbsp;argument&nbsp;passing&nbsp;to&nbsp;a&nbsp;module.</span></span> 
<a id="x1-16038r3"></a><span>3</span><span id="textcolor132"><span>&nbsp;*/</span></span> 
<a id="x1-16040r4"></a><span>4</span><span id="textcolor133"><span>#include</span></span><span>&nbsp;</span><span id="textcolor134"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-16042r5"></a><span>5</span><span id="textcolor135"><span>#include</span></span><span>&nbsp;</span><span id="textcolor136"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;for&nbsp;ARRAY_SIZE()&nbsp;*/</span></span> 
<a id="x1-16044r6"></a><span>6</span><span id="textcolor137"><span>#include</span></span><span>&nbsp;</span><span id="textcolor138"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-16046r7"></a><span>7</span><span id="textcolor139"><span>#include</span></span><span>&nbsp;</span><span id="textcolor140"><span>&lt;linux/moduleparam.h&gt;</span></span> 
<a id="x1-16048r8"></a><span>8</span><span id="textcolor141"><span>#include</span></span><span>&nbsp;</span><span id="textcolor142"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-16050r9"></a><span>9</span><span id="textcolor143"><span>#include</span></span><span>&nbsp;</span><span id="textcolor144"><span>&lt;linux/stat.h&gt;</span></span> 
<a id="x1-16052r10"></a><span>10</span> 
<a id="x1-16054r11"></a><span>11</span><span>MODULE_LICENSE(</span><span id="textcolor145"><span>"GPL"</span></span><span>);</span> 
<a id="x1-16056r12"></a><span>12</span> 
<a id="x1-16058r13"></a><span>13</span><span id="textcolor146"><span>static</span></span><span>&nbsp;</span><span id="textcolor147"><span>short</span></span><span>&nbsp;</span><span id="textcolor148"><span>int</span></span><span>&nbsp;myshort&nbsp;=&nbsp;1;</span> 
<a id="x1-16060r14"></a><span>14</span><span id="textcolor149"><span>static</span></span><span>&nbsp;</span><span id="textcolor150"><span>int</span></span><span>&nbsp;myint&nbsp;=&nbsp;420;</span> 
<a id="x1-16062r15"></a><span>15</span><span id="textcolor151"><span>static</span></span><span>&nbsp;</span><span id="textcolor152"><span>long</span></span><span>&nbsp;</span><span id="textcolor153"><span>int</span></span><span>&nbsp;mylong&nbsp;=&nbsp;9999;</span> 
<a id="x1-16064r16"></a><span>16</span><span id="textcolor154"><span>static</span></span><span>&nbsp;</span><span id="textcolor155"><span>char</span></span><span>&nbsp;*mystring&nbsp;=&nbsp;</span><span id="textcolor156"><span>"blah"</span></span><span>;</span> 
<a id="x1-16066r17"></a><span>17</span><span id="textcolor157"><span>static</span></span><span>&nbsp;</span><span id="textcolor158"><span>int</span></span><span>&nbsp;myintarray[2]&nbsp;=&nbsp;{&nbsp;420,&nbsp;420&nbsp;};</span> 
<a id="x1-16068r18"></a><span>18</span><span id="textcolor159"><span>static</span></span><span>&nbsp;</span><span id="textcolor160"><span>int</span></span><span>&nbsp;arr_argc&nbsp;=&nbsp;0;</span> 
<a id="x1-16070r19"></a><span>19</span> 
<a id="x1-16072r20"></a><span>20</span><span id="textcolor161"><span>/*&nbsp;module_param(foo,&nbsp;int,&nbsp;0000)</span></span> 
<a id="x1-16074r21"></a><span>21</span><span id="textcolor162"><span>&nbsp;*&nbsp;The&nbsp;first&nbsp;param&nbsp;is&nbsp;the&nbsp;parameter</span><span>'</span><span>s&nbsp;name.</span></span> 
<a id="x1-16076r22"></a><span>22</span><span id="textcolor163"><span>&nbsp;*&nbsp;The&nbsp;second&nbsp;param&nbsp;is&nbsp;its&nbsp;data&nbsp;type.</span></span> 
<a id="x1-16078r23"></a><span>23</span><span id="textcolor164"><span>&nbsp;*&nbsp;The&nbsp;final&nbsp;argument&nbsp;is&nbsp;the&nbsp;permissions&nbsp;bits,</span></span> 
<a id="x1-16080r24"></a><span>24</span><span id="textcolor165"><span>&nbsp;*&nbsp;for&nbsp;exposing&nbsp;parameters&nbsp;in&nbsp;sysfs&nbsp;(if&nbsp;non-zero)&nbsp;at&nbsp;a&nbsp;later&nbsp;stage.</span></span> 
<a id="x1-16082r25"></a><span>25</span><span id="textcolor166"><span>&nbsp;*/</span></span> 
<a id="x1-16084r26"></a><span>26</span><span>module_param(myshort,&nbsp;</span><span id="textcolor167"><span>short</span></span><span>,&nbsp;S_IRUSR&nbsp;|&nbsp;S_IWUSR&nbsp;|&nbsp;S_IRGRP&nbsp;|&nbsp;S_IWGRP);</span> 
<a id="x1-16086r27"></a><span>27</span><span>MODULE_PARM_DESC(myshort,&nbsp;</span><span id="textcolor168"><span>"A&nbsp;short&nbsp;integer"</span></span><span>);</span> 
<a id="x1-16088r28"></a><span>28</span><span>module_param(myint,&nbsp;</span><span id="textcolor169"><span>int</span></span><span>,&nbsp;S_IRUSR&nbsp;|&nbsp;S_IWUSR&nbsp;|&nbsp;S_IRGRP&nbsp;|&nbsp;S_IROTH);</span> 
<a id="x1-16090r29"></a><span>29</span><span>MODULE_PARM_DESC(myint,&nbsp;</span><span id="textcolor170"><span>"An&nbsp;integer"</span></span><span>);</span> 
<a id="x1-16092r30"></a><span>30</span><span>module_param(mylong,&nbsp;</span><span id="textcolor171"><span>long</span></span><span>,&nbsp;S_IRUSR);</span> 
<a id="x1-16094r31"></a><span>31</span><span>MODULE_PARM_DESC(mylong,&nbsp;</span><span id="textcolor172"><span>"A&nbsp;long&nbsp;integer"</span></span><span>);</span> 
<a id="x1-16096r32"></a><span>32</span><span>module_param(mystring,&nbsp;charp,&nbsp;0000);</span> 
<a id="x1-16098r33"></a><span>33</span><span>MODULE_PARM_DESC(mystring,&nbsp;</span><span id="textcolor173"><span>"A&nbsp;character&nbsp;string"</span></span><span>);</span> 
<a id="x1-16100r34"></a><span>34</span> 
<a id="x1-16102r35"></a><span>35</span><span id="textcolor174"><span>/*&nbsp;module_param_array(name,&nbsp;type,&nbsp;num,&nbsp;perm);</span></span> 
<a id="x1-16104r36"></a><span>36</span><span id="textcolor175"><span>&nbsp;*&nbsp;The&nbsp;first&nbsp;param&nbsp;is&nbsp;the&nbsp;parameter</span><span>'</span><span>s&nbsp;(in&nbsp;this&nbsp;case&nbsp;the&nbsp;array</span><span>'</span><span>s)&nbsp;name.</span></span> 
<a id="x1-16106r37"></a><span>37</span><span id="textcolor176"><span>&nbsp;*&nbsp;The&nbsp;second&nbsp;param&nbsp;is&nbsp;the&nbsp;data&nbsp;type&nbsp;of&nbsp;the&nbsp;elements&nbsp;of&nbsp;the&nbsp;array.</span></span> 
<a id="x1-16108r38"></a><span>38</span><span id="textcolor177"><span>&nbsp;*&nbsp;The&nbsp;third&nbsp;argument&nbsp;is&nbsp;a&nbsp;pointer&nbsp;to&nbsp;the&nbsp;variable&nbsp;that&nbsp;will&nbsp;store&nbsp;the&nbsp;number</span></span> 
<a id="x1-16110r39"></a><span>39</span><span id="textcolor178"><span>&nbsp;*&nbsp;of&nbsp;elements&nbsp;of&nbsp;the&nbsp;array&nbsp;initialized&nbsp;by&nbsp;the&nbsp;user&nbsp;at&nbsp;module&nbsp;loading&nbsp;time.</span></span> 
<a id="x1-16112r40"></a><span>40</span><span id="textcolor179"><span>&nbsp;*&nbsp;The&nbsp;fourth&nbsp;argument&nbsp;is&nbsp;the&nbsp;permission&nbsp;bits.</span></span> 
<a id="x1-16114r41"></a><span>41</span><span id="textcolor180"><span>&nbsp;*/</span></span> 
<a id="x1-16116r42"></a><span>42</span><span>module_param_array(myintarray,&nbsp;</span><span id="textcolor181"><span>int</span></span><span>,&nbsp;&amp;arr_argc,&nbsp;0000);</span> 
<a id="x1-16118r43"></a><span>43</span><span>MODULE_PARM_DESC(myintarray,&nbsp;</span><span id="textcolor182"><span>"An&nbsp;array&nbsp;of&nbsp;integers"</span></span><span>);</span> 
<a id="x1-16120r44"></a><span>44</span> 
<a id="x1-16122r45"></a><span>45</span><span id="textcolor183"><span>static</span></span><span>&nbsp;</span><span id="textcolor184"><span>int</span></span><span>&nbsp;__init&nbsp;hello_5_init(</span><span id="textcolor185"><span>void</span></span><span>)</span> 
<a id="x1-16124r46"></a><span>46</span><span>{</span> 
<a id="x1-16126r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor186"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-16128r48"></a><span>48</span> 
<a id="x1-16130r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor187"><span>"Hello,&nbsp;world&nbsp;5</span></span><span id="textcolor188"><span>\n</span></span><span id="textcolor189"><span>=============</span></span><span id="textcolor190"><span>\n</span></span><span id="textcolor191"><span>"</span></span><span>);</span> 
<a id="x1-16132r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor192"><span>"myshort&nbsp;is&nbsp;a&nbsp;short&nbsp;integer:&nbsp;%hd</span></span><span id="textcolor193"><span>\n</span></span><span id="textcolor194"><span>"</span></span><span>,&nbsp;myshort);</span> 
<a id="x1-16134r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor195"><span>"myint&nbsp;is&nbsp;an&nbsp;integer:&nbsp;%d</span></span><span id="textcolor196"><span>\n</span></span><span id="textcolor197"><span>"</span></span><span>,&nbsp;myint);</span> 
<a id="x1-16136r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor198"><span>"mylong&nbsp;is&nbsp;a&nbsp;long&nbsp;integer:&nbsp;%ld</span></span><span id="textcolor199"><span>\n</span></span><span id="textcolor200"><span>"</span></span><span>,&nbsp;mylong);</span> 
<a id="x1-16138r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor201"><span>"mystring&nbsp;is&nbsp;a&nbsp;string:&nbsp;%s</span></span><span id="textcolor202"><span>\n</span></span><span id="textcolor203"><span>"</span></span><span>,&nbsp;mystring);</span> 
<a id="x1-16140r54"></a><span>54</span> 
<a id="x1-16142r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor204"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;ARRAY_SIZE(myintarray);&nbsp;i++)</span> 
<a id="x1-16144r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor205"><span>"myintarray[%d]&nbsp;=&nbsp;%d</span></span><span id="textcolor206"><span>\n</span></span><span id="textcolor207"><span>"</span></span><span>,&nbsp;i,&nbsp;myintarray[i]);</span> 
<a id="x1-16146r57"></a><span>57</span> 
<a id="x1-16148r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor208"><span>"got&nbsp;%d&nbsp;arguments&nbsp;for&nbsp;myintarray.</span></span><span id="textcolor209"><span>\n</span></span><span id="textcolor210"><span>"</span></span><span>,&nbsp;arr_argc);</span> 
<a id="x1-16150r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor211"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-16152r60"></a><span>60</span><span>}</span> 
<a id="x1-16154r61"></a><span>61</span> 
<a id="x1-16156r62"></a><span>62</span><span id="textcolor212"><span>static</span></span><span>&nbsp;</span><span id="textcolor213"><span>void</span></span><span>&nbsp;__exit&nbsp;hello_5_exit(</span><span id="textcolor214"><span>void</span></span><span>)</span> 
<a id="x1-16158r63"></a><span>63</span><span>{</span> 
<a id="x1-16160r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor215"><span>"Goodbye,&nbsp;world&nbsp;5</span></span><span id="textcolor216"><span>\n</span></span><span id="textcolor217"><span>"</span></span><span>);</span> 
<a id="x1-16162r65"></a><span>65</span><span>}</span> 
<a id="x1-16164r66"></a><span>66</span> 
<a id="x1-16166r67"></a><span>67</span><span>module_init(hello_5_init);</span> 
<a id="x1-16168r68"></a><span>68</span><span>module_exit(hello_5_exit);</span></pre>
<!-- l. 549 --><p>   It is recommended to experiment with the following code:
                                                                  

                                                                  
</p>
   <pre id="verbatim-6">$&nbsp;sudo&nbsp;insmod&nbsp;hello-5.ko&nbsp;mystring="bebop"&nbsp;myintarray=-1
$&nbsp;sudo&nbsp;dmesg&nbsp;-t&nbsp;|&nbsp;tail&nbsp;-7
myshort&nbsp;is&nbsp;a&nbsp;short&nbsp;integer:&nbsp;1
myint&nbsp;is&nbsp;an&nbsp;integer:&nbsp;420
mylong&nbsp;is&nbsp;a&nbsp;long&nbsp;integer:&nbsp;9999
mystring&nbsp;is&nbsp;a&nbsp;string:&nbsp;bebop
myintarray[0]&nbsp;=&nbsp;-1
myintarray[1]&nbsp;=&nbsp;420
got&nbsp;1&nbsp;arguments&nbsp;for&nbsp;myintarray.

$&nbsp;sudo&nbsp;rmmod&nbsp;hello-5
$&nbsp;sudo&nbsp;dmesg&nbsp;-t&nbsp;|&nbsp;tail&nbsp;-1
Goodbye,&nbsp;world&nbsp;5

$&nbsp;sudo&nbsp;insmod&nbsp;hello-5.ko&nbsp;mystring="supercalifragilisticexpialidocious"&nbsp;myintarray=-1,-1
$&nbsp;sudo&nbsp;dmesg&nbsp;-t&nbsp;|&nbsp;tail&nbsp;-7
myshort&nbsp;is&nbsp;a&nbsp;short&nbsp;integer:&nbsp;1
myint&nbsp;is&nbsp;an&nbsp;integer:&nbsp;420
mylong&nbsp;is&nbsp;a&nbsp;long&nbsp;integer:&nbsp;9999
mystring&nbsp;is&nbsp;a&nbsp;string:&nbsp;supercalifragilisticexpialidocious
myintarray[0]&nbsp;=&nbsp;-1
myintarray[1]&nbsp;=&nbsp;-1
got&nbsp;2&nbsp;arguments&nbsp;for&nbsp;myintarray.

$&nbsp;sudo&nbsp;rmmod&nbsp;hello-5
$&nbsp;sudo&nbsp;dmesg&nbsp;-t&nbsp;|&nbsp;tail&nbsp;-1
Goodbye,&nbsp;world&nbsp;5

$&nbsp;sudo&nbsp;insmod&nbsp;hello-5.ko&nbsp;mylong=hello
insmod:&nbsp;ERROR:&nbsp;could&nbsp;not&nbsp;insert&nbsp;module&nbsp;hello-5.ko:&nbsp;Invalid&nbsp;parameters
</pre>
<!-- l. 581 --><!-- l. 583 -->
   <h4 id="modules-spanning-multiple-files"><span>4.6   </span> <a id="x1-170004.6"></a>Modules Spanning Multiple Files</h4>
<!-- l. 585 --><p>Sometimes it makes sense to divide a kernel module between several source
files.
</p><!-- l. 587 --><p>   Here is an example of such a kernel module. 
</p>
                                                                  

                                                                  
   <pre id="fancyvrb32"><a id="x1-17002r1"></a><span>1</span><span id="textcolor218"><span>/*</span></span> 
<a id="x1-17004r2"></a><span>2</span><span id="textcolor219"><span>&nbsp;*&nbsp;start.c&nbsp;-&nbsp;Illustration&nbsp;of&nbsp;multi&nbsp;filed&nbsp;modules</span></span> 
<a id="x1-17006r3"></a><span>3</span><span id="textcolor220"><span>&nbsp;*/</span></span> 
<a id="x1-17008r4"></a><span>4</span> 
<a id="x1-17010r5"></a><span>5</span><span id="textcolor221"><span>#include</span></span><span>&nbsp;</span><span id="textcolor222"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;We&nbsp;are&nbsp;doing&nbsp;kernel&nbsp;work&nbsp;*/</span></span> 
<a id="x1-17012r6"></a><span>6</span><span id="textcolor223"><span>#include</span></span><span>&nbsp;</span><span id="textcolor224"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Specifically,&nbsp;a&nbsp;module&nbsp;*/</span></span> 
<a id="x1-17014r7"></a><span>7</span> 
<a id="x1-17016r8"></a><span>8</span><span id="textcolor225"><span>int</span></span><span>&nbsp;init_module(</span><span id="textcolor226"><span>void</span></span><span>)</span> 
<a id="x1-17018r9"></a><span>9</span><span>{</span> 
<a id="x1-17020r10"></a><span>10</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor227"><span>"Hello,&nbsp;world&nbsp;-&nbsp;this&nbsp;is&nbsp;the&nbsp;kernel&nbsp;speaking</span></span><span id="textcolor228"><span>\n</span></span><span id="textcolor229"><span>"</span></span><span>);</span> 
<a id="x1-17022r11"></a><span>11</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor230"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-17024r12"></a><span>12</span><span>}</span> 
<a id="x1-17026r13"></a><span>13</span> 
<a id="x1-17028r14"></a><span>14</span><span>MODULE_LICENSE(</span><span id="textcolor231"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 590 --><p>   The next file: 
</p>
   <pre id="fancyvrb33"><a id="x1-17030r1"></a><span>1</span><span id="textcolor232"><span>/*</span></span> 
<a id="x1-17032r2"></a><span>2</span><span id="textcolor233"><span>&nbsp;*&nbsp;stop.c&nbsp;-&nbsp;Illustration&nbsp;of&nbsp;multi&nbsp;filed&nbsp;modules</span></span> 
<a id="x1-17034r3"></a><span>3</span><span id="textcolor234"><span>&nbsp;*/</span></span> 
<a id="x1-17036r4"></a><span>4</span> 
<a id="x1-17038r5"></a><span>5</span><span id="textcolor235"><span>#include</span></span><span>&nbsp;</span><span id="textcolor236"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;We&nbsp;are&nbsp;doing&nbsp;kernel&nbsp;work&nbsp;*/</span></span> 
<a id="x1-17040r6"></a><span>6</span><span id="textcolor237"><span>#include</span></span><span>&nbsp;</span><span id="textcolor238"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Specifically,&nbsp;a&nbsp;module&nbsp;&nbsp;*/</span></span> 
<a id="x1-17042r7"></a><span>7</span> 
<a id="x1-17044r8"></a><span>8</span><span id="textcolor239"><span>void</span></span><span>&nbsp;cleanup_module(</span><span id="textcolor240"><span>void</span></span><span>)</span> 
<a id="x1-17046r9"></a><span>9</span><span>{</span> 
<a id="x1-17048r10"></a><span>10</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor241"><span>"Short&nbsp;is&nbsp;the&nbsp;life&nbsp;of&nbsp;a&nbsp;kernel&nbsp;module</span></span><span id="textcolor242"><span>\n</span></span><span id="textcolor243"><span>"</span></span><span>);</span> 
<a id="x1-17050r11"></a><span>11</span><span>}</span> 
<a id="x1-17052r12"></a><span>12</span> 
<a id="x1-17054r13"></a><span>13</span><span>MODULE_LICENSE(</span><span id="textcolor244"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 593 --><p>   And finally, the makefile:
</p><!-- l. 1 -->
   <pre id="fancyvrb34"><a id="x1-17071r1"></a><span>1</span><span>obj-m&nbsp;+=&nbsp;hello-1.o</span> 
<a id="x1-17073r2"></a><span>2</span><span>obj-m&nbsp;+=&nbsp;hello-2.o</span> 
<a id="x1-17075r3"></a><span>3</span><span>obj-m&nbsp;+=&nbsp;hello-3.o</span> 
<a id="x1-17077r4"></a><span>4</span><span>obj-m&nbsp;+=&nbsp;hello-4.o</span> 
<a id="x1-17079r5"></a><span>5</span><span>obj-m&nbsp;+=&nbsp;hello-5.o</span> 
<a id="x1-17081r6"></a><span>6</span><span>obj-m&nbsp;+=&nbsp;startstop.o</span> 
<a id="x1-17083r7"></a><span>7</span><span>startstop-objs&nbsp;:=&nbsp;start.o&nbsp;stop.o</span> 
<a id="x1-17085r8"></a><span>8</span> 
<a id="x1-17087r9"></a><span>9</span><span>PWD&nbsp;:=&nbsp;</span><span id="colorbox245"><span>$</span></span><span>(CURDIR)</span> 
<a id="x1-17089r10"></a><span>10</span> 
<a id="x1-17091r11"></a><span>11</span><span>all:</span> 
<a id="x1-17093r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;-C&nbsp;/lib/modules/</span><span id="colorbox246"><span>$</span></span><span>(shell&nbsp;uname&nbsp;-r)/build&nbsp;M=</span><span id="colorbox247"><span>$</span></span><span>(PWD)&nbsp;modules</span> 
<a id="x1-17095r13"></a><span>13</span> 
<a id="x1-17097r14"></a><span>14</span><span>clean:</span> 
<a id="x1-17099r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;-C&nbsp;/lib/modules/</span><span id="colorbox248"><span>$</span></span><span>(shell&nbsp;uname&nbsp;-r)/build&nbsp;M=</span><span id="colorbox249"><span>$</span></span><span>(PWD)&nbsp;clean</span></pre>
<!-- l. 613 --><p>   This is the complete makefile for all the examples we have seen so far. The first
five lines are nothing special, but for the last example we will need two lines.
First we invent an object name for our combined module, second we tell
<code> <span>make</span>
</code> what object files are part of that module.
</p><!-- l. 617 -->
   <h4 id="building-modules-for-a-precompiled-kernel"><span>4.7   </span> <a id="x1-180004.7"></a>Building modules for a precompiled kernel</h4>
<!-- l. 619 --><p>Obviously, we strongly suggest you to recompile your kernel, so that you can enable
a number of useful debugging features, such as forced module unloading
(<code>  <span>MODULE_FORCE_UNLOAD</span>
</code>): when this option is enabled, you can force the kernel to unload a module even when it believes
it is unsafe, via a <code>  <span>sudo&nbsp;rmmod&nbsp;-f&nbsp;module</span>
</code> command. This option can save you a lot of time and a number of reboots during
the development of a module. If you do not want to recompile your kernel then you
should consider running the examples within a test distribution on a virtual machine.
If you mess anything up then you can easily reboot or restore the virtual machine
(VM).
</p><!-- l. 624 --><p>   There are a number of cases in which you may want to load your module into a
precompiled running kernel, such as the ones shipped with common Linux
distributions, or a kernel you have compiled in the past. In certain circumstances you
could require to compile and insert a module into a running kernel which you are not
allowed to recompile, or on a machine that you prefer not to reboot. If you
can’t think of a case that will force you to use modules for a precompiled
kernel you might want to skip this and treat the rest of this chapter as a big
footnote.
</p><!-- l. 628 --><p>   Now, if you just install a kernel source tree, use it to compile your kernel module
and you try to insert your module into the kernel, in most cases you would obtain an
error as follows:
                                                                  

                                                                  
</p>
   <pre id="verbatim-7">insmod:&nbsp;ERROR:&nbsp;could&nbsp;not&nbsp;insert&nbsp;module&nbsp;poet.ko:&nbsp;Invalid&nbsp;module&nbsp;format
</pre>
<!-- l. 632 --><!-- l. 634 --><p>   Less cryptic information is logged to the systemd journal:
                                                                  

                                                                  
</p>
   <pre id="verbatim-8">kernel:&nbsp;poet:&nbsp;disagrees&nbsp;about&nbsp;version&nbsp;of&nbsp;symbol&nbsp;module_layout
</pre>
<!-- l. 638 --><!-- l. 640 --><p>   In other words, your kernel refuses to accept your module because version strings
(more precisely, <span>version magic</span>, see <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/vermagic.h">include/linux/vermagic.h</a>) do not match. Incidentally,
version magic strings are stored in the module object in the form of a static string, starting
with <code>  <span>vermagic:</span>
</code>. Version data are inserted in your module when it is linked against the <span><span><span>kernel/module.o</span></span></span>
file. To inspect version magics and other strings stored in a given module, issue the
command <code>  <span>modinfo&nbsp;module.ko</span>
</code>:
                                                                  

                                                                  
</p>
   <pre id="verbatim-9">$&nbsp;modinfo&nbsp;hello-4.ko
description:&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;sample&nbsp;driver
author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LKMPG
license:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GPL
srcversion:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B2AA7FBFCC2C39AED665382
depends:
retpoline:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y
name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hello_4
vermagic:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.4.0-70-generic&nbsp;SMP&nbsp;mod_unload&nbsp;modversions
</pre>
<!-- l. 655 --><!-- l. 657 --><p>   To overcome this problem we could resort to the <span><span><span>--force-vermagic</span></span></span> option,
but this solution is potentially unsafe, and unquestionably unacceptable
in production modules. Consequently, we want to compile our module in
an environment which was identical to the one in which our precompiled
kernel was built. How to do this, is the subject of the remainder of this
chapter.
</p><!-- l. 661 --><p>   First of all, make sure that a kernel source tree is available, having exactly the same
version as your current kernel. Then, find the configuration file which was used to
compile your precompiled kernel. Usually, this is available in your current <span><span><span>boot</span></span></span> directory,
under a name like <span><span><span>config-5.14.x</span></span></span>. You may just want to copy it to your kernel source
tree: <code>  <span>cp&nbsp;/boot/config-</span><span id="textcolor250"><span>`</span></span><span>uname&nbsp;-r</span><span id="textcolor251"><span>`</span></span><span>&nbsp;.config</span>
</code>.
</p><!-- l. 666 --><p>   Let’s focus again on the previous error message: a closer look at the version magic
strings suggests that, even with two configuration files which are exactly the same, a
slight difference in the version magic could be possible, and it is sufficient to prevent
insertion of the module into the kernel. That slight difference, namely the
custom string which appears in the module’s version magic and not in the
kernel’s one, is due to a modification with respect to the original, in the
makefile that some distributions include. Then, examine your <span><span><span>Makefile</span></span></span>,
and make sure that the specified version information matches exactly the
one used for your current kernel. For example, your makefile could start as
follows:
                                                                  

                                                                  
</p>
   <pre id="verbatim-10">VERSION&nbsp;=&nbsp;5
PATCHLEVEL&nbsp;=&nbsp;14
SUBLEVEL&nbsp;=&nbsp;0
EXTRAVERSION&nbsp;=&nbsp;-rc2
</pre>
<!-- l. 676 --><!-- l. 678 --><p>   In this case, you need to restore the value of symbol <span>EXTRAVERSION </span>to
<span>-rc2</span>. We suggest keeping a backup copy of the makefile used to compile your kernel
available in <span><span><span>/lib/modules/5.14.0-rc2/build</span></span></span>. A simple command as following
should suffice. 
</p>
   <pre id="fancyvrb35"><a id="x1-18008r1"></a><span>1</span><span>cp&nbsp;/lib/modules/</span><span id="textcolor252"><span>`</span></span><span>uname&nbsp;-r</span><span id="textcolor253"><span>`</span></span><span>/build/Makefile&nbsp;linux-</span><span id="textcolor254"><span>`</span></span><span>uname&nbsp;-r</span><span id="textcolor255"><span>`</span></span></pre>
<!-- l. 684 --><p>Here <code>  <span>linux-</span><span id="textcolor256"><span>`</span></span><span>uname&nbsp;-r</span><span id="textcolor257"><span>`</span></span>
</code> is the Linux kernel source you are attempting to build.
</p><!-- l. 686 --><p>   Now, please run <code>  <span>make</span>
</code> to update configuration and version headers and objects:
                                                                  

                                                                  
</p>
   <pre id="verbatim-11">$&nbsp;make
&nbsp;&nbsp;SYNC&nbsp;&nbsp;&nbsp;&nbsp;include/config/auto.conf.cmd
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/basic/fixdep
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/conf.o
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/confdata.o
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/expr.o
&nbsp;&nbsp;LEX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scripts/kconfig/lexer.lex.c
&nbsp;&nbsp;YACC&nbsp;&nbsp;&nbsp;&nbsp;scripts/kconfig/parser.tab.[ch]
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/preprocess.o
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/symbol.o
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/util.o
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/lexer.lex.o
&nbsp;&nbsp;HOSTCC&nbsp;&nbsp;scripts/kconfig/parser.tab.o
&nbsp;&nbsp;HOSTLD&nbsp;&nbsp;scripts/kconfig/conf
</pre>
<!-- l. 703 --><!-- l. 705 --><p>   If you do not desire to actually compile the kernel, you can interrupt the build
process (CTRL-C) just after the SPLIT line, because at that time, the files you need
are ready. Now you can turn back to the directory of your module and compile it: It
will be built exactly according to your current kernel settings, and it will load into it
without any errors.
</p><!-- l. 708 -->
   <h3 id="preliminaries"><span>5   </span> <a id="x1-190005"></a>Preliminaries</h3>
<!-- l. 709 -->
   <h4 id="how-modules-begin-and-end"><span>5.1   </span> <a id="x1-200005.1"></a>How modules begin and end</h4>
<!-- l. 711 --><p>A typical program starts with a <code>  <span>main()</span>
</code> function, executes a series of instructions, and terminates after completing these instructions.
Kernel modules, however, follow a different pattern. A module always begins with either
the <code>  <span>init_module</span>
</code> function or a function designated by the
<code> <span>module_init</span>
</code> call. This function acts as the module’s entry point, informing the kernel of the
module’s functionalities and preparing the kernel to utilize the module’s functions
when necessary. After performing these tasks, the entry function returns, and the
module remains inactive until the kernel requires its code.
                                                                  

                                                                  
</p><!-- l. 719 --><p>   All modules conclude by invoking either
<code> <span>cleanup_module</span>
</code> or a function specified through the <code>  <span>module_exit</span>
</code> call. This serves as the module’s exit function, reversing the actions of the entry
function by unregistering the previously registered functionalities.
</p><!-- l. 722 --><p>   It is mandatory for every module to have both an entry and an exit function. While
there are multiple methods to define these functions, the terms “entry function” and
“exit function” are generally used. However, they may occasionally be referred to as
<code> <span>init_module</span>
</code> and <code>  <span>cleanup_module</span>
</code>, which are understood to mean the same.
</p><!-- l. 727 -->
   <h4 id="functions-available-to-modules"><span>5.2   </span> <a id="x1-210005.2"></a>Functions available to modules</h4>
<!-- l. 729 --><p>Programmers use functions they do not define all the time. A prime example of this
is <code>  <span>printf()</span>
</code>. You use these library functions which are provided by the standard C
library, libc. The definitions for these functions do not actually enter
your program until the linking stage, which ensures that the code (for
<code> <span>printf()</span>
</code> for example) is available, and fixes the call instruction to point to that
code.
</p><!-- l. 734 --><p>   Kernel modules are different here, too. In the hello world
example, you might have noticed that we used a function,
<code> <span>pr_info()</span>
</code> but did not include a standard I/O library. That is because
modules are object files whose symbols get resolved upon running
<code> <span>insmod</span>
</code> or <code>  <span>modprobe</span>
</code>. The definition for the symbols comes from the kernel itself; the only external
functions you can use are the ones provided by the kernel. If you’re curious about
what symbols have been exported by your kernel, take a look at <span><span><span>/proc/kallsyms</span></span></span>.
</p><!-- l. 739 --><p>   One point to keep in mind is the difference between library functions and system
calls. Library functions are higher level, run completely in user space and
provide a more convenient interface for the programmer to the functions
that do the real work — system calls. System calls run in kernel mode on
the user’s behalf and are provided by the kernel itself. The library function
<code> <span>printf()</span>
</code> may look like a very general printing function, but all it really does is format the
data into strings and write the string data using the low-level system call
<code> <span>write()</span>
</code>, which then sends the data to standard output.
</p><!-- l. 743 --><p>   Would you like to see what system calls are made by
                                                                  

                                                                  
<code> <span>printf()</span>
</code>? It is easy! Compile the following program:
</p><!-- l. 1 -->
   <pre id="fancyvrb36"><a id="x1-21017r1"></a><span>1</span><span id="textcolor258"><span>#include</span></span><span>&nbsp;</span><span id="textcolor259"><span>&lt;stdio.h&gt;</span></span> 
<a id="x1-21019r2"></a><span>2</span> 
<a id="x1-21021r3"></a><span>3</span><span id="textcolor260"><span>int</span></span><span>&nbsp;main(</span><span id="textcolor261"><span>void</span></span><span>)</span> 
<a id="x1-21023r4"></a><span>4</span><span>{</span> 
<a id="x1-21025r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor262"><span>"hello"</span></span><span>);</span> 
<a id="x1-21027r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor263"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-21029r7"></a><span>7</span><span>}</span></pre>
<!-- l. 757 --><p>   with <code>  <span>gcc&nbsp;-Wall&nbsp;-o&nbsp;hello&nbsp;hello.c</span>
</code>. Run the executable with <code>  <span>strace&nbsp;./hello</span>
</code>. Are you impressed? Every line you see corresponds to a system call. <a href="https://strace.io/">strace</a> is a
handy program that gives you details about what system calls a program is
making, including which call is made, what its arguments are and what it
returns. It is an invaluable tool for figuring out things like what files a program
is trying to access. Towards the end, you will see a line which looks like
<code> <span>write(1,&nbsp;</span><span id="textcolor264"><span>"hello"</span></span><span>,&nbsp;5hello)</span>
</code>. There it is. The face behind the <code>  <span>printf()</span>
</code> mask. You may not be familiar with write, since most people use library functions for file
I/O (like <code>  <span>fopen</span>
</code>, <code>  <span>fputs</span>
</code>, <code>  <span>fclose</span>
</code>). If that is the case, try looking at man 2 write. The 2nd man section is devoted to system
calls (like <code>  <span>kill()</span>
</code> and <code>  <span>read()</span>
</code>). The 3rd man section is devoted to library calls, which you would probably be more familiar
with (like <code>  <span>cosh()</span>
</code> and <code>  <span>random()</span>
</code>).
</p><!-- l. 771 --><p>   You can even write modules to replace the kernel’s system calls, which we will do
shortly. Crackers often make use of this sort of thing for backdoors or trojans, but
you can write your own modules to do more benign things, like have the kernel
write Tee hee, that tickles! every time someone tries to delete a file on your
system.
</p><!-- l. 774 -->
   <h4 id="user-space-vs-kernel-space"><span>5.3   </span> <a id="x1-220005.3"></a>User Space vs Kernel Space</h4>
<!-- l. 776 --><p>The kernel primarily manages access to resources, be it a video card, hard drive, or
memory. Programs frequently vie for the same resources. For instance, as a document
is saved, updatedb might commence updating the locate database. Sessions in editors
like vim and processes like updatedb can simultaneously utilize the hard drive. The
kernel’s role is to maintain order, ensuring that users do not access resources
indiscriminately.
</p><!-- l. 782 --><p>   To manage this, CPUs operate in different modes, each offering varying levels of
system control. The Intel 80386 architecture, for example, featured four such modes,
known as rings. Unix, however, utilizes only two of these rings: the highest ring (ring
0, also known as “supervisor mode”, where all actions are permissible) and the lowest
                                                                  

                                                                  
ring, referred to as “user mode”.
</p><!-- l. 787 --><p>   Recall the discussion about library functions vs system calls. Typically, you use a
library function in user mode. The library function calls one or more system calls,
and these system calls execute on the library function’s behalf, but do so in
supervisor mode since they are part of the kernel itself. Once the system call
completes its task, it returns and execution gets transferred back to user
mode.
</p><!-- l. 792 -->
   <h4 id="name-space"><span>5.4   </span> <a id="x1-230005.4"></a>Name Space</h4>
<!-- l. 794 --><p>When you write a small C program, you use variables which are convenient and make
sense to the reader. If, on the other hand, you are writing routines which will be part
of a bigger problem, any global variables you have are part of a community of other
peoples’ global variables; some of the variable names can clash. When a program has
lots of global variables which aren’t meaningful enough to be distinguished, you get
namespace pollution. In large projects, effort must be made to remember reserved
names, and to find ways to develop a scheme for naming unique variable names and
symbols.
</p><!-- l. 799 --><p>   When writing kernel code, even the smallest module will be linked against the
entire kernel, so this is definitely an issue. The best way to deal with this is to declare
all your variables as static and to use a well-defined prefix for your symbols. By
convention, all kernel prefixes are lowercase. If you do not want to declare everything
as static, another option is to declare a symbol table and register it with the kernel.
We will get to this later.
</p><!-- l. 804 --><p>   The file <span><span><span>/proc/kallsyms</span></span></span> holds all the symbols that the kernel knows about and
which are therefore accessible to your modules since they share the kernel’s
codespace.
</p><!-- l. 806 -->
   <h4 id="code-space"><span>5.5   </span> <a id="x1-240005.5"></a>Code space</h4>
<!-- l. 808 --><p>Memory management is a very complicated subject and the majority of O’Reilly’s
<a href="https://www.oreilly.com/library/view/understanding-the-linux/0596005652/">Understanding The Linux Kernel</a> exclusively covers memory management!
We are not setting out to be experts on memory managements, but we do
need to know a couple of facts to even begin worrying about writing real
modules.
</p><!-- l. 811 --><p>   If you have not thought about what a segfault really means, you may be surprised
to hear that pointers do not actually point to memory locations. Not real
ones, anyway. When a process is created, the kernel sets aside a portion of
real physical memory and hands it to the process to use for its executing
code, variables, stack, heap and other things which a computer scientist
would know about. This memory begins with 0x00000000 and extends up to
                                                                  

                                                                  
whatever it needs to be. Since the memory space for any two processes do not
overlap, every process that can access a memory address, say 0xbffff978, would
be accessing a different location in real physical memory! The processes
would be accessing an index named 0xbffff978 which points to some kind of
offset into the region of memory set aside for that particular process. For
the most part, a process like our Hello, World program can’t access the
space of another process, although there are ways which we will talk about
later.
</p><!-- l. 818 --><p>   The kernel has its own space of memory as well. Since a module is code which
can be dynamically inserted and removed in the kernel (as opposed to a
semi-autonomous object), it shares the kernel’s codespace rather than having its own.
Therefore, if your module segfaults, the kernel segfaults. And if you start writing
over data because of an off-by-one error, then you’re trampling on kernel
data (or code). This is even worse than it sounds, so try your best to be
careful.
</p><!-- l. 823 --><p>   It should be noted that the aforementioned discussion applies to any operating
system utilizing a monolithic kernel. This concept differs slightly from <span>“building all
</span><span>your modules into the kernel”</span>, although the underlying principle is similar. In
contrast, there are microkernels, where modules are allocated their own code space.
Two notable examples of microkernels include the <a href="https://www.gnu.org/software/hurd/">GNU Hurd</a> and the <a href="https://fuchsia.dev/fuchsia-src/concepts/kernel">Zircon kernel</a>
of Google’s Fuchsia.
</p><!-- l. 829 -->
   <h4 id="device-drivers"><span>5.6   </span> <a id="x1-250005.6"></a>Device Drivers</h4>
<!-- l. 831 --><p>One class of module is the device driver, which provides functionality for hardware
like a serial port. On Unix, each piece of hardware is represented by a file located in
<span><span><span>/dev</span></span></span> named a device file which provides the means to communicate with the
hardware. The device driver provides the communication on behalf of a
user program. So the es1370.ko sound card device driver might connect the
<span><span><span>/dev/sound</span></span></span> device file to the Ensoniq IS1370 sound card. A userspace program like
mp3blaster can use <span><span><span>/dev/sound</span></span></span> without ever knowing what kind of sound card is
installed.
</p><!-- l. 838 --><p>   Let’s look at some device files. Here are device files which represent the first three
partitions on the primary master IDE hard drive:
                                                                  

                                                                  
</p>
   <pre id="verbatim-12">$&nbsp;ls&nbsp;-l&nbsp;/dev/hda[1-3]
brw-rw----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;disk&nbsp;&nbsp;3,&nbsp;1&nbsp;Jul&nbsp;&nbsp;5&nbsp;&nbsp;2000&nbsp;/dev/hda1
brw-rw----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;disk&nbsp;&nbsp;3,&nbsp;2&nbsp;Jul&nbsp;&nbsp;5&nbsp;&nbsp;2000&nbsp;/dev/hda2
brw-rw----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;disk&nbsp;&nbsp;3,&nbsp;3&nbsp;Jul&nbsp;&nbsp;5&nbsp;&nbsp;2000&nbsp;/dev/hda3
</pre>
<!-- l. 847 --><!-- l. 849 --><p>   Notice the column of numbers separated by a comma. The first number is called
the device’s major number. The second number is the minor number. The major
number tells you which driver is used to access the hardware. Each driver is assigned
a unique major number; all device files with the same major number are controlled
by the same driver. All the above major numbers are 3, because they’re all controlled
by the same driver.
</p><!-- l. 856 --><p>   The minor number is used by the driver to distinguish between the various
hardware it controls. Returning to the example above, although all three devices are
handled by the same driver they have unique minor numbers because the driver sees
them as being different pieces of hardware.
</p><!-- l. 859 --><p>   Devices are divided into two types: character devices and block devices. The
difference is that block devices have a buffer for requests, so they can choose the best
order in which to respond to the requests. This is important in the case of storage
devices, where it is faster to read or write sectors which are close to each
other, rather than those which are further apart. Another difference is that
block devices can only accept input and return output in blocks (whose size
can vary according to the device), whereas character devices are allowed
to use as many or as few bytes as they like. Most devices in the world are
character, because they don’t need this type of buffering, and they don’t
operate with a fixed block size. You can tell whether a device file is for a block
device or a character device by looking at the first character in the output of
<code> <span>ls&nbsp;-l</span>
</code>. If it is ‘b’ then it is a block device, and if it is ‘c’ then it is a character device. The
devices you see above are block devices. Here are some character devices (the serial
ports):
                                                                  

                                                                  
</p>
   <pre id="verbatim-13">crw-rw----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;dial&nbsp;4,&nbsp;64&nbsp;Feb&nbsp;18&nbsp;23:34&nbsp;/dev/ttyS0
crw-r-----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;dial&nbsp;4,&nbsp;65&nbsp;Nov&nbsp;17&nbsp;10:26&nbsp;/dev/ttyS1
crw-rw----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;dial&nbsp;4,&nbsp;66&nbsp;Jul&nbsp;&nbsp;5&nbsp;&nbsp;2000&nbsp;/dev/ttyS2
crw-rw----&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;dial&nbsp;4,&nbsp;67&nbsp;Jul&nbsp;&nbsp;5&nbsp;&nbsp;2000&nbsp;/dev/ttyS3
</pre>
<!-- l. 873 --><!-- l. 875 --><p>   If you want to see which major numbers have been assigned, you can look at
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/admin-guide/devices.txt">Documentation/admin-guide/devices.txt</a>.
</p><!-- l. 877 --><p>   When the system was installed, all of those device files were created by the
<code> <span>mknod</span>
</code> command. To create a new char device named <span><span><span>coffee</span></span></span> with major/minor number 12 and 2,
simply do <code>  <span>mknod&nbsp;/dev/coffee&nbsp;c&nbsp;12&nbsp;2</span>
</code>. You do not have to put your device files into <span><span><span>/dev</span></span></span>, but it is done by convention.
Linus put his device files in <span><span><span>/dev</span></span></span>, and so should you. However, when creating a
device file for testing purposes, it is probably OK to place it in your working
directory where you compile the kernel module. Just be sure to put it in the right
place when you’re done writing the device driver.
</p><!-- l. 884 --><p>   A few final points, although implicit in the previous discussion, are worth stating
explicitly for clarity. When a device file is accessed, the kernel utilizes the file’s major
number to identify the appropriate driver for handling the access. This indicates that
the kernel does not necessarily rely on or need to be aware of the minor number. It is
the driver that concerns itself with the minor number, using it to differentiate
between various pieces of hardware.
</p><!-- l. 889 --><p>   It is important to note that when referring to <span>“hardware”</span>, the term is used in a
slightly more abstract sense than just a physical PCI card that can be held in hand.
Consider the following two device files:
                                                                  

                                                                  
</p>
   <pre id="verbatim-14">$&nbsp;ls&nbsp;-l&nbsp;/dev/sda&nbsp;/dev/sdb
brw-rw----&nbsp;1&nbsp;root&nbsp;disk&nbsp;8,&nbsp;&nbsp;0&nbsp;Jan&nbsp;&nbsp;3&nbsp;09:02&nbsp;/dev/sda
brw-rw----&nbsp;1&nbsp;root&nbsp;disk&nbsp;8,&nbsp;16&nbsp;Jan&nbsp;&nbsp;3&nbsp;09:02&nbsp;/dev/sdb
</pre>
<!-- l. 897 --><!-- l. 899 --><p>   By now you can look at these two device files and know instantly that they are
block devices and are handled by same driver (block major 8). Sometimes two device
files with the same major but different minor number can actually represent the same
piece of physical hardware. So just be aware that the word “hardware” in our
discussion can mean something very abstract.
</p><!-- l. 903 -->
   <h3 id="character-device-drivers"><span>6   </span> <a id="x1-260006"></a>Character Device drivers</h3>
<!-- l. 905 -->
   <h4 id="the-fileoperations-structure"><span>6.1   </span> <a id="x1-270006.1"></a>The file_operations Structure</h4>
<!-- l. 907 --><p>The <code>  <span>file_operations</span>
</code> structure is defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h">include/linux/fs.h</a>, and holds pointers to functions defined by
the driver that perform various operations on the device. Each field of the structure
corresponds to the address of some function defined by the driver to handle a
requested operation.
</p><!-- l. 910 --><p>   For example, every character driver needs to define a function that reads from the
device. The <code>  <span>file_operations</span>
</code> structure holds the address of the module’s function that performs that operation.
Here is what the definition looks like for kernel 5.4:
</p><!-- l. 1 -->
   <pre id="fancyvrb37"><a id="x1-27042r1"></a><span>1</span><span id="textcolor265"><span>struct</span></span><span>&nbsp;file_operations&nbsp;{</span> 
<a id="x1-27044r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor266"><span>struct</span></span><span>&nbsp;module&nbsp;*owner;</span> 
<a id="x1-27046r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;(*llseek)&nbsp;(</span><span id="textcolor267"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;loff_t,&nbsp;</span><span id="textcolor268"><span>int</span></span><span>);</span> 
<a id="x1-27048r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor269"><span>ssize_t</span></span><span>&nbsp;(*read)&nbsp;(</span><span id="textcolor270"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor271"><span>char</span></span><span>&nbsp;__user&nbsp;*,&nbsp;</span><span id="textcolor272"><span>size_t</span></span><span>,&nbsp;loff_t&nbsp;*);</span> 
<a id="x1-27050r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor273"><span>ssize_t</span></span><span>&nbsp;(*write)&nbsp;(</span><span id="textcolor274"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor275"><span>const</span></span><span>&nbsp;</span><span id="textcolor276"><span>char</span></span><span>&nbsp;__user&nbsp;*,&nbsp;</span><span id="textcolor277"><span>size_t</span></span><span>,&nbsp;loff_t&nbsp;*);</span> 
<a id="x1-27052r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor278"><span>ssize_t</span></span><span>&nbsp;(*read_iter)&nbsp;(</span><span id="textcolor279"><span>struct</span></span><span>&nbsp;kiocb&nbsp;*,&nbsp;</span><span id="textcolor280"><span>struct</span></span><span>&nbsp;iov_iter&nbsp;*);</span> 
<a id="x1-27054r7"></a><span>7</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor281"><span>ssize_t</span></span><span>&nbsp;(*write_iter)&nbsp;(</span><span id="textcolor282"><span>struct</span></span><span>&nbsp;kiocb&nbsp;*,&nbsp;</span><span id="textcolor283"><span>struct</span></span><span>&nbsp;iov_iter&nbsp;*);</span> 
<a id="x1-27056r8"></a><span>8</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor284"><span>int</span></span><span>&nbsp;(*iopoll)(</span><span id="textcolor285"><span>struct</span></span><span>&nbsp;kiocb&nbsp;*kiocb,&nbsp;</span><span id="textcolor286"><span>bool</span></span><span>&nbsp;spin);</span> 
<a id="x1-27058r9"></a><span>9</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor287"><span>int</span></span><span>&nbsp;(*iterate)&nbsp;(</span><span id="textcolor288"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor289"><span>struct</span></span><span>&nbsp;dir_context&nbsp;*);</span> 
<a id="x1-27060r10"></a><span>10</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor290"><span>int</span></span><span>&nbsp;(*iterate_shared)&nbsp;(</span><span id="textcolor291"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor292"><span>struct</span></span><span>&nbsp;dir_context&nbsp;*);</span> 
<a id="x1-27062r11"></a><span>11</span><span>&nbsp;&nbsp;&nbsp;&nbsp;__poll_t&nbsp;(*poll)&nbsp;(</span><span id="textcolor293"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor294"><span>struct</span></span><span>&nbsp;poll_table_struct&nbsp;*);</span> 
<a id="x1-27064r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor295"><span>long</span></span><span>&nbsp;(*unlocked_ioctl)&nbsp;(</span><span id="textcolor296"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor297"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor298"><span>int</span></span><span>,&nbsp;</span><span id="textcolor299"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor300"><span>long</span></span><span>);</span> 
<a id="x1-27066r13"></a><span>13</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor301"><span>long</span></span><span>&nbsp;(*compat_ioctl)&nbsp;(</span><span id="textcolor302"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor303"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor304"><span>int</span></span><span>,&nbsp;</span><span id="textcolor305"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor306"><span>long</span></span><span>);</span> 
<a id="x1-27068r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor307"><span>int</span></span><span>&nbsp;(*mmap)&nbsp;(</span><span id="textcolor308"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor309"><span>struct</span></span><span>&nbsp;vm_area_struct&nbsp;*);</span> 
<a id="x1-27070r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor310"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor311"><span>long</span></span><span>&nbsp;mmap_supported_flags;</span> 
<a id="x1-27072r16"></a><span>16</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor312"><span>int</span></span><span>&nbsp;(*open)&nbsp;(</span><span id="textcolor313"><span>struct</span></span><span>&nbsp;inode&nbsp;*,&nbsp;</span><span id="textcolor314"><span>struct</span></span><span>&nbsp;file&nbsp;*);</span> 
<a id="x1-27074r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor315"><span>int</span></span><span>&nbsp;(*flush)&nbsp;(</span><span id="textcolor316"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;fl_owner_t&nbsp;id);</span> 
<a id="x1-27076r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor317"><span>int</span></span><span>&nbsp;(*release)&nbsp;(</span><span id="textcolor318"><span>struct</span></span><span>&nbsp;inode&nbsp;*,&nbsp;</span><span id="textcolor319"><span>struct</span></span><span>&nbsp;file&nbsp;*);</span> 
<a id="x1-27078r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor320"><span>int</span></span><span>&nbsp;(*fsync)&nbsp;(</span><span id="textcolor321"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;loff_t,&nbsp;loff_t,&nbsp;</span><span id="textcolor322"><span>int</span></span><span>&nbsp;datasync);</span> 
<a id="x1-27080r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor323"><span>int</span></span><span>&nbsp;(*fasync)&nbsp;(</span><span id="textcolor324"><span>int</span></span><span>,&nbsp;</span><span id="textcolor325"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor326"><span>int</span></span><span>);</span> 
<a id="x1-27082r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor327"><span>int</span></span><span>&nbsp;(*lock)&nbsp;(</span><span id="textcolor328"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor329"><span>int</span></span><span>,&nbsp;</span><span id="textcolor330"><span>struct</span></span><span>&nbsp;file_lock&nbsp;*);</span> 
<a id="x1-27084r22"></a><span>22</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor331"><span>ssize_t</span></span><span>&nbsp;(*sendpage)&nbsp;(</span><span id="textcolor332"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor333"><span>struct</span></span><span>&nbsp;page&nbsp;*,&nbsp;</span><span id="textcolor334"><span>int</span></span><span>,&nbsp;</span><span id="textcolor335"><span>size_t</span></span><span>,&nbsp;loff_t&nbsp;*,&nbsp;</span><span id="textcolor336"><span>int</span></span><span>);</span> 
<a id="x1-27086r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor337"><span>unsigned</span></span><span>&nbsp;long&nbsp;(*get_unmapped_area)(</span><span id="textcolor338"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor339"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor340"><span>long</span></span><span>,&nbsp;</span><span id="textcolor341"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor342"><span>long</span></span><span>,&nbsp;</span><span id="textcolor343"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor344"><span>long</span></span><span>,&nbsp;</span><span id="textcolor345"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor346"><span>long</span></span><span>);</span> 
<a id="x1-27088r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor347"><span>int</span></span><span>&nbsp;(*check_flags)(</span><span id="textcolor348"><span>int</span></span><span>);</span> 
<a id="x1-27090r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor349"><span>int</span></span><span>&nbsp;(*flock)&nbsp;(</span><span id="textcolor350"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor351"><span>int</span></span><span>,&nbsp;</span><span id="textcolor352"><span>struct</span></span><span>&nbsp;file_lock&nbsp;*);</span> 
<a id="x1-27092r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor353"><span>ssize_t</span></span><span>&nbsp;(*splice_write)(</span><span id="textcolor354"><span>struct</span></span><span>&nbsp;pipe_inode_info&nbsp;*,&nbsp;</span><span id="textcolor355"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;loff_t&nbsp;*,&nbsp;</span><span id="textcolor356"><span>size_t</span></span><span>,&nbsp;</span><span id="textcolor357"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor358"><span>int</span></span><span>);</span> 
<a id="x1-27094r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor359"><span>ssize_t</span></span><span>&nbsp;(*splice_read)(</span><span id="textcolor360"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;loff_t&nbsp;*,&nbsp;</span><span id="textcolor361"><span>struct</span></span><span>&nbsp;pipe_inode_info&nbsp;*,&nbsp;</span><span id="textcolor362"><span>size_t</span></span><span>,&nbsp;</span><span id="textcolor363"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor364"><span>int</span></span><span>);</span> 
<a id="x1-27096r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor365"><span>int</span></span><span>&nbsp;(*setlease)(</span><span id="textcolor366"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor367"><span>long</span></span><span>,&nbsp;</span><span id="textcolor368"><span>struct</span></span><span>&nbsp;file_lock&nbsp;**,&nbsp;</span><span id="textcolor369"><span>void</span></span><span>&nbsp;**);</span> 
<a id="x1-27098r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor370"><span>long</span></span><span>&nbsp;(*fallocate)(</span><span id="textcolor371"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor372"><span>int</span></span><span>&nbsp;mode,&nbsp;loff_t&nbsp;offset,</span> 
<a id="x1-27100r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;len);</span> 
<a id="x1-27102r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor373"><span>void</span></span><span>&nbsp;(*show_fdinfo)(</span><span id="textcolor374"><span>struct</span></span><span>&nbsp;seq_file&nbsp;*m,&nbsp;</span><span id="textcolor375"><span>struct</span></span><span>&nbsp;file&nbsp;*f);</span> 
<a id="x1-27104r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor376"><span>ssize_t</span></span><span>&nbsp;(*copy_file_range)(</span><span id="textcolor377"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;loff_t,&nbsp;</span><span id="textcolor378"><span>struct</span></span><span>&nbsp;file&nbsp;*,</span> 
<a id="x1-27106r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t,&nbsp;</span><span id="textcolor379"><span>size_t</span></span><span>,&nbsp;</span><span id="textcolor380"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor381"><span>int</span></span><span>);</span> 
<a id="x1-27108r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;(*remap_file_range)(</span><span id="textcolor382"><span>struct</span></span><span>&nbsp;file&nbsp;*file_in,&nbsp;loff_t&nbsp;pos_in,</span> 
<a id="x1-27110r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor383"><span>struct</span></span><span>&nbsp;file&nbsp;*file_out,&nbsp;loff_t&nbsp;pos_out,</span> 
<a id="x1-27112r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;len,&nbsp;</span><span id="textcolor384"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor385"><span>int</span></span><span>&nbsp;remap_flags);</span> 
<a id="x1-27114r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor386"><span>int</span></span><span>&nbsp;(*fadvise)(</span><span id="textcolor387"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;loff_t,&nbsp;loff_t,&nbsp;</span><span id="textcolor388"><span>int</span></span><span>);</span> 
<a id="x1-27116r38"></a><span>38</span><span>}&nbsp;__randomize_layout;</span></pre>
<!-- l. 955 --><p>   Some operations are not implemented by a driver. For example, a driver that handles
a video card will not need to read from a directory structure. The corresponding entries
in the <code>  <span>file_operations</span>
</code> structure should be set to <code>  <span>NULL</span>
</code>.
</p><!-- l. 959 --><p>   There is a gcc extension that makes assigning to this structure more convenient.
You will see it in modern drivers, and may catch you by surprise. This is what the
new way of assigning to the structure looks like:
</p><!-- l. 1 -->
   <pre id="fancyvrb38"><a id="x1-27126r1"></a><span>1</span><span id="textcolor389"><span>struct</span></span><span>&nbsp;file_operations&nbsp;fops&nbsp;=&nbsp;{</span> 
<a id="x1-27128r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;read:&nbsp;device_read,</span> 
<a id="x1-27130r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;write:&nbsp;device_write,</span> 
<a id="x1-27132r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;open:&nbsp;device_open,</span> 
<a id="x1-27134r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;release:&nbsp;device_release</span> 
<a id="x1-27136r6"></a><span>6</span><span>};</span></pre>
<!-- l. 972 --><p>   However, there is also a C99 way of assigning to elements of a structure,
<a href="https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html">designated initializers</a>, and this is definitely preferred over using the GNU extension.
You should use this syntax in case someone wants to port your driver. It will help
with compatibility:
</p><!-- l. 1 -->
   <pre id="fancyvrb39"><a id="x1-27144r1"></a><span>1</span><span id="textcolor390"><span>struct</span></span><span>&nbsp;file_operations&nbsp;fops&nbsp;=&nbsp;{</span> 
<a id="x1-27146r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;device_read,</span> 
<a id="x1-27148r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;device_write,</span> 
<a id="x1-27150r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;device_open,</span> 
<a id="x1-27152r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;device_release</span> 
<a id="x1-27154r6"></a><span>6</span><span>};</span></pre>
<!-- l. 985 --><p>   The meaning is clear, and you should be aware that any member of
the structure which you do not explicitly assign will be initialized to
<code> <span>NULL</span>
</code> by gcc.
</p><!-- l. 987 --><p>   An instance of <code>  <span id="textcolor391"><span>struct</span></span><span>&nbsp;file_operations</span>
</code> containing pointers to functions that are used to implement
<code> <span>read</span>
</code>, <code>  <span>write</span>
</code>, <code>  <span>open</span>
</code>, … system calls is commonly named <code>  <span>fops</span>
</code>.
</p><!-- l. 989 --><p>   Since Linux v3.14, the read, write and seek operations are guaranteed for thread-safe by
using the <code>  <span>f_pos</span>
</code> specific lock, which makes the file position update to become the mutual
exclusion. So, we can safely implement those operations without unnecessary
locking.
</p><!-- l. 992 --><p>   Additionally, since Linux v5.6, the <code>  <span>proc_ops</span>
</code> structure was introduced to replace the use of the
<code> <span>file_operations</span>
</code> structure when registering proc handlers. See more information in the <a href="#the-procops-structure">7.1<!-- tex4ht:ref: sec:proc_ops  --></a>
section.
</p><!-- l. 995 -->
   <h4 id="the-file-structure"><span>6.2   </span> <a id="x1-280006.2"></a>The file structure</h4>
<!-- l. 998 --><p>Each device is represented in the kernel by a file structure, which is defined
in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h">include/linux/fs.h</a>. Be aware that a file is a kernel level structure and
never appears in a user space program. It is not the same thing as a
<code> <span id="textcolor392"><span>FILE</span></span>
</code>, which is defined by glibc and would never appear in a kernel space
function. Also, its name is a bit misleading; it represents an abstract open
‘file’, not a file on a disk, which is represented by a structure named
<code> <span>inode</span>
</code>.
                                                                  

                                                                  
</p><!-- l. 1003 --><p>   An instance of struct file is commonly named
<code> <span>filp</span>
</code>. You’ll also see it referred to as a struct file object. Resist the temptation.
</p><!-- l. 1007 --><p>   Go ahead and look at the definition of file. Most of the entries you see, like struct
dentry are not used by device drivers, and you can ignore them. This is because
drivers do not fill file directly; they only use structures contained in file which are
created elsewhere.
</p><!-- l. 1011 -->
   <h4 id="registering-a-device"><span>6.3   </span> <a id="x1-290006.3"></a>Registering A Device</h4>
<!-- l. 1013 --><p>As discussed earlier, char devices are accessed through device files, usually located in
<span><span><span>/dev</span></span></span>. This is by convention. When writing a driver, it is OK to put the
device file in your current directory. Just make sure you place it in <span><span><span>/dev</span></span></span> for a
production driver. The major number tells you which driver handles which
device file. The minor number is used only by the driver itself to differentiate
which device it is operating on, just in case the driver handles more than one
device.
</p><!-- l. 1019 --><p>   Adding a driver to your system means registering it with the kernel. This is synonymous
with assigning it a major number during the module’s initialization. You do this by
using the <code>  <span>register_chrdev</span>
</code> function, defined by <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h">include/linux/fs.h</a>.
</p><!-- l. 1 -->
   <pre id="fancyvrb40"><a id="x1-29004r1"></a><span>1</span><span id="textcolor393"><span>int</span></span><span>&nbsp;register_chrdev(</span><span id="textcolor394"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor395"><span>int</span></span><span>&nbsp;major,&nbsp;</span><span id="textcolor396"><span>const</span></span><span>&nbsp;</span><span id="textcolor397"><span>char</span></span><span>&nbsp;*name,&nbsp;</span><span id="textcolor398"><span>struct</span></span><span>&nbsp;file_operations&nbsp;*fops);</span></pre>
<!-- l. 1027 --><p>   Where unsigned int major is the major number you want to request,
<code> <span id="textcolor399"><span>const</span></span><span>&nbsp;</span><span id="textcolor400"><span>char</span></span><span>&nbsp;*name</span>
</code> is the name of the device as it will appear in <span><span><span>/proc/devices</span></span></span> and
<code> <span id="textcolor401"><span>struct</span></span><span>&nbsp;file_operations&nbsp;*fops</span>
</code> is a pointer to the <code>  <span>file_operations</span>
</code> table for your driver. A negative return value means the
registration failed. Note that we didn’t pass the minor number to
<code> <span>register_chrdev</span>
</code>. That is because the kernel doesn’t care about the minor number; only our driver
uses it.
</p><!-- l. 1031 --><p>   Now the question is, how do you get a major number without hijacking
one that’s already in use? The easiest way would be to look through
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/admin-guide/devices.txt">Documentation/admin-guide/devices.txt</a> and pick an unused one. That is a bad way
of doing things because you will never be sure if the number you picked will be
assigned later. The answer is that you can ask the kernel to assign you a dynamic
major number.
</p><!-- l. 1036 --><p>   If you pass a major number of 0 to <code>  <span>register_chrdev</span>
</code>, the return value will be the dynamically allocated major number. The
downside is that you can not make a device file in advance, since you do not
                                                                  

                                                                  
know what the major number will be. There are a couple of ways to do
this. First, the driver itself can print the newly assigned number and we
can make the device file by hand. Second, the newly registered device will
have an entry in <span><span><span>/proc/devices</span></span></span>, and we can either make the device file by
hand or write a shell script to read the file in and make the device file. The
third method is that we can have our driver make the device file using the
<code> <span>device_create</span>
</code> function after a successful registration and
<code> <span>device_destroy</span>
</code> during the call to <code>  <span>cleanup_module</span>
</code>.
</p><!-- l. 1043 --><p>   However, <code>  <span>register_chrdev()</span>
</code> would occupy a range of minor numbers associated with the given major. The
recommended way to reduce waste for char device registration is using cdev
interface.
</p><!-- l. 1046 --><p>   The newer interface completes the char device registration in two distinct steps.
First, we should register a range of device numbers, which can be completed with
<code> <span>register_chrdev_region</span>
</code> or <code>  <span>alloc_chrdev_region</span>
</code>.
</p><!-- l. 1 -->
   <pre id="fancyvrb41"><a id="x1-29019r1"></a><span>1</span><span id="textcolor402"><span>int</span></span><span>&nbsp;register_chrdev_region(</span><span id="textcolor403"><span>dev_t</span></span><span>&nbsp;from,&nbsp;</span><span id="textcolor404"><span>unsigned</span></span><span>&nbsp;count,&nbsp;</span><span id="textcolor405"><span>const</span></span><span>&nbsp;</span><span id="textcolor406"><span>char</span></span><span>&nbsp;*name);</span> 
<a id="x1-29021r2"></a><span>2</span><span id="textcolor407"><span>int</span></span><span>&nbsp;alloc_chrdev_region(</span><span id="textcolor408"><span>dev_t</span></span><span>&nbsp;*dev,&nbsp;</span><span id="textcolor409"><span>unsigned</span></span><span>&nbsp;baseminor,&nbsp;</span><span id="textcolor410"><span>unsigned</span></span><span>&nbsp;count,&nbsp;</span><span id="textcolor411"><span>const</span></span><span>&nbsp;</span><span id="textcolor412"><span>char</span></span><span>&nbsp;*name);</span></pre>
<!-- l. 1054 --><p>   The choice between two different functions depends on
whether you know the major numbers for your device. Using
<code> <span>register_chrdev_region</span>
</code> if you know the device major number and
<code> <span>alloc_chrdev_region</span>
</code> if you would like to allocate a dynamically-allocated major number.
</p><!-- l. 1057 --><p>   Second, we should initialize the data structure
<code> <span id="textcolor413"><span>struct</span></span><span>&nbsp;cdev</span>
</code> for our char device and associate it with the device numbers. To initialize the
<code> <span id="textcolor414"><span>struct</span></span><span>&nbsp;cdev</span>
</code>, we can achieve by the similar sequence of the following codes.
</p><!-- l. 1 -->
   <pre id="fancyvrb42"><a id="x1-29029r1"></a><span>1</span><span id="textcolor415"><span>struct</span></span><span>&nbsp;cdev&nbsp;*my_dev&nbsp;=&nbsp;cdev_alloc();</span> 
<a id="x1-29031r2"></a><span>2</span><span>my_cdev-&gt;ops&nbsp;=&nbsp;&amp;my_fops;</span></pre>
<!-- l. 1065 --><p>   However, the common usage pattern will embed the
<code> <span id="textcolor416"><span>struct</span></span><span>&nbsp;cdev</span>
</code> within a device-specific structure of your own. In this case, we’ll need
<code> <span>cdev_init</span>
</code> for the initialization.
</p><!-- l. 1 -->
   <pre id="fancyvrb43"><a id="x1-29036r1"></a><span>1</span><span id="textcolor417"><span>void</span></span><span>&nbsp;cdev_init(</span><span id="textcolor418"><span>struct</span></span><span>&nbsp;cdev&nbsp;*cdev,&nbsp;</span><span id="textcolor419"><span>const</span></span><span>&nbsp;</span><span id="textcolor420"><span>struct</span></span><span>&nbsp;file_operations&nbsp;*fops);</span></pre>
                                                                  

                                                                  
<!-- l. 1072 --><p>   Once we finish the initialization, we can add the char device to the system by using
the <code>  <span>cdev_add</span>
</code>.
</p><!-- l. 1 -->
   <pre id="fancyvrb44"><a id="x1-29040r1"></a><span>1</span><span id="textcolor421"><span>int</span></span><span>&nbsp;cdev_add(</span><span id="textcolor422"><span>struct</span></span><span>&nbsp;cdev&nbsp;*p,&nbsp;</span><span id="textcolor423"><span>dev_t</span></span><span>&nbsp;dev,&nbsp;</span><span id="textcolor424"><span>unsigned</span></span><span>&nbsp;count);</span></pre>
<!-- l. 1078 --><p>   To find an example using the interface, you can see <span><span><span>ioctl.c</span></span></span> described in section
<a href="#talking-to-device-files">9<!-- tex4ht:ref: sec:device_files  --></a>.
</p><!-- l. 1080 -->
   <h4 id="unregistering-a-device"><span>6.4   </span> <a id="x1-300006.4"></a>Unregistering A Device</h4>
<!-- l. 1082 --><p>We can not allow the kernel module to be
<code> <span>rmmod</span>
</code>’ed whenever root feels like it. If the device file is opened by a process and then we
remove the kernel module, using the file would cause a call to the memory location
where the appropriate function (read/write) used to be. If we are lucky, no
other code was loaded there, and we’ll get an ugly error message. If we are
unlucky, another kernel module was loaded into the same location, which
means a jump into the middle of another function within the kernel. The
results of this would be impossible to predict, but they can not be very
positive.
</p><!-- l. 1088 --><p>   Normally, when you do not want to allow something, you return an error code
(a negative number) from the function which is supposed to do it. With
<code> <span>cleanup_module</span>
</code> that’s impossible because it is a void function. However, there is a counter
which keeps track of how many processes are using your module. You
can see what its value is by looking at the 3rd field with the command
<code> <span>cat&nbsp;/proc/modules</span>
</code> or <code>  <span>sudo&nbsp;lsmod</span>
</code>. If this number isn’t zero, <code>  <span>rmmod</span>
</code> will fail. Note that you do not have to check the counter within
<code> <span>cleanup_module</span>
</code> because the check will be performed for you by the system call
<code> <span>sys_delete_module</span>
</code>, defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/syscalls.h">include/linux/syscalls.h</a>. You should not use this counter directly, but
there are functions defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/module.h">include/linux/module.h</a> which let you increase,
decrease and display this counter:
</p>
     <ul>
     <li><code>  <span>try_module_get(THIS_MODULE)</span>
     </code>: Increment the reference count of current module.
     </li>
     <li><code>  <span>module_put(THIS_MODULE)</span>
     </code>: Decrement the reference count of current module.
     </li>
     <li><code>  <span>module_refcount(THIS_MODULE)</span>
     </code>: Return the value of reference count of current module.</li></ul>
<!-- l. 1102 --><p>   It is important to keep the counter accurate; if you ever do lose track of the
correct usage count, you will never be able to unload the module; it’s now reboot
time, boys and girls. This is bound to happen to you sooner or later during a
module’s development.
</p><!-- l. 1105 -->
   <h4 id="chardevc"><span>6.5   </span> <a id="x1-310006.5"></a>chardev.c</h4>
<!-- l. 1107 --><p>The next code sample creates a char driver named <span><span><span>chardev</span></span></span>. You can dump its device
file.
</p><!-- l. 1 -->
   <pre id="fancyvrb45"><a id="x1-31003r1"></a><span>1</span><span>cat&nbsp;/proc/devices</span></pre>
<!-- l. 1114 --><p>   (or open the file with a program) and the driver will put the number of times the
device file has been read from into the file. We do not support writing to the file (like
<code> <span>echo&nbsp;</span><span id="textcolor425"><span>"hi"</span></span><span>&nbsp;&gt;&nbsp;/dev/hello</span>
</code>), but catch these attempts and tell the user that the operation is not supported.
Don’t worry if you don’t see what we do with the data we read into the buffer; we
don’t do much with it. We simply read in the data and print a message
acknowledging that we received it.
</p><!-- l. 1119 --><p>   In the multiple-threaded environment, without any protection, concurrent access
to the same memory may lead to the race condition, and will not preserve the
performance. In the kernel module, this problem may happen due to multiple
instances accessing the shared resources. Therefore, a solution is to enforce the
exclusive access. We use atomic Compare-And-Swap (CAS) to maintain the states,
<code> <span>CDEV_NOT_USED</span>
</code> and <code>  <span>CDEV_EXCLUSIVE_OPEN</span>
                                                                  

                                                                  
</code>, to determine whether the file is currently opened by someone or not. CAS compares
the contents of a memory location with the expected value and, only if they are the
same, modifies the contents of that memory location to the desired value. See more
concurrency details in the <a href="#avoiding-collisions-and-deadlocks">12<!-- tex4ht:ref: sec:synchronization  --></a> section.
</p><!-- l. 1 -->
   <pre id="fancyvrb46"><a id="x1-31008r1"></a><span>1</span><span id="textcolor426"><span>/*</span></span> 
<a id="x1-31010r2"></a><span>2</span><span id="textcolor427"><span>&nbsp;*&nbsp;chardev.c:&nbsp;Creates&nbsp;a&nbsp;read-only&nbsp;char&nbsp;device&nbsp;that&nbsp;says&nbsp;how&nbsp;many&nbsp;times</span></span> 
<a id="x1-31012r3"></a><span>3</span><span id="textcolor428"><span>&nbsp;*&nbsp;you&nbsp;have&nbsp;read&nbsp;from&nbsp;the&nbsp;dev&nbsp;file</span></span> 
<a id="x1-31014r4"></a><span>4</span><span id="textcolor429"><span>&nbsp;*/</span></span> 
<a id="x1-31016r5"></a><span>5</span> 
<a id="x1-31018r6"></a><span>6</span><span id="textcolor430"><span>#include</span></span><span>&nbsp;</span><span id="textcolor431"><span>&lt;linux/atomic.h&gt;</span></span> 
<a id="x1-31020r7"></a><span>7</span><span id="textcolor432"><span>#include</span></span><span>&nbsp;</span><span id="textcolor433"><span>&lt;linux/cdev.h&gt;</span></span> 
<a id="x1-31022r8"></a><span>8</span><span id="textcolor434"><span>#include</span></span><span>&nbsp;</span><span id="textcolor435"><span>&lt;linux/delay.h&gt;</span></span> 
<a id="x1-31024r9"></a><span>9</span><span id="textcolor436"><span>#include</span></span><span>&nbsp;</span><span id="textcolor437"><span>&lt;linux/device.h&gt;</span></span> 
<a id="x1-31026r10"></a><span>10</span><span id="textcolor438"><span>#include</span></span><span>&nbsp;</span><span id="textcolor439"><span>&lt;linux/fs.h&gt;</span></span> 
<a id="x1-31028r11"></a><span>11</span><span id="textcolor440"><span>#include</span></span><span>&nbsp;</span><span id="textcolor441"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-31030r12"></a><span>12</span><span id="textcolor442"><span>#include</span></span><span>&nbsp;</span><span id="textcolor443"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;for&nbsp;sprintf()&nbsp;*/</span></span> 
<a id="x1-31032r13"></a><span>13</span><span id="textcolor444"><span>#include</span></span><span>&nbsp;</span><span id="textcolor445"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-31034r14"></a><span>14</span><span id="textcolor446"><span>#include</span></span><span>&nbsp;</span><span id="textcolor447"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-31036r15"></a><span>15</span><span id="textcolor448"><span>#include</span></span><span>&nbsp;</span><span id="textcolor449"><span>&lt;linux/types.h&gt;</span></span> 
<a id="x1-31038r16"></a><span>16</span><span id="textcolor450"><span>#include</span></span><span>&nbsp;</span><span id="textcolor451"><span>&lt;linux/uaccess.h&gt;&nbsp;/*&nbsp;for&nbsp;get_user&nbsp;and&nbsp;put_user&nbsp;*/</span></span> 
<a id="x1-31040r17"></a><span>17</span><span id="textcolor452"><span>#include</span></span><span>&nbsp;</span><span id="textcolor453"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-31042r18"></a><span>18</span> 
<a id="x1-31044r19"></a><span>19</span><span id="textcolor454"><span>#include</span></span><span>&nbsp;</span><span id="textcolor455"><span>&lt;asm/errno.h&gt;</span></span> 
<a id="x1-31046r20"></a><span>20</span> 
<a id="x1-31048r21"></a><span>21</span><span id="textcolor456"><span>/*&nbsp;&nbsp;Prototypes&nbsp;-&nbsp;this&nbsp;would&nbsp;normally&nbsp;go&nbsp;in&nbsp;a&nbsp;.h&nbsp;file&nbsp;*/</span></span> 
<a id="x1-31050r22"></a><span>22</span><span id="textcolor457"><span>static</span></span><span>&nbsp;</span><span id="textcolor458"><span>int</span></span><span>&nbsp;device_open(</span><span id="textcolor459"><span>struct</span></span><span>&nbsp;inode&nbsp;*,&nbsp;</span><span id="textcolor460"><span>struct</span></span><span>&nbsp;file&nbsp;*);</span> 
<a id="x1-31052r23"></a><span>23</span><span id="textcolor461"><span>static</span></span><span>&nbsp;</span><span id="textcolor462"><span>int</span></span><span>&nbsp;device_release(</span><span id="textcolor463"><span>struct</span></span><span>&nbsp;inode&nbsp;*,&nbsp;</span><span id="textcolor464"><span>struct</span></span><span>&nbsp;file&nbsp;*);</span> 
<a id="x1-31054r24"></a><span>24</span><span id="textcolor465"><span>static</span></span><span>&nbsp;</span><span id="textcolor466"><span>ssize_t</span></span><span>&nbsp;device_read(</span><span id="textcolor467"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor468"><span>char</span></span><span>&nbsp;__user&nbsp;*,&nbsp;</span><span id="textcolor469"><span>size_t</span></span><span>,&nbsp;loff_t&nbsp;*);</span> 
<a id="x1-31056r25"></a><span>25</span><span id="textcolor470"><span>static</span></span><span>&nbsp;</span><span id="textcolor471"><span>ssize_t</span></span><span>&nbsp;device_write(</span><span id="textcolor472"><span>struct</span></span><span>&nbsp;file&nbsp;*,&nbsp;</span><span id="textcolor473"><span>const</span></span><span>&nbsp;</span><span id="textcolor474"><span>char</span></span><span>&nbsp;__user&nbsp;*,&nbsp;</span><span id="textcolor475"><span>size_t</span></span><span>,</span> 
<a id="x1-31058r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*);</span> 
<a id="x1-31060r27"></a><span>27</span> 
<a id="x1-31062r28"></a><span>28</span><span id="textcolor476"><span>#define&nbsp;SUCCESS&nbsp;0</span></span> 
<a id="x1-31064r29"></a><span>29</span><span id="textcolor477"><span>#define&nbsp;DEVICE_NAME&nbsp;"chardev"&nbsp;</span></span><span id="textcolor478"><span>/*&nbsp;Dev&nbsp;name&nbsp;as&nbsp;it&nbsp;appears&nbsp;in&nbsp;/proc/devices&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-31066r30"></a><span>30</span><span id="textcolor479"><span>#define&nbsp;BUF_LEN&nbsp;80&nbsp;</span></span><span id="textcolor480"><span>/*&nbsp;Max&nbsp;length&nbsp;of&nbsp;the&nbsp;message&nbsp;from&nbsp;the&nbsp;device&nbsp;*/</span></span> 
<a id="x1-31068r31"></a><span>31</span> 
<a id="x1-31070r32"></a><span>32</span><span id="textcolor481"><span>/*&nbsp;Global&nbsp;variables&nbsp;are&nbsp;declared&nbsp;as&nbsp;static,&nbsp;so&nbsp;are&nbsp;global&nbsp;within&nbsp;the&nbsp;file.&nbsp;*/</span></span> 
<a id="x1-31072r33"></a><span>33</span> 
<a id="x1-31074r34"></a><span>34</span><span id="textcolor482"><span>static</span></span><span>&nbsp;</span><span id="textcolor483"><span>int</span></span><span>&nbsp;major;&nbsp;</span><span id="textcolor484"><span>/*&nbsp;major&nbsp;number&nbsp;assigned&nbsp;to&nbsp;our&nbsp;device&nbsp;driver&nbsp;*/</span></span> 
<a id="x1-31076r35"></a><span>35</span> 
<a id="x1-31078r36"></a><span>36</span><span id="textcolor485"><span>enum</span></span><span>&nbsp;{</span> 
<a id="x1-31080r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;CDEV_NOT_USED&nbsp;=&nbsp;0,</span> 
<a id="x1-31082r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;CDEV_EXCLUSIVE_OPEN&nbsp;=&nbsp;1,</span> 
<a id="x1-31084r39"></a><span>39</span><span>};</span> 
<a id="x1-31086r40"></a><span>40</span> 
<a id="x1-31088r41"></a><span>41</span><span id="textcolor486"><span>/*&nbsp;Is&nbsp;device&nbsp;open?&nbsp;Used&nbsp;to&nbsp;prevent&nbsp;multiple&nbsp;access&nbsp;to&nbsp;device&nbsp;*/</span></span> 
<a id="x1-31090r42"></a><span>42</span><span id="textcolor487"><span>static</span></span><span>&nbsp;atomic_t&nbsp;already_open&nbsp;=&nbsp;ATOMIC_INIT(CDEV_NOT_USED);</span> 
<a id="x1-31092r43"></a><span>43</span> 
<a id="x1-31094r44"></a><span>44</span><span id="textcolor488"><span>static</span></span><span>&nbsp;</span><span id="textcolor489"><span>char</span></span><span>&nbsp;msg[BUF_LEN&nbsp;+&nbsp;1];&nbsp;</span><span id="textcolor490"><span>/*&nbsp;The&nbsp;msg&nbsp;the&nbsp;device&nbsp;will&nbsp;give&nbsp;when&nbsp;asked&nbsp;*/</span></span> 
<a id="x1-31096r45"></a><span>45</span> 
<a id="x1-31098r46"></a><span>46</span><span id="textcolor491"><span>static</span></span><span>&nbsp;</span><span id="textcolor492"><span>struct</span></span><span>&nbsp;class&nbsp;*cls;</span> 
<a id="x1-31100r47"></a><span>47</span> 
<a id="x1-31102r48"></a><span>48</span><span id="textcolor493"><span>static</span></span><span>&nbsp;</span><span id="textcolor494"><span>struct</span></span><span>&nbsp;file_operations&nbsp;chardev_fops&nbsp;=&nbsp;{</span> 
<a id="x1-31104r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;device_read,</span> 
<a id="x1-31106r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;device_write,</span> 
<a id="x1-31108r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;device_open,</span> 
<a id="x1-31110r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;device_release,</span> 
<a id="x1-31112r53"></a><span>53</span><span>};</span> 
<a id="x1-31114r54"></a><span>54</span> 
<a id="x1-31116r55"></a><span>55</span><span id="textcolor495"><span>static</span></span><span>&nbsp;</span><span id="textcolor496"><span>int</span></span><span>&nbsp;__init&nbsp;chardev_init(</span><span id="textcolor497"><span>void</span></span><span>)</span> 
<a id="x1-31118r56"></a><span>56</span><span>{</span> 
<a id="x1-31120r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;major&nbsp;=&nbsp;register_chrdev(0,&nbsp;DEVICE_NAME,&nbsp;&amp;chardev_fops);</span> 
<a id="x1-31122r58"></a><span>58</span> 
<a id="x1-31124r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor498"><span>if</span></span><span>&nbsp;(major&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-31126r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor499"><span>"Registering&nbsp;char&nbsp;device&nbsp;failed&nbsp;with&nbsp;%d</span></span><span id="textcolor500"><span>\n</span></span><span id="textcolor501"><span>"</span></span><span>,&nbsp;major);</span> 
<a id="x1-31128r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor502"><span>return</span></span><span>&nbsp;major;</span> 
<a id="x1-31130r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-31132r63"></a><span>63</span> 
<a id="x1-31134r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor503"><span>"I&nbsp;was&nbsp;assigned&nbsp;major&nbsp;number&nbsp;%d.</span></span><span id="textcolor504"><span>\n</span></span><span id="textcolor505"><span>"</span></span><span>,&nbsp;major);</span> 
<a id="x1-31136r65"></a><span>65</span> 
<a id="x1-31138r66"></a><span>66</span><span id="textcolor506"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-31140r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cls&nbsp;=&nbsp;class_create(DEVICE_NAME);</span> 
<a id="x1-31142r68"></a><span>68</span><span id="textcolor507"><span>#else</span></span> 
<a id="x1-31144r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cls&nbsp;=&nbsp;class_create(THIS_MODULE,&nbsp;DEVICE_NAME);</span> 
<a id="x1-31146r70"></a><span>70</span><span id="textcolor508"><span>#endif</span></span> 
<a id="x1-31148r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_create(cls,&nbsp;NULL,&nbsp;MKDEV(major,&nbsp;0),&nbsp;NULL,&nbsp;DEVICE_NAME);</span> 
<a id="x1-31150r72"></a><span>72</span> 
<a id="x1-31152r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor509"><span>"Device&nbsp;created&nbsp;on&nbsp;/dev/%s</span></span><span id="textcolor510"><span>\n</span></span><span id="textcolor511"><span>"</span></span><span>,&nbsp;DEVICE_NAME);</span> 
<a id="x1-31154r74"></a><span>74</span> 
<a id="x1-31156r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor512"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-31158r76"></a><span>76</span><span>}</span> 
<a id="x1-31160r77"></a><span>77</span> 
<a id="x1-31162r78"></a><span>78</span><span id="textcolor513"><span>static</span></span><span>&nbsp;</span><span id="textcolor514"><span>void</span></span><span>&nbsp;__exit&nbsp;chardev_exit(</span><span id="textcolor515"><span>void</span></span><span>)</span> 
<a id="x1-31164r79"></a><span>79</span><span>{</span> 
<a id="x1-31166r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_destroy(cls,&nbsp;MKDEV(major,&nbsp;0));</span> 
<a id="x1-31168r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;class_destroy(cls);</span> 
<a id="x1-31170r82"></a><span>82</span> 
<a id="x1-31172r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor516"><span>/*&nbsp;Unregister&nbsp;the&nbsp;device&nbsp;*/</span></span> 
<a id="x1-31174r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_chrdev(major,&nbsp;DEVICE_NAME);</span> 
<a id="x1-31176r85"></a><span>85</span><span>}</span> 
<a id="x1-31178r86"></a><span>86</span> 
<a id="x1-31180r87"></a><span>87</span><span id="textcolor517"><span>/*&nbsp;Methods&nbsp;*/</span></span> 
<a id="x1-31182r88"></a><span>88</span> 
<a id="x1-31184r89"></a><span>89</span><span id="textcolor518"><span>/*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process&nbsp;tries&nbsp;to&nbsp;open&nbsp;the&nbsp;device&nbsp;file,&nbsp;like</span></span> 
<a id="x1-31186r90"></a><span>90</span><span id="textcolor519"><span>&nbsp;*&nbsp;"sudo&nbsp;cat&nbsp;/dev/chardev"</span></span> 
<a id="x1-31188r91"></a><span>91</span><span id="textcolor520"><span>&nbsp;*/</span></span> 
<a id="x1-31190r92"></a><span>92</span><span id="textcolor521"><span>static</span></span><span>&nbsp;</span><span id="textcolor522"><span>int</span></span><span>&nbsp;device_open(</span><span id="textcolor523"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor524"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-31192r93"></a><span>93</span><span>{</span> 
<a id="x1-31194r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor525"><span>static</span></span><span>&nbsp;</span><span id="textcolor526"><span>int</span></span><span>&nbsp;counter&nbsp;=&nbsp;0;</span> 
<a id="x1-31196r95"></a><span>95</span> 
<a id="x1-31198r96"></a><span>96</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor527"><span>if</span></span><span>&nbsp;(atomic_cmpxchg(&amp;already_open,&nbsp;CDEV_NOT_USED,&nbsp;CDEV_EXCLUSIVE_OPEN))</span> 
<a id="x1-31200r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor528"><span>return</span></span><span>&nbsp;-EBUSY;</span> 
<a id="x1-31202r98"></a><span>98</span> 
<a id="x1-31204r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sprintf(msg,&nbsp;</span><span id="textcolor529"><span>"I&nbsp;already&nbsp;told&nbsp;you&nbsp;%d&nbsp;times&nbsp;Hello&nbsp;world!</span></span><span id="textcolor530"><span>\n</span></span><span id="textcolor531"><span>"</span></span><span>,&nbsp;counter++);</span> 
<a id="x1-31206r100"></a><span>100</span><span>&nbsp;&nbsp;&nbsp;&nbsp;try_module_get(THIS_MODULE);</span> 
<a id="x1-31208r101"></a><span>101</span> 
<a id="x1-31210r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor532"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-31212r103"></a><span>103</span><span>}</span> 
<a id="x1-31214r104"></a><span>104</span> 
<a id="x1-31216r105"></a><span>105</span><span id="textcolor533"><span>/*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process&nbsp;closes&nbsp;the&nbsp;device&nbsp;file.&nbsp;*/</span></span> 
<a id="x1-31218r106"></a><span>106</span><span id="textcolor534"><span>static</span></span><span>&nbsp;</span><span id="textcolor535"><span>int</span></span><span>&nbsp;device_release(</span><span id="textcolor536"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor537"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-31220r107"></a><span>107</span><span>{</span> 
<a id="x1-31222r108"></a><span>108</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor538"><span>/*&nbsp;We</span><span>'</span><span>re&nbsp;now&nbsp;ready&nbsp;for&nbsp;our&nbsp;next&nbsp;caller&nbsp;*/</span></span> 
<a id="x1-31224r109"></a><span>109</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_set(&amp;already_open,&nbsp;CDEV_NOT_USED);</span> 
<a id="x1-31226r110"></a><span>110</span> 
<a id="x1-31228r111"></a><span>111</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor539"><span>/*&nbsp;Decrement&nbsp;the&nbsp;usage&nbsp;count,&nbsp;or&nbsp;else&nbsp;once&nbsp;you&nbsp;opened&nbsp;the&nbsp;file,&nbsp;you&nbsp;will</span></span> 
<a id="x1-31230r112"></a><span>112</span><span id="textcolor540"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;never&nbsp;get&nbsp;rid&nbsp;of&nbsp;the&nbsp;module.</span></span> 
<a id="x1-31232r113"></a><span>113</span><span id="textcolor541"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-31234r114"></a><span>114</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-31236r115"></a><span>115</span> 
<a id="x1-31238r116"></a><span>116</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor542"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-31240r117"></a><span>117</span><span>}</span> 
<a id="x1-31242r118"></a><span>118</span> 
<a id="x1-31244r119"></a><span>119</span><span id="textcolor543"><span>/*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process,&nbsp;which&nbsp;already&nbsp;opened&nbsp;the&nbsp;dev&nbsp;file,&nbsp;attempts&nbsp;to</span></span> 
<a id="x1-31246r120"></a><span>120</span><span id="textcolor544"><span>&nbsp;*&nbsp;read&nbsp;from&nbsp;it.</span></span> 
<a id="x1-31248r121"></a><span>121</span><span id="textcolor545"><span>&nbsp;*/</span></span> 
<a id="x1-31250r122"></a><span>122</span><span id="textcolor546"><span>static</span></span><span>&nbsp;</span><span id="textcolor547"><span>ssize_t</span></span><span>&nbsp;device_read(</span><span id="textcolor548"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor549"><span>/*&nbsp;see&nbsp;include/linux/fs.h&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-31252r123"></a><span>123</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor550"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,&nbsp;</span><span id="textcolor551"><span>/*&nbsp;buffer&nbsp;to&nbsp;fill&nbsp;with&nbsp;data&nbsp;*/</span></span> 
<a id="x1-31254r124"></a><span>124</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor552"><span>size_t</span></span><span>&nbsp;length,&nbsp;</span><span id="textcolor553"><span>/*&nbsp;length&nbsp;of&nbsp;the&nbsp;buffer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-31256r125"></a><span>125</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-31258r126"></a><span>126</span><span>{</span> 
<a id="x1-31260r127"></a><span>127</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor554"><span>/*&nbsp;Number&nbsp;of&nbsp;bytes&nbsp;actually&nbsp;written&nbsp;to&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-31262r128"></a><span>128</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor555"><span>int</span></span><span>&nbsp;bytes_read&nbsp;=&nbsp;0;</span> 
<a id="x1-31264r129"></a><span>129</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor556"><span>const</span></span><span>&nbsp;</span><span id="textcolor557"><span>char</span></span><span>&nbsp;*msg_ptr&nbsp;=&nbsp;msg;</span> 
<a id="x1-31266r130"></a><span>130</span> 
<a id="x1-31268r131"></a><span>131</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor558"><span>if</span></span><span>&nbsp;(!*(msg_ptr&nbsp;+&nbsp;*offset))&nbsp;{&nbsp;</span><span id="textcolor559"><span>/*&nbsp;we&nbsp;are&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;message&nbsp;*/</span></span> 
<a id="x1-31270r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;=&nbsp;0;&nbsp;</span><span id="textcolor560"><span>/*&nbsp;reset&nbsp;the&nbsp;offset&nbsp;*/</span></span> 
<a id="x1-31272r133"></a><span>133</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor561"><span>return</span></span><span>&nbsp;0;&nbsp;</span><span id="textcolor562"><span>/*&nbsp;signify&nbsp;end&nbsp;of&nbsp;file&nbsp;*/</span></span> 
<a id="x1-31274r134"></a><span>134</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-31276r135"></a><span>135</span> 
<a id="x1-31278r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;msg_ptr&nbsp;+=&nbsp;*offset;</span> 
<a id="x1-31280r137"></a><span>137</span> 
<a id="x1-31282r138"></a><span>138</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor563"><span>/*&nbsp;Actually&nbsp;put&nbsp;the&nbsp;data&nbsp;into&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-31284r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor564"><span>while</span></span><span>&nbsp;(length&nbsp;&amp;&amp;&nbsp;*msg_ptr)&nbsp;{</span> 
<a id="x1-31286r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor565"><span>/*&nbsp;The&nbsp;buffer&nbsp;is&nbsp;in&nbsp;the&nbsp;user&nbsp;data&nbsp;segment,&nbsp;not&nbsp;the&nbsp;kernel</span></span> 
<a id="x1-31288r141"></a><span>141</span><span id="textcolor566"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;segment&nbsp;so&nbsp;"*"&nbsp;assignment&nbsp;won</span><span>'</span><span>t&nbsp;work.&nbsp;&nbsp;We&nbsp;have&nbsp;to&nbsp;use</span></span> 
<a id="x1-31290r142"></a><span>142</span><span id="textcolor567"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;put_user&nbsp;which&nbsp;copies&nbsp;data&nbsp;from&nbsp;the&nbsp;kernel&nbsp;data&nbsp;segment&nbsp;to</span></span> 
<a id="x1-31292r143"></a><span>143</span><span id="textcolor568"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;user&nbsp;data&nbsp;segment.</span></span> 
<a id="x1-31294r144"></a><span>144</span><span id="textcolor569"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-31296r145"></a><span>145</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put_user(*(msg_ptr++),&nbsp;buffer++);</span> 
<a id="x1-31298r146"></a><span>146</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length--;</span> 
<a id="x1-31300r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytes_read++;</span> 
<a id="x1-31302r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-31304r149"></a><span>149</span> 
<a id="x1-31306r150"></a><span>150</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;bytes_read;</span> 
<a id="x1-31308r151"></a><span>151</span> 
<a id="x1-31310r152"></a><span>152</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor570"><span>/*&nbsp;Most&nbsp;read&nbsp;functions&nbsp;return&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;put&nbsp;into&nbsp;the&nbsp;buffer.&nbsp;*/</span></span> 
<a id="x1-31312r153"></a><span>153</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor571"><span>return</span></span><span>&nbsp;bytes_read;</span> 
<a id="x1-31314r154"></a><span>154</span><span>}</span> 
<a id="x1-31316r155"></a><span>155</span> 
<a id="x1-31318r156"></a><span>156</span><span id="textcolor572"><span>/*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process&nbsp;writes&nbsp;to&nbsp;dev&nbsp;file:&nbsp;echo&nbsp;"hi"&nbsp;&gt;&nbsp;/dev/hello&nbsp;*/</span></span> 
<a id="x1-31320r157"></a><span>157</span><span id="textcolor573"><span>static</span></span><span>&nbsp;</span><span id="textcolor574"><span>ssize_t</span></span><span>&nbsp;device_write(</span><span id="textcolor575"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor576"><span>const</span></span><span>&nbsp;</span><span id="textcolor577"><span>char</span></span><span>&nbsp;__user&nbsp;*buff,</span> 
<a id="x1-31322r158"></a><span>158</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor578"><span>size_t</span></span><span>&nbsp;len,&nbsp;loff_t&nbsp;*off)</span> 
<a id="x1-31324r159"></a><span>159</span><span>{</span> 
<a id="x1-31326r160"></a><span>160</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor579"><span>"Sorry,&nbsp;this&nbsp;operation&nbsp;is&nbsp;not&nbsp;supported.</span></span><span id="textcolor580"><span>\n</span></span><span id="textcolor581"><span>"</span></span><span>);</span> 
<a id="x1-31328r161"></a><span>161</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor582"><span>return</span></span><span>&nbsp;-EINVAL;</span> 
<a id="x1-31330r162"></a><span>162</span><span>}</span> 
<a id="x1-31332r163"></a><span>163</span> 
<a id="x1-31334r164"></a><span>164</span><span>module_init(chardev_init);</span> 
<a id="x1-31336r165"></a><span>165</span><span>module_exit(chardev_exit);</span> 
<a id="x1-31338r166"></a><span>166</span> 
<a id="x1-31340r167"></a><span>167</span><span>MODULE_LICENSE(</span><span id="textcolor583"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1128 -->
   <h4 id="writing-modules-for-multiple-kernel-versions"><span>6.6   </span> <a id="x1-320006.6"></a>Writing Modules for Multiple Kernel Versions</h4>
<!-- l. 1130 --><p>The system calls, which are the major interface the kernel shows to the processes,
generally stay the same across versions. A new system call may be added, but
usually the old ones will behave exactly like they used to. This is necessary for
backward compatibility – a new kernel version is not supposed to break regular
processes. In most cases, the device files will also remain the same. On the other
hand, the internal interfaces within the kernel can and do change between
versions.
</p><!-- l. 1135 --><p>   There are differences between different kernel versions, and if you want
to support multiple kernel versions, you will find yourself having to code
conditional compilation directives. The way to do this to compare the macro
<code> <span>LINUX_VERSION_CODE</span>
</code> to the macro <code>  <span>KERNEL_VERSION</span>
</code>. In version <span><span><span>a.b.c</span></span></span> of the kernel, the value of this macro would be <img alt="216a+ 28b+ c  " src="https://sysprog21.github.io/lkmpg/lkmpg-for-ht0x.svg">.
</p><!-- l. 1139 -->
   <h3 id="the-proc-file-system"><span>7   </span> <a id="x1-330007"></a>The /proc File System</h3>
<!-- l. 1141 --><p>In Linux, there is an additional mechanism for the kernel and kernel modules to send
information to processes — the <span><span><span>/proc</span></span></span> file system. Originally designed to allow easy
access to information about processes (hence the name), it is now used by every bit
of the kernel which has something interesting to report, such as <span><span><span>/proc/modules</span></span></span>
which provides the list of modules and <span><span><span>/proc/meminfo</span></span></span> which gathers memory usage
statistics.
</p><!-- l. 1144 --><p>   The method to use the proc file system is very similar to the one used with device
drivers — a structure is created with all the information needed for the <span><span><span>/proc</span></span></span> file,
including pointers to any handler functions (in our case there is only one, the
one called when somebody attempts to read from the <span><span><span>/proc</span></span></span> file). Then,
<code> <span>init_module</span>
</code> registers the structure with the kernel and
<code> <span>cleanup_module</span>
</code> unregisters it.
                                                                  

                                                                  
</p><!-- l. 1147 --><p>   Normal file systems are located on a disk, rather than just in memory (which is
where <span><span><span>/proc</span></span></span> is), and in that case the index-node (inode for short) number
is a pointer to a disk location where the file’s inode is located. The inode
contains information about the file, for example the file’s permissions, together
with a pointer to the disk location or locations where the file’s data can be
found.
</p><!-- l. 1150 --><p>   Because we don’t get called when the file is opened or closed, there’s nowhere for
us to put <code>  <span>try_module_get</span>
</code> and <code>  <span>module_put</span>
</code> in this module, and if the file is opened and then the module is removed, there’s no
way to avoid the consequences.
</p><!-- l. 1152 --><p>   Here a simple example showing how to use a <span><span><span>/proc</span></span></span> file. This is the HelloWorld for
the <span><span><span>/proc</span></span></span> filesystem. There are three parts: create the file <span><span><span>/proc/helloworld</span></span></span> in the
function <code>  <span>init_module</span>
</code>, return a value (and a buffer) when the file <span><span><span>/proc/helloworld</span></span></span> is read in the callback
function <code>  <span>procfile_read</span>
</code>, and delete the file <span><span><span>/proc/helloworld</span></span></span> in the function
<code> <span>cleanup_module</span>
</code>.
</p><!-- l. 1156 --><p>   The <span><span><span>/proc/helloworld</span></span></span> is created when the module is loaded with the function
<code> <span>proc_create</span>
</code>. The return value is a pointer to <code>  <span id="textcolor584"><span>struct</span></span><span>&nbsp;proc_dir_entry</span>
</code>, and it will be used to configure the file <span><span><span>/proc/helloworld</span></span></span> (for example, the owner
of this file). A null return value means that the creation has failed.
</p><!-- l. 1160 --><p>   Every time the file <span><span><span>/proc/helloworld</span></span></span> is read, the function
<code> <span>procfile_read</span>
</code> is called. Two parameters of this function are very important: the buffer
(the second parameter) and the offset (the fourth one). The content of the
buffer will be returned to the application which read it (for example the
<code> <span>cat</span>
</code> command). The offset is the current position in the file. If the return value of the
function is not null, then this function is called again. So be careful with this
function, if it never returns zero, the read function is called endlessly.
                                                                  

                                                                  
</p>
   <pre id="verbatim-15">$&nbsp;cat&nbsp;/proc/helloworld
HelloWorld!
</pre>
<!-- l. 1170 --><!-- l. 1 -->
   <pre id="fancyvrb47"><a id="x1-33013r1"></a><span>1</span><span id="textcolor585"><span>/*</span></span> 
<a id="x1-33015r2"></a><span>2</span><span id="textcolor586"><span>&nbsp;*&nbsp;procfs1.c</span></span> 
<a id="x1-33017r3"></a><span>3</span><span id="textcolor587"><span>&nbsp;*/</span></span> 
<a id="x1-33019r4"></a><span>4</span> 
<a id="x1-33021r5"></a><span>5</span><span id="textcolor588"><span>#include</span></span><span>&nbsp;</span><span id="textcolor589"><span>&lt;linux/kernel.h&gt;</span></span> 
<a id="x1-33023r6"></a><span>6</span><span id="textcolor590"><span>#include</span></span><span>&nbsp;</span><span id="textcolor591"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-33025r7"></a><span>7</span><span id="textcolor592"><span>#include</span></span><span>&nbsp;</span><span id="textcolor593"><span>&lt;linux/proc_fs.h&gt;</span></span> 
<a id="x1-33027r8"></a><span>8</span><span id="textcolor594"><span>#include</span></span><span>&nbsp;</span><span id="textcolor595"><span>&lt;linux/uaccess.h&gt;</span></span> 
<a id="x1-33029r9"></a><span>9</span><span id="textcolor596"><span>#include</span></span><span>&nbsp;</span><span id="textcolor597"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-33031r10"></a><span>10</span> 
<a id="x1-33033r11"></a><span>11</span><span id="textcolor598"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;6,&nbsp;0)</span></span> 
<a id="x1-33035r12"></a><span>12</span><span id="textcolor599"><span>#define&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-33037r13"></a><span>13</span><span id="textcolor600"><span>#endif</span></span> 
<a id="x1-33039r14"></a><span>14</span> 
<a id="x1-33041r15"></a><span>15</span><span id="textcolor601"><span>#define&nbsp;procfs_name&nbsp;"helloworld"</span></span> 
<a id="x1-33043r16"></a><span>16</span> 
<a id="x1-33045r17"></a><span>17</span><span id="textcolor602"><span>static</span></span><span>&nbsp;</span><span id="textcolor603"><span>struct</span></span><span>&nbsp;proc_dir_entry&nbsp;*our_proc_file;</span> 
<a id="x1-33047r18"></a><span>18</span> 
<a id="x1-33049r19"></a><span>19</span><span id="textcolor604"><span>static</span></span><span>&nbsp;</span><span id="textcolor605"><span>ssize_t</span></span><span>&nbsp;procfile_read(</span><span id="textcolor606"><span>struct</span></span><span>&nbsp;file&nbsp;*file_pointer,&nbsp;</span><span id="textcolor607"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-33051r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor608"><span>size_t</span></span><span>&nbsp;buffer_length,&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-33053r21"></a><span>21</span><span>{</span> 
<a id="x1-33055r22"></a><span>22</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor609"><span>char</span></span><span>&nbsp;s[13]&nbsp;=&nbsp;</span><span id="textcolor610"><span>"HelloWorld!</span></span><span id="textcolor611"><span>\n</span></span><span id="textcolor612"><span>"</span></span><span>;</span> 
<a id="x1-33057r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor613"><span>int</span></span><span>&nbsp;len&nbsp;=&nbsp;</span><span id="textcolor614"><span>sizeof</span></span><span>(s);</span> 
<a id="x1-33059r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor615"><span>ssize_t</span></span><span>&nbsp;ret&nbsp;=&nbsp;len;</span> 
<a id="x1-33061r25"></a><span>25</span> 
<a id="x1-33063r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor616"><span>if</span></span><span>&nbsp;(*offset&nbsp;&gt;=&nbsp;len&nbsp;||&nbsp;copy_to_user(buffer,&nbsp;s,&nbsp;len))&nbsp;{</span> 
<a id="x1-33065r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor617"><span>"copy_to_user&nbsp;failed</span></span><span id="textcolor618"><span>\n</span></span><span id="textcolor619"><span>"</span></span><span>);</span> 
<a id="x1-33067r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;0;</span> 
<a id="x1-33069r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span id="textcolor620"><span>else</span></span><span>&nbsp;{</span> 
<a id="x1-33071r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor621"><span>"procfile&nbsp;read&nbsp;%s</span></span><span id="textcolor622"><span>\n</span></span><span id="textcolor623"><span>"</span></span><span>,&nbsp;file_pointer-&gt;f_path.dentry-&gt;d_name.name);</span> 
<a id="x1-33073r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;len;</span> 
<a id="x1-33075r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-33077r33"></a><span>33</span> 
<a id="x1-33079r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor624"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-33081r35"></a><span>35</span><span>}</span> 
<a id="x1-33083r36"></a><span>36</span> 
<a id="x1-33085r37"></a><span>37</span><span id="textcolor625"><span>#ifdef&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-33087r38"></a><span>38</span><span id="textcolor626"><span>static</span></span><span>&nbsp;</span><span id="textcolor627"><span>const</span></span><span>&nbsp;</span><span id="textcolor628"><span>struct</span></span><span>&nbsp;proc_ops&nbsp;proc_file_fops&nbsp;=&nbsp;{</span> 
<a id="x1-33089r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_read&nbsp;=&nbsp;procfile_read,</span> 
<a id="x1-33091r40"></a><span>40</span><span>};</span> 
<a id="x1-33093r41"></a><span>41</span><span id="textcolor629"><span>#else</span></span> 
<a id="x1-33095r42"></a><span>42</span><span id="textcolor630"><span>static</span></span><span>&nbsp;</span><span id="textcolor631"><span>const</span></span><span>&nbsp;</span><span id="textcolor632"><span>struct</span></span><span>&nbsp;file_operations&nbsp;proc_file_fops&nbsp;=&nbsp;{</span> 
<a id="x1-33097r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;procfile_read,</span> 
<a id="x1-33099r44"></a><span>44</span><span>};</span> 
<a id="x1-33101r45"></a><span>45</span><span id="textcolor633"><span>#endif</span></span> 
<a id="x1-33103r46"></a><span>46</span> 
<a id="x1-33105r47"></a><span>47</span><span id="textcolor634"><span>static</span></span><span>&nbsp;</span><span id="textcolor635"><span>int</span></span><span>&nbsp;__init&nbsp;procfs1_init(</span><span id="textcolor636"><span>void</span></span><span>)</span> 
<a id="x1-33107r48"></a><span>48</span><span>{</span> 
<a id="x1-33109r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;our_proc_file&nbsp;=&nbsp;proc_create(procfs_name,&nbsp;0644,&nbsp;NULL,&nbsp;&amp;proc_file_fops);</span> 
<a id="x1-33111r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor637"><span>if</span></span><span>&nbsp;(NULL&nbsp;==&nbsp;our_proc_file)&nbsp;{</span> 
<a id="x1-33113r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proc_remove(our_proc_file);</span> 
<a id="x1-33115r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor638"><span>"Error:Could&nbsp;not&nbsp;initialize&nbsp;/proc/%s</span></span><span id="textcolor639"><span>\n</span></span><span id="textcolor640"><span>"</span></span><span>,&nbsp;procfs_name);</span> 
<a id="x1-33117r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor641"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-33119r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-33121r55"></a><span>55</span> 
<a id="x1-33123r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor642"><span>"/proc/%s&nbsp;created</span></span><span id="textcolor643"><span>\n</span></span><span id="textcolor644"><span>"</span></span><span>,&nbsp;procfs_name);</span> 
<a id="x1-33125r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor645"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-33127r58"></a><span>58</span><span>}</span> 
<a id="x1-33129r59"></a><span>59</span> 
<a id="x1-33131r60"></a><span>60</span><span id="textcolor646"><span>static</span></span><span>&nbsp;</span><span id="textcolor647"><span>void</span></span><span>&nbsp;__exit&nbsp;procfs1_exit(</span><span id="textcolor648"><span>void</span></span><span>)</span> 
<a id="x1-33133r61"></a><span>61</span><span>{</span> 
<a id="x1-33135r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;proc_remove(our_proc_file);</span> 
<a id="x1-33137r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor649"><span>"/proc/%s&nbsp;removed</span></span><span id="textcolor650"><span>\n</span></span><span id="textcolor651"><span>"</span></span><span>,&nbsp;procfs_name);</span> 
<a id="x1-33139r64"></a><span>64</span><span>}</span> 
<a id="x1-33141r65"></a><span>65</span> 
<a id="x1-33143r66"></a><span>66</span><span>module_init(procfs1_init);</span> 
<a id="x1-33145r67"></a><span>67</span><span>module_exit(procfs1_exit);</span> 
<a id="x1-33147r68"></a><span>68</span> 
<a id="x1-33149r69"></a><span>69</span><span>MODULE_LICENSE(</span><span id="textcolor652"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1174 -->
   <h4 id="the-procops-structure"><span>7.1   </span> <a id="x1-340007.1"></a>The proc_ops Structure</h4>
<!-- l. 1176 --><p>The <code>  <span>proc_ops</span>
</code> structure is defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/proc_fs.h">include/linux/proc_fs.h</a> in Linux v5.6+. In older kernels, it
used <code>  <span>file_operations</span>
</code> for custom hooks in <span><span><span>/proc</span></span></span> file system, but it contains some
members that are unnecessary in VFS, and every time VFS expands
<code> <span>file_operations</span>
</code> set, <span><span><span>/proc</span></span></span> code comes bloated. On the other hand, not only the space,
but also some operations were saved by this structure to improve its
performance. For example, the file which never disappears in <span><span><span>/proc</span></span></span> can set the
<code> <span>proc_flag</span>
</code> as <code>  <span>PROC_ENTRY_PERMANENT</span>
</code> to save 2 atomic ops, 1 allocation, 1 free in per open/read/close sequence.
</p><!-- l. 1181 -->
   <h4 id="read-and-write-a-proc-file"><span>7.2   </span> <a id="x1-350007.2"></a>Read and Write a /proc File</h4>
<!-- l. 1183 --><p>We have seen a very simple example for a <span><span><span>/proc</span></span></span> file where we only read
the file <span><span><span>/proc/helloworld</span></span></span>. It is also possible to write in a <span><span><span>/proc</span></span></span> file. It
works the same way as read, a function is called when the <span><span><span>/proc</span></span></span> file
is written. But there is a little difference with read, data comes from
user, so you have to import data from user space to kernel space (with
<code> <span>copy_from_user</span>
</code> or <code>  <span>get_user</span>
</code>)
</p><!-- l. 1188 --><p>   The reason for <code>  <span>copy_from_user</span>
</code> or <code>  <span>get_user</span>
</code> is that Linux memory (on Intel architecture, it may be different under some
                                                                  

                                                                  
other processors) is segmented. This means that a pointer, by itself, does
not reference a unique location in memory, only a location in a memory
segment, and you need to know which memory segment it is to be able to use
it. There is one memory segment for the kernel, and one for each of the
processes.
</p><!-- l. 1192 --><p>   The only memory segment accessible to a process is its own, so when
writing regular programs to run as processes, there is no need to worry about
segments. When you write a kernel module, normally you want to access
the kernel memory segment, which is handled automatically by the system.
However, when the content of a memory buffer needs to be passed between
the currently running process and the kernel, the kernel function receives
a pointer to the memory buffer which is in the process segment. The
<code> <span>put_user</span>
</code> and <code>  <span>get_user</span>
</code> macros allow you to access that memory. These functions handle
only one character, you can handle several characters with
<code> <span>copy_to_user</span>
</code> and <code>  <span>copy_from_user</span>
</code>. As the buffer (in read or write function) is in kernel space, for write function you
need to import data because it comes from user space, but not for the read function
because data is already in kernel space.
</p><!-- l. 1 -->
   <pre id="fancyvrb48"><a id="x1-35010r1"></a><span>1</span><span id="textcolor653"><span>/*</span></span> 
<a id="x1-35012r2"></a><span>2</span><span id="textcolor654"><span>&nbsp;*&nbsp;procfs2.c&nbsp;-&nbsp;&nbsp;create&nbsp;a&nbsp;"file"&nbsp;in&nbsp;/proc</span></span> 
<a id="x1-35014r3"></a><span>3</span><span id="textcolor655"><span>&nbsp;*/</span></span> 
<a id="x1-35016r4"></a><span>4</span> 
<a id="x1-35018r5"></a><span>5</span><span id="textcolor656"><span>#include</span></span><span>&nbsp;</span><span id="textcolor657"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;We</span><span>'</span><span>re&nbsp;doing&nbsp;kernel&nbsp;work&nbsp;*/</span></span> 
<a id="x1-35020r6"></a><span>6</span><span id="textcolor658"><span>#include</span></span><span>&nbsp;</span><span id="textcolor659"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Specifically,&nbsp;a&nbsp;module&nbsp;*/</span></span> 
<a id="x1-35022r7"></a><span>7</span><span id="textcolor660"><span>#include</span></span><span>&nbsp;</span><span id="textcolor661"><span>&lt;linux/proc_fs.h&gt;&nbsp;/*&nbsp;Necessary&nbsp;because&nbsp;we&nbsp;use&nbsp;the&nbsp;proc&nbsp;fs&nbsp;*/</span></span> 
<a id="x1-35024r8"></a><span>8</span><span id="textcolor662"><span>#include</span></span><span>&nbsp;</span><span id="textcolor663"><span>&lt;linux/uaccess.h&gt;&nbsp;/*&nbsp;for&nbsp;copy_from_user&nbsp;*/</span></span> 
<a id="x1-35026r9"></a><span>9</span><span id="textcolor664"><span>#include</span></span><span>&nbsp;</span><span id="textcolor665"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-35028r10"></a><span>10</span> 
<a id="x1-35030r11"></a><span>11</span><span id="textcolor666"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;6,&nbsp;0)</span></span> 
<a id="x1-35032r12"></a><span>12</span><span id="textcolor667"><span>#define&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-35034r13"></a><span>13</span><span id="textcolor668"><span>#endif</span></span> 
<a id="x1-35036r14"></a><span>14</span> 
<a id="x1-35038r15"></a><span>15</span><span id="textcolor669"><span>#define&nbsp;PROCFS_MAX_SIZE&nbsp;1024</span></span> 
<a id="x1-35040r16"></a><span>16</span><span id="textcolor670"><span>#define&nbsp;PROCFS_NAME&nbsp;"buffer1k"</span></span> 
<a id="x1-35042r17"></a><span>17</span> 
<a id="x1-35044r18"></a><span>18</span><span id="textcolor671"><span>/*&nbsp;This&nbsp;structure&nbsp;hold&nbsp;information&nbsp;about&nbsp;the&nbsp;/proc&nbsp;file&nbsp;*/</span></span> 
<a id="x1-35046r19"></a><span>19</span><span id="textcolor672"><span>static</span></span><span>&nbsp;</span><span id="textcolor673"><span>struct</span></span><span>&nbsp;proc_dir_entry&nbsp;*our_proc_file;</span> 
<a id="x1-35048r20"></a><span>20</span> 
<a id="x1-35050r21"></a><span>21</span><span id="textcolor674"><span>/*&nbsp;The&nbsp;buffer&nbsp;used&nbsp;to&nbsp;store&nbsp;character&nbsp;for&nbsp;this&nbsp;module&nbsp;*/</span></span> 
<a id="x1-35052r22"></a><span>22</span><span id="textcolor675"><span>static</span></span><span>&nbsp;</span><span id="textcolor676"><span>char</span></span><span>&nbsp;procfs_buffer[PROCFS_MAX_SIZE];</span> 
<a id="x1-35054r23"></a><span>23</span> 
<a id="x1-35056r24"></a><span>24</span><span id="textcolor677"><span>/*&nbsp;The&nbsp;size&nbsp;of&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-35058r25"></a><span>25</span><span id="textcolor678"><span>static</span></span><span>&nbsp;</span><span id="textcolor679"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor680"><span>long</span></span><span>&nbsp;procfs_buffer_size&nbsp;=&nbsp;0;</span> 
<a id="x1-35060r26"></a><span>26</span> 
<a id="x1-35062r27"></a><span>27</span><span id="textcolor681"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;then&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;read&nbsp;*/</span></span> 
<a id="x1-35064r28"></a><span>28</span><span id="textcolor682"><span>static</span></span><span>&nbsp;</span><span id="textcolor683"><span>ssize_t</span></span><span>&nbsp;procfile_read(</span><span id="textcolor684"><span>struct</span></span><span>&nbsp;file&nbsp;*file_pointer,&nbsp;</span><span id="textcolor685"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-35066r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor686"><span>size_t</span></span><span>&nbsp;buffer_length,&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-35068r30"></a><span>30</span><span>{</span> 
<a id="x1-35070r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor687"><span>char</span></span><span>&nbsp;s[13]&nbsp;=&nbsp;</span><span id="textcolor688"><span>"HelloWorld!</span></span><span id="textcolor689"><span>\n</span></span><span id="textcolor690"><span>"</span></span><span>;</span> 
<a id="x1-35072r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor691"><span>int</span></span><span>&nbsp;len&nbsp;=&nbsp;</span><span id="textcolor692"><span>sizeof</span></span><span>(s);</span> 
<a id="x1-35074r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor693"><span>ssize_t</span></span><span>&nbsp;ret&nbsp;=&nbsp;len;</span> 
<a id="x1-35076r34"></a><span>34</span> 
<a id="x1-35078r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor694"><span>if</span></span><span>&nbsp;(*offset&nbsp;&gt;=&nbsp;len&nbsp;||&nbsp;copy_to_user(buffer,&nbsp;s,&nbsp;len))&nbsp;{</span> 
<a id="x1-35080r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor695"><span>"copy_to_user&nbsp;failed</span></span><span id="textcolor696"><span>\n</span></span><span id="textcolor697"><span>"</span></span><span>);</span> 
<a id="x1-35082r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;0;</span> 
<a id="x1-35084r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span id="textcolor698"><span>else</span></span><span>&nbsp;{</span> 
<a id="x1-35086r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor699"><span>"procfile&nbsp;read&nbsp;%s</span></span><span id="textcolor700"><span>\n</span></span><span id="textcolor701"><span>"</span></span><span>,&nbsp;file_pointer-&gt;f_path.dentry-&gt;d_name.name);</span> 
<a id="x1-35088r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;len;</span> 
<a id="x1-35090r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-35092r42"></a><span>42</span> 
<a id="x1-35094r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor702"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-35096r44"></a><span>44</span><span>}</span> 
<a id="x1-35098r45"></a><span>45</span> 
<a id="x1-35100r46"></a><span>46</span><span id="textcolor703"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;with&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;written.&nbsp;*/</span></span> 
<a id="x1-35102r47"></a><span>47</span><span id="textcolor704"><span>static</span></span><span>&nbsp;</span><span id="textcolor705"><span>ssize_t</span></span><span>&nbsp;procfile_write(</span><span id="textcolor706"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor707"><span>const</span></span><span>&nbsp;</span><span id="textcolor708"><span>char</span></span><span>&nbsp;__user&nbsp;*buff,</span> 
<a id="x1-35104r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor709"><span>size_t</span></span><span>&nbsp;len,&nbsp;loff_t&nbsp;*off)</span> 
<a id="x1-35106r49"></a><span>49</span><span>{</span> 
<a id="x1-35108r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;procfs_buffer_size&nbsp;=&nbsp;len;</span> 
<a id="x1-35110r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor710"><span>if</span></span><span>&nbsp;(procfs_buffer_size&nbsp;&gt;&nbsp;PROCFS_MAX_SIZE)</span> 
<a id="x1-35112r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;procfs_buffer_size&nbsp;=&nbsp;PROCFS_MAX_SIZE;</span> 
<a id="x1-35114r53"></a><span>53</span> 
<a id="x1-35116r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor711"><span>if</span></span><span>&nbsp;(copy_from_user(procfs_buffer,&nbsp;buff,&nbsp;procfs_buffer_size))</span> 
<a id="x1-35118r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor712"><span>return</span></span><span>&nbsp;-EFAULT;</span> 
<a id="x1-35120r56"></a><span>56</span> 
<a id="x1-35122r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;procfs_buffer[procfs_buffer_size&nbsp;&amp;&nbsp;(PROCFS_MAX_SIZE&nbsp;-&nbsp;1)]&nbsp;=&nbsp;</span><span id="textcolor713"><span>'</span><span>\0</span><span>'</span></span><span>;</span> 
<a id="x1-35124r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*off&nbsp;+=&nbsp;procfs_buffer_size;</span> 
<a id="x1-35126r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor714"><span>"procfile&nbsp;write&nbsp;%s</span></span><span id="textcolor715"><span>\n</span></span><span id="textcolor716"><span>"</span></span><span>,&nbsp;procfs_buffer);</span> 
<a id="x1-35128r60"></a><span>60</span> 
<a id="x1-35130r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor717"><span>return</span></span><span>&nbsp;procfs_buffer_size;</span> 
<a id="x1-35132r62"></a><span>62</span><span>}</span> 
<a id="x1-35134r63"></a><span>63</span> 
<a id="x1-35136r64"></a><span>64</span><span id="textcolor718"><span>#ifdef&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-35138r65"></a><span>65</span><span id="textcolor719"><span>static</span></span><span>&nbsp;</span><span id="textcolor720"><span>const</span></span><span>&nbsp;</span><span id="textcolor721"><span>struct</span></span><span>&nbsp;proc_ops&nbsp;proc_file_fops&nbsp;=&nbsp;{</span> 
<a id="x1-35140r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_read&nbsp;=&nbsp;procfile_read,</span> 
<a id="x1-35142r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_write&nbsp;=&nbsp;procfile_write,</span> 
<a id="x1-35144r68"></a><span>68</span><span>};</span> 
<a id="x1-35146r69"></a><span>69</span><span id="textcolor722"><span>#else</span></span> 
<a id="x1-35148r70"></a><span>70</span><span id="textcolor723"><span>static</span></span><span>&nbsp;</span><span id="textcolor724"><span>const</span></span><span>&nbsp;</span><span id="textcolor725"><span>struct</span></span><span>&nbsp;file_operations&nbsp;proc_file_fops&nbsp;=&nbsp;{</span> 
<a id="x1-35150r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;procfile_read,</span> 
<a id="x1-35152r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;procfile_write,</span> 
<a id="x1-35154r73"></a><span>73</span><span>};</span> 
<a id="x1-35156r74"></a><span>74</span><span id="textcolor726"><span>#endif</span></span> 
<a id="x1-35158r75"></a><span>75</span> 
<a id="x1-35160r76"></a><span>76</span><span id="textcolor727"><span>static</span></span><span>&nbsp;</span><span id="textcolor728"><span>int</span></span><span>&nbsp;__init&nbsp;procfs2_init(</span><span id="textcolor729"><span>void</span></span><span>)</span> 
<a id="x1-35162r77"></a><span>77</span><span>{</span> 
<a id="x1-35164r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;our_proc_file&nbsp;=&nbsp;proc_create(PROCFS_NAME,&nbsp;0644,&nbsp;NULL,&nbsp;&amp;proc_file_fops);</span> 
<a id="x1-35166r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor730"><span>if</span></span><span>&nbsp;(NULL&nbsp;==&nbsp;our_proc_file)&nbsp;{</span> 
<a id="x1-35168r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor731"><span>"Error:Could&nbsp;not&nbsp;initialize&nbsp;/proc/%s</span></span><span id="textcolor732"><span>\n</span></span><span id="textcolor733"><span>"</span></span><span>,&nbsp;PROCFS_NAME);</span> 
<a id="x1-35170r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor734"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-35172r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-35174r83"></a><span>83</span> 
<a id="x1-35176r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor735"><span>"/proc/%s&nbsp;created</span></span><span id="textcolor736"><span>\n</span></span><span id="textcolor737"><span>"</span></span><span>,&nbsp;PROCFS_NAME);</span> 
<a id="x1-35178r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor738"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-35180r86"></a><span>86</span><span>}</span> 
<a id="x1-35182r87"></a><span>87</span> 
<a id="x1-35184r88"></a><span>88</span><span id="textcolor739"><span>static</span></span><span>&nbsp;</span><span id="textcolor740"><span>void</span></span><span>&nbsp;__exit&nbsp;procfs2_exit(</span><span id="textcolor741"><span>void</span></span><span>)</span> 
<a id="x1-35186r89"></a><span>89</span><span>{</span> 
<a id="x1-35188r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;proc_remove(our_proc_file);</span> 
<a id="x1-35190r91"></a><span>91</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor742"><span>"/proc/%s&nbsp;removed</span></span><span id="textcolor743"><span>\n</span></span><span id="textcolor744"><span>"</span></span><span>,&nbsp;PROCFS_NAME);</span> 
<a id="x1-35192r92"></a><span>92</span><span>}</span> 
<a id="x1-35194r93"></a><span>93</span> 
<a id="x1-35196r94"></a><span>94</span><span>module_init(procfs2_init);</span> 
<a id="x1-35198r95"></a><span>95</span><span>module_exit(procfs2_exit);</span> 
<a id="x1-35200r96"></a><span>96</span> 
<a id="x1-35202r97"></a><span>97</span><span>MODULE_LICENSE(</span><span id="textcolor745"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1201 -->
   <h4 id="manage-proc-file-with-standard-filesystem"><span>7.3   </span> <a id="x1-360007.3"></a>Manage /proc file with standard filesystem</h4>
<!-- l. 1203 --><p>We have seen how to read and write a <span><span><span>/proc</span></span></span> file with the <span><span><span>/proc</span></span></span> interface. But it is
also possible to manage <span><span><span>/proc</span></span></span> file with inodes. The main concern is to use advanced
functions, like permissions.
</p><!-- l. 1207 --><p>   In Linux, there is a standard mechanism for file system registration.
Since every file system has to have its own functions to handle inode and file
operations, there is a special structure to hold pointers to all those functions,
<code> <span id="textcolor746"><span>struct</span></span><span>&nbsp;inode_operations</span>
</code>, which includes a pointer to <code>  <span id="textcolor747"><span>struct</span></span><span>&nbsp;proc_ops</span>
</code>.
</p><!-- l. 1210 --><p>   The difference between file and inode operations is that file operations deal with
the file itself whereas inode operations deal with ways of referencing the file, such as
creating links to it.
</p><!-- l. 1212 --><p>   In <span><span><span>/proc</span></span></span>, whenever we register a new file, we’re allowed to specify which
<code> <span id="textcolor748"><span>struct</span></span><span>&nbsp;inode_operations</span>
</code> will be used to access to it. This is the mechanism we use, a
<code> <span id="textcolor749"><span>struct</span></span><span>&nbsp;inode_operations</span>
                                                                  

                                                                  
</code> which includes a pointer to a <code>  <span id="textcolor750"><span>struct</span></span><span>&nbsp;proc_ops</span>
</code> which includes pointers to our <code>  <span>procfs_read</span>
</code> and <code>  <span>procfs_write</span>
</code> functions.
</p><!-- l. 1215 --><p>   Another interesting point here is the
<code> <span>module_permission</span>
</code> function. This function is called whenever a process tries to do something with the
<span><span><span>/proc</span></span></span> file, and it can decide whether to allow access or not. Right now it is only
based on the operation and the uid of the current user (as available in current, a
pointer to a structure which includes information on the currently running
process), but it could be based on anything we like, such as what other
processes are doing with the same file, the time of day, or the last input we
received.
</p><!-- l. 1219 --><p>   It is important to note that the standard roles of read and write are reversed in
the kernel. Read functions are used for output, whereas write functions are used for
input. The reason for that is that read and write refer to the user’s point of view — if
a process reads something from the kernel, then the kernel needs to output it, and
if a process writes something to the kernel, then the kernel receives it as
input.
</p><!-- l. 1 -->
   <pre id="fancyvrb49"><a id="x1-36010r1"></a><span>1</span><span id="textcolor751"><span>/*</span></span> 
<a id="x1-36012r2"></a><span>2</span><span id="textcolor752"><span>&nbsp;*&nbsp;procfs3.c</span></span> 
<a id="x1-36014r3"></a><span>3</span><span id="textcolor753"><span>&nbsp;*/</span></span> 
<a id="x1-36016r4"></a><span>4</span> 
<a id="x1-36018r5"></a><span>5</span><span id="textcolor754"><span>#include</span></span><span>&nbsp;</span><span id="textcolor755"><span>&lt;linux/kernel.h&gt;</span></span> 
<a id="x1-36020r6"></a><span>6</span><span id="textcolor756"><span>#include</span></span><span>&nbsp;</span><span id="textcolor757"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-36022r7"></a><span>7</span><span id="textcolor758"><span>#include</span></span><span>&nbsp;</span><span id="textcolor759"><span>&lt;linux/proc_fs.h&gt;</span></span> 
<a id="x1-36024r8"></a><span>8</span><span id="textcolor760"><span>#include</span></span><span>&nbsp;</span><span id="textcolor761"><span>&lt;linux/sched.h&gt;</span></span> 
<a id="x1-36026r9"></a><span>9</span><span id="textcolor762"><span>#include</span></span><span>&nbsp;</span><span id="textcolor763"><span>&lt;linux/uaccess.h&gt;</span></span> 
<a id="x1-36028r10"></a><span>10</span><span id="textcolor764"><span>#include</span></span><span>&nbsp;</span><span id="textcolor765"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-36030r11"></a><span>11</span><span id="textcolor766"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;10,&nbsp;0)</span></span> 
<a id="x1-36032r12"></a><span>12</span><span id="textcolor767"><span>#include</span></span><span>&nbsp;</span><span id="textcolor768"><span>&lt;linux/minmax.h&gt;</span></span> 
<a id="x1-36034r13"></a><span>13</span><span id="textcolor769"><span>#endif</span></span> 
<a id="x1-36036r14"></a><span>14</span> 
<a id="x1-36038r15"></a><span>15</span><span id="textcolor770"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;6,&nbsp;0)</span></span> 
<a id="x1-36040r16"></a><span>16</span><span id="textcolor771"><span>#define&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-36042r17"></a><span>17</span><span id="textcolor772"><span>#endif</span></span> 
<a id="x1-36044r18"></a><span>18</span> 
<a id="x1-36046r19"></a><span>19</span><span id="textcolor773"><span>#define&nbsp;PROCFS_MAX_SIZE&nbsp;2048UL</span></span> 
<a id="x1-36048r20"></a><span>20</span><span id="textcolor774"><span>#define&nbsp;PROCFS_ENTRY_FILENAME&nbsp;"buffer2k"</span></span> 
<a id="x1-36050r21"></a><span>21</span> 
<a id="x1-36052r22"></a><span>22</span><span id="textcolor775"><span>static</span></span><span>&nbsp;</span><span id="textcolor776"><span>struct</span></span><span>&nbsp;proc_dir_entry&nbsp;*our_proc_file;</span> 
<a id="x1-36054r23"></a><span>23</span><span id="textcolor777"><span>static</span></span><span>&nbsp;</span><span id="textcolor778"><span>char</span></span><span>&nbsp;procfs_buffer[PROCFS_MAX_SIZE];</span> 
<a id="x1-36056r24"></a><span>24</span><span id="textcolor779"><span>static</span></span><span>&nbsp;</span><span id="textcolor780"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor781"><span>long</span></span><span>&nbsp;procfs_buffer_size&nbsp;=&nbsp;0;</span> 
<a id="x1-36058r25"></a><span>25</span> 
<a id="x1-36060r26"></a><span>26</span><span id="textcolor782"><span>static</span></span><span>&nbsp;</span><span id="textcolor783"><span>ssize_t</span></span><span>&nbsp;procfs_read(</span><span id="textcolor784"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor785"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-36062r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor786"><span>size_t</span></span><span>&nbsp;length,&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-36064r28"></a><span>28</span><span>{</span> 
<a id="x1-36066r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor787"><span>if</span></span><span>&nbsp;(*offset&nbsp;||&nbsp;procfs_buffer_size&nbsp;==&nbsp;0)&nbsp;{</span> 
<a id="x1-36068r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor788"><span>"procfs_read:&nbsp;END</span></span><span id="textcolor789"><span>\n</span></span><span id="textcolor790"><span>"</span></span><span>);</span> 
<a id="x1-36070r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;=&nbsp;0;</span> 
<a id="x1-36072r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor791"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-36074r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-36076r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;procfs_buffer_size&nbsp;=&nbsp;min(procfs_buffer_size,&nbsp;length);</span> 
<a id="x1-36078r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor792"><span>if</span></span><span>&nbsp;(copy_to_user(buffer,&nbsp;procfs_buffer,&nbsp;procfs_buffer_size))</span> 
<a id="x1-36080r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor793"><span>return</span></span><span>&nbsp;-EFAULT;</span> 
<a id="x1-36082r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;procfs_buffer_size;</span> 
<a id="x1-36084r38"></a><span>38</span> 
<a id="x1-36086r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor794"><span>"procfs_read:&nbsp;read&nbsp;%lu&nbsp;bytes</span></span><span id="textcolor795"><span>\n</span></span><span id="textcolor796"><span>"</span></span><span>,&nbsp;procfs_buffer_size);</span> 
<a id="x1-36088r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor797"><span>return</span></span><span>&nbsp;procfs_buffer_size;</span> 
<a id="x1-36090r41"></a><span>41</span><span>}</span> 
<a id="x1-36092r42"></a><span>42</span><span id="textcolor798"><span>static</span></span><span>&nbsp;</span><span id="textcolor799"><span>ssize_t</span></span><span>&nbsp;procfs_write(</span><span id="textcolor800"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor801"><span>const</span></span><span>&nbsp;</span><span id="textcolor802"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-36094r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor803"><span>size_t</span></span><span>&nbsp;len,&nbsp;loff_t&nbsp;*off)</span> 
<a id="x1-36096r44"></a><span>44</span><span>{</span> 
<a id="x1-36098r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;procfs_buffer_size&nbsp;=&nbsp;min(PROCFS_MAX_SIZE,&nbsp;len);</span> 
<a id="x1-36100r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor804"><span>if</span></span><span>&nbsp;(copy_from_user(procfs_buffer,&nbsp;buffer,&nbsp;procfs_buffer_size))</span> 
<a id="x1-36102r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor805"><span>return</span></span><span>&nbsp;-EFAULT;</span> 
<a id="x1-36104r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*off&nbsp;+=&nbsp;procfs_buffer_size;</span> 
<a id="x1-36106r49"></a><span>49</span> 
<a id="x1-36108r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor806"><span>"procfs_write:&nbsp;write&nbsp;%lu&nbsp;bytes</span></span><span id="textcolor807"><span>\n</span></span><span id="textcolor808"><span>"</span></span><span>,&nbsp;procfs_buffer_size);</span> 
<a id="x1-36110r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor809"><span>return</span></span><span>&nbsp;procfs_buffer_size;</span> 
<a id="x1-36112r52"></a><span>52</span><span>}</span> 
<a id="x1-36114r53"></a><span>53</span><span id="textcolor810"><span>static</span></span><span>&nbsp;</span><span id="textcolor811"><span>int</span></span><span>&nbsp;procfs_open(</span><span id="textcolor812"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor813"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-36116r54"></a><span>54</span><span>{</span> 
<a id="x1-36118r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;try_module_get(THIS_MODULE);</span> 
<a id="x1-36120r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor814"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-36122r57"></a><span>57</span><span>}</span> 
<a id="x1-36124r58"></a><span>58</span><span id="textcolor815"><span>static</span></span><span>&nbsp;</span><span id="textcolor816"><span>int</span></span><span>&nbsp;procfs_close(</span><span id="textcolor817"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor818"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-36126r59"></a><span>59</span><span>{</span> 
<a id="x1-36128r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-36130r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor819"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-36132r62"></a><span>62</span><span>}</span> 
<a id="x1-36134r63"></a><span>63</span> 
<a id="x1-36136r64"></a><span>64</span><span id="textcolor820"><span>#ifdef&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-36138r65"></a><span>65</span><span id="textcolor821"><span>static</span></span><span>&nbsp;</span><span id="textcolor822"><span>struct</span></span><span>&nbsp;proc_ops&nbsp;file_ops_4_our_proc_file&nbsp;=&nbsp;{</span> 
<a id="x1-36140r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_read&nbsp;=&nbsp;procfs_read,</span> 
<a id="x1-36142r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_write&nbsp;=&nbsp;procfs_write,</span> 
<a id="x1-36144r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_open&nbsp;=&nbsp;procfs_open,</span> 
<a id="x1-36146r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_release&nbsp;=&nbsp;procfs_close,</span> 
<a id="x1-36148r70"></a><span>70</span><span>};</span> 
<a id="x1-36150r71"></a><span>71</span><span id="textcolor823"><span>#else</span></span> 
<a id="x1-36152r72"></a><span>72</span><span id="textcolor824"><span>static</span></span><span>&nbsp;</span><span id="textcolor825"><span>const</span></span><span>&nbsp;</span><span id="textcolor826"><span>struct</span></span><span>&nbsp;file_operations&nbsp;file_ops_4_our_proc_file&nbsp;=&nbsp;{</span> 
<a id="x1-36154r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;procfs_read,</span> 
<a id="x1-36156r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;procfs_write,</span> 
<a id="x1-36158r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;procfs_open,</span> 
<a id="x1-36160r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;procfs_close,</span> 
<a id="x1-36162r77"></a><span>77</span><span>};</span> 
<a id="x1-36164r78"></a><span>78</span><span id="textcolor827"><span>#endif</span></span> 
<a id="x1-36166r79"></a><span>79</span> 
<a id="x1-36168r80"></a><span>80</span><span id="textcolor828"><span>static</span></span><span>&nbsp;</span><span id="textcolor829"><span>int</span></span><span>&nbsp;__init&nbsp;procfs3_init(</span><span id="textcolor830"><span>void</span></span><span>)</span> 
<a id="x1-36170r81"></a><span>81</span><span>{</span> 
<a id="x1-36172r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;our_proc_file&nbsp;=&nbsp;proc_create(PROCFS_ENTRY_FILENAME,&nbsp;0644,&nbsp;NULL,</span> 
<a id="x1-36174r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;file_ops_4_our_proc_file);</span> 
<a id="x1-36176r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor831"><span>if</span></span><span>&nbsp;(our_proc_file&nbsp;==&nbsp;NULL)&nbsp;{</span> 
<a id="x1-36178r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor832"><span>"Error:&nbsp;Could&nbsp;not&nbsp;initialize&nbsp;/proc/%s</span></span><span id="textcolor833"><span>\n</span></span><span id="textcolor834"><span>"</span></span><span>,</span> 
<a id="x1-36180r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PROCFS_ENTRY_FILENAME);</span> 
<a id="x1-36182r87"></a><span>87</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor835"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-36184r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-36186r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;proc_set_size(our_proc_file,&nbsp;80);</span> 
<a id="x1-36188r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;proc_set_user(our_proc_file,&nbsp;GLOBAL_ROOT_UID,&nbsp;GLOBAL_ROOT_GID);</span> 
<a id="x1-36190r91"></a><span>91</span> 
<a id="x1-36192r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor836"><span>"/proc/%s&nbsp;created</span></span><span id="textcolor837"><span>\n</span></span><span id="textcolor838"><span>"</span></span><span>,&nbsp;PROCFS_ENTRY_FILENAME);</span> 
<a id="x1-36194r93"></a><span>93</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor839"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-36196r94"></a><span>94</span><span>}</span> 
<a id="x1-36198r95"></a><span>95</span> 
<a id="x1-36200r96"></a><span>96</span><span id="textcolor840"><span>static</span></span><span>&nbsp;</span><span id="textcolor841"><span>void</span></span><span>&nbsp;__exit&nbsp;procfs3_exit(</span><span id="textcolor842"><span>void</span></span><span>)</span> 
<a id="x1-36202r97"></a><span>97</span><span>{</span> 
<a id="x1-36204r98"></a><span>98</span><span>&nbsp;&nbsp;&nbsp;&nbsp;remove_proc_entry(PROCFS_ENTRY_FILENAME,&nbsp;NULL);</span> 
<a id="x1-36206r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor843"><span>"/proc/%s&nbsp;removed</span></span><span id="textcolor844"><span>\n</span></span><span id="textcolor845"><span>"</span></span><span>,&nbsp;PROCFS_ENTRY_FILENAME);</span> 
<a id="x1-36208r100"></a><span>100</span><span>}</span> 
<a id="x1-36210r101"></a><span>101</span> 
<a id="x1-36212r102"></a><span>102</span><span>module_init(procfs3_init);</span> 
<a id="x1-36214r103"></a><span>103</span><span>module_exit(procfs3_exit);</span> 
<a id="x1-36216r104"></a><span>104</span> 
<a id="x1-36218r105"></a><span>105</span><span>MODULE_LICENSE(</span><span id="textcolor846"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1225 --><p>   Still hungry for procfs examples? Well, first of all keep in mind, there are rumors
around, claiming that procfs is on its way out, consider using <span><span><span>sysfs</span></span></span> instead. Consider
using this mechanism, in case you want to document something kernel related
yourself.
</p><!-- l. 1229 -->
   <h4 id="manage-proc-file-with-seqfile"><span>7.4   </span> <a id="x1-370007.4"></a>Manage /proc file with seq_file</h4>
<!-- l. 1231 --><p>As we have seen, writing a <span><span><span>/proc</span></span></span> file may be quite “complex”.
So to help people writing <span><span><span>/proc</span></span></span> file, there is an API named
<code> <span>seq_file</span>
</code> that helps formatting a <span><span><span>/proc</span></span></span> file for output. It is based on sequence, which is composed of
3 functions: <code>  <span>start()</span>
</code>, <code>  <span>next()</span>
</code>, and <code>  <span>stop()</span>
</code>. The <code>  <span>seq_file</span>
</code> API starts a sequence when a user read the <span><span><span>/proc</span></span></span> file.
</p><!-- l. 1236 --><p>   A sequence begins with the call of the function
<code> <span>start()</span>
</code>. If the return is a non <code>  <span>NULL</span>
</code> value, the function <code>  <span>next()</span>
</code> is called; otherwise, the <code>  <span>stop()</span>
                                                                  

                                                                  
</code> function is called directly. This function is an iterator, the goal is to go through all the data.
Each time <code>  <span>next()</span>
</code> is called, the function <code>  <span>show()</span>
</code> is also called. It writes data values in the buffer read by the user. The function
<code> <span>next()</span>
</code> is called until it returns <code>  <span>NULL</span>
</code>. The sequence ends when <code>  <span>next()</span>
</code> returns <code>  <span>NULL</span>
</code>, then the function <code>  <span>stop()</span>
</code> is called.
</p><!-- l. 1244 --><p>   BE CAREFUL: when a sequence is finished, another one starts. That means that at the end
of function <code>  <span>stop()</span>
</code>, the function <code>  <span>start()</span>
</code> is called again. This loop finishes when the function
<code> <span>start()</span>
</code> returns <code>  <span>NULL</span>
</code>. You can see a scheme of this in the Figure&nbsp;<a href="#ignorespaces-how-seqfile-works">1<!-- tex4ht:ref: img:seqfile  --></a>.
</p>
   <figure id="ignorespaces-how-seqfile-works"> 

                                                                  

                                                                  
<a id="x1-37021r1"></a>
                                                                  

                                                                  
<!-- l. 1251 --><p><img alt="srrsYNNYtaenetoeooertuetupsstrxr((ntn))( tis)istrr teeaNreNatUaUtmLtLmeLmLen?e?ntntt  " src="https://sysprog21.github.io/lkmpg/lkmpg-for-ht1x.svg">
</p>
<figcaption><span>Figure&nbsp;1:</span><span>How seq_file works</span></figcaption><!-- tex4ht:label?: x1-37021r1  -->
                                                                  

                                                                  
   </figure>
<!-- l. 1270 --><p>   The <code>  <span>seq_file</span>
</code> provides basic functions for <code>  <span>proc_ops</span>
</code>, such as <code>  <span>seq_read</span>
</code>, <code>  <span>seq_lseek</span>
</code>, and some others. But nothing to write in the <span><span><span>/proc</span></span></span> file. Of course, you can still use
the same way as in the previous example.
</p>
   <pre id="fancyvrb50"><a id="x1-37027r1"></a><span>1</span><span id="textcolor847"><span>/*</span></span> 
<a id="x1-37029r2"></a><span>2</span><span id="textcolor848"><span>&nbsp;*&nbsp;procfs4.c&nbsp;-&nbsp;&nbsp;create&nbsp;a&nbsp;"file"&nbsp;in&nbsp;/proc</span></span> 
<a id="x1-37031r3"></a><span>3</span><span id="textcolor849"><span>&nbsp;*&nbsp;This&nbsp;program&nbsp;uses&nbsp;the&nbsp;seq_file&nbsp;library&nbsp;to&nbsp;manage&nbsp;the&nbsp;/proc&nbsp;file.</span></span> 
<a id="x1-37033r4"></a><span>4</span><span id="textcolor850"><span>&nbsp;*/</span></span> 
<a id="x1-37035r5"></a><span>5</span> 
<a id="x1-37037r6"></a><span>6</span><span id="textcolor851"><span>#include</span></span><span>&nbsp;</span><span id="textcolor852"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;We&nbsp;are&nbsp;doing&nbsp;kernel&nbsp;work&nbsp;*/</span></span> 
<a id="x1-37039r7"></a><span>7</span><span id="textcolor853"><span>#include</span></span><span>&nbsp;</span><span id="textcolor854"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Specifically,&nbsp;a&nbsp;module&nbsp;*/</span></span> 
<a id="x1-37041r8"></a><span>8</span><span id="textcolor855"><span>#include</span></span><span>&nbsp;</span><span id="textcolor856"><span>&lt;linux/proc_fs.h&gt;&nbsp;/*&nbsp;Necessary&nbsp;because&nbsp;we&nbsp;use&nbsp;proc&nbsp;fs&nbsp;*/</span></span> 
<a id="x1-37043r9"></a><span>9</span><span id="textcolor857"><span>#include</span></span><span>&nbsp;</span><span id="textcolor858"><span>&lt;linux/seq_file.h&gt;&nbsp;/*&nbsp;for&nbsp;seq_file&nbsp;*/</span></span> 
<a id="x1-37045r10"></a><span>10</span><span id="textcolor859"><span>#include</span></span><span>&nbsp;</span><span id="textcolor860"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-37047r11"></a><span>11</span> 
<a id="x1-37049r12"></a><span>12</span><span id="textcolor861"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;6,&nbsp;0)</span></span> 
<a id="x1-37051r13"></a><span>13</span><span id="textcolor862"><span>#define&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-37053r14"></a><span>14</span><span id="textcolor863"><span>#endif</span></span> 
<a id="x1-37055r15"></a><span>15</span> 
<a id="x1-37057r16"></a><span>16</span><span id="textcolor864"><span>#define&nbsp;PROC_NAME&nbsp;"iter"</span></span> 
<a id="x1-37059r17"></a><span>17</span> 
<a id="x1-37061r18"></a><span>18</span><span id="textcolor865"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;a&nbsp;sequence.</span></span> 
<a id="x1-37063r19"></a><span>19</span><span id="textcolor866"><span>&nbsp;*&nbsp;ie,&nbsp;when:</span></span> 
<a id="x1-37065r20"></a><span>20</span><span id="textcolor867"><span>&nbsp;*&nbsp;&nbsp;&nbsp;-&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;read&nbsp;(first&nbsp;time)</span></span> 
<a id="x1-37067r21"></a><span>21</span><span id="textcolor868"><span>&nbsp;*&nbsp;&nbsp;&nbsp;-&nbsp;after&nbsp;the&nbsp;function&nbsp;stop&nbsp;(end&nbsp;of&nbsp;sequence)</span></span> 
<a id="x1-37069r22"></a><span>22</span><span id="textcolor869"><span>&nbsp;*/</span></span> 
<a id="x1-37071r23"></a><span>23</span><span id="textcolor870"><span>static</span></span><span>&nbsp;</span><span id="textcolor871"><span>void</span></span><span>&nbsp;*my_seq_start(</span><span id="textcolor872"><span>struct</span></span><span>&nbsp;seq_file&nbsp;*s,&nbsp;loff_t&nbsp;*pos)</span> 
<a id="x1-37073r24"></a><span>24</span><span>{</span> 
<a id="x1-37075r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor873"><span>static</span></span><span>&nbsp;</span><span id="textcolor874"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor875"><span>long</span></span><span>&nbsp;counter&nbsp;=&nbsp;0;</span> 
<a id="x1-37077r26"></a><span>26</span> 
<a id="x1-37079r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor876"><span>/*&nbsp;beginning&nbsp;a&nbsp;new&nbsp;sequence?&nbsp;*/</span></span> 
<a id="x1-37081r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor877"><span>if</span></span><span>&nbsp;(*pos&nbsp;==&nbsp;0)&nbsp;{</span> 
<a id="x1-37083r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor878"><span>/*&nbsp;yes&nbsp;=&gt;&nbsp;return&nbsp;a&nbsp;non&nbsp;null&nbsp;value&nbsp;to&nbsp;begin&nbsp;the&nbsp;sequence&nbsp;*/</span></span> 
<a id="x1-37085r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor879"><span>return</span></span><span>&nbsp;&amp;counter;</span> 
<a id="x1-37087r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-37089r32"></a><span>32</span> 
<a id="x1-37091r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor880"><span>/*&nbsp;no&nbsp;=&gt;&nbsp;it&nbsp;is&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;sequence,&nbsp;return&nbsp;end&nbsp;to&nbsp;stop&nbsp;reading&nbsp;*/</span></span> 
<a id="x1-37093r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*pos&nbsp;=&nbsp;0;</span> 
<a id="x1-37095r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor881"><span>return</span></span><span>&nbsp;NULL;</span> 
<a id="x1-37097r36"></a><span>36</span><span>}</span> 
<a id="x1-37099r37"></a><span>37</span> 
<a id="x1-37101r38"></a><span>38</span><span id="textcolor882"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;after&nbsp;the&nbsp;beginning&nbsp;of&nbsp;a&nbsp;sequence.</span></span> 
<a id="x1-37103r39"></a><span>39</span><span id="textcolor883"><span>&nbsp;*&nbsp;It&nbsp;is&nbsp;called&nbsp;until&nbsp;the&nbsp;return&nbsp;is&nbsp;NULL&nbsp;(this&nbsp;ends&nbsp;the&nbsp;sequence).</span></span> 
<a id="x1-37105r40"></a><span>40</span><span id="textcolor884"><span>&nbsp;*/</span></span> 
<a id="x1-37107r41"></a><span>41</span><span id="textcolor885"><span>static</span></span><span>&nbsp;</span><span id="textcolor886"><span>void</span></span><span>&nbsp;*my_seq_next(</span><span id="textcolor887"><span>struct</span></span><span>&nbsp;seq_file&nbsp;*s,&nbsp;</span><span id="textcolor888"><span>void</span></span><span>&nbsp;*v,&nbsp;loff_t&nbsp;*pos)</span> 
<a id="x1-37109r42"></a><span>42</span><span>{</span> 
<a id="x1-37111r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor889"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor890"><span>long</span></span><span>&nbsp;*tmp_v&nbsp;=&nbsp;(</span><span id="textcolor891"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor892"><span>long</span></span><span>&nbsp;*)v;</span> 
<a id="x1-37113r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;(*tmp_v)++;</span> 
<a id="x1-37115r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;(*pos)++;</span> 
<a id="x1-37117r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor893"><span>return</span></span><span>&nbsp;NULL;</span> 
<a id="x1-37119r47"></a><span>47</span><span>}</span> 
<a id="x1-37121r48"></a><span>48</span> 
<a id="x1-37123r49"></a><span>49</span><span id="textcolor894"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;a&nbsp;sequence.&nbsp;*/</span></span> 
<a id="x1-37125r50"></a><span>50</span><span id="textcolor895"><span>static</span></span><span>&nbsp;</span><span id="textcolor896"><span>void</span></span><span>&nbsp;my_seq_stop(</span><span id="textcolor897"><span>struct</span></span><span>&nbsp;seq_file&nbsp;*s,&nbsp;</span><span id="textcolor898"><span>void</span></span><span>&nbsp;*v)</span> 
<a id="x1-37127r51"></a><span>51</span><span>{</span> 
<a id="x1-37129r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor899"><span>/*&nbsp;nothing&nbsp;to&nbsp;do,&nbsp;we&nbsp;use&nbsp;a&nbsp;static&nbsp;value&nbsp;in&nbsp;start()&nbsp;*/</span></span> 
<a id="x1-37131r53"></a><span>53</span><span>}</span> 
<a id="x1-37133r54"></a><span>54</span> 
<a id="x1-37135r55"></a><span>55</span><span id="textcolor900"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;for&nbsp;each&nbsp;"step"&nbsp;of&nbsp;a&nbsp;sequence.&nbsp;*/</span></span> 
<a id="x1-37137r56"></a><span>56</span><span id="textcolor901"><span>static</span></span><span>&nbsp;</span><span id="textcolor902"><span>int</span></span><span>&nbsp;my_seq_show(</span><span id="textcolor903"><span>struct</span></span><span>&nbsp;seq_file&nbsp;*s,&nbsp;</span><span id="textcolor904"><span>void</span></span><span>&nbsp;*v)</span> 
<a id="x1-37139r57"></a><span>57</span><span>{</span> 
<a id="x1-37141r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*spos&nbsp;=&nbsp;(loff_t&nbsp;*)v;</span> 
<a id="x1-37143r59"></a><span>59</span> 
<a id="x1-37145r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;seq_printf(s,&nbsp;</span><span id="textcolor905"><span>"%Ld</span></span><span id="textcolor906"><span>\n</span></span><span id="textcolor907"><span>"</span></span><span>,&nbsp;*spos);</span> 
<a id="x1-37147r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor908"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-37149r62"></a><span>62</span><span>}</span> 
<a id="x1-37151r63"></a><span>63</span> 
<a id="x1-37153r64"></a><span>64</span><span id="textcolor909"><span>/*&nbsp;This&nbsp;structure&nbsp;gather&nbsp;"function"&nbsp;to&nbsp;manage&nbsp;the&nbsp;sequence&nbsp;*/</span></span> 
<a id="x1-37155r65"></a><span>65</span><span id="textcolor910"><span>static</span></span><span>&nbsp;</span><span id="textcolor911"><span>struct</span></span><span>&nbsp;seq_operations&nbsp;my_seq_ops&nbsp;=&nbsp;{</span> 
<a id="x1-37157r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.start&nbsp;=&nbsp;my_seq_start,</span> 
<a id="x1-37159r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.next&nbsp;=&nbsp;my_seq_next,</span> 
<a id="x1-37161r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.stop&nbsp;=&nbsp;my_seq_stop,</span> 
<a id="x1-37163r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.show&nbsp;=&nbsp;my_seq_show,</span> 
<a id="x1-37165r70"></a><span>70</span><span>};</span> 
<a id="x1-37167r71"></a><span>71</span> 
<a id="x1-37169r72"></a><span>72</span><span id="textcolor912"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;when&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;open.&nbsp;*/</span></span> 
<a id="x1-37171r73"></a><span>73</span><span id="textcolor913"><span>static</span></span><span>&nbsp;</span><span id="textcolor914"><span>int</span></span><span>&nbsp;my_open(</span><span id="textcolor915"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor916"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-37173r74"></a><span>74</span><span>{</span> 
<a id="x1-37175r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor917"><span>return</span></span><span>&nbsp;seq_open(file,&nbsp;&amp;my_seq_ops);</span> 
<a id="x1-37177r76"></a><span>76</span><span>};</span> 
<a id="x1-37179r77"></a><span>77</span> 
<a id="x1-37181r78"></a><span>78</span><span id="textcolor918"><span>/*&nbsp;This&nbsp;structure&nbsp;gather&nbsp;"function"&nbsp;that&nbsp;manage&nbsp;the&nbsp;/proc&nbsp;file&nbsp;*/</span></span> 
<a id="x1-37183r79"></a><span>79</span><span id="textcolor919"><span>#ifdef&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-37185r80"></a><span>80</span><span id="textcolor920"><span>static</span></span><span>&nbsp;</span><span id="textcolor921"><span>const</span></span><span>&nbsp;</span><span id="textcolor922"><span>struct</span></span><span>&nbsp;proc_ops&nbsp;my_file_ops&nbsp;=&nbsp;{</span> 
<a id="x1-37187r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_open&nbsp;=&nbsp;my_open,</span> 
<a id="x1-37189r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_read&nbsp;=&nbsp;seq_read,</span> 
<a id="x1-37191r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_lseek&nbsp;=&nbsp;seq_lseek,</span> 
<a id="x1-37193r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_release&nbsp;=&nbsp;seq_release,</span> 
<a id="x1-37195r85"></a><span>85</span><span>};</span> 
<a id="x1-37197r86"></a><span>86</span><span id="textcolor923"><span>#else</span></span> 
<a id="x1-37199r87"></a><span>87</span><span id="textcolor924"><span>static</span></span><span>&nbsp;</span><span id="textcolor925"><span>const</span></span><span>&nbsp;</span><span id="textcolor926"><span>struct</span></span><span>&nbsp;file_operations&nbsp;my_file_ops&nbsp;=&nbsp;{</span> 
<a id="x1-37201r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;my_open,</span> 
<a id="x1-37203r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;seq_read,</span> 
<a id="x1-37205r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.llseek&nbsp;=&nbsp;seq_lseek,</span> 
<a id="x1-37207r91"></a><span>91</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;seq_release,</span> 
<a id="x1-37209r92"></a><span>92</span><span>};</span> 
<a id="x1-37211r93"></a><span>93</span><span id="textcolor927"><span>#endif</span></span> 
<a id="x1-37213r94"></a><span>94</span> 
<a id="x1-37215r95"></a><span>95</span><span id="textcolor928"><span>static</span></span><span>&nbsp;</span><span id="textcolor929"><span>int</span></span><span>&nbsp;__init&nbsp;procfs4_init(</span><span id="textcolor930"><span>void</span></span><span>)</span> 
<a id="x1-37217r96"></a><span>96</span><span>{</span> 
<a id="x1-37219r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor931"><span>struct</span></span><span>&nbsp;proc_dir_entry&nbsp;*entry;</span> 
<a id="x1-37221r98"></a><span>98</span> 
<a id="x1-37223r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;entry&nbsp;=&nbsp;proc_create(PROC_NAME,&nbsp;0,&nbsp;NULL,&nbsp;&amp;my_file_ops);</span> 
<a id="x1-37225r100"></a><span>100</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor932"><span>if</span></span><span>&nbsp;(entry&nbsp;==&nbsp;NULL)&nbsp;{</span> 
<a id="x1-37227r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor933"><span>"Error:&nbsp;Could&nbsp;not&nbsp;initialize&nbsp;/proc/%s</span></span><span id="textcolor934"><span>\n</span></span><span id="textcolor935"><span>"</span></span><span>,&nbsp;PROC_NAME);</span> 
<a id="x1-37229r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor936"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-37231r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-37233r104"></a><span>104</span> 
<a id="x1-37235r105"></a><span>105</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor937"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-37237r106"></a><span>106</span><span>}</span> 
<a id="x1-37239r107"></a><span>107</span> 
<a id="x1-37241r108"></a><span>108</span><span id="textcolor938"><span>static</span></span><span>&nbsp;</span><span id="textcolor939"><span>void</span></span><span>&nbsp;__exit&nbsp;procfs4_exit(</span><span id="textcolor940"><span>void</span></span><span>)</span> 
<a id="x1-37243r109"></a><span>109</span><span>{</span> 
<a id="x1-37245r110"></a><span>110</span><span>&nbsp;&nbsp;&nbsp;&nbsp;remove_proc_entry(PROC_NAME,&nbsp;NULL);</span> 
<a id="x1-37247r111"></a><span>111</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor941"><span>"/proc/%s&nbsp;removed</span></span><span id="textcolor942"><span>\n</span></span><span id="textcolor943"><span>"</span></span><span>,&nbsp;PROC_NAME);</span> 
<a id="x1-37249r112"></a><span>112</span><span>}</span> 
<a id="x1-37251r113"></a><span>113</span> 
<a id="x1-37253r114"></a><span>114</span><span>module_init(procfs4_init);</span> 
<a id="x1-37255r115"></a><span>115</span><span>module_exit(procfs4_exit);</span> 
<a id="x1-37257r116"></a><span>116</span> 
<a id="x1-37259r117"></a><span>117</span><span>MODULE_LICENSE(</span><span id="textcolor944"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1276 --><p>   If you want more information, you can read this web page:
</p>
     <ul>
     <li><a href="https://lwn.net/Articles/22355/"><span>https://lwn.net/Articles/22355/</span></a>
     </li>
     <li><a href="https://kernelnewbies.org/Documents/SeqFileHowTo"><span>https://kernelnewbies.org/Documents/SeqFileHowTo</span></a></li></ul>
<!-- l. 1283 --><p>   You can also read the code of <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/fs/seq_file.c">fs/seq_file.c</a> in the linux kernel.
</p>
   <h3 id="sysfs-interacting-with-your-module"><span>8   </span> <a id="x1-380008"></a>sysfs: Interacting with your module</h3>
<!-- l. 1287 --><p><span>sysfs </span>allows you to interact with the running kernel from userspace by reading or
setting variables inside of modules. This can be useful for debugging purposes, or just
as an interface for applications or scripts. You can find sysfs directories and files
under the <span><span><span>/sys</span></span></span> directory on your system.
</p><!-- l. 1 -->
   <pre id="fancyvrb51"><a id="x1-38003r1"></a><span>1</span><span>ls&nbsp;-l&nbsp;/sys</span></pre>
<!-- l. 1295 --><p>   Attributes can be exported for kobjects in the form of regular files in the
filesystem. Sysfs forwards file I/O operations to methods defined for the attributes,
providing a means to read and write kernel attributes.
</p><!-- l. 1298 --><p>   An attribute definition in simply:
</p><!-- l. 1 -->
   <pre id="fancyvrb52"><a id="x1-38013r1"></a><span>1</span><span id="textcolor945"><span>struct</span></span><span>&nbsp;attribute&nbsp;{</span> 
<a id="x1-38015r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor946"><span>char</span></span><span>&nbsp;*name;</span> 
<a id="x1-38017r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor947"><span>struct</span></span><span>&nbsp;module&nbsp;*owner;</span> 
<a id="x1-38019r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;umode_t&nbsp;mode;</span> 
<a id="x1-38021r5"></a><span>5</span><span>};</span> 
<a id="x1-38023r6"></a><span>6</span> 
<a id="x1-38025r7"></a><span>7</span><span id="textcolor948"><span>int</span></span><span>&nbsp;sysfs_create_file(</span><span id="textcolor949"><span>struct</span></span><span>&nbsp;kobject&nbsp;*&nbsp;kobj,&nbsp;</span><span id="textcolor950"><span>const</span></span><span>&nbsp;</span><span id="textcolor951"><span>struct</span></span><span>&nbsp;attribute&nbsp;*&nbsp;attr);</span> 
<a id="x1-38027r8"></a><span>8</span><span id="textcolor952"><span>void</span></span><span>&nbsp;sysfs_remove_file(</span><span id="textcolor953"><span>struct</span></span><span>&nbsp;kobject&nbsp;*&nbsp;kobj,&nbsp;</span><span id="textcolor954"><span>const</span></span><span>&nbsp;</span><span id="textcolor955"><span>struct</span></span><span>&nbsp;attribute&nbsp;*&nbsp;attr);</span></pre>
<!-- l. 1311 --><p>   For example, the driver model defines
<code> <span id="textcolor956"><span>struct</span></span><span>&nbsp;device_attribute</span>
</code> like:
</p><!-- l. 1 -->
   <pre id="fancyvrb53"><a id="x1-38040r1"></a><span>1</span><span id="textcolor957"><span>struct</span></span><span>&nbsp;device_attribute&nbsp;{</span> 
<a id="x1-38042r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor958"><span>struct</span></span><span>&nbsp;attribute&nbsp;attr;</span> 
<a id="x1-38044r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor959"><span>ssize_t</span></span><span>&nbsp;(*show)(</span><span id="textcolor960"><span>struct</span></span><span>&nbsp;device&nbsp;*dev,&nbsp;</span><span id="textcolor961"><span>struct</span></span><span>&nbsp;device_attribute&nbsp;*attr,</span> 
<a id="x1-38046r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor962"><span>char</span></span><span>&nbsp;*buf);</span> 
<a id="x1-38048r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor963"><span>ssize_t</span></span><span>&nbsp;(*store)(</span><span id="textcolor964"><span>struct</span></span><span>&nbsp;device&nbsp;*dev,&nbsp;</span><span id="textcolor965"><span>struct</span></span><span>&nbsp;device_attribute&nbsp;*attr,</span> 
<a id="x1-38050r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor966"><span>const</span></span><span>&nbsp;</span><span id="textcolor967"><span>char</span></span><span>&nbsp;*buf,&nbsp;</span><span id="textcolor968"><span>size_t</span></span><span>&nbsp;count);</span> 
<a id="x1-38052r7"></a><span>7</span><span>};</span> 
<a id="x1-38054r8"></a><span>8</span> 
<a id="x1-38056r9"></a><span>9</span><span id="textcolor969"><span>int</span></span><span>&nbsp;device_create_file(</span><span id="textcolor970"><span>struct</span></span><span>&nbsp;device&nbsp;*,&nbsp;</span><span id="textcolor971"><span>const</span></span><span>&nbsp;</span><span id="textcolor972"><span>struct</span></span><span>&nbsp;device_attribute&nbsp;*);</span> 
<a id="x1-38058r10"></a><span>10</span><span id="textcolor973"><span>void</span></span><span>&nbsp;device_remove_file(</span><span id="textcolor974"><span>struct</span></span><span>&nbsp;device&nbsp;*,&nbsp;</span><span id="textcolor975"><span>const</span></span><span>&nbsp;</span><span id="textcolor976"><span>struct</span></span><span>&nbsp;device_attribute&nbsp;*);</span></pre>
<!-- l. 1326 --><p>   To read or write attributes, <code>  <span>show()</span>
</code> or <code>  <span>store()</span>
</code> method must be specified when declaring the attribute. For the
common cases <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/sysfs.h">include/linux/sysfs.h</a> provides convenience macros
(<code>  <span>__ATTR</span>
</code>, <code>  <span>__ATTR_RO</span>
</code>, <code>  <span>__ATTR_WO</span>
</code>, etc.) to make defining attributes easier as well as making code more concise and
readable.
</p><!-- l. 1329 --><p>   An example of a hello world module which includes the creation of a variable
accessible via sysfs is given below.
</p><!-- l. 1 -->
   <pre id="fancyvrb54"><a id="x1-38065r1"></a><span>1</span><span id="textcolor977"><span>/*</span></span> 
<a id="x1-38067r2"></a><span>2</span><span id="textcolor978"><span>&nbsp;*&nbsp;hello-sysfs.c&nbsp;sysfs&nbsp;example</span></span> 
<a id="x1-38069r3"></a><span>3</span><span id="textcolor979"><span>&nbsp;*/</span></span> 
<a id="x1-38071r4"></a><span>4</span><span id="textcolor980"><span>#include</span></span><span>&nbsp;</span><span id="textcolor981"><span>&lt;linux/fs.h&gt;</span></span> 
<a id="x1-38073r5"></a><span>5</span><span id="textcolor982"><span>#include</span></span><span>&nbsp;</span><span id="textcolor983"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-38075r6"></a><span>6</span><span id="textcolor984"><span>#include</span></span><span>&nbsp;</span><span id="textcolor985"><span>&lt;linux/kobject.h&gt;</span></span> 
<a id="x1-38077r7"></a><span>7</span><span id="textcolor986"><span>#include</span></span><span>&nbsp;</span><span id="textcolor987"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-38079r8"></a><span>8</span><span id="textcolor988"><span>#include</span></span><span>&nbsp;</span><span id="textcolor989"><span>&lt;linux/string.h&gt;</span></span> 
<a id="x1-38081r9"></a><span>9</span><span id="textcolor990"><span>#include</span></span><span>&nbsp;</span><span id="textcolor991"><span>&lt;linux/sysfs.h&gt;</span></span> 
<a id="x1-38083r10"></a><span>10</span> 
<a id="x1-38085r11"></a><span>11</span><span id="textcolor992"><span>static</span></span><span>&nbsp;</span><span id="textcolor993"><span>struct</span></span><span>&nbsp;kobject&nbsp;*mymodule;</span> 
<a id="x1-38087r12"></a><span>12</span> 
<a id="x1-38089r13"></a><span>13</span><span id="textcolor994"><span>/*&nbsp;the&nbsp;variable&nbsp;you&nbsp;want&nbsp;to&nbsp;be&nbsp;able&nbsp;to&nbsp;change&nbsp;*/</span></span> 
<a id="x1-38091r14"></a><span>14</span><span id="textcolor995"><span>static</span></span><span>&nbsp;</span><span id="textcolor996"><span>int</span></span><span>&nbsp;myvariable&nbsp;=&nbsp;0;</span> 
<a id="x1-38093r15"></a><span>15</span> 
<a id="x1-38095r16"></a><span>16</span><span id="textcolor997"><span>static</span></span><span>&nbsp;</span><span id="textcolor998"><span>ssize_t</span></span><span>&nbsp;myvariable_show(</span><span id="textcolor999"><span>struct</span></span><span>&nbsp;kobject&nbsp;*kobj,</span> 
<a id="x1-38097r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1000"><span>struct</span></span><span>&nbsp;kobj_attribute&nbsp;*attr,&nbsp;</span><span id="textcolor1001"><span>char</span></span><span>&nbsp;*buf)</span> 
<a id="x1-38099r18"></a><span>18</span><span>{</span> 
<a id="x1-38101r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1002"><span>return</span></span><span>&nbsp;sprintf(buf,&nbsp;</span><span id="textcolor1003"><span>"%d</span></span><span id="textcolor1004"><span>\n</span></span><span id="textcolor1005"><span>"</span></span><span>,&nbsp;myvariable);</span> 
<a id="x1-38103r20"></a><span>20</span><span>}</span> 
<a id="x1-38105r21"></a><span>21</span> 
<a id="x1-38107r22"></a><span>22</span><span id="textcolor1006"><span>static</span></span><span>&nbsp;</span><span id="textcolor1007"><span>ssize_t</span></span><span>&nbsp;myvariable_store(</span><span id="textcolor1008"><span>struct</span></span><span>&nbsp;kobject&nbsp;*kobj,</span> 
<a id="x1-38109r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1009"><span>struct</span></span><span>&nbsp;kobj_attribute&nbsp;*attr,&nbsp;</span><span id="textcolor1010"><span>char</span></span><span>&nbsp;*buf,</span> 
<a id="x1-38111r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1011"><span>size_t</span></span><span>&nbsp;count)</span> 
<a id="x1-38113r25"></a><span>25</span><span>{</span> 
<a id="x1-38115r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sscanf(buf,&nbsp;</span><span id="textcolor1012"><span>"%du"</span></span><span>,&nbsp;&amp;myvariable);</span> 
<a id="x1-38117r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1013"><span>return</span></span><span>&nbsp;count;</span> 
<a id="x1-38119r28"></a><span>28</span><span>}</span> 
<a id="x1-38121r29"></a><span>29</span> 
<a id="x1-38123r30"></a><span>30</span><span id="textcolor1014"><span>static</span></span><span>&nbsp;</span><span id="textcolor1015"><span>struct</span></span><span>&nbsp;kobj_attribute&nbsp;myvariable_attribute&nbsp;=</span> 
<a id="x1-38125r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;__ATTR(myvariable,&nbsp;0660,&nbsp;myvariable_show,&nbsp;(</span><span id="textcolor1016"><span>void</span></span><span>&nbsp;*)myvariable_store);</span> 
<a id="x1-38127r32"></a><span>32</span> 
<a id="x1-38129r33"></a><span>33</span><span id="textcolor1017"><span>static</span></span><span>&nbsp;</span><span id="textcolor1018"><span>int</span></span><span>&nbsp;__init&nbsp;mymodule_init(</span><span id="textcolor1019"><span>void</span></span><span>)</span> 
<a id="x1-38131r34"></a><span>34</span><span>{</span> 
<a id="x1-38133r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1020"><span>int</span></span><span>&nbsp;error&nbsp;=&nbsp;0;</span> 
<a id="x1-38135r36"></a><span>36</span> 
<a id="x1-38137r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1021"><span>"mymodule:&nbsp;initialized</span></span><span id="textcolor1022"><span>\n</span></span><span id="textcolor1023"><span>"</span></span><span>);</span> 
<a id="x1-38139r38"></a><span>38</span> 
<a id="x1-38141r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;mymodule&nbsp;=&nbsp;kobject_create_and_add(</span><span id="textcolor1024"><span>"mymodule"</span></span><span>,&nbsp;kernel_kobj);</span> 
<a id="x1-38143r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1025"><span>if</span></span><span>&nbsp;(!mymodule)</span> 
<a id="x1-38145r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1026"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-38147r42"></a><span>42</span> 
<a id="x1-38149r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;error&nbsp;=&nbsp;sysfs_create_file(mymodule,&nbsp;&amp;myvariable_attribute.attr);</span> 
<a id="x1-38151r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1027"><span>if</span></span><span>&nbsp;(error)&nbsp;{</span> 
<a id="x1-38153r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1028"><span>"failed&nbsp;to&nbsp;create&nbsp;the&nbsp;myvariable&nbsp;file&nbsp;"</span></span> 
<a id="x1-38155r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1029"><span>"in&nbsp;/sys/kernel/mymodule</span></span><span id="textcolor1030"><span>\n</span></span><span id="textcolor1031"><span>"</span></span><span>);</span> 
<a id="x1-38157r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-38159r48"></a><span>48</span> 
<a id="x1-38161r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1032"><span>return</span></span><span>&nbsp;error;</span> 
<a id="x1-38163r50"></a><span>50</span><span>}</span> 
<a id="x1-38165r51"></a><span>51</span> 
<a id="x1-38167r52"></a><span>52</span><span id="textcolor1033"><span>static</span></span><span>&nbsp;</span><span id="textcolor1034"><span>void</span></span><span>&nbsp;__exit&nbsp;mymodule_exit(</span><span id="textcolor1035"><span>void</span></span><span>)</span> 
<a id="x1-38169r53"></a><span>53</span><span>{</span> 
<a id="x1-38171r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1036"><span>"mymodule:&nbsp;Exit&nbsp;success</span></span><span id="textcolor1037"><span>\n</span></span><span id="textcolor1038"><span>"</span></span><span>);</span> 
<a id="x1-38173r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kobject_put(mymodule);</span> 
<a id="x1-38175r56"></a><span>56</span><span>}</span> 
<a id="x1-38177r57"></a><span>57</span> 
<a id="x1-38179r58"></a><span>58</span><span>module_init(mymodule_init);</span> 
<a id="x1-38181r59"></a><span>59</span><span>module_exit(mymodule_exit);</span> 
<a id="x1-38183r60"></a><span>60</span> 
<a id="x1-38185r61"></a><span>61</span><span>MODULE_LICENSE(</span><span id="textcolor1039"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1333 --><p>   Make and install the module:
</p><!-- l. 1 -->
   <pre id="fancyvrb55"><a id="x1-38189r1"></a><span>1</span><span>make</span> 
<a id="x1-38191r2"></a><span>2</span><span>sudo&nbsp;insmod&nbsp;hello-sysfs.ko</span></pre>
<!-- l. 1340 --><p>   Check that it exists:
</p><!-- l. 1 -->
   <pre id="fancyvrb56"><a id="x1-38194r1"></a><span>1</span><span>sudo&nbsp;lsmod&nbsp;|&nbsp;grep&nbsp;hello_sysfs</span></pre>
<!-- l. 1346 --><p>   What is the current value of <code>  <span>myvariable</span>
</code> ?
</p><!-- l. 1 -->
   <pre id="fancyvrb57"><a id="x1-38198r1"></a><span>1</span><span>sudo&nbsp;cat&nbsp;/sys/kernel/mymodule/myvariable</span></pre>
<!-- l. 1352 --><p>   Set the value of <code>  <span>myvariable</span>
</code> and check that it changed.
</p><!-- l. 1 -->
   <pre id="fancyvrb58"><a id="x1-38203r1"></a><span>1</span><span>echo&nbsp;</span><span id="textcolor1040"><span>"32"</span></span><span>&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;/sys/kernel/mymodule/myvariable</span> 
<a id="x1-38205r2"></a><span>2</span><span>sudo&nbsp;cat&nbsp;/sys/kernel/mymodule/myvariable</span></pre>
<!-- l. 1359 --><p>   Finally, remove the test module:
</p><!-- l. 1 -->
   <pre id="fancyvrb59"><a id="x1-38208r1"></a><span>1</span><span>sudo&nbsp;rmmod&nbsp;hello_sysfs</span></pre>
                                                                  

                                                                  
<!-- l. 1365 --><p>   In the above case, we use a simple kobject to create a directory under
sysfs, and communicate with its attributes. Since Linux v2.6.0, the
<code> <span>kobject</span>
</code> structure made its appearance. It was initially meant as a simple way of
unifying kernel code which manages reference counted objects. After a
bit of mission creep, it is now the glue that holds much of the device
model and its sysfs interface together. For more information about kobject
and sysfs, see <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/driver-api/driver-model/driver.rst">Documentation/driver-api/driver-model/driver.rst</a> and
<a href="https://lwn.net/Articles/51437/"><span>https://lwn.net/Articles/51437/</span></a>.
</p><!-- l. 1371 -->
   <h3 id="talking-to-device-files"><span>9   </span> <a id="x1-390009"></a>Talking To Device Files</h3>
<!-- l. 1373 --><p>Device files are supposed to represent physical devices. Most physical devices are
used for output as well as input, so there has to be some mechanism for
device drivers in the kernel to get the output to send to the device from
processes. This is done by opening the device file for output and writing to it,
just like writing to a file. In the following example, this is implemented by
<code> <span>device_write</span>
</code>.
</p><!-- l. 1378 --><p>   This is not always enough. Imagine you had a serial port connected to a modem
(even if you have an internal modem, it is still implemented from the CPU’s
perspective as a serial port connected to a modem, so you don’t have to tax
your imagination too hard). The natural thing to do would be to use the
device file to write things to the modem (either modem commands or data to
be sent through the phone line) and read things from the modem (either
responses for commands or the data received through the phone line). However,
this leaves open the question of what to do when you need to talk to the
serial port itself, for example to configure the rate at which data is sent and
received.
</p><!-- l. 1383 --><p>   The answer in Unix is to use a special function called
<code> <span>ioctl</span>
</code> (short for Input Output ConTroL). Every device can have its own
<code> <span>ioctl</span>
</code> commands, which can be read ioctl’s (to send information from a process to the
kernel), write ioctl’s (to return information to a process), both or neither. Notice
here the roles of read and write are reversed again, so in ioctl’s read is to
send information to the kernel and write is to receive information from the
kernel.
</p><!-- l. 1387 --><p>   The ioctl function is called with three parameters: the file descriptor of the
appropriate device file, the ioctl number, and a parameter, which is of type long so
you can use a cast to use it to pass anything. You will not be able to pass a structure
this way, but you will be able to pass a pointer to the structure. Here is an
example:
                                                                  

                                                                  
</p><!-- l. 1 -->
   <pre id="fancyvrb60"><a id="x1-39005r1"></a><span>1</span><span id="textcolor1041"><span>/*</span></span> 
<a id="x1-39007r2"></a><span>2</span><span id="textcolor1042"><span>&nbsp;*&nbsp;ioctl.c</span></span> 
<a id="x1-39009r3"></a><span>3</span><span id="textcolor1043"><span>&nbsp;*/</span></span> 
<a id="x1-39011r4"></a><span>4</span><span id="textcolor1044"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1045"><span>&lt;linux/cdev.h&gt;</span></span> 
<a id="x1-39013r5"></a><span>5</span><span id="textcolor1046"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1047"><span>&lt;linux/fs.h&gt;</span></span> 
<a id="x1-39015r6"></a><span>6</span><span id="textcolor1048"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1049"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-39017r7"></a><span>7</span><span id="textcolor1050"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1051"><span>&lt;linux/ioctl.h&gt;</span></span> 
<a id="x1-39019r8"></a><span>8</span><span id="textcolor1052"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1053"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-39021r9"></a><span>9</span><span id="textcolor1054"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1055"><span>&lt;linux/slab.h&gt;</span></span> 
<a id="x1-39023r10"></a><span>10</span><span id="textcolor1056"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1057"><span>&lt;linux/uaccess.h&gt;</span></span> 
<a id="x1-39025r11"></a><span>11</span><span id="textcolor1058"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1059"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-39027r12"></a><span>12</span> 
<a id="x1-39029r13"></a><span>13</span><span id="textcolor1060"><span>struct</span></span><span>&nbsp;ioctl_arg&nbsp;{</span> 
<a id="x1-39031r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1061"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1062"><span>int</span></span><span>&nbsp;val;</span> 
<a id="x1-39033r15"></a><span>15</span><span>};</span> 
<a id="x1-39035r16"></a><span>16</span> 
<a id="x1-39037r17"></a><span>17</span><span id="textcolor1063"><span>/*&nbsp;Documentation/userspace-api/ioctl/ioctl-number.rst&nbsp;*/</span></span> 
<a id="x1-39039r18"></a><span>18</span><span id="textcolor1064"><span>#define&nbsp;IOC_MAGIC&nbsp;</span><span>'</span><span>\x66</span><span>'</span></span> 
<a id="x1-39041r19"></a><span>19</span> 
<a id="x1-39043r20"></a><span>20</span><span id="textcolor1065"><span>#define&nbsp;IOCTL_VALSET&nbsp;_IOW(IOC_MAGIC,&nbsp;0,&nbsp;struct&nbsp;ioctl_arg)</span></span> 
<a id="x1-39045r21"></a><span>21</span><span id="textcolor1066"><span>#define&nbsp;IOCTL_VALGET&nbsp;_IOR(IOC_MAGIC,&nbsp;1,&nbsp;struct&nbsp;ioctl_arg)</span></span> 
<a id="x1-39047r22"></a><span>22</span><span id="textcolor1067"><span>#define&nbsp;IOCTL_VALGET_NUM&nbsp;_IOR(IOC_MAGIC,&nbsp;2,&nbsp;int)</span></span> 
<a id="x1-39049r23"></a><span>23</span><span id="textcolor1068"><span>#define&nbsp;IOCTL_VALSET_NUM&nbsp;_IOW(IOC_MAGIC,&nbsp;3,&nbsp;int)</span></span> 
<a id="x1-39051r24"></a><span>24</span> 
<a id="x1-39053r25"></a><span>25</span><span id="textcolor1069"><span>#define&nbsp;IOCTL_VAL_MAXNR&nbsp;3</span></span> 
<a id="x1-39055r26"></a><span>26</span><span id="textcolor1070"><span>#define&nbsp;DRIVER_NAME&nbsp;"ioctltest"</span></span> 
<a id="x1-39057r27"></a><span>27</span> 
<a id="x1-39059r28"></a><span>28</span><span id="textcolor1071"><span>static</span></span><span>&nbsp;</span><span id="textcolor1072"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1073"><span>int</span></span><span>&nbsp;test_ioctl_major&nbsp;=&nbsp;0;</span> 
<a id="x1-39061r29"></a><span>29</span><span id="textcolor1074"><span>static</span></span><span>&nbsp;</span><span id="textcolor1075"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1076"><span>int</span></span><span>&nbsp;num_of_dev&nbsp;=&nbsp;1;</span> 
<a id="x1-39063r30"></a><span>30</span><span id="textcolor1077"><span>static</span></span><span>&nbsp;</span><span id="textcolor1078"><span>struct</span></span><span>&nbsp;cdev&nbsp;test_ioctl_cdev;</span> 
<a id="x1-39065r31"></a><span>31</span><span id="textcolor1079"><span>static</span></span><span>&nbsp;</span><span id="textcolor1080"><span>int</span></span><span>&nbsp;ioctl_num&nbsp;=&nbsp;0;</span> 
<a id="x1-39067r32"></a><span>32</span> 
<a id="x1-39069r33"></a><span>33</span><span id="textcolor1081"><span>struct</span></span><span>&nbsp;test_ioctl_data&nbsp;{</span> 
<a id="x1-39071r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1082"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1083"><span>char</span></span><span>&nbsp;val;</span> 
<a id="x1-39073r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;rwlock_t&nbsp;lock;</span> 
<a id="x1-39075r36"></a><span>36</span><span>};</span> 
<a id="x1-39077r37"></a><span>37</span> 
<a id="x1-39079r38"></a><span>38</span><span id="textcolor1084"><span>static</span></span><span>&nbsp;</span><span id="textcolor1085"><span>long</span></span><span>&nbsp;test_ioctl_ioctl(</span><span id="textcolor1086"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor1087"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1088"><span>int</span></span><span>&nbsp;cmd,</span> 
<a id="x1-39081r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1089"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1090"><span>long</span></span><span>&nbsp;arg)</span> 
<a id="x1-39083r40"></a><span>40</span><span>{</span> 
<a id="x1-39085r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1091"><span>struct</span></span><span>&nbsp;test_ioctl_data&nbsp;*ioctl_data&nbsp;=&nbsp;filp-&gt;private_data;</span> 
<a id="x1-39087r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1092"><span>int</span></span><span>&nbsp;retval&nbsp;=&nbsp;0;</span> 
<a id="x1-39089r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1093"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1094"><span>char</span></span><span>&nbsp;val;</span> 
<a id="x1-39091r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1095"><span>struct</span></span><span>&nbsp;ioctl_arg&nbsp;data;</span> 
<a id="x1-39093r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;data,&nbsp;0,&nbsp;</span><span id="textcolor1096"><span>sizeof</span></span><span>(data));</span> 
<a id="x1-39095r46"></a><span>46</span> 
<a id="x1-39097r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1097"><span>switch</span></span><span>&nbsp;(cmd)&nbsp;{</span> 
<a id="x1-39099r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1098"><span>case</span></span><span>&nbsp;IOCTL_VALSET:</span> 
<a id="x1-39101r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1099"><span>if</span></span><span>&nbsp;(copy_from_user(&amp;data,&nbsp;(</span><span id="textcolor1100"><span>int</span></span><span>&nbsp;__user&nbsp;*)arg,&nbsp;</span><span id="textcolor1101"><span>sizeof</span></span><span>(data)))&nbsp;{</span> 
<a id="x1-39103r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval&nbsp;=&nbsp;-EFAULT;</span> 
<a id="x1-39105r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1102"><span>goto</span></span><span>&nbsp;done;</span> 
<a id="x1-39107r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39109r53"></a><span>53</span> 
<a id="x1-39111r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1103"><span>"IOCTL&nbsp;set&nbsp;val:%x&nbsp;.</span></span><span id="textcolor1104"><span>\n</span></span><span id="textcolor1105"><span>"</span></span><span>,&nbsp;data.val);</span> 
<a id="x1-39113r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_lock(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39115r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ioctl_data-&gt;val&nbsp;=&nbsp;data.val;</span> 
<a id="x1-39117r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_unlock(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39119r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1106"><span>break</span></span><span>;</span> 
<a id="x1-39121r59"></a><span>59</span> 
<a id="x1-39123r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1107"><span>case</span></span><span>&nbsp;IOCTL_VALGET:</span> 
<a id="x1-39125r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read_lock(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39127r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val&nbsp;=&nbsp;ioctl_data-&gt;val;</span> 
<a id="x1-39129r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read_unlock(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39131r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.val&nbsp;=&nbsp;val;</span> 
<a id="x1-39133r65"></a><span>65</span> 
<a id="x1-39135r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1108"><span>if</span></span><span>&nbsp;(copy_to_user((</span><span id="textcolor1109"><span>int</span></span><span>&nbsp;__user&nbsp;*)arg,&nbsp;&amp;data,&nbsp;</span><span id="textcolor1110"><span>sizeof</span></span><span>(data)))&nbsp;{</span> 
<a id="x1-39137r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval&nbsp;=&nbsp;-EFAULT;</span> 
<a id="x1-39139r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1111"><span>goto</span></span><span>&nbsp;done;</span> 
<a id="x1-39141r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39143r70"></a><span>70</span> 
<a id="x1-39145r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1112"><span>break</span></span><span>;</span> 
<a id="x1-39147r72"></a><span>72</span> 
<a id="x1-39149r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1113"><span>case</span></span><span>&nbsp;IOCTL_VALGET_NUM:</span> 
<a id="x1-39151r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval&nbsp;=&nbsp;__put_user(ioctl_num,&nbsp;(</span><span id="textcolor1114"><span>int</span></span><span>&nbsp;__user&nbsp;*)arg);</span> 
<a id="x1-39153r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1115"><span>break</span></span><span>;</span> 
<a id="x1-39155r76"></a><span>76</span> 
<a id="x1-39157r77"></a><span>77</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1116"><span>case</span></span><span>&nbsp;IOCTL_VALSET_NUM:</span> 
<a id="x1-39159r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ioctl_num&nbsp;=&nbsp;arg;</span> 
<a id="x1-39161r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1117"><span>break</span></span><span>;</span> 
<a id="x1-39163r80"></a><span>80</span> 
<a id="x1-39165r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1118"><span>default</span></span><span>:</span> 
<a id="x1-39167r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval&nbsp;=&nbsp;-ENOTTY;</span> 
<a id="x1-39169r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39171r84"></a><span>84</span> 
<a id="x1-39173r85"></a><span>85</span><span>done:</span> 
<a id="x1-39175r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1119"><span>return</span></span><span>&nbsp;retval;</span> 
<a id="x1-39177r87"></a><span>87</span><span>}</span> 
<a id="x1-39179r88"></a><span>88</span> 
<a id="x1-39181r89"></a><span>89</span><span id="textcolor1120"><span>static</span></span><span>&nbsp;</span><span id="textcolor1121"><span>ssize_t</span></span><span>&nbsp;test_ioctl_read(</span><span id="textcolor1122"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor1123"><span>char</span></span><span>&nbsp;__user&nbsp;*buf,</span> 
<a id="x1-39183r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1124"><span>size_t</span></span><span>&nbsp;count,&nbsp;loff_t&nbsp;*f_pos)</span> 
<a id="x1-39185r91"></a><span>91</span><span>{</span> 
<a id="x1-39187r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1125"><span>struct</span></span><span>&nbsp;test_ioctl_data&nbsp;*ioctl_data&nbsp;=&nbsp;filp-&gt;private_data;</span> 
<a id="x1-39189r93"></a><span>93</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1126"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1127"><span>char</span></span><span>&nbsp;val;</span> 
<a id="x1-39191r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1128"><span>int</span></span><span>&nbsp;retval;</span> 
<a id="x1-39193r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1129"><span>int</span></span><span>&nbsp;i&nbsp;=&nbsp;0;</span> 
<a id="x1-39195r96"></a><span>96</span> 
<a id="x1-39197r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;read_lock(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39199r98"></a><span>98</span><span>&nbsp;&nbsp;&nbsp;&nbsp;val&nbsp;=&nbsp;ioctl_data-&gt;val;</span> 
<a id="x1-39201r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;read_unlock(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39203r100"></a><span>100</span> 
<a id="x1-39205r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1130"><span>for</span></span><span>&nbsp;(;&nbsp;i&nbsp;&lt;&nbsp;count;&nbsp;i++)&nbsp;{</span> 
<a id="x1-39207r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1131"><span>if</span></span><span>&nbsp;(copy_to_user(&amp;buf[i],&nbsp;&amp;val,&nbsp;1))&nbsp;{</span> 
<a id="x1-39209r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval&nbsp;=&nbsp;-EFAULT;</span> 
<a id="x1-39211r104"></a><span>104</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1132"><span>goto</span></span><span>&nbsp;out;</span> 
<a id="x1-39213r105"></a><span>105</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39215r106"></a><span>106</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39217r107"></a><span>107</span> 
<a id="x1-39219r108"></a><span>108</span><span>&nbsp;&nbsp;&nbsp;&nbsp;retval&nbsp;=&nbsp;count;</span> 
<a id="x1-39221r109"></a><span>109</span><span>out:</span> 
<a id="x1-39223r110"></a><span>110</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1133"><span>return</span></span><span>&nbsp;retval;</span> 
<a id="x1-39225r111"></a><span>111</span><span>}</span> 
<a id="x1-39227r112"></a><span>112</span> 
<a id="x1-39229r113"></a><span>113</span><span id="textcolor1134"><span>static</span></span><span>&nbsp;</span><span id="textcolor1135"><span>int</span></span><span>&nbsp;test_ioctl_close(</span><span id="textcolor1136"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor1137"><span>struct</span></span><span>&nbsp;file&nbsp;*filp)</span> 
<a id="x1-39231r114"></a><span>114</span><span>{</span> 
<a id="x1-39233r115"></a><span>115</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1138"><span>"%s&nbsp;call.</span></span><span id="textcolor1139"><span>\n</span></span><span id="textcolor1140"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-39235r116"></a><span>116</span> 
<a id="x1-39237r117"></a><span>117</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1141"><span>if</span></span><span>&nbsp;(filp-&gt;private_data)&nbsp;{</span> 
<a id="x1-39239r118"></a><span>118</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kfree(filp-&gt;private_data);</span> 
<a id="x1-39241r119"></a><span>119</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filp-&gt;private_data&nbsp;=&nbsp;NULL;</span> 
<a id="x1-39243r120"></a><span>120</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39245r121"></a><span>121</span> 
<a id="x1-39247r122"></a><span>122</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1142"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-39249r123"></a><span>123</span><span>}</span> 
<a id="x1-39251r124"></a><span>124</span> 
<a id="x1-39253r125"></a><span>125</span><span id="textcolor1143"><span>static</span></span><span>&nbsp;</span><span id="textcolor1144"><span>int</span></span><span>&nbsp;test_ioctl_open(</span><span id="textcolor1145"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor1146"><span>struct</span></span><span>&nbsp;file&nbsp;*filp)</span> 
<a id="x1-39255r126"></a><span>126</span><span>{</span> 
<a id="x1-39257r127"></a><span>127</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1147"><span>struct</span></span><span>&nbsp;test_ioctl_data&nbsp;*ioctl_data;</span> 
<a id="x1-39259r128"></a><span>128</span> 
<a id="x1-39261r129"></a><span>129</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1148"><span>"%s&nbsp;call.</span></span><span id="textcolor1149"><span>\n</span></span><span id="textcolor1150"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-39263r130"></a><span>130</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ioctl_data&nbsp;=&nbsp;kmalloc(</span><span id="textcolor1151"><span>sizeof</span></span><span>(</span><span id="textcolor1152"><span>struct</span></span><span>&nbsp;test_ioctl_data),&nbsp;GFP_KERNEL);</span> 
<a id="x1-39265r131"></a><span>131</span> 
<a id="x1-39267r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1153"><span>if</span></span><span>&nbsp;(ioctl_data&nbsp;==&nbsp;NULL)</span> 
<a id="x1-39269r133"></a><span>133</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1154"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-39271r134"></a><span>134</span> 
<a id="x1-39273r135"></a><span>135</span><span>&nbsp;&nbsp;&nbsp;&nbsp;rwlock_init(&amp;ioctl_data-&gt;lock);</span> 
<a id="x1-39275r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ioctl_data-&gt;val&nbsp;=&nbsp;0xFF;</span> 
<a id="x1-39277r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;filp-&gt;private_data&nbsp;=&nbsp;ioctl_data;</span> 
<a id="x1-39279r138"></a><span>138</span> 
<a id="x1-39281r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1155"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-39283r140"></a><span>140</span><span>}</span> 
<a id="x1-39285r141"></a><span>141</span> 
<a id="x1-39287r142"></a><span>142</span><span id="textcolor1156"><span>static</span></span><span>&nbsp;</span><span id="textcolor1157"><span>struct</span></span><span>&nbsp;file_operations&nbsp;fops&nbsp;=&nbsp;{</span> 
<a id="x1-39289r143"></a><span>143</span><span id="textcolor1158"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&lt;&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-39291r144"></a><span>144</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.owner&nbsp;=&nbsp;THIS_MODULE,</span> 
<a id="x1-39293r145"></a><span>145</span><span id="textcolor1159"><span>#endif</span></span> 
<a id="x1-39295r146"></a><span>146</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;test_ioctl_open,</span> 
<a id="x1-39297r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;test_ioctl_close,</span> 
<a id="x1-39299r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;test_ioctl_read,</span> 
<a id="x1-39301r149"></a><span>149</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.unlocked_ioctl&nbsp;=&nbsp;test_ioctl_ioctl,</span> 
<a id="x1-39303r150"></a><span>150</span><span>};</span> 
<a id="x1-39305r151"></a><span>151</span> 
<a id="x1-39307r152"></a><span>152</span><span id="textcolor1160"><span>static</span></span><span>&nbsp;</span><span id="textcolor1161"><span>int</span></span><span>&nbsp;__init&nbsp;ioctl_init(</span><span id="textcolor1162"><span>void</span></span><span>)</span> 
<a id="x1-39309r153"></a><span>153</span><span>{</span> 
<a id="x1-39311r154"></a><span>154</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1163"><span>dev_t</span></span><span>&nbsp;dev;</span> 
<a id="x1-39313r155"></a><span>155</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1164"><span>int</span></span><span>&nbsp;alloc_ret&nbsp;=&nbsp;-1;</span> 
<a id="x1-39315r156"></a><span>156</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1165"><span>int</span></span><span>&nbsp;cdev_ret&nbsp;=&nbsp;-1;</span> 
<a id="x1-39317r157"></a><span>157</span><span>&nbsp;&nbsp;&nbsp;&nbsp;alloc_ret&nbsp;=&nbsp;alloc_chrdev_region(&amp;dev,&nbsp;0,&nbsp;num_of_dev,&nbsp;DRIVER_NAME);</span> 
<a id="x1-39319r158"></a><span>158</span> 
<a id="x1-39321r159"></a><span>159</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1166"><span>if</span></span><span>&nbsp;(alloc_ret)</span> 
<a id="x1-39323r160"></a><span>160</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1167"><span>goto</span></span><span>&nbsp;error;</span> 
<a id="x1-39325r161"></a><span>161</span> 
<a id="x1-39327r162"></a><span>162</span><span>&nbsp;&nbsp;&nbsp;&nbsp;test_ioctl_major&nbsp;=&nbsp;MAJOR(dev);</span> 
<a id="x1-39329r163"></a><span>163</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cdev_init(&amp;test_ioctl_cdev,&nbsp;&amp;fops);</span> 
<a id="x1-39331r164"></a><span>164</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cdev_ret&nbsp;=&nbsp;cdev_add(&amp;test_ioctl_cdev,&nbsp;dev,&nbsp;num_of_dev);</span> 
<a id="x1-39333r165"></a><span>165</span> 
<a id="x1-39335r166"></a><span>166</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1168"><span>if</span></span><span>&nbsp;(cdev_ret)</span> 
<a id="x1-39337r167"></a><span>167</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1169"><span>goto</span></span><span>&nbsp;error;</span> 
<a id="x1-39339r168"></a><span>168</span> 
<a id="x1-39341r169"></a><span>169</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1170"><span>"%s&nbsp;driver(major:&nbsp;%d)&nbsp;installed.</span></span><span id="textcolor1171"><span>\n</span></span><span id="textcolor1172"><span>"</span></span><span>,&nbsp;DRIVER_NAME,</span> 
<a id="x1-39343r170"></a><span>170</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test_ioctl_major);</span> 
<a id="x1-39345r171"></a><span>171</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1173"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-39347r172"></a><span>172</span><span>error:</span> 
<a id="x1-39349r173"></a><span>173</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1174"><span>if</span></span><span>&nbsp;(cdev_ret&nbsp;==&nbsp;0)</span> 
<a id="x1-39351r174"></a><span>174</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cdev_del(&amp;test_ioctl_cdev);</span> 
<a id="x1-39353r175"></a><span>175</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1175"><span>if</span></span><span>&nbsp;(alloc_ret&nbsp;==&nbsp;0)</span> 
<a id="x1-39355r176"></a><span>176</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unregister_chrdev_region(dev,&nbsp;num_of_dev);</span> 
<a id="x1-39357r177"></a><span>177</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1176"><span>return</span></span><span>&nbsp;-1;</span> 
<a id="x1-39359r178"></a><span>178</span><span>}</span> 
<a id="x1-39361r179"></a><span>179</span> 
<a id="x1-39363r180"></a><span>180</span><span id="textcolor1177"><span>static</span></span><span>&nbsp;</span><span id="textcolor1178"><span>void</span></span><span>&nbsp;__exit&nbsp;ioctl_exit(</span><span id="textcolor1179"><span>void</span></span><span>)</span> 
<a id="x1-39365r181"></a><span>181</span><span>{</span> 
<a id="x1-39367r182"></a><span>182</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1180"><span>dev_t</span></span><span>&nbsp;dev&nbsp;=&nbsp;MKDEV(test_ioctl_major,&nbsp;0);</span> 
<a id="x1-39369r183"></a><span>183</span> 
<a id="x1-39371r184"></a><span>184</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cdev_del(&amp;test_ioctl_cdev);</span> 
<a id="x1-39373r185"></a><span>185</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_chrdev_region(dev,&nbsp;num_of_dev);</span> 
<a id="x1-39375r186"></a><span>186</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1181"><span>"%s&nbsp;driver&nbsp;removed.</span></span><span id="textcolor1182"><span>\n</span></span><span id="textcolor1183"><span>"</span></span><span>,&nbsp;DRIVER_NAME);</span> 
<a id="x1-39377r187"></a><span>187</span><span>}</span> 
<a id="x1-39379r188"></a><span>188</span> 
<a id="x1-39381r189"></a><span>189</span><span>module_init(ioctl_init);</span> 
<a id="x1-39383r190"></a><span>190</span><span>module_exit(ioctl_exit);</span> 
<a id="x1-39385r191"></a><span>191</span> 
<a id="x1-39387r192"></a><span>192</span><span>MODULE_LICENSE(</span><span id="textcolor1184"><span>"GPL"</span></span><span>);</span> 
<a id="x1-39389r193"></a><span>193</span><span>MODULE_DESCRIPTION(</span><span id="textcolor1185"><span>"This&nbsp;is&nbsp;test_ioctl&nbsp;module"</span></span><span>);</span></pre>
<!-- l. 1393 --><p>   You can see there is an argument called
<code> <span>cmd</span>
</code> in <code>  <span>test_ioctl_ioctl()</span>
</code> function. It is the ioctl number. The ioctl number encodes the major
device number, the type of the ioctl, the command, and the type of
the parameter. This ioctl number is usually created by a macro call
(<code>  <span>_IO</span>
</code>, <code>  <span>_IOR</span>
</code>, <code>  <span>_IOW</span>
</code> or <code>  <span>_IOWR</span>
</code> — depending on the type) in a header file. This header file should then be
included both by the programs which will use ioctl (so they can generate the
appropriate ioctl’s) and by the kernel module (so it can understand it). In the
example below, the header file is <span><span><span>chardev.h</span></span></span> and the program which uses it is
<span><span><span>userspace_ioctl.c</span></span></span>.
</p><!-- l. 1400 --><p>   If you want to use ioctls in your own kernel modules, it is best to receive an
official ioctl assignment, so if you accidentally get somebody else’s ioctls, or if they
get yours, you’ll know something is wrong. For more information, consult the kernel
source tree at <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/userspace-api/ioctl/ioctl-number.rst">Documentation/userspace-api/ioctl/ioctl-number.rst</a>.
</p><!-- l. 1403 --><p>   Also, we need to be careful that concurrent access to the shared resources will
lead to the race condition. The solution is using atomic Compare-And-Swap (CAS),
which we mentioned at <a href="#chardevc">6.5<!-- tex4ht:ref: sec:chardev_c  --></a> section, to enforce the exclusive access.
</p><!-- l. 1 -->
   <pre id="fancyvrb61"><a id="x1-39397r1"></a><span>1</span><span id="textcolor1186"><span>/*</span></span> 
<a id="x1-39399r2"></a><span>2</span><span id="textcolor1187"><span>&nbsp;*&nbsp;chardev2.c&nbsp;-&nbsp;Create&nbsp;an&nbsp;input/output&nbsp;character&nbsp;device</span></span> 
<a id="x1-39401r3"></a><span>3</span><span id="textcolor1188"><span>&nbsp;*/</span></span> 
<a id="x1-39403r4"></a><span>4</span> 
<a id="x1-39405r5"></a><span>5</span><span id="textcolor1189"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1190"><span>&lt;linux/atomic.h&gt;</span></span> 
<a id="x1-39407r6"></a><span>6</span><span id="textcolor1191"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1192"><span>&lt;linux/cdev.h&gt;</span></span> 
<a id="x1-39409r7"></a><span>7</span><span id="textcolor1193"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1194"><span>&lt;linux/delay.h&gt;</span></span> 
<a id="x1-39411r8"></a><span>8</span><span id="textcolor1195"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1196"><span>&lt;linux/device.h&gt;</span></span> 
<a id="x1-39413r9"></a><span>9</span><span id="textcolor1197"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1198"><span>&lt;linux/fs.h&gt;</span></span> 
<a id="x1-39415r10"></a><span>10</span><span id="textcolor1199"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1200"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-39417r11"></a><span>11</span><span id="textcolor1201"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1202"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Specifically,&nbsp;a&nbsp;module&nbsp;*/</span></span> 
<a id="x1-39419r12"></a><span>12</span><span id="textcolor1203"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1204"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-39421r13"></a><span>13</span><span id="textcolor1205"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1206"><span>&lt;linux/types.h&gt;</span></span> 
<a id="x1-39423r14"></a><span>14</span><span id="textcolor1207"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1208"><span>&lt;linux/uaccess.h&gt;&nbsp;/*&nbsp;for&nbsp;get_user&nbsp;and&nbsp;put_user&nbsp;*/</span></span> 
<a id="x1-39425r15"></a><span>15</span><span id="textcolor1209"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1210"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-39427r16"></a><span>16</span> 
<a id="x1-39429r17"></a><span>17</span><span id="textcolor1211"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1212"><span>&lt;asm/errno.h&gt;</span></span> 
<a id="x1-39431r18"></a><span>18</span> 
<a id="x1-39433r19"></a><span>19</span><span id="textcolor1213"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1214"><span>"chardev.h"</span></span> 
<a id="x1-39435r20"></a><span>20</span><span id="textcolor1215"><span>#define&nbsp;SUCCESS&nbsp;0</span></span> 
<a id="x1-39437r21"></a><span>21</span><span id="textcolor1216"><span>#define&nbsp;DEVICE_NAME&nbsp;"char_dev"</span></span> 
<a id="x1-39439r22"></a><span>22</span><span id="textcolor1217"><span>#define&nbsp;BUF_LEN&nbsp;80</span></span> 
<a id="x1-39441r23"></a><span>23</span> 
<a id="x1-39443r24"></a><span>24</span><span id="textcolor1218"><span>enum</span></span><span>&nbsp;{</span> 
<a id="x1-39445r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;CDEV_NOT_USED&nbsp;=&nbsp;0,</span> 
<a id="x1-39447r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;CDEV_EXCLUSIVE_OPEN&nbsp;=&nbsp;1,</span> 
<a id="x1-39449r27"></a><span>27</span><span>};</span> 
<a id="x1-39451r28"></a><span>28</span> 
<a id="x1-39453r29"></a><span>29</span><span id="textcolor1219"><span>/*&nbsp;Is&nbsp;the&nbsp;device&nbsp;open&nbsp;right&nbsp;now?&nbsp;Used&nbsp;to&nbsp;prevent&nbsp;concurrent&nbsp;access&nbsp;into</span></span> 
<a id="x1-39455r30"></a><span>30</span><span id="textcolor1220"><span>&nbsp;*&nbsp;the&nbsp;same&nbsp;device</span></span> 
<a id="x1-39457r31"></a><span>31</span><span id="textcolor1221"><span>&nbsp;*/</span></span> 
<a id="x1-39459r32"></a><span>32</span><span id="textcolor1222"><span>static</span></span><span>&nbsp;atomic_t&nbsp;already_open&nbsp;=&nbsp;ATOMIC_INIT(CDEV_NOT_USED);</span> 
<a id="x1-39461r33"></a><span>33</span> 
<a id="x1-39463r34"></a><span>34</span><span id="textcolor1223"><span>/*&nbsp;The&nbsp;message&nbsp;the&nbsp;device&nbsp;will&nbsp;give&nbsp;when&nbsp;asked&nbsp;*/</span></span> 
<a id="x1-39465r35"></a><span>35</span><span id="textcolor1224"><span>static</span></span><span>&nbsp;</span><span id="textcolor1225"><span>char</span></span><span>&nbsp;message[BUF_LEN&nbsp;+&nbsp;1];</span> 
<a id="x1-39467r36"></a><span>36</span> 
<a id="x1-39469r37"></a><span>37</span><span id="textcolor1226"><span>static</span></span><span>&nbsp;</span><span id="textcolor1227"><span>struct</span></span><span>&nbsp;class&nbsp;*cls;</span> 
<a id="x1-39471r38"></a><span>38</span> 
<a id="x1-39473r39"></a><span>39</span><span id="textcolor1228"><span>/*&nbsp;This&nbsp;is&nbsp;called&nbsp;whenever&nbsp;a&nbsp;process&nbsp;attempts&nbsp;to&nbsp;open&nbsp;the&nbsp;device&nbsp;file&nbsp;*/</span></span> 
<a id="x1-39475r40"></a><span>40</span><span id="textcolor1229"><span>static</span></span><span>&nbsp;</span><span id="textcolor1230"><span>int</span></span><span>&nbsp;device_open(</span><span id="textcolor1231"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor1232"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-39477r41"></a><span>41</span><span>{</span> 
<a id="x1-39479r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1233"><span>"device_open(%p)</span></span><span id="textcolor1234"><span>\n</span></span><span id="textcolor1235"><span>"</span></span><span>,&nbsp;file);</span> 
<a id="x1-39481r43"></a><span>43</span> 
<a id="x1-39483r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;try_module_get(THIS_MODULE);</span> 
<a id="x1-39485r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1236"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-39487r46"></a><span>46</span><span>}</span> 
<a id="x1-39489r47"></a><span>47</span> 
<a id="x1-39491r48"></a><span>48</span><span id="textcolor1237"><span>static</span></span><span>&nbsp;</span><span id="textcolor1238"><span>int</span></span><span>&nbsp;device_release(</span><span id="textcolor1239"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor1240"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-39493r49"></a><span>49</span><span>{</span> 
<a id="x1-39495r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1241"><span>"device_release(%p,%p)</span></span><span id="textcolor1242"><span>\n</span></span><span id="textcolor1243"><span>"</span></span><span>,&nbsp;inode,&nbsp;file);</span> 
<a id="x1-39497r51"></a><span>51</span> 
<a id="x1-39499r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-39501r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1244"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-39503r54"></a><span>54</span><span>}</span> 
<a id="x1-39505r55"></a><span>55</span> 
<a id="x1-39507r56"></a><span>56</span><span id="textcolor1245"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;whenever&nbsp;a&nbsp;process&nbsp;which&nbsp;has&nbsp;already&nbsp;opened&nbsp;the</span></span> 
<a id="x1-39509r57"></a><span>57</span><span id="textcolor1246"><span>&nbsp;*&nbsp;device&nbsp;file&nbsp;attempts&nbsp;to&nbsp;read&nbsp;from&nbsp;it.</span></span> 
<a id="x1-39511r58"></a><span>58</span><span id="textcolor1247"><span>&nbsp;*/</span></span> 
<a id="x1-39513r59"></a><span>59</span><span id="textcolor1248"><span>static</span></span><span>&nbsp;</span><span id="textcolor1249"><span>ssize_t</span></span><span>&nbsp;device_read(</span><span id="textcolor1250"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor1251"><span>/*&nbsp;see&nbsp;include/linux/fs.h&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39515r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1252"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,&nbsp;</span><span id="textcolor1253"><span>/*&nbsp;buffer&nbsp;to&nbsp;be&nbsp;filled&nbsp;&nbsp;*/</span></span> 
<a id="x1-39517r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1254"><span>size_t</span></span><span>&nbsp;length,&nbsp;</span><span id="textcolor1255"><span>/*&nbsp;length&nbsp;of&nbsp;the&nbsp;buffer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39519r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-39521r63"></a><span>63</span><span>{</span> 
<a id="x1-39523r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1256"><span>/*&nbsp;Number&nbsp;of&nbsp;bytes&nbsp;actually&nbsp;written&nbsp;to&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-39525r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1257"><span>int</span></span><span>&nbsp;bytes_read&nbsp;=&nbsp;0;</span> 
<a id="x1-39527r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1258"><span>/*&nbsp;How&nbsp;far&nbsp;did&nbsp;the&nbsp;process&nbsp;reading&nbsp;the&nbsp;message&nbsp;get?&nbsp;Useful&nbsp;if&nbsp;the&nbsp;message</span></span> 
<a id="x1-39529r67"></a><span>67</span><span id="textcolor1259"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;is&nbsp;larger&nbsp;than&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;buffer&nbsp;we&nbsp;get&nbsp;to&nbsp;fill&nbsp;in&nbsp;device_read.</span></span> 
<a id="x1-39531r68"></a><span>68</span><span id="textcolor1260"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39533r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1261"><span>const</span></span><span>&nbsp;</span><span id="textcolor1262"><span>char</span></span><span>&nbsp;*message_ptr&nbsp;=&nbsp;message;</span> 
<a id="x1-39535r70"></a><span>70</span> 
<a id="x1-39537r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1263"><span>if</span></span><span>&nbsp;(!*(message_ptr&nbsp;+&nbsp;*offset))&nbsp;{&nbsp;</span><span id="textcolor1264"><span>/*&nbsp;we&nbsp;are&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;message&nbsp;*/</span></span> 
<a id="x1-39539r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;=&nbsp;0;&nbsp;</span><span id="textcolor1265"><span>/*&nbsp;reset&nbsp;the&nbsp;offset&nbsp;*/</span></span> 
<a id="x1-39541r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1266"><span>return</span></span><span>&nbsp;0;&nbsp;</span><span id="textcolor1267"><span>/*&nbsp;signify&nbsp;end&nbsp;of&nbsp;file&nbsp;*/</span></span> 
<a id="x1-39543r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39545r75"></a><span>75</span> 
<a id="x1-39547r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;message_ptr&nbsp;+=&nbsp;*offset;</span> 
<a id="x1-39549r77"></a><span>77</span> 
<a id="x1-39551r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1268"><span>/*&nbsp;Actually&nbsp;put&nbsp;the&nbsp;data&nbsp;into&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-39553r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1269"><span>while</span></span><span>&nbsp;(length&nbsp;&amp;&amp;&nbsp;*message_ptr)&nbsp;{</span> 
<a id="x1-39555r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1270"><span>/*&nbsp;Because&nbsp;the&nbsp;buffer&nbsp;is&nbsp;in&nbsp;the&nbsp;user&nbsp;data&nbsp;segment,&nbsp;not&nbsp;the&nbsp;kernel</span></span> 
<a id="x1-39557r81"></a><span>81</span><span id="textcolor1271"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;data&nbsp;segment,&nbsp;assignment&nbsp;would&nbsp;not&nbsp;work.&nbsp;Instead,&nbsp;we&nbsp;have&nbsp;to</span></span> 
<a id="x1-39559r82"></a><span>82</span><span id="textcolor1272"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;use&nbsp;put_user&nbsp;which&nbsp;copies&nbsp;data&nbsp;from&nbsp;the&nbsp;kernel&nbsp;data&nbsp;segment&nbsp;to</span></span> 
<a id="x1-39561r83"></a><span>83</span><span id="textcolor1273"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;user&nbsp;data&nbsp;segment.</span></span> 
<a id="x1-39563r84"></a><span>84</span><span id="textcolor1274"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39565r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put_user(*(message_ptr++),&nbsp;buffer++);</span> 
<a id="x1-39567r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length--;</span> 
<a id="x1-39569r87"></a><span>87</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytes_read++;</span> 
<a id="x1-39571r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39573r89"></a><span>89</span> 
<a id="x1-39575r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1275"><span>"Read&nbsp;%d&nbsp;bytes,&nbsp;%ld&nbsp;left</span></span><span id="textcolor1276"><span>\n</span></span><span id="textcolor1277"><span>"</span></span><span>,&nbsp;bytes_read,&nbsp;length);</span> 
<a id="x1-39577r91"></a><span>91</span> 
<a id="x1-39579r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;bytes_read;</span> 
<a id="x1-39581r93"></a><span>93</span> 
<a id="x1-39583r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1278"><span>/*&nbsp;Read&nbsp;functions&nbsp;are&nbsp;supposed&nbsp;to&nbsp;return&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;actually</span></span> 
<a id="x1-39585r95"></a><span>95</span><span id="textcolor1279"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;inserted&nbsp;into&nbsp;the&nbsp;buffer.</span></span> 
<a id="x1-39587r96"></a><span>96</span><span id="textcolor1280"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39589r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1281"><span>return</span></span><span>&nbsp;bytes_read;</span> 
<a id="x1-39591r98"></a><span>98</span><span>}</span> 
<a id="x1-39593r99"></a><span>99</span> 
<a id="x1-39595r100"></a><span>100</span><span id="textcolor1282"><span>/*&nbsp;called&nbsp;when&nbsp;somebody&nbsp;tries&nbsp;to&nbsp;write&nbsp;into&nbsp;our&nbsp;device&nbsp;file.&nbsp;*/</span></span> 
<a id="x1-39597r101"></a><span>101</span><span id="textcolor1283"><span>static</span></span><span>&nbsp;</span><span id="textcolor1284"><span>ssize_t</span></span><span>&nbsp;device_write(</span><span id="textcolor1285"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor1286"><span>const</span></span><span>&nbsp;</span><span id="textcolor1287"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-39599r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1288"><span>size_t</span></span><span>&nbsp;length,&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-39601r103"></a><span>103</span><span>{</span> 
<a id="x1-39603r104"></a><span>104</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1289"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-39605r105"></a><span>105</span> 
<a id="x1-39607r106"></a><span>106</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1290"><span>"device_write(%p,%p,%ld)"</span></span><span>,&nbsp;file,&nbsp;buffer,&nbsp;length);</span> 
<a id="x1-39609r107"></a><span>107</span> 
<a id="x1-39611r108"></a><span>108</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1291"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length&nbsp;&amp;&amp;&nbsp;i&nbsp;&lt;&nbsp;BUF_LEN;&nbsp;i++)</span> 
<a id="x1-39613r109"></a><span>109</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_user(message[i],&nbsp;buffer&nbsp;+&nbsp;i);</span> 
<a id="x1-39615r110"></a><span>110</span> 
<a id="x1-39617r111"></a><span>111</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1292"><span>/*&nbsp;Again,&nbsp;return&nbsp;the&nbsp;number&nbsp;of&nbsp;input&nbsp;characters&nbsp;used.&nbsp;*/</span></span> 
<a id="x1-39619r112"></a><span>112</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1293"><span>return</span></span><span>&nbsp;i;</span> 
<a id="x1-39621r113"></a><span>113</span><span>}</span> 
<a id="x1-39623r114"></a><span>114</span> 
<a id="x1-39625r115"></a><span>115</span><span id="textcolor1294"><span>/*&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;whenever&nbsp;a&nbsp;process&nbsp;tries&nbsp;to&nbsp;do&nbsp;an&nbsp;ioctl&nbsp;on&nbsp;our</span></span> 
<a id="x1-39627r116"></a><span>116</span><span id="textcolor1295"><span>&nbsp;*&nbsp;device&nbsp;file.&nbsp;We&nbsp;get&nbsp;two&nbsp;extra&nbsp;parameters&nbsp;(additional&nbsp;to&nbsp;the&nbsp;inode&nbsp;and&nbsp;file</span></span> 
<a id="x1-39629r117"></a><span>117</span><span id="textcolor1296"><span>&nbsp;*&nbsp;structures,&nbsp;which&nbsp;all&nbsp;device&nbsp;functions&nbsp;get):&nbsp;the&nbsp;number&nbsp;of&nbsp;the&nbsp;ioctl&nbsp;called</span></span> 
<a id="x1-39631r118"></a><span>118</span><span id="textcolor1297"><span>&nbsp;*&nbsp;and&nbsp;the&nbsp;parameter&nbsp;given&nbsp;to&nbsp;the&nbsp;ioctl&nbsp;function.</span></span> 
<a id="x1-39633r119"></a><span>119</span><span id="textcolor1298"><span>&nbsp;*</span></span> 
<a id="x1-39635r120"></a><span>120</span><span id="textcolor1299"><span>&nbsp;*&nbsp;If&nbsp;the&nbsp;ioctl&nbsp;is&nbsp;write&nbsp;or&nbsp;read/write&nbsp;(meaning&nbsp;output&nbsp;is&nbsp;returned&nbsp;to&nbsp;the</span></span> 
<a id="x1-39637r121"></a><span>121</span><span id="textcolor1300"><span>&nbsp;*&nbsp;calling&nbsp;process),&nbsp;the&nbsp;ioctl&nbsp;call&nbsp;returns&nbsp;the&nbsp;output&nbsp;of&nbsp;this&nbsp;function.</span></span> 
<a id="x1-39639r122"></a><span>122</span><span id="textcolor1301"><span>&nbsp;*/</span></span> 
<a id="x1-39641r123"></a><span>123</span><span id="textcolor1302"><span>static</span></span><span>&nbsp;</span><span id="textcolor1303"><span>long</span></span> 
<a id="x1-39643r124"></a><span>124</span><span>device_ioctl(</span><span id="textcolor1304"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor1305"><span>/*&nbsp;ditto&nbsp;*/</span></span> 
<a id="x1-39645r125"></a><span>125</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1306"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1307"><span>int</span></span><span>&nbsp;ioctl_num,&nbsp;</span><span id="textcolor1308"><span>/*&nbsp;number&nbsp;and&nbsp;param&nbsp;for&nbsp;ioctl&nbsp;*/</span></span> 
<a id="x1-39647r126"></a><span>126</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1309"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1310"><span>long</span></span><span>&nbsp;ioctl_param)</span> 
<a id="x1-39649r127"></a><span>127</span><span>{</span> 
<a id="x1-39651r128"></a><span>128</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1311"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-39653r129"></a><span>129</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1312"><span>long</span></span><span>&nbsp;ret&nbsp;=&nbsp;SUCCESS;</span> 
<a id="x1-39655r130"></a><span>130</span> 
<a id="x1-39657r131"></a><span>131</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1313"><span>/*&nbsp;We&nbsp;don</span><span>'</span><span>t&nbsp;want&nbsp;to&nbsp;talk&nbsp;to&nbsp;two&nbsp;processes&nbsp;at&nbsp;the&nbsp;same&nbsp;time.&nbsp;*/</span></span> 
<a id="x1-39659r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1314"><span>if</span></span><span>&nbsp;(atomic_cmpxchg(&amp;already_open,&nbsp;CDEV_NOT_USED,&nbsp;CDEV_EXCLUSIVE_OPEN))</span> 
<a id="x1-39661r133"></a><span>133</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1315"><span>return</span></span><span>&nbsp;-EBUSY;</span> 
<a id="x1-39663r134"></a><span>134</span> 
<a id="x1-39665r135"></a><span>135</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1316"><span>/*&nbsp;Switch&nbsp;according&nbsp;to&nbsp;the&nbsp;ioctl&nbsp;called&nbsp;*/</span></span> 
<a id="x1-39667r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1317"><span>switch</span></span><span>&nbsp;(ioctl_num)&nbsp;{</span> 
<a id="x1-39669r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1318"><span>case</span></span><span>&nbsp;IOCTL_SET_MSG:&nbsp;{</span> 
<a id="x1-39671r138"></a><span>138</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1319"><span>/*&nbsp;Receive&nbsp;a&nbsp;pointer&nbsp;to&nbsp;a&nbsp;message&nbsp;(in&nbsp;user&nbsp;space)&nbsp;and&nbsp;set&nbsp;that&nbsp;to</span></span> 
<a id="x1-39673r139"></a><span>139</span><span id="textcolor1320"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;be&nbsp;the&nbsp;device</span><span>'</span><span>s&nbsp;message.&nbsp;Get&nbsp;the&nbsp;parameter&nbsp;given&nbsp;to&nbsp;ioctl&nbsp;by</span></span> 
<a id="x1-39675r140"></a><span>140</span><span id="textcolor1321"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;process.</span></span> 
<a id="x1-39677r141"></a><span>141</span><span id="textcolor1322"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39679r142"></a><span>142</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1323"><span>char</span></span><span>&nbsp;__user&nbsp;*tmp&nbsp;=&nbsp;(</span><span id="textcolor1324"><span>char</span></span><span>&nbsp;__user&nbsp;*)ioctl_param;</span> 
<a id="x1-39681r143"></a><span>143</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1325"><span>char</span></span><span>&nbsp;ch;</span> 
<a id="x1-39683r144"></a><span>144</span> 
<a id="x1-39685r145"></a><span>145</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1326"><span>/*&nbsp;Find&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;message&nbsp;*/</span></span> 
<a id="x1-39687r146"></a><span>146</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_user(ch,&nbsp;tmp);</span> 
<a id="x1-39689r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1327"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;ch&nbsp;&amp;&amp;&nbsp;i&nbsp;&lt;&nbsp;BUF_LEN;&nbsp;i++,&nbsp;tmp++)</span> 
<a id="x1-39691r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_user(ch,&nbsp;tmp);</span> 
<a id="x1-39693r149"></a><span>149</span> 
<a id="x1-39695r150"></a><span>150</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device_write(file,&nbsp;(</span><span id="textcolor1328"><span>char</span></span><span>&nbsp;__user&nbsp;*)ioctl_param,&nbsp;i,&nbsp;NULL);</span> 
<a id="x1-39697r151"></a><span>151</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1329"><span>break</span></span><span>;</span> 
<a id="x1-39699r152"></a><span>152</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39701r153"></a><span>153</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1330"><span>case</span></span><span>&nbsp;IOCTL_GET_MSG:&nbsp;{</span> 
<a id="x1-39703r154"></a><span>154</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;offset&nbsp;=&nbsp;0;</span> 
<a id="x1-39705r155"></a><span>155</span> 
<a id="x1-39707r156"></a><span>156</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1331"><span>/*&nbsp;Give&nbsp;the&nbsp;current&nbsp;message&nbsp;to&nbsp;the&nbsp;calling&nbsp;process&nbsp;-&nbsp;the&nbsp;parameter</span></span> 
<a id="x1-39709r157"></a><span>157</span><span id="textcolor1332"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;we&nbsp;got&nbsp;is&nbsp;a&nbsp;pointer,&nbsp;fill&nbsp;it.</span></span> 
<a id="x1-39711r158"></a><span>158</span><span id="textcolor1333"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39713r159"></a><span>159</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;device_read(file,&nbsp;(</span><span id="textcolor1334"><span>char</span></span><span>&nbsp;__user&nbsp;*)ioctl_param,&nbsp;99,&nbsp;&amp;offset);</span> 
<a id="x1-39715r160"></a><span>160</span> 
<a id="x1-39717r161"></a><span>161</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1335"><span>/*&nbsp;Put&nbsp;a&nbsp;zero&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;buffer,&nbsp;so&nbsp;it&nbsp;will&nbsp;be&nbsp;properly</span></span> 
<a id="x1-39719r162"></a><span>162</span><span id="textcolor1336"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;terminated.</span></span> 
<a id="x1-39721r163"></a><span>163</span><span id="textcolor1337"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39723r164"></a><span>164</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put_user(</span><span id="textcolor1338"><span>'</span><span>\0</span><span>'</span></span><span>,&nbsp;(</span><span id="textcolor1339"><span>char</span></span><span>&nbsp;__user&nbsp;*)ioctl_param&nbsp;+&nbsp;i);</span> 
<a id="x1-39725r165"></a><span>165</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1340"><span>break</span></span><span>;</span> 
<a id="x1-39727r166"></a><span>166</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39729r167"></a><span>167</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1341"><span>case</span></span><span>&nbsp;IOCTL_GET_NTH_BYTE:</span> 
<a id="x1-39731r168"></a><span>168</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1342"><span>/*&nbsp;This&nbsp;ioctl&nbsp;is&nbsp;both&nbsp;input&nbsp;(ioctl_param)&nbsp;and&nbsp;output&nbsp;(the&nbsp;return</span></span> 
<a id="x1-39733r169"></a><span>169</span><span id="textcolor1343"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;value&nbsp;of&nbsp;this&nbsp;function).</span></span> 
<a id="x1-39735r170"></a><span>170</span><span id="textcolor1344"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-39737r171"></a><span>171</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;(</span><span id="textcolor1345"><span>long</span></span><span>)message[ioctl_param];</span> 
<a id="x1-39739r172"></a><span>172</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1346"><span>break</span></span><span>;</span> 
<a id="x1-39741r173"></a><span>173</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39743r174"></a><span>174</span> 
<a id="x1-39745r175"></a><span>175</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1347"><span>/*&nbsp;We</span><span>'</span><span>re&nbsp;now&nbsp;ready&nbsp;for&nbsp;our&nbsp;next&nbsp;caller&nbsp;*/</span></span> 
<a id="x1-39747r176"></a><span>176</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_set(&amp;already_open,&nbsp;CDEV_NOT_USED);</span> 
<a id="x1-39749r177"></a><span>177</span> 
<a id="x1-39751r178"></a><span>178</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1348"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-39753r179"></a><span>179</span><span>}</span> 
<a id="x1-39755r180"></a><span>180</span> 
<a id="x1-39757r181"></a><span>181</span><span id="textcolor1349"><span>/*&nbsp;Module&nbsp;Declarations&nbsp;*/</span></span> 
<a id="x1-39759r182"></a><span>182</span> 
<a id="x1-39761r183"></a><span>183</span><span id="textcolor1350"><span>/*&nbsp;This&nbsp;structure&nbsp;will&nbsp;hold&nbsp;the&nbsp;functions&nbsp;to&nbsp;be&nbsp;called&nbsp;when&nbsp;a&nbsp;process&nbsp;does</span></span> 
<a id="x1-39763r184"></a><span>184</span><span id="textcolor1351"><span>&nbsp;*&nbsp;something&nbsp;to&nbsp;the&nbsp;device&nbsp;we&nbsp;created.&nbsp;Since&nbsp;a&nbsp;pointer&nbsp;to&nbsp;this&nbsp;structure</span></span> 
<a id="x1-39765r185"></a><span>185</span><span id="textcolor1352"><span>&nbsp;*&nbsp;is&nbsp;kept&nbsp;in&nbsp;the&nbsp;devices&nbsp;table,&nbsp;it&nbsp;can</span><span>'</span><span>t&nbsp;be&nbsp;local&nbsp;to&nbsp;init_module.&nbsp;NULL&nbsp;is</span></span> 
<a id="x1-39767r186"></a><span>186</span><span id="textcolor1353"><span>&nbsp;*&nbsp;for&nbsp;unimplemented&nbsp;functions.</span></span> 
<a id="x1-39769r187"></a><span>187</span><span id="textcolor1354"><span>&nbsp;*/</span></span> 
<a id="x1-39771r188"></a><span>188</span><span id="textcolor1355"><span>static</span></span><span>&nbsp;</span><span id="textcolor1356"><span>struct</span></span><span>&nbsp;file_operations&nbsp;fops&nbsp;=&nbsp;{</span> 
<a id="x1-39773r189"></a><span>189</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;device_read,</span> 
<a id="x1-39775r190"></a><span>190</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;device_write,</span> 
<a id="x1-39777r191"></a><span>191</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.unlocked_ioctl&nbsp;=&nbsp;device_ioctl,</span> 
<a id="x1-39779r192"></a><span>192</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;device_open,</span> 
<a id="x1-39781r193"></a><span>193</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;device_release,&nbsp;</span><span id="textcolor1357"><span>/*&nbsp;a.k.a.&nbsp;close&nbsp;*/</span></span> 
<a id="x1-39783r194"></a><span>194</span><span>};</span> 
<a id="x1-39785r195"></a><span>195</span> 
<a id="x1-39787r196"></a><span>196</span><span id="textcolor1358"><span>/*&nbsp;Initialize&nbsp;the&nbsp;module&nbsp;-&nbsp;Register&nbsp;the&nbsp;character&nbsp;device&nbsp;*/</span></span> 
<a id="x1-39789r197"></a><span>197</span><span id="textcolor1359"><span>static</span></span><span>&nbsp;</span><span id="textcolor1360"><span>int</span></span><span>&nbsp;__init&nbsp;chardev2_init(</span><span id="textcolor1361"><span>void</span></span><span>)</span> 
<a id="x1-39791r198"></a><span>198</span><span>{</span> 
<a id="x1-39793r199"></a><span>199</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1362"><span>/*&nbsp;Register&nbsp;the&nbsp;character&nbsp;device&nbsp;(atleast&nbsp;try)&nbsp;*/</span></span> 
<a id="x1-39795r200"></a><span>200</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1363"><span>int</span></span><span>&nbsp;ret_val&nbsp;=&nbsp;register_chrdev(MAJOR_NUM,&nbsp;DEVICE_NAME,&nbsp;&amp;fops);</span> 
<a id="x1-39797r201"></a><span>201</span> 
<a id="x1-39799r202"></a><span>202</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1364"><span>/*&nbsp;Negative&nbsp;values&nbsp;signify&nbsp;an&nbsp;error&nbsp;*/</span></span> 
<a id="x1-39801r203"></a><span>203</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1365"><span>if</span></span><span>&nbsp;(ret_val&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-39803r204"></a><span>204</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1366"><span>"%s&nbsp;failed&nbsp;with&nbsp;%d</span></span><span id="textcolor1367"><span>\n</span></span><span id="textcolor1368"><span>"</span></span><span>,</span> 
<a id="x1-39805r205"></a><span>205</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1369"><span>"Sorry,&nbsp;registering&nbsp;the&nbsp;character&nbsp;device&nbsp;"</span></span><span>,&nbsp;ret_val);</span> 
<a id="x1-39807r206"></a><span>206</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1370"><span>return</span></span><span>&nbsp;ret_val;</span> 
<a id="x1-39809r207"></a><span>207</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-39811r208"></a><span>208</span> 
<a id="x1-39813r209"></a><span>209</span><span id="textcolor1371"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-39815r210"></a><span>210</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cls&nbsp;=&nbsp;class_create(DEVICE_FILE_NAME);</span> 
<a id="x1-39817r211"></a><span>211</span><span id="textcolor1372"><span>#else</span></span> 
<a id="x1-39819r212"></a><span>212</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cls&nbsp;=&nbsp;class_create(THIS_MODULE,&nbsp;DEVICE_FILE_NAME);</span> 
<a id="x1-39821r213"></a><span>213</span><span id="textcolor1373"><span>#endif</span></span> 
<a id="x1-39823r214"></a><span>214</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_create(cls,&nbsp;NULL,&nbsp;MKDEV(MAJOR_NUM,&nbsp;0),&nbsp;NULL,&nbsp;DEVICE_FILE_NAME);</span> 
<a id="x1-39825r215"></a><span>215</span> 
<a id="x1-39827r216"></a><span>216</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1374"><span>"Device&nbsp;created&nbsp;on&nbsp;/dev/%s</span></span><span id="textcolor1375"><span>\n</span></span><span id="textcolor1376"><span>"</span></span><span>,&nbsp;DEVICE_FILE_NAME);</span> 
<a id="x1-39829r217"></a><span>217</span> 
<a id="x1-39831r218"></a><span>218</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1377"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-39833r219"></a><span>219</span><span>}</span> 
<a id="x1-39835r220"></a><span>220</span> 
<a id="x1-39837r221"></a><span>221</span><span id="textcolor1378"><span>/*&nbsp;Cleanup&nbsp;-&nbsp;unregister&nbsp;the&nbsp;appropriate&nbsp;file&nbsp;from&nbsp;/proc&nbsp;*/</span></span> 
<a id="x1-39839r222"></a><span>222</span><span id="textcolor1379"><span>static</span></span><span>&nbsp;</span><span id="textcolor1380"><span>void</span></span><span>&nbsp;__exit&nbsp;chardev2_exit(</span><span id="textcolor1381"><span>void</span></span><span>)</span> 
<a id="x1-39841r223"></a><span>223</span><span>{</span> 
<a id="x1-39843r224"></a><span>224</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_destroy(cls,&nbsp;MKDEV(MAJOR_NUM,&nbsp;0));</span> 
<a id="x1-39845r225"></a><span>225</span><span>&nbsp;&nbsp;&nbsp;&nbsp;class_destroy(cls);</span> 
<a id="x1-39847r226"></a><span>226</span> 
<a id="x1-39849r227"></a><span>227</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1382"><span>/*&nbsp;Unregister&nbsp;the&nbsp;device&nbsp;*/</span></span> 
<a id="x1-39851r228"></a><span>228</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_chrdev(MAJOR_NUM,&nbsp;DEVICE_NAME);</span> 
<a id="x1-39853r229"></a><span>229</span><span>}</span> 
<a id="x1-39855r230"></a><span>230</span> 
<a id="x1-39857r231"></a><span>231</span><span>module_init(chardev2_init);</span> 
<a id="x1-39859r232"></a><span>232</span><span>module_exit(chardev2_exit);</span> 
<a id="x1-39861r233"></a><span>233</span> 
<a id="x1-39863r234"></a><span>234</span><span>MODULE_LICENSE(</span><span id="textcolor1383"><span>"GPL"</span></span><span>);</span></pre>

<!-- l. 1 -->
   <pre id="fancyvrb62"><a id="x1-39865r1"></a><span>1</span><span id="textcolor1384"><span>/*</span></span> 
<a id="x1-39867r2"></a><span>2</span><span id="textcolor1385"><span>&nbsp;*&nbsp;chardev.h&nbsp;-&nbsp;the&nbsp;header&nbsp;file&nbsp;with&nbsp;the&nbsp;ioctl&nbsp;definitions.</span></span> 
<a id="x1-39869r3"></a><span>3</span><span id="textcolor1386"><span>&nbsp;*</span></span> 
<a id="x1-39871r4"></a><span>4</span><span id="textcolor1387"><span>&nbsp;*&nbsp;The&nbsp;declarations&nbsp;here&nbsp;have&nbsp;to&nbsp;be&nbsp;in&nbsp;a&nbsp;header&nbsp;file,&nbsp;because&nbsp;they&nbsp;need</span></span> 
<a id="x1-39873r5"></a><span>5</span><span id="textcolor1388"><span>&nbsp;*&nbsp;to&nbsp;be&nbsp;known&nbsp;both&nbsp;to&nbsp;the&nbsp;kernel&nbsp;module&nbsp;(in&nbsp;chardev2.c)&nbsp;and&nbsp;the&nbsp;process</span></span> 
<a id="x1-39875r6"></a><span>6</span><span id="textcolor1389"><span>&nbsp;*&nbsp;calling&nbsp;ioctl()&nbsp;(in&nbsp;userspace_ioctl.c).</span></span> 
<a id="x1-39877r7"></a><span>7</span><span id="textcolor1390"><span>&nbsp;*/</span></span> 
<a id="x1-39879r8"></a><span>8</span> 
<a id="x1-39881r9"></a><span>9</span><span id="textcolor1391"><span>#ifndef&nbsp;CHARDEV_H</span></span> 
<a id="x1-39883r10"></a><span>10</span><span id="textcolor1392"><span>#define&nbsp;CHARDEV_H</span></span> 
<a id="x1-39885r11"></a><span>11</span> 
<a id="x1-39887r12"></a><span>12</span><span id="textcolor1393"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1394"><span>&lt;linux/ioctl.h&gt;</span></span> 
<a id="x1-39889r13"></a><span>13</span> 
<a id="x1-39891r14"></a><span>14</span><span id="textcolor1395"><span>/*&nbsp;The&nbsp;major&nbsp;device&nbsp;number.&nbsp;We&nbsp;can&nbsp;not&nbsp;rely&nbsp;on&nbsp;dynamic&nbsp;registration</span></span> 
<a id="x1-39893r15"></a><span>15</span><span id="textcolor1396"><span>&nbsp;*&nbsp;any&nbsp;more,&nbsp;because&nbsp;ioctls&nbsp;need&nbsp;to&nbsp;know&nbsp;it.</span></span> 
<a id="x1-39895r16"></a><span>16</span><span id="textcolor1397"><span>&nbsp;*/</span></span> 
<a id="x1-39897r17"></a><span>17</span><span id="textcolor1398"><span>#define&nbsp;MAJOR_NUM&nbsp;100</span></span> 
<a id="x1-39899r18"></a><span>18</span> 
<a id="x1-39901r19"></a><span>19</span><span id="textcolor1399"><span>/*&nbsp;Set&nbsp;the&nbsp;message&nbsp;of&nbsp;the&nbsp;device&nbsp;driver&nbsp;*/</span></span> 
<a id="x1-39903r20"></a><span>20</span><span id="textcolor1400"><span>#define&nbsp;IOCTL_SET_MSG&nbsp;_IOW(MAJOR_NUM,&nbsp;0,&nbsp;char&nbsp;*)</span></span> 
<a id="x1-39905r21"></a><span>21</span><span id="textcolor1401"><span>/*&nbsp;_IOW&nbsp;means&nbsp;that&nbsp;we&nbsp;are&nbsp;creating&nbsp;an&nbsp;ioctl&nbsp;command&nbsp;number&nbsp;for&nbsp;passing</span></span> 
<a id="x1-39907r22"></a><span>22</span><span id="textcolor1402"><span>&nbsp;*&nbsp;information&nbsp;from&nbsp;a&nbsp;user&nbsp;process&nbsp;to&nbsp;the&nbsp;kernel&nbsp;module.</span></span> 
<a id="x1-39909r23"></a><span>23</span><span id="textcolor1403"><span>&nbsp;*</span></span> 
<a id="x1-39911r24"></a><span>24</span><span id="textcolor1404"><span>&nbsp;*&nbsp;The&nbsp;first&nbsp;arguments,&nbsp;MAJOR_NUM,&nbsp;is&nbsp;the&nbsp;major&nbsp;device&nbsp;number&nbsp;we&nbsp;are&nbsp;using.</span></span> 
<a id="x1-39913r25"></a><span>25</span><span id="textcolor1405"><span>&nbsp;*</span></span> 
<a id="x1-39915r26"></a><span>26</span><span id="textcolor1406"><span>&nbsp;*&nbsp;The&nbsp;second&nbsp;argument&nbsp;is&nbsp;the&nbsp;number&nbsp;of&nbsp;the&nbsp;command&nbsp;(there&nbsp;could&nbsp;be&nbsp;several</span></span> 
<a id="x1-39917r27"></a><span>27</span><span id="textcolor1407"><span>&nbsp;*&nbsp;with&nbsp;different&nbsp;meanings).</span></span> 
<a id="x1-39919r28"></a><span>28</span><span id="textcolor1408"><span>&nbsp;*</span></span> 
<a id="x1-39921r29"></a><span>29</span><span id="textcolor1409"><span>&nbsp;*&nbsp;The&nbsp;third&nbsp;argument&nbsp;is&nbsp;the&nbsp;type&nbsp;we&nbsp;want&nbsp;to&nbsp;get&nbsp;from&nbsp;the&nbsp;process&nbsp;to&nbsp;the</span></span> 
<a id="x1-39923r30"></a><span>30</span><span id="textcolor1410"><span>&nbsp;*&nbsp;kernel.</span></span> 
<a id="x1-39925r31"></a><span>31</span><span id="textcolor1411"><span>&nbsp;*/</span></span> 
<a id="x1-39927r32"></a><span>32</span> 
<a id="x1-39929r33"></a><span>33</span><span id="textcolor1412"><span>/*&nbsp;Get&nbsp;the&nbsp;message&nbsp;of&nbsp;the&nbsp;device&nbsp;driver&nbsp;*/</span></span> 
<a id="x1-39931r34"></a><span>34</span><span id="textcolor1413"><span>#define&nbsp;IOCTL_GET_MSG&nbsp;_IOR(MAJOR_NUM,&nbsp;1,&nbsp;char&nbsp;*)</span></span> 
<a id="x1-39933r35"></a><span>35</span><span id="textcolor1414"><span>/*&nbsp;This&nbsp;IOCTL&nbsp;is&nbsp;used&nbsp;for&nbsp;output,&nbsp;to&nbsp;get&nbsp;the&nbsp;message&nbsp;of&nbsp;the&nbsp;device&nbsp;driver.</span></span> 
<a id="x1-39935r36"></a><span>36</span><span id="textcolor1415"><span>&nbsp;*&nbsp;However,&nbsp;we&nbsp;still&nbsp;need&nbsp;the&nbsp;buffer&nbsp;to&nbsp;place&nbsp;the&nbsp;message&nbsp;in&nbsp;to&nbsp;be&nbsp;input,</span></span> 
<a id="x1-39937r37"></a><span>37</span><span id="textcolor1416"><span>&nbsp;*&nbsp;as&nbsp;it&nbsp;is&nbsp;allocated&nbsp;by&nbsp;the&nbsp;process.</span></span> 
<a id="x1-39939r38"></a><span>38</span><span id="textcolor1417"><span>&nbsp;*/</span></span> 
<a id="x1-39941r39"></a><span>39</span> 
<a id="x1-39943r40"></a><span>40</span><span id="textcolor1418"><span>/*&nbsp;Get&nbsp;the&nbsp;n</span><span>'</span><span>th&nbsp;byte&nbsp;of&nbsp;the&nbsp;message&nbsp;*/</span></span> 
<a id="x1-39945r41"></a><span>41</span><span id="textcolor1419"><span>#define&nbsp;IOCTL_GET_NTH_BYTE&nbsp;_IOWR(MAJOR_NUM,&nbsp;2,&nbsp;int)</span></span> 
<a id="x1-39947r42"></a><span>42</span><span id="textcolor1420"><span>/*&nbsp;The&nbsp;IOCTL&nbsp;is&nbsp;used&nbsp;for&nbsp;both&nbsp;input&nbsp;and&nbsp;output.&nbsp;It&nbsp;receives&nbsp;from&nbsp;the&nbsp;user</span></span> 
<a id="x1-39949r43"></a><span>43</span><span id="textcolor1421"><span>&nbsp;*&nbsp;a&nbsp;number,&nbsp;n,&nbsp;and&nbsp;returns&nbsp;message[n].</span></span> 
<a id="x1-39951r44"></a><span>44</span><span id="textcolor1422"><span>&nbsp;*/</span></span> 
<a id="x1-39953r45"></a><span>45</span> 
<a id="x1-39955r46"></a><span>46</span><span id="textcolor1423"><span>/*&nbsp;The&nbsp;name&nbsp;of&nbsp;the&nbsp;device&nbsp;file&nbsp;*/</span></span> 
<a id="x1-39957r47"></a><span>47</span><span id="textcolor1424"><span>#define&nbsp;DEVICE_FILE_NAME&nbsp;"char_dev"</span></span> 
<a id="x1-39959r48"></a><span>48</span><span id="textcolor1425"><span>#define&nbsp;DEVICE_PATH&nbsp;"/dev/char_dev"</span></span> 
<a id="x1-39961r49"></a><span>49</span> 
<a id="x1-39963r50"></a><span>50</span><span id="textcolor1426"><span>#endif</span></span></pre>

<!-- l. 1 -->
   <pre id="fancyvrb63"><a id="x1-39965r1"></a><span>1</span><span id="textcolor1427"><span>/*&nbsp;&nbsp;userspace_ioctl.c&nbsp;-&nbsp;the&nbsp;process&nbsp;to&nbsp;use&nbsp;ioctl</span><span>'</span><span>s&nbsp;to&nbsp;control&nbsp;the&nbsp;kernel&nbsp;module</span></span> 
<a id="x1-39967r2"></a><span>2</span><span id="textcolor1428"><span>&nbsp;*</span></span> 
<a id="x1-39969r3"></a><span>3</span><span id="textcolor1429"><span>&nbsp;*&nbsp;&nbsp;Until&nbsp;now&nbsp;we&nbsp;could&nbsp;have&nbsp;used&nbsp;cat&nbsp;for&nbsp;input&nbsp;and&nbsp;output.&nbsp;&nbsp;But&nbsp;now</span></span> 
<a id="x1-39971r4"></a><span>4</span><span id="textcolor1430"><span>&nbsp;*&nbsp;&nbsp;we&nbsp;need&nbsp;to&nbsp;do&nbsp;ioctl</span><span>'</span><span>s,&nbsp;which&nbsp;require&nbsp;writing&nbsp;our&nbsp;own&nbsp;process.&nbsp;</span></span> 
<a id="x1-39973r5"></a><span>5</span><span id="textcolor1431"><span>&nbsp;*/</span></span> 
<a id="x1-39975r6"></a><span>6</span> 
<a id="x1-39977r7"></a><span>7</span><span id="textcolor1432"><span>/*&nbsp;device&nbsp;specifics,&nbsp;such&nbsp;as&nbsp;ioctl&nbsp;numbers&nbsp;and&nbsp;the&nbsp;</span></span> 
<a id="x1-39979r8"></a><span>8</span><span id="textcolor1433"><span>&nbsp;*&nbsp;major&nbsp;device&nbsp;file.&nbsp;*/</span></span> 
<a id="x1-39981r9"></a><span>9</span><span id="textcolor1434"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1435"><span>"../chardev.h"</span></span> 
<a id="x1-39983r10"></a><span>10</span> 
<a id="x1-39985r11"></a><span>11</span><span id="textcolor1436"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1437"><span>&lt;stdio.h&gt;&nbsp;/*&nbsp;standard&nbsp;I/O&nbsp;*/</span></span> 
<a id="x1-39987r12"></a><span>12</span><span id="textcolor1438"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1439"><span>&lt;fcntl.h&gt;&nbsp;/*&nbsp;open&nbsp;*/</span></span> 
<a id="x1-39989r13"></a><span>13</span><span id="textcolor1440"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1441"><span>&lt;unistd.h&gt;&nbsp;/*&nbsp;close&nbsp;*/</span></span> 
<a id="x1-39991r14"></a><span>14</span><span id="textcolor1442"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1443"><span>&lt;stdlib.h&gt;&nbsp;/*&nbsp;exit&nbsp;*/</span></span> 
<a id="x1-39993r15"></a><span>15</span><span id="textcolor1444"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1445"><span>&lt;sys/ioctl.h&gt;&nbsp;/*&nbsp;ioctl&nbsp;*/</span></span> 
<a id="x1-39995r16"></a><span>16</span> 
<a id="x1-39997r17"></a><span>17</span><span id="textcolor1446"><span>/*&nbsp;Functions&nbsp;for&nbsp;the&nbsp;ioctl&nbsp;calls&nbsp;*/</span></span> 
<a id="x1-39999r18"></a><span>18</span> 
<a id="x1-40001r19"></a><span>19</span><span id="textcolor1447"><span>int</span></span><span>&nbsp;ioctl_set_msg(</span><span id="textcolor1448"><span>int</span></span><span>&nbsp;file_desc,&nbsp;</span><span id="textcolor1449"><span>char</span></span><span>&nbsp;*message)</span> 
<a id="x1-40003r20"></a><span>20</span><span>{</span> 
<a id="x1-40005r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1450"><span>int</span></span><span>&nbsp;ret_val;</span> 
<a id="x1-40007r22"></a><span>22</span> 
<a id="x1-40009r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret_val&nbsp;=&nbsp;ioctl(file_desc,&nbsp;IOCTL_SET_MSG,&nbsp;message);</span> 
<a id="x1-40011r24"></a><span>24</span> 
<a id="x1-40013r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1451"><span>if</span></span><span>&nbsp;(ret_val&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-40015r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor1452"><span>"ioctl_set_msg&nbsp;failed:%d</span></span><span id="textcolor1453"><span>\n</span></span><span id="textcolor1454"><span>"</span></span><span>,&nbsp;ret_val);</span> 
<a id="x1-40017r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-40019r28"></a><span>28</span> 
<a id="x1-40021r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1455"><span>return</span></span><span>&nbsp;ret_val;</span> 
<a id="x1-40023r30"></a><span>30</span><span>}</span> 
<a id="x1-40025r31"></a><span>31</span> 
<a id="x1-40027r32"></a><span>32</span><span id="textcolor1456"><span>int</span></span><span>&nbsp;ioctl_get_msg(</span><span id="textcolor1457"><span>int</span></span><span>&nbsp;file_desc)</span> 
<a id="x1-40029r33"></a><span>33</span><span>{</span> 
<a id="x1-40031r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1458"><span>int</span></span><span>&nbsp;ret_val;</span> 
<a id="x1-40033r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1459"><span>char</span></span><span>&nbsp;message[100]&nbsp;=&nbsp;{&nbsp;0&nbsp;};</span> 
<a id="x1-40035r36"></a><span>36</span> 
<a id="x1-40037r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1460"><span>/*&nbsp;Warning&nbsp;-&nbsp;this&nbsp;is&nbsp;dangerous&nbsp;because&nbsp;we&nbsp;don</span><span>'</span><span>t&nbsp;tell&nbsp;</span></span> 
<a id="x1-40039r38"></a><span>38</span><span id="textcolor1461"><span>&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;kernel&nbsp;how&nbsp;far&nbsp;it</span><span>'</span><span>s&nbsp;allowed&nbsp;to&nbsp;write,&nbsp;so&nbsp;it&nbsp;</span></span> 
<a id="x1-40041r39"></a><span>39</span><span id="textcolor1462"><span>&nbsp;&nbsp;&nbsp;*&nbsp;might&nbsp;overflow&nbsp;the&nbsp;buffer.&nbsp;In&nbsp;a&nbsp;real&nbsp;production&nbsp;</span></span> 
<a id="x1-40043r40"></a><span>40</span><span id="textcolor1463"><span>&nbsp;&nbsp;&nbsp;*&nbsp;program,&nbsp;we&nbsp;would&nbsp;have&nbsp;used&nbsp;two&nbsp;ioctls&nbsp;-&nbsp;one&nbsp;to&nbsp;tell</span></span> 
<a id="x1-40045r41"></a><span>41</span><span id="textcolor1464"><span>&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;kernel&nbsp;the&nbsp;buffer&nbsp;length&nbsp;and&nbsp;another&nbsp;to&nbsp;give&nbsp;</span></span> 
<a id="x1-40047r42"></a><span>42</span><span id="textcolor1465"><span>&nbsp;&nbsp;&nbsp;*&nbsp;it&nbsp;the&nbsp;buffer&nbsp;to&nbsp;fill</span></span> 
<a id="x1-40049r43"></a><span>43</span><span id="textcolor1466"><span>&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-40051r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret_val&nbsp;=&nbsp;ioctl(file_desc,&nbsp;IOCTL_GET_MSG,&nbsp;message);</span> 
<a id="x1-40053r45"></a><span>45</span> 
<a id="x1-40055r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1467"><span>if</span></span><span>&nbsp;(ret_val&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-40057r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor1468"><span>"ioctl_get_msg&nbsp;failed:%d</span></span><span id="textcolor1469"><span>\n</span></span><span id="textcolor1470"><span>"</span></span><span>,&nbsp;ret_val);</span> 
<a id="x1-40059r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-40061r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor1471"><span>"get_msg&nbsp;message:%s"</span></span><span>,&nbsp;message);</span> 
<a id="x1-40063r50"></a><span>50</span> 
<a id="x1-40065r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1472"><span>return</span></span><span>&nbsp;ret_val;</span> 
<a id="x1-40067r52"></a><span>52</span><span>}</span> 
<a id="x1-40069r53"></a><span>53</span> 
<a id="x1-40071r54"></a><span>54</span><span id="textcolor1473"><span>int</span></span><span>&nbsp;ioctl_get_nth_byte(</span><span id="textcolor1474"><span>int</span></span><span>&nbsp;file_desc)</span> 
<a id="x1-40073r55"></a><span>55</span><span>{</span> 
<a id="x1-40075r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1475"><span>int</span></span><span>&nbsp;i,&nbsp;c;</span> 
<a id="x1-40077r57"></a><span>57</span> 
<a id="x1-40079r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor1476"><span>"get_nth_byte&nbsp;message:"</span></span><span>);</span> 
<a id="x1-40081r59"></a><span>59</span> 
<a id="x1-40083r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;0;</span> 
<a id="x1-40085r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1477"><span>do</span></span><span>&nbsp;{</span> 
<a id="x1-40087r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;ioctl(file_desc,&nbsp;IOCTL_GET_NTH_BYTE,&nbsp;i++);</span> 
<a id="x1-40089r63"></a><span>63</span> 
<a id="x1-40091r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1478"><span>if</span></span><span>&nbsp;(c&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-40093r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor1479"><span>"</span></span><span id="textcolor1480"><span>\n</span></span><span id="textcolor1481"><span>ioctl_get_nth_byte&nbsp;failed&nbsp;at&nbsp;the&nbsp;%d</span><span>'</span><span>th&nbsp;byte:</span></span><span id="textcolor1482"><span>\n</span></span><span id="textcolor1483"><span>"</span></span><span>,&nbsp;i);</span> 
<a id="x1-40095r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1484"><span>return</span></span><span>&nbsp;c;</span> 
<a id="x1-40097r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-40099r68"></a><span>68</span> 
<a id="x1-40101r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;putchar(c);</span> 
<a id="x1-40103r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span id="textcolor1485"><span>while</span></span><span>&nbsp;(c&nbsp;!=&nbsp;0);</span> 
<a id="x1-40105r71"></a><span>71</span> 
<a id="x1-40107r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1486"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-40109r73"></a><span>73</span><span>}</span> 
<a id="x1-40111r74"></a><span>74</span> 
<a id="x1-40113r75"></a><span>75</span><span id="textcolor1487"><span>/*&nbsp;Main&nbsp;-&nbsp;Call&nbsp;the&nbsp;ioctl&nbsp;functions&nbsp;*/</span></span> 
<a id="x1-40115r76"></a><span>76</span><span id="textcolor1488"><span>int</span></span><span>&nbsp;main(</span><span id="textcolor1489"><span>void</span></span><span>)</span> 
<a id="x1-40117r77"></a><span>77</span><span>{</span> 
<a id="x1-40119r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1490"><span>int</span></span><span>&nbsp;file_desc,&nbsp;ret_val;</span> 
<a id="x1-40121r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1491"><span>char</span></span><span>&nbsp;*msg&nbsp;=&nbsp;</span><span id="textcolor1492"><span>"Message&nbsp;passed&nbsp;by&nbsp;ioctl</span></span><span id="textcolor1493"><span>\n</span></span><span id="textcolor1494"><span>"</span></span><span>;</span> 
<a id="x1-40123r80"></a><span>80</span> 
<a id="x1-40125r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;file_desc&nbsp;=&nbsp;open(DEVICE_PATH,&nbsp;O_RDWR);</span> 
<a id="x1-40127r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1495"><span>if</span></span><span>&nbsp;(file_desc&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-40129r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor1496"><span>"Can</span><span>'</span><span>t&nbsp;open&nbsp;device&nbsp;file:&nbsp;%s,&nbsp;error:%d</span></span><span id="textcolor1497"><span>\n</span></span><span id="textcolor1498"><span>"</span></span><span>,&nbsp;DEVICE_PATH,</span> 
<a id="x1-40131r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_desc);</span> 
<a id="x1-40133r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(EXIT_FAILURE);</span> 
<a id="x1-40135r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-40137r87"></a><span>87</span> 
<a id="x1-40139r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret_val&nbsp;=&nbsp;ioctl_set_msg(file_desc,&nbsp;msg);</span> 
<a id="x1-40141r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1499"><span>if</span></span><span>&nbsp;(ret_val)</span> 
<a id="x1-40143r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1500"><span>goto</span></span><span>&nbsp;error;</span> 
<a id="x1-40145r91"></a><span>91</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret_val&nbsp;=&nbsp;ioctl_get_nth_byte(file_desc);</span> 
<a id="x1-40147r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1501"><span>if</span></span><span>&nbsp;(ret_val)</span> 
<a id="x1-40149r93"></a><span>93</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1502"><span>goto</span></span><span>&nbsp;error;</span> 
<a id="x1-40151r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret_val&nbsp;=&nbsp;ioctl_get_msg(file_desc);</span> 
<a id="x1-40153r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1503"><span>if</span></span><span>&nbsp;(ret_val)</span> 
<a id="x1-40155r96"></a><span>96</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1504"><span>goto</span></span><span>&nbsp;error;</span> 
<a id="x1-40157r97"></a><span>97</span> 
<a id="x1-40159r98"></a><span>98</span><span>&nbsp;&nbsp;&nbsp;&nbsp;close(file_desc);</span> 
<a id="x1-40161r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1505"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-40163r100"></a><span>100</span><span>error:</span> 
<a id="x1-40165r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;close(file_desc);</span> 
<a id="x1-40167r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;exit(EXIT_FAILURE);</span> 
<a id="x1-40169r103"></a><span>103</span><span>}</span></pre>
<!-- l. 1412 -->
   <h3 id="system-calls"><span>10   </span> <a id="x1-4100010"></a>System Calls</h3>
<!-- l. 1414 --><p>So far, the only thing we’ve done was to use well defined kernel mechanisms to
register <span><span><span>/proc</span></span></span> files and device handlers. This is fine if you want to do something the
kernel programmers thought you’d want, such as write a device driver. But what if
                                                                  

                                                                  
you want to do something unusual, to change the behavior of the system in some
way? Then, you are mostly on your own.
</p><!-- l. 1419 --><p>   Should one choose not to use a virtual machine, kernel programming
can become risky. For example, while writing the code below, the
<code> <span>open()</span>
</code> system call was inadvertently disrupted. This resulted in an inability to open any
files, run programs, or shut down the system, necessitating a restart of the virtual
machine. Fortunately, no critical files were lost in this instance. However, if such
modifications were made on a live, mission-critical system, the consequences could be
severe. To mitigate the risk of file loss, even in a test environment, it is advised to
execute <code>  <span>sync</span>
</code> right before using <code>  <span>insmod</span>
</code> and <code>  <span>rmmod</span>
</code>.
</p><!-- l. 1426 --><p>   Forget about <span><span><span>/proc</span></span></span> files, forget about device files. They are just minor details.
Minutiae in the vast expanse of the universe. The real process to kernel
communication mechanism, the one used by all processes, is <span>system calls</span>. When a
process requests a service from the kernel (such as opening a file, forking to a new
process, or requesting more memory), this is the mechanism used. If you want to
change the behaviour of the kernel in interesting ways, this is the place to do
it. By the way, if you want to see which system calls a program uses, run
<code> <span>strace&nbsp;&lt;arguments&gt;</span>
</code>.
</p><!-- l. 1434 --><p>   In general, a process is not supposed to be able to access the kernel. It can not
access kernel memory and it can’t call kernel functions. The hardware of the CPU
enforces this (that is the reason why it is called “protected mode” or “page
protection”).
</p><!-- l. 1438 --><p>   System calls are an exception to this general rule. What happens is that the
process fills the registers with the appropriate values and then calls a special
instruction which jumps to a previously defined location in the kernel (of course, that
location is readable by user processes, it is not writable by them). Under Intel CPUs,
this is done by means of interrupt 0x80. The hardware knows that once you jump to
this location, you are no longer running in restricted user mode, but as the
operating system kernel — and therefore you’re allowed to do whatever you
want.
</p><!-- l. 1443 --><p>   The location in the kernel a process can jump to is called <span><span><span>system_call</span></span></span>. The
procedure at that location checks the system call number, which tells the kernel what
service the process requested. Then, it looks at the table of system calls
(<code>  <span>sys_call_table</span>
</code>) to see the address of the kernel function to call. Then it calls the function, and after
it returns, does a few system checks and then return back to the process (or to a
different process, if the process time ran out). If you want to read this code, it is
at the source file <span><span><span>arch/$(architecture)/kernel/entry.S</span></span></span>, after the line
<code> <span>ENTRY(system_call)</span>
</code>.
</p><!-- l. 1449 --><p>   So, if we want to change the way a certain system call works, what we need to do
                                                                  

                                                                  
is to write our own function to implement it (usually by adding a bit of our own
code, and then calling the original function) and then change the pointer at
<code> <span>sys_call_table</span>
</code> to point to our function. Because we might be removed later and we
don’t want to leave the system in an unstable state, it’s important for
<code> <span>cleanup_module</span>
</code> to restore the table to its original state.
</p><!-- l. 1452 --><p>   To modify the content of <code>  <span>sys_call_table</span>
</code>, we need to consider the control register. A control register is a processor
register that changes or controls the general behavior of the CPU. For x86
architecture, the <span><span><span>cr0</span></span></span> register has various control flags that modify the basic
operation of the processor. The <span><span><span>WP</span></span></span> flag in <span><span><span>cr0</span></span></span> stands for write protection.
Once the <span><span><span>WP</span></span></span> flag is set, the processor disallows further write attempts to the
read-only sections Therefore, we must disable the <span><span><span>WP</span></span></span> flag before modifying
<code> <span>sys_call_table</span>
</code>. Since Linux v5.3, the <code>  <span>write_cr0</span>
</code> function cannot be used because of the sensitive <span><span><span>cr0</span></span></span> bits pinned by the security
issue, the attacker may write into CPU control registers to disable CPU protections
like write protection. As a result, we have to provide the custom assembly routine to
bypass it.
</p><!-- l. 1461 --><p>   However, <code>  <span>sys_call_table</span>
</code> symbol is unexported to prevent misuse. But there have few ways to get the symbol, manual
symbol lookup and <code>  <span>kallsyms_lookup_name</span>
</code>. Here we use both depend on the kernel version.
</p><!-- l. 1465 --><p>   Because of the <span>control-flow integrity</span>, which is a technique to prevent the redirect
execution code from the attacker, for making sure that the indirect calls go to the
expected addresses and the return addresses are not changed. Since Linux v5.7, the
kernel patched the series of <span>control-flow enforcement </span>(CET) for x86, and some
configurations of GCC, like GCC versions 9 and 10 in Ubuntu Linux, will add with
CET (the <span><span><span>-fcf-protection</span></span></span> option) in the kernel by default. Using that GCC to
compile the kernel with retpoline off may result in CET being enabled in the kernel.
You can use the following command to check out the <span><span><span>-fcf-protection</span></span></span> option is
enabled or not:
                                                                  

                                                                  
</p>
   <pre id="verbatim-16">$&nbsp;gcc&nbsp;-v&nbsp;-Q&nbsp;-O2&nbsp;--help=target&nbsp;|&nbsp;grep&nbsp;protection
Using&nbsp;built-in&nbsp;specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper
...
gcc&nbsp;version&nbsp;9.3.0&nbsp;(Ubuntu&nbsp;9.3.0-17ubuntu1~20.04)
COLLECT_GCC_OPTIONS='-v'&nbsp;'-Q'&nbsp;'-O2'&nbsp;'--help=target'&nbsp;'-mtune=generic'&nbsp;'-march=x86-64'
&nbsp;/usr/lib/gcc/x86_64-linux-gnu/9/cc1&nbsp;-v&nbsp;...&nbsp;-fcf-protection&nbsp;...
&nbsp;GNU&nbsp;C17&nbsp;(Ubuntu&nbsp;9.3.0-17ubuntu1~20.04)&nbsp;version&nbsp;9.3.0&nbsp;(x86_64-linux-gnu)
...
</pre>
<!-- l. 1482 --><p>But CET should not be enabled in the kernel, it may break the Kprobes and bpf.
Consequently, CET is disabled since v5.11. To guarantee the manual symbol lookup
worked, we only use up to v5.4.
</p><!-- l. 1487 --><p>   Unfortunately, since Linux v5.7 <code>  <span>kallsyms_lookup_name</span>
</code> is also unexported, it needs certain trick to get the address of
<code> <span>kallsyms_lookup_name</span>
</code>. If <code>  <span>CONFIG_KPROBES</span>
</code> is enabled, we can facilitate the retrieval of function addresses by means of Kprobes
to dynamically break into the specific kernel routine. Kprobes inserts a breakpoint at
the entry of function by replacing the first bytes of the probed instruction. When a
CPU hits the breakpoint, registers are stored, and the control will pass to Kprobes. It
passes the addresses of the saved registers and the Kprobe struct to the handler
you defined, then executes it. Kprobes can be registered by symbol name
or address. Within the symbol name, the address will be handled by the
kernel.
</p><!-- l. 1495 --><p>   Otherwise, specify the address of <code>  <span>sys_call_table</span>
</code> from <span><span><span>/proc/kallsyms</span></span></span> and <span><span><span>/boot/System.map</span></span></span> into
<code> <span>sym</span>
</code> parameter. Following is the sample usage for <span><span><span>/proc/kallsyms</span></span></span>:
                                                                  

                                                                  
</p>
   <pre id="verbatim-17">$&nbsp;sudo&nbsp;grep&nbsp;sys_call_table&nbsp;/proc/kallsyms
ffffffff82000280&nbsp;R&nbsp;x32_sys_call_table
ffffffff820013a0&nbsp;R&nbsp;sys_call_table
ffffffff820023e0&nbsp;R&nbsp;ia32_sys_call_table
$&nbsp;sudo&nbsp;insmod&nbsp;syscall-steal.ko&nbsp;sym=0xffffffff820013a0
</pre>
<!-- l. 1503 --><!-- l. 1505 --><p>   Using the address from <span><span><span>/boot/System.map</span></span></span>, be careful about <span><span><span>KASLR</span></span></span> (Kernel
Address Space Layout Randomization). <span><span><span>KASLR</span></span></span> may randomize the address of
kernel code and data at every boot time, such as the static address listed in
<span><span><span>/boot/System.map</span></span></span> will offset by some entropy. The purpose of <span><span><span>KASLR</span></span></span> is to protect
the kernel space from the attacker. Without <span><span><span>KASLR</span></span></span>, the attacker may find the target
address in the fixed address easily. Then the attacker can use return-oriented
programming to insert some malicious codes to execute or receive the target data by
a tampered pointer. <span><span><span>KASLR</span></span></span> mitigates these kinds of attacks because the attacker
cannot immediately know the target address, but a brute-force attack can still work.
If the address of a symbol in <span><span><span>/proc/kallsyms</span></span></span> is different from the address in
<span><span><span>/boot/System.map</span></span></span>, <span><span><span>KASLR</span></span></span> is enabled with the kernel, which your system running
on.
                                                                  

                                                                  
</p>
   <pre id="verbatim-18">$&nbsp;grep&nbsp;GRUB_CMDLINE_LINUX_DEFAULT&nbsp;/etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="quiet&nbsp;splash"
$&nbsp;sudo&nbsp;grep&nbsp;sys_call_table&nbsp;/boot/System.map-$(uname&nbsp;-r)
ffffffff82000300&nbsp;R&nbsp;sys_call_table
$&nbsp;sudo&nbsp;grep&nbsp;sys_call_table&nbsp;/proc/kallsyms
ffffffff820013a0&nbsp;R&nbsp;sys_call_table
#&nbsp;Reboot
$&nbsp;sudo&nbsp;grep&nbsp;sys_call_table&nbsp;/boot/System.map-$(uname&nbsp;-r)
ffffffff82000300&nbsp;R&nbsp;sys_call_table
$&nbsp;sudo&nbsp;grep&nbsp;sys_call_table&nbsp;/proc/kallsyms
ffffffff86400300&nbsp;R&nbsp;sys_call_table
</pre>
<!-- l. 1524 --><p>If <span><span><span>KASLR</span></span></span> is enabled, we have to take care of the address from <span><span><span>/proc/kallsyms</span></span></span> each
time we reboot the machine. In order to use the address from <span><span><span>/boot/System.map</span></span></span>,
make sure that <span><span><span>KASLR</span></span></span> is disabled. You can add the <span><span><span>nokaslr</span></span></span> for disabling <span><span><span>KASLR</span></span></span> in
next booting time:
                                                                  

                                                                  
</p>
   <pre id="verbatim-19">$&nbsp;grep&nbsp;GRUB_CMDLINE_LINUX_DEFAULT&nbsp;/etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="quiet&nbsp;splash"
$&nbsp;sudo&nbsp;perl&nbsp;-i&nbsp;-pe&nbsp;'m/quiet/&nbsp;and&nbsp;s//quiet&nbsp;nokaslr/'&nbsp;/etc/default/grub
$&nbsp;grep&nbsp;quiet&nbsp;/etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="quiet&nbsp;nokaslr&nbsp;splash"
$&nbsp;sudo&nbsp;update-grub
</pre>
<!-- l. 1535 --><!-- l. 1537 --><p>   For more information, check out the following:
</p>
     <ul>
     <li><a href="https://lwn.net/Articles/804849/">Cook: Security things in Linux v5.3</a>
     </li>
     <li><a href="https://lwn.net/Articles/12211/">Unexporting the system call table</a>
     </li>
     <li><a href="https://lwn.net/Articles/810077/">Control-flow integrity for the kernel</a>
     </li>
     <li><a href="https://lwn.net/Articles/813350/">Unexporting kallsyms_lookup_name()</a>
     </li>
     <li><a href="https://www.kernel.org/doc/Documentation/kprobes.txt">Kernel Probes (Kprobes)</a>
     </li>
     <li><a href="https://lwn.net/Articles/569635/">Kernel address space layout randomization</a></li></ul>
<!-- l. 1548 --><p>   The source code here is an example of such a kernel module. We want to “spy” on a certain
user, and to <code>  <span>pr_info()</span>
</code> a message whenever that user opens a file. Towards this end, we
replace the system call to open a file with our own function, called
<code> <span>our_sys_openat</span>
</code>. This function checks the uid (user’s id) of the current process, and if it is equal to the uid we
                                                                  

                                                                  
spy on, it calls <code>  <span>pr_info()</span>
</code> to display the name of the file to be opened. Then, either way, it calls the original
<code> <span>openat()</span>
</code> function with the same parameters, to actually open the file.
</p><!-- l. 1554 --><p>   The <code>  <span>init_module</span>
</code> function replaces the appropriate location in
<code> <span>sys_call_table</span>
</code> and keeps the original pointer in a variable. The
<code> <span>cleanup_module</span>
</code> function uses that variable to restore everything back to normal. This approach is
dangerous, because of the possibility of two kernel modules changing the same system
call. Imagine we have two kernel modules, A and B. A’s openat system call will be
<code> <span>A_openat</span>
</code> and B’s will be <code>  <span>B_openat</span>
</code>. Now, when A is inserted into the kernel, the system call is replaced with
<code> <span>A_openat</span>
</code>, which will call the original <code>  <span>sys_openat</span>
</code> when it is done. Next, B is inserted into the kernel, which replaces the system call
with <code>  <span>B_openat</span>
</code>, which will call what it thinks is the original system call,
<code> <span>A_openat</span>
</code>, when it’s done.
</p><!-- l. 1561 --><p>   Now, if B is removed first, everything will be well — it will simply restore the system
call to <code>  <span>A_openat</span>
</code>, which calls the original. However, if A is removed and then B is removed, the
system will crash. A’s removal will restore the system call to the original,
<code> <span>sys_openat</span>
</code>, cutting B out of the loop. Then, when B is removed, it will restore the system call to what it thinks
is the original, <code>  <span>A_openat</span>
</code>, which is no longer in memory. At first glance, it appears we could solve
this particular problem by checking if the system call is equal to our
open function and if so not changing it at all (so that B won’t change
the system call when it is removed), but that will cause an even worse
problem. When A is removed, it sees that the system call was changed to
<code> <span>B_openat</span>
</code> so that it is no longer pointing to <code>  <span>A_openat</span>
</code>, so it will not restore it to <code>  <span>sys_openat</span>
</code> before it is removed from memory. Unfortunately,
<code> <span>B_openat</span>
</code> will still try to call <code>  <span>A_openat</span>
</code> which is no longer there, so that even without removing B the system would
crash.
</p><!-- l. 1569 --><p>   For x86 architecture, the system call table cannot be used to invoke a system call
after commit <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1e3ad78334a69b36e107232e337f9d693dcc9df2">1e3ad78</a> since v6.9. This commit has been backported to long term
stable kernels, like v5.15.154+, v6.1.85+, v6.6.26+ and v6.8.5+, see this <a href="https://stackoverflow.com/a/78607015">answer</a> for
more details. In this case, thanks to Kprobes, a hook can be used instead on the
                                                                  

                                                                  
system call entry to intercept the system call.
</p><!-- l. 1574 --><p>   Note that all the related problems make syscall stealing unfeasible for
production use. In order to keep people from doing potential harmful things
<code> <span>sys_call_table</span>
</code> is no longer exported. This means, if you want to do something more than a mere
dry run of this example, you will have to patch your current kernel in order to have
<code> <span>sys_call_table</span>
</code> exported.
</p><!-- l. 1 -->
   <pre id="fancyvrb64"><a id="x1-41044r1"></a><span>1</span><span id="textcolor1506"><span>/*</span></span> 
<a id="x1-41046r2"></a><span>2</span><span id="textcolor1507"><span>&nbsp;*&nbsp;syscall-steal.c</span></span> 
<a id="x1-41048r3"></a><span>3</span><span id="textcolor1508"><span>&nbsp;*</span></span> 
<a id="x1-41050r4"></a><span>4</span><span id="textcolor1509"><span>&nbsp;*&nbsp;System&nbsp;call&nbsp;"stealing"&nbsp;sample.</span></span> 
<a id="x1-41052r5"></a><span>5</span><span id="textcolor1510"><span>&nbsp;*</span></span> 
<a id="x1-41054r6"></a><span>6</span><span id="textcolor1511"><span>&nbsp;*&nbsp;Disables&nbsp;page&nbsp;protection&nbsp;at&nbsp;a&nbsp;processor&nbsp;level&nbsp;by&nbsp;changing&nbsp;the&nbsp;16th&nbsp;bit</span></span> 
<a id="x1-41056r7"></a><span>7</span><span id="textcolor1512"><span>&nbsp;*&nbsp;in&nbsp;the&nbsp;cr0&nbsp;register&nbsp;(could&nbsp;be&nbsp;Intel&nbsp;specific).</span></span> 
<a id="x1-41058r8"></a><span>8</span><span id="textcolor1513"><span>&nbsp;*/</span></span> 
<a id="x1-41060r9"></a><span>9</span> 
<a id="x1-41062r10"></a><span>10</span><span id="textcolor1514"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1515"><span>&lt;linux/delay.h&gt;</span></span> 
<a id="x1-41064r11"></a><span>11</span><span id="textcolor1516"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1517"><span>&lt;linux/kernel.h&gt;</span></span> 
<a id="x1-41066r12"></a><span>12</span><span id="textcolor1518"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1519"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-41068r13"></a><span>13</span><span id="textcolor1520"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1521"><span>&lt;linux/moduleparam.h&gt;&nbsp;/*&nbsp;which&nbsp;will&nbsp;have&nbsp;params&nbsp;*/</span></span> 
<a id="x1-41070r14"></a><span>14</span><span id="textcolor1522"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1523"><span>&lt;linux/unistd.h&gt;&nbsp;/*&nbsp;The&nbsp;list&nbsp;of&nbsp;system&nbsp;calls&nbsp;*/</span></span> 
<a id="x1-41072r15"></a><span>15</span><span id="textcolor1524"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1525"><span>&lt;linux/cred.h&gt;&nbsp;/*&nbsp;For&nbsp;current_uid()&nbsp;*/</span></span> 
<a id="x1-41074r16"></a><span>16</span><span id="textcolor1526"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1527"><span>&lt;linux/uidgid.h&gt;&nbsp;/*&nbsp;For&nbsp;__kuid_val()&nbsp;*/</span></span> 
<a id="x1-41076r17"></a><span>17</span><span id="textcolor1528"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1529"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-41078r18"></a><span>18</span> 
<a id="x1-41080r19"></a><span>19</span><span id="textcolor1530"><span>/*&nbsp;For&nbsp;the&nbsp;current&nbsp;(process)&nbsp;structure,&nbsp;we&nbsp;need&nbsp;this&nbsp;to&nbsp;know&nbsp;who&nbsp;the</span></span> 
<a id="x1-41082r20"></a><span>20</span><span id="textcolor1531"><span>&nbsp;*&nbsp;current&nbsp;user&nbsp;is.</span></span> 
<a id="x1-41084r21"></a><span>21</span><span id="textcolor1532"><span>&nbsp;*/</span></span> 
<a id="x1-41086r22"></a><span>22</span><span id="textcolor1533"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1534"><span>&lt;linux/sched.h&gt;</span></span> 
<a id="x1-41088r23"></a><span>23</span><span id="textcolor1535"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1536"><span>&lt;linux/uaccess.h&gt;</span></span> 
<a id="x1-41090r24"></a><span>24</span> 
<a id="x1-41092r25"></a><span>25</span><span id="textcolor1537"><span>/*&nbsp;The&nbsp;way&nbsp;we&nbsp;access&nbsp;"sys_call_table"&nbsp;varies&nbsp;as&nbsp;kernel&nbsp;internal&nbsp;changes.</span></span> 
<a id="x1-41094r26"></a><span>26</span><span id="textcolor1538"><span>&nbsp;*&nbsp;-&nbsp;Prior&nbsp;to&nbsp;v5.4&nbsp;:&nbsp;manual&nbsp;symbol&nbsp;lookup</span></span> 
<a id="x1-41096r27"></a><span>27</span><span id="textcolor1539"><span>&nbsp;*&nbsp;-&nbsp;v5.5&nbsp;to&nbsp;v5.6&nbsp;&nbsp;:&nbsp;use&nbsp;kallsyms_lookup_name()</span></span> 
<a id="x1-41098r28"></a><span>28</span><span id="textcolor1540"><span>&nbsp;*&nbsp;-&nbsp;v5.7+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Kprobes&nbsp;or&nbsp;specific&nbsp;kernel&nbsp;module&nbsp;parameter</span></span> 
<a id="x1-41100r29"></a><span>29</span><span id="textcolor1541"><span>&nbsp;*/</span></span> 
<a id="x1-41102r30"></a><span>30</span> 
<a id="x1-41104r31"></a><span>31</span><span id="textcolor1542"><span>/*&nbsp;The&nbsp;in-kernel&nbsp;calls&nbsp;to&nbsp;the&nbsp;ksys_close()&nbsp;syscall&nbsp;were&nbsp;removed&nbsp;in&nbsp;Linux&nbsp;v5.11+.</span></span> 
<a id="x1-41106r32"></a><span>32</span><span id="textcolor1543"><span>&nbsp;*/</span></span> 
<a id="x1-41108r33"></a><span>33</span><span id="textcolor1544"><span>#if&nbsp;(LINUX_VERSION_CODE&nbsp;&lt;&nbsp;KERNEL_VERSION(5,&nbsp;7,&nbsp;0))</span></span> 
<a id="x1-41110r34"></a><span>34</span> 
<a id="x1-41112r35"></a><span>35</span><span id="textcolor1545"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&lt;=&nbsp;KERNEL_VERSION(5,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-41114r36"></a><span>36</span><span id="textcolor1546"><span>#define&nbsp;HAVE_KSYS_CLOSE&nbsp;1</span></span> 
<a id="x1-41116r37"></a><span>37</span><span id="textcolor1547"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1548"><span>&lt;linux/syscalls.h&gt;&nbsp;/*&nbsp;For&nbsp;ksys_close()&nbsp;*/</span></span> 
<a id="x1-41118r38"></a><span>38</span><span id="textcolor1549"><span>#else</span></span> 
<a id="x1-41120r39"></a><span>39</span><span id="textcolor1550"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1551"><span>&lt;linux/kallsyms.h&gt;&nbsp;/*&nbsp;For&nbsp;kallsyms_lookup_name&nbsp;*/</span></span> 
<a id="x1-41122r40"></a><span>40</span><span id="textcolor1552"><span>#endif</span></span> 
<a id="x1-41124r41"></a><span>41</span> 
<a id="x1-41126r42"></a><span>42</span><span id="textcolor1553"><span>#else</span></span> 
<a id="x1-41128r43"></a><span>43</span> 
<a id="x1-41130r44"></a><span>44</span><span id="textcolor1554"><span>#if&nbsp;defined(CONFIG_KPROBES)</span></span> 
<a id="x1-41132r45"></a><span>45</span><span id="textcolor1555"><span>#define&nbsp;HAVE_KPROBES&nbsp;1</span></span> 
<a id="x1-41134r46"></a><span>46</span><span id="textcolor1556"><span>#if&nbsp;defined(CONFIG_X86_64)</span></span> 
<a id="x1-41136r47"></a><span>47</span><span id="textcolor1557"><span>/*&nbsp;If&nbsp;you&nbsp;have&nbsp;tried&nbsp;to&nbsp;use&nbsp;the&nbsp;syscall&nbsp;table&nbsp;to&nbsp;intercept&nbsp;syscalls&nbsp;and&nbsp;it&nbsp;</span></span> 
<a id="x1-41138r48"></a><span>48</span><span id="textcolor1558"><span>&nbsp;*&nbsp;doesn</span><span>'</span><span>t&nbsp;work,&nbsp;you&nbsp;can&nbsp;try&nbsp;to&nbsp;use&nbsp;Kprobes&nbsp;to&nbsp;intercept&nbsp;syscalls.</span></span> 
<a id="x1-41140r49"></a><span>49</span><span id="textcolor1559"><span>&nbsp;*&nbsp;Set&nbsp;USE_KPROBES_PRE_HANDLER_BEFORE_SYSCALL&nbsp;to&nbsp;1&nbsp;to&nbsp;register&nbsp;a&nbsp;pre-handler</span></span> 
<a id="x1-41142r50"></a><span>50</span><span id="textcolor1560"><span>&nbsp;*&nbsp;before&nbsp;the&nbsp;syscall.</span></span> 
<a id="x1-41144r51"></a><span>51</span><span id="textcolor1561"><span>&nbsp;*/</span></span> 
<a id="x1-41146r52"></a><span>52</span><span id="textcolor1562"><span>#define&nbsp;USE_KPROBES_PRE_HANDLER_BEFORE_SYSCALL&nbsp;0</span></span> 
<a id="x1-41148r53"></a><span>53</span><span id="textcolor1563"><span>#endif</span></span> 
<a id="x1-41150r54"></a><span>54</span><span id="textcolor1564"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1565"><span>&lt;linux/kprobes.h&gt;</span></span> 
<a id="x1-41152r55"></a><span>55</span><span id="textcolor1566"><span>#else</span></span> 
<a id="x1-41154r56"></a><span>56</span><span id="textcolor1567"><span>#define&nbsp;HAVE_PARAM&nbsp;1</span></span> 
<a id="x1-41156r57"></a><span>57</span><span id="textcolor1568"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1569"><span>&lt;linux/kallsyms.h&gt;&nbsp;/*&nbsp;For&nbsp;sprint_symbol&nbsp;*/</span></span> 
<a id="x1-41158r58"></a><span>58</span><span id="textcolor1570"><span>/*&nbsp;The&nbsp;address&nbsp;of&nbsp;the&nbsp;sys_call_table,&nbsp;which&nbsp;can&nbsp;be&nbsp;obtained&nbsp;with&nbsp;looking&nbsp;up</span></span> 
<a id="x1-41160r59"></a><span>59</span><span id="textcolor1571"><span>&nbsp;*&nbsp;"/boot/System.map"&nbsp;or&nbsp;"/proc/kallsyms".&nbsp;When&nbsp;the&nbsp;kernel&nbsp;version&nbsp;is&nbsp;v5.7+,</span></span> 
<a id="x1-41162r60"></a><span>60</span><span id="textcolor1572"><span>&nbsp;*&nbsp;without&nbsp;CONFIG_KPROBES,&nbsp;you&nbsp;can&nbsp;input&nbsp;the&nbsp;parameter&nbsp;or&nbsp;the&nbsp;module&nbsp;will&nbsp;look</span></span> 
<a id="x1-41164r61"></a><span>61</span><span id="textcolor1573"><span>&nbsp;*&nbsp;up&nbsp;all&nbsp;the&nbsp;memory.</span></span> 
<a id="x1-41166r62"></a><span>62</span><span id="textcolor1574"><span>&nbsp;*/</span></span> 
<a id="x1-41168r63"></a><span>63</span><span id="textcolor1575"><span>static</span></span><span>&nbsp;</span><span id="textcolor1576"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1577"><span>long</span></span><span>&nbsp;sym&nbsp;=&nbsp;0;</span> 
<a id="x1-41170r64"></a><span>64</span><span>module_param(sym,&nbsp;ulong,&nbsp;0644);</span> 
<a id="x1-41172r65"></a><span>65</span><span id="textcolor1578"><span>#endif&nbsp;</span></span><span id="textcolor1579"><span>/*&nbsp;CONFIG_KPROBES&nbsp;*/</span></span> 
<a id="x1-41174r66"></a><span>66</span> 
<a id="x1-41176r67"></a><span>67</span><span id="textcolor1580"><span>#endif&nbsp;</span></span><span id="textcolor1581"><span>/*&nbsp;Version&nbsp;&lt;&nbsp;v5.7&nbsp;*/</span></span> 
<a id="x1-41178r68"></a><span>68</span> 
<a id="x1-41180r69"></a><span>69</span><span id="textcolor1582"><span>/*&nbsp;UID&nbsp;we&nbsp;want&nbsp;to&nbsp;spy&nbsp;on&nbsp;-&nbsp;will&nbsp;be&nbsp;filled&nbsp;from&nbsp;the&nbsp;command&nbsp;line.&nbsp;*/</span></span> 
<a id="x1-41182r70"></a><span>70</span><span id="textcolor1583"><span>static</span></span><span>&nbsp;</span><span id="textcolor1584"><span>uid_t</span></span><span>&nbsp;uid&nbsp;=&nbsp;-1;</span> 
<a id="x1-41184r71"></a><span>71</span><span>module_param(uid,&nbsp;</span><span id="textcolor1585"><span>int</span></span><span>,&nbsp;0644);</span> 
<a id="x1-41186r72"></a><span>72</span> 
<a id="x1-41188r73"></a><span>73</span><span id="textcolor1586"><span>#if&nbsp;USE_KPROBES_PRE_HANDLER_BEFORE_SYSCALL</span></span> 
<a id="x1-41190r74"></a><span>74</span> 
<a id="x1-41192r75"></a><span>75</span><span id="textcolor1587"><span>/*&nbsp;syscall_sym&nbsp;is&nbsp;the&nbsp;symbol&nbsp;name&nbsp;of&nbsp;the&nbsp;syscall&nbsp;to&nbsp;spy&nbsp;on.&nbsp;The&nbsp;default&nbsp;is</span></span> 
<a id="x1-41194r76"></a><span>76</span><span id="textcolor1588"><span>&nbsp;*&nbsp;"__x64_sys_openat",&nbsp;which&nbsp;can&nbsp;be&nbsp;changed&nbsp;by&nbsp;the&nbsp;module&nbsp;parameter.&nbsp;You&nbsp;can&nbsp;</span></span> 
<a id="x1-41196r77"></a><span>77</span><span id="textcolor1589"><span>&nbsp;*&nbsp;look&nbsp;up&nbsp;the&nbsp;symbol&nbsp;name&nbsp;of&nbsp;a&nbsp;syscall&nbsp;in&nbsp;/proc/kallsyms.</span></span> 
<a id="x1-41198r78"></a><span>78</span><span id="textcolor1590"><span>&nbsp;*/</span></span> 
<a id="x1-41200r79"></a><span>79</span><span id="textcolor1591"><span>static</span></span><span>&nbsp;</span><span id="textcolor1592"><span>char</span></span><span>&nbsp;*syscall_sym&nbsp;=&nbsp;</span><span id="textcolor1593"><span>"__x64_sys_openat"</span></span><span>;</span> 
<a id="x1-41202r80"></a><span>80</span><span>module_param(syscall_sym,&nbsp;charp,&nbsp;0644);</span> 
<a id="x1-41204r81"></a><span>81</span> 
<a id="x1-41206r82"></a><span>82</span><span id="textcolor1594"><span>static</span></span><span>&nbsp;</span><span id="textcolor1595"><span>int</span></span><span>&nbsp;sys_call_kprobe_pre_handler(</span><span id="textcolor1596"><span>struct</span></span><span>&nbsp;kprobe&nbsp;*p,&nbsp;</span><span id="textcolor1597"><span>struct</span></span><span>&nbsp;pt_regs&nbsp;*regs)</span> 
<a id="x1-41208r83"></a><span>83</span><span>{</span> 
<a id="x1-41210r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1598"><span>if</span></span><span>&nbsp;(__kuid_val(current_uid())&nbsp;!=&nbsp;uid)&nbsp;{</span> 
<a id="x1-41212r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1599"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-41214r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-41216r87"></a><span>87</span> 
<a id="x1-41218r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1600"><span>"%s&nbsp;called&nbsp;by&nbsp;%d</span></span><span id="textcolor1601"><span>\n</span></span><span id="textcolor1602"><span>"</span></span><span>,&nbsp;syscall_sym,&nbsp;uid);</span> 
<a id="x1-41220r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1603"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-41222r90"></a><span>90</span><span>}</span> 
<a id="x1-41224r91"></a><span>91</span> 
<a id="x1-41226r92"></a><span>92</span><span id="textcolor1604"><span>static</span></span><span>&nbsp;</span><span id="textcolor1605"><span>struct</span></span><span>&nbsp;kprobe&nbsp;syscall_kprobe&nbsp;=&nbsp;{</span> 
<a id="x1-41228r93"></a><span>93</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.symbol_name&nbsp;=&nbsp;</span><span id="textcolor1606"><span>"__x64_sys_openat"</span></span><span>,</span> 
<a id="x1-41230r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.pre_handler&nbsp;=&nbsp;sys_call_kprobe_pre_handler,</span> 
<a id="x1-41232r95"></a><span>95</span><span>};</span> 
<a id="x1-41234r96"></a><span>96</span><span id="textcolor1607"><span>#else</span></span> 
<a id="x1-41236r97"></a><span>97</span> 
<a id="x1-41238r98"></a><span>98</span><span id="textcolor1608"><span>static</span></span><span>&nbsp;</span><span id="textcolor1609"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1610"><span>long</span></span><span>&nbsp;**sys_call_table_stolen;</span> 
<a id="x1-41240r99"></a><span>99</span> 
<a id="x1-41242r100"></a><span>100</span><span id="textcolor1611"><span>/*&nbsp;A&nbsp;pointer&nbsp;to&nbsp;the&nbsp;original&nbsp;system&nbsp;call.&nbsp;The&nbsp;reason&nbsp;we&nbsp;keep&nbsp;this,&nbsp;rather</span></span> 
<a id="x1-41244r101"></a><span>101</span><span id="textcolor1612"><span>&nbsp;*&nbsp;than&nbsp;call&nbsp;the&nbsp;original&nbsp;function&nbsp;(sys_openat),&nbsp;is&nbsp;because&nbsp;somebody&nbsp;else</span></span> 
<a id="x1-41246r102"></a><span>102</span><span id="textcolor1613"><span>&nbsp;*&nbsp;might&nbsp;have&nbsp;replaced&nbsp;the&nbsp;system&nbsp;call&nbsp;before&nbsp;us.&nbsp;Note&nbsp;that&nbsp;this&nbsp;is&nbsp;not</span></span> 
<a id="x1-41248r103"></a><span>103</span><span id="textcolor1614"><span>&nbsp;*&nbsp;100%&nbsp;safe,&nbsp;because&nbsp;if&nbsp;another&nbsp;module&nbsp;replaced&nbsp;sys_openat&nbsp;before&nbsp;us,</span></span> 
<a id="x1-41250r104"></a><span>104</span><span id="textcolor1615"><span>&nbsp;*&nbsp;then&nbsp;when&nbsp;we&nbsp;are&nbsp;inserted,&nbsp;we&nbsp;will&nbsp;call&nbsp;the&nbsp;function&nbsp;in&nbsp;that&nbsp;module&nbsp;-</span></span> 
<a id="x1-41252r105"></a><span>105</span><span id="textcolor1616"><span>&nbsp;*&nbsp;and&nbsp;it&nbsp;might&nbsp;be&nbsp;removed&nbsp;before&nbsp;we&nbsp;are.</span></span> 
<a id="x1-41254r106"></a><span>106</span><span id="textcolor1617"><span>&nbsp;*</span></span> 
<a id="x1-41256r107"></a><span>107</span><span id="textcolor1618"><span>&nbsp;*&nbsp;Another&nbsp;reason&nbsp;for&nbsp;this&nbsp;is&nbsp;that&nbsp;we&nbsp;can&nbsp;not&nbsp;get&nbsp;sys_openat.</span></span> 
<a id="x1-41258r108"></a><span>108</span><span id="textcolor1619"><span>&nbsp;*&nbsp;It&nbsp;is&nbsp;a&nbsp;static&nbsp;variable,&nbsp;so&nbsp;it&nbsp;is&nbsp;not&nbsp;exported.</span></span> 
<a id="x1-41260r109"></a><span>109</span><span id="textcolor1620"><span>&nbsp;*/</span></span> 
<a id="x1-41262r110"></a><span>110</span><span id="textcolor1621"><span>#ifdef&nbsp;CONFIG_ARCH_HAS_SYSCALL_WRAPPER</span></span> 
<a id="x1-41264r111"></a><span>111</span><span id="textcolor1622"><span>static</span></span><span>&nbsp;asmlinkage&nbsp;long&nbsp;(*original_call)(</span><span id="textcolor1623"><span>const</span></span><span>&nbsp;</span><span id="textcolor1624"><span>struct</span></span><span>&nbsp;pt_regs&nbsp;*);</span> 
<a id="x1-41266r112"></a><span>112</span><span id="textcolor1625"><span>#else</span></span> 
<a id="x1-41268r113"></a><span>113</span><span id="textcolor1626"><span>static</span></span><span>&nbsp;asmlinkage&nbsp;long&nbsp;(*original_call)(</span><span id="textcolor1627"><span>int</span></span><span>,&nbsp;</span><span id="textcolor1628"><span>const</span></span><span>&nbsp;</span><span id="textcolor1629"><span>char</span></span><span>&nbsp;__user&nbsp;*,&nbsp;</span><span id="textcolor1630"><span>int</span></span><span>,&nbsp;umode_t);</span> 
<a id="x1-41270r114"></a><span>114</span><span id="textcolor1631"><span>#endif</span></span> 
<a id="x1-41272r115"></a><span>115</span> 
<a id="x1-41274r116"></a><span>116</span><span id="textcolor1632"><span>/*&nbsp;The&nbsp;function&nbsp;we&nbsp;will&nbsp;replace&nbsp;sys_openat&nbsp;(the&nbsp;function&nbsp;called&nbsp;when&nbsp;you</span></span> 
<a id="x1-41276r117"></a><span>117</span><span id="textcolor1633"><span>&nbsp;*&nbsp;call&nbsp;the&nbsp;open&nbsp;system&nbsp;call)&nbsp;with.&nbsp;To&nbsp;find&nbsp;the&nbsp;exact&nbsp;prototype,&nbsp;with</span></span> 
<a id="x1-41278r118"></a><span>118</span><span id="textcolor1634"><span>&nbsp;*&nbsp;the&nbsp;number&nbsp;and&nbsp;type&nbsp;of&nbsp;arguments,&nbsp;we&nbsp;find&nbsp;the&nbsp;original&nbsp;function&nbsp;first</span></span> 
<a id="x1-41280r119"></a><span>119</span><span id="textcolor1635"><span>&nbsp;*&nbsp;(it&nbsp;is&nbsp;at&nbsp;fs/open.c).</span></span> 
<a id="x1-41282r120"></a><span>120</span><span id="textcolor1636"><span>&nbsp;*</span></span> 
<a id="x1-41284r121"></a><span>121</span><span id="textcolor1637"><span>&nbsp;*&nbsp;In&nbsp;theory,&nbsp;this&nbsp;means&nbsp;that&nbsp;we&nbsp;are&nbsp;tied&nbsp;to&nbsp;the&nbsp;current&nbsp;version&nbsp;of&nbsp;the</span></span> 
<a id="x1-41286r122"></a><span>122</span><span id="textcolor1638"><span>&nbsp;*&nbsp;kernel.&nbsp;In&nbsp;practice,&nbsp;the&nbsp;system&nbsp;calls&nbsp;almost&nbsp;never&nbsp;change&nbsp;(it&nbsp;would</span></span> 
<a id="x1-41288r123"></a><span>123</span><span id="textcolor1639"><span>&nbsp;*&nbsp;wreck&nbsp;havoc&nbsp;and&nbsp;require&nbsp;programs&nbsp;to&nbsp;be&nbsp;recompiled,&nbsp;since&nbsp;the&nbsp;system</span></span> 
<a id="x1-41290r124"></a><span>124</span><span id="textcolor1640"><span>&nbsp;*&nbsp;calls&nbsp;are&nbsp;the&nbsp;interface&nbsp;between&nbsp;the&nbsp;kernel&nbsp;and&nbsp;the&nbsp;processes).</span></span> 
<a id="x1-41292r125"></a><span>125</span><span id="textcolor1641"><span>&nbsp;*/</span></span> 
<a id="x1-41294r126"></a><span>126</span><span id="textcolor1642"><span>#ifdef&nbsp;CONFIG_ARCH_HAS_SYSCALL_WRAPPER</span></span> 
<a id="x1-41296r127"></a><span>127</span><span id="textcolor1643"><span>static</span></span><span>&nbsp;asmlinkage&nbsp;</span><span id="textcolor1644"><span>long</span></span><span>&nbsp;our_sys_openat(</span><span id="textcolor1645"><span>const</span></span><span>&nbsp;</span><span id="textcolor1646"><span>struct</span></span><span>&nbsp;pt_regs&nbsp;*regs)</span> 
<a id="x1-41298r128"></a><span>128</span><span id="textcolor1647"><span>#else</span></span> 
<a id="x1-41300r129"></a><span>129</span><span id="textcolor1648"><span>static</span></span><span>&nbsp;asmlinkage&nbsp;</span><span id="textcolor1649"><span>long</span></span><span>&nbsp;our_sys_openat(</span><span id="textcolor1650"><span>int</span></span><span>&nbsp;dfd,&nbsp;</span><span id="textcolor1651"><span>const</span></span><span>&nbsp;</span><span id="textcolor1652"><span>char</span></span><span>&nbsp;__user&nbsp;*filename,</span> 
<a id="x1-41302r130"></a><span>130</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1653"><span>int</span></span><span>&nbsp;flags,&nbsp;umode_t&nbsp;mode)</span> 
<a id="x1-41304r131"></a><span>131</span><span id="textcolor1654"><span>#endif</span></span> 
<a id="x1-41306r132"></a><span>132</span><span>{</span> 
<a id="x1-41308r133"></a><span>133</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1655"><span>int</span></span><span>&nbsp;i&nbsp;=&nbsp;0;</span> 
<a id="x1-41310r134"></a><span>134</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1656"><span>char</span></span><span>&nbsp;ch;</span> 
<a id="x1-41312r135"></a><span>135</span> 
<a id="x1-41314r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1657"><span>if</span></span><span>&nbsp;(__kuid_val(current_uid())&nbsp;!=&nbsp;uid)</span> 
<a id="x1-41316r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1658"><span>goto</span></span><span>&nbsp;orig_call;</span> 
<a id="x1-41318r138"></a><span>138</span> 
<a id="x1-41320r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1659"><span>/*&nbsp;Report&nbsp;the&nbsp;file,&nbsp;if&nbsp;relevant&nbsp;*/</span></span> 
<a id="x1-41322r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1660"><span>"Opened&nbsp;file&nbsp;by&nbsp;%d:&nbsp;"</span></span><span>,&nbsp;uid);</span> 
<a id="x1-41324r141"></a><span>141</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1661"><span>do</span></span><span>&nbsp;{</span> 
<a id="x1-41326r142"></a><span>142</span><span id="textcolor1662"><span>#ifdef&nbsp;CONFIG_ARCH_HAS_SYSCALL_WRAPPER</span></span> 
<a id="x1-41328r143"></a><span>143</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_user(ch,&nbsp;(</span><span id="textcolor1663"><span>char</span></span><span>&nbsp;__user&nbsp;*)regs-&gt;si&nbsp;+&nbsp;i);</span> 
<a id="x1-41330r144"></a><span>144</span><span id="textcolor1664"><span>#else</span></span> 
<a id="x1-41332r145"></a><span>145</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_user(ch,&nbsp;(</span><span id="textcolor1665"><span>char</span></span><span>&nbsp;__user&nbsp;*)filename&nbsp;+&nbsp;i);</span> 
<a id="x1-41334r146"></a><span>146</span><span id="textcolor1666"><span>#endif</span></span> 
<a id="x1-41336r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;</span> 
<a id="x1-41338r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1667"><span>"%c"</span></span><span>,&nbsp;ch);</span> 
<a id="x1-41340r149"></a><span>149</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span id="textcolor1668"><span>while</span></span><span>&nbsp;(ch&nbsp;!=&nbsp;0);</span> 
<a id="x1-41342r150"></a><span>150</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1669"><span>"</span></span><span id="textcolor1670"><span>\n</span></span><span id="textcolor1671"><span>"</span></span><span>);</span> 
<a id="x1-41344r151"></a><span>151</span> 
<a id="x1-41346r152"></a><span>152</span><span>orig_call:</span> 
<a id="x1-41348r153"></a><span>153</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1672"><span>/*&nbsp;Call&nbsp;the&nbsp;original&nbsp;sys_openat&nbsp;-&nbsp;otherwise,&nbsp;we&nbsp;lose&nbsp;the&nbsp;ability&nbsp;to</span></span> 
<a id="x1-41350r154"></a><span>154</span><span id="textcolor1673"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;open&nbsp;files.</span></span> 
<a id="x1-41352r155"></a><span>155</span><span id="textcolor1674"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-41354r156"></a><span>156</span><span id="textcolor1675"><span>#ifdef&nbsp;CONFIG_ARCH_HAS_SYSCALL_WRAPPER</span></span> 
<a id="x1-41356r157"></a><span>157</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1676"><span>return</span></span><span>&nbsp;original_call(regs);</span> 
<a id="x1-41358r158"></a><span>158</span><span id="textcolor1677"><span>#else</span></span> 
<a id="x1-41360r159"></a><span>159</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1678"><span>return</span></span><span>&nbsp;original_call(dfd,&nbsp;filename,&nbsp;flags,&nbsp;mode);</span> 
<a id="x1-41362r160"></a><span>160</span><span id="textcolor1679"><span>#endif</span></span> 
<a id="x1-41364r161"></a><span>161</span><span>}</span> 
<a id="x1-41366r162"></a><span>162</span> 
<a id="x1-41368r163"></a><span>163</span><span id="textcolor1680"><span>static</span></span><span>&nbsp;</span><span id="textcolor1681"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1682"><span>long</span></span><span>&nbsp;**acquire_sys_call_table(</span><span id="textcolor1683"><span>void</span></span><span>)</span> 
<a id="x1-41370r164"></a><span>164</span><span>{</span> 
<a id="x1-41372r165"></a><span>165</span><span id="textcolor1684"><span>#ifdef&nbsp;HAVE_KSYS_CLOSE</span></span> 
<a id="x1-41374r166"></a><span>166</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1685"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1686"><span>long</span></span><span>&nbsp;</span><span id="textcolor1687"><span>int</span></span><span>&nbsp;offset&nbsp;=&nbsp;PAGE_OFFSET;</span> 
<a id="x1-41376r167"></a><span>167</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1688"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1689"><span>long</span></span><span>&nbsp;**sct;</span> 
<a id="x1-41378r168"></a><span>168</span> 
<a id="x1-41380r169"></a><span>169</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1690"><span>while</span></span><span>&nbsp;(offset&nbsp;&lt;&nbsp;ULLONG_MAX)&nbsp;{</span> 
<a id="x1-41382r170"></a><span>170</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sct&nbsp;=&nbsp;(</span><span id="textcolor1691"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1692"><span>long</span></span><span>&nbsp;**)offset;</span> 
<a id="x1-41384r171"></a><span>171</span> 
<a id="x1-41386r172"></a><span>172</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1693"><span>if</span></span><span>&nbsp;(sct[__NR_close]&nbsp;==&nbsp;(</span><span id="textcolor1694"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1695"><span>long</span></span><span>&nbsp;*)ksys_close)</span> 
<a id="x1-41388r173"></a><span>173</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1696"><span>return</span></span><span>&nbsp;sct;</span> 
<a id="x1-41390r174"></a><span>174</span> 
<a id="x1-41392r175"></a><span>175</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset&nbsp;+=&nbsp;</span><span id="textcolor1697"><span>sizeof</span></span><span>(</span><span id="textcolor1698"><span>void</span></span><span>&nbsp;*);</span> 
<a id="x1-41394r176"></a><span>176</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-41396r177"></a><span>177</span> 
<a id="x1-41398r178"></a><span>178</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1699"><span>return</span></span><span>&nbsp;NULL;</span> 
<a id="x1-41400r179"></a><span>179</span><span id="textcolor1700"><span>#endif</span></span> 
<a id="x1-41402r180"></a><span>180</span> 
<a id="x1-41404r181"></a><span>181</span><span id="textcolor1701"><span>#ifdef&nbsp;HAVE_PARAM</span></span> 
<a id="x1-41406r182"></a><span>182</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1702"><span>const</span></span><span>&nbsp;</span><span id="textcolor1703"><span>char</span></span><span>&nbsp;sct_name[15]&nbsp;=&nbsp;</span><span id="textcolor1704"><span>"sys_call_table"</span></span><span>;</span> 
<a id="x1-41408r183"></a><span>183</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1705"><span>char</span></span><span>&nbsp;symbol[40]&nbsp;=&nbsp;{&nbsp;0&nbsp;};</span> 
<a id="x1-41410r184"></a><span>184</span> 
<a id="x1-41412r185"></a><span>185</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1706"><span>if</span></span><span>&nbsp;(sym&nbsp;==&nbsp;0)&nbsp;{</span> 
<a id="x1-41414r186"></a><span>186</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1707"><span>"For&nbsp;Linux&nbsp;v5.7+,&nbsp;Kprobes&nbsp;is&nbsp;the&nbsp;preferable&nbsp;way&nbsp;to&nbsp;get&nbsp;"</span></span> 
<a id="x1-41416r187"></a><span>187</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1708"><span>"symbol.</span></span><span id="textcolor1709"><span>\n</span></span><span id="textcolor1710"><span>"</span></span><span>);</span> 
<a id="x1-41418r188"></a><span>188</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1711"><span>"If&nbsp;Kprobes&nbsp;is&nbsp;absent,&nbsp;you&nbsp;have&nbsp;to&nbsp;specify&nbsp;the&nbsp;address&nbsp;of&nbsp;"</span></span> 
<a id="x1-41420r189"></a><span>189</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1712"><span>"sys_call_table&nbsp;symbol</span></span><span id="textcolor1713"><span>\n</span></span><span id="textcolor1714"><span>"</span></span><span>);</span> 
<a id="x1-41422r190"></a><span>190</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1715"><span>"by&nbsp;/boot/System.map&nbsp;or&nbsp;/proc/kallsyms,&nbsp;which&nbsp;contains&nbsp;all&nbsp;the&nbsp;"</span></span> 
<a id="x1-41424r191"></a><span>191</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1716"><span>"symbol&nbsp;addresses,&nbsp;into&nbsp;sym&nbsp;parameter.</span></span><span id="textcolor1717"><span>\n</span></span><span id="textcolor1718"><span>"</span></span><span>);</span> 
<a id="x1-41426r192"></a><span>192</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1719"><span>return</span></span><span>&nbsp;NULL;</span> 
<a id="x1-41428r193"></a><span>193</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-41430r194"></a><span>194</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sprint_symbol(symbol,&nbsp;sym);</span> 
<a id="x1-41432r195"></a><span>195</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1720"><span>if</span></span><span>&nbsp;(!strncmp(sct_name,&nbsp;symbol,&nbsp;</span><span id="textcolor1721"><span>sizeof</span></span><span>(sct_name)&nbsp;-&nbsp;1))</span> 
<a id="x1-41434r196"></a><span>196</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1722"><span>return</span></span><span>&nbsp;(</span><span id="textcolor1723"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1724"><span>long</span></span><span>&nbsp;**)sym;</span> 
<a id="x1-41436r197"></a><span>197</span> 
<a id="x1-41438r198"></a><span>198</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1725"><span>return</span></span><span>&nbsp;NULL;</span> 
<a id="x1-41440r199"></a><span>199</span><span id="textcolor1726"><span>#endif</span></span> 
<a id="x1-41442r200"></a><span>200</span> 
<a id="x1-41444r201"></a><span>201</span><span id="textcolor1727"><span>#ifdef&nbsp;HAVE_KPROBES</span></span> 
<a id="x1-41446r202"></a><span>202</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1728"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1729"><span>long</span></span><span>&nbsp;(*kallsyms_lookup_name)(</span><span id="textcolor1730"><span>const</span></span><span>&nbsp;</span><span id="textcolor1731"><span>char</span></span><span>&nbsp;*name);</span> 
<a id="x1-41448r203"></a><span>203</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1732"><span>struct</span></span><span>&nbsp;kprobe&nbsp;kp&nbsp;=&nbsp;{</span> 
<a id="x1-41450r204"></a><span>204</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.symbol_name&nbsp;=&nbsp;</span><span id="textcolor1733"><span>"kallsyms_lookup_name"</span></span><span>,</span> 
<a id="x1-41452r205"></a><span>205</span><span>&nbsp;&nbsp;&nbsp;&nbsp;};</span> 
<a id="x1-41454r206"></a><span>206</span> 
<a id="x1-41456r207"></a><span>207</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1734"><span>if</span></span><span>&nbsp;(register_kprobe(&amp;kp)&nbsp;&lt;&nbsp;0)</span> 
<a id="x1-41458r208"></a><span>208</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1735"><span>return</span></span><span>&nbsp;NULL;</span> 
<a id="x1-41460r209"></a><span>209</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kallsyms_lookup_name&nbsp;=&nbsp;(</span><span id="textcolor1736"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1737"><span>long</span></span><span>&nbsp;(*)(</span><span id="textcolor1738"><span>const</span></span><span>&nbsp;</span><span id="textcolor1739"><span>char</span></span><span>&nbsp;*name))kp.addr;</span> 
<a id="x1-41462r210"></a><span>210</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_kprobe(&amp;kp);</span> 
<a id="x1-41464r211"></a><span>211</span><span id="textcolor1740"><span>#endif</span></span> 
<a id="x1-41466r212"></a><span>212</span> 
<a id="x1-41468r213"></a><span>213</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1741"><span>return</span></span><span>&nbsp;(</span><span id="textcolor1742"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1743"><span>long</span></span><span>&nbsp;**)kallsyms_lookup_name(</span><span id="textcolor1744"><span>"sys_call_table"</span></span><span>);</span> 
<a id="x1-41470r214"></a><span>214</span><span>}</span> 
<a id="x1-41472r215"></a><span>215</span> 
<a id="x1-41474r216"></a><span>216</span><span id="textcolor1745"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;3,&nbsp;0)</span></span> 
<a id="x1-41476r217"></a><span>217</span><span id="textcolor1746"><span>static</span></span><span>&nbsp;</span><span id="textcolor1747"><span>inline</span></span><span>&nbsp;</span><span id="textcolor1748"><span>void</span></span><span>&nbsp;__write_cr0(</span><span id="textcolor1749"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1750"><span>long</span></span><span>&nbsp;cr0)</span> 
<a id="x1-41478r218"></a><span>218</span><span>{</span> 
<a id="x1-41480r219"></a><span>219</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1751"><span>asm</span></span><span>&nbsp;</span><span id="textcolor1752"><span>volatile</span></span><span>(</span><span id="textcolor1753"><span>"mov&nbsp;%0,%%cr0"</span></span><span>&nbsp;:&nbsp;</span><span id="textcolor1754"><span>"+r"</span></span><span>(cr0)&nbsp;:&nbsp;:&nbsp;</span><span id="textcolor1755"><span>"memory"</span></span><span>);</span> 
<a id="x1-41482r220"></a><span>220</span><span>}</span> 
<a id="x1-41484r221"></a><span>221</span><span id="textcolor1756"><span>#else</span></span> 
<a id="x1-41486r222"></a><span>222</span><span id="textcolor1757"><span>#define&nbsp;__write_cr0&nbsp;write_cr0</span></span> 
<a id="x1-41488r223"></a><span>223</span><span id="textcolor1758"><span>#endif</span></span> 
<a id="x1-41490r224"></a><span>224</span> 
<a id="x1-41492r225"></a><span>225</span><span id="textcolor1759"><span>static</span></span><span>&nbsp;</span><span id="textcolor1760"><span>void</span></span><span>&nbsp;enable_write_protection(</span><span id="textcolor1761"><span>void</span></span><span>)</span> 
<a id="x1-41494r226"></a><span>226</span><span>{</span> 
<a id="x1-41496r227"></a><span>227</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1762"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1763"><span>long</span></span><span>&nbsp;cr0&nbsp;=&nbsp;read_cr0();</span> 
<a id="x1-41498r228"></a><span>228</span><span>&nbsp;&nbsp;&nbsp;&nbsp;set_bit(16,&nbsp;&amp;cr0);</span> 
<a id="x1-41500r229"></a><span>229</span><span>&nbsp;&nbsp;&nbsp;&nbsp;__write_cr0(cr0);</span> 
<a id="x1-41502r230"></a><span>230</span><span>}</span> 
<a id="x1-41504r231"></a><span>231</span> 
<a id="x1-41506r232"></a><span>232</span><span id="textcolor1764"><span>static</span></span><span>&nbsp;</span><span id="textcolor1765"><span>void</span></span><span>&nbsp;disable_write_protection(</span><span id="textcolor1766"><span>void</span></span><span>)</span> 
<a id="x1-41508r233"></a><span>233</span><span>{</span> 
<a id="x1-41510r234"></a><span>234</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1767"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1768"><span>long</span></span><span>&nbsp;cr0&nbsp;=&nbsp;read_cr0();</span> 
<a id="x1-41512r235"></a><span>235</span><span>&nbsp;&nbsp;&nbsp;&nbsp;clear_bit(16,&nbsp;&amp;cr0);</span> 
<a id="x1-41514r236"></a><span>236</span><span>&nbsp;&nbsp;&nbsp;&nbsp;__write_cr0(cr0);</span> 
<a id="x1-41516r237"></a><span>237</span><span>}</span> 
<a id="x1-41518r238"></a><span>238</span><span id="textcolor1769"><span>#endif</span></span> 
<a id="x1-41520r239"></a><span>239</span> 
<a id="x1-41522r240"></a><span>240</span><span id="textcolor1770"><span>static</span></span><span>&nbsp;</span><span id="textcolor1771"><span>int</span></span><span>&nbsp;__init&nbsp;syscall_steal_start(</span><span id="textcolor1772"><span>void</span></span><span>)</span> 
<a id="x1-41524r241"></a><span>241</span><span>{</span> 
<a id="x1-41526r242"></a><span>242</span><span id="textcolor1773"><span>#if&nbsp;USE_KPROBES_PRE_HANDLER_BEFORE_SYSCALL</span></span> 
<a id="x1-41528r243"></a><span>243</span> 
<a id="x1-41530r244"></a><span>244</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1774"><span>int</span></span><span>&nbsp;err;</span> 
<a id="x1-41532r245"></a><span>245</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1775"><span>/*&nbsp;use&nbsp;symbol&nbsp;name&nbsp;from&nbsp;the&nbsp;module&nbsp;parameter&nbsp;*/</span></span> 
<a id="x1-41534r246"></a><span>246</span><span>&nbsp;&nbsp;&nbsp;&nbsp;syscall_kprobe.symbol_name&nbsp;=&nbsp;syscall_sym;</span> 
<a id="x1-41536r247"></a><span>247</span><span>&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;register_kprobe(&amp;syscall_kprobe);</span> 
<a id="x1-41538r248"></a><span>248</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1776"><span>if</span></span><span>&nbsp;(err)&nbsp;{</span> 
<a id="x1-41540r249"></a><span>249</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor1777"><span>"register_kprobe()&nbsp;on&nbsp;%s&nbsp;failed:&nbsp;%d</span></span><span id="textcolor1778"><span>\n</span></span><span id="textcolor1779"><span>"</span></span><span>,&nbsp;syscall_sym,&nbsp;err);</span> 
<a id="x1-41542r250"></a><span>250</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor1780"><span>"Please&nbsp;check&nbsp;the&nbsp;symbol&nbsp;name&nbsp;from&nbsp;</span><span>'</span><span>syscall_sym</span><span>'</span><span>&nbsp;parameter.</span></span><span id="textcolor1781"><span>\n</span></span><span id="textcolor1782"><span>"</span></span><span>);</span> 
<a id="x1-41544r251"></a><span>251</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1783"><span>return</span></span><span>&nbsp;err;</span> 
<a id="x1-41546r252"></a><span>252</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-41548r253"></a><span>253</span> 
<a id="x1-41550r254"></a><span>254</span><span id="textcolor1784"><span>#else</span></span> 
<a id="x1-41552r255"></a><span>255</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1785"><span>if</span></span><span>&nbsp;(!(sys_call_table_stolen&nbsp;=&nbsp;acquire_sys_call_table()))</span> 
<a id="x1-41554r256"></a><span>256</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1786"><span>return</span></span><span>&nbsp;-1;</span> 
<a id="x1-41556r257"></a><span>257</span> 
<a id="x1-41558r258"></a><span>258</span><span>&nbsp;&nbsp;&nbsp;&nbsp;disable_write_protection();</span> 
<a id="x1-41560r259"></a><span>259</span> 
<a id="x1-41562r260"></a><span>260</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1787"><span>/*&nbsp;keep&nbsp;track&nbsp;of&nbsp;the&nbsp;original&nbsp;open&nbsp;function&nbsp;*/</span></span> 
<a id="x1-41564r261"></a><span>261</span><span>&nbsp;&nbsp;&nbsp;&nbsp;original_call&nbsp;=&nbsp;(</span><span id="textcolor1788"><span>void</span></span><span>&nbsp;*)sys_call_table_stolen[__NR_openat];</span> 
<a id="x1-41566r262"></a><span>262</span> 
<a id="x1-41568r263"></a><span>263</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1789"><span>/*&nbsp;use&nbsp;our&nbsp;openat&nbsp;function&nbsp;instead&nbsp;*/</span></span> 
<a id="x1-41570r264"></a><span>264</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sys_call_table_stolen[__NR_openat]&nbsp;=&nbsp;(</span><span id="textcolor1790"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1791"><span>long</span></span><span>&nbsp;*)our_sys_openat;</span> 
<a id="x1-41572r265"></a><span>265</span> 
<a id="x1-41574r266"></a><span>266</span><span>&nbsp;&nbsp;&nbsp;&nbsp;enable_write_protection();</span> 
<a id="x1-41576r267"></a><span>267</span> 
<a id="x1-41578r268"></a><span>268</span><span id="textcolor1792"><span>#endif</span></span> 
<a id="x1-41580r269"></a><span>269</span> 
<a id="x1-41582r270"></a><span>270</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor1793"><span>"Spying&nbsp;on&nbsp;UID:%d</span></span><span id="textcolor1794"><span>\n</span></span><span id="textcolor1795"><span>"</span></span><span>,&nbsp;uid);</span> 
<a id="x1-41584r271"></a><span>271</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1796"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-41586r272"></a><span>272</span><span>}</span> 
<a id="x1-41588r273"></a><span>273</span> 
<a id="x1-41590r274"></a><span>274</span><span id="textcolor1797"><span>static</span></span><span>&nbsp;</span><span id="textcolor1798"><span>void</span></span><span>&nbsp;__exit&nbsp;syscall_steal_end(</span><span id="textcolor1799"><span>void</span></span><span>)</span> 
<a id="x1-41592r275"></a><span>275</span><span>{</span> 
<a id="x1-41594r276"></a><span>276</span><span id="textcolor1800"><span>#if&nbsp;USE_KPROBES_PRE_HANDLER_BEFORE_SYSCALL</span></span> 
<a id="x1-41596r277"></a><span>277</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_kprobe(&amp;syscall_kprobe);</span> 
<a id="x1-41598r278"></a><span>278</span><span id="textcolor1801"><span>#else</span></span> 
<a id="x1-41600r279"></a><span>279</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1802"><span>if</span></span><span>&nbsp;(!sys_call_table_stolen)</span> 
<a id="x1-41602r280"></a><span>280</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1803"><span>return</span></span><span>;</span> 
<a id="x1-41604r281"></a><span>281</span> 
<a id="x1-41606r282"></a><span>282</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1804"><span>/*&nbsp;Return&nbsp;the&nbsp;system&nbsp;call&nbsp;back&nbsp;to&nbsp;normal&nbsp;*/</span></span> 
<a id="x1-41608r283"></a><span>283</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1805"><span>if</span></span><span>&nbsp;(sys_call_table_stolen[__NR_openat]&nbsp;!=&nbsp;(</span><span id="textcolor1806"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1807"><span>long</span></span><span>&nbsp;*)our_sys_openat)&nbsp;{</span> 
<a id="x1-41610r284"></a><span>284</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1808"><span>"Somebody&nbsp;else&nbsp;also&nbsp;played&nbsp;with&nbsp;the&nbsp;"</span></span><span>);</span> 
<a id="x1-41612r285"></a><span>285</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1809"><span>"open&nbsp;system&nbsp;call</span></span><span id="textcolor1810"><span>\n</span></span><span id="textcolor1811"><span>"</span></span><span>);</span> 
<a id="x1-41614r286"></a><span>286</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1812"><span>"The&nbsp;system&nbsp;may&nbsp;be&nbsp;left&nbsp;in&nbsp;"</span></span><span>);</span> 
<a id="x1-41616r287"></a><span>287</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor1813"><span>"an&nbsp;unstable&nbsp;state.</span></span><span id="textcolor1814"><span>\n</span></span><span id="textcolor1815"><span>"</span></span><span>);</span> 
<a id="x1-41618r288"></a><span>288</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-41620r289"></a><span>289</span> 
<a id="x1-41622r290"></a><span>290</span><span>&nbsp;&nbsp;&nbsp;&nbsp;disable_write_protection();</span> 
<a id="x1-41624r291"></a><span>291</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sys_call_table_stolen[__NR_openat]&nbsp;=&nbsp;(</span><span id="textcolor1816"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor1817"><span>long</span></span><span>&nbsp;*)original_call;</span> 
<a id="x1-41626r292"></a><span>292</span><span>&nbsp;&nbsp;&nbsp;&nbsp;enable_write_protection();</span> 
<a id="x1-41628r293"></a><span>293</span><span id="textcolor1818"><span>#endif</span></span> 
<a id="x1-41630r294"></a><span>294</span> 
<a id="x1-41632r295"></a><span>295</span><span>&nbsp;&nbsp;&nbsp;&nbsp;msleep(2000);</span> 
<a id="x1-41634r296"></a><span>296</span><span>}</span> 
<a id="x1-41636r297"></a><span>297</span> 
<a id="x1-41638r298"></a><span>298</span><span>module_init(syscall_steal_start);</span> 
<a id="x1-41640r299"></a><span>299</span><span>module_exit(syscall_steal_end);</span> 
<a id="x1-41642r300"></a><span>300</span> 
<a id="x1-41644r301"></a><span>301</span><span>MODULE_LICENSE(</span><span id="textcolor1819"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1580 -->
   <h3 id="blocking-processes-and-threads"><span>11   </span> <a id="x1-4200011"></a>Blocking Processes and threads</h3>
<!-- l. 1582 -->
   <h4 id="sleep"><span>11.1   </span> <a id="x1-4300011.1"></a>Sleep</h4>
<!-- l. 1584 --><p>What do you do when somebody asks you for something you can not do right
away? If you are a human being and you are bothered by a human being, the
only thing you can say is: "<span>Not right now, I’m busy. Go away!</span>". But if you
are a kernel module and you are bothered by a process, you have another
possibility. You can put the process to sleep until you can service it. After all,
processes are being put to sleep by the kernel and woken up all the time (that
is the way multiple processes appear to run on the same time on a single
CPU).
</p><!-- l. 1590 --><p>   This kernel module is an example of this. The file (called <span><span><span>/proc/sleep</span></span></span>) can only
be opened by a single process at a time. If the file is already open, the kernel module
calls <code>  <span>wait_event_interruptible</span>
</code>. The easiest way to keep a file open is to open it with:
</p><!-- l. 1 -->
   <pre id="fancyvrb65"><a id="x1-43004r1"></a><span>1</span><span>tail&nbsp;-f</span></pre>
<!-- l. 1599 --><p>   This function changes the status of the task (a task is the kernel data structure
which holds information about a process and the system call it is in, if any) to
<code> <span>TASK_INTERRUPTIBLE</span>
</code>, which means that the task will not run until it is woken up somehow, and adds it to
WaitQ, the queue of tasks waiting to access the file. Then, the function calls the
scheduler to context switch to a different process, one which has some use for the
CPU.
                                                                  

                                                                  
</p><!-- l. 1603 --><p>   When a process is done with the file, it closes it, and
<code> <span>module_close</span>
</code> is called. That function wakes up all the processes in the queue (there’s no
mechanism to only wake up one of them). It then returns and the process which just
closed the file can continue to run. In time, the scheduler decides that that
process has had enough and gives control of the CPU to another process.
Eventually, one of the processes which was in the queue will be given control
of the CPU by the scheduler. It starts at the point right after the call to
<code> <span>wait_event_interruptible</span>
</code>.
</p><!-- l. 1610 --><p>   This means that the process is still in kernel mode - as far as the process
is concerned, it issued the open system call and the system call has not
returned yet. The process does not know somebody else used the CPU for
most of the time between the moment it issued the call and the moment it
returned.
</p><!-- l. 1613 --><p>   It can then proceed to set a global variable to tell all the other processes that the
file is still open and go on with its life. When the other processes get a piece of the
CPU, they’ll see that global variable and go back to sleep.
</p><!-- l. 1616 --><p>   So we will use <code>  <span>tail&nbsp;-f</span>
</code> to keep the file open in the background, while trying to access it with another
process (again in the background, so that we need not switch to a different vt). As
soon as the first background process is killed with kill %1 , the second is woken up, is
able to access the file and finally terminates.
</p><!-- l. 1619 --><p>   To make our life more interesting, <code>  <span>module_close</span>
</code> does not have a monopoly on waking up the processes which wait to access the file.
A signal, such as <span>Ctrl +c </span>(<span>SIGINT</span>) can also wake up a process. This is because we
used <code>  <span>wait_event_interruptible</span>
</code>. We could have used <code>  <span>wait_event</span>
</code> instead, but that would have resulted in extremely angry users whose <span>Ctrl+c</span>’s are
ignored.
</p><!-- l. 1623 --><p>   In that case, we want to return with
<code> <span>-EINTR</span>
</code> immediately. This is important so users can, for example, kill the process before it
receives the file.
</p><!-- l. 1625 --><p>   There is one more point to remember. Some times processes don’t want to sleep, they want
either to get what they want immediately, or to be told it cannot be done. Such processes
use the <code>  <span>O_NONBLOCK</span>
</code> flag when opening the file. The kernel is supposed to respond by returning with the error
code <code>  <span>-EAGAIN</span>
</code> from operations which would otherwise block, such as opening the file in this example. The
program <code>  <span>cat_nonblock</span>
</code>, available in the <span><span><span>examples/other</span></span></span> directory, can be used to open a file with
<code> <span>O_NONBLOCK</span>
</code>.
                                                                  

                                                                  
</p>
   <pre id="verbatim-20">$&nbsp;sudo&nbsp;insmod&nbsp;sleep.ko
$&nbsp;cat_nonblock&nbsp;/proc/sleep
Last&nbsp;input:
$&nbsp;tail&nbsp;-f&nbsp;/proc/sleep&nbsp;&amp;
Last&nbsp;input:
Last&nbsp;input:
Last&nbsp;input:
Last&nbsp;input:
Last&nbsp;input:
Last&nbsp;input:
Last&nbsp;input:
tail:&nbsp;/proc/sleep:&nbsp;file&nbsp;truncated
[1]&nbsp;6540
$&nbsp;cat_nonblock&nbsp;/proc/sleep
Open&nbsp;would&nbsp;block
$&nbsp;kill&nbsp;%1
[1]+&nbsp;&nbsp;Terminated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail&nbsp;-f&nbsp;/proc/sleep
$&nbsp;cat_nonblock&nbsp;/proc/sleep
Last&nbsp;input:
$
</pre>
<!-- l. 1650 --><!-- l. 1 -->
   <pre id="fancyvrb66"><a id="x1-43018r1"></a><span>1</span><span id="textcolor1820"><span>/*</span></span> 
<a id="x1-43020r2"></a><span>2</span><span id="textcolor1821"><span>&nbsp;*&nbsp;sleep.c&nbsp;-&nbsp;create&nbsp;a&nbsp;/proc&nbsp;file,&nbsp;and&nbsp;if&nbsp;several&nbsp;processes&nbsp;try&nbsp;to&nbsp;open&nbsp;it</span></span> 
<a id="x1-43022r3"></a><span>3</span><span id="textcolor1822"><span>&nbsp;*&nbsp;at&nbsp;the&nbsp;same&nbsp;time,&nbsp;put&nbsp;all&nbsp;but&nbsp;one&nbsp;to&nbsp;sleep.</span></span> 
<a id="x1-43024r4"></a><span>4</span><span id="textcolor1823"><span>&nbsp;*/</span></span> 
<a id="x1-43026r5"></a><span>5</span> 
<a id="x1-43028r6"></a><span>6</span><span id="textcolor1824"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1825"><span>&lt;linux/atomic.h&gt;</span></span> 
<a id="x1-43030r7"></a><span>7</span><span id="textcolor1826"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1827"><span>&lt;linux/fs.h&gt;</span></span> 
<a id="x1-43032r8"></a><span>8</span><span id="textcolor1828"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1829"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;for&nbsp;sprintf()&nbsp;*/</span></span> 
<a id="x1-43034r9"></a><span>9</span><span id="textcolor1830"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1831"><span>&lt;linux/module.h&gt;&nbsp;/*&nbsp;Specifically,&nbsp;a&nbsp;module&nbsp;*/</span></span> 
<a id="x1-43036r10"></a><span>10</span><span id="textcolor1832"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1833"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-43038r11"></a><span>11</span><span id="textcolor1834"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1835"><span>&lt;linux/proc_fs.h&gt;&nbsp;/*&nbsp;Necessary&nbsp;because&nbsp;we&nbsp;use&nbsp;proc&nbsp;fs&nbsp;*/</span></span> 
<a id="x1-43040r12"></a><span>12</span><span id="textcolor1836"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1837"><span>&lt;linux/types.h&gt;</span></span> 
<a id="x1-43042r13"></a><span>13</span><span id="textcolor1838"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1839"><span>&lt;linux/uaccess.h&gt;&nbsp;/*&nbsp;for&nbsp;get_user&nbsp;and&nbsp;put_user&nbsp;*/</span></span> 
<a id="x1-43044r14"></a><span>14</span><span id="textcolor1840"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1841"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-43046r15"></a><span>15</span><span id="textcolor1842"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1843"><span>&lt;linux/wait.h&gt;&nbsp;/*&nbsp;For&nbsp;putting&nbsp;processes&nbsp;to&nbsp;sleep&nbsp;and</span></span> 
<a id="x1-43048r16"></a><span>16</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;waking&nbsp;them&nbsp;up&nbsp;</span><span id="colorbox1844"><span>*/</span></span>  
<a id="x1-43050r17"></a><span>17</span>  
<a id="x1-43052r18"></a><span>18</span><span id="textcolor1845"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1846"><span>&lt;asm/current.h&gt;</span></span> 
<a id="x1-43054r19"></a><span>19</span><span id="textcolor1847"><span>#include</span></span><span>&nbsp;</span><span id="textcolor1848"><span>&lt;asm/errno.h&gt;</span></span> 
<a id="x1-43056r20"></a><span>20</span> 
<a id="x1-43058r21"></a><span>21</span><span id="textcolor1849"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;6,&nbsp;0)</span></span> 
<a id="x1-43060r22"></a><span>22</span><span id="textcolor1850"><span>#define&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-43062r23"></a><span>23</span><span id="textcolor1851"><span>#endif</span></span> 
<a id="x1-43064r24"></a><span>24</span> 
<a id="x1-43066r25"></a><span>25</span><span id="textcolor1852"><span>/*&nbsp;Here&nbsp;we&nbsp;keep&nbsp;the&nbsp;last&nbsp;message&nbsp;received,&nbsp;to&nbsp;prove&nbsp;that&nbsp;we&nbsp;can&nbsp;process&nbsp;our</span></span> 
<a id="x1-43068r26"></a><span>26</span><span id="textcolor1853"><span>&nbsp;*&nbsp;input.</span></span> 
<a id="x1-43070r27"></a><span>27</span><span id="textcolor1854"><span>&nbsp;*/</span></span> 
<a id="x1-43072r28"></a><span>28</span><span id="textcolor1855"><span>#define&nbsp;MESSAGE_LENGTH&nbsp;80</span></span> 
<a id="x1-43074r29"></a><span>29</span><span id="textcolor1856"><span>static</span></span><span>&nbsp;</span><span id="textcolor1857"><span>char</span></span><span>&nbsp;message[MESSAGE_LENGTH];</span> 
<a id="x1-43076r30"></a><span>30</span> 
<a id="x1-43078r31"></a><span>31</span><span id="textcolor1858"><span>static</span></span><span>&nbsp;</span><span id="textcolor1859"><span>struct</span></span><span>&nbsp;proc_dir_entry&nbsp;*our_proc_file;</span> 
<a id="x1-43080r32"></a><span>32</span><span id="textcolor1860"><span>#define&nbsp;PROC_ENTRY_FILENAME&nbsp;"sleep"</span></span> 
<a id="x1-43082r33"></a><span>33</span> 
<a id="x1-43084r34"></a><span>34</span><span id="textcolor1861"><span>/*&nbsp;Since&nbsp;we&nbsp;use&nbsp;the&nbsp;file&nbsp;operations&nbsp;struct,&nbsp;we&nbsp;can</span><span>'</span><span>t&nbsp;use&nbsp;the&nbsp;special&nbsp;proc</span></span> 
<a id="x1-43086r35"></a><span>35</span><span id="textcolor1862"><span>&nbsp;*&nbsp;output&nbsp;provisions&nbsp;-&nbsp;we&nbsp;have&nbsp;to&nbsp;use&nbsp;a&nbsp;standard&nbsp;read&nbsp;function,&nbsp;which&nbsp;is&nbsp;this</span></span> 
<a id="x1-43088r36"></a><span>36</span><span id="textcolor1863"><span>&nbsp;*&nbsp;function.</span></span> 
<a id="x1-43090r37"></a><span>37</span><span id="textcolor1864"><span>&nbsp;*/</span></span> 
<a id="x1-43092r38"></a><span>38</span><span id="textcolor1865"><span>static</span></span><span>&nbsp;</span><span id="textcolor1866"><span>ssize_t</span></span><span>&nbsp;module_output(</span><span id="textcolor1867"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor1868"><span>/*&nbsp;see&nbsp;include/linux/fs.h&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43094r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1869"><span>char</span></span><span>&nbsp;__user&nbsp;*buf,&nbsp;</span><span id="textcolor1870"><span>/*&nbsp;The&nbsp;buffer&nbsp;to&nbsp;put&nbsp;data&nbsp;to</span></span> 
<a id="x1-43096r40"></a><span>40</span><span id="textcolor1871"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(in&nbsp;the&nbsp;user&nbsp;segment)</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="colorbox1872"><span>*/</span></span>  
<a id="x1-43098r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1873"><span>size_t</span></span><span>&nbsp;len,&nbsp;</span><span id="textcolor1874"><span>/*&nbsp;The&nbsp;length&nbsp;of&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-43100r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-43102r43"></a><span>43</span><span>{</span> 
<a id="x1-43104r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1875"><span>static</span></span><span>&nbsp;</span><span id="textcolor1876"><span>int</span></span><span>&nbsp;finished&nbsp;=&nbsp;0;</span> 
<a id="x1-43106r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1877"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-43108r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1878"><span>char</span></span><span>&nbsp;output_msg[MESSAGE_LENGTH&nbsp;+&nbsp;30];</span> 
<a id="x1-43110r47"></a><span>47</span> 
<a id="x1-43112r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1879"><span>/*&nbsp;Return&nbsp;0&nbsp;to&nbsp;signify&nbsp;end&nbsp;of&nbsp;file&nbsp;-&nbsp;that&nbsp;we&nbsp;have&nbsp;nothing&nbsp;more&nbsp;to&nbsp;say</span></span> 
<a id="x1-43114r49"></a><span>49</span><span id="textcolor1880"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;at&nbsp;this&nbsp;point.</span></span> 
<a id="x1-43116r50"></a><span>50</span><span id="textcolor1881"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43118r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1882"><span>if</span></span><span>&nbsp;(finished)&nbsp;{</span> 
<a id="x1-43120r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finished&nbsp;=&nbsp;0;</span> 
<a id="x1-43122r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1883"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-43124r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43126r55"></a><span>55</span> 
<a id="x1-43128r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sprintf(output_msg,&nbsp;</span><span id="textcolor1884"><span>"Last&nbsp;input:%s</span></span><span id="textcolor1885"><span>\n</span></span><span id="textcolor1886"><span>"</span></span><span>,&nbsp;message);</span> 
<a id="x1-43130r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1887"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;len&nbsp;&amp;&amp;&nbsp;output_msg[i];&nbsp;i++)</span> 
<a id="x1-43132r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put_user(output_msg[i],&nbsp;buf&nbsp;+&nbsp;i);</span> 
<a id="x1-43134r59"></a><span>59</span> 
<a id="x1-43136r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;finished&nbsp;=&nbsp;1;</span> 
<a id="x1-43138r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1888"><span>return</span></span><span>&nbsp;i;&nbsp;</span><span id="textcolor1889"><span>/*&nbsp;Return&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;"read"&nbsp;*/</span></span> 
<a id="x1-43140r62"></a><span>62</span><span>}</span> 
<a id="x1-43142r63"></a><span>63</span> 
<a id="x1-43144r64"></a><span>64</span><span id="textcolor1890"><span>/*&nbsp;This&nbsp;function&nbsp;receives&nbsp;input&nbsp;from&nbsp;the&nbsp;user&nbsp;when&nbsp;the&nbsp;user&nbsp;writes&nbsp;to&nbsp;the</span></span> 
<a id="x1-43146r65"></a><span>65</span><span id="textcolor1891"><span>&nbsp;*&nbsp;/proc&nbsp;file.</span></span> 
<a id="x1-43148r66"></a><span>66</span><span id="textcolor1892"><span>&nbsp;*/</span></span> 
<a id="x1-43150r67"></a><span>67</span><span id="textcolor1893"><span>static</span></span><span>&nbsp;</span><span id="textcolor1894"><span>ssize_t</span></span><span>&nbsp;module_input(</span><span id="textcolor1895"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor1896"><span>/*&nbsp;The&nbsp;file&nbsp;itself&nbsp;*/</span></span> 
<a id="x1-43152r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1897"><span>const</span></span><span>&nbsp;</span><span id="textcolor1898"><span>char</span></span><span>&nbsp;__user&nbsp;*buf,&nbsp;</span><span id="textcolor1899"><span>/*&nbsp;The&nbsp;buffer&nbsp;with&nbsp;input&nbsp;*/</span></span> 
<a id="x1-43154r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1900"><span>size_t</span></span><span>&nbsp;length,&nbsp;</span><span id="textcolor1901"><span>/*&nbsp;The&nbsp;buffer</span><span>'</span><span>s&nbsp;length&nbsp;*/</span></span> 
<a id="x1-43156r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*offset)&nbsp;</span><span id="textcolor1902"><span>/*&nbsp;offset&nbsp;to&nbsp;file&nbsp;-&nbsp;ignore&nbsp;*/</span></span> 
<a id="x1-43158r71"></a><span>71</span><span>{</span> 
<a id="x1-43160r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1903"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-43162r73"></a><span>73</span> 
<a id="x1-43164r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1904"><span>/*&nbsp;Put&nbsp;the&nbsp;input&nbsp;into&nbsp;Message,&nbsp;where&nbsp;module_output&nbsp;will&nbsp;later&nbsp;be&nbsp;able</span></span> 
<a id="x1-43166r75"></a><span>75</span><span id="textcolor1905"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;to&nbsp;use&nbsp;it.</span></span> 
<a id="x1-43168r76"></a><span>76</span><span id="textcolor1906"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43170r77"></a><span>77</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1907"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;MESSAGE_LENGTH&nbsp;-&nbsp;1&nbsp;&amp;&amp;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)</span> 
<a id="x1-43172r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_user(message[i],&nbsp;buf&nbsp;+&nbsp;i);</span> 
<a id="x1-43174r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1908"><span>/*&nbsp;we&nbsp;want&nbsp;a&nbsp;standard,&nbsp;zero&nbsp;terminated&nbsp;string&nbsp;*/</span></span> 
<a id="x1-43176r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;message[i]&nbsp;=&nbsp;</span><span id="textcolor1909"><span>'</span><span>\0</span><span>'</span></span><span>;</span> 
<a id="x1-43178r81"></a><span>81</span> 
<a id="x1-43180r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1910"><span>/*&nbsp;We&nbsp;need&nbsp;to&nbsp;return&nbsp;the&nbsp;number&nbsp;of&nbsp;input&nbsp;characters&nbsp;used&nbsp;*/</span></span> 
<a id="x1-43182r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1911"><span>return</span></span><span>&nbsp;i;</span> 
<a id="x1-43184r84"></a><span>84</span><span>}</span> 
<a id="x1-43186r85"></a><span>85</span> 
<a id="x1-43188r86"></a><span>86</span><span id="textcolor1912"><span>/*&nbsp;1&nbsp;if&nbsp;the&nbsp;file&nbsp;is&nbsp;currently&nbsp;open&nbsp;by&nbsp;somebody&nbsp;*/</span></span> 
<a id="x1-43190r87"></a><span>87</span><span id="textcolor1913"><span>static</span></span><span>&nbsp;atomic_t&nbsp;already_open&nbsp;=&nbsp;ATOMIC_INIT(0);</span> 
<a id="x1-43192r88"></a><span>88</span> 
<a id="x1-43194r89"></a><span>89</span><span id="textcolor1914"><span>/*&nbsp;Queue&nbsp;of&nbsp;processes&nbsp;who&nbsp;want&nbsp;our&nbsp;file&nbsp;*/</span></span> 
<a id="x1-43196r90"></a><span>90</span><span id="textcolor1915"><span>static</span></span><span>&nbsp;DECLARE_WAIT_QUEUE_HEAD(waitq);</span> 
<a id="x1-43198r91"></a><span>91</span> 
<a id="x1-43200r92"></a><span>92</span><span id="textcolor1916"><span>/*&nbsp;Called&nbsp;when&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;opened&nbsp;*/</span></span> 
<a id="x1-43202r93"></a><span>93</span><span id="textcolor1917"><span>static</span></span><span>&nbsp;</span><span id="textcolor1918"><span>int</span></span><span>&nbsp;module_open(</span><span id="textcolor1919"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor1920"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-43204r94"></a><span>94</span><span>{</span> 
<a id="x1-43206r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1921"><span>/*&nbsp;If&nbsp;the&nbsp;file</span><span>'</span><span>s&nbsp;flags&nbsp;include&nbsp;O_NONBLOCK,&nbsp;it&nbsp;means&nbsp;the&nbsp;process&nbsp;does&nbsp;not</span></span> 
<a id="x1-43208r96"></a><span>96</span><span id="textcolor1922"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;want&nbsp;to&nbsp;wait&nbsp;for&nbsp;the&nbsp;file.&nbsp;In&nbsp;this&nbsp;case,&nbsp;if&nbsp;the&nbsp;file&nbsp;is&nbsp;already&nbsp;open,</span></span> 
<a id="x1-43210r97"></a><span>97</span><span id="textcolor1923"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;we&nbsp;should&nbsp;fail&nbsp;with&nbsp;-EAGAIN,&nbsp;meaning&nbsp;"you&nbsp;will&nbsp;have&nbsp;to&nbsp;try&nbsp;again",</span></span> 
<a id="x1-43212r98"></a><span>98</span><span id="textcolor1924"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;instead&nbsp;of&nbsp;blocking&nbsp;a&nbsp;process&nbsp;which&nbsp;would&nbsp;rather&nbsp;stay&nbsp;awake.</span></span> 
<a id="x1-43214r99"></a><span>99</span><span id="textcolor1925"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43216r100"></a><span>100</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1926"><span>if</span></span><span>&nbsp;((file-&gt;f_flags&nbsp;&amp;&nbsp;O_NONBLOCK)&nbsp;&amp;&amp;&nbsp;atomic_read(&amp;already_open))</span> 
<a id="x1-43218r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1927"><span>return</span></span><span>&nbsp;-EAGAIN;</span> 
<a id="x1-43220r102"></a><span>102</span> 
<a id="x1-43222r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1928"><span>/*&nbsp;This&nbsp;is&nbsp;the&nbsp;correct&nbsp;place&nbsp;for&nbsp;try_module_get(THIS_MODULE)&nbsp;because&nbsp;if</span></span> 
<a id="x1-43224r104"></a><span>104</span><span id="textcolor1929"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;a&nbsp;process&nbsp;is&nbsp;in&nbsp;the&nbsp;loop,&nbsp;which&nbsp;is&nbsp;within&nbsp;the&nbsp;kernel&nbsp;module,</span></span> 
<a id="x1-43226r105"></a><span>105</span><span id="textcolor1930"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;kernel&nbsp;module&nbsp;must&nbsp;not&nbsp;be&nbsp;removed.</span></span> 
<a id="x1-43228r106"></a><span>106</span><span id="textcolor1931"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43230r107"></a><span>107</span><span>&nbsp;&nbsp;&nbsp;&nbsp;try_module_get(THIS_MODULE);</span> 
<a id="x1-43232r108"></a><span>108</span> 
<a id="x1-43234r109"></a><span>109</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1932"><span>while</span></span><span>&nbsp;(atomic_cmpxchg(&amp;already_open,&nbsp;0,&nbsp;1))&nbsp;{</span> 
<a id="x1-43236r110"></a><span>110</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1933"><span>int</span></span><span>&nbsp;i,&nbsp;is_sig&nbsp;=&nbsp;0;</span> 
<a id="x1-43238r111"></a><span>111</span> 
<a id="x1-43240r112"></a><span>112</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1934"><span>/*&nbsp;This&nbsp;function&nbsp;puts&nbsp;the&nbsp;current&nbsp;process,&nbsp;including&nbsp;any&nbsp;system</span></span> 
<a id="x1-43242r113"></a><span>113</span><span id="textcolor1935"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;calls,&nbsp;such&nbsp;as&nbsp;us,&nbsp;to&nbsp;sleep.&nbsp;&nbsp;Execution&nbsp;will&nbsp;be&nbsp;resumed&nbsp;right</span></span> 
<a id="x1-43244r114"></a><span>114</span><span id="textcolor1936"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;after&nbsp;the&nbsp;function&nbsp;call,&nbsp;either&nbsp;because&nbsp;somebody&nbsp;called</span></span> 
<a id="x1-43246r115"></a><span>115</span><span id="textcolor1937"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;wake_up(&amp;waitq)&nbsp;(only&nbsp;module_close&nbsp;does&nbsp;that,&nbsp;when&nbsp;the&nbsp;file</span></span> 
<a id="x1-43248r116"></a><span>116</span><span id="textcolor1938"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;is&nbsp;closed)&nbsp;or&nbsp;when&nbsp;a&nbsp;signal,&nbsp;such&nbsp;as&nbsp;Ctrl-C,&nbsp;is&nbsp;sent</span></span> 
<a id="x1-43250r117"></a><span>117</span><span id="textcolor1939"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;to&nbsp;the&nbsp;process</span></span> 
<a id="x1-43252r118"></a><span>118</span><span id="textcolor1940"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43254r119"></a><span>119</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_event_interruptible(waitq,&nbsp;!atomic_read(&amp;already_open));</span> 
<a id="x1-43256r120"></a><span>120</span> 
<a id="x1-43258r121"></a><span>121</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1941"><span>/*&nbsp;If&nbsp;we&nbsp;woke&nbsp;up&nbsp;because&nbsp;we&nbsp;got&nbsp;a&nbsp;signal&nbsp;we</span><span>'</span><span>re&nbsp;not&nbsp;blocking,</span></span> 
<a id="x1-43260r122"></a><span>122</span><span id="textcolor1942"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;return&nbsp;-EINTR&nbsp;(fail&nbsp;the&nbsp;system&nbsp;call).&nbsp;&nbsp;This&nbsp;allows&nbsp;processes</span></span> 
<a id="x1-43262r123"></a><span>123</span><span id="textcolor1943"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;to&nbsp;be&nbsp;killed&nbsp;or&nbsp;stopped.</span></span> 
<a id="x1-43264r124"></a><span>124</span><span id="textcolor1944"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43266r125"></a><span>125</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1945"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;_NSIG_WORDS&nbsp;&amp;&amp;&nbsp;!is_sig;&nbsp;i++)</span> 
<a id="x1-43268r126"></a><span>126</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_sig&nbsp;=&nbsp;current-&gt;pending.signal.sig[i]&nbsp;&amp;&nbsp;~current-&gt;blocked.sig[i];</span> 
<a id="x1-43270r127"></a><span>127</span> 
<a id="x1-43272r128"></a><span>128</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1946"><span>if</span></span><span>&nbsp;(is_sig)&nbsp;{</span> 
<a id="x1-43274r129"></a><span>129</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1947"><span>/*&nbsp;It&nbsp;is&nbsp;important&nbsp;to&nbsp;put&nbsp;module_put(THIS_MODULE)&nbsp;here,&nbsp;because</span></span> 
<a id="x1-43276r130"></a><span>130</span><span id="textcolor1948"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;for&nbsp;processes&nbsp;where&nbsp;the&nbsp;open&nbsp;is&nbsp;interrupted&nbsp;there&nbsp;will&nbsp;never</span></span> 
<a id="x1-43278r131"></a><span>131</span><span id="textcolor1949"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;be&nbsp;a&nbsp;corresponding&nbsp;close.&nbsp;If&nbsp;we&nbsp;do&nbsp;not&nbsp;decrement&nbsp;the&nbsp;usage</span></span> 
<a id="x1-43280r132"></a><span>132</span><span id="textcolor1950"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;count&nbsp;here,&nbsp;we&nbsp;will&nbsp;be&nbsp;left&nbsp;with&nbsp;a&nbsp;positive&nbsp;usage&nbsp;count</span></span> 
<a id="x1-43282r133"></a><span>133</span><span id="textcolor1951"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;which&nbsp;we&nbsp;will&nbsp;have&nbsp;no&nbsp;way&nbsp;to&nbsp;bring&nbsp;down&nbsp;to&nbsp;zero,&nbsp;giving&nbsp;us</span></span> 
<a id="x1-43284r134"></a><span>134</span><span id="textcolor1952"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;an&nbsp;immortal&nbsp;module,&nbsp;which&nbsp;can&nbsp;only&nbsp;be&nbsp;killed&nbsp;by&nbsp;rebooting</span></span> 
<a id="x1-43286r135"></a><span>135</span><span id="textcolor1953"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;machine.</span></span> 
<a id="x1-43288r136"></a><span>136</span><span id="textcolor1954"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43290r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-43292r138"></a><span>138</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1955"><span>return</span></span><span>&nbsp;-EINTR;</span> 
<a id="x1-43294r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43296r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43298r141"></a><span>141</span> 
<a id="x1-43300r142"></a><span>142</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1956"><span>return</span></span><span>&nbsp;0;&nbsp;</span><span id="textcolor1957"><span>/*&nbsp;Allow&nbsp;the&nbsp;access&nbsp;*/</span></span> 
<a id="x1-43302r143"></a><span>143</span><span>}</span> 
<a id="x1-43304r144"></a><span>144</span> 
<a id="x1-43306r145"></a><span>145</span><span id="textcolor1958"><span>/*&nbsp;Called&nbsp;when&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;closed&nbsp;*/</span></span> 
<a id="x1-43308r146"></a><span>146</span><span id="textcolor1959"><span>static</span></span><span>&nbsp;</span><span id="textcolor1960"><span>int</span></span><span>&nbsp;module_close(</span><span id="textcolor1961"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor1962"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-43310r147"></a><span>147</span><span>{</span> 
<a id="x1-43312r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1963"><span>/*&nbsp;Set&nbsp;already_open&nbsp;to&nbsp;zero,&nbsp;so&nbsp;one&nbsp;of&nbsp;the&nbsp;processes&nbsp;in&nbsp;the&nbsp;waitq&nbsp;will</span></span> 
<a id="x1-43314r149"></a><span>149</span><span id="textcolor1964"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;be&nbsp;able&nbsp;to&nbsp;set&nbsp;already_open&nbsp;back&nbsp;to&nbsp;one&nbsp;and&nbsp;to&nbsp;open&nbsp;the&nbsp;file.&nbsp;All</span></span> 
<a id="x1-43316r150"></a><span>150</span><span id="textcolor1965"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;other&nbsp;processes&nbsp;will&nbsp;be&nbsp;called&nbsp;when&nbsp;already_open&nbsp;is&nbsp;back&nbsp;to&nbsp;one,</span></span> 
<a id="x1-43318r151"></a><span>151</span><span id="textcolor1966"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;so&nbsp;they</span><span>'</span><span>ll&nbsp;go&nbsp;back&nbsp;to&nbsp;sleep.</span></span> 
<a id="x1-43320r152"></a><span>152</span><span id="textcolor1967"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43322r153"></a><span>153</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_set(&amp;already_open,&nbsp;0);</span> 
<a id="x1-43324r154"></a><span>154</span> 
<a id="x1-43326r155"></a><span>155</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1968"><span>/*&nbsp;Wake&nbsp;up&nbsp;all&nbsp;the&nbsp;processes&nbsp;in&nbsp;waitq,&nbsp;so&nbsp;if&nbsp;anybody&nbsp;is&nbsp;waiting&nbsp;for&nbsp;the</span></span> 
<a id="x1-43328r156"></a><span>156</span><span id="textcolor1969"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;file,&nbsp;they&nbsp;can&nbsp;have&nbsp;it.</span></span> 
<a id="x1-43330r157"></a><span>157</span><span id="textcolor1970"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-43332r158"></a><span>158</span><span>&nbsp;&nbsp;&nbsp;&nbsp;wake_up(&amp;waitq);</span> 
<a id="x1-43334r159"></a><span>159</span> 
<a id="x1-43336r160"></a><span>160</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-43338r161"></a><span>161</span> 
<a id="x1-43340r162"></a><span>162</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1971"><span>return</span></span><span>&nbsp;0;&nbsp;</span><span id="textcolor1972"><span>/*&nbsp;success&nbsp;*/</span></span> 
<a id="x1-43342r163"></a><span>163</span><span>}</span> 
<a id="x1-43344r164"></a><span>164</span> 
<a id="x1-43346r165"></a><span>165</span><span id="textcolor1973"><span>/*&nbsp;Structures&nbsp;to&nbsp;register&nbsp;as&nbsp;the&nbsp;/proc&nbsp;file,&nbsp;with&nbsp;pointers&nbsp;to&nbsp;all&nbsp;the&nbsp;relevant</span></span> 
<a id="x1-43348r166"></a><span>166</span><span id="textcolor1974"><span>&nbsp;*&nbsp;functions.</span></span> 
<a id="x1-43350r167"></a><span>167</span><span id="textcolor1975"><span>&nbsp;*/</span></span> 
<a id="x1-43352r168"></a><span>168</span> 
<a id="x1-43354r169"></a><span>169</span><span id="textcolor1976"><span>/*&nbsp;File&nbsp;operations&nbsp;for&nbsp;our&nbsp;proc&nbsp;file.&nbsp;This&nbsp;is&nbsp;where&nbsp;we&nbsp;place&nbsp;pointers&nbsp;to&nbsp;all</span></span> 
<a id="x1-43356r170"></a><span>170</span><span id="textcolor1977"><span>&nbsp;*&nbsp;the&nbsp;functions&nbsp;called&nbsp;when&nbsp;somebody&nbsp;tries&nbsp;to&nbsp;do&nbsp;something&nbsp;to&nbsp;our&nbsp;file.&nbsp;NULL</span></span> 
<a id="x1-43358r171"></a><span>171</span><span id="textcolor1978"><span>&nbsp;*&nbsp;means&nbsp;we&nbsp;don</span><span>'</span><span>t&nbsp;want&nbsp;to&nbsp;deal&nbsp;with&nbsp;something.</span></span> 
<a id="x1-43360r172"></a><span>172</span><span id="textcolor1979"><span>&nbsp;*/</span></span> 
<a id="x1-43362r173"></a><span>173</span><span id="textcolor1980"><span>#ifdef&nbsp;HAVE_PROC_OPS</span></span> 
<a id="x1-43364r174"></a><span>174</span><span id="textcolor1981"><span>static</span></span><span>&nbsp;</span><span id="textcolor1982"><span>const</span></span><span>&nbsp;</span><span id="textcolor1983"><span>struct</span></span><span>&nbsp;proc_ops&nbsp;file_ops_4_our_proc_file&nbsp;=&nbsp;{</span> 
<a id="x1-43366r175"></a><span>175</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_read&nbsp;=&nbsp;module_output,&nbsp;</span><span id="textcolor1984"><span>/*&nbsp;"read"&nbsp;from&nbsp;the&nbsp;file&nbsp;*/</span></span> 
<a id="x1-43368r176"></a><span>176</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_write&nbsp;=&nbsp;module_input,&nbsp;</span><span id="textcolor1985"><span>/*&nbsp;"write"&nbsp;to&nbsp;the&nbsp;file&nbsp;*/</span></span> 
<a id="x1-43370r177"></a><span>177</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_open&nbsp;=&nbsp;module_open,&nbsp;</span><span id="textcolor1986"><span>/*&nbsp;called&nbsp;when&nbsp;the&nbsp;/proc&nbsp;file&nbsp;is&nbsp;opened&nbsp;*/</span></span> 
<a id="x1-43372r178"></a><span>178</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_release&nbsp;=&nbsp;module_close,&nbsp;</span><span id="textcolor1987"><span>/*&nbsp;called&nbsp;when&nbsp;it</span><span>'</span><span>s&nbsp;closed&nbsp;*/</span></span> 
<a id="x1-43374r179"></a><span>179</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.proc_lseek&nbsp;=&nbsp;noop_llseek,&nbsp;</span><span id="textcolor1988"><span>/*&nbsp;return&nbsp;file-&gt;f_pos&nbsp;*/</span></span> 
<a id="x1-43376r180"></a><span>180</span><span>};</span> 
<a id="x1-43378r181"></a><span>181</span><span id="textcolor1989"><span>#else</span></span> 
<a id="x1-43380r182"></a><span>182</span><span id="textcolor1990"><span>static</span></span><span>&nbsp;</span><span id="textcolor1991"><span>const</span></span><span>&nbsp;</span><span id="textcolor1992"><span>struct</span></span><span>&nbsp;file_operations&nbsp;file_ops_4_our_proc_file&nbsp;=&nbsp;{</span> 
<a id="x1-43382r183"></a><span>183</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;module_output,</span> 
<a id="x1-43384r184"></a><span>184</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;module_input,</span> 
<a id="x1-43386r185"></a><span>185</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;module_open,</span> 
<a id="x1-43388r186"></a><span>186</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;module_close,</span> 
<a id="x1-43390r187"></a><span>187</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.llseek&nbsp;=&nbsp;noop_llseek,</span> 
<a id="x1-43392r188"></a><span>188</span><span>};</span> 
<a id="x1-43394r189"></a><span>189</span><span id="textcolor1993"><span>#endif</span></span> 
<a id="x1-43396r190"></a><span>190</span> 
<a id="x1-43398r191"></a><span>191</span><span id="textcolor1994"><span>/*&nbsp;Initialize&nbsp;the&nbsp;module&nbsp;-&nbsp;register&nbsp;the&nbsp;proc&nbsp;file&nbsp;*/</span></span> 
<a id="x1-43400r192"></a><span>192</span><span id="textcolor1995"><span>static</span></span><span>&nbsp;</span><span id="textcolor1996"><span>int</span></span><span>&nbsp;__init&nbsp;sleep_init(</span><span id="textcolor1997"><span>void</span></span><span>)</span> 
<a id="x1-43402r193"></a><span>193</span><span>{</span> 
<a id="x1-43404r194"></a><span>194</span><span>&nbsp;&nbsp;&nbsp;&nbsp;our_proc_file&nbsp;=</span> 
<a id="x1-43406r195"></a><span>195</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proc_create(PROC_ENTRY_FILENAME,&nbsp;0644,&nbsp;NULL,&nbsp;&amp;file_ops_4_our_proc_file);</span> 
<a id="x1-43408r196"></a><span>196</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor1998"><span>if</span></span><span>&nbsp;(our_proc_file&nbsp;==&nbsp;NULL)&nbsp;{</span> 
<a id="x1-43410r197"></a><span>197</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor1999"><span>"Error:&nbsp;Could&nbsp;not&nbsp;initialize&nbsp;/proc/%s</span></span><span id="textcolor2000"><span>\n</span></span><span id="textcolor2001"><span>"</span></span><span>,&nbsp;PROC_ENTRY_FILENAME);</span> 
<a id="x1-43412r198"></a><span>198</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2002"><span>return</span></span><span>&nbsp;-ENOMEM;</span> 
<a id="x1-43414r199"></a><span>199</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43416r200"></a><span>200</span><span>&nbsp;&nbsp;&nbsp;&nbsp;proc_set_size(our_proc_file,&nbsp;80);</span> 
<a id="x1-43418r201"></a><span>201</span><span>&nbsp;&nbsp;&nbsp;&nbsp;proc_set_user(our_proc_file,&nbsp;GLOBAL_ROOT_UID,&nbsp;GLOBAL_ROOT_GID);</span> 
<a id="x1-43420r202"></a><span>202</span> 
<a id="x1-43422r203"></a><span>203</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2003"><span>"/proc/%s&nbsp;created</span></span><span id="textcolor2004"><span>\n</span></span><span id="textcolor2005"><span>"</span></span><span>,&nbsp;PROC_ENTRY_FILENAME);</span> 
<a id="x1-43424r204"></a><span>204</span> 
<a id="x1-43426r205"></a><span>205</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2006"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-43428r206"></a><span>206</span><span>}</span> 
<a id="x1-43430r207"></a><span>207</span> 
<a id="x1-43432r208"></a><span>208</span><span id="textcolor2007"><span>/*&nbsp;Cleanup&nbsp;-&nbsp;unregister&nbsp;our&nbsp;file&nbsp;from&nbsp;/proc.&nbsp;&nbsp;This&nbsp;could&nbsp;get&nbsp;dangerous&nbsp;if</span></span> 
<a id="x1-43434r209"></a><span>209</span><span id="textcolor2008"><span>&nbsp;*&nbsp;there&nbsp;are&nbsp;still&nbsp;processes&nbsp;waiting&nbsp;in&nbsp;waitq,&nbsp;because&nbsp;they&nbsp;are&nbsp;inside&nbsp;our</span></span> 
<a id="x1-43436r210"></a><span>210</span><span id="textcolor2009"><span>&nbsp;*&nbsp;open&nbsp;function,&nbsp;which&nbsp;will&nbsp;get&nbsp;unloaded.&nbsp;I</span><span>'</span><span>ll&nbsp;explain&nbsp;how&nbsp;to&nbsp;avoid&nbsp;removal</span></span> 
<a id="x1-43438r211"></a><span>211</span><span id="textcolor2010"><span>&nbsp;*&nbsp;of&nbsp;a&nbsp;kernel&nbsp;module&nbsp;in&nbsp;such&nbsp;a&nbsp;case&nbsp;in&nbsp;chapter&nbsp;10.</span></span> 
<a id="x1-43440r212"></a><span>212</span><span id="textcolor2011"><span>&nbsp;*/</span></span> 
<a id="x1-43442r213"></a><span>213</span><span id="textcolor2012"><span>static</span></span><span>&nbsp;</span><span id="textcolor2013"><span>void</span></span><span>&nbsp;__exit&nbsp;sleep_exit(</span><span id="textcolor2014"><span>void</span></span><span>)</span> 
<a id="x1-43444r214"></a><span>214</span><span>{</span> 
<a id="x1-43446r215"></a><span>215</span><span>&nbsp;&nbsp;&nbsp;&nbsp;remove_proc_entry(PROC_ENTRY_FILENAME,&nbsp;NULL);</span> 
<a id="x1-43448r216"></a><span>216</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor2015"><span>"/proc/%s&nbsp;removed</span></span><span id="textcolor2016"><span>\n</span></span><span id="textcolor2017"><span>"</span></span><span>,&nbsp;PROC_ENTRY_FILENAME);</span> 
<a id="x1-43450r217"></a><span>217</span><span>}</span> 
<a id="x1-43452r218"></a><span>218</span> 
<a id="x1-43454r219"></a><span>219</span><span>module_init(sleep_init);</span> 
<a id="x1-43456r220"></a><span>220</span><span>module_exit(sleep_exit);</span> 
<a id="x1-43458r221"></a><span>221</span> 
<a id="x1-43460r222"></a><span>222</span><span>MODULE_LICENSE(</span><span id="textcolor2018"><span>"GPL"</span></span><span>);</span></pre>

<!-- l. 1 -->
   <pre id="fancyvrb67"><a id="x1-43462r1"></a><span>1</span><span id="textcolor2019"><span>/*</span></span> 
<a id="x1-43464r2"></a><span>2</span><span id="textcolor2020"><span>&nbsp;*&nbsp;&nbsp;cat_nonblock.c&nbsp;-&nbsp;open&nbsp;a&nbsp;file&nbsp;and&nbsp;display&nbsp;its&nbsp;contents,&nbsp;but&nbsp;exit&nbsp;rather&nbsp;than</span></span> 
<a id="x1-43466r3"></a><span>3</span><span id="textcolor2021"><span>&nbsp;*&nbsp;&nbsp;wait&nbsp;for&nbsp;input.</span></span> 
<a id="x1-43468r4"></a><span>4</span><span id="textcolor2022"><span>&nbsp;*/</span></span> 
<a id="x1-43470r5"></a><span>5</span><span id="textcolor2023"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2024"><span>&lt;errno.h&gt;&nbsp;/*&nbsp;for&nbsp;errno&nbsp;*/</span></span> 
<a id="x1-43472r6"></a><span>6</span><span id="textcolor2025"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2026"><span>&lt;fcntl.h&gt;&nbsp;/*&nbsp;for&nbsp;open&nbsp;*/</span></span> 
<a id="x1-43474r7"></a><span>7</span><span id="textcolor2027"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2028"><span>&lt;stdio.h&gt;&nbsp;/*&nbsp;standard&nbsp;I/O&nbsp;*/</span></span> 
<a id="x1-43476r8"></a><span>8</span><span id="textcolor2029"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2030"><span>&lt;stdlib.h&gt;&nbsp;/*&nbsp;for&nbsp;exit&nbsp;*/</span></span> 
<a id="x1-43478r9"></a><span>9</span><span id="textcolor2031"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2032"><span>&lt;unistd.h&gt;&nbsp;/*&nbsp;for&nbsp;read&nbsp;*/</span></span> 
<a id="x1-43480r10"></a><span>10</span> 
<a id="x1-43482r11"></a><span>11</span><span id="textcolor2033"><span>#define&nbsp;MAX_BYTES&nbsp;1024&nbsp;*&nbsp;4</span></span> 
<a id="x1-43484r12"></a><span>12</span> 
<a id="x1-43486r13"></a><span>13</span><span id="textcolor2034"><span>int</span></span><span>&nbsp;main(</span><span id="textcolor2035"><span>int</span></span><span>&nbsp;argc,&nbsp;</span><span id="textcolor2036"><span>char</span></span><span>&nbsp;*argv[])</span> 
<a id="x1-43488r14"></a><span>14</span><span>{</span> 
<a id="x1-43490r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2037"><span>int</span></span><span>&nbsp;fd;&nbsp;</span><span id="textcolor2038"><span>/*&nbsp;The&nbsp;file&nbsp;descriptor&nbsp;for&nbsp;the&nbsp;file&nbsp;to&nbsp;read&nbsp;*/</span></span> 
<a id="x1-43492r16"></a><span>16</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2039"><span>size_t</span></span><span>&nbsp;bytes;&nbsp;</span><span id="textcolor2040"><span>/*&nbsp;The&nbsp;number&nbsp;of&nbsp;bytes&nbsp;read&nbsp;*/</span></span> 
<a id="x1-43494r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2041"><span>char</span></span><span>&nbsp;buffer[MAX_BYTES];&nbsp;</span><span id="textcolor2042"><span>/*&nbsp;The&nbsp;buffer&nbsp;for&nbsp;the&nbsp;bytes&nbsp;*/</span></span> 
<a id="x1-43496r18"></a><span>18</span> 
<a id="x1-43498r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2043"><span>/*&nbsp;Usage&nbsp;*/</span></span> 
<a id="x1-43500r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2044"><span>if</span></span><span>&nbsp;(argc&nbsp;!=&nbsp;2)&nbsp;{</span> 
<a id="x1-43502r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span id="textcolor2045"><span>"Usage:&nbsp;%s&nbsp;&lt;filename&gt;</span></span><span id="textcolor2046"><span>\n</span></span><span id="textcolor2047"><span>"</span></span><span>,&nbsp;argv[0]);</span> 
<a id="x1-43504r22"></a><span>22</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(</span><span id="textcolor2048"><span>"Reads&nbsp;the&nbsp;content&nbsp;of&nbsp;a&nbsp;file,&nbsp;but&nbsp;doesn</span><span>'</span><span>t&nbsp;wait&nbsp;for&nbsp;input"</span></span><span>);</span> 
<a id="x1-43506r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);</span> 
<a id="x1-43508r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43510r25"></a><span>25</span> 
<a id="x1-43512r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2049"><span>/*&nbsp;Open&nbsp;the&nbsp;file&nbsp;for&nbsp;reading&nbsp;in&nbsp;non&nbsp;blocking&nbsp;mode&nbsp;*/</span></span> 
<a id="x1-43514r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;fd&nbsp;=&nbsp;open(argv[1],&nbsp;O_RDONLY&nbsp;|&nbsp;O_NONBLOCK);</span> 
<a id="x1-43516r28"></a><span>28</span> 
<a id="x1-43518r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2050"><span>/*&nbsp;If&nbsp;open&nbsp;failed&nbsp;*/</span></span> 
<a id="x1-43520r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2051"><span>if</span></span><span>&nbsp;(fd&nbsp;==&nbsp;-1)&nbsp;{</span> 
<a id="x1-43522r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(errno&nbsp;==&nbsp;EAGAIN&nbsp;?&nbsp;</span><span id="textcolor2052"><span>"Open&nbsp;would&nbsp;block"</span></span><span>&nbsp;:&nbsp;</span><span id="textcolor2053"><span>"Open&nbsp;failed"</span></span><span>);</span> 
<a id="x1-43524r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);</span> 
<a id="x1-43526r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43528r34"></a><span>34</span> 
<a id="x1-43530r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2054"><span>/*&nbsp;Read&nbsp;the&nbsp;file&nbsp;and&nbsp;output&nbsp;its&nbsp;contents&nbsp;*/</span></span> 
<a id="x1-43532r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2055"><span>do</span></span><span>&nbsp;{</span> 
<a id="x1-43534r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2056"><span>/*&nbsp;Read&nbsp;characters&nbsp;from&nbsp;the&nbsp;file&nbsp;*/</span></span> 
<a id="x1-43536r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytes&nbsp;=&nbsp;read(fd,&nbsp;buffer,&nbsp;MAX_BYTES);</span> 
<a id="x1-43538r39"></a><span>39</span> 
<a id="x1-43540r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2057"><span>/*&nbsp;If&nbsp;there</span><span>'</span><span>s&nbsp;an&nbsp;error,&nbsp;report&nbsp;it&nbsp;and&nbsp;die&nbsp;*/</span></span> 
<a id="x1-43542r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2058"><span>if</span></span><span>&nbsp;(bytes&nbsp;==&nbsp;-1)&nbsp;{</span> 
<a id="x1-43544r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2059"><span>if</span></span><span>&nbsp;(errno&nbsp;==&nbsp;EAGAIN)</span> 
<a id="x1-43546r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(</span><span id="textcolor2060"><span>"Normally&nbsp;I</span><span>'</span><span>d&nbsp;block,&nbsp;but&nbsp;you&nbsp;told&nbsp;me&nbsp;not&nbsp;to"</span></span><span>);</span> 
<a id="x1-43548r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2061"><span>else</span></span> 
<a id="x1-43550r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(</span><span id="textcolor2062"><span>"Another&nbsp;read&nbsp;error"</span></span><span>);</span> 
<a id="x1-43552r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);</span> 
<a id="x1-43554r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43556r48"></a><span>48</span> 
<a id="x1-43558r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2063"><span>/*&nbsp;Print&nbsp;the&nbsp;characters&nbsp;*/</span></span> 
<a id="x1-43560r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2064"><span>if</span></span><span>&nbsp;(bytes&nbsp;&gt;&nbsp;0)&nbsp;{</span> 
<a id="x1-43562r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2065"><span>for</span></span><span>&nbsp;(</span><span id="textcolor2066"><span>int</span></span><span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;bytes;&nbsp;i++)</span> 
<a id="x1-43564r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;putchar(buffer[i]);</span> 
<a id="x1-43566r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-43568r54"></a><span>54</span> 
<a id="x1-43570r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2067"><span>/*&nbsp;While&nbsp;there&nbsp;are&nbsp;no&nbsp;errors&nbsp;and&nbsp;the&nbsp;file&nbsp;isn</span><span>'</span><span>t&nbsp;over&nbsp;*/</span></span> 
<a id="x1-43572r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span id="textcolor2068"><span>while</span></span><span>&nbsp;(bytes&nbsp;&gt;&nbsp;0);</span> 
<a id="x1-43574r57"></a><span>57</span> 
<a id="x1-43576r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2069"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-43578r59"></a><span>59</span><span>}</span></pre>
<!-- l. 1656 -->
   <h4 id="completions"><span>11.2   </span> <a id="x1-4400011.2"></a>Completions</h4>
<!-- l. 1658 --><p>Sometimes one thing should happen before another within a module having multiple threads.
Rather than using <code>  <span>/bin/sleep</span>
</code> commands, the kernel has another way to do this which allows timeouts or
interrupts to also happen.
</p><!-- l. 1661 --><p>   Completions as code synchronization mechanism have three main parts, initialization
of struct completion synchronization object, the waiting or barrier part through
<code> <span>wait_for_completion()</span>
                                                                  

                                                                  
</code>, and the signalling side through a call to
<code> <span>complete()</span>
</code>.
</p><!-- l. 1663 --><p>   In the subsequent example, two threads are initiated: crank and flywheel. It
is imperative that the crank thread starts before the flywheel thread. A
completion state is established for each of these threads, with a distinct
completion defined for both the crank and flywheel threads. At the exit
point of each thread the respective completion state is updated, and
<code> <span>wait_for_completion</span>
</code> is used by the flywheel thread to ensure that it does not begin prematurely. The crank thread
uses the <code>  <span>complete_all()</span>
</code> function to update the completion, which lets the flywheel thread continue.
</p><!-- l. 1669 --><p>   So even though <code>  <span>flywheel_thread</span>
</code> is started first you should notice when you load this module and run
<code> <span>dmesg</span>
</code>, that turning the crank always happens first because the flywheel thread waits for
the crank thread to complete.
</p><!-- l. 1671 --><p>   There are other variations of the <code>  <span>wait_for_completion</span>
</code> function, which include timeouts or being interrupted, but this basic mechanism is
enough for many common situations without adding a lot of complexity.
</p><!-- l. 1 -->
   <pre id="fancyvrb68"><a id="x1-44010r1"></a><span>1</span><span id="textcolor2070"><span>/*</span></span> 
<a id="x1-44012r2"></a><span>2</span><span id="textcolor2071"><span>&nbsp;*&nbsp;completions.c</span></span> 
<a id="x1-44014r3"></a><span>3</span><span id="textcolor2072"><span>&nbsp;*/</span></span> 
<a id="x1-44016r4"></a><span>4</span><span id="textcolor2073"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2074"><span>&lt;linux/completion.h&gt;</span></span> 
<a id="x1-44018r5"></a><span>5</span><span id="textcolor2075"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2076"><span>&lt;linux/err.h&gt;&nbsp;/*&nbsp;for&nbsp;IS_ERR()&nbsp;*/</span></span> 
<a id="x1-44020r6"></a><span>6</span><span id="textcolor2077"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2078"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-44022r7"></a><span>7</span><span id="textcolor2079"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2080"><span>&lt;linux/kthread.h&gt;</span></span> 
<a id="x1-44024r8"></a><span>8</span><span id="textcolor2081"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2082"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-44026r9"></a><span>9</span><span id="textcolor2083"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2084"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-44028r10"></a><span>10</span><span id="textcolor2085"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2086"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-44030r11"></a><span>11</span> 
<a id="x1-44032r12"></a><span>12</span><span id="textcolor2087"><span>static</span></span><span>&nbsp;</span><span id="textcolor2088"><span>struct</span></span><span>&nbsp;completion&nbsp;crank_comp;</span> 
<a id="x1-44034r13"></a><span>13</span><span id="textcolor2089"><span>static</span></span><span>&nbsp;</span><span id="textcolor2090"><span>struct</span></span><span>&nbsp;completion&nbsp;flywheel_comp;</span> 
<a id="x1-44036r14"></a><span>14</span> 
<a id="x1-44038r15"></a><span>15</span><span id="textcolor2091"><span>static</span></span><span>&nbsp;</span><span id="textcolor2092"><span>int</span></span><span>&nbsp;machine_crank_thread(</span><span id="textcolor2093"><span>void</span></span><span>&nbsp;*arg)</span> 
<a id="x1-44040r16"></a><span>16</span><span>{</span> 
<a id="x1-44042r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2094"><span>"Turn&nbsp;the&nbsp;crank</span></span><span id="textcolor2095"><span>\n</span></span><span id="textcolor2096"><span>"</span></span><span>);</span> 
<a id="x1-44044r18"></a><span>18</span> 
<a id="x1-44046r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;complete_all(&amp;crank_comp);</span> 
<a id="x1-44048r20"></a><span>20</span><span id="textcolor2097"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;17,&nbsp;0)</span></span> 
<a id="x1-44050r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kthread_complete_and_exit(&amp;crank_comp,&nbsp;0);</span> 
<a id="x1-44052r22"></a><span>22</span><span id="textcolor2098"><span>#else</span></span> 
<a id="x1-44054r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;complete_and_exit(&amp;crank_comp,&nbsp;0);</span> 
<a id="x1-44056r24"></a><span>24</span><span id="textcolor2099"><span>#endif</span></span> 
<a id="x1-44058r25"></a><span>25</span><span>}</span> 
<a id="x1-44060r26"></a><span>26</span> 
<a id="x1-44062r27"></a><span>27</span><span id="textcolor2100"><span>static</span></span><span>&nbsp;</span><span id="textcolor2101"><span>int</span></span><span>&nbsp;machine_flywheel_spinup_thread(</span><span id="textcolor2102"><span>void</span></span><span>&nbsp;*arg)</span> 
<a id="x1-44064r28"></a><span>28</span><span>{</span> 
<a id="x1-44066r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;wait_for_completion(&amp;crank_comp);</span> 
<a id="x1-44068r30"></a><span>30</span> 
<a id="x1-44070r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2103"><span>"Flywheel&nbsp;spins&nbsp;up</span></span><span id="textcolor2104"><span>\n</span></span><span id="textcolor2105"><span>"</span></span><span>);</span> 
<a id="x1-44072r32"></a><span>32</span> 
<a id="x1-44074r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;complete_all(&amp;flywheel_comp);</span> 
<a id="x1-44076r34"></a><span>34</span><span id="textcolor2106"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(5,&nbsp;17,&nbsp;0)</span></span> 
<a id="x1-44078r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kthread_complete_and_exit(&amp;flywheel_comp,&nbsp;0);</span> 
<a id="x1-44080r36"></a><span>36</span><span id="textcolor2107"><span>#else</span></span> 
<a id="x1-44082r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;complete_and_exit(&amp;flywheel_comp,&nbsp;0);</span> 
<a id="x1-44084r38"></a><span>38</span><span id="textcolor2108"><span>#endif</span></span> 
<a id="x1-44086r39"></a><span>39</span><span>}</span> 
<a id="x1-44088r40"></a><span>40</span> 
<a id="x1-44090r41"></a><span>41</span><span id="textcolor2109"><span>static</span></span><span>&nbsp;</span><span id="textcolor2110"><span>int</span></span><span>&nbsp;__init&nbsp;completions_init(</span><span id="textcolor2111"><span>void</span></span><span>)</span> 
<a id="x1-44092r42"></a><span>42</span><span>{</span> 
<a id="x1-44094r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2112"><span>struct</span></span><span>&nbsp;task_struct&nbsp;*crank_thread;</span> 
<a id="x1-44096r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2113"><span>struct</span></span><span>&nbsp;task_struct&nbsp;*flywheel_thread;</span> 
<a id="x1-44098r45"></a><span>45</span> 
<a id="x1-44100r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2114"><span>"completions&nbsp;example</span></span><span id="textcolor2115"><span>\n</span></span><span id="textcolor2116"><span>"</span></span><span>);</span> 
<a id="x1-44102r47"></a><span>47</span> 
<a id="x1-44104r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;init_completion(&amp;crank_comp);</span> 
<a id="x1-44106r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;init_completion(&amp;flywheel_comp);</span> 
<a id="x1-44108r50"></a><span>50</span> 
<a id="x1-44110r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;crank_thread&nbsp;=&nbsp;kthread_create(machine_crank_thread,&nbsp;NULL,&nbsp;</span><span id="textcolor2117"><span>"KThread&nbsp;Crank"</span></span><span>);</span> 
<a id="x1-44112r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2118"><span>if</span></span><span>&nbsp;(IS_ERR(crank_thread))</span> 
<a id="x1-44114r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2119"><span>goto</span></span><span>&nbsp;ERROR_THREAD_1;</span> 
<a id="x1-44116r54"></a><span>54</span> 
<a id="x1-44118r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;flywheel_thread&nbsp;=&nbsp;kthread_create(machine_flywheel_spinup_thread,&nbsp;NULL,</span> 
<a id="x1-44120r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2120"><span>"KThread&nbsp;Flywheel"</span></span><span>);</span> 
<a id="x1-44122r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2121"><span>if</span></span><span>&nbsp;(IS_ERR(flywheel_thread))</span> 
<a id="x1-44124r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2122"><span>goto</span></span><span>&nbsp;ERROR_THREAD_2;</span> 
<a id="x1-44126r59"></a><span>59</span> 
<a id="x1-44128r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;wake_up_process(flywheel_thread);</span> 
<a id="x1-44130r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;wake_up_process(crank_thread);</span> 
<a id="x1-44132r62"></a><span>62</span> 
<a id="x1-44134r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2123"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-44136r64"></a><span>64</span> 
<a id="x1-44138r65"></a><span>65</span><span>ERROR_THREAD_2:</span> 
<a id="x1-44140r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kthread_stop(crank_thread);</span> 
<a id="x1-44142r67"></a><span>67</span><span>ERROR_THREAD_1:</span> 
<a id="x1-44144r68"></a><span>68</span> 
<a id="x1-44146r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2124"><span>return</span></span><span>&nbsp;-1;</span> 
<a id="x1-44148r70"></a><span>70</span><span>}</span> 
<a id="x1-44150r71"></a><span>71</span> 
<a id="x1-44152r72"></a><span>72</span><span id="textcolor2125"><span>static</span></span><span>&nbsp;</span><span id="textcolor2126"><span>void</span></span><span>&nbsp;__exit&nbsp;completions_exit(</span><span id="textcolor2127"><span>void</span></span><span>)</span> 
<a id="x1-44154r73"></a><span>73</span><span>{</span> 
<a id="x1-44156r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;wait_for_completion(&amp;crank_comp);</span> 
<a id="x1-44158r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;wait_for_completion(&amp;flywheel_comp);</span> 
<a id="x1-44160r76"></a><span>76</span> 
<a id="x1-44162r77"></a><span>77</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2128"><span>"completions&nbsp;exit</span></span><span id="textcolor2129"><span>\n</span></span><span id="textcolor2130"><span>"</span></span><span>);</span> 
<a id="x1-44164r78"></a><span>78</span><span>}</span> 
<a id="x1-44166r79"></a><span>79</span> 
<a id="x1-44168r80"></a><span>80</span><span>module_init(completions_init);</span> 
<a id="x1-44170r81"></a><span>81</span><span>module_exit(completions_exit);</span> 
<a id="x1-44172r82"></a><span>82</span> 
<a id="x1-44174r83"></a><span>83</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2131"><span>"Completions&nbsp;example"</span></span><span>);</span> 
<a id="x1-44176r84"></a><span>84</span><span>MODULE_LICENSE(</span><span id="textcolor2132"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1675 -->
   <h3 id="avoiding-collisions-and-deadlocks"><span>12   </span> <a id="x1-4500012"></a>Avoiding Collisions and Deadlocks</h3>
<!-- l. 1677 --><p>If processes running on different CPUs or in different threads try to access the same
memory, then it is possible that strange things can happen or your system can lock
up. To avoid this, various types of mutual exclusion kernel functions are available.
These indicate if a section of code is "locked" or "unlocked" so that simultaneous
attempts to run it can not happen.
</p>
   <h4 id="mutex"><span>12.1   </span> <a id="x1-4600012.1"></a>Mutex</h4>
<!-- l. 1682 --><p>You can use kernel mutexes (mutual exclusions) in much the same manner that you
might deploy them in userland. This may be all that is needed to avoid collisions in
most cases.
</p><!-- l. 1 -->
   <pre id="fancyvrb69"><a id="x1-46002r1"></a><span>1</span><span id="textcolor2133"><span>/*</span></span> 
<a id="x1-46004r2"></a><span>2</span><span id="textcolor2134"><span>&nbsp;*&nbsp;example_mutex.c</span></span> 
<a id="x1-46006r3"></a><span>3</span><span id="textcolor2135"><span>&nbsp;*/</span></span> 
<a id="x1-46008r4"></a><span>4</span><span id="textcolor2136"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2137"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-46010r5"></a><span>5</span><span id="textcolor2138"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2139"><span>&lt;linux/mutex.h&gt;</span></span> 
<a id="x1-46012r6"></a><span>6</span><span id="textcolor2140"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2141"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-46014r7"></a><span>7</span> 
<a id="x1-46016r8"></a><span>8</span><span id="textcolor2142"><span>static</span></span><span>&nbsp;DEFINE_MUTEX(mymutex);</span> 
<a id="x1-46018r9"></a><span>9</span> 
<a id="x1-46020r10"></a><span>10</span><span id="textcolor2143"><span>static</span></span><span>&nbsp;</span><span id="textcolor2144"><span>int</span></span><span>&nbsp;__init&nbsp;example_mutex_init(</span><span id="textcolor2145"><span>void</span></span><span>)</span> 
<a id="x1-46022r11"></a><span>11</span><span>{</span> 
<a id="x1-46024r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2146"><span>int</span></span><span>&nbsp;ret;</span> 
<a id="x1-46026r13"></a><span>13</span> 
<a id="x1-46028r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2147"><span>"example_mutex&nbsp;init</span></span><span id="textcolor2148"><span>\n</span></span><span id="textcolor2149"><span>"</span></span><span>);</span> 
<a id="x1-46030r15"></a><span>15</span> 
<a id="x1-46032r16"></a><span>16</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;mutex_trylock(&amp;mymutex);</span> 
<a id="x1-46034r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2150"><span>if</span></span><span>&nbsp;(ret&nbsp;!=&nbsp;0)&nbsp;{</span> 
<a id="x1-46036r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2151"><span>"mutex&nbsp;is&nbsp;locked</span></span><span id="textcolor2152"><span>\n</span></span><span id="textcolor2153"><span>"</span></span><span>);</span> 
<a id="x1-46038r19"></a><span>19</span> 
<a id="x1-46040r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2154"><span>if</span></span><span>&nbsp;(mutex_is_locked(&amp;mymutex)&nbsp;==&nbsp;0)</span> 
<a id="x1-46042r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2155"><span>"The&nbsp;mutex&nbsp;failed&nbsp;to&nbsp;lock!</span></span><span id="textcolor2156"><span>\n</span></span><span id="textcolor2157"><span>"</span></span><span>);</span> 
<a id="x1-46044r22"></a><span>22</span> 
<a id="x1-46046r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutex_unlock(&amp;mymutex);</span> 
<a id="x1-46048r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2158"><span>"mutex&nbsp;is&nbsp;unlocked</span></span><span id="textcolor2159"><span>\n</span></span><span id="textcolor2160"><span>"</span></span><span>);</span> 
<a id="x1-46050r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span id="textcolor2161"><span>else</span></span> 
<a id="x1-46052r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2162"><span>"Failed&nbsp;to&nbsp;lock</span></span><span id="textcolor2163"><span>\n</span></span><span id="textcolor2164"><span>"</span></span><span>);</span> 
<a id="x1-46054r27"></a><span>27</span> 
<a id="x1-46056r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2165"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-46058r29"></a><span>29</span><span>}</span> 
<a id="x1-46060r30"></a><span>30</span> 
<a id="x1-46062r31"></a><span>31</span><span id="textcolor2166"><span>static</span></span><span>&nbsp;</span><span id="textcolor2167"><span>void</span></span><span>&nbsp;__exit&nbsp;example_mutex_exit(</span><span id="textcolor2168"><span>void</span></span><span>)</span> 
<a id="x1-46064r32"></a><span>32</span><span>{</span> 
<a id="x1-46066r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2169"><span>"example_mutex&nbsp;exit</span></span><span id="textcolor2170"><span>\n</span></span><span id="textcolor2171"><span>"</span></span><span>);</span> 
<a id="x1-46068r34"></a><span>34</span><span>}</span> 
<a id="x1-46070r35"></a><span>35</span> 
<a id="x1-46072r36"></a><span>36</span><span>module_init(example_mutex_init);</span> 
<a id="x1-46074r37"></a><span>37</span><span>module_exit(example_mutex_exit);</span> 
<a id="x1-46076r38"></a><span>38</span> 
<a id="x1-46078r39"></a><span>39</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2172"><span>"Mutex&nbsp;example"</span></span><span>);</span> 
<a id="x1-46080r40"></a><span>40</span><span>MODULE_LICENSE(</span><span id="textcolor2173"><span>"GPL"</span></span><span>);</span></pre>
                                                                  

                                                                  
<!-- l. 1687 -->
   <h4 id="spinlocks"><span>12.2   </span> <a id="x1-4700012.2"></a>Spinlocks</h4>
<!-- l. 1689 --><p>As the name suggests, spinlocks lock up the CPU that the code is running on,
taking 100% of its resources. Because of this you should only use the spinlock
mechanism around code which is likely to take no more than a few milliseconds to
run and so will not noticeably slow anything down from the user’s point of
view.
</p><!-- l. 1692 --><p>   The example here is <span><span><span>"irq&nbsp;safe"</span></span></span> in that if interrupts happen during the lock then
they will not be forgotten and will activate when the unlock happens, using the
<code> <span>flags</span>
</code> variable to retain their state.
</p><!-- l. 1 -->
   <pre id="fancyvrb70"><a id="x1-47003r1"></a><span>1</span><span id="textcolor2174"><span>/*</span></span> 
<a id="x1-47005r2"></a><span>2</span><span id="textcolor2175"><span>&nbsp;*&nbsp;example_spinlock.c</span></span> 
<a id="x1-47007r3"></a><span>3</span><span id="textcolor2176"><span>&nbsp;*/</span></span> 
<a id="x1-47009r4"></a><span>4</span><span id="textcolor2177"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2178"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-47011r5"></a><span>5</span><span id="textcolor2179"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2180"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-47013r6"></a><span>6</span><span id="textcolor2181"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2182"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-47015r7"></a><span>7</span><span id="textcolor2183"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2184"><span>&lt;linux/spinlock.h&gt;</span></span> 
<a id="x1-47017r8"></a><span>8</span> 
<a id="x1-47019r9"></a><span>9</span><span id="textcolor2185"><span>static</span></span><span>&nbsp;DEFINE_SPINLOCK(sl_static);</span> 
<a id="x1-47021r10"></a><span>10</span><span id="textcolor2186"><span>static</span></span><span>&nbsp;spinlock_t&nbsp;sl_dynamic;</span> 
<a id="x1-47023r11"></a><span>11</span> 
<a id="x1-47025r12"></a><span>12</span><span id="textcolor2187"><span>static</span></span><span>&nbsp;</span><span id="textcolor2188"><span>void</span></span><span>&nbsp;example_spinlock_static(</span><span id="textcolor2189"><span>void</span></span><span>)</span> 
<a id="x1-47027r13"></a><span>13</span><span>{</span> 
<a id="x1-47029r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2190"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2191"><span>long</span></span><span>&nbsp;flags;</span> 
<a id="x1-47031r15"></a><span>15</span> 
<a id="x1-47033r16"></a><span>16</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock_irqsave(&amp;sl_static,&nbsp;flags);</span> 
<a id="x1-47035r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2192"><span>"Locked&nbsp;static&nbsp;spinlock</span></span><span id="textcolor2193"><span>\n</span></span><span id="textcolor2194"><span>"</span></span><span>);</span> 
<a id="x1-47037r18"></a><span>18</span> 
<a id="x1-47039r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2195"><span>/*&nbsp;Do&nbsp;something&nbsp;or&nbsp;other&nbsp;safely.&nbsp;Because&nbsp;this&nbsp;uses&nbsp;100%&nbsp;CPU&nbsp;time,&nbsp;this</span></span> 
<a id="x1-47041r20"></a><span>20</span><span id="textcolor2196"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;code&nbsp;should&nbsp;take&nbsp;no&nbsp;more&nbsp;than&nbsp;a&nbsp;few&nbsp;milliseconds&nbsp;to&nbsp;run.</span></span> 
<a id="x1-47043r21"></a><span>21</span><span id="textcolor2197"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-47045r22"></a><span>22</span> 
<a id="x1-47047r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore(&amp;sl_static,&nbsp;flags);</span> 
<a id="x1-47049r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2198"><span>"Unlocked&nbsp;static&nbsp;spinlock</span></span><span id="textcolor2199"><span>\n</span></span><span id="textcolor2200"><span>"</span></span><span>);</span> 
<a id="x1-47051r25"></a><span>25</span><span>}</span> 
<a id="x1-47053r26"></a><span>26</span> 
<a id="x1-47055r27"></a><span>27</span><span id="textcolor2201"><span>static</span></span><span>&nbsp;</span><span id="textcolor2202"><span>void</span></span><span>&nbsp;example_spinlock_dynamic(</span><span id="textcolor2203"><span>void</span></span><span>)</span> 
<a id="x1-47057r28"></a><span>28</span><span>{</span> 
<a id="x1-47059r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2204"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2205"><span>long</span></span><span>&nbsp;flags;</span> 
<a id="x1-47061r30"></a><span>30</span> 
<a id="x1-47063r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock_init(&amp;sl_dynamic);</span> 
<a id="x1-47065r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock_irqsave(&amp;sl_dynamic,&nbsp;flags);</span> 
<a id="x1-47067r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2206"><span>"Locked&nbsp;dynamic&nbsp;spinlock</span></span><span id="textcolor2207"><span>\n</span></span><span id="textcolor2208"><span>"</span></span><span>);</span> 
<a id="x1-47069r34"></a><span>34</span> 
<a id="x1-47071r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2209"><span>/*&nbsp;Do&nbsp;something&nbsp;or&nbsp;other&nbsp;safely.&nbsp;Because&nbsp;this&nbsp;uses&nbsp;100%&nbsp;CPU&nbsp;time,&nbsp;this</span></span> 
<a id="x1-47073r36"></a><span>36</span><span id="textcolor2210"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;code&nbsp;should&nbsp;take&nbsp;no&nbsp;more&nbsp;than&nbsp;a&nbsp;few&nbsp;milliseconds&nbsp;to&nbsp;run.</span></span> 
<a id="x1-47075r37"></a><span>37</span><span id="textcolor2211"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-47077r38"></a><span>38</span> 
<a id="x1-47079r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore(&amp;sl_dynamic,&nbsp;flags);</span> 
<a id="x1-47081r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2212"><span>"Unlocked&nbsp;dynamic&nbsp;spinlock</span></span><span id="textcolor2213"><span>\n</span></span><span id="textcolor2214"><span>"</span></span><span>);</span> 
<a id="x1-47083r41"></a><span>41</span><span>}</span> 
<a id="x1-47085r42"></a><span>42</span> 
<a id="x1-47087r43"></a><span>43</span><span id="textcolor2215"><span>static</span></span><span>&nbsp;</span><span id="textcolor2216"><span>int</span></span><span>&nbsp;__init&nbsp;example_spinlock_init(</span><span id="textcolor2217"><span>void</span></span><span>)</span> 
<a id="x1-47089r44"></a><span>44</span><span>{</span> 
<a id="x1-47091r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2218"><span>"example&nbsp;spinlock&nbsp;started</span></span><span id="textcolor2219"><span>\n</span></span><span id="textcolor2220"><span>"</span></span><span>);</span> 
<a id="x1-47093r46"></a><span>46</span> 
<a id="x1-47095r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;example_spinlock_static();</span> 
<a id="x1-47097r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;example_spinlock_dynamic();</span> 
<a id="x1-47099r49"></a><span>49</span> 
<a id="x1-47101r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2221"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-47103r51"></a><span>51</span><span>}</span> 
<a id="x1-47105r52"></a><span>52</span> 
<a id="x1-47107r53"></a><span>53</span><span id="textcolor2222"><span>static</span></span><span>&nbsp;</span><span id="textcolor2223"><span>void</span></span><span>&nbsp;__exit&nbsp;example_spinlock_exit(</span><span id="textcolor2224"><span>void</span></span><span>)</span> 
<a id="x1-47109r54"></a><span>54</span><span>{</span> 
<a id="x1-47111r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2225"><span>"example&nbsp;spinlock&nbsp;exit</span></span><span id="textcolor2226"><span>\n</span></span><span id="textcolor2227"><span>"</span></span><span>);</span> 
<a id="x1-47113r56"></a><span>56</span><span>}</span> 
<a id="x1-47115r57"></a><span>57</span> 
<a id="x1-47117r58"></a><span>58</span><span>module_init(example_spinlock_init);</span> 
<a id="x1-47119r59"></a><span>59</span><span>module_exit(example_spinlock_exit);</span> 
<a id="x1-47121r60"></a><span>60</span> 
<a id="x1-47123r61"></a><span>61</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2228"><span>"Spinlock&nbsp;example"</span></span><span>);</span> 
<a id="x1-47125r62"></a><span>62</span><span>MODULE_LICENSE(</span><span id="textcolor2229"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1696 --><p>   Taking 100% of a CPU’s resources comes with greater responsibility. Situations
where the kernel code monopolizes a CPU are called <span>atomic contexts</span>. Holding a
spinlock is one of those situations. Sleeping in atomic contexts may leave the system
hanging, as the occupied CPU devotes 100% of its resources doing nothing
but sleeping. In some worse cases the system may crash. Thus, sleeping in
atomic contexts is considered a bug in the kernel. They are sometimes called
“sleep-in-atomic-context” in some materials.
</p><!-- l. 1704 --><p>   Note that sleeping here is not limited to calling the sleep functions explicitly.
If subsequent function calls eventually invoke a function that sleeps, it is
also considered sleeping. Thus, it is important to pay attention to functions
being used in atomic context. There’s no documentation recording all such
functions, but code comments may help. Sometimes you may find comments in
kernel source code stating that a function “may sleep”, “might sleep”, or
more explicitly “the caller should not hold a spinlock”. Those comments are
hints that a function may implicitly sleep and must not be called in atomic
contexts.
</p><!-- l. 1711 -->
   <h4 id="read-and-write-locks"><span>12.3   </span> <a id="x1-4800012.3"></a>Read and write locks</h4>
<!-- l. 1713 --><p>Read and write locks are specialised kinds of spinlocks so that you can exclusively
read from something or write to something. Like the earlier spinlocks example, the
one below shows an "irq safe" situation in which if other functions were triggered
from irqs which might also read and write to whatever you are concerned with
then they would not disrupt the logic. As before it is a good idea to keep
anything done within the lock as short as possible so that it does not hang up
the system and cause users to start revolting against the tyranny of your
module.
</p><!-- l. 1 -->
   <pre id="fancyvrb71"><a id="x1-48002r1"></a><span>1</span><span id="textcolor2230"><span>/*</span></span> 
<a id="x1-48004r2"></a><span>2</span><span id="textcolor2231"><span>&nbsp;*&nbsp;example_rwlock.c</span></span> 
<a id="x1-48006r3"></a><span>3</span><span id="textcolor2232"><span>&nbsp;*/</span></span> 
<a id="x1-48008r4"></a><span>4</span><span id="textcolor2233"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2234"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-48010r5"></a><span>5</span><span id="textcolor2235"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2236"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-48012r6"></a><span>6</span><span id="textcolor2237"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2238"><span>&lt;linux/rwlock.h&gt;</span></span> 
<a id="x1-48014r7"></a><span>7</span> 
<a id="x1-48016r8"></a><span>8</span><span id="textcolor2239"><span>static</span></span><span>&nbsp;DEFINE_RWLOCK(myrwlock);</span> 
<a id="x1-48018r9"></a><span>9</span> 
<a id="x1-48020r10"></a><span>10</span><span id="textcolor2240"><span>static</span></span><span>&nbsp;</span><span id="textcolor2241"><span>void</span></span><span>&nbsp;example_read_lock(</span><span id="textcolor2242"><span>void</span></span><span>)</span> 
<a id="x1-48022r11"></a><span>11</span><span>{</span> 
<a id="x1-48024r12"></a><span>12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2243"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2244"><span>long</span></span><span>&nbsp;flags;</span> 
<a id="x1-48026r13"></a><span>13</span> 
<a id="x1-48028r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;read_lock_irqsave(&amp;myrwlock,&nbsp;flags);</span> 
<a id="x1-48030r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2245"><span>"Read&nbsp;Locked</span></span><span id="textcolor2246"><span>\n</span></span><span id="textcolor2247"><span>"</span></span><span>);</span> 
<a id="x1-48032r16"></a><span>16</span> 
<a id="x1-48034r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2248"><span>/*&nbsp;Read&nbsp;from&nbsp;something&nbsp;*/</span></span> 
<a id="x1-48036r18"></a><span>18</span> 
<a id="x1-48038r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;read_unlock_irqrestore(&amp;myrwlock,&nbsp;flags);</span> 
<a id="x1-48040r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2249"><span>"Read&nbsp;Unlocked</span></span><span id="textcolor2250"><span>\n</span></span><span id="textcolor2251"><span>"</span></span><span>);</span> 
<a id="x1-48042r21"></a><span>21</span><span>}</span> 
<a id="x1-48044r22"></a><span>22</span> 
<a id="x1-48046r23"></a><span>23</span><span id="textcolor2252"><span>static</span></span><span>&nbsp;</span><span id="textcolor2253"><span>void</span></span><span>&nbsp;example_write_lock(</span><span id="textcolor2254"><span>void</span></span><span>)</span> 
<a id="x1-48048r24"></a><span>24</span><span>{</span> 
<a id="x1-48050r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2255"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2256"><span>long</span></span><span>&nbsp;flags;</span> 
<a id="x1-48052r26"></a><span>26</span> 
<a id="x1-48054r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;write_lock_irqsave(&amp;myrwlock,&nbsp;flags);</span> 
<a id="x1-48056r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2257"><span>"Write&nbsp;Locked</span></span><span id="textcolor2258"><span>\n</span></span><span id="textcolor2259"><span>"</span></span><span>);</span> 
<a id="x1-48058r29"></a><span>29</span> 
<a id="x1-48060r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2260"><span>/*&nbsp;Write&nbsp;to&nbsp;something&nbsp;*/</span></span> 
<a id="x1-48062r31"></a><span>31</span> 
<a id="x1-48064r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;write_unlock_irqrestore(&amp;myrwlock,&nbsp;flags);</span> 
<a id="x1-48066r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2261"><span>"Write&nbsp;Unlocked</span></span><span id="textcolor2262"><span>\n</span></span><span id="textcolor2263"><span>"</span></span><span>);</span> 
<a id="x1-48068r34"></a><span>34</span><span>}</span> 
<a id="x1-48070r35"></a><span>35</span> 
<a id="x1-48072r36"></a><span>36</span><span id="textcolor2264"><span>static</span></span><span>&nbsp;</span><span id="textcolor2265"><span>int</span></span><span>&nbsp;__init&nbsp;example_rwlock_init(</span><span id="textcolor2266"><span>void</span></span><span>)</span> 
<a id="x1-48074r37"></a><span>37</span><span>{</span> 
<a id="x1-48076r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2267"><span>"example_rwlock&nbsp;started</span></span><span id="textcolor2268"><span>\n</span></span><span id="textcolor2269"><span>"</span></span><span>);</span> 
<a id="x1-48078r39"></a><span>39</span> 
<a id="x1-48080r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;example_read_lock();</span> 
<a id="x1-48082r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;example_write_lock();</span> 
<a id="x1-48084r42"></a><span>42</span> 
<a id="x1-48086r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2270"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-48088r44"></a><span>44</span><span>}</span> 
<a id="x1-48090r45"></a><span>45</span> 
<a id="x1-48092r46"></a><span>46</span><span id="textcolor2271"><span>static</span></span><span>&nbsp;</span><span id="textcolor2272"><span>void</span></span><span>&nbsp;__exit&nbsp;example_rwlock_exit(</span><span id="textcolor2273"><span>void</span></span><span>)</span> 
<a id="x1-48094r47"></a><span>47</span><span>{</span> 
<a id="x1-48096r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2274"><span>"example_rwlock&nbsp;exit</span></span><span id="textcolor2275"><span>\n</span></span><span id="textcolor2276"><span>"</span></span><span>);</span> 
<a id="x1-48098r49"></a><span>49</span><span>}</span> 
<a id="x1-48100r50"></a><span>50</span> 
<a id="x1-48102r51"></a><span>51</span><span>module_init(example_rwlock_init);</span> 
<a id="x1-48104r52"></a><span>52</span><span>module_exit(example_rwlock_exit);</span> 
<a id="x1-48106r53"></a><span>53</span> 
<a id="x1-48108r54"></a><span>54</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2277"><span>"Read/Write&nbsp;locks&nbsp;example"</span></span><span>);</span> 
<a id="x1-48110r55"></a><span>55</span><span>MODULE_LICENSE(</span><span id="textcolor2278"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1719 --><p>   Of course, if you know for sure that there are no functions triggered by irqs
which could possibly interfere with your logic then you can use the simpler
<code> <span>read_lock(&amp;myrwlock)</span>
</code> and <code>  <span>read_unlock(&amp;myrwlock)</span>
</code> or the corresponding write functions.
</p>
   <h4 id="atomic-operations"><span>12.4   </span> <a id="x1-4900012.4"></a>Atomic operations</h4>
<!-- l. 1722 --><p>If you are doing simple arithmetic: adding, subtracting or bitwise operations, then
there is another way in the multi-CPU and multi-hyperthreaded world to stop other
parts of the system from messing with your mojo. By using atomic operations you
can be confident that your addition, subtraction or bit flip did actually happen
and was not overwritten by some other shenanigans. An example is shown
below.
</p><!-- l. 1 -->
   <pre id="fancyvrb72"><a id="x1-49002r1"></a><span>1</span><span id="textcolor2279"><span>/*</span></span> 
<a id="x1-49004r2"></a><span>2</span><span id="textcolor2280"><span>&nbsp;*&nbsp;example_atomic.c</span></span> 
<a id="x1-49006r3"></a><span>3</span><span id="textcolor2281"><span>&nbsp;*/</span></span> 
<a id="x1-49008r4"></a><span>4</span><span id="textcolor2282"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2283"><span>&lt;linux/atomic.h&gt;</span></span> 
<a id="x1-49010r5"></a><span>5</span><span id="textcolor2284"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2285"><span>&lt;linux/bitops.h&gt;</span></span> 
<a id="x1-49012r6"></a><span>6</span><span id="textcolor2286"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2287"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-49014r7"></a><span>7</span><span id="textcolor2288"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2289"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-49016r8"></a><span>8</span> 
<a id="x1-49018r9"></a><span>9</span><span id="textcolor2290"><span>#define&nbsp;BYTE_TO_BINARY_PATTERN&nbsp;"%c%c%c%c%c%c%c%c"</span></span> 
<a id="x1-49020r10"></a><span>10</span><span id="textcolor2291"><span>#define&nbsp;BYTE_TO_BINARY(byte)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</span></span> 
<a id="x1-49022r11"></a><span>11</span><span id="textcolor2292"><span>&nbsp;&nbsp;&nbsp;&nbsp;((byte&nbsp;&amp;&nbsp;0x80)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;((byte&nbsp;&amp;&nbsp;0x40)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</span></span> 
<a id="x1-49024r12"></a><span>12</span><span id="textcolor2293"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((byte&nbsp;&amp;&nbsp;0x20)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;((byte&nbsp;&amp;&nbsp;0x10)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</span></span> 
<a id="x1-49026r13"></a><span>13</span><span id="textcolor2294"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((byte&nbsp;&amp;&nbsp;0x08)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;((byte&nbsp;&amp;&nbsp;0x04)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</span></span> 
<a id="x1-49028r14"></a><span>14</span><span id="textcolor2295"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((byte&nbsp;&amp;&nbsp;0x02)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>),&nbsp;((byte&nbsp;&amp;&nbsp;0x01)&nbsp;?&nbsp;</span><span>'</span><span>1</span><span>'</span><span>&nbsp;:&nbsp;</span><span>'</span><span>0</span><span>'</span><span>)</span></span> 
<a id="x1-49030r15"></a><span>15</span> 
<a id="x1-49032r16"></a><span>16</span><span id="textcolor2296"><span>static</span></span><span>&nbsp;</span><span id="textcolor2297"><span>void</span></span><span>&nbsp;atomic_add_subtract(</span><span id="textcolor2298"><span>void</span></span><span>)</span> 
<a id="x1-49034r17"></a><span>17</span><span>{</span> 
<a id="x1-49036r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_t&nbsp;debbie;</span> 
<a id="x1-49038r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_t&nbsp;chris&nbsp;=&nbsp;ATOMIC_INIT(50);</span> 
<a id="x1-49040r20"></a><span>20</span> 
<a id="x1-49042r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_set(&amp;debbie,&nbsp;45);</span> 
<a id="x1-49044r22"></a><span>22</span> 
<a id="x1-49046r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2299"><span>/*&nbsp;subtract&nbsp;one&nbsp;*/</span></span> 
<a id="x1-49048r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_dec(&amp;debbie);</span> 
<a id="x1-49050r25"></a><span>25</span> 
<a id="x1-49052r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_add(7,&nbsp;&amp;debbie);</span> 
<a id="x1-49054r27"></a><span>27</span> 
<a id="x1-49056r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2300"><span>/*&nbsp;add&nbsp;one&nbsp;*/</span></span> 
<a id="x1-49058r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_inc(&amp;debbie);</span> 
<a id="x1-49060r30"></a><span>30</span> 
<a id="x1-49062r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2301"><span>"chris:&nbsp;%d,&nbsp;debbie:&nbsp;%d</span></span><span id="textcolor2302"><span>\n</span></span><span id="textcolor2303"><span>"</span></span><span>,&nbsp;atomic_read(&amp;chris),</span> 
<a id="x1-49064r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atomic_read(&amp;debbie));</span> 
<a id="x1-49066r33"></a><span>33</span><span>}</span> 
<a id="x1-49068r34"></a><span>34</span> 
<a id="x1-49070r35"></a><span>35</span><span id="textcolor2304"><span>static</span></span><span>&nbsp;</span><span id="textcolor2305"><span>void</span></span><span>&nbsp;atomic_bitwise(</span><span id="textcolor2306"><span>void</span></span><span>)</span> 
<a id="x1-49072r36"></a><span>36</span><span>{</span> 
<a id="x1-49074r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2307"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2308"><span>long</span></span><span>&nbsp;word&nbsp;=&nbsp;0;</span> 
<a id="x1-49076r38"></a><span>38</span> 
<a id="x1-49078r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2309"><span>"Bits&nbsp;0:&nbsp;"</span></span><span>&nbsp;BYTE_TO_BINARY_PATTERN,&nbsp;BYTE_TO_BINARY(word));</span> 
<a id="x1-49080r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;set_bit(3,&nbsp;&amp;word);</span> 
<a id="x1-49082r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;set_bit(5,&nbsp;&amp;word);</span> 
<a id="x1-49084r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2310"><span>"Bits&nbsp;1:&nbsp;"</span></span><span>&nbsp;BYTE_TO_BINARY_PATTERN,&nbsp;BYTE_TO_BINARY(word));</span> 
<a id="x1-49086r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;clear_bit(5,&nbsp;&amp;word);</span> 
<a id="x1-49088r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2311"><span>"Bits&nbsp;2:&nbsp;"</span></span><span>&nbsp;BYTE_TO_BINARY_PATTERN,&nbsp;BYTE_TO_BINARY(word));</span> 
<a id="x1-49090r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;change_bit(3,&nbsp;&amp;word);</span> 
<a id="x1-49092r46"></a><span>46</span> 
<a id="x1-49094r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2312"><span>"Bits&nbsp;3:&nbsp;"</span></span><span>&nbsp;BYTE_TO_BINARY_PATTERN,&nbsp;BYTE_TO_BINARY(word));</span> 
<a id="x1-49096r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2313"><span>if</span></span><span>&nbsp;(test_and_set_bit(3,&nbsp;&amp;word))</span> 
<a id="x1-49098r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2314"><span>"wrong</span></span><span id="textcolor2315"><span>\n</span></span><span id="textcolor2316"><span>"</span></span><span>);</span> 
<a id="x1-49100r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2317"><span>"Bits&nbsp;4:&nbsp;"</span></span><span>&nbsp;BYTE_TO_BINARY_PATTERN,&nbsp;BYTE_TO_BINARY(word));</span> 
<a id="x1-49102r51"></a><span>51</span> 
<a id="x1-49104r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;word&nbsp;=&nbsp;255;</span> 
<a id="x1-49106r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2318"><span>"Bits&nbsp;5:&nbsp;"</span></span><span>&nbsp;BYTE_TO_BINARY_PATTERN&nbsp;</span><span id="textcolor2319"><span>"</span></span><span id="textcolor2320"><span>\n</span></span><span id="textcolor2321"><span>"</span></span><span>,&nbsp;BYTE_TO_BINARY(word));</span> 
<a id="x1-49108r54"></a><span>54</span><span>}</span> 
<a id="x1-49110r55"></a><span>55</span> 
<a id="x1-49112r56"></a><span>56</span><span id="textcolor2322"><span>static</span></span><span>&nbsp;</span><span id="textcolor2323"><span>int</span></span><span>&nbsp;__init&nbsp;example_atomic_init(</span><span id="textcolor2324"><span>void</span></span><span>)</span> 
<a id="x1-49114r57"></a><span>57</span><span>{</span> 
<a id="x1-49116r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2325"><span>"example_atomic&nbsp;started</span></span><span id="textcolor2326"><span>\n</span></span><span id="textcolor2327"><span>"</span></span><span>);</span> 
<a id="x1-49118r59"></a><span>59</span> 
<a id="x1-49120r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_add_subtract();</span> 
<a id="x1-49122r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_bitwise();</span> 
<a id="x1-49124r62"></a><span>62</span> 
<a id="x1-49126r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2328"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-49128r64"></a><span>64</span><span>}</span> 
<a id="x1-49130r65"></a><span>65</span> 
<a id="x1-49132r66"></a><span>66</span><span id="textcolor2329"><span>static</span></span><span>&nbsp;</span><span id="textcolor2330"><span>void</span></span><span>&nbsp;__exit&nbsp;example_atomic_exit(</span><span id="textcolor2331"><span>void</span></span><span>)</span> 
<a id="x1-49134r67"></a><span>67</span><span>{</span> 
<a id="x1-49136r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2332"><span>"example_atomic&nbsp;exit</span></span><span id="textcolor2333"><span>\n</span></span><span id="textcolor2334"><span>"</span></span><span>);</span> 
<a id="x1-49138r69"></a><span>69</span><span>}</span> 
<a id="x1-49140r70"></a><span>70</span> 
<a id="x1-49142r71"></a><span>71</span><span>module_init(example_atomic_init);</span> 
<a id="x1-49144r72"></a><span>72</span><span>module_exit(example_atomic_exit);</span> 
<a id="x1-49146r73"></a><span>73</span> 
<a id="x1-49148r74"></a><span>74</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2335"><span>"Atomic&nbsp;operations&nbsp;example"</span></span><span>);</span> 
<a id="x1-49150r75"></a><span>75</span><span>MODULE_LICENSE(</span><span id="textcolor2336"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1728 --><p>   Before the C11 standard adopts the built-in atomic types, the kernel already
provided a small set of atomic types by using a bunch of tricky architecture-specific
codes. Implementing the atomic types by C11 atomics may allow the kernel to throw
away the architecture-specific codes and letting the kernel code be more friendly to
the people who understand the standard. But there are some problems, such as the
memory model of the kernel doesn’t match the model formed by the C11 atomics.
For further details, see: </p>
     <ul>
     <li><a href="https://www.kernel.org/doc/Documentation/atomic_t.txt">kernel documentation of atomic types</a>
     </li>
     <li><a href="https://lwn.net/Articles/691128/">Time to move to C11 atomics?</a>
     </li>
     <li><a href="https://lwn.net/Articles/698315/">Atomic usage patterns in the kernel</a></li></ul>
<!-- l. 1739 -->
   <h3 id="replacing-print-macros"><span>13   </span> <a id="x1-5000013"></a>Replacing Print Macros</h3>
                                                                  

                                                                  
<!-- l. 1741 -->
   <h4 id="replacement"><span>13.1   </span> <a id="x1-5100013.1"></a>Replacement</h4>
<!-- l. 1743 --><p>In Section <a href="#before-we-begin">1.7<!-- tex4ht:ref: sec:preparation  --></a>, it was noted that the X Window System and kernel module
programming are not conducive to integration. This remains valid during the
development of kernel modules. However, in practical scenarios, the necessity
emerges to relay messages to the tty (teletype) originating the module load
command.
</p><!-- l. 1747 --><p>   The term “tty” originates from <span>teletype</span>, which initially referred to a combined
keyboard-printer for Unix system communication. Today, it signifies a text stream
abstraction employed by Unix programs, encompassing physical terminals, xterms in
X displays, and network connections like SSH.
</p><!-- l. 1751 --><p>   To achieve this, the “current” pointer is leveraged to access the active task’s tty
structure. Within this structure lies a pointer to a string write function, facilitating
the string’s transmission to the tty.
</p><!-- l. 1 -->
   <pre id="fancyvrb73"><a id="x1-51002r1"></a><span>1</span><span id="textcolor2337"><span>/*</span></span> 
<a id="x1-51004r2"></a><span>2</span><span id="textcolor2338"><span>&nbsp;*&nbsp;print_string.c&nbsp;-&nbsp;Send&nbsp;output&nbsp;to&nbsp;the&nbsp;tty&nbsp;we</span><span>'</span><span>re&nbsp;running&nbsp;on,&nbsp;regardless&nbsp;if</span></span> 
<a id="x1-51006r3"></a><span>3</span><span id="textcolor2339"><span>&nbsp;*&nbsp;it&nbsp;is&nbsp;through&nbsp;X11,&nbsp;telnet,&nbsp;etc.&nbsp;&nbsp;We&nbsp;do&nbsp;this&nbsp;by&nbsp;printing&nbsp;the&nbsp;string&nbsp;to&nbsp;the</span></span> 
<a id="x1-51008r4"></a><span>4</span><span id="textcolor2340"><span>&nbsp;*&nbsp;tty&nbsp;associated&nbsp;with&nbsp;the&nbsp;current&nbsp;task.</span></span> 
<a id="x1-51010r5"></a><span>5</span><span id="textcolor2341"><span>&nbsp;*/</span></span> 
<a id="x1-51012r6"></a><span>6</span><span id="textcolor2342"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2343"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-51014r7"></a><span>7</span><span id="textcolor2344"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2345"><span>&lt;linux/kernel.h&gt;</span></span> 
<a id="x1-51016r8"></a><span>8</span><span id="textcolor2346"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2347"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-51018r9"></a><span>9</span><span id="textcolor2348"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2349"><span>&lt;linux/sched.h&gt;&nbsp;/*&nbsp;For&nbsp;current&nbsp;*/</span></span> 
<a id="x1-51020r10"></a><span>10</span><span id="textcolor2350"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2351"><span>&lt;linux/tty.h&gt;&nbsp;/*&nbsp;For&nbsp;the&nbsp;tty&nbsp;declarations&nbsp;*/</span></span> 
<a id="x1-51022r11"></a><span>11</span> 
<a id="x1-51024r12"></a><span>12</span><span id="textcolor2352"><span>static</span></span><span>&nbsp;</span><span id="textcolor2353"><span>void</span></span><span>&nbsp;print_string(</span><span id="textcolor2354"><span>char</span></span><span>&nbsp;*str)</span> 
<a id="x1-51026r13"></a><span>13</span><span>{</span> 
<a id="x1-51028r14"></a><span>14</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2355"><span>/*&nbsp;The&nbsp;tty&nbsp;for&nbsp;the&nbsp;current&nbsp;task&nbsp;*/</span></span> 
<a id="x1-51030r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2356"><span>struct</span></span><span>&nbsp;tty_struct&nbsp;*my_tty&nbsp;=&nbsp;get_current_tty();</span> 
<a id="x1-51032r16"></a><span>16</span> 
<a id="x1-51034r17"></a><span>17</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2357"><span>/*&nbsp;If&nbsp;my_tty&nbsp;is&nbsp;NULL,&nbsp;the&nbsp;current&nbsp;task&nbsp;has&nbsp;no&nbsp;tty&nbsp;you&nbsp;can&nbsp;print&nbsp;to&nbsp;(i.e.,</span></span> 
<a id="x1-51036r18"></a><span>18</span><span id="textcolor2358"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;daemon).&nbsp;If&nbsp;so,&nbsp;there&nbsp;is&nbsp;nothing&nbsp;we&nbsp;can&nbsp;do.</span></span> 
<a id="x1-51038r19"></a><span>19</span><span id="textcolor2359"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-51040r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2360"><span>if</span></span><span>&nbsp;(my_tty)&nbsp;{</span> 
<a id="x1-51042r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2361"><span>const</span></span><span>&nbsp;</span><span id="textcolor2362"><span>struct</span></span><span>&nbsp;tty_operations&nbsp;*ttyops&nbsp;=&nbsp;my_tty-&gt;driver-&gt;ops;</span> 
<a id="x1-51044r22"></a><span>22</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2363"><span>/*&nbsp;my_tty-&gt;driver&nbsp;is&nbsp;a&nbsp;struct&nbsp;which&nbsp;holds&nbsp;the&nbsp;tty</span><span>'</span><span>s&nbsp;functions,</span></span> 
<a id="x1-51046r23"></a><span>23</span><span id="textcolor2364"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;one&nbsp;of&nbsp;which&nbsp;(write)&nbsp;is&nbsp;used&nbsp;to&nbsp;write&nbsp;strings&nbsp;to&nbsp;the&nbsp;tty.</span></span> 
<a id="x1-51048r24"></a><span>24</span><span id="textcolor2365"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;It&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;take&nbsp;a&nbsp;string&nbsp;either&nbsp;from&nbsp;the&nbsp;user</span><span>'</span><span>s&nbsp;or</span></span> 
<a id="x1-51050r25"></a><span>25</span><span id="textcolor2366"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;kernel</span><span>'</span><span>s&nbsp;memory&nbsp;segment.</span></span> 
<a id="x1-51052r26"></a><span>26</span><span id="textcolor2367"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span></span> 
<a id="x1-51054r27"></a><span>27</span><span id="textcolor2368"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;function</span><span>'</span><span>s&nbsp;1st&nbsp;parameter&nbsp;is&nbsp;the&nbsp;tty&nbsp;to&nbsp;write&nbsp;to,&nbsp;because&nbsp;the</span></span> 
<a id="x1-51056r28"></a><span>28</span><span id="textcolor2369"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;same&nbsp;function&nbsp;would&nbsp;normally&nbsp;be&nbsp;used&nbsp;for&nbsp;all&nbsp;tty</span><span>'</span><span>s&nbsp;of&nbsp;a&nbsp;certain</span></span> 
<a id="x1-51058r29"></a><span>29</span><span id="textcolor2370"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;type.</span></span> 
<a id="x1-51060r30"></a><span>30</span><span id="textcolor2371"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;2nd&nbsp;parameter&nbsp;is&nbsp;a&nbsp;pointer&nbsp;to&nbsp;a&nbsp;string.</span></span> 
<a id="x1-51062r31"></a><span>31</span><span id="textcolor2372"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;3rd&nbsp;parameter&nbsp;is&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;string.</span></span> 
<a id="x1-51064r32"></a><span>32</span><span id="textcolor2373"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span></span> 
<a id="x1-51066r33"></a><span>33</span><span id="textcolor2374"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;As&nbsp;you&nbsp;will&nbsp;see&nbsp;below,&nbsp;sometimes&nbsp;it</span><span>'</span><span>s&nbsp;necessary&nbsp;to&nbsp;use</span></span> 
<a id="x1-51068r34"></a><span>34</span><span id="textcolor2375"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;preprocessor&nbsp;stuff&nbsp;to&nbsp;create&nbsp;code&nbsp;that&nbsp;works&nbsp;for&nbsp;different</span></span> 
<a id="x1-51070r35"></a><span>35</span><span id="textcolor2376"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;kernel&nbsp;versions.&nbsp;The&nbsp;(naive)&nbsp;approach&nbsp;we</span><span>'</span><span>ve&nbsp;taken&nbsp;here&nbsp;does&nbsp;not</span></span> 
<a id="x1-51072r36"></a><span>36</span><span id="textcolor2377"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;scale&nbsp;well.&nbsp;The&nbsp;right&nbsp;way&nbsp;to&nbsp;deal&nbsp;with&nbsp;this&nbsp;is&nbsp;described&nbsp;in</span></span> 
<a id="x1-51074r37"></a><span>37</span><span id="textcolor2378"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;section&nbsp;2&nbsp;of</span></span> 
<a id="x1-51076r38"></a><span>38</span><span id="textcolor2379"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;linux/Documentation/SubmittingPatches</span></span> 
<a id="x1-51078r39"></a><span>39</span><span id="textcolor2380"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-51080r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ttyops-&gt;write)(my_tty,&nbsp;</span><span id="textcolor2381"><span>/*&nbsp;The&nbsp;tty&nbsp;itself&nbsp;*/</span></span> 
<a id="x1-51082r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str,&nbsp;</span><span id="textcolor2382"><span>/*&nbsp;String&nbsp;*/</span></span> 
<a id="x1-51084r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strlen(str));&nbsp;</span><span id="textcolor2383"><span>/*&nbsp;Length&nbsp;*/</span></span> 
<a id="x1-51086r43"></a><span>43</span> 
<a id="x1-51088r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2384"><span>/*&nbsp;ttys&nbsp;were&nbsp;originally&nbsp;hardware&nbsp;devices,&nbsp;which&nbsp;(usually)&nbsp;strictly</span></span> 
<a id="x1-51090r45"></a><span>45</span><span id="textcolor2385"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;followed&nbsp;the&nbsp;ASCII&nbsp;standard.&nbsp;In&nbsp;ASCII,&nbsp;to&nbsp;move&nbsp;to&nbsp;a&nbsp;new&nbsp;line&nbsp;you</span></span> 
<a id="x1-51092r46"></a><span>46</span><span id="textcolor2386"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;need&nbsp;two&nbsp;characters,&nbsp;a&nbsp;carriage&nbsp;return&nbsp;and&nbsp;a&nbsp;line&nbsp;feed.&nbsp;On&nbsp;Unix,</span></span> 
<a id="x1-51094r47"></a><span>47</span><span id="textcolor2387"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;ASCII&nbsp;line&nbsp;feed&nbsp;is&nbsp;used&nbsp;for&nbsp;both&nbsp;purposes&nbsp;-&nbsp;so&nbsp;we&nbsp;can&nbsp;not</span></span> 
<a id="x1-51096r48"></a><span>48</span><span id="textcolor2388"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;just&nbsp;use&nbsp;\n,&nbsp;because&nbsp;it&nbsp;would&nbsp;not&nbsp;have&nbsp;a&nbsp;carriage&nbsp;return&nbsp;and&nbsp;the</span></span> 
<a id="x1-51098r49"></a><span>49</span><span id="textcolor2389"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;next&nbsp;line&nbsp;will&nbsp;start&nbsp;at&nbsp;the&nbsp;column&nbsp;right&nbsp;after&nbsp;the&nbsp;line&nbsp;feed.</span></span> 
<a id="x1-51100r50"></a><span>50</span><span id="textcolor2390"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span></span> 
<a id="x1-51102r51"></a><span>51</span><span id="textcolor2391"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;is&nbsp;why&nbsp;text&nbsp;files&nbsp;are&nbsp;different&nbsp;between&nbsp;Unix&nbsp;and&nbsp;MS&nbsp;Windows.</span></span> 
<a id="x1-51104r52"></a><span>52</span><span id="textcolor2392"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;In&nbsp;CP/M&nbsp;and&nbsp;derivatives,&nbsp;like&nbsp;MS-DOS&nbsp;and&nbsp;MS&nbsp;Windows,&nbsp;the&nbsp;ASCII</span></span> 
<a id="x1-51106r53"></a><span>53</span><span id="textcolor2393"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;standard&nbsp;was&nbsp;strictly&nbsp;adhered&nbsp;to,&nbsp;and&nbsp;therefore&nbsp;a&nbsp;newline&nbsp;requires</span></span> 
<a id="x1-51108r54"></a><span>54</span><span id="textcolor2394"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;both&nbsp;a&nbsp;LF&nbsp;and&nbsp;a&nbsp;CR.</span></span> 
<a id="x1-51110r55"></a><span>55</span><span id="textcolor2395"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-51112r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ttyops-&gt;write)(my_tty,&nbsp;</span><span id="textcolor2396"><span>"</span></span><span id="textcolor2397"><span>\015\012</span></span><span id="textcolor2398"><span>"</span></span><span>,&nbsp;2);</span> 
<a id="x1-51114r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-51116r58"></a><span>58</span><span>}</span> 
<a id="x1-51118r59"></a><span>59</span> 
<a id="x1-51120r60"></a><span>60</span><span id="textcolor2399"><span>static</span></span><span>&nbsp;</span><span id="textcolor2400"><span>int</span></span><span>&nbsp;__init&nbsp;print_string_init(</span><span id="textcolor2401"><span>void</span></span><span>)</span> 
<a id="x1-51122r61"></a><span>61</span><span>{</span> 
<a id="x1-51124r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;print_string(</span><span id="textcolor2402"><span>"The&nbsp;module&nbsp;has&nbsp;been&nbsp;inserted.&nbsp;&nbsp;Hello&nbsp;world!"</span></span><span>);</span> 
<a id="x1-51126r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2403"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-51128r64"></a><span>64</span><span>}</span> 
<a id="x1-51130r65"></a><span>65</span> 
<a id="x1-51132r66"></a><span>66</span><span id="textcolor2404"><span>static</span></span><span>&nbsp;</span><span id="textcolor2405"><span>void</span></span><span>&nbsp;__exit&nbsp;print_string_exit(</span><span id="textcolor2406"><span>void</span></span><span>)</span> 
<a id="x1-51134r67"></a><span>67</span><span>{</span> 
<a id="x1-51136r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;print_string(</span><span id="textcolor2407"><span>"The&nbsp;module&nbsp;has&nbsp;been&nbsp;removed.&nbsp;&nbsp;Farewell&nbsp;world!"</span></span><span>);</span> 
<a id="x1-51138r69"></a><span>69</span><span>}</span> 
<a id="x1-51140r70"></a><span>70</span> 
<a id="x1-51142r71"></a><span>71</span><span>module_init(print_string_init);</span> 
<a id="x1-51144r72"></a><span>72</span><span>module_exit(print_string_exit);</span> 
<a id="x1-51146r73"></a><span>73</span> 
<a id="x1-51148r74"></a><span>74</span><span>MODULE_LICENSE(</span><span id="textcolor2408"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1756 -->
   <h4 id="flashing-keyboard-leds"><span>13.2   </span> <a id="x1-5200013.2"></a>Flashing keyboard LEDs</h4>
<!-- l. 1758 --><p>In certain conditions, you may desire a simpler and more direct way to communicate
to the external world. Flashing keyboard LEDs can be such a solution: It is an
immediate way to attract attention or to display a status condition. Keyboard LEDs
are present on every hardware, they are always visible, they do not need any setup,
and their use is rather simple and non-intrusive, compared to writing to a tty or a
file.
</p><!-- l. 1762 --><p>   From v4.14 to v4.15, the timer API made a series of changes
to improve memory safety. A buffer overflow in the area of a
<code> <span>timer_list</span>
</code> structure may be able to overwrite the
<code> <span>function</span>
</code> and <code>  <span>data</span>
</code> fields, providing the attacker with a way to use return-oriented programming (ROP)
to call arbitrary functions within the kernel. Also, the function prototype of the callback,
containing a <code>  <span id="textcolor2409"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2410"><span>long</span></span>
</code> argument, will prevent work from any type checking. Furthermore, the function prototype
with <code>  <span id="textcolor2411"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2412"><span>long</span></span>
</code> argument may be an obstacle to the forward-edge protection of <span>control-flow integrity</span>.
Thus, it is better to use a unique prototype to separate from the cluster that takes an
<code> <span id="textcolor2413"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2414"><span>long</span></span>
</code> argument. The timer callback should be passed a pointer to the
<code> <span>timer_list</span>
                                                                  

                                                                  
</code> structure rather than an <code>  <span id="textcolor2415"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2416"><span>long</span></span>
</code> argument. Then, it wraps all the information the callback needs, including the
<code> <span>timer_list</span>
</code> structure, into a larger structure, and it can use the
<code> <span>container_of</span>
</code> macro instead of the <code>  <span id="textcolor2417"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2418"><span>long</span></span>
</code> value. For more information see: <a href="https://lwn.net/Articles/735887/">Improving the kernel timers API</a>.
</p><!-- l. 1771 --><p>   Before Linux v4.14, <code>  <span>setup_timer</span>
</code> was used to initialize the timer and the
<code> <span>timer_list</span>
</code> structure looked like: 
</p>
   <pre id="fancyvrb74"><a id="x1-52025r1"></a><span>1</span><span id="textcolor2419"><span>struct</span></span><span>&nbsp;timer_list&nbsp;{</span> 
<a id="x1-52027r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2420"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2421"><span>long</span></span><span>&nbsp;expires;</span> 
<a id="x1-52029r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2422"><span>void</span></span><span>&nbsp;(*function)(</span><span id="textcolor2423"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2424"><span>long</span></span><span>);</span> 
<a id="x1-52031r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2425"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2426"><span>long</span></span><span>&nbsp;data;</span> 
<a id="x1-52033r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;u32&nbsp;flags;</span> 
<a id="x1-52035r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2427"><span>/*&nbsp;...&nbsp;*/</span></span> 
<a id="x1-52037r7"></a><span>7</span><span>};</span> 
<a id="x1-52039r8"></a><span>8</span> 
<a id="x1-52041r9"></a><span>9</span><span id="textcolor2428"><span>void</span></span><span>&nbsp;setup_timer(</span><span id="textcolor2429"><span>struct</span></span><span>&nbsp;timer_list&nbsp;*timer,&nbsp;</span><span id="textcolor2430"><span>void</span></span><span>&nbsp;(*callback)(</span><span id="textcolor2431"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2432"><span>long</span></span><span>),</span> 
<a id="x1-52043r10"></a><span>10</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2433"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2434"><span>long</span></span><span>&nbsp;data);</span></pre>
<!-- l. 1785 --><p>   Since Linux v4.14, <code>  <span>timer_setup</span>
</code> is adopted and the kernel step by step converting to
<code> <span>timer_setup</span>
</code> from <code>  <span>setup_timer</span>
</code>. One of the reasons why API was changed is it need to coexist with the old version interface.
Moreover, the <code>  <span>timer_setup</span>
</code> was implemented by <code>  <span>setup_timer</span>
</code> at first. 
</p>
   <pre id="fancyvrb75"><a id="x1-52052r1"></a><span>1</span><span id="textcolor2435"><span>void</span></span><span>&nbsp;timer_setup(</span><span id="textcolor2436"><span>struct</span></span><span>&nbsp;timer_list&nbsp;*timer,</span> 
<a id="x1-52054r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2437"><span>void</span></span><span>&nbsp;(*callback)(</span><span id="textcolor2438"><span>struct</span></span><span>&nbsp;timer_list&nbsp;*),&nbsp;</span><span id="textcolor2439"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2440"><span>int</span></span><span>&nbsp;flags);</span></pre>
<!-- l. 1793 --><p>   The <code>  <span>setup_timer</span>
</code> was then removed since v4.15. As a result, the
<code> <span>timer_list</span>
</code> structure had changed to the following. 
</p>
   <pre id="fancyvrb76"><a id="x1-52064r1"></a><span>1</span><span id="textcolor2441"><span>struct</span></span><span>&nbsp;timer_list&nbsp;{</span> 
<a id="x1-52066r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2442"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2443"><span>long</span></span><span>&nbsp;expires;</span> 
<a id="x1-52068r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2444"><span>void</span></span><span>&nbsp;(*function)(</span><span id="textcolor2445"><span>struct</span></span><span>&nbsp;timer_list&nbsp;*);</span> 
<a id="x1-52070r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;u32&nbsp;flags;</span> 
<a id="x1-52072r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2446"><span>/*&nbsp;...&nbsp;*/</span></span> 
<a id="x1-52074r6"></a><span>6</span><span>};</span></pre>
<!-- l. 1804 --><p>   The following source code illustrates a minimal kernel module which, when
loaded, starts blinking the keyboard LEDs until it is unloaded.
</p><!-- l. 1 -->
   <pre id="fancyvrb77"><a id="x1-52076r1"></a><span>1</span><span id="textcolor2447"><span>/*</span></span> 
<a id="x1-52078r2"></a><span>2</span><span id="textcolor2448"><span>&nbsp;*&nbsp;kbleds.c&nbsp;-&nbsp;Blink&nbsp;keyboard&nbsp;leds&nbsp;until&nbsp;the&nbsp;module&nbsp;is&nbsp;unloaded.</span></span> 
<a id="x1-52080r3"></a><span>3</span><span id="textcolor2449"><span>&nbsp;*/</span></span> 
<a id="x1-52082r4"></a><span>4</span> 
<a id="x1-52084r5"></a><span>5</span><span id="textcolor2450"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2451"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-52086r6"></a><span>6</span><span id="textcolor2452"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2453"><span>&lt;linux/kd.h&gt;&nbsp;/*&nbsp;For&nbsp;KDSETLED&nbsp;*/</span></span> 
<a id="x1-52088r7"></a><span>7</span><span id="textcolor2454"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2455"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-52090r8"></a><span>8</span><span id="textcolor2456"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2457"><span>&lt;linux/tty.h&gt;&nbsp;/*&nbsp;For&nbsp;tty_struct&nbsp;*/</span></span> 
<a id="x1-52092r9"></a><span>9</span><span id="textcolor2458"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2459"><span>&lt;linux/vt.h&gt;&nbsp;/*&nbsp;For&nbsp;MAX_NR_CONSOLES&nbsp;*/</span></span> 
<a id="x1-52094r10"></a><span>10</span><span id="textcolor2460"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2461"><span>&lt;linux/vt_kern.h&gt;&nbsp;/*&nbsp;for&nbsp;fg_console&nbsp;*/</span></span> 
<a id="x1-52096r11"></a><span>11</span><span id="textcolor2462"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2463"><span>&lt;linux/console_struct.h&gt;&nbsp;/*&nbsp;For&nbsp;vc_cons&nbsp;*/</span></span> 
<a id="x1-52098r12"></a><span>12</span> 
<a id="x1-52100r13"></a><span>13</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2464"><span>"Example&nbsp;module&nbsp;illustrating&nbsp;the&nbsp;use&nbsp;of&nbsp;Keyboard&nbsp;LEDs."</span></span><span>);</span> 
<a id="x1-52102r14"></a><span>14</span> 
<a id="x1-52104r15"></a><span>15</span><span id="textcolor2465"><span>static</span></span><span>&nbsp;</span><span id="textcolor2466"><span>struct</span></span><span>&nbsp;timer_list&nbsp;my_timer;</span> 
<a id="x1-52106r16"></a><span>16</span><span id="textcolor2467"><span>static</span></span><span>&nbsp;</span><span id="textcolor2468"><span>struct</span></span><span>&nbsp;tty_driver&nbsp;*my_driver;</span> 
<a id="x1-52108r17"></a><span>17</span><span id="textcolor2469"><span>static</span></span><span>&nbsp;</span><span id="textcolor2470"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2471"><span>long</span></span><span>&nbsp;kbledstatus&nbsp;=&nbsp;0;</span> 
<a id="x1-52110r18"></a><span>18</span> 
<a id="x1-52112r19"></a><span>19</span><span id="textcolor2472"><span>#define&nbsp;BLINK_DELAY&nbsp;HZ&nbsp;/&nbsp;5</span></span> 
<a id="x1-52114r20"></a><span>20</span><span id="textcolor2473"><span>#define&nbsp;ALL_LEDS_ON&nbsp;0x07</span></span> 
<a id="x1-52116r21"></a><span>21</span><span id="textcolor2474"><span>#define&nbsp;RESTORE_LEDS&nbsp;0xFF</span></span> 
<a id="x1-52118r22"></a><span>22</span> 
<a id="x1-52120r23"></a><span>23</span><span id="textcolor2475"><span>/*&nbsp;Function&nbsp;my_timer_func&nbsp;blinks&nbsp;the&nbsp;keyboard&nbsp;LEDs&nbsp;periodically&nbsp;by&nbsp;invoking</span></span> 
<a id="x1-52122r24"></a><span>24</span><span id="textcolor2476"><span>&nbsp;*&nbsp;command&nbsp;KDSETLED&nbsp;of&nbsp;ioctl()&nbsp;on&nbsp;the&nbsp;keyboard&nbsp;driver.&nbsp;To&nbsp;learn&nbsp;more&nbsp;on&nbsp;virtual</span></span> 
<a id="x1-52124r25"></a><span>25</span><span id="textcolor2477"><span>&nbsp;*&nbsp;terminal&nbsp;ioctl&nbsp;operations,&nbsp;please&nbsp;see&nbsp;file:</span></span> 
<a id="x1-52126r26"></a><span>26</span><span id="textcolor2478"><span>&nbsp;*&nbsp;&nbsp;&nbsp;drivers/tty/vt/vt_ioctl.c,&nbsp;function&nbsp;vt_ioctl().</span></span> 
<a id="x1-52128r27"></a><span>27</span><span id="textcolor2479"><span>&nbsp;*</span></span> 
<a id="x1-52130r28"></a><span>28</span><span id="textcolor2480"><span>&nbsp;*&nbsp;The&nbsp;argument&nbsp;to&nbsp;KDSETLED&nbsp;is&nbsp;alternatively&nbsp;set&nbsp;to&nbsp;7&nbsp;(thus&nbsp;causing&nbsp;the&nbsp;led</span></span> 
<a id="x1-52132r29"></a><span>29</span><span id="textcolor2481"><span>&nbsp;*&nbsp;mode&nbsp;to&nbsp;be&nbsp;set&nbsp;to&nbsp;LED_SHOW_IOCTL,&nbsp;and&nbsp;all&nbsp;the&nbsp;leds&nbsp;are&nbsp;lit)&nbsp;and&nbsp;to&nbsp;0xFF</span></span> 
<a id="x1-52134r30"></a><span>30</span><span id="textcolor2482"><span>&nbsp;*&nbsp;(any&nbsp;value&nbsp;above&nbsp;7&nbsp;switches&nbsp;back&nbsp;the&nbsp;led&nbsp;mode&nbsp;to&nbsp;LED_SHOW_FLAGS,&nbsp;thus</span></span> 
<a id="x1-52136r31"></a><span>31</span><span id="textcolor2483"><span>&nbsp;*&nbsp;the&nbsp;LEDs&nbsp;reflect&nbsp;the&nbsp;actual&nbsp;keyboard&nbsp;status).&nbsp;&nbsp;To&nbsp;learn&nbsp;more&nbsp;on&nbsp;this,</span></span> 
<a id="x1-52138r32"></a><span>32</span><span id="textcolor2484"><span>&nbsp;*&nbsp;please&nbsp;see&nbsp;file:&nbsp;drivers/tty/vt/keyboard.c,&nbsp;function&nbsp;setledstate().</span></span> 
<a id="x1-52140r33"></a><span>33</span><span id="textcolor2485"><span>&nbsp;*/</span></span> 
<a id="x1-52142r34"></a><span>34</span><span id="textcolor2486"><span>static</span></span><span>&nbsp;</span><span id="textcolor2487"><span>void</span></span><span>&nbsp;my_timer_func(</span><span id="textcolor2488"><span>struct</span></span><span>&nbsp;timer_list&nbsp;*unused)</span> 
<a id="x1-52144r35"></a><span>35</span><span>{</span> 
<a id="x1-52146r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2489"><span>struct</span></span><span>&nbsp;tty_struct&nbsp;*t&nbsp;=&nbsp;vc_cons[fg_console].d-&gt;port.tty;</span> 
<a id="x1-52148r37"></a><span>37</span> 
<a id="x1-52150r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2490"><span>if</span></span><span>&nbsp;(kbledstatus&nbsp;==&nbsp;ALL_LEDS_ON)</span> 
<a id="x1-52152r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kbledstatus&nbsp;=&nbsp;RESTORE_LEDS;</span> 
<a id="x1-52154r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2491"><span>else</span></span> 
<a id="x1-52156r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kbledstatus&nbsp;=&nbsp;ALL_LEDS_ON;</span> 
<a id="x1-52158r42"></a><span>42</span> 
<a id="x1-52160r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;(my_driver-&gt;ops-&gt;ioctl)(t,&nbsp;KDSETLED,&nbsp;kbledstatus);</span> 
<a id="x1-52162r44"></a><span>44</span> 
<a id="x1-52164r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;my_timer.expires&nbsp;=&nbsp;jiffies&nbsp;+&nbsp;BLINK_DELAY;</span> 
<a id="x1-52166r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;add_timer(&amp;my_timer);</span> 
<a id="x1-52168r47"></a><span>47</span><span>}</span> 
<a id="x1-52170r48"></a><span>48</span> 
<a id="x1-52172r49"></a><span>49</span><span id="textcolor2492"><span>static</span></span><span>&nbsp;</span><span id="textcolor2493"><span>int</span></span><span>&nbsp;__init&nbsp;kbleds_init(</span><span id="textcolor2494"><span>void</span></span><span>)</span> 
<a id="x1-52174r50"></a><span>50</span><span>{</span> 
<a id="x1-52176r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2495"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-52178r52"></a><span>52</span> 
<a id="x1-52180r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2496"><span>"kbleds:&nbsp;loading</span></span><span id="textcolor2497"><span>\n</span></span><span id="textcolor2498"><span>"</span></span><span>);</span> 
<a id="x1-52182r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2499"><span>"kbleds:&nbsp;fgconsole&nbsp;is&nbsp;%x</span></span><span id="textcolor2500"><span>\n</span></span><span id="textcolor2501"><span>"</span></span><span>,&nbsp;fg_console);</span> 
<a id="x1-52184r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2502"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;MAX_NR_CONSOLES;&nbsp;i++)&nbsp;{</span> 
<a id="x1-52186r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2503"><span>if</span></span><span>&nbsp;(!vc_cons[i].d)</span> 
<a id="x1-52188r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2504"><span>break</span></span><span>;</span> 
<a id="x1-52190r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2505"><span>"poet_atkm:&nbsp;console[%i/%i]&nbsp;#%i,&nbsp;tty&nbsp;%p</span></span><span id="textcolor2506"><span>\n</span></span><span id="textcolor2507"><span>"</span></span><span>,&nbsp;i,&nbsp;MAX_NR_CONSOLES,</span> 
<a id="x1-52192r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_cons[i].d-&gt;vc_num,&nbsp;(</span><span id="textcolor2508"><span>void</span></span><span>&nbsp;*)vc_cons[i].d-&gt;port.tty);</span> 
<a id="x1-52194r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-52196r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2509"><span>"kbleds:&nbsp;finished&nbsp;scanning&nbsp;consoles</span></span><span id="textcolor2510"><span>\n</span></span><span id="textcolor2511"><span>"</span></span><span>);</span> 
<a id="x1-52198r62"></a><span>62</span> 
<a id="x1-52200r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;my_driver&nbsp;=&nbsp;vc_cons[fg_console].d-&gt;port.tty-&gt;driver;</span> 
<a id="x1-52202r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2512"><span>"kbleds:&nbsp;tty&nbsp;driver&nbsp;name&nbsp;%s</span></span><span id="textcolor2513"><span>\n</span></span><span id="textcolor2514"><span>"</span></span><span>,&nbsp;my_driver-&gt;driver_name);</span> 
<a id="x1-52204r65"></a><span>65</span> 
<a id="x1-52206r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2515"><span>/*&nbsp;Set&nbsp;up&nbsp;the&nbsp;LED&nbsp;blink&nbsp;timer&nbsp;the&nbsp;first&nbsp;time.&nbsp;*/</span></span> 
<a id="x1-52208r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;timer_setup(&amp;my_timer,&nbsp;my_timer_func,&nbsp;0);</span> 
<a id="x1-52210r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;my_timer.expires&nbsp;=&nbsp;jiffies&nbsp;+&nbsp;BLINK_DELAY;</span> 
<a id="x1-52212r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;add_timer(&amp;my_timer);</span> 
<a id="x1-52214r70"></a><span>70</span> 
<a id="x1-52216r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2516"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-52218r72"></a><span>72</span><span>}</span> 
<a id="x1-52220r73"></a><span>73</span> 
<a id="x1-52222r74"></a><span>74</span><span id="textcolor2517"><span>static</span></span><span>&nbsp;</span><span id="textcolor2518"><span>void</span></span><span>&nbsp;__exit&nbsp;kbleds_cleanup(</span><span id="textcolor2519"><span>void</span></span><span>)</span> 
<a id="x1-52224r75"></a><span>75</span><span>{</span> 
<a id="x1-52226r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2520"><span>"kbleds:&nbsp;unloading...</span></span><span id="textcolor2521"><span>\n</span></span><span id="textcolor2522"><span>"</span></span><span>);</span> 
<a id="x1-52228r77"></a><span>77</span><span>&nbsp;&nbsp;&nbsp;&nbsp;del_timer(&amp;my_timer);</span> 
<a id="x1-52230r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;(my_driver-&gt;ops-&gt;ioctl)(vc_cons[fg_console].d-&gt;port.tty,&nbsp;KDSETLED,</span> 
<a id="x1-52232r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RESTORE_LEDS);</span> 
<a id="x1-52234r80"></a><span>80</span><span>}</span> 
<a id="x1-52236r81"></a><span>81</span> 
<a id="x1-52238r82"></a><span>82</span><span>module_init(kbleds_init);</span> 
<a id="x1-52240r83"></a><span>83</span><span>module_exit(kbleds_cleanup);</span> 
<a id="x1-52242r84"></a><span>84</span> 
<a id="x1-52244r85"></a><span>85</span><span>MODULE_LICENSE(</span><span id="textcolor2523"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1808 --><p>   If none of the examples in this chapter fit your debugging needs,
there might yet be some other tricks to try. Ever wondered what
<code> <span>CONFIG_LL_DEBUG</span>
</code> in <code>  <span>make&nbsp;menuconfig</span>
</code> is good for? If you activate that you get low level access to the serial port. While this
                                                                  

                                                                  
might not sound very powerful by itself, you can patch <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/kernel/printk.c">kernel/printk.c</a> or any other
essential syscall to print ASCII characters, thus making it possible to trace virtually
everything what your code does over a serial line. If you find yourself porting the
kernel to some new and former unsupported architecture, this is usually amongst the
first things that should be implemented. Logging over a netconsole might also be
worth a try.
</p><!-- l. 1815 --><p>   While you have seen lots of stuff that can be used to aid debugging here, there are
some things to be aware of. Debugging is almost always intrusive. Adding debug code
can change the situation enough to make the bug seem to disappear. Thus, you
should keep debug code to a minimum and make sure it does not show up in
production code.
</p><!-- l. 1819 -->
   <h3 id="scheduling-tasks"><span>14   </span> <a id="x1-5300014"></a>Scheduling Tasks</h3>
<!-- l. 1821 --><p>There are two main ways of running tasks: tasklets and work queues. Tasklets are a
quick and easy way of scheduling a single function to be run. For example, when
triggered from an interrupt, whereas work queues are more complicated but also
better suited to running multiple things in a sequence.
</p><!-- l. 1825 --><p>   It is possible that in future tasklets may be replaced by <span>threaded irqs</span>. However,
discussion about that has been ongoing since 2007 (<a href="https://lwn.net/Articles/239633">Eliminating tasklets</a>), so do
not hold your breath. See the section <a href="#interrupt-handlers1">15.1<!-- tex4ht:ref: sec:irq  --></a> if you wish to avoid the tasklet
debate.
</p><!-- l. 1829 -->
   <h4 id="tasklets"><span>14.1   </span> <a id="x1-5400014.1"></a>Tasklets</h4>
<!-- l. 1831 --><p>Here is an example tasklet module. The
<code> <span>tasklet_fn</span>
</code> function runs for a few seconds. In the meantime, execution of the
<code> <span>example_tasklet_init</span>
</code> function may continue to the exit point, depending on whether it is interrupted by
<span>softirq</span>.
</p><!-- l. 1 -->
   <pre id="fancyvrb78"><a id="x1-54004r1"></a><span>1</span><span id="textcolor2524"><span>/*</span></span> 
<a id="x1-54006r2"></a><span>2</span><span id="textcolor2525"><span>&nbsp;*&nbsp;example_tasklet.c</span></span> 
<a id="x1-54008r3"></a><span>3</span><span id="textcolor2526"><span>&nbsp;*/</span></span> 
<a id="x1-54010r4"></a><span>4</span><span id="textcolor2527"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2528"><span>&lt;linux/delay.h&gt;</span></span> 
<a id="x1-54012r5"></a><span>5</span><span id="textcolor2529"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2530"><span>&lt;linux/interrupt.h&gt;</span></span> 
<a id="x1-54014r6"></a><span>6</span><span id="textcolor2531"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2532"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-54016r7"></a><span>7</span><span id="textcolor2533"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2534"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-54018r8"></a><span>8</span> 
<a id="x1-54020r9"></a><span>9</span><span id="textcolor2535"><span>/*&nbsp;Macro&nbsp;DECLARE_TASKLET_OLD&nbsp;exists&nbsp;for&nbsp;compatibility.</span></span> 
<a id="x1-54022r10"></a><span>10</span><span id="textcolor2536"><span>&nbsp;*&nbsp;See&nbsp;https://lwn.net/Articles/830964/</span></span> 
<a id="x1-54024r11"></a><span>11</span><span id="textcolor2537"><span>&nbsp;*/</span></span> 
<a id="x1-54026r12"></a><span>12</span><span id="textcolor2538"><span>#ifndef&nbsp;DECLARE_TASKLET_OLD</span></span> 
<a id="x1-54028r13"></a><span>13</span><span id="textcolor2539"><span>#define&nbsp;DECLARE_TASKLET_OLD(arg1,&nbsp;arg2)&nbsp;DECLARE_TASKLET(arg1,&nbsp;arg2,&nbsp;0L)</span></span> 
<a id="x1-54030r14"></a><span>14</span><span id="textcolor2540"><span>#endif</span></span> 
<a id="x1-54032r15"></a><span>15</span> 
<a id="x1-54034r16"></a><span>16</span><span id="textcolor2541"><span>static</span></span><span>&nbsp;</span><span id="textcolor2542"><span>void</span></span><span>&nbsp;tasklet_fn(</span><span id="textcolor2543"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2544"><span>long</span></span><span>&nbsp;data)</span> 
<a id="x1-54036r17"></a><span>17</span><span>{</span> 
<a id="x1-54038r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2545"><span>"Example&nbsp;tasklet&nbsp;starts</span></span><span id="textcolor2546"><span>\n</span></span><span id="textcolor2547"><span>"</span></span><span>);</span> 
<a id="x1-54040r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;mdelay(5000);</span> 
<a id="x1-54042r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2548"><span>"Example&nbsp;tasklet&nbsp;ends</span></span><span id="textcolor2549"><span>\n</span></span><span id="textcolor2550"><span>"</span></span><span>);</span> 
<a id="x1-54044r21"></a><span>21</span><span>}</span> 
<a id="x1-54046r22"></a><span>22</span> 
<a id="x1-54048r23"></a><span>23</span><span id="textcolor2551"><span>static</span></span><span>&nbsp;DECLARE_TASKLET_OLD(mytask,&nbsp;tasklet_fn);</span> 
<a id="x1-54050r24"></a><span>24</span> 
<a id="x1-54052r25"></a><span>25</span><span id="textcolor2552"><span>static</span></span><span>&nbsp;</span><span id="textcolor2553"><span>int</span></span><span>&nbsp;__init&nbsp;example_tasklet_init(</span><span id="textcolor2554"><span>void</span></span><span>)</span> 
<a id="x1-54054r26"></a><span>26</span><span>{</span> 
<a id="x1-54056r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2555"><span>"tasklet&nbsp;example&nbsp;init</span></span><span id="textcolor2556"><span>\n</span></span><span id="textcolor2557"><span>"</span></span><span>);</span> 
<a id="x1-54058r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;tasklet_schedule(&amp;mytask);</span> 
<a id="x1-54060r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;mdelay(200);</span> 
<a id="x1-54062r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2558"><span>"Example&nbsp;tasklet&nbsp;init&nbsp;continues...</span></span><span id="textcolor2559"><span>\n</span></span><span id="textcolor2560"><span>"</span></span><span>);</span> 
<a id="x1-54064r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2561"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-54066r32"></a><span>32</span><span>}</span> 
<a id="x1-54068r33"></a><span>33</span> 
<a id="x1-54070r34"></a><span>34</span><span id="textcolor2562"><span>static</span></span><span>&nbsp;</span><span id="textcolor2563"><span>void</span></span><span>&nbsp;__exit&nbsp;example_tasklet_exit(</span><span id="textcolor2564"><span>void</span></span><span>)</span> 
<a id="x1-54072r35"></a><span>35</span><span>{</span> 
<a id="x1-54074r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2565"><span>"tasklet&nbsp;example&nbsp;exit</span></span><span id="textcolor2566"><span>\n</span></span><span id="textcolor2567"><span>"</span></span><span>);</span> 
<a id="x1-54076r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;tasklet_kill(&amp;mytask);</span> 
<a id="x1-54078r38"></a><span>38</span><span>}</span> 
<a id="x1-54080r39"></a><span>39</span> 
<a id="x1-54082r40"></a><span>40</span><span>module_init(example_tasklet_init);</span> 
<a id="x1-54084r41"></a><span>41</span><span>module_exit(example_tasklet_exit);</span> 
<a id="x1-54086r42"></a><span>42</span> 
<a id="x1-54088r43"></a><span>43</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2568"><span>"Tasklet&nbsp;example"</span></span><span>);</span> 
<a id="x1-54090r44"></a><span>44</span><span>MODULE_LICENSE(</span><span id="textcolor2569"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 1837 --><p>   So with this example loaded <code>  <span>dmesg</span>
</code> should show:
                                                                  

                                                                  
</p>
   <pre id="verbatim-21">tasklet&nbsp;example&nbsp;init
Example&nbsp;tasklet&nbsp;starts
Example&nbsp;tasklet&nbsp;init&nbsp;continues...
Example&nbsp;tasklet&nbsp;ends
</pre>
<!-- l. 1844 --><p>Although tasklet is easy to use, it comes with several drawbacks, and developers are
discussing about getting rid of tasklet in linux kernel. The tasklet callback
runs in atomic context, inside a software interrupt, meaning that it cannot
sleep or access user-space data, so not all work can be done in a tasklet
handler. Also, the kernel only allows one instance of any given tasklet to be
running at any given time; multiple different tasklet callbacks can run in
parallel.
</p><!-- l. 1849 --><p>   In recent kernels, tasklets can be replaced by workqueues, timers, or threaded
interrupts.<span><a href="#fn1x0" id="fn1x0-bk"><sup>1</sup></a></span><a id="x1-54092f1"></a>
While the removal of tasklets remains a longer-term goal, the current kernel contains more
than a hundred uses of tasklets. Now developers are proceeding with the API changes and
the macro <code>  <span>DECLARE_TASKLET_OLD</span>
</code> exists for compatibility. For further information, see <a href="https://lwn.net/Articles/830964/"><span>https://lwn.net/Articles/830964/</span></a>.
</p><!-- l. 1855 -->
   <h4 id="work-queues"><span>14.2   </span> <a id="x1-5500014.2"></a>Work queues</h4>
<!-- l. 1857 --><p>To add a task to the scheduler we can use a workqueue. The kernel then uses the
Completely Fair Scheduler (CFS) to execute work within the queue.
</p><!-- l. 1 -->
   <pre id="fancyvrb79"><a id="x1-55002r1"></a><span>1</span><span id="textcolor2570"><span>/*</span></span> 
<a id="x1-55004r2"></a><span>2</span><span id="textcolor2571"><span>&nbsp;*&nbsp;sched.c</span></span> 
<a id="x1-55006r3"></a><span>3</span><span id="textcolor2572"><span>&nbsp;*/</span></span> 
<a id="x1-55008r4"></a><span>4</span><span id="textcolor2573"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2574"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-55010r5"></a><span>5</span><span id="textcolor2575"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2576"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-55012r6"></a><span>6</span><span id="textcolor2577"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2578"><span>&lt;linux/workqueue.h&gt;</span></span> 
<a id="x1-55014r7"></a><span>7</span> 
<a id="x1-55016r8"></a><span>8</span><span id="textcolor2579"><span>static</span></span><span>&nbsp;</span><span id="textcolor2580"><span>struct</span></span><span>&nbsp;workqueue_struct&nbsp;*queue&nbsp;=&nbsp;NULL;</span> 
<a id="x1-55018r9"></a><span>9</span><span id="textcolor2581"><span>static</span></span><span>&nbsp;</span><span id="textcolor2582"><span>struct</span></span><span>&nbsp;work_struct&nbsp;work;</span> 
<a id="x1-55020r10"></a><span>10</span> 
<a id="x1-55022r11"></a><span>11</span><span id="textcolor2583"><span>static</span></span><span>&nbsp;</span><span id="textcolor2584"><span>void</span></span><span>&nbsp;work_handler(</span><span id="textcolor2585"><span>struct</span></span><span>&nbsp;work_struct&nbsp;*data)</span> 
<a id="x1-55024r12"></a><span>12</span><span>{</span> 
<a id="x1-55026r13"></a><span>13</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2586"><span>"work&nbsp;handler&nbsp;function.</span></span><span id="textcolor2587"><span>\n</span></span><span id="textcolor2588"><span>"</span></span><span>);</span> 
<a id="x1-55028r14"></a><span>14</span><span>}</span> 
<a id="x1-55030r15"></a><span>15</span> 
<a id="x1-55032r16"></a><span>16</span><span id="textcolor2589"><span>static</span></span><span>&nbsp;</span><span id="textcolor2590"><span>int</span></span><span>&nbsp;__init&nbsp;sched_init(</span><span id="textcolor2591"><span>void</span></span><span>)</span> 
<a id="x1-55034r17"></a><span>17</span><span>{</span> 
<a id="x1-55036r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;queue&nbsp;=&nbsp;alloc_workqueue(</span><span id="textcolor2592"><span>"HELLOWORLD"</span></span><span>,&nbsp;WQ_UNBOUND,&nbsp;1);</span> 
<a id="x1-55038r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;INIT_WORK(&amp;work,&nbsp;work_handler);</span> 
<a id="x1-55040r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;queue_work(queue,&nbsp;&amp;work);</span> 
<a id="x1-55042r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2593"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-55044r22"></a><span>22</span><span>}</span> 
<a id="x1-55046r23"></a><span>23</span> 
<a id="x1-55048r24"></a><span>24</span><span id="textcolor2594"><span>static</span></span><span>&nbsp;</span><span id="textcolor2595"><span>void</span></span><span>&nbsp;__exit&nbsp;sched_exit(</span><span id="textcolor2596"><span>void</span></span><span>)</span> 
<a id="x1-55050r25"></a><span>25</span><span>{</span> 
<a id="x1-55052r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;destroy_workqueue(queue);</span> 
<a id="x1-55054r27"></a><span>27</span><span>}</span> 
<a id="x1-55056r28"></a><span>28</span> 
<a id="x1-55058r29"></a><span>29</span><span>module_init(sched_init);</span> 
<a id="x1-55060r30"></a><span>30</span><span>module_exit(sched_exit);</span> 
<a id="x1-55062r31"></a><span>31</span> 
<a id="x1-55064r32"></a><span>32</span><span>MODULE_LICENSE(</span><span id="textcolor2597"><span>"GPL"</span></span><span>);</span> 
<a id="x1-55066r33"></a><span>33</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2598"><span>"Workqueue&nbsp;example"</span></span><span>);</span></pre>
<!-- l. 1862 -->
   <h3 id="interrupt-handlers"><span>15   </span> <a id="x1-5600015"></a>Interrupt Handlers</h3>
<!-- l. 1864 -->
                                                                  

                                                                  
   <h4 id="interrupt-handlers1"><span>15.1   </span> <a id="x1-5700015.1"></a>Interrupt Handlers</h4>
<!-- l. 1866 --><p>Except for the last chapter, everything we did in the kernel so far we have done as a
response to a process asking for it, either by dealing with a special file, sending an
<code> <span>ioctl()</span>
</code>, or issuing a system call. But the job of the kernel is not just to respond to process
requests. Another job, which is every bit as important, is to speak to the hardware
connected to the machine.
</p><!-- l. 1870 --><p>   There are two types of interaction between the CPU and the rest of the
computer’s hardware. The first type is when the CPU gives orders to the hardware,
the other is when the hardware needs to tell the CPU something. The second, called
interrupts, is much harder to implement because it has to be dealt with when
convenient for the hardware, not the CPU. Hardware devices typically have a very
small amount of RAM, and if you do not read their information when available, it is
lost.
</p><!-- l. 1875 --><p>   Under Linux, hardware interrupts are called IRQ’s (Interrupt ReQuests). There
are two types of IRQ’s, short and long. A short IRQ is one which is expected to take
a very short period of time, during which the rest of the machine will be blocked and
no other interrupts will be handled. A long IRQ is one which can take longer, and
during which other interrupts may occur (but not interrupts from the same
device). If at all possible, it is better to declare an interrupt handler to be
long.
</p><!-- l. 1881 --><p>   When the CPU receives an interrupt, it stops whatever it is doing (unless it is
processing a more important interrupt, in which case it will deal with this one only
when the more important one is done), saves certain parameters on the stack and
calls the interrupt handler. This means that certain things are not allowed in the
interrupt handler itself, because the system is in an unknown state. Linux kernel
solves the problem by splitting interrupt handling into two parts. The first part
executes right away and masks the interrupt line. Hardware interrupts must be
handled quickly, and that is why we need the second part to handle the
heavy work deferred from an interrupt handler. Historically, BH (Linux
naming for <span>Bottom Halves</span>) statistically book-keeps the deferred functions.
<span>Softirq </span>and its higher level abstraction, <span>Tasklet</span>, replace BH since Linux
2.3.
</p><!-- l. 1891 --><p>   The way to implement this is to call
<code> <span>request_irq()</span>
</code> to get your interrupt handler called when the relevant IRQ is received.
</p><!-- l. 1893 --><p>   In practice IRQ handling can be a bit more complex. Hardware is often designed
in a way that chains two interrupt controllers, so that all the IRQs from
interrupt controller B are cascaded to a certain IRQ from interrupt controller A.
Of course, that requires that the kernel finds out which IRQ it really was
afterwards and that adds overhead. Other architectures offer some special,
very low overhead, so called "fast IRQ" or FIQs. To take advantage of them
requires handlers to be written in assembly language, so they do not really
fit into the kernel. They can be made to work similar to the others, but
after that procedure, they are no longer any faster than "common" IRQs.
SMP enabled kernels running on systems with more than one processor
                                                                  

                                                                  
need to solve another truckload of problems. It is not enough to know if a
certain IRQs has happened, it’s also important to know what CPU(s) it was
for. People still interested in more details, might want to refer to "APIC"
now.
</p><!-- l. 1902 --><p>   This function receives the IRQ number, the name of the function, flags, a name
for <span><span><span>/proc/interrupts</span></span></span> and a parameter to be passed to the interrupt handler.
Usually there is a certain number of IRQs available. How many IRQs there are is
hardware-dependent.
</p><!-- l. 1906 --><p>   The flags can be used for specify behaviors of the IRQ. For example, use
<code> <span>IRQF_SHARED</span>
</code> to indicate you are willing to share the IRQ with other interrupt handlers
(usually because a number of hardware devices sit on the same IRQ); use the
<code> <span>IRQF_ONESHOT</span>
</code> to indicate that the IRQ is not reenabled after the handler finished. It should be
noted that in some materials, you may encouter another set of IRQ flags named with
the <code>  <span>SA</span>
</code> prefix. For example, the <code>  <span>SA_SHIRQ</span>
</code> and the <code>  <span>SA_INTERRUPT</span>
</code>. Those are the the IRQ flags in the older kernels. They have been removed completely. Today
only the <code>  <span>IRQF</span>
</code> flags are in use. This function will only succeed if there is not already a handler on
this IRQ, or if you are both willing to share.
</p><!-- l. 1915 -->
   <h4 id="detecting-button-presses"><span>15.2   </span> <a id="x1-5800015.2"></a>Detecting button presses</h4>
<!-- l. 1917 --><p>Many popular single board computers, such as Raspberry Pi or Beagleboards, have a
bunch of GPIO pins. Attaching buttons to those and then having a button press do
something is a classic case in which you might need to use interrupts, so that instead
of having the CPU waste time and battery power polling for a change in input state,
it is better for the input to trigger the CPU to then run a particular handling
function.
</p><!-- l. 1921 --><p>   Here is an example where buttons are connected to GPIO numbers 17 and 18 and
an LED is connected to GPIO 4. You can change those numbers to whatever is
appropriate for your board.
</p><!-- l. 1 -->
   <pre id="fancyvrb80"><a id="x1-58002r1"></a><span>1</span><span id="textcolor2599"><span>/*</span></span> 
<a id="x1-58004r2"></a><span>2</span><span id="textcolor2600"><span>&nbsp;*&nbsp;intrpt.c&nbsp;-&nbsp;Handling&nbsp;GPIO&nbsp;with&nbsp;interrupts</span></span> 
<a id="x1-58006r3"></a><span>3</span><span id="textcolor2601"><span>&nbsp;*</span></span> 
<a id="x1-58008r4"></a><span>4</span><span id="textcolor2602"><span>&nbsp;*&nbsp;Based&nbsp;upon&nbsp;the&nbsp;RPi&nbsp;example&nbsp;by&nbsp;Stefan&nbsp;Wendler&nbsp;(devnull@kaltpost.de)</span></span> 
<a id="x1-58010r5"></a><span>5</span><span id="textcolor2603"><span>&nbsp;*&nbsp;from:</span></span> 
<a id="x1-58012r6"></a><span>6</span><span id="textcolor2604"><span>&nbsp;*&nbsp;&nbsp;&nbsp;https://github.com/wendlers/rpi-kmod-samples</span></span> 
<a id="x1-58014r7"></a><span>7</span><span id="textcolor2605"><span>&nbsp;*</span></span> 
<a id="x1-58016r8"></a><span>8</span><span id="textcolor2606"><span>&nbsp;*&nbsp;Press&nbsp;one&nbsp;button&nbsp;to&nbsp;turn&nbsp;on&nbsp;a&nbsp;LED&nbsp;and&nbsp;another&nbsp;to&nbsp;turn&nbsp;it&nbsp;off.</span></span> 
<a id="x1-58018r9"></a><span>9</span><span id="textcolor2607"><span>&nbsp;*/</span></span> 
<a id="x1-58020r10"></a><span>10</span> 
<a id="x1-58022r11"></a><span>11</span><span id="textcolor2608"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2609"><span>&lt;linux/gpio.h&gt;</span></span> 
<a id="x1-58024r12"></a><span>12</span><span id="textcolor2610"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2611"><span>&lt;linux/interrupt.h&gt;</span></span> 
<a id="x1-58026r13"></a><span>13</span><span id="textcolor2612"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2613"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;for&nbsp;ARRAY_SIZE()&nbsp;*/</span></span> 
<a id="x1-58028r14"></a><span>14</span><span id="textcolor2614"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2615"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-58030r15"></a><span>15</span><span id="textcolor2616"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2617"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-58032r16"></a><span>16</span> 
<a id="x1-58034r17"></a><span>17</span><span id="textcolor2618"><span>static</span></span><span>&nbsp;</span><span id="textcolor2619"><span>int</span></span><span>&nbsp;button_irqs[]&nbsp;=&nbsp;{&nbsp;-1,&nbsp;-1&nbsp;};</span> 
<a id="x1-58036r18"></a><span>18</span> 
<a id="x1-58038r19"></a><span>19</span><span id="textcolor2620"><span>/*&nbsp;Define&nbsp;GPIOs&nbsp;for&nbsp;LEDs.</span></span> 
<a id="x1-58040r20"></a><span>20</span><span id="textcolor2621"><span>&nbsp;*&nbsp;TODO:&nbsp;Change&nbsp;the&nbsp;numbers&nbsp;for&nbsp;the&nbsp;GPIO&nbsp;on&nbsp;your&nbsp;board.</span></span> 
<a id="x1-58042r21"></a><span>21</span><span id="textcolor2622"><span>&nbsp;*/</span></span> 
<a id="x1-58044r22"></a><span>22</span><span id="textcolor2623"><span>static</span></span><span>&nbsp;</span><span id="textcolor2624"><span>struct</span></span><span>&nbsp;gpio&nbsp;leds[]&nbsp;=&nbsp;{&nbsp;{&nbsp;4,&nbsp;GPIOF_OUT_INIT_LOW,&nbsp;</span><span id="textcolor2625"><span>"LED&nbsp;1"</span></span><span>&nbsp;}&nbsp;};</span> 
<a id="x1-58046r23"></a><span>23</span> 
<a id="x1-58048r24"></a><span>24</span><span id="textcolor2626"><span>/*&nbsp;Define&nbsp;GPIOs&nbsp;for&nbsp;BUTTONS</span></span> 
<a id="x1-58050r25"></a><span>25</span><span id="textcolor2627"><span>&nbsp;*&nbsp;TODO:&nbsp;Change&nbsp;the&nbsp;numbers&nbsp;for&nbsp;the&nbsp;GPIO&nbsp;on&nbsp;your&nbsp;board.</span></span> 
<a id="x1-58052r26"></a><span>26</span><span id="textcolor2628"><span>&nbsp;*/</span></span> 
<a id="x1-58054r27"></a><span>27</span><span id="textcolor2629"><span>static</span></span><span>&nbsp;</span><span id="textcolor2630"><span>struct</span></span><span>&nbsp;gpio&nbsp;buttons[]&nbsp;=&nbsp;{&nbsp;{&nbsp;17,&nbsp;GPIOF_IN,&nbsp;</span><span id="textcolor2631"><span>"LED&nbsp;1&nbsp;ON&nbsp;BUTTON"</span></span><span>&nbsp;},</span> 
<a id="x1-58056r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;18,&nbsp;GPIOF_IN,&nbsp;</span><span id="textcolor2632"><span>"LED&nbsp;1&nbsp;OFF&nbsp;BUTTON"</span></span><span>&nbsp;}&nbsp;};</span> 
<a id="x1-58058r29"></a><span>29</span> 
<a id="x1-58060r30"></a><span>30</span><span id="textcolor2633"><span>/*&nbsp;interrupt&nbsp;function&nbsp;triggered&nbsp;when&nbsp;a&nbsp;button&nbsp;is&nbsp;pressed.&nbsp;*/</span></span> 
<a id="x1-58062r31"></a><span>31</span><span id="textcolor2634"><span>static</span></span><span>&nbsp;irqreturn_t&nbsp;button_isr(</span><span id="textcolor2635"><span>int</span></span><span>&nbsp;irq,&nbsp;</span><span id="textcolor2636"><span>void</span></span><span>&nbsp;*data)</span> 
<a id="x1-58064r32"></a><span>32</span><span>{</span> 
<a id="x1-58066r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2637"><span>/*&nbsp;first&nbsp;button&nbsp;*/</span></span> 
<a id="x1-58068r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2638"><span>if</span></span><span>&nbsp;(irq&nbsp;==&nbsp;button_irqs[0]&nbsp;&amp;&amp;&nbsp;!gpio_get_value(leds[0].gpio))</span> 
<a id="x1-58070r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[0].gpio,&nbsp;1);</span> 
<a id="x1-58072r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2639"><span>/*&nbsp;second&nbsp;button&nbsp;*/</span></span> 
<a id="x1-58074r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2640"><span>else</span></span><span>&nbsp;</span><span id="textcolor2641"><span>if</span></span><span>&nbsp;(irq&nbsp;==&nbsp;button_irqs[1]&nbsp;&amp;&amp;&nbsp;gpio_get_value(leds[0].gpio))</span> 
<a id="x1-58076r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[0].gpio,&nbsp;0);</span> 
<a id="x1-58078r39"></a><span>39</span> 
<a id="x1-58080r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2642"><span>return</span></span><span>&nbsp;IRQ_HANDLED;</span> 
<a id="x1-58082r41"></a><span>41</span><span>}</span> 
<a id="x1-58084r42"></a><span>42</span> 
<a id="x1-58086r43"></a><span>43</span><span id="textcolor2643"><span>static</span></span><span>&nbsp;</span><span id="textcolor2644"><span>int</span></span><span>&nbsp;__init&nbsp;intrpt_init(</span><span id="textcolor2645"><span>void</span></span><span>)</span> 
<a id="x1-58088r44"></a><span>44</span><span>{</span> 
<a id="x1-58090r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2646"><span>int</span></span><span>&nbsp;ret&nbsp;=&nbsp;0;</span> 
<a id="x1-58092r46"></a><span>46</span> 
<a id="x1-58094r47"></a><span>47</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2647"><span>"%s</span></span><span id="textcolor2648"><span>\n</span></span><span id="textcolor2649"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-58096r48"></a><span>48</span> 
<a id="x1-58098r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2650"><span>/*&nbsp;register&nbsp;LED&nbsp;gpios&nbsp;*/</span></span> 
<a id="x1-58100r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_request_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-58102r51"></a><span>51</span> 
<a id="x1-58104r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2651"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-58106r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2652"><span>"Unable&nbsp;to&nbsp;request&nbsp;GPIOs&nbsp;for&nbsp;LEDs:&nbsp;%d</span></span><span id="textcolor2653"><span>\n</span></span><span id="textcolor2654"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-58108r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2655"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-58110r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-58112r56"></a><span>56</span> 
<a id="x1-58114r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2656"><span>/*&nbsp;register&nbsp;BUTTON&nbsp;gpios&nbsp;*/</span></span> 
<a id="x1-58116r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_request_array(buttons,&nbsp;ARRAY_SIZE(buttons));</span> 
<a id="x1-58118r59"></a><span>59</span> 
<a id="x1-58120r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2657"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-58122r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2658"><span>"Unable&nbsp;to&nbsp;request&nbsp;GPIOs&nbsp;for&nbsp;BUTTONs:&nbsp;%d</span></span><span id="textcolor2659"><span>\n</span></span><span id="textcolor2660"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-58124r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2661"><span>goto</span></span><span>&nbsp;fail1;</span> 
<a id="x1-58126r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-58128r64"></a><span>64</span> 
<a id="x1-58130r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2662"><span>"Current&nbsp;button1&nbsp;value:&nbsp;%d</span></span><span id="textcolor2663"><span>\n</span></span><span id="textcolor2664"><span>"</span></span><span>,&nbsp;gpio_get_value(buttons[0].gpio));</span> 
<a id="x1-58132r66"></a><span>66</span> 
<a id="x1-58134r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_to_irq(buttons[0].gpio);</span> 
<a id="x1-58136r68"></a><span>68</span> 
<a id="x1-58138r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2665"><span>if</span></span><span>&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-58140r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2666"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2667"><span>\n</span></span><span id="textcolor2668"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-58142r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2669"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-58144r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-58146r73"></a><span>73</span> 
<a id="x1-58148r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;button_irqs[0]&nbsp;=&nbsp;ret;</span> 
<a id="x1-58150r75"></a><span>75</span> 
<a id="x1-58152r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2670"><span>"Successfully&nbsp;requested&nbsp;BUTTON1&nbsp;IRQ&nbsp;#&nbsp;%d</span></span><span id="textcolor2671"><span>\n</span></span><span id="textcolor2672"><span>"</span></span><span>,&nbsp;button_irqs[0]);</span> 
<a id="x1-58154r77"></a><span>77</span> 
<a id="x1-58156r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;request_irq(button_irqs[0],&nbsp;button_isr,</span> 
<a id="x1-58158r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQF_TRIGGER_RISING&nbsp;|&nbsp;IRQF_TRIGGER_FALLING,</span> 
<a id="x1-58160r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2673"><span>"gpiomod#button1"</span></span><span>,&nbsp;NULL);</span> 
<a id="x1-58162r81"></a><span>81</span> 
<a id="x1-58164r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2674"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-58166r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2675"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2676"><span>\n</span></span><span id="textcolor2677"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-58168r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2678"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-58170r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-58172r86"></a><span>86</span> 
<a id="x1-58174r87"></a><span>87</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_to_irq(buttons[1].gpio);</span> 
<a id="x1-58176r88"></a><span>88</span> 
<a id="x1-58178r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2679"><span>if</span></span><span>&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-58180r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2680"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2681"><span>\n</span></span><span id="textcolor2682"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-58182r91"></a><span>91</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2683"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-58184r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-58186r93"></a><span>93</span> 
<a id="x1-58188r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;button_irqs[1]&nbsp;=&nbsp;ret;</span> 
<a id="x1-58190r95"></a><span>95</span> 
<a id="x1-58192r96"></a><span>96</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2684"><span>"Successfully&nbsp;requested&nbsp;BUTTON2&nbsp;IRQ&nbsp;#&nbsp;%d</span></span><span id="textcolor2685"><span>\n</span></span><span id="textcolor2686"><span>"</span></span><span>,&nbsp;button_irqs[1]);</span> 
<a id="x1-58194r97"></a><span>97</span> 
<a id="x1-58196r98"></a><span>98</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;request_irq(button_irqs[1],&nbsp;button_isr,</span> 
<a id="x1-58198r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQF_TRIGGER_RISING&nbsp;|&nbsp;IRQF_TRIGGER_FALLING,</span> 
<a id="x1-58200r100"></a><span>100</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2687"><span>"gpiomod#button2"</span></span><span>,&nbsp;NULL);</span> 
<a id="x1-58202r101"></a><span>101</span> 
<a id="x1-58204r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2688"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-58206r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2689"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2690"><span>\n</span></span><span id="textcolor2691"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-58208r104"></a><span>104</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2692"><span>goto</span></span><span>&nbsp;fail3;</span> 
<a id="x1-58210r105"></a><span>105</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-58212r106"></a><span>106</span> 
<a id="x1-58214r107"></a><span>107</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2693"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-58216r108"></a><span>108</span> 
<a id="x1-58218r109"></a><span>109</span><span id="textcolor2694"><span>/*&nbsp;cleanup&nbsp;what&nbsp;has&nbsp;been&nbsp;setup&nbsp;so&nbsp;far&nbsp;*/</span></span> 
<a id="x1-58220r110"></a><span>110</span><span>fail3:</span> 
<a id="x1-58222r111"></a><span>111</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[0],&nbsp;NULL);</span> 
<a id="x1-58224r112"></a><span>112</span> 
<a id="x1-58226r113"></a><span>113</span><span>fail2:</span> 
<a id="x1-58228r114"></a><span>114</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(buttons,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-58230r115"></a><span>115</span> 
<a id="x1-58232r116"></a><span>116</span><span>fail1:</span> 
<a id="x1-58234r117"></a><span>117</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-58236r118"></a><span>118</span> 
<a id="x1-58238r119"></a><span>119</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2695"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-58240r120"></a><span>120</span><span>}</span> 
<a id="x1-58242r121"></a><span>121</span> 
<a id="x1-58244r122"></a><span>122</span><span id="textcolor2696"><span>static</span></span><span>&nbsp;</span><span id="textcolor2697"><span>void</span></span><span>&nbsp;__exit&nbsp;intrpt_exit(</span><span id="textcolor2698"><span>void</span></span><span>)</span> 
<a id="x1-58246r123"></a><span>123</span><span>{</span> 
<a id="x1-58248r124"></a><span>124</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2699"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-58250r125"></a><span>125</span> 
<a id="x1-58252r126"></a><span>126</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2700"><span>"%s</span></span><span id="textcolor2701"><span>\n</span></span><span id="textcolor2702"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-58254r127"></a><span>127</span> 
<a id="x1-58256r128"></a><span>128</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2703"><span>/*&nbsp;free&nbsp;irqs&nbsp;*/</span></span> 
<a id="x1-58258r129"></a><span>129</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[0],&nbsp;NULL);</span> 
<a id="x1-58260r130"></a><span>130</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[1],&nbsp;NULL);</span> 
<a id="x1-58262r131"></a><span>131</span> 
<a id="x1-58264r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2704"><span>/*&nbsp;turn&nbsp;all&nbsp;LEDs&nbsp;off&nbsp;*/</span></span> 
<a id="x1-58266r133"></a><span>133</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2705"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;ARRAY_SIZE(leds);&nbsp;i++)</span> 
<a id="x1-58268r134"></a><span>134</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[i].gpio,&nbsp;0);</span> 
<a id="x1-58270r135"></a><span>135</span> 
<a id="x1-58272r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2706"><span>/*&nbsp;unregister&nbsp;*/</span></span> 
<a id="x1-58274r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-58276r138"></a><span>138</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(buttons,&nbsp;ARRAY_SIZE(buttons));</span> 
<a id="x1-58278r139"></a><span>139</span><span>}</span> 
<a id="x1-58280r140"></a><span>140</span> 
<a id="x1-58282r141"></a><span>141</span><span>module_init(intrpt_init);</span> 
<a id="x1-58284r142"></a><span>142</span><span>module_exit(intrpt_exit);</span> 
<a id="x1-58286r143"></a><span>143</span> 
<a id="x1-58288r144"></a><span>144</span><span>MODULE_LICENSE(</span><span id="textcolor2707"><span>"GPL"</span></span><span>);</span> 
<a id="x1-58290r145"></a><span>145</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2708"><span>"Handle&nbsp;some&nbsp;GPIO&nbsp;interrupts"</span></span><span>);</span></pre>
<!-- l. 1926 -->
                                                                  

                                                                  
   <h4 id="bottom-half"><span>15.3   </span> <a id="x1-5900015.3"></a>Bottom Half</h4>
<!-- l. 1928 --><p>Suppose you want to do a bunch of stuff inside of an interrupt routine. A common
way to do that without rendering the interrupt unavailable for a significant duration
is to combine it with a tasklet. This pushes the bulk of the work off into the
scheduler.
</p><!-- l. 1932 --><p>   The example below modifies the previous example to also run an additional task
when an interrupt is triggered.
</p><!-- l. 1 -->
   <pre id="fancyvrb81"><a id="x1-59002r1"></a><span>1</span><span id="textcolor2709"><span>/*</span></span> 
<a id="x1-59004r2"></a><span>2</span><span id="textcolor2710"><span>&nbsp;*&nbsp;bottomhalf.c&nbsp;-&nbsp;Top&nbsp;and&nbsp;bottom&nbsp;half&nbsp;interrupt&nbsp;handling</span></span> 
<a id="x1-59006r3"></a><span>3</span><span id="textcolor2711"><span>&nbsp;*</span></span> 
<a id="x1-59008r4"></a><span>4</span><span id="textcolor2712"><span>&nbsp;*&nbsp;Based&nbsp;upon&nbsp;the&nbsp;RPi&nbsp;example&nbsp;by&nbsp;Stefan&nbsp;Wendler&nbsp;(devnull@kaltpost.de)</span></span> 
<a id="x1-59010r5"></a><span>5</span><span id="textcolor2713"><span>&nbsp;*&nbsp;from:</span></span> 
<a id="x1-59012r6"></a><span>6</span><span id="textcolor2714"><span>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;https://github.com/wendlers/rpi-kmod-samples</span></span> 
<a id="x1-59014r7"></a><span>7</span><span id="textcolor2715"><span>&nbsp;*</span></span> 
<a id="x1-59016r8"></a><span>8</span><span id="textcolor2716"><span>&nbsp;*&nbsp;Press&nbsp;one&nbsp;button&nbsp;to&nbsp;turn&nbsp;on&nbsp;an&nbsp;LED&nbsp;and&nbsp;another&nbsp;to&nbsp;turn&nbsp;it&nbsp;off</span></span> 
<a id="x1-59018r9"></a><span>9</span><span id="textcolor2717"><span>&nbsp;*/</span></span> 
<a id="x1-59020r10"></a><span>10</span> 
<a id="x1-59022r11"></a><span>11</span><span id="textcolor2718"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2719"><span>&lt;linux/delay.h&gt;</span></span> 
<a id="x1-59024r12"></a><span>12</span><span id="textcolor2720"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2721"><span>&lt;linux/gpio.h&gt;</span></span> 
<a id="x1-59026r13"></a><span>13</span><span id="textcolor2722"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2723"><span>&lt;linux/interrupt.h&gt;</span></span> 
<a id="x1-59028r14"></a><span>14</span><span id="textcolor2724"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2725"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-59030r15"></a><span>15</span><span id="textcolor2726"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2727"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-59032r16"></a><span>16</span><span id="textcolor2728"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2729"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-59034r17"></a><span>17</span> 
<a id="x1-59036r18"></a><span>18</span><span id="textcolor2730"><span>/*&nbsp;Macro&nbsp;DECLARE_TASKLET_OLD&nbsp;exists&nbsp;for&nbsp;compatibility.</span></span> 
<a id="x1-59038r19"></a><span>19</span><span id="textcolor2731"><span>&nbsp;*&nbsp;See&nbsp;https://lwn.net/Articles/830964/</span></span> 
<a id="x1-59040r20"></a><span>20</span><span id="textcolor2732"><span>&nbsp;*/</span></span> 
<a id="x1-59042r21"></a><span>21</span><span id="textcolor2733"><span>#ifndef&nbsp;DECLARE_TASKLET_OLD</span></span> 
<a id="x1-59044r22"></a><span>22</span><span id="textcolor2734"><span>#define&nbsp;DECLARE_TASKLET_OLD(arg1,&nbsp;arg2)&nbsp;DECLARE_TASKLET(arg1,&nbsp;arg2,&nbsp;0L)</span></span> 
<a id="x1-59046r23"></a><span>23</span><span id="textcolor2735"><span>#endif</span></span> 
<a id="x1-59048r24"></a><span>24</span> 
<a id="x1-59050r25"></a><span>25</span><span id="textcolor2736"><span>static</span></span><span>&nbsp;</span><span id="textcolor2737"><span>int</span></span><span>&nbsp;button_irqs[]&nbsp;=&nbsp;{&nbsp;-1,&nbsp;-1&nbsp;};</span> 
<a id="x1-59052r26"></a><span>26</span> 
<a id="x1-59054r27"></a><span>27</span><span id="textcolor2738"><span>/*&nbsp;Define&nbsp;GPIOs&nbsp;for&nbsp;LEDs.</span></span> 
<a id="x1-59056r28"></a><span>28</span><span id="textcolor2739"><span>&nbsp;*&nbsp;TODO:&nbsp;Change&nbsp;the&nbsp;numbers&nbsp;for&nbsp;the&nbsp;GPIO&nbsp;on&nbsp;your&nbsp;board.</span></span> 
<a id="x1-59058r29"></a><span>29</span><span id="textcolor2740"><span>&nbsp;*/</span></span> 
<a id="x1-59060r30"></a><span>30</span><span id="textcolor2741"><span>static</span></span><span>&nbsp;</span><span id="textcolor2742"><span>struct</span></span><span>&nbsp;gpio&nbsp;leds[]&nbsp;=&nbsp;{&nbsp;{&nbsp;4,&nbsp;GPIOF_OUT_INIT_LOW,&nbsp;</span><span id="textcolor2743"><span>"LED&nbsp;1"</span></span><span>&nbsp;}&nbsp;};</span> 
<a id="x1-59062r31"></a><span>31</span> 
<a id="x1-59064r32"></a><span>32</span><span id="textcolor2744"><span>/*&nbsp;Define&nbsp;GPIOs&nbsp;for&nbsp;BUTTONS</span></span> 
<a id="x1-59066r33"></a><span>33</span><span id="textcolor2745"><span>&nbsp;*&nbsp;TODO:&nbsp;Change&nbsp;the&nbsp;numbers&nbsp;for&nbsp;the&nbsp;GPIO&nbsp;on&nbsp;your&nbsp;board.</span></span> 
<a id="x1-59068r34"></a><span>34</span><span id="textcolor2746"><span>&nbsp;*/</span></span> 
<a id="x1-59070r35"></a><span>35</span><span id="textcolor2747"><span>static</span></span><span>&nbsp;</span><span id="textcolor2748"><span>struct</span></span><span>&nbsp;gpio&nbsp;buttons[]&nbsp;=&nbsp;{</span> 
<a id="x1-59072r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;17,&nbsp;GPIOF_IN,&nbsp;</span><span id="textcolor2749"><span>"LED&nbsp;1&nbsp;ON&nbsp;BUTTON"</span></span><span>&nbsp;},</span> 
<a id="x1-59074r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;18,&nbsp;GPIOF_IN,&nbsp;</span><span id="textcolor2750"><span>"LED&nbsp;1&nbsp;OFF&nbsp;BUTTON"</span></span><span>&nbsp;},</span> 
<a id="x1-59076r38"></a><span>38</span><span>};</span> 
<a id="x1-59078r39"></a><span>39</span> 
<a id="x1-59080r40"></a><span>40</span><span id="textcolor2751"><span>/*&nbsp;Tasklet&nbsp;containing&nbsp;some&nbsp;non-trivial&nbsp;amount&nbsp;of&nbsp;processing&nbsp;*/</span></span> 
<a id="x1-59082r41"></a><span>41</span><span id="textcolor2752"><span>static</span></span><span>&nbsp;</span><span id="textcolor2753"><span>void</span></span><span>&nbsp;bottomhalf_tasklet_fn(</span><span id="textcolor2754"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor2755"><span>long</span></span><span>&nbsp;data)</span> 
<a id="x1-59084r42"></a><span>42</span><span>{</span> 
<a id="x1-59086r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2756"><span>"Bottom&nbsp;half&nbsp;tasklet&nbsp;starts</span></span><span id="textcolor2757"><span>\n</span></span><span id="textcolor2758"><span>"</span></span><span>);</span> 
<a id="x1-59088r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2759"><span>/*&nbsp;do&nbsp;something&nbsp;which&nbsp;takes&nbsp;a&nbsp;while&nbsp;*/</span></span> 
<a id="x1-59090r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;mdelay(500);</span> 
<a id="x1-59092r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2760"><span>"Bottom&nbsp;half&nbsp;tasklet&nbsp;ends</span></span><span id="textcolor2761"><span>\n</span></span><span id="textcolor2762"><span>"</span></span><span>);</span> 
<a id="x1-59094r47"></a><span>47</span><span>}</span> 
<a id="x1-59096r48"></a><span>48</span> 
<a id="x1-59098r49"></a><span>49</span><span id="textcolor2763"><span>static</span></span><span>&nbsp;DECLARE_TASKLET_OLD(buttontask,&nbsp;bottomhalf_tasklet_fn);</span> 
<a id="x1-59100r50"></a><span>50</span> 
<a id="x1-59102r51"></a><span>51</span><span id="textcolor2764"><span>/*&nbsp;interrupt&nbsp;function&nbsp;triggered&nbsp;when&nbsp;a&nbsp;button&nbsp;is&nbsp;pressed&nbsp;*/</span></span> 
<a id="x1-59104r52"></a><span>52</span><span id="textcolor2765"><span>static</span></span><span>&nbsp;irqreturn_t&nbsp;button_isr(</span><span id="textcolor2766"><span>int</span></span><span>&nbsp;irq,&nbsp;</span><span id="textcolor2767"><span>void</span></span><span>&nbsp;*data)</span> 
<a id="x1-59106r53"></a><span>53</span><span>{</span> 
<a id="x1-59108r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2768"><span>/*&nbsp;Do&nbsp;something&nbsp;quickly&nbsp;right&nbsp;now&nbsp;*/</span></span> 
<a id="x1-59110r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2769"><span>if</span></span><span>&nbsp;(irq&nbsp;==&nbsp;button_irqs[0]&nbsp;&amp;&amp;&nbsp;!gpio_get_value(leds[0].gpio))</span> 
<a id="x1-59112r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[0].gpio,&nbsp;1);</span> 
<a id="x1-59114r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2770"><span>else</span></span><span>&nbsp;</span><span id="textcolor2771"><span>if</span></span><span>&nbsp;(irq&nbsp;==&nbsp;button_irqs[1]&nbsp;&amp;&amp;&nbsp;gpio_get_value(leds[0].gpio))</span> 
<a id="x1-59116r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[0].gpio,&nbsp;0);</span> 
<a id="x1-59118r59"></a><span>59</span> 
<a id="x1-59120r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2772"><span>/*&nbsp;Do&nbsp;the&nbsp;rest&nbsp;at&nbsp;leisure&nbsp;via&nbsp;the&nbsp;scheduler&nbsp;*/</span></span> 
<a id="x1-59122r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;tasklet_schedule(&amp;buttontask);</span> 
<a id="x1-59124r62"></a><span>62</span> 
<a id="x1-59126r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2773"><span>return</span></span><span>&nbsp;IRQ_HANDLED;</span> 
<a id="x1-59128r64"></a><span>64</span><span>}</span> 
<a id="x1-59130r65"></a><span>65</span> 
<a id="x1-59132r66"></a><span>66</span><span id="textcolor2774"><span>static</span></span><span>&nbsp;</span><span id="textcolor2775"><span>int</span></span><span>&nbsp;__init&nbsp;bottomhalf_init(</span><span id="textcolor2776"><span>void</span></span><span>)</span> 
<a id="x1-59134r67"></a><span>67</span><span>{</span> 
<a id="x1-59136r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2777"><span>int</span></span><span>&nbsp;ret&nbsp;=&nbsp;0;</span> 
<a id="x1-59138r69"></a><span>69</span> 
<a id="x1-59140r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2778"><span>"%s</span></span><span id="textcolor2779"><span>\n</span></span><span id="textcolor2780"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-59142r71"></a><span>71</span> 
<a id="x1-59144r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2781"><span>/*&nbsp;register&nbsp;LED&nbsp;gpios&nbsp;*/</span></span> 
<a id="x1-59146r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_request_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-59148r74"></a><span>74</span> 
<a id="x1-59150r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2782"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-59152r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2783"><span>"Unable&nbsp;to&nbsp;request&nbsp;GPIOs&nbsp;for&nbsp;LEDs:&nbsp;%d</span></span><span id="textcolor2784"><span>\n</span></span><span id="textcolor2785"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-59154r77"></a><span>77</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2786"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-59156r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-59158r79"></a><span>79</span> 
<a id="x1-59160r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2787"><span>/*&nbsp;register&nbsp;BUTTON&nbsp;gpios&nbsp;*/</span></span> 
<a id="x1-59162r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_request_array(buttons,&nbsp;ARRAY_SIZE(buttons));</span> 
<a id="x1-59164r82"></a><span>82</span> 
<a id="x1-59166r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2788"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-59168r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2789"><span>"Unable&nbsp;to&nbsp;request&nbsp;GPIOs&nbsp;for&nbsp;BUTTONs:&nbsp;%d</span></span><span id="textcolor2790"><span>\n</span></span><span id="textcolor2791"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-59170r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2792"><span>goto</span></span><span>&nbsp;fail1;</span> 
<a id="x1-59172r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-59174r87"></a><span>87</span> 
<a id="x1-59176r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2793"><span>"Current&nbsp;button1&nbsp;value:&nbsp;%d</span></span><span id="textcolor2794"><span>\n</span></span><span id="textcolor2795"><span>"</span></span><span>,&nbsp;gpio_get_value(buttons[0].gpio));</span> 
<a id="x1-59178r89"></a><span>89</span> 
<a id="x1-59180r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_to_irq(buttons[0].gpio);</span> 
<a id="x1-59182r91"></a><span>91</span> 
<a id="x1-59184r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2796"><span>if</span></span><span>&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-59186r93"></a><span>93</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2797"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2798"><span>\n</span></span><span id="textcolor2799"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-59188r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2800"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-59190r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-59192r96"></a><span>96</span> 
<a id="x1-59194r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;button_irqs[0]&nbsp;=&nbsp;ret;</span> 
<a id="x1-59196r98"></a><span>98</span> 
<a id="x1-59198r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2801"><span>"Successfully&nbsp;requested&nbsp;BUTTON1&nbsp;IRQ&nbsp;#&nbsp;%d</span></span><span id="textcolor2802"><span>\n</span></span><span id="textcolor2803"><span>"</span></span><span>,&nbsp;button_irqs[0]);</span> 
<a id="x1-59200r100"></a><span>100</span> 
<a id="x1-59202r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;request_irq(button_irqs[0],&nbsp;button_isr,</span> 
<a id="x1-59204r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQF_TRIGGER_RISING&nbsp;|&nbsp;IRQF_TRIGGER_FALLING,</span> 
<a id="x1-59206r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2804"><span>"gpiomod#button1"</span></span><span>,&nbsp;NULL);</span> 
<a id="x1-59208r104"></a><span>104</span> 
<a id="x1-59210r105"></a><span>105</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2805"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-59212r106"></a><span>106</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2806"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2807"><span>\n</span></span><span id="textcolor2808"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-59214r107"></a><span>107</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2809"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-59216r108"></a><span>108</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-59218r109"></a><span>109</span> 
<a id="x1-59220r110"></a><span>110</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_to_irq(buttons[1].gpio);</span> 
<a id="x1-59222r111"></a><span>111</span> 
<a id="x1-59224r112"></a><span>112</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2810"><span>if</span></span><span>&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-59226r113"></a><span>113</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2811"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2812"><span>\n</span></span><span id="textcolor2813"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-59228r114"></a><span>114</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2814"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-59230r115"></a><span>115</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-59232r116"></a><span>116</span> 
<a id="x1-59234r117"></a><span>117</span><span>&nbsp;&nbsp;&nbsp;&nbsp;button_irqs[1]&nbsp;=&nbsp;ret;</span> 
<a id="x1-59236r118"></a><span>118</span> 
<a id="x1-59238r119"></a><span>119</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2815"><span>"Successfully&nbsp;requested&nbsp;BUTTON2&nbsp;IRQ&nbsp;#&nbsp;%d</span></span><span id="textcolor2816"><span>\n</span></span><span id="textcolor2817"><span>"</span></span><span>,&nbsp;button_irqs[1]);</span> 
<a id="x1-59240r120"></a><span>120</span> 
<a id="x1-59242r121"></a><span>121</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;request_irq(button_irqs[1],&nbsp;button_isr,</span> 
<a id="x1-59244r122"></a><span>122</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQF_TRIGGER_RISING&nbsp;|&nbsp;IRQF_TRIGGER_FALLING,</span> 
<a id="x1-59246r123"></a><span>123</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2818"><span>"gpiomod#button2"</span></span><span>,&nbsp;NULL);</span> 
<a id="x1-59248r124"></a><span>124</span> 
<a id="x1-59250r125"></a><span>125</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2819"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-59252r126"></a><span>126</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2820"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2821"><span>\n</span></span><span id="textcolor2822"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-59254r127"></a><span>127</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2823"><span>goto</span></span><span>&nbsp;fail3;</span> 
<a id="x1-59256r128"></a><span>128</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-59258r129"></a><span>129</span> 
<a id="x1-59260r130"></a><span>130</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2824"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-59262r131"></a><span>131</span> 
<a id="x1-59264r132"></a><span>132</span><span id="textcolor2825"><span>/*&nbsp;cleanup&nbsp;what&nbsp;has&nbsp;been&nbsp;setup&nbsp;so&nbsp;far&nbsp;*/</span></span> 
<a id="x1-59266r133"></a><span>133</span><span>fail3:</span> 
<a id="x1-59268r134"></a><span>134</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[0],&nbsp;NULL);</span> 
<a id="x1-59270r135"></a><span>135</span> 
<a id="x1-59272r136"></a><span>136</span><span>fail2:</span> 
<a id="x1-59274r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(buttons,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-59276r138"></a><span>138</span> 
<a id="x1-59278r139"></a><span>139</span><span>fail1:</span> 
<a id="x1-59280r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-59282r141"></a><span>141</span> 
<a id="x1-59284r142"></a><span>142</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2826"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-59286r143"></a><span>143</span><span>}</span> 
<a id="x1-59288r144"></a><span>144</span> 
<a id="x1-59290r145"></a><span>145</span><span id="textcolor2827"><span>static</span></span><span>&nbsp;</span><span id="textcolor2828"><span>void</span></span><span>&nbsp;__exit&nbsp;bottomhalf_exit(</span><span id="textcolor2829"><span>void</span></span><span>)</span> 
<a id="x1-59292r146"></a><span>146</span><span>{</span> 
<a id="x1-59294r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2830"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-59296r148"></a><span>148</span> 
<a id="x1-59298r149"></a><span>149</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2831"><span>"%s</span></span><span id="textcolor2832"><span>\n</span></span><span id="textcolor2833"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-59300r150"></a><span>150</span> 
<a id="x1-59302r151"></a><span>151</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2834"><span>/*&nbsp;free&nbsp;irqs&nbsp;*/</span></span> 
<a id="x1-59304r152"></a><span>152</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[0],&nbsp;NULL);</span> 
<a id="x1-59306r153"></a><span>153</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[1],&nbsp;NULL);</span> 
<a id="x1-59308r154"></a><span>154</span> 
<a id="x1-59310r155"></a><span>155</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2835"><span>/*&nbsp;turn&nbsp;all&nbsp;LEDs&nbsp;off&nbsp;*/</span></span> 
<a id="x1-59312r156"></a><span>156</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2836"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;ARRAY_SIZE(leds);&nbsp;i++)</span> 
<a id="x1-59314r157"></a><span>157</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[i].gpio,&nbsp;0);</span> 
<a id="x1-59316r158"></a><span>158</span> 
<a id="x1-59318r159"></a><span>159</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2837"><span>/*&nbsp;unregister&nbsp;*/</span></span> 
<a id="x1-59320r160"></a><span>160</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-59322r161"></a><span>161</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(buttons,&nbsp;ARRAY_SIZE(buttons));</span> 
<a id="x1-59324r162"></a><span>162</span><span>}</span> 
<a id="x1-59326r163"></a><span>163</span> 
<a id="x1-59328r164"></a><span>164</span><span>module_init(bottomhalf_init);</span> 
<a id="x1-59330r165"></a><span>165</span><span>module_exit(bottomhalf_exit);</span> 
<a id="x1-59332r166"></a><span>166</span> 
<a id="x1-59334r167"></a><span>167</span><span>MODULE_LICENSE(</span><span id="textcolor2838"><span>"GPL"</span></span><span>);</span> 
<a id="x1-59336r168"></a><span>168</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2839"><span>"Interrupt&nbsp;with&nbsp;top&nbsp;and&nbsp;bottom&nbsp;half"</span></span><span>);</span></pre>
<!-- l. 1936 -->
   <h4 id="threaded-irq"><span>15.4   </span> <a id="x1-6000015.4"></a>Threaded IRQ</h4>
<!-- l. 1938 --><p>Threaded IRQ is a mechanism to organize both top-half and bottom-half
of an IRQ at once. A threaded IRQ splits the one handler in
<code> <span>request_irq()</span>
</code> into two: one for the top-half, the other for the bottom-half. The
<code> <span>request_threaded_irq()</span>
</code> is the function for using threaded IRQs. Two handlers are registered at once in the
<code> <span>request_threaded_irq()</span>
</code>.
</p><!-- l. 1943 --><p>   Those two handlers run in different context. The top-half handler runs
in interrupt context. It’s the equivalence of the handler passed to the
<code> <span>request_irq()</span>
</code>. The bottom-half handler on the other hand runs in its own thread. This
thread is created on registration of a threaded IRQ. Its sole purpose is to run
this bottom-half handler. This is where a threaded IRQ is “threaded”. If
<code> <span>IRQ_WAKE_THREAD</span>
</code> is returned by the top-half handler, that bottom-half serving thread will wake up.
The thread then runs the bottom-half handler.
</p><!-- l. 1953 --><p>   Here is an example of how to do the same thing as before, with top and bottom
halves, but using threads.
</p><!-- l. 1 -->
   <pre id="fancyvrb82"><a id="x1-60007r1"></a><span>1</span><span id="textcolor2840"><span>/*</span></span> 
<a id="x1-60009r2"></a><span>2</span><span id="textcolor2841"><span>&nbsp;*&nbsp;bh_thread.c&nbsp;-&nbsp;Top&nbsp;and&nbsp;bottom&nbsp;half&nbsp;interrupt&nbsp;handling</span></span> 
<a id="x1-60011r3"></a><span>3</span><span id="textcolor2842"><span>&nbsp;*</span></span> 
<a id="x1-60013r4"></a><span>4</span><span id="textcolor2843"><span>&nbsp;*&nbsp;Based&nbsp;upon&nbsp;the&nbsp;RPi&nbsp;example&nbsp;by&nbsp;Stefan&nbsp;Wendler&nbsp;(devnull@kaltpost.de)</span></span> 
<a id="x1-60015r5"></a><span>5</span><span id="textcolor2844"><span>&nbsp;*&nbsp;from:</span></span> 
<a id="x1-60017r6"></a><span>6</span><span id="textcolor2845"><span>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;https://github.com/wendlers/rpi-kmod-samples</span></span> 
<a id="x1-60019r7"></a><span>7</span><span id="textcolor2846"><span>&nbsp;*</span></span> 
<a id="x1-60021r8"></a><span>8</span><span id="textcolor2847"><span>&nbsp;*&nbsp;Press&nbsp;one&nbsp;button&nbsp;to&nbsp;turn&nbsp;on&nbsp;a&nbsp;LED&nbsp;and&nbsp;another&nbsp;to&nbsp;turn&nbsp;it&nbsp;off</span></span> 
<a id="x1-60023r9"></a><span>9</span><span id="textcolor2848"><span>&nbsp;*/</span></span> 
<a id="x1-60025r10"></a><span>10</span> 
<a id="x1-60027r11"></a><span>11</span><span id="textcolor2849"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2850"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-60029r12"></a><span>12</span><span id="textcolor2851"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2852"><span>&lt;linux/kernel.h&gt;</span></span> 
<a id="x1-60031r13"></a><span>13</span><span id="textcolor2853"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2854"><span>&lt;linux/gpio.h&gt;</span></span> 
<a id="x1-60033r14"></a><span>14</span><span id="textcolor2855"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2856"><span>&lt;linux/delay.h&gt;</span></span> 
<a id="x1-60035r15"></a><span>15</span><span id="textcolor2857"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2858"><span>&lt;linux/interrupt.h&gt;</span></span> 
<a id="x1-60037r16"></a><span>16</span> 
<a id="x1-60039r17"></a><span>17</span><span id="textcolor2859"><span>static</span></span><span>&nbsp;</span><span id="textcolor2860"><span>int</span></span><span>&nbsp;button_irqs[]&nbsp;=&nbsp;{&nbsp;-1,&nbsp;-1&nbsp;};</span> 
<a id="x1-60041r18"></a><span>18</span> 
<a id="x1-60043r19"></a><span>19</span><span id="textcolor2861"><span>/*&nbsp;Define&nbsp;GPIOs&nbsp;for&nbsp;LEDs.</span></span> 
<a id="x1-60045r20"></a><span>20</span><span id="textcolor2862"><span>&nbsp;*&nbsp;FIXME:&nbsp;Change&nbsp;the&nbsp;numbers&nbsp;for&nbsp;the&nbsp;GPIO&nbsp;on&nbsp;your&nbsp;board.</span></span> 
<a id="x1-60047r21"></a><span>21</span><span id="textcolor2863"><span>&nbsp;*/</span></span> 
<a id="x1-60049r22"></a><span>22</span><span id="textcolor2864"><span>static</span></span><span>&nbsp;</span><span id="textcolor2865"><span>struct</span></span><span>&nbsp;gpio&nbsp;leds[]&nbsp;=&nbsp;{&nbsp;{&nbsp;4,&nbsp;GPIOF_OUT_INIT_LOW,&nbsp;</span><span id="textcolor2866"><span>"LED&nbsp;1"</span></span><span>&nbsp;}&nbsp;};</span> 
<a id="x1-60051r23"></a><span>23</span> 
<a id="x1-60053r24"></a><span>24</span><span id="textcolor2867"><span>/*&nbsp;Define&nbsp;GPIOs&nbsp;for&nbsp;BUTTONS</span></span> 
<a id="x1-60055r25"></a><span>25</span><span id="textcolor2868"><span>&nbsp;*&nbsp;FIXME:&nbsp;Change&nbsp;the&nbsp;numbers&nbsp;for&nbsp;the&nbsp;GPIO&nbsp;on&nbsp;your&nbsp;board.</span></span> 
<a id="x1-60057r26"></a><span>26</span><span id="textcolor2869"><span>&nbsp;*/</span></span> 
<a id="x1-60059r27"></a><span>27</span><span id="textcolor2870"><span>static</span></span><span>&nbsp;</span><span id="textcolor2871"><span>struct</span></span><span>&nbsp;gpio&nbsp;buttons[]&nbsp;=&nbsp;{</span> 
<a id="x1-60061r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;17,&nbsp;GPIOF_IN,&nbsp;</span><span id="textcolor2872"><span>"LED&nbsp;1&nbsp;ON&nbsp;BUTTON"</span></span><span>&nbsp;},</span> 
<a id="x1-60063r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;18,&nbsp;GPIOF_IN,&nbsp;</span><span id="textcolor2873"><span>"LED&nbsp;1&nbsp;OFF&nbsp;BUTTON"</span></span><span>&nbsp;},</span> 
<a id="x1-60065r30"></a><span>30</span><span>};</span> 
<a id="x1-60067r31"></a><span>31</span> 
<a id="x1-60069r32"></a><span>32</span><span id="textcolor2874"><span>/*&nbsp;This&nbsp;happens&nbsp;immediately,&nbsp;when&nbsp;the&nbsp;IRQ&nbsp;is&nbsp;triggered&nbsp;*/</span></span> 
<a id="x1-60071r33"></a><span>33</span><span id="textcolor2875"><span>static</span></span><span>&nbsp;irqreturn_t&nbsp;button_top_half(</span><span id="textcolor2876"><span>int</span></span><span>&nbsp;irq,&nbsp;</span><span id="textcolor2877"><span>void</span></span><span>&nbsp;*ident)</span> 
<a id="x1-60073r34"></a><span>34</span><span>{</span> 
<a id="x1-60075r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2878"><span>return</span></span><span>&nbsp;IRQ_WAKE_THREAD;</span> 
<a id="x1-60077r36"></a><span>36</span><span>}</span> 
<a id="x1-60079r37"></a><span>37</span> 
<a id="x1-60081r38"></a><span>38</span><span id="textcolor2879"><span>/*&nbsp;This&nbsp;can&nbsp;happen&nbsp;at&nbsp;leisure,&nbsp;freeing&nbsp;up&nbsp;IRQs&nbsp;for&nbsp;other&nbsp;high&nbsp;priority&nbsp;task&nbsp;*/</span></span> 
<a id="x1-60083r39"></a><span>39</span><span id="textcolor2880"><span>static</span></span><span>&nbsp;irqreturn_t&nbsp;button_bottom_half(</span><span id="textcolor2881"><span>int</span></span><span>&nbsp;irq,&nbsp;</span><span id="textcolor2882"><span>void</span></span><span>&nbsp;*ident)</span> 
<a id="x1-60085r40"></a><span>40</span><span>{</span> 
<a id="x1-60087r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2883"><span>"Bottom&nbsp;half&nbsp;task&nbsp;starts</span></span><span id="textcolor2884"><span>\n</span></span><span id="textcolor2885"><span>"</span></span><span>);</span> 
<a id="x1-60089r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;mdelay(500);&nbsp;</span><span id="textcolor2886"><span>/*&nbsp;do&nbsp;something&nbsp;which&nbsp;takes&nbsp;a&nbsp;while&nbsp;*/</span></span> 
<a id="x1-60091r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2887"><span>"Bottom&nbsp;half&nbsp;task&nbsp;ends</span></span><span id="textcolor2888"><span>\n</span></span><span id="textcolor2889"><span>"</span></span><span>);</span> 
<a id="x1-60093r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2890"><span>return</span></span><span>&nbsp;IRQ_HANDLED;</span> 
<a id="x1-60095r45"></a><span>45</span><span>}</span> 
<a id="x1-60097r46"></a><span>46</span> 
<a id="x1-60099r47"></a><span>47</span><span id="textcolor2891"><span>static</span></span><span>&nbsp;</span><span id="textcolor2892"><span>int</span></span><span>&nbsp;__init&nbsp;bottomhalf_init(</span><span id="textcolor2893"><span>void</span></span><span>)</span> 
<a id="x1-60101r48"></a><span>48</span><span>{</span> 
<a id="x1-60103r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2894"><span>int</span></span><span>&nbsp;ret&nbsp;=&nbsp;0;</span> 
<a id="x1-60105r50"></a><span>50</span> 
<a id="x1-60107r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2895"><span>"%s</span></span><span id="textcolor2896"><span>\n</span></span><span id="textcolor2897"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-60109r52"></a><span>52</span> 
<a id="x1-60111r53"></a><span>53</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2898"><span>/*&nbsp;register&nbsp;LED&nbsp;gpios&nbsp;*/</span></span> 
<a id="x1-60113r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_request_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-60115r55"></a><span>55</span> 
<a id="x1-60117r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2899"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-60119r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2900"><span>"Unable&nbsp;to&nbsp;request&nbsp;GPIOs&nbsp;for&nbsp;LEDs:&nbsp;%d</span></span><span id="textcolor2901"><span>\n</span></span><span id="textcolor2902"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-60121r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2903"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-60123r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-60125r60"></a><span>60</span> 
<a id="x1-60127r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2904"><span>/*&nbsp;register&nbsp;BUTTON&nbsp;gpios&nbsp;*/</span></span> 
<a id="x1-60129r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_request_array(buttons,&nbsp;ARRAY_SIZE(buttons));</span> 
<a id="x1-60131r63"></a><span>63</span> 
<a id="x1-60133r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2905"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-60135r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2906"><span>"Unable&nbsp;to&nbsp;request&nbsp;GPIOs&nbsp;for&nbsp;BUTTONs:&nbsp;%d</span></span><span id="textcolor2907"><span>\n</span></span><span id="textcolor2908"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-60137r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2909"><span>goto</span></span><span>&nbsp;fail1;</span> 
<a id="x1-60139r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-60141r68"></a><span>68</span> 
<a id="x1-60143r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2910"><span>"Current&nbsp;button1&nbsp;value:&nbsp;%d</span></span><span id="textcolor2911"><span>\n</span></span><span id="textcolor2912"><span>"</span></span><span>,&nbsp;gpio_get_value(buttons[0].gpio));</span> 
<a id="x1-60145r70"></a><span>70</span> 
<a id="x1-60147r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_to_irq(buttons[0].gpio);</span> 
<a id="x1-60149r72"></a><span>72</span> 
<a id="x1-60151r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2913"><span>if</span></span><span>&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-60153r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2914"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2915"><span>\n</span></span><span id="textcolor2916"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-60155r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2917"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-60157r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-60159r77"></a><span>77</span> 
<a id="x1-60161r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;button_irqs[0]&nbsp;=&nbsp;ret;</span> 
<a id="x1-60163r79"></a><span>79</span> 
<a id="x1-60165r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2918"><span>"Successfully&nbsp;requested&nbsp;BUTTON1&nbsp;IRQ&nbsp;#&nbsp;%d</span></span><span id="textcolor2919"><span>\n</span></span><span id="textcolor2920"><span>"</span></span><span>,&nbsp;button_irqs[0]);</span> 
<a id="x1-60167r81"></a><span>81</span> 
<a id="x1-60169r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;request_threaded_irq(button_irqs[0],&nbsp;button_top_half,</span> 
<a id="x1-60171r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_bottom_half,</span> 
<a id="x1-60173r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQF_TRIGGER_RISING&nbsp;|&nbsp;IRQF_TRIGGER_FALLING,</span> 
<a id="x1-60175r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2921"><span>"gpiomod#button1"</span></span><span>,&nbsp;&amp;buttons[0]);</span> 
<a id="x1-60177r86"></a><span>86</span> 
<a id="x1-60179r87"></a><span>87</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2922"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-60181r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2923"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2924"><span>\n</span></span><span id="textcolor2925"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-60183r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2926"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-60185r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-60187r91"></a><span>91</span> 
<a id="x1-60189r92"></a><span>92</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;gpio_to_irq(buttons[1].gpio);</span> 
<a id="x1-60191r93"></a><span>93</span> 
<a id="x1-60193r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2927"><span>if</span></span><span>&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-60195r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2928"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2929"><span>\n</span></span><span id="textcolor2930"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-60197r96"></a><span>96</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2931"><span>goto</span></span><span>&nbsp;fail2;</span> 
<a id="x1-60199r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-60201r98"></a><span>98</span> 
<a id="x1-60203r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;button_irqs[1]&nbsp;=&nbsp;ret;</span> 
<a id="x1-60205r100"></a><span>100</span> 
<a id="x1-60207r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2932"><span>"Successfully&nbsp;requested&nbsp;BUTTON2&nbsp;IRQ&nbsp;#&nbsp;%d</span></span><span id="textcolor2933"><span>\n</span></span><span id="textcolor2934"><span>"</span></span><span>,&nbsp;button_irqs[1]);</span> 
<a id="x1-60209r102"></a><span>102</span> 
<a id="x1-60211r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;request_threaded_irq(button_irqs[1],&nbsp;button_top_half,</span> 
<a id="x1-60213r104"></a><span>104</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_bottom_half,</span> 
<a id="x1-60215r105"></a><span>105</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQF_TRIGGER_RISING&nbsp;|&nbsp;IRQF_TRIGGER_FALLING,</span> 
<a id="x1-60217r106"></a><span>106</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2935"><span>"gpiomod#button2"</span></span><span>,&nbsp;&amp;buttons[1]);</span> 
<a id="x1-60219r107"></a><span>107</span> 
<a id="x1-60221r108"></a><span>108</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2936"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-60223r109"></a><span>109</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor2937"><span>"Unable&nbsp;to&nbsp;request&nbsp;IRQ:&nbsp;%d</span></span><span id="textcolor2938"><span>\n</span></span><span id="textcolor2939"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-60225r110"></a><span>110</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2940"><span>goto</span></span><span>&nbsp;fail3;</span> 
<a id="x1-60227r111"></a><span>111</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-60229r112"></a><span>112</span> 
<a id="x1-60231r113"></a><span>113</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2941"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-60233r114"></a><span>114</span> 
<a id="x1-60235r115"></a><span>115</span><span id="textcolor2942"><span>/*&nbsp;cleanup&nbsp;what&nbsp;has&nbsp;been&nbsp;setup&nbsp;so&nbsp;far&nbsp;*/</span></span> 
<a id="x1-60237r116"></a><span>116</span><span>fail3:</span> 
<a id="x1-60239r117"></a><span>117</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[0],&nbsp;NULL);</span> 
<a id="x1-60241r118"></a><span>118</span> 
<a id="x1-60243r119"></a><span>119</span><span>fail2:</span> 
<a id="x1-60245r120"></a><span>120</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(buttons,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-60247r121"></a><span>121</span> 
<a id="x1-60249r122"></a><span>122</span><span>fail1:</span> 
<a id="x1-60251r123"></a><span>123</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-60253r124"></a><span>124</span> 
<a id="x1-60255r125"></a><span>125</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2943"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-60257r126"></a><span>126</span><span>}</span> 
<a id="x1-60259r127"></a><span>127</span> 
<a id="x1-60261r128"></a><span>128</span><span id="textcolor2944"><span>static</span></span><span>&nbsp;</span><span id="textcolor2945"><span>void</span></span><span>&nbsp;__exit&nbsp;bottomhalf_exit(</span><span id="textcolor2946"><span>void</span></span><span>)</span> 
<a id="x1-60263r129"></a><span>129</span><span>{</span> 
<a id="x1-60265r130"></a><span>130</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2947"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-60267r131"></a><span>131</span> 
<a id="x1-60269r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor2948"><span>"%s</span></span><span id="textcolor2949"><span>\n</span></span><span id="textcolor2950"><span>"</span></span><span>,&nbsp;__func__);</span> 
<a id="x1-60271r133"></a><span>133</span> 
<a id="x1-60273r134"></a><span>134</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2951"><span>/*&nbsp;free&nbsp;irqs&nbsp;*/</span></span> 
<a id="x1-60275r135"></a><span>135</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[0],&nbsp;NULL);</span> 
<a id="x1-60277r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;free_irq(button_irqs[1],&nbsp;NULL);</span> 
<a id="x1-60279r137"></a><span>137</span> 
<a id="x1-60281r138"></a><span>138</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2952"><span>/*&nbsp;turn&nbsp;all&nbsp;LEDs&nbsp;off&nbsp;*/</span></span> 
<a id="x1-60283r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2953"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;ARRAY_SIZE(leds);&nbsp;i++)</span> 
<a id="x1-60285r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpio_set_value(leds[i].gpio,&nbsp;0);</span> 
<a id="x1-60287r141"></a><span>141</span> 
<a id="x1-60289r142"></a><span>142</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2954"><span>/*&nbsp;unregister&nbsp;*/</span></span> 
<a id="x1-60291r143"></a><span>143</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(leds,&nbsp;ARRAY_SIZE(leds));</span> 
<a id="x1-60293r144"></a><span>144</span><span>&nbsp;&nbsp;&nbsp;&nbsp;gpio_free_array(buttons,&nbsp;ARRAY_SIZE(buttons));</span> 
<a id="x1-60295r145"></a><span>145</span><span>}</span> 
<a id="x1-60297r146"></a><span>146</span> 
<a id="x1-60299r147"></a><span>147</span><span>module_init(bottomhalf_init);</span> 
<a id="x1-60301r148"></a><span>148</span><span>module_exit(bottomhalf_exit);</span> 
<a id="x1-60303r149"></a><span>149</span> 
<a id="x1-60305r150"></a><span>150</span><span>MODULE_LICENSE(</span><span id="textcolor2955"><span>"GPL"</span></span><span>);</span> 
<a id="x1-60307r151"></a><span>151</span><span>MODULE_DESCRIPTION(</span><span id="textcolor2956"><span>"Interrupt&nbsp;with&nbsp;top&nbsp;and&nbsp;bottom&nbsp;half"</span></span><span>);</span></pre>
<!-- l. 1957 --><p>   A threaded IRQ is registered using <code>  <span>request_threaded_irq()</span>
</code>. This function only takes one additional parameter than the
<code> <span>request_irq()</span>
</code> – the bottom-half handling function that runs in its own thread. In this example it is
the <code>  <span>button_bottom_half()</span>
</code>. Usage of other parameters are the same as
<code> <span>request_irq()</span>
                                                                  

                                                                  
</code>.
</p><!-- l. 1962 --><p>   Presence of both handlers is not mandatory. If either of them is not needed, pass
the <code>  <span>NULL</span>
</code> instead. A <code>  <span>NULL</span>
</code> top-half handler implies that no action is taken except to wake up the
bottom-half serving thread, which runs the bottom-half handler. Similarly, a
<code> <span>NULL</span>
</code> bottom-half handler effectively acts as if
<code> <span>request_irq()</span>
</code> were used. In fact, this is how <code>  <span>request_irq()</span>
</code> is implemented.
</p><!-- l. 1968 --><p>   Note that passing <code>  <span>NULL</span>
</code> to both handlers is considered an error and will make registration fail.
</p><!-- l. 1970 -->
   <h3 id="virtual-input-device-driver"><span>16   </span> <a id="x1-6100016"></a>Virtual Input Device Driver</h3>
<!-- l. 1972 --><p>The input device driver is a module that provides a way to communicate
with the interaction device via the event. For example, the keyboard
can send the press or release event to tell the kernel what we want to
do. The input device driver will allocate a new input structure with
<code> <span>input_allocate_device()</span>
</code> and sets up input bitfields, device id, version, etc. After that, registers it by calling
<code> <span>input_register_device()</span>
</code>.
</p><!-- l. 1977 --><p>   Here is an example, vinput, It is an API to allow easy
development of virtual input drivers. The drivers needs to export a
<code> <span>vinput_device()</span>
</code> that contains the virtual device name and
<code> <span>vinput_ops</span>
</code> structure that describes:
</p>
     <ul>
     <li>the init function: <code>  <span>init()</span>
     </code>
     </li>
     <li>the input event injection function: <code>  <span>send()</span>
                                                                  

                                                                  
     </code>
     </li>
     <li>the readback function: <code>  <span>read()</span>
     </code></li></ul>
<!-- l. 1987 --><p>   Then using <code>  <span>vinput_register_device()</span>
</code> and <code>  <span>vinput_unregister_device()</span>
</code> will add a new device to the list of support virtual input devices.
</p><!-- l. 1 -->
   <pre id="fancyvrb83"><a id="x1-61012r1"></a><span>1</span><span id="textcolor2957"><span>int</span></span><span>&nbsp;init(</span><span id="textcolor2958"><span>struct</span></span><span>&nbsp;vinput&nbsp;*);</span></pre>
<!-- l. 1993 --><p>   This function is passed a <code>  <span id="textcolor2959"><span>struct</span></span><span>&nbsp;vinput</span>
</code> already initialized with an allocated <code>  <span id="textcolor2960"><span>struct</span></span><span>&nbsp;input_dev</span>
</code>. The <code>  <span>init()</span>
</code> function is responsible for initializing the capabilities of the input device and register
it.
</p><!-- l. 1 -->
   <pre id="fancyvrb84"><a id="x1-61018r1"></a><span>1</span><span id="textcolor2961"><span>int</span></span><span>&nbsp;send(</span><span id="textcolor2962"><span>struct</span></span><span>&nbsp;vinput&nbsp;*,&nbsp;</span><span id="textcolor2963"><span>char</span></span><span>&nbsp;*,&nbsp;</span><span id="textcolor2964"><span>int</span></span><span>);</span></pre>
<!-- l. 2000 --><p>   This function will receive a user string to interpret and inject the event using the
<code> <span>input_report_XXXX</span>
</code> or <code>  <span>input_event</span>
</code> call. The string is already copied from user.
</p><!-- l. 1 -->
   <pre id="fancyvrb85"><a id="x1-61023r1"></a><span>1</span><span id="textcolor2965"><span>int</span></span><span>&nbsp;read(</span><span id="textcolor2966"><span>struct</span></span><span>&nbsp;vinput&nbsp;*,&nbsp;</span><span id="textcolor2967"><span>char</span></span><span>&nbsp;*,&nbsp;</span><span id="textcolor2968"><span>int</span></span><span>);</span></pre>
<!-- l. 2007 --><p>   This function is used for debugging and should fill the buffer parameter with the
last event sent in the virtual input device format. The buffer will then be copied to
user.
</p><!-- l. 2010 --><p>   vinput devices are created and destroyed using sysfs. And, event injection is done
through a <span><span><span>/dev</span></span></span> node. The device name will be used by the userland to export a new
virtual input device.
</p><!-- l. 2014 --><p>   The <code>  <span>class_attribute</span>
</code> structure is similar to other attribute types we talked about in section <a href="#sysfs-interacting-with-your-module">8<!-- tex4ht:ref: sec:sysfs  --></a>:
</p><!-- l. 1 -->
   <pre id="fancyvrb86"><a id="x1-61033r1"></a><span>1</span><span id="textcolor2969"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;{</span> 
<a id="x1-61035r2"></a><span>2</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2970"><span>struct</span></span><span>&nbsp;attribute&nbsp;attr;</span> 
<a id="x1-61037r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2971"><span>ssize_t</span></span><span>&nbsp;(*show)(</span><span id="textcolor2972"><span>struct</span></span><span>&nbsp;class&nbsp;*class,&nbsp;</span><span id="textcolor2973"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;*attr,</span> 
<a id="x1-61039r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2974"><span>char</span></span><span>&nbsp;*buf);</span> 
<a id="x1-61041r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2975"><span>ssize_t</span></span><span>&nbsp;(*store)(</span><span id="textcolor2976"><span>struct</span></span><span>&nbsp;class&nbsp;*class,&nbsp;</span><span id="textcolor2977"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;*attr,</span> 
<a id="x1-61043r6"></a><span>6</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2978"><span>const</span></span><span>&nbsp;</span><span id="textcolor2979"><span>char</span></span><span>&nbsp;*buf,&nbsp;</span><span id="textcolor2980"><span>size_t</span></span><span>&nbsp;count);</span> 
<a id="x1-61045r7"></a><span>7</span><span>};</span></pre>
                                                                  

                                                                  
<!-- l. 2026 --><p>   In <span><span><span>vinput.c</span></span></span>, the macro <code>  <span>CLASS_ATTR_WO(export/unexport)</span>
</code> defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/device.h">include/linux/device.h</a> (in this case, <span><span><span>device.h</span></span></span> is included in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/input.h">include/linux/input.h</a>)
will generate the <code>  <span>class_attribute</span>
</code> structures which are named <span><span><span>class_attr_export/unexport</span></span></span>. Then, put them into
<code> <span>vinput_class_attrs</span>
</code> array and the macro <code>  <span>ATTRIBUTE_GROUPS(vinput_class)</span>
</code> will generate the <code>  <span id="textcolor2981"><span>struct</span></span><span>&nbsp;attribute_group&nbsp;vinput_class_group</span>
</code> that should be assigned in <code>  <span>vinput_class</span>
</code>. Finally, call <code>  <span>class_register(&amp;vinput_class)</span>
</code> to create attributes in sysfs.
</p><!-- l. 2030 --><p>   To create a <span><span><span>vinputX</span></span></span> sysfs entry and <span><span><span>/dev</span></span></span> node.
</p><!-- l. 1 -->
   <pre id="fancyvrb87"><a id="x1-61055r1"></a><span>1</span><span>echo&nbsp;</span><span id="textcolor2982"><span>"vkbd"</span></span><span>&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;/sys/class/vinput/export</span></pre>
<!-- l. 2036 --><p>   To unexport the device, just echo its id in unexport:
</p><!-- l. 1 -->
   <pre id="fancyvrb88"><a id="x1-61058r1"></a><span>1</span><span>echo&nbsp;</span><span id="textcolor2983"><span>"0"</span></span><span>&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;/sys/class/vinput/unexport</span></pre>

<!-- l. 1 -->
   <pre id="fancyvrb89"><a id="x1-61060r1"></a><span>1</span><span id="textcolor2984"><span>/*</span></span> 
<a id="x1-61062r2"></a><span>2</span><span id="textcolor2985"><span>&nbsp;*&nbsp;vinput.h</span></span> 
<a id="x1-61064r3"></a><span>3</span><span id="textcolor2986"><span>&nbsp;*/</span></span> 
<a id="x1-61066r4"></a><span>4</span> 
<a id="x1-61068r5"></a><span>5</span><span id="textcolor2987"><span>#ifndef&nbsp;VINPUT_H</span></span> 
<a id="x1-61070r6"></a><span>6</span><span id="textcolor2988"><span>#define&nbsp;VINPUT_H</span></span> 
<a id="x1-61072r7"></a><span>7</span> 
<a id="x1-61074r8"></a><span>8</span><span id="textcolor2989"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2990"><span>&lt;linux/input.h&gt;</span></span> 
<a id="x1-61076r9"></a><span>9</span><span id="textcolor2991"><span>#include</span></span><span>&nbsp;</span><span id="textcolor2992"><span>&lt;linux/spinlock.h&gt;</span></span> 
<a id="x1-61078r10"></a><span>10</span> 
<a id="x1-61080r11"></a><span>11</span><span id="textcolor2993"><span>#define&nbsp;VINPUT_MAX_LEN&nbsp;128</span></span> 
<a id="x1-61082r12"></a><span>12</span><span id="textcolor2994"><span>#define&nbsp;MAX_VINPUT&nbsp;32</span></span> 
<a id="x1-61084r13"></a><span>13</span><span id="textcolor2995"><span>#define&nbsp;VINPUT_MINORS&nbsp;MAX_VINPUT</span></span> 
<a id="x1-61086r14"></a><span>14</span> 
<a id="x1-61088r15"></a><span>15</span><span id="textcolor2996"><span>#define&nbsp;dev_to_vinput(dev)&nbsp;container_of(dev,&nbsp;struct&nbsp;vinput,&nbsp;dev)</span></span> 
<a id="x1-61090r16"></a><span>16</span> 
<a id="x1-61092r17"></a><span>17</span><span id="textcolor2997"><span>struct</span></span><span>&nbsp;vinput_device;</span> 
<a id="x1-61094r18"></a><span>18</span> 
<a id="x1-61096r19"></a><span>19</span><span id="textcolor2998"><span>struct</span></span><span>&nbsp;vinput&nbsp;{</span> 
<a id="x1-61098r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor2999"><span>long</span></span><span>&nbsp;id;</span> 
<a id="x1-61100r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3000"><span>long</span></span><span>&nbsp;devno;</span> 
<a id="x1-61102r22"></a><span>22</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3001"><span>long</span></span><span>&nbsp;last_entry;</span> 
<a id="x1-61104r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spinlock_t&nbsp;lock;</span> 
<a id="x1-61106r24"></a><span>24</span> 
<a id="x1-61108r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3002"><span>void</span></span><span>&nbsp;*priv_data;</span> 
<a id="x1-61110r26"></a><span>26</span> 
<a id="x1-61112r27"></a><span>27</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3003"><span>struct</span></span><span>&nbsp;device&nbsp;dev;</span> 
<a id="x1-61114r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3004"><span>struct</span></span><span>&nbsp;list_head&nbsp;list;</span> 
<a id="x1-61116r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3005"><span>struct</span></span><span>&nbsp;input_dev&nbsp;*input;</span> 
<a id="x1-61118r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3006"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*type;</span> 
<a id="x1-61120r31"></a><span>31</span><span>};</span> 
<a id="x1-61122r32"></a><span>32</span> 
<a id="x1-61124r33"></a><span>33</span><span id="textcolor3007"><span>struct</span></span><span>&nbsp;vinput_ops&nbsp;{</span> 
<a id="x1-61126r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3008"><span>int</span></span><span>&nbsp;(*init)(</span><span id="textcolor3009"><span>struct</span></span><span>&nbsp;vinput&nbsp;*);</span> 
<a id="x1-61128r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3010"><span>int</span></span><span>&nbsp;(*kill)(</span><span id="textcolor3011"><span>struct</span></span><span>&nbsp;vinput&nbsp;*);</span> 
<a id="x1-61130r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3012"><span>int</span></span><span>&nbsp;(*send)(</span><span id="textcolor3013"><span>struct</span></span><span>&nbsp;vinput&nbsp;*,&nbsp;</span><span id="textcolor3014"><span>char</span></span><span>&nbsp;*,&nbsp;</span><span id="textcolor3015"><span>int</span></span><span>);</span> 
<a id="x1-61132r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3016"><span>int</span></span><span>&nbsp;(*read)(</span><span id="textcolor3017"><span>struct</span></span><span>&nbsp;vinput&nbsp;*,&nbsp;</span><span id="textcolor3018"><span>char</span></span><span>&nbsp;*,&nbsp;</span><span id="textcolor3019"><span>int</span></span><span>);</span> 
<a id="x1-61134r38"></a><span>38</span><span>};</span> 
<a id="x1-61136r39"></a><span>39</span> 
<a id="x1-61138r40"></a><span>40</span><span id="textcolor3020"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;{</span> 
<a id="x1-61140r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3021"><span>char</span></span><span>&nbsp;name[16];</span> 
<a id="x1-61142r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3022"><span>struct</span></span><span>&nbsp;list_head&nbsp;list;</span> 
<a id="x1-61144r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3023"><span>struct</span></span><span>&nbsp;vinput_ops&nbsp;*ops;</span> 
<a id="x1-61146r44"></a><span>44</span><span>};</span> 
<a id="x1-61148r45"></a><span>45</span> 
<a id="x1-61150r46"></a><span>46</span><span id="textcolor3024"><span>int</span></span><span>&nbsp;vinput_register(</span><span id="textcolor3025"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*dev);</span> 
<a id="x1-61152r47"></a><span>47</span><span id="textcolor3026"><span>void</span></span><span>&nbsp;vinput_unregister(</span><span id="textcolor3027"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*dev);</span> 
<a id="x1-61154r48"></a><span>48</span> 
<a id="x1-61156r49"></a><span>49</span><span id="textcolor3028"><span>#endif</span></span></pre>

<!-- l. 1 -->
   <pre id="fancyvrb90"><a id="x1-61158r1"></a><span>1</span><span id="textcolor3029"><span>/*</span></span> 
<a id="x1-61160r2"></a><span>2</span><span id="textcolor3030"><span>&nbsp;*&nbsp;vinput.c</span></span> 
<a id="x1-61162r3"></a><span>3</span><span id="textcolor3031"><span>&nbsp;*/</span></span> 
<a id="x1-61164r4"></a><span>4</span> 
<a id="x1-61166r5"></a><span>5</span><span id="textcolor3032"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3033"><span>&lt;linux/cdev.h&gt;</span></span> 
<a id="x1-61168r6"></a><span>6</span><span id="textcolor3034"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3035"><span>&lt;linux/input.h&gt;</span></span> 
<a id="x1-61170r7"></a><span>7</span><span id="textcolor3036"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3037"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-61172r8"></a><span>8</span><span id="textcolor3038"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3039"><span>&lt;linux/slab.h&gt;</span></span> 
<a id="x1-61174r9"></a><span>9</span><span id="textcolor3040"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3041"><span>&lt;linux/spinlock.h&gt;</span></span> 
<a id="x1-61176r10"></a><span>10</span><span id="textcolor3042"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3043"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-61178r11"></a><span>11</span> 
<a id="x1-61180r12"></a><span>12</span><span id="textcolor3044"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3045"><span>&lt;asm/uaccess.h&gt;</span></span> 
<a id="x1-61182r13"></a><span>13</span> 
<a id="x1-61184r14"></a><span>14</span><span id="textcolor3046"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3047"><span>"vinput.h"</span></span> 
<a id="x1-61186r15"></a><span>15</span> 
<a id="x1-61188r16"></a><span>16</span><span id="textcolor3048"><span>#define&nbsp;DRIVER_NAME&nbsp;"vinput"</span></span> 
<a id="x1-61190r17"></a><span>17</span> 
<a id="x1-61192r18"></a><span>18</span><span id="textcolor3049"><span>#define&nbsp;dev_to_vinput(dev)&nbsp;container_of(dev,&nbsp;struct&nbsp;vinput,&nbsp;dev)</span></span> 
<a id="x1-61194r19"></a><span>19</span> 
<a id="x1-61196r20"></a><span>20</span><span id="textcolor3050"><span>static</span></span><span>&nbsp;DECLARE_BITMAP(vinput_ids,&nbsp;VINPUT_MINORS);</span> 
<a id="x1-61198r21"></a><span>21</span> 
<a id="x1-61200r22"></a><span>22</span><span id="textcolor3051"><span>static</span></span><span>&nbsp;LIST_HEAD(vinput_devices);</span> 
<a id="x1-61202r23"></a><span>23</span><span id="textcolor3052"><span>static</span></span><span>&nbsp;LIST_HEAD(vinput_vdevices);</span> 
<a id="x1-61204r24"></a><span>24</span> 
<a id="x1-61206r25"></a><span>25</span><span id="textcolor3053"><span>static</span></span><span>&nbsp;</span><span id="textcolor3054"><span>int</span></span><span>&nbsp;vinput_dev;</span> 
<a id="x1-61208r26"></a><span>26</span><span id="textcolor3055"><span>static</span></span><span>&nbsp;</span><span id="textcolor3056"><span>struct</span></span><span>&nbsp;spinlock&nbsp;vinput_lock;</span> 
<a id="x1-61210r27"></a><span>27</span><span id="textcolor3057"><span>static</span></span><span>&nbsp;</span><span id="textcolor3058"><span>struct</span></span><span>&nbsp;class&nbsp;vinput_class;</span> 
<a id="x1-61212r28"></a><span>28</span> 
<a id="x1-61214r29"></a><span>29</span><span id="textcolor3059"><span>/*&nbsp;Search&nbsp;the&nbsp;name&nbsp;of&nbsp;vinput&nbsp;device&nbsp;in&nbsp;the&nbsp;vinput_devices&nbsp;linked&nbsp;list,</span></span> 
<a id="x1-61216r30"></a><span>30</span><span id="textcolor3060"><span>&nbsp;*&nbsp;which&nbsp;added&nbsp;at&nbsp;vinput_register().</span></span> 
<a id="x1-61218r31"></a><span>31</span><span id="textcolor3061"><span>&nbsp;*/</span></span> 
<a id="x1-61220r32"></a><span>32</span><span id="textcolor3062"><span>static</span></span><span>&nbsp;</span><span id="textcolor3063"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*vinput_get_device_by_type(</span><span id="textcolor3064"><span>const</span></span><span>&nbsp;</span><span id="textcolor3065"><span>char</span></span><span>&nbsp;*type)</span> 
<a id="x1-61222r33"></a><span>33</span><span>{</span> 
<a id="x1-61224r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3066"><span>int</span></span><span>&nbsp;found&nbsp;=&nbsp;0;</span> 
<a id="x1-61226r35"></a><span>35</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3067"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*vinput;</span> 
<a id="x1-61228r36"></a><span>36</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3068"><span>struct</span></span><span>&nbsp;list_head&nbsp;*curr;</span> 
<a id="x1-61230r37"></a><span>37</span> 
<a id="x1-61232r38"></a><span>38</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61234r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_for_each&nbsp;(curr,&nbsp;&amp;vinput_devices)&nbsp;{</span> 
<a id="x1-61236r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vinput&nbsp;=&nbsp;list_entry(curr,&nbsp;</span><span id="textcolor3069"><span>struct</span></span><span>&nbsp;vinput_device,&nbsp;list);</span> 
<a id="x1-61238r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3070"><span>if</span></span><span>&nbsp;(vinput&nbsp;&amp;&amp;&nbsp;strncmp(type,&nbsp;vinput-&gt;name,&nbsp;strlen(vinput-&gt;name))&nbsp;==&nbsp;0)&nbsp;{</span> 
<a id="x1-61240r42"></a><span>42</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found&nbsp;=&nbsp;1;</span> 
<a id="x1-61242r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3071"><span>break</span></span><span>;</span> 
<a id="x1-61244r44"></a><span>44</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61246r45"></a><span>45</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61248r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61250r47"></a><span>47</span> 
<a id="x1-61252r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3072"><span>if</span></span><span>&nbsp;(found)</span> 
<a id="x1-61254r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3073"><span>return</span></span><span>&nbsp;vinput;</span> 
<a id="x1-61256r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3074"><span>return</span></span><span>&nbsp;ERR_PTR(-ENODEV);</span> 
<a id="x1-61258r51"></a><span>51</span><span>}</span> 
<a id="x1-61260r52"></a><span>52</span> 
<a id="x1-61262r53"></a><span>53</span><span id="textcolor3075"><span>/*&nbsp;Search&nbsp;the&nbsp;id&nbsp;of&nbsp;virtual&nbsp;device&nbsp;in&nbsp;the&nbsp;vinput_vdevices&nbsp;linked&nbsp;list,</span></span> 
<a id="x1-61264r54"></a><span>54</span><span id="textcolor3076"><span>&nbsp;*&nbsp;which&nbsp;added&nbsp;at&nbsp;vinput_alloc_vdevice().</span></span> 
<a id="x1-61266r55"></a><span>55</span><span id="textcolor3077"><span>&nbsp;*/</span></span> 
<a id="x1-61268r56"></a><span>56</span><span id="textcolor3078"><span>static</span></span><span>&nbsp;</span><span id="textcolor3079"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput_get_vdevice_by_id(</span><span id="textcolor3080"><span>long</span></span><span>&nbsp;id)</span> 
<a id="x1-61270r57"></a><span>57</span><span>{</span> 
<a id="x1-61272r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3081"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;NULL;</span> 
<a id="x1-61274r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3082"><span>struct</span></span><span>&nbsp;list_head&nbsp;*curr;</span> 
<a id="x1-61276r60"></a><span>60</span> 
<a id="x1-61278r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61280r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_for_each&nbsp;(curr,&nbsp;&amp;vinput_vdevices)&nbsp;{</span> 
<a id="x1-61282r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vinput&nbsp;=&nbsp;list_entry(curr,&nbsp;</span><span id="textcolor3083"><span>struct</span></span><span>&nbsp;vinput,&nbsp;list);</span> 
<a id="x1-61284r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3084"><span>if</span></span><span>&nbsp;(vinput&nbsp;&amp;&amp;&nbsp;vinput-&gt;id&nbsp;==&nbsp;id)</span> 
<a id="x1-61286r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3085"><span>break</span></span><span>;</span> 
<a id="x1-61288r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61290r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61292r68"></a><span>68</span> 
<a id="x1-61294r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3086"><span>if</span></span><span>&nbsp;(vinput&nbsp;&amp;&amp;&nbsp;vinput-&gt;id&nbsp;==&nbsp;id)</span> 
<a id="x1-61296r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3087"><span>return</span></span><span>&nbsp;vinput;</span> 
<a id="x1-61298r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3088"><span>return</span></span><span>&nbsp;ERR_PTR(-ENODEV);</span> 
<a id="x1-61300r72"></a><span>72</span><span>}</span> 
<a id="x1-61302r73"></a><span>73</span> 
<a id="x1-61304r74"></a><span>74</span><span id="textcolor3089"><span>static</span></span><span>&nbsp;</span><span id="textcolor3090"><span>int</span></span><span>&nbsp;vinput_open(</span><span id="textcolor3091"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor3092"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-61306r75"></a><span>75</span><span>{</span> 
<a id="x1-61308r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3093"><span>int</span></span><span>&nbsp;err&nbsp;=&nbsp;0;</span> 
<a id="x1-61310r77"></a><span>77</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3094"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;NULL;</span> 
<a id="x1-61312r78"></a><span>78</span> 
<a id="x1-61314r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput&nbsp;=&nbsp;vinput_get_vdevice_by_id(iminor(inode));</span> 
<a id="x1-61316r80"></a><span>80</span> 
<a id="x1-61318r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3095"><span>if</span></span><span>&nbsp;(IS_ERR(vinput))</span> 
<a id="x1-61320r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;PTR_ERR(vinput);</span> 
<a id="x1-61322r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3096"><span>else</span></span> 
<a id="x1-61324r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;private_data&nbsp;=&nbsp;vinput;</span> 
<a id="x1-61326r85"></a><span>85</span> 
<a id="x1-61328r86"></a><span>86</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3097"><span>return</span></span><span>&nbsp;err;</span> 
<a id="x1-61330r87"></a><span>87</span><span>}</span> 
<a id="x1-61332r88"></a><span>88</span> 
<a id="x1-61334r89"></a><span>89</span><span id="textcolor3098"><span>static</span></span><span>&nbsp;</span><span id="textcolor3099"><span>int</span></span><span>&nbsp;vinput_release(</span><span id="textcolor3100"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor3101"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-61336r90"></a><span>90</span><span>{</span> 
<a id="x1-61338r91"></a><span>91</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3102"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-61340r92"></a><span>92</span><span>}</span> 
<a id="x1-61342r93"></a><span>93</span> 
<a id="x1-61344r94"></a><span>94</span><span id="textcolor3103"><span>static</span></span><span>&nbsp;</span><span id="textcolor3104"><span>ssize_t</span></span><span>&nbsp;vinput_read(</span><span id="textcolor3105"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor3106"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,&nbsp;</span><span id="textcolor3107"><span>size_t</span></span><span>&nbsp;count,</span> 
<a id="x1-61346r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-61348r96"></a><span>96</span><span>{</span> 
<a id="x1-61350r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3108"><span>int</span></span><span>&nbsp;len;</span> 
<a id="x1-61352r98"></a><span>98</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3109"><span>char</span></span><span>&nbsp;buff[VINPUT_MAX_LEN&nbsp;+&nbsp;1];</span> 
<a id="x1-61354r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3110"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;file-&gt;private_data;</span> 
<a id="x1-61356r100"></a><span>100</span> 
<a id="x1-61358r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;=&nbsp;vinput-&gt;type-&gt;ops-&gt;read(vinput,&nbsp;buff,&nbsp;count);</span> 
<a id="x1-61360r102"></a><span>102</span> 
<a id="x1-61362r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3111"><span>if</span></span><span>&nbsp;(*offset&nbsp;&gt;&nbsp;len)</span> 
<a id="x1-61364r104"></a><span>104</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;=&nbsp;0;</span> 
<a id="x1-61366r105"></a><span>105</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3112"><span>else</span></span><span>&nbsp;</span><span id="textcolor3113"><span>if</span></span><span>&nbsp;(count&nbsp;+&nbsp;*offset&nbsp;&gt;&nbsp;VINPUT_MAX_LEN)</span> 
<a id="x1-61368r106"></a><span>106</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;=&nbsp;len&nbsp;-&nbsp;*offset;</span> 
<a id="x1-61370r107"></a><span>107</span> 
<a id="x1-61372r108"></a><span>108</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3114"><span>if</span></span><span>&nbsp;(raw_copy_to_user(buffer,&nbsp;buff&nbsp;+&nbsp;*offset,&nbsp;count))</span> 
<a id="x1-61374r109"></a><span>109</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3115"><span>return</span></span><span>&nbsp;-EFAULT;</span> 
<a id="x1-61376r110"></a><span>110</span> 
<a id="x1-61378r111"></a><span>111</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;count;</span> 
<a id="x1-61380r112"></a><span>112</span> 
<a id="x1-61382r113"></a><span>113</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3116"><span>return</span></span><span>&nbsp;count;</span> 
<a id="x1-61384r114"></a><span>114</span><span>}</span> 
<a id="x1-61386r115"></a><span>115</span> 
<a id="x1-61388r116"></a><span>116</span><span id="textcolor3117"><span>static</span></span><span>&nbsp;</span><span id="textcolor3118"><span>ssize_t</span></span><span>&nbsp;vinput_write(</span><span id="textcolor3119"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor3120"><span>const</span></span><span>&nbsp;</span><span id="textcolor3121"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-61390r117"></a><span>117</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3122"><span>size_t</span></span><span>&nbsp;count,&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-61392r118"></a><span>118</span><span>{</span> 
<a id="x1-61394r119"></a><span>119</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3123"><span>char</span></span><span>&nbsp;buff[VINPUT_MAX_LEN&nbsp;+&nbsp;1];</span> 
<a id="x1-61396r120"></a><span>120</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3124"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;file-&gt;private_data;</span> 
<a id="x1-61398r121"></a><span>121</span> 
<a id="x1-61400r122"></a><span>122</span><span>&nbsp;&nbsp;&nbsp;&nbsp;memset(buff,&nbsp;0,&nbsp;</span><span id="textcolor3125"><span>sizeof</span></span><span>(</span><span id="textcolor3126"><span>char</span></span><span>)&nbsp;*&nbsp;(VINPUT_MAX_LEN&nbsp;+&nbsp;1));</span> 
<a id="x1-61402r123"></a><span>123</span> 
<a id="x1-61404r124"></a><span>124</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3127"><span>if</span></span><span>&nbsp;(count&nbsp;&gt;&nbsp;VINPUT_MAX_LEN)&nbsp;{</span> 
<a id="x1-61406r125"></a><span>125</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev_warn(&amp;vinput-&gt;dev,&nbsp;</span><span id="textcolor3128"><span>"Too&nbsp;long.&nbsp;%d&nbsp;bytes&nbsp;allowed</span></span><span id="textcolor3129"><span>\n</span></span><span id="textcolor3130"><span>"</span></span><span>,&nbsp;VINPUT_MAX_LEN);</span> 
<a id="x1-61408r126"></a><span>126</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3131"><span>return</span></span><span>&nbsp;-EINVAL;</span> 
<a id="x1-61410r127"></a><span>127</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61412r128"></a><span>128</span> 
<a id="x1-61414r129"></a><span>129</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3132"><span>if</span></span><span>&nbsp;(raw_copy_from_user(buff,&nbsp;buffer,&nbsp;count))</span> 
<a id="x1-61416r130"></a><span>130</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3133"><span>return</span></span><span>&nbsp;-EFAULT;</span> 
<a id="x1-61418r131"></a><span>131</span> 
<a id="x1-61420r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3134"><span>return</span></span><span>&nbsp;vinput-&gt;type-&gt;ops-&gt;send(vinput,&nbsp;buff,&nbsp;count);</span> 
<a id="x1-61422r133"></a><span>133</span><span>}</span> 
<a id="x1-61424r134"></a><span>134</span> 
<a id="x1-61426r135"></a><span>135</span><span id="textcolor3135"><span>static</span></span><span>&nbsp;</span><span id="textcolor3136"><span>const</span></span><span>&nbsp;</span><span id="textcolor3137"><span>struct</span></span><span>&nbsp;file_operations&nbsp;vinput_fops&nbsp;=&nbsp;{</span> 
<a id="x1-61428r136"></a><span>136</span><span id="textcolor3138"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&lt;&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-61430r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.owner&nbsp;=&nbsp;THIS_MODULE,</span> 
<a id="x1-61432r138"></a><span>138</span><span id="textcolor3139"><span>#endif</span></span> 
<a id="x1-61434r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;vinput_open,</span> 
<a id="x1-61436r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;vinput_release,</span> 
<a id="x1-61438r141"></a><span>141</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;vinput_read,</span> 
<a id="x1-61440r142"></a><span>142</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;vinput_write,</span> 
<a id="x1-61442r143"></a><span>143</span><span>};</span> 
<a id="x1-61444r144"></a><span>144</span> 
<a id="x1-61446r145"></a><span>145</span><span id="textcolor3140"><span>static</span></span><span>&nbsp;</span><span id="textcolor3141"><span>void</span></span><span>&nbsp;vinput_unregister_vdevice(</span><span id="textcolor3142"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput)</span> 
<a id="x1-61448r146"></a><span>146</span><span>{</span> 
<a id="x1-61450r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;input_unregister_device(vinput-&gt;input);</span> 
<a id="x1-61452r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3143"><span>if</span></span><span>&nbsp;(vinput-&gt;type-&gt;ops-&gt;kill)</span> 
<a id="x1-61454r149"></a><span>149</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;type-&gt;ops-&gt;kill(vinput);</span> 
<a id="x1-61456r150"></a><span>150</span><span>}</span> 
<a id="x1-61458r151"></a><span>151</span> 
<a id="x1-61460r152"></a><span>152</span><span id="textcolor3144"><span>static</span></span><span>&nbsp;</span><span id="textcolor3145"><span>void</span></span><span>&nbsp;vinput_destroy_vdevice(</span><span id="textcolor3146"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput)</span> 
<a id="x1-61462r153"></a><span>153</span><span>{</span> 
<a id="x1-61464r154"></a><span>154</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3147"><span>/*&nbsp;Remove&nbsp;from&nbsp;the&nbsp;list&nbsp;first&nbsp;*/</span></span> 
<a id="x1-61466r155"></a><span>155</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61468r156"></a><span>156</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_del(&amp;vinput-&gt;list);</span> 
<a id="x1-61470r157"></a><span>157</span><span>&nbsp;&nbsp;&nbsp;&nbsp;clear_bit(vinput-&gt;id,&nbsp;vinput_ids);</span> 
<a id="x1-61472r158"></a><span>158</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61474r159"></a><span>159</span> 
<a id="x1-61476r160"></a><span>160</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-61478r161"></a><span>161</span> 
<a id="x1-61480r162"></a><span>162</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kfree(vinput);</span> 
<a id="x1-61482r163"></a><span>163</span><span>}</span> 
<a id="x1-61484r164"></a><span>164</span> 
<a id="x1-61486r165"></a><span>165</span><span id="textcolor3148"><span>static</span></span><span>&nbsp;</span><span id="textcolor3149"><span>void</span></span><span>&nbsp;vinput_release_dev(</span><span id="textcolor3150"><span>struct</span></span><span>&nbsp;device&nbsp;*dev)</span> 
<a id="x1-61488r166"></a><span>166</span><span>{</span> 
<a id="x1-61490r167"></a><span>167</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3151"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;dev_to_vinput(dev);</span> 
<a id="x1-61492r168"></a><span>168</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3152"><span>int</span></span><span>&nbsp;id&nbsp;=&nbsp;vinput-&gt;id;</span> 
<a id="x1-61494r169"></a><span>169</span> 
<a id="x1-61496r170"></a><span>170</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput_destroy_vdevice(vinput);</span> 
<a id="x1-61498r171"></a><span>171</span> 
<a id="x1-61500r172"></a><span>172</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_debug(</span><span id="textcolor3153"><span>"released&nbsp;vinput%d.</span></span><span id="textcolor3154"><span>\n</span></span><span id="textcolor3155"><span>"</span></span><span>,&nbsp;id);</span> 
<a id="x1-61502r173"></a><span>173</span><span>}</span> 
<a id="x1-61504r174"></a><span>174</span> 
<a id="x1-61506r175"></a><span>175</span><span id="textcolor3156"><span>static</span></span><span>&nbsp;</span><span id="textcolor3157"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput_alloc_vdevice(</span><span id="textcolor3158"><span>void</span></span><span>)</span> 
<a id="x1-61508r176"></a><span>176</span><span>{</span> 
<a id="x1-61510r177"></a><span>177</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3159"><span>int</span></span><span>&nbsp;err;</span> 
<a id="x1-61512r178"></a><span>178</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3160"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;kzalloc(</span><span id="textcolor3161"><span>sizeof</span></span><span>(</span><span id="textcolor3162"><span>struct</span></span><span>&nbsp;vinput),&nbsp;GFP_KERNEL);</span> 
<a id="x1-61514r179"></a><span>179</span> 
<a id="x1-61516r180"></a><span>180</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3163"><span>if</span></span><span>&nbsp;(!vinput)&nbsp;{</span> 
<a id="x1-61518r181"></a><span>181</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3164"><span>"vinput:&nbsp;Cannot&nbsp;allocate&nbsp;vinput&nbsp;input&nbsp;device</span></span><span id="textcolor3165"><span>\n</span></span><span id="textcolor3166"><span>"</span></span><span>);</span> 
<a id="x1-61520r182"></a><span>182</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3167"><span>return</span></span><span>&nbsp;ERR_PTR(-ENOMEM);</span> 
<a id="x1-61522r183"></a><span>183</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61524r184"></a><span>184</span> 
<a id="x1-61526r185"></a><span>185</span><span>&nbsp;&nbsp;&nbsp;&nbsp;try_module_get(THIS_MODULE);</span> 
<a id="x1-61528r186"></a><span>186</span> 
<a id="x1-61530r187"></a><span>187</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock_init(&amp;vinput-&gt;lock);</span> 
<a id="x1-61532r188"></a><span>188</span> 
<a id="x1-61534r189"></a><span>189</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61536r190"></a><span>190</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;id&nbsp;=&nbsp;find_first_zero_bit(vinput_ids,&nbsp;VINPUT_MINORS);</span> 
<a id="x1-61538r191"></a><span>191</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3168"><span>if</span></span><span>&nbsp;(vinput-&gt;id&nbsp;&gt;=&nbsp;VINPUT_MINORS)&nbsp;{</span> 
<a id="x1-61540r192"></a><span>192</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;-ENOBUFS;</span> 
<a id="x1-61542r193"></a><span>193</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3169"><span>goto</span></span><span>&nbsp;fail_id;</span> 
<a id="x1-61544r194"></a><span>194</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61546r195"></a><span>195</span><span>&nbsp;&nbsp;&nbsp;&nbsp;set_bit(vinput-&gt;id,&nbsp;vinput_ids);</span> 
<a id="x1-61548r196"></a><span>196</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_add(&amp;vinput-&gt;list,&nbsp;&amp;vinput_vdevices);</span> 
<a id="x1-61550r197"></a><span>197</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61552r198"></a><span>198</span> 
<a id="x1-61554r199"></a><span>199</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3170"><span>/*&nbsp;allocate&nbsp;the&nbsp;input&nbsp;device&nbsp;*/</span></span> 
<a id="x1-61556r200"></a><span>200</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input&nbsp;=&nbsp;input_allocate_device();</span> 
<a id="x1-61558r201"></a><span>201</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3171"><span>if</span></span><span>&nbsp;(vinput-&gt;input&nbsp;==&nbsp;NULL)&nbsp;{</span> 
<a id="x1-61560r202"></a><span>202</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3172"><span>"vinput:&nbsp;Cannot&nbsp;allocate&nbsp;vinput&nbsp;input&nbsp;device</span></span><span id="textcolor3173"><span>\n</span></span><span id="textcolor3174"><span>"</span></span><span>);</span> 
<a id="x1-61562r203"></a><span>203</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;-ENOMEM;</span> 
<a id="x1-61564r204"></a><span>204</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3175"><span>goto</span></span><span>&nbsp;fail_input_dev;</span> 
<a id="x1-61566r205"></a><span>205</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61568r206"></a><span>206</span> 
<a id="x1-61570r207"></a><span>207</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3176"><span>/*&nbsp;initialize&nbsp;device&nbsp;*/</span></span> 
<a id="x1-61572r208"></a><span>208</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;dev.class&nbsp;=&nbsp;&amp;vinput_class;</span> 
<a id="x1-61574r209"></a><span>209</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;dev.release&nbsp;=&nbsp;vinput_release_dev;</span> 
<a id="x1-61576r210"></a><span>210</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;dev.devt&nbsp;=&nbsp;MKDEV(vinput_dev,&nbsp;vinput-&gt;id);</span> 
<a id="x1-61578r211"></a><span>211</span><span>&nbsp;&nbsp;&nbsp;&nbsp;dev_set_name(&amp;vinput-&gt;dev,&nbsp;DRIVER_NAME&nbsp;</span><span id="textcolor3177"><span>"%lu"</span></span><span>,&nbsp;vinput-&gt;id);</span> 
<a id="x1-61580r212"></a><span>212</span> 
<a id="x1-61582r213"></a><span>213</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3178"><span>return</span></span><span>&nbsp;vinput;</span> 
<a id="x1-61584r214"></a><span>214</span> 
<a id="x1-61586r215"></a><span>215</span><span>fail_input_dev:</span> 
<a id="x1-61588r216"></a><span>216</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61590r217"></a><span>217</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_del(&amp;vinput-&gt;list);</span> 
<a id="x1-61592r218"></a><span>218</span><span>fail_id:</span> 
<a id="x1-61594r219"></a><span>219</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61596r220"></a><span>220</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-61598r221"></a><span>221</span><span>&nbsp;&nbsp;&nbsp;&nbsp;kfree(vinput);</span> 
<a id="x1-61600r222"></a><span>222</span> 
<a id="x1-61602r223"></a><span>223</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3179"><span>return</span></span><span>&nbsp;ERR_PTR(err);</span> 
<a id="x1-61604r224"></a><span>224</span><span>}</span> 
<a id="x1-61606r225"></a><span>225</span> 
<a id="x1-61608r226"></a><span>226</span><span id="textcolor3180"><span>static</span></span><span>&nbsp;</span><span id="textcolor3181"><span>int</span></span><span>&nbsp;vinput_register_vdevice(</span><span id="textcolor3182"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput)</span> 
<a id="x1-61610r227"></a><span>227</span><span>{</span> 
<a id="x1-61612r228"></a><span>228</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3183"><span>int</span></span><span>&nbsp;err&nbsp;=&nbsp;0;</span> 
<a id="x1-61614r229"></a><span>229</span> 
<a id="x1-61616r230"></a><span>230</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3184"><span>/*&nbsp;register&nbsp;the&nbsp;input&nbsp;device&nbsp;*/</span></span> 
<a id="x1-61618r231"></a><span>231</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;name&nbsp;=&nbsp;vinput-&gt;type-&gt;name;</span> 
<a id="x1-61620r232"></a><span>232</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;phys&nbsp;=&nbsp;</span><span id="textcolor3185"><span>"vinput"</span></span><span>;</span> 
<a id="x1-61622r233"></a><span>233</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;dev.parent&nbsp;=&nbsp;&amp;vinput-&gt;dev;</span> 
<a id="x1-61624r234"></a><span>234</span> 
<a id="x1-61626r235"></a><span>235</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;id.bustype&nbsp;=&nbsp;BUS_VIRTUAL;</span> 
<a id="x1-61628r236"></a><span>236</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;id.product&nbsp;=&nbsp;0x0000;</span> 
<a id="x1-61630r237"></a><span>237</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;id.vendor&nbsp;=&nbsp;0x0000;</span> 
<a id="x1-61632r238"></a><span>238</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;id.version&nbsp;=&nbsp;0x0000;</span> 
<a id="x1-61634r239"></a><span>239</span> 
<a id="x1-61636r240"></a><span>240</span><span>&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;vinput-&gt;type-&gt;ops-&gt;init(vinput);</span> 
<a id="x1-61638r241"></a><span>241</span> 
<a id="x1-61640r242"></a><span>242</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3186"><span>if</span></span><span>&nbsp;(err&nbsp;==&nbsp;0)</span> 
<a id="x1-61642r243"></a><span>243</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev_info(&amp;vinput-&gt;dev,&nbsp;</span><span id="textcolor3187"><span>"Registered&nbsp;virtual&nbsp;input&nbsp;%s&nbsp;%ld</span></span><span id="textcolor3188"><span>\n</span></span><span id="textcolor3189"><span>"</span></span><span>,</span> 
<a id="x1-61644r244"></a><span>244</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;type-&gt;name,&nbsp;vinput-&gt;id);</span> 
<a id="x1-61646r245"></a><span>245</span> 
<a id="x1-61648r246"></a><span>246</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3190"><span>return</span></span><span>&nbsp;err;</span> 
<a id="x1-61650r247"></a><span>247</span><span>}</span> 
<a id="x1-61652r248"></a><span>248</span> 
<a id="x1-61654r249"></a><span>249</span><span id="textcolor3191"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-61656r250"></a><span>250</span><span id="textcolor3192"><span>static</span></span><span>&nbsp;</span><span id="textcolor3193"><span>ssize_t</span></span><span>&nbsp;export_store(</span><span id="textcolor3194"><span>const</span></span><span>&nbsp;</span><span id="textcolor3195"><span>struct</span></span><span>&nbsp;class&nbsp;*class,</span> 
<a id="x1-61658r251"></a><span>251</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3196"><span>const</span></span><span>&nbsp;</span><span id="textcolor3197"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;*attr,</span> 
<a id="x1-61660r252"></a><span>252</span><span id="textcolor3198"><span>#else</span></span> 
<a id="x1-61662r253"></a><span>253</span><span id="textcolor3199"><span>static</span></span><span>&nbsp;</span><span id="textcolor3200"><span>ssize_t</span></span><span>&nbsp;export_store(</span><span id="textcolor3201"><span>struct</span></span><span>&nbsp;class&nbsp;*class,&nbsp;</span><span id="textcolor3202"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;*attr,</span> 
<a id="x1-61664r254"></a><span>254</span><span id="textcolor3203"><span>#endif</span></span> 
<a id="x1-61666r255"></a><span>255</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3204"><span>const</span></span><span>&nbsp;</span><span id="textcolor3205"><span>char</span></span><span>&nbsp;*buf,&nbsp;</span><span id="textcolor3206"><span>size_t</span></span><span>&nbsp;len)</span> 
<a id="x1-61668r256"></a><span>256</span><span>{</span> 
<a id="x1-61670r257"></a><span>257</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3207"><span>int</span></span><span>&nbsp;err;</span> 
<a id="x1-61672r258"></a><span>258</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3208"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput;</span> 
<a id="x1-61674r259"></a><span>259</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3209"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*device;</span> 
<a id="x1-61676r260"></a><span>260</span> 
<a id="x1-61678r261"></a><span>261</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device&nbsp;=&nbsp;vinput_get_device_by_type(buf);</span> 
<a id="x1-61680r262"></a><span>262</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3210"><span>if</span></span><span>&nbsp;(IS_ERR(device))&nbsp;{</span> 
<a id="x1-61682r263"></a><span>263</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3211"><span>"vinput:&nbsp;This&nbsp;virtual&nbsp;device&nbsp;isn</span><span>'</span><span>t&nbsp;registered</span></span><span id="textcolor3212"><span>\n</span></span><span id="textcolor3213"><span>"</span></span><span>);</span> 
<a id="x1-61684r264"></a><span>264</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;PTR_ERR(device);</span> 
<a id="x1-61686r265"></a><span>265</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3214"><span>goto</span></span><span>&nbsp;fail;</span> 
<a id="x1-61688r266"></a><span>266</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61690r267"></a><span>267</span> 
<a id="x1-61692r268"></a><span>268</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput&nbsp;=&nbsp;vinput_alloc_vdevice();</span> 
<a id="x1-61694r269"></a><span>269</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3215"><span>if</span></span><span>&nbsp;(IS_ERR(vinput))&nbsp;{</span> 
<a id="x1-61696r270"></a><span>270</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;PTR_ERR(vinput);</span> 
<a id="x1-61698r271"></a><span>271</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3216"><span>goto</span></span><span>&nbsp;fail;</span> 
<a id="x1-61700r272"></a><span>272</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61702r273"></a><span>273</span> 
<a id="x1-61704r274"></a><span>274</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;type&nbsp;=&nbsp;device;</span> 
<a id="x1-61706r275"></a><span>275</span><span>&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;device_register(&amp;vinput-&gt;dev);</span> 
<a id="x1-61708r276"></a><span>276</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3217"><span>if</span></span><span>&nbsp;(err&nbsp;&lt;&nbsp;0)</span> 
<a id="x1-61710r277"></a><span>277</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3218"><span>goto</span></span><span>&nbsp;fail_register;</span> 
<a id="x1-61712r278"></a><span>278</span> 
<a id="x1-61714r279"></a><span>279</span><span>&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;vinput_register_vdevice(vinput);</span> 
<a id="x1-61716r280"></a><span>280</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3219"><span>if</span></span><span>&nbsp;(err&nbsp;&lt;&nbsp;0)</span> 
<a id="x1-61718r281"></a><span>281</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3220"><span>goto</span></span><span>&nbsp;fail_register_vinput;</span> 
<a id="x1-61720r282"></a><span>282</span> 
<a id="x1-61722r283"></a><span>283</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3221"><span>return</span></span><span>&nbsp;len;</span> 
<a id="x1-61724r284"></a><span>284</span> 
<a id="x1-61726r285"></a><span>285</span><span>fail_register_vinput:</span> 
<a id="x1-61728r286"></a><span>286</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_unregister(&amp;vinput-&gt;dev);</span> 
<a id="x1-61730r287"></a><span>287</span><span>fail_register:</span> 
<a id="x1-61732r288"></a><span>288</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput_destroy_vdevice(vinput);</span> 
<a id="x1-61734r289"></a><span>289</span><span>fail:</span> 
<a id="x1-61736r290"></a><span>290</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3222"><span>return</span></span><span>&nbsp;err;</span> 
<a id="x1-61738r291"></a><span>291</span><span>}</span> 
<a id="x1-61740r292"></a><span>292</span><span id="textcolor3223"><span>/*&nbsp;This&nbsp;macro&nbsp;generates&nbsp;class_attr_export&nbsp;structure&nbsp;and&nbsp;export_store()&nbsp;*/</span></span> 
<a id="x1-61742r293"></a><span>293</span><span id="textcolor3224"><span>static</span></span><span>&nbsp;CLASS_ATTR_WO(export);</span> 
<a id="x1-61744r294"></a><span>294</span> 
<a id="x1-61746r295"></a><span>295</span><span id="textcolor3225"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&gt;=&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-61748r296"></a><span>296</span><span id="textcolor3226"><span>static</span></span><span>&nbsp;</span><span id="textcolor3227"><span>ssize_t</span></span><span>&nbsp;unexport_store(</span><span id="textcolor3228"><span>const</span></span><span>&nbsp;</span><span id="textcolor3229"><span>struct</span></span><span>&nbsp;class&nbsp;*class,</span> 
<a id="x1-61750r297"></a><span>297</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3230"><span>const</span></span><span>&nbsp;</span><span id="textcolor3231"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;*attr,</span> 
<a id="x1-61752r298"></a><span>298</span><span id="textcolor3232"><span>#else</span></span> 
<a id="x1-61754r299"></a><span>299</span><span id="textcolor3233"><span>static</span></span><span>&nbsp;</span><span id="textcolor3234"><span>ssize_t</span></span><span>&nbsp;unexport_store(</span><span id="textcolor3235"><span>struct</span></span><span>&nbsp;class&nbsp;*class,&nbsp;</span><span id="textcolor3236"><span>struct</span></span><span>&nbsp;class_attribute&nbsp;*attr,</span> 
<a id="x1-61756r300"></a><span>300</span><span id="textcolor3237"><span>#endif</span></span> 
<a id="x1-61758r301"></a><span>301</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3238"><span>const</span></span><span>&nbsp;</span><span id="textcolor3239"><span>char</span></span><span>&nbsp;*buf,&nbsp;</span><span id="textcolor3240"><span>size_t</span></span><span>&nbsp;len)</span> 
<a id="x1-61760r302"></a><span>302</span><span>{</span> 
<a id="x1-61762r303"></a><span>303</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3241"><span>int</span></span><span>&nbsp;err;</span> 
<a id="x1-61764r304"></a><span>304</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3242"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor3243"><span>long</span></span><span>&nbsp;id;</span> 
<a id="x1-61766r305"></a><span>305</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3244"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput;</span> 
<a id="x1-61768r306"></a><span>306</span> 
<a id="x1-61770r307"></a><span>307</span><span>&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;kstrtol(buf,&nbsp;10,&nbsp;&amp;id);</span> 
<a id="x1-61772r308"></a><span>308</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3245"><span>if</span></span><span>&nbsp;(err)&nbsp;{</span> 
<a id="x1-61774r309"></a><span>309</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;-EINVAL;</span> 
<a id="x1-61776r310"></a><span>310</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3246"><span>goto</span></span><span>&nbsp;failed;</span> 
<a id="x1-61778r311"></a><span>311</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61780r312"></a><span>312</span> 
<a id="x1-61782r313"></a><span>313</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput&nbsp;=&nbsp;vinput_get_vdevice_by_id(id);</span> 
<a id="x1-61784r314"></a><span>314</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3247"><span>if</span></span><span>&nbsp;(IS_ERR(vinput))&nbsp;{</span> 
<a id="x1-61786r315"></a><span>315</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3248"><span>"vinput:&nbsp;No&nbsp;such&nbsp;vinput&nbsp;device&nbsp;%ld</span></span><span id="textcolor3249"><span>\n</span></span><span id="textcolor3250"><span>"</span></span><span>,&nbsp;id);</span> 
<a id="x1-61788r316"></a><span>316</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;PTR_ERR(vinput);</span> 
<a id="x1-61790r317"></a><span>317</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3251"><span>goto</span></span><span>&nbsp;failed;</span> 
<a id="x1-61792r318"></a><span>318</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61794r319"></a><span>319</span> 
<a id="x1-61796r320"></a><span>320</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput_unregister_vdevice(vinput);</span> 
<a id="x1-61798r321"></a><span>321</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_unregister(&amp;vinput-&gt;dev);</span> 
<a id="x1-61800r322"></a><span>322</span> 
<a id="x1-61802r323"></a><span>323</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3252"><span>return</span></span><span>&nbsp;len;</span> 
<a id="x1-61804r324"></a><span>324</span><span>failed:</span> 
<a id="x1-61806r325"></a><span>325</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3253"><span>return</span></span><span>&nbsp;err;</span> 
<a id="x1-61808r326"></a><span>326</span><span>}</span> 
<a id="x1-61810r327"></a><span>327</span><span id="textcolor3254"><span>/*&nbsp;This&nbsp;macro&nbsp;generates&nbsp;class_attr_unexport&nbsp;structure&nbsp;and&nbsp;unexport_store()&nbsp;*/</span></span> 
<a id="x1-61812r328"></a><span>328</span><span id="textcolor3255"><span>static</span></span><span>&nbsp;CLASS_ATTR_WO(unexport);</span> 
<a id="x1-61814r329"></a><span>329</span> 
<a id="x1-61816r330"></a><span>330</span><span id="textcolor3256"><span>static</span></span><span>&nbsp;</span><span id="textcolor3257"><span>struct</span></span><span>&nbsp;attribute&nbsp;*vinput_class_attrs[]&nbsp;=&nbsp;{</span> 
<a id="x1-61818r331"></a><span>331</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&amp;class_attr_export.attr,</span> 
<a id="x1-61820r332"></a><span>332</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&amp;class_attr_unexport.attr,</span> 
<a id="x1-61822r333"></a><span>333</span><span>&nbsp;&nbsp;&nbsp;&nbsp;NULL,</span> 
<a id="x1-61824r334"></a><span>334</span><span>};</span> 
<a id="x1-61826r335"></a><span>335</span> 
<a id="x1-61828r336"></a><span>336</span><span id="textcolor3258"><span>/*&nbsp;This&nbsp;macro&nbsp;generates&nbsp;vinput_class_groups&nbsp;structure&nbsp;*/</span></span> 
<a id="x1-61830r337"></a><span>337</span><span>ATTRIBUTE_GROUPS(vinput_class);</span> 
<a id="x1-61832r338"></a><span>338</span> 
<a id="x1-61834r339"></a><span>339</span><span id="textcolor3259"><span>static</span></span><span>&nbsp;</span><span id="textcolor3260"><span>struct</span></span><span>&nbsp;class&nbsp;vinput_class&nbsp;=&nbsp;{</span> 
<a id="x1-61836r340"></a><span>340</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.name&nbsp;=&nbsp;</span><span id="textcolor3261"><span>"vinput"</span></span><span>,</span> 
<a id="x1-61838r341"></a><span>341</span><span id="textcolor3262"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&lt;&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-61840r342"></a><span>342</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.owner&nbsp;=&nbsp;THIS_MODULE,</span> 
<a id="x1-61842r343"></a><span>343</span><span id="textcolor3263"><span>#endif</span></span> 
<a id="x1-61844r344"></a><span>344</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.class_groups&nbsp;=&nbsp;vinput_class_groups,</span> 
<a id="x1-61846r345"></a><span>345</span><span>};</span> 
<a id="x1-61848r346"></a><span>346</span> 
<a id="x1-61850r347"></a><span>347</span><span id="textcolor3264"><span>int</span></span><span>&nbsp;vinput_register(</span><span id="textcolor3265"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*dev)</span> 
<a id="x1-61852r348"></a><span>348</span><span>{</span> 
<a id="x1-61854r349"></a><span>349</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61856r350"></a><span>350</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_add(&amp;dev-&gt;list,&nbsp;&amp;vinput_devices);</span> 
<a id="x1-61858r351"></a><span>351</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61860r352"></a><span>352</span> 
<a id="x1-61862r353"></a><span>353</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3266"><span>"vinput:&nbsp;registered&nbsp;new&nbsp;virtual&nbsp;input&nbsp;device&nbsp;</span><span>'</span><span>%s</span><span>'</span></span><span id="textcolor3267"><span>\n</span></span><span id="textcolor3268"><span>"</span></span><span>,&nbsp;dev-&gt;name);</span> 
<a id="x1-61864r354"></a><span>354</span> 
<a id="x1-61866r355"></a><span>355</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3269"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-61868r356"></a><span>356</span><span>}</span> 
<a id="x1-61870r357"></a><span>357</span><span>EXPORT_SYMBOL(vinput_register);</span> 
<a id="x1-61872r358"></a><span>358</span> 
<a id="x1-61874r359"></a><span>359</span><span id="textcolor3270"><span>void</span></span><span>&nbsp;vinput_unregister(</span><span id="textcolor3271"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;*dev)</span> 
<a id="x1-61876r360"></a><span>360</span><span>{</span> 
<a id="x1-61878r361"></a><span>361</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3272"><span>struct</span></span><span>&nbsp;list_head&nbsp;*curr,&nbsp;*next;</span> 
<a id="x1-61880r362"></a><span>362</span> 
<a id="x1-61882r363"></a><span>363</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3273"><span>/*&nbsp;Remove&nbsp;from&nbsp;the&nbsp;list&nbsp;first&nbsp;*/</span></span> 
<a id="x1-61884r364"></a><span>364</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput_lock);</span> 
<a id="x1-61886r365"></a><span>365</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_del(&amp;dev-&gt;list);</span> 
<a id="x1-61888r366"></a><span>366</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput_lock);</span> 
<a id="x1-61890r367"></a><span>367</span> 
<a id="x1-61892r368"></a><span>368</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3274"><span>/*&nbsp;unregister&nbsp;all&nbsp;devices&nbsp;of&nbsp;this&nbsp;type&nbsp;*/</span></span> 
<a id="x1-61894r369"></a><span>369</span><span>&nbsp;&nbsp;&nbsp;&nbsp;list_for_each_safe&nbsp;(curr,&nbsp;next,&nbsp;&amp;vinput_vdevices)&nbsp;{</span> 
<a id="x1-61896r370"></a><span>370</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3275"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput&nbsp;=&nbsp;list_entry(curr,&nbsp;</span><span id="textcolor3276"><span>struct</span></span><span>&nbsp;vinput,&nbsp;list);</span> 
<a id="x1-61898r371"></a><span>371</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3277"><span>if</span></span><span>&nbsp;(vinput&nbsp;&amp;&amp;&nbsp;vinput-&gt;type&nbsp;==&nbsp;dev)&nbsp;{</span> 
<a id="x1-61900r372"></a><span>372</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vinput_unregister_vdevice(vinput);</span> 
<a id="x1-61902r373"></a><span>373</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device_unregister(&amp;vinput-&gt;dev);</span> 
<a id="x1-61904r374"></a><span>374</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61906r375"></a><span>375</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61908r376"></a><span>376</span> 
<a id="x1-61910r377"></a><span>377</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3278"><span>"vinput:&nbsp;unregistered&nbsp;virtual&nbsp;input&nbsp;device&nbsp;</span><span>'</span><span>%s</span><span>'</span></span><span id="textcolor3279"><span>\n</span></span><span id="textcolor3280"><span>"</span></span><span>,&nbsp;dev-&gt;name);</span> 
<a id="x1-61912r378"></a><span>378</span><span>}</span> 
<a id="x1-61914r379"></a><span>379</span><span>EXPORT_SYMBOL(vinput_unregister);</span> 
<a id="x1-61916r380"></a><span>380</span> 
<a id="x1-61918r381"></a><span>381</span><span id="textcolor3281"><span>static</span></span><span>&nbsp;</span><span id="textcolor3282"><span>int</span></span><span>&nbsp;__init&nbsp;vinput_init(</span><span id="textcolor3283"><span>void</span></span><span>)</span> 
<a id="x1-61920r382"></a><span>382</span><span>{</span> 
<a id="x1-61922r383"></a><span>383</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3284"><span>int</span></span><span>&nbsp;err&nbsp;=&nbsp;0;</span> 
<a id="x1-61924r384"></a><span>384</span> 
<a id="x1-61926r385"></a><span>385</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3285"><span>"vinput:&nbsp;Loading&nbsp;virtual&nbsp;input&nbsp;driver</span></span><span id="textcolor3286"><span>\n</span></span><span id="textcolor3287"><span>"</span></span><span>);</span> 
<a id="x1-61928r386"></a><span>386</span> 
<a id="x1-61930r387"></a><span>387</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput_dev&nbsp;=&nbsp;register_chrdev(0,&nbsp;DRIVER_NAME,&nbsp;&amp;vinput_fops);</span> 
<a id="x1-61932r388"></a><span>388</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3288"><span>if</span></span><span>&nbsp;(vinput_dev&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-61934r389"></a><span>389</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3289"><span>"vinput:&nbsp;Unable&nbsp;to&nbsp;allocate&nbsp;char&nbsp;dev&nbsp;region</span></span><span id="textcolor3290"><span>\n</span></span><span id="textcolor3291"><span>"</span></span><span>);</span> 
<a id="x1-61936r390"></a><span>390</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;vinput_dev;</span> 
<a id="x1-61938r391"></a><span>391</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3292"><span>goto</span></span><span>&nbsp;failed_alloc;</span> 
<a id="x1-61940r392"></a><span>392</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61942r393"></a><span>393</span> 
<a id="x1-61944r394"></a><span>394</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock_init(&amp;vinput_lock);</span> 
<a id="x1-61946r395"></a><span>395</span> 
<a id="x1-61948r396"></a><span>396</span><span>&nbsp;&nbsp;&nbsp;&nbsp;err&nbsp;=&nbsp;class_register(&amp;vinput_class);</span> 
<a id="x1-61950r397"></a><span>397</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3293"><span>if</span></span><span>&nbsp;(err&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-61952r398"></a><span>398</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3294"><span>"vinput:&nbsp;Unable&nbsp;to&nbsp;register&nbsp;vinput&nbsp;class</span></span><span id="textcolor3295"><span>\n</span></span><span id="textcolor3296"><span>"</span></span><span>);</span> 
<a id="x1-61954r399"></a><span>399</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3297"><span>goto</span></span><span>&nbsp;failed_class;</span> 
<a id="x1-61956r400"></a><span>400</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-61958r401"></a><span>401</span> 
<a id="x1-61960r402"></a><span>402</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3298"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-61962r403"></a><span>403</span><span>failed_class:</span> 
<a id="x1-61964r404"></a><span>404</span><span>&nbsp;&nbsp;&nbsp;&nbsp;class_unregister(&amp;vinput_class);</span> 
<a id="x1-61966r405"></a><span>405</span><span>failed_alloc:</span> 
<a id="x1-61968r406"></a><span>406</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3299"><span>return</span></span><span>&nbsp;err;</span> 
<a id="x1-61970r407"></a><span>407</span><span>}</span> 
<a id="x1-61972r408"></a><span>408</span> 
<a id="x1-61974r409"></a><span>409</span><span id="textcolor3300"><span>static</span></span><span>&nbsp;</span><span id="textcolor3301"><span>void</span></span><span>&nbsp;__exit&nbsp;vinput_end(</span><span id="textcolor3302"><span>void</span></span><span>)</span> 
<a id="x1-61976r410"></a><span>410</span><span>{</span> 
<a id="x1-61978r411"></a><span>411</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3303"><span>"vinput:&nbsp;Unloading&nbsp;virtual&nbsp;input&nbsp;driver</span></span><span id="textcolor3304"><span>\n</span></span><span id="textcolor3305"><span>"</span></span><span>);</span> 
<a id="x1-61980r412"></a><span>412</span> 
<a id="x1-61982r413"></a><span>413</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_chrdev(vinput_dev,&nbsp;DRIVER_NAME);</span> 
<a id="x1-61984r414"></a><span>414</span><span>&nbsp;&nbsp;&nbsp;&nbsp;class_unregister(&amp;vinput_class);</span> 
<a id="x1-61986r415"></a><span>415</span><span>}</span> 
<a id="x1-61988r416"></a><span>416</span> 
<a id="x1-61990r417"></a><span>417</span><span>module_init(vinput_init);</span> 
<a id="x1-61992r418"></a><span>418</span><span>module_exit(vinput_end);</span> 
<a id="x1-61994r419"></a><span>419</span> 
<a id="x1-61996r420"></a><span>420</span><span>MODULE_LICENSE(</span><span id="textcolor3306"><span>"GPL"</span></span><span>);</span> 
<a id="x1-61998r421"></a><span>421</span><span>MODULE_DESCRIPTION(</span><span id="textcolor3307"><span>"Emulate&nbsp;input&nbsp;events"</span></span><span>);</span></pre>
<!-- l. 2045 --><p>   Here the virtual keyboard is one of example to use vinput. It supports all
<code> <span>KEY_MAX</span>
</code> keycodes. The injection format is the <code>  <span>KEY_CODE</span>
</code> such as defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/input.h">include/linux/input.h</a>. A positive value means
<code> <span>KEY_PRESS</span>
</code> while a negative value is a <code>  <span>KEY_RELEASE</span>
</code>. The keyboard supports repetition when the key stays pressed for too long. The
following demonstrates how simulation work.
</p><!-- l. 2052 --><p>   Simulate a key press on "g" (<code>  <span>KEY_G</span>
</code> = 34):
</p><!-- l. 1 -->
   <pre id="fancyvrb91"><a id="x1-62006r1"></a><span>1</span><span>echo&nbsp;</span><span id="textcolor3308"><span>"+34"</span></span><span>&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;/dev/vinput0</span></pre>
<!-- l. 2058 --><p>   Simulate a key release on "g" (<code>  <span>KEY_G</span>
</code> = 34):
</p><!-- l. 1 -->
   <pre id="fancyvrb92"><a id="x1-62010r1"></a><span>1</span><span>echo&nbsp;</span><span id="textcolor3309"><span>"-34"</span></span><span>&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;/dev/vinput0</span></pre>

<!-- l. 1 -->
   <pre id="fancyvrb93"><a id="x1-62012r1"></a><span>1</span><span id="textcolor3310"><span>/*</span></span> 
<a id="x1-62014r2"></a><span>2</span><span id="textcolor3311"><span>&nbsp;*&nbsp;vkbd.c</span></span> 
<a id="x1-62016r3"></a><span>3</span><span id="textcolor3312"><span>&nbsp;*/</span></span> 
<a id="x1-62018r4"></a><span>4</span> 
<a id="x1-62020r5"></a><span>5</span><span id="textcolor3313"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3314"><span>&lt;linux/init.h&gt;</span></span> 
<a id="x1-62022r6"></a><span>6</span><span id="textcolor3315"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3316"><span>&lt;linux/input.h&gt;</span></span> 
<a id="x1-62024r7"></a><span>7</span><span id="textcolor3317"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3318"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-62026r8"></a><span>8</span><span id="textcolor3319"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3320"><span>&lt;linux/spinlock.h&gt;</span></span> 
<a id="x1-62028r9"></a><span>9</span> 
<a id="x1-62030r10"></a><span>10</span><span id="textcolor3321"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3322"><span>"vinput.h"</span></span> 
<a id="x1-62032r11"></a><span>11</span> 
<a id="x1-62034r12"></a><span>12</span><span id="textcolor3323"><span>#define&nbsp;VINPUT_KBD&nbsp;"vkbd"</span></span> 
<a id="x1-62036r13"></a><span>13</span><span id="textcolor3324"><span>#define&nbsp;VINPUT_RELEASE&nbsp;0</span></span> 
<a id="x1-62038r14"></a><span>14</span><span id="textcolor3325"><span>#define&nbsp;VINPUT_PRESS&nbsp;1</span></span> 
<a id="x1-62040r15"></a><span>15</span> 
<a id="x1-62042r16"></a><span>16</span><span id="textcolor3326"><span>static</span></span><span>&nbsp;</span><span id="textcolor3327"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor3328"><span>short</span></span><span>&nbsp;vkeymap[KEY_MAX];</span> 
<a id="x1-62044r17"></a><span>17</span> 
<a id="x1-62046r18"></a><span>18</span><span id="textcolor3329"><span>static</span></span><span>&nbsp;</span><span id="textcolor3330"><span>int</span></span><span>&nbsp;vinput_vkbd_init(</span><span id="textcolor3331"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput)</span> 
<a id="x1-62048r19"></a><span>19</span><span>{</span> 
<a id="x1-62050r20"></a><span>20</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3332"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-62052r21"></a><span>21</span> 
<a id="x1-62054r22"></a><span>22</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3333"><span>/*&nbsp;Set&nbsp;up&nbsp;the&nbsp;input&nbsp;bitfield&nbsp;*/</span></span> 
<a id="x1-62056r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;evbit[0]&nbsp;=&nbsp;BIT_MASK(EV_KEY)&nbsp;|&nbsp;BIT_MASK(EV_REP);</span> 
<a id="x1-62058r24"></a><span>24</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;keycodesize&nbsp;=&nbsp;</span><span id="textcolor3334"><span>sizeof</span></span><span>(</span><span id="textcolor3335"><span>unsigned</span></span><span>&nbsp;</span><span id="textcolor3336"><span>short</span></span><span>);</span> 
<a id="x1-62060r25"></a><span>25</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;keycodemax&nbsp;=&nbsp;KEY_MAX;</span> 
<a id="x1-62062r26"></a><span>26</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;input-&gt;keycode&nbsp;=&nbsp;vkeymap;</span> 
<a id="x1-62064r27"></a><span>27</span> 
<a id="x1-62066r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3337"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;KEY_MAX;&nbsp;i++)</span> 
<a id="x1-62068r29"></a><span>29</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_bit(vkeymap[i],&nbsp;vinput-&gt;input-&gt;keybit);</span> 
<a id="x1-62070r30"></a><span>30</span> 
<a id="x1-62072r31"></a><span>31</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3338"><span>/*&nbsp;vinput&nbsp;will&nbsp;help&nbsp;us&nbsp;allocate&nbsp;new&nbsp;input&nbsp;device&nbsp;structure&nbsp;via</span></span> 
<a id="x1-62074r32"></a><span>32</span><span id="textcolor3339"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;input_allocate_device().&nbsp;So,&nbsp;we&nbsp;can&nbsp;register&nbsp;it&nbsp;straightforwardly.</span></span> 
<a id="x1-62076r33"></a><span>33</span><span id="textcolor3340"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-62078r34"></a><span>34</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3341"><span>return</span></span><span>&nbsp;input_register_device(vinput-&gt;input);</span> 
<a id="x1-62080r35"></a><span>35</span><span>}</span> 
<a id="x1-62082r36"></a><span>36</span> 
<a id="x1-62084r37"></a><span>37</span><span id="textcolor3342"><span>static</span></span><span>&nbsp;</span><span id="textcolor3343"><span>int</span></span><span>&nbsp;vinput_vkbd_read(</span><span id="textcolor3344"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput,&nbsp;</span><span id="textcolor3345"><span>char</span></span><span>&nbsp;*buff,&nbsp;</span><span id="textcolor3346"><span>int</span></span><span>&nbsp;len)</span> 
<a id="x1-62086r38"></a><span>38</span><span>{</span> 
<a id="x1-62088r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput-&gt;lock);</span> 
<a id="x1-62090r40"></a><span>40</span><span>&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;=&nbsp;snprintf(buff,&nbsp;len,&nbsp;</span><span id="textcolor3347"><span>"%+ld</span></span><span id="textcolor3348"><span>\n</span></span><span id="textcolor3349"><span>"</span></span><span>,&nbsp;vinput-&gt;last_entry);</span> 
<a id="x1-62092r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput-&gt;lock);</span> 
<a id="x1-62094r42"></a><span>42</span> 
<a id="x1-62096r43"></a><span>43</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3350"><span>return</span></span><span>&nbsp;len;</span> 
<a id="x1-62098r44"></a><span>44</span><span>}</span> 
<a id="x1-62100r45"></a><span>45</span> 
<a id="x1-62102r46"></a><span>46</span><span id="textcolor3351"><span>static</span></span><span>&nbsp;</span><span id="textcolor3352"><span>int</span></span><span>&nbsp;vinput_vkbd_send(</span><span id="textcolor3353"><span>struct</span></span><span>&nbsp;vinput&nbsp;*vinput,&nbsp;</span><span id="textcolor3354"><span>char</span></span><span>&nbsp;*buff,&nbsp;</span><span id="textcolor3355"><span>int</span></span><span>&nbsp;len)</span> 
<a id="x1-62104r47"></a><span>47</span><span>{</span> 
<a id="x1-62106r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3356"><span>int</span></span><span>&nbsp;ret;</span> 
<a id="x1-62108r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3357"><span>long</span></span><span>&nbsp;key&nbsp;=&nbsp;0;</span> 
<a id="x1-62110r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3358"><span>short</span></span><span>&nbsp;type&nbsp;=&nbsp;VINPUT_PRESS;</span> 
<a id="x1-62112r51"></a><span>51</span> 
<a id="x1-62114r52"></a><span>52</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3359"><span>/*&nbsp;Determine&nbsp;which&nbsp;event&nbsp;was&nbsp;received&nbsp;(press&nbsp;or&nbsp;release)</span></span> 
<a id="x1-62116r53"></a><span>53</span><span id="textcolor3360"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;and&nbsp;store&nbsp;the&nbsp;state.</span></span> 
<a id="x1-62118r54"></a><span>54</span><span id="textcolor3361"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-62120r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3362"><span>if</span></span><span>&nbsp;(buff[0]&nbsp;==&nbsp;</span><span id="textcolor3363"><span>'</span><span>+</span><span>'</span></span><span>)</span> 
<a id="x1-62122r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;kstrtol(buff&nbsp;+&nbsp;1,&nbsp;10,&nbsp;&amp;key);</span> 
<a id="x1-62124r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3364"><span>else</span></span> 
<a id="x1-62126r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;kstrtol(buff,&nbsp;10,&nbsp;&amp;key);</span> 
<a id="x1-62128r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3365"><span>if</span></span><span>&nbsp;(ret)</span> 
<a id="x1-62130r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev_err(&amp;vinput-&gt;dev,&nbsp;</span><span id="textcolor3366"><span>"error&nbsp;during&nbsp;kstrtol:&nbsp;-%d</span></span><span id="textcolor3367"><span>\n</span></span><span id="textcolor3368"><span>"</span></span><span>,&nbsp;ret);</span> 
<a id="x1-62132r61"></a><span>61</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_lock(&amp;vinput-&gt;lock);</span> 
<a id="x1-62134r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput-&gt;last_entry&nbsp;=&nbsp;key;</span> 
<a id="x1-62136r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;spin_unlock(&amp;vinput-&gt;lock);</span> 
<a id="x1-62138r64"></a><span>64</span> 
<a id="x1-62140r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3369"><span>if</span></span><span>&nbsp;(key&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-62142r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;=&nbsp;VINPUT_RELEASE;</span> 
<a id="x1-62144r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key&nbsp;=&nbsp;-key;</span> 
<a id="x1-62146r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-62148r69"></a><span>69</span> 
<a id="x1-62150r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;dev_info(&amp;vinput-&gt;dev,&nbsp;</span><span id="textcolor3370"><span>"Event&nbsp;%s&nbsp;code&nbsp;%ld</span></span><span id="textcolor3371"><span>\n</span></span><span id="textcolor3372"><span>"</span></span><span>,</span> 
<a id="x1-62152r71"></a><span>71</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(type&nbsp;==&nbsp;VINPUT_RELEASE)&nbsp;?&nbsp;</span><span id="textcolor3373"><span>"VINPUT_RELEASE"</span></span><span>&nbsp;:&nbsp;</span><span id="textcolor3374"><span>"VINPUT_PRESS"</span></span><span>,&nbsp;key);</span> 
<a id="x1-62154r72"></a><span>72</span> 
<a id="x1-62156r73"></a><span>73</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3375"><span>/*&nbsp;Report&nbsp;the&nbsp;state&nbsp;received&nbsp;to&nbsp;input&nbsp;subsystem.&nbsp;*/</span></span> 
<a id="x1-62158r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;input_report_key(vinput-&gt;input,&nbsp;key,&nbsp;type);</span> 
<a id="x1-62160r75"></a><span>75</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3376"><span>/*&nbsp;Tell&nbsp;input&nbsp;subsystem&nbsp;that&nbsp;it&nbsp;finished&nbsp;the&nbsp;report.&nbsp;*/</span></span> 
<a id="x1-62162r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;input_sync(vinput-&gt;input);</span> 
<a id="x1-62164r77"></a><span>77</span> 
<a id="x1-62166r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3377"><span>return</span></span><span>&nbsp;len;</span> 
<a id="x1-62168r79"></a><span>79</span><span>}</span> 
<a id="x1-62170r80"></a><span>80</span> 
<a id="x1-62172r81"></a><span>81</span><span id="textcolor3378"><span>static</span></span><span>&nbsp;</span><span id="textcolor3379"><span>struct</span></span><span>&nbsp;vinput_ops&nbsp;vkbd_ops&nbsp;=&nbsp;{</span> 
<a id="x1-62174r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.init&nbsp;=&nbsp;vinput_vkbd_init,</span> 
<a id="x1-62176r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.send&nbsp;=&nbsp;vinput_vkbd_send,</span> 
<a id="x1-62178r84"></a><span>84</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;vinput_vkbd_read,</span> 
<a id="x1-62180r85"></a><span>85</span><span>};</span> 
<a id="x1-62182r86"></a><span>86</span> 
<a id="x1-62184r87"></a><span>87</span><span id="textcolor3380"><span>static</span></span><span>&nbsp;</span><span id="textcolor3381"><span>struct</span></span><span>&nbsp;vinput_device&nbsp;vkbd_dev&nbsp;=&nbsp;{</span> 
<a id="x1-62186r88"></a><span>88</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.name&nbsp;=&nbsp;VINPUT_KBD,</span> 
<a id="x1-62188r89"></a><span>89</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.ops&nbsp;=&nbsp;&amp;vkbd_ops,</span> 
<a id="x1-62190r90"></a><span>90</span><span>};</span> 
<a id="x1-62192r91"></a><span>91</span> 
<a id="x1-62194r92"></a><span>92</span><span id="textcolor3382"><span>static</span></span><span>&nbsp;</span><span id="textcolor3383"><span>int</span></span><span>&nbsp;__init&nbsp;vkbd_init(</span><span id="textcolor3384"><span>void</span></span><span>)</span> 
<a id="x1-62196r93"></a><span>93</span><span>{</span> 
<a id="x1-62198r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3385"><span>int</span></span><span>&nbsp;i;</span> 
<a id="x1-62200r95"></a><span>95</span> 
<a id="x1-62202r96"></a><span>96</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3386"><span>for</span></span><span>&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;KEY_MAX;&nbsp;i++)</span> 
<a id="x1-62204r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vkeymap[i]&nbsp;=&nbsp;i;</span> 
<a id="x1-62206r98"></a><span>98</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3387"><span>return</span></span><span>&nbsp;vinput_register(&amp;vkbd_dev);</span> 
<a id="x1-62208r99"></a><span>99</span><span>}</span> 
<a id="x1-62210r100"></a><span>100</span> 
<a id="x1-62212r101"></a><span>101</span><span id="textcolor3388"><span>static</span></span><span>&nbsp;</span><span id="textcolor3389"><span>void</span></span><span>&nbsp;__exit&nbsp;vkbd_end(</span><span id="textcolor3390"><span>void</span></span><span>)</span> 
<a id="x1-62214r102"></a><span>102</span><span>{</span> 
<a id="x1-62216r103"></a><span>103</span><span>&nbsp;&nbsp;&nbsp;&nbsp;vinput_unregister(&amp;vkbd_dev);</span> 
<a id="x1-62218r104"></a><span>104</span><span>}</span> 
<a id="x1-62220r105"></a><span>105</span> 
<a id="x1-62222r106"></a><span>106</span><span>module_init(vkbd_init);</span> 
<a id="x1-62224r107"></a><span>107</span><span>module_exit(vkbd_end);</span> 
<a id="x1-62226r108"></a><span>108</span> 
<a id="x1-62228r109"></a><span>109</span><span>MODULE_LICENSE(</span><span id="textcolor3391"><span>"GPL"</span></span><span>);</span> 
<a id="x1-62230r110"></a><span>110</span><span>MODULE_DESCRIPTION(</span><span id="textcolor3392"><span>"Emulate&nbsp;keyboard&nbsp;input&nbsp;events&nbsp;through&nbsp;/dev/vinput"</span></span><span>);</span></pre>
<!-- l. 2068 -->
   <h3 id="standardizing-the-interfaces-the-device-model"><span>17   </span> <a id="x1-6300017"></a>Standardizing the interfaces: The Device Model</h3>
<!-- l. 2070 --><p>Up to this point we have seen all kinds of modules doing all kinds of things, but there
was no consistency in their interfaces with the rest of the kernel. To impose some
consistency such that there is at minimum a standardized way to start, suspend and
resume a device model was added. An example is shown below, and you can
use this as a template to add your own suspend, resume or other interface
functions.
</p><!-- l. 1 -->
   <pre id="fancyvrb94"><a id="x1-63002r1"></a><span>1</span><span id="textcolor3393"><span>/*</span></span> 
<a id="x1-63004r2"></a><span>2</span><span id="textcolor3394"><span>&nbsp;*&nbsp;devicemodel.c</span></span> 
<a id="x1-63006r3"></a><span>3</span><span id="textcolor3395"><span>&nbsp;*/</span></span> 
<a id="x1-63008r4"></a><span>4</span><span id="textcolor3396"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3397"><span>&lt;linux/kernel.h&gt;</span></span> 
<a id="x1-63010r5"></a><span>5</span><span id="textcolor3398"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3399"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-63012r6"></a><span>6</span><span id="textcolor3400"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3401"><span>&lt;linux/platform_device.h&gt;</span></span> 
<a id="x1-63014r7"></a><span>7</span> 
<a id="x1-63016r8"></a><span>8</span><span id="textcolor3402"><span>struct</span></span><span>&nbsp;devicemodel_data&nbsp;{</span> 
<a id="x1-63018r9"></a><span>9</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3403"><span>char</span></span><span>&nbsp;*greeting;</span> 
<a id="x1-63020r10"></a><span>10</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3404"><span>int</span></span><span>&nbsp;number;</span> 
<a id="x1-63022r11"></a><span>11</span><span>};</span> 
<a id="x1-63024r12"></a><span>12</span> 
<a id="x1-63026r13"></a><span>13</span><span id="textcolor3405"><span>static</span></span><span>&nbsp;</span><span id="textcolor3406"><span>int</span></span><span>&nbsp;devicemodel_probe(</span><span id="textcolor3407"><span>struct</span></span><span>&nbsp;platform_device&nbsp;*dev)</span> 
<a id="x1-63028r14"></a><span>14</span><span>{</span> 
<a id="x1-63030r15"></a><span>15</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3408"><span>struct</span></span><span>&nbsp;devicemodel_data&nbsp;*pd&nbsp;=</span> 
<a id="x1-63032r16"></a><span>16</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span id="textcolor3409"><span>struct</span></span><span>&nbsp;devicemodel_data&nbsp;*)(dev-&gt;dev.platform_data);</span> 
<a id="x1-63034r17"></a><span>17</span> 
<a id="x1-63036r18"></a><span>18</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3410"><span>"devicemodel&nbsp;probe</span></span><span id="textcolor3411"><span>\n</span></span><span id="textcolor3412"><span>"</span></span><span>);</span> 
<a id="x1-63038r19"></a><span>19</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3413"><span>"devicemodel&nbsp;greeting:&nbsp;%s;&nbsp;%d</span></span><span id="textcolor3414"><span>\n</span></span><span id="textcolor3415"><span>"</span></span><span>,&nbsp;pd-&gt;greeting,&nbsp;pd-&gt;number);</span> 
<a id="x1-63040r20"></a><span>20</span> 
<a id="x1-63042r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3416"><span>/*&nbsp;Your&nbsp;device&nbsp;initialization&nbsp;code&nbsp;*/</span></span> 
<a id="x1-63044r22"></a><span>22</span> 
<a id="x1-63046r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3417"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-63048r24"></a><span>24</span><span>}</span> 
<a id="x1-63050r25"></a><span>25</span> 
<a id="x1-63052r26"></a><span>26</span><span id="textcolor3418"><span>static</span></span><span>&nbsp;</span><span id="textcolor3419"><span>int</span></span><span>&nbsp;devicemodel_remove(</span><span id="textcolor3420"><span>struct</span></span><span>&nbsp;platform_device&nbsp;*dev)</span> 
<a id="x1-63054r27"></a><span>27</span><span>{</span> 
<a id="x1-63056r28"></a><span>28</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3421"><span>"devicemodel&nbsp;example&nbsp;removed</span></span><span id="textcolor3422"><span>\n</span></span><span id="textcolor3423"><span>"</span></span><span>);</span> 
<a id="x1-63058r29"></a><span>29</span> 
<a id="x1-63060r30"></a><span>30</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3424"><span>/*&nbsp;Your&nbsp;device&nbsp;removal&nbsp;code&nbsp;*/</span></span> 
<a id="x1-63062r31"></a><span>31</span> 
<a id="x1-63064r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3425"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-63066r33"></a><span>33</span><span>}</span> 
<a id="x1-63068r34"></a><span>34</span> 
<a id="x1-63070r35"></a><span>35</span><span id="textcolor3426"><span>static</span></span><span>&nbsp;</span><span id="textcolor3427"><span>int</span></span><span>&nbsp;devicemodel_suspend(</span><span id="textcolor3428"><span>struct</span></span><span>&nbsp;device&nbsp;*dev)</span> 
<a id="x1-63072r36"></a><span>36</span><span>{</span> 
<a id="x1-63074r37"></a><span>37</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3429"><span>"devicemodel&nbsp;example&nbsp;suspend</span></span><span id="textcolor3430"><span>\n</span></span><span id="textcolor3431"><span>"</span></span><span>);</span> 
<a id="x1-63076r38"></a><span>38</span> 
<a id="x1-63078r39"></a><span>39</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3432"><span>/*&nbsp;Your&nbsp;device&nbsp;suspend&nbsp;code&nbsp;*/</span></span> 
<a id="x1-63080r40"></a><span>40</span> 
<a id="x1-63082r41"></a><span>41</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3433"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-63084r42"></a><span>42</span><span>}</span> 
<a id="x1-63086r43"></a><span>43</span> 
<a id="x1-63088r44"></a><span>44</span><span id="textcolor3434"><span>static</span></span><span>&nbsp;</span><span id="textcolor3435"><span>int</span></span><span>&nbsp;devicemodel_resume(</span><span id="textcolor3436"><span>struct</span></span><span>&nbsp;device&nbsp;*dev)</span> 
<a id="x1-63090r45"></a><span>45</span><span>{</span> 
<a id="x1-63092r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3437"><span>"devicemodel&nbsp;example&nbsp;resume</span></span><span id="textcolor3438"><span>\n</span></span><span id="textcolor3439"><span>"</span></span><span>);</span> 
<a id="x1-63094r47"></a><span>47</span> 
<a id="x1-63096r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3440"><span>/*&nbsp;Your&nbsp;device&nbsp;resume&nbsp;code&nbsp;*/</span></span> 
<a id="x1-63098r49"></a><span>49</span> 
<a id="x1-63100r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3441"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-63102r51"></a><span>51</span><span>}</span> 
<a id="x1-63104r52"></a><span>52</span> 
<a id="x1-63106r53"></a><span>53</span><span id="textcolor3442"><span>static</span></span><span>&nbsp;</span><span id="textcolor3443"><span>const</span></span><span>&nbsp;</span><span id="textcolor3444"><span>struct</span></span><span>&nbsp;dev_pm_ops&nbsp;devicemodel_pm_ops&nbsp;=&nbsp;{</span> 
<a id="x1-63108r54"></a><span>54</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.suspend&nbsp;=&nbsp;devicemodel_suspend,</span> 
<a id="x1-63110r55"></a><span>55</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.resume&nbsp;=&nbsp;devicemodel_resume,</span> 
<a id="x1-63112r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.poweroff&nbsp;=&nbsp;devicemodel_suspend,</span> 
<a id="x1-63114r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.freeze&nbsp;=&nbsp;devicemodel_suspend,</span> 
<a id="x1-63116r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.thaw&nbsp;=&nbsp;devicemodel_resume,</span> 
<a id="x1-63118r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.restore&nbsp;=&nbsp;devicemodel_resume,</span> 
<a id="x1-63120r60"></a><span>60</span><span>};</span> 
<a id="x1-63122r61"></a><span>61</span> 
<a id="x1-63124r62"></a><span>62</span><span id="textcolor3445"><span>static</span></span><span>&nbsp;</span><span id="textcolor3446"><span>struct</span></span><span>&nbsp;platform_driver&nbsp;devicemodel_driver&nbsp;=&nbsp;{</span> 
<a id="x1-63126r63"></a><span>63</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.driver&nbsp;=</span> 
<a id="x1-63128r64"></a><span>64</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span> 
<a id="x1-63130r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.name&nbsp;=&nbsp;</span><span id="textcolor3447"><span>"devicemodel_example"</span></span><span>,</span> 
<a id="x1-63132r66"></a><span>66</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pm&nbsp;=&nbsp;&amp;devicemodel_pm_ops,</span> 
<a id="x1-63134r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span> 
<a id="x1-63136r68"></a><span>68</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.probe&nbsp;=&nbsp;devicemodel_probe,</span> 
<a id="x1-63138r69"></a><span>69</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.remove&nbsp;=&nbsp;devicemodel_remove,</span> 
<a id="x1-63140r70"></a><span>70</span><span>};</span> 
<a id="x1-63142r71"></a><span>71</span> 
<a id="x1-63144r72"></a><span>72</span><span id="textcolor3448"><span>static</span></span><span>&nbsp;</span><span id="textcolor3449"><span>int</span></span><span>&nbsp;__init&nbsp;devicemodel_init(</span><span id="textcolor3450"><span>void</span></span><span>)</span> 
<a id="x1-63146r73"></a><span>73</span><span>{</span> 
<a id="x1-63148r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3451"><span>int</span></span><span>&nbsp;ret;</span> 
<a id="x1-63150r75"></a><span>75</span> 
<a id="x1-63152r76"></a><span>76</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3452"><span>"devicemodel&nbsp;init</span></span><span id="textcolor3453"><span>\n</span></span><span id="textcolor3454"><span>"</span></span><span>);</span> 
<a id="x1-63154r77"></a><span>77</span> 
<a id="x1-63156r78"></a><span>78</span><span>&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;platform_driver_register(&amp;devicemodel_driver);</span> 
<a id="x1-63158r79"></a><span>79</span> 
<a id="x1-63160r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3455"><span>if</span></span><span>&nbsp;(ret)&nbsp;{</span> 
<a id="x1-63162r81"></a><span>81</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3456"><span>"Unable&nbsp;to&nbsp;register&nbsp;driver</span></span><span id="textcolor3457"><span>\n</span></span><span id="textcolor3458"><span>"</span></span><span>);</span> 
<a id="x1-63164r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3459"><span>return</span></span><span>&nbsp;ret;</span> 
<a id="x1-63166r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-63168r84"></a><span>84</span> 
<a id="x1-63170r85"></a><span>85</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3460"><span>return</span></span><span>&nbsp;0;</span> 
<a id="x1-63172r86"></a><span>86</span><span>}</span> 
<a id="x1-63174r87"></a><span>87</span> 
<a id="x1-63176r88"></a><span>88</span><span id="textcolor3461"><span>static</span></span><span>&nbsp;</span><span id="textcolor3462"><span>void</span></span><span>&nbsp;__exit&nbsp;devicemodel_exit(</span><span id="textcolor3463"><span>void</span></span><span>)</span> 
<a id="x1-63178r89"></a><span>89</span><span>{</span> 
<a id="x1-63180r90"></a><span>90</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3464"><span>"devicemodel&nbsp;exit</span></span><span id="textcolor3465"><span>\n</span></span><span id="textcolor3466"><span>"</span></span><span>);</span> 
<a id="x1-63182r91"></a><span>91</span><span>&nbsp;&nbsp;&nbsp;&nbsp;platform_driver_unregister(&amp;devicemodel_driver);</span> 
<a id="x1-63184r92"></a><span>92</span><span>}</span> 
<a id="x1-63186r93"></a><span>93</span> 
<a id="x1-63188r94"></a><span>94</span><span>module_init(devicemodel_init);</span> 
<a id="x1-63190r95"></a><span>95</span><span>module_exit(devicemodel_exit);</span> 
<a id="x1-63192r96"></a><span>96</span> 
<a id="x1-63194r97"></a><span>97</span><span>MODULE_LICENSE(</span><span id="textcolor3467"><span>"GPL"</span></span><span>);</span> 
<a id="x1-63196r98"></a><span>98</span><span>MODULE_DESCRIPTION(</span><span id="textcolor3468"><span>"Linux&nbsp;Device&nbsp;Model&nbsp;example"</span></span><span>);</span></pre>
<!-- l. 2076 -->
   <h3 id="optimizations"><span>18   </span> <a id="x1-6400018"></a>Optimizations</h3>
<!-- l. 2078 -->
   <h4 id="likely-and-unlikely-conditions"><span>18.1   </span> <a id="x1-6500018.1"></a>Likely and Unlikely conditions</h4>
<!-- l. 2080 --><p>Sometimes you might want your code to run as quickly as possible,
especially if it is handling an interrupt or doing something which might
cause noticeable latency. If your code contains boolean conditions and if
you know that the conditions are almost always likely to evaluate as either
<code> <span>true</span>
</code> or <code>  <span>false</span>
</code>, then you can allow the compiler to optimize for this using the
<code> <span>likely</span>
</code> and <code>  <span>unlikely</span>
</code> macros. For example, when allocating memory you are almost always expecting this
to succeed.
</p><!-- l. 1 -->
   <pre id="fancyvrb95"><a id="x1-65012r1"></a><span>1</span><span>bvl&nbsp;=&nbsp;bvec_alloc(gfp_mask,&nbsp;nr_iovecs,&nbsp;&amp;idx);</span> 
<a id="x1-65014r2"></a><span>2</span><span id="textcolor3469"><span>if</span></span><span>&nbsp;(unlikely(!bvl))&nbsp;{</span> 
<a id="x1-65016r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;mempool_free(bio,&nbsp;bio_pool);</span> 
<a id="x1-65018r4"></a><span>4</span><span>&nbsp;&nbsp;&nbsp;&nbsp;bio&nbsp;=&nbsp;NULL;</span> 
<a id="x1-65020r5"></a><span>5</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3470"><span>goto</span></span><span>&nbsp;out;</span> 
<a id="x1-65022r6"></a><span>6</span><span>}</span></pre>
<!-- l. 2094 --><p>   When the <code>  <span>unlikely</span>
</code> macro is used, the compiler alters its machine instruction output, so that it
continues along the false branch and only jumps if the condition is true. That
avoids flushing the processor pipeline. The opposite happens if you use the
<code> <span>likely</span>
</code> macro.
</p><!-- l. 2098 -->
   <h4 id="static-keys"><span>18.2   </span> <a id="x1-6600018.2"></a>Static keys</h4>
<!-- l. 2100 --><p>Static keys allow us to enable or disable kernel code paths based on the runtime state
of key. Its APIs have been available since 2010 (most architectures are already
supported), use self-modifying code to eliminate the overhead of cache and branch
prediction. The most typical use case of static keys is for performance-sensitive kernel
code, such as tracepoints, context switching, networking, etc. These hot paths of the
kernel often contain branches and can be optimized easily using this technique.
Before we can use static keys in the kernel, we need to make sure that gcc supports
<code> <span id="textcolor3471"><span>asm</span></span><span>&nbsp;</span><span id="textcolor3472"><span>goto</span></span>
</code> inline assembly, and the following kernel configurations are set:
</p><!-- l. 1 -->
   <pre id="fancyvrb96"><a id="x1-66006r1"></a><span>1</span><span>CONFIG_JUMP_LABEL=y</span> 
<a id="x1-66008r2"></a><span>2</span><span>CONFIG_HAVE_ARCH_JUMP_LABEL=y</span> 
<a id="x1-66010r3"></a><span>3</span><span>CONFIG_HAVE_ARCH_JUMP_LABEL_RELATIVE=y</span></pre>
<!-- l. 2110 --><p>   To declare a static key, we need to define a global variable using the
<code> <span>DEFINE_STATIC_KEY_FALSE</span>
</code> or <code>  <span>DEFINE_STATIC_KEY_TRUE</span>
</code> macro defined in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/jump_label.h">include/linux/jump_label.h</a>. This macro initializes the key with
the given initial value, which is either false or true, respectively. For example, to
declare a static key with an initial value of false, we can use the following
code:
</p><!-- l. 1 -->
   <pre id="fancyvrb97"><a id="x1-66015r1"></a><span>1</span><span>DEFINE_STATIC_KEY_FALSE(fkey);</span></pre>
<!-- l. 2117 --><p>   Once the static key has been declared, we need to add branching code to the
module that uses the static key. For example, the code includes a fastpath, where a
no-op instruction will be generated at compile time as the key is initialized to false
and the branch is unlikely to be taken.
</p><!-- l. 1 -->
   <pre id="fancyvrb98"><a id="x1-66021r1"></a><span>1</span><span>pr_info(</span><span id="textcolor3473"><span>"fastpath&nbsp;1</span></span><span id="textcolor3474"><span>\n</span></span><span id="textcolor3475"><span>"</span></span><span>);</span> 
<a id="x1-66023r2"></a><span>2</span><span id="textcolor3476"><span>if</span></span><span>&nbsp;(static_branch_unlikely(&amp;fkey))</span> 
<a id="x1-66025r3"></a><span>3</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor3477"><span>"do&nbsp;unlikely&nbsp;thing</span></span><span id="textcolor3478"><span>\n</span></span><span id="textcolor3479"><span>"</span></span><span>);</span> 
<a id="x1-66027r4"></a><span>4</span><span>pr_info(</span><span id="textcolor3480"><span>"fastpath&nbsp;2</span></span><span id="textcolor3481"><span>\n</span></span><span id="textcolor3482"><span>"</span></span><span>);</span></pre>
                                                                  

                                                                  
<!-- l. 2127 --><p>   If the key is enabled at runtime by calling
<code> <span>static_branch_enable(&amp;fkey)</span>
</code>, the fastpath will be patched with an unconditional jump instruction to the slowpath
code <code>  <span>pr_alert</span>
</code>, so the branch will always be taken until the key is disabled again.
</p><!-- l. 2129 --><p>   The following kernel module derived from <span><span><span>chardev.c</span></span></span>, demonstrates how the
static key works.
</p><!-- l. 1 -->
   <pre id="fancyvrb99"><a id="x1-66031r1"></a><span>1</span><span id="textcolor3483"><span>/*</span></span> 
<a id="x1-66033r2"></a><span>2</span><span id="textcolor3484"><span>&nbsp;*&nbsp;static_key.c</span></span> 
<a id="x1-66035r3"></a><span>3</span><span id="textcolor3485"><span>&nbsp;*/</span></span> 
<a id="x1-66037r4"></a><span>4</span> 
<a id="x1-66039r5"></a><span>5</span><span id="textcolor3486"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3487"><span>&lt;linux/atomic.h&gt;</span></span> 
<a id="x1-66041r6"></a><span>6</span><span id="textcolor3488"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3489"><span>&lt;linux/device.h&gt;</span></span> 
<a id="x1-66043r7"></a><span>7</span><span id="textcolor3490"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3491"><span>&lt;linux/fs.h&gt;</span></span> 
<a id="x1-66045r8"></a><span>8</span><span id="textcolor3492"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3493"><span>&lt;linux/kernel.h&gt;&nbsp;/*&nbsp;for&nbsp;sprintf()&nbsp;*/</span></span> 
<a id="x1-66047r9"></a><span>9</span><span id="textcolor3494"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3495"><span>&lt;linux/module.h&gt;</span></span> 
<a id="x1-66049r10"></a><span>10</span><span id="textcolor3496"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3497"><span>&lt;linux/printk.h&gt;</span></span> 
<a id="x1-66051r11"></a><span>11</span><span id="textcolor3498"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3499"><span>&lt;linux/types.h&gt;</span></span> 
<a id="x1-66053r12"></a><span>12</span><span id="textcolor3500"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3501"><span>&lt;linux/uaccess.h&gt;&nbsp;/*&nbsp;for&nbsp;get_user&nbsp;and&nbsp;put_user&nbsp;*/</span></span> 
<a id="x1-66055r13"></a><span>13</span><span id="textcolor3502"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3503"><span>&lt;linux/jump_label.h&gt;&nbsp;/*&nbsp;for&nbsp;static&nbsp;key&nbsp;macros&nbsp;*/</span></span> 
<a id="x1-66057r14"></a><span>14</span><span id="textcolor3504"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3505"><span>&lt;linux/version.h&gt;</span></span> 
<a id="x1-66059r15"></a><span>15</span> 
<a id="x1-66061r16"></a><span>16</span><span id="textcolor3506"><span>#include</span></span><span>&nbsp;</span><span id="textcolor3507"><span>&lt;asm/errno.h&gt;</span></span> 
<a id="x1-66063r17"></a><span>17</span> 
<a id="x1-66065r18"></a><span>18</span><span id="textcolor3508"><span>static</span></span><span>&nbsp;</span><span id="textcolor3509"><span>int</span></span><span>&nbsp;device_open(</span><span id="textcolor3510"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor3511"><span>struct</span></span><span>&nbsp;file&nbsp;*file);</span> 
<a id="x1-66067r19"></a><span>19</span><span id="textcolor3512"><span>static</span></span><span>&nbsp;</span><span id="textcolor3513"><span>int</span></span><span>&nbsp;device_release(</span><span id="textcolor3514"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor3515"><span>struct</span></span><span>&nbsp;file&nbsp;*file);</span> 
<a id="x1-66069r20"></a><span>20</span><span id="textcolor3516"><span>static</span></span><span>&nbsp;</span><span id="textcolor3517"><span>ssize_t</span></span><span>&nbsp;device_read(</span><span id="textcolor3518"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor3519"><span>char</span></span><span>&nbsp;__user&nbsp;*buf,&nbsp;</span><span id="textcolor3520"><span>size_t</span></span><span>&nbsp;count,</span> 
<a id="x1-66071r21"></a><span>21</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*ppos);</span> 
<a id="x1-66073r22"></a><span>22</span><span id="textcolor3521"><span>static</span></span><span>&nbsp;</span><span id="textcolor3522"><span>ssize_t</span></span><span>&nbsp;device_write(</span><span id="textcolor3523"><span>struct</span></span><span>&nbsp;file&nbsp;*file,&nbsp;</span><span id="textcolor3524"><span>const</span></span><span>&nbsp;</span><span id="textcolor3525"><span>char</span></span><span>&nbsp;__user&nbsp;*buf,</span> 
<a id="x1-66075r23"></a><span>23</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3526"><span>size_t</span></span><span>&nbsp;count,&nbsp;loff_t&nbsp;*ppos);</span> 
<a id="x1-66077r24"></a><span>24</span> 
<a id="x1-66079r25"></a><span>25</span><span id="textcolor3527"><span>#define&nbsp;SUCCESS&nbsp;0</span></span> 
<a id="x1-66081r26"></a><span>26</span><span id="textcolor3528"><span>#define&nbsp;DEVICE_NAME&nbsp;"key_state"</span></span> 
<a id="x1-66083r27"></a><span>27</span><span id="textcolor3529"><span>#define&nbsp;BUF_LEN&nbsp;10</span></span> 
<a id="x1-66085r28"></a><span>28</span> 
<a id="x1-66087r29"></a><span>29</span><span id="textcolor3530"><span>static</span></span><span>&nbsp;</span><span id="textcolor3531"><span>int</span></span><span>&nbsp;major;</span> 
<a id="x1-66089r30"></a><span>30</span> 
<a id="x1-66091r31"></a><span>31</span><span id="textcolor3532"><span>enum</span></span><span>&nbsp;{</span> 
<a id="x1-66093r32"></a><span>32</span><span>&nbsp;&nbsp;&nbsp;&nbsp;CDEV_NOT_USED&nbsp;=&nbsp;0,</span> 
<a id="x1-66095r33"></a><span>33</span><span>&nbsp;&nbsp;&nbsp;&nbsp;CDEV_EXCLUSIVE_OPEN&nbsp;=&nbsp;1,</span> 
<a id="x1-66097r34"></a><span>34</span><span>};</span> 
<a id="x1-66099r35"></a><span>35</span> 
<a id="x1-66101r36"></a><span>36</span><span id="textcolor3533"><span>static</span></span><span>&nbsp;atomic_t&nbsp;already_open&nbsp;=&nbsp;ATOMIC_INIT(CDEV_NOT_USED);</span> 
<a id="x1-66103r37"></a><span>37</span> 
<a id="x1-66105r38"></a><span>38</span><span id="textcolor3534"><span>static</span></span><span>&nbsp;</span><span id="textcolor3535"><span>char</span></span><span>&nbsp;msg[BUF_LEN&nbsp;+&nbsp;1];</span> 
<a id="x1-66107r39"></a><span>39</span> 
<a id="x1-66109r40"></a><span>40</span><span id="textcolor3536"><span>static</span></span><span>&nbsp;</span><span id="textcolor3537"><span>struct</span></span><span>&nbsp;class&nbsp;*cls;</span> 
<a id="x1-66111r41"></a><span>41</span> 
<a id="x1-66113r42"></a><span>42</span><span id="textcolor3538"><span>static</span></span><span>&nbsp;DEFINE_STATIC_KEY_FALSE(fkey);</span> 
<a id="x1-66115r43"></a><span>43</span> 
<a id="x1-66117r44"></a><span>44</span><span id="textcolor3539"><span>static</span></span><span>&nbsp;</span><span id="textcolor3540"><span>struct</span></span><span>&nbsp;file_operations&nbsp;chardev_fops&nbsp;=&nbsp;{</span> 
<a id="x1-66119r45"></a><span>45</span><span id="textcolor3541"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&lt;&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-66121r46"></a><span>46</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.owner&nbsp;=&nbsp;THIS_MODULE,</span> 
<a id="x1-66123r47"></a><span>47</span><span id="textcolor3542"><span>#endif</span></span> 
<a id="x1-66125r48"></a><span>48</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.open&nbsp;=&nbsp;device_open,</span> 
<a id="x1-66127r49"></a><span>49</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.release&nbsp;=&nbsp;device_release,</span> 
<a id="x1-66129r50"></a><span>50</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.read&nbsp;=&nbsp;device_read,</span> 
<a id="x1-66131r51"></a><span>51</span><span>&nbsp;&nbsp;&nbsp;&nbsp;.write&nbsp;=&nbsp;device_write,</span> 
<a id="x1-66133r52"></a><span>52</span><span>};</span> 
<a id="x1-66135r53"></a><span>53</span> 
<a id="x1-66137r54"></a><span>54</span><span id="textcolor3543"><span>static</span></span><span>&nbsp;</span><span id="textcolor3544"><span>int</span></span><span>&nbsp;__init&nbsp;chardev_init(</span><span id="textcolor3545"><span>void</span></span><span>)</span> 
<a id="x1-66139r55"></a><span>55</span><span>{</span> 
<a id="x1-66141r56"></a><span>56</span><span>&nbsp;&nbsp;&nbsp;&nbsp;major&nbsp;=&nbsp;register_chrdev(0,&nbsp;DEVICE_NAME,&nbsp;&amp;chardev_fops);</span> 
<a id="x1-66143r57"></a><span>57</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3546"><span>if</span></span><span>&nbsp;(major&nbsp;&lt;&nbsp;0)&nbsp;{</span> 
<a id="x1-66145r58"></a><span>58</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor3547"><span>"Registering&nbsp;char&nbsp;device&nbsp;failed&nbsp;with&nbsp;%d</span></span><span id="textcolor3548"><span>\n</span></span><span id="textcolor3549"><span>"</span></span><span>,&nbsp;major);</span> 
<a id="x1-66147r59"></a><span>59</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3550"><span>return</span></span><span>&nbsp;major;</span> 
<a id="x1-66149r60"></a><span>60</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-66151r61"></a><span>61</span> 
<a id="x1-66153r62"></a><span>62</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3551"><span>"I&nbsp;was&nbsp;assigned&nbsp;major&nbsp;number&nbsp;%d</span></span><span id="textcolor3552"><span>\n</span></span><span id="textcolor3553"><span>"</span></span><span>,&nbsp;major);</span> 
<a id="x1-66155r63"></a><span>63</span> 
<a id="x1-66157r64"></a><span>64</span><span id="textcolor3554"><span>#if&nbsp;LINUX_VERSION_CODE&nbsp;&lt;&nbsp;KERNEL_VERSION(6,&nbsp;4,&nbsp;0)</span></span> 
<a id="x1-66159r65"></a><span>65</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cls&nbsp;=&nbsp;class_create(THIS_MODULE,&nbsp;DEVICE_NAME);</span> 
<a id="x1-66161r66"></a><span>66</span><span id="textcolor3555"><span>#else</span></span> 
<a id="x1-66163r67"></a><span>67</span><span>&nbsp;&nbsp;&nbsp;&nbsp;cls&nbsp;=&nbsp;class_create(DEVICE_NAME);</span> 
<a id="x1-66165r68"></a><span>68</span><span id="textcolor3556"><span>#endif</span></span> 
<a id="x1-66167r69"></a><span>69</span> 
<a id="x1-66169r70"></a><span>70</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_create(cls,&nbsp;NULL,&nbsp;MKDEV(major,&nbsp;0),&nbsp;NULL,&nbsp;DEVICE_NAME);</span> 
<a id="x1-66171r71"></a><span>71</span> 
<a id="x1-66173r72"></a><span>72</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3557"><span>"Device&nbsp;created&nbsp;on&nbsp;/dev/%s</span></span><span id="textcolor3558"><span>\n</span></span><span id="textcolor3559"><span>"</span></span><span>,&nbsp;DEVICE_NAME);</span> 
<a id="x1-66175r73"></a><span>73</span> 
<a id="x1-66177r74"></a><span>74</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3560"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-66179r75"></a><span>75</span><span>}</span> 
<a id="x1-66181r76"></a><span>76</span> 
<a id="x1-66183r77"></a><span>77</span><span id="textcolor3561"><span>static</span></span><span>&nbsp;</span><span id="textcolor3562"><span>void</span></span><span>&nbsp;__exit&nbsp;chardev_exit(</span><span id="textcolor3563"><span>void</span></span><span>)</span> 
<a id="x1-66185r78"></a><span>78</span><span>{</span> 
<a id="x1-66187r79"></a><span>79</span><span>&nbsp;&nbsp;&nbsp;&nbsp;device_destroy(cls,&nbsp;MKDEV(major,&nbsp;0));</span> 
<a id="x1-66189r80"></a><span>80</span><span>&nbsp;&nbsp;&nbsp;&nbsp;class_destroy(cls);</span> 
<a id="x1-66191r81"></a><span>81</span> 
<a id="x1-66193r82"></a><span>82</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3564"><span>/*&nbsp;Unregister&nbsp;the&nbsp;device&nbsp;*/</span></span> 
<a id="x1-66195r83"></a><span>83</span><span>&nbsp;&nbsp;&nbsp;&nbsp;unregister_chrdev(major,&nbsp;DEVICE_NAME);</span> 
<a id="x1-66197r84"></a><span>84</span><span>}</span> 
<a id="x1-66199r85"></a><span>85</span> 
<a id="x1-66201r86"></a><span>86</span><span id="textcolor3565"><span>/*&nbsp;Methods&nbsp;*/</span></span> 
<a id="x1-66203r87"></a><span>87</span> 
<a id="x1-66205r88"></a><span>88</span><span id="textcolor3566"><span>/**</span></span> 
<a id="x1-66207r89"></a><span>89</span><span id="textcolor3567"><span>&nbsp;*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process&nbsp;tried&nbsp;to&nbsp;open&nbsp;the&nbsp;device&nbsp;file,&nbsp;like</span></span> 
<a id="x1-66209r90"></a><span>90</span><span id="textcolor3568"><span>&nbsp;*&nbsp;cat&nbsp;/dev/key_state</span></span> 
<a id="x1-66211r91"></a><span>91</span><span id="textcolor3569"><span>&nbsp;*/</span></span> 
<a id="x1-66213r92"></a><span>92</span><span id="textcolor3570"><span>static</span></span><span>&nbsp;</span><span id="textcolor3571"><span>int</span></span><span>&nbsp;device_open(</span><span id="textcolor3572"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor3573"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-66215r93"></a><span>93</span><span>{</span> 
<a id="x1-66217r94"></a><span>94</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3574"><span>if</span></span><span>&nbsp;(atomic_cmpxchg(&amp;already_open,&nbsp;CDEV_NOT_USED,&nbsp;CDEV_EXCLUSIVE_OPEN))</span> 
<a id="x1-66219r95"></a><span>95</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3575"><span>return</span></span><span>&nbsp;-EBUSY;</span> 
<a id="x1-66221r96"></a><span>96</span> 
<a id="x1-66223r97"></a><span>97</span><span>&nbsp;&nbsp;&nbsp;&nbsp;sprintf(msg,&nbsp;static_key_enabled(&amp;fkey)&nbsp;?&nbsp;</span><span id="textcolor3576"><span>"enabled</span></span><span id="textcolor3577"><span>\n</span></span><span id="textcolor3578"><span>"</span></span><span>&nbsp;:&nbsp;</span><span id="textcolor3579"><span>"disabled</span></span><span id="textcolor3580"><span>\n</span></span><span id="textcolor3581"><span>"</span></span><span>);</span> 
<a id="x1-66225r98"></a><span>98</span> 
<a id="x1-66227r99"></a><span>99</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3582"><span>"fastpath&nbsp;1</span></span><span id="textcolor3583"><span>\n</span></span><span id="textcolor3584"><span>"</span></span><span>);</span> 
<a id="x1-66229r100"></a><span>100</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3585"><span>if</span></span><span>&nbsp;(static_branch_unlikely(&amp;fkey))</span> 
<a id="x1-66231r101"></a><span>101</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_alert(</span><span id="textcolor3586"><span>"do&nbsp;unlikely&nbsp;thing</span></span><span id="textcolor3587"><span>\n</span></span><span id="textcolor3588"><span>"</span></span><span>);</span> 
<a id="x1-66233r102"></a><span>102</span><span>&nbsp;&nbsp;&nbsp;&nbsp;pr_info(</span><span id="textcolor3589"><span>"fastpath&nbsp;2</span></span><span id="textcolor3590"><span>\n</span></span><span id="textcolor3591"><span>"</span></span><span>);</span> 
<a id="x1-66235r103"></a><span>103</span> 
<a id="x1-66237r104"></a><span>104</span><span>&nbsp;&nbsp;&nbsp;&nbsp;try_module_get(THIS_MODULE);</span> 
<a id="x1-66239r105"></a><span>105</span> 
<a id="x1-66241r106"></a><span>106</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3592"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-66243r107"></a><span>107</span><span>}</span> 
<a id="x1-66245r108"></a><span>108</span> 
<a id="x1-66247r109"></a><span>109</span><span id="textcolor3593"><span>/**</span></span> 
<a id="x1-66249r110"></a><span>110</span><span id="textcolor3594"><span>&nbsp;*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process&nbsp;closes&nbsp;the&nbsp;device&nbsp;file</span></span> 
<a id="x1-66251r111"></a><span>111</span><span id="textcolor3595"><span>&nbsp;*/</span></span> 
<a id="x1-66253r112"></a><span>112</span><span id="textcolor3596"><span>static</span></span><span>&nbsp;</span><span id="textcolor3597"><span>int</span></span><span>&nbsp;device_release(</span><span id="textcolor3598"><span>struct</span></span><span>&nbsp;inode&nbsp;*inode,&nbsp;</span><span id="textcolor3599"><span>struct</span></span><span>&nbsp;file&nbsp;*file)</span> 
<a id="x1-66255r113"></a><span>113</span><span>{</span> 
<a id="x1-66257r114"></a><span>114</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3600"><span>/*&nbsp;We&nbsp;are&nbsp;now&nbsp;ready&nbsp;for&nbsp;our&nbsp;next&nbsp;caller.&nbsp;*/</span></span> 
<a id="x1-66259r115"></a><span>115</span><span>&nbsp;&nbsp;&nbsp;&nbsp;atomic_set(&amp;already_open,&nbsp;CDEV_NOT_USED);</span> 
<a id="x1-66261r116"></a><span>116</span> 
<a id="x1-66263r117"></a><span>117</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3601"><span>/**</span></span> 
<a id="x1-66265r118"></a><span>118</span><span id="textcolor3602"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Decrement&nbsp;the&nbsp;usage&nbsp;count,&nbsp;or&nbsp;else&nbsp;once&nbsp;you&nbsp;opened&nbsp;the&nbsp;file,&nbsp;you&nbsp;will</span></span> 
<a id="x1-66267r119"></a><span>119</span><span id="textcolor3603"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;never&nbsp;get&nbsp;rid&nbsp;of&nbsp;the&nbsp;module.</span></span> 
<a id="x1-66269r120"></a><span>120</span><span id="textcolor3604"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-66271r121"></a><span>121</span><span>&nbsp;&nbsp;&nbsp;&nbsp;module_put(THIS_MODULE);</span> 
<a id="x1-66273r122"></a><span>122</span> 
<a id="x1-66275r123"></a><span>123</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3605"><span>return</span></span><span>&nbsp;SUCCESS;</span> 
<a id="x1-66277r124"></a><span>124</span><span>}</span> 
<a id="x1-66279r125"></a><span>125</span> 
<a id="x1-66281r126"></a><span>126</span><span id="textcolor3606"><span>/**</span></span> 
<a id="x1-66283r127"></a><span>127</span><span id="textcolor3607"><span>&nbsp;*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process,&nbsp;which&nbsp;already&nbsp;opened&nbsp;the&nbsp;dev&nbsp;file,&nbsp;attempts&nbsp;to</span></span> 
<a id="x1-66285r128"></a><span>128</span><span id="textcolor3608"><span>&nbsp;*&nbsp;read&nbsp;from&nbsp;it.</span></span> 
<a id="x1-66287r129"></a><span>129</span><span id="textcolor3609"><span>&nbsp;*/</span></span> 
<a id="x1-66289r130"></a><span>130</span><span id="textcolor3610"><span>static</span></span><span>&nbsp;</span><span id="textcolor3611"><span>ssize_t</span></span><span>&nbsp;device_read(</span><span id="textcolor3612"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor3613"><span>/*&nbsp;see&nbsp;include/linux/fs.h&nbsp;*/</span></span> 
<a id="x1-66291r131"></a><span>131</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3614"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,&nbsp;</span><span id="textcolor3615"><span>/*&nbsp;buffer&nbsp;to&nbsp;fill&nbsp;with&nbsp;data&nbsp;*/</span></span> 
<a id="x1-66293r132"></a><span>132</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3616"><span>size_t</span></span><span>&nbsp;length,&nbsp;</span><span id="textcolor3617"><span>/*&nbsp;length&nbsp;of&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-66295r133"></a><span>133</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-66297r134"></a><span>134</span><span>{</span> 
<a id="x1-66299r135"></a><span>135</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3618"><span>/*&nbsp;Number&nbsp;of&nbsp;the&nbsp;bytes&nbsp;actually&nbsp;written&nbsp;to&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-66301r136"></a><span>136</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3619"><span>int</span></span><span>&nbsp;bytes_read&nbsp;=&nbsp;0;</span> 
<a id="x1-66303r137"></a><span>137</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3620"><span>const</span></span><span>&nbsp;</span><span id="textcolor3621"><span>char</span></span><span>&nbsp;*msg_ptr&nbsp;=&nbsp;msg;</span> 
<a id="x1-66305r138"></a><span>138</span> 
<a id="x1-66307r139"></a><span>139</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3622"><span>if</span></span><span>&nbsp;(!*(msg_ptr&nbsp;+&nbsp;*offset))&nbsp;{&nbsp;</span><span id="textcolor3623"><span>/*&nbsp;We&nbsp;are&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;message&nbsp;*/</span></span> 
<a id="x1-66309r140"></a><span>140</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;=&nbsp;0;&nbsp;</span><span id="textcolor3624"><span>/*&nbsp;reset&nbsp;the&nbsp;offset&nbsp;*/</span></span> 
<a id="x1-66311r141"></a><span>141</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3625"><span>return</span></span><span>&nbsp;0;&nbsp;</span><span id="textcolor3626"><span>/*&nbsp;signify&nbsp;end&nbsp;of&nbsp;file&nbsp;*/</span></span> 
<a id="x1-66313r142"></a><span>142</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-66315r143"></a><span>143</span> 
<a id="x1-66317r144"></a><span>144</span><span>&nbsp;&nbsp;&nbsp;&nbsp;msg_ptr&nbsp;+=&nbsp;*offset;</span> 
<a id="x1-66319r145"></a><span>145</span> 
<a id="x1-66321r146"></a><span>146</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3627"><span>/*&nbsp;Actually&nbsp;put&nbsp;the&nbsp;data&nbsp;into&nbsp;the&nbsp;buffer&nbsp;*/</span></span> 
<a id="x1-66323r147"></a><span>147</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3628"><span>while</span></span><span>&nbsp;(length&nbsp;&amp;&amp;&nbsp;*msg_ptr)&nbsp;{</span> 
<a id="x1-66325r148"></a><span>148</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3629"><span>/**</span></span> 
<a id="x1-66327r149"></a><span>149</span><span id="textcolor3630"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;buffer&nbsp;is&nbsp;in&nbsp;the&nbsp;user&nbsp;data&nbsp;segment,&nbsp;not&nbsp;the&nbsp;kernel</span></span> 
<a id="x1-66329r150"></a><span>150</span><span id="textcolor3631"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;segment&nbsp;so&nbsp;"*"&nbsp;assignment&nbsp;won</span><span>'</span><span>t&nbsp;work.&nbsp;We&nbsp;have&nbsp;to&nbsp;use</span></span> 
<a id="x1-66331r151"></a><span>151</span><span id="textcolor3632"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;put_user&nbsp;which&nbsp;copies&nbsp;data&nbsp;from&nbsp;the&nbsp;kernel&nbsp;data&nbsp;segment&nbsp;to</span></span> 
<a id="x1-66333r152"></a><span>152</span><span id="textcolor3633"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;user&nbsp;data&nbsp;segment.</span></span> 
<a id="x1-66335r153"></a><span>153</span><span id="textcolor3634"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></span> 
<a id="x1-66337r154"></a><span>154</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put_user(*(msg_ptr++),&nbsp;buffer++);</span> 
<a id="x1-66339r155"></a><span>155</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length--;</span> 
<a id="x1-66341r156"></a><span>156</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytes_read++;</span> 
<a id="x1-66343r157"></a><span>157</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-66345r158"></a><span>158</span> 
<a id="x1-66347r159"></a><span>159</span><span>&nbsp;&nbsp;&nbsp;&nbsp;*offset&nbsp;+=&nbsp;bytes_read;</span> 
<a id="x1-66349r160"></a><span>160</span> 
<a id="x1-66351r161"></a><span>161</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3635"><span>/*&nbsp;Most&nbsp;read&nbsp;functions&nbsp;return&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;put&nbsp;into&nbsp;the&nbsp;buffer.&nbsp;*/</span></span> 
<a id="x1-66353r162"></a><span>162</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3636"><span>return</span></span><span>&nbsp;bytes_read;</span> 
<a id="x1-66355r163"></a><span>163</span><span>}</span> 
<a id="x1-66357r164"></a><span>164</span> 
<a id="x1-66359r165"></a><span>165</span><span id="textcolor3637"><span>/*&nbsp;Called&nbsp;when&nbsp;a&nbsp;process&nbsp;writes&nbsp;to&nbsp;dev&nbsp;file;&nbsp;echo&nbsp;"enable"&nbsp;&gt;&nbsp;/dev/key_state&nbsp;*/</span></span> 
<a id="x1-66361r166"></a><span>166</span><span id="textcolor3638"><span>static</span></span><span>&nbsp;</span><span id="textcolor3639"><span>ssize_t</span></span><span>&nbsp;device_write(</span><span id="textcolor3640"><span>struct</span></span><span>&nbsp;file&nbsp;*filp,&nbsp;</span><span id="textcolor3641"><span>const</span></span><span>&nbsp;</span><span id="textcolor3642"><span>char</span></span><span>&nbsp;__user&nbsp;*buffer,</span> 
<a id="x1-66363r167"></a><span>167</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3643"><span>size_t</span></span><span>&nbsp;length,&nbsp;loff_t&nbsp;*offset)</span> 
<a id="x1-66365r168"></a><span>168</span><span>{</span> 
<a id="x1-66367r169"></a><span>169</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3644"><span>char</span></span><span>&nbsp;command[10];</span> 
<a id="x1-66369r170"></a><span>170</span> 
<a id="x1-66371r171"></a><span>171</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3645"><span>if</span></span><span>&nbsp;(length&nbsp;&gt;&nbsp;10)&nbsp;{</span> 
<a id="x1-66373r172"></a><span>172</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3646"><span>"command&nbsp;exceeded&nbsp;10&nbsp;char</span></span><span id="textcolor3647"><span>\n</span></span><span id="textcolor3648"><span>"</span></span><span>);</span> 
<a id="x1-66375r173"></a><span>173</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3649"><span>return</span></span><span>&nbsp;-EINVAL;</span> 
<a id="x1-66377r174"></a><span>174</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-66379r175"></a><span>175</span> 
<a id="x1-66381r176"></a><span>176</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3650"><span>if</span></span><span>&nbsp;(copy_from_user(command,&nbsp;buffer,&nbsp;length))</span> 
<a id="x1-66383r177"></a><span>177</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3651"><span>return</span></span><span>&nbsp;-EFAULT;</span> 
<a id="x1-66385r178"></a><span>178</span> 
<a id="x1-66387r179"></a><span>179</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3652"><span>if</span></span><span>&nbsp;(strncmp(command,&nbsp;</span><span id="textcolor3653"><span>"enable"</span></span><span>,&nbsp;strlen(</span><span id="textcolor3654"><span>"enable"</span></span><span>))&nbsp;==&nbsp;0)</span> 
<a id="x1-66389r180"></a><span>180</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_branch_enable(&amp;fkey);</span> 
<a id="x1-66391r181"></a><span>181</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3655"><span>else</span></span><span>&nbsp;</span><span id="textcolor3656"><span>if</span></span><span>&nbsp;(strncmp(command,&nbsp;</span><span id="textcolor3657"><span>"disable"</span></span><span>,&nbsp;strlen(</span><span id="textcolor3658"><span>"disable"</span></span><span>))&nbsp;==&nbsp;0)</span> 
<a id="x1-66393r182"></a><span>182</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_branch_disable(&amp;fkey);</span> 
<a id="x1-66395r183"></a><span>183</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3659"><span>else</span></span><span>&nbsp;{</span> 
<a id="x1-66397r184"></a><span>184</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr_err(</span><span id="textcolor3660"><span>"Invalid&nbsp;command:&nbsp;%s</span></span><span id="textcolor3661"><span>\n</span></span><span id="textcolor3662"><span>"</span></span><span>,&nbsp;command);</span> 
<a id="x1-66399r185"></a><span>185</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3663"><span>return</span></span><span>&nbsp;-EINVAL;</span> 
<a id="x1-66401r186"></a><span>186</span><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span> 
<a id="x1-66403r187"></a><span>187</span> 
<a id="x1-66405r188"></a><span>188</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3664"><span>/*&nbsp;Again,&nbsp;return&nbsp;the&nbsp;number&nbsp;of&nbsp;input&nbsp;characters&nbsp;used.&nbsp;*/</span></span> 
<a id="x1-66407r189"></a><span>189</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="textcolor3665"><span>return</span></span><span>&nbsp;length;</span> 
<a id="x1-66409r190"></a><span>190</span><span>}</span> 
<a id="x1-66411r191"></a><span>191</span> 
<a id="x1-66413r192"></a><span>192</span><span>module_init(chardev_init);</span> 
<a id="x1-66415r193"></a><span>193</span><span>module_exit(chardev_exit);</span> 
<a id="x1-66417r194"></a><span>194</span> 
<a id="x1-66419r195"></a><span>195</span><span>MODULE_LICENSE(</span><span id="textcolor3666"><span>"GPL"</span></span><span>);</span></pre>
<!-- l. 2133 --><p>   To check the state of the static key, we can use the <span><span><span>/dev/key_state</span></span></span>
interface.
</p><!-- l. 1 -->
   <pre id="fancyvrb100"><a id="x1-66422r1"></a><span>1</span><span>cat&nbsp;/dev/key_state</span></pre>
<!-- l. 2139 --><p>   This will display the current state of the key, which is disabled by default.
</p><!-- l. 2141 --><p>   To change the state of the static key, we can perform a write operation on the
file:
</p><!-- l. 1 -->
   <pre id="fancyvrb101"><a id="x1-66425r1"></a><span>1</span><span>echo&nbsp;enable&nbsp;&gt;&nbsp;/dev/key_state</span></pre>
<!-- l. 2147 --><p>   This will enable the static key, causing the code path to switch from the fastpath
to the slowpath.
</p><!-- l. 2149 --><p>   In some cases, the key is enabled or disabled at initialization and never changed,
we can declare a static key as read-only, which means that it can only be toggled in
the module init function. To declare a read-only static key, we can use the
<code> <span>DEFINE_STATIC_KEY_FALSE_RO</span>
</code> or <code>  <span>DEFINE_STATIC_KEY_TRUE_RO</span>
</code> macro instead. Attempts to change the key at runtime will result in a page fault. For
more information, see <a href="https://www.kernel.org/doc/Documentation/static-keys.txt">Static keys</a>
</p><!-- l. 2152 -->
   <h3 id="common-pitfalls"><span>19   </span> <a id="x1-6700019"></a>Common Pitfalls</h3>
<!-- l. 2155 -->
                                                                  

                                                                  
   <h4 id="using-standard-libraries"><span>19.1   </span> <a id="x1-6800019.1"></a>Using standard libraries</h4>
<!-- l. 2157 --><p>You can not do that. In a kernel module, you can only use kernel functions which are
the functions you can see in <span><span><span>/proc/kallsyms</span></span></span>.
</p><!-- l. 2160 -->
   <h4 id="disabling-interrupts"><span>19.2   </span> <a id="x1-6900019.2"></a>Disabling interrupts</h4>
<!-- l. 2162 --><p>You might need to do this for a short time and that is OK, but if you do not enable
them afterwards, your system will be stuck and you will have to power it
off.
</p><!-- l. 2164 -->
   <h3 id="where-to-go-from-here"><span>20   </span> <a id="x1-7000020"></a>Where To Go From Here?</h3>
<!-- l. 2166 --><p>For those deeply interested in kernel programming, <a href="https://kernelnewbies.org/">kernelnewbies.org</a> and the
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation">Documentation</a> subdirectory within the kernel source code are highly recommended.
Although the latter may not always be straightforward, it serves as a valuable initial
step for further exploration. Echoing Linus Torvalds’ perspective, the most effective
method to understand the kernel is through personal examination of the source
code.
</p><!-- l. 2171 --><p>   Contributions to this guide are welcome, especially if there are any significant
inaccuracies identified. To contribute or report an issue, please initiate an
issue at <a href="https://github.com/sysprog21/lkmpg"><span>https://github.com/sysprog21/lkmpg</span></a>. Pull requests are greatly
appreciated.
</p><!-- l. 2175 --><p>   Happy hacking!
</p>
   <p>     <span><a href="#fn1x0-bk" id="fn1x0"><sup>1</sup></a></span><span>The goal of threaded interrupts is to push more of the work to separate threads, so that the
</span><span>minimum needed for acknowledging an interrupt is reduced, and therefore the time spent handling
</span><span>the interrupt (where it can’t handle any other interrupts at the same time) is reduced. See</span>
<a href="https://lwn.net/Articles/302043/"><span>https://lwn.net/Articles/302043/</span></a><span>.</span></p>
 
 
</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux Network Performance Ultimate Guide (173 pts)]]></title>
            <link>https://ntk148v.github.io/posts/linux-network-performance-ultimate-guide/</link>
            <guid>41083801</guid>
            <pubDate>Sat, 27 Jul 2024 01:17:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ntk148v.github.io/posts/linux-network-performance-ultimate-guide/">https://ntk148v.github.io/posts/linux-network-performance-ultimate-guide/</a>, See on <a href="https://news.ycombinator.com/item?id=41083801">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><blockquote>The following content is from <a href="https://github.com/ntk148v/til/blob/master/linux/network-performance-ultimate-guide.md">my #til github</a>.</blockquote><p><strong>Source</strong></p><ul><li><a href="https://github.com/leandromoreira/linux-network-performance-parameters/">https://github.com/leandromoreira/linux-network-performance-parameters/</a></li><li><a href="https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf">https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf</a></li><li><a href="https://www.coverfire.com/articles/queueing-in-the-linux-network-stack/">https://www.coverfire.com/articles/queueing-in-the-linux-network-stack/</a></li><li><a href="https://blog.cloudflare.com/how-to-achieve-low-latency/">https://blog.cloudflare.com/how-to-achieve-low-latency/</a></li><li><a href="https://blog.cloudflare.com/how-to-receive-a-million-packets/">https://blog.cloudflare.com/how-to-receive-a-million-packets/</a></li><li><a href="https://beej.us/guide/bgnet/html/">https://beej.us/guide/bgnet/html/</a></li><li><a href="https://blog.csdn.net/armlinuxww/article/details/111930788">https://blog.csdn.net/armlinuxww/article/details/111930788</a></li><li><a href="https://www.ibm.com/docs/en/linux-on-systems?topic=recommendations-network-performance-tuning">https://www.ibm.com/docs/en/linux-on-systems?topic=recommendations-network-performance-tuning</a></li></ul><h2 id="linux-networking-stack">Linux Networking stack</h2><p><strong>Source:</strong></p><ul><li><p><a href="https://blog.packagecloud.io/illustrated-guide-monitoring-tuning-linux-networking-stack-receiving-data/">https://blog.packagecloud.io/illustrated-guide-monitoring-tuning-linux-networking-stack-receiving-data/</a></p></li><li><p><a href="https://blog.packagecloud.io/monitoring-tuning-linux-networking-stack-receiving-data/">https://blog.packagecloud.io/monitoring-tuning-linux-networking-stack-receiving-data/</a></p></li><li><p><a href="https://blog.packagecloud.io/monitoring-tuning-linux-networking-stack-sending-data/">https://blog.packagecloud.io/monitoring-tuning-linux-networking-stack-sending-data/</a></p></li><li><p><a href="https://www.sobyte.net/post/2022-10/linux-net-snd-rcv/">https://www.sobyte.net/post/2022-10/linux-net-snd-rcv/</a></p></li><li><p><a href="https://juejin.cn/post/7106345054368694280">https://juejin.cn/post/7106345054368694280</a></p></li><li><p><a href="https://openwrt.org/docs/guide-developer/networking/praxis">https://openwrt.org/docs/guide-developer/networking/praxis</a></p></li><li><p><a href="https://blog.51cto.com/u_15169172/2710604">https://blog.51cto.com/u_15169172/2710604</a></p></li><li><p><a href="https://sn0rt.github.io/media/paper/TCPlinux.pdf">https://sn0rt.github.io/media/paper/TCPlinux.pdf</a></p></li><li><p><a href="https://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8">https://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8</a></p></li><li><p>The complete network data flow:</p></li></ul><p><img src="http://web.archive.org/web/20170905131225if_/https://wiki.linuxfoundation.org/images/1/1c/Network_data_flow_through_kernel.png" alt=""></p><ul><li>It’s a getting started. Before perform any tuning, let make sure that we understand how computers running Linux receive packets.</li><li>Linux queue:</li></ul><p><img src="https://github.com/leandromoreira/linux-network-performance-parameters/raw/master/img/linux_network_flow.png" alt=""></p><p><strong>NOTE</strong>: The follow sections will heavily use <code>sysctl</code>. If you don’t familiar with this command, take a look at <a href="#204-sysctl">HOWTO#sysctl section</a>.</p><h3 id="linux-network-packet-reception">Linux network packet reception</h3><ul><li><p>You check the detailed version at <a href="https://blog.packagecloud.io/illustrated-guide-monitoring-tuning-linux-networking-stack-receiving-data">PackageCloud’s article</a>.</p><details><summary>Click to expand</summary>- In network devices, it is common for the NIC to raise an **IRQ** to signal that a packet has arrived and is ready to be processed.
- An IRQ (Interrupt Request) is a hardware signal sent to the processor instructing it to suspend its current activity and handle some external event, such as a keyboard input or a mouse movement.
- In Linux, IRQ mappings are stored in **/proc/interrupts**.
- When an IRQ handler is executed by the Linux kernel, it runs at a very, very high priority and often blocks additional IRQs from being generated. As such, IRQ handlers in device drivers must execute as quickly as possible and defer all long running work to execute outside of this context. This is why the **softIRQ** system exists.
- **softIRQ** system is a system that kernel uses to process work outside of the device driver IRQ context. In the case of network devices, the softIRQQ system is responsible for processing incoming packets<ul><li><p>Initial setup (from step 1-4):</p><p><img src="https://cdn.buttercms.com/hwT5dgTatRdfG7UshrAF" alt=""></p><ul><li>softIRQ kernel threads are created (1 per CPU).</li><li>The ksoftirqd threads begin executing their processing loops.</li><li><code>softnet_data</code> structures are created (1 per CPU), hold references to important data for processing network data. <code>poll_list</code> is created (1 per CPU).</li><li><code>net_dev_init</code> then registers the <code>NET_RX_SOFTIRQ</code> softirq with the softirq system by calling <code>open_softirq</code> - this registration is called <code>net_rx_action</code>,</li></ul></li><li><p>Alright, Linux just init and setup networking stack to wait for data arrival:</p><p><img src="https://cdn.buttercms.com/yharphBYTEm2Kt4G2fT9" alt=""></p><ul><li>Data is received by the NIC (Network Interface Card) from the network.</li><li>The NIC uses DMA (Direct Memory Access) to write the network data to RAM (in ring buffer).<ul><li>Some NICs are “multiqueue” NICs, meaning that they can DMA incoming packets to one of many ring buffers in RAM.</li></ul></li><li>The NIC raises an IRQ.</li><li>The device driver’s registered IRQ handler is executed.</li><li>The IRQ is cleared on the NIC, so that it can generate IRQs for net packet arrivals.</li><li>NAPI softIRQ poll loop is started with a call to <code>napi_schedule</code>.</li></ul></li><li><p>Check initial setup diagram (setup 5-8):</p><ul><li>The call to <code>napi_schedule</code> in the driver adds the driver’s NAPI poll structure to the <code>poll_list</code> for the current CPU.</li><li>The softirq pending a bit is set so that the <code>ksoftirqd</code> process on this CPU knows that there are packets to process.</li><li><code>run_ksoftirqd</code> function (which is being run in a loop by the <code>ksoftirq</code> kernel thread) executes.</li><li><code>__do_softirq</code> is called which checks the pending bitfield, sees that a softIRQ is pending, and calls the handler registerd for the pending softIRQ: <code>net_rx_action</code> (softIRQ kernel thread executes this, not the driver IRQ handler).</li></ul></li><li><p>Now, data processing begins:</p><ul><li><code>net_rx_action</code> loop starts by checking the NAPI poll list for NAPI structures.</li><li>The <code>budget</code> and elapsed time are checked to ensure that the softIRQ will not monopolize CPU time.</li><li>The registered <code>poll</code> function is called.</li><li>The driver’s <code>poll</code> functio harvests packets from the ring buffer in RAM.</li><li>Packets are handed over to <code>napi_gro_receive</code> (GRO - Generic Receive Offloading).<ul><li>GRO is a widely used SW-based offloading technique to reduce per-packet processing overheads.</li><li>By reassembling small packets into larger ones, GRO enables applications to process fewer large packets directly, thus reducing the number of packets to be processed.</li></ul></li><li>Packets are either held for GRO and the call chain ends here or packets are passed on to <code>netif_receive_skb</code> to proceed up toward the protocol stacks.</li></ul></li><li><p>Network data processing continues from <code>netif_receive_skb</code>, but the path of the data depends on whether or not Receive Packet Steering (RPS) is enabled or not.</p><p><img src="https://cdn.buttercms.com/uoaSO7cgTwKaH1esQgWX" alt=""></p><ul><li>If RPS is disabled:<ul><li><ol><li><code>netif_receive_skb</code> passed the data onto <code>__netif_receive_core</code>.</li></ol></li><li><ol start="6"><li><code>__netif_receive_core</code> delivers the data to any taps.</li></ol></li><li><ol start="7"><li><code>__netif_receive_core</code> delivers data to registed protocol layer handlers.</li></ol></li></ul></li><li>If RPS is enabled:<ul><li><ol><li><code>netif_receive_skb</code> passes the data on to <code>enqueue_to_backlog</code>.</li></ol></li><li><ol start="2"><li>Packets are placed on a per-CPU input queue for processing.</li></ol></li><li><ol start="3"><li>The remote CPU’s NAPI structure is added to that CPU’s poll_list and an IPI is queued which will trigger the softIRQ kernel thread on the remote CPU to wake-up if it is not running already.</li></ol></li><li><ol start="4"><li>When the <code>ksoftirqd</code> kernel thread on the remote CPU runs, it follows the same pattern describe in the previous section, but this time, the registered poll function is <code>process_backlog</code> which harvests packets from the current CPU’s input queue.</li></ol></li><li><ol start="5"><li>Packets are passed on toward <code>__net_receive_skb_core</code>.</li></ol></li><li><ol start="6"><li><code>__netif_receive_core</code> delivers data to any taps (like PCAP).</li></ol></li><li><ol start="7"><li><code>__netif_receive_core</code> delivers data to registered protocol layer handlers.</li></ol></li></ul></li></ul></li><li><p>Protocol stacks, netfilter, BPF, and finally the userland socket.</p><ul><li>Packets are received by the IPv4 protocol layer with <code>ip_rcv</code>.</li><li>Netfilter and a routing optimization are performed.</li><li>Data destined for the current system is delivered to higher-level protocol layers, like UDP.</li><li>Packets are received by the UDP protocol layer with <code>udp_rcv</code> and are queued to the receive buffer of a userland socket by <code>udp_queue_rcv_skb</code> and <code>sock_queue_rcv</code>. Prior to queuing to the receive buffer, BPF are processed.</li></ul></li></ul></details></li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/linux-networking-recv.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20201025161643899.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JvbmdfVG9h,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p><strong>NOTE</strong>: Some NICs are “multiple queues” NICs. This diagram above shows just a single ring buffer for simplicity, but depending on the NIC you are using and your hardware settings you may have mutliple queues in the system. Check <a href="#24-share-the-load-of-packet-processing-among-cpus">Share the load of packet processing among CPUs</a> section for detail.</p></blockquote><ol><li><p>Packet arrives at the NIC</p></li><li><p>NIC verifies <code>MAC</code> (if not on <a href="https://unix.stackexchange.com/questions/14056/what-is-kernel-ip-forwarding">promiscuous mode</a>) and <code>FCS</code> and decide to drop or to continue</p></li><li><p>NIC does <a href="https://en.wikipedia.org/wiki/Direct_memory_access">DMA (Direct Memory Access)</a> packets into RAM - in a kernel data structure called an <code>sk_buff</code> or <code>skb</code> (Socket Kernel Buffers - <a href="http://vger.kernel.org/~davem/skb.html">SKBs</a>).</p></li><li><p>NIC enqueues <em>references</em> to the packets at receive ring buffer queue <code>rx</code> until <code>rx-usecs</code> timeout or <code>rx-frames</code>. Let’s talk about the RX ring buffer:</p><ul><li>It is a <a href="https://en.wikipedia.org/wiki/Circular_buffer">circular buffer</a> where <em>an overflow simply overwrites existing data</em>.</li><li>It <em>does not contain packet data</em>. Instead it consists of descriptors which point to <code>skbs</code> which is DMA into RAM (step 2).</li></ul><p><img src="https://i.stack.imgur.com/HignO.png" alt=""></p><ul><li>Fixed size, FIFO and located at RAM (of course).</li></ul></li><li><p>NIC raises a <code>HardIRQ</code> - Hard Interrupt.</p><ul><li><code>HardIRQ</code>: interrupt from the hardware, known-as “top-half” interrupts.</li><li>When a NIC receives incoming data, it copies the data into kernel buffers using DMA. The NIC notifies the kernel of this data by raising a HardIRQ. These interrupts are processed by interrupt handlers which do minimal work, as they have already interrupted another task and cannot be interrupted themselves.</li><li>HardIRQs can be expensive in terms of CPU usage, especially when holding kernel locks. If they take too long to execute, they will cause the CPU to be unable to respond to other HardIRQ, so the kernel introduces <code>SoftIRQs</code> (Soft Interrupts), so that the time-consuming part of the HardIRQ handler can be moved to the SoftIRQ handler to handle it slowly. We will talk about SoftIRQ in the next steps.</li><li>HardIRQs can be seen in <code>/proc/interrupts</code> where each queue has an interrupt vector in the 1st column assigned to it. These are initialized when the system boots or when the NIC device driver module is loaded. Each RX and TX queue is assigned a unique vector, which informs the interrupt handler as to which NIC/queue the interrupt is coming from. The columns represent the number of incoming interrupts as a counter value:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>egrep “CPU0<span>|</span>eth3” /proc/interrupts
</span></span><span><span>    CPU0 CPU1 CPU2 CPU3 CPU4 CPU5
</span></span><span><span>110:    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>   IR-PCI-MSI-edge   eth3-rx-0
</span></span><span><span>111:    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>   IR-PCI-MSI-edge   eth3-rx-1
</span></span><span><span>112:    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>   IR-PCI-MSI-edge   eth3-rx-2
</span></span><span><span>113:    <span>2</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>   IR-PCI-MSI-edge   eth3-rx-3
</span></span><span><span>114:    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>    <span>0</span>   IR-PCI-MSI-edge   eth3-tx
</span></span></code></pre></div></li><li><p>CPU runs the <code>IRQ handler</code> that runs the driver’s code.</p></li><li><p>Driver will schedule a <a href="https://en.wikipedia.org/wiki/New_API">NAPI</a>, clear the HardIRQ on the NIC, so that it can generate IRQs for new packets arrivals.</p><p><img src="https://cdn.buttercms.com/yharphBYTEm2Kt4G2fT9" alt=""></p></li><li><p>Driver raise a <code>SoftIRQ (NET_RX_SOFTIRQ)</code>.</p><ul><li>Let’s talk about the <code>SoftIRQ</code>, also known as “bottom-half” interrupt. It is a kernel routines which are scheduled to run at a time when other tasks will not be interrupted.</li><li>Purpose: drain the network adapter receive Rx ring buffer.</li><li>These routines run in the form of <code>ksoftirqd/cpu-number</code> processes and call driver-specific code functions.</li><li>Check command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ps aux <span>|</span> grep ksoftirq
</span></span><span><span>                                                                  <span># ksotirqd/&lt;cpu-number&gt;</span>
</span></span><span><span>root          <span>13</span>  0.0  0.0      <span>0</span>     <span>0</span> ?        S    Dec13   0:00 <span>[</span>ksoftirqd/0<span>]</span>
</span></span><span><span>root          <span>22</span>  0.0  0.0      <span>0</span>     <span>0</span> ?        S    Dec13   0:00 <span>[</span>ksoftirqd/1<span>]</span>
</span></span><span><span>root          <span>28</span>  0.0  0.0      <span>0</span>     <span>0</span> ?        S    Dec13   0:00 <span>[</span>ksoftirqd/2<span>]</span>
</span></span><span><span>root          <span>34</span>  0.0  0.0      <span>0</span>     <span>0</span> ?        S    Dec13   0:00 <span>[</span>ksoftirqd/3<span>]</span>
</span></span><span><span>root          <span>40</span>  0.0  0.0      <span>0</span>     <span>0</span> ?        S    Dec13   0:00 <span>[</span>ksoftirqd/4<span>]</span>
</span></span><span><span>root          <span>46</span>  0.0  0.0      <span>0</span>     <span>0</span> ?        S    Dec13   0:00 <span>[</span>ksoftirqd/5<span>]</span>
</span></span></code></pre></div><ul><li>Monitor command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>watch -n1 grep RX /proc/softirqs
</span></span><span><span>watch -n1 grep TX /proc/softirqs
</span></span></code></pre></div></li><li><p>NAPI polls data from the rx ring buffer.</p><ul><li>NAPI was written to make processing data packets of incoming cards more efficient. HardIRQs are expensive because they can’t be interrupt, we both known that. Even with <em>Interrupt coalesecense</em> (describe later in more detail), the interrupt handler will monopolize a CPU core completely. The design of NAPI allows the driver to go into a polling mode instead of being HardIRQ for every required packet receive.</li><li>Step 1-&gt;9 in brief:</li></ul><p><img src="https://i.stack.imgur.com/BKBvW.png" alt=""></p><ul><li><p>The polling routine has a budget which determines the CPU time the code is allowed, by using <code>netdev_budget_usecs</code> timeout or <code>netdev_budget</code> and <code>dev_weight</code> packets. This is required to prevent SoftIRQs from monopolizing the CPU. On completion, the kernel will exit the polling routine and re-arm, then the entire procedure will repeat itself.</p></li><li><p>Let’s talk about <code>netdev_budget_usecs</code> timeout or <code>netdev_budget</code> and <code>dev_weight</code> packets:</p><ul><li><p>If the SoftIRQs do not run for long enough, the rate of incoming data could exceed the kernel’s capability to drain the buffer last enough. As a result, the NIC buffers will overflow and traffic will be lost. Occasionaly, it is necessary to increase the time that SoftIRQs are allowed to run on the CPU. This is known as the <code>netdev_budget</code>.</p><ul><li>Check command, the default value is 300, it means the SoftIRQ process to drain 300 messages from the NIC before getting off the CPU.</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl net.core.netdev_budget
</span></span><span><span>net.core.netdev_budget <span>=</span> <span>300</span>
</span></span></code></pre></div></li><li><p><code>netdev_budget_usecs</code>: The maximum number of microseconds in 1 NAPI polling cycle. Polling will exit when either <code>netdev_budget_usecs</code> have elapsed during the poll cycle or the number of packets processed reaches <code>netdev_budget</code>.</p><ul><li>Check command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl net.core.netdev_budget_usecs
</span></span><span><span>
</span></span><span><span>net.core.netdev_budget_usecs <span>=</span> <span>8000</span>
</span></span></code></pre></div></li><li><p><code>dev_weight</code>: the maximum number of packets that kernel can handle on a NAPI interrupt, it’s a PER-CPU variable. For drivers that support LRO or GRO_HW, a hardware aggregated packet is counted as one packet in this.</p></li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl net.core.dev_weight
</span></span><span><span>
</span></span><span><span>net.core.dev_weight <span>=</span> <span>64</span>
</span></span></code></pre></div></li></ul></li><li><p>Linux also allocates memory to <code>sk_buff</code>.</p></li><li><p>Linux fills the metadata: protocol, interface, setmatchheader, removes ethernet</p></li><li><p>Linux passes the skb to the kernel stack (<code>netif_receive_skb</code>)</p></li><li><p>It sets the network header, clone <code>skb</code> to taps (i.e. tcpdump) and pass it to tc ingress</p></li><li><p>Packets are handled to a qdisc sized <code>netdev_max_backlog</code> with its algorithm defined by <code>default_qdisc</code>:</p><ul><li><code>netdev_max_backlog</code>: a queue whitin the Linux kernel where traffic is stored after reception from the NIC, but before processing by the protocols stacks (IP, TCP, etc). There is one backlog queue per CPU core. A given core’s queue can grow automatically, containing a number of packets up to the maximum specified by the <code>netdev_max_backlog</code> settings.</li><li>In other words, this is the maximum number of packets, queued on the INPUT side (the ingress dsic), when the interface receives packets faster than kernel can process them.</li><li>Check command, the default value is 1000.</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl net.core.netdev_max_backlog
</span></span><span><span>
</span></span><span><span>net.core.netdev_max_backlog <span>=</span> <span>1000</span>
</span></span></code></pre></div><ul><li><code>rxqueuelen</code>: Receipt Queue Length, is a TCP/IP stack network interface value that sets the number of packets allowed per kernel receive queue of a network interface device.<ul><li>By default, value is 1000 (depend on network interface driver): <code>ifconfig &lt;interface&gt; | grep rxqueuelen</code></li></ul></li><li><code>default_qdisc</code>: the default queuing discipline to use for network devices. This allows overriding the default of pfifo_fast with an alternative. Since the default queuing discipline is created without additional parameters so is best suited to queuing disciplines that work well without configuration like stochastic fair queue (sfq), CoDel (codel) or fair queue CoDel (fq_codel). For full details for each QDisc in <code>man tc &lt;qdisc-name&gt;</code> (for example, <code>man tc fq_codel</code>).</li></ul></li><li><p>It calls <code>ip_rcv</code> and packets are handled to IP</p></li><li><p>It calls netfilter (<code>PREROUTING</code>)</p></li><li><p>It looks at the routing table, if forwarding or local</p></li><li><p>If it’s local it calls netfilter (<code>LOCAL_IN</code>)</p></li><li><p>It calls the L4 protocol (for instance <code>tcp_v4_rcv</code>)</p></li><li><p>It finds the right socket</p></li><li><p>It goes to the tcp finite state machine</p></li><li><p>Enqueue the packet to the receive buffer and sized as <code>tcp_rmem</code> rules</p><ul><li>If `tcp_moderate_rcvbuf is enabled kernel will auto-tune the receive buffer</li><li><code>tcp_rmem</code>: Contains 3 values that represent the minimum, default and maximum size of the TCP socket receive buffer.<ul><li>min: minimal size of receive buffer used by TCP sockets. It is guaranteed to each TCP socket, even under moderate memory pressure. Default: 4 KB.</li><li>default: initial size of receive buffer used by TCP sockets. This value overrides <code>net.core.rmem_default</code> used by other protocols. Default: 131072 bytes. This value results in initial window of 65535.</li><li>max: maximal size of receive buffer allowed for automatically selected receiver buffers for TCP socket. This value does not override <code>net.core.rmem_max</code>. Calling <code>setsockopt()</code> with <code>SO_RCVBUF</code> disables automatic tuning of that socket’s receive buffer size, in which case this value is ignored. <code>SO_RECVBUF</code> sets the fixed size of the TCP receive buffer, it will override <code>tcp_rmem</code>, and the kernel will no longer dynamically adjust the buffer. The maximum value set by <code>SO_RECVBUF</code> cannot exceed <code>net.core.rmem_max</code>. Normally, we will not use it. Default: between 131072 and 6MB, depending on RAM size.</li></ul></li><li><code>net.core.rmem_max</code>: the upper limit of the TCP receive buffer size.<ul><li>Between <code>net.core.rmem_max</code> and <code>net.ipv4.tcp-rmem</code>‘max value, the bigger value <a href="https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_output.c#L241">takes precendence</a>.</li><li>Increase this buffer to enable scaling to a larger window size. Larger windows increase the amount of data to be transferred before an acknowledgement (ACK) is required. This reduces overall latencies and results in increased throughput.</li><li>This setting is typically set to a very conservative value of 262,144 bytes. It is recommended this value be set as large as the kernel allows. 4.x kernels accept values over 16 MB.</li></ul></li></ul></li><li><p>Kernel will signalize that there is data available to apps (epoll or any polling system)</p></li><li><p>Application wakes up and reads the data</p></li></ol><h3 id="linux-kernel-network-transmission">Linux kernel network transmission</h3><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/linux-networking-send.png" alt=""></p><p><img src="https://s2.51cto.com/images/blog/202104/15/25012de83ba2d80fcd790b49ff346b62.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184" alt=""></p><p>Although simpler than the ingress logic, the egress is still worth acknowledging</p><ol><li><p>Application sends message (<code>sendmsg</code> or other)</p></li><li><p>TCP send message allocates skb_buff</p></li><li><p>It enqueues skb to the socket write buffer of <code>tcp_wmem</code> size</p><ul><li><code>tcp_wmem</code>: Contains 3 values that represent the minimum, default and maximum size of the TCP socket send buffer.<ul><li>min: amount of memory reserved for send buffers for TCP sockets. Each TCP socket has rights to use it due to fact of its birth. Default: 4K</li><li>default: initial size of send buffer used by TCP sockets. This value overrides net.core.wmem_default used by other protocols. It is usually lower than <code>net.core.wmem_default</code>. Default: 16K</li><li>max: maximal amount of memory allowed for automatically tuned send buffers for TCP sockets. This value does not override net.core.wmem_max. Calling <code>setsockopt()</code> with <code>SO_SNDBUF</code> disables automatic tuning of that socket’s send buffer size, in which case this value is ignored. <code>SO_SNDBUF</code> sets the fixed size of the send buffer, it will override <code>tcp_wmem</code>, and the kernel will no longer dynamically adjust the buffer. The maximum value set by SO_SNDBUF cannot exceed <code>net.core.wmem_max</code>. Normally, we will not use it. Default: between 64K and 4MB, depending on RAM size.</li></ul></li><li>Check command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl net.ipv4.tcp_wmem
</span></span><span><span>net.ipv4.tcp_wmem <span>=</span> <span>4096</span>        <span>16384</span>   <span>262144</span>
</span></span></code></pre></div><ul><li>The size of the TCP send buffer will be dynamically adjusted between min and max by the kernel. The initial size is default.</li><li><code>net.core.wmem_max</code>: the upper limit of the TCP send buffer size. Similar to <code>net.core.rmem_max</code> (but for transimission).</li></ul></li><li><p>Builds the TCP header (src and dst port, checksum)</p></li><li><p>Calls L3 handler (in this case <code>ipv4</code> on <code>tcp_write_xmit</code> and <code>tcp_transmit_skb</code>)</p></li><li><p>L3 (<code>ip_queue_xmit</code>) does its work: build ip header and call netfilter (<code>LOCAL_OUT</code>)</p></li><li><p>Calls output route action</p></li><li><p>Calls netfilter (<code>POST_ROUTING</code>)</p></li><li><p>Fragment the packet (<code>ip_output</code>)</p></li><li><p>Calls L2 send function (<code>dev_queue_xmit</code>)</p></li><li><p>Feeds the output (QDisc) queue of <code>txqueuelen</code> length with its algorithm <code>default_qdisc</code></p><ul><li><code>txqueuelen</code>: Transmit Queue Length, is a TCP/IP stack network interface value that sets the number of packets allowed per kernel transmit queue of a network interface device.<ul><li>By default, value is 1000 (depend on network interface driver): <code>ifconfig &lt;interface&gt; | grep txqueuelen</code></li></ul></li><li><code>default_qdisc</code>: the default queuing discipline to use for network devices. This allows overriding the default of pfifo_fast with an alternative. Since the default queuing discipline is created without additional parameters so is best suited to queuing disciplines that work well without configuration like stochastic fair queue (sfq), CoDel (codel) or fair queue CoDel (fq_codel). For full details for each QDisc in <code>man tc &lt;qdisc-name&gt;</code> (for example, <code>man tc fq_codel</code>).</li></ul></li><li><p>The driver code enqueue the packets at the <code>ring buffer tx</code></p></li><li><p>The driver will do a <code>soft IRQ (NET_TX_SOFTIRQ)</code> after <code>tx-usecs</code> timeout or <code>tx-frames</code></p></li><li><p>Re-enable hard IRQ to NIC</p></li><li><p>Driver will map all the packets (to be sent) to some DMA’ed region</p></li><li><p>NIC fetches the packets (via DMA) from RAM to transmit</p></li><li><p>After the transmission NIC will raise a <code>hard IRQ</code> to signal its completion</p></li><li><p>The driver will handle this IRQ (turn it off)</p></li><li><p>And schedule (<code>soft IRQ</code>) the NAPI poll system</p></li><li><p>NAPI will handle the receive packets signaling and free the RAM</p></li></ol><h2 id="network-performance-tuning">Network Performance tuning</h2><p>Tuning a NIC for optimum throughput and latency is a complex process with many factors to consider. There is no generic configuration that can be broadly applied to every system.</p><p>There are factors should be considered for network performance tuning. Note that, the interface card name may be different in your device, change the appropriate value.</p><p>Ok, let’s follow through the Packet reception (and transmission) and do some tuning.</p><h3 id="quick-howto">Quick HOWTO</h3><h4 id="procnetsoftnet_stat--procnetsockstat"><code>/proc/net/softnet_stat</code> &amp; <code>/proc/net/sockstat</code></h4><p>Before we continue, let’s discuss about <code>/proc/net/softnet_stat</code> &amp; <code>/proc/net/sockstat</code> as these files will be used a lot then.</p><div><pre tabindex="0"><code data-lang="shell"><span><span>cat /proc/net/softnet_stat
</span></span><span><span>
</span></span><span><span>0000272d <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span>
</span></span><span><span>000034d9 <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000001</span>
</span></span><span><span>00002c83 <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000002</span>
</span></span><span><span>0000313d <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000003</span>
</span></span><span><span><span>00003015</span> <span>00000000</span> <span>00000001</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000004</span>
</span></span><span><span>000362d2 <span>00000000</span> 000000d2 <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000000</span> <span>00000005</span>
</span></span></code></pre></div><ul><li>Each line of the softnet_stat file represents a CPU core starting from CPU0.</li><li>The statistics in each column are provided in hexadecimal</li><li>1st column is the number of frames received by the interrupt handler.</li><li>2nd column is the number of frames dropped due to <code>netdev_max_backlog</code> being exceeded.</li><li>3rd column is the number of times ksoftirqd ran out of <code>netdev_budget</code> or CPU time when there was still work to be done.</li><li>The other columns may vary depending on the Linux version.</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>cat /proc/net/sockstat
</span></span><span><span>
</span></span><span><span>sockets: used <span>937</span>
</span></span><span><span>TCP: inuse <span>21</span> orphan <span>0</span> tw <span>0</span> alloc <span>22</span> mem <span>5</span>
</span></span><span><span>UDP: inuse <span>9</span> mem <span>5</span>
</span></span><span><span>UDPLITE: inuse <span>0</span>
</span></span><span><span>RAW: inuse <span>0</span>
</span></span><span><span>FRAG: inuse <span>0</span> memory <span>0</span>
</span></span></code></pre></div><ul><li>Check <code>mem</code> field. It is calculated simply by summing <code>sk_buff-&gt;truesize</code> for all sockets.</li><li>More detail <a href="https://unix.stackexchange.com/questions/419518/how-to-tell-how-much-memory-tcp-buffers-are-actually-using">here</a></li></ul><h4 id="ss"><code>ss</code></h4><ul><li><code>ss</code> is another utility to investigate sockets. It is used to dump socket statistics. It allows showing information similar to <code>netstat</code>. IT can display more TCP and state information than other tools.</li><li>For more you should look at man page: <code>man ss</code>.</li><li>For example, to check socket memory usage:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ss -tm
</span></span><span><span>
</span></span><span><span><span>#  -m, --memory</span>
</span></span><span><span><span>#         Show socket memory usage. The output format is:</span>
</span></span><span><span>
</span></span><span><span><span>#         skmem:(r&lt;rmem_alloc&gt;,rb&lt;rcv_buf&gt;,t&lt;wmem_alloc&gt;,tb&lt;snd_buf&gt;,</span>
</span></span><span><span><span>#                       f&lt;fwd_alloc&gt;,w&lt;wmem_queued&gt;,o&lt;opt_mem&gt;,</span>
</span></span><span><span><span>#                       bl&lt;back_log&gt;,d&lt;sock_drop&gt;)</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;rmem_alloc&gt;</span>
</span></span><span><span><span>#                the memory allocated for receiving packet</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;rcv_buf&gt;</span>
</span></span><span><span><span>#                the total memory can be allocated for receiving packet</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;wmem_alloc&gt;</span>
</span></span><span><span><span>#                the memory used for sending packet (which has been sent to layer 3)</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;snd_buf&gt;</span>
</span></span><span><span><span>#                the total memory can be allocated for sending packet</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;fwd_alloc&gt;</span>
</span></span><span><span><span>#                the  memory  allocated  by  the  socket as cache, but not used for receiving/sending packet yet. If need memory to send/receive packet, the memory in this</span>
</span></span><span><span><span>#                cache will be used before allocate additional memory.</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;wmem_queued&gt;</span>
</span></span><span><span><span>#                The memory allocated for sending packet (which has not been sent to layer 3)</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;ropt_mem&gt;</span>
</span></span><span><span><span>#                The memory used for storing socket option, e.g., the key for TCP MD5 signature</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;back_log&gt;</span>
</span></span><span><span><span>#                The memory used for the sk backlog queue. On a process context, if the process is receiving packet, and a new packet is received, it will be put into  the</span>
</span></span><span><span><span>#                sk backlog queue, so it can be received by the process immediately</span>
</span></span><span><span>
</span></span><span><span><span>#         &lt;sock_drop&gt;</span>
</span></span><span><span><span>#                the number of packets dropped before they are de-multiplexed into the socket</span>
</span></span><span><span>
</span></span><span><span><span>#  -t, --tcp</span>
</span></span><span><span><span>#         Display TCP sockets.</span>
</span></span><span><span>
</span></span><span><span>State       Recv-Q Send-Q        Local Address:Port        Peer Address:Port
</span></span><span><span>ESTAB       <span>0</span>      <span>0</span>             192.168.56.102:ssh        192.168.56.1:56328
</span></span><span><span>skmem:<span>(</span>r0,rb369280,t0,tb87040,f0,w0,o0,bl0,d0<span>)</span>
</span></span><span><span>
</span></span><span><span><span># rcv_buf: 369280 bytes</span>
</span></span><span><span><span># snd_buf: 87040 bytes</span>
</span></span></code></pre></div><h4 id="netstat"><code>netstat</code></h4><ul><li>A command-line utility which can print information about open network connections and protocol stack statistics. It retrieves information about the networking subsystem from the <code>/proc/net/</code> file system. These files include:<ul><li><code>/proc/net/dev</code> (device information)</li><li><code>/proc/net/tcp</code> (TCP socket information)</li><li><code>/proc/net/unix</code> (Unix domain socket information)</li></ul></li><li>For more information about <code>netstat</code> and its referenced files from <code>/proc/net/</code>, refer to the <code>netstat</code> man page: <code>man netstat</code>.</li></ul><h4 id="sysctl"><code>sysctl</code></h4><ul><li>Rather than modifying system variables by <code>echo</code>-ing values in the <code>/proc</code> file system directly:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span><span>echo</span> <span>"value"</span> &gt; /proc/sys/location/variable
</span></span></code></pre></div><ul><li>The <code>sysctl</code> command is available to change system /network settings. It provides methods of overriding default settings values on a temporary basis for evaluation purposes as well as changing values permanently that persist across system restarts.</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span><span># To display a list of available sysctl variables</span>
</span></span><span><span>sysctl -a <span>|</span> less
</span></span><span><span><span># To only list specific variables use</span>
</span></span><span><span>sysctl variable1 <span>[</span>variable2<span>]</span> <span>[</span>...<span>]</span>
</span></span><span><span><span># To change a value temporarily use the sysctl command with the -w option:</span>
</span></span><span><span>sysctl -w <span>variable</span><span>=</span>value
</span></span><span><span><span># To override the value persistently, the /etc/sysctl.conf file must be changed. This is the recommend method. Edit the /etc/sysctl.conf file.</span>
</span></span><span><span>vi /etc/sysctl.conf
</span></span><span><span><span># Then add/change the value of the variable</span>
</span></span><span><span><span>variable</span> <span>=</span> value
</span></span><span><span><span># Save the changes and close the file. Then use the -p option of the sysctl command to load the updated sysctl.conf settings:</span>
</span></span><span><span>sysctl -p or sysctl -p /etc/sysctl.conf
</span></span><span><span><span># The updated sysctl.conf values will now be applied when the system restarts.</span>
</span></span></code></pre></div><h3 id="the-nic-ring-buffer">The NIC Ring Buffer</h3><p><img src="https://myaut.github.io/dtrace-stap-book/images/net.png" alt=""></p><ul><li><p>Firstly, check out step (4) - NIC Ring buffer. It’s a circular buffer, fixed size, FIFO, located at RAM. Buffer to smoothly accept bursts of connections without dropping them, you might need to increase these queues when you see drops or overrun, aka there are more packets coming than the kernel is able to consume them, the side effect might be increased latency.</p></li><li><p>Ring buffer’s size is commonly set to a smaller size then the maximum. Often, increasing the receive buffer size is alone enough to prevent packet drops, as it can allow the kernel slightly more time to drain the buffer.</p><ul><li>Check command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ethtool -g eth3
</span></span><span><span>Ring parameters <span>for</span> eth3:
</span></span><span><span>Pre-set maximums:
</span></span><span><span>RX: <span>8192</span>
</span></span><span><span>RX Mini: <span>0</span>
</span></span><span><span>RX Jumbo: <span>0</span>
</span></span><span><span>TX: <span>8192</span>
</span></span><span><span>Current hardware settings:
</span></span><span><span>RX: <span>1024</span>
</span></span><span><span>RX Mini: <span>0</span>
</span></span><span><span>RX Jumbo: <span>0</span>
</span></span><span><span>TX: <span>512</span>
</span></span><span><span><span># eth3's inteface has the space for 8KB but only using 1KB</span>
</span></span></code></pre></div><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span><span># Increase both the Rx and Tx buffers to the maximum</span>
</span></span><span><span>ethtool -G eth3 rx <span>8192</span> tx <span>8192</span>
</span></span></code></pre></div><ul><li><p>Persist the value:</p><ul><li>RHEL/CentOS: Use <code>/sbin/ifup-local</code>, follow <a href="https://access.redhat.com/solutions/8694">here</a> for detail.</li><li>Ubuntu: follow <a href="https://unix.stackexchange.com/questions/542546/what-is-the-systemd-native-way-to-manage-nic-ring-buffer-sizes-before-bonded-int">here</a></li></ul></li><li><p>How to monitor:</p></li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ethtool -S eth3 <span>|</span> grep -e <span>"err"</span> -e <span>"drop"</span> -e <span>"over"</span> -e <span>"miss"</span> -e <span>"timeout"</span> -e <span>"reset"</span> -e <span>"restar"</span> -e <span>"collis"</span> -e <span>"over"</span> <span>|</span> grep -v <span>"\: 0"</span>
</span></span></code></pre></div></li></ul><h3 id="interrupt-coalescence-ic---rx-usecs-tx-usecs-rx-frames-tx-frames-hardware-irq">Interrupt Coalescence (IC) - rx-usecs, tx-usecs, rx-frames, tx-frames (hardware IRQ)</h3><ul><li><p>Move on to step (5), hard interrupt - HardIRQ. NIC enqueue references to the packets at receive ring buffer queue rx until rx-usecs timeout or rx-frames, then raises a HardIRQ. This is called <em>Interrupt coalescence</em>:</p><ul><li>The amount of traffic that a network will receive/transmit (number of frames) <code>rx/tx-frames</code>, or time that passes after receiving/transmitting traffic (timeout) <code>rx/tx-usecs</code>.<ul><li>Interrupting too soon: poor system performance (the kernel stops a running task to handle the hardIRQ)</li><li>Interrupting too late: traffic isn’t taken off the NIC soon enough -&gt; more traffic -&gt; overwrite -&gt; traffic loss!</li></ul></li></ul></li><li><p>Updating <em>Interrupt coalescence</em> can reduce CPU usage, hardIRQ, might be increase throughput at cost of latency</p></li><li><p>Tuning:</p><ul><li>Check command:<ul><li>Adaptive mode enables the card to auto-moderate the IC. The driver will inspect traffic patterns and kernel receive patterns, and estimate coalescing settings on-the-fly which aim to prevent packet loss -&gt; useful if many small packets are received.</li><li>Higher interrupt coalescence favors bandwidth over latency: VOIP application (latency-sensitive) may require less coalescence than a file transfer (throughput-sensitive)</li></ul></li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ethtool -c eth3
</span></span><span><span>
</span></span><span><span>Coalesce parameters <span>for</span> eth3:
</span></span><span><span>Adaptive RX: on TX: off <span># Adaptive mdoe</span>
</span></span><span><span>stats-block-usecs: <span>0</span>
</span></span><span><span>sample-interval: <span>0</span>
</span></span><span><span>pkt-rate-low: <span>400000</span>
</span></span><span><span>pkt-rate-high: <span>450000</span>
</span></span><span><span>rx-usecs: <span>16</span>
</span></span><span><span>rx-frames: <span>44</span>
</span></span><span><span>rx-usecs-irq: <span>0</span>
</span></span><span><span>rx-frames-irq: <span>0</span>
</span></span></code></pre></div><ul><li>Change command:<ul><li>Allow at least some packets to buffer in the NIC, and at least some time to pass, before interrupting the kernel. The values depend on system capabilities and traffic received.</li></ul></li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span><span># Turn adaptive mode off</span>
</span></span><span><span><span># Interrupt the kernel immediately upon reception of any traffic</span>
</span></span><span><span>ethtool -C eth3 adaptive-rx off rx-usecs <span>0</span> rx-frames <span>0</span>
</span></span></code></pre></div><ul><li>How to monitor:</li></ul></li></ul><h3 id="irq-affinity">IRQ Affinity</h3><ul><li>IRQs have an associated “affinity property”, <code>smp_affinity</code>, which defines the CPU cores that are allowed to execute the Interrupt Service Routines (ISRs) for that IRQ. This property can be used to improve application performance by assigning both interrupt affinity and the application’s thread affinity to one or more specific CPU cores. This allows cache line sharing between the specified interrupt and application threads.</li><li>By default, it is controlled by <a href="https://github.com/Irqbalance/irqbalance"><code>irqbalancer</code></a> daemon.</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>systemctl status irqbalance.service
</span></span></code></pre></div><ul><li>But it can also be manually balanced if desired to determine if <code>irqbalance</code> is not balancing IRQs in a optimum manner and therefore causing packet loss. There may be some very specific cases where manually balancing interrupts permanently can be beneficial. Before does this kind of tuning, make sure you stop <code>irqbalance</code>:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>systemctl stop irqbalance.service
</span></span></code></pre></div><ul><li>The interrupt affinity value a particular IRQ number is stored in the associated <code>/proc/irq/&lt;IRQ_NUMBER&gt;/smp_affinity</code> file, which can be viewed and modified by the root user. The value stored in this file is a hexadecimal bit-mask representing all CPU cores in the system.</li><li>To set the interrupt affinity for the Ethernet driver on a server with 4 cores (for example):</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span><span># Determine the IRQ number associated with the Ethernet driver</span>
</span></span><span><span>grep eth0 /proc/interrupts
</span></span><span><span>
</span></span><span><span>32:   <span>0</span>     <span>140</span>      <span>45</span>       <span>850264</span>      PCI-MSI-edge      eth0
</span></span><span><span>
</span></span><span><span><span># IRQ 32</span>
</span></span><span><span><span># Check the current value</span>
</span></span><span><span><span># The default value is 'f', meaning that the IRQ can be serviced</span>
</span></span><span><span><span># on any of the CPUs</span>
</span></span><span><span>cat /proc/irq/32/smp_affinity
</span></span><span><span>
</span></span><span><span>f
</span></span><span><span>
</span></span><span><span><span># CPU0 is the only CPU used</span>
</span></span><span><span><span>echo</span> <span>1</span> &gt; /proc/irq/32/smp_affinity
</span></span><span><span>cat /proc/irq/32/smp_affinity
</span></span><span><span>
</span></span><span><span><span>1</span>
</span></span><span><span>
</span></span><span><span><span># Commas can be used to delimit smp_affinity values for discrete 32-bit groups</span>
</span></span><span><span><span># This is required on systems with more than 32 cores</span>
</span></span><span><span><span># For example, IRQ  40 is serviced on all cores of a 64-core system</span>
</span></span><span><span>cat /proc/irq/40/smp_affinity
</span></span><span><span>
</span></span><span><span>ffffffff,ffffffff
</span></span><span><span>
</span></span><span><span><span># To service IRQ 40 on only the upper 32 cores</span>
</span></span><span><span><span>echo</span> 0xffffffff,00000000 &gt; /proc/irq/40/smp_affinity
</span></span><span><span>cat /proc/irq/40/smp_affinity
</span></span><span><span>
</span></span><span><span>ffffffff,00000000
</span></span></code></pre></div><ul><li><a href="https://gist.github.com/xdel/9c50ccedea9e0c9d0000d550b07ee242">Script</a> to set IRQ affinity on Intel NICs, handles system with &gt; 32 cores.</li><li>As I said, IRQ affinity can improve performance but only in a very specific configuration with a pre-defined workload. It is <a href="https://stackoverflow.com/questions/48659720/is-it-a-good-practice-to-set-interrupt-affinity-and-io-handling-thread-affinity">a double edged sword</a>.</li></ul><p><strong>Source:</strong></p><ul><li><a href="http://balodeamit.blogspot.com/2013/10/receive-side-scaling-and-receive-packet.html">http://balodeamit.blogspot.com/2013/10/receive-side-scaling-and-receive-packet.html</a></li><li><a href="https://garycplin.blogspot.com/2017/06/linux-network-scaling-receives-packets.html">https://garycplin.blogspot.com/2017/06/linux-network-scaling-receives-packets.html</a></li><li><a href="https://github.com/torvalds/linux/blob/master/Documentation/networking/scaling.rst">https://github.com/torvalds/linux/blob/master/Documentation/networking/scaling.rst</a></li></ul><p>Once upon a time, everything was so simple. The network card was slow and had only one queue. When packets arrives, the network card copies packets through DMA and sends an interrupt, and the Linux kernel harvests those packets and completes interrupt processing. As the network cards became faster, the interrupt based model may cause IRQ storm due to the massive incoming packets. This will consume the most of CPU power and freeze the system. To solve this problem, <a href="https://wiki.linuxfoundation.org/networking/napi">NAPI</a> (interrupt and polling) was proposed. When the kernel receives an interrupt from the network card, it starts to poll the device and harvest packets in the queues as fast as possible. NAPI works nicely with the 1Gbps network card which is common nowadays. However, it comes to 10Gbps, 20Gbps, or even 40Gbps network cards, NAPI may not be sufficient. Those cards would demand mush faster CPU if we still use one CPU and one queue to receive packets. Fortunately, multi-core CPUs are popular now, so why not process packets in parallel?</p><ul><li><p>When packet arrives at NIC, they are added to receive queue. Receive queue is assigned an IRQ number during device drive initialization and one of the available CPU processor is allocated to that receive queue. This processor is responsible for servicing IRQs interrupt service routing (ISR). Generally the data processing is also done by same processor which does ISR.</p><ul><li><p>If there is large amount of network traffic -&gt; only single core is taking all responsibility of processing data. ISR routines are small so if they are being executed on single core does not make large difference in performance, but data processing and moving data up in TCP/IP stack takes time (other cores are idle).</p><ul><li><em>These pictures are from <a href="http://balodeamit.blogspot.com/2013/10/receive-side-scaling-and-receive-packet.html">balodeamit blog</a></em></li><li>IRQ 53 is used for “eth1-TxRx-0” mono queue.</li><li>Check <code>smp_affinity</code> -&gt; queue was configured to send interrupts to CPU8.</li></ul><p><img src="http://1.bp.blogspot.com/-Xan_L2IHBrs/Ulxv_upXOCI/AAAAAAAABhc/Tq4vZCG5UR0/s1600/study+(4).png" alt=""></p></li><li><p>RSS comes to rescue! RSS allow to configure network card to distributes across multiple send and receive queues (ring buffers). These queues are individually mapped to each CPU processor. When interrupts are generated for each queue, they are sent to mapped processor -&gt; Network traffic is processed by multiple processors.</p><ul><li>4 receive queues and 4 send queues for eth1 interface, 56-59 IRQ are assigned to those queues. Now packet processing load is being distributed among 4 CPUs achieving higher throughput and low latency.</li></ul><p><img src="http://2.bp.blogspot.com/-AnaAh45OOcI/Ulx3IWrgsNI/AAAAAAAABiQ/iq_zZUH5rOM/s1600/study+(5).png" alt=""></p></li></ul></li><li><p>RSS provides the benefits of parallel receive processing in multiprocessing environment.</p></li><li><p>This is NIC technology. It supprots multiple queues and integrates a hashing function (distributes packets to different queues by Source and Destination IP and if applicable by TCP/UDP source and destination ports) in the NIC. The NIC computes a hash value for each incoming packet. Based on hash values, NIC assigns packets of the same data flow to a single queue and evenly distributes traffic flows across queues.</p></li><li><p>Check with <code>ethool -L</code> command.</p></li><li><p>According <a href="https://github.com/torvalds/linux/blob/v4.11/Documentation/networking/scaling.txt#L80">Linux kernel documentation</a>, <code>RSS should be enabled when latency is a concern or whenever receive interrupt processing froms a bottleneck... For low latency networking, the optimal setting is to allocate as many queues as there are CPUs in the system (or the NIC maximum, if lower)</code>.</p></li></ul><p><img src="https://learn.microsoft.com/en-us/windows-hardware/drivers/network/images/rss.png" alt=""></p><p><img src="https://3.bp.blogspot.com/-g_sS7Jf3vW0/WUEN0wEK5BI/AAAAAAAAA9g/PLy6crp9q74ia1xcWX8lwS7WzRz2xL-WwCLcBGAs/s640/RSS.png" alt=""></p><ul><li>// WIP - Commands!</li></ul><h4 id="receive-packet-steering-rps">Receive Packet Steering (RPS)</h4><ul><li>RPS is logically a software implementation of RSS. Being in software, it is necesarily called later in the datapath. Whereas RSS selects the queue and hence CPU that will run the hardware interrupt handler, RPS selects the CPU to perform protocol processing above the interrupt handler.</li><li>When the driver receives a packet, it wraps the packet in a socket buffer <code>sk_buff</code> which contains a <code>u32</code> hash value for the packet (based on source IP, source port, dest IP, dest port). Since every packet of the same TCP/UDP connection (flow) shares the same hash, it’s reasonable to process them with the same CPU. After that, it will reach either <code>netif_rx_internal()</code> or <code>netif_receive_skb_internal()</code>, and then <code>get_rps_cpu()</code> will be invoked to map the hash to an entry in <code>rps_map</code>, i.e. the CPU id. After getting the CPU id, <code>enqueue_to_backlog()</code> puts the sk_buff to the specific CPU queue for the further processing. The queues for each CPU are allocated in the per-cpu variable, <a href="https://github.com/torvalds/linux/blob/v4.11/include/linux/netdevice.h#L2788"><code>softnet_data</code></a>.</li></ul><p><img src="https://3.bp.blogspot.com/-zRdZ1Bw1frw/WUNdJCURkvI/AAAAAAAAA-Q/XgYiaHsBsNc9cWwAdZu83HhfOUtuSTCkgCLcBGAs/s640/RPS.png" alt=""></p><ul><li>The benefit of using RPS is same as RSS: share the load of packet processing among the CPUs.<ul><li>It may be unnecessary if RSS is availble.</li><li>If there are more CPUs than the queues, RPS could still be useful.</li></ul></li><li>RPS requires a kernel compiled with the <code>CONFIG_RPS</code> kconfig symbol (on by default for SMP). Even when compiled, RPS remains disabled until explicitly configured. The list of CPUs to which RPS may forward traffic can be configured for each receive queue using sysfs file entry:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>/sys/class/net/&lt;dev&gt;/queues/rx-&lt;n&gt;/rps_cpus
</span></span><span><span>
</span></span><span><span><span># This file implements a bitmap of CPUs</span>
</span></span><span><span><span># 0 (default): disabled</span>
</span></span></code></pre></div><ul><li>Suggested configuration:<ul><li>Single queue device: <code>rps_cpus</code> - the CPUs in the same memory domain of the interrupting CPU. If NUMA locality is not an issue, <code>rps_cpus</code> - all CPUs in the system. At high interrupt rate, it might be wise to exclude the interrupting CPU from the map since that already performs much work.</li><li>Multi-queue system: if RSS is configured -&gt; RPS is redundant and unnecessary. If there are fewer hardware queues than CPUs, then RPS might be beneficial if the <code>rps_cpus</code> for each queue are the ones that share the same memory domain as the interrupting CPU for that queue.</li></ul></li></ul><h4 id="receive-flow-steering-rfs">Receive Flow Steering (RFS)</h4><ul><li>Although RPS distributes packets based on flows, it doesn’t take the userspace applications into consideration.<ul><li>The application may run on CPU A, kernel puts the packets in the queue of CPU B.</li><li>CPU A can only use its own cache, the cached packets in CPU B become useless.</li></ul></li><li>RFS extends RPS further for the applications.</li><li>RFS is only available if the kconfig symbol <code>CONFIG_RPS</code> is enabled.</li><li>Instead of the per-queue hash-to-CPU map, RFS maintains a global flow-to-CPU table, <code>rps_sock_flow_table</code>. The size of this table can be adjusted:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.core.rps_sock_flow_entries <span>32768</span>
</span></span></code></pre></div><ul><li><p>Although the socket flow table improves the application locality, it also raise a problem. When the scheduler migrates the application to a new CPU, the remaining packets in the old CPU queue become outstanding, and the application may get the out of order packets. To solve the problem, RFS uses the per-queue <code>rps_dev_flow_table</code> to track outstanding packets.</p><ul><li>The size of the per-queue flow table <code>rps_dev_flow_table</code> can configured through sysfs interface: <code>/sys/class/net/&lt;dev&gt;/queues/rx-&lt;n&gt;/rps_flow_cnt.</code></li></ul></li><li><p>The next steps is way too complicated, if you want to know it, check <a href="https://garycplin.blogspot.com/2017/06/linux-network-scaling-receives-packets.html">this</a> out.</p></li></ul><p><img src="https://2.bp.blogspot.com/-US9aezp1mUE/WUI90hna5HI/AAAAAAAAA98/yhpI17Ut9wwbzCwlBxhev5Pm4vy-QR4NwCLcBGAs/s640/RFS.png" alt=""></p><ul><li>Suggested configuration:<ul><li>The suggested flow count depends on the expected number of active connections at any given time, which may be significantly less than the number of the connections -&gt; <code>32768</code> for <code>rps_sock_flow_entries</code>.</li><li>Single queue device: <code>rps_flow_cnt</code> = <code>rps_sock_flow_entries</code>.</li><li>Multi-queue device: <code>rps_flow_cnt</code> (each queue) = <code>rps_sock_flow_entries / N</code> (N is the number of queues).</li></ul></li></ul><h4 id="accelerated-receive-flow-steering-arfs">Accelerated Receive Flow Steering (aRFS)</h4><ul><li>Accelerated RFS is to RFS what RSS is to RPS: a hardware-accelerated load balancing mechanism that uses soft state to steer flows based on where the application thead consuming the packets of each flow is running.</li><li>aRFS should perform better than RFS since packets are sent directly to a CPU local to the thread consuming the data.</li><li>aRFS is only available if the following conditions are met:<ul><li>aRFS must be supported by the network interface card (export the <code>ndo_rx_flow_steer</code> netdevice function)</li><li><code>ntuple</code> filtering must be enabled.</li><li>The kernel is compiled with <code>CONFIG_RFS_ACCEL</code>.</li></ul></li><li>The map of CPU to queues is automatically deduced from the IRQ affinities configured for each receive queue by the driver, so no additional configuration should be necessary.</li></ul><p><img src="https://1.bp.blogspot.com/-RQDZerX_Lgk/WUEN1icXAfI/AAAAAAAAA9s/EFfwdrDl7AcsT8ovL_J2x7GVh7awXBsHwCLcBGAs/s640/aRFS.png" alt=""></p><ul><li>Suggested configuration:<ul><li>Enabled whenever one wants to use RFS and the NIC supports hardware acceleration .</li></ul></li></ul><h3 id="interrupt-coalescing-soft-irq">Interrupt Coalescing (soft IRQ)</h3><ul><li><p><code>net.core.netdev_budget_usecs</code>:</p><ul><li><p>Tuning:</p><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.core.netdev_budget_usecs &lt;value&gt;
</span></span></code></pre></div><ul><li>Persist the value, check <a href="https://access.redhat.com/discussions/2944681">this</a></li></ul></li></ul></li><li><p><code>net.core.netdev_budget</code>:</p><ul><li><p>Tuning:</p><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.core.netdev_budget &lt;value&gt;
</span></span></code></pre></div><ul><li>Persist the value, check <a href="https://access.redhat.com/discussions/2944681">this</a></li><li>How to monitor:<ul><li>If any of columns beside the 1st column are increasing, need to change budgets. Small increments are normal and do not require tuning.</li></ul></li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>cat /proc/net/softnet_stat
</span></span></code></pre></div></li></ul></li><li><p><code>net.core.dev_weight</code>:</p><ul><li><p>Tuning:</p><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.core.dev_weight &lt;value&gt;
</span></span></code></pre></div><ul><li>Persist the value, check <a href="https://access.redhat.com/discussions/2944681">this</a></li><li>How to monitor:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>cat /proc/net/softnet_stat
</span></span></code></pre></div></li></ul></li></ul><h3 id="ingress-qdisc">Ingress QDisc</h3><ul><li><p>In step (14), I has mentioned <code>netdev_max_backlog</code>, it’s about Per-CPU backlog queue. The <code>netif_receive_skb()</code> kernel function (step (12)) will find the corresponding CPU for a packet, and enqueue packets in that CPU’s queue. If the queue for that processor is full and already at maximum size, packets will be dropped. The default size of queue - <code>netdev_max_backlog</code> value is 1000, this may not be enough for multiple interfaces operating at 1Gbps, or even a single interface at 10Gbps.</p></li><li><p>Tuning:</p><ul><li><p>Change command:</p><ul><li>Double the value -&gt; check <code>/proc/net/softnet_stat</code></li><li>If the rate is reduced -&gt; Double the value</li><li>Repeat until the optimum size is established and drops do not increment</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.core.netdev_max_backlog &lt;value&gt;
</span></span></code></pre></div></li><li><p>Persist the value, check <a href="https://access.redhat.com/discussions/2944681">this</a></p></li><li><p>How to monitor: determine whether the backlog needs increasing.</p><ul><li>2nd column is a counter that is incremented when the netdev backlog queue overflows.</li></ul></li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>cat /proc/net/softnet_stat
</span></span></code></pre></div></li></ul><h3 id="egress-disc---txqueuelen-and-default_qdisc">Egress Disc - txqueuelen and default_qdisc</h3><ul><li><p>In the step (11) (transimission), there is <code>txqueuelen</code>, a queue/buffer to face conection bufrst and also to apply <a href="http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html">traffic control (tc)</a>.</p></li><li><p>Tuning:</p><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ifconfig &lt;interface&gt; txqueuelen value
</span></span></code></pre></div><ul><li>How to monitor:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ip -s link
</span></span><span><span><span># Check RX/TX dropped?</span>
</span></span></code></pre></div></li><li><p>You can change <code>default_qdisc</code> as well, cause each application has diffrent load and need to traffic control and it is used also to fight against <a href="https://www.bufferbloat.net/projects/codel/wiki/">bufferfloat</a>.The can check <a href="https://www.coverfire.com/articles/queueing-in-the-linux-network-stack/">this article - Queue Disciplines section</a>.</p></li><li><p>Tuning:</p><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.core.default_qdisc &lt;value&gt;
</span></span></code></pre></div><ul><li>Persist the value, check <a href="https://access.redhat.com/discussions/2944681">this</a></li><li>How to monitor:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>tc -s qdisc ls dev &lt;interface&gt;
</span></span><span><span><span># Example</span>
</span></span><span><span>qdisc fq_codel 0: root refcnt <span>2</span> limit 10240p flows <span>1024</span> quantum <span>1514</span> target 5ms interval 100ms memory_limit 32Mb ecn drop_batch <span>64</span>
</span></span><span><span>  Sent <span>33867757</span> bytes <span>231578</span> pkt <span>(</span>dropped 0, overlimits <span>0</span> requeues 6<span>)</span> <span># Dropped, overlimits, requeues!!!</span>
</span></span><span><span>  backlog 0b 0p requeues <span>6</span>
</span></span><span><span>    maxpacket <span>5411</span> drop_overlimit <span>0</span> new_flow_count <span>1491</span> ecn_mark <span>0</span>
</span></span><span><span>    new_flows_len <span>0</span> old_flows_len <span>0</span>
</span></span></code></pre></div></li></ul><h3 id="tcp-read-and-write-buffersqueues">TCP Read and Write Buffers/Queues</h3><ul><li><p>Define what is <a href="https://wwwx.cs.unc.edu/~sparkst/howto/network_tuning.php">memory pressure</a> is specified at <code>tcp_mem</code> and <code>tcp_moderate_rcvbuf</code>.</p></li><li><p>We can adjust the mix-max size of buffer to improve performance:</p><ul><li>Change command:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>sysctl -w net.ipv4.tcp_rmem<span>=</span><span>"min default max"</span>
</span></span><span><span>sysctl -w net.ipv4.tcp_wmem<span>=</span><span>"min default max"</span>
</span></span></code></pre></div><ul><li>Persist the value, check <a href="https://access.redhat.com/discussions/2944681">this</a></li><li>How to monitor: check <code>/proc/net/sockstat</code>.</li></ul></li></ul><h3 id="tcp-fsm-and-congestion-algorithm">TCP FSM and congestion algorithm</h3><blockquote><p>Accept and SYN queues are governed by net.core.somaxconn and net.ipv4.tcp_max_syn_backlog. <a href="https://blog.cloudflare.com/syn-packet-handling-in-the-wild/#queuesizelimits">Nowadays net.core.somaxconn caps both queue sizes</a>.</p></blockquote><ul><li><code>net.core.somaxconn</code>: provides an upper limit on the value of the backlog parameter passed to the <code>listen() function</code> , known in userspace is as <code>SOMAXCONN</code>. If you change this value, you should also change your application to a compatible value. You can check <a href="https://ntk148v.github.io/posts/til/envoy/performance.md">Envoy’s performance tuning note</a>.</li><li><code>net.ipv4.tcp_fin_timeout</code>: specifies the number of seconds to wait for a final FIN packet before the socket is forcibly closed.</li><li><code>net.ipv4.tcp_available_congestion_control</code>: shows the available congestion control choices that are registered.</li><li><code>net.ipv4.tcp_congestion_control</code>: sets the congestion control algorithm to be used for new connections.</li><li><code>net.ipv4.tcp_max_syn_backlog</code>: sets the maximum number of queued connection requests which have still not received an acknowledgment from the connecting client; if this number is exceeded, the kernel will begin dropping requests.</li><li><code>net.ipv4.tcp_syncookies</code>: enables/disables syn cookie, useful for protecting against syn flood attacks.</li><li><code>net.ipv4.tcp_slow_start_after_idle</code>: enables/disables tcp slow start.</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Tcp_state_diagram_fixed_new.svg/796px-Tcp_state_diagram_fixed_new.svg.png?20140126065545" alt=""></p><ul><li>You may want to check <a href="https://ntk148v.github.io/posts/linux-network-performance-ultimate-guide/broadband-tweaks.md">Broadband tweaks note</a>.</li></ul><h3 id="numa">NUMA</h3><ul><li>This term is beyond network performance aspect.</li><li>Non-uniform memory access (NUMA) is a kind of memory architecture that allows a processor faster access to contents of memory than other traditional techniques. In other words, a processor can access local memory much faster than non-local memory. This is because in a NUMA setup, each processor is assigned a specific local memory exclusively for its own use. This elimates sharing of non-local memory, reducing delays (fewer memory locks) when multiple requests come in for access to the same memory location -&gt; Increase nework performance (cause CPUs have to access ring buffer (memory) to process data packet)</li></ul><p><img src="https://b2600047.smushcdn.com/2600047/wp-content/uploads/2018/04/NUMA-Architecture.png?lossy=1&amp;strip=1&amp;webp=1" alt=""></p><ul><li>NUMA architecture splits a subset of CPU, memory, and devices into different “nodes”, in effect creating multiple small computers with a fast interconnect and common operating system. NUMA systems need to be tuned differently to non-NUMA system. For NUMA, the aim is to group all interrupts from the devices in a single node onto the CPU cores belonging to that node.</li><li>Although this appears as though it would be useful for reducing latency, NUMA systems have been known to interact badly with real time applications, as they can cause unexpected event latencies.</li><li>Determine NUMA nodes:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ls -ld /sys/devices/system/node/node*
</span></span><span><span>
</span></span><span><span>drwxr-xr-x. <span>3</span> root root <span>0</span> Aug <span>15</span> 19:44 /sys/devices/system/node/node0
</span></span><span><span>drwxr-xr-x. <span>3</span> root root <span>0</span> Aug <span>15</span> 19:44 /sys/devices/system/node/node1
</span></span></code></pre></div><ul><li>Determine NUMA locality:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>cat /sys/devices/system/node/node0/cpulist
</span></span><span><span>
</span></span><span><span>0-5
</span></span><span><span>
</span></span><span><span>cat /sys/devices/system/node/node1/cpulist
</span></span><span><span><span># empty</span>
</span></span></code></pre></div><ul><li>It makes sense to tune IRQ affinity for all CPUs, make sure that you sudo systop <code>irqbalance</code> service and manually setting the CPU affinity:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>systemctl stop irqbalance
</span></span></code></pre></div><ul><li><p>Determine device locality:</p><ul><li>Check the whether a PCIe network interface belongs to a specific NUMA node. The command will display the NUMA node number, interrupts for the device should be directed to the NUMA node that the PCIe device belongs to</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span><span># cat /sys/class/net/&lt;interface&gt;/device/numa_node</span>
</span></span><span><span>cat /sys/class/net/eth3/device/numa_node
</span></span><span><span>
</span></span><span><span><span>1</span>
</span></span><span><span><span># -1 - the hardware platform is not actually NUMA and the kernel is just emulating</span>
</span></span><span><span><span># or 'faking' NUMA, or a device is on a bus which does not have any NUMA locality,</span>
</span></span><span><span><span># such as a PCI package</span>
</span></span></code></pre></div></li><li><p>The Linux kernel has supported NUMA since version 2.5 - RedHat, Debian-based offer NUMA support for process optimization with the two software packages <code>numactl</code> and <code>numad</code>.</p><ul><li><code>numad</code> is a daemon which can assist with process and memory management on system with NUMA architecture. Numad achieves this by monitoring system topology and resource usage, then attempting to locate processes for efficent NUMA locality and efficiency, where a process hash a sufficiently large memory size and CPU load.</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>systemctl <span>enable</span> numad
</span></span><span><span>systemctl start numad
</span></span></code></pre></div><ul><li><code>numadctl</code>: control NUMA policy for processes or shared memory.</li></ul></li></ul><h3 id="further-more---packet-processing">Further more - Packet processing</h3><p>This section is an advance one. It introduces some advance module/framework to achieve high performance.</p><h4 id="af_packet-v4"><code>AF_PACKET</code> v4</h4><p><strong>Source:</strong></p><ul><li><p><a href="https://developer.ibm.com/articles/j-zerocopy/">https://developer.ibm.com/articles/j-zerocopy/</a></p></li><li><p><a href="https://lwn.net/Articles/737947/d">https://lwn.net/Articles/737947/d</a></p></li><li><p>New fast packet interfaces in Linux:</p><ul><li><p><code>AF_PACKET v4</code></p></li><li><p>No system calls in data path</p></li><li><p>Copy-mode by default</p></li><li><p>True <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a> mode with <code>PACKET_ZEROCOPY</code>, DMA packet buffers mapped to user space.</p><ul><li>To better understand the solution to a problem, we first need to understand the problem itself.</li><li>This sample is taken from <a href="https://developer.ibm.com/articles/j-zerocopy/">IBM article</a>.</li><li>Scenario: Read from a file and transfer the data to another program over the network.</li></ul><div><pre tabindex="0"><code data-lang="java"><span><span><span>File</span><span>.</span><span>read</span><span>(</span><span>fileDesc</span><span>,</span><span> </span><span>buf</span><span>,</span><span> </span><span>len</span><span>);</span><span>
</span></span></span><span><span><span></span><span>Socket</span><span>.</span><span>send</span><span>(</span><span>socket</span><span>,</span><span> </span><span>buf</span><span>,</span><span> </span><span>len</span><span>);</span><span>
</span></span></span></code></pre></div><ul><li>The copy operation requires 4 context switches between user mode and kernel mode, and the data is copied 4 times before the operation is complete.</li></ul><p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure1.gif" alt=""></p><p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure2.gif" alt=""></p><ul><li>Zero copy improves performance by elimninating these redundant data copies.</li><li>You’ll notice that the 2nd and 3rd copies are not actually required (The application does nothing other than cache the data and transfer it back to the socket buffer) -&gt; The data could be transfered directly from the read buffer to the socket buffer -&gt; Use method <code>transferTo()</code>, assume that this method transfers data from the file channel to the given writable byte channel. Internally, it depends on the OS’s support for zero copy (in Linux, UNIX, this sis <code>sendfile()</code> system call).</li></ul><div><pre tabindex="0"><code data-lang="c"><span><span><span>#include</span> <span>&lt;sys/socket.h&gt;</span><span>
</span></span></span><span><span><span></span><span>ssize_t</span> <span>sendfile</span><span>(</span><span>int</span> <span>out_fd</span><span>,</span> <span>int</span> <span>in_fd</span><span>,</span> <span>off_t</span> <span>*</span><span>offset</span><span>,</span> <span>size_t</span> <span>count</span><span>);</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="java"><span><span><span>public</span><span> </span><span>void</span><span> </span><span>transferTo</span><span>(</span><span>long</span><span> </span><span>position</span><span>,</span><span> </span><span>long</span><span> </span><span>count</span><span>,</span><span> </span><span>WritableByteChannel</span><span> </span><span>target</span><span>);</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>// Copy data from a disk file to a socket</span><span>
</span></span></span><span><span><span></span><span>transferTo</span><span>(</span><span>position</span><span>,</span><span> </span><span>count</span><span>,</span><span> </span><span>writableChannel</span><span>);</span><span>
</span></span></span></code></pre></div><p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure3.gif" alt=""></p><p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure4.gif" alt=""></p><ul><li>Gather operations: In Linux kernels 2.4 and later, the socket buffer descriptor was modified to acommondata this requirement. This approach not only reduces multiple context switches but also eliminates the duplicated data copies that require CPU involvement.<ul><li>No data is copied into the socket buffer. Instead, only descriptors with information about the location and length of the data are appended to the socket buffer. The DMA engine passes data directly from the kernel buffer to the protocol engine, thus elimianting the remaining final CPU copy.</li></ul></li></ul><p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure5.gif" alt=""></p></li><li><p>HW descriptors only mapped to kernel</p></li></ul></li><li><p>In order to improve Rx and Tx performance this implementation make uses <code>PACKET_MMAP</code>.</p></li></ul><h4 id="packet_mmap"><code>PACKET_MMAP</code></h4><p><strong>Source:</strong></p><ul><li><p><a href="https://docs.kernel.org/networking/packet_mmap.html">https://docs.kernel.org/networking/packet_mmap.html</a></p></li><li><p><code>PACKET_MMAP</code> is a Linux API for fast packet sniffing.</p></li><li><p>It provides a mmapped ring buffer, shared between user space and kernel, that’s ued to send and receive packets. This helps reducing system calls and the copies needed between user space and kernel.</p></li></ul><h4 id="kernel-bypass-data-plane-development-kit-dpdk">Kernel bypass: Data Plane Development Kit (DPDK)</h4><p><strong>Source:</strong></p><ul><li><p><a href="https://blog.cloudflare.com/kernel-bypass/">https://blog.cloudflare.com/kernel-bypass/</a></p></li><li><p><a href="https://www.cse.iitb.ac.in/~mythili/os/anno_slides/network_stack_kernel_bypass_slides.pdf">https://www.cse.iitb.ac.in/~mythili/os/anno_slides/network_stack_kernel_bypass_slides.pdf</a></p></li><li><p><a href="https://selectel.ru/blog/en/2016/11/24/introduction-dpdk-architecture-principles/">https://selectel.ru/blog/en/2016/11/24/introduction-dpdk-architecture-principles/</a></p></li><li><p><a href="https://www.slideshare.net/garyachy/dpdk-44585840">https://www.slideshare.net/garyachy/dpdk-44585840</a></p></li><li><p>The kernel is insufficient:</p><ul><li><p>To understand the issue, check this <a href="https://www.cse.iitb.ac.in/~mythili/os/anno_slides/network_stack_kernel_bypass_slides.pdf">slide</a>.</p></li><li><p>Performance overheads in kernel stack:</p><ul><li>Context switch between kernel and userspace</li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/linux-network-1.png" alt=""></p><ul><li>Packet copy between kernel and userspace</li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/linux-network-2.png" alt=""></p><ul><li>Dynamic allocation of <code>sk_buff</code></li><li>Per packet interrupt</li><li>Shared data structures</li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/linux-network-3.png" alt=""></p></li><li><p>Solution: Why just bypass the kernel?</p></li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/linux-network-4.png" alt=""></p><ul><li>There are many kernel bypass techniques:<ul><li>User-space packet processing:<ul><li>Data Plane Development Kit (DPDK)</li><li>Netmap</li><li>…</li></ul></li><li>User-space network stack<ul><li>mTCP</li><li>…</li></ul></li></ul></li><li>But I only talk about the DPDK, as it’s the most popular.</li></ul></li><li><p>DPDK (Data Plane Development Kit):</p><ul><li><p>A framework comprised of various userspace libraries and drivers fast packet processing.</p></li><li><p>Goal: forward network packet to/from Network Interface Card (NIC) from/to user application at native speed (fast packet processing).</p><ul><li>10 or 40Gb NICs</li><li>Speed is the most important criteria</li><li>Only forward the packet - not a network stack</li></ul></li><li><p>All traffic bypasses the kernel:</p><ul><li>When a NIC is controlled by a DPDK driver, it’s invisible to the kernel</li></ul></li><li><p>Open source (BSD-3 for most, GPL for Linux Kernel related parts)</p></li><li><p>How it works:</p><p><img src="https://selectel.ru/blog/en/wp-content/uploads/sites/2/2016/11/PR-3303.png" alt=""></p><ul><li>The kernel doesn’t step in at all: interactions with the network card are performed via special drivers and libraries</li><li>The ports receiving incoming traffic on network cards need to be unbound from Linux (the kernel driver). This is done using the <code>dpdk_nic_bind</code> (or <code>dpkg-devbind</code>) command, or <code>./dpdk_nic_bind.py</code> in earlier versions.</li><li>How are ports then managed by DPDK? Every driver in Linux has bind and unbind files:</li></ul><div><pre tabindex="0"><code data-lang="shell"><span><span>ls /sys/bus/pci/drivers/ixgbe
</span></span><span><span><span>bind</span>  module  new_id  remove_id  uevent  unbind
</span></span></code></pre></div><ul><li>To unbind a device from a driver, the device’s bus number needs to be written to the unbind files. Similarly, to bind a device to another driver, the bus number needs to be written to its bind file. More detailed information about this can be found <a href="https://lwn.net/Articles/143397/">here</a>.</li><li>The DPDK installation instructions <a href="http://dpdk.org/doc/guides-16.04/linux_gsg/build_dpdk.html#loading-modules-to-enable-userspace-io-for-dpdk">tell that ports</a> need to be managed by the vfio_pci, igb_uio, or uio_pci_generic driver.</li><li>These drivers make it possible to interact with devices in the user space. Of course they include a kernel module, but that’s just to initialize devices and assign the PCI interface.</li><li>All further communication betwene the application and network card is organized by the <em>DPDK PMD</em>.</li><li>DPDK also requires <em>hugepages</em> be configured. This is required for allocating large chunks of memory and writing data to them (same job that DPDK does in traditional packet processing)</li><li>Main stage:<ul><li>Incoming packets go to a ring buffer. The application periodically checks this buffer for new packets</li><li>If the buffer contains new packet descriptors, the application will refer to the DPDK packet buffers in the specially allocated memory pool using the pointers in the packet descriptors.</li><li>If the ring buffer does not contain any packets, the application will queue the network devices under the DPDK and then refer to the ring again.</li></ul></li></ul></li><li><p>Components:</p><p><img src="https://doc.dpdk.org/guides/_images/architecture-overview.svg" alt=""></p><ul><li>Core components:<ul><li>Environment Abstraction Layer (EAL): provides a generic interface that hides the environment specifics from the applications and libraries.</li><li>Ring Manager (<code>librte_ring</code>): the ring structure provides a lockless multi-producer, multi-consumer FIFO API in a finite size table.</li><li>Memory Pool Manager (<code>librte_mempool</code>): is responsible for allocating pools of objects in memory.<ul><li>A pool is identified by name and uses a ring to store free objects.</li><li>Provide some optional services, such as a per-core object cache and an alignment helper to ensure that objects are padded to spread them equally on all RAM channels.</li></ul></li><li>Network Packet Buffer Management (<code>librte_mbuf</code>):<ul><li>mbuf library provides the facility to create and desctroy buffers that may be used by the DPDK application to store message buffers (created at startup time and stored in a mempool)</li><li>Provides an API to allocate/free mbufs, manipulate packet buffers which are used to carry network packets.</li></ul></li><li>Timer Manager (<code>librte_timer</code>): Provides a timer service to DPDK execution units, providing the ability to execute a function asynchronously.</li></ul></li><li>Poll Mode Drivers: Instead of the NIC raising an interrupt to the CPU when a frame is received, the CPU runs a poll mode driver (PMD) to constantly poll the NIC for new packets. However, this does mean that a CPU core must be dedicated and assigned to running PMD. However, this does mean that a CPU core must be dedicated and assigned to running PMD. The DPDK includes Poll Mode Drivers (PMDs) for 1 GbE, 10 GbE and 40GbE, and para virtualized virtio Ethernet controllers which are designed to work without asynchronous, interrupt-based signaling mechanisms.</li><li>Packet Forwarding Algorithm Support: The DPDK includes Hash (<code>librte_hash</code>) and Longest Prefix Match (LPM, <code>librte_lpm</code>) libraries to support the corresponding packet forwarding algorithms.</li><li><code>librte_net</code>: a collection of IP protocol definitions and convenience macros. It is based on code from the FreeBSD* IP stack and contains protocol numbers (for use in IP headers), IP-related macros, IPv4/IPv6 header structures and TCP, UDP and SCTP header structures.</li></ul></li><li><p>Limitations:</p><ul><li>Heavily hardware reliant.</li><li>A CPU core must be dedicated and assigned to running PMD. 100% CPU.</li></ul></li></ul></li></ul><h4 id="pf_ring">PF_RING</h4><p><strong>Source:</strong></p><ul><li><p><a href="https://www.ntop.org/products/packet-capture/pf_ring/">https://www.ntop.org/products/packet-capture/pf_ring/</a></p></li><li><p><a href="https://repository.ellak.gr/ellak/bitstream/11087/1537/1/5-deri-high-speed-network-analysis.pdf">https://repository.ellak.gr/ellak/bitstream/11087/1537/1/5-deri-high-speed-network-analysis.pdf</a></p></li><li><p><a href="https://www.synacktiv.com/en/publications/breaking-namespace-isolation-with-pf_ring-before-700.html">https://www.synacktiv.com/en/publications/breaking-namespace-isolation-with-pf_ring-before-700.html</a></p></li><li><p><a href="https://github.com/ntop/PF_RING">PF_RING</a> is a Linux kernel module and user-space framework that allows you to process packets at high-rates while providing you a consistent API for packet processing applications.</p></li><li><p><code>PF_RING</code> is polling packets from NICs by means of Linux NAPI. This means that NAPI copies packets from the NIC to the <code>PF_RING</code> circular buffer, and then the userland application reads packets from ring. In this scenario, there are 2 pollers, both the application and NAPI and thjis results in CPU cucles used for this polling -&gt; Advantage: <code>PF_RING</code> can distribute incoming packets to multiple rings simultaneously.</p></li></ul><p><img src="https://www.ntop.org/wp-content/uploads/2012/01/vanilla_pf_ring.png" alt=""></p><ul><li><code>PF_RING</code> has a modular architecture that makes it possible to use additional components other than the standard <code>PF_RING</code> module.<ul><li>ZC module (Zero Copy):</li><li>FPGA-based card modules: add support for many vendors</li><li>Stack module: can be used to inject packets to the linux network stack</li><li>Timeline module: can be used to seamlessly extract traffic from a n2disk dump set using the <code>PF_RING API</code></li><li>Sysdig module: captures system events using the sysdig kernel module</li></ul></li></ul><p><img src="https://i0.wp.com/www.ntop.org/wp-content/uploads/2018/01/PF_RING-Big-Picture.png?w=1848&amp;ssl=1" alt=""></p><ul><li>Benefits:<ul><li>It creates a straight path for incoming packets in order to make them first-class citizens</li><li>No need to use custom network cards: any card is supported</li><li>Transparent to applications: legacy applications need to be recompiled in order to use it</li><li>No kernel or low-level programming is required</li><li>Developer familiar with network applications can immediately take advantage of it without having to learn new APIs</li></ul></li><li><code>PF_RING</code> has reduced the cost of packet capture and forward to userland. However it has some design limitations as it requires two actors for capturing packets that result in sub-optimal performance:<ul><li>kernel: copy packet from NIC to ring</li><li>userland: read packet from ring and process it</li></ul></li><li><code>PF_RING</code> <a href="https://www.ntop.org/guides/pf_ring/modules/af_xdp.html">since version 7.5 includes support for</a> <code>AF_XDP</code> adapters, when compiling from source code this is enabled by default.</li></ul><h4 id="programmable-packet-processing-express-data-path-xdp">Programmable packet processing: eXpress Data Path (XDP)</h4><p><strong>Source:</strong></p><ul><li><p><a href="https://www.iovisor.org/technology/xdp">https://www.iovisor.org/technology/xdp</a></p></li><li><p><a href="https://blogs.igalia.com/dpino/2019/01/10/the-express-data-path/">https://blogs.igalia.com/dpino/2019/01/10/the-express-data-path/</a></p></li><li><p><a href="https://pantheon.tech/what-is-af_xdp/">https://pantheon.tech/what-is-af_xdp/</a></p></li><li><p><a href="https://github.com/iovisor/bpf-docs/blob/master/Express_Data_Path.pdf">https://github.com/iovisor/bpf-docs/blob/master/Express_Data_Path.pdf</a></p></li><li><p><a href="https://github.com/xdp-project/xdp-paper/blob/master/xdp-the-express-data-path.pdf">https://github.com/xdp-project/xdp-paper/blob/master/xdp-the-express-data-path.pdf</a></p></li><li><p><a href="http://vger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf">http://vger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf</a></p></li><li><p><a href="https://arthurchiao.art/blog/firewalling-with-bpf-xdp/">https://arthurchiao.art/blog/firewalling-with-bpf-xdp/</a></p></li><li><p><a href="https://archive.fosdem.org/2018/schedule/event/xdp/attachments/slides/2220/export/events/attachments/xdp/slides/2220/fosdem18_SdN_NFV_qmonnet_XDPoffload.pdf">https://archive.fosdem.org/2018/schedule/event/xdp/attachments/slides/2220/export/events/attachments/xdp/slides/2220/fosdem18_SdN_NFV_qmonnet_XDPoffload.pdf</a></p></li><li><p><a href="https://people.netfilter.org/hawk/presentations/KernelRecipes2018/XDP_Kernel_Recipes_2018.pdf">https://people.netfilter.org/hawk/presentations/KernelRecipes2018/XDP_Kernel_Recipes_2018.pdf</a></p></li><li><p><a href="https://legacy.netdevconf.info/2.1/session.html?gospodarek">https://legacy.netdevconf.info/2.1/session.html?gospodarek</a></p></li><li><p>XDP (eXpress Data Path):</p><ul><li><p>An eBPF implementation for early packet interception. It’s programmable, high performance, specialized application, packet processor in Linux networking data path.</p><ul><li>eBPF is the user-defined, sandboxed bytecode executed by the kernel. For more check <a href="https://ntk148v.github.io/posts/linux-network-performance-ultimate-guide/ebpf/README.md">out</a>.</li><li>Evolution from former BPF version (cBPF, used by tcpdump)</li><li>11 registers (64-bit), 512 bytes stack</li><li>Read and write access to context (for networking: packets)</li><li>LLVM backend to compile from c to eBPF (or from Lua, go, P4, Rust,…)</li><li>In-kernel verifier to ensure safety, security</li><li>JIT (Just-in-time) compiler available for main architecture</li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/ebpf-1.png" alt=""></p><ul><li>Features:<ul><li>Maps: key-value entries (hash, array,…) shared between eBPF programs or with user user-space</li><li>Tail calls: “long jump” from one program into an other, context is preserved</li><li>Helpers; white-list of kernel functions to call from eBPF programs: get current time, print debug information, lookup or update maps, shrink or grow packets,…</li></ul></li></ul></li><li><p>Bare metal packet processing at lowest point in the SW network stack.</p><ul><li>Before allocating SKBs</li><li>Inside device drivers RX function</li><li>Operate directly on RX packet-pages</li></ul></li></ul><p><img src="https://blogs.igalia.com/dpino/files/2019/01/linux-network-stack-with-xdp.png" alt=""></p><ul><li>Use cases:<ul><li>Pre-stack processing like filtering to do DOS mitigation</li><li>Forwarding and load balancing</li><li>Batching techniques such as in Generic Receive Offload (GRO)</li><li>Flow sampling, monitoring</li><li>ULP processing</li></ul></li><li>Properties:<ul><li>XDP is designed for high performance</li><li>…and programmability: New functionality can be implemented on the fly without needing kernel modification</li><li>XDP is NOT kernel bypass:<ul><li>It’s an integrated fast path in kernel stack.</li><li>If the traditional kernel network stack is a freeway, kernel bypass is a proposal to build an infrastructure of high speed trains and XDP is a proposal for adding carpool lanes to the freeway - Tom Herbert and Alexei Starovoitov.</li></ul></li><li>XDP does NOT replace the TCP/IP stack.</li><li>XDP does NOT require any specialized hardware, but there are a few hardware requirements:<ul><li>Multi-queue NICs</li><li>Common protocol-generic offloads:<ul><li>TX/RX checksum offload</li><li>Receive Side Scaling (RSS)</li><li>Transport Segmentation Offload (TSO)</li></ul></li><li>LRO, aRFS, flow hash from device are “nice to have"s</li></ul></li></ul></li></ul></li><li><p>Compare to DPDK:</p><ul><li>XDP is a young project, but very promising.</li><li>Advantages of XDP over DPDK:<ul><li>Allow option of busy polling or interrupt driven networking</li><li>No need to allocate huge pages</li><li>No special hardware requirements</li><li>Dedicated CPUs are not required, user has many options on how to structure the work between CPUs</li><li>No need to inject packets into the kernel from a 3rd party userspace application</li><li>No need to define a new security model for accessing networking HW</li><li>No 3rd party code/licenseing required.</li></ul></li></ul></li><li><p>XDP packet processor:</p><p><img src="https://www.iovisor.org/wp-content/uploads/sites/8/2016/09/xdp-packet-processing-768x420.png" alt=""></p><ul><li>In kernel</li><li>Component that processes RX packets</li><li>Process RX “packet pages” directly out of driver<ul><li>Functional interface</li><li>No early allocation of skbuff’s, no SW queues</li></ul></li><li>Assign one CPU to each RX queue<ul><li>No locking RX queue</li><li>CPU can be dedicated to busy poll to use interrupt model</li></ul></li><li>BPF programs performs procesing<ul><li>Parse packets</li><li>Perform table lookups, creates/manages stateful filters</li><li>Manipulate packet</li><li>Return action:</li></ul></li><li>Basic actions:<ul><li>Forward:<ul><li>Possibly after packet modification</li><li>TX queue is exclusive to same CPU so no lock needed</li></ul></li><li>Drop:<ul><li>Just return error from the function</li><li>Driver recycles pages</li></ul></li><li>Normal receive:<ul><li>Allocate skbuff and receive into stack</li><li>Steer packet to another CPU for processing</li><li>Allow “raw” interfaces to userspace like <code>AF_PACKET</code>, netmap</li></ul></li><li>GRO:<ul><li>Coalesce packets of same connection</li><li>Perform receive of large packets</li></ul></li></ul></li></ul></li><li><p><code>AF_XDP</code>:</p><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/xdp-flow.png" alt=""></p><ul><li><p>A new type of socket, presented into the <a href="https://www.kernel.org/doc/html/v4.18/networking/af_xdp.html">Linux 4.18</a> which does not completely bypass the kernel, but utilizes its functionality and enables to create something alike DPDK or the <code>AF_PACKET</code>.</p><ul><li>An upgraded version of <code>AF_PACKET</code>: Use XDP program to trigger Rx path for selected queue</li><li>XDP programs can redirect frames to a memory buffer in user-space by eBPF -&gt; not bypass the kernel but creates in-kernel fast path.</li><li>DMA transfers use user space memory (zero copy)</li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/xdp.png" alt=""></p><ul><li>Benefits:<ul><li>Performance improvement:<ul><li>Zero copy between user space and kernel space</li><li>Achieve 3-20x times improvement comparing to <code>AF_PACKET</code></li></ul></li><li>Connect the XDP pass-through to user-space directly:<ul><li>An eBPF program that processes packets can be forwarded to an application in a very efficient way</li></ul></li><li>For <a href="https://doc.dpdk.org/guides/nics/af_xdp.html">DPDK</a>:<ul><li>No change to DPDK apps, kernel driver handles hardware</li><li>Provide a new option for users</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/ntk148v/til/master/linux/images/xdp-dpdk.png" alt=""></p></li></ul></li><li><p>Limitations:</p><ul><li>Quite young project</li><li>Require a new kernel version (&gt;= 5.4) to fully support.</li></ul></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Introduction to Machine Learning Interviews Book (144 pts)]]></title>
            <link>https://huyenchip.com/ml-interviews-book/</link>
            <guid>41083534</guid>
            <pubDate>Sat, 27 Jul 2024 00:19:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://huyenchip.com/ml-interviews-book/">https://huyenchip.com/ml-interviews-book/</a>, See on <a href="https://news.ycombinator.com/item?id=41083534">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="book-search-results" tabindex="-1" role="main">
    <section>
                                
                                
<p>You can read the web-friendly version of the book <a href="https://huyenchip.com/ml-interviews-book/" target="_blank">here</a>. You can find the source code on <a href="https://github.com/chiphuyen/ml-interviews-book" target="_blank">GitHub</a>. The Discord to discuss the answers to the questions in the book is <a href="https://discord.gg/XjDNDSEYjh" target="_blank">here</a>.</p>
<p>As a candidate, I’ve interviewed at a dozen big companies and startups. I’ve got offers for machine learning roles at companies including Google, NVIDIA, Snap, Netflix, Primer AI, and Snorkel AI. I’ve also been rejected at many other companies.</p>
<p>As an interviewer, I’ve been involved in designing and executing the hiring process at NVIDIA and Snorkel AI, having taken steps from cold emailing candidates whose work I love, screening resumes, doing exploratory and technical interviews, debating whether or not to hire a candidate, to trying to convince candidates to choose us over competitive offers.</p>
<p>As a friend and teacher, I’ve helped many friends and students prepare for their machine learning interviews at big companies and startups. I give them mock interviews and take notes of the process they went through as well as the questions they were asked.</p>
<p>I’ve also consulted several startups on their machine learning hiring pipelines. Hiring for machine learning roles turned out to be pretty difficult when you don’t already have a strong in-house machine learning team and process to help you evaluate candidates. As the use of machine learning in the industry is still pretty new, a lot of companies are still making it up as they go along, which doesn’t make it easier for candidates.</p>
<p>This book is the result of the collective wisdom of many people who have sat on both sides of the table and who have spent a lot of time thinking about the hiring process. It was written with candidates in mind, but hiring managers who saw the early drafts told me that they found it helpful to learn how other companies are hiring, and to rethink their own process.</p>
<p>The book consists of two parts. The first part provides an overview of the machine learning interview process, what types of machine learning roles are available, what skills each role requires, what kinds of questions are often asked, and how to prepare for them. This part also explains the interviewers’ mindset and what kind of signals they look for.</p>
<p>The second part consists of over 200 knowledge questions, each noted with its level of difficulty -- interviews for more senior roles should expect harder questions -- that cover important concepts and common misconceptions in machine learning.</p>
<p>After you've finished this book, you might want to checkout <a href="https://huyenchip.com/machine-learning-systems-design/toc.html" target="_blank">the 30 open-ended questions</a> to test your ability to put together what you know to solve practical challenges. These questions test your problem-solving skills as well as the extent of your experiences in implementing and deploying machine learning models. Some companies call them <strong>machine learning systems design</strong> questions. Almost all companies I’ve talked to ask at least a question of this type in their interview process, and they are the questions that candidates often find to be the hardest.</p>
<p>“Machine learning systems design” is an intricate topic that merits its own book. To learn more about it, check out my course <a href="https://stanford-cs329s.github.io/" target="_blank"><strong>CS 329S: Machine learning systems design</strong></a> at Stanford.</p>
<p>This book is not a replacement to machine learning textbooks nor a shortcut to game the interviews. It’s a tool to consolidate your existing theoretical and practical knowledge in machine learning. The questions in this book can also help identify your blind/weak spots. Each topic is accompanied by resources that should help you strengthen your understanding of that topic.</p>
<hr>
<p><em>This book was created by <a href="https://huyenchip.com/" target="_blank">Chip Huyen</a> with the help of wonderful friends. For feedback, errata, and suggestions, the author can be reached <a href="https://huyenchip.com/communication/" target="_blank">here</a>. Copyright ©2021 Chip Huyen.</em></p>

                                
                                </section>
    <div>
        <div>
            
            <h2><span></span> results matching "<span></span>"</h2>
            <ul></ul>
            
        </div>
        <p>
            
            <h2>No results matching "<span></span>"</h2>
            
        </p>
    </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Courts Close the Loophole Letting the Feds Search Your Phone at the Border (257 pts)]]></title>
            <link>https://reason.com/2024/07/26/courts-close-the-loophole-letting-the-feds-search-your-phone-at-the-border/</link>
            <guid>41083286</guid>
            <pubDate>Fri, 26 Jul 2024 23:36:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reason.com/2024/07/26/courts-close-the-loophole-letting-the-feds-search-your-phone-at-the-border/">https://reason.com/2024/07/26/courts-close-the-loophole-letting-the-feds-search-your-phone-at-the-border/</a>, See on <a href="https://news.ycombinator.com/item?id=41083286">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							<p><span>The Fourth Amendment still applies at the border, despite the feds' insistence that it doesn't. </span></p> <p><span>For years, courts have ruled that the government has the right to conduct routine, warrantless searches for contraband at the border. Customs and Border Protection (CBP) has taken advantage of that loophole in the Fourth Amendment's protection against unreasonable searches and seizures to force travelers to hand over data from their phones and laptops.</span></p> <p><span>But on Wednesday, Judge Nina Morrison in the Eastern District of New York </span><a href="https://knightcolumbia.org/documents/ymerpfopdw"><span>ruled</span></a><span> that cellphone searches are a "nonroutine" search, more akin to a strip search than scanning a suitcase or passing a traveler through a metal detector.</span></p> <p>Although the interests of stopping contraband are "undoubtedly served when the government searches the luggage or pockets of a person crossing the border carrying objects that can only be introduced to this country by being physically moved across its borders, the extent to which those interests are served when the government searches data stored on a person's cell phone is far less clear," the judge declared.</p> <p><span>Morrison noted that "reviewing the information in a person's cell phone is the best approximation government officials have for mindreading," so searching through cellphone data has an even heavier privacy impact than rummaging through physical possessions. Therefore, the court ruled, a cellphone search at the border requires both probable cause </span><i><span>and</span></i><span> a warrant. Morrison did not distinguish between scanning a phone's contents with <a href="https://reason.com/2024/06/27/baltimore-brings-back-controversial-cellphone-hacking-system/">special software</a> and manually flipping through it.</span></p> <p><span>And in a victory for journalists, the judge specifically acknowledged the First Amendment implications of cellphone searches too. She cited reporting by </span><a href="https://theintercept.com/2019/02/08/us-mexico-border-journalists-harassment/"><i><span>The Intercept</span></i></a><span> and </span><em><a href="https://www.vice.com/en/article/78ke9q/wsj-reporter-homeland-security-tried-to-take-my-phones-at-the-border"><span>VICE</span></a></em><span> about CPB searching journalists' cellphones "based on these journalists' ongoing coverage of politically sensitive issues" and warned that those phone searches could put confidential sources at risk.</span></p> <p><span>Wednesday's ruling adds to a stream of cases restricting the feds' ability to search travelers' electronics. The 4th and 9th Circuits, which cover the mid-Atlantic and Western states, have ruled that border police need at least "</span><a href="https://crsreports.congress.gov/product/pdf/LSB/LSB10387#:~:text=Under%20the%20border%20search%20exception%2C%20the%20government%20may%20conduct%20routine,manual%20searches%20of%20electronic%20devices."><span>reasonable suspicion</span></a><span>" of a crime to search cellphones. Last year, a judge in the Southern District of New York </span><a href="https://s3.documentcloud.org/documents/23813619/us-v-smith.pdf"><span>also ruled</span></a><span> that the government "may not copy and search an American citizen's cell phone at the border without a warrant absent exigent circumstances."</span></p> <p><span>Wednesday's ruling involves defending the rights of an unsympathetic character. U.S. citizen Kurbonali Sultanov allegedly downloaded a sketchy Russian porn trove, including several images of child sex abuse, which landed him on a government watch list. When Sultanov was on the way back from visiting his family in Uzbekistan, agents from the Department of Homeland Security pulled him aside at the airport and searched his phone, finding the images.</span></p> <p><span>Morrison suppressed the evidence from the phone search but not Sultanov's "spontaneous" statement admitting to downloading the videos. And her order would not have prevented the police from getting Sultanov's phone the old-fashioned way. Sultanov had allegedly downloaded the porn while in the United States, and his name popped up on the watch list two months before his return flight. And, in fact, the feds did obtain a court order to search Sultanov's spare phone.</span></p> <p><span>The Southern District of New York ruling last year also involved an unsympathetic character. Jatiek Smith, a member of the Bloods gang, was being investigated for a "</span><a href="https://www.justice.gov/usao-sdny/pr/bloods-gang-member-convicted-trial-violent-and-extortionate-takeover-new-york-city"><span>violent and extortionate takeover</span></a><span>" of New York's fire mitigation industry. When Smith flew home from a vacation in Jamaica, the FBI took advantage of the opportunity to search Smith's phone at the border.</span></p> <p><span>A judge suppressed the evidence from the phone search, but Smith was </span><a href="https://www.justice.gov/usao-sdny/pr/bloods-gang-member-convicted-trial-violent-and-extortionate-takeover-new-york-city"><span>convicted anyway</span></a><span>. In both cases, the feds could have gotten a warrant for the suspects' phones; they saw the border loophole as a way to skip that step.</span></p> <p><span>In fact, CBP Officer Marves Pichardo admitted that these searches are often warrantless fishing expeditions. CBP searches U.S. citizen's phones if they're coming from "countries that have political difficulties at this point in time and that we're currently looking at for intelligence and stuff like that," Pichardo testified during an evidence suppression hearing. He asserted that CBP agents can "look at pretty much anything that's stored on the phone" and that passengers are usually "very compliant."</span></p> <p><span>Because of the powers the government was claiming, civil libertarians intervened in the Sultanov case. The Knight First Amendment Institute at Columbia University and the Reporters Committee for Freedom of the Press filed an </span><a href="https://knightcolumbia.org/documents/9uoisv1izu"><span><em>amicus</em> brief</span></a><span> in October 2023 arguing that warrantless phone searches are a "grave threat to the Fourth Amendment right to privacy as well as the First Amendment freedoms of the press, speech, and association." Morrison heavily cited that brief in her ruling.</span></p> <p><span>"As the court recognized, letting border agents freely rifle through journalists' work product and communications whenever they cross the border would pose an intolerable risk to press freedom," Grayson Clary, staff attorney at the Reporters Committee for Freedom of the Press, said in a statement sent to reporters. "This thorough opinion provides powerful guidance for other courts grappling with this issue, and makes clear that the Constitution would require a warrant before searching a reporter's electronic devices."</span></p>						</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Driving Compilers (103 pts)]]></title>
            <link>https://fabiensanglard.net/dc/</link>
            <guid>41083077</guid>
            <pubDate>Fri, 26 Jul 2024 22:57:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fabiensanglard.net/dc/">https://fabiensanglard.net/dc/</a>, See on <a href="https://news.ycombinator.com/item?id=41083077">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>


<h2>Introduction</h2>
<p><a href="https://fabiensanglard.net/dc/">←</a> <a href="https://fabiensanglard.net/dc/driver.php">→</a></p><hr>
<p>
I remember how pleasant it was to learn to program in C. There were so many good books explaining not only the language but also the standard library. I devoured both <a href="https://amzn.to/3xRCdbM">The C Programming Language (K&amp;R)</a> by Kernighan/Ritchie and <a href="https://amzn.to/3kseI66%22">The Standard C Library</a> by P.J. Plauger. Then came <a href="https://amzn.to/41AJdI1">Expert C Programming</a> by Van der Linden and finally <a href="https://amzn.to/3kImp8s">C: A Reference Manual</a> by Harbison and Steele.
</p>

<p>
It was an equally enjoyable experience when I took on C++. I found myself unable to put down the <a href="https://amzn.to/3IWgTIO">Effective C++</a> series by Scott Meyers. I loved the simple layout and the astute usage of red text for emphasis. I must have read half the first volume while standing in Toronto World's Biggest Bookstore before I left with the complete series under my arm. I remember power walking to my place to keep on reading.
</p>

<p>
A contrasting experience was to learn how to use the tools to turn my programs into executable. It was a painfully slow and deeply unpleasant process where knowledge was gathered here and there after trial, errors, and a lot of time spent on search engines. It felt like acquiring the same level of comfort to use a compiler took significantly more than learning the language.
</p>
<p>
I blame this experience on the lack of literature on the topic. Most language books start with a "Hello World" code sample. In the case of K&amp;R, it would be <code>hello.c</code>.
</p>

<pre>#include &lt;stdio.h&gt;

main()
{
    printf("hello, world\n");
} </pre>

<p>
The reader is given the command to convert that text file into an executable and it is the last time they will hear about how to use the compiler.
</p>
<pre><b>$</b> cc hello.c
<b>$</b> ./a.out
hello, world</pre> 

<p>
This is the gap this series attempts to fill. It won't teach about a language, its libraries, or an SDK. It won't teach how to write a compiler or a linker either. These articles are meant to ease leaving the world of one-file examples. It is a pot-pourri of the things I wish I had known when I was pulling my hair over mysterious <span>LNK2019</span> and other <span>LNK4002</span> errors.</p>

<p> Here will be explained the core concepts associated with the creation of an executable. As much as possible claims will be backed up with reproducible steps relying on  <code>bintools</code> and driver verbose mode (<code>-v</code>). The goal is to provide the readers with both the tools and a mental map to explore beyond the charted territories of these pages.
</p>

<p><b><u>Note:</u></b> Some liberties were taken with command invocation outputs for typesetting purposes. Commands such as <code>clang -v</code> generate a lot more than what is actually printed here. The uninteresting parts were removed to only keep what is relevant to the topic at hand. Rest assured that no command-line tools were hurt during the making of this text.
</p>


<h2>Environment</h2>
<p> The examples assume a Linux platform. Depending on which illustrate the topic better, <code>gcc</code> or <code>clang</code> compiler drivers are used. If you are using Mac OS X or Windows, the ideas and concepts should be similar. Here is a table of equivalencies.
</p>

<table>
	<tbody><tr>
		<th>Platform</th>
		<th>Driver</th>
		<th>Object format</th>
		<th>Dynamic library</th>
		<th>Static library</th>
		<th>Executable</th>
	</tr>

	<tr>
		<td>Linux</td>
		<td>gcc</td>
		<td>elf</td>
		<td>library.so</td>
		<td>library.a</td>
		<td>elf</td>
	</tr>

	<tr>
		<td>Mac OS X</td>
		<td>clang</td>
		<td>macho</td>
		<td>library.dylib</td>
		<td>library.a</td>
		<td>macho</td>
	</tr>

	<tr>
		<td>Windows</td>
		<td>CL.EXE</td>
		<td>COFF</td>
		<td>library.dll</td>
		<td>library.lib</td>
		<td>PE</td>
	</tr>

</tbody></table>
<p>The platform / toolchain association is the one most often encountered but they may vary. For example, <code>clang</code> is available on all platforms and <code>gcc</code> is available on Windows via cygwin.
</p>



<h2>Structure</h2>
<div>
<table>
  <tbody><tr>
<td colspan="3">1. driver
		</td><td></td>
  </tr>

  <tr>
    <td>2. cpp</td>
    <td>3. cc</td>
    <td>4. ld</td>
    <td>5. loader</td>
  </tr>
</tbody></table>
</div>

<p>This series is divided into five parts. First is explained the component which rules them all, the compiler driver <b>(1)</b>. Then we drill into the three stages of the compilation pipeline, detailing their inputs/outputs. The pre-processor <b>(2)</b>, <code>cpp</code>, converts source code files into translation units (TU), is covered first. Then comes the compiler <code>cc</code> <b>(3)</b>, which ingests TUs and outputs relocatable (object) files. Then we look at the element combining all objects together into and executable, the linker <code>ld</code> <b>(4)</b>.</p>

<p> In the fifth and final part we take a look at the linux loader (also called <code>ld</code>) <b>(5)</b> to further understand the linker output.
</p>

<h2>Next</h2>
<hr>
<p>
	<a href="https://fabiensanglard.net/dc/driver.php">The Compiler Driver (1/5)</a>

</p>


<hr>
 <center>*</center>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Intel confirms no recall for Raptor Lake CPUs,microcode won't fix affected units (102 pts)]]></title>
            <link>https://videocardz.com/newz/intel-confirms-no-recall-for-raptor-lake-cpus-microcode-wont-fix-affected-units</link>
            <guid>41082789</guid>
            <pubDate>Fri, 26 Jul 2024 22:12:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://videocardz.com/newz/intel-confirms-no-recall-for-raptor-lake-cpus-microcode-wont-fix-affected-units">https://videocardz.com/newz/intel-confirms-no-recall-for-raptor-lake-cpus-microcode-wont-fix-affected-units</a>, See on <a href="https://news.ycombinator.com/item?id=41082789">Hacker News</a></p>
Couldn't get https://videocardz.com/newz/intel-confirms-no-recall-for-raptor-lake-cpus-microcode-wont-fix-affected-units: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Funtoo Linux is shutting down (103 pts)]]></title>
            <link>https://forums.funtoo.org/topic/5182-all-good-things-must-come-to-an-end/</link>
            <guid>41082624</guid>
            <pubDate>Fri, 26 Jul 2024 21:49:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forums.funtoo.org/topic/5182-all-good-things-must-come-to-an-end/">https://forums.funtoo.org/topic/5182-all-good-things-must-come-to-an-end/</a>, See on <a href="https://news.ycombinator.com/item?id=41082624">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
		<p>
	All good things must come to an end. I've decided to end the Funtoo Linux project. Funtoo started as a philosophy to create a fun community of contributors building something great together. For me, it's no longer that so I need to move on to other things. There is not a successor BDFL for Funtoo nor am I interested in trying to find one, or hand the project off to someone else. You can expect the project to wind down through August. If you have a Funtoo container, it will continue to be online through the end of August so you have time to find another hosting solution if you need one.
</p>

		

		
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Crooks Bypassed Google's Email Verification to Create Workspace Accounts, Acces (159 pts)]]></title>
            <link>https://krebsonsecurity.com/2024/07/crooks-bypassed-googles-email-verification-to-create-workspace-accounts-access-3rd-party-services/</link>
            <guid>41082502</guid>
            <pubDate>Fri, 26 Jul 2024 21:34:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krebsonsecurity.com/2024/07/crooks-bypassed-googles-email-verification-to-create-workspace-accounts-access-3rd-party-services/">https://krebsonsecurity.com/2024/07/crooks-bypassed-googles-email-verification-to-create-workspace-accounts-access-3rd-party-services/</a>, See on <a href="https://news.ycombinator.com/item?id=41082502">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
												<p><strong>Google</strong> says it recently fixed an authentication weakness that allowed crooks to circumvent the email verification required to create a&nbsp;<strong>Google Workspace</strong> account, and leverage that to impersonate a domain holder at third-party services that allow logins through Google’s “Sign in with Google” feature.</p>
<p><img decoding="async" src="https://krebsonsecurity.com/wp-content/uploads/2024/07/signinwithgoogle.png" alt="" width="418" height="367"></p>
<p>Last week, KrebsOnSecurity heard from a reader who said they received a notice that their email address had been used to create a potentially malicious Workspace account that Google had blocked.</p>
<p>“In the last few weeks, we identified a small-scale abuse campaign whereby bad actors circumvented the email verification step in our account creation flow for Email Verified (EV) Google Workspace accounts using a specially constructed request,” the notice from Google read. “These EV users could then be used to gain access to third-party applications using ‘Sign In with Google’.”</p>
<p>In response to questions, Google said it fixed the problem within 72 hours of discovering it, and that the company has added additional detection to protect against these types of authentication bypasses going forward.</p>
<p><strong>Anu Yamunan</strong>, director of abuse and safety protections at Google Workspace, told KrebsOnSecurity the malicious activity began in late June, and involved “a few thousand” Workspace accounts that were created without being domain-verified.</p>
<p>Google Workspace offers a free trial that people can use to access services like Google Docs, but other services such as Gmail are only available to Workspace users who can validate control over the domain name associated with their email address. The weakness Google fixed allowed attackers to bypass this validation process. Google emphasized that none of the affected domains had previously been associated with Workspace accounts or services.</p>
<p>“The tactic here was to create a specifically-constructed request by a bad actor to circumvent email verification during the signup process,” Yamunan said. “The vector here is they would use one email address to try to sign in, and a completely different email address to verify a token. Once they were email verified, in some cases we have seen them access third party services using Google single sign-on.”</p>
<p>Yamunan said none of the potentially malicious workspace accounts were used to abuse Google services, but rather the attackers sought to impersonate the domain holder to other services online.</p>
<p>In the case of the reader who shared the breach notice from Google, the imposters used the authentication bypass to associate his domain with a Workspace account. And that domain was tied to his login at several third-party services online. Indeed, the alert this reader received from Google said the unauthorized Workspace account appears to have been used to sign in to his account at <strong>Dropbox</strong>.</p>
<p>Google said the now-fixed authentication bypass is unrelated to a recent issue involving cryptocurrency-based domain names that were <a href="https://krebsonsecurity.com/2024/07/researchers-weak-security-defaults-enabled-squarespace-domains-hijacks/" target="_blank" rel="noopener">apparently compromised in their transition to Squarespace</a>, which last year acquired more than 10 million domains that were registered via Google Domains.</p>
<p>On July 12, a number of domains tied to cryptocurrency businesses were hijacked from Squarespace users who hadn’t yet set up their Squarespace accounts. Squarespace has since published <a href="https://status.squarespace.com/incidents/cw2wf55bps15" target="_blank" rel="noopener">a statement</a> blaming the domain hijacks on “a weakness related to OAuth logins”, which Squarespace said it fixed within hours.</p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Free DDNS with Cloudflare and a Cronjob (141 pts)]]></title>
            <link>https://github.com/devrim/cloudflare-noip</link>
            <guid>41081810</guid>
            <pubDate>Fri, 26 Jul 2024 20:07:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/devrim/cloudflare-noip">https://github.com/devrim/cloudflare-noip</a>, See on <a href="https://news.ycombinator.com/item?id=41081810">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Cloudflare NoIP Alternative</h2><a id="user-content-cloudflare-noip-alternative" aria-label="Permalink: Cloudflare NoIP Alternative" href="#cloudflare-noip-alternative"></a></p>
<p dir="auto">This project provides a free alternative to paid dynamic DNS services like NoIP.com. It allows you to update your DNS records on Cloudflare automatically using a free Cloudflare account and a cronjob on your computer.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setup</h2><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<ol dir="auto">
<li>
<p dir="auto">Clone this repository to your local machine.</p>
</li>
<li>
<p dir="auto">Create a <code>keys.json</code> file in the <code>~/.cloudflare-noip/</code> directory with the following structure:</p>
</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="{
    &quot;api_key&quot;: &quot;your_cloudflare_api_key&quot;,
    &quot;email&quot;: &quot;your_cloudflare_email&quot;,
    &quot;zone_id&quot;: &quot;your_cloudflare_zone_id&quot;
}"><pre>{
    <span>"api_key"</span>: <span><span>"</span>your_cloudflare_api_key<span>"</span></span>,
    <span>"email"</span>: <span><span>"</span>your_cloudflare_email<span>"</span></span>,
    <span>"zone_id"</span>: <span><span>"</span>your_cloudflare_zone_id<span>"</span></span>
}</pre></div>
<p dir="auto">To get your Cloudflare API key and zone ID:</p>
<ul dir="auto">
<li>Log in to your Cloudflare account and go to the "My Profile" section.</li>
<li>Click on "API Tokens" and create a new token with the "Zone" permission.</li>
<li>Copy the API key and zone ID from the token details.</li>
</ul>
<ol start="3" dir="auto">
<li>Create a <code>records.json</code> file in the <code>~/.cloudflare-noip/</code> directory with the following structure:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="[
	{
        &quot;record_name&quot;: &quot;sub.domain.xyz&quot;,
        &quot;record_type&quot;: &quot;A&quot;,
        &quot;proxied&quot;: true
	},
	{
	...
	}
]"><pre>[
	{
        <span>"record_name"</span>: <span><span>"</span>sub.domain.xyz<span>"</span></span>,
        <span>"record_type"</span>: <span><span>"</span>A<span>"</span></span>,
        <span>"proxied"</span>: <span>true</span>
	},
	{
	<span>...</span>
	}
]</pre></div>
<p dir="auto">The <code>content</code> field will be automatically updated with the IP address of the machine running the script.</p>
<ol start="4" dir="auto">
<li>Set up a cronjob to run the script at the desired interval. Here are examples for Ubuntu, macOS, and Windows:</li>
</ol>
<p dir="auto"><strong>Ubuntu/Debian:</strong></p>

<p dir="auto">Add the following line to run the script every 5 minutes:</p>
<div dir="auto" data-snippet-clipboard-copy-content="*/60 * * * * cd /path/to/cloudflare-noip &amp;&amp; /usr/bin/python3 main.py"><pre><span>*</span>/60 <span>*</span> <span>*</span> <span>*</span> <span>*</span> <span>cd</span> /path/to/cloudflare-noip <span>&amp;&amp;</span> /usr/bin/python3 main.py</pre></div>
<p dir="auto">restart cronjobs</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemctl restart cron"><pre>sudo systemctl restart cron</pre></div>
<p dir="auto"><strong>macOS (using launchd):</strong></p>
<ol dir="auto">
<li>Create a new file in <code>~/Library/LaunchAgents/</code> called <code>com.example.cloudflare-noip.plist</code> with the following contents:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="<?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>
<!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;>
<plist version=&quot;1.0&quot;>
<dict>
	<key>Label</key>
	<string>com.example.cloudflare-noip</string>
	<key>ProgramArguments</key>
	<array>
		<string>/usr/bin/python3</string>
		<string>/Users/d/Projects/cloudflare-noip/main.py</string>
	</array>
	<key>StartInterval</key>
	<integer>10</integer>
</dict>
</plist>"><pre>&lt;?<span>xml</span><span> version</span>=<span><span>"</span>1.0<span>"</span></span><span> encoding</span>=<span><span>"</span>UTF-8<span>"</span></span>?&gt;
&lt;!<span>DOCTYPE</span> <span>plist</span> PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;<span>plist</span> <span>version</span>=<span><span>"</span>1.0<span>"</span></span>&gt;
&lt;<span>dict</span>&gt;
	&lt;<span>key</span>&gt;Label&lt;/<span>key</span>&gt;
	&lt;<span>string</span>&gt;com.example.cloudflare-noip&lt;/<span>string</span>&gt;
	&lt;<span>key</span>&gt;ProgramArguments&lt;/<span>key</span>&gt;
	&lt;<span>array</span>&gt;
		&lt;<span>string</span>&gt;/usr/bin/python3&lt;/<span>string</span>&gt;
		&lt;<span>string</span>&gt;/Users/d/Projects/cloudflare-noip/main.py&lt;/<span>string</span>&gt;
	&lt;/<span>array</span>&gt;
	&lt;<span>key</span>&gt;StartInterval&lt;/<span>key</span>&gt;
	&lt;<span>integer</span>&gt;10&lt;/<span>integer</span>&gt;
&lt;/<span>dict</span>&gt;
&lt;/<span>plist</span>&gt;</pre></div>
<ol start="2" dir="auto">
<li>Load the launch agent:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="launchctl load ~/Library/LaunchAgents/com.example.cloudflare-noip.plist"><pre>launchctl load <span>~</span>/Library/LaunchAgents/com.example.cloudflare-noip.plist</pre></div>
<p dir="auto"><strong>Windows (using Task Scheduler):</strong></p>
<ol dir="auto">
<li>Open the Task Scheduler: Press the Windows key + R, type <code>taskschd.msc</code>, and press Enter.</li>
<li>Create a new task:
<ul dir="auto">
<li>General: Give the task a name and description.</li>
<li>Triggers: Create a new trigger with the desired interval (e.g., every 5 minutes).</li>
<li>Actions: Create a new action to start a program: <code>python.exe</code> with the argument <code>/path/to/cloudflare_noip.py</code>.</li>
<li>Conditions: Set any additional conditions as needed.</li>
</ul>
</li>
<li>Save the task.</li>
</ol>
<p dir="auto">The script will update the DNS records on Cloudflare with the current IP address of the machine running the script at the specified interval.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TOTP tokens on my wrist with the smartest dumb watch (206 pts)]]></title>
            <link>https://blog.singleton.io/posts/2022-10-17-otp-on-wrist/</link>
            <guid>41081435</guid>
            <pubDate>Fri, 26 Jul 2024 19:20:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.singleton.io/posts/2022-10-17-otp-on-wrist/">https://blog.singleton.io/posts/2022-10-17-otp-on-wrist/</a>, See on <a href="https://news.ycombinator.com/item?id=41081435">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">
        <article itemscope="" itemprop="blogPost">
    <div itemprop="articleBody">
            <p><img src="https://blog.singleton.io/static/imgs-dumbwatch/watch.png" alt="A Casio F-91W showing my Google TOTP code"></p>
<p>I recently took delivery of a new replacement logic board for the ubiquitous classic Casio F-91W from <a href="https://joeycastillo.github.io/Sensor-Watch-Documentation/">Sensor Watch</a>. The F-91W needs no introduction. It’s probably the most popular quartz watch in the world with something like <a href="https://spectrum.ieee.org/the-consumer-electronics-hall-of-fame-casio-f91w-wristwatch">90 million</a> total units sold. The Sensor Watch board replaces the F-91W’s original quartz movement with a new ARM Cortex M0+ powered brain. It uses the original LCD display, pushers and piezo-buzzer. The board is programmable and the Sensor Watch project provides a clean and easy to modify set of watchfaces and “complications” (little utility apps). There’s no Bluetooth radio to connect to other devices, but the combination of a lightweight tried-and-true utility watch case, with months long battery life and features you can rebuild at home is surprisingly powerful. In about an hour I was able to: replace the logic board, configure my 2FA secrets for my Google and Github accounts so I could get my most frequently used OTP codes right on my wrist and write a whole new ratemeter watchface for use as a rowing strokemeter or cadence meter! It’s a delight to hack on, and there’s even a wasm based emulator that makes testing on your computer easy and means you can play with my personal build right on this webpage →</p>
<center></center>
<p>Press MODE once to get to the 2FA token face. ALARM now cycles between Google and Github tokens. Don’t worry, I’ve replaced my real TOTP secrets with dummy values. Press MODE again to get to my new ratemeter watchface. Now start pressing ALARM periodically to measure the rate per minute of whatever you’re tracking. The remaining watchfaces in this build cycle through a world clock, a sunrise/sunset calculator, a moon phase indicator, a live read out from the temperature sensor in the watch, 24h setting picker, and time/date set mode. There are a bunch of other cool watchfaces in the Sensor Watch <code>movement</code> source tree including a pulsometer and orrery.</p>
<p>The process of upgrading the F-91W module has been well documented on <a href="https://blog.jgc.org/2022/10/pimping-my-casio-with-oddly-specific.html">John Graham-Cumming’s blog</a> - I also ordered one of those cool orange watches to transfer my board into soon!</p>
<p>Here’s some info on how to get your TOTP secrets into the build and how I built the watchface:</p>
<h2 id="totp-watchface">TOTP watchface</h2>
<p>This watchface generates time based one time passwords (two factor auth codes) allowing you to sign in securely to many popular websites (e.g. Google, Github). Time-based one-time password (TOTP) is a computer algorithm that generates a one-time password (OTP) that uses the current time as a source of uniqueness.</p>
<p>Press the Alarm button to cycle between your configured websites / TOTP secrets.</p>
<p>The watchface supports multiple websites / TOTP secrets, which need to be extracted from TOTP QR codes and added to the source code for the watchface as follows:</p>
<ol>
<li>Obtain a TOTP secret or QR code from the website you want to generate codes for.</li>
<li>If you have just the QR code, <a href="https://stefansundin.github.io/2fa-qr/">Stefan Sundin’s web site</a> will allow you to extract the secret - it will be an alphanumeric string around 32 characters long, which is the TOTP secret encoded in Base32.</li>
<li>To add the secret to the watchface code, you need to convert it to hexadecimal bytes. This <a href="https://cryptii.com/pipes/base32-to-hex">cryptii.com</a> page will allow you to do that conversion. Note you’ll have to enter your TOTP secret in uppercase.</li>
<li>Finally, you’ll need to take the hexadecimal bytes and add them to the TOTP watchface source code and recompile <code>movement</code>:</li>
</ol>
<h3 id="edit-totp_facec">Edit <code>totp_face.c</code></h3>
<p>You may want to remove the demo keys. Assuming you want to add a key to the end of the list:</p>
<pre tabindex="0"><code>static const uint8_t num_keys = 2;
</code></pre><p>Add one to the number on this line.</p>
<pre tabindex="0"><code>static uint8_t keys[] = {
   // Add the hex bytes for your key
};
</code></pre><p>Add the hexadecimal bytes from step 3 to the end of this array, comma separated and each one preceeded by <code>0x</code>. Don’t forget to add a comma after the previous final byte.</p>
<pre tabindex="0"><code>static const uint8_t key_sizes[] = {
</code></pre><p>Add the size of your secret (the number of hex bytes you just added) to the end of this array.</p>
<pre tabindex="0"><code>static const uint32_t timesteps[] = {
</code></pre><p>Add another <code>30</code> entry to the end of this array.</p>
<pre tabindex="0"><code>static const char labels[][2] = {
</code></pre><p>Add a label for your secret… E.g. if it’s for your Google account you might want to add <code>{ 'g', 'o' }</code> as a friendly label.</p>
<p>That’s it - enjoy the convenience of TOTP codes on your wrist!</p>
<h2 id="writing-a-new-watchface----ratemeter">Writing a new watchface – ratemeter</h2>
<p>You can find all the code for this watchface in <a href="https://github.com/joeycastillo/Sensor-Watch/pull/101">this pull request</a> I submitted to the main project.</p>
<p>Writing this feature was surprisingly simple - the implementation is pretty much all in this one main loop function.</p>
<pre tabindex="0"><code>bool ratemeter_face_loop(movement_event_t event,
                         movement_settings_t *settings,
                         void *context) {
    (void) settings;
    ratemeter_state_t *ratemeter_state = (ratemeter_state_t *)context;
    char buf[14];
</code></pre><p>This function needs to handle events for any button presses you want to handle as well as each tick of the clock.</p>
<pre tabindex="0"><code>    switch (event.event_type) {
</code></pre><p>The tick frequency is something your watchface can request if you want to time intervals or handle an animation or similar.</p>
<p><code>movement</code> provides a utility function called <code>watch_display_string</code> which does its very best to render an alphanumeric string across the various 7+ segment elements on the Casio display. There are lots of foibles trying to map arbitrary strings onto this limited surface, but it’s all very clearly explained in <a href="https://joeycastillo.github.io/Sensor-Watch-Documentation/wig/display.html">the docs</a>.</p>
<p>So, each of the states we care about in turn:</p>
<p><em>When the watchface is activated display “RA” in the day indicators.</em></p>
<pre tabindex="0"><code>        case EVENT_ACTIVATE:
            watch_display_string("ra          ", 0);
            break;
</code></pre><p><em>When the MODE button is pressed, move on to the next watchface.</em></p>
<pre tabindex="0"><code>        case EVENT_MODE_BUTTON_UP:
            movement_move_to_next_face();
            break;
</code></pre><p><em>When the LIGHT button is pressed, turn on the light!</em></p>
<pre tabindex="0"><code>        case EVENT_LIGHT_BUTTON_DOWN:
            movement_illuminate_led();
            break;
</code></pre><p><em>Now the real business… When the ALARM button is pressed:</em></p>
<ol>
<li>update the computed rate to display based on the interval between this and the previous button press.</li>
<li>reset the tick counter (part of the bespoke state of this watchface which I defined).</li>
<li>request a fast tick frequency (this constant is defined as one sixteenth of a second).</li>
</ol>
<pre tabindex="0"><code>        case EVENT_ALARM_BUTTON_DOWN:
            if (ratemeter_state-&gt;ticks != 0) {
                ratemeter_state-&gt;rate =
                    (int16_t)(60.0 / 
                        ((float)ratemeter_state-&gt;ticks /
                         (float)RATEMETER_FACE_FREQUENCY));
            }
            ratemeter_state-&gt;ticks = 0;
            movement_request_tick_frequency(RATEMETER_FACE_FREQUENCY);
            break;
</code></pre><p><em>And finally, on every tick…</em>
Update the display to show the current rate or “Hi” if the rate is faster than 500 per minute and “Lo” below once per minute. Plus, increment the tick counter!</p>
<pre tabindex="0"><code>        case EVENT_TICK:
            if (ratemeter_state-&gt;rate == 0) {
                watch_display_string("ra          ", 0);
            } else {
                if (ratemeter_state-&gt;rate &gt; 500) {
                    watch_display_string("ra      Hi", 0);
                } else if (ratemeter_state-&gt;rate &lt; 1) {
                    watch_display_string("ra      Lo", 0);
                } else {
                    sprintf(buf, "ra  %-3d pn", ratemeter_state-&gt;rate);
                    watch_display_string(buf, 0);
                }
            }
            ratemeter_state-&gt;ticks++;
            break;
</code></pre><p>That’s it - this was both easier and more fun than I expected.</p>
<p>If you enjoyed this, you might like to get your own Sensor Watch from <a href="https://www.oddlyspecificobjects.com/products/sensorwatch/">Oddly Specific Objects</a> - I’m not affiliated with them, I just think what Joey has made here is really cool!</p>

        </div>
</article>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Europe is in danger of regulating its tech market out of existence (306 pts)]]></title>
            <link>https://foreignpolicy.com/2024/07/26/europe-tech-regulation-apple-meta-google-competition/</link>
            <guid>41081238</guid>
            <pubDate>Fri, 26 Jul 2024 18:55:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://foreignpolicy.com/2024/07/26/europe-tech-regulation-apple-meta-google-competition/">https://foreignpolicy.com/2024/07/26/europe-tech-regulation-apple-meta-google-competition/</a>, See on <a href="https://news.ycombinator.com/item?id=41081238">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>In June, Apple announced a new product called <a href="https://www.apple.com/newsroom/2024/06/introducing-apple-intelligence-for-iphone-ipad-and-mac/">Apple Intelligence</a>. It’s being sold as a new suite of features for the iPhone, iPad, and Mac that will use artificial intelligence to help you write and edit emails, create new pictures and emojis, and generally accomplish all kinds of tasks. There’s just one problem if you’re a European user eager to get your hands on it: Apple won’t be releasing it in Europe.</p><div>
						<p>In June, Apple announced a new product called <a href="https://www.apple.com/newsroom/2024/06/introducing-apple-intelligence-for-iphone-ipad-and-mac/">Apple Intelligence</a>. It’s being sold as a new suite of features for the iPhone, iPad, and Mac that will use artificial intelligence to help you write and edit emails, create new pictures and emojis, and generally accomplish all kinds of tasks. There’s just one problem if you’re a European user eager to get your hands on it: Apple won’t be releasing it in Europe.</p>
<p>The company said in a statement that an entire suite of new products and features including Apple Intelligence, SharePlay screen sharing, and iPhone screen mirroring <a href="https://www.cnbc.com/2024/06/21/apple-ai-europe-dma-macos.html">would not be released</a> in European Union countries because of the regulatory requirements imposed by the EU’s Digital Markets Act (DMA). European Commission Executive Vice President Margrethe Vestager <a href="https://www.computerworld.com/article/2510200/eu-commissioner-slams-apple-intelligence-delay.html">called the decision</a> a “stunning declaration” of anti-competitive behavior.</p>
<p>Vestager’s statement is ridiculous on its face: A tech giant choosing not to release a product invites more competition, not less, and more importantly, this is exactly what you’d expect to happen given Europe’s regulatory stance.</p>
<p>The economist Albert Hirschman once <a href="https://www.hup.harvard.edu/books/9780674276604">described</a> the two options in an unfavorable environment as “voice” and “exit.” The most common option is voice—attempt to negotiate, repair the situation, and communicate toward better conditions. But the more drastic option is exit—choosing to leave the unfavorable environment entirely. That’s more common for people or political movements, but it’s growing increasingly relevant to technology in Europe.</p>
<p>Apple’s decision isn’t the first time that poorly designed regulations have pushed tech companies to block features or services in specific countries. Last year, Facebook <a href="https://www.voanews.com/a/facebook-news-ban-in-canada-leaves-small-outlets-struggling-/7489564.html">removed all news content</a> in Canada in response to the country’s Online News Act, which resulted in smaller news outlets losing business. In 2014, Google News <a href="https://www.theguardian.com/technology/2014/dec/11/google-news-spain-to-close-in-response-to-tax-on-story-links">withdrew from Spain</a> over a “link tax,” causing <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2837553">lower traffic</a> for Spanish news sites, returning only when the law was changed. Numerous technology firms have left China due to the power the Chinese Communist Party exerts over foreign corporations.</p>
<p>Adult sites are blocking users in a <a href="https://www.tallahassee.com/story/news/local/state/2024/03/18/pornhub-blocks-states-with-new-age-verification-laws-is-florida-next/73014384007/">variety of U.S. states</a> over age verification laws. Meta delayed the EU rollout of its Twitter (now X) competitor Threads over regulatory concerns, though it did eventually <a href="https://www.bbc.com/news/technology-67695643">launch there</a>. The firm, in a move that mirrors the Apple Intelligence decision, has also <a href="https://www.theverge.com/2024/7/18/24201041/meta-multimodal-llama-ai-model-launch-eu-regulations">declined to release its cutting-edge Llama AI models</a> in the EU, citing “regulatory uncertainty.” Technology companies have traditionally invested large amounts of money in voice strategies, lobbying officials and trying to improve poorly written laws. But they are increasingly aware of their ability to exit, especially in the European context. And Europe’s regulatory approach risks creating a balkanized “splinternet,” where international tech giants may choose to withdraw from the European continent.</p>
<p>If that seems far-fetched, consider other recent cases. Europe recently charged Meta with <a href="https://www.reuters.com/technology/meta-charged-with-failing-comply-with-eu-tech-rules-2024-07-01/">breaching EU regulations</a> over its “pay or consent” plan. Meta’s business is built around personalized ads, which are worth far more than non-personalized ads. EU regulators required that Meta provide an option that did not involve tracking user data, so Meta created a paid model that would allow users to pay a fee for an ad-free service.</p>
<p>This was already a significant concession—personalized ads are so valuable that one analyst estimated paid users would bring in <a href="https://mobiledevmemo.com/metas-next-tactic-in-the-eu-pay-or-okay/">60 percent less revenue</a>. But EU regulators are now insisting this model also breaches the rules, saying that Meta fails to provide a less personalized but equivalent version of Meta’s social networks. They’re demanding that Meta provide free full services without personalized ads or a monthly fee for users. In a very real sense, the EU has ruled that Meta’s core business model is illegal. Non-personalized ads cannot economically sustain Meta’s services, but it’s the only solution EU regulators want to accept.</p>
<p>Or consider the recent charges the EU levied against X. Under Elon Musk’s ownership, anyone can now purchase a blue check with a paid subscription, whereas blue checks were previously reserved for notable figures. EU regulators singled out the new system for blue checks as a <a href="https://www.rte.ie/news/business/2024/0712/1459534-musk-x-brussels/">deceptive business practice</a> that violates the bloc’s Digital Services Act.</p>
<p>These charges are absurd. For one, the change in the blue check system was widely advertised and dominated <a href="https://www.vox.com/recode/2022/11/4/23438917/twitter-verifications-blue-check-elon-musk">headlines</a> for months—as well as dominating discussion on the site itself. The idea that users have been deceived by one of the loudest and most discussed product changes in the site’s history is silly. And beyond that, the EU’s position is essentially “X cannot change the meaning of the blue check feature—it is permanently bound to the EU’s interpretation of what a blue check should mean.” This goes far beyond competition or privacy concerns; this is the EU straightforwardly making product decisions on behalf of a company.</p>
<p>A final example comes from France, where regulators are preparing to charge Nvidia with <a href="https://www.reuters.com/technology/french-antitrust-regulators-preparing-nvidia-charges-sources-say-2024-07-01/">anti-competitive practices</a> related to its <a href="https://blogs.nvidia.com/blog/what-is-cuda-2/">CUDA software</a>. CUDA is a free software system developed by Nvidia to run on its chips that allows other programs to more efficiently utilize GPUs in calculations. It’s one of the main reasons Nvidia has been so successful—the software makes its chips more powerful, and no competitor has developed comparable technology. It’s exactly the kind of innovative research that should be rewarded, but French regulators seem to view Nvidia’s decades-long investment in CUDA as a crime.</p>
<p>These examples all share a few key features. They’re all actions aimed at successful foreign tech companies—not surprising since the EU’s rules all but ensure there are <a href="https://foreignpolicy.com/2023/10/23/metaverse-europe-uk-us-big-tech-regulation-innovation/">no comparably successful European companies</a>. They’re all instances of regulatory overreach, where the EU is trying to dictate product decisions or rule entire business strategies illegal. And crucially, the sizes of the possible fines in play are so large that they may end up scaring companies off the continent.</p>
<p>EU policy allows for fines of up to <a href="https://competition-policy.ec.europa.eu/index/fines_en">10 percent of global revenue</a>. Analyst Ben Thompson <a href="https://stratechery.com/2024/the-e-u-goes-too-far/">reports</a> that Meta only gets 10 percent of its revenue from the EU and Apple only 7 percent. Nvidia does not provide exact regional numbers, but it’s <a href="https://en.macromicro.me/charts/81141/nvda-revenue-region-us-tw-cn">likely</a> that the EU provides less than 10 percent of its revenue as well. And this is revenue, not profit. A single fine of that magnitude would be more profit than these companies make in the EU in several years and destroy the economic rationale for operating there. With global-sized punishments for inane local issues, Europe is much closer than it realizes to simply driving tech companies away.</p>
<p>Europe’s regulators may insist that if companies simply followed the rules, they’d be able to make their profits without the threat of fines. This is patently untrue in the case of Meta, where the EU has ruled out every practical business strategy for funding its operations. But it’s also impossible writ large because the EU often doesn’t write clear rules in advance. Instead, the DMA requires businesses to meet abstract goals, and regulators decide afterward <a href="https://cepa.org/article/demystifying-europes-digital-markets-act/">whether the company is in compliance or not</a>. The burden does not exist on the EU to write concrete rules with specific requirements but on the companies to read the regulatory tea leaves and determine what steps to take. It’s an arbitrary and poorly designed system, and companies can hardly be blamed for looking to the exit.</p>
<p>Ultimately, Europe needs to figure out what it wants from the world’s technology industry. At times, it seems as if Europe has given up on trying to innovate or succeed in the tech sector. The continent takes more pride in being a leader in regulation than a leader in innovation, and its tech industry is a rounding error compared with that in the United States or China.</p>
<p>What few success stories it has, such as France’s Mistral, risk being strangled by regulatory actions. How would Mistral, a leading AI firm, survive if Nvidia exits the French market due to regulatory concerns? There is no substitute for Nvidia’s cutting-edge chips.</p>
<p>Europeans could end up living in an online backwater with out-of-date phones, cut off from the rest of the world’s search engines and social media sites, unable to even access high-performance computer chips.</p>
<p>As a sovereign body, the EU is within its rights to legislate tech as arbitrarily and harshly as it would like. But politicians such as Vestager don’t get to then act shocked and outraged when tech companies choose to leave. Right now, most tech companies are still attempting to work within the system and make Europe’s regulations more rational. But if voice fails over and over, exit is all that’s left. And in Europe, it’s an increasingly rational choice.</p>

											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Zen 5's 2-ahead branch predictor: how a 30 year old idea allows for new tricks (261 pts)]]></title>
            <link>https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/</link>
            <guid>41081021</guid>
            <pubDate>Fri, 26 Jul 2024 18:32:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/">https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/</a>, See on <a href="https://news.ycombinator.com/item?id=41081021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><a href="https://chipsandcheese.com/2024/07/15/a-video-interview-with-mike-clark-chief-architect-of-zen-at-amd/">When I recently interviewed Mike Clark</a>, he told me, “…you’ll see the actual foundational lift play out in the future on Zen 6, even though it was really Zen 5 that set the table for that.” And at that same Zen 5 architecture event,&nbsp; AMD’s Chief Technology Officer Mark Papermaster said, “Zen 5 is a ground-up redesign of the Zen architecture,” which has brought numerous and impactful changes to the design of the core.</p>
<p>The most substantial of these changes may well be the brand-new 2-Ahead Branch Predictor Unit, an architectural enhancement with roots in papers from three decades ago. But before diving into this both old yet new idea, let’s briefly revisit what branch predictors do and why they’re so critical in modern microprocessor cores.</p>
<p>Ever since computers began operating on programs stored in programmable, randomly accessible memory, architectures have been split into a front end that fetches instructions and a back end responsible for performing those operations. A front end must also support arbitrarily moving the point of current program execution to allow basic functionality like conditional evaluation, looping, and subroutines.</p>
<p>If a processor could simply perform the entire task of fetching an instruction, executing it, and selecting the next instruction location in unison, there would be little else to discuss here. However, incessant demands for performance have dictated that processors perform more operations in the same unit time with the same amount of circuitry, taking us from 5 kHz with ENIAC to the 5+ GHz of some contemporary CPUs like Zen 5, and this has necessitated pipelined logic. A processor must actually maintain in parallel the incrementally completed partial states of logically chronologically distinct operations.</p>
<p>Keeping this pipeline filled is immediately challenged by the existence of conditional jumping within a program. How can the front end know what instructions to begin fetching, decoding, and dispatching when a jump’s condition might be a substantial number of clock cycles away from finishing evaluation? Even unconditional jumps with a statically known target address present a problem when fetching and decoding an instruction needs more than a single pipeline stage.</p>
<p>The two ultimate responses of this problem are to either simply wait when the need is detected or to make a best effort guess at what to do next and be able to unwind discovered mistakes. Unwinding bad guesses must be done by flushing the pipeline of work contingent on the bad guess and restarting at the last known good point. A stall taken on a branch condition is effectively unmitigable and proportional in size to the number of stages between the instruction fetch and the branch condition evaluation completion in the pipeline. Given this and the competitive pressures to not waste throughput, processors have little choice but to attempt guessing program instruction sequences as accurately as possible.</p>
<p>Imagine for a moment that you are a delivery driver without a map or GPS who must listen to on-the-fly navigation from colleagues in the back of the truck. Now further imagine that your windows are completely blacked out and that your buddies only tell you when you were supposed to turn 45 seconds past the intersection you couldn’t even see. You can start to empathize and begin to understand the struggles of the instruction fetcher in a pipelined processor. The art of branch prediction is the universe of strategies that are available to reduce the rate that this woefully afflicted driver has to stop and back up.</p>
<p>Naive strategies like always taking short backwards jumps (turning on to a circular drive) can and historically did provide substantial benefit over always fetching the next largest instruction memory address (just keep driving straight). However, if some small amount of state is allowed to be maintained, much better results in real programs can be achieved. If the blinded truck analogy hasn’t worn too thin yet, imagine the driver keeping a small set of notes of recent turns taken or skipped and hand-drawn scribbles of how roads driven in the last few minutes were arranged and what intersections were passed. These are equivalent to things like branch history and address records, and structures in the 10s of kilobytes have yielded branch prediction percentages in the upper 90s. This article will not attempt to cover the enormous space of research and commercial solutions here, but understanding at least the beginnings of the motivations here is valuable.</p>
<figure><img decoding="async" width="688" height="330" data-attachment-id="30385" data-permalink="https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/image-89/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-5-1.jpg?fit=787%2C378&amp;ssl=1" data-orig-size="787,378" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-5-1.jpg?fit=787%2C378&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-5-1.jpg?fit=688%2C330&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-5-1.jpg?resize=688%2C330&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-5-1.jpg?w=787&amp;ssl=1 787w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-5-1.jpg?resize=768%2C369&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"><figcaption>Annotated floorplan from AMD’s 2023 ISSCC presentation: <em>“Zen 4” – The AMD 5nm 5.7 GHz x86-64 Microprocessor Core</em>. The front end takes half of all total L1 cache and integer logic area, and the branch predictor logic and state received the largest area budget of any front end subsystem.</figcaption></figure>
<p>Enter stage right, Zen 5’s 2-Ahead Branch Predictor.</p>
<div>
<figure><img decoding="async" width="688" height="390" data-attachment-id="30355" data-permalink="https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/zen5-front-end-drawio/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/Zen5-front-end.drawio.png?fit=1061%2C601&amp;ssl=1" data-orig-size="1061,601" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Zen5-front-end.drawio" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/Zen5-front-end.drawio.png?fit=1061%2C601&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/Zen5-front-end.drawio.png?fit=688%2C390&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/Zen5-front-end.drawio.png?resize=688%2C390&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/Zen5-front-end.drawio.png?w=1061&amp;ssl=1 1061w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/Zen5-front-end.drawio.png?resize=768%2C435&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"><figcaption>Diagram of Zen 5’s Front End</figcaption></figure></div>
<p>The 2-Ahead Branch Predictor is a proposal that dates back to the early ’90s. Even back then the challenge of scaling out architectural widths of 8 or more was being talked about and a 2-Ahead Branch Predictor was one of the methods that academia put forth in order to continue squeezing more and more performance out of a single core.&nbsp;</p>
<p>But as commercial vendors moved from a single core CPU to multi-core CPUs, the size of each individual core started to become a bigger and bigger factor in CPU core design so academia started focusing on more area efficient methods to increase performance with the biggest development being the TAGE predictor. The TAGE predictor is much more area efficient compared to older branch predicting methods so again academia focused on improving TAGE predictors.</p>
<p>But with logic nodes allowing for more and more transistors in a similar area along with moving from dual and quad core CPUs to CPUs with hundreds of out of order CPUs, we have started to focus more and more on single core performance rather than just scaling further and further up. So while some of these ideas are quite old, older than I in fact, they are starting to resurface as companies try and figure out ways to increase the performance of a single core.</p>
<p>It is worth addressing an aspect of x86 that allows it to benefit disproportionately more from 2-ahead branch prediction than some other ISAs might. Architectures with fixed-length instructions, like 64-bit Arm, can trivially decode arbitrary subsets of an instruction cache line in parallel by simply replicating decoder logic and slicing up the input data along guaranteed instruction byte boundaries. On the far opposite end of the spectrum sits x86, which requires parsing instruction bytes linearly to determine where each subsequent instruction boundary lies. Pipelining (usually partially decoding length-determining prefixes first) makes a parallelization of some degree tractable, if not cheap, which resulted in 4-wide decoding being commonplace in performance-oriented x86 cores for numerous years.</p>
<p>While increasing logic density with newer fab nodes has eventually made solutions like Golden Cove’s 6-wide decoding commercially viable, the area and power costs of monolithic parallel x86 decoding are most definitely super-linear with width, and there is not anything resembling an easy path forward with continued expansions here. It is perhaps merciful for Intel and AMD that typical application integer code has a substantial branch density, on the order of one every five to six instructions, which diminishes the motivation to pursue parallelized decoders much wider than that.</p>
<p>The escape valve that x86 front ends need more than anything is for the inherently non-parallelizable portion of decoding, i.e., the determination of the instruction boundaries. If only there was some way to easily skip ahead in the decoding and be magically guaranteed you landed on an even instruction boundary…</p>
<h3>Back to the Future!…. of the 1990s</h3>
<p>Starting with the paper titled <a href="https://dl.acm.org/doi/10.1145/237090.237169">“Multiple-block ahead branch predictors” by Seznec et al.</a>, it lays out the why and how of the reasoning and implementation needed to make a 2-Ahead Branch Predictor.</p>
<div>
<figure><img decoding="async" width="688" height="422" data-attachment-id="30356" data-permalink="https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/image-85/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-3.png?fit=997%2C611&amp;ssl=1" data-orig-size="997,611" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-3.png?fit=997%2C611&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-3.png?fit=688%2C422&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-3.png?resize=688%2C422&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-3.png?w=997&amp;ssl=1 997w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-3.png?resize=768%2C471&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"><figcaption>Figure 4a from Seznac et al. showing how a 2-Ahead Branch Predictor with a double instruction fetch pipeline would be able to predict 2 basic blocks</figcaption></figure></div>
<p>Looking into the paper, you’ll see that implementing a branch predictor that can deal with multiple taken branches per cycle is not as simple as just having a branch predictor that can deal with multiple taken branches. To be able to use a 2-Ahead Branch Predictor to its fullest, without exploding area requirements, Seznac et al. recommended dual-porting the instruction fetch.</p>
<p>When we look at Zen 5, we see that dual porting the instruction fetch and the op cache is exactly what AMD has done. AMD now has two 32 Byte per cycle fetch pipes from the 32KB L1 instruction cache, each feeding its own 4-wide decode cluster. The Op Cache is now a dual-ported 6 wide design which can feed up to 12 operands to the Op Queue.</p>
<p>Now, Seznac et al. also recommends dual porting the Branch Target Buffer (BTB). A dual-ported L1 BTB could explain the massive 16K entries that the L1 BTB has access to. As for the L2 BTB, it’s not quite as big as the L1 BTB at only 8K entries but AMD is using it in a manner similar to how a victim cache would be used. So entries that get evicted out of the L1 BTB, end up in the L2 BTB.</p>
<p>With all these changes, Zen 5 can now deal with 2 taken branches per cycle across a non-contiguous block of instructions.&nbsp;</p>
<div>
<figure><img loading="lazy" decoding="async" width="688" height="143" data-attachment-id="30372" data-permalink="https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/image-87/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.png?fit=885%2C184&amp;ssl=1" data-orig-size="885,184" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.png?fit=885%2C184&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.png?fit=688%2C143&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.png?resize=688%2C143&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.png?w=885&amp;ssl=1 885w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.png?resize=768%2C160&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"><figcaption>Figure 3 from Seznac et al. showing the branch information for a 2-Ahead predictor</figcaption></figure></div>
<p>This should reduce the hit to fetch bandwidth when Zen 5 hits a taken branch as well as allowing AMD to predict past the 2 taken branches.</p>
<div>
<figure><img loading="lazy" decoding="async" width="688" height="387" data-attachment-id="30371" data-permalink="https://chipsandcheese.com/2024/07/26/zen-5s-2-ahead-branch-predictor-unit-how-30-year-old-idea-allows-for-new-tricks/image-86/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?fit=2096%2C1179&amp;ssl=1" data-orig-size="2096,1179" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?fit=2096%2C1179&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?fit=688%2C387&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=688%2C387&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?w=2096&amp;ssl=1 2096w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=1280%2C720&amp;ssl=1 1280w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=2048%2C1152&amp;ssl=1 2048w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=1200%2C675&amp;ssl=1 1200w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=1600%2C900&amp;ssl=1 1600w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?resize=1320%2C743&amp;ssl=1 1320w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/07/image-4.jpg?w=1376&amp;ssl=1 1376w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"><figcaption>Slide 6 from AMD’s Deep Dive brief into the Zen 5 architecture</figcaption></figure></div>
<p>Zen 5 can look farther forward in the instruction stream beyond the 2nd taken branch and as a result Zen 5 can have 3 prediction windows where all 3 windows are useful in producing instructions for decoding. The way that this works is that a 5 bit length field is attached to the 2nd prediction window which prevents the over subscription of the decode or op cache resources. This 5 bit length field while smaller than a pointer does give you the start of the 3rd prediction window. One benefit of this is that if the 3rd window crosses a cache line boundary, the prediction lookup index doesn’t need to store extra state for the next cycle. However a drawback is that if the 3rd prediction window is in the same cache line as the 1st or 2nd prediction window, that partial 3rd window isn’t as effective as having a 3rd full prediction window.</p>
<p>Now when Zen 5 has two threads active, the decode clusters and the accompanying fetch pipes are statically partitioned. This means that to act like a dual fetch core, Zen 5 will have to fetch out of both the L1 instruction cache as well as out of the Op Cache. This maybe the reason why AMD dual-ported the op cache so that they can better insure that they can keep the dual fetch pipeline going.</p>
<h3>Final Words</h3>
<p>In the end, this new 2-Ahead Branch Predictor is a major shift for the Zen family of CPU architectures moving forward and is going to give new branch prediction capabilities that will likely serve the future developments of the Zen core in good stead as they refine and improve this branch predictor.</p>
<p>If you like our articles and journalism, and you want to support us in our endeavors, then consider heading over to our&nbsp;<a href="https://www.patreon.com/ChipsandCheese">Patreon</a>&nbsp;or our&nbsp;<a href="https://www.paypal.com/donate/?hosted_button_id=4EMPH66SBGVSQ">PayPal</a>&nbsp;if you want to toss a few bucks our way. If you would like to talk with the Chips and Cheese staff and the people behind the scenes, then consider joining our&nbsp;<a href="https://discord.gg/TwVnRhxgY2">Discord</a>.</p>
<h3>Endnotes</h3>
<p>If you want to learn more about how multiple fetch processors work then I would highly recommend the papers below as they helped with my understanding of how this whole system works:</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/237090.237169">“Multiple-block ahead branch predictors” by Seznec et al. – ASPLOS 1996</a></li>
<li><a href="https://dl.acm.org/doi/pdf/10.1145/223982.224444">“Optimization of Instruction Fetch Mechanisms for High Issue Rates” by Conte et al. – ISCA 1995</a></li>
<li><a href="https://dl.acm.org/doi/10.1145/165939.165956">“Increasing the instruction fetch rate via multiple branch prediction and a branch address cache” by Yeh et al. – ICS 1993</a></li>
<li><a href="https://pages.cs.wisc.edu/~param/papers/oberoip_sequencers.pdf">“Out-of-Order Instruction Fetch using Multiple Sequencers” by Oberoi and Sohi – ICPP’02</a></li>
<li><a href="https://pages.cs.wisc.edu/~param/papers/isca03.pdf">“Parallelism in the Front-End” by Oberoi and Sohi – ISCA 2003</a></li>
</ul>

<div data-post_id="10949" data-instance_id="1" data-additional_class="pp-multiple-authors-layout-boxed.multiple-authors-target-the-content" data-original_class="pp-multiple-authors-boxes-wrapper pp-multiple-authors-wrapper box-post-id-10949 box-instance-id-1">
<p><span>
<ul>
<li>
<div>
<p><img alt="Cheese" src="https://secure.gravatar.com/avatar/eb262496276a5c8c0a375be578f81db9?s=80&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/eb262496276a5c8c0a375be578f81db9?s=160&amp;d=identicon&amp;r=g 2x" height="80" width="80"> </p>
</div>

</li>
<li>
<div>
<p><img alt="Camacho" src="https://secure.gravatar.com/avatar/?s=80&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/?s=160&amp;d=identicon&amp;r=g 2x" height="80" width="80"> </p>
</div>

</li>
</ul>
</span>
</p></div>





</div></div>]]></description>
        </item>
    </channel>
</rss>