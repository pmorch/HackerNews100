<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 03 Aug 2024 21:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[How to build quickly (123 pts)]]></title>
            <link>https://learnhowtolearn.org/how-to-build-extremely-quickly/</link>
            <guid>41148517</guid>
            <pubDate>Sat, 03 Aug 2024 19:05:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://learnhowtolearn.org/how-to-build-extremely-quickly/">https://learnhowtolearn.org/how-to-build-extremely-quickly/</a>, See on <a href="https://news.ycombinator.com/item?id=41148517">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<div>
<figure><img decoding="async" width="800" height="800" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3.jpg" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3.jpg 800w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3-300x300.jpg 300w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3-150x150.jpg 150w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3-768x768.jpg 768w" sizes="(max-width: 800px) 100vw, 800px"></figure></div>


<p><strong>Do “outline speedrunning”:</strong> <strong>Recursively <span>outline</span> an MVP, <span>speedrun</span> filling it in</strong>,<strong> and <span>only then</span> go back and perfect.</strong></p>







<p>This is a ~10x speed up over the ‘loading-bar’ style (more on that below)</p>







<p>Don’t just read this article and move on. Go out and do this for the very next thing you make so you can get in the habit of doing it.</p>







<p><em>(btw, here, speedrunning just means doing something as fast as possible)</em></p>







<h5>Outline speedrunning algorithm:</h5>



<p>1. Make an outline of the project</p>







<p>2. For each item in the outline, make an outline. Do this recursively until the items are small</p>







<p>3. Fill in each item as fast as possible</p>



<ul>
<li>You’ll get more momentum by speedrunning it, which feels great, and will make you even more productive</li>
</ul>



<ul>
<li><strong>DO NOT PERFECT AS YOU GO</strong>. This is a huge and common mistake.</li>
</ul>



<p>4. Finally, once completely done, go back and perfect</p>



<ul>
<li>Color the title text, figure out if buttons should have 5% or 6% border radius, etc</li>
</ul>



<ul>
<li>Since you’re done, you’ll be less stressed, have a much clearer mind, and design your project better</li>



<li><em>And hey, you’ll enjoy the whole process more, and end up making more things over the long run, causing you to learn/grow more</em></li>
</ul>







<h6>CRITICAL requirements for outline speedrunning:</h6>



<ul>
<li>outline recursively</li>



<li>speedrun</li>



<li><strong><span>DO NOT PERFECT ANYTHING UNTIL DONE</span></strong></li>
</ul>



<h5>Outlining is a fundamental of building</h5>



<p>Outline speedrunning may seem basic. That’s because it is. <em>Planning</em> is a fundamental of <em>doing</em>, and <em>outlining</em> is a fundamental of <em>planning</em>.</p>







<p><strong>Much of becoming really efficient is about getting extremely cracked at the fundamentals (many of which you probably mistakenly dismiss).</strong></p>







<p><em>This is recursive btw, because fundamentals typically have fundamentals.</em></p>



<figure><video autoplay="" controls="" loop="" muted="" src="https://learnhowtolearn.org/wp-content/uploads/2024/06/output-onlinegiftools.webm" playsinline=""></video><figcaption><em>its conceptual building blocks all the way </em>down</figcaption></figure>



<p>I knew about outlining since I was little but didn’t do it until I was 20. After I started it took time to get cracked at outlining and refine it into outline speedrunning.</p>







<p><strong>There is immense amounts of wisdom/utility/alpha in reevaluating any fundamentals that your mind dismisses as unimportant. Much improvement in any performance-based field comes from fixing these misevaluations.</strong></p>







<p>You may already do outline speedrunning. If you’re not, it’s a 10x speedup over the classic ‘loading bar’ style.</p>







<p><em>Generally, the best speedups come from<em> improving your algorithm</em>s, rather than ramming your head into the task harder</em>.</p>







<h4>Examples</h4>



<h5>Write large docs faster</h5>



<figure><video controls="" muted="" src="https://learnhowtolearn.org/wp-content/uploads/2024/06/output-1.webm" playsinline=""></video><figcaption><em>My attempt at speedrunning each method for a minute or so. left: loading-bar. right: outline speedrunning</em>.</figcaption></figure>



<h6><strong>Loading-bar writing:</strong></h6>



<p>Common mistake: ‘loading bar writing’ – starting at the beginning of the document and writing sentence by sentence, like a loading bar going through the document.</p>



<figure><video autoplay="" controls="" loop="" muted="" src="https://learnhowtolearn.org/wp-content/uploads/2024/06/loadingbar.webm" playsinline=""></video></figure>



<p>I wrote like this until I was ~20. It made me hate writing.</p>







<p>Now writing is easy and quick. My writing (and at the time, grades) improved substantially because I could allocate more time towards quality with a clearer, less stressed mind.</p>







<h6><strong>Outline speedrunning writing:</strong></h6>



<p>1 Get topic to write about</p>



<ul>
<li>(optional) brainstorm the general plot of the paper</li>
</ul>



<p>2 quickly write the outline (sections)</p>



<p>3 repeat 2 for each section recursively, until the lowest-level sections are small enough to not need outlines</p>



<p>4 speedrun (without caring about quality AT ALL) filling in each outline (starting at the lowest level) until the whole doc is filled out</p>



<p>5 Enjoy the feeling of being 90% done while you go back and perfect the doc, color the title text, add pictures, etc (the fun part!)</p>







<p>Do this to effortlessly improve both speed and quality of writing.</p>











<h4>Program faster</h4>



<p>Going from loading-bar to outline speedrunning significantly speeds up programming</p>







<h5><strong>Outline speedrunning</strong> for<strong> programming:</strong></h5>



<p>1 Figure out what the main purpose/function of your program is.</p>



<p>2 Break the program into parts grouped by functionality.</p>



<p>3 repeat steps 1-2 for each part, unless it is very small.</p>



<p>4 implement the components starting with the lowest-level</p>







<p><span>Example (simplified version of a data pipeline I built):</span></p>



<p>Idea: Data pipeline application</p>



<p>1 Main purpose: collect tons of data and analyze/store it</p>



<p>2 Breaking it down into components:</p>



<ul>
<li>data collecting component</li>



<li>data cleaning/formatting component</li>



<li>data analysis component</li>



<li>data storage component</li>
</ul>



<figure><img decoding="async" width="1024" height="647" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1024x647.png" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1024x647.png 1024w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-300x190.png 300w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-768x485.png 768w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image.png 1174w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p>3 repeat step 2 for each part. Breaking down the data collecting component into subcomponents:</p>



<ul>
<li>Component: list of data collection methods (web scraping, simulation data, tool measurement data, etc)</li>



<li>Component to get user input for choice of data collection method</li>



<li>Component to execute chosen data collection methods</li>



<li>Component to send collected data to storage</li>
</ul>



<figure><img loading="lazy" decoding="async" width="915" height="604" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1.png" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1.png 915w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1-300x198.png 300w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1-768x507.png 768w" sizes="(max-width: 915px) 100vw, 915px"></figure>



<p>3 repeat step 2 for each other component and subcomponent, unless they are small</p>



<figure><img loading="lazy" decoding="async" width="755" height="430" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-2.png" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-2.png 755w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-2-300x171.png 300w" sizes="(max-width: 755px) 100vw, 755px"></figure>







<p>This can be done on a whiteboard, drawn on paper, in your head (can be subpar) or outlined like an essay. The most efficient medium depends on your project. You’ll get a feel for what works best by just practicing this.</p>







<p><em>Build to learn</em></p>







<p><em><strong>[for more like this, follow me on X <a href="https://x.com/dnbt777">@dnbt777</a>]</strong></em></p>




		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse engineering the 59-pound printer onboard the Space Shuttle (120 pts)]]></title>
            <link>http://www.righto.com/2024/08/space-shuttle-interim-teleprinter.html</link>
            <guid>41147643</guid>
            <pubDate>Sat, 03 Aug 2024 16:43:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.righto.com/2024/08/space-shuttle-interim-teleprinter.html">http://www.righto.com/2024/08/space-shuttle-interim-teleprinter.html</a>, See on <a href="https://news.ycombinator.com/item?id=41147643">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-771518350089426794" itemprop="description articleBody">
<p>The Space Shuttle contained a bulky printer so the astronauts could
receive procedures, mission plans, weather reports, crew activity plans, and other documents.
Needed for the first Shuttle launch in 1981, this printer was designed in just 7 months, built around an Army communications terminal.
Unlike modern printers, the Shuttle's printer contains a spinning metal drum with raised characters, allowing it to rapidly print a line at a time.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/teleprinter.jpg"><img alt="The Space Shuttle's Interim Teleprinter. The horizontal rails allowed it to be mounted in a Space Shuttle stowage locker." height="421" src="https://static.righto.com/images/shuttle-printer/teleprinter-w500.jpg" title="The Space Shuttle's Interim Teleprinter. The horizontal rails allowed it to be mounted in a Space Shuttle stowage locker." width="500"></a></p><p>The Space Shuttle's Interim Teleprinter. The horizontal rails allowed it to be mounted in a Space Shuttle stowage locker. Click this image (or any other) for a larger version.</p>
<p>This printer is known as the Space Shuttle Interim Teleprinter System.<span id="fnref:refs"><a href="#fn:refs">1</a></span>
As the name "Interim" suggests, this printer was intended as a stop-gap measure, operating for a few flights until a better printer was operational.
However, the teleprinter proved to be more reliable than its replacement, so it remained in use as a backup for over 50 flights, often printing thousands of lines per flight.
This didn't come cheap: with a Shuttle flight costing <a href="https://en.wikipedia.org/wiki/Criticism_of_the_Space_Shuttle_program">$27,000 per pound</a>, putting the 59-pound teleprinter in space cost over $1.5 million per flight.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/floating.jpg"><img alt="Pilot Overmyer reading a printout from the teleprinter, STS-5, November 16, 1982. From National Archives. The description says that this output is from the Text and Graphics System, but the yellow paper and the date show that this is the Interim Teleprinter." height="396" src="https://static.righto.com/images/shuttle-printer/floating-w600.jpg" title="Pilot Overmyer reading a printout from the teleprinter, STS-5, November 16, 1982. From National Archives. The description says that this output is from the Text and Graphics System, but the yellow paper and the date show that this is the Interim Teleprinter." width="600"></a></p><p>Pilot Overmyer reading a printout from the teleprinter, STS-5, November 16, 1982. From <a href="https://catalog.archives.gov/id/22483203">National Archives</a>. The description says that this output is from the Text and Graphics System, but the yellow paper and the date show that this is the Interim Teleprinter.</p>
<p>We obtained access to a Shuttle teleprinter (probably a development system that remained on the ground) and wanted to put it into operation.
I had to reverse engineer three of the boards inside the printer to determine the data format the printer accepted: serial data encoded into audio.
But after analyzing the printer and performing a lot of maintenance, we succeeded in getting the printer to print.
In this article, I'll describe the Shuttle's Interim Teleprinter, explain its circuitry and drum-based printing mechanism, and show it in operation.</p>
<h2>History of the Shuttle's Interim Teleprinter</h2>
<p>The motivation for the teleprinter goes back to the Apollo program. During Apollo missions, the only way to send information to the astronauts was by talking to them over the
radio and having the astronauts write down the data.
NASA decided that the Space Shuttle should include a mechanism to send text and images to the astronauts, a 78-pound, high-tech fax machine called the <a href="https://www.youtube.com/watch?v=JoIf3y73j6g">Uplink Text &amp; Graphics System</a> (TAGS).
A high-resolution grayscale image was sent to the Shuttle as a digital data stream.
Onboard the Shuttle, a squat CRT displayed the image one line at a time and a fiber-optic faceplate transferred each line to light-sensitive silver emulsion paper.
The paper was developed by passing it over a hot roller at 260ºF for 25 seconds, creating a permanent image.</p>
<p>The one flaw in this plan was that sending the digital image to the Shuttle required the Tracking and Data Relay Satellite System (TDRS), which due to delays wouldn't be ready until the sixth Shuttle flight.
(The TDRS was a space-based replacement for the worldwide network of ground stations that was used during Apollo.)
As a result, NASA decided just seven months before the first Shuttle launch that they needed an interim system "for transmission of real-time, flight-plan changes and other operational data to the crew."<span id="fnref:TUMMS"><a href="#fn:TUMMS">2</a></span></p>
<p>The Shuttle teleprinter is the result of this rushed effort to create a printer that could work over the existing audio channel rather than the digital TDRS satellite.
Due to the time pressure, the Shuttle teleprinter needed to be based on an off-the-shelf printer.
Thermal and electrostatic printers were rejected due to toxicity and flammability problems. (The Shuttle teleprinter used a roll of yellowish paper, which required a NASA waiver due to
its flammability, a concern ever since the Apollo-1 disaster).</p>
<p><a href="https://static.righto.com/images/shuttle-printer/anugc-74.png"><img alt="The AN/UGC-74 military communications terminal. This terminal was developed by the Army but also used by the Navy and Air Force. Image from the Operator's Manual, TM 11-5815-602-10." height="367" src="https://static.righto.com/images/shuttle-printer/anugc-74-w500.png" title="The AN/UGC-74 military communications terminal. This terminal was developed by the Army but also used by the Navy and Air Force. Image from the Operator's Manual, TM 11-5815-602-10." width="500"></a></p><p>The AN/UGC-74 military communications terminal. This terminal was developed by the Army but also used by the Navy and Air Force. Image from the Operator's Manual, TM 11-5815-602-10.</p>
<p>The decision was made to use a military communications terminal, the
the AN/UCG-74<span id="fnref:model"><a href="#fn:model">3</a></span> "<a href="https://books.google.com/books?id=mHZdEoKxLC4C&amp;newbks=1&amp;newbks_redir=0&amp;pg=PA577#v=onepage&amp;q=%22tactical%20teletype%22&amp;f=false">Tactical Teletype</a>".
The terminal's interfacing was very flexible, supporting serial data in either ASCII or Baudot format, with multiple configurations and baud rates (up to 1200 baud), using either a current-loop or voltage signals.
The military terminal supported two-way communication, so it had a keyboard.
Remarkably, the terminal also implemented a word processor, controlled by a Motorola 6800 microprocessor (ancestor of the famous MOS 6502). 
The word processor allowed messages to be composed offline, minimizing the radio transmission time, which was important in a hostile environment.
As will be seen, this 100-pound military system required many large changes to be usable on the Space Shuttle, most visibly removing the keyboard.</p>
<h2>The printing mechanism</h2>
<p>The teleprinter uses a spinning drum with raised characters, shown below.<span id="fnref:chain"><a href="#fn:chain">4</a></span>
To print a character, the printer fires a hammer, forcing the inked ribbon and paper against the
raised character on the drum.
The drum is 80 characters wide, matching the line length, and there are 80 corresponding hammers, one for each print position.
The drum has 64 printable characters, wrapped around each position of the drum.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/drum.jpg"><img alt="The printer's drum rotating drum has 64 raised characters in each column. The characters spiral around the drum and are in reverse order, minimizing the chance that a line will fire all the hammers near-simultaneously." height="256" src="https://static.righto.com/images/shuttle-printer/drum-w600.jpg" title="The printer's drum rotating drum has 64 raised characters in each column. The characters spiral around the drum and are in reverse order, minimizing the chance that a line will fire all the hammers near-simultaneously." width="600"></a></p><p>The printer's drum rotating drum has 64 raised characters in each column. The characters spiral around the drum and are in reverse order, minimizing the chance that a line will fire all the hammers near-simultaneously.</p>
<p>The printer prints a line at a time, not instantaneously, but during each revolution of the drum.
When the drum makes one complete revolution, each of the 64 characters passes by each print position once.
Printing requires precise timing of the hammers to strike the right character on the drum as it whizzes by.
The printer control circuitry triggers each hammer at the proper time, when the desired character on the drum is lined up with the hammer, producing the desired text.<span id="fnref:timing"><a href="#fn:timing">5</a></span></p>
<p>The character set is slightly different between the military printer and the Shuttle printer.
The military drum had 64 ASCII characters (upper-case letters only, numbers, and special characters).
The drum doesn't contain an explicit space character, since nothing is printed for a space. In its place, the drum has a diamond "◊", used as a special character to indicate a parity error or
other error.
The drum for the Shuttle teleprinter replaces 10 ASCII special characters with symbols that are more useful to the Shuttle, such as Greek letters for angles.
Specifically, the characters <code>;@[\]^!"#$</code> are replaced by <code>θ✓‾↑↓~αβΔϕ</code>.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/hammers.jpg"><img alt="With the teleprinter disassembled, the 20 hammer cards are visible at the front. Two hammer driver cards are to the right of the hammer cards." height="292" src="https://static.righto.com/images/shuttle-printer/hammers-w500.jpg" title="With the teleprinter disassembled, the 20 hammer cards are visible at the front. Two hammer driver cards are to the right of the hammer cards." width="500"></a></p><p>With the teleprinter disassembled, the 20 hammer cards are visible at the front. Two hammer driver cards are to the right of the hammer cards.</p>
<p>The video below shows a closeup of the hammers as they strike the paper to print text.
The text is the teleprinter's built-in test message: "THE LAZY YELLOW DOG WAS CAUGHT BY THE SLOW RED FOX AS HE LAY SLEEPING IN THE SUN".
This test message is based on the traditional <a href="https://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog">quick brown fox...</a>, which is a pangram, containing all
26 letters, but
the teleprinter's test sentence is missing J, K, M, Q, and V.
However, the test message is exactly 80 characters long and replaces spaces with the diamond "◊", so it is effective for verifying that all 80 columns work.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/1SjtmePBZjo?si=w4dNr00-n_Mhd8Bk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2>The electronics</h2>
<p>The photo below shows the circuitry inside the teleprinter, looking down from above.
At the left are the three interface boards, custom boards that demodulate the incoming audio signal.
In front of the interface boards are large inductors to filter the incoming power. Hidden beneath them, a solid-state relay controls the power to the rest of the printer, implementing
the low-power standby mode.
In the middle, the blue board is the surprisingly complex switching power supply, mounted on a thick metal plate for cooling.
Normally, the large roll of paper is mounted above the power supply board.
At the right, four large circuit boards implement the main logic of the printer: a printer driver board, a communications board, a memory board, and the processor board.
The rotating drum is protected by the perforated black metal grill at the front.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/top-view.jpg"><img alt="Inside the Shuttle teleprinter, showing the electronics." height="387" src="https://static.righto.com/images/shuttle-printer/top-view-w600.jpg" title="Inside the Shuttle teleprinter, showing the electronics." width="600"></a></p><p>Inside the Shuttle teleprinter, showing the electronics.</p>
<h3>The demodulator boards</h3>
<p>The original military teleprinter received data as a serial bitstream.
However, on the Space Shuttle, data was encoded as frequencies on the audio link.
Three custom boards were constructed to demodulate the audio data so the rest of the printer could handle it.
These boards also performed Shuttle-specific tasks such as powering up the printer when a message comes in, and then returning the printer to
standby mode.
I reverse-engineered these boards to determine how they work and to determine the data encoding. (Schematics are in the footnotes.<span id="fnref:schematics"><a href="#fn:schematics">7</a></span>)
In this section, I'll discuss these three boards, which are on the left side of the printer.</p>
<p>To summarize, the serial bitstream is encoded with Frequency Shift Keying, with a 0 represented by 3600 Hz and a 1 represented by 7200 Hz.<span id="fnref:frequency"><a href="#fn:frequency">6</a></span> The serial data is
transmitted at 600 baud, even parity, one stop bit.
The demodulation process first converts the input audio to a digital signal by thresholding it. (That is, the input sine wave is converted to a square wave.)
The digital signal is autocorrelated to distinguish the 3600 Hz and 7200 Hz signals, recovering the underlying serial data.
This signal is passed to the printer's logic boards (part of the original military teleprinter), which convert the serial signal to ASCII bytes and prints them.</p>
<p>Signal processing starts with the "FSK input" board, shown below. First, it amplifies the input audio signal.
(The two large resistors provide a 600 Ω load for the audio input.)
Next, a 900 Hz high-pass filter eliminates low-frequency noise.
(The filter is implemented by a two-stage <a href="https://en.wikipedia.org/wiki/Sallen%E2%80%93Key_topology">Sallen-Key</a> topology.)</p>
<p><a href="https://static.righto.com/images/shuttle-printer/input-board.jpg"><img alt="The input board." height="419" src="https://static.righto.com/images/shuttle-printer/input-board-w500.jpg" title="The input board." width="500"></a></p><p>The input board.</p>
<p>The signal bounces from board to board, going to the 
"output FSK demod" board next. This board has a carrier-detect circuit that turns on the rest of the printer if it detects an input signal.
This allows the printer to sit idle until it receives a signal from Earth.
This board also applies the threshold to the signal to turn it into a digital waveform, which goes to the "control" board.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/output-board.jpg"><img alt="The output board." height="393" src="https://static.righto.com/images/shuttle-printer/output-board-w500.jpg" title="The output board." width="500"></a></p><p>The output board.</p>
<p>The output board also holds the 5-volt and 12-volt linear regulators that power the three boards; these are the metal-can ICs at the bottom of the board.
To reduce the load on the regulators, two large resistors drop the input voltage (28 volts) to a lower level
before it is regulated.</p>
<p>The control board holds the FSK decoder, an interesting circuit that converts the two FSK frequencies to binary by implementing a digital auto-correlator.
It uses a 64-bit shift register to delay the digital input by 139 µs.
The input and the delayed input are XOR'd together, generating a result that depends on the frequency.
A 7200 Hz signal repeats every 139 µs, so the input and the delayed input match, yielding 0 from the XOR.
However, a 3600 Hz square wave switches state every 139 µs, so the two XOR inputs will always differ, resulting in a 1 output.
Thus, the circuit cleanly distinguishes between a 3600 Hz input and a 7200 Hz input.
(The XOR output is opposite from the final value since it gets inverted later.)</p>
<p><a href="https://static.righto.com/images/shuttle-printer/control-board.jpg"><img alt="The control board." height="436" src="https://static.righto.com/images/shuttle-printer/control-board-w500.jpg" title="The control board." width="500"></a></p><p>The control board.</p>
<p>The digital demodulator avoids some of the problems of an analog FSK demodulator. It is not sensitive to signal levels, since the signal is converted to digital.
The digital demodulator is also not sensitive to harmonics, which can cause problems with analog demodulators.
Finally, it doesn't require the carefully-tuned filters of an analog circuit.</p>
<p>The demodulated signal passes from the control board back to the output board.
This board applies a 400 Hz low-pass filter and then a threshold to convert the signal back to binary.
If the input frequencies are not exact, the demodulator will produce the correct 0 or 1 value over most of the waveform, but there will be glitches at the edges.
The low-pass filter removes these glitches.
(You might be concerned that a 600-baud signal would be wiped out by a 400 Hz low-pass filter. However, the worst case signal (alternating 0's and 1's) would be 300 Hz
because it takes two bits to make one cycle, so the filter has plenty of margin.)
Next, the board blocks the signal unless a carrier is detected.
This ensures that random noise isn't demodulated and printed.
Finally, the serial binary signal leaves the custom Shuttle boards and goes to the teleprinter's communication board, part of the standard teleprinter.</p>
<p>I noticed two unusual things about these boards. First, they have some modifications: "bodge" wires and added components. Second, the boards are not conformal coated, which
is unusual for aerospace boards.
(The four logic cards, in comparison, are protected with conformal coating.)
My hypothesis is that these boards were development boards, early in the design process of the Shuttle teleprinter, so they were modified as the design changed.
The teleprinter is also marked "Not for flight", which supports this theory.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/thagard.jpg"><img alt="Mission Specialist Thagard getting output from the teleprinter. Flight STS-7, June 24, 1983. From NARA. Although the description says this is the Text &amp; Graphics System, it is clearly the Interim Teleprinter." height="401" src="https://static.righto.com/images/shuttle-printer/thagard-w500.jpg" title="Mission Specialist Thagard getting output from the teleprinter. Flight STS-7, June 24, 1983. From NARA. Although the description says this is the Text &amp; Graphics System, it is clearly the Interim Teleprinter." width="500"></a></p><p>Mission Specialist Thagard getting output from the teleprinter. Flight STS-7, June 24, 1983. From <a href="https://nara.getarchive.net/media/s07-08-381-sts-007-ms-thagard-waits-for-middeck-tags-teleprinter-to-printout-43ae4f">NARA</a>. Although the description says this is the Text &amp; Graphics System, it is clearly the Interim Teleprinter.</p>
<h2>The logic cards</h2>
<p>The military teleprinter contained four logic circuit cards: a CPU card, a memory card, a communications card, and a print control card, mounted at the right rear of the teleprinter.
These cards are used unchanged in the Shuttle teleprinter.</p>
<p>The circuitry is more complex than you might expect, with four large cards full of ICs. There are several reasons for this.
First, the cards use 1970s microprocessor technology, so it takes a lot of circuitry to do anything. In particular, many
simple 7400-series logic chips perform "glue" functions: decoding addresses, buffering data, latching signals, and so forth.
Moreover, a drum printer is inherently complicated, since 80 hammers must be driven at the right time based on the desired characters.
Third, the teleprinter is very flexible, supporting multiple signal levels and two character formats (ASCII and Baudot).
Most surprisingly, the teleprinter implements a word processor, allowing messages to be composed and edited offline. 
Of course, since the Shuttle's teleprinter is only used to receive data, and doesn't even have a keyboard, the word processor feature is entirely useless.</p>
<h3>The CPU card</h3>
<p>The CPU card holds the microprocessor that controls the teleprinter.
Its most important function is to convert a line of ASCII characters into print drum codes. These codes are stored in memory for use by the print control card.
The CPU also implements configuration and self-test functions.</p>
<p>The diagram below shows some of the main components.
The CPU card contains a Motorola 6800 CPU, 4 kilobytes of memory, and a ROM that holds its program code.<span id="fnref:block-diagram"><a href="#fn:block-diagram">8</a></span>
Inconveniently, all the IC part numbers are military numbers so it takes some investigation to determine what a part really is.
The MC6822 is a <a href="https://en.wikipedia.org/wiki/Peripheral_Interface_Adapter">Peripheral Interface Adapter</a>, a Motorola chip that provides two parallel I/O ports.
This chip is used on three of the cards to support a variety of I/O tasks. On the CPU card, the I/O ports
drive eight status lamps (most of which were removed for the Shuttle teleprinter) as well as internal status signals such as "paper low" or "keyboard present" and
the baud rate setting input.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/cpu-labeled.jpg"><img alt="The CPU card is centered around a Motorola 6800 microprocessor." height="517" src="https://static.righto.com/images/shuttle-printer/cpu-labeled-w700.jpg" title="The CPU card is centered around a Motorola 6800 microprocessor." width="700"></a></p><p>The CPU card is centered around a Motorola 6800 microprocessor.</p>
<h3>The print control card</h3>
<p>In a sense, the print control card is the heart of the printer, since it causes characters to be printed by firing hammers against the rotating drum.
As the drum goes through one revolution, all 64 characters will spin past each of the 80 print positions. By firing hammers at the exact time, the card prints a line of text.<span id="fnref:revolution"><a href="#fn:revolution">9</a></span>
In more detail, for each row on the drum, the printer card scans through the 80-character memory buffer using Direct Memory Access (DMA).
If the value in memory matches the current drum row number, the hammer is fired.
Note that the hammers don't fire simultaneously, but in sequence as memory is scanned.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/printer-diagram.jpg"><img alt="This diagram shows how the print control board interacts with the rest of the system. From the Maintenance manual, TM 11-5815-602-24." height="574" src="https://static.righto.com/images/shuttle-printer/printer-diagram-w450.jpg" title="This diagram shows how the print control board interacts with the rest of the system. From the Maintenance manual, TM 11-5815-602-24." width="450"></a></p><p>This diagram shows how the print control board interacts with the rest of the system. From the <a href="https://www.radionerds.com/images/e/e0/TM_11-5815-602-24.pdf">Maintenance manual</a>, TM 11-5815-602-24.</p>
<p>The diagram above shows the interaction between the drum, the print control card, and the 80 hammers.
The hammers are implemented on 20 print hammer cards, each with 4 hammers.
Electrically, the hammers are arranged in a matrix. One wire out of 20 (S1-S20) selects the hammer board, the group of four. Another wire selects one of four hammers (Col 1-4).
This approach simplifies the electronics, since 20 + 4 driver circuits and wires are used, rather than 80 (one for each column).
The print control card is synchronized to the drum by two photo-transistor sensors that detect the drum's position. One sensor is triggered on each row, while the other sensor
triggers once per revolution.</p>
<p>The print control card is shown below, with the main functional blocks labeled.
The large purple-and-gold chip is the PIA, the same I/O chip that appeared on the CPU card. It handles a variety of signals such as the self-test request, paper out, and the drum stop signal.
The mode control logic generates timing signals depending on the printer's mode.
The data compare logic increments the row counter on each drum pulse, and compares the row counter to the value read from memory.<span id="fnref:compare"><a href="#fn:compare">10</a></span>
The hammer driver circuitry on the left selects one of the 20 hammer cards, while the hammer driver circuitry on the right selects one of four hammers.
The ribbon circuitry raises and lowers the ribbon so the ribbon doesn't block the text when the printer is idle.
The line feed circuitry advances the paper for a line feed operation.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/print-labeled.jpg"><img alt="The print control card prints data by driving the hammers." height="376" src="https://static.righto.com/images/shuttle-printer/print-labeled-w600.jpg" title="The print control card prints data by driving the hammers." width="600"></a></p><p>The print control card prints data by driving the hammers.</p>
<p>The photo below shows one of the hammer cards, with four hammers.
Each hammer has an electromagnet that pulls a lever, rotating the hammer wheel, and causing the hammer to strike the paper.
(The hammers themselves are in the upper right of the photo.)
A screw adjustment controls the distance between each hammer and the paper, allowing precise adjustment of the timing.
(Marc had to carefully adjust all the hammers to make the print quality readable.)</p>
<p><a href="https://static.righto.com/images/shuttle-printer/hammer-driver.jpg"><img alt="One of the 20 Hammer driver cards. Photo courtesy of Marcel." height="482" src="https://static.righto.com/images/shuttle-printer/hammer-driver-w400.jpg" title="One of the 20 Hammer driver cards. Photo courtesy of Marcel." width="400"></a></p><p>One of the 20 Hammer driver cards. Photo courtesy of Marcel.</p>
<h3>The communication card</h3>
<p>The communication card handles the teleprinter's serial data input.
The key chip is the 8251A, a USART (Universal Synchronous/Asynchronous Receiver/Transmitter). This complex chip performs the conversion between the
serial data stream and the bytes that the processor uses.
(Note that the military teleprinter both sent and received serial data, while the Shuttle teleprinter only receives data.)
The chip has a few support chips, labeled "UART" in the diagram below.
The board has another Peripheral Interface Adapter chip, providing two I/O ports. These ports have functions such as reading the serial line settings
(ASCII vs. Baudot, odd or even parity, number of stop bits, and current loop levels).</p>
<p><a href="https://static.righto.com/images/shuttle-printer/comm-labeled.jpg"><img alt="The communication card converts the serial input to parallel byte data." height="428" src="https://static.righto.com/images/shuttle-printer/comm-labeled-w600.jpg" title="The communication card converts the serial input to parallel byte data." width="600"></a></p><p>The communication card converts the serial input to parallel byte data.</p>
<p>The board also has circuitry to generate the clock pulses for the selected baud rate.
The mode circuitry handles various phases of transmit/receive. The filter/demod circuitry
handles different input types, digitally filtering and demodulating as necessary.<span id="fnref:filter"><a href="#fn:filter">11</a></span></p>
<h3>The memory card</h3>
<p>The memory card supports the word-processing feature. It provides additional RAM to hold the text buffer as well as the ROM holding the software for editing.
The 16 DRAM chips on the left (MK4027) provide 8 KB of RAM while the two ROM chips on the right provide 8K of ROM.
The chips in the middle to the right of the resistors split the 12 address bits into row and column addresses as required by the RAM chips. The address signals go through the numerous 24 Ω resistors in the middle; I don't know why.
According to the manual, the printer operates fine without this card, except without the word processor. Since the word processor was irrelevant to the Shuttle, I
wonder why this card wasn't removed to reduce weight.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/memory-board.jpg"><img alt="The memory card has additional RAM and ROM to support the word processing feature." height="377" src="https://static.righto.com/images/shuttle-printer/memory-board-w600.jpg" title="The memory card has additional RAM and ROM to support the word processing feature." width="600"></a></p><p>The memory card has additional RAM and ROM to support the word processing feature.</p>
<h2>The power supply</h2>
<p>The power supply board (shown earlier) implements separate power supplies for different parts of the printer.<span id="fnref:power-supply"><a href="#fn:power-supply">12</a></span>
The supplies are implemented as switching power supplies, which were not as common at the time as now.
The microprocessor supply provides +5V, +12V, and -5V, voltages required by memory chips in the 1970s.
A separate switching power supply provides +5V, -8.6V, and +8.6V for the keyboard, dustcover, and interface module, components that were removed for the Shuttle teleprinter.
Another supply powers the printer's status lamps.</p>
<p>The drum motor supply is important because its voltage is regulated to control the rotational speed of the drum.
A sensor on the drum provides a feedback pulse for each row on the drum.  (I think the drum speed is 868 RPM.)
These pulses control the drum motor's switching supply.
If the drum spins too slowly, the voltage is increased, and similarly if it spins too fast.</p>
<p>The hammers have an unusual constant-current power supply.
When the printer is active, this power supply generates +18 V.
However, the power supply is designed to use a constant current of 600 mA regardless of the hammer activity. A capacitor provides a reservoir of power that is filled by the constant current. If the hammers are using less current, the excess current is bled off through a resistor.
The purpose of this is "to mask printing intelligence during periods of message traffic."
In other words, if you used a teleprinter in the embassy in Moscow, for instance, spies could monitor power transients to see when hammers are firing, and perhaps figure out what is
being printed.
By keeping the current constant, this source of intelligence is blocked.
Of course, this feature is useless on the Space Shuttle and only wastes power.</p>
<p>The military teleprinter accepted multiple input voltages: 22-30 VDC, 115 VAC, or 230 VAC, along with a 12 VDC battery backup.
The transformers and diodes to support these voltages were part of the interface module that was removed for the Shuttle teleprinter.
Instead, the Shuttle teleprinter is powered by 28 VDC.</p>
<h2>Mechanical changes</h2>
<p>The military teleprinter underwent significant mechanical changes to make it suitable for the Shuttle.
These changes reduced its weight from 100 pounds to 59 pounds.
The most visible change to the printer is the removal of the keyboard.
The entire front section of the printer was replaced, removing the controls that were not needed in the Shuttle.<span id="fnref:changes"><a href="#fn:changes">13</a></span>
The rugged frame of the original printer was replaced with a lighter-weight (but still substantial) frame. Horizontal rails were added to the frame to support the printer in
the Shuttle locker.</p>
<p>The photo below shows the front of the Shuttle teleprinter.
While the military teleprinter had numerous lights and switches on the front, the Shuttle teleprinter has just two lights and four switches.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/front.jpg"><img alt="Front view of the Shuttle teleprinter. The bar across the middle holds a paper cutter for removing the output." height="349" src="https://static.righto.com/images/shuttle-printer/front-w600.jpg" title="Front view of the Shuttle teleprinter. The bar across the middle holds a paper cutter for removing the output." width="600"></a></p><p>Front view of the Shuttle teleprinter. The bar across the middle holds a paper cutter for removing the output.</p>
<p>NASA was concerned that the temperature of the teleprinter could become hazardous to the astronauts.
To mitigate this danger, the teleprinter had a large heat-sensitive warning sticker.
The yellow sticker on the left of the teleprinter changes color and displays an image if it heats up: it shows a <a href="https://amzn.to/3WtpqIF">bandaged hand</a> and the word "HOT".
Above it is an "Omegalabel" temperature monitoring sticker that shows the highest temperature the device reached.
There are more of these stickers inside the teleprinter on various motors.</p>
<h2>The Interim Teleprinter inside the Space Shuttle</h2>
<p>The teleprinter was too large to be mounted on the flight deck, so it was mounted in a storage locker on the middeck, one level lower.
The photo below shows the location of the locker that held the teleprinter (although the teleprinter was not present in this photo), looking backward (aft) toward the airlock.
The locker is denoted MA9F, indicating Mid-deck Aft, position 9F (<a href="https://ntrs.nasa.gov/api/citations/19850018529/downloads/19850018529.pdf">details</a>), in the back on the right
side of the Shuttle.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/ma9fa.jpg"><img alt="This photo shows the locker that held the teleprinter. Photo by DMolybdenum, panorama viewed on renderstuff." height="338" src="https://static.righto.com/images/shuttle-printer/ma9fa-w500.jpg" title="This photo shows the locker that held the teleprinter. Photo by DMolybdenum, panorama viewed on renderstuff." width="500"></a></p><p>This photo shows the locker that held the teleprinter. Photo by <a href="https://commons.wikimedia.org/wiki/File:Space_Shuttle_Mid-Deck_area.png">DMolybdenum</a>, panorama viewed on <a href="https://renderstuff.com/tools/360-panorama-web-viewer/">renderstuff</a>.</p>
<p>The teleprinter was noisy because of its impact printing; even with it in a locker, the sound outside was 69.5 dB. The solution was to soundproof the locker with acoustic insulation.
Various insulating materials were tested until one was found that passed the toxicity requirements. Another flammability waiver was required for the insulation.</p>
<p>Putting the teleprinter in an insulated locker without cooling caused another problem: overheating. The military teleprinter used 34 watts even while idle, which would cause the
printer to become dangerously hot after just 6 orbits.
The printer was redesigned to support a standby mode that used just 1 watt. When a signal from Earth was detected, the printer would power up while in use, and then return to
standby mode.
A circuit was added to send a tone back to Earth when the printer was activated, reassuring Mission Control that the printer had switched out of standby mode.
These circuits were on the three custom Shuttle boards described earlier.</p>
<p>Putting the teleprinter in a locker made cabling difficult.
The solution was a panel on the locker door with connectors for power and audio. 
The panel has a power switch and light as well as a light to indicate that a message has been received.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/teleprinter-panel.jpg"><img alt="The panel on the outside of the locker, used for connection to the teleprinter. From distantsuns, NASA Space Flight forum." height="333" src="https://static.righto.com/images/shuttle-printer/teleprinter-panel-w250.jpg" title="The panel on the outside of the locker, used for connection to the teleprinter. From distantsuns, NASA Space Flight forum." width="250"></a></p><p>The panel on the outside of the locker, used for connection to the teleprinter. From <a href="https://forum.nasaspaceflight.com/index.php?topic=58114.0">distantsuns</a>, NASA Space Flight forum.</p>
<p>The photo below shows the teleprinter locker with the connection panel on the far left. Note the cables attached to the connectors.
These cables went across the back of the Shuttle to the left side, where they went up to the flight deck;
the cable routing was performed before launch.<span id="fnref:cables"><a href="#fn:cables">14</a></span>
For this flight, the neighboring locker MA16F held 3300 <a href="https://airandspace.si.edu/collection-objects/bee-enclosure-module-sts-41-c/nasm_A19880031000">honeybees</a> for a student experiment.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/vanHoften.jpg"><img alt="The teleprinter in middeck locker MA9F on flight STS-41C.  The hands belong to mission specialist van Hoften.  From National Archives; the description says the photo is from 1995 and shows the Thermal Impulse Printer system, but both are wrong. (STS-41C was in April, 1984.)" height="351" src="https://static.righto.com/images/shuttle-printer/vanHoften-w500.jpg" title="The teleprinter in middeck locker MA9F on flight STS-41C.  The hands belong to mission specialist van Hoften.  From National Archives; the description says the photo is from 1995 and shows the Thermal Impulse Printer system, but both are wrong. (STS-41C was in April, 1984.)" width="500"></a></p><p>The teleprinter in middeck locker MA9F on flight STS-41C.  The hands belong to mission specialist van Hoften.  From <a href="https://catalog.archives.gov/id/22604200">National Archives</a>; the description says the photo is from 1995 and shows the Thermal Impulse Printer system, but both are wrong. (STS-41C was in April, 1984.)</p>
<p>The teleprinter cables connect to the shuttle at panel A15 on the
aft bulkhead of the flight deck on the left side of the Shuttle. In other words, if you sat in the Shuttle Commander's seat in the cockpit and turned around,
this is what you would see.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/aft-connections.jpg"><img alt="The connections for the teleprinter in the flight deck. This photo shows Atlantis in the Kennedy Space Center visitor complex. In use, the Shuttle was much more cluttered." height="470" src="https://static.righto.com/images/shuttle-printer/aft-connections-w500.jpg" title="The connections for the teleprinter in the flight deck. This photo shows Atlantis in the Kennedy Space Center visitor complex. In use, the Shuttle was much more cluttered." width="500"></a></p><p>The connections for the teleprinter in the flight deck. This photo shows Atlantis in the Kennedy Space Center visitor complex. In use, the Shuttle was much more cluttered.</p>
<p>The audio cable from the teleprinter went to the Payload Specialist communication connection on panel A15, while the power cable went to the DC power connection right below.
During launch, this audio connection was needed for crew communication, so the teleprinter was plugged in after launch and the audio settings were reconfigured on panel L9.
A cue card was placed above panel L9 with instructions on the teleprinter. <!-- See Shuttle Crew Operations Manual p 3.2-2 --></p>
<h2>The teleprinter's replacements</h2>
<p>The Shuttle teleprinter was supposed to be used for a short time until the Uplink Text and Graphics System (TAGS) entered service, but things didn't work out that way.
TAGS, described earlier, was the fax-like system that could receive grayscale images, but it depended on the TDRS satellites with their support for digital data.
The first TDRS satellite was launched by the sixth shuttle flight, STS-6 (1983).
This allowed the use of TAGS on STS-7, but the printer promptly <a href="https://forum.nasaspaceflight.com/index.php?topic=35731.440">jammed</a>.<span id="fnref:tags"><a href="#fn:tags">15</a></span>
TAGS had constant problems with jamming;
on <a href="https://gandalfddi.z19.web.core.windows.net/Shuttle/JSC-19413%20-%20Shuttle%20flight%20data%20and%20in-flight%20anomaly%20list.%20STS-1-STS-50,%20STS-52-STS-56%20RevT%2019960001128.pdf#page=468">STS-35</a>, the printer jammed and then the unjamming tool broke.
Due to the unreliability of the TAGS, the Interim Teleprinter was kept in service as a backup device.
TAGS was mounted on a dual cold plate in avionics bay 3 of the crew compartment middeck (<a href="https://historycollection.jsc.nasa.gov/JSCHistoryPortal/history/shuttle_pk/mrk/FLIGHT_033-STS-032_MRK.pdf">details</a>), on the other side of the airlock from the teleprinter.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/tags.jpg"><img alt="The Uplink Text and Graphics System, serial number 2. Photo from Smithsonian National Air and Space Museum." height="477" src="https://static.righto.com/images/shuttle-printer/tags-w350.jpg" title="The Uplink Text and Graphics System, serial number 2. Photo from Smithsonian National Air and Space Museum." width="350"></a></p>
<p>After a decade, another printer, the <a href="https://ntrs.nasa.gov/api/citations/20110015565/downloads/20110015565.pdf#page=15">Thermal Impulse Printer System</a> (TIPS) was put into service,
probably on flight STS-56 in 1993.
Once TIPS proved its reliability, it <a href="https://ntrs.nasa.gov/api/citations/19940023718/downloads/19940023718.pdf#page=7">replaced</a> both the teleprinter and the
Text and Graphics System (TAGS).
The TIPS printer was installed in mid-deck locker MF28E; the F indicates the locker was on the forward wall, not the aft wall that held the Interim Teleprinter.
As a backup for the TIPS, the Shuttle flew with a second TIPS.</p>
<!-- Also https://catalog.archives.gov/id/23066389 -->

<p><a href="https://static.righto.com/images/shuttle-printer/tips.jpg"><img alt="The Thermal Impulse Printer System (TIPS) on flight STS-58. From National Archives. The description says that this device is the teleprinter but it is TIPS." height="330" src="https://static.righto.com/images/shuttle-printer/tips-w500.jpg" title="The Thermal Impulse Printer System (TIPS) on flight STS-58. From National Archives. The description says that this device is the teleprinter but it is TIPS." width="500"></a></p><p>The Thermal Impulse Printer System (TIPS) on flight STS-58. From <a href="https://catalog.archives.gov/id/23292712">National Archives</a>. The description says that this device is the teleprinter but it is TIPS.</p>
<p>One <a href="https://books.google.com/books?id=AALqAAAAMAAJ&amp;newbks=1&amp;newbks_redir=0&amp;pg=PA97#v=onepage&amp;q&amp;f=false">motivation</a>
behind the TIPS thermal printer was NASA's desire to use more commercial-off-the-shelf (COTS) equipment instead of expensive custom equipment.
The TIPS printer is the Raytheon TDU-850 printer (below), a commercial product that sold for <a href="https://archive.org/details/electronics-1987_04_02/page/117/mode/1up">$4950</a>. A custom communication interface board inside the printer provided the interface
between the printer and the Shuttle's S-Band and Ku-Band communications systems.
This interface also allowed astronauts to use the TIPS as a printer for an onboard personal computer.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/tdu-850.jpg"><img alt="The Raytheon TDU-850 printer (Thermal Display Unit). From EDN, Mar 17, 1988, p.251." height="276" src="https://static.righto.com/images/shuttle-printer/tdu-850-w450.jpg" title="The Raytheon TDU-850 printer (Thermal Display Unit). From EDN, Mar 17, 1988, p.251." width="450"></a></p><p>The Raytheon TDU-850 printer (Thermal Display Unit). From <a href="https://archive.org/details/edn-1988_03_17/page/251/mode/1up">EDN</a>, Mar 17, 1988, p.251.</p>
<!-- TDU-850 specs http://linux.geodatapub.com/shipwebpages/survey%20gear/Sub-Bottom%20-%20Chirp,%20Boomer/Edgetech%20Discover%204.9/Latest%203200%20&%203300%20Manuals/Latest%203200%20&%203300%20Manuals/3200-SX%20Sub-Bottom%20Profiling%20System%20User's%20Manual%20(lo%20res).pdf -->

<p>The photo below shows the TIPS printer in use, printing a long stream of output that Eileen Collins is reading. Collins was the first woman to pilot the Space Shuttle; she
flew on the Shuttle four times, twice as pilot and twice as commander.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/collins.jpg"><img alt="Pilot Collins reading output from the TIPS printer, the gray box on the right. This is flight STS-84, Atlantis. Photo from National Archives." height="341" src="https://static.righto.com/images/shuttle-printer/collins-w500.jpg" title="Pilot Collins reading output from the TIPS printer, the gray box on the right. This is flight STS-84, Atlantis. Photo from National Archives." width="500"></a></p><p>Pilot Collins reading output from the TIPS printer, the gray box on the right. This is flight STS-84, Atlantis. Photo from <a href="https://catalog.archives.gov/id/23130737">National Archives</a>.</p>
<!-- TIPS https://archive.org/details/NASA_NTRS_Archive_20110015565/page/n14/mode/1up?q=%22thermal+impulse+printer+system%22 -->

<h2>The teleprinter, operational</h2>
<p>We succeeded in making the Shuttle teleprinter operational.
The printer had many mechanical problems, mainly because the rubber rollers had turned to liquid and gummed up the mechanism.
Marc disassembled the printer, carefully cleaned the mechanism, and realigned everything.
I won't discuss the restoration process here since there will be a video on <a href="https://www.youtube.com/CuriousMarc">CuriousMarc's channel</a>.
We were able to send FSK-modulated data to the printer and it was printed successfully, as shown below.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EDeL15amsus?si=XoMS5TzSeTItz4sl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2>Conclusions</h2>
<p>At first, I thought that the Shuttle's Interim Teleprinter was a terrible design. It's absurdly heavy and was in danger of overheating.
Although the design started with an existing product, much of it required redesign: the front section, the new drum, the interface, and even the frame.
The design inherited features it couldn't use, such as the built-in word processor. And the constant-current feature was pointless for the Shuttle and just wasted power.</p>
<p>When I learned that the design had to be completed in just seven months, my opinion of the teleprinter improved. Moreover, the design had many constraints, such as toxicity and
flammability restrictions, that limited the potential approaches.</p>
<p>In the end, the teleprinter was used on over 50 flights, acting as a reliable backup to the somewhat flaky Text and Graphics System (TAGS).<span id="fnref:problems"><a href="#fn:problems">16</a></span>
Despite its name, the Interim Teleprinter turned out to be a long-lasting solution, not interim at all.
So I have to conclude that the teleprinter was a good design, working much better and much longer than intended.<span id="fnref:interim"><a href="#fn:interim">17</a></span></p>
<p>In any case, the Interim Teleprinter is an interesting piece of hardware and I hope you enjoyed this article.
Follow me on
Mastodon as <a href="https://oldbytes.space/@kenshirriff">@<span data-cfemail="c1aaa4afb2a9a8b3b3a8a7a781aeada5a3b8b5a4b2efb2b1a0a2a4">[email&nbsp;protected]</span></a>
or <a href="http://www.righto.com/feeds/posts/default">RSS</a>.
Thanks to Marcel for providing the printer. Restoration performed with CuriousMarc, Eric Schlapefer, and Mike Stewart.</p>
<h2>Notes and references</h2>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boeing's Starliner proves better at torching cash than reaching orbit (131 pts)]]></title>
            <link>https://www.theregister.com/2024/08/02/boeing_starliner_losses/</link>
            <guid>41147545</guid>
            <pubDate>Sat, 03 Aug 2024 16:28:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2024/08/02/boeing_starliner_losses/">https://www.theregister.com/2024/08/02/boeing_starliner_losses/</a>, See on <a href="https://news.ycombinator.com/item?id=41147545">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>Lurking in Boeing's woeful Q2 financials is an admission that while its Starliner spacecraft might be struggling when it comes to burning fuel, it has no problem whatsoever setting fire to dollar bills.</p>
<p>The Calamity Capsule is currently attached to the International Space Station (ISS) while engineers scrutinize test results and finalize procedures for bringing the Boeing spacecraft – and its two crew members – back to Earth.</p>
<p>The word "calamity" might equally apply to the impact of the project on Boeing's <a target="_blank" href="https://www.theregister.com/2024/07/31/boeing_q2_2024/">finances</a>. The troubled aerospace titan's <a target="_blank" rel="nofollow" href="https://www.sec.gov/ix?doc=/Archives/edgar/data/0000012927/000001292724000055/ba-20240630.htm">filing</a> with the US Securities and Exchange Commission (SEC) revealed it would be increasing its "reach-forward loss on the [Starliner] program" by another $125 million.</p>

    

<p>The <a target="_blank" href="https://www.theregister.com/2022/10/27/starliner_losses_closing_in_on/">losses</a> incurred by Boeing thanks to Starliner have comfortably breezed past $1 billion, and will likely surpass $1.6 billion before long. "Risk remains that we may record additional losses in future periods," Boeing observed.</p>

        


        

<p>It is now almost ten years since NASA handed Boeing a <a target="_blank" href="https://www.theregister.com/2015/05/29/nasa_hands_boeing_contract_for_first_commercial_crew_mission_to_iss/">contract</a> to develop a vehicle to transport crew to and from the ISS. John Mulholland, then Boeing VP and Program Manager for Commercial Crew and now Boeing's Program Manager for the ISS, said: "We're on track to fly in 2017, and this critical milestone moves us another step closer in fully maturing the CST-100 design."</p>
<ul>

<li><a href="https://www.theregister.com/2024/07/31/boeing_q2_2024/">Boeing's Q2 nosedive buoyed by appointment of new CEO</a></li>

<li><a href="https://www.theregister.com/2024/07/29/nasa_approves_crew_9_launch/">NASA gives Falcon 9 thumbs-up to launch Crew-9</a></li>

<li><a href="https://www.theregister.com/2024/07/26/starliner_stay_onboard_iss/">Boeing Starliner crew get their ISS sleepover extended</a></li>

<li><a href="https://www.theregister.com/2024/07/11/boeings_starliner/">Boeing's Starliner set for extended stay at the ISS as engineers on Earth try to recreate thruster issues</a></li>
</ul>
<p>After a <a target="_blank" href="https://www.theregister.com/2019/12/20/boeing_starliner_failure/">failed first attempt</a> to reach the ISS, Boeing repeated the non-crewed test flight "<a target="_blank" rel="nofollow" href="https://boeing.mediaroom.com/2020-04-06-Boeing-Statement-on-Starliners-Next-Flight">at no cost to the taxpayer</a>." Despite that second unmanned try at reaching the ISS being successful, the Calamity Capsule was subject to yet more delays before finally getting off the ground in June with two test pilots onboard for a minimum mission duration of eight days. Destination: The space station, and then home.</p>
<p>Almost two months later, the spacecraft and its human duo remain docked to the ISS. Starliner can't get back to Earth within NASA's safety parameters, due to thruster issues and gas leaks. It is cleared for an emergency return, an option American officials aren't willing to take right now.</p>
<p>NASA and Boeing have yet to set a date for the spacecraft's return. In an update issued on August 1, NASA <a target="_blank" rel="nofollow" href="https://blogs.nasa.gov/boeing-crew-flight-test/2024/08/01/nasa-boeing-continue-data-analysis-for-crew-flight-test-evaluation/">noted</a> that the planning for the spacecraft's return was "expected to continue into next week." This includes finalizing undocking procedures and "operational mitigations that could be used in flight, if needed."</p>

        

<p>In its own <a target="_blank" rel="nofollow" href="https://starlinerupdates.com/starliner-return-to-earth-preps-underway/">update</a>, Boeing reported that return-to-Earth preparations were under way, with teams working through simulations and the ISS crew inspecting the exterior of Starliner using the outpost's Canadarm.</p>
<p>Meanwhile, a NASA spokesperson <a target="_blank" rel="nofollow" href="https://arstechnica.com/space/2024/08/yes-nasa-really-could-bring-starliners-astronauts-back-on-crew-dragon/">told Ars</a> the US agency is "evaluating all options." It's thought those possible options include using a SpaceX capsule to do what Starliner right now can't – bring back its pair of pilots.</p>
<p>The next flight of the Starliner is not expected until August 2025, so it seems likely that Boeing's balance sheet will continue to bleed red in the "contracts we wish we'd never signed" column for a while longer. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["We ran out of columns" – The best, worst codebase (681 pts)]]></title>
            <link>https://jimmyhmiller.github.io/ugliest-beautiful-codebase</link>
            <guid>41146239</guid>
            <pubDate>Sat, 03 Aug 2024 12:26:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jimmyhmiller.github.io/ugliest-beautiful-codebase">https://jimmyhmiller.github.io/ugliest-beautiful-codebase</a>, See on <a href="https://news.ycombinator.com/item?id=41146239">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>"We ran out of columns" - The best, worst codebase</h2>
<blockquote>
<p>Oh the merchants2 table? Yeah, we ran out of columns on merchants, so we made merchants2</p>
</blockquote>
<p>When I started programming as a kid, I didn't know people were paid to program. Even as I graduated high school, I assumed that the world of "professional development" looked quite different from the code I wrote in my spare time. When I lucked my way into my first software job, I quickly learned just how wrong and how right I had been. My first job was a trial by fire, to this day, that codebase remains the worst and the best codebase I ever had the pleasure of working in. While the codebase will forever remain locked by proprietary walls of that particular company, I hope I can share with you some of its most fun and scary stories.</p>
<h2>The database lives forever</h2>
<p>In a large legacy system, the database is more than a place to store data, it is the culture maker. The database sets the constraints for how the system as a whole operates. It is the point where all code meets. The database is the watering hole. In our case, that watering hole had quite a bit of pollution.</p>
<p>Did you know that SQL Server has a limit on the number of columns you can have in a table? Me neither. At the time it was 1024, today it appears to be 4096. Needless to say, most people don't need to know this. We did. The reason, Merchants (our table to store customer information) ran out of columns a long time ago. Merchants2 was the solution. A table with (if I remember correctly) some 500+ columns itself.&nbsp;</p>
<p>Merchants (and its best friend Merchants2) were the lifeblood of the system. Everything made its way back to Merchants somehow or other. But it wasn't as if Merchants was the solo (or duo) table. There were plenty of properly normalized tables, all with foreign keys to Merchants. But one will always hold a special place in my heart, SequenceKey.</p>
<h3>SequenceKey</h3>
<table><thead><tr><th>SequenceKey</th></tr></thead><tbody><tr><td>1251238 &nbsp; &nbsp;</td></tr></tbody></table>
<p>For ease of understanding, I have recreated the whole of the SequenceKey table above. Yes. You read that correctly, this is the whole table. A table with a single key and a single value. If simplicity is a virtue, then one might declare SequenceKey to be the perfect table. What could be simpler?&nbsp;</p>
<p>But you may be asking yourself, what possible use could you have for a table with one column and row? Generating ids. Now the story I heard at the time was that once upon a time SQL Server didn't support auto-incrementing ids. This was the accepted, correct answer. My search to figure out if this is true was inconclusive. But in practice, it served as much more than that.</p>
<p>SequenceKey was the glue. In every stored procedure that created new entities, you'd first grab a key from SequenceKey, increment it. And then insert that as your ID for N different tables. You now had an implicit join between all these entity tables. If you saw an ID in the system, there was a good chance related tables would have a row with the exact same ID. Honestly kind of clever.</p>
<h3>The Calendar</h3>
<p>A database may live forever, but our login system was limited by the calendar. I don't mean an actual calendar. I mean a database table called calendar. What did it contain? A manually filled-out calendar. When asking our resident shaman (who went by the name Munch), he informed me that when the calendar runs out we can't login to the system. This happened a few years ago. So they had an intern fill out 5 more years to make sure it didn't happen anytime soon. What system used this calendar? No one knew.</p>
<h3>Employees</h3>
<p>Every morning at 7:15 the employees table was dropped. All the data completely gone. Then a csv from adp was uploaded into the table. During this time you couldn't login to the system. Sometimes this process failed. But this wasn't the end of the process. The data needed to be replicated to headquarters. So an email was sent to a man, who every day would push a button to copy the data.</p>
<h3>The replacement database</h3>
<p>You might be thinking to yourself, couldn't someone clean up this database? Make it nicer to work with? Well, the company was way ahead of you. There was a copy of the database. Data in this copy was about 10 minutes out of date. Sync only went one way. But this database was normalized. How normalized? To go from merchants to a phone number was 7 joins.</p>
<h3>The Sales Numbers</h3>
<p>Every salesperson had a quota they needed to meet every month called a "win". The tables that kept this data (not the financial keepings but a sales-specific way of accounting for this), were incredibly complicated. Every day, a job would figure out which rows had been added and updated and sync them with some system at headquarters. This wasn't really a problem until one salesperson figured out they could ask for those records to be manually changed.</p>
<p>This salesperson had already got their win and landed another big sale that month. They wanted it to be moved to next month. An intern was tasked with doing so. Word got out and over the next three years, requests would grow exponentially. At one point we had 3 interns whose full-time job was writing these SQL statements. Writing an application to do this was deemed too difficult. Before I left though, I made sure to help those interns build their own. No idea if it ever took off though.</p>
<h2>The codebase</h2>
<p>But what is a database without a codebase. And what a magnificent codebase it was. When I joined everything was in Team Foundation Server. If you aren't familiar, this was a Microsoft-made centralized source control system. The main codebase I worked in was half VB, half C#. It ran on IIS and used session state for everything. What did this mean in practice? If you navigated to a page via Path A or Path B you'd see very different things on that page.</p>
<p>But to describe this codebase as merely half VB, half C# would be to do it a disservice. Every javascript framework that existed at the time was checked into this repository. Typically, with some custom changes the author believed needed to be made. Most notably, knockout, backbone, and marionette. But of course, there was a smattering of jquery and jquery plugins.</p>
<p>But this codebase didn't stand alone. Next to it were a dozen or so soap services and a handful of native Windows applications. Most notable was the shipping manager. Fable has it the entire application was built in a weekend by a solo developer. Let's call him Gilfoyle. Gilfoyle was by all accounts an incredibly fast programmer. I never met him, but I felt I knew him, not just through his code in the repos, but also through all the code remaining on his hard drives.</p>
<h3>Gilfoyle's Hard Drives</h3>
<p>Munch (yes this was the name he really went by) kept Gilfoyle's hard drive in RAID configuration on his desk years after Gilfoyle had left the company. Why? Because Gilfoyle was known for not checking in code. Not only that, but for building a random one-off windows application for a single user . So it wasn't uncommon to have a user come to us with a bug report for an application that only existed on Gilfoyle's hard drive.</p>
<h3>The Shipping Bug</h3>
<p>Most of my job was tracking down bugs that teams didn't want to dedicate work to. One particularly nasty bug would pop up once every few months. After we shipped things, the shipping queue would have stuck orders in them, that claimed to both be already shipped and not shipped. I went through a series of workarounds (SQL script, windows application, etc) to try and get us out of the broken state. I was advised not to try and track down the root cause. But I couldn't help myself.</p>
<p>Along the way, I learned how Gilfoyle thought. The shipping app pulled down the entire database and then filtered by date, keeping all orders past the go-live date of the application. The app relied on a SOAP service, not to do any servicey things. No, the service was a pure function. It was the client that did all the side effects. In that client, I discovered a massive class hierarchy. 120 classes each with various methods, inheritance going 10 levels deep. The only problem? <strong>ALL THE METHODS WERE EMPTY.</strong> I do not exaggerate here. Not mostly empty. Empty.</p>
<p>That one stumped me for a while. Eventually, I learned this was in service of building a structure he could then use reflection on. That reflection would let him create a pipe-delimited string (whose structure was completely database-driven, but entirely static) that he would send over a socket. Turns out this was all eventually sent to Kewill, the service that talked to shipping carriers. Why did this bug happen? Kewill reused 9-digit long numbers every month, someone had disabled the cron job that deleted the old orders.</p>
<h2>The Beautiful Mess</h2>
<p>There are so many more things to tell from this code base. Like the team of Super Senior developers who were rewriting the whole thing without shipping any code for 5 years. Or the red hat consultants building the one database to rule them all. There were so many crazy corners of this code base. So many reasons why there were whole teams dedicated to starting from scratch on just one bit of its functionality.</p>
<p>But I think the most important story to tell is about Justin's improvement of the Merchants Search page. The Merchants Search page was the entry point into the entire application. Every customer service rep would get on the phone with a merchant and type either their id or name to find their information. That would land you on a massive page with all their information. The page was information-dense in the best way, full of any information you could need and any links you could want to visit. But it was dog slow.</p>
<p>Justin was the sole senior developer in my group. He was bright, snarky, and couldn't care less about the business. He told it like it was, didn't pull punches, and could always solve problems by himself faster than teams around him. One day Justin got tired of hearing about how slow the merchant search page was and went and fixed it. Every box on that screen became its own endpoint. On load, everything above the fold would start fetching, and as one loaded-in, more requests would come in. Took page load time from minutes to sub-second.</p>
<h3>Two ways to decouple</h3>
<p>Why was Justin able to do this? Because this codebase had no master plan. There was no overarching design the system had to fit into. No expected format for APIs. No documented design system. No architectural review board making sure things were coherent. The app was a complete and utter mess. No one could ever fix it, so no one tried to. What did we do instead? We carved out our own little world of sanity.</p>
<p>This monolithic app, due to sheer necessity, had grown to be a microcosm of nice, small apps around its edges. Each person, when tasked with improving some part of that app, would inevitably give up untangling that web, and find some nice little corner to build new things. And then slowly update links to point to their nice new stuff, orphaning the old.</p>
<p>This may sound like a mess to you. But it was remarkably enjoyable to work in. Gone were the concerns of code duplication. Gone were the concerns of consistency. Gone were the concerns of extensibility. Code was written to serve a use, to touch as little of the area around it as possible, and to be easily replaceable. Our code was decoupled, because coupling it was simply harder.</p>
<h2>After</h2>
<p>In my career since, I've never had the privilege of working in such a wonderfully ugly codebase. Every ugly codebase I've encountered since has never transcended its need for consistency. Perhaps it was because the codebase had been abandoned by "serious" developers long before. All that remained were ragtag interns and junior developers. Or perhaps it was because there was no layer between those developers and the users, no translations, no requirements gathering, no cards. Just you standing at the desk of the customer service rep, asking them how you could make their life better.</p>
<p>I miss that direct connection. The fast feedback. The lack of making grand plans. The simple problem and code connection. Perhaps it's simply a naive nostalgia. But just as I find myself laying on a couch longing to go back to some of the worst years of my childhood; when faced with yet another "enterprise design pattern", my mind flashes back to that beautiful, horrible codebase.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Made an Extended Version of Vimtutor – Introducing Vimtutor Sequel (170 pts)]]></title>
            <link>https://github.com/micahkepe/vimtutor-sequel</link>
            <guid>41144843</guid>
            <pubDate>Sat, 03 Aug 2024 05:29:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/micahkepe/vimtutor-sequel">https://github.com/micahkepe/vimtutor-sequel</a>, See on <a href="https://news.ycombinator.com/item?id=41144843">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">vimtutor-sequel</h2><a id="user-content-vimtutor-sequel" aria-label="Permalink: vimtutor-sequel" href="#vimtutor-sequel"></a></p>
<p dir="auto">Vimtutor Sequel provides advanced Vim tutor lessons to help users deepen their understanding of Vim.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/micahkepe/vimtutor-sequel/blob/main/images/teaser.png"><img src="https://github.com/micahkepe/vimtutor-sequel/raw/main/images/teaser.png" alt="Teaser image of the tutorial"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Advanced Vim commands and techniques</li>
<li>Step-by-step tutorials</li>
<li>Interactive exercises</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">The easiest way to use <code>vimtutor-sequel</code> is to install it using Homebrew. However, you can also run the tutorial manually by cloning the repository (see <a href="#running-vimtutor-without-homebrew">Running Vimtutor Without Homebrew</a>).</p>
<p dir="auto">If you don't have Homebrew installed, you can install it using the following command:</p>
<div dir="auto" data-snippet-clipboard-copy-content="/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;"><pre>/bin/bash -c <span><span>"</span><span><span>$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span>)</span></span><span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">For New Users</h3><a id="user-content-for-new-users" aria-label="Permalink: For New Users" href="#for-new-users"></a></p>
<p dir="auto">To install <code>vimtutor-sequel</code> for the first time using Homebrew:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Tap the repository</strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="brew tap micahkepe/vimtutor-sequel"><pre>brew tap micahkepe/vimtutor-sequel</pre></div>
</li>
<li>
<p dir="auto"><strong>Install <code>vimtutor-sequel</code></strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="brew install vimtutor-sequel"><pre>brew install vimtutor-sequel</pre></div>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">For Existing Users</h3><a id="user-content-for-existing-users" aria-label="Permalink: For Existing Users" href="#for-existing-users"></a></p>
<p dir="auto">If you have already installed <code>vimtutor-sequel</code> and want to upgrade to the latest version:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Update Homebrew</strong>:</p>

</li>
<li>
<p dir="auto"><strong>Upgrade <code>vimtutor-sequel</code></strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="brew upgrade vimtutor-sequel"><pre>brew upgrade vimtutor-sequel</pre></div>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">To run the <code>vimtutor-sequel</code> script, simply type:</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Running Vimtutor Without Homebrew</h2><a id="user-content-running-vimtutor-without-homebrew" aria-label="Permalink: Running Vimtutor Without Homebrew" href="#running-vimtutor-without-homebrew"></a></p>
<p dir="auto">If you are on Windows or Linux, you can still run the tutorial by cloning the repository and running the script manually:</p>
<ol dir="auto">
<li><strong>Clone the repository</strong>:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/micahkepe/vimtutor-sequel.git"><pre>git clone https://github.com/micahkepe/vimtutor-sequel.git</pre></div>
<ol start="2" dir="auto">
<li><strong>Navigate to the repository</strong>:</li>
</ol>

<ol start="3" dir="auto">
<li><strong>Make a Copy of the Tutorial</strong>:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="cp vimtutor-sequel.txt vimtutor-sequel-copy.txt"><pre>cp vimtutor-sequel.txt vimtutor-sequel-copy.txt</pre></div>
<ol start="4" dir="auto">
<li><strong>Run Vim with the Custom Configuration</strong>:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="vim -u vimtutor-sequel.vimrc vimtutor-sequel-copy.txt"><pre>vim -u vimtutor-sequel.vimrc vimtutor-sequel-copy.txt</pre></div>
<p dir="auto">This method allows you to easily access and run the Vimtutor Sequel lessons without the need for additional installation steps.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the MIT License - see the <a href="https://github.com/micahkepe/vimtutor-sequel/blob/main/LICENSE">LICENSE</a> file for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">See <a href="https://github.com/micahkepe/vimtutor-sequel/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a> for information on how to contribute to <code>vimtutor-sequel</code>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Hanon Pro – piano technique and exercises for the digital age (200 pts)]]></title>
            <link>https://furnacecreek.org/hanon/</link>
            <guid>41144826</guid>
            <pubDate>Sat, 03 Aug 2024 05:21:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://furnacecreek.org/hanon/">https://furnacecreek.org/hanon/</a>, See on <a href="https://news.ycombinator.com/item?id=41144826">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
		<div>
				<p>Hanon Pro is an app for iPhone, iPad, and Mac that offers a fresh, modern take on
						keyboard and piano technique and exercises for the digital age. Just like health and fitness
						apps track your physical health over time, Hanon Pro does the same for piano practice. It
						enables you to get feedback on your playing, visualize trends, and track practice habits over
						time.</p>

				

				<p><img src="https://furnacecreek.org/hanon/images/feedback.png" alt="Hanon Pro - get feedback on piano playing" width="680" height="545">
				</p>

				<p>The app features a catalog of content specifically designed to look great on iPhone, iPad, and
						Mac. We design each book and score with support for responsive layouts, Dark Mode, rich
						metadata, embedded finger numbers, and more. You can listen to each piece, practice with the
						built-in metronome, and adjust the tempo.</p>

				<p><img src="https://furnacecreek.org/hanon/images/library.png" alt="Hanon Pro - manage your music library" width="680" height="422">
				</p>

				<p>The real magic of Hanon Pro is unlocked when you connect your iPhone, iPad, or Mac with a MIDI
						keyboard or piano over a Bluetooth or USB connection. Hanon Pro's intelligence engine can
						analyze your playing, including accuracy, tempo, and dynamics, and even turn pages as you play.
						To help make piano practice a habit, the app lets you sign up for daily practice reminder
						notifications and earn achievements over time with built-in Game Center integration.</p>

				<h3>All Features</h3>

				<div id="featureGrid">
					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/storefront.svg"></span><br><span>Music Store</span></h3>
						<p>Browse our catalog of music scores, each designed with support for interactive features like
							automatic page turning and computer aided evaluation.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/cap.svg"></span><br><span>Repertoire</span></h3>
						<p>Obtain content designed to improve keyboard and piano technique such as scales, technical
							exercises, and repertoire used by exam boards.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/star.svg"></span><br><span>Explore</span></h3>
						<p>Explore music by composer, key, and even exam boards like ABRSM, RCM, and Trinity.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/info.svg"></span><br><span>Metadata</span></h3>
						<p>View rich metadata about each work, including description, composer, key, year of
							composition, and more.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/books.svg"></span><br><span>Library</span></h3>
						<p>Search, sort, and filter your library to find the scores you want.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/cloud.svg"></span><br><span>iCloud Sync</span></h3>
						<p>Sync your music library with your iPhone, iPad, and Mac over iCloud.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/metronome.svg"></span><br><span>Metronome</span></h3>
						<p>Practice with the built-in metronome and adjust the tempo of any score.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/play.svg"></span><br><span>Playback</span></h3>
						<p>Listen to any piece in the catalog with our realistic playback engine.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/piano.svg"></span><br><span>MIDI Support</span></h3>
						<p>Pair the app with a MIDI keyboard or piano, either wirelessly over Bluetooth or with a USB-C
							cable.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/checklist.svg"></span><br><span>Evaluation</span></h3>
						<p>Evaluate your performance and receive feedback on accuracy, tempo, rhythm, style, and more.
						</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/bars.svg"></span><br><span>Charts and Graphs</span></h3>
						<p>View charts and graphs that visualize how your progress improves over time.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/progress.svg"></span><br><span>Progress Tracking</span></h3>
						<p>Track daily practice habits, including time spent practicing.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/trophy.svg"></span><br><span>Game Center</span></h3>
						<p>Unlock achievements as you practice with Game Center integration.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/pages.svg"></span><br><span>Page Turning</span></h3>
						<p>Enjoy automatic and hands-free page turning as you play.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/alert.svg"></span><br><span>Practice Reminders</span></h3>
						<p>Sign up to receive daily practice reminder notifications and customize the time.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/night.svg"></span><br><span>Dark Mode</span></h3>
						<p>Invert scores in Dark Mode to reduce brightness when practicing at night.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/customizable.svg"></span><br><span>Customizability</span>
						</h3>
						<p>Customize the app to your liking with control over metronome volume, finger numbers, playback
							options, MIDI settings, and more.</p>
					</div>

					<div>
						<h3><span><img src="https://furnacecreek.org/static/sf/native.svg"></span><br><span>Native App</span></h3>
						<p>Hanon Pro is a truly native app for iPhone, iPad, and Mac, built with technologies like
							SwiftUI, Swift Charts, Core Audio, Core MIDI, iCloud, Game Center, and more.</p>
					</div>
				</div>

				<div>
					<h3>Content</h3>
					<p>Our music catalog features content commonly used to improve technique such as scales, chords,
						Hanon exercises, Schmitt exercises, works by Bach, Beethoven, Krebs, Mozart, and more. If you'd
						like to request a score, you can do so directly in the app!</p>
				</div>

				<div>
					<h3>Pricing</h3>
					<p>We're committed to maintaining Hanon Pro for years to come. However, it's a niche product and
						each score and book needs to be prepared for the interactive capabilities of the app such as
						automatic page turning, responsive layout, and computer aided evaluation. In other words, it's
						not just a PDF. In order to sustain the development of Hanon Pro, we charge for the content in
						our catalog.</p>
				</div>

				<p><img src="https://furnacecreek.org/hanon/images/progress.png" alt="Hanon Pro - track your progress over time" width="680" height="545">
				</p>

				<div>
					<h3>Reviews</h3>
					<p>★★★★★</p>
					<p><em>Since trying Hanon Pro, I've
							practiced playing the piano every day this week, which almost never happened before. The
							gamification of practicing piano technique with feedback, charts, achievements, and
							reminders keeps me coming back. Looking forward to seeing more content over time!</em></p>
					<p>- App Store Review</p>
				</div>

				

				<p>Hanon Pro is compatible with iOS 17.<br> *Requires a Bluetooth or USB MIDI
					keyboard or piano (sold separately)</p>

				




			</div>
	</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[p5.js (337 pts)]]></title>
            <link>https://p5js.org/</link>
            <guid>41144755</guid>
            <pubDate>Sat, 03 Aug 2024 04:53:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://p5js.org/">https://p5js.org/</a>, See on <a href="https://news.ycombinator.com/item?id=41144755">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Lauren Lee McCarthy reading the Processing Community Catalog. Photo credit: Maximo Xtravaganza.</p><p>Coding Club for people aged 50+ in Korea, led by Inhwa Yeom.</p><p>Qianqian Ye introducing 600+ p5.js contributors at p5.js Community Salon. Photo credit: Ziyuan Lin.</p><p>p5.js workshop at CC Fest NYC at ITP-NYU in November 2018.</p><p>p5.js workshop at Tunapanda Institute in Nairobi. Photo credit: Tunapanda Institute.</p><p>p5.js will not add any new features except those that increase access.</p><p>p5.js Contributors Conference 2015.</p><p>p5.js Contributors Conference 2019.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Researchers develop treatment that can kill glioblastoma cells in brain pathway (137 pts)]]></title>
            <link>https://medicalxpress.com/news/2024-08-therapy-treatment-glioblastoma-cells-newly.html</link>
            <guid>41144021</guid>
            <pubDate>Sat, 03 Aug 2024 01:24:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medicalxpress.com/news/2024-08-therapy-treatment-glioblastoma-cells-newly.html">https://medicalxpress.com/news/2024-08-therapy-treatment-glioblastoma-cells-newly.html</a>, See on <a href="https://news.ycombinator.com/item?id=41144021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									    
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2015/glioblastoma.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2015/glioblastoma.jpg" data-sub-html="Glioblastoma (histology slide). Credit: Wikipedia/CC BY-SA 3.0">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2015/glioblastoma.jpg" alt="glioblastoma" title="Glioblastoma (histology slide). Credit: Wikipedia/CC BY-SA 3.0" width="500" height="376">
             <figcaption>
                Glioblastoma (histology slide). Credit: Wikipedia/CC BY-SA 3.0
            </figcaption>        </figure>
    </div><p>A new pathway that is used by cancer cells to infiltrate the brain has been discovered by a team of Canadian and American research groups led by the Singh Lab at McMaster University. The research also reveals a new therapy that shows promise in blocking and killing these tumors.</p>

                                        
                                                                                  
                                         

                                                                                                                                    <p>The research, published in <i>Nature Medicine</i> on Aug. 2, 2024, offers new hope and potential treatments for glioblastoma, the most aggressive form of brain cancer.</p>
<p>With existing treatments like surgery, <a href="https://medicalxpress.com/tags/radiation+therapy/" rel="tag">radiation therapy</a> and chemotherapy, the tumors often return, and patient survival is limited to only a few months. With this new treatment, the returning cancer cells were destroyed at least 50% of the time in two of the three diseases tested in preclinical animal models.</p>
<p>To discover the pathway cancer cells use to infiltrate the brain, researchers used large-scale gene editing technology to compare gene dependencies in glioblastoma when it was initially diagnosed and after it returned following standard treatments. By doing this, researchers discovered a new pathway used for axonal guidance—a signaling axis that helps establish normal brain architecture—that can become overrun by cancer cells.</p>
<p>"In glioblastoma, we believe that the tumor hijacks this signaling pathway and uses it to invade and infiltrate the brain," says co-senior author Sheila Singh, professor with McMaster's Department of Surgery and director of the Center for Discovery in Cancer Research. The research was also co-led by Jason Moffat, head of the Genetics and Genome Biology program at The Hospital for Sick Children (SickKids).</p>
<p>"If we can block this pathway, the hope is that we can block the invasive spread of glioblastoma and kill tumor cells that cannot be removed surgically," says Singh.</p>

                                                                                                                                                         
                                                                                                                                                                                                <h2>Promising new therapeutic</h2>
<p>To stop the invasion of cancer cells, researchers targeted the hijacked signaling pathway using different strategies including a drug developed by John Lazo's group at the University of Virginia, and also by developing a <a href="https://medicalxpress.com/tags/new+therapy/" rel="tag">new therapy</a> with help from Kevin Henry and Martin Rossotti at the National Research Council Canada using CAR T cells to target the pathway in the brain.</p>
<p>They honed in on a protein called Roundabout Guidance Receptor 1 (ROBO1) that helps guide certain cells, similar to a GPS.</p>
<p>"We created a type of cell therapy where cells are taken from a patient, edited and then put back in with a new function. In this case, the CAR T cells were genetically edited to have the knowledge and ability to go and find ROBO1 on <a href="https://medicalxpress.com/tags/tumor+cells/" rel="tag">tumor cells</a> in animal models," says lead author Chirayu Chokshi, a former Ph.D. student who worked alongside Singh at McMaster University.</p>
<p>Singh and Chokshi say the treatment can also apply to other invasive brain cancers. In the study, researchers examined models for three different types of cancer including adult glioblastoma, adult lung-to-brain metastasis, and pediatric medulloblastoma. In all three models, treatment led to a doubling of survival time. In two of the three diseases, it led to tumor eradication in at least 50% of the mice.</p>

                                                                                                                                            <p>"In this study, we present a new CAR T therapy that is showing very promising preclinical results in multiple malignant <a href="https://medicalxpress.com/tags/brain/" rel="tag">brain</a> cancer models, including recurrent glioblastoma. We believe our new CAR T therapy is poised for further development and clinical trials," Singh says.</p>
<p>Work on the study was performed with samples derived from patients treated by neurosurgeons with Hamilton Health Sciences. Proteomics discovery which helped to elucidate the new glioblastoma targets was done in collaboration with Thomas Kilinger at Princess Margaret Cancer Center and University of Toronto.</p>
<p>The research was made possible through collaboration with the National Research Council Canada, University of Virginia, University of Pittsburgh and the Princess Margaret Cancer Center.</p>

                                                                                                                                                                            
                                        											<div>
												                                                    <p><strong>More information:</strong>
                                                    <i>Nature Medicine</i> (2024). <a data-doi="1" href="https://dx.doi.org/10.1038/s41591-024-03138-9" target="_blank">DOI: 10.1038/s41591-024-03138-9</a>
																								
																								</p>
																							</div>
                                        											
																					
                                                                                                                        
                                        <!-- print only -->
                                        <div>
                                            <p><strong>Citation</strong>:
                                                 Researchers develop promising therapy treatment that can kill glioblastoma cells in newly-discovered brain pathway (2024, August 2)
                                                 retrieved 3 August 2024
                                                 from https://medicalxpress.com/news/2024-08-therapy-treatment-glioblastoma-cells-newly.html
                                            </p>
                                            <p>
                                            This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
                                            part may be reproduced without the written permission. The content is provided for information purposes only.
                                            </p>
                                        </div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The future of kdb+? (202 pts)]]></title>
            <link>https://www.timestored.com/b/the-future-of-kdb/</link>
            <guid>41143764</guid>
            <pubDate>Sat, 03 Aug 2024 00:18:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.timestored.com/b/the-future-of-kdb/">https://www.timestored.com/b/the-future-of-kdb/</a>, See on <a href="https://news.ycombinator.com/item?id=41143764">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-111834">
				
				<p> July 24th, 2024 by admin </p>			
				<p>It’s been 2 years since I worked full time in kdb+ but people seem to always want to talk to me about kdb+ and where I think it’s going, so to save rehashing the same debates I’m going to put it here and refer to it in future. Please leave a comment if you want and I will reply.</p>
<p>Let’s first look at the use cases for kdb+, then consider the alternatives, then which I think will win for each use-case and why.</p>
<h2>Use Cases</h2>
<p>A. <strong>Historical market data storage and analysis</strong>. – e.g. MS Horizon, Citi CloudKDB, UBS Krypton (3 I worked on).<br>
B. <strong>Local quant analysis</strong> – e.g. Liquidity analysis, PnL analysis, profitability per client.<br>
C. <strong>Real-time Streaming Calcuation Engines</strong> – e.g. Streaming VWAP, Streaming TCA…<br>
D. <strong>Distributed Computing</strong> – e.g. Margin calculations for stock portfolios or risk analysis. Spread data out, perform costly calcs, recombine.</p>
<h2>Alternatives</h2>
<h3>Historical Market Data – kdb+ Alternatives</h3>
<p>A large number of users want to query big data to get minute bars, perform asof joins or more advanced time-series analysis.</p>
<ul>
<li>New Database Technologies – Clickhouse, QuestDB.</li>
<li>Cloud Vendors – Bigquery / redshift</li>
<li>Market Data as a Service</li>
</ul>
<p>Let me tell you three secrets, 1. Most users don’t need the “speed” of kdb+. 2. Most internal bank platforms don’t fully unleash the speed of kdb+. 3. The competitors are now fast enough. I mean clickbench are <a href="https://www.timestored.com/data/time-series-database-benchmarks">totally transparent on benchmarking.</a>.</p>
<p><b>Likely Outcome: – Kdb+ can hold their existing clients</b> but haven’t and won’t get the 2nd tier firms as they either want cloud native or something else. The previous major customers for this had to invest heavily to build their own platform. As far as I’m hearing the kdb cloud platform still needs work.</p>
<h3>Local Quant Analysis – Alternatives</h3>
<ul>
<li><strong>Python </strong>– with DuckDB</li>
<li><strong>Python </strong>– with Polars</li>
<li><strong>Python </strong>– with PyKX</li>
<li><strong>Python </strong>– with dataframe/modin/….</li>
</ul>
<p>Now I’m exaggerating slightly but the local quant analysis game is over and everyone has realised Python has won. The only question is who will provide the speedy add-on. In one corner we have widely popular free community tools that know how to generate interest at huge scale, are fast and well funded. In the other we have a niche company that never spread outside finance, wants to charge $300K to get started and has an exotic syntax.</p>
<p><b>Likely Outcome: DuckDB or Polars</b>. Why? It’s free. People at Uni will start with it and not change. Any sensible quant currently in a firm will want to use a free tool so that they are guaranteed to be able to use similar analytics at their next firm. WIthout that ability they can only go places that have kdb+ else face losing a large percentage of their skillset.</p>
<h4>Real-time Streaming / Distributed Computing</h4>
<p>These were always the less popular cases for kdb+ and never the ones that “won” the contract. The ironic thing is, combining streaming with historical data in one model is kdbs largest strength. However the few times I’ve seen it done, it’s either taken someone very experienced and skillful or it has become a mess. These messes have been so bad it’s put other parts of the firm off adopting kdb+ for other use cases.</p>
<p><b>Likely Outcome: Unsure which will win but not kdb+</b>. Kafka has won mindshare and is deployed at scale but flink/risingwave etc. are upcoming stars.</p>
<h3>Summary</h3>
<p>Kdb+ is an absolutely amazing technology but it’s about the same amazing today as it was 15 years ago when I started. In that time the world has moved on. <b>The best open source companies have stolen the best kdb+ ideas<b>:</b></b></p>
<ul>
<li>Parquet/Iceberg is basically kdb+ on disk format for optimized column storage.</li>
<li>Apache Arrow – in-memory format is kdb+ in memory column format.</li>
<li>Even Kafka log/replay/ksql concept could be viewed as similar to a tplog viewed from a certain angle.</li>
<li>QuestDB / DuckDB / Clickhouse all have asof joins</li>
</ul>
<p>Not only have the competitors learnt and taken the best parts of kdb+ but they have standardised on them. e.g. Snowflake, Dremio, Confluent, Databricks are all going to support Apache Iceberg/parquet. QuestDB / DuckDB / Python are all going to natively support parquet. This means in comparisons <b>it’s no longer KX against one competitor, it’s KX against many competitors at once</b>. If your data is parquet, you can run any of them against your data.</p>
<p>As many at KX would agree I’ve talked to them for years on issues around this and to be fair they have changed but they are not changing quick enough.<br>
They need to do four things:</p>
<ol>
<li><b>Get a free version out there that can be used for many things</b> and have an easy reasonable license for customers with less money to use.</li>
<li><b>Focus on making the core product great.</b> – For years we had Delta this and now it’s kdb.ai. In the meantime mongodb/influxdb won huge contracts with a good database alone.</li>
<li><b>Reduce the steep learning curve</b>. Make kdb+ easier to learn by even changing the language and technology if need be.</li>
<li><b>You must become more popular else it’s a slow death</b></li>
</ol>
<p>This is focussing on the core tech product.<br>
Looking more widely at their financials and other huge costs/initiatives such as AI and massive marketing spending, wider changes at the firm should also be considered.</p>
<p>Author: <a href="https://www.linkedin.com/in/justryanhamilton/">Ryan Hamilton</a></p>
				
								<!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="https://www.timestored.com/b/the-future-of-kdb/"
    dc:identifier="https://www.timestored.com/b/the-future-of-kdb/"
    dc:title="The Future of kdb+?"
    trackback:ping="https://www.timestored.com/b/the-future-of-kdb/trackback/" />
</rdf:RDF> -->
				
				
				
			</div></div>]]></description>
        </item>
    </channel>
</rss>