<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 12 Oct 2023 01:00:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[US citizens with permanent disabilities get free lifetime pass to National Parks (312 pts)]]></title>
            <link>https://www.nps.gov/subjects/accessibility/interagency-access-pass.htm</link>
            <guid>37850930</guid>
            <pubDate>Wed, 11 Oct 2023 22:08:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nps.gov/subjects/accessibility/interagency-access-pass.htm">https://www.nps.gov/subjects/accessibility/interagency-access-pass.htm</a>, See on <a href="https://news.ycombinator.com/item?id=37850930">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="cs_control_6690712">
<figure>
<picture>
<source type="image/png" srcset="https://www.nps.gov/subjects/accessibility/images/2023-Access-Pass_front_2.png">
<img alt="Accessibility Pass for Parks" title="2023 Access Pass_front" src="https://www.nps.gov/subjects/accessibility/images/2023-Access-Pass_front_2.png">
</picture>
<figcaption>America the Beautiful-The National Parks and Federal Recreational Lands Access Pass </figcaption>
</figure><!-- floating-image alignment  -->
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{115}" paraid="2111427410"><strong>What is the America the Beautiful- The National Parks and Federal Recreational Lands Access Pass? </strong></p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{125}" paraid="1717004537">The Interagency Access Pass is part of the America the Beautiful – The National Parks and Federal Recreational Lands Pass series and is available free for US citizens or permanent residents with permanent disabilities.  </p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{143}" paraid="1591179836"><strong>Who is eligible to get an Interagency Access Pass? </strong></p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{149}" paraid="527273195">The Interagency Access Pass may be issued to US citizens or permanent residents of any age that have been medically determined to have a permanent disability (does not have to be a 100% disability) that severely limits one or more major life activities.  </p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{167}" paraid="893907869"><strong>What documentation do I need to show for proof of eligibility?  </strong></p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{173}" paraid="146757578">Along with a valid photo ID such as a US passport, driver’s license, or state-issued ID, applicants must provide documentation of permanent disability with one (1) of the following:  </p>
<ul>
<li paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{191}" paraid="1093614014">A statement by a licensed physician (Statement must include that the individual has a PERMANENT disability, that it limits one or more aspects of their daily life, and the nature of those limitations.) </li>
<li paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{191}" paraid="1093614014">A document issued by federal agency such as the Veteran's Administration, Social Security Disability Income or, Supplemental Security Income </li>
<li paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{200}" paraid="832018928">A document issued by a state agency such as a vocational rehabilitation agency. </li>
</ul>
<p aria-level="2" paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{228}" paraid="264344596" role="heading"><strong>Where can I get an Interagency Access Pass? </strong></p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{234}" paraid="1534541633"><u>Get a Pass in Person</u> </p>
<p paraeid="{92ce2bb7-bf6e-4b2d-ac8d-c58fa5831a98}{254}" paraid="1254792940">You can get an Interagency Access Pass in person at a federal recreation site. Please be aware that passes are not available at all national park sites. Review the <a href="https://www.nps.gov/planyourvisit/pickup-pass-locations.htm" id="https://www.nps.gov/planyourvisit/pickup-pass-locations.htm|">Places to Get Interagency Passes</a> to find a location. </p>
<p aria-level="3" paraeid="{a574d854-7582-4b56-8df9-f782cc7d19eb}{48}" paraid="580377085" role="heading"><u>Get a Pass Online </u></p>
<p paraeid="{a574d854-7582-4b56-8df9-f782cc7d19eb}{56}" paraid="1818538870">You can also get an Interagency Access Pass online through the USGS Online Store or, through the mail using an application form (Note: While the pass itself is free, there is a shipping and processing cost to get a pass online or through the mail). </p>
<p paraeid="{a574d854-7582-4b56-8df9-f782cc7d19eb}{98}" paraid="499885614"><a href="https://store.usgs.gov/access-pass" id="https://store.usgs.gov/access-pass|">Interagency Access Passes are available online. </a></p>
<p paraeid="{a574d854-7582-4b56-8df9-f782cc7d19eb}{111}" paraid="738692707"><a href="https://store.usgs.gov/faq#Access-Pass" id="https://store.usgs.gov/faq#Access-Pass|">Frequently Asked Questions about the Interagency Access Pass </a></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Grind – A first person shooter for Amiga 500 (125 pts)]]></title>
            <link>https://www.indieretronews.com/2023/10/grind-first-person-shooter-for-amiga.html</link>
            <guid>37850265</guid>
            <pubDate>Wed, 11 Oct 2023 21:06:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.indieretronews.com/2023/10/grind-first-person-shooter-for-amiga.html">https://www.indieretronews.com/2023/10/grind-first-person-shooter-for-amiga.html</a>, See on <a href="https://news.ycombinator.com/item?id=37850265">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-4334126658415320957" itemprop="articleBody">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEicybcxLJAPSbuQyK3nzjBKqm0v9Katv4cgQbRDw6tL-VXvcIBMBFuZdV78u-gb1W2AQfQxur0pWPVSoJvQhtTOAH-BeQ_A6k9Us3HXxl80oXNi6mJWePdsPeztqbeCzL-hurHBPdaMHOOZu4PgVkYPbTPUwWa6bygnUQsS8GYj_DIc3mM8DXNPbFbVF5A/s1103/GRIND.jpg"><img data-original-height="796" data-original-width="1103" height="462" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEicybcxLJAPSbuQyK3nzjBKqm0v9Katv4cgQbRDw6tL-VXvcIBMBFuZdV78u-gb1W2AQfQxur0pWPVSoJvQhtTOAH-BeQ_A6k9Us3HXxl80oXNi6mJWePdsPeztqbeCzL-hurHBPdaMHOOZu4PgVkYPbTPUwWa6bygnUQsS8GYj_DIc3mM8DXNPbFbVF5A/w640-h462/GRIND.jpg" width="640"></a></p><p>'Dread' has been featured many times on Indie Retro News, as with every new update the Amiga 500 version looked better than ever with fabulous new textures and new zones to visit. Well if you're looking for more gaming news on this upcoming first person shooter, we have not only been informed that a new demo has been made available, but the latest footage and detailed press release shows that John is true to his word in bringing a Doom-like experience to the Amiga as the holy-grail of Amiga gaming! So without further-ado, here's the latest blurb about this incredible looking game.<span></span></p><p><iframe allowfullscreen="" height="366" src="https://www.youtube.com/embed/doD7hmlKun8" width="640" youtube-src-id="doD7hmlKun8"></iframe></p><p><iframe allowfullscreen="" height="366" src="https://www.youtube.com/embed/11TYIX6TRyg" width="640" youtube-src-id="11TYIX6TRyg"></iframe></p><p>'"Darkenward east' is planned to be one of the early levels in the game, taking place in a city area. The map is in it's very early stages and will be overhauled once more levels are introduced and the enemy roster gets more complete (currently there's a lack of low tier enemies and other important classes). This release in general marks the complete transition of the project in regards to its visuals and now fully embraces the Steampunk/Lovecraftian aesthetic with the addition of the new HUD and protagonist, as well as brand new, high quality Weapon designs!"&nbsp;&nbsp;</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9uzjdulEMJTcR-BV-YkdPNFS1ZeZOFlW32H6HKqvy1RCyZm2x5PVzWZ4mVNip_I61GHq299dfMaEGY1mnIxmS_9IZb4N7aHdVkGzEqPC7kgr0tmXWuLSyJjyVGyFcqdWQ3NmOcj4Q8S_SPoepkipU_2qVVf5RPN6PxT5huEQYss9KqP0dhR67BtbSxqY/s1154/Clipboard01.jpg"><img data-original-height="832" data-original-width="1154" height="462" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9uzjdulEMJTcR-BV-YkdPNFS1ZeZOFlW32H6HKqvy1RCyZm2x5PVzWZ4mVNip_I61GHq299dfMaEGY1mnIxmS_9IZb4N7aHdVkGzEqPC7kgr0tmXWuLSyJjyVGyFcqdWQ3NmOcj4Q8S_SPoepkipU_2qVVf5RPN6PxT5huEQYss9KqP0dhR67BtbSxqY/w640-h462/Clipboard01.jpg" width="640"></a></p><p>Here's a list of features still missing (and planned to be added soon) as well as other details that are to be worked next, in order to reach the 'vertical slice' short-term goal:&nbsp;</p><ul><li>Music support for the Amiga version</li><li>SFX overhaul (includes adding ambient stuff and enemy growls)</li><li>Further polish on weapon models</li><li>Complete the weapon models replacement (Chaingun and Missile-launcher are still wip - the demo only features the pistol and shotgun for now)</li><li>Add secondary weapon attacks (using RMB)</li><li>Existing enemies polishing (various high-tech details still need altering or removing from some models)</li><li>Create and add new enemy types&nbsp; &nbsp;</li><li>Complete and add 2 more levels (the previous and the next one). This step will also put to the test the newly added level progression system and pave the way for more levels to come.&nbsp;</li></ul><div><p><b>System Requirements:</b></p><div><ul><li>Amiga - ADF version:</li><li>Minimum: a500 with 512 CHIP and 512 OTHER ram</li><li>Recommended: a1200 + fast ram&nbsp;</li></ul></div></div><p><b>Other news:</b></p><p>----------</p><p>"Lately the Grind team has grown as various, well-known coders have joined to help with the game's production: Namely BSzili (known for his Amiga ports of Dark Forces, Exhumed, Blood, Shadow Warrior, Blake Stone and others) who's handling the Amiga version and coder Kabuto from the demogroup Titan, looking at a possible Mega Drive version as well! Worth noting is that this latest Patreon-only binary release also included an Atari ST version (though it's not ready for a public showcase yet as it misses key features)."&nbsp;</p><p><b>Links:</b></p><p>-----</p><p>-Grind's Patreon: <a href="https://www.patreon.com/Grind_Amiga">https://www.patreon.com/Grind_Amiga</a>&nbsp;(Demo)</p><p>-Grind's Pixelglass page: <a href="https://pixelglass.org/#grind">https://pixelglass.org/#grind</a></p><p>-Grind's Discord server: <a href="https://discord.gg/QXGQbkRCxN">https://discord.gg/QXGQbkRCxN</a></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SEC Filing – Microsoft Corporation (106 pts)]]></title>
            <link>https://microsoft.gcs-web.com/node/31951/html</link>
            <guid>37850110</guid>
            <pubDate>Wed, 11 Oct 2023 20:52:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://microsoft.gcs-web.com/node/31951/html">https://microsoft.gcs-web.com/node/31951/html</a>, See on <a href="https://news.ycombinator.com/item?id=37850110">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="block-nir-pid1962-content">
  
    
      
    <xbrl>
<!--?xml version="1.0" encoding="utf-8" ?-->


<title>8-K</title>
<meta http-equiv="Content-Type" content="text/html">

                    
                    
    <div><p>UNITED STATES</p><p>SECURITIES AND EXCHANGE COMMISSION</p><p>WASHINGTON, D.C. 20549</p> <p>FORM <span><ix:nonnumeric name="dei:DocumentType" contextref="duration_2023-10-11_to_2023-10-11">8-K</ix:nonnumeric></span></p> <p>CURRENT REPORT</p><p>PURSUANT TO SECTION 13 OR 15(D)</p><p>OF THE SECURITIES EXCHANGE ACT OF 1934</p><p>Date of Report (Date of earliest event reported) <ix:nonnumeric name="dei:DocumentPeriodEndDate" contextref="duration_2023-10-11_to_2023-10-11" format="ixt:date-monthname-day-year-en">October&nbsp;11, 2023</ix:nonnumeric></p> <p><ix:nonnumeric name="dei:EntityRegistrantName" contextref="duration_2023-10-11_to_2023-10-11">Microsoft Corporation</ix:nonnumeric></p> 
<table>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td></tr>
<tr>
<td><span><ix:nonnumeric name="dei:EntityIncorporationStateCountryCode" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:stateprovnameen">Washington</ix:nonnumeric></span></td>
<td>&nbsp;</td>
<td><span><span><ix:nonnumeric name="dei:EntityFileNumber" contextref="duration_2023-10-11_to_2023-10-11">001-37845</ix:nonnumeric></span></span></td>
<td>&nbsp;</td>
<td><span><span><ix:nonnumeric name="dei:EntityTaxIdentificationNumber" contextref="duration_2023-10-11_to_2023-10-11">91-1144442</ix:nonnumeric></span></span></td></tr>
<tr>
<td><p>(State or Other Jurisdiction</p><p>of Incorporation)</p></td>
<td>&nbsp;</td>
<td><p>(Commission</p><p>File Number)</p></td>
<td>&nbsp;</td>
<td><p>(IRS Employer</p><p>Identification No.)</p></td></tr> </tbody></table>
<table>
<tbody><tr>
<td></td>
<td></td>
<td></td></tr>
<tr>
<td><span><ix:nonnumeric name="dei:EntityAddressAddressLine1" contextref="duration_2023-10-11_to_2023-10-11">One Microsoft Way</ix:nonnumeric>, <ix:nonnumeric name="dei:EntityAddressCityOrTown" contextref="duration_2023-10-11_to_2023-10-11">Redmond</ix:nonnumeric>, <ix:nonnumeric name="dei:EntityAddressStateOrProvince" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:stateprovnameen">Washington</ix:nonnumeric></span></td>
<td>&nbsp;</td>
<td><span><ix:nonnumeric name="dei:EntityAddressPostalZipCode" contextref="duration_2023-10-11_to_2023-10-11">98052-6399</ix:nonnumeric></span></td></tr> </tbody></table><p>(<ix:nonnumeric name="dei:CityAreaCode" contextref="duration_2023-10-11_to_2023-10-11">425</ix:nonnumeric>) <span><ix:nonnumeric name="dei:LocalPhoneNumber" contextref="duration_2023-10-11_to_2023-10-11">882-8080</ix:nonnumeric></span></p><p>www.microsoft.com/investor</p><p>Check the appropriate box below if the Form <span>8-K</span> filing is intended to simultaneously satisfy the filing obligation of the registrant under any of the following provisions (see General Instruction A.2. below):</p>
<table>
<tbody><tr>
<td><span><ix:nonnumeric name="dei:WrittenCommunications" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:boolballotbox">☐</ix:nonnumeric></span></td>
<td><p>Written communications pursuant to Rule 425 under the Securities Act (17 CFR 230.425)</p></td></tr> </tbody></table>
<table>
<tbody><tr>
<td><span><ix:nonnumeric name="dei:SolicitingMaterial" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:boolballotbox">☐</ix:nonnumeric></span></td>
<td><p>Soliciting material pursuant to Rule <span>14a-12</span> under the Exchange Act (17 CFR <span>240.14a-12)</span></p></td></tr> </tbody></table>
<table>
<tbody><tr>
<td><span><ix:nonnumeric name="dei:PreCommencementTenderOffer" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:boolballotbox">☐</ix:nonnumeric></span></td>
<td><p><span>Pre-commencement</span> communications pursuant to Rule <span>14d-2(b)</span> under the Exchange Act (17 CFR <span>240.14d-2(b))</span></p></td></tr> </tbody></table>
<table>
<tbody><tr>
<td><span><ix:nonnumeric name="dei:PreCommencementIssuerTenderOffer" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:boolballotbox">☐</ix:nonnumeric></span></td>
<td><p><span>Pre-commencement</span> communications pursuant to Rule <span>13e-4(c)</span> under the Exchange Act (17 CFR <span>240.13e-4(c))</span></p></td></tr> </tbody></table><p>Securities registered pursuant to Section&nbsp;12(b) of the Act:</p>
<table>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td></tr>
<tr>
<td><p>Title of each class</p></td>
<td>&nbsp;&nbsp;</td>
<td><p>Trading&nbsp;Symbol</p></td>
<td>&nbsp;&nbsp;</td>
<td><p>Name&nbsp;of&nbsp;exchange&nbsp;on&nbsp;which&nbsp;registered</p></td></tr>
<tr>
<td><span><ix:nonnumeric name="dei:Security12bTitle" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_us-gaap-CommonStockMember">Common stock, $0.00000625 par value per share</ix:nonnumeric></span></td>
<td>&nbsp;&nbsp;</td>
<td><span><ix:nonnumeric name="dei:TradingSymbol" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_us-gaap-CommonStockMember">MSFT</ix:nonnumeric></span></td>
<td>&nbsp;&nbsp;</td>
<td><span><ix:nonnumeric name="dei:SecurityExchangeName" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_us-gaap-CommonStockMember">NASDAQ</ix:nonnumeric></span></td></tr>
<tr>
<td><span><ix:nonnumeric name="dei:Security12bTitle" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_msft-NotesThreePointOneTwoFivePercentDueDecemberSixTwentyTwentyEightMember">3.125% Notes due 2028</ix:nonnumeric></span></td>
<td>&nbsp;&nbsp;</td>
<td><span><ix:nonnumeric name="dei:TradingSymbol" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_msft-NotesThreePointOneTwoFivePercentDueDecemberSixTwentyTwentyEightMember">MSFT</ix:nonnumeric></span></td>
<td>&nbsp;&nbsp;</td>
<td><span><ix:nonnumeric name="dei:SecurityExchangeName" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_msft-NotesThreePointOneTwoFivePercentDueDecemberSixTwentyTwentyEightMember">NASDAQ</ix:nonnumeric></span></td></tr>
<tr>
<td><span><ix:nonnumeric name="dei:Security12bTitle" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_msft-NotesTwoPointSixTwoFivePercentDueMayTwoTwentyThirtyThreeMember">2.625% Notes due 2033</ix:nonnumeric></span></td>
<td>&nbsp;&nbsp;</td>
<td><span><ix:nonnumeric name="dei:TradingSymbol" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_msft-NotesTwoPointSixTwoFivePercentDueMayTwoTwentyThirtyThreeMember">MSFT</ix:nonnumeric></span></td>
<td>&nbsp;&nbsp;</td>
<td><span><ix:nonnumeric name="dei:SecurityExchangeName" contextref="duration_2023-10-11_to_2023-10-11_us-gaap-StatementClassOfStockAxis_msft-NotesTwoPointSixTwoFivePercentDueMayTwoTwentyThirtyThreeMember">NASDAQ</ix:nonnumeric></span></td></tr> </tbody></table><p>Indicate by check mark whether the registrant is an emerging growth company as defined in Rule 405 of the Securities Act of 1933 (§230.405 of this chapter) or Rule <span>12b-2</span> of the Securities Exchange Act of 1934 <span>(§240.12b-2</span> of this chapter). Emerging growth company&nbsp;<span><ix:nonnumeric name="dei:EntityEmergingGrowthCompany" contextref="duration_2023-10-11_to_2023-10-11" format="ixt-sec:boolballotbox">☐</ix:nonnumeric></span></p><p>If an emerging growth company, indicate by check mark if the registrant has elected not to use the extended transition period for complying with any new or revised financial accounting standards provided pursuant to Section&nbsp;13(a) of the Exchange Act.&nbsp;<span>☐</span></p></div> <hr> <div><p>Item 8.01. Other Information</p><p>On October&nbsp;11, 2023, Microsoft Corporation announced the receipt of Notices of Proposed Adjustment (“NOPAs”) from the Internal Revenue Service (the “IRS”) for the tax years 2004 to 2013. The NOPAs were received on September&nbsp;26, 2023. The primary issues in the NOPAs relate to intercompany transfer pricing. In the NOPAs, the IRS is seeking an additional tax payment of $28.9&nbsp;billion plus penalties and interest. As of September&nbsp;30, 2023, we believe our allowances for income tax contingencies are adequate. We disagree with the proposed adjustments and will vigorously contest the NOPAs through the IRS’s administrative appeals office and, if necessary, judicial proceedings. We do not expect a final resolution of these issues in the next 12 months.&nbsp;Based on the information currently available, we do not anticipate a significant increase or decrease to our tax contingencies for these issues within the next 12 months.</p><p>This Form <span>8-K</span> contains forward-looking statements, which are any predictions, projections or other statements about future events based on current expectations and assumptions that are subject to risks and uncertainties, which are described in our filings with the Securities and Exchange Commission. Forward-looking statements speak only as of the date they are made. Readers are cautioned not to put undue reliance on forward-looking statements, and Microsoft undertakes no duty to update any forward-looking statement to conform the statement to actual results or changes in the company’s expectations.</p><p>Item 9.01. Financial Statements and Exhibits</p><p>(d) Exhibits:</p> <div>
<table>
<tbody><tr>
<td></td>
<td></td>
<td></td></tr>
<tr>
<td>99.1</td>
<td>&nbsp;&nbsp;</td>
<td><a href="#d530324dex991.htm">Microsoft on the Issues Blog </a></td></tr>
<tr>
<td>104</td>
<td>&nbsp;&nbsp;</td>
<td>Cover Page Interactive Data File (embedded within the Inline XBRL document)</td></tr></tbody></table></div></div> <hr> <div><p>SIGNATURE</p><p>Pursuant to the requirements of the Securities Exchange Act of 1934, the registrant has duly caused this report to be signed on its behalf by the undersigned hereunto duly authorized.</p>
<table>
<tbody><tr>
<td></td>
<td></td>
<td></td></tr>
<tr>
<td></td>
<td>&nbsp;&nbsp;</td>
<td>MICROSOFT CORPORATION</td></tr>
<tr>
<td></td>
<td>&nbsp;&nbsp;</td>
<td>(Registrant)</td></tr>
<tr>
<td></td>
<td colspan="2"></td></tr>
<tr>
<td>Date: October 11, 2023</td>
<td>&nbsp;&nbsp;</td>
<td><p>/<small>S</small>/ A<small>LICE</small> L. J<small>OLLA</small></p></td></tr>
<tr>
<td></td>
<td>&nbsp;&nbsp;</td>
<td>Alice L. Jolla</td></tr>
<tr>
<td></td>
<td>&nbsp;&nbsp;</td>
<td>Corporate Vice President and Chief Accounting<br>Officer</td></tr></tbody></table></div>
</xbrl>

<title>EX-99.1</title>

                    
                    
 

<center></center>



<hr size="3">

<center><div>
 <p><span color="#666666">Microsoft on the Issues Blog – An update on our IRS tax audit </span></p>
<p><span color="#666666">By Daniel Goff, Corporate Vice President, Worldwide Tax and Customs </span></p>
<p><span color="#666666">Today, we’re sharing an update about our ongoing audit with the U.S. Internal Revenue Service (IRS), including background and context for this
specific case and what we generally expect next. </span></p> <p><span color="#666666"><b>Background on the IRS audit </b></span></p>
<p><span color="#666666">For nearly a decade, as we have previously disclosed in our financial statements, Microsoft has been working with the IRS to address questions
about how we allocated our income and expenses for tax years beginning as far back as 2004. We have changed our corporate structure and practices since the years covered by the audit, and as a result, the issues raised by the IRS are relevant to the
past but not to our current practices. </span></p> <p><span color="#666666">The IRS recently sent us a series of Notices of Proposed Adjustment (NOPAs), sharing with us
for the first time detailed information and explanations of their views about the issues in question. This marks the end of the audit covering 2004 to 2013, and the beginning of a new process to resolve these
<span>decades-old</span> issues. </span></p> <p><span color="#666666">The IRS says Microsoft owes an additional $28.9&nbsp;billion in tax for
2004 to 2013, plus penalties and interest. The IRS’s proposed adjustments do not represent a final determination. Not reflected in the proposed adjustments are taxes paid by Microsoft under the Tax Cuts and Jobs Act (TCJA), which could decrease
the final tax owed under the audit by up to $10&nbsp;billion. </span></p> <p><span color="#666666">Microsoft disagrees with these proposed adjustments and will pursue an
appeal within the IRS, a process expected to take several years. We believe we have always followed the IRS’s rules and paid the taxes we owe in the U.S. and around the world. Microsoft historically has been one of the top U.S. corporate income
taxpayers. Since 2004, we have paid over $67&nbsp;billion in taxes to the U.S. </span></p> <p><span color="#666666"><b>What the dispute is about </b></span></p>
<p><span color="#666666">The main disagreement is the way Microsoft allocated profits during this time period among countries and jurisdictions. This is commonly referred
to as transfer pricing and the IRS has established regulations that allow companies to use a specific arrangement for transfer pricing, called cost-sharing. </span></p>
<p><span color="#666666">Many large multinationals use cost-sharing because it reflects the global nature of their business. Because our subsidiaries shared in the costs
of developing certain intellectual property, under those IRS cost-sharing regulations, the subsidiaries were also entitled to the related profits. </span></p> <p><span color="#666666"><b>Next steps: Proposed adjustments and IRS Appeals </b></span></p> <p><span color="#666666">We strongly believe we have acted in accordance with IRS
rules and regulations and that our position is supported by case law. We welcome the IRS’s conclusion of its audit phase which will provide us with the opportunity to work through these issues at IRS Appeals, a separate division of the IRS
charged with resolving tax disputes. </span></p>
</div></center>



<hr size="3">

<center><div>
 <p><span color="#666666">It is important to note that the IRS Appeals process will take several years to complete, and if
we are unable to come to a direct agreement with the IRS, Microsoft will then have an opportunity to contest any unresolved issues through the courts. </span></p> <p><span color="#666666">We will continue to work with the IRS and hope to reach a mutual resolution to this issue over the coming years. We will also continue to share updates on significant developments through our public quarterly and annual reports and
financial statements, as we have through this entire process. As of September&nbsp;30, 2023, we believe our allowances for income tax contingencies are adequate. </span></p>
</div></center>




  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Obligator – An OpenID Connect server for self-hosters (121 pts)]]></title>
            <link>https://github.com/anderspitman/obligator</link>
            <guid>37848793</guid>
            <pubDate>Wed, 11 Oct 2023 18:59:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/anderspitman/obligator">https://github.com/anderspitman/obligator</a>, See on <a href="https://news.ycombinator.com/item?id=37848793">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" id="user-content-warning" dir="auto"><a href="#warning">WARNING</a></h2>
<p dir="auto">This is currently pre-release beta software. I don't recommend using it in
production at the moment. It has not yet undergone any sort of official
security review, and I am not a security expert. The plan is to arrange for a
security review before reaching 1.0.</p>
<p dir="auto">That said, testing and feedback (especially with respect to security) would be
greatly appreciated.</p>
<h2 tabindex="-1" id="user-content-introduction" dir="auto"><a href="#introduction">Introduction</a></h2>
<p dir="auto">obligator is a relatively simple and opinionated OpenID Connect (OIDC) Provider
(OP) server designed for self-hosters.</p>
<h2 tabindex="-1" id="user-content-motivation" dir="auto"><a href="#motivation">Motivation</a></h2>
<p dir="auto">There are lots of great open source OIDC servers out there (see
<a href="#comparison-is-the-thief-of-joy">comparison</a>). I made obligator because I
needed a specific combination of features I didn't find in any of the others.
Here's a brief list. See the <a href="#feature-explanation">feature explanation</a>
section for more detailed information.</p>
<ul dir="auto">
<li>Simple to deploy and manage. Static executable and either flat-file or sqlite
storage</li>
<li>Support for anonymous OAuth2 clients</li>
<li>Authenticate to multiple domains at once</li>
<li>Passwordless email login</li>
<li>Configurable at runtime with an API</li>
<li>Support for <a href="https://doc.traefik.io/traefik/middlewares/http/forwardauth/" rel="nofollow">forward auth</a></li>
<li>Support for <a href="https://www.authelia.com/integration/trusted-header-sso/introduction/" rel="nofollow">trusted headers</a></li>
<li>Support for upstream social login providers (GitLab, GitHub, Google, etc)</li>
</ul>
<h2 tabindex="-1" id="user-content-design" dir="auto"><a href="#design">Design</a></h2>
<p dir="auto">The overarching philosophy of obligator is that identities are built on email.
Email isn't perfect, but it's the globally unique federated identity we have
that works today.</p>
<p dir="auto">Thus the purpose of obligator is to validate that a user controls an email
address as simply as possible, and communicate that to the application the
user is attempting to log in to. Validation can either be done directly
through SMTP, or delegated to upstream OIDC (and some plain OAuth2) providers.</p>
<h2 tabindex="-1" id="user-content-running-it" dir="auto"><a href="#running-it">Running it</a></h2>
<p dir="auto">Here's a fairly complete JSON storage file (<code>obligator_storage.json</code>). Note
that I call it "storage" and not "config" because it's not static, and more
like a simple database. obligator will update it at runtime if new values are
provided through the API.</p>
<div dir="auto" data-snippet-clipboard-copy-content="{
  &quot;root_uri&quot;: &quot;https://example.com&quot;,
  &quot;login_key_name&quot;: &quot;obligator_login_key&quot;,
  &quot;oauth2_providers&quot;: [
    {
      &quot;id&quot;: &quot;google&quot;,
      &quot;name&quot;: &quot;Google&quot;,
      &quot;uri&quot;: &quot;https://accounts.google.com&quot;,
      &quot;client_id&quot;: &quot;<google oauth2 client_id>&quot;,
      &quot;client_secret&quot;: &quot;<google oauth2 client_secret>&quot;,
      &quot;openid_connect&quot;: true
    },
    {
      &quot;id&quot;: &quot;lastlogin&quot;,
      &quot;name&quot;: &quot;LastLogin.io&quot;,
      &quot;uri&quot;: &quot;https://lastlogin.io&quot;,
      &quot;client_id&quot;: &quot;https://example.com&quot;,
      &quot;client_secret&quot;: &quot;&quot;,
      &quot;openid_connect&quot;: true
    }
  ],
  &quot;smtp&quot;: {
    &quot;server&quot;: &quot;smtp.fastmail.com&quot;,
    &quot;username&quot;: &quot;<smtp-username>&quot;,
    &quot;password&quot;: &quot;<smtp-password>&quot;,
    &quot;port&quot;: 587,
    &quot;sender&quot;: &quot;auth@example.com&quot;,
    &quot;sender_name&quot;: &quot;Example&quot;
  },
  &quot;jwks&quot;: &quot;<generated at first startup if empty>&quot;,
  &quot;users&quot;: [
    {
      &quot;email&quot;: &quot;user1@example.com&quot;
    },
    {
      &quot;email&quot;: &quot;user2@example.com&quot;
    }
  ],
  &quot;public&quot;: false
}"><pre>{
  <span>"root_uri"</span>: <span><span>"</span>https://example.com<span>"</span></span>,
  <span>"login_key_name"</span>: <span><span>"</span>obligator_login_key<span>"</span></span>,
  <span>"oauth2_providers"</span>: [
    {
      <span>"id"</span>: <span><span>"</span>google<span>"</span></span>,
      <span>"name"</span>: <span><span>"</span>Google<span>"</span></span>,
      <span>"uri"</span>: <span><span>"</span>https://accounts.google.com<span>"</span></span>,
      <span>"client_id"</span>: <span><span>"</span>&lt;google oauth2 client_id&gt;<span>"</span></span>,
      <span>"client_secret"</span>: <span><span>"</span>&lt;google oauth2 client_secret&gt;<span>"</span></span>,
      <span>"openid_connect"</span>: <span>true</span>
    },
    {
      <span>"id"</span>: <span><span>"</span>lastlogin<span>"</span></span>,
      <span>"name"</span>: <span><span>"</span>LastLogin.io<span>"</span></span>,
      <span>"uri"</span>: <span><span>"</span>https://lastlogin.io<span>"</span></span>,
      <span>"client_id"</span>: <span><span>"</span>https://example.com<span>"</span></span>,
      <span>"client_secret"</span>: <span><span>"</span><span>"</span></span>,
      <span>"openid_connect"</span>: <span>true</span>
    }
  ],
  <span>"smtp"</span>: {
    <span>"server"</span>: <span><span>"</span>smtp.fastmail.com<span>"</span></span>,
    <span>"username"</span>: <span><span>"</span>&lt;smtp-username&gt;<span>"</span></span>,
    <span>"password"</span>: <span><span>"</span>&lt;smtp-password&gt;<span>"</span></span>,
    <span>"port"</span>: <span>587</span>,
    <span>"sender"</span>: <span><span>"</span>auth@example.com<span>"</span></span>,
    <span>"sender_name"</span>: <span><span>"</span>Example<span>"</span></span>
  },
  <span>"jwks"</span>: <span><span>"</span>&lt;generated at first startup if empty&gt;<span>"</span></span>,
  <span>"users"</span>: [
    {
      <span>"email"</span>: <span><span>"</span>user1@example.com<span>"</span></span>
    },
    {
      <span>"email"</span>: <span><span>"</span>user2@example.com<span>"</span></span>
    }
  ],
  <span>"public"</span>: <span>false</span>
}</pre></div>
<p dir="auto">If you're already using docker, it's the easiest way to get started with
obligator:</p>
<div data-snippet-clipboard-copy-content="mkdir obligator_docker/
cp obligator_storage.json obligator_docker/

docker run --user $(id -u):$(id -g) --rm -it -v $PWD/obligator_docker:/data -v $PWD/obligator_docker:/api -p 1616:1616 anderspitman/obligator:latest -storage-dir /data -api-socket-dir /api -root-uri example.com -port 1616"><pre><code>mkdir obligator_docker/
cp obligator_storage.json obligator_docker/

docker run --user $(id -u):$(id -g) --rm -it -v $PWD/obligator_docker:/data -v $PWD/obligator_docker:/api -p 1616:1616 anderspitman/obligator:latest -storage-dir /data -api-socket-dir /api -root-uri example.com -port 1616
</code></pre></div>
<p dir="auto">You can also download static executables for various platforms from the
<a href="https://github.com/anderspitman/obligator/releases">releases</a> page.</p>
<h2 tabindex="-1" id="user-content-using-the-api" dir="auto"><a href="#using-the-api">Using the API</a></h2>
<p dir="auto">Currently the API is only offered through unix sockets. This reduces the
chance that it accidentally gets exposed, which is important because
it's not authenticated in any way.</p>
<p dir="auto">There's not any documentation, and the API is in flux, so refer to the
<a href="https://github.com/anderspitman/obligator/blob/master/api.go">source code</a> for usage.</p>
<p dir="auto">Here's an example assuming you ran the docker command above:</p>
<div data-snippet-clipboard-copy-content="curl --unix obligator_docker/obligator_api.sock dummy-domain/oauth2-providers"><pre><code>curl --unix obligator_docker/obligator_api.sock dummy-domain/oauth2-providers
</code></pre></div>
<p dir="auto">See <a href="https://superuser.com/q/834307" rel="nofollow">here</a> for more info on using curl over unix sockets.</p>
<h2 tabindex="-1" id="user-content-feature-explanation" dir="auto"><a href="#feature-explanation">Feature explanation</a></h2>
<h2 tabindex="-1" id="user-content-anonymous-oauth2-clients" dir="auto"><a href="#anonymous-oauth2-clients">Anonymous OAuth2 clients</a></h2>
<p dir="auto">Normally in OAuth2 (and therefore OIDC), an app (client) is required to
pre-register with the provider. This can create a lot of friction, especially
if you're self-hosting an open source application. App developers are forced to
either share a single client ID for all their users (and share their
<code>client secret</code>, which essentially makes it pointless), or each user must
separately register their instance.</p>
<p dir="auto">Instead, obligator takes essentially the approach described <a href="https://aaronparecki.com/2018/07/07/7/oauth-for-the-open-web" rel="nofollow">here</a>. Any
OAuth2 client can anonymously authenticate with an obligator instance, with the
<code>client_id</code> equal to the domain of the client, and <code>client_secret</code> left blank.
Security is maintained through the following means:</p>
<ul dir="auto">
<li>Only approved email addresses are permitted unless <code>public: true</code> is set in
the config.</li>
<li>The <code>client_id</code> URI must be a prefix of the <code>redirect_uri</code>, and the
<code>client_id</code> is displayed to the user when consenting to the login. This
guarantees that the user approves the ID token to be sent to the domain
shown. Note that this can actually be more secure than pre-registration.
There have been attacks in <a href="https://duo.com/blog/gmail-oauth-phishing-goes-viral" rel="nofollow">the past</a> where users were tricked into
authorizing apps because the pre-registered information looked convincing. By
forcing the user to decide whether they trust the actual domain where the ID
token will be sent, and not displaying any sort of logo which can be faked,
security is improved.</li>
</ul>
<h2 tabindex="-1" id="user-content-multi-domain-authentication" dir="auto"><a href="#multi-domain-authentication">Multi-domain authentication</a></h2>
<p dir="auto">Have you ever noticed when you login to Gmail on a new computer that you're
also automatically logged in to YouTube? How does this work when Gmail is on
google.com and youtube.com doesn't have any access to the cookies or
localstorage of google.com?</p>
<p dir="auto">The <a href="https://stackoverflow.com/a/19929304/943814" rel="nofollow">answer</a> is that when you log in on accounts.google.com, it makes a
quick redirect to youtube.com with a URL parameter to also set up the cookies
there. I also want this functionality for all the domains protected by my OIDC
server so I'm building it into obligator.</p>
<h2 tabindex="-1" id="user-content-passwordless-email-login" dir="auto"><a href="#passwordless-email-login">Passwordless email login</a></h2>
<p dir="auto">In line with the philosophy above, email reigns supreme in obligator. Since
passwords are relatively difficult to use securely, the way to add an email
identity is to send a confirmation code to the email address.</p>
<h2 tabindex="-1" id="user-content-demo" dir="auto"><a href="#demo">Demo</a></h2>
<p dir="auto">There's a public instance of obligator running at <a href="https://lastlogin.io/" rel="nofollow">https://lastlogin.io</a>
(discovery doc at <a href="https://lastlogin.io/.well-known/openid-configuration" rel="nofollow">https://lastlogin.io/.well-known/openid-configuration</a>). You
can use it with any OIDC client. Just set the <code>client_id</code> to a prefix of the
<code>redirect_uri</code> when making the authorization request. I like to use
<a href="https://openidconnect.net/" rel="nofollow">https://openidconnect.net/</a> for ad-hoc testing. The official <a href="https://www.certification.openid.net/login.html" rel="nofollow">OpenID conformance
suite</a> is also excellent.</p>
<h2 tabindex="-1" id="user-content-comparison-is-the-thief-of-joy" dir="auto"><a href="#comparison-is-the-thief-of-joy">Comparison is the thief of joy</a></h2>
<p dir="auto">Software is rarely about right vs wrong, but rather tradeoffs. This table is
intended to help compare tradeoffs of different servers. It's also very
incomplete and probably incorrect in many cases. If you have a correction,
please submit an issue or leave a comment on the Google sheet <a href="https://docs.google.com/spreadsheets/d/16Ya5KsmEpczTmoTk5J-1e2MOyuUqXIiPuj7rPfPrHAI/edit?usp=sharing" rel="nofollow">here</a> which
is where it's generated from.</p>
<table>
<thead>
<tr>
<th></th>
<th><a href="https://github.com/anderspitman/obligator">obligator</a></th>
<th><a href="https://www.authelia.com/" rel="nofollow">Authelia</a></th>
<th><a href="https://goauthentik.io/" rel="nofollow">Authentik</a></th>
<th><a href="https://www.keycloak.org/" rel="nofollow">KeyCloak</a></th>
<th><a href="https://github.com/vouch/vouch-proxy">Vouch</a></th>
<th><a href="https://github.com/oauth2-proxy/oauth2-proxy">oauth2-proxy</a></th>
<th><a href="https://dexidp.io/" rel="nofollow">Dex</a></th>
<th><a href="https://www.ory.sh/hydra/" rel="nofollow">Ory Hydra</a></th>
<th><a href="https://zitadel.com/" rel="nofollow">Zitadel</a></th>
<th><a href="https://casdoor.org/" rel="nofollow">Casdoor</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>Simple</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Anonymous clients</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>Multi-domain auth</td>
<td>✅ (planned)</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Passwordless email login</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❓</td>
</tr>
<tr>
<td>HTTP API</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Forward auth</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❓</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Trusted header auth</td>
<td>✅ (planned)</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Upstream OIDC/OAuth2</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>SAML</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>LDAP</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>MFA</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Standalone reverse proxy</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Admin GUI</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
<tr>
<td>Language</td>
<td>Go</td>
<td>Go</td>
<td>Python</td>
<td>Java</td>
<td>Go</td>
<td>Go</td>
<td>Go</td>
<td>Go</td>
<td>Go</td>
<td>Go</td>
</tr>
<tr>
<td>Dependencies</td>
<td>1</td>
<td>49</td>
<td>54</td>
<td>❓</td>
<td>16</td>
<td>36</td>
<td>36</td>
<td>58</td>
<td>81</td>
<td>68</td>
</tr>
<tr>
<td>Lines of code</td>
<td>~2500</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
<td>❓</td>
</tr>
</tbody>
</table>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Awareness at Death (129 pts)]]></title>
            <link>https://community.macmillanlearning.com/t5/talk-psych-blog/awareness-at-death/ba-p/19410</link>
            <guid>37848632</guid>
            <pubDate>Wed, 11 Oct 2023 18:48:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://community.macmillanlearning.com/t5/talk-psych-blog/awareness-at-death/ba-p/19410">https://community.macmillanlearning.com/t5/talk-psych-blog/awareness-at-death/ba-p/19410</a>, See on <a href="https://news.ycombinator.com/item?id=37848632">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text" id="bodyDisplay">
			
				
					
					
						<p>Each year, millions of people, including half a million <a href="https://www.sca-aware.org/sca-news/highlights-of-2023-sudden-cardiac-arrest-statistics" target="_blank" rel="noopener nofollow noreferrer">Americans</a>, experience cardiac arrest. With no discernible heartbeat, breathing, or brain activity, they have experienced the medical definition of death, notes <a href="https://nyulangone.org/doctors/1467610337/sam-parnia" target="_blank" rel="noopener nofollow noreferrer">Sam Parnia</a>, the NYU Medical Center’s director of cardiopulmonary resuscitation research.</p><p>Yet, with CPR, some 10 percent survive. Moreover, in Parnia-led <a href="https://pubmed.ncbi.nlm.nih.gov/25301715/" target="_blank" rel="noopener nofollow noreferrer">interviews</a> of 2060 survivors, about 1 in 10 recalled a “transformative” death experience, which often involved a peaceful out-of-body experience of being drawn toward a light. Two percent recalled “‘seeing’ and ‘hearing’ actual events related to their resuscitation.”</p><p><span image-alt="images with man floating skyward and with man walking through tunnel toward light"><img src="https://community.macmillanlearning.com/t5/image/serverpage/image-id/5635i6436190F054CFBDF/image-size/large?v=v2&amp;px=999" role="button" title="Near Death.jpg" alt="Near Death.jpg" li-image-url="https://community.macmillanlearning.com/t5/image/serverpage/image-id/5635i6436190F054CFBDF?v=v2" li-image-display-id="'5635i6436190F054CFBDF'" li-message-uid="'19410'" li-messages-message-image="true" li-bindable="" tabindex="0" li-bypass-lightbox-when-linked="true" li-use-hover-links="false"></span></p><p>Anticipating the next steps in his death-experience research, Parnia invited a dozen of us psychological and medical researchers for a day-long research consultation in 2019. There we offered advice regarding his plans for two unprecedented further studies of recalled experiences of death.</p><p>In the first study, just <span>published</span>, a cardiac arrest at one of 21 participating hospitals alerted a trained researcher to rush to the patient with a small equipment bag. Without interfering with the resuscitation, the researcher attached an EEG recording cap and headphones, then activated a tablet computer.</p><p>Across 567 cardiac arrests—defined as no heartbeat or respiration—53 patients (9.3 percent) survived. Twenty-eight did so with sufficient health to be available for volunteer interviews, yielding three take-home findings.</p><p>First, <em>most of the 53 survivors initially flat-lined on the EEG, but, with continued CPR, recovered brain activity up to 60 minutes later. </em>This result not only encourages first responders to persist, it also suggests the possibility of to-be-recalled cognitive activity in comatose patients.</p><p>Second, <em>6 of the 28 interviewed survivors (21 percent) had a “transcendent recalled experience of death.” </em>This roughly accords with prior studies’ finding that 10 to 15 percent of cardiac arrest survivors report a memorable transcendent conscious experience (which Parnia labels a “recalled experience of death” rather than a “near-death experience”). The 6 survivors reported experiences such as:</p><ul><li><em>Separation from the body: </em>“I found myself above my body.” “I knew that I had died.” “I felt so light and free.” “I was high up in the ceiling of the ward looking down upon the bed.” “I could see the doctors and nurses working over me.” “I perceived and saw everything around me, like in 360 degrees.”</li><li><em>Perception of heading toward a destination:</em> “I experienced going down a tunnel towards a huge bright shining light.”</li><li><em>Reviewing and reevaluating life:</em> “I saw my entire life in great detail.” “I felt so warm, safe, protected and deeply loved.” “My body was dead for two minutes; for me, the time passed as if it were many years.”</li></ul><p>Third, <em>the study enabled an unprecedented objective test of survivors’ recall accuracy. </em>Many have wondered: Have those who recall death experiences—even of happenings during the resuscitation—experienced hallucinations, such as commonly reported with oxygen deprivation or psychedelic drugs? Or are their out-of-body reports of cardiac arrest events factual and verifiable?</p><p>Parnia and his three dozen collaborators creatively devised and implemented a plan to put claims of death-experience recollections to the test. As patients underwent CPR, a tablet computer displayed one of ten visual images, such as an animal, a person, or a monument. When later interviewed, could the 28 survivors report the image displayed during their death experience? If not, could they, when shown the ten possible images, guess which image had been displayed? The result: “Nobody identified the visual image."</p><p><span image-alt="medical staff working in surgery"><img src="https://community.macmillanlearning.com/t5/image/serverpage/image-id/5636iDC208532DFA08959/image-dimensions/345x279?v=v2" width="345" height="279" role="button" title="Near Death 2.png" alt="Near Death 2.png" li-image-url="https://community.macmillanlearning.com/t5/image/serverpage/image-id/5636iDC208532DFA08959?v=v2" li-image-display-id="'5636iDC208532DFA08959'" li-message-uid="'19410'" li-messages-message-image="true" li-bindable="" tabindex="0" li-bypass-lightbox-when-linked="true" li-use-hover-links="false"></span></p><p>During 5 minutes of the CPR, patients also were repeatedly exposed through the headphone audio to the names of 3 fruits: apple, pear, banana. When the 28 survivors were later asked to guess the 3 fruits, how many correctly recalled them? One person. (A chance result? When a colleague invited his psychology students to name 3 fruits, a similar 2 of 50 named an apple, pear, and banana.)</p><p>Although these new results are not what Parnia might have wished, his reporting models science at its best: proposing novel ideas, putting them to the test, and then, with integrity, placing the results in the public domain. Sometimes, as Agatha Christie’s Miss Marple <a href="https://www.goodreads.com/work/quotes/24934140-the-hat-and-the-alibi" target="_blank" rel="noopener nofollow noreferrer">observed,</a> the outcome is unexpected. “But facts are facts, and if one is proved to be wrong, one must just be humble about it and start again.”</p><p>Yet science is a process, and this is but one study, with more to come. At our research consultation, Parnia proposed a second possible method for exposing temporarily brain-dead people to stimuli that might later be recalled. Aortic repair surgery sometimes puts patients under anesthesia, cools the body to 70 degrees, stops the heart, and drains the blood—with flat-lined brain activity for about 40 minutes. Will such functionally dead people sometimes later accurately recall events occurring in the room during their dormancy? What do you think? (Stay tuned: The results of this study are forthcoming, Parnia tells me.)</p><p>Parnia knows of credible-seeming reports of resuscitated patients displaying accurate recall. including one Britisher who, after being left for dead, later recovered and recounted associated events. So he would not be surprised at some accurate recall.</p><p>I, however, would be stunned, for two reasons:</p><ul><li><em>Parapsychology’s null findings. </em>Parnia emphasizes that his scientific exploration of people’s experiences and recollections of death transitions are not parapsychology. Yet parapsychology experiments have also indicated that mind seemingly does not travel out-of-body. Would-be psychics cannot “see” remote happenings, such as cards being drawn in an adjacent room.</li><li><em>Brain-mind science. </em>The entirety of cognitive neuroscience links mind to brain. Every mental event is simultaneously a biological event. No brain, no mind.</li></ul><p>Nevertheless, the data are not done speaking, and sometimes reality surprises us. As even Miss Marple’s more rationalist counterpart Sherlock Holmes <a href="https://www.goodreads.com/quotes/99039-life-is-infinitely-stranger-than-anything-which-the-mind-of" target="_blank" rel="noopener nofollow noreferrer">acknowledged</a>, “Life is infinitely stranger than anything which the mind of man could invent.” Psychological science has offered many <a href="https://community.macmillanlearning.com/t5/talk-psych-blog/psychological-science-full-of-surprises/ba-p/3205" target="_blank">surprising</a>—even shocking—findings. And it surely has more to come.</p><p><span size="2"><em>Afterword: </em>Some may wonder, does the assumption and the evidence of embodied minds threaten various religious understandings of human nature and hopes for life after bodily death? Not at all, argue cognitive neuroscientist Malcolm Jeeves (founder of Britain’s <a href="https://www.theguardian.com/education/ng-interactive/2023/sep/09/best-uk-universities-for-psychology-league-table" target="_blank" rel="noopener nofollow noreferrer">top-rated</a> psychology department) and developmental psychologist Thomas Ludwig. They reflect on the deep implications of brain-mind science in their recent book, <em>Psychological Science and Christian Faith, </em>and offer an alternative to a death-denying dualism. A disembodied immortal soul is Plato’s thinking, they argue, and not the assumption of biblical religion.</span></p><p><span size="2"><em>(For </em><a href="http://www.davidmyers.org/" target="_blank" rel="noopener nofollow noreferrer">David Myers’</a><em> other essays on psychological science and everyday life, visit </em><a href="http://www.talkpsych.com/" target="_blank" rel="noopener nofollow noreferrer">TalkPsych.com</a><em> or check out his new essay collection, </em><a href="https://davidmyers.org/books/how-do-we-know-ourselves" target="_blank" rel="noopener nofollow noreferrer">How Do We Know Ourselves?: Curiosities and Marvels of the Human Mind.</a> <em>Follow him on Twitter: @davidgmyers.)</em></span></p>
					
				
			
			
			
			
			
			
			
			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Starlink Direct to Cell (434 pts)]]></title>
            <link>https://direct.starlink.com/</link>
            <guid>37848212</guid>
            <pubDate>Wed, 11 Oct 2023 18:18:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://direct.starlink.com/">https://direct.starlink.com/</a>, See on <a href="https://news.ycombinator.com/item?id=37848212">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">




<div>
<h2>UBIQUITOUS COVERAGE</h2>



<div><p>Starlink satellites with&nbsp;Direct to Cell capabilities enable ubiquitous access to texting, calling, and browsing wherever you may be on land, lakes, or coastal waters.</p><p>Direct to Cell will also connect IoT devices with common LTE standards.</p></div>




</div>



<div>
<h2>STAY CONNECTED</h2>



<p>Direct to Cell works with existing LTE phones wherever you can see the sky. No changes to hardware, firmware, or special apps are required, providing seamless access to text, voice, and data.&nbsp;</p>
</div>



<div id="block-illustration-group-block_f14faaa2b72e3dc3e32bd64478a7c7c6">
    

<h2>A cellphone tower in&nbsp;space</h2>



<figure><img decoding="async" loading="lazy" width="1024" height="512" src="https://direct.starlink.com/wp-content/uploads/2023/09/diagram-v2-1024x512.png" alt="Starlink Satellite Network to Unmodified Cell Phones and Starlink Ground Network. Starlink Ground Network to Partner Operator Network to Talk, Text, and Data Service" srcset="https://direct.starlink.com/wp-content/uploads/2023/09/diagram-v2-1024x512.png 1024w, https://direct.starlink.com/wp-content/uploads/2023/09/diagram-v2-300x150.png 300w, https://direct.starlink.com/wp-content/uploads/2023/09/diagram-v2-768x384.png 768w, https://direct.starlink.com/wp-content/uploads/2023/09/diagram-v2-1536x768.png 1536w, https://direct.starlink.com/wp-content/uploads/2023/09/diagram-v2-2048x1024.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>







<p>Starlink satellites with Direct to Cell capability&nbsp;have an advanced eNodeB modem onboard that acts like a cellphone tower in space, allowing network integration similar to a standard roaming partner.</p>

  </div>



<div><p><img decoding="async" loading="lazy" width="1728" height="869" alt="" src="https://direct.starlink.com/wp-content/uploads/2023/09/earth.jpg" data-object-fit="cover" srcset="https://direct.starlink.com/wp-content/uploads/2023/09/earth.jpg 1728w, https://direct.starlink.com/wp-content/uploads/2023/09/earth-300x151.jpg 300w, https://direct.starlink.com/wp-content/uploads/2023/09/earth-1024x515.jpg 1024w, https://direct.starlink.com/wp-content/uploads/2023/09/earth-768x386.jpg 768w, https://direct.starlink.com/wp-content/uploads/2023/09/earth-1536x772.jpg 1536w" sizes="(max-width: 1728px) 100vw, 1728px"></p><div>
<h2>ELIMINATE DEAD ZONES​</h2>



<p>Direct to Cell enables connectivity in remote regions, providing peace of mind when customers&nbsp;need it most.&nbsp;</p>
</div></div>



<div><p><img decoding="async" loading="lazy" width="1728" height="866" alt="" src="https://direct.starlink.com/wp-content/uploads/2023/09/Starlink_MountHood_052423000571-1.jpg" data-object-fit="cover" srcset="https://direct.starlink.com/wp-content/uploads/2023/09/Starlink_MountHood_052423000571-1.jpg 1728w, https://direct.starlink.com/wp-content/uploads/2023/09/Starlink_MountHood_052423000571-1-300x150.jpg 300w, https://direct.starlink.com/wp-content/uploads/2023/09/Starlink_MountHood_052423000571-1-1024x513.jpg 1024w, https://direct.starlink.com/wp-content/uploads/2023/09/Starlink_MountHood_052423000571-1-768x385.jpg 768w, https://direct.starlink.com/wp-content/uploads/2023/09/Starlink_MountHood_052423000571-1-1536x770.jpg 1536w" sizes="(max-width: 1728px) 100vw, 1728px"></p><div>
<h2>ENGINEERED BY SPACEX</h2>



<p>SpaceX is leveraging its experience in manufacturing and launching the world’s most advanced rockets and spacecraft to deploy Starlink satellites with the Direct to Cell capability at scale.</p>



<p>Direct to Cell satellites will initially be launched on SpaceX’s Falcon 9 rocket and then Starship. On orbit the satellites will&nbsp;immediately connect over laser backhaul to the Starlink constellation to provide global connectivity.</p>
</div></div>



<div>
<div>
<h2>Global Partners</h2>



<p>Cellular providers using Direct to Cell have access to reciprocal global access in all partner nations.</p>




</div>



<div>
<figure><img decoding="async" loading="lazy" width="1024" height="1024" src="https://direct.starlink.com/wp-content/uploads/2023/09/elon-and-mike-1024x1024.jpg" alt="" srcset="https://direct.starlink.com/wp-content/uploads/2023/09/elon-and-mike-1024x1024.jpg 1024w, https://direct.starlink.com/wp-content/uploads/2023/09/elon-and-mike-300x300.jpg 300w, https://direct.starlink.com/wp-content/uploads/2023/09/elon-and-mike-150x150.jpg 150w, https://direct.starlink.com/wp-content/uploads/2023/09/elon-and-mike-768x768.jpg 768w, https://direct.starlink.com/wp-content/uploads/2023/09/elon-and-mike.jpg 1200w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>
</div>
</div>




		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wordpress.com Now Supports ActivityPub (185 pts)]]></title>
            <link>https://wordpress.com/blog/2023/10/11/activitypub/</link>
            <guid>37847782</guid>
            <pubDate>Wed, 11 Oct 2023 17:47:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wordpress.com/blog/2023/10/11/activitypub/">https://wordpress.com/blog/2023/10/11/activitypub/</a>, See on <a href="https://news.ycombinator.com/item?id=37847782">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				
								<p>The fediverse has arrived at WordPress.com. </p>
							</div><div>
				
<p>Exciting times are here for all WordPress.com users! The revolutionary ActivityPub feature is now available across all WordPress.com plans, unlocking a world of engagement and interaction for your blog. Your blogs can now be part of the rapidly expanding fediverse, which enables you to connect with a broader audience and attract more followers.</p>



<p>Let’s dive into what this means for all WordPress.com blogs.</p>



<h2>What is the “fediverse”?</h2>



<p>The fediverse consists of federated platforms like Mastodon, which are networks of independent websites or servers that can communicate with each other while still operating individually. It’s much like email; you can send emails to users with accounts on different services (like Gmail, Yahoo, etc.), yet all of them can interact seamlessly. Similarly, federated platforms enable users to follow, share, and interact with content across different services in a unified network.</p>



<h2>What is the ActivityPub plugin?</h2>



<p>ActivityPub is a WordPress plugin that facilitates seamless integration between your blog and a host of federated platforms, including Mastodon, Pleroma, Friendica, and more. This plugin empowers your readers to follow your blog posts on these platforms.&nbsp;</p>



<p>In addition, replies to your posts from these platforms are automatically turned into comments on your WordPress blog, creating a more interactive and dynamic conversation around your content. Synchronicity for the win!</p>



<h2>Transform your blog into a fediverse profile</h2>



<p>Your WordPress blog can now become a profile for the fediverse. This means your readers can follow you and receive all the latest posts from your blog directly on their preferred platform. More so, they can engage in enriching conversations by replying to your posts, with their replies reflecting as comments on your blog post, creating a synchronized and interactive experience.</p>



<p>On Free, Personal, and Premium sites, you can enter the fediverse through your settings (see how below); for Business and Commerce sites, simply install the <a href="https://wordpress.com/plugins/activitypub">ActivityPub plugin</a> and follow the prompts to set up your profile.&nbsp;&nbsp;&nbsp;&nbsp;</p>



<h2>Getting started is a breeze</h2>


<div>
<figure><a href="https://en-blog.files.wordpress.com/2023/10/image-2.png"><img data-attachment-id="53498" data-permalink="https://wordpress.com/blog/2023/10/11/activitypub/image-2-15/" data-orig-file="https://en-blog.files.wordpress.com/2023/10/image-2.png" data-orig-size="1534,1196" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image-2" data-image-description="" data-image-caption="" data-medium-file="https://en-blog.files.wordpress.com/2023/10/image-2.png?w=300" data-large-file="https://en-blog.files.wordpress.com/2023/10/image-2.png?w=720" width="1534" height="1196" src="https://en-blog.files.wordpress.com/2023/10/image-2.png?w=1024" alt="" srcset="https://en-blog.files.wordpress.com/2023/10/image-2.png?w=1024 1024w, https://en-blog.files.wordpress.com/2023/10/image-2.png 1534w, https://en-blog.files.wordpress.com/2023/10/image-2.png?w=150 150w, https://en-blog.files.wordpress.com/2023/10/image-2.png?w=300 300w, https://en-blog.files.wordpress.com/2023/10/image-2.png?w=768 768w" sizes="(max-width: 1534px) 100vw, 1534px"></a></figure></div>


<ol>
<li>From your blog’s dashboard, go to <em>Settings &gt; Discussion</em> and activate the feature by toggling “Enter the fediverse.”</li>



<li>Make note of your default fediverse profile name. In the example above, it’s the alias openprotocolfanblog.wordpress.com@openprotocolfanblog.wordpress.com. Your alias will be unique to you, of course, and will be far more memorable with a custom domain! (More on that below.)</li>



<li>Follow your new profile on a federated platform, such as Mastodon.</li>



<li>Share your profile name with others so they can follow your blog on federated platforms.</li>
</ol>



<p>Remember, this feature is applicable to <em>new</em> posts only; and it might take up to 15 minutes for new posts to appear on federated platforms.</p>



<h2>Why use a custom domain?</h2>



<figure><a href="https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png"><img data-attachment-id="53505" data-permalink="https://wordpress.com/blog/2023/10/11/activitypub/fediverse-with-custom-domain/" data-orig-file="https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png" data-orig-size="1534,826" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="fediverse-with-custom-domain" data-image-description="" data-image-caption="" data-medium-file="https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=300" data-large-file="https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=720" width="1534" height="826" src="https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=1024" alt="" srcset="https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=1024 1024w, https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png 1534w, https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=150 150w, https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=300 300w, https://en-blog.files.wordpress.com/2023/10/fediverse-with-custom-domain.png?w=768 768w" sizes="(max-width: 1534px) 100vw, 1534px"></a></figure>



<p>Upgrading to a domain doesn’t just give your profile a professional touch:</p>



<ul>
<li>A shorter custom domain is simply more memorable than the default name provided.&nbsp;&nbsp;</li>



<li>It ensures your profile is uniquely identifiable, making it easier for users across the fediverse to find and interact with your content.&nbsp;</li>



<li>With a custom domain you can easily move your entire fediverse connection to any host at any time.&nbsp;</li>
</ul>



<h2>Make new connections today!</h2>



<p>Take advantage of this new opportunity to extend your blog’s reach, connect with diverse audiences, and create engaging dialogues. It only takes seconds to enable this simple yet powerful feature on WordPress.com. And remember, upgrading to a domain not only emphasizes your unique identity but also enhances profile portability. So, why wait? Dive in and showcase your content to the world!</p>
<div><hr><p><strong><label for="subscribe-field">Email Newsletter</label></strong></p>

			<div>
			
							<p>
					Join 102.3M other subscribers				</p>
						</div>
			
</div>
							</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Cloud Spanner is now half the cost of Amazon DynamoDB (265 pts)]]></title>
            <link>https://cloud.google.com/blog/products/databases/announcing-cloud-spanner-price-performance-updates</link>
            <guid>37847454</guid>
            <pubDate>Wed, 11 Oct 2023 17:25:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cloud.google.com/blog/products/databases/announcing-cloud-spanner-price-performance-updates">https://cloud.google.com/blog/products/databases/announcing-cloud-spanner-price-performance-updates</a>, See on <a href="https://news.ycombinator.com/item?id=37847454">Hacker News</a></p>
<div id="readability-page-1" class="page"><div jsname="tx2NYc"><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>Today, we announced significant price-performance improvements for <a href="https://cloud.google.com/spanner">Cloud Spanner</a>, now providing up to 50% increase in throughput and 2.5 times the storage per node than before, with no change in price. Spanner’s high throughput, virtually unlimited scale, single-digit millisecond latency, five 9s availability SLA, and strong external-consistency semantics are now available at half the cost of Amazon DynamoDB for most workloads. These upgrades will be rolled out to all Spanner customers in the coming months, without the need for reprovisioning, downtime, or any user action.</p><p>Organizations of all sizes and across all industries are increasingly looking to accelerate digital transformation and power AI-driven innovation. However, demands are increasing, while budgets are constrained. Customers choose Spanner to future-proof their applications with high performance and availability at virtually unlimited scale. Spanner is a no-compromise database for relational and non-relational workloads that removes stress from managing databases with zero-touch maintenance. As data volumes grow and applications demand more from their operational databases, customers seek cost-optimal ways to support that growth.</p><p>The price-performance changes we announced today build on a track record of continuous improvements to increase value, enhance performance, and lower costs. Additionally, Spanner delivers predictable single-digit milliseconds latencies for strongly-consistent reads and writes across multiple availability zones in the same region. Superior price-performance, familiar SQL, no-maintenance downtime, and a five 9s of availability SLA make Spanner an excellent choice not just for relational data, but also for read-heavy key-value workloads. With these changes, Spanner now offers up to 2x better read throughput per dollar compared to Amazon DynamoDB for similar workloads.</p><p>Spanner is used ubiquitously inside of Google, supporting services such as; Ads, Gmail and <a href="https://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner">Photos</a>. According to the Amazon <a href="https://aws.amazon.com/blogs/aws/prime-day-2023-powered-by-aws-all-the-numbers/" target="_blank">Prime Day blog post</a>, DynamoDB processes 126 million queries per second at peak. Spanner on the other hand processes 3 billion queries per second at peak, which is more than 20x higher, and has more than 12 exabytes of data under management.</p><p>Cloud Spanner's new price-performance improvements make it possible to grow more cost effectively by optimizing both compute and storage:</p><ul><li><b>Compute:</b> Thanks to the 50% throughput improvement, customers can leverage Spanner for their relational and key-value workloads in a cost effective way.</li><li><b>Storage:</b> Each Spanner node can now accommodate 10TB of storage, compared to 4TB previously. This enables customers to cost effectively store and manage data. Even with the increased capacity, Spanner users still only pay for the storage they actually use.</li></ul><p>In other words, Spanner customers now have a lot more flexibility in optimizing their Spanner environments.</p><p><i>"Spanner is an important component for Uber's essential operations. As we scale and expand our global footprint, Spanner's scalability &amp; low operational cost is invaluable. Prior to integrating Spanner, our data management framework demanded a lot of oversight and operational effort, escalating both complexity and expenditure. Traditional workarounds like sharding and eventual consistency also posed barriers to development speed. The adoption of Spanner streamlined operational costs, improved overall reliability, and strengthened overall value by providing better throughput and performance for the same price.”</i> - Ankit Srivastava, Distinguished Engineer, Uber</p><p><i>“Spanner's recent performance improvements have been a welcome change for CERC. With the increase in throughput and storage per node, we've been able to improve our operational efficiency. As we deliver transformative experiences to our customer, a highly reliable, scalable and cost effective database like Spanner is key to our strategy."</i> - Andre da Costa Silva, CIO, CERC</p><p>Cloud Spanner's price-performance improvements are now available in select <a href="https://cloud.google.com/spanner/docs/performance">regional and multi-region instance configurations</a>, with all other configurations to follow. Storage upgrades will start rolling out in the coming months. You do not need to do anything to take advantage of these improvements, and you will continue to be billed at your current rate. <a href="https://goo.gle/SpannerDatabaseUnlimited" target="_blank">Learn more</a> about what makes Spanner unique and how it’s being used today. Or <a href="https://cloud.google.com/spanner/docs/free-trial-instance">try it yourself for free</a> for 90 days, or for as little as $65 USD/month for a production-ready instance that grows with your business, without downtime or disruptive re-architecture.</p></span></section><section><span>Posted in</span><ul><li><a href="https://cloud.google.com/blog/products/databases" track-metadata-position="body" track-metadata-eventdetail="cloud.google.com/blog/products/databases" track-metadata-module="tag list" track-metadata-module_headline="posted in">Databases</a></li><li><a href="https://cloud.google.com/blog/products/spanner" track-metadata-position="body" track-metadata-eventdetail="cloud.google.com/blog/products/spanner" track-metadata-module="tag list" track-metadata-module_headline="posted in">Spanner</a></li></ul></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to legally pirate every font (272 pts)]]></title>
            <link>https://blog.willdepue.com/how-to-legally-pirate-all-fonts-in-an-afternoon</link>
            <guid>37846471</guid>
            <pubDate>Wed, 11 Oct 2023 16:21:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.willdepue.com/how-to-legally-pirate-all-fonts-in-an-afternoon">https://blog.willdepue.com/how-to-legally-pirate-all-fonts-in-an-afternoon</a>, See on <a href="https://news.ycombinator.com/item?id=37846471">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post_body_2035180"><p>I really love good fonts. I recently encountered the familiar moral dilemma of a building a project that begged for a better, licensed font while not wanting to burn hundreds of dollars on something I’ll only care about for a week. In this, I jumped down a rabbit hole to try to answer the question of ‘how bad it actually is to use unlicensed fonts on the web.’</p><p>To my surprise here, US copyright law doesn’t actually allow for copyright of the individual glyphs (the lines, curves, points, etc.), so font makers instead usually rely on the copyright of the font file itself, which can be copyrighted as unique software! Unsurprisingly, there’s lots of complexity to how this copyright works (perhaps intentionally). Here’s my understanding:</p><hr><p>There’s a long-standing standard, dating back before the digital age, that typefaces are “utilitarian and functional” technologies and therefore cannot be copyrighted in and of themselves. Typeface designs have been traditionally seen as “ideas or systems” that are used for representing letters and numbers, rather than as unique expressions or artworks.</p><p>Instead, most type foundries protect their fonts by copyrighting the font files themselves, which has been allowed under the notion that there is specific creative effort required in creating the software itself and the different strategies to render the font at different scales, print sizes, etc.</p><p>Very rarely, font makers have been granted design patents for their work if deemed innovative or so creative as to merit such. These are relatively uncommon as they are more rarely granted, as well as only lasting 15 years before permanently entering public domain (compared to the ability to infinitely renew trademarks or the 95 years or author lifetime + 70 granted for other copyrighted materials).</p><p>This doesn’t mean that trademarks that use a certain font can’t be protected, though. Obviously, you can’t copy the CocaCola logo design, but further distinct usage of a font can also be trademarked (like Off-White™, with its famously obsessive use of Helvetica).</p><p>You also still can’t buy a font, modify it, and send it to all your friends. Most fonts come with licenses that prohibit you from copying, modifying, creating derivative works. Since you’re entering into a legal agreement with the type foundry themselves, they can put whatever limits on how you can use the font, regardless of local copyright law. For an example, check out <a href="https://cdn.berkeleygraphics.com/static/legal/licenses/developer-license.pdf">Berkeley Graphics’ license</a>.</p><p>The key point here is that the <strong>shape of the glyphs themselves</strong>, for example, non-trademarked text posted on advertisements or products with printed text, are not copyrightable. So long as you’re not stealing the creative work, like the advertisement, itself, the shape of each letter is in the public domain.</p><hr><p>This got me thinking, as all things do, on whether I could simply scrape the internet for public, non-creative, non-trademarked use of fonts (of which there is lots and lots of content and only 128 or so characters in each <a href="https://en.wikipedia.org/wiki/Latin_Extended-A">Unicode character set</a>) which I could use to reconstruct every licensed font in existence.</p><p>Only problem is that it’s not that simple. Fonts are exceedingly complex. You’ll know that the fact that the average font just ‘looks right’ is absolutely magical if you’ve ever tried to create your own font. Mainly, this is due to good <a href="https://en.wikipedia.org/wiki/Kerning">kerning</a>, the individual spacing between each letter and another. It might come as a surprise that not only does every character have different whitespace between it and other characters, but each actually has unique whitespace between it and every pair of possible following characters.</p><div id="posthaven_gallery[2059798]">
          <p>
          <img src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079747/DrUbvIpe8FgeAw8_WxpdDW49HfI/medium_Kerning_EN.svg.png" data-posthaven-state="processed" data-medium-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079747/DrUbvIpe8FgeAw8_WxpdDW49HfI/medium_Kerning_EN.svg.png" data-medium-width="800" data-medium-height="557" data-large-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079747/DrUbvIpe8FgeAw8_WxpdDW49HfI/large_Kerning_EN.svg.png" data-large-width="1200" data-large-height="835" data-thumb-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079747/DrUbvIpe8FgeAw8_WxpdDW49HfI/thumb_Kerning_EN.svg.png" data-thumb-width="200" data-thumb-height="200" data-xlarge-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079747/DrUbvIpe8FgeAw8_WxpdDW49HfI/xlarge_Kerning_EN.svg.png" data-xlarge-width="2400" data-xlarge-height="1670" data-orig-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079747/DrUbvIpe8FgeAw8_WxpdDW49HfI/Kerning_EN.svg.png" data-orig-width="2560" data-orig-height="1781" data-posthaven-id="3079747">
        </p>
          
        </div>
<p>If I’m going to do this correctly, I’ll need to scrape the internet not for all individual characters of a font, but for all possible pairs of characters. That’s 16256 different combinations per font. Thank god the internet is just pretty big.</p><p>There’s also lots of other different asterisks here (spacing, ligatures, handling numbers, etc.) but for now I’m just going to focus on getting the pipeline working.</p><p>I’ve started with a set of simple images of a font that I would want to replicate, then use Meta’s <a href="https://segment-anything.com/">Segment Anything Model</a> (for no reason besides I already had it setup on my computer) to select and cut out each individual character. We’re only working with black and white images with none/low background noise such that converting from pixels to curves is fairly trivial.</p><div id="posthaven_gallery[2059796]">
          <p>
          <img src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079745/UHF6RPs55wx8VsSi1SfRReMWF68/medium_Screen_Shot_2023-10-10_at_10.52.44_PM.png" data-posthaven-state="processed" data-medium-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079745/UHF6RPs55wx8VsSi1SfRReMWF68/medium_Screen_Shot_2023-10-10_at_10.52.44_PM.png" data-medium-width="800" data-medium-height="619" data-large-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079745/UHF6RPs55wx8VsSi1SfRReMWF68/large_Screen_Shot_2023-10-10_at_10.52.44_PM.png" data-large-width="1200" data-large-height="928" data-thumb-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079745/UHF6RPs55wx8VsSi1SfRReMWF68/thumb_Screen_Shot_2023-10-10_at_10.52.44_PM.png" data-thumb-width="200" data-thumb-height="200" data-xlarge-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079745/UHF6RPs55wx8VsSi1SfRReMWF68/xlarge_Screen_Shot_2023-10-10_at_10.52.44_PM.png" data-xlarge-width="1792" data-xlarge-height="1386" data-orig-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079745/UHF6RPs55wx8VsSi1SfRReMWF68/Screen_Shot_2023-10-10_at_10.52.44_PM.png" data-orig-width="1792" data-orig-height="1386" data-posthaven-id="3079745">
        </p>
          
        </div>
        <div id="posthaven_gallery[2059797]">
          <p>
          <img src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079746/Xr7nHzOt15NjoVIp9i3sm1XBkTU/medium_Screen_Shot_2023-10-10_at_11.38.11_PM.png" data-posthaven-state="processed" data-medium-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079746/Xr7nHzOt15NjoVIp9i3sm1XBkTU/medium_Screen_Shot_2023-10-10_at_11.38.11_PM.png" data-medium-width="800" data-medium-height="168" data-large-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079746/Xr7nHzOt15NjoVIp9i3sm1XBkTU/large_Screen_Shot_2023-10-10_at_11.38.11_PM.png" data-large-width="1022" data-large-height="214" data-thumb-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079746/Xr7nHzOt15NjoVIp9i3sm1XBkTU/thumb_Screen_Shot_2023-10-10_at_11.38.11_PM.png" data-thumb-width="200" data-thumb-height="200" data-xlarge-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079746/Xr7nHzOt15NjoVIp9i3sm1XBkTU/xlarge_Screen_Shot_2023-10-10_at_11.38.11_PM.png" data-xlarge-width="1022" data-xlarge-height="214" data-orig-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079746/Xr7nHzOt15NjoVIp9i3sm1XBkTU/Screen_Shot_2023-10-10_at_11.38.11_PM.png" data-orig-width="1022" data-orig-height="214" data-posthaven-id="3079746">
        </p>
          
        </div>
<p>Now that I have individual character PNGs, I’ll just boost the contrast just to be safe. You can run this in the command line pretty much:</p><p><code>convert input_char.png -contrast output_char.png</code></p><p>Once we’re sure we have high contrast images, we can use <em>cutting edge computer vision AI ML technology</em> by running software first released in 2001:</p><p><code>potrace input.png -s -o output.svg</code></p><p>Now that we have the SVGs, FontForge has an excellent python package for programmatically generating fonts.</p><pre><code>import fontforge

svgs = [...]

font = fontforge.font()

for unicode, letter in svgs:
	glyph = font.createChar(unicode_val, letter)
	glyph.importOutlines(f'{letter}.svg')
	glyph.autoWidth()
 
font.familyname = 'NotHelvetica'
font.fullname = 'NotHelvetica'
font.generate('NotHelvetica.ttf')
</code></pre><p>And there you have it! A complete bastardization of the source font, lacking proper kerning, metadata, em size, bitmaps, ligatures, x-height, etc.</p><p>If you were going to try to get kerning correct here, the best process might be something like collecting and splitting all letter pairs, then using OpenCV to find the distance from each character’s edges to calculate the kerning value.</p><pre><code>import cv2
import fontforge

def get_kerning(image_path):
	img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
	_, thresh = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY_INV)
	contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
	contours.sort(key=lambda x: cv2.boundingRect(x)[0])
	x1, y1, w1, h1 = cv2.boundingRect(contours[0])
	x2, y2, w2, h2 = cv2.boundingRect(contours[1])
	kerning_value = x2 - (x1 + w1)
	return kerning_value

characters = [...]
font = ...

for char_1 in characters:
    for char_2 in characters:
        kerning_value = get_kerning_from_image(f'{char1}-{char2}.png')
        font[char1].addPosSub('kern', char2, kerning_value)
</code></pre><p>In terms of finding a dataset of images of fonts, I’d look into the large existing internet datasets out there. For example, I did a quick search of LAION-5B and there’s infinite images for any given font as a prompt, though there would be work needed to verify that all images wouldn’t fall under improper copyright.</p><div id="posthaven_gallery[2059794]">
          <p>
          <img src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079743/w29pj868SSvrCmzL9hRzzecSOeU/medium_Screen_Shot_2023-10-10_at_11.09.00_PM.png" data-posthaven-state="processed" data-medium-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079743/w29pj868SSvrCmzL9hRzzecSOeU/medium_Screen_Shot_2023-10-10_at_11.09.00_PM.png" data-medium-width="800" data-medium-height="558" data-large-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079743/w29pj868SSvrCmzL9hRzzecSOeU/large_Screen_Shot_2023-10-10_at_11.09.00_PM.png" data-large-width="1200" data-large-height="837" data-thumb-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079743/w29pj868SSvrCmzL9hRzzecSOeU/thumb_Screen_Shot_2023-10-10_at_11.09.00_PM.png" data-thumb-width="200" data-thumb-height="200" data-xlarge-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079743/w29pj868SSvrCmzL9hRzzecSOeU/xlarge_Screen_Shot_2023-10-10_at_11.09.00_PM.png" data-xlarge-width="2400" data-xlarge-height="1675" data-orig-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079743/w29pj868SSvrCmzL9hRzzecSOeU/Screen_Shot_2023-10-10_at_11.09.00_PM.png" data-orig-width="3330" data-orig-height="2324" data-posthaven-id="3079743">
        </p>
          
        </div>
        <div id="posthaven_gallery[2059795]">
          <p>
          <img src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079744/05GaoCVYPv39DxeBLbQDMfI11sw/medium_Screen_Shot_2023-10-10_at_11.20.03_PM.png" data-posthaven-state="processed" data-medium-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079744/05GaoCVYPv39DxeBLbQDMfI11sw/medium_Screen_Shot_2023-10-10_at_11.20.03_PM.png" data-medium-width="800" data-medium-height="558" data-large-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079744/05GaoCVYPv39DxeBLbQDMfI11sw/large_Screen_Shot_2023-10-10_at_11.20.03_PM.png" data-large-width="1200" data-large-height="837" data-thumb-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079744/05GaoCVYPv39DxeBLbQDMfI11sw/thumb_Screen_Shot_2023-10-10_at_11.20.03_PM.png" data-thumb-width="200" data-thumb-height="200" data-xlarge-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079744/05GaoCVYPv39DxeBLbQDMfI11sw/xlarge_Screen_Shot_2023-10-10_at_11.20.03_PM.png" data-xlarge-width="2400" data-xlarge-height="1675" data-orig-src="https://phaven-prod.s3.amazonaws.com/files/image_part/asset/3079744/05GaoCVYPv39DxeBLbQDMfI11sw/Screen_Shot_2023-10-10_at_11.20.03_PM.png" data-orig-width="3330" data-orig-height="2324" data-posthaven-id="3079744">
        </p>
          
        </div>
<p>I’m not very interested in carrying out this project in full for somewhat obvious reasons (somewhat significantly being disinterested in spending tens of hours collecting and labeling data now that I know it works). As a big fan of typography in general it’s pretty obviously wrong that fonts not be able to be claimed as creative work that deserves to be copyrighted, though I can see how fonts used to play a far more essential and utilitarian role in society. Unfortunately, it seems that this is pretty much <a href="https://en.wikipedia.org/wiki/Black_letter_law">black-letter law</a> at this point and there isn’t much hope for it changing in the future. If any brave souls are interested in legally pirating all existing fonts and being taken to court, I think you’d likely be doing a service to society here by challenging this ruling.</p><p>Final reminder that I’m not a lawyer and have no clue if anything I said is actually correct, so none of this is legal advice and I strongly recommend you go talk to a lawyer before attempting anything here. I’d also strongly emphasize the importance of supporting the incredible work behind your favorite typefaces by purchasing fonts directly, I definitely do not advocate ever for stealing anyone’s work.</p><p>Thanks for reading!</p><p>— Will DePue (<a href="mailto:will@depue.net" title="Link: mailto:will@depue.net">will@depue.net</a>)</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[California Right to Repair Signed into Law (187 pts)]]></title>
            <link>https://www.ifixit.com/News/84491/california-right-to-repair-signed-into-law</link>
            <guid>37846464</guid>
            <pubDate>Wed, 11 Oct 2023 16:20:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ifixit.com/News/84491/california-right-to-repair-signed-into-law">https://www.ifixit.com/News/84491/california-right-to-repair-signed-into-law</a>, See on <a href="https://news.ycombinator.com/item?id=37846464">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
<p>Today marks a monumental step forward in the Right to Repair movement. We’re elated to announce that Governor Gavin Newsom has officially signed the California Right to Repair Act, SB 244, into law. This groundbreaking legislation <a href="https://www.ifixit.com/News/81914/california-just-became-the-third-state-to-pass-electronics-right-to-repair">passed the legislature almost unanimously</a> last month. It has been championed by state senator Susan Talamantes Eggman and is cosponsored by iFixit, along with our colleagues in the more-fixable-stuff fight, <a href="https://pirg.org/california/">CALPIRG</a> (the California Public Interest Research Group), and <a href="https://www.cawrecycles.org/">Californians Against Waste</a>.</p>



<figure><img decoding="async" fetchpriority="high" width="1536" height="998" src="https://valkyrie.cdn.ifixit.com/media/2023/10/10141908/Governor-Newsom-Signing-Photo-1536x998-1.jpg" alt="" srcset="https://valkyrie.cdn.ifixit.com/media/2023/10/10141908/Governor-Newsom-Signing-Photo-1536x998-1.jpg 1536w, https://valkyrie.cdn.ifixit.com/media/2023/10/10141908/Governor-Newsom-Signing-Photo-1536x998-1-1385x900.jpg 1385w" sizes="(max-width: 1536px) 100vw, 1536px"></figure>



<p>“This is a victory for consumers and the planet, and it just makes sense,” said Jenn Engstrom, state director of CALPIRG. “Right now, we mine the planet’s precious minerals, use them to make amazing phones and other electronics, ship these products across the world, and then toss them away after just a few years’ use. What a waste. We should make stuff that lasts and be able to fix our stuff when it breaks, and now thanks to years of advocacy, Californians will finally be able to, with the Right to Repair.”&nbsp;</p>



<p>The tech revolution started here in California, so it’s appropriate that we’re working to fix the problems of Big Tech here, too. With access to original parts, tools, and documentation, independent repair shops will be able to compete again. And Californians across the state—accounting for about <a href="https://www.ppic.org/publication/californias-population/">1 out of every 8 Americans</a>—will be able to fix things however they see fit.</p>



<h2>California Raises the Bar</h2>



<p>With California’s new law, the Golden State joins <a href="https://www.ifixit.com/News/75965/minnesotas-new-right-to-repair-law-will-give-the-whole-world-repair-manuals">Minnesota</a> and <a href="https://www.ifixit.com/News/70515/new-york-passes-historic-right-to-repair-bill">New York</a>, representing nearly <a href="https://www.infoplease.com/us/states/state-population-by-rank">20% of the US population</a>, in guaranteeing people more control over their electronic devices. This bill goes above and beyond those laws, mandating manufacturers to keep repair materials available for up to seven years, ensuring the longevity of products and reducing electronic waste.</p>



<ul>
<li><strong>Covered products</strong>: all electronic and appliance products that cost $50 or more sold in California after July 1, 2021 (everything in Section 9801 of the Business and Professions code, which was just updated this session in another bill, <a href="https://leginfo.legislature.ca.gov/faces/billNavClient.xhtml?bill_id=202320240SB814">SB 814</a>)</li>



<li><strong>Effective date</strong>: July 1, 2024</li>



<li><strong>Difference from other states</strong>: includes 3 years of parts, tools, and documentation support for products that cost $50-$99.99; 7 years for products $100+</li>



<li><strong>Exemptions</strong>: game consoles, alarm systems, agricultural and forestry equipment (everything on <a href="https://law.justia.com/codes/california/2022/code-bpc/division-8/chapter-28/section-22900/">this list</a>)</li>
</ul>



<p>“Replacing expensive electronics and appliances at an ever-quickening pace is not only a financial burden on consumers but also drives unsustainable mining and extraction that has a tremendous environmental impact up and down the supply chain,” said Nick Lapis, Director of Advocacy for Californians Against Waste. “My hope is that, with the passage of SB 244, California will foster a thriving market for repair businesses and secondhand sales that will make repair the norm, not the exception.”</p>



<figure><img decoding="async" width="1536" height="1536" src="https://valkyrie.cdn.ifixit.com/media/2023/10/10141951/calpirg_e-waste_eggman-1536x1536-1.jpg" alt="" srcset="https://valkyrie.cdn.ifixit.com/media/2023/10/10141951/calpirg_e-waste_eggman-1536x1536-1.jpg 1536w, https://valkyrie.cdn.ifixit.com/media/2023/10/10141951/calpirg_e-waste_eggman-1536x1536-1-150x150.jpg 150w, https://valkyrie.cdn.ifixit.com/media/2023/10/10141951/calpirg_e-waste_eggman-1536x1536-1-900x900.jpg 900w" sizes="(max-width: 1536px) 100vw, 1536px"></figure>



<p>Although the Right to Repair movement sees this signature as a significant milestone, we are disheartened by Governor Newsom’s <a href="https://www.gov.ca.gov/wp-content/uploads/2023/10/SB-271-Veto.pdf">decision to veto Senator Dodd’s companion Right to Repair powered wheelchair bill</a> on October 7, citing insurance billing complexities. The need for an accessible approach to repair is evident, and we remain hopeful that the next legislative session will expand on product categories and address issues like <a href="https://www.ifixit.com/News/82867/iphone-15-teardown-reveals-software-lockdown">parts pairing</a>, electric wheelchairs, and e-bike software.</p>



<p>While we celebrate today’s victory, the fight continues. The bill, though robust, still allows manufacturers certain leeways like parts pairing. </p>



<figure><blockquote><p>We won’t stop advocating for more fixable stuff. But today, California has made a colossal leap forward towards a repairable future</p><cite>Kyle Wiens, iFixit CEO</cite></blockquote></figure>



<p>As we push forward, we aspire for a future where more states and countries adopt similar measures. We dream of a world where repair is not an exception but the norm.</p>



<p>Senator Eggman summed it up perfectly: “I’m thrilled that the Governor has signed the Right to Repair Act into law. As I’ve said all along, I’m so grateful to the advocates fueling this movement with us for the past six years, and the manufacturers that have come along to support Californians’ Right to Repair. This is a common sense bill that will help small repair shops, give choice to consumers, and protect the environment.”</p>



<p>If you want to get involved with the Right to Repair movement, join your <a href="https://www.ifixit.com/right-to-repair-action">local advocacy network</a>.</p>
    
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[M2 Ultra can run 128 streams of Llama 2 7B in parallel (149 pts)]]></title>
            <link>https://github.com/ggerganov/llama.cpp/pull/3228</link>
            <guid>37846387</guid>
            <pubDate>Wed, 11 Oct 2023 16:15:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ggerganov/llama.cpp/pull/3228">https://github.com/ggerganov/llama.cpp/pull/3228</a>, See on <a href="https://news.ycombinator.com/item?id=37846387">Hacker News</a></p>
<div id="readability-page-1" class="page"><div disabled="" sortable="">
          <p dir="auto">I couldn't get the <code>./bin/parallel</code> external alternative-prompt file option to work using <code>-f file.txt</code> so I've inserted a few lines into <code>parallel.cpp</code> to make it run. I am not a <code>C/C++</code> specialist so it probably won't pass any style tests (code at the end), but it does run on my <strong>M2 MAX 32GB</strong> and <strong>MacOS Sonoma 14.0</strong> from</p>
<div data-snippet-clipboard-copy-content="% ./build/bin/parallel -m ./models/llama-2-13b/ggml-model-q8_0.gguf -f &quot;ParallelQuestions.txt&quot; -n 128 -t 1 -c 8192 -s 4321 -ngl 100 -np 16 -ns 32 -cb"><pre><code>% ./build/bin/parallel -m ./models/llama-2-13b/ggml-model-q8_0.gguf -f "ParallelQuestions.txt" -n 128 -t 1 -c 8192 -s 4321 -ngl 100 -np 16 -ns 32 -cb
</code></pre></div>
<p dir="auto">A plain text file like this below saved into <code>/build/ParallelQuestions.txt</code> is then read in generically by <code>common.cpp</code> (with no alterations to the code) and transferred to replace the default <code>k_prompts</code> inside <code>parallel.cpp</code>.</p>
<div data-snippet-clipboard-copy-content="What do you know about Hobbits?
What is quantum field theory?
Why did the chicken cross the road?
Who is the president of the United States?
How do I run CMake on MacOS?
Do you agree that C++ is a really finicky language compared with Python3?
Is it a good idea to invest in technology?
Do you like Wagner's Ring?
Do you think this file input option is really neat?
What should we all do about climate change?"><pre><code>What do you know about Hobbits?
What is quantum field theory?
Why did the chicken cross the road?
Who is the president of the United States?
How do I run CMake on MacOS?
Do you agree that C++ is a really finicky language compared with Python3?
Is it a good idea to invest in technology?
Do you like Wagner's Ring?
Do you think this file input option is really neat?
What should we all do about climate change?
</code></pre></div>
<p dir="auto">Producing (sample only) output</p>
<div data-snippet-clipboard-copy-content="Now printing the k_prompts loaded from ParallelQuestions.txt that replace the default questions.

What do you know about Hobbits?
What is quantum field theory?
Why did the chicken cross the road?
Who is the president of the United States?
How do I run CMake on MacOS?
Do you agree that C++ is a really finicky language compared with Python3?
Is it a good idea to invest in technology?
Do you like Wagner's Ring?
Do you think this file input option is really neat?
What should we all do about climate change?


main: Simulating parallel requests from clients:
main: Evaluating the system prompt ...

Processing requests ...

main: clearing the KV cache
Client   0, seq    0, started decoding ...
Client   1, seq    1, started decoding ...
Client   2, seq    2, started decoding ...
Client   3, seq    3, started decoding ...
Client   4, seq    4, started decoding ...
Client   5, seq    5, started decoding ...
Client   6, seq    6, started decoding ...
Client   7, seq    7, started decoding ...
Client   8, seq    8, started decoding ...
Client   9, seq    9, started decoding ...
Client  10, seq   10, started decoding ...
Client  11, seq   11, started decoding ...
Client  12, seq   12, started decoding ...
Client  13, seq   13, started decoding ...
Client  14, seq   14, started decoding ...
Client  15, seq   15, started decoding ...
Client   7, seq    7/ 32, prompt   14 t, response   11 t, time  2.62 s, speed  9.54 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The current President of the United States is Donald Trump.

Client  14, seq   14/ 32, prompt   14 t, response   11 t, time  2.63 s, speed  9.52 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The current President of the United States is Donald Trump.

Client   7, seq   16, started decoding ...
Client  14, seq   17, started decoding ...
Client   7, seq   16/ 32, prompt   14 t, response   13 t, time  2.39 s, speed 11.28 t/s, cache miss 0  
Input:    Why did the chicken cross the road?
Response: The chicken crossed the road to get to the other side.

Client   7, seq   18, started decoding ...
Client  12, seq   12/ 32, prompt   14 t, response   30 t, time  5.87 s, speed  7.49 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The current president of the United States is Joe Biden. He was sworn into office on January 20, 2021.

Client  12, seq   19, started decoding ...
Client  10, seq   10/ 32, prompt   13 t, response   35 t, time  6.73 s, speed  7.13 t/s, cache miss 0  
Input:    What should we all do about climate change?
Response: We should all work together to reduce our carbon footprint. We can do this by reducing our energy consumption, recycling more, and using public transportation whenever possible.

Client  10, seq   20, started decoding ...
Client   1, seq    1/ 32, prompt   14 t, response   42 t, time  7.93 s, speed  7.06 t/s, cache miss 0  
Input:    Why did the chicken cross the road?
Response: The chicken crossed the road to get to the other side. It is a classic joke that has been around for many years and is often used as an example of a riddle or paradox.

Client   1, seq   21, started decoding ...
Client  14, seq   17/ 32, prompt   14 t, response   36 t, time  6.36 s, speed  7.86 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The president of the United States is Joe Biden. He was elected in November 2020 and took office on January 20, 2021.

Client  14, seq   22, started decoding ...
Client   0, seq    0/ 32, prompt   16 t, response   49 t, time  9.17 s, speed  7.09 t/s, cache miss 0  
Input:    Do you think this file input option is really neat?
Response: Yes, I think this file input option is really neat. It allows you to easily upload files from your computer or other devices and view them in the browser. This can be very useful when sharing large files or working with multiple documents at once.

Client   0, seq   23, started decoding ...
Client  10, seq   20/ 32, prompt   13 t, response   14 t, time  2.62 s, speed 10.29 t/s, cache miss 0  
Input:    Do you like Wagner's Ring?
Response: I do not know what &quot;Wagner's Ring&quot; is.

Client  10, seq   24, started decoding ...
Client   9, seq    9/ 32, prompt   22 t, response   56 t, time 10.42 s, speed  7.49 t/s, cache miss 0  
Input:    Do you agree that C++ is a really finicky language compared with Python3?
Response: I cannot agree or disagree with that statement because it is subjective and depends on the person who is asking the question. Some people may find C++ to be finicky, while others may not have any problems with it. Ultimately, it comes down to personal preference."><pre><code>Now printing the k_prompts loaded from ParallelQuestions.txt that replace the default questions.

What do you know about Hobbits?
What is quantum field theory?
Why did the chicken cross the road?
Who is the president of the United States?
How do I run CMake on MacOS?
Do you agree that C++ is a really finicky language compared with Python3?
Is it a good idea to invest in technology?
Do you like Wagner's Ring?
Do you think this file input option is really neat?
What should we all do about climate change?


main: Simulating parallel requests from clients:
main: Evaluating the system prompt ...

Processing requests ...

main: clearing the KV cache
Client   0, seq    0, started decoding ...
Client   1, seq    1, started decoding ...
Client   2, seq    2, started decoding ...
Client   3, seq    3, started decoding ...
Client   4, seq    4, started decoding ...
Client   5, seq    5, started decoding ...
Client   6, seq    6, started decoding ...
Client   7, seq    7, started decoding ...
Client   8, seq    8, started decoding ...
Client   9, seq    9, started decoding ...
Client  10, seq   10, started decoding ...
Client  11, seq   11, started decoding ...
Client  12, seq   12, started decoding ...
Client  13, seq   13, started decoding ...
Client  14, seq   14, started decoding ...
Client  15, seq   15, started decoding ...
Client   7, seq    7/ 32, prompt   14 t, response   11 t, time  2.62 s, speed  9.54 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The current President of the United States is Donald Trump.

Client  14, seq   14/ 32, prompt   14 t, response   11 t, time  2.63 s, speed  9.52 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The current President of the United States is Donald Trump.

Client   7, seq   16, started decoding ...
Client  14, seq   17, started decoding ...
Client   7, seq   16/ 32, prompt   14 t, response   13 t, time  2.39 s, speed 11.28 t/s, cache miss 0  
Input:    Why did the chicken cross the road?
Response: The chicken crossed the road to get to the other side.

Client   7, seq   18, started decoding ...
Client  12, seq   12/ 32, prompt   14 t, response   30 t, time  5.87 s, speed  7.49 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The current president of the United States is Joe Biden. He was sworn into office on January 20, 2021.

Client  12, seq   19, started decoding ...
Client  10, seq   10/ 32, prompt   13 t, response   35 t, time  6.73 s, speed  7.13 t/s, cache miss 0  
Input:    What should we all do about climate change?
Response: We should all work together to reduce our carbon footprint. We can do this by reducing our energy consumption, recycling more, and using public transportation whenever possible.

Client  10, seq   20, started decoding ...
Client   1, seq    1/ 32, prompt   14 t, response   42 t, time  7.93 s, speed  7.06 t/s, cache miss 0  
Input:    Why did the chicken cross the road?
Response: The chicken crossed the road to get to the other side. It is a classic joke that has been around for many years and is often used as an example of a riddle or paradox.

Client   1, seq   21, started decoding ...
Client  14, seq   17/ 32, prompt   14 t, response   36 t, time  6.36 s, speed  7.86 t/s, cache miss 0  
Input:    Who is the president of the United States?
Response: The president of the United States is Joe Biden. He was elected in November 2020 and took office on January 20, 2021.

Client  14, seq   22, started decoding ...
Client   0, seq    0/ 32, prompt   16 t, response   49 t, time  9.17 s, speed  7.09 t/s, cache miss 0  
Input:    Do you think this file input option is really neat?
Response: Yes, I think this file input option is really neat. It allows you to easily upload files from your computer or other devices and view them in the browser. This can be very useful when sharing large files or working with multiple documents at once.

Client   0, seq   23, started decoding ...
Client  10, seq   20/ 32, prompt   13 t, response   14 t, time  2.62 s, speed 10.29 t/s, cache miss 0  
Input:    Do you like Wagner's Ring?
Response: I do not know what "Wagner's Ring" is.

Client  10, seq   24, started decoding ...
Client   9, seq    9/ 32, prompt   22 t, response   56 t, time 10.42 s, speed  7.49 t/s, cache miss 0  
Input:    Do you agree that C++ is a really finicky language compared with Python3?
Response: I cannot agree or disagree with that statement because it is subjective and depends on the person who is asking the question. Some people may find C++ to be finicky, while others may not have any problems with it. Ultimately, it comes down to personal preference.
</code></pre></div>
<p dir="auto">The additional lines of code (does C++ not have a .split("\n") predefined function?):</p>
<div data-snippet-clipboard-copy-content="// Define a split string function to ...
    std::vector<std::string> splitString(const std::string&amp; input, char delimiter) {
        std::vector<std::string> tokens;
        std::istringstream stream(input);
        std::string token;
        while (std::getline(stream, token, delimiter)) {
            tokens.push_back(token);
        }
        return tokens;
    }"><pre><code>// Define a split string function to ...
    std::vector&lt;std::string&gt; splitString(const std::string&amp; input, char delimiter) {
        std::vector&lt;std::string&gt; tokens;
        std::istringstream stream(input);
        std::string token;
        while (std::getline(stream, token, delimiter)) {
            tokens.push_back(token);
        }
        return tokens;
    }
</code></pre></div>
<p dir="auto">And then somewhere suitable inside <code>main()</code> and before <code>k_prompts</code> is used, in my case roughly at line 125:</p>
<div data-snippet-clipboard-copy-content="    // load the prompts from an external file if there are any
    // these have been acquired by `common.cpp` and put into `params.prompt`
    // by parsing `-f ParallelQuestions.txt` in lines 150-164

    if (params.prompt.empty()) {
        std::cout << &quot;\n\033[32mNo new questions so proceed with build-in defaults.\033[0m&quot;;
    } else {
        // Output each line of the input params.prompts vector and copy to k_prompts
        int index = 0;
        std::cout << &quot;\nNow printing the external prompt file\n\n&quot;;

        std::vector<std::string> prompts = splitString(params.prompt, '\n');
        for (const auto&amp; prompt : prompts) {
            k_prompts.resize(index + 1);
            k_prompts[index] = prompt;
            index++;
            std::cout << index << &quot; prompt: &quot; << prompt << std::endl;
        }

        // Output each line of the updated k_prompts vector (diagnostic - non-functional)
        std::cout << &quot;\n\033[33mNow printing the k_prompts loaded from an external file that replace the default questions.\033[0m\n\n&quot;;
        for (const auto&amp; prompt : k_prompts) {
            std::cout << prompt << std::endl;
        }
    }"><pre><code>    // load the prompts from an external file if there are any
    // these have been acquired by `common.cpp` and put into `params.prompt`
    // by parsing `-f ParallelQuestions.txt` in lines 150-164

    if (params.prompt.empty()) {
        std::cout &lt;&lt; "\n\033[32mNo new questions so proceed with build-in defaults.\033[0m";
    } else {
        // Output each line of the input params.prompts vector and copy to k_prompts
        int index = 0;
        std::cout &lt;&lt; "\nNow printing the external prompt file\n\n";

        std::vector&lt;std::string&gt; prompts = splitString(params.prompt, '\n');
        for (const auto&amp; prompt : prompts) {
            k_prompts.resize(index + 1);
            k_prompts[index] = prompt;
            index++;
            std::cout &lt;&lt; index &lt;&lt; " prompt: " &lt;&lt; prompt &lt;&lt; std::endl;
        }

        // Output each line of the updated k_prompts vector (diagnostic - non-functional)
        std::cout &lt;&lt; "\n\033[33mNow printing the k_prompts loaded from an external file that replace the default questions.\033[0m\n\n";
        for (const auto&amp; prompt : k_prompts) {
            std::cout &lt;&lt; prompt &lt;&lt; std::endl;
        }
    }
</code></pre></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[K3s – Lightweight Kubernetes (203 pts)]]></title>
            <link>https://k3s.io/</link>
            <guid>37845903</guid>
            <pubDate>Wed, 11 Oct 2023 15:39:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://k3s.io/">https://k3s.io/</a>, See on <a href="https://news.ycombinator.com/item?id=37845903">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="docusaurus_skipToContent_fallback"><main><section><div><p><h2>Lightweight Kubernetes</h2><h4>The certified Kubernetes distribution built for IoT &amp; Edge computing</h4></p><div><h4>This won't take long…</h4><div><pre tabindex="0"><code><span><span>curl -sfL https://get.k3s.io | sh - </span><br></span><span><span># Check for Ready node, takes ~30 seconds </span><br></span><span><span>sudo k3s kubectl get node </span><br></span></code></pre></div><p>For detailed installation, <a href="https://docs.k3s.io/">refer to the docs</a></p></div></div><div><h4>Great For</h4><p><h5>Edge</h5><h5>IoT</h5><h5>CI</h5><h5>ARM</h5></p></div></section><section><h2>Why Use K3s</h2><div><div><h5>Perfect for Edge</h5><p>K3s is a highly available, certified Kubernetes distribution designed for production workloads in unattended, resource-constrained, remote locations or inside IoT appliances.</p></div><div><h5>Simplified &amp; Secure</h5><p>K3s is packaged as a single &lt;70MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster.</p></div><div><h5>Optimized for ARM</h5><p>Both ARM64 and ARMv7 are supported with binaries and multiarch images available for both. K3s works great on something as small as a Raspberry Pi to an AWS a1.4xlarge 32GiB server.</p></div></div></section><hr><section><h2>How it Works</h2><img src="https://k3s.io/img/how-it-works-k3s-revised.svg" alt="{{ .Site.Title }}"><p>The above figure shows the difference between K3s server and K3s agent nodes. For more information, see the <a href="https://docs.k3s.io/architecture">architecture documentation.</a></p></section><section><div><h2>Get Started</h2><h5>1. Download K3s - <a href="https://github.com/k3s-io/k3s/releases/latest">latest release</a>: x86_64, ARMv7, ARM64, and s390x are supported<br>2. Run server</h5><div><pre tabindex="0"><code><span><span>sudo k3s server &amp;</span><br></span><span><span># Kubeconfig is written to /etc/rancher/k3s/k3s.yaml</span><br></span><span><span>sudo k3s kubectl get node</span><br></span><span><span></span><br></span><span><span># On a different node run the below command. </span><br></span><span><span># NODE_TOKEN comes from /var/lib/rancher/k3s/server/node-token on your server</span><br></span><span><span>sudo k3s agent --server https://myserver:6443 --token ${NODE_TOKEN}</span><br></span></code></pre></div></div><div><h2>Learn More</h2><div><p>Read the latest SUSE Rancher blog on K3s.</p><p><a href="https://www.suse.com/c/rancher_blog/when-to-use-k3s-and-rke2/">Blog</a></p></div></div></section><section><a href="https://www.cncf.io/"><img src="https://k3s.io/img/cncf-color.png" alt="Docusaurus themed image"><img src="https://k3s.io/img/cncf-white.png" alt="Docusaurus themed image"></a><p>We are a Cloud Native Computing Foundation sandbox project.</p></section></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The deep link equating math proofs and computer programs (201 pts)]]></title>
            <link>https://www.quantamagazine.org/the-deep-link-equating-math-proofs-and-computer-programs-20231011/</link>
            <guid>37845195</guid>
            <pubDate>Wed, 11 Oct 2023 14:52:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/the-deep-link-equating-math-proofs-and-computer-programs-20231011/">https://www.quantamagazine.org/the-deep-link-equating-math-proofs-and-computer-programs-20231011/</a>, See on <a href="https://news.ycombinator.com/item?id=37845195">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Some scientific discoveries matter because they reveal something new — the double helical structure of DNA, for example, or the existence of black holes. However, some revelations are profound because they show that two old concepts, once thought distinct, are in fact the same. Take James Clerk Maxwell’s equations showing that electricity and magnetism are two aspects of a single phenomenon, or general relativity’s linking of gravity with a curved space-time.</p>
<p>The Curry-Howard correspondence does the same but on a larger scale, linking not just separate concepts within one field, but entire disciplines: <a href="https://www.quantamagazine.org/computer-science/">computer science</a> and <a href="https://www.quantamagazine.org/tag/logic">mathematical logic</a>. Also known as the Curry-Howard isomorphism (a term meaning there exists some kind of one-to-one correspondence between two things), it establishes a link between mathematical proofs and computer programs.</p>
<p>Simply stated, the Curry-Howard correspondence posits that two concepts from computer science (types and programs) are equivalent, respectively, to propositions and proofs — concepts from logic.</p>
<p>One ramification of this correspondence is that programming — often seen as a personal craft — is elevated to the idealized level of mathematics. Writing a program is not just “coding,” it becomes an act of proving a theorem. This formalizes the act of programming and provides ways to reason mathematically about the correctness of programs.</p>
<p>The correspondence is named for the two researchers who independently discovered it. In 1934, the mathematician and logician Haskell Curry noticed a similarity between functions in mathematics and the implication relationship in logic, which takes the form of “if-then” statements between two propositions.</p>

<p>Inspired by Curry’s observation, the mathematical logician William Alvin Howard discovered a deeper link between computation and logic in 1969, showing that running a computer program is a lot like simplifying a logical proof. When a computer program runs, each line is “evaluated” to yield a single output. Similarly, in a proof, you start with complex statements that you can simplify (by eliminating redundant steps, for example, or substituting complex expressions with simpler ones) until you arrive at a conclusion — a more condensed and succinct statement derived from many interim statements.</p>
<p>While this description conveys a general sense of the correspondence, to fully understand it we need to learn a bit more about what computer scientists call “type theory.”</p>
<p>Let’s start with a famous paradox: In a village there lives a barber who shaves all the men who do not shave themselves, and only them. Does the barber shave himself? If the answer is yes, then he must not shave himself (because he only shaves men who don’t shave themselves). If the answer is no, then he must shave himself (because he shaves all the men who don’t shave themselves). This is an informal version of a paradox Bertrand Russell discovered while trying to establish the foundations of mathematics using a concept called sets. That is, it’s impossible to define a set that contains all sets that do not contain themselves without encountering contradictions.</p>
<p>To avoid this paradox, Russell showed, we can use “types.” Roughly speaking, these are categories whose specific values are called objects. For example, if there’s a type called “Nat,” meaning natural numbers, its objects are 1, 2, 3, and so on. Researchers typically use a colon to denote the type of an object. The number 7, of integer type, can be written as “7: Integer.” You can have a function that takes an object of type A and spits out an object of type B, or one that combines a pair of objects that were type A and type B into a new type, called “A × B.”</p>

<p>One way to resolve the paradox, therefore, is to put these types into a hierarchy, so they can only contain elements of a “lower level” than themselves. Then a type can’t contain itself, which avoids the self-referentiality that creates the paradox.</p>
<p>In the world of type theory, proving that a statement is true can look different from what we’re used to. If we want to prove that the integer 8 is even, then it’s a matter of showing that 8 is indeed an object of a specific type called “Even,” where the rule for membership is being divisible by 2. After verifying that 8 is divisible by 2, we can conclude that 8 is indeed an “inhabitant” of the type Even.</p>
<p>Curry and Howard showed that types are fundamentally equivalent to logical propositions. When a function “inhabits” a type — that is, when you can successfully define a function that is an object of that type — you’re effectively showing that the corresponding proposition is true. So functions that take an input of type A and give an output of type B, denoted as type A → B, must correspond to an implication: “If A, then B.” For example, take the proposition “If it’s raining, then the ground is wet.” In type theory, this proposition would be modeled by a function with the type “Raining → GroundIsWet.” The different-looking formulations are in fact mathematically the same.</p>

<p>As abstract as that linkage may sound, it has not only changed how practitioners of math and computer science think about their work, but also led to several practical applications in both fields. For computer science, it provides a theoretical foundation for software verification, the process of ensuring the correctness of software. By framing desired behaviors in terms of logical propositions, programmers can mathematically prove that a program behaves as expected. It also provides a strong theoretical foundation for designing more powerful functional programming languages.</p>
<p>And for mathematics, the correspondence has led to the birth of <a href="https://www.quantamagazine.org/tag/computer-assisted-proofs/">proof assistants</a>, also called interactive theorem provers. These are software tools that aid in constructing formal proofs, such as Coq and Lean. In Coq, each step of the proof is essentially a program, and the proof’s validity is checked with type-checking algorithms. Mathematicians have also been using proof assistants — notably, the <a href="https://www.quantamagazine.org/building-the-mathematical-library-of-the-future-20201001/">Lean theorem prover</a> — to formalize mathematics, which involves representing mathematical concepts, theorems and proofs in a rigorous, computer-verifiable format. That allows the sometimes informal language of mathematics to be checked by computers.</p>
<p>Researchers are still exploring the consequences of this link between math and programming. The original Curry-Howard correspondence fuses programming with a kind of logic called intuitionistic logic, but it turns out that more types of logic could be amenable to such unifications as well.</p>

<p>“What has happened in the century since Curry’s insight is that we keep discovering more and more instances where ‘logical system X corresponds to computational system Y,’” said <a href="https://www.engineering.cornell.edu/faculty-directory/michael-clarkson">Michael Clarkson</a>, a computer scientist at Cornell University. Researchers have already connected programming to other types of logic like linear logic, which includes the concept of “resources,” and modal logic, which deals with concepts of possibility and necessity.</p>
<p>And while this correspondence bears Curry’s and Howard’s names, they are by no means the only ones who have discovered it. This attests to the foundational nature of the correspondence: People keep noticing it again and again. “It seems to be no accident that there’s a deep link between computation and logic,” Clarkson said.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Libraries with individually owned bookshelves spreading in Japan (120 pts)]]></title>
            <link>https://www.japantimes.co.jp/culture/2023/10/03/libraries-individual-bookshelves/</link>
            <guid>37844850</guid>
            <pubDate>Wed, 11 Oct 2023 14:29:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.japantimes.co.jp/culture/2023/10/03/libraries-individual-bookshelves/">https://www.japantimes.co.jp/culture/2023/10/03/libraries-individual-bookshelves/</a>, See on <a href="https://news.ycombinator.com/item?id=37844850">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="jtarticle">
                                    <p><span>Yaizu, Shizuoka Pref. – </span></p><p>Moves are spreading in Japan to set up private libraries where each bookshelf is owned by individuals who display books on their hobbies or those that they recommend.</p><p>Such libraries are helping revitalize local communities by creating a place where people can mingle through events. Around 50 such facilities have been created throughout the country.</p><p>The first such library was opened in March 2020 in a deserted shopping street in Yaizu, Shizuoka Prefecture, by Junya Dohi, who is originally from the city, using an empty store space.</p>
                    
                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[People are happier in a walkable neighborhood: the US community that banned cars (156 pts)]]></title>
            <link>https://www.theguardian.com/cities/2023/oct/11/culdesac-car-free-neighborhood-tempe-arizona</link>
            <guid>37844691</guid>
            <pubDate>Wed, 11 Oct 2023 14:15:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/cities/2023/oct/11/culdesac-car-free-neighborhood-tempe-arizona">https://www.theguardian.com/cities/2023/oct/11/culdesac-car-free-neighborhood-tempe-arizona</a>, See on <a href="https://news.ycombinator.com/item?id=37844691">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span><span>I</span></span>f you were to imagine the first car-free neighborhood built from scratch in the modern US, it would be difficult to conceive such a thing sprouting from the environs of Phoenix, <a href="https://www.theguardian.com/us-news/arizona" data-link-name="in body link" data-component="auto-linked-tag">Arizona</a> – a sprawling, concrete incursion into a brutal desert environment that is sometimes derided as the least sustainable city in the country.</p><p>But it is here that such a neighborhood, called <a href="https://culdesac.com/" data-link-name="in body link">Culdesac</a>, has taken root. On a 17-acre site that once contained a car body shop and some largely derelict buildings, an unusual experiment has emerged that invites Americans to live in a way that is rare outside of fleeting experiences of college, Disneyland or trips to Europe: a walkable, human-scale community devoid of cars.</p><p>Culdesac ushered in its first 36 residents earlier this year and will eventually house around 1,000 people when the full 760 units, arranged in two and three-story buildings, are completed by 2025. In an almost startling departure from the US norm, residents are provided no parking for cars and are encouraged to get rid of them. The apartments are also mixed in with amenities, such as a grocery store, restaurant, yoga studio and bicycle shop, that are usually separated from housing by strict city zoning laws.</p><p>Neighborhoods of this ilk can be found in cities such as New York City and San Francisco but are often prohibitively expensive due to their allure, as well as<a href="https://www.nytimes.com/2023/03/22/opinion/new-york-housing-crisis-kathy-hochul.html" data-link-name="in body link"> stiff opposition</a> to new apartment developments. The $170m Culdesac project shows “we can build walkable neighborhoods successfully in the US in [the] 2020s,” according to Ryan Johnson, the 40-year-old who co-founded the company with Jeff Berens, a former McKinsey consultant.</p><figure id="c738d2fb-2b4d-41fa-afb0-8db0079762de" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Ryan Johnson, Culdesac’s CEO, stands on the balcony of the company’s model apartment in Tempe, Arizona, on 5 October." src="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="593.3046754250387" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Ryan Johnson, Culdesac’s CEO, stands on the balcony of the company’s model apartment in Tempe, Arizona, on 5 October.</span> Photograph: The Guardian</figcaption></figure><p>Johnson has the mien of a tech founder, with his company logo T-shirt and fashionable glasses, and was part of the founding team of OpenDoor, an online real estate business. But his enthusiasm for car-free living was born, he said, from living and traveling in countries such as Hungary, Japan and South Africa. Originally from the “classically sprawly” part of Phoenix, Johnson once had an SUV but has been car-free for 13 years. Instead, he has a collection of more than 60 ebikes, although he said he has stopped acquiring them as he is running out of storage space.</p><p>“Today in the US we only build two kinds of housing: single family homes that are lonely and have a painful commute, or we build these mid-rise projects with double loaded corridors and people mostly just walk to their car and that makes people know fewer of their neighbors,” said Johnson.</p><p>“We look back nostalgically at college, because it’s the only time most people have lived in a walkable neighborhood. People are happier and healthier, and even wealthier when they’re living in a walkable neighborhood.”</p><figure id="2902aac0-6c4b-41fb-984d-82d714d0ef19" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-3"><picture><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The architecture of Culdesac and interior detail inside of a model apartment in the neighborhood." src="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="303.77270225646674" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The architecture of Culdesac and interior detail inside of a model apartment in the neighborhood.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Culdesac is not only different in substance, but also style. The development’s buildings are a Mediterranean sugar-cube white accented with ochre, and are clustered together intimately to create inviting courtyards for social gatherings and paved – not asphalt – “paseos”, a word used in Spanish-speaking parts of the US south-west to denote plazas or walkways for strolling.</p><p>Importantly, such an arrangement provides relieving shade <a href="https://www.theguardian.com/us-news/2023/sep/09/phoenix-breaks-heat-record-as-city-hits-110f-for-the-54th-consecutive-day" data-link-name="in body link">from the scorching sun</a> – temperatures in these walkways have been measured at 90F (32C) on days when the pavement outside Culdesac is 120F (48C), the developer claims. The architects call the structures “fabric buildings” that form shared public realm, rather than charmless, utilitarian boxes situated next to a huge, baking car park.</p><p>“It’s positively European, somewhere between Mykonos and Ibiza,” said Jeff Speck, a city planner and urban designer who took a tour of Culdesac earlier this year. “It is amazing how much the urbanism improves, both in terms of experience and efficiency, when you don’t need to store automobiles.”</p><p>There is a small car park, although only for visitors, some disgorged by Waymo, the fleet of Google-owned driverless taxis that <a href="https://www.theguardian.com/cities/2019/mar/09/im-so-done-with-driving-is-the-robot-car-revolution-finally-near-waymo" data-link-name="in body link">eerily cruise around Phoenix</a> with their large cameras and disembodied voices to reassure passengers. To calm any nerves about making the leap to being car-free, Culdesac has struck deals to offer money off Lyft, the ride-sharing service, and free trips on the light rail that runs past the buildings, as well as on-site electric scooters. The first 200 residents to move in will be getting ebikes, too.</p><figure id="b7196ddd-cb53-4fe4-8eb1-c146235a0931" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-4"><picture><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The newly unveiled ‘Lectric Avenue’ in the community, and bike parking within Culdesac’s community courtyards." src="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="151.25274725274727" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The newly unveiled ‘Lectric Avenue’ in the community, and bike parking within Culdesac’s community courtyards.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Such a place is an oddity, Speck points out, because of a car-centric ethos that permeates US culture and city planning. Over the past century, huge highways have been plowed through the heart of US cities, <a href="https://www.theguardian.com/us-news/2022/jul/29/could-the-us-highways-that-split-communities-on-racial-lines-finally-fall" data-link-name="in body link">obliterating and dislocating communities</a> – disproportionately those of color – leaving behind a <a href="https://www.theguardian.com/us-news/2021/may/21/syracuse-new-york-highway-i81-viaduct-biden" data-link-name="in body link">stew of air pollution</a>.</p><p>These roads have primarily served a sprawling suburbia, comprised almost entirely of single family homes with spacious back yards where car driving is often the only option to get anywhere. This car dependence has been reinforced by zoning laws that not only separate residential from commercial developments, but <a href="https://www.theguardian.com/us-news/2022/dec/26/us-cities-parking-lots-climate-walkability" data-link-name="in body link">require copious parking spots added for every new construction</a>. “The result is a nation in which we are all ruthlessly separated from most of our daily needs and also from each other,” Speck said.</p><p>Culdesac can be seen, then, as not only a model for more climate-friendly housing – transportation is the US’s <a href="https://www.epa.gov/ghgemissions/sources-greenhouse-gas-emissions" data-link-name="in body link">largest source</a> of planet-heating emissions and, studies have <a href="https://pubmed.ncbi.nlm.nih.gov/29507190/" data-link-name="in body link">shown</a>, fuels more of the pollution causing the climate crisis – but as a way of somehow stitching back together communities that have become physically, socially and politically riven, lacking a “third place” to congregate other than dislocated homes and workplaces.</p><figure id="0092e0dc-30a4-493d-aa05-f55c9509ef7d" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-5"><picture><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Erin Boyd, Culdesac’s government and external affairs lead, in a model apartment and Dresden Truesdell, a resident, sitting in a model apartment." src="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="304.73424657534247" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Erin Boyd, Culdesac’s government and external affairs lead, in a model apartment and Dresden Truesdell, a resident, sitting in a model apartment.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Culdesac residents have “this shared thing of living without a car” and can have the sort of chance encounters that foster social cohesion, according to Johnson, who himself lives in one of the airy apartments. “When we started, people said: ‘What are you doing? You’re not going to get permission to build that. The demand’s not going to be there,’” he said. “And instead, we got unanimous approval, and there’s a lot of demand, and it’s open. Residents love it.”</p><p>Vanessa Fox, a 32-year-old who moved into Culdesac with her husky dog in May, had always wanted to live in a walkable place only to find such options unaffordable. For her, Culdesac provided a sense of community without having to rely on a car every time she left her apartment. “For some, cars equal freedom, but for me, it’s a restriction,” she said. “Freedom is being able to just simply walk out and access places.”</p><p>Speck said that he expects closer relationships to form among residents. “We will soon have Culdesac babies,” he predicted.</p><figure id="39c01ab3-2c80-4615-9146-60020188ed5d" data-spacefinder-role="supporting" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-6"><picture><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=380&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=380&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=300&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=300&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Vanessa Fox, a Culdesac resident, sits in a model apartment." src="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="593.3333333333333" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Vanessa Fox, a Culdesac resident, sits in a model apartment. </span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Fox admits, though, that some of her family and friends consider her decision to go car-free to be somewhat of an oddity. The New York subway and railroad tycoons of yore may have found international fame, but in the US, the car now reigns supreme.</p><p><a href="https://www.pewresearch.org/short-reads/2015/04/16/car-bike-or-motorcycle-depends-on-where-you-live/" data-link-name="in body link">Around</a> nine in 10 Americans own a car, with only a tenth of people <a href="https://www.pewresearch.org/short-reads/2016/04/07/who-relies-on-public-transit-in-the-u-s/" data-link-name="in body link">using</a> public transport – which is typically underfunded and has suffered badly since the Covid pandemic – on even a weekly basis. Even Joe Biden’s administration, which has talked of reconnecting communities and acting on climate change, is enthusiastically <a href="https://www.theguardian.com/us-news/2022/apr/29/texas-highway-expansions-project-displacements-protests" data-link-name="in body link">pushing hundreds of billions of dollars</a> to building new highways.</p><p>Driving to places is so established as a basic norm that deviation from it can seem not only strange, as evidenced by a lack of pedestrian infrastructure that has contributed to a surge in people dying from being hit by cars in recent years, but even somewhat sinister. People walking late at night, <a href="https://www.aclu.org/news/criminal-law-reform/beaten-tased-and-arrested-jaywalking-while-black" data-link-name="in body link">particularly if they are Black</a>, are regularly accosted by police – in June, the city of Kaplan, Louisiana, even <a href="https://www.klfy.com/local/vermilion-parish/kaplan-starts-permanent-curfew-against-late-night-walking-and-bike-traffic/" data-link-name="in body link">introduced</a> a curfew for people walking or riding bikes, but not for car drivers.</p><p>If neighborhoods like Culdesac are to become more commonplace, then, cities will not only have to alter their planning codes, but there will also have to be a cultural switch from the ideal of a large suburban home with an enormous car in the driveway. Some US billionaires <a href="https://www.axios.com/2022/08/25/city-of-the-future-neom-telosa-lore-mbs" data-link-name="in body link">have</a> <a href="https://www.fastcompany.com/90949139/tech-billionaires-want-to-build-a-new-city-in-california-we-talked-to-the-entrepreneur-behind-it" data-link-name="in body link">dreams</a> of creating new utopian cities that have such elements, although urban planning experts point out it would be better for the environment if existing cities just became denser and less car-centric.</p><figure id="a8c61401-a77a-4019-8ea6-78a6022ba8c0" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-7"><picture><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The architecture of a Culdesac building and interior detail of its model apartment." src="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="304.7428884026258" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The architecture of a Culdesac building and interior detail of its model apartment.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Johnson, who said he is planning to bring the Culdesac concept to other cities, is upbeat about this. “This is something that the majority of the US wants, so they can work all over the country,” he said. “We have heard from cities and residents all over the country that they want more of this, and this is something that we want to build more.”</p><p>“Every trend begins with a one-off,” Speck said. “True proliferation will be dependent upon our cities improving their transit and micro-mobility systems. But for those cities that offer a decent alternative to driving, there is a great fit immediately. Government officials should be asking themselves whether their cities are Culdesac-ready.”</p><ul>
 <li><p>This is the first in a new series, <a href="https://www.theguardian.com/environment/series/the-alternatives" data-link-name="in body link">The alternatives</a>, looking at governments and communities around the world who are trying out new ideas for low carbon living</p></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Modern Pascal is still in the race (2022) (151 pts)]]></title>
            <link>https://blog.synopse.info/?post/2022/11/26/Modern-Pascal-is-Still-in-the-Race</link>
            <guid>37844536</guid>
            <pubDate>Wed, 11 Oct 2023 14:02:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.synopse.info/?post/2022/11/26/Modern-Pascal-is-Still-in-the-Race">https://blog.synopse.info/?post/2022/11/26/Modern-Pascal-is-Still-in-the-Race</a>, See on <a href="https://news.ycombinator.com/item?id=37844536">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A recent poll <a href="https://forum.lazarus.freepascal.org/index.php/topic,61276.0.html">on the Lazarus/FPC forum</a> highlighted a fact: pascal coders are older than most coders. Usually, at our age, we should be managers, not developers. But we like coding in pascal. It is still fun after decades!<br>
But does it mean that you should not use pascal for any new project? Are the language/compilers/libraries outdated?<br>
In the company I currently work for, we have young coders, just out-of-school or still-in-school, which joined the team and write great code!</p>


<p><img src="https://blog.synopse.info/public/blog/performance.jpg" alt=""></p>


<p>And a recent thread <a href="https://forum.lazarus.freepascal.org/index.php/topic,61035.0.html">in this very same forum</a> was about comparing languages to implement a REST server, in C#, Go, Scala, TypeScript, Elixir and Rust.<br>
Several pascal versions are about to be contributed, one in which <em>mORMot</em> shines.</p></div><div><h4>The Challenge and the Algorithms</h4>


<p>The original challenge is available at <a href="https://github.com/losvedir/transit-lang-cmp">transit-lang-cmp</a> with the original source code, of all those fancy languages and libraries.</p>


<p>In practice, the goal of this test program is to load two big CSVs into memory (80MB + 2MB), then serve over HTTP some JSON generated by route identifiers, joining both CSVs.<br>
The resulting JSON could be of 30KB up to 2MB. And all data is generated on the fly from the CSV in memory.</p>


<p>To be fair, a regular/business coder would have used a database for this. Not silly memory structures. And asked for money to setup a huge set of cloud machines with load balancing. <img src="https://blog.synopse.info/?pf=smile.svg" alt=":-)"></p>


<h4>Reference Implementations in Today Languages</h4>


<p>The "modern" / "school" approach, as implemented in the reference project in Go/Rust/C#/... is using two lists for the CSVs data, then two maps/dictionaries between route ID and lists indexes.</p>

<ul>
<li>The <a href="https://github.com/losvedir/transit-lang-cmp/blob/main/trogsit/app.go">Golang version</a> has a good expressiveness, and is nice to read, even if you don't know the language.</li>
<li>The <a href="https://github.com/losvedir/transit-lang-cmp/tree/main/Trannet">C# version</a> is also readable, but making a webserver is still confusing because it is not built from code, but from config files.</li>
<li><a href="https://github.com/losvedir/transit-lang-cmp/tree/main/trexit">Elixir</a> is a bit over-complicated to my taste.</li>
<li><a href="https://github.com/losvedir/transit-lang-cmp/tree/main/trala">Scala</a> and <a href="https://github.com/losvedir/transit-lang-cmp/tree/main/trypsit">TypeScript/Deno</a> versions, are fine to read, but really slow. You may better use a database instead.</li>
<li>Just for fun, check <a href="https://github.com/losvedir/transit-lang-cmp/blob/main/trustit/src/main.rs">the Rust version</a> - do you think Rust is good for big maintainable projects with junior developers?</li>
</ul>


<p>There was a first attempt to write a FPC version of it, by Leledumbo.<br>
His <a href="https://github.com/leledumbo/transit-lang-cmp/blob/main/trascal/app.pas">Source Code repository</a> is a nice pascal conversion of above code. But performance was disappointing. Especially because the standard JSON library can not work directly with high level structures like collections or arrays.</p>


<p>So is Pascal out of the race?<br>
Let's call the <em>mORMot</em> to the rescue!</p>


<h4>Following the mORMot Way</h4>


<p>For the <em>mORMot</em> version in FPC, I used another approach, with two diverse algorithms:</p>

<ul>
<li>I ensured the lists were sorted in memory, then made a O(log(n)) binary lookup in it;</li>
<li>All stored strings were "interned", i.e. the same text was sharing a single string instance, and FPC reference counting did its magic.</li>
</ul>


<p>There is no low-level tricks like generating the JSON by hand or using complex data structures - data structures are still are high-level, with readable field names and such. The logic and the intent are clearly readable.<br>
We just leveraged the pascal language, and <em>mORMot</em> features. For instance, string interning is part of the framework, if needed.</p>


<p>Please <a href="https://github.com/synopse/mORMot2/tree/master/ex/lang-cmp/LangCmp.dpr">check the source code in our repository</a>.</p>


<p>As a result:</p>

<ul>
<li>Code is still readable, short and efficient (most of the process is done by <em>mORMot</em>, i.e. CSV, searching, JSON);</li>
<li>It uses much less memory - 10 times less memory than Go when holding the data, 5 times less memory than Go when serving the data;</li>
<li>Performance is as fast as Go, and its very tuned/optimized compiler and RTL.</li>
</ul>


<p><img src="https://blog.synopse.info/public/blog/mORMot2-small.png" alt=""></p>


<h4>Algorithms Matters</h4>


<p>Main idea was to let the algorithms match the input data and the expected resultset.<br>
As programmers do when programming games. Not as coders do when pissing out business software.  <img src="https://blog.synopse.info/?pf=wink.svg" alt=";-)"></p>

<ul>
<li>The source code is still pretty readable, thanks to using <em>mORMot</em> efficient <code>TDynArray</code> to map the dynamic array storage, and its CSV and JSON abilities.</li>
<li>I guess source is still understandable for out-of-school programmers - much more readable than Rust for instance.</li>
</ul>


<p>To by fair, I used typed pointers in <code>TScheduler.BuildTripResponse</code> but it is not so hard getting their purpose, and FPC compiles this function into very efficient assembly. I could have used regular dynamic array access with indexes, it would have been slightly slower, but not really easier to follow, nor safer (if we compile with no range checking).</p>


<p>Worth noting that we did not make any specific tuning, like pre-allocating the results with constants, as other frameworks did. We just specified the data, then let <em>mORMot</em> play with it - that's all.<br>
The <em>mORMot</em> RTTI level matches what we expect for modern frameworks: not only some classes to store JSON, but convenient serialization/unserialization using structures like class or record.<br>
Using modern Pascal dynamic arrays and records to define the data structures let the compiler leverage the memory for us, with no need to write any <code>try..finally..Free</code> blocks, and use interfaces. "Manual memory management" with Pascal is not mandatory and can easily be bypassed. Only for the WebServer, we have a <code>Free</code>, which is expected to close it.</p>


<h4>Give Me Some Numbers</h4>


<p>Here are a performance comparison with Go (FPC on the left, Go on the right):</p>

<pre>parsed 1790905 stop times in 968.43ms                         | parsed 1790905 stop times in 3.245251432s
parsed 71091 trips in 39.54ms                                 | parsed 71091 trips in 85.747852ms

running (0m33.4s), 00/50 VUs, 348 complete and 0 interrupted  | running (0m32.3s), 00/50 VUs, 320 complete and 0 interrupted
default ✓ [======================================] 50 VUs  30   default ✓ [======================================] 50 VUs  30

     data_received..................: 31 GB  933 MB/s         |      data_received..................: 31 GB  971 MB/s
     data_sent......................: 3.2 MB 97 kB/s          |      data_sent......................: 3.0 MB 92 kB/s
     http_req_blocked...............: avg=9µs     min=1.09µs  |      http_req_blocked...............: avg=6.77µs  min=1.09µs
     http_req_connecting............: avg=2.95µs  min=0s      |      http_req_connecting............: avg=1.73µs  min=0s     
     http_req_duration..............: avg=47.59ms min=97.28µs |      http_req_duration..............: avg=49.02ms min=123.81µ
       { expected_response:true }...: avg=47.59ms min=97.28µs |        { expected_response:true }...: avg=49.02ms min=123.81µ
     http_req_failed................: 0.00%  ✓ 0           ✗  |      http_req_failed................: 0.00%  ✓ 0          ✗ 3
     http_req_receiving.............: avg=9.66ms  min=15.35µs |      http_req_receiving.............: avg=5.92ms  min=14.76µs
     http_req_sending...............: avg=87.24µs min=5.2µs   |      http_req_sending...............: avg=70.71µs min=5.2µs 
     http_req_tls_handshaking.......: avg=0s      min=0s      |      http_req_tls_handshaking.......: avg=0s      min=0s     
     http_req_waiting...............: avg=37.83ms min=54.74µs |      http_req_waiting...............: avg=43.02ms min=91.84µs
     http_reqs......................: 34452  1032.205528/s    |      http_reqs......................: 31680  981.949476/s
     iteration_duration.............: avg=4.72s   min=3.54s   |      iteration_duration.............: avg=4.86s   min=2.19s 
     iterations.....................: 348    10.426318/s      |      iterations.....................: 320    9.918682/s
     vus............................: 30     min=30        ma |      vus............................: 15     min=15       max
     vus_max........................: 50     min=50        ma |      vus_max........................: 50     min=50       max
</pre>


<p>So CSV loading was much faster, then the HTTP server performance was almost the same.</p>


<h4>No Alzheimer</h4>


<p>Here are some numbers about memory consumption:</p>


<blockquote><p>Upon finished loading the CSV, mORMot only eats 80MB, heck so little. Sounds a bit magical. But during load test, it fluctuates between 250-350MB, upon which it returns to 80MB at the end.
The Go version eats 925MB upon finished loading the CSV. During load test, it tops at 1.5GB, returning to 925MB afterwards.</p></blockquote>


<p>Nice to read. :)</p>


<h4>Pascal has a Modern and Capable Ecosystem</h4>


<p>This article was not only about Pascal, but about algorithms and libraries.<br>
The challenge was initially about comparing them. Not only as unrealistic micro-benchmarks, or "computer language benchmark games", but as data processing abilities on a real usecase.</p>


<p><strong>And... Pascal is still in the race for sure!</strong><br>
Not only for "old" people like me - I just got 50 years old. ;-)</p>


<p>The more we spread such kind of information, the less people would make jokes about pascal programmers.<br>
Delphi and FPC are as old as Java, so it is time to get the big picture, not following marketing trends.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Krita 5.2 (208 pts)]]></title>
            <link>https://krita.org/en/item/krita-5-2-released/</link>
            <guid>37844478</guid>
            <pubDate>Wed, 11 Oct 2023 13:58:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krita.org/en/item/krita-5-2-released/">https://krita.org/en/item/krita-5-2-released/</a>, See on <a href="https://news.ycombinator.com/item?id=37844478">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-13864"><p><em>Published &nbsp;&nbsp;&nbsp;11th October, 2023</em></p><p>After a year of hard work, Krita 5.2 is finally here, bringing <a href="https://krita.org/en/krita-5-2-release-notes/">a variety of new features</a>, ranging from fundamental changes in text and animation-audio handling to various smaller items like transforming all selected layers!</p><p><a href="https://krita.org/wp-content/uploads/2023/10/5.2.0-1.png"><img decoding="async" fetchpriority="high" src="https://krita.org/wp-content/uploads/2023/10/5.2.0-1-1024x686.png" data-src="https://krita.org/wp-content/uploads/2023/10/5.2.0-1-1024x686.png" alt="" width="1024" height="686" data-srcset="https://krita.org/wp-content/uploads/2023/10/5.2.0-1-1024x686.png 1024w, https://krita.org/wp-content/uploads/2023/10/5.2.0-1-300x201.png 300w, https://krita.org/wp-content/uploads/2023/10/5.2.0-1-768x515.png 768w, https://krita.org/wp-content/uploads/2023/10/5.2.0-1.png 1526w" data-sizes="(max-width: 1024px) 100vw, 1024px" srcset="https://krita.org/wp-content/uploads/2023/10/5.2.0-1-1024x686.png 1024w, https://krita.org/wp-content/uploads/2023/10/5.2.0-1-300x201.png 300w, https://krita.org/wp-content/uploads/2023/10/5.2.0-1-768x515.png 768w, https://krita.org/wp-content/uploads/2023/10/5.2.0-1.png 1526w"></a></p><p>The following fixes were made in response to all your bug reports for the <a href="https://krita.org/en/item/krita-5-2-release-candidate-is-out/">first release candidate</a>:</p><ul>
<li>Set updateRect to widget rect on fractional hidpi screen (<a href="https://bugs.kde.org/show_bug.cgi?id=441216">Bug 441216</a>)</li>
<li>Fix link to Scripting API in About splash (Thanks, Matt Alexander)</li>
<li>Fix loading swatchbook CMYK palettes (<a href="https://bugs.kde.org/show_bug.cgi?id=474583">Bug 474583</a>)</li>
<li>Remove a warning from KisTransactionData…possiblySwitchCurrentTime() (<a href="https://bugs.kde.org/show_bug.cgi?id=474123">Bug 474123</a>)</li>
<li>Several QImage optimizations from Fushan Wen</li>
<li>Fix crash when copy-pasting a transformation mask (<a href="https://bugs.kde.org/show_bug.cgi?id=474673">Bug 474673</a>)</li>
<li>Make sure that saved encoder settings are supported by FFmpeg (<a href="https://bugs.kde.org/show_bug.cgi?id=474559">Bug 474559</a>)</li>
<li>Fix external FFmpeg not working on Linux due to clash in LD_LIBRARY_PATH (<a href="https://bugs.kde.org/show_bug.cgi?id=473603">Bug 473603</a>)</li>
<li>Make sure that splitter state is saved in Preset Chooser (<a href="https://bugs.kde.org/show_bug.cgi?id=474669">Bug 474669</a>)</li>
<li>Update webp to the latest version</li>
<li>Fix setting size of text brushtip</li>
<li>Fix removal of duplicated frames in “Only Unique Frames” mode (<a href="https://bugs.kde.org/show_bug.cgi?id=450449">Bug 450449</a>)</li>
<li>Added openh264 presets to the recorder plugin (<a href="https://bugs.kde.org/show_bug.cgi?id=474803">Bug 474803</a>)</li>
<li>Fix layer selection menus piling up until closing the canvas</li>
<li>Fix a crash after removing a vector layer with active selection of shapes (<a href="https://bugs.kde.org/show_bug.cgi?id=474476">Bug 474476</a>)</li>
<li>Fix detection of FFmpeg in AppImages (<a href="https://bugs.kde.org/show_bug.cgi?id=474927">Bug 474927</a>)</li>
<li>Fix misbehavior in the “grow until darkest pixel” selection filter (<a href="https://bugs.kde.org/show_bug.cgi?id=475014">Bug 475014</a>)</li>
<li>Welcome Page: Added bare minimum close/hide button to dev fund banner.</li>
<li>Update libvpx to 1.13.1 that fixes 0-day vulnerability</li>
<li>Fix brush rotation when using Airbrush mode (<a href="https://bugs.kde.org/show_bug.cgi?id=455627">Bug 455627</a>)</li></ul><p>In addition to the many new features listed in the <a href="https://krita.org/en/krita-5-2-release-notes/">release notes</a>, there is also an updated welcome screen with larger thumbnails for recent images:</p><p><a href="http://fund.krita.org/"><img decoding="async" src="https://krita.org/wp-content/uploads/2023/10/5.2.0-2-1024x686.png" data-src="https://krita.org/wp-content/uploads/2023/10/5.2.0-2-1024x686.png" alt="screenshot of Krita's new welcome screen" width="1024" height="686" data-srcset="https://krita.org/wp-content/uploads/2023/10/5.2.0-2-1024x686.png 1024w, https://krita.org/wp-content/uploads/2023/10/5.2.0-2-300x201.png 300w, https://krita.org/wp-content/uploads/2023/10/5.2.0-2-768x515.png 768w, https://krita.org/wp-content/uploads/2023/10/5.2.0-2.png 1526w" data-sizes="(max-width: 1024px) 100vw, 1024px" srcset="https://krita.org/wp-content/uploads/2023/10/5.2.0-2-1024x686.png 1024w, https://krita.org/wp-content/uploads/2023/10/5.2.0-2-300x201.png 300w, https://krita.org/wp-content/uploads/2023/10/5.2.0-2-768x515.png 768w, https://krita.org/wp-content/uploads/2023/10/5.2.0-2.png 1526w"></a></p><h2>Download</h2><h3>Windows</h3><p>If you’re using the portable zip files, just open the zip file in Explorer and drag the folder somewhere convenient, then double-click on the Krita icon in the folder. This will not impact an installed version of Krita, though it will share your settings and custom resources with your regular installed version of Krita. For reporting crashes, also get the debug symbols folder.</p><p>Note that we are not making 32 bits Windows builds anymore.</p><ul>
<li>64 bits Windows Installer: <a href="https://download.kde.org/stable/krita/5.2.0/krita-x64-5.2.0-setup.exe">krita-x64-5.2.0-setup.exe</a></li>
<li>Portable 64 bits Windows: <a href="https://download.kde.org/stable/krita/5.2.0/krita-x64-5.2.0.zip">krita-x64-5.2.0.zip</a></li>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-x64-5.2.0-dbg.zip">Debug symbols. (Unpack in the Krita installation folder)</a></li></ul><h3>Linux</h3><ul>
<li>64 bits Linux: <a href="https://download.kde.org/stable/krita/5.2.0/krita-5.2.0-x86_64.appimage">krita-5.2.0-x86_64.appimage</a></li></ul><p>The separate gmic-qt AppImage is no longer needed.</p><p>(If, for some reason, Firefox thinks it needs to load this as text: to download, right-click on the link.)</p><h3>macOS</h3><p>Note: if you use macOS Sierra or High Sierra, please <a href="https://www.youtube.com/watch?v=3py0kgq95Hk">check this video</a> to learn how to enable starting developer-signed binaries, instead of just Apple Store binaries.</p><ul>
<li>macOS disk image: <a href="https://download.kde.org/stable/krita/5.2.0/krita-5.2.0.dmg">krita-5.2.0.dmg</a></li></ul><h3>Android</h3><p>We consider Krita on ChromeOS as ready for production. Krita on Android is still <strong><i>beta</i></strong>. Krita is not available for Android phones, only for tablets, because the user interface requires a large screen.</p><ul>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-x86_64-5.2.0-release-signed.apk">64 bits Intel CPU APK</a></li>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-x86-5.2.0-release-signed.apk">32 bits Intel CPU APK</a></li>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-arm64-v8a-5.2.0-release-signed.apk">64 bits Arm CPU APK</a></li>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-armeabi-v7a-5.2.0-release-signed.apk">32 bits Arm CPU APK</a></li></ul><h3>Source code</h3><ul>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-5.2.0.tar.gz">krita-5.2.0.tar.gz</a></li>
<li><a href="https://download.kde.org/stable/krita/5.2.0/krita-5.2.0.tar.xz">krita-5.2.0.tar.xz</a></li></ul><h3>md5sum</h3><p>For all downloads, visit <a href="https://download.kde.org/stable/krita/5.2.0">https://download.kde.org/stable/krita/5.2.0/</a> and click on Details to get the hashes.</p><h3>Key</h3><p>The Linux AppImage and the source .tar.gz and .tar.xz tarballs are signed. This particular release is signed with a non-standard key, you can retrieve is <a href="https://files.kde.org/krita/4DA79EDA231C852B">here</a> or download from the public server:</p><pre>gpg --recv-keys E9FB29E74ADEACC5E3035B8AB69EB4CF7468332F</pre><p>The signatures are <a href="https://download.kde.org/stable/krita/5.2.0/">here</a> (filenames ending in .sig).</p></div><div><p><h3>Krita Mailing List</h3></p><p id="emailSignupMessage">
Be notified with new downloads and upcoming release information. We will not send you any type of Sale or Limited Time Only junk. Just the good stuff!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SQL Reserved Words – The Empirical List (138 pts)]]></title>
            <link>https://modern-sql.com/reserved-words-empirical-list</link>
            <guid>37844305</guid>
            <pubDate>Wed, 11 Oct 2023 13:45:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://modern-sql.com/reserved-words-empirical-list">https://modern-sql.com/reserved-words-empirical-list</a>, See on <a href="https://news.ycombinator.com/item?id=37844305">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article"><p>More interesting than the <a href="https://modern-sql.com/standard/2023/reserved-words">full list of reserved words</a> is the empirical list of words that are rejected as non-delimited table or column name<a id="ref-0" href="#footnote-0" title="Future editions of the list might cover more identifier types such as type names, function names, …">0</a> by at least one tested system. Words that are actually reserved words in SQL are set in bold.</p><p>Note that you can still use these words as identifiers by putting them under double quotes (<code>"</code>).</p><p>In the following chart a check mark (✓) means that the word is accepted as unquoted table or column name.</p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 16466" style="max-width:720px"><defs><g id="none-group"><linearGradient id="noneGradient" x1="0" y1="0" x2="1" y2="0"><stop style="stop-opacity:1;stop-color:#f03b26" offset="0"></stop><stop style="stop-opacity:1;stop-color:#ba1e24" offset="1"></stop></linearGradient><path id="none" fill="url(#noneGradient)" transform="translate(-45.5,25) scale(0.17, -0.17)" d="m 362.575,156.851 c -8.765,-0.108 -17.32,-4.332 -23.87,-9.889 -8.259,-7.005 -16.205,-14.35 -23.862,-21.982 -4.714,4.988 -9.545,9.869 -14.5,14.626 -7.336,7.043 -39.279,-9.187 -31.065,-17.073 7.676,-7.368 15.017,-15.036 22.063,-22.958 -14.78,-17.312 -28.241,-35.762 -40.398,-55.022 -4.391,-6.96 5.517,-7.446 9.883,-6.73 7.569,1.242 17.771,5.145 22.09,11.989 7.123,11.285 14.688,22.237 22.709,32.814 5.469,-6.835 10.758,-13.821 15.834,-20.982 6.778,-9.563 38.757,6.93 33.759,13.981 -8.435,11.899 -17.415,23.396 -26.927,34.434 11.872,13.206 24.593,25.666 38.24,37.244 5.579,4.732 2.673,9.628 -3.956,9.548"></path></g><g id="full-group"><linearGradient id="fullGradient" x1="0" y1="0" x2="1" y2="0"><stop style="stop-opacity:1;stop-color:#6ec72f" offset="0"></stop><stop style="stop-opacity:1;stop-color:#40a93b" offset="1"></stop></linearGradient><path id="full" fill="url(#fullGradient)" transform="translate(-16,30) scale(0.17, -0.17)" d="m 190.468,190.807 c -8.258,-1.354 -16.824,-5.354 -22.09,-11.989 -17.923,-22.579 -33.142,-46.987 -46.009,-72.639 -3.98,8.493 -8.2,16.874 -12.705,25.116 -5.336,9.763 -38.381,-5.523 -33.758,-13.982 10.138,-18.552 18.91,-37.771 26.491,-57.502 1.055,-2.747 4.438,-3.27 7.014,-3.255 4.045,0.023 8.104,1.162 11.85,2.614 3.887,1.507 7.721,3.487 10.916,6.191 1.991,1.686 3.724,3.835 4.664,6.287 15.522,40.419 36.565,78.484 63.51,112.429 5.326,6.711 -6.281,7.32 -9.883,6.73"></path></g><linearGradient id="partiallyGradient" x1="0" y1="0" x2="1" y2="0"><stop style="stop-opacity:1;stop-color:#B7E900" offset="0"></stop><stop style="stop-opacity:1;stop-color:#CEE500" offset="1"></stop></linearGradient><path id="partially" fill="url(#partiallyGradient)" transform="translate(-16,30) scale(0.17, -0.17)" d="m 190.468,190.807 c -8.258,-1.354 -16.824,-5.354 -22.09,-11.989 -17.923,-22.579 -33.142,-46.987 -46.009,-72.639 -3.98,8.493 -8.2,16.874 -12.705,25.116 -5.336,9.763 -38.381,-5.523 -33.758,-13.982 10.138,-18.552 18.91,-37.771 26.491,-57.502 1.055,-2.747 4.438,-3.27 7.014,-3.255 4.045,0.023 8.104,1.162 11.85,2.614 3.887,1.507 7.721,3.487 10.916,6.191 1.991,1.686 3.724,3.835 4.664,6.287 15.522,40.419 36.565,78.484 63.51,112.429 5.326,6.711 -6.281,7.32 -9.883,6.73"></path><linearGradient id="extensionGradient" x1="0" y1="0" x2="1" y2="0"><stop style="stop-opacity:1;stop-color:#787878" offset="0"></stop><stop style="stop-opacity:1;stop-color:#B0B0B0" offset="1"></stop></linearGradient><path id="extension" fill="url(#extensionGradient)" transform="translate(-16,30) scale(0.17, -0.17)" d="m 190.468,190.807 c -8.258,-1.354 -16.824,-5.354 -22.09,-11.989 -17.923,-22.579 -33.142,-46.987 -46.009,-72.639 -3.98,8.493 -8.2,16.874 -12.705,25.116 -5.336,9.763 -38.381,-5.523 -33.758,-13.982 10.138,-18.552 18.91,-37.771 26.491,-57.502 1.055,-2.747 4.438,-3.27 7.014,-3.255 4.045,0.023 8.104,1.162 11.85,2.614 3.887,1.507 7.721,3.487 10.916,6.191 1.991,1.686 3.724,3.835 4.664,6.287 15.522,40.419 36.565,78.484 63.51,112.429 5.326,6.711 -6.281,7.32 -9.883,6.73"></path></defs><g><title>Apache Derby</title><path d="M285,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(226.5, 83) rotate(-45)">Apache Derby</text><use href="#full" transform="translate(210,92)"></use><use href="#full" transform="translate(210,122)"></use><use href="#none" transform="translate(210,152)"></use><use href="#none" transform="translate(210,182)"></use><use href="#none" transform="translate(210,212)"></use><use href="#none" transform="translate(210,242)"></use><use href="#full" transform="translate(210,272)"></use><use href="#full" transform="translate(210,302)"></use><use href="#none" transform="translate(210,332)"></use><use href="#none" transform="translate(210,362)"></use><use href="#none" transform="translate(210,392)"></use><use href="#full" transform="translate(210,422)"></use><use href="#none" transform="translate(210,452)"></use><use href="#none" transform="translate(210,482)"></use><use href="#full" transform="translate(210,512)"></use><use href="#none" transform="translate(210,542)"></use><use href="#full" transform="translate(210,572)"></use><use href="#none" transform="translate(210,602)"></use><use href="#full" transform="translate(210,632)"></use><use href="#none" transform="translate(210,662)"></use><use href="#full" transform="translate(210,692)"></use><use href="#none" transform="translate(210,722)"></use><use href="#full" transform="translate(210,752)"></use><use href="#full" transform="translate(210,782)"></use><use href="#none" transform="translate(210,812)"></use><use href="#none" transform="translate(210,842)"></use><use href="#none" transform="translate(210,872)"></use><use href="#full" transform="translate(210,902)"></use><use href="#none" transform="translate(210,932)"></use><use href="#full" transform="translate(210,962)"></use><use href="#none" transform="translate(210,992)"></use><use href="#none" transform="translate(210,1022)"></use><use href="#full" transform="translate(210,1052)"></use><use href="#full" transform="translate(210,1082)"></use><use href="#full" transform="translate(210,1112)"></use><use href="#none" transform="translate(210,1142)"></use><use href="#none" transform="translate(210,1172)"></use><use href="#none" transform="translate(210,1202)"></use><use href="#none" transform="translate(210,1232)"></use><use href="#none" transform="translate(210,1262)"></use><use href="#none" transform="translate(210,1292)"></use><use href="#full" transform="translate(210,1322)"></use><use href="#none" transform="translate(210,1352)"></use><use href="#none" transform="translate(210,1382)"></use><use href="#none" transform="translate(210,1412)"></use><use href="#none" transform="translate(210,1442)"></use><use href="#full" transform="translate(210,1472)"></use><use href="#none" transform="translate(210,1502)"></use><use href="#full" transform="translate(210,1532)"></use><use href="#full" transform="translate(210,1562)"></use><use href="#full" transform="translate(210,1592)"></use><use href="#none" transform="translate(210,1622)"></use><use href="#none" transform="translate(210,1652)"></use><use href="#none" transform="translate(210,1682)"></use><use href="#full" transform="translate(210,1712)"></use><use href="#none" transform="translate(210,1742)"></use><use href="#full" transform="translate(210,1772)"></use><use href="#full" transform="translate(210,1802)"></use><use href="#full" transform="translate(210,1832)"></use><use href="#full" transform="translate(210,1862)"></use><use href="#full" transform="translate(210,1892)"></use><use href="#none" transform="translate(210,1922)"></use><use href="#none" transform="translate(210,1952)"></use><use href="#none" transform="translate(210,1982)"></use><use href="#none" transform="translate(210,2012)"></use><use href="#full" transform="translate(210,2042)"></use><use href="#full" transform="translate(210,2072)"></use><use href="#none" transform="translate(210,2102)"></use><use href="#none" transform="translate(210,2132)"></use><use href="#none" transform="translate(210,2162)"></use><use href="#full" transform="translate(210,2192)"></use><use href="#none" transform="translate(210,2222)"></use><use href="#none" transform="translate(210,2252)"></use><use href="#full" transform="translate(210,2282)"></use><use href="#full" transform="translate(210,2312)"></use><use href="#none" transform="translate(210,2342)"></use><use href="#full" transform="translate(210,2372)"></use><use href="#none" transform="translate(210,2402)"></use><use href="#full" transform="translate(210,2432)"></use><use href="#none" transform="translate(210,2462)"></use><use href="#full" transform="translate(210,2492)"></use><use href="#none" transform="translate(210,2522)"></use><use href="#none" transform="translate(210,2552)"></use><use href="#none" transform="translate(210,2582)"></use><use href="#none" transform="translate(210,2612)"></use><use href="#full" transform="translate(210,2642)"></use><use href="#full" transform="translate(210,2672)"></use><use href="#full" transform="translate(210,2702)"></use><use href="#full" transform="translate(210,2732)"></use><use href="#full" transform="translate(210,2762)"></use><use href="#full" transform="translate(210,2792)"></use><use href="#full" transform="translate(210,2822)"></use><use href="#full" transform="translate(210,2852)"></use><use href="#full" transform="translate(210,2882)"></use><use href="#full" transform="translate(210,2912)"></use><use href="#none" transform="translate(210,2942)"></use><use href="#none" transform="translate(210,2972)"></use><use href="#none" transform="translate(210,3002)"></use><use href="#none" transform="translate(210,3032)"></use><use href="#none" transform="translate(210,3062)"></use><use href="#none" transform="translate(210,3092)"></use><use href="#none" transform="translate(210,3122)"></use><use href="#full" transform="translate(210,3152)"></use><use href="#none" transform="translate(210,3182)"></use><use href="#full" transform="translate(210,3212)"></use><use href="#none" transform="translate(210,3242)"></use><use href="#full" transform="translate(210,3272)"></use><use href="#full" transform="translate(210,3302)"></use><use href="#none" transform="translate(210,3332)"></use><use href="#none" transform="translate(210,3362)"></use><use href="#none" transform="translate(210,3392)"></use><use href="#none" transform="translate(210,3422)"></use><use href="#none" transform="translate(210,3452)"></use><use href="#none" transform="translate(210,3482)"></use><use href="#full" transform="translate(210,3512)"></use><use href="#full" transform="translate(210,3542)"></use><use href="#full" transform="translate(210,3572)"></use><use href="#full" transform="translate(210,3602)"></use><use href="#none" transform="translate(210,3632)"></use><use href="#none" transform="translate(210,3662)"></use><use href="#full" transform="translate(210,3692)"></use><use href="#full" transform="translate(210,3722)"></use><use href="#none" transform="translate(210,3752)"></use><use href="#full" transform="translate(210,3782)"></use><use href="#full" transform="translate(210,3812)"></use><use href="#full" transform="translate(210,3842)"></use><use href="#none" transform="translate(210,3872)"></use><use href="#none" transform="translate(210,3902)"></use><use href="#full" transform="translate(210,3932)"></use><use href="#full" transform="translate(210,3962)"></use><use href="#none" transform="translate(210,3992)"></use><use href="#full" transform="translate(210,4022)"></use><use href="#none" transform="translate(210,4052)"></use><use href="#none" transform="translate(210,4082)"></use><use href="#full" transform="translate(210,4112)"></use><use href="#full" transform="translate(210,4142)"></use><use href="#none" transform="translate(210,4172)"></use><use href="#none" transform="translate(210,4202)"></use><use href="#none" transform="translate(210,4232)"></use><use href="#full" transform="translate(210,4262)"></use><use href="#none" transform="translate(210,4292)"></use><use href="#none" transform="translate(210,4322)"></use><use href="#full" transform="translate(210,4352)"></use><use href="#none" transform="translate(210,4382)"></use><use href="#none" transform="translate(210,4412)"></use><use href="#full" transform="translate(210,4442)"></use><use href="#full" transform="translate(210,4472)"></use><use href="#full" transform="translate(210,4502)"></use><use href="#none" transform="translate(210,4532)"></use><use href="#full" transform="translate(210,4562)"></use><use href="#none" transform="translate(210,4592)"></use><use href="#full" transform="translate(210,4622)"></use><use href="#full" transform="translate(210,4652)"></use><use href="#full" transform="translate(210,4682)"></use><use href="#none" transform="translate(210,4712)"></use><use href="#full" transform="translate(210,4742)"></use><use href="#none" transform="translate(210,4772)"></use><use href="#none" transform="translate(210,4802)"></use><use href="#full" transform="translate(210,4832)"></use><use href="#full" transform="translate(210,4862)"></use><use href="#full" transform="translate(210,4892)"></use><use href="#none" transform="translate(210,4922)"></use><use href="#none" transform="translate(210,4952)"></use><use href="#full" transform="translate(210,4982)"></use><use href="#none" transform="translate(210,5012)"></use><use href="#full" transform="translate(210,5042)"></use><use href="#none" transform="translate(210,5072)"></use><use href="#full" transform="translate(210,5102)"></use><use href="#none" transform="translate(210,5132)"></use><use href="#none" transform="translate(210,5162)"></use><use href="#none" transform="translate(210,5192)"></use><use href="#none" transform="translate(210,5222)"></use><use href="#none" transform="translate(210,5252)"></use><use href="#full" transform="translate(210,5282)"></use><use href="#full" transform="translate(210,5312)"></use><use href="#full" transform="translate(210,5342)"></use><use href="#none" transform="translate(210,5372)"></use><use href="#full" transform="translate(210,5402)"></use><use href="#full" transform="translate(210,5432)"></use><use href="#none" transform="translate(210,5462)"></use><use href="#full" transform="translate(210,5492)"></use><use href="#full" transform="translate(210,5522)"></use><use href="#full" transform="translate(210,5552)"></use><use href="#full" transform="translate(210,5582)"></use><use href="#full" transform="translate(210,5612)"></use><use href="#none" transform="translate(210,5642)"></use><use href="#full" transform="translate(210,5672)"></use><use href="#full" transform="translate(210,5702)"></use><use href="#full" transform="translate(210,5732)"></use><use href="#full" transform="translate(210,5762)"></use><use href="#full" transform="translate(210,5792)"></use><use href="#none" transform="translate(210,5822)"></use><use href="#none" transform="translate(210,5852)"></use><use href="#full" transform="translate(210,5882)"></use><use href="#full" transform="translate(210,5912)"></use><use href="#full" transform="translate(210,5942)"></use><use href="#none" transform="translate(210,5972)"></use><use href="#full" transform="translate(210,6002)"></use><use href="#full" transform="translate(210,6032)"></use><use href="#none" transform="translate(210,6062)"></use><use href="#none" transform="translate(210,6092)"></use><use href="#none" transform="translate(210,6122)"></use><use href="#none" transform="translate(210,6152)"></use><use href="#none" transform="translate(210,6182)"></use><use href="#none" transform="translate(210,6212)"></use><use href="#none" transform="translate(210,6242)"></use><use href="#full" transform="translate(210,6272)"></use><use href="#full" transform="translate(210,6302)"></use><use href="#full" transform="translate(210,6332)"></use><use href="#full" transform="translate(210,6362)"></use><use href="#full" transform="translate(210,6392)"></use><use href="#none" transform="translate(210,6422)"></use><use href="#none" transform="translate(210,6452)"></use><use href="#full" transform="translate(210,6482)"></use><use href="#none" transform="translate(210,6512)"></use><use href="#none" transform="translate(210,6542)"></use><use href="#full" transform="translate(210,6572)"></use><use href="#full" transform="translate(210,6602)"></use><use href="#none" transform="translate(210,6632)"></use><use href="#full" transform="translate(210,6662)"></use><use href="#none" transform="translate(210,6692)"></use><use href="#full" transform="translate(210,6722)"></use><use href="#none" transform="translate(210,6752)"></use><use href="#full" transform="translate(210,6782)"></use><use href="#full" transform="translate(210,6812)"></use><use href="#full" transform="translate(210,6842)"></use><use href="#full" transform="translate(210,6872)"></use><use href="#none" transform="translate(210,6902)"></use><use href="#full" transform="translate(210,6932)"></use><use href="#full" transform="translate(210,6962)"></use><use href="#full" transform="translate(210,6992)"></use><use href="#none" transform="translate(210,7022)"></use><use href="#full" transform="translate(210,7052)"></use><use href="#full" transform="translate(210,7082)"></use><use href="#full" transform="translate(210,7112)"></use><use href="#none" transform="translate(210,7142)"></use><use href="#full" transform="translate(210,7172)"></use><use href="#none" transform="translate(210,7202)"></use><use href="#full" transform="translate(210,7232)"></use><use href="#none" transform="translate(210,7262)"></use><use href="#full" transform="translate(210,7292)"></use><use href="#full" transform="translate(210,7322)"></use><use href="#full" transform="translate(210,7352)"></use><use href="#full" transform="translate(210,7382)"></use><use href="#full" transform="translate(210,7412)"></use><use href="#full" transform="translate(210,7442)"></use><use href="#full" transform="translate(210,7472)"></use><use href="#full" transform="translate(210,7502)"></use><use href="#full" transform="translate(210,7532)"></use><use href="#full" transform="translate(210,7562)"></use><use href="#full" transform="translate(210,7592)"></use><use href="#full" transform="translate(210,7622)"></use><use href="#none" transform="translate(210,7652)"></use><use href="#full" transform="translate(210,7682)"></use><use href="#none" transform="translate(210,7712)"></use><use href="#full" transform="translate(210,7742)"></use><use href="#full" transform="translate(210,7772)"></use><use href="#none" transform="translate(210,7802)"></use><use href="#none" transform="translate(210,7832)"></use><use href="#full" transform="translate(210,7862)"></use><use href="#full" transform="translate(210,7892)"></use><use href="#full" transform="translate(210,7922)"></use><use href="#full" transform="translate(210,7952)"></use><use href="#full" transform="translate(210,7982)"></use><use href="#full" transform="translate(210,8012)"></use><use href="#full" transform="translate(210,8042)"></use><use href="#full" transform="translate(210,8072)"></use><use href="#full" transform="translate(210,8102)"></use><use href="#full" transform="translate(210,8132)"></use><use href="#none" transform="translate(210,8162)"></use><use href="#full" transform="translate(210,8192)"></use><use href="#none" transform="translate(210,8222)"></use><use href="#full" transform="translate(210,8252)"></use><use href="#full" transform="translate(210,8282)"></use><use href="#full" transform="translate(210,8312)"></use><use href="#full" transform="translate(210,8342)"></use><use href="#full" transform="translate(210,8372)"></use><use href="#full" transform="translate(210,8402)"></use><use href="#full" transform="translate(210,8432)"></use><use href="#full" transform="translate(210,8462)"></use><use href="#full" transform="translate(210,8492)"></use><use href="#full" transform="translate(210,8522)"></use><use href="#none" transform="translate(210,8552)"></use><use href="#none" transform="translate(210,8582)"></use><use href="#none" transform="translate(210,8612)"></use><use href="#full" transform="translate(210,8642)"></use><use href="#none" transform="translate(210,8672)"></use><use href="#none" transform="translate(210,8702)"></use><use href="#full" transform="translate(210,8732)"></use><use href="#full" transform="translate(210,8762)"></use><use href="#full" transform="translate(210,8792)"></use><use href="#full" transform="translate(210,8822)"></use><use href="#none" transform="translate(210,8852)"></use><use href="#none" transform="translate(210,8882)"></use><use href="#full" transform="translate(210,8912)"></use><use href="#full" transform="translate(210,8942)"></use><use href="#full" transform="translate(210,8972)"></use><use href="#full" transform="translate(210,9002)"></use><use href="#full" transform="translate(210,9032)"></use><use href="#full" transform="translate(210,9062)"></use><use href="#none" transform="translate(210,9092)"></use><use href="#none" transform="translate(210,9122)"></use><use href="#full" transform="translate(210,9152)"></use><use href="#full" transform="translate(210,9182)"></use><use href="#none" transform="translate(210,9212)"></use><use href="#none" transform="translate(210,9242)"></use><use href="#none" transform="translate(210,9272)"></use><use href="#full" transform="translate(210,9302)"></use><use href="#full" transform="translate(210,9332)"></use><use href="#full" transform="translate(210,9362)"></use><use href="#full" transform="translate(210,9392)"></use><use href="#none" transform="translate(210,9422)"></use><use href="#full" transform="translate(210,9452)"></use><use href="#none" transform="translate(210,9482)"></use><use href="#none" transform="translate(210,9512)"></use><use href="#full" transform="translate(210,9542)"></use><use href="#full" transform="translate(210,9572)"></use><use href="#full" transform="translate(210,9602)"></use><use href="#full" transform="translate(210,9632)"></use><use href="#full" transform="translate(210,9662)"></use><use href="#full" transform="translate(210,9692)"></use><use href="#none" transform="translate(210,9722)"></use><use href="#full" transform="translate(210,9752)"></use><use href="#none" transform="translate(210,9782)"></use><use href="#none" transform="translate(210,9812)"></use><use href="#none" transform="translate(210,9842)"></use><use href="#none" transform="translate(210,9872)"></use><use href="#full" transform="translate(210,9902)"></use><use href="#none" transform="translate(210,9932)"></use><use href="#full" transform="translate(210,9962)"></use><use href="#none" transform="translate(210,9992)"></use><use href="#none" transform="translate(210,10022)"></use><use href="#none" transform="translate(210,10052)"></use><use href="#full" transform="translate(210,10082)"></use><use href="#full" transform="translate(210,10112)"></use><use href="#full" transform="translate(210,10142)"></use><use href="#full" transform="translate(210,10172)"></use><use href="#full" transform="translate(210,10202)"></use><use href="#full" transform="translate(210,10232)"></use><use href="#full" transform="translate(210,10262)"></use><use href="#full" transform="translate(210,10292)"></use><use href="#full" transform="translate(210,10322)"></use><use href="#full" transform="translate(210,10352)"></use><use href="#full" transform="translate(210,10382)"></use><use href="#full" transform="translate(210,10412)"></use><use href="#full" transform="translate(210,10442)"></use><use href="#none" transform="translate(210,10472)"></use><use href="#none" transform="translate(210,10502)"></use><use href="#none" transform="translate(210,10532)"></use><use href="#full" transform="translate(210,10562)"></use><use href="#none" transform="translate(210,10592)"></use><use href="#none" transform="translate(210,10622)"></use><use href="#full" transform="translate(210,10652)"></use><use href="#none" transform="translate(210,10682)"></use><use href="#none" transform="translate(210,10712)"></use><use href="#full" transform="translate(210,10742)"></use><use href="#full" transform="translate(210,10772)"></use><use href="#full" transform="translate(210,10802)"></use><use href="#full" transform="translate(210,10832)"></use><use href="#full" transform="translate(210,10862)"></use><use href="#full" transform="translate(210,10892)"></use><use href="#none" transform="translate(210,10922)"></use><use href="#full" transform="translate(210,10952)"></use><use href="#full" transform="translate(210,10982)"></use><use href="#full" transform="translate(210,11012)"></use><use href="#none" transform="translate(210,11042)"></use><use href="#full" transform="translate(210,11072)"></use><use href="#full" transform="translate(210,11102)"></use><use href="#none" transform="translate(210,11132)"></use><use href="#full" transform="translate(210,11162)"></use><use href="#none" transform="translate(210,11192)"></use><use href="#full" transform="translate(210,11222)"></use><use href="#full" transform="translate(210,11252)"></use><use href="#full" transform="translate(210,11282)"></use><use href="#full" transform="translate(210,11312)"></use><use href="#full" transform="translate(210,11342)"></use><use href="#full" transform="translate(210,11372)"></use><use href="#full" transform="translate(210,11402)"></use><use href="#full" transform="translate(210,11432)"></use><use href="#full" transform="translate(210,11462)"></use><use href="#full" transform="translate(210,11492)"></use><use href="#none" transform="translate(210,11522)"></use><use href="#full" transform="translate(210,11552)"></use><use href="#full" transform="translate(210,11582)"></use><use href="#full" transform="translate(210,11612)"></use><use href="#none" transform="translate(210,11642)"></use><use href="#none" transform="translate(210,11672)"></use><use href="#full" transform="translate(210,11702)"></use><use href="#none" transform="translate(210,11732)"></use><use href="#full" transform="translate(210,11762)"></use><use href="#full" transform="translate(210,11792)"></use><use href="#full" transform="translate(210,11822)"></use><use href="#full" transform="translate(210,11852)"></use><use href="#full" transform="translate(210,11882)"></use><use href="#full" transform="translate(210,11912)"></use><use href="#none" transform="translate(210,11942)"></use><use href="#partially" transform="translate(210,11972)"></use><text x="226" y="11991"><title>Not as expression</title>a</text><use href="#none" transform="translate(210,12002)"></use><use href="#full" transform="translate(210,12032)"></use><use href="#full" transform="translate(210,12062)"></use><use href="#none" transform="translate(210,12092)"></use><use href="#full" transform="translate(210,12122)"></use><use href="#none" transform="translate(210,12152)"></use><use href="#none" transform="translate(210,12182)"></use><use href="#full" transform="translate(210,12212)"></use><use href="#full" transform="translate(210,12242)"></use><use href="#none" transform="translate(210,12272)"></use><use href="#full" transform="translate(210,12302)"></use><use href="#full" transform="translate(210,12332)"></use><use href="#full" transform="translate(210,12362)"></use><use href="#full" transform="translate(210,12392)"></use><use href="#full" transform="translate(210,12422)"></use><use href="#full" transform="translate(210,12452)"></use><use href="#none" transform="translate(210,12482)"></use><use href="#none" transform="translate(210,12512)"></use><use href="#full" transform="translate(210,12542)"></use><use href="#full" transform="translate(210,12572)"></use><use href="#full" transform="translate(210,12602)"></use><use href="#full" transform="translate(210,12632)"></use><use href="#full" transform="translate(210,12662)"></use><use href="#full" transform="translate(210,12692)"></use><use href="#full" transform="translate(210,12722)"></use><use href="#none" transform="translate(210,12752)"></use><use href="#none" transform="translate(210,12782)"></use><use href="#full" transform="translate(210,12812)"></use><use href="#none" transform="translate(210,12842)"></use><use href="#full" transform="translate(210,12872)"></use><use href="#full" transform="translate(210,12902)"></use><use href="#none" transform="translate(210,12932)"></use><use href="#none" transform="translate(210,12962)"></use><use href="#none" transform="translate(210,12992)"></use><use href="#full" transform="translate(210,13022)"></use><use href="#partially" transform="translate(210,13052)"></use><text x="226" y="13071"><title>Not for column renaming without AS clause</title>b</text><use href="#none" transform="translate(210,13082)"></use><use href="#full" transform="translate(210,13112)"></use><use href="#full" transform="translate(210,13142)"></use><use href="#full" transform="translate(210,13172)"></use><use href="#full" transform="translate(210,13202)"></use><use href="#full" transform="translate(210,13232)"></use><use href="#full" transform="translate(210,13262)"></use><use href="#full" transform="translate(210,13292)"></use><use href="#full" transform="translate(210,13322)"></use><use href="#full" transform="translate(210,13352)"></use><use href="#full" transform="translate(210,13382)"></use><use href="#full" transform="translate(210,13412)"></use><use href="#full" transform="translate(210,13442)"></use><use href="#full" transform="translate(210,13472)"></use><use href="#full" transform="translate(210,13502)"></use><use href="#full" transform="translate(210,13532)"></use><use href="#full" transform="translate(210,13562)"></use><use href="#full" transform="translate(210,13592)"></use><use href="#full" transform="translate(210,13622)"></use><use href="#none" transform="translate(210,13652)"></use><use href="#full" transform="translate(210,13682)"></use><use href="#none" transform="translate(210,13712)"></use><use href="#full" transform="translate(210,13742)"></use><use href="#full" transform="translate(210,13772)"></use><use href="#full" transform="translate(210,13802)"></use><use href="#full" transform="translate(210,13832)"></use><use href="#none" transform="translate(210,13862)"></use><use href="#none" transform="translate(210,13892)"></use><use href="#full" transform="translate(210,13922)"></use><use href="#none" transform="translate(210,13952)"></use><use href="#full" transform="translate(210,13982)"></use><use href="#full" transform="translate(210,14012)"></use><use href="#full" transform="translate(210,14042)"></use><use href="#none" transform="translate(210,14072)"></use><use href="#none" transform="translate(210,14102)"></use><use href="#full" transform="translate(210,14132)"></use><use href="#full" transform="translate(210,14162)"></use><use href="#full" transform="translate(210,14192)"></use><use href="#none" transform="translate(210,14222)"></use><use href="#full" transform="translate(210,14252)"></use><use href="#none" transform="translate(210,14282)"></use><use href="#full" transform="translate(210,14312)"></use><use href="#none" transform="translate(210,14342)"></use><use href="#none" transform="translate(210,14372)"></use><use href="#none" transform="translate(210,14402)"></use><use href="#full" transform="translate(210,14432)"></use><use href="#full" transform="translate(210,14462)"></use><use href="#none" transform="translate(210,14492)"></use><use href="#none" transform="translate(210,14522)"></use><use href="#full" transform="translate(210,14552)"></use><use href="#full" transform="translate(210,14582)"></use><use href="#full" transform="translate(210,14612)"></use><use href="#full" transform="translate(210,14642)"></use><use href="#full" transform="translate(210,14672)"></use><use href="#full" transform="translate(210,14702)"></use><use href="#full" transform="translate(210,14732)"></use><use href="#none" transform="translate(210,14762)"></use><use href="#none" transform="translate(210,14792)"></use><use href="#none" transform="translate(210,14822)"></use><use href="#full" transform="translate(210,14852)"></use><use href="#full" transform="translate(210,14882)"></use><use href="#full" transform="translate(210,14912)"></use><use href="#full" transform="translate(210,14942)"></use><use href="#none" transform="translate(210,14972)"></use><use href="#full" transform="translate(210,15002)"></use><use href="#none" transform="translate(210,15032)"></use><use href="#full" transform="translate(210,15062)"></use><use href="#full" transform="translate(210,15092)"></use><use href="#none" transform="translate(210,15122)"></use><use href="#none" transform="translate(210,15152)"></use><use href="#full" transform="translate(210,15182)"></use><use href="#full" transform="translate(210,15212)"></use><use href="#full" transform="translate(210,15242)"></use><use href="#full" transform="translate(210,15272)"></use><use href="#full" transform="translate(210,15302)"></use><use href="#none" transform="translate(210,15332)"></use><use href="#full" transform="translate(210,15362)"></use><use href="#none" transform="translate(210,15392)"></use><use href="#full" transform="translate(210,15422)"></use><use href="#full" transform="translate(210,15452)"></use><use href="#full" transform="translate(210,15482)"></use><use href="#none" transform="translate(210,15512)"></use><use href="#full" transform="translate(210,15542)"></use><use href="#full" transform="translate(210,15572)"></use><use href="#full" transform="translate(210,15602)"></use><use href="#none" transform="translate(210,15632)"></use><use href="#full" transform="translate(210,15662)"></use><use href="#full" transform="translate(210,15692)"></use><use href="#full" transform="translate(210,15722)"></use><use href="#none" transform="translate(210,15752)"></use><use href="#none" transform="translate(210,15782)"></use><use href="#full" transform="translate(210,15812)"></use><use href="#none" transform="translate(210,15842)"></use><use href="#none" transform="translate(210,15872)"></use><use href="#full" transform="translate(210,15902)"></use><use href="#none" transform="translate(210,15932)"></use><use href="#full" transform="translate(210,15962)"></use><use href="#none" transform="translate(210,15992)"></use><use href="#none" transform="translate(210,16022)"></use><use href="#full" transform="translate(210,16052)"></use><use href="#none" transform="translate(210,16082)"></use><use href="#full" transform="translate(210,16112)"></use><use href="#none" transform="translate(210,16142)"></use><use href="#full" transform="translate(210,16172)"></use><use href="#none" transform="translate(210,16202)"></use><use href="#none" transform="translate(210,16232)"></use><use href="#full" transform="translate(210,16262)"></use><use href="#none" transform="translate(210,16292)"></use><use href="#full" transform="translate(210,16322)"></use><use href="#none" transform="translate(210,16352)"></use><use href="#full" transform="translate(210,16382)"></use><use href="#full" transform="translate(210,16412)"></use><use href="#full" transform="translate(210,16442)"></use></g><g><title>BigQuery</title><path d="M320,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(261.5, 83) rotate(-45)">BigQuery</text><use href="#full" transform="translate(245,92)"></use><use href="#full" transform="translate(245,122)"></use><use href="#full" transform="translate(245,152)"></use><use href="#none" transform="translate(245,182)"></use><use href="#full" transform="translate(245,212)"></use><use href="#full" transform="translate(245,242)"></use><use href="#full" transform="translate(245,272)"></use><use href="#full" transform="translate(245,302)"></use><use href="#none" transform="translate(245,332)"></use><use href="#none" transform="translate(245,362)"></use><use href="#full" transform="translate(245,392)"></use><use href="#none" transform="translate(245,422)"></use><use href="#none" transform="translate(245,452)"></use><use href="#none" transform="translate(245,482)"></use><use href="#full" transform="translate(245,512)"></use><use href="#full" transform="translate(245,542)"></use><use href="#full" transform="translate(245,572)"></use><use href="#none" transform="translate(245,602)"></use><use href="#full" transform="translate(245,632)"></use><use href="#full" transform="translate(245,662)"></use><use href="#full" transform="translate(245,692)"></use><use href="#full" transform="translate(245,722)"></use><use href="#full" transform="translate(245,752)"></use><use href="#full" transform="translate(245,782)"></use><use href="#full" transform="translate(245,812)"></use><use href="#none" transform="translate(245,842)"></use><use href="#full" transform="translate(245,872)"></use><use href="#full" transform="translate(245,902)"></use><use href="#full" transform="translate(245,932)"></use><use href="#full" transform="translate(245,962)"></use><use href="#full" transform="translate(245,992)"></use><use href="#full" transform="translate(245,1022)"></use><use href="#full" transform="translate(245,1052)"></use><use href="#full" transform="translate(245,1082)"></use><use href="#full" transform="translate(245,1112)"></use><use href="#none" transform="translate(245,1142)"></use><use href="#full" transform="translate(245,1172)"></use><use href="#full" transform="translate(245,1202)"></use><use href="#full" transform="translate(245,1232)"></use><use href="#none" transform="translate(245,1262)"></use><use href="#none" transform="translate(245,1292)"></use><use href="#full" transform="translate(245,1322)"></use><use href="#full" transform="translate(245,1352)"></use><use href="#full" transform="translate(245,1382)"></use><use href="#full" transform="translate(245,1412)"></use><use href="#full" transform="translate(245,1442)"></use><use href="#full" transform="translate(245,1472)"></use><use href="#full" transform="translate(245,1502)"></use><use href="#full" transform="translate(245,1532)"></use><use href="#full" transform="translate(245,1562)"></use><use href="#full" transform="translate(245,1592)"></use><use href="#none" transform="translate(245,1622)"></use><use href="#full" transform="translate(245,1652)"></use><use href="#full" transform="translate(245,1682)"></use><use href="#full" transform="translate(245,1712)"></use><use href="#full" transform="translate(245,1742)"></use><use href="#full" transform="translate(245,1772)"></use><use href="#full" transform="translate(245,1802)"></use><use href="#full" transform="translate(245,1832)"></use><use href="#full" transform="translate(245,1862)"></use><use href="#full" transform="translate(245,1892)"></use><use href="#full" transform="translate(245,1922)"></use><use href="#full" transform="translate(245,1952)"></use><use href="#full" transform="translate(245,1982)"></use><use href="#full" transform="translate(245,2012)"></use><use href="#none" transform="translate(245,2042)"></use><use href="#full" transform="translate(245,2072)"></use><use href="#full" transform="translate(245,2102)"></use><use href="#full" transform="translate(245,2132)"></use><use href="#full" transform="translate(245,2162)"></use><use href="#full" transform="translate(245,2192)"></use><use href="#none" transform="translate(245,2222)"></use><use href="#none" transform="translate(245,2252)"></use><use href="#none" transform="translate(245,2282)"></use><use href="#full" transform="translate(245,2312)"></use><use href="#none" transform="translate(245,2342)"></use><use href="#full" transform="translate(245,2372)"></use><use href="#full" transform="translate(245,2402)"></use><use href="#full" transform="translate(245,2432)"></use><use href="#full" transform="translate(245,2462)"></use><use href="#full" transform="translate(245,2492)"></use><use href="#full" transform="translate(245,2522)"></use><use href="#full" transform="translate(245,2552)"></use><use href="#full" transform="translate(245,2582)"></use><use href="#full" transform="translate(245,2612)"></use><use href="#full" transform="translate(245,2642)"></use><use href="#full" transform="translate(245,2672)"></use><use href="#full" transform="translate(245,2702)"></use><use href="#full" transform="translate(245,2732)"></use><use href="#full" transform="translate(245,2762)"></use><use href="#full" transform="translate(245,2792)"></use><use href="#full" transform="translate(245,2822)"></use><use href="#full" transform="translate(245,2852)"></use><use href="#full" transform="translate(245,2882)"></use><use href="#full" transform="translate(245,2912)"></use><use href="#full" transform="translate(245,2942)"></use><use href="#full" transform="translate(245,2972)"></use><use href="#full" transform="translate(245,3002)"></use><use href="#full" transform="translate(245,3032)"></use><use href="#none" transform="translate(245,3062)"></use><use href="#full" transform="translate(245,3092)"></use><use href="#full" transform="translate(245,3122)"></use><use href="#none" transform="translate(245,3152)"></use><use href="#full" transform="translate(245,3182)"></use><use href="#full" transform="translate(245,3212)"></use><use href="#full" transform="translate(245,3242)"></use><use href="#full" transform="translate(245,3272)"></use><use href="#full" transform="translate(245,3302)"></use><use href="#none" transform="translate(245,3332)"></use><use href="#full" transform="translate(245,3362)"></use><use href="#full" transform="translate(245,3392)"></use><use href="#full" transform="translate(245,3422)"></use><use href="#full" transform="translate(245,3452)"></use><use href="#none" transform="translate(245,3482)"></use><use href="#full" transform="translate(245,3512)"></use><use href="#full" transform="translate(245,3542)"></use><use href="#full" transform="translate(245,3572)"></use><use href="#full" transform="translate(245,3602)"></use><use href="#full" transform="translate(245,3632)"></use><use href="#full" transform="translate(245,3662)"></use><use href="#full" transform="translate(245,3692)"></use><use href="#full" transform="translate(245,3722)"></use><use href="#none" transform="translate(245,3752)"></use><use href="#full" transform="translate(245,3782)"></use><use href="#full" transform="translate(245,3812)"></use><use href="#full" transform="translate(245,3842)"></use><use href="#none" transform="translate(245,3872)"></use><use href="#none" transform="translate(245,3902)"></use><use href="#none" transform="translate(245,3932)"></use><use href="#full" transform="translate(245,3962)"></use><use href="#none" transform="translate(245,3992)"></use><use href="#full" transform="translate(245,4022)"></use><use href="#none" transform="translate(245,4052)"></use><use href="#full" transform="translate(245,4082)"></use><use href="#none" transform="translate(245,4112)"></use><use href="#full" transform="translate(245,4142)"></use><use href="#full" transform="translate(245,4172)"></use><use href="#full" transform="translate(245,4202)"></use><use href="#none" transform="translate(245,4232)"></use><use href="#full" transform="translate(245,4262)"></use><use href="#full" transform="translate(245,4292)"></use><use href="#full" transform="translate(245,4322)"></use><use href="#none" transform="translate(245,4352)"></use><use href="#none" transform="translate(245,4382)"></use><use href="#none" transform="translate(245,4412)"></use><use href="#full" transform="translate(245,4442)"></use><use href="#full" transform="translate(245,4472)"></use><use href="#full" transform="translate(245,4502)"></use><use href="#full" transform="translate(245,4532)"></use><use href="#full" transform="translate(245,4562)"></use><use href="#full" transform="translate(245,4592)"></use><use href="#full" transform="translate(245,4622)"></use><use href="#full" transform="translate(245,4652)"></use><use href="#none" transform="translate(245,4682)"></use><use href="#none" transform="translate(245,4712)"></use><use href="#full" transform="translate(245,4742)"></use><use href="#full" transform="translate(245,4772)"></use><use href="#full" transform="translate(245,4802)"></use><use href="#full" transform="translate(245,4832)"></use><use href="#full" transform="translate(245,4862)"></use><use href="#full" transform="translate(245,4892)"></use><use href="#none" transform="translate(245,4922)"></use><use href="#none" transform="translate(245,4952)"></use><use href="#full" transform="translate(245,4982)"></use><use href="#partially" transform="translate(245,5012)"></use><text x="261" y="5031"><title>Not as table name</title>c</text><use href="#full" transform="translate(245,5042)"></use><use href="#full" transform="translate(245,5072)"></use><use href="#full" transform="translate(245,5102)"></use><use href="#full" transform="translate(245,5132)"></use><use href="#full" transform="translate(245,5162)"></use><use href="#full" transform="translate(245,5192)"></use><use href="#full" transform="translate(245,5222)"></use><use href="#none" transform="translate(245,5252)"></use><use href="#none" transform="translate(245,5282)"></use><use href="#none" transform="translate(245,5312)"></use><use href="#none" transform="translate(245,5342)"></use><use href="#none" transform="translate(245,5372)"></use><use href="#full" transform="translate(245,5402)"></use><use href="#full" transform="translate(245,5432)"></use><use href="#full" transform="translate(245,5462)"></use><use href="#full" transform="translate(245,5492)"></use><use href="#full" transform="translate(245,5522)"></use><use href="#full" transform="translate(245,5552)"></use><use href="#full" transform="translate(245,5582)"></use><use href="#full" transform="translate(245,5612)"></use><use href="#full" transform="translate(245,5642)"></use><use href="#full" transform="translate(245,5672)"></use><use href="#full" transform="translate(245,5702)"></use><use href="#none" transform="translate(245,5732)"></use><use href="#none" transform="translate(245,5762)"></use><use href="#full" transform="translate(245,5792)"></use><use href="#full" transform="translate(245,5822)"></use><use href="#none" transform="translate(245,5852)"></use><use href="#full" transform="translate(245,5882)"></use><use href="#full" transform="translate(245,5912)"></use><use href="#full" transform="translate(245,5942)"></use><use href="#full" transform="translate(245,5972)"></use><use href="#full" transform="translate(245,6002)"></use><use href="#full" transform="translate(245,6032)"></use><use href="#full" transform="translate(245,6062)"></use><use href="#none" transform="translate(245,6092)"></use><use href="#full" transform="translate(245,6122)"></use><use href="#full" transform="translate(245,6152)"></use><use href="#full" transform="translate(245,6182)"></use><use href="#full" transform="translate(245,6212)"></use><use href="#full" transform="translate(245,6242)"></use><use href="#full" transform="translate(245,6272)"></use><use href="#full" transform="translate(245,6302)"></use><use href="#full" transform="translate(245,6332)"></use><use href="#full" transform="translate(245,6362)"></use><use href="#full" transform="translate(245,6392)"></use><use href="#full" transform="translate(245,6422)"></use><use href="#none" transform="translate(245,6452)"></use><use href="#none" transform="translate(245,6482)"></use><use href="#none" transform="translate(245,6512)"></use><use href="#full" transform="translate(245,6542)"></use><use href="#full" transform="translate(245,6572)"></use><use href="#full" transform="translate(245,6602)"></use><use href="#none" transform="translate(245,6632)"></use><use href="#full" transform="translate(245,6662)"></use><use href="#full" transform="translate(245,6692)"></use><use href="#full" transform="translate(245,6722)"></use><use href="#none" transform="translate(245,6752)"></use><use href="#full" transform="translate(245,6782)"></use><use href="#full" transform="translate(245,6812)"></use><use href="#full" transform="translate(245,6842)"></use><use href="#full" transform="translate(245,6872)"></use><use href="#full" transform="translate(245,6902)"></use><use href="#full" transform="translate(245,6932)"></use><use href="#full" transform="translate(245,6962)"></use><use href="#full" transform="translate(245,6992)"></use><use href="#full" transform="translate(245,7022)"></use><use href="#full" transform="translate(245,7052)"></use><use href="#none" transform="translate(245,7082)"></use><use href="#full" transform="translate(245,7112)"></use><use href="#full" transform="translate(245,7142)"></use><use href="#full" transform="translate(245,7172)"></use><use href="#none" transform="translate(245,7202)"></use><use href="#full" transform="translate(245,7232)"></use><use href="#none" transform="translate(245,7262)"></use><use href="#none" transform="translate(245,7292)"></use><use href="#full" transform="translate(245,7322)"></use><use href="#full" transform="translate(245,7352)"></use><use href="#full" transform="translate(245,7382)"></use><use href="#full" transform="translate(245,7412)"></use><use href="#full" transform="translate(245,7442)"></use><use href="#full" transform="translate(245,7472)"></use><use href="#full" transform="translate(245,7502)"></use><use href="#full" transform="translate(245,7532)"></use><use href="#full" transform="translate(245,7562)"></use><use href="#full" transform="translate(245,7592)"></use><use href="#full" transform="translate(245,7622)"></use><use href="#full" transform="translate(245,7652)"></use><use href="#full" transform="translate(245,7682)"></use><use href="#full" transform="translate(245,7712)"></use><use href="#full" transform="translate(245,7742)"></use><use href="#full" transform="translate(245,7772)"></use><use href="#full" transform="translate(245,7802)"></use><use href="#full" transform="translate(245,7832)"></use><use href="#full" transform="translate(245,7862)"></use><use href="#full" transform="translate(245,7892)"></use><use href="#full" transform="translate(245,7922)"></use><use href="#full" transform="translate(245,7952)"></use><use href="#full" transform="translate(245,7982)"></use><use href="#full" transform="translate(245,8012)"></use><use href="#none" transform="translate(245,8042)"></use><use href="#full" transform="translate(245,8072)"></use><use href="#full" transform="translate(245,8102)"></use><use href="#full" transform="translate(245,8132)"></use><use href="#full" transform="translate(245,8162)"></use><use href="#full" transform="translate(245,8192)"></use><use href="#full" transform="translate(245,8222)"></use><use href="#full" transform="translate(245,8252)"></use><use href="#full" transform="translate(245,8282)"></use><use href="#full" transform="translate(245,8312)"></use><use href="#full" transform="translate(245,8342)"></use><use href="#full" transform="translate(245,8372)"></use><use href="#full" transform="translate(245,8402)"></use><use href="#full" transform="translate(245,8432)"></use><use href="#full" transform="translate(245,8462)"></use><use href="#full" transform="translate(245,8492)"></use><use href="#full" transform="translate(245,8522)"></use><use href="#full" transform="translate(245,8552)"></use><use href="#none" transform="translate(245,8582)"></use><use href="#full" transform="translate(245,8612)"></use><use href="#none" transform="translate(245,8642)"></use><use href="#full" transform="translate(245,8672)"></use><use href="#none" transform="translate(245,8702)"></use><use href="#full" transform="translate(245,8732)"></use><use href="#full" transform="translate(245,8762)"></use><use href="#full" transform="translate(245,8792)"></use><use href="#full" transform="translate(245,8822)"></use><use href="#full" transform="translate(245,8852)"></use><use href="#none" transform="translate(245,8882)"></use><use href="#full" transform="translate(245,8912)"></use><use href="#full" transform="translate(245,8942)"></use><use href="#full" transform="translate(245,8972)"></use><use href="#full" transform="translate(245,9002)"></use><use href="#full" transform="translate(245,9032)"></use><use href="#full" transform="translate(245,9062)"></use><use href="#none" transform="translate(245,9092)"></use><use href="#full" transform="translate(245,9122)"></use><use href="#none" transform="translate(245,9152)"></use><use href="#full" transform="translate(245,9182)"></use><use href="#full" transform="translate(245,9212)"></use><use href="#full" transform="translate(245,9242)"></use><use href="#none" transform="translate(245,9272)"></use><use href="#full" transform="translate(245,9302)"></use><use href="#full" transform="translate(245,9332)"></use><use href="#full" transform="translate(245,9362)"></use><use href="#full" transform="translate(245,9392)"></use><use href="#none" transform="translate(245,9422)"></use><use href="#full" transform="translate(245,9452)"></use><use href="#full" transform="translate(245,9482)"></use><use href="#full" transform="translate(245,9512)"></use><use href="#full" transform="translate(245,9542)"></use><use href="#full" transform="translate(245,9572)"></use><use href="#full" transform="translate(245,9602)"></use><use href="#full" transform="translate(245,9632)"></use><use href="#full" transform="translate(245,9662)"></use><use href="#full" transform="translate(245,9692)"></use><use href="#full" transform="translate(245,9722)"></use><use href="#full" transform="translate(245,9752)"></use><use href="#none" transform="translate(245,9782)"></use><use href="#none" transform="translate(245,9812)"></use><use href="#full" transform="translate(245,9842)"></use><use href="#none" transform="translate(245,9872)"></use><use href="#full" transform="translate(245,9902)"></use><use href="#full" transform="translate(245,9932)"></use><use href="#none" transform="translate(245,9962)"></use><use href="#full" transform="translate(245,9992)"></use><use href="#full" transform="translate(245,10022)"></use><use href="#full" transform="translate(245,10052)"></use><use href="#none" transform="translate(245,10082)"></use><use href="#full" transform="translate(245,10112)"></use><use href="#full" transform="translate(245,10142)"></use><use href="#full" transform="translate(245,10172)"></use><use href="#full" transform="translate(245,10202)"></use><use href="#full" transform="translate(245,10232)"></use><use href="#full" transform="translate(245,10262)"></use><use href="#full" transform="translate(245,10292)"></use><use href="#full" transform="translate(245,10322)"></use><use href="#full" transform="translate(245,10352)"></use><use href="#full" transform="translate(245,10382)"></use><use href="#none" transform="translate(245,10412)"></use><use href="#full" transform="translate(245,10442)"></use><use href="#full" transform="translate(245,10472)"></use><use href="#full" transform="translate(245,10502)"></use><use href="#full" transform="translate(245,10532)"></use><use href="#full" transform="translate(245,10562)"></use><use href="#full" transform="translate(245,10592)"></use><use href="#full" transform="translate(245,10622)"></use><use href="#full" transform="translate(245,10652)"></use><use href="#full" transform="translate(245,10682)"></use><use href="#full" transform="translate(245,10712)"></use><use href="#full" transform="translate(245,10742)"></use><use href="#full" transform="translate(245,10772)"></use><use href="#full" transform="translate(245,10802)"></use><use href="#none" transform="translate(245,10832)"></use><use href="#full" transform="translate(245,10862)"></use><use href="#full" transform="translate(245,10892)"></use><use href="#full" transform="translate(245,10922)"></use><use href="#full" transform="translate(245,10952)"></use><use href="#full" transform="translate(245,10982)"></use><use href="#full" transform="translate(245,11012)"></use><use href="#full" transform="translate(245,11042)"></use><use href="#full" transform="translate(245,11072)"></use><use href="#none" transform="translate(245,11102)"></use><use href="#full" transform="translate(245,11132)"></use><use href="#full" transform="translate(245,11162)"></use><use href="#full" transform="translate(245,11192)"></use><use href="#full" transform="translate(245,11222)"></use><use href="#full" transform="translate(245,11252)"></use><use href="#full" transform="translate(245,11282)"></use><use href="#full" transform="translate(245,11312)"></use><use href="#full" transform="translate(245,11342)"></use><use href="#full" transform="translate(245,11372)"></use><use href="#full" transform="translate(245,11402)"></use><use href="#full" transform="translate(245,11432)"></use><use href="#none" transform="translate(245,11462)"></use><use href="#full" transform="translate(245,11492)"></use><use href="#full" transform="translate(245,11522)"></use><use href="#full" transform="translate(245,11552)"></use><use href="#full" transform="translate(245,11582)"></use><use href="#full" transform="translate(245,11612)"></use><use href="#full" transform="translate(245,11642)"></use><use href="#none" transform="translate(245,11672)"></use><use href="#full" transform="translate(245,11702)"></use><use href="#full" transform="translate(245,11732)"></use><use href="#none" transform="translate(245,11762)"></use><use href="#full" transform="translate(245,11792)"></use><use href="#full" transform="translate(245,11822)"></use><use href="#full" transform="translate(245,11852)"></use><use href="#full" transform="translate(245,11882)"></use><use href="#full" transform="translate(245,11912)"></use><use href="#none" transform="translate(245,11942)"></use><use href="#full" transform="translate(245,11972)"></use><use href="#full" transform="translate(245,12002)"></use><use href="#full" transform="translate(245,12032)"></use><use href="#full" transform="translate(245,12062)"></use><use href="#full" transform="translate(245,12092)"></use><use href="#full" transform="translate(245,12122)"></use><use href="#full" transform="translate(245,12152)"></use><use href="#full" transform="translate(245,12182)"></use><use href="#full" transform="translate(245,12212)"></use><use href="#full" transform="translate(245,12242)"></use><use href="#none" transform="translate(245,12272)"></use><use href="#full" transform="translate(245,12302)"></use><use href="#full" transform="translate(245,12332)"></use><use href="#full" transform="translate(245,12362)"></use><use href="#full" transform="translate(245,12392)"></use><use href="#full" transform="translate(245,12422)"></use><use href="#full" transform="translate(245,12452)"></use><use href="#full" transform="translate(245,12482)"></use><use href="#none" transform="translate(245,12512)"></use><use href="#full" transform="translate(245,12542)"></use><use href="#full" transform="translate(245,12572)"></use><use href="#full" transform="translate(245,12602)"></use><use href="#full" transform="translate(245,12632)"></use><use href="#full" transform="translate(245,12662)"></use><use href="#full" transform="translate(245,12692)"></use><use href="#full" transform="translate(245,12722)"></use><use href="#full" transform="translate(245,12752)"></use><use href="#none" transform="translate(245,12782)"></use><use href="#full" transform="translate(245,12812)"></use><use href="#full" transform="translate(245,12842)"></use><use href="#full" transform="translate(245,12872)"></use><use href="#full" transform="translate(245,12902)"></use><use href="#full" transform="translate(245,12932)"></use><use href="#full" transform="translate(245,12962)"></use><use href="#full" transform="translate(245,12992)"></use><use href="#full" transform="translate(245,13022)"></use><use href="#full" transform="translate(245,13052)"></use><use href="#full" transform="translate(245,13082)"></use><use href="#full" transform="translate(245,13112)"></use><use href="#full" transform="translate(245,13142)"></use><use href="#full" transform="translate(245,13172)"></use><use href="#full" transform="translate(245,13202)"></use><use href="#full" transform="translate(245,13232)"></use><use href="#full" transform="translate(245,13262)"></use><use href="#full" transform="translate(245,13292)"></use><use href="#full" transform="translate(245,13322)"></use><use href="#full" transform="translate(245,13352)"></use><use href="#full" transform="translate(245,13382)"></use><use href="#full" transform="translate(245,13412)"></use><use href="#full" transform="translate(245,13442)"></use><use href="#full" transform="translate(245,13472)"></use><use href="#full" transform="translate(245,13502)"></use><use href="#full" transform="translate(245,13532)"></use><use href="#full" transform="translate(245,13562)"></use><use href="#full" transform="translate(245,13592)"></use><use href="#full" transform="translate(245,13622)"></use><use href="#full" transform="translate(245,13652)"></use><use href="#full" transform="translate(245,13682)"></use><use href="#full" transform="translate(245,13712)"></use><use href="#full" transform="translate(245,13742)"></use><use href="#full" transform="translate(245,13772)"></use><use href="#full" transform="translate(245,13802)"></use><use href="#full" transform="translate(245,13832)"></use><use href="#full" transform="translate(245,13862)"></use><use href="#partially" transform="translate(245,13892)"></use><text x="261" y="13911"><title>Not as table name</title>c</text><use href="#none" transform="translate(245,13922)"></use><use href="#full" transform="translate(245,13952)"></use><use href="#full" transform="translate(245,13982)"></use><use href="#full" transform="translate(245,14012)"></use><use href="#none" transform="translate(245,14042)"></use><use href="#full" transform="translate(245,14072)"></use><use href="#full" transform="translate(245,14102)"></use><use href="#full" transform="translate(245,14132)"></use><use href="#full" transform="translate(245,14162)"></use><use href="#full" transform="translate(245,14192)"></use><use href="#none" transform="translate(245,14222)"></use><use href="#full" transform="translate(245,14252)"></use><use href="#full" transform="translate(245,14282)"></use><use href="#full" transform="translate(245,14312)"></use><use href="#full" transform="translate(245,14342)"></use><use href="#full" transform="translate(245,14372)"></use><use href="#full" transform="translate(245,14402)"></use><use href="#none" transform="translate(245,14432)"></use><use href="#full" transform="translate(245,14462)"></use><use href="#full" transform="translate(245,14492)"></use><use href="#none" transform="translate(245,14522)"></use><use href="#full" transform="translate(245,14552)"></use><use href="#full" transform="translate(245,14582)"></use><use href="#full" transform="translate(245,14612)"></use><use href="#full" transform="translate(245,14642)"></use><use href="#full" transform="translate(245,14672)"></use><use href="#none" transform="translate(245,14702)"></use><use href="#full" transform="translate(245,14732)"></use><use href="#none" transform="translate(245,14762)"></use><use href="#full" transform="translate(245,14792)"></use><use href="#full" transform="translate(245,14822)"></use><use href="#full" transform="translate(245,14852)"></use><use href="#none" transform="translate(245,14882)"></use><use href="#full" transform="translate(245,14912)"></use><use href="#full" transform="translate(245,14942)"></use><use href="#full" transform="translate(245,14972)"></use><use href="#full" transform="translate(245,15002)"></use><use href="#full" transform="translate(245,15032)"></use><use href="#full" transform="translate(245,15062)"></use><use href="#full" transform="translate(245,15092)"></use><use href="#full" transform="translate(245,15122)"></use><use href="#none" transform="translate(245,15152)"></use><use href="#full" transform="translate(245,15182)"></use><use href="#full" transform="translate(245,15212)"></use><use href="#full" transform="translate(245,15242)"></use><use href="#full" transform="translate(245,15272)"></use><use href="#full" transform="translate(245,15302)"></use><use href="#full" transform="translate(245,15332)"></use><use href="#full" transform="translate(245,15362)"></use><use href="#full" transform="translate(245,15392)"></use><use href="#full" transform="translate(245,15422)"></use><use href="#full" transform="translate(245,15452)"></use><use href="#full" transform="translate(245,15482)"></use><use href="#full" transform="translate(245,15512)"></use><use href="#full" transform="translate(245,15542)"></use><use href="#full" transform="translate(245,15572)"></use><use href="#full" transform="translate(245,15602)"></use><use href="#full" transform="translate(245,15632)"></use><use href="#full" transform="translate(245,15662)"></use><use href="#full" transform="translate(245,15692)"></use><use href="#none" transform="translate(245,15722)"></use><use href="#full" transform="translate(245,15752)"></use><use href="#none" transform="translate(245,15782)"></use><use href="#full" transform="translate(245,15812)"></use><use href="#none" transform="translate(245,15842)"></use><use href="#none" transform="translate(245,15872)"></use><use href="#none" transform="translate(245,15902)"></use><use href="#none" transform="translate(245,15932)"></use><use href="#full" transform="translate(245,15962)"></use><use href="#full" transform="translate(245,15992)"></use><use href="#full" transform="translate(245,16022)"></use><use href="#full" transform="translate(245,16052)"></use><use href="#full" transform="translate(245,16082)"></use><use href="#full" transform="translate(245,16112)"></use><use href="#full" transform="translate(245,16142)"></use><use href="#full" transform="translate(245,16172)"></use><use href="#full" transform="translate(245,16202)"></use><use href="#full" transform="translate(245,16232)"></use><use href="#full" transform="translate(245,16262)"></use><use href="#full" transform="translate(245,16292)"></use><use href="#full" transform="translate(245,16322)"></use><use href="#full" transform="translate(245,16352)"></use><use href="#full" transform="translate(245,16382)"></use><use href="#full" transform="translate(245,16412)"></use><use href="#full" transform="translate(245,16442)"></use></g><g><title>Db2 (LUW)</title><path d="M355,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(296.5, 83) rotate(-45)">Db2 (LUW)</text><use href="#full" transform="translate(280,92)"></use><use href="#full" transform="translate(280,122)"></use><use href="#full" transform="translate(280,152)"></use><use href="#partially" transform="translate(280,182)"></use><text x="296" y="201"><title>Not as expression</title>a</text><use href="#full" transform="translate(280,212)"></use><use href="#full" transform="translate(280,242)"></use><use href="#full" transform="translate(280,272)"></use><use href="#full" transform="translate(280,302)"></use><use href="#partially" transform="translate(280,332)"></use><text x="296" y="351"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,362)"></use><use href="#full" transform="translate(280,392)"></use><use href="#full" transform="translate(280,422)"></use><use href="#partially" transform="translate(280,452)"></use><text x="296" y="471"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,482)"></use><use href="#full" transform="translate(280,512)"></use><use href="#full" transform="translate(280,542)"></use><use href="#full" transform="translate(280,572)"></use><use href="#full" transform="translate(280,602)"></use><use href="#full" transform="translate(280,632)"></use><use href="#full" transform="translate(280,662)"></use><use href="#full" transform="translate(280,692)"></use><use href="#full" transform="translate(280,722)"></use><use href="#full" transform="translate(280,752)"></use><use href="#full" transform="translate(280,782)"></use><use href="#full" transform="translate(280,812)"></use><use href="#partially" transform="translate(280,842)"></use><text x="296" y="861"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,872)"></use><use href="#full" transform="translate(280,902)"></use><use href="#full" transform="translate(280,932)"></use><use href="#full" transform="translate(280,962)"></use><use href="#full" transform="translate(280,992)"></use><use href="#full" transform="translate(280,1022)"></use><use href="#full" transform="translate(280,1052)"></use><use href="#full" transform="translate(280,1082)"></use><use href="#full" transform="translate(280,1112)"></use><use href="#full" transform="translate(280,1142)"></use><use href="#full" transform="translate(280,1172)"></use><use href="#full" transform="translate(280,1202)"></use><use href="#full" transform="translate(280,1232)"></use><use href="#partially" transform="translate(280,1262)"></use><text x="296" y="1281"><title>Not as expression</title>a</text><use href="#full" transform="translate(280,1292)"></use><use href="#full" transform="translate(280,1322)"></use><use href="#full" transform="translate(280,1352)"></use><use href="#full" transform="translate(280,1382)"></use><use href="#full" transform="translate(280,1412)"></use><use href="#full" transform="translate(280,1442)"></use><use href="#full" transform="translate(280,1472)"></use><use href="#full" transform="translate(280,1502)"></use><use href="#full" transform="translate(280,1532)"></use><use href="#full" transform="translate(280,1562)"></use><use href="#full" transform="translate(280,1592)"></use><use href="#full" transform="translate(280,1622)"></use><use href="#full" transform="translate(280,1652)"></use><use href="#full" transform="translate(280,1682)"></use><use href="#full" transform="translate(280,1712)"></use><use href="#full" transform="translate(280,1742)"></use><use href="#full" transform="translate(280,1772)"></use><use href="#full" transform="translate(280,1802)"></use><use href="#partially" transform="translate(280,1832)"></use><text x="296" y="1851"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,1862)"></use><use href="#full" transform="translate(280,1892)"></use><use href="#full" transform="translate(280,1922)"></use><use href="#full" transform="translate(280,1952)"></use><use href="#partially" transform="translate(280,1982)"></use><text x="296" y="2001"><title>Not as column name</title>d</text><use href="#full" transform="translate(280,2012)"></use><use href="#full" transform="translate(280,2042)"></use><use href="#full" transform="translate(280,2072)"></use><use href="#full" transform="translate(280,2102)"></use><use href="#full" transform="translate(280,2132)"></use><use href="#full" transform="translate(280,2162)"></use><use href="#full" transform="translate(280,2192)"></use><use href="#full" transform="translate(280,2222)"></use><use href="#full" transform="translate(280,2252)"></use><use href="#full" transform="translate(280,2282)"></use><use href="#full" transform="translate(280,2312)"></use><use href="#full" transform="translate(280,2342)"></use><use href="#full" transform="translate(280,2372)"></use><use href="#full" transform="translate(280,2402)"></use><use href="#full" transform="translate(280,2432)"></use><use href="#full" transform="translate(280,2462)"></use><use href="#full" transform="translate(280,2492)"></use><use href="#full" transform="translate(280,2522)"></use><use href="#full" transform="translate(280,2552)"></use><use href="#full" transform="translate(280,2582)"></use><use href="#full" transform="translate(280,2612)"></use><use href="#full" transform="translate(280,2642)"></use><use href="#full" transform="translate(280,2672)"></use><use href="#full" transform="translate(280,2702)"></use><use href="#partially" transform="translate(280,2732)"></use><text x="296" y="2751"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,2762)"></use><text x="296" y="2781"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,2792)"></use><use href="#full" transform="translate(280,2822)"></use><use href="#full" transform="translate(280,2852)"></use><use href="#full" transform="translate(280,2882)"></use><use href="#full" transform="translate(280,2912)"></use><use href="#full" transform="translate(280,2942)"></use><use href="#full" transform="translate(280,2972)"></use><use href="#full" transform="translate(280,3002)"></use><use href="#full" transform="translate(280,3032)"></use><use href="#full" transform="translate(280,3062)"></use><use href="#full" transform="translate(280,3092)"></use><use href="#full" transform="translate(280,3122)"></use><use href="#full" transform="translate(280,3152)"></use><use href="#full" transform="translate(280,3182)"></use><use href="#full" transform="translate(280,3212)"></use><use href="#full" transform="translate(280,3242)"></use><use href="#full" transform="translate(280,3272)"></use><use href="#full" transform="translate(280,3302)"></use><use href="#full" transform="translate(280,3332)"></use><use href="#full" transform="translate(280,3362)"></use><use href="#full" transform="translate(280,3392)"></use><use href="#full" transform="translate(280,3422)"></use><use href="#full" transform="translate(280,3452)"></use><use href="#partially" transform="translate(280,3482)"></use><text x="296" y="3501"><title>Not as expression</title>a</text><use href="#full" transform="translate(280,3512)"></use><use href="#full" transform="translate(280,3542)"></use><use href="#full" transform="translate(280,3572)"></use><use href="#full" transform="translate(280,3602)"></use><use href="#full" transform="translate(280,3632)"></use><use href="#full" transform="translate(280,3662)"></use><use href="#full" transform="translate(280,3692)"></use><use href="#full" transform="translate(280,3722)"></use><use href="#full" transform="translate(280,3752)"></use><use href="#full" transform="translate(280,3782)"></use><use href="#full" transform="translate(280,3812)"></use><use href="#full" transform="translate(280,3842)"></use><use href="#full" transform="translate(280,3872)"></use><use href="#none" transform="translate(280,3902)"></use><use href="#full" transform="translate(280,3932)"></use><use href="#full" transform="translate(280,3962)"></use><use href="#full" transform="translate(280,3992)"></use><use href="#full" transform="translate(280,4022)"></use><use href="#full" transform="translate(280,4052)"></use><use href="#full" transform="translate(280,4082)"></use><use href="#full" transform="translate(280,4112)"></use><use href="#full" transform="translate(280,4142)"></use><use href="#full" transform="translate(280,4172)"></use><use href="#full" transform="translate(280,4202)"></use><use href="#full" transform="translate(280,4232)"></use><use href="#full" transform="translate(280,4262)"></use><use href="#full" transform="translate(280,4292)"></use><use href="#full" transform="translate(280,4322)"></use><use href="#full" transform="translate(280,4352)"></use><use href="#full" transform="translate(280,4382)"></use><use href="#full" transform="translate(280,4412)"></use><use href="#full" transform="translate(280,4442)"></use><use href="#full" transform="translate(280,4472)"></use><use href="#full" transform="translate(280,4502)"></use><use href="#full" transform="translate(280,4532)"></use><use href="#full" transform="translate(280,4562)"></use><use href="#full" transform="translate(280,4592)"></use><use href="#full" transform="translate(280,4622)"></use><use href="#full" transform="translate(280,4652)"></use><use href="#full" transform="translate(280,4682)"></use><use href="#full" transform="translate(280,4712)"></use><use href="#full" transform="translate(280,4742)"></use><use href="#full" transform="translate(280,4772)"></use><use href="#full" transform="translate(280,4802)"></use><use href="#full" transform="translate(280,4832)"></use><use href="#full" transform="translate(280,4862)"></use><use href="#full" transform="translate(280,4892)"></use><use href="#partially" transform="translate(280,4922)"></use><text x="296" y="4941"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,4952)"></use><use href="#full" transform="translate(280,4982)"></use><use href="#full" transform="translate(280,5012)"></use><use href="#full" transform="translate(280,5042)"></use><use href="#full" transform="translate(280,5072)"></use><use href="#full" transform="translate(280,5102)"></use><use href="#full" transform="translate(280,5132)"></use><use href="#full" transform="translate(280,5162)"></use><use href="#full" transform="translate(280,5192)"></use><use href="#full" transform="translate(280,5222)"></use><use href="#full" transform="translate(280,5252)"></use><use href="#full" transform="translate(280,5282)"></use><use href="#full" transform="translate(280,5312)"></use><use href="#full" transform="translate(280,5342)"></use><use href="#full" transform="translate(280,5372)"></use><use href="#full" transform="translate(280,5402)"></use><use href="#full" transform="translate(280,5432)"></use><use href="#partially" transform="translate(280,5462)"></use><text x="296" y="5481"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,5492)"></use><text x="296" y="5511"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,5522)"></use><use href="#full" transform="translate(280,5552)"></use><use href="#full" transform="translate(280,5582)"></use><use href="#full" transform="translate(280,5612)"></use><use href="#full" transform="translate(280,5642)"></use><use href="#full" transform="translate(280,5672)"></use><use href="#full" transform="translate(280,5702)"></use><use href="#full" transform="translate(280,5732)"></use><use href="#full" transform="translate(280,5762)"></use><use href="#full" transform="translate(280,5792)"></use><use href="#full" transform="translate(280,5822)"></use><use href="#partially" transform="translate(280,5852)"></use><text x="296" y="5871"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,5882)"></use><use href="#full" transform="translate(280,5912)"></use><use href="#full" transform="translate(280,5942)"></use><use href="#full" transform="translate(280,5972)"></use><use href="#full" transform="translate(280,6002)"></use><use href="#full" transform="translate(280,6032)"></use><use href="#full" transform="translate(280,6062)"></use><use href="#full" transform="translate(280,6092)"></use><use href="#full" transform="translate(280,6122)"></use><use href="#full" transform="translate(280,6152)"></use><use href="#full" transform="translate(280,6182)"></use><use href="#full" transform="translate(280,6212)"></use><use href="#full" transform="translate(280,6242)"></use><use href="#full" transform="translate(280,6272)"></use><use href="#full" transform="translate(280,6302)"></use><use href="#full" transform="translate(280,6332)"></use><use href="#full" transform="translate(280,6362)"></use><use href="#full" transform="translate(280,6392)"></use><use href="#full" transform="translate(280,6422)"></use><use href="#full" transform="translate(280,6452)"></use><use href="#full" transform="translate(280,6482)"></use><use href="#partially" transform="translate(280,6512)"></use><text x="296" y="6531"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,6542)"></use><use href="#full" transform="translate(280,6572)"></use><use href="#full" transform="translate(280,6602)"></use><use href="#full" transform="translate(280,6632)"></use><use href="#full" transform="translate(280,6662)"></use><use href="#full" transform="translate(280,6692)"></use><use href="#full" transform="translate(280,6722)"></use><use href="#full" transform="translate(280,6752)"></use><use href="#full" transform="translate(280,6782)"></use><use href="#full" transform="translate(280,6812)"></use><use href="#full" transform="translate(280,6842)"></use><use href="#full" transform="translate(280,6872)"></use><use href="#full" transform="translate(280,6902)"></use><use href="#full" transform="translate(280,6932)"></use><use href="#full" transform="translate(280,6962)"></use><use href="#full" transform="translate(280,6992)"></use><use href="#full" transform="translate(280,7022)"></use><use href="#full" transform="translate(280,7052)"></use><use href="#full" transform="translate(280,7082)"></use><use href="#full" transform="translate(280,7112)"></use><use href="#full" transform="translate(280,7142)"></use><use href="#full" transform="translate(280,7172)"></use><use href="#full" transform="translate(280,7202)"></use><use href="#full" transform="translate(280,7232)"></use><use href="#partially" transform="translate(280,7262)"></use><text x="296" y="7281"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,7292)"></use><use href="#full" transform="translate(280,7322)"></use><use href="#full" transform="translate(280,7352)"></use><use href="#full" transform="translate(280,7382)"></use><use href="#full" transform="translate(280,7412)"></use><use href="#full" transform="translate(280,7442)"></use><use href="#full" transform="translate(280,7472)"></use><use href="#full" transform="translate(280,7502)"></use><use href="#full" transform="translate(280,7532)"></use><use href="#full" transform="translate(280,7562)"></use><use href="#full" transform="translate(280,7592)"></use><use href="#full" transform="translate(280,7622)"></use><use href="#full" transform="translate(280,7652)"></use><use href="#full" transform="translate(280,7682)"></use><use href="#full" transform="translate(280,7712)"></use><use href="#full" transform="translate(280,7742)"></use><use href="#full" transform="translate(280,7772)"></use><use href="#full" transform="translate(280,7802)"></use><use href="#full" transform="translate(280,7832)"></use><use href="#full" transform="translate(280,7862)"></use><use href="#full" transform="translate(280,7892)"></use><use href="#full" transform="translate(280,7922)"></use><use href="#full" transform="translate(280,7952)"></use><use href="#full" transform="translate(280,7982)"></use><use href="#full" transform="translate(280,8012)"></use><use href="#full" transform="translate(280,8042)"></use><use href="#partially" transform="translate(280,8072)"></use><text x="296" y="8091"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,8102)"></use><text x="296" y="8121"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,8132)"></use><use href="#full" transform="translate(280,8162)"></use><use href="#full" transform="translate(280,8192)"></use><use href="#partially" transform="translate(280,8222)"></use><text x="296" y="8241"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,8252)"></use><text x="296" y="8271"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,8282)"></use><use href="#full" transform="translate(280,8312)"></use><use href="#full" transform="translate(280,8342)"></use><use href="#full" transform="translate(280,8372)"></use><use href="#full" transform="translate(280,8402)"></use><use href="#full" transform="translate(280,8432)"></use><use href="#full" transform="translate(280,8462)"></use><use href="#partially" transform="translate(280,8492)"></use><text x="296" y="8511"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,8522)"></use><text x="296" y="8541"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,8552)"></use><use href="#full" transform="translate(280,8582)"></use><use href="#full" transform="translate(280,8612)"></use><use href="#full" transform="translate(280,8642)"></use><use href="#full" transform="translate(280,8672)"></use><use href="#full" transform="translate(280,8702)"></use><use href="#full" transform="translate(280,8732)"></use><use href="#full" transform="translate(280,8762)"></use><use href="#full" transform="translate(280,8792)"></use><use href="#full" transform="translate(280,8822)"></use><use href="#full" transform="translate(280,8852)"></use><use href="#partially" transform="translate(280,8882)"></use><text x="296" y="8901"><title>Not as expression</title>a</text><use href="#full" transform="translate(280,8912)"></use><use href="#full" transform="translate(280,8942)"></use><use href="#full" transform="translate(280,8972)"></use><use href="#full" transform="translate(280,9002)"></use><use href="#full" transform="translate(280,9032)"></use><use href="#full" transform="translate(280,9062)"></use><use href="#full" transform="translate(280,9092)"></use><use href="#full" transform="translate(280,9122)"></use><use href="#full" transform="translate(280,9152)"></use><use href="#full" transform="translate(280,9182)"></use><use href="#full" transform="translate(280,9212)"></use><use href="#full" transform="translate(280,9242)"></use><use href="#full" transform="translate(280,9272)"></use><use href="#full" transform="translate(280,9302)"></use><use href="#full" transform="translate(280,9332)"></use><use href="#full" transform="translate(280,9362)"></use><use href="#full" transform="translate(280,9392)"></use><use href="#full" transform="translate(280,9422)"></use><use href="#full" transform="translate(280,9452)"></use><use href="#full" transform="translate(280,9482)"></use><use href="#full" transform="translate(280,9512)"></use><use href="#full" transform="translate(280,9542)"></use><use href="#full" transform="translate(280,9572)"></use><use href="#full" transform="translate(280,9602)"></use><use href="#full" transform="translate(280,9632)"></use><use href="#full" transform="translate(280,9662)"></use><use href="#full" transform="translate(280,9692)"></use><use href="#full" transform="translate(280,9722)"></use><use href="#full" transform="translate(280,9752)"></use><use href="#partially" transform="translate(280,9782)"></use><text x="296" y="9801"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,9812)"></use><use href="#full" transform="translate(280,9842)"></use><use href="#full" transform="translate(280,9872)"></use><use href="#full" transform="translate(280,9902)"></use><use href="#full" transform="translate(280,9932)"></use><use href="#full" transform="translate(280,9962)"></use><use href="#partially" transform="translate(280,9992)"></use><text x="296" y="10011"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,10022)"></use><use href="#full" transform="translate(280,10052)"></use><use href="#full" transform="translate(280,10082)"></use><use href="#full" transform="translate(280,10112)"></use><use href="#full" transform="translate(280,10142)"></use><use href="#full" transform="translate(280,10172)"></use><use href="#full" transform="translate(280,10202)"></use><use href="#full" transform="translate(280,10232)"></use><use href="#full" transform="translate(280,10262)"></use><use href="#full" transform="translate(280,10292)"></use><use href="#full" transform="translate(280,10322)"></use><use href="#full" transform="translate(280,10352)"></use><use href="#full" transform="translate(280,10382)"></use><use href="#full" transform="translate(280,10412)"></use><use href="#full" transform="translate(280,10442)"></use><use href="#full" transform="translate(280,10472)"></use><use href="#full" transform="translate(280,10502)"></use><use href="#full" transform="translate(280,10532)"></use><use href="#full" transform="translate(280,10562)"></use><use href="#full" transform="translate(280,10592)"></use><use href="#full" transform="translate(280,10622)"></use><use href="#full" transform="translate(280,10652)"></use><use href="#full" transform="translate(280,10682)"></use><use href="#full" transform="translate(280,10712)"></use><use href="#full" transform="translate(280,10742)"></use><use href="#full" transform="translate(280,10772)"></use><use href="#full" transform="translate(280,10802)"></use><use href="#full" transform="translate(280,10832)"></use><use href="#full" transform="translate(280,10862)"></use><use href="#full" transform="translate(280,10892)"></use><use href="#full" transform="translate(280,10922)"></use><use href="#full" transform="translate(280,10952)"></use><use href="#full" transform="translate(280,10982)"></use><use href="#full" transform="translate(280,11012)"></use><use href="#full" transform="translate(280,11042)"></use><use href="#full" transform="translate(280,11072)"></use><use href="#full" transform="translate(280,11102)"></use><use href="#full" transform="translate(280,11132)"></use><use href="#full" transform="translate(280,11162)"></use><use href="#full" transform="translate(280,11192)"></use><use href="#full" transform="translate(280,11222)"></use><use href="#full" transform="translate(280,11252)"></use><use href="#full" transform="translate(280,11282)"></use><use href="#full" transform="translate(280,11312)"></use><use href="#full" transform="translate(280,11342)"></use><use href="#full" transform="translate(280,11372)"></use><use href="#full" transform="translate(280,11402)"></use><use href="#full" transform="translate(280,11432)"></use><use href="#full" transform="translate(280,11462)"></use><use href="#full" transform="translate(280,11492)"></use><use href="#full" transform="translate(280,11522)"></use><use href="#full" transform="translate(280,11552)"></use><use href="#full" transform="translate(280,11582)"></use><use href="#full" transform="translate(280,11612)"></use><use href="#full" transform="translate(280,11642)"></use><use href="#full" transform="translate(280,11672)"></use><use href="#full" transform="translate(280,11702)"></use><use href="#full" transform="translate(280,11732)"></use><use href="#full" transform="translate(280,11762)"></use><use href="#full" transform="translate(280,11792)"></use><use href="#full" transform="translate(280,11822)"></use><use href="#full" transform="translate(280,11852)"></use><use href="#full" transform="translate(280,11882)"></use><use href="#full" transform="translate(280,11912)"></use><use href="#full" transform="translate(280,11942)"></use><use href="#full" transform="translate(280,11972)"></use><use href="#full" transform="translate(280,12002)"></use><use href="#full" transform="translate(280,12032)"></use><use href="#full" transform="translate(280,12062)"></use><use href="#full" transform="translate(280,12092)"></use><use href="#full" transform="translate(280,12122)"></use><use href="#full" transform="translate(280,12152)"></use><use href="#partially" transform="translate(280,12182)"></use><text x="296" y="12201"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,12212)"></use><text x="296" y="12231"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,12242)"></use><use href="#full" transform="translate(280,12272)"></use><use href="#full" transform="translate(280,12302)"></use><use href="#full" transform="translate(280,12332)"></use><use href="#full" transform="translate(280,12362)"></use><use href="#full" transform="translate(280,12392)"></use><use href="#full" transform="translate(280,12422)"></use><use href="#full" transform="translate(280,12452)"></use><use href="#full" transform="translate(280,12482)"></use><use href="#full" transform="translate(280,12512)"></use><use href="#full" transform="translate(280,12542)"></use><use href="#full" transform="translate(280,12572)"></use><use href="#full" transform="translate(280,12602)"></use><use href="#full" transform="translate(280,12632)"></use><use href="#full" transform="translate(280,12662)"></use><use href="#full" transform="translate(280,12692)"></use><use href="#full" transform="translate(280,12722)"></use><use href="#full" transform="translate(280,12752)"></use><use href="#full" transform="translate(280,12782)"></use><use href="#full" transform="translate(280,12812)"></use><use href="#full" transform="translate(280,12842)"></use><use href="#full" transform="translate(280,12872)"></use><use href="#full" transform="translate(280,12902)"></use><use href="#full" transform="translate(280,12932)"></use><use href="#full" transform="translate(280,12962)"></use><use href="#full" transform="translate(280,12992)"></use><use href="#full" transform="translate(280,13022)"></use><use href="#full" transform="translate(280,13052)"></use><use href="#full" transform="translate(280,13082)"></use><use href="#full" transform="translate(280,13112)"></use><use href="#full" transform="translate(280,13142)"></use><use href="#full" transform="translate(280,13172)"></use><use href="#full" transform="translate(280,13202)"></use><use href="#full" transform="translate(280,13232)"></use><use href="#full" transform="translate(280,13262)"></use><use href="#full" transform="translate(280,13292)"></use><use href="#full" transform="translate(280,13322)"></use><use href="#full" transform="translate(280,13352)"></use><use href="#full" transform="translate(280,13382)"></use><use href="#full" transform="translate(280,13412)"></use><use href="#full" transform="translate(280,13442)"></use><use href="#full" transform="translate(280,13472)"></use><use href="#full" transform="translate(280,13502)"></use><use href="#full" transform="translate(280,13532)"></use><use href="#full" transform="translate(280,13562)"></use><use href="#full" transform="translate(280,13592)"></use><use href="#full" transform="translate(280,13622)"></use><use href="#full" transform="translate(280,13652)"></use><use href="#full" transform="translate(280,13682)"></use><use href="#full" transform="translate(280,13712)"></use><use href="#full" transform="translate(280,13742)"></use><use href="#full" transform="translate(280,13772)"></use><use href="#full" transform="translate(280,13802)"></use><use href="#full" transform="translate(280,13832)"></use><use href="#full" transform="translate(280,13862)"></use><use href="#full" transform="translate(280,13892)"></use><use href="#full" transform="translate(280,13922)"></use><use href="#full" transform="translate(280,13952)"></use><use href="#full" transform="translate(280,13982)"></use><use href="#full" transform="translate(280,14012)"></use><use href="#full" transform="translate(280,14042)"></use><use href="#full" transform="translate(280,14072)"></use><use href="#full" transform="translate(280,14102)"></use><use href="#full" transform="translate(280,14132)"></use><use href="#full" transform="translate(280,14162)"></use><use href="#full" transform="translate(280,14192)"></use><use href="#full" transform="translate(280,14222)"></use><use href="#full" transform="translate(280,14252)"></use><use href="#full" transform="translate(280,14282)"></use><use href="#full" transform="translate(280,14312)"></use><use href="#full" transform="translate(280,14342)"></use><use href="#full" transform="translate(280,14372)"></use><use href="#full" transform="translate(280,14402)"></use><use href="#full" transform="translate(280,14432)"></use><use href="#full" transform="translate(280,14462)"></use><use href="#full" transform="translate(280,14492)"></use><use href="#full" transform="translate(280,14522)"></use><use href="#full" transform="translate(280,14552)"></use><use href="#full" transform="translate(280,14582)"></use><use href="#full" transform="translate(280,14612)"></use><use href="#full" transform="translate(280,14642)"></use><use href="#full" transform="translate(280,14672)"></use><use href="#full" transform="translate(280,14702)"></use><use href="#full" transform="translate(280,14732)"></use><use href="#full" transform="translate(280,14762)"></use><use href="#partially" transform="translate(280,14792)"></use><text x="296" y="14811"><title>Not as expression</title>a</text><use href="#full" transform="translate(280,14822)"></use><use href="#full" transform="translate(280,14852)"></use><use href="#full" transform="translate(280,14882)"></use><use href="#full" transform="translate(280,14912)"></use><use href="#full" transform="translate(280,14942)"></use><use href="#full" transform="translate(280,14972)"></use><use href="#full" transform="translate(280,15002)"></use><use href="#full" transform="translate(280,15032)"></use><use href="#full" transform="translate(280,15062)"></use><use href="#full" transform="translate(280,15092)"></use><use href="#full" transform="translate(280,15122)"></use><use href="#full" transform="translate(280,15152)"></use><use href="#full" transform="translate(280,15182)"></use><use href="#full" transform="translate(280,15212)"></use><use href="#full" transform="translate(280,15242)"></use><use href="#full" transform="translate(280,15272)"></use><use href="#full" transform="translate(280,15302)"></use><use href="#full" transform="translate(280,15332)"></use><use href="#full" transform="translate(280,15362)"></use><use href="#full" transform="translate(280,15392)"></use><use href="#full" transform="translate(280,15422)"></use><use href="#full" transform="translate(280,15452)"></use><use href="#full" transform="translate(280,15482)"></use><use href="#full" transform="translate(280,15512)"></use><use href="#full" transform="translate(280,15542)"></use><use href="#full" transform="translate(280,15572)"></use><use href="#full" transform="translate(280,15602)"></use><use href="#full" transform="translate(280,15632)"></use><use href="#full" transform="translate(280,15662)"></use><use href="#full" transform="translate(280,15692)"></use><use href="#full" transform="translate(280,15722)"></use><use href="#full" transform="translate(280,15752)"></use><use href="#full" transform="translate(280,15782)"></use><use href="#full" transform="translate(280,15812)"></use><use href="#full" transform="translate(280,15842)"></use><use href="#full" transform="translate(280,15872)"></use><use href="#full" transform="translate(280,15902)"></use><use href="#none" transform="translate(280,15932)"></use><use href="#full" transform="translate(280,15962)"></use><use href="#full" transform="translate(280,15992)"></use><use href="#full" transform="translate(280,16022)"></use><use href="#full" transform="translate(280,16052)"></use><use href="#full" transform="translate(280,16082)"></use><use href="#full" transform="translate(280,16112)"></use><use href="#full" transform="translate(280,16142)"></use><use href="#full" transform="translate(280,16172)"></use><use href="#full" transform="translate(280,16202)"></use><use href="#full" transform="translate(280,16232)"></use><use href="#full" transform="translate(280,16262)"></use><use href="#full" transform="translate(280,16292)"></use><use href="#full" transform="translate(280,16322)"></use><use href="#partially" transform="translate(280,16352)"></use><text x="296" y="16371"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(280,16382)"></use><text x="296" y="16401"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(280,16412)"></use><use href="#full" transform="translate(280,16442)"></use></g><g><title>H2</title><path d="M390,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(331.5, 83) rotate(-45)">H2</text><use href="#full" transform="translate(315,92)"></use><use href="#full" transform="translate(315,122)"></use><use href="#full" transform="translate(315,152)"></use><use href="#none" transform="translate(315,182)"></use><use href="#full" transform="translate(315,212)"></use><use href="#full" transform="translate(315,242)"></use><use href="#full" transform="translate(315,272)"></use><use href="#full" transform="translate(315,302)"></use><use href="#none" transform="translate(315,332)"></use><use href="#none" transform="translate(315,362)"></use><use href="#full" transform="translate(315,392)"></use><use href="#none" transform="translate(315,422)"></use><use href="#none" transform="translate(315,452)"></use><use href="#full" transform="translate(315,482)"></use><use href="#full" transform="translate(315,512)"></use><use href="#full" transform="translate(315,542)"></use><use href="#none" transform="translate(315,572)"></use><use href="#full" transform="translate(315,602)"></use><use href="#full" transform="translate(315,632)"></use><use href="#none" transform="translate(315,662)"></use><use href="#full" transform="translate(315,692)"></use><use href="#full" transform="translate(315,722)"></use><use href="#full" transform="translate(315,752)"></use><use href="#full" transform="translate(315,782)"></use><use href="#full" transform="translate(315,812)"></use><use href="#none" transform="translate(315,842)"></use><use href="#full" transform="translate(315,872)"></use><use href="#full" transform="translate(315,902)"></use><use href="#full" transform="translate(315,932)"></use><use href="#full" transform="translate(315,962)"></use><use href="#full" transform="translate(315,992)"></use><use href="#full" transform="translate(315,1022)"></use><use href="#full" transform="translate(315,1052)"></use><use href="#full" transform="translate(315,1082)"></use><use href="#full" transform="translate(315,1112)"></use><use href="#full" transform="translate(315,1142)"></use><use href="#full" transform="translate(315,1172)"></use><use href="#full" transform="translate(315,1202)"></use><use href="#full" transform="translate(315,1232)"></use><use href="#none" transform="translate(315,1262)"></use><use href="#none" transform="translate(315,1292)"></use><use href="#full" transform="translate(315,1322)"></use><use href="#full" transform="translate(315,1352)"></use><use href="#full" transform="translate(315,1382)"></use><use href="#full" transform="translate(315,1412)"></use><use href="#none" transform="translate(315,1442)"></use><use href="#full" transform="translate(315,1472)"></use><use href="#full" transform="translate(315,1502)"></use><use href="#full" transform="translate(315,1532)"></use><use href="#full" transform="translate(315,1562)"></use><use href="#full" transform="translate(315,1592)"></use><use href="#full" transform="translate(315,1622)"></use><use href="#full" transform="translate(315,1652)"></use><use href="#full" transform="translate(315,1682)"></use><use href="#full" transform="translate(315,1712)"></use><use href="#full" transform="translate(315,1742)"></use><use href="#full" transform="translate(315,1772)"></use><use href="#full" transform="translate(315,1802)"></use><use href="#full" transform="translate(315,1832)"></use><use href="#full" transform="translate(315,1862)"></use><use href="#full" transform="translate(315,1892)"></use><use href="#full" transform="translate(315,1922)"></use><use href="#full" transform="translate(315,1952)"></use><use href="#none" transform="translate(315,1982)"></use><use href="#full" transform="translate(315,2012)"></use><use href="#full" transform="translate(315,2042)"></use><use href="#full" transform="translate(315,2072)"></use><use href="#full" transform="translate(315,2102)"></use><use href="#full" transform="translate(315,2132)"></use><use href="#full" transform="translate(315,2162)"></use><use href="#full" transform="translate(315,2192)"></use><use href="#full" transform="translate(315,2222)"></use><use href="#none" transform="translate(315,2252)"></use><use href="#full" transform="translate(315,2282)"></use><use href="#full" transform="translate(315,2312)"></use><use href="#full" transform="translate(315,2342)"></use><use href="#none" transform="translate(315,2372)"></use><use href="#none" transform="translate(315,2402)"></use><use href="#none" transform="translate(315,2432)"></use><use href="#none" transform="translate(315,2462)"></use><use href="#none" transform="translate(315,2492)"></use><use href="#none" transform="translate(315,2522)"></use><use href="#none" transform="translate(315,2552)"></use><use href="#none" transform="translate(315,2582)"></use><use href="#full" transform="translate(315,2612)"></use><use href="#full" transform="translate(315,2642)"></use><use href="#full" transform="translate(315,2672)"></use><use href="#full" transform="translate(315,2702)"></use><use href="#none" transform="translate(315,2732)"></use><use href="#full" transform="translate(315,2762)"></use><use href="#full" transform="translate(315,2792)"></use><use href="#full" transform="translate(315,2822)"></use><use href="#full" transform="translate(315,2852)"></use><use href="#full" transform="translate(315,2882)"></use><use href="#full" transform="translate(315,2912)"></use><use href="#full" transform="translate(315,2942)"></use><use href="#full" transform="translate(315,2972)"></use><use href="#full" transform="translate(315,3002)"></use><use href="#full" transform="translate(315,3032)"></use><use href="#none" transform="translate(315,3062)"></use><use href="#full" transform="translate(315,3092)"></use><use href="#full" transform="translate(315,3122)"></use><use href="#full" transform="translate(315,3152)"></use><use href="#full" transform="translate(315,3182)"></use><use href="#full" transform="translate(315,3212)"></use><use href="#full" transform="translate(315,3242)"></use><use href="#full" transform="translate(315,3272)"></use><use href="#full" transform="translate(315,3302)"></use><use href="#full" transform="translate(315,3332)"></use><use href="#full" transform="translate(315,3362)"></use><use href="#full" transform="translate(315,3392)"></use><use href="#full" transform="translate(315,3422)"></use><use href="#full" transform="translate(315,3452)"></use><use href="#none" transform="translate(315,3482)"></use><use href="#full" transform="translate(315,3512)"></use><use href="#full" transform="translate(315,3542)"></use><use href="#full" transform="translate(315,3572)"></use><use href="#full" transform="translate(315,3602)"></use><use href="#full" transform="translate(315,3632)"></use><use href="#full" transform="translate(315,3662)"></use><use href="#full" transform="translate(315,3692)"></use><use href="#full" transform="translate(315,3722)"></use><use href="#none" transform="translate(315,3752)"></use><use href="#full" transform="translate(315,3782)"></use><use href="#full" transform="translate(315,3812)"></use><use href="#full" transform="translate(315,3842)"></use><use href="#none" transform="translate(315,3872)"></use><use href="#none" transform="translate(315,3902)"></use><use href="#full" transform="translate(315,3932)"></use><use href="#full" transform="translate(315,3962)"></use><use href="#full" transform="translate(315,3992)"></use><use href="#full" transform="translate(315,4022)"></use><use href="#none" transform="translate(315,4052)"></use><use href="#full" transform="translate(315,4082)"></use><use href="#full" transform="translate(315,4112)"></use><use href="#full" transform="translate(315,4142)"></use><use href="#full" transform="translate(315,4172)"></use><use href="#full" transform="translate(315,4202)"></use><use href="#none" transform="translate(315,4232)"></use><use href="#full" transform="translate(315,4262)"></use><use href="#full" transform="translate(315,4292)"></use><use href="#full" transform="translate(315,4322)"></use><use href="#full" transform="translate(315,4352)"></use><use href="#none" transform="translate(315,4382)"></use><use href="#none" transform="translate(315,4412)"></use><use href="#full" transform="translate(315,4442)"></use><use href="#full" transform="translate(315,4472)"></use><use href="#full" transform="translate(315,4502)"></use><use href="#full" transform="translate(315,4532)"></use><use href="#full" transform="translate(315,4562)"></use><use href="#full" transform="translate(315,4592)"></use><use href="#full" transform="translate(315,4622)"></use><use href="#full" transform="translate(315,4652)"></use><use href="#full" transform="translate(315,4682)"></use><use href="#none" transform="translate(315,4712)"></use><use href="#full" transform="translate(315,4742)"></use><use href="#none" transform="translate(315,4772)"></use><use href="#full" transform="translate(315,4802)"></use><use href="#full" transform="translate(315,4832)"></use><use href="#full" transform="translate(315,4862)"></use><use href="#full" transform="translate(315,4892)"></use><use href="#none" transform="translate(315,4922)"></use><use href="#none" transform="translate(315,4952)"></use><use href="#full" transform="translate(315,4982)"></use><use href="#full" transform="translate(315,5012)"></use><use href="#full" transform="translate(315,5042)"></use><use href="#full" transform="translate(315,5072)"></use><use href="#full" transform="translate(315,5102)"></use><use href="#full" transform="translate(315,5132)"></use><use href="#full" transform="translate(315,5162)"></use><use href="#full" transform="translate(315,5192)"></use><use href="#full" transform="translate(315,5222)"></use><use href="#none" transform="translate(315,5252)"></use><use href="#full" transform="translate(315,5282)"></use><use href="#full" transform="translate(315,5312)"></use><use href="#full" transform="translate(315,5342)"></use><use href="#none" transform="translate(315,5372)"></use><use href="#full" transform="translate(315,5402)"></use><use href="#full" transform="translate(315,5432)"></use><use href="#none" transform="translate(315,5462)"></use><use href="#full" transform="translate(315,5492)"></use><use href="#full" transform="translate(315,5522)"></use><use href="#full" transform="translate(315,5552)"></use><use href="#full" transform="translate(315,5582)"></use><use href="#full" transform="translate(315,5612)"></use><use href="#full" transform="translate(315,5642)"></use><use href="#full" transform="translate(315,5672)"></use><use href="#full" transform="translate(315,5702)"></use><use href="#none" transform="translate(315,5732)"></use><use href="#full" transform="translate(315,5762)"></use><use href="#partially" transform="translate(315,5792)"></use><text x="331" y="5811"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(315,5822)"></use><use href="#none" transform="translate(315,5852)"></use><use href="#full" transform="translate(315,5882)"></use><use href="#full" transform="translate(315,5912)"></use><use href="#full" transform="translate(315,5942)"></use><use href="#full" transform="translate(315,5972)"></use><use href="#full" transform="translate(315,6002)"></use><use href="#full" transform="translate(315,6032)"></use><use href="#full" transform="translate(315,6062)"></use><use href="#none" transform="translate(315,6092)"></use><use href="#full" transform="translate(315,6122)"></use><use href="#full" transform="translate(315,6152)"></use><use href="#full" transform="translate(315,6182)"></use><use href="#full" transform="translate(315,6212)"></use><use href="#full" transform="translate(315,6242)"></use><use href="#full" transform="translate(315,6272)"></use><use href="#full" transform="translate(315,6302)"></use><use href="#full" transform="translate(315,6332)"></use><use href="#full" transform="translate(315,6362)"></use><use href="#full" transform="translate(315,6392)"></use><use href="#full" transform="translate(315,6422)"></use><use href="#none" transform="translate(315,6452)"></use><use href="#none" transform="translate(315,6482)"></use><use href="#full" transform="translate(315,6512)"></use><use href="#full" transform="translate(315,6542)"></use><use href="#full" transform="translate(315,6572)"></use><use href="#full" transform="translate(315,6602)"></use><use href="#none" transform="translate(315,6632)"></use><use href="#full" transform="translate(315,6662)"></use><use href="#full" transform="translate(315,6692)"></use><use href="#full" transform="translate(315,6722)"></use><use href="#none" transform="translate(315,6752)"></use><use href="#full" transform="translate(315,6782)"></use><use href="#full" transform="translate(315,6812)"></use><use href="#full" transform="translate(315,6842)"></use><use href="#full" transform="translate(315,6872)"></use><use href="#none" transform="translate(315,6902)"></use><use href="#full" transform="translate(315,6932)"></use><use href="#full" transform="translate(315,6962)"></use><use href="#full" transform="translate(315,6992)"></use><use href="#full" transform="translate(315,7022)"></use><use href="#full" transform="translate(315,7052)"></use><use href="#full" transform="translate(315,7082)"></use><use href="#full" transform="translate(315,7112)"></use><use href="#full" transform="translate(315,7142)"></use><use href="#full" transform="translate(315,7172)"></use><use href="#none" transform="translate(315,7202)"></use><use href="#full" transform="translate(315,7232)"></use><use href="#none" transform="translate(315,7262)"></use><use href="#none" transform="translate(315,7292)"></use><use href="#full" transform="translate(315,7322)"></use><use href="#full" transform="translate(315,7352)"></use><use href="#full" transform="translate(315,7382)"></use><use href="#full" transform="translate(315,7412)"></use><use href="#none" transform="translate(315,7442)"></use><use href="#none" transform="translate(315,7472)"></use><use href="#full" transform="translate(315,7502)"></use><use href="#full" transform="translate(315,7532)"></use><use href="#full" transform="translate(315,7562)"></use><use href="#full" transform="translate(315,7592)"></use><use href="#full" transform="translate(315,7622)"></use><use href="#full" transform="translate(315,7652)"></use><use href="#full" transform="translate(315,7682)"></use><use href="#full" transform="translate(315,7712)"></use><use href="#full" transform="translate(315,7742)"></use><use href="#full" transform="translate(315,7772)"></use><use href="#full" transform="translate(315,7802)"></use><use href="#full" transform="translate(315,7832)"></use><use href="#full" transform="translate(315,7862)"></use><use href="#full" transform="translate(315,7892)"></use><use href="#full" transform="translate(315,7922)"></use><use href="#full" transform="translate(315,7952)"></use><use href="#full" transform="translate(315,7982)"></use><use href="#full" transform="translate(315,8012)"></use><use href="#full" transform="translate(315,8042)"></use><use href="#full" transform="translate(315,8072)"></use><use href="#full" transform="translate(315,8102)"></use><use href="#full" transform="translate(315,8132)"></use><use href="#full" transform="translate(315,8162)"></use><use href="#none" transform="translate(315,8192)"></use><use href="#none" transform="translate(315,8222)"></use><use href="#full" transform="translate(315,8252)"></use><use href="#full" transform="translate(315,8282)"></use><use href="#full" transform="translate(315,8312)"></use><use href="#full" transform="translate(315,8342)"></use><use href="#full" transform="translate(315,8372)"></use><use href="#full" transform="translate(315,8402)"></use><use href="#full" transform="translate(315,8432)"></use><use href="#full" transform="translate(315,8462)"></use><use href="#none" transform="translate(315,8492)"></use><use href="#full" transform="translate(315,8522)"></use><use href="#full" transform="translate(315,8552)"></use><use href="#none" transform="translate(315,8582)"></use><use href="#full" transform="translate(315,8612)"></use><use href="#full" transform="translate(315,8642)"></use><use href="#full" transform="translate(315,8672)"></use><use href="#full" transform="translate(315,8702)"></use><use href="#full" transform="translate(315,8732)"></use><use href="#full" transform="translate(315,8762)"></use><use href="#full" transform="translate(315,8792)"></use><use href="#full" transform="translate(315,8822)"></use><use href="#full" transform="translate(315,8852)"></use><use href="#none" transform="translate(315,8882)"></use><use href="#full" transform="translate(315,8912)"></use><use href="#full" transform="translate(315,8942)"></use><use href="#full" transform="translate(315,8972)"></use><use href="#full" transform="translate(315,9002)"></use><use href="#full" transform="translate(315,9032)"></use><use href="#full" transform="translate(315,9062)"></use><use href="#none" transform="translate(315,9092)"></use><use href="#full" transform="translate(315,9122)"></use><use href="#full" transform="translate(315,9152)"></use><use href="#full" transform="translate(315,9182)"></use><use href="#full" transform="translate(315,9212)"></use><use href="#full" transform="translate(315,9242)"></use><use href="#full" transform="translate(315,9272)"></use><use href="#full" transform="translate(315,9302)"></use><use href="#full" transform="translate(315,9332)"></use><use href="#none" transform="translate(315,9362)"></use><use href="#full" transform="translate(315,9392)"></use><use href="#none" transform="translate(315,9422)"></use><use href="#full" transform="translate(315,9452)"></use><use href="#full" transform="translate(315,9482)"></use><use href="#full" transform="translate(315,9512)"></use><use href="#full" transform="translate(315,9542)"></use><use href="#full" transform="translate(315,9572)"></use><use href="#full" transform="translate(315,9602)"></use><use href="#full" transform="translate(315,9632)"></use><use href="#full" transform="translate(315,9662)"></use><use href="#full" transform="translate(315,9692)"></use><use href="#full" transform="translate(315,9722)"></use><use href="#full" transform="translate(315,9752)"></use><use href="#none" transform="translate(315,9782)"></use><use href="#none" transform="translate(315,9812)"></use><use href="#full" transform="translate(315,9842)"></use><use href="#full" transform="translate(315,9872)"></use><use href="#full" transform="translate(315,9902)"></use><use href="#full" transform="translate(315,9932)"></use><use href="#full" transform="translate(315,9962)"></use><use href="#full" transform="translate(315,9992)"></use><use href="#full" transform="translate(315,10022)"></use><use href="#full" transform="translate(315,10052)"></use><use href="#full" transform="translate(315,10082)"></use><use href="#full" transform="translate(315,10112)"></use><use href="#full" transform="translate(315,10142)"></use><use href="#full" transform="translate(315,10172)"></use><use href="#full" transform="translate(315,10202)"></use><use href="#full" transform="translate(315,10232)"></use><use href="#full" transform="translate(315,10262)"></use><use href="#full" transform="translate(315,10292)"></use><use href="#full" transform="translate(315,10322)"></use><use href="#full" transform="translate(315,10352)"></use><use href="#full" transform="translate(315,10382)"></use><use href="#full" transform="translate(315,10412)"></use><use href="#full" transform="translate(315,10442)"></use><use href="#full" transform="translate(315,10472)"></use><use href="#full" transform="translate(315,10502)"></use><use href="#none" transform="translate(315,10532)"></use><use href="#full" transform="translate(315,10562)"></use><use href="#full" transform="translate(315,10592)"></use><use href="#full" transform="translate(315,10622)"></use><use href="#full" transform="translate(315,10652)"></use><use href="#full" transform="translate(315,10682)"></use><use href="#full" transform="translate(315,10712)"></use><use href="#full" transform="translate(315,10742)"></use><use href="#full" transform="translate(315,10772)"></use><use href="#full" transform="translate(315,10802)"></use><use href="#full" transform="translate(315,10832)"></use><use href="#full" transform="translate(315,10862)"></use><use href="#full" transform="translate(315,10892)"></use><use href="#full" transform="translate(315,10922)"></use><use href="#full" transform="translate(315,10952)"></use><use href="#full" transform="translate(315,10982)"></use><use href="#full" transform="translate(315,11012)"></use><use href="#full" transform="translate(315,11042)"></use><use href="#full" transform="translate(315,11072)"></use><use href="#full" transform="translate(315,11102)"></use><use href="#full" transform="translate(315,11132)"></use><use href="#partially" transform="translate(315,11162)"></use><text x="331" y="11181"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(315,11192)"></use><use href="#full" transform="translate(315,11222)"></use><use href="#full" transform="translate(315,11252)"></use><use href="#full" transform="translate(315,11282)"></use><use href="#full" transform="translate(315,11312)"></use><use href="#full" transform="translate(315,11342)"></use><use href="#full" transform="translate(315,11372)"></use><use href="#full" transform="translate(315,11402)"></use><use href="#full" transform="translate(315,11432)"></use><use href="#full" transform="translate(315,11462)"></use><use href="#full" transform="translate(315,11492)"></use><use href="#full" transform="translate(315,11522)"></use><use href="#full" transform="translate(315,11552)"></use><use href="#full" transform="translate(315,11582)"></use><use href="#full" transform="translate(315,11612)"></use><use href="#full" transform="translate(315,11642)"></use><use href="#none" transform="translate(315,11672)"></use><use href="#full" transform="translate(315,11702)"></use><use href="#full" transform="translate(315,11732)"></use><use href="#full" transform="translate(315,11762)"></use><use href="#none" transform="translate(315,11792)"></use><use href="#full" transform="translate(315,11822)"></use><use href="#full" transform="translate(315,11852)"></use><use href="#full" transform="translate(315,11882)"></use><use href="#none" transform="translate(315,11912)"></use><use href="#full" transform="translate(315,11942)"></use><use href="#full" transform="translate(315,11972)"></use><use href="#full" transform="translate(315,12002)"></use><use href="#full" transform="translate(315,12032)"></use><use href="#full" transform="translate(315,12062)"></use><use href="#full" transform="translate(315,12092)"></use><use href="#full" transform="translate(315,12122)"></use><use href="#full" transform="translate(315,12152)"></use><use href="#none" transform="translate(315,12182)"></use><use href="#full" transform="translate(315,12212)"></use><use href="#full" transform="translate(315,12242)"></use><use href="#none" transform="translate(315,12272)"></use><use href="#full" transform="translate(315,12302)"></use><use href="#full" transform="translate(315,12332)"></use><use href="#full" transform="translate(315,12362)"></use><use href="#full" transform="translate(315,12392)"></use><use href="#full" transform="translate(315,12422)"></use><use href="#full" transform="translate(315,12452)"></use><use href="#none" transform="translate(315,12482)"></use><use href="#none" transform="translate(315,12512)"></use><use href="#full" transform="translate(315,12542)"></use><use href="#full" transform="translate(315,12572)"></use><use href="#full" transform="translate(315,12602)"></use><use href="#full" transform="translate(315,12632)"></use><use href="#full" transform="translate(315,12662)"></use><use href="#full" transform="translate(315,12692)"></use><use href="#full" transform="translate(315,12722)"></use><use href="#full" transform="translate(315,12752)"></use><use href="#none" transform="translate(315,12782)"></use><use href="#full" transform="translate(315,12812)"></use><use href="#full" transform="translate(315,12842)"></use><use href="#full" transform="translate(315,12872)"></use><use href="#full" transform="translate(315,12902)"></use><use href="#full" transform="translate(315,12932)"></use><use href="#full" transform="translate(315,12962)"></use><use href="#full" transform="translate(315,12992)"></use><use href="#full" transform="translate(315,13022)"></use><use href="#full" transform="translate(315,13052)"></use><use href="#full" transform="translate(315,13082)"></use><use href="#full" transform="translate(315,13112)"></use><use href="#full" transform="translate(315,13142)"></use><use href="#full" transform="translate(315,13172)"></use><use href="#full" transform="translate(315,13202)"></use><use href="#full" transform="translate(315,13232)"></use><use href="#full" transform="translate(315,13262)"></use><use href="#full" transform="translate(315,13292)"></use><use href="#full" transform="translate(315,13322)"></use><use href="#full" transform="translate(315,13352)"></use><use href="#full" transform="translate(315,13382)"></use><use href="#full" transform="translate(315,13412)"></use><use href="#full" transform="translate(315,13442)"></use><use href="#full" transform="translate(315,13472)"></use><use href="#full" transform="translate(315,13502)"></use><use href="#full" transform="translate(315,13532)"></use><use href="#full" transform="translate(315,13562)"></use><use href="#full" transform="translate(315,13592)"></use><use href="#full" transform="translate(315,13622)"></use><use href="#full" transform="translate(315,13652)"></use><use href="#full" transform="translate(315,13682)"></use><use href="#full" transform="translate(315,13712)"></use><use href="#none" transform="translate(315,13742)"></use><use href="#full" transform="translate(315,13772)"></use><use href="#full" transform="translate(315,13802)"></use><use href="#full" transform="translate(315,13832)"></use><use href="#none" transform="translate(315,13862)"></use><use href="#none" transform="translate(315,13892)"></use><use href="#full" transform="translate(315,13922)"></use><use href="#full" transform="translate(315,13952)"></use><use href="#full" transform="translate(315,13982)"></use><use href="#full" transform="translate(315,14012)"></use><use href="#full" transform="translate(315,14042)"></use><use href="#full" transform="translate(315,14072)"></use><use href="#full" transform="translate(315,14102)"></use><use href="#full" transform="translate(315,14132)"></use><use href="#full" transform="translate(315,14162)"></use><use href="#full" transform="translate(315,14192)"></use><use href="#none" transform="translate(315,14222)"></use><use href="#partially" transform="translate(315,14252)"></use><text x="331" y="14271"><title>Not as expression</title>a</text><use href="#full" transform="translate(315,14282)"></use><use href="#full" transform="translate(315,14312)"></use><use href="#full" transform="translate(315,14342)"></use><use href="#full" transform="translate(315,14372)"></use><use href="#full" transform="translate(315,14402)"></use><use href="#full" transform="translate(315,14432)"></use><use href="#full" transform="translate(315,14462)"></use><use href="#full" transform="translate(315,14492)"></use><use href="#none" transform="translate(315,14522)"></use><use href="#full" transform="translate(315,14552)"></use><use href="#full" transform="translate(315,14582)"></use><use href="#full" transform="translate(315,14612)"></use><use href="#none" transform="translate(315,14642)"></use><use href="#full" transform="translate(315,14672)"></use><use href="#full" transform="translate(315,14702)"></use><use href="#full" transform="translate(315,14732)"></use><use href="#none" transform="translate(315,14762)"></use><use href="#none" transform="translate(315,14792)"></use><use href="#none" transform="translate(315,14822)"></use><use href="#full" transform="translate(315,14852)"></use><use href="#full" transform="translate(315,14882)"></use><use href="#full" transform="translate(315,14912)"></use><use href="#full" transform="translate(315,14942)"></use><use href="#full" transform="translate(315,14972)"></use><use href="#full" transform="translate(315,15002)"></use><use href="#full" transform="translate(315,15032)"></use><use href="#full" transform="translate(315,15062)"></use><use href="#full" transform="translate(315,15092)"></use><use href="#none" transform="translate(315,15122)"></use><use href="#none" transform="translate(315,15152)"></use><use href="#full" transform="translate(315,15182)"></use><use href="#full" transform="translate(315,15212)"></use><use href="#full" transform="translate(315,15242)"></use><use href="#full" transform="translate(315,15272)"></use><use href="#none" transform="translate(315,15302)"></use><use href="#none" transform="translate(315,15332)"></use><use href="#full" transform="translate(315,15362)"></use><use href="#full" transform="translate(315,15392)"></use><use href="#full" transform="translate(315,15422)"></use><use href="#full" transform="translate(315,15452)"></use><use href="#full" transform="translate(315,15482)"></use><use href="#full" transform="translate(315,15512)"></use><use href="#full" transform="translate(315,15542)"></use><use href="#full" transform="translate(315,15572)"></use><use href="#full" transform="translate(315,15602)"></use><use href="#full" transform="translate(315,15632)"></use><use href="#full" transform="translate(315,15662)"></use><use href="#full" transform="translate(315,15692)"></use><use href="#none" transform="translate(315,15722)"></use><use href="#full" transform="translate(315,15752)"></use><use href="#none" transform="translate(315,15782)"></use><use href="#full" transform="translate(315,15812)"></use><use href="#none" transform="translate(315,15842)"></use><use href="#none" transform="translate(315,15872)"></use><use href="#full" transform="translate(315,15902)"></use><use href="#none" transform="translate(315,15932)"></use><use href="#full" transform="translate(315,15962)"></use><use href="#full" transform="translate(315,15992)"></use><use href="#full" transform="translate(315,16022)"></use><use href="#full" transform="translate(315,16052)"></use><use href="#full" transform="translate(315,16082)"></use><use href="#full" transform="translate(315,16112)"></use><use href="#full" transform="translate(315,16142)"></use><use href="#full" transform="translate(315,16172)"></use><use href="#full" transform="translate(315,16202)"></use><use href="#full" transform="translate(315,16232)"></use><use href="#full" transform="translate(315,16262)"></use><use href="#full" transform="translate(315,16292)"></use><use href="#full" transform="translate(315,16322)"></use><use href="#none" transform="translate(315,16352)"></use><use href="#full" transform="translate(315,16382)"></use><use href="#full" transform="translate(315,16412)"></use><use href="#full" transform="translate(315,16442)"></use></g><g><title>MariaDB</title><path d="M425,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(366.5, 83) rotate(-45)">MariaDB</text><use href="#full" transform="translate(350,92)"></use><use href="#none" transform="translate(350,122)"></use><use href="#none" transform="translate(350,152)"></use><use href="#none" transform="translate(350,182)"></use><use href="#full" transform="translate(350,212)"></use><use href="#none" transform="translate(350,242)"></use><use href="#full" transform="translate(350,272)"></use><use href="#none" transform="translate(350,302)"></use><use href="#none" transform="translate(350,332)"></use><use href="#full" transform="translate(350,362)"></use><use href="#full" transform="translate(350,392)"></use><use href="#full" transform="translate(350,422)"></use><use href="#none" transform="translate(350,452)"></use><use href="#none" transform="translate(350,482)"></use><use href="#none" transform="translate(350,512)"></use><use href="#full" transform="translate(350,542)"></use><use href="#full" transform="translate(350,572)"></use><use href="#full" transform="translate(350,602)"></use><use href="#full" transform="translate(350,632)"></use><use href="#full" transform="translate(350,662)"></use><use href="#full" transform="translate(350,692)"></use><use href="#full" transform="translate(350,722)"></use><use href="#full" transform="translate(350,752)"></use><use href="#none" transform="translate(350,782)"></use><use href="#full" transform="translate(350,812)"></use><use href="#none" transform="translate(350,842)"></use><use href="#none" transform="translate(350,872)"></use><use href="#none" transform="translate(350,902)"></use><use href="#full" transform="translate(350,932)"></use><use href="#none" transform="translate(350,962)"></use><use href="#full" transform="translate(350,992)"></use><use href="#none" transform="translate(350,1022)"></use><use href="#full" transform="translate(350,1052)"></use><use href="#full" transform="translate(350,1082)"></use><use href="#full" transform="translate(350,1112)"></use><use href="#none" transform="translate(350,1142)"></use><use href="#none" transform="translate(350,1172)"></use><use href="#none" transform="translate(350,1202)"></use><use href="#full" transform="translate(350,1232)"></use><use href="#none" transform="translate(350,1262)"></use><use href="#partially" transform="translate(350,1292)"></use><text x="366" y="1311"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,1322)"></use><use href="#none" transform="translate(350,1352)"></use><use href="#none" transform="translate(350,1382)"></use><use href="#full" transform="translate(350,1412)"></use><use href="#none" transform="translate(350,1442)"></use><use href="#full" transform="translate(350,1472)"></use><use href="#full" transform="translate(350,1502)"></use><use href="#full" transform="translate(350,1532)"></use><use href="#full" transform="translate(350,1562)"></use><use href="#full" transform="translate(350,1592)"></use><use href="#none" transform="translate(350,1622)"></use><use href="#full" transform="translate(350,1652)"></use><use href="#none" transform="translate(350,1682)"></use><use href="#full" transform="translate(350,1712)"></use><use href="#full" transform="translate(350,1742)"></use><use href="#full" transform="translate(350,1772)"></use><use href="#full" transform="translate(350,1802)"></use><use href="#full" transform="translate(350,1832)"></use><use href="#full" transform="translate(350,1862)"></use><use href="#none" transform="translate(350,1892)"></use><use href="#full" transform="translate(350,1922)"></use><use href="#full" transform="translate(350,1952)"></use><use href="#none" transform="translate(350,1982)"></use><use href="#full" transform="translate(350,2012)"></use><use href="#full" transform="translate(350,2042)"></use><use href="#full" transform="translate(350,2072)"></use><use href="#none" transform="translate(350,2102)"></use><use href="#none" transform="translate(350,2132)"></use><use href="#full" transform="translate(350,2162)"></use><use href="#partially" transform="translate(350,2192)"></use><text x="366" y="2211"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,2222)"></use><use href="#none" transform="translate(350,2252)"></use><use href="#full" transform="translate(350,2282)"></use><use href="#partially" transform="translate(350,2312)"></use><text x="366" y="2331"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,2342)"></use><use href="#full" transform="translate(350,2372)"></use><use href="#none" transform="translate(350,2402)"></use><use href="#full" transform="translate(350,2432)"></use><use href="#none" transform="translate(350,2462)"></use><use href="#full" transform="translate(350,2492)"></use><use href="#none" transform="translate(350,2522)"></use><use href="#none" transform="translate(350,2552)"></use><use href="#none" transform="translate(350,2582)"></use><use href="#none" transform="translate(350,2612)"></use><use href="#none" transform="translate(350,2642)"></use><use href="#none" transform="translate(350,2672)"></use><use href="#full" transform="translate(350,2702)"></use><use href="#full" transform="translate(350,2732)"></use><use href="#full" transform="translate(350,2762)"></use><use href="#none" transform="translate(350,2792)"></use><use href="#none" transform="translate(350,2822)"></use><use href="#none" transform="translate(350,2852)"></use><use href="#none" transform="translate(350,2882)"></use><use href="#full" transform="translate(350,2912)"></use><use href="#full" transform="translate(350,2942)"></use><use href="#none" transform="translate(350,2972)"></use><use href="#none" transform="translate(350,3002)"></use><use href="#none" transform="translate(350,3032)"></use><use href="#none" transform="translate(350,3062)"></use><use href="#full" transform="translate(350,3092)"></use><use href="#full" transform="translate(350,3122)"></use><use href="#full" transform="translate(350,3152)"></use><use href="#full" transform="translate(350,3182)"></use><use href="#none" transform="translate(350,3212)"></use><use href="#none" transform="translate(350,3242)"></use><use href="#partially" transform="translate(350,3272)"></use><text x="366" y="3291"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,3302)"></use><use href="#none" transform="translate(350,3332)"></use><use href="#none" transform="translate(350,3362)"></use><use href="#none" transform="translate(350,3392)"></use><use href="#full" transform="translate(350,3422)"></use><use href="#full" transform="translate(350,3452)"></use><use href="#none" transform="translate(350,3482)"></use><use href="#none" transform="translate(350,3512)"></use><use href="#full" transform="translate(350,3542)"></use><use href="#none" transform="translate(350,3572)"></use><use href="#full" transform="translate(350,3602)"></use><use href="#none" transform="translate(350,3632)"></use><use href="#none" transform="translate(350,3662)"></use><use href="#none" transform="translate(350,3692)"></use><use href="#none" transform="translate(350,3722)"></use><use href="#none" transform="translate(350,3752)"></use><use href="#none" transform="translate(350,3782)"></use><use href="#full" transform="translate(350,3812)"></use><use href="#none" transform="translate(350,3842)"></use><use href="#full" transform="translate(350,3872)"></use><use href="#none" transform="translate(350,3902)"></use><use href="#full" transform="translate(350,3932)"></use><use href="#full" transform="translate(350,3962)"></use><use href="#full" transform="translate(350,3992)"></use><use href="#none" transform="translate(350,4022)"></use><use href="#none" transform="translate(350,4052)"></use><use href="#full" transform="translate(350,4082)"></use><use href="#full" transform="translate(350,4112)"></use><use href="#full" transform="translate(350,4142)"></use><use href="#full" transform="translate(350,4172)"></use><use href="#full" transform="translate(350,4202)"></use><use href="#none" transform="translate(350,4232)"></use><use href="#none" transform="translate(350,4262)"></use><use href="#none" transform="translate(350,4292)"></use><use href="#full" transform="translate(350,4322)"></use><use href="#partially" transform="translate(350,4352)"></use><text x="366" y="4371"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,4382)"></use><use href="#none" transform="translate(350,4412)"></use><use href="#full" transform="translate(350,4442)"></use><use href="#full" transform="translate(350,4472)"></use><use href="#full" transform="translate(350,4502)"></use><use href="#full" transform="translate(350,4532)"></use><use href="#partially" transform="translate(350,4562)"></use><text x="366" y="4581"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,4592)"></use><use href="#none" transform="translate(350,4622)"></use><use href="#none" transform="translate(350,4652)"></use><use href="#full" transform="translate(350,4682)"></use><use href="#none" transform="translate(350,4712)"></use><use href="#none" transform="translate(350,4742)"></use><use href="#none" transform="translate(350,4772)"></use><use href="#full" transform="translate(350,4802)"></use><use href="#full" transform="translate(350,4832)"></use><use href="#full" transform="translate(350,4862)"></use><use href="#full" transform="translate(350,4892)"></use><use href="#none" transform="translate(350,4922)"></use><use href="#full" transform="translate(350,4952)"></use><use href="#none" transform="translate(350,4982)"></use><use href="#full" transform="translate(350,5012)"></use><use href="#full" transform="translate(350,5042)"></use><use href="#full" transform="translate(350,5072)"></use><use href="#full" transform="translate(350,5102)"></use><use href="#full" transform="translate(350,5132)"></use><use href="#full" transform="translate(350,5162)"></use><use href="#full" transform="translate(350,5192)"></use><use href="#none" transform="translate(350,5222)"></use><use href="#none" transform="translate(350,5252)"></use><use href="#full" transform="translate(350,5282)"></use><use href="#full" transform="translate(350,5312)"></use><use href="#full" transform="translate(350,5342)"></use><use href="#none" transform="translate(350,5372)"></use><use href="#none" transform="translate(350,5402)"></use><use href="#full" transform="translate(350,5432)"></use><use href="#full" transform="translate(350,5462)"></use><use href="#full" transform="translate(350,5492)"></use><use href="#none" transform="translate(350,5522)"></use><use href="#none" transform="translate(350,5552)"></use><use href="#none" transform="translate(350,5582)"></use><use href="#full" transform="translate(350,5612)"></use><use href="#full" transform="translate(350,5642)"></use><use href="#full" transform="translate(350,5672)"></use><use href="#full" transform="translate(350,5702)"></use><use href="#none" transform="translate(350,5732)"></use><use href="#none" transform="translate(350,5762)"></use><use href="#full" transform="translate(350,5792)"></use><use href="#full" transform="translate(350,5822)"></use><use href="#none" transform="translate(350,5852)"></use><use href="#full" transform="translate(350,5882)"></use><use href="#none" transform="translate(350,5912)"></use><use href="#full" transform="translate(350,5942)"></use><use href="#full" transform="translate(350,5972)"></use><use href="#none" transform="translate(350,6002)"></use><use href="#full" transform="translate(350,6032)"></use><use href="#full" transform="translate(350,6062)"></use><use href="#none" transform="translate(350,6092)"></use><use href="#none" transform="translate(350,6122)"></use><use href="#full" transform="translate(350,6152)"></use><use href="#none" transform="translate(350,6182)"></use><use href="#none" transform="translate(350,6212)"></use><use href="#none" transform="translate(350,6242)"></use><use href="#none" transform="translate(350,6272)"></use><use href="#none" transform="translate(350,6302)"></use><use href="#none" transform="translate(350,6332)"></use><use href="#none" transform="translate(350,6362)"></use><use href="#none" transform="translate(350,6392)"></use><use href="#none" transform="translate(350,6422)"></use><use href="#none" transform="translate(350,6452)"></use><use href="#none" transform="translate(350,6482)"></use><use href="#none" transform="translate(350,6512)"></use><use href="#full" transform="translate(350,6542)"></use><use href="#full" transform="translate(350,6572)"></use><use href="#full" transform="translate(350,6602)"></use><use href="#none" transform="translate(350,6632)"></use><use href="#full" transform="translate(350,6662)"></use><use href="#full" transform="translate(350,6692)"></use><use href="#none" transform="translate(350,6722)"></use><use href="#none" transform="translate(350,6752)"></use><use href="#partially" transform="translate(350,6782)"></use><text x="366" y="6801"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,6812)"></use><use href="#partially" transform="translate(350,6842)"></use><text x="366" y="6861"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,6872)"></use><use href="#none" transform="translate(350,6902)"></use><use href="#none" transform="translate(350,6932)"></use><use href="#none" transform="translate(350,6962)"></use><use href="#partially" transform="translate(350,6992)"></use><text x="366" y="7011"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,7022)"></use><use href="#full" transform="translate(350,7052)"></use><use href="#full" transform="translate(350,7082)"></use><use href="#partially" transform="translate(350,7112)"></use><text x="366" y="7131"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,7142)"></use><use href="#none" transform="translate(350,7172)"></use><use href="#none" transform="translate(350,7202)"></use><use href="#full" transform="translate(350,7232)"></use><use href="#none" transform="translate(350,7262)"></use><use href="#none" transform="translate(350,7292)"></use><use href="#none" transform="translate(350,7322)"></use><use href="#full" transform="translate(350,7352)"></use><use href="#none" transform="translate(350,7382)"></use><use href="#none" transform="translate(350,7412)"></use><use href="#none" transform="translate(350,7442)"></use><use href="#none" transform="translate(350,7472)"></use><use href="#none" transform="translate(350,7502)"></use><use href="#none" transform="translate(350,7532)"></use><use href="#none" transform="translate(350,7562)"></use><use href="#none" transform="translate(350,7592)"></use><use href="#none" transform="translate(350,7622)"></use><use href="#full" transform="translate(350,7652)"></use><use href="#none" transform="translate(350,7682)"></use><use href="#full" transform="translate(350,7712)"></use><use href="#full" transform="translate(350,7742)"></use><use href="#none" transform="translate(350,7772)"></use><use href="#none" transform="translate(350,7802)"></use><use href="#partially" transform="translate(350,7832)"></use><text x="366" y="7851"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,7862)"></use><use href="#none" transform="translate(350,7892)"></use><use href="#none" transform="translate(350,7922)"></use><use href="#none" transform="translate(350,7952)"></use><use href="#none" transform="translate(350,7982)"></use><use href="#full" transform="translate(350,8012)"></use><use href="#full" transform="translate(350,8042)"></use><use href="#full" transform="translate(350,8072)"></use><use href="#full" transform="translate(350,8102)"></use><use href="#none" transform="translate(350,8132)"></use><use href="#partially" transform="translate(350,8162)"></use><text x="366" y="8181"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,8192)"></use><use href="#full" transform="translate(350,8222)"></use><use href="#full" transform="translate(350,8252)"></use><use href="#none" transform="translate(350,8282)"></use><use href="#none" transform="translate(350,8312)"></use><use href="#full" transform="translate(350,8342)"></use><use href="#none" transform="translate(350,8372)"></use><use href="#full" transform="translate(350,8402)"></use><use href="#none" transform="translate(350,8432)"></use><use href="#full" transform="translate(350,8462)"></use><use href="#full" transform="translate(350,8492)"></use><use href="#full" transform="translate(350,8522)"></use><use href="#full" transform="translate(350,8552)"></use><use href="#none" transform="translate(350,8582)"></use><use href="#full" transform="translate(350,8612)"></use><use href="#full" transform="translate(350,8642)"></use><use href="#full" transform="translate(350,8672)"></use><use href="#full" transform="translate(350,8702)"></use><use href="#full" transform="translate(350,8732)"></use><use href="#full" transform="translate(350,8762)"></use><use href="#full" transform="translate(350,8792)"></use><use href="#full" transform="translate(350,8822)"></use><use href="#full" transform="translate(350,8852)"></use><use href="#none" transform="translate(350,8882)"></use><use href="#full" transform="translate(350,8912)"></use><use href="#full" transform="translate(350,8942)"></use><use href="#full" transform="translate(350,8972)"></use><use href="#none" transform="translate(350,9002)"></use><use href="#partially" transform="translate(350,9032)"></use><text x="366" y="9051"><title>Not as table name</title>c</text><use href="#partially" transform="translate(350,9062)"></use><text x="366" y="9081"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,9092)"></use><use href="#full" transform="translate(350,9122)"></use><use href="#full" transform="translate(350,9152)"></use><use href="#full" transform="translate(350,9182)"></use><use href="#none" transform="translate(350,9212)"></use><use href="#full" transform="translate(350,9242)"></use><use href="#full" transform="translate(350,9272)"></use><use href="#full" transform="translate(350,9302)"></use><use href="#full" transform="translate(350,9332)"></use><use href="#none" transform="translate(350,9362)"></use><use href="#full" transform="translate(350,9392)"></use><use href="#none" transform="translate(350,9422)"></use><use href="#full" transform="translate(350,9452)"></use><use href="#full" transform="translate(350,9482)"></use><use href="#full" transform="translate(350,9512)"></use><use href="#full" transform="translate(350,9542)"></use><use href="#full" transform="translate(350,9572)"></use><use href="#full" transform="translate(350,9602)"></use><use href="#full" transform="translate(350,9632)"></use><use href="#none" transform="translate(350,9662)"></use><use href="#full" transform="translate(350,9692)"></use><use href="#full" transform="translate(350,9722)"></use><use href="#none" transform="translate(350,9752)"></use><use href="#none" transform="translate(350,9782)"></use><use href="#none" transform="translate(350,9812)"></use><use href="#none" transform="translate(350,9842)"></use><use href="#none" transform="translate(350,9872)"></use><use href="#none" transform="translate(350,9902)"></use><use href="#full" transform="translate(350,9932)"></use><use href="#none" transform="translate(350,9962)"></use><use href="#full" transform="translate(350,9992)"></use><use href="#full" transform="translate(350,10022)"></use><use href="#full" transform="translate(350,10052)"></use><use href="#none" transform="translate(350,10082)"></use><use href="#full" transform="translate(350,10112)"></use><use href="#full" transform="translate(350,10142)"></use><use href="#partially" transform="translate(350,10172)"></use><text x="366" y="10191"><title>Not as table name</title>c</text><use href="#partially" transform="translate(350,10202)"></use><text x="366" y="10221"><title>Not as table name</title>c</text><use href="#partially" transform="translate(350,10232)"></use><text x="366" y="10251"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,10262)"></use><use href="#full" transform="translate(350,10292)"></use><use href="#full" transform="translate(350,10322)"></use><use href="#none" transform="translate(350,10352)"></use><use href="#partially" transform="translate(350,10382)"></use><text x="366" y="10401"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,10412)"></use><use href="#none" transform="translate(350,10442)"></use><use href="#full" transform="translate(350,10472)"></use><use href="#full" transform="translate(350,10502)"></use><use href="#none" transform="translate(350,10532)"></use><use href="#full" transform="translate(350,10562)"></use><use href="#full" transform="translate(350,10592)"></use><use href="#full" transform="translate(350,10622)"></use><use href="#full" transform="translate(350,10652)"></use><use href="#none" transform="translate(350,10682)"></use><use href="#full" transform="translate(350,10712)"></use><use href="#none" transform="translate(350,10742)"></use><use href="#full" transform="translate(350,10772)"></use><use href="#full" transform="translate(350,10802)"></use><use href="#none" transform="translate(350,10832)"></use><use href="#partially" transform="translate(350,10862)"></use><text x="366" y="10881"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,10892)"></use><use href="#none" transform="translate(350,10922)"></use><use href="#none" transform="translate(350,10952)"></use><use href="#full" transform="translate(350,10982)"></use><use href="#none" transform="translate(350,11012)"></use><use href="#none" transform="translate(350,11042)"></use><use href="#full" transform="translate(350,11072)"></use><use href="#none" transform="translate(350,11102)"></use><use href="#none" transform="translate(350,11132)"></use><use href="#none" transform="translate(350,11162)"></use><use href="#full" transform="translate(350,11192)"></use><use href="#none" transform="translate(350,11222)"></use><use href="#none" transform="translate(350,11252)"></use><use href="#none" transform="translate(350,11282)"></use><use href="#none" transform="translate(350,11312)"></use><use href="#full" transform="translate(350,11342)"></use><use href="#none" transform="translate(350,11372)"></use><use href="#none" transform="translate(350,11402)"></use><use href="#full" transform="translate(350,11432)"></use><use href="#full" transform="translate(350,11462)"></use><use href="#full" transform="translate(350,11492)"></use><use href="#none" transform="translate(350,11522)"></use><use href="#none" transform="translate(350,11552)"></use><use href="#none" transform="translate(350,11582)"></use><use href="#full" transform="translate(350,11612)"></use><use href="#none" transform="translate(350,11642)"></use><use href="#none" transform="translate(350,11672)"></use><use href="#none" transform="translate(350,11702)"></use><use href="#full" transform="translate(350,11732)"></use><use href="#full" transform="translate(350,11762)"></use><use href="#full" transform="translate(350,11792)"></use><use href="#full" transform="translate(350,11822)"></use><use href="#full" transform="translate(350,11852)"></use><use href="#full" transform="translate(350,11882)"></use><use href="#full" transform="translate(350,11912)"></use><use href="#none" transform="translate(350,11942)"></use><use href="#none" transform="translate(350,11972)"></use><use href="#full" transform="translate(350,12002)"></use><use href="#full" transform="translate(350,12032)"></use><use href="#full" transform="translate(350,12062)"></use><use href="#none" transform="translate(350,12092)"></use><use href="#none" transform="translate(350,12122)"></use><use href="#full" transform="translate(350,12152)"></use><use href="#full" transform="translate(350,12182)"></use><use href="#full" transform="translate(350,12212)"></use><use href="#none" transform="translate(350,12242)"></use><use href="#none" transform="translate(350,12272)"></use><use href="#full" transform="translate(350,12302)"></use><use href="#full" transform="translate(350,12332)"></use><use href="#full" transform="translate(350,12362)"></use><use href="#none" transform="translate(350,12392)"></use><use href="#none" transform="translate(350,12422)"></use><use href="#full" transform="translate(350,12452)"></use><use href="#full" transform="translate(350,12482)"></use><use href="#none" transform="translate(350,12512)"></use><use href="#full" transform="translate(350,12542)"></use><use href="#full" transform="translate(350,12572)"></use><use href="#none" transform="translate(350,12602)"></use><use href="#full" transform="translate(350,12632)"></use><use href="#none" transform="translate(350,12662)"></use><use href="#full" transform="translate(350,12692)"></use><use href="#full" transform="translate(350,12722)"></use><use href="#none" transform="translate(350,12752)"></use><use href="#full" transform="translate(350,12782)"></use><use href="#partially" transform="translate(350,12812)"></use><text x="366" y="12831"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(350,12842)"></use><use href="#none" transform="translate(350,12872)"></use><use href="#none" transform="translate(350,12902)"></use><use href="#none" transform="translate(350,12932)"></use><use href="#full" transform="translate(350,12962)"></use><use href="#full" transform="translate(350,12992)"></use><use href="#none" transform="translate(350,13022)"></use><use href="#full" transform="translate(350,13052)"></use><use href="#none" transform="translate(350,13082)"></use><use href="#none" transform="translate(350,13112)"></use><use href="#none" transform="translate(350,13142)"></use><use href="#partially" transform="translate(350,13172)"></use><text x="366" y="13191"><title>Not as expression</title>a</text><use href="#partially" transform="translate(350,13202)"></use><text x="366" y="13221"><title>Not as expression</title>a</text><use href="#none" transform="translate(350,13232)"></use><use href="#partially" transform="translate(350,13262)"></use><text x="366" y="13281"><title>Not as expression</title>a</text><use href="#none" transform="translate(350,13292)"></use><use href="#none" transform="translate(350,13322)"></use><use href="#full" transform="translate(350,13352)"></use><use href="#none" transform="translate(350,13382)"></use><use href="#full" transform="translate(350,13412)"></use><use href="#none" transform="translate(350,13442)"></use><use href="#none" transform="translate(350,13472)"></use><use href="#none" transform="translate(350,13502)"></use><use href="#partially" transform="translate(350,13532)"></use><text x="366" y="13551"><title>Not as table name</title>c</text><use href="#partially" transform="translate(350,13562)"></use><text x="366" y="13581"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,13592)"></use><use href="#none" transform="translate(350,13622)"></use><use href="#partially" transform="translate(350,13652)"></use><text x="366" y="13671"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,13682)"></use><use href="#partially" transform="translate(350,13712)"></use><text x="366" y="13731"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,13742)"></use><use href="#full" transform="translate(350,13772)"></use><use href="#full" transform="translate(350,13802)"></use><use href="#full" transform="translate(350,13832)"></use><use href="#full" transform="translate(350,13862)"></use><use href="#none" transform="translate(350,13892)"></use><use href="#full" transform="translate(350,13922)"></use><use href="#full" transform="translate(350,13952)"></use><use href="#none" transform="translate(350,13982)"></use><use href="#full" transform="translate(350,14012)"></use><use href="#none" transform="translate(350,14042)"></use><use href="#full" transform="translate(350,14072)"></use><use href="#full" transform="translate(350,14102)"></use><use href="#none" transform="translate(350,14132)"></use><use href="#none" transform="translate(350,14162)"></use><use href="#none" transform="translate(350,14192)"></use><use href="#none" transform="translate(350,14222)"></use><use href="#full" transform="translate(350,14252)"></use><use href="#none" transform="translate(350,14282)"></use><use href="#full" transform="translate(350,14312)"></use><use href="#full" transform="translate(350,14342)"></use><use href="#full" transform="translate(350,14372)"></use><use href="#full" transform="translate(350,14402)"></use><use href="#full" transform="translate(350,14432)"></use><use href="#none" transform="translate(350,14462)"></use><use href="#partially" transform="translate(350,14492)"></use><text x="366" y="14511"><title>Not as table name</title>c</text><use href="#none" transform="translate(350,14522)"></use><use href="#full" transform="translate(350,14552)"></use><use href="#full" transform="translate(350,14582)"></use><use href="#full" transform="translate(350,14612)"></use><use href="#full" transform="translate(350,14642)"></use><use href="#full" transform="translate(350,14672)"></use><use href="#full" transform="translate(350,14702)"></use><use href="#none" transform="translate(350,14732)"></use><use href="#none" transform="translate(350,14762)"></use><use href="#none" transform="translate(350,14792)"></use><use href="#full" transform="translate(350,14822)"></use><use href="#none" transform="translate(350,14852)"></use><use href="#full" transform="translate(350,14882)"></use><use href="#full" transform="translate(350,14912)"></use><use href="#none" transform="translate(350,14942)"></use><use href="#none" transform="translate(350,14972)"></use><use href="#full" transform="translate(350,15002)"></use><use href="#full" transform="translate(350,15032)"></use><use href="#none" transform="translate(350,15062)"></use><use href="#none" transform="translate(350,15092)"></use><use href="#full" transform="translate(350,15122)"></use><use href="#none" transform="translate(350,15152)"></use><use href="#none" transform="translate(350,15182)"></use><use href="#none" transform="translate(350,15212)"></use><use href="#none" transform="translate(350,15242)"></use><use href="#full" transform="translate(350,15272)"></use><use href="#full" transform="translate(350,15302)"></use><use href="#none" transform="translate(350,15332)"></use><use href="#none" transform="translate(350,15362)"></use><use href="#none" transform="translate(350,15392)"></use><use href="#full" transform="translate(350,15422)"></use><use href="#none" transform="translate(350,15452)"></use><use href="#full" transform="translate(350,15482)"></use><use href="#none" transform="translate(350,15512)"></use><use href="#partially" transform="translate(350,15542)"></use><text x="366" y="15561"><title>Not as table name</title>c</text><use href="#partially" transform="translate(350,15572)"></use><text x="366" y="15591"><title>Not as table name</title>c</text><use href="#full" transform="translate(350,15602)"></use><use href="#full" transform="translate(350,15632)"></use><use href="#full" transform="translate(350,15662)"></use><use href="#full" transform="translate(350,15692)"></use><use href="#none" transform="translate(350,15722)"></use><use href="#full" transform="translate(350,15752)"></use><use href="#none" transform="translate(350,15782)"></use><use href="#none" transform="translate(350,15812)"></use><use href="#full" transform="translate(350,15842)"></use><use href="#none" transform="translate(350,15872)"></use><use href="#full" transform="translate(350,15902)"></use><use href="#none" transform="translate(350,15932)"></use><use href="#full" transform="translate(350,15962)"></use><use href="#full" transform="translate(350,15992)"></use><use href="#none" transform="translate(350,16022)"></use><use href="#full" transform="translate(350,16052)"></use><use href="#full" transform="translate(350,16082)"></use><use href="#full" transform="translate(350,16112)"></use><use href="#full" transform="translate(350,16142)"></use><use href="#full" transform="translate(350,16172)"></use><use href="#full" transform="translate(350,16202)"></use><use href="#full" transform="translate(350,16232)"></use><use href="#full" transform="translate(350,16262)"></use><use href="#full" transform="translate(350,16292)"></use><use href="#none" transform="translate(350,16322)"></use><use href="#full" transform="translate(350,16352)"></use><use href="#full" transform="translate(350,16382)"></use><use href="#none" transform="translate(350,16412)"></use><use href="#none" transform="translate(350,16442)"></use></g><g><title>MySQL</title><path d="M460,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(401.5, 83) rotate(-45)">MySQL</text><use href="#full" transform="translate(385,92)"></use><use href="#none" transform="translate(385,122)"></use><use href="#none" transform="translate(385,152)"></use><use href="#none" transform="translate(385,182)"></use><use href="#full" transform="translate(385,212)"></use><use href="#none" transform="translate(385,242)"></use><use href="#full" transform="translate(385,272)"></use><use href="#none" transform="translate(385,302)"></use><use href="#none" transform="translate(385,332)"></use><use href="#full" transform="translate(385,362)"></use><use href="#full" transform="translate(385,392)"></use><use href="#full" transform="translate(385,422)"></use><use href="#none" transform="translate(385,452)"></use><use href="#none" transform="translate(385,482)"></use><use href="#none" transform="translate(385,512)"></use><use href="#full" transform="translate(385,542)"></use><use href="#full" transform="translate(385,572)"></use><use href="#full" transform="translate(385,602)"></use><use href="#full" transform="translate(385,632)"></use><use href="#full" transform="translate(385,662)"></use><use href="#full" transform="translate(385,692)"></use><use href="#full" transform="translate(385,722)"></use><use href="#full" transform="translate(385,752)"></use><use href="#none" transform="translate(385,782)"></use><use href="#full" transform="translate(385,812)"></use><use href="#none" transform="translate(385,842)"></use><use href="#none" transform="translate(385,872)"></use><use href="#none" transform="translate(385,902)"></use><use href="#full" transform="translate(385,932)"></use><use href="#none" transform="translate(385,962)"></use><use href="#full" transform="translate(385,992)"></use><use href="#none" transform="translate(385,1022)"></use><use href="#full" transform="translate(385,1052)"></use><use href="#full" transform="translate(385,1082)"></use><use href="#full" transform="translate(385,1112)"></use><use href="#none" transform="translate(385,1142)"></use><use href="#none" transform="translate(385,1172)"></use><use href="#none" transform="translate(385,1202)"></use><use href="#full" transform="translate(385,1232)"></use><use href="#none" transform="translate(385,1262)"></use><use href="#full" transform="translate(385,1292)"></use><use href="#none" transform="translate(385,1322)"></use><use href="#none" transform="translate(385,1352)"></use><use href="#none" transform="translate(385,1382)"></use><use href="#full" transform="translate(385,1412)"></use><use href="#none" transform="translate(385,1442)"></use><use href="#full" transform="translate(385,1472)"></use><use href="#full" transform="translate(385,1502)"></use><use href="#full" transform="translate(385,1532)"></use><use href="#full" transform="translate(385,1562)"></use><use href="#full" transform="translate(385,1592)"></use><use href="#none" transform="translate(385,1622)"></use><use href="#full" transform="translate(385,1652)"></use><use href="#none" transform="translate(385,1682)"></use><use href="#full" transform="translate(385,1712)"></use><use href="#full" transform="translate(385,1742)"></use><use href="#full" transform="translate(385,1772)"></use><use href="#full" transform="translate(385,1802)"></use><use href="#full" transform="translate(385,1832)"></use><use href="#full" transform="translate(385,1862)"></use><use href="#none" transform="translate(385,1892)"></use><use href="#full" transform="translate(385,1922)"></use><use href="#full" transform="translate(385,1952)"></use><use href="#none" transform="translate(385,1982)"></use><use href="#full" transform="translate(385,2012)"></use><use href="#full" transform="translate(385,2042)"></use><use href="#full" transform="translate(385,2072)"></use><use href="#none" transform="translate(385,2102)"></use><use href="#none" transform="translate(385,2132)"></use><use href="#full" transform="translate(385,2162)"></use><use href="#full" transform="translate(385,2192)"></use><use href="#none" transform="translate(385,2222)"></use><use href="#none" transform="translate(385,2252)"></use><use href="#none" transform="translate(385,2282)"></use><use href="#none" transform="translate(385,2312)"></use><use href="#full" transform="translate(385,2342)"></use><use href="#full" transform="translate(385,2372)"></use><use href="#none" transform="translate(385,2402)"></use><use href="#full" transform="translate(385,2432)"></use><use href="#full" transform="translate(385,2462)"></use><use href="#full" transform="translate(385,2492)"></use><use href="#none" transform="translate(385,2522)"></use><use href="#none" transform="translate(385,2552)"></use><use href="#none" transform="translate(385,2582)"></use><use href="#none" transform="translate(385,2612)"></use><use href="#none" transform="translate(385,2642)"></use><use href="#none" transform="translate(385,2672)"></use><use href="#full" transform="translate(385,2702)"></use><use href="#full" transform="translate(385,2732)"></use><use href="#full" transform="translate(385,2762)"></use><use href="#none" transform="translate(385,2792)"></use><use href="#none" transform="translate(385,2822)"></use><use href="#none" transform="translate(385,2852)"></use><use href="#none" transform="translate(385,2882)"></use><use href="#full" transform="translate(385,2912)"></use><use href="#full" transform="translate(385,2942)"></use><use href="#none" transform="translate(385,2972)"></use><use href="#none" transform="translate(385,3002)"></use><use href="#none" transform="translate(385,3032)"></use><use href="#none" transform="translate(385,3062)"></use><use href="#full" transform="translate(385,3092)"></use><use href="#full" transform="translate(385,3122)"></use><use href="#full" transform="translate(385,3152)"></use><use href="#full" transform="translate(385,3182)"></use><use href="#none" transform="translate(385,3212)"></use><use href="#none" transform="translate(385,3242)"></use><use href="#none" transform="translate(385,3272)"></use><use href="#full" transform="translate(385,3302)"></use><use href="#none" transform="translate(385,3332)"></use><use href="#none" transform="translate(385,3362)"></use><use href="#none" transform="translate(385,3392)"></use><use href="#full" transform="translate(385,3422)"></use><use href="#full" transform="translate(385,3452)"></use><use href="#none" transform="translate(385,3482)"></use><use href="#none" transform="translate(385,3512)"></use><use href="#full" transform="translate(385,3542)"></use><use href="#none" transform="translate(385,3572)"></use><use href="#full" transform="translate(385,3602)"></use><use href="#none" transform="translate(385,3632)"></use><use href="#none" transform="translate(385,3662)"></use><use href="#none" transform="translate(385,3692)"></use><use href="#none" transform="translate(385,3722)"></use><use href="#none" transform="translate(385,3752)"></use><use href="#none" transform="translate(385,3782)"></use><use href="#none" transform="translate(385,3812)"></use><use href="#none" transform="translate(385,3842)"></use><use href="#full" transform="translate(385,3872)"></use><use href="#none" transform="translate(385,3902)"></use><use href="#full" transform="translate(385,3932)"></use><use href="#full" transform="translate(385,3962)"></use><use href="#full" transform="translate(385,3992)"></use><use href="#none" transform="translate(385,4022)"></use><use href="#none" transform="translate(385,4052)"></use><use href="#full" transform="translate(385,4082)"></use><use href="#full" transform="translate(385,4112)"></use><use href="#full" transform="translate(385,4142)"></use><use href="#full" transform="translate(385,4172)"></use><use href="#full" transform="translate(385,4202)"></use><use href="#none" transform="translate(385,4232)"></use><use href="#none" transform="translate(385,4262)"></use><use href="#none" transform="translate(385,4292)"></use><use href="#full" transform="translate(385,4322)"></use><use href="#full" transform="translate(385,4352)"></use><use href="#none" transform="translate(385,4382)"></use><use href="#none" transform="translate(385,4412)"></use><use href="#full" transform="translate(385,4442)"></use><use href="#full" transform="translate(385,4472)"></use><use href="#full" transform="translate(385,4502)"></use><use href="#full" transform="translate(385,4532)"></use><use href="#none" transform="translate(385,4562)"></use><use href="#none" transform="translate(385,4592)"></use><use href="#none" transform="translate(385,4622)"></use><use href="#none" transform="translate(385,4652)"></use><use href="#full" transform="translate(385,4682)"></use><use href="#none" transform="translate(385,4712)"></use><use href="#none" transform="translate(385,4742)"></use><use href="#none" transform="translate(385,4772)"></use><use href="#full" transform="translate(385,4802)"></use><use href="#full" transform="translate(385,4832)"></use><use href="#full" transform="translate(385,4862)"></use><use href="#full" transform="translate(385,4892)"></use><use href="#none" transform="translate(385,4922)"></use><use href="#full" transform="translate(385,4952)"></use><use href="#none" transform="translate(385,4982)"></use><use href="#none" transform="translate(385,5012)"></use><use href="#none" transform="translate(385,5042)"></use><use href="#none" transform="translate(385,5072)"></use><use href="#full" transform="translate(385,5102)"></use><use href="#full" transform="translate(385,5132)"></use><use href="#full" transform="translate(385,5162)"></use><use href="#full" transform="translate(385,5192)"></use><use href="#none" transform="translate(385,5222)"></use><use href="#none" transform="translate(385,5252)"></use><use href="#none" transform="translate(385,5282)"></use><use href="#none" transform="translate(385,5312)"></use><use href="#full" transform="translate(385,5342)"></use><use href="#none" transform="translate(385,5372)"></use><use href="#none" transform="translate(385,5402)"></use><use href="#full" transform="translate(385,5432)"></use><use href="#full" transform="translate(385,5462)"></use><use href="#full" transform="translate(385,5492)"></use><use href="#none" transform="translate(385,5522)"></use><use href="#none" transform="translate(385,5552)"></use><use href="#none" transform="translate(385,5582)"></use><use href="#full" transform="translate(385,5612)"></use><use href="#full" transform="translate(385,5642)"></use><use href="#full" transform="translate(385,5672)"></use><use href="#full" transform="translate(385,5702)"></use><use href="#none" transform="translate(385,5732)"></use><use href="#none" transform="translate(385,5762)"></use><use href="#full" transform="translate(385,5792)"></use><use href="#full" transform="translate(385,5822)"></use><use href="#none" transform="translate(385,5852)"></use><use href="#full" transform="translate(385,5882)"></use><use href="#none" transform="translate(385,5912)"></use><use href="#full" transform="translate(385,5942)"></use><use href="#full" transform="translate(385,5972)"></use><use href="#none" transform="translate(385,6002)"></use><use href="#full" transform="translate(385,6032)"></use><use href="#full" transform="translate(385,6062)"></use><use href="#none" transform="translate(385,6092)"></use><use href="#none" transform="translate(385,6122)"></use><use href="#full" transform="translate(385,6152)"></use><use href="#none" transform="translate(385,6182)"></use><use href="#none" transform="translate(385,6212)"></use><use href="#none" transform="translate(385,6242)"></use><use href="#none" transform="translate(385,6272)"></use><use href="#none" transform="translate(385,6302)"></use><use href="#none" transform="translate(385,6332)"></use><use href="#none" transform="translate(385,6362)"></use><use href="#none" transform="translate(385,6392)"></use><use href="#none" transform="translate(385,6422)"></use><use href="#none" transform="translate(385,6452)"></use><use href="#none" transform="translate(385,6482)"></use><use href="#none" transform="translate(385,6512)"></use><use href="#full" transform="translate(385,6542)"></use><use href="#none" transform="translate(385,6572)"></use><use href="#none" transform="translate(385,6602)"></use><use href="#none" transform="translate(385,6632)"></use><use href="#full" transform="translate(385,6662)"></use><use href="#full" transform="translate(385,6692)"></use><use href="#none" transform="translate(385,6722)"></use><use href="#none" transform="translate(385,6752)"></use><use href="#full" transform="translate(385,6782)"></use><use href="#full" transform="translate(385,6812)"></use><use href="#full" transform="translate(385,6842)"></use><use href="#none" transform="translate(385,6872)"></use><use href="#none" transform="translate(385,6902)"></use><use href="#none" transform="translate(385,6932)"></use><use href="#none" transform="translate(385,6962)"></use><use href="#none" transform="translate(385,6992)"></use><use href="#full" transform="translate(385,7022)"></use><use href="#none" transform="translate(385,7052)"></use><use href="#none" transform="translate(385,7082)"></use><use href="#none" transform="translate(385,7112)"></use><use href="#none" transform="translate(385,7142)"></use><use href="#none" transform="translate(385,7172)"></use><use href="#none" transform="translate(385,7202)"></use><use href="#full" transform="translate(385,7232)"></use><use href="#none" transform="translate(385,7262)"></use><use href="#none" transform="translate(385,7292)"></use><use href="#none" transform="translate(385,7322)"></use><use href="#full" transform="translate(385,7352)"></use><use href="#none" transform="translate(385,7382)"></use><use href="#none" transform="translate(385,7412)"></use><use href="#none" transform="translate(385,7442)"></use><use href="#none" transform="translate(385,7472)"></use><use href="#none" transform="translate(385,7502)"></use><use href="#none" transform="translate(385,7532)"></use><use href="#none" transform="translate(385,7562)"></use><use href="#none" transform="translate(385,7592)"></use><use href="#none" transform="translate(385,7622)"></use><use href="#full" transform="translate(385,7652)"></use><use href="#none" transform="translate(385,7682)"></use><use href="#full" transform="translate(385,7712)"></use><use href="#none" transform="translate(385,7742)"></use><use href="#none" transform="translate(385,7772)"></use><use href="#none" transform="translate(385,7802)"></use><use href="#full" transform="translate(385,7832)"></use><use href="#full" transform="translate(385,7862)"></use><use href="#none" transform="translate(385,7892)"></use><use href="#none" transform="translate(385,7922)"></use><use href="#none" transform="translate(385,7952)"></use><use href="#none" transform="translate(385,7982)"></use><use href="#partially" transform="translate(385,8012)"></use><text x="401" y="8031"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(385,8042)"></use><use href="#full" transform="translate(385,8072)"></use><use href="#full" transform="translate(385,8102)"></use><use href="#none" transform="translate(385,8132)"></use><use href="#full" transform="translate(385,8162)"></use><use href="#full" transform="translate(385,8192)"></use><use href="#full" transform="translate(385,8222)"></use><use href="#full" transform="translate(385,8252)"></use><use href="#none" transform="translate(385,8282)"></use><use href="#none" transform="translate(385,8312)"></use><use href="#full" transform="translate(385,8342)"></use><use href="#none" transform="translate(385,8372)"></use><use href="#full" transform="translate(385,8402)"></use><use href="#none" transform="translate(385,8432)"></use><use href="#full" transform="translate(385,8462)"></use><use href="#full" transform="translate(385,8492)"></use><use href="#full" transform="translate(385,8522)"></use><use href="#full" transform="translate(385,8552)"></use><use href="#none" transform="translate(385,8582)"></use><use href="#full" transform="translate(385,8612)"></use><use href="#full" transform="translate(385,8642)"></use><use href="#full" transform="translate(385,8672)"></use><use href="#full" transform="translate(385,8702)"></use><use href="#full" transform="translate(385,8732)"></use><use href="#full" transform="translate(385,8762)"></use><use href="#full" transform="translate(385,8792)"></use><use href="#full" transform="translate(385,8822)"></use><use href="#full" transform="translate(385,8852)"></use><use href="#none" transform="translate(385,8882)"></use><use href="#full" transform="translate(385,8912)"></use><use href="#full" transform="translate(385,8942)"></use><use href="#full" transform="translate(385,8972)"></use><use href="#none" transform="translate(385,9002)"></use><use href="#none" transform="translate(385,9032)"></use><use href="#none" transform="translate(385,9062)"></use><use href="#none" transform="translate(385,9092)"></use><use href="#full" transform="translate(385,9122)"></use><use href="#full" transform="translate(385,9152)"></use><use href="#full" transform="translate(385,9182)"></use><use href="#none" transform="translate(385,9212)"></use><use href="#full" transform="translate(385,9242)"></use><use href="#none" transform="translate(385,9272)"></use><use href="#full" transform="translate(385,9302)"></use><use href="#full" transform="translate(385,9332)"></use><use href="#full" transform="translate(385,9362)"></use><use href="#full" transform="translate(385,9392)"></use><use href="#none" transform="translate(385,9422)"></use><use href="#full" transform="translate(385,9452)"></use><use href="#full" transform="translate(385,9482)"></use><use href="#full" transform="translate(385,9512)"></use><use href="#full" transform="translate(385,9542)"></use><use href="#full" transform="translate(385,9572)"></use><use href="#full" transform="translate(385,9602)"></use><use href="#full" transform="translate(385,9632)"></use><use href="#none" transform="translate(385,9662)"></use><use href="#none" transform="translate(385,9692)"></use><use href="#none" transform="translate(385,9722)"></use><use href="#none" transform="translate(385,9752)"></use><use href="#none" transform="translate(385,9782)"></use><use href="#none" transform="translate(385,9812)"></use><use href="#none" transform="translate(385,9842)"></use><use href="#none" transform="translate(385,9872)"></use><use href="#none" transform="translate(385,9902)"></use><use href="#full" transform="translate(385,9932)"></use><use href="#none" transform="translate(385,9962)"></use><use href="#full" transform="translate(385,9992)"></use><use href="#full" transform="translate(385,10022)"></use><use href="#full" transform="translate(385,10052)"></use><use href="#none" transform="translate(385,10082)"></use><use href="#full" transform="translate(385,10112)"></use><use href="#full" transform="translate(385,10142)"></use><use href="#full" transform="translate(385,10172)"></use><use href="#full" transform="translate(385,10202)"></use><use href="#none" transform="translate(385,10232)"></use><use href="#full" transform="translate(385,10262)"></use><use href="#full" transform="translate(385,10292)"></use><use href="#full" transform="translate(385,10322)"></use><use href="#full" transform="translate(385,10352)"></use><use href="#full" transform="translate(385,10382)"></use><use href="#full" transform="translate(385,10412)"></use><use href="#none" transform="translate(385,10442)"></use><use href="#full" transform="translate(385,10472)"></use><use href="#full" transform="translate(385,10502)"></use><use href="#none" transform="translate(385,10532)"></use><use href="#full" transform="translate(385,10562)"></use><use href="#full" transform="translate(385,10592)"></use><use href="#full" transform="translate(385,10622)"></use><use href="#full" transform="translate(385,10652)"></use><use href="#none" transform="translate(385,10682)"></use><use href="#full" transform="translate(385,10712)"></use><use href="#none" transform="translate(385,10742)"></use><use href="#full" transform="translate(385,10772)"></use><use href="#full" transform="translate(385,10802)"></use><use href="#none" transform="translate(385,10832)"></use><use href="#none" transform="translate(385,10862)"></use><use href="#full" transform="translate(385,10892)"></use><use href="#none" transform="translate(385,10922)"></use><use href="#none" transform="translate(385,10952)"></use><use href="#full" transform="translate(385,10982)"></use><use href="#none" transform="translate(385,11012)"></use><use href="#none" transform="translate(385,11042)"></use><use href="#full" transform="translate(385,11072)"></use><use href="#none" transform="translate(385,11102)"></use><use href="#none" transform="translate(385,11132)"></use><use href="#none" transform="translate(385,11162)"></use><use href="#full" transform="translate(385,11192)"></use><use href="#none" transform="translate(385,11222)"></use><use href="#none" transform="translate(385,11252)"></use><use href="#none" transform="translate(385,11282)"></use><use href="#none" transform="translate(385,11312)"></use><use href="#full" transform="translate(385,11342)"></use><use href="#none" transform="translate(385,11372)"></use><use href="#none" transform="translate(385,11402)"></use><use href="#full" transform="translate(385,11432)"></use><use href="#full" transform="translate(385,11462)"></use><use href="#full" transform="translate(385,11492)"></use><use href="#none" transform="translate(385,11522)"></use><use href="#none" transform="translate(385,11552)"></use><use href="#full" transform="translate(385,11582)"></use><use href="#full" transform="translate(385,11612)"></use><use href="#none" transform="translate(385,11642)"></use><use href="#none" transform="translate(385,11672)"></use><use href="#none" transform="translate(385,11702)"></use><use href="#full" transform="translate(385,11732)"></use><use href="#full" transform="translate(385,11762)"></use><use href="#none" transform="translate(385,11792)"></use><use href="#full" transform="translate(385,11822)"></use><use href="#full" transform="translate(385,11852)"></use><use href="#full" transform="translate(385,11882)"></use><use href="#full" transform="translate(385,11912)"></use><use href="#none" transform="translate(385,11942)"></use><use href="#none" transform="translate(385,11972)"></use><use href="#full" transform="translate(385,12002)"></use><use href="#full" transform="translate(385,12032)"></use><use href="#full" transform="translate(385,12062)"></use><use href="#none" transform="translate(385,12092)"></use><use href="#none" transform="translate(385,12122)"></use><use href="#full" transform="translate(385,12152)"></use><use href="#full" transform="translate(385,12182)"></use><use href="#full" transform="translate(385,12212)"></use><use href="#none" transform="translate(385,12242)"></use><use href="#none" transform="translate(385,12272)"></use><use href="#full" transform="translate(385,12302)"></use><use href="#full" transform="translate(385,12332)"></use><use href="#full" transform="translate(385,12362)"></use><use href="#none" transform="translate(385,12392)"></use><use href="#none" transform="translate(385,12422)"></use><use href="#full" transform="translate(385,12452)"></use><use href="#full" transform="translate(385,12482)"></use><use href="#none" transform="translate(385,12512)"></use><use href="#full" transform="translate(385,12542)"></use><use href="#full" transform="translate(385,12572)"></use><use href="#none" transform="translate(385,12602)"></use><use href="#full" transform="translate(385,12632)"></use><use href="#none" transform="translate(385,12662)"></use><use href="#full" transform="translate(385,12692)"></use><use href="#full" transform="translate(385,12722)"></use><use href="#none" transform="translate(385,12752)"></use><use href="#full" transform="translate(385,12782)"></use><use href="#partially" transform="translate(385,12812)"></use><text x="401" y="12831"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(385,12842)"></use><use href="#none" transform="translate(385,12872)"></use><use href="#none" transform="translate(385,12902)"></use><use href="#none" transform="translate(385,12932)"></use><use href="#full" transform="translate(385,12962)"></use><use href="#full" transform="translate(385,12992)"></use><use href="#none" transform="translate(385,13022)"></use><use href="#full" transform="translate(385,13052)"></use><use href="#none" transform="translate(385,13082)"></use><use href="#none" transform="translate(385,13112)"></use><use href="#none" transform="translate(385,13142)"></use><use href="#partially" transform="translate(385,13172)"></use><text x="401" y="13191"><title>Not as expression</title>a</text><use href="#full" transform="translate(385,13202)"></use><use href="#none" transform="translate(385,13232)"></use><use href="#partially" transform="translate(385,13262)"></use><text x="401" y="13281"><title>Not as expression</title>a</text><use href="#none" transform="translate(385,13292)"></use><use href="#none" transform="translate(385,13322)"></use><use href="#full" transform="translate(385,13352)"></use><use href="#none" transform="translate(385,13382)"></use><use href="#full" transform="translate(385,13412)"></use><use href="#full" transform="translate(385,13442)"></use><use href="#full" transform="translate(385,13472)"></use><use href="#full" transform="translate(385,13502)"></use><use href="#full" transform="translate(385,13532)"></use><use href="#full" transform="translate(385,13562)"></use><use href="#none" transform="translate(385,13592)"></use><use href="#none" transform="translate(385,13622)"></use><use href="#full" transform="translate(385,13652)"></use><use href="#full" transform="translate(385,13682)"></use><use href="#full" transform="translate(385,13712)"></use><use href="#full" transform="translate(385,13742)"></use><use href="#full" transform="translate(385,13772)"></use><use href="#full" transform="translate(385,13802)"></use><use href="#none" transform="translate(385,13832)"></use><use href="#full" transform="translate(385,13862)"></use><use href="#none" transform="translate(385,13892)"></use><use href="#full" transform="translate(385,13922)"></use><use href="#full" transform="translate(385,13952)"></use><use href="#none" transform="translate(385,13982)"></use><use href="#full" transform="translate(385,14012)"></use><use href="#none" transform="translate(385,14042)"></use><use href="#full" transform="translate(385,14072)"></use><use href="#full" transform="translate(385,14102)"></use><use href="#none" transform="translate(385,14132)"></use><use href="#none" transform="translate(385,14162)"></use><use href="#none" transform="translate(385,14192)"></use><use href="#none" transform="translate(385,14222)"></use><use href="#full" transform="translate(385,14252)"></use><use href="#none" transform="translate(385,14282)"></use><use href="#full" transform="translate(385,14312)"></use><use href="#full" transform="translate(385,14342)"></use><use href="#full" transform="translate(385,14372)"></use><use href="#full" transform="translate(385,14402)"></use><use href="#full" transform="translate(385,14432)"></use><use href="#none" transform="translate(385,14462)"></use><use href="#full" transform="translate(385,14492)"></use><use href="#none" transform="translate(385,14522)"></use><use href="#full" transform="translate(385,14552)"></use><use href="#full" transform="translate(385,14582)"></use><use href="#full" transform="translate(385,14612)"></use><use href="#full" transform="translate(385,14642)"></use><use href="#full" transform="translate(385,14672)"></use><use href="#full" transform="translate(385,14702)"></use><use href="#none" transform="translate(385,14732)"></use><use href="#none" transform="translate(385,14762)"></use><use href="#none" transform="translate(385,14792)"></use><use href="#full" transform="translate(385,14822)"></use><use href="#none" transform="translate(385,14852)"></use><use href="#full" transform="translate(385,14882)"></use><use href="#full" transform="translate(385,14912)"></use><use href="#none" transform="translate(385,14942)"></use><use href="#none" transform="translate(385,14972)"></use><use href="#full" transform="translate(385,15002)"></use><use href="#full" transform="translate(385,15032)"></use><use href="#none" transform="translate(385,15062)"></use><use href="#none" transform="translate(385,15092)"></use><use href="#full" transform="translate(385,15122)"></use><use href="#none" transform="translate(385,15152)"></use><use href="#none" transform="translate(385,15182)"></use><use href="#none" transform="translate(385,15212)"></use><use href="#none" transform="translate(385,15242)"></use><use href="#full" transform="translate(385,15272)"></use><use href="#full" transform="translate(385,15302)"></use><use href="#none" transform="translate(385,15332)"></use><use href="#none" transform="translate(385,15362)"></use><use href="#none" transform="translate(385,15392)"></use><use href="#full" transform="translate(385,15422)"></use><use href="#none" transform="translate(385,15452)"></use><use href="#full" transform="translate(385,15482)"></use><use href="#none" transform="translate(385,15512)"></use><use href="#full" transform="translate(385,15542)"></use><use href="#full" transform="translate(385,15572)"></use><use href="#full" transform="translate(385,15602)"></use><use href="#full" transform="translate(385,15632)"></use><use href="#none" transform="translate(385,15662)"></use><use href="#full" transform="translate(385,15692)"></use><use href="#none" transform="translate(385,15722)"></use><use href="#full" transform="translate(385,15752)"></use><use href="#none" transform="translate(385,15782)"></use><use href="#none" transform="translate(385,15812)"></use><use href="#none" transform="translate(385,15842)"></use><use href="#none" transform="translate(385,15872)"></use><use href="#full" transform="translate(385,15902)"></use><use href="#none" transform="translate(385,15932)"></use><use href="#full" transform="translate(385,15962)"></use><use href="#full" transform="translate(385,15992)"></use><use href="#none" transform="translate(385,16022)"></use><use href="#full" transform="translate(385,16052)"></use><use href="#full" transform="translate(385,16082)"></use><use href="#full" transform="translate(385,16112)"></use><use href="#full" transform="translate(385,16142)"></use><use href="#full" transform="translate(385,16172)"></use><use href="#full" transform="translate(385,16202)"></use><use href="#full" transform="translate(385,16232)"></use><use href="#full" transform="translate(385,16262)"></use><use href="#full" transform="translate(385,16292)"></use><use href="#none" transform="translate(385,16322)"></use><use href="#full" transform="translate(385,16352)"></use><use href="#full" transform="translate(385,16382)"></use><use href="#none" transform="translate(385,16412)"></use><use href="#none" transform="translate(385,16442)"></use></g><g><title>Oracle DB</title><path d="M495,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(436.5, 83) rotate(-45)">Oracle DB</text><use href="#none" transform="translate(420,92)"></use><use href="#full" transform="translate(420,122)"></use><use href="#none" transform="translate(420,152)"></use><use href="#none" transform="translate(420,182)"></use><use href="#full" transform="translate(420,212)"></use><use href="#none" transform="translate(420,242)"></use><use href="#full" transform="translate(420,272)"></use><use href="#full" transform="translate(420,302)"></use><use href="#none" transform="translate(420,332)"></use><use href="#none" transform="translate(420,362)"></use><use href="#full" transform="translate(420,392)"></use><use href="#full" transform="translate(420,422)"></use><use href="#none" transform="translate(420,452)"></use><use href="#none" transform="translate(420,482)"></use><use href="#full" transform="translate(420,512)"></use><use href="#full" transform="translate(420,542)"></use><use href="#full" transform="translate(420,572)"></use><use href="#full" transform="translate(420,602)"></use><use href="#none" transform="translate(420,632)"></use><use href="#full" transform="translate(420,662)"></use><use href="#full" transform="translate(420,692)"></use><use href="#full" transform="translate(420,722)"></use><use href="#full" transform="translate(420,752)"></use><use href="#full" transform="translate(420,782)"></use><use href="#full" transform="translate(420,812)"></use><use href="#none" transform="translate(420,842)"></use><use href="#full" transform="translate(420,872)"></use><use href="#full" transform="translate(420,902)"></use><use href="#full" transform="translate(420,932)"></use><use href="#full" transform="translate(420,962)"></use><use href="#full" transform="translate(420,992)"></use><use href="#full" transform="translate(420,1022)"></use><use href="#full" transform="translate(420,1052)"></use><use href="#full" transform="translate(420,1082)"></use><use href="#full" transform="translate(420,1112)"></use><use href="#none" transform="translate(420,1142)"></use><use href="#full" transform="translate(420,1172)"></use><use href="#full" transform="translate(420,1202)"></use><use href="#full" transform="translate(420,1232)"></use><use href="#full" transform="translate(420,1262)"></use><use href="#full" transform="translate(420,1292)"></use><use href="#full" transform="translate(420,1322)"></use><use href="#none" transform="translate(420,1352)"></use><use href="#full" transform="translate(420,1382)"></use><use href="#full" transform="translate(420,1412)"></use><use href="#none" transform="translate(420,1442)"></use><use href="#full" transform="translate(420,1472)"></use><use href="#full" transform="translate(420,1502)"></use><use href="#none" transform="translate(420,1532)"></use><use href="#full" transform="translate(420,1562)"></use><use href="#full" transform="translate(420,1592)"></use><use href="#partially" transform="translate(420,1622)"></use><text x="436" y="1641"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(420,1652)"></use><use href="#none" transform="translate(420,1682)"></use><use href="#none" transform="translate(420,1712)"></use><use href="#full" transform="translate(420,1742)"></use><use href="#none" transform="translate(420,1772)"></use><use href="#full" transform="translate(420,1802)"></use><use href="#full" transform="translate(420,1832)"></use><use href="#full" transform="translate(420,1862)"></use><use href="#full" transform="translate(420,1892)"></use><use href="#none" transform="translate(420,1922)"></use><use href="#full" transform="translate(420,1952)"></use><use href="#full" transform="translate(420,1982)"></use><use href="#full" transform="translate(420,2012)"></use><use href="#full" transform="translate(420,2042)"></use><use href="#full" transform="translate(420,2072)"></use><use href="#full" transform="translate(420,2102)"></use><use href="#full" transform="translate(420,2132)"></use><use href="#full" transform="translate(420,2162)"></use><use href="#full" transform="translate(420,2192)"></use><use href="#none" transform="translate(420,2222)"></use><use href="#full" transform="translate(420,2252)"></use><use href="#full" transform="translate(420,2282)"></use><use href="#full" transform="translate(420,2312)"></use><use href="#none" transform="translate(420,2342)"></use><use href="#full" transform="translate(420,2372)"></use><use href="#full" transform="translate(420,2402)"></use><use href="#full" transform="translate(420,2432)"></use><use href="#full" transform="translate(420,2462)"></use><use href="#full" transform="translate(420,2492)"></use><use href="#full" transform="translate(420,2522)"></use><use href="#full" transform="translate(420,2552)"></use><use href="#full" transform="translate(420,2582)"></use><use href="#full" transform="translate(420,2612)"></use><use href="#full" transform="translate(420,2642)"></use><use href="#full" transform="translate(420,2672)"></use><use href="#none" transform="translate(420,2702)"></use><use href="#full" transform="translate(420,2732)"></use><use href="#full" transform="translate(420,2762)"></use><use href="#full" transform="translate(420,2792)"></use><use href="#full" transform="translate(420,2822)"></use><use href="#full" transform="translate(420,2852)"></use><use href="#full" transform="translate(420,2882)"></use><use href="#full" transform="translate(420,2912)"></use><use href="#full" transform="translate(420,2942)"></use><use href="#full" transform="translate(420,2972)"></use><use href="#none" transform="translate(420,3002)"></use><use href="#full" transform="translate(420,3032)"></use><use href="#none" transform="translate(420,3062)"></use><use href="#full" transform="translate(420,3092)"></use><use href="#full" transform="translate(420,3122)"></use><use href="#full" transform="translate(420,3152)"></use><use href="#full" transform="translate(420,3182)"></use><use href="#full" transform="translate(420,3212)"></use><use href="#none" transform="translate(420,3242)"></use><use href="#full" transform="translate(420,3272)"></use><use href="#full" transform="translate(420,3302)"></use><use href="#none" transform="translate(420,3332)"></use><use href="#full" transform="translate(420,3362)"></use><use href="#full" transform="translate(420,3392)"></use><use href="#full" transform="translate(420,3422)"></use><use href="#full" transform="translate(420,3452)"></use><use href="#none" transform="translate(420,3482)"></use><use href="#full" transform="translate(420,3512)"></use><use href="#full" transform="translate(420,3542)"></use><use href="#full" transform="translate(420,3572)"></use><use href="#full" transform="translate(420,3602)"></use><use href="#full" transform="translate(420,3632)"></use><use href="#none" transform="translate(420,3662)"></use><use href="#full" transform="translate(420,3692)"></use><use href="#full" transform="translate(420,3722)"></use><use href="#none" transform="translate(420,3752)"></use><use href="#full" transform="translate(420,3782)"></use><use href="#full" transform="translate(420,3812)"></use><use href="#full" transform="translate(420,3842)"></use><use href="#full" transform="translate(420,3872)"></use><use href="#none" transform="translate(420,3902)"></use><use href="#full" transform="translate(420,3932)"></use><use href="#full" transform="translate(420,3962)"></use><use href="#full" transform="translate(420,3992)"></use><use href="#full" transform="translate(420,4022)"></use><use href="#none" transform="translate(420,4052)"></use><use href="#full" transform="translate(420,4082)"></use><use href="#full" transform="translate(420,4112)"></use><use href="#none" transform="translate(420,4142)"></use><use href="#full" transform="translate(420,4172)"></use><use href="#full" transform="translate(420,4202)"></use><use href="#none" transform="translate(420,4232)"></use><use href="#full" transform="translate(420,4262)"></use><use href="#full" transform="translate(420,4292)"></use><use href="#full" transform="translate(420,4322)"></use><use href="#full" transform="translate(420,4352)"></use><use href="#full" transform="translate(420,4382)"></use><use href="#full" transform="translate(420,4412)"></use><use href="#none" transform="translate(420,4442)"></use><use href="#full" transform="translate(420,4472)"></use><use href="#full" transform="translate(420,4502)"></use><use href="#full" transform="translate(420,4532)"></use><use href="#full" transform="translate(420,4562)"></use><use href="#none" transform="translate(420,4592)"></use><use href="#full" transform="translate(420,4622)"></use><use href="#full" transform="translate(420,4652)"></use><use href="#full" transform="translate(420,4682)"></use><use href="#none" transform="translate(420,4712)"></use><use href="#full" transform="translate(420,4742)"></use><use href="#full" transform="translate(420,4772)"></use><use href="#full" transform="translate(420,4802)"></use><use href="#full" transform="translate(420,4832)"></use><use href="#full" transform="translate(420,4862)"></use><use href="#full" transform="translate(420,4892)"></use><use href="#none" transform="translate(420,4922)"></use><use href="#full" transform="translate(420,4952)"></use><use href="#full" transform="translate(420,4982)"></use><use href="#full" transform="translate(420,5012)"></use><use href="#full" transform="translate(420,5042)"></use><use href="#full" transform="translate(420,5072)"></use><use href="#full" transform="translate(420,5102)"></use><use href="#full" transform="translate(420,5132)"></use><use href="#full" transform="translate(420,5162)"></use><use href="#full" transform="translate(420,5192)"></use><use href="#none" transform="translate(420,5222)"></use><use href="#none" transform="translate(420,5252)"></use><use href="#full" transform="translate(420,5282)"></use><use href="#full" transform="translate(420,5312)"></use><use href="#full" transform="translate(420,5342)"></use><use href="#none" transform="translate(420,5372)"></use><use href="#full" transform="translate(420,5402)"></use><use href="#full" transform="translate(420,5432)"></use><use href="#full" transform="translate(420,5462)"></use><use href="#full" transform="translate(420,5492)"></use><use href="#full" transform="translate(420,5522)"></use><use href="#full" transform="translate(420,5552)"></use><use href="#full" transform="translate(420,5582)"></use><use href="#none" transform="translate(420,5612)"></use><use href="#full" transform="translate(420,5642)"></use><use href="#full" transform="translate(420,5672)"></use><use href="#full" transform="translate(420,5702)"></use><use href="#full" transform="translate(420,5732)"></use><use href="#full" transform="translate(420,5762)"></use><use href="#full" transform="translate(420,5792)"></use><use href="#none" transform="translate(420,5822)"></use><use href="#none" transform="translate(420,5852)"></use><use href="#none" transform="translate(420,5882)"></use><use href="#none" transform="translate(420,5912)"></use><use href="#full" transform="translate(420,5942)"></use><use href="#full" transform="translate(420,5972)"></use><use href="#full" transform="translate(420,6002)"></use><use href="#none" transform="translate(420,6032)"></use><use href="#full" transform="translate(420,6062)"></use><use href="#full" transform="translate(420,6092)"></use><use href="#full" transform="translate(420,6122)"></use><use href="#full" transform="translate(420,6152)"></use><use href="#full" transform="translate(420,6182)"></use><use href="#none" transform="translate(420,6212)"></use><use href="#full" transform="translate(420,6242)"></use><use href="#full" transform="translate(420,6272)"></use><use href="#full" transform="translate(420,6302)"></use><use href="#full" transform="translate(420,6332)"></use><use href="#full" transform="translate(420,6362)"></use><use href="#full" transform="translate(420,6392)"></use><use href="#none" transform="translate(420,6422)"></use><use href="#none" transform="translate(420,6452)"></use><use href="#full" transform="translate(420,6482)"></use><use href="#none" transform="translate(420,6512)"></use><use href="#full" transform="translate(420,6542)"></use><use href="#full" transform="translate(420,6572)"></use><use href="#full" transform="translate(420,6602)"></use><use href="#none" transform="translate(420,6632)"></use><use href="#full" transform="translate(420,6662)"></use><use href="#full" transform="translate(420,6692)"></use><use href="#full" transform="translate(420,6722)"></use><use href="#full" transform="translate(420,6752)"></use><use href="#full" transform="translate(420,6782)"></use><use href="#partially" transform="translate(420,6812)"></use><text x="436" y="6831"><title>Not as expression</title>a</text><use href="#full" transform="translate(420,6842)"></use><use href="#partially" transform="translate(420,6872)"></use><text x="436" y="6891"><title>Not as expression</title>a</text><use href="#full" transform="translate(420,6902)"></use><use href="#full" transform="translate(420,6932)"></use><use href="#full" transform="translate(420,6962)"></use><use href="#full" transform="translate(420,6992)"></use><use href="#full" transform="translate(420,7022)"></use><use href="#full" transform="translate(420,7052)"></use><use href="#partially" transform="translate(420,7082)"></use><text x="436" y="7101"><title>Not in the FROM clause or DROP TABLE (yet in CREATE TABLE!)</title>e</text><use href="#full" transform="translate(420,7112)"></use><use href="#full" transform="translate(420,7142)"></use><use href="#full" transform="translate(420,7172)"></use><use href="#full" transform="translate(420,7202)"></use><use href="#none" transform="translate(420,7232)"></use><use href="#none" transform="translate(420,7262)"></use><use href="#full" transform="translate(420,7292)"></use><use href="#full" transform="translate(420,7322)"></use><use href="#full" transform="translate(420,7352)"></use><use href="#full" transform="translate(420,7382)"></use><use href="#full" transform="translate(420,7412)"></use><use href="#full" transform="translate(420,7442)"></use><use href="#full" transform="translate(420,7472)"></use><use href="#none" transform="translate(420,7502)"></use><use href="#none" transform="translate(420,7532)"></use><use href="#full" transform="translate(420,7562)"></use><use href="#full" transform="translate(420,7592)"></use><use href="#full" transform="translate(420,7622)"></use><use href="#full" transform="translate(420,7652)"></use><use href="#full" transform="translate(420,7682)"></use><use href="#full" transform="translate(420,7712)"></use><use href="#full" transform="translate(420,7742)"></use><use href="#full" transform="translate(420,7772)"></use><use href="#full" transform="translate(420,7802)"></use><use href="#full" transform="translate(420,7832)"></use><use href="#none" transform="translate(420,7862)"></use><use href="#full" transform="translate(420,7892)"></use><use href="#full" transform="translate(420,7922)"></use><use href="#full" transform="translate(420,7952)"></use><use href="#full" transform="translate(420,7982)"></use><use href="#full" transform="translate(420,8012)"></use><use href="#full" transform="translate(420,8042)"></use><use href="#full" transform="translate(420,8072)"></use><use href="#full" transform="translate(420,8102)"></use><use href="#full" transform="translate(420,8132)"></use><use href="#full" transform="translate(420,8162)"></use><use href="#none" transform="translate(420,8192)"></use><use href="#full" transform="translate(420,8222)"></use><use href="#full" transform="translate(420,8252)"></use><use href="#full" transform="translate(420,8282)"></use><use href="#full" transform="translate(420,8312)"></use><use href="#none" transform="translate(420,8342)"></use><use href="#full" transform="translate(420,8372)"></use><use href="#none" transform="translate(420,8402)"></use><use href="#full" transform="translate(420,8432)"></use><use href="#none" transform="translate(420,8462)"></use><use href="#full" transform="translate(420,8492)"></use><use href="#full" transform="translate(420,8522)"></use><use href="#full" transform="translate(420,8552)"></use><use href="#full" transform="translate(420,8582)"></use><use href="#full" transform="translate(420,8612)"></use><use href="#full" transform="translate(420,8642)"></use><use href="#full" transform="translate(420,8672)"></use><use href="#full" transform="translate(420,8702)"></use><use href="#none" transform="translate(420,8732)"></use><use href="#full" transform="translate(420,8762)"></use><use href="#none" transform="translate(420,8792)"></use><use href="#full" transform="translate(420,8822)"></use><use href="#full" transform="translate(420,8852)"></use><use href="#none" transform="translate(420,8882)"></use><use href="#full" transform="translate(420,8912)"></use><use href="#full" transform="translate(420,8942)"></use><use href="#none" transform="translate(420,8972)"></use><use href="#full" transform="translate(420,9002)"></use><use href="#full" transform="translate(420,9032)"></use><use href="#full" transform="translate(420,9062)"></use><use href="#none" transform="translate(420,9092)"></use><use href="#full" transform="translate(420,9122)"></use><use href="#full" transform="translate(420,9152)"></use><use href="#none" transform="translate(420,9182)"></use><use href="#full" transform="translate(420,9212)"></use><use href="#full" transform="translate(420,9242)"></use><use href="#none" transform="translate(420,9272)"></use><use href="#full" transform="translate(420,9302)"></use><use href="#none" transform="translate(420,9332)"></use><use href="#full" transform="translate(420,9362)"></use><use href="#full" transform="translate(420,9392)"></use><use href="#none" transform="translate(420,9422)"></use><use href="#none" transform="translate(420,9452)"></use><use href="#full" transform="translate(420,9482)"></use><use href="#full" transform="translate(420,9512)"></use><use href="#full" transform="translate(420,9542)"></use><use href="#full" transform="translate(420,9572)"></use><use href="#full" transform="translate(420,9602)"></use><use href="#full" transform="translate(420,9632)"></use><use href="#full" transform="translate(420,9662)"></use><use href="#full" transform="translate(420,9692)"></use><use href="#none" transform="translate(420,9722)"></use><use href="#full" transform="translate(420,9752)"></use><use href="#none" transform="translate(420,9782)"></use><use href="#none" transform="translate(420,9812)"></use><use href="#full" transform="translate(420,9842)"></use><use href="#full" transform="translate(420,9872)"></use><use href="#full" transform="translate(420,9902)"></use><use href="#full" transform="translate(420,9932)"></use><use href="#full" transform="translate(420,9962)"></use><use href="#full" transform="translate(420,9992)"></use><use href="#full" transform="translate(420,10022)"></use><use href="#full" transform="translate(420,10052)"></use><use href="#full" transform="translate(420,10082)"></use><use href="#none" transform="translate(420,10112)"></use><use href="#full" transform="translate(420,10142)"></use><use href="#full" transform="translate(420,10172)"></use><use href="#full" transform="translate(420,10202)"></use><use href="#full" transform="translate(420,10232)"></use><use href="#full" transform="translate(420,10262)"></use><use href="#full" transform="translate(420,10292)"></use><use href="#full" transform="translate(420,10322)"></use><use href="#full" transform="translate(420,10352)"></use><use href="#full" transform="translate(420,10382)"></use><use href="#full" transform="translate(420,10412)"></use><use href="#full" transform="translate(420,10442)"></use><use href="#full" transform="translate(420,10472)"></use><use href="#full" transform="translate(420,10502)"></use><use href="#full" transform="translate(420,10532)"></use><use href="#full" transform="translate(420,10562)"></use><use href="#none" transform="translate(420,10592)"></use><use href="#full" transform="translate(420,10622)"></use><use href="#full" transform="translate(420,10652)"></use><use href="#full" transform="translate(420,10682)"></use><use href="#none" transform="translate(420,10712)"></use><use href="#full" transform="translate(420,10742)"></use><use href="#full" transform="translate(420,10772)"></use><use href="#full" transform="translate(420,10802)"></use><use href="#full" transform="translate(420,10832)"></use><use href="#full" transform="translate(420,10862)"></use><use href="#none" transform="translate(420,10892)"></use><use href="#full" transform="translate(420,10922)"></use><use href="#full" transform="translate(420,10952)"></use><use href="#full" transform="translate(420,10982)"></use><use href="#full" transform="translate(420,11012)"></use><use href="#full" transform="translate(420,11042)"></use><use href="#full" transform="translate(420,11072)"></use><use href="#full" transform="translate(420,11102)"></use><use href="#full" transform="translate(420,11132)"></use><use href="#full" transform="translate(420,11162)"></use><use href="#full" transform="translate(420,11192)"></use><use href="#full" transform="translate(420,11222)"></use><use href="#none" transform="translate(420,11252)"></use><use href="#full" transform="translate(420,11282)"></use><use href="#full" transform="translate(420,11312)"></use><use href="#full" transform="translate(420,11342)"></use><use href="#full" transform="translate(420,11372)"></use><use href="#full" transform="translate(420,11402)"></use><use href="#none" transform="translate(420,11432)"></use><use href="#full" transform="translate(420,11462)"></use><use href="#full" transform="translate(420,11492)"></use><use href="#full" transform="translate(420,11522)"></use><use href="#full" transform="translate(420,11552)"></use><use href="#full" transform="translate(420,11582)"></use><use href="#full" transform="translate(420,11612)"></use><use href="#none" transform="translate(420,11642)"></use><use href="#full" transform="translate(420,11672)"></use><use href="#full" transform="translate(420,11702)"></use><use href="#full" transform="translate(420,11732)"></use><use href="#full" transform="translate(420,11762)"></use><use href="#none" transform="translate(420,11792)"></use><use href="#full" transform="translate(420,11822)"></use><use href="#full" transform="translate(420,11852)"></use><use href="#none" transform="translate(420,11882)"></use><use href="#none" transform="translate(420,11912)"></use><use href="#none" transform="translate(420,11942)"></use><use href="#full" transform="translate(420,11972)"></use><use href="#full" transform="translate(420,12002)"></use><use href="#full" transform="translate(420,12032)"></use><use href="#full" transform="translate(420,12062)"></use><use href="#full" transform="translate(420,12092)"></use><use href="#full" transform="translate(420,12122)"></use><use href="#full" transform="translate(420,12152)"></use><use href="#full" transform="translate(420,12182)"></use><use href="#full" transform="translate(420,12212)"></use><use href="#full" transform="translate(420,12242)"></use><use href="#none" transform="translate(420,12272)"></use><use href="#full" transform="translate(420,12302)"></use><use href="#full" transform="translate(420,12332)"></use><use href="#full" transform="translate(420,12362)"></use><use href="#full" transform="translate(420,12392)"></use><use href="#full" transform="translate(420,12422)"></use><use href="#none" transform="translate(420,12452)"></use><use href="#full" transform="translate(420,12482)"></use><use href="#none" transform="translate(420,12512)"></use><use href="#full" transform="translate(420,12542)"></use><use href="#none" transform="translate(420,12572)"></use><use href="#full" transform="translate(420,12602)"></use><use href="#full" transform="translate(420,12632)"></use><use href="#full" transform="translate(420,12662)"></use><use href="#full" transform="translate(420,12692)"></use><use href="#none" transform="translate(420,12722)"></use><use href="#none" transform="translate(420,12752)"></use><use href="#full" transform="translate(420,12782)"></use><use href="#full" transform="translate(420,12812)"></use><use href="#full" transform="translate(420,12842)"></use><use href="#full" transform="translate(420,12872)"></use><use href="#full" transform="translate(420,12902)"></use><use href="#full" transform="translate(420,12932)"></use><use href="#full" transform="translate(420,12962)"></use><use href="#full" transform="translate(420,12992)"></use><use href="#full" transform="translate(420,13022)"></use><use href="#full" transform="translate(420,13052)"></use><use href="#full" transform="translate(420,13082)"></use><use href="#full" transform="translate(420,13112)"></use><use href="#full" transform="translate(420,13142)"></use><use href="#full" transform="translate(420,13172)"></use><use href="#full" transform="translate(420,13202)"></use><use href="#full" transform="translate(420,13232)"></use><use href="#full" transform="translate(420,13262)"></use><use href="#full" transform="translate(420,13292)"></use><use href="#full" transform="translate(420,13322)"></use><use href="#none" transform="translate(420,13352)"></use><use href="#full" transform="translate(420,13382)"></use><use href="#full" transform="translate(420,13412)"></use><use href="#full" transform="translate(420,13442)"></use><use href="#full" transform="translate(420,13472)"></use><use href="#full" transform="translate(420,13502)"></use><use href="#full" transform="translate(420,13532)"></use><use href="#full" transform="translate(420,13562)"></use><use href="#full" transform="translate(420,13592)"></use><use href="#full" transform="translate(420,13622)"></use><use href="#full" transform="translate(420,13652)"></use><use href="#none" transform="translate(420,13682)"></use><use href="#full" transform="translate(420,13712)"></use><use href="#full" transform="translate(420,13742)"></use><use href="#none" transform="translate(420,13772)"></use><use href="#none" transform="translate(420,13802)"></use><use href="#full" transform="translate(420,13832)"></use><use href="#full" transform="translate(420,13862)"></use><use href="#none" transform="translate(420,13892)"></use><use href="#full" transform="translate(420,13922)"></use><use href="#full" transform="translate(420,13952)"></use><use href="#full" transform="translate(420,13982)"></use><use href="#full" transform="translate(420,14012)"></use><use href="#none" transform="translate(420,14042)"></use><use href="#full" transform="translate(420,14072)"></use><use href="#full" transform="translate(420,14102)"></use><use href="#full" transform="translate(420,14132)"></use><use href="#full" transform="translate(420,14162)"></use><use href="#full" transform="translate(420,14192)"></use><use href="#none" transform="translate(420,14222)"></use><use href="#full" transform="translate(420,14252)"></use><use href="#full" transform="translate(420,14282)"></use><use href="#full" transform="translate(420,14312)"></use><use href="#full" transform="translate(420,14342)"></use><use href="#full" transform="translate(420,14372)"></use><use href="#full" transform="translate(420,14402)"></use><use href="#full" transform="translate(420,14432)"></use><use href="#none" transform="translate(420,14462)"></use><use href="#full" transform="translate(420,14492)"></use><use href="#full" transform="translate(420,14522)"></use><use href="#full" transform="translate(420,14552)"></use><use href="#full" transform="translate(420,14582)"></use><use href="#full" transform="translate(420,14612)"></use><use href="#full" transform="translate(420,14642)"></use><use href="#none" transform="translate(420,14672)"></use><use href="#full" transform="translate(420,14702)"></use><use href="#full" transform="translate(420,14732)"></use><use href="#none" transform="translate(420,14762)"></use><use href="#none" transform="translate(420,14792)"></use><use href="#full" transform="translate(420,14822)"></use><use href="#full" transform="translate(420,14852)"></use><use href="#full" transform="translate(420,14882)"></use><use href="#full" transform="translate(420,14912)"></use><use href="#full" transform="translate(420,14942)"></use><use href="#none" transform="translate(420,14972)"></use><use href="#full" transform="translate(420,15002)"></use><use href="#full" transform="translate(420,15032)"></use><use href="#full" transform="translate(420,15062)"></use><use href="#full" transform="translate(420,15092)"></use><use href="#none" transform="translate(420,15122)"></use><use href="#full" transform="translate(420,15152)"></use><use href="#full" transform="translate(420,15182)"></use><use href="#full" transform="translate(420,15212)"></use><use href="#full" transform="translate(420,15242)"></use><use href="#none" transform="translate(420,15272)"></use><use href="#full" transform="translate(420,15302)"></use><use href="#none" transform="translate(420,15332)"></use><use href="#full" transform="translate(420,15362)"></use><use href="#none" transform="translate(420,15392)"></use><use href="#none" transform="translate(420,15422)"></use><use href="#full" transform="translate(420,15452)"></use><use href="#full" transform="translate(420,15482)"></use><use href="#full" transform="translate(420,15512)"></use><use href="#full" transform="translate(420,15542)"></use><use href="#full" transform="translate(420,15572)"></use><use href="#full" transform="translate(420,15602)"></use><use href="#none" transform="translate(420,15632)"></use><use href="#full" transform="translate(420,15662)"></use><use href="#full" transform="translate(420,15692)"></use><use href="#full" transform="translate(420,15722)"></use><use href="#none" transform="translate(420,15752)"></use><use href="#none" transform="translate(420,15782)"></use><use href="#full" transform="translate(420,15812)"></use><use href="#full" transform="translate(420,15842)"></use><use href="#none" transform="translate(420,15872)"></use><use href="#full" transform="translate(420,15902)"></use><use href="#none" transform="translate(420,15932)"></use><use href="#full" transform="translate(420,15962)"></use><use href="#full" transform="translate(420,15992)"></use><use href="#full" transform="translate(420,16022)"></use><use href="#full" transform="translate(420,16052)"></use><use href="#full" transform="translate(420,16082)"></use><use href="#partially" transform="translate(420,16112)"></use><text x="436" y="16131"><title>Not as expression</title>a</text><use href="#partially" transform="translate(420,16142)"></use><text x="436" y="16161"><title>Not as expression</title>a</text><use href="#partially" transform="translate(420,16172)"></use><text x="436" y="16191"><title>Not as expression</title>a</text><use href="#full" transform="translate(420,16202)"></use><use href="#full" transform="translate(420,16232)"></use><use href="#partially" transform="translate(420,16262)"></use><text x="436" y="16281"><title>Not as expression</title>a</text><use href="#partially" transform="translate(420,16292)"></use><text x="436" y="16311"><title>Not as expression</title>a</text><use href="#full" transform="translate(420,16322)"></use><use href="#full" transform="translate(420,16352)"></use><use href="#full" transform="translate(420,16382)"></use><use href="#full" transform="translate(420,16412)"></use><use href="#full" transform="translate(420,16442)"></use></g><g><title>PostgreSQL</title><path d="M530,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(471.5, 83) rotate(-45)">PostgreSQL</text><use href="#full" transform="translate(455,92)"></use><use href="#full" transform="translate(455,122)"></use><use href="#full" transform="translate(455,152)"></use><use href="#none" transform="translate(455,182)"></use><use href="#full" transform="translate(455,212)"></use><use href="#full" transform="translate(455,242)"></use><use href="#none" transform="translate(455,272)"></use><use href="#none" transform="translate(455,302)"></use><use href="#none" transform="translate(455,332)"></use><use href="#none" transform="translate(455,362)"></use><use href="#full" transform="translate(455,392)"></use><use href="#none" transform="translate(455,422)"></use><use href="#none" transform="translate(455,452)"></use><use href="#none" transform="translate(455,482)"></use><use href="#full" transform="translate(455,512)"></use><use href="#full" transform="translate(455,542)"></use><use href="#none" transform="translate(455,572)"></use><use href="#full" transform="translate(455,602)"></use><use href="#full" transform="translate(455,632)"></use><use href="#none" transform="translate(455,662)"></use><use href="#full" transform="translate(455,692)"></use><use href="#full" transform="translate(455,722)"></use><use href="#full" transform="translate(455,752)"></use><use href="#full" transform="translate(455,782)"></use><use href="#full" transform="translate(455,812)"></use><use href="#full" transform="translate(455,842)"></use><use href="#full" transform="translate(455,872)"></use><use href="#none" transform="translate(455,902)"></use><use href="#full" transform="translate(455,932)"></use><use href="#full" transform="translate(455,962)"></use><use href="#full" transform="translate(455,992)"></use><use href="#none" transform="translate(455,1022)"></use><use href="#full" transform="translate(455,1052)"></use><use href="#full" transform="translate(455,1082)"></use><use href="#full" transform="translate(455,1112)"></use><use href="#full" transform="translate(455,1142)"></use><use href="#full" transform="translate(455,1172)"></use><use href="#full" transform="translate(455,1202)"></use><use href="#full" transform="translate(455,1232)"></use><use href="#none" transform="translate(455,1262)"></use><use href="#none" transform="translate(455,1292)"></use><use href="#full" transform="translate(455,1322)"></use><use href="#partially" transform="translate(455,1352)"></use><text x="471" y="1371"><title>Not for column renaming without AS clause</title>b</text><use href="#partially" transform="translate(455,1382)"></use><text x="471" y="1401"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,1412)"></use><use href="#none" transform="translate(455,1442)"></use><use href="#full" transform="translate(455,1472)"></use><use href="#full" transform="translate(455,1502)"></use><use href="#full" transform="translate(455,1532)"></use><use href="#full" transform="translate(455,1562)"></use><use href="#full" transform="translate(455,1592)"></use><use href="#none" transform="translate(455,1622)"></use><use href="#none" transform="translate(455,1652)"></use><use href="#none" transform="translate(455,1682)"></use><use href="#full" transform="translate(455,1712)"></use><use href="#full" transform="translate(455,1742)"></use><use href="#full" transform="translate(455,1772)"></use><use href="#full" transform="translate(455,1802)"></use><use href="#full" transform="translate(455,1832)"></use><use href="#none" transform="translate(455,1862)"></use><use href="#full" transform="translate(455,1892)"></use><use href="#full" transform="translate(455,1922)"></use><use href="#full" transform="translate(455,1952)"></use><use href="#none" transform="translate(455,1982)"></use><use href="#full" transform="translate(455,2012)"></use><use href="#full" transform="translate(455,2042)"></use><use href="#full" transform="translate(455,2072)"></use><use href="#full" transform="translate(455,2102)"></use><use href="#full" transform="translate(455,2132)"></use><use href="#full" transform="translate(455,2162)"></use><use href="#full" transform="translate(455,2192)"></use><use href="#none" transform="translate(455,2222)"></use><use href="#none" transform="translate(455,2252)"></use><use href="#full" transform="translate(455,2282)"></use><use href="#full" transform="translate(455,2312)"></use><use href="#full" transform="translate(455,2342)"></use><use href="#none" transform="translate(455,2372)"></use><use href="#none" transform="translate(455,2402)"></use><use href="#full" transform="translate(455,2432)"></use><use href="#none" transform="translate(455,2462)"></use><use href="#none" transform="translate(455,2492)"></use><use href="#none" transform="translate(455,2522)"></use><use href="#none" transform="translate(455,2552)"></use><use href="#none" transform="translate(455,2582)"></use><use href="#full" transform="translate(455,2612)"></use><use href="#full" transform="translate(455,2642)"></use><use href="#full" transform="translate(455,2672)"></use><use href="#full" transform="translate(455,2702)"></use><use href="#partially" transform="translate(455,2732)"></use><text x="471" y="2751"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,2762)"></use><use href="#full" transform="translate(455,2792)"></use><use href="#full" transform="translate(455,2822)"></use><use href="#full" transform="translate(455,2852)"></use><use href="#full" transform="translate(455,2882)"></use><use href="#full" transform="translate(455,2912)"></use><use href="#full" transform="translate(455,2942)"></use><use href="#full" transform="translate(455,2972)"></use><use href="#full" transform="translate(455,3002)"></use><use href="#full" transform="translate(455,3032)"></use><use href="#none" transform="translate(455,3062)"></use><use href="#none" transform="translate(455,3092)"></use><use href="#full" transform="translate(455,3122)"></use><use href="#full" transform="translate(455,3152)"></use><use href="#full" transform="translate(455,3182)"></use><use href="#full" transform="translate(455,3212)"></use><use href="#full" transform="translate(455,3242)"></use><use href="#full" transform="translate(455,3272)"></use><use href="#full" transform="translate(455,3302)"></use><use href="#none" transform="translate(455,3332)"></use><use href="#full" transform="translate(455,3362)"></use><use href="#full" transform="translate(455,3392)"></use><use href="#full" transform="translate(455,3422)"></use><use href="#full" transform="translate(455,3452)"></use><use href="#none" transform="translate(455,3482)"></use><use href="#full" transform="translate(455,3512)"></use><use href="#full" transform="translate(455,3542)"></use><use href="#full" transform="translate(455,3572)"></use><use href="#none" transform="translate(455,3602)"></use><use href="#full" transform="translate(455,3632)"></use><use href="#full" transform="translate(455,3662)"></use><use href="#full" transform="translate(455,3692)"></use><use href="#full" transform="translate(455,3722)"></use><use href="#none" transform="translate(455,3752)"></use><use href="#full" transform="translate(455,3782)"></use><use href="#full" transform="translate(455,3812)"></use><use href="#full" transform="translate(455,3842)"></use><use href="#none" transform="translate(455,3872)"></use><use href="#none" transform="translate(455,3902)"></use><use href="#full" transform="translate(455,3932)"></use><use href="#full" transform="translate(455,3962)"></use><use href="#full" transform="translate(455,3992)"></use><use href="#full" transform="translate(455,4022)"></use><use href="#none" transform="translate(455,4052)"></use><use href="#full" transform="translate(455,4082)"></use><use href="#full" transform="translate(455,4112)"></use><use href="#full" transform="translate(455,4142)"></use><use href="#full" transform="translate(455,4172)"></use><use href="#full" transform="translate(455,4202)"></use><use href="#full" transform="translate(455,4232)"></use><use href="#full" transform="translate(455,4262)"></use><use href="#full" transform="translate(455,4292)"></use><use href="#full" transform="translate(455,4322)"></use><use href="#full" transform="translate(455,4352)"></use><use href="#none" transform="translate(455,4382)"></use><use href="#none" transform="translate(455,4412)"></use><use href="#full" transform="translate(455,4442)"></use><use href="#full" transform="translate(455,4472)"></use><use href="#partially" transform="translate(455,4502)"></use><text x="471" y="4521"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,4532)"></use><use href="#full" transform="translate(455,4562)"></use><use href="#full" transform="translate(455,4592)"></use><use href="#full" transform="translate(455,4622)"></use><use href="#full" transform="translate(455,4652)"></use><use href="#full" transform="translate(455,4682)"></use><use href="#none" transform="translate(455,4712)"></use><use href="#full" transform="translate(455,4742)"></use><use href="#none" transform="translate(455,4772)"></use><use href="#full" transform="translate(455,4802)"></use><use href="#full" transform="translate(455,4832)"></use><use href="#full" transform="translate(455,4862)"></use><use href="#none" transform="translate(455,4892)"></use><use href="#none" transform="translate(455,4922)"></use><use href="#none" transform="translate(455,4952)"></use><use href="#full" transform="translate(455,4982)"></use><use href="#full" transform="translate(455,5012)"></use><use href="#full" transform="translate(455,5042)"></use><use href="#full" transform="translate(455,5072)"></use><use href="#full" transform="translate(455,5102)"></use><use href="#full" transform="translate(455,5132)"></use><use href="#full" transform="translate(455,5162)"></use><use href="#full" transform="translate(455,5192)"></use><use href="#none" transform="translate(455,5222)"></use><use href="#none" transform="translate(455,5252)"></use><use href="#full" transform="translate(455,5282)"></use><use href="#full" transform="translate(455,5312)"></use><use href="#full" transform="translate(455,5342)"></use><use href="#none" transform="translate(455,5372)"></use><use href="#full" transform="translate(455,5402)"></use><use href="#full" transform="translate(455,5432)"></use><use href="#partially" transform="translate(455,5462)"></use><text x="471" y="5481"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,5492)"></use><use href="#full" transform="translate(455,5522)"></use><use href="#full" transform="translate(455,5552)"></use><use href="#full" transform="translate(455,5582)"></use><use href="#full" transform="translate(455,5612)"></use><use href="#full" transform="translate(455,5642)"></use><use href="#full" transform="translate(455,5672)"></use><use href="#full" transform="translate(455,5702)"></use><use href="#full" transform="translate(455,5732)"></use><use href="#full" transform="translate(455,5762)"></use><use href="#none" transform="translate(455,5792)"></use><use href="#full" transform="translate(455,5822)"></use><use href="#none" transform="translate(455,5852)"></use><use href="#full" transform="translate(455,5882)"></use><use href="#full" transform="translate(455,5912)"></use><use href="#full" transform="translate(455,5942)"></use><use href="#full" transform="translate(455,5972)"></use><use href="#full" transform="translate(455,6002)"></use><use href="#full" transform="translate(455,6032)"></use><use href="#none" transform="translate(455,6062)"></use><use href="#none" transform="translate(455,6092)"></use><use href="#full" transform="translate(455,6122)"></use><use href="#full" transform="translate(455,6152)"></use><use href="#full" transform="translate(455,6182)"></use><use href="#full" transform="translate(455,6212)"></use><use href="#full" transform="translate(455,6242)"></use><use href="#full" transform="translate(455,6272)"></use><use href="#full" transform="translate(455,6302)"></use><use href="#full" transform="translate(455,6332)"></use><use href="#full" transform="translate(455,6362)"></use><use href="#full" transform="translate(455,6392)"></use><use href="#full" transform="translate(455,6422)"></use><use href="#none" transform="translate(455,6452)"></use><use href="#full" transform="translate(455,6482)"></use><use href="#none" transform="translate(455,6512)"></use><use href="#full" transform="translate(455,6542)"></use><use href="#full" transform="translate(455,6572)"></use><use href="#full" transform="translate(455,6602)"></use><use href="#none" transform="translate(455,6632)"></use><use href="#none" transform="translate(455,6662)"></use><use href="#full" transform="translate(455,6692)"></use><use href="#full" transform="translate(455,6722)"></use><use href="#none" transform="translate(455,6752)"></use><use href="#full" transform="translate(455,6782)"></use><use href="#full" transform="translate(455,6812)"></use><use href="#full" transform="translate(455,6842)"></use><use href="#full" transform="translate(455,6872)"></use><use href="#full" transform="translate(455,6902)"></use><use href="#full" transform="translate(455,6932)"></use><use href="#full" transform="translate(455,6962)"></use><use href="#full" transform="translate(455,6992)"></use><use href="#full" transform="translate(455,7022)"></use><use href="#full" transform="translate(455,7052)"></use><use href="#none" transform="translate(455,7082)"></use><use href="#full" transform="translate(455,7112)"></use><use href="#none" transform="translate(455,7142)"></use><use href="#full" transform="translate(455,7172)"></use><use href="#none" transform="translate(455,7202)"></use><use href="#full" transform="translate(455,7232)"></use><use href="#none" transform="translate(455,7262)"></use><use href="#none" transform="translate(455,7292)"></use><use href="#full" transform="translate(455,7322)"></use><use href="#full" transform="translate(455,7352)"></use><use href="#full" transform="translate(455,7382)"></use><use href="#full" transform="translate(455,7412)"></use><use href="#none" transform="translate(455,7442)"></use><use href="#none" transform="translate(455,7472)"></use><use href="#full" transform="translate(455,7502)"></use><use href="#full" transform="translate(455,7532)"></use><use href="#full" transform="translate(455,7562)"></use><use href="#full" transform="translate(455,7592)"></use><use href="#full" transform="translate(455,7622)"></use><use href="#full" transform="translate(455,7652)"></use><use href="#full" transform="translate(455,7682)"></use><use href="#full" transform="translate(455,7712)"></use><use href="#full" transform="translate(455,7742)"></use><use href="#full" transform="translate(455,7772)"></use><use href="#full" transform="translate(455,7802)"></use><use href="#full" transform="translate(455,7832)"></use><use href="#full" transform="translate(455,7862)"></use><use href="#full" transform="translate(455,7892)"></use><use href="#full" transform="translate(455,7922)"></use><use href="#full" transform="translate(455,7952)"></use><use href="#full" transform="translate(455,7982)"></use><use href="#full" transform="translate(455,8012)"></use><use href="#full" transform="translate(455,8042)"></use><use href="#full" transform="translate(455,8072)"></use><use href="#full" transform="translate(455,8102)"></use><use href="#full" transform="translate(455,8132)"></use><use href="#full" transform="translate(455,8162)"></use><use href="#full" transform="translate(455,8192)"></use><use href="#partially" transform="translate(455,8222)"></use><text x="471" y="8241"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,8252)"></use><use href="#full" transform="translate(455,8282)"></use><use href="#full" transform="translate(455,8312)"></use><use href="#full" transform="translate(455,8342)"></use><use href="#full" transform="translate(455,8372)"></use><use href="#full" transform="translate(455,8402)"></use><use href="#full" transform="translate(455,8432)"></use><use href="#full" transform="translate(455,8462)"></use><use href="#partially" transform="translate(455,8492)"></use><text x="471" y="8511"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,8522)"></use><use href="#full" transform="translate(455,8552)"></use><use href="#none" transform="translate(455,8582)"></use><use href="#full" transform="translate(455,8612)"></use><use href="#full" transform="translate(455,8642)"></use><use href="#full" transform="translate(455,8672)"></use><use href="#full" transform="translate(455,8702)"></use><use href="#full" transform="translate(455,8732)"></use><use href="#full" transform="translate(455,8762)"></use><use href="#full" transform="translate(455,8792)"></use><use href="#full" transform="translate(455,8822)"></use><use href="#full" transform="translate(455,8852)"></use><use href="#none" transform="translate(455,8882)"></use><use href="#full" transform="translate(455,8912)"></use><use href="#none" transform="translate(455,8942)"></use><use href="#full" transform="translate(455,8972)"></use><use href="#full" transform="translate(455,9002)"></use><use href="#full" transform="translate(455,9032)"></use><use href="#full" transform="translate(455,9062)"></use><use href="#none" transform="translate(455,9092)"></use><use href="#full" transform="translate(455,9122)"></use><use href="#full" transform="translate(455,9152)"></use><use href="#full" transform="translate(455,9182)"></use><use href="#full" transform="translate(455,9212)"></use><use href="#full" transform="translate(455,9242)"></use><use href="#full" transform="translate(455,9272)"></use><use href="#full" transform="translate(455,9302)"></use><use href="#full" transform="translate(455,9332)"></use><use href="#none" transform="translate(455,9362)"></use><use href="#full" transform="translate(455,9392)"></use><use href="#none" transform="translate(455,9422)"></use><use href="#full" transform="translate(455,9452)"></use><use href="#none" transform="translate(455,9482)"></use><use href="#full" transform="translate(455,9512)"></use><use href="#full" transform="translate(455,9542)"></use><use href="#full" transform="translate(455,9572)"></use><use href="#full" transform="translate(455,9602)"></use><use href="#full" transform="translate(455,9632)"></use><use href="#full" transform="translate(455,9662)"></use><use href="#full" transform="translate(455,9692)"></use><use href="#full" transform="translate(455,9722)"></use><use href="#full" transform="translate(455,9752)"></use><use href="#none" transform="translate(455,9782)"></use><use href="#none" transform="translate(455,9812)"></use><use href="#full" transform="translate(455,9842)"></use><use href="#none" transform="translate(455,9872)"></use><use href="#full" transform="translate(455,9902)"></use><use href="#full" transform="translate(455,9932)"></use><use href="#partially" transform="translate(455,9962)"></use><text x="471" y="9981"><title>Not for column renaming without AS clause</title>b</text><use href="#none" transform="translate(455,9992)"></use><use href="#full" transform="translate(455,10022)"></use><use href="#full" transform="translate(455,10052)"></use><use href="#full" transform="translate(455,10082)"></use><use href="#full" transform="translate(455,10112)"></use><use href="#full" transform="translate(455,10142)"></use><use href="#full" transform="translate(455,10172)"></use><use href="#full" transform="translate(455,10202)"></use><use href="#full" transform="translate(455,10232)"></use><use href="#full" transform="translate(455,10262)"></use><use href="#none" transform="translate(455,10292)"></use><use href="#full" transform="translate(455,10322)"></use><use href="#full" transform="translate(455,10352)"></use><use href="#full" transform="translate(455,10382)"></use><use href="#full" transform="translate(455,10412)"></use><use href="#partially" transform="translate(455,10442)"></use><text x="471" y="10461"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,10472)"></use><use href="#full" transform="translate(455,10502)"></use><use href="#none" transform="translate(455,10532)"></use><use href="#full" transform="translate(455,10562)"></use><use href="#full" transform="translate(455,10592)"></use><use href="#full" transform="translate(455,10622)"></use><use href="#full" transform="translate(455,10652)"></use><use href="#full" transform="translate(455,10682)"></use><use href="#full" transform="translate(455,10712)"></use><use href="#full" transform="translate(455,10742)"></use><use href="#full" transform="translate(455,10772)"></use><use href="#full" transform="translate(455,10802)"></use><use href="#full" transform="translate(455,10832)"></use><use href="#full" transform="translate(455,10862)"></use><use href="#full" transform="translate(455,10892)"></use><use href="#full" transform="translate(455,10922)"></use><use href="#full" transform="translate(455,10952)"></use><use href="#full" transform="translate(455,10982)"></use><use href="#full" transform="translate(455,11012)"></use><use href="#full" transform="translate(455,11042)"></use><use href="#full" transform="translate(455,11072)"></use><use href="#full" transform="translate(455,11102)"></use><use href="#none" transform="translate(455,11132)"></use><use href="#full" transform="translate(455,11162)"></use><use href="#full" transform="translate(455,11192)"></use><use href="#full" transform="translate(455,11222)"></use><use href="#full" transform="translate(455,11252)"></use><use href="#full" transform="translate(455,11282)"></use><use href="#full" transform="translate(455,11312)"></use><use href="#full" transform="translate(455,11342)"></use><use href="#full" transform="translate(455,11372)"></use><use href="#full" transform="translate(455,11402)"></use><use href="#full" transform="translate(455,11432)"></use><use href="#full" transform="translate(455,11462)"></use><use href="#full" transform="translate(455,11492)"></use><use href="#full" transform="translate(455,11522)"></use><use href="#full" transform="translate(455,11552)"></use><use href="#none" transform="translate(455,11582)"></use><use href="#full" transform="translate(455,11612)"></use><use href="#full" transform="translate(455,11642)"></use><use href="#none" transform="translate(455,11672)"></use><use href="#full" transform="translate(455,11702)"></use><use href="#full" transform="translate(455,11732)"></use><use href="#full" transform="translate(455,11762)"></use><use href="#full" transform="translate(455,11792)"></use><use href="#full" transform="translate(455,11822)"></use><use href="#full" transform="translate(455,11852)"></use><use href="#full" transform="translate(455,11882)"></use><use href="#full" transform="translate(455,11912)"></use><use href="#full" transform="translate(455,11942)"></use><use href="#full" transform="translate(455,11972)"></use><use href="#full" transform="translate(455,12002)"></use><use href="#full" transform="translate(455,12032)"></use><use href="#full" transform="translate(455,12062)"></use><use href="#full" transform="translate(455,12092)"></use><use href="#full" transform="translate(455,12122)"></use><use href="#full" transform="translate(455,12152)"></use><use href="#partially" transform="translate(455,12182)"></use><text x="471" y="12201"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,12212)"></use><use href="#full" transform="translate(455,12242)"></use><use href="#none" transform="translate(455,12272)"></use><use href="#full" transform="translate(455,12302)"></use><use href="#full" transform="translate(455,12332)"></use><use href="#full" transform="translate(455,12362)"></use><use href="#full" transform="translate(455,12392)"></use><use href="#full" transform="translate(455,12422)"></use><use href="#full" transform="translate(455,12452)"></use><use href="#none" transform="translate(455,12482)"></use><use href="#full" transform="translate(455,12512)"></use><use href="#full" transform="translate(455,12542)"></use><use href="#full" transform="translate(455,12572)"></use><use href="#full" transform="translate(455,12602)"></use><use href="#full" transform="translate(455,12632)"></use><use href="#full" transform="translate(455,12662)"></use><use href="#none" transform="translate(455,12692)"></use><use href="#full" transform="translate(455,12722)"></use><use href="#full" transform="translate(455,12752)"></use><use href="#none" transform="translate(455,12782)"></use><use href="#full" transform="translate(455,12812)"></use><use href="#full" transform="translate(455,12842)"></use><use href="#full" transform="translate(455,12872)"></use><use href="#full" transform="translate(455,12902)"></use><use href="#full" transform="translate(455,12932)"></use><use href="#full" transform="translate(455,12962)"></use><use href="#full" transform="translate(455,12992)"></use><use href="#full" transform="translate(455,13022)"></use><use href="#full" transform="translate(455,13052)"></use><use href="#full" transform="translate(455,13082)"></use><use href="#full" transform="translate(455,13112)"></use><use href="#full" transform="translate(455,13142)"></use><use href="#full" transform="translate(455,13172)"></use><use href="#full" transform="translate(455,13202)"></use><use href="#full" transform="translate(455,13232)"></use><use href="#full" transform="translate(455,13262)"></use><use href="#full" transform="translate(455,13292)"></use><use href="#full" transform="translate(455,13322)"></use><use href="#full" transform="translate(455,13352)"></use><use href="#full" transform="translate(455,13382)"></use><use href="#full" transform="translate(455,13412)"></use><use href="#full" transform="translate(455,13442)"></use><use href="#full" transform="translate(455,13472)"></use><use href="#full" transform="translate(455,13502)"></use><use href="#full" transform="translate(455,13532)"></use><use href="#full" transform="translate(455,13562)"></use><use href="#full" transform="translate(455,13592)"></use><use href="#full" transform="translate(455,13622)"></use><use href="#full" transform="translate(455,13652)"></use><use href="#full" transform="translate(455,13682)"></use><use href="#full" transform="translate(455,13712)"></use><use href="#none" transform="translate(455,13742)"></use><use href="#full" transform="translate(455,13772)"></use><use href="#full" transform="translate(455,13802)"></use><use href="#full" transform="translate(455,13832)"></use><use href="#none" transform="translate(455,13862)"></use><use href="#none" transform="translate(455,13892)"></use><use href="#none" transform="translate(455,13922)"></use><use href="#full" transform="translate(455,13952)"></use><use href="#full" transform="translate(455,13982)"></use><use href="#full" transform="translate(455,14012)"></use><use href="#none" transform="translate(455,14042)"></use><use href="#full" transform="translate(455,14072)"></use><use href="#full" transform="translate(455,14102)"></use><use href="#full" transform="translate(455,14132)"></use><use href="#full" transform="translate(455,14162)"></use><use href="#full" transform="translate(455,14192)"></use><use href="#none" transform="translate(455,14222)"></use><use href="#full" transform="translate(455,14252)"></use><use href="#none" transform="translate(455,14282)"></use><use href="#full" transform="translate(455,14312)"></use><use href="#full" transform="translate(455,14342)"></use><use href="#full" transform="translate(455,14372)"></use><use href="#full" transform="translate(455,14402)"></use><use href="#full" transform="translate(455,14432)"></use><use href="#full" transform="translate(455,14462)"></use><use href="#full" transform="translate(455,14492)"></use><use href="#none" transform="translate(455,14522)"></use><use href="#full" transform="translate(455,14552)"></use><use href="#full" transform="translate(455,14582)"></use><use href="#full" transform="translate(455,14612)"></use><use href="#full" transform="translate(455,14642)"></use><use href="#full" transform="translate(455,14672)"></use><use href="#full" transform="translate(455,14702)"></use><use href="#full" transform="translate(455,14732)"></use><use href="#none" transform="translate(455,14762)"></use><use href="#none" transform="translate(455,14792)"></use><use href="#full" transform="translate(455,14822)"></use><use href="#full" transform="translate(455,14852)"></use><use href="#full" transform="translate(455,14882)"></use><use href="#full" transform="translate(455,14912)"></use><use href="#full" transform="translate(455,14942)"></use><use href="#full" transform="translate(455,14972)"></use><use href="#full" transform="translate(455,15002)"></use><use href="#full" transform="translate(455,15032)"></use><use href="#full" transform="translate(455,15062)"></use><use href="#full" transform="translate(455,15092)"></use><use href="#none" transform="translate(455,15122)"></use><use href="#none" transform="translate(455,15152)"></use><use href="#full" transform="translate(455,15182)"></use><use href="#full" transform="translate(455,15212)"></use><use href="#full" transform="translate(455,15242)"></use><use href="#full" transform="translate(455,15272)"></use><use href="#full" transform="translate(455,15302)"></use><use href="#full" transform="translate(455,15332)"></use><use href="#full" transform="translate(455,15362)"></use><use href="#full" transform="translate(455,15392)"></use><use href="#full" transform="translate(455,15422)"></use><use href="#full" transform="translate(455,15452)"></use><use href="#none" transform="translate(455,15482)"></use><use href="#partially" transform="translate(455,15512)"></use><text x="471" y="15531"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,15542)"></use><use href="#full" transform="translate(455,15572)"></use><use href="#none" transform="translate(455,15602)"></use><use href="#full" transform="translate(455,15632)"></use><use href="#full" transform="translate(455,15662)"></use><use href="#full" transform="translate(455,15692)"></use><use href="#none" transform="translate(455,15722)"></use><use href="#full" transform="translate(455,15752)"></use><use href="#none" transform="translate(455,15782)"></use><use href="#full" transform="translate(455,15812)"></use><use href="#none" transform="translate(455,15842)"></use><use href="#none" transform="translate(455,15872)"></use><use href="#partially" transform="translate(455,15902)"></use><text x="471" y="15921"><title>Not for column renaming without AS clause</title>b</text><use href="#none" transform="translate(455,15932)"></use><use href="#partially" transform="translate(455,15962)"></use><text x="471" y="15981"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,15992)"></use><use href="#full" transform="translate(455,16022)"></use><use href="#full" transform="translate(455,16052)"></use><use href="#full" transform="translate(455,16082)"></use><use href="#full" transform="translate(455,16112)"></use><use href="#full" transform="translate(455,16142)"></use><use href="#full" transform="translate(455,16172)"></use><use href="#full" transform="translate(455,16202)"></use><use href="#full" transform="translate(455,16232)"></use><use href="#full" transform="translate(455,16262)"></use><use href="#full" transform="translate(455,16292)"></use><use href="#full" transform="translate(455,16322)"></use><use href="#partially" transform="translate(455,16352)"></use><text x="471" y="16371"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(455,16382)"></use><use href="#full" transform="translate(455,16412)"></use><use href="#full" transform="translate(455,16442)"></use></g><g><title>SQL Server</title><path d="M565,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(506.5, 83) rotate(-45)">SQL Server</text><use href="#full" transform="translate(490,92)"></use><use href="#full" transform="translate(490,122)"></use><use href="#none" transform="translate(490,152)"></use><use href="#none" transform="translate(490,182)"></use><use href="#full" transform="translate(490,212)"></use><use href="#none" transform="translate(490,242)"></use><use href="#full" transform="translate(490,272)"></use><use href="#full" transform="translate(490,302)"></use><use href="#none" transform="translate(490,332)"></use><use href="#none" transform="translate(490,362)"></use><use href="#full" transform="translate(490,392)"></use><use href="#full" transform="translate(490,422)"></use><use href="#none" transform="translate(490,452)"></use><use href="#none" transform="translate(490,482)"></use><use href="#full" transform="translate(490,512)"></use><use href="#full" transform="translate(490,542)"></use><use href="#full" transform="translate(490,572)"></use><use href="#full" transform="translate(490,602)"></use><use href="#full" transform="translate(490,632)"></use><use href="#none" transform="translate(490,662)"></use><use href="#full" transform="translate(490,692)"></use><use href="#full" transform="translate(490,722)"></use><use href="#none" transform="translate(490,752)"></use><use href="#full" transform="translate(490,782)"></use><use href="#none" transform="translate(490,812)"></use><use href="#none" transform="translate(490,842)"></use><use href="#full" transform="translate(490,872)"></use><use href="#full" transform="translate(490,902)"></use><use href="#full" transform="translate(490,932)"></use><use href="#full" transform="translate(490,962)"></use><use href="#full" transform="translate(490,992)"></use><use href="#full" transform="translate(490,1022)"></use><use href="#none" transform="translate(490,1052)"></use><use href="#none" transform="translate(490,1082)"></use><use href="#none" transform="translate(490,1112)"></use><use href="#none" transform="translate(490,1142)"></use><use href="#full" transform="translate(490,1172)"></use><use href="#none" transform="translate(490,1202)"></use><use href="#full" transform="translate(490,1232)"></use><use href="#none" transform="translate(490,1262)"></use><use href="#full" transform="translate(490,1292)"></use><use href="#full" transform="translate(490,1322)"></use><use href="#full" transform="translate(490,1352)"></use><use href="#full" transform="translate(490,1382)"></use><use href="#full" transform="translate(490,1412)"></use><use href="#none" transform="translate(490,1442)"></use><use href="#none" transform="translate(490,1472)"></use><use href="#none" transform="translate(490,1502)"></use><use href="#full" transform="translate(490,1532)"></use><use href="#none" transform="translate(490,1562)"></use><use href="#none" transform="translate(490,1592)"></use><use href="#none" transform="translate(490,1622)"></use><use href="#full" transform="translate(490,1652)"></use><use href="#none" transform="translate(490,1682)"></use><use href="#full" transform="translate(490,1712)"></use><use href="#none" transform="translate(490,1742)"></use><use href="#full" transform="translate(490,1772)"></use><use href="#none" transform="translate(490,1802)"></use><use href="#full" transform="translate(490,1832)"></use><use href="#full" transform="translate(490,1862)"></use><use href="#full" transform="translate(490,1892)"></use><use href="#full" transform="translate(490,1922)"></use><use href="#full" transform="translate(490,1952)"></use><use href="#none" transform="translate(490,1982)"></use><use href="#full" transform="translate(490,2012)"></use><use href="#none" transform="translate(490,2042)"></use><use href="#none" transform="translate(490,2072)"></use><use href="#none" transform="translate(490,2102)"></use><use href="#none" transform="translate(490,2132)"></use><use href="#full" transform="translate(490,2162)"></use><use href="#full" transform="translate(490,2192)"></use><use href="#none" transform="translate(490,2222)"></use><use href="#none" transform="translate(490,2252)"></use><use href="#full" transform="translate(490,2282)"></use><use href="#full" transform="translate(490,2312)"></use><use href="#none" transform="translate(490,2342)"></use><use href="#full" transform="translate(490,2372)"></use><use href="#none" transform="translate(490,2402)"></use><use href="#full" transform="translate(490,2432)"></use><use href="#full" transform="translate(490,2462)"></use><use href="#full" transform="translate(490,2492)"></use><use href="#none" transform="translate(490,2522)"></use><use href="#none" transform="translate(490,2552)"></use><use href="#none" transform="translate(490,2582)"></use><use href="#none" transform="translate(490,2612)"></use><use href="#none" transform="translate(490,2642)"></use><use href="#full" transform="translate(490,2672)"></use><use href="#full" transform="translate(490,2702)"></use><use href="#full" transform="translate(490,2732)"></use><use href="#full" transform="translate(490,2762)"></use><use href="#full" transform="translate(490,2792)"></use><use href="#full" transform="translate(490,2822)"></use><use href="#full" transform="translate(490,2852)"></use><use href="#full" transform="translate(490,2882)"></use><use href="#none" transform="translate(490,2912)"></use><use href="#none" transform="translate(490,2942)"></use><use href="#full" transform="translate(490,2972)"></use><use href="#full" transform="translate(490,3002)"></use><use href="#none" transform="translate(490,3032)"></use><use href="#none" transform="translate(490,3062)"></use><use href="#full" transform="translate(490,3092)"></use><use href="#full" transform="translate(490,3122)"></use><use href="#full" transform="translate(490,3152)"></use><use href="#full" transform="translate(490,3182)"></use><use href="#full" transform="translate(490,3212)"></use><use href="#none" transform="translate(490,3242)"></use><use href="#full" transform="translate(490,3272)"></use><use href="#none" transform="translate(490,3302)"></use><use href="#none" transform="translate(490,3332)"></use><use href="#full" transform="translate(490,3362)"></use><use href="#full" transform="translate(490,3392)"></use><use href="#full" transform="translate(490,3422)"></use><use href="#full" transform="translate(490,3452)"></use><use href="#none" transform="translate(490,3482)"></use><use href="#full" transform="translate(490,3512)"></use><use href="#none" transform="translate(490,3542)"></use><use href="#full" transform="translate(490,3572)"></use><use href="#full" transform="translate(490,3602)"></use><use href="#none" transform="translate(490,3632)"></use><use href="#none" transform="translate(490,3662)"></use><use href="#full" transform="translate(490,3692)"></use><use href="#full" transform="translate(490,3722)"></use><use href="#none" transform="translate(490,3752)"></use><use href="#full" transform="translate(490,3782)"></use><use href="#full" transform="translate(490,3812)"></use><use href="#full" transform="translate(490,3842)"></use><use href="#none" transform="translate(490,3872)"></use><use href="#none" transform="translate(490,3902)"></use><use href="#full" transform="translate(490,3932)"></use><use href="#none" transform="translate(490,3962)"></use><use href="#none" transform="translate(490,3992)"></use><use href="#full" transform="translate(490,4022)"></use><use href="#none" transform="translate(490,4052)"></use><use href="#full" transform="translate(490,4082)"></use><use href="#full" transform="translate(490,4112)"></use><use href="#full" transform="translate(490,4142)"></use><use href="#none" transform="translate(490,4172)"></use><use href="#none" transform="translate(490,4202)"></use><use href="#none" transform="translate(490,4232)"></use><use href="#none" transform="translate(490,4262)"></use><use href="#full" transform="translate(490,4292)"></use><use href="#none" transform="translate(490,4322)"></use><use href="#full" transform="translate(490,4352)"></use><use href="#full" transform="translate(490,4382)"></use><use href="#none" transform="translate(490,4412)"></use><use href="#none" transform="translate(490,4442)"></use><use href="#none" transform="translate(490,4472)"></use><use href="#full" transform="translate(490,4502)"></use><use href="#full" transform="translate(490,4532)"></use><use href="#full" transform="translate(490,4562)"></use><use href="#full" transform="translate(490,4592)"></use><use href="#full" transform="translate(490,4622)"></use><use href="#full" transform="translate(490,4652)"></use><use href="#full" transform="translate(490,4682)"></use><use href="#none" transform="translate(490,4712)"></use><use href="#full" transform="translate(490,4742)"></use><use href="#none" transform="translate(490,4772)"></use><use href="#full" transform="translate(490,4802)"></use><use href="#none" transform="translate(490,4832)"></use><use href="#none" transform="translate(490,4862)"></use><use href="#full" transform="translate(490,4892)"></use><use href="#none" transform="translate(490,4922)"></use><use href="#none" transform="translate(490,4952)"></use><use href="#full" transform="translate(490,4982)"></use><use href="#none" transform="translate(490,5012)"></use><use href="#full" transform="translate(490,5042)"></use><use href="#full" transform="translate(490,5072)"></use><use href="#full" transform="translate(490,5102)"></use><use href="#full" transform="translate(490,5132)"></use><use href="#full" transform="translate(490,5162)"></use><use href="#none" transform="translate(490,5192)"></use><use href="#none" transform="translate(490,5222)"></use><use href="#none" transform="translate(490,5252)"></use><use href="#full" transform="translate(490,5282)"></use><use href="#full" transform="translate(490,5312)"></use><use href="#full" transform="translate(490,5342)"></use><use href="#none" transform="translate(490,5372)"></use><use href="#full" transform="translate(490,5402)"></use><use href="#none" transform="translate(490,5432)"></use><use href="#full" transform="translate(490,5462)"></use><use href="#full" transform="translate(490,5492)"></use><use href="#full" transform="translate(490,5522)"></use><use href="#full" transform="translate(490,5552)"></use><use href="#full" transform="translate(490,5582)"></use><use href="#full" transform="translate(490,5612)"></use><use href="#none" transform="translate(490,5642)"></use><use href="#none" transform="translate(490,5672)"></use><use href="#none" transform="translate(490,5702)"></use><use href="#none" transform="translate(490,5732)"></use><use href="#full" transform="translate(490,5762)"></use><use href="#full" transform="translate(490,5792)"></use><use href="#full" transform="translate(490,5822)"></use><use href="#none" transform="translate(490,5852)"></use><use href="#full" transform="translate(490,5882)"></use><use href="#none" transform="translate(490,5912)"></use><use href="#full" transform="translate(490,5942)"></use><use href="#full" transform="translate(490,5972)"></use><use href="#full" transform="translate(490,6002)"></use><use href="#full" transform="translate(490,6032)"></use><use href="#full" transform="translate(490,6062)"></use><use href="#none" transform="translate(490,6092)"></use><use href="#full" transform="translate(490,6122)"></use><use href="#full" transform="translate(490,6152)"></use><use href="#full" transform="translate(490,6182)"></use><use href="#none" transform="translate(490,6212)"></use><use href="#full" transform="translate(490,6242)"></use><use href="#full" transform="translate(490,6272)"></use><use href="#full" transform="translate(490,6302)"></use><use href="#full" transform="translate(490,6332)"></use><use href="#full" transform="translate(490,6362)"></use><use href="#full" transform="translate(490,6392)"></use><use href="#full" transform="translate(490,6422)"></use><use href="#none" transform="translate(490,6452)"></use><use href="#full" transform="translate(490,6482)"></use><use href="#none" transform="translate(490,6512)"></use><use href="#full" transform="translate(490,6542)"></use><use href="#full" transform="translate(490,6572)"></use><use href="#full" transform="translate(490,6602)"></use><use href="#none" transform="translate(490,6632)"></use><use href="#full" transform="translate(490,6662)"></use><use href="#full" transform="translate(490,6692)"></use><use href="#full" transform="translate(490,6722)"></use><use href="#none" transform="translate(490,6752)"></use><use href="#full" transform="translate(490,6782)"></use><use href="#full" transform="translate(490,6812)"></use><use href="#full" transform="translate(490,6842)"></use><use href="#full" transform="translate(490,6872)"></use><use href="#none" transform="translate(490,6902)"></use><use href="#full" transform="translate(490,6932)"></use><use href="#none" transform="translate(490,6962)"></use><use href="#full" transform="translate(490,6992)"></use><use href="#full" transform="translate(490,7022)"></use><use href="#full" transform="translate(490,7052)"></use><use href="#full" transform="translate(490,7082)"></use><use href="#full" transform="translate(490,7112)"></use><use href="#full" transform="translate(490,7142)"></use><use href="#full" transform="translate(490,7172)"></use><use href="#none" transform="translate(490,7202)"></use><use href="#full" transform="translate(490,7232)"></use><use href="#none" transform="translate(490,7262)"></use><use href="#full" transform="translate(490,7292)"></use><use href="#full" transform="translate(490,7322)"></use><use href="#none" transform="translate(490,7352)"></use><use href="#full" transform="translate(490,7382)"></use><use href="#full" transform="translate(490,7412)"></use><use href="#full" transform="translate(490,7442)"></use><use href="#full" transform="translate(490,7472)"></use><use href="#full" transform="translate(490,7502)"></use><use href="#full" transform="translate(490,7532)"></use><use href="#full" transform="translate(490,7562)"></use><use href="#full" transform="translate(490,7592)"></use><use href="#full" transform="translate(490,7622)"></use><use href="#full" transform="translate(490,7652)"></use><use href="#full" transform="translate(490,7682)"></use><use href="#full" transform="translate(490,7712)"></use><use href="#full" transform="translate(490,7742)"></use><use href="#full" transform="translate(490,7772)"></use><use href="#full" transform="translate(490,7802)"></use><use href="#full" transform="translate(490,7832)"></use><use href="#full" transform="translate(490,7862)"></use><use href="#full" transform="translate(490,7892)"></use><use href="#full" transform="translate(490,7922)"></use><use href="#full" transform="translate(490,7952)"></use><use href="#full" transform="translate(490,7982)"></use><use href="#full" transform="translate(490,8012)"></use><use href="#none" transform="translate(490,8042)"></use><use href="#full" transform="translate(490,8072)"></use><use href="#full" transform="translate(490,8102)"></use><use href="#full" transform="translate(490,8132)"></use><use href="#full" transform="translate(490,8162)"></use><use href="#full" transform="translate(490,8192)"></use><use href="#full" transform="translate(490,8222)"></use><use href="#full" transform="translate(490,8252)"></use><use href="#full" transform="translate(490,8282)"></use><use href="#full" transform="translate(490,8312)"></use><use href="#full" transform="translate(490,8342)"></use><use href="#full" transform="translate(490,8372)"></use><use href="#full" transform="translate(490,8402)"></use><use href="#full" transform="translate(490,8432)"></use><use href="#full" transform="translate(490,8462)"></use><use href="#full" transform="translate(490,8492)"></use><use href="#full" transform="translate(490,8522)"></use><use href="#none" transform="translate(490,8552)"></use><use href="#full" transform="translate(490,8582)"></use><use href="#full" transform="translate(490,8612)"></use><use href="#full" transform="translate(490,8642)"></use><use href="#full" transform="translate(490,8672)"></use><use href="#full" transform="translate(490,8702)"></use><use href="#full" transform="translate(490,8732)"></use><use href="#none" transform="translate(490,8762)"></use><use href="#full" transform="translate(490,8792)"></use><use href="#none" transform="translate(490,8822)"></use><use href="#full" transform="translate(490,8852)"></use><use href="#none" transform="translate(490,8882)"></use><use href="#full" transform="translate(490,8912)"></use><use href="#full" transform="translate(490,8942)"></use><use href="#full" transform="translate(490,8972)"></use><use href="#full" transform="translate(490,9002)"></use><use href="#full" transform="translate(490,9032)"></use><use href="#full" transform="translate(490,9062)"></use><use href="#none" transform="translate(490,9092)"></use><use href="#none" transform="translate(490,9122)"></use><use href="#full" transform="translate(490,9152)"></use><use href="#full" transform="translate(490,9182)"></use><use href="#full" transform="translate(490,9212)"></use><use href="#full" transform="translate(490,9242)"></use><use href="#none" transform="translate(490,9272)"></use><use href="#none" transform="translate(490,9302)"></use><use href="#full" transform="translate(490,9332)"></use><use href="#full" transform="translate(490,9362)"></use><use href="#none" transform="translate(490,9392)"></use><use href="#none" transform="translate(490,9422)"></use><use href="#full" transform="translate(490,9452)"></use><use href="#full" transform="translate(490,9482)"></use><use href="#none" transform="translate(490,9512)"></use><use href="#none" transform="translate(490,9542)"></use><use href="#none" transform="translate(490,9572)"></use><use href="#none" transform="translate(490,9602)"></use><use href="#none" transform="translate(490,9632)"></use><use href="#full" transform="translate(490,9662)"></use><use href="#full" transform="translate(490,9692)"></use><use href="#none" transform="translate(490,9722)"></use><use href="#full" transform="translate(490,9752)"></use><use href="#none" transform="translate(490,9782)"></use><use href="#none" transform="translate(490,9812)"></use><use href="#full" transform="translate(490,9842)"></use><use href="#none" transform="translate(490,9872)"></use><use href="#full" transform="translate(490,9902)"></use><use href="#full" transform="translate(490,9932)"></use><use href="#none" transform="translate(490,9962)"></use><use href="#full" transform="translate(490,9992)"></use><use href="#full" transform="translate(490,10022)"></use><use href="#full" transform="translate(490,10052)"></use><use href="#full" transform="translate(490,10082)"></use><use href="#full" transform="translate(490,10112)"></use><use href="#none" transform="translate(490,10142)"></use><use href="#full" transform="translate(490,10172)"></use><use href="#full" transform="translate(490,10202)"></use><use href="#full" transform="translate(490,10232)"></use><use href="#none" transform="translate(490,10262)"></use><use href="#full" transform="translate(490,10292)"></use><use href="#none" transform="translate(490,10322)"></use><use href="#full" transform="translate(490,10352)"></use><use href="#full" transform="translate(490,10382)"></use><use href="#full" transform="translate(490,10412)"></use><use href="#full" transform="translate(490,10442)"></use><use href="#full" transform="translate(490,10472)"></use><use href="#full" transform="translate(490,10502)"></use><use href="#none" transform="translate(490,10532)"></use><use href="#none" transform="translate(490,10562)"></use><use href="#full" transform="translate(490,10592)"></use><use href="#full" transform="translate(490,10622)"></use><use href="#none" transform="translate(490,10652)"></use><use href="#none" transform="translate(490,10682)"></use><use href="#none" transform="translate(490,10712)"></use><use href="#full" transform="translate(490,10742)"></use><use href="#full" transform="translate(490,10772)"></use><use href="#none" transform="translate(490,10802)"></use><use href="#full" transform="translate(490,10832)"></use><use href="#full" transform="translate(490,10862)"></use><use href="#full" transform="translate(490,10892)"></use><use href="#none" transform="translate(490,10922)"></use><use href="#full" transform="translate(490,10952)"></use><use href="#none" transform="translate(490,10982)"></use><use href="#full" transform="translate(490,11012)"></use><use href="#full" transform="translate(490,11042)"></use><use href="#none" transform="translate(490,11072)"></use><use href="#full" transform="translate(490,11102)"></use><use href="#none" transform="translate(490,11132)"></use><use href="#full" transform="translate(490,11162)"></use><use href="#full" transform="translate(490,11192)"></use><use href="#full" transform="translate(490,11222)"></use><use href="#full" transform="translate(490,11252)"></use><use href="#full" transform="translate(490,11282)"></use><use href="#full" transform="translate(490,11312)"></use><use href="#none" transform="translate(490,11342)"></use><use href="#full" transform="translate(490,11372)"></use><use href="#full" transform="translate(490,11402)"></use><use href="#full" transform="translate(490,11432)"></use><use href="#full" transform="translate(490,11462)"></use><use href="#none" transform="translate(490,11492)"></use><use href="#none" transform="translate(490,11522)"></use><use href="#none" transform="translate(490,11552)"></use><use href="#full" transform="translate(490,11582)"></use><use href="#none" transform="translate(490,11612)"></use><use href="#none" transform="translate(490,11642)"></use><use href="#none" transform="translate(490,11672)"></use><use href="#full" transform="translate(490,11702)"></use><use href="#none" transform="translate(490,11732)"></use><use href="#full" transform="translate(490,11762)"></use><use href="#full" transform="translate(490,11792)"></use><use href="#none" transform="translate(490,11822)"></use><use href="#none" transform="translate(490,11852)"></use><use href="#full" transform="translate(490,11882)"></use><use href="#full" transform="translate(490,11912)"></use><use href="#full" transform="translate(490,11942)"></use><use href="#full" transform="translate(490,11972)"></use><use href="#full" transform="translate(490,12002)"></use><use href="#none" transform="translate(490,12032)"></use><use href="#none" transform="translate(490,12062)"></use><use href="#none" transform="translate(490,12092)"></use><use href="#full" transform="translate(490,12122)"></use><use href="#full" transform="translate(490,12152)"></use><use href="#full" transform="translate(490,12182)"></use><use href="#full" transform="translate(490,12212)"></use><use href="#full" transform="translate(490,12242)"></use><use href="#none" transform="translate(490,12272)"></use><use href="#none" transform="translate(490,12302)"></use><use href="#none" transform="translate(490,12332)"></use><use href="#none" transform="translate(490,12362)"></use><use href="#full" transform="translate(490,12392)"></use><use href="#full" transform="translate(490,12422)"></use><use href="#full" transform="translate(490,12452)"></use><use href="#none" transform="translate(490,12482)"></use><use href="#none" transform="translate(490,12512)"></use><use href="#none" transform="translate(490,12542)"></use><use href="#full" transform="translate(490,12572)"></use><use href="#full" transform="translate(490,12602)"></use><use href="#none" transform="translate(490,12632)"></use><use href="#full" transform="translate(490,12662)"></use><use href="#full" transform="translate(490,12692)"></use><use href="#full" transform="translate(490,12722)"></use><use href="#full" transform="translate(490,12752)"></use><use href="#none" transform="translate(490,12782)"></use><use href="#full" transform="translate(490,12812)"></use><use href="#full" transform="translate(490,12842)"></use><use href="#full" transform="translate(490,12872)"></use><use href="#full" transform="translate(490,12902)"></use><use href="#full" transform="translate(490,12932)"></use><use href="#full" transform="translate(490,12962)"></use><use href="#full" transform="translate(490,12992)"></use><use href="#full" transform="translate(490,13022)"></use><use href="#full" transform="translate(490,13052)"></use><use href="#full" transform="translate(490,13082)"></use><use href="#full" transform="translate(490,13112)"></use><use href="#full" transform="translate(490,13142)"></use><use href="#full" transform="translate(490,13172)"></use><use href="#full" transform="translate(490,13202)"></use><use href="#full" transform="translate(490,13232)"></use><use href="#full" transform="translate(490,13262)"></use><use href="#full" transform="translate(490,13292)"></use><use href="#full" transform="translate(490,13322)"></use><use href="#full" transform="translate(490,13352)"></use><use href="#full" transform="translate(490,13382)"></use><use href="#none" transform="translate(490,13412)"></use><use href="#full" transform="translate(490,13442)"></use><use href="#full" transform="translate(490,13472)"></use><use href="#full" transform="translate(490,13502)"></use><use href="#full" transform="translate(490,13532)"></use><use href="#full" transform="translate(490,13562)"></use><use href="#full" transform="translate(490,13592)"></use><use href="#full" transform="translate(490,13622)"></use><use href="#full" transform="translate(490,13652)"></use><use href="#full" transform="translate(490,13682)"></use><use href="#full" transform="translate(490,13712)"></use><use href="#full" transform="translate(490,13742)"></use><use href="#full" transform="translate(490,13772)"></use><use href="#full" transform="translate(490,13802)"></use><use href="#full" transform="translate(490,13832)"></use><use href="#none" transform="translate(490,13862)"></use><use href="#none" transform="translate(490,13892)"></use><use href="#none" transform="translate(490,13922)"></use><use href="#full" transform="translate(490,13952)"></use><use href="#full" transform="translate(490,13982)"></use><use href="#none" transform="translate(490,14012)"></use><use href="#none" transform="translate(490,14042)"></use><use href="#full" transform="translate(490,14072)"></use><use href="#full" transform="translate(490,14102)"></use><use href="#full" transform="translate(490,14132)"></use><use href="#full" transform="translate(490,14162)"></use><use href="#full" transform="translate(490,14192)"></use><use href="#none" transform="translate(490,14222)"></use><use href="#none" transform="translate(490,14252)"></use><use href="#full" transform="translate(490,14282)"></use><use href="#none" transform="translate(490,14312)"></use><use href="#none" transform="translate(490,14342)"></use><use href="#full" transform="translate(490,14372)"></use><use href="#full" transform="translate(490,14402)"></use><use href="#full" transform="translate(490,14432)"></use><use href="#none" transform="translate(490,14462)"></use><use href="#full" transform="translate(490,14492)"></use><use href="#full" transform="translate(490,14522)"></use><use href="#none" transform="translate(490,14552)"></use><use href="#none" transform="translate(490,14582)"></use><use href="#none" transform="translate(490,14612)"></use><use href="#full" transform="translate(490,14642)"></use><use href="#full" transform="translate(490,14672)"></use><use href="#full" transform="translate(490,14702)"></use><use href="#full" transform="translate(490,14732)"></use><use href="#none" transform="translate(490,14762)"></use><use href="#none" transform="translate(490,14792)"></use><use href="#full" transform="translate(490,14822)"></use><use href="#full" transform="translate(490,14852)"></use><use href="#full" transform="translate(490,14882)"></use><use href="#none" transform="translate(490,14912)"></use><use href="#full" transform="translate(490,14942)"></use><use href="#none" transform="translate(490,14972)"></use><use href="#none" transform="translate(490,15002)"></use><use href="#full" transform="translate(490,15032)"></use><use href="#full" transform="translate(490,15062)"></use><use href="#none" transform="translate(490,15092)"></use><use href="#none" transform="translate(490,15122)"></use><use href="#full" transform="translate(490,15152)"></use><use href="#full" transform="translate(490,15182)"></use><use href="#full" transform="translate(490,15212)"></use><use href="#full" transform="translate(490,15242)"></use><use href="#full" transform="translate(490,15272)"></use><use href="#full" transform="translate(490,15302)"></use><use href="#none" transform="translate(490,15332)"></use><use href="#full" transform="translate(490,15362)"></use><use href="#full" transform="translate(490,15392)"></use><use href="#full" transform="translate(490,15422)"></use><use href="#full" transform="translate(490,15452)"></use><use href="#full" transform="translate(490,15482)"></use><use href="#none" transform="translate(490,15512)"></use><use href="#full" transform="translate(490,15542)"></use><use href="#full" transform="translate(490,15572)"></use><use href="#full" transform="translate(490,15602)"></use><use href="#none" transform="translate(490,15632)"></use><use href="#full" transform="translate(490,15662)"></use><use href="#none" transform="translate(490,15692)"></use><use href="#none" transform="translate(490,15722)"></use><use href="#full" transform="translate(490,15752)"></use><use href="#none" transform="translate(490,15782)"></use><use href="#none" transform="translate(490,15812)"></use><use href="#full" transform="translate(490,15842)"></use><use href="#none" transform="translate(490,15872)"></use><use href="#full" transform="translate(490,15902)"></use><use href="#none" transform="translate(490,15932)"></use><use href="#full" transform="translate(490,15962)"></use><use href="#full" transform="translate(490,15992)"></use><use href="#full" transform="translate(490,16022)"></use><use href="#none" transform="translate(490,16052)"></use><use href="#full" transform="translate(490,16082)"></use><use href="#full" transform="translate(490,16112)"></use><use href="#full" transform="translate(490,16142)"></use><use href="#full" transform="translate(490,16172)"></use><use href="#full" transform="translate(490,16202)"></use><use href="#full" transform="translate(490,16232)"></use><use href="#full" transform="translate(490,16262)"></use><use href="#full" transform="translate(490,16292)"></use><use href="#full" transform="translate(490,16322)"></use><use href="#full" transform="translate(490,16352)"></use><use href="#full" transform="translate(490,16382)"></use><use href="#full" transform="translate(490,16412)"></use><use href="#full" transform="translate(490,16442)"></use></g><g><title>SQLite</title><path d="M600,0 l-85,85 v16380 h35 v-16380 l85,-85 z"></path><text transform="translate(541.5, 83) rotate(-45)">SQLite</text><use href="#full" transform="translate(525,92)"></use><use href="#full" transform="translate(525,122)"></use><use href="#none" transform="translate(525,152)"></use><use href="#none" transform="translate(525,182)"></use><use href="#full" transform="translate(525,212)"></use><use href="#none" transform="translate(525,242)"></use><use href="#full" transform="translate(525,272)"></use><use href="#full" transform="translate(525,302)"></use><use href="#none" transform="translate(525,332)"></use><use href="#full" transform="translate(525,362)"></use><use href="#full" transform="translate(525,392)"></use><use href="#full" transform="translate(525,422)"></use><use href="#none" transform="translate(525,452)"></use><use href="#full" transform="translate(525,482)"></use><use href="#full" transform="translate(525,512)"></use><use href="#full" transform="translate(525,542)"></use><use href="#full" transform="translate(525,572)"></use><use href="#full" transform="translate(525,602)"></use><use href="#full" transform="translate(525,632)"></use><use href="#full" transform="translate(525,662)"></use><use href="#none" transform="translate(525,692)"></use><use href="#full" transform="translate(525,722)"></use><use href="#full" transform="translate(525,752)"></use><use href="#full" transform="translate(525,782)"></use><use href="#full" transform="translate(525,812)"></use><use href="#none" transform="translate(525,842)"></use><use href="#full" transform="translate(525,872)"></use><use href="#full" transform="translate(525,902)"></use><use href="#full" transform="translate(525,932)"></use><use href="#full" transform="translate(525,962)"></use><use href="#full" transform="translate(525,992)"></use><use href="#full" transform="translate(525,1022)"></use><use href="#full" transform="translate(525,1052)"></use><use href="#full" transform="translate(525,1082)"></use><use href="#full" transform="translate(525,1112)"></use><use href="#full" transform="translate(525,1142)"></use><use href="#full" transform="translate(525,1172)"></use><use href="#full" transform="translate(525,1202)"></use><use href="#full" transform="translate(525,1232)"></use><use href="#none" transform="translate(525,1262)"></use><use href="#partially" transform="translate(525,1292)"></use><text x="541" y="1311"><title>Not as expression</title>a</text><use href="#full" transform="translate(525,1322)"></use><use href="#full" transform="translate(525,1352)"></use><use href="#full" transform="translate(525,1382)"></use><use href="#full" transform="translate(525,1412)"></use><use href="#none" transform="translate(525,1442)"></use><use href="#full" transform="translate(525,1472)"></use><use href="#full" transform="translate(525,1502)"></use><use href="#full" transform="translate(525,1532)"></use><use href="#full" transform="translate(525,1562)"></use><use href="#full" transform="translate(525,1592)"></use><use href="#none" transform="translate(525,1622)"></use><use href="#full" transform="translate(525,1652)"></use><use href="#full" transform="translate(525,1682)"></use><use href="#full" transform="translate(525,1712)"></use><use href="#none" transform="translate(525,1742)"></use><use href="#full" transform="translate(525,1772)"></use><use href="#full" transform="translate(525,1802)"></use><use href="#full" transform="translate(525,1832)"></use><use href="#full" transform="translate(525,1862)"></use><use href="#full" transform="translate(525,1892)"></use><use href="#full" transform="translate(525,1922)"></use><use href="#full" transform="translate(525,1952)"></use><use href="#none" transform="translate(525,1982)"></use><use href="#full" transform="translate(525,2012)"></use><use href="#full" transform="translate(525,2042)"></use><use href="#full" transform="translate(525,2072)"></use><use href="#full" transform="translate(525,2102)"></use><use href="#full" transform="translate(525,2132)"></use><use href="#full" transform="translate(525,2162)"></use><use href="#full" transform="translate(525,2192)"></use><use href="#none" transform="translate(525,2222)"></use><use href="#partially" transform="translate(525,2252)"></use><text x="541" y="2271"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,2282)"></use><use href="#full" transform="translate(525,2312)"></use><use href="#full" transform="translate(525,2342)"></use><use href="#full" transform="translate(525,2372)"></use><use href="#full" transform="translate(525,2402)"></use><use href="#full" transform="translate(525,2432)"></use><use href="#full" transform="translate(525,2462)"></use><use href="#full" transform="translate(525,2492)"></use><use href="#full" transform="translate(525,2522)"></use><use href="#full" transform="translate(525,2552)"></use><use href="#full" transform="translate(525,2582)"></use><use href="#full" transform="translate(525,2612)"></use><use href="#full" transform="translate(525,2642)"></use><use href="#full" transform="translate(525,2672)"></use><use href="#full" transform="translate(525,2702)"></use><use href="#full" transform="translate(525,2732)"></use><use href="#full" transform="translate(525,2762)"></use><use href="#full" transform="translate(525,2792)"></use><use href="#full" transform="translate(525,2822)"></use><use href="#full" transform="translate(525,2852)"></use><use href="#full" transform="translate(525,2882)"></use><use href="#full" transform="translate(525,2912)"></use><use href="#full" transform="translate(525,2942)"></use><use href="#full" transform="translate(525,2972)"></use><use href="#full" transform="translate(525,3002)"></use><use href="#full" transform="translate(525,3032)"></use><use href="#none" transform="translate(525,3062)"></use><use href="#none" transform="translate(525,3092)"></use><use href="#full" transform="translate(525,3122)"></use><use href="#full" transform="translate(525,3152)"></use><use href="#full" transform="translate(525,3182)"></use><use href="#full" transform="translate(525,3212)"></use><use href="#none" transform="translate(525,3242)"></use><use href="#full" transform="translate(525,3272)"></use><use href="#full" transform="translate(525,3302)"></use><use href="#full" transform="translate(525,3332)"></use><use href="#full" transform="translate(525,3362)"></use><use href="#full" transform="translate(525,3392)"></use><use href="#full" transform="translate(525,3422)"></use><use href="#full" transform="translate(525,3452)"></use><use href="#none" transform="translate(525,3482)"></use><use href="#full" transform="translate(525,3512)"></use><use href="#full" transform="translate(525,3542)"></use><use href="#full" transform="translate(525,3572)"></use><use href="#full" transform="translate(525,3602)"></use><use href="#full" transform="translate(525,3632)"></use><use href="#none" transform="translate(525,3662)"></use><use href="#full" transform="translate(525,3692)"></use><use href="#full" transform="translate(525,3722)"></use><use href="#none" transform="translate(525,3752)"></use><use href="#full" transform="translate(525,3782)"></use><use href="#full" transform="translate(525,3812)"></use><use href="#full" transform="translate(525,3842)"></use><use href="#full" transform="translate(525,3872)"></use><use href="#none" transform="translate(525,3902)"></use><use href="#full" transform="translate(525,3932)"></use><use href="#full" transform="translate(525,3962)"></use><use href="#none" transform="translate(525,3992)"></use><use href="#full" transform="translate(525,4022)"></use><use href="#none" transform="translate(525,4052)"></use><use href="#full" transform="translate(525,4082)"></use><use href="#full" transform="translate(525,4112)"></use><use href="#full" transform="translate(525,4142)"></use><use href="#full" transform="translate(525,4172)"></use><use href="#full" transform="translate(525,4202)"></use><use href="#none" transform="translate(525,4232)"></use><use href="#full" transform="translate(525,4262)"></use><use href="#full" transform="translate(525,4292)"></use><use href="#full" transform="translate(525,4322)"></use><use href="#full" transform="translate(525,4352)"></use><use href="#full" transform="translate(525,4382)"></use><use href="#full" transform="translate(525,4412)"></use><use href="#full" transform="translate(525,4442)"></use><use href="#full" transform="translate(525,4472)"></use><use href="#full" transform="translate(525,4502)"></use><use href="#full" transform="translate(525,4532)"></use><use href="#full" transform="translate(525,4562)"></use><use href="#full" transform="translate(525,4592)"></use><use href="#full" transform="translate(525,4622)"></use><use href="#full" transform="translate(525,4652)"></use><use href="#full" transform="translate(525,4682)"></use><use href="#full" transform="translate(525,4712)"></use><use href="#full" transform="translate(525,4742)"></use><use href="#none" transform="translate(525,4772)"></use><use href="#full" transform="translate(525,4802)"></use><use href="#full" transform="translate(525,4832)"></use><use href="#full" transform="translate(525,4862)"></use><use href="#full" transform="translate(525,4892)"></use><use href="#none" transform="translate(525,4922)"></use><use href="#partially" transform="translate(525,4952)"></use><text x="541" y="4971"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,4982)"></use><use href="#full" transform="translate(525,5012)"></use><use href="#full" transform="translate(525,5042)"></use><use href="#full" transform="translate(525,5072)"></use><use href="#partially" transform="translate(525,5102)"></use><text x="541" y="5121"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,5132)"></use><use href="#full" transform="translate(525,5162)"></use><use href="#full" transform="translate(525,5192)"></use><use href="#full" transform="translate(525,5222)"></use><use href="#none" transform="translate(525,5252)"></use><use href="#full" transform="translate(525,5282)"></use><use href="#full" transform="translate(525,5312)"></use><use href="#full" transform="translate(525,5342)"></use><use href="#none" transform="translate(525,5372)"></use><use href="#full" transform="translate(525,5402)"></use><use href="#full" transform="translate(525,5432)"></use><use href="#full" transform="translate(525,5462)"></use><use href="#full" transform="translate(525,5492)"></use><use href="#full" transform="translate(525,5522)"></use><use href="#full" transform="translate(525,5552)"></use><use href="#full" transform="translate(525,5582)"></use><use href="#full" transform="translate(525,5612)"></use><use href="#full" transform="translate(525,5642)"></use><use href="#full" transform="translate(525,5672)"></use><use href="#full" transform="translate(525,5702)"></use><use href="#partially" transform="translate(525,5732)"></use><text x="541" y="5751"><title>Not as table name</title>c</text><use href="#full" transform="translate(525,5762)"></use><use href="#full" transform="translate(525,5792)"></use><use href="#full" transform="translate(525,5822)"></use><use href="#none" transform="translate(525,5852)"></use><use href="#full" transform="translate(525,5882)"></use><use href="#none" transform="translate(525,5912)"></use><use href="#partially" transform="translate(525,5942)"></use><text x="541" y="5961"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,5972)"></use><use href="#full" transform="translate(525,6002)"></use><use href="#full" transform="translate(525,6032)"></use><use href="#full" transform="translate(525,6062)"></use><use href="#partially" transform="translate(525,6092)"></use><text x="541" y="6111"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,6122)"></use><use href="#full" transform="translate(525,6152)"></use><use href="#full" transform="translate(525,6182)"></use><use href="#none" transform="translate(525,6212)"></use><use href="#full" transform="translate(525,6242)"></use><use href="#full" transform="translate(525,6272)"></use><use href="#full" transform="translate(525,6302)"></use><use href="#full" transform="translate(525,6332)"></use><use href="#full" transform="translate(525,6362)"></use><use href="#full" transform="translate(525,6392)"></use><use href="#full" transform="translate(525,6422)"></use><use href="#none" transform="translate(525,6452)"></use><use href="#full" transform="translate(525,6482)"></use><use href="#none" transform="translate(525,6512)"></use><use href="#full" transform="translate(525,6542)"></use><use href="#full" transform="translate(525,6572)"></use><use href="#full" transform="translate(525,6602)"></use><use href="#none" transform="translate(525,6632)"></use><use href="#none" transform="translate(525,6662)"></use><use href="#full" transform="translate(525,6692)"></use><use href="#full" transform="translate(525,6722)"></use><use href="#none" transform="translate(525,6752)"></use><use href="#full" transform="translate(525,6782)"></use><use href="#full" transform="translate(525,6812)"></use><use href="#full" transform="translate(525,6842)"></use><use href="#full" transform="translate(525,6872)"></use><use href="#full" transform="translate(525,6902)"></use><use href="#full" transform="translate(525,6932)"></use><use href="#full" transform="translate(525,6962)"></use><use href="#full" transform="translate(525,6992)"></use><use href="#full" transform="translate(525,7022)"></use><use href="#full" transform="translate(525,7052)"></use><use href="#full" transform="translate(525,7082)"></use><use href="#full" transform="translate(525,7112)"></use><use href="#full" transform="translate(525,7142)"></use><use href="#full" transform="translate(525,7172)"></use><use href="#partially" transform="translate(525,7202)"></use><text x="541" y="7221"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,7232)"></use><use href="#partially" transform="translate(525,7262)"></use><text x="541" y="7281"><title>Not for column renaming without AS clause</title>b</text><use href="#none" transform="translate(525,7292)"></use><use href="#full" transform="translate(525,7322)"></use><use href="#full" transform="translate(525,7352)"></use><use href="#full" transform="translate(525,7382)"></use><use href="#full" transform="translate(525,7412)"></use><use href="#full" transform="translate(525,7442)"></use><use href="#full" transform="translate(525,7472)"></use><use href="#full" transform="translate(525,7502)"></use><use href="#full" transform="translate(525,7532)"></use><use href="#full" transform="translate(525,7562)"></use><use href="#full" transform="translate(525,7592)"></use><use href="#full" transform="translate(525,7622)"></use><use href="#full" transform="translate(525,7652)"></use><use href="#full" transform="translate(525,7682)"></use><use href="#full" transform="translate(525,7712)"></use><use href="#full" transform="translate(525,7742)"></use><use href="#full" transform="translate(525,7772)"></use><use href="#partially" transform="translate(525,7802)"></use><text x="541" y="7821"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,7832)"></use><use href="#full" transform="translate(525,7862)"></use><use href="#full" transform="translate(525,7892)"></use><use href="#full" transform="translate(525,7922)"></use><use href="#full" transform="translate(525,7952)"></use><use href="#full" transform="translate(525,7982)"></use><use href="#full" transform="translate(525,8012)"></use><use href="#full" transform="translate(525,8042)"></use><use href="#full" transform="translate(525,8072)"></use><use href="#full" transform="translate(525,8102)"></use><use href="#full" transform="translate(525,8132)"></use><use href="#full" transform="translate(525,8162)"></use><use href="#full" transform="translate(525,8192)"></use><use href="#full" transform="translate(525,8222)"></use><use href="#full" transform="translate(525,8252)"></use><use href="#full" transform="translate(525,8282)"></use><use href="#full" transform="translate(525,8312)"></use><use href="#full" transform="translate(525,8342)"></use><use href="#full" transform="translate(525,8372)"></use><use href="#full" transform="translate(525,8402)"></use><use href="#full" transform="translate(525,8432)"></use><use href="#full" transform="translate(525,8462)"></use><use href="#full" transform="translate(525,8492)"></use><use href="#full" transform="translate(525,8522)"></use><use href="#full" transform="translate(525,8552)"></use><use href="#partially" transform="translate(525,8582)"></use><text x="541" y="8601"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,8612)"></use><use href="#full" transform="translate(525,8642)"></use><use href="#full" transform="translate(525,8672)"></use><use href="#full" transform="translate(525,8702)"></use><use href="#full" transform="translate(525,8732)"></use><use href="#full" transform="translate(525,8762)"></use><use href="#full" transform="translate(525,8792)"></use><use href="#full" transform="translate(525,8822)"></use><use href="#full" transform="translate(525,8852)"></use><use href="#none" transform="translate(525,8882)"></use><use href="#none" transform="translate(525,8912)"></use><use href="#none" transform="translate(525,8942)"></use><use href="#full" transform="translate(525,8972)"></use><use href="#full" transform="translate(525,9002)"></use><use href="#full" transform="translate(525,9032)"></use><use href="#full" transform="translate(525,9062)"></use><use href="#none" transform="translate(525,9092)"></use><use href="#full" transform="translate(525,9122)"></use><use href="#full" transform="translate(525,9152)"></use><use href="#full" transform="translate(525,9182)"></use><use href="#full" transform="translate(525,9212)"></use><use href="#full" transform="translate(525,9242)"></use><use href="#full" transform="translate(525,9272)"></use><use href="#full" transform="translate(525,9302)"></use><use href="#full" transform="translate(525,9332)"></use><use href="#full" transform="translate(525,9362)"></use><use href="#full" transform="translate(525,9392)"></use><use href="#none" transform="translate(525,9422)"></use><use href="#full" transform="translate(525,9452)"></use><use href="#full" transform="translate(525,9482)"></use><use href="#full" transform="translate(525,9512)"></use><use href="#full" transform="translate(525,9542)"></use><use href="#full" transform="translate(525,9572)"></use><use href="#full" transform="translate(525,9602)"></use><use href="#full" transform="translate(525,9632)"></use><use href="#full" transform="translate(525,9662)"></use><use href="#full" transform="translate(525,9692)"></use><use href="#full" transform="translate(525,9722)"></use><use href="#full" transform="translate(525,9752)"></use><use href="#none" transform="translate(525,9782)"></use><use href="#none" transform="translate(525,9812)"></use><use href="#full" transform="translate(525,9842)"></use><use href="#partially" transform="translate(525,9872)"></use><text x="541" y="9891"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,9902)"></use><use href="#full" transform="translate(525,9932)"></use><use href="#full" transform="translate(525,9962)"></use><use href="#full" transform="translate(525,9992)"></use><use href="#full" transform="translate(525,10022)"></use><use href="#full" transform="translate(525,10052)"></use><use href="#full" transform="translate(525,10082)"></use><use href="#full" transform="translate(525,10112)"></use><use href="#full" transform="translate(525,10142)"></use><use href="#full" transform="translate(525,10172)"></use><use href="#full" transform="translate(525,10202)"></use><use href="#full" transform="translate(525,10232)"></use><use href="#full" transform="translate(525,10262)"></use><use href="#full" transform="translate(525,10292)"></use><use href="#full" transform="translate(525,10322)"></use><use href="#full" transform="translate(525,10352)"></use><use href="#full" transform="translate(525,10382)"></use><use href="#full" transform="translate(525,10412)"></use><use href="#full" transform="translate(525,10442)"></use><use href="#full" transform="translate(525,10472)"></use><use href="#full" transform="translate(525,10502)"></use><use href="#none" transform="translate(525,10532)"></use><use href="#full" transform="translate(525,10562)"></use><use href="#full" transform="translate(525,10592)"></use><use href="#full" transform="translate(525,10622)"></use><use href="#full" transform="translate(525,10652)"></use><use href="#full" transform="translate(525,10682)"></use><use href="#full" transform="translate(525,10712)"></use><use href="#full" transform="translate(525,10742)"></use><use href="#partially" transform="translate(525,10772)"></use><text x="541" y="10791"><title>Not as expression</title>a</text><use href="#full" transform="translate(525,10802)"></use><use href="#full" transform="translate(525,10832)"></use><use href="#full" transform="translate(525,10862)"></use><use href="#full" transform="translate(525,10892)"></use><use href="#full" transform="translate(525,10922)"></use><use href="#full" transform="translate(525,10952)"></use><use href="#full" transform="translate(525,10982)"></use><use href="#full" transform="translate(525,11012)"></use><use href="#full" transform="translate(525,11042)"></use><use href="#full" transform="translate(525,11072)"></use><use href="#full" transform="translate(525,11102)"></use><use href="#none" transform="translate(525,11132)"></use><use href="#partially" transform="translate(525,11162)"></use><text x="541" y="11181"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,11192)"></use><use href="#full" transform="translate(525,11222)"></use><use href="#full" transform="translate(525,11252)"></use><use href="#full" transform="translate(525,11282)"></use><use href="#full" transform="translate(525,11312)"></use><use href="#full" transform="translate(525,11342)"></use><use href="#full" transform="translate(525,11372)"></use><use href="#full" transform="translate(525,11402)"></use><use href="#full" transform="translate(525,11432)"></use><use href="#full" transform="translate(525,11462)"></use><use href="#full" transform="translate(525,11492)"></use><use href="#full" transform="translate(525,11522)"></use><use href="#full" transform="translate(525,11552)"></use><use href="#none" transform="translate(525,11582)"></use><use href="#full" transform="translate(525,11612)"></use><use href="#full" transform="translate(525,11642)"></use><use href="#partially" transform="translate(525,11672)"></use><text x="541" y="11691"><title>Not for column renaming without AS clause</title>b</text><use href="#full" transform="translate(525,11702)"></use><use href="#full" transform="translate(525,11732)"></use><use href="#full" transform="translate(525,11762)"></use><use href="#full" transform="translate(525,11792)"></use><use href="#full" transform="translate(525,11822)"></use><use href="#full" transform="translate(525,11852)"></use><use href="#full" transform="translate(525,11882)"></use><use href="#full" transform="translate(525,11912)"></use><use href="#full" transform="translate(525,11942)"></use><use href="#full" transform="translate(525,11972)"></use><use href="#full" transform="translate(525,12002)"></use><use href="#full" transform="translate(525,12032)"></use><use href="#full" transform="translate(525,12062)"></use><use href="#full" transform="translate(525,12092)"></use><use href="#full" transform="translate(525,12122)"></use><use href="#full" transform="translate(525,12152)"></use><use href="#full" transform="translate(525,12182)"></use><use href="#full" transform="translate(525,12212)"></use><use href="#full" transform="translate(525,12242)"></use><use href="#none" transform="translate(525,12272)"></use><use href="#full" transform="translate(525,12302)"></use><use href="#full" transform="translate(525,12332)"></use><use href="#full" transform="translate(525,12362)"></use><use href="#full" transform="translate(525,12392)"></use><use href="#full" transform="translate(525,12422)"></use><use href="#full" transform="translate(525,12452)"></use><use href="#full" transform="translate(525,12482)"></use><use href="#none" transform="translate(525,12512)"></use><use href="#full" transform="translate(525,12542)"></use><use href="#full" transform="translate(525,12572)"></use><use href="#full" transform="translate(525,12602)"></use><use href="#full" transform="translate(525,12632)"></use><use href="#full" transform="translate(525,12662)"></use><use href="#full" transform="translate(525,12692)"></use><use href="#full" transform="translate(525,12722)"></use><use href="#full" transform="translate(525,12752)"></use><use href="#full" transform="translate(525,12782)"></use><use href="#full" transform="translate(525,12812)"></use><use href="#full" transform="translate(525,12842)"></use><use href="#full" transform="translate(525,12872)"></use><use href="#full" transform="translate(525,12902)"></use><use href="#full" transform="translate(525,12932)"></use><use href="#full" transform="translate(525,12962)"></use><use href="#full" transform="translate(525,12992)"></use><use href="#full" transform="translate(525,13022)"></use><use href="#full" transform="translate(525,13052)"></use><use href="#full" transform="translate(525,13082)"></use><use href="#full" transform="translate(525,13112)"></use><use href="#full" transform="translate(525,13142)"></use><use href="#full" transform="translate(525,13172)"></use><use href="#full" transform="translate(525,13202)"></use><use href="#full" transform="translate(525,13232)"></use><use href="#full" transform="translate(525,13262)"></use><use href="#full" transform="translate(525,13292)"></use><use href="#full" transform="translate(525,13322)"></use><use href="#full" transform="translate(525,13352)"></use><use href="#full" transform="translate(525,13382)"></use><use href="#full" transform="translate(525,13412)"></use><use href="#full" transform="translate(525,13442)"></use><use href="#full" transform="translate(525,13472)"></use><use href="#full" transform="translate(525,13502)"></use><use href="#full" transform="translate(525,13532)"></use><use href="#full" transform="translate(525,13562)"></use><use href="#full" transform="translate(525,13592)"></use><use href="#full" transform="translate(525,13622)"></use><use href="#full" transform="translate(525,13652)"></use><use href="#full" transform="translate(525,13682)"></use><use href="#full" transform="translate(525,13712)"></use><use href="#full" transform="translate(525,13742)"></use><use href="#full" transform="translate(525,13772)"></use><use href="#full" transform="translate(525,13802)"></use><use href="#full" transform="translate(525,13832)"></use><use href="#full" transform="translate(525,13862)"></use><use href="#none" transform="translate(525,13892)"></use><use href="#full" transform="translate(525,13922)"></use><use href="#full" transform="translate(525,13952)"></use><use href="#full" transform="translate(525,13982)"></use><use href="#full" transform="translate(525,14012)"></use><use href="#none" transform="translate(525,14042)"></use><use href="#full" transform="translate(525,14072)"></use><use href="#full" transform="translate(525,14102)"></use><use href="#full" transform="translate(525,14132)"></use><use href="#full" transform="translate(525,14162)"></use><use href="#full" transform="translate(525,14192)"></use><use href="#none" transform="translate(525,14222)"></use><use href="#full" transform="translate(525,14252)"></use><use href="#full" transform="translate(525,14282)"></use><use href="#full" transform="translate(525,14312)"></use><use href="#none" transform="translate(525,14342)"></use><use href="#full" transform="translate(525,14372)"></use><use href="#full" transform="translate(525,14402)"></use><use href="#full" transform="translate(525,14432)"></use><use href="#full" transform="translate(525,14462)"></use><use href="#full" transform="translate(525,14492)"></use><use href="#full" transform="translate(525,14522)"></use><use href="#full" transform="translate(525,14552)"></use><use href="#full" transform="translate(525,14582)"></use><use href="#full" transform="translate(525,14612)"></use><use href="#full" transform="translate(525,14642)"></use><use href="#full" transform="translate(525,14672)"></use><use href="#full" transform="translate(525,14702)"></use><use href="#full" transform="translate(525,14732)"></use><use href="#none" transform="translate(525,14762)"></use><use href="#none" transform="translate(525,14792)"></use><use href="#full" transform="translate(525,14822)"></use><use href="#full" transform="translate(525,14852)"></use><use href="#full" transform="translate(525,14882)"></use><use href="#full" transform="translate(525,14912)"></use><use href="#full" transform="translate(525,14942)"></use><use href="#none" transform="translate(525,14972)"></use><use href="#full" transform="translate(525,15002)"></use><use href="#full" transform="translate(525,15032)"></use><use href="#full" transform="translate(525,15062)"></use><use href="#full" transform="translate(525,15092)"></use><use href="#full" transform="translate(525,15122)"></use><use href="#none" transform="translate(525,15152)"></use><use href="#full" transform="translate(525,15182)"></use><use href="#full" transform="translate(525,15212)"></use><use href="#full" transform="translate(525,15242)"></use><use href="#full" transform="translate(525,15272)"></use><use href="#full" transform="translate(525,15302)"></use><use href="#none" transform="translate(525,15332)"></use><use href="#full" transform="translate(525,15362)"></use><use href="#full" transform="translate(525,15392)"></use><use href="#full" transform="translate(525,15422)"></use><use href="#full" transform="translate(525,15452)"></use><use href="#full" transform="translate(525,15482)"></use><use href="#full" transform="translate(525,15512)"></use><use href="#full" transform="translate(525,15542)"></use><use href="#full" transform="translate(525,15572)"></use><use href="#full" transform="translate(525,15602)"></use><use href="#full" transform="translate(525,15632)"></use><use href="#full" transform="translate(525,15662)"></use><use href="#full" transform="translate(525,15692)"></use><use href="#none" transform="translate(525,15722)"></use><use href="#full" transform="translate(525,15752)"></use><use href="#none" transform="translate(525,15782)"></use><use href="#full" transform="translate(525,15812)"></use><use href="#full" transform="translate(525,15842)"></use><use href="#full" transform="translate(525,15872)"></use><use href="#full" transform="translate(525,15902)"></use><use href="#none" transform="translate(525,15932)"></use><use href="#full" transform="translate(525,15962)"></use><use href="#full" transform="translate(525,15992)"></use><use href="#full" transform="translate(525,16022)"></use><use href="#full" transform="translate(525,16052)"></use><use href="#full" transform="translate(525,16082)"></use><use href="#full" transform="translate(525,16112)"></use><use href="#full" transform="translate(525,16142)"></use><use href="#full" transform="translate(525,16172)"></use><use href="#full" transform="translate(525,16202)"></use><use href="#full" transform="translate(525,16232)"></use><use href="#full" transform="translate(525,16262)"></use><use href="#full" transform="translate(525,16292)"></use><use href="#full" transform="translate(525,16322)"></use><use href="#full" transform="translate(525,16352)"></use><use href="#full" transform="translate(525,16382)"></use><use href="#full" transform="translate(525,16412)"></use><use href="#full" transform="translate(525,16442)"></use></g><path d="M0,85 l550,0 M0,115 h550M0,145 h550M0,175 h550M0,205 h550M0,235 h550M0,265 h550M0,295 h550M0,325 h550M0,355 h550M0,385 h550M0,415 h550M0,445 h550M0,475 h550M0,505 h550M0,535 h550M0,565 h550M0,595 h550M0,625 h550M0,655 h550M0,685 h550M0,715 h550M0,745 h550M0,775 h550M0,805 h550M0,835 h550M0,865 h550M0,895 h550M0,925 h550M0,955 h550M0,985 h550M0,1015 h550M0,1045 h550M0,1075 h550M0,1105 h550M0,1135 h550M0,1165 h550M0,1195 h550M0,1225 h550M0,1255 h550M0,1285 h550M0,1315 h550M0,1345 h550M0,1375 h550M0,1405 h550M0,1435 h550M0,1465 h550M0,1495 h550M0,1525 h550M0,1555 h550M0,1585 h550M0,1615 h550M0,1645 h550M0,1675 h550M0,1705 h550M0,1735 h550M0,1765 h550M0,1795 h550M0,1825 h550M0,1855 h550M0,1885 h550M0,1915 h550M0,1945 h550M0,1975 h550M0,2005 h550M0,2035 h550M0,2065 h550M0,2095 h550M0,2125 h550M0,2155 h550M0,2185 h550M0,2215 h550M0,2245 h550M0,2275 h550M0,2305 h550M0,2335 h550M0,2365 h550M0,2395 h550M0,2425 h550M0,2455 h550M0,2485 h550M0,2515 h550M0,2545 h550M0,2575 h550M0,2605 h550M0,2635 h550M0,2665 h550M0,2695 h550M0,2725 h550M0,2755 h550M0,2785 h550M0,2815 h550M0,2845 h550M0,2875 h550M0,2905 h550M0,2935 h550M0,2965 h550M0,2995 h550M0,3025 h550M0,3055 h550M0,3085 h550M0,3115 h550M0,3145 h550M0,3175 h550M0,3205 h550M0,3235 h550M0,3265 h550M0,3295 h550M0,3325 h550M0,3355 h550M0,3385 h550M0,3415 h550M0,3445 h550M0,3475 h550M0,3505 h550M0,3535 h550M0,3565 h550M0,3595 h550M0,3625 h550M0,3655 h550M0,3685 h550M0,3715 h550M0,3745 h550M0,3775 h550M0,3805 h550M0,3835 h550M0,3865 h550M0,3895 h550M0,3925 h550M0,3955 h550M0,3985 h550M0,4015 h550M0,4045 h550M0,4075 h550M0,4105 h550M0,4135 h550M0,4165 h550M0,4195 h550M0,4225 h550M0,4255 h550M0,4285 h550M0,4315 h550M0,4345 h550M0,4375 h550M0,4405 h550M0,4435 h550M0,4465 h550M0,4495 h550M0,4525 h550M0,4555 h550M0,4585 h550M0,4615 h550M0,4645 h550M0,4675 h550M0,4705 h550M0,4735 h550M0,4765 h550M0,4795 h550M0,4825 h550M0,4855 h550M0,4885 h550M0,4915 h550M0,4945 h550M0,4975 h550M0,5005 h550M0,5035 h550M0,5065 h550M0,5095 h550M0,5125 h550M0,5155 h550M0,5185 h550M0,5215 h550M0,5245 h550M0,5275 h550M0,5305 h550M0,5335 h550M0,5365 h550M0,5395 h550M0,5425 h550M0,5455 h550M0,5485 h550M0,5515 h550M0,5545 h550M0,5575 h550M0,5605 h550M0,5635 h550M0,5665 h550M0,5695 h550M0,5725 h550M0,5755 h550M0,5785 h550M0,5815 h550M0,5845 h550M0,5875 h550M0,5905 h550M0,5935 h550M0,5965 h550M0,5995 h550M0,6025 h550M0,6055 h550M0,6085 h550M0,6115 h550M0,6145 h550M0,6175 h550M0,6205 h550M0,6235 h550M0,6265 h550M0,6295 h550M0,6325 h550M0,6355 h550M0,6385 h550M0,6415 h550M0,6445 h550M0,6475 h550M0,6505 h550M0,6535 h550M0,6565 h550M0,6595 h550M0,6625 h550M0,6655 h550M0,6685 h550M0,6715 h550M0,6745 h550M0,6775 h550M0,6805 h550M0,6835 h550M0,6865 h550M0,6895 h550M0,6925 h550M0,6955 h550M0,6985 h550M0,7015 h550M0,7045 h550M0,7075 h550M0,7105 h550M0,7135 h550M0,7165 h550M0,7195 h550M0,7225 h550M0,7255 h550M0,7285 h550M0,7315 h550M0,7345 h550M0,7375 h550M0,7405 h550M0,7435 h550M0,7465 h550M0,7495 h550M0,7525 h550M0,7555 h550M0,7585 h550M0,7615 h550M0,7645 h550M0,7675 h550M0,7705 h550M0,7735 h550M0,7765 h550M0,7795 h550M0,7825 h550M0,7855 h550M0,7885 h550M0,7915 h550M0,7945 h550M0,7975 h550M0,8005 h550M0,8035 h550M0,8065 h550M0,8095 h550M0,8125 h550M0,8155 h550M0,8185 h550M0,8215 h550M0,8245 h550M0,8275 h550M0,8305 h550M0,8335 h550M0,8365 h550M0,8395 h550M0,8425 h550M0,8455 h550M0,8485 h550M0,8515 h550M0,8545 h550M0,8575 h550M0,8605 h550M0,8635 h550M0,8665 h550M0,8695 h550M0,8725 h550M0,8755 h550M0,8785 h550M0,8815 h550M0,8845 h550M0,8875 h550M0,8905 h550M0,8935 h550M0,8965 h550M0,8995 h550M0,9025 h550M0,9055 h550M0,9085 h550M0,9115 h550M0,9145 h550M0,9175 h550M0,9205 h550M0,9235 h550M0,9265 h550M0,9295 h550M0,9325 h550M0,9355 h550M0,9385 h550M0,9415 h550M0,9445 h550M0,9475 h550M0,9505 h550M0,9535 h550M0,9565 h550M0,9595 h550M0,9625 h550M0,9655 h550M0,9685 h550M0,9715 h550M0,9745 h550M0,9775 h550M0,9805 h550M0,9835 h550M0,9865 h550M0,9895 h550M0,9925 h550M0,9955 h550M0,9985 h550M0,10015 h550M0,10045 h550M0,10075 h550M0,10105 h550M0,10135 h550M0,10165 h550M0,10195 h550M0,10225 h550M0,10255 h550M0,10285 h550M0,10315 h550M0,10345 h550M0,10375 h550M0,10405 h550M0,10435 h550M0,10465 h550M0,10495 h550M0,10525 h550M0,10555 h550M0,10585 h550M0,10615 h550M0,10645 h550M0,10675 h550M0,10705 h550M0,10735 h550M0,10765 h550M0,10795 h550M0,10825 h550M0,10855 h550M0,10885 h550M0,10915 h550M0,10945 h550M0,10975 h550M0,11005 h550M0,11035 h550M0,11065 h550M0,11095 h550M0,11125 h550M0,11155 h550M0,11185 h550M0,11215 h550M0,11245 h550M0,11275 h550M0,11305 h550M0,11335 h550M0,11365 h550M0,11395 h550M0,11425 h550M0,11455 h550M0,11485 h550M0,11515 h550M0,11545 h550M0,11575 h550M0,11605 h550M0,11635 h550M0,11665 h550M0,11695 h550M0,11725 h550M0,11755 h550M0,11785 h550M0,11815 h550M0,11845 h550M0,11875 h550M0,11905 h550M0,11935 h550M0,11965 h550M0,11995 h550M0,12025 h550M0,12055 h550M0,12085 h550M0,12115 h550M0,12145 h550M0,12175 h550M0,12205 h550M0,12235 h550M0,12265 h550M0,12295 h550M0,12325 h550M0,12355 h550M0,12385 h550M0,12415 h550M0,12445 h550M0,12475 h550M0,12505 h550M0,12535 h550M0,12565 h550M0,12595 h550M0,12625 h550M0,12655 h550M0,12685 h550M0,12715 h550M0,12745 h550M0,12775 h550M0,12805 h550M0,12835 h550M0,12865 h550M0,12895 h550M0,12925 h550M0,12955 h550M0,12985 h550M0,13015 h550M0,13045 h550M0,13075 h550M0,13105 h550M0,13135 h550M0,13165 h550M0,13195 h550M0,13225 h550M0,13255 h550M0,13285 h550M0,13315 h550M0,13345 h550M0,13375 h550M0,13405 h550M0,13435 h550M0,13465 h550M0,13495 h550M0,13525 h550M0,13555 h550M0,13585 h550M0,13615 h550M0,13645 h550M0,13675 h550M0,13705 h550M0,13735 h550M0,13765 h550M0,13795 h550M0,13825 h550M0,13855 h550M0,13885 h550M0,13915 h550M0,13945 h550M0,13975 h550M0,14005 h550M0,14035 h550M0,14065 h550M0,14095 h550M0,14125 h550M0,14155 h550M0,14185 h550M0,14215 h550M0,14245 h550M0,14275 h550M0,14305 h550M0,14335 h550M0,14365 h550M0,14395 h550M0,14425 h550M0,14455 h550M0,14485 h550M0,14515 h550M0,14545 h550M0,14575 h550M0,14605 h550M0,14635 h550M0,14665 h550M0,14695 h550M0,14725 h550M0,14755 h550M0,14785 h550M0,14815 h550M0,14845 h550M0,14875 h550M0,14905 h550M0,14935 h550M0,14965 h550M0,14995 h550M0,15025 h550M0,15055 h550M0,15085 h550M0,15115 h550M0,15145 h550M0,15175 h550M0,15205 h550M0,15235 h550M0,15265 h550M0,15295 h550M0,15325 h550M0,15355 h550M0,15385 h550M0,15415 h550M0,15445 h550M0,15475 h550M0,15505 h550M0,15535 h550M0,15565 h550M0,15595 h550M0,15625 h550M0,15655 h550M0,15685 h550M0,15715 h550M0,15745 h550M0,15775 h550M0,15805 h550M0,15835 h550M0,15865 h550M0,15895 h550M0,15925 h550M0,15955 h550M0,15985 h550M0,16015 h550M0,16045 h550M0,16075 h550M0,16105 h550M0,16135 h550M0,16165 h550M0,16195 h550M0,16225 h550M0,16255 h550M0,16285 h550M0,16315 h550M0,16345 h550M0,16375 h550M0,16405 h550M0,16435 h550M0,16465 h550 M285,0 l-85,85 v16380 m35,0 v-16380 l85,-85 m35,0 l-85,85 v16380 m35,0 v-16380 l85,-85 m35,0 l-85,85 v16380 m35,0 v-16380 l85,-85 m35,0 l-85,85 v16380 m35,0 v-16380 l85,-85 m35,0 l-85,85 v16380 m35,0 v-16380 l85,-85 m35,0 l-85,85 v16380"></path><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ACCESS.html"><text x="195" y="106"><tspan>ACCESS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ACCESSIBLE.html"><text x="195" y="136"><tspan>ACCESSIBLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ADD.html"><text x="195" y="166"><tspan>ADD</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ALL.html"><text x="195" y="196"><tspan>ALL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ALLOCATE.html"><text x="195" y="226"><tspan>ALLOCATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ALTER.html"><text x="195" y="256"><tspan>ALTER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ANALYSE.html"><text x="195" y="286"><tspan>ANALYSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ANALYZE.html"><text x="195" y="316"><tspan>ANALYZE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AND.html"><text x="195" y="346"><tspan>AND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ANY.html"><text x="195" y="376"><tspan>ANY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ARE.html"><text x="195" y="406"><tspan>ARE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ARRAY.html"><text x="195" y="436"><tspan>ARRAY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AS.html"><text x="195" y="466"><tspan>AS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ASC.html"><text x="195" y="496"><tspan>ASC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ASENSITIVE.html"><text x="195" y="526"><tspan>ASENSITIVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ASSERTION.html"><text x="195" y="556"><tspan>ASSERTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ASYMMETRIC.html"><text x="195" y="586"><tspan>ASYMMETRIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AT.html"><text x="195" y="616"><tspan>AT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AUDIT.html"><text x="195" y="646"><tspan>AUDIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AUTHORIZATION.html"><text x="195" y="676"><tspan>AUTHORIZATION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AUTOINCREMENT.html"><text x="195" y="706"><tspan>AUTOINCREMENT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.AVG.html"><text x="195" y="736"><tspan>AVG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BACKUP.html"><text x="195" y="766"><tspan>BACKUP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BEFORE.html"><text x="195" y="796"><tspan>BEFORE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BEGIN.html"><text x="195" y="826"><tspan>BEGIN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BETWEEN.html"><text x="195" y="856"><tspan>BETWEEN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BIGINT.html"><text x="195" y="886"><tspan>BIGINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BINARY.html"><text x="195" y="916"><tspan>BINARY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BIT.html"><text x="195" y="946"><tspan>BIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BLOB.html"><text x="195" y="976"><tspan>BLOB</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BOOLEAN.html"><text x="195" y="1006"><tspan>BOOLEAN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BOTH.html"><text x="195" y="1036"><tspan>BOTH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BREAK.html"><text x="195" y="1066"><tspan>BREAK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BROWSE.html"><text x="195" y="1096"><tspan>BROWSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BULK.html"><text x="195" y="1126"><tspan>BULK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.BY.html"><text x="195" y="1156"><tspan>BY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CALL.html"><text x="195" y="1186"><tspan>CALL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CASCADE.html"><text x="195" y="1216"><tspan>CASCADE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CASCADED.html"><text x="195" y="1246"><tspan>CASCADED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CASE.html"><text x="195" y="1276"><tspan>CASE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CAST.html"><text x="195" y="1306"><tspan>CAST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CHANGE.html"><text x="195" y="1336"><tspan>CHANGE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CHAR.html"><text x="195" y="1366"><tspan>CHAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CHARACTER.html"><text x="195" y="1396"><tspan>CHARACTER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CHARACTER_LENGTH.html"><text x="195" y="1426"><tspan>CHARACTER_LENGTH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CHECK.html"><text x="195" y="1456"><tspan>CHECK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CHECKPOINT.html"><text x="195" y="1486"><tspan>CHECKPOINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CLOSE.html"><text x="195" y="1516"><tspan>CLOSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CLUSTER.html"><text x="195" y="1546"><tspan>CLUSTER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CLUSTERED.html"><text x="195" y="1576"><tspan>CLUSTERED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COALESCE.html"><text x="195" y="1606"><tspan>COALESCE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COLLATE.html"><text x="195" y="1636"><tspan>COLLATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COLLATION.html"><text x="195" y="1666"><tspan>COLLATION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COLUMN.html"><text x="195" y="1696"><tspan>COLUMN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COMMENT.html"><text x="195" y="1726"><tspan>COMMENT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COMMIT.html"><text x="195" y="1756"><tspan>COMMIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COMPRESS.html"><text x="195" y="1786"><tspan>COMPRESS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COMPUTE.html"><text x="195" y="1816"><tspan>COMPUTE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONCAT.html"><text x="195" y="1846"><tspan>CONCAT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONCURRENTLY.html"><text x="195" y="1876"><tspan>CONCURRENTLY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONDITION.html"><text x="195" y="1906"><tspan>CONDITION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONNECT.html"><text x="195" y="1936"><tspan>CONNECT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONNECTION.html"><text x="195" y="1966"><tspan>CONNECTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONSTRAINT.html"><text x="195" y="1996"><tspan>CONSTRAINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONSTRAINTS.html"><text x="195" y="2026"><tspan>CONSTRAINTS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONTAINS.html"><text x="195" y="2056"><tspan>CONTAINS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONTAINSTABLE.html"><text x="195" y="2086"><tspan>CONTAINSTABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONTINUE.html"><text x="195" y="2116"><tspan>CONTINUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CONVERT.html"><text x="195" y="2146"><tspan>CONVERT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CORRESPONDING.html"><text x="195" y="2176"><tspan>CORRESPONDING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.COUNT.html"><text x="195" y="2206"><tspan>COUNT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CREATE.html"><text x="195" y="2236"><tspan>CREATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CROSS.html"><text x="195" y="2266"><tspan>CROSS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CUBE.html"><text x="195" y="2296"><tspan>CUBE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CUME_DIST.html"><text x="195" y="2326"><tspan>CUME_DIST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT.html"><text x="195" y="2356"><tspan>CURRENT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_CATALOG.html"><text x="195" y="2386"><tspan>CURRENT_CATALOG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_DATE.html"><text x="195" y="2416"><tspan>CURRENT_DATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_PATH.html"><text x="195" y="2446"><tspan>CURRENT_PATH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_ROLE.html"><text x="195" y="2476"><tspan>CURRENT_ROLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_SCHEMA.html"><text x="195" y="2506"><tspan>CURRENT_SCHEMA</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_TIME.html"><text x="195" y="2536"><tspan>CURRENT_TIME</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_TIMESTAMP.html"><text x="195" y="2566"><tspan>CURRENT_TIMESTAMP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURRENT_USER.html"><text x="195" y="2596"><tspan>CURRENT_USER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.CURSOR.html"><text x="195" y="2626"><tspan>CURSOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DATABASE.html"><text x="195" y="2656"><tspan>DATABASE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DATABASES.html"><text x="195" y="2686"><tspan>DATABASES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DATE.html"><text x="195" y="2716"><tspan>DATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DAY.html"><text x="195" y="2746"><tspan>DAY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DAYS.html"><text x="195" y="2776"><tspan>DAYS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DAY_HOUR.html"><text x="195" y="2806"><tspan>DAY_HOUR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DAY_MICROSECOND.html"><text x="195" y="2836"><tspan>DAY_MICROSECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DAY_MINUTE.html"><text x="195" y="2866"><tspan>DAY_MINUTE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DAY_SECOND.html"><text x="195" y="2896"><tspan>DAY_SECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DBCC.html"><text x="195" y="2926"><tspan>DBCC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEALLOCATE.html"><text x="195" y="2956"><tspan>DEALLOCATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEC.html"><text x="195" y="2986"><tspan>DEC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DECIMAL.html"><text x="195" y="3016"><tspan>DECIMAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DECLARE.html"><text x="195" y="3046"><tspan>DECLARE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEFAULT.html"><text x="195" y="3076"><tspan>DEFAULT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEFERRABLE.html"><text x="195" y="3106"><tspan>DEFERRABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEFERRED.html"><text x="195" y="3136"><tspan>DEFERRED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEFINE.html"><text x="195" y="3166"><tspan>DEFINE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DEFINER.html"><text x="195" y="3196"><tspan>DEFINER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DELAYED.html"><text x="195" y="3226"><tspan>DELAYED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DELETE.html"><text x="195" y="3256"><tspan>DELETE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DENSE_RANK.html"><text x="195" y="3286"><tspan>DENSE_RANK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DENY.html"><text x="195" y="3316"><tspan>DENY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DESC.html"><text x="195" y="3346"><tspan>DESC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DESCRIBE.html"><text x="195" y="3376"><tspan>DESCRIBE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DETERMINISTIC.html"><text x="195" y="3406"><tspan>DETERMINISTIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DIAGNOSTICS.html"><text x="195" y="3436"><tspan>DIAGNOSTICS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DISCONNECT.html"><text x="195" y="3466"><tspan>DISCONNECT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DISTINCT.html"><text x="195" y="3496"><tspan>DISTINCT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DISTINCTROW.html"><text x="195" y="3526"><tspan>DISTINCTROW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DISTRIBUTED.html"><text x="195" y="3556"><tspan>DISTRIBUTED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DIV.html"><text x="195" y="3586"><tspan>DIV</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DO.html"><text x="195" y="3616"><tspan>DO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DOUBLE.html"><text x="195" y="3646"><tspan>DOUBLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DROP.html"><text x="195" y="3676"><tspan>DROP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.DUAL.html"><text x="195" y="3706"><tspan>DUAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EACH.html"><text x="195" y="3736"><tspan>EACH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ELSE.html"><text x="195" y="3766"><tspan>ELSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ELSEIF.html"><text x="195" y="3796"><tspan>ELSEIF</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EMPTY.html"><text x="195" y="3826"><tspan>EMPTY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ENCLOSED.html"><text x="195" y="3856"><tspan>ENCLOSED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.END.html"><text x="195" y="3886"><tspan>END</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.END-EXEC.html"><text x="195" y="3916"><tspan>END-EXEC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ENUM.html"><text x="195" y="3946"><tspan>ENUM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ERRLVL.html"><text x="195" y="3976"><tspan>ERRLVL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ESCAPE.html"><text x="195" y="4006"><tspan>ESCAPE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ESCAPED.html"><text x="195" y="4036"><tspan>ESCAPED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXCEPT.html"><text x="195" y="4066"><tspan>EXCEPT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXCEPTION.html"><text x="195" y="4096"><tspan>EXCEPTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXCLUDE.html"><text x="195" y="4126"><tspan>EXCLUDE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXCLUSIVE.html"><text x="195" y="4156"><tspan>EXCLUSIVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXEC.html"><text x="195" y="4186"><tspan>EXEC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXECUTE.html"><text x="195" y="4216"><tspan>EXECUTE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXISTS.html"><text x="195" y="4246"><tspan>EXISTS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXIT.html"><text x="195" y="4276"><tspan>EXIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXPLAIN.html"><text x="195" y="4306"><tspan>EXPLAIN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXTERNAL.html"><text x="195" y="4336"><tspan>EXTERNAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.EXTRACT.html"><text x="195" y="4366"><tspan>EXTRACT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FALSE.html"><text x="195" y="4396"><tspan>FALSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FETCH.html"><text x="195" y="4426"><tspan>FETCH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FILE.html"><text x="195" y="4456"><tspan>FILE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FILLFACTOR.html"><text x="195" y="4486"><tspan>FILLFACTOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FILTER.html"><text x="195" y="4516"><tspan>FILTER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FIRST.html"><text x="195" y="4546"><tspan>FIRST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FIRST_VALUE.html"><text x="195" y="4576"><tspan>FIRST_VALUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FLOAT.html"><text x="195" y="4606"><tspan>FLOAT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FLOAT4.html"><text x="195" y="4636"><tspan>FLOAT4</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FLOAT8.html"><text x="195" y="4666"><tspan>FLOAT8</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FOLLOWING.html"><text x="195" y="4696"><tspan>FOLLOWING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FOR.html"><text x="195" y="4726"><tspan>FOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FORCE.html"><text x="195" y="4756"><tspan>FORCE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FOREIGN.html"><text x="195" y="4786"><tspan>FOREIGN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FOUND.html"><text x="195" y="4816"><tspan>FOUND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FREETEXT.html"><text x="195" y="4846"><tspan>FREETEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FREETEXTTABLE.html"><text x="195" y="4876"><tspan>FREETEXTTABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FREEZE.html"><text x="195" y="4906"><tspan>FREEZE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FROM.html"><text x="195" y="4936"><tspan>FROM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FULL.html"><text x="195" y="4966"><tspan>FULL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FULLTEXT.html"><text x="195" y="4996"><tspan>FULLTEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.FUNCTION.html"><text x="195" y="5026"><tspan>FUNCTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GENERATED.html"><text x="195" y="5056"><tspan>GENERATED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GET.html"><text x="195" y="5086"><tspan>GET</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GLOB.html"><text x="195" y="5116"><tspan>GLOB</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GLOBAL.html"><text x="195" y="5146"><tspan>GLOBAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GO.html"><text x="195" y="5176"><tspan>GO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GOTO.html"><text x="195" y="5206"><tspan>GOTO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GRANT.html"><text x="195" y="5236"><tspan>GRANT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GROUP.html"><text x="195" y="5266"><tspan>GROUP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GROUPING.html"><text x="195" y="5296"><tspan>GROUPING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.GROUPS.html"><text x="195" y="5326"><tspan>GROUPS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HASH.html"><text x="195" y="5356"><tspan>HASH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HAVING.html"><text x="195" y="5386"><tspan>HAVING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HIGH_PRIORITY.html"><text x="195" y="5416"><tspan>HIGH_PRIORITY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HOLDLOCK.html"><text x="195" y="5446"><tspan>HOLDLOCK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HOUR.html"><text x="195" y="5476"><tspan>HOUR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HOURS.html"><text x="195" y="5506"><tspan>HOURS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HOUR_MICROSECOND.html"><text x="195" y="5536"><tspan>HOUR_MICROSECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HOUR_MINUTE.html"><text x="195" y="5566"><tspan>HOUR_MINUTE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.HOUR_SECOND.html"><text x="195" y="5596"><tspan>HOUR_SECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IDENTIFIED.html"><text x="195" y="5626"><tspan>IDENTIFIED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IDENTITY.html"><text x="195" y="5656"><tspan>IDENTITY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IDENTITYCOL.html"><text x="195" y="5686"><tspan>IDENTITYCOL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IDENTITY_INSERT.html"><text x="195" y="5716"><tspan>IDENTITY_INSERT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IF.html"><text x="195" y="5746"><tspan>IF</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IGNORE.html"><text x="195" y="5776"><tspan>IGNORE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ILIKE.html"><text x="195" y="5806"><tspan>ILIKE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IMMEDIATE.html"><text x="195" y="5836"><tspan>IMMEDIATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IN.html"><text x="195" y="5866"><tspan>IN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INCREMENT.html"><text x="195" y="5896"><tspan>INCREMENT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INDEX.html"><text x="195" y="5926"><tspan>INDEX</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INDEXED.html"><text x="195" y="5956"><tspan>INDEXED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INDICATOR.html"><text x="195" y="5986"><tspan>INDICATOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INFILE.html"><text x="195" y="6016"><tspan>INFILE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INITIAL.html"><text x="195" y="6046"><tspan>INITIAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INITIALLY.html"><text x="195" y="6076"><tspan>INITIALLY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INNER.html"><text x="195" y="6106"><tspan>INNER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INOUT.html"><text x="195" y="6136"><tspan>INOUT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INPUT.html"><text x="195" y="6166"><tspan>INPUT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INSENSITIVE.html"><text x="195" y="6196"><tspan>INSENSITIVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INSERT.html"><text x="195" y="6226"><tspan>INSERT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INT.html"><text x="195" y="6256"><tspan>INT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INT1.html"><text x="195" y="6286"><tspan>INT1</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INT2.html"><text x="195" y="6316"><tspan>INT2</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INT3.html"><text x="195" y="6346"><tspan>INT3</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INT4.html"><text x="195" y="6376"><tspan>INT4</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INT8.html"><text x="195" y="6406"><tspan>INT8</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INTEGER.html"><text x="195" y="6436"><tspan>INTEGER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INTERSECT.html"><text x="195" y="6466"><tspan>INTERSECT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INTERVAL.html"><text x="195" y="6496"><tspan>INTERVAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INTO.html"><text x="195" y="6526"><tspan>INTO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.INVOKER.html"><text x="195" y="6556"><tspan>INVOKER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IO_AFTER_GTIDS.html"><text x="195" y="6586"><tspan>IO_AFTER_GTIDS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IO_BEFORE_GTIDS.html"><text x="195" y="6616"><tspan>IO_BEFORE_GTIDS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.IS.html"><text x="195" y="6646"><tspan>IS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ISNULL.html"><text x="195" y="6676"><tspan>ISNULL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ISOLATION.html"><text x="195" y="6706"><tspan>ISOLATION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ITERATE.html"><text x="195" y="6736"><tspan>ITERATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.JOIN.html"><text x="195" y="6766"><tspan>JOIN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.JSON_ARRAYAGG.html"><text x="195" y="6796"><tspan>JSON_ARRAYAGG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.JSON_EXISTS.html"><text x="195" y="6826"><tspan>JSON_EXISTS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.JSON_OBJECTAGG.html"><text x="195" y="6856"><tspan>JSON_OBJECTAGG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.JSON_TABLE.html"><text x="195" y="6886"><tspan>JSON_TABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.KEY.html"><text x="195" y="6916"><tspan>KEY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.KEYS.html"><text x="195" y="6946"><tspan>KEYS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.KILL.html"><text x="195" y="6976"><tspan>KILL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LAG.html"><text x="195" y="7006"><tspan>LAG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LAST.html"><text x="195" y="7036"><tspan>LAST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LAST_VALUE.html"><text x="195" y="7066"><tspan>LAST_VALUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LATERAL.html"><text x="195" y="7096"><tspan>LATERAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LEAD.html"><text x="195" y="7126"><tspan>LEAD</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LEADING.html"><text x="195" y="7156"><tspan>LEADING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LEAVE.html"><text x="195" y="7186"><tspan>LEAVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LEFT.html"><text x="195" y="7216"><tspan>LEFT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LEVEL.html"><text x="195" y="7246"><tspan>LEVEL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LIKE.html"><text x="195" y="7276"><tspan>LIKE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LIMIT.html"><text x="195" y="7306"><tspan>LIMIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LINEAR.html"><text x="195" y="7336"><tspan>LINEAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LINENO.html"><text x="195" y="7366"><tspan>LINENO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LINES.html"><text x="195" y="7396"><tspan>LINES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOAD.html"><text x="195" y="7426"><tspan>LOAD</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOCALTIME.html"><text x="195" y="7456"><tspan>LOCALTIME</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOCALTIMESTAMP.html"><text x="195" y="7486"><tspan>LOCALTIMESTAMP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOCK.html"><text x="195" y="7516"><tspan>LOCK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LONG.html"><text x="195" y="7546"><tspan>LONG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LONGBLOB.html"><text x="195" y="7576"><tspan>LONGBLOB</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LONGTEXT.html"><text x="195" y="7606"><tspan>LONGTEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOOP.html"><text x="195" y="7636"><tspan>LOOP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOWER.html"><text x="195" y="7666"><tspan>LOWER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LOW_PRIORITY.html"><text x="195" y="7696"><tspan>LOW_PRIORITY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.LTRIM.html"><text x="195" y="7726"><tspan>LTRIM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MASTER_BIND.html"><text x="195" y="7756"><tspan>MASTER_BIND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MASTER_SSL_VERIFY_SERVER_CERT.html"><text x="195" y="7786"><tspan>MASTER_SSL_VERIFY_SERVER_CERT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MATCH.html"><text x="195" y="7816"><tspan>MATCH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MAX.html"><text x="195" y="7846"><tspan>MAX</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MAXEXTENTS.html"><text x="195" y="7876"><tspan>MAXEXTENTS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MAXVALUE.html"><text x="195" y="7906"><tspan>MAXVALUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MEDIUMBLOB.html"><text x="195" y="7936"><tspan>MEDIUMBLOB</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MEDIUMINT.html"><text x="195" y="7966"><tspan>MEDIUMINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MEDIUMTEXT.html"><text x="195" y="7996"><tspan>MEDIUMTEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MEMBER.html"><text x="195" y="8026"><tspan>MEMBER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MERGE.html"><text x="195" y="8056"><tspan>MERGE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MICROSECOND.html"><text x="195" y="8086"><tspan>MICROSECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MICROSECONDS.html"><text x="195" y="8116"><tspan>MICROSECONDS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MIDDLEINT.html"><text x="195" y="8146"><tspan>MIDDLEINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MIN.html"><text x="195" y="8176"><tspan>MIN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MINUS.html"><text x="195" y="8206"><tspan>MINUS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MINUTE.html"><text x="195" y="8236"><tspan>MINUTE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MINUTES.html"><text x="195" y="8266"><tspan>MINUTES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MINUTE_MICROSECOND.html"><text x="195" y="8296"><tspan>MINUTE_MICROSECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MINUTE_SECOND.html"><text x="195" y="8326"><tspan>MINUTE_SECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MLSLABEL.html"><text x="195" y="8356"><tspan>MLSLABEL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MOD.html"><text x="195" y="8386"><tspan>MOD</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MODE.html"><text x="195" y="8416"><tspan>MODE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MODIFIES.html"><text x="195" y="8446"><tspan>MODIFIES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MODIFY.html"><text x="195" y="8476"><tspan>MODIFY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MONTH.html"><text x="195" y="8506"><tspan>MONTH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.MONTHS.html"><text x="195" y="8536"><tspan>MONTHS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NATIONAL.html"><text x="195" y="8566"><tspan>NATIONAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NATURAL.html"><text x="195" y="8596"><tspan>NATURAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NCHAR.html"><text x="195" y="8626"><tspan>NCHAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NEW.html"><text x="195" y="8656"><tspan>NEW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NEXT.html"><text x="195" y="8686"><tspan>NEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NO.html"><text x="195" y="8716"><tspan>NO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOAUDIT.html"><text x="195" y="8746"><tspan>NOAUDIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOCHECK.html"><text x="195" y="8776"><tspan>NOCHECK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOCOMPRESS.html"><text x="195" y="8806"><tspan>NOCOMPRESS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NONCLUSTERED.html"><text x="195" y="8836"><tspan>NONCLUSTERED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NONE.html"><text x="195" y="8866"><tspan>NONE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOT.html"><text x="195" y="8896"><tspan>NOT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOTHING.html"><text x="195" y="8926"><tspan>NOTHING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOTNULL.html"><text x="195" y="8956"><tspan>NOTNULL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NOWAIT.html"><text x="195" y="8986"><tspan>NOWAIT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NO_WRITE_TO_BINLOG.html"><text x="195" y="9016"><tspan>NO_WRITE_TO_BINLOG</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NTH_VALUE.html"><text x="195" y="9046"><tspan>NTH_VALUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NTILE.html"><text x="195" y="9076"><tspan>NTILE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NULL.html"><text x="195" y="9106"><tspan>NULL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NULLIF.html"><text x="195" y="9136"><tspan>NULLIF</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NULLS.html"><text x="195" y="9166"><tspan>NULLS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NUMBER.html"><text x="195" y="9196"><tspan>NUMBER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NUMERIC.html"><text x="195" y="9226"><tspan>NUMERIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.NVARCHAR.html"><text x="195" y="9256"><tspan>NVARCHAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OF.html"><text x="195" y="9286"><tspan>OF</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OFF.html"><text x="195" y="9316"><tspan>OFF</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OFFLINE.html"><text x="195" y="9346"><tspan>OFFLINE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OFFSET.html"><text x="195" y="9376"><tspan>OFFSET</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OFFSETS.html"><text x="195" y="9406"><tspan>OFFSETS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ON.html"><text x="195" y="9436"><tspan>ON</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ONLINE.html"><text x="195" y="9466"><tspan>ONLINE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ONLY.html"><text x="195" y="9496"><tspan>ONLY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPEN.html"><text x="195" y="9526"><tspan>OPEN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPENDATASOURCE.html"><text x="195" y="9556"><tspan>OPENDATASOURCE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPENQUERY.html"><text x="195" y="9586"><tspan>OPENQUERY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPENROWSET.html"><text x="195" y="9616"><tspan>OPENROWSET</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPENXML.html"><text x="195" y="9646"><tspan>OPENXML</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPTIMIZE.html"><text x="195" y="9676"><tspan>OPTIMIZE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPTIMIZER_COSTS.html"><text x="195" y="9706"><tspan>OPTIMIZER_COSTS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPTION.html"><text x="195" y="9736"><tspan>OPTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OPTIONALLY.html"><text x="195" y="9766"><tspan>OPTIONALLY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OR.html"><text x="195" y="9796"><tspan>OR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ORDER.html"><text x="195" y="9826"><tspan>ORDER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OUT.html"><text x="195" y="9856"><tspan>OUT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OUTER.html"><text x="195" y="9886"><tspan>OUTER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OUTFILE.html"><text x="195" y="9916"><tspan>OUTFILE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OUTPUT.html"><text x="195" y="9946"><tspan>OUTPUT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OVER.html"><text x="195" y="9976"><tspan>OVER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.OVERLAPS.html"><text x="195" y="10006"><tspan>OVERLAPS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PAD.html"><text x="195" y="10036"><tspan>PAD</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PARTIAL.html"><text x="195" y="10066"><tspan>PARTIAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PARTITION.html"><text x="195" y="10096"><tspan>PARTITION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PCTFREE.html"><text x="195" y="10126"><tspan>PCTFREE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PERCENT.html"><text x="195" y="10156"><tspan>PERCENT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PERCENTILE_CONT.html"><text x="195" y="10186"><tspan>PERCENTILE_CONT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PERCENTILE_DISC.html"><text x="195" y="10216"><tspan>PERCENTILE_DISC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PERCENT_RANK.html"><text x="195" y="10246"><tspan>PERCENT_RANK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PIVOT.html"><text x="195" y="10276"><tspan>PIVOT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PLACING.html"><text x="195" y="10306"><tspan>PLACING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PLAN.html"><text x="195" y="10336"><tspan>PLAN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PORTION.html"><text x="195" y="10366"><tspan>PORTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.POSITION.html"><text x="195" y="10396"><tspan>POSITION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRECEDING.html"><text x="195" y="10426"><tspan>PRECEDING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRECISION.html"><text x="195" y="10456"><tspan>PRECISION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PREPARE.html"><text x="195" y="10486"><tspan>PREPARE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRESERVE.html"><text x="195" y="10516"><tspan>PRESERVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRIMARY.html"><text x="195" y="10546"><tspan>PRIMARY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRINT.html"><text x="195" y="10576"><tspan>PRINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRIOR.html"><text x="195" y="10606"><tspan>PRIOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PRIVILEGES.html"><text x="195" y="10636"><tspan>PRIVILEGES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PROC.html"><text x="195" y="10666"><tspan>PROC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PROCEDURE.html"><text x="195" y="10696"><tspan>PROCEDURE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PUBLIC.html"><text x="195" y="10726"><tspan>PUBLIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.PURGE.html"><text x="195" y="10756"><tspan>PURGE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RAISE.html"><text x="195" y="10786"><tspan>RAISE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RAISERROR.html"><text x="195" y="10816"><tspan>RAISERROR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RANGE.html"><text x="195" y="10846"><tspan>RANGE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RANK.html"><text x="195" y="10876"><tspan>RANK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RAW.html"><text x="195" y="10906"><tspan>RAW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.READ.html"><text x="195" y="10936"><tspan>READ</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.READS.html"><text x="195" y="10966"><tspan>READS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.READTEXT.html"><text x="195" y="10996"><tspan>READTEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.READ_WRITE.html"><text x="195" y="11026"><tspan>READ_WRITE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REAL.html"><text x="195" y="11056"><tspan>REAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RECONFIGURE.html"><text x="195" y="11086"><tspan>RECONFIGURE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RECURSIVE.html"><text x="195" y="11116"><tspan>RECURSIVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REFERENCES.html"><text x="195" y="11146"><tspan>REFERENCES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REGEXP.html"><text x="195" y="11176"><tspan>REGEXP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RELATIVE.html"><text x="195" y="11206"><tspan>RELATIVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RELEASE.html"><text x="195" y="11236"><tspan>RELEASE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RENAME.html"><text x="195" y="11266"><tspan>RENAME</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REPEAT.html"><text x="195" y="11296"><tspan>REPEAT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REPLACE.html"><text x="195" y="11326"><tspan>REPLACE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REPLICATION.html"><text x="195" y="11356"><tspan>REPLICATION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REQUIRE.html"><text x="195" y="11386"><tspan>REQUIRE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RESIGNAL.html"><text x="195" y="11416"><tspan>RESIGNAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RESOURCE.html"><text x="195" y="11446"><tspan>RESOURCE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RESPECT.html"><text x="195" y="11476"><tspan>RESPECT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RESTORE.html"><text x="195" y="11506"><tspan>RESTORE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RESTRICT.html"><text x="195" y="11536"><tspan>RESTRICT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RETURN.html"><text x="195" y="11566"><tspan>RETURN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RETURNING.html"><text x="195" y="11596"><tspan>RETURNING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REVERT.html"><text x="195" y="11626"><tspan>REVERT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.REVOKE.html"><text x="195" y="11656"><tspan>REVOKE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RIGHT.html"><text x="195" y="11686"><tspan>RIGHT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RLIKE.html"><text x="195" y="11716"><tspan>RLIKE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROLLBACK.html"><text x="195" y="11746"><tspan>ROLLBACK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROLLUP.html"><text x="195" y="11776"><tspan>ROLLUP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROW.html"><text x="195" y="11806"><tspan>ROW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROWCOUNT.html"><text x="195" y="11836"><tspan>ROWCOUNT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROWGUIDCOL.html"><text x="195" y="11866"><tspan>ROWGUIDCOL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROWID.html"><text x="195" y="11896"><tspan>ROWID</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROWNUM.html"><text x="195" y="11926"><tspan>ROWNUM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROWS.html"><text x="195" y="11956"><tspan>ROWS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ROW_NUMBER.html"><text x="195" y="11986"><tspan>ROW_NUMBER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RTRIM.html"><text x="195" y="12016"><tspan>RTRIM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.RULE.html"><text x="195" y="12046"><tspan>RULE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SAVE.html"><text x="195" y="12076"><tspan>SAVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SCHEMA.html"><text x="195" y="12106"><tspan>SCHEMA</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SCHEMAS.html"><text x="195" y="12136"><tspan>SCHEMAS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SCROLL.html"><text x="195" y="12166"><tspan>SCROLL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SECOND.html"><text x="195" y="12196"><tspan>SECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SECONDS.html"><text x="195" y="12226"><tspan>SECONDS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SECOND_MICROSECOND.html"><text x="195" y="12256"><tspan>SECOND_MICROSECOND</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SELECT.html"><text x="195" y="12286"><tspan>SELECT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SEMANTICKEYPHRASETABLE.html"><text x="195" y="12316"><tspan>SEMANTICKEYPHRASETABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SEMANTICSIMILARITYDETAILSTABLE.html"><text x="195" y="12346"><tspan>SEMANTICSIMILARITYDETAILSTABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SEMANTICSIMILARITYTABLE.html"><text x="195" y="12376"><tspan>SEMANTICSIMILARITYTABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SENSITIVE.html"><text x="195" y="12406"><tspan>SENSITIVE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SEPARATOR.html"><text x="195" y="12436"><tspan>SEPARATOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SESSION.html"><text x="195" y="12466"><tspan>SESSION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SESSION_USER.html"><text x="195" y="12496"><tspan>SESSION_USER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SET.html"><text x="195" y="12526"><tspan>SET</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SETUSER.html"><text x="195" y="12556"><tspan>SETUSER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SHARE.html"><text x="195" y="12586"><tspan>SHARE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SHOW.html"><text x="195" y="12616"><tspan>SHOW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SHUTDOWN.html"><text x="195" y="12646"><tspan>SHUTDOWN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SIGNAL.html"><text x="195" y="12676"><tspan>SIGNAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SIMILAR.html"><text x="195" y="12706"><tspan>SIMILAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SIZE.html"><text x="195" y="12736"><tspan>SIZE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SMALLINT.html"><text x="195" y="12766"><tspan>SMALLINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SOME.html"><text x="195" y="12796"><tspan>SOME</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SOUNDS.html"><text x="195" y="12826"><tspan>SOUNDS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SPACE.html"><text x="195" y="12856"><tspan>SPACE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SPATIAL.html"><text x="195" y="12886"><tspan>SPATIAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SPECIFIC.html"><text x="195" y="12916"><tspan>SPECIFIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL.html"><text x="195" y="12946"><tspan>SQL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQLCODE.html"><text x="195" y="12976"><tspan>SQLCODE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQLERROR.html"><text x="195" y="13006"><tspan>SQLERROR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQLEXCEPTION.html"><text x="195" y="13036"><tspan>SQLEXCEPTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQLID.html"><text x="195" y="13066"><tspan>SQLID</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQLSTATE.html"><text x="195" y="13096"><tspan>SQLSTATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQLWARNING.html"><text x="195" y="13126"><tspan>SQLWARNING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL_BIG_RESULT.html"><text x="195" y="13156"><tspan>SQL_BIG_RESULT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL_BUFFER_RESULT.html"><text x="195" y="13186"><tspan>SQL_BUFFER_RESULT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL_CACHE.html"><text x="195" y="13216"><tspan>SQL_CACHE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL_CALC_FOUND_ROWS.html"><text x="195" y="13246"><tspan>SQL_CALC_FOUND_ROWS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL_NO_CACHE.html"><text x="195" y="13276"><tspan>SQL_NO_CACHE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SQL_SMALL_RESULT.html"><text x="195" y="13306"><tspan>SQL_SMALL_RESULT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SSL.html"><text x="195" y="13336"><tspan>SSL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.START.html"><text x="195" y="13366"><tspan>START</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STARTING.html"><text x="195" y="13396"><tspan>STARTING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STATISTICS.html"><text x="195" y="13426"><tspan>STATISTICS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STATS_AUTO_RECALC.html"><text x="195" y="13456"><tspan>STATS_AUTO_RECALC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STATS_PERSISTENT.html"><text x="195" y="13486"><tspan>STATS_PERSISTENT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STATS_SAMPLE_PAGES.html"><text x="195" y="13516"><tspan>STATS_SAMPLE_PAGES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STDDEV_POP.html"><text x="195" y="13546"><tspan>STDDEV_POP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STDDEV_SAMP.html"><text x="195" y="13576"><tspan>STDDEV_SAMP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STORED.html"><text x="195" y="13606"><tspan>STORED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.STRAIGHT_JOIN.html"><text x="195" y="13636"><tspan>STRAIGHT_JOIN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SUBSTRING.html"><text x="195" y="13666"><tspan>SUBSTRING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SUCCESSFUL.html"><text x="195" y="13696"><tspan>SUCCESSFUL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SUM.html"><text x="195" y="13726"><tspan>SUM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SYMMETRIC.html"><text x="195" y="13756"><tspan>SYMMETRIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SYNONYM.html"><text x="195" y="13786"><tspan>SYNONYM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SYSDATE.html"><text x="195" y="13816"><tspan>SYSDATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SYSTEM.html"><text x="195" y="13846"><tspan>SYSTEM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.SYSTEM_USER.html"><text x="195" y="13876"><tspan>SYSTEM_USER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TABLE.html"><text x="195" y="13906"><tspan>TABLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TABLESAMPLE.html"><text x="195" y="13936"><tspan>TABLESAMPLE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TEMPORARY.html"><text x="195" y="13966"><tspan>TEMPORARY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TERMINATED.html"><text x="195" y="13996"><tspan>TERMINATED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TEXTSIZE.html"><text x="195" y="14026"><tspan>TEXTSIZE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.THEN.html"><text x="195" y="14056"><tspan>THEN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TIMEZONE_HOUR.html"><text x="195" y="14086"><tspan>TIMEZONE_HOUR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TIMEZONE_MINUTE.html"><text x="195" y="14116"><tspan>TIMEZONE_MINUTE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TINYBLOB.html"><text x="195" y="14146"><tspan>TINYBLOB</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TINYINT.html"><text x="195" y="14176"><tspan>TINYINT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TINYTEXT.html"><text x="195" y="14206"><tspan>TINYTEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TO.html"><text x="195" y="14236"><tspan>TO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TOP.html"><text x="195" y="14266"><tspan>TOP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRAILING.html"><text x="195" y="14296"><tspan>TRAILING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRAN.html"><text x="195" y="14326"><tspan>TRAN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRANSACTION.html"><text x="195" y="14356"><tspan>TRANSACTION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRANSLATE.html"><text x="195" y="14386"><tspan>TRANSLATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRANSLATION.html"><text x="195" y="14416"><tspan>TRANSLATION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TREAT.html"><text x="195" y="14446"><tspan>TREAT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRIGGER.html"><text x="195" y="14476"><tspan>TRIGGER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRIM.html"><text x="195" y="14506"><tspan>TRIM</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRUE.html"><text x="195" y="14536"><tspan>TRUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRUNCATE.html"><text x="195" y="14566"><tspan>TRUNCATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TRY_CONVERT.html"><text x="195" y="14596"><tspan>TRY_CONVERT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.TSEQUAL.html"><text x="195" y="14626"><tspan>TSEQUAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UESCAPE.html"><text x="195" y="14656"><tspan>UESCAPE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UID.html"><text x="195" y="14686"><tspan>UID</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNBOUNDED.html"><text x="195" y="14716"><tspan>UNBOUNDED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNDO.html"><text x="195" y="14746"><tspan>UNDO</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNION.html"><text x="195" y="14776"><tspan>UNION</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNIQUE.html"><text x="195" y="14806"><tspan>UNIQUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNKNOWN.html"><text x="195" y="14836"><tspan>UNKNOWN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNLOCK.html"><text x="195" y="14866"><tspan>UNLOCK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNNEST.html"><text x="195" y="14896"><tspan>UNNEST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNPIVOT.html"><text x="195" y="14926"><tspan>UNPIVOT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UNSIGNED.html"><text x="195" y="14956"><tspan>UNSIGNED</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UPDATE.html"><text x="195" y="14986"><tspan>UPDATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UPDATETEXT.html"><text x="195" y="15016"><tspan>UPDATETEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UPPER.html"><text x="195" y="15046"><tspan>UPPER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.USAGE.html"><text x="195" y="15076"><tspan>USAGE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.USE.html"><text x="195" y="15106"><tspan>USE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.USER.html"><text x="195" y="15136"><tspan>USER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.USING.html"><text x="195" y="15166"><tspan>USING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UTC_DATE.html"><text x="195" y="15196"><tspan>UTC_DATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UTC_TIME.html"><text x="195" y="15226"><tspan>UTC_TIME</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.UTC_TIMESTAMP.html"><text x="195" y="15256"><tspan>UTC_TIMESTAMP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VALIDATE.html"><text x="195" y="15286"><tspan>VALIDATE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VALUE.html"><text x="195" y="15316"><tspan>VALUE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VALUES.html"><text x="195" y="15346"><tspan>VALUES</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VARBINARY.html"><text x="195" y="15376"><tspan>VARBINARY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VARCHAR.html"><text x="195" y="15406"><tspan>VARCHAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VARCHAR2.html"><text x="195" y="15436"><tspan>VARCHAR2</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VARCHARACTER.html"><text x="195" y="15466"><tspan>VARCHARACTER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VARIADIC.html"><text x="195" y="15496"><tspan>VARIADIC</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VARYING.html"><text x="195" y="15526"><tspan>VARYING</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VAR_POP.html"><text x="195" y="15556"><tspan>VAR_POP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VAR_SAMP.html"><text x="195" y="15586"><tspan>VAR_SAMP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VERBOSE.html"><text x="195" y="15616"><tspan>VERBOSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VIEW.html"><text x="195" y="15646"><tspan>VIEW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.VIRTUAL.html"><text x="195" y="15676"><tspan>VIRTUAL</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WAITFOR.html"><text x="195" y="15706"><tspan>WAITFOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WHEN.html"><text x="195" y="15736"><tspan>WHEN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WHENEVER.html"><text x="195" y="15766"><tspan>WHENEVER</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WHERE.html"><text x="195" y="15796"><tspan>WHERE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WHILE.html"><text x="195" y="15826"><tspan>WHILE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WINDOW.html"><text x="195" y="15856"><tspan>WINDOW</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WITH.html"><text x="195" y="15886"><tspan>WITH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WITHIN.html"><text x="195" y="15916"><tspan>WITHIN</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WITHIN%20GROUP.html"><text x="195" y="15946"><tspan>WITHIN GROUP</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WITHOUT.html"><text x="195" y="15976"><tspan>WITHOUT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WORK.html"><text x="195" y="16006"><tspan>WORK</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WRITE.html"><text x="195" y="16036"><tspan>WRITE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.WRITETEXT.html"><text x="195" y="16066"><tspan>WRITETEXT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XML.html"><text x="195" y="16096"><tspan>XML</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLCAST.html"><text x="195" y="16126"><tspan>XMLCAST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLEXISTS.html"><text x="195" y="16156"><tspan>XMLEXISTS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLFOREST.html"><text x="195" y="16186"><tspan>XMLFOREST</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLPARSE.html"><text x="195" y="16216"><tspan>XMLPARSE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLQUERY.html"><text x="195" y="16246"><tspan>XMLQUERY</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLROOT.html"><text x="195" y="16276"><tspan>XMLROOT</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XMLSERIALIZE.html"><text x="195" y="16306"><tspan>XMLSERIALIZE</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.XOR.html"><text x="195" y="16336"><tspan>XOR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.YEAR.html"><text x="195" y="16366"><tspan>YEAR</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.YEARS.html"><text x="195" y="16396"><tspan>YEARS</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.YEAR_MONTH.html"><text x="195" y="16426"><tspan>YEAR_MONTH</tspan></text></a><a href="https://modern-sql.com/reserved-words-empirical-list/keyword.reserved.ZEROFILL.html"><text x="195" y="16456"><tspan>ZEROFILL</tspan></text></a></svg><ol type="a"><li>Not as expression</li><li>Not for column renaming without <code>as</code> clause</li><li>Not as table name</li><li>Not as column name</li><li>Not in the <code>from</code> clause or <code>drop table</code> (yet in <code>create table</code>!)</li></ol></div><div id="below-article"><p>You can’t catch up on 20 years of SQL evolution in one day. Subscribe the newsletter via <b><a href="https://winand.us7.list-manage.com/subscribe?u=0144e9d4699c960039a90ad24&amp;id=a88100f1ab&amp;group%5B441%5D%5B256%5D=true">E-Mail</a></b>, <b><a href="https://twitter.com/ModernSQL">Twitter</a></b> or <b><a href="https://modern-sql.com/feed">RSS</a></b> to gradually catch up and to keep <em>modern-⁠sql.com</em> on your radar.</p><h2>About the Author</h2><div id="authorsbio"><p><img width="110" height="110" src="https://modern-sql.com/static/markuswinand.JSEKkX8C.jpg" alt="Photo of Markus Winand"></p><p>Markus Winand provides insights into SQL and shows how different systems support it at  <a href="https://modern-sql.com/">modern-sql.com</a>. Previously he made <a href="https://use-the-index-luke.com/">use-the-index-luke.com</a>, which is still actively maintained. Markus can be hired as trainer, speaker and consultant via <a href="https://winand.at/">winand.at</a>.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A suicide crisis among veterinarians (296 pts)]]></title>
            <link>https://www.bbc.com/worklife/article/20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody</link>
            <guid>37844225</guid>
            <pubDate>Wed, 11 Oct 2023 13:38:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/worklife/article/20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody">https://www.bbc.com/worklife/article/20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody</a>, See on <a href="https://news.ycombinator.com/item?id=37844225">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="worklifearticle20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody"><div id="headline-worklifearticle20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody"><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p0gkmdx4.webp" type="image/webp"><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p0gkmdx4.jpg" type="image/jpeg"><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p0gkmdx4.webp" type="image/webp"><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p0gkmdx4.jpg" type="image/jpeg"><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p0gkmdx4.webp" type="image/webp"><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p0gkmdx4.jpg" type="image/jpeg"><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p0gkmdx4.webp" type="image/webp"><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p0gkmdx4.jpg" type="image/jpeg"><img loading="lazy" draggable="false" title="Unhappy veterinarian" src="https://ychef.files.bbci.co.uk/976x549/p0gkmdx4.jpg" alt="Unhappy veterinarian" id=""></picture></div><div><article><div><p>Suicide rates among veterinarians are staggering. The crisis is dire – but there may be hope in sight.</p><div><p>L</p><div><p>Last summer, a 36-year-old veterinarian named Andrea Kelly stopped by a Québec horse stable to check on a pair of one-month-old foals, and had a friendly visit with the farm's staff. Three days later, she was dead. Kelly's death by suicide made headlines in Canada and elsewhere, sparking stories about the alarming mental health crisis in the veterinary community.</p>
<p>Kelly's death was well-publicised, also part of a grim pattern.</p>
<p>In 2021, 33-year-old Australian vet Sophie Putland died by suicide in Melbourne. Another Melbourne-based vet, Flynn Hargreaves, was just 27 when he took his life in 2018. In 2014, a Bronx, New York, veterinarian named Shirley Koshi died of an apparent suicide after months of being harassed and bullied by a pet owner. Later that same year, Sophia Yin, a pioneering animal behaviourist and renowned expert in the veterinary community, died by suicide at 48.</p>
<p>Between 1979 and 2015, according data from the US CDC National Center for Health Statistics, published in 2019, <a href="https://avmajournals.avma.org/view/journals/javma/254/1/javma.254.1.104.xml">nearly 400 veterinarians died by suicide</a>. The results showed male veterinarians are twice as likely and female veterinarians are close to four times as likely than the general population to die by suicide. Additionally, a study funded by pet food brand Royal Canin showed <a href="https://www.royalcanin.com/au/about-us/news/love-your-pet-love-your-vet-survey">nearly 70% of veterinarians have had a colleague or peer die by suicide</a>, and close to 60% have experienced work-related stress, anxiety or depression so severe it required professional help.</p>
<p>Researchers point to myriad causes fuelling the stark numbers around veterinarians' mental health crises. Financial factors play a part, as do the pressures and long hours of the job, expectations of pet owners and exposure to trauma and frequent euthanasia.</p>
<p>But the situation isn't hopeless: as the conversation around veterinarians' mental health gains traction, many practices have begun offering support and resources to their staff. Several have partnered with major suicide-prevention groups to try to make sure veterinary professionals and their colleagues know how to recognize warning signs before it's too late.&nbsp;</p>
<p><strong>'You're supposed to be in this to save animals, not kill them'</strong><strong>&nbsp;</strong></p>
<p>Emily Volk is a veterinarian who works overnights in an emergency clinic in New Jersey, US. Most of the cases she treats are critical: animals who've been in accidents or are seriously ill. "It's a very constant stream of trauma," she says.</p>
<p>But, she adds, the stress is "exponentially amplified" by the involvement of owners' personal finances. In the US, <a href="https://www.americanpetproducts.org/data-research/industry-trends-and-stats">pet owners in 2022 spent nearly $36bn (£29.5bn) at the vet</a>, according to the American Pet Products Association. And prices for care have risen throughout the past few decades; between 2021 and 2022 alone, <a href="https://apnews.com/article/inflation-health-economy-prices-pets-5e6ab45eb6e3e316a89158bb630a9835">inflation drove up veterinary costs in the US by 10%.</a>&nbsp;</p>
<p>"A lot of the time when we're talking about what we need to do for someone's pet, all they're hearing is the incredible cost," says Volk. "You get accused of only being here for the money. A couple of weeks ago, someone called me a thief."</p></div></div><div><p>The mental health crisis impacting the veterinary community</p></div><div><p>Very often, owners are unable to afford the treatments and surgeries to address their pets' ailments, which puts veterinarians in the difficult position of being medically able to help, but unable to administer care without fees. One of the most common criticisms veterinarians receive is that they're greedy. Doctors and staff are often asked to give discounts or waive fees, and owners can get upset when the answer is no.&nbsp;</p>
<p>"People just don't understand; they don't get that it is a business," says Jess Feliciano, a veterinary technician at the same emergency practice as Volk. "They want to know why we can't make it cheaper, or just bill them. We have people tell us, 'You're supposed to be in this to save animals, not kill them.' It's heart-breaking because it's all fuelled by emotion. People just want somewhere to point their anger."</p>
<p>Taylor Miller, a veterinarian, mental health counsellor and board member of Not One More Vet (NOMV), an advocacy non-profit founded <a href="https://www.nomv.org/about/story/">after the death</a> of Dr Yin, says these financially driven conflicts can cause deeply distressing ethical dilemmas. A contributor to poor mental health, she says, "is moral distress: the idea that I cannot accomplish what my sole purpose should be, which is to care for an animal, because there are barriers to that care, one of the largest of which is financial".</p>
<p>Veterinarians often have their own money woes, too. Veterinary school is both extremely selective and extremely expensive, meaning vets also carry large debt loads relative to their earnings. The US Bureau of Labor Statistics (BLS) reported in 2022 that <a href="https://www.bls.gov/oes/current/oes291131.htm">the median annual wage of a veterinarian in the US was just more than $100,000 (£82,000)</a>. Yet American Veterinary Medical Association (AVMA) reports the <a href="https://www.avma.org/blog/chart-month-good-news-student-debt">average debt for recent veterinary graduates</a> who needed loans to pay for their education is $179,505 (£147,250).&nbsp;</p>
<p>"A lot of us are in unbelievable amounts of debt," says Volk. "When I graduated in 2012, my personal student loan debt was at about $289,000. Despite a decade of payments, the total has increased because of interest, and right now it's at $460,000." Even if she wanted to stop being a veterinarian, she says she feels trapped: the sheer volume of sunk costs make transitioning to a new career feel close to impossible.&nbsp;</p>
<p>"The math of being a veterinarian just does not work out," she says. "There's definitely a feeling that, no matter what you do, no matter how hard you work, you're never getting out of that debt. And no matter how hard you work at your job, there's so many people that come to you for help and you can't help because of economic realities. You're always going to be failing somebody."<strong>&nbsp;</strong></p>
<p><strong>'Oh wow, you really don't know what I do'</strong></p>
<p>The work of a veterinarian is taxing, and the workload is made even heavier by a shortage of doctors. In the US, the American Animal Hospital Association reports a turnover rate near 25%, which means that, at any given time, <a href="https://www.aaha.org/publications/newstat/articles/2021-04/does-your-practice-have-a-turnover-problem/">one in four staff members are leaving their job</a>. With just one applicant for every 10 open veterinary jobs, that leaves most clinics chronically understaffed.</p>
<p>"Caseloads are absolutely astronomical," says Feliciano. "There are times when I'm working 80-plus hours a week. The doctors are overloaded, too: I've seen nights when a single doctor sees 20 or more cases in a 10-hour shift."</p></div><div id="worklife/article/20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody-p0gkmdv4"><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p0gkmdv4.webp" type="image/webp"><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p0gkmdv4.jpg" type="image/jpeg"><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p0gkmdv4.webp" type="image/webp"><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p0gkmdv4.jpg" type="image/jpeg"><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p0gkmdv4.webp" type="image/webp"><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p0gkmdv4.jpg" type="image/jpeg"><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p0gkmdv4.webp" type="image/webp"><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p0gkmdv4.jpg" type="image/jpeg"><img loading="lazy" draggable="false" title="Proximity to sickness and euthanasia can take a massive toll on vets, especially when owners put pressure on them (Credit: Getty Images)" src="https://ychef.files.bbci.co.uk/976x549/p0gkmdv4.jpg" alt="Proximity to sickness and euthanasia can take a massive toll on vets, especially when owners put pressure on them (Credit: Getty Images)" id=""></picture><div><p>Proximity to sickness and euthanasia can take a massive toll on vets, especially when owners put pressure on them (Credit: Getty Images)</p></div></div><div><p>In addition to working long hours for a paycheque that feels barely tenable, Feliciano says few people understand how emotionally taxing her job is. "The icing on the cake is we do so much, but get recognised for so little," she says. "I just recently had someone say, 'Oh, it must be nice to play with puppies all day!' And I'm like, oh wow, you <em>really </em>don't know what I do."</p>
<p>Veterinarians and their staff also deal with harassment and abuse from clients, both in person and online, in the form of negative reviews and even threats. A 2015 AVMA survey of about 350 US vets showed <a href="https://www.avma.org/javma-news/2015-09-15/cyberbullying-veterinary-medicine">one in five either had been cyberbullied or knew a colleague who had been</a>.&nbsp;</p>
<p>Last year, <a href="https://www.pressherald.com/2022/06/13/scarborough-veterinary-hospital-gets-dogpiled-over-viral-puppy-tale/">a viral story about a puppy that was surrendered to Maine Veterinary Medical Center</a> in Scarborough, Maine resulted in such intense online attacks and threats of violence that police had to be stationed outside the building.</p>
<p>The incident involved a four-month-old German Shepherd puppy who'd swallowed a skewer and needed emergency surgery life-saving surgery. The cost of the complicated procedure and after care was close to $10,000 – more than the owner could afford. As a last resort, to avoid euthanasia, the clinic offered her the option to surrender the puppy to a new owner who could cover the cost. When the former owner's story of attempting to get the puppy back aired on local television, it unleashed a "social media maelstrom", Maine Veterinary Medical Center wrote in a statement. They received "hourly threats to burn down the hospital and to kill our staff and their families. Our phone lines have been deliberately jammed so that real emergency calls cannot get through".</p>
<p>In response, NOMV organised a cyber-harassment task force to help practices avoid similar fallout. "This situation was unique to our practice, but it is not unique to the profession," said the clinic's statement. "Veterinary doctors are victims of threats and violence to such an extent that it is a national crisis."&nbsp;</p>
<p><strong>'We are seeing ourselves, emotionally, as hopeless cases'</strong></p>
<p>In his book Regarding Animals, author Arnold Arluke discusses what he calls the "<a href="https://www.researchgate.net/publication/229789256_The_Caring-Killing_Paradox_Euthanasia-Related_Strain_Among_Animal-Shelter_Workers1#:~:text=In%20addition%2C%20regardless%20of%20the,et%20al.%2C%202005)%20.">caring-killing paradox</a>": doctors who devote themselves to treating pets – sometimes for the animals' whole lives – must also euthanise many of their patients.</p>
<p>"There are numerous times where we treat a really, really sick pet where the owners want to do everything, and we do so much to get that pet stabilised and then lose them in the end," says Feliciano. It's traumatic, she adds, and often leads to herself or her colleagues breaking down in tears. "It's a response to what we've just been through, but we also have to keep on trucking to the next one."</p></div><div id="worklife/article/20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody-p0gkmf2w"><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p0gkmf2w.webp" type="image/webp"><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p0gkmf2w.jpg" type="image/jpeg"><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p0gkmf2w.webp" type="image/webp"><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p0gkmf2w.jpg" type="image/jpeg"><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p0gkmf2w.webp" type="image/webp"><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p0gkmf2w.jpg" type="image/jpeg"><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p0gkmf2w.webp" type="image/webp"><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p0gkmf2w.jpg" type="image/jpeg"><img loading="lazy" draggable="false" title="Resources are emerging for veterinarians struggling with mental health so professionals can protect both animals and themselves (Credit: Getty Images)" src="https://ychef.files.bbci.co.uk/976x549/p0gkmf2w.jpg" alt="Resources are emerging for veterinarians struggling with mental health so professionals can protect both animals and themselves (Credit: Getty Images)" id=""></picture><div><p>Resources are emerging for veterinarians struggling with mental health so professionals can protect both animals and themselves (Credit: Getty Images)</p></div></div><div><p>On occasion, says Feliciano, doctors and technicians are tasked with taking on even more of the emotional labour of euthanasia. "Not every owner can stay," she says. "They don't want to watch their pet take their last breath. They want to remember their good days and not this horrible day. And that's all understandable, but then it means they are going to leave that dog back there with me, saying goodbye and trying to distract them from looking around for the owners."</p>
<p>Other euthanasia circumstances are even more potentially traumatic for the doctors, says Miller. "When it comes to public health issues that impact our large animals, something like an outbreak of disease can mean veterinarians are responsible for slaughtering entire herds. Sometimes half the animals are healthy and normal, but for the good of the overall population, you know these healthy animals have to die. You understand it, but if you're the one making it happen, that's devastating."</p>
<p>More often, though, euthanasia feels like the just and merciful thing to do, says Volk, and it's far easier than watching an animal suffer.</p>
<p>But that reality of the job can also colour the way veterinarians view human lives – including their own – and for those already experiencing suicidal ideation, it can provide a simple justification: death is preferable to suffering. In a 2021 <a href="https://www.merck-animal-health-usa.com/wp-content/uploads/sites/54/2022/02/2021-PSV-Veterinary-Wellbeing-Presentation_V2.pdf">survey</a> by pharmaceutical company Merck, 12.5% of the <a href="https://www.merck-animal-health-usa.com/wp-content/uploads/sites/54/2022/02/2021-PSV-Veterinary-Wellbeing-Presentation_V2.pdf">veterinarians surveyed said they were "suffering"</a>. And nearly half of the respondents were not receiving mental health care.</p>
<p>"There's an idea that veterinarians work on the belief that it's right to euthanise a hopeless case," says Volk, "and we are seeing ourselves, emotionally, as hopeless cases."</p>
<p>Death is a routine and repeated part of the job, and while it's never easy to end a life, Volk adds that it is easy to start seeing it as an option to alleviate their own distress. "I have medications in my clinic that are called 'Euthasol', and I euthanise all the time," she says. "Literally like five or six times a night."</p>
<p>The CDC's 2019 study identified <a href="https://blogs.cdc.gov/niosh-science-blog/2019/09/04/veterinary-suicide/">poisoning as the most common cause of death among veterinarians</a>. The primary drug used was pentobarbital, one of the main medications used for animal euthanasia. The study’s authors determined that "training on euthanasia procedures and access to pentobarbital are some of the key factors contributing to the problem of suicide among veterinarians".</p></div><div id="worklife/article/20231010-the-acute-suicide-crisis-among-veterinarians-youre-always-going-to-be-failing-somebody-p0gkmr3j"><picture><source media="(min-width:624px)" srcset="https://ychef.files.bbci.co.uk/1024x1280/p0gkmr3j.webp" type="image/webp"><source media="(min-width:624px)" srcset="https://ychef.files.bbci.co.uk/1024x1280/p0gkmr3j.jpg" type="image/jpeg"><source media="(min-width:485px)" srcset="https://ychef.files.bbci.co.uk/885x1280/p0gkmr3j.webp" type="image/webp"><source media="(min-width:485px)" srcset="https://ychef.files.bbci.co.uk/885x1280/p0gkmr3j.jpg" type="image/jpeg"><source media="(min-width:320px)" srcset="https://ychef.files.bbci.co.uk/720x900/p0gkmr3j.webp" type="image/webp"><source media="(min-width:320px)" srcset="https://ychef.files.bbci.co.uk/720x900/p0gkmr3j.jpg" type="image/jpeg"><img loading="lazy" draggable="false" title="Organisations like Not One More Vet are helping veterinarians help recognise the signs of mental distress in themselves and their colleagues (Credit: Courtesy of NOMV)" src="https://ychef.files.bbci.co.uk/720x900/p0gkmr3j.jpg" alt="Organisations like Not One More Vet are helping veterinarians help recognise the signs of mental distress in themselves and their colleagues (Credit: Courtesy of NOMV)" id=""></picture><div><p>Organisations like Not One More Vet are helping veterinarians help recognise the signs of mental distress in themselves and their colleagues (Credit: Courtesy of NOMV)</p></div></div><div><p><strong>'Creating a place where it is safe to be imperfect'</strong><strong>&nbsp;</strong></p>
<p>The response to the stark statistics around veterinary suicide and mental health has been robust.&nbsp;</p>
<p>In autumn 2021, the AVMA held a roundtable discussion – the first of its kind – to address suicide prevention. The organisation now offers a host of resources, including a free course known as "gatekeeper training" to teach veterinary professionals who don't have a mental health background to recognise when their colleagues might be at risk.</p>
<p>Banfield Pet Hospital, the largest privately owned veterinary practice in the United States, operates more than 1,000 clinics inside PetSmart stores. In 2020, the company launched a training and awareness program to teach its thousands of employees to recognise <a href="https://afsp.org/risk-factors-protective-factors-and-warning-signs/">warning signs</a>, such as isolating or withdrawing behaviours, depressed, anxious, or agitated moods, giving away possessions or talking about suicide.</p>
<p>On social media, several groups aim to help veterinary professionals find solace among colleagues who get it. A NOMV program called Lifeboat provides online, anonymous peer-to-peer support.</p>
<p>"It's anonymous so that you can feel safe talking about mistakes you've made – the things that haunt your dreams – without having to feel like they know who you are and now, they won't refer to your hospital," says Miller. "Making mistakes is not safe in medicine. It's not safe to be imperfect. The goal with Lifeboat is creating a place where it is safe to be imperfect for a little bit, so you can work through it."</p>
<p>Veterinary suicides continue to generate headlines and stories about the pressures of the profession, but that visibility may be helping increase openness around the topic. Volk says the subject of emotional health comes up more than ever among her staff and colleagues. "I think I know what anti-anxiety and anti-depression meds everyone around me is on," she says. Volk also works diligently to make sure young doctors new to the profession are paying as much attention to their own well-being as their patients'.</p>
<p>"I am in a position of mentorship for the interns in our practice that are new grads, in their first year out of school," she says. "I do a lot of coaching with them about how to take care of themselves, too."</p></div></div></article></div>;</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Farm in Kenya to produce fossil-free fertilizer on site (110 pts)]]></title>
            <link>https://e360.yale.edu/digest/small-green-ammonia-plant-farm-kenya</link>
            <guid>37844074</guid>
            <pubDate>Wed, 11 Oct 2023 13:26:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://e360.yale.edu/digest/small-green-ammonia-plant-farm-kenya">https://e360.yale.edu/digest/small-green-ammonia-plant-farm-kenya</a>, See on <a href="https://news.ycombinator.com/item?id=37844074">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
                        
<div>

  <figure>

    <div>
      
                  
      <p><a href="https://e360.yale.edu/assets/site/_1500x1500_fit_center-center_80/1696532010383.jpg" data-caption="A fossil fuel-free ammonia plant at the Kenya Nut Company, near Nairobi." data-credit="Talus Renewables">
  
  
  
    
  
  
  
      
    
                
    
                
    
                
    
                
    
                
    
                
    
            
  <img sizes="(min-width: 1450px) 832px, (min-width: 620px) 620px, 100vw" srcset="https://e360.yale.edu/assets/site/1696532010383.jpg 2048w, https://e360.yale.edu/assets/site/_200xAUTO_stretch_center-center/1696532010383.jpg 200w, https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/1696532010383.jpg 400w, https://e360.yale.edu/assets/site/_600xAUTO_stretch_center-center/1696532010383.jpg 600w, https://e360.yale.edu/assets/site/_800xAUTO_stretch_center-center/1696532010383.jpg 800w, https://e360.yale.edu/assets/site/_1000xAUTO_stretch_center-center/1696532010383.jpg 1000w, https://e360.yale.edu/assets/site/_1200xAUTO_stretch_center-center/1696532010383.jpg 1200w, https://e360.yale.edu/assets/site/_1260xAUTO_stretch_center-center/1696532010383.jpg 1260w" src="https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/1696532010383.jpg" alt="A fossil fuel-free ammonia plant at the Kenya Nut Company, near Nairobi.">
</a>
      </p>
          </div>

        <figcaption>
              <p><span>A fossil fuel-free ammonia plant at the Kenya Nut Company, near Nairobi.</span>
          <span>Talus Renewables</span></p>
    </figcaption>
    
  </figure>

</div> <!-- imageBlock -->
                  

<div>
<p>The Kenya Nut Company, near Nairobi, will be the first farm in the world to produce fertilizer, on site, that’s free of fossil fuels.</p>
<p>A <a href="https://www.linkedin.com/feed/update/urn:li:activity:7115771002764042240/">small fertilizer plant</a>, built by U.S. startup Talus Renewables, will use solar power to strip hydrogen from water. The liberated hydrogen will then bond with nitrogen in the air to form liquid ammonia. Every day, the plant will produce 1 ton of ammonia, which can be applied to crops as fertilizer.</p>
<p>Typically, ammonia is made by isolating hydrogen from natural gas, not water, in a process that unleashes <a href="https://www.sciencedaily.com/releases/2021/06/210610150110.htm">large volumes</a> of heat-trapping carbon dioxide. Globally, the climate impact of <a href="https://www.iea.org/reports/ammonia-technology-roadmap">ammonia production</a> rivals that of <a href="https://www.iea.org/energy-system/transport/aviation">air travel</a>. </p>
<p>Because ammonia production relies so heavily on natural gas, it is also vulnerable to supply disruptions. Russia, a leading gas producer, is the world’s <a href="https://www.statista.com/statistics/1266244/global-ammonia-production-by-country/">second-biggest</a> maker of ammonia. Sanctions imposed after its invasion of Ukraine have <a href="https://www.weforum.org/agenda/2023/03/ukraine-fertilizer-food-security/">hindered</a> fertilizer exports, driving up prices globally. Farmers in East Africa have been hit <a href="https://foreignpolicy.com/2022/05/11/ukraine-russia-war-agriculture-food-hunger-crisis-east-africa/">especially hard</a>.</p>
<p>Green ammonia, made from water using clean power, promises to curb the climate impact of fertilizer. If produced on site, it could have the added benefit of insulating growers from supply shocks.</p>
<p>“The average bag of fertilizer in sub-Saharan Africa travels 10,000 kilometers,” Talus founder Hiro Iwanaga <a href="https://www.bloomberg.com/news/articles/2023-10-11/kenya-farm-to-host-first-on-site-hydrogen-to-fertilizer-plant-iowa-to-follow?srnd=green">told <em>Bloomberg</em></a>. With a small green ammonia plant, like the one coming online in Kenya, “you can locally produce a critical raw material, carbon free.”</p>
<h2>ALSO ON YALE E360</h2>
<p><a href="https://e360.yale.edu/features/from-fertilizer-to-fuel-can-green-ammonia-be-a-climate-fix"><strong><em>From Fertilizer to Fuel: Can ‘Green’ Ammonia Be a Climate Fix?</em></strong></a></p>
</div>
                  </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vulkan Documentation (131 pts)]]></title>
            <link>https://docs.vulkan.org/</link>
            <guid>37843946</guid>
            <pubDate>Wed, 11 Oct 2023 13:14:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://docs.vulkan.org/">https://docs.vulkan.org/</a>, See on <a href="https://news.ycombinator.com/item?id=37843946">Hacker News</a></p>
<div id="readability-page-1" class="page">
<p>The page you requested has been relocated to <a href="https://docs.vulkan.org/spec/latest/index.html">spec/latest/index.html</a>.</p>
</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bad Emacs defaults (161 pts)]]></title>
            <link>https://idiomdrottning.org/bad-emacs-defaults</link>
            <guid>37843908</guid>
            <pubDate>Wed, 11 Oct 2023 13:10:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://idiomdrottning.org/bad-emacs-defaults">https://idiomdrottning.org/bad-emacs-defaults</a>, See on <a href="https://news.ycombinator.com/item?id=37843908">Hacker News</a></p>
<div id="readability-page-1" class="page">
    <p>
      <a href="https://idiomdrottning.org/">
	<picture>
	  <source srcset="https://idiomdrottning.org/idiomdrottning_dark_thistle.png" media="(prefers-color-scheme: dark)">
	  <img src="https://idiomdrottning.org/idiomdrottning_just_thistle.png" alt="Idiomdrottning’s homepage">
	</picture>
      </a>
    </p>

    

<h2 id="littering-backup-files-all-over-the-place">Littering backup files all over the place</h2>

<p>Emacs by default leaves files~ and #files# all over.</p>

<p>This is annoying because those files may get autoloaded.</p>

<p>A solution is</p>

<pre><code>(make-directory "~/.emacs_backups/" t)
(make-directory "~/.emacs_autosave/" t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs_autosave/" t)))
(setq backup-directory-alist '(("." . "~/.emacs_backups/")))
</code></pre>

<p>I was working on a new installation where I didn’t have this in place
yet and I kept trying to update a shell function, re-sourcing it but
it never changed. Turns out it was loading from a backup~ of the same
file.</p>

<p>Thanks to Susam for figuring out a cleaner solution to what I
originally had here.</p>

<p>I also found that <a href="https://git.sr.ht/~technomancy/better-defaults" title="technomancy — better-defaults.el">technomancy has a post similar to this</a> and
this is the only overlap we had at first. People really don’t like
Emacs’ littering.♥</p>

<h2 id="backs-up-by-moving-the-actual-file">Backs up by moving the actual file</h2>

<pre><code>(setq backup-by-copying t)
</code></pre>

<p>The default is <code>nil</code> and that means that every time it makes one of
those backups~, it actually moves your file there, copies the backup
to the original name, and gives you the copy to work on. This isn’t
just a philosophical dilemma (“Am I a butterfly that dreams I am a
backup~?”) but actually breaks hardlinks. I can’t believe this is the default.</p>

<h2 id="sentences-have-two-spaces-between-them">Sentences have two spaces between them</h2>

<pre><code>(setq sentence-end-double-space nil)
</code></pre>

<p>The default is <code>t</code> which might’ve made sense in the typewriter era but
not only messes up filling paragraphs, it also borks the wonderful
family of forward-sentence, kill-sentence, transpose-sentences etc.</p>

<p>If you like the double-spaces between sentences in paragraphs (which I
don’t) but want to be able to use the sentence commands on text,
<a href="https://github.com/duckwork/fill-sentences-correctly.el/blob/main/fill-sentences-correctly.el" title="fill-sentences-correctly.el">a friend of mine has a solution</a>.</p>

<h2 id="indentation-tabs-and-spaces">Indentation, tabs, and spaces</h2>

<p>Emacs famously has its idiosyncratic brace style and indentation style
using a mix of tabs and spaces that no-one else uses.</p>

<p>Which would be fine in a vacuum but you end up fighting it when making
changes in other people’s projects.</p>

<p>We’re on a super AI Lisp genius pile, can’t it figure it out from the
rest of the file or the other files in the directory?</p>

<p>rrthomas and link2xt both wrote in suggesting <a href="https://github.com/jscheid/dtrt-indent/">dtrt-indent</a> which,
you’re gonna have to use a package for this one.</p>

<p>If you’re using straight.el:</p>

<pre><code>(straight-use-package 'dtrt-indent)
(require 'dtrt-indent)
</code></pre>

<p>If you’re using the default package installer:</p>

<pre><code>(unless (package-installed-p 'dtrt-indent) (package-install 'dtrt-indent)))
</code></pre>

<p>Then, to turn it on:</p>

<pre><code>(setq dtrt-indent-global-mode t)
</code></pre>

<p>And then, once you’re sure you’ve got it set up the way you want to,
and you wanna hide it from the modeline:</p>

<pre><code>(setcar (alist-get 'dtrt-indent-mode minor-mode-alist) "")
</code></pre>

<p><small>Usually, in Emacs, shadowing an alist by pushing to head works but it didn’t for this, hence the setcar shenanigans.</small></p>

<p>There also <a href="https://github.com/editorconfig/editorconfig-emacs" title="EditorConfig plugin for Emacs">Editor Config</a> which you can install and hide (once you know if it works) similarly.</p>

<h2 id="ctrl-h-doesnt-delete-backwards">Ctrl-H doesn’t delete backwards</h2>

<p>C-h being a convenient, home row way to backspace has been a thing
since the original ASCII table was laid out, and is a staple feature
whenever you see “Emacs shortcuts supported” like bash or zsh. Except
in Emacs itself, where it launches a huge, prompting,
window-splitting help affair.</p>

<p>This was the first Emacs setting I ever changed.</p>

<p>Not sure what’s the best way to do it; I use:</p>

<pre><code>(global-set-key [(control h)] 'delete-backward-char)
(keyboard-translate ?\C-h ?\C-?)
</code></pre>

<h2 id="require-final-newline">require-final-newline</h2>

<pre><code>(setq require-final-newline t)
</code></pre>

<p><a href="https://git.sr.ht/~technomancy/better-defaults" title="technomancy — better-defaults.el">Technomancy’s setup</a> reminded me of this one, which I also use. Not always what you want but most of the time, and, should definitively have been the default especially on bash. Things can get weird when your files don’t end in a newline.</p>

<h2 id="frame-inhibit-implied-resize">frame-inhibit-implied-resize</h2>

<p>From <a href="https://tony-zorman.com/posts/2022-10-22-emacs-potpourri.html" title="A Potpourri of Emacs Tweaks – Tony Zorman">Tony Zorman’s Potpourri of Emacs Tweaks</a> there’s a perfect example of an “I can’t believe <code>nil</code> is the default”:</p>

<pre><code>(setq frame-inhibit-implied-resize t)
</code></pre>

<p>Without this, Emacs will try to resize itself to a specific column
size, but like Tony, I’m on a tiling wm, and I change font sizes all
the time, so this is no good.</p>

<p>He also suggests</p>

<pre><code>(setq pixel-scroll-precision-mode t)
</code></pre>

<p>and his description for why does make sense to me, but my older
installation of Emacs doesn’t have that variable yet.</p>

<h2 id="show-trailing-whitespace">show-trailing-whitespace</h2>

<p>This is a mixed bag because it can drive some people crazy so while it
shouldn’t be on for everyone, it should probably be the default:</p>

<pre><code>(setq show-trailing-whitespace t)
</code></pre>

<p>This will highlight whitespace at the end of your lines.</p>

<p>This is good not only for showing whitespace you’ve put there by
mistake, it’s also <a href="https://idiomdrottning.org/show-trailing-whitespace" title="show-trailing-whitespace is my friend">a great way to keep track of unfinished parts your
file</a>.</p>

<p>One reason to turn it back off might be if you’re chatting with people
who leave trailing whitespaces or if you’re working in code repos with
lots of trailing whitespaces. But it’s something that you can toggle
on and off as you please.</p>

<h2 id="bonus-kill-whole-line">Bonus: Kill whole line</h2>

<p>The fact that Emacs just clears the line, not kill it, when there is
no prefix arg is maybe not such a bad default. Starting out, I
actually liked it, compared to vi. But the more time passes the less I
like it. Pretty much all of the time I found myself hitting <code>1k</code>
instead of just <code>k</code>. Thankfully, there is:</p>

<pre><code>(setq kill-whole-line t)
</code></pre>

<p>It kills up to newline if I’m not at column zero, but kills the whole
line (newline and all) if I am at column zero. Pretty happy with that.</p>

  

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: OpenLLMetry – OpenTelemetry-based observability for LLMs (102 pts)]]></title>
            <link>https://github.com/traceloop/openllmetry</link>
            <guid>37843907</guid>
            <pubDate>Wed, 11 Oct 2023 13:10:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/traceloop/openllmetry">https://github.com/traceloop/openllmetry</a>, See on <a href="https://news.ycombinator.com/item?id=37843907">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto">
<a href="https://www.traceloop.com/" rel="nofollow">
<img width="300" src="https://raw.githubusercontent.com/traceloop/openllmetry/main/img/logo.png">
</a>
</p>
<h2 tabindex="-1" id="user-content-open-llmetry" dir="auto"><a href="#open-llmetry">Open LLMetry</a></h2>
<p dir="auto">Open-source observability for your LLM application</p>

<h4 tabindex="-1" id="user-content-----get-started-----------slack---docs---website" dir="auto"><a href="#----get-started-----------slack---docs---website">
    </a><a href="https://traceloop.com/docs/python-sdk/getting-started" rel="nofollow"><strong>Get started »</strong></a>
    <p>
    
  <a href="https://join.slack.com/t/traceloopcommunity/shared_invite/zt-1plpfpm6r-zOHKI028VkpcWdobX65C~g" rel="nofollow">Slack</a> |
  <a href="https://traceloop.com/docs/python-sdk/introduction" rel="nofollow">Docs</a> |
  <a href="https://www.traceloop.com/" rel="nofollow">Website</a></p></h4>
<h4 tabindex="-1" id="user-content--------------------------------------------" dir="auto"><a href="#-------------------------------------------">
   </a><a href="https://github.com/traceloop/openllmetry/blob/main/LICENSE">
    <img src="https://camo.githubusercontent.com/c82128864e9e7786e2002b6841a64ed07fe8b117d9cddf04207be5ac44607809/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d41706163686520322e302d626c75652e737667" alt="OpenLLMetry is released under the Apache-2.0 License" data-canonical-src="https://img.shields.io/badge/license-Apache 2.0-blue.svg">
  </a>
  <a href="https://www.ycombinator.com/companies/traceloop" rel="nofollow"><img src="https://camo.githubusercontent.com/0fdead1cddbf2cdeb7e61bdddeb9527d1f3bcbdfb5582d1794a3b833641a37a8/68747470733a2f2f696d672e736869656c64732e696f2f776562736974653f636f6c6f723d25323366323635323226646f776e5f6d6573736167653d59253230436f6d62696e61746f72266c6162656c3d4261636b6564266c6f676f3d79636f6d62696e61746f72267374796c653d666c61742d7371756172652675705f6d6573736167653d59253230436f6d62696e61746f722675726c3d68747470732533412532462532467777772e79636f6d62696e61746f722e636f6d" data-canonical-src="https://img.shields.io/website?color=%23f26522&amp;down_message=Y%20Combinator&amp;label=Backed&amp;logo=ycombinator&amp;style=flat-square&amp;up_message=Y%20Combinator&amp;url=https%3A%2F%2Fwww.ycombinator.com"></a>
  <a href="https://github.com/traceloop/openllmetry/blob/main/CONTRIBUTING.md">
    <img src="https://camo.githubusercontent.com/f9c5499f3a5e5a9516b9c40e700535d96426dd0dc32b3f4ba64164d87807ba2a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d57656c636f6d652d627269676874677265656e" alt="PRs welcome!" data-canonical-src="https://img.shields.io/badge/PRs-Welcome-brightgreen">
  </a>
  <a href="https://github.com/traceloop/openllmetry/issues">
    <img src="https://camo.githubusercontent.com/d61505dcbd55b0ea000748bbdcc6b9a64a87b4ae6598f41f4a751021787bcbbc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f74726163656c6f6f702f6f70656e6c6c6d65747279" alt="git commit activity" data-canonical-src="https://img.shields.io/github/commit-activity/m/traceloop/openllmetry">
  </a>
  <a href="https://join.slack.com/t/traceloopcommunity/shared_invite/zt-1plpfpm6r-zOHKI028VkpcWdobX65C~g" rel="nofollow">
    <img src="https://camo.githubusercontent.com/7b4b98387d228c64f516f16aed0674b7b9c3a32eb46e12504c51ab2777d6ab76/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230536c61636b2d626c756576696f6c6574" alt="Slack community channel" data-canonical-src="https://img.shields.io/badge/chat-on%20Slack-blueviolet">
  </a>
  <a href="https://twitter.com/traceloopdev" rel="nofollow">
    <img src="https://camo.githubusercontent.com/381eee48c1d14ab8c39d476b8945c6b4d2031e4c4059d355da47d16ab11070db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f666f6c6c6f772d25343074726163656c6f6f706465762d3144413146323f6c6f676f3d74776974746572267374796c653d736f6369616c" alt="Traceloop Twitter" data-canonical-src="https://img.shields.io/badge/follow-%40traceloopdev-1DA1F2?logo=twitter&amp;style=social">
  </a>
</h4>
<p dir="auto">OpenLLMetry is a set of extensions built on top of <a href="https://opentelemetry.io/" rel="nofollow">OpenTelemetry</a> that gives you complete observability over your LLM application. Because it uses OpenTelemetry under the hood, it can be connected to your existing observability solutions - Datadog, Honeycomb, and others.</p>
<p dir="auto">It's built and maintained by Traceloop under the Apache 2.0 license.</p>
<p dir="auto">The repo contains standard OpenTelemetry instrumentations for LLM providers and Vector DBs, as well as a Traceloop SDK that makes it easy to get started with OpenLLMetry, while still outputting standard OpenTelemetry data that can be connected to your observability stack.
If you already have OpenTelemetry instrumented, you can just add any of our instrumentations directly.</p>
<h2 tabindex="-1" id="user-content--getting-started" dir="auto"><a href="#-getting-started">🚀 Getting Started</a></h2>
<p dir="auto">The easiest way to get started is to use our SDK.
For a complete guide, go to our <a href="https://traceloop.com/docs/python-sdk/getting-started" rel="nofollow">docs</a>.</p>
<p dir="auto">Install the SDK:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install traceloop-sdk"><pre><span>pip</span> <span>install</span> <span>traceloop</span><span>-</span><span>sdk</span></pre></div>
<p dir="auto">Then, to start instrumenting your code, just add this line to your code:</p>
<div dir="auto" data-snippet-clipboard-copy-content="from traceloop.sdk import Traceloop

Traceloop.init(app_name=&quot;your_app_name&quot;)"><pre><span>from</span> <span>traceloop</span>.<span>sdk</span> <span>import</span> <span>Traceloop</span>

<span>Traceloop</span>.<span>init</span>(<span>app_name</span><span>=</span><span>"your_app_name"</span>)</pre></div>
<p dir="auto">That's it. You're now tracing your code with OpenLLMetry!
If you're running this locally, you may want to disable batch sending, so you can see the traces immediately:</p>
<div dir="auto" data-snippet-clipboard-copy-content="Traceloop.init(app_name=&quot;your_app_name&quot;, disable_batch=True)"><pre><span>Traceloop</span>.<span>init</span>(<span>app_name</span><span>=</span><span>"your_app_name"</span>, <span>disable_batch</span><span>=</span><span>True</span>)</pre></div>
<p dir="auto">Now, you need to decide where to export the traces to.</p>
<h2 tabindex="-1" id="user-content--supported-destinations" dir="auto"><a href="#-supported-destinations">⏫ Supported destinations</a></h2>
<ul>
<li> Traceloop</li>
<li> Datadog</li>
<li> New Relic</li>
<li> Honeycomb</li>
<li> SigNoz</li>
</ul>
<p dir="auto">See <a href="https://traceloop.com/docs/python-sdk/exporting" rel="nofollow">our docs</a> for instructions on how to connect to each one.</p>
<h2 tabindex="-1" id="user-content--what-do-we-instrument" dir="auto"><a href="#-what-do-we-instrument">🪗 What do we instrument?</a></h2>
<p dir="auto">OpenLLMetry can instrument everything that <a href="https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation">OpenTelemetry already instruments</a> - so things like your DB, API calls, and more. On top of that, we built a set of custom extensions that instrument things like your calls to OpenAI or Anthropic, or your Vector DB like Pinecone, Chroma, or Weaviate.</p>
<h3 tabindex="-1" id="user-content-llm-providers" dir="auto"><a href="#llm-providers">LLM Providers</a></h3>
<ul>
<li> OpenAI / Azure OpenAI</li>
<li> Anthropic</li>
<li> Cohere</li>
<li> Replicate</li>
<li> HuggingFace</li>
<li> Vertex AI (GCP)</li>
<li> Bedrock (AWS)</li>
</ul>
<h3 tabindex="-1" id="user-content-vector-dbs" dir="auto"><a href="#vector-dbs">Vector DBs</a></h3>
<ul>
<li> Pinecone</li>
<li> Chroma</li>
<li> Weaviate</li>
<li> Milvus</li>
</ul>
<h3 tabindex="-1" id="user-content-frameworks" dir="auto"><a href="#frameworks">Frameworks</a></h3>
<ul>
<li> LangChain</li>
<li> Haystack</li>
<li> LlamaIndex</li>
</ul>
<h2 tabindex="-1" id="user-content--contributing" dir="auto"><a href="#-contributing">🌱 Contributing</a></h2>
<p dir="auto">Whether it's big or small, we love contributions ❤️ Check out our guide to see how to <a href="https://traceloop.com/docs/python-sdk/contributing/overview" rel="nofollow">get started</a>.</p>
<p dir="auto">Not sure where to get started? You can:</p>
<ul dir="auto">
<li><a href="mailto:nir@traceloop.com?subject=Pairing%20session&amp;body=I'd%20like%20to%20do%20a%20pairing%20session!">Book a free pairing session with one of our teammates</a>!</li>
<li>Join our <a href="https://join.slack.com/t/traceloopcommunity/shared_invite/zt-1plpfpm6r-zOHKI028VkpcWdobX65C~g" rel="nofollow">Slack</a>, and ask us any questions there.</li>
</ul>
<h2 tabindex="-1" id="user-content--community--support" dir="auto"><a href="#-community--support">💚 Community &amp; Support</a></h2>
<ul dir="auto">
<li><a href="https://join.slack.com/t/traceloopcommunity/shared_invite/zt-1plpfpm6r-zOHKI028VkpcWdobX65C~g" rel="nofollow">Slack</a> (For live discussion with the community and the Traceloop team)</li>
<li><a href="https://github.com/traceloop/openllmetry/discussions">GitHub Discussions</a> (For help with building and deeper conversations about features)</li>
<li><a href="https://github.com/traceloop/openllmetry/issues">GitHub Issues</a> (For any bugs and errors you encounter using OpenLLMetry)</li>
<li><a href="https://twitter.com/traceloopdev" rel="nofollow">Twitter</a> (Get news fast)</li>
</ul>
<h2 tabindex="-1" id="user-content--special-thanks" dir="auto"><a href="#-special-thanks">🙏 Special Thanks</a></h2>
<p dir="auto">To @patrickdebois, who <a href="https://x.com/patrickdebois/status/1695518950715473991?s=46&amp;t=zn2SOuJcSVq-Pe2Ysevzkg" rel="nofollow">suggested the great name</a> we're now using for this repo!</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I'm Sorry I Bit You During My Job Interview (215 pts)]]></title>
            <link>https://www.mcsweeneys.net/articles/im-sorry-i-bit-you-during-my-job-interview</link>
            <guid>37843855</guid>
            <pubDate>Wed, 11 Oct 2023 13:04:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.mcsweeneys.net/articles/im-sorry-i-bit-you-during-my-job-interview">https://www.mcsweeneys.net/articles/im-sorry-i-bit-you-during-my-job-interview</a>, See on <a href="https://news.ycombinator.com/item?id=37843855">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Dear Robert,</p><p>
&nbsp;
Thank you for taking the time to interview me for the junior analyst position at Rawles and Hilt. It was great to meet with you and learn more about the company. Please don’t hesitate to call or email me if you have any more questions.</p><p>
&nbsp;
Also, I just wanted to say I’m sorry I bit you during the interview.</p><p>
&nbsp;
Obviously, there is no excuse for biting anyone. But I feel the need to explain what I was thinking at the time, in the hope that it might mitigate my disappointing conduct. </p><p>
&nbsp;
The interview was going fine until you threw me a curveball: “Could you talk about your previous work experience?” you asked. I panicked. It’s clear to me now that I should have just answered honestly (“No, I can’t”), but instead, I shrieked and bit you hard on the collarbone. The instant after I’d done it, I knew I’d messed up. It’s a testament to your professionalism that you were even willing to continue our interview after such a regrettable lack of judgment on my part. </p><p>
&nbsp;
The second time I bit you, I think I was just hungry. Full disclosure: I hadn’t had any breakfast that morning (Okay. Full, full disclosure: I’d had a small breakfast.) When your fingers passed near my mouth, they actually did that cartoon desert-island thing where they seemed to morph into sausages. I think I was still hungry for sausages after the sausages I had eaten right before the interview, so I bit you again. If I’d only stopped and taken a moment to assess the situation, I would have remembered: sausages don’t grow out of human hands. But unfortunately, I didn’t. The sad irony is that my briefcase was full of leftover sausages from breakfast. That’s why my résumé was so greasy.</p><p>
&nbsp;
The third time I bit you, it was supposed to be a joke. In retrospect, I’m not sure it came off that way. I was trying to break the tension created by me biting you and you being all weird about it. It was meant to be playful, like, “Haha. I’m biting you again because I guess I’m ‘The Biting Guy’ now.” But after sinking my teeth into the tender flesh of your calf muscle and holding on for 30 seconds, it started to seem like you weren’t getting it. It’s obvious to me now that I was misinterpreting your screams of pain as screams of pained laughter. </p><p>
&nbsp;
The fourth time I bit you was honestly your fault. If someone who has already bitten you several times is standing on your desk, completely naked and snarling, don’t make any sudden movements! That’s practically a recipe for getting bitten. If this situation ever arises again, play dead. Lie on the ground in a fetal position. Curl your face toward your knees and make sure to protect your vulnerable neck area. This will tend to reduce the level of injury sustained in the event of an attack. Once I’ve realized you are not a threat, I will generally show no further interest.</p><p>
&nbsp;
Frankly, I think this all goes back to my childhood, when I would constantly bite people for no reason. I also did this as a teenager and an adult. </p><p>
&nbsp;
Regardless, I am extremely sorry for biting you. I hope you can look past this (not to mention my lack of experience with Excel macros) when making a final hiring decision. After all, who hasn’t freaked out and bitten someone during a job interview at some point in their life?</p><p>
&nbsp;
Sincerely,<br>
Mike Edling</p><p>
&nbsp;
P.S. Please apologize to everyone I bit on my way out of your office.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["We'll call it AI to sell it, Machine Learning to Build it" (279 pts)]]></title>
            <link>https://theaiunderwriter.substack.com/p/well-call-it-ai-to-sell-it-machine</link>
            <guid>37843595</guid>
            <pubDate>Wed, 11 Oct 2023 12:30:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theaiunderwriter.substack.com/p/well-call-it-ai-to-sell-it-machine">https://theaiunderwriter.substack.com/p/well-call-it-ai-to-sell-it-machine</a>, See on <a href="https://news.ycombinator.com/item?id=37843595">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h4>Discover more from The AI Underwriter</h4><p>Machine Learning and AI in (re)insurance. Plus- trading, risk, quantitative finance, books. And some stories for my kids.

Disclaimer: Blog represents my personal views and not those of my employer or anyone else</p> </div><div dir="auto"><p><strong>Start Disclaimer: </strong><span>The views and opinions expressed in this blog are entirely my own and do not necessarily reflect the views of my current or any previous employer. The information shared is for informational and discussion purposes only. Any reliance on the information provided in this blog is at your own risk. I do not make any representations or warranties regarding the accuracy, completeness, or suitability of the information.</span></p><p>This blog may also contain links to other websites or resources. I am not responsible for the content on those external sites or any changes that may occur after the publication of my posts. </p><p><strong>End Disclaimer</strong></p><p><em>“Step right up and take a peak, I have a Grade-A, bon-a-fide AI product right here. Good for what ails you! Powered by AI as they like to say! Harness the power of computers with Artificial Intelligence! What's that you say? How’s it work? Well, why, this is AI for ‘x’ right here. Guaranteed to solve your problems, grow back your follicles, even fix that bout of gout in your big toe! It is the future after all. The Singularity and such, believe they call that A-G-I.”</em></p><p><em>Wait, what are you doing? No, no, no, don’t peek behind the curtain there, nothing to see, wait, stop, no!”</em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png" width="300" height="300" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:512,&quot;width&quot;:512,&quot;resizeWidth&quot;:300,&quot;bytes&quot;:515767,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Good for what ails you</figcaption></figure></div><p><span>So genAI is here. Ask anything, learn anything, produce any image, any video.&nbsp; Remember how big it was when AlphaGo beat the world in 2016? I do. It was awesome. Well, beating Go, as impressive as that is,&nbsp;is a constrained (albeit very difficult) machine intelligence application( Demis, don’t unfriend me!) A year later we got the </span><a href="https://arxiv.org/abs/1706.03762" rel="">Transformers paper</a><span>. In 2023, it took ChatGPT two months to acquire 100 million users. This is only the beginning. As philosopher David Friedman says, “Today’s AI is the worst you will ever use.” GenAI is already pretty amazing, and OpenAI has been casually dropping big improvements every couple of weeks. So that’s a lot of real coolness mixed with a lot of hype, and people will take advantage of that hype.</span></p><p><span>In the run up to Uber’s IPO in 2019, venture capital funds were flooded with pitches from startups offering “Uber for X”. Uber for parking spaces. Uber for home cleaning. Some succeeded. More failed.&nbsp; </span><strong>There’s a lot of “AI for x” sales pitches coming.</strong><span> Some will be real. More won’t be- especially given the visibility and zeitgeist around GPT. The paint isn't even dry yet on the “crypto-expert-turned-AI-expert” quick change emanating from crypto's most recent FTX-induced winter.&nbsp;</span></p><p>I’ve had salespeople pitch me their AI expertise only to find the algorithms in their pitchbooks mislabeled.&nbsp; I’ve been told that a product was “driven by AI” only to find out it was driven by “if-then” statements. I’ve been told that documents and disparate knowledge could be stripped and stitched back together again using the finest in NLP technology, only to find out that the tech that stitched it together again were human hands and keystrokes in between cigarette breaks at an office building in Southeast Asia.</p><p><span>So, who cares?&nbsp; I get it. Everybody’s got to make a living. Why does this bother me so much? Cause it’s not telling the truth and it's taking advantage of people. Using big AI words to hide the truth and claim expertise. Richard Feynman (always need a&nbsp;Feynman anecdote) talks about knowing that “names don’t constitute knowledge”. Purporting to know the name of the thing is not knowing the thing. </span><strong>Selling the name of the thing is not always selling the thing.</strong></p><p><span>So be cautious when a salesperson comes knocking on your door with an “AI solution” that fixes everything. </span><strong>Anyone I ever worked with who actually builds things calls it machine learning anyway.</strong><span> </span></p><p>Here are some questions to help establish vendor credibility:</p><p><strong>Ask them what broad swath of machine learning is involved in the product</strong><span>.-&nbsp; e.g. supervised, unsupervised, a certain type of neural net architecture, etc&nbsp;</span></p><p><strong>Ask them the names of the algorithms behind the AI</strong><span>- XGBoost, BERT, whatever</span></p><p><strong>What does the model predict for? </strong><span>The actual prediction output- is it 1/0, yes/no, a number?</span></p><p><strong>Ask them what objective function (also called loss or cost function) the model is optimizing for</strong><span>- what is the error the model is trying to minimize?</span></p><p><strong>What metrics do they use to measure model efficacy?</strong><span> Closely related to objective function question. How do they know how well the model is able to generalize on unseen data?</span></p><p><strong>Ask them how often they change up their model</strong><span>- cadence and reasons why</span></p><p><strong>How much are humans involved in this “AI solution”?</strong><span>- many automation tasks like </span><a href="https://en.wikipedia.org/wiki/Named-entity_recognition" rel="">NER</a><span>  and document </span><a href="https://en.wikipedia.org/wiki/Optical_character_recognition" rel="">OCR</a><span> that get sold as AI fall somewhere on the continuum of machine learning and mechanical turk. What’s the split?&nbsp;</span></p><p><strong>Bonus and especially relevant question</strong><span>- are they selling </span><strong>“GPT as a service” (GaaS- trademark pending, thank you, I’ll see myself out)</strong><span>. This means that their user-facing GUI is a thin wrapper around GPT </span><a href="https://en.wikipedia.org/wiki/API" rel="">api</a><span> and there might not be any added benefit (but added costs) with the service.</span></p><p>To be forewarned is to be forearmed.&nbsp;</p><p><strong>Machine Learning is magic.</strong><span> Ask anyone who does it. It's alchemy. There’s going to be some great AI products coming out, but also some stinkers, and some AI “wolf in sheep’s clothing”.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png" width="314" height="314" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:512,&quot;width&quot;:512,&quot;resizeWidth&quot;:314,&quot;bytes&quot;:426846,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>… </span><strong>It's me, hi, I'm the problem, it's me</strong></figcaption></figure></div><p><span>Ask questions. </span><strong>Don’t be left obfuscated by nomenclature</strong><span>. Wait a second…Phew!- those are some big words there in that last sentence! I’m exhausted from sounding so smart- see what I mean? Don't be bullied or confused by technical sounding terms in AI. &nbsp;Every big AI word can be decomposed into an intuitive explanation. Don’t get duped. Keep going. You can do it. </span><strong>Don’t slow down.</strong></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stockholm to ban petrol and diesel cars from centre from 2025 (136 pts)]]></title>
            <link>https://www.theguardian.com/world/2023/oct/11/stockholm-ban-petrol-and-diesel-cars-city-centre-2025-swedish-capital-pollution</link>
            <guid>37843578</guid>
            <pubDate>Wed, 11 Oct 2023 12:26:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/world/2023/oct/11/stockholm-ban-petrol-and-diesel-cars-city-centre-2025-swedish-capital-pollution">https://www.theguardian.com/world/2023/oct/11/stockholm-ban-petrol-and-diesel-cars-city-centre-2025-swedish-capital-pollution</a>, See on <a href="https://news.ycombinator.com/item?id=37843578">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Stockholm has announced plans to become the first big capital city to ban petrol and diesel cars from its centre, in an effort to slash pollution and reduce noise.</p><p>From 2025, 20 blocks of Stockholm’s inner city area, spanning its finance and main shopping districts, will be restricted to electric vehicle traffic only. A decision on whether to expand the zone will be made in early 2025.</p><p>Announcing the plan, Lars Stromgren, the city’s vice-mayor for transport, said: “Nowadays, the air in Stockholm causes babies to have lung conditions and the elderly to die prematurely. We need to eliminate the harmful exhaust gases from petrol and diesel cars. That’s why we are introducing the most ambitious low-emission zone to date.”</p><p>A number of cities have introduced – or are introducing – schemes to try to tackle air pollution but Stockholm’s goes further than most. Paris, Athens and Madrid have only banned diesel cars, and London has a charging scheme that covers the most polluting combustion engines.</p><p>“Many cities have implemented low-emission zones where high-emission cars are allowed to drive if they pay a charge,” Stromgren was quoted as saying by <a href="https://airqualitynews.com/headlines/stockholm-to-ban-all-petrol-and-diesel-cars-from-city-centre/" data-link-name="in body link">Air Quality News</a>. “Stockholm’s model is more far-reaching. Petrol and diesel cars are prohibited, period. It is more ‘ultra’ than the ultra-low emission zone of London.</p><p>“We have chosen an area where large numbers of cyclists and pedestrians are exposed to unhealthy air on a daily basis. It is also a part of the city that is home to forward-thinking companies that are keen to lead the transition to a more sustainable future.”</p><p>There are caveats to the scheme. While it is primarily intended to allow for only fully electric cars, bigger vans with plug-in hybrid engines will also be allowed, and exceptions will be made for ambulances and police cars, as well as cars in which the driver or passenger has a documented disability.</p><p>Sweden’s Green party is part of a coalition of leftwing and environmentally focused parties that holds power in Stockholm’s municipal government. The Greens said they hoped the low emission zone would bolster the take-up of electric vehicles.</p><p>Transport industry representatives said the plan was too radical. “Since 2010, we have reduced emissions by 34%. But the Green party and their colleagues in the city of Stockholm are now in far too much of a hurry,” the Swedish Confederation of Transport Enterprises said.</p><p><em>Reuters contributed to this report</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bookworm – the new version of Raspberry Pi OS (164 pts)]]></title>
            <link>https://www.raspberrypi.com/news/bookworm-the-new-version-of-raspberry-pi-os/</link>
            <guid>37843570</guid>
            <pubDate>Wed, 11 Oct 2023 12:26:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.raspberrypi.com/news/bookworm-the-new-version-of-raspberry-pi-os/">https://www.raspberrypi.com/news/bookworm-the-new-version-of-raspberry-pi-os/</a>, See on <a href="https://news.ycombinator.com/item?id=37843570">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
<p>It’s an odd-numbered year, so there is a new major Debian release, and we are now releasing the corresponding version of Raspberry Pi OS.</p>



<p>This year’s Debian release is called Bookworm. (As you probably know, Debian releases are named after characters in Disney/Pixar’s <em>Toy Story</em> franchise, but there have now been so many releases that all the characters you might have heard of have already been used. Bookworm was a minor character in <em>Toy Story 3</em> — and no, I didn’t remember him either…)</p>


<div>
<figure><img decoding="async" loading="lazy" width="503" height="427" src="https://www.raspberrypi.com/app/uploads/2023/09/311186C6-D83E-494B-9767-91A768E4AD53.webp" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/311186C6-D83E-494B-9767-91A768E4AD53.webp 503w, https://www.raspberrypi.com/app/uploads/2023/09/311186C6-D83E-494B-9767-91A768E4AD53-300x255.webp 300w, https://www.raspberrypi.com/app/uploads/2023/09/311186C6-D83E-494B-9767-91A768E4AD53-450x382.webp 450w" sizes="(max-width: 503px) 100vw, 503px"></figure></div>






<p>So what is new in Bookworm? Well, not a great deal… and yet pretty much everything. Allow me to explain.</p>



<p>Debian Bookworm itself is mostly made up of incremental updates of the software that was in the previous Debian Bullseye release. There are a few small changes — have a look <a href="https://wiki.debian.org/NewInBookworm">here</a> for the list — but they mostly won’t affect Raspberry Pi users. So Bookworm itself really hasn’t resulted in many changes.</p>



<p>However, for the last year or so we have been working on some major architectural changes to the Raspberry Pi Desktop, and these are launched for the first time in the Bookworm release. And this is where you might notice some differences.</p>



<h2>Wayland</h2>



<p>The most important of these is the move to using <a href="https://wayland.freedesktop.org/">Wayland</a> rather than X11 as the display system.</p>



<p>For the last 35 years or so, most Unix desktop environments, including the Raspberry Pi Desktop, have been based on the X11 window system. But, as is hardly surprising for a piece of software several decades old, X11 has various limitations when used on modern computers. To address these, most Linux distributions are moving to use Wayland; those which have not already done so are planning to do so in the future.</p>



<p>The primary advantage of Wayland is performance. Under X11, there are two separate applications involved in drawing a window. The display server is used to create windows on the screen and to give applications a place to draw their content; the window manager is used to position windows relative to each other and to decorate windows with title bars and frames. Under a Wayland system, these two functions are combined in a single application, called the compositor, so an application only needs to talk to one thing rather than two in order to get its windows drawn.</p>



<p>This also gives a security advantage. Because under X11 all applications were communicating with the display server, and this communication was two-way, all applications could exchange information with each other. Under Wayland, applications are all isolated from each other at the compositor level, so no application can see what another application is doing.</p>



<p>Wayland itself is just a protocol. In order to use it, you need a compositor which supports Wayland. In the previous release of Raspberry Pi OS, we were using the Mutter window manager, which could function as a Wayland compositor. But this turned out to have been a poor choice; it was relatively slow and cumbersome, and was a little out of date, which is why we only offered Wayland support on an experimental basis under Bullseye.</p>



<p>For Bookworm, we are using a compositor called <a href="https://github.com/WayfireWM/wayfire">Wayfire</a>. This uses a standard Wayland library called wlroots, which is used by several modern Wayland compositors. And because Wayfire works a lot better as a Wayland compositor on Raspberry Pi than Mutter did, Wayland is now the default mode of operation for the desktop. (With one caveat — for now, Wayland is only the default on Raspberry Pi 4 and 5. The performance of Wayfire on earlier platforms is still being optimised, so for now they will continue to run the old X11 display server and the Openbox window manager, but at some point these platforms will also be switched to Wayfire.)</p>



<p>If you boot Raspberry Pi OS on a Pi 4 or 5, you will now get a Wayfire desktop. It should look pretty much identical to the desktop you are used to from Bullseye, but appearances are deceptive — it has taken a lot of work to get to the point where the two desktop environments look the same!</p>


<div>
<figure><img decoding="async" loading="lazy" width="1920" height="1080" src="https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim.png" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim.png 1920w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-300x169.png 300w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-1024x576.png 1024w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-768x432.png 768w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-1536x864.png 1536w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-800x450.png 800w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-450x253.png 450w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_11h24m42s_grim-900x506.png 900w" sizes="(max-width: 1920px) 100vw, 1920px"></figure></div>






<p>There is still a taskbar at the top of the screen that allows you to launch applications and see the status of various systems, but this is a totally new application. Under Bullseye, this was an application called <code>lxpanel</code>, but this has now been replaced with <code>wf-panel-pi</code> (short for “wayfire panel for Raspberry Pi”).</p>



<p>This was based on <code>wf-shell</code>, the example panel application from the authors of Wayfire, but we have extensively modified it to look and work like <code>lxpanel</code>. The largest part of this work was to port all the existing <code>lxpanel</code> plugins — the icons which control volume, network, Bluetooth, etc — so that they now all work with <code>wf-panel-pi</code>.</p>



<p>The desktop background itself is still drawn by the old <code>pcmanfm</code> file manager which was used under Bullseye, but this has been modified so that it uses Wayland as its display protocol rather than X11, so is now a native Wayland application.</p>



<p>How individual applications work in a Wayland environment depends on how they are written. The standard graphics toolkits, like GTK and Qt, are now Wayland-compliant — they can detect when an application using them is running in a Wayland environment, and they then route all graphics calls over the Wayland protocol, running as native Wayland applications. Most applications preinstalled as part of the Raspberry Pi Desktop use one of these toolkits, and so now run as Wayland applications.</p>



<p>A few applications use a toolkit which is not Wayland-compliant, or bypass a toolkit completely by making direct calls to X11. While it looks as if these applications wouldn’t work on Wayland, there is a fix for that. Our Wayland implementation includes a piece of software called XWayland — this is an X11 display server which sits on top of Wayland. It handles all the non-graphical parts of X itself, and passes any graphical parts to the underlying Wayland implementation. XWayland is designed to launch automatically as soon as an application requests anything from X, so this should all work seamlessly.</p>



<p>So that’s Wayland. Basically, everything you see on the desktop is now being drawn completely differently from the way it was drawn under Bullseye — but if I have done my job right, you shouldn’t notice any significant differences! One thing you might notice is that Wayland allows us to add some nice eye candy; windows now have subtle shadows, and they open and close with animations rather than just appearing and disappearing.</p>



<p>We’ve also added a couple of new plugins. The “Power” plugin is enabled by default, and monitors for power supply problems like low power supply voltage or excess USB current. If either occur, a notification will be displayed to let you know what has happened, and an icon is then shown on the taskbar — clicking this takes you to a web page with more information on the problem and possible fixes.</p>


<div>
<figure><img decoding="async" loading="lazy" width="386" height="234" src="https://www.raspberrypi.com/app/uploads/2023/09/oc.png" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/oc.png 386w, https://www.raspberrypi.com/app/uploads/2023/09/oc-300x182.png 300w" sizes="(max-width: 386px) 100vw, 386px"></figure></div>






<p>The other new plugin is “GPU”, which shows a graph of the load on the Raspberry Pi’s GPU, similar to that which the existing CPU plugin showed for the CPU. This is not enabled by default, but can be added by right-clicking the taskbar and choosing “Add/Remove Plugins”.</p>


<div>
<figure><img decoding="async" loading="lazy" width="308" height="172" src="https://www.raspberrypi.com/app/uploads/2023/09/gpu.png" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/gpu.png 308w, https://www.raspberrypi.com/app/uploads/2023/09/gpu-300x168.png 300w" sizes="(max-width: 308px) 100vw, 308px"></figure></div>






<p>As mentioned above, work on Wayland/Wayfire is ongoing — we are still optimising for the hardware of earlier models of Raspberry Pi, and hope to be able to roll out the Wayland desktop experience for all models of Raspberry Pi in due course.</p>



<h2>PipeWire</h2>



<p>So, we’ve changed what is used to draw all the graphics. To go along with that, we’ve also changed what is used to control the sound.</p>



<p>Originally, the desktop used the Linux ALSA sound interface to communicate with audio hardware. This worked, but was pretty primitive and had numerous limitations. A few years ago, we switched to using the PulseAudio interface, which sits on top of the low-level ALSA layer. This added a lot more flexibility: it made it easier to manage things like Bluetooth audio devices, allowed audio from multiple applications to be mixed together, and allowed audio to easily be switched between outputs while playing.</p>



<p>For this release, PulseAudio has been replaced with the newer <a href="https://pipewire.org/">PipeWire</a> audio system. This builds on the features offered by PulseAudio, most importantly in providing better support for audio accompanying video. It reduces latency, which is important in many applications. It manages Bluetooth audio devices better, remembering which ones were in use at power-down, and automatically reconnecting them at boot. Finally, it is designed to operate better in the more secure Wayland environment, where applications are isolated from each other.</p>



<p>From a user point of view, PipeWire can be controlled with any application which controls PulseAudio, so the volume and microphone controls on the taskbar work exactly as they did under PulseAudio, but under Bookworm, they are talking to PipeWire rather than PulseAudio.</p>


<div>
<figure><img decoding="async" loading="lazy" width="303" height="256" src="https://www.raspberrypi.com/app/uploads/2023/09/vol.png" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/vol.png 303w, https://www.raspberrypi.com/app/uploads/2023/09/vol-300x253.png 300w" sizes="(max-width: 303px) 100vw, 303px"></figure></div>






<h2>Networking</h2>



<p>Graphics and sound are both new then — what else?</p>



<p>During Bullseye, we rolled out the use of the <a href="https://networkmanager.dev/">NetworkManager</a> network controller as an option which could be selected in raspi-config. This is now the standard control mechanism for networking in most Linux distributions, and is now the default network controller for Bookworm, replacing the previous system, dhcpcd. NetworkManager does everything dhcpcd did, but adds a bunch of extra functionality, including the ability to connect to hidden wireless networks, to connect to virtual private networks (VPNs), and to use a Raspberry Pi as a wireless hotspot. It also includes a lot more customisation options for those who wish to fiddle with the nitty-gritty of their network connection.</p>



<p>The networking plugin on the taskbar looks almost identical to that which controlled dhcpcd in Bullseye, but now has an “Advanced Options” item at the bottom — this allows you to access the new functionality offered by NetworkManager.</p>


<div>
<figure><img decoding="async" loading="lazy" width="723" height="439" src="https://www.raspberrypi.com/app/uploads/2023/09/nm.png" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/nm.png 723w, https://www.raspberrypi.com/app/uploads/2023/09/nm-300x182.png 300w, https://www.raspberrypi.com/app/uploads/2023/09/nm-450x273.png 450w" sizes="(max-width: 723px) 100vw, 723px"></figure></div>






<h2>Firefox</h2>



<p>One other significant change is that we are now offering a second browser option, with the launch of a Raspberry Pi-optimised version of <a href="https://www.mozilla.org/en-GB/firefox/new/">Mozilla Firefox</a>.</p>


<div>
<figure><img decoding="async" loading="lazy" width="1920" height="1080" src="https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim.png" alt="" srcset="https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim.png 1920w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-300x169.png 300w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-1024x576.png 1024w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-768x432.png 768w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-1536x864.png 1536w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-800x450.png 800w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-450x253.png 450w, https://www.raspberrypi.com/app/uploads/2023/09/20230927_14h48m43s_grim-900x506.png 900w" sizes="(max-width: 1920px) 100vw, 1920px"></figure></div>






<p>This is the first time we’ve officially supported Firefox — previously, the only version available was an old version from Debian, whereas we’ve now done a lot of work to ensure the best possible experience when running the latest version of Firefox on Raspberry Pi. We’ve worked closely with Mozilla and the Firefox community, and we’re contributing our work upstream to benefit Firefox users on all platforms.</p>



<p>One key feature has been enabling V4L2 codec support so that Firefox can utilise the hardware h.264 decoder on Raspberry Pi. On older models of Raspberry Pi, this significantly improves performance and reduces CPU load when playing back HD video. We’ve enabled support for Widevine DRM, which is used by a number of video streaming services, and have contributed graphical optimisations that improve performance on a range of websites on low-power devices. For video calling we’ve made sure that Firefox on Raspberry Pi OS works out of the box with CSI cameras (using libcamera) and desktop sharing on Wayland.</p>



<h2>Documentation</h2>



<p>As you’d expect from such sweeping changes, there were huge knock-on effects to <a href="https://www.raspberrypi.com/documentation/">our documentation</a>, and the documentation team has been working away behind the scenes making sure that it reflects the new state of the world. This is true especially around things l haven’t even had space to mention here, like the changes to <a href="http://rptl.io/venv">how Python modules are installed</a>.</p>



<p>It’s been a huge effort, with a lot of changes across the entire documentation stack, so if you do stumble across a place where the documentation hasn’t been updated for Bookworm, please <a href="https://github.com/raspberrypi/documentation/issues">raise an issue</a> on the documentation repo!</p>



<h2>What’s missing?</h2>



<p>With any change as significant as this, it can be difficult to make sure that everything from the old version still works under the new one, and while we have tried very hard to keep such things to a minimum, there are a few features which we haven’t been able to get into this release.</p>



<ul>
<li>Compensation for displays which use overscan is tricky under Wayland, and we haven’t quite got it working yet, so this has been removed for now. The vast majority of displays nowadays don’t need it, but we will be putting it back when we have worked out how best to do it!</li>
</ul>



<ul>
<li>The system tray — the area on the taskbar where applications can put their own icons — has to use a completely new mechanism to work with Wayland’s security model. This means that some applications may need to be updated in order for their icons to appear there.</li>
</ul>



<ul>
<li>Similarly, the Wayland security model prevents traditional remote desktop access, and so a new VNC server, called wayvnc, is being used instead of RealVNC. This is a bit more restrictive in terms of the client applications which can connect to it — we have had good results with the TigerVNC client, available <a href="https://tigervnc.org/">here</a>.</li>
</ul>



<ul>
<li>There is also currently a regression with the RealVNC server itself, which is still used in Bookworm on older Raspberry Pi models which don’t yet run Wayland. The 64-bit version works fine, but the 32-bit version is not currently compatible with Bookworm — we are waiting for an update from RealVNC. In the meantime, if you do need remote desktop access on a Raspberry Pi Zero, 1, 2, or 3, we recommend sticking with Bullseye for the time being.</li>
</ul>







<p>A few programs have been removed from Recommended Software and the full image:</p>



<ul>
<li>The SenseHAT Emulator is not at present compatible with Bookworm — this is being worked on now, and we hope to have it back in a few weeks’ time.</li>
</ul>



<ul>
<li>The Magnifier accessibility tool doesn’t work with Wayfire, but Wayfire already has its own (better) magnifier built in — just hit ctrl-alt-M to turn it on and off.</li>
</ul>



<ul>
<li>The BlueJ and Greenfoot Java IDEs are incompatible with Wayland, and Sonic Pi is incompatible with PipeWire — these are third-party programs, so have been removed until their developers have updated them.</li>
</ul>







<h2>Just in case…</h2>



<p>All these changes are designed to bring Raspberry Pi OS more into line with what other Linux distributions are doing — many are making, or have already made, the switch to Wayland, PipeWire and NetworkManager. This, then, gives us a good platform for future development, with the reassurance that our desktop is sitting on the same underlying components as most of the rest of the desktop Linux ecosystem.</p>



<p>While we have been using Wayland and PipeWire internally for nearly a year now, the sheer scale of the changes means that, in some specific usage scenarios, one or the other may cause problems. For this reason, the Advanced Settings menu in raspi-config includes options to re-enable the old X11/Openbox display system and PulseAudio. You shouldn’t need to use these, but the option is there just in case!</p>



<h2>How to get it</h2>



<p>We have always said that for a major version upgrade, you should re-image your SD card and start again with a clean image. In the past, we have suggested procedures for updating an existing image to the new version, but always with the caveat that we do not recommend it, and you do this at your own risk.</p>



<p>This time, because the changes to the underlying architecture are so significant, we are not suggesting any procedure for upgrading a Bullseye image to Bookworm; any attempt to do this will almost certainly end up with a non-booting desktop and data loss. The only way to get Bookworm is either to create an SD card using <a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a>, or to download and flash a Bookworm image from <a href="https://www.raspberrypi.com/software/operating-systems/">here</a> with your tool of choice.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beej's Guide to Network Programming (1994-2023) (211 pts)]]></title>
            <link>https://beej.us/guide/bgnet/html/</link>
            <guid>37842863</guid>
            <pubDate>Wed, 11 Oct 2023 10:43:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://beej.us/guide/bgnet/html/">https://beej.us/guide/bgnet/html/</a>, See on <a href="https://news.ycombinator.com/item?id=37842863">Hacker News</a></p>
<div id="readability-page-1" class="page">

<nav id="TOC" role="doc-toc">
<ul>
<li><a href="#intro" id="toc-intro"><span>1</span> Intro</a>
<ul>
<li><a href="#audience" id="toc-audience"><span>1.1</span> Audience</a></li>
<li><a href="#platform-and-compiler" id="toc-platform-and-compiler"><span>1.2</span> Platform and Compiler</a></li>
<li><a href="#official-homepage-and-books-for-sale" id="toc-official-homepage-and-books-for-sale"><span>1.3</span> Official Homepage and Books For Sale</a></li>
<li><a href="#solaris" id="toc-solaris"><span>1.4</span> Note for Solaris/SunOS Programmers</a></li>
<li><a href="#windows" id="toc-windows"><span>1.5</span> Note for Windows Programmers</a></li>
<li><a href="#email-policy" id="toc-email-policy"><span>1.6</span> Email Policy</a></li>
<li><a href="#mirroring" id="toc-mirroring"><span>1.7</span> Mirroring</a></li>
<li><a href="#note-for-translators" id="toc-note-for-translators"><span>1.8</span> Note for Translators</a></li>
<li><a href="#legal" id="toc-legal"><span>1.9</span> Copyright, Distribution, and Legal</a></li>
<li><a href="#dedication" id="toc-dedication"><span>1.10</span> Dedication</a></li>
<li><a href="#publishing-information" id="toc-publishing-information"><span>1.11</span> Publishing Information</a></li>
</ul></li>
<li><a href="#what-is-a-socket" id="toc-what-is-a-socket"><span>2</span> What is a socket?</a>
<ul>
<li><a href="#two-types-of-internet-sockets" id="toc-two-types-of-internet-sockets"><span>2.1</span> Two Types of Internet Sockets</a></li>
<li><a href="#lowlevel" id="toc-lowlevel"><span>2.2</span> Low level Nonsense and Network Theory</a></li>
</ul></li>
<li><a href="#ip-addresses-structs-and-data-munging" id="toc-ip-addresses-structs-and-data-munging"><span>3</span> IP Addresses, <code>struct</code>s, and Data Munging</a>
<ul>
<li><a href="#ip-addresses-versions-4-and-6" id="toc-ip-addresses-versions-4-and-6"><span>3.1</span> IP Addresses, versions 4 and 6</a>
<ul>
<li><a href="#subnets" id="toc-subnets"><span>3.1.1</span> Subnets</a></li>
<li><a href="#port-numbers" id="toc-port-numbers"><span>3.1.2</span> Port Numbers</a></li>
</ul></li>
<li><a href="#byte-order" id="toc-byte-order"><span>3.2</span> Byte Order</a></li>
<li><a href="#structs" id="toc-structs"><span>3.3</span> <code>struct</code>s</a></li>
<li><a href="#ip-addresses-part-deux" id="toc-ip-addresses-part-deux"><span>3.4</span> IP Addresses, Part Deux</a>
<ul>
<li><a href="#private-or-disconnected-networks" id="toc-private-or-disconnected-networks"><span>3.4.1</span> Private (Or Disconnected) Networks</a></li>
</ul></li>
</ul></li>
<li><a href="#jumping-from-ipv4-to-ipv6" id="toc-jumping-from-ipv4-to-ipv6"><span>4</span> Jumping from IPv4 to IPv6</a></li>
<li><a href="#system-calls-or-bust" id="toc-system-calls-or-bust"><span>5</span> System Calls or Bust</a>
<ul>
<li><a href="#getaddrinfoprepare-to-launch" id="toc-getaddrinfoprepare-to-launch"><span>5.1</span> <code>getaddrinfo()</code>—Prepare to launch!</a></li>
<li><a href="#socket" id="toc-socket"><span>5.2</span> <code>socket()</code>—Get the File Descriptor!</a></li>
<li><a href="#bind" id="toc-bind"><span>5.3</span> <code>bind()</code>—What port am I on?</a></li>
<li><a href="#connect" id="toc-connect"><span>5.4</span> <code>connect()</code>—Hey, you!</a></li>
<li><a href="#listen" id="toc-listen"><span>5.5</span> <code>listen()</code>—Will somebody please call me?</a></li>
<li><a href="#acceptthank-you-for-calling-port-3490." id="toc-acceptthank-you-for-calling-port-3490."><span>5.6</span> <code>accept()</code>—“Thank you for calling port 3490.”</a></li>
<li><a href="#sendrecv" id="toc-sendrecv"><span>5.7</span> <code>send()</code> and <code>recv()</code>—Talk to me, baby!</a></li>
<li><a href="#sendtorecv" id="toc-sendtorecv"><span>5.8</span> <code>sendto()</code> and <code>recvfrom()</code>—Talk to me, DGRAM-style</a></li>
<li><a href="#close-and-shutdownget-outta-my-face" id="toc-close-and-shutdownget-outta-my-face"><span>5.9</span> <code>close()</code> and <code>shutdown()</code>—Get outta my face!</a></li>
<li><a href="#getpeernamewho-are-you" id="toc-getpeernamewho-are-you"><span>5.10</span> <code>getpeername()</code>—Who are you?</a></li>
<li><a href="#gethostnamewho-am-i" id="toc-gethostnamewho-am-i"><span>5.11</span> <code>gethostname()</code>—Who am I?</a></li>
</ul></li>
<li><a href="#client-server-background" id="toc-client-server-background"><span>6</span> Client-Server Background</a>
<ul>
<li><a href="#a-simple-stream-server" id="toc-a-simple-stream-server"><span>6.1</span> A Simple Stream Server</a></li>
<li><a href="#a-simple-stream-client" id="toc-a-simple-stream-client"><span>6.2</span> A Simple Stream Client</a></li>
<li><a href="#datagram" id="toc-datagram"><span>6.3</span> Datagram Sockets</a></li>
</ul></li>
<li><a href="#slightly-advanced-techniques" id="toc-slightly-advanced-techniques"><span>7</span> Slightly Advanced Techniques</a>
<ul>
<li><a href="#blocking" id="toc-blocking"><span>7.1</span> Blocking</a></li>
<li><a href="#poll" id="toc-poll"><span>7.2</span> <code>poll()</code>—Synchronous I/O Multiplexing</a></li>
<li><a href="#select" id="toc-select"><span>7.3</span> <code>select()</code>—Synchronous I/O Multiplexing, Old School</a></li>
<li><a href="#sendall" id="toc-sendall"><span>7.4</span> Handling Partial <code>send()</code>s</a></li>
<li><a href="#serialization" id="toc-serialization"><span>7.5</span> Serialization—How to Pack Data</a></li>
<li><a href="#sonofdataencap" id="toc-sonofdataencap"><span>7.6</span> Son of Data Encapsulation</a></li>
<li><a href="#broadcast-packetshello-world" id="toc-broadcast-packetshello-world"><span>7.7</span> Broadcast Packets—Hello, World!</a></li>
</ul></li>
<li><a href="#common-questions" id="toc-common-questions"><span>8</span> Common Questions</a></li>
<li><a href="#man-pages" id="toc-man-pages"><span>9</span> Man Pages</a>
<ul>
<li><a href="#acceptman" id="toc-acceptman"><span>9.1</span> <code>accept()</code></a></li>
<li><a href="#bindman" id="toc-bindman"><span>9.2</span> <code>bind()</code></a></li>
<li><a href="#connectman" id="toc-connectman"><span>9.3</span> <code>connect()</code></a></li>
<li><a href="#closeman" id="toc-closeman"><span>9.4</span> <code>close()</code></a></li>
<li><a href="#getaddrinfoman" id="toc-getaddrinfoman"><span>9.5</span> <code>getaddrinfo()</code>, <code>freeaddrinfo()</code>, <code>gai_strerror()</code></a></li>
<li><a href="#gethostnameman" id="toc-gethostnameman"><span>9.6</span> <code>gethostname()</code></a></li>
<li><a href="#gethostbynameman" id="toc-gethostbynameman"><span>9.7</span> <code>gethostbyname()</code>, <code>gethostbyaddr()</code></a></li>
<li><a href="#getnameinfoman" id="toc-getnameinfoman"><span>9.8</span> <code>getnameinfo()</code></a></li>
<li><a href="#getpeernameman" id="toc-getpeernameman"><span>9.9</span> <code>getpeername()</code></a></li>
<li><a href="#errnoman" id="toc-errnoman"><span>9.10</span> <code>errno</code></a></li>
<li><a href="#fcntlman" id="toc-fcntlman"><span>9.11</span> <code>fcntl()</code></a></li>
<li><a href="#htonsman" id="toc-htonsman"><span>9.12</span> <code>htons()</code>, <code>htonl()</code>, <code>ntohs()</code>, <code>ntohl()</code></a></li>
<li><a href="#inet_ntoaman" id="toc-inet_ntoaman"><span>9.13</span> <code>inet_ntoa()</code>, <code>inet_aton()</code>, <code>inet_addr</code></a></li>
<li><a href="#inet_ntopman" id="toc-inet_ntopman"><span>9.14</span> <code>inet_ntop()</code>, <code>inet_pton()</code></a></li>
<li><a href="#listenman" id="toc-listenman"><span>9.15</span> <code>listen()</code></a></li>
<li><a href="#perrorman" id="toc-perrorman"><span>9.16</span> <code>perror()</code>, <code>strerror()</code></a></li>
<li><a href="#pollman" id="toc-pollman"><span>9.17</span> <code>poll()</code></a></li>
<li><a href="#recvman" id="toc-recvman"><span>9.18</span> <code>recv()</code>, <code>recvfrom()</code></a></li>
<li><a href="#selectman" id="toc-selectman"><span>9.19</span> <code>select()</code></a></li>
<li><a href="#setsockoptman" id="toc-setsockoptman"><span>9.20</span> <code>setsockopt()</code>, <code>getsockopt()</code></a></li>
<li><a href="#sendman" id="toc-sendman"><span>9.21</span> <code>send()</code>, <code>sendto()</code></a></li>
<li><a href="#shutdownman" id="toc-shutdownman"><span>9.22</span> <code>shutdown()</code></a></li>
<li><a href="#socketman" id="toc-socketman"><span>9.23</span> <code>socket()</code></a></li>
<li><a href="#structsockaddrman" id="toc-structsockaddrman"><span>9.24</span> <code>struct sockaddr</code> and pals</a></li>
</ul></li>
<li><a href="#more-references" id="toc-more-references"><span>10</span> More References</a>
<ul>
<li><a href="#books" id="toc-books"><span>10.1</span> Books</a></li>
<li><a href="#web-references" id="toc-web-references"><span>10.2</span> Web References</a></li>
<li><a href="#rfcs" id="toc-rfcs"><span>10.3</span> RFCs</a></li>
</ul></li>
</ul>
</nav>
<!--
Beej's Guide to Network Programming book source

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!--
    History:

    2.3.2:        socket man page
    2.3.3:        sockaddr_in man page
    2.3.4:        bind, listen man page
    2.3.5:        connect man page
    2.3.6:        listen, perror man page
    2.3.7:        errno man page
    2.3.8:        htonl etc man page
    2.3.9:        close man page, expanded man page leader
    2.3.10:        inet_ntoa, setsockopt man pages
    2.3.11:        getpeername man page
    2.3.12:        send/sendto man pages
    2.3.13:        shutdown man pages
    2.3.14:        gethostname man pages, fix inet_aton links
    2.3.15:        fcntl man page
    2.3.16:        recv/recvfrom man page
    2.3.17:        gethostbyname/gethostbyaddr man page
    2.3.18:        changed GET / to GET / HTTP/1.0
    2.3.19:        added select() man page
    2.3.20:        added poll() man page
    2.3.21:        section on NAT and reserved networks
    2.3.22:        typo fixes in sects "man" and "privnet"
    2.3.23:        added broadcast packets section
    2.3.24:        manpage prototype changed to code, subtitle moved out of title
    2.4.0:        big overhaul, serialization stuff
    2.4.1:        minor text changes in intro
    2.4.2:        changed all sizeofs to use variable names instead of types
    2.4.3:        fix myaddr->my_addr in listener.c, sockaddr_inman example
    2.4.4:        fix myaddr->my_addr in server.c
    2.4.5:        fix 14->18 in son of data encap
    3.0.0:        IPv6 overhaul
    3.0.1:        sa-to-sa6 typo fix
    3.0.2:        typo fixes
    3.0.3:        typo fixes
    3.0.4:        cut-n-paste errors, selectserver hints fix
    3.0.5:        typo fixes
    3.0.6:        typo fixes
    3.0.7:        typo fixes, added front matter
    3.0.8:        getpeername() code fixes
    3.0.9:        getpeername() code fixes, this time fer sure
    3.0.10:        bind() man page code fix, comment changes
    3.0.11:        socket syscall section code fix, comment changes
    3.0.12:        typos in "IP Addresses, structs, and Data Munging"
    3.0.13:        amp removals, note about errno and multithreading
    3.0.14:        type changes to listener.c, pack2.c
    3.0.15:        fix inet_pton example
    3.0.16:        fix simple server output, optlen in getsockopt man page
    3.0.17:        fix small typo
    3.0.18:        reverse perror and close calls in getaddrinfo
    3.0.19:        add notes about O_NONBLOCK with select() under Linux
    3.0.20:        fix missing .fd in poll() example
    3.0.21:        change sizeof(int) to sizeof yes
    3.0.22:     C99 updates, bug fixes, markdown
    3.0.23:     Book reference and URL updates
    3.1.0:      Section on poll()
    3.1.1:      Add WSL note, telnot
    3.1.2:      pollserver.c bugfix
    3.1.3:      Fix freeaddrinfo memleak
    3.1.4:      Fix accept example header files
    3.1.5:      Fix dgram AF_UNSPEC
-->
<!-- prevent hyphenation of the following words: -->
<!--
Don't know how to make this work with underscores. I love
you, Knuth, but... daaahm.

\hyphenation{gai_strerr}
-->
<!--
\hyphenation{inet_ntoa}
\hyphenation{inet_aton}
\hyphenation{inet_addr}
\hyphenation{inet_ntop}
\hyphenation{inet_pton}
-->
<!--
\hyphenation{sockaddr_in}
\hyphenation{in_addr}
\hyphenation{sockaddr_in6}
\hyphenation{in6_addr}
-->
<h2 data-number="1" id="intro"> Intro</h2>
<p>Hey! Socket programming got you down? Is this stuff just a little too difficult to figure out from the <code>man</code> pages? You want to do cool Internet programming, but you don’t have time to wade through a gob of <code>struct</code>s trying to figure out if you have to call <code>bind()</code> before you <code>connect()</code>, etc., etc.</p>
<p>Well, guess what! I’ve already done this nasty business, and I’m dying to share the information with everyone! You’ve come to the right place. This document should give the average competent C programmer the edge s/he needs to get a grip on this networking noise.</p>
<p>And check it out: I’ve finally caught up with the future (just in the nick of time, too!) and have updated the Guide for IPv6! Enjoy!</p>
<h2 data-number="1.1" id="audience"> Audience</h2>
<p>This document has been written as a tutorial, not a complete reference. It is probably at its best when read by individuals who are just starting out with socket programming and are looking for a foothold. It is certainly not the <em>complete and total</em> guide to sockets programming, by any means.</p>
<p>Hopefully, though, it’ll be just enough for those man pages to start making sense… <code>:-)</code></p>
<h2 data-number="1.2" id="platform-and-compiler"> Platform and Compiler</h2>
<p>The code contained within this document was compiled on a Linux PC using Gnu’s <code>gcc</code> compiler. It should, however, build on just about any platform that uses <code>gcc</code>. Naturally, this doesn’t apply if you’re programming for Windows—see the <a href="#windows">section on Windows programming</a>, below.</p>
<h2 data-number="1.3" id="official-homepage-and-books-for-sale"> Official Homepage and Books For Sale</h2>
<p>This official location of this document is:</p>
<ul>
<li><a href="https://beej.us/guide/bgnet/"><code>https://beej.us/guide/bgnet/</code></a></li>
</ul>
<p>There you will also find example code and translations of the guide into various languages.</p>
<p>To buy nicely bound print copies (some call them “books”), visit:</p>
<ul>
<li><a href="https://beej.us/guide/url/bgbuy"><code>https://beej.us/guide/url/bgbuy</code></a></li>
</ul>
<p>I’ll appreciate the purchase because it helps sustain my document-writing lifestyle!</p>
<h2 data-number="1.4" id="solaris"> Note for Solaris/SunOS Programmers</h2>
<p>When compiling for Solaris or SunOS, you need to specify some extra command-line switches for linking in the proper libraries. In order to do this, simply add “<code>-lnsl -lsocket -lresolv</code>” to the end of the compile command, like so:</p>
<pre><code>$ cc -o server server.c -lnsl -lsocket -lresolv</code></pre>
<p>If you still get errors, you could try further adding a <code>-lxnet</code> to the end of that command line. I don’t know what that does, exactly, but some people seem to need it.</p>
<p>Another place that you might find problems is in the call to <code>setsockopt()</code>. The prototype differs from that on my Linux box, so instead of:</p>

<p>enter this:</p>

<p>As I don’t have a Sun box, I haven’t tested any of the above information—it’s just what people have told me through email.</p>
<h2 data-number="1.5" id="windows"> Note for Windows Programmers</h2>
<p>At this point in the guide, historically, I’ve done a bit of bagging on Windows, simply due to the fact that I don’t like it very much. But I should really be fair and tell you that Windows has a huge install base and is obviously a perfectly fine operating system.</p>
<p>They say absence makes the heart grow fonder, and in this case, I believe it to be true. (Or maybe it’s age.) But what I can say is that after a decade-plus of not using Microsoft OSes for my personal work, I’m much happier! As such, I can sit back and safely say, “Sure, feel free to use Windows!” …OK yes, it does make me grit my teeth to say that.</p>
<p>So I still encourage you to try <a href="https://www.linux.com/">Linux</a><a href="#fn1" id="fnref1" role="doc-noteref"><sup>1</sup></a>, <a href="https://bsd.org/">BSD</a><a href="#fn2" id="fnref2" role="doc-noteref"><sup>2</sup></a>, or some flavor of Unix, instead.</p>
<p>But people like what they like, and you Windows folk will be pleased to know that this information is generally applicable to you guys, with a few minor changes, if any.</p>
<p>Another thing that you should strongly consider is the <a href="https://learn.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux</a><a href="#fn3" id="fnref3" role="doc-noteref"><sup>3</sup></a>. This basically allows you to install a Linux VM-ish thing on Windows 10. That will also definitely get you situated, and you’ll be able to build and run these programs as is.</p>
<p>One cool thing you can do is install <a href="https://cygwin.com/">Cygwin</a><a href="#fn4" id="fnref4" role="doc-noteref"><sup>4</sup></a>, which is a collection of Unix tools for Windows. I’ve heard on the grapevine that doing so allows all these programs to compile unmodified, but I’ve never tried it.</p>
<p>But some of you might want to do things the Pure Windows Way. That’s very gutsy of you, and this is what you have to do: run out and get Unix immediately! No, no—I’m kidding. I’m supposed to be Windows-friendly(er) these days…</p>

<p>This is what you’ll have to do: first, ignore pretty much all of the system header files I mention in here. Instead, include:</p>
<div id="cb4"><pre><code><span id="cb4-1"><span>#include </span><span>&lt;winsock2.h&gt;</span></span>
<span id="cb4-2"><span>#include </span><span>&lt;ws2tcpip.h&gt;</span></span></code></pre></div>
<p><code>winsock2</code> is the “new” (circa 1994) version of the Windows socket library.</p>
<p>Unfortunately, if you include <code>windows.h</code>, it automatically pulls in the older <code>winsock.h</code> (version 1) header file which conflicts with <code>winsock2.h</code>! Fun times.</p>
<p>So if you have to include <code>windows.h</code>, you need to define a macro to get it to <em>not</em> include the older header:</p>
<div id="cb5"><pre><code><span id="cb5-1"><span>#define WIN32_LEAN_AND_MEAN  </span><span>// Say this...</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span>#include </span><span>&lt;windows.h&gt;</span><span>         </span><span>// And now we can include that.</span></span>
<span id="cb5-4"><span>#include </span><span>&lt;winsock2.h&gt;</span><span>        </span><span>// And this.</span></span></code></pre></div>
<p>Wait! You also have to make a call to <code>WSAStartup()</code> before doing anything else with the sockets library. You pass in the Winsock version you desire to this function (e.g.&nbsp;version 2.2). And then you can check the result to make sure that version is available.</p>
<p>The code to do that looks something like this:</p>
<div id="cb6"><pre><code><span id="cb6-1"><a href="#cb6-1"></a><span>#include </span><span>&lt;winsock2.h&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2"></a></span>
<span id="cb6-3"><a href="#cb6-3"></a><span>{</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>    WSADATA wsaData<span>;</span></span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a>    <span>if</span> <span>(</span>WSAStartup<span>(</span>MAKEWORD<span>(</span><span>2</span><span>,</span> <span>2</span><span>),</span> <span>&amp;</span>wsaData<span>)</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"WSAStartup failed.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>    <span>}</span></span>
<span id="cb6-10"><a href="#cb6-10"></a></span>
<span id="cb6-11"><a href="#cb6-11"></a>    <span>if</span> <span>(</span>LOBYTE<span>(</span>wsaData<span>.</span>wVersion<span>)</span> <span>!=</span> <span>2</span> <span>||</span></span>
<span id="cb6-12"><a href="#cb6-12"></a>        HIBYTE<span>(</span>wsaData<span>.</span>wVersion<span>)</span> <span>!=</span> <span>2</span><span>)</span></span>
<span id="cb6-13"><a href="#cb6-13"></a>    <span>{</span></span>
<span id="cb6-14"><a href="#cb6-14"></a>        fprintf<span>(</span>stderr<span>,</span><span>"Versiion 2.2 of Winsock is not available.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb6-15"><a href="#cb6-15"></a>        WSACleanup<span>();</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>        exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb6-17"><a href="#cb6-17"></a>    <span>}</span></span></code></pre></div>
<p>Note that call to <code>WSACleanup()</code> in there. That’s what you want to call when you’re done with the Winsock library.</p>
<p>You also have to tell your compiler to link in the Winsock library, called <code>ws2_32.lib</code> for Winsock 2. Under VC++, this can be done through the <code>Project</code> menu, under <code>Settings...</code>. Click the <code>Link</code> tab, and look for the box titled “Object/library modules”. Add “ws2_32.lib” (or whichever lib is your preference) to that list.</p>
<p>Or so I hear.</p>
<p>Once you do that, the rest of the examples in this tutorial should generally apply, with a few exceptions. For one thing, you can’t use <code>close()</code> to close a socket—you need to use <code>closesocket()</code>, instead. Also, <code>select()</code> only works with socket descriptors, not file descriptors (like <code>0</code> for <code>stdin</code>).</p>
<p>There is also a socket class that you can use, <a href="https://learn.microsoft.com/en-us/cpp/mfc/reference/csocket-class?view=msvc-170"><code>CSocket</code></a> Check your compiler’s help pages for more information.</p>
<p>To get more information about Winsock, <a href="https://learn.microsoft.com/en-us/windows/win32/winsock/windows-sockets-start-page-2">check out the official page at Microsoft</a>.</p>
<p>Finally, I hear that Windows has no <code>fork()</code> system call which is, unfortunately, used in some of my examples. Maybe you have to link in a POSIX library or something to get it to work, or you can use <code>CreateProcess()</code> instead. <code>fork()</code> takes no arguments, and <code>CreateProcess()</code> takes about 48 billion arguments. If you’re not up to that, the <code>CreateThread()</code> is a little easier to digest…unfortunately a discussion about multithreading is beyond the scope of this document. I can only talk about so much, you know!</p>
<p>Extra finally, Steven Mitchell has <a href="https://www.tallyhawk.net/WinsockExamples/">ported a number of the examples</a><a href="#fn5" id="fnref5" role="doc-noteref"><sup>5</sup></a> to Winsock. Check that stuff out.</p>
<h2 data-number="1.6" id="email-policy"> Email Policy</h2>
<p>I’m generally available to help out with email questions so feel free to write in, but I can’t guarantee a response. I lead a pretty busy life and there are times when I just can’t answer a question you have. When that’s the case, I usually just delete the message. It’s nothing personal; I just won’t ever have the time to give the detailed answer you require.</p>
<p>As a rule, the more complex the question, the less likely I am to respond. If you can narrow down your question before mailing it and be sure to include any pertinent information (like platform, compiler, error messages you’re getting, and anything else you think might help me troubleshoot), you’re much more likely to get a response. For more pointers, read ESR’s document, <a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a><a href="#fn6" id="fnref6" role="doc-noteref"><sup>6</sup></a>.</p>
<p>If you don’t get a response, hack on it some more, try to find the answer, and if it’s still elusive, then write me again with the information you’ve found and hopefully it will be enough for me to help out.</p>
<p>Now that I’ve badgered you about how to write and not write me, I’d just like to let you know that I <em>fully</em> appreciate all the praise the guide has received over the years. It’s a real morale boost, and it gladdens me to hear that it is being used for good! <code>:-)</code> Thank you!</p>
<h2 data-number="1.7" id="mirroring"> Mirroring</h2>
<p> You are more than welcome to mirror this site, whether publicly or privately. If you publicly mirror the site and want me to link to it from the main page, drop me a line at <a href="https://beej.us/guide/bgnet/html/beej@beej.us"><code>beej@beej.us</code></a>.</p>
<h2 data-number="1.8" id="note-for-translators"> Note for Translators</h2>
<p> If you want to translate the guide into another language, write me at <a href="https://beej.us/guide/bgnet/html/beej@beej.us"><code>beej@beej.us</code></a> and I’ll link to your translation from the main page. Feel free to add your name and contact info to the translation.</p>
<p>This source markdown document uses UTF-8 encoding.</p>
<p>Please note the license restrictions in the <a href="#legal">Copyright, Distribution, and Legal</a> section, below.</p>
<p>If you want me to host the translation, just ask. I’ll also link to it if you want to host it; either way is fine.</p>
<h2 data-number="1.9" id="legal"> Copyright, Distribution, and Legal</h2>
<p>Beej’s Guide to Network Programming is Copyright © 2019 Brian “Beej Jorgensen” Hall.</p>
<p>With specific exceptions for source code and translations, below, this work is licensed under the Creative Commons Attribution- Noncommercial- No Derivative Works 3.0 License. To view a copy of this license, visit</p>
<p><a href="https://creativecommons.org/licenses/by-nc-nd/3.0/"><code>https://creativecommons.org/licenses/by-nc-nd/3.0/</code></a></p>
<p>or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.</p>
<p>One specific exception to the “No Derivative Works” portion of the license is as follows: this guide may be freely translated into any language, provided the translation is accurate, and the guide is reprinted in its entirety. The same license restrictions apply to the translation as to the original guide. The translation may also include the name and contact information for the translator.</p>
<p>The C source code presented in this document is hereby granted to the public domain, and is completely free of any license restriction.</p>
<p>Educators are freely encouraged to recommend or supply copies of this guide to their students.</p>
<p>Unless otherwise mutually agreed by the parties in writing, the author offers the work as-is and makes no representations or warranties of any kind concerning the work, express, implied, statutory or otherwise, including, without limitation, warranties of title, merchantability, fitness for a particular purpose, noninfringement, or the absence of latent or other defects, accuracy, or the presence of absence of errors, whether or not discoverable.</p>
<p>Except to the extent required by applicable law, in no event will the author be liable to you on any legal theory for any special, incidental, consequential, punitive or exemplary damages arising out of the use of the work, even if the author has been advised of the possibility of such damages.</p>
<p>Contact <a href="mailto:beej@beej.us"><code>beej@beej.us</code></a> for more information.</p>
<h2 data-number="1.10" id="dedication"> Dedication</h2>
<p>Thanks to everyone who has helped in the past and future with me getting this guide written. And thank you to all the people who produce the Free software and packages that I use to make the Guide: GNU, Linux, Slackware, vim, Python, Inkscape, pandoc, many others. And finally a big thank-you to the literally thousands of you who have written in with suggestions for improvements and words of encouragement.</p>
<p>I dedicate this guide to some of my biggest heroes and inpirators in the world of computers: Donald Knuth, Bruce Schneier, W. Richard Stevens, and The Woz, my Readership, and the entire Free and Open Source Software Community.</p>
<h2 data-number="1.11" id="publishing-information"> Publishing Information</h2>
<p>This book is written in Markdown using the vim editor on an Arch Linux box loaded with GNU tools. The cover “art” and diagrams are produced with Inkscape. The Markdown is converted to HTML and LaTex/PDF by Python, Pandoc and XeLaTeX, using Liberation fonts. The toolchain is composed of 100% Free and Open Source Software.</p>
<h2 data-number="2" id="what-is-a-socket"> What is a socket?</h2>
<p>You hear talk of “sockets” all the time, and perhaps you are wondering just what they are exactly. Well, they’re this: a way to speak to other programs using standard Unix file descriptors.</p>
<p>What?</p>
<p>Ok—you may have heard some Unix hacker state, “Jeez, <em>everything</em> in Unix is a file!” What that person may have been talking about is the fact that when Unix programs do any sort of I/O, they do it by reading or writing to a file descriptor. A file descriptor is simply an integer associated with an open file. But (and here’s the catch), that file can be a network connection, a FIFO, a pipe, a terminal, a real on-the-disk file, or just about anything else. Everything in Unix <em>is</em> a file! So when you want to communicate with another program over the Internet you’re gonna do it through a file descriptor, you’d better believe it.</p>
<p>“Where do I get this file descriptor for network communication, Mr. Smarty-Pants?” is probably the last question on your mind right now, but I’m going to answer it anyway: You make a call to the <code>socket()</code> system routine. It returns the socket descriptor, and you communicate through it using the specialized <code>send()</code> and <code>recv()</code> (<a href="#sendman"><code>man send</code></a>, <a href="#recvman"><code>man recv</code></a>) socket calls.</p>
<p>“But, hey!” you might be exclaiming right about now. “If it’s a file descriptor, why in the name of Neptune can’t I just use the normal <code>read()</code> and <code>write()</code> calls to communicate through the socket?” The short answer is, “You can!” The longer answer is, “You can, but <code>send()</code> and <code>recv()</code> offer much greater control over your data transmission.”</p>
<p>What next? How about this: there are all kinds of sockets. There are DARPA Internet addresses (Internet Sockets), path names on a local node (Unix Sockets), CCITT X.25 addresses (X.25 Sockets that you can safely ignore), and probably many others depending on which Unix flavor you run. This document deals only with the first: Internet Sockets.</p>
<h2 data-number="2.1" id="two-types-of-internet-sockets"> Two Types of Internet Sockets</h2>
<p>What’s this? There are two types of Internet sockets? Yes. Well, no. I’m lying. There are more, but I didn’t want to scare you. I’m only going to talk about two types here. Except for this sentence, where I’m going to tell you that “Raw Sockets” are also very powerful and you should look them up.</p>
<p>All right, already. What are the two types? One is “Stream Sockets”; the other is “Datagram Sockets”, which may hereafter be referred to as “<code>SOCK_STREAM</code>” and “<code>SOCK_DGRAM</code>”, respectively. Datagram sockets are sometimes called “connectionless sockets”. (Though they can be <code>connect()</code>’d if you really want. See <a href="#connect"><code>connect()</code></a>, below.)</p>
<p>Stream sockets are reliable two-way connected communication streams. If you output two items into the socket in the order “1, 2”, they will arrive in the order “1, 2” at the opposite end. They will also be error-free. I’m so certain, in fact, they will be error-free, that I’m just going to put my fingers in my ears and chant <em>la la la la</em> if anyone tries to claim otherwise.</p>
<p>What uses stream sockets? Well, you may have heard of the <code>telnet</code> or <code>ssh</code> applications, yes? They use stream sockets. All the characters you type need to arrive in the same order you type them, right? Also, web browsers use the Hypertext Transfer Protocol (HTTP) which uses stream sockets to get pages. Indeed, if you telnet to a web site on port 80, and type “<code>GET / HTTP/1.0</code>” and hit RETURN twice, it’ll dump the HTML back at you!</p>
<blockquote>
<p>If you don’t have <code>telnet</code> installed and don’t want to install it, or your <code>telnet</code> is being picky about connecting to clients, the guide comes with a <code>telnet</code>-like program called <a href="https://beej.us/guide/bgnet/examples/telnot.c"><code>telnot</code></a><a href="#fn7" id="fnref7" role="doc-noteref"><sup>7</sup></a>. This should work well for all the needs of the guide. (Note that telnet is actually a <a href="https://tools.ietf.org/html/rfc854">spec’d networking protocol</a><a href="#fn8" id="fnref8" role="doc-noteref"><sup>8</sup></a>, and <code>telnot</code> doesn’t implement this protocol at all.)</p>
</blockquote>
<p>How do stream sockets achieve this high level of data transmission quality? They use a protocol called “The Transmission Control Protocol”, otherwise known as “TCP” (see <a href="https://tools.ietf.org/html/rfc793">RFC 793</a><a href="#fn9" id="fnref9" role="doc-noteref"><sup>9</sup></a> for extremely detailed info on TCP). TCP makes sure your data arrives sequentially and error-free. You may have heard “TCP” before as the better half of “TCP/IP” where “IP” stands for “Internet Protocol” (see <a href="https://tools.ietf.org/html/rfc791">RFC 791</a><a href="#fn10" id="fnref10" role="doc-noteref"><sup>10</sup></a>). IP deals primarily with Internet routing and is not generally responsible for data integrity.</p>

<p>Cool. What about Datagram sockets? Why are they called connectionless? What is the deal, here, anyway? Why are they unreliable? Well, here are some facts: if you send a datagram, it may arrive. It may arrive out of order. If it arrives, the data within the packet will be error-free.</p>
<p>Datagram sockets also use IP for routing, but they don’t use TCP; they use the “User Datagram Protocol”, or “UDP” (see <a href="https://tools.ietf.org/html/rfc768">RFC 768</a><a href="#fn11" id="fnref11" role="doc-noteref"><sup>11</sup></a>).</p>
<p>Why are they connectionless? Well, basically, it’s because you don’t have to maintain an open connection as you do with stream sockets. You just build a packet, slap an IP header on it with destination information, and send it out. No connection needed. They are generally used either when a TCP stack is unavailable or when a few dropped packets here and there don’t mean the end of the Universe. Sample applications: <code>tftp</code> (trivial file transfer protocol, a little brother to FTP), <code>dhcpcd</code> (a DHCP client), multiplayer games, streaming audio, video conferencing, etc.</p>

<p>“Wait a minute! <code>tftp</code> and <code>dhcpcd</code> are used to transfer binary applications from one host to another! Data can’t be lost if you expect the application to work when it arrives! What kind of dark magic is this?”</p>
<p>Well, my human friend, <code>tftp</code> and similar programs have their own protocol on top of UDP. For example, the tftp protocol says that for each packet that gets sent, the recipient has to send back a packet that says, “I got it!” (an “ACK” packet). If the sender of the original packet gets no reply in, say, five seconds, he’ll re-transmit the packet until he finally gets an ACK. This acknowledgment procedure is very important when implementing reliable <code>SOCK_DGRAM</code> applications.</p>
<p>For unreliable applications like games, audio, or video, you just ignore the dropped packets, or perhaps try to cleverly compensate for them. (Quake players will know the manifestation this effect by the technical term: <em>accursed lag</em>. The word “accursed”, in this case, represents any extremely profane utterance.)</p>
<p>Why would you use an unreliable underlying protocol? Two reasons: speed and speed. It’s way faster to fire-and-forget than it is to keep track of what has arrived safely and make sure it’s in order and all that. If you’re sending chat messages, TCP is great; if you’re sending 40 positional updates per second of the players in the world, maybe it doesn’t matter so much if one or two get dropped, and UDP is a good choice.</p>
<h2 data-number="2.2" id="lowlevel"> Low level Nonsense and Network Theory</h2>
<p>Since I just mentioned layering of protocols, it’s time to talk about how networks really work, and to show some examples of how <code>SOCK_DGRAM</code> packets are built. Practically, you can probably skip this section. It’s good background, however.</p>
<figure>


</figure>
<p>Hey, kids, it’s time to learn about <em>Data Encapsulation</em>! This is very very important. It’s so important that you might just learn about it if you take the networks course here at Chico State <code>;-)</code>. Basically, it says this: a packet is born, the packet is wrapped (“encapsulated”) in a header (and rarely a footer) by the first protocol (say, the TFTP protocol), then the whole thing (TFTP header included) is encapsulated again by the next protocol (say, UDP), then again by the next (IP), then again by the final protocol on the hardware (physical) layer (say, Ethernet).</p>
<p>When another computer receives the packet, the hardware strips the Ethernet header, the kernel strips the IP and UDP headers, the TFTP program strips the TFTP header, and it finally has the data.</p>
<p>Now I can finally talk about the infamous <em>Layered Network Model</em> (aka “ISO/OSI”). This Network Model describes a system of network functionality that has many advantages over other models. For instance, you can write sockets programs that are exactly the same without caring how the data is physically transmitted (serial, thin Ethernet, AUI, whatever) because programs on lower levels deal with it for you. The actual network hardware and topology is transparent to the socket programmer.</p>
<p>Without any further ado, I’ll present the layers of the full-blown model. Remember this for network class exams:</p>
<ul>
<li>Application</li>
<li>Presentation</li>
<li>Session</li>
<li>Transport</li>
<li>Network</li>
<li>Data Link</li>
<li>Physical</li>
</ul>
<p>The Physical Layer is the hardware (serial, Ethernet, etc.). The Application Layer is just about as far from the physical layer as you can imagine—it’s the place where users interact with the network.</p>
<p>Now, this model is so general you could probably use it as an automobile repair guide if you really wanted to. A layered model more consistent with Unix might be:</p>
<ul>
<li>Application Layer (<em>telnet, ftp, etc.</em>)</li>
<li>Host-to-Host Transport Layer (<em>TCP, UDP</em>)</li>
<li>Internet Layer (<em>IP and routing</em>)</li>
<li>Network Access Layer (<em>Ethernet, wi-fi, or whatever</em>)</li>
</ul>
<p>At this point in time, you can probably see how these layers correspond to the encapsulation of the original data.</p>
<p>See how much work there is in building a simple packet? Jeez! And you have to type in the packet headers yourself using “<code>cat</code>”! Just kidding. All you have to do for stream sockets is <code>send()</code> the data out. All you have to do for datagram sockets is encapsulate the packet in the method of your choosing and <code>sendto()</code> it out. The kernel builds the Transport Layer and Internet Layer on for you and the hardware does the Network Access Layer. Ah, modern technology.</p>
<p>So ends our brief foray into network theory. Oh yes, I forgot to tell you everything I wanted to say about routing: nothing! That’s right, I’m not going to talk about it at all. The router strips the packet to the IP header, consults its routing table, <em>blah blah blah</em>. Check out the <a href="https://tools.ietf.org/html/rfc791">IP RFC</a><a href="#fn12" id="fnref12" role="doc-noteref"><sup>12</sup></a> if you really really care. If you never learn about it, well, you’ll live.</p>
<h2 data-number="3" id="ip-addresses-structs-and-data-munging"> IP Addresses, <code>struct</code>s, and Data Munging</h2>
<p>Here’s the part of the game where we get to talk code for a change.</p>
<p>But first, let’s discuss more non-code! Yay! First I want to talk about IP addresses and ports for just a tad so we have that sorted out. Then we’ll talk about how the sockets API stores and manipulates IP addresses and other data.</p>
<h2 data-number="3.1" id="ip-addresses-versions-4-and-6"> IP Addresses, versions 4 and 6</h2>
<p>In the good old days back when Ben Kenobi was still called Obi Wan Kenobi, there was a wonderful network routing system called The Internet Protocol Version 4, also called IPv4. It had addresses made up of four bytes (A.K.A. four “octets”), and was commonly written in “dots and numbers” form, like so: <code>192.0.2.111</code>.</p>
<p>You’ve probably seen it around.</p>
<p>In fact, as of this writing, virtually every site on the Internet uses IPv4.</p>
<p>Everyone, including Obi Wan, was happy. Things were great, until some naysayer by the name of Vint Cerf warned everyone that we were about to run out of IPv4 addresses!</p>
<p>(Besides warning everyone of the Coming IPv4 Apocalypse Of Doom And Gloom, <a href="https://en.wikipedia.org/wiki/Vint_Cerf">Vint Cerf</a><a href="#fn13" id="fnref13" role="doc-noteref"><sup>13</sup></a> is also well-known for being The Father Of The Internet. So I really am in no position to second-guess his judgment.)</p>
<p>Run out of addresses? How could this be? I mean, there are like billions of IP addresses in a 32-bit IPv4 address. Do we really have billions of computers out there?</p>
<p>Yes.</p>
<p>Also, in the beginning, when there were only a few computers and everyone thought a billion was an impossibly large number, some big organizations were generously allocated millions of IP addresses for their own use. (Such as Xerox, MIT, Ford, HP, IBM, GE, AT&amp;T, and some little company called Apple, to name a few.)</p>
<p>In fact, if it weren’t for several stopgap measures, we would have run out a long time ago.</p>
<p>But now we’re living in an era where we’re talking about every human having an IP address, every computer, every calculator, every phone, every parking meter, and (why not) every puppy dog, as well.</p>
<p>And so, IPv6 was born. Since Vint Cerf is probably immortal (even if his physical form should pass on, heaven forbid, he is probably already existing as some kind of hyper-intelligent <a href="https://en.wikipedia.org/wiki/ELIZA">ELIZA</a><a href="#fn14" id="fnref14" role="doc-noteref"><sup>14</sup></a> program out in the depths of the Internet2), no one wants to have to hear him say again “I told you so” if we don’t have enough addresses in the next version of the Internet Protocol.</p>
<p>What does this suggest to you?</p>
<p>That we need a <em>lot</em> more addresses. That we need not just twice as many addresses, not a billion times as many, not a thousand trillion times as many, but <em>79 MILLION BILLION TRILLION times as many possible addresses!</em> That’ll show ’em!</p>
<p>You’re saying, “Beej, is that true? I have every reason to disbelieve large numbers.” Well, the difference between 32 bits and 128 bits might not sound like a lot; it’s only 96 more bits, right? But remember, we’re talking powers here: 32 bits represents some 4 billion numbers (2<sup>32</sup>), while 128 bits represents about 340 trillion trillion trillion numbers (for real, 2<sup>128</sup>). That’s like a million IPv4 Internets for <em>every single star in the Universe</em>.</p>
<p>Forget this dots-and-numbers look of IPv4, too; now we’ve got a hexadecimal representation, with each two-byte chunk separated by a colon, like this:</p>
<pre><code>2001:0db8:c9d2:aee5:73e3:934a:a5ae:9551</code></pre>
<p>That’s not all! Lots of times, you’ll have an IP address with lots of zeros in it, and you can compress them between two colons. And you can leave off leading zeros for each byte pair. For instance, each of these pairs of addresses are equivalent:</p>
<pre><code>2001:0db8:c9d2:0012:0000:0000:0000:0051
2001:db8:c9d2:12::51

2001:0db8:ab00:0000:0000:0000:0000:0000
2001:db8:ab00::

0000:0000:0000:0000:0000:0000:0000:0001
::1</code></pre>
<p>The address <code>::1</code> is the <em>loopback address</em>. It always means “this machine I’m running on now”. In IPv4, the loopback address is <code>127.0.0.1</code>.</p>
<p>Finally, there’s an IPv4-compatibility mode for IPv6 addresses that you might come across. If you want, for example, to represent the IPv4 address <code>192.0.2.33</code> as an IPv6 address, you use the following notation: “<code>::ffff:192.0.2.33</code>”.</p>
<p>We’re talking serious fun.</p>
<p>In fact, it’s such serious fun, that the Creators of IPv6 have quite cavalierly lopped off trillions and trillions of addresses for reserved use, but we have so many, frankly, who’s even counting anymore? There are plenty left over for every man, woman, child, puppy, and parking meter on every planet in the galaxy. And believe me, every planet in the galaxy has parking meters. You know it’s true.</p>
<h3 data-number="3.1.1" id="subnets"> Subnets</h3>
<p>For organizational reasons, it’s sometimes convenient to declare that “this first part of this IP address up through this bit is the <em>network portion</em> of the IP address, and the remainder is the <em>host portion</em>.</p>
<p>For instance, with IPv4, you might have <code>192.0.2.12</code>, and we could say that the first three bytes are the network and the last byte was the host. Or, put another way, we’re talking about host <code>12</code> on network <code>192.0.2.0</code> (see how we zero out the byte that was the host).</p>
<p>And now for more outdated information! Ready? In the Ancient Times, there were “classes” of subnets, where the first one, two, or three bytes of the address was the network part. If you were lucky enough to have one byte for the network and three for the host, you could have 24 bits-worth of hosts on your network (16 million or so). That was a “Class A” network. On the opposite end was a “Class C”, with three bytes of network, and one byte of host (256 hosts, minus a couple that were reserved).</p>
<p>So as you can see, there were just a few Class As, a huge pile of Class Cs, and some Class Bs in the middle.</p>
<p>The network portion of the IP address is described by something called the <em>netmask</em>, which you bitwise-AND with the IP address to get the network number out of it. The netmask usually looks something like <code>255.255.255.0</code>. (E.g. with that netmask, if your IP is <code>192.0.2.12</code>, then your network is <code>192.0.2.12</code> AND <code>255.255.255.0</code> which gives <code>192.0.2.0</code>.)</p>
<p>Unfortunately, it turned out that this wasn’t fine-grained enough for the eventual needs of the Internet; we were running out of Class C networks quite quickly, and we were most definitely out of Class As, so don’t even bother to ask. To remedy this, The Powers That Be allowed for the netmask to be an arbitrary number of bits, not just 8, 16, or 24. So you might have a netmask of, say <code>255.255.255.252</code>, which is 30 bits of network, and 2 bits of host allowing for four hosts on the network. (Note that the netmask is <em>ALWAYS</em> a bunch of 1-bits followed by a bunch of 0-bits.)</p>
<p>But it’s a bit unwieldy to use a big string of numbers like <code>255.192.0.0</code> as a netmask. First of all, people don’t have an intuitive idea of how many bits that is, and secondly, it’s really not compact. So the New Style came along, and it’s much nicer. You just put a slash after the IP address, and then follow that by the number of network bits in decimal. Like this: <code>192.0.2.12/30</code>.</p>
<p>Or, for IPv6, something like this: <code>2001:db8::/32</code> or <code>2001:db8:5413:4028::9db9/64</code>.</p>
<h3 data-number="3.1.2" id="port-numbers"> Port Numbers</h3>
<p>If you’ll kindly remember, I presented you earlier with the <a href="#lowlevel">Layered Network Model</a> which had the Internet Layer (IP) split off from the Host-to-Host Transport Layer (TCP and UDP). Get up to speed on that before the next paragraph.</p>
<p>Turns out that besides an IP address (used by the IP layer), there is another address that is used by TCP (stream sockets) and, coincidentally, by UDP (datagram sockets). It is the <em>port number</em>. It’s a 16-bit number that’s like the local address for the connection.</p>
<p>Think of the IP address as the street address of a hotel, and the port number as the room number. That’s a decent analogy; maybe later I’ll come up with one involving the automobile industry.</p>
<p>Say you want to have a computer that handles incoming mail AND web services—how do you differentiate between the two on a computer with a single IP address?</p>
<p>Well, different services on the Internet have different well-known port numbers. You can see them all in <a href="https://www.iana.org/assignments/port-numbers">the Big IANA Port List</a><a href="#fn15" id="fnref15" role="doc-noteref"><sup>15</sup></a> or, if you’re on a Unix box, in your <code>/etc/services</code> file. HTTP (the web) is port 80, telnet is port 23, SMTP is port 25, the game <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">DOOM</a><a href="#fn16" id="fnref16" role="doc-noteref"><sup>16</sup></a> used port 666, etc. and so on. Ports under 1024 are often considered special, and usually require special OS privileges to use.</p>
<p>And that’s about it!</p>
<h2 data-number="3.2" id="byte-order"> Byte Order</h2>
<p> By Order of the Realm! There shall be two byte orderings, hereafter to be known as Lame and Magnificent!</p>
<p>I joke, but one really is better than the other. <code>:-)</code></p>
<p>There really is no easy way to say this, so I’ll just blurt it out: your computer might have been storing bytes in reverse order behind your back. I know! No one wanted to have to tell you.</p>
<p>The thing is, everyone in the Internet world has generally agreed that if you want to represent the two-byte hex number, say <code>b34f</code>, you’ll store it in two sequential bytes <code>b3</code> followed by <code>4f</code>. Makes sense, and, as <a href="https://en.wikipedia.org/wiki/Wilford_Brimley">Wilford Brimley</a><a href="#fn17" id="fnref17" role="doc-noteref"><sup>17</sup></a> would tell you, it’s the Right Thing To Do. This number, stored with the big end first, is called <em>Big-Endian</em>.</p>
<p>Unfortunately, a <em>few</em> computers scattered here and there throughout the world, namely anything with an Intel or Intel-compatible processor, store the bytes reversed, so <code>b34f</code> would be stored in memory as the sequential bytes <code>4f</code> followed by <code>b3</code>. This storage method is called <em>Little-Endian</em>.</p>
<p>But wait, I’m not done with terminology yet! The more-sane <em>Big-Endian</em> is also called <em>Network Byte Order</em> because that’s the order us network types like.</p>
<p>Your computer stores numbers in <em>Host Byte Order</em>. If it’s an Intel 80x86, Host Byte Order is Little-Endian. If it’s a Motorola 68k, Host Byte Order is Big-Endian. If it’s a PowerPC, Host Byte Order is… well, it depends!</p>
<p>A lot of times when you’re building packets or filling out data structures you’ll need to make sure your two- and four-byte numbers are in Network Byte Order. But how can you do this if you don’t know the native Host Byte Order?</p>
<p>Good news! You just get to assume the Host Byte Order isn’t right, and you always run the value through a function to set it to Network Byte Order. The function will do the magic conversion if it has to, and this way your code is portable to machines of differing endianness.</p>
<p>All righty. There are two types of numbers that you can convert: <code>short</code> (two bytes) and <code>long</code> (four bytes). These functions work for the <code>unsigned</code> variations as well. Say you want to convert a <code>short</code> from Host Byte Order to Network Byte Order. Start with “h” for “host”, follow it with “to”, then “n” for “network”, and “s” for “short”: h-to-n-s, or <code>htons()</code> (read: “Host to Network Short”).</p>
<p>It’s almost too easy…</p>
<p>You can use every combination of “n”, “h”, “s”, and “l” you want, not counting the really stupid ones. For example, there is NOT a <code>stolh()</code> (“Short to Long Host”) function—not at this party, anyway. But there are:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>htons()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>s</code>hort</td>
</tr>
<tr>
<td><code>htonl()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>l</code>ong</td>
</tr>
<tr>
<td><code>ntohs()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>s</code>hort</td>
</tr>
<tr>
<td><code>ntohl()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>l</code>ong</td>
</tr>
</tbody>
</table>
<p>Basically, you’ll want to convert the numbers to Network Byte Order before they go out on the wire, and convert them to Host Byte Order as they come in off the wire.</p>
<p>I don’t know of a 64-bit variant, sorry. And if you want to do floating point, check out the section on <a href="#serialization">Serialization</a>, far below.</p>
<p>Assume the numbers in this document are in Host Byte Order unless I say otherwise.</p>
<h2 data-number="3.3" id="structs"> <code>struct</code>s</h2>
<p>Well, we’re finally here. It’s time to talk about programming. In this section, I’ll cover various data types used by the sockets interface, since some of them are a real bear to figure out.</p>
<p>First the easy one: a socket descriptor. A socket descriptor is the following type:</p>

<p>Just a regular <code>int</code>.</p>
<p>Things get weird from here, so just read through and bear with me.</p>
<p>My First Struct™—<code>struct addrinfo</code>. This structure is a more recent invention, and is used to prep the socket address structures for subsequent use. It’s also used in host name lookups, and service name lookups. That’ll make more sense later when we get to actual usage, but just know for now that it’s one of the first things you’ll call when making a connection.</p>
<div id="cb10"><pre><code><span id="cb10-1"><span>struct</span> addrinfo <span>{</span></span>
<span id="cb10-2">    <span>int</span>              ai_flags<span>;</span>     <span>// AI_PASSIVE, AI_CANONNAME, etc.</span></span>
<span id="cb10-3">    <span>int</span>              ai_family<span>;</span>    <span>// AF_INET, AF_INET6, AF_UNSPEC</span></span>
<span id="cb10-4">    <span>int</span>              ai_socktype<span>;</span>  <span>// SOCK_STREAM, SOCK_DGRAM</span></span>
<span id="cb10-5">    <span>int</span>              ai_protocol<span>;</span>  <span>// use 0 for "any"</span></span>
<span id="cb10-6">    <span>size_t</span>           ai_addrlen<span>;</span>   <span>// size of ai_addr in bytes</span></span>
<span id="cb10-7">    <span>struct</span> sockaddr <span>*</span>ai_addr<span>;</span>      <span>// struct sockaddr_in or _in6</span></span>
<span id="cb10-8">    <span>char</span>            <span>*</span>ai_canonname<span>;</span> <span>// full canonical hostname</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">    <span>struct</span> addrinfo <span>*</span>ai_next<span>;</span>      <span>// linked list, next node</span></span>
<span id="cb10-11"><span>};</span></span></code></pre></div>
<p>You’ll load this struct up a bit, and then call <code>getaddrinfo()</code>. It’ll return a pointer to a new linked list of these structures filled out with all the goodies you need.</p>
<p>You can force it to use IPv4 or IPv6 in the <code>ai_family</code> field, or leave it as <code>AF_UNSPEC</code> to use whatever. This is cool because your code can be IP version-agnostic.</p>
<p>Note that this is a linked list: <code>ai_next</code> points at the next element—there could be several results for you to choose from. I’d use the first result that worked, but you might have different business needs; I don’t know everything, man!</p>
<p>You’ll see that the <code>ai_addr</code> field in the <code>struct addrinfo</code> is a pointer to a <code>struct sockaddr</code>. This is where we start getting into the nitty-gritty details of what’s inside an IP address structure.</p>
<p>You might not usually need to write to these structures; oftentimes, a call to <code>getaddrinfo()</code> to fill out your <code>struct addrinfo</code> for you is all you’ll need. You <em>will</em>, however, have to peer inside these <code>struct</code>s to get the values out, so I’m presenting them here.</p>
<p>(Also, all the code written before <code>struct addrinfo</code> was invented we packed all this stuff by hand, so you’ll see a lot of IPv4 code out in the wild that does exactly that. You know, in old versions of this guide and so on.)</p>
<p>Some <code>struct</code>s are IPv4, some are IPv6, and some are both. I’ll make notes of which are what.</p>
<p>Anyway, the <code>struct sockaddr</code> holds socket address information for many types of sockets.</p>
<div id="cb11"><pre><code><span id="cb11-1"><span>struct</span> sockaddr <span>{</span></span>
<span id="cb11-2">    <span>unsigned</span> <span>short</span>    sa_family<span>;</span>    <span>// address family, AF_xxx</span></span>
<span id="cb11-3">    <span>char</span>              sa_data<span>[</span><span>14</span><span>];</span>  <span>// 14 bytes of protocol address</span></span>
<span id="cb11-4"><span>};</span> </span></code></pre></div>
<p><code>sa_family</code> can be a variety of things, but it’ll be <code>AF_INET</code> (IPv4) or <code>AF_INET6</code> (IPv6) for everything we do in this document. <code>sa_data</code> contains a destination address and port number for the socket. This is rather unwieldy since you don’t want to tediously pack the address in the <code>sa_data</code> by hand.</p>
<p>To deal with <code>struct sockaddr</code>, programmers created a parallel structure: <code>struct sockaddr_in</code> (“in” for “Internet”) to be used with IPv4.</p>
<p>And <em>this is the important</em> bit: a pointer to a <code>struct sockaddr_in</code> can be cast to a pointer to a <code>struct sockaddr</code> and vice-versa. So even though <code>connect()</code> wants a <code>struct sockaddr*</code>, you can still use a <code>struct sockaddr_in</code> and cast it at the last minute!</p>
<div id="cb12"><pre><code><span id="cb12-1"><span>// (IPv4 only--see struct sockaddr_in6 for IPv6)</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span>struct</span> sockaddr_in <span>{</span></span>
<span id="cb12-4">    <span>short</span> <span>int</span>          sin_family<span>;</span>  <span>// Address family, AF_INET</span></span>
<span id="cb12-5">    <span>unsigned</span> <span>short</span> <span>int</span> sin_port<span>;</span>    <span>// Port number</span></span>
<span id="cb12-6">    <span>struct</span> in_addr     sin_addr<span>;</span>    <span>// Internet address</span></span>
<span id="cb12-7">    <span>unsigned</span> <span>char</span>      sin_zero<span>[</span><span>8</span><span>];</span> <span>// Same size as struct sockaddr</span></span>
<span id="cb12-8"><span>};</span></span></code></pre></div>
<p>This structure makes it easy to reference elements of the socket address. Note that <code>sin_zero</code> (which is included to pad the structure to the length of a <code>struct sockaddr</code>) should be set to all zeros with the function <code>memset()</code>. Also, notice that <code>sin_family</code> corresponds to <code>sa_family</code> in a <code>struct sockaddr</code> and should be set to “<code>AF_INET</code>”. Finally, the <code>sin_port</code> must be in <em>Network Byte Order</em> (by using <code>htons()</code>!)</p>
<p>Let’s dig deeper! You see the <code>sin_addr</code> field is a <code>struct in_addr</code>. What is that thing? Well, not to be overly dramatic, but it’s one of the scariest unions of all time:</p>
<div id="cb13"><pre><code><span id="cb13-1"><span>// (IPv4 only--see struct in6_addr for IPv6)</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span>// Internet address (a structure for historical reasons)</span></span>
<span id="cb13-4"><span>struct</span> in_addr <span>{</span></span>
<span id="cb13-5">    <span>uint32_t</span> s_addr<span>;</span> <span>// that's a 32-bit int (4 bytes)</span></span>
<span id="cb13-6"><span>};</span></span></code></pre></div>
<p>Whoa! Well, it <em>used</em> to be a union, but now those days seem to be gone. Good riddance. So if you have declared <code>ina</code> to be of type <code>struct sockaddr_in</code>, then <code>ina.sin_addr.s_addr</code> references the 4-byte IP address (in Network Byte Order). Note that even if your system still uses the God-awful union for <code>struct in_addr</code>, you can still reference the 4-byte IP address in exactly the same way as I did above (this due to <code>#define</code>s).</p>
<p>What about IPv6? Similar <code>struct</code>s exist for it, as well:</p>
<div id="cb14"><pre><code><span id="cb14-1"><span>// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span>struct</span> sockaddr_in6 <span>{</span></span>
<span id="cb14-4">    u_int16_t       sin6_family<span>;</span>   <span>// address family, AF_INET6</span></span>
<span id="cb14-5">    u_int16_t       sin6_port<span>;</span>     <span>// port number, Network Byte Order</span></span>
<span id="cb14-6">    u_int32_t       sin6_flowinfo<span>;</span> <span>// IPv6 flow information</span></span>
<span id="cb14-7">    <span>struct</span> in6_addr sin6_addr<span>;</span>     <span>// IPv6 address</span></span>
<span id="cb14-8">    u_int32_t       sin6_scope_id<span>;</span> <span>// Scope ID</span></span>
<span id="cb14-9"><span>};</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span>struct</span> in6_addr <span>{</span></span>
<span id="cb14-12">    <span>unsigned</span> <span>char</span>   s6_addr<span>[</span><span>16</span><span>];</span>   <span>// IPv6 address</span></span>
<span id="cb14-13"><span>};</span></span></code></pre></div>
<p>Note that IPv6 has an IPv6 address and a port number, just like IPv4 has an IPv4 address and a port number.</p>
<p>Also note that I’m not going to talk about the IPv6 flow information or Scope ID fields for the moment… this is just a starter guide. <code>:-)</code></p>
<p>Last but not least, here is another simple structure, <code>struct sockaddr_storage</code> that is designed to be large enough to hold both IPv4 and IPv6 structures. See, for some calls, sometimes you don’t know in advance if it’s going to fill out your <code>struct sockaddr</code> with an IPv4 or IPv6 address. So you pass in this parallel structure, very similar to <code>struct sockaddr</code> except larger, and then cast it to the type you need:</p>
<div id="cb15"><pre><code><span id="cb15-1"><span>struct</span> sockaddr_storage <span>{</span></span>
<span id="cb15-2">    sa_family_t  ss_family<span>;</span>     <span>// address family</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">    <span>// all this is padding, implementation specific, ignore it:</span></span>
<span id="cb15-5">    <span>char</span>      __ss_pad1<span>[</span>_SS_PAD1SIZE<span>];</span></span>
<span id="cb15-6">    <span>int64_t</span>   __ss_align<span>;</span></span>
<span id="cb15-7">    <span>char</span>      __ss_pad2<span>[</span>_SS_PAD2SIZE<span>];</span></span>
<span id="cb15-8"><span>};</span></span></code></pre></div>
<p>What’s important is that you can see the address family in the <code>ss_family</code> field—check this to see if it’s <code>AF_INET</code> or <code>AF_INET6</code> (for IPv4 or IPv6). Then you can cast it to a <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> if you wanna.</p>
<h2 data-number="3.4" id="ip-addresses-part-deux"> IP Addresses, Part Deux</h2>
<p>Fortunately for you, there are a bunch of functions that allow you to manipulate IP addresses. No need to figure them out by hand and stuff them in a <code>long</code> with the <code>&lt;&lt;</code> operator.</p>
<p>First, let’s say you have a <code>struct sockaddr_in ina</code>, and you have an IP address “<code>10.12.110.57</code>” or “<code>2001:db8:63b3:1::3490</code>” that you want to store into it. The function you want to use, <code>inet_pton()</code>, converts an IP address in numbers-and-dots notation into either a <code>struct in_addr</code> or a <code>struct in6_addr</code> depending on whether you specify <code>AF_INET</code> or <code>AF_INET6</code>. (“<code>pton</code>” stands for “presentation to network”—you can call it “printable to network” if that’s easier to remember.) The conversion can be made as follows:</p>
<div id="cb16"><pre><code><span id="cb16-1"><span>struct</span> sockaddr_in sa<span>;</span> <span>// IPv4</span></span>
<span id="cb16-2"><span>struct</span> sockaddr_in6 sa6<span>;</span> <span>// IPv6</span></span>
<span id="cb16-3"></span>
<span id="cb16-4">inet_pton<span>(</span>AF_INET<span>,</span> <span>"10.12.110.57"</span><span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>));</span> <span>// IPv4</span></span>
<span id="cb16-5">inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:63b3:1::3490"</span><span>,</span> <span>&amp;(</span>sa6<span>.</span>sin6_addr<span>));</span> <span>// IPv6</span></span></code></pre></div>
<p>(Quick note: the old way of doing things used a function called <code>inet_addr()</code> or another function called <code>inet_aton()</code>; these are now obsolete and don’t work with IPv6.)</p>
<p>Now, the above code snippet isn’t very robust because there is no error checking. See, <code>inet_pton()</code> returns <code>-1</code> on error, or 0 if the address is messed up. So check to make sure the result is greater than 0 before using!</p>
<p>All right, now you can convert string IP addresses to their binary representations. What about the other way around? What if you have a <code>struct in_addr</code> and you want to print it in numbers-and-dots notation? (Or a <code>struct in6_addr</code> that you want in, uh, “hex-and-colons” notation.) In this case, you’ll want to use the function <code>inet_ntop()</code> (“ntop” means “network to presentation”—you can call it “network to printable” if that’s easier to remember), like this:</p>
<div id="cb17"><pre><code><span id="cb17-1"><a href="#cb17-1"></a><span>// IPv4:</span></span>
<span id="cb17-2"><a href="#cb17-2"></a></span>
<span id="cb17-3"><a href="#cb17-3"></a><span>char</span> ip4<span>[</span>INET_ADDRSTRLEN<span>];</span>  <span>// space to hold the IPv4 string</span></span>
<span id="cb17-4"><a href="#cb17-4"></a><span>struct</span> sockaddr_in sa<span>;</span>      <span>// pretend this is loaded with something</span></span>
<span id="cb17-5"><a href="#cb17-5"></a></span>
<span id="cb17-6"><a href="#cb17-6"></a>inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>),</span> ip4<span>,</span> INET_ADDRSTRLEN<span>);</span></span>
<span id="cb17-7"><a href="#cb17-7"></a></span>
<span id="cb17-8"><a href="#cb17-8"></a>printf<span>(</span><span>"The IPv4 address is: </span><span>%s\n</span><span>"</span><span>,</span> ip4<span>);</span></span>
<span id="cb17-9"><a href="#cb17-9"></a></span>
<span id="cb17-10"><a href="#cb17-10"></a></span>
<span id="cb17-11"><a href="#cb17-11"></a><span>// IPv6:</span></span>
<span id="cb17-12"><a href="#cb17-12"></a></span>
<span id="cb17-13"><a href="#cb17-13"></a><span>char</span> ip6<span>[</span>INET6_ADDRSTRLEN<span>];</span> <span>// space to hold the IPv6 string</span></span>
<span id="cb17-14"><a href="#cb17-14"></a><span>struct</span> sockaddr_in6 sa6<span>;</span>    <span>// pretend this is loaded with something</span></span>
<span id="cb17-15"><a href="#cb17-15"></a></span>
<span id="cb17-16"><a href="#cb17-16"></a>inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;(</span>sa6<span>.</span>sin6_addr<span>),</span> ip6<span>,</span> INET6_ADDRSTRLEN<span>);</span></span>
<span id="cb17-17"><a href="#cb17-17"></a></span>
<span id="cb17-18"><a href="#cb17-18"></a>printf<span>(</span><span>"The address is: </span><span>%s\n</span><span>"</span><span>,</span> ip6<span>);</span></span></code></pre></div>
<p>When you call it, you’ll pass the address type (IPv4 or IPv6), the address, a pointer to a string to hold the result, and the maximum length of that string. (Two macros conveniently hold the size of the string you’ll need to hold the largest IPv4 or IPv6 address: <code>INET_ADDRSTRLEN</code> and <code>INET6_ADDRSTRLEN</code>.)</p>
<p>(Another quick note to mention once again the old way of doing things: the historical function to do this conversion was called <code>inet_ntoa()</code>. It’s also obsolete and won’t work with IPv6.)</p>
<p>Lastly, these functions only work with numeric IP addresses—they won’t do any nameserver DNS lookup on a hostname, like “<code>www.example.com</code>”. You will use <code>getaddrinfo()</code> to do that, as you’ll see later on.</p>
<h3 data-number="3.4.1" id="private-or-disconnected-networks"> Private (Or Disconnected) Networks</h3>
<p> Lots of places have a firewall that hides the network from the rest of the world for their own protection. And often times, the firewall translates “internal” IP addresses to “external” (that everyone else in the world knows) IP addresses using a process called <em>Network Address Translation</em>, or NAT.</p>
<p>Are you getting nervous yet? “Where’s he going with all this weird stuff?”</p>
<p>Well, relax and buy yourself a non-alcoholic (or alcoholic) drink, because as a beginner, you don’t even have to worry about NAT, since it’s done for you transparently. But I wanted to talk about the network behind the firewall in case you started getting confused by the network numbers you were seeing.</p>
<p>For instance, I have a firewall at home. I have two static IPv4 addresses allocated to me by the DSL company, and yet I have seven computers on the network. How is this possible? Two computers can’t share the same IP address, or else the data wouldn’t know which one to go to!</p>
<p>The answer is: they don’t share the same IP addresses. They are on a private network with 24 million IP addresses allocated to it. They are all just for me. Well, all for me as far as anyone else is concerned. Here’s what’s happening:</p>
<p>If I log into a remote computer, it tells me I’m logged in from 192.0.2.33 which is the public IP address my ISP has provided to me. But if I ask my local computer what its IP address is, it says 10.0.0.5. Who is translating the IP address from one to the other? That’s right, the firewall! It’s doing NAT!</p>
<p><code>10.x.x.x</code> is one of a few reserved networks that are only to be used either on fully disconnected networks, or on networks that are behind firewalls. The details of which private network numbers are available for you to use are outlined in <a href="https://tools.ietf.org/html/rfc1918">RFC 1918</a><a href="#fn18" id="fnref18" role="doc-noteref"><sup>18</sup></a>, but some common ones you’ll see are <code>10.x.x.x</code> and <code>192.168.x.x</code>, where <code>x</code> is 0-255, generally. Less common is <code>172.y.x.x</code>, where <code>y</code> goes between 16 and 31.</p>
<p>Networks behind a NATing firewall don’t <em>need</em> to be on one of these reserved networks, but they commonly are.</p>
<p>(Fun fact! My external IP address isn’t really <code>192.0.2.33</code>. The <code>192.0.2.x</code> network is reserved for make-believe “real” IP addresses to be used in documentation, just like this guide! Wowzers!)</p>
<p> IPv6 has private networks, too, in a sense. They’ll start with <code>fdXX:</code> (or maybe in the future <code>fcXX:</code>), as per <a href="https://tools.ietf.org/html/rfc4193">RFC 4193</a><a href="#fn19" id="fnref19" role="doc-noteref"><sup>19</sup></a>. NAT and IPv6 don’t generally mix, however (unless you’re doing the IPv6 to IPv4 gateway thing which is beyond the scope of this document)—in theory you’ll have so many addresses at your disposal that you won’t need to use NAT any longer. But if you want to allocate addresses for yourself on a network that won’t route outside, this is how to do it.</p>
<h2 data-number="4" id="jumping-from-ipv4-to-ipv6"> Jumping from IPv4 to IPv6</h2>

<p>But I just want to know what to change in my code to get it going with IPv6! Tell me now!</p>
<p>Ok! Ok!</p>
<p>Almost everything in here is something I’ve gone over, above, but it’s the short version for the impatient. (Of course, there is more than this, but this is what applies to the guide.)</p>
<ol type="1">
<li><p>First of all, try to use <a href="#structs"><code>getaddrinfo()</code></a> to get all the <code>struct sockaddr</code> info, instead of packing the structures by hand. This will keep you IP version-agnostic, and will eliminate many of the subsequent steps.</p></li>
<li><p>Any place that you find you’re hard-coding anything related to the IP version, try to wrap up in a helper function.</p></li>
<li><p>Change <code>AF_INET</code> to <code>AF_INET6</code>.</p></li>
<li><p>Change <code>PF_INET</code> to <code>PF_INET6</code>.</p></li>
<li><p>Change <code>INADDR_ANY</code> assignments to <code>in6addr_any</code> assignments, which are slightly different:</p>
<div id="cb18"><pre><code><span id="cb18-1"><span>struct</span> sockaddr_in sa<span>;</span></span>
<span id="cb18-2"><span>struct</span> sockaddr_in6 sa6<span>;</span></span>
<span id="cb18-3"></span>
<span id="cb18-4">sa<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> INADDR_ANY<span>;</span>  <span>// use my IPv4 address</span></span>
<span id="cb18-5">sa6<span>.</span>sin6_addr <span>=</span> in6addr_any<span>;</span> <span>// use my IPv6 address</span></span></code></pre></div>
<p>Also, the value <code>IN6ADDR_ANY_INIT</code> can be used as an initializer when the <code>struct in6_addr</code> is declared, like so:</p>
<div id="cb19"><pre><code><span id="cb19-1"><span>struct</span> in6_addr ia6 <span>=</span> IN6ADDR_ANY_INIT<span>;</span></span></code></pre></div></li>
<li><p>Instead of <code>struct sockaddr_in</code> use <code>struct sockaddr_in6</code>, being sure to add “6” to the fields as appropriate (see <a href="#structs"><code>struct</code>s</a>, above). There is no <code>sin6_zero</code> field.</p></li>
<li><p>Instead of <code>struct in_addr</code> use <code>struct in6_addr</code>, being sure to add “6” to the fields as appropriate (see <a href="#structs"><code>struct</code>s</a>, above).</p></li>
<li><p>Instead of <code>inet_aton()</code> or <code>inet_addr()</code>, use <code>inet_pton()</code>.</p></li>
<li><p>Instead of <code>inet_ntoa()</code>, use <code>inet_ntop()</code>.</p></li>
<li><p>Instead of <code>gethostbyname()</code>, use the superior <code>getaddrinfo()</code>.</p></li>
<li><p>Instead of <code>gethostbyaddr()</code>, use the superior <code>getnameinfo()</code> (although <code>gethostbyaddr()</code> can still work with IPv6).</p></li>
<li><p><code>INADDR_BROADCAST</code> no longer works. Use IPv6 multicast instead.</p></li>
</ol>
<p><em>Et voila</em>!</p>
<h2 data-number="5" id="system-calls-or-bust"> System Calls or Bust</h2>
<p>This is the section where we get into the system calls (and other library calls) that allow you to access the network functionality of a Unix box, or any box that supports the sockets API for that matter (BSD, Windows, Linux, Mac, what-have-you.) When you call one of these functions, the kernel takes over and does all the work for you automagically.</p>
<p>The place most people get stuck around here is what order to call these things in. In that, the <code>man</code> pages are no use, as you’ve probably discovered. Well, to help with that dreadful situation, I’ve tried to lay out the system calls in the following sections in <em>exactly</em> (approximately) the same order that you’ll need to call them in your programs.</p>
<p>That, coupled with a few pieces of sample code here and there, some milk and cookies (which I fear you will have to supply yourself), and some raw guts and courage, and you’ll be beaming data around the Internet like the Son of Jon Postel!</p>
<p><em>(Please note that for brevity, many code snippets below do not include necessary error checking. And they very commonly assume that the result from calls to <code>getaddrinfo()</code> succeed and return a valid entry in the linked list. Both of these situations are properly addressed in the stand-alone programs, though, so use those as a model.)</em></p>
<h2 data-number="5.1" id="getaddrinfoprepare-to-launch"> <code>getaddrinfo()</code>—Prepare to launch!</h2>
<p> This is a real workhorse of a function with a lot of options, but usage is actually pretty simple. It helps set up the <code>struct</code>s you need later on.</p>
<p>A tiny bit of history: it used to be that you would use a function called <code>gethostbyname()</code> to do DNS lookups. Then you’d load that information by hand into a <code>struct sockaddr_in</code>, and use that in your calls.</p>
<p>This is no longer necessary, thankfully. (Nor is it desirable, if you want to write code that works for both IPv4 and IPv6!) In these modern times, you now have the function <code>getaddrinfo()</code> that does all kinds of good stuff for you, including DNS and service name lookups, and fills out the <code>struct</code>s you need, besides!</p>
<p>Let’s take a look!</p>
<div id="cb20"><pre><code><span id="cb20-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb20-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb20-3"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb20-4"></span>
<span id="cb20-5"><span>int</span> getaddrinfo<span>(</span><span>const</span> <span>char</span> <span>*</span>node<span>,</span>     <span>// e.g. "www.example.com" or IP</span></span>
<span id="cb20-6">                <span>const</span> <span>char</span> <span>*</span>service<span>,</span>  <span>// e.g. "http" or port number</span></span>
<span id="cb20-7">                <span>const</span> <span>struct</span> addrinfo <span>*</span>hints<span>,</span></span>
<span id="cb20-8">                <span>struct</span> addrinfo <span>**</span>res<span>);</span></span></code></pre></div>
<p>You give this function three input parameters, and it gives you a pointer to a linked-list, <code>res</code>, of results.</p>
<p>The <code>node</code> parameter is the host name to connect to, or an IP address.</p>
<p>Next is the parameter <code>service</code>, which can be a port number, like “80”, or the name of a particular service (found in <a href="https://www.iana.org/assignments/port-numbers">The IANA Port List</a><a href="#fn20" id="fnref20" role="doc-noteref"><sup>20</sup></a> or the <code>/etc/services</code> file on your Unix machine) like “http” or “ftp” or “telnet” or “smtp” or whatever.</p>
<p>Finally, the <code>hints</code> parameter points to a <code>struct addrinfo</code> that you’ve already filled out with relevant information.</p>
<p>Here’s a sample call if you’re a server who wants to listen on your host’s IP address, port 3490. Note that this doesn’t actually do any listening or network setup; it merely sets up structures we’ll use later:</p>
<div id="cb21"><pre><code><span id="cb21-1"><a href="#cb21-1"></a><span>int</span> status<span>;</span></span>
<span id="cb21-2"><a href="#cb21-2"></a><span>struct</span> addrinfo hints<span>;</span></span>
<span id="cb21-3"><a href="#cb21-3"></a><span>struct</span> addrinfo <span>*</span>servinfo<span>;</span>  <span>// will point to the results</span></span>
<span id="cb21-4"><a href="#cb21-4"></a></span>
<span id="cb21-5"><a href="#cb21-5"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span> <span>// make sure the struct is empty</span></span>
<span id="cb21-6"><a href="#cb21-6"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>     <span>// don't care IPv4 or IPv6</span></span>
<span id="cb21-7"><a href="#cb21-7"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span> <span>// TCP stream sockets</span></span>
<span id="cb21-8"><a href="#cb21-8"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb21-9"><a href="#cb21-9"></a></span>
<span id="cb21-10"><a href="#cb21-10"></a><span>if</span> <span>((</span>status <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb21-11"><a href="#cb21-11"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo error: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>status<span>));</span></span>
<span id="cb21-12"><a href="#cb21-12"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb21-13"><a href="#cb21-13"></a><span>}</span></span>
<span id="cb21-14"><a href="#cb21-14"></a></span>
<span id="cb21-15"><a href="#cb21-15"></a><span>// servinfo now points to a linked list of 1 or more struct addrinfos</span></span>
<span id="cb21-16"><a href="#cb21-16"></a></span>
<span id="cb21-17"><a href="#cb21-17"></a><span>// ... do everything until you don't need servinfo anymore ....</span></span>
<span id="cb21-18"><a href="#cb21-18"></a></span>
<span id="cb21-19"><a href="#cb21-19"></a>freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// free the linked-list</span></span></code></pre></div>
<p>Notice that I set the <code>ai_family</code> to <code>AF_UNSPEC</code>, thereby saying that I don’t care if we use IPv4 or IPv6. You can set it to <code>AF_INET</code> or <code>AF_INET6</code> if you want one or the other specifically.</p>
<p>Also, you’ll see the <code>AI_PASSIVE</code> flag in there; this tells <code>getaddrinfo()</code> to assign the address of my local host to the socket structures. This is nice because then you don’t have to hardcode it. (Or you can put a specific address in as the first parameter to <code>getaddrinfo()</code> where I currently have <code>NULL</code>, up there.)</p>
<p>Then we make the call. If there’s an error (<code>getaddrinfo()</code> returns non-zero), we can print it out using the function <code>gai_strerror()</code>, as you see. If everything works properly, though, <code>servinfo</code> will point to a linked list of <code>struct addrinfo</code>s, each of which contains a <code>struct sockaddr</code> of some kind that we can use later! Nifty!</p>
<p>Finally, when we’re eventually all done with the linked list that <code>getaddrinfo()</code> so graciously allocated for us, we can (and should) free it all up with a call to <code>freeaddrinfo()</code>.</p>
<p>Here’s a sample call if you’re a client who wants to connect to a particular server, say “www.example.net” port 3490. Again, this doesn’t actually connect, but it sets up the structures we’ll use later:</p>
<div id="cb22"><pre><code><span id="cb22-1"><a href="#cb22-1"></a><span>int</span> status<span>;</span></span>
<span id="cb22-2"><a href="#cb22-2"></a><span>struct</span> addrinfo hints<span>;</span></span>
<span id="cb22-3"><a href="#cb22-3"></a><span>struct</span> addrinfo <span>*</span>servinfo<span>;</span>  <span>// will point to the results</span></span>
<span id="cb22-4"><a href="#cb22-4"></a></span>
<span id="cb22-5"><a href="#cb22-5"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span> <span>// make sure the struct is empty</span></span>
<span id="cb22-6"><a href="#cb22-6"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>     <span>// don't care IPv4 or IPv6</span></span>
<span id="cb22-7"><a href="#cb22-7"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span> <span>// TCP stream sockets</span></span>
<span id="cb22-8"><a href="#cb22-8"></a></span>
<span id="cb22-9"><a href="#cb22-9"></a><span>// get ready to connect</span></span>
<span id="cb22-10"><a href="#cb22-10"></a>status <span>=</span> getaddrinfo<span>(</span><span>"www.example.net"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>);</span></span>
<span id="cb22-11"><a href="#cb22-11"></a></span>
<span id="cb22-12"><a href="#cb22-12"></a><span>// servinfo now points to a linked list of 1 or more struct addrinfos</span></span>
<span id="cb22-13"><a href="#cb22-13"></a></span>
<span id="cb22-14"><a href="#cb22-14"></a><span>// etc.</span></span></code></pre></div>
<p>I keep saying that <code>servinfo</code> is a linked list with all kinds of address information. Let’s write a quick demo program to show off this information. <a href="https://beej.us/guide/bgnet/examples/showip.c">This short program</a><a href="#fn21" id="fnref21" role="doc-noteref"><sup>21</sup></a> will print the IP addresses for whatever host you specify on the command line:</p>
<div id="cb23"><pre><code><span id="cb23-1"><a href="#cb23-1"></a><span>/*</span></span>
<span id="cb23-2"><a href="#cb23-2"></a><span>** showip.c -- show IP addresses for a host given on the command line</span></span>
<span id="cb23-3"><a href="#cb23-3"></a><span>*/</span></span>
<span id="cb23-4"><a href="#cb23-4"></a></span>
<span id="cb23-5"><a href="#cb23-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb23-6"><a href="#cb23-6"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb23-7"><a href="#cb23-7"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb23-8"><a href="#cb23-8"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb23-9"><a href="#cb23-9"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb23-10"><a href="#cb23-10"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb23-11"><a href="#cb23-11"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb23-12"><a href="#cb23-12"></a></span>
<span id="cb23-13"><a href="#cb23-13"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb23-14"><a href="#cb23-14"></a><span>{</span></span>
<span id="cb23-15"><a href="#cb23-15"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb23-16"><a href="#cb23-16"></a>    <span>int</span> status<span>;</span></span>
<span id="cb23-17"><a href="#cb23-17"></a>    <span>char</span> ipstr<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb23-18"><a href="#cb23-18"></a></span>
<span id="cb23-19"><a href="#cb23-19"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb23-20"><a href="#cb23-20"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: showip hostname</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb23-21"><a href="#cb23-21"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb23-22"><a href="#cb23-22"></a>    <span>}</span></span>
<span id="cb23-23"><a href="#cb23-23"></a></span>
<span id="cb23-24"><a href="#cb23-24"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb23-25"><a href="#cb23-25"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span> <span>// AF_INET or AF_INET6 to force version</span></span>
<span id="cb23-26"><a href="#cb23-26"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb23-27"><a href="#cb23-27"></a></span>
<span id="cb23-28"><a href="#cb23-28"></a>    <span>if</span> <span>((</span>status <span>=</span> getaddrinfo<span>(</span>argv<span>[</span><span>1</span><span>],</span> NULL<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb23-29"><a href="#cb23-29"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>status<span>));</span></span>
<span id="cb23-30"><a href="#cb23-30"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb23-31"><a href="#cb23-31"></a>    <span>}</span></span>
<span id="cb23-32"><a href="#cb23-32"></a></span>
<span id="cb23-33"><a href="#cb23-33"></a>    printf<span>(</span><span>"IP addresses for </span><span>%s</span><span>:</span><span>\n\n</span><span>"</span><span>,</span> argv<span>[</span><span>1</span><span>]);</span></span>
<span id="cb23-34"><a href="#cb23-34"></a></span>
<span id="cb23-35"><a href="#cb23-35"></a>    <span>for</span><span>(</span>p <span>=</span> res<span>;</span>p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb23-36"><a href="#cb23-36"></a>        <span>void</span> <span>*</span>addr<span>;</span></span>
<span id="cb23-37"><a href="#cb23-37"></a>        <span>char</span> <span>*</span>ipver<span>;</span></span>
<span id="cb23-38"><a href="#cb23-38"></a></span>
<span id="cb23-39"><a href="#cb23-39"></a>        <span>// get the pointer to the address itself,</span></span>
<span id="cb23-40"><a href="#cb23-40"></a>        <span>// different fields in IPv4 and IPv6:</span></span>
<span id="cb23-41"><a href="#cb23-41"></a>        <span>if</span> <span>(</span>p<span>-&gt;</span>ai_family <span>==</span> AF_INET<span>)</span> <span>{</span> <span>// IPv4</span></span>
<span id="cb23-42"><a href="#cb23-42"></a>            <span>struct</span> sockaddr_in <span>*</span>ipv4 <span>=</span> <span>(</span><span>struct</span> sockaddr_in <span>*)</span>p<span>-&gt;</span>ai_addr<span>;</span></span>
<span id="cb23-43"><a href="#cb23-43"></a>            addr <span>=</span> <span>&amp;(</span>ipv4<span>-&gt;</span>sin_addr<span>);</span></span>
<span id="cb23-44"><a href="#cb23-44"></a>            ipver <span>=</span> <span>"IPv4"</span><span>;</span></span>
<span id="cb23-45"><a href="#cb23-45"></a>        <span>}</span> <span>else</span> <span>{</span> <span>// IPv6</span></span>
<span id="cb23-46"><a href="#cb23-46"></a>            <span>struct</span> sockaddr_in6 <span>*</span>ipv6 <span>=</span> <span>(</span><span>struct</span> sockaddr_in6 <span>*)</span>p<span>-&gt;</span>ai_addr<span>;</span></span>
<span id="cb23-47"><a href="#cb23-47"></a>            addr <span>=</span> <span>&amp;(</span>ipv6<span>-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb23-48"><a href="#cb23-48"></a>            ipver <span>=</span> <span>"IPv6"</span><span>;</span></span>
<span id="cb23-49"><a href="#cb23-49"></a>        <span>}</span></span>
<span id="cb23-50"><a href="#cb23-50"></a></span>
<span id="cb23-51"><a href="#cb23-51"></a>        <span>// convert the IP to a string and print it:</span></span>
<span id="cb23-52"><a href="#cb23-52"></a>        inet_ntop<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> addr<span>,</span> ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span>
<span id="cb23-53"><a href="#cb23-53"></a>        printf<span>(</span><span>"  </span><span>%s</span><span>: </span><span>%s\n</span><span>"</span><span>,</span> ipver<span>,</span> ipstr<span>);</span></span>
<span id="cb23-54"><a href="#cb23-54"></a>    <span>}</span></span>
<span id="cb23-55"><a href="#cb23-55"></a></span>
<span id="cb23-56"><a href="#cb23-56"></a>    freeaddrinfo<span>(</span>res<span>);</span> <span>// free the linked list</span></span>
<span id="cb23-57"><a href="#cb23-57"></a></span>
<span id="cb23-58"><a href="#cb23-58"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb23-59"><a href="#cb23-59"></a><span>}</span></span></code></pre></div>
<p>As you see, the code calls <code>getaddrinfo()</code> on whatever you pass on the command line, that fills out the linked list pointed to by <code>res</code>, and then we can iterate over the list and print stuff out or do whatever.</p>
<p>(There’s a little bit of ugliness there where we have to dig into the different types of <code>struct sockaddr</code>s depending on the IP version. Sorry about that! I’m not sure of a better way around it.)</p>
<p>Sample run! Everyone loves screenshots:</p>
<pre><code>$ showip www.example.net
IP addresses for www.example.net:

  IPv4: 192.0.2.88

$ showip ipv6.example.com
IP addresses for ipv6.example.com:

  IPv4: 192.0.2.101
  IPv6: 2001:db8:8c00:22::171</code></pre>
<p>Now that we have that under control, we’ll use the results we get from <code>getaddrinfo()</code> to pass to other socket functions and, at long last, get our network connection established! Keep reading!</p>
<h2 data-number="5.2" id="socket"> <code>socket()</code>—Get the File Descriptor!</h2>
<p>I guess I can put it off no longer—I have to talk about the <code>socket()</code> system call. Here’s the breakdown:</p>
<div id="cb25"><pre><code><span id="cb25-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb25-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span>int</span> socket<span>(</span><span>int</span> domain<span>,</span> <span>int</span> type<span>,</span> <span>int</span> protocol<span>);</span> </span></code></pre></div>
<p>But what are these arguments? They allow you to say what kind of socket you want (IPv4 or IPv6, stream or datagram, and TCP or UDP).</p>
<p>It used to be people would hardcode these values, and you can absolutely still do that. (<code>domain</code> is <code>PF_INET</code> or <code>PF_INET6</code>, <code>type</code> is <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, and <code>protocol</code> can be set to <code>0</code> to choose the proper protocol for the given <code>type</code>. Or you can call <code>getprotobyname()</code> to look up the protocol you want, “tcp” or “udp”.)</p>
<p>(This <code>PF_INET</code> thing is a close relative of the <code>AF_INET</code> that you can use when initializing the <code>sin_family</code> field in your <code>struct sockaddr_in</code>. In fact, they’re so closely related that they actually have the same value, and many programmers will call <code>socket()</code> and pass <code>AF_INET</code> as the first argument instead of <code>PF_INET</code>. Now, get some milk and cookies, because it’s time for a story. Once upon a time, a long time ago, it was thought that maybe an address family (what the “AF” in “<code>AF_INET</code>” stands for) might support several protocols that were referred to by their protocol family (what the “PF” in “<code>PF_INET</code>” stands for). That didn’t happen. And they all lived happily ever after, The End. So the most correct thing to do is to use <code>AF_INET</code> in your <code>struct sockaddr_in</code> and <code>PF_INET</code> in your call to <code>socket()</code>.)</p>
<p>Anyway, enough of that. What you really want to do is use the values from the results of the call to <code>getaddrinfo()</code>, and feed them into <code>socket()</code> directly like this:</p>
<div id="cb26"><pre><code><span id="cb26-1"><a href="#cb26-1"></a><span>int</span> s<span>;</span></span>
<span id="cb26-2"><a href="#cb26-2"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb26-3"><a href="#cb26-3"></a></span>
<span id="cb26-4"><a href="#cb26-4"></a><span>// do the lookup</span></span>
<span id="cb26-5"><a href="#cb26-5"></a><span>// [pretend we already filled out the "hints" struct]</span></span>
<span id="cb26-6"><a href="#cb26-6"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"http"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb26-7"><a href="#cb26-7"></a></span>
<span id="cb26-8"><a href="#cb26-8"></a><span>// again, you should do error-checking on getaddrinfo(), and walk</span></span>
<span id="cb26-9"><a href="#cb26-9"></a><span>// the "res" linked list looking for valid entries instead of just</span></span>
<span id="cb26-10"><a href="#cb26-10"></a><span>// assuming the first one is good (like many of these examples do).</span></span>
<span id="cb26-11"><a href="#cb26-11"></a><span>// See the section on client/server for real examples.</span></span>
<span id="cb26-12"><a href="#cb26-12"></a></span>
<span id="cb26-13"><a href="#cb26-13"></a>s <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span></code></pre></div>
<p><code>socket()</code> simply returns to you a <em>socket descriptor</em> that you can use in later system calls, or <code>-1</code> on error. The global variable <code>errno</code> is set to the error’s value (see the <a href="#errnoman"><code>errno</code></a> man page for more details, and a quick note on using <code>errno</code> in multithreaded programs).</p>
<p>Fine, fine, fine, but what good is this socket? The answer is that it’s really no good by itself, and you need to read on and make more system calls for it to make any sense.</p>
<h2 data-number="5.3" id="bind"> <code>bind()</code>—What port am I on?</h2>
<p> Once you have a socket, you might have to associate that socket with a port on your local machine. (This is commonly done if you’re going to <code>listen()</code> for incoming connections on a specific port—multiplayer network games do this when they tell you to “connect to 192.168.5.10 port 3490”.) The port number is used by the kernel to match an incoming packet to a certain process’s socket descriptor. If you’re going to only be doing a <code>connect()</code> (because you’re the client, not the server), this is probably unnecessary. Read it anyway, just for kicks.</p>
<p>Here is the synopsis for the <code>bind()</code> system call:</p>
<div id="cb27"><pre><code><span id="cb27-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb27-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb27-3"></span>
<span id="cb27-4"><span>int</span> bind<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>my_addr<span>,</span> <span>int</span> addrlen<span>);</span></span></code></pre></div>
<p><code>sockfd</code> is the socket file descriptor returned by <code>socket()</code>. <code>my_addr</code> is a pointer to a <code>struct sockaddr</code> that contains information about your address, namely, port and IP address. <code>addrlen</code> is the length in bytes of that address.</p>
<p>Whew. That’s a bit to absorb in one chunk. Let’s have an example that binds the socket to the host the program is running on, port 3490:</p>
<div id="cb28"><pre><code><span id="cb28-1"><a href="#cb28-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb28-2"><a href="#cb28-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb28-3"><a href="#cb28-3"></a></span>
<span id="cb28-4"><a href="#cb28-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb28-5"><a href="#cb28-5"></a></span>
<span id="cb28-6"><a href="#cb28-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb28-7"><a href="#cb28-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb28-8"><a href="#cb28-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb28-9"><a href="#cb28-9"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb28-10"><a href="#cb28-10"></a></span>
<span id="cb28-11"><a href="#cb28-11"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb28-12"><a href="#cb28-12"></a></span>
<span id="cb28-13"><a href="#cb28-13"></a><span>// make a socket:</span></span>
<span id="cb28-14"><a href="#cb28-14"></a></span>
<span id="cb28-15"><a href="#cb28-15"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb28-16"><a href="#cb28-16"></a></span>
<span id="cb28-17"><a href="#cb28-17"></a><span>// bind it to the port we passed in to getaddrinfo():</span></span>
<span id="cb28-18"><a href="#cb28-18"></a></span>
<span id="cb28-19"><a href="#cb28-19"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<p>By using the <code>AI_PASSIVE</code> flag, I’m telling the program to bind to the IP of the host it’s running on. If you want to bind to a specific local IP address, drop the <code>AI_PASSIVE</code> and put an IP address in for the first argument to <code>getaddrinfo()</code>.</p>
<p><code>bind()</code> also returns <code>-1</code> on error and sets <code>errno</code> to the error’s value.</p>
<p>Lots of old code manually packs the <code>struct sockaddr_in</code> before calling <code>bind()</code>. Obviously this is IPv4-specific, but there’s really nothing stopping you from doing the same thing with IPv6, except that using <code>getaddrinfo()</code> is going to be easier, generally. Anyway, the old code looks something like this:</p>
<div id="cb29"><pre><code><span id="cb29-1"><a href="#cb29-1"></a><span>// !!! THIS IS THE OLD WAY !!!</span></span>
<span id="cb29-2"><a href="#cb29-2"></a></span>
<span id="cb29-3"><a href="#cb29-3"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb29-4"><a href="#cb29-4"></a><span>struct</span> sockaddr_in my_addr<span>;</span></span>
<span id="cb29-5"><a href="#cb29-5"></a></span>
<span id="cb29-6"><a href="#cb29-6"></a>sockfd <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb29-7"><a href="#cb29-7"></a></span>
<span id="cb29-8"><a href="#cb29-8"></a>my_addr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span></span>
<span id="cb29-9"><a href="#cb29-9"></a>my_addr<span>.</span>sin_port <span>=</span> htons<span>(</span>MYPORT<span>);</span>     <span>// short, network byte order</span></span>
<span id="cb29-10"><a href="#cb29-10"></a>my_addr<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> inet_addr<span>(</span><span>"10.12.110.57"</span><span>);</span></span>
<span id="cb29-11"><a href="#cb29-11"></a>memset<span>(</span>my_addr<span>.</span>sin_zero<span>,</span> <span>'</span><span>\0</span><span>'</span><span>,</span> <span>sizeof</span> my_addr<span>.</span>sin_zero<span>);</span></span>
<span id="cb29-12"><a href="#cb29-12"></a></span>
<span id="cb29-13"><a href="#cb29-13"></a>bind<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>my_addr<span>,</span> <span>sizeof</span> my_addr<span>);</span></span></code></pre></div>
<p>In the above code, you could also assign <code>INADDR_ANY</code> to the <code>s_addr</code> field if you wanted to bind to your local IP address (like the <code>AI_PASSIVE</code> flag, above). The IPv6 version of <code>INADDR_ANY</code> is a global variable <code>in6addr_any</code> that is assigned into the <code>sin6_addr</code> field of your <code>struct sockaddr_in6</code>. (There is also a macro <code>IN6ADDR_ANY_INIT</code> that you can use in a variable initializer.)</p>
<p>Another thing to watch out for when calling <code>bind()</code>: don’t go underboard with your port numbers. All ports below 1024 are RESERVED (unless you’re the superuser)! You can have any port number above that, right up to 65535 (provided they aren’t already being used by another program).</p>
<p>Sometimes, you might notice, you try to rerun a server and <code>bind()</code> fails, claiming “Address already in use.” What does that mean? Well, a little bit of a socket that was connected is still hanging around in the kernel, and it’s hogging the port. You can either wait for it to clear (a minute or so), or add code to your program allowing it to reuse the port, like this:</p>

<div id="cb30"><pre><code><span id="cb30-1"><a href="#cb30-1"></a><span>int</span> yes<span>=</span><span>1</span><span>;</span></span>
<span id="cb30-2"><a href="#cb30-2"></a><span>//char yes='1'; // Solaris people use this</span></span>
<span id="cb30-3"><a href="#cb30-3"></a></span>
<span id="cb30-4"><a href="#cb30-4"></a><span>// lose the pesky "Address already in use" error message</span></span>
<span id="cb30-5"><a href="#cb30-5"></a><span>if</span> <span>(</span>setsockopt<span>(</span>listener<span>,</span>SOL_SOCKET<span>,</span>SO_REUSEADDR<span>,&amp;</span>yes<span>,</span><span>sizeof</span> yes<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb30-6"><a href="#cb30-6"></a>    perror<span>(</span><span>"setsockopt"</span><span>);</span></span>
<span id="cb30-7"><a href="#cb30-7"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb30-8"><a href="#cb30-8"></a><span>}</span> </span></code></pre></div>
<p> One small extra final note about <code>bind()</code>: there are times when you won’t absolutely have to call it. If you are <code>connect()</code>ing to a remote machine and you don’t care what your local port is (as is the case with <code>telnet</code> where you only care about the remote port), you can simply call <code>connect()</code>, it’ll check to see if the socket is unbound, and will <code>bind()</code> it to an unused local port if necessary.</p>
<h2 data-number="5.4" id="connect"> <code>connect()</code>—Hey, you!</h2>
<p> Let’s just pretend for a few minutes that you’re a telnet application. Your user commands you (just like in the movie <em>TRON</em>) to get a socket file descriptor. You comply and call <code>socket()</code>. Next, the user tells you to connect to “<code>10.12.110.57</code>” on port “<code>23</code>” (the standard telnet port). Yow! What do you do now?</p>
<p>Lucky for you, program, you’re now perusing the section on <code>connect()</code>—how to connect to a remote host. So read furiously onward! No time to lose!</p>
<p>The <code>connect()</code> call is as follows:</p>
<div id="cb31"><pre><code><span id="cb31-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb31-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span>int</span> connect<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>serv_addr<span>,</span> <span>int</span> addrlen<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is our friendly neighborhood socket file descriptor, as returned by the <code>socket()</code> call, <code>serv_addr</code> is a <code>struct sockaddr</code> containing the destination port and IP address, and <code>addrlen</code> is the length in bytes of the server address structure.</p>
<p>All of this information can be gleaned from the results of the <code>getaddrinfo()</code> call, which rocks.</p>
<p>Is this starting to make more sense? I can’t hear you from here, so I’ll just have to hope that it is. Let’s have an example where we make a socket connection to “<code>www.example.com</code>”, port <code>3490</code>:</p>
<div id="cb32"><pre><code><span id="cb32-1"><a href="#cb32-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb32-2"><a href="#cb32-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb32-3"><a href="#cb32-3"></a></span>
<span id="cb32-4"><a href="#cb32-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb32-5"><a href="#cb32-5"></a></span>
<span id="cb32-6"><a href="#cb32-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb32-7"><a href="#cb32-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb32-8"><a href="#cb32-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb32-9"><a href="#cb32-9"></a></span>
<span id="cb32-10"><a href="#cb32-10"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb32-11"><a href="#cb32-11"></a></span>
<span id="cb32-12"><a href="#cb32-12"></a><span>// make a socket:</span></span>
<span id="cb32-13"><a href="#cb32-13"></a></span>
<span id="cb32-14"><a href="#cb32-14"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb32-15"><a href="#cb32-15"></a></span>
<span id="cb32-16"><a href="#cb32-16"></a><span>// connect!</span></span>
<span id="cb32-17"><a href="#cb32-17"></a></span>
<span id="cb32-18"><a href="#cb32-18"></a>connect<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<p>Again, old-school programs filled out their own <code>struct sockaddr_in</code>s to pass to <code>connect()</code>. You can do that if you want to. See the similar note in the <a href="#bind"><code>bind()</code> section</a>, above.</p>
<p>Be sure to check the return value from <code>connect()</code>—it’ll return <code>-1</code> on error and set the variable <code>errno</code>.</p>

<p>Also, notice that we didn’t call <code>bind()</code>. Basically, we don’t care about our local port number; we only care where we’re going (the remote port). The kernel will choose a local port for us, and the site we connect to will automatically get this information from us. No worries.</p>
<h2 data-number="5.5" id="listen"> <code>listen()</code>—Will somebody please call me?</h2>
<p> OK, time for a change of pace. What if you don’t want to connect to a remote host. Say, just for kicks, that you want to wait for incoming connections and handle them in some way. The process is two step: first you <code>listen()</code>, then you <code>accept()</code> (see below).</p>
<p>The <code>listen()</code> call is fairly simple, but requires a bit of explanation:</p>
<div id="cb33"><pre><code><span id="cb33-1"><span>int</span> listen<span>(</span><span>int</span> sockfd<span>,</span> <span>int</span> backlog<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the usual socket file descriptor from the <code>socket()</code> system call. <code>backlog</code> is the number of connections allowed on the incoming queue. What does that mean? Well, incoming connections are going to wait in this queue until you <code>accept()</code> them (see below) and this is the limit on how many can queue up. Most systems silently limit this number to about 20; you can probably get away with setting it to <code>5</code> or <code>10</code>.</p>
<p>Again, as per usual, <code>listen()</code> returns <code>-1</code> and sets <code>errno</code> on error.</p>
<p>Well, as you can probably imagine, we need to call <code>bind()</code> before we call <code>listen()</code> so that the server is running on a specific port. (You have to be able to tell your buddies which port to connect to!) So if you’re going to be listening for incoming connections, the sequence of system calls you’ll make is:</p>
<div id="cb34"><pre><code><span id="cb34-1"><a href="#cb34-1"></a>getaddrinfo<span>();</span></span>
<span id="cb34-2"><a href="#cb34-2"></a>socket<span>();</span></span>
<span id="cb34-3"><a href="#cb34-3"></a>bind<span>();</span></span>
<span id="cb34-4"><a href="#cb34-4"></a>listen<span>();</span></span>
<span id="cb34-5"><a href="#cb34-5"></a><span>/* accept() goes here */</span> </span></code></pre></div>
<p>I’ll just leave that in the place of sample code, since it’s fairly self-explanatory. (The code in the <code>accept()</code> section, below, is more complete.) The really tricky part of this whole sha-bang is the call to <code>accept()</code>.</p>
<h2 data-number="5.6" id="acceptthank-you-for-calling-port-3490."> <code>accept()</code>—“Thank you for calling port 3490.”</h2>
<p> Get ready—the <code>accept()</code> call is kinda weird! What’s going to happen is this: someone far far away will try to <code>connect()</code> to your machine on a port that you are <code>listen()</code>ing on. Their connection will be queued up waiting to be <code>accept()</code>ed.&nbsp;You call <code>accept()</code> and you tell it to get the pending connection. It’ll return to you a <em>brand new socket file descriptor</em> to use for this single connection! That’s right, suddenly you have <em>two socket file descriptors</em> for the price of one! The original one is still listening for more new connections, and the newly created one is finally ready to <code>send()</code> and <code>recv()</code>. We’re there!</p>
<p>The call is as follows:</p>
<div id="cb35"><pre><code><span id="cb35-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb35-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span>int</span> accept<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> socklen_t <span>*</span>addrlen<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the <code>listen()</code>ing socket descriptor. Easy enough. <code>addr</code> will usually be a pointer to a local <code>struct sockaddr_storage</code>. This is where the information about the incoming connection will go (and with it you can determine which host is calling you from which port). <code>addrlen</code> is a local integer variable that should be set to <code>sizeof(struct sockaddr_storage)</code> before its address is passed to <code>accept()</code>. <code>accept()</code> will not put more than that many bytes into <code>addr</code>. If it puts fewer in, it’ll change the value of <code>addrlen</code> to reflect that.</p>
<p>Guess what? <code>accept()</code> returns <code>-1</code> and sets <code>errno</code> if an error occurs. Betcha didn’t figure that.</p>
<p>Like before, this is a bunch to absorb in one chunk, so here’s a sample code fragment for your perusal:</p>
<div id="cb36"><pre><code><span id="cb36-1"><a href="#cb36-1"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb36-2"><a href="#cb36-2"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb36-3"><a href="#cb36-3"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb36-4"><a href="#cb36-4"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb36-5"><a href="#cb36-5"></a></span>
<span id="cb36-6"><a href="#cb36-6"></a><span>#define MYPORT </span><span>"3490"</span><span>  </span><span>// the port users will be connecting to</span></span>
<span id="cb36-7"><a href="#cb36-7"></a><span>#define BACKLOG </span><span>10</span><span>     </span><span>// how many pending connections queue will hold</span></span>
<span id="cb36-8"><a href="#cb36-8"></a></span>
<span id="cb36-9"><a href="#cb36-9"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb36-10"><a href="#cb36-10"></a><span>{</span></span>
<span id="cb36-11"><a href="#cb36-11"></a>    <span>struct</span> sockaddr_storage their_addr<span>;</span></span>
<span id="cb36-12"><a href="#cb36-12"></a>    socklen_t addr_size<span>;</span></span>
<span id="cb36-13"><a href="#cb36-13"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb36-14"><a href="#cb36-14"></a>    <span>int</span> sockfd<span>,</span> new_fd<span>;</span></span>
<span id="cb36-15"><a href="#cb36-15"></a></span>
<span id="cb36-16"><a href="#cb36-16"></a>    <span>// !! don't forget your error checking for these calls !!</span></span>
<span id="cb36-17"><a href="#cb36-17"></a></span>
<span id="cb36-18"><a href="#cb36-18"></a>    <span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb36-19"><a href="#cb36-19"></a></span>
<span id="cb36-20"><a href="#cb36-20"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb36-21"><a href="#cb36-21"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb36-22"><a href="#cb36-22"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb36-23"><a href="#cb36-23"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb36-24"><a href="#cb36-24"></a></span>
<span id="cb36-25"><a href="#cb36-25"></a>    getaddrinfo<span>(</span>NULL<span>,</span> MYPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb36-26"><a href="#cb36-26"></a></span>
<span id="cb36-27"><a href="#cb36-27"></a>    <span>// make a socket, bind it, and listen on it:</span></span>
<span id="cb36-28"><a href="#cb36-28"></a></span>
<span id="cb36-29"><a href="#cb36-29"></a>    sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb36-30"><a href="#cb36-30"></a>    bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb36-31"><a href="#cb36-31"></a>    listen<span>(</span>sockfd<span>,</span> BACKLOG<span>);</span></span>
<span id="cb36-32"><a href="#cb36-32"></a></span>
<span id="cb36-33"><a href="#cb36-33"></a>    <span>// now accept an incoming connection:</span></span>
<span id="cb36-34"><a href="#cb36-34"></a></span>
<span id="cb36-35"><a href="#cb36-35"></a>    addr_size <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb36-36"><a href="#cb36-36"></a>    new_fd <span>=</span> accept<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>addr_size<span>);</span></span>
<span id="cb36-37"><a href="#cb36-37"></a></span>
<span id="cb36-38"><a href="#cb36-38"></a>    <span>// ready to communicate on socket descriptor new_fd!</span></span>
<span id="cb36-39"><a href="#cb36-39"></a>    <span>.</span></span>
<span id="cb36-40"><a href="#cb36-40"></a>    <span>.</span></span>
<span id="cb36-41"><a href="#cb36-41"></a>    <span>.</span></span></code></pre></div>
<p>Again, note that we will use the socket descriptor <code>new_fd</code> for all <code>send()</code> and <code>recv()</code> calls. If you’re only getting one single connection ever, you can <code>close()</code> the listening <code>sockfd</code> in order to prevent more incoming connections on the same port, if you so desire.</p>
<h2 data-number="5.7" id="sendrecv"> <code>send()</code> and <code>recv()</code>—Talk to me, baby!</h2>
<p>These two functions are for communicating over stream sockets or connected datagram sockets. If you want to use regular unconnected datagram sockets, you’ll need to see the section on <a href="#sendtorecv"><code>sendto()</code> and <code>recvfrom()</code></a>, below.</p>
<p> The <code>send()</code> call:</p>
<div id="cb37"><pre><code><span id="cb37-1"><span>int</span> send<span>(</span><span>int</span> sockfd<span>,</span> <span>const</span> <span>void</span> <span>*</span>msg<span>,</span> <span>int</span> len<span>,</span> <span>int</span> flags<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the socket descriptor you want to send data to (whether it’s the one returned by <code>socket()</code> or the one you got with <code>accept()</code>). <code>msg</code> is a pointer to the data you want to send, and <code>len</code> is the length of that data in bytes. Just set <code>flags</code> to <code>0</code>. (See the <code>send()</code> man page for more information concerning flags.)</p>
<p>Some sample code might be:</p>
<div id="cb38"><pre><code><span id="cb38-1"><a href="#cb38-1"></a><span>char</span> <span>*</span>msg <span>=</span> <span>"Beej was here!"</span><span>;</span></span>
<span id="cb38-2"><a href="#cb38-2"></a><span>int</span> len<span>,</span> bytes_sent<span>;</span></span>
<span id="cb38-3"><a href="#cb38-3"></a><span>.</span></span>
<span id="cb38-4"><a href="#cb38-4"></a><span>.</span></span>
<span id="cb38-5"><a href="#cb38-5"></a><span>.</span></span>
<span id="cb38-6"><a href="#cb38-6"></a>len <span>=</span> strlen<span>(</span>msg<span>);</span></span>
<span id="cb38-7"><a href="#cb38-7"></a>bytes_sent <span>=</span> send<span>(</span>sockfd<span>,</span> msg<span>,</span> len<span>,</span> <span>0</span><span>);</span></span>
<span id="cb38-8"><a href="#cb38-8"></a><span>.</span></span>
<span id="cb38-9"><a href="#cb38-9"></a><span>.</span></span>
<span id="cb38-10"><a href="#cb38-10"></a><span>.</span> </span></code></pre></div>
<p><code>send()</code> returns the number of bytes actually sent out—<em>this might be less than the number you told it to send!</em> See, sometimes you tell it to send a whole gob of data and it just can’t handle it. It’ll fire off as much of the data as it can, and trust you to send the rest later. Remember, if the value returned by <code>send()</code> doesn’t match the value in <code>len</code>, it’s up to you to send the rest of the string. The good news is this: if the packet is small (less than 1K or so) it will <em>probably</em> manage to send the whole thing all in one go. Again, <code>-1</code> is returned on error, and <code>errno</code> is set to the error number.</p>
<p> The <code>recv()</code> call is similar in many respects:</p>
<div id="cb39"><pre><code><span id="cb39-1"><span>int</span> recv<span>(</span><span>int</span> sockfd<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>int</span> len<span>,</span> <span>int</span> flags<span>);</span></span></code></pre></div>
<p><code>sockfd</code> is the socket descriptor to read from, <code>buf</code> is the buffer to read the information into, <code>len</code> is the maximum length of the buffer, and <code>flags</code> can again be set to <code>0</code>. (See the <code>recv()</code> man page for flag information.)</p>
<p><code>recv()</code> returns the number of bytes actually read into the buffer, or <code>-1</code> on error (with <code>errno</code> set, accordingly).</p>
<p>Wait! <code>recv()</code> can return <code>0</code>. This can mean only one thing: the remote side has closed the connection on you! A return value of <code>0</code> is <code>recv()</code>’s way of letting you know this has occurred.</p>
<p>There, that was easy, wasn’t it? You can now pass data back and forth on stream sockets! Whee! You’re a Unix Network Programmer!</p>
<h2 data-number="5.8" id="sendtorecv"> <code>sendto()</code> and <code>recvfrom()</code>—Talk to me, DGRAM-style</h2>
<p> “This is all fine and dandy,” I hear you saying, “but where does this leave me with unconnected datagram sockets?” No problemo, amigo. We have just the thing.</p>
<p>Since datagram sockets aren’t connected to a remote host, guess which piece of information we need to give before we send a packet? That’s right! The destination address! Here’s the scoop:</p>
<div id="cb40"><pre><code><span id="cb40-1"><span>int</span> sendto<span>(</span><span>int</span> sockfd<span>,</span> <span>const</span> <span>void</span> <span>*</span>msg<span>,</span> <span>int</span> len<span>,</span> <span>unsigned</span> <span>int</span> flags<span>,</span></span>
<span id="cb40-2">           <span>const</span> <span>struct</span> sockaddr <span>*</span>to<span>,</span> socklen_t tolen<span>);</span> </span></code></pre></div>
<p>As you can see, this call is basically the same as the call to <code>send()</code> with the addition of two other pieces of information. <code>to</code> is a pointer to a <code>struct sockaddr</code> (which will probably be another <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> or <code>struct sockaddr_storage</code> that you cast at the last minute) which contains the destination IP address and port. <code>tolen</code>, an <code>int</code> deep-down, can simply be set to <code>sizeof *to</code> or <code>sizeof(struct sockaddr_storage)</code>.</p>
<p>To get your hands on the destination address structure, you’ll probably either get it from <code>getaddrinfo()</code>, or from <code>recvfrom()</code>, below, or you’ll fill it out by hand.</p>
<p>Just like with <code>send()</code>, <code>sendto()</code> returns the number of bytes actually sent (which, again, might be less than the number of bytes you told it to send!), or <code>-1</code> on error.</p>
<p>Equally similar are <code>recv()</code> and <code>recvfrom()</code>. The synopsis of <code>recvfrom()</code> is:</p>
<div id="cb41"><pre><code><span id="cb41-1"><span>int</span> recvfrom<span>(</span><span>int</span> sockfd<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>int</span> len<span>,</span> <span>unsigned</span> <span>int</span> flags<span>,</span></span>
<span id="cb41-2">             <span>struct</span> sockaddr <span>*</span>from<span>,</span> <span>int</span> <span>*</span>fromlen<span>);</span> </span></code></pre></div>
<p>Again, this is just like <code>recv()</code> with the addition of a couple fields. <code>from</code> is a pointer to a local <code>struct sockaddr_storage</code> that will be filled with the IP address and port of the originating machine. <code>fromlen</code> is a pointer to a local <code>int</code> that should be initialized to <code>sizeof *from</code> or <code>sizeof(struct sockaddr_storage)</code>. When the function returns, <code>fromlen</code> will contain the length of the address actually stored in <code>from</code>.</p>
<p><code>recvfrom()</code> returns the number of bytes received, or <code>-1</code> on error (with <code>errno</code> set accordingly).</p>
<p>So, here’s a question: why do we use <code>struct sockaddr_storage</code> as the socket type? Why not <code>struct sockaddr_in</code>? Because, you see, we want to not tie ourselves down to IPv4 or IPv6. So we use the generic <code>struct sockaddr_storage</code> which we know will be big enough for either.</p>
<p>(So… here’s another question: why isn’t <code>struct sockaddr</code> itself big enough for any address? We even cast the general-purpose <code>struct sockaddr_storage</code> to the general-purpose <code>struct sockaddr</code>! Seems extraneous and redundant, huh. The answer is, it just isn’t big enough, and I’d guess that changing it at this point would be Problematic. So they made a new one.)</p>
<p>Remember, if you <code>connect()</code> a datagram socket, you can then simply use <code>send()</code> and <code>recv()</code> for all your transactions. The socket itself is still a datagram socket and the packets still use UDP, but the socket interface will automatically add the destination and source information for you.</p>
<h2 data-number="5.9" id="close-and-shutdownget-outta-my-face"> <code>close()</code> and <code>shutdown()</code>—Get outta my face!</h2>
<p>Whew! You’ve been <code>send()</code>ing and <code>recv()</code>ing data all day long, and you’ve had it. You’re ready to close the connection on your socket descriptor. This is easy. You can just use the regular Unix file descriptor <code>close()</code> function:</p>

<p>This will prevent any more reads and writes to the socket. Anyone attempting to read or write the socket on the remote end will receive an error.</p>
<p>Just in case you want a little more control over how the socket closes, you can use the <code>shutdown()</code> function. It allows you to cut off communication in a certain direction, or both ways (just like <code>close()</code> does). Synopsis:</p>
<div id="cb43"><pre><code><span id="cb43-1"><span>int</span> shutdown<span>(</span><span>int</span> sockfd<span>,</span> <span>int</span> how<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the socket file descriptor you want to shutdown, and <code>how</code> is one of the following:</p>
<table>
<thead>
<tr>
<th><code>how</code></th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>Further receives are disallowed</td>
</tr>
<tr>
<td><code>1</code></td>
<td>Further sends are disallowed</td>
</tr>
<tr>
<td><code>2</code></td>
<td>Further sends and receives are disallowed (like <code>close()</code>)</td>
</tr>
</tbody>
</table>
<p><code>shutdown()</code> returns <code>0</code> on success, and <code>-1</code> on error (with <code>errno</code> set accordingly).</p>
<p>If you deign to use <code>shutdown()</code> on unconnected datagram sockets, it will simply make the socket unavailable for further <code>send()</code> and <code>recv()</code> calls (remember that you can use these if you <code>connect()</code> your datagram socket).</p>
<p>It’s important to note that <code>shutdown()</code> doesn’t actually close the file descriptor—it just changes its usability. To free a socket descriptor, you need to use <code>close()</code>.</p>
<p>Nothing to it.</p>
<p>(Except to remember that if you’re using Windows and Winsock that you should call <code>closesocket()</code> instead of <code>close()</code>.)</p>
<h2 data-number="5.10" id="getpeernamewho-are-you"> <code>getpeername()</code>—Who are you?</h2>
<p> This function is so easy.</p>
<p>It’s so easy, I almost didn’t give it its own section. But here it is anyway.</p>
<p>The function <code>getpeername()</code> will tell you who is at the other end of a connected stream socket. The synopsis:</p>
<div id="cb44"><pre><code><span id="cb44-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb44-2"></span>
<span id="cb44-3"><span>int</span> getpeername<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> <span>int</span> <span>*</span>addrlen<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the descriptor of the connected stream socket, <code>addr</code> is a pointer to a <code>struct sockaddr</code> (or a <code>struct sockaddr_in</code>) that will hold the information about the other side of the connection, and <code>addrlen</code> is a pointer to an <code>int</code>, that should be initialized to <code>sizeof *addr</code> or <code>sizeof(struct sockaddr)</code>.</p>
<p>The function returns <code>-1</code> on error and sets <code>errno</code> accordingly.</p>
<p>Once you have their address, you can use <code>inet_ntop()</code>, <code>getnameinfo()</code>, or <code>gethostbyaddr()</code> to print or get more information. No, you can’t get their login name. (Ok, ok. If the other computer is running an ident daemon, this is possible. This, however, is beyond the scope of this document. Check out <a href="https://tools.ietf.org/html/rfc1413">RFC 1413</a><a href="#fn22" id="fnref22" role="doc-noteref"><sup>22</sup></a> for more info.)</p>
<h2 data-number="5.11" id="gethostnamewho-am-i"> <code>gethostname()</code>—Who am I?</h2>
<p> Even easier than <code>getpeername()</code> is the function <code>gethostname()</code>. It returns the name of the computer that your program is running on. The name can then be used by <code>getaddrinfo()</code>, above, to determine the IP address of your local machine.</p>
<p>What could be more fun? I could think of a few things, but they don’t pertain to socket programming. Anyway, here’s the breakdown:</p>
<div id="cb45"><pre><code><span id="cb45-1"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span>int</span> gethostname<span>(</span><span>char</span> <span>*</span>hostname<span>,</span> <span>size_t</span> size<span>);</span> </span></code></pre></div>
<p>The arguments are simple: <code>hostname</code> is a pointer to an array of chars that will contain the hostname upon the function’s return, and <code>size</code> is the length in bytes of the <code>hostname</code> array.</p>
<p>The function returns <code>0</code> on successful completion, and <code>-1</code> on error, setting <code>errno</code> as usual.</p>
<h2 data-number="6" id="client-server-background"> Client-Server Background</h2>

<p>It’s a client-server world, baby. Just about everything on the network deals with client processes talking to server processes and vice-versa. Take <code>telnet</code>, for instance. When you connect to a remote host on port 23 with telnet (the client), a program on that host (called <code>telnetd</code>, the server) springs to life. It handles the incoming telnet connection, sets you up with a login prompt, etc.</p>
<figure>


</figure>
<p>The exchange of information between client and server is summarized in the above diagram.</p>
<p>Note that the client-server pair can speak <code>SOCK_STREAM</code>, <code>SOCK_DGRAM</code>, or anything else (as long as they’re speaking the same thing). Some good examples of client-server pairs are <code>telnet</code>/<code>telnetd</code>, <code>ftp</code>/<code>ftpd</code>, or <code>Firefox</code>/<code>Apache</code>. Every time you use <code>ftp</code>, there’s a remote program, <code>ftpd</code>, that serves you.</p>
<p>Often, there will only be one server on a machine, and that server will handle multiple clients using <code>fork()</code>. The basic routine is: server will wait for a connection, <code>accept()</code> it, and <code>fork()</code> a child process to handle it. This is what our sample server does in the next section.</p>
<h2 data-number="6.1" id="a-simple-stream-server"> A Simple Stream Server</h2>

<p>All this server does is send the string “<code>Hello, world!</code>” out over a stream connection. All you need to do to test this server is run it in one window, and telnet to it from another with:</p>
<pre><code>$ telnet remotehostname 3490</code></pre>
<p>where <code>remotehostname</code> is the name of the machine you’re running it on.</p>
<p><a href="https://beej.us/guide/bgnet/examples/server.c">The server code</a><a href="#fn23" id="fnref23" role="doc-noteref"><sup>23</sup></a>:</p>
<div id="cb47"><pre><code><span id="cb47-1"><a href="#cb47-1"></a><span>/*</span></span>
<span id="cb47-2"><a href="#cb47-2"></a><span>** server.c -- a stream socket server demo</span></span>
<span id="cb47-3"><a href="#cb47-3"></a><span>*/</span></span>
<span id="cb47-4"><a href="#cb47-4"></a></span>
<span id="cb47-5"><a href="#cb47-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb47-6"><a href="#cb47-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb47-7"><a href="#cb47-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb47-8"><a href="#cb47-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb47-9"><a href="#cb47-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb47-10"><a href="#cb47-10"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb47-11"><a href="#cb47-11"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb47-12"><a href="#cb47-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb47-13"><a href="#cb47-13"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb47-14"><a href="#cb47-14"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb47-15"><a href="#cb47-15"></a><span>#include </span><span>&lt;sys/wait.h&gt;</span></span>
<span id="cb47-16"><a href="#cb47-16"></a><span>#include </span><span>&lt;signal.h&gt;</span></span>
<span id="cb47-17"><a href="#cb47-17"></a></span>
<span id="cb47-18"><a href="#cb47-18"></a><span>#define PORT </span><span>"3490"</span><span>  </span><span>// the port users will be connecting to</span></span>
<span id="cb47-19"><a href="#cb47-19"></a></span>
<span id="cb47-20"><a href="#cb47-20"></a><span>#define BACKLOG </span><span>10</span><span>   </span><span>// how many pending connections queue will hold</span></span>
<span id="cb47-21"><a href="#cb47-21"></a></span>
<span id="cb47-22"><a href="#cb47-22"></a><span>void</span> sigchld_handler<span>(</span><span>int</span> s<span>)</span></span>
<span id="cb47-23"><a href="#cb47-23"></a><span>{</span></span>
<span id="cb47-24"><a href="#cb47-24"></a>    <span>// waitpid() might overwrite errno, so we save and restore it:</span></span>
<span id="cb47-25"><a href="#cb47-25"></a>    <span>int</span> saved_errno <span>=</span> errno<span>;</span></span>
<span id="cb47-26"><a href="#cb47-26"></a></span>
<span id="cb47-27"><a href="#cb47-27"></a>    <span>while</span><span>(</span>waitpid<span>(-</span><span>1</span><span>,</span> NULL<span>,</span> WNOHANG<span>)</span> <span>&gt;</span> <span>0</span><span>);</span></span>
<span id="cb47-28"><a href="#cb47-28"></a></span>
<span id="cb47-29"><a href="#cb47-29"></a>    errno <span>=</span> saved_errno<span>;</span></span>
<span id="cb47-30"><a href="#cb47-30"></a><span>}</span></span>
<span id="cb47-31"><a href="#cb47-31"></a></span>
<span id="cb47-32"><a href="#cb47-32"></a></span>
<span id="cb47-33"><a href="#cb47-33"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb47-34"><a href="#cb47-34"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb47-35"><a href="#cb47-35"></a><span>{</span></span>
<span id="cb47-36"><a href="#cb47-36"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb47-37"><a href="#cb47-37"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb47-38"><a href="#cb47-38"></a>    <span>}</span></span>
<span id="cb47-39"><a href="#cb47-39"></a></span>
<span id="cb47-40"><a href="#cb47-40"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb47-41"><a href="#cb47-41"></a><span>}</span></span>
<span id="cb47-42"><a href="#cb47-42"></a></span>
<span id="cb47-43"><a href="#cb47-43"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb47-44"><a href="#cb47-44"></a><span>{</span></span>
<span id="cb47-45"><a href="#cb47-45"></a>    <span>int</span> sockfd<span>,</span> new_fd<span>;</span>  <span>// listen on sock_fd, new connection on new_fd</span></span>
<span id="cb47-46"><a href="#cb47-46"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb47-47"><a href="#cb47-47"></a>    <span>struct</span> sockaddr_storage their_addr<span>;</span> <span>// connector's address information</span></span>
<span id="cb47-48"><a href="#cb47-48"></a>    socklen_t sin_size<span>;</span></span>
<span id="cb47-49"><a href="#cb47-49"></a>    <span>struct</span> sigaction sa<span>;</span></span>
<span id="cb47-50"><a href="#cb47-50"></a>    <span>int</span> yes<span>=</span><span>1</span><span>;</span></span>
<span id="cb47-51"><a href="#cb47-51"></a>    <span>char</span> s<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb47-52"><a href="#cb47-52"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb47-53"><a href="#cb47-53"></a></span>
<span id="cb47-54"><a href="#cb47-54"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb47-55"><a href="#cb47-55"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb47-56"><a href="#cb47-56"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb47-57"><a href="#cb47-57"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span> <span>// use my IP</span></span>
<span id="cb47-58"><a href="#cb47-58"></a></span>
<span id="cb47-59"><a href="#cb47-59"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb47-60"><a href="#cb47-60"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb47-61"><a href="#cb47-61"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb47-62"><a href="#cb47-62"></a>    <span>}</span></span>
<span id="cb47-63"><a href="#cb47-63"></a></span>
<span id="cb47-64"><a href="#cb47-64"></a>    <span>// loop through all the results and bind to the first we can</span></span>
<span id="cb47-65"><a href="#cb47-65"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb47-66"><a href="#cb47-66"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb47-67"><a href="#cb47-67"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-68"><a href="#cb47-68"></a>            perror<span>(</span><span>"server: socket"</span><span>);</span></span>
<span id="cb47-69"><a href="#cb47-69"></a>            <span>continue</span><span>;</span></span>
<span id="cb47-70"><a href="#cb47-70"></a>        <span>}</span></span>
<span id="cb47-71"><a href="#cb47-71"></a></span>
<span id="cb47-72"><a href="#cb47-72"></a>        <span>if</span> <span>(</span>setsockopt<span>(</span>sockfd<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>yes<span>,</span></span>
<span id="cb47-73"><a href="#cb47-73"></a>                <span>sizeof</span><span>(</span><span>int</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-74"><a href="#cb47-74"></a>            perror<span>(</span><span>"setsockopt"</span><span>);</span></span>
<span id="cb47-75"><a href="#cb47-75"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-76"><a href="#cb47-76"></a>        <span>}</span></span>
<span id="cb47-77"><a href="#cb47-77"></a></span>
<span id="cb47-78"><a href="#cb47-78"></a>        <span>if</span> <span>(</span>bind<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-79"><a href="#cb47-79"></a>            close<span>(</span>sockfd<span>);</span></span>
<span id="cb47-80"><a href="#cb47-80"></a>            perror<span>(</span><span>"server: bind"</span><span>);</span></span>
<span id="cb47-81"><a href="#cb47-81"></a>            <span>continue</span><span>;</span></span>
<span id="cb47-82"><a href="#cb47-82"></a>        <span>}</span></span>
<span id="cb47-83"><a href="#cb47-83"></a></span>
<span id="cb47-84"><a href="#cb47-84"></a>        <span>break</span><span>;</span></span>
<span id="cb47-85"><a href="#cb47-85"></a>    <span>}</span></span>
<span id="cb47-86"><a href="#cb47-86"></a></span>
<span id="cb47-87"><a href="#cb47-87"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span>
<span id="cb47-88"><a href="#cb47-88"></a></span>
<span id="cb47-89"><a href="#cb47-89"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span>  <span>{</span></span>
<span id="cb47-90"><a href="#cb47-90"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"server: failed to bind</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb47-91"><a href="#cb47-91"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-92"><a href="#cb47-92"></a>    <span>}</span></span>
<span id="cb47-93"><a href="#cb47-93"></a></span>
<span id="cb47-94"><a href="#cb47-94"></a>    <span>if</span> <span>(</span>listen<span>(</span>sockfd<span>,</span> BACKLOG<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-95"><a href="#cb47-95"></a>        perror<span>(</span><span>"listen"</span><span>);</span></span>
<span id="cb47-96"><a href="#cb47-96"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-97"><a href="#cb47-97"></a>    <span>}</span></span>
<span id="cb47-98"><a href="#cb47-98"></a></span>
<span id="cb47-99"><a href="#cb47-99"></a>    sa<span>.</span>sa_handler <span>=</span> sigchld_handler<span>;</span> <span>// reap all dead processes</span></span>
<span id="cb47-100"><a href="#cb47-100"></a>    sigemptyset<span>(&amp;</span>sa<span>.</span>sa_mask<span>);</span></span>
<span id="cb47-101"><a href="#cb47-101"></a>    sa<span>.</span>sa_flags <span>=</span> SA_RESTART<span>;</span></span>
<span id="cb47-102"><a href="#cb47-102"></a>    <span>if</span> <span>(</span>sigaction<span>(</span>SIGCHLD<span>,</span> <span>&amp;</span>sa<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-103"><a href="#cb47-103"></a>        perror<span>(</span><span>"sigaction"</span><span>);</span></span>
<span id="cb47-104"><a href="#cb47-104"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-105"><a href="#cb47-105"></a>    <span>}</span></span>
<span id="cb47-106"><a href="#cb47-106"></a></span>
<span id="cb47-107"><a href="#cb47-107"></a>    printf<span>(</span><span>"server: waiting for connections...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb47-108"><a href="#cb47-108"></a></span>
<span id="cb47-109"><a href="#cb47-109"></a>    <span>while</span><span>(</span><span>1</span><span>)</span> <span>{</span>  <span>// main accept() loop</span></span>
<span id="cb47-110"><a href="#cb47-110"></a>        sin_size <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb47-111"><a href="#cb47-111"></a>        new_fd <span>=</span> accept<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>sin_size<span>);</span></span>
<span id="cb47-112"><a href="#cb47-112"></a>        <span>if</span> <span>(</span>new_fd <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-113"><a href="#cb47-113"></a>            perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb47-114"><a href="#cb47-114"></a>            <span>continue</span><span>;</span></span>
<span id="cb47-115"><a href="#cb47-115"></a>        <span>}</span></span>
<span id="cb47-116"><a href="#cb47-116"></a></span>
<span id="cb47-117"><a href="#cb47-117"></a>        inet_ntop<span>(</span>their_addr<span>.</span>ss_family<span>,</span></span>
<span id="cb47-118"><a href="#cb47-118"></a>            get_in_addr<span>((</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>),</span></span>
<span id="cb47-119"><a href="#cb47-119"></a>            s<span>,</span> <span>sizeof</span> s<span>);</span></span>
<span id="cb47-120"><a href="#cb47-120"></a>        printf<span>(</span><span>"server: got connection from </span><span>%s\n</span><span>"</span><span>,</span> s<span>);</span></span>
<span id="cb47-121"><a href="#cb47-121"></a></span>
<span id="cb47-122"><a href="#cb47-122"></a>        <span>if</span> <span>(!</span>fork<span>())</span> <span>{</span> <span>// this is the child process</span></span>
<span id="cb47-123"><a href="#cb47-123"></a>            close<span>(</span>sockfd<span>);</span> <span>// child doesn't need the listener</span></span>
<span id="cb47-124"><a href="#cb47-124"></a>            <span>if</span> <span>(</span>send<span>(</span>new_fd<span>,</span> <span>"Hello, world!"</span><span>,</span> <span>13</span><span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span></span>
<span id="cb47-125"><a href="#cb47-125"></a>                perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb47-126"><a href="#cb47-126"></a>            close<span>(</span>new_fd<span>);</span></span>
<span id="cb47-127"><a href="#cb47-127"></a>            exit<span>(</span><span>0</span><span>);</span></span>
<span id="cb47-128"><a href="#cb47-128"></a>        <span>}</span></span>
<span id="cb47-129"><a href="#cb47-129"></a>        close<span>(</span>new_fd<span>);</span>  <span>// parent doesn't need this</span></span>
<span id="cb47-130"><a href="#cb47-130"></a>    <span>}</span></span>
<span id="cb47-131"><a href="#cb47-131"></a></span>
<span id="cb47-132"><a href="#cb47-132"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb47-133"><a href="#cb47-133"></a><span>}</span></span></code></pre></div>
<p>In case you’re curious, I have the code in one big <code>main()</code> function for (I feel) syntactic clarity. Feel free to split it into smaller functions if it makes you feel better.</p>
<p>(Also, this whole <code>sigaction()</code> thing might be new to you—that’s OK. The code that’s there is responsible for reaping zombie processes that appear as the <code>fork()</code>ed child processes exit. If you make lots of zombies and don’t reap them, your system administrator will become agitated.)</p>
<p>You can get the data from this server by using the client listed in the next section.</p>

<h2 data-number="6.2" id="a-simple-stream-client"> A Simple Stream Client</h2>

<p>This guy’s even easier than the server. All this client does is connect to the host you specify on the command line, port 3490. It gets the string that the server sends.</p>
<p><a href="https://beej.us/guide/bgnet/examples/client.c">The client source</a><a href="#fn24" id="fnref24" role="doc-noteref"><sup>24</sup></a>:</p>
<div id="cb48"><pre><code><span id="cb48-1"><a href="#cb48-1"></a><span>/*</span></span>
<span id="cb48-2"><a href="#cb48-2"></a><span>** client.c -- a stream socket client demo</span></span>
<span id="cb48-3"><a href="#cb48-3"></a><span>*/</span></span>
<span id="cb48-4"><a href="#cb48-4"></a></span>
<span id="cb48-5"><a href="#cb48-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb48-6"><a href="#cb48-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb48-7"><a href="#cb48-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb48-8"><a href="#cb48-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb48-9"><a href="#cb48-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb48-10"><a href="#cb48-10"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb48-11"><a href="#cb48-11"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb48-12"><a href="#cb48-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb48-13"><a href="#cb48-13"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb48-14"><a href="#cb48-14"></a></span>
<span id="cb48-15"><a href="#cb48-15"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb48-16"><a href="#cb48-16"></a></span>
<span id="cb48-17"><a href="#cb48-17"></a><span>#define PORT </span><span>"3490"</span><span> </span><span>// the port client will be connecting to </span></span>
<span id="cb48-18"><a href="#cb48-18"></a></span>
<span id="cb48-19"><a href="#cb48-19"></a><span>#define MAXDATASIZE </span><span>100</span><span> </span><span>// max number of bytes we can get at once </span></span>
<span id="cb48-20"><a href="#cb48-20"></a></span>
<span id="cb48-21"><a href="#cb48-21"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb48-22"><a href="#cb48-22"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb48-23"><a href="#cb48-23"></a><span>{</span></span>
<span id="cb48-24"><a href="#cb48-24"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb48-25"><a href="#cb48-25"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb48-26"><a href="#cb48-26"></a>    <span>}</span></span>
<span id="cb48-27"><a href="#cb48-27"></a></span>
<span id="cb48-28"><a href="#cb48-28"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb48-29"><a href="#cb48-29"></a><span>}</span></span>
<span id="cb48-30"><a href="#cb48-30"></a></span>
<span id="cb48-31"><a href="#cb48-31"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb48-32"><a href="#cb48-32"></a><span>{</span></span>
<span id="cb48-33"><a href="#cb48-33"></a>    <span>int</span> sockfd<span>,</span> numbytes<span>;</span>  </span>
<span id="cb48-34"><a href="#cb48-34"></a>    <span>char</span> buf<span>[</span>MAXDATASIZE<span>];</span></span>
<span id="cb48-35"><a href="#cb48-35"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb48-36"><a href="#cb48-36"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb48-37"><a href="#cb48-37"></a>    <span>char</span> s<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb48-38"><a href="#cb48-38"></a></span>
<span id="cb48-39"><a href="#cb48-39"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb48-40"><a href="#cb48-40"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: client hostname</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-41"><a href="#cb48-41"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-42"><a href="#cb48-42"></a>    <span>}</span></span>
<span id="cb48-43"><a href="#cb48-43"></a></span>
<span id="cb48-44"><a href="#cb48-44"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb48-45"><a href="#cb48-45"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb48-46"><a href="#cb48-46"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb48-47"><a href="#cb48-47"></a></span>
<span id="cb48-48"><a href="#cb48-48"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>argv<span>[</span><span>1</span><span>],</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb48-49"><a href="#cb48-49"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb48-50"><a href="#cb48-50"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb48-51"><a href="#cb48-51"></a>    <span>}</span></span>
<span id="cb48-52"><a href="#cb48-52"></a></span>
<span id="cb48-53"><a href="#cb48-53"></a>    <span>// loop through all the results and connect to the first we can</span></span>
<span id="cb48-54"><a href="#cb48-54"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb48-55"><a href="#cb48-55"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb48-56"><a href="#cb48-56"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-57"><a href="#cb48-57"></a>            perror<span>(</span><span>"client: socket"</span><span>);</span></span>
<span id="cb48-58"><a href="#cb48-58"></a>            <span>continue</span><span>;</span></span>
<span id="cb48-59"><a href="#cb48-59"></a>        <span>}</span></span>
<span id="cb48-60"><a href="#cb48-60"></a></span>
<span id="cb48-61"><a href="#cb48-61"></a>        <span>if</span> <span>(</span>connect<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-62"><a href="#cb48-62"></a>            close<span>(</span>sockfd<span>);</span></span>
<span id="cb48-63"><a href="#cb48-63"></a>            perror<span>(</span><span>"client: connect"</span><span>);</span></span>
<span id="cb48-64"><a href="#cb48-64"></a>            <span>continue</span><span>;</span></span>
<span id="cb48-65"><a href="#cb48-65"></a>        <span>}</span></span>
<span id="cb48-66"><a href="#cb48-66"></a></span>
<span id="cb48-67"><a href="#cb48-67"></a>        <span>break</span><span>;</span></span>
<span id="cb48-68"><a href="#cb48-68"></a>    <span>}</span></span>
<span id="cb48-69"><a href="#cb48-69"></a></span>
<span id="cb48-70"><a href="#cb48-70"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb48-71"><a href="#cb48-71"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"client: failed to connect</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-72"><a href="#cb48-72"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb48-73"><a href="#cb48-73"></a>    <span>}</span></span>
<span id="cb48-74"><a href="#cb48-74"></a></span>
<span id="cb48-75"><a href="#cb48-75"></a>    inet_ntop<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> get_in_addr<span>((</span><span>struct</span> sockaddr <span>*)</span>p<span>-&gt;</span>ai_addr<span>),</span></span>
<span id="cb48-76"><a href="#cb48-76"></a>            s<span>,</span> <span>sizeof</span> s<span>);</span></span>
<span id="cb48-77"><a href="#cb48-77"></a>    printf<span>(</span><span>"client: connecting to </span><span>%s\n</span><span>"</span><span>,</span> s<span>);</span></span>
<span id="cb48-78"><a href="#cb48-78"></a></span>
<span id="cb48-79"><a href="#cb48-79"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span>
<span id="cb48-80"><a href="#cb48-80"></a></span>
<span id="cb48-81"><a href="#cb48-81"></a>    <span>if</span> <span>((</span>numbytes <span>=</span> recv<span>(</span>sockfd<span>,</span> buf<span>,</span> MAXDATASIZE<span>-</span><span>1</span><span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-82"><a href="#cb48-82"></a>        perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb48-83"><a href="#cb48-83"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-84"><a href="#cb48-84"></a>    <span>}</span></span>
<span id="cb48-85"><a href="#cb48-85"></a></span>
<span id="cb48-86"><a href="#cb48-86"></a>    buf<span>[</span>numbytes<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb48-87"><a href="#cb48-87"></a></span>
<span id="cb48-88"><a href="#cb48-88"></a>    printf<span>(</span><span>"client: received '</span><span>%s</span><span>'</span><span>\n</span><span>"</span><span>,</span>buf<span>);</span></span>
<span id="cb48-89"><a href="#cb48-89"></a></span>
<span id="cb48-90"><a href="#cb48-90"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb48-91"><a href="#cb48-91"></a></span>
<span id="cb48-92"><a href="#cb48-92"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb48-93"><a href="#cb48-93"></a><span>}</span></span></code></pre></div>
<p>Notice that if you don’t run the server before you run the client, <code>connect()</code> returns “Connection refused”. Very useful.</p>

<h2 data-number="6.3" id="datagram"> Datagram Sockets</h2>

<p>We’ve already covered the basics of UDP datagram sockets with our discussion of <code>sendto()</code> and <code>recvfrom()</code>, above, so I’ll just present a couple of sample programs: <code>talker.c</code> and <code>listener.c</code>.</p>
<p><code>listener</code> sits on a machine waiting for an incoming packet on port 4950. <code>talker</code> sends a packet to that port, on the specified machine, that contains whatever the user enters on the command line.</p>
<p>Because datagram sockets are connectionless and just fire packets off into the ether with callous disregard for success, we are going to tell the client and server to use specifically IPv6. This way we avoid the situation where the server is listening on IPv6 and the client sends on IPv4; the data simply would not be received. (In our connected TCP stream sockets world, we might still have the mismatch, but the error on <code>connect()</code> for one address family would cause us to retry for the other.)</p>
<p>Here is the <a href="https://beej.us/guide/bgnet/examples/listener.c">source for <code>listener.c</code></a><a href="#fn25" id="fnref25" role="doc-noteref"><sup>25</sup></a>:</p>
<div id="cb49"><pre><code><span id="cb49-1"><a href="#cb49-1"></a><span>/*</span></span>
<span id="cb49-2"><a href="#cb49-2"></a><span>** listener.c -- a datagram sockets "server" demo</span></span>
<span id="cb49-3"><a href="#cb49-3"></a><span>*/</span></span>
<span id="cb49-4"><a href="#cb49-4"></a></span>
<span id="cb49-5"><a href="#cb49-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb49-6"><a href="#cb49-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb49-7"><a href="#cb49-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb49-8"><a href="#cb49-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb49-9"><a href="#cb49-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb49-10"><a href="#cb49-10"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb49-11"><a href="#cb49-11"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb49-12"><a href="#cb49-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb49-13"><a href="#cb49-13"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb49-14"><a href="#cb49-14"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb49-15"><a href="#cb49-15"></a></span>
<span id="cb49-16"><a href="#cb49-16"></a><span>#define MYPORT </span><span>"4950"</span><span>    </span><span>// the port users will be connecting to</span></span>
<span id="cb49-17"><a href="#cb49-17"></a></span>
<span id="cb49-18"><a href="#cb49-18"></a><span>#define MAXBUFLEN </span><span>100</span></span>
<span id="cb49-19"><a href="#cb49-19"></a></span>
<span id="cb49-20"><a href="#cb49-20"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb49-21"><a href="#cb49-21"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb49-22"><a href="#cb49-22"></a><span>{</span></span>
<span id="cb49-23"><a href="#cb49-23"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb49-24"><a href="#cb49-24"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb49-25"><a href="#cb49-25"></a>    <span>}</span></span>
<span id="cb49-26"><a href="#cb49-26"></a></span>
<span id="cb49-27"><a href="#cb49-27"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb49-28"><a href="#cb49-28"></a><span>}</span></span>
<span id="cb49-29"><a href="#cb49-29"></a></span>
<span id="cb49-30"><a href="#cb49-30"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb49-31"><a href="#cb49-31"></a><span>{</span></span>
<span id="cb49-32"><a href="#cb49-32"></a>    <span>int</span> sockfd<span>;</span></span>
<span id="cb49-33"><a href="#cb49-33"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb49-34"><a href="#cb49-34"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb49-35"><a href="#cb49-35"></a>    <span>int</span> numbytes<span>;</span></span>
<span id="cb49-36"><a href="#cb49-36"></a>    <span>struct</span> sockaddr_storage their_addr<span>;</span></span>
<span id="cb49-37"><a href="#cb49-37"></a>    <span>char</span> buf<span>[</span>MAXBUFLEN<span>];</span></span>
<span id="cb49-38"><a href="#cb49-38"></a>    socklen_t addr_len<span>;</span></span>
<span id="cb49-39"><a href="#cb49-39"></a>    <span>char</span> s<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb49-40"><a href="#cb49-40"></a></span>
<span id="cb49-41"><a href="#cb49-41"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb49-42"><a href="#cb49-42"></a>    hints<span>.</span>ai_family <span>=</span> AF_INET6<span>;</span> <span>// set to AF_INET to use IPv4</span></span>
<span id="cb49-43"><a href="#cb49-43"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_DGRAM<span>;</span></span>
<span id="cb49-44"><a href="#cb49-44"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span> <span>// use my IP</span></span>
<span id="cb49-45"><a href="#cb49-45"></a></span>
<span id="cb49-46"><a href="#cb49-46"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> MYPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb49-47"><a href="#cb49-47"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb49-48"><a href="#cb49-48"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb49-49"><a href="#cb49-49"></a>    <span>}</span></span>
<span id="cb49-50"><a href="#cb49-50"></a></span>
<span id="cb49-51"><a href="#cb49-51"></a>    <span>// loop through all the results and bind to the first we can</span></span>
<span id="cb49-52"><a href="#cb49-52"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb49-53"><a href="#cb49-53"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb49-54"><a href="#cb49-54"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-55"><a href="#cb49-55"></a>            perror<span>(</span><span>"listener: socket"</span><span>);</span></span>
<span id="cb49-56"><a href="#cb49-56"></a>            <span>continue</span><span>;</span></span>
<span id="cb49-57"><a href="#cb49-57"></a>        <span>}</span></span>
<span id="cb49-58"><a href="#cb49-58"></a></span>
<span id="cb49-59"><a href="#cb49-59"></a>        <span>if</span> <span>(</span>bind<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-60"><a href="#cb49-60"></a>            close<span>(</span>sockfd<span>);</span></span>
<span id="cb49-61"><a href="#cb49-61"></a>            perror<span>(</span><span>"listener: bind"</span><span>);</span></span>
<span id="cb49-62"><a href="#cb49-62"></a>            <span>continue</span><span>;</span></span>
<span id="cb49-63"><a href="#cb49-63"></a>        <span>}</span></span>
<span id="cb49-64"><a href="#cb49-64"></a></span>
<span id="cb49-65"><a href="#cb49-65"></a>        <span>break</span><span>;</span></span>
<span id="cb49-66"><a href="#cb49-66"></a>    <span>}</span></span>
<span id="cb49-67"><a href="#cb49-67"></a></span>
<span id="cb49-68"><a href="#cb49-68"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb49-69"><a href="#cb49-69"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"listener: failed to bind socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb49-70"><a href="#cb49-70"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb49-71"><a href="#cb49-71"></a>    <span>}</span></span>
<span id="cb49-72"><a href="#cb49-72"></a></span>
<span id="cb49-73"><a href="#cb49-73"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span></span>
<span id="cb49-74"><a href="#cb49-74"></a></span>
<span id="cb49-75"><a href="#cb49-75"></a>    printf<span>(</span><span>"listener: waiting to recvfrom...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb49-76"><a href="#cb49-76"></a></span>
<span id="cb49-77"><a href="#cb49-77"></a>    addr_len <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb49-78"><a href="#cb49-78"></a>    <span>if</span> <span>((</span>numbytes <span>=</span> recvfrom<span>(</span>sockfd<span>,</span> buf<span>,</span> MAXBUFLEN<span>-</span><span>1</span> <span>,</span> <span>0</span><span>,</span></span>
<span id="cb49-79"><a href="#cb49-79"></a>        <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>addr_len<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-80"><a href="#cb49-80"></a>        perror<span>(</span><span>"recvfrom"</span><span>);</span></span>
<span id="cb49-81"><a href="#cb49-81"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb49-82"><a href="#cb49-82"></a>    <span>}</span></span>
<span id="cb49-83"><a href="#cb49-83"></a></span>
<span id="cb49-84"><a href="#cb49-84"></a>    printf<span>(</span><span>"listener: got packet from </span><span>%s\n</span><span>"</span><span>,</span></span>
<span id="cb49-85"><a href="#cb49-85"></a>        inet_ntop<span>(</span>their_addr<span>.</span>ss_family<span>,</span></span>
<span id="cb49-86"><a href="#cb49-86"></a>            get_in_addr<span>((</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>),</span></span>
<span id="cb49-87"><a href="#cb49-87"></a>            s<span>,</span> <span>sizeof</span> s<span>));</span></span>
<span id="cb49-88"><a href="#cb49-88"></a>    printf<span>(</span><span>"listener: packet is </span><span>%d</span><span> bytes long</span><span>\n</span><span>"</span><span>,</span> numbytes<span>);</span></span>
<span id="cb49-89"><a href="#cb49-89"></a>    buf<span>[</span>numbytes<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb49-90"><a href="#cb49-90"></a>    printf<span>(</span><span>"listener: packet contains </span><span>\"%s\"\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb49-91"><a href="#cb49-91"></a></span>
<span id="cb49-92"><a href="#cb49-92"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb49-93"><a href="#cb49-93"></a></span>
<span id="cb49-94"><a href="#cb49-94"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb49-95"><a href="#cb49-95"></a><span>}</span></span></code></pre></div>
<p>Notice that in our call to <code>getaddrinfo()</code> we’re finally using <code>SOCK_DGRAM</code>. Also, note that there’s no need to <code>listen()</code> or <code>accept()</code>. This is one of the perks of using unconnected datagram sockets!</p>


<p>Next comes the <a href="https://beej.us/guide/bgnet/examples/talker.c">source for <code>talker.c</code></a><a href="#fn26" id="fnref26" role="doc-noteref"><sup>26</sup></a>:</p>
<div id="cb50"><pre><code><span id="cb50-1"><a href="#cb50-1"></a><span>/*</span></span>
<span id="cb50-2"><a href="#cb50-2"></a><span>** talker.c -- a datagram "client" demo</span></span>
<span id="cb50-3"><a href="#cb50-3"></a><span>*/</span></span>
<span id="cb50-4"><a href="#cb50-4"></a></span>
<span id="cb50-5"><a href="#cb50-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb50-6"><a href="#cb50-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb50-7"><a href="#cb50-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb50-8"><a href="#cb50-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb50-9"><a href="#cb50-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb50-10"><a href="#cb50-10"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb50-11"><a href="#cb50-11"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb50-12"><a href="#cb50-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb50-13"><a href="#cb50-13"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb50-14"><a href="#cb50-14"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb50-15"><a href="#cb50-15"></a></span>
<span id="cb50-16"><a href="#cb50-16"></a><span>#define SERVERPORT </span><span>"4950"</span><span>    </span><span>// the port users will be connecting to</span></span>
<span id="cb50-17"><a href="#cb50-17"></a></span>
<span id="cb50-18"><a href="#cb50-18"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb50-19"><a href="#cb50-19"></a><span>{</span></span>
<span id="cb50-20"><a href="#cb50-20"></a>    <span>int</span> sockfd<span>;</span></span>
<span id="cb50-21"><a href="#cb50-21"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb50-22"><a href="#cb50-22"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb50-23"><a href="#cb50-23"></a>    <span>int</span> numbytes<span>;</span></span>
<span id="cb50-24"><a href="#cb50-24"></a></span>
<span id="cb50-25"><a href="#cb50-25"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>3</span><span>)</span> <span>{</span></span>
<span id="cb50-26"><a href="#cb50-26"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: talker hostname message</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb50-27"><a href="#cb50-27"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb50-28"><a href="#cb50-28"></a>    <span>}</span></span>
<span id="cb50-29"><a href="#cb50-29"></a></span>
<span id="cb50-30"><a href="#cb50-30"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb50-31"><a href="#cb50-31"></a>    hints<span>.</span>ai_family <span>=</span> AF_INET6<span>;</span> <span>// set to AF_INET to use IPv4</span></span>
<span id="cb50-32"><a href="#cb50-32"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_DGRAM<span>;</span></span>
<span id="cb50-33"><a href="#cb50-33"></a></span>
<span id="cb50-34"><a href="#cb50-34"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>argv<span>[</span><span>1</span><span>],</span> SERVERPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb50-35"><a href="#cb50-35"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb50-36"><a href="#cb50-36"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb50-37"><a href="#cb50-37"></a>    <span>}</span></span>
<span id="cb50-38"><a href="#cb50-38"></a></span>
<span id="cb50-39"><a href="#cb50-39"></a>    <span>// loop through all the results and make a socket</span></span>
<span id="cb50-40"><a href="#cb50-40"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb50-41"><a href="#cb50-41"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb50-42"><a href="#cb50-42"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb50-43"><a href="#cb50-43"></a>            perror<span>(</span><span>"talker: socket"</span><span>);</span></span>
<span id="cb50-44"><a href="#cb50-44"></a>            <span>continue</span><span>;</span></span>
<span id="cb50-45"><a href="#cb50-45"></a>        <span>}</span></span>
<span id="cb50-46"><a href="#cb50-46"></a></span>
<span id="cb50-47"><a href="#cb50-47"></a>        <span>break</span><span>;</span></span>
<span id="cb50-48"><a href="#cb50-48"></a>    <span>}</span></span>
<span id="cb50-49"><a href="#cb50-49"></a></span>
<span id="cb50-50"><a href="#cb50-50"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb50-51"><a href="#cb50-51"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"talker: failed to create socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb50-52"><a href="#cb50-52"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb50-53"><a href="#cb50-53"></a>    <span>}</span></span>
<span id="cb50-54"><a href="#cb50-54"></a></span>
<span id="cb50-55"><a href="#cb50-55"></a>    <span>if</span> <span>((</span>numbytes <span>=</span> sendto<span>(</span>sockfd<span>,</span> argv<span>[</span><span>2</span><span>],</span> strlen<span>(</span>argv<span>[</span><span>2</span><span>]),</span> <span>0</span><span>,</span></span>
<span id="cb50-56"><a href="#cb50-56"></a>             p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb50-57"><a href="#cb50-57"></a>        perror<span>(</span><span>"talker: sendto"</span><span>);</span></span>
<span id="cb50-58"><a href="#cb50-58"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb50-59"><a href="#cb50-59"></a>    <span>}</span></span>
<span id="cb50-60"><a href="#cb50-60"></a></span>
<span id="cb50-61"><a href="#cb50-61"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span></span>
<span id="cb50-62"><a href="#cb50-62"></a></span>
<span id="cb50-63"><a href="#cb50-63"></a>    printf<span>(</span><span>"talker: sent </span><span>%d</span><span> bytes to </span><span>%s\n</span><span>"</span><span>,</span> numbytes<span>,</span> argv<span>[</span><span>1</span><span>]);</span></span>
<span id="cb50-64"><a href="#cb50-64"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb50-65"><a href="#cb50-65"></a></span>
<span id="cb50-66"><a href="#cb50-66"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb50-67"><a href="#cb50-67"></a><span>}</span></span></code></pre></div>
<p>And that’s all there is to it! Run <code>listener</code> on some machine, then run <code>talker</code> on another. Watch them communicate! Fun G-rated excitement for the entire nuclear family!</p>
<p>You don’t even have to run the server this time! You can run <code>talker</code> by itself, and it just happily fires packets off into the ether where they disappear if no one is ready with a <code>recvfrom()</code> on the other side. Remember: data sent using UDP datagram sockets isn’t guaranteed to arrive!</p>

<p>Except for one more tiny detail that I’ve mentioned many times in the past: connected datagram sockets. I need to talk about this here, since we’re in the datagram section of the document. Let’s say that <code>talker</code> calls <code>connect()</code> and specifies the <code>listener</code>’s address. From that point on, <code>talker</code> may only send to and receive from the address specified by <code>connect()</code>. For this reason, you don’t have to use <code>sendto()</code> and <code>recvfrom()</code>; you can simply use <code>send()</code> and <code>recv()</code>.</p>

<h2 data-number="7" id="slightly-advanced-techniques"> Slightly Advanced Techniques</h2>
<p>These aren’t <em>really</em> advanced, but they’re getting out of the more basic levels we’ve already covered. In fact, if you’ve gotten this far, you should consider yourself fairly accomplished in the basics of Unix network programming! Congratulations!</p>
<p>So here we go into the brave new world of some of the more esoteric things you might want to learn about sockets. Have at it!</p>
<h2 data-number="7.1" id="blocking"> Blocking</h2>

<p>Blocking. You’ve heard about it—now what the heck is it? In a nutshell, “block” is techie jargon for “sleep”. You probably noticed that when you run <code>listener</code>, above, it just sits there until a packet arrives. What happened is that it called <code>recvfrom()</code>, there was no data, and so <code>recvfrom()</code> is said to “block” (that is, sleep there) until some data arrives.</p>
<p>Lots of functions block. <code>accept()</code> blocks. All the <code>recv()</code> functions block. The reason they can do this is because they’re allowed to. When you first create the socket descriptor with <code>socket()</code>, the kernel sets it to blocking. If you don’t want a socket to be blocking, you have to make a call to <code>fcntl()</code>:</p>
<div id="cb51"><pre><code><span id="cb51-1"><a href="#cb51-1"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb51-2"><a href="#cb51-2"></a><span>#include </span><span>&lt;fcntl.h&gt;</span></span>
<span id="cb51-3"><a href="#cb51-3"></a><span>.</span></span>
<span id="cb51-4"><a href="#cb51-4"></a><span>.</span></span>
<span id="cb51-5"><a href="#cb51-5"></a><span>.</span></span>
<span id="cb51-6"><a href="#cb51-6"></a>sockfd <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb51-7"><a href="#cb51-7"></a>fcntl<span>(</span>sockfd<span>,</span> F_SETFL<span>,</span> O_NONBLOCK<span>);</span></span>
<span id="cb51-8"><a href="#cb51-8"></a><span>.</span></span>
<span id="cb51-9"><a href="#cb51-9"></a><span>.</span></span>
<span id="cb51-10"><a href="#cb51-10"></a><span>.</span> </span></code></pre></div>
<p>By setting a socket to non-blocking, you can effectively “poll” the socket for information. If you try to read from a non-blocking socket and there’s no data there, it’s not allowed to block—it will return <code>-1</code> and <code>errno</code> will be set to <code>EAGAIN</code> or <code>EWOULDBLOCK</code>.</p>
<p>(Wait—it can return <code>EAGAIN</code> <em>or</em> <code>EWOULDBLOCK</code>? Which do you check for? The specification doesn’t actually specify which your system will return, so for portability, check them both.)</p>
<p>Generally speaking, however, this type of polling is a bad idea. If you put your program in a busy-wait looking for data on the socket, you’ll suck up CPU time like it was going out of style. A more elegant solution for checking to see if there’s data waiting to be read comes in the following section on <code>poll()</code>.</p>

<h2 data-number="7.2" id="poll"> <code>poll()</code>—Synchronous I/O Multiplexing</h2>

<p>What you really want to be able to do is somehow monitor a <em>bunch</em> of sockets at once and then handle the ones that have data ready. This way you don’t have to continuously poll all those sockets to see which are ready to read.</p>
<blockquote>
<p><em>A word of warning: <code>poll()</code> is horribly slow when it comes to giant numbers of connections. In those circumstances, you’ll get better performance out of an event library such as <a href="https://libevent.org/">libevent</a><a href="#fn27" id="fnref27" role="doc-noteref"><sup>27</sup></a> that attempts to use the fastest possible method availabile on your system.</em></p>
</blockquote>
<p>So how can you avoid polling? Not slightly ironically, you can avoid polling by using the <code>poll()</code> system call. In a nutshell, we’re going to ask the operating system to do all the dirty work for us, and just let us know when some data is ready to read on which sockets. In the meantime, our process can go to sleep, saving system resources.</p>
<p>The general gameplan is to keep an array of <code>struct pollfd</code>s with information about which socket descriptors we want to monitor, and what kind of events we want to monitor for. The OS will block on the <code>poll()</code> call until one of those events occurs (e.g.&nbsp;“socket ready to read!”) or until a user-specified timeout occurs.</p>
<p>Usefully, a <code>listen()</code>ing socket will return “ready to read” when a new incoming connection is ready to be <code>accept()</code>ed.</p>
<p>That’s enough banter. How do we use this?</p>
<div id="cb52"><pre><code><span id="cb52-1"><span>#include </span><span>&lt;poll.h&gt;</span></span>
<span id="cb52-2"></span>
<span id="cb52-3"><span>int</span> poll<span>(</span><span>struct</span> pollfd fds<span>[],</span> nfds_t nfds<span>,</span> <span>int</span> timeout<span>);</span></span></code></pre></div>
<p><code>fds</code> is our array of information (which sockets to monitor for what), <code>nfds</code> is the count of elements in the array, and <code>timeout</code> is a timeout in milliseconds. It returns the number of elements in the array that have had an event occur.</p>
<p>Let’s have a look at that <code>struct</code>:</p>

<div id="cb53"><pre><code><span id="cb53-1"><span>struct</span> pollfd <span>{</span></span>
<span id="cb53-2">    <span>int</span> fd<span>;</span>         <span>// the socket descriptor</span></span>
<span id="cb53-3">    <span>short</span> events<span>;</span>   <span>// bitmap of events we're interested in</span></span>
<span id="cb53-4">    <span>short</span> revents<span>;</span>  <span>// when poll() returns, bitmap of events that occurred</span></span>
<span id="cb53-5"><span>};</span></span></code></pre></div>
<p>So we’re going to have an array of those, and we’ll set the <code>fd</code> field for each element to a socket descriptor we’re interested in monitoring. And then we’ll set the <code>events</code> field to indicate the type of events we’re interested in.</p>
<p>The <code>events</code> field is the bitwise-OR of the following:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>POLLIN</code></td>
<td>Alert me when data is ready to <code>recv()</code> on this socket.</td>
</tr>
<tr>
<td><code>POLLOUT</code></td>
<td>Alert me when I can <code>send()</code> data to this socket without blocking.</td>
</tr>
</tbody>
</table>
<p>Once you have your array of <code>struct pollfd</code>s in order, then you can pass it to <code>poll()</code>, also passing the size of the array, as well as a timeout value in milliseconds. (You can specify a negative timeout to wait forever.)</p>
<p>After <code>poll()</code> returns, you can check the <code>revents</code> field to see if <code>POLLIN</code> or <code>POLLOUT</code> is set, indicating that event occurred.</p>
<p>(There’s actually more that you can do with the <code>poll()</code> call. See the <a href="#pollman"><code>poll()</code> man page, below</a>, for more details.)</p>
<p>Here’s <a href="https://beej.us/guide/bgnet/examples/poll.c">an example</a><a href="#fn28" id="fnref28" role="doc-noteref"><sup>28</sup></a> where we’ll wait 2.5 seconds for data to be ready to read from standard input, i.e.&nbsp;when you hit <code>RETURN</code>:</p>
<div id="cb54"><pre><code><span id="cb54-1"><a href="#cb54-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb54-2"><a href="#cb54-2"></a><span>#include </span><span>&lt;poll.h&gt;</span></span>
<span id="cb54-3"><a href="#cb54-3"></a></span>
<span id="cb54-4"><a href="#cb54-4"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb54-5"><a href="#cb54-5"></a><span>{</span></span>
<span id="cb54-6"><a href="#cb54-6"></a>    <span>struct</span> pollfd pfds<span>[</span><span>1</span><span>];</span> <span>// More if you want to monitor more</span></span>
<span id="cb54-7"><a href="#cb54-7"></a></span>
<span id="cb54-8"><a href="#cb54-8"></a>    pfds<span>[</span><span>0</span><span>].</span>fd <span>=</span> <span>0</span><span>;</span>          <span>// Standard input</span></span>
<span id="cb54-9"><a href="#cb54-9"></a>    pfds<span>[</span><span>0</span><span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// Tell me when ready to read</span></span>
<span id="cb54-10"><a href="#cb54-10"></a></span>
<span id="cb54-11"><a href="#cb54-11"></a>    <span>// If you needed to monitor other things, as well:</span></span>
<span id="cb54-12"><a href="#cb54-12"></a>    <span>//pfds[1].fd = some_socket; // Some socket descriptor</span></span>
<span id="cb54-13"><a href="#cb54-13"></a>    <span>//pfds[1].events = POLLIN;  // Tell me when ready to read</span></span>
<span id="cb54-14"><a href="#cb54-14"></a></span>
<span id="cb54-15"><a href="#cb54-15"></a>    printf<span>(</span><span>"Hit RETURN or wait 2.5 seconds for timeout</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb54-16"><a href="#cb54-16"></a></span>
<span id="cb54-17"><a href="#cb54-17"></a>    <span>int</span> num_events <span>=</span> poll<span>(</span>pfds<span>,</span> <span>1</span><span>,</span> <span>2500</span><span>);</span> <span>// 2.5 second timeout</span></span>
<span id="cb54-18"><a href="#cb54-18"></a></span>
<span id="cb54-19"><a href="#cb54-19"></a>    <span>if</span> <span>(</span>num_events <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb54-20"><a href="#cb54-20"></a>        printf<span>(</span><span>"Poll timed out!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb54-21"><a href="#cb54-21"></a>    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb54-22"><a href="#cb54-22"></a>        <span>int</span> pollin_happened <span>=</span> pfds<span>[</span><span>0</span><span>].</span>revents <span>&amp;</span> POLLIN<span>;</span></span>
<span id="cb54-23"><a href="#cb54-23"></a></span>
<span id="cb54-24"><a href="#cb54-24"></a>        <span>if</span> <span>(</span>pollin_happened<span>)</span> <span>{</span></span>
<span id="cb54-25"><a href="#cb54-25"></a>            printf<span>(</span><span>"File descriptor </span><span>%d</span><span> is ready to read</span><span>\n</span><span>"</span><span>,</span> pfds<span>[</span><span>0</span><span>].</span>fd<span>);</span></span>
<span id="cb54-26"><a href="#cb54-26"></a>        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb54-27"><a href="#cb54-27"></a>            printf<span>(</span><span>"Unexpected event occurred: </span><span>%d\n</span><span>"</span><span>,</span> pfds<span>[</span><span>0</span><span>].</span>revents<span>);</span></span>
<span id="cb54-28"><a href="#cb54-28"></a>        <span>}</span></span>
<span id="cb54-29"><a href="#cb54-29"></a>    <span>}</span></span>
<span id="cb54-30"><a href="#cb54-30"></a></span>
<span id="cb54-31"><a href="#cb54-31"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb54-32"><a href="#cb54-32"></a><span>}</span></span></code></pre></div>
<p>Notice again that <code>poll()</code> returns the number of elements in the <code>pfds</code> array for which events have occurred. It doesn’t tell you <em>which</em> elements in the array (you still have to scan for that), but it does tell you how many entries have a non-zero <code>revents</code> field (so you can stop scanning after you find that many).</p>
<p>A couple questions might come up here: how to add new file descriptors to the set I pass to <code>poll()</code>? For this, simply make sure you have enough space in the array for all you need, or <code>realloc()</code> more space as needed.</p>
<p>What about deleting items from the set? For this, you can copy the last element in the array over-top the one you’re deleting. And then pass in one fewer as the count to <code>poll()</code>. Another option is that you can set any <code>fd</code> field to a negative number and <code>poll()</code> will ignore it.</p>
<p>How can we put it all together into a chat server that you can <code>telnet</code> to?</p>
<p>What we’ll do is start a listener socket, and add it to the set of file descriptors to <code>poll()</code>. (It will show ready-to-read when there’s an incoming connection.)</p>
<p>Then we’ll add new connections to our <code>struct pollfd</code> array. And we’ll grow it dynamically if we run out of space.</p>
<p>When a connection is closed, we’ll remove it from the array.</p>
<p>And when a connection is ready-to-read, we’ll read the data from it and send that data to all the other connections so they can see what the other users typed.</p>
<p>So give <a href="https://beej.us/guide/bgnet/examples/pollserver.c">this poll server</a><a href="#fn29" id="fnref29" role="doc-noteref"><sup>29</sup></a> a try. Run it in one window, then <code>telnet localhost 9034</code> from a number of other terminal windows. You should be able to see what you type in one window in the other ones (after you hit RETURN).</p>
<p>Not only that, but if you hit <code>CTRL-]</code> and type <code>quit</code> to exit <code>telnet</code>, the server should detect the disconnection and remove you from the array of file descriptors.</p>
<div id="cb55"><pre><code><span id="cb55-1"><a href="#cb55-1"></a><span>/*</span></span>
<span id="cb55-2"><a href="#cb55-2"></a><span>** pollserver.c -- a cheezy multiperson chat server</span></span>
<span id="cb55-3"><a href="#cb55-3"></a><span>*/</span></span>
<span id="cb55-4"><a href="#cb55-4"></a></span>
<span id="cb55-5"><a href="#cb55-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb55-6"><a href="#cb55-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb55-7"><a href="#cb55-7"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb55-8"><a href="#cb55-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb55-9"><a href="#cb55-9"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb55-10"><a href="#cb55-10"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb55-11"><a href="#cb55-11"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb55-12"><a href="#cb55-12"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb55-13"><a href="#cb55-13"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb55-14"><a href="#cb55-14"></a><span>#include </span><span>&lt;poll.h&gt;</span></span>
<span id="cb55-15"><a href="#cb55-15"></a></span>
<span id="cb55-16"><a href="#cb55-16"></a><span>#define PORT </span><span>"9034"</span><span>   </span><span>// Port we're listening on</span></span>
<span id="cb55-17"><a href="#cb55-17"></a></span>
<span id="cb55-18"><a href="#cb55-18"></a><span>// Get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb55-19"><a href="#cb55-19"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb55-20"><a href="#cb55-20"></a><span>{</span></span>
<span id="cb55-21"><a href="#cb55-21"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb55-22"><a href="#cb55-22"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb55-23"><a href="#cb55-23"></a>    <span>}</span></span>
<span id="cb55-24"><a href="#cb55-24"></a></span>
<span id="cb55-25"><a href="#cb55-25"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb55-26"><a href="#cb55-26"></a><span>}</span></span>
<span id="cb55-27"><a href="#cb55-27"></a></span>
<span id="cb55-28"><a href="#cb55-28"></a><span>// Return a listening socket</span></span>
<span id="cb55-29"><a href="#cb55-29"></a><span>int</span> get_listener_socket<span>(</span><span>void</span><span>)</span></span>
<span id="cb55-30"><a href="#cb55-30"></a><span>{</span></span>
<span id="cb55-31"><a href="#cb55-31"></a>    <span>int</span> listener<span>;</span>     <span>// Listening socket descriptor</span></span>
<span id="cb55-32"><a href="#cb55-32"></a>    <span>int</span> yes<span>=</span><span>1</span><span>;</span>        <span>// For setsockopt() SO_REUSEADDR, below</span></span>
<span id="cb55-33"><a href="#cb55-33"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb55-34"><a href="#cb55-34"></a></span>
<span id="cb55-35"><a href="#cb55-35"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>ai<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb55-36"><a href="#cb55-36"></a></span>
<span id="cb55-37"><a href="#cb55-37"></a>    <span>// Get us a socket and bind it</span></span>
<span id="cb55-38"><a href="#cb55-38"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb55-39"><a href="#cb55-39"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb55-40"><a href="#cb55-40"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb55-41"><a href="#cb55-41"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span></span>
<span id="cb55-42"><a href="#cb55-42"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>ai<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-43"><a href="#cb55-43"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"selectserver: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb55-44"><a href="#cb55-44"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb55-45"><a href="#cb55-45"></a>    <span>}</span></span>
<span id="cb55-46"><a href="#cb55-46"></a>    </span>
<span id="cb55-47"><a href="#cb55-47"></a>    <span>for</span><span>(</span>p <span>=</span> ai<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb55-48"><a href="#cb55-48"></a>        listener <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span> p<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb55-49"><a href="#cb55-49"></a>        <span>if</span> <span>(</span>listener <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> </span>
<span id="cb55-50"><a href="#cb55-50"></a>            <span>continue</span><span>;</span></span>
<span id="cb55-51"><a href="#cb55-51"></a>        <span>}</span></span>
<span id="cb55-52"><a href="#cb55-52"></a>        </span>
<span id="cb55-53"><a href="#cb55-53"></a>        <span>// Lose the pesky "address already in use" error message</span></span>
<span id="cb55-54"><a href="#cb55-54"></a>        setsockopt<span>(</span>listener<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>yes<span>,</span> <span>sizeof</span><span>(</span><span>int</span><span>));</span></span>
<span id="cb55-55"><a href="#cb55-55"></a></span>
<span id="cb55-56"><a href="#cb55-56"></a>        <span>if</span> <span>(</span>bind<span>(</span>listener<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-57"><a href="#cb55-57"></a>            close<span>(</span>listener<span>);</span></span>
<span id="cb55-58"><a href="#cb55-58"></a>            <span>continue</span><span>;</span></span>
<span id="cb55-59"><a href="#cb55-59"></a>        <span>}</span></span>
<span id="cb55-60"><a href="#cb55-60"></a></span>
<span id="cb55-61"><a href="#cb55-61"></a>        <span>break</span><span>;</span></span>
<span id="cb55-62"><a href="#cb55-62"></a>    <span>}</span></span>
<span id="cb55-63"><a href="#cb55-63"></a></span>
<span id="cb55-64"><a href="#cb55-64"></a>    freeaddrinfo<span>(</span>ai<span>);</span> <span>// All done with this</span></span>
<span id="cb55-65"><a href="#cb55-65"></a></span>
<span id="cb55-66"><a href="#cb55-66"></a>    <span>// If we got here, it means we didn't get bound</span></span>
<span id="cb55-67"><a href="#cb55-67"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb55-68"><a href="#cb55-68"></a>        <span>return</span> <span>-</span><span>1</span><span>;</span></span>
<span id="cb55-69"><a href="#cb55-69"></a>    <span>}</span></span>
<span id="cb55-70"><a href="#cb55-70"></a></span>
<span id="cb55-71"><a href="#cb55-71"></a>    <span>// Listen</span></span>
<span id="cb55-72"><a href="#cb55-72"></a>    <span>if</span> <span>(</span>listen<span>(</span>listener<span>,</span> <span>10</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-73"><a href="#cb55-73"></a>        <span>return</span> <span>-</span><span>1</span><span>;</span></span>
<span id="cb55-74"><a href="#cb55-74"></a>    <span>}</span></span>
<span id="cb55-75"><a href="#cb55-75"></a></span>
<span id="cb55-76"><a href="#cb55-76"></a>    <span>return</span> listener<span>;</span></span>
<span id="cb55-77"><a href="#cb55-77"></a><span>}</span></span>
<span id="cb55-78"><a href="#cb55-78"></a></span>
<span id="cb55-79"><a href="#cb55-79"></a><span>// Add a new file descriptor to the set</span></span>
<span id="cb55-80"><a href="#cb55-80"></a><span>void</span> add_to_pfds<span>(</span><span>struct</span> pollfd <span>*</span>pfds<span>[],</span> <span>int</span> newfd<span>,</span> <span>int</span> <span>*</span>fd_count<span>,</span> <span>int</span> <span>*</span>fd_size<span>)</span></span>
<span id="cb55-81"><a href="#cb55-81"></a><span>{</span></span>
<span id="cb55-82"><a href="#cb55-82"></a>    <span>// If we don't have room, add more space in the pfds array</span></span>
<span id="cb55-83"><a href="#cb55-83"></a>    <span>if</span> <span>(*</span>fd_count <span>==</span> <span>*</span>fd_size<span>)</span> <span>{</span></span>
<span id="cb55-84"><a href="#cb55-84"></a>        <span>*</span>fd_size <span>*=</span> <span>2</span><span>;</span> <span>// Double it</span></span>
<span id="cb55-85"><a href="#cb55-85"></a></span>
<span id="cb55-86"><a href="#cb55-86"></a>        <span>*</span>pfds <span>=</span> realloc<span>(*</span>pfds<span>,</span> <span>sizeof</span><span>(**</span>pfds<span>)</span> <span>*</span> <span>(*</span>fd_size<span>));</span></span>
<span id="cb55-87"><a href="#cb55-87"></a>    <span>}</span></span>
<span id="cb55-88"><a href="#cb55-88"></a></span>
<span id="cb55-89"><a href="#cb55-89"></a>    <span>(*</span>pfds<span>)[*</span>fd_count<span>].</span>fd <span>=</span> newfd<span>;</span></span>
<span id="cb55-90"><a href="#cb55-90"></a>    <span>(*</span>pfds<span>)[*</span>fd_count<span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// Check ready-to-read</span></span>
<span id="cb55-91"><a href="#cb55-91"></a></span>
<span id="cb55-92"><a href="#cb55-92"></a>    <span>(*</span>fd_count<span>)++;</span></span>
<span id="cb55-93"><a href="#cb55-93"></a><span>}</span></span>
<span id="cb55-94"><a href="#cb55-94"></a></span>
<span id="cb55-95"><a href="#cb55-95"></a><span>// Remove an index from the set</span></span>
<span id="cb55-96"><a href="#cb55-96"></a><span>void</span> del_from_pfds<span>(</span><span>struct</span> pollfd pfds<span>[],</span> <span>int</span> i<span>,</span> <span>int</span> <span>*</span>fd_count<span>)</span></span>
<span id="cb55-97"><a href="#cb55-97"></a><span>{</span></span>
<span id="cb55-98"><a href="#cb55-98"></a>    <span>// Copy the one from the end over this one</span></span>
<span id="cb55-99"><a href="#cb55-99"></a>    pfds<span>[</span>i<span>]</span> <span>=</span> pfds<span>[*</span>fd_count<span>-</span><span>1</span><span>];</span></span>
<span id="cb55-100"><a href="#cb55-100"></a></span>
<span id="cb55-101"><a href="#cb55-101"></a>    <span>(*</span>fd_count<span>)--;</span></span>
<span id="cb55-102"><a href="#cb55-102"></a><span>}</span></span>
<span id="cb55-103"><a href="#cb55-103"></a></span>
<span id="cb55-104"><a href="#cb55-104"></a><span>// Main</span></span>
<span id="cb55-105"><a href="#cb55-105"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb55-106"><a href="#cb55-106"></a><span>{</span></span>
<span id="cb55-107"><a href="#cb55-107"></a>    <span>int</span> listener<span>;</span>     <span>// Listening socket descriptor</span></span>
<span id="cb55-108"><a href="#cb55-108"></a></span>
<span id="cb55-109"><a href="#cb55-109"></a>    <span>int</span> newfd<span>;</span>        <span>// Newly accept()ed socket descriptor</span></span>
<span id="cb55-110"><a href="#cb55-110"></a>    <span>struct</span> sockaddr_storage remoteaddr<span>;</span> <span>// Client address</span></span>
<span id="cb55-111"><a href="#cb55-111"></a>    socklen_t addrlen<span>;</span></span>
<span id="cb55-112"><a href="#cb55-112"></a></span>
<span id="cb55-113"><a href="#cb55-113"></a>    <span>char</span> buf<span>[</span><span>256</span><span>];</span>    <span>// Buffer for client data</span></span>
<span id="cb55-114"><a href="#cb55-114"></a></span>
<span id="cb55-115"><a href="#cb55-115"></a>    <span>char</span> remoteIP<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb55-116"><a href="#cb55-116"></a></span>
<span id="cb55-117"><a href="#cb55-117"></a>    <span>// Start off with room for 5 connections</span></span>
<span id="cb55-118"><a href="#cb55-118"></a>    <span>// (We'll realloc as necessary)</span></span>
<span id="cb55-119"><a href="#cb55-119"></a>    <span>int</span> fd_count <span>=</span> <span>0</span><span>;</span></span>
<span id="cb55-120"><a href="#cb55-120"></a>    <span>int</span> fd_size <span>=</span> <span>5</span><span>;</span></span>
<span id="cb55-121"><a href="#cb55-121"></a>    <span>struct</span> pollfd <span>*</span>pfds <span>=</span> malloc<span>(</span><span>sizeof</span> <span>*</span>pfds <span>*</span> fd_size<span>);</span></span>
<span id="cb55-122"><a href="#cb55-122"></a></span>
<span id="cb55-123"><a href="#cb55-123"></a>    <span>// Set up and get a listening socket</span></span>
<span id="cb55-124"><a href="#cb55-124"></a>    listener <span>=</span> get_listener_socket<span>();</span></span>
<span id="cb55-125"><a href="#cb55-125"></a></span>
<span id="cb55-126"><a href="#cb55-126"></a>    <span>if</span> <span>(</span>listener <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-127"><a href="#cb55-127"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"error getting listening socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb55-128"><a href="#cb55-128"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb55-129"><a href="#cb55-129"></a>    <span>}</span></span>
<span id="cb55-130"><a href="#cb55-130"></a></span>
<span id="cb55-131"><a href="#cb55-131"></a>    <span>// Add the listener to set</span></span>
<span id="cb55-132"><a href="#cb55-132"></a>    pfds<span>[</span><span>0</span><span>].</span>fd <span>=</span> listener<span>;</span></span>
<span id="cb55-133"><a href="#cb55-133"></a>    pfds<span>[</span><span>0</span><span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// Report ready to read on incoming connection</span></span>
<span id="cb55-134"><a href="#cb55-134"></a></span>
<span id="cb55-135"><a href="#cb55-135"></a>    fd_count <span>=</span> <span>1</span><span>;</span> <span>// For the listener</span></span>
<span id="cb55-136"><a href="#cb55-136"></a></span>
<span id="cb55-137"><a href="#cb55-137"></a>    <span>// Main loop</span></span>
<span id="cb55-138"><a href="#cb55-138"></a>    <span>for</span><span>(;;)</span> <span>{</span></span>
<span id="cb55-139"><a href="#cb55-139"></a>        <span>int</span> poll_count <span>=</span> poll<span>(</span>pfds<span>,</span> fd_count<span>,</span> <span>-</span><span>1</span><span>);</span></span>
<span id="cb55-140"><a href="#cb55-140"></a></span>
<span id="cb55-141"><a href="#cb55-141"></a>        <span>if</span> <span>(</span>poll_count <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-142"><a href="#cb55-142"></a>            perror<span>(</span><span>"poll"</span><span>);</span></span>
<span id="cb55-143"><a href="#cb55-143"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb55-144"><a href="#cb55-144"></a>        <span>}</span></span>
<span id="cb55-145"><a href="#cb55-145"></a></span>
<span id="cb55-146"><a href="#cb55-146"></a>        <span>// Run through the existing connections looking for data to read</span></span>
<span id="cb55-147"><a href="#cb55-147"></a>        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> fd_count<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb55-148"><a href="#cb55-148"></a></span>
<span id="cb55-149"><a href="#cb55-149"></a>            <span>// Check if someone's ready to read</span></span>
<span id="cb55-150"><a href="#cb55-150"></a>            <span>if</span> <span>(</span>pfds<span>[</span>i<span>].</span>revents <span>&amp;</span> POLLIN<span>)</span> <span>{</span> <span>// We got one!!</span></span>
<span id="cb55-151"><a href="#cb55-151"></a></span>
<span id="cb55-152"><a href="#cb55-152"></a>                <span>if</span> <span>(</span>pfds<span>[</span>i<span>].</span>fd <span>==</span> listener<span>)</span> <span>{</span></span>
<span id="cb55-153"><a href="#cb55-153"></a>                    <span>// If listener is ready to read, handle new connection</span></span>
<span id="cb55-154"><a href="#cb55-154"></a></span>
<span id="cb55-155"><a href="#cb55-155"></a>                    addrlen <span>=</span> <span>sizeof</span> remoteaddr<span>;</span></span>
<span id="cb55-156"><a href="#cb55-156"></a>                    newfd <span>=</span> accept<span>(</span>listener<span>,</span></span>
<span id="cb55-157"><a href="#cb55-157"></a>                        <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>remoteaddr<span>,</span></span>
<span id="cb55-158"><a href="#cb55-158"></a>                        <span>&amp;</span>addrlen<span>);</span></span>
<span id="cb55-159"><a href="#cb55-159"></a></span>
<span id="cb55-160"><a href="#cb55-160"></a>                    <span>if</span> <span>(</span>newfd <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-161"><a href="#cb55-161"></a>                        perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb55-162"><a href="#cb55-162"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-163"><a href="#cb55-163"></a>                        add_to_pfds<span>(&amp;</span>pfds<span>,</span> newfd<span>,</span> <span>&amp;</span>fd_count<span>,</span> <span>&amp;</span>fd_size<span>);</span></span>
<span id="cb55-164"><a href="#cb55-164"></a></span>
<span id="cb55-165"><a href="#cb55-165"></a>                        printf<span>(</span><span>"pollserver: new connection from </span><span>%s</span><span> on "</span></span>
<span id="cb55-166"><a href="#cb55-166"></a>                            <span>"socket </span><span>%d\n</span><span>"</span><span>,</span></span>
<span id="cb55-167"><a href="#cb55-167"></a>                            inet_ntop<span>(</span>remoteaddr<span>.</span>ss_family<span>,</span></span>
<span id="cb55-168"><a href="#cb55-168"></a>                                get_in_addr<span>((</span><span>struct</span> sockaddr<span>*)&amp;</span>remoteaddr<span>),</span></span>
<span id="cb55-169"><a href="#cb55-169"></a>                                remoteIP<span>,</span> INET6_ADDRSTRLEN<span>),</span></span>
<span id="cb55-170"><a href="#cb55-170"></a>                            newfd<span>);</span></span>
<span id="cb55-171"><a href="#cb55-171"></a>                    <span>}</span></span>
<span id="cb55-172"><a href="#cb55-172"></a>                <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-173"><a href="#cb55-173"></a>                    <span>// If not the listener, we're just a regular client</span></span>
<span id="cb55-174"><a href="#cb55-174"></a>                    <span>int</span> nbytes <span>=</span> recv<span>(</span>pfds<span>[</span>i<span>].</span>fd<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>);</span></span>
<span id="cb55-175"><a href="#cb55-175"></a></span>
<span id="cb55-176"><a href="#cb55-176"></a>                    <span>int</span> sender_fd <span>=</span> pfds<span>[</span>i<span>].</span>fd<span>;</span></span>
<span id="cb55-177"><a href="#cb55-177"></a></span>
<span id="cb55-178"><a href="#cb55-178"></a>                    <span>if</span> <span>(</span>nbytes <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-179"><a href="#cb55-179"></a>                        <span>// Got error or connection closed by client</span></span>
<span id="cb55-180"><a href="#cb55-180"></a>                        <span>if</span> <span>(</span>nbytes <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-181"><a href="#cb55-181"></a>                            <span>// Connection closed</span></span>
<span id="cb55-182"><a href="#cb55-182"></a>                            printf<span>(</span><span>"pollserver: socket </span><span>%d</span><span> hung up</span><span>\n</span><span>"</span><span>,</span> sender_fd<span>);</span></span>
<span id="cb55-183"><a href="#cb55-183"></a>                        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-184"><a href="#cb55-184"></a>                            perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb55-185"><a href="#cb55-185"></a>                        <span>}</span></span>
<span id="cb55-186"><a href="#cb55-186"></a></span>
<span id="cb55-187"><a href="#cb55-187"></a>                        close<span>(</span>pfds<span>[</span>i<span>].</span>fd<span>);</span> <span>// Bye!</span></span>
<span id="cb55-188"><a href="#cb55-188"></a></span>
<span id="cb55-189"><a href="#cb55-189"></a>                        del_from_pfds<span>(</span>pfds<span>,</span> i<span>,</span> <span>&amp;</span>fd_count<span>);</span></span>
<span id="cb55-190"><a href="#cb55-190"></a></span>
<span id="cb55-191"><a href="#cb55-191"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-192"><a href="#cb55-192"></a>                        <span>// We got some good data from a client</span></span>
<span id="cb55-193"><a href="#cb55-193"></a></span>
<span id="cb55-194"><a href="#cb55-194"></a>                        <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> fd_count<span>;</span> j<span>++)</span> <span>{</span></span>
<span id="cb55-195"><a href="#cb55-195"></a>                            <span>// Send to everyone!</span></span>
<span id="cb55-196"><a href="#cb55-196"></a>                            <span>int</span> dest_fd <span>=</span> pfds<span>[</span>j<span>].</span>fd<span>;</span></span>
<span id="cb55-197"><a href="#cb55-197"></a></span>
<span id="cb55-198"><a href="#cb55-198"></a>                            <span>// Except the listener and ourselves</span></span>
<span id="cb55-199"><a href="#cb55-199"></a>                            <span>if</span> <span>(</span>dest_fd <span>!=</span> listener <span>&amp;&amp;</span> dest_fd <span>!=</span> sender_fd<span>)</span> <span>{</span></span>
<span id="cb55-200"><a href="#cb55-200"></a>                                <span>if</span> <span>(</span>send<span>(</span>dest_fd<span>,</span> buf<span>,</span> nbytes<span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-201"><a href="#cb55-201"></a>                                    perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb55-202"><a href="#cb55-202"></a>                                <span>}</span></span>
<span id="cb55-203"><a href="#cb55-203"></a>                            <span>}</span></span>
<span id="cb55-204"><a href="#cb55-204"></a>                        <span>}</span></span>
<span id="cb55-205"><a href="#cb55-205"></a>                    <span>}</span></span>
<span id="cb55-206"><a href="#cb55-206"></a>                <span>}</span> <span>// </span><span>END</span><span> handle data from client</span></span>
<span id="cb55-207"><a href="#cb55-207"></a>            <span>}</span> <span>// </span><span>END</span><span> got ready-to-read from poll()</span></span>
<span id="cb55-208"><a href="#cb55-208"></a>        <span>}</span> <span>// </span><span>END</span><span> looping through file descriptors</span></span>
<span id="cb55-209"><a href="#cb55-209"></a>    <span>}</span> <span>// </span><span>END</span><span> for(;;)--and you thought it would never end!</span></span>
<span id="cb55-210"><a href="#cb55-210"></a>    </span>
<span id="cb55-211"><a href="#cb55-211"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb55-212"><a href="#cb55-212"></a><span>}</span></span></code></pre></div>
<p>In the next section, we’ll look at a similar, older function called <code>select()</code>. Both <code>select()</code> and <code>poll()</code> offer similar functionality and performance, and only really differ in how they’re used. <code>select()</code> might be slightly more portable, but is perhaps a little clunkier in use. Choose the one you like the best, as long as it’s supported on your system.</p>

<h2 data-number="7.3" id="select"> <code>select()</code>—Synchronous I/O Multiplexing, Old School</h2>

<p>This function is somewhat strange, but it’s very useful. Take the following situation: you are a server and you want to listen for incoming connections as well as keep reading from the connections you already have.</p>
<p>No problem, you say, just an <code>accept()</code> and a couple of <code>recv()</code>s. Not so fast, buster! What if you’re blocking on an <code>accept()</code> call? How are you going to <code>recv()</code> data at the same time? “Use non-blocking sockets!” No way! You don’t want to be a CPU hog. What, then?</p>
<p><code>select()</code> gives you the power to monitor several sockets at the same time. It’ll tell you which ones are ready for reading, which are ready for writing, and which sockets have raised exceptions, if you really want to know that.</p>
<blockquote>
<p><em>A word of warning: <code>select()</code>, though very portable, is terribly slow when it comes to giant numbers of connections. In those circumstances, you’ll get better performance out of an event library such as <a href="https://libevent.org/">libevent</a><a href="#fn30" id="fnref30" role="doc-noteref"><sup>30</sup></a> that attempts to use the fastest possible method availabile on your system.</em></p>
</blockquote>
<p>Without any further ado, I’ll offer the synopsis of <code>select()</code>:</p>
<div id="cb56"><pre><code><span id="cb56-1"><span>#include </span><span>&lt;sys/time.h&gt;</span></span>
<span id="cb56-2"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb56-3"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb56-4"></span>
<span id="cb56-5"><span>int</span> select<span>(</span><span>int</span> numfds<span>,</span> fd_set <span>*</span>readfds<span>,</span> fd_set <span>*</span>writefds<span>,</span></span>
<span id="cb56-6">           fd_set <span>*</span>exceptfds<span>,</span> <span>struct</span> timeval <span>*</span>timeout<span>);</span> </span></code></pre></div>
<p>The function monitors “sets” of file descriptors; in particular <code>readfds</code>, <code>writefds</code>, and <code>exceptfds</code>. If you want to see if you can read from standard input and some socket descriptor, <code>sockfd</code>, just add the file descriptors <code>0</code> and <code>sockfd</code> to the set <code>readfds</code>. The parameter <code>numfds</code> should be set to the values of the highest file descriptor plus one. In this example, it should be set to <code>sockfd+1</code>, since it is assuredly higher than standard input (<code>0</code>).</p>
<p>When <code>select()</code> returns, <code>readfds</code> will be modified to reflect which of the file descriptors you selected which is ready for reading. You can test them with the macro <code>FD_ISSET()</code>, below.</p>
<p>Before progressing much further, I’ll talk about how to manipulate these sets. Each set is of the type <code>fd_set</code>. The following macros operate on this type:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FD_SET(int fd, fd_set *set);</code></td>
<td>Add <code>fd</code> to the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_CLR(int fd, fd_set *set);</code></td>
<td>Remove <code>fd</code> from the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ISSET(int fd, fd_set *set);</code></td>
<td>Return true if <code>fd</code> is in the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ZERO(fd_set *set);</code></td>
<td>Clear all entries from the <code>set</code>.</td>
</tr>
</tbody>
</table>

<p>Finally, what is this weirded-out <code>struct timeval</code>? Well, sometimes you don’t want to wait forever for someone to send you some data. Maybe every 96 seconds you want to print “Still Going…” to the terminal even though nothing has happened. This time structure allows you to specify a timeout period. If the time is exceeded and <code>select()</code> still hasn’t found any ready file descriptors, it’ll return so you can continue processing.</p>
<p>The <code>struct timeval</code> has the follow fields:</p>
<div id="cb57"><pre><code><span id="cb57-1"><span>struct</span> timeval <span>{</span></span>
<span id="cb57-2">    <span>int</span> tv_sec<span>;</span>     <span>// seconds</span></span>
<span id="cb57-3">    <span>int</span> tv_usec<span>;</span>    <span>// microseconds</span></span>
<span id="cb57-4"><span>};</span> </span></code></pre></div>
<p>Just set <code>tv_sec</code> to the number of seconds to wait, and set <code>tv_usec</code> to the number of microseconds to wait. Yes, that’s _micro_seconds, not milliseconds. There are 1,000 microseconds in a millisecond, and 1,000 milliseconds in a second. Thus, there are 1,000,000 microseconds in a second. Why is it “usec”? The “u” is supposed to look like the Greek letter μ (Mu) that we use for “micro”. Also, when the function returns, <code>timeout</code> <em>might</em> be updated to show the time still remaining. This depends on what flavor of Unix you’re running.</p>
<p>Yay! We have a microsecond resolution timer! Well, don’t count on it. You’ll probably have to wait some part of your standard Unix timeslice no matter how small you set your <code>struct timeval</code>.</p>
<p>Other things of interest: If you set the fields in your <code>struct timeval</code> to <code>0</code>, <code>select()</code> will timeout immediately, effectively polling all the file descriptors in your sets. If you set the parameter <code>timeout</code> to NULL, it will never timeout, and will wait until the first file descriptor is ready. Finally, if you don’t care about waiting for a certain set, you can just set it to NULL in the call to <code>select()</code>.</p>
<p><a href="https://beej.us/guide/bgnet/examples/select.c">The following code snippet</a><a href="#fn31" id="fnref31" role="doc-noteref"><sup>31</sup></a> waits 2.5 seconds for something to appear on standard input:</p>
<div id="cb58"><pre><code><span id="cb58-1"><a href="#cb58-1"></a><span>/*</span></span>
<span id="cb58-2"><a href="#cb58-2"></a><span>** select.c -- a select() demo</span></span>
<span id="cb58-3"><a href="#cb58-3"></a><span>*/</span></span>
<span id="cb58-4"><a href="#cb58-4"></a></span>
<span id="cb58-5"><a href="#cb58-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb58-6"><a href="#cb58-6"></a><span>#include </span><span>&lt;sys/time.h&gt;</span></span>
<span id="cb58-7"><a href="#cb58-7"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb58-8"><a href="#cb58-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb58-9"><a href="#cb58-9"></a></span>
<span id="cb58-10"><a href="#cb58-10"></a><span>#define STDIN </span><span>0</span><span>  </span><span>// file descriptor for standard input</span></span>
<span id="cb58-11"><a href="#cb58-11"></a></span>
<span id="cb58-12"><a href="#cb58-12"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb58-13"><a href="#cb58-13"></a><span>{</span></span>
<span id="cb58-14"><a href="#cb58-14"></a>    <span>struct</span> timeval tv<span>;</span></span>
<span id="cb58-15"><a href="#cb58-15"></a>    fd_set readfds<span>;</span></span>
<span id="cb58-16"><a href="#cb58-16"></a></span>
<span id="cb58-17"><a href="#cb58-17"></a>    tv<span>.</span>tv_sec <span>=</span> <span>2</span><span>;</span></span>
<span id="cb58-18"><a href="#cb58-18"></a>    tv<span>.</span>tv_usec <span>=</span> <span>500000</span><span>;</span></span>
<span id="cb58-19"><a href="#cb58-19"></a></span>
<span id="cb58-20"><a href="#cb58-20"></a>    FD_ZERO<span>(&amp;</span>readfds<span>);</span></span>
<span id="cb58-21"><a href="#cb58-21"></a>    FD_SET<span>(</span>STDIN<span>,</span> <span>&amp;</span>readfds<span>);</span></span>
<span id="cb58-22"><a href="#cb58-22"></a></span>
<span id="cb58-23"><a href="#cb58-23"></a>    <span>// don't care about writefds and exceptfds:</span></span>
<span id="cb58-24"><a href="#cb58-24"></a>    select<span>(</span>STDIN<span>+</span><span>1</span><span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>,</span> <span>&amp;</span>tv<span>);</span></span>
<span id="cb58-25"><a href="#cb58-25"></a></span>
<span id="cb58-26"><a href="#cb58-26"></a>    <span>if</span> <span>(</span>FD_ISSET<span>(</span>STDIN<span>,</span> <span>&amp;</span>readfds<span>))</span></span>
<span id="cb58-27"><a href="#cb58-27"></a>        printf<span>(</span><span>"A key was pressed!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb58-28"><a href="#cb58-28"></a>    <span>else</span></span>
<span id="cb58-29"><a href="#cb58-29"></a>        printf<span>(</span><span>"Timed out.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb58-30"><a href="#cb58-30"></a></span>
<span id="cb58-31"><a href="#cb58-31"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb58-32"><a href="#cb58-32"></a><span>}</span> </span></code></pre></div>
<p>If you’re on a line buffered terminal, the key you hit should be RETURN or it will time out anyway.</p>
<p>Now, some of you might think this is a great way to wait for data on a datagram socket—and you are right: it <em>might</em> be. Some Unices can use select in this manner, and some can’t. You should see what your local man page says on the matter if you want to attempt it.</p>
<p>Some Unices update the time in your <code>struct timeval</code> to reflect the amount of time still remaining before a timeout. But others do not. Don’t rely on that occurring if you want to be portable. (Use <code>gettimeofday()</code> if you need to track time elapsed. It’s a bummer, I know, but that’s the way it is.)</p>

<p>What happens if a socket in the read set closes the connection? Well, in that case, <code>select()</code> returns with that socket descriptor set as “ready to read”. When you actually do <code>recv()</code> from it, <code>recv()</code> will return <code>0</code>. That’s how you know the client has closed the connection.</p>
<p>One more note of interest about <code>select()</code>: if you have a socket that is <code>listen()</code>ing, you can check to see if there is a new connection by putting that socket’s file descriptor in the <code>readfds</code> set.</p>
<p>And that, my friends, is a quick overview of the almighty <code>select()</code> function.</p>
<p>But, by popular demand, here is an in-depth example. Unfortunately, the difference between the dirt-simple example, above, and this one here is significant. But have a look, then read the description that follows it.</p>
<p><a href="https://beej.us/guide/bgnet/examples/selectserver.c">This program</a><a href="#fn32" id="fnref32" role="doc-noteref"><sup>32</sup></a> acts like a simple multi-user chat server. Start it running in one window, then <code>telnet</code> to it (“<code>telnet hostname 9034</code>”) from multiple other windows. When you type something in one <code>telnet</code> session, it should appear in all the others.</p>
<div id="cb59"><pre><code><span id="cb59-1"><a href="#cb59-1"></a><span>/*</span></span>
<span id="cb59-2"><a href="#cb59-2"></a><span>** selectserver.c -- a cheezy multiperson chat server</span></span>
<span id="cb59-3"><a href="#cb59-3"></a><span>*/</span></span>
<span id="cb59-4"><a href="#cb59-4"></a></span>
<span id="cb59-5"><a href="#cb59-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb59-6"><a href="#cb59-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb59-7"><a href="#cb59-7"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb59-8"><a href="#cb59-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb59-9"><a href="#cb59-9"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb59-10"><a href="#cb59-10"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb59-11"><a href="#cb59-11"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb59-12"><a href="#cb59-12"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb59-13"><a href="#cb59-13"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb59-14"><a href="#cb59-14"></a></span>
<span id="cb59-15"><a href="#cb59-15"></a><span>#define PORT </span><span>"9034"</span><span>   </span><span>// port we're listening on</span></span>
<span id="cb59-16"><a href="#cb59-16"></a></span>
<span id="cb59-17"><a href="#cb59-17"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb59-18"><a href="#cb59-18"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb59-19"><a href="#cb59-19"></a><span>{</span></span>
<span id="cb59-20"><a href="#cb59-20"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb59-21"><a href="#cb59-21"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb59-22"><a href="#cb59-22"></a>    <span>}</span></span>
<span id="cb59-23"><a href="#cb59-23"></a></span>
<span id="cb59-24"><a href="#cb59-24"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb59-25"><a href="#cb59-25"></a><span>}</span></span>
<span id="cb59-26"><a href="#cb59-26"></a></span>
<span id="cb59-27"><a href="#cb59-27"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb59-28"><a href="#cb59-28"></a><span>{</span></span>
<span id="cb59-29"><a href="#cb59-29"></a>    fd_set master<span>;</span>    <span>// master file descriptor list</span></span>
<span id="cb59-30"><a href="#cb59-30"></a>    fd_set read_fds<span>;</span>  <span>// temp file descriptor list for select()</span></span>
<span id="cb59-31"><a href="#cb59-31"></a>    <span>int</span> fdmax<span>;</span>        <span>// maximum file descriptor number</span></span>
<span id="cb59-32"><a href="#cb59-32"></a></span>
<span id="cb59-33"><a href="#cb59-33"></a>    <span>int</span> listener<span>;</span>     <span>// listening socket descriptor</span></span>
<span id="cb59-34"><a href="#cb59-34"></a>    <span>int</span> newfd<span>;</span>        <span>// newly accept()ed socket descriptor</span></span>
<span id="cb59-35"><a href="#cb59-35"></a>    <span>struct</span> sockaddr_storage remoteaddr<span>;</span> <span>// client address</span></span>
<span id="cb59-36"><a href="#cb59-36"></a>    socklen_t addrlen<span>;</span></span>
<span id="cb59-37"><a href="#cb59-37"></a></span>
<span id="cb59-38"><a href="#cb59-38"></a>    <span>char</span> buf<span>[</span><span>256</span><span>];</span>    <span>// buffer for client data</span></span>
<span id="cb59-39"><a href="#cb59-39"></a>    <span>int</span> nbytes<span>;</span></span>
<span id="cb59-40"><a href="#cb59-40"></a></span>
<span id="cb59-41"><a href="#cb59-41"></a>    <span>char</span> remoteIP<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb59-42"><a href="#cb59-42"></a></span>
<span id="cb59-43"><a href="#cb59-43"></a>    <span>int</span> yes<span>=</span><span>1</span><span>;</span>        <span>// for setsockopt() SO_REUSEADDR, below</span></span>
<span id="cb59-44"><a href="#cb59-44"></a>    <span>int</span> i<span>,</span> j<span>,</span> rv<span>;</span></span>
<span id="cb59-45"><a href="#cb59-45"></a></span>
<span id="cb59-46"><a href="#cb59-46"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>ai<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb59-47"><a href="#cb59-47"></a></span>
<span id="cb59-48"><a href="#cb59-48"></a>    FD_ZERO<span>(&amp;</span>master<span>);</span>    <span>// clear the master and temp sets</span></span>
<span id="cb59-49"><a href="#cb59-49"></a>    FD_ZERO<span>(&amp;</span>read_fds<span>);</span></span>
<span id="cb59-50"><a href="#cb59-50"></a></span>
<span id="cb59-51"><a href="#cb59-51"></a>    <span>// get us a socket and bind it</span></span>
<span id="cb59-52"><a href="#cb59-52"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb59-53"><a href="#cb59-53"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb59-54"><a href="#cb59-54"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb59-55"><a href="#cb59-55"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span></span>
<span id="cb59-56"><a href="#cb59-56"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>ai<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-57"><a href="#cb59-57"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"selectserver: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb59-58"><a href="#cb59-58"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-59"><a href="#cb59-59"></a>    <span>}</span></span>
<span id="cb59-60"><a href="#cb59-60"></a>    </span>
<span id="cb59-61"><a href="#cb59-61"></a>    <span>for</span><span>(</span>p <span>=</span> ai<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb59-62"><a href="#cb59-62"></a>        listener <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span> p<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb59-63"><a href="#cb59-63"></a>        <span>if</span> <span>(</span>listener <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> </span>
<span id="cb59-64"><a href="#cb59-64"></a>            <span>continue</span><span>;</span></span>
<span id="cb59-65"><a href="#cb59-65"></a>        <span>}</span></span>
<span id="cb59-66"><a href="#cb59-66"></a>        </span>
<span id="cb59-67"><a href="#cb59-67"></a>        <span>// lose the pesky "address already in use" error message</span></span>
<span id="cb59-68"><a href="#cb59-68"></a>        setsockopt<span>(</span>listener<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>yes<span>,</span> <span>sizeof</span><span>(</span><span>int</span><span>));</span></span>
<span id="cb59-69"><a href="#cb59-69"></a></span>
<span id="cb59-70"><a href="#cb59-70"></a>        <span>if</span> <span>(</span>bind<span>(</span>listener<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-71"><a href="#cb59-71"></a>            close<span>(</span>listener<span>);</span></span>
<span id="cb59-72"><a href="#cb59-72"></a>            <span>continue</span><span>;</span></span>
<span id="cb59-73"><a href="#cb59-73"></a>        <span>}</span></span>
<span id="cb59-74"><a href="#cb59-74"></a></span>
<span id="cb59-75"><a href="#cb59-75"></a>        <span>break</span><span>;</span></span>
<span id="cb59-76"><a href="#cb59-76"></a>    <span>}</span></span>
<span id="cb59-77"><a href="#cb59-77"></a></span>
<span id="cb59-78"><a href="#cb59-78"></a>    <span>// if we got here, it means we didn't get bound</span></span>
<span id="cb59-79"><a href="#cb59-79"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb59-80"><a href="#cb59-80"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"selectserver: failed to bind</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb59-81"><a href="#cb59-81"></a>        exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb59-82"><a href="#cb59-82"></a>    <span>}</span></span>
<span id="cb59-83"><a href="#cb59-83"></a></span>
<span id="cb59-84"><a href="#cb59-84"></a>    freeaddrinfo<span>(</span>ai<span>);</span> <span>// all done with this</span></span>
<span id="cb59-85"><a href="#cb59-85"></a></span>
<span id="cb59-86"><a href="#cb59-86"></a>    <span>// listen</span></span>
<span id="cb59-87"><a href="#cb59-87"></a>    <span>if</span> <span>(</span>listen<span>(</span>listener<span>,</span> <span>10</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-88"><a href="#cb59-88"></a>        perror<span>(</span><span>"listen"</span><span>);</span></span>
<span id="cb59-89"><a href="#cb59-89"></a>        exit<span>(</span><span>3</span><span>);</span></span>
<span id="cb59-90"><a href="#cb59-90"></a>    <span>}</span></span>
<span id="cb59-91"><a href="#cb59-91"></a></span>
<span id="cb59-92"><a href="#cb59-92"></a>    <span>// add the listener to the master set</span></span>
<span id="cb59-93"><a href="#cb59-93"></a>    FD_SET<span>(</span>listener<span>,</span> <span>&amp;</span>master<span>);</span></span>
<span id="cb59-94"><a href="#cb59-94"></a></span>
<span id="cb59-95"><a href="#cb59-95"></a>    <span>// keep track of the biggest file descriptor</span></span>
<span id="cb59-96"><a href="#cb59-96"></a>    fdmax <span>=</span> listener<span>;</span> <span>// so far, it's this one</span></span>
<span id="cb59-97"><a href="#cb59-97"></a></span>
<span id="cb59-98"><a href="#cb59-98"></a>    <span>// main loop</span></span>
<span id="cb59-99"><a href="#cb59-99"></a>    <span>for</span><span>(;;)</span> <span>{</span></span>
<span id="cb59-100"><a href="#cb59-100"></a>        read_fds <span>=</span> master<span>;</span> <span>// copy it</span></span>
<span id="cb59-101"><a href="#cb59-101"></a>        <span>if</span> <span>(</span>select<span>(</span>fdmax<span>+</span><span>1</span><span>,</span> <span>&amp;</span>read_fds<span>,</span> NULL<span>,</span> NULL<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-102"><a href="#cb59-102"></a>            perror<span>(</span><span>"select"</span><span>);</span></span>
<span id="cb59-103"><a href="#cb59-103"></a>            exit<span>(</span><span>4</span><span>);</span></span>
<span id="cb59-104"><a href="#cb59-104"></a>        <span>}</span></span>
<span id="cb59-105"><a href="#cb59-105"></a></span>
<span id="cb59-106"><a href="#cb59-106"></a>        <span>// run through the existing connections looking for data to read</span></span>
<span id="cb59-107"><a href="#cb59-107"></a>        <span>for</span><span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> fdmax<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb59-108"><a href="#cb59-108"></a>            <span>if</span> <span>(</span>FD_ISSET<span>(</span>i<span>,</span> <span>&amp;</span>read_fds<span>))</span> <span>{</span> <span>// we got one!!</span></span>
<span id="cb59-109"><a href="#cb59-109"></a>                <span>if</span> <span>(</span>i <span>==</span> listener<span>)</span> <span>{</span></span>
<span id="cb59-110"><a href="#cb59-110"></a>                    <span>// handle new connections</span></span>
<span id="cb59-111"><a href="#cb59-111"></a>                    addrlen <span>=</span> <span>sizeof</span> remoteaddr<span>;</span></span>
<span id="cb59-112"><a href="#cb59-112"></a>                    newfd <span>=</span> accept<span>(</span>listener<span>,</span></span>
<span id="cb59-113"><a href="#cb59-113"></a>                        <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>remoteaddr<span>,</span></span>
<span id="cb59-114"><a href="#cb59-114"></a>                        <span>&amp;</span>addrlen<span>);</span></span>
<span id="cb59-115"><a href="#cb59-115"></a></span>
<span id="cb59-116"><a href="#cb59-116"></a>                    <span>if</span> <span>(</span>newfd <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-117"><a href="#cb59-117"></a>                        perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb59-118"><a href="#cb59-118"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-119"><a href="#cb59-119"></a>                        FD_SET<span>(</span>newfd<span>,</span> <span>&amp;</span>master<span>);</span> <span>// add to master set</span></span>
<span id="cb59-120"><a href="#cb59-120"></a>                        <span>if</span> <span>(</span>newfd <span>&gt;</span> fdmax<span>)</span> <span>{</span>    <span>// keep track of the max</span></span>
<span id="cb59-121"><a href="#cb59-121"></a>                            fdmax <span>=</span> newfd<span>;</span></span>
<span id="cb59-122"><a href="#cb59-122"></a>                        <span>}</span></span>
<span id="cb59-123"><a href="#cb59-123"></a>                        printf<span>(</span><span>"selectserver: new connection from </span><span>%s</span><span> on "</span></span>
<span id="cb59-124"><a href="#cb59-124"></a>                            <span>"socket </span><span>%d\n</span><span>"</span><span>,</span></span>
<span id="cb59-125"><a href="#cb59-125"></a>                            inet_ntop<span>(</span>remoteaddr<span>.</span>ss_family<span>,</span></span>
<span id="cb59-126"><a href="#cb59-126"></a>                                get_in_addr<span>((</span><span>struct</span> sockaddr<span>*)&amp;</span>remoteaddr<span>),</span></span>
<span id="cb59-127"><a href="#cb59-127"></a>                                remoteIP<span>,</span> INET6_ADDRSTRLEN<span>),</span></span>
<span id="cb59-128"><a href="#cb59-128"></a>                            newfd<span>);</span></span>
<span id="cb59-129"><a href="#cb59-129"></a>                    <span>}</span></span>
<span id="cb59-130"><a href="#cb59-130"></a>                <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-131"><a href="#cb59-131"></a>                    <span>// handle data from a client</span></span>
<span id="cb59-132"><a href="#cb59-132"></a>                    <span>if</span> <span>((</span>nbytes <span>=</span> recv<span>(</span>i<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>))</span> <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-133"><a href="#cb59-133"></a>                        <span>// got error or connection closed by client</span></span>
<span id="cb59-134"><a href="#cb59-134"></a>                        <span>if</span> <span>(</span>nbytes <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-135"><a href="#cb59-135"></a>                            <span>// connection closed</span></span>
<span id="cb59-136"><a href="#cb59-136"></a>                            printf<span>(</span><span>"selectserver: socket </span><span>%d</span><span> hung up</span><span>\n</span><span>"</span><span>,</span> i<span>);</span></span>
<span id="cb59-137"><a href="#cb59-137"></a>                        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-138"><a href="#cb59-138"></a>                            perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb59-139"><a href="#cb59-139"></a>                        <span>}</span></span>
<span id="cb59-140"><a href="#cb59-140"></a>                        close<span>(</span>i<span>);</span> <span>// bye!</span></span>
<span id="cb59-141"><a href="#cb59-141"></a>                        FD_CLR<span>(</span>i<span>,</span> <span>&amp;</span>master<span>);</span> <span>// remove from master set</span></span>
<span id="cb59-142"><a href="#cb59-142"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-143"><a href="#cb59-143"></a>                        <span>// we got some data from a client</span></span>
<span id="cb59-144"><a href="#cb59-144"></a>                        <span>for</span><span>(</span>j <span>=</span> <span>0</span><span>;</span> j <span>&lt;=</span> fdmax<span>;</span> j<span>++)</span> <span>{</span></span>
<span id="cb59-145"><a href="#cb59-145"></a>                            <span>// send to everyone!</span></span>
<span id="cb59-146"><a href="#cb59-146"></a>                            <span>if</span> <span>(</span>FD_ISSET<span>(</span>j<span>,</span> <span>&amp;</span>master<span>))</span> <span>{</span></span>
<span id="cb59-147"><a href="#cb59-147"></a>                                <span>// except the listener and ourselves</span></span>
<span id="cb59-148"><a href="#cb59-148"></a>                                <span>if</span> <span>(</span>j <span>!=</span> listener <span>&amp;&amp;</span> j <span>!=</span> i<span>)</span> <span>{</span></span>
<span id="cb59-149"><a href="#cb59-149"></a>                                    <span>if</span> <span>(</span>send<span>(</span>j<span>,</span> buf<span>,</span> nbytes<span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-150"><a href="#cb59-150"></a>                                        perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb59-151"><a href="#cb59-151"></a>                                    <span>}</span></span>
<span id="cb59-152"><a href="#cb59-152"></a>                                <span>}</span></span>
<span id="cb59-153"><a href="#cb59-153"></a>                            <span>}</span></span>
<span id="cb59-154"><a href="#cb59-154"></a>                        <span>}</span></span>
<span id="cb59-155"><a href="#cb59-155"></a>                    <span>}</span></span>
<span id="cb59-156"><a href="#cb59-156"></a>                <span>}</span> <span>// </span><span>END</span><span> handle data from client</span></span>
<span id="cb59-157"><a href="#cb59-157"></a>            <span>}</span> <span>// </span><span>END</span><span> got new incoming connection</span></span>
<span id="cb59-158"><a href="#cb59-158"></a>        <span>}</span> <span>// </span><span>END</span><span> looping through file descriptors</span></span>
<span id="cb59-159"><a href="#cb59-159"></a>    <span>}</span> <span>// </span><span>END</span><span> for(;;)--and you thought it would never end!</span></span>
<span id="cb59-160"><a href="#cb59-160"></a>    </span>
<span id="cb59-161"><a href="#cb59-161"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb59-162"><a href="#cb59-162"></a><span>}</span></span></code></pre></div>
<p>Notice I have two file descriptor sets in the code: <code>master</code> and <code>read_fds</code>. The first, <code>master</code>, holds all the socket descriptors that are currently connected, as well as the socket descriptor that is listening for new connections.</p>
<p>The reason I have the <code>master</code> set is that <code>select()</code> actually <em>changes</em> the set you pass into it to reflect which sockets are ready to read. Since I have to keep track of the connections from one call of <code>select()</code> to the next, I must store these safely away somewhere. At the last minute, I copy the <code>master</code> into the <code>read_fds</code>, and then call <code>select()</code>.</p>
<p>But doesn’t this mean that every time I get a new connection, I have to add it to the <code>master</code> set? Yup! And every time a connection closes, I have to remove it from the <code>master</code> set? Yes, it does.</p>
<p>Notice I check to see when the <code>listener</code> socket is ready to read. When it is, it means I have a new connection pending, and I <code>accept()</code> it and add it to the <code>master</code> set. Similarly, when a client connection is ready to read, and <code>recv()</code> returns <code>0</code>, I know the client has closed the connection, and I must remove it from the <code>master</code> set.</p>
<p>If the client <code>recv()</code> returns non-zero, though, I know some data has been received. So I get it, and then go through the <code>master</code> list and send that data to all the rest of the connected clients.</p>
<p>And that, my friends, is a less-than-simple overview of the almighty <code>select()</code> function.</p>
<p>Quick note to all you Linux fans out there: sometimes, in rare circumstances, Linux’s <code>select()</code> can return “ready-to-read” and then not actually be ready to read! This means it will block on the <code>read()</code> after the <code>select()</code> says it won’t! Why you little—! Anyway, the workaround solution is to set the <code>O_NONBLOCK</code> flag on the receiving socket so it errors with <code>EWOULDBLOCK</code> (which you can just safely ignore if it occurs). See the <a href="#fcntlman"><code>fcntl()</code> reference page</a> for more info on setting a socket to non-blocking.</p>
<p>In addition, here is a bonus afterthought: there is another function called <code>poll()</code> which behaves much the same way <code>select()</code> does, but with a different system for managing the file descriptor sets. <a href="#pollman">Check it out!</a></p>

<h2 data-number="7.4" id="sendall"> Handling Partial <code>send()</code>s</h2>
<p>Remember back in the <a href="#sendrecv">section about <code>send()</code></a>, above, when I said that <code>send()</code> might not send all the bytes you asked it to? That is, you want it to send 512 bytes, but it returns 412. What happened to the remaining 100 bytes?</p>
<p>Well, they’re still in your little buffer waiting to be sent out. Due to circumstances beyond your control, the kernel decided not to send all the data out in one chunk, and now, my friend, it’s up to you to get the data out there.</p>
<p> You could write a function like this to do it, too:</p>
<div id="cb60"><pre><code><span id="cb60-1"><a href="#cb60-1"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb60-2"><a href="#cb60-2"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb60-3"><a href="#cb60-3"></a></span>
<span id="cb60-4"><a href="#cb60-4"></a><span>int</span> sendall<span>(</span><span>int</span> s<span>,</span> <span>char</span> <span>*</span>buf<span>,</span> <span>int</span> <span>*</span>len<span>)</span></span>
<span id="cb60-5"><a href="#cb60-5"></a><span>{</span></span>
<span id="cb60-6"><a href="#cb60-6"></a>    <span>int</span> total <span>=</span> <span>0</span><span>;</span>        <span>// how many bytes we've sent</span></span>
<span id="cb60-7"><a href="#cb60-7"></a>    <span>int</span> bytesleft <span>=</span> <span>*</span>len<span>;</span> <span>// how many we have left to send</span></span>
<span id="cb60-8"><a href="#cb60-8"></a>    <span>int</span> n<span>;</span></span>
<span id="cb60-9"><a href="#cb60-9"></a></span>
<span id="cb60-10"><a href="#cb60-10"></a>    <span>while</span><span>(</span>total <span>&lt;</span> <span>*</span>len<span>)</span> <span>{</span></span>
<span id="cb60-11"><a href="#cb60-11"></a>        n <span>=</span> send<span>(</span>s<span>,</span> buf<span>+</span>total<span>,</span> bytesleft<span>,</span> <span>0</span><span>);</span></span>
<span id="cb60-12"><a href="#cb60-12"></a>        <span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span> <span>break</span><span>;</span> <span>}</span></span>
<span id="cb60-13"><a href="#cb60-13"></a>        total <span>+=</span> n<span>;</span></span>
<span id="cb60-14"><a href="#cb60-14"></a>        bytesleft <span>-=</span> n<span>;</span></span>
<span id="cb60-15"><a href="#cb60-15"></a>    <span>}</span></span>
<span id="cb60-16"><a href="#cb60-16"></a></span>
<span id="cb60-17"><a href="#cb60-17"></a>    <span>*</span>len <span>=</span> total<span>;</span> <span>// return number actually sent here</span></span>
<span id="cb60-18"><a href="#cb60-18"></a></span>
<span id="cb60-19"><a href="#cb60-19"></a>    <span>return</span> n<span>==-</span><span>1</span><span>?-</span><span>1</span><span>:</span><span>0</span><span>;</span> <span>// return -1 on failure, 0 on success</span></span>
<span id="cb60-20"><a href="#cb60-20"></a><span>}</span> </span></code></pre></div>
<p>In this example, <code>s</code> is the socket you want to send the data to, <code>buf</code> is the buffer containing the data, and <code>len</code> is a pointer to an <code>int</code> containing the number of bytes in the buffer.</p>
<p>The function returns <code>-1</code> on error (and <code>errno</code> is still set from the call to <code>send()</code>). Also, the number of bytes actually sent is returned in <code>len</code>. This will be the same number of bytes you asked it to send, unless there was an error. <code>sendall()</code> will do it’s best, huffing and puffing, to send the data out, but if there’s an error, it gets back to you right away.</p>
<p>For completeness, here’s a sample call to the function:</p>
<div id="cb61"><pre><code><span id="cb61-1"><a href="#cb61-1"></a><span>char</span> buf<span>[</span><span>10</span><span>]</span> <span>=</span> <span>"Beej!"</span><span>;</span></span>
<span id="cb61-2"><a href="#cb61-2"></a><span>int</span> len<span>;</span></span>
<span id="cb61-3"><a href="#cb61-3"></a></span>
<span id="cb61-4"><a href="#cb61-4"></a>len <span>=</span> strlen<span>(</span>buf<span>);</span></span>
<span id="cb61-5"><a href="#cb61-5"></a><span>if</span> <span>(</span>sendall<span>(</span>s<span>,</span> buf<span>,</span> <span>&amp;</span>len<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb61-6"><a href="#cb61-6"></a>    perror<span>(</span><span>"sendall"</span><span>);</span></span>
<span id="cb61-7"><a href="#cb61-7"></a>    printf<span>(</span><span>"We only sent </span><span>%d</span><span> bytes because of the error!</span><span>\n</span><span>"</span><span>,</span> len<span>);</span></span>
<span id="cb61-8"><a href="#cb61-8"></a><span>}</span> </span></code></pre></div>

<p>What happens on the receiver’s end when part of a packet arrives? If the packets are variable length, how does the receiver know when one packet ends and another begins? Yes, real-world scenarios are a royal pain in the donkeys. You probably have to <em>encapsulate</em> (remember that from the <a href="#lowlevel">data encapsulation section</a> way back there at the beginning?) Read on for details!</p>
<h2 data-number="7.5" id="serialization"> Serialization—How to Pack Data</h2>

<p>It’s easy enough to send text data across the network, you’re finding, but what happens if you want to send some “binary” data like <code>int</code>s or <code>float</code>s? It turns out you have a few options.</p>
<ol type="1">
<li><p>Convert the number into text with a function like <code>sprintf()</code>, then send the text. The receiver will parse the text back into a number using a function like <code>strtol()</code>.</p></li>
<li><p>Just send the data raw, passing a pointer to the data to <code>send()</code>.</p></li>
<li><p>Encode the number into a portable binary form. The receiver will decode it.</p></li>
</ol>
<p>Sneak preview! Tonight only!</p>
<p>[<em>Curtain raises</em>]</p>
<p>Beej says, “I prefer Method Three, above!”</p>
<p>[<em>THE END</em>]</p>
<p>(Before I begin this section in earnest, I should tell you that there are libraries out there for doing this, and rolling your own and remaining portable and error-free is quite a challenge. So hunt around and do your homework before deciding to implement this stuff yourself. I include the information here for those curious about how things like this work.)</p>
<p>Actually all the methods, above, have their drawbacks and advantages, but, like I said, in general, I prefer the third method. First, though, let’s talk about some of the drawbacks and advantages to the other two.</p>
<p>The first method, encoding the numbers as text before sending, has the advantage that you can easily print and read the data that’s coming over the wire. Sometimes a human-readable protocol is excellent to use in a non-bandwidth-intensive situation, such as with <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">Internet Relay Chat (IRC)</a><a href="#fn33" id="fnref33" role="doc-noteref"><sup>33</sup></a>. However, it has the disadvantage that it is slow to convert, and the results almost always take up more space than the original number!</p>
<p>Method two: passing the raw data. This one is quite easy (but dangerous!): just take a pointer to the data to send, and call send with it.</p>
<div id="cb62"><pre><code><span id="cb62-1"><span>double</span> d <span>=</span> <span>3490.15926535</span><span>;</span></span>
<span id="cb62-2"></span>
<span id="cb62-3">send<span>(</span>s<span>,</span> <span>&amp;</span>d<span>,</span> <span>sizeof</span> d<span>,</span> <span>0</span><span>);</span>  <span>/* </span><span>DANGER</span><span>--non-portable! */</span></span></code></pre></div>
<p>The receiver gets it like this:</p>
<div id="cb63"><pre><code><span id="cb63-1"><span>double</span> d<span>;</span></span>
<span id="cb63-2"></span>
<span id="cb63-3">recv<span>(</span>s<span>,</span> <span>&amp;</span>d<span>,</span> <span>sizeof</span> d<span>,</span> <span>0</span><span>);</span>  <span>/* </span><span>DANGER</span><span>--non-portable! */</span></span></code></pre></div>
<p>Fast, simple—what’s not to like? Well, it turns out that not all architectures represent a <code>double</code> (or <code>int</code> for that matter) with the same bit representation or even the same byte ordering! The code is decidedly non-portable. (Hey—maybe you don’t need portability, in which case this is nice and fast.)</p>
<p>When packing integer types, we’ve already seen how the <code>htons()</code>-class of functions can help keep things portable by transforming the numbers into Network Byte Order, and how that’s the Right Thing to do. Unfortunately, there are no similar functions for <code>float</code> types. Is all hope lost?</p>
<p>Fear not! (Were you afraid there for a second? No? Not even a little bit?) There is something we can do: we can pack (or “marshal”, or “serialize”, or one of a thousand million other names) the data into a known binary format that the receiver can unpack on the remote side.</p>
<p>What do I mean by “known binary format”? Well, we’ve already seen the <code>htons()</code> example, right? It changes (or “encodes”, if you want to think of it that way) a number from whatever the host format is into Network Byte Order. To reverse (unencode) the number, the receiver calls <code>ntohs()</code>.</p>
<p>But didn’t I just get finished saying there wasn’t any such function for other non-integer types? Yes. I did. And since there’s no standard way in C to do this, it’s a bit of a pickle (that a gratuitous pun there for you Python fans).</p>
<p>The thing to do is to pack the data into a known format and send that over the wire for decoding. For example, to pack <code>float</code>s, here’s <a href="https://beej.us/guide/bgnet/examples/pack.c">something quick and dirty with plenty of room for improvement</a><a href="#fn34" id="fnref34" role="doc-noteref"><sup>34</sup></a>:</p>
<div id="cb64"><pre><code><span id="cb64-1"><a href="#cb64-1"></a><span>#include </span><span>&lt;stdint.h&gt;</span></span>
<span id="cb64-2"><a href="#cb64-2"></a></span>
<span id="cb64-3"><a href="#cb64-3"></a><span>uint32_t</span> htonf<span>(</span><span>float</span> f<span>)</span></span>
<span id="cb64-4"><a href="#cb64-4"></a><span>{</span></span>
<span id="cb64-5"><a href="#cb64-5"></a>    <span>uint32_t</span> p<span>;</span></span>
<span id="cb64-6"><a href="#cb64-6"></a>    <span>uint32_t</span> sign<span>;</span></span>
<span id="cb64-7"><a href="#cb64-7"></a></span>
<span id="cb64-8"><a href="#cb64-8"></a>    <span>if</span> <span>(</span>f <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> sign <span>=</span> <span>1</span><span>;</span> f <span>=</span> <span>-</span>f<span>;</span> <span>}</span></span>
<span id="cb64-9"><a href="#cb64-9"></a>    <span>else</span> <span>{</span> sign <span>=</span> <span>0</span><span>;</span> <span>}</span></span>
<span id="cb64-10"><a href="#cb64-10"></a>        </span>
<span id="cb64-11"><a href="#cb64-11"></a>    p <span>=</span> <span>((((</span><span>uint32_t</span><span>)</span>f<span>)&amp;</span><span>0x7fff</span><span>)&lt;&lt;</span><span>16</span><span>)</span> <span>|</span> <span>(</span>sign<span>&lt;&lt;</span><span>31</span><span>);</span> <span>// whole part and sign</span></span>
<span id="cb64-12"><a href="#cb64-12"></a>    p <span>|=</span> <span>(</span><span>uint32_t</span><span>)(((</span>f <span>-</span> <span>(</span><span>int</span><span>)</span>f<span>)</span> <span>*</span> <span>65536.0</span><span>f</span><span>))&amp;</span><span>0xffff</span><span>;</span> <span>// fraction</span></span>
<span id="cb64-13"><a href="#cb64-13"></a></span>
<span id="cb64-14"><a href="#cb64-14"></a>    <span>return</span> p<span>;</span></span>
<span id="cb64-15"><a href="#cb64-15"></a><span>}</span></span>
<span id="cb64-16"><a href="#cb64-16"></a></span>
<span id="cb64-17"><a href="#cb64-17"></a><span>float</span> ntohf<span>(</span><span>uint32_t</span> p<span>)</span></span>
<span id="cb64-18"><a href="#cb64-18"></a><span>{</span></span>
<span id="cb64-19"><a href="#cb64-19"></a>    <span>float</span> f <span>=</span> <span>((</span>p<span>&gt;&gt;</span><span>16</span><span>)&amp;</span><span>0x7fff</span><span>);</span> <span>// whole part</span></span>
<span id="cb64-20"><a href="#cb64-20"></a>    f <span>+=</span> <span>(</span>p<span>&amp;</span><span>0xffff</span><span>)</span> <span>/</span> <span>65536.0</span><span>f</span><span>;</span> <span>// fraction</span></span>
<span id="cb64-21"><a href="#cb64-21"></a></span>
<span id="cb64-22"><a href="#cb64-22"></a>    <span>if</span> <span>(((</span>p<span>&gt;&gt;</span><span>31</span><span>)&amp;</span><span>0x1</span><span>)</span> <span>==</span> <span>0x1</span><span>)</span> <span>{</span> f <span>=</span> <span>-</span>f<span>;</span> <span>}</span> <span>// sign bit set</span></span>
<span id="cb64-23"><a href="#cb64-23"></a></span>
<span id="cb64-24"><a href="#cb64-24"></a>    <span>return</span> f<span>;</span></span>
<span id="cb64-25"><a href="#cb64-25"></a><span>}</span></span></code></pre></div>
<p>The above code is sort of a naive implementation that stores a <code>float</code> in a 32-bit number. The high bit (31) is used to store the sign of the number (“1” means negative), and the next seven bits (30-16) are used to store the whole number portion of the <code>float</code>. Finally, the remaining bits (15-0) are used to store the fractional portion of the number.</p>
<p>Usage is fairly straightforward:</p>
<div id="cb65"><pre><code><span id="cb65-1"><a href="#cb65-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb65-2"><a href="#cb65-2"></a></span>
<span id="cb65-3"><a href="#cb65-3"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb65-4"><a href="#cb65-4"></a><span>{</span></span>
<span id="cb65-5"><a href="#cb65-5"></a>    <span>float</span> f <span>=</span> <span>3.1415926</span><span>,</span> f2<span>;</span></span>
<span id="cb65-6"><a href="#cb65-6"></a>    <span>uint32_t</span> netf<span>;</span></span>
<span id="cb65-7"><a href="#cb65-7"></a></span>
<span id="cb65-8"><a href="#cb65-8"></a>    netf <span>=</span> htonf<span>(</span>f<span>);</span>  <span>// convert to "network" form</span></span>
<span id="cb65-9"><a href="#cb65-9"></a>    f2 <span>=</span> ntohf<span>(</span>netf<span>);</span> <span>// convert back to test</span></span>
<span id="cb65-10"><a href="#cb65-10"></a></span>
<span id="cb65-11"><a href="#cb65-11"></a>    printf<span>(</span><span>"Original: </span><span>%f\n</span><span>"</span><span>,</span> f<span>);</span>        <span>// 3.141593</span></span>
<span id="cb65-12"><a href="#cb65-12"></a>    printf<span>(</span><span>" Network: 0x</span><span>%08X\n</span><span>"</span><span>,</span> netf<span>);</span> <span>// 0x0003243F</span></span>
<span id="cb65-13"><a href="#cb65-13"></a>    printf<span>(</span><span>"Unpacked: </span><span>%f\n</span><span>"</span><span>,</span> f2<span>);</span>       <span>// 3.141586</span></span>
<span id="cb65-14"><a href="#cb65-14"></a></span>
<span id="cb65-15"><a href="#cb65-15"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb65-16"><a href="#cb65-16"></a><span>}</span></span></code></pre></div>
<p>On the plus side, it’s small, simple, and fast. On the minus side, it’s not an efficient use of space and the range is severely restricted—try storing a number greater-than 32767 in there and it won’t be very happy! You can also see in the above example that the last couple decimal places are not correctly preserved.</p>
<p>What can we do instead? Well, <em>The</em> Standard for storing floating point numbers is known as <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE-754</a><a href="#fn35" id="fnref35" role="doc-noteref"><sup>35</sup></a>. Most computers use this format internally for doing floating point math, so in those cases, strictly speaking, conversion wouldn’t need to be done. But if you want your source code to be portable, that’s an assumption you can’t necessarily make. (On the other hand, if you want things to be fast, you should optimize this out on platforms that don’t need to do it! That’s what <code>htons()</code> and its ilk do.)</p>
<p><a href="https://beej.us/guide/bgnet/examples/ieee754.c">Here’s some code that encodes floats and doubles into IEEE-754 format</a><a href="#fn36" id="fnref36" role="doc-noteref"><sup>36</sup></a>. (Mostly—it doesn’t encode NaN or Infinity, but it could be modified to do that.)</p>
<div id="cb66"><pre><code><span id="cb66-1"><a href="#cb66-1"></a><span>#define pack754_32</span><span>(</span><span>f</span><span>)</span><span> </span><span>(</span><span>pack754</span><span>((</span><span>f</span><span>),</span><span> </span><span>32</span><span>,</span><span> </span><span>8</span><span>))</span></span>
<span id="cb66-2"><a href="#cb66-2"></a><span>#define pack754_64</span><span>(</span><span>f</span><span>)</span><span> </span><span>(</span><span>pack754</span><span>((</span><span>f</span><span>),</span><span> </span><span>64</span><span>,</span><span> </span><span>11</span><span>))</span></span>
<span id="cb66-3"><a href="#cb66-3"></a><span>#define unpack754_32</span><span>(</span><span>i</span><span>)</span><span> </span><span>(</span>unpack754<span>((</span><span>i</span><span>),</span><span> </span><span>32</span><span>,</span><span> </span><span>8</span><span>))</span></span>
<span id="cb66-4"><a href="#cb66-4"></a><span>#define unpack754_64</span><span>(</span><span>i</span><span>)</span><span> </span><span>(</span>unpack754<span>((</span><span>i</span><span>),</span><span> </span><span>64</span><span>,</span><span> </span><span>11</span><span>))</span></span>
<span id="cb66-5"><a href="#cb66-5"></a></span>
<span id="cb66-6"><a href="#cb66-6"></a><span>uint64_t</span> pack754<span>(</span><span>long</span> <span>double</span> f<span>,</span> <span>unsigned</span> bits<span>,</span> <span>unsigned</span> expbits<span>)</span></span>
<span id="cb66-7"><a href="#cb66-7"></a><span>{</span></span>
<span id="cb66-8"><a href="#cb66-8"></a>    <span>long</span> <span>double</span> fnorm<span>;</span></span>
<span id="cb66-9"><a href="#cb66-9"></a>    <span>int</span> shift<span>;</span></span>
<span id="cb66-10"><a href="#cb66-10"></a>    <span>long</span> <span>long</span> sign<span>,</span> exp<span>,</span> significand<span>;</span></span>
<span id="cb66-11"><a href="#cb66-11"></a>    <span>unsigned</span> significandbits <span>=</span> bits <span>-</span> expbits <span>-</span> <span>1</span><span>;</span> <span>// -1 for sign bit</span></span>
<span id="cb66-12"><a href="#cb66-12"></a></span>
<span id="cb66-13"><a href="#cb66-13"></a>    <span>if</span> <span>(</span>f <span>==</span> <span>0</span><span>.0</span><span>)</span> <span>return</span> <span>0</span><span>;</span> <span>// get this special case out of the way</span></span>
<span id="cb66-14"><a href="#cb66-14"></a></span>
<span id="cb66-15"><a href="#cb66-15"></a>    <span>// check sign and begin normalization</span></span>
<span id="cb66-16"><a href="#cb66-16"></a>    <span>if</span> <span>(</span>f <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> sign <span>=</span> <span>1</span><span>;</span> fnorm <span>=</span> <span>-</span>f<span>;</span> <span>}</span></span>
<span id="cb66-17"><a href="#cb66-17"></a>    <span>else</span> <span>{</span> sign <span>=</span> <span>0</span><span>;</span> fnorm <span>=</span> f<span>;</span> <span>}</span></span>
<span id="cb66-18"><a href="#cb66-18"></a></span>
<span id="cb66-19"><a href="#cb66-19"></a>    <span>// get the normalized form of f and track the exponent</span></span>
<span id="cb66-20"><a href="#cb66-20"></a>    shift <span>=</span> <span>0</span><span>;</span></span>
<span id="cb66-21"><a href="#cb66-21"></a>    <span>while</span><span>(</span>fnorm <span>&gt;=</span> <span>2.0</span><span>)</span> <span>{</span> fnorm <span>/=</span> <span>2.0</span><span>;</span> shift<span>++;</span> <span>}</span></span>
<span id="cb66-22"><a href="#cb66-22"></a>    <span>while</span><span>(</span>fnorm <span>&lt;</span> <span>1.0</span><span>)</span> <span>{</span> fnorm <span>*=</span> <span>2.0</span><span>;</span> shift<span>--;</span> <span>}</span></span>
<span id="cb66-23"><a href="#cb66-23"></a>    fnorm <span>=</span> fnorm <span>-</span> <span>1.0</span><span>;</span></span>
<span id="cb66-24"><a href="#cb66-24"></a></span>
<span id="cb66-25"><a href="#cb66-25"></a>    <span>// calculate the binary form (non-float) of the significand data</span></span>
<span id="cb66-26"><a href="#cb66-26"></a>    significand <span>=</span> fnorm <span>*</span> <span>((</span><span>1</span><span>LL</span><span>&lt;&lt;</span>significandbits<span>)</span> <span>+</span> <span>0</span><span>.5f</span><span>);</span></span>
<span id="cb66-27"><a href="#cb66-27"></a></span>
<span id="cb66-28"><a href="#cb66-28"></a>    <span>// get the biased exponent</span></span>
<span id="cb66-29"><a href="#cb66-29"></a>    exp <span>=</span> shift <span>+</span> <span>((</span><span>1</span><span>&lt;&lt;(</span>expbits<span>-</span><span>1</span><span>))</span> <span>-</span> <span>1</span><span>);</span> <span>// shift + bias</span></span>
<span id="cb66-30"><a href="#cb66-30"></a></span>
<span id="cb66-31"><a href="#cb66-31"></a>    <span>// return the final answer</span></span>
<span id="cb66-32"><a href="#cb66-32"></a>    <span>return</span> <span>(</span>sign<span>&lt;&lt;(</span>bits<span>-</span><span>1</span><span>))</span> <span>|</span> <span>(</span>exp<span>&lt;&lt;(</span>bits<span>-</span>expbits<span>-</span><span>1</span><span>))</span> <span>|</span> significand<span>;</span></span>
<span id="cb66-33"><a href="#cb66-33"></a><span>}</span></span>
<span id="cb66-34"><a href="#cb66-34"></a></span>
<span id="cb66-35"><a href="#cb66-35"></a><span>long</span> <span>double</span> unpack754<span>(</span><span>uint64_t</span> i<span>,</span> <span>unsigned</span> bits<span>,</span> <span>unsigned</span> expbits<span>)</span></span>
<span id="cb66-36"><a href="#cb66-36"></a><span>{</span></span>
<span id="cb66-37"><a href="#cb66-37"></a>    <span>long</span> <span>double</span> result<span>;</span></span>
<span id="cb66-38"><a href="#cb66-38"></a>    <span>long</span> <span>long</span> shift<span>;</span></span>
<span id="cb66-39"><a href="#cb66-39"></a>    <span>unsigned</span> bias<span>;</span></span>
<span id="cb66-40"><a href="#cb66-40"></a>    <span>unsigned</span> significandbits <span>=</span> bits <span>-</span> expbits <span>-</span> <span>1</span><span>;</span> <span>// -1 for sign bit</span></span>
<span id="cb66-41"><a href="#cb66-41"></a></span>
<span id="cb66-42"><a href="#cb66-42"></a>    <span>if</span> <span>(</span>i <span>==</span> <span>0</span><span>)</span> <span>return</span> <span>0</span><span>.0</span><span>;</span></span>
<span id="cb66-43"><a href="#cb66-43"></a></span>
<span id="cb66-44"><a href="#cb66-44"></a>    <span>// pull the significand</span></span>
<span id="cb66-45"><a href="#cb66-45"></a>    result <span>=</span> <span>(</span>i<span>&amp;((</span><span>1</span><span>LL</span><span>&lt;&lt;</span>significandbits<span>)-</span><span>1</span><span>));</span> <span>// mask</span></span>
<span id="cb66-46"><a href="#cb66-46"></a>    result <span>/=</span> <span>(</span><span>1</span><span>LL</span><span>&lt;&lt;</span>significandbits<span>);</span> <span>// convert back to float</span></span>
<span id="cb66-47"><a href="#cb66-47"></a>    result <span>+=</span> <span>1.0</span><span>f</span><span>;</span> <span>// add the one back on</span></span>
<span id="cb66-48"><a href="#cb66-48"></a></span>
<span id="cb66-49"><a href="#cb66-49"></a>    <span>// deal with the exponent</span></span>
<span id="cb66-50"><a href="#cb66-50"></a>    bias <span>=</span> <span>(</span><span>1</span><span>&lt;&lt;(</span>expbits<span>-</span><span>1</span><span>))</span> <span>-</span> <span>1</span><span>;</span></span>
<span id="cb66-51"><a href="#cb66-51"></a>    shift <span>=</span> <span>((</span>i<span>&gt;&gt;</span>significandbits<span>)&amp;((</span><span>1</span><span>LL</span><span>&lt;&lt;</span>expbits<span>)-</span><span>1</span><span>))</span> <span>-</span> bias<span>;</span></span>
<span id="cb66-52"><a href="#cb66-52"></a>    <span>while</span><span>(</span>shift <span>&gt;</span> <span>0</span><span>)</span> <span>{</span> result <span>*=</span> <span>2.0</span><span>;</span> shift<span>--;</span> <span>}</span></span>
<span id="cb66-53"><a href="#cb66-53"></a>    <span>while</span><span>(</span>shift <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> result <span>/=</span> <span>2.0</span><span>;</span> shift<span>++;</span> <span>}</span></span>
<span id="cb66-54"><a href="#cb66-54"></a></span>
<span id="cb66-55"><a href="#cb66-55"></a>    <span>// sign it</span></span>
<span id="cb66-56"><a href="#cb66-56"></a>    result <span>*=</span> <span>(</span>i<span>&gt;&gt;(</span>bits<span>-</span><span>1</span><span>))&amp;</span><span>1</span><span>?</span> <span>-</span><span>1.0</span><span>:</span> <span>1.0</span><span>;</span></span>
<span id="cb66-57"><a href="#cb66-57"></a></span>
<span id="cb66-58"><a href="#cb66-58"></a>    <span>return</span> result<span>;</span></span>
<span id="cb66-59"><a href="#cb66-59"></a><span>}</span></span></code></pre></div>
<p>I put some handy macros up there at the top for packing and unpacking 32-bit (probably a <code>float</code>) and 64-bit (probably a <code>double</code>) numbers, but the <code>pack754()</code> function could be called directly and told to encode <code>bits</code>-worth of data (<code>expbits</code> of which are reserved for the normalized number’s exponent).</p>
<p>Here’s sample usage:</p>
<div id="cb67"><pre><code><span id="cb67-1"><a href="#cb67-1"></a></span>
<span id="cb67-2"><a href="#cb67-2"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb67-3"><a href="#cb67-3"></a><span>#include </span><span>&lt;stdint.h&gt;</span><span> </span><span>// defines uintN_t types</span></span>
<span id="cb67-4"><a href="#cb67-4"></a><span>#include </span><span>&lt;inttypes.h&gt;</span><span> </span><span>// defines PRIx macros</span></span>
<span id="cb67-5"><a href="#cb67-5"></a></span>
<span id="cb67-6"><a href="#cb67-6"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb67-7"><a href="#cb67-7"></a><span>{</span></span>
<span id="cb67-8"><a href="#cb67-8"></a>    <span>float</span> f <span>=</span> <span>3.1415926</span><span>,</span> f2<span>;</span></span>
<span id="cb67-9"><a href="#cb67-9"></a>    <span>double</span> d <span>=</span> <span>3.14159265358979323</span><span>,</span> d2<span>;</span></span>
<span id="cb67-10"><a href="#cb67-10"></a>    <span>uint32_t</span> fi<span>;</span></span>
<span id="cb67-11"><a href="#cb67-11"></a>    <span>uint64_t</span> di<span>;</span></span>
<span id="cb67-12"><a href="#cb67-12"></a></span>
<span id="cb67-13"><a href="#cb67-13"></a>    fi <span>=</span> pack754_32<span>(</span>f<span>);</span></span>
<span id="cb67-14"><a href="#cb67-14"></a>    f2 <span>=</span> unpack754_32<span>(</span>fi<span>);</span></span>
<span id="cb67-15"><a href="#cb67-15"></a></span>
<span id="cb67-16"><a href="#cb67-16"></a>    di <span>=</span> pack754_64<span>(</span>d<span>);</span></span>
<span id="cb67-17"><a href="#cb67-17"></a>    d2 <span>=</span> unpack754_64<span>(</span>di<span>);</span></span>
<span id="cb67-18"><a href="#cb67-18"></a></span>
<span id="cb67-19"><a href="#cb67-19"></a>    printf<span>(</span><span>"float before : </span><span>%.7f\n</span><span>"</span><span>,</span> f<span>);</span></span>
<span id="cb67-20"><a href="#cb67-20"></a>    printf<span>(</span><span>"float encoded: 0x%08"</span> PRIx32 <span>"</span><span>\n</span><span>"</span><span>,</span> fi<span>);</span></span>
<span id="cb67-21"><a href="#cb67-21"></a>    printf<span>(</span><span>"float after  : </span><span>%.7f\n\n</span><span>"</span><span>,</span> f2<span>);</span></span>
<span id="cb67-22"><a href="#cb67-22"></a></span>
<span id="cb67-23"><a href="#cb67-23"></a>    printf<span>(</span><span>"double before : </span><span>%.20lf\n</span><span>"</span><span>,</span> d<span>);</span></span>
<span id="cb67-24"><a href="#cb67-24"></a>    printf<span>(</span><span>"double encoded: 0x%016"</span> PRIx64 <span>"</span><span>\n</span><span>"</span><span>,</span> di<span>);</span></span>
<span id="cb67-25"><a href="#cb67-25"></a>    printf<span>(</span><span>"double after  : </span><span>%.20lf\n</span><span>"</span><span>,</span> d2<span>);</span></span>
<span id="cb67-26"><a href="#cb67-26"></a></span>
<span id="cb67-27"><a href="#cb67-27"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb67-28"><a href="#cb67-28"></a><span>}</span></span></code></pre></div>
<p>The above code produces this output:</p>
<pre><code>float before : 3.1415925
float encoded: 0x40490FDA
float after  : 3.1415925

double before : 3.14159265358979311600
double encoded: 0x400921FB54442D18
double after  : 3.14159265358979311600</code></pre>
<p>Another question you might have is how do you pack <code>struct</code>s? Unfortunately for you, the compiler is free to put padding all over the place in a <code>struct</code>, and that means you can’t portably send the whole thing over the wire in one chunk. (Aren’t you getting sick of hearing “can’t do this”, “can’t do that”? Sorry! To quote a friend, “Whenever anything goes wrong, I always blame Microsoft.” This one might not be Microsoft’s fault, admittedly, but my friend’s statement is completely true.)</p>
<p>Back to it: the best way to send the <code>struct</code> over the wire is to pack each field independently and then unpack them into the <code>struct</code> when they arrive on the other side.</p>
<p>That’s a lot of work, is what you’re thinking. Yes, it is. One thing you can do is write a helper function to help pack the data for you. It’ll be fun! Really!</p>
<p>In the book <a href="https://beej.us/guide/url/tpop"><em>The Practice of Programming</em></a><a href="#fn37" id="fnref37" role="doc-noteref"><sup>37</sup></a> by Kernighan and Pike, they implement <code>printf()</code>-like functions called <code>pack()</code> and <code>unpack()</code> that do exactly this. I’d link to them, but apparently those functions aren’t online with the rest of the source from the book.</p>
<p>(The Practice of Programming is an excellent read. Zeus saves a kitten every time I recommend it.)</p>
<p>At this point, I’m going to drop a pointer to a <a href="https://github.com/protobuf-c/protobuf-c">Protocol Buffers implementation in C</a><a href="#fn38" id="fnref38" role="doc-noteref"><sup>38</sup></a> which I’ve never used, but looks completely respectable. Python and Perl programmers will want to check out their language’s <code>pack()</code> and <code>unpack()</code> functions for accomplishing the same thing. And Java has a big-ol’ Serializable interface that can be used in a similar way.</p>
<p>But if you want to write your own packing utility in C, K&amp;P’s trick is to use variable argument lists to make <code>printf()</code>-like functions to build the packets. <a href="https://beej.us/guide/bgnet/examples/pack2.c">Here’s a version I cooked up</a><a href="#fn39" id="fnref39" role="doc-noteref"><sup>39</sup></a> on my own based on that which hopefully will be enough to give you an idea of how such a thing can work.</p>
<p>(This code references the <code>pack754()</code> functions, above. The <code>packi*()</code> functions operate like the familiar <code>htons()</code> family, except they pack into a <code>char</code> array instead of another integer.)</p>
<div id="cb69"><pre><code><span id="cb69-1"><a href="#cb69-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb69-2"><a href="#cb69-2"></a><span>#include </span><span>&lt;ctype.h&gt;</span></span>
<span id="cb69-3"><a href="#cb69-3"></a><span>#include </span><span>&lt;stdarg.h&gt;</span></span>
<span id="cb69-4"><a href="#cb69-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb69-5"><a href="#cb69-5"></a></span>
<span id="cb69-6"><a href="#cb69-6"></a><span>/*</span></span>
<span id="cb69-7"><a href="#cb69-7"></a><span>** packi16() -- store a 16-bit int into a char buffer (like htons())</span></span>
<span id="cb69-8"><a href="#cb69-8"></a><span>*/</span> </span>
<span id="cb69-9"><a href="#cb69-9"></a><span>void</span> packi16<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>unsigned</span> <span>int</span> i<span>)</span></span>
<span id="cb69-10"><a href="#cb69-10"></a><span>{</span></span>
<span id="cb69-11"><a href="#cb69-11"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>8</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>;</span></span>
<span id="cb69-12"><a href="#cb69-12"></a><span>}</span></span>
<span id="cb69-13"><a href="#cb69-13"></a></span>
<span id="cb69-14"><a href="#cb69-14"></a><span>/*</span></span>
<span id="cb69-15"><a href="#cb69-15"></a><span>** packi32() -- store a 32-bit int into a char buffer (like htonl())</span></span>
<span id="cb69-16"><a href="#cb69-16"></a><span>*/</span> </span>
<span id="cb69-17"><a href="#cb69-17"></a><span>void</span> packi32<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>unsigned</span> <span>long</span> <span>int</span> i<span>)</span></span>
<span id="cb69-18"><a href="#cb69-18"></a><span>{</span></span>
<span id="cb69-19"><a href="#cb69-19"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>24</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>16</span><span>;</span></span>
<span id="cb69-20"><a href="#cb69-20"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>8</span><span>;</span>  <span>*</span>buf<span>++</span> <span>=</span> i<span>;</span></span>
<span id="cb69-21"><a href="#cb69-21"></a><span>}</span></span>
<span id="cb69-22"><a href="#cb69-22"></a></span>
<span id="cb69-23"><a href="#cb69-23"></a><span>/*</span></span>
<span id="cb69-24"><a href="#cb69-24"></a><span>** packi64() -- store a 64-bit int into a char buffer (like htonl())</span></span>
<span id="cb69-25"><a href="#cb69-25"></a><span>*/</span> </span>
<span id="cb69-26"><a href="#cb69-26"></a><span>void</span> packi64<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> i<span>)</span></span>
<span id="cb69-27"><a href="#cb69-27"></a><span>{</span></span>
<span id="cb69-28"><a href="#cb69-28"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>56</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>48</span><span>;</span></span>
<span id="cb69-29"><a href="#cb69-29"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>40</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>32</span><span>;</span></span>
<span id="cb69-30"><a href="#cb69-30"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>24</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>16</span><span>;</span></span>
<span id="cb69-31"><a href="#cb69-31"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>8</span><span>;</span>  <span>*</span>buf<span>++</span> <span>=</span> i<span>;</span></span>
<span id="cb69-32"><a href="#cb69-32"></a><span>}</span></span>
<span id="cb69-33"><a href="#cb69-33"></a></span>
<span id="cb69-34"><a href="#cb69-34"></a><span>/*</span></span>
<span id="cb69-35"><a href="#cb69-35"></a><span>** unpacki16() -- unpack a 16-bit int from a char buffer (like ntohs())</span></span>
<span id="cb69-36"><a href="#cb69-36"></a><span>*/</span> </span>
<span id="cb69-37"><a href="#cb69-37"></a><span>int</span> unpacki16<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-38"><a href="#cb69-38"></a><span>{</span></span>
<span id="cb69-39"><a href="#cb69-39"></a>    <span>unsigned</span> <span>int</span> i2 <span>=</span> <span>((</span><span>unsigned</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>8</span><span>)</span> <span>|</span> buf<span>[</span><span>1</span><span>];</span></span>
<span id="cb69-40"><a href="#cb69-40"></a>    <span>int</span> i<span>;</span></span>
<span id="cb69-41"><a href="#cb69-41"></a></span>
<span id="cb69-42"><a href="#cb69-42"></a>    <span>// change unsigned numbers to signed</span></span>
<span id="cb69-43"><a href="#cb69-43"></a>    <span>if</span> <span>(</span>i2 <span>&lt;=</span> <span>0x7fff</span><span>u</span><span>)</span> <span>{</span> i <span>=</span> i2<span>;</span> <span>}</span></span>
<span id="cb69-44"><a href="#cb69-44"></a>    <span>else</span> <span>{</span> i <span>=</span> <span>-</span><span>1</span> <span>-</span> <span>(</span><span>unsigned</span> <span>int</span><span>)(</span><span>0xffff</span><span>u</span> <span>-</span> i2<span>);</span> <span>}</span></span>
<span id="cb69-45"><a href="#cb69-45"></a></span>
<span id="cb69-46"><a href="#cb69-46"></a>    <span>return</span> i<span>;</span></span>
<span id="cb69-47"><a href="#cb69-47"></a><span>}</span></span>
<span id="cb69-48"><a href="#cb69-48"></a></span>
<span id="cb69-49"><a href="#cb69-49"></a><span>/*</span></span>
<span id="cb69-50"><a href="#cb69-50"></a><span>** unpacku16() -- unpack a 16-bit unsigned from a char buffer (like ntohs())</span></span>
<span id="cb69-51"><a href="#cb69-51"></a><span>*/</span> </span>
<span id="cb69-52"><a href="#cb69-52"></a><span>unsigned</span> <span>int</span> unpacku16<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-53"><a href="#cb69-53"></a><span>{</span></span>
<span id="cb69-54"><a href="#cb69-54"></a>    <span>return</span> <span>((</span><span>unsigned</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>8</span><span>)</span> <span>|</span> buf<span>[</span><span>1</span><span>];</span></span>
<span id="cb69-55"><a href="#cb69-55"></a><span>}</span></span>
<span id="cb69-56"><a href="#cb69-56"></a></span>
<span id="cb69-57"><a href="#cb69-57"></a><span>/*</span></span>
<span id="cb69-58"><a href="#cb69-58"></a><span>** unpacki32() -- unpack a 32-bit int from a char buffer (like ntohl())</span></span>
<span id="cb69-59"><a href="#cb69-59"></a><span>*/</span> </span>
<span id="cb69-60"><a href="#cb69-60"></a><span>long</span> <span>int</span> unpacki32<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-61"><a href="#cb69-61"></a><span>{</span></span>
<span id="cb69-62"><a href="#cb69-62"></a>    <span>unsigned</span> <span>long</span> <span>int</span> i2 <span>=</span> <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-63"><a href="#cb69-63"></a>                           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-64"><a href="#cb69-64"></a>                           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-65"><a href="#cb69-65"></a>                           buf<span>[</span><span>3</span><span>];</span></span>
<span id="cb69-66"><a href="#cb69-66"></a>    <span>long</span> <span>int</span> i<span>;</span></span>
<span id="cb69-67"><a href="#cb69-67"></a></span>
<span id="cb69-68"><a href="#cb69-68"></a>    <span>// change unsigned numbers to signed</span></span>
<span id="cb69-69"><a href="#cb69-69"></a>    <span>if</span> <span>(</span>i2 <span>&lt;=</span> <span>0x7fffffff</span><span>u</span><span>)</span> <span>{</span> i <span>=</span> i2<span>;</span> <span>}</span></span>
<span id="cb69-70"><a href="#cb69-70"></a>    <span>else</span> <span>{</span> i <span>=</span> <span>-</span><span>1</span> <span>-</span> <span>(</span><span>long</span> <span>int</span><span>)(</span><span>0xffffffff</span><span>u</span> <span>-</span> i2<span>);</span> <span>}</span></span>
<span id="cb69-71"><a href="#cb69-71"></a></span>
<span id="cb69-72"><a href="#cb69-72"></a>    <span>return</span> i<span>;</span></span>
<span id="cb69-73"><a href="#cb69-73"></a><span>}</span></span>
<span id="cb69-74"><a href="#cb69-74"></a></span>
<span id="cb69-75"><a href="#cb69-75"></a><span>/*</span></span>
<span id="cb69-76"><a href="#cb69-76"></a><span>** unpacku32() -- unpack a 32-bit unsigned from a char buffer (like ntohl())</span></span>
<span id="cb69-77"><a href="#cb69-77"></a><span>*/</span> </span>
<span id="cb69-78"><a href="#cb69-78"></a><span>unsigned</span> <span>long</span> <span>int</span> unpacku32<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-79"><a href="#cb69-79"></a><span>{</span></span>
<span id="cb69-80"><a href="#cb69-80"></a>    <span>return</span> <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-81"><a href="#cb69-81"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-82"><a href="#cb69-82"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-83"><a href="#cb69-83"></a>           buf<span>[</span><span>3</span><span>];</span></span>
<span id="cb69-84"><a href="#cb69-84"></a><span>}</span></span>
<span id="cb69-85"><a href="#cb69-85"></a></span>
<span id="cb69-86"><a href="#cb69-86"></a><span>/*</span></span>
<span id="cb69-87"><a href="#cb69-87"></a><span>** unpacki64() -- unpack a 64-bit int from a char buffer (like ntohl())</span></span>
<span id="cb69-88"><a href="#cb69-88"></a><span>*/</span> </span>
<span id="cb69-89"><a href="#cb69-89"></a><span>long</span> <span>long</span> <span>int</span> unpacki64<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-90"><a href="#cb69-90"></a><span>{</span></span>
<span id="cb69-91"><a href="#cb69-91"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> i2 <span>=</span> <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>56</span><span>)</span> <span>|</span></span>
<span id="cb69-92"><a href="#cb69-92"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>48</span><span>)</span> <span>|</span></span>
<span id="cb69-93"><a href="#cb69-93"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>40</span><span>)</span> <span>|</span></span>
<span id="cb69-94"><a href="#cb69-94"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>3</span><span>]&lt;&lt;</span><span>32</span><span>)</span> <span>|</span></span>
<span id="cb69-95"><a href="#cb69-95"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>4</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-96"><a href="#cb69-96"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>5</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-97"><a href="#cb69-97"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>6</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-98"><a href="#cb69-98"></a>                                buf<span>[</span><span>7</span><span>];</span></span>
<span id="cb69-99"><a href="#cb69-99"></a>    <span>long</span> <span>long</span> <span>int</span> i<span>;</span></span>
<span id="cb69-100"><a href="#cb69-100"></a></span>
<span id="cb69-101"><a href="#cb69-101"></a>    <span>// change unsigned numbers to signed</span></span>
<span id="cb69-102"><a href="#cb69-102"></a>    <span>if</span> <span>(</span>i2 <span>&lt;=</span> <span>0x7fffffffffffffff</span><span>u</span><span>)</span> <span>{</span> i <span>=</span> i2<span>;</span> <span>}</span></span>
<span id="cb69-103"><a href="#cb69-103"></a>    <span>else</span> <span>{</span> i <span>=</span> <span>-</span><span>1</span> <span>-(</span><span>long</span> <span>long</span> <span>int</span><span>)(</span><span>0xffffffffffffffff</span><span>u</span> <span>-</span> i2<span>);</span> <span>}</span></span>
<span id="cb69-104"><a href="#cb69-104"></a></span>
<span id="cb69-105"><a href="#cb69-105"></a>    <span>return</span> i<span>;</span></span>
<span id="cb69-106"><a href="#cb69-106"></a><span>}</span></span>
<span id="cb69-107"><a href="#cb69-107"></a></span>
<span id="cb69-108"><a href="#cb69-108"></a><span>/*</span></span>
<span id="cb69-109"><a href="#cb69-109"></a><span>** unpacku64() -- unpack a 64-bit unsigned from a char buffer (like ntohl())</span></span>
<span id="cb69-110"><a href="#cb69-110"></a><span>*/</span> </span>
<span id="cb69-111"><a href="#cb69-111"></a><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> unpacku64<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-112"><a href="#cb69-112"></a><span>{</span></span>
<span id="cb69-113"><a href="#cb69-113"></a>    <span>return</span> <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>56</span><span>)</span> <span>|</span></span>
<span id="cb69-114"><a href="#cb69-114"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>48</span><span>)</span> <span>|</span></span>
<span id="cb69-115"><a href="#cb69-115"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>40</span><span>)</span> <span>|</span></span>
<span id="cb69-116"><a href="#cb69-116"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>3</span><span>]&lt;&lt;</span><span>32</span><span>)</span> <span>|</span></span>
<span id="cb69-117"><a href="#cb69-117"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>4</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-118"><a href="#cb69-118"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>5</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-119"><a href="#cb69-119"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>6</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-120"><a href="#cb69-120"></a>           buf<span>[</span><span>7</span><span>];</span></span>
<span id="cb69-121"><a href="#cb69-121"></a><span>}</span></span>
<span id="cb69-122"><a href="#cb69-122"></a></span>
<span id="cb69-123"><a href="#cb69-123"></a><span>/*</span></span>
<span id="cb69-124"><a href="#cb69-124"></a><span>** pack() -- store data dictated by the format string in the buffer</span></span>
<span id="cb69-125"><a href="#cb69-125"></a><span>**</span></span>
<span id="cb69-126"><a href="#cb69-126"></a><span>**   bits |signed   unsigned   float   string</span></span>
<span id="cb69-127"><a href="#cb69-127"></a><span>**   -----+----------------------------------</span></span>
<span id="cb69-128"><a href="#cb69-128"></a><span>**      8 |   c        C         </span></span>
<span id="cb69-129"><a href="#cb69-129"></a><span>**     16 |   h        H         f</span></span>
<span id="cb69-130"><a href="#cb69-130"></a><span>**     32 |   l        L         d</span></span>
<span id="cb69-131"><a href="#cb69-131"></a><span>**     64 |   q        Q         g</span></span>
<span id="cb69-132"><a href="#cb69-132"></a><span>**      - |                               s</span></span>
<span id="cb69-133"><a href="#cb69-133"></a><span>**</span></span>
<span id="cb69-134"><a href="#cb69-134"></a><span>**  (16-bit unsigned length is automatically prepended to strings)</span></span>
<span id="cb69-135"><a href="#cb69-135"></a><span>*/</span> </span>
<span id="cb69-136"><a href="#cb69-136"></a></span>
<span id="cb69-137"><a href="#cb69-137"></a><span>unsigned</span> <span>int</span> pack<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>char</span> <span>*</span>format<span>,</span> <span>...)</span></span>
<span id="cb69-138"><a href="#cb69-138"></a><span>{</span></span>
<span id="cb69-139"><a href="#cb69-139"></a>    <span>va_list</span> ap<span>;</span></span>
<span id="cb69-140"><a href="#cb69-140"></a></span>
<span id="cb69-141"><a href="#cb69-141"></a>    <span>signed</span> <span>char</span> c<span>;</span>              <span>// 8-bit</span></span>
<span id="cb69-142"><a href="#cb69-142"></a>    <span>unsigned</span> <span>char</span> C<span>;</span></span>
<span id="cb69-143"><a href="#cb69-143"></a></span>
<span id="cb69-144"><a href="#cb69-144"></a>    <span>int</span> h<span>;</span>                      <span>// 16-bit</span></span>
<span id="cb69-145"><a href="#cb69-145"></a>    <span>unsigned</span> <span>int</span> H<span>;</span></span>
<span id="cb69-146"><a href="#cb69-146"></a></span>
<span id="cb69-147"><a href="#cb69-147"></a>    <span>long</span> <span>int</span> l<span>;</span>                 <span>// 32-bit</span></span>
<span id="cb69-148"><a href="#cb69-148"></a>    <span>unsigned</span> <span>long</span> <span>int</span> L<span>;</span></span>
<span id="cb69-149"><a href="#cb69-149"></a></span>
<span id="cb69-150"><a href="#cb69-150"></a>    <span>long</span> <span>long</span> <span>int</span> q<span>;</span>            <span>// 64-bit</span></span>
<span id="cb69-151"><a href="#cb69-151"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> Q<span>;</span></span>
<span id="cb69-152"><a href="#cb69-152"></a></span>
<span id="cb69-153"><a href="#cb69-153"></a>    <span>float</span> f<span>;</span>                    <span>// floats</span></span>
<span id="cb69-154"><a href="#cb69-154"></a>    <span>double</span> d<span>;</span></span>
<span id="cb69-155"><a href="#cb69-155"></a>    <span>long</span> <span>double</span> g<span>;</span></span>
<span id="cb69-156"><a href="#cb69-156"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> fhold<span>;</span></span>
<span id="cb69-157"><a href="#cb69-157"></a></span>
<span id="cb69-158"><a href="#cb69-158"></a>    <span>char</span> <span>*</span>s<span>;</span>                    <span>// strings</span></span>
<span id="cb69-159"><a href="#cb69-159"></a>    <span>unsigned</span> <span>int</span> len<span>;</span></span>
<span id="cb69-160"><a href="#cb69-160"></a></span>
<span id="cb69-161"><a href="#cb69-161"></a>    <span>unsigned</span> <span>int</span> size <span>=</span> <span>0</span><span>;</span></span>
<span id="cb69-162"><a href="#cb69-162"></a></span>
<span id="cb69-163"><a href="#cb69-163"></a>    va_start<span>(</span>ap<span>,</span> format<span>);</span></span>
<span id="cb69-164"><a href="#cb69-164"></a></span>
<span id="cb69-165"><a href="#cb69-165"></a>    <span>for</span><span>(;</span> <span>*</span>format <span>!=</span> <span>'</span><span>\0</span><span>'</span><span>;</span> format<span>++)</span> <span>{</span></span>
<span id="cb69-166"><a href="#cb69-166"></a>        <span>switch</span><span>(*</span>format<span>)</span> <span>{</span></span>
<span id="cb69-167"><a href="#cb69-167"></a>        <span>case</span> <span>'c'</span><span>:</span> <span>// 8-bit</span></span>
<span id="cb69-168"><a href="#cb69-168"></a>            size <span>+=</span> <span>1</span><span>;</span></span>
<span id="cb69-169"><a href="#cb69-169"></a>            c <span>=</span> <span>(</span><span>signed</span> <span>char</span><span>)</span>va_arg<span>(</span>ap<span>,</span> <span>int</span><span>);</span> <span>// promoted</span></span>
<span id="cb69-170"><a href="#cb69-170"></a>            <span>*</span>buf<span>++</span> <span>=</span> c<span>;</span></span>
<span id="cb69-171"><a href="#cb69-171"></a>            <span>break</span><span>;</span></span>
<span id="cb69-172"><a href="#cb69-172"></a></span>
<span id="cb69-173"><a href="#cb69-173"></a>        <span>case</span> <span>'C'</span><span>:</span> <span>// 8-bit unsigned</span></span>
<span id="cb69-174"><a href="#cb69-174"></a>            size <span>+=</span> <span>1</span><span>;</span></span>
<span id="cb69-175"><a href="#cb69-175"></a>            C <span>=</span> <span>(</span><span>unsigned</span> <span>char</span><span>)</span>va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>int</span><span>);</span> <span>// promoted</span></span>
<span id="cb69-176"><a href="#cb69-176"></a>            <span>*</span>buf<span>++</span> <span>=</span> C<span>;</span></span>
<span id="cb69-177"><a href="#cb69-177"></a>            <span>break</span><span>;</span></span>
<span id="cb69-178"><a href="#cb69-178"></a></span>
<span id="cb69-179"><a href="#cb69-179"></a>        <span>case</span> <span>'h'</span><span>:</span> <span>// 16-bit</span></span>
<span id="cb69-180"><a href="#cb69-180"></a>            size <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-181"><a href="#cb69-181"></a>            h <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>int</span><span>);</span></span>
<span id="cb69-182"><a href="#cb69-182"></a>            packi16<span>(</span>buf<span>,</span> h<span>);</span></span>
<span id="cb69-183"><a href="#cb69-183"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-184"><a href="#cb69-184"></a>            <span>break</span><span>;</span></span>
<span id="cb69-185"><a href="#cb69-185"></a></span>
<span id="cb69-186"><a href="#cb69-186"></a>        <span>case</span> <span>'H'</span><span>:</span> <span>// 16-bit unsigned</span></span>
<span id="cb69-187"><a href="#cb69-187"></a>            size <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-188"><a href="#cb69-188"></a>            H <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>int</span><span>);</span></span>
<span id="cb69-189"><a href="#cb69-189"></a>            packi16<span>(</span>buf<span>,</span> H<span>);</span></span>
<span id="cb69-190"><a href="#cb69-190"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-191"><a href="#cb69-191"></a>            <span>break</span><span>;</span></span>
<span id="cb69-192"><a href="#cb69-192"></a></span>
<span id="cb69-193"><a href="#cb69-193"></a>        <span>case</span> <span>'l'</span><span>:</span> <span>// 32-bit</span></span>
<span id="cb69-194"><a href="#cb69-194"></a>            size <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-195"><a href="#cb69-195"></a>            l <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-196"><a href="#cb69-196"></a>            packi32<span>(</span>buf<span>,</span> l<span>);</span></span>
<span id="cb69-197"><a href="#cb69-197"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-198"><a href="#cb69-198"></a>            <span>break</span><span>;</span></span>
<span id="cb69-199"><a href="#cb69-199"></a></span>
<span id="cb69-200"><a href="#cb69-200"></a>        <span>case</span> <span>'L'</span><span>:</span> <span>// 32-bit unsigned</span></span>
<span id="cb69-201"><a href="#cb69-201"></a>            size <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-202"><a href="#cb69-202"></a>            L <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-203"><a href="#cb69-203"></a>            packi32<span>(</span>buf<span>,</span> L<span>);</span></span>
<span id="cb69-204"><a href="#cb69-204"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-205"><a href="#cb69-205"></a>            <span>break</span><span>;</span></span>
<span id="cb69-206"><a href="#cb69-206"></a></span>
<span id="cb69-207"><a href="#cb69-207"></a>        <span>case</span> <span>'q'</span><span>:</span> <span>// 64-bit</span></span>
<span id="cb69-208"><a href="#cb69-208"></a>            size <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-209"><a href="#cb69-209"></a>            q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-210"><a href="#cb69-210"></a>            packi64<span>(</span>buf<span>,</span> q<span>);</span></span>
<span id="cb69-211"><a href="#cb69-211"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-212"><a href="#cb69-212"></a>            <span>break</span><span>;</span></span>
<span id="cb69-213"><a href="#cb69-213"></a></span>
<span id="cb69-214"><a href="#cb69-214"></a>        <span>case</span> <span>'Q'</span><span>:</span> <span>// 64-bit unsigned</span></span>
<span id="cb69-215"><a href="#cb69-215"></a>            size <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-216"><a href="#cb69-216"></a>            Q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-217"><a href="#cb69-217"></a>            packi64<span>(</span>buf<span>,</span> Q<span>);</span></span>
<span id="cb69-218"><a href="#cb69-218"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-219"><a href="#cb69-219"></a>            <span>break</span><span>;</span></span>
<span id="cb69-220"><a href="#cb69-220"></a></span>
<span id="cb69-221"><a href="#cb69-221"></a>        <span>case</span> <span>'f'</span><span>:</span> <span>// float-16</span></span>
<span id="cb69-222"><a href="#cb69-222"></a>            size <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-223"><a href="#cb69-223"></a>            f <span>=</span> <span>(</span><span>float</span><span>)</span>va_arg<span>(</span>ap<span>,</span> <span>double</span><span>);</span> <span>// promoted</span></span>
<span id="cb69-224"><a href="#cb69-224"></a>            fhold <span>=</span> pack754_16<span>(</span>f<span>);</span> <span>// convert to IEEE 754</span></span>
<span id="cb69-225"><a href="#cb69-225"></a>            packi16<span>(</span>buf<span>,</span> fhold<span>);</span></span>
<span id="cb69-226"><a href="#cb69-226"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-227"><a href="#cb69-227"></a>            <span>break</span><span>;</span></span>
<span id="cb69-228"><a href="#cb69-228"></a></span>
<span id="cb69-229"><a href="#cb69-229"></a>        <span>case</span> <span>'d'</span><span>:</span> <span>// float-32</span></span>
<span id="cb69-230"><a href="#cb69-230"></a>            size <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-231"><a href="#cb69-231"></a>            d <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>double</span><span>);</span></span>
<span id="cb69-232"><a href="#cb69-232"></a>            fhold <span>=</span> pack754_32<span>(</span>d<span>);</span> <span>// convert to IEEE 754</span></span>
<span id="cb69-233"><a href="#cb69-233"></a>            packi32<span>(</span>buf<span>,</span> fhold<span>);</span></span>
<span id="cb69-234"><a href="#cb69-234"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-235"><a href="#cb69-235"></a>            <span>break</span><span>;</span></span>
<span id="cb69-236"><a href="#cb69-236"></a></span>
<span id="cb69-237"><a href="#cb69-237"></a>        <span>case</span> <span>'g'</span><span>:</span> <span>// float-64</span></span>
<span id="cb69-238"><a href="#cb69-238"></a>            size <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-239"><a href="#cb69-239"></a>            g <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>double</span><span>);</span></span>
<span id="cb69-240"><a href="#cb69-240"></a>            fhold <span>=</span> pack754_64<span>(</span>g<span>);</span> <span>// convert to IEEE 754</span></span>
<span id="cb69-241"><a href="#cb69-241"></a>            packi64<span>(</span>buf<span>,</span> fhold<span>);</span></span>
<span id="cb69-242"><a href="#cb69-242"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-243"><a href="#cb69-243"></a>            <span>break</span><span>;</span></span>
<span id="cb69-244"><a href="#cb69-244"></a></span>
<span id="cb69-245"><a href="#cb69-245"></a>        <span>case</span> <span>'s'</span><span>:</span> <span>// string</span></span>
<span id="cb69-246"><a href="#cb69-246"></a>            s <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>char</span><span>*);</span></span>
<span id="cb69-247"><a href="#cb69-247"></a>            len <span>=</span> strlen<span>(</span>s<span>);</span></span>
<span id="cb69-248"><a href="#cb69-248"></a>            size <span>+=</span> len <span>+</span> <span>2</span><span>;</span></span>
<span id="cb69-249"><a href="#cb69-249"></a>            packi16<span>(</span>buf<span>,</span> len<span>);</span></span>
<span id="cb69-250"><a href="#cb69-250"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-251"><a href="#cb69-251"></a>            memcpy<span>(</span>buf<span>,</span> s<span>,</span> len<span>);</span></span>
<span id="cb69-252"><a href="#cb69-252"></a>            buf <span>+=</span> len<span>;</span></span>
<span id="cb69-253"><a href="#cb69-253"></a>            <span>break</span><span>;</span></span>
<span id="cb69-254"><a href="#cb69-254"></a>        <span>}</span></span>
<span id="cb69-255"><a href="#cb69-255"></a>    <span>}</span></span>
<span id="cb69-256"><a href="#cb69-256"></a></span>
<span id="cb69-257"><a href="#cb69-257"></a>    va_end<span>(</span>ap<span>);</span></span>
<span id="cb69-258"><a href="#cb69-258"></a></span>
<span id="cb69-259"><a href="#cb69-259"></a>    <span>return</span> size<span>;</span></span>
<span id="cb69-260"><a href="#cb69-260"></a><span>}</span></span>
<span id="cb69-261"><a href="#cb69-261"></a></span>
<span id="cb69-262"><a href="#cb69-262"></a><span>/*</span></span>
<span id="cb69-263"><a href="#cb69-263"></a><span>** unpack() -- unpack data dictated by the format string into the buffer</span></span>
<span id="cb69-264"><a href="#cb69-264"></a><span>**</span></span>
<span id="cb69-265"><a href="#cb69-265"></a><span>**   bits |signed   unsigned   float   string</span></span>
<span id="cb69-266"><a href="#cb69-266"></a><span>**   -----+----------------------------------</span></span>
<span id="cb69-267"><a href="#cb69-267"></a><span>**      8 |   c        C         </span></span>
<span id="cb69-268"><a href="#cb69-268"></a><span>**     16 |   h        H         f</span></span>
<span id="cb69-269"><a href="#cb69-269"></a><span>**     32 |   l        L         d</span></span>
<span id="cb69-270"><a href="#cb69-270"></a><span>**     64 |   q        Q         g</span></span>
<span id="cb69-271"><a href="#cb69-271"></a><span>**      - |                               s</span></span>
<span id="cb69-272"><a href="#cb69-272"></a><span>**</span></span>
<span id="cb69-273"><a href="#cb69-273"></a><span>**  (string is extracted based on its stored length, but 's' can be</span></span>
<span id="cb69-274"><a href="#cb69-274"></a><span>**  prepended with a max length)</span></span>
<span id="cb69-275"><a href="#cb69-275"></a><span>*/</span></span>
<span id="cb69-276"><a href="#cb69-276"></a><span>void</span> unpack<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>char</span> <span>*</span>format<span>,</span> <span>...)</span></span>
<span id="cb69-277"><a href="#cb69-277"></a><span>{</span></span>
<span id="cb69-278"><a href="#cb69-278"></a>    <span>va_list</span> ap<span>;</span></span>
<span id="cb69-279"><a href="#cb69-279"></a></span>
<span id="cb69-280"><a href="#cb69-280"></a>    <span>signed</span> <span>char</span> <span>*</span>c<span>;</span>              <span>// 8-bit</span></span>
<span id="cb69-281"><a href="#cb69-281"></a>    <span>unsigned</span> <span>char</span> <span>*</span>C<span>;</span></span>
<span id="cb69-282"><a href="#cb69-282"></a></span>
<span id="cb69-283"><a href="#cb69-283"></a>    <span>int</span> <span>*</span>h<span>;</span>                      <span>// 16-bit</span></span>
<span id="cb69-284"><a href="#cb69-284"></a>    <span>unsigned</span> <span>int</span> <span>*</span>H<span>;</span></span>
<span id="cb69-285"><a href="#cb69-285"></a></span>
<span id="cb69-286"><a href="#cb69-286"></a>    <span>long</span> <span>int</span> <span>*</span>l<span>;</span>                 <span>// 32-bit</span></span>
<span id="cb69-287"><a href="#cb69-287"></a>    <span>unsigned</span> <span>long</span> <span>int</span> <span>*</span>L<span>;</span></span>
<span id="cb69-288"><a href="#cb69-288"></a></span>
<span id="cb69-289"><a href="#cb69-289"></a>    <span>long</span> <span>long</span> <span>int</span> <span>*</span>q<span>;</span>            <span>// 64-bit</span></span>
<span id="cb69-290"><a href="#cb69-290"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> <span>*</span>Q<span>;</span></span>
<span id="cb69-291"><a href="#cb69-291"></a></span>
<span id="cb69-292"><a href="#cb69-292"></a>    <span>float</span> <span>*</span>f<span>;</span>                    <span>// floats</span></span>
<span id="cb69-293"><a href="#cb69-293"></a>    <span>double</span> <span>*</span>d<span>;</span></span>
<span id="cb69-294"><a href="#cb69-294"></a>    <span>long</span> <span>double</span> <span>*</span>g<span>;</span></span>
<span id="cb69-295"><a href="#cb69-295"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> fhold<span>;</span></span>
<span id="cb69-296"><a href="#cb69-296"></a></span>
<span id="cb69-297"><a href="#cb69-297"></a>    <span>char</span> <span>*</span>s<span>;</span></span>
<span id="cb69-298"><a href="#cb69-298"></a>    <span>unsigned</span> <span>int</span> len<span>,</span> maxstrlen<span>=</span><span>0</span><span>,</span> count<span>;</span></span>
<span id="cb69-299"><a href="#cb69-299"></a></span>
<span id="cb69-300"><a href="#cb69-300"></a>    va_start<span>(</span>ap<span>,</span> format<span>);</span></span>
<span id="cb69-301"><a href="#cb69-301"></a></span>
<span id="cb69-302"><a href="#cb69-302"></a>    <span>for</span><span>(;</span> <span>*</span>format <span>!=</span> <span>'</span><span>\0</span><span>'</span><span>;</span> format<span>++)</span> <span>{</span></span>
<span id="cb69-303"><a href="#cb69-303"></a>        <span>switch</span><span>(*</span>format<span>)</span> <span>{</span></span>
<span id="cb69-304"><a href="#cb69-304"></a>        <span>case</span> <span>'c'</span><span>:</span> <span>// 8-bit</span></span>
<span id="cb69-305"><a href="#cb69-305"></a>            c <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>signed</span> <span>char</span><span>*);</span></span>
<span id="cb69-306"><a href="#cb69-306"></a>            <span>if</span> <span>(*</span>buf <span>&lt;=</span> <span>0x7f</span><span>)</span> <span>{</span> <span>*</span>c <span>=</span> <span>*</span>buf<span>;}</span> <span>// re-sign</span></span>
<span id="cb69-307"><a href="#cb69-307"></a>            <span>else</span> <span>{</span> <span>*</span>c <span>=</span> <span>-</span><span>1</span> <span>-</span> <span>(</span><span>unsigned</span> <span>char</span><span>)(</span><span>0xff</span><span>u</span> <span>-</span> <span>*</span>buf<span>);</span> <span>}</span></span>
<span id="cb69-308"><a href="#cb69-308"></a>            buf<span>++;</span></span>
<span id="cb69-309"><a href="#cb69-309"></a>            <span>break</span><span>;</span></span>
<span id="cb69-310"><a href="#cb69-310"></a></span>
<span id="cb69-311"><a href="#cb69-311"></a>        <span>case</span> <span>'C'</span><span>:</span> <span>// 8-bit unsigned</span></span>
<span id="cb69-312"><a href="#cb69-312"></a>            C <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>char</span><span>*);</span></span>
<span id="cb69-313"><a href="#cb69-313"></a>            <span>*</span>C <span>=</span> <span>*</span>buf<span>++;</span></span>
<span id="cb69-314"><a href="#cb69-314"></a>            <span>break</span><span>;</span></span>
<span id="cb69-315"><a href="#cb69-315"></a></span>
<span id="cb69-316"><a href="#cb69-316"></a>        <span>case</span> <span>'h'</span><span>:</span> <span>// 16-bit</span></span>
<span id="cb69-317"><a href="#cb69-317"></a>            h <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>int</span><span>*);</span></span>
<span id="cb69-318"><a href="#cb69-318"></a>            <span>*</span>h <span>=</span> unpacki16<span>(</span>buf<span>);</span></span>
<span id="cb69-319"><a href="#cb69-319"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-320"><a href="#cb69-320"></a>            <span>break</span><span>;</span></span>
<span id="cb69-321"><a href="#cb69-321"></a></span>
<span id="cb69-322"><a href="#cb69-322"></a>        <span>case</span> <span>'H'</span><span>:</span> <span>// 16-bit unsigned</span></span>
<span id="cb69-323"><a href="#cb69-323"></a>            H <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>int</span><span>*);</span></span>
<span id="cb69-324"><a href="#cb69-324"></a>            <span>*</span>H <span>=</span> unpacku16<span>(</span>buf<span>);</span></span>
<span id="cb69-325"><a href="#cb69-325"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-326"><a href="#cb69-326"></a>            <span>break</span><span>;</span></span>
<span id="cb69-327"><a href="#cb69-327"></a></span>
<span id="cb69-328"><a href="#cb69-328"></a>        <span>case</span> <span>'l'</span><span>:</span> <span>// 32-bit</span></span>
<span id="cb69-329"><a href="#cb69-329"></a>            l <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-330"><a href="#cb69-330"></a>            <span>*</span>l <span>=</span> unpacki32<span>(</span>buf<span>);</span></span>
<span id="cb69-331"><a href="#cb69-331"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-332"><a href="#cb69-332"></a>            <span>break</span><span>;</span></span>
<span id="cb69-333"><a href="#cb69-333"></a></span>
<span id="cb69-334"><a href="#cb69-334"></a>        <span>case</span> <span>'L'</span><span>:</span> <span>// 32-bit unsigned</span></span>
<span id="cb69-335"><a href="#cb69-335"></a>            L <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-336"><a href="#cb69-336"></a>            <span>*</span>L <span>=</span> unpacku32<span>(</span>buf<span>);</span></span>
<span id="cb69-337"><a href="#cb69-337"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-338"><a href="#cb69-338"></a>            <span>break</span><span>;</span></span>
<span id="cb69-339"><a href="#cb69-339"></a></span>
<span id="cb69-340"><a href="#cb69-340"></a>        <span>case</span> <span>'q'</span><span>:</span> <span>// 64-bit</span></span>
<span id="cb69-341"><a href="#cb69-341"></a>            q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-342"><a href="#cb69-342"></a>            <span>*</span>q <span>=</span> unpacki64<span>(</span>buf<span>);</span></span>
<span id="cb69-343"><a href="#cb69-343"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-344"><a href="#cb69-344"></a>            <span>break</span><span>;</span></span>
<span id="cb69-345"><a href="#cb69-345"></a></span>
<span id="cb69-346"><a href="#cb69-346"></a>        <span>case</span> <span>'Q'</span><span>:</span> <span>// 64-bit unsigned</span></span>
<span id="cb69-347"><a href="#cb69-347"></a>            Q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-348"><a href="#cb69-348"></a>            <span>*</span>Q <span>=</span> unpacku64<span>(</span>buf<span>);</span></span>
<span id="cb69-349"><a href="#cb69-349"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-350"><a href="#cb69-350"></a>            <span>break</span><span>;</span></span>
<span id="cb69-351"><a href="#cb69-351"></a></span>
<span id="cb69-352"><a href="#cb69-352"></a>        <span>case</span> <span>'f'</span><span>:</span> <span>// float</span></span>
<span id="cb69-353"><a href="#cb69-353"></a>            f <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>float</span><span>*);</span></span>
<span id="cb69-354"><a href="#cb69-354"></a>            fhold <span>=</span> unpacku16<span>(</span>buf<span>);</span></span>
<span id="cb69-355"><a href="#cb69-355"></a>            <span>*</span>f <span>=</span> unpack754_16<span>(</span>fhold<span>);</span></span>
<span id="cb69-356"><a href="#cb69-356"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-357"><a href="#cb69-357"></a>            <span>break</span><span>;</span></span>
<span id="cb69-358"><a href="#cb69-358"></a></span>
<span id="cb69-359"><a href="#cb69-359"></a>        <span>case</span> <span>'d'</span><span>:</span> <span>// float-32</span></span>
<span id="cb69-360"><a href="#cb69-360"></a>            d <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>double</span><span>*);</span></span>
<span id="cb69-361"><a href="#cb69-361"></a>            fhold <span>=</span> unpacku32<span>(</span>buf<span>);</span></span>
<span id="cb69-362"><a href="#cb69-362"></a>            <span>*</span>d <span>=</span> unpack754_32<span>(</span>fhold<span>);</span></span>
<span id="cb69-363"><a href="#cb69-363"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-364"><a href="#cb69-364"></a>            <span>break</span><span>;</span></span>
<span id="cb69-365"><a href="#cb69-365"></a></span>
<span id="cb69-366"><a href="#cb69-366"></a>        <span>case</span> <span>'g'</span><span>:</span> <span>// float-64</span></span>
<span id="cb69-367"><a href="#cb69-367"></a>            g <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>double</span><span>*);</span></span>
<span id="cb69-368"><a href="#cb69-368"></a>            fhold <span>=</span> unpacku64<span>(</span>buf<span>);</span></span>
<span id="cb69-369"><a href="#cb69-369"></a>            <span>*</span>g <span>=</span> unpack754_64<span>(</span>fhold<span>);</span></span>
<span id="cb69-370"><a href="#cb69-370"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-371"><a href="#cb69-371"></a>            <span>break</span><span>;</span></span>
<span id="cb69-372"><a href="#cb69-372"></a></span>
<span id="cb69-373"><a href="#cb69-373"></a>        <span>case</span> <span>'s'</span><span>:</span> <span>// string</span></span>
<span id="cb69-374"><a href="#cb69-374"></a>            s <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>char</span><span>*);</span></span>
<span id="cb69-375"><a href="#cb69-375"></a>            len <span>=</span> unpacku16<span>(</span>buf<span>);</span></span>
<span id="cb69-376"><a href="#cb69-376"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-377"><a href="#cb69-377"></a>            <span>if</span> <span>(</span>maxstrlen <span>&gt;</span> <span>0</span> <span>&amp;&amp;</span> len <span>&gt;=</span> maxstrlen<span>)</span> count <span>=</span> maxstrlen <span>-</span> <span>1</span><span>;</span></span>
<span id="cb69-378"><a href="#cb69-378"></a>            <span>else</span> count <span>=</span> len<span>;</span></span>
<span id="cb69-379"><a href="#cb69-379"></a>            memcpy<span>(</span>s<span>,</span> buf<span>,</span> count<span>);</span></span>
<span id="cb69-380"><a href="#cb69-380"></a>            s<span>[</span>count<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb69-381"><a href="#cb69-381"></a>            buf <span>+=</span> len<span>;</span></span>
<span id="cb69-382"><a href="#cb69-382"></a>            <span>break</span><span>;</span></span>
<span id="cb69-383"><a href="#cb69-383"></a></span>
<span id="cb69-384"><a href="#cb69-384"></a>        <span>default</span><span>:</span></span>
<span id="cb69-385"><a href="#cb69-385"></a>            <span>if</span> <span>(</span>isdigit<span>(*</span>format<span>))</span> <span>{</span> <span>// track max str len</span></span>
<span id="cb69-386"><a href="#cb69-386"></a>                maxstrlen <span>=</span> maxstrlen <span>*</span> <span>10</span> <span>+</span> <span>(*</span>format<span>-</span><span>'0'</span><span>);</span></span>
<span id="cb69-387"><a href="#cb69-387"></a>            <span>}</span></span>
<span id="cb69-388"><a href="#cb69-388"></a>        <span>}</span></span>
<span id="cb69-389"><a href="#cb69-389"></a></span>
<span id="cb69-390"><a href="#cb69-390"></a>        <span>if</span> <span>(!</span>isdigit<span>(*</span>format<span>))</span> maxstrlen <span>=</span> <span>0</span><span>;</span></span>
<span id="cb69-391"><a href="#cb69-391"></a>    <span>}</span></span>
<span id="cb69-392"><a href="#cb69-392"></a></span>
<span id="cb69-393"><a href="#cb69-393"></a>    va_end<span>(</span>ap<span>);</span></span>
<span id="cb69-394"><a href="#cb69-394"></a><span>}</span></span></code></pre></div>
<p>And <a href="https://beej.us/guide/bgnet/examples/pack2.c">here is a demonstration program</a><a href="#fn40" id="fnref40" role="doc-noteref"><sup>40</sup></a> of the above code that packs some data into <code>buf</code> and then unpacks it into variables. Note that when calling <code>unpack()</code> with a string argument (format specifier “<code>s</code>”), it’s wise to put a maximum length count in front of it to prevent a buffer overrun, e.g.&nbsp;“<code>96s</code>”. Be wary when unpacking data you get over the network—a malicious user might send badly-constructed packets in an effort to attack your system!</p>
<div id="cb70"><pre><code><span id="cb70-1"><a href="#cb70-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb70-2"><a href="#cb70-2"></a></span>
<span id="cb70-3"><a href="#cb70-3"></a><span>// various bits for floating point types--</span></span>
<span id="cb70-4"><a href="#cb70-4"></a><span>// varies for different architectures</span></span>
<span id="cb70-5"><a href="#cb70-5"></a><span>typedef</span> <span>float</span> float32_t<span>;</span></span>
<span id="cb70-6"><a href="#cb70-6"></a><span>typedef</span> <span>double</span> float64_t<span>;</span></span>
<span id="cb70-7"><a href="#cb70-7"></a></span>
<span id="cb70-8"><a href="#cb70-8"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb70-9"><a href="#cb70-9"></a><span>{</span></span>
<span id="cb70-10"><a href="#cb70-10"></a>    <span>unsigned</span> <span>char</span> buf<span>[</span><span>1024</span><span>];</span></span>
<span id="cb70-11"><a href="#cb70-11"></a>    <span>int8_t</span> magic<span>;</span></span>
<span id="cb70-12"><a href="#cb70-12"></a>    <span>int16_t</span> monkeycount<span>;</span></span>
<span id="cb70-13"><a href="#cb70-13"></a>    <span>int32_t</span> altitude<span>;</span></span>
<span id="cb70-14"><a href="#cb70-14"></a>    float32_t absurdityfactor<span>;</span></span>
<span id="cb70-15"><a href="#cb70-15"></a>    <span>char</span> <span>*</span>s <span>=</span> <span>"Great unmitigated Zot! You've found the Runestaff!"</span><span>;</span></span>
<span id="cb70-16"><a href="#cb70-16"></a>    <span>char</span> s2<span>[</span><span>96</span><span>];</span></span>
<span id="cb70-17"><a href="#cb70-17"></a>    <span>int16_t</span> packetsize<span>,</span> ps2<span>;</span></span>
<span id="cb70-18"><a href="#cb70-18"></a></span>
<span id="cb70-19"><a href="#cb70-19"></a>    packetsize <span>=</span> pack<span>(</span>buf<span>,</span> <span>"chhlsf"</span><span>,</span> <span>(</span><span>int8_t</span><span>)</span><span>'B'</span><span>,</span> <span>(</span><span>int16_t</span><span>)</span><span>0</span><span>,</span> <span>(</span><span>int16_t</span><span>)</span><span>37</span><span>,</span> </span>
<span id="cb70-20"><a href="#cb70-20"></a>            <span>(</span><span>int32_t</span><span>)-</span><span>5</span><span>,</span> s<span>,</span> <span>(</span>float32_t<span>)-</span><span>3490.6677</span><span>);</span></span>
<span id="cb70-21"><a href="#cb70-21"></a>    packi16<span>(</span>buf<span>+</span><span>1</span><span>,</span> packetsize<span>);</span> <span>// store packet size in packet for kicks</span></span>
<span id="cb70-22"><a href="#cb70-22"></a></span>
<span id="cb70-23"><a href="#cb70-23"></a>    printf<span>(</span><span>"packet is %"</span> PRId32 <span>" bytes</span><span>\n</span><span>"</span><span>,</span> packetsize<span>);</span></span>
<span id="cb70-24"><a href="#cb70-24"></a></span>
<span id="cb70-25"><a href="#cb70-25"></a>    unpack<span>(</span>buf<span>,</span> <span>"chhl96sf"</span><span>,</span> <span>&amp;</span>magic<span>,</span> <span>&amp;</span>ps2<span>,</span> <span>&amp;</span>monkeycount<span>,</span> <span>&amp;</span>altitude<span>,</span> s2<span>,</span></span>
<span id="cb70-26"><a href="#cb70-26"></a>        <span>&amp;</span>absurdityfactor<span>);</span></span>
<span id="cb70-27"><a href="#cb70-27"></a></span>
<span id="cb70-28"><a href="#cb70-28"></a>    printf<span>(</span><span>"'</span><span>%c</span><span>' %"</span> PRId32<span>" %"</span> PRId16 <span>" %"</span> PRId32</span>
<span id="cb70-29"><a href="#cb70-29"></a>            <span>" </span><span>\"%s\"</span><span> </span><span>%f\n</span><span>"</span><span>,</span> magic<span>,</span> ps2<span>,</span> monkeycount<span>,</span></span>
<span id="cb70-30"><a href="#cb70-30"></a>            altitude<span>,</span> s2<span>,</span> absurdityfactor<span>);</span></span>
<span id="cb70-31"><a href="#cb70-31"></a></span>
<span id="cb70-32"><a href="#cb70-32"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb70-33"><a href="#cb70-33"></a><span>}</span></span></code></pre></div>
<p>Whether you roll your own code or use someone else’s, it’s a good idea to have a general set of data packing routines for the sake of keeping bugs in check, rather than packing each bit by hand each time.</p>
<p>When packing the data, what’s a good format to use? Excellent question. Fortunately, <a href="https://tools.ietf.org/html/rfc4506">RFC 4506</a><a href="#fn41" id="fnref41" role="doc-noteref"><sup>41</sup></a>, the External Data Representation Standard, already defines binary formats for a bunch of different types, like floating point types, integer types, arrays, raw data, etc. I suggest conforming to that if you’re going to roll the data yourself. But you’re not obligated to. The Packet Police are not right outside your door. At least, I don’t <em>think</em> they are.</p>
<p>In any case, encoding the data somehow or another before you send it is the right way of doing things!</p>

<h2 data-number="7.6" id="sonofdataencap"> Son of Data Encapsulation</h2>
<p>What does it really mean to encapsulate data, anyway? In the simplest case, it means you’ll stick a header on there with either some identifying information or a packet length, or both.</p>
<p>What should your header look like? Well, it’s just some binary data that represents whatever you feel is necessary to complete your project.</p>
<p>Wow. That’s vague.</p>
<p>Okay. For instance, let’s say you have a multi-user chat program that uses <code>SOCK_STREAM</code>s. When a user types (“says”) something, two pieces of information need to be transmitted to the server: what was said and who said it.</p>
<p>So far so good? “What’s the problem?” you’re asking.</p>
<p>The problem is that the messages can be of varying lengths. One person named “tom” might say, “Hi”, and another person named “Benjamin” might say, “Hey guys what is up?”</p>
<p>So you <code>send()</code> all this stuff to the clients as it comes in. Your outgoing data stream looks like this:</p>
<pre><code>t o m H i B e n j a m i n H e y g u y s w h a t i s u p ?</code></pre>
<p>And so on. How does the client know when one message starts and another stops? You could, if you wanted, make all messages the same length and just call the <code>sendall()</code> we implemented, <a href="#sendall">above</a>. But that wastes bandwidth! We don’t want to <code>send()</code> 1024 bytes just so “tom” can say “Hi”.</p>
<p>So we <em>encapsulate</em> the data in a tiny header and packet structure. Both the client and server know how to pack and unpack (sometimes referred to as “marshal” and “unmarshal”) this data. Don’t look now, but we’re starting to define a <em>protocol</em> that describes how a client and server communicate!</p>
<p>In this case, let’s assume the user name is a fixed length of 8 characters, padded with <code>'\0'</code>. And then let’s assume the data is variable length, up to a maximum of 128 characters. Let’s have a look a sample packet structure that we might use in this situation:</p>
<ol type="1">
<li><p><code>len</code> (1 byte, unsigned)—The total length of the packet, counting the 8-byte user name and chat data.</p></li>
<li><p><code>name</code> (8 bytes)—The user’s name, NUL-padded if necessary.</p></li>
<li><p><code>chatdata</code> (<em>n</em>-bytes)—The data itself, no more than 128 bytes. The length of the packet should be calculated as the length of this data plus 8 (the length of the name field, above).</p></li>
</ol>
<p>Why did I choose the 8-byte and 128-byte limits for the fields? I pulled them out of the air, assuming they’d be long enough. Maybe, though, 8 bytes is too restrictive for your needs, and you can have a 30-byte name field, or whatever. The choice is up to you.</p>
<p>Using the above packet definition, the first packet would consist of the following information (in hex and ASCII):</p>
<pre><code>   0A     74 6F 6D 00 00 00 00 00      48 69
(length)  T  o  m    (padding)         H  i</code></pre>
<p>And the second is similar:</p>
<pre><code>   18     42 65 6E 6A 61 6D 69 6E      48 65 79 20 67 75 79 73 20 77 ...
(length)  B  e  n  j  a  m  i  n       H  e  y     g  u  y  s     w  ...</code></pre>
<p>(The length is stored in Network Byte Order, of course. In this case, it’s only one byte so it doesn’t matter, but generally speaking you’ll want all your binary integers to be stored in Network Byte Order in your packets.)</p>
<p>When you’re sending this data, you should be safe and use a command similar to <a href="#sendall"><code>sendall()</code></a>, above, so you know all the data is sent, even if it takes multiple calls to <code>send()</code> to get it all out.</p>
<p>Likewise, when you’re receiving this data, you need to do a bit of extra work. To be safe, you should assume that you might receive a partial packet (like maybe we receive “<code>18 42 65 6E 6A</code>” from Benjamin, above, but that’s all we get in this call to <code>recv()</code>). We need to call <code>recv()</code> over and over again until the packet is completely received.</p>
<p>But how? Well, we know the number of bytes we need to receive in total for the packet to be complete, since that number is tacked on the front of the packet. We also know the maximum packet size is 1+8+128, or 137 bytes (because that’s how we defined the packet).</p>
<p>There are actually a couple things you can do here. Since you know every packet starts off with a length, you can call <code>recv()</code> just to get the packet length. Then once you have that, you can call it again specifying exactly the remaining length of the packet (possibly repeatedly to get all the data) until you have the complete packet. The advantage of this method is that you only need a buffer large enough for one packet, while the disadvantage is that you need to call <code>recv()</code> at least twice to get all the data.</p>
<p>Another option is just to call <code>recv()</code> and say the amount you’re willing to receive is the maximum number of bytes in a packet. Then whatever you get, stick it onto the back of a buffer, and finally check to see if the packet is complete. Of course, you might get some of the next packet, so you’ll need to have room for that.</p>
<p>What you can do is declare an array big enough for two packets. This is your work array where you will reconstruct packets as they arrive.</p>
<p>Every time you <code>recv()</code> data, you’ll append it into the work buffer and check to see if the packet is complete. That is, the number of bytes in the buffer is greater than or equal to the length specified in the header (+1, because the length in the header doesn’t include the byte for the length itself). If the number of bytes in the buffer is less than 1, the packet is not complete, obviously. You have to make a special case for this, though, since the first byte is garbage and you can’t rely on it for the correct packet length.</p>
<p>Once the packet is complete, you can do with it what you will. Use it, and remove it from your work buffer.</p>
<p>Whew! Are you juggling that in your head yet? Well, here’s the second of the one-two punch: you might have read past the end of one packet and onto the next in a single <code>recv()</code> call. That is, you have a work buffer with one complete packet, and an incomplete part of the next packet! Bloody heck. (But this is why you made your work buffer large enough to hold <em>two</em> packets—in case this happened!)</p>
<p>Since you know the length of the first packet from the header, and you’ve been keeping track of the number of bytes in the work buffer, you can subtract and calculate how many of the bytes in the work buffer belong to the second (incomplete) packet. When you’ve handled the first one, you can clear it out of the work buffer and move the partial second packet down the to front of the buffer so it’s all ready to go for the next <code>recv()</code>.</p>
<p>(Some of you readers will note that actually moving the partial second packet to the beginning of the work buffer takes time, and the program can be coded to not require this by using a circular buffer. Unfortunately for the rest of you, a discussion on circular buffers is beyond the scope of this article. If you’re still curious, grab a data structures book and go from there.)</p>
<p>I never said it was easy. Ok, I did say it was easy. And it is; you just need practice and pretty soon it’ll come to you naturally. By Excalibur I swear it!</p>
<h2 data-number="7.7" id="broadcast-packetshello-world"> Broadcast Packets—Hello, World!</h2>
<p>So far, this guide has talked about sending data from one host to one other host. But it is possible, I insist, that you can, with the proper authority, send data to multiple hosts <em>at the same time</em>!</p>
<p>With UDP (only UDP, not TCP) and standard IPv4, this is done through a mechanism called <em>broadcasting</em>. With IPv6, broadcasting isn’t supported, and you have to resort to the often superior technique of <em>multicasting</em>, which, sadly I won’t be discussing at this time. But enough of the starry-eyed future—we’re stuck in the 32-bit present.</p>
<p>But wait! You can’t just run off and start broadcasting willy-nilly; You have to set the socket option <code>SO_BROADCAST</code> before you can send a broadcast packet out on the network. It’s like a one of those little plastic covers they put over the missile launch switch! That’s just how much power you hold in your hands!</p>
<p>But seriously, though, there is a danger to using broadcast packets, and that is: every system that receives a broadcast packet must undo all the onion-skin layers of data encapsulation until it finds out what port the data is destined to. And then it hands the data over or discards it. In either case, it’s a lot of work for each machine that receives the broadcast packet, and since it is all of them on the local network, that could be a lot of machines doing a lot of unnecessary work. When the game Doom first came out, this was a complaint about its network code.</p>
<p>Now, there is more than one way to skin a cat… wait a minute. Is there really more than one way to skin a cat? What kind of expression is that? Uh, and likewise, there is more than one way to send a broadcast packet. So, to get to the meat and potatoes of the whole thing: how do you specify the destination address for a broadcast message? There are two common ways:</p>
<ol type="1">
<li><p>Send the data to a specific subnet’s broadcast address. This is the subnet’s network number with all one-bits set for the host portion of the address. For instance, at home my network is <code>192.168.1.0</code>, my netmask is <code>255.255.255.0</code>, so the last byte of the address is my host number (because the first three bytes, according to the netmask, are the network number). So my broadcast address is <code>192.168.1.255</code>. Under Unix, the <code>ifconfig</code> command will actually give you all this data. (If you’re curious, the bitwise logic to get your broadcast address is <code>network_number</code> OR (NOT <code>netmask</code>).) You can send this type of broadcast packet to remote networks as well as your local network, but you run the risk of the packet being dropped by the destination’s router. (If they didn’t drop it, then some random smurf could start flooding their LAN with broadcast traffic.)</p></li>
<li><p>Send the data to the “global” broadcast address. This is <code>255.255.255.255</code>, aka <code>INADDR_BROADCAST</code>. Many machines will automatically bitwise AND this with your network number to convert it to a network broadcast address, but some won’t. It varies. Routers do not forward this type of broadcast packet off your local network, ironically enough.</p></li>
</ol>
<p>So what happens if you try to send data on the broadcast address without first setting the <code>SO_BROADCAST</code> socket option? Well, let’s fire up good old <a href="#datagram"><code>talker</code> and <code>listener</code></a> and see what happens.</p>
<pre><code>$ talker 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ talker 192.168.1.255 foo
sendto: Permission denied
$ talker 255.255.255.255 foo
sendto: Permission denied</code></pre>
<p>Yes, it’s not happy at all…because we didn’t set the <code>SO_BROADCAST</code> socket option. Do that, and now you can <code>sendto()</code> anywhere you want!</p>
<p>In fact, that’s the <em>only difference</em> between a UDP application that can broadcast and one that can’t. So let’s take the old <code>talker</code> application and add one section that sets the <code>SO_BROADCAST</code> socket option. We’ll call this program <a href="https://beej.us/guide/bgnet/examples/broadcaster.c"><code>broadcaster.c</code></a><a href="#fn42" id="fnref42" role="doc-noteref"><sup>42</sup></a>:</p>
<div id="cb75"><pre><code><span id="cb75-1"><a href="#cb75-1"></a><span>/*</span></span>
<span id="cb75-2"><a href="#cb75-2"></a><span>** broadcaster.c -- a datagram "client" like talker.c, except</span></span>
<span id="cb75-3"><a href="#cb75-3"></a><span>**                  this one can broadcast</span></span>
<span id="cb75-4"><a href="#cb75-4"></a><span>*/</span></span>
<span id="cb75-5"><a href="#cb75-5"></a></span>
<span id="cb75-6"><a href="#cb75-6"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb75-7"><a href="#cb75-7"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb75-8"><a href="#cb75-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb75-9"><a href="#cb75-9"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb75-10"><a href="#cb75-10"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb75-11"><a href="#cb75-11"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb75-12"><a href="#cb75-12"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb75-13"><a href="#cb75-13"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb75-14"><a href="#cb75-14"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb75-15"><a href="#cb75-15"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb75-16"><a href="#cb75-16"></a></span>
<span id="cb75-17"><a href="#cb75-17"></a><span>#define SERVERPORT </span><span>4950</span><span> </span><span>// the port users will be connecting to</span></span>
<span id="cb75-18"><a href="#cb75-18"></a></span>
<span id="cb75-19"><a href="#cb75-19"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb75-20"><a href="#cb75-20"></a><span>{</span></span>
<span id="cb75-21"><a href="#cb75-21"></a>    <span>int</span> sockfd<span>;</span></span>
<span id="cb75-22"><a href="#cb75-22"></a>    <span>struct</span> sockaddr_in their_addr<span>;</span> <span>// connector's address information</span></span>
<span id="cb75-23"><a href="#cb75-23"></a>    <span>struct</span> hostent <span>*</span>he<span>;</span></span>
<span id="cb75-24"><a href="#cb75-24"></a>    <span>int</span> numbytes<span>;</span></span>
<span id="cb75-25"><a href="#cb75-25"></a>    <span>int</span> broadcast <span>=</span> <span>1</span><span>;</span></span>
<span id="cb75-26"><a href="#cb75-26"></a>    <span>//char broadcast = '1'; // if that doesn't work, try this</span></span>
<span id="cb75-27"><a href="#cb75-27"></a></span>
<span id="cb75-28"><a href="#cb75-28"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>3</span><span>)</span> <span>{</span></span>
<span id="cb75-29"><a href="#cb75-29"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: broadcaster hostname message</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb75-30"><a href="#cb75-30"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-31"><a href="#cb75-31"></a>    <span>}</span></span>
<span id="cb75-32"><a href="#cb75-32"></a></span>
<span id="cb75-33"><a href="#cb75-33"></a>    <span>if</span> <span>((</span>he<span>=</span>gethostbyname<span>(</span>argv<span>[</span><span>1</span><span>]))</span> <span>==</span> NULL<span>)</span> <span>{</span>  <span>// get the host info</span></span>
<span id="cb75-34"><a href="#cb75-34"></a>        perror<span>(</span><span>"gethostbyname"</span><span>);</span></span>
<span id="cb75-35"><a href="#cb75-35"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-36"><a href="#cb75-36"></a>    <span>}</span></span>
<span id="cb75-37"><a href="#cb75-37"></a></span>
<span id="cb75-38"><a href="#cb75-38"></a>    <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>AF_INET<span>,</span> SOCK_DGRAM<span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb75-39"><a href="#cb75-39"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb75-40"><a href="#cb75-40"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-41"><a href="#cb75-41"></a>    <span>}</span></span>
<span id="cb75-42"><a href="#cb75-42"></a></span>
<span id="cb75-43"><a href="#cb75-43"></a>    <span>// this call is what allows broadcast packets to be sent:</span></span>
<span id="cb75-44"><a href="#cb75-44"></a>    <span>if</span> <span>(</span>setsockopt<span>(</span>sockfd<span>,</span> SOL_SOCKET<span>,</span> SO_BROADCAST<span>,</span> <span>&amp;</span>broadcast<span>,</span></span>
<span id="cb75-45"><a href="#cb75-45"></a>        <span>sizeof</span> broadcast<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb75-46"><a href="#cb75-46"></a>        perror<span>(</span><span>"setsockopt (SO_BROADCAST)"</span><span>);</span></span>
<span id="cb75-47"><a href="#cb75-47"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-48"><a href="#cb75-48"></a>    <span>}</span></span>
<span id="cb75-49"><a href="#cb75-49"></a></span>
<span id="cb75-50"><a href="#cb75-50"></a>    their_addr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span>     <span>// host byte order</span></span>
<span id="cb75-51"><a href="#cb75-51"></a>    their_addr<span>.</span>sin_port <span>=</span> htons<span>(</span>SERVERPORT<span>);</span> <span>// short, network byte order</span></span>
<span id="cb75-52"><a href="#cb75-52"></a>    their_addr<span>.</span>sin_addr <span>=</span> <span>*((</span><span>struct</span> in_addr <span>*)</span>he<span>-&gt;</span>h_addr<span>);</span></span>
<span id="cb75-53"><a href="#cb75-53"></a>    memset<span>(</span>their_addr<span>.</span>sin_zero<span>,</span> <span>'</span><span>\0</span><span>'</span><span>,</span> <span>sizeof</span> their_addr<span>.</span>sin_zero<span>);</span></span>
<span id="cb75-54"><a href="#cb75-54"></a></span>
<span id="cb75-55"><a href="#cb75-55"></a>    <span>if</span> <span>((</span>numbytes<span>=</span>sendto<span>(</span>sockfd<span>,</span> argv<span>[</span><span>2</span><span>],</span> strlen<span>(</span>argv<span>[</span><span>2</span><span>]),</span> <span>0</span><span>,</span></span>
<span id="cb75-56"><a href="#cb75-56"></a>             <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>sizeof</span> their_addr<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb75-57"><a href="#cb75-57"></a>        perror<span>(</span><span>"sendto"</span><span>);</span></span>
<span id="cb75-58"><a href="#cb75-58"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-59"><a href="#cb75-59"></a>    <span>}</span></span>
<span id="cb75-60"><a href="#cb75-60"></a></span>
<span id="cb75-61"><a href="#cb75-61"></a>    printf<span>(</span><span>"sent </span><span>%d</span><span> bytes to </span><span>%s\n</span><span>"</span><span>,</span> numbytes<span>,</span></span>
<span id="cb75-62"><a href="#cb75-62"></a>        inet_ntoa<span>(</span>their_addr<span>.</span>sin_addr<span>));</span></span>
<span id="cb75-63"><a href="#cb75-63"></a></span>
<span id="cb75-64"><a href="#cb75-64"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb75-65"><a href="#cb75-65"></a></span>
<span id="cb75-66"><a href="#cb75-66"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb75-67"><a href="#cb75-67"></a><span>}</span></span></code></pre></div>
<p>What’s different between this and a “normal” UDP client/server situation? Nothing! (With the exception of the client being allowed to send broadcast packets in this case.) As such, go ahead and run the old UDP <a href="#datagram"><code>listener</code></a> program in one window, and <code>broadcaster</code> in another. You should be now be able to do all those sends that failed, above.</p>
<pre><code>$ broadcaster 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ broadcaster 192.168.1.255 foo
sent 3 bytes to 192.168.1.255
$ broadcaster 255.255.255.255 foo
sent 3 bytes to 255.255.255.255</code></pre>
<p>And you should see <code>listener</code> responding that it got the packets. (If <code>listener</code> doesn’t respond, it could be because it’s bound to an IPv6 address. Try changing the <code>AF_INET6</code> in <code>listener.c</code> to <code>AF_INET</code> to force IPv4.)</p>
<p>Well, that’s kind of exciting. But now fire up <code>listener</code> on another machine next to you on the same network so that you have two copies going, one on each machine, and run <code>broadcaster</code> again with your broadcast address… Hey! Both <code>listener</code>s get the packet even though you only called <code>sendto()</code> once! Cool!</p>
<p>If the <code>listener</code> gets data you send directly to it, but not data on the broadcast address, it could be that you have a firewall on your local machine that is blocking the packets. (Yes, Pat and Bapper, thank you for realizing before I did that this is why my sample code wasn’t working. I told you I’d mention you in the guide, and here you are. So <em>nyah</em>.)</p>
<p>Again, be careful with broadcast packets. Since every machine on the LAN will be forced to deal with the packet whether it <code>recvfrom()</code>s it or not, it can present quite a load to the entire computing network. They are definitely to be used sparingly and appropriately.</p>
<h2 data-number="8" id="common-questions"> Common Questions</h2>
<p><strong>Where can I get those header files?</strong></p>
<p> If you don’t have them on your system already, you probably don’t need them. Check the manual for your particular platform. If you’re building for Windows, you only need to <code>#include &lt;winsock.h&gt;</code>.</p>
<p><strong>What do I do when <code>bind()</code> reports “Address already in use”?</strong></p>
<p>You have to use <code>setsockopt()</code> with the <code>SO_REUSEADDR</code> option on the listening socket. Check out the <a href="#bind">section on <code>bind()</code></a> and the <a href="#select">section on <code>select()</code></a> for an example.</p>
<p><strong>How do I get a list of open sockets on the system?</strong></p>
<p>Use the <code>netstat</code>. Check the <code>man</code> page for full details, but you should get some good output just typing:</p>
<pre><code>$ netstat</code></pre>
<p>The only trick is determining which socket is associated with which program. <code>:-)</code></p>
<p><strong>How can I view the routing table?</strong></p>
<p>Run the <code>route</code> command (in <code>/sbin</code> on most Linuxes) or the command <code>netstat -r</code>. Or the command <code>ip route</code>.</p>
<p><strong>How can I run the client and server programs if I only have one computer? Don’t I need a network to write network programs?</strong></p>
<p>Fortunately for you, virtually all machines implement a loopback network “device” that sits in the kernel and pretends to be a network card. (This is the interface listed as “<code>lo</code>” in the routing table.)</p>
<p>Pretend you’re logged into a machine named “<code>goat</code>”. Run the client in one window and the server in another. Or start the server in the background (“<code>server &amp;</code>”) and run the client in the same window. The upshot of the loopback device is that you can either <code>client goat</code> or <code>client localhost</code> (since “<code>localhost</code>” is likely defined in your <code>/etc/hosts</code> file) and you’ll have the client talking to the server without a network!</p>
<p>In short, no changes are necessary to any of the code to make it run on a single non-networked machine! Huzzah!</p>
<p><strong>How can I tell if the remote side has closed connection?</strong></p>
<p>You can tell because <code>recv()</code> will return <code>0</code>.</p>
<p><strong>How do I implement a “ping” utility? What is ICMP? Where can I find out more about raw sockets and <code>SOCK_RAW</code>?</strong></p>

<p>All your raw sockets questions will be answered in <a href="#books">W. Richard Stevens’ UNIX Network Programming books</a>. Also, look in the <code>ping/</code> subdirectory in Stevens’ UNIX Network Programming source code, <a href="http://www.unpbook.com/src.html">available online</a><a href="#fn43" id="fnref43" role="doc-noteref"><sup>43</sup></a>.</p>
<p><strong>How do I change or shorten the timeout on a call to <code>connect()</code>?</strong></p>
<p>Instead of giving you exactly the same answer that W. Richard Stevens would give you, I’ll just refer you to <a href="http://www.unpbook.com/src.html"><code>lib/connect_nonb.c</code> in the UNIX Network Programming source code</a><a href="#fn44" id="fnref44" role="doc-noteref"><sup>44</sup></a>.</p>
<p>The gist of it is that you make a socket descriptor with <code>socket()</code>, <a href="#blocking">set it to non-blocking</a>, call <code>connect()</code>, and if all goes well <code>connect()</code> will return <code>-1</code> immediately and <code>errno</code> will be set to <code>EINPROGRESS</code>. Then you call <a href="#select"><code>select()</code></a> with whatever timeout you want, passing the socket descriptor in both the read and write sets. If it doesn’t timeout, it means the <code>connect()</code> call completed. At this point, you’ll have to use <code>getsockopt()</code> with the <code>SO_ERROR</code> option to get the return value from the <code>connect()</code> call, which should be zero if there was no error.</p>
<p>Finally, you’ll probably want to set the socket back to be blocking again before you start transferring data over it.</p>
<p>Notice that this has the added benefit of allowing your program to do something else while it’s connecting, too. You could, for example, set the timeout to something low, like 500 ms, and update an indicator onscreen each timeout, then call <code>select()</code> again. When you’ve called <code>select()</code> and timed-out, say, 20 times, you’ll know it’s time to give up on the connection.</p>
<p>Like I said, check out Stevens’ source for a perfectly excellent example.</p>
<p><strong>How do I build for Windows?</strong></p>
<p>First, delete Windows and install Linux or BSD. <code>};-)</code>. No, actually, just see the <a href="#windows">section on building for Windows</a> in the introduction.</p>
<p><strong>How do I build for Solaris/SunOS? I keep getting linker errors when I try to compile!</strong></p>
<p>The linker errors happen because Sun boxes don’t automatically compile in the socket libraries. See the <a href="#solaris">section on building for Solaris/SunOS</a> in the introduction for an example of how to do this.</p>
<p><strong>Why does <code>select()</code> keep falling out on a signal?</strong></p>
<p>Signals tend to cause blocked system calls to return <code>-1</code> with <code>errno</code> set to <code>EINTR</code>. When you set up a signal handler with <code>sigaction()</code>, you can set the flag <code>SA_RESTART</code>, which is supposed to restart the system call after it was interrupted.</p>
<p>Naturally, this doesn’t always work.</p>
<p>My favorite solution to this involves a <code>goto</code> statement. You know this irritates your professors to no end, so go for it!</p>
<div id="cb78"><pre><code><span id="cb78-1"><a href="#cb78-1"></a>select_restart<span>:</span></span>
<span id="cb78-2"><a href="#cb78-2"></a><span>if</span> <span>((</span>err <span>=</span> select<span>(</span>fdmax<span>+</span><span>1</span><span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>,</span> NULL<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb78-3"><a href="#cb78-3"></a>    <span>if</span> <span>(</span>errno <span>==</span> EINTR<span>)</span> <span>{</span></span>
<span id="cb78-4"><a href="#cb78-4"></a>        <span>// some signal just interrupted us, so restart</span></span>
<span id="cb78-5"><a href="#cb78-5"></a>        <span>goto</span> select_restart<span>;</span></span>
<span id="cb78-6"><a href="#cb78-6"></a>    <span>}</span></span>
<span id="cb78-7"><a href="#cb78-7"></a>    <span>// handle the real error here:</span></span>
<span id="cb78-8"><a href="#cb78-8"></a>    perror<span>(</span><span>"select"</span><span>);</span></span>
<span id="cb78-9"><a href="#cb78-9"></a><span>}</span> </span></code></pre></div>
<p>Sure, you don’t <em>need</em> to use <code>goto</code> in this case; you can use other structures to control it. But I think the <code>goto</code> statement is actually cleaner.</p>
<p><strong>How can I implement a timeout on a call to <code>recv()</code>?</strong></p>
<p> Use <a href="#select"><code>select()</code></a>! It allows you to specify a timeout parameter for socket descriptors that you’re looking to read from. Or, you could wrap the entire functionality in a single function, like this:</p>
<div id="cb79"><pre><code><span id="cb79-1"><a href="#cb79-1"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb79-2"><a href="#cb79-2"></a><span>#include </span><span>&lt;sys/time.h&gt;</span></span>
<span id="cb79-3"><a href="#cb79-3"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb79-4"><a href="#cb79-4"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb79-5"><a href="#cb79-5"></a></span>
<span id="cb79-6"><a href="#cb79-6"></a><span>int</span> recvtimeout<span>(</span><span>int</span> s<span>,</span> <span>char</span> <span>*</span>buf<span>,</span> <span>int</span> len<span>,</span> <span>int</span> timeout<span>)</span></span>
<span id="cb79-7"><a href="#cb79-7"></a><span>{</span></span>
<span id="cb79-8"><a href="#cb79-8"></a>    fd_set fds<span>;</span></span>
<span id="cb79-9"><a href="#cb79-9"></a>    <span>int</span> n<span>;</span></span>
<span id="cb79-10"><a href="#cb79-10"></a>    <span>struct</span> timeval tv<span>;</span></span>
<span id="cb79-11"><a href="#cb79-11"></a></span>
<span id="cb79-12"><a href="#cb79-12"></a>    <span>// set up the file descriptor set</span></span>
<span id="cb79-13"><a href="#cb79-13"></a>    FD_ZERO<span>(&amp;</span>fds<span>);</span></span>
<span id="cb79-14"><a href="#cb79-14"></a>    FD_SET<span>(</span>s<span>,</span> <span>&amp;</span>fds<span>);</span></span>
<span id="cb79-15"><a href="#cb79-15"></a></span>
<span id="cb79-16"><a href="#cb79-16"></a>    <span>// set up the struct timeval for the timeout</span></span>
<span id="cb79-17"><a href="#cb79-17"></a>    tv<span>.</span>tv_sec <span>=</span> timeout<span>;</span></span>
<span id="cb79-18"><a href="#cb79-18"></a>    tv<span>.</span>tv_usec <span>=</span> <span>0</span><span>;</span></span>
<span id="cb79-19"><a href="#cb79-19"></a></span>
<span id="cb79-20"><a href="#cb79-20"></a>    <span>// wait until timeout or data received</span></span>
<span id="cb79-21"><a href="#cb79-21"></a>    n <span>=</span> select<span>(</span>s<span>+</span><span>1</span><span>,</span> <span>&amp;</span>fds<span>,</span> NULL<span>,</span> NULL<span>,</span> <span>&amp;</span>tv<span>);</span></span>
<span id="cb79-22"><a href="#cb79-22"></a>    <span>if</span> <span>(</span>n <span>==</span> <span>0</span><span>)</span> <span>return</span> <span>-</span><span>2</span><span>;</span> <span>// timeout!</span></span>
<span id="cb79-23"><a href="#cb79-23"></a>    <span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span> <span>-</span><span>1</span><span>;</span> <span>// error</span></span>
<span id="cb79-24"><a href="#cb79-24"></a></span>
<span id="cb79-25"><a href="#cb79-25"></a>    <span>// data must be here, so do a normal recv()</span></span>
<span id="cb79-26"><a href="#cb79-26"></a>    <span>return</span> recv<span>(</span>s<span>,</span> buf<span>,</span> len<span>,</span> <span>0</span><span>);</span></span>
<span id="cb79-27"><a href="#cb79-27"></a><span>}</span></span>
<span id="cb79-28"><a href="#cb79-28"></a><span>.</span></span>
<span id="cb79-29"><a href="#cb79-29"></a><span>.</span></span>
<span id="cb79-30"><a href="#cb79-30"></a><span>.</span></span>
<span id="cb79-31"><a href="#cb79-31"></a><span>// Sample call to recvtimeout():</span></span>
<span id="cb79-32"><a href="#cb79-32"></a>n <span>=</span> recvtimeout<span>(</span>s<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>10</span><span>);</span> <span>// 10 second timeout</span></span>
<span id="cb79-33"><a href="#cb79-33"></a></span>
<span id="cb79-34"><a href="#cb79-34"></a><span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb79-35"><a href="#cb79-35"></a>    <span>// error occurred</span></span>
<span id="cb79-36"><a href="#cb79-36"></a>    perror<span>(</span><span>"recvtimeout"</span><span>);</span></span>
<span id="cb79-37"><a href="#cb79-37"></a><span>}</span></span>
<span id="cb79-38"><a href="#cb79-38"></a><span>else</span> <span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>2</span><span>)</span> <span>{</span></span>
<span id="cb79-39"><a href="#cb79-39"></a>    <span>// timeout occurred</span></span>
<span id="cb79-40"><a href="#cb79-40"></a><span>}</span> <span>else</span> <span>{</span></span>
<span id="cb79-41"><a href="#cb79-41"></a>    <span>// got some data in buf</span></span>
<span id="cb79-42"><a href="#cb79-42"></a><span>}</span></span>
<span id="cb79-43"><a href="#cb79-43"></a><span>.</span></span>
<span id="cb79-44"><a href="#cb79-44"></a><span>.</span></span>
<span id="cb79-45"><a href="#cb79-45"></a><span>.</span> </span></code></pre></div>
<p>Notice that <code>recvtimeout()</code> returns <code>-2</code> in case of a timeout. Why not return <code>0</code>? Well, if you recall, a return value of <code>0</code> on a call to <code>recv()</code> means that the remote side closed the connection. So that return value is already spoken for, and <code>-1</code> means “error”, so I chose <code>-2</code> as my timeout indicator.</p>
<p><strong>How do I encrypt or compress the data before sending it through the socket?</strong></p>
<p>One easy way to do encryption is to use SSL (secure sockets layer), but that’s beyond the scope of this guide. (Check out the <a href="https://www.openssl.org/">OpenSSL project</a><a href="#fn45" id="fnref45" role="doc-noteref"><sup>45</sup></a> for more info.)</p>
<p>But assuming you want to plug in or implement your own compressor or encryption system, it’s just a matter of thinking of your data as running through a sequence of steps between both ends. Each step changes the data in some way.</p>
<ol type="1">
<li>server reads data from file (or wherever)</li>
<li>server encrypts/compresses data (you add this part)</li>
<li>server <code>send()</code>s encrypted data</li>
</ol>
<p>Now the other way around:</p>
<ol type="1">
<li>client <code>recv()</code>s encrypted data</li>
<li>client decrypts/decompresses data (you add this part)</li>
<li>client writes data to file (or wherever)</li>
</ol>
<p>If you’re going to compress and encrypt, just remember to compress first. <code>:-)</code></p>
<p>Just as long as the client properly undoes what the server does, the data will be fine in the end no matter how many intermediate steps you add.</p>
<p>So all you need to do to use my code is to find the place between where the data is read and the data is sent (using <code>send()</code>) over the network, and stick some code in there that does the encryption.</p>
<p><strong>What is this “<code>PF_INET</code>” I keep seeing? Is it related to <code>AF_INET</code>?</strong></p>

<p>Yes, yes it is. See <a href="#socket">the section on <code>socket()</code></a> for details.</p>
<p><strong>How can I write a server that accepts shell commands from a client and executes them?</strong></p>
<p>For simplicity, lets say the client <code>connect()</code>s, <code>send()</code>s, and <code>close()</code>s the connection (that is, there are no subsequent system calls without the client connecting again).</p>
<p>The process the client follows is this:</p>
<ol type="1">
<li><code>connect()</code> to server</li>
<li><code>send("/sbin/ls &gt; /tmp/client.out")</code></li>
<li><code>close()</code> the connection</li>
</ol>
<p>Meanwhile, the server is handling the data and executing it:</p>
<ol type="1">
<li><code>accept()</code> the connection from the client</li>
<li><code>recv(str)</code> the command string</li>
<li><code>close()</code> the connection</li>
<li><code>system(str)</code> to run the command</li>
</ol>
<p> <em>Beware!</em> Having the server execute what the client says is like giving remote shell access and people can do things to your account when they connect to the server. For instance, in the above example, what if the client sends “<code>rm -rf ~</code>”? It deletes everything in your account, that’s what!</p>
<p>So you get wise, and you prevent the client from using any except for a couple utilities that you know are safe, like the <code>foobar</code> utility:</p>
<div id="cb80"><pre><code><span id="cb80-1"><span>if</span> <span>(!</span>strncmp<span>(</span>str<span>,</span> <span>"foobar"</span><span>,</span> <span>6</span><span>))</span> <span>{</span></span>
<span id="cb80-2">    sprintf<span>(</span>sysstr<span>,</span> <span>"</span><span>%s</span><span> &gt; /tmp/server.out"</span><span>,</span> str<span>);</span></span>
<span id="cb80-3">    system<span>(</span>sysstr<span>);</span></span>
<span id="cb80-4"><span>}</span> </span></code></pre></div>
<p>But you’re still unsafe, unfortunately: what if the client enters “<code>foobar; rm -rf ~</code>”? The safest thing to do is to write a little routine that puts an escape (“<code>\</code>”) character in front of all non-alphanumeric characters (including spaces, if appropriate) in the arguments for the command.</p>
<p>As you can see, security is a pretty big issue when the server starts executing things the client sends.</p>
<p><strong>I’m sending a slew of data, but when I <code>recv()</code>, it only receives 536 bytes or 1460 bytes at a time. But if I run it on my local machine, it receives all the data at the same time. What’s going on?</strong></p>
<p>You’re hitting the MTU—the maximum size the physical medium can handle. On the local machine, you’re using the loopback device which can handle 8K or more no problem. But on Ethernet, which can only handle 1500 bytes with a header, you hit that limit. Over a modem, with 576 MTU (again, with header), you hit the even lower limit.</p>
<p>You have to make sure all the data is being sent, first of all. (See the <a href="#sendall"><code>sendall()</code></a> function implementation for details.) Once you’re sure of that, then you need to call <code>recv()</code> in a loop until all your data is read.</p>
<p>Read the section <a href="#sonofdataencap">Son of Data Encapsulation</a> for details on receiving complete packets of data using multiple calls to <code>recv()</code>.</p>
<p><strong>I’m on a Windows box and I don’t have the <code>fork()</code> system call or any kind of <code>struct sigaction</code>. What to do?</strong></p>
<p> If they’re anywhere, they’ll be in POSIX libraries that may have shipped with your compiler. Since I don’t have a Windows box, I really can’t tell you the answer, but I seem to remember that Microsoft has a POSIX compatibility layer and that’s where <code>fork()</code> would be. (And maybe even <code>sigaction</code>.)</p>
<p>Search the help that came with VC++ for “fork” or “POSIX” and see if it gives you any clues.</p>
<p>If that doesn’t work at all, ditch the <code>fork()</code>/<code>sigaction</code> stuff and replace it with the Win32 equivalent: <code>CreateProcess()</code>. I don’t know how to use <code>CreateProcess()</code>—it takes a bazillion arguments, but it should be covered in the docs that came with VC++.</p>
<p><strong> I’m behind a firewall—how do I let people outside the firewall know my IP address so they can connect to my machine?</strong></p>
<p>Unfortunately, the purpose of a firewall is to prevent people outside the firewall from connecting to machines inside the firewall, so allowing them to do so is basically considered a breach of security.</p>
<p>This isn’t to say that all is lost. For one thing, you can still often <code>connect()</code> through the firewall if it’s doing some kind of masquerading or NAT or something like that. Just design your programs so that you’re always the one initiating the connection, and you’ll be fine.</p>
<p> If that’s not satisfactory, you can ask your sysadmins to poke a hole in the firewall so that people can connect to you. The firewall can forward to you either through it’s NAT software, or through a proxy or something like that.</p>
<p>Be aware that a hole in the firewall is nothing to be taken lightly. You have to make sure you don’t give bad people access to the internal network; if you’re a beginner, it’s a lot harder to make software secure than you might imagine.</p>
<p>Don’t make your sysadmin mad at me. <code>;-)</code></p>
<p><strong> How do I write a packet sniffer? How do I put my Ethernet interface into promiscuous mode?</strong></p>
<p>For those not in the know, when a network card is in “promiscuous mode”, it will forward ALL packets to the operating system, not just those that were addressed to this particular machine. (We’re talking Ethernet-layer addresses here, not IP addresses–but since ethernet is lower-layer than IP, all IP addresses are effectively forwarded as well. See the section <a href="#lowlevel">Low Level Nonsense and Network Theory</a> for more info.)</p>
<p>This is the basis for how a packet sniffer works. It puts the interface into promiscuous mode, then the OS gets every single packet that goes by on the wire. You’ll have a socket of some type that you can read this data from.</p>
<p>Unfortunately, the answer to the question varies depending on the platform, but if you Google for, for instance, “windows promiscuous ioctl” you’ll probably get somewhere. For Linux, there’s what looks like a <a href="https://stackoverflow.com/questions/21323023/">useful Stack Overflow thread</a><a href="#fn46" id="fnref46" role="doc-noteref"><sup>46</sup></a>, as well.</p>
<p><strong>How can I set a custom timeout value for a TCP or UDP socket?</strong></p>
<p>It depends on your system. You might search the net for <code>SO_RCVTIMEO</code> and <code>SO_SNDTIMEO</code> (for use with <code>setsockopt()</code>) to see if your system supports such functionality.</p>
<p>The Linux man page suggests using <code>alarm()</code> or <code>setitimer()</code> as a substitute.</p>
<p><strong>How can I tell which ports are available to use? Is there a list of “official” port numbers?</strong></p>
<p>Usually this isn’t an issue. If you’re writing, say, a web server, then it’s a good idea to use the well-known port 80 for your software. If you’re writing just your own specialized server, then choose a port at random (but greater than 1023) and give it a try.</p>
<p>If the port is already in use, you’ll get an “Address already in use” error when you try to <code>bind()</code>. Choose another port. (It’s a good idea to allow the user of your software to specify an alternate port either with a config file or a command line switch.)</p>
<p>There is a <a href="https://www.iana.org/assignments/port-numbers">list of official port numbers</a><a href="#fn47" id="fnref47" role="doc-noteref"><sup>47</sup></a> maintained by the Internet Assigned Numbers Authority (IANA). Just because something (over 1023) is in that list doesn’t mean you can’t use the port. For instance, Id Software’s DOOM uses the same port as “mdqs”, whatever that is. All that matters is that no one else <em>on the same machine</em> is using that port when you want to use it.</p>
<h2 data-number="9" id="man-pages"> Man Pages</h2>

<p>In the Unix world, there are a lot of manuals. They have little sections that describe individual functions that you have at your disposal.</p>
<p>Of course, <code>manual</code> would be too much of a thing to type. I mean, no one in the Unix world, including myself, likes to type that much. Indeed I could go on and on at great length about how much I prefer to be terse but instead I shall be brief and not bore you with long-winded diatribes about how utterly amazingly brief I prefer to be in virtually all circumstances in their entirety.</p>
<p><em>[Applause]</em></p>
<p>Thank you. What I am getting at is that these pages are called “man pages” in the Unix world, and I have included my own personal truncated variant here for your reading enjoyment. The thing is, many of these functions are way more general purpose than I’m letting on, but I’m only going to present the parts that are relevant for Internet Sockets Programming.</p>
<p>But wait! That’s not all that’s wrong with my man pages:</p>
<ul>
<li>They are incomplete and only show the basics from the guide.</li>
<li>There are many more man pages than this in the real world.</li>
<li>They are different than the ones on your system.</li>
<li>The header files might be different for certain functions on your system.</li>
<li>The function parameters might be different for certain functions on your system.</li>
</ul>
<p>If you want the real information, check your local Unix man pages by typing <code>man whatever</code>, where “whatever” is something that you’re incredibly interested in, such as “<code>accept</code>”. (I’m sure Microsoft Visual Studio has something similar in their help section. But “man” is better because it is one byte more concise than “help”. Unix wins again!)</p>
<p>So, if these are so flawed, why even include them at all in the Guide? Well, there are a few reasons, but the best are that (a) these versions are geared specifically toward network programming and are easier to digest than the real ones, and (b) these versions contain examples!</p>
<p>Oh! And speaking of the examples, I don’t tend to put in all the error checking because it really increases the length of the code. But you should absolutely do error checking pretty much any time you make any of the system calls unless you’re totally 100% sure it’s not going to fail, and you should probably do it even then!</p>

<h2 data-number="9.1" id="acceptman"> <code>accept()</code></h2>

<p>Accept an incoming connection on a listening socket</p>
<h3 id="synopsis">Synopsis</h3>
<div id="cb81"><pre><code><span id="cb81-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb81-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb81-3"></span>
<span id="cb81-4"><span>int</span> accept<span>(</span><span>int</span> s<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> socklen_t <span>*</span>addrlen<span>);</span></span></code></pre></div>
<h3 id="description">Description</h3>
<p>Once you’ve gone through the trouble of getting a <code>SOCK_STREAM</code> socket and setting it up for incoming connections with <code>listen()</code>, then you call <code>accept()</code> to actually get yourself a new socket descriptor to use for subsequent communication with the newly connected client.</p>
<p>The old socket that you are using for listening is still there, and will be used for further <code>accept()</code> calls as they come in.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>s</code></td>
<td>The <code>listen()</code>ing socket descriptor.</td>
</tr>
<tr>
<td><code>addr</code></td>
<td>This is filled in with the address of the site that’s connecting to you.</td>
</tr>
<tr>
<td><code>addrlen</code></td>
<td>This is filled in with the <code>sizeof()</code> the structure returned in the <code>addr</code> parameter. You can safely ignore it if you assume you’re getting a <code>struct sockaddr_in</code> back, which you know you are, because that’s the type you passed in for <code>addr</code>.</td>
</tr>
</tbody>
</table>
<p><code>accept()</code> will normally block, and you can use <code>select()</code> to peek on the listening socket descriptor ahead of time to see if it’s “ready to read”. If so, then there’s a new connection waiting to be <code>accept()</code>ed! Yay! Alternatively, you could set the <code>O_NONBLOCK</code> flag on the listening socket using <code>fcntl()</code>, and then it will never block, choosing instead to return <code>-1</code> with <code>errno</code> set to <code>EWOULDBLOCK</code>.</p>
<p>The socket descriptor returned by <code>accept()</code> is a bona fide socket descriptor, open and connected to the remote host. You have to <code>close()</code> it when you’re done with it.</p>
<h3 id="return-value">Return Value</h3>
<p><code>accept()</code> returns the newly connected socket descriptor, or <code>-1</code> on error, with <code>errno</code> set appropriately.</p>
<h3 id="example">Example</h3>
<div id="cb82"><pre><code><span id="cb82-1"><a href="#cb82-1"></a><span>struct</span> sockaddr_storage their_addr<span>;</span></span>
<span id="cb82-2"><a href="#cb82-2"></a>socklen_t addr_size<span>;</span></span>
<span id="cb82-3"><a href="#cb82-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb82-4"><a href="#cb82-4"></a><span>int</span> sockfd<span>,</span> new_fd<span>;</span></span>
<span id="cb82-5"><a href="#cb82-5"></a></span>
<span id="cb82-6"><a href="#cb82-6"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb82-7"><a href="#cb82-7"></a></span>
<span id="cb82-8"><a href="#cb82-8"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb82-9"><a href="#cb82-9"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb82-10"><a href="#cb82-10"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb82-11"><a href="#cb82-11"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb82-12"><a href="#cb82-12"></a></span>
<span id="cb82-13"><a href="#cb82-13"></a>getaddrinfo<span>(</span>NULL<span>,</span> MYPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb82-14"><a href="#cb82-14"></a></span>
<span id="cb82-15"><a href="#cb82-15"></a><span>// make a socket, bind it, and listen on it:</span></span>
<span id="cb82-16"><a href="#cb82-16"></a></span>
<span id="cb82-17"><a href="#cb82-17"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb82-18"><a href="#cb82-18"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb82-19"><a href="#cb82-19"></a>listen<span>(</span>sockfd<span>,</span> BACKLOG<span>);</span></span>
<span id="cb82-20"><a href="#cb82-20"></a></span>
<span id="cb82-21"><a href="#cb82-21"></a><span>// now accept an incoming connection:</span></span>
<span id="cb82-22"><a href="#cb82-22"></a></span>
<span id="cb82-23"><a href="#cb82-23"></a>addr_size <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb82-24"><a href="#cb82-24"></a>new_fd <span>=</span> accept<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>addr_size<span>);</span></span>
<span id="cb82-25"><a href="#cb82-25"></a></span>
<span id="cb82-26"><a href="#cb82-26"></a><span>// ready to communicate on socket descriptor new_fd!</span></span></code></pre></div>
<h3 id="see-also">See Also</h3>
<p><a href="#socketman"><code>socket()</code></a>, <a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#listenman"><code>listen()</code></a>, <a href="#structsockaddrman"><code>struct sockaddr_in</code></a></p>
<h2 data-number="9.2" id="bindman"> <code>bind()</code></h2>

<p>Associate a socket with an IP address and port number</p>
<h3 id="synopsis-1">Synopsis</h3>
<div id="cb83"><pre><code><span id="cb83-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb83-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb83-3"></span>
<span id="cb83-4"><span>int</span> bind<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>my_addr<span>,</span> socklen_t addrlen<span>);</span></span></code></pre></div>
<h3 id="description-1">Description</h3>
<p>When a remote machine wants to connect to your server program, it needs two pieces of information: the IP address and the port number. The <code>bind()</code> call allows you to do just that.</p>
<p>First, you call <code>getaddrinfo()</code> to load up a <code>struct sockaddr</code> with the destination address and port information. Then you call <code>socket()</code> to get a socket descriptor, and then you pass the socket and address into <code>bind()</code>, and the IP address and port are magically (using actual magic) bound to the socket!</p>
<p>If you don’t know your IP address, or you know you only have one IP address on the machine, or you don’t care which of the machine’s IP addresses is used, you can simply pass the <code>AI_PASSIVE</code> flag in the <code>hints</code> parameter to <code>getaddrinfo()</code>. What this does is fill in the IP address part of the <code>struct sockaddr</code> with a special value that tells <code>bind()</code> that it should automatically fill in this host’s IP address.</p>
<p>What what? What special value is loaded into the <code>struct sockaddr</code>’s IP address to cause it to auto-fill the address with the current host? I’ll tell you, but keep in mind this is only if you’re filling out the <code>struct sockaddr</code> by hand; if not, use the results from <code>getaddrinfo()</code>, as per above. In IPv4, the <code>sin_addr.s_addr</code> field of the <code>struct sockaddr_in</code> structure is set to <code>INADDR_ANY</code>. In IPv6, the <code>sin6_addr</code> field of the <code>struct sockaddr_in6</code> structure is assigned into from the global variable <code>in6addr_any</code>. Or, if you’re declaring a new <code>struct in6_addr</code>, you can initialize it to <code>IN6ADDR_ANY_INIT</code>.</p>
<p>Lastly, the <code>addrlen</code> parameter should be set to <code>sizeof my_addr</code>.</p>
<h3 id="return-value-1">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-1">Example</h3>
<div id="cb84"><pre><code><span id="cb84-1"><a href="#cb84-1"></a><span>// modern way of doing things with getaddrinfo()</span></span>
<span id="cb84-2"><a href="#cb84-2"></a></span>
<span id="cb84-3"><a href="#cb84-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb84-4"><a href="#cb84-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb84-5"><a href="#cb84-5"></a></span>
<span id="cb84-6"><a href="#cb84-6"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb84-7"><a href="#cb84-7"></a></span>
<span id="cb84-8"><a href="#cb84-8"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb84-9"><a href="#cb84-9"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb84-10"><a href="#cb84-10"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb84-11"><a href="#cb84-11"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb84-12"><a href="#cb84-12"></a></span>
<span id="cb84-13"><a href="#cb84-13"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb84-14"><a href="#cb84-14"></a></span>
<span id="cb84-15"><a href="#cb84-15"></a><span>// make a socket:</span></span>
<span id="cb84-16"><a href="#cb84-16"></a><span>// (you should actually walk the "res" linked list and error-check!)</span></span>
<span id="cb84-17"><a href="#cb84-17"></a></span>
<span id="cb84-18"><a href="#cb84-18"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb84-19"><a href="#cb84-19"></a></span>
<span id="cb84-20"><a href="#cb84-20"></a><span>// bind it to the port we passed in to getaddrinfo():</span></span>
<span id="cb84-21"><a href="#cb84-21"></a></span>
<span id="cb84-22"><a href="#cb84-22"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<div id="cb85"><pre><code><span id="cb85-1"><a href="#cb85-1"></a><span>// example of packing a struct by hand, IPv4</span></span>
<span id="cb85-2"><a href="#cb85-2"></a></span>
<span id="cb85-3"><a href="#cb85-3"></a><span>struct</span> sockaddr_in myaddr<span>;</span></span>
<span id="cb85-4"><a href="#cb85-4"></a><span>int</span> s<span>;</span></span>
<span id="cb85-5"><a href="#cb85-5"></a></span>
<span id="cb85-6"><a href="#cb85-6"></a>myaddr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span></span>
<span id="cb85-7"><a href="#cb85-7"></a>myaddr<span>.</span>sin_port <span>=</span> htons<span>(</span><span>3490</span><span>);</span></span>
<span id="cb85-8"><a href="#cb85-8"></a></span>
<span id="cb85-9"><a href="#cb85-9"></a><span>// you can specify an IP address:</span></span>
<span id="cb85-10"><a href="#cb85-10"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"63.161.169.137"</span><span>,</span> <span>&amp;(</span>myaddr<span>.</span>sin_addr<span>));</span></span>
<span id="cb85-11"><a href="#cb85-11"></a></span>
<span id="cb85-12"><a href="#cb85-12"></a><span>// or you can let it automatically select one:</span></span>
<span id="cb85-13"><a href="#cb85-13"></a>myaddr<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> INADDR_ANY<span>;</span></span>
<span id="cb85-14"><a href="#cb85-14"></a></span>
<span id="cb85-15"><a href="#cb85-15"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb85-16"><a href="#cb85-16"></a>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>myaddr<span>,</span> <span>sizeof</span> myaddr<span>);</span></span></code></pre></div>
<h3 id="see-also-1">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#socketman"><code>socket()</code></a>, <a href="#structsockaddrman"><code>struct sockaddr_in</code></a>, <a href="#structsockaddrman"><code>struct in_addr</code></a></p>
<h2 data-number="9.3" id="connectman"> <code>connect()</code></h2>

<p>Connect a socket to a server</p>
<h3 id="synopsis-2">Synopsis</h3>
<div id="cb86"><pre><code><span id="cb86-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb86-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb86-3"></span>
<span id="cb86-4"><span>int</span> connect<span>(</span><span>int</span> sockfd<span>,</span> <span>const</span> <span>struct</span> sockaddr <span>*</span>serv_addr<span>,</span></span>
<span id="cb86-5">            socklen_t addrlen<span>);</span></span></code></pre></div>
<h3 id="description-2">Description</h3>
<p>Once you’ve built a socket descriptor with the <code>socket()</code> call, you can <code>connect()</code> that socket to a remote server using the well-named <code>connect()</code> system call. All you need to do is pass it the socket descriptor and the address of the server you’re interested in getting to know better. (Oh, and the length of the address, which is commonly passed to functions like this.)</p>
<p>Usually this information comes along as the result of a call to <code>getaddrinfo()</code>, but you can fill out your own <code>struct sockaddr</code> if you want to.</p>
<p>If you haven’t yet called <code>bind()</code> on the socket descriptor, it is automatically bound to your IP address and a random local port. This is usually just fine with you if you’re not a server, since you really don’t care what your local port is; you only care what the remote port is so you can put it in the <code>serv_addr</code> parameter. You <em>can</em> call <code>bind()</code> if you really want your client socket to be on a specific IP address and port, but this is pretty rare.</p>
<p>Once the socket is <code>connect()</code>ed, you’re free to <code>send()</code> and <code>recv()</code> data on it to your heart’s content.</p>
<p> Special note: if you <code>connect()</code> a <code>SOCK_DGRAM</code> UDP socket to a remote host, you can use <code>send()</code> and <code>recv()</code> as well as <code>sendto()</code> and <code>recvfrom()</code>. If you want.</p>
<h3 id="return-value-2">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-2">Example</h3>
<div id="cb87"><pre><code><span id="cb87-1"><a href="#cb87-1"></a><span>// connect to www.example.com port 80 (http)</span></span>
<span id="cb87-2"><a href="#cb87-2"></a></span>
<span id="cb87-3"><a href="#cb87-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb87-4"><a href="#cb87-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb87-5"><a href="#cb87-5"></a></span>
<span id="cb87-6"><a href="#cb87-6"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb87-7"><a href="#cb87-7"></a></span>
<span id="cb87-8"><a href="#cb87-8"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb87-9"><a href="#cb87-9"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb87-10"><a href="#cb87-10"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb87-11"><a href="#cb87-11"></a></span>
<span id="cb87-12"><a href="#cb87-12"></a><span>// we could put "80" instead on "http" on the next line:</span></span>
<span id="cb87-13"><a href="#cb87-13"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"http"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb87-14"><a href="#cb87-14"></a></span>
<span id="cb87-15"><a href="#cb87-15"></a><span>// make a socket:</span></span>
<span id="cb87-16"><a href="#cb87-16"></a></span>
<span id="cb87-17"><a href="#cb87-17"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb87-18"><a href="#cb87-18"></a></span>
<span id="cb87-19"><a href="#cb87-19"></a><span>// connect it to the address and port we passed in to getaddrinfo():</span></span>
<span id="cb87-20"><a href="#cb87-20"></a></span>
<span id="cb87-21"><a href="#cb87-21"></a>connect<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<h3 id="see-also-2">See Also</h3>
<p><a href="#socketman"><code>socket()</code></a>, <a href="#bindman"><code>bind()</code></a></p>
<h2 data-number="9.4" id="closeman"> <code>close()</code></h2>

<p>Close a socket descriptor</p>
<h3 id="synopsis-3">Synopsis</h3>
<div id="cb88"><pre><code><span id="cb88-1"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb88-2"></span>
<span id="cb88-3"><span>int</span> close<span>(</span><span>int</span> s<span>);</span></span></code></pre></div>
<h3 id="description-3">Description</h3>
<p>After you’ve finished using the socket for whatever demented scheme you have concocted and you don’t want to <code>send()</code> or <code>recv()</code> or, indeed, do <em>anything else</em> at all with the socket, you can <code>close()</code> it, and it’ll be freed up, never to be used again.</p>
<p>The remote side can tell if this happens one of two ways. One: if the remote side calls <code>recv()</code>, it will return <code>0</code>. Two: if the remote side calls <code>send()</code>, it’ll receive a signal <code>SIGPIPE</code> and send() will return <code>-1</code> and <code>errno</code> will be set to <code>EPIPE</code>.</p>
<p> <strong>Windows users</strong>: the function you need to use is called <code>closesocket()</code>, not <code>close()</code>. If you try to use <code>close()</code> on a socket descriptor, it’s possible Windows will get angry… And you wouldn’t like it when it’s angry.</p>
<h3 id="return-value-3">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-3">Example</h3>
<div id="cb89"><pre><code><span id="cb89-1"><a href="#cb89-1"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_DGRAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb89-2"><a href="#cb89-2"></a><span>.</span></span>
<span id="cb89-3"><a href="#cb89-3"></a><span>.</span></span>
<span id="cb89-4"><a href="#cb89-4"></a><span>.</span></span>
<span id="cb89-5"><a href="#cb89-5"></a><span>// a whole lotta stuff...*BRRRONNNN!*</span></span>
<span id="cb89-6"><a href="#cb89-6"></a><span>.</span></span>
<span id="cb89-7"><a href="#cb89-7"></a><span>.</span></span>
<span id="cb89-8"><a href="#cb89-8"></a><span>.</span></span>
<span id="cb89-9"><a href="#cb89-9"></a>close<span>(</span>s<span>);</span>  <span>// not much to it, really.</span></span></code></pre></div>
<h3 id="see-also-3">See Also</h3>
<p><a href="#socketman"><code>socket()</code></a>, <a href="#shutdownman"><code>shutdown()</code></a></p>
<h2 data-number="9.5" id="getaddrinfoman"> <code>getaddrinfo()</code>, <code>freeaddrinfo()</code>, <code>gai_strerror()</code></h2>

<p>Get information about a host name and/or service and load up a <code>struct sockaddr</code> with the result.</p>
<h3 id="synopsis-4">Synopsis</h3>
<div id="cb90"><pre><code><span id="cb90-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb90-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb90-3"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb90-4"></span>
<span id="cb90-5"><span>int</span> getaddrinfo<span>(</span><span>const</span> <span>char</span> <span>*</span>nodename<span>,</span> <span>const</span> <span>char</span> <span>*</span>servname<span>,</span></span>
<span id="cb90-6">                <span>const</span> <span>struct</span> addrinfo <span>*</span>hints<span>,</span> <span>struct</span> addrinfo <span>**</span>res<span>);</span></span>
<span id="cb90-7"></span>
<span id="cb90-8"><span>void</span> freeaddrinfo<span>(</span><span>struct</span> addrinfo <span>*</span>ai<span>);</span></span>
<span id="cb90-9"></span>
<span id="cb90-10"><span>const</span> <span>char</span> <span>*</span>gai_strerror<span>(</span><span>int</span> ecode<span>);</span></span>
<span id="cb90-11"></span>
<span id="cb90-12"><span>struct</span> addrinfo <span>{</span></span>
<span id="cb90-13">  <span>int</span>     ai_flags<span>;</span>          <span>// AI_PASSIVE, AI_CANONNAME, ...</span></span>
<span id="cb90-14">  <span>int</span>     ai_family<span>;</span>         <span>// AF_xxx</span></span>
<span id="cb90-15">  <span>int</span>     ai_socktype<span>;</span>       <span>// SOCK_xxx</span></span>
<span id="cb90-16">  <span>int</span>     ai_protocol<span>;</span>       <span>// 0 (auto) or IPPROTO_TCP, IPPROTO_UDP </span></span>
<span id="cb90-17"></span>
<span id="cb90-18">  socklen_t  ai_addrlen<span>;</span>     <span>// length of ai_addr</span></span>
<span id="cb90-19">  <span>char</span>   <span>*</span>ai_canonname<span>;</span>      <span>// canonical name for nodename</span></span>
<span id="cb90-20">  <span>struct</span> sockaddr  <span>*</span>ai_addr<span>;</span> <span>// binary address</span></span>
<span id="cb90-21">  <span>struct</span> addrinfo  <span>*</span>ai_next<span>;</span> <span>// next structure in linked list</span></span>
<span id="cb90-22"><span>};</span></span></code></pre></div>
<h3 id="description-4">Description</h3>
<p><code>getaddrinfo()</code> is an excellent function that will return information on a particular host name (such as its IP address) and load up a <code>struct sockaddr</code> for you, taking care of the gritty details (like if it’s IPv4 or IPv6). It replaces the old functions <code>gethostbyname()</code> and <code>getservbyname()</code>.The description, below, contains a lot of information that might be a little daunting, but actual usage is pretty simple. It might be worth it to check out the examples first.</p>
<p>The host name that you’re interested in goes in the <code>nodename</code> parameter. The address can be either a host name, like “www.example.com”, or an IPv4 or IPv6 address (passed as a string). This parameter can also be <code>NULL</code> if you’re using the <code>AI_PASSIVE</code> flag (see below).</p>
<p>The <code>servname</code> parameter is basically the port number. It can be a port number (passed as a string, like “80”), or it can be a service name, like “http” or “tftp” or “smtp” or “pop”, etc. Well-known service names can be found in the <a href="https://www.iana.org/assignments/port-numbers">IANA Port List</a><a href="#fn48" id="fnref48" role="doc-noteref"><sup>48</sup></a> or in your <code>/etc/services</code> file.</p>
<p>Lastly, for input parameters, we have <code>hints</code>. This is really where you get to define what the <code>getaddrinfo()</code> function is going to do. Zero the whole structure before use with <code>memset()</code>. Let’s take a look at the fields you need to set up before use.</p>
<p>The <code>ai_flags</code> can be set to a variety of things, but here are a couple important ones. (Multiple flags can be specified by bitwise-ORing them together with the <code>|</code> operator). Check your man page for the complete list of flags.</p>
<p><code>AI_CANONNAME</code> causes the <code>ai_canonname</code> of the result to the filled out with the host’s canonical (real) name. <code>AI_PASSIVE</code> causes the result’s IP address to be filled out with <code>INADDR_ANY</code> (IPv4) or <code>in6addr_any</code> (IPv6); this causes a subsequent call to <code>bind()</code> to auto-fill the IP address of the <code>struct sockaddr</code> with the address of the current host. That’s excellent for setting up a server when you don’t want to hardcode the address.</p>
<p>If you do use the <code>AI_PASSIVE</code>, flag, then you can pass <code>NULL</code> in the <code>nodename</code> (since <code>bind()</code> will fill it in for you later).</p>
<p>Continuing on with the input parameters, you’ll likely want to set <code>ai_family</code> to <code>AF_UNSPEC</code> which tells <code>getaddrinfo()</code> to look for both IPv4 and IPv6 addresses. You can also restrict yourself to one or the other with <code>AF_INET</code> or <code>AF_INET6</code>.</p>
<p>Next, the <code>socktype</code> field should be set to <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, depending on which type of socket you want.</p>
<p>Finally, just leave <code>ai_protocol</code> at <code>0</code> to automatically choose your protocol type.</p>
<p>Now, after you get all that stuff in there, you can <em>finally</em> make the call to <code>getaddrinfo()</code>!</p>
<p>Of course, this is where the fun begins. The <code>res</code> will now point to a linked list of <code>struct addrinfo</code>s, and you can go through this list to get all the addresses that match what you passed in with the hints.</p>
<p>Now, it’s possible to get some addresses that don’t work for one reason or another, so what the Linux man page does is loops through the list doing a call to <code>socket()</code> and <code>connect()</code> (or <code>bind()</code> if you’re setting up a server with the <code>AI_PASSIVE</code> flag) until it succeeds.</p>
<p>Finally, when you’re done with the linked list, you need to call <code>freeaddrinfo()</code> to free up the memory (or it will be leaked, and Some People will get upset).</p>
<h3 id="return-value-4">Return Value</h3>
<p>Returns zero on success, or nonzero on error. If it returns nonzero, you can use the function <code>gai_strerror()</code> to get a printable version of the error code in the return value.</p>
<h3 id="example-4">Example</h3>
<div id="cb91"><pre><code><span id="cb91-1"><a href="#cb91-1"></a><span>// code for a client connecting to a server</span></span>
<span id="cb91-2"><a href="#cb91-2"></a><span>// namely a stream socket to www.example.com on port 80 (http)</span></span>
<span id="cb91-3"><a href="#cb91-3"></a><span>// either IPv4 or IPv6</span></span>
<span id="cb91-4"><a href="#cb91-4"></a></span>
<span id="cb91-5"><a href="#cb91-5"></a><span>int</span> sockfd<span>;</span>  </span>
<span id="cb91-6"><a href="#cb91-6"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb91-7"><a href="#cb91-7"></a><span>int</span> rv<span>;</span></span>
<span id="cb91-8"><a href="#cb91-8"></a></span>
<span id="cb91-9"><a href="#cb91-9"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb91-10"><a href="#cb91-10"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span> <span>// use AF_INET6 to force IPv6</span></span>
<span id="cb91-11"><a href="#cb91-11"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb91-12"><a href="#cb91-12"></a></span>
<span id="cb91-13"><a href="#cb91-13"></a><span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"http"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb91-14"><a href="#cb91-14"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb91-15"><a href="#cb91-15"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb91-16"><a href="#cb91-16"></a><span>}</span></span>
<span id="cb91-17"><a href="#cb91-17"></a></span>
<span id="cb91-18"><a href="#cb91-18"></a><span>// loop through all the results and connect to the first we can</span></span>
<span id="cb91-19"><a href="#cb91-19"></a><span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb91-20"><a href="#cb91-20"></a>    <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb91-21"><a href="#cb91-21"></a>            p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb91-22"><a href="#cb91-22"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb91-23"><a href="#cb91-23"></a>        <span>continue</span><span>;</span></span>
<span id="cb91-24"><a href="#cb91-24"></a>    <span>}</span></span>
<span id="cb91-25"><a href="#cb91-25"></a></span>
<span id="cb91-26"><a href="#cb91-26"></a>    <span>if</span> <span>(</span>connect<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb91-27"><a href="#cb91-27"></a>        perror<span>(</span><span>"connect"</span><span>);</span></span>
<span id="cb91-28"><a href="#cb91-28"></a>        close<span>(</span>sockfd<span>);</span></span>
<span id="cb91-29"><a href="#cb91-29"></a>        <span>continue</span><span>;</span></span>
<span id="cb91-30"><a href="#cb91-30"></a>    <span>}</span></span>
<span id="cb91-31"><a href="#cb91-31"></a></span>
<span id="cb91-32"><a href="#cb91-32"></a>    <span>break</span><span>;</span> <span>// if we get here, we must have connected successfully</span></span>
<span id="cb91-33"><a href="#cb91-33"></a><span>}</span></span>
<span id="cb91-34"><a href="#cb91-34"></a></span>
<span id="cb91-35"><a href="#cb91-35"></a><span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb91-36"><a href="#cb91-36"></a>    <span>// looped off the end of the list with no connection</span></span>
<span id="cb91-37"><a href="#cb91-37"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"failed to connect</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb91-38"><a href="#cb91-38"></a>    exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb91-39"><a href="#cb91-39"></a><span>}</span></span>
<span id="cb91-40"><a href="#cb91-40"></a></span>
<span id="cb91-41"><a href="#cb91-41"></a>freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span></code></pre></div>
<div id="cb92"><pre><code><span id="cb92-1"><a href="#cb92-1"></a><span>// code for a server waiting for connections</span></span>
<span id="cb92-2"><a href="#cb92-2"></a><span>// namely a stream socket on port 3490, on this host's IP</span></span>
<span id="cb92-3"><a href="#cb92-3"></a><span>// either IPv4 or IPv6.</span></span>
<span id="cb92-4"><a href="#cb92-4"></a></span>
<span id="cb92-5"><a href="#cb92-5"></a><span>int</span> sockfd<span>;</span>  </span>
<span id="cb92-6"><a href="#cb92-6"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb92-7"><a href="#cb92-7"></a><span>int</span> rv<span>;</span></span>
<span id="cb92-8"><a href="#cb92-8"></a></span>
<span id="cb92-9"><a href="#cb92-9"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb92-10"><a href="#cb92-10"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span> <span>// use AF_INET6 to force IPv6</span></span>
<span id="cb92-11"><a href="#cb92-11"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb92-12"><a href="#cb92-12"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span> <span>// use my IP address</span></span>
<span id="cb92-13"><a href="#cb92-13"></a></span>
<span id="cb92-14"><a href="#cb92-14"></a><span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb92-15"><a href="#cb92-15"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb92-16"><a href="#cb92-16"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb92-17"><a href="#cb92-17"></a><span>}</span></span>
<span id="cb92-18"><a href="#cb92-18"></a></span>
<span id="cb92-19"><a href="#cb92-19"></a><span>// loop through all the results and bind to the first we can</span></span>
<span id="cb92-20"><a href="#cb92-20"></a><span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb92-21"><a href="#cb92-21"></a>    <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb92-22"><a href="#cb92-22"></a>            p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb92-23"><a href="#cb92-23"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb92-24"><a href="#cb92-24"></a>        <span>continue</span><span>;</span></span>
<span id="cb92-25"><a href="#cb92-25"></a>    <span>}</span></span>
<span id="cb92-26"><a href="#cb92-26"></a></span>
<span id="cb92-27"><a href="#cb92-27"></a>    <span>if</span> <span>(</span>bind<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb92-28"><a href="#cb92-28"></a>        close<span>(</span>sockfd<span>);</span></span>
<span id="cb92-29"><a href="#cb92-29"></a>        perror<span>(</span><span>"bind"</span><span>);</span></span>
<span id="cb92-30"><a href="#cb92-30"></a>        <span>continue</span><span>;</span></span>
<span id="cb92-31"><a href="#cb92-31"></a>    <span>}</span></span>
<span id="cb92-32"><a href="#cb92-32"></a></span>
<span id="cb92-33"><a href="#cb92-33"></a>    <span>break</span><span>;</span> <span>// if we get here, we must have connected successfully</span></span>
<span id="cb92-34"><a href="#cb92-34"></a><span>}</span></span>
<span id="cb92-35"><a href="#cb92-35"></a></span>
<span id="cb92-36"><a href="#cb92-36"></a><span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb92-37"><a href="#cb92-37"></a>    <span>// looped off the end of the list with no successful bind</span></span>
<span id="cb92-38"><a href="#cb92-38"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"failed to bind socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb92-39"><a href="#cb92-39"></a>    exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb92-40"><a href="#cb92-40"></a><span>}</span></span>
<span id="cb92-41"><a href="#cb92-41"></a></span>
<span id="cb92-42"><a href="#cb92-42"></a>freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span></code></pre></div>
<h3 id="see-also-4">See Also</h3>
<p><a href="#gethostbynameman"><code>gethostbyname()</code></a>, <a href="#getnameinfoman"><code>getnameinfo()</code></a></p>
<h2 data-number="9.6" id="gethostnameman"> <code>gethostname()</code></h2>

<p>Returns the name of the system</p>
<h3 id="synopsis-5">Synopsis</h3>
<div id="cb93"><pre><code><span id="cb93-1"><span>#include </span><span>&lt;sys/unistd.h&gt;</span></span>
<span id="cb93-2"></span>
<span id="cb93-3"><span>int</span> gethostname<span>(</span><span>char</span> <span>*</span>name<span>,</span> <span>size_t</span> len<span>);</span></span></code></pre></div>
<h3 id="description-5">Description</h3>
<p>Your system has a name. They all do. This is a slightly more Unixy thing than the rest of the networky stuff we’ve been talking about, but it still has its uses.</p>
<p>For instance, you can get your host name, and then call <code>gethostbyname()</code> to find out your IP address.</p>
<p>The parameter <code>name</code> should point to a buffer that will hold the host name, and <code>len</code> is the size of that buffer in bytes. <code>gethostname()</code> won’t overwrite the end of the buffer (it might return an error, or it might just stop writing), and it will <code>NUL</code>-terminate the string if there’s room for it in the buffer.</p>
<h3 id="return-value-5">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-5">Example</h3>
<div id="cb94"><pre><code><span id="cb94-1"><a href="#cb94-1"></a><span>char</span> hostname<span>[</span><span>128</span><span>];</span></span>
<span id="cb94-2"><a href="#cb94-2"></a></span>
<span id="cb94-3"><a href="#cb94-3"></a>gethostname<span>(</span>hostname<span>,</span> <span>sizeof</span> hostname<span>);</span></span>
<span id="cb94-4"><a href="#cb94-4"></a>printf<span>(</span><span>"My hostname: </span><span>%s\n</span><span>"</span><span>,</span> hostname<span>);</span></span></code></pre></div>
<h3 id="see-also-5">See Also</h3>
<p><a href="#gethostbynameman"><code>gethostbyname()</code></a></p>
<h2 data-number="9.7" id="gethostbynameman"> <code>gethostbyname()</code>, <code>gethostbyaddr()</code></h2>

<p>Get an IP address for a hostname, or vice-versa</p>
<h3 id="synopsis-6">Synopsis</h3>
<div id="cb95"><pre><code><span id="cb95-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb95-2"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb95-3"></span>
<span id="cb95-4"><span>struct</span> hostent <span>*</span>gethostbyname<span>(</span><span>const</span> <span>char</span> <span>*</span>name<span>);</span> <span>// </span><span>DEPRECATED</span><span>!</span></span>
<span id="cb95-5"><span>struct</span> hostent <span>*</span>gethostbyaddr<span>(</span><span>const</span> <span>char</span> <span>*</span>addr<span>,</span> <span>int</span> len<span>,</span> <span>int</span> type<span>);</span></span></code></pre></div>
<h3 id="description-6">Description</h3>
<p><em>PLEASE NOTE: these two functions are superseded by <code>getaddrinfo()</code> and <code>getnameinfo()</code>!</em> In particular, <code>gethostbyname()</code> doesn’t work well with IPv6.</p>
<p>These functions map back and forth between host names and IP addresses. For instance, if you have “www.example.com”, you can use <code>gethostbyname()</code> to get its IP address and store it in a <code>struct in_addr</code>.</p>
<p>Conversely, if you have a <code>struct in_addr</code> or a <code>struct in6_addr</code>, you can use <code>gethostbyaddr()</code> to get the hostname back. <code>gethostbyaddr()</code> <em>is</em> IPv6 compatible, but you should use the newer shinier <code>getnameinfo()</code> instead.</p>
<p>(If you have a string containing an IP address in dots-and-numbers format that you want to look up the hostname of, you’d be better off using <code>getaddrinfo()</code> with the <code>AI_CANONNAME</code> flag.)</p>
<p><code>gethostbyname()</code> takes a string like “www.yahoo.com”, and returns a <code>struct hostent</code> which contains tons of information, including the IP address. (Other information is the official host name, a list of aliases, the address type, the length of the addresses, and the list of addresses—it’s a general-purpose structure that’s pretty easy to use for our specific purposes once you see how.)</p>
<p><code>gethostbyaddr()</code> takes a <code>struct in_addr</code> or <code>struct in6_addr</code> and brings you up a corresponding host name (if there is one), so it’s sort of the reverse of <code>gethostbyname()</code>. As for parameters, even though <code>addr</code> is a <code>char*</code>, you actually want to pass in a pointer to a <code>struct in_addr</code>. <code>len</code> should be <code>sizeof(struct in_addr)</code>, and <code>type</code> should be <code>AF_INET</code>.</p>
<p>So what is this <code>struct hostent</code> that gets returned? It has a number of fields that contain information about the host in question.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>char *h_name</code></td>
<td>The real canonical host name.</td>
</tr>
<tr>
<td><code>char **h_aliases</code></td>
<td>A list of aliases that can be accessed with arrays—the last element is <code>NULL</code></td>
</tr>
<tr>
<td><code>int h_addrtype</code></td>
<td>The result’s address type, which really should be <code>AF_INET</code> for our purposes.</td>
</tr>
<tr>
<td><code>int length</code></td>
<td>The length of the addresses in bytes, which is 4 for IP (version 4) addresses.</td>
</tr>
<tr>
<td><code>char **h_addr_list</code></td>
<td>A list of IP addresses for this host. Although this is a <code>char**</code>, it’s really an array of <code>struct in_addr*</code>s in disguise. The last array element is <code>NULL</code>.</td>
</tr>
<tr>
<td><code>h_addr</code></td>
<td>A commonly defined alias for <code>h_addr_list[0]</code>. If you just want any old IP address for this host (yeah, they can have more than one) just use this field.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-6">Return Value</h3>
<p>Returns a pointer to a resultant <code>struct hostent</code> on success, or <code>NULL</code> on error.</p>
<p>Instead of the normal <code>perror()</code> and all that stuff you’d normally use for error reporting, these functions have parallel results in the variable <code>h_errno</code>, which can be printed using the functions <code>herror()</code> or <code>hstrerror()</code>. These work just like the classic <code>errno</code>, <code>perror()</code>, and <code>strerror()</code> functions you’re used to.</p>
<h3 id="example-6">Example</h3>
<div id="cb96"><pre><code><span id="cb96-1"><a href="#cb96-1"></a><span>// THIS IS A </span><span>DEPRECATED</span><span> METHOD OF GETTING HOST NAMES</span></span>
<span id="cb96-2"><a href="#cb96-2"></a><span>// use getaddrinfo() instead!</span></span>
<span id="cb96-3"><a href="#cb96-3"></a></span>
<span id="cb96-4"><a href="#cb96-4"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb96-5"><a href="#cb96-5"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb96-6"><a href="#cb96-6"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb96-7"><a href="#cb96-7"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb96-8"><a href="#cb96-8"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb96-9"><a href="#cb96-9"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb96-10"><a href="#cb96-10"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb96-11"><a href="#cb96-11"></a></span>
<span id="cb96-12"><a href="#cb96-12"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb96-13"><a href="#cb96-13"></a><span>{</span></span>
<span id="cb96-14"><a href="#cb96-14"></a>    <span>int</span> i<span>;</span></span>
<span id="cb96-15"><a href="#cb96-15"></a>    <span>struct</span> hostent <span>*</span>he<span>;</span></span>
<span id="cb96-16"><a href="#cb96-16"></a>    <span>struct</span> in_addr <span>**</span>addr_list<span>;</span></span>
<span id="cb96-17"><a href="#cb96-17"></a></span>
<span id="cb96-18"><a href="#cb96-18"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb96-19"><a href="#cb96-19"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: ghbn hostname</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb96-20"><a href="#cb96-20"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb96-21"><a href="#cb96-21"></a>    <span>}</span></span>
<span id="cb96-22"><a href="#cb96-22"></a></span>
<span id="cb96-23"><a href="#cb96-23"></a>    <span>if</span> <span>((</span>he <span>=</span> gethostbyname<span>(</span>argv<span>[</span><span>1</span><span>]))</span> <span>==</span> NULL<span>)</span> <span>{</span>  <span>// get the host info</span></span>
<span id="cb96-24"><a href="#cb96-24"></a>        herror<span>(</span><span>"gethostbyname"</span><span>);</span></span>
<span id="cb96-25"><a href="#cb96-25"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb96-26"><a href="#cb96-26"></a>    <span>}</span></span>
<span id="cb96-27"><a href="#cb96-27"></a></span>
<span id="cb96-28"><a href="#cb96-28"></a>    <span>// print information about this host:</span></span>
<span id="cb96-29"><a href="#cb96-29"></a>    printf<span>(</span><span>"Official name is: </span><span>%s\n</span><span>"</span><span>,</span> he<span>-&gt;</span>h_name<span>);</span></span>
<span id="cb96-30"><a href="#cb96-30"></a>    printf<span>(</span><span>"    IP addresses: "</span><span>);</span></span>
<span id="cb96-31"><a href="#cb96-31"></a>    addr_list <span>=</span> <span>(</span><span>struct</span> in_addr <span>**)</span>he<span>-&gt;</span>h_addr_list<span>;</span></span>
<span id="cb96-32"><a href="#cb96-32"></a>    <span>for</span><span>(</span>i <span>=</span> <span>0</span><span>;</span> addr_list<span>[</span>i<span>]</span> <span>!=</span> NULL<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb96-33"><a href="#cb96-33"></a>        printf<span>(</span><span>"</span><span>%s</span><span> "</span><span>,</span> inet_ntoa<span>(*</span>addr_list<span>[</span>i<span>]));</span></span>
<span id="cb96-34"><a href="#cb96-34"></a>    <span>}</span></span>
<span id="cb96-35"><a href="#cb96-35"></a>    printf<span>(</span><span>"</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb96-36"><a href="#cb96-36"></a></span>
<span id="cb96-37"><a href="#cb96-37"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb96-38"><a href="#cb96-38"></a><span>}</span></span></code></pre></div>
<div id="cb97"><pre><code><span id="cb97-1"><a href="#cb97-1"></a><span>// THIS HAS BEEN SUPERSEDED</span></span>
<span id="cb97-2"><a href="#cb97-2"></a><span>// use getnameinfo() instead!</span></span>
<span id="cb97-3"><a href="#cb97-3"></a></span>
<span id="cb97-4"><a href="#cb97-4"></a><span>struct</span> hostent <span>*</span>he<span>;</span></span>
<span id="cb97-5"><a href="#cb97-5"></a><span>struct</span> in_addr ipv4addr<span>;</span></span>
<span id="cb97-6"><a href="#cb97-6"></a><span>struct</span> in6_addr ipv6addr<span>;</span></span>
<span id="cb97-7"><a href="#cb97-7"></a></span>
<span id="cb97-8"><a href="#cb97-8"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"192.0.2.34"</span><span>,</span> <span>&amp;</span>ipv4addr<span>);</span></span>
<span id="cb97-9"><a href="#cb97-9"></a>he <span>=</span> gethostbyaddr<span>(&amp;</span>ipv4addr<span>,</span> <span>sizeof</span> ipv4addr<span>,</span> AF_INET<span>);</span></span>
<span id="cb97-10"><a href="#cb97-10"></a>printf<span>(</span><span>"Host name: </span><span>%s\n</span><span>"</span><span>,</span> he<span>-&gt;</span>h_name<span>);</span></span>
<span id="cb97-11"><a href="#cb97-11"></a></span>
<span id="cb97-12"><a href="#cb97-12"></a>inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:63b3:1::beef"</span><span>,</span> <span>&amp;</span>ipv6addr<span>);</span></span>
<span id="cb97-13"><a href="#cb97-13"></a>he <span>=</span> gethostbyaddr<span>(&amp;</span>ipv6addr<span>,</span> <span>sizeof</span> ipv6addr<span>,</span> AF_INET6<span>);</span></span>
<span id="cb97-14"><a href="#cb97-14"></a>printf<span>(</span><span>"Host name: </span><span>%s\n</span><span>"</span><span>,</span> he<span>-&gt;</span>h_name<span>);</span></span></code></pre></div>
<h3 id="see-also-6">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#getnameinfoman"><code>getnameinfo()</code></a>, <a href="#gethostnameman"><code>gethostname()</code></a>, <a href="#errnoman"><code>errno</code></a>, <a href="#perrorman"><code>perror()</code></a>, <a href="#perrorman"><code>strerror()</code></a>, <a href="#structsockaddrman"><code>struct in_addr</code></a></p>
<h2 data-number="9.8" id="getnameinfoman"> <code>getnameinfo()</code></h2>

<p>Look up the host name and service name information for a given <code>struct sockaddr</code>.</p>
<h3 id="synopsis-7">Synopsis</h3>
<div id="cb98"><pre><code><span id="cb98-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb98-2"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb98-3"></span>
<span id="cb98-4"><span>int</span> getnameinfo<span>(</span><span>const</span> <span>struct</span> sockaddr <span>*</span>sa<span>,</span> socklen_t salen<span>,</span></span>
<span id="cb98-5">                <span>char</span> <span>*</span>host<span>,</span> <span>size_t</span> hostlen<span>,</span></span>
<span id="cb98-6">                <span>char</span> <span>*</span>serv<span>,</span> <span>size_t</span> servlen<span>,</span> <span>int</span> flags<span>);</span></span></code></pre></div>
<h3 id="description-7">Description</h3>
<p>This function is the opposite of <code>getaddrinfo()</code>, that is, this function takes an already loaded <code>struct sockaddr</code> and does a name and service name lookup on it. It replaces the old <code>gethostbyaddr()</code> and <code>getservbyport()</code> functions.</p>
<p>You have to pass in a pointer to a <code>struct sockaddr</code> (which in actuality is probably a <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> that you’ve cast) in the <code>sa</code> parameter, and the length of that <code>struct</code> in the <code>salen</code>.</p>
<p>The resultant host name and service name will be written to the area pointed to by the <code>host</code> and <code>serv</code> parameters. Of course, you have to specify the max lengths of these buffers in <code>hostlen</code> and <code>servlen</code>.</p>
<p>Finally, there are several flags you can pass, but here a a couple good ones. <code>NI_NOFQDN</code> will cause the <code>host</code> to only contain the host name, not the whole domain name. <code>NI_NAMEREQD</code> will cause the function to fail if the name cannot be found with a DNS lookup (if you don’t specify this flag and the name can’t be found, <code>getnameinfo()</code> will put a string version of the IP address in <code>host</code> instead).</p>
<p>As always, check your local man pages for the full scoop.</p>
<h3 id="return-value-7">Return Value</h3>
<p>Returns zero on success, or non-zero on error. If the return value is non-zero, it can be passed to <code>gai_strerror()</code> to get a human-readable string. See <code>getaddrinfo</code> for more information.</p>
<h3 id="example-7">Example</h3>
<div id="cb99"><pre><code><span id="cb99-1"><a href="#cb99-1"></a><span>struct</span> sockaddr_in6 sa<span>;</span> <span>// could be IPv4 if you want</span></span>
<span id="cb99-2"><a href="#cb99-2"></a><span>char</span> host<span>[</span><span>1024</span><span>];</span></span>
<span id="cb99-3"><a href="#cb99-3"></a><span>char</span> service<span>[</span><span>20</span><span>];</span></span>
<span id="cb99-4"><a href="#cb99-4"></a></span>
<span id="cb99-5"><a href="#cb99-5"></a><span>// pretend sa is full of good information about the host and port...</span></span>
<span id="cb99-6"><a href="#cb99-6"></a></span>
<span id="cb99-7"><a href="#cb99-7"></a>getnameinfo<span>(&amp;</span>sa<span>,</span> <span>sizeof</span> sa<span>,</span> host<span>,</span> <span>sizeof</span> host<span>,</span> service<span>,</span> <span>sizeof</span> service<span>,</span> <span>0</span><span>);</span></span>
<span id="cb99-8"><a href="#cb99-8"></a></span>
<span id="cb99-9"><a href="#cb99-9"></a>printf<span>(</span><span>"   host: </span><span>%s\n</span><span>"</span><span>,</span> host<span>);</span>    <span>// e.g. "www.example.com"</span></span>
<span id="cb99-10"><a href="#cb99-10"></a>printf<span>(</span><span>"service: </span><span>%s\n</span><span>"</span><span>,</span> service<span>);</span> <span>// e.g. "http"</span></span></code></pre></div>
<h3 id="see-also-7">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number="9.9" id="getpeernameman"> <code>getpeername()</code></h2>

<p>Return address info about the remote side of the connection</p>
<h3 id="synopsis-8">Synopsis</h3>
<div id="cb100"><pre><code><span id="cb100-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb100-2"></span>
<span id="cb100-3"><span>int</span> getpeername<span>(</span><span>int</span> s<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> socklen_t <span>*</span>len<span>);</span></span></code></pre></div>
<h3 id="description-8">Description</h3>
<p>Once you have either <code>accept()</code>ed a remote connection, or <code>connect()</code>ed to a server, you now have what is known as a <em>peer</em>. Your peer is simply the computer you’re connected to, identified by an IP address and a port. So…</p>
<p><code>getpeername()</code> simply returns a <code>struct sockaddr_in</code> filled with information about the machine you’re connected to.</p>
<p>Why is it called a “name”? Well, there are a lot of different kinds of sockets, not just Internet Sockets like we’re using in this guide, and so “name” was a nice generic term that covered all cases. In our case, though, the peer’s “name” is it’s IP address and port.</p>
<p>Although the function returns the size of the resultant address in <code>len</code>, you must preload <code>len</code> with the size of <code>addr</code>.</p>
<h3 id="return-value-8">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-8">Example</h3>
<div id="cb101"><pre><code><span id="cb101-1"><a href="#cb101-1"></a><span>// assume s is a connected socket</span></span>
<span id="cb101-2"><a href="#cb101-2"></a></span>
<span id="cb101-3"><a href="#cb101-3"></a>socklen_t len<span>;</span></span>
<span id="cb101-4"><a href="#cb101-4"></a><span>struct</span> sockaddr_storage addr<span>;</span></span>
<span id="cb101-5"><a href="#cb101-5"></a><span>char</span> ipstr<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb101-6"><a href="#cb101-6"></a><span>int</span> port<span>;</span></span>
<span id="cb101-7"><a href="#cb101-7"></a></span>
<span id="cb101-8"><a href="#cb101-8"></a>len <span>=</span> <span>sizeof</span> addr<span>;</span></span>
<span id="cb101-9"><a href="#cb101-9"></a>getpeername<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>addr<span>,</span> <span>&amp;</span>len<span>);</span></span>
<span id="cb101-10"><a href="#cb101-10"></a></span>
<span id="cb101-11"><a href="#cb101-11"></a><span>// deal with both IPv4 and IPv6:</span></span>
<span id="cb101-12"><a href="#cb101-12"></a><span>if</span> <span>(</span>addr<span>.</span>ss_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb101-13"><a href="#cb101-13"></a>    <span>struct</span> sockaddr_in <span>*</span>s <span>=</span> <span>(</span><span>struct</span> sockaddr_in <span>*)&amp;</span>addr<span>;</span></span>
<span id="cb101-14"><a href="#cb101-14"></a>    port <span>=</span> ntohs<span>(</span>s<span>-&gt;</span>sin_port<span>);</span></span>
<span id="cb101-15"><a href="#cb101-15"></a>    inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;</span>s<span>-&gt;</span>sin_addr<span>,</span> ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span>
<span id="cb101-16"><a href="#cb101-16"></a><span>}</span> <span>else</span> <span>{</span> <span>// AF_INET6</span></span>
<span id="cb101-17"><a href="#cb101-17"></a>    <span>struct</span> sockaddr_in6 <span>*</span>s <span>=</span> <span>(</span><span>struct</span> sockaddr_in6 <span>*)&amp;</span>addr<span>;</span></span>
<span id="cb101-18"><a href="#cb101-18"></a>    port <span>=</span> ntohs<span>(</span>s<span>-&gt;</span>sin6_port<span>);</span></span>
<span id="cb101-19"><a href="#cb101-19"></a>    inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;</span>s<span>-&gt;</span>sin6_addr<span>,</span> ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span>
<span id="cb101-20"><a href="#cb101-20"></a><span>}</span></span>
<span id="cb101-21"><a href="#cb101-21"></a></span>
<span id="cb101-22"><a href="#cb101-22"></a>printf<span>(</span><span>"Peer IP address: </span><span>%s\n</span><span>"</span><span>,</span> ipstr<span>);</span></span>
<span id="cb101-23"><a href="#cb101-23"></a>printf<span>(</span><span>"Peer port      : </span><span>%d\n</span><span>"</span><span>,</span> port<span>);</span></span></code></pre></div>
<h3 id="see-also-8">See Also</h3>
<p><a href="#gethostnameman"><code>gethostname()</code></a>, <a href="#gethostbynameman"><code>gethostbyname()</code></a>, <a href="#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number="9.10" id="errnoman"> <code>errno</code></h2>

<p>Holds the error code for the last system call</p>
<h3 id="synopsis-9">Synopsis</h3>
<div id="cb102"><pre><code><span id="cb102-1"><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb102-2"></span>
<span id="cb102-3"><span>int</span> errno<span>;</span></span></code></pre></div>
<h3 id="description-9">Description</h3>
<p>This is the variable that holds error information for a lot of system calls. If you’ll recall, things like <code>socket()</code> and <code>listen()</code> return <code>-1</code> on error, and they set the exact value of <code>errno</code> to let you know specifically which error occurred.</p>
<p>The header file <code>errno.h</code> lists a bunch of constant symbolic names for errors, such as <code>EADDRINUSE</code>, <code>EPIPE</code>, <code>ECONNREFUSED</code>, etc. Your local man pages will tell you what codes can be returned as an error, and you can use these at run time to handle different errors in different ways.</p>
<p>Or, more commonly, you can call <code>perror()</code> or <code>strerror()</code> to get a human-readable version of the error.</p>
<p>One thing to note, for you multithreading enthusiasts, is that on most systems <code>errno</code> is defined in a threadsafe manner. (That is, it’s not actually a global variable, but it behaves just like a global variable would in a single-threaded environment.)</p>
<h3 id="return-value-9">Return Value</h3>
<p>The value of the variable is the latest error to have transpired, which might be the code for “success” if the last action succeeded.</p>
<h3 id="example-9">Example</h3>
<div id="cb103"><pre><code><span id="cb103-1"><a href="#cb103-1"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb103-2"><a href="#cb103-2"></a><span>if</span> <span>(</span>s <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb103-3"><a href="#cb103-3"></a>    perror<span>(</span><span>"socket"</span><span>);</span> <span>// or use strerror()</span></span>
<span id="cb103-4"><a href="#cb103-4"></a><span>}</span></span>
<span id="cb103-5"><a href="#cb103-5"></a></span>
<span id="cb103-6"><a href="#cb103-6"></a>tryagain<span>:</span></span>
<span id="cb103-7"><a href="#cb103-7"></a><span>if</span> <span>(</span>select<span>(</span>n<span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb103-8"><a href="#cb103-8"></a>    <span>// an error has occurred!!</span></span>
<span id="cb103-9"><a href="#cb103-9"></a></span>
<span id="cb103-10"><a href="#cb103-10"></a>    <span>// if we were only interrupted, just restart the select() call:</span></span>
<span id="cb103-11"><a href="#cb103-11"></a>    <span>if</span> <span>(</span>errno <span>==</span> EINTR<span>)</span> <span>goto</span> tryagain<span>;</span>  <span>// AAAA! goto!!!</span></span>
<span id="cb103-12"><a href="#cb103-12"></a></span>
<span id="cb103-13"><a href="#cb103-13"></a>    <span>// otherwise it's a more serious error:</span></span>
<span id="cb103-14"><a href="#cb103-14"></a>    perror<span>(</span><span>"select"</span><span>);</span></span>
<span id="cb103-15"><a href="#cb103-15"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb103-16"><a href="#cb103-16"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-9">See Also</h3>
<p><a href="#perrorman"><code>perror()</code></a>, <a href="#perrorman"><code>strerror()</code></a></p>
<h2 data-number="9.11" id="fcntlman"> <code>fcntl()</code></h2>

<p>Control socket descriptors</p>
<h3 id="synopsis-10">Synopsis</h3>
<div id="cb104"><pre><code><span id="cb104-1"><span>#include </span><span>&lt;sys/unistd.h&gt;</span></span>
<span id="cb104-2"><span>#include </span><span>&lt;sys/fcntl.h&gt;</span></span>
<span id="cb104-3"></span>
<span id="cb104-4"><span>int</span> fcntl<span>(</span><span>int</span> s<span>,</span> <span>int</span> cmd<span>,</span> <span>long</span> arg<span>);</span></span></code></pre></div>
<h3 id="description-10">Description</h3>
<p>This function is typically used to do file locking and other file-oriented stuff, but it also has a couple socket-related functions that you might see or use from time to time.</p>
<p>Parameter <code>s</code> is the socket descriptor you wish to operate on, <code>cmd</code> should be set to <code>F_SETFL</code>, and <code>arg</code> can be one of the following commands. (Like I said, there’s more to <code>fcntl()</code> than I’m letting on here, but I’m trying to stay socket-oriented.)</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>cmd</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>O_NONBLOCK</code></td>
<td>Set the socket to be non-blocking. See the section on <a href="#blocking">blocking</a> for more details.</td>
</tr>
<tr>
<td><code>O_ASYNC</code></td>
<td>Set the socket to do asynchronous I/O. When data is ready to be <code>recv()</code>’d on the socket, the signal <code>SIGIO</code> will be raised. This is rare to see, and beyond the scope of the guide. And I think it’s only available on certain systems.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-10">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<p>Different uses of the <code>fcntl()</code> system call actually have different return values, but I haven’t covered them here because they’re not socket-related. See your local <code>fcntl()</code> man page for more information.</p>
<h3 id="example-10">Example</h3>
<div id="cb105"><pre><code><span id="cb105-1"><a href="#cb105-1"></a><span>int</span> s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb105-2"><a href="#cb105-2"></a></span>
<span id="cb105-3"><a href="#cb105-3"></a>fcntl<span>(</span>s<span>,</span> F_SETFL<span>,</span> O_NONBLOCK<span>);</span>  <span>// set to non-blocking</span></span>
<span id="cb105-4"><a href="#cb105-4"></a>fcntl<span>(</span>s<span>,</span> F_SETFL<span>,</span> O_ASYNC<span>);</span>     <span>// set to asynchronous I/O</span></span></code></pre></div>
<h3 id="see-also-10">See Also</h3>
<p><a href="#blocking">Blocking</a>, <a href="#sendman"><code>send()</code></a></p>
<h2 data-number="9.12" id="htonsman"> <code>htons()</code>, <code>htonl()</code>, <code>ntohs()</code>, <code>ntohl()</code></h2>

<p>Convert multi-byte integer types from host byte order to network byte order</p>
<h3 id="synopsis-11">Synopsis</h3>
<div id="cb106"><pre><code><span id="cb106-1"><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb106-2"></span>
<span id="cb106-3"><span>uint32_t</span> htonl<span>(</span><span>uint32_t</span> hostlong<span>);</span></span>
<span id="cb106-4"><span>uint16_t</span> htons<span>(</span><span>uint16_t</span> hostshort<span>);</span></span>
<span id="cb106-5"><span>uint32_t</span> ntohl<span>(</span><span>uint32_t</span> netlong<span>);</span></span>
<span id="cb106-6"><span>uint16_t</span> ntohs<span>(</span><span>uint16_t</span> netshort<span>);</span></span></code></pre></div>
<h3 id="description-11">Description</h3>
<p>Just to make you really unhappy, different computers use different byte orderings internally for their multibyte integers (i.e.&nbsp;any integer that’s larger than a <code>char</code>). The upshot of this is that if you <code>send()</code> a two-byte <code>short int</code> from an Intel box to a Mac (before they became Intel boxes, too, I mean), what one computer thinks is the number <code>1</code>, the other will think is the number <code>256</code>, and vice-versa.</p>
<p> The way to get around this problem is for everyone to put aside their differences and agree that Motorola and IBM had it right, and Intel did it the weird way, and so we all convert our byte orderings to “big-endian” before sending them out. Since Intel is a “little-endian” machine, it’s far more politically correct to call our preferred byte ordering “Network Byte Order”. So these functions convert from your native byte order to network byte order and back again.</p>
<p>(This means on Intel these functions swap all the bytes around, and on PowerPC they do nothing because the bytes are already in Network Byte Order. But you should always use them in your code anyway, since someone might want to build it on an Intel machine and still have things work properly.)</p>
<p>Note that the types involved are 32-bit (4 byte, probably <code>int</code>) and 16-bit (2 byte, very likely <code>short</code>) numbers. 64-bit machines might have a <code>htonll()</code> for 64-bit <code>int</code>s, but I’ve not seen it. You’ll just have to write your own.</p>
<p>Anyway, the way these functions work is that you first decide if you’re converting <em>from</em> host (your machine’s) byte order or from network byte order. If “host”, the the first letter of the function you’re going to call is “h”. Otherwise it’s “n” for “network”. The middle of the function name is always “to” because you’re converting from one “to” another, and the penultimate letter shows what you’re converting <em>to</em>. The last letter is the size of the data, “s” for short, or “l” for long. Thus:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>htons()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>s</code>hort</td>
</tr>
<tr>
<td><code>htonl()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>l</code>ong</td>
</tr>
<tr>
<td><code>ntohs()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>s</code>hort</td>
</tr>
<tr>
<td><code>ntohl()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>l</code>ong</td>
</tr>
</tbody>
</table>
<h3 id="return-value-11">Return Value</h3>
<p>Each function returns the converted value.</p>
<h3 id="example-11">Example</h3>
<div id="cb107"><pre><code><span id="cb107-1"><a href="#cb107-1"></a><span>uint32_t</span> some_long <span>=</span> <span>10</span><span>;</span></span>
<span id="cb107-2"><a href="#cb107-2"></a><span>uint16_t</span> some_short <span>=</span> <span>20</span><span>;</span></span>
<span id="cb107-3"><a href="#cb107-3"></a></span>
<span id="cb107-4"><a href="#cb107-4"></a><span>uint32_t</span> network_byte_order<span>;</span></span>
<span id="cb107-5"><a href="#cb107-5"></a></span>
<span id="cb107-6"><a href="#cb107-6"></a><span>// convert and send</span></span>
<span id="cb107-7"><a href="#cb107-7"></a>network_byte_order <span>=</span> htonl<span>(</span>some_long<span>);</span></span>
<span id="cb107-8"><a href="#cb107-8"></a>send<span>(</span>s<span>,</span> <span>&amp;</span>network_byte_order<span>,</span> <span>sizeof</span><span>(</span><span>uint32_t</span><span>),</span> <span>0</span><span>);</span></span>
<span id="cb107-9"><a href="#cb107-9"></a></span>
<span id="cb107-10"><a href="#cb107-10"></a>some_short <span>==</span> ntohs<span>(</span>htons<span>(</span>some_short<span>));</span> <span>// this expression is true</span></span></code></pre></div>
<h2 data-number="9.13" id="inet_ntoaman"> <code>inet_ntoa()</code>, <code>inet_aton()</code>, <code>inet_addr</code></h2>

<p>Convert IP addresses from a dots-and-number string to a <code>struct in_addr</code> and back</p>
<h3 id="synopsis-12">Synopsis</h3>
<div id="cb108"><pre><code><span id="cb108-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb108-2"><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb108-3"><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb108-4"></span>
<span id="cb108-5"><span>// ALL THESE ARE </span><span>DEPRECATED</span><span>! Use inet_pton()  or inet_ntop() instead!!</span></span>
<span id="cb108-6"></span>
<span id="cb108-7"><span>char</span> <span>*</span>inet_ntoa<span>(</span><span>struct</span> in_addr in<span>);</span></span>
<span id="cb108-8"><span>int</span> inet_aton<span>(</span><span>const</span> <span>char</span> <span>*</span>cp<span>,</span> <span>struct</span> in_addr <span>*</span>inp<span>);</span></span>
<span id="cb108-9">in_addr_t inet_addr<span>(</span><span>const</span> <span>char</span> <span>*</span>cp<span>);</span></span></code></pre></div>
<h3 id="description-12">Description</h3>
<p><em>These functions are deprecated because they don’t handle IPv6! Use (<code>inet_ntop()</code>)[#inet_ntopman] or (<code>inet_pton()</code>)[#inet_ntopman] instead! They are included here because they can still be found in the wild.</em></p>
<p>All of these functions convert from a <code>struct in_addr</code> (part of your <code>struct sockaddr_in</code>, most likely) to a string in dots-and-numbers format (e.g.&nbsp;“192.168.5.10”) and vice-versa. If you have an IP address passed on the command line or something, this is the easiest way to get a <code>struct in_addr</code> to <code>connect()</code> to, or whatever. If you need more power, try some of the DNS functions like <code>gethostbyname()</code> or attempt a <em>coup d’État</em> in your local country.</p>
<p>The function <code>inet_ntoa()</code> converts a network address in a <code>struct in_addr</code> to a dots-and-numbers format string. The “n” in “ntoa” stands for network, and the “a” stands for ASCII for historical reasons (so it’s “Network To ASCII”—the “toa” suffix has an analogous friend in the C library called <code>atoi()</code> which converts an ASCII string to an integer).</p>
<p>The function <code>inet_aton()</code> is the opposite, converting from a dots-and-numbers string into a <code>in_addr_t</code> (which is the type of the field <code>s_addr</code> in your <code>struct in_addr</code>).</p>
<p>Finally, the function <code>inet_addr()</code> is an older function that does basically the same thing as <code>inet_aton()</code>. It’s theoretically deprecated, but you’ll see it a lot and the police won’t come get you if you use it.</p>
<h3 id="return-value-12">Return Value</h3>
<p><code>inet_aton()</code> returns non-zero if the address is a valid one, and it returns zero if the address is invalid.</p>
<p><code>inet_ntoa()</code> returns the dots-and-numbers string in a static buffer that is overwritten with each call to the function.</p>
<p><code>inet_addr()</code> returns the address as an <code>in_addr_t</code>, or <code>-1</code> if there’s an error. (That is the same result as if you tried to convert the string “<code>255.255.255.255</code>”, which is a valid IP address. This is why <code>inet_aton()</code> is better.)</p>
<h3 id="example-12">Example</h3>
<div id="cb109"><pre><code><span id="cb109-1"><a href="#cb109-1"></a><span>struct</span> sockaddr_in antelope<span>;</span></span>
<span id="cb109-2"><a href="#cb109-2"></a><span>char</span> <span>*</span>some_addr<span>;</span></span>
<span id="cb109-3"><a href="#cb109-3"></a></span>
<span id="cb109-4"><a href="#cb109-4"></a>inet_aton<span>(</span><span>"10.0.0.1"</span><span>,</span> <span>&amp;</span>antelope<span>.</span>sin_addr<span>);</span> <span>// store IP in antelope</span></span>
<span id="cb109-5"><a href="#cb109-5"></a></span>
<span id="cb109-6"><a href="#cb109-6"></a>some_addr <span>=</span> inet_ntoa<span>(</span>antelope<span>.</span>sin_addr<span>);</span> <span>// return the IP</span></span>
<span id="cb109-7"><a href="#cb109-7"></a>printf<span>(</span><span>"</span><span>%s\n</span><span>"</span><span>,</span> some_addr<span>);</span> <span>// prints "10.0.0.1"</span></span>
<span id="cb109-8"><a href="#cb109-8"></a></span>
<span id="cb109-9"><a href="#cb109-9"></a><span>// and this call is the same as the inet_aton() call, above:</span></span>
<span id="cb109-10"><a href="#cb109-10"></a>antelope<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> inet_addr<span>(</span><span>"10.0.0.1"</span><span>);</span></span></code></pre></div>
<h3 id="see-also-11">See Also</h3>
<p><a href="#inet_ntopman"><code>inet_ntop()</code></a>, <a href="#inet_ntopman"><code>inet_pton()</code></a>, <a href="#gethostbynameman"><code>gethostbyname()</code></a>, <a href="#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number="9.14" id="inet_ntopman"> <code>inet_ntop()</code>, <code>inet_pton()</code></h2>

<p>Convert IP addresses to human-readable form and back.</p>
<h3 id="synopsis-13">Synopsis</h3>
<div id="cb110"><pre><code><span id="cb110-1"><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb110-2"></span>
<span id="cb110-3"><span>const</span> <span>char</span> <span>*</span>inet_ntop<span>(</span><span>int</span> af<span>,</span> <span>const</span> <span>void</span> <span>*</span>src<span>,</span></span>
<span id="cb110-4">                      <span>char</span> <span>*</span>dst<span>,</span> socklen_t size<span>);</span></span>
<span id="cb110-5"></span>
<span id="cb110-6"><span>int</span> inet_pton<span>(</span><span>int</span> af<span>,</span> <span>const</span> <span>char</span> <span>*</span>src<span>,</span> <span>void</span> <span>*</span>dst<span>);</span></span></code></pre></div>
<h3 id="description-13">Description</h3>
<p>These functions are for dealing with human-readable IP addresses and converting them to their binary representation for use with various functions and system calls. The “n” stands for “network”, and “p” for “presentation”. Or “text presentation”. But you can think of it as “printable”. “ntop” is “network to printable”. See?</p>
<p>Sometimes you don’t want to look at a pile of binary numbers when looking at an IP address. You want it in a nice printable form, like <code>192.0.2.180</code>, or <code>2001:db8:8714:3a90::12</code>. In that case, <code>inet_ntop()</code> is for you.</p>
<p><code>inet_ntop()</code> takes the address family in the <code>af</code> parameter (either <code>AF_INET</code> or <code>AF_INET6</code>). The <code>src</code> parameter should be a pointer to either a <code>struct in_addr</code> or <code>struct in6_addr</code> containing the address you wish to convert to a string. Finally <code>dst</code> and <code>size</code> are the pointer to the destination string and the maximum length of that string.</p>
<p>What should the maximum length of the <code>dst</code> string be? What is the maximum length for IPv4 and IPv6 addresses? Fortunately there are a couple of macros to help you out. The maximum lengths are: <code>INET_ADDRSTRLEN</code> and <code>INET6_ADDRSTRLEN</code>.</p>
<p>Other times, you might have a string containing an IP address in readable form, and you want to pack it into a <code>struct sockaddr_in</code> or a <code>struct sockaddr_in6</code>. In that case, the opposite function <code>inet_pton()</code> is what you’re after.</p>
<p><code>inet_pton()</code> also takes an address family (either <code>AF_INET</code> or <code>AF_INET6</code>) in the <code>af</code> parameter. The <code>src</code> parameter is a pointer to a string containing the IP address in printable form. Lastly the <code>dst</code> parameter points to where the result should be stored, which is probably a <code>struct in_addr</code> or <code>struct in6_addr</code>.</p>
<p>These functions don’t do DNS lookups—you’ll need <code>getaddrinfo()</code> for that.</p>
<h3 id="return-value-13">Return Value</h3>
<p><code>inet_ntop()</code> returns the <code>dst</code> parameter on success, or <code>NULL</code> on failure (and <code>errno</code> is set).</p>
<p><code>inet_pton()</code> returns <code>1</code> on success. It returns <code>-1</code> if there was an error (<code>errno</code> is set), or <code>0</code> if the input isn’t a valid IP address.</p>
<h3 id="example-13">Example</h3>
<div id="cb111"><pre><code><span id="cb111-1"><a href="#cb111-1"></a><span>// IPv4 demo of inet_ntop() and inet_pton()</span></span>
<span id="cb111-2"><a href="#cb111-2"></a></span>
<span id="cb111-3"><a href="#cb111-3"></a><span>struct</span> sockaddr_in sa<span>;</span></span>
<span id="cb111-4"><a href="#cb111-4"></a><span>char</span> str<span>[</span>INET_ADDRSTRLEN<span>];</span></span>
<span id="cb111-5"><a href="#cb111-5"></a></span>
<span id="cb111-6"><a href="#cb111-6"></a><span>// store this IP address in sa:</span></span>
<span id="cb111-7"><a href="#cb111-7"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"192.0.2.33"</span><span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>));</span></span>
<span id="cb111-8"><a href="#cb111-8"></a></span>
<span id="cb111-9"><a href="#cb111-9"></a><span>// now get it back and print it</span></span>
<span id="cb111-10"><a href="#cb111-10"></a>inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>),</span> str<span>,</span> INET_ADDRSTRLEN<span>);</span></span>
<span id="cb111-11"><a href="#cb111-11"></a></span>
<span id="cb111-12"><a href="#cb111-12"></a>printf<span>(</span><span>"</span><span>%s\n</span><span>"</span><span>,</span> str<span>);</span> <span>// prints "192.0.2.33"</span></span></code></pre></div>
<div id="cb112"><pre><code><span id="cb112-1"><a href="#cb112-1"></a><span>// IPv6 demo of inet_ntop() and inet_pton()</span></span>
<span id="cb112-2"><a href="#cb112-2"></a><span>// (basically the same except with a bunch of 6s thrown around)</span></span>
<span id="cb112-3"><a href="#cb112-3"></a></span>
<span id="cb112-4"><a href="#cb112-4"></a><span>struct</span> sockaddr_in6 sa<span>;</span></span>
<span id="cb112-5"><a href="#cb112-5"></a><span>char</span> str<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb112-6"><a href="#cb112-6"></a></span>
<span id="cb112-7"><a href="#cb112-7"></a><span>// store this IP address in sa:</span></span>
<span id="cb112-8"><a href="#cb112-8"></a>inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:8714:3a90::12"</span><span>,</span> <span>&amp;(</span>sa<span>.</span>sin6_addr<span>));</span></span>
<span id="cb112-9"><a href="#cb112-9"></a></span>
<span id="cb112-10"><a href="#cb112-10"></a><span>// now get it back and print it</span></span>
<span id="cb112-11"><a href="#cb112-11"></a>inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;(</span>sa<span>.</span>sin6_addr<span>),</span> str<span>,</span> INET6_ADDRSTRLEN<span>);</span></span>
<span id="cb112-12"><a href="#cb112-12"></a></span>
<span id="cb112-13"><a href="#cb112-13"></a>printf<span>(</span><span>"</span><span>%s\n</span><span>"</span><span>,</span> str<span>);</span> <span>// prints "2001:db8:8714:3a90::12"</span></span></code></pre></div>
<div id="cb113"><pre><code><span id="cb113-1"><a href="#cb113-1"></a><span>// Helper function you can use:</span></span>
<span id="cb113-2"><a href="#cb113-2"></a></span>
<span id="cb113-3"><a href="#cb113-3"></a><span>//Convert a struct sockaddr address to a string, IPv4 and IPv6:</span></span>
<span id="cb113-4"><a href="#cb113-4"></a></span>
<span id="cb113-5"><a href="#cb113-5"></a><span>char</span> <span>*</span>get_ip_str<span>(</span><span>const</span> <span>struct</span> sockaddr <span>*</span>sa<span>,</span> <span>char</span> <span>*</span>s<span>,</span> <span>size_t</span> maxlen<span>)</span></span>
<span id="cb113-6"><a href="#cb113-6"></a><span>{</span></span>
<span id="cb113-7"><a href="#cb113-7"></a>    <span>switch</span><span>(</span>sa<span>-&gt;</span>sa_family<span>)</span> <span>{</span></span>
<span id="cb113-8"><a href="#cb113-8"></a>        <span>case</span> AF_INET<span>:</span></span>
<span id="cb113-9"><a href="#cb113-9"></a>            inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;(((</span><span>struct</span> sockaddr_in <span>*)</span>sa<span>)-&gt;</span>sin_addr<span>),</span></span>
<span id="cb113-10"><a href="#cb113-10"></a>                    s<span>,</span> maxlen<span>);</span></span>
<span id="cb113-11"><a href="#cb113-11"></a>            <span>break</span><span>;</span></span>
<span id="cb113-12"><a href="#cb113-12"></a></span>
<span id="cb113-13"><a href="#cb113-13"></a>        <span>case</span> AF_INET6<span>:</span></span>
<span id="cb113-14"><a href="#cb113-14"></a>            inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6 <span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>),</span></span>
<span id="cb113-15"><a href="#cb113-15"></a>                    s<span>,</span> maxlen<span>);</span></span>
<span id="cb113-16"><a href="#cb113-16"></a>            <span>break</span><span>;</span></span>
<span id="cb113-17"><a href="#cb113-17"></a></span>
<span id="cb113-18"><a href="#cb113-18"></a>        <span>default</span><span>:</span></span>
<span id="cb113-19"><a href="#cb113-19"></a>            strncpy<span>(</span>s<span>,</span> <span>"Unknown AF"</span><span>,</span> maxlen<span>);</span></span>
<span id="cb113-20"><a href="#cb113-20"></a>            <span>return</span> NULL<span>;</span></span>
<span id="cb113-21"><a href="#cb113-21"></a>    <span>}</span></span>
<span id="cb113-22"><a href="#cb113-22"></a></span>
<span id="cb113-23"><a href="#cb113-23"></a>    <span>return</span> s<span>;</span></span>
<span id="cb113-24"><a href="#cb113-24"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-12">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a></p>
<h2 data-number="9.15" id="listenman"> <code>listen()</code></h2>

<p>Tell a socket to listen for incoming connections</p>
<h3 id="synopsis-14">Synopsis</h3>
<div id="cb114"><pre><code><span id="cb114-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb114-2"></span>
<span id="cb114-3"><span>int</span> listen<span>(</span><span>int</span> s<span>,</span> <span>int</span> backlog<span>);</span></span></code></pre></div>
<h3 id="description-14">Description</h3>
<p>You can take your socket descriptor (made with the <code>socket()</code> system call) and tell it to listen for incoming connections. This is what differentiates the servers from the clients, guys.</p>
<p>The <code>backlog</code> parameter can mean a couple different things depending on the system you on, but loosely it is how many pending connections you can have before the kernel starts rejecting new ones. So as the new connections come in, you should be quick to <code>accept()</code> them so that the backlog doesn’t fill. Try setting it to 10 or so, and if your clients start getting “Connection refused” under heavy load, set it higher.</p>
<p>Before calling <code>listen()</code>, your server should call <code>bind()</code> to attach itself to a specific port number. That port number (on the server’s IP address) will be the one that clients connect to.</p>
<h3 id="return-value-14">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-14">Example</h3>
<div id="cb115"><pre><code><span id="cb115-1"><a href="#cb115-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb115-2"><a href="#cb115-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb115-3"><a href="#cb115-3"></a></span>
<span id="cb115-4"><a href="#cb115-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb115-5"><a href="#cb115-5"></a></span>
<span id="cb115-6"><a href="#cb115-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb115-7"><a href="#cb115-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb115-8"><a href="#cb115-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb115-9"><a href="#cb115-9"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb115-10"><a href="#cb115-10"></a></span>
<span id="cb115-11"><a href="#cb115-11"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb115-12"><a href="#cb115-12"></a></span>
<span id="cb115-13"><a href="#cb115-13"></a><span>// make a socket:</span></span>
<span id="cb115-14"><a href="#cb115-14"></a></span>
<span id="cb115-15"><a href="#cb115-15"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb115-16"><a href="#cb115-16"></a></span>
<span id="cb115-17"><a href="#cb115-17"></a><span>// bind it to the port we passed in to getaddrinfo():</span></span>
<span id="cb115-18"><a href="#cb115-18"></a></span>
<span id="cb115-19"><a href="#cb115-19"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb115-20"><a href="#cb115-20"></a></span>
<span id="cb115-21"><a href="#cb115-21"></a>listen<span>(</span>sockfd<span>,</span> <span>10</span><span>);</span> <span>// set s up to be a server (listening) socket</span></span>
<span id="cb115-22"><a href="#cb115-22"></a></span>
<span id="cb115-23"><a href="#cb115-23"></a><span>// then have an accept() loop down here somewhere</span></span></code></pre></div>
<h3 id="see-also-13">See Also</h3>
<p><a href="#acceptman"><code>accept()</code></a>, <a href="#bindman"><code>bind()</code></a>, <a href="#socketman"><code>socket()</code></a></p>
<h2 data-number="9.16" id="perrorman"> <code>perror()</code>, <code>strerror()</code></h2>

<p>Print an error as a human-readable string</p>
<h3 id="synopsis-15">Synopsis</h3>
<div id="cb116"><pre><code><span id="cb116-1"><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb116-2"><span>#include </span><span>&lt;string.h&gt;</span><span>   </span><span>// for strerror()</span></span>
<span id="cb116-3"></span>
<span id="cb116-4"><span>void</span> perror<span>(</span><span>const</span> <span>char</span> <span>*</span>s<span>);</span></span>
<span id="cb116-5"><span>char</span> <span>*</span>strerror<span>(</span><span>int</span> errnum<span>);</span></span></code></pre></div>
<h3 id="description-15">Description</h3>
<p>Since so many functions return <code>-1</code> on error and set the value of the variable <code>errno</code> to be some number, it would sure be nice if you could easily print that in a form that made sense to you.</p>
<p>Mercifully, <code>perror()</code> does that. If you want more description to be printed before the error, you can point the parameter <code>s</code> to it (or you can leave <code>s</code> as <code>NULL</code> and nothing additional will be printed).</p>
<p>In a nutshell, this function takes <code>errno</code> values, like <code>ECONNRESET</code>, and prints them nicely, like “Connection reset by peer.”</p>
<p>The function <code>strerror()</code> is very similar to <code>perror()</code>, except it returns a pointer to the error message string for a given value (you usually pass in the variable <code>errno</code>).</p>
<h3 id="return-value-15">Return Value</h3>
<p><code>strerror()</code> returns a pointer to the error message string.</p>
<h3 id="example-15">Example</h3>
<div id="cb117"><pre><code><span id="cb117-1"><a href="#cb117-1"></a><span>int</span> s<span>;</span></span>
<span id="cb117-2"><a href="#cb117-2"></a></span>
<span id="cb117-3"><a href="#cb117-3"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb117-4"><a href="#cb117-4"></a></span>
<span id="cb117-5"><a href="#cb117-5"></a><span>if</span> <span>(</span>s <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span> <span>// some error has occurred</span></span>
<span id="cb117-6"><a href="#cb117-6"></a>    <span>// prints "socket error: " + the error message:</span></span>
<span id="cb117-7"><a href="#cb117-7"></a>    perror<span>(</span><span>"socket error"</span><span>);</span></span>
<span id="cb117-8"><a href="#cb117-8"></a><span>}</span></span>
<span id="cb117-9"><a href="#cb117-9"></a></span>
<span id="cb117-10"><a href="#cb117-10"></a><span>// similarly:</span></span>
<span id="cb117-11"><a href="#cb117-11"></a><span>if</span> <span>(</span>listen<span>(</span>s<span>,</span> <span>10</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb117-12"><a href="#cb117-12"></a>    <span>// this prints "an error: " + the error message from errno:</span></span>
<span id="cb117-13"><a href="#cb117-13"></a>    printf<span>(</span><span>"an error: </span><span>%s\n</span><span>"</span><span>,</span> strerror<span>(</span>errno<span>));</span></span>
<span id="cb117-14"><a href="#cb117-14"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-14">See Also</h3>
<p><a href="#errnoman"><code>errno</code></a></p>
<h2 data-number="9.17" id="pollman"> <code>poll()</code></h2>

<p>Test for events on multiple sockets simultaneously</p>
<h3 id="synopsis-16">Synopsis</h3>
<div id="cb118"><pre><code><span id="cb118-1"><span>#include </span><span>&lt;sys/poll.h&gt;</span></span>
<span id="cb118-2"></span>
<span id="cb118-3"><span>int</span> poll<span>(</span><span>struct</span> pollfd <span>*</span>ufds<span>,</span> <span>unsigned</span> <span>int</span> nfds<span>,</span> <span>int</span> timeout<span>);</span></span></code></pre></div>
<h3 id="description-16">Description</h3>
<p>This function is very similar to <code>select()</code> in that they both watch sets of file descriptors for events, such as incoming data ready to <code>recv()</code>, socket ready to <code>send()</code> data to, out-of-band data ready to <code>recv()</code>, errors, etc.</p>
<p>The basic idea is that you pass an array of <code>nfds</code> <code>struct pollfd</code>s in <code>ufds</code>, along with a timeout in milliseconds (1000 milliseconds in a second). The <code>timeout</code> can be negative if you want to wait forever. If no event happens on any of the socket descriptors by the timeout, <code>poll()</code> will return.</p>
<p>Each element in the array of <code>struct pollfd</code>s represents one socket descriptor, and contains the following fields:</p>

<div id="cb119"><pre><code><span id="cb119-1"><span>struct</span> pollfd <span>{</span></span>
<span id="cb119-2">    <span>int</span> fd<span>;</span>         <span>// the socket descriptor</span></span>
<span id="cb119-3">    <span>short</span> events<span>;</span>   <span>// bitmap of events we're interested in</span></span>
<span id="cb119-4">    <span>short</span> revents<span>;</span>  <span>// when poll() returns, bitmap of events that occurred</span></span>
<span id="cb119-5"><span>};</span></span></code></pre></div>
<p>Before calling <code>poll()</code>, load <code>fd</code> with the socket descriptor (if you set <code>fd</code> to a negative number, this <code>struct pollfd</code> is ignored and its <code>revents</code> field is set to zero) and then construct the <code>events</code> field by bitwise-ORing the following macros:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>POLLIN</code></td>
<td>Alert me when data is ready to <code>recv()</code> on this socket.</td>
</tr>
<tr>
<td><code>POLLOUT</code></td>
<td>Alert me when I can <code>send()</code> data to this socket without blocking.</td>
</tr>
<tr>
<td><code>POLLPRI</code></td>
<td>Alert me when out-of-band data is ready to <code>recv()</code> on this socket.</td>
</tr>
</tbody>
</table>
<p>Once the <code>poll()</code> call returns, the <code>revents</code> field will be constructed as a bitwise-OR of the above fields, telling you which descriptors actually have had that event occur. Additionally, these other fields might be present:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>POLLERR</code></td>
<td>An error has occurred on this socket.</td>
</tr>
<tr>
<td><code>POLLHUP</code></td>
<td>The remote side of the connection hung up.</td>
</tr>
<tr>
<td><code>POLLNVAL</code></td>
<td>Something was wrong with the socket descriptor <code>fd</code>—maybe it’s uninitialized?</td>
</tr>
</tbody>
</table>
<h3 id="return-value-16">Return Value</h3>
<p>Returns the number of elements in the <code>ufds</code> array that have had event occur on them; this can be zero if the timeout occurred. Also returns <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-16">Example</h3>
<div id="cb120"><pre><code><span id="cb120-1"><a href="#cb120-1"></a><span>int</span> s1<span>,</span> s2<span>;</span></span>
<span id="cb120-2"><a href="#cb120-2"></a><span>int</span> rv<span>;</span></span>
<span id="cb120-3"><a href="#cb120-3"></a><span>char</span> buf1<span>[</span><span>256</span><span>],</span> buf2<span>[</span><span>256</span><span>];</span></span>
<span id="cb120-4"><a href="#cb120-4"></a><span>struct</span> pollfd ufds<span>[</span><span>2</span><span>];</span></span>
<span id="cb120-5"><a href="#cb120-5"></a></span>
<span id="cb120-6"><a href="#cb120-6"></a>s1 <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb120-7"><a href="#cb120-7"></a>s2 <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb120-8"><a href="#cb120-8"></a></span>
<span id="cb120-9"><a href="#cb120-9"></a><span>// pretend we've connected both to a server at this point</span></span>
<span id="cb120-10"><a href="#cb120-10"></a><span>//connect(s1, ...)...</span></span>
<span id="cb120-11"><a href="#cb120-11"></a><span>//connect(s2, ...)...</span></span>
<span id="cb120-12"><a href="#cb120-12"></a></span>
<span id="cb120-13"><a href="#cb120-13"></a><span>// set up the array of file descriptors.</span></span>
<span id="cb120-14"><a href="#cb120-14"></a><span>//</span></span>
<span id="cb120-15"><a href="#cb120-15"></a><span>// in this example, we want to know when there's normal or out-of-band</span></span>
<span id="cb120-16"><a href="#cb120-16"></a><span>// data ready to be recv()'d...</span></span>
<span id="cb120-17"><a href="#cb120-17"></a></span>
<span id="cb120-18"><a href="#cb120-18"></a>ufds<span>[</span><span>0</span><span>].</span>fd <span>=</span> s1<span>;</span></span>
<span id="cb120-19"><a href="#cb120-19"></a>ufds<span>[</span><span>0</span><span>].</span>events <span>=</span> POLLIN <span>|</span> POLLPRI<span>;</span> <span>// check for normal or out-of-band</span></span>
<span id="cb120-20"><a href="#cb120-20"></a></span>
<span id="cb120-21"><a href="#cb120-21"></a>ufds<span>[</span><span>1</span><span>].</span>fd <span>=</span> s2<span>;</span></span>
<span id="cb120-22"><a href="#cb120-22"></a>ufds<span>[</span><span>1</span><span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// check for just normal data</span></span>
<span id="cb120-23"><a href="#cb120-23"></a></span>
<span id="cb120-24"><a href="#cb120-24"></a><span>// wait for events on the sockets, 3.5 second timeout</span></span>
<span id="cb120-25"><a href="#cb120-25"></a>rv <span>=</span> poll<span>(</span>ufds<span>,</span> <span>2</span><span>,</span> <span>3500</span><span>);</span></span>
<span id="cb120-26"><a href="#cb120-26"></a></span>
<span id="cb120-27"><a href="#cb120-27"></a><span>if</span> <span>(</span>rv <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb120-28"><a href="#cb120-28"></a>    perror<span>(</span><span>"poll"</span><span>);</span> <span>// error occurred in poll()</span></span>
<span id="cb120-29"><a href="#cb120-29"></a><span>}</span> <span>else</span> <span>if</span> <span>(</span>rv <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb120-30"><a href="#cb120-30"></a>    printf<span>(</span><span>"Timeout occurred! No data after 3.5 seconds.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb120-31"><a href="#cb120-31"></a><span>}</span> <span>else</span> <span>{</span></span>
<span id="cb120-32"><a href="#cb120-32"></a>    <span>// check for events on s1:</span></span>
<span id="cb120-33"><a href="#cb120-33"></a>    <span>if</span> <span>(</span>ufds<span>[</span><span>0</span><span>].</span>revents <span>&amp;</span> POLLIN<span>)</span> <span>{</span></span>
<span id="cb120-34"><a href="#cb120-34"></a>        recv<span>(</span>s1<span>,</span> buf1<span>,</span> <span>sizeof</span> buf1<span>,</span> <span>0</span><span>);</span> <span>// receive normal data</span></span>
<span id="cb120-35"><a href="#cb120-35"></a>    <span>}</span></span>
<span id="cb120-36"><a href="#cb120-36"></a>    <span>if</span> <span>(</span>ufds<span>[</span><span>0</span><span>].</span>revents <span>&amp;</span> POLLPRI<span>)</span> <span>{</span></span>
<span id="cb120-37"><a href="#cb120-37"></a>        recv<span>(</span>s1<span>,</span> buf1<span>,</span> <span>sizeof</span> buf1<span>,</span> MSG_OOB<span>);</span> <span>// out-of-band data</span></span>
<span id="cb120-38"><a href="#cb120-38"></a>    <span>}</span></span>
<span id="cb120-39"><a href="#cb120-39"></a></span>
<span id="cb120-40"><a href="#cb120-40"></a>    <span>// check for events on s2:</span></span>
<span id="cb120-41"><a href="#cb120-41"></a>    <span>if</span> <span>(</span>ufds<span>[</span><span>1</span><span>].</span>revents <span>&amp;</span> POLLIN<span>)</span> <span>{</span></span>
<span id="cb120-42"><a href="#cb120-42"></a>        recv<span>(</span>s1<span>,</span> buf2<span>,</span> <span>sizeof</span> buf2<span>,</span> <span>0</span><span>);</span></span>
<span id="cb120-43"><a href="#cb120-43"></a>    <span>}</span></span>
<span id="cb120-44"><a href="#cb120-44"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-15">See Also</h3>
<p><a href="#selectman"><code>select()</code></a></p>
<h2 data-number="9.18" id="recvman"> <code>recv()</code>, <code>recvfrom()</code></h2>

<p>Receive data on a socket</p>
<h3 id="synopsis-17">Synopsis</h3>
<div id="cb121"><pre><code><span id="cb121-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb121-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb121-3"></span>
<span id="cb121-4"><span>ssize_t</span> recv<span>(</span><span>int</span> s<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> flags<span>);</span></span>
<span id="cb121-5"><span>ssize_t</span> recvfrom<span>(</span><span>int</span> s<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> flags<span>,</span></span>
<span id="cb121-6">                 <span>struct</span> sockaddr <span>*</span>from<span>,</span> socklen_t <span>*</span>fromlen<span>);</span></span></code></pre></div>
<h3 id="description-17">Description</h3>
<p>Once you have a socket up and connected, you can read incoming data from the remote side using the <code>recv()</code> (for TCP <code>SOCK_STREAM</code> sockets) and <code>recvfrom()</code> (for UDP <code>SOCK_DGRAM</code> sockets).</p>
<p>Both functions take the socket descriptor <code>s</code>, a pointer to the buffer <code>buf</code>, the size (in bytes) of the buffer <code>len</code>, and a set of <code>flags</code> that control how the functions work.</p>
<p>Additionally, the <code>recvfrom()</code> takes a <code>struct sockaddr*</code>, <code>from</code> that will tell you where the data came from, and will fill in <code>fromlen</code> with the size of <code>struct sockaddr</code>. (You must also initialize <code>fromlen</code> to be the size of <code>from</code> or <code>struct sockaddr</code>.)</p>
<p>So what wondrous flags can you pass into this function? Here are some of them, but you should check your local man pages for more information and what is actually supported on your system. You bitwise-or these together, or just set <code>flags</code> to <code>0</code> if you want it to be a regular vanilla <code>recv()</code>.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MSG_OOB</code></td>
<td>Receive Out of Band data. This is how to get data that has been sent to you with the <code>MSG_OOB</code> flag in <code>send()</code>. As the receiving side, you will have had signal <code>SIGURG</code> raised telling you there is urgent data. In your handler for that signal, you could call <code>recv()</code> with this <code>MSG_OOB</code> flag.</td>
</tr>
<tr>
<td><code>MSG_PEEK</code></td>
<td>If you want to call <code>recv()</code> “just for pretend”, you can call it with this flag. This will tell you what’s waiting in the buffer for when you call <code>recv()</code> “for real” (i.e.&nbsp;<em>without</em> the <code>MSG_PEEK</code> flag. It’s like a sneak preview into the next <code>recv()</code> call.</td>
</tr>
<tr>
<td><code>MSG_WAITALL</code></td>
<td>Tell <code>recv()</code> to not return until all the data you specified in the <code>len</code> parameter. It will ignore your wishes in extreme circumstances, however, like if a signal interrupts the call or if some error occurs or if the remote side closes the connection, etc. Don’t be mad with it.</td>
</tr>
</tbody>
</table>
<p>When you call <code>recv()</code>, it will block until there is some data to read. If you want to not block, set the socket to non-blocking or check with <code>select()</code> or <code>poll()</code> to see if there is incoming data before calling <code>recv()</code> or <code>recvfrom()</code>.</p>
<h3 id="return-value-17">Return Value</h3>
<p>Returns the number of bytes actually received (which might be less than you requested in the <code>len</code> parameter), or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<p>If the remote side has closed the connection, <code>recv()</code> will return <code>0</code>. This is the normal method for determining if the remote side has closed the connection. Normality is good, rebel!</p>
<h3 id="example-17">Example</h3>
<div id="cb122"><pre><code><span id="cb122-1"><a href="#cb122-1"></a><span>// stream sockets and recv()</span></span>
<span id="cb122-2"><a href="#cb122-2"></a></span>
<span id="cb122-3"><a href="#cb122-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb122-4"><a href="#cb122-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb122-5"><a href="#cb122-5"></a><span>char</span> buf<span>[</span><span>512</span><span>];</span></span>
<span id="cb122-6"><a href="#cb122-6"></a><span>int</span> byte_count<span>;</span></span>
<span id="cb122-7"><a href="#cb122-7"></a></span>
<span id="cb122-8"><a href="#cb122-8"></a><span>// get host info, make socket, and connect it</span></span>
<span id="cb122-9"><a href="#cb122-9"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb122-10"><a href="#cb122-10"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb122-11"><a href="#cb122-11"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb122-12"><a href="#cb122-12"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb122-13"><a href="#cb122-13"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb122-14"><a href="#cb122-14"></a>connect<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb122-15"><a href="#cb122-15"></a></span>
<span id="cb122-16"><a href="#cb122-16"></a><span>// all right! now that we're connected, we can receive some data!</span></span>
<span id="cb122-17"><a href="#cb122-17"></a>byte_count <span>=</span> recv<span>(</span>sockfd<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>);</span></span>
<span id="cb122-18"><a href="#cb122-18"></a>printf<span>(</span><span>"recv()'d </span><span>%d</span><span> bytes of data in buf</span><span>\n</span><span>"</span><span>,</span> byte_count<span>);</span></span></code></pre></div>
<div id="cb123"><pre><code><span id="cb123-1"><a href="#cb123-1"></a><span>// datagram sockets and recvfrom()</span></span>
<span id="cb123-2"><a href="#cb123-2"></a></span>
<span id="cb123-3"><a href="#cb123-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb123-4"><a href="#cb123-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb123-5"><a href="#cb123-5"></a><span>int</span> byte_count<span>;</span></span>
<span id="cb123-6"><a href="#cb123-6"></a>socklen_t fromlen<span>;</span></span>
<span id="cb123-7"><a href="#cb123-7"></a><span>struct</span> sockaddr_storage addr<span>;</span></span>
<span id="cb123-8"><a href="#cb123-8"></a><span>char</span> buf<span>[</span><span>512</span><span>];</span></span>
<span id="cb123-9"><a href="#cb123-9"></a><span>char</span> ipstr<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb123-10"><a href="#cb123-10"></a></span>
<span id="cb123-11"><a href="#cb123-11"></a><span>// get host info, make socket, bind it to port 4950</span></span>
<span id="cb123-12"><a href="#cb123-12"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb123-13"><a href="#cb123-13"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb123-14"><a href="#cb123-14"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_DGRAM<span>;</span></span>
<span id="cb123-15"><a href="#cb123-15"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span></span>
<span id="cb123-16"><a href="#cb123-16"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"4950"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb123-17"><a href="#cb123-17"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb123-18"><a href="#cb123-18"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb123-19"><a href="#cb123-19"></a></span>
<span id="cb123-20"><a href="#cb123-20"></a><span>// no need to accept(), just recvfrom():</span></span>
<span id="cb123-21"><a href="#cb123-21"></a></span>
<span id="cb123-22"><a href="#cb123-22"></a>fromlen <span>=</span> <span>sizeof</span> addr<span>;</span></span>
<span id="cb123-23"><a href="#cb123-23"></a>byte_count <span>=</span> recvfrom<span>(</span>sockfd<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>,</span> <span>&amp;</span>addr<span>,</span> <span>&amp;</span>fromlen<span>);</span></span>
<span id="cb123-24"><a href="#cb123-24"></a></span>
<span id="cb123-25"><a href="#cb123-25"></a>printf<span>(</span><span>"recv()'d </span><span>%d</span><span> bytes of data in buf</span><span>\n</span><span>"</span><span>,</span> byte_count<span>);</span></span>
<span id="cb123-26"><a href="#cb123-26"></a>printf<span>(</span><span>"from IP address </span><span>%s\n</span><span>"</span><span>,</span></span>
<span id="cb123-27"><a href="#cb123-27"></a>    inet_ntop<span>(</span>addr<span>.</span>ss_family<span>,</span></span>
<span id="cb123-28"><a href="#cb123-28"></a>        addr<span>.</span>ss_family <span>==</span> AF_INET<span>?</span></span>
<span id="cb123-29"><a href="#cb123-29"></a>            <span>((</span><span>struct</span> sockadd_in <span>*)&amp;</span>addr<span>)-&gt;</span>sin_addr<span>:</span></span>
<span id="cb123-30"><a href="#cb123-30"></a>            <span>((</span><span>struct</span> sockadd_in6 <span>*)&amp;</span>addr<span>)-&gt;</span>sin6_addr<span>,</span></span>
<span id="cb123-31"><a href="#cb123-31"></a>        ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span></code></pre></div>
<h3 id="see-also-16">See Also</h3>
<p><a href="#sendman"><code>send()</code></a>, <a href="#sendman"><code>sendto()</code></a>, <a href="#selectman"><code>select()</code></a>, <a href="#pollman"><code>poll()</code></a>, <a href="#blocking">Blocking</a></p>
<h2 data-number="9.19" id="selectman"> <code>select()</code></h2>

<p>Check if sockets descriptors are ready to read/write</p>
<h3 id="synopsis-18">Synopsis</h3>
<div id="cb124"><pre><code><span id="cb124-1"><span>#include </span><span>&lt;sys/select.h&gt;</span></span>
<span id="cb124-2"></span>
<span id="cb124-3"><span>int</span> select<span>(</span><span>int</span> n<span>,</span> fd_set <span>*</span>readfds<span>,</span> fd_set <span>*</span>writefds<span>,</span> fd_set <span>*</span>exceptfds<span>,</span></span>
<span id="cb124-4">           <span>struct</span> timeval <span>*</span>timeout<span>);</span></span>
<span id="cb124-5"></span>
<span id="cb124-6">FD_SET<span>(</span><span>int</span> fd<span>,</span> fd_set <span>*</span>set<span>);</span></span>
<span id="cb124-7">FD_CLR<span>(</span><span>int</span> fd<span>,</span> fd_set <span>*</span>set<span>);</span></span>
<span id="cb124-8">FD_ISSET<span>(</span><span>int</span> fd<span>,</span> fd_set <span>*</span>set<span>);</span></span>
<span id="cb124-9">FD_ZERO<span>(</span>fd_set <span>*</span>set<span>);</span></span></code></pre></div>
<h3 id="description-18">Description</h3>
<p>The <code>select()</code> function gives you a way to simultaneously check multiple sockets to see if they have data waiting to be <code>recv()</code>d, or if you can <code>send()</code> data to them without blocking, or if some exception has occurred.</p>
<p>You populate your sets of socket descriptors using the macros, like <code>FD_SET()</code>, above. Once you have the set, you pass it into the function as one of the following parameters: <code>readfds</code> if you want to know when any of the sockets in the set is ready to <code>recv()</code> data, <code>writefds</code> if any of the sockets is ready to <code>send()</code> data to, and/or <code>exceptfds</code> if you need to know when an exception (error) occurs on any of the sockets. Any or all of these parameters can be <code>NULL</code> if you’re not interested in those types of events. After <code>select()</code> returns, the values in the sets will be changed to show which are ready for reading or writing, and which have exceptions.</p>
<p>The first parameter, <code>n</code> is the highest-numbered socket descriptor (they’re just <code>int</code>s, remember?) plus one.</p>
<p>Lastly, the <code>struct timeval</code>, <code>timeout</code>, at the end—this lets you tell <code>select()</code> how long to check these sets for. It’ll return after the timeout, or when an event occurs, whichever is first. The <code>struct timeval</code> has two fields: <code>tv_sec</code> is the number of seconds, to which is added <code>tv_usec</code>, the number of microseconds (1,000,000 microseconds in a second).</p>
<p>The helper macros do the following:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FD_SET(int fd, fd_set *set);</code></td>
<td>Add <code>fd</code> to the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_CLR(int fd, fd_set *set);</code></td>
<td>Remove <code>fd</code> from the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ISSET(int fd, fd_set *set);</code></td>
<td>Return true if <code>fd</code> is in the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ZERO(fd_set *set);</code></td>
<td>Clear all entries from the <code>set</code>.</td>
</tr>
</tbody>
</table>
<p>Note for Linux users: Linux’s <code>select()</code> can return “ready-to-read” and then not actually be ready to read, thus causing the subsequent <code>read()</code> call to block. You can work around this bug by setting <code>O_NONBLOCK</code> flag on the receiving socket so it errors with <code>EWOULDBLOCK</code>, then ignoring this error if it occurs. See the <a href="#fcntlman"><code>fcntl()</code> man page</a> for more info on setting a socket to non-blocking.</p>
<h3 id="return-value-18">Return Value</h3>
<p>Returns the number of descriptors in the set on success, <code>0</code> if the timeout was reached, or <code>-1</code> on error (and <code>errno</code> will be set accordingly). Also, the sets are modified to show which sockets are ready.</p>
<h3 id="example-18">Example</h3>
<div id="cb125"><pre><code><span id="cb125-1"><a href="#cb125-1"></a><span>int</span> s1<span>,</span> s2<span>,</span> n<span>;</span></span>
<span id="cb125-2"><a href="#cb125-2"></a>fd_set readfds<span>;</span></span>
<span id="cb125-3"><a href="#cb125-3"></a><span>struct</span> timeval tv<span>;</span></span>
<span id="cb125-4"><a href="#cb125-4"></a><span>char</span> buf1<span>[</span><span>256</span><span>],</span> buf2<span>[</span><span>256</span><span>];</span></span>
<span id="cb125-5"><a href="#cb125-5"></a></span>
<span id="cb125-6"><a href="#cb125-6"></a><span>// pretend we've connected both to a server at this point</span></span>
<span id="cb125-7"><a href="#cb125-7"></a><span>//s1 = socket(...);</span></span>
<span id="cb125-8"><a href="#cb125-8"></a><span>//s2 = socket(...);</span></span>
<span id="cb125-9"><a href="#cb125-9"></a><span>//connect(s1, ...)...</span></span>
<span id="cb125-10"><a href="#cb125-10"></a><span>//connect(s2, ...)...</span></span>
<span id="cb125-11"><a href="#cb125-11"></a></span>
<span id="cb125-12"><a href="#cb125-12"></a><span>// clear the set ahead of time</span></span>
<span id="cb125-13"><a href="#cb125-13"></a>FD_ZERO<span>(&amp;</span>readfds<span>);</span></span>
<span id="cb125-14"><a href="#cb125-14"></a></span>
<span id="cb125-15"><a href="#cb125-15"></a><span>// add our descriptors to the set</span></span>
<span id="cb125-16"><a href="#cb125-16"></a>FD_SET<span>(</span>s1<span>,</span> <span>&amp;</span>readfds<span>);</span></span>
<span id="cb125-17"><a href="#cb125-17"></a>FD_SET<span>(</span>s2<span>,</span> <span>&amp;</span>readfds<span>);</span></span>
<span id="cb125-18"><a href="#cb125-18"></a></span>
<span id="cb125-19"><a href="#cb125-19"></a><span>// since we got s2 second, it's the "greater", so we use that for</span></span>
<span id="cb125-20"><a href="#cb125-20"></a><span>// the n param in select()</span></span>
<span id="cb125-21"><a href="#cb125-21"></a>n <span>=</span> s2 <span>+</span> <span>1</span><span>;</span></span>
<span id="cb125-22"><a href="#cb125-22"></a></span>
<span id="cb125-23"><a href="#cb125-23"></a><span>// wait until either socket has data ready to be recv()d (timeout 10.5 secs)</span></span>
<span id="cb125-24"><a href="#cb125-24"></a>tv<span>.</span>tv_sec <span>=</span> <span>10</span><span>;</span></span>
<span id="cb125-25"><a href="#cb125-25"></a>tv<span>.</span>tv_usec <span>=</span> <span>500000</span><span>;</span></span>
<span id="cb125-26"><a href="#cb125-26"></a>rv <span>=</span> select<span>(</span>n<span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>,</span> <span>&amp;</span>tv<span>);</span></span>
<span id="cb125-27"><a href="#cb125-27"></a></span>
<span id="cb125-28"><a href="#cb125-28"></a><span>if</span> <span>(</span>rv <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb125-29"><a href="#cb125-29"></a>    perror<span>(</span><span>"select"</span><span>);</span> <span>// error occurred in select()</span></span>
<span id="cb125-30"><a href="#cb125-30"></a><span>}</span> <span>else</span> <span>if</span> <span>(</span>rv <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb125-31"><a href="#cb125-31"></a>    printf<span>(</span><span>"Timeout occurred! No data after 10.5 seconds.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb125-32"><a href="#cb125-32"></a><span>}</span> <span>else</span> <span>{</span></span>
<span id="cb125-33"><a href="#cb125-33"></a>    <span>// one or both of the descriptors have data</span></span>
<span id="cb125-34"><a href="#cb125-34"></a>    <span>if</span> <span>(</span>FD_ISSET<span>(</span>s1<span>,</span> <span>&amp;</span>readfds<span>))</span> <span>{</span></span>
<span id="cb125-35"><a href="#cb125-35"></a>        recv<span>(</span>s1<span>,</span> buf1<span>,</span> <span>sizeof</span> buf1<span>,</span> <span>0</span><span>);</span></span>
<span id="cb125-36"><a href="#cb125-36"></a>    <span>}</span></span>
<span id="cb125-37"><a href="#cb125-37"></a>    <span>if</span> <span>(</span>FD_ISSET<span>(</span>s2<span>,</span> <span>&amp;</span>readfds<span>))</span> <span>{</span></span>
<span id="cb125-38"><a href="#cb125-38"></a>        recv<span>(</span>s2<span>,</span> buf2<span>,</span> <span>sizeof</span> buf2<span>,</span> <span>0</span><span>);</span></span>
<span id="cb125-39"><a href="#cb125-39"></a>    <span>}</span></span>
<span id="cb125-40"><a href="#cb125-40"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-17">See Also</h3>
<p><a href="#pollman"><code>poll()</code></a></p>
<h2 data-number="9.20" id="setsockoptman"> <code>setsockopt()</code>, <code>getsockopt()</code></h2>

<p>Set various options for a socket</p>
<h3 id="synopsis-19">Synopsis</h3>
<div id="cb126"><pre><code><span id="cb126-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb126-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb126-3"></span>
<span id="cb126-4"><span>int</span> getsockopt<span>(</span><span>int</span> s<span>,</span> <span>int</span> level<span>,</span> <span>int</span> optname<span>,</span> <span>void</span> <span>*</span>optval<span>,</span></span>
<span id="cb126-5">               socklen_t <span>*</span>optlen<span>);</span></span>
<span id="cb126-6"><span>int</span> setsockopt<span>(</span><span>int</span> s<span>,</span> <span>int</span> level<span>,</span> <span>int</span> optname<span>,</span> <span>const</span> <span>void</span> <span>*</span>optval<span>,</span></span>
<span id="cb126-7">               socklen_t optlen<span>);</span></span></code></pre></div>
<h3 id="description-19">Description</h3>
<p>Sockets are fairly configurable beasts. In fact, they are so configurable, I’m not even going to cover it all here. It’s probably system-dependent anyway. But I will talk about the basics.</p>
<p>Obviously, these functions get and set certain options on a socket. On a Linux box, all the socket information is in the man page for socket in section 7. (Type: “<code>man 7 socket</code>” to get all these goodies.)</p>
<p>As for parameters, <code>s</code> is the socket you’re talking about, level should be set to <code>SOL_SOCKET</code>. Then you set the <code>optname</code> to the name you’re interested in. Again, see your man page for all the options, but here are some of the most fun ones:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>optname</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SO_BINDTODEVICE</code></td>
<td>Bind this socket to a symbolic device name like <code>eth0</code> instead of using <code>bind()</code> to bind it to an IP address. Type the command <code>ifconfig</code> under Unix to see the device names.</td>
</tr>
<tr>
<td><code>SO_REUSEADDR</code></td>
<td>Allows other sockets to <code>bind()</code> to this port, unless there is an active listening socket bound to the port already. This enables you to get around those “Address already in use” error messages when you try to restart your server after a crash.</td>
</tr>
<tr>
<td><code>SOCK_DGRAM</code></td>
<td>Allows UDP datagram (<code>SOCK_DGRAM</code>) sockets to send and receive packets sent to and from the broadcast address. Does nothing—<em>NOTHING!!</em>—to TCP stream sockets! Hahaha!</td>
</tr>
</tbody>
</table>
<p>As for the parameter <code>optval</code>, it’s usually a pointer to an <code>int</code> indicating the value in question. For booleans, zero is false, and non-zero is true. And that’s an absolute fact, unless it’s different on your system. If there is no parameter to be passed, <code>optval</code> can be <code>NULL</code>.</p>
<p>The final parameter, <code>optlen</code>, should be set to the length of <code>optval</code>, probably <code>sizeof(int)</code>, but varies depending on the option. Note that in the case of <code>getsockopt()</code>, this is a pointer to a <code>socklen_t</code>, and it specifies the maximum size object that will be stored in <code>optval</code> (to prevent buffer overflows). And <code>getsockopt()</code> will modify the value of <code>optlen</code> to reflect the number of bytes actually set.</p>
<p><strong>Warning</strong>: on some systems (notably Sun and Windows), the option can be a <code>char</code> instead of an <code>int</code>, and is set to, for example, a character value of <code>'1'</code> instead of an <code>int</code> value of <code>1</code>. Again, check your own man pages for more info with “<code>man setsockopt</code>” and “<code>man 7 socket</code>”!</p>
<h3 id="return-value-19">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-19">Example</h3>
<div id="cb127"><pre><code><span id="cb127-1"><a href="#cb127-1"></a><span>int</span> optval<span>;</span></span>
<span id="cb127-2"><a href="#cb127-2"></a><span>int</span> optlen<span>;</span></span>
<span id="cb127-3"><a href="#cb127-3"></a><span>char</span> <span>*</span>optval2<span>;</span></span>
<span id="cb127-4"><a href="#cb127-4"></a></span>
<span id="cb127-5"><a href="#cb127-5"></a><span>// set SO_REUSEADDR on a socket to true (1):</span></span>
<span id="cb127-6"><a href="#cb127-6"></a>optval <span>=</span> <span>1</span><span>;</span></span>
<span id="cb127-7"><a href="#cb127-7"></a>setsockopt<span>(</span>s1<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>optval<span>,</span> <span>sizeof</span> optval<span>);</span></span>
<span id="cb127-8"><a href="#cb127-8"></a></span>
<span id="cb127-9"><a href="#cb127-9"></a><span>// bind a socket to a device name (might not work on all systems):</span></span>
<span id="cb127-10"><a href="#cb127-10"></a>optval2 <span>=</span> <span>"eth1"</span><span>;</span> <span>// 4 bytes long, so 4, below:</span></span>
<span id="cb127-11"><a href="#cb127-11"></a>setsockopt<span>(</span>s2<span>,</span> SOL_SOCKET<span>,</span> SO_BINDTODEVICE<span>,</span> optval2<span>,</span> <span>4</span><span>);</span></span>
<span id="cb127-12"><a href="#cb127-12"></a></span>
<span id="cb127-13"><a href="#cb127-13"></a><span>// see if the SO_BROADCAST flag is set:</span></span>
<span id="cb127-14"><a href="#cb127-14"></a>getsockopt<span>(</span>s3<span>,</span> SOL_SOCKET<span>,</span> SO_BROADCAST<span>,</span> <span>&amp;</span>optval<span>,</span> <span>&amp;</span>optlen<span>);</span></span>
<span id="cb127-15"><a href="#cb127-15"></a><span>if</span> <span>(</span>optval <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb127-16"><a href="#cb127-16"></a>    print<span>(</span><span>"SO_BROADCAST enabled on s3!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb127-17"><a href="#cb127-17"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-18">See Also</h3>
<p><a href="#fcntlman"><code>fcntl()</code></a></p>
<h2 data-number="9.21" id="sendman"> <code>send()</code>, <code>sendto()</code></h2>

<p>Send data out over a socket</p>
<h3 id="synopsis-20">Synopsis</h3>
<div id="cb128"><pre><code><span id="cb128-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb128-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb128-3"></span>
<span id="cb128-4"><span>ssize_t</span> send<span>(</span><span>int</span> s<span>,</span> <span>const</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> flags<span>);</span></span>
<span id="cb128-5"><span>ssize_t</span> sendto<span>(</span><span>int</span> s<span>,</span> <span>const</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span></span>
<span id="cb128-6">               <span>int</span> flags<span>,</span> <span>const</span> <span>struct</span> sockaddr <span>*</span>to<span>,</span></span>
<span id="cb128-7">               socklen_t tolen<span>);</span></span></code></pre></div>
<h3 id="description-20">Description</h3>
<p>These functions send data to a socket. Generally speaking, <code>send()</code> is used for TCP <code>SOCK_STREAM</code> connected sockets, and <code>sendto()</code> is used for UDP <code>SOCK_DGRAM</code> unconnected datagram sockets. With the unconnected sockets, you must specify the destination of a packet each time you send one, and that’s why the last parameters of <code>sendto()</code> define where the packet is going.</p>
<p>With both <code>send()</code> and <code>sendto()</code>, the parameter <code>s</code> is the socket, <code>buf</code> is a pointer to the data you want to send, <code>len</code> is the number of bytes you want to send, and <code>flags</code> allows you to specify more information about how the data is to be sent. Set <code>flags</code> to zero if you want it to be “normal” data. Here are some of the commonly used flags, but check your local <code>send()</code> man pages for more details:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MSG_OOB</code></td>
<td>Send as “out of band” data. TCP supports this, and it’s a way to tell the receiving system that this data has a higher priority than the normal data. The receiver will receive the signal <code>SIGURG</code> and it can then receive this data without first receiving all the rest of the normal data in the queue.</td>
</tr>
<tr>
<td><code>MSG_DONTROUTE</code></td>
<td>Don’t send this data over a router, just keep it local.</td>
</tr>
<tr>
<td><code>MSG_DONTWAIT</code></td>
<td>If <code>send()</code> would block because outbound traffic is clogged, have it return <code>EAGAIN</code>. This is like a “enable non-blocking just for this send.” See the section on <a href="#blocking">blocking</a> for more details.</td>
</tr>
<tr>
<td><code>MSG_NOSIGNAL</code></td>
<td>If you <code>send()</code> to a remote host which is no longer <code>recv()</code>ing, you’ll typically get the signal <code>SIGPIPE</code>. Adding this flag prevents that signal from being raised.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-20">Return Value</h3>
<p>Returns the number of bytes actually sent, or <code>-1</code> on error (and <code>errno</code> will be set accordingly). Note that the number of bytes actually sent might be less than the number you asked it to send! See the section on <a href="#sendall">handling partial <code>send()</code>s</a> for a helper function to get around this.</p>
<p>Also, if the socket has been closed by either side, the process calling <code>send()</code> will get the signal <code>SIGPIPE</code>. (Unless <code>send()</code> was called with the <code>MSG_NOSIGNAL</code> flag.)</p>
<h3 id="example-20">Example</h3>
<div id="cb129"><pre><code><span id="cb129-1"><a href="#cb129-1"></a><span>int</span> spatula_count <span>=</span> <span>3490</span><span>;</span></span>
<span id="cb129-2"><a href="#cb129-2"></a><span>char</span> <span>*</span>secret_message <span>=</span> <span>"The Cheese is in The Toaster"</span><span>;</span></span>
<span id="cb129-3"><a href="#cb129-3"></a></span>
<span id="cb129-4"><a href="#cb129-4"></a><span>int</span> stream_socket<span>,</span> dgram_socket<span>;</span></span>
<span id="cb129-5"><a href="#cb129-5"></a><span>struct</span> sockaddr_in dest<span>;</span></span>
<span id="cb129-6"><a href="#cb129-6"></a><span>int</span> temp<span>;</span></span>
<span id="cb129-7"><a href="#cb129-7"></a></span>
<span id="cb129-8"><a href="#cb129-8"></a><span>// first with TCP stream sockets:</span></span>
<span id="cb129-9"><a href="#cb129-9"></a></span>
<span id="cb129-10"><a href="#cb129-10"></a><span>// assume sockets are made and connected</span></span>
<span id="cb129-11"><a href="#cb129-11"></a><span>//stream_socket = socket(...</span></span>
<span id="cb129-12"><a href="#cb129-12"></a><span>//connect(stream_socket, ...</span></span>
<span id="cb129-13"><a href="#cb129-13"></a></span>
<span id="cb129-14"><a href="#cb129-14"></a><span>// convert to network byte order</span></span>
<span id="cb129-15"><a href="#cb129-15"></a>temp <span>=</span> htonl<span>(</span>spatula_count<span>);</span></span>
<span id="cb129-16"><a href="#cb129-16"></a><span>// send data normally:</span></span>
<span id="cb129-17"><a href="#cb129-17"></a>send<span>(</span>stream_socket<span>,</span> <span>&amp;</span>temp<span>,</span> <span>sizeof</span> temp<span>,</span> <span>0</span><span>);</span></span>
<span id="cb129-18"><a href="#cb129-18"></a></span>
<span id="cb129-19"><a href="#cb129-19"></a><span>// send secret message out of band:</span></span>
<span id="cb129-20"><a href="#cb129-20"></a>send<span>(</span>stream_socket<span>,</span> secret_message<span>,</span> strlen<span>(</span>secret_message<span>)+</span><span>1</span><span>,</span> MSG_OOB<span>);</span></span>
<span id="cb129-21"><a href="#cb129-21"></a></span>
<span id="cb129-22"><a href="#cb129-22"></a><span>// now with UDP datagram sockets:</span></span>
<span id="cb129-23"><a href="#cb129-23"></a><span>//getaddrinfo(...</span></span>
<span id="cb129-24"><a href="#cb129-24"></a><span>//dest = ... // assume "dest" holds the address of the destination</span></span>
<span id="cb129-25"><a href="#cb129-25"></a><span>//dgram_socket = socket(...</span></span>
<span id="cb129-26"><a href="#cb129-26"></a></span>
<span id="cb129-27"><a href="#cb129-27"></a><span>// send secret message normally:</span></span>
<span id="cb129-28"><a href="#cb129-28"></a>sendto<span>(</span>dgram_socket<span>,</span> secret_message<span>,</span> strlen<span>(</span>secret_message<span>)+</span><span>1</span><span>,</span> <span>0</span><span>,</span> </span>
<span id="cb129-29"><a href="#cb129-29"></a>       <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>dest<span>,</span> <span>sizeof</span> dest<span>);</span></span></code></pre></div>
<h3 id="see-also-19">See Also</h3>
<p><a href="#recvman"><code>recv()</code></a>, <a href="#recvman"><code>recvfrom()</code></a></p>
<h2 data-number="9.22" id="shutdownman"> <code>shutdown()</code></h2>

<p>Stop further sends and receives on a socket</p>
<h3 id="synopsis-21">Synopsis</h3>
<div id="cb130"><pre><code><span id="cb130-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb130-2"></span>
<span id="cb130-3"><span>int</span> shutdown<span>(</span><span>int</span> s<span>,</span> <span>int</span> how<span>);</span></span></code></pre></div>
<h3 id="description-21">Description</h3>
<p>That’s it! I’ve had it! No more <code>send()</code>s are allowed on this socket, but I still want to <code>recv()</code> data on it! Or vice-versa! How can I do this?</p>
<p>When you <code>close()</code> a socket descriptor, it closes both sides of the socket for reading and writing, and frees the socket descriptor. If you just want to close one side or the other, you can use this <code>shutdown()</code> call.</p>
<p>As for parameters, <code>s</code> is obviously the socket you want to perform this action on, and what action that is can be specified with the <code>how</code> parameter. <code>how</code> can be <code>SHUT_RD</code> to prevent further <code>recv()</code>s, <code>SHUT_WR</code> to prohibit further <code>send()</code>s, or <code>SHUT_RDWR</code> to do both.</p>
<p>Note that <code>shutdown()</code> doesn’t free up the socket descriptor, so you still have to eventually <code>close()</code> the socket even if it has been fully shut down.</p>
<p>This is a rarely used system call.</p>
<h3 id="return-value-21">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-21">Example</h3>
<div id="cb131"><pre><code><span id="cb131-1"><a href="#cb131-1"></a><span>int</span> s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb131-2"><a href="#cb131-2"></a></span>
<span id="cb131-3"><a href="#cb131-3"></a><span>// ...do some send()s and stuff in here...</span></span>
<span id="cb131-4"><a href="#cb131-4"></a></span>
<span id="cb131-5"><a href="#cb131-5"></a><span>// and now that we're done, don't allow any more sends()s:</span></span>
<span id="cb131-6"><a href="#cb131-6"></a>shutdown<span>(</span>s<span>,</span> SHUT_WR<span>);</span></span></code></pre></div>
<h3 id="see-also-20">See Also</h3>
<p><a href="#closeman"><code>close()</code></a></p>
<h2 data-number="9.23" id="socketman"> <code>socket()</code></h2>

<p>Allocate a socket descriptor</p>
<h3 id="synopsis-22">Synopsis</h3>
<div id="cb132"><pre><code><span id="cb132-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb132-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb132-3"></span>
<span id="cb132-4"><span>int</span> socket<span>(</span><span>int</span> domain<span>,</span> <span>int</span> type<span>,</span> <span>int</span> protocol<span>);</span></span></code></pre></div>
<h3 id="description-22">Description</h3>
<p>Returns a new socket descriptor that you can use to do sockety things with. This is generally the first call in the whopping process of writing a socket program, and you can use the result for subsequent calls to <code>listen()</code>, <code>bind()</code>, <code>accept()</code>, or a variety of other functions.</p>
<p>In usual usage, you get the values for these parameters from a call to <code>getaddrinfo()</code>, as shown in the example below. But you can fill them in by hand if you really want to.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>domain</code></td>
<td><code>domain</code> describes what kind of socket you’re interested in. This can, believe me, be a wide variety of things, but since this is a socket guide, it’s going to be <code>PF_INET</code> for IPv4, and <code>PF_INET6</code> for IPv6.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>Also, the <code>type</code> parameter can be a number of things, but you’ll probably be setting it to either <code>SOCK_STREAM</code> for reliable TCP sockets (<code>send()</code>, <code>recv()</code>) or <code>SOCK_DGRAM</code> for unreliable fast UDP sockets (<code>sendto()</code>, <code>recvfrom()</code>). (Another interesting socket type is <code>SOCK_RAW</code> which can be used to construct packets by hand. It’s pretty cool.)</td>
</tr>
<tr>
<td><code>protocol</code></td>
<td>Finally, the <code>protocol</code> parameter tells which protocol to use with a certain socket type. Like I’ve already said, for instance, <code>SOCK_STREAM</code> uses TCP. Fortunately for you, when using <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, you can just set the protocol to 0, and it’ll use the proper protocol automatically. Otherwise, you can use <code>getprotobyname()</code> to look up the proper protocol number.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-22">Return Value</h3>
<p>The new socket descriptor to be used in subsequent calls, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-22">Example</h3>
<div id="cb133"><pre><code><span id="cb133-1"><a href="#cb133-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb133-2"><a href="#cb133-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb133-3"><a href="#cb133-3"></a></span>
<span id="cb133-4"><a href="#cb133-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb133-5"><a href="#cb133-5"></a></span>
<span id="cb133-6"><a href="#cb133-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb133-7"><a href="#cb133-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>     <span>// AF_INET, AF_INET6, or AF_UNSPEC</span></span>
<span id="cb133-8"><a href="#cb133-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span> <span>// SOCK_STREAM or SOCK_DGRAM</span></span>
<span id="cb133-9"><a href="#cb133-9"></a></span>
<span id="cb133-10"><a href="#cb133-10"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb133-11"><a href="#cb133-11"></a></span>
<span id="cb133-12"><a href="#cb133-12"></a><span>// make a socket using the information gleaned from getaddrinfo():</span></span>
<span id="cb133-13"><a href="#cb133-13"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span></code></pre></div>
<h3 id="see-also-21">See Also</h3>
<p><a href="#acceptman"><code>accept()</code></a>, <a href="#bindman"><code>bind()</code></a>, <a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#listenman"><code>listen()</code></a></p>
<h2 data-number="9.24" id="structsockaddrman"> <code>struct sockaddr</code> and pals</h2>

<p>Structures for handling internet addresses</p>
<h3 id="synopsis-23">Synopsis</h3>
<div id="cb134"><pre><code><span id="cb134-1"><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb134-2"></span>
<span id="cb134-3"><span>// All pointers to socket address structures are often cast to pointers</span></span>
<span id="cb134-4"><span>// to this type before use in various functions and system calls:</span></span>
<span id="cb134-5"></span>
<span id="cb134-6"><span>struct</span> sockaddr <span>{</span></span>
<span id="cb134-7">    <span>unsigned</span> <span>short</span>    sa_family<span>;</span>    <span>// address family, AF_xxx</span></span>
<span id="cb134-8">    <span>char</span>              sa_data<span>[</span><span>14</span><span>];</span>  <span>// 14 bytes of protocol address</span></span>
<span id="cb134-9"><span>};</span></span>
<span id="cb134-10"></span>
<span id="cb134-11"></span>
<span id="cb134-12"><span>// IPv4 AF_INET sockets:</span></span>
<span id="cb134-13"></span>
<span id="cb134-14"><span>struct</span> sockaddr_in <span>{</span></span>
<span id="cb134-15">    <span>short</span>            sin_family<span>;</span>   <span>// e.g. AF_INET, AF_INET6</span></span>
<span id="cb134-16">    <span>unsigned</span> <span>short</span>   sin_port<span>;</span>     <span>// e.g. htons(3490)</span></span>
<span id="cb134-17">    <span>struct</span> in_addr   sin_addr<span>;</span>     <span>// see struct in_addr, below</span></span>
<span id="cb134-18">    <span>char</span>             sin_zero<span>[</span><span>8</span><span>];</span>  <span>// zero this if you want to</span></span>
<span id="cb134-19"><span>};</span></span>
<span id="cb134-20"></span>
<span id="cb134-21"><span>struct</span> in_addr <span>{</span></span>
<span id="cb134-22">    <span>unsigned</span> <span>long</span> s_addr<span>;</span>          <span>// load with inet_pton()</span></span>
<span id="cb134-23"><span>};</span></span>
<span id="cb134-24"></span>
<span id="cb134-25"></span>
<span id="cb134-26"><span>// IPv6 AF_INET6 sockets:</span></span>
<span id="cb134-27"></span>
<span id="cb134-28"><span>struct</span> sockaddr_in6 <span>{</span></span>
<span id="cb134-29">    u_int16_t       sin6_family<span>;</span>   <span>// address family, AF_INET6</span></span>
<span id="cb134-30">    u_int16_t       sin6_port<span>;</span>     <span>// port number, Network Byte Order</span></span>
<span id="cb134-31">    u_int32_t       sin6_flowinfo<span>;</span> <span>// IPv6 flow information</span></span>
<span id="cb134-32">    <span>struct</span> in6_addr sin6_addr<span>;</span>     <span>// IPv6 address</span></span>
<span id="cb134-33">    u_int32_t       sin6_scope_id<span>;</span> <span>// Scope ID</span></span>
<span id="cb134-34"><span>};</span></span>
<span id="cb134-35"></span>
<span id="cb134-36"><span>struct</span> in6_addr <span>{</span></span>
<span id="cb134-37">    <span>unsigned</span> <span>char</span>   s6_addr<span>[</span><span>16</span><span>];</span>   <span>// load with inet_pton()</span></span>
<span id="cb134-38"><span>};</span></span>
<span id="cb134-39"></span>
<span id="cb134-40"></span>
<span id="cb134-41"><span>// General socket address holding structure, big enough to hold either</span></span>
<span id="cb134-42"><span>// struct sockaddr_in or struct sockaddr_in6 data:</span></span>
<span id="cb134-43"></span>
<span id="cb134-44"><span>struct</span> sockaddr_storage <span>{</span></span>
<span id="cb134-45">    sa_family_t  ss_family<span>;</span>     <span>// address family</span></span>
<span id="cb134-46"></span>
<span id="cb134-47">    <span>// all this is padding, implementation specific, ignore it:</span></span>
<span id="cb134-48">    <span>char</span>      __ss_pad1<span>[</span>_SS_PAD1SIZE<span>];</span></span>
<span id="cb134-49">    <span>int64_t</span>   __ss_align<span>;</span></span>
<span id="cb134-50">    <span>char</span>      __ss_pad2<span>[</span>_SS_PAD2SIZE<span>];</span></span>
<span id="cb134-51"><span>};</span></span></code></pre></div>
<h3 id="description-23">Description</h3>
<p>These are the basic structures for all syscalls and functions that deal with internet addresses. Often you’ll use <code>getaddrinfo()</code> to fill these structures out, and then will read them when you have to.</p>
<p>In memory, the <code>struct sockaddr_in</code> and <code>struct sockaddr_in6</code> share the same beginning structure as <code>struct sockaddr</code>, and you can freely cast the pointer of one type to the other without any harm, except the possible end of the universe.</p>
<p>Just kidding on that end-of-the-universe thing…if the universe does end when you cast a <code>struct sockaddr_in*</code> to a <code>struct sockaddr*</code>, I promise you it’s pure coincidence and you shouldn’t even worry about it.</p>
<p>So, with that in mind, remember that whenever a function says it takes a <code>struct sockaddr*</code> you can cast your <code>struct sockaddr_in*</code>, <code>struct sockaddr_in6*</code>, or <code>struct sockadd_storage*</code> to that type with ease and safety.</p>
<p><code>struct sockaddr_in</code> is the structure used with IPv4 addresses (e.g. “192.0.2.10”). It holds an address family (<code>AF_INET</code>), a port in <code>sin_port</code>, and an IPv4 address in <code>sin_addr</code>.</p>
<p>There’s also this <code>sin_zero</code> field in <code>struct sockaddr_in</code> which some people claim must be set to zero. Other people don’t claim anything about it (the Linux documentation doesn’t even mention it at all), and setting it to zero doesn’t seem to be actually necessary. So, if you feel like it, set it to zero using <code>memset()</code>.</p>
<p>Now, that <code>struct in_addr</code> is a weird beast on different systems. Sometimes it’s a crazy <code>union</code> with all kinds of <code>#define</code>s and other nonsense. But what you should do is only use the <code>s_addr</code> field in this structure, because many systems only implement that one.</p>
<p><code>struct sockadd_in6</code> and <code>struct in6_addr</code> are very similar, except they’re used for IPv6.</p>
<p><code>struct sockaddr_storage</code> is a struct you can pass to <code>accept()</code> or <code>recvfrom()</code> when you’re trying to write IP version-agnostic code and you don’t know if the new address is going to be IPv4 or IPv6. The <code>struct sockaddr_storage</code> structure is large enough to hold both types, unlike the original small <code>struct sockaddr</code>.</p>
<h3 id="example-23">Example</h3>
<div id="cb135"><pre><code><span id="cb135-1"><a href="#cb135-1"></a><span>// IPv4:</span></span>
<span id="cb135-2"><a href="#cb135-2"></a></span>
<span id="cb135-3"><a href="#cb135-3"></a><span>struct</span> sockaddr_in ip4addr<span>;</span></span>
<span id="cb135-4"><a href="#cb135-4"></a><span>int</span> s<span>;</span></span>
<span id="cb135-5"><a href="#cb135-5"></a></span>
<span id="cb135-6"><a href="#cb135-6"></a>ip4addr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span></span>
<span id="cb135-7"><a href="#cb135-7"></a>ip4addr<span>.</span>sin_port <span>=</span> htons<span>(</span><span>3490</span><span>);</span></span>
<span id="cb135-8"><a href="#cb135-8"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"10.0.0.1"</span><span>,</span> <span>&amp;</span>ip4addr<span>.</span>sin_addr<span>);</span></span>
<span id="cb135-9"><a href="#cb135-9"></a></span>
<span id="cb135-10"><a href="#cb135-10"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb135-11"><a href="#cb135-11"></a>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>ip4addr<span>,</span> <span>sizeof</span> ip4addr<span>);</span></span></code></pre></div>
<div id="cb136"><pre><code><span id="cb136-1"><a href="#cb136-1"></a><span>// IPv6:</span></span>
<span id="cb136-2"><a href="#cb136-2"></a></span>
<span id="cb136-3"><a href="#cb136-3"></a><span>struct</span> sockaddr_in6 ip6addr<span>;</span></span>
<span id="cb136-4"><a href="#cb136-4"></a><span>int</span> s<span>;</span></span>
<span id="cb136-5"><a href="#cb136-5"></a></span>
<span id="cb136-6"><a href="#cb136-6"></a>ip6addr<span>.</span>sin6_family <span>=</span> AF_INET6<span>;</span></span>
<span id="cb136-7"><a href="#cb136-7"></a>ip6addr<span>.</span>sin6_port <span>=</span> htons<span>(</span><span>4950</span><span>);</span></span>
<span id="cb136-8"><a href="#cb136-8"></a>inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:8714:3a90::12"</span><span>,</span> <span>&amp;</span>ip6addr<span>.</span>sin6_addr<span>);</span></span>
<span id="cb136-9"><a href="#cb136-9"></a></span>
<span id="cb136-10"><a href="#cb136-10"></a>s <span>=</span> socket<span>(</span>PF_INET6<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb136-11"><a href="#cb136-11"></a>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>ip6addr<span>,</span> <span>sizeof</span> ip6addr<span>);</span></span></code></pre></div>
<h3 id="see-also-22">See Also</h3>
<p><a href="#acceptman"><code>accept()</code></a>, <a href="#bindman"><code>bind()</code></a>, <a href="#connectman"><code>connect()</code></a>, <a href="#inet_ntoaman"><code>inet_aton()</code></a>, <a href="#inet_ntoaman"><code>inet_ntoa()</code></a></p>
<h2 data-number="10" id="more-references"> More References</h2>
<p>You’ve come this far, and now you’re screaming for more! Where else can you go to learn more about all this stuff?</p>
<h2 data-number="10.1" id="books"> Books</h2>

<p>For old-school actual hold-it-in-your-hand pulp paper books, try some of the following excellent books. These redirect to affiliate links with a popular bookseller, giving me nice kickbacks. If you’re merely feeling generous, you can paypal a donation to <a href="mailto:beej@beej.us"><code>beej@beej.us</code></a>. <code>:-)</code></p>
<p><strong>Unix Network Programming, volumes 1-2</strong> by W. Richard Stevens. Published by Addison-Wesley Professional and Prentice Hall. ISBNs for volumes 1-2: <a href="https://beej.us/guide/url/unixnet1">978-0131411555</a><a href="#fn49" id="fnref49" role="doc-noteref"><sup>49</sup></a>, <a href="https://beej.us/guide/url/unixnet2">978-0130810816</a><a href="#fn50" id="fnref50" role="doc-noteref"><sup>50</sup></a>.</p>
<p><strong>Internetworking with TCP/IP, volume I</strong> by Douglas E. Comer. Published by Pearson. ISBN <a href="https://beej.us/guide/url/intertcp1">978-0136085300</a><a href="#fn51" id="fnref51" role="doc-noteref"><sup>51</sup></a>.</p>
<p><strong>TCP/IP Illustrated, volumes 1-3</strong> by W. Richard Stevens and Gary R. Wright. Published by Addison Wesley. ISBNs for volumes 1, 2, and 3 (and a 3-volume set): <a href="https://beej.us/guide/url/tcpi1">978-0201633467</a><a href="#fn52" id="fnref52" role="doc-noteref"><sup>52</sup></a>, <a href="https://beej.us/guide/url/tcpi2">978-0201633542</a><a href="#fn53" id="fnref53" role="doc-noteref"><sup>53</sup></a>, <a href="https://beej.us/guide/url/tcpi3">978-0201634952</a><a href="#fn54" id="fnref54" role="doc-noteref"><sup>54</sup></a>, (<a href="https://beej.us/guide/url/tcpi123">978-0201776317</a><a href="#fn55" id="fnref55" role="doc-noteref"><sup>55</sup></a>).</p>
<p><strong>TCP/IP Network Administration</strong> by Craig Hunt. Published by O’Reilly &amp; Associates, Inc. ISBN <a href="https://beej.us/guide/url/tcpna">978-0596002978</a><a href="#fn56" id="fnref56" role="doc-noteref"><sup>56</sup></a>.</p>
<p><strong>Advanced Programming in the UNIX Environment</strong> by W. Richard Stevens. Published by Addison Wesley. ISBN <a href="https://beej.us/guide/url/advunix">978-0321637734</a><a href="#fn57" id="fnref57" role="doc-noteref"><sup>57</sup></a>.</p>

<h2 data-number="10.2" id="web-references"> Web References</h2>

<p>On the web:</p>
<p><strong><a href="https://cis.temple.edu/~giorgio/old/cis307s96/readings/docs/sockets.html">BSD Sockets: A Quick And Dirty Primer</a><a href="#fn58" id="fnref58" role="doc-noteref"><sup>58</sup></a></strong> (Unix system programming info, too!)</p>
<p><strong><a href="https://developerweb.net/?f=70">The Unix Socket FAQ</a><a href="#fn59" id="fnref59" role="doc-noteref"><sup>59</sup></a></strong></p>
<p><strong><a href="http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/">TCP/IP FAQ</a><a href="#fn60" id="fnref60" role="doc-noteref"><sup>60</sup></a></strong></p>
<p><strong><a href="https://tangentsoft.net/wskfaq/">The Winsock FAQ</a><a href="#fn61" id="fnref61" role="doc-noteref"><sup>61</sup></a></strong></p>
<p>And here are some relevant Wikipedia pages:</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley Sockets</a><a href="#fn62" id="fnref62" role="doc-noteref"><sup>62</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Internet_Protocol">Internet Protocol (IP)</a><a href="#fn63" id="fnref63" role="doc-noteref"><sup>63</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol (TCP)</a><a href="#fn64" id="fnref64" role="doc-noteref"><sup>64</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol">User Datagram Protocol (UDP)</a><a href="#fn65" id="fnref65" role="doc-noteref"><sup>65</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Client-server">Client-Server</a><a href="#fn66" id="fnref66" role="doc-noteref"><sup>66</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Serialization">Serialization</a><a href="#fn67" id="fnref67" role="doc-noteref"><sup>67</sup></a></strong> (packing and unpacking data)</p>

<h2 data-number="10.3" id="rfcs"> RFCs</h2>

<p><a href="https://www.rfc-editor.org/">RFCs</a><a href="#fn68" id="fnref68" role="doc-noteref"><sup>68</sup></a>—the real dirt! These are documents that describe assigned numbers, programming APIs, and protocols that are used on the Internet. I’ve included links to a few of them here for your enjoyment, so grab a bucket of popcorn and put on your thinking cap:</p>
<p><strong><a href="https://tools.ietf.org/html/rfc1">RFC 1</a><a href="#fn69" id="fnref69" role="doc-noteref"><sup>69</sup></a></strong> —The First RFC; this gives you an idea of what the “Internet” was like just as it was coming to life, and an insight into how it was being designed from the ground up. (This RFC is completely obsolete, obviously!)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc768">RFC 768</a><a href="#fn70" id="fnref70" role="doc-noteref"><sup>70</sup></a></strong> —The User Datagram Protocol (UDP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc791">RFC 791</a><a href="#fn71" id="fnref71" role="doc-noteref"><sup>71</sup></a></strong> —The Internet Protocol (IP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc793">RFC 793</a><a href="#fn72" id="fnref72" role="doc-noteref"><sup>72</sup></a></strong> —The Transmission Control Protocol (TCP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc854">RFC 854</a><a href="#fn73" id="fnref73" role="doc-noteref"><sup>73</sup></a></strong> —The Telnet Protocol</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc959">RFC 959</a><a href="#fn74" id="fnref74" role="doc-noteref"><sup>74</sup></a></strong> —File Transfer Protocol (FTP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc1350">RFC 1350</a><a href="#fn75" id="fnref75" role="doc-noteref"><sup>75</sup></a></strong> —The Trivial File Transfer Protocol (TFTP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc1459">RFC 1459</a><a href="#fn76" id="fnref76" role="doc-noteref"><sup>76</sup></a></strong> —Internet Relay Chat Protocol (IRC)</p>
<p><strong><a href="https://tools.ietf.org/html/rfc1918">RFC 1918</a><a href="#fn77" id="fnref77" role="doc-noteref"><sup>77</sup></a></strong> —Address Allocation for Private Internets</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc2131">RFC 2131</a><a href="#fn78" id="fnref78" role="doc-noteref"><sup>78</sup></a></strong> —Dynamic Host Configuration Protocol (DHCP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc2616">RFC 2616</a><a href="#fn79" id="fnref79" role="doc-noteref"><sup>79</sup></a></strong> —Hypertext Transfer Protocol (HTTP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc2821">RFC 2821</a><a href="#fn80" id="fnref80" role="doc-noteref"><sup>80</sup></a></strong> —Simple Mail Transfer Protocol (SMTP)</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3330">RFC 3330</a><a href="#fn81" id="fnref81" role="doc-noteref"><sup>81</sup></a></strong> —Special-Use IPv4 Addresses</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3493">RFC 3493</a><a href="#fn82" id="fnref82" role="doc-noteref"><sup>82</sup></a></strong> —Basic Socket Interface Extensions for IPv6</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3542">RFC 3542</a><a href="#fn83" id="fnref83" role="doc-noteref"><sup>83</sup></a></strong> —Advanced Sockets Application Program Interface (API) for IPv6</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3849">RFC 3849</a><a href="#fn84" id="fnref84" role="doc-noteref"><sup>84</sup></a></strong> —IPv6 Address Prefix Reserved for Documentation</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc3920">RFC 3920</a><a href="#fn85" id="fnref85" role="doc-noteref"><sup>85</sup></a></strong> —Extensible Messaging and Presence Protocol (XMPP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc3977">RFC 3977</a><a href="#fn86" id="fnref86" role="doc-noteref"><sup>86</sup></a></strong> —Network News Transfer Protocol (NNTP)</p>
<p><strong><a href="https://tools.ietf.org/html/rfc4193">RFC 4193</a><a href="#fn87" id="fnref87" role="doc-noteref"><sup>87</sup></a></strong> —Unique Local IPv6 Unicast Addresses</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc4506">RFC 4506</a><a href="#fn88" id="fnref88" role="doc-noteref"><sup>88</sup></a></strong> —External Data Representation Standard (XDR)</p>
<p>The IETF has a nice online tool for <a href="https://tools.ietf.org/rfc/">searching and browsing RFCs</a><a href="#fn89" id="fnref89" role="doc-noteref"><sup>89</sup></a>.</p>

<section id="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>https://www.linux.com/<a href="#fnref1" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>https://bsd.org/<a href="#fnref2" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>https://learn.microsoft.com/en-us/windows/wsl/<a href="#fnref3" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>https://cygwin.com/<a href="#fnref4" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>https://www.tallyhawk.net/WinsockExamples/<a href="#fnref5" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>http://www.catb.org/~esr/faqs/smart-questions.html<a href="#fnref6" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>https://beej.us/guide/bgnet/examples/telnot.c<a href="#fnref7" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>https://tools.ietf.org/html/rfc854<a href="#fnref8" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>https://tools.ietf.org/html/rfc793<a href="#fnref9" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>https://tools.ietf.org/html/rfc791<a href="#fnref10" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>https://tools.ietf.org/html/rfc768<a href="#fnref11" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>https://tools.ietf.org/html/rfc791<a href="#fnref12" role="doc-backlink">↩︎</a></p></li>
<li id="fn13"><p>https://en.wikipedia.org/wiki/Vint_Cerf<a href="#fnref13" role="doc-backlink">↩︎</a></p></li>
<li id="fn14"><p>https://en.wikipedia.org/wiki/ELIZA<a href="#fnref14" role="doc-backlink">↩︎</a></p></li>
<li id="fn15"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref15" role="doc-backlink">↩︎</a></p></li>
<li id="fn16"><p>https://en.wikipedia.org/wiki/Doom_(1993_video_game)<a href="#fnref16" role="doc-backlink">↩︎</a></p></li>
<li id="fn17"><p>https://en.wikipedia.org/wiki/Wilford_Brimley<a href="#fnref17" role="doc-backlink">↩︎</a></p></li>
<li id="fn18"><p>https://tools.ietf.org/html/rfc1918<a href="#fnref18" role="doc-backlink">↩︎</a></p></li>
<li id="fn19"><p>https://tools.ietf.org/html/rfc4193<a href="#fnref19" role="doc-backlink">↩︎</a></p></li>
<li id="fn20"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref20" role="doc-backlink">↩︎</a></p></li>
<li id="fn21"><p>https://beej.us/guide/bgnet/examples/showip.c<a href="#fnref21" role="doc-backlink">↩︎</a></p></li>
<li id="fn22"><p>https://tools.ietf.org/html/rfc1413<a href="#fnref22" role="doc-backlink">↩︎</a></p></li>
<li id="fn23"><p>https://beej.us/guide/bgnet/examples/server.c<a href="#fnref23" role="doc-backlink">↩︎</a></p></li>
<li id="fn24"><p>https://beej.us/guide/bgnet/examples/client.c<a href="#fnref24" role="doc-backlink">↩︎</a></p></li>
<li id="fn25"><p>https://beej.us/guide/bgnet/examples/listener.c<a href="#fnref25" role="doc-backlink">↩︎</a></p></li>
<li id="fn26"><p>https://beej.us/guide/bgnet/examples/talker.c<a href="#fnref26" role="doc-backlink">↩︎</a></p></li>
<li id="fn27"><p>https://libevent.org/<a href="#fnref27" role="doc-backlink">↩︎</a></p></li>
<li id="fn28"><p>https://beej.us/guide/bgnet/examples/poll.c<a href="#fnref28" role="doc-backlink">↩︎</a></p></li>
<li id="fn29"><p>https://beej.us/guide/bgnet/examples/pollserver.c<a href="#fnref29" role="doc-backlink">↩︎</a></p></li>
<li id="fn30"><p>https://libevent.org/<a href="#fnref30" role="doc-backlink">↩︎</a></p></li>
<li id="fn31"><p>https://beej.us/guide/bgnet/examples/select.c<a href="#fnref31" role="doc-backlink">↩︎</a></p></li>
<li id="fn32"><p>https://beej.us/guide/bgnet/examples/selectserver.c<a href="#fnref32" role="doc-backlink">↩︎</a></p></li>
<li id="fn33"><p>https://en.wikipedia.org/wiki/Internet_Relay_Chat<a href="#fnref33" role="doc-backlink">↩︎</a></p></li>
<li id="fn34"><p>https://beej.us/guide/bgnet/examples/pack.c<a href="#fnref34" role="doc-backlink">↩︎</a></p></li>
<li id="fn35"><p>https://en.wikipedia.org/wiki/IEEE_754<a href="#fnref35" role="doc-backlink">↩︎</a></p></li>
<li id="fn36"><p>https://beej.us/guide/bgnet/examples/ieee754.c<a href="#fnref36" role="doc-backlink">↩︎</a></p></li>
<li id="fn37"><p>https://beej.us/guide/url/tpop<a href="#fnref37" role="doc-backlink">↩︎</a></p></li>
<li id="fn38"><p>https://github.com/protobuf-c/protobuf-c<a href="#fnref38" role="doc-backlink">↩︎</a></p></li>
<li id="fn39"><p>https://beej.us/guide/bgnet/examples/pack2.c<a href="#fnref39" role="doc-backlink">↩︎</a></p></li>
<li id="fn40"><p>https://beej.us/guide/bgnet/examples/pack2.c<a href="#fnref40" role="doc-backlink">↩︎</a></p></li>
<li id="fn41"><p>https://tools.ietf.org/html/rfc4506<a href="#fnref41" role="doc-backlink">↩︎</a></p></li>
<li id="fn42"><p>https://beej.us/guide/bgnet/examples/broadcaster.c<a href="#fnref42" role="doc-backlink">↩︎</a></p></li>
<li id="fn43"><p>http://www.unpbook.com/src.html<a href="#fnref43" role="doc-backlink">↩︎</a></p></li>
<li id="fn44"><p>http://www.unpbook.com/src.html<a href="#fnref44" role="doc-backlink">↩︎</a></p></li>
<li id="fn45"><p>https://www.openssl.org/<a href="#fnref45" role="doc-backlink">↩︎</a></p></li>
<li id="fn46"><p>https://stackoverflow.com/questions/21323023/<a href="#fnref46" role="doc-backlink">↩︎</a></p></li>
<li id="fn47"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref47" role="doc-backlink">↩︎</a></p></li>
<li id="fn48"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref48" role="doc-backlink">↩︎</a></p></li>
<li id="fn49"><p>https://beej.us/guide/url/unixnet1<a href="#fnref49" role="doc-backlink">↩︎</a></p></li>
<li id="fn50"><p>https://beej.us/guide/url/unixnet2<a href="#fnref50" role="doc-backlink">↩︎</a></p></li>
<li id="fn51"><p>https://beej.us/guide/url/intertcp1<a href="#fnref51" role="doc-backlink">↩︎</a></p></li>
<li id="fn52"><p>https://beej.us/guide/url/tcpi1<a href="#fnref52" role="doc-backlink">↩︎</a></p></li>
<li id="fn53"><p>https://beej.us/guide/url/tcpi2<a href="#fnref53" role="doc-backlink">↩︎</a></p></li>
<li id="fn54"><p>https://beej.us/guide/url/tcpi3<a href="#fnref54" role="doc-backlink">↩︎</a></p></li>
<li id="fn55"><p>https://beej.us/guide/url/tcpi123<a href="#fnref55" role="doc-backlink">↩︎</a></p></li>
<li id="fn56"><p>https://beej.us/guide/url/tcpna<a href="#fnref56" role="doc-backlink">↩︎</a></p></li>
<li id="fn57"><p>https://beej.us/guide/url/advunix<a href="#fnref57" role="doc-backlink">↩︎</a></p></li>
<li id="fn58"><p>https://cis.temple.edu/~giorgio/old/cis307s96/readings/docs/sockets.html<a href="#fnref58" role="doc-backlink">↩︎</a></p></li>
<li id="fn59"><p>https://developerweb.net/?f=70<a href="#fnref59" role="doc-backlink">↩︎</a></p></li>
<li id="fn60"><p>http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/<a href="#fnref60" role="doc-backlink">↩︎</a></p></li>
<li id="fn61"><p>https://tangentsoft.net/wskfaq/<a href="#fnref61" role="doc-backlink">↩︎</a></p></li>
<li id="fn62"><p>https://en.wikipedia.org/wiki/Berkeley_sockets<a href="#fnref62" role="doc-backlink">↩︎</a></p></li>
<li id="fn63"><p>https://en.wikipedia.org/wiki/Internet_Protocol<a href="#fnref63" role="doc-backlink">↩︎</a></p></li>
<li id="fn64"><p>https://en.wikipedia.org/wiki/Transmission_Control_Protocol<a href="#fnref64" role="doc-backlink">↩︎</a></p></li>
<li id="fn65"><p>https://en.wikipedia.org/wiki/User_Datagram_Protocol<a href="#fnref65" role="doc-backlink">↩︎</a></p></li>
<li id="fn66"><p>https://en.wikipedia.org/wiki/Client-server<a href="#fnref66" role="doc-backlink">↩︎</a></p></li>
<li id="fn67"><p>https://en.wikipedia.org/wiki/Serialization<a href="#fnref67" role="doc-backlink">↩︎</a></p></li>
<li id="fn68"><p>https://www.rfc-editor.org/<a href="#fnref68" role="doc-backlink">↩︎</a></p></li>
<li id="fn69"><p>https://tools.ietf.org/html/rfc1<a href="#fnref69" role="doc-backlink">↩︎</a></p></li>
<li id="fn70"><p>https://tools.ietf.org/html/rfc768<a href="#fnref70" role="doc-backlink">↩︎</a></p></li>
<li id="fn71"><p>https://tools.ietf.org/html/rfc791<a href="#fnref71" role="doc-backlink">↩︎</a></p></li>
<li id="fn72"><p>https://tools.ietf.org/html/rfc793<a href="#fnref72" role="doc-backlink">↩︎</a></p></li>
<li id="fn73"><p>https://tools.ietf.org/html/rfc854<a href="#fnref73" role="doc-backlink">↩︎</a></p></li>
<li id="fn74"><p>https://tools.ietf.org/html/rfc959<a href="#fnref74" role="doc-backlink">↩︎</a></p></li>
<li id="fn75"><p>https://tools.ietf.org/html/rfc1350<a href="#fnref75" role="doc-backlink">↩︎</a></p></li>
<li id="fn76"><p>https://tools.ietf.org/html/rfc1459<a href="#fnref76" role="doc-backlink">↩︎</a></p></li>
<li id="fn77"><p>https://tools.ietf.org/html/rfc1918<a href="#fnref77" role="doc-backlink">↩︎</a></p></li>
<li id="fn78"><p>https://tools.ietf.org/html/rfc2131<a href="#fnref78" role="doc-backlink">↩︎</a></p></li>
<li id="fn79"><p>https://tools.ietf.org/html/rfc2616<a href="#fnref79" role="doc-backlink">↩︎</a></p></li>
<li id="fn80"><p>https://tools.ietf.org/html/rfc2821<a href="#fnref80" role="doc-backlink">↩︎</a></p></li>
<li id="fn81"><p>https://tools.ietf.org/html/rfc3330<a href="#fnref81" role="doc-backlink">↩︎</a></p></li>
<li id="fn82"><p>https://tools.ietf.org/html/rfc3493<a href="#fnref82" role="doc-backlink">↩︎</a></p></li>
<li id="fn83"><p>https://tools.ietf.org/html/rfc3542<a href="#fnref83" role="doc-backlink">↩︎</a></p></li>
<li id="fn84"><p>https://tools.ietf.org/html/rfc3849<a href="#fnref84" role="doc-backlink">↩︎</a></p></li>
<li id="fn85"><p>https://tools.ietf.org/html/rfc3920<a href="#fnref85" role="doc-backlink">↩︎</a></p></li>
<li id="fn86"><p>https://tools.ietf.org/html/rfc3977<a href="#fnref86" role="doc-backlink">↩︎</a></p></li>
<li id="fn87"><p>https://tools.ietf.org/html/rfc4193<a href="#fnref87" role="doc-backlink">↩︎</a></p></li>
<li id="fn88"><p>https://tools.ietf.org/html/rfc4506<a href="#fnref88" role="doc-backlink">↩︎</a></p></li>
<li id="fn89"><p>https://tools.ietf.org/rfc/<a href="#fnref89" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mistral 7B (191 pts)]]></title>
            <link>https://arxiv.org/abs/2310.06825</link>
            <guid>37842618</guid>
            <pubDate>Wed, 11 Oct 2023 09:56:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2310.06825">https://arxiv.org/abs/2310.06825</a>, See on <a href="https://news.ycombinator.com/item?id=37842618">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    <h2><span>Title:</span>Mistral 7B</h2>
    <div><p><span>Authors:</span><a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Jiang,+A+Q">Albert Q. Jiang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Sablayrolles,+A">Alexandre Sablayrolles</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Mensch,+A">Arthur Mensch</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Bamford,+C">Chris Bamford</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chaplot,+D+S">Devendra Singh Chaplot</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=de+las+Casas,+D">Diego de las Casas</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Bressand,+F">Florian Bressand</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lengyel,+G">Gianna Lengyel</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lample,+G">Guillaume Lample</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Saulnier,+L">Lucile Saulnier</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lavaud,+L+R">Lélio Renard Lavaud</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lachaux,+M">Marie-Anne Lachaux</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Stock,+P">Pierre Stock</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Scao,+T+L">Teven Le Scao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lavril,+T">Thibaut Lavril</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+T">Thomas Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lacroix,+T">Timothée Lacroix</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Sayed,+W+E">William El Sayed</a></p></div>            
    <p><a href="https://arxiv.org/pdf/2310.06825.pdf">Download PDF</a></p><blockquote>
            <span>Abstract:</span>We introduce Mistral 7B v0.1, a 7-billion-parameter language model engineered for superior performance and efficiency. Mistral 7B outperforms Llama 2 13B across all evaluated benchmarks, and Llama 1 34B in reasoning, mathematics, and code generation. Our model leverages grouped-query attention (GQA) for faster inference, coupled with sliding window attention (SWA) to effectively handle sequences of arbitrary length with a reduced inference cost. We also provide a model fine-tuned to follow instructions, Mistral 7B -- Instruct, that surpasses the Llama 2 13B -- Chat model both on human and automated benchmarks. Our models are released under the Apache 2.0 license.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Devendra Singh Chaplot [<a href="https://arxiv.org/show-email/1509be8a/2310.06825">view email</a>]      <br>    <strong>[v1]</strong>
        Tue, 10 Oct 2023 17:54:58 UTC (2,241 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Toxiproxy – simulate network and system conditions for chaos testing (118 pts)]]></title>
            <link>https://github.com/Shopify/toxiproxy</link>
            <guid>37842301</guid>
            <pubDate>Wed, 11 Oct 2023 08:56:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Shopify/toxiproxy">https://github.com/Shopify/toxiproxy</a>, See on <a href="https://news.ycombinator.com/item?id=37842301">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" id="user-content-toxiproxy" dir="auto"><a href="#toxiproxy">Toxiproxy</a></h2>
<p dir="auto"><a href="https://github.com/Shopify/toxiproxy/releases/latest"><img src="https://camo.githubusercontent.com/f6a71a777d9bc6cfd6c6fe02996e19ebf9d61c493d13f2f47abfcb9272e0369e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f53686f706966792f746f786970726f78792e737667" alt="GitHub release" data-canonical-src="https://img.shields.io/github/release/Shopify/toxiproxy.svg"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/Shopify/toxiproxy/actions/workflows/test.yml/badge.svg"><img src="https://github.com/Shopify/toxiproxy/actions/workflows/test.yml/badge.svg" alt="Build Status"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a107b5b054d0abbfc74893b3e949f8287a836f6f89f1559db78d66df6519f1ce/687474703a2f2f692e696d6775722e636f6d2f734f614e77306f2e706e67"><img src="https://camo.githubusercontent.com/a107b5b054d0abbfc74893b3e949f8287a836f6f89f1559db78d66df6519f1ce/687474703a2f2f692e696d6775722e636f6d2f734f614e77306f2e706e67" alt="" data-canonical-src="http://i.imgur.com/sOaNw0o.png"></a></p>
<p dir="auto">Toxiproxy is a framework for simulating network conditions. It's made
specifically to work in testing, CI and development environments, supporting
deterministic tampering with connections, but with support for randomized chaos
and customization. <strong>Toxiproxy is the tool you need to prove with tests that
your application doesn't have single points of failure.</strong> We've been
successfully using it in all development and test environments at Shopify since
October, 2014. See our <a href="https://shopify.engineering/building-and-testing-resilient-ruby-on-rails-applications" rel="nofollow">blog post</a> on resiliency for more information.</p>
<p dir="auto">Toxiproxy usage consists of two parts. A TCP proxy written in Go (what this
repository contains) and a client communicating with the proxy over HTTP. You
configure your application to make all test connections go through Toxiproxy
and can then manipulate their health via HTTP. See <a href="#usage">Usage</a>
below on how to set up your project.</p>
<p dir="auto">For example, to add 1000ms of latency to the response of MySQL from the <a href="https://github.com/Shopify/toxiproxy-ruby">Ruby
client</a>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="Toxiproxy[:mysql_master].downstream(:latency, latency: 1000).apply do
  Shop.first # this takes at least 1s
end"><pre><span>Toxiproxy</span><span>[</span><span>:mysql_master</span><span>]</span><span>.</span><span>downstream</span><span>(</span><span>:latency</span><span>,</span> <span>latency</span>: <span>1000</span><span>)</span><span>.</span><span>apply</span> <span>do</span>
  <span>Shop</span><span>.</span><span>first</span> <span># this takes at least 1s</span>
<span>end</span></pre></div>
<p dir="auto">To take down all Redis instances:</p>
<div dir="auto" data-snippet-clipboard-copy-content="Toxiproxy[/redis/].down do
  Shop.first # this will throw an exception
end"><pre><span>Toxiproxy</span><span>[</span><span>/redis/</span><span>]</span><span>.</span><span>down</span> <span>do</span>
  <span>Shop</span><span>.</span><span>first</span> <span># this will throw an exception</span>
<span>end</span></pre></div>
<p dir="auto">While the examples in this README are currently in Ruby, there's nothing
stopping you from creating a client in any other language (see
<a href="#clients">Clients</a>).</p>
<h2 tabindex="-1" id="user-content-table-of-contents" dir="auto"><a href="#table-of-contents">Table of Contents</a></h2>
<ul dir="auto">
<li><a href="#toxiproxy">Toxiproxy</a>
<ul dir="auto">
<li><a href="#table-of-contents">Table of Contents</a></li>
<li><a href="#why-yet-another-chaotic-tcp-proxy">Why yet another chaotic TCP proxy?</a></li>
<li><a href="#clients">Clients</a></li>
<li><a href="#example">Example</a></li>
<li><a href="#usage">Usage</a>
<ul dir="auto">
<li><a href="#1-installing-toxiproxy">1. Installing Toxiproxy</a>
<ul dir="auto">
<li><a href="#upgrading-from-toxiproxy-1x">Upgrading from Toxiproxy 1.x</a></li>
</ul>
</li>
<li><a href="#2-populating-toxiproxy">2. Populating Toxiproxy</a></li>
<li><a href="#3-using-toxiproxy">3. Using Toxiproxy</a></li>
<li><a href="#4-logging">4. Logging</a></li>
<li><a href="#toxics">Toxics</a>
<ul dir="auto">
<li><a href="#latency">latency</a></li>
<li><a href="#down">down</a></li>
<li><a href="#bandwidth">bandwidth</a></li>
<li><a href="#slow_close">slow_close</a></li>
<li><a href="#timeout">timeout</a></li>
<li><a href="#reset_peer">reset_peer</a></li>
<li><a href="#slicer">slicer</a></li>
<li><a href="#limit_data">limit_data</a></li>
</ul>
</li>
<li><a href="#http-api">HTTP API</a>
<ul dir="auto">
<li><a href="#proxy-fields">Proxy fields:</a></li>
<li><a href="#toxic-fields">Toxic fields:</a></li>
<li><a href="#endpoints">Endpoints</a></li>
<li><a href="#populating-proxies">Populating Proxies</a></li>
</ul>
</li>
<li><a href="#cli-example">CLI Example</a></li>
<li><a href="#metrics">Metrics</a></li>
<li><a href="#frequently-asked-questions">Frequently Asked Questions</a></li>
<li><a href="#development">Development</a></li>
<li><a href="#release">Release</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 tabindex="-1" id="user-content-why-yet-another-chaotic-tcp-proxy" dir="auto"><a href="#why-yet-another-chaotic-tcp-proxy">Why yet another chaotic TCP proxy?</a></h2>
<p dir="auto">The existing ones we found didn't provide the kind of dynamic API we needed for
integration and unit testing. Linux tools like <code>nc</code> and so on are not
cross-platform and require root, which makes them problematic in test,
development and CI environments.</p>
<h2 tabindex="-1" id="user-content-clients" dir="auto"><a href="#clients">Clients</a></h2>
<ul dir="auto">
<li><a href="https://github.com/Shopify/toxiproxy-ruby">toxiproxy-ruby</a></li>
<li><a href="https://github.com/Shopify/toxiproxy/tree/main/client">toxiproxy-go</a></li>
<li><a href="https://github.com/douglas/toxiproxy-python">toxiproxy-python</a></li>
<li><a href="https://github.com/mdevilliers/Toxiproxy.Net">toxiproxy.net</a></li>
<li><a href="https://github.com/ihsw/toxiproxy-php-client">toxiproxy-php-client</a></li>
<li><a href="https://github.com/ihsw/toxiproxy-node-client">toxiproxy-node-client</a></li>
<li><a href="https://github.com/trekawek/toxiproxy-java">toxiproxy-java</a></li>
<li><a href="https://github.com/jpittis/toxiproxy-haskell">toxiproxy-haskell</a></li>
<li><a href="https://github.com/itarato/toxiproxy_rust">toxiproxy-rust</a></li>
<li><a href="https://github.com/Jcambass/toxiproxy_ex">toxiproxy-elixir</a></li>
</ul>
<h2 tabindex="-1" id="user-content-example" dir="auto"><a href="#example">Example</a></h2>
<p dir="auto">Let's walk through an example with a Rails application. Note that Toxiproxy is
in no way tied to Ruby, it's just been our first use case. You can see the full example at
<a href="https://github.com/sirupsen/toxiproxy-rails-example">sirupsen/toxiproxy-rails-example</a>.
To get started right away, jump down to <a href="#usage">Usage</a>.</p>
<p dir="auto">For our popular blog, for some reason we're storing the tags for our posts in
Redis and the posts themselves in MySQL. We might have a <code>Post</code> class that
includes some methods to manipulate tags in a <a href="http://redis.io/commands#set" rel="nofollow">Redis set</a>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Post < ActiveRecord::Base
  # Return an Array of all the tags.
  def tags
    TagRedis.smembers(tag_key)
  end

  # Add a tag to the post.
  def add_tag(tag)
    TagRedis.sadd(tag_key, tag)
  end

  # Remove a tag from the post.
  def remove_tag(tag)
    TagRedis.srem(tag_key, tag)
  end

  # Return the key in Redis for the set of tags for the post.
  def tag_key
    &quot;post:tags:#{self.id}&quot;
  end
end"><pre><span>class</span> <span>Post</span> &lt; <span>ActiveRecord</span>::<span>Base</span>
  <span># Return an Array of all the tags.</span>
  <span>def</span> <span>tags</span>
    <span>TagRedis</span><span>.</span><span>smembers</span><span>(</span><span>tag_key</span><span>)</span>
  <span>end</span>

  <span># Add a tag to the post.</span>
  <span>def</span> <span>add_tag</span><span>(</span><span>tag</span><span>)</span>
    <span>TagRedis</span><span>.</span><span>sadd</span><span>(</span><span>tag_key</span><span>,</span> <span>tag</span><span>)</span>
  <span>end</span>

  <span># Remove a tag from the post.</span>
  <span>def</span> <span>remove_tag</span><span>(</span><span>tag</span><span>)</span>
    <span>TagRedis</span><span>.</span><span>srem</span><span>(</span><span>tag_key</span><span>,</span> <span>tag</span><span>)</span>
  <span>end</span>

  <span># Return the key in Redis for the set of tags for the post.</span>
  <span>def</span> <span>tag_key</span>
    <span>"post:tags:<span><span>#{</span><span>self</span><span>.</span><span>id</span><span>}</span></span>"</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">We've decided that erroring while writing to the tag data store
(adding/removing) is OK. However, if the tag data store is down, we should be
able to see the post with no tags. We could simply rescue the
<code>Redis::CannotConnectError</code> around the <code>SMEMBERS</code> Redis call in the <code>tags</code>
method. Let's use Toxiproxy to test that.</p>
<p dir="auto">Since we've already installed Toxiproxy and it's running on our machine, we can
skip to step 2. This is where we need to make sure Toxiproxy has a mapping for
Redis tags. To <code>config/boot.rb</code> (before any connection is made) we add:</p>
<div dir="auto" data-snippet-clipboard-copy-content="require 'toxiproxy'

Toxiproxy.populate([
  {
    name: &quot;toxiproxy_test_redis_tags&quot;,
    listen: &quot;127.0.0.1:22222&quot;,
    upstream: &quot;127.0.0.1:6379&quot;
  }
])"><pre><span>require</span> <span>'toxiproxy'</span>

<span>Toxiproxy</span><span>.</span><span>populate</span><span>(</span><span>[</span>
  <span>{</span>
    <span>name</span>: <span>"toxiproxy_test_redis_tags"</span><span>,</span>
    <span>listen</span>: <span>"127.0.0.1:22222"</span><span>,</span>
    <span>upstream</span>: <span>"127.0.0.1:6379"</span>
  <span>}</span>
<span>]</span><span>)</span></pre></div>
<p dir="auto">Then in <code>config/environments/test.rb</code> we set the <code>TagRedis</code> to be a Redis client
that connects to Redis through Toxiproxy by adding this line:</p>
<div dir="auto" data-snippet-clipboard-copy-content="TagRedis = Redis.new(port: 22222)"><pre><span>TagRedis</span> <span>=</span> <span>Redis</span><span>.</span><span>new</span><span>(</span><span>port</span>: <span>22222</span><span>)</span></pre></div>
<p dir="auto">All calls in the test environment now go through Toxiproxy. That means we can
add a unit test where we simulate a failure:</p>
<div dir="auto" data-snippet-clipboard-copy-content="test &quot;should return empty array when tag redis is down when listing tags&quot; do
  @post.add_tag &quot;mammals&quot;

  # Take down all Redises in Toxiproxy
  Toxiproxy[/redis/].down do
    assert_equal [], @post.tags
  end
end"><pre><span>test</span> <span>"should return empty array when tag redis is down when listing tags"</span> <span>do</span>
  <span>@post</span><span>.</span><span>add_tag</span> <span>"mammals"</span>

  <span># Take down all Redises in Toxiproxy</span>
  <span>Toxiproxy</span><span>[</span><span>/redis/</span><span>]</span><span>.</span><span>down</span> <span>do</span>
    <span>assert_equal</span> <span>[</span><span>]</span><span>,</span> <span>@post</span><span>.</span><span>tags</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">The test fails with <code>Redis::CannotConnectError</code>. Perfect! Toxiproxy took down
the Redis successfully for the duration of the closure. Let's fix the <code>tags</code>
method to be resilient:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def tags
  TagRedis.smembers(tag_key)
rescue Redis::CannotConnectError
  []
end"><pre><span>def</span> <span>tags</span>
  <span>TagRedis</span><span>.</span><span>smembers</span><span>(</span><span>tag_key</span><span>)</span>
<span>rescue</span> <span>Redis</span>::<span>CannotConnectError</span>
  <span>[</span><span>]</span>
<span>end</span></pre></div>
<p dir="auto">The tests pass! We now have a unit test that proves fetching the tags when Redis
is down returns an empty array, instead of throwing an exception. For full
coverage you should also write an integration test that wraps fetching the
entire blog post page when Redis is down.</p>
<p dir="auto">Full example application is at
<a href="https://github.com/sirupsen/toxiproxy-rails-example">sirupsen/toxiproxy-rails-example</a>.</p>
<h2 tabindex="-1" id="user-content-usage" dir="auto"><a href="#usage">Usage</a></h2>
<p dir="auto">Configuring a project to use Toxiproxy consists of three steps:</p>
<ol dir="auto">
<li>Installing Toxiproxy</li>
<li>Populating Toxiproxy</li>
<li>Using Toxiproxy</li>
</ol>
<h3 tabindex="-1" id="user-content-1-installing-toxiproxy" dir="auto"><a href="#1-installing-toxiproxy">1. Installing Toxiproxy</a></h3>
<p dir="auto"><strong>Linux</strong></p>
<p dir="auto">See <a href="https://github.com/Shopify/toxiproxy/releases"><code>Releases</code></a> for the latest
binaries and system packages for your architecture.</p>
<p dir="auto"><strong>Ubuntu</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="$ wget -O toxiproxy-2.1.4.deb https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy_2.1.4_amd64.deb
$ sudo dpkg -i toxiproxy-2.1.4.deb
$ sudo service toxiproxy start"><pre>$ wget -O toxiproxy-2.1.4.deb https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy_2.1.4_amd64.deb
$ sudo dpkg -i toxiproxy-2.1.4.deb
$ sudo service toxiproxy start</pre></div>
<p dir="auto"><strong>OS X</strong></p>
<p dir="auto">With <a href="https://brew.sh/" rel="nofollow">Homebrew</a>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ brew tap shopify/shopify
$ brew install toxiproxy"><pre>$ brew tap shopify/shopify
$ brew install toxiproxy</pre></div>
<p dir="auto">Or with <a href="https://www.macports.org/" rel="nofollow">MacPorts</a>:</p>

<p dir="auto"><strong>Windows</strong></p>
<p dir="auto">Toxiproxy for Windows is available for download at <a href="https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy-server-windows-amd64.exe">https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy-server-windows-amd64.exe</a></p>
<p dir="auto"><strong>Docker</strong></p>
<p dir="auto">Toxiproxy is available on <a href="https://github.com/Shopify/toxiproxy/pkgs/container/toxiproxy">Github container registry</a>.
Old versions <code>&lt;= 2.1.4</code> are available on on <a href="https://hub.docker.com/r/shopify/toxiproxy/" rel="nofollow">Docker Hub</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ docker pull ghcr.io/shopify/toxiproxy
$ docker run --rm -it ghcr.io/shopify/toxiproxy"><pre>$ docker pull ghcr.io/shopify/toxiproxy
$ docker run --rm -it ghcr.io/shopify/toxiproxy</pre></div>
<p dir="auto">If using Toxiproxy from the host rather than other containers, enable host networking with <code>--net=host</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ docker run --rm --entrypoint=&quot;/toxiproxy-cli&quot; -it ghcr.io/shopify/toxiproxy list"><pre>$ docker run --rm --entrypoint=<span><span>"</span>/toxiproxy-cli<span>"</span></span> -it ghcr.io/shopify/toxiproxy list</pre></div>
<p dir="auto"><strong>Source</strong></p>
<p dir="auto">If you have Go installed, you can build Toxiproxy from source using the make file:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ make build
$ ./toxiproxy-server"><pre>$ make build
$ ./toxiproxy-server</pre></div>
<h4 tabindex="-1" id="user-content-upgrading-from-toxiproxy-1x" dir="auto"><a href="#upgrading-from-toxiproxy-1x">Upgrading from Toxiproxy 1.x</a></h4>
<p dir="auto">In Toxiproxy 2.0 several changes were made to the API that make it incompatible with version 1.x.
In order to use version 2.x of the Toxiproxy server, you will need to make sure your client
library supports the same version. You can check which version of Toxiproxy you are running by
looking at the <code>/version</code> endpoint.</p>
<p dir="auto">See the documentation for your client library for specific library changes. Detailed changes
for the Toxiproxy server can been found in <a href="https://github.com/Shopify/toxiproxy/blob/main/CHANGELOG.md">CHANGELOG.md</a>.</p>
<h3 tabindex="-1" id="user-content-2-populating-toxiproxy" dir="auto"><a href="#2-populating-toxiproxy">2. Populating Toxiproxy</a></h3>
<p dir="auto">When your application boots, it needs to make sure that Toxiproxy knows which
endpoints to proxy where. The main parameters are: name, address for Toxiproxy
to <strong>listen</strong> on and the address of the upstream.</p>
<p dir="auto">Some client libraries have helpers for this task, which is essentially just
making sure each proxy in a list is created. Example from the Ruby client:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Make sure `shopify_test_redis_master` and `shopify_test_mysql_master` are
# present in Toxiproxy
Toxiproxy.populate([
  {
    name: &quot;shopify_test_redis_master&quot;,
    listen: &quot;127.0.0.1:22220&quot;,
    upstream: &quot;127.0.0.1:6379&quot;
  },
  {
    name: &quot;shopify_test_mysql_master&quot;,
    listen: &quot;127.0.0.1:24220&quot;,
    upstream: &quot;127.0.0.1:3306&quot;
  }
])"><pre><span># Make sure `shopify_test_redis_master` and `shopify_test_mysql_master` are</span>
<span># present in Toxiproxy</span>
<span>Toxiproxy</span><span>.</span><span>populate</span><span>(</span><span>[</span>
  <span>{</span>
    <span>name</span>: <span>"shopify_test_redis_master"</span><span>,</span>
    <span>listen</span>: <span>"127.0.0.1:22220"</span><span>,</span>
    <span>upstream</span>: <span>"127.0.0.1:6379"</span>
  <span>}</span><span>,</span>
  <span>{</span>
    <span>name</span>: <span>"shopify_test_mysql_master"</span><span>,</span>
    <span>listen</span>: <span>"127.0.0.1:24220"</span><span>,</span>
    <span>upstream</span>: <span>"127.0.0.1:3306"</span>
  <span>}</span>
<span>]</span><span>)</span></pre></div>
<p dir="auto">This code needs to run as early in boot as possible, before any code establishes
a connection through Toxiproxy. Please check your client library for
documentation on the population helpers.</p>
<p dir="auto">Alternatively use the CLI to create proxies, e.g.:</p>
<div dir="auto" data-snippet-clipboard-copy-content="toxiproxy-cli create -l localhost:26379 -u localhost:6379 shopify_test_redis_master"><pre>toxiproxy-cli create -l localhost:26379 -u localhost:6379 shopify_test_redis_master</pre></div>
<p dir="auto">We recommend a naming such as the above: <code>&lt;app&gt;_&lt;env&gt;_&lt;data store&gt;_&lt;shard&gt;</code>.
This makes sure there are no clashes between applications using the same
Toxiproxy.</p>
<p dir="auto">For large application we recommend storing the Toxiproxy configurations in a
separate configuration file. We use <code>config/toxiproxy.json</code>. This file can be
passed to the server using the <code>-config</code> option, or loaded by the application
to use with the <code>populate</code> function.</p>
<p dir="auto">An example <code>config/toxiproxy.json</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[
  {
    &quot;name&quot;: &quot;web_dev_frontend_1&quot;,
    &quot;listen&quot;: &quot;[::]:18080&quot;,
    &quot;upstream&quot;: &quot;webapp.domain:8080&quot;,
    &quot;enabled&quot;: true
  },
  {
    &quot;name&quot;: &quot;web_dev_mysql_1&quot;,
    &quot;listen&quot;: &quot;[::]:13306&quot;,
    &quot;upstream&quot;: &quot;database.domain:3306&quot;,
    &quot;enabled&quot;: true
  }
]"><pre>[
  {
    <span>"name"</span>: <span><span>"</span>web_dev_frontend_1<span>"</span></span>,
    <span>"listen"</span>: <span><span>"</span>[::]:18080<span>"</span></span>,
    <span>"upstream"</span>: <span><span>"</span>webapp.domain:8080<span>"</span></span>,
    <span>"enabled"</span>: <span>true</span>
  },
  {
    <span>"name"</span>: <span><span>"</span>web_dev_mysql_1<span>"</span></span>,
    <span>"listen"</span>: <span><span>"</span>[::]:13306<span>"</span></span>,
    <span>"upstream"</span>: <span><span>"</span>database.domain:3306<span>"</span></span>,
    <span>"enabled"</span>: <span>true</span>
  }
]</pre></div>
<p dir="auto">Use ports outside the ephemeral port range to avoid random port conflicts.
It's <code>32,768</code> to <code>61,000</code> on Linux by default, see
<code>/proc/sys/net/ipv4/ip_local_port_range</code>.</p>
<h3 tabindex="-1" id="user-content-3-using-toxiproxy" dir="auto"><a href="#3-using-toxiproxy">3. Using Toxiproxy</a></h3>
<p dir="auto">To use Toxiproxy, you now need to configure your application to connect through
Toxiproxy. Continuing with our example from step two, we can configure our Redis
client to connect through Toxiproxy:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# old straight to redis
redis = Redis.new(port: 6380)

# new through toxiproxy
redis = Redis.new(port: 22220)"><pre><span># old straight to redis</span>
<span>redis</span> <span>=</span> <span>Redis</span><span>.</span><span>new</span><span>(</span><span>port</span>: <span>6380</span><span>)</span>

<span># new through toxiproxy</span>
<span>redis</span> <span>=</span> <span>Redis</span><span>.</span><span>new</span><span>(</span><span>port</span>: <span>22220</span><span>)</span></pre></div>
<p dir="auto">Now you can tamper with it through the Toxiproxy API. In Ruby:</p>
<div dir="auto" data-snippet-clipboard-copy-content="redis = Redis.new(port: 22220)

Toxiproxy[:shopify_test_redis_master].downstream(:latency, latency: 1000).apply do
  redis.get(&quot;test&quot;) # will take 1s
end"><pre><span>redis</span> <span>=</span> <span>Redis</span><span>.</span><span>new</span><span>(</span><span>port</span>: <span>22220</span><span>)</span>

<span>Toxiproxy</span><span>[</span><span>:shopify_test_redis_master</span><span>]</span><span>.</span><span>downstream</span><span>(</span><span>:latency</span><span>,</span> <span>latency</span>: <span>1000</span><span>)</span><span>.</span><span>apply</span> <span>do</span>
  <span>redis</span><span>.</span><span>get</span><span>(</span><span>"test"</span><span>)</span> <span># will take 1s</span>
<span>end</span></pre></div>
<p dir="auto">Or via the CLI:</p>
<div dir="auto" data-snippet-clipboard-copy-content="toxiproxy-cli toxic add -t latency -a latency=1000 shopify_test_redis_master"><pre>toxiproxy-cli toxic add -t latency -a latency=1000 shopify_test_redis_master</pre></div>
<p dir="auto">Please consult your respective client library on usage.</p>
<h3 tabindex="-1" id="user-content-4-logging" dir="auto"><a href="#4-logging">4. Logging</a></h3>
<p dir="auto">There are the following log levels: panic, fatal, error, warn or warning, info, debug and trace.
The level could be updated via environment variable <code>LOG_LEVEL</code>.</p>
<h3 tabindex="-1" id="user-content-toxics" dir="auto"><a href="#toxics">Toxics</a></h3>
<p dir="auto">Toxics manipulate the pipe between the client and upstream. They can be added
and removed from proxies using the <a href="#http-api">HTTP api</a>. Each toxic has its own parameters
to change how it affects the proxy links.</p>
<p dir="auto">For documentation on implementing custom toxics, see <a href="https://github.com/Shopify/toxiproxy/blob/main/CREATING_TOXICS.md">CREATING_TOXICS.md</a></p>
<h4 tabindex="-1" id="user-content-latency" dir="auto"><a href="#latency">latency</a></h4>
<p dir="auto">Add a delay to all data going through the proxy. The delay is equal to <code>latency</code> +/- <code>jitter</code>.</p>
<p dir="auto">Attributes:</p>
<ul dir="auto">
<li><code>latency</code>: time in milliseconds</li>
<li><code>jitter</code>: time in milliseconds</li>
</ul>
<h4 tabindex="-1" id="user-content-down" dir="auto"><a href="#down">down</a></h4>
<p dir="auto">Bringing a service down is not technically a toxic in the implementation of
Toxiproxy. This is done by <code>POST</code>ing to <code>/proxies/{proxy}</code> and setting the
<code>enabled</code> field to <code>false</code>.</p>
<h4 tabindex="-1" id="user-content-bandwidth" dir="auto"><a href="#bandwidth">bandwidth</a></h4>
<p dir="auto">Limit a connection to a maximum number of kilobytes per second.</p>
<p dir="auto">Attributes:</p>
<ul dir="auto">
<li><code>rate</code>: rate in KB/s</li>
</ul>
<h4 tabindex="-1" id="user-content-slow_close" dir="auto"><a href="#slow_close">slow_close</a></h4>
<p dir="auto">Delay the TCP socket from closing until <code>delay</code> has elapsed.</p>
<p dir="auto">Attributes:</p>
<ul dir="auto">
<li><code>delay</code>: time in milliseconds</li>
</ul>
<h4 tabindex="-1" id="user-content-timeout" dir="auto"><a href="#timeout">timeout</a></h4>
<p dir="auto">Stops all data from getting through, and closes the connection after <code>timeout</code>. If
<code>timeout</code> is 0, the connection won't close, and data will be delayed until the
toxic is removed.</p>
<p dir="auto">Attributes:</p>
<ul dir="auto">
<li><code>timeout</code>: time in milliseconds</li>
</ul>
<h4 tabindex="-1" id="user-content-reset_peer" dir="auto"><a href="#reset_peer">reset_peer</a></h4>
<p dir="auto">Simulate TCP RESET (Connection reset by peer) on the connections by closing the stub Input
immediately or after a <code>timeout</code>.</p>
<p dir="auto">Attributes:</p>
<ul dir="auto">
<li><code>timeout</code>: time in milliseconds</li>
</ul>
<h4 tabindex="-1" id="user-content-slicer" dir="auto"><a href="#slicer">slicer</a></h4>
<p dir="auto">Slices TCP data up into small bits, optionally adding a delay between each
sliced "packet".</p>
<p dir="auto">Attributes:</p>
<ul dir="auto">
<li><code>average_size</code>: size in bytes of an average packet</li>
<li><code>size_variation</code>: variation in bytes of an average packet (should be smaller than average_size)</li>
<li><code>delay</code>: time in microseconds to delay each packet by</li>
</ul>
<h4 tabindex="-1" id="user-content-limit_data" dir="auto"><a href="#limit_data">limit_data</a></h4>
<p dir="auto">Closes connection when transmitted data exceeded limit.</p>
<ul dir="auto">
<li><code>bytes</code>: number of bytes it should transmit before connection is closed</li>
</ul>
<h3 tabindex="-1" id="user-content-http-api" dir="auto"><a href="#http-api">HTTP API</a></h3>
<p dir="auto">All communication with the Toxiproxy daemon from the client happens through the
HTTP interface, which is described here.</p>
<p dir="auto">Toxiproxy listens for HTTP on port <strong>8474</strong>.</p>
<h4 tabindex="-1" id="user-content-proxy-fields" dir="auto"><a href="#proxy-fields">Proxy fields:</a></h4>
<ul dir="auto">
<li><code>name</code>: proxy name (string)</li>
<li><code>listen</code>: listen address (string)</li>
<li><code>upstream</code>: proxy upstream address (string)</li>
<li><code>enabled</code>: true/false (defaults to true on creation)</li>
</ul>
<p dir="auto">To change a proxy's name, it must be deleted and recreated.</p>
<p dir="auto">Changing the <code>listen</code> or <code>upstream</code> fields will restart the proxy and drop any active connections.</p>
<p dir="auto">If <code>listen</code> is specified with a port of 0, toxiproxy will pick an ephemeral port. The <code>listen</code> field
in the response will be updated with the actual port.</p>
<p dir="auto">If you change <code>enabled</code> to <code>false</code>, it will take down the proxy. You can switch it
back to <code>true</code> to reenable it.</p>
<h4 tabindex="-1" id="user-content-toxic-fields" dir="auto"><a href="#toxic-fields">Toxic fields:</a></h4>
<ul dir="auto">
<li><code>name</code>: toxic name (string, defaults to <code>&lt;type&gt;_&lt;stream&gt;</code>)</li>
<li><code>type</code>: toxic type (string)</li>
<li><code>stream</code>: link direction to affect (defaults to <code>downstream</code>)</li>
<li><code>toxicity</code>: probability of the toxic being applied to a link (defaults to 1.0, 100%)</li>
<li><code>attributes</code>: a map of toxic-specific attributes</li>
</ul>
<p dir="auto">See <a href="#toxics">Toxics</a> for toxic-specific attributes.</p>
<p dir="auto">The <code>stream</code> direction must be either <code>upstream</code> or <code>downstream</code>. <code>upstream</code> applies
the toxic on the <code>client -&gt; server</code> connection, while <code>downstream</code> applies the toxic
on the <code>server -&gt; client</code> connection. This can be used to modify requests and responses
separately.</p>
<h4 tabindex="-1" id="user-content-endpoints" dir="auto"><a href="#endpoints">Endpoints</a></h4>
<p dir="auto">All endpoints are JSON.</p>
<ul dir="auto">
<li><strong>GET /proxies</strong> - List existing proxies and their toxics</li>
<li><strong>POST /proxies</strong> - Create a new proxy</li>
<li><strong>POST /populate</strong> - Create or replace a list of proxies</li>
<li><strong>GET /proxies/{proxy}</strong> - Show the proxy with all its active toxics</li>
<li><strong>POST /proxies/{proxy}</strong> - Update a proxy's fields</li>
<li><strong>DELETE /proxies/{proxy}</strong> - Delete an existing proxy</li>
<li><strong>GET /proxies/{proxy}/toxics</strong> - List active toxics</li>
<li><strong>POST /proxies/{proxy}/toxics</strong> - Create a new toxic</li>
<li><strong>GET /proxies/{proxy}/toxics/{toxic}</strong> - Get an active toxic's fields</li>
<li><strong>POST /proxies/{proxy}/toxics/{toxic}</strong> - Update an active toxic</li>
<li><strong>DELETE /proxies/{proxy}/toxics/{toxic}</strong> - Remove an active toxic</li>
<li><strong>POST /reset</strong> - Enable all proxies and remove all active toxics</li>
<li><strong>GET /version</strong> - Returns the server version number</li>
<li><strong>GET /metrics</strong> - Returns Prometheus-compatible metrics</li>
</ul>
<h4 tabindex="-1" id="user-content-populating-proxies" dir="auto"><a href="#populating-proxies">Populating Proxies</a></h4>
<p dir="auto">Proxies can be added and configured in bulk using the <code>/populate</code> endpoint. This is done by
passing a json array of proxies to toxiproxy. If a proxy with the same name already exists,
it will be compared to the new proxy and replaced if the <code>upstream</code> and <code>listen</code> address don't match.</p>
<p dir="auto">A <code>/populate</code> call can be included for example at application start to ensure all required proxies
exist. It is safe to make this call several times, since proxies will be untouched as long as their
fields are consistent with the new data.</p>
<h3 tabindex="-1" id="user-content-cli-example" dir="auto"><a href="#cli-example">CLI Example</a></h3>
<div dir="auto" data-snippet-clipboard-copy-content="$ toxiproxy-cli create -l localhost:26379 -u localhost:6379 redis
Created new proxy redis
$ toxiproxy-cli list
Listen          Upstream        Name  Enabled Toxics
======================================================================
127.0.0.1:26379 localhost:6379  redis true    None

Hint: inspect toxics with `toxiproxy-client inspect <proxyName>`"><pre>$ toxiproxy-cli create -l localhost:26379 -u localhost:6379 redis
Created new proxy redis
$ toxiproxy-cli list
Listen          Upstream        Name  Enabled Toxics
======================================================================
127.0.0.1:26379 localhost:6379  redis <span>true</span>    None

Hint: inspect toxics with <span><span>`</span>toxiproxy-client inspect <span>&lt;</span>proxyName<span>&gt;</span><span>`</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ redis-cli -p 26379
127.0.0.1:26379> SET omg pandas
OK
127.0.0.1:26379> GET omg
&quot;pandas&quot;"><pre>$ redis-cli -p 26379
127.0.0.1:<span>26379&gt;</span> SET omg pandas
OK
127.0.0.1:<span>26379&gt;</span> GET omg
<span><span>"</span>pandas<span>"</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ toxiproxy-cli toxic add -t latency -a latency=1000 redis
Added downstream latency toxic 'latency_downstream' on proxy 'redis'"><pre>$ toxiproxy-cli toxic add -t latency -a latency=1000 redis
Added downstream latency toxic <span><span>'</span>latency_downstream<span>'</span></span> on proxy <span><span>'</span>redis<span>'</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ redis-cli -p 26379
127.0.0.1:26379> GET omg
&quot;pandas&quot;
(1.00s)
127.0.0.1:26379> DEL omg
(integer) 1
(1.00s)"><pre>$ redis-cli -p 26379
127.0.0.1:<span>26379&gt;</span> GET omg
<span><span>"</span>pandas<span>"</span></span>
(1.00s)
127.0.0.1:<span>26379&gt;</span> DEL omg
(integer) 1
(1.00s)</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ toxiproxy-cli toxic remove -n latency_downstream redis
Removed toxic 'latency_downstream' on proxy 'redis'"><pre>$ toxiproxy-cli toxic remove -n latency_downstream redis
Removed toxic <span><span>'</span>latency_downstream<span>'</span></span> on proxy <span><span>'</span>redis<span>'</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ redis-cli -p 26379
127.0.0.1:26379> GET omg
(nil)"><pre>$ redis-cli -p 26379
127.0.0.1:<span>26379&gt;</span> GET omg
(nil)</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ toxiproxy-cli delete redis
Deleted proxy redis"><pre>$ toxiproxy-cli delete redis
Deleted proxy redis</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="$ redis-cli -p 26379
Could not connect to Redis at 127.0.0.1:26379: Connection refused"><pre>$ redis-cli -p 26379
Could not connect to Redis at 127.0.0.1:26379: Connection refused</pre></div>
<h3 tabindex="-1" id="user-content-metrics" dir="auto"><a href="#metrics">Metrics</a></h3>
<p dir="auto">Toxiproxy exposes Prometheus-compatible metrics via its HTTP API at /metrics.
See <a href="https://github.com/Shopify/toxiproxy/blob/main/METRICS.md">METRICS.md</a> for full descriptions</p>
<h3 tabindex="-1" id="user-content-frequently-asked-questions" dir="auto"><a href="#frequently-asked-questions">Frequently Asked Questions</a></h3>
<p dir="auto"><strong>How fast is Toxiproxy?</strong> The speed of Toxiproxy depends largely on your hardware,
but you can expect a latency of <em>&lt; 100µs</em> when no toxics are enabled. When running
with <code>GOMAXPROCS=4</code> on a Macbook Pro we achieved <em>~1000MB/s</em> throughput, and as high
as <em>2400MB/s</em> on a higher end desktop. Basically, you can expect Toxiproxy to move
data around at least as fast the app you're testing.</p>
<p dir="auto"><strong>Can Toxiproxy do randomized testing?</strong> Many of the available toxics can be configured
to have randomness, such as <code>jitter</code> in the <code>latency</code> toxic. There is also a
global <code>toxicity</code> parameter that specifies the percentage of connections a toxic
will affect. This is most useful for things like the <code>timeout</code> toxic, which would
allow X% of connections to timeout.</p>
<p dir="auto"><strong>I am not seeing my Toxiproxy actions reflected for MySQL</strong>. MySQL will prefer
the local Unix domain socket for some clients, no matter which port you pass it
if the host is set to <code>localhost</code>. Configure your MySQL server to not create a
socket, and use <code>127.0.0.1</code> as the host. Remember to remove the old socket
after you restart the server.</p>
<p dir="auto"><strong>Toxiproxy causes intermittent connection failures</strong>. Use ports outside the
ephemeral port range to avoid random port conflicts. It's <code>32,768</code> to <code>61,000</code> on
Linux by default, see <code>/proc/sys/net/ipv4/ip_local_port_range</code>.</p>
<p dir="auto"><strong>Should I run a Toxiproxy for each application?</strong> No, we recommend using the
same Toxiproxy for all applications. To distinguish between services we
recommend naming your proxies with the scheme: <code>&lt;app&gt;_&lt;env&gt;_&lt;data store&gt;_&lt;shard&gt;</code>.
For example, <code>shopify_test_redis_master</code> or <code>shopify_development_mysql_1</code>.</p>
<h3 tabindex="-1" id="user-content-development" dir="auto"><a href="#development">Development</a></h3>
<ul dir="auto">
<li><code>make</code>. Build a toxiproxy development binary for the current platform.</li>
<li><code>make all</code>. Build Toxiproxy binaries and packages for all platforms. Requires
to have Go compiled with cross compilation enabled on Linux and Darwin (amd64)
as well as <a href="https://goreleaser.com/" rel="nofollow"><code>goreleaser</code></a> in your <code>$PATH</code> to
build binaries the Linux package.</li>
<li><code>make test</code>. Run the Toxiproxy tests.</li>
</ul>
<h3 tabindex="-1" id="user-content-release" dir="auto"><a href="#release">Release</a></h3>
<p dir="auto">See <a href="https://github.com/Shopify/toxiproxy/blob/main/RELEASE.md">RELEASE.md</a></p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Twenty-five open-source network emulators and simulators you can use in 2023 (185 pts)]]></title>
            <link>https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/</link>
            <guid>37842161</guid>
            <pubDate>Wed, 11 Oct 2023 08:23:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/">https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/</a>, See on <a href="https://news.ycombinator.com/item?id=37842161">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-5706">
					<p>I surveyed the current state of the art in open-source network emulation and simulation. I also reviewed the development and support status of all the network emulators and network simulators previously featured in my blog.</p>
<p>Of all the network emulators and network simulators I mentioned in my blog over the years, I found that eighteen of them are still active projects. I also found seven new projects that you can try. See below for a brief update about each tool.</p>

<h3>Active projects</h3>
<p>Below is a list of the tools previously featured in my blog that are, in my opinion, still actively supported.</p>
<h4>Cloonix</h4>
<p><a href="http://clownix.net/">Cloonix</a> version 28 was released in January 2023. Cloonix stitches together Linux networking tools to make it easy to emulate complex networks by linking virtual machines and containers. Cloonix has both a command-line-interface and a graphical user interface.</p>
<p>The Cloonix web site now has a new address at: <a href="http://clownix.net/">clownix.net</a> and theCloonix project now <a href="https://github.com/clownix/cloonix">hosts code on Github</a>. Cloonix adopted a <a href="http://clownix.net/doc_stored/">new release numbering scheme</a> since I reviewed it in 2017. So it is now at “v28”.</p>
<h4>Cloudsim</h4>
<p><a href="http://www.cloudbus.org/cloudsim/">CloudSim</a> is still <a href="https://github.com/Cloudslab/cloudsim">maintained</a>. Cloudsim is a network simulator that enables modeling, simulation, and experimentation of emerging Cloud computing infrastructures and application services. It is part of an <a href="http://www.cloudbus.org/">ecosystem</a> of <a href="https://github.com/Cloudslab">projects and extensions</a>, such as <a href="https://github.com/Cloudslab/iFogSim">iFogSim</a>. CloudSim release 6 was delivered in August, 2022.</p>
<h4>cnet</h4>
<p>The <a href="https://www.csse.uwa.edu.au/cnet/index.php">cnet</a> network simulator is actively maintained. It enables development of and <a href="https://www.csse.uwa.edu.au/cnet/introduction.php">experimentation</a> with a variety of data-link layer, network layer, and transport layer networking protocols in networks consisting of any combination of wide-area-networking (WAN), local-area-networking (LAN), or wireless-local-area-networking (WLAN) links <sup id="fnref-5706-6"><a href="#fn-5706-6" title="Read footnote.">1</a></sup>. The project maintainers say it is open source but you must provide you name and e-mail address to download the application source code. <a href="https://www.csse.uwa.edu.au/cnet/changelog.php">Version 3.5.3 was released in April 2022</a>.</p>
<h4>Containerlab</h4>
<p><a href="https://containerlab.dev/">Containerlab</a> is still very active. Containerlab is an open-source network emulator that quickly builds network test environments in a devops-style workflow. It provides a command-line-interface for orchestrating and managing container-based networking labs and supports containerized router images available from the major networking vendors. The <a href="https://github.com/srl-labs/containerlab/releases/tag/v0.36.1">most recent release was 0.36.1</a>, released in January, 2023.</p>
<h4>CORE</h4>
<p>The <a href="http://coreemu.github.io/core/"><em>Common Open Research Emulator</em> (CORE)</a> is still active.  CORE consists of a GUI for drawing topologies of lightweight virtual machines, and Python modules for scripting network emulation <sup id="fnref-5706-1"><a href="#fn-5706-1" title="Read footnote.">2</a></sup>. The most recent CORE release, 9.0.1, was <a href="https://github.com/coreemu">released in November 2022</a>. The CORE community is very active on the <a href="https://discord.com/channels/382277735575322625/">CORE Discord server</a>.</p>
<h4>EVE-NG</h4>
<p><a href="https://www.eve-ng.net/index.php/community/">EVE-NG Community Edition</a> continues to receive updates. It is a network emulator that supports virtualized commercial router images, such as Cisco and NOKIA, and open-source routers. The EVE-NG team seems to focus on the commercial EVE-NG product but still supports the open-source EVE-NG Community version. EVE-NG Community Edition v5.0.1-13 was released in August 2022. I found a new project that creates a <a href="https://github.com/ttafsir/evengsdk">Python API for EVE-NG</a>.</p>
<p>While I was refreshing this list, I realized EVE-NG Community Edition is not open-source software. It was originally an open-source project called <a href="https://github.com/dainok/unetlab">UNetLab</a>, but the developers turned it into a commercial project and renamed it. I am keeping EVE-NG on this list because the Community Edition is still free to use.</p>
<h4>GNS3</h4>
<p><a href="https://gns3.com/">GNS3</a> continues to deliver new versions. GNS3 is a very popular network emulation tool that is primarily used to emulate networks of commercial routers, but it also supports open-source routers. It is often used by professionals studying for certification exams. <a href="https://github.com/GNS3">GNS3 version 2.2.37</a> was released in January 2023.</p>
<h4>IMUNES</h4>
<p><a href="http://imunes.net/">IMUNES</a> is stable. It is a network emulator. IMUNES and CORE share the same code heritage and their user interfaces are similar, but they have diverged from each other since 2012. IMUNES has seen less development activity than CORE in the past few years. The IMUNES developer made an update a few months ago to support the <a href="https://github.com/imunes/vroot-linux/commit/e49e67b9028c472c1142730dd94a7e4e41a71c08">Apple M1 processor on Ubuntu 20.04 LTS</a>.</p>
<h4>Kathará</h4>
<p><a href="https://www.kathara.org/">Kathará</a> is still being <a href="https://github.com/KatharaFramework/Kathara">maintained</a>. It is a network emulator that can run either on a single host leveraging Docker or on a cluster using Kubernetes. It can run network emulation scenarios on a variety of operating systems such as Windows, Mac, and Linux, and in other environments such as data centers or the public cloud. It allows configuration and deployment of virtual networks featuring SDN, NFV, and traditional routing protocols, such as BGP and OSPF. Kathará offers Python APIs that allow user to script the creation of network scenarios. <a href="https://github.com/KatharaFramework/Kathara/releases/tag/3.5.5">Version 3.5.5</a> was released in January, 2023.</p>
<p>Kathará was created by the original developers of <a href="https://www.netkit.org/">Netkit</a> and is intended to be the next evolution in network emulation. A <a href="https://github.com/netkit-jh/netkit-jh-build">fork of the original Netkit</a> is still being maintained by another author and has <a href="https://netkit-jh.github.io/docs/">updated documentation</a>.</p>
<h4>Labtainers</h4>
<p><a href="https://nps.edu/web/c3o/labtainers">Labtainers</a> is still being <a href="https://github.com/mfthomps/Labtainers">maintained</a>. It is a network emulator that enable researchers and students to explore network security topics. It has <a href="https://nps.edu/web/c3o/labtainer-lab-summary1">many lab scenarios</a> based on security topics. <a href="https://github.com/mfthomps/Labtainers/releases/tag/v1.3.7q">Version 1.3.7</a> was released in January 2023</p>
<h4>Linux Network Test Stack</h4>
<p>The <a href="http://lnst-project.org/"><em>Linux Network Test Stack</em></a> (LNTS), is still being <a href="https://github.com/lnst-project/lnst">maintained</a>. It is a Python package that enables developers to build network emulation scenarios using a Python program. You may use LNTS to control a network of hardware nodes or to control an emulated network of containers. <a href="https://github.com/LNST-project/lnst/releases/tag/v15.1">LNTS version 15.1</a> was released in August 2019 but the developer is merging pull requests in GitHub as recent as a few weeks ago so I believe this project is still active.</p>
<h4>Mininet</h4>
<p><a href="http://mininet.org/">Mininet</a> published its last version, 2.3.0, two years ago but it is still being maintained and remains a popular network emulator. It is designed to support research and education in the field of Software Defined Networking systems. On <a href="https://github.com/mininet/mininet">Mininet’s Github repo</a>, I see some minor development activity in recent months. <a href="https://mn-wifi.readthedocs.io/en/latest/">Mininet Wifi</a> has about the same <a href="https://github.com/intrig-unicamp/mininet-wifi">development activity</a>. Both the <a href="https://mailman.stanford.edu/mailman/listinfo/mininet-discuss">Mininet mailing list</a> and <a href="https://groups.google.com/g/mininet-wifi-discuss">Mininet WiFi forum</a> are still active. I also found some  examples of <a href="https://github.com/gabisurita/network-labs">building Mininet</a> <a href="https://github.com/mkucukdemir/mininet-topology">labs</a> using <a href="https://github.com/bobuhiro11/mininetlab">Python and FRR</a></p>
<p><a href="https://github.com/named-data/mini-ndn">Mini-NDN</a> is a fork of Mininet designed for emulating Named Data Networking. It’s most recent release was at the end of 2021.</p>
<p><a href="https://containernet.github.io/">Containernet</a> is a fork of Mininet that allows to use Docker containers as hosts in emulated network topologies. It is still being <a href="https://github.com/containernet/containernet">maintained</a>. It’s last release was in December, 2019, but its GitHub repository has seen a few pull requests merged in 2022.</p>
<h4>NEmu</h4>
<p><a href="https://gitlab.com/v-a/nemu">NEmu</a>, the <em>Network Emulator for Mobile Universes</em>, is still being maintained. It creates QEMU VMs to build a dynamic virtual network and does not require root access to your computer. NEmu users write Python scripts to describe the network topology and functionality. <a href="https://gitlab.com/v-a/nemu/-/tags/0.8.0">Version 0.8.0</a> was released in January 2023.</p>
<h4>Netlab</h4>
<p><a href="https://github.com/ipspace/netlab">NetLab</a> is actively maintained. NetLab uses Libvirt and Vagrant to set up a simulated network of configured, ready-to-use devices. It brings DevOps-style infrastructure-as-code and CI/CD concepts to networking labs. <a href="https://github.com/ipspace/netlab/releases/tag/release_1.5.0">Netlab v1.5</a> was released in February, 2023.</p>
<h4>ns-3</h4>
<p><a href="https://www.nsnam.org/">ns-3</a> is actively maintained and supported. It is a free, open-source discrete-event network simulator for Internet systems, targeted primarily for research and educational use. <a href="https://www.nsnam.org/news/2022/11/01/ns-3-37-released.html">Version 3.37</a> was released in November 2022. The <a href="https://gitlab.com/nsnam/ns-3-dev#table-of-contents">ns-3 source code</a> is on GitLab.</p>
<h4>OMnet++</h4>
<p><a href="https://omnetpp.org/">Omnet++</a> is in active development. It is a discreet-event network simulator used by many universities for teaching and research. It is published under a license called the <a href="https://opensource.org/licenses/APL-1.0">Academic Public License</a>, which appears to be unique to the Omnet++ project. Commercial users must pay for a license, but academic or personal use is permitted without payment. Non-commercial developers have rights similar to the GPL. <a href="https://github.com/omnetpp/omnetpp/releases/tag/omnetpp-6.0.1">OMNeT++ 6.0.1</a> was released in September 2022.</p>
<h4>OpenConfig-KNE</h4>
<p><a href="https://github.com/openconfig/kne">OpenConfig-KNE</a>, <em>Kubernetes Network Emulation</em>, is actively maintained. It is a network emulator developed by the <a href="https://www.openconfig.net/">OpenConfig</a> foundation. It extends basic Kubernetes networking so it can support point-to-point virtual connections between nodes in an arbitrary network topology. Additionally, the <a href="https://www.techrepublic.com/article/how-to-get-started-with-openconfig-and-yang-models/">OpenConfig organization encourages</a> the major networking equipment vendors like <a href="https://learn.srlinux.dev/tutorials/infrastructure/kne/">Nokia</a>, <a href="https://www.cisco.com/c/en/us/td/docs/switches/datacenter/nexus9000/sw/93x/progammability/guide/b-cisco-nexus-9000-series-nx-os-programmability-guide-93x/b-cisco-nexus-9000-series-nx-os-programmability-guide-93x_chapter_011001.html">Cisco</a>, and <a href="https://www.juniper.net/documentation/us/en/software/junos/open-config/topics/concept/openconfig-overview.html">Juniper</a> to produce standard data models, for configuration, and standard container implementations, for deployment. OpenConfig-KNE also supports standard containers so it can emulate networks comprised of open-source appliances. <a href="https://github.com/openconfig/kne/releases/tag/v0.1.7">Version 0.1.7 was released in December 2022</a>.</p>
<h4>Shadow</h4>
<p><a href="https://shadow.github.io/">Shadow</a> is still under active development. It is a discrete-event network simulator that directly executes real application code, enabling you to simulate distributed systems with thousands of network-connected processes in realistic and scalable private network experiments using your laptop, desktop, or server running Linux <sup id="fnref-5706-2"><a href="#fn-5706-2" title="Read footnote.">3</a></sup>. <a href="https://github.com/shadow/shadow/releases/tag/v2.4.0">Shadow v2.4.0 was released in January 2023</a>.</p>
<h4>VNX</h4>
<p><a href="http://web.dit.upm.es/vnxwiki/index.php/Main_Page"><em>Virtual Networks over Linux</em> (VNX)</a> is stable since 2020. But, <a href="http://vnx.dit.upm.es/vnx/filesystems/">new filesystems</a> were added in January 2023 so there is still support. VNX is an open-source network simulation tool that builds and modifies virtual network test beds automatically from a user-created network description file. The latest version of VNX was <a href="http://web.dit.upm.es/vnxwiki/index.php/Vnx-latest-features">released on Sep 14th, 2020</a></p>
<h4>vrnetlab</h4>
<p><a href="https://github.com/vrnetlab/vrnetlab">vrnetlab</a> has slowed down development activity. The last commit was in December 2021, which is recent enough. However, on the GitHub repository there are many pull requests open and many issues that have not received a response. I think, for now, I keep listing vrnetlab on the sidebar because some parts of vrnetlab and the vrnetlab documentation may still be useful to users of <a href="https://containerlab.dev/">Containerlab</a></p>
<h3>New tools</h3>
<p>I surveyed the Internet for information about network emulators and simulators that were created after 2019, which was the last time I did a broad survey of available simulation tools.</p>
<p>I found seven tools that were new to me, and list them all below. Most are related to the emulation of wireless networks and core networks, which is very interesting to me because I could not find emulators for these types of networks back in 2019.</p>
<h4>Colosseum</h4>
<p><a href="https://www.northeastern.edu/colosseum/">Colosseum</a> provides open-source wireless software for <a href="https://docs.srsran.com/en/latest/">wireless network emulation</a>. The software appears to be based on standard PC hardware and radios. I wonder if one can emulate the radios and build a completely virtual lab, maybe by combining it with <a href="https://openrangym.com/ran-frameworks/ns-o-ran">ns-O-RAN</a> or <a href="https://wiki.gnuradio.org/index.php?title=What_Is_GNU_Radio">GNUradio</a>.</p>
<p>This project looks interesting to me because it seems to have open-source versions of key components in wireless RAN and Core networks. The project is made up of many different sub-projects. <a href="https://github.com/srsran/srsRAN">srsRAN 22.10</a> was released in November 2022.</p>
<h4>Cooja</h4>
<p>The <a href="https://docs.contiki-ng.org/en/develop/doc/tutorials/Running-Contiki-NG-in-Cooja.html">Cooja IoT network emulator</a> is part of the new <a href="https://www.contiki-ng.org/">Contiki-ng</a> project. Cooja enables fine-grained simulation/emulation of IoT networks that use the Contiki-NG IOT operating system. The <a href="https://gitter.im/contiki-ng">Contiki-NG forum</a> is very active, with most questions receiving a reply. Cooja has not yet had an official release but the most recent <a href="https://github.com/contiki-ng/cooja/pulls?q=is%3Apr+is%3Aclosed">pull requests were merged</a> in February 2023.</p>
<h4>CrowNet</h4>
<p><a href="https://github.com/roVer-HM/crownet">CrowNet</a> is an open-source simulation environment which models pedestrians using wireless communication. It can be used to evaluate pedestrian communication in urban and rural environments. It is based on Omnet++. Development is active. <a href="https://github.com/roVer-HM/crownet/releases/tag/v0.9.0">Version 0.9.0</a> was released in May, 2022.</p>
<h4>CupCarbon</h4>
<p><a href="http://cupcarbon.com/">CupCarbon</a> simulates wireless networks in cities and <a href="https://www.opensourceforu.com/2019/09/simulating-smart-cities-with-cupcarbon/">integrates data</a> from <a href="https://www.openstreetmap.org/">OpenStreetMap</a>. The code is available on <a href="https://github.com/bounceur/CupCarbon">GitHub</a> but there is no license information and there has been no official release, although some of the recent commit refers to Version 5.2.</p>
<h4>Meshtasticator</h4>
<p><a href="https://github.com/GUVWAF/Meshtasticator">Meshtasticator</a> is an emulator for Meshtastic software. <a href="https://meshtastic.org/">Meshtastic</a> is a project that enables you to use inexpensive LoRa radios as a long range off-grid communication platform in areas without existing or reliable communications infrastructure. This project is 100% community driven and open source! <sup id="fnref-5706-3"><a href="#fn-5706-3" title="Read footnote.">4</a></sup> Meshtasticator enables you to emulate the operation of a network of Meshtastic devices communicating with teach other over LoRa radio. It is actively being developed. There is no tagged release but GitHub pull requests have been merged as recently as February 2023.</p>
<h4>MimicNet</h4>
<p><a href="https://github.com/eniac/MimicNet">MimicNet</a> is a network simulator that uses machine learning to estimate the performance of large data centre networks. It was released in July 2019 but has had no updates since then. MimicNet is the result of a research project and, now that the <a href="https://dl.acm.org/doi/10.1145/3452296.3472926">paper</a> is published, the project appears to be in maintenance mode. Developers still respond to issues and the last commit was in July 2022.</p>
<h4>Tinet</h4>
<p><a href="https://github.com/tinynetwork/tinet">Tinet</a>, or <em>Tiny Network</em>,  is another container-based network emulator that has a few good scenarios described in the <em>examples</em> folder in its repository.  It is intended to be a simple tool that takes a YAML config file as input and generates a shell script to construct virtual network. <a href="https://github.com/tinynetwork/tinet/releases/tag/v0.0.2">Version 0.0.2</a> was released in July 2020 but <a href="https://github.com/tinynetwork/tinet">development has continued</a> since then, with GitHub pull requests being merged as recently as January 2023</p>
<h3>Removed from my list</h3>
<p>I removed two projects from my list of network emulators and simulators.</p>
<p><a href="https://github.com/nre-learning/antidote">Antidote</a> and <a href="https://github.com/nre-learning/nrelabs-docs">NRE Labs</a> are retired. See the <a href="https://nrelabs.io/2021/12/goodbye-for-now/">announcement on the NRE Labs site</a></p>
<p><a href="https://github.com/Juniper/wistar">Wistar</a> seems to have been abandoned. There have been no updates in four years and no activity in the <a href="https://wistar-vtm.slack.com/">Wistar Slack channel</a></p>
<h3>Conclusion</h3>
<p>I refreshed my list of network emulators and simulators. I now have twenty projects on my active list. I found seven new projects that I will look at in the future and determine if any should be added to my list. I removed two projects from my list.</p>

					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How I Made a Heap Overflow in Curl (287 pts)]]></title>
            <link>https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/</link>
            <guid>37841496</guid>
            <pubDate>Wed, 11 Oct 2023 06:12:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/">https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/</a>, See on <a href="https://news.ycombinator.com/item?id=37841496">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>In association with the release of <a href="https://daniel.haxx.se/blog/2023/10/11/curl-8-4-0/" data-type="post" data-id="23241">curl 8.4.0</a>, we publish a security advisory and all the details for <a href="https://curl.se/docs/CVE-2023-38545.html">CVE-2023-38545</a>. This problem is the worst security problem found in curl in a long time. We set it to severity <strong>HIGH</strong>.</p>



<p>While the advisory contains all the necessary details. I figured I would use a few additional words and expand the explanations for anyone who cares to understand how this flaw works and how it happened.</p>



<h2>Background</h2>



<p>curl has supported <a href="https://en.wikipedia.org/wiki/SOCKS">SOCKS5</a> since <a href="https://github.com/curl/curl/commit/8aa3f143035ad982acb6e596a8653ac41a7860cc">August 2002</a>.</p>



<p>SOCKS5 is a proxy protocol. It is a rather simple protocol for setting up network communication via a dedicated “middle man”. The protocol is for example typically used when setting up communication to get done over Tor but also for accessing Internet from within organizations and companies.</p>



<p>SOCKS5 has two different host name resolver modes.  Either the client resolves the host name <em>locally</em> and passes on the destination as a resolved address, or the client passes on the entire host name to the proxy and lets the proxy itself resolve the host <em>remotely</em>.</p>



<p>In early 2020 I assigned myself an old long-standing curl issue: to convert the function that connects to a SOCKS5 proxy from a blocking call into a non-blocking state machine. This is for example much noticeable when an application performs a large amount of parallel transfers that all go over SOCKS5.</p>



<p>On February 14 2020 I landed the <a href="https://github.com/curl/curl/commit/4a4b63daaa">main commit for this</a> change in master. It shipped in 7.69.0 as the first release featuring this enhancement. And by extension also the first release  vulnerable to CVE-2023-38545.</p>



<h2>A less wise decision</h2>



<p>The state machine is called repeatedly when there is more network data to work on until it is done: when the connection is established.</p>



<p>At the top of the function I made <a href="https://github.com/curl/curl/blob/d1b0317f9b3e4535fd9006b1faab41cbfa912753/lib/socks.c#L573">this</a>:</p>



<pre>bool socks5_resolve_local =
  (proxytype == CURLPROXY_SOCKS5) ? TRUE : FALSE;</pre>



<p>This boolean variable holds information about whether curl should resolve the host or just pass on the name to the proxy. This assignment is done at the top and thus for every invocation while the state machine is running.</p>



<p>The state machine starts in the INIT state, in which <a href="https://github.com/curl/curl/blob/d1b0317f9b3e4535fd9006b1faab41cbfa912753/lib/socks.c#L589-L593">the main bug</a> for today’s story time lies. The flaw is inherited from the function from before it was turned into a state-machine.</p>



<pre>if(!socks5_resolve_local &amp;&amp; hostname_len &gt; 255) {
  socks5_resolve_local = TRUE;
}</pre>



<p>SOCKS5 allows the host name field to be up to 255 bytes long, meaning a SOCKS5 proxy cannot resolve a longer host name. On finding a too long host name. the curl code  makes the bad decision to instead switch over to local resolve mode. It sets the local variable for that purpose to TRUE. (This condition is a leftover from code added ages ago. I think it was downright wrong to switch mode like this, since the user asked for remote resolve curl should stick to that or fail. It is not even likely to work to just switch, even in “good” situations.)</p>



<p>The state machine then switches state and continues.</p>



<h2>The issue triggers</h2>



<p>If the state machine cannot continue because it has no more data to work with, like if the SOCKS5 server is not fast enough, it returns. It gets called again when there is data available to continue working on. Moments later.</p>



<p>But now, look at the local variable <strong>socks5_resolve_local</strong> at the top of the function again. It again gets set to a value depending on proxy mode – <em>not remembering the changed value because of the too long host name</em>. Now it again holds a value that says the proxy should resolve the name remotely. But the name is too long…</p>



<p>curl builds a protocol frame in a memory buffer, and it copies the destination to that buffer. Since the code wrongly thinks it should pass on the host name, even though the host name is too long to fit, the memory copy can overflow the allocated target buffer. Of course depending on the length of the host name and the size of the target buffer.</p>



<h2>Target buffer</h2>



<p>The allocated memory area curl uses to build the protocol frame in to send to the proxy, is the same as the regular download buffer. It is simply reused for this purpose before the transfer starts. The download buffer is 16kB by default but can also be set to use a different size at the request of the application. The curl tool sets the buffer size to 100kB. The minimum accepted size is 1024 bytes.</p>



<p>If the buffer size is set smaller than 65541 bytes this overflow is possible. The smaller the size, the larger the possible overflow. </p>



<h2>Host name length</h2>



<p>A host name in a URL has no real size limit, but libcurl’s URL parser refuses to accept names longer than 65535 bytes. DNS only accepts host names up 253 bytes. So, a legitimate name that is longer than 253 bytes is unusual. A real name that is longer than 1024 is virtually unheard of.</p>



<p>Thus it pretty much requires a malicious actor to feed a super-long host name into this equation to trigger this flaw. To use it in an attack. The name needs to be longer than the target buffer to make the memory copy overwrite heap memory.</p>



<h2>Host name contents</h2>



<p>The host name field of a URL can only contain a subset of octets. A range of byte values are plain invalid and would cause the URL parser to reject it. If libcurl is built to use an IDN library, that one might also reject invalid host names. This bug can therefore only trigger if the right set of bytes are used in the host name.</p>



<h2>Attack</h2>



<p>An attacker that controls an HTTPS server that a libcurl using client accesses over a SOCKS5 proxy (using the proxy-resolver-mode) can make it return a crafted redirect to the application via a HTTP 30x response.</p>



<p>Such a 30x redirect would then contain a Location: header in the style of:</p>



<pre>Location: https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/</pre>



<p>… where the host name is longer than 16kB and up to 64kB</p>



<p>If the libcurl using client has automatic redirect-following enabled, and the SOCKS5 proxy is “slow enough” to trigger the local variable bug, it will copy the crafted host name into the too small allocated buffer and into the adjacent heap memory.</p>



<p>A heap buffer overflow has then occurred.</p>



<h2>The fix</h2>



<p>curl should <em>not</em> switch mode from remote resolve to local resolve due to too long host name. It should rather return an error and starting in curl 8.4.0, it does.</p>



<p>We now also have a dedicated test case for this scenario.</p>



<h2>Credits</h2>



<p>This issue was reported, analyzed and patched by Jay Satiro.</p>



<p>This is the largest curl bug-bounty paid to date:  <strong>4,660 USD</strong> (plus 1,165 USD to the curl project, as per <a href="https://hackerone.com/ibb?type=team">IBB policy</a>)</p>


<div>
<figure><a href="https://daniel.haxx.se/blog/wp-content/uploads/2023/10/dilbert-minivan.png"><img decoding="async" width="1200" height="364" src="https://daniel.haxx.se/blog/wp-content/uploads/2023/10/dilbert-minivan.png" alt=""></a><figcaption>Classic related Dilbert strip. The original URL seems to no longer be available.</figcaption></figure></div>


<h2>Rewrite it?</h2>



<p>Yes, this family of flaws would have been impossible if curl had been written in a memory-safe language instead of C, but porting curl to another language is not on the agenda. I am sure the news about this vulnerability will trigger a new flood of questions about and calls for that and I can sigh, roll my eyes and try to answer this again.</p>



<p>The only approach in that direction I consider viable and sensible is to:</p>



<ol>
<li>allow, use and support more dependencies written in memory-safe languages and</li>



<li>potentially and gradually replace parts of curl piecemeal, like with the introduction of <a href="https://daniel.haxx.se/blog/2020/10/09/rust-in-curl-with-hyper/" data-type="post" data-id="14663">hyper</a>.</li>
</ol>



<p>Such development is however currently happening in a near glacial speed and shows with painful clarity the challenges involved. curl will remain written in C for the foreseeable future.</p>



<p>Everyone not happy about this are of course welcome to roll up their sleeves and get working.</p>



<p>Including the latest two CVEs reported for curl 8.4.0, the accumulated total says that <strong>41%</strong> of the security vulnerabilities ever found in curl would likely not have happened should we have used a memory-safe language. But also: the rust language was not even a possibility for practical use for this purpose during the time in which we introduced maybe the first 80% of the C related problems.</p>



<h2>It burns in my soul</h2>



<p>Reading the code now it is impossible not to see the bug. Yes, it truly aches having to accept the fact that I did this mistake without noticing and that the flaw then remained undiscovered in code for 1315 days. I apologize. I am but a human.</p>



<p>It could have been detected with a better set of tests. We repeatedly run several static code analyzers on the code and none of them have spotted any problems in this function.</p>



<p>In hindsight, shipping a heap overflow in code installed in over twenty billion instances is not an experience I would recommend.</p>



<h2>Behind the scenes</h2>



<p>To learn how this flaw was reported and we worked on the issue before it was made public. Go check the Hackerone report (will be made public asap).</p>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["MP3 is dead" missed the real, much better story (2017) (109 pts)]]></title>
            <link>https://marco.org/2017/05/15/mp3-isnt-dead</link>
            <guid>37841363</guid>
            <pubDate>Wed, 11 Oct 2023 05:47:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://marco.org/2017/05/15/mp3-isnt-dead">https://marco.org/2017/05/15/mp3-isnt-dead</a>, See on <a href="https://news.ycombinator.com/item?id=37841363">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
                        <header>
                                                            <h2>
                                    <a href="https://marco.org/2017/05/15/mp3-isnt-dead">“MP3 is dead” missed the real, much better story</a>
                                                                    </h2>
                            
                            <p>
                                <time datetime="2017-05-15T22:45:43-04:00" pubdate="pubdate">May 15, 2017</time>
                                <a title="Permalink" href="https://marco.org/2017/05/15/mp3-isnt-dead"><span>∞</span><span>https://marco.org/2017/05/15/mp3-isnt-dead</span></a>
                            </p>
                        </header>
                    
                        <p>If you <a href="http://gizmodo.com/developers-of-the-mp3-have-officially-killed-it-1795205540">read</a> <a href="https://www.engadget.com/2017/05/12/mp3-is-dead-long-live-aac/">the</a> <a href="http://www.npr.org/sections/therecord/2017/05/11/527829909/the-mp3-is-officially-dead-according-to-its-creators">news</a>, you may think the MP3 file format was recently officially “killed” somehow, and any remaining MP3 holdouts should all move to AAC now. These are all simple rewrites of
<a href="https://www.iis.fraunhofer.de/en/ff/amm/prod/audiocodec/audiocodecs/mp3.html">Fraunhofer IIS’ announcement</a> that they’re terminating the MP3 patent-licensing program.</p>

<p><a href="https://512pixels.net/2017/05/the-mp3-isnt-dead/">Very</a> <a href="https://sixcolors.com/post/2017/05/long-live-the-mp3/">few</a> <a href="https://motherboard.vice.com/en_us/article/mp3-is-not-dead">people</a> got it right. The others missed <a href="https://en.wikipedia.org/wiki/MP3#Licensing.2C_ownership_and_legislation">what happened last month</a>:</p>

<blockquote>
  <p>If the longest-running patent mentioned in the aforementioned references is taken as a measure, then <strong>the MP3 technology became patent-free in the United States on 16 April 2017</strong> when U.S. Patent 6,009,399, held by and administered by Technicolor, expired.</p>
</blockquote>

<p>MP3 is no less alive now than it was last month or will be next year — the last known MP3 patents have simply expired.</p>

<p>So while there’s a debate to be had — in a moment — about whether MP3 should still be used today, Fraunhofer’s announcement has nothing to do with that, and is simply the ending of its patent-licensing program (because the patents have all expired) and a suggestion that we move to a newer, <a href="https://www.iis.fraunhofer.de/en/ff/amm/prod/audiocodec/audiocodecs/aaclc.html">still-patented</a> format.</p>

<h3>Why still use MP3 when newer, better formats exist?</h3>

<p>MP3 is very old, but it’s the same age as <a href="https://en.wikipedia.org/wiki/JPEG">JPEG</a>, which has also long since been surpassed in quality by <a href="https://en.wikipedia.org/wiki/JPEG_2000">newer</a> <a href="https://en.wikipedia.org/wiki/WebP">formats</a>. JPEG is still ubiquitous not because Engadget forgot to declare its death, but because it’s good enough and supported everywhere, making it the most <em>pragmatic</em> choice most of the time.<sup id="fnref:pFcz0p5c0png"><a href="#fn:pFcz0p5c0png" rel="footnote">1</a></sup></p>

<p>AAC and other newer audio codecs can produce better quality than MP3, but the difference is <a href="http://opus-codec.org/comparison/">only significant at low bitrates</a>. At about 128 kbps or greater, the differences between MP3 and other codecs are very unlikely to be noticed, so it isn’t meaningfully better for personal music collections. For new music, get AAC if you want, but it’s not worth spending any time replacing MP3s you already have.</p>

<p>AAC makes a lot of sense for low- and medium-quality applications where bandwidth is extremely limited or expensive, like phone calls and music-streaming services, or as sound for video, for which it’s the most widely supported format.</p>

<p>It may seem to make sense for podcasts, but it doesn’t. Podcasters need to distribute a single file type that’s playable on the most players and devices possible, and though AAC is widely supported today, it’s <em>still</em> not as widely supported as MP3. So podcasters overwhelmingly choose MP3: among the 50 million podcast episodes in <a href="https://overcast.fm/">Overcast’s</a> database, 92% are MP3, and within the most popular 500 podcasts, 99% are MP3.</p>

<p>And AAC is also still patent-encumbered, which prevents innovation, hinders support, restricts potential uses, and imposes burdensome taxes on anything that goes near it.</p>

<p>So while AAC does offer some benefits, it also brings additional downsides and costs, and the benefits aren’t necessary or noticeable in some major common uses. Even the file-size argument for lower bitrates is less important than ever in a world of ever-increasing bandwidth and ever-higher relative uses of it.<sup id="fnref:pFcz0p5c0size"><a href="#fn:pFcz0p5c0size" rel="footnote">2</a></sup></p>

<p>Ogg Vorbis and <a href="http://opus-codec.org/comparison/">Opus</a> offer similar quality advantages as AAC with (<a href="http://daringfireball.net/2007/04/wee_bit_more_on_aac">probably</a>) no patent issues, which was necessary to provide audio options to free, open-source software and other contexts that aren’t compatible with patent licensing. But they’re not widely supported, limiting their useful applications.</p>

<p>Until a few weeks ago, there had never been an audio format that was small enough to be practical, widely supported by hardware and software, <em>and</em> unrestricted by patents, forcing <a href="http://shaver.off.net/diary/2010/01/23/html5-video-and-codecs/">difficult choices</a> and <a href="http://stackoverflow.com/questions/4923136/why-doesnt-firefox-support-the-mp3-file-format-in-audio">needless friction</a> upon the computing world. Now, at least for audio, that friction has officially ended. There’s finally a great choice without asterisks.</p>

<p><strong>MP3 is supported by everything, everywhere, and is now patent-free.</strong> There has never been another audio format as widely supported as MP3, it’s good enough for almost anything, and now, <em>over twenty years</em> since it took the world by storm, it’s finally free.</p>


                    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Spacedrive – an open source cross-platform file explorer (281 pts)]]></title>
            <link>https://github.com/spacedriveapp/spacedrive</link>
            <guid>37841013</guid>
            <pubDate>Wed, 11 Oct 2023 04:54:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/spacedriveapp/spacedrive">https://github.com/spacedriveapp/spacedrive</a>, See on <a href="https://news.ycombinator.com/item?id=37841013">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto">
   <a target="_blank" rel="noopener noreferrer" href="https://github.com/spacedriveapp/spacedrive/blob/main/packages/assets/images/AppLogo.png"><img width="150" height="150" src="https://github.com/spacedriveapp/spacedrive/raw/main/packages/assets/images/AppLogo.png" alt="Logo"></a>
  </p>
  <h2 tabindex="-1" id="user-content-spacedrive" dir="auto"><a href="#spacedrive"><b>Spacedrive</b></a></h2>
  <div dir="auto"><p>
  A file explorer from the future.
    <br>
    <a href="https://spacedrive.com/" rel="nofollow"><strong>spacedrive.com »</strong></a></p><p>
    
    <b>Download for </b>
    macOS
    ·
    Windows
    ·
    Linux
    ·
    iOS
    ·
    watchOS
    ·
    Android
    <br>
    <i>~ Links will be added once a release is available. ~</i></p></div>

Spacedrive is an open source cross-platform file manager, powered by a virtual distributed filesystem (<a href="#what-is-a-vdfs">VDFS</a>) written in Rust.
<blockquote>
<p dir="auto">UPDATE: Spacedrive is under active development, we are in the pre-alpha stage, with builds occasionally released via GitHub actions, official alpha coming soon.</p>
</blockquote>
<p dir="auto">Organize files across many devices in one place. From cloud services to offline hard drives, Spacedrive combines the storage capacity and processing power of your devices into one personal distributed cloud, that is both secure and intuitive to use.</p>
<p dir="auto">For independent creatives, hoarders and those that want to own their digital footprint, Spacedrive provides a free file management experience like no other.</p>

<h2 tabindex="-1" id="user-content-what-is-a-vdfs" dir="auto"><a href="#what-is-a-vdfs">What is a VDFS?</a></h2>
<p dir="auto">A VDFS (virtual distributed filesystem) is a filesystem designed to work across a variety of storage layers. With a uniform API to manipulate and access content across many devices, VDFS is not restricted to a single machine. It achieves this by maintaining a virtual index of all storage locations, synchronizing the database between clients in realtime. This implementation also uses <a href="https://en.wikipedia.org/wiki/Content-addressable_storage" rel="nofollow">CAS</a> (Content-addressable storage) to uniquely identify files, while keeping record of logical file paths relative to the storage locations.</p>
<p dir="auto">The first implementation of a VDFS can be found in this UC Berkeley <a href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2018/EECS-2018-29.pdf" rel="nofollow">paper</a> by Haoyuan Li. This paper describes its use for cloud computing, however the underlying concepts can be translated to open consumer software.</p>
<h2 tabindex="-1" id="user-content-motivation" dir="auto"><a href="#motivation">Motivation</a></h2>
<p dir="auto">Many of us have multiple cloud accounts, drives that aren’t backed up and data at risk of loss. We depend on cloud services like Google Photos and iCloud, but are locked in with limited capacity and almost zero interoperability between services and operating systems. Photo albums shouldn’t be stuck in a device ecosystem, or harvested for advertising data. They should be OS agnostic, permanent and personally owned. Data we create is our legacy, that will long outlive us—open source technology is the only way to ensure we retain absolute control over the data that defines our lives, at unlimited scale.</p>
<h2 tabindex="-1" id="user-content-roadmap" dir="auto"><a href="#roadmap">Roadmap</a></h2>
<p dir="auto">View a list of our planned features here: <a href="https://spacedrive.com/roadmap" rel="nofollow">spacedrive.com/roadmap</a></p>
<h2 tabindex="-1" id="user-content-developer-guide" dir="auto"><a href="#developer-guide">Developer Guide</a></h2>
<p dir="auto">Please refer to the <a href="https://github.com/spacedriveapp/spacedrive/blob/main/CONTRIBUTING.md">contributing guide</a> for how to install Spacedrive from sources.</p>
<h2 tabindex="-1" id="user-content-security-policy" dir="auto"><a href="#security-policy">Security Policy</a></h2>
<p dir="auto">Please refer to the <a href="https://github.com/spacedriveapp/spacedrive/blob/main/SECURITY.md">security policy</a> for details and information on how to responsibly report a security vulnerability or issue.</p>
<h2 tabindex="-1" id="user-content-architecture" dir="auto"><a href="#architecture">Architecture</a></h2>
<p dir="auto">This project is using what I'm calling the <strong>"PRRTT"</strong> stack (Prisma, Rust, React, TypeScript, Tauri).</p>
<ul dir="auto">
<li>Prisma on the front-end? 🤯 Made possible thanks to <a href="https://github.com/brendonovich/prisma-client-rust">prisma-client-rust</a>, developed by <a href="https://github.com/brendonovich">Brendonovich</a>. Gives us access to the powerful migration CLI in development, along with the Prisma syntax for our schema. The application bundles with the Prisma query engine and codegen for a beautiful Rust API. Our lightweight migration runner is custom built for a desktop app context.</li>
<li>Tauri allows us to create a pure Rust native OS webview, without the overhead of your average Electron app. This brings the bundle size and average memory usage down dramatically. It also contributes to a more native feel, especially on macOS due to Safari's close integration with the OS.</li>
<li>We also use <a href="https://rspc.dev/" rel="nofollow">rspc</a> which allows us to define functions in Rust and call them on the Typescript frontend in a completely typesafe manner, so no unnecessary bugs make it into production!</li>
<li>The core (<code>sdcore</code>) is written in pure Rust.</li>
</ul>
<h2 tabindex="-1" id="user-content-monorepo-structure" dir="auto"><a href="#monorepo-structure">Monorepo structure:</a></h2>
<h3 tabindex="-1" id="user-content-apps" dir="auto"><a href="#apps">Apps:</a></h3>
<ul dir="auto">
<li><code>desktop</code>: A <a href="https://tauri.studio/" rel="nofollow">Tauri</a> app.</li>
<li><code>mobile</code>: A <a href="https://reactnative.dev/" rel="nofollow">React Native</a> app.</li>
<li><code>web</code>: A <a href="https://reactjs.org/" rel="nofollow">React</a> webapp.</li>
<li><code>landing</code>: A <a href="https://reactjs.org/" rel="nofollow">React</a> app using Vite SSR &amp; Vite pages.</li>
</ul>
<h3 tabindex="-1" id="user-content-core" dir="auto"><a href="#core">Core:</a></h3>
<ul dir="auto">
<li><code>core</code>: The <a href="https://www.rust-lang.org/" rel="nofollow">Rust</a> core, referred to internally as <code>sdcore</code>. Contains filesystem, database and networking logic. Can be deployed in a variety of host applications.</li>
</ul>
<h3 tabindex="-1" id="user-content-packages" dir="auto"><a href="#packages">Packages:</a></h3>
<ul dir="auto">
<li><code>client</code>: A <a href="https://www.typescriptlang.org/" rel="nofollow">TypeScript</a> client library to handle dataflow via RPC between UI and the Rust core.</li>
<li><code>ui</code>: A <a href="https://reactjs.org/" rel="nofollow">React</a> Shared component library.</li>
<li><code>interface</code>: The complete user interface in React (used by apps <code>desktop</code>, <code>web</code> and <code>landing</code>)</li>
<li><code>config</code>: <code>eslint</code> configurations (includes <code>eslint-config-next</code>, <code>eslint-config-prettier</code> and all <code>tsconfig.json</code> configs used throughout the monorepo.</li>
<li><code>macos</code>: A <a href="https://developer.apple.com/swift/" rel="nofollow">Swift</a> Native binary for MacOS system extensions.</li>
<li><code>ios</code>: A <a href="https://developer.apple.com/swift/" rel="nofollow">Swift</a> Native binary (planned).</li>
<li><code>windows</code>: A <a href="https://docs.microsoft.com/en-us/dotnet/csharp/" rel="nofollow">C#</a> Native binary (planned).</li>
<li><code>android</code>: A <a href="https://kotlinlang.org/" rel="nofollow">Kotlin</a> Native binary (planned).</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Californians will be able to delete all personal online data in first-in-US law (124 pts)]]></title>
            <link>https://www.theguardian.com/technology/2023/oct/10/california-delete-act-signed-newsom</link>
            <guid>37840532</guid>
            <pubDate>Wed, 11 Oct 2023 03:24:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2023/oct/10/california-delete-act-signed-newsom">https://www.theguardian.com/technology/2023/oct/10/california-delete-act-signed-newsom</a>, See on <a href="https://news.ycombinator.com/item?id=37840532">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>In a victory for privacy advocates and consumers, the California governor <a href="https://www.theguardian.com/us-news/gavin-newsom" data-link-name="in body link" data-component="auto-linked-tag">Gavin Newsom</a> signed a bill that would enable residents to request that their personal information be deleted from the coffers of all the data brokers in the state.</p><p>The bill, SB 362, otherwise known as the Delete Act, was introduced in April 2023 by the state senator Josh Becker in an attempt to give Californians more control over their privacy. Californians already have a right to request their data be deleted under current state privacy laws, but it requires filing a request with each individual company.</p><p>The new bill reinforces that all data brokers must register with the California privacy protection agency, and it requires the CPPA to establish an easy and free way for Californians to request that all data brokers in the state delete their data through a single page, regardless of how they acquired that information. If data brokers don’t comply with these rules, the bill stipulates they be fined or otherwise penalized.</p><figure id="924f75b4-ac63-4e6b-b1ee-77596a07af3b" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:3,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/technology/2023/sep/13/twitter-elon-musk-takeover-ftc-order-data-security-privacy-doj-case&quot;,&quot;text&quot;:&quot;Twitter chaos after Elon Musk takeover may have violated privacy order, DoJ alleges&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;924f75b4-ac63-4e6b-b1ee-77596a07af3b&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:0}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure><p>“Governor Newsom’s signature of the Delete Act enshrines California as a leader in consumer privacy, and we are determined to restore consumers’ control over their own personal data,” said Becker. “Data brokers possess thousands of data points on each and every one of us, and they currently sell reproductive healthcare, geolocation and purchasing data to the highest bidder. The Delete Act protects our most sensitive information.”</p><p>While proponents of the bill have lauded it as a less tedious and more user-friendly way to reinforce existing California privacy laws, many advertising companies have argued it would undermine their industry. Those companies buy and sell consumer information such as location, address, online activity and more to various clients including law enforcement.</p><p>“Absent this data, smaller enterprises will lose a critical path to reach and attract new customers, and consumers overall will have less exposure to new products and services that may interest them,” a group of ad trade bodies wrote in a letter<a href="https://www.adweek.com/programmatic/ad-trade-bodies-campaign-against-california-delete-act/" data-link-name="in body link"> first reported by Adweek</a>.</p><p>Rob Shavell, the CEO of Delete Me, a company that helps people get their personal information off various data brokers, said data brokers may have been taken by surprise by the groundswell of support for the bill because “they lobbied hard against this in creative ways with a lot of scare tactics”.</p><p>Civil liberties and privacy advocates have long called for stronger regulations around the data broker industry, citing concerns about the lack of transparency into when and how consumer data is sold and shared and the ability for law enforcement to skip subpoenas or warrants by simply buying otherwise inaccessible personal information from a private company. The Delete Act “will improve everyone’s privacy rights and make California’s consumer privacy laws more user-friendly, while also strengthening current California law that requires data brokers to register with the state”, said Hayley Tsukayama, the associate director of legislative activism at digital rights group the Electronic Frontier Foundation.</p><p>In the past, as the <a href="https://www.theguardian.com/us-news/2022/apr/19/us-immigration-agency-data-loophole-information-deportation-targets" data-link-name="in body link">Guardian first reported</a>, agencies like the US Immigration and Customs Enforcement Agency have used data brokers to get around local laws such as sanctuary policies that prohibit state or city agencies from aiding with immigration investigations. One of the most popular global Muslim prayer apps was also revealed to have sold location information to a data broker, which in turn worked with military defense contractors, prompting mass calls to delete and stop using the app.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-10">skip past newsletter promotion</a><p id="EmailSignup-skip-link-10" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>However, though the bill is seen in large part as a success, Shavell says its limitations lie in the exemptions the author of the bill made for some companies Delete Me would otherwise consider data brokers because they “certainly have a lot of information about citizens”.</p><p>The state will have until 2026 to implement the Delete Act, but many still have questions about what mechanisms agencies will use to enforce the new rules as passed.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Log is the "Pro" in iPhone 15 Pro (890 pts)]]></title>
            <link>https://prolost.com/blog/applelog</link>
            <guid>37840503</guid>
            <pubDate>Wed, 11 Oct 2023 03:18:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://prolost.com/blog/applelog">https://prolost.com/blog/applelog</a>, See on <a href="https://news.ycombinator.com/item?id=37840503">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-content-field="main-content" id="pageWrapper" role="main">
        <article id="article-651e3e1646f771502811fce1" data-item-id="651e3e1646f771502811fce1">

  <!--SPECIAL CONTENT-->

  

  
  <!--POST HEADER-->
    
  <header>
    
    
  </header>
  
  
  <!--POST BODY-->

  <div data-layout-label="Post Body" data-type="item" data-updated-on="1696480871480" id="item-651e3e1646f771502811fce1"><div data-block-json="{&quot;thumbnailUrl&quot;:&quot;http://i.ytimg.com/vi/9SsX-mbflJw/hqdefault.jpg&quot;,&quot;width&quot;:854,&quot;height&quot;:480,&quot;hSize&quot;:null,&quot;html&quot;:&quot;<iframe class=\&quot;embedly-embed\&quot; src=\&quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F9SsX-mbflJw&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D9SsX-mbflJw&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F9SsX-mbflJw%2Fhqdefault.jpg&amp;key=61d05c9d54e8455ea7a9677c366be814&amp;type=text%2Fhtml&amp;schema=youtube\&quot; width=\&quot;854\&quot; height=\&quot;480\&quot; scrolling=\&quot;no\&quot; title=\&quot;YouTube embed\&quot; frameborder=\&quot;0\&quot; allow=\&quot;autoplay; fullscreen; encrypted-media; picture-in-picture;\&quot; allowfullscreen=\&quot;true\&quot;></iframe>&quot;,&quot;url&quot;:&quot;https://youtu.be/9SsX-mbflJw&quot;,&quot;resolvedBy&quot;:&quot;youtube&quot;,&quot;floatDir&quot;:null,&quot;providerName&quot;:&quot;YouTube&quot;,&quot;customThumbEnabled&quot;:false,&quot;description&quot;:{&quot;html&quot;:&quot;<p class=\&quot;\&quot; data-rte-preserve-empty=\&quot;true\&quot; style=\&quot;white-space:pre-wrap;\&quot;></p>&quot;}}" data-block-type="22" id="block-yui_3_17_2_1_1696954910634_45815"><p>




  <iframe src="//www.youtube.com/embed/9SsX-mbflJw?wmode=opaque" height="480" width="854" scrolling="no" frameborder="0" allowfullscreen=""></iframe>

</p></div><div data-block-type="44" id="block-4cd553b943447cec9443"><h3 id="and-i-ve-got-some-free-luts-for-you-">And I've got some free LUTs for you.</h3>
<p>The <a href="https://www.apple.com/iphone-15-pro/">iPhone 15 Pro and Pro Max</a> feature <em>log</em> video recording. This is a big deal, but there’s already some confusion about it. Where consumer devices and pro video overlap, that’s where the Prolost Signal gleams brightest in the night sky. So let’s get to work.</p>
<p>First, what exactly is log? It’s short for logarithmic encoding, which is a math thing, but what does it mean to videographers?</p>
<p>It really boils down to two things: Log is <em><a href="https://prolost.com/flat">flat</a>,</em> and log is <em>known.</em></p>
<h2 id="flat-is-good-and-log-is-the-best-flat">Flat is Good, and Log is the Best Flat</h2>
<p>Standard iPhone video is designed to look <em>good.</em> A very specific kind of good that comes from lots of contrast, punchy, saturated colors, and ample detail in both highlights and shadows.</p>

</div><div data-block-json="{&quot;existingGallery&quot;:null,&quot;hSize&quot;:null,&quot;newWindow&quot;:false,&quot;floatDir&quot;:null,&quot;methodOption&quot;:&quot;transient&quot;,&quot;aspectRatio&quot;:null,&quot;auto-crop&quot;:true,&quot;blockAnimation&quot;:&quot;none&quot;,&quot;collectionId&quot;:&quot;6524c68b87131f547b412a65&quot;,&quot;design&quot;:&quot;stacked&quot;,&quot;show-meta&quot;:true,&quot;show-meta-basic&quot;:false,&quot;show-meta-only-title&quot;:false,&quot;show-meta-only-description&quot;:false,&quot;square-thumbs&quot;:true,&quot;vSize&quot;:null,&quot;transientGalleryId&quot;:&quot;6524c68b87131f547b412a65&quot;}" data-block-type="8" id="block-yui_3_17_2_1_1696906985295_9078">
    
      
        
          <p><img data-src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-345H7BK0UD7LL34NI3I0/blogStills_01_lognotlog_00001.jpg" data-image="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-345H7BK0UD7LL34NI3I0/blogStills_01_lognotlog_00001.jpg" data-image-dimensions="3840x2160" data-image-focal-point="0.5,0.5" alt="blogStills_01_lognotlog_00001.jpg" data-load="false" data-image-id="6524c68bb5ef5e4a88bea331" data-type="image" src="https://prolost.com/blog/blogStills_01_lognotlog_00001.jpg">
            
          </p>
        

        

        
      
        
          <p><img data-src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-1BH86JRDWL3BIO2QISOS/blogStills_01_lognotlog_00002.jpg" data-image="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-1BH86JRDWL3BIO2QISOS/blogStills_01_lognotlog_00002.jpg" data-image-dimensions="3840x2160" data-image-focal-point="0.5,0.5" alt="blogStills_01_lognotlog_00002.jpg" data-load="false" data-image-id="6524c68c2f23640aac1c83c8" data-type="image" src="https://prolost.com/blog/blogStills_01_lognotlog_00002.jpg">
            
          </p>
        

        

        
      
    
  </div><div data-block-type="44" id="block-yui_3_17_2_1_1696906985295_9139"><p>Log video looks <a href="https://prolost.com/flat">flat</a>. All the dynamic range and detail are there, but gone is that candy-coated punch. To make log footage look right, you have to color manage it in some way, often with a Look-Up Table, or “LUT.”</p>
<p>A LUT is just a color adjustment baked into a single file. Some LUTs add creative looks, others are more utilitarian, converting images from one color space to another — like from log to video.</p>
<p>If all we’re going to do with log footage is apply a LUT to make it look normal, what’s the big deal? Why add this extra step?</p>
<p>The power log gives us lies within that extra step, because:</p>
<ol>
<li>You pick the LUT! So log footage can look however you want. Sure, you can apply LUTs or color grading to regular iPhone footage, but the problem is it already has its own very punchy look baked in. With log you can pick the look that works for you, and even more importantly...</li>
<li>You can color grade <em>under</em> the LUT. So you can adjust the color of the footage in a natural and organic way.</li>
<li>And this workflow matches what you’re doing with your digital cinema camera already, so you can color-manage this footage right into a timeline with your Canon, Sony, Arri, or whatever else you’ve got.</li>
</ol>

</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696906985295_3180">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>Log footage from iPhone 15 Pro Max with various LUTs and looks applied.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696906985295_3524"><h2 id="you-didn-t-explain-what-log-is-though">You Didn’t Explain What Log is Though</h2>
<p>But what is the <em>log</em> of log? What does this math concept mean to me?</p>
<p>The essence of log (in its purest form) is that <a href="https://prolost.com/log">every stop of light gets the same amount of data</a>. Ten-bit footage holds 1,024 shades of gray. To represent 12 stops of light values (or dynamic range), that means each stop gets about 85 shades of gray.</p>
<p>This means highlights and shadows all have detail that you can access for basic color corrections like exposure and white balance. You can recover some shadow and highlight detail, and make substantial color adjustments that look natural.</p>

</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696909033437_5044">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>In this hypothetical example, we spread 12 stops of light evenly over 1,024 shades of gray.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696909033437_5382"><h2 id="in-log-we-offset">In Log We Offset</h2><p>It also means that these basic color adjustments are dead simple to perform. Since each stop (in our semi-made-up example) is 85 shades of gray, <strong>adding 85 to the value of each RGB pixel is the same as increasing the exposure by one stop.</strong></p><p>We call this adding and subtracting <em>Offset</em>, and Davinci Resolve has a whole color wheel devoted to it. In Magic Bullet Looks, the <strong>Global</strong> color wheel in the <strong>4-Way Color Tool</strong> does an offset adjustment in ACES log, even if your source footage isn’t log. With log footage, Offset is the most natural way to correct, tint, or re-expose your footage.</p>
</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_248572"><p>These kinds of simple corrections look terrible when done <em>after</em> the LUT, or to video-space footage, but when you do them to the log pixels <em>before</em> the LUT, the results look so natural, it almost appears that they happened in-camera. This makes it much easier to achieve consistent color across shots, as they all get the same last step. This is why it’s such a common workflow to put Magic Bullet Looks, for example, in an adjustment layer over all the shots in a sequence.</p><h2 id="sun-dog">Sun Dog</h2><p>Log corrections look natural in part because the simple color-grading math lines up with how light works. They also look great because of the available dynamic range.</p><p>If I try to recover some of the detail in my dog’s sun-lit fur, this iPhone 12 footage rapidly falls apart. The iPhone added contrast, and in doing so smooshed the white values into a uniform overexposed patch. Nearby colors are posterized, and the clipped highlights give the clip away as consumer video.</p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696911071259_132764">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png" data-image="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png" data-image-dimensions="796x538" data-image-focal-point="0.5,0.5" alt="" data-load="false" src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png" width="796" height="538" sizes="100vw" srcset="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">
                
            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>Source: Kodak</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696909033437_18751"><p>But with this iPhone 15 Pro Max footage shot in Apple Log, I can recover all the detail — or just let it overexpose gracefully into this ACES output transform, for a smooth, film-like look. This soft built-in highlight rolloff is called a “shoulder” in film, describing the upper part of the classic s-curve. A nice shoulder for your highlights is a big part of what makes footage look “pro” — especially when your grading happens underneath it.</p><p>Because log footage uses the same amount of data for every stop, it’s not the most efficient way to store an image. So log is best when it’s at a high bit depth and data rate. Apple Log is only available when recording in ProRes, which is typically 10 bits-per-channel. Apple added ProRes with the iPhone 13, but without log it wasn’t very “pro,” and I almost never used it. The baked-in look made grading difficult, so there was no reason to take on the burden of the massive files.</p><h2 id="heavy-is-the-prores-dangly-is-the-drive">Heavy is the ProRes, Dangly is the Drive</h2>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696909033437_42430">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>Apple and Samsung, sitting in a tree.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696909033437_42768"><p>Yes, massive. 4K ProRes files are <em>big,</em> and recording them to your phone can create some weird workflow challenges. Apple shocked us all by addressing this head-on: The iPhone 15 line charges via USB-C instead of Lightning, and this standard USB port can do a <em>lot.</em> When you connect a <a href="https://amzn.to/45jdDyM">USB-C drive</a>, your ProRes Log video automatically gets recorded there instead of to the phone’s photo library.</p>
<p>Recording this way also unlocks 4K 60fps recording in Apple’s Camera app, enabling some gorgeous slow motion effects when played back at 24 fps.</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696910508558_9296"><p>Apple has gone from refusing to sell you a pro laptop with an SD card reader to making a camera that records to external media. We’ll all be looking for iPhone rigs with places to strap these little drives.</p></div><div data-block-type="44" id="block-yui_3_17_2_1_1696906666972_113970"><p><h2 id="log-is-half-baked">Log is Half Baked</h2>
</p></div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696911071259_148064">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>In this unprocessed log clip, the purple light reflections appear over-saturated.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_150413">
<p>With its high bit depth and dynamic range, <a href="https://prolost.com/raw">log footage has many of the benefits of raw</a>. But Apple Log is not raw, and not even “straight off the sensor.” It’s still heavily processed — denoised, tone-mapped, and color adjusted. You can see this big time if you shoot bright, colorful lights. Even though Apple has turned their sharpening and tone mapping way down for Apple Log, there’s still some of that telltale overdriving of super-bright, super-saturated colors.</p>
<p>It’s also important to note that log does not mean you’ll never overexpose. It’s still an iPhone with a tiny sensor, so don’t expect the dynamic range of an Arri Alexa or a Sony Venice.</p><h2 id="blackmagic-camera-app">Blackmagic Camera App</h2><p>The other way Apple doesn’t quite live up to the “pro” promise of log is by not offering much manual control in their camera app — and that’s totally fine. Because all the control you could want is found in the wonderful new <a href="https://apps.apple.com/us/app/blackmagic-camera/id6449580241">Blackmagic Camera app</a>. It’s a free download, presumably meant as a gateway drug to Blackmagic’s paid products and services. It’s a terrific app with a gorgeous UI and pro features like a live histogram, display LUTs, HDMI out via USB-C, and choices of different ProRes formats.</p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696911071259_9620">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>Note that the shutter speed is set in degrees! What a time to be alive.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_9958"><h2 id="vfx-log">VFX Log</h2>
<p>The flatness of log gives you the power to make it your own in the grade. The other huge advantage of log is that it is <em>known,</em> meaning it’s possible to convert it to and from various color spaces accurately. This is a huge advantage for VFX artists and colorists alike. Colorists can convert Apple Log to whatever color space they like to work in, and accurately incorporate iPhone footage into any color timeline. VFX artists can convert their log footage to scene-refererred linear and create accurate composites that include color-matched 3D renders.</p>
<p>In this example, I converted the footage to EXR and camera-mapped it onto simple geometry in <a href="https://www.maxon.net/en/cinema-4d">Cinema 4D</a>. In <a href="https://www.maxon.net/en/redshift">Redshift</a>, those HDR pixel values cast light and reflections onto the 3D model, doing 90% of my lighting for me:</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_12278"><h2 id="aces-compatible-">ACES Compatible?</h2>
<p>Apple’s log format being <em>known</em> is all it takes for compatibility with <a href="https://prolost.com/blog/aces">ACES</a>, the Academy of Motion Picture Arts and Sciences color management system. But it’s important to note that Apple Log does not match any pre-existing ACES format.</p>
<p>The log curve is Apple’s own, which they’ve <a href="https://developer.apple.com/download/all/">documented</a>, and it’s already available in DaVinci Resolve. In the CST node, choose <strong>Apple Log</strong> for the <strong>Input Gamma</strong>, but choose <strong>Rec. 2020</strong> for the <strong>Input Color Space</strong>, because Apple Log uses the Rec. 2020 primaries.</p>
<p>With these as your inputs, you can either convert to Rec. 709 video, or to an ACES format like ACEScc — which is also log, but a different log.</p>
<p>Remember when I said log uses the same amount of data for each stop? That’s not entirely true with Apple Log. The darker stops are compressed a bit, to control noise. If you’re familiar with ACES, this makes Apple Log more similar to <strong>ACEScct</strong> than to <strong>ACEScc</strong>. Many colorists prefer working with ACEScct because of the way it handles shadows, so Apple is in good company here.</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_26408"><p>Along with documenting their unique transfer function, Apple has <a href="https://developer.apple.com/download/all/">supplied a LUT</a> for converting from Apple Log to Rec. 709 video. Apple’s LUT is very rich in contrast and saturation. This is useful if your goal is to match the look of non-log iPhone footage, but I found it too colorful for some applications, so I created my own LUTs that roll highlight colors off more naturally.</p></div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_107050"><p>While Resolve and Final Cut Pro both offer built-in support for Apple Log, some other tools don’t yet. So I also made LUTs for converting Apple Log to <strong>ACEScc</strong> and <strong>ACEScct</strong> — the ACES log formats designed for creative color work. With these LUTs, you can incorporate Apple Log footage into an existing ACES workflow without losing any color fidelity.</p>
<p>To some, true ACES compatibility would require Apple Log’s inclusion in widely distributed ACES OCIO configs. Until that happens, Apple Log is ACES-compatible as long as you have a color-space conversion bridge — something like either the CST node in Resolve or the Prolost Apple Log LUTs, available below as a free download.</p>
<h2 id="magic-bullet-magic">Magic Bullet Magic</h2>
<p>With this workflow, I was able to run some iPhone 15 Pro Max footage through the ACES-compatible Magic Bullet Looks, using our new Diffusion filters modeled after real-world filters from Tiffen and others. Along with some basic grading, I also added some film halation and grain. The results have a rich, cinematic look that in no way betrays that it was shot on a consumer phone.</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_35573"><h2 id="rebel-without-an-excuse">Rebel Without an Excuse</h2><p>The argument about whether it makes any sense to shoot professional video on a consumer device dates back to before my book, <em><a href="https://amzn.to/3LNi66c">The DV Rebel’s Guide</a>.</em> I love small, accessible cameras that allow us to <a href="https://prolost.com/blog/2008/11/23/the-bourne-inspiration.html">shoot unnoticed in public places</a>, but for years I discouraged the use of phones for this, because the ability to control and author the image just wasn’t there.</p><p>Now that the iPhone can shoot log, is the best camera the one you literally always have with you, or, you know, an actual good camera? The iPhone 15 Pro Max is going to tempt you to shoot real stuff with your telephone, and for the first time ever, I’ll be right there with you, thanks to log.</p>
</div></div>
      
  <!--POST FOOTER-->
    
  
  

</article>




<!--PAGINATION-->
  

  




<!-- COMMENTS -->


      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pantographia: 1799 specimen book of all the known alphabets (120 pts)]]></title>
            <link>https://publicdomainreview.org/collection/pantographia/</link>
            <guid>37840497</guid>
            <pubDate>Wed, 11 Oct 2023 03:17:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://publicdomainreview.org/collection/pantographia/">https://publicdomainreview.org/collection/pantographia/</a>, See on <a href="https://news.ycombinator.com/item?id=37840497">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><a href="#p-0-0"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>There's a radical tradition in Jewish mysticism that thinks we are missing a letter of the alphabet. In our current cosmic cycle, the letter is either invisible, or present to our eyes in a faulty, corrupted form. This is why the Torah contains negative logic structures — when every letter appears as it should, there will be no need for apophatic theology. In Genesis, God fragments the single language shared by all humans, scattering their humpty-dumpty tongues abroad, but in Kabbalistic thought, the Lord looks more like Raymond Queneau and his fellow Oulipo, writing a lipogram that uses every letter but one. Both cases place a profound power in putting the pieces back together again, reassembling the total in its original form. A related Jewish tradition claims the psalms are out of order to keep humans from assuming divine power: "if [the psalms] were arranged in their proper order, and any man so read them, he would be able to resurrect the dead", says the Midrash. When the Talmudic scholar Joshua ben Levi began to number these hymns differently, a booming voice from heaven intervened: “Do not rouse that which slumbers!”</p></div><div><a href="#p-0-1"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>In 1799, the same year that the Rosetta Stone was unearthed in Egypt, the type-founder Edmund Fry published <em>Pantographia</em>, his attempt to gather back together every known alphabet on earth. Containing 405 alphabet specimens from 164 languages, the book is a treasure chest for the epigraphical imagination. There are the expected alphabets that influenced the shape of Latin — Greek, Semitic, Phoenician, Etruscan — and mysterious and magical alphabets, such as the twenty variations of Chaldean, an occult writing system that has no extant original sources. (Fry reports that it may have been transmitted directly to Adam; others believe it stems from a medieval cipher, whose creators couched the shapes in antique lore.) Indigenous languages without alphabets such as “Virginian” and “Esquimaux” are given phonetic approximations in Roman characters. And Domesday, Ethiopic, Poconchi, Sclavonian, Tartaric, Walloon, and dozens of other alphabets have been arranged to spell out the Lord's Prayer. As your eyes trace the thousands of distinct kinds of line that have made meaning for humans across the world, script can indeed feel like a kind of scripture — the rudiments of spelling become an incantation, a spell. Yet there is also something mournful about <em>Pantographia</em>, especially for a modern reader. We might learn to intone and live in a few of the linguistic landscapes encrypted in these writing systems, but the rest will always remain empty runes before our eyes, from which a vital force has fled. And as languages continue to be lost each year to mute extinction, Fry's book begins to look more like a mausoleum than agora.</p></div><div><a href="#p-0-2"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>Genesis framed our fallen state as a problem of space: people can no longer unite to build towers unto heaven because they have to shout incomprehensibly across continents. Yet Fry hints in his introduction that imperial alphabets might offset this punishment. "By this happy mode of communication, distance is, as it were, annihilated, and the merchant, scholar, and statesman, become present to every purpose of utility, in the most remote regions." And like James Joyce's Stephen Dedalus, who sets up a phone call to Eden by dialing the alphabet — “Hello! Kinch here. Put me on to Edenville. Aleph, alpha: nought, nought, one” — Fry believes the study of alphabets might also solve the problem of time. Namely, questions concerning the origins of language. In a bizarre argument, he claims that alphabets must have divine origins because certain civilizations have failed to develop these phonemic systems. Written Chinese grows "more intricate and voluminous every day", but will never “terminate in so clear, so comparatively simple, an expedient, as that of alphabetical characters". But Fry also declines Pliny's "conjectures and fables” about letters being eternal, the notions of "cabalistic doctors", who believed alphabetic writing was created during the sabbath, and anyone who dare suggest that letters were breathed down to the Egyptians by their god Teuth. Instead, it all goes back to Babel, when one tongue — and presumably one alphabet, although here Fry seems unsure — shattered into uncountable quantities.</p></div><div><a href="#p-0-3"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>Aside from theological claims made by Fry in his introduction, there is also a kind of secular miracle present in this work. The sublimity of craftsmanship. To get these letters into print, Fry carved each one onto a steel punch, which could be pressed into a copper matrix for printing. It took him sixteen years, four thousand punches, and an <a href="https://blog.lib.utah.edu/book-of-the-week-pantographia/">estimated</a> ten thousand hours of labor. According to alphabet historian Johanna Drucker, Fry's <em>Pantographia</em> "provides an overview of the state of linguistic knowledge in the British Empire" and is the key transitional work between two modes of knowledge production: eclectic, antiquarian compendia and specialized, professional research. In Fry's own estimation of the project, <em>Pantographia</em> is a meeting ground, an incomplete but working commons for all those in need of a “centre of communication”.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Multifault earthquake threat for Seattle region revealed by mass tree mortality (219 pts)]]></title>
            <link>https://www.science.org/doi/10.1126/sciadv.adh4973</link>
            <guid>37839872</guid>
            <pubDate>Wed, 11 Oct 2023 01:20:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/doi/10.1126/sciadv.adh4973">https://www.science.org/doi/10.1126/sciadv.adh4973</a>, See on <a href="https://news.ycombinator.com/item?id=37839872">Hacker News</a></p>
Couldn't get https://www.science.org/doi/10.1126/sciadv.adh4973: Error: Request failed with status code 403]]></description>
        </item>
    </channel>
</rss>