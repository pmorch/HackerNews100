<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 24 Mar 2024 20:00:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[What Happens When a Fifteen Year Old Pumps and Dumps with a Net Profit of $800k? (2002) (109 pts)]]></title>
            <link>http://www.kentlaw.edu/faculty/rwarner/classes/legalaspects_ukraine/securities/case_studies/ledbed.htm</link>
            <guid>39807967</guid>
            <pubDate>Sun, 24 Mar 2024 15:52:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.kentlaw.edu/faculty/rwarner/classes/legalaspects_ukraine/securities/case_studies/ledbed.htm">http://www.kentlaw.edu/faculty/rwarner/classes/legalaspects_ukraine/securities/case_studies/ledbed.htm</a>, See on <a href="https://news.ycombinator.com/item?id=39807967">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p><b>Case Study: What Happens When a Fifteen Year Old Pumps and Dumps,
Obtaining a Net Profit of Nearly $800,000?<span>�
</span>The SEC Settles for $285,000.<o:p></o:p></b></p>



<p>Jonathan Lebed and
two of his friends came in fourth place in a stock-picking contest sponsored by
CNBC when he was just twelve years old.<span>�
</span>They had managed to turn an imaginary $10,000 into $240,000 during the
first round of the competition.<span>� </span>From
there, Lebed was able to convince his parents to invest money in the stock
market on his behalf.<span>� </span>His parents first
opened an Ameritrade account for him, and upon his mother�s decision to close
that account, his father opened an E*Trade account for him.<span>� </span>During two years of trading, Lebed made a
minimum of 27 trades, and netted nearly $800,000.<span>� </span>The SEC later investigated these 27 trades and eventually
declared eleven of them as illegal trades and forced to Lebed to pay
approximately $272,000 in fines and over $12,000 in interest.<span>� </span>In particular, these eleven trades occurred
during the five and a half month period between August 23, 1999, and February
4, 2000.<span>� </span>While Lebed never admitted or
denied the findings by the SEC, he consented to entry of the findings and the
imposition of sanctions.<a href="#_ftn1" name="_ftnref1" title=""><span><span><!--[if !supportFootnotes]-->[1]<!--[endif]--></span></span></a></p>

<p>The SEC findings
asserted that Lebed would purchase large blocks of thinly traded microcap
stocks, post between 200 and 300 messages on the Yahoo! Finance message boards,
hyping the stocks he had just purchased, and then sell all of the stocks he had
purchased, usually within twenty-four hours of said purchase.<span>� </span>The messages that Lebed posted would predict
marked increases in the stocks value, i.e. he would post comments that this
stock would be the �next stock to gain 1,000%� or that a stock currently
trading at just over a dollar would be trading at more than $20 per share �very
soon.�<span>� </span>In response to Lebed�s messages,
trading volume of these stocks would soar on average from 60,000 shares per day
to over a million shares on the days he posted his messages.<span>�� </span>For the eleven trades that the SEC declared
its findings, Lebed realized a net profit of $272,826.<span>� </span>The individual gross profits ranged from
over $11,000 per trade to nearly $74,000.<span>�
</span>Lebed professes that he did nothing wrong � he did nothing different
from Wall Street analysts.<span>� </span>He states
that he learned how people react to the stock market and acted on that
knowledge.<span>� </span>According to Lebed�s
friends, even Lebed�s teachers would follow his advice regarding the stock
market.<span>� </span>While one of Lebed�s friends
lost a significant amount of money on one of the trades Lebed pushed, he states
�[i]n the stock market, you go in knowing you can lose.<span>� </span>We were just doing what Jon was doing, but not
doing as good a job at it.�<a href="#_ftn2" name="_ftnref2" title=""><span><span><!--[if !supportFootnotes]-->[2]<!--[endif]--></span></span></a></p>

<p>Depending on who
you talk to, Lebed was either viewed as a person who knowingly abused the
system and broke the law, or someone who acted no differently than Wall Street
analysts acted and was able to use the system to his advantage, actually
performing no wrong-doing.<span>� </span>Lebed�s own
father stated on 60 Minutes that he was proud of his son and that he hadn�t
done anything wrong.<span>� </span>This belief can
also be evinced by the fact that after Lebed�s first meeting with the SEC,
while his mother closed the Ameritrade account, Lebed�s father opened an
E*Trade account so that Lebed could continue to trade stocks.<span>� </span>The SEC, however, stated that Lebed violated
Section 17(a) of the Securities Act and Section 10(b) and Rule 10b-5 of the
Exchange Act.<span>� </span>These Acts �prohibit
acts, transactions, practices or course of business that operate as a fraud or
deceit in connection with the offer, purchase or sale of securities, including
misrepresentation and omissions of material fact.�<a href="#_ftn3" name="_ftnref3" title=""><span><span><!--[if !supportFootnotes]-->[3]<!--[endif]--></span></span></a><span>� </span>The SEC therefore ordered Lebed pay his fine
and to �cease and desist� from causing any further violation of Section 17(a).</p>

<p>Even the news
articles that covered Lebed�s actions appear split on whether he had done
anything wrong.<span>� </span>While an article
written by Peter Carbonara for Money Magazine<a href="#_ftn4" name="_ftnref4" title=""><span><span><!--[if !supportFootnotes]-->[4]<!--[endif]--></span></span></a>
appears to favor the SEC decision (albeit wondering why the SEC let Lebed keep
the remaining $500,000 of profit), Michael Lewis, writing for New York Times
Magazine,<a href="#_ftn5" name="_ftnref5" title=""><span><span><!--[if !supportFootnotes]-->[5]<!--[endif]--></span></span></a>
acknowledges that there were victims who suffered from Lebed�s actions, yet asserts
that the SEC only settled because they believed they would not be able to win
in court, and that its evidence was not as strong as it had alleged. </p>

</div><div><!--[if !supportFootnotes]--><br clear="all">

<hr size="1">

<!--[endif]-->

<p><a href="#_ftnref1" name="_ftn1" title=""><span><span><!--[if !supportFootnotes]-->[1]<!--[endif]--></span></span></a> In Re:
Lebed, No. 3-10291, 2000 SEC LEXIS 1964, at *1 (Sept. 20, 2000).</p>

<p><a href="#_ftnref2" name="_ftn2" title=""><span><span><!--[if !supportFootnotes]-->[2]<!--[endif]--></span></span></a> Michael
Lewis, <i>He Wanted to Get Rich.<span>� </span>He Wanted to Tune Out his School-Kid
Life.<span>� </span>And Neither His Parents Nor the
S.E.C. was in a Position to Stop Him: Jonathan Lebed�s Extracurricular
Activities</i>, New York Times Magazine, February 25, 2001.</p>

<p><a href="#_ftnref3" name="_ftn3" title=""><span><span><!--[if !supportFootnotes]-->[3]<!--[endif]--></span></span></a> <i>Id.</i> at *6.</p>

<p><a href="#_ftnref4" name="_ftn4" title=""><span><span><!--[if !supportFootnotes]-->[4]<!--[endif]--></span></span></a> March 2001, <i>available at</i>
http://www62.homepage.villanova.edu/john.matthews/conkid.html</p>

<p><a href="#_ftnref5" name="_ftn5" title=""><span><span><!--[if !supportFootnotes]-->[5]<!--[endif]--></span></span></a> February 25,
2001, <i>available at</i> http://www62.homepage.villanova.edu/john.matthews/conkid.html
</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Glossarie – a new, immersive way to learn a language (104 pts)]]></title>
            <link>https://glossarie.app/</link>
            <guid>39807912</guid>
            <pubDate>Sun, 24 Mar 2024 15:43:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://glossarie.app/">https://glossarie.app/</a>, See on <a href="https://news.ycombinator.com/item?id=39807912">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-elementor-type="wp-page" data-elementor-id="315" data-elementor-post-type="page">
						<div data-id="9f7aa30" data-element_type="section">
					<div data-id="1af7f31" data-element_type="column">
						<div data-id="8a0cead" data-element_type="widget" data-widget_type="image.default">
				<p><img decoding="async" width="433" height="94" src="https://glossarie.app/wp-content/uploads/2023/04/logo_white.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2023/04/logo_white.png 433w, https://glossarie.app/wp-content/uploads/2023/04/logo_white-300x65.png 300w" sizes="(max-width: 433px) 100vw, 433px">													</p>
				</div>
				
				
				<div data-id="92a868e" data-element_type="widget" data-widget_type="text-editor.default">
				<p>
							<h3>Learn vocabulary the natural, immersive way. Build your skills in French, Italian or Spanish whilst you read your favourite books.</h3>						</p>
				</div>
				
					</div>
				<div data-id="cc856bf" data-element_type="column" data-widget_type="image.default">
				<p><img decoding="async" width="483" height="1024" src="https://glossarie.app/wp-content/uploads/2023/08/full-483x1024.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2023/08/full-483x1024.png 483w, https://glossarie.app/wp-content/uploads/2023/08/full-141x300.png 141w, https://glossarie.app/wp-content/uploads/2023/08/full-768x1629.png 768w, https://glossarie.app/wp-content/uploads/2023/08/full-724x1536.png 724w, https://glossarie.app/wp-content/uploads/2023/08/full-966x2048.png 966w, https://glossarie.app/wp-content/uploads/2023/08/full.png 1178w" sizes="(max-width: 483px) 100vw, 483px">													</p>
				</div>
					</div>
				<div data-id="28fdac2" data-element_type="section" data-widget_type="heading.default">
				<p>
			<h2>Features</h2>		</p>
				</div>
				<div data-id="45628746" data-element_type="section">
					<div data-id="4cc6363" data-element_type="column" data-settings="{&quot;_animation&quot;:&quot;fadeIn&quot;}" data-widget_type="image.default">
				<p><img loading="lazy" decoding="async" width="1530" height="3036" src="https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2.png 1530w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2-151x300.png 151w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2-516x1024.png 516w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2-768x1524.png 768w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2-774x1536.png 774w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_09-2-1032x2048.png 1032w" sizes="(max-width: 1530px) 100vw, 1530px">													</p>
				</div>
				<div data-id="613e7c2" data-element_type="column">
						<div data-id="2bbf3b7" data-element_type="widget" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						Learn new words and phrases as you read					</span>
				</h3>
									<p>
						Build your vocabulary over time, learning in context - the natural way - using spaced repetition to reinforce your learning					</p>
							</div>
				
				<div data-id="faa884f" data-element_type="widget" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						Progress via multiple levels of difficulty					</span>
				</h3>
									<p>
						Start with basic words and progress to intermediate grammar and advanced vocabulary					</p>
							</div>
					</div>
					</div>
				
				<div data-id="2a45c01" data-element_type="section">
					<div data-id="14fe7f70" data-element_type="column">
						<div data-id="475b5371" data-element_type="widget" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						Get detailed explanations of each translation					</span>
				</h3>
									<p>
						Learn how each word relates in the translation: verb conjugations, root words, typical usage					</p>
							</div>
				
				<div data-id="2b5e3ee" data-element_type="widget" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						Learn correct pronunciation					</span>
				</h3>
									<p>
						Listen to words and phrases as they should be spoken					</p>
							</div>
					</div>
				<div data-id="305d86c5" data-element_type="column" data-settings="{&quot;_animation&quot;:&quot;fadeIn&quot;}" data-widget_type="image.default">
				<p><img loading="lazy" decoding="async" width="1178" height="2498" src="https://glossarie.app/wp-content/uploads/2023/07/explanation.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2023/07/explanation.png 1178w, https://glossarie.app/wp-content/uploads/2023/07/explanation-141x300.png 141w, https://glossarie.app/wp-content/uploads/2023/07/explanation-483x1024.png 483w, https://glossarie.app/wp-content/uploads/2023/07/explanation-768x1629.png 768w, https://glossarie.app/wp-content/uploads/2023/07/explanation-724x1536.png 724w, https://glossarie.app/wp-content/uploads/2023/07/explanation-966x2048.png 966w" sizes="(max-width: 1178px) 100vw, 1178px">													</p>
				</div>
					</div>
				
				<div data-id="aa0ffbb" data-element_type="section">
					<div data-id="348bf08" data-element_type="column" data-settings="{&quot;_animation&quot;:&quot;fadeIn&quot;}" data-widget_type="image.default">
				<p><img loading="lazy" decoding="async" width="1530" height="3036" src="https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38.png 1530w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38-151x300.png 151w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38-516x1024.png 516w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38-768x1524.png 768w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38-774x1536.png 774w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-18_38-1032x2048.png 1032w" sizes="(max-width: 1530px) 100vw, 1530px">													</p>
				</div>
				<div data-id="4f152f1" data-element_type="column">
						<div data-id="7d0e8da" data-element_type="widget" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						Start with one of dozens of free ebooks....					</span>
				</h3>
									<p>
						With many more to come					</p>
							</div>
				
				<div data-id="6b3b524" data-element_type="widget" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						...or upload your own					</span>
				</h3>
									<p>
						Currently supports epub and txt files					</p>
							</div>
					</div>
				<div data-id="3a04a0f" data-element_type="column" data-settings="{&quot;_animation&quot;:&quot;fadeIn&quot;}" data-widget_type="image.default">
				<p><img loading="lazy" decoding="async" width="1178" height="2498" src="https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122.png 1178w, https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122-141x300.png 141w, https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122-483x1024.png 483w, https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122-768x1629.png 768w, https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122-724x1536.png 724w, https://glossarie.app/wp-content/uploads/2023/04/Screenshot_20230424_153122-966x2048.png 966w" sizes="(max-width: 1178px) 100vw, 1178px">													</p>
				</div>
					</div>
				
				<div data-id="2e5ccac" data-element_type="section">
					<div data-id="8bf75d6" data-element_type="column" data-widget_type="image.default">
				<p><img loading="lazy" decoding="async" width="516" height="1024" src="https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14-516x1024.png" alt="" srcset="https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14-516x1024.png 516w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14-151x300.png 151w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14-768x1524.png 768w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14-774x1536.png 774w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14-1032x2048.png 1032w, https://glossarie.app/wp-content/uploads/2024/02/iFrameScreenshot-07_02_2024-16_14.png 1530w" sizes="(max-width: 516px) 100vw, 516px">													</p>
				</div>
				<div data-id="a1402d6" data-element_type="column" data-settings="{&quot;_animation&quot;:&quot;fadeInLeft&quot;,&quot;_animation_delay&quot;:&quot;400&quot;}" data-widget_type="icon-box.default">
				<h3>
					<span>
						Practice your vocabulary					</span>
				</h3>
									<p>
						Test yourself on useful phrases in your target language, with helpful guidance for incorrect answers					</p>
							</div>
					</div>
				
				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TinySSH is a small SSH server using NaCl, TweetNaCl (218 pts)]]></title>
            <link>https://github.com/janmojzis/tinyssh</link>
            <guid>39806139</guid>
            <pubDate>Sun, 24 Mar 2024 10:04:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/janmojzis/tinyssh">https://github.com/janmojzis/tinyssh</a>, See on <a href="https://news.ycombinator.com/item?id=39806139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h3 tabindex="-1" dir="auto">Introduction</h3><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<ul dir="auto">
<li>tinysshd is a minimalistic SSH server which implements only a subset of SSHv2 features.</li>
<li>tinysshd supports only secure cryptography (minimum 128-bit security, protected against cache-timing attacks)</li>
<li>tinysshd doesn't implement older crypto (such as RSA, DSA, HMAC-MD5, HMAC-SHA1, 3DES, RC4, ...)</li>
<li>tinysshd doesn't implement unsafe features (such as password or hostbased authentication)</li>
<li>tinysshd doesn't have features such: SSH1 protocol, compression, port forwarding, agent forwarding, X11 forwarding ...</li>
<li>tinysshd doesn't use dynamic memory allocation (no allocation failures, etc.)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Crypto primitives</h3><a id="user-content-crypto-primitives" aria-label="Permalink: Crypto primitives" href="#crypto-primitives"></a></p>
<ul dir="auto">
<li>State-of-the-art crypto: ssh-ed25519, curve25519-sha256, <a href="mailto:chacha20-poly1305@openssh.com">chacha20-poly1305@openssh.com</a></li>
<li>Older standard: <strike>ecdsa-sha2-nistp256, ecdh-sha2-nistp256, aes256-ctr, hmac-sha2-256</strike> removed in version 20190101</li>
<li>Postquantum crypto: <a href="mailto:sntrup761x25519-sha512@openssh.com">sntrup761x25519-sha512@openssh.com</a>, <a href="mailto:chacha20-poly1305@openssh.com">chacha20-poly1305@openssh.com</a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Project timelime</h3><a id="user-content-project-timelime" aria-label="Permalink: Project timelime" href="#project-timelime"></a></p>
<ul dir="auto">
<li><strike>experimental: 2014.01.01 - 2014.12.31 (experimentation)</strike></li>
<li><strike>alpha(updated): 2015.01.01 - 2017.12.31 (not ready for production use, ready for testing)</strike></li>
<li>beta(updated): 2018.01.01 - ????.??.?? (ready for production use)</li>
<li>stable: expected ????.??.?? - (ready for production use - including post-quantum crypto)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Current release (20240101)</h3><a id="user-content-current-release-20240101" aria-label="Permalink: Current release (20240101)" href="#current-release-20240101"></a></p>
<ul dir="auto">
<li>has 63899 words of code</li>
<li>beta release</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">How-to run</h3><a id="user-content-how-to-run" aria-label="Permalink: How-to run" href="#how-to-run"></a></p>
<div data-snippet-clipboard-copy-content="       TCPSERVER
              tcpserver -HRDl0 0.0.0.0 22 /usr/sbin/tinysshd -v /etc/tinyssh/sshkeydir &amp;

       BUSYBOX
              busybox tcpsvd 0 22 tinysshd -v /etc/tinyssh/sshkeydir &amp;

       INETD
           /etc/inetd.conf:
               ssh stream tcp nowait root /usr/sbin/tinysshd tinysshd -l -v /etc/tinyssh/sshkeydir

       SYSTEMD
           tinysshd.socket:
               [Unit]
               Description=TinySSH server socket
               ConditionPathExists=!/etc/tinyssh/disable_tinysshd

               [Socket]
               ListenStream=22
               Accept=yes

               [Install]
               WantedBy=sockets.target

           tinysshd@.service:
               [Unit]
               Description=Tiny SSH server
               After=network.target auditd.service

               [Service]
               ExecStartPre=-/usr/sbin/tinysshd-makekey -q /etc/tinyssh/sshkeydir
               EnvironmentFile=-/etc/default/tinysshd
               ExecStart=/usr/sbin/tinysshd ${TINYSSHDOPTS} -- /etc/tinyssh/sshkeydir
               KillMode=process
               SuccessExitStatus=111
               StandardInput=socket
               StandardError=journal

               [Install]
               WantedBy=multi-user.target"><pre><code>       TCPSERVER
              tcpserver -HRDl0 0.0.0.0 22 /usr/sbin/tinysshd -v /etc/tinyssh/sshkeydir &amp;

       BUSYBOX
              busybox tcpsvd 0 22 tinysshd -v /etc/tinyssh/sshkeydir &amp;

       INETD
           /etc/inetd.conf:
               ssh stream tcp nowait root /usr/sbin/tinysshd tinysshd -l -v /etc/tinyssh/sshkeydir

       SYSTEMD
           tinysshd.socket:
               [Unit]
               Description=TinySSH server socket
               ConditionPathExists=!/etc/tinyssh/disable_tinysshd

               [Socket]
               ListenStream=22
               Accept=yes

               [Install]
               WantedBy=sockets.target

           tinysshd@.service:
               [Unit]
               Description=Tiny SSH server
               After=network.target auditd.service

               [Service]
               ExecStartPre=-/usr/sbin/tinysshd-makekey -q /etc/tinyssh/sshkeydir
               EnvironmentFile=-/etc/default/tinysshd
               ExecStart=/usr/sbin/tinysshd ${TINYSSHDOPTS} -- /etc/tinyssh/sshkeydir
               KillMode=process
               SuccessExitStatus=111
               StandardInput=socket
               StandardError=journal

               [Install]
               WantedBy=multi-user.target
</code></pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Creating an autopilot in X-Plane using Python (118 pts)]]></title>
            <link>https://austinsnerdythings.com/2021/10/15/creating-an-autopilot-in-x-plane-using-python-part-1/</link>
            <guid>39805269</guid>
            <pubDate>Sun, 24 Mar 2024 05:07:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://austinsnerdythings.com/2021/10/15/creating-an-autopilot-in-x-plane-using-python-part-1/">https://austinsnerdythings.com/2021/10/15/creating-an-autopilot-in-x-plane-using-python-part-1/</a>, See on <a href="https://news.ycombinator.com/item?id=39805269">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h2>Introduction</h2>
<p>Today’s post will take us in a slightly different direction than the last few. Today’s post will be about hooking up some Python code to the X-Plane flight simulator to enable development of an autopilot using PID (proportional-integral-derivative) controllers. I’ve been a fan of flight simulators for quite some time (I distinctly remember getting <a href="https://archive.org/details/msflightsimulator98" target="_blank" rel="noreferrer noopener">Microsoft Flight Simulator 98</a> for my birthday when I was like 8 or 9) but have only recently started working with interfacing them to code. X-Plane is a well-known flight simulator developed by another Austin – <a href="https://austinmeyer.com/" target="_blank" rel="noreferrer noopener">Austin Meyer</a>. It is regarded as having one of the best flight models and has tons of options for getting data into/out of the simulator. More than one FAA-certified simulator setups are running X-Plane as the primary driver software.</p>
<p>I got started thinking about writing some code for X-Plane while playing another game, Factorio. I drive a little plane or car in the game to get around my base and I just added a plug-in that “snaps” the vehicle to a heading, which makes it easier to go in straight lines. I thought – “hmm how hard could this be to duplicate in a flight sim?”. So here we are.</p>
<p>This post will get X-Plane hooked up to Python. The real programming will start with the <a href="https://austinsnerdythings.com/2021/10/19/coding-a-wing-leveler-autopilot-in-x-plane-with-python/">next post</a>.</p>
<p>Most recent post (added 2024-03-24) – <a href="https://austinsnerdythings.com/2024/03/24/adding-some-polish-to-the-x-plane-python-autopilot-with-flask-redis-and-websockets/">Adding some polish to the X-Plane Python Autopilot with Flask, Redis, and WebSockets</a></p>
<h2>Video Link</h2>
<figure></figure>
<h2>Contents</h2>
<ol>
<li>Download and install X-Plane (I used X-Plane 10 because it uses less resources than X-Plane 11 and we don’t need the graphics/scenery to look super pretty to do coding. It also loads faster.)</li>
<li>Download and install NASA’s XPlaneConnect X-Plane plug-in to X-Plane</li>
<li>Verify the XPlaneConnect plug-in is active in X-Plane</li>
<li>Download sample code from XPlaneConnect’s GitHub page</li>
<li>Run the sample script to verify data is being transmitted from X-Plane via UDP to the XPlaneConnect code</li>
</ol>
<h3>1 – Download and install X-Plane 10 or X-Plane 11</h3>
<p>I’ll leave this one up to you. X-Plane 10 is hard to find these days I just discovered. <a href="https://store.steampowered.com/app/269950/XPlane_11/" target="_blank" rel="noreferrer noopener">X-Plane 11 is available on Steam</a> for $59.99 as of writing. I just tested and the plug-in/code works fine on X-Plane 11 (but the flight models are definitely different and will need different PID values). My screenshots might jump between the two versions but the content/message will be the same.</p>
<h3>2 – Download and install NASA’s XPlaneConnect plug-in</h3>
<p>NASA (yes, that NASA, the National Aeronautics and Space Administration) has wrote a bunch of code to interface with X-Plane. They have adapters for C, C++, Java, Matlab, and Python. They work with X-Plane 9, 10, and 11.</p>
<ol>
<li>Download the latest version from the <a href="https://github.com/nasa/XPlaneConnect/releases" target="_blank" rel="noreferrer noopener">XPlaneConnect GitHub releases page</a>, <a href="https://github.com/nasa/XPlaneConnect/releases/download/v1.3-rc6/XPlaneConnect.zip" target="_blank" rel="noreferrer noopener">1.3 RC6</a> as of writing</li>
<li>Open the .zip and place the contents in the [X-Plane directory]/Resources/plugins folder. There are few other folders already present in this directory. Mine looked like this after adding the XPlaneConnect folder:</li>
</ol>
<figure><a href="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-1.png"><img decoding="async" width="620" height="423" src="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-1.png" alt="" srcset="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-1.png 620w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-1-300x205.png 300w" sizes="(max-width: 620px) 100vw, 620px"></a><figcaption>Screenshot of X-Plane 10 plugins directory with XPlaneConnect folder added</figcaption></figure>
<figure><a href="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-2.png"><img decoding="async" width="636" height="294" src="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-2.png" alt="" srcset="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-2.png 636w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-2-300x139.png 300w" sizes="(max-width: 636px) 100vw, 636px"></a><figcaption>Screenshot of X-Plane 11 plugins directory with XPlaneConnect folder added</figcaption></figure>
<h3>3 – Verify XPlaneConnect is active in X-Plane</h3>
<p>Now we’ll load up X-Plane and check the plug-ins to verify XPlaneConnect is enabled. Go to the top menu and select Plugins -&gt; Plugin Admin. You should see X-Plane Connect checked in the enabled column:</p>
<figure><a href="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-3.png"><img loading="lazy" decoding="async" width="579" height="741" src="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-3.png" alt="" srcset="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-3.png 579w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-3-234x300.png 234w" sizes="(max-width: 579px) 100vw, 579px"></a><figcaption>Screenshot showing XPlaneConnect plug-in active in X-Plane 11</figcaption></figure>
<figure><a href="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-4.png"><img loading="lazy" decoding="async" width="342" height="379" src="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-4.png" alt="" srcset="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-4.png 342w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-4-271x300.png 271w" sizes="(max-width: 342px) 100vw, 342px"></a><figcaption>Screenshot showing XPlaneConnect plug-in active in X-Plane 10</figcaption></figure>
<h3>4 – Download sample code from XPlaneConnect’s GitHub page</h3>
<p>From the <a href="https://github.com/nasa/XPlaneConnect/tree/master/Python3/src" target="_blank" rel="noreferrer noopener">Python3 portion of the GitHub code</a>, download <a href="https://github.com/nasa/XPlaneConnect/blob/master/Python3/src/xpc.py" target="_blank" rel="noreferrer noopener">xpc.py</a> and <a href="https://github.com/nasa/XPlaneConnect/blob/master/Python3/src/monitorExample.py" target="_blank" rel="noreferrer noopener">monitorExample.py</a> and stick them in your working directory (doesn’t matter where). For me, I just downloaded the entire git structure so the code is at C:\Users\Austin\source\repos\XPlaneConnect\Python3\src:</p>
<figure><a href="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-5.png"><img loading="lazy" decoding="async" width="713" height="255" src="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-5.png" alt="" srcset="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-5.png 713w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-5-300x107.png 300w" sizes="(max-width: 713px) 100vw, 713px"></a><figcaption>Screenshot showing xpc.py and monitorExample.py in my working directory</figcaption></figure>
<h3>5 – Run sample code to verify data is making it from X-Plane to our code</h3>
<p>With X-Plane running with a plane on a runway (or anywhere really), go ahead and run monitorExample.py! I will be using Visual Studio Code to program this XPlane Python autopilot stuff so that’s where I’ll run it from.</p>
<p>You will start seeing lines scroll by very fast with 6 pieces of information – latitude, longitude, elevation (in meters), and the control deflections for aileron, elevator, and rudder (normalized from -1 to 1, with 0 being centered). In the below screenshot, we see a lat/lon of 39.915, -105.128, with an elevation of 1719m. First one to tell me in the comments what runway that is wins internet points!</p>
<figure><a href="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7.png"><img loading="lazy" decoding="async" width="1024" height="721" src="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7-1024x721.png" alt="" srcset="https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7-1024x721.png 1024w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7-300x211.png 300w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7-768x541.png 768w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7-1536x1082.png 1536w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7-1200x845.png 1200w, https://austinsnerdythings.com/wp-content/uploads/2021/10/image-7.png 1675w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>Screenshot showing Visual Studio Code running monitorExample.py in front of X-Plane 10 and the output scrolling by.</figcaption></figure>
<h2>Conclusion</h2>
<p>In this post, we have successfully downloaded the XPlaneConnect plug-in, and demonstrated that it can successfully interface with Python code in both X-Plane 10 and X-Plane 11.</p>
<p>Next up is to start controlling the plane with a basic wing leveler. As of writing this post, I have the following completely functional:</p>
<ul>
<li>Pitch / roll hold at reasonable angles (-25 to 25)</li>
<li>Altitude set and hold</li>
<li>Heading set and hold</li>
<li>Airspeed set and hold</li>
<li>Navigate directly to a lat/lon point</li>
</ul>
<p>See you at the next post! Next post – <a href="https://austinsnerdythings.com/2021/10/19/coding-a-wing-leveler-autopilot-in-x-plane-with-python/" target="_blank" rel="noreferrer noopener">Coding a wing leveler autopilot in X-Plane with Python</a></p>
<p><span></span> <span>Post Views:</span> <span>11,762</span>
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux Crisis Tools (478 pts)]]></title>
            <link>https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html</link>
            <guid>39804214</guid>
            <pubDate>Sun, 24 Mar 2024 00:51:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html">https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html</a>, See on <a href="https://news.ycombinator.com/item?id=39804214">Hacker News</a></p>
<div id="readability-page-1" class="page"><div class="page">
	

	<div>
<!-- (this is for the blog) recent books: -->
<!-- <center><a href="https://informit.com/sale/booksgiving"><img border=0 width=180 src="/Images/booksgiving2021.jpg"></center><br><b>Book sale until Dec 1, 2021: 55% off for 2 or more</b></a><br><br> -->
<center><a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html"><img src="https://www.brendangregg.com/Images/sysperf2nd_bookcover_360.jpg" width="180"></a><br><span size="-2"><i><a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html">Systems Performance 2nd Ed.</a></i></span></center><center><a href="https://www.brendangregg.com/bpf-performance-tools-book.html"><img src="https://www.brendangregg.com/Images/bpfperftools_bookcover_360.jpg" width="180"></a><br><span size="-2"><i><a href="https://www.brendangregg.com/bpf-performance-tools-book.html">BPF Performance Tools book</a></i></span></center>
<!--
<br><center><a href="https://www.portal.reinvent.awsevents.com/connect/search.ww?#loadSearch-searchPhrase=OPN303&searchType=session&tc=0&sortBy=abbreviationSort&p="><img src="/Images/Speaker/reInvent2019_200.jpg" width=180" border=0></a><br><font size=-2><i>I'm speaking at <a href="https://www.portal.reinvent.awsevents.com/connect/search.ww?#loadSearch-searchPhrase=OPN303&searchType=session&tc=0&sortBy=abbreviationSort&p=">AWS re:Invent 2019</a></i></font></center>
-->
<p>
	Recent posts:</p><ul>
	  
		   <li>24 Mar 2024 »<br>
		   <a href="https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html">  
		   Linux Crisis Tools</a></li>
	  
		   <li>17 Mar 2024 »<br>
		   <a href="https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html">  
		   The Return of the Frame Pointers</a></li>
	  
		   <li>10 Mar 2024 »<br>
		   <a href="https://www.brendangregg.com/blog/2024-03-10/ebpf-documentary.html">  
		   eBPF Documentary</a></li>
	  
		   <li>28 Apr 2023 »<br>
		   <a href="https://www.brendangregg.com/blog/2023-04-28/ebpf-security-issues.html">  
		   eBPF Observability Tools Are Not Security Tools</a></li>
	  
		   <li>01 Mar 2023 »<br>
		   <a href="https://www.brendangregg.com/blog/2023-03-01/computer-performance-future-2022.html">  
		   USENIX SREcon APAC 2022: Computing Performance: What's on the Horizon</a></li>
	  
		   <li>17 Feb 2023 »<br>
		   <a href="https://www.brendangregg.com/blog/2023-02-17/srecon-apac-2023.html">  
		   USENIX SREcon APAC 2023: CFP</a></li>
	  
		   <li>02 May 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-05-02/brendan-at-intel.html">  
		   Brendan@Intel.com</a></li>
	  
		   <li>15 Apr 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-04-15/netflix-farewell-1.html">  
		   Netflix End of Series 1</a></li>
	  
		   <li>09 Apr 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-04-09/tensorflow-library-performance.html">  
		   TensorFlow Library Performance</a></li>
	  
		   <li>19 Mar 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-03-19/why-dont-you-use.html">  
		   Why Don't You Use ...</a></li>
	  
		   <li>26 Sep 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-09-26/the-speed-of-time.html">  
		   The Speed of Time</a></li>
	  
		   <li>06 Sep 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-09-06/zfs-is-mysteriously-eating-my-cpu.html">  
		   ZFS Is Mysteriously Eating My CPU</a></li>
	  
		   <li>30 Aug 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-08-30/high-rate-of-paging.html">  
		   Analyzing a High Rate of Paging</a></li>
	  
		   <li>27 Aug 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-08-27/slack-crashes-secret-stderr.html">  
		   Slack's Secret STDERR Messages</a></li>
	  
		   <li>05 Jul 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-07-05/computing-performance-on-the-horizon.html">  
		   USENIX LISA2021 Computing Performance: On the Horizon</a></li>
	  
		   <li>03 Jul 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-07-03/how-to-add-bpf-observability.html">  
		   How To Add eBPF Observability To Your Product</a></li>
	  
		   <li>15 Jun 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-06-15/bpf-internals.html">  
		   USENIX LISA2021 BPF Internals (eBPF)</a></li>
	  
		   <li>04 Jun 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-06-04/an-unbelievable-demo.html">  
		   An Unbelievable Demo</a></li>
	  
		   <li>29 May 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-05-29/moving-to-australia.html">  
		   Moving my US tech job to Australia</a></li>
	  
		   <li>23 May 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-05-23/what-is-observability.html">  
		   What is Observability</a></li>
	  
	</ul>
	<p><a href="https://www.brendangregg.com/blog/index.html">Blog index</a><br>
	<a href="https://www.brendangregg.com/blog/about.html">About</a><br>
	<a href="https://www.brendangregg.com/blog/rss.xml">RSS</a></p><!--
	<br><center><a href="https://www.usenix.org/conference/lisa18"><img src="https://www.usenix.org/sites/default/files/lisa18_banner_join-me.png" width=180></a><br><font size=-2><i>I am program co-chair for LISA 2018</i></font></center>
-->
	</div>

        <div>
          

          
<p>24 Mar 2024</p>

<div>
<p>When you have an outage caused by a performance issue, you don't want to lose precious time just to install the tools needed to diagnose it. Here is a list of "crisis tools" I recommend installing on your Linux servers by default (if they aren't already), along with the (Ubuntu) package names that they come from:</p>

<ul><table>
<tbody><tr><th>Package</th><th>Provides</th><th>Notes</th></tr>
<tr><td>procps</td><td>ps(1), vmstat(8), uptime(1), top(1)</td><td>basic stats</td></tr>
<tr><td>util-linux</td><td>dmesg(1), lsblk(1), lscpu(1)</td><td>system log, device info</td></tr>
<tr><td>sysstat</td><td>iostat(1), mpstat(1), pidstat(1), sar(1)</td><td>device stats</td></tr>
<tr><td>iproute2</td><td>ip(8), ss(8), nstat(8), tc(8)</td><td>preferred net tools</td></tr>
<tr><td>numactl</td><td>numastat(8)</td><td>NUMA stats</td></tr>
<tr><td>tcpdump</td><td>tcpdump(8)</td><td>Network sniffer</td></tr>
<tr><td>linux-tools-common<br>linux-tools-$(uname -r)</td><td>perf(1), turbostat(8)</td><td>profiler and PMU stats</td></tr>
<tr><td>bpfcc-tools (bcc)</td><td>opensnoop(8), execsnoop(8), runqlat(8), softirqs(8),<br>hardirqs(8), ext4slower(8), ext4dist(8), biotop(8),<br>biosnoop(8), biolatency(8), tcptop(8), tcplife(8),<br>trace(8), argdist(8), funccount(8), profile(8), etc.</td><td>canned eBPF tools[1]</td></tr>
<tr><td>bpftrace</td><td>bpftrace, basic versions of opensnoop(8),<br>execsnoop(8), runqlat(8), biosnoop(8), etc.</td><td>eBPF scripting[1]</td></tr>
<tr><td>trace-cmd</td><td>trace-cmd(1)</td><td>Ftrace CLI</td></tr>
<tr><td>nicstat</td><td>nicstat(1)</td><td>net device stats</td></tr>
<tr><td>ethtool</td><td>ethtool(8)</td><td>net device info</td></tr>
<tr><td>tiptop</td><td>tiptop(1)</td><td>PMU/PMC top</td></tr>
<tr><td>cpuid</td><td>cpuid(1)</td><td>CPU details</td></tr>
<tr><td>msr-tools</td><td>rdmsr(8), wrmsr(8)</td><td>CPU digging</td></tr>
</tbody></table></ul>

<p>(This is based on Table 4.1 "Linux Crisis Tools" in <a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html">SysPerf 2</a>.)</p>

<ul><span size="-1">Some longer notes: [1] bcc and bpftrace have many overlapping tools: the bcc ones are more capable (e.g., CLI options), and the bpftrace ones can be edited on the fly. But that's not to say that one is better or faster than the other: They emit the same BPF bytecode and are equally fast once running. Also note that bcc is evolving and migrating tools from Python to libbpf C (with CO-RE and BTF) but we haven't reworked the package yet. In the future "bpfcc-tools" should get replaced with a much smaller "libbpf-tools" package that's just tool binaries.</span></ul>

<p>This list is a minimum. Some servers have accelerators and you'll want their analysis tools installed as well: e.g., on Intel GPU servers, the intel-gpu-tools package; on NVIDIA, nvidia-smi. Debugging tools, like gdb(1), can also be pre-installed for immediate use in a crisis.</p>

<p>Essential analysis tools like these don't change that often, so this list may only need updating every few years. If you think I missed a package that is important today, please let me know (e.g., in the comments).</p>

<p>The main downside of adding these packages is their on-disk size. On cloud instances, adding Mbytes to the base server image can add seconds, or fractions of a second, to instance deployment time. Fortunately the packages I've listed are mostly quite small (and bcc will get smaller) and should cost little size and time. I have seen this size concern prevent debuginfo (totaling around 1 Gbyte) from being included by default.</p>

<h2>Can't I just install them later when needed?</h2>

<p>Many problems can occur when trying to install software during a production crisis. I'll step through a made-up example that combines some of the things I've learned the hard way:</p>

<ul>
<li><strong>4:00pm</strong>: Alert! Your company's site goes down. No, some people say it's still up. Is it up? It's up but too slow to be usable.</li>
<li><strong>4:01pm</strong>: You look at your monitoring dashboards and a group of backend servers are abnormal. Is that high disk I/O? What's causing that?</li>
<li><strong>4:02pm</strong>: You SSH to one server to dig deeper, but SSH takes forever to login.</li>
<li><strong>4:03pm</strong>: You get a login prompt and type "iostat -xz 1" for basic disk stats to begin with. There is a long pause, and finally "Command 'iostat' not found...Try: sudo apt install sysstat". Ugh. Given how slow the system is, installing this package could take several minutes. You run the install command.</li>
<li><strong>4:07pm</strong>: The package install has failed as it can't resolve the repositories. Something is wrong with the /etc/apt configuration. Since the server owners are now in the SRE chatroom to help with the outage, you ask: "how do you install system packages?" They respond "We never do. We only update our app." Ugh. You find a different server and copy its working /etc/apt config over.</li>
<li><strong>4:10pm</strong>: You need to run "apt-get update" first with the fixed config, but it's miserably slow.</li>
<li><strong>4:12pm</strong>: ...should it really be taking this long??</li>
<li><strong>4:13pm</strong>: apt returned "failed: Connection timed out." Maybe this system is too slow with the performance issue? Or can't it connect to the repos? You begin network debugging and ask the server team: "Do you use a firewall?" They say they don't know, ask the network security team.</li>
<li><strong>4:17pm</strong>: The network security team have responded: Yes, they have blocked any unexpected traffic, including HTTP/HTTPS/FTP outbound apt requests. Gah. "Can you edit the rules right now?" "It's not that easy." "What about turning off the firewall completely?" "Uh, in an emergency, sure."</li>
<li><strong>4:20pm</strong>: The firewall is disabled. You run apt-get update again. It's slow, but works! Then apt-get install, and...permission errors. What!? I'm root, this makes no sense. You share your error in the SRE chatroom and someone points out: Didn't the platform security team make the system <em>immutable</em>?</li>
<li><strong>4:24pm</strong>: The platform security team are now in the SRE chatroom explaining that some parts of the file system can be written to, but others, especially for executable binaries, are blocked. Gah! "How do we disable this?" "You can't, that's the point. You'd have to create new server images with it disabled." </li>
<li><strong>4:27pm</strong>: By now the SRE team has announced a major outage and informed the executive team, who want regular status updates and an ETA for when it will be fixed. Status: Haven't done much yet.</li>
<li><strong>4:30pm</strong>: You start running "cat /proc/diskstats" as a rudimentary iostat(1), but have to spend time reading the Linux source (admin-guide/iostats.rst) to make sense of it. It just confirms the disks are busy which you knew anyway from the monitoring dashboard. You really need the disk and file system tracing tools, like biosnoop(8), but you can't install them either. Unless you can hack up rudimentary tracing tools as well...You "cd /sys/kernel/debug/tracing" and start looking for the FTrace docs.</li>
<li><strong>4:55pm</strong>: New server images finally launch with all writable file systems. You login – gee it's fast – and "apt-get install sysstat". Before you can even run iostat there are messages in the chatroom: "Website's back up! Thanks! What did you do?" "We restarted the servers but we haven't fixed anything yet." You have the feeling that the outage will return exactly 10 minutes after you've fallen asleep tonight.</li>
<li><strong>12:50am</strong>: Ping! I knew this would happen. You get out of bed and open your work laptop. The site is down – it's been hacked – someone disabled the firewall and file system security.</li>
</ul>

<p>I've fortunately not experienced the 12:50am event, but the others are based on real world experiences. In my prior job this sequence can often take a different turn: a "traffic team" may initiate a cloud region failover by about the 15 minute mark, so I'd eventually get iostat installed but then these systems would be idle.</p>

<h2>Default install</h2>

<p>The above scenario explains why you ideally want to pre-install crisis tools so you can start debugging a production issue quickly during an outage. Some companies already do this, and have OS teams that create custom server images with everything included. But there are many sites still running default versions of Linux that learn this the hard way. I'd recommend Linux distros add these crisis tools to their enterprise Linux variants, so that companies large and small can hit the ground running when performance outages occur.</p>

</div>



<br><hr>








          
        </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[After 41 years, my first assembly program on my first computer, the Tomy Tutor (135 pts)]]></title>
            <link>http://oldvcr.blogspot.com/2024/03/after-41-years-my-first-assembly.html</link>
            <guid>39804204</guid>
            <pubDate>Sun, 24 Mar 2024 00:50:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://oldvcr.blogspot.com/2024/03/after-41-years-my-first-assembly.html">http://oldvcr.blogspot.com/2024/03/after-41-years-my-first-assembly.html</a>, See on <a href="https://news.ycombinator.com/item?id=39804204">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-7597842423603032498" itemprop="description articleBody"><p>
We got it in 1983, I think, so it only took me about 41 years to get around to it. This Tomy Tutor isn't a replacement system I secondarily acquired, nor is it a Ship of Theseus Frankenstein rebuild. This is my <em>actual</em> first computer, in its original case, on its original components, with the Federated Group sticker still on the original box. And it still works.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQ9LAGVCfrBn9_Z9yd6t7kAwVbOM-W9wqL1piD8_IM2iqNqqcC33qajRNf7PkWXeMnUZboV7IU2_7mDwoAi7gTY-g_q5VhnlmrAWMeEtJ5O7oj76rNVl6nADng7TQeqdXAR45cpSfzgCiHo6cskJ0U1C-dSLvNA6EVZzSUBJE29Y7DTsNNCwzUIL1TKKs/s3648/PXL_20240309_211811231.jpg"><img alt="" data-original-height="2736" data-original-width="3648" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQ9LAGVCfrBn9_Z9yd6t7kAwVbOM-W9wqL1piD8_IM2iqNqqcC33qajRNf7PkWXeMnUZboV7IU2_7mDwoAi7gTY-g_q5VhnlmrAWMeEtJ5O7oj76rNVl6nADng7TQeqdXAR45cpSfzgCiHo6cskJ0U1C-dSLvNA6EVZzSUBJE29Y7DTsNNCwzUIL1TKKs/s320/PXL_20240309_211811231.jpg" width="320"></a></p><p>

Now, why so long? Well, for one thing, it was only supposed to be a training wheels computer because a full Commodore 64 system would have cost too much, but my folks wanted to see whether we'd take to a home computer and <a href="https://www.youtube.com/watch?v=9N8AzoDzQhM">His High Holy Munificence Fred R. Rated</a> was blowing these babies out for a song by then. The receipt has long since disappeared, though $99 sounds about right plus maybe around $40 or so for a joystick, cassette deck and some cartridges, compared to somewhere between $200 and $300 for the recently discounted 64 — which didn't include anything else. (It tells you something about our family finances at the time when a C64 was too <em>expensive</em>.) I immediately started writing my own BASIC programs on it in its perverse little BASIC dialect and when my folks indeed saved up and bought us a C64 system the next year (complete with 1702 monitor and 1541 disk drive), I refused to use it. In </p><s>retaliation</s><p> my best interests, my parents forcibly relocated the Tomy to storage and I went on to do even bigger things on the Commodore, making it, not the Tutor, the defining computer of my childhood. That's why there's still <a href="http://oldvcr.blogspot.com/2023/05/refurb-weekend-commodore-128dcr.html">a Commodore 128DCR on my desk</a>.
</p><p>
The other reason is that there was never really a simple way to do it. Even when I found out what CPU was actually inside (incredibly a 16-bit TMS 9995, an evolved version of the TMS 9900 in the Texas Instruments 99/4 and 99/4A), there was never a Tomy assembler, and other than its small amount of scratchpad RAM (256 bytes) the entirety of the Tutor's 16K of memory is tied up in the 9918ANL VDP video chip. That sort of architecture was typical for the family, but that also means that almost everything is stored in non-executable VDP RAM, so short of burning your own cartridge EPROMs there's no way to actually create and run a machine language program on the Tutor. The first flashcart for the Tutor didn't exist until around 2016 and it was still all ROM; furthermore, while the 99/4A could have its CPU-addressable RAM expanded (as well as the 99/8, its unreleased successor to which the Tomy Tutor is closely related), there wasn't ever a Tutor RAM expansion cartridge either until very recently. But now there are multiple homebrew options even for obscure home computers like this one, and at last I've got my own assembly language program finally running on it.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3oqNRuTTZQRkO62eUK_dbqlmAzZCEz9-CVt8CuhUHZgIFnPFNxElBe6SoBsbSFChROZumsbdi1MWXYp_OsCtfEk9jeKW5XPdXyCLxwT14rRBPunzSYfpRdQRdLtYBSorcX4sdqDj8ZRV5dTcW31Sih-UHHONKAjcJtJG3-LtqNQTcofKseu3W6dWl67I/s4080/PXL_20240309_070122354.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3oqNRuTTZQRkO62eUK_dbqlmAzZCEz9-CVt8CuhUHZgIFnPFNxElBe6SoBsbSFChROZumsbdi1MWXYp_OsCtfEk9jeKW5XPdXyCLxwT14rRBPunzSYfpRdQRdLtYBSorcX4sdqDj8ZRV5dTcW31Sih-UHHONKAjcJtJG3-LtqNQTcofKseu3W6dWl67I/s320/PXL_20240309_070122354.jpg" width="320"></a></p><p>

And it's all done with its own, better I/O routines (if I do say my own better self) as a basis for bigger projects. But first, a little tour of the Tutor itself, and then we'll dig in.
</p><p>
<a name="more"></a>

Texas Instruments' home computer series, including the famous TI 99/4A, was the logical consequence of TI's "one company, one computer architecture" policy. Indeed, the 1976 TMS 9900 CPU was basically their 16-bit 990 minicomputer architecture in an ungainly 64-pin DIP chip package and quite possibly (the only alternative is the General Instrument CP1600) the first single chip 16-bit microprocessor commercially available. It was fabbed in NMOS on a 4.5 micron process with about 8,000 transistors and initially topped out at a respectable 3MHz, though its pervasively microcoded architecture required sometimes large cycle counts per instruction. The 9918 video display processor in the original 99/4 evolved with a new bitmap mode to become the 9918A in the 99/4A, and, outlasting its originator, was one of the most common video chips of the early home computer era (Sord, MSX, CreatiVision/Dick Smith Wizzard, ColecoVision/Coleco ADAM, and many, many more). The original 99/4 was the winning design of three internal home system efforts in 1979, but was derided for its "calculator" keyboard, lack of lower case and a high MSRP; the upgraded 99/4A débuted in 1981 with an improved keyboard, better video, more expansion options and a lower price.
</p><p>
But TI was first and foremost in the chip business, and at the time was the largest semiconductor manufacturer on the planet. TI realized that the physical size of the CPU was harming its commercial viability — though TI's dubious management decisions were just as big a factor — and developed more conventional 40-pin versions, first as microcontrollers with on-board RAM and ROM, then with more typical 8-bit data buses. The most advanced of these was the TMS 9995 which had a few extra opcodes, a primitive pre-fetch facility, 256 bytes of on-chip RAM (we'll get to why this is notable when we discuss assembly language programming) and an internal decrementer for timing and event counting. It was noticeably faster than the 9900 and TI planned to implement it in its next generation of home computers, the low-end black and white 99/2 intended to compete against systems like the ZX-81 and Timex Sinclair 1000, and the high-end 99/8 with more memory, built-in peripherals and a larger keyboard.
</p><p>
Before that could happen, however, TI got deep in the weeds against their old nemesis Commodore under Jack Tramiel and ended up cancelling both the 99/2 and 99/8 in 1983 (exiting the home computer market completely in 1984), though not before there were spinoffs. It's not clear how Japanese toy manufacturer Tomy got involved but in 1982 Tomy adapted the in-development 99/8 architecture using the same 9995 CPU and 9918A VDP into their own home computer in Japan, manufactured by Matsushita (Panasonic) under contract. This computer was called the Tomy Pyuuta (ぴゅう太, also variously romanized as the Tomy Pyuta or Tomy Pyūta). 

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhGvEIAVlkDauCf5HnZ3-1wWKnE_3cGL9YC1EpY5vBfdVIjs-7Elkgzc9f-9V6qXBhKOa4Y9vJa_ZaD6fg3-ScWULzrb6iQpnvNnK_vOtjr0u2jPX7VGvHxz_RDOte9IZBFPHKrkCkGzVRJ6ElQx4vsFbLW0TL9wy5dQ6ZZToosgi4URSpffGkUL7vl0aM/s2048/IMG_20200606_142136.jpg"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhGvEIAVlkDauCf5HnZ3-1wWKnE_3cGL9YC1EpY5vBfdVIjs-7Elkgzc9f-9V6qXBhKOa4Y9vJa_ZaD6fg3-ScWULzrb6iQpnvNnK_vOtjr0u2jPX7VGvHxz_RDOte9IZBFPHKrkCkGzVRJ6ElQx4vsFbLW0TL9wy5dQ6ZZToosgi4URSpffGkUL7vl0aM/s320/IMG_20200606_142136.jpg" width="320"></a></p><p>

The Pyuuta wasn't, and wasn't intended as, a 99/8 clone. Unlike the 99/8's higher-end aspirations, the Pyuuta was targeted explicitly at younger children, using a friendly yet durable large plastic case and spill-resistant rubber Chiclet keys. For cartridges Tomy licensed some of Konami's arcade games like Frogger and Scramble and created a few of their own, and for peripherals they provided game controllers (included) and a cassette recorder (optional) for saving your work. Eventually <a href="http://oldvcr.blogspot.com/2020/06/tfw-you-find-last-cartridge.html">they planned to release</a> a modem, floppy disk, printer and speech synthesizer, all presumably using TI's reference designs except the printer which was a modified Astor MCP-40 plotter.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvPinNkNDr6aW6zzqYKCwGARokJenammCZinAaR88KMt68BTvyNJpyuPbG4Z5AOF5hkhG2GaVgeZO2k5qoi7QKD8hOQTELA5h204cRFg_oY4LpRnIRfQ6K0O4mmfV-inKVz8HkHyL5dvalL2jSzXyXXrtbcJrce6MNsvOggI0uSEM3MlWodkPOJes1Qy4/s720/vlcsnap-2020-06-06-16h42m05s668.png"><img alt="" data-original-height="540" data-original-width="720" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvPinNkNDr6aW6zzqYKCwGARokJenammCZinAaR88KMt68BTvyNJpyuPbG4Z5AOF5hkhG2GaVgeZO2k5qoi7QKD8hOQTELA5h204cRFg_oY4LpRnIRfQ6K0O4mmfV-inKVz8HkHyL5dvalL2jSzXyXXrtbcJrce6MNsvOggI0uSEM3MlWodkPOJes1Qy4/s320/vlcsnap-2020-06-06-16h42m05s668.png" width="320"></a></p><p>

Although the basic BIOS was based on the TI's and the title screen in particular <a href="https://4apedia.com/index.php?title=File:Main_TI_Startup_Screen.png">is very similar</a>, Tomy prominently advertised it was a 16-bit system, yet focused more on games and graphics than programming. Like the unexpanded 99/4 and 99/4A, all of the included 16K RAM in the Pyuuta is dedicated to the VDP, for which Tomy created a built-in paint program and a highly constrained dialect of BASIC ("G-BASIC") to manipulate screen elements and sprites with katakana keywords. It ran using a 10.738635MHz 945/88 crystal divided by three for video (standard NTSC 315/88 3.579545MHz) and four for the CPU (945/352, 2.68465875MHz). The processor clock speed was slower on paper than the 3MHz 9900 in the 99/4A which came off a 12MHz crystal, but the Pyuuta was nevertheless faster because of the 9995's efficiencies and a critical architectural difference I'll discuss shortly.
</p><p>
The Pyuuta was a reasonable success in Japan and Tomy decided to export it to other markets by translating the OS and G-BASIC to English. However, British importer Adam Imports sent this first prototype back, finding G-BASIC too limited to be commercially viable. As an upgrade TI must have provided (unwittingly or otherwise) the code for TI Extended BASIC to Tomy to port, since Tomy BASIC has similar to nearly identical tokens, memory usage and syntax. This updated version was imported more or less directly by Adam Imports as the Grandstand Tutor, and its dual-BASIC system was released as an add-on device for the Pyuuta and then built-in as well to the next generation system Tomy themselves intended to sell in the United States. This was the Tomy Tutor in 1983.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrg6HiLlKzvZYmt0UqqVjIPZQO2VwkPlCcKGhOiuhlUZhtOcEjXrgrrn19EdvIxYF3_thoFC__XrxfxwHLmgjWW4tYyAyZSZWGJBa6FTyHjyvpmYLoOA1hVMjZT8TvWYA4D3KPLus3_yFu4GQ7KARNQPy13QLAA-uILIVw4r6N19kfBFJGgv2NBlX07qs/s1256/tomy-purcell-1a.jpg"><img alt="" data-original-height="1256" data-original-width="1100" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrg6HiLlKzvZYmt0UqqVjIPZQO2VwkPlCcKGhOiuhlUZhtOcEjXrgrrn19EdvIxYF3_thoFC__XrxfxwHLmgjWW4tYyAyZSZWGJBa6FTyHjyvpmYLoOA1hVMjZT8TvWYA4D3KPLus3_yFu4GQ7KARNQPy13QLAA-uILIVw4r6N19kfBFJGgv2NBlX07qs/s320/tomy-purcell-1a.jpg"></a></p><p>

Tomy USA hired <i>Real People</i> host Sarah Purcell as their spokeperson, who touted the computer as a system so easy to use that kids could teach themselves how to use it (it's true: I did!). She wasn't as high-profile as TI's Bill Cosby, but she was hardly unknown to the target demographic('s parents), and she hadn't committed any criminal offenses either. Unfortunately their otherwise promising marketing campaign was most notable for the most frequent use of the word "real" in a single pamphlet, as well as a five-day kick-the-tires-for-free deal which was about as successful as Apple's later "Test Drive a Macintosh" promotion. (NARRATOR: By which he means it wasn't.)
</p><p>
Like the Pyuuta, Tomy prominently touted the Tutor's 16-bit processor, but provided no way to directly access it. A couple years earlier the Tutor might have been a compelling system and one of the "real" kids on the box even wrote me a few years back to mention he rather enjoyed the games, but the video game crash was in full swing by then and Tomy's intentional toy aesthetic quickly became the kiss of death. No wonder Fred R. Rated was trying to get rid of them.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKUgrA66KPHkwuvb85aZ1A9is588VtYCRXETRBLgwi7hPuRGpKRhp9ry69UGLXcI4Y1fi3SeeYcqfLljFR5k9ffr8UWkjonwgO0XO-AZAIIbIaQePdtY3Pjbz7JImw1gIq1q5gxNZXPpQvkhrZiL2E98gmyx7jJhlMg3CCFJlb2mDyX0VyeaXy-DNdOSk/s2048/DSCN6996.JPG"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKUgrA66KPHkwuvb85aZ1A9is588VtYCRXETRBLgwi7hPuRGpKRhp9ry69UGLXcI4Y1fi3SeeYcqfLljFR5k9ffr8UWkjonwgO0XO-AZAIIbIaQePdtY3Pjbz7JImw1gIq1q5gxNZXPpQvkhrZiL2E98gmyx7jJhlMg3CCFJlb2mDyX0VyeaXy-DNdOSk/s320/DSCN6996.JPG" width="320"></a></p><p>

Tomy apparently lost so much money on the Tutor that they ended up producing very few peripherals for the system in either the United States or Japan. This picture shows the complete setup in the United States, namely a tape recorder with custom electronics, an Anglicized version of those disc-based joy controllers which made the Intellivision seem like a paragon of ergonomics, and a tough-as-nails single joystick sold as the Joy Stick (insert joke here). And that was it. The floppy disk drive, printer and speech synthesizer promised in both countries never appeared as other than a single picture in the Purcell pamphlet, the printer interface sold in Japan as part of the BASIC-1 add-on was never sold abroad, and most critically the "TI Adaptor" — nothing less than a Tomy rebadge of the <a href="http://unige.ch/medecine/nouspikel/ti99/pebox.htm">TI Peripheral Expansion Box</a> — that would have included additional memory and storage options was vapourware too.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVGlKWNYRy7BcQX5O-mZZci-wxRlhXuY6L8bHJUx75aJ7OOtuXeAV43JW__o8eSgePK7eKu-c2lxNZJo39F8_9uNF1sz1g99mMUk30cs_BbsN7NxCn4CF1ATfFvFiI95F2fdrEqD5Z3XBOPmfDxdy78s4w2bJUM8oZWerhR1gGdLEc1IElZ7gP-8GPXKw/s2048/DSCN6980.JPG"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVGlKWNYRy7BcQX5O-mZZci-wxRlhXuY6L8bHJUx75aJ7OOtuXeAV43JW__o8eSgePK7eKu-c2lxNZJo39F8_9uNF1sz1g99mMUk30cs_BbsN7NxCn4CF1ATfFvFiI95F2fdrEqD5Z3XBOPmfDxdy78s4w2bJUM8oZWerhR1gGdLEc1IElZ7gP-8GPXKw/s320/DSCN6980.JPG" width="320"></a></p><p>

The Tutor was also not an exact copy of the Pyuuta either, although the core silicon (the 9995 CPU, 9918A VDP video chip [9929A for PAL] and SN76489 DCSG sound chip) is the same, primarily differing in the BIOS ROM, the absence of a Japanese character set, the presence of Tomy BASIC, and slightly different memory banking logic. The systems are otherwise nearly totally compatible such that Japanese Pyuuta cartridges will generally run on American or PAL Tutors and vice versa, language support notwithstanding, with only one of the American cartridges — its sole explicitly educational title — being specific to the United States.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinlUi6GbeIMaDwf3tczUSNVzj_5nipleTMMe_SsasJT4WreMUW3AGgBcnEHGg-6XTWs1Qris8EEa-hh_6X1dFVv8ipA9aFMSq0cOn4_Kkchn8GUsJMLgnN5KoIsM8Mzo7ZFC3j_QuX39uU-9O25d6zMEI5iuI64ACKIlMKqi4O4QFdQIgotYYkhh8Bs9g/s640/vlcsnap-2024-03-08-22h09m39s005.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinlUi6GbeIMaDwf3tczUSNVzj_5nipleTMMe_SsasJT4WreMUW3AGgBcnEHGg-6XTWs1Qris8EEa-hh_6X1dFVv8ipA9aFMSq0cOn4_Kkchn8GUsJMLgnN5KoIsM8Mzo7ZFC3j_QuX39uU-9O25d6zMEI5iuI64ACKIlMKqi4O4QFdQIgotYYkhh8Bs9g/s320/vlcsnap-2024-03-08-22h09m39s005.png" width="320"></a></p><p>

The Tutor, as with the Pyuuta before it, started with the TI 99/4A's title screen but with animation, scrolling the colour bars vertically. It felt like a friendly computer from the moment you turned it on and the larger 32x24 text cells actually reinforced that somewhat (plus making it much easier to read on our little Panasonic colour TV).

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjfH146lk5ibMVqFtD2PZ2JsoFRCj2MOSbcUNjqcu5icNOfG_92gfnubhhmGz6ALnkX2nQHaTYxHPq9sykmhx5t96jauuWk3WJcMD9xP6bLQ4HWjH4WB70VkcvfunG5xbfqNt-Lw8E29pu60my5pNY6PrRbZoWTdyjQozI99w1SD2JS_Jam66vQmryrpAA/s640/vlcsnap-2024-03-08-22h09m52s550.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjfH146lk5ibMVqFtD2PZ2JsoFRCj2MOSbcUNjqcu5icNOfG_92gfnubhhmGz6ALnkX2nQHaTYxHPq9sykmhx5t96jauuWk3WJcMD9xP6bLQ4HWjH4WB70VkcvfunG5xbfqNt-Lw8E29pu60my5pNY6PrRbZoWTdyjQozI99w1SD2JS_Jam66vQmryrpAA/s320/vlcsnap-2024-03-08-22h09m52s550.png" width="320"></a></p><p>

The Tutor menu, directly translated from the Japanese menu in the Pyuuta, was also inspired by the TI's menu, but instead uses a "pointer" rather than selecting items by number. It was likewise very easy for a child to grasp. On the Tutor, the GRAPHIC and BASIC modes are always available as part of its sizeable 48K of built-in ROM. The CARTRIDGE option only appears if a cartridge is detected, which we'll talk about in a moment.
</p><p>
Unlike the TI 99/4A which used serially addressed "GROMs" for BASIC and much other software (which on top of that can't contain native code and are necessarily written in an interpreted bytecode called GPL), all of the Tutor ROMs and cartridges are directly connected to the bus and therefore tremendously faster. Although Tomy BASIC is also based on GPL, Tomy's GPL dialect is a stripped-down variant specialized for this task, and the program text is directly accessible like any other data in ROM. All of this, plus the 9995's prefetch, are why the Tutor's (and Pyuuta's) slightly slower clocked CPU runs so much more swiftly in practice than the 99/4A's.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjM-GhMCBVPKpQuRyLt6piPlv2qiSaslnBd7JvGaOxmrpOA2L9NPOFpB9jxxNjvjuLBZLEv0GPrVf4cAG_Ho4WEzulMtRzIepHlk3fx4v3Jf7yBaGs8Enb1uGoSF1rfS-5EbO3h323QGnoqk1ycc7T3yjSbFp4AafngkrVo5lKNlMNbE2ngSyf9KTHZHwM/s640/vlcsnap-2024-03-08-23h03m38s747.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjM-GhMCBVPKpQuRyLt6piPlv2qiSaslnBd7JvGaOxmrpOA2L9NPOFpB9jxxNjvjuLBZLEv0GPrVf4cAG_Ho4WEzulMtRzIepHlk3fx4v3Jf7yBaGs8Enb1uGoSF1rfS-5EbO3h323QGnoqk1ycc7T3yjSbFp4AafngkrVo5lKNlMNbE2ngSyf9KTHZHwM/s320/vlcsnap-2024-03-08-23h03m38s747.png" width="320"></a></p>

<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFncYmij7Yd-YAWLqGVu_UqKmnh21bo5ScY1Z2Jwh6tZLh65VvRWLn6f6diOZvtVq3HurP-1JFqsnToyrrJnhyMoaTgAOqy-Unbt5fe-xqx8W4KcSnClrSqoF_82KwmBe2GoNqzH8jEolLv9gOulJFuQvVko9gXuw49H0y6BYqUSTQltpPFnznyYumQY4/s640/vlcsnap-2024-03-08-23h04m30s526.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFncYmij7Yd-YAWLqGVu_UqKmnh21bo5ScY1Z2Jwh6tZLh65VvRWLn6f6diOZvtVq3HurP-1JFqsnToyrrJnhyMoaTgAOqy-Unbt5fe-xqx8W4KcSnClrSqoF_82KwmBe2GoNqzH8jEolLv9gOulJFuQvVko9gXuw49H0y6BYqUSTQltpPFnznyYumQY4/s320/vlcsnap-2024-03-08-23h04m30s526.png" width="320"></a></p><p>

The Tutor's GRAPHIC mode is a simple built-in paint program that takes full advantage of the 9918A's 256x192 bitmap mode, offering two colours per line in each 8x8 cell — substantially better than systems like the C64 or ZX Spectrum with two colours per <em>cell</em>. A little rocket cursor moved with the arrow keys indicated the current location, and when you were at the desired cell, you could then edit it using the palette and the editing square on the lower right. GRAPHIC mode also supported four large 16x16 sprites — to hide the 9918's limitation of no more than four sprites per scan line — which could be crudely moved or animated by GBASIC programs (no hyphen in the English name).

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhneCVuucKO4LIZ_gC_fYgyrtXFBX4Pj8s8D_vFS_fmg3IR8P3Xyv6DLh3n3uqlxz43TdOyqm2leb4MgxpuQi1SinWsTituvEv44GQJHhYaFMENJJYK-3zf6002ytBbizl2Yqg7QVeNniDO_x51AvO4qr_uOSq6cTIYtisfjyRZIYBCLRUjqxod7Y2VtR4/s640/vlcsnap-2024-03-08-23h05m24s256.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhneCVuucKO4LIZ_gC_fYgyrtXFBX4Pj8s8D_vFS_fmg3IR8P3Xyv6DLh3n3uqlxz43TdOyqm2leb4MgxpuQi1SinWsTituvEv44GQJHhYaFMENJJYK-3zf6002ytBbizl2Yqg7QVeNniDO_x51AvO4qr_uOSq6cTIYtisfjyRZIYBCLRUjqxod7Y2VtR4/s320/vlcsnap-2024-03-08-23h05m24s256.png" width="320"></a></p><p>

GBASIC, however, was so limited — barely any string support, small program space, terse syntax and a couple severe bugs — that I spent most of my early elementary life in Tomy BASIC. I wrote some games and some simple utilities and saved them to tape, and I still have one of these tapes, though I carelessly overwrote most of its contents later. Yet despite its lineage as a descendant of TI Extended BASIC, Tomy BASIC intentionally supported less than its ancestor, likely to keep inquisitive kids like me in a memory-safe "sandbox." There were commands for sound, character graphics and some custom character shapes, but most of these features were poorly documented (if at all), and there wasn't any supported facility for directly accessing bitmapped graphics or sprites — let alone arbitrary reads and writes to VDP memory.
</p><p>
Still, the "sandbox" concept ended up being unsuccessful because a number of Tomy BASIC commands don't bounds-check properly, and I remember very clearly crashing it multiple times one day trying to figure out how the <tt>COLOR</tt> keyword worked. (Alas, I was too young at the time to realize the significance of what I'd done.) Such bugs even facilitated a clever hack to enable sprites, though this hack unsurprisingly has notable limitations, and there was no way to directly access VDP registers for other features like high resolution or 40-column mode. BASIC was as much as you could do on a stock Tutor and other than a small user group in the Los Angeles area I didn't know anyone else who had one. It wasn't until several years later that I got the Tutor back, and by then I was knee-deep in Commodore programming, including handcoding 6502 machine language opcodes in the Epyx FastLoad monitor. The Tutor had been fun but I could do more with the Commodore 64 and the 128 we got after that.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiBeEZlV-lQ4x-ncVfMYQ7SQEOquv7EvSvZ38M2rUjLlme9e8YeaAF9_-Gxpw7b4QcB4vN5f_0QdSogkjoQXIfUIz043w8Tni__0kP9yvoTqgAkVZ6nADI9NycgRJ-qeWD1B3xx-sSGQkOJ-ylFPyh1AVGBvIOY1O1i2g5A6XzR1IZsLQ7Zfj_xHagK9TM/s743/tutti.png"><img alt="" data-original-height="743" data-original-width="728" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiBeEZlV-lQ4x-ncVfMYQ7SQEOquv7EvSvZ38M2rUjLlme9e8YeaAF9_-Gxpw7b4QcB4vN5f_0QdSogkjoQXIfUIz043w8Tni__0kP9yvoTqgAkVZ6nADI9NycgRJ-qeWD1B3xx-sSGQkOJ-ylFPyh1AVGBvIOY1O1i2g5A6XzR1IZsLQ7Zfj_xHagK9TM/s320/tutti.png"></a></p><p>

Emulation came late to the Tutor both due to its obscurity and a profound lack of hardware documentation. In 1998 yours truly wrote the first Tutor "simulator," which I christened Tutti, ironically for the Commodore 64 so that it could be run anywhere a C64 emulator was supported (back then I used C64S and later Frodo). It was designed to mimic the Tutor's look and feel using a character set I labouriously drew by eye, a custom keyboard driver, raster interrupts for the 9918A's split screen modes, simple tone audio, and colour approximations with the VIC-II's palette. It had a fully functional title screen and menu plus reasonably accurate looking but very primitive GRAPHIC, GBASIC and BASIC modes. For its behaviour I manually figured out how fast things ran and added delays and tweaks, and reverse-engineered the BASIC and GBASIC editors. Surprisingly, a portion of Tutti is actually part of the project we'll do today, so hang onto it in the back of your head.
</p><p>
It took five more years for the first true Tomy Tutor emulator, namely Ian Gledhill's 2003 TutorEm with functional 9995 and 9918A emulation; it was very slow, very buggy, incomplete and Windows-only, but it really did work and finally opened the floodgates. Later that year MESS added a driver written by Raphael Nabet in 0.70 that I helped beta-test and it is still part of modern MAME. While I have since updated TutorEm and made many fixes for my tape-enabled Tutti II emulator, we'll use MAME for debugging this entry because it is currently the only Tutor emulator that handles cartridge ROMs.
</p><p>
Tutti didn't emulate the CPU because I didn't know how its I/O worked and it would have been impossible to execute code in any performant fashion on the C64; even the relatively lightweight 6502-on-6502 emulator I maintain for <a href="http://oldvcr.blogspot.com/2023/02/instruction-fusion-and-real-serial-port.html">the KIM-1 KIMplement emulator</a> runs about 30 times slower or so than actual. I had done a little playing around with TMS9900 assembly on the 99/4A using the Editor/Assembler cartridge ("module") on a friend's machine, and I even had a basic 9900 programming book, so the 9995 wasn't really an alien architecture to me — which makes a good transition into talking about the CPU itself.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgu5-937vaMQloo_RolMe7WoNEOsNITOtReCsf1I9RNixosUeqv7kS_tARyA7gtdVBxyWVGUP8K2Zf98N9N9-V82zAOGrHWE0mFlPujPPXbN64FbZLdxDmUf-lrj4wV2R1IxFXgqsg_4nKt-gWi7MM0JngJNYhoRVaTULP6DdMCu7Huup0agMe9df8vlqM/s2846/ti990.jpg"><img alt="" data-original-height="2030" data-original-width="2846" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgu5-937vaMQloo_RolMe7WoNEOsNITOtReCsf1I9RNixosUeqv7kS_tARyA7gtdVBxyWVGUP8K2Zf98N9N9-V82zAOGrHWE0mFlPujPPXbN64FbZLdxDmUf-lrj4wV2R1IxFXgqsg_4nKt-gWi7MM0JngJNYhoRVaTULP6DdMCu7Huup0agMe9df8vlqM/s320/ti990.jpg" width="320"></a></p><p>

The original TI-990 minicomputers supported multiprogramming in a then-innovative fashion: most of their registers were actually stored in RAM. The only CPU-internal registers are the program counter (PC), a Workspace Pointer (WP) that indicated where in RAM the 16 registers (32 bytes) reside, and a Status (ST) register for flags. This meant that a context switch could be as simple as merely changing the PC, WP and ST registers to those of the new task. Though zero or direct pages on CPUs like the 6502 or 6809 is a related concept, the 990 WP was more versatile and indeed absolutely intrinsic to how the 990 operated. It has a generally orthogonal instruction set for the time (<i>ceteris paribus</i>), and aside from R0 not being valid as an index the registers can be used for any general purpose, though certain instructions are fixed to specific registers like R11 as a link register for subroutine calls or R12 as the address for bit-serial I/O over the Communications Register Unit bus. Byte operations exist but all word accesses are aligned to even addresses.
</p><p>
For the TI 99/4 in 1979 (and later the 99/4A), TI determined that designing a full 16-bit system around the 9900 would have required new chips for its exclusively 16-bit bus, making the effort too expensive for a home computer. TI solved this problem by devising <a href="http://www.unige.ch/medecine/nouspikel/ti99/architec.htm">two buses</a>. The most directly connected 16-bit bus hosted the lowest level system ROM with the GPL interpreter plus 256 bytes of "scratchpad RAM" which could store eight complete sets of registers, composed of two 128-byte 8-bit static RAMs wired as low and high bytes (the 9900 is big-endian) which the CPU could access in parallel. SRAM was expensive, however, so the remainder of the machine's RAM was 16K of dynamic RAM given to the VDP, which has its own DRAM refresh circuitry. Unfortunately, although the VDP was on this 16-bit bus also, the VDP only supported byte accesses and ignores the lower half of the word, slowing DRAM reads further. Worse, everything else was behind the second "multiplexed" 8-bit bus, where a small circuit stalled out the CPU on reads until two 8-bit fetches could assemble the full 16 bits. While this meant less expensive 8-bit parts could be used, the cost reduction also cost a significant amount of performance.
</p><p>
The use of SRAM suggests that the 99/4 was originally intended to use a different chip that had RAM on-die, where refresh circuitry wouldn't have been needed, but cost and market considerations apparently prevailed. The intended CPU may have been something like the 1979 TMS9940 with an on-chip CRU, 2K of ROM, a decrementer and 128 bytes of SRAM, or the later TMS9985 with 8K of ROM and 256 bytes of scratchpad, though neither would have been ready in time for the 99/4. As mentioned earlier, after the disadvantages of the 9900's strict 16-bit data bus became more acute TI moved the multiplex circuitry on-chip and exposed only an 8-bit bus starting with the TMS9980 — but this also doubled access time to its external scratchpad RAM, condemning it to lower-performance applications <a href="http://oldvcr.blogspot.com/2022/09/what-kim-1-really-needs-is-bubble.html">like TI's Silent 700 teletypes</a>. TI's first attempt was to turn the 9940 into the 9985 by adding the same multiplexer and bumping up the ROM and scratchpad RAM, which were both internal and thus avoided the bus problem. There was reportedly no market appetite for the 9985, so TI removed the ROM and reduced instruction latency further by using prefetch steps in the microcode which could be parallel with a preceding ALU operation. This is the 9995, released in 1981.
</p><p>
(A digression: how do you use the 9900 to implement a language like C? The simplest method is to just implement a stack, which is facilitated on the 990/9900 by its support for post-increment addressing. This is in fact the approach taken by <a href="https://forums.atariage.com/topic/164295-gcc-for-the-ti/">the GCC port for the TMS9900</a>, which treats the CPU more or less like a modern CPU with a link register [usually R11], defines an ABI for arguments and volatile/non-volatile registers, and reserves one of the registers as the stack pointer, in this case R10. R10 is a 16-bit register like all the others, so the stack can be as large as the addressing space, a significant improvement over C-hostile architectures like the 6502. Another way is to go "full Berkeley" and treat the WP as a means to implement register windows, a la SPARC: the WP can be moved to any word-aligned address, so a caller can move the WP down a few notches, set up its arguments, call the routine, capture the return value and set it back. However, the 9995 — and for that matter the stock 99/4(A) — doesn't have CPU-addressable RAM other than the scratchpad, so in the base configuration neither system would have much capacity for function calls no matter how they were implemented. The Tomy BIOS gets around this by simply moving the WP or individual registers around by hand, which is space efficient, but also makes some individual routines or subsections more difficult to use because there is no standard calling convention.)
</p><p>
For our purposes, although the 9995 has a few extra instructions, we can treat it in practical terms as a faster 9900. The main difference at the assembly level is where the scratchpad RAM lives: since it's external to the 9900, its location is wherever it gets decoded (e.g., in the $8000 range in the 99/4A), but in the 9995 the internal RAM always occupies $f000-$f0fb (for compatibility with the 9900 the last four bytes are seen at $fffc to $ffff and serve as the NMI vector). The 9995 also has an internal decrementer at $fffa but we won't need to deal with that right now for this particular project. The only other concern is that the prefetch in the 9995 will affect self-modifying code if it changes the very next instruction which our example doesn't do either. Otherwise, programming it is almost completely the same.
</p><p>
The Tomy BIOS obviously has support routines for displaying text and reading the keyboard, but we're not going to use them for several reasons: first, I'm not particularly conversant in them, second, we can probably do it faster and more flexibly ourselves, third, it's good education, and fourth, they kind of suck. For input, while we can't do anything about the Tutor's mushy Chiclets or its single SHIFT key, we certainly can improve upon the BIOS' terrible key rollover. Additionally, the Tutor's default character set is inconveniently organized for modern applications: wile you can apparently use the <tt>SCELL()</tt> (the Tomy equivalent of TI <tt>CALL HCHAR</tt>) command to store characters by their ASCII value directly into VDP screen memory, this is in fact an artifact of BASIC and not actually how the glyphs are laid out in VDP RAM. We would like to organize our character set to be <em>exactly</em> the same as true ASCII so that no translation is needed, as well as support the 9918A's 40 column text mode which the Tutor BIOS never did. To do all of these things, we'll devise our own library.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGrhdpabw63j0O2Mdhz4PEqJXoElkcbtC0HheH-Ubfc_mIemumqNXCLhVgV7Ge9HDIoRX0FDkvl977NxVj3NI9d4B5FCK_uJkrHR4NbYxPAh82M7OYq7k-cf62oo7_1xOW4qm0seXuO6lV7fzrgmBL0Ehaf8Zw5kEz3ep5EA7YCpfkqeq93Aeq3wlHiC4/s4080/PXL_20240309_062046613.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGrhdpabw63j0O2Mdhz4PEqJXoElkcbtC0HheH-Ubfc_mIemumqNXCLhVgV7Ge9HDIoRX0FDkvl977NxVj3NI9d4B5FCK_uJkrHR4NbYxPAh82M7OYq7k-cf62oo7_1xOW4qm0seXuO6lV7fzrgmBL0Ehaf8Zw5kEz3ep5EA7YCpfkqeq93Aeq3wlHiC4/s320/PXL_20240309_062046613.jpg" width="320"></a></p><p>

The homebrew hardware we'll use is all from TeamEurope (hi Klaus!), who made one of the earliest Tutor flash multicarts. This is <a href="https://team-europe.blogspot.com/2023/12/tomy-tutorpyuta-ram-cartridge-updated.html">his newest unit</a> which is the only currently available CPU RAM expansion for the Tomy Tutor and Pyuuta, providing 16K of CPU-accessible RAM in two 8K ranges as well as multiple 32K ROMs accessible by DIP switch from a 512K flash ROM. (This cartridge was actually conceived of first by <a href="https://tms9918.hatenablog.com/entry/2018/01/18/211846">tanam</a>, but this unit is an expansion of that design.) We'll explore this device more in <a href="http://oldvcr.blogspot.com/search/label/tomy%20tutor">a future entry</a>. However, we don't need the RAM nor the extra ROM capacity today and the device additionally requires a passive I/O port adapter for those extra addressing lines, so we'll use one of his simpler items.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj7tOBwn6hATigqw5kzvfd3nGIGywU43gr7EhRwkAM3yyL20-8aLAzFlIR5UUCug8P9JFCVQSPAmB1E3EgjQTCYJxgsIUwOT951qarJABDve9W7Nz_-Ef642OOcpHZNTavEQp-gsF-4WgTL10vZpnU9Wx1g1qGzenk-TtzGO8YFfkLBIk3nI_j0nw-wZlU/s4080/PXL_20240309_041416783.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj7tOBwn6hATigqw5kzvfd3nGIGywU43gr7EhRwkAM3yyL20-8aLAzFlIR5UUCug8P9JFCVQSPAmB1E3EgjQTCYJxgsIUwOT951qarJABDve9W7Nz_-Ef642OOcpHZNTavEQp-gsF-4WgTL10vZpnU9Wx1g1qGzenk-TtzGO8YFfkLBIk3nI_j0nw-wZlU/s320/PXL_20240309_041416783.jpg" width="320"></a></p><p>

That simpler item is <a href="https://team-europe.blogspot.com/2019/05/flashcartsmulticarts-for-tomy.html">this one, his first</a>. It has every USA and Japanese cartridge ROM except the very rare USA and Japanese Demonstration cartridges — with a little luck I'm hoping to rectify that soon. It also lacks the later "3-D" series (a misnomer, they weren't 3D with the possible exception of <i>Rescue Copter</i>) which require the extra addressing line for 32K ROMs and are provided on a separate multicart. 

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgF3tyhvlj-82eizllcz_qMSov3PPOTRp7F-2UEfGhF67ygoSrNV9KRvJnnrc-t7ThnWWsZ9q6fbTbyJe9DYDNaNGBRQcsgTDXf8_0949oPzsNFJIzdaMKU9UmnPTR_MojBVb0i-7EMTFw_Xs__DzS8WZ_Be3xPSCmDfVmBa7uwZ8GsEgIo0-_ju0rgPgU/s4080/PXL_20240309_041344629.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgF3tyhvlj-82eizllcz_qMSov3PPOTRp7F-2UEfGhF67ygoSrNV9KRvJnnrc-t7ThnWWsZ9q6fbTbyJe9DYDNaNGBRQcsgTDXf8_0949oPzsNFJIzdaMKU9UmnPTR_MojBVb0i-7EMTFw_Xs__DzS8WZ_Be3xPSCmDfVmBa7uwZ8GsEgIo0-_ju0rgPgU/s320/PXL_20240309_041344629.jpg" width="320"></a></p><p>

The flash ROM itself is a socketed off-the-shelf 512K Microchip Technology SST39SF040. These chips are end-of-life but they're still inexpensive and easy to find as DIPs or PLCCs, and by using Klaus' board I don't need to make one of my own. For this I started with another DIP 39SF040 that I got cheaply since we won't need to do too many insertion cycles on the socket to get this simple program working. There is free space in the default cartridge loadout for four more 16K ROM images and we'll use two of them.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkYqTAm_5fhqueXig4l8tzemqMWNbPG_dQ68W07363wsgiTL8h0AbBJicYi3dDAoDLkshN_h0QJe22eK84xwZx3d64srikCnO4gWoDlz2lM-3Q09OC0Qb07SiQhLsin3Zvtvb8WJHM6nIWRHresMiM67_qiYditZIOdWNA3aI7r40UPr9zVRn-KQeo5Tg/s4080/PXL_20240309_071547288.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkYqTAm_5fhqueXig4l8tzemqMWNbPG_dQ68W07363wsgiTL8h0AbBJicYi3dDAoDLkshN_h0QJe22eK84xwZx3d64srikCnO4gWoDlz2lM-3Q09OC0Qb07SiQhLsin3Zvtvb8WJHM6nIWRHresMiM67_qiYditZIOdWNA3aI7r40UPr9zVRn-KQeo5Tg/s320/PXL_20240309_071547288.jpg" width="320"></a></p><p>

Pretty much any programmer will work for this. Since my daily driver is a POWER9 Linux workstation, I use the open-source <a href="https://gitlab.com/DavidGriffith/minipro">minipro</a> and this older XGecu TL866-II+ (minipro has experimental support for the newer T48 but the TL866-II+ is well-tested with it; unfortunately you can't trust many of the eBay and Amazon sellers to get you the older model). 
</p><p>
For the cross-assembler, we'll use <a href="http://john.ccac.rwth-aachen.de:8000/as/">the AS macroassembler</a>, which is multi-architecture, cross-platform, open-source and has specific support for the 9995. It builds just fine on any modern OS, including Linux and macOS. The macroassembler will create an intermediate object which we then link with an included tool into the final executable.
</p><p>
The Tomy machines place their VDP ports at $e000 and $e002 in the 9995's regular addressing space, while the keyboard and joy controllers (which share keyboard lines) are on the CRU bus at $ec00 through $ec70 with each group of eight lines separated by 16. The "little" 8K and "medium" 16K cartridges both are mapped to $8000-$bfff, where the Tutor expects to see two $55 bytes at $8000. If these two $55 bytes are present, the CARTRIDGE option is enabled in the menu, which triggers a jump to $8002. (There are other ways to signal its presence, but this method is the simplest and the one used by the majority of official Tomy cartridges.) So we'll start off with this:
</p><div><pre>        padding off

        ; vdp ports on the tutor
vdpwd   equ 0e000h
vdpwr   equ 0e002h
        ; CRU address for reading the keyboard
keycru  equ 0ec00h

        org 08000h

        ; cartridge signature word
        word 05555h
</pre></div>
<p>
The leading zeroes for these particular 16-bit values are a required quirk of AS. Since we're using all our own routines, we don't want any interference from the BIOS, so we'll turn off all interrupts by setting the interrupt mask to zero and load the WP with the lowest address of the 9995's built-in scratchpad RAM. (We'll have more to say about interrupts later.)
</p><div><pre>        limi 0
        lwpi 0f000h     ; don't even trust the Tomy OS here
</pre></div>
<p>
The Tomy Tutor BIOS gives us literally nothing to work with anyway: before the cartridge is started, the registers are set to default values and the entire VDP RAM is cleared. That means there's no screen matrix nor a character set, and we'll have to write them to VDP RAM ourselves. (The expectation is that you'd call the BIOS' own utility routines to set those up, and that's indeed what regular Tomy cartridges do, but we're not going to do that here.) To make working with the VDP a bit more convenient, we'll construct a little utility subroutine.
</p><div><pre>vdpr    ; write to VDP registers
        ; MSB of r0: command nybble + value (8r = register,
        ; 4x = MSB VDP RAM for write, 0x = for read)
        ; LSB of r0: new register value (xx) or LSB of VDP RAM address
        ; the swapping around gives enough time for the VDP to operate,
        ; and we have no IRQs on, so nothing will interfere
        swpb r0
        movb r0, @vdpwr
        swpb r0
        movb r0, @vdpwr
        b *r11
</pre></div>
<p>
Recall that the 9918A only has an eight-bit data bus, so we must communicate with it through byte-sized operations. This subroutine takes a single 16-bit argument in r0 that either encodes an absolute VDP RAM address for reading or writing, or encodes one of the eight VDP registers and the byte to store in it. (Because of the way these addresses are represented, i.e., either $4xxx to write or $0xxx to read, a "super 9918A" would need to implement some sort of bankswitching register to handle more than 16K. The only other supported RAM size for the 9918A is 4K.) The LSB goes out on the bus first and the 9995 is big-endian, so for each byte we swap them before sending it to the 9918A's control register, exiting back to the caller through r11 as our link register. As a happy convenience the swap operation takes just long enough for the 9918A to handle the bus transaction and be ready for the next. With that, we can set the following:
</p><div><pre>        ; register 0 turn off bitmap and external video
        li r0,08000h
        bl @vdpr
        ; register 1
        ; - 16K mode
        ; screen off
        ; no IRQs
        ; no 40 column text mode (except if we asked for it?)
        ; no multicolour
        ; no bit 5
        ; normal 8x8 sprites
        ; normal sized sprites
        li r0,08180h
        bl @vdpr
        ; register 2: put screen table at 0800h
        li r0,08202h
        bl @vdpr
        ; register 3: put colour table at 0c00h
        li r0,08330h
        bl @vdpr
        ; register 4: put character set at 0000h
        li r0,08400h
        bl @vdpr
        ; register 5: put sprite attributes at 0000h
        li r0,08500h
        bl @vdpr
        ; register 6: put sprite pattern table at 1000h
        li r0,08602h
        bl @vdpr
        ; register 7: white text on green background
        ; (the only colours available for 40-column)
        li r0,087f2h
        bl @vdpr
</pre></div>
<p>
The locations for the screen table, colour table, character set, sprites and so forth are encoded as <a href="http://www.unige.ch/medecine/nouspikel/ti99/tms9918a.htm#Registers">multiples of particular alignments</a>. For our character set, we'll reorganize the Tutti one to match ASCII order (I told you we'd be coming back to that), add that to our binary and copy it in. We're only using positions 32-127, so there is plenty of space for expansion if we want to add graphics characters or an alternate font weight (for this purpose I just added a reverse/inverse set). Once we set the VDP memory address, we can just keep sending data to the data port as the VDP's address internally autoincrements with each write or read.
</p><div><pre>        ; load our font to &gt;0000
        li r0,04000h
        bl @vdpr
        li r1,fontt
lup     movb *r1+,@vdpwd
        ci r1,fontt+00800h
        jne lup
</pre></div>
<p>
We go on to clear our screen in the same way (by storing the appropriate number of space characters starting from the top left of screen memory), then set the colour matrix (if 32 columns), print our character set and display a welcome message in similar fashion.
</p><p>
Next, we want to accept keyboard input and echo it to the user. Despite the rubbery nature of the keycaps themselves and their non-standard layout, the keyboard matrix proper is actually pretty good quality: each key independently sets a particular bit in the matrix and some quick tests show there's little to no shorting or ghosting. Reading it is a simple matter of requesting every key bit in groups of eight from the CRU at their specific addresses. However, like any keyboard handler, we'll need to properly debounce the keys, and this is where the Tomy BIOS is particularly bad: if you type too quickly and multiple keys are down as you transition from one keys to the next, the keyscan routine will fail to make a match and the new key will be dropped. This makes the Tutor's already somewhat mushy keyboard even worse to type on, an absolutely needless situation since the Tomy keyboard has all the <em>hardware</em> requirements to implement N-key rollover and is only let down by its <em>software</em>. The solution is to track each individual key bit using the debounce matrix to filter out key bits we already know were previously down. This is made a bit easier by the fact there's only one modifier key to watch (i.e., SHIFT), but the principles are the same.
</p><div><pre>        ; scan keyboard
        ; needs 16 bytes of scratchpad RAM
keyzone equ 0f020h
keezc   clr r0                  ; clear debounce
        mov r0,@keyzone+8
        mov r0,@keyzone+10
        mov r0,@keyzone+12
        mov r0,@keyzone+14
keez    clr r9                  ; clear test
        li r2,keyzone
        li r12,keycru-16
keezl   ai r12,00010h
        clr r0
        stcr r0,8
        movb r0,*r2+
        socb r0,r9              ; bitwise or
        ci r2,keyzone+8
        jne keezl
        ci r9,0
        jeq keezc               ; clear debounce if nothing pressed
</pre></div>
<p>
The "keyzone" block is our current matrix followed by the debounce matrix we'll use to filter it. This section can be entered either from <tt>keezc</tt> to blank the debounce matrix, falling through to <tt>keez</tt> to read it. Reading from the CRU requires placing the CRU address (a parallel addressing space) into R12 and asking for the needed number of bits. We fetch in groups of eight bits which are in eight locations stored 16 CRU bytes apart, keeping a running logical-OR (which the 9900/9995 atypically calls <tt>soc</tt>/<tt>socb</tt> "Set Ones Corresponding" for non-immediate arguments). If the value of the running logical-OR was zero, then no key was pressed, we branch back to clear the debounce, and go scan the matrix again.
</p><p>
The simplest case is where the current state of the matrix exactly equals the last time (modulo the state of the SHIFT key). This can be checked for by exclusive-ORing with the debounce matrix, masking off the SHIFT bit. We then logical-OR all the resulting bits together and if it's zero again, we go back to scanning — but leave the debounce matrix alone.
</p><div><pre>        mov @keyzone,r2
        mov @keyzone+2,r3
        mov @keyzone+4,r4
        mov @keyzone+6,r5
        xor @keyzone+8,r2       ; xor current bits with last set
        xor @keyzone+10,r3
        xor @keyzone+12,r4
        ; clear shift bit (prevent "eeking" characters when releasing)
        andi r5,0fbffh
        xor @keyzone+14,r5
        ; if exactly equal (i.e., all zeroes), go back
        soc r3,r2
        soc r4,r2
        soc r5,r2
        jeq keez        ; don't clear debounce
</pre></div>
<p>
This is the block of code we'd use to set up key repeat, which as currently written this routine doesn't support yet (an exercise for the future). Otherwise, we need to filter the debounce to remove any keys that are now <em>up</em>, filter the new matrix to remove any keys already present in the debounce (which may give us another zero matrix again, but our keyscan table doesn't match an all zeroes matrix, so it's "fine"), and update the debounce matrix with the new bits that are down while clearing the SHIFT flag. This heavily uses the oddball <tt>szc</tt> instruction, which is an inverted logical-AND (though, like <tt>soc</tt> and <tt>ori</tt>, there is a regular immediate <tt>andi</tt> that is <em>not</em> inverted, a curious non-orthogonality in the instruction set). I won't show every store here but I'll give the overall flavour — there's probably a more efficient way to do it than I've done, but this is also pretty easy to follow conceptually:
</p><div><pre>        ; remove any bits in the debounce that aren't set currently
        mov @keyzone,r0
        inv r0
        szc r0,@keyzone+8       ; inverted and
        mov @keyzone+2,r0
        inv r0
        szc r0,@keyzone+10
[...]
        ; remove any bits in the new keyscan that were still set in debounce
        ; if we end up with a cleared keyscan, it doesn't matter since we
        ; won't be able to decode it anyway
        mov @keyzone,r0
        szc @keyzone+8,r0       ; inverted and
        mov r0,@keyzone
        mov @keyzone+2,r0
        szc @keyzone+10,r0
        mov r0,@keyzone+2
[...]
        ; update debounce, clearing shift
        ; add any new bits to debounce so they get masked off too
[...]
        mov @keyzone+4,r0
        soc @keyzone+12,r0
        mov r0,@keyzone+12
        mov @keyzone+6,r0
        soc @keyzone+14,r0
        andi r0,0fbffh
        mov r0,@keyzone+14
</pre></div>
<p>
Now with a clean set of keybits, we need to match them against a table. I organized a table of four words representing the eight matrix bytes in ASCII order so once you've found a matching set, the index into the table is the result. This table is stored at label <tt>keytab</tt> and looks like this:
</p><div><pre>[...]
        ; symbols and numbers, 32-64
        ; SPACE
        word 00000h, 00000h, 00000h, 08000h
        ; !
        word 00100h, 00000h, 00000h, 00400h
        ; "
        word 00200h, 00000h, 00000h, 00400h
        ; #
        word 00001h, 00000h, 00000h, 00400h
        ; $
        word 00002h, 00000h, 00000h, 00400h
[...]
</pre></div>
<p>
The Tutor does not have CONTROL or ALT keys, just SHIFT, nor does it have a backspace or delete. This lets us redefine our special keys (the cursor keys, MON and MOD) to generate indices in the control character range. Our table turns MOD into ^C (consistent with its use in Tomy BASIC as break), LEFT/UP/DOWN/RIGHT as ^H ^K ^M/CR ^L, RT (RETURN) as ^J/LF, and MOD as ^[/ESC. To round out other common ASCII points the default keyboard doesn't generate, ^I/TAB is encoded as SHIFT-SPACE, backtick as SHIFT-UP, tilde as SHIFT-DOWN and ^?/DEL as SHIFT-LEFT. The pipe and backslash characters remain represented by flat and degree/handaku, which have the same ASCII value. The only key our matrix table does not handle is LOCK, which would be <tt>word 00000h, 00000h, 00000h, 00200h</tt>. I'd probably implement this as a conventional CAPS LOCK defaulting to up but we'll exclude that from the logic for now. Anything not matched in the table gets a result of 0.
</p><div><pre>        ; decode key
        ; each table entry corresponds to CRUs &gt;EC00-EC70
        ; use a custom table to generate a standard ASCII value
        clr r6
        li r1,keytab
dekodl  mov *r1+,r2
        mov *r1+,r3
        mov *r1+,r4
        mov *r1+,r5
        ci r2,0ffffh            ; no key here
        jeq dekodn
        ; if the key matrix is an exact match, should be all zeroes
        xor @keyzone,r2
        xor @keyzone+2,r3
        xor @keyzone+4,r4
        xor @keyzone+6,r5
        soc r3,r2
        soc r4,r2
        soc r5,r2
        jeq dekodo
dekodn  inc r6
        ci r6,128
        jne dekodl
        b @keez
dekodo  mov r6,r0               ; got a good key
</pre></div>
<p>
Like the debounce comparator, this code XORs the current matrix value against the current table entry; if it gets all zeroes, we have a match. At the end the resulting character code is in R6 and R0. Parenthetically, the 9900 has a <tt>inct</tt> instruction that increments by two instead of just one with regular <tt>inc</tt>, useful for skipping words (you can also use an instruction like <tt>c *r1+,*r1+</tt> to increment by four in one word).
</p><p>
Because we left the VDP memory pointer at the end of our "hello world" blurb, to print the character to the screen we could simply do <tt>swpb r0</tt> to get it in the upper byte followed by <tt>movb r0,@vdpwd</tt>. This doesn't scroll at the end as there's no bounds-checking, and remember the Tutor doesn't have a backspace (control characters are simply printed as blanks anyway), but it's really really fast. However, we also want to display a cursor for we'll use our reversed space character, so we'll keep a rolling screen pointer in R7. We'll additionally have RT clear the screen and as a convenience use MON to bail out to the Tomy title.
</p><div><pre>        ; check for mon - implemented as escape
        ci r0,001bh
        jeq bye

        ; check for RT - implemented as line feed
        ci r0,000ah
        jne putc
        bl @clrscr
        b @cursor

        ; otherwise print character using a cursor
        ; overwrite previous cursor character with new character
putc    swpb r7
        movb r7, @vdpwr
        swpb r7
        movb r7, @vdpwr
        swpb r0
        ; MAME will actually allow a mov here but not the real machine
        movb r0, @vdpwd
        inc r7
        ; and print cursor
cursor  li r0,0a000h
        movb r0, @vdpwd
        b @keez
</pre></div>
<p>
The simplest way to go back to the title screen is to call the Tutor's reset vector, but paradoxically the 9900's built-in <tt>rset</tt> instruction is <em>not</em> what we want for this. There are a handful of TI-990 holdovers called <a href="https://www.unige.ch/medecine/nouspikel/ti99/tms9900.htm#External"><i>external instructions</i></a> which were used for special context switching operations, such as <tt>lrex</tt> to jump into front panel code. However, on the 9900/9995, most of the instructions with the possible exception of <tt>idle</tt> do nothing useful and in some cases could be potentially harmful depending on what's listening on the bus.
</p><p>
Instead, we'll use the low memory vectors. 9900 vectors consist of a pair of WP and PC words, with interrupt vectors starting at $0000. When an interrupt is triggered, or a vector is branched to using the <tt>blwp</tt> instruction, the WP and PC are loaded in order from those words (instantly saving the previous code's registers, assuming there is no conflict) and the previous values of WP, PC and ST are placed in the new R13, R14 and R15 respectively. The <tt>rtwp</tt> instruction then reverses everything using those registers and thus returns to the prior execution context. Theoretically the TMS9900 can support up to 16 levels of interrupt, starting at $0000 with level 0 for resets through $003c for level 15, though the 99/4 and 99/4A just wire everything to interrupt level 1. In the 9900 memory map these vectors are followed by XOP vectors for up to 16 software-defined opcodes via the <tt>xop</tt> family of instructions.
</p><p>
However, the 9995 only implements seven distinct interrupt levels, two of which are actually software interrupts (and one of those doesn't even work properly according to the manual errata). The highest level is level 0, connected to the reset pin, followed by the <tt>mid</tt> interrupt used for software opcodes, then NMIs, and then four numbered interrupts consisting of an external interrupt (1) on the INT1 pin, a not-reliably-functional arithmetic overflow interrupt (2), the on-chip decrementer (3) and another external interrupt (4) on INT2. These have their own vectors except for the MID interrupt and interrupt level 2 which share the same vector, and other than the NMI vector at $fffc all the rest come from low memory as well.
</p><p>
In this particular regard, the Tutor is no different from the 99/4A: a <tt>blwp 0</tt> will jump into the reset vector at $0000, just as if you'd powered the machine on and allowing you to go back to the menu. While the Tutor also uses the same reset vector values for levels 1 and 2, level 3 (the decrementer) runs normally to service its regular tasks and the level 4 (external INT2 triggered) interrupt is used for triggering on tape reads. On the other hand, the Tutor uses the entire XOP vector range as part of a jump table, so it isn't possible to use any XOP instructions on the Tutor with the standard ROMs (the 99/4A at least has <a href="http://www.unige.ch/medecine/nouspikel/ti99/tms9900.htm#XOP">a couple useful values there</a>). Anyway, all this is to say that a simple <tt>blwp 0</tt> will be sufficient.
</p><p>
That's pretty much it, and we're ready to assemble our first draft. I'll get to the code in a minute, but let's test it in MAME with <tt>mame tutor -skip_gameinfo -cart tello.rom</tt>. Our character set and welcome message appear beautifully though typing is a bit ... messy.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVLyQPcgPH6ZXZ9ZFDym7RWkMe848NRoMs3r5VJ0KP3kBEfzZBYNVG2Brkv9l0kRYN03QhMsbrQhSpUVR8ITZQru19OMAX0UwT9vbtpBhPqniGTK_e60yppj8v6n8rlGz-x2ltkM4RNNvlwfvtpb6f97TKX13gaprTnMk6bY35iJ0TGJDQf_PhblGGgk4/s792/mame-joy.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVLyQPcgPH6ZXZ9ZFDym7RWkMe848NRoMs3r5VJ0KP3kBEfzZBYNVG2Brkv9l0kRYN03QhMsbrQhSpUVR8ITZQru19OMAX0UwT9vbtpBhPqniGTK_e60yppj8v6n8rlGz-x2ltkM4RNNvlwfvtpb6f97TKX13gaprTnMk6bY35iJ0TGJDQf_PhblGGgk4/s320/mame-joy.png" width="320"></a></p><p>

The problem isn't our code, it's MAME's default settings. You'll find the same mojibake occurs while typing in regular BASIC as well. I mentioned that the keyboard matrix is shared with the joy controller lines (though that's actually useful because it allows you to read some keys from GBASIC which wouldn't ordinarily permit this), and because MAME defines some keys for the controller, you can't type normally with the default keyboard settings. In my case, I have a Hyperkin Trooper 2 USB joystick I use for Tutor games because it has two buttons for SL and SR, so I removed the key equivalents for the joy controllers and set it to exclusively use the joystick. Now we can type normally.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjD_pri3erbef3eNg855yPlK1RenlRvirK2xW7vB0Njp5YQLbcdhVHdrs9eeEOQYkEhu3GxAvaMVHUVLX7EZLDoePUnoHstU3cmxMku0XWsVT5CPWk80T3-h9LgOiWemgOgadyxF3U2Bk-BIH_pmFhRvqYWUUaP0f5Kr4Z-JLliJz2pOpdkTTU30sQV95g/s792/mame32.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjD_pri3erbef3eNg855yPlK1RenlRvirK2xW7vB0Njp5YQLbcdhVHdrs9eeEOQYkEhu3GxAvaMVHUVLX7EZLDoePUnoHstU3cmxMku0XWsVT5CPWk80T3-h9LgOiWemgOgadyxF3U2Bk-BIH_pmFhRvqYWUUaP0f5Kr4Z-JLliJz2pOpdkTTU30sQV95g/s320/mame32.png" width="320"></a></p><p>

And as hoped for, typing now flows beautifully. There is one more issue we need to solve, though:

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjO6ve2aurIKxK0yia2DJVsAsG0_-kAoD-JHj6ABaTZTD1nLgI58-huJw-zFymd14LlvtguZgJSqjc3amEkG2sf4dUvXPL_KYYksUJqbYazvRem-J73uBhbL9DhmyUk_N3nk0TGDi9ziLk1kQ1x8kYRXxscBJtLjh4PyNYbcGq0MBXOcQpPx5Cz-nT6Oko/s792/mame40-1.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjO6ve2aurIKxK0yia2DJVsAsG0_-kAoD-JHj6ABaTZTD1nLgI58-huJw-zFymd14LlvtguZgJSqjc3amEkG2sf4dUvXPL_KYYksUJqbYazvRem-J73uBhbL9DhmyUk_N3nk0TGDi9ziLk1kQ1x8kYRXxscBJtLjh4PyNYbcGq0MBXOcQpPx5Cz-nT6Oko/s320/mame40-1.png" width="320"></a></p><p>

I mentioned we would like this to also support the 9918A's 40 column mode, something the Tutor BIOS doesn't but would be very useful for productivity applications (the Tutor has a lot of great games but it's time it achieved its potential, darn it). With a little tweaking we can turn on the 40 column bit in VDP register 1 and adjust our message and screen layout so everything ends up in the right place. However, the 9918A can't display a 320-pixel-wide screen, so instead it displays a 240-pixel-wide screen using only the leftmost six columns of each character cell. The cells are still eight bits wide in memory; the rightmost two are simply not displayed. This sort of works for some of the characters — lowercase in particular, which makes me wonder if this was a consideration during the Tutor's development — but clearly doesn't for others.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9Dx99AZy6ioIU-yIIt8TpypSiS3gz91djNdAJcjSQ8GoW6bjk_GvAOvjjMfV70J7VlvhlYx1s5y_ampInfslL-nFgF-sqdU35uluexLcOkTHB4u2ymSVd1K2U1xe0WpNyA5yo3u4lCF6GiyF5kg5OI6vWNGVvpdHKDgq5nFSnSLpMc_g9JhKVkZESxFA/s743/ultrafont.png"><img alt="" data-original-height="743" data-original-width="728" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9Dx99AZy6ioIU-yIIt8TpypSiS3gz91djNdAJcjSQ8GoW6bjk_GvAOvjjMfV70J7VlvhlYx1s5y_ampInfslL-nFgF-sqdU35uluexLcOkTHB4u2ymSVd1K2U1xe0WpNyA5yo3u4lCF6GiyF5kg5OI6vWNGVvpdHKDgq5nFSnSLpMc_g9JhKVkZESxFA/s320/ultrafont.png"></a></p><p>

Since the font started as a Commodore 64 character set, after all, we'll go back into <a href="https://commodore.software/downloads/download/40-font-character-editors/2897-ultrafont-v-2">Ultrafont+</a> and start shrinking them down, leaving a bit of gutter space.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixfFQg0-d89t22RWlsLWsgrtF3LMORUHPSv22PxwkIll05fdFP28T4xJDEx97YTWQJnc8zYtCnnhKtQnST-A9gyMEv8vFeE0GIK1Su_PpyBX-jhgFXJSHss9fapD7UqymekT_yTeQteOAGty7TOHxmqjxMUqlrfnwoAzhxOFZ6dJyTefN4yondeRSKkEQ/s792/mame40-2.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixfFQg0-d89t22RWlsLWsgrtF3LMORUHPSv22PxwkIll05fdFP28T4xJDEx97YTWQJnc8zYtCnnhKtQnST-A9gyMEv8vFeE0GIK1Su_PpyBX-jhgFXJSHss9fapD7UqymekT_yTeQteOAGty7TOHxmqjxMUqlrfnwoAzhxOFZ6dJyTefN4yondeRSKkEQ/s320/mame40-2.png" width="320"></a></p><p>

I think we're ready to try it on the real thing!
</p><p>
I used minipro to dump the current contents of the multicart ROM and wrote up a little Perl script to do an inplace overwrite on the resulting file with our new binaries. We generate two ROM files called <tt>tello.rom</tt> (32 column) and <tt>tello40.rom</tt> (40 column), which we splice in at locations 0x70000 and 0x74000 and then burn it to flash.
</p><div><pre>% make burn
perl splice /home/censored/tutor.bin 0x70000 tello.rom 0x2000
successfully replaced 8192 bytes at offset 458752 in /home/censored/tutor.bin with tello.rom
perl splice /home/censored/tutor.bin 0x74000 tello40.rom 0x2000
successfully replaced 8192 bytes at offset 475136 in /home/censored/tutor.bin with tello40.rom
minipro -p SST39SF040 -z
Found TL866II+ 04.2.131 (0x283)
Pin test passed.
minipro -p SST39SF040 -w /home/censored/tutor.bin
Found TL866II+ 04.2.131 (0x283)
Chip ID OK: 0xBFB7
Erasing... 0.40Sec OK
Writing Code...  30.12Sec  OK
Reading Code...  4.30Sec  OK
Verification OK
</pre></div>
<p>
The multicart DIP settings for the 32-column version are (1=on) 00011 if you use those addresses. The first time I tried, the hello message appeared but typing generated no output. This was because I had a <tt>mov r0,@vdpwd</tt> instead of <tt>movb r0,@vdpwd</tt>; MAME will accept either instruction but not a real Tutor. With that corrected, we're in business!

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKniWgHE_hqJGJMj5MwUZyxKWTuowEU8KKqbv6Bn1ol8eFpLkLZJJFNRgQoSQaAAgJkuAsQtwq8ha-3kXIOrBv5MUIgmB7DhYBCNasghACSxtHViKduIxTjAAaq9KiNjiZc2RDvRH9g-6cua-Dvx2UoA0lvAWcACmBf5ikjZrl3sEh5ftjoQSIPcETYLw/s640/vlcsnap-2024-03-08-22h11m17s070.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKniWgHE_hqJGJMj5MwUZyxKWTuowEU8KKqbv6Bn1ol8eFpLkLZJJFNRgQoSQaAAgJkuAsQtwq8ha-3kXIOrBv5MUIgmB7DhYBCNasghACSxtHViKduIxTjAAaq9KiNjiZc2RDvRH9g-6cua-Dvx2UoA0lvAWcACmBf5ikjZrl3sEh5ftjoQSIPcETYLw/s320/vlcsnap-2024-03-08-22h11m17s070.png" width="320"></a></p><p>

For the 40-column version, set the DIP switches to 00010.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkm6sk62iiO8ZwUcIQ9LMU8yk3zTrhnPjdH0i0I8K1z_7080DK9MuT0nzF1tHnaxRujUTnOuyX903qnbC9U80YoFA766EOC99QZpygZFlG1nFXXnFQZym-j42ors_K1kMER2lCeTptg6krCOx05Xep9w33vbgOqNBBdl1WVAMkPldS_8Yt1q2Wsibvd4o/s640/vlcsnap-2024-03-08-22h18m41s523.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkm6sk62iiO8ZwUcIQ9LMU8yk3zTrhnPjdH0i0I8K1z_7080DK9MuT0nzF1tHnaxRujUTnOuyX903qnbC9U80YoFA766EOC99QZpygZFlG1nFXXnFQZym-j42ors_K1kMER2lCeTptg6krCOx05Xep9w33vbgOqNBBdl1WVAMkPldS_8Yt1q2Wsibvd4o/s320/vlcsnap-2024-03-08-22h18m41s523.png" width="320"></a></p><p>

These are real composite video captures from my real Tutor. Hurray! We did it!
</p><p>
Now, what things could you do with better keyboard support, true ASCII and fast character display? Well, obviously this whole proof of concept is the start of doing something more practical with the Tutor. <a href="http://oldvcr.blogspot.com/search/label/tomy%20tutor">I'll answer that question in a couple months</a> once all the parts arrive. The first order of business will be installing a PLCC adapter in the multicart so I don't have to pull the flash chip out repeatedly for testing.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjJKmoRaWSEhlk_RTiLGJA5P8238SBtHHY4TyZwK9_w5idE2YE7jKH7ea7WVo6Q7HmHljb6t_g6WpIc-1UOR5M7nmq0yvPnp4gdES2xsZ4nxygJp455pcGrrNumX1WnZGTtlNFanqewltrfqQTsOUhKUJVLhJ4O2a2BytwfcwKjG0RPDjPwfjAjxw__E-c/s2048/DSCN7059.JPG"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjJKmoRaWSEhlk_RTiLGJA5P8238SBtHHY4TyZwK9_w5idE2YE7jKH7ea7WVo6Q7HmHljb6t_g6WpIc-1UOR5M7nmq0yvPnp4gdES2xsZ4nxygJp455pcGrrNumX1WnZGTtlNFanqewltrfqQTsOUhKUJVLhJ4O2a2BytwfcwKjG0RPDjPwfjAjxw__E-c/s320/DSCN7059.JPG" width="320"></a></p><p>

Let's briefly finish our Tutor story. There are in fact two other members of the Tutor/Pyuuta family, both domestic to Japan: the Pyuuta Jr., a game console that came out between the Pyuuta and Tutor that implemented GRAPHIC mode (but no GBASIC) and could play most cartridges — but was entirely in English with no katakana support at all — and this, the last and final Tutor, the Pyuuta Mark II (variously Pyuuta mk II and Mark II). The mk II had proper keycaps with a rearranged layout and used the American Tutor BIOS instead of the Pyuuta's, with Tomy BASIC (also the same as the American Tutor's version) available as an add-on cartridge. Notably, neither system supported a composite monitor, only RF TV output, though they're pretty easy to comp-mod. Both systems have slight hardware differences from the Pyuuta and Tutor but both will run all the same cartridge games, and they also don't require special hardware for 32K cartridges. Unfortunately, their English-only nature probably didn't endear them to their home markets and the mk II can't load Pyuuta tapes either (only US Tutor ones). Likely as a result, both sold poorly, and Tomy exited the home computer market as well in 1984.
</p><p>
As for the 9995, in the end it was only ever implemented in three systems: the Tutor/Pyuuta family, a PEB upgrade called the Myarc Geneve 9640 which was basically a new TI-compatible computer on a card, and the <a href="http://powertrancortex.com/">Powertran Cortex</a>, a home and business computer first built at TI in the United Kingdom that never got released due to internal squabbles. Instead, its plans were published in the Electronics Today International magazine and a company called Powertran Cybernetics sold kits and fully assembled machines. The Cortex ran at a full 3MHz, had 64K of chip RAM (with a memory mapper supporting up to 1MB) and used a 16K PAL equivalent 9928/29 VDP for graphics, though the more advanced Yamaha/Maplin V9938 could also be substituted with up to 128K of VRAM. Floppy, serial and DMA were all supported along with a built-in BASIC and multiple operating system options, even a small <a href="http://www.stuartconner.me.uk/mini_cortex/mini_cortex.htm#using_unix">v6 UNIX port called LSX</a>. Although popular with enthusiasts, it was an obscure system then and now, and relatively few examples remain in operation.
</p><p>
While the 9995 was a much more tractable chip than its ancestors, the reliance of the 9900 series on RAM was what eventually stunted its technological evolution. In the days when it was taped out, CPU die space was expensive, so shifting register space onto cheaper RAM which often ran at a similar speed was a logical alternative. Indeed, tricks like 6502/6800 zero page are the same basic idea, using a special expanse of memory with faster access and special addressing as if it were CPU registers itself. As CPUs became substantially faster than memory, however, this architectural quirk became more of a liability and contemporary 16-bit CPUs like the Motorola 68000 and the Intel 8086 and 80286 eclipsed it. A chip like the 6502 only got away with it for as long as it did because it was incredibly cheap and incredibly common and even today still sells in quantity, neither advantage being one the 9900 or 9995 ever possessed. Today, modern CPUs have comparatively massive register files and caches as proof that the 9900 idea was a dead end. After the 99000 family, an upgraded 9900 with segmented memory only used in TI's last range of minicomputers, TI abandoned further development of the architecture in 1983 for the TMS320 DSP series and the exceptionally swift TMS32010, a much more popular (and, especially for a DSP, more conventional) processor.
</p><p>
The source code for our demonstration project along with a <tt>Makefile</tt>, the character set binaries and the keyscan table <a href="https://github.com/classilla/tello">are available on Github</a> under a 3-clause BSD license.
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Speaking without vocal cords, thanks to a new AI-assisted wearable device (114 pts)]]></title>
            <link>https://newsroom.ucla.edu/releases/speaking-without-vocal-cords-ucla-engineering-wearable-tech</link>
            <guid>39804138</guid>
            <pubDate>Sun, 24 Mar 2024 00:39:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsroom.ucla.edu/releases/speaking-without-vocal-cords-ucla-engineering-wearable-tech">https://newsroom.ucla.edu/releases/speaking-without-vocal-cords-ucla-engineering-wearable-tech</a>, See on <a href="https://news.ycombinator.com/item?id=39804138">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div>
<p><span><span><span><b>Key takeaways</b></span></span></span></p>

<ul>
	<li><span><span><span></span></span></span><span><span><span>Bioengineers at UCLA have invented a thin, flexible device that adheres to the neck and translates the muscle movements of the larynx into audible speech.</span></span></span></li>
	<li><span><span><span>The device is trained through machine learning to recognize which muscle movements correspond to which words.</span></span></span></li>
	<li><span><span><span>The self-powered technology could serve as a non-invasive tool for people who have lost the ability to speak due to vocal cord problems. </span></span></span></li>
</ul>
</div>

<p><span><span><span></span></span></span><span><span><span>People with voice disorders, including those with pathological vocal cord conditions or who are recovering from laryngeal cancer surgeries, can often find it difficult or impossible to speak. That may soon change.</span></span></span></p>



<p><span><span><span>A team of UCLA engineers has invented a soft, thin, stretchy device measuring just over 1 square inch that can be attached to the skin outside the throat to help people with dysfunctional vocal cords regain their voice function. Their advance is <a href="https://www.nature.com/articles/s41467-024-45915-7">detailed this week</a> in the journal Nature Communications.</span></span></span></p>



<p><span><span><span>The new bioelectric system, developed by <a href="https://samueli.ucla.edu/people/jun-chen/">Jun Chen,</a>&nbsp;an assistant professor of bioengineering at the UCLA Samueli School of Engineering, and his colleagues, is able to detect movement in a person’s larynx muscles and translate those signals into audible speech with the assistance of machine-learning technology — with nearly 95% accuracy.</span></span></span></p>



<p><span><span><span>The breakthrough is the latest in Chen’s efforts to help those with disabilities. His team previously developed a <a href="https://newsroom.ucla.edu/releases/glove-translates-sign-language-to-speech" rel="" target="" title="">wearable glove</a> capable of translating American Sign Language into English speech in real time to help users of ASL communicate with those who don’t know how to sign.</span></span></span></p>



<div><p><img alt="Close-up of fingers stretching the small speech-enabling device" author="Jun Chen Lab/UCLA" data-imgheight="1884" data-imgwidth="1686" file_id="65f353962cfac2500a634b72" src="https://s3.amazonaws.com/cms.ipressroom.com/173/files/20242/Vocal+Cords-Stretch-Crop.jpg" title="adafdadfadfadfadfasdf" width="300"></p><p>Jun Chen Lab/UCLA</p>

<p>The wearable technology is&nbsp;designed to be flexible enough to move with and capture the activity of laryngeal muscles beneath the skin.</p>
</div>

<p><span><span><span></span></span></span><span><span><span>The tiny new patch-like device is made up of two components. One, a self-powered sensing component, detects and converts signals generated by muscle movements into high-fidelity, analyzable electrical signals; these electrical signals are then translated into speech signals using a machine-learning algorithm. The other, an actuation component, turns those speech signals into the desired voice expression. &nbsp;</span></span></span></p>



<p><span><span><span>The two components each contain two layers: a layer of biocompatible silicone compound polydimethylsiloxane, or PDMS, with elastic properties, and a magnetic induction layer made of copper induction coils. Sandwiched between the two components is a fifth layer containing PDMS mixed with micromagnets, which generates a magnetic field.</span></span></span></p>



<p><span><span><span>Utilizing a soft <a href="https://samueli.ucla.edu/ucla-bioengineers-develop-new-class-of-human-powered-bioelectronics/">magnetoelastic sensing mechanism</a> developed by Chen’s team in 2021, the device is capable of detecting changes in the magnetic field when it is altered as a result of mechanical forces — in this case, the movement of laryngeal muscles. The embedded serpentine induction coils in the magnetoelastic layers help generate high-fidelity electrical signals for sensing purposes. </span></span></span></p>



<p><span><span><span>Measuring 1.2 inches on each side, the device weighs about 7 grams and is just 0.06 inch thick. With double-sided biocompatible tape, it can easily adhere to an individual’s throat near the location of the vocal cords and can be reused by reapplying tape as needed.</span></span></span></p>



<p><span><span><span>Voice disorders are prevalent across all ages and demographic groups; research has shown that nearly 30% of people will experience at least one such disorder in their lifetime. Yet with therapeutic approaches, such as surgical interventions and voice therapy, voice recovery can stretch from three months to a year, with some invasive techniques requiring a significant period of mandatory postoperative voice rest. </span></span></span></p>



<p><span><span><span>“Existing solutions such as handheld electro-larynx devices and tracheoesophageal- puncture procedures can be inconvenient, invasive or uncomfortable,” said Chen who leads the <a href="https://www.junchenlab.com/">Wearable Bioelectronics Research Group</a> at UCLA, and has been named one the <a href="https://newsroom.ucla.edu/releases/2023-ucla-scholars-highly-cited-researchers" rel="" target="" title="">world’s most highly cited researchers</a> five years in a row. “This new device presents a wearable, non-invasive option capable of assisting patients in communicating during the period before treatment and during the post-treatment recovery period for voice disorders.” </span></span></span></p>



<div><p><img alt="Schematic with several images detailing the elements in the five different layers of the device." author="Jun Chen Lab/UCLA" data-imgheight="2950" data-imgwidth="4824" file_id="65f353af2cfac25009487845" src="https://s3.amazonaws.com/cms.ipressroom.com/173/files/20242/Vocal+Cords-Schematic.jpg" title="adsfadfadfadfadfadfadf"></p><p>Jun Chen Lab/UCLA</p>

<p><span><span>The two components — and five layers — of the device allow it to turn muscle movement into electrical signals which, with the help of machine learning, are ultimtately converted into speech signals and audible vocal expression.<span><span><span></span></span></span></span></span></p>
</div>



<p><span></span><span>How machine learning enables the wearable tech</span></p>



<p><span><span><span>In their experiments, the researchers tested the wearable technology on eight healthy adults. They collected data on laryngeal muscle movement and used a machine-learning algorithm to correlate the resulting signals to certain words. They then selected a corresponding output voice signal through the device’s actuation component. </span></span></span></p>



<p><span><span><span>The research team demonstrated the system’s accuracy by having the participants pronounce five sentences — both aloud and voicelessly — including “Hi, Rachel, how are you doing today?” and “I love you!” </span></span></span></p>



<p><span><span><span>The overall prediction accuracy of the model was 94.68%, with the participants’ voice signal amplified by the actuation component, demonstrating that the sensing mechanism recognized their laryngeal movement signal and matched the corresponding sentence the participants wished to say. </span></span></span></p>



<p><span><span><span>Going forward, the research team plans to continue enlarging the vocabulary of the device through machine learning and to test it in people with speech disorders. </span></span></span></p>



<p><span><span><span>Other authors of the paper are UCLA Samueli graduate students Ziyuan Che, Chrystal Duan, Xiao Wan, Jing Xu and Tianqi Zheng — all members of Chen’s lab. </span></span></span></p>



<p><span><span><span>The research was funded by the National Institutes of Health, the U.S. Office of Naval Research, the American Heart Association, Brain &amp; Behavior Research Foundation, the UCLA Clinical and Translational Science Institute, and the UCLA Samueli School of Engineering.</span></span></span></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Oxide Cloud Computer. No Cables. No Assembly. Just Cloud (130 pts)]]></title>
            <link>https://oxide.computer/</link>
            <guid>39804052</guid>
            <pubDate>Sun, 24 Mar 2024 00:20:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oxide.computer/">https://oxide.computer/</a>, See on <a href="https://news.ycombinator.com/item?id=39804052">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><h2>Hardware and Software<br><span>Designed Together</span></h2></p><div><div><picture><img decoding="async" srcset="https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;dpr=1&amp;fm=webp 1x,https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;dpr=2&amp;fm=webp 2x,https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;dpr=3&amp;fm=webp 3x" src="https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;crop=entropy&amp;px=16&amp;blur=100&amp;fm=webp" width="512" height="600" alt="Front view of the oxide server rack"></picture><p><img src="https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;crop=entropy&amp;px=16&amp;blur=100&amp;fm=webp" alt="Front view of the oxide server rack" width="512" height="600"></p></div><p>Vertically integrated and scale-ready.<!-- --> <span>Bringing hyperscaler agility to the mainstream enterprise.</span></p></div></div><div><div><h2>Instant IT Transformation</h2><p>Just add power, networking and go</p></div><div><h3>No Assembly Required</h3><p>Go from rack install to developer availability in a matter of hours, compared to weeks or months today.</p></div><div><h3>Power and Space Efficiency</h3><p>Takes up two-thirds as much space as traditional on-premises infrastructure.</p></div></div><div id="join-newsletter"><p><h3>Get our newsletter</h3></p></div><hr><div><p><h2>Accelerate Developer Velocity<br><span>Self-Service Environment for Developers</span></h2></p><div><div><p><img src="https://oxide.computer/img/oxide-figure-developer-cli.svg" width="343" height="274" alt="Illustration of a terminal using the oxide API"></p><div><h3>Developer-Friendly Tooling</h3><p>Work how you like - the Oxide CLI brings all the features of the web console to the command line.</p></div></div><div><p><img src="https://oxide.computer/img/oxide-figure-developer-tools.svg" width="343" height="274" alt="Logos of Kubernetes and Terraform"></p><div><h3>Compatible With Familiar Tools</h3><p>Manage with technologies you already know and use with our Kubernetes and Terraform integrations.</p></div></div><div><p><img src="https://oxide.computer/img/oxide-figure-developer-command-menu.svg" width="343" height="274" alt="Oxide web console command menu"></p><div><h3>Effortless Interface</h3><p>Use the command palette to go to any page, create resources and much more directly from your keyboard.</p></div></div></div></div><hr><div><h2>Maximise Transparency &amp; Control</h2><div><p>An experience that provides operators with comprehensive software to manage capacity, health and utilization over the entire fleet.</p><p>Drive operational efficiencies with automation and informed recommendations.</p></div></div><div><div><p><img src="https://oxide.computer/img/oxide-figure-capacity-mobile.svg" width="333" height="300" alt="Expected to run out of capacity in 287 days"></p><p><img src="https://oxide.computer/img/oxide-figure-capacity-desktop.svg" width="1058" height="352" alt="Expected to run out of capacity in 287 days"></p><p>Anticipate and resolve capacity needs</p></div><div><p><img src="https://oxide.computer/img/oxide-figure-network-diagram.svg" width="368" height="369" alt="Diagram of an example network"></p><p>Understand and debug issues faster</p></div><div><p><img src="https://oxide.computer/img/oxide-figure-overprivileged.svg" width="368" height="369" alt="Diagram of an overprivileged access alert"></p><p>Scope users to the privileges they need</p></div></div><div><p><h3>End-to-End Networking Observability</h3></p><div><p><img src="https://oxide.computer/img/oxide-issues-list.svg" width="247" height="247" alt="Representation of Oxide web console UI, showing a list of components, one is indicating an issue"></p><p><img src="https://oxide.computer/img/oxide-observability-packet-log.svg" width="247" height="247" alt="Snapshot of Oxide web console UI, showing a dropdown with one item highlighted that says 'View packet log'"></p></div><div><p><h3>End-to-End Networking Observability</h3></p><div><p>With our built-in switch and its purpose-built software, you can finally understand why your packets are not getting to where they are supposed to go.</p><a href="https://oxide.computer/product/networking">Learn more about networking<svg width="12" height="12"><use href="/build/_assets/sprite-4SZ57MXG.svg#next-arrow-12"></use></svg></a></div></div></div><div><div><h3>Understand End-to-End Performance</h3><p>Observability across physical and application-level network data, improving performance and uptime.</p></div><div><h3>Identify Bottlenecks</h3><p>Better diagnose and more quickly remediate bottlenecks across the complete infrastructure stack.</p></div><div><h3>Resolve Issues</h3><p>Single pane of glass to monitor normal operation and detect failures to enable capacity planning and debugging.</p></div><div><h3>Identify Low Utilization</h3><p>Rack-level, pooled infrastructure, with automated capacity management tooling, reducing dead capacity.</p></div></div><div><div><p><h2>Secure by <br>Design</h2></p><p>Modern on-premises, enterprise environments face a wide variety of threats. Oxide products are designed to defend against threats from internal and external attackers at application, network, and physical layers</p></div><div><div><p>First Instruction Integrity</p><p>As soon as power is applied to an Oxide rack, our purpose-built hardware root of trust – present on every Oxide server and switch – cryptographically validates that its own firmware is genuine and unmodified.</p></div><div><p>Extending Trust Through Boot</p><p>As the rack boots, trust is extended by holding processors in reset, measuring their firmware, recording those measurements in the root of trust, and finally releasing them to proceed. System software can then reliably know what firmware was booted on each processor by asking the root of trust.</p></div><div><p>Extending Trust Between Devices</p><p>During manufacturing, each hardware root of trust is provisioned with a private key and matching certificate signed by an Oxide Certificate Authority that uniquely identifies that root of trust and demonstrates that it was produced by Oxide.</p></div><div><p>Trust Quorum</p><p>Verifiable secret sharing protects customer data against at-rest and boot-time attacks.  When combined with remote attestation, this provides a strong guarantee.</p></div><div><p>Secure Secret Storage</p><p>Specialized storage service that avoids keeping secrets in RAM and has strict ACLs limiting access and use of secrets.</p></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cancer under age 50 increased 80% from 1990 to 2019 (237 pts)]]></title>
            <link>https://bmjoncology.bmj.com/content/2/1/e000049#DC1</link>
            <guid>39803845</guid>
            <pubDate>Sat, 23 Mar 2024 23:41:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bmjoncology.bmj.com/content/2/1/e000049#DC1">https://bmjoncology.bmj.com/content/2/1/e000049#DC1</a>, See on <a href="https://news.ycombinator.com/item?id=39803845">Hacker News</a></p>
Couldn't get https://bmjoncology.bmj.com/content/2/1/e000049#DC1: Error: Request failed with status code 500]]></description>
        </item>
        <item>
            <title><![CDATA[PSChess – A chess engine in PostScript (119 pts)]]></title>
            <link>https://seriot.ch/projects/pschess.html</link>
            <guid>39803606</guid>
            <pubDate>Sat, 23 Mar 2024 22:54:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://seriot.ch/projects/pschess.html">https://seriot.ch/projects/pschess.html</a>, See on <a href="https://news.ycombinator.com/item?id=39803606">Hacker News</a></p>
<div id="readability-page-1" class="page">
<h3>seriot.ch</h3>
<h4><a href="https://seriot.ch/">About</a> | <a href="https://seriot.ch/projects/index.html">Projects</a> | <a href="https://seriot.ch/trail/">Trail</a></h4>

<p>Here is a quick overview about the making and inner working of PSChess.</p>
<p>GitHub repo: <a href="https://github.com/nst/PSChess">https://github.com/nst/PSChess</a></p>
<p>See also my remarks about <a href="https://seriot.ch/projects/programming_in_postscript.html">programming in PostScript</a>.</p>
<h4>Motivation</h4>
<ul>
<li>To what extend can we execute arbitrary code on a printer?</li>
<li>How to implement a chess engine in PostScript?</li>
<li>Can you play chess against your printer?</li>
</ul>
<h4>Usage</h4>
<p>You can use PSChess in GhostScript with the following arguments:</p>
<pre><code>$ gs -DNOSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="%d.pdf" main.ps
</code></pre>
<p>The user plays by entering moves like <code>d2d4</code>.</p>
<p>The output is produced on both the console and PDF documents.</p>
<p>Console output:</p>
<pre><code>r...r...        black h8 e8
pppkb.Q.        320
..bqp...
...p..Np        P...............
...B.Pn.        npp.............
..P...PB
PP.NP..P        -
..KR...R        white turn
</code></pre>
<p>PDF output:</p>
<p><img src="https://seriot.ch/images/pschess/pschess.png" width="700"></p>
<h4>Limitations</h4>
<ul>
<li>human plays white, computer plays black</li>
<li>pawns convert into queens only</li>
</ul>
<h4>Project Status</h4>
<p>The project can be broken down in five steps:</p>
<ol>
<li>draw a chess board</li>
<li>implement a user interface so that user can move pieces</li>
<li>implement chess game rules and logic</li>
<li>implement an algorithm so that the computer can play</li>
<li>run the program on a printer, prompting user for the next move</li>
</ol>
<p>All 4 first steps are done. You can play chess agaist <a href="https://www.ghostscript.com/">GhostScript</a>, a PostScript interpreter.</p>
<p>I've started working on step 5 (see <a href="https://seriot.ch/projects/programming_in_postscript.html#3">Programming in PostScript</a> but I'm not totally sure yet about the actuably feasibility.</p>
<h4>Program Structure</h4>
<p>PSChess code is structured in three files:</p>
<pre><code>logic_board.ps  - data structure and primitives to deal with the board
logic_chess.ps  - chess rules, evaluation function, min-max algorithm
drawing.ps      - draw chess board and game state
</code></pre>
<p>And three consumers of these basic layers:</p>
<pre><code>main.ps         - user input
tests_logic.ps  - unit tests
tests_visual.ps - visual tests to check possible moves
</code></pre>
<p>Or in a software layer diagram:</p>
<p><img src="https://seriot.ch/images/pschess/layer_diagram.png" width="700"></p>
<h4>The Board</h4>
<p>The board is represented by a PostScript string:</p>
<pre><code>(\
rnbqkbnr\
pppppppp\
........\
........\
........\
........\
PPPPPPPP\
RNBQKBNR\
)
</code></pre>
<p>Pieces are moved with the <code>putinterval</code> instruction. Moving black pawn from a7 to a6 is:</p>
<pre><code>board 16 (p) putinterval
board  8 (.) putinterval
</code></pre>
<p>The game state is kept in a dictionary. It mostly consist in the board, the current player and the captured pieces. </p>
<h4>Pieces Moves</h4>
<p>Pieces moves are encoded with their offsets, postive and negative. A moving procedure implements capture rules and ensures that pieces cannot go off the board.</p>
<pre><code>/DirectionsForPiece
&lt;&lt;
    /N -8 def
    /E  1 def
    /S  8 def
    /W -1 def

    (P) [N N N add N W add N E add]
    (p) [S S S add S E add  S W add]
    (n) [N N E add add
         E N E add add
         E S E add add
         S S E add add
         S S W add add
         W S W add add
         W N W add add
         N N W add add]
    (b) [N E add S E add S W add N W add]
    (r) [N E S W]
    (q) [N E S W N E add S E add S W add N W add]
    (k) [N E S W N E add S E add S W add N W add]
    (.) []
&gt;&gt; def
</code></pre>
<h4>Document UI</h4>
<p>In addition to the text UI, PSChess will show a page after each and every move.</p>
<p>When it will be working on an actual printer, a page will be printed after each and every move.</p>
<h4>Drawing</h4>
<p>All pieces are drawn in a vector format on a 20x20 grid.</p>
<pre><code>/PiecesPathsDict
&lt;&lt;
    /m { moveto } bind def
    /l { lineto } bind def

    /p { newpath SQUARE_SIZE 2 div SQUARE_SIZE 2 div 4 0 360 arc closepath }

    /r { newpath 5 15 m 7 15 l 7 13 l 9 13 l 9 15 l 11 15 l 11 13 l 13 13 l
         13 15 l 15 15 l 15 11 l 13 10 l 13 3 l 7 3 l 7 10 l 5 11 l 5 15 l
         closepath }

    /n { newpath 12 15 m 14 3 l 6 3 l 10 9 l 6 9 l closepath }

    /b { newpath 14 3 m 12 10 l 10 12 3 -30 30 arc
        10 12 l 10 12 3 80 210 arc 8 10 l 6 3 l closepath }

    /q { newpath 4 12 m 8 10 l 10 15 l 12 10 l 16 12 l 12 3 l 8 3 l closepath }

    /k { newpath 8 3 m 5 9 l 9 9 l 9 11 l 7 11 l 7 13 l 9 13 l 9 15 l 11 15 l
        11 13 l 13 13 l 13 11 l 11 11 l 11 9 l 15 9 l 12 3 l closepath }

    /. {}
&gt;&gt; def
</code></pre>
<h4>Evaluation Function</h4>
<p>Each board configuration can be evaluated. High positives values indicate that the configuration is best for white. Conversely, low negative values indicate that configuration is best for black.</p>
<p>PSChess implements the <a href="https://www.chessprogramming.org/Simplified_Evaluation_Function">simplified evaluation function</a> from Tomasz Michniewski.</p>
<p>In short, all pieces have an intrinsic value + a positional value, depending on where they stand on the board.</p>
<p>Intrinsic values:</p>
<pre><code>P = 100
N = 320 # knight
B = 330
R = 500
Q = 900
K = 20000
</code></pre>
<p>Positional value of white knights:</p>
<pre><code>-50,-40,-30,-30,-30,-30,-40,-50,
-40,-20,  0,  0,  0,  0,-20,-40,
-30,  0, 10, 15, 15, 10,  0,-30,
-30,  5, 15, 20, 20, 15,  5,-30,
-30,  0, 15, 20, 20, 15,  0,-30,
-30,  5, 10, 15, 15, 10,  5,-30,
-40,-20,  0,  5,  5,  0,-20,-40,
-50,-40,-30,-30,-30,-30,-40,-50,
</code></pre>
<p>So, a white knight on a2 is worth 320 - 20 = 300 points.</p>
<p>When computer plays, it considers all his possible moves, and plays the move that will minimize the best human answer to his move (min-max algorithm).</p>
<h4>Visual Tests</h4>
<p>Running the <code>tests_visual.ps</code> file contains a sample chessboard, iterates through all squares and output PDF files representing all possible moves.</p>
<p><img src="https://seriot.ch/images/pschess/pschess.gif" width="600"></p>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[New Aztec Codices Discovered: The Codices of San Andrés Tetepilco (309 pts)]]></title>
            <link>https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/</link>
            <guid>39803508</guid>
            <pubDate>Sat, 23 Mar 2024 22:34:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/">https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/</a>, See on <a href="https://news.ycombinator.com/item?id=39803508">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
		<main id="main" role="main">

		
			
<article id="post-1199">
			<p><img width="1088" height="670" src="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=1088" alt="" decoding="async" srcset="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=1088 1088w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=150 150w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=300 300w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=768 768w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=1024 1024w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg 1201w" sizes="(max-width: 1088px) 100vw, 1088px" data-attachment-id="1207" data-permalink="https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/bb1kganf/" data-orig-file="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg" data-orig-size="1201,740" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="BB1kgANf" data-image-description="" data-image-caption="" data-medium-file="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=300" data-large-file="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=739">		</p>
		<!-- .entry-header -->

	<div>
		
<p>Yesterday, a team of specialists of the National Institute of Anthropology and History of Mexico, led by the historians Baltazar Brito Guadarrama and María Castañeda de la Paz, the philologist Michel Oudijk, and the Nahuatl specialist Rafael Tena, presented to the public the discovery of three new Aztec codices, collectively known as the Codices of San Andrés Tetepilco, formerly a part of the Culhuacan polity of Central Mexico, and nowadays located within the Iztapalapa borough in Mexico City. This is one of the most exciting and spectacular discoveries regarding codical sources in recent years, and is no doubt closely related to the topic of this blog. The discovery has been already covered by the <a href="https://www.jornada.com.mx/2024/03/21/cultura/a03n1cul">Mexican press</a> and explained in detail in yesterday’s presentation at the National Museum of Anthropology in Mexico City, which can be seen in Youtube. However, an English summary will be presented for the readers of this blog.</p>



<figure><p><span><iframe width="739" height="416" src="https://www.youtube.com/embed/fw6Z4D7VecA?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox"></iframe></span>
</p></figure>



<p>The newly discovered corpus was acquired by the Mexican government from a local family that wants to remain anonymous, but which were not collectors but rather traditional stewards of the cultural legacy of Culhuacan and Iztapalapa, and it is now stored at the library of the National Institute of Anthropology and History of Mexico. It comprises three codices. The first is called <em>Map of the Founding of Tetepilco</em>, and is a pictographic map which contains information regarding the foundation of San Andrés Tetepilco, as well as lists of toponyms to be found within Culhuacan, Tetepilco, Tepanohuayan, Cohuatlinchan, Xaltocan and Azcapotzalco. The second, the <em>Inventory of the Church of San Andrés Tetepilco</em>,  is unique, as Oudijk remarks, since it is a pictographic inventory of the church of San Andrés Tetepilco, comprising two pages. Sadly, it is very damaged. </p>



<p>Finally, the third document, now baptised as the <em>Tira of San Andrés Tetepilco</em>, is a pictographic history in the vein of the Boturini and the Aubin codices, comprising historical information regarding the Tenochtitlan polity from its foundation to the year 1603. It seems to belong to the same family as the Boturini, the Aubin, the Ms. 40 and the Ms. 85 of Paris, that is to say, some of the main codices dealing with Aztec imperial history, and Brito considers it as a sort of bridge between the Boturini and the Aubin, since its pictographic style is considerably close to the early colonial one of the former, rather than the late colonial one of the latter. It comprises 20 rectangular pages of amate paper, and contains new and striking iconography, including a spectacular depiction of Hernán Cortés as a Roman soldier. In the Aztec side of things, new iconography of Moctezuma Ilhuicamina during his conquest of Tetepilco is presented (Figure 1).</p>



<figure><img data-attachment-id="1208" data-permalink="https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/figure-1-3/" data-orig-file="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg" data-orig-size="1243,740" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Figure 1" data-image-description="" data-image-caption="" data-medium-file="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=300" data-large-file="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=739" loading="lazy" width="1024" height="609" src="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=1024" alt="" srcset="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=1024 1024w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=150 150w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=300 300w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=768 768w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg 1243w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>Figure 1. Codices of San Andrés Tetepilco: a) Map of the Founding of San Andrés Tetepilco; b) Inventory of the Church of San Andrés Tetepilco; c) <em>Tira </em>of San Andrés Tetepilco </figcaption></figure>



<p>Of course, new and very interesting examples of Aztec writing are contained throughout all these documents, including old and new toponyms, spellings of Western and Aztec names, and even some information that confirms that some glyphs formerly considered as hapax, as the <strong>chi </strong>syllabogram in the spelling of the name Motelchiuhtzin in Codex Telleriano-Remensis 43r, discussed in <a href="https://tlacuilolli.com/2022/02/16/a-christian-prayer-in-aztec-hieroglyphs-an-epigraphic-analysis/">another </a>post of this blog, were not anomalous but possibly conventional. Besides logosyllabic spellings, the presence of pictographs with alphabetic glosses in Nahuatl will be of great help to ascertain the functioning of this still controversial part of the Aztec communication system.</p>



<p>In any case, the author of this blog remains expectant of the future digital and physical publication of the Codices by Baltazar Brito’s team of experts, promised yesterday, and congratulate them for their breakthrough discovery. Cheers for Aztec writing and its everlasting cultural legacy!</p>








			</div><!-- .entry-content -->

	<!-- .entry-footer -->

	</article><!-- #post-## -->

			
	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
			
<!-- #comments -->

		
		</main><!-- #main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hyprland Crash Course (102 pts)]]></title>
            <link>https://xd1.dev/2024/03/hyprland-crash-course</link>
            <guid>39803287</guid>
            <pubDate>Sat, 23 Mar 2024 21:40:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xd1.dev/2024/03/hyprland-crash-course">https://xd1.dev/2024/03/hyprland-crash-course</a>, See on <a href="https://news.ycombinator.com/item?id=39803287">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
                <h2 id="content-hyprland-crash-course">Hyprland crash course</h2>
<p>For the past week I have been configuring hyprland and using it as my daily driver.
Coming from major Desktop Environments like KDE or Gnome, this was definitely quite challanging,
specially when implementing features that we take it for granted on these DEs, like screen sharing or screenshot annotating.</p>
<p>In this post I will be going through all the tools and scripts I have been creating to configure this amazing Window Manager to my liking.</p>
<h2 id="content-introduction">Introduction</h2>
<p>First things first, the system I daily drive is Archlinux, and it comes with its own set of pros and cons.
However specially for hyprland, everything is available from the package manager. Apparently nix configurations are also very well supported.
Other system architectures might not have such a thorough support from the distro.</p>
<p>All of this to say, I am going to assume you are using arch.</p>
<p>Hyprland itself has a nice <a href="https://wiki.hyprland.org/Getting-Started/Master-Tutorial/">Master tutorial</a> which I recommend you to follow.
I believe this gets you 90% of the way there. This post aims to polish the rough edges after installing it successfully.</p>
<p>Your mileage may vary, but it took me maybe two days to get a functional installation and maybe four more days of polishing until I felt
I could just ditch GNOME.</p>
<h3 id="content-things-ill-cover-here">Things I'll cover here</h3>
<p>So what I really aim to do after you have a working hyprland setup is the following:</p>
<ul>
<li>My scripts;</li>
<li>How to screenshot;</li>
<li>Some tips and tricks I came across;</li>
</ul>
<h2 id="content-the-master-tutorial">The master tutorial</h2>
<p>So basically after installing hyprland with:</p>
<pre><code data-lang="shell">sudo pacman -S hyprland kitty
</code></pre>
<p>You get to a nice window manager environment. For a quick introduction about the difference between Desktop environments and Window managers,
try <a href="https://www.linuxfordevices.com/tutorials/linux/desktop-environment-vs-window-manager">this blog post</a> by the nice folks from
<a href="https://www.linuxfordevices.com/">linuxfordevices.com</a>.</p>
<p>Launching hyprland from GDM worked flawlessly for me, so you can try that. Now you can boot into it and start configuring it.</p>
<p>After the master tutorial you should take a look at:</p>
<ul>
<li>
<a href="https://wiki.hyprland.org/Useful-Utilities/Screen-Sharing/">Screen sharing</a>
</li>
<li>
<a href="https://wiki.hyprland.org/Useful-Utilities/App-Launchers/">App launchers</a>
</li>
<li>
<a href="https://wiki.hyprland.org/Useful-Utilities/Status-Bars/">Status bars</a>
</li>
<li>
<a href="https://wiki.hyprland.org/Useful-Utilities/Clipboard-Managers/">Clipboard managers</a>
</li>
<li>
<a href="https://wiki.archlinux.org/title/GNOME/Keyring#SSH_keys">gnome-keyring SSH Keys</a>
</li>
</ul>
<p>You would probably also need <a href="https://www.reddit.com/r/hyprland/comments/165hhd9/comment/jye2bhm/">nm-applet and blueman-applet</a>.</p>
<h2 id="content-my-scripts">My scripts</h2>
<p>These scripts aim to extend functionality and work around problems of hyprland and its applications.</p>
<h3 id="content-rofi">Rofi</h3>
<p>Rofi is nice in that it presents you with a couple of options. You can install it from <a href="https://aur.archlinux.org/packages/rofi-lbonn-wayland-git">the AUR</a>.
You can configure hyprland to use it by setting <code>$menu = rofi -show drun</code> and running it with <code>SUPER+R</code>.</p>
<p>What was missing for me is the ability to launch programs in a shell, in or outside a terminal emulator, using rofi.</p>
<p>This can be easily achieved with a command like <code>kitty bash -c $(rofi -dmenu -p terminal)</code>. However Rofi won't remember the commands.
I found <a href="https://github.com/YodaEmbedding/frece">frece</a> from <a href="https://github.com/davatorium/rofi/issues/747">this issue</a> and used the example scripts as a reference
to add history to rofi commands:</p>
<pre><code data-lang="shell"><span>#</span><span>!/bin/bash</span>
set -euo pipefail
<span>
#</span><span> this adds frequency sorted <span>history</span> to rofi -dmenu</span>

if [[ -z "$1" ]]; then
    echo Usage ./launch-rofi-frece.sh {ROFI_TYPE}
    echo Rofi type can be anything describing the rofi usage, for instance shell or terminal
fi

ROFI_TYPE="$1"
DB_FILE="$HOME/.cache/rofi.$ROFI_TYPE.db"
if ! [[ -f "$DB_FILE" ]]; then
    frece init "$DB_FILE" /dev/null
fi

item=$(frece print "$DB_FILE" | rofi "$@" -dmenu -p $ROFI_TYPE)
<span>[</span><span>[ -z <span>$item</span> ]] &amp;&amp; <span>exit</span> 1</span>

if ! frece increment "$DB_FILE" "$item" &gt;/dev/null 2&gt;&amp;1; then
    frece add "$DB_FILE" "$item"
fi

echo "$item"
</code></pre>
<p>This will initialize an empty frece database with the context type I am using rofi (either shell or terminal).
Then I can use this script from hyprland:</p>
<pre><code>$shellMenu = bash -c "$(~/.config/hypr/scripts/launch-rofi-frece.sh shell)"
$terminalMenu = kitty bash -c "$(~/.config/hypr/scripts/launch-rofi-frece.sh terminal)"
bind = $mainMod SHIFT, R, exec, $shellMenu
bind = $mainMod CTRL SHIFT, R, exec, $terminalMenu
</code></pre>
<p>This way you can have a separate history with frequency tracking for rofi:</p>
<p><img src="https://raw.githubusercontent.com/gchamon/xd1.dev/main/images/hyprland-crash-course/rofi-shell-history.png" alt="rofi-shell-history"></p>
<h3 id="content-waybar">Waybar</h3>
<p>You can just start using waybar, but if you want to customize it, it won't reload by itself. I use <a href="https://github.com/Alexays/Waybar/issues/961#issuecomment-753533975">this script</a>
to reload waybar whenever I want to change the theme:</p>
<pre><code data-lang="shell"><span>#</span><span>!/bin/bash</span>

CONFIG_FILES="$HOME/.config/waybar/config $HOME/.config/waybar/style.css"

trap "killall waybar" EXIT

while true; do
    waybar &amp;
    inotifywait -e create,modify $CONFIG_FILES
    killall waybar
done
</code></pre>
<p>Which you can launch by changing how you launch waybar with hyprland to <code>exec-once = ~/.config/hypr/scripts/launch-waybar.sh</code>.</p>
<h3 id="content-dunst-notification-sounds">Dunst notification sounds</h3>
<p>You can configure dunst to play notification sounds by following <a href="https://github.com/dunst-project/dunst/issues/257">this comment</a> on github.
However powersaving policies, most likely from the bluetooth protocol, prevents my headphones to play music straight away. It would only play
the end of the audio from <em>A link to the past</em>. To work around this I use <a href="https://github.com/anars/blank-audio/blob/master/500-milliseconds-of-silence.mp3">this 500ms silent mp3 file</a>
to warm up my device. Needless to say it introduces a half-second latency to every notification sound, but it does the job. The script will then look like this:</p>
<pre><code data-lang="shell"><span>#</span><span>!/bin/bash</span>
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &amp;&gt; /dev/null &amp;&amp; pwd )

source "$HOME/.zshenv"

if [[ "$DUNST_QUIET" != "true" ]]; then
    # warm up audio device in case of powersave policies (like bluetooth)
    pw-play $SCRIPT_DIR/../assets/500-milliseconds-of-silence.mp3
    pw-play $SCRIPT_DIR/../assets/link.mp3
fi
</code></pre>
<p>As you can see I also implemented a quiet mode by setting <code>DUNST_QUIET=true</code> in <code>.zshenv</code>. Yes, bash and zsh shouldn't mix but let this slide, please :D</p>
<h3 id="content-wayland-lock-screen">Wayland lock screen</h3>
<p>I use <a href="https://aur.archlinux.org/packages/swaylock-effects">sawlock-effects</a> for locking my screen. The script looks like this
(just so that it doesn't clutter the hyprland config file):</p>
<pre><code data-lang="shell"><span>#</span><span>!/usr/bin/env bash</span>

swaylock \
    --image /usr/share/backgrounds/archlinux/split.png \
    --clock \
    --indicator \
    --indicator-radius 100 \
    --indicator-thickness 7 \
    --effect-blur 7x5 \
    --effect-vignette 0.5:0.5 \
    --ring-color bb00cc \
    --key-hl-color 880033 \
    --line-color 00000000 \
    --inside-color 00000088 \
    --separator-color 00000000 \
    --fade-in 1

</code></pre>
<p>And I invoke it with <code>bind = $mainMod, L, exec, ~/.config/hypr/scripts/wayland-lock.sh</code>.</p>
<h3 id="content-screenshot-with-editor">Screenshot with editor</h3>
<p>I use <a href="https://github.com/hyprwm/contrib/tree/main/grimblast">grimblast</a> from <a href="https://aur.archlinux.org/packages/grimblast-git">aur</a>
together with <a href="https://github.com/ksnip/ksnip">ksnip</a>, which is available from the <code>extra</code> packages.</p>
<p>There is a <code>captureArea.sh</code> script:</p>
<pre><code data-lang="shell"><span>#</span><span>!/bin/bash</span>

export GRIMBLAST_EDITOR=ksnip
grimblast --cursor edit area
</code></pre>
<p>And a <code>captureAll.sh</code> script:</p>
<pre><code data-lang="shell"><span>#</span><span>!/bin/bash</span>
set -euo pipefail

SCREENSHOT_FILENAME=$(date +'%Y-%m-%dT%H:%M:%S%z_grim.png')
SCREENSHOT_FILENAME_ABSOLUTE=$HOME/Pictures/Screenshots/$SCREENSHOT_FILENAME

notify-send --app-name=grim --urgency=normal --category=screenshot "Capturing entire screen to $SCREENSHOT_FILENAME_ABSOLUTE"
grim $SCREENSHOT_FILENAME_ABSOLUTE
</code></pre>
<p>Which I launch with</p>
<pre><code>bind = SHIFT, 107, exec, ~/.config/hypr/scripts/screenshot/captureAll.sh
bind = , 107, exec, ~/.config/hypr/scripts/screenshot/captureArea.sh
</code></pre>
<p>The number <code>107</code> being the PrintScreen key. It can also be referenced by <code>Print</code>, but for some reason I left it with the code.</p>
<p><strong>BTW</strong> you can use <code>wev</code> and get codes from keys you press and just use them in hyprland config.</p>
<h3 id="content-kill-hyprland-if-stuck-on-exit">Kill hyprland if stuck on exit</h3>
<p>Hyprland, at least for me, will randomly freeze on a blackscreen upon exit. <a href="https://github.com/hyprwm/Hyprland/issues/3558">This issue</a> covers the problem
and also offers a workaround by using this script:</p>
<pre><code data-lang="awk">echo <span>"Hyprland exit"</span> | systemd-cat -t coffebar -p info
hyprctl dispatch <span>exit</span> &amp;
sleep <span>10</span>
echo <span>"Hyprland failed to exit"</span> | systemd-cat -t coffebar -p err
killall -<span>9</span> Hyprland
</code></pre>
<p>You can then just call it with <code>SUPER+M</code> instead of dispatching exit directly. It won't solve the problem, but at least you don't need to reboot everytime it happens.</p>
<h2 id="content-quick-tips">Quick tips</h2>
<p>These are some quick references to tips and tricks I came across during this last few days.</p>
<h3 id="content-multiple-keyboard-layouts">Multiple keyboard layouts</h3>
<p>Since I have two keyboards with two different layouts (a us mx-keys and a br-abnt2 built-in keyboard on my notebook) it wasn't clear for me how I should configure hyprland.
At first I was looking for a way to display the current keyboard and maybe toggle it with waybar, but I quickly realised that hyprland toggle will work only for the keyboard which
pressed the toggle key.</p>
<p>However you can set different layouts for different devices in <code>hyprland.conf</code>. My configuration looks like this:</p>
<pre><code>input {
    kb_layout = br
    kb_variant = abnt2
    # ...
}

device:logitech-mx-keys {
    kb_layout = us
    kb_variant = intl
}

</code></pre>
<p>This is nice because I get consistent layout configuration with whatever keyboard I use. You can find which input devices you have with <code>hyprctl devices</code>.</p>
<h3 id="content-waybar-on-click-actions">Waybar on-click actions</h3>
<p>After applying <a href="https://github.com/cjbassi/config/tree/master/.config/waybar">cjbassi's theme</a> I wanted more functionality for my bar.
<strong>BTW</strong> you can find more themes <a href="https://github.com/Alexays/Waybar/wiki/Examples">here</a>.</p>
<p>First, you should install <code>pamixer</code> so that clicking on the volume to mute works.
Oh, and install <code>otf-font-awesome</code>, otherwise the nice icons won't render.</p>
<p>Then I mapped:</p>
<ul>
<li>pulseaudio
<ul>
<li>Right click: <code>pavucontrol</code>
</li>
</ul>
</li>
<li>memory
<ul>
<li>Left click: <code>gnome-system-monitor --show-processes-tab</code>
</li>
</ul>
</li>
<li>cpu
<ul>
<li>Right click: <code>kitty top</code>
</li>
<li>Left click: <code>gnome-system-motnitor --show-resources-tab</code>
</li>
</ul>
</li>
<li>battery
<ul>
<li>Left click: <code>tlpui</code>
</li>
</ul>
</li>
<li>disk
<ul>
<li>Left click: <code>kitty ncdu ~</code>
</li>
<li>Right click: <code>gnome-system-monitor --show-file-systems-tab</code>
</li>
</ul>
</li>
</ul>
<p>I thought about leaving right-click on disk to open <code>ncdu</code> on root, but it takes an ungodly amount of time to go through the files in my NAS, but you could do that
if this isn't a problem for you.</p>
<h3 id="content-gnome-keyring">gnome-keyring</h3>
<p>Just a headsup: if you enter a wrong password for your ssh keys, it won't complain, there won't be a warning, <code>ssh-add</code> will just gobble 100% cpu and <code>ssh</code> or <code>git clone</code>
will just hang there. You will have to kill it with <code>pkill ssh-add</code>. To fix this, open <code>seahorse</code>, go to <code>Login</code> and remove the offending ssh key password there.
Just <strong>don't</strong> remove it from <code>OpenSSH Keys</code> tab as it will delete the keys themselves.</p>
<p>Also, either use this or <a href="https://wiki.archlinux.org/title/SSH_keys#Keychain">keychain</a>, never both.</p>

                
                
            </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Marimo: Interactive Fluffy Ball (145 pts)]]></title>
            <link>https://oimo.io/works/marimo/</link>
            <guid>39803174</guid>
            <pubDate>Sat, 23 Mar 2024 21:23:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oimo.io/works/marimo/">https://oimo.io/works/marimo/</a>, See on <a href="https://news.ycombinator.com/item?id=39803174">Hacker News</a></p>
<div id="readability-page-1" class="page">
	<a href="https://oimo.io/">
		<svg viewBox="0 0 48 48">
			<path stroke-width="4" stroke="#fff" fill="#fff" d="M 44 4 c 0 10 0 14 -2 20 s -7 9 -10 10 c -12 4 -22 -6 -18 -18 c 1 -3 4 -8 10 -10 s 10 -2 20 -2 Z M 22 6 C 14 8 8 14 6 22 S 4 35 4 44 c 10 0 15 0 22 -2 s 14 -9 16 -16 s 2 -13 2 -22 C 34 4 30 4 22 6 Z"></path>
			<path fill="#fff" d="M 20 23 A 8 8 0 1 0 36 23 A 8 8 0 1 0 20 23 Z M 32 11 A 3 3 0 1 0 38 11 A 3 3 0 1 0 32 11 Z"></path>
		</svg>
	</a>
	<a href="https://github.com/saharan/works/tree/main/marimo" target="_blank">
		<svg viewBox="0 0 24 24">
			<path fill="#fff" d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path>
		</svg>
	</a>
	<div id="menu">
		<p><label>Size</label>
		</p>
		<p><label>Hair Amount</label>
		</p>
		<p><label>Hair Length</label>
		</p>
		<p><label>Hair Volume</label>
		</p>
		<p><label>Gravity</label>
			<label>RGB</label>
		</p>
	</div>
	
	


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Happens to Google Maps When Tectonic Plates Move? (190 pts)]]></title>
            <link>https://nautil.us/what-happens-to-google-maps-when-tectonic-plates-move-237678/</link>
            <guid>39802934</guid>
            <pubDate>Sat, 23 Mar 2024 20:36:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nautil.us/what-happens-to-google-maps-when-tectonic-plates-move-237678/">https://nautil.us/what-happens-to-google-maps-when-tectonic-plates-move-237678/</a>, See on <a href="https://news.ycombinator.com/item?id=39802934">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><span>A</span>s a writer on physics, I’m always seeking new metaphors for understanding Einstein’s general theory of relativity, and while working on my last book, <i>Spooky Action at a Distance</i>, I thought I’d compare the warping of space and time to the motion of Earth’s tectonic plates. Einstein explained gravity as the bending of spacetime. A well-hit baseball arcs through the air to an outfielder’s glove because it is following the contours of spacetime, which the planet’s mass has resculpted. The mutability of spacetime also means that nothing in the universe has a fixed position, since the framework by which position is defined is fluid. And something like that is also true of Earth’s surface. Nothing on the ground has fixed coordinates because the landscape is ever-shifting.</p><p>But then it struck me: If nothing has fixed coordinates, then how do Google Maps, car nav systems, and all the other mapping services get you where you’re going? Presumably they must keep updating the coordinates of places, but how?  I figured I’d Google the answer quickly and get back to Einstein, yet a search turned up remarkably little on the subject. So, as happens distressingly often in my life, what I thought would take 30 seconds ended up consuming several days. I discovered a sizable infrastructure of geographers, geologists, and geodesists dedicated to ensuring that maps are accurate. But they are always a step behind the restless landscape. Geologic activity can create significant errors in the maps on your screens.</p>

<figure><img decoding="async" alt="" src="https://assets.nautil.us/16781_18dabb99ce171ea5a317521425d5c206.png"><figcaption><strong>HOUSEQUAKE:</strong> This screenshot represented my position in Google Maps while I was standing on my back deck. When I go to Google Earth and compare images taken on different dates, I find that my house jumps around by as much as 20 meters.</figcaption></figure><p>One of the people I talked to was Ken Hudnut of the United States Geological Survey, an earthquake researcher who had set up one of the first GPS networks to track plate motions. “Say that you’re standing right in the middle of a road intersection with your GPS receiver and you get the coordinates for your position,” he said. “You look at Google Earth, and instead of being located right at the middle of the road intersection, you’re off by some amount.” Several factors produce these errors. Consumer GPS units have a position uncertainty of several meters or more (represented by a circle in Google Maps). Less well known is that maps and satellite images are typically misaligned by a comparable amount. “It’s partly the GPS hardware that limits the accuracy, and part of it may also be the quality of the georeferencing,” Hudnut said. </p>
<p>An interesting, if dated, study from 2008<sup>1</sup> looked at Google Earth images in 31 cities in the developed world and found position errors ranging from 1 to 50 meters. It’s not hard to do your own experiments. The image above shows my position in Google Maps while I was standing on my back deck—a discrepancy of about 10 meters, much larger than the stated error circle. When I go to Google Earth and compare images taken on different dates, I find that my house jumps around by as much as 20 meters.</p><blockquote>
<p>If you’d been paying attention, you would have woken up to find that your house wasn’t at the same latitude and longitude anymore.</p>
</blockquote><p>In the grand scheme of things, this isn’t much, but does make you wary of high zoom levels. Hudnut said he sees map bloopers in his field work all the time. As technology progresses, so will we all. “We’re fast approaching the day when people will expect accuracies of centimeters in real time out of their handheld devices and then we’ll see a lot of head scratching as things no longer line up,” said Dru Smith of the National Geodetic Survey in Silver Spring, Maryland, the nation’s civilian chief geodesist—the go-to guy on the precise shape and size of our planet. </p><p>For the most part, misalignments don’t represent real geologic changes, but occur because it’s tricky to plop an aerial or orbital image onto the latitude and longitude grid. The image has to be aligned with reference points established on the ground. For this purpose, NGS maintains a network of fixed GPS stations and, over the past two centuries, has sprinkled the land with survey marks—typically, metallic disks mounted on exposed bedrock, concrete piers, and other fixed structures. The photo below shows one near my house. But the process of ground-truthing a map is never perfect. Moreover, the survey-mark coordinates can be imprecise or downright wrong.</p>
<figure><img decoding="async" alt="" src="https://assets.nautil.us/16768_ead8e65817265dd1346c3d2b2ba251c5.png"><figcaption><strong>X DOESN’T QUITE MARK THE SPOT:</strong> A National Geodetic Survey mark (above) near my house. Its coordinates can be imprecise or wrong.</figcaption></figure><p>NGS and other agencies recheck survey marks only very infrequently, so what a stroke of luck that a community of hobbyists—geocachers—does so for fun. “One of the many things we no longer have money to do is send out people to make sure those marks are still there,” Smith said. “Geocachers, through this creation of a new recreation of going out and finding these marks, are sending in tons of reports. … It’s been helpful to us to keep the mark recoveries up to date.”</p><p>Errors also sneak in because the latitude and longitude grid (or “datum”) is not god-given, but has to be pegged to a model of the planet’s shape. This is where plate tectonics can make itself felt. Confusingly, the U.S. uses two separate datums. Most maps are based on NAD 83, developed by NGS. Google Maps and GPS rely instead on WGS 84, maintained by a parallel military agency, which has a considerably larger budget. The civilian one is optimized for surveying within North America; the military one sacrifices domestic precision for global coverage.</p><p>When NGS introduced NAD 83, replacing an older datum that dated to 1927, it was the geographic version of the shift from the Julian to the Gregorian calendar. If you’d been paying attention, you would have woken up on Dec. 6, 1988, to find that your house wasn’t at the same latitude and longitude anymore. The shift, as large as 100 meters, reflected a more accurate model of Earth’s shape. Vestiges of the old datum linger. You still see maps based on NAD 27. Also, when the U.S. Navy developed the first satellite navigation system in the 1960s, engineers set the location of zero degrees longitude by extrapolating the old North American datum. Only later did they discover they had drawn the meridian about 100 meters east of the historic Prime Meridian marker at the Royal Observatory in Greenwich.</p>
<p>NGS and its military opposite number worked together to align their respective datums, but the two systems have drifted apart since then, creating a mismatch between maps and GPS coordinates. Plate tectonics is one reason. WGS 84 is a global standard tied to no one plate. In essence, it is fixed to Earth’s deep interior. Geodesists seeking to disentangle latitude and longitude from the movements of any one particular plate assume that tectonic plates are like interlocking gears—when one moves, all do—and that, if you add up all their rotational rates, they should sum to zero. The effect of not tying coordinates to one plate is that surveyed positions, and the maps built upon them, change over time.</p><p>In contrast, NAD 83 sits atop the North American plate like a fishnet laid out on the deck of a boat. As the plate moves, so does the datum. Other regions of the world likewise have their own local datums. That way, drivers can find their way and surveyors can draw their property lines in blissful ignorance of large-scale tectonic and polar motion. “Most surveyors and mapmakers would be happy to live in a world where the plates don’t move,” Smith explained. “We can’t fix that, but we can fix the datum so that the effect is not felt by the predominant number of users. … Generally speaking, a point in Kansas with a certain latitude and longitude this year had that exact same latitude and longitude 10 years ago or 10 years from now. … We try to make the planet non-dynamic.”</p><p>To deepen the datum discrepancy, NAD 83 has not been revamped to account for improved knowledge of Earth’s shape and size. “We are currently working with a system that is very self-consistent and very internally precise, but we know, for example, that the (0,0,0) coordinate of NAD 83, which should be the center of the Earth, is off by about two meters,” Smith said. The tradeoff for keeping surveyors happy is that the North American latitude and longitude grid is increasingly out of sync with the rest of the world (as shown in this diagram below, in which you can see how the North American plate is rotating about a point in the Yucatán). NGS plans an update in 2022, which will shift points on the continent by a meter or more.</p><figure><img decoding="async" alt="" src="https://assets.nautil.us/16769_48229fd6aa4328151e40bda429d8e182.png"><figcaption><span><strong>CHANGES IN LATITUDE:</strong> This diagram reveals how the North American latitude and longitude grid is increasingly out of sync with the rest of the world.</span><span>Courtesy of Michael Dennis of the National Geodetic Survey</span></figcaption></figure>
<p>The “rest of the world” includes Southern California, which straddles the North American and Pacific plates. The Pacific plate creeps a couple of inches toward the northwest every year relative to the rest of North America. The plate boundary is not sharp, so the actual amount of movement varies in a complicated way. The California Spatial Reference Center in La Jolla has a network of tracking stations and periodically updates the coordinates of reference points in the state. “That’s what the surveyors then use to tie themselves into NAD 83,” said the center’s director, Yehuda Bock. The last update was in 2018.</p><p>Like Smith, Bock says that more frequent updating would actually complicate matters: “Surveyors do not like it if coordinates change, so this is kind of a compromise.” For localized line-drawing, it doesn’t much matter, but large-scale projects such as the California high-speed rail system have to keep up with tectonic motion.</p><p>Things obviously get more interesting during earthquakes. “What the earthquake would do is the equivalent of what you do with a pair of scissors, if you cut diagonally across a map along a fault line and then slid one side of the map with respect to the other,” Hudnut said. For instance, in Google Earth, go to the following coordinates north of Palm Springs, near the epicenter of the 1992 Landers quake: 34.189838 degrees, –116.433842 degrees. Bring up the historical imagery, compare the July 1989 and May 1994 images, and you’ll see a lateral shift along the fault that runs from the top left to the bottom right of the frame. The alignment of Aberdeen Road, which crosses the fault, shifts noticeably. The quake displaced the land near the fault by several meters.</p><p>GPS networks can even see earthquakes in real time. A dramatic video of the 2011 Tohoku quake, made by Ronni Grapenthin at the University of California, Berkeley based on data from the Japanese Geospatial Information Authority, shows the coastline near the quake site move horizontally by as much as 4 meters. The video also shows the waves that rippled outward over Japan (and indeed the world).</p>
<p> <iframe loading="lazy" src="https://www.youtube.com/embed/rMhhyb6Yy94" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" width="733" height="412" frameborder="0"></iframe> </p><p>Adjustments for tectonic activity take time to filter down to maps. I spoke with Kari Craun, who, as director of the USGS National Geospatial Technical Operations Center near St. Louis, is in charge of producing the USGS topographic maps beloved of outdoors enthusiasts. She says the maps are updated every three years (and even that pace has been hard to maintain with budget cuts). In between, mapmakers figure, the error is swamped by the imprecision of mapping and GPS equipment. Future maps may be updated at a rate closer to real-time. “We have the technology now with GPS to be able to make those slight adjustments on a more frequent basis,” Craun said.</p><p>As someone who relies on Google Maps to get around, I look forward to that. But the romantic in me prefers seeing out-of-date maps. They never let us forget the dynamism of our planet.</p>
<p><i>George Musser is an award-winning science writer and the author of</i> Spooky Action at a Distance <i>and</i> The Complete Idiot’s Guide to String Theory. <i>Follow him at @gmusser</i></p><p><b>References</b></p><p>1. Potere, D. Horizontal position accuracy of Google Earth’s high-resolution imagery archive. <i>Sensors</i> <b>8</b>, 7973-7981 (2008).</p>
<p><i>Lead image: AngieYeoh / Shutterstock</i></p><div>
<p><img src="https://nautil.us/wp-content/themes/nautilus-block-theme/images/icons/logo-icon.svg" alt="new_letter"></p><div>
<h4>Get the Nautilus newsletter</h4>
<p>Cutting-edge science, unraveled by the very brightest living thinkers.</p>
</div>

</div> </div></div>]]></description>
        </item>
    </channel>
</rss>