(ignoring known css parsing error)
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 20 Oct 2025 18:30:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Production RAG: what I learned from processing 5M+ documents (137 pts)]]></title>
            <link>https://blog.abdellatif.io/production-rag-processing-5m-documents</link>
            <guid>45645349</guid>
            <pubDate>Mon, 20 Oct 2025 15:55:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.abdellatif.io/production-rag-processing-5m-documents">https://blog.abdellatif.io/production-rag-processing-5m-documents</a>, See on <a href="https://news.ycombinator.com/item?id=45645349">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><section><p>October 20, 2025<!-- --> • <!-- -->3 min read</p><article><p>I've spent the last 8 months in the RAG trenches, I want to share what actually worked vs. wasted our time. We built RAG for Usul AI (9M pages) and an unnamed legal AI enterprise (4M pages).</p>
<h2 id="langchain-llamaindex"><a href="#langchain-llamaindex"></a>Langchain + Llamaindex</h2>
<p>We started out with youtube tutorials. First Langchain → Llamaindex. Got to a working prototype in a couple of days and were optimistic with the progress. We run tests on subset of the data (100 documents) and the results looked great. We spent the next few days running the pipeline on the production dataset and got everything working in a week — incredible.</p>
<p>Except it wasn't, the results were subpar and only the end users could tell. We spent the following few months rewriting pieces of the system, one at a time, until the performance was at the level we wanted. Here are things we did ranked by ROI.</p>
<h2 id="what-moved-the-needle"><a href="#what-moved-the-needle"></a>What moved the needle</h2>
<ol>
<li><strong>Query Generation</strong>: not all context can be captured by the user's last query. We had an LLM review the thread and generate a number of semantic + keyword queries. We processed all of those queries in parallel, and passed them to a reranker. This made us cover a larger surface area and not be dependent on a computed score for hybrid search.</li>
<li><strong>Reranking</strong>: the highest value 5 lines of code you'll add. The chunk ranking shifted <em>a lot</em>. More than you'd expect. Reranking can many times make up for a bad setup if you pass in enough chunks. We found the ideal reranker set-up to be 50 chunk input -&gt; 15 output.</li>
<li><strong>Chunking Strategy</strong>: this takes a lot of effort, you'll probably be spending most of your time on it. We built a custom flow for both enterprises, make sure to understand the data, review the chunks, and check that a) chunks are not getting cut mid-word or sentence b) ~each chunk is a logical unit and captures information on its own</li>
<li><strong>Metadata to LLM</strong>: we started by passing the chunk text to the LLM, we ran an experiment and found that injecting relevant metadata as well (title, author, etc.) improves context and answers by a lot.</li>
<li><strong>Query routing</strong>: many users asked questions that can't be answered by RAG (e.g. summarize the article, who wrote this). We created a small router that detects these questions and answers them using an API call + LLM instead of the full-blown RAG set-ups.</li>
</ol>
<h2 id="our-stack"><a href="#our-stack"></a>Our stack</h2>
<ul>
<li><strong>Vector database</strong>: Azure -&gt; Pinecone -&gt; Turbopuffer (cheap, supports keyword search natively)</li>
<li><strong>Document Extraction</strong>: Custom</li>
<li><strong>Chunking</strong>: Unstructured.io by default, custom for enterprises (heard that Chonkie is good)</li>
<li><strong>Embedding</strong>: text-embedding-large-3, haven't tested others</li>
<li><strong>Reranker</strong>: None -&gt; Cohere 3.5 -&gt; Zerank (less known but actually good)</li>
<li><strong>LLM</strong>: GPT 4.1 -&gt; GPT 5 -&gt; GPT 4.1, covered by Azure credits</li>
</ul>
<h2 id="going-open-source"><a href="#going-open-source"></a>Going Open-source</h2>
<p>We put all our learning into an open-source project: <a target="_blank" rel="noopener noreferrer" href="https://github.com/agentset-ai/agentset">agentset-ai/agentset</a> under an MIT license. Feel free to <a target="_blank" rel="noopener noreferrer" href="mailto:abdellatif@agentset.ai">reach out</a> if you have any questions.</p></article></section><!--$--><!--/$--><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How much Anthropic and Cursor spend on Amazon Web Services (127 pts)]]></title>
            <link>https://www.wheresyoured.at/costs/</link>
            <guid>45644777</guid>
            <pubDate>Mon, 20 Oct 2025 15:05:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wheresyoured.at/costs/">https://www.wheresyoured.at/costs/</a>, See on <a href="https://news.ycombinator.com/item?id=45644777">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
          <p>So, I originally planned for this to be on my premium newsletter, but decided it was better to publish on my free one so that you could all enjoy it. If you liked it, please consider subscribing to support my work. <a href="https://edzitronswheresyouredatghostio.outpost.pub/public/promo-subscription/28fs01k51c?ref=wheresyoured.at"><u>Here’s $10 off the first year of annual</u></a>.</p><p>I’ve also recorded an episode about this on my podcast Better Offline (<a href="https://www.omnycontent.com/d/playlist/e73c998e-6e60-432f-8610-ae210140c5b1/cf0c25ad-cf01-4da5-ae1c-b0fc015f790e/53ed270b-7147-4f70-81c2-b0fc015fe4ed/podcast.rss?ref=wheresyoured.at"><u>RSS feed</u></a>, <a href="https://podcasts.apple.com/us/podcast/better-offline/id1730587238?i=1000732667889&amp;ref=wheresyoured.at" rel="noreferrer">Apple</a>, <a href="https://open.spotify.com/episode/5Tyqfmo2EIIj2IzzQl9z1Z?ref=wheresyoured.at" rel="noreferrer">Spotify</a>, <a href="https://podcasts.apple.com/us/podcast/better-offline/id1730587238?i=1000732667889&amp;ref=wheresyoured.at" rel="noreferrer">iHeartRadio</a>), it’s a little different but both handle the same information, just subscribe and it'll pop up.&nbsp;</p><hr><p>Over the last two years I have written <a href="https://www.wheresyoured.at/the-haters-gui/#companies-built-on-top-of-large-language-models-dont-make-much-money-in-fact-theyre-likely-all-deeply-unprofitable"><u>again</u></a> and <a href="https://www.wheresyoured.at/why-everybody-is-losing-money-on-ai/"><u>again</u></a> about the ruinous costs of running generative AI services, and today I’m coming to you with real proof.</p><p>Based on discussions with sources with direct knowledge of their AWS billing, I am able to disclose the amounts that AI firms are spending, specifically Anthropic and AI coding company Cursor, <a href="https://www.vincentschmalbach.com/cursor-is-anthropics-largest-customer-and-maxing-out-their-gpus/?ref=wheresyoured.at"><u>its largest customer</u></a>.</p><p>I can exclusively reveal today Anthropic’s spending on Amazon Web Services for the entirety of 2024, and for every month in 2025 up until September, and that that Anthropic’s spend on compute far exceeds that previously reported.&nbsp;</p><p>Furthermore, I can confirm that <strong>through September, Anthropic has spent more than 100% of its estimated revenue (based on reporting in the last year) on Amazon Web Services, spending $2.66 billion on compute on an estimated $2.55 billion in revenue.</strong></p><p>Additionally, Cursor’s Amazon Web Services bills more than doubled from $6.2 million in May 2025 to $12.6 million in June 2025, exacerbating a cash crunch that began when Anthropic introduced Priority Service Tiers, <a href="https://www.wheresyoured.at/anthropic-and-openai-have-begun-the-subprime-ai-crisis/"><u>an aggressive rent-seeking measure that begun what I call the Subprime AI Crisis</u></a>, where model providers begin jacking up the prices on their previously subsidized rates.</p><p>Although Cursor obtains the majority of its compute from Anthropic — with AWS contributing a relatively small amount, and likely also taking care of other parts of its business — the data seen reveals an overall direction of travel, where the costs of compute <em>only keep on going up</em>.&nbsp;</p><p>Let’s get to it.</p><h2 id="some-initial-important-details">Some Initial Important Details</h2><ul><li><strong>I do not have all the answers!</strong> I am going to do my best to go through the information I’ve obtained and give you a thorough review and analysis. This information provides a revealing — though incomplete — insight into the costs of running Anthropic and Cursor, but does not include other costs, like salaries and compute obtained from other providers. I cannot tell you (and do not have insight into) Anthropic’s actual private moves. Any conclusions or speculation I make in this article will be based on my interpretations of the information I’ve received, as well as other publicly-available information.</li><li>I have used estimates of Anthropic’s revenue based on reporting across the last ten months. Any estimates I make are detailed and they are brief.&nbsp;</li><li><strong>These costs are inclusive of every product bought on Amazon Web Services, including EC2, storage and database services (as well as literally everything else they pay for).</strong></li><li>Anthropic works with both Amazon Web Services and Google Cloud for compute. I do not have any information about its Google Cloud spend.<ul><li>The reason I bring this up is that Anthropic’s revenue is already being eaten up by its AWS spend. It’s likely billions <em>more</em> in the hole from Google Cloud and other operational expenses.</li></ul></li><li>I have confirmed with sources that every single number I give around Anthropic and Cursor’s AWS spend is <strong>the final cash paid to Amazon after any discounts or credits.</strong></li><li>While I cannot disclose the identity of my source, I am 100% confident in these numbers, and have verified their veracity with other sources. </li></ul><h2 id="anthropic%E2%80%99s-compute-costs-are-likely-much-higher-than-reported-%E2%80%94-135-billion-in-2024-on-aws-alone">Anthropic’s Compute Costs Are Likely Much Higher Than Reported — $1.35 Billion in 2024 on AWS Alone</h2><p>In February of this year, <a href="https://www.theinformation.com/articles/anthropic-projects-soaring-growth-to-34-5-billion-in-2027-revenue?rc=kz8jh3&amp;ref=wheresyoured.at"><u>The information reported</u></a> that Anthropic burned $5.6 billion in 2024, and made somewhere between $400 million and $600 million in revenue:</p><blockquote>It’s not publicly known how much revenue Anthropic generated in 2024, although its monthly revenue rose to about $80 million by the end of the year, compared to around $8 million at the start. That suggests full-year revenue in the $400 million to $600 million range.<p>…Anthropic told investors it expects to burn $3 billion this year, substantially less than last year, when it burned $5.6 billion. Last year’s cash burn was nearly $3 billion more than Anthropic had previously projected. That’s likely due to the fact that more than half of the cash burn came from a one-off payment to access the data centers that power its technology, according to one of the people who viewed the pitch.</p></blockquote><p>While I don’t know about prepayment for services, I can confirm from a source with direct knowledge of billing that Anthropic spent $1.35 billion on Amazon Web Services in 2024, and has already spent $2.66 billion on Amazon Web Services through the end of September.</p><p>Assuming that Anthropic made $600 million in revenue, this means that Anthropic spent $6.2 billion in 2024, leaving $4.85 billion in costs unaccounted for.&nbsp;</p><p>The Information’s piece also brings up another point:</p><blockquote>The costs to develop AI models accounted for a major portion of Anthropic’s expenses last year. The company spent $1.5 billion on servers for training AI models. OpenAI was on track to spend as much as $3 billion on training costs last year, though that figure includes additional expenses like paying for data.</blockquote><p>Before I go any further, I want to be clear that The Information’s reporting is sound, and I trust that their source (I have no idea who they are or what information was provided) was operating in good faith with good data. </p><p>However, Anthropic is telling people it spent $1.5 billion on <em>just</em> training when it has an Amazon Web Services bill of $1.35 billion, which heavily suggests that its actual compute costs are significantly higher than we thought, because, to quote SemiAnalysis, “<a href="https://newsletter.semianalysis.com/p/amazons-ai-resurgence-aws-anthropics-multi-gigawatt-trainium-expansion?ref=wheresyoured.at#:~:text=A%20large%20share%20of%20Anthropic%E2%80%99s%20spending%20is%20going%20to%20Google%20Cloud%20%E2%80%93%20one%20of%20Anthropic%E2%80%99s%20first%20major%20investors%20(%24300M%20round%20late%2D2022)%20and%20preferred%20cloud%20partner%20in%202023%20and%202024%2C%20before%20the%20expanded%20AWS%20deal."><u>a large share of Anthropic’s spending is going to Google Cloud</u></a>.”&nbsp;</p><p>I am guessing, because I do not know, but with $4.85 billion of other expenses to account for, it’s reasonable to believe Anthropic spent an amount similar to its AWS spend on Google Cloud. I do not have any information to confirm this, but given the discrepancies mentioned above, this is an explanation that makes sense.</p><p>I also will add that there is some sort of undisclosed cut that Amazon gets of Anthropic’s revenue, though it’s unclear how much. <a href="https://www.theinformation.com/articles/anthropic-projects-soaring-growth-to-34-5-billion-in-2027-revenue?rc=kz8jh3&amp;ref=wheresyoured.at"><u>According to The Information</u></a>, “Anthropic previously told some investors it paid a substantially higher percentage to Amazon [than OpenAI’s 20% revenue share with Microsoft] when companies purchase Anthropic models through Amazon.”</p><p>I cannot confirm whether a similar revenue share agreement exists between Anthropic and Google.</p><p>This also makes me wonder exactly where Anthropic’s money is going.</p><h2 id="where-is-anthropic%E2%80%99s-money-going">Where Is Anthropic’s Money Going?</h2><p>Anthropic has, based on what I can find, raised $32 billion in the last two years, starting out&nbsp;2023 with <a href="https://www.aboutamazon.com/news/company-news/amazon-aws-anthropic-ai?ref=wheresyoured.at"><u>a $4 billion investment from Amazon from September 2023</u></a> (bringing the total to $37.5 billion), where Amazon was named its “primary cloud provider” nearly eight months after <a href="https://www.cnbc.com/2025/01/22/google-agrees-to-new-1-billion-investment-in-anthropic.html?ref=wheresyoured.at"><u>Anthropic announced Google was Anthropic’s “cloud provider.,”</u></a> which <a href="https://www.cnbc.com/2023/10/27/google-commits-to-invest-2-billion-in-openai-competitor-anthropic.html?ref=wheresyoured.at"><u>Google responded to a month later by investing another $2 billion on October 27 2023</u></a>, “involving a $500 million upfront investment and an additional $1.5 billion to be invested over time,” bringing its total funding from 2023 to $6 billion.</p><p>In 2024, it would raise several more rounds — one in January for $750 million, another in March for $884.1 million, another in May for $452.3 million, and <a href="https://www.anthropic.com/news/anthropic-amazon-trainium?ref=wheresyoured.at"><u>another $4 billion from Amazon in November 2024</u></a>, which also saw it name AWS as Anthropic’s “primary cloud and training partner,” bringing its 2024 funding total to $6 billion.</p><p>In 2025 so far, it’s raised <a href="https://www.cnbc.com/2025/01/22/google-agrees-to-new-1-billion-investment-in-anthropic.html?ref=wheresyoured.at"><u>a $1 billion round from Google</u></a>, <a href="https://techcrunch.com/2025/03/03/anthropic-raises-3-5b-to-fuel-its-ai-ambitions/?ref=wheresyoured.at"><u>a $3.5 billion venture round</u></a> in March, opened <a href="https://www.cnbc.com/2025/05/16/anthropic-ai-credit-facility.html?ref=wheresyoured.at"><u>a $2.5 billion credit facility</u></a> in May, and completed <a href="https://www.cnbc.com/2025/09/02/anthropic-raises-13-billion-at-18-billion-valuation.html?ref=wheresyoured.at"><u>a $13 billion venture round in September, valuing the company at $183 billion</u></a>. This brings its total 2025 funding to $20 billion.&nbsp;</p><p>While I do not have Anthropic’s 2023 numbers, its spend on AWS in 2024 — around $1.35 billion — leaves (as I’ve mentioned) $4.85 billion in costs that are unaccounted for. The Information reports that <a href="https://www.theinformation.com/articles/anthropic-projects-soaring-growth-to-34-5-billion-in-2027-revenue?rc=kz8jh3&amp;ref=wheresyoured.at"><u>costs for Anthropic’s 521 research and development staff reached $160 million in 2024</u></a>, leaving 394 other employees unaccounted for (for 915 employees total), and also adding that Anthropic expects its headcount to increase to 1900 people by the end of 2025.</p><p>The Information also adds that Anthropic “expects to stop burning cash in 2027.”</p><p>This leaves two unanswered questions:</p><ul><li>Where is the rest of Anthropic’s money going?</li><li>How will it “stop burning cash” when its operational costs explode as its revenue increases?</li></ul><p>An optimist might argue that Anthropic is just growing its pile of cash so it’s got a warchest to burn through in the future, but I have my doubts. <a href="https://www.wired.com/story/anthropic-dario-amodei-gulf-state-leaked-memo/?ref=wheresyoured.at"><u>In a memo revealed by WIRED</u></a>, Anthropic CEO Dario Amodei stated that “if [Anthropic wanted] to stay on the frontier, [it would] gain a very large benefit from having access to this capital,” with “this capital” referring to money from the Middle East.&nbsp;</p><p>Anthropic and Amodei’s sudden willingness to take large swaths of capital from the Gulf States does not suggest that it’s not at least a <em>little</em> desperate for capital, especially given Anthropic has, <a href="https://archive.ph/t2HiF?ref=wheresyoured.at"><u>according to Bloomberg</u></a>, “recently held early funding talks with Abu Dhabi-based investment firm MGX” <a href="https://www.cnbc.com/2025/09/02/anthropic-raises-13-billion-at-18-billion-valuation.html?ref=wheresyoured.at"><u>a month after raising $13 billion</u></a>.</p><p>In my opinion — and this is just my gut instinct — I believe that it is either significantly more expensive to run Anthropic than we know, or Anthropic’s leaked (and stated) revenue numbers are worse than we believe. I do not know one way or another, and will only report what I know.</p><h2 id="how-much-did-anthropic-and-cursor-spend-on-amazon-web-services-in-2025">How Much Did Anthropic and Cursor Spend On Amazon Web Services In 2025?</h2><p>So, I’m going to do this a little differently than you’d expect, in that I’m going to lay out how much these companies spent, and draw throughlines from that spend to its reported revenue numbers and product announcements or events that may have caused its compute costs to increase.</p><p>I’ve only got Cursor’s numbers from January through September 2025, but I have Anthropic’s AWS spend for both the entirety of 2024 and through September 2025.</p><h2 id="what-does-%E2%80%9Cannualized%E2%80%9D-mean">What Does “Annualized” Mean?</h2><p>So, this term is one of the most abused terms in the world of software, <em>but in this case</em>, I am sticking to the idea that it means “month times 12.” So, if a company made $10m in January, you would say that its annualized revenue is $120m. Obviously, there’s a lot of (when you think about it, really obvious) problems with this kind of reporting — and thus, you only ever see it when it comes to pre-IPO firms — but that’s besides the point.</p><p>I give you this explanation because, when contrasting Anthropic’s AWS spend with its revenues, I’ve had to work back from whatever annualized revenues were reported for that month.&nbsp;</p><h2 id="anthropic%E2%80%99s-amazon-web-services-spend-in-20241359-billionestimated-revenue-400-million-to-600-million">Anthropic’s Amazon Web Services Spend In 2024 - $1.359 Billion - Estimated Revenue $400 Million to $600 Million</h2><p>Anthropic’s 2024 revenues are a little bit of a mystery, but, as mentioned above, <a href="https://www.theinformation.com/articles/anthropic-projects-soaring-growth-to-34-5-billion-in-2027-revenue?ref=wheresyoured.at"><u>The Information</u></a> says it might be between $400 million and $600 million.</p><p>Here’s its monthly AWS spend.&nbsp;</p><ul><li>January 2024 - $52.9 million</li><li>February 2024 - $60.9 million</li><li>March 2024 - $74.3 million</li><li>April 2024 - $101.1 million</li><li>May 2024 - $100.1 million</li><li>June 2024 - $101.8 million</li><li>July 2024 - $118.9 million</li><li>August 2024 - $128.8 million</li><li>September 2024 - $127.8 million</li><li>October 2024 - $169.6 million</li><li>November 2024 - $146.5 million</li><li>December 2024 - $176.1 million</li></ul><h2 id="analysis-anthropic-spent-at-least-200-of-its-2024-revenue-on-amazon-web-services-in-2024">Analysis: Anthropic Spent At Least 200% of Its 2024 Revenue On Amazon Web Services In 2024</h2><p>I’m gonna be <em>nice</em> here and say that Anthropic made $600 million in 2024 — the higher end of The Information’s reporting — meaning that it spent around 226% of its revenue ($1.359 billion) on Amazon Web Services.</p><p><strong>[Editor's note:</strong> this copy originally had incorrect maths on the %. Fixed now.]<strong> </strong></p><h2 id="anthropic%E2%80%99s-amazon-web-services-spend-in-2025-through-september-2025266-billionestimated-revenue-through-september-255-billion104-of-revenue-spent-on-aws">Anthropic’s Amazon Web Services Spend In 2025 Through September 2025 - $2.66 Billion - Estimated Revenue Through September $2.55 Billion - 104% Of Revenue Spent on AWS</h2><p><a href="https://www.wheresyoured.at/howmuchmoney/#anthropic-has-made-around-15-billion-through-july-in-2025-so-far-and-could-hit-9-billion-annualized-by-end-of-2025"><u>Thanks to my own analysis</u></a> and reporting from outlets like The Information and Reuters, we have a pretty good idea of Anthropic’s revenues for much of the year. That said, July, August, and September get a little weirder, because we’re relying on “almosts” and “approachings,” as I’ll explain as we go.</p><p>I’m also gonna do an analysis on a month-by-month basis, because it’s necessary to evaluate these numbers in context.&nbsp;</p><h3 id="january-20251885-million-in-aws-spend-7291-or-83-million-in-revenue227-of-revenue-spent-on-aws">January 2025 - $188.5 million In AWS Spend, $72.91 or $83 Million In Revenue - 227% Of Revenue Spent on AWS</h3><p>In this month, Anthropic’s reported revenue was somewhere from <a href="https://www.theinformation.com/articles/lightspeed-pays-a-pretty-penny-for-anthropic?ref=wheresyoured.at&amp;rc=kz8jh3"><u>$875 million</u></a> to <a href="https://www.cnbc.com/2025/03/03/amazon-backed-ai-firm-anthropic-valued-at-61point5-billion-after-latest-round.html?ref=wheresyoured.at"><u>$1 billion annualized</u></a>, meaning either $72.91 million or $83 million for the month of January.</p><h3 id="february-20251812-million-in-aws-spend-116-million-in-revenue156-of-revenue-spent-on-aws181-of-revenue-spent-on-aws">February 2025 - $181.2 million in AWS Spend, $116 Million In Revenue - 156% Of Revenue Spent On AWS - 181% Of Revenue Spent On AWS</h3><p>In February, <a href="https://www.theinformation.com/articles/anthropics-claude-drives-strong-revenue-growth-while-powering-manus-sensation?offer=exp-ann-25&amp;utm_campaign=Expansion%3A+AI+Agenda&amp;utm_content=7427&amp;utm_medium=email&amp;utm_source=cio&amp;utm_term=5088&amp;rc=kz8jh3"><u>as reported by The Information</u></a>, Anthropic hit $1.4 billion annualized revenue, or around $116 million each month.</p><h3 id="march-20252403-million-in-aws-spend166-million-in-revenue144-of-revenue-spent-on-awslaunch-of-claude-sonnet-37-claude-code-research-preview-february-24">March 2025 - $240.3 million in AWS Spend - $166 Million In Revenue - 144% Of Revenue Spent On AWS - Launch of Claude Sonnet 3.7 &amp; Claude Code Research Preview (February 24)</h3><p>In March, <a href="https://www.reuters.com/business/anthropic-hits-3-billion-annualized-revenue-business-demand-ai-2025-05-30/?ref=wheresyoured.at"><u>as reported by Reuters</u></a>, Anthropic hit $2 billion in annualized revenue, or $166 million in revenue.</p><p>Because February is a short month, and the launch took place on February 24 2025, I’m considering the <a href="https://www.anthropic.com/news/claude-3-7-sonnet?ref=wheresyoured.at"><u>launches of Claude 3.7 Sonnet and Claude Code’s research preview</u></a> to be a cost burden in the month of March.</p><p>And man, what a burden! Costs increased by $59.1 million, primarily across compute categories, but with a large ($2 million since January) increase in monthly costs for S3 storage.</p><h3 id="april-20252216-million-in-aws-spend204-million-in-revenue108-of-revenue-spent-on-aws">April 2025 - $221.6 million in AWS Spend - $204 Million In Revenue - 108% Of Revenue Spent On AWS</h3><p>I estimate, based on a 22.4% compound growth rate, that Anthropic hit around $2.44 billion in annualized revenue in April, or $204 million in revenue.</p><p>Interestingly, <a href="https://www.anthropic.com/news/max-plan?ref=wheresyoured.at"><u>this was the month where Anthropic launched its $100 and $200 dollar a month “Max” plan</u></a>s, and it doesn’t seem to have dramatically increased its costs. Then again, Max is also the gateway to things like Claude Code, which I’ll get to shortly.</p><h3 id="may-20252867-million-in-aws-spend250-million-in-revenue114-of-revenue-spent-on-awssonnet-4-opus-4-general-availability-of-claude-code-may-22-service-tiers-may-30">May 2025 - $286.7 million in AWS Spend - $250 Million In Revenue - 114% Of Revenue Spent On AWS - Sonnet 4, Opus 4, General Availability Of Claude Code (May 22) Service Tiers (May 30)</h3><p>In May, <a href="https://www.cnbc.com/2025/05/30/anthropic-hits-3-billion-in-annualized-revenue-on-business-demand-for-ai.html?ref=wheresyoured.at"><u>as reported by CNBC</u></a>, Anthropic hit $3 billion in annualized revenue, or $250 million in monthly average revenue.</p><p>This was a <em>big month</em> for Anthropic, with <a href="https://www.anthropic.com/news/claude-4?ref=wheresyoured.at"><u>two huge launches on May 22 2025</u></a> — its new, “more powerful” models Claude Sonnet and Opus 4, as well as the general availability of its AI coding environment Claude Code.</p><p>Eight days later, on May 30 2025, a page on Anthropic's API documentation appeared for the first time: "<a href="https://web.archive.org/web/20250530132140/https://docs.anthropic.com/en/api/service-tiers"><u>Service Tiers</u></a>":</p><blockquote>Different tiers of service allow you to balance availability, performance, and predictable costs based on your application’s needs.<p>We offer three service tiers:</p><p>- Priority Tier: Best for workflows deployed in production where time, availability, and predictable pricing are important</p><p>Standard: Best for bursty traffic, or for when you’re trying a new idea</p><p>Batch: Best for asynchronous workflows which can wait or benefit from being outside your normal capacity</p></blockquote><p><a href="https://web.archive.org/web/20250530132140/https://docs.anthropic.com/en/api/service-tiers#get-started-with-priority-tier"><u>Accessing the priority tier requires you to make an up-front commitment to Anthropic</u></a>, and said commitment is based on a number of months (1, 3, 6 or 12) and the number of input and output tokens you estimate you will use each minute.&nbsp;</p><h4 id="what%E2%80%99s-a-priority-tier-why-is-it-significant">What’s a Priority Tier? Why Is It Significant?</h4><p>As I’ll get into in my June analysis, Anthropic’s Service Tiers exist specifically for it to “guarantee” your company won’t face rate limits or any other service interruptions, requiring a minimum spend, minimum token throughput, and for you to pay higher rates when writing to the cache — which is, as I’ll explain, a big part of running an AI coding product like Cursor.</p><p>Now, the jump in costs — $65.1 million or so between April and May — likely comes as a result of the final training for Sonnet and Opus 4, as well as, I imagine, some sort of testing to make sure Claude Code was ready to go.</p><h3 id="june-20253214-million-in-aws-spend333-million-in-revenue965-of-revenue-spent-on-awsanthropic-cashes-in-on-service-tier-tolls-that-add-an-increased-charge-for-prompt-caching-directly-targeting-companies-like-cursor">June 2025 - $321.4 million in AWS Spend - $333 Million In Revenue - 96.5% Of Revenue Spent On AWS - Anthropic Cashes In On Service Tier Tolls That Add An Increased Charge For Prompt Caching, Directly Targeting Companies Like Cursor</h3><p>In June, as reported by The Information, Anthropic hit $4 billion in annualized revenue, or $333 million.</p><p>Anthropic’s revenue spiked by $83 million this month, and so did its costs by $34.7 million.&nbsp;</p><h3 id="anthropic-started-the-subprime-ai-crisis-in-june-2025-increasing-costs-on-its-largest-customer-doubling-its-aws-spend-in-a-month">Anthropic Started The Subprime AI Crisis In June 2025, Increasing Costs On Its Largest Customer, Doubling Its AWS Spend In A Month</h3><p>I have, for a while, talked about <a href="https://www.wheresyoured.at/subprimeai/#:~:text=I%20hypothesize%20a%20kind,to%20justify%20the%20expense."><u>the Subprime AI Crisis</u></a>, where big tech and companies like Anthropic, after offering subsidized pricing to entice in customers, raise the rates on their customers to start covering more of their costs, leading to a cascade where businesses are forced to raise their prices to handle their new, exploding costs.</p><p>And I was god damn <em>right. </em>Or, at least, it sure looks like I am. I’m hedging, forgive me. I cannot say for certain, but I see a pattern.&nbsp;</p><p>It’s likely the June 2025 spike in revenue came from the introduction of service tiers, which specifically target prompt caching, increasing the amount of tokens you’re charged for as an enterprise customer based on the term of the contract, and your forecast usage. </p><p><a href="https://www.wheresyoured.at/anthropic-and-openai-have-begun-the-subprime-ai-crisis/#how-anthropics-tiered-service-may-have-harmed-its-largest-customer-cursor:~:text=a%20minimum%20spend.-,Furthermore,-%2C%20the%20way%20that"><u>Per my reporting in July</u></a>:&nbsp;</p><blockquote>You see, Anthropic specifically notes on its "service tiers" page that requests at the priority tier are "prioritized over all other requests to Anthropic," a rent-seeking measure that effectively means a company must either:<p>-	Commit to at least a month, though likely 3-12 months of specific levels of input and output tokens a minute, based on what they believe they will use in the future, regardless of whether they do.</p><p>-	Accept that access to Anthropic models will be slower at some point, in some way that Anthropic can't guarantee.Furthermore, the way that Anthropic is charging almost feels intentionally built to fuck over any coding startup that would use its service. Per the service tier page, Anthropic charges 1.25 for every time you write a token to the cache with a 5 minute TTL — or 2 tokens if you have a 1 hour TTL — and a longer cache is effectively essential for any background task where an agent will be working for more than 5 minutes, such as restructuring a particularly complex series of code, you know, the exact things that Cursor is well-known and marketed to do. </p><p>Furthermore, the longer something is in the cache, the better autocomplete suggestions for your code will be. It's also important to remember you're, at some point, caching the prompts themselves — so the instructions of what you want Cursor to do, meaning that the more complex the operation, the more expensive it'll now be for Cursor to provide the service with reasonable uptime.</p></blockquote><p>Cursor, as Anthropic’s largest client (the second largest being Github Copilot), represents a material part of its revenue, and its surging popularity meant it was sending more and more revenue Anthropic’s way.&nbsp; Anysphere, the company that develops Cursor, <a href="https://techcrunch.com/2025/06/05/cursors-anysphere-nabs-9-9b-valuation-soars-past-500m-arr/?ref=wheresyoured.at"><u>hit $500 million annualized revenue ($41.6 million) by the end of May</u></a>, which Anthropic chose to celebrate by increasing its costs.</p><p>On June 16 2025, <a href="https://web.archive.org/web/20250619080155/https://www.cursor.com/en/blog/new-tier"><u>Cursor launched a $200-a-month “Ultra” plan</u></a>, <a href="https://cursor.com/blog/new-tier?ref=wheresyoured.at"><u>as well as dramatic changes to its $20-a-month Pro pricing</u></a> that, instead of offering 500 “fast” responses using models from Anthropic and OpenAI, now effectively provided you with “at least” whatever you paid a month (so $20-a-month got at least $20 of credit), <a href="https://techcrunch.com/2025/07/07/cursor-apologizes-for-unclear-pricing-changes-that-upset-users/?ref=wheresyoured.at"><u>massively increasing the costs for users</u></a>, with one calling the changes a “rug pull” <a href="https://x.com/0ni_x4/status/1940885976127283342?ref=wheresyoured.at"><u>after spending $71 in a single day</u></a>.</p><p>As I’ll get to later in the piece, Cursor’s costs exploded from $6.19 million in May 2025 to $12.67 million in June 2025, and I believe this is a direct result of Anthropic’s sudden and aggressive cost increases.&nbsp;</p><p>Similarly, Replit, <a href="https://blog.replit.com/effort-based-pricing?ref=wheresyoured.at"><u>another AI coding startup, moved to “Effort-Based Pricing” on June 18 2025</u></a>. I have not got any information around its AWS spend.</p><p>I’ll get into this a bit later, but I find this whole situation disgusting.</p><h3 id="july-2025-3232-million-in-aws-spend416-million-in-revenue777-of-revenue-spent-on-aws">July 2025 $323.2 million in AWS Spend - $416 Million In Revenue - 77.7% Of Revenue Spent On AWS</h3><p>In July, <a href="https://archive.ph/KWhkD?ref=wheresyoured.at"><u>as reported by Bloomberg</u></a>, Anthropic hit $5 billion in annualized revenue, or $416 million.</p><p>While July wasn’t a huge month for announcements, it was allegedly the month that Claude Code was generating “nearly $400 million in annualized revenue,” or $33.3 million (<a href="https://www.theinformation.com/articles/anthropic-revenue-pace-nears-5-billion-run-mega-round?ref=wheresyoured.at&amp;rc=kz8jh3"><u>according to The Information</u></a>, who says Anthropic was “approaching” $5 billion in annualized revenue - which likely means LESS than that - but I’m going to go with the full $5 billion annualized for sake of fairness.&nbsp;</p><p>There’s roughly an $83 million bump in Anthropic’s revenue between June and July 2025, and I think Claude Code and its new rates are a big part of it. What’s <em>fascinating</em> is that cloud costs didn’t increase too much — by only $1.8 million, to be specific.</p><h3 id="august-20253837-million-in-aws-spend416-million-in-revenue92-of-revenue-spent-on-aws">August 2025 - $383.7 million in AWS Spend - $416 Million In Revenue - 92% Of Revenue Spent On AWS</h3><p>In August, according to Anthropic, its run-rate “<a href="https://www.anthropic.com/news/anthropic-raises-series-f-at-usd183b-post-money-valuation?ref=wheresyoured.at"><u>reached over $5 billion</u></a>,” or in or around $416 million. I am not giving it anything more than $5 billion, especially considering in July Bloomberg’s reporting said “about $5 billion.”</p><p>Costs grew by $60.5 this month, potentially due to the <a href="https://www.anthropic.com/news/claude-opus-4-1?ref=wheresyoured.at"><u>launch of Claude Opus 4.1</u></a>, Anthropic’s more aggressively expensive model, though revenues do not appear to have grown much along the way.</p><p>Yet what’s <em>very</em> interesting is that Anthropic — <a href="https://techcrunch.com/2025/07/28/anthropic-unveils-new-rate-limits-to-curb-claude-code-power-users/?ref=wheresyoured.at"><u>starting August 28</u></a> — launched weekly rate limits on its Claude Pro and Max plans. I wonder why?</p><h3 id="september-20255189-million-in-aws-spend583-million-in-revenue889-of-revenue-spent-on-aws">September 2025 - $518.9 million in AWS Spend - $583 Million In Revenue - 88.9% Of Revenue Spent On AWS</h3><p>Oh fuck! Look at that massive cost explosion!</p><p>Anyway, according to Reuters, <a href="https://archive.ph/EjLeA?ref=wheresyoured.at"><u>Anthropic’s run rate is “approaching $7 billion” in October</u></a>, and for the sake of <em>fairness</em>, I am going to just say it has $7 billion annualized, <strong>though I believe this number to be lower. </strong>“Approaching” can mean a lot of different things — $6.1 billion, $6.5 billion — and because I already anticipate a lot of accusations of “FUD,” I’m going to err on the side of <em>generosity.</em></p><p>If we assume a $6.5 billion annualized rate, that would make this month’s revenue $541.6 million, or 95.8% of its AWS spend.&nbsp;&nbsp;</p><p>Nevertheless, Anthropic’s costs exploded in the space of a month by $135.2 million (35%) - likely due to the fact that users, <a href="https://www.wheresyoured.at/anthropic-is-bleeding-out/"><u>as I reported in mid-July, were costing it thousands or tens of thousands of dollars in compute</u></a>, a problem it still faces to this day, with <a href="https://www.viberank.app/?ref=wheresyoured.at"><u>VibeRank showing a user currently spending $51,291 in a calendar month on a $200-a-month subscription</u></a>.</p><p>If there were other costs, they likely had something to do with the training runs for <a href="https://www.anthropic.com/news/claude-sonnet-4-5?ref=wheresyoured.at"><u>the launches of Sonnet 4.5</u></a> on September 29 2025 and <a href="https://www.anthropic.com/claude/haiku?ref=wheresyoured.at"><u>Haiku 4.5 in October 2025</u></a>.</p><h2 id="anthropic%E2%80%99s-monthly-aws-costs-have-increased-by-174-since-januaryand-with-its-potential-google-cloud-spend-and-massive-staff-anthropic-is-burning-billions-in-2025">Anthropic’s Monthly AWS Costs Have Increased By 174% Since January - And With Its Potential Google Cloud Spend and Massive Staff, Anthropic Is Burning Billions In 2025</h2><p>While these costs only speak to one part of its cloud stack — Anthropic has an unknowable amount of cloud spend on Google Cloud, and the data I have only covers AWS — it is simply remarkable how much this company spends on AWS, and how rapidly its costs seem to escalate as it grows.</p><p>Though things improved slightly over time — in that Anthropic is no longer burning over 200% of its revenue on AWS alone — these costs have still dramatically escalated, and done so in an aggressive and arbitrary manner.&nbsp;</p><h2 id="anthropic%E2%80%99s-aws-costs-increase-linearly-with-revenue-consuming-the-majority-of-each-dollar-anthropic-makesas-a-reminder-it-also-spends-hundreds-of-millions-or-billions-on-google-cloud-too">Anthropic’s AWS Costs Increase Linearly With Revenue, Consuming The Majority Of Each Dollar Anthropic Makes - <strong>As A Reminder, It Also Spends Hundreds Of Millions Or Billions On Google Cloud Too</strong></h2><p>So, I wanted to visualize this part of the story, because I think it’s important to see the various different scenarios.</p><h2 id="an-estimate-of-anthropic%E2%80%99s-potential-cloud-compute-spend-through-september">An Estimate of Anthropic’s Potential Cloud Compute Spend Through September</h2><p><strong><em><u>THE NUMBERS I AM USING ARE ESTIMATES CALCULATED BASED ON 25%, 50% and 100% OF THE AMOUNTS THAT ANTHROPIC HAS SPENT ON AMAZON WEB SERVICES THROUGH SEPTEMBER.&nbsp;</u></em></strong></p><p>I apologize for all the noise, I just want it to be crystal clear what you see next.&nbsp;&nbsp;</p><figure><img src="https://www.wheresyoured.at/content/images/2025/10/data-src-image-a18dda28-2ac7-494a-8aad-1e3124ebda42.png" alt="" loading="lazy" title="Chart" width="1600" height="960" srcset="https://www.wheresyoured.at/content/images/size/w600/2025/10/data-src-image-a18dda28-2ac7-494a-8aad-1e3124ebda42.png 600w, https://www.wheresyoured.at/content/images/size/w1000/2025/10/data-src-image-a18dda28-2ac7-494a-8aad-1e3124ebda42.png 1000w, https://www.wheresyoured.at/content/images/2025/10/data-src-image-a18dda28-2ac7-494a-8aad-1e3124ebda42.png 1600w" sizes="(min-width: 720px) 720px"></figure><p>As you can see, all it takes is for Anthropic to spend (I am estimating) around 25% of its Amazon Web Services bills (for a total of around $3.33 billion in compute costs through the end of September) to savage any and all revenue ($2.55 billion) it’s making.&nbsp;</p><p>Assuming Anthropic spends half of its&nbsp; AWS spend on Google Cloud, this number climbs to $3.99 billion, and if you assume - and to be clear, this is <em><strong>an estimate </strong></em>- that it spends around the same on <em>both</em> Google Cloud and AWS, Anthropic has spent $5.3 billion on compute through the end of September.</p><p>I can’t tell you which it is, just that we know for certain that Anthropic is spending money on Google Cloud, and because Google <a href="https://www.nytimes.com/2025/03/11/technology/google-investment-anthropic.html?ref=wheresyoured.at"><u>owns 14% of the company</u></a> — rivalling <a href="https://www.morningstar.com/news/marketwatch/20250903243/why-anthropics-fresh-183-billion-valuation-is-good-news-for-amazon?ref=wheresyoured.at"><u>estimates saying Amazon owns around 15-19%</u></a> — it’s fair to assume that there’s a significant spend.</p><h2 id="anthropic%E2%80%99s-costs-are-out-of-control-consistently-and-aggressively-outpacing-revenueand-amazon%E2%80%99s-revenue-from-anthropic-of-266-billion-is-25-of-its-2025-capex">Anthropic’s Costs Are Out Of Control, Consistently And Aggressively Outpacing Revenue - And Amazon’s Revenue from Anthropic Of $2.66 Billion Is 2.5% Of Its 2025 Capex</h2><p>I have sat with these numbers for a great deal of time, and I can’t find any evidence that Anthropic has any path to profitability outside of aggressively increasing the prices on their customers to the point that its services will become untenable for consumers and enterprise customers alike.</p><p>As you can see from these estimated and reported revenues, Anthropic’s AWS costs appear to increase in a near-linear fashion with its revenues, meaning that the current pricing — including rent-seeking measures like Priority Service Tiers — isn’t working to meet the burden of its costs.</p><p>We do not know its Google Cloud spend, but I’d be shocked if it was anything less than 50% of its AWS bill. If that’s the case, Anthropic is in real trouble - the cost of the services underlying its business increase the more money they make.</p><p>It’s becoming increasingly apparent that Large Language Models are not a profitable business. While I cannot speak to Amazon Web Services’ actual costs, it’s making $2.66 billion from Anthropic, which is the <em>second largest foundation model company in the world.&nbsp;</em></p><p>Is that really worth <a href="https://www.barrons.com/articles/amazon-stock-ai-aws-207f82d8?gaa_at=eafs&amp;gaa_n=AWEtsqdB5ei2Pp549YWJtX_F8ImxHOmK8IsGY7lELJ-noRSvlrNczjmyppY2gbP5KHk%3D&amp;gaa_ts=68f2c6ea&amp;gaa_sig=fWk4e5ZMICsxF_Jico93PSq67-vn6xdcEFxzgEYijc2HE7uEipCfxyojd9hqbSDlTD_JG-85XbK4EyckM3NKhQ%3D%3D&amp;ref=wheresyoured.at"><u>$105 billion in capital expenditures</u></a>? Is that really worth building <a href="https://futurism.com/the-byte/amazon-anthropic-ai-data-center?ref=wheresyoured.at"><u>a giant 1200 acre data center in Indiana</u></a> with 2.2GW of electricity?</p><p>What’s the plan, exactly? Let Anthropic burn money for the foreseeable future until it dies, and then pick up the pieces? Wait until Wall Street gets mad at you and then pull the plug?</p><p>Who knows.&nbsp;</p><p>But let’s change gears and talk about Cursor — Anthropic’s largest client and, at this point, a victim of circumstance.</p><h2 id="cursor%E2%80%99s-amazon-web-services-spend-in-2025-through-september-20256999-million">Cursor’s Amazon Web Services Spend In 2025 Through September 2025 - $69.99 Million</h2><h3 id="an-important-note-about-cursor%E2%80%99s-compute-spend">An Important Note About Cursor’s Compute Spend</h3><p><a href="https://aws.amazon.com/bedrock/anthropic/?ref=wheresyoured.at"><u>Amazon sells Anthropic’s models through Amazon Bedrock</u></a>, <strong>and I believe that AI startups are compelled to spend some of their AI model compute costs through Amazon Web Services.</strong> Cursor <em>also sends money directly to Anthropic and OpenAI, meaning that these costs are only one piece of its overall compute costs. </em><strong>In any case, it’s very clear that Cursor buys some degree of its Anthropic model spend through Amazon.</strong></p><p>I’ll also add that <a href="https://www.newcomer.co/p/cursors-popularity-has-come-at-a?ref=wheresyoured.at"><u>Tom Dotan of Newcomer reported</u></a> a few months ago that an investor told him that “Cursor is spending 100% of its revenue on Anthropic.”</p><p>Unlike Anthropic, we lack thorough reporting of the month-by-month breakdown of Cursor’s revenues. I will, however, mention them in the month I have them.</p><p>For the sake of readability — and because we really don’t have much information on Cursor’s revenues beyond a few months — I’m going to stick to a bullet point list.&nbsp;</p><h2 id="another-note-about-cursor%E2%80%99s-aws-spendit-likely-funnels-some-model-spend-through-aws-but-the-majority-goes-directly-to-providers-like-anthropic">Another Note About Cursor’s AWS Spend - It Likely Funnels Some Model Spend Through AWS, But The Majority Goes Directly To Providers Like Anthropic</h2><p>As discussed above, <a href="https://web.archive.org/web/20250619080155/https://www.cursor.com/en/blog/new-tier"><u>Cursor announced (along with their price change and $200-a-month plan) several multi-year partnerships</u></a> with xAI, Anthropic, OpenAI and Google, suggesting that it has direct agreements with Anthropic itself versus one with AWS to guarantee “this volume of compute at a predictable price.”&nbsp;</p><p>Based on its spend with AWS, I do not see a strong “minimum” spend that would suggest that they have a similar deal with Amazon — likely because Amazon handles more than its infrastructure than <em>just</em> compute, but incentivizes it to spend on Anthropic’s models through AWS by offering discounts, something I’ve confirmed with a source.&nbsp;</p><p>In any case, here’s what Cursor spent on AWS.</p><ul><li>January 2025 - $1.459 million<ul><li>This, apparently, is the month <a href="https://x.com/AnjneyMidha/status/1879306784525222193?ref=wheresyoured.at"><u>that Cursor hit $100 million annualized revenue</u></a> — or $8.3 million, meaning it spent 17.5% of its revenue on AWS.</li></ul></li><li>February 2025 - $2.47 million</li><li>March 2025 - $4.39 million</li><li>April 2025 - $4.74 million<ul><li><a href="https://www.theinformation.com/briefings/cursor-hits-200-million-annual-recurring-revenue?rc=kz8jh3&amp;ref=wheresyoured.at"><u>Cursor hit $200 million annualized ($16.6 million) at the end of March 2025</u></a>, according to The Information, working out to spending 28% of its revenue on AWS.&nbsp;&nbsp;</li></ul></li><li>May 2025 - $6.19 million</li><li>June 2025 - $12.67 million<ul><li>So, <a href="https://archive.ph/GnzEC?ref=wheresyoured.at"><u>Bloomberg reported that Cursor hit $500 million on June 5 2025</u></a>, along with raising a $900 million funding round. Great news! Turns out it’d need to start handing a lot of that to Anthropic.</li><li>This was, as I’ve discussed above, the month when Anthropic forced it to adopt “Service Tiers”.<a href="https://www.wheresyoured.at/ai-is-a-money-trap/#cursor-is-a-systemic-risk-to-the-ai-industry"><u> I go into detail about the situation here</u></a>, but the long and short of it is that Anthropic increased the amount of tokens you burned by writing stuff to the cache (think of it like RAM in a computer), and AI coding startups are very cache heavy, meaning that Cursor immediately took on what I believed would be massive new costs. As I discuss in what I just linked, this led Cursor to aggressively change its product, thereby vastly increasing its customers’ costs if they wanted to use the same service.</li><li>That same month, Cursor’s AWS costs — which I believe are the <em>minority</em> of its cloud compute costs — exploded by 104% (or by $6.48 million), and never returned to their previous levels.</li><li>It’s conceivable that this surge is due to the compute-heavy nature of the latest Claude 4 models released that month — or, perhaps, Cursor sending more of its users to other models that it runs on Bedrock.&nbsp;</li></ul></li><li>July 2025 - $15.5 million<ul><li>As you can see, Cursor’s costs continue to balloon in July, and I am guessing it’s because of the Service Tiers situation — which, I believe, indirectly resulted in Cursor pushing more users to models that it runs on Amazon’s infrastructure.</li></ul></li><li>August 2025 - $9.67 million<ul><li>So, I can only guess as to why there was a drop here. User churn? It could be <a href="https://cursor.com/blog/gpt-5?ref=wheresyoured.at"><u>the launch of GPT-5 on Cursor</u></a>, which gave users a week of free access to OpenAI’s new models.</li><li>What’s also interesting is that this was the month when <a href="https://cursor.com/blog/aug-2025-pricing?ref=wheresyoured.at"><u>Cursor announced</u></a> that its previously free “auto” model (where Cursor would select the best available premium model or its own model) would now bill at “<a href="https://cursor.com/docs/account/pricing?ref=wheresyoured.at#auto"><u>competitive token rates</u></a>,” by which I mean it went from charging nothing to $1.25 per million input and $6 per million output tokens. This change would take effect on September 15 2025.</li><li><a href="http://newcomer.co/p/cursors-popularity-has-come-at-a?ref=wheresyoured.at"><u>On August 10 2025</u></a>, Tom Dotan of Newcomer reported that Cursor was “well above” $500 million in annualized revenue based on commentary from two sources.</li></ul></li><li>September 2025 - $12.91 million<ul><li>Per the above, this is the month when Cursor started charging for its “auto” model.</li></ul></li></ul><h2 id="what-anthropic-may-have-done-to-cursor-is-disgustingand-is-a-preview-of-what%E2%80%99s-to-come-for-ai-startups">What Anthropic May Have Done To Cursor Is Disgusting - And Is A Preview Of What’s To Come For AI Startups</h2><p>When I wrote that <a href="https://www.wheresyoured.at/anthropic-and-openai-have-begun-the-subprime-ai-crisis/"><u>Anthropic and OpenAI had begun the Subprime AI Crisis</u></a> back in July, I assumed that the increase in costs was <em>burdensome,</em> but having the information from its AWS bills, it seems that Anthropic’s actions directly caused Cursor’s costs to explode by over 100%.&nbsp;</p><p>While I can’t definitively say “this is exactly what did it,” the timelines match up exactly, the costs have never come down, Amazon offers <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html?ref=wheresyoured.at"><u>provisioned throughput</u></a>, and, more than likely, Cursor needs to keep a standard of uptime similar to that of Anthropic’s own direct API access.</p><p>If this is what happened, it’s deeply shameful.&nbsp;</p><p>Cursor, <a href="https://www.vincentschmalbach.com/cursor-is-anthropics-largest-customer-and-maxing-out-their-gpus/?ref=wheresyoured.at"><u>Anthropic’s largest customer</u></a>, in the very same month it hit $500 million in annualized revenue, immediately had its AWS and Anthropic-related costs explode to the point that it had to dramatically reduce the value of its product just as it hit the apex of its revenue growth.&nbsp;</p><h2 id="anthropic-timed-its-rent-seeking-service-tier-price-increases-on-cursor-with-the-launch-of-a-competitive-productwhich-is-what%E2%80%99s-coming-to-any-ai-startup-that-builds-on-top-of-its-products">Anthropic Timed Its Rent-Seeking Service Tier Price Increases on Cursor With The Launch Of A Competitive Product - Which Is What’s Coming To Any AI Startup That Builds On Top Of Its Products</h2><p>It’s very difficult to see Service Tiers as anything other than an aggressive rent-seeking maneuver.</p><p>Yet another undiscussed part of the story is that the launch of Claude 4 Opus and Sonnet — and the subsequent launch of Service Tiers — <a href="https://www.anthropic.com/news/claude-4?ref=wheresyoured.at"><u>coincided with the launch of Claude Code</u></a>, a product that directly competes with Cursor, without the burden of having to pay itself for the cost of models or, indeed, having to deal with its own “Service Tiers.”</p><p>Anthropic may have increased the prices on its largest client at the time it was launching a competitor, <strong>and I believe that this is what awaits any product built on top of OpenAI or Anthropic’s models.&nbsp;</strong></p><h2 id="the-subprime-ai-crisis-is-real-and-it-can-hurt-you">The Subprime AI Crisis Is Real, And It Can Hurt You</h2><p>I realize this has been a long, number-stuffed article, but the long-and-short of it is simple: Anthropic is burning all of its revenue on compute, and Anthropic will willingly increase the prices on its customers if it’ll help it burn less money, even though that doesn’t seem to be working.</p><p>What I believe happened to Cursor will likely happen to every AI-native company, because in a very real sense, Anthropic’s products are a wrapper for its own models, except it only has to pay the (unprofitable) costs of running them on Amazon Web Services and Google Cloud.</p><p>As a result, both OpenAI and Anthropic can (and may very well!) devour the market of any company that builds on top of their models.&nbsp;</p><p>OpenAI may have given Cursor free access to its GPT-5 models in August, but a month later <a href="https://openai.com/index/introducing-upgrades-to-codex/?ref=wheresyoured.at"><u>on September 15 2025</u></a> it debuted massive upgrades to its competitive “Codex” platform.&nbsp;</p><p>Any product built on top of an AI model that shows any kind of success can be cloned immediately by OpenAI and Anthropic, and I believe that we’re going to see multiple price increases on AI-native companies in the next few months. After all, <a href="https://openai.com/api-priority-processing/?ref=wheresyoured.at"><u>OpenAI already has its own priority processing product, which it launched shortly after Anthropic’s in June</u></a>.</p><p>The ultimate problem is that there really are no<em> winners</em> in this situation. If Anthropic kills Cursor through aggressive rent-seeking, that directly eats into its own revenues. If Anthropic lets Cursor succeed, that’s <em>revenue</em>, but it’s also clearly <em>unprofitable revenue</em>. Everybody loses, but nobody loses more than Cursor’s (and other AI companies’) customers.&nbsp;</p><h2 id="anthropic-is-in-real-troubleand-the-current-cost-of-doing-business-is-unsustainable-meaning-prices-must-increase">Anthropic Is In Real Trouble - And The Current Cost Of Doing Business Is Unsustainable, Meaning Prices Must Increase</h2><p>I’ve come away from this piece with a feeling of dread.</p><p>Anthropic’s costs are out of control, and as things get more desperate, it appears to be lashing out at its customers, both companies like Cursor and <a href="https://techcrunch.com/2025/07/28/anthropic-unveils-new-rate-limits-to-curb-claude-code-power-users/?ref=wheresyoured.at"><u>Claude Code customers facing weekly rate limits on their more-powerful models</u></a> who are chided for using a product they pay for. Again, I cannot say for certain, but the spike in costs is clear, and it feels like more than a coincidence to me.&nbsp;</p><p>There is no period of time that I can see in the just under two years of data I’ve been party to that suggests that Anthropic has any means of — or any success doing — cost-cutting, and the only thing this company seems capable of doing is increasing the amount of money it burns on a monthly basis.&nbsp;</p><p>Based on what I have been party to, the more successful Anthropic becomes, the more its services cost. <a href="https://www.wheresyoured.at/how-to-argue-with-an-ai-booster/#if-you-plotted-the-curve-of-how-the-cost-of-inference-has-been-falling-over-time-%E2%80%94-false-the-cost-of-inference-has-gone-up-over-time"><u>The cost of inference is clearly increasing for customers</u></a>, but based on its escalating monthly costs, the cost of inference appears to be high for Anthropic too, though it’s impossible to tell how much of its compute is based on training versus running inference.</p><p>In any case, these costs seem to increase with the amount of money Anthropic makes, meaning that the current pricing of both subscriptions and API access seems unprofitable, and must increase dramatically — from my calculations, a 100% price increase might work, but good luck retaining every single customer and their customers too! — for this company to ever become sustainable.&nbsp;</p><p>I don’t think that people would pay those prices. If anything, I think what we’re seeing in these numbers is a company bleeding out from costs that escalate the more that its user base grows. This is just my opinion, of course.&nbsp;</p><p>I’m tired of watching these companies burn billions of dollars to destroy our environment and steal from everybody. I’m tired that so many people have tried to pretend there’s a justification for burning billions of dollars every year, clinging to empty tropes about how <a href="https://www.wheresyoured.at/how-to-argue-with-an-ai-booster/#ultimate-booster-quip-openai-and-anthropic-are-%E2%80%9Cjust-like-uber%E2%80%9D-because-uber-burned-25-billion-over-the-course-of-15-or-so-years-and-is-now-profitable-this-proves-that-openai-a-totally-different-company-with-different-economics-will-be-fine"><u>this is just like Uber</u></a> or <a href="https://www.wheresyoured.at/the-haters-gui/#ed-amazon-web-services-took-years-to-become-profitable-people-said-amazon-would-fail"><u>Amazon Web Services</u></a>, when Anthropic has built something far more mediocre.&nbsp;</p><p>Mr. Amodei, I am sure you will read this piece, and I can make time to chat in person on my show Better Offline. Perhaps this Friday? I even have some studio time on the books.&nbsp;</p>
        </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Commodore 64 Ultimate (107 pts)]]></title>
            <link>https://www.commodore.net/product-page/commodore-64-ultimate-basic-beige-batch1</link>
            <guid>45644654</guid>
            <pubDate>Mon, 20 Oct 2025 14:55:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.commodore.net/product-page/commodore-64-ultimate-basic-beige-batch1">https://www.commodore.net/product-page/commodore-64-ultimate-basic-beige-batch1</a>, See on <a href="https://news.ycombinator.com/item?id=45644654">Hacker News</a></p>
<div id="readability-page-1" class="page"><p><span><span>ex. tax</span></span></p><div id="comp-mcpbk490" data-testid="richTextElement"><h4>Preorder FAQ</h4>

<h3>Is this a Kickstarter?</h3>
<p>Not quite - this is an official Commodore® preorder with a money-back guarantee. Similar to crowdfunding, every penny goes into manufacturing first, and then to the mission to reboot Commodore itself. By skipping Kickstarter, we avoid big platform fees and pass the savings on to you - just like our founder Jack Tramiel would’ve wanted.&nbsp;</p>

<h3>Am I charged now or at shipping, and what currency?</h3>
<p>You’re charged now, in USD (your local currency shows until checkout). Like Kickstarter and others, your preorder funds production at the factory. The rest helps reboot the Commodore brand.</p>

<h3>Can I get a refund?</h3>
<p>Absolutely. You’re in control. Cancel anytime before shipping with our <strong>no quibble money-back guarantee</strong> for a full refund - no questions asked. Have an account? <a href="https://www.commodore.net/my-orders" target="_blank"><u>Cancel there</u></a> with one click. No account? Use our <a href="https://www.commodore.net/contact-us" target="_blank"><u>support form</u></a> and we’ll sort it fast.</p>

<h3>How does shipping work?</h3>
<p>We deliver from Commodore &amp; Commodore partner hubs in the USA, UK, and EU (including our original 1980s Corby building). If you’re farther out, we ship via trusted couriers like DHL, FedEx, UPS, or Chickenlips Express.</p>

<h3>Will I pay sales tax?</h3>
<p>USA: Sales tax is added at checkout where required.</p>
<p>UK &amp; Europe: VAT/IVA/MwSt is added at checkout.</p>

<h3>What about tariffs?</h3>
<p>If your country charges import tariffs (e.g. the USA), you’ll see a “Tariff Tax” at checkout. This covers everything upfront, so there’s nothing more to pay later. We don’t control these fees, but we avoid surprises. If tariffs drop after you pay, we’ll refund you at shipping. If they rise a lot before shipping, we may adjust- but only if truly needed to protect Commodore’s future.&nbsp;</p>

<h3>What about customs duties?</h3>
<p>We aim to prepay duties (DDP) where possible. In some places (e.g. Norway, Australia, New Zealand, Singapore), you might get a tax refund before shipping. Some countries may still charge customs fees on arrival - these aren’t included and as is commonplace, these are your responsibility.</p>

<h3>Isn't this just an emulator or rebadged something-or-other?</h3>
<p>The Commodore 64 Ultimate from the only original Commodore® brand (est. 1958) is brand new hardware-based Commodore 64 technology. It features SID chip-reactive LEDs (case, keyboard, power light*), the world's first transparent keyboard PCB*, original and modern creators’ autographs etched in copper, and an updated FPGA that replicates the original C64 motherboard (not emulation). All customisable via a new, easy main menu. It’s a fully authentic new build from Commodore - who else?</p>
<p><em>*except beige version</em></p>

<h3>Will Commodore 64 Ultimate units still ship if the acquisition doesn’t complete?</h3>
<p>Good news - as of 31st July 2025 we paid the sellers in full, ahead of schedule, and signed the final contracts to complete the acquisition. Even before that, we had a contract guaranteeing these machines would be made no matter what.</p>

<h3>So what are the risks?</h3>
<p>All launches have some risk, whether you're Apple or Commodore. But this preorder is unusually safe. Most parts are already in production. The motherboard is a proven design. Cases shipped in January 2025. Keycaps shipped in 2024. Just a few parts remain, like the keyboard base, made by a trusted partner since the Apple II era. All components are pro-designed to fit together. Add the box, manual, and power supply, and we’re set.</p>

<h3>Is there a warranty?</h3>
<p>Yes. Our products include a 1-year limited warranty covering defects in materials and workmanship. For customers in the EU or UK, your purchase also complies with local consumer protection laws, including the EU Consumer Rights Directive and UK Consumer Rights Act, which provide additional rights. You can also add an extended warranty <a href="https://www.commodore.net/product-page/commodore-warranty" target="_blank"><u>here</u></a>.</p>

<h3>Can I email/DM you to suggest a feature change?</h3>
<p>We’re not planning hardware changes right now. Chances are we already debated it over chickenlips snacks. We’re reviewing ideas from our launch form and will reach out if your Commodore 256 Ultra-Turbo-CD-Lightgun-Keyring makes the cut.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[BERT Is Just a Single Text Diffusion Step (239 pts)]]></title>
            <link>https://nathan.rs/posts/roberta-diffusion/</link>
            <guid>45644328</guid>
            <pubDate>Mon, 20 Oct 2025 14:31:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nathan.rs/posts/roberta-diffusion/">https://nathan.rs/posts/roberta-diffusion/</a>, See on <a href="https://news.ycombinator.com/item?id=45644328">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="Text Diffusion" src="https://nathan.rs/images/roberta-diffusion.gif"></p><p>A while back, Google DeepMind unveiled <a href="https://deepmind.google/models/gemini-diffusion/">Gemini Diffusion</a>, an experimental language model that generates text using diffusion. Unlike traditional GPT-style models that generate one word at a time, Gemini Diffusion creates whole blocks of text by refining random noise step-by-step.</p><p>I read the paper <a href="https://arxiv.org/abs/2502.09992">Large Language Diffusion Models</a> and was surprised to find that discrete language diffusion is just a generalization of masked language modeling (MLM), something we’ve been doing since <a href="https://arxiv.org/abs/1810.04805">2018</a>.
The first thought I had was, “can we finetune a BERT-like model to do text generation?” I decided to try a quick proof of concept out of curiosity.</p><blockquote><p>NOTE: After I wrote the article I stumbled upon the paper <a href="https://arxiv.org/abs/2211.15029">DiffusionBERT</a> which does essentially the same thing but with more rigorous testing! Check it out if this post interested you.</p></blockquote><h2 id="a-short-history-of-transformers">A Short History of Transformers<a href="#a-short-history-of-transformers">#</a></h2><hr><p>The original Transformer architecture, introduced in <a href="https://arxiv.org/abs/1706.03762">2017</a>, was an encoder-decoder model. In 2018, researchers realized that the encoder and decoder components of the model could be separated (with the advent of <a href="https://arxiv.org/abs/1810.04805">BERT</a> and <a href="https://cdn.openai.com/research-covers/language-unsupervised/language_understanding_paper.pdf">GPT</a>), and two distinct families of models were created:</p><ol><li><strong>Encoder-only models (BERT-style, bidirectional)</strong></li></ol><p>Encoder models used masked language modeling (MLM) as a training objective: randomly mask out a subset of tokens of each input and train the encoder to reconstruct the missing tokens (fill in the blanks).
The model sees the entire (partially masked) context at once and learns bidirectional representations.
This architecture excelled at tasks requiring a full‐sentence (or paragraph) representation (e.g., classification and retrieval).</p><ol start="2"><li><strong>Decoder-only models (GPT-style, autoregressive)</strong></li></ol><p>Decoder models used next‐token prediction as a training objective: at each position $t$, predict the token at position $t + 1$ given all tokens up to $t$ as context. Only the left context is used to predict future values (unidirectional).
This architecture excelled at generative tasks where you produce text one token at a time, such as open‐ended generation, summarization, and translation.</p><p>Originally, BERT saw immediate use in tasks such as classification, whereas GPT-style models didn’t become popular until later (due to initial limited capabilities). Eventually, the generation capabilities of autoregressive (decoder) transformers vastly improved. The general training objective of “next token prediction” means a much larger space of use cases when compared to encoder models.</p><h2 id="discrete-language-diffusion-models">Discrete Language Diffusion Models<a href="#discrete-language-diffusion-models">#</a></h2><hr><p>Diffusion models were first popularized in image generation. In image generation, diffusion models gradually add Gaussian noise to an image (forward process) and then train a neural network to iteratively denoise it (reverse process). A high‐level summary of continuous diffusion with images is:</p><ol><li><strong>Forward process</strong>: Start from a clean image <em>x₀</em>, then add small amounts of (usually Gaussian) noise at each timestep until you end up with near‐pure noise.</li><li><strong>Reverse process</strong>: Train a model (often a U‐Net) to predict the noise at each timestep, gradually recovering the original image in discrete denoising steps.</li></ol><p>Applying this idea to language means we need a way to add noise to text and then remove it in stages.
The simplest way to do this is a <strong>masking‐based noise process</strong>:</p><ol><li><p><strong>Forward (masking) process</strong>:</p><ul><li>At timestep <em>t = 0</em>, you have a fully uncorrupted text sequence.</li><li>At each subsequent timestep <em>t &gt; 0</em>, randomly replace a fraction of tokens with a special <code>&lt;MASK&gt;</code> token according to a pre‐defined schedule (e.g., gradually increasing the masked proportion from 0% to 100%).</li><li>By the final timestep <em>T</em>, the entire sequence may be masked (all tokens are <code>&lt;MASK&gt;</code>).</li></ul></li><li><p><strong>Reverse (denoising) process</strong>:</p><ul><li>Train a model (often a standard Transformer encoder) to predict the original token IDs given a partially masked sequence at timestep <em>t</em>.</li><li>This is akin to performing masked language modeling at varying mask rates: at early timesteps, only a few tokens are masked (easy to predict); at later timesteps, many tokens are masked (harder).</li><li>By chaining together predictions from high‐mask‐rate back down to zero, you can recover (or generate) a full sequence.</li></ul></li></ol><p>In this discrete text diffusion framework, the model learns a likelihood bound on the data distribution by optimizing a sum of denoising losses over all timesteps, rather than a single MLM objective at a fixed mask probability.</p><p>As we can see, BERT’s masked language modeling objective is the <strong>same training objective as text diffusion, but just for a subset of masking rates</strong>.
By introducing variable masking rates (from 0 to 1) and a scheduled sequence of denoising steps (inspired by diffusion theory), we can transform BERT’s masked language modeling objective into a full generative procedure.</p><h2 id="roberta-diffusion">RoBERTa Diffusion<a href="#roberta-diffusion">#</a></h2><hr><p>In 2019, <a href="https://arxiv.org/abs/1907.11692">RoBERTa</a> was released. It was essentially just an enhancement of the original BERT model, with better hyperparameters, data training size, and a more simple training objective (MLM only, removed next sentence prediction).</p><p>Here we use the HuggingFace <code>transformers</code> and <code>dataset</code> libraries to pull in the original RoBERTa weights, tokenizer, and the Trainer class to easily finetune the model on the WikiText dataset.
The main code (<a href="https://github.com/nathan-barry/RoBERTaDiffusion">full code here</a>) looks like this below:</p><div><pre tabindex="0"><code data-lang="python"><span><span><span># Load and tokenize dataset and instantiate the model</span>
</span></span><span><span>dataset <span>=</span> load_dataset(<span>"wikitext"</span>, <span>"wikitext-2-raw-v1"</span>)
</span></span><span><span>tokenizer <span>=</span> RobertaTokenizerFast<span>.</span>from_pretrained(<span>"roberta-base"</span>)
</span></span><span><span>model <span>=</span> RobertaForMaskedLM<span>.</span>from_pretrained(<span>"roberta-base"</span>)
</span></span><span><span>
</span></span><span><span><span># Create the training args and Trainer instance</span>
</span></span><span><span>training_args <span>=</span> TrainingArguments(
</span></span><span><span>    output_dir<span>=</span><span>"finetuned-roberta-diffusion"</span>,
</span></span><span><span>    overwrite_output_dir<span>=</span><span>True</span>,
</span></span><span><span>    num_train_epochs<span>=</span>NUM_EPOCHS,
</span></span><span><span>    per_device_train_batch_size<span>=</span>BATCH_SIZE,
</span></span><span><span>    save_strategy<span>=</span><span>"epoch"</span>,
</span></span><span><span>    save_total_limit<span>=</span><span>1</span>,
</span></span><span><span>    logging_steps<span>=</span><span>200</span>,
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span>trainer <span>=</span> Trainer(
</span></span><span><span>    model<span>=</span>model,
</span></span><span><span>    args<span>=</span>training_args,
</span></span><span><span>    train_dataset<span>=</span>tokenized[<span>"train"</span>],
</span></span><span><span>    eval_dataset<span>=</span>tokenized[<span>"validation"</span>],
</span></span><span><span>    data_collator<span>=</span>diffusion_collator, <span># custom implementation</span>
</span></span><span><span>    tokenizer<span>=</span>tokenizer,
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span># Train &amp; save</span>
</span></span><span><span>trainer<span>.</span>train()
</span></span><span><span>trainer<span>.</span>save_model(<span>"finetuned-roberta-diffusion"</span>)</span></span></code></pre></div><p>Currently we have 10 diffusion steps, so we randomly sample a percentage $p$ out of <code>mask_probs</code> (1.0, 0.9, 0.9, …, 0.1) and mask that percent of the tokens each batch.
The custom <code>diffusion_collator</code> function (<a href="https://github.com/nathan-barry/RoBERTaDiffusion/blob/main/finetune.py#L77">see code here</a>) samples one mask-probability <code>p</code> from <code>mask_probs</code> per batch and sets each token to <code>&lt;MASK&gt;</code> with <code>p</code> probability.</p><p>To be able to condition the generation on a “prompt”, we currently never mask the first 16 tokens. That means that during training, each step will always have the first 16 tokens as context for generation.</p><p>Simplified code for the <code>diffusion_collator</code> looks like:</p><div><pre tabindex="0"><code data-lang="python"><span><span>  <span>def</span> <span>diffusion_collator</span>(examples):
</span></span><span><span>      batch <span>=</span> tokenizer<span>.</span>pad(examples, return_tensors<span>=</span><span>"pt"</span>)
</span></span><span><span>
</span></span><span><span>      <span># Randomly select masking probability for this batch</span>
</span></span><span><span>      mask_prob <span>=</span> random<span>.</span>choice([<span>1.0</span>, <span>0.9</span>, <span>0.8</span>, <span>0.7</span>, <span>0.6</span>, <span>0.5</span>, <span>0.4</span>, <span>0.3</span>, <span>0.2</span>, <span>0.1</span>])
</span></span><span><span>
</span></span><span><span>      <span># Never mask the first PREFIX_LEN tokens (preserved context)</span>
</span></span><span><span>      maskable_positions <span>=</span> batch<span>.</span>input_ids[:, PREFIX_LEN:]
</span></span><span><span>
</span></span><span><span>      <span># Create random mask for the chosen probability</span>
</span></span><span><span>      mask <span>=</span> torch<span>.</span>rand(maskable_positions<span>.</span>shape) <span>&lt;</span> mask_prob
</span></span><span><span>
</span></span><span><span>      <span># Apply masking</span>
</span></span><span><span>      batch<span>.</span>input_ids[:, PREFIX_LEN:][mask] <span>=</span> tokenizer<span>.</span>mask_token_id
</span></span><span><span>      batch<span>.</span>labels <span>=</span> batch<span>.</span>input_ids<span>.</span>clone()
</span></span><span><span>
</span></span><span><span>      <span>return</span> batch</span></span></code></pre></div><p>For inference, we start with an input which is a tensor of size 256 (since we are generating blocks of 256 tokens). The first 16 positions are the token ids that correspond to the prompt, and the last 240 are just <code>&lt;MASK&gt;</code> tokens. We iterate through the denoising schedule and each step, we generate a prediction and then remask the sequence again. The process looks like this:</p><pre tabindex="0"><code>Step 0: [PREFIX] &lt;mask&gt; &lt;mask&gt; &lt;mask&gt; &lt;mask&gt; &lt;mask&gt; ...     (100% masked)
Step 1: [PREFIX] will &lt;mask&gt; over &lt;mask&gt; control ...        (90% masked)
Step 2: [PREFIX] will begin &lt;mask&gt; greater control ...      (80% masked)
...
Step 10: [PREFIX] will begin to assert greater control ...  (0% masked - DONE)</code></pre><p>Simplified code for generation looks like:</p><div><pre tabindex="0"><code data-lang="python"><span><span><span># Generate text through iterative denoising</span>
</span></span><span><span><span>for</span> step, mask_prob <span>in</span> <span>enumerate</span>(mask_probs):
</span></span><span><span>    <span># Forward pass: predict masked tokens</span>
</span></span><span><span>    <span>with</span> torch<span>.</span>no_grad():
</span></span><span><span>        outputs <span>=</span> model(input_ids<span>=</span>input_ids, attention_mask<span>=</span>attention_mask)
</span></span><span><span>        predictions <span>=</span> outputs<span>.</span>logits  <span># shape: (1, MAX_LEN, vocab_size)</span>
</span></span><span><span>
</span></span><span><span>    <span># For each masked position, sample from top-k/top-p filtered distribution</span>
</span></span><span><span>    <span>for</span> pos <span>in</span> <span>range</span>(PREFIX_LEN, MAX_LEN):
</span></span><span><span>        <span>if</span> input_ids[<span>0</span>, pos] <span>==</span> tokenizer<span>.</span>mask_token_id:
</span></span><span><span>            logits <span>=</span> predictions[<span>0</span>, pos, :]
</span></span><span><span>            <span># Apply top-k and top-p filtering</span>
</span></span><span><span>            filtered_logits <span>=</span> top_k_top_p_filtering(logits, top_k<span>=</span>TOP_K, top_p<span>=</span>TOP_P)
</span></span><span><span>            probs <span>=</span> F<span>.</span>softmax(filtered_logits, dim<span>=-</span><span>1</span>)
</span></span><span><span>            <span># Sample token</span>
</span></span><span><span>            sampled_token <span>=</span> torch<span>.</span>multinomial(probs, <span>1</span>)
</span></span><span><span>            input_ids[<span>0</span>, pos] <span>=</span> sampled_token
</span></span><span><span>
</span></span><span><span>    <span># Re-mask a portion of non-prefix tokens for next iteration</span>
</span></span><span><span>    <span>if</span> mask_prob <span>&gt;</span> <span>0</span>:
</span></span><span><span>        mask_indices <span>=</span> torch<span>.</span>rand(MAX_LEN <span>-</span> PREFIX_LEN) <span>&lt;</span> mask_prob
</span></span><span><span>        input_ids[<span>0</span>, PREFIX_LEN:][mask_indices] <span>=</span> tokenizer<span>.</span>mask_token_id</span></span></code></pre></div><p>Here is an example output generation of the fine-tuned model after training on an H200 for 30 minutes (the first line is the initial prompt):</p><pre tabindex="0"><code>Following their victory in the French and Indian War, Britain began to assert
greater...

...dominion over Europe beginning about the early 19th. There conflict took
place on the island, between British and Irish Ireland. British officials 
administered British Ireland, a Celtic empire under the control of the Irish 
nationalist authorities, defined as a dominion of Britain. As the newly Fortic 
states acquired independent and powerful status, many former English colonies
played their part in this new, British @-@ controlled colonial system. Following
this period the Non @-@ Parliamentaryist Party won its influence in Britain in 
1890, led by the support of settlers from the Irish colonies. Looking inwards, 
Sinclair, Lewis questioned, and debated the need to describe " The New Britain "</code></pre><p>The output looks surprisingly coherent! Most of the quirks present are actually just quirks from the formatting of WikiText (spaces around punctuation <code>"</code>, turning hyphens <code>-</code> into <code>@-@</code>).</p><p>Below is a comparison between our diffusion model and GPT-2:</p><p><img alt="RoBERTa Diffusion vs GPT" src="https://nathan.rs/images/roberta-diffusion-gpt.gif"></p><p>We see GPT-2’s output is more coherent and slightly faster (~9 seconds vs ~13) but I’m pleasantly surprised with how good my simple implementation was. It is a good proof of concept, and with new approaches like AR-Diffusion and Skip-Step Diffusion (and a more optimized implementation), the quality and speed can be drastically improved.</p><h2 id="conclusion">Conclusion<a href="#conclusion">#</a></h2><hr><p>We’ve seen that masked language models like RoBERTa, originally designed for fill-in-the-blank tasks, can be repurposed into fully generative engines by interpreting variable-rate masking as a discrete diffusion process. By gradually corrupting text with <code>&lt;MASK&gt;</code> tokens and training the model to iteratively denoise at increasing mask intensities, we effectively turn the standard MLM objective into a step-by-step generation procedure.</p><p>Even without architectural changes, a fine-tuned RoBERTa can generate coherent looking text after slightly modifying the training objective, validating the idea that BERT-style models are essentially just text diffusion models trained on one masking rate.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Servo v0.0.1 Released (340 pts)]]></title>
            <link>https://github.com/servo/servo</link>
            <guid>45643357</guid>
            <pubDate>Mon, 20 Oct 2025 12:55:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/servo/servo">https://github.com/servo/servo</a>, See on <a href="https://news.ycombinator.com/item?id=45643357">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">The Servo Parallel Browser Engine Project</h2><a id="user-content-the-servo-parallel-browser-engine-project" aria-label="Permalink: The Servo Parallel Browser Engine Project" href="#the-servo-parallel-browser-engine-project"></a></p>
<p dir="auto">Servo is a prototype web browser engine written in the
<a href="https://github.com/rust-lang/rust">Rust</a> language. It is currently developed on
64-bit macOS, 64-bit Linux, 64-bit Windows, 64-bit OpenHarmony, and Android.</p>
<p dir="auto">Servo welcomes contribution from everyone. Check out:</p>
<ul dir="auto">
<li>The <a href="https://book.servo.org/" rel="nofollow">Servo Book</a> for documentation</li>
<li><a href="https://servo.org/" rel="nofollow">servo.org</a> for news and guides</li>
</ul>
<p dir="auto">Coordination of Servo development happens:</p>
<ul dir="auto">
<li>Here in the Github Issues</li>
<li>On the <a href="https://servo.zulipchat.com/" rel="nofollow">Servo Zulip</a></li>
<li>In video calls advertised in the <a href="https://github.com/servo/project/issues">Servo Project</a> repo.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<p dir="auto">For more detailed build instructions, see the Servo book under <a href="https://book.servo.org/hacking/setting-up-your-environment.html" rel="nofollow">Setting up your environment</a>, <a href="https://book.servo.org/hacking/building-servo.html" rel="nofollow">Building Servo</a>, <a href="https://book.servo.org/hacking/building-for-android.html" rel="nofollow">Building for Android</a> and <a href="https://book.servo.org/hacking/building-for-openharmony.html" rel="nofollow">Building for OpenHarmony</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">macOS</h3><a id="user-content-macos" aria-label="Permalink: macOS" href="#macos"></a></p>
<ul dir="auto">
<li>Download and install <a href="https://developer.apple.com/xcode/" rel="nofollow">Xcode</a> and <a href="https://brew.sh/" rel="nofollow"><code>brew</code></a>.</li>
<li>Install <code>uv</code>: <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></li>
<li>Install <code>rustup</code>: <code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></li>
<li>Restart your shell to make sure <code>cargo</code> is available</li>
<li>Install the other dependencies: <code>./mach bootstrap</code></li>
<li>Build servoshell: <code>./mach build</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Linux</h3><a id="user-content-linux" aria-label="Permalink: Linux" href="#linux"></a></p>
<ul dir="auto">
<li>Install <code>curl</code>:
<ul dir="auto">
<li>Arch: <code>sudo pacman -S --needed curl</code></li>
<li>Debian, Ubuntu: <code>sudo apt install curl</code></li>
<li>Fedora: <code>sudo dnf install curl</code></li>
<li>Gentoo: <code>sudo emerge net-misc/curl</code></li>
</ul>
</li>
<li>Install <code>uv</code>: <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></li>
<li>Install <code>rustup</code>: <code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></li>
<li>Restart your shell to make sure <code>cargo</code> is available</li>
<li>Install the other dependencies: <code>./mach bootstrap</code></li>
<li>Build servoshell: <code>./mach build</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Windows</h3><a id="user-content-windows" aria-label="Permalink: Windows" href="#windows"></a></p>
<ul dir="auto">
<li>Download <a href="https://docs.astral.sh/uv/getting-started/installation/#standalone-installer" rel="nofollow"><code>uv</code></a>, <a href="https://chocolatey.org/install#individual" rel="nofollow"><code>choco</code></a>, and <a href="https://win.rustup.rs/" rel="nofollow"><code>rustup</code></a>
<ul dir="auto">
<li>Be sure to select <em>Quick install via the Visual Studio Community installer</em></li>
</ul>
</li>
<li>In the Visual Studio Installer, ensure the following components are installed:
<ul dir="auto">
<li><strong>Windows 10/11 SDK (anything &gt;= 10.0.19041.0)</strong> (<code>Microsoft.VisualStudio.Component.Windows{10, 11}SDK.{&gt;=19041}</code>)</li>
<li><strong>MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)</strong> (<code>Microsoft.VisualStudio.Component.VC.Tools.x86.x64</code>)</li>
<li><strong>C++ ATL for latest v143 build tools (x86 &amp; x64)</strong> (<code>Microsoft.VisualStudio.Component.VC.ATL</code>)</li>
</ul>
</li>
<li>Restart your shell to make sure <code>cargo</code> is available</li>
<li>Install the other dependencies: <code>.\mach bootstrap</code></li>
<li>Build servoshell: <code>.\mach build</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Android</h3><a id="user-content-android" aria-label="Permalink: Android" href="#android"></a></p>
<ul dir="auto">
<li>Ensure that the following environment variables are set:
<ul dir="auto">
<li><code>ANDROID_SDK_ROOT</code></li>
<li><code>ANDROID_NDK_ROOT</code>: <code>$ANDROID_SDK_ROOT/ndk/28.2.13676358/</code>
<code>ANDROID_SDK_ROOT</code> can be any directory (such as <code>~/android-sdk</code>).
All of the Android build dependencies will be installed there.</li>
</ul>
</li>
<li>Install the latest version of the <a href="https://developer.android.com/studio#command-tools" rel="nofollow">Android command-line
tools</a> to
<code>$ANDROID_SDK_ROOT/cmdline-tools/latest</code>.</li>
<li>Run the following command to install the necessary components:
<div dir="auto" data-snippet-clipboard-copy-content="sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
 &quot;build-tools;34.0.0&quot; \
 &quot;emulator&quot; \
 &quot;ndk;28.2.13676358&quot; \
 &quot;platform-tools&quot; \
 &quot;platforms;android-33&quot; \
 &quot;system-images;android-33;google_apis;x86_64&quot;"><pre>sudo <span>$ANDROID_SDK_ROOT</span>/cmdline-tools/latest/bin/sdkmanager --install \
 <span><span>"</span>build-tools;34.0.0<span>"</span></span> \
 <span><span>"</span>emulator<span>"</span></span> \
 <span><span>"</span>ndk;28.2.13676358<span>"</span></span> \
 <span><span>"</span>platform-tools<span>"</span></span> \
 <span><span>"</span>platforms;android-33<span>"</span></span> \
 <span><span>"</span>system-images;android-33;google_apis;x86_64<span>"</span></span></pre></div>
</li>
<li>Follow the instructions above for the platform you are building on</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">OpenHarmony</h3><a id="user-content-openharmony" aria-label="Permalink: OpenHarmony" href="#openharmony"></a></p>
<ul dir="auto">
<li>Follow the instructions above for the platform you are building on to prepare the environment.</li>
<li>Depending on the target distribution (e.g. <code>HarmonyOS NEXT</code> vs pure <code>OpenHarmony</code>) the build configuration will differ slightly.</li>
<li>Ensure that the following environment variables are set
<ul dir="auto">
<li><code>DEVECO_SDK_HOME</code> (Required when targeting <code>HarmonyOS NEXT</code>)</li>
<li><code>OHOS_BASE_SDK_HOME</code> (Required when targeting <code>OpenHarmony</code>)</li>
<li><code>OHOS_SDK_NATIVE</code> (e.g. <code>${DEVECO_SDK_HOME}/default/openharmony/native</code> or <code>${OHOS_BASE_SDK_HOME}/${API_VERSION}/native</code>)</li>
<li><code>SERVO_OHOS_SIGNING_CONFIG</code>: Path to json file containing a valid signing configuration for the demo app.</li>
</ul>
</li>
<li>Review the detailed instructions at <a href="https://book.servo.org/hacking/building-for-openharmony.html" rel="nofollow">Building for OpenHarmony</a>.</li>
<li>The target distribution can be modified by passing <code>--flavor=&lt;default|harmonyos&gt;</code> to <code>mach &lt;build|package|install&gt;</code>.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Alibaba Cloud says it cut Nvidia AI GPU use by 82% with new pooling system (185 pts)]]></title>
            <link>https://www.tomshardware.com/tech-industry/semiconductors/alibaba-says-new-pooling-system-cut-nvidia-gpu-use-by-82-percent</link>
            <guid>45643163</guid>
            <pubDate>Mon, 20 Oct 2025 12:31:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/tech-industry/semiconductors/alibaba-says-new-pooling-system-cut-nvidia-gpu-use-by-82-percent">https://www.tomshardware.com/tech-industry/semiconductors/alibaba-says-new-pooling-system-cut-nvidia-gpu-use-by-82-percent</a>, See on <a href="https://news.ycombinator.com/item?id=45643163">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">
<section>
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg.webp 1920w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN.jpg" alt="Alibaba Cloud" srcset="https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg 1920w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-850-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN-320-80.jpg 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-new-v2-image="true" data-original-mos="https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/5bjnskrFjackkmGHw7V4aN.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>(Image credit: Alibaba)</span>
</figcaption>
</div>

<div id="article-body">
<p id="caf228b5-5290-4a25-9b2c-43d6badcb8b3">Alibaba Cloud claims its new Aegaeon pooling system reduces the number of Nvidia GPUs required to serve large language models by 82% during a multi-month beta test inside its Model Studio marketplace. The result, published in a <a data-analytics-id="inline-link" href="https://ennanzhai.github.io/pub/sosp25-aegaeon.pdf" target="_blank">peer-reviewed paper</a> presented at the 2025 ACM Symposium on Operating Systems (SOSP) in Seoul, suggests that cloud providers may be able to extract significantly more inference capacity from existing silicon, especially in constrained markets like China, where the <a data-analytics-id="inline-link" href="https://www.tomshardware.com/pc-components/gpus/china-repurposes-used-nvidia-gpus" data-before-rewrite-localise="https://www.tomshardware.com/pc-components/gpus/china-repurposes-used-nvidia-gpus">supply of Nvidia's latest H20s</a> remains limited.</p><p>Unlike training-time breakthroughs that chase model quality or speed, Aegaeon is an inference-time scheduler designed to maximize GPU utilization across many models with bursty or unpredictable demand. Instead of pinning one accelerator to one model, Aegaeon virtualizes GPU access at the token level, allowing it to schedule tiny slices of work across a shared pool. This means one H20 could serve several different models simultaneously, with system-wide “goodput” — a measure of effective output — rising by as much as nine times compared to older serverless systems.</p>

<p id="caf228b5-5290-4a25-9b2c-43d6badcb8b3-2">The system was tested in production over several months, according to the paper, which lists authors from both Peking University and Alibaba’s infrastructure division, including CTO Jingren Zhou. During that window, the number of GPUs needed to support dozens of different LLMs — ranging in size up to 72 billion parameters — fell from 1,192 to just 213.</p><p>While the paper does not break down which models contributed most to the savings, reporting by the <a data-analytics-id="inline-link" href="https://www.scmp.com/business/article/3329450/alibaba-cloud-claims-slash-nvidia-gpu-use-82-new-pooling-system?module=top_story&amp;pgtype=section"><em>South China Morning Post</em></a><em> </em>says the tests were conducted using Nvidia’s H20, one of the <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tech-industry/jensen-huang-says-nvidia-china-market-share-has-fallen-to-zero" data-before-rewrite-localise="https://www.tomshardware.com/tech-industry/jensen-huang-says-nvidia-china-market-share-has-fallen-to-zero">few accelerators</a> still legally available to Chinese buyers under current U.S. export controls.</p><p>Whether those savings translate outside Alibaba’s stack remains to be seen. Alibaba Cloud’s paper does not specify the exact network fabric used in the beta test, but we know the company offers its own eRDMA elastic RDMA network and has a record of building highly‑integrated GPU serving stacks, suggesting the results may depend on an optimized, vertically integrated environment.</p>
<a href="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" id="91c68ebe-b326-462c-8a81-636b58803280"><figure data-bordeaux-image-check=""><div><p> <picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png.webp 1200w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-320-80.png.webp 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56.png" alt="Google Preferred Source" srcset="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png 1200w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png 1024w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png 970w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-320-80.png 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-new-v2-image="true" data-original-mos="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56.png">
</picture></p></div></figure></a>
<p id="de01fbb3-3508-4f25-a524-943c5df08f57"><em>Follow</em><a data-analytics-id="inline-link" href="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" target="_blank"><em> Tom's Hardware on Google News</em></a><em>, or</em><a data-analytics-id="inline-link" href="https://google.com/preferences/source?q=" target="_blank"><em> add us as a preferred source</em></a><em>, to get our latest news, analysis, &amp; reviews in your feeds.</em></p>
</div>



<!-- Drop in a standard article here maybe? -->



<div id="slice-container-authorBio-UfPxse5QFfEeNmgZisoaf5"><p>Luke James is a freelance writer and journalist.&nbsp; Although his background is in legal, he has a personal interest in all things tech, especially hardware and microelectronics, and anything regulatory.&nbsp;</p></div>
</section>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI-generated 'poverty porn' fake images being used by aid agencies (155 pts)]]></title>
            <link>https://www.theguardian.com/global-development/2025/oct/20/ai-generated-poverty-porn-fake-images-being-used-by-aid-agencies</link>
            <guid>45643040</guid>
            <pubDate>Mon, 20 Oct 2025 12:17:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/global-development/2025/oct/20/ai-generated-poverty-porn-fake-images-being-used-by-aid-agencies">https://www.theguardian.com/global-development/2025/oct/20/ai-generated-poverty-porn-fake-images-being-used-by-aid-agencies</a>, See on <a href="https://news.ycombinator.com/item?id=45643040">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>AI-generated images of extreme poverty, children and sexual violence survivors are flooding stock photo sites and increasingly being used by leading health NGOs, according to global health professionals who have voiced concern over a new era of “poverty porn”.</p><p>“All over the place, people are using it,” said Noah Arnold, who works at Fairpicture, a Swiss-based organisation focused on promoting ethical imagery in global development. “Some are actively using AI imagery, and others, we know that they’re experimenting at least.”</p><p><a href="https://www.thelancet.com/journals/langlo/article/PIIS2214-109X(23)00329-7/fulltext" data-link-name="in body link">Arsenii Alenichev, a researcher</a> at the Institute of Tropical Medicine in Antwerp studying the production of global health images, said: “The images replicate the visual grammar of poverty – children with empty plates, cracked earth, stereotypical visuals.”</p><p>Alenichev has collected more than 100 AI-generated images of extreme poverty used by individuals or NGOs as part of social media campaigns against hunger or sexual violence. Images he shared with the Guardian show exaggerated, stereotype-perpetuating scenes: children huddled together in muddy water; an African girl in a wedding dress with a tear staining her cheek. In a <a href="https://www.thelancet.com/journals/langlo/article/PIIS2214-109X(25)00313-4/fulltext?rss=yes" data-link-name="in body link">comment piece published on Thursday</a> in the Lancet Global Health, he argues these images amount to “poverty porn 2.0”.</p><p>While it is hard to quantify the prevalence of the AI-generated images, Alenichev and others say their use is on the rise, driven by concerns over consent and cost. Arnold said that US funding cuts to NGO budgets had made matters worse.</p><p>“It is quite clear that various organisations are starting to consider synthetic images instead of real photography, because it’s cheap and you don’t need to bother with consent and everything,” said Alenichev.</p><p>AI-generated images of extreme poverty now appear in their dozens on popular stock photo sites, including <a href="https://stock.adobe.com/uk/search/images?filters%5Bcontent_type%3Aphoto%5D=1&amp;filters%5Bcontent_type%3Aillustration%5D=1&amp;filters%5Bcontent_type%3Azip_vector%5D=1&amp;filters%5Bcontent_type%3Avideo%5D=0&amp;filters%5Bcontent_type%3Atemplate%5D=0&amp;filters%5Bcontent_type%3A3d%5D=0&amp;filters%5Bcontent_type%3Aaudio%5D=0&amp;filters%5Binclude_stock_enterprise%5D=0&amp;filters%5Bis_editorial%5D=0&amp;filters%5Bfree_collection%5D=0&amp;filters%5Bcontent_type%3Aimage%5D=1&amp;filters%5Bgentech%5D=only&amp;k=poverty&amp;order=relevance&amp;price%5B%24%5D=1&amp;search_type=filter-select&amp;get_facets=1" data-link-name="in body link">Adobe Stock Photos</a> and <a href="https://www.freepik.com/search?ai=only&amp;format=search&amp;last_filter=ai&amp;last_value=only&amp;query=poverty" data-link-name="in body link">Freepik</a>, in response to queries such as “poverty”. Many bear captions such as “Photorealistic kid in refugee camp”; “Asian children swim in a river full of waste”; and “Caucasian white volunteer provides medical consultation to young black children in African village”. Adobe sells licences to the last two photos in that list for about £60.</p><p>“They are so racialised. They should never even let those be published because it’s like the worst stereotypes about Africa, or India, or you name it,” said Alenichev.</p><p>Joaquín Abela, CEO of Freepik, said the responsibility for using such extreme images lay with media consumers, and not with platforms such as his. The AI stock photos, he said, are generated by the platform’s global community of users, who can receive a licensing fee when Freepik’s customers choose to buy their images.</p><p>Freepik had attempted to curb biases it had found in other parts of its photo library, he said, by “injecting diversity” and trying to ensure gender balance into the photos of lawyers and CEOs hosted on the site.</p><p>But, he said, there was only so much his platform could do. “It’s like trying to dry the ocean. We make an effort, but in reality, if customers worldwide want images a certain way, there is absolutely nothing that anyone can do.”</p><figure id="f83a4bc0-27e2-4585-8c83-b8dd6140dbc1" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A series of photographs showing black and brown-skinned people living in poverty in what appear to be refugee camps" src="https://i.guim.co.uk/img/media/c4f9a6f4fa8474a2c2ac158c0745bdceab2c7ae0/5_0_2227_1211/master/2227.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="241.98248765154915" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>A screen grab showing AI-generated images of ‘poverty’ on a stock photo site. Pictures such as these have raised concerns over biased imagery and stereotypes.</span> Illustration: Freepik</figcaption></figure><p>In the past, leading charities have used AI-generated images as part of their communications strategies on global health. In 2023, the Dutch arm of UK charity Plan International released a <a href="https://www.youtube.com/watch?v=wD_JjBWddq8" data-link-name="in body link">video campaign against child marriage</a> containing AI-generated images of a girl with a black eye, an older man and a pregnant teenager.</p><p>Last year, the <a href="https://www.youtube.com/watch?v=S38jbjC47oY" data-link-name="in body link">UN posted a video</a> on YouTube with AI-generated “re-enactments” of sexual violence in conflict, which included AI-generated testimony from a Burundian woman describing being raped by three men and left to die in 1993 during the country’s civil war. The video was removed after the Guardian contacted the UN for comment.</p><div><p>A UN Peacekeeping spokesperson said: “The video in question, which was produced over a year ago using a fast-evolving tool, has been taken down, as we believed it shows improper use of AI, and may pose risks regarding information integrity, blending real footage and near-real artificially generated content. </p><p>
 “The United Nations remains steadfast in its commitment to support victims of conflict-related sexual violence, including through innovation and creative advocacy.”</p></div><p>Arnold said the rising use of these AI images comes after years of debate in the sector around ethical imagery and dignified storytelling about poverty and violence. “Supposedly, it’s easier to take ready-made AI visuals that come without consent, because it’s not real people.”</p><figure id="dcc5b05b-a6e5-4e73-bab9-8671c357e49c" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:16,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;text&quot;:&quot;How AI monitoring is cutting stillbirths and neonatal deaths in a clinic in Malawi&quot;,&quot;elementId&quot;:&quot;dcc5b05b-a6e5-4e73-bab9-8671c357e49c&quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/global-development/2024/dec/06/how-ai-monitoring-is-cutting-stillbirths-and-neonatal-deaths-in-a-clinic-in-malawi&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;design&quot;:0,&quot;display&quot;:0,&quot;theme&quot;:0}}"></gu-island></figure><p>Kate Kardol, an NGO communications consultant, said the images frightened her, and recalled earlier debates about the use of “poverty porn” in the sector.</p><p>“It saddens me that the fight for more ethical representation of people experiencing poverty now extends to the unreal,” she said.</p><p>Generative AI tools have long been found to replicate – and at times exaggerate – <a href="https://www.theguardian.com/technology/2024/mar/16/ai-racism-chatgpt-gemini-bias" data-link-name="in body link">broader societal biases</a>. The proliferation of biased images in global health communications may make the problem worse, said Alenichev, because the images could filter out into the wider internet and be used to train the next generation of AI models, a process which has been <a href="https://www.nytimes.com/interactive/2024/08/26/upshot/ai-synthetic-data.html" data-link-name="in body link">shown to amplify prejudice</a>.</p><p>A spokesperson for Plan International said the NGO had, as of this year: “adopted guidance advising against using AI to depict individual children”, and said the 2023 campaign had used AI-generated imagery to safeguard “the privacy and dignity of real girls”.</p><p>Adobe declined to comment.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AWS Outage: A Single Cloud Region Shouldn't Take Down the World. But It Did (293 pts)]]></title>
            <link>https://faun.dev/c/news/devopslinks/aws-outage-a-single-cloud-region-shouldnt-take-down-the-world-but-it-did/</link>
            <guid>45642951</guid>
            <pubDate>Mon, 20 Oct 2025 12:05:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://faun.dev/c/news/devopslinks/aws-outage-a-single-cloud-region-shouldnt-take-down-the-world-but-it-did/">https://faun.dev/c/news/devopslinks/aws-outage-a-single-cloud-region-shouldnt-take-down-the-world-but-it-did/</a>, See on <a href="https://news.ycombinator.com/item?id=45642951">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-block-type="markdown"><p>A significant outage of Amazon Web Services (AWS) disrupted numerous high-profile websites and services, including Amazon, Snapchat, Disney+, Reddit, and Canva. The outage was attributed to an "operational issue" affecting over 70 AWS services, causing widespread disruptions in cloud-based games and crypto exchanges like Coinbase. AWS reported signs of recovery shortly after the incident, but some services, such as Reddit, continued to experience issues.</p><p>The outage also impacted government websites like the UK's HMRC and various banking services, including Lloyds, Halifax, and the Bank of Scotland, leading to declined card transactions and inaccessible online banking. AWS identified the issue as related to DNS resolution in the US-EAST-1 region and worked on multiple paths to accelerate recovery. Despite significant recovery signs, some services faced delays due to a backlog of queued requests.</p><p>The incident highlighted the vulnerability of relying on a few major cloud service providers, as disruptions can have extensive ripple effects across numerous platforms.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Matrix Conference 2025 Highlights (117 pts)]]></title>
            <link>https://element.io/blog/the-matrix-conference-a-seminal-moment-for-matrix/</link>
            <guid>45642923</guid>
            <pubDate>Mon, 20 Oct 2025 12:00:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://element.io/blog/the-matrix-conference-a-seminal-moment-for-matrix/">https://element.io/blog/the-matrix-conference-a-seminal-moment-for-matrix/</a>, See on <a href="https://news.ycombinator.com/item?id=45642923">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a href="https://conference.matrix.org/?ref=element.io" rel="noreferrer">The Matrix Conference 2025</a> was a huge success; the energy and enthusiasm was just incredible!</p><p>We were delighted to be the anchor sponsor - thanks to The Matrix Foundation and everyone else that organised the conference, those who presented, the others sponsors and of course all those who attended!</p><p>The overriding vibe of the conference was one of incredible momentum - with so many governments presenting on their Matrix-based initiatives, there was a genuine realisation that Matrix is the future of government and inter-governmental communications.</p><h2 id="the-matrix-conference-on-demand">The Matrix Conference on-demand</h2><p>All the presentations given at The Matrix Conference are <a href="https://www.youtube.com/playlist?list=PLl5dnxRMP1hUgnYEbpEsEEhIqY_KlO3NG&amp;ref=element.io"><u>available here</u></a>. Each and every presentation is well worth watching.</p><h2 id="the-matrix-state-of-the-union">The Matrix State of the Union</h2><p>Matthew Hodgson gives an excellent overview of the entire Matrix universe. </p>
<!--kg-card-begin: html-->
<p>
<iframe src="https://www.youtube-nocookie.com/embed/2y8qtRLgalQ?si=V8Ie3LRn9Jaoi1Qf&amp;start=6" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p>
<!--kg-card-end: html-->
<p>For those interested in government and public sector adoption of Matrix, don’t miss Amandine Le Pape’s <a href="https://youtu.be/gHNSIiXyhdM?si=2zjD_dzpf7IzzlmD&amp;ref=element.io"><u>How Matrix is becoming the communication standard for the public sector</u></a>. </p><h2 id="elements-keynote">Element's keynote</h2><div><p>Neil Johnson’s talk includes a power-packed review of Element’s work over the last 12 months (and some sneak previews).</p><p>In particular, look out for </p><a href="https://element.io/server-suite/community?ref=element.io"><u>ESS Community</u></a><p> being installed in under a minute - and then, when the time is right, it being a seamless live-upgrade to </p><a href="https://element.io/server-suite/pro?ref=element.io"><u>ESS Pro</u></a><p>! The idea here is that ESS Community can be used, free of charge, for casual use (up to about 100 users) and also act as a way for organisations to run small scale evaluations. Those evaluations can then be easily upgraded to ESS Pro for increased scalability, performance, enterprise features and SLA-backed support.</p></div>
<!--kg-card-begin: html-->
<p>
<iframe src="https://www.youtube-nocookie.com/embed/TZgcdgv2NXk?si=DkpBp3qimfkXxlPt&amp;start=6" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p>
<!--kg-card-end: html-->
<h2 id="element-product-presentations">Element product presentations</h2><p><a href="https://youtu.be/BIYfFeFxcbc?si=qkzbcWNOU4n7EH_J&amp;ref=element.io"><u>ESS - Element’s distribution for Matrix deployments</u></a>, from Patrick Maier, gives more detail on Element Server Suite; covering ESS Community, ESS Pro and ESS for TI-Messenger. For those that want to get into the nitty-gritty, take a look at Gael Goinvic’s <a href="https://youtu.be/tApx4md-Cpk?si=7Bn43betJBBhAM_i&amp;ref=element.io"><u>Getting Started with ESS Community</u></a> workshop.&nbsp;</p><p><a href="https://element.io/pro-app?ref=element.io"><u>Element Pro</u></a>, our new app developed specifically for the workplace, created a huge buzz - particularly in-app colour theming, and the ability to now create a whitelabelled mobile app without the expense of maintaining a fork. Catch all the details from Andreas Sisask in his session; <a href="https://youtu.be/_cahXxr8d-4?si=xOFeWzlB-DQEmoTU&amp;ref=element.io"><u>Element X and Pro</u></a>. We’d also recommend the <a href="https://youtu.be/z0ULOptq2vk?si=gu-P0NikoKBmC4Br&amp;ref=element.io"><u>Element X Web</u></a> presentation and the session on <a href="https://youtu.be/Gjwz_7G1zdY?si=ndLrLKNIq_HVae5T&amp;ref=element.io"><u>Element Call</u></a>.</p><h2 id="the-real-stars-of-the-show">The real stars of the show!<br></h2><p>The best proof points, of course, are the deployments and initiatives that are already underway. The conference was packed with presentations from governments and public sector organisations, who are the real stars of the show!&nbsp;</p><p>Do take a look at the outstanding work being done across governments, NGOs and public sector organisations. </p>
<!--kg-card-begin: html-->


<div>
  <a href="https://www.youtube.com/watch?v=PqrQ1-dMrSA&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/PqrQ1-dMrSA/hqdefault.jpg" alt="">
    <p>Trialing Matrix within the European Commission for resilient and sovereign communications</p>
    <p>Nicolas Dubois, European Commission</p>
  </a>

  <a href="https://www.youtube.com/watch?v=4PoUmWadaQ0&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/4PoUmWadaQ0/hqdefault.jpg" alt="">
    <p>Matrix French gov deployment: opening a private federation securely</p>
    <p>Mathieu Velten, DINUM</p>
  </a>

  <a href="https://www.youtube.com/watch?v=S4iQBWnuSRM&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/S4iQBWnuSRM/hqdefault.jpg" alt="">
    <p>Consolidating Germany’s administrative communication: Towards a joint Matrix-based architecture</p>
    <p>Dominik Braun, FITKO</p>
  </a>

  <a href="https://youtu.be/dQeZLT0Rai8?ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/dQeZLT0Rai8/hqdefault.jpg" alt="">
    <p>Sweden’s Public Sector in Transition</p>
    <p>Anna Engström &amp; Kenneth Edwall, Försäkringskassan</p>
  </a>

  <a href="https://www.youtube.com/watch?v=xeRXFf4GDmw&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/xeRXFf4GDmw/hqdefault.jpg" alt="">
    <p>Luxchat(4gov)</p>
    <p>Patrick Weber, Luxembourg government</p>
  </a>

  <a href="https://youtu.be/2stYnXGUm0g?ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/2stYnXGUm0g/hqdefault.jpg" alt="">
    <p>Medical Care over Matrix with Delay during a Simulated Moonwalk</p>
    <p>Jan-Lukas Furmanek &amp; Aileen Rabsahl</p>
  </a>

  <a href="https://youtu.be/B9ghNwNjtFA?ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/B9ghNwNjtFA/hqdefault.jpg" alt="">
    <p>Matrix’s role in the German Healthcare System</p>
    <p>Marie Ruddeck, Gematik</p>
  </a>

  <a href="https://www.youtube.com/watch?v=HHxvYgei2_U&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/HHxvYgei2_U/hqdefault.jpg" alt="">
    <p>Nationwide Rollout of Matrix-Based Instant Messaging (TI-M) for 74 Million Statutorily Insured Citizens</p>
    <p>Jan Kohnert, Gematik</p>
  </a>

  <a href="https://www.youtube.com/watch?v=7LMxzIlpOuA&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/7LMxzIlpOuA/hqdefault.jpg" alt="">
    <p>Secure communication leveraging the Matrix protocol for UNICC and its partners</p>
    <p>Tima Soni, UNICC</p>
  </a>

  <a href="https://www.youtube.com/watch?v=Q0BBLeoRw9A&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/Q0BBLeoRw9A/hqdefault.jpg" alt="">
    <p>Supporting TF-X with Matrix: best practices and pitfalls</p>
    <p>Jeroen Franssen, NATO ACT</p>
  </a>

  <a href="https://www.youtube.com/watch?v=zY8qPe6aoxY&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/zY8qPe6aoxY/hqdefault.jpg" alt="">
    <p>The German BundesMessenger</p>
    <p>Kai A. Hiller, BWI</p>
  </a>

  <a href="https://www.youtube.com/watch?v=m3c2tPxFqXE&amp;ref=element.io" target="_blank">
    <img src="https://img.youtube.com/vi/m3c2tPxFqXE/hqdefault.jpg" alt="">
    <p>No Desk Is an Island: Enabling Cross-Border Workspace Communication</p>
    <p>Alexander Smolianitski, ZenDiS</p>
  </a>
</div>

<!--kg-card-end: html-->
<p>An open standard based on open source software, Matrix delivers the digital sovereignty, interoperability, resilience and security that governments need to transform the way they communicate; both within their own nation and across borders. These are the key benefits driving Matrix adoption.</p><p>The discussion between sessions, and in the evenings, had a consistent theme. Governments want communications that are:</p><p>1. <strong>Digitally sovereign</strong> - meaning end-user organisations have complete autonomy over their technology stack. Crucially, that means no vendor lock-in. That so many competing vendors sponsored and attended The Matrix Conference underlines the health of the Matrix ecosystem.</p><p>2. <strong>Interoperable</strong> - to both enable digital sovereignty and ensure that separate organisations can easily communicate with each other. The interoperability delivered by the Matrix open standard is absolutely crucial in enabling large-scale federated communications between multiple organisations.</p><p>3. <strong>Resilient</strong> - a decentralised communications network provides a far more robust communications architecture than a centralised network, which is paramount for government communications (as we write this blog post, Signal, Slack, Zoom and others are down due to their centralised design and a dependency on AWS).</p><p>4. <strong>Secure</strong> - end-to-end encryption is, of course, fundamental and viewed as ‘table stakes.’</p><p>European governments are rightly determined to control their own digital destiny, and are embracing Matrix as the foundation for real time communications. </p><p>Seeing the European Commission, France, FITKO, Germany, the German healthcare system, Luxembourg, NATO, Sweden, United Nations, ZenDiS and the European Space Agency all presenting on their Matrix deployments was just mindblowing! </p><p>Knowing how many other governments were also in attendance, soaking up insights and tips for their forthcoming Matrix projects, makes us really excited for a Matrix-based future that transforms cross-border collaboration and helps support a united, digitally sovereign Europe.</p><p>👋 See you all next year!</p><figure><img src="https://element.io/blog/content/images/2025/10/1760698709884-1.jpeg" alt="Element's keynote at The Matrix Conference 2025" loading="lazy" width="2000" height="1334" srcset="https://element.io/blog/content/images/size/w600/2025/10/1760698709884-1.jpeg 600w, https://element.io/blog/content/images/size/w1000/2025/10/1760698709884-1.jpeg 1000w, https://element.io/blog/content/images/size/w1600/2025/10/1760698709884-1.jpeg 1600w, https://element.io/blog/content/images/2025/10/1760698709884-1.jpeg 2048w" sizes="(min-width: 720px) 720px"><figcaption><span>Element's keynote at The Matrix Conference 2025</span></figcaption></figure></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beaver-engineered dam in the Czech Republic (107 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/Beaver-engineered_dam_in_the_Czech_Republic</link>
            <guid>45642562</guid>
            <pubDate>Mon, 20 Oct 2025 11:08:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/Beaver-engineered_dam_in_the_Czech_Republic">https://en.wikipedia.org/wiki/Beaver-engineered_dam_in_the_Czech_Republic</a>, See on <a href="https://news.ycombinator.com/item?id=45642562">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

						<p>From Wikipedia, the free encyclopedia</p>
					</div><div lang="en" dir="ltr" id="mw-content-text">
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Tayside_Beaver_mother_and_kit_June_5,_2010_Ray_Scott.jpg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Tayside_Beaver_mother_and_kit_June_5%2C_2010_Ray_Scott.jpg/250px-Tayside_Beaver_mother_and_kit_June_5%2C_2010_Ray_Scott.jpg" decoding="async" width="250" height="189" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Tayside_Beaver_mother_and_kit_June_5%2C_2010_Ray_Scott.jpg/500px-Tayside_Beaver_mother_and_kit_June_5%2C_2010_Ray_Scott.jpg 1.5x" data-file-width="678" data-file-height="512"></a><figcaption>A Eurasian beaver with her kit along the <a href="https://en.wikipedia.org/wiki/River_Tay" title="River Tay">River Tay</a></figcaption></figure>
<p>In early 2025, <a href="https://en.wikipedia.org/wiki/Eurasian_beaver" title="Eurasian beaver">beaver</a> activity in the <a href="https://en.wikipedia.org/wiki/Brdy" title="Brdy">Brdy</a> Protected Landscape Area, <a href="https://en.wikipedia.org/wiki/Czech_Republic" title="Czech Republic">Czech Republic</a>, contributed to the restoration of a <a href="https://en.wikipedia.org/wiki/Wetland" title="Wetland">wetland</a> ecosystem. A family of beavers constructed a series of dams that accomplished environmental goals set by the Czech government, which had delayed its proposed project since 2018 for bureaucratic and financial reasons. The <a href="https://en.wikipedia.org/wiki/Beaver_dam" title="Beaver dam">beaver-built dams</a> saved the Czech government approximately US$1.2 million, providing <a href="https://en.wikipedia.org/wiki/Ecology" title="Ecology">ecological</a> benefits including improved water quality, enhanced <a href="https://en.wikipedia.org/wiki/Biodiversity" title="Biodiversity">biodiversity</a>, and better water retention.<sup id="cite_ref-:0_1-0"><a href="#cite_note-:0-1"><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-:1_2-0"><a href="#cite_note-:1-2"><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-3"><a href="#cite_note-3"><span>[</span>3<span>]</span></a></sup>
</p>
<meta property="mw:PageProp/toc">

<p>The Brdy region, located south of <a href="https://en.wikipedia.org/wiki/Prague" title="Prague">Prague</a>, had been affected by <a href="https://en.wikipedia.org/wiki/Artificial_drainage" title="Artificial drainage">artificial drainage</a> systems established by the <a href="https://en.wikipedia.org/w/index.php?title=Brdy_Military_District&amp;action=edit&amp;redlink=1" title="Brdy Military District (page does not exist)">Brdy Military District</a><span>&nbsp;[<a href="https://cs.wikipedia.org/wiki/Vojensk%C3%BD_%C3%BAjezd_Brdy" title="cs:Vojenský újezd Brdy">cs</a>]</span>, leading to <a href="https://en.wikipedia.org/wiki/Environmental_degradation" title="Environmental degradation">environmental degradation</a>. Decades earlier, soldiers had excavated bypass <a href="https://en.wikipedia.org/wiki/Gully" title="Gully">gullies</a> to drain water from the land, transforming the wetland into a <a href="https://en.wikipedia.org/wiki/Drylands" title="Drylands">dry terrain</a>.<sup id="cite_ref-:0_1-1"><a href="#cite_note-:0-1"><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-:1_2-1"><a href="#cite_note-:1-2"><span>[</span>2<span>]</span></a></sup> In 2016, the <a href="https://en.wikipedia.org/w/index.php?title=Brdy_Protected_Landscape_Area&amp;action=edit&amp;redlink=1" title="Brdy Protected Landscape Area (page does not exist)">Brdy Protected Landscape Area</a><span>&nbsp;[<a href="https://cs.wikipedia.org/wiki/Chr%C3%A1n%C4%9Bn%C3%A1_krajinn%C3%A1_oblast_Brdy" title="cs:Chráněná krajinná oblast Brdy">cs</a>]</span> was established in place of the abolished military district and some surrounding areas.<sup id="cite_ref-4"><a href="#cite_note-4"><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-5"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup> Recognizing the ecological damage, the administration of the Brdy protected landscape area drafted plans in 2018 to construct small dams to restore the wetland and protect the <a href="https://en.wikipedia.org/wiki/Klabava_(river)" title="Klabava (river)">Klabava river</a> from <a href="https://en.wikipedia.org/wiki/Sedimentation" title="Sedimentation">sedimentation</a> and acidic water pollution originating from nearby ponds.<sup id="cite_ref-:3_6-0"><a href="#cite_note-:3-6"><span>[</span>6<span>]</span></a></sup> However, bureaucratic obstacles, unresolved land ownership disputes, and financial constraints led to significant delays in implementing the project.<sup id="cite_ref-:2_7-0"><a href="#cite_note-:2-7"><span>[</span>7<span>]</span></a></sup>
</p>
<div><h2 id="Beaver_construction">Beaver construction</h2><p><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Beaver-engineered_dam_in_the_Czech_Republic&amp;action=edit&amp;section=2" title="Edit section: Beaver construction"><span>edit</span></a><span>]</span></span></p></div>
<table><tbody><tr><th colspan="2">External image</th></tr><tr><td colspan="2"><span typeof="mw:File"><span><img alt="image icon" src="https://upload.wikimedia.org/wikipedia/en/thumb/6/61/Searchtool.svg/20px-Searchtool.svg.png" decoding="async" width="16" height="16" srcset="https://upload.wikimedia.org/wikipedia/en/thumb/6/61/Searchtool.svg/40px-Searchtool.svg.png 1.5x" data-file-width="512" data-file-height="512"></span></span> <a rel="nofollow" href="https://english.radio.cz/sites/default/files/styles/rcz_lightbox_v2/public/images/892a696677ea568f98a3fad53e4bb3ad.jpg?itok=QZ5VagkW&amp;timestamp=1740061110">Image of the natural dam created by beavers in Brdy</a> photographed for the Nature Conservation Agency of the Czech Republic</td></tr></tbody></table>
<p>In early 2025, a family of <a href="https://en.wikipedia.org/wiki/Eurasian_beaver" title="Eurasian beaver">Eurasian beavers</a> (<i>Castor fiber</i>) naturally built a series of dams in the same locations where the human-planned infrastructure was intended.<sup id="cite_ref-8"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup> The beavers used wood, mud, and stones to create structures that slowed water drainage and restored the wetland environment. This spontaneous restoration effort resulted in a thriving ecosystem, benefiting local wildlife such as rare stone crayfish, frogs, aquatic insects, and bird species dependent on wetland habitats.<sup id="cite_ref-:3_6-1"><a href="#cite_note-:3-6"><span>[</span>6<span>]</span></a></sup>
</p><p>In 2013 a family of beavers also slowed the time it takes for water upstream to travel to <a href="https://en.wikipedia.org/wiki/Winzer" title="Winzer">Winzer</a>, Germany from around 45 minutes to 20 days, according to Gerhard Shwab, a local beaver specialist,<sup id="cite_ref-9"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup> which was estimated to have saved the local government €<span><span data-sort-value="7004300000000000000♠"></span>30<span>000</span></span>. 
</p><p>Experts noted that beavers are instinctive engineers capable of altering landscapes to support water retention and biodiversity. Their activities help regulate water flow, mitigate soil erosion, and improve water filtration, making them vital contributors to wetland health. The beaver-made dams in Brdy not only recreated a functioning wetland but also provided long-term benefits by reducing <a href="https://en.wikipedia.org/wiki/Flood_risk" title="Flood risk">flood risks</a>, preventing drought effects, and maintaining a balanced ecosystem.<sup id="cite_ref-:0_1-2"><a href="#cite_note-:0-1"><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-10"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup> 
</p>
<div><h2 id="Reaction_and_recognition">Reaction and recognition</h2><p><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Beaver-engineered_dam_in_the_Czech_Republic&amp;action=edit&amp;section=3" title="Edit section: Reaction and recognition"><span>edit</span></a><span>]</span></span></p></div>
<p>Czech conservation authorities praised the beavers for their unexpected yet effective environmental work. Bohumil Fišer, head of the Brdy Protected Landscape Area, stated that the beavers "built the dams without any project documentation and for free", and achieved the desired ecological outcomes "practically overnight".<sup id="cite_ref-:1_2-2"><a href="#cite_note-:1-2"><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-:3_6-2"><a href="#cite_note-:3-6"><span>[</span>6<span>]</span></a></sup> The estimated cost savings for the Czech government amounted to 30 million <a href="https://en.wikipedia.org/wiki/Czech_koruna" title="Czech koruna">Czech koruna</a> (<a href="https://en.wikipedia.org/wiki/United_States_dollar" title="United States dollar">US$</a>1.2 million), as the project was completed without human labor or funding.<sup id="cite_ref-11"><a href="#cite_note-11"><span>[</span>11<span>]</span></a></sup>
</p><p>Zoologists and environmentalists emphasized the broader significance of the event, reinforcing the role of beavers as "ecosystem engineers".<sup id="cite_ref-12"><a href="#cite_note-12"><span>[</span>12<span>]</span></a></sup> This case contributed to growing discussions in Europe about the benefits of beaver <a href="https://en.wikipedia.org/wiki/Rewilding" title="Rewilding">rewilding</a> programs, particularly in regions where their activity supports <a href="https://en.wikipedia.org/wiki/Flood_management" title="Flood management">flood management</a>, water conservation, and habitat restoration.<sup id="cite_ref-:0_1-3"><a href="#cite_note-:0-1"><span>[</span>1<span>]</span></a></sup>
</p><p>The Brdy beaver colony is part of a larger resurgence of Eurasian beaver populations in the Czech Republic, with estimates indicating around 15,000 individuals across the country.<sup id="cite_ref-:2_7-1"><a href="#cite_note-:2-7"><span>[</span>7<span>]</span></a></sup> While beavers can sometimes create conflicts by felling trees or flooding agricultural lands, officials noted that the Brdy site is located far from farmland, making long-term coexistence with the beavers feasible.<sup id="cite_ref-13"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup> Authorities anticipate no significant conflicts with the beaver colony for at least the next decade.<sup id="cite_ref-14"><a href="#cite_note-14"><span>[</span>14<span>]</span></a></sup>
</p>

<div><ol>
<li id="cite_note-:0-1"><span>^ <a href="#cite_ref-:0_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-:0_1-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-:0_1-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-:0_1-3"><sup><i><b>d</b></i></sup></a></span> <span><cite id="CITEREFAndrei2025">Andrei, Mihai (2025-02-12). <a rel="nofollow" href="https://www.zmescience.com/science/news-science/beavers-in-the-czech-republic-built-dams-that-saved-authorities-1-25-million/">"Beavers Built a $1.2M Dam for Free — And Saved a Czech River"</a>. ZME Science<span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Beavers+Built+a+%241.2M+Dam+for+Free+%E2%80%94+And+Saved+a+Czech+River&amp;rft.pub=ZME+Science&amp;rft.date=2025-02-12&amp;rft.aulast=Andrei&amp;rft.aufirst=Mihai&amp;rft_id=https%3A%2F%2Fwww.zmescience.com%2Fscience%2Fnews-science%2Fbeavers-in-the-czech-republic-built-dams-that-saved-authorities-1-25-million%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-:1-2"><span>^ <a href="#cite_ref-:1_2-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-:1_2-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-:1_2-2"><sup><i><b>c</b></i></sup></a></span> <span><cite id="CITEREFAlbeck-Ripka2025">Albeck-Ripka, Livia (2025-02-12). <a rel="nofollow" href="https://www.nytimes.com/2025/02/12/world/europe/beavers-prague-czech-republic-dam.html">"Czech Dam Project Was Stalled by Bureaucracy. Beavers Built Their Own"</a>. <i>The New York Times</i>. <a href="https://en.wikipedia.org/wiki/ISSN_(identifier)" title="ISSN (identifier)">ISSN</a>&nbsp;<a rel="nofollow" href="https://search.worldcat.org/issn/0362-4331">0362-4331</a><span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=Czech+Dam+Project+Was+Stalled+by+Bureaucracy.+Beavers+Built+Their+Own.&amp;rft.date=2025-02-12&amp;rft.issn=0362-4331&amp;rft.aulast=Albeck-Ripka&amp;rft.aufirst=Livia&amp;rft_id=https%3A%2F%2Fwww.nytimes.com%2F2025%2F02%2F12%2Fworld%2Feurope%2Fbeavers-prague-czech-republic-dam.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-3"><span><b><a href="#cite_ref-3">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.nationalgeographic.com/animals/article/beaver-dam-czech-republic">"These eager beavers saved the Czech government $1.2 million"</a>. <i>National Geographic</i>. 2025-03-02<span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=National+Geographic&amp;rft.atitle=These+eager+beavers+saved+the+Czech+government+%241.2+million&amp;rft.date=2025-03-02&amp;rft_id=https%3A%2F%2Fwww.nationalgeographic.com%2Fanimals%2Farticle%2Fbeaver-dam-czech-republic&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-4"><span><b><a href="#cite_ref-4">^</a></b></span> <span><a rel="nofollow" href="https://www.idnes.cz/praha/zpravy/chranena-oblast-v-brdech-bude-vetsi-nez-vojenska-obcim-vzniknou-potize.A110919_1653884_praha-zpravy_kol">Chráněná oblast v Brdech bude větší než vojenská, obce čekají potíže</a></span>
</li>
<li id="cite_note-5"><span><b><a href="#cite_ref-5">^</a></b></span> <span><a rel="nofollow" href="https://web.archive.org/web/20160304221458/http://brdy.ochranaprirody.cz/vyhlaseni-chranene-krajinne-oblast-brdy/">"Vyhlášení Chráněné krajinné oblasti Brdy"</a> ("Declaration of the Brdy Protected Landscape Area")</span>
</li>
<li id="cite_note-:3-6"><span>^ <a href="#cite_ref-:3_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-:3_6-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-:3_6-2"><sup><i><b>c</b></i></sup></a></span> <span><cite><a rel="nofollow" href="https://english.radio.cz/beavers-build-planned-dams-protected-landscape-area-while-local-officials-still-8841536">"Beavers build planned dams in protected landscape area, while local officials still seeking permits"</a>. <a href="https://en.wikipedia.org/wiki/Czech_Radio" title="Czech Radio">Czech Radio</a>. 2025-01-31<span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Beavers+build+planned+dams+in+protected+landscape+area%2C+while+local+officials+still+seeking+permits&amp;rft.pub=Czech+Radio&amp;rft.date=2025-01-31&amp;rft_id=https%3A%2F%2Fenglish.radio.cz%2Fbeavers-build-planned-dams-protected-landscape-area-while-local-officials-still-8841536&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-:2-7"><span>^ <a href="#cite_ref-:2_7-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-:2_7-1"><sup><i><b>b</b></i></sup></a></span> <span><cite><a rel="nofollow" href="https://www.jpost.com/omg/viral-news-from-the-web/article-841454">"Beavers save Czech government €1.2 million by building planned dam"</a>. <i>The Jerusalem Post</i>. 2025-02-10<span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+Jerusalem+Post&amp;rft.atitle=Beavers+save+Czech+government+%E2%82%AC1.2+million+by+building+planned+dam&amp;rft.date=2025-02-10&amp;rft_id=https%3A%2F%2Fwww.jpost.com%2Fomg%2Fviral-news-from-the-web%2Farticle-841454&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-8"><span><b><a href="#cite_ref-8">^</a></b></span> <span><cite id="CITEREFTravers">Travers, Scott. <a rel="nofollow" href="https://www.forbes.com/sites/scotttravers/2025/02/27/3-surprising-stories-that-prove-beavers-are-natures-most-diligent-water-engineers/">"3 Surprising Stories That Prove Beavers Are Nature's Most Diligent Water Engineers"</a>. <i>Forbes</i><span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Forbes&amp;rft.atitle=3+Surprising+Stories+That+Prove+Beavers+Are+Nature%27s+Most+Diligent+Water+Engineers&amp;rft.aulast=Travers&amp;rft.aufirst=Scott&amp;rft_id=https%3A%2F%2Fwww.forbes.com%2Fsites%2Fscotttravers%2F2025%2F02%2F27%2F3-surprising-stories-that-prove-beavers-are-natures-most-diligent-water-engineers%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-9"><span><b><a href="#cite_ref-9">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.euronews.com/green/2025/03/01/czechias-1m-dam-built-for-free-by-beavers-heres-where-else-theyre-doing-good-work">"Czechia's €1m dam built for free by beavers: Here's where else they're doing good work"</a>. <i>euronews.com</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=euronews.com&amp;rft.atitle=Czechia%27s+%E2%82%AC1m+dam+built+for+free+by+beavers%3A+Here%27s+where+else+they%27re+doing+good+work&amp;rft_id=https%3A%2F%2Fwww.euronews.com%2Fgreen%2F2025%2F03%2F01%2Fczechias-1m-dam-built-for-free-by-beavers-heres-where-else-theyre-doing-good-work&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-10"><span><b><a href="#cite_ref-10">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.huffpost.com/entry/beavers-dam-project-czech-republic_n_67a63a7be4b0d9a21f36c768">"Pricey Dam Project 7 Years In The Making Finished By Beavers For Free"</a>. <i>HuffPost</i>. 2025-02-08<span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=HuffPost&amp;rft.atitle=Pricey+Dam+Project+7+Years+In+The+Making+Finished+By+Beavers+For+Free&amp;rft.date=2025-02-08&amp;rft_id=https%3A%2F%2Fwww.huffpost.com%2Fentry%2Fbeavers-dam-project-czech-republic_n_67a63a7be4b0d9a21f36c768&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-11"><span><b><a href="#cite_ref-11">^</a></b></span> <span><cite id="CITEREFMessenger2025">Messenger, Stephen (2025-02-07). <a rel="nofollow" href="https://www.thedodo.com/daily-dodo/government-scraps-construction-project-after-beavers-finish-the-job-themselves">"Government Scraps Construction Project After Beavers Finish the Job Themselves"</a>. <i>The Dodo</i><span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+Dodo&amp;rft.atitle=Government+Scraps+Construction+Project+After+Beavers+Finish+the+Job+Themselves&amp;rft.date=2025-02-07&amp;rft.aulast=Messenger&amp;rft.aufirst=Stephen&amp;rft_id=https%3A%2F%2Fwww.thedodo.com%2Fdaily-dodo%2Fgovernment-scraps-construction-project-after-beavers-finish-the-job-themselves&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-12"><span><b><a href="#cite_ref-12">^</a></b></span> <span><cite id="CITEREFBarber2025">Barber, Harriet (2025-02-09). <a rel="nofollow" href="https://www.telegraph.co.uk/world-news/2025/02/09/beavers-complete-stalled-dam-save-czech-government-money/">"Beavers finish seven-year dam project in two days"</a>. <i>The Telegraph</i>. <a href="https://en.wikipedia.org/wiki/ISSN_(identifier)" title="ISSN (identifier)">ISSN</a>&nbsp;<a rel="nofollow" href="https://search.worldcat.org/issn/0307-1235">0307-1235</a><span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Telegraph&amp;rft.atitle=Beavers+finish+seven-year+dam+project+in+two+days&amp;rft.date=2025-02-09&amp;rft.issn=0307-1235&amp;rft.aulast=Barber&amp;rft.aufirst=Harriet&amp;rft_id=https%3A%2F%2Fwww.telegraph.co.uk%2Fworld-news%2F2025%2F02%2F09%2Fbeavers-complete-stalled-dam-save-czech-government-money%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-13"><span><b><a href="#cite_ref-13">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.france24.com/en/live-news/20250211-dam-fine-beavers-save-czech-treasury-1-million">"Dam fine: beavers save Czech treasury $1 million"</a>. <i>France 24</i>. 2025-02-11<span>. Retrieved <span>2025-03-06</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=France+24&amp;rft.atitle=Dam+fine%3A+beavers+save+Czech+treasury+%241+million&amp;rft.date=2025-02-11&amp;rft_id=https%3A%2F%2Fwww.france24.com%2Fen%2Flive-news%2F20250211-dam-fine-beavers-save-czech-treasury-1-million&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
<li id="cite_note-14"><span><b><a href="#cite_ref-14">^</a></b></span> <span><cite id="CITEREFFrance-Press2025">France-Press, Agence (2025-02-11). <a rel="nofollow" href="https://www.theguardian.com/world/2025/feb/11/beavers-save-czech-taxpayers-by-flooding-ex-army-training-site">"Eager beavers: rodents engineer Czech wetland project after years of human delay"</a>. <i>The Guardian</i>. <a href="https://en.wikipedia.org/wiki/ISSN_(identifier)" title="ISSN (identifier)">ISSN</a>&nbsp;<a rel="nofollow" href="https://search.worldcat.org/issn/0261-3077">0261-3077</a><span>. Retrieved <span>2025-03-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Guardian&amp;rft.atitle=Eager+beavers%3A+rodents+engineer+Czech+wetland+project+after+years+of+human+delay&amp;rft.date=2025-02-11&amp;rft.issn=0261-3077&amp;rft.aulast=France-Press&amp;rft.aufirst=Agence&amp;rft_id=https%3A%2F%2Fwww.theguardian.com%2Fworld%2F2025%2Ffeb%2F11%2Fbeavers-save-czech-taxpayers-by-flooding-ex-army-training-site&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABeaver-engineered+dam+in+the+Czech+Republic"></span></span>
</li>
</ol></div>
<!-- 
NewPP limit report
Parsed by mw‐api‐ext.eqiad.main‐7685855cb9‐s2nwh
Cached time: 20251020141533
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.344 seconds
Real time usage: 0.426 seconds
Preprocessor visited node count: 1727/1000000
Revision size: 9053/2097152 bytes
Post‐expand include size: 27006/2097152 bytes
Template argument size: 2060/2097152 bytes
Highest expansion depth: 9/100
Expensive parser function count: 3/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 47462/5000000 bytes
Lua time usage: 0.208/10.000 seconds
Lua memory usage: 6875189/52428800 bytes
Number of Wikibase entities loaded: 0/500
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  387.203      1 -total
 45.62%  176.627      1 Template:Reflist
 34.81%  134.796      9 Template:Cite_web
 25.30%   97.949      1 Template:Short_description
 13.97%   54.080      2 Template:Pagetype
 10.72%   41.526      1 Template:External_media
  9.20%   35.628      1 Template:Infobox
  8.41%   32.578      1 Template:Val
  6.76%   26.169      2 Template:Ill
  5.93%   22.978      7 Template:Main_other
-->

<!-- Saved in parser cache with key enwiki:pcache:79362707:|#|:idhash:canonical and timestamp 20251020141533 and revision id 1317867240. Rendering was triggered because: api-parse
 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Major AWS outage takes down Fortnite, Alexa, Snapchat, and more (206 pts)]]></title>
            <link>https://www.theverge.com/news/802486/aws-outage-alexa-fortnite-snapchat-offline</link>
            <guid>45641143</guid>
            <pubDate>Mon, 20 Oct 2025 08:12:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/news/802486/aws-outage-alexa-fortnite-snapchat-offline">https://www.theverge.com/news/802486/aws-outage-alexa-fortnite-snapchat-offline</a>, See on <a href="https://news.ycombinator.com/item?id=45641143">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="zephr-anchor"><p>Amazon Web Services (AWS) is currently experiencing a major outage that has taken down online services, including Amazon, Alexa, Snapchat, <em>Fortnite</em>, <a href="https://status.openai.com/incidents/01K80CBJD5Z64DF82KGT3K3QE0">ChatGPT</a>, <a href="https://x.com/EOSStatus/status/1980194104115150858">Epic Games Store, Epic Online Services</a>, and more. The <a href="https://health.aws.amazon.com/health/status">AWS status checker</a> is reporting that multiple services in the US-EAST-1 Region are “impacted” by operational issues, though outages also affected services in other regions globally.</p><p>As of 6:35AM ET, Amazon says that “most AWS Service operations are succeeding normally now” and that it is working towards a full resolution.</p><p>The AWS dashboard first reported issues affecting the US-EAST-1 Region at 3:11AM ET. “We are actively engaged and working to both mitigate the issue and understand root cause. We will provide an update in 45 minutes, or sooner if we have additional information to share,” Amazon said in an update published at 3:51AM ET.</p><p><a href="https://www.reddit.com/r/alexa/comments/1obdalz/anybody_else_having_their_alexa_say_sorry_the/?share_id=fJoQ-Ru02X3moE99D2HkA&amp;utm_content=1&amp;utm_medium=android_app&amp;utm_name=androidcss&amp;utm_source=share&amp;utm_term=1">Users on Reddit</a> reported that the Alexa smart assistant was down and unable to respond to queries or complete requests, and in my own experience, I found that routines like pre-set alarms are not functioning. The AWS issue also appeared to be impacting platforms running on its cloud network, including Perplexity, Airtable, Canva, and the McDonalds app. The cause of the outage hasn’t been confirmed, and it’s unclear when regular service will be full restored.</p><p>“Perplexity is down right now,” Perplexity CEO <a href="https://x.com/aravsrinivas/status/1980172632600506579?s=46">Aravind Srinivas said on X</a>. “The root cause is an AWS issue. We’re working on resolving it.”</p><p>In a 5:27AM ET update, Amazon says “We are seeing significant signs of recovery. Most requests should now be succeeding. We continue to work through a backlog of queued requests.”</p><p>AWS outages in the US-East-1 region have created widespread disruptions in <a href="https://www.theverge.com/2023/6/13/23759857/amazon-aws-down-outage-taco-bell-mcdonalds-burger-king">2023</a>, <a href="https://www.theverge.com/2021/12/11/22829544/amazon-web-services-overwhelmed-network-outage">2021</a>, and <a href="https://www.theverge.com/2020/11/25/21719396/amazon-web-services-aws-outage-down-internet">2020</a>, forcing multiple websites and platforms offline for several hours before regular service was restored.</p><p><em><strong>Update, October 20th:</strong> added status updates from Amazon.</em></p><div><p><span><strong>Follow topics and authors</strong> from this story to see more like this in your personalized homepage feed and to receive email updates.</span></p><ul><li id="follow-author-article_footer-dmcyOmF1dGhvclByb2ZpbGU6OTU="><span aria-expanded="false" aria-haspopup="true" role="button" tabindex="0"><span><span><svg width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg" aria-label="Follow"><path d="M5 0H4V4H0V5H4V9H5V5H9V4H5V0Z"></path></svg></span><span>Jess Weatherbed</span></span></span></li><li></li><li></li><li></li></ul></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Docker Systems Status: Full Service Disruption (291 pts)]]></title>
            <link>https://www.dockerstatus.com/pages/incident/533c6539221ae15e3f000031/68f5e1c741c825463df7486c</link>
            <guid>45640877</guid>
            <pubDate>Mon, 20 Oct 2025 07:31:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dockerstatus.com/pages/incident/533c6539221ae15e3f000031/68f5e1c741c825463df7486c">https://www.dockerstatus.com/pages/incident/533c6539221ae15e3f000031/68f5e1c741c825463df7486c</a>, See on <a href="https://news.ycombinator.com/item?id=45640877">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><h5>Issues accessing Registry, Hub, Scout, DBC, DHI<span>Full Service Disruption</span></h5></p></div><div><div><p>Components  </p><p>Docker Hub Registry, Docker Authentication, Docker Hub Web Services, Docker Billing, Docker Hub Automated Builds, Docker Hub Security Scanning, Docker Scout, Docker Build Cloud, Testcontainers Cloud, Docker Cloud, Docker Hardened Images</p></div><div><p>Locations  </p><p>Docker Web Services</p></div><br><div><p><strong>October 20, 2025 01:22 PDT<br>October 20, 2025 08:22 UTC</strong></p><p><strong>[Identified] </strong><span id="statusio_incident_message_68f5f13c1dee3648df635c5e">We have identified the underlying issue with one of our cloud service providers. We are monitoring the situation and prepare our systems for when the issues with our service provider resolve. </span></p></div><br><div><p><strong>October 20, 2025 00:16 PDT<br>October 20, 2025 07:16 UTC</strong></p><p><strong>[Investigating] </strong><span id="statusio_incident_message_68f5e1c741c825463df7487e">We are seeing issues accessing and using our services across many of our products. We are currently investigating and will report back as soon as possible..

</span></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AWS Multiple Services Down in us-east-1 (1082 pts)]]></title>
            <link>https://health.aws.amazon.com/health/status?ts=20251020</link>
            <guid>45640838</guid>
            <pubDate>Mon, 20 Oct 2025 07:22:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://health.aws.amazon.com/health/status?ts=20251020">https://health.aws.amazon.com/health/status?ts=20251020</a>, See on <a href="https://news.ycombinator.com/item?id=45640838">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Major AWS Outage Happening (1059 pts)]]></title>
            <link>https://old.reddit.com/r/aws/comments/1obd3lx/dynamodb_down_useast1/</link>
            <guid>45640772</guid>
            <pubDate>Mon, 20 Oct 2025 07:11:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/aws/comments/1obd3lx/dynamodb_down_useast1/">https://old.reddit.com/r/aws/comments/1obd3lx/dynamodb_down_useast1/</a>, See on <a href="https://news.ycombinator.com/item?id=45640772">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>[–]<a href="https://old.reddit.com/user/Wilbo007">Wilbo007</a><span></span> <span title="1">1 point</span><span title="2">2 points</span><span title="3">3 points</span> <time title="Mon Oct 20 07:25:39 2025 UTC" datetime="2025-10-20T07:25:39+00:00">1 hour ago</time>&nbsp;(1 child)</p><form action="#" onsubmit="return post_form(this, 'editusertext')" id="form-t1_nkg0bp67ew"><div><p>Yeah looks like its DNS. The domain exists but there's no A or AAAA records for it right now</p>

<pre><code>nslookup -debug dynamodb.us-east-1.amazonaws.com 1.1.1.1
------------
Got answer:
    HEADER:
        opcode = QUERY, id = 1, rcode = NOERROR
        header flags:  response, want recursion, recursion avail.
        questions = 1,  answers = 1,  authority records = 0,  additional = 0

    QUESTIONS:
        1.1.1.1.in-addr.arpa, type = PTR, class = IN
    ANSWERS:
    -&gt;  1.1.1.1.in-addr.arpa
        name = one.one.one.one
        ttl = 1704 (28 mins 24 secs)

------------
Server:  one.one.one.one
Address:  1.1.1.1

------------
Got answer:
    HEADER:
        opcode = QUERY, id = 2, rcode = NOERROR
        header flags:  response, want recursion, recursion avail.
        questions = 1,  answers = 0,  authority records = 1,  additional = 0

    QUESTIONS:
        dynamodb.us-east-1.amazonaws.com, type = A, class = IN
    AUTHORITY RECORDS:
    -&gt;  dynamodb.us-east-1.amazonaws.com
        ttl = 545 (9 mins 5 secs)
        primary name server = ns-460.awsdns-57.com
        responsible mail addr = awsdns-hostmaster.amazon.com
        serial  = 1
        refresh = 7200 (2 hours)
        retry   = 900 (15 mins)
        expire  = 1209600 (14 days)
        default TTL = 86400 (1 day)

------------
------------
Got answer:
    HEADER:
        opcode = QUERY, id = 3, rcode = NOERROR
        header flags:  response, want recursion, recursion avail.
        questions = 1,  answers = 0,  authority records = 1,  additional = 0

    QUESTIONS:
        dynamodb.us-east-1.amazonaws.com, type = AAAA, class = IN
    AUTHORITY RECORDS:
    -&gt;  dynamodb.us-east-1.amazonaws.com
        ttl = 776 (12 mins 56 secs)
        primary name server = ns-460.awsdns-57.com
        responsible mail addr = awsdns-hostmaster.amazon.com
        serial  = 1
        refresh = 7200 (2 hours)
        retry   = 900 (15 mins)
        expire  = 1209600 (14 days)
        default TTL = 86400 (1 day)

------------
------------
Got answer:
    HEADER:
        opcode = QUERY, id = 4, rcode = NOERROR
        header flags:  response, want recursion, recursion avail.
        questions = 1,  answers = 0,  authority records = 1,  additional = 0

    QUESTIONS:
        dynamodb.us-east-1.amazonaws.com, type = A, class = IN
    AUTHORITY RECORDS:
    -&gt;  dynamodb.us-east-1.amazonaws.com
        ttl = 776 (12 mins 56 secs)
        primary name server = ns-460.awsdns-57.com
        responsible mail addr = awsdns-hostmaster.amazon.com
        serial  = 1
        refresh = 7200 (2 hours)
        retry   = 900 (15 mins)
        expire  = 1209600 (14 days)
        default TTL = 86400 (1 day)

------------
------------
Got answer:
    HEADER:
        opcode = QUERY, id = 5, rcode = NOERROR
        header flags:  response, want recursion, recursion avail.
        questions = 1,  answers = 0,  authority records = 1,  additional = 0

    QUESTIONS:
        dynamodb.us-east-1.amazonaws.com, type = AAAA, class = IN
    AUTHORITY RECORDS:
    -&gt;  dynamodb.us-east-1.amazonaws.com
        ttl = 545 (9 mins 5 secs)
        primary name server = ns-460.awsdns-57.com
        responsible mail addr = awsdns-hostmaster.amazon.com
        serial  = 1
        refresh = 7200 (2 hours)
        retry   = 900 (15 mins)
        expire  = 1209600 (14 days)
        default TTL = 86400 (1 day)

------------
Name:    dynamodb.us-east-1.amazonaws.com
</code></pre>
</div></form><ul><li><a href="https://old.reddit.com/r/aws/comments/1obd3lx/dynamodb_down_useast1/nkg0bp6/" data-event-action="permalink" rel="nofollow">permalink</a></li><li>embed</li><li>save</li><li>report</li><li>reply</li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Tell HN: AWS us-east-1 services are down (337 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=45640754</link>
            <guid>45640754</guid>
            <pubDate>Mon, 20 Oct 2025 07:07:01 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=45640754">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><tbody><tr id="45641031"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641031" href="https://news.ycombinator.com/vote?id=45641031&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Choosing us-east-1 as your primary region is good, because when you're down, everybody's down, too. You don't get this luxury with other US regions!</p></div></td></tr></tbody></table></td></tr><tr id="45641062"><td></td></tr><tr id="45641132"><td></td></tr><tr id="45641040"><td></td></tr><tr id="45641101"><td><table><tbody><tr><td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td><center><a id="up_45641101" href="https://news.ycombinator.com/vote?id=45641101&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Check the URL, we had an issue a couple of years ago with the Workspaces. US East was down but all of our stuff was in EU.</p><p>Turns out the default URL was hardcoded to use the us east interface and just by going to workspaces and then editing your URL to be the local region got everyone working again.</p><p>Unless you mean nothing is working for you at the moment.</p></div></td></tr></tbody></table></td></tr><tr id="45641212"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641212" href="https://news.ycombinator.com/vote?id=45641212&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>To everyone that got paged (like me), grab a coffee and ride it out, the week can only get better!</p></div></td></tr></tbody></table></td></tr><tr id="45640875"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45640875" href="https://news.ycombinator.com/vote?id=45640875&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Signal is down from several vantage points and accounts in Europe, I'd guess because of this dependence on Amazon overseas</p><p>We're having fun figuring out how to communicate amongst colleagues now! It's when it's gone when you realise your dependence</p></div></td></tr></tbody></table></td></tr><tr id="45641020"><td></td></tr><tr id="45640936"><td></td></tr><tr id="45641001"><td><table><tbody><tr><td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td><center><a id="up_45641001" href="https://news.ycombinator.com/vote?id=45641001&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Self hosting is golden. Sadly we already feel like we have too many services for our company's size, and the sensitivity of vulnerabilities in customer systems precludes unencrypted comms. IRC+TLS could be used but we also regularly send screenshots and such in self-destructing messages (not that an attacker couldn't disable that, but to avoid there being a giant archive when we do have some sort of compromise), so we'd rather fall back to something with a similar featureset</p><p>As a degraded-state fallback, email is what we're using now (we have our clients configured to encrypt with PGP by default, we use it for any internal email and also when the customer has PGP so everyone knows how to use that)</p></div></td></tr></tbody></table></td></tr><tr id="45641180"><td><table><tbody><tr><td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td><center><a id="up_45641180" href="https://news.ycombinator.com/vote?id=45641180&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>self-hosting isn't "golden", if you are serious about the reliability of complex systems, you can't afford to have your own outages impede your own engineers from fixing them.</p><p>if you seriously have no external low dep fallback, please at least document this fact now for the Big Postmortem.</p></div></td></tr></tbody></table></td></tr><tr id="45640965"><td></td></tr><tr id="45641186"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641186" href="https://news.ycombinator.com/vote?id=45641186&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>&gt; We're having fun figuring out how to communicate amongst colleagues now!</p><p>When Slack was down we used... google... google mail? chat. When you go to gmail there is actually a chat app on the left.</p></div></td></tr></tbody></table></td></tr><tr id="45640887"><td></td></tr><tr id="45641159"><td></td></tr><tr id="45641058"><td></td></tr><tr id="45640963"><td></td></tr><tr id="45641014"><td></td></tr><tr id="45640944"><td></td></tr><tr id="45641025"><td></td></tr><tr id="45641142"><td></td></tr><tr id="45641055"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641055" href="https://news.ycombinator.com/vote?id=45641055&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>I find it interesting that AWS services appear to be so tightly integrated that when there's an issue in a region, it affects most or all services. Kind of defeats the purported resiliency of cloud services.</p></div></td></tr></tbody></table></td></tr><tr id="45641085"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641085" href="https://news.ycombinator.com/vote?id=45641085&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>You know how people say X startup is ChatGPT wrapper? A significant chunk of AWS services are wrappers of main services (DynamoDB, EC2, S3 and etc).</p></div></td></tr></tbody></table></td></tr><tr id="45641164"><td><table><tbody><tr><td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td><center><a id="up_45641164" href="https://news.ycombinator.com/vote?id=45641164&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Yes, and that's exactly the problem. It's like choosing a microservice architecture for resiliency and building all the services on top of the same database or message queue without underlying redundancy.</p></div></td></tr></tbody></table></td></tr><tr id="45641211"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641211" href="https://news.ycombinator.com/vote?id=45641211&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Yeah I think there are a number of "hidden" dependencies on different regions, especially us-east-1. It's an artifact of it being AWS' largest region, etc.</p></div></td></tr></tbody></table></td></tr><tr id="45641196"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641196" href="https://news.ycombinator.com/vote?id=45641196&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>you can't possibly know that?</p><p>surely you mean:</p><p>&gt; I find it interesting that AWS services appear to be so tightly integrated that when there's an issue THAT BECOMES VISIBLE TO ME in a region, it affects most or all services.</p><p>AWS has stuff failing alllllllll the time, it's not very surprising that many of the outages that become <i>visible to you</i> involve multi-system failures - lots of other ones don't become visible!</p></div></td></tr></tbody></table></td></tr><tr id="45641077"><td></td></tr><tr id="45641227"><td></td></tr><tr id="45641131"><td></td></tr><tr id="45640967"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45640967" href="https://news.ycombinator.com/vote?id=45640967&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>docker hub or github cache internal maybe is affected:</p><p>Booting builder
  /usr/bin/docker buildx inspect --bootstrap --builder builder-1c223ad9-e21b-41c7-a28e-69eea59c8dac
  #1 [internal] booting buildkit
  #1 pulling image moby/buildkit:buildx-stable-1
  #1 pulling image moby/buildkit:buildx-stable-1 9.6s done
  #1 ERROR: received unexpected HTTP status: 500 Internal Server Error
  ------
   &gt; [internal] booting buildkit:
  ------
  ERROR: received unexpected HTTP status: 500 Internal Server Error</p></div></td></tr></tbody></table></td></tr><tr id="45640976"><td></td></tr><tr id="45641080"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641080" href="https://news.ycombinator.com/vote?id=45641080&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>I can't log in to my AWS account, in Germany, on top of that it is not possible to order anything or change payment options from amazon.de.</p><p>No landing page explaining services are down, just scary error pages. I thought account was compromised. Thanks HN for, as always, being the first to clarify what's happening.</p><p>Scary to see that in order to order from Amazon Germany, us-east1 must be up. Everything else works flawlessly but payments are a no go.</p></div></td></tr></tbody></table></td></tr><tr id="45641256"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641256" href="https://news.ycombinator.com/vote?id=45641256&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>I wanted to log into my Audible account after a long time on my phone, I couldn't, started getting annoyed, maybe my password is not saved correctly, maybe my account was banned, ... Then checking desktop, still errors, checking my Amazon.de, no profile info... That's when I started suspecting that <i>it's not me, it's you, Amazon!</i> Anyway, I guess, I'll listen to my book in a couple of hours, hopefully.</p><p>Btw, most parts of the amazon.de is working fine, but I can't load profiles, and can't login.</p></div></td></tr></tbody></table></td></tr><tr id="45641120"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641120" href="https://news.ycombinator.com/vote?id=45641120&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>I just ordered stuff from Amazon.de. And I highly any Amazon site can go down because of one region. Just like Netflix are rarely affected.</p></div></td></tr></tbody></table></td></tr><tr id="45641182"><td></td></tr><tr id="45641203"><td><table><tbody><tr><td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td><center><a id="up_45641203" href="https://news.ycombinator.com/vote?id=45641203&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>I'm on Amazon.de and I literally ordered stuff seconds before posting the comment. They took the money and everything. The order is in my order history list.</p></div></td></tr></tbody></table></td></tr><tr id="45641122"><td></td></tr><tr id="45640761"><td></td></tr><tr id="45641153"><td></td></tr><tr id="45641202"><td></td></tr><tr id="45640985"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45640985" href="https://news.ycombinator.com/vote?id=45640985&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>It's plausible that Amazon removes unhealthy servers from all round-robins including DNS. If all servers are unhealthy, no DNS.</p><p>Alternatively, perhaps their DNS service stopped responding to queries or even removed itself from BGP. It's possible for us mere mortals to tell which of these is the case.</p></div></td></tr></tbody></table></td></tr><tr id="45641015"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641015" href="https://news.ycombinator.com/vote?id=45641015&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Wasn't the point why AWS is so much premium that you will always get at least 6 nines if not more in availability?</p></div></td></tr></tbody></table></td></tr><tr id="45641038"><td></td></tr><tr id="45641045"><td></td></tr><tr id="45641144"><td><table><tbody><tr><td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td><center><a id="up_45641144" href="https://news.ycombinator.com/vote?id=45641144&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>The dashboard is the SLA.</p><p>IIRC it takes WAY too many managers to approve the dashboard being anything other than green.</p><p>It's not a reflection of reality nor is it automated.</p></div></td></tr></tbody></table></td></tr><tr id="45641193"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641193" href="https://news.ycombinator.com/vote?id=45641193&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>the highest availability service i think is S3 at 4 nines</p><p>you might be thinking of durability for s3 which is 11 nines, and i've never heard of anyone losing an object yet</p></div></td></tr></tbody></table></td></tr><tr id="45641069"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641069" href="https://news.ycombinator.com/vote?id=45641069&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>It's usually true if you arent in US-East-1 which is widely known to be the least reliable location. Theres no reason anyone should be deploying anything new to it these days.</p></div></td></tr></tbody></table></td></tr><tr id="45641035"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641035" href="https://news.ycombinator.com/vote?id=45641035&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Last time I checked the standard SLA is actually 99 % and the only compensation you get for downtime is a refund. Which is why I don't use AWS for anything mission critical.</p></div></td></tr></tbody></table></td></tr><tr id="45641066"><td></td></tr><tr id="45641126"><td><table><tbody><tr><td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td><center><a id="up_45641126" href="https://news.ycombinator.com/vote?id=45641126&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Depends on which service you're paying for. For pure hosting the answer is no, which is why it rarely makes sense to go AWS for uptime and stability because when it goes down there's nothing you can do. As opposed to bare metal hosting with redundancy across data centers, which can even cost less than AWS for a lot of common workloads.</p></div></td></tr></tbody></table></td></tr><tr id="45641049"><td></td></tr><tr id="45641094"><td><table><tbody><tr><td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td><center><a id="up_45641094" href="https://news.ycombinator.com/vote?id=45641094&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Been using AWS too, but for a critical service we mirrored across three Hetzner datacenters with master-master replication as well as two additional locations for cluster node voting.</p></div></td></tr></tbody></table></td></tr><tr id="45641119"><td></td></tr><tr id="45641034"><td></td></tr><tr id="45641130"><td></td></tr><tr id="45641041"><td></td></tr><tr id="45640955"><td></td></tr><tr id="45640834"><td></td></tr><tr id="45641064"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641064" href="https://news.ycombinator.com/vote?id=45641064&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>During the last us-east-1 apocalypse 14 years ago, I started awsdowntime.com - don't make me regsiter it again and revive the page.</p></div></td></tr></tbody></table></td></tr><tr id="45641224"><td></td></tr><tr id="45640886"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45640886" href="https://news.ycombinator.com/vote?id=45640886&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Couple of years ago us-east was considered the least stable region here on HN due to its age. Is that still a thing?</p></div></td></tr></tbody></table></td></tr><tr id="45641008"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641008" href="https://news.ycombinator.com/vote?id=45641008&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>When I was there at aws (left about a decade ago), us-east-1 was considered least stable, because it was the biggest.</p><p>I.e. some bottle-necks in new code appearing only _after_ you've deployed there, which is of course too late.</p><p>It didn't help that some services had their deploy trains (pipelines in amazon lingo) of ~3 weeks, with us-east-1 being the last one.</p><p>I bet the situation hasn't changed much since.</p></div></td></tr></tbody></table></td></tr><tr id="45641005"><td></td></tr><tr id="45640989"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45640989" href="https://news.ycombinator.com/vote?id=45640989&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Couple of weeks or months ago the front page was saying how us-east-1 instability was a thing of the past due to (whatever).</p></div></td></tr></tbody></table></td></tr><tr id="45640974"><td></td></tr><tr id="45641030"><td></td></tr><tr id="45641047"><td></td></tr><tr id="45640774"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45640774" href="https://news.ycombinator.com/vote?id=45640774&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>We're seeing issues with RDS proxy.  Wouldn't be surprised if a DNS issue was the cause, but who knows, will wait for the postmortem.</p></div></td></tr></tbody></table></td></tr><tr id="45640780"><td></td></tr><tr id="45640847"><td></td></tr><tr id="45640907"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45640907" href="https://news.ycombinator.com/vote?id=45640907&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Can confirm. I was trying to send the newsletter (with SES) and it didn't work. I was thinking my local boto3 was old, but I figured I should check HN just in case.</p></div></td></tr></tbody></table></td></tr><tr id="45640764"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45640764" href="https://news.ycombinator.com/vote?id=45640764&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Yes, we're seeing issues with Dynamo, and potentially other AWS services.</p><p>Appears to have happened within the last 10-15 minutes.</p></div></td></tr></tbody></table></td></tr><tr id="45640775"><td></td></tr><tr id="45641107"><td></td></tr><tr id="45641201"><td></td></tr><tr id="45640953"><td></td></tr><tr id="45640950"><td></td></tr><tr id="45640881"><td></td></tr><tr id="45640899"><td></td></tr><tr id="45640932"><td></td></tr><tr id="45641104"><td></td></tr><tr id="45640945"><td></td></tr><tr id="45640939"><td></td></tr><tr id="45640991"><td></td></tr><tr id="45640855"><td></td></tr><tr id="45640869"><td></td></tr><tr id="45640949"><td></td></tr><tr id="45640773"><td></td></tr><tr id="45640982"><td></td></tr><tr id="45641000"><td></td></tr><tr id="45641043"><td></td></tr><tr id="45641161"><td></td></tr><tr id="45641137"><td><table><tbody><tr><td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td><center><a id="up_45641137" href="https://news.ycombinator.com/vote?id=45641137&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Meanwhile my pair of 12 year old raspberry pi's hangling my home services like DNS survive their 3rd AWS us-east-1 outage.</p><p>"But you can't do webscale uptime on your own"</p><p>Sure. I suspect even a single pi with auto-updates on has less downtime.</p></div></td></tr></tbody></table></td></tr><tr id="45641039"><td></td></tr><tr id="45641082"><td></td></tr><tr id="45641154"><td><table><tbody><tr><td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td><center><a id="up_45641154" href="https://news.ycombinator.com/vote?id=45641154&amp;how=up&amp;goto=item%3Fid%3D45640754"></a></center></td><td><br>
<div><p>Never choose a single point of failure.</p><p>Or rather</p><p>Ensure your single point of failure risk is appropriate for your business. I don't have full resilience for my companies AS going down, but we do have limited DR capability. Same with the loss of a major city or two.</p><p>I'm not 100% confident in a Thames Barrier flood situation, as I suspect some of our providers don't have the resilience levels we do, but we'd still be able to provide some minimal capability.</p></div></td></tr></tbody></table></td></tr></tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bat v0.26.0 (131 pts)]]></title>
            <link>https://github.com/sharkdp/bat/releases/tag/v0.26.0</link>
            <guid>45640678</guid>
            <pubDate>Mon, 20 Oct 2025 06:49:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/sharkdp/bat/releases/tag/v0.26.0">https://github.com/sharkdp/bat/releases/tag/v0.26.0</a>, See on <a href="https://news.ycombinator.com/item?id=45640678">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="true" data-test-selector="body-content" data-view-component="true" data-hpc=""><h2>v0.26.0</h2>
<h2>Features</h2>
<ul>
<li>Add build for windows/ARM64 platform. <a data-error-text="Failed to load title" data-id="2823318557" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3190" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3190/hovercard" href="https://github.com/sharkdp/bat/pull/3190">#3190</a> (<a data-hovercard-type="user" data-hovercard-url="/users/alcroito/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/alcroito">@alcroito</a>)</li>
<li>Add paging to <code>--list-themes</code>, see PR <a data-error-text="Failed to load title" data-id="2943537281" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3239" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3239/hovercard" href="https://github.com/sharkdp/bat/pull/3239">#3239</a> (<a data-hovercard-type="user" data-hovercard-url="/users/einfachIrgendwer0815/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/einfachIrgendwer0815">@einfachIrgendwer0815</a>)</li>
<li>Support negative relative line ranges, e.g. <code>bat -r :-10</code> / <code>bat -r='-10:'</code>, see <a data-error-text="Failed to load title" data-id="2459004322" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3068" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3068/hovercard" href="https://github.com/sharkdp/bat/pull/3068">#3068</a> (<a data-hovercard-type="user" data-hovercard-url="/users/ajesipow/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ajesipow">@ajesipow</a>)</li>
<li>Support context in line ranges, e.g. <code>bat -r 30::5</code> /  <code>bat -r 30:40:5</code>, see <a data-error-text="Failed to load title" data-id="3233945614" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3345" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3345/hovercard" href="https://github.com/sharkdp/bat/pull/3345">#3345</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cavanaug/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cavanaug">@cavanaug</a>)</li>
<li>Add built-in 'minus' pager, e.g. <code>bat --pager=builtin</code> see PR <a data-error-text="Failed to load title" data-id="3399766556" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3402" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3402/hovercard" href="https://github.com/sharkdp/bat/pull/3402">#3402</a> (<a data-hovercard-type="user" data-hovercard-url="/users/academician/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/academician">@academician</a>)</li>
</ul>
<h2>Bugfixes</h2>
<ul>
<li>Fix UTF-8 BOM not being stripped for syntax detection, see <a data-error-text="Failed to load title" data-id="3103771473" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3314" data-hovercard-type="issue" data-hovercard-url="/sharkdp/bat/issues/3314/hovercard" href="https://github.com/sharkdp/bat/issues/3314">#3314</a> (<a data-hovercard-type="user" data-hovercard-url="/users/krikera/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/krikera">@krikera</a>)</li>
<li>Fix <code>BAT_THEME_DARK</code> and <code>BAT_THEME_LIGHT</code> being ignored, see issue <a data-error-text="Failed to load title" data-id="2776708580" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3171" data-hovercard-type="issue" data-hovercard-url="/sharkdp/bat/issues/3171/hovercard" href="https://github.com/sharkdp/bat/issues/3171">#3171</a> and PR <a data-error-text="Failed to load title" data-id="2773798977" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3168" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3168/hovercard" href="https://github.com/sharkdp/bat/pull/3168">#3168</a> (<a data-hovercard-type="user" data-hovercard-url="/users/bash/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bash">@bash</a>)</li>
<li>Prevent <code>--list-themes</code> from outputting default theme info to stdout when it is piped, see <a data-error-text="Failed to load title" data-id="2813464960" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3189" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3189/hovercard" href="https://github.com/sharkdp/bat/pull/3189">#3189</a> (<a data-hovercard-type="user" data-hovercard-url="/users/einfachIrgendwer0815/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/einfachIrgendwer0815">@einfachIrgendwer0815</a>)</li>
<li>Rename some submodules to fix Dependabot submodule updates, see issue <a data-error-text="Failed to load title" data-id="2826234600" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3198" data-hovercard-type="issue" data-hovercard-url="/sharkdp/bat/issues/3198/hovercard" href="https://github.com/sharkdp/bat/issues/3198">#3198</a> and PR <a data-error-text="Failed to load title" data-id="2828716746" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3201" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3201/hovercard" href="https://github.com/sharkdp/bat/pull/3201">#3201</a> (<a data-hovercard-type="user" data-hovercard-url="/users/victor-gp/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/victor-gp">@victor-gp</a>)</li>
<li>Make highlight tests fail when new syntaxes don't have fixtures PR <a data-error-text="Failed to load title" data-id="2964461642" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3255" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3255/hovercard" href="https://github.com/sharkdp/bat/pull/3255">#3255</a> (<a data-hovercard-type="user" data-hovercard-url="/users/dan-hipschman/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dan-hipschman">@dan-hipschman</a>)</li>
<li>Fix crash for multibyte characters in file path, see issue <a data-error-text="Failed to load title" data-id="2905349506" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3230" data-hovercard-type="issue" data-hovercard-url="/sharkdp/bat/issues/3230/hovercard" href="https://github.com/sharkdp/bat/issues/3230">#3230</a> and PR <a data-error-text="Failed to load title" data-id="2961883699" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3245" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3245/hovercard" href="https://github.com/sharkdp/bat/pull/3245">#3245</a> (<a data-hovercard-type="user" data-hovercard-url="/users/HSM95/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/HSM95">@HSM95</a>)</li>
<li>Add missing mappings for various bash/zsh files, see PR <a data-error-text="Failed to load title" data-id="2978022854" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3262" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3262/hovercard" href="https://github.com/sharkdp/bat/pull/3262">#3262</a> (<a data-hovercard-type="user" data-hovercard-url="/users/AdamGaskins/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/AdamGaskins">@AdamGaskins</a>)</li>
<li>Send all bat errors to stderr by default, see <a data-error-text="Failed to load title" data-id="3208848495" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3336" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3336/hovercard" href="https://github.com/sharkdp/bat/pull/3336">#3336</a> (<a data-hovercard-type="user" data-hovercard-url="/users/JerryImMouse/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JerryImMouse">@JerryImMouse</a>)</li>
<li>Make --map-syntax target case insensitive to match --language, see <a data-error-text="Failed to load title" data-id="2840889505" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3206" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3206/hovercard" href="https://github.com/sharkdp/bat/pull/3206">#3206</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Correctly determine the end of the line in UTF16LE/BE input <a data-error-text="Failed to load title" data-id="3301795093" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3369" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3369/hovercard" href="https://github.com/sharkdp/bat/pull/3369">#3369</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li><code>--style=changes</code> no longer prints a two-space indent when the file is unmodified, see issue <a data-error-text="Failed to load title" data-id="1940575016" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/2710" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/2710/hovercard" href="https://github.com/sharkdp/bat/pull/2710">#2710</a> and PR <a data-error-text="Failed to load title" data-id="3437471941" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3406" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3406/hovercard" href="https://github.com/sharkdp/bat/pull/3406">#3406</a> (<a data-hovercard-type="user" data-hovercard-url="/users/jyn514/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jyn514">@jyn514</a>)</li>
<li>Add missing shell completions, see <a data-error-text="Failed to load title" data-id="3460299040" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3411" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3411/hovercard" href="https://github.com/sharkdp/bat/pull/3411">#3411</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Execute help/version/diagnostic commands even with invalid config/arguments present, see <a data-error-text="Failed to load title" data-id="3460700052" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3414" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3414/hovercard" href="https://github.com/sharkdp/bat/pull/3414">#3414</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Fixed line numbers (<code>-n</code>) and style components not printing when piping output, see issue <a data-error-text="Failed to load title" data-id="2236944741" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/2935" data-hovercard-type="issue" data-hovercard-url="/sharkdp/bat/issues/2935/hovercard" href="https://github.com/sharkdp/bat/issues/2935">#2935</a> and PR <a data-error-text="Failed to load title" data-id="3521498174" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3438" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3438/hovercard" href="https://github.com/sharkdp/bat/pull/3438">#3438</a> (<a data-hovercard-type="user" data-hovercard-url="/users/lmmx/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/lmmx">@lmmx</a>)</li>
</ul>
<h2>Other</h2>
<ul>
<li>Update base16 README links to community driven base16 work <a data-error-text="Failed to load title" data-id="2152268636" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/2871" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/2871/hovercard" href="https://github.com/sharkdp/bat/pull/2871">#2871</a> (<a data-hovercard-type="user" data-hovercard-url="/users/JamyGolden/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JamyGolden">@JamyGolden</a>)</li>
<li>Work around build failures when building <code>bat</code> from vendored sources <a data-error-text="Failed to load title" data-id="2796755531" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3179" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3179/hovercard" href="https://github.com/sharkdp/bat/pull/3179">#3179</a> (<a data-hovercard-type="user" data-hovercard-url="/users/dtolnay/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dtolnay">@dtolnay</a>)</li>
<li>CICD: Stop building for x86_64-pc-windows-gnu which fails <a data-error-text="Failed to load title" data-id="2975586712" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3261" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3261/hovercard" href="https://github.com/sharkdp/bat/pull/3261">#3261</a> (Enselic)</li>
<li>CICD:  CICD: replace windows-2019 runners with windows-2025 <a data-error-text="Failed to load title" data-id="3211744894" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3339" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3339/hovercard" href="https://github.com/sharkdp/bat/pull/3339">#3339</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cyqsimon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cyqsimon">@cyqsimon</a>)</li>
<li>Build script: replace string-based codegen with quote-based codegen <a data-error-text="Failed to load title" data-id="3211983606" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3340" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3340/hovercard" href="https://github.com/sharkdp/bat/pull/3340">#3340</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cyqsimon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cyqsimon">@cyqsimon</a>)</li>
<li>Improve code coverage of <code>--list-languages</code> parameter <a data-error-text="Failed to load title" data-id="2255217108" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/2942" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/2942/hovercard" href="https://github.com/sharkdp/bat/pull/2942">#2942</a> (<a data-hovercard-type="user" data-hovercard-url="/users/sblondon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/sblondon">@sblondon</a>)</li>
<li>Only start offload worker thread when there's more than 1 core <a data-error-text="Failed to load title" data-id="2285059143" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/2956" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/2956/hovercard" href="https://github.com/sharkdp/bat/pull/2956">#2956</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cyqsimon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cyqsimon">@cyqsimon</a>)</li>
<li>Update terminal-colorsaurus (the library used for dark/light detection) to 1.0, see <a data-error-text="Failed to load title" data-id="3251109476" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3347" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3347/hovercard" href="https://github.com/sharkdp/bat/pull/3347">#3347</a> (<a data-hovercard-type="user" data-hovercard-url="/users/bash/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/bash">@bash</a>)</li>
<li>Update console dependency to 0.16, see <a data-error-text="Failed to load title" data-id="3256087183" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3351" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3351/hovercard" href="https://github.com/sharkdp/bat/pull/3351">#3351</a> (<a data-hovercard-type="user" data-hovercard-url="/users/musicinmybrain/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/musicinmybrain">@musicinmybrain</a>)</li>
<li>Fixed some typos <a data-error-text="Failed to load title" data-id="2960107545" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3244" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3244/hovercard" href="https://github.com/sharkdp/bat/pull/3244">#3244</a> (<a data-hovercard-type="user" data-hovercard-url="/users/ssbarnea/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ssbarnea">@ssbarnea</a>)</li>
<li>Update onig_sys dependency to 69.9.1 to fix a gcc build failure <a data-error-text="Failed to load title" data-id="3382266911" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3400" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3400/hovercard" href="https://github.com/sharkdp/bat/pull/3400">#3400</a> (<a data-hovercard-type="user" data-hovercard-url="/users/CosmicHorrorDev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/CosmicHorrorDev">@CosmicHorrorDev</a>)</li>
<li>Add a cargo feature (<code>vendored-libgit2</code>) to build with vendored libgit2 version without depending on the system's one <a data-error-text="Failed to load title" data-id="3488497070" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3426" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3426/hovercard" href="https://github.com/sharkdp/bat/pull/3426">#3426</a> (<a data-hovercard-type="user" data-hovercard-url="/users/0x61nas/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0x61nas">@0x61nas</a>)</li>
<li>Update syntect dependency to v5.3.0 to fix a few minor bugs, see <a data-error-text="Failed to load title" data-id="3460290947" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3410" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3410/hovercard" href="https://github.com/sharkdp/bat/pull/3410">#3410</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
</ul>
<h2>Syntaxes</h2>
<ul>
<li>Add syntax mapping for <code>paru</code> configuration files <a data-error-text="Failed to load title" data-id="2798102869" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3182" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3182/hovercard" href="https://github.com/sharkdp/bat/pull/3182">#3182</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cyqsimon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cyqsimon">@cyqsimon</a>)</li>
<li>Add support for <a href="https://www.idris-lang.org/" rel="nofollow">Idris 2 programming language</a> <a data-error-text="Failed to load title" data-id="2758106895" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3150" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3150/hovercard" href="https://github.com/sharkdp/bat/pull/3150">#3150</a> (<a data-hovercard-type="user" data-hovercard-url="/users/buzden/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/buzden">@buzden</a>)</li>
<li>Add syntax mapping for <code>nix</code>'s '<code>flake.lock</code> lockfiles <a data-error-text="Failed to load title" data-id="2825723310" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3196" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3196/hovercard" href="https://github.com/sharkdp/bat/pull/3196">#3196</a> (<a data-hovercard-type="user" data-hovercard-url="/users/odilf/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/odilf">@odilf</a>)</li>
<li>Improvements to CSV/TSV highlighting, with autodetection of delimiter and support for TSV files, see <a data-error-text="Failed to load title" data-id="2810370100" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3186" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3186/hovercard" href="https://github.com/sharkdp/bat/pull/3186">#3186</a> (@keith-</li>
<li>Improve (Sys)log error highlighting, see <a data-error-text="Failed to load title" data-id="2840584050" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3205" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3205/hovercard" href="https://github.com/sharkdp/bat/pull/3205">#3205</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Map <code>ndjson</code> extension to JSON syntax, see <a data-error-text="Failed to load title" data-id="2855284742" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3209" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3209/hovercard" href="https://github.com/sharkdp/bat/pull/3209">#3209</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Map files with <code>csproj</code>, <code>vbproj</code>, <code>props</code> and <code>targets</code> extensions to XML syntax, see <a data-error-text="Failed to load title" data-id="2873379651" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3213" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3213/hovercard" href="https://github.com/sharkdp/bat/pull/3213">#3213</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Add debsources syntax to highlight <code>/etc/apt/sources.list</code> files, see <a data-error-text="Failed to load title" data-id="2879475662" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3215" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3215/hovercard" href="https://github.com/sharkdp/bat/pull/3215">#3215</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Add syntax definition and test file for GDScript highlighting, see <a data-error-text="Failed to load title" data-id="2941195861" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3236" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3236/hovercard" href="https://github.com/sharkdp/bat/pull/3236">#3236</a> (<a data-hovercard-type="user" data-hovercard-url="/users/chetanjangir0/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/chetanjangir0">@chetanjangir0</a>)</li>
<li>Add syntax test file for Odin highlighting, see <a data-error-text="Failed to load title" data-id="2956008671" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3241" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3241/hovercard" href="https://github.com/sharkdp/bat/pull/3241">#3241</a> (<a data-hovercard-type="user" data-hovercard-url="/users/chetanjangir0/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/chetanjangir0">@chetanjangir0</a>)</li>
<li>Update quadlet syntax mapping rules to cover quadlets in subdirectories <a data-error-text="Failed to load title" data-id="3075992934" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3299" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3299/hovercard" href="https://github.com/sharkdp/bat/pull/3299">#3299</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cyqsimon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cyqsimon">@cyqsimon</a>)</li>
<li>Add syntax Typst <a data-error-text="Failed to load title" data-id="3078076655" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3300" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3300/hovercard" href="https://github.com/sharkdp/bat/pull/3300">#3300</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cskeeters/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cskeeters">@cskeeters</a>)</li>
<li>Map <code>.mill</code> files to Scala syntax for Mill build tool configuration files <a data-error-text="Failed to load title" data-id="3100606917" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3311" data-hovercard-type="issue" data-hovercard-url="/sharkdp/bat/issues/3311/hovercard" href="https://github.com/sharkdp/bat/issues/3311">#3311</a> (<a data-hovercard-type="user" data-hovercard-url="/users/krikera/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/krikera">@krikera</a>)</li>
<li>Add syntax highlighting for VHDL, see <a data-error-text="Failed to load title" data-id="3209285421" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3337" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3337/hovercard" href="https://github.com/sharkdp/bat/pull/3337">#3337</a> (<a data-hovercard-type="user" data-hovercard-url="/users/JerryImMouse/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JerryImMouse">@JerryImMouse</a>)</li>
<li>Add syntax mapping for certbot certificate configuration <a data-error-text="Failed to load title" data-id="3211065543" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3338" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3338/hovercard" href="https://github.com/sharkdp/bat/pull/3338">#3338</a> (<a data-hovercard-type="user" data-hovercard-url="/users/cyqsimon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/cyqsimon">@cyqsimon</a>)</li>
<li>Update Lean syntax from Lean 3 to Lean 4 <a data-error-text="Failed to load title" data-id="3132736460" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3322" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3322/hovercard" href="https://github.com/sharkdp/bat/pull/3322">#3322</a> (<a data-hovercard-type="user" data-hovercard-url="/users/YDX-2147483647/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/YDX-2147483647">@YDX-2147483647</a>)</li>
<li>Map <code>.flatpakref</code> and <code>.flatpakrepo</code> files to INI syntax <a data-error-text="Failed to load title" data-id="3280677453" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3353" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3353/hovercard" href="https://github.com/sharkdp/bat/pull/3353">#3353</a> (<a data-hovercard-type="user" data-hovercard-url="/users/Ferenc-/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Ferenc-">@Ferenc-</a>)</li>
<li>Update hosts syntax <a data-error-text="Failed to load title" data-id="3301680750" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3368" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3368/hovercard" href="https://github.com/sharkdp/bat/pull/3368">#3368</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Map <code>.kshrc</code> files to Bash syntax <a data-error-text="Failed to load title" data-id="3286574371" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3364" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3364/hovercard" href="https://github.com/sharkdp/bat/pull/3364">#3364</a> (<a data-hovercard-type="user" data-hovercard-url="/users/ritoban23/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ritoban23">@ritoban23</a>)</li>
<li>Map <code>/var/log/dmesg</code> files to Syslog syntax <a data-error-text="Failed to load title" data-id="3460655867" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3412" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3412/hovercard" href="https://github.com/sharkdp/bat/pull/3412">#3412</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
<li>Add syntax definition and test file for Go modules(<code>go.mod</code> and <code>go.sum</code>) highlighting, see <a data-error-text="Failed to load title" data-id="3480124155" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3424" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3424/hovercard" href="https://github.com/sharkdp/bat/pull/3424">#3424</a> (<a data-hovercard-type="user" data-hovercard-url="/users/DarkMatter-999/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/DarkMatter-999">@DarkMatter-999</a>)</li>
<li>Syntax highlighting for typescript code blocks within Markdown files, see <a data-error-text="Failed to load title" data-id="3509386497" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3435" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3435/hovercard" href="https://github.com/sharkdp/bat/pull/3435">#3435</a> (<a data-hovercard-type="user" data-hovercard-url="/users/MuntasirSZN/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/MuntasirSZN">@MuntasirSZN</a>)</li>
</ul>
<h2>Themes</h2>
<ul>
<li>Add Catppuccin, see <a data-error-text="Failed to load title" data-id="3105456087" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3317" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3317/hovercard" href="https://github.com/sharkdp/bat/pull/3317">#3317</a> (<a data-hovercard-type="user" data-hovercard-url="/users/SchweGELBin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/SchweGELBin">@SchweGELBin</a>)</li>
<li>Updated Catppuccin, see <a data-error-text="Failed to load title" data-id="3202214324" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3333" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3333/hovercard" href="https://github.com/sharkdp/bat/pull/3333">#3333</a> (<a data-hovercard-type="user" data-hovercard-url="/users/SchweGELBin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/SchweGELBin">@SchweGELBin</a>)</li>
<li>Updated gruvbox, see <a data-error-text="Failed to load title" data-id="3307702639" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3372" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3372/hovercard" href="https://github.com/sharkdp/bat/pull/3372">#3372</a> (<a data-hovercard-type="user" data-hovercard-url="/users/Nicholas42/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Nicholas42">@Nicholas42</a>)</li>
<li>Updated GitHub theme, see <a data-error-text="Failed to load title" data-id="3336456334" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3382" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3382/hovercard" href="https://github.com/sharkdp/bat/pull/3382">#3382</a> (<a data-hovercard-type="user" data-hovercard-url="/users/CosmicHorrorDev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/CosmicHorrorDev">@CosmicHorrorDev</a>)</li>
<li>Updated ANSI theme to highlight JSON object keys differently from values, see <a data-error-text="Failed to load title" data-id="3460672564" data-permission-text="Title is private" data-url="https://github.com/sharkdp/bat/issues/3413" data-hovercard-type="pull_request" data-hovercard-url="/sharkdp/bat/pull/3413/hovercard" href="https://github.com/sharkdp/bat/pull/3413">#3413</a> (<a data-hovercard-type="user" data-hovercard-url="/users/keith-hall/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/keith-hall">@keith-hall</a>)</li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DeepSeek OCR (754 pts)]]></title>
            <link>https://github.com/deepseek-ai/DeepSeek-OCR</link>
            <guid>45640594</guid>
            <pubDate>Mon, 20 Oct 2025 06:26:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/deepseek-ai/DeepSeek-OCR">https://github.com/deepseek-ai/DeepSeek-OCR</a>, See on <a href="https://news.ycombinator.com/item?id=45640594">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">


<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/deepseek-ai/DeepSeek-OCR/blob/main/assets/logo.svg"><img src="https://github.com/deepseek-ai/DeepSeek-OCR/raw/main/assets/logo.svg" width="60%" alt="DeepSeek AI"></a>
</p>
<hr>
<p><a href="https://www.deepseek.com/" rel="nofollow">
    <img alt="Homepage" src="https://github.com/deepseek-ai/DeepSeek-OCR/raw/main/assets/badge.svg">
  </a>
  <a href="https://huggingface.co/deepseek-ai/DeepSeek-OCR" rel="nofollow">
    <img alt="Hugging Face" src="https://camo.githubusercontent.com/5e3115539d4583e22d65cb89eb1759e767cb9e1d70772923292fcfc80a654be4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f25463025394625413425393725323048756767696e67253230466163652d446565705365656b25323041492d6666633130373f636f6c6f723d666663313037266c6f676f436f6c6f723d7768697465" data-canonical-src="https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-DeepSeek%20AI-ffc107?color=ffc107&amp;logoColor=white">
  </a>
</p>
<p><a href="https://discord.gg/Tc7c45Zzu5" rel="nofollow">
    <img alt="Discord" src="https://camo.githubusercontent.com/e227481a149714ed5187e4fd0b60b9f736099c2dd2083e6c091e29f1446cbb1a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446973636f72642d446565705365656b25323041492d3732383964613f6c6f676f3d646973636f7264266c6f676f436f6c6f723d776869746526636f6c6f723d373238396461" data-canonical-src="https://img.shields.io/badge/Discord-DeepSeek%20AI-7289da?logo=discord&amp;logoColor=white&amp;color=7289da">
  </a>
  <a href="https://twitter.com/deepseek_ai" rel="nofollow">
    <img alt="Twitter Follow" src="https://camo.githubusercontent.com/8272710ecd020c821b4f62c1c455efb89e0db4eb179c5f5f971c3c1f69452c54/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f547769747465722d646565707365656b5f61692d77686974653f6c6f676f3d78266c6f676f436f6c6f723d7768697465" data-canonical-src="https://img.shields.io/badge/Twitter-deepseek_ai-white?logo=x&amp;logoColor=white">
  </a>
</p>
<p dir="auto">
  <a href="https://huggingface.co/deepseek-ai/DeepSeek-OCR" rel="nofollow"><b>📥 Model Download</b></a> |
  <a href="https://github.com/deepseek-ai/DeepSeek-OCR/blob/main/DeepSeek_OCR_paper.pdf"><b>📄 Paper Link</b></a> |
  <a href="https://github.com/deepseek-ai/DeepSeek-OCR/blob/main/DeepSeek_OCR_paper.pdf"><b>📄 Arxiv Paper Link</b></a> |
</p>

<p dir="auto">
<a target="_blank" rel="noopener noreferrer" href="https://github.com/deepseek-ai/DeepSeek-OCR/blob/main/assets/fig1.png"><img src="https://github.com/deepseek-ai/DeepSeek-OCR/raw/main/assets/fig1.png"></a>
</p>
<p dir="auto">
<a href="https://github.com/deepseek-ai/DeepSeek-OCR/blob/main">Explore the boundaries of visual-text compression.</a>       
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Release</h2><a id="user-content-release" aria-label="Permalink: Release" href="#release"></a></p>
<ul dir="auto">
<li>[2025/x/x]🚀🚀🚀 We release DeepSeek-OCR, a model to investigate the role of vision encoders from an LLM-centric viewpoint.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contents</h2><a id="user-content-contents" aria-label="Permalink: Contents" href="#contents"></a></p>
<ul dir="auto">
<li><a href="#install">Install</a></li>
<li><a href="#vllm-inference">vLLM Inference</a></li>
<li><a href="#transformers-inference">Transformers Inference</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Install</h2><a id="user-content-install" aria-label="Permalink: Install" href="#install"></a></p>
<blockquote>
<p dir="auto">Our environment is cuda11.8+torch2.6.0.</p>
</blockquote>
<ol dir="auto">
<li>Clone this repository and navigate to the DeepSeek-OCR folder</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/deepseek-ai/DeepSeek-OCR.git"><pre>git clone https://github.com/deepseek-ai/DeepSeek-OCR.git</pre></div>
<ol start="2" dir="auto">
<li>Conda</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="conda create -n deepseek-ocr python=3.12.9 -y
conda activate deepseek-ocr"><pre>conda create -n deepseek-ocr python=3.12.9 -y
conda activate deepseek-ocr</pre></div>
<ol start="3" dir="auto">
<li>Packages</li>
</ol>
<ul dir="auto">
<li>download the vllm-0.8.5 <a href="https://github.com/vllm-project/vllm/releases/tag/v0.8.5">whl</a></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="pip install torch==2.6.0 torchvision==0.21.0 torchaudio==2.6.0 --index-url https://download.pytorch.org/whl/cu118
pip install vllm-0.8.5+cu118-cp38-abi3-manylinux1_x86_64.whl
pip install -r requirements.txt
pip install flash-attn==2.7.3 --no-build-isolation"><pre>pip install torch==2.6.0 torchvision==0.21.0 torchaudio==2.6.0 --index-url https://download.pytorch.org/whl/cu118
pip install vllm-0.8.5+cu118-cp38-abi3-manylinux1_x86_64.whl
pip install -r requirements.txt
pip install flash-attn==2.7.3 --no-build-isolation</pre></div>
<p dir="auto"><strong>Note:</strong> if you want vLLM and transformers codes to run in the same environment, you don't need to worry about this installation error like: vllm 0.8.5+cu118 requires transformers&gt;=4.51.1</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">vLLM-Inference</h2><a id="user-content-vllm-inference" aria-label="Permalink: vLLM-Inference" href="#vllm-inference"></a></p>
<ul dir="auto">
<li>VLLM:</li>
</ul>
<blockquote>
<p dir="auto"><strong>Note:</strong> change the INPUT_PATH/OUTPUT_PATH and other settings in the DeepSeek-OCR-master/DeepSeek-OCR-vllm/config.py</p>
</blockquote>
<div dir="auto" data-snippet-clipboard-copy-content="cd DeepSeek-OCR-master/DeepSeek-OCR-vllm"><pre><span>cd</span> DeepSeek-OCR-master/DeepSeek-OCR-vllm</pre></div>
<ol dir="auto">
<li>image: streaming output</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="python run_dpsk_ocr_image.py"><pre>python run_dpsk_ocr_image.py</pre></div>
<ol start="2" dir="auto">
<li>pdf: concurrency ~2500tokens/s(an A100-40G)</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="python run_dpsk_ocr_pdf.py"><pre>python run_dpsk_ocr_pdf.py</pre></div>
<ol start="3" dir="auto">
<li>batch eval for benchmarks</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="python run_dpsk_ocr_eval_batch.py"><pre>python run_dpsk_ocr_eval_batch.py</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Transformers-Inference</h2><a id="user-content-transformers-inference" aria-label="Permalink: Transformers-Inference" href="#transformers-inference"></a></p>
<ul dir="auto">
<li>Transformers</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="from transformers import AutoModel, AutoTokenizer
import torch
import os
os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = '0'
model_name = 'deepseek-ai/DeepSeek-OCR'

tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
model = AutoModel.from_pretrained(model_name, _attn_implementation='flash_attention_2', trust_remote_code=True, use_safetensors=True)
model = model.eval().cuda().to(torch.bfloat16)

# prompt = &quot;<image>\nFree OCR. &quot;
prompt = &quot;<image>\n<|grounding|>Convert the document to markdown. &quot;
image_file = 'your_image.jpg'
output_path = 'your/output/dir'

res = model.infer(tokenizer, prompt=prompt, image_file=image_file, output_path = output_path, base_size = 1024, image_size = 640, crop_mode=True, save_results = True, test_compress = True)"><pre><span>from</span> <span>transformers</span> <span>import</span> <span>AutoModel</span>, <span>AutoTokenizer</span>
<span>import</span> <span>torch</span>
<span>import</span> <span>os</span>
<span>os</span>.<span>environ</span>[<span>"CUDA_VISIBLE_DEVICES"</span>] <span>=</span> <span>'0'</span>
<span>model_name</span> <span>=</span> <span>'deepseek-ai/DeepSeek-OCR'</span>

<span>tokenizer</span> <span>=</span> <span>AutoTokenizer</span>.<span>from_pretrained</span>(<span>model_name</span>, <span>trust_remote_code</span><span>=</span><span>True</span>)
<span>model</span> <span>=</span> <span>AutoModel</span>.<span>from_pretrained</span>(<span>model_name</span>, <span>_attn_implementation</span><span>=</span><span>'flash_attention_2'</span>, <span>trust_remote_code</span><span>=</span><span>True</span>, <span>use_safetensors</span><span>=</span><span>True</span>)
<span>model</span> <span>=</span> <span>model</span>.<span>eval</span>().<span>cuda</span>().<span>to</span>(<span>torch</span>.<span>bfloat16</span>)

<span># prompt = "&lt;image&gt;\nFree OCR. "</span>
<span>prompt</span> <span>=</span> <span>"&lt;image&gt;<span>\n</span>&lt;|grounding|&gt;Convert the document to markdown. "</span>
<span>image_file</span> <span>=</span> <span>'your_image.jpg'</span>
<span>output_path</span> <span>=</span> <span>'your/output/dir'</span>

<span>res</span> <span>=</span> <span>model</span>.<span>infer</span>(<span>tokenizer</span>, <span>prompt</span><span>=</span><span>prompt</span>, <span>image_file</span><span>=</span><span>image_file</span>, <span>output_path</span> <span>=</span> <span>output_path</span>, <span>base_size</span> <span>=</span> <span>1024</span>, <span>image_size</span> <span>=</span> <span>640</span>, <span>crop_mode</span><span>=</span><span>True</span>, <span>save_results</span> <span>=</span> <span>True</span>, <span>test_compress</span> <span>=</span> <span>True</span>)</pre></div>
<p dir="auto">or you can</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd DeepSeek-OCR-master/DeepSeek-OCR-hf
python run_dpsk_ocr.py"><pre><span>cd</span> DeepSeek-OCR-master/DeepSeek-OCR-hf
python run_dpsk_ocr.py</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Support-Modes</h2><a id="user-content-support-modes" aria-label="Permalink: Support-Modes" href="#support-modes"></a></p>
<p dir="auto">The current open-source model supports the following modes:</p>
<ul dir="auto">
<li>Native resolution:
<ul dir="auto">
<li>Tiny: 512×512 （64 vision tokens）✅</li>
<li>Small: 640×640 （100 vision tokens）✅</li>
<li>Base: 1024×1024 （256 vision tokens）✅</li>
<li>Large: 1280×1280 （400 vision tokens）✅</li>
</ul>
</li>
<li>Dynamic resolution
<ul dir="auto">
<li>Gundam: n×640×640 + 1×1024×1024 ✅</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Prompts examples</h2><a id="user-content-prompts-examples" aria-label="Permalink: Prompts examples" href="#prompts-examples"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# document: <image>\n<|grounding|>Convert the document to markdown.
# other image: <image>\n<|grounding|>OCR this image.
# without layouts: <image>\nFree OCR.
# figures in document: <image>\nParse the figure.
# general: <image>\nDescribe this image in detail.
# rec: <image>\nLocate <|ref|>xxxx<|/ref|> in the image.
# '先天下之忧而忧'"><pre><span># document: &lt;image&gt;\n&lt;|grounding|&gt;Convert the document to markdown.</span>
<span># other image: &lt;image&gt;\n&lt;|grounding|&gt;OCR this image.</span>
<span># without layouts: &lt;image&gt;\nFree OCR.</span>
<span># figures in document: &lt;image&gt;\nParse the figure.</span>
<span># general: &lt;image&gt;\nDescribe this image in detail.</span>
<span># rec: &lt;image&gt;\nLocate &lt;|ref|&gt;xxxx&lt;|/ref|&gt; in the image.</span>
<span># '先天下之忧而忧'</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Visualizations</h2><a id="user-content-visualizations" aria-label="Permalink: Visualizations" href="#visualizations"></a></p>
<markdown-accessiblity-table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgement</h2><a id="user-content-acknowledgement" aria-label="Permalink: Acknowledgement" href="#acknowledgement"></a></p>
<p dir="auto">We would like to thank <a href="https://github.com/Ucas-HaoranWei/Vary/">Vary</a>, <a href="https://github.com/Ucas-HaoranWei/GOT-OCR2.0/">GOT-OCR2.0</a>, <a href="https://github.com/opendatalab/MinerU">MinerU</a>, <a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR</a>, <a href="https://github.com/LingyvKong/OneChart">OneChart</a>, <a href="https://github.com/Ucas-HaoranWei/Slow-Perception">Slow Perception</a> for their valuable models and ideas.</p>
<p dir="auto">We also appreciate the benchmarks: <a href="https://github.com/ucaslcl/Fox">Fox</a>, <a href="https://github.com/opendatalab/OmniDocBench">OminiDocBench</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Citation</h2><a id="user-content-citation" aria-label="Permalink: Citation" href="#citation"></a></p>
<p dir="auto">coming soon！</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Space Elevator (1227 pts)]]></title>
            <link>https://neal.fun/space-elevator/</link>
            <guid>45640226</guid>
            <pubDate>Mon, 20 Oct 2025 04:42:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://neal.fun/space-elevator/">https://neal.fun/space-elevator/</a>, See on <a href="https://news.ycombinator.com/item?id=45640226">Hacker News</a></p>
Couldn't get https://neal.fun/space-elevator/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Entire Linux Network stack diagram (2024) (502 pts)]]></title>
            <link>https://zenodo.org/records/14179366</link>
            <guid>45639995</guid>
            <pubDate>Mon, 20 Oct 2025 03:33:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://zenodo.org/records/14179366">https://zenodo.org/records/14179366</a>, See on <a href="https://news.ycombinator.com/item?id=45639995">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
          

              

              

              <div id="record-info" aria-label="Publication date and version number">
                    <p><span title="Publication date">
                        Published November 18, 2024
                      </span>
                      <span> | Version v7</span>
                    </p>
                    <p><span role="note" aria-label="Resource type">
                          Poster
                        </span>
                      

                      <span role="note" data-tooltip="The record and files are publicly accessible." data-inverted="" aria-label="Access status">
                        
                          
                        
                        <span aria-label="The record and files are publicly accessible.">
                          Open
                        </span>
                      </span>
                    </p>
                  </div>
              <section id="record-title-section" aria-label="Record title and creators">
  <ul>
    
    <li>
      1.

      

      Ericsson Nikola Tesla
    </li>
  

    </ul>
</section>



  <section id="description" aria-label="Record description">
    <h2 id="description-heading">Description</h2>
    
    <div>
      <p>Diagram of entire Linux Network Stack, including:</p>
<ul>
<li>Virtualization and Linux containers:
<ul>
<li>Emulation and Paravirtualization.</li>
</ul>
</li>
<li>Network sockets.</li>
<li>Network stack:
<ul>
<li>Upper layer of Network stack (TCP, UDP).</li>
<li>Low layer of Network stack with GRO, RPS, RFS and GSO.</li>
</ul>
</li>
<li>Network Scheduler.</li>
<li>NetFilter and traffic controll:
<ul>
<li>Bridge and Bond interfaces.</li>
<li>Tap interface, ...</li>
</ul>
</li>
<li>Device Driver:
<ul>
<li>Queue.</li>
<li>NAPI.</li>
<li>IRQ handler.</li>
</ul>
</li>
<li>Network functions accelerated by NIC:
<ul>
<li>Checksum offload, VLAN, VxLAN, GRE, TSO, LRO,&nbsp;RSS, ...</li>
</ul>
</li>
<li>Network card.</li>
</ul>
<p>All (above) sections (layers) include tips for optimizations and/or statistics.</p>

<p>This diagram is part of the book:&nbsp;</p>
<p><strong>Operativni sustavi i računalne mreže - Linux u primjeni</strong></p>
<p>https://doi.org/10.5281/zenodo.8119310</p>
    </div>
  </section>


<section id="record-files" aria-label="Files"><h2 id="files-heading">Files</h2>
            
  <div href="#files-preview-accordion-panel">
    <h3>
      <p><span id="preview-file-title">Linux Network Stack - EN.pdf</span>
        
      </p>
    </h3>
    
  </div>
  <div href="#files-list-accordion-panel">
    <h3>
      <p>
        Files
        <small> (5.4 MB)</small>
        
      </p>
    </h3>

    
  </div>

    </section>
              

  <section id="additional-details" aria-label="Additional record details">











  <h2 id="record-details-heading">Additional details</h2>

  

  

  

  
    
      
    
    
  

  

  

  

  



  

  </section>
    
    
  
        </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Introduction to reverse-engineering vintage synth firmware (168 pts)]]></title>
            <link>https://ajxs.me/blog/Introduction_to_Reverse-Engineering_Vintage_Synth_Firmware.html</link>
            <guid>45639860</guid>
            <pubDate>Mon, 20 Oct 2025 02:56:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ajxs.me/blog/Introduction_to_Reverse-Engineering_Vintage_Synth_Firmware.html">https://ajxs.me/blog/Introduction_to_Reverse-Engineering_Vintage_Synth_Firmware.html</a>, See on <a href="https://news.ycombinator.com/item?id=45639860">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>
          In this article we're going to take a look at how to reverse-engineer
          vintage synthesiser firmware. The synthesiser I've chosen for us to
          look at is the Yamaha DX7 (<i>See <a href="#why_the_dx7">Appendix: Why Choose This Synth?</a></i>). You don't need a DX7 to follow along at home, but you will need a
          copy of the DX7 V1.8 firmware (available
          <a href="https://dbwbp.com/index.php/9-misc/37-synth-eprom-dumps" target="_blank">here</a>) and the
          <a href="https://ghidra-sre.org/" target="_blank">Ghidra</a>
          disassembler.
        </p>
        <div>
          <p>
            <span>Who is this article for?</span>
            This article's intended audience is people from a technical
            background who are new to reverse-engineering, 8-bit architectures,
            or embedded development. If you come from an electrical-engineering
            or embedded-software background, you'll probably find the content
            here a little basic.
          </p>
          <p>
            You'll only need to know a little bit about low-level programming: A
            basic understanding of how binary and pointers work should be
            enough. You don't need to know assembly language, or understand any
            specific processor architecture.
          </p>
        </div>
        <p>
          A few years ago I decided to give myself a crash course on what goes
          on inside synthesisers. I ended up writing the article
          <a href="https://ajxs.me/blog/Yamaha_DX7_Technical_Analysis.html" target="_blank">Yamaha DX7 Technical Analysis</a>
          about what I'd learned. In order to tease out some more details about
          the DX7's inner-workings, I decided to
          <a href="https://github.com/ajxs/yamaha_dx7_rom_disassembly" target="_blank">disassemble the synth's firmware ROM</a>. I didn't have any experience with reverse-engineering binaries, so
          I had to figure it out as I went. I'm still by no means an expert (<i>if you see any mistakes in this article, please let me know!</i>), but I'd like to share what I've learned.
        </p>
        <p>
          All I had when I started was a copy of the firmware, a copy of the
          service manual, and a <i>can-do</i> attitude. I knew nothing about
          8-bit systems, and <em>absolutely nothing</em> about electronics, but
          I was willing to give anything a shot. If this sounds like you, read
          on, and I hope you find this article helpful!
        </p>

        <div>
          <p>Table of Contents</p>
          <ol>
            <li><a href="#address_decoding">Address Decoding</a></li>
            <li>
              <a href="#memory_map">Decoding the DX7's Memory Map</a>
              <ol>
                <li><a href="#rom_address_decoding">The Firmware ROM</a></li>
                <li><a href="#ram_address_decoding">RAM</a></li>
                <li><a href="#lcd_address_decoding">LCD Screen</a></li>
                <li><a href="#wrapping_up">Wrapping Up</a></li>
              </ol>
            </li>
            <li>
              <a href="#disassembling_the_firmware">Disassembling The Firmware</a>
              <ol>
                <li><a href="#reset_function">The Reset Function</a></li>
                <li><a href="#interrupts">Interrupts</a></li>
                <li><a href="#lcd_interface">LCD Interface</a></li>
              </ol>
            </li>
            <li>
              <a href="#going_further">Going Further</a>
              <ol>
                <li>
                  <a href="#midi_handling_routine">The MIDI Handling Routine</a>
                </li>
                <li>
                  <a href="#interrupts">Debugging the Firmware in an Emulator</a>
                </li>
                <li><a href="#final_words">Final Words</a></li>
              </ol>
            </li>
            <li><a href="#why_the_dx7">Appendix: Why Choose This Synth?</a></li>
            <li><a href="#documentation">Appendix: Documentation</a></li>
          </ol>
        </div>

        <p>
          Reverse-engineering vintage synthesisers is a great introduction to
          embedded systems, and can be a lot of fun. In a lot of ways
          reverse-engineering is a bit like putting together a big jigsaw
          puzzle. Sometimes putting a new piece in place unlocks a lot of new
          progress, and like a jigsaw puzzle, the best place to start is at the
          edges.
        </p>

        <h2 id="address_decoding">
          Address Decoding <a href="#address_decoding">#</a>
        </h2>
        <p>
          The peripheral devices attached to the DX7's CPU, such as its LCD
          screen and sound chips, are <i>memory-mapped</i>. This means that the
          device has been allocated a specific address range in the system's
          memory, and the system communicates with the device by reading and
          writing data from and to these addresses.
        </p>
        <p>
          Before we can start disassembling the firmware ROM, we need to know
          what peripheral device is mapped where. To do that we'll need to look
          at the DX7's <i>address decoding</i> logic. The first place to start
          is with the schematics.
        </p>
        <p>
          The best version of the schematics I've seen is
          <a href="https://yamahamusicians.com/forum/viewtopic.php?p=90769#p90769" target="_blank">this</a>
          version, created by the yamahamusicians.com user <i>Miks</i>. While
          you're at it, grab a copy of the
          <a href="https://homepages.abdn.ac.uk/d.j.benson/pages/dx7/manuals/dx7-9_service_manual_1.pdf" target="_blank">service manual</a>
          too. We won't be referencing it in this article, but it's a good
          resource to have. It explains certain details about the synth's
          architecture that aren't obvious from the schematics.
        </p>
        <p><span>Service Manuals:</span>
          Most consumer devices from the 80s and 90s have
          <i>service manuals</i> available. These are technical documents
          written by the manufacturer to assist in servicing the device. They
          typically include schematics, diagrams, and lists of electrical
          components. The first place to start when reverse-engineering a device
          is looking for its service manual.
        </p>
        <p>
          If you're new to electronics, device schematics can look very
          intimidating, but once you understand the basics they're not actually
          as scary as they look! You can find a good introductory guide to
          schematics
          <a href="https://learn.sparkfun.com/tutorials/how-to-read-a-schematic/all" target="_blank">here</a>.
        </p>

        <h3>Background</h3>
        <p>
          But first, what does <i>address decoding</i> actually mean?
          <a href="https://en.wikipedia.org/wiki/Address_decoder" target="_blank">Address decoding</a>
          refers to <em>how</em> a specific device is mapped to a specific
          address. In this section we'll figure out what peripheral is mapped to
          what address by tracing the address decoding logic in the synth's
          schematics.
        </p>
        <p>
          The total amount of memory addresses that a CPU can access is referred
          to as the CPU's <i>'address space'</i>. This is limited by the
          <i>width</i> of its <i>'address bus'</i>. The CPU's address bus is
          responsible for selecting addresses in attached memory devices, such
          as RAM, or peripheral devices with addressable registers. Each
          <i>line</i> in the address bus represents a single bit, with the total
          number of lines determining the address range the CPU can access. For
          example, a 16-bit address bus can address 2<sup>16</sup> unique memory
          locations, or 64KiB.
        </p>
        <p>
          When a CPU's address lines are exposed externally in the form of pins
          on the chip's package, this is called an <i>external</i> address
          bus<sup><a href="#footnote_1" id="footnote_1_link">1</a></sup>. These lines can be physically connected to external memory devices.
          Together with the CPU's <i>data bus</i>, this allow reading and
          writing binary data back and forth.
        </p>
        <p>
          When the CPU performs an instruction that reads or writes memory, like
          <code>LDB 0x2001</code>, several things happen:
        </p>
        <ul>
          <li>
            The CPU's external address pins are set to high and low
            <a href="https://en.wikipedia.org/wiki/Logic_level" target="_blank">logic levels</a>
            according to the specified address. For address
            <span>0x2001</span>
            (<code>0b0010_0000_0000_0001</code>), address pins 0 and 13 will be
            high, and all the others will be low.
          </li>
          <li>
            The CPU's <code>RW</code> pin will be set high to
            indicate that this is a <i>read</i> operation, and...
          </li>
          <li>
            The CPU will prepare to accept the incoming data at
            <span>0x2001</span> over the data bus into the
            <span>B</span> register.
          </li>
        </ul>

        <p>
          But wait... If the CPU only has one set of address and data bus lines,
          how do you connect multiple memory devices to the CPU? This is where
          the
          <a href="https://en.wikipedia.org/wiki/Chip_select" target="_blank"><i>'Chip Select'</i></a>
          interface comes in: Each device attached to the CPU's data/address
          buses has a 'Chip Select' pin, controlling whether the device responds
          to incoming signals.
        </p>
        <p>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/address_decoding_logic.png" target="_blank">
            <img alt="A schematic showing the address decoding logic of a hypothetical system." src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/address_decoding_logic_thumbnail.jpg">
          </a>
          Consider the above (incredibly simplified) diagram: Two 8KiB
          <a href="https://en.wikipedia.org/wiki/6264" target="_blank">6264</a>
          RAM chips (U3 and U4) are connected to shared address and data buses
          on a Z80 CPU. U3's <code>CE1</code> (Chip Enable)
          pin is connected to the CPU's A13 pin. The bar over the top of the
          label indicates that this pin is <i>'Active Low'</i>, meaning a low
          logic level will 'activate' its function. When the CPU selects an
          address between <span>0x0</span> and
          <span>0x1FFF</span>, the A13 pin will be low,
          activating the U3 chip. U4's <code>CE1</code> pin
          is attached to the CPU's A13 pin via a <code>NOT</code> gate, which
          inverts the signal coming from A13. When an address above
          <span>0x1FFF</span> is selected, A13 will be set
          high, selecting the U4 chip. This effectively maps U3 to the first
          8KiB of the system's memory, and U4 to the next.
        </p>
        <p>
          Can you spot the problem with this example? Since <em>any</em> address
          using A13 will 'select' U4, U4 is now mapped to <em>every</em> 8KiB
          block of memory above <span>0x1FFF</span>. In
          reality, more sophisticated logic is used to map memory devices. Let's
          examine the real world example of the DX7's address decoding
          circuitry.
        </p>

        <p><span>Logic Gates:</span>
          The DX7's <i>address decoding logic</i> is primarily implemented via
          the use of <i>logic gates</i>. If you're not familiar with logic
          gates, a good introduction to the topic can be found
          <a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:computers/xcae6f4a7ff015e7d:logic-gates-and-circuits/a/logic-gates" target="_blank">here</a>. Don't worry though, we're not going to be going too in-depth. A
          basic understanding of what <code>AND</code>, <code>OR</code>, and
          <code>NOT</code> gates do is all you need. One particular type of
          component you'll encounter a lot inside vintage synthesisers are
          <a href="https://en.wikipedia.org/wiki/7400-series_integrated_circuits" target="_blank">7400-series logic chips</a>.
        </p>

        <h2 id="memory_map">
          Decoding the DX7's Memory Map
          <a href="#memory_map">#</a>
        </h2>
        <p>
          Nearly all of the discrete electrical components that make up a DX7
          are commonly available products. They're mass-manufactured and sold by
          a variety of different manufacturers. The best way to understand these
          components is to read the <i>datasheets</i> made available by the
          manufacturer. I'll provide links to these as we go.
        </p>
        <p><span>Note:</span>
          The creator of the DX7 schematics used the <i>logic</i> symbols ·
          and + to denote <code>AND</code> and <code>OR</code> gates, rather
          than the more standard
          <a href="https://www.electrical-symbols.com/electrical-electronics-pdf/Logic_Gates_Symbols.pdf" target="_blank">
            ANSI, or IEC notations </a><sup>[pdf]</sup>. Other gates use the ANSI notation.
        </p>
        <h3 id="rom_address_decoding">
          The Firmware ROM
          <a href="#rom_address_decoding">#</a>
        </h3>
        <p>Let's start by taking a look at the firmware ROM, IC14.</p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/rom.png" target="_blank">
            <img alt="An excerpt from the Yamaha DX7's schematics, with the ROM address mapping logic highlighted" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/rom_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt from the Yamaha DX7's schematics, with the ROM address
            mapping logic highlighted.
          </figcaption>
        </figure>
        <p>
          In the schematic we can see that IC14's
          <code>CE1</code> pin is connected to the CPU's
          <code>A14/A15</code> lines via an <code>AND</code> gate, and a
          <code>NOT</code> gate. What's going on here?
        </p>
        <p>
          The <code>AND</code> gate ensures that the signal is only high when
          <em>both</em> address lines are active, and the <code>NOT</code> gate
          inverts the signal so that it activates the <em>active-low</em>
          <code>CE1</code> pin. If <code>A14</code> and
          <code>A15</code> being active on the CPU 'selects' the ROM chip, that
          means it's mapped to the address range
          <span>0xC000 - 0xFFFF</span><sup><a href="#footnote_2" id="footnote_2_link">2</a></sup>.
        </p>
        <p>
          Awesome! That wasn't so hard. Now we know where the ROM is mapped in
          memory. What's next?
        </p>

        <h3 id="ram_address_decoding">
          RAM <a href="#ram_address_decoding">#</a>
        </h3>
        <p>
          The address decoding logic for the RAM is a little more complicated.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/ram.png" target="_blank">
            <img alt="An excerpt from the Yamaha DX7's schematics, with the RAM address mapping logic highlighted" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/ram_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt from the Yamaha DX7's schematics, with the RAM address
            mapping logic highlighted.
          </figcaption>
        </figure>
        <p>
          The DX7 features three 4KiB
          <a href="https://www.allaboutcircuits.com/electronic-components/datasheet/M5M5118P--Mitsubishi/" target="_blank">5118P</a>
          RAM chips (IC19, 20, 21). These are connected to the CPU's address bus
          via a
          <a href="https://www.ti.com/product/SN74LS138" target="_blank">74LS138 demultiplexer</a>
          (IC23). This
          <a href="https://www.electronics-tutorials.ws/combination/comb_3.html" target="_blank">demultiplexing</a>
          circuit is used to select one of 8 individual output lines based on a
          3-bit input signal. These output lines are labeled as
          <code>Y<sub>0</sub></code> -
          <code>Y<sub>7</sub></code>, and the input lines as <code>D<sub>A</sub></code>, <code>D<sub>B</sub></code>, and <code>D<sub>C</sub></code>. The <code>OR</code> gates used here are wired to the system clock
          output pin. Presumably to ensure the timing of read and write
          operations are valid.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/74ls138_function_table.png" target="_blank">
            <img alt="The function table from the 74LS138P's datasheet" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/74ls138_function_table_thumbnail.jpg">
          </a>
          <figcaption>
            The 'Function Table' from the 74LS138P's datasheet, showing what
            combinations of input lines select which output line.
          </figcaption>
        </figure>
        <p>
          The first RAM chip (IC19)'s chip select terminal is connected to the
          demultiplexer's
          <code>Y<sub>2</sub></code> line. The 'Function
          Table' from the 74LS138P datasheet shows that
          <code>Y<sub>2</sub></code> will be set low when
          input <code>D<sub>B</sub></code> (connected to the CPU's
          <code>A12</code>) is high. Therefore, when the CPU selects address
          <span>0x1000</span>, the first RAM chip will be
          selected.
        </p>
        <p>
          <code>Y<sub>3</sub></code>
          (connected to the second RAM chip, IC20) will be set low when inputs
          <code>D<sub>A</sub></code> and <code>D<sub>B</sub></code> (<code>A11</code>
          and <code>A12</code>) are high, corresponding to an address of
          <span>0x1800</span>. Likewise,
          <code>Y<sub>4</sub></code>
          (connected to IC21) corresponds to an address of
          <span>0x2000</span>.
        </p>
        <p>
          By tracing this address decoding logic, we've successfully mapped the
          synth's RAM to
          <span>0x1000 - 0x2800</span>.
        </p>

        <h3 id="lcd_address_decoding">
          LCD Screen <a href="#lcd_address_decoding">#</a>
        </h3>
        <p>
          The last peripheral we're going to look at right now is the synth's
          LCD screen. When you take your first peek inside a binary you'll be
          staring at an intimidating jumble of machine code. One of the few
          things that will stand out at a glance is ASCII strings. A good way to
          get a quick overview of the binary is finding out how these strings
          are printed to the screen, and where.
        </p>
        <p>
          The best place to start doing that is understanding how the CPU
          interfaces with the LCD controller, and working your way backwards to
          the code responsible for sending string data to it. Once you've found
          <em>how</em> strings are printed to the screen, you can easily see
          <em>what's</em> printed <em>where</em> to get a better understanding
          of the code.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/lcd.png" target="_blank">
            <img alt="An excerpt from the Yamaha DX7's schematics, with the LCD address mapping logic highlighted" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/lcd_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt from the Yamaha DX7's schematics, with the LCD address
            mapping logic highlighted.
          </figcaption>
        </figure>
        <p>
          The LCD address mapping logic might look really complicated, but don't
          worry though. It's just more of the same logic as before.
        </p>
        <p>
          IC23's <code>Y<sub>5</sub></code> pin is connected
          to IC24, another 74LS138 demultiplexer. From the 74LS138 function
          table we know that <code>Y<sub>5</sub></code> goes
          low when inputs A, and C (<code>A11</code> and <code>A13</code>) are
          high. So it looks like IC24 is mapped to
          <span>0x2800</span>.
        </p>
        <p>
          Take a look at IC24: Inputs A, B and C are wired to
          <code>A1</code>, <code>A2</code> and <code>A3</code>. That means that
          IC24 only maps <em>8 bytes</em>.
        </p>
        <p>
          IC24's <code>Y<sub>0</sub></code> and
          <code>Y<sub>1</sub></code> pins are connected to an
          <code>AND</code> gate connected to the 'chip select' pin of IC12.
          What's happening here? This might seem a little confusing at first,
          but since the 74LS138P's outputs are <i>active-low</i>, this makes
          <code>LCDCS</code> active when either
          <code>Y<sub>0</sub></code> or
          <code>Y<sub>1</sub></code> are active. This maps
          IC12 to the four-byte range
          <span>0x2800 - 0x2803</span>. Awesome. But what's
          IC12 doing?
        </p>
        <p>
          IC12 is an
          <a href="https://en.wikipedia.org/wiki/Intel_8255" target="_blank">Intel 8255</a>
          <i>Programmable Peripheral Interface (PPI)</i>. It provides 24
          parallel, bidirectional IO lines<sup><a href="#footnote_3" id="footnote_3_link">3</a></sup>.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/8255_basic_operation.png" target="_blank">
            <img alt="An excerpt from the Intel 8255 datasheet showing its basic operations" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/8255_basic_operation_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt from the Intel 8255 datasheet showing its basic
            operations.
          </figcaption>
        </figure>
        <p>
          The schematics show the LCD's parallel interface (<code>DB0 - DB7</code>) is connected to the PPI's port A (<code>PA0 - PA7</code>), and its
          control pins (<code>E, RW</code> and <code>RS</code>) to the PPI's
          port B (<code>PB0 - PB2</code>).
        </p>
        <p>
          The Hitachi LM016 LCD screen used in the DX7 features the ubiquitous
          <i><a href="https://en.wikipedia.org/wiki/Hitachi_HD44780_LCD_controller" target="_blank">Hitachi HD44780 LCD Controller</a></i>. According to its datasheet (available
          <a href="https://www.sparkfun.com/datasheets/LCD/HD44780.pdf" target="_blank">here</a>) it has two registers. When its <code>RS</code> line (connected to
          the PPI's <code>PB0</code>) is low, the <i>instruction register</i> is
          selected. When high, the <i>data register</i> is selected.
        </p>
        <p>
          Based on the HD44780 datasheet, and the above table from the 8255's
          datasheet, we can tell that the LCD's data register must be mapped to
          <span>0x2800</span>, and its control register to
          <span>0x2801</span>. We'll go into more detail
          about the LCD controller itself later in the article.
        </p>

        <h3 id="wrapping_up">
          Wrapping Up <a href="#wrapping_up">#</a>
        </h3>
        <p>
          Now we've got a pretty good idea of what's going on where in the
          memory map, and how this is discovered. To save you the trouble of
          going through the whole schematic, here are all the memory-mapped
          peripheral addresses.
        </p>
        <table>
          <tbody><tr>
            <th>Address Range</th>
            <th>Peripheral</th>
          </tr>
          <tr>
            <td><span>0x1000 - 0x2800</span></td>
            <td>RAM (External)</td>
          </tr>
          <tr>
            <td><span>0x2800</span></td>
            <td>LCD Data</td>
          </tr>
          <tr>
            <td><span>0x2801</span></td>
            <td>LCD Control</td>
          </tr>
          <tr>
            <td><span>0x2802</span></td>
            <td>Sustain/Portamento Pedals, and LCD Busy Line</td>
          </tr>
          <tr>
            <td><span>0x2803</span></td>
            <td>8255 Peripheral Controller Control Register</td>
          </tr>
          <tr>
            <td><span>0x2804</span></td>
            <td>OPS Mode register</td>
          </tr>
          <tr>
            <td><span>0x2805</span></td>
            <td>OPS Algorithm/Feedback register</td>
          </tr>
          <tr>
            <td><span>0x280A</span></td>
            <td>DAC Volume</td>
          </tr>
          <tr>
            <td><span>0x280E</span></td>
            <td>LED1</td>
          </tr>
          <tr>
            <td><span>0x280F</span></td>
            <td>LED2</td>
          </tr>
          <tr>
            <td><span>0x3000 - 0x4000</span></td>
            <td>EGS</td>
          </tr>
          <tr>
            <td><span>0x4000 - 0x5000</span></td>
            <td>Cartridge Interface</td>
          </tr>
          <tr>
            <td><span>0xC000 - 0xFFFF</span></td>
            <td>ROM</td>
          </tr>
        </tbody></table>

        <p>
          These aren't the only peripherals attached to the system, the Hitachi
          6303 CPU also features 'IO Ports'. These are memory-mapped
          input/output lines with their own dedicated functionality. We'll touch
          on these later in the article.
        </p>

        <h2 id="disassembling_the_firmware">
          Disassembling The Firmware
          <a href="#disassembling_the_firmware">#</a>
        </h2>
        <p>
          Now that we know the memory map, we can start disassembling the
          firmware. To do this we'll use a graphical disassembler called
          <a href="https://ghidra-sre.org/" target="_blank">Ghidra</a><sup><a href="#footnote_4" id="footnote_4_link">4</a></sup>. It's a relatively new player on the scene, but it's free, open
          source, and very powerful. A great resource to keep handy while
          working with Ghidra is the
          <a href="https://ghidra-sre.org/CheatSheet.html" target="_blank">Ghidra Cheat Sheet</a>.
        </p>

        <p><span>Ghidra 6303 Support:</span>
          As of the time of writing, Ghidra doesn't yet support the HD6303
          architecture out of the box, so we'll need to install our own language
          specification.
          <a href="https://github.com/blackjetrock/ghidra-6303" target="_blank">This</a>
          repository contains a Ghidra language specification for the 6303
          architecture. To install it, download the repository and copy the
          <code>6303</code> directory to the
          <code>Ghidra/Processors</code> directory inside your Ghidra
          installation. You'll need to restart Ghidra to see the new processor
          in the list.
        </p>

        <p>
          Once you've installed the language definitions, open Ghidra and create
          a new project.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/new_project.png" target="_blank">
            <img alt="A screenshot of Ghidra showing the 'New Project' dialog" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/new_project_thumbnail.jpg">
          </a>

          The first thing we're going to need to do is to import the firmware
          ROM binary. Select the '6303' language, and click 'OK'.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/set_language.png" target="_blank">
            <img alt="A screenshot of Ghidra showing the 'Select Language' dialog" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/set_language_thumbnail.jpg">
          </a>
        </p>
        <p>
          Next, open up the <i>Codebrowser</i>. This is where all the action
          happens.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/codebrowser.png" target="_blank">
            <img alt="A screenshot of Ghidra showing the 'Codebrowser' button" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/codebrowser_thumbnail.jpg">
          </a>
        </p>
        <p>
          Once the initial disassembly loads, the first thing you'll be looking
          at is row after row of hexadecimal. This is the actual machine code as
          it would appear to the CPU. Don't bother with <i>analyzing</i> the
          file.
        </p>
        <p>
          The first thing we're going to do is set up the memory map. Remember
          that thing we just did all that hard work figuring out? That's going
          to come in handy now. Press the <b>'Display Memory Map'</b> icon in
          the top button bar, to open up the Memory Map dialog.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/display_memory_map.png" target="_blank">
            <img alt="A screenshot of Ghidra showing the 'Display Memory Map' button" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/display_memory_map_thumbnail.jpg">
          </a>

          By default there's only one memory block defined. This block consists
          of the binary we just imported, so go ahead and rename it to
          <i>'ROM'</i>. The next thing we need to do is move this block to the
          correct offset <span>0xC000</span>. Because all of
          the machine code instructions reference memory with absolute
          addresses, if we didn't map the ROM to the correct location none of
          the disassembly would work.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/move_block_button.png" target="_blank">
            <img alt="A screenshot of Ghidra showing the 'Move Memory Block' button" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/move_block_button_thumbnail.jpg">
          </a>

          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/move_block.png" target="_blank">
            <img alt="A screenshot of Ghidra showing the 'Move Memory Block' dialog" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/move_block_thumbnail.jpg">
          </a>
        </p>
        <p>
          Before we finish setting up the memory map, let's take a quick look at
          the code. When the Hitachi 6303 processor in the DX7 powers up, it
          knows where to begin executing code by fetching a pointer from a
          specific location in the <i>interrupt vector table</i>.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/interrupt_vectors.png" target="_blank">
            <img alt="An excerpt table from the 6301/6303 Handbook showing the 6303's interrupt vector table" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/interrupt_vectors_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt table from the 6301/6303 Handbook showing the 6303's
            interrupt vector table.
          </figcaption>
        </figure>
        <p>
          In this case the <i>'Reset vector'</i> is always located at the
          specific memory address <span>0xFFFE</span>, right
          at the end of the address space. Press the
          <span>
            <span>Ctrl</span><span>+</span><span>End</span>
          </span>
          combination on your keyboard to move to the end of the binary, and
          select the offset <span>0xFFFE</span> by clicking
          on it. Press the
          <span><span>P</span></span>
          key on your keyboard to convert the data at this address to a pointer.
          You should see something similar to the image below.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_vector_pointer.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the reset vector pointer" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_vector_pointer_thumbnail.jpg">
          </a>
        </p>
        <p>
          Double-click on this pointer to take you to the associated offset in
          the binary. Now we've found where the actual code is located, but it
          doesn't look like much just yet.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_handler_location.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the reset handler function" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_handler_location_thumbnail.jpg">
          </a>
        </p>
        <p>
          To begin disassembling the machine code into something we can work
          with, click on the label and press the
          <span><span>D</span></span>
          key on your keyboard, or right-click and select
          <i>'Disassemble'</i> in the context menu.
        </p>
        <p><span>The Reset Vector:</span>
          Different processor architectures will have different methods for
          locating the reset handler. Typically a pointer to the reset handler
          will be stored in an <i>interrupt vector table</i> (IVT) at a fixed
          location in memory. On an ARM Cortex-M processor the IVT is located at
          address <span>0x0</span>, and the reset vector at
          <span>0x4</span>. On the
          <a href="https://en.wikipedia.org/wiki/MCS-51" target="_blank">MCS-51</a>
          architecture —another popular 8-bit microcontroller commonly
          seen in synthesisers— the actual reset <em>handler</em> begins
          at <span>0x0</span>.
        </p>
        <p>
          The disassembly process will follow the flow of code through the
          binary, disassembling as it goes. An error will pop up here, but don't
          worry about it for now. This is just the disassembler mistaking a jump
          table for code.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/analyzer_error.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the expected 'analyzer error' message" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/analyzer_error_thumbnail.jpg">
          </a>
        </p>
        <p>
          Once the disassembly completes you should see something like the
          picture below.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_handler_disassembled.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the disassembled reset handler" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_handler_disassembled_thumbnail.jpg">
          </a>
        </p>
        <p>
          Now we're looking at real code! No need to panic though. If you don't
          understand what you're looking at, that's okay. Assembly can look
          pretty intimidating at first, but with a little bit of practice you'll
          get the hang of it!
        </p>
        <p>
          Each of the lines you're seeing here represents a single machine-code
          instruction translated into assembly code. The three letter
          <i>mnemonics</i> are the human-readable representation of the
          instructions.
          <span>LDA</span>
          for example, is the mnemonic for the
          <i>'Load value into register A'</i> instruction.
          <span>STA</span>
          is the mnemonic for the
          <i>'Store value in register A'</i> instruction. If you've never
          encountered assembly language before, that's okay!
          <a href="https://youtu.be/4gwYkEK0gOk?si=ZY9W2wwP2YZEtN7V" target="_blank">This</a>
          video will give a very quick and general introduction to assembly
          language.
        </p>
        <p>
          The HD63B03RP CPU used in the DX7 is a member of the
          <a href="https://www.cpushack.com/tag/6800/" target="_blank">6800</a>
          family of processors. Its instruction set (the full set of assembly
          <i>instructions</i>) is small and easy to understand. A great resource
          for understanding the 6303 CPU and its instruction set is the
          <i><a href="http://www.bitsavers.org/components/hitachi/_dataBooks/1989_U07_HD6301_HD6303_Series_Handbook_1989.pdf" target="_blank">
              HD6301/HD6303 Series Handbook
            </a></i>
          freely available on bitsavers.org.
        </p>
        <p>
          The <span>FUN_c5e5</span> text you're seeing
          here is a <i>label</i>. This is a symbol placed in the disassembler's
          <a href="https://en.wikipedia.org/wiki/Symbol_table" target="_blank">symbol table</a>, which can be referenced elsewhere in the assembly code, usually as
          the target for a branching instruction. Ghidra should already have set
          up the reset vector as a 'function'. Select this label with your
          cursor and press the
          <span><span>F</span></span>
          key on your keyboard to edit the function and give it a more
          meaningful label like
          <span>reset</span>.
        </p>
        <p>
          But what are all these red labels we're seeing, like
          <span>DAT_2575</span>?
          If you try to double click on it, Ghidra offers a helpful error
          message: <i>'Address not found in program memory: 2575'</i>. This is
          because we're missing our memory map! Let's go back to the 'Memory
          Map' dialog, and add the missing blocks.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/adding_ram_memory_map.png" target="_blank">
            <img alt="A screenshot showing adding the RAM memory map block in Ghidra" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/adding_ram_memory_map_thumbnail.jpg">
          </a>
        </p>
        <p>
          Fill in the memory map that we worked out in the last section. The
          completed map should look something like the screenshot below. You can
          choose to consolidate some of these blocks if you like. It's not super
          important how the blocks are divided. What matters is that the blocks
          cover all of the needed peripheral addresses.

          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/memory_map.png" target="_blank">
            <img alt="The completed memory map shown in Ghidra, with all peripheral address space allocated" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/memory_map_thumbnail.jpg">
          </a>

          Note that I added memory blocks for the HD6303 CPU's internal
          registers, and internal RAM.
        </p>
        <p>
          Now is a good time to go and fill in the individual peripheral
          addresses that we know. The
          <a href="http://www.bitsavers.org/components/hitachi/_dataBooks/1989_U07_HD6301_HD6303_Series_Handbook_1989.pdf" target="_blank">HD6301/HD6303 Series Handbook</a>
          provides a list of the HD6303RP's internal registers.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/internal_register_area.png" target="_blank">
            <img alt="An excerpt from the Hitachi HD6301/HD6303 Series Handbook showing the IO port addresses" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/internal_register_area_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt from the Hitachi HD6301/HD6303 Series Handbook showing
            the IO port addresses.
          </figcaption>
        </figure>
        <p>
          Press the
          <span>
            <span>Ctrl</span><span>+</span><span>Home</span>
          </span>
          keys on your keyboard to go to address
          <span>0x0</span>. Press the
          <span><span>B</span></span> key
          on your keyboard to declare that address
          <span>0x0</span> specifies a byte of data. You'll
          see the <code>??</code> change to <code>db</code>, which is the
          assembler <i>directive</i> to define a byte of memory. Press the
          <span><span>L</span></span>
          key on your keyboard to give this address a useful label like
          <span>io_port_1_dir</span>. Go ahead and fill
          in the rest of the peripherals. When you go back to the reset handler
          you'll notice that, even with only a few pieces of the jigsaw puzzle
          in place, things will start to make a lot more sense.
        </p>

        <h3 id="reset_function">
          The Reset Function <a href="#reset_function">#</a>
        </h3>
        <p>
          The main reset handler in the DX7 is responsible for initialising the
          firmware. It sets up the CPU's IO ports, ensures the firmware's
          important variables have valid values, and sets up the CPU's
          <i>timer interrupt</i>. More on this later.
        </p>
        <p><span>Registers:</span>
          The 6303 has three general-purpose
          <a href="https://en.wikipedia.org/wiki/Accumulator_(computing)" target="_blank">accumulator</a>
          registers: <span>A</span>,
          <span>B</span>, and
          <span>D</span>.
          <span>A</span> and
          <span>B</span> are both 8-bits in size, and
          <span>D</span> provides a 16-bit view of both of
          them combined: <code>D == (A &lt;&lt; 8) | B</code>.
        </p>
        <p>
          A great way to visualise the <i>'control flow'</i> of the program is
          in the <i>'Function Graph'</i> view. This view shows a directed graph
          of the program's branching logic. You can open this view by selecting
          <b>Window → Function Graph</b> in the top window menu. You
          should see a view similar to the picture below.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_function_graph.png" target="_blank">
            <img alt="A screenshot of Ghidra's function graph of the reset handler" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/reset_function_graph_thumbnail.jpg">
          </a>
          At offset <span>0xC605</span> you'll see the
          following instructions:
        </p>
        <div>
          <pre><span></span><span>LDA</span><span>   </span><span>#</span><span>0</span><span>xd</span>
<span>CMPA</span><span>  </span><span>DAT_2328</span>
<span>BHI</span><span>   </span><span>LAB_c60f</span>
</pre>
        </div>
        <ol>
          <li>
            The <span>LDA</span> instruction loads
            the <i>immediate</i> value <code>0xD</code> into the
            <span>A</span> register.
          </li>
          <li>
            The <span>CMPA</span> instruction then
            compares the value in the <span>A</span>
            register with the value at the memory address
            <span>DAT_2328</span>.
          </li>
          <li>
            The <span>BHI</span> instruction tells
            the CPU to branch to the label
            <span>LAB_c60f</span>
            if the value in the <span>A</span>
            register is greater than the value at
            <span>DAT_2328</span>.
          </li>
        </ol>
        <p><span>Condition Codes:</span>
          What <em>actually</em> happens when you execute a
          <span>CMPA</span>
          instruction is that the CPU sets a series of fields in the
          <i>'condition code'</i> register based on the result of the
          comparison. These <i>'condition codes'</i> are used by the conditional
          branching instructions to determine whether or not to take the branch.
          In this case, the
          <span>BHI</span> instruction will take
          the branch if the <i>C(arry)</i> and <i>Z(ero)</i>
          condition codes are both clear.
        </p>
        <p>
          You can see in the function graph that if the memory at
          <span>DAT_2328</span>
          is greater than or equal to '13', it will not branch, and the value
          will be cleared. The program will then continue to execute the next
          instruction, which would have been the original branch target. In this
          case, the program is checking to see that the 'pitch bend range'
          variable (stored in memory at location
          <span>0x2328</span>) is within a valid range of
          0-12. If not, it's reset to 0.
        </p>
        <p>
          If you look down at the bottom of the graph, you'll notice something
          interesting: The program goes into an infinite loop. This is the
          firmware's <i>'main loop'</i>.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/main_loop.png" target="_blank">
            <img alt="The firmware's 'main loop'" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/main_loop_thumbnail.jpg">
          </a>
          Tasks that need to be performed continuously happen here. Such as
          updating the UI based on user input, and parsing incoming MIDI
          messages.
        </p>
        <p>
          When certain tasks not only need to be performed <i>continuously</i>,
          but also <i>periodically</i>, there's another way to make this happen:
          <i>interrupts</i>.
        </p>
        <h3 id="interrupts">
          Interrupts <a href="#interrupts">#</a>
        </h3>
        <p>
          <a href="https://en.wikipedia.org/wiki/Interrupt" target="_blank">Interrupts</a>
          are signals sent to the processor by hardware or software to
          <em>interrupt</em> the current code being executed, and handle a
          specific event. They're commonly used in embedded-software to handle
          external, time-critical, or asynchronous events.
        </p>
        <p>
          One of the most common types of interrupt you'll encounter is a
          <a href="https://www.visualmicro.com/page/Timer-Interrupts-Explained.aspx" target="_blank"><i>'timer interrupt'</i></a>. The HD6303's built-in timer interrupt consists of a 16-bit
          <i>'counter'</i> register, which is incremented every clock cycle, and
          a 16-bit <i>'output compare'</i> register. When the value in the
          counter register matches the value in the output compare register, a
          timer interrupt will be raised. This causes the processor to halt what
          it was doing, push the current state of the CPU onto the stack, and
          jump to the appropriate interrupt handler specified in the interrupt
          vector table. In the 6303 a pointer to this handler is located at
          offset <span>0xFFF4</span>. Once the firmware is
          done handling the interrupt, it executes the
          <span>RTI</span> instruction, which
          restores the CPU's state from the stack and continues executing the
          code from where it left off.
        </p>
        <p>
          The timer interrupt handler is where all the synth's
          <i>real-time</i> functionality happens. This is any code that needs to
          be executed in a time-critical manner. The DX7 uses the periodic timer
          interrupt to process portamento and modulation, update the individual
          voice frequencies, and send the updated voice data to the sound chips.
          Feel free to declare the pointer to the timer interrupt handler just
          like we did for the reset handler, disassemble the handler, and take a
          look at what's going on.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/ocf_handler.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the interrupt vector table and the OCF interrupt handler pointer" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/ocf_handler_thumbnail.jpg">
          </a>
        </p>
        <h3 id="lcd_interface">
          LCD Interface <a href="#lcd_interface">#</a>
        </h3>
        <p>
          One of the best places to start reverse-engineering a synth's firmware
          is to understand how it prints things to the LCD screen. We already
          know <em>where</em> the LCD controller is mapped in memory, let's work
          backwards from there and see if we can find that code.
        </p>
        <p>
          Press the
          <span><span>G</span></span> key
          on your keyboard to open the <i>'Go To...'</i> dialog, and go to
          address <span>0x2800</span>.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_registers.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the LCD registers" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_registers_thumbnail.jpg">
          </a>
          These are the two memory-mapped LCD registers. The list of
          <i>cross-references</i> on the right shows us where these addresses
          are referenced in the code. Click on the
          <span>FUN_fdef</span> label to take us to this
          function. This is the function called by the reset handler to
          initialise the LCD screen.
        </p>
        <p>
          Below the function we can see something that looks like ASCII data.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/welcome_message.png" target="_blank">
            <img alt="Screenshot from Ghidra showing ASCII data embedded in the code" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/welcome_message_thumbnail.jpg">
          </a>
          In fact, it looks a lot like the welcome message displayed when you
          boot up the DX7. Hmm. Click on offset
          <span>0xFE31</span>, and press the
          <span><span>'</span></span> key
          on the keyboard twice. Once to convert the data at this offset to
          character data, twice to convert it to a NULL-terminated string.
        </p>
        <p>
          Notice that the welcome message location is referenced in the code at
          offset
          <span>0xFE2B</span>:
        </p>
        <div>
          <pre><span></span><span>JSR</span><span>   </span><span>FUN_fe52</span>
<span>LDX</span><span>   </span><span>#</span><span>0</span><span>xfe31</span>
<span>JMP</span><span>   </span><span>FUN_fea4</span>
</pre>
        </div>
        <p>
          Select the operand <code>#0xFe31</code>, and press
          <span>
            <span>Alt</span><span>+</span><span>Ctrl</span><span>+</span><span>R</span>
          </span>
          on your keyboard to turn this into a
          <i>memory reference</i>. The default label looks a bit strange, so you
          might want to give it a better one like
          <span>str_welcome_message</span>
          by selecting the reference and pressing the
          <span><span>L</span></span> key.
        </p>
        <p>
          We can see here that a pointer to the welcome message string is loaded
          into the <span>X</span> register, and then the
          ROM jumps to the function
          <span>FUN_fea4</span>. Could this function have
          something to do with printing the string? Let's find out.
        </p>
        <p><span>The Index Register (X):</span>
          The Motorola 6800 family of processors has an interesting feature
          called an
          <a href="https://en.wikipedia.org/wiki/Index_register" target="_blank"><i>'index register'</i></a>. The index register (<span>X</span>) can be
          used as a 16-bit base address, to which an 8-bit relative offset can
          be applied. For example, the <code>LDA 4,x</code> instruction will
          load the byte into <span>A</span> that is 4
          bytes from the address stored in <span>X</span>.
          This is useful because it allows us to reference 16-bit addresses with
          only an 8-bit operand.
        </p>
        <p>
          Let's take a walk through <span>FUN_fea4</span>
          together and see if we can figure out what it's doing:
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_print_and_update.png" target="_blank">
            <img alt="Screenshot from Ghidra showing an unknown function that prints the welcome message to the LCD screen" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_print_and_update_thumbnail.jpg">
          </a>
        </p>
        <ol>
          <li>
            First, it pushes the address of the welcome message string in
            <span>X</span> to the stack.
          </li>
          <li>
            Then it loads a memory address (<span>0x261F</span>) into <span>X</span>, and saves that address
            to a pointer in memory.
          </li>
          <li>
            Then it restores the welcome message address from the stack into
            <span>X</span>.
          </li>
        </ol>
        <p>
          Not very helpful yet, unfortunately. Something I find that helps make
          sense of so many unknown labels is to give them names that describe
          how they're used. Double-click on the label
          <span>DAT_00fb</span> to go to its location.
          Since we know this variable stores memory addresses, press the
          <span><span>P</span></span> key
          to convert it to a pointer. Giving it a name like
          <span>unknown_lcd_pointer_00fb</span>
          can help identify it at a glance later.
        </p>
        <p>
          Use the
          <span>
            <span>Alt</span><span>+</span><span>←</span>
          </span>
          keyboard combination to navigate back to where we were before. Once
          you're there, click through to
          <span>FUN_fe8b</span>.

          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_strcpy.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the function located at 0xfe8b" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_strcpy_thumbnail.jpg">
          </a>

          We can see that lots of cross-references to this function have been
          found in the code already. Let's go through this function step by step
          and see what we can figure out:
        </p>
        <ol>
          <li>
            We already know that the
            <span>X</span> register contains a pointer to
            a string. So we can see that this function is loading an ASCII
            character into register <span>B</span> from
            the address stored in <span>X</span>.
          </li>
          <li>
            When the <span>LDB</span> instruction
            loads a new value into <span>B</span> it sets
            the <i>condition codes</i> according to its value. If the
            most-significant bit of this byte is 1, the
            <i>N(egative)</i> condition code will be set. This will cause the
            <span>BMI</span> (<i><b>B</b>ranch If <b>MI</b>nus</i>) instruction to branch. Valid
            <a href="https://www.asciitable.com/" target="_blank">ASCII</a>
            values fall within the range 0-127, so this code looks like it's
            checking for an invalid character, and will branch to the exit if
            this is the case.<br>
            <b>Note:</b> Different instructions treat integer values as either
            signed, or unsigned, with the most-significant bit treated as the
            <a href="https://en.wikipedia.org/wiki/Sign_bit" target="_blank">sign bit</a>.
          </li>
          <li>
            The value in <span>B</span> is then compared
            against <code>0x20</code> (ASCII space). As I mentioned earlier, the
            <span>CMP</span> instruction sets
            condition codes according to the value in the associated
            accumulator, and the operand. The
            <span>BCC</span> instruction (<i><b>B</b>ranch If <b>C</b>arry <b>C</b>lear</i>) will branch if the <i>C(arry)</i> condition code is
            <em>clear</em>. This means that the value in
            <span>B</span> must be <code>0x20</code> or
            above, otherwise the function exits.<br>

            You can read more about how the carry flag is used in computer
            arithmetic on
            <a href="https://en.wikipedia.org/wiki/Carry_flag" target="_blank">Wikipedia</a>.
          </li>
          <li>
            If the ASCII char is valid, it calls
            <span>BSR</span> to branch to the
            subroutine <span>FUN_fe9a</span>. In this
            subroutine we can immediately see something interesting: Remember
            that pointer we labeled earlier? This subroutine writes the ASCII
            character in <span>B</span>
            to the location in this pointer, increments the pointer, and saves
            it...
          </li>
          <li>
            After this, the address in <span>X</span> is
            incremented, and the function loops back to the start. Now the
            function repeats, with <span>X</span> pointing
            to the <em>next</em> character in the string.
          </li>
        </ol>
        <p>
          Are you thinking what I'm thinking? This is a
          <em>String Copy</em> function! It copies characters from a string into
          a buffer, until either a NULL-terminator, or other unprintable ASCII
          character is encountered.
        </p>
        <p>
          Go ahead and give this function a label like
          <span>lcd_strcpy</span>. If you like, you can
          apply local labels to <span>LAB_fe94</span>,
          and <span>LAB_fe99</span> like
          <span>.copy_character</span> and
          <span>.exit</span>. Maybe give that buffer
          address we saw earlier (<span>0x261F</span>) a
          temporary label too.
        </p>
        <p><span>Subroutines:</span>
          You might have noticed the instructions
          <span>BSR</span>
          (<i>'<b>B</b>ranch to <b>S</b>ub<b>R</b>outine'</i>), or
          <span>JSR</span> (<i>'<b>J</b>ump to <b>S</b>ub<b>R</b>outine'</i>). These instructions are used to call <i>subroutines</i>. When a
          subroutine is <i>called</i>, the address of the next instruction is
          pushed onto the stack, and the
          <a href="https://en.wikipedia.org/wiki/Program_counter" target="_blank"><i>'program counter'</i></a>
          jumps to the address of the subroutine. When the subroutine calls the
          <span>RTS</span> instruction to
          <i>return</i> to its caller, this address is popped from the stack
          into the <span>PC</span> (Program Counter)
          register, and the program continues from where it left off. Just like
          a function call in a higher-level language.
        </p>
        <p>
          This is where we're at so far:
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_function_partially_annotated.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the function located at 0xfea4 partially annotated" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_function_partially_annotated_thumbnail.jpg">
          </a>
        </p>
        <p>
          Let's move on to that last function
          <span>FUN_fe52</span> and see where that leads
          us. This function is a bit more complicated. Using the
          <i>Function Graph</i> window I showed you before might help visualise
          what's going on.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_update.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the function graph of the function located at 0xfe52" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_update_thumbnail.jpg">
          </a>
          Let's go through this function step-by-step like we did before:
        </p>
        <ol>
          <li>
            A new location in memory (<span>0x263F</span>)
            is being saved to that pointer we saw before, and the LCD buffer
            address we saw earlier (<span>0x261F</span>) is
            being saved to a new pointer. There's something interesting about
            those addresses. They're 32 bytes apart. That seems a bit
            conspicuous, doesn't it? Maybe this corresponds to the length of the
            LCD screen (2 lines of 16 characters)?
          </li>
          <li>
            A constant value is loaded into
            <span>B</span>.
          </li>
          <li>
            Inside the loop, we can see that
            <span>B</span> is saved to the stack. A byte
            is then loaded into <span>A</span> from the
            location in the pointer at <span>0xF9</span>. We
            know from seeing the welcome message string loaded into
            <span>X</span>
            that this byte is ASCII string data. The pointer is then incremented
            and saved.
          </li>
          <li>
            This byte is then compared against the byte pointed to by
            <span>unknown_lcd_pointer_00fb</span>.
          </li>
          <li>
            If the character in
            <span>unknown_lcd_pointer_00f9</span> and
            <span>unknown_lcd_pointer_00fb</span>
            <em>aren't</em> equal, then this character is used as an argument
            for a function call to <span>FUN_fec7</span>.
          </li>
        </ol>
        <p>
          The function at <span>FUN_fec7</span> is a bit
          more complicated, so I'll walk you through what's happening.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_write_instruction.png" target="_blank">
            <img alt="The firmware's 'main loop'" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_write_instruction_thumbnail.jpg">
          </a>
        </p>

        <ol>
          <li>
            The constant <code>0x89</code> is written to the 8255 PPI control
            register at <span>0x2803</span>. The PPI
            datasheet refers to this as <i>'Control Word #5'</i>. This sets the
            PPI's Port A, and B to outputs, allowing the CPU to send data to the
            LCD controller.
          </li>
          <li>
            A value of zero is written to the LCD control register. This sets
            the <code>RS</code> line low to select the
            <i>Instruction Register</i>, and the <code>RW</code> line low to
            select a <i>Write</i> operation.
          </li>
          <li>
            The <code>E</code> line of the LCD is then driven high to instruct
            it to be ready to receive data over the data bus.
          </li>
          <li>
            The byte in <span>A</span> is then written to
            the LCD instruction register. After this, the <code>E</code> line is
            driven low, and the <code>RW</code> line is driven high to signal
            the end of the data transfer.
          </li>
          <li>
            The 8255 <i>'Control Word #13'</i> is written to the PPI control
            register to revert port A and C to being inputs.
          </li>
          <li>
            Finally, it branches unconditionally to
            <span>FUN_ff08</span>.
          </li>
        </ol>

        <p><span>Note about unconditional branches:</span>
          Sometimes, rather than returning with an
          <span>RTS</span> instruction, a
          subroutine will just unconditionally branch to the next subroutine. As
          long as the stack is managed correctly, this is perfectly valid. The
          second subroutine's ending
          <span>RTS</span>
          instruction will just pop the original return value from the stack and
          return to the original caller. This technique saves a few bytes of
          code.
        </p>

        <p>
          Let's check out the subroutine at
          <span>FUN_ff08</span> that our function jumps
          to.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_wait_ready.png" target="_blank">
            <img alt="A screenshot from Ghidra showing the subroutine at 0xFF08." src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_wait_ready_thumbnail.jpg">
          </a>
        </p>
        <ol>
          <li>
            The <code>E</code> and <code>RW</code> lines of the LCD controller
            are set high. This sets the LCD controller to read mode.
          </li>
          <li>
            The PPI's port C is read into the
            <span>A</span> register, then the
            <code>E</code> line of the LCD controller is set low to indicate the
            read operation is complete.
          </li>
          <li>
            A bitwise <code>AND</code> is performed between value of the
            <span>A</span> register and
            <code>0b1000_0000</code>. This checks the status of the
            <code>PC7</code> line. If the <code>PC7</code> line is high, the
            function loops back to the start.
          </li>
        </ol>
        <p>
          It's easy to miss, but if you look closely in the schematics you'll
          see that the PPI's <code>PC7</code> line is connected to
          <code>PA7</code>, which is connected to the LCD controller's DB7 pin.
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/lcd_busy_line.png" target="_blank">
            <img alt="An excerpt from the Yamaha DX7's schematics showing the PPI's connection to the LCD controller's 'Busy Flag' line" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/schematics/lcd_busy_line_thumbnail.jpg">
          </a>
          The DB7 pin serves as the LCD controller's <i>'Busy Flag'</i>. This
          flag indicates whether the LCD controller is busy processing data.
          When it's clear, the LCD controller is ready to accept new data.
        </p>
        <p>
          It looks like the purpose of this function is to poll the LCD
          controller, waiting for it to be ready to accept new data. Awesome!
          Let's give it a label like
          <span>lcd_wait_ready</span>. Okay! So putting
          it all together, the function at
          <span>0xFEC7</span> writes an
          <em>instruction</em> to the LCD controller, and then waits for it to
          be ready to receive data again. Go ahead and give it a name like
          <span>lcd_write_instruction</span>.
        </p>
        <p>
          Reverse-engineering often involves going down a rabbit hole. Sometimes
          you need to fill in a few different pieces of the puzzle before you
          can start to see the whole picture. Let's return to the function at
          <span>FUN_fe52</span> and see what happens
          next.
        </p>
        <p>
          We now know the loop is writing an instruction to the LCD controller,
          but what did this instruction do? The original instruction value when
          the function started was <code>0x80</code>, and it's incremented by
          one with each iteration of the loop. The HD44780 datasheet tells us
          that <code>0x80</code> is the instruction to set the DDRAM (Display
          Data RAM) address in the LCD controller. This is the address in the
          LCD's memory where the next character will be written. A value of
          <code>0x80</code> indicates the start of the screen's first line.
        </p>
        <p>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_write_data.png" target="_blank">
            <img alt="The firmware's 'main loop'" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_write_data_thumbnail.jpg">
          </a>
          The next function call (<span>FUN_fee7</span>)
          looks almost identical to our
          <span>lcd_write_instruction</span> function.
          The only difference is that it writes to the LCD controller's
          <em>data</em> register, rather than the instruction register. This
          must be where the actual character data is written! You can give this
          function a label like
          <span>lcd_write_data</span>. Note that this
          function <i>'falls-through'</i> to the LCD controller polling function
          we saw earlier.
        </p>
        <p>
          Now we know what's going on here. This is our LCD printing function!
          Notice that after writing the character data to the LCD, at offset
          <span>0xFE77</span> the function writes it to the
          buffer at <span>0x263F</span>? The incoming
          characters are compared against the contents of this buffer to see if
          they're identical, if they are then it skips printing the character.
          Maybe these buffers represent the <i>'next'</i>, and
          <i>'current'</i> contents of the LCD screen?
        </p>
        <p>
          After writing the LCD character data, the function then checks whether
          the LCD instruction byte is equal to <code>0xD0</code>. Now we know
          that this is checking whether the LCD DDRAM position is at the end of
          the second line. If not, it checks whether we're at the end of the
          first line (<code>0x90</code>). If so, the instruction byte is set to
          <code>0xC0</code>, which sets the DDRAM address to the start of the
          second line.
        </p>
        <p><span>Note about HD44780 DDRAM addresses:</span>
          Each 'line' in the HD44780 LCD controller actually has a length of 64
          characters, even if the screen is only 16 characters wide. As a
          result, <code>0xC0</code> (<code>0x80 + 0x40</code>) is the correct
          DDRAM address for the start of the second line.
        </p>
        <p>
          Awesome! Now we've discovered the LCD printing function! Go ahead and
          give it a name like <span>lcd_print</span>.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_print.png" target="_blank">
            <img alt="The firmware's 'main loop'" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/disassembly/lcd_print_thumbnail.jpg">
          </a>
          <figcaption>
            The completed <code>lcd_print</code> function. Note that I went
            ahead and labelled all of the important variables.
          </figcaption>
        </figure>
        <p>
          If you've followed along, give yourself a huge pat on the back. This
          was no easy feat! You've now got a pretty good understanding of how
          vintage synth binaries are reverse-engineered. Everything else
          involved in disassembling a synth's firmware is just a matter of
          applying these same ideas.
        </p>

        <p><span>Bonus:</span>
          The HD44780 LCD controller has been a staple in consumer devices for
          <em>decades</em><sup><a href="#footnote_5" id="footnote_5_link">5</a></sup>. LCD controllers compatible with the HD44780 instruction set are
          still being manufactured, and are commonly used in commercial, and
          hobby projects alike. Because of this, lots of tutorial material is
          available online, and the knowledge gained in working with it is
          applicable elsewhere.
        </p>

        <h2 id="going_further">
          Going Further <a href="#going_further">#</a>
        </h2>

        <h3 id="midi_handling_routine">
          The MIDI Handling Routine
          <a href="#midi_handling_routine">#</a>
        </h3>
        <p>
          After disassembling the LCD printing function, the next best way to
          figure out what's going on inside a synth ROM is to disassemble the
          function that parses incoming MIDI data. This function is an entry
          point to nearly every aspect of a synth's functionality. Disassembling
          it will allow you to trace the path of a particular MIDI message to
          its associated functionality. You can trace <i>'NOTE ON'</i> and
          <i>'NOTE OFF'</i> messages to find the code that handles starting and
          stopping individual voices; Or you can trace
          <i>'CONTROL CHANGE'</i> messages to find the code that handles pitch
          bend or modulation.
        </p>
        <p>
          I decided not to tackle this function in this article, as the DX7's
          MIDI parsing code is huge, and requires a lot of explanation. Parsing
          MIDI messages is always implemented via a straightforward state
          machine, and the code is nearly identical across different synths.
          Once you've seen how it works in one synth, you've seen how it works
          in nearly all of them.
        </p>

        <h3 id="debugging_the_firmware">
          Debugging the Firmware in an Emulator
          <a href="#debugging_the_firmware">#</a>
        </h3>
        <p>
          One of the best ways to understand what's going on inside a synth's
          firmware is to run it in an emulator. The
          <a href="https://www.mamedev.org/" target="_blank">MAME</a>
          emulation framework is freely available, and already supports a wide
          variety of vintage synths. It features a built-in disassembler, and a
          debugger that can be used to step through the firmware instruction by
          instruction to see what's happening in detail. When I was working on
          my
          <a href="https://github.com/ajxs/yamaha_dx97" target="_blank">Yamaha DX9/7</a>
          project, I used MAME as a testing and development platform for the
          firmware.
        </p>

        <h3 id="final_words">
          Final Words <a href="#final_words">#</a>
        </h3>
        <p>
          The DX7, and its 8-bit CPU might be a bit primitive by today's
          standards, but the same principles apply to reverse-engineering modern
          devices. Instructions sets and
          <a href="https://en.wikipedia.org/wiki/Calling_convention" target="_blank">calling-conventions</a>
          might change, but whether it's a vintage 8-bit architecture like the
          6800, or a cutting-edge 32-bit ARM system, the principles of how to
          disassemble device firmware remain the same.
        </p>
        <p>
          If you have any questions about this article, please get in touch! If
          you have any corrections or suggestions, I'd love to hear from you.
          Thank you for reading!
        </p>

        <h2 id="why_the_dx7">
          Appendix: Why Choose This Synth?
          <a href="#why_the_dx7">#</a>
        </h2>
        <h3>It Can Be Disassembled With Free Software</h3>
        <p>
          6303 binaries can be disassembled by using free and open source tools,
          such as <a href="https://ghidra-sre.org/" target="_blank">Ghidra</a>,
          <a href="https://github.com/Arakula/f9dasm" target="_blank">F9DASM</a>, and MAME's
          <a href="https://www.mameworld.info/easyemu/mameguide/tools/unidasm.html" target="_blank">Universal Disassembler</a>.
        </p>

        <h3>It's Well Documented</h3>
        <p>
          40 years on, the DX7 continues to captivate people's imaginations. As
          a result, lots is known about what goes on inside a DX7. Yamaha's
          service manuals are comprehensive, and freely available online.
        </p>
        <p>
          Yamaha even released internal documentation on the DX7's architecture
          and sound chips, which is now
          <a href="https://ajxs.me/blog/Yamaha_DX7_Official_Technical_Analysis.html" target="_blank">available online</a>.
        </p>

        <h3>Only One ROM</h3>
        <p>
          One advantage of reverse-engineering the DX7 is that there's only one
          ROM you need worry about.
          <em>Technically</em> there's also the sub-CPU and its mask ROM, but in
          this case you don't <em>really</em> need to worry what's going on
          there.
        </p>
        <p>
          Some synths have important part of the firmware stored on the CPU's
          mask ROM, such as the Casio CZ-101. Other synths spread the synth's
          core functionality across multiple CPUs, each with their own ROMs,
          such as the Roland JX-8P. The DX7 is much simpler, having (nearly) all
          of its code in one place.
        </p>

        <h3>It Has an LCD Screen</h3>
        <p>
          Disassembling code for a system with a text-based user interface has a
          lot of advantages. I considered some of the early DCO-based Roland
          polysynths as candidates for this article, but without an LCD screen
          it's much harder to make headway into a ROM.
        </p>

        <h3>No Bank Switching</h3>
        <p>
          Unfortunately the various disassembler tools available don't handle
          <a href="https://en.wikipedia.org/wiki/Bank_switching" target="_blank"><i>bank switching</i></a>
          very well. In Ghidra you can use 'Overlay' memory blocks to set up the
          different banks, however it's still not very intuitive in my
          experience.
        </p>
        <p>
          I considered the Ensoniq ESQ-1 as a candidate for this article. It
          features a Motorola MC6809 processor, which is very well supported by
          lots of different debuggers. However it uses bank switching, which
          makes it a bit of a nuisance to disassemble.
        </p>

        <h4>What Is Bank Switching?</h4>
        <p>
          What happens if you need to squeeze 64KiB of firmware ROM, and 32KiB
          of RAM into your HD6303 chip's 16-bit address space? One solution to
          this problem is <i>bank switching</i>. Many vintage synths use
          bank-switching to fit their firmware into the CPU's address space.
        </p>
        <p>
          Bank switching breaks a memory device's address space up into multiple
          <i>'banks'</i>
          by latching one or more of its address lines to one of the CPU's I/O
          port lines. This allows the CPU to select which 'bank' is active by
          toggling the aforementioned I/O line in the software.
        </p>
        <figure>
          <a href="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/tx81z_schematics_excerpt.png" target="_blank">
            <img alt="Yamaha TX81Z schematics excerpt showing CPU, ROM, and RAM" src="https://ajxs.me/static/articles/reverse_engineering_vintage_synths/tx81z_schematics_excerpt_thumbnail.jpg">
          </a>
          <figcaption>
            An excerpt from the Yamaha TX81Z's schematics, showing the CPU, ROM,
            and RAM wiring.
          </figcaption>
        </figure>
        <p>
          The Yamaha TX81Z features a 64KiB 27C512 EPROM chip, mapped into the
          CPU's address space at
          <span>0x8000 - 0xFFFF</span>. The EPROM's A0-A14
          pins are wired to the CPU's A0-A14, and the EPROM's
          <code>CE1</code> pin is latched to the CPU's A15
          pin. The EPROM's A15 pin is wired to the CPU's I/O port 6 (pin
          <code>P63</code> in the schematics). If the <code>P63</code> I/O line
          is pulled <em>high</em>, the upper half of the EPROM's memory is
          selected, mapping addresses
          <span>0x8000 - 0xFFFF</span> into the CPU's
          address space. If it's pulled <em>low</em>, the EPROM's
          <span>0x0000 to 0x7FFF</span> memory is mapped to
          <span>0x8000 - 0xFFFF</span>.
        </p>
        <p>
          To allow branching from code in one bank to code in another, a common
          technique is to use a
          <i><a href="https://en.wikipedia.org/wiki/Trampoline_(computing)" target="_blank">'trampoline function'</a></i>
          located at the same address in both banks.
        </p>

        <h2 id="documentation">
          Appendix: Documentation
          <a href="#documentation">#</a>
        </h2>
        <p>
          Below is a list of all the important documentation referenced in the
          article.
        </p>
        <ul>
          <li>
            <a href="https://yamahamusicians.com/forum/viewtopic.php?p=90769#p90769" target="_blank">
              DX7 Schematic
            </a>
          </li>
          <li>
            <a href="https://homepages.abdn.ac.uk/d.j.benson/pages/dx7/manuals/dx7-9_service_manual_1.pdf" target="_blank">
              DX7 Service Manual
            </a>
          </li>
          <li>
            <a href="https://www.alldatasheet.com/datasheet-pdf/pdf/63667/HITACHI/HD6303R.html" target="_blank">
              Hitachi HD6303R Datasheet
            </a>
          </li>
          <li>
            <a href="http://www.bitsavers.org/components/hitachi/_dataBooks/1989_U07_HD6301_HD6303_Series_Handbook_1989.pdf" target="_blank">
              HD6301/HD6303 Series Handbook
            </a>
          </li>
          <li>
            <a href="https://www.sparkfun.com/datasheets/LCD/HD44780.pdf" target="_blank">
              Hitachi HD44780 Datasheet
            </a>
          </li>
          <li>
            <a href="https://www.alldatasheet.com/datasheet-pdf/pdf/66100/INTEL/8255A.html" target="_blank">
              Intel 8255 Datasheet
            </a>
          </li>
          <li>
            <a href="https://www.ti.com/product/SN74LS138#tech-docs" target="_blank">
              74LS138 Datasheet
            </a>
          </li>
        </ul>

        <hr>
        <ol>
          <li id="footnote_1">
            The Hitachi 6303 microcontroller used in the DX7 includes both an
            <i>internal</i>, and <i>external</i> memory bus. The first 256
            memory addresses in the 6303 point to the CPU's internal registers
            and on-board RAM. Many modern microcontrollers —such as the
            Atmel AVR, and Microchip PIC series— don't feature external
            address buses. It's more common for modern microcontrollers to
            communicate with peripheral devices over serial buses, using
            protocols such as SPI, or I<sup>2</sup>C.
            <a href="#footnote_1_link">↲</a>
          </li>
          <li id="footnote_2">
            On boot, the
            <a href="https://en.wikipedia.org/wiki/Motorola_6800" target="_blank">6800</a>
            CPU family fetches the <i>reset vector</i> from the fixed address of
            <span>0xFFFE</span>. Knowing this, we could have
            just made an educated guess that the whole ROM was mapped to the
            high addresses. Still, it's always good to check your assumptions!
            <a href="#footnote_2_link">↲</a>
          </li>
          <li id="footnote_3">
            If you're curious about why the 8255 PPI chip is used here, it's
            most likely because the LCD controller, cartridge, and
            portamento/sustain pedal interface don't feature a chip select
            interface.
            <a href="#footnote_3_link">↲</a>
          </li>
          <li id="footnote_4">
            There are a variety of disassemblers available for the HD6303
            architecture. The state-of-the-art graphical disassembler is
            arguably
            <a href="https://hex-rays.com/IDA-pro/" target="_blank">IDA Pro</a>,
            but it's closed source, and prohibitively expensive for hobbyists.
            Non-graphical disassemblers also exist, such as
            <a href="https://github.com/Arakula/f9dasm" target="_blank">F9DASM</a>. If you're new to reverse-engineering, I'd personally recommend
            starting with Ghidra. It's free, open source, and easy to learn.
            <a href="#footnote_4_link">↲</a>
          </li>
          <li id="footnote_5">
            I went down a bit of a rabbit-hole trying to find what year the
            LM016/HD44780 was first manufactured. The earliest reference I can
            find online is a
            <a href="https://archive.org/details/Hitachi-DotMarixLiquidCrystalDisplayControllerandDriverLCD-IIHD44780UsersManualOCR/page/n1/mode/2up" target="_blank">'preliminary' user's manual</a>, dated March 1981. It's a shame that there's so little background
            information available about one of the best-known ICs in history.
            <a href="#footnote_5_link">↲</a>
          </li>
        </ol>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nvidia has produced the first Blackwell wafer on US soil (140 pts)]]></title>
            <link>https://www.xda-developers.com/nvidia-produced-first-blackwell-wafer-us-soil/</link>
            <guid>45639654</guid>
            <pubDate>Mon, 20 Oct 2025 02:12:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.xda-developers.com/nvidia-produced-first-blackwell-wafer-us-soil/">https://www.xda-developers.com/nvidia-produced-first-blackwell-wafer-us-soil/</a>, See on <a href="https://news.ycombinator.com/item?id=45639654">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                        
        
                                        




            <article>

                
    
    
    
    
    
        
            <header>
            
            
            
                                                


    
                            
                        
            
    

    
        
                        
        
        
                        
        
        
        
                
                    
                                        
                                                    
    
                    
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
        
                
                    
                                        
                    
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
        
                
                    
                            
                                                    
                                    
                                                
            
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Image Credit: Nvidia&quot;" data-is-feature-img="true">
        
        <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg?q=49&amp;fit=crop&amp;w=480&amp;h=270&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg?q=49&amp;fit=crop&amp;w=480&amp;h=270&amp;dpr=2">
        <source media="(min-width: 481px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg?q=70&amp;fit=crop&amp;w=1600&amp;h=900&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg?q=70&amp;fit=crop&amp;w=1600&amp;h=900&amp;dpr=1">
        <img width="1600" height="900" alt="The signed wafer" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg?&amp;fit=crop&amp;w=1600&amp;h=900" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2025/10/nvidia-tsmc-us-wafer.jpg?&amp;fit=crop&amp;w=1600&amp;h=900">
        </picture><small>Image Credit: Nvidia</small></figure>

    </div>


                    
                        
    
    
    
        
    

    
                                         </header>

                                        
            

           

                                                    


            <a id="login-button-article-sidebar">
            <p>Sign in to your <span>XDA</span> account</p>
            
        </a>
                

        
            
                                                            
                                            
                
                                
            
            

        
                        
        
                                                                                            
                        
        
                            
        
                                    
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
                                                                        
                                    
        
                                                                
                        
                        
                                    
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
                                                
                        
                        
                                    
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
                                                                                                
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
                                                
                        
                        
                                    
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
                                                
                        
                        
                                    
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
        
                
                    
                                                                                                                                                                                                                                                                        
                        
    
    
    
        
    

    
        
                        
        
        
                        
        
        
                                                
                        
                        
                                    
        
                
                    
                                                                                                                                                                                                                                                                        
                    
    
    
        
                
                    
                                    


		



                                        <!-- No AdsNinja v10 Client! --><!-- No AdsNinja v10 Client! --><!-- No AdsNinja v10 Client! --><!-- No AdsNinja v10 Client! --><div id="article-body" itemprop="articleBody">

<div id="custom_block_0" data-nosnippet="">

                    <h3>Summary</h3>
        
            <div>    <ul>
                    <li>
                                        Nvidia and TSMC produced the first Blackwell chip in the U.S., built at TSMC Arizona.
                        </li>
                    <li>
                                        Administration tariffs spurred onshoring pressure; this move echoes the push to bring manufacturing back.
                        </li>
                    <li>
                                        U.S.-made Blackwell chips could cement America as an AI hardware hub and create local jobs.
                        </li>
            </ul>
</div>
    
        
    </div><!-- No AdsNinja v10 Client! --><p>One of the biggest focuses of President Trump's term is bringing more production onto US turf. People have had differing opinions on whether or not this was a good idea, but Trump himself didn't leave much wiggle room. With tariffs having a huge effect on outsourcing hardware from other countries, the President's message was clear: move production over to the US, or pay up.</p>    <p>Well, it seems that some big tech companies are beginning to warm to the former option. Nvidia has revealed its first Blackwell chip manufactured within the US, and it may signify a shift in how American companies get their products made.</p>    <!-- No AdsNinja v10 Client! --><h2 id="nvidia-shows-off-the-first-ever-blackwell-wafer-that-39-s-quot-made-in-america-quot">
                        Nvidia shows off the first-ever Blackwell wafer that's "made in America"
               </h2>
    
    
    
<p>In a press release on the <a href="https://blogs.nvidia.com/blog/tsmc-blackwell-manufacturing/" rel="noopener noreferrer nofollow" target="_blank">Nvidia news site</a>, the company announces that it teamed up with TSMC to get the first-ever Blackwell wafer produced on US soil. Nvidia's CEO, Jensen Huang, took to the stage to sign the wafer and took some time to reflect on how this breakthrough will change how Nvidia's products are produced:</p>    <blockquote>
                        <p>"This is a historic moment for several reasons. It’s the very first time in recent American history that the single most important chip is being manufactured here in the United States by the most advanced fab, by TSMC, here in the United States. This is the vision of President Trump of reindustrialization — to bring back manufacturing to America, to create jobs, of course, but also, this is the single most vital manufacturing industry and the most important technology industry in the world.”</p>    
            </blockquote><p>Ray Chuang, CEO of TSMC Arizona, also had some nice things to say about the partnership:</p>    <blockquote>
                        <p>“To go from arriving in Arizona to delivering the first U.S.-made NVIDIA Blackwell chip in just a few short years represents the very best of TSMC. This milestone is built on three decades of partnership with NVIDIA — pushing the boundaries of technology together — and on the unwavering dedication of our employees and the local partners who helped to make TSMC Arizona possible.”</p>    
            </blockquote><p>Nvidia goes on to claim that onshoring the production of these chips is "paving the way for sustained American leadership in artificial intelligence." As such, it'll be exciting to see where Nvidia goes from here. If the company can truly make its US-based operations flourish, it may help America become the central hub for all things AI, both in terms of software and hardware. We'll have to wait and see how things shake out from here on. Maybe <a href="https://www.xda-developers.com/amd-mi350x-mi355x-launch/" target="_blank">AMD's claims of beating Blackwell</a> may still come true?</p>    </div>
    
                
        
        

        





                    
                        
    


            
                                
        
        
    

        
    </article>

    
            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Look at how unhinged GPU box art was in the 2000s (217 pts)]]></title>
            <link>https://www.xda-developers.com/absolutely-unhinged-gpu-box-art-from-the-early-2000s/</link>
            <guid>45639498</guid>
            <pubDate>Mon, 20 Oct 2025 01:32:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.xda-developers.com/absolutely-unhinged-gpu-box-art-from-the-early-2000s/">https://www.xda-developers.com/absolutely-unhinged-gpu-box-art-from-the-early-2000s/</a>, See on <a href="https://news.ycombinator.com/item?id=45639498">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                            <div data-nosnippet="">
                                            <p><a href="https://www.xda-developers.com/author/rich-edmonds/">
                                    <img src="https://static0.xdaimages.com/wordpress%2Fwp-content%2Fauthors%2F637c9bd7972c8-richard-edmonds.jpg?fit=crop&amp;w=90&amp;h=90" alt="4" loading="lazy" decoding="async">
                                </a>
                                                    </p>
                                    </div>
                        
                                            
                                
                                    <p>Richard is the PC Hardware Lead at XDA and has been covering the technology industry for almost two decades. He's been building PCs since young, and when not creating content, you can often find him inside a chassis somewhere. </p>
                                    </div><div id="article-body" itemprop="articleBody">

<div id="custom_block_0" data-nosnippet="">

                    <h3>Summary</h3>
        
            <div>    <ul>
                    <li>
                                        Remember when GPU box art was a wild, drug-infused journey? Now, it's bland and similar-looking, missing the oddities.
                        </li>
                    <li>
                                        Dive into nostalgia with graphics card box art from the late 90s and early 00s - bold, strange, and iconic designs.
                        </li>
                    <li>
                                        Modern GPU boxes lack the excitement of the past, where elves, wizards, and demons graced the covers. Enjoy the journey back.
                        </li>
            </ul>
</div>
    
        
    </div><!-- No AdsNinja v10 Client! --><p>Not only has the <a href="https://www.xda-developers.com/best-graphics-cards/" target="_blank">graphics card</a> come a long way over the past two decades, but so too has GPU box art. In the early 2000s, we saw an avalanche of box art that seemed like whoever designed them was on quite the drug-infused journey — you could say they were unhinged. Typically, the graphics card inside the box wasn't even displayed on the front cover. This was reserved for elves, wizards, druids, mech droids, demons, game characters, and strange oddities.</p>    <p>GPU makers have all abandoned this practice, which is a shame as it provided something different through box art alone. Now, we're drowning in bland boxes and similar-looking graphics cards. Gazing at my passively cooled PowerColor HD6850 from the tail end of the 2000s, I'll take you back to an age when box art meant everything. Full of specification badges, big text, bold imagery, and outright strange designs, here are some of my favorites from the late 90s and early 00s.</p>    <!-- No AdsNinja v10 Client! --><h2 id="hercules-3d-prophet-radeon-9500-pro">
            <span>10 </span>
        <span>
                            Hercules 3D Prophet Radeon 9500 Pro
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Hercules 3D Prophet Radeon 9500 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/hercules-3d-prophet-radeon-9500-pro-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>I heard you liked seeing Joker on the front of your graphics card box. No? Well, tough! Hercules decided to send you into oblivion with the 3D Prophet 9500 Pro, rocking an ATI Radeon GPU. Imagine seeing ten boxes of this GPU at the store, each with this chap endlessly gazing at you.</p>    <!-- No AdsNinja v10 Client! --><h2 id="palit-radeon-x700">
            <span>9 </span>
        <span>
                            Palit Radeon X700
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Palit Radeon X700 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-radeon-x700-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>This Palit Radeon X700 box is iconic, representing precisely what one would expect from this early 2000s era. There's a scantily dressed lady in armor that barely covers her exposed body against attacks, countless specification highlights that mean absolutely nothing to the average buyer, and ATI's classic logo plastered <em>everywhere</em>.</p>    <!-- No AdsNinja v10 Client! --><h2 id="matrox-mystique-220">
            <span>8 </span>
        <span>
                            Matrox Mystique 220
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/#lightbox\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Matrox Mystique 220 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/matrox-mystique-220-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/#lightbox" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>"Take it, Georgie!" Who would have thought Pennywise would go so well on a GPU box? I can overlook the relation between Mystique and the jester, but it's such a strange-looking design for a computer component. I love it!</p>    <!-- No AdsNinja v10 Client! --><h2 id="leadtek-winfast-geforce-a6200td">
            <span>7 </span>
        <span>
                            Leadtek WinFast GeForce A6200TD
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;&quot;">
                                                                                            <picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Leadtek WinFast GeForce A6200TD box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/leadtek-winfast-geforce-a6200td-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture>
            
        </div>

<p>This is likely the most underwhelming box art in this collection, but the WinFast GeForce A6200TD brought your resident grandpa to life. The wizard is gearing up for quite the battle, but who this character is going up against is beyond us ... literally. There's not much in the way of marketing or specification highlights either. It's a simple design that's as whacky as the rest. This was one of the first GPUs I had inside my PC that didn't require parental consent for a daily hour slot.</p>    <!-- No AdsNinja v10 Client! --><h2 id="asus-geforce-256-v6600">
            <span>6 </span>
        <span>
                            Asus GeForce 256 V6600
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Asus GeForce 256 V6600 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/asus-geforce-256-v6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>Little Jimmy begged and begged and begged his parents to buy him a new GPU for the family PC but they kept refusing. That was until the Asus GeForce 256 V6600 came around and the brand needed some marketing. Jimmy entered and managed to win the competition ... now look at him! Okay, that story wasn't true, but the kid seems as excited as box art. He likely picked up a copy of Thief 2 or Heretic 2.</p>    <!-- No AdsNinja v10 Client! --><h2 id="creative-3d-blaster-voodoo2">
            <span>5 </span>
        <span>
                            Creative 3D Blaster Voodoo2
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Creative 3D Blaster Voodoo2 GPU box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/creative-3d-blaster-voodoo2-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>This guy is gazing into your very soul. I'm unsure what Creative aimed for with this graphics card, but the box art has plenty going on. The Voodoo2 was also a pretty good GPU, allowing you to enjoy countless hours in Unreal Tournament. The box art was meant to showcase what you could do with the product inside, but for this GPU, you were being sold the local tribe's voodoo expert with the promise of "magical speed" ... whatever that means.</p>    <!-- No AdsNinja v10 Client! --><h2 id="pny-geforce-6600-gt">
            <span>4 </span>
        <span>
                            PNY GeForce 6600 GT
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/hexus.net\/tech\/reviews\/graphics\/1166-pny-verto-geforce-6600-gt-128mb-agp\/?page=3\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Hexus<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="PNY GeForce 6600 GT box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-geforce-6600-gt-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://hexus.net/tech/reviews/graphics/1166-pny-verto-geforce-6600-gt-128mb-agp/?page=3" rel="noopener noreferrer" target="_blank">Hexus</a></small></figure>
            
        </div>

<p>The PNY GeForce 6600 GT was enclosed inside a box featuring a lovely lady with barely any clothes, angelic wings, and an interesting headpiece. It means very little aside from the Far Cry badge up top. The GeForce 6600 GT was a decent GPU for its time and this would have been the box art you would have been greeted with at the store or on Christmas Day.</p>    <!-- No AdsNinja v10 Client! --><h2 id="pny-geforce-6600-verto">
            <span>3 </span>
        <span>
                            PNY GeForce 6600 Verto
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="PNY Verto GeForce 6600 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/pny-verto-geforce-6600-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>Here's some nightmare fuel for you. PNY created this art for the GeForce 6600 Verto which resembles a Blumhouse horror movie promotion. It's difficult to tell what's happening here, but that's a running theme with 2000s GPU box art. All I know is there was a GeForce 6600 GPU inside that could happily run the best games of the decade.</p>    <!-- No AdsNinja v10 Client! --><h2 id="palit-geforce-gts-250">
            <span>2 </span>
        <span>
                            Palit GeForce GTS 250
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/#lightbox\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Palit GeForce GTS 250 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/palit-gefore-gtx-250-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/#lightbox" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>What's going on with this Palit GPU? I have no idea but there's a giant mech frog in the background with what appears to be a stonks symbol because they always go up. This is FrogMech the Day Trader. Palit used this frog mascot on a few of its box arts, which were pretty tame compared to many other cards at the time.</p>    <!-- No AdsNinja v10 Client! --><h2 id="sapphire-radeon-x550">
            <span>1 </span>
        <span>
                            Sapphire Radeon X550
                    </span>
       </h2>
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                                                        
    
    

    
    <div data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Source: <a href=\&quot;https:\/\/www.reddit.com\/r\/pcmasterrace\/comments\/y7wcd7\/gpu_box_art_in_the_90s_was_utterly_crazy\/\&quot; rel=\&quot;noopener noreferrer\&quot; target=\&quot;_blank\&quot;>Reddit<\/a>&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=800&amp;dpr=1">
        <source media="(max-width: 1023px)" data-srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" srcset="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        <img width="825" height="495" loading="lazy" decoding="async" alt="Sapphire Radeon X550 box art" data-img-url="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1" src="https://static0.xdaimages.com/wordpress/wp-content/uploads/2024/04/sapphire-radeon-x550-gpu-box-art.jpg?q=70&amp;fit=crop&amp;w=825&amp;dpr=1">
        </picture><small>Credit:&nbsp;Source: <a href="https://www.reddit.com/r/pcmasterrace/comments/y7wcd7/gpu_box_art_in_the_90s_was_utterly_crazy/" rel="noopener noreferrer" target="_blank">Reddit</a></small></figure>
            
        </div>

<p>I have no words. Neither did this alien who instead opted to seduce us all with what seems to be some form of TikTok dance "challenge."</p>    <h3 id="modern-gpu-boxes-aren-39-t-as-exciting">
            Modern GPU boxes aren't as exciting
    </h3>


            
    
<p>Even though many of the box arts of old made absolutely no sense, it was exciting to get hold of a box that looked otherworldly. Whether it was a scantily dressed person or some form of demonic presence threatening our very existence, ATI, Nvidia and their partners were able to have some fun. It doesn't matter what's on the box as the graphics card is what you're potentially spending countless hundreds on for the best gaming experience. But it's great to look at how things used to be in the earlier days of PC gaming with 3D graphics.</p>    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Forth: The programming language that writes itself (287 pts)]]></title>
            <link>https://ratfactor.com/forth/the_programming_language_that_writes_itself.html</link>
            <guid>45639250</guid>
            <pubDate>Mon, 20 Oct 2025 00:40:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ratfactor.com/forth/the_programming_language_that_writes_itself.html">https://ratfactor.com/forth/the_programming_language_that_writes_itself.html</a>, See on <a href="https://news.ycombinator.com/item?id=45639250">Hacker News</a></p>
<div id="readability-page-1" class="page">

<div>
    <center>
        
        <h2><i>Charles H. Moore and the pursuit of simplicity.</i></h2>

        <img src="https://ratfactor.com/forth/talkimg/intro_chuck_web.png" alt="drawing of chuck moore with his real head - with a scroll that says The Web Page Edition">
    </center>

    <div>
        <p> <b>Author:</b> <a href="http://ratfactor.com/">Dave Gauer</a><br>
            <b>Created:</b> 2023-02-02 <br>
            <b>Updated:</b> 2024-12-22 <br>

       </p><p><b>Note:</b> This page is my personal journey to discover Forth
            and put it in the context of computing history.
            It is adapted from my
            <a href="https://ratfactor.com/forth/forth_talk_2023.html">slides</a> for a short talk.
            I've done everything in my power to make this page scale up and down
            for various screen sizes. I welcome suggestions and corrections for
            both the content and display of this page. 
            Here's my
            <a href="http://ratfactor.com/contact-me">contact page</a>.
        </p>
    </div>
</div>

<div>
    <h2>The Legend</h2>
    <p>When I was a wee programmer, I would sit around the virtual Usenet campfires listening
       to the tall tales and legends of the elders.
    <img src="https://ratfactor.com/forth/talkimg/usenet_campfires.png" alt="usenet campfires on a desert scene: comp.lang.forth comp.lang.lisp and alt.religion.kibology">
    </p><div>
        <p>In the 1990s, Usenet
        <a href="https://en.wikipedia.org/wiki/Usenet_newsgroup">newsgroups</a>
        (wikipedia.org)
        were where it was <em>at</em>.
        For example, Linus Torvalds's initial announcement of Linux was to
        comp.os.minix in 1991.
        </p><p>
        The <a href="https://en.wikipedia.org/wiki/Comp.*_hierarchy">comp.*</a>
        (wikipedia.org)
        groups and particularly comp.lang.* were great
        places to learn about and discuss programming.
        By the time I got there in the late 90s, Perl was a pretty hot topic,
        especially as it took a dominant role in the early Web as <em>the</em>
        dynamic page and form processing programming language via
        <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">CGI</a>
        (wikipedia.org).
        </p><p>
        There were programming resources on the Web, but nothing like what's
        available now!
        To actually <em>learn to program</em>, I bought books,
        and still do.
        </p><p>
        Usenet was where the community and folklore lived.
        </p><p>
        (The "Easter egg" in this drawing is alt.religion.kibology, which should
        get a chuckle from old timers. The rest of you can look it up.)
    </p></div>
</div>

<div>
    <p>I learned about magical languages with lots of (((((parenthesis))))).
    <img src="https://ratfactor.com/forth/talkimg/ycombo.png" alt="third eye open to the y combinator">
    </p><div>
    <p>Sharp-eyed Lisp-lovers and other mutants will perhaps recognize this thing
    as the Y combinator expressed with lambdas.</p>
    <p>The only time I understood this was when I completed
    the book <i>The Little Schemer</i> by Friedman and Felliesen, which
    walks you through creating it for yourself. It is a magical book and
    I implore you to try it.</p>
    </div>
</div>

<div>
    <p>I listened, wide-eyed, to true tech tales like <i><a href="https://foldoc.org/The+Story+of+Mel">The Story of Mel</a></i> (foldoc.org).
    <img src="https://ratfactor.com/forth/talkimg/mel_rpc_4000.png" alt="Royal McBee RPC-4000 computer drawing">
    </p><div>
        <p>Mel was real and the Royal McBee RPC-4000 was real. Look at that teletype
        (aka "teleprinter"). If typewriters and "Royal" together make a little bell
        in your head go "bing" as your mental carriage hits the end of the page,
        then you're right: Royal McBee was a merger between the
        <a href="https://en.wikipedia.org/wiki/Royal_Typewriter_Company">Royal
            Typewriter Company</a> (wikipedia.org) and McBee, a manufacturer of accounting machines.</p>
        <p>For a while, Royal was owned by the Italian typewriter company, Olivetti,
        who also made some <a href="https://en.wikipedia.org/wiki/Olivetti_computers">really interesting computers</a> (wikipedia.org).</p>
        <p>And then...
    </p></div>
</div>

<p>I heard tell of a programming language so flexible that you could
    <em>change the values of integers</em>.
</p>

<center>
<img src="https://ratfactor.com/forth/talkimg/wizard_chuck.png" alt="chuck moore as an adorable wizard">
</center>

<p>They said that language was called <b>Forth</b> and it was created
       by a mad wizard called <b>Chuck Moore</b> who could write any program in
       a couple screens of code.
</p>

<div>
    <p>Years went by and I wrote a lot of PHP and JavaScript.
    I watched the Web evolve (and sometimes de-evolve).
    </p><p>But I never forgot about the legend of Forth.
</p></div>

<div>
    <p>The blog series
       <a href="https://prog21.dadgum.com/">"programming in the twenty-first century"</a>
       (prog21.dadgum.com)
    by game developer James Hague gave me the final push.
    </p><p>He made Forth a recurring theme and it just sounded so darned interesting.
</p></div>

<p>So I went on an adventure and now that I have returned, I think I have some
    answers.
    <img src="https://ratfactor.com/forth/talkimg/forthwarrior.png" alt="a tired warrior returns from forth mountain">
</p>

<div>
    <p>(Oh, and I <strong>confirmed the legend</strong>. I can make any integer
    equal anything I want.  Stick around 'til the end to see that Forth magic
    trick.)
    </p><center>
    <img src="https://ratfactor.com/forth/talkimg/wizard_chuck.png" alt="chuck moore as an adorable wizard">
    </center>
</div>

<center>
    "Voilà!"
</center>


<div>
	<h2>Forth uses postfix (RPN) notation</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/hp35.png" alt="hp-35 calculator with rpn syntax"></p><p>At first, I thought this was what Forth was all about:
    </p><pre>3 4 +
<i>7</i>
    </pre>
    <div>
        <p>Now begins my quest to understand Forth.
        </p><p>Perhaps you've seen postfix or
        <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation (RPN)</a>
        (wikipedia.org)
        before? The principle is simple: Instead of the usual "infix" notation
        which puts operators between operands (<code>3 + 4</code>), RPN puts
        operators <em>after</em> the operands (<code> 3 4 +</code>).
        </p><p>RPN notation is one of the most <strong>visually obvious</strong>
        aspects of the Forth programming language.  But it turns out, RPN is
        not what Forth is <em>about</em> or the <em>reason</em> Forth exists.
        As we'll see, the situation is reversed.
        </p><p>In fact, as you'll see, my quest is mostly a series of incorrect
        assumptions I made by looking at the language <em>without the context
            of history</em>.
        </p><p>By the way, the <a href="https://en.wikipedia.org/wiki/HP-35">HP-35 calculator</a> (wikipedia.org) pictured here is really interesting.
        In the early 1970s, HP had powerful desktop calculators.
        Actually,
        what they had were really programmable computers, but they still
        <a href="https://en.wikipedia.org/wiki/Hewlett-Packard_9100A">called them calculators</a> (wikipedia.org) for sales reasons.
        But these were big desktop machines that ran off of wall current.
        </p><p>Putting all of that power into a "shirt pocket" calculator was
        an astounding accomplishment at the time.
        Legend has it that the
        size of the HP-35 was based on the dimensions of Bill Hewlett's
        actual shirt pocket.
        HP-35 calculators have been in space. They killed off the slide rule.
        </p><p>HP calculators are famous for using RPN syntax. If it weren't for
        these calculators, I suspect it's likely that RPN syntax would be
        virtually unknown outside of computer science.
        </p><p>RPN is considered to be highly efficient and,
        being somewhat inscrutable to outsiders, highly geeky.
        </p><p>Let's see a better example...
    </p></div>
</div>

<div>
    <p>Noob:
    </p><pre><i>$ bc
bc 1.07.1
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006,
2008, 2012-2017 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'.</i>
(3 * 4) + (5 * 6)
42
    </pre>
</div>

<div>
    <p>Pro:
    </p><pre><i>$ dc</i>
3 4 * 5 6 * + <i>p</i>
42
    </pre>

    <div>
        <p><i>I'm being cheeky here. Users of <code>bc</code>, are hardly
            noobs.  But it is arguably even geekier to use the much
            older <code>dc</code> program.  <code>bc</code> was once just an
            infix expression translator for <code>dc</code> to make it more
            palatable for people who didn't want to use RPN. Thus the gentle
            teasing.</i>
        </p><p>Besides using RPN syntax,
        <a href="https://en.wikipedia.org/wiki/Dc_%28computer_program%29">the dc calculator</a>
        (wikipedia.org) is completely programmable. Oh and it also happens to
        be one of the very first Unix programs and pre-dates the C programming
        language!
        </p><p>Anyway, the <em>point</em> here is that RPN syntax lets you express
        nested expressions without requiring parenthesis to get the order of
        operations the way you want them. This is one of the reasons RPN fans
        (including those HP calculator fans I alluded to) are so enamoured with it.
        </p><p>In this example, we input 3, then 4. <code>*</code> multiplies them.
        Now we have the result (12) available. But first, we input 5 and 6 and
        multiply them with another <code>*</code> to also store that result (30).
        The final <code>+</code> adds both stored results (12 + 30) and
        stores <em>that</em> result (42).
        Unlike an HP calculator, <code>dc</code> doesn't show us any of the
        stored results, including the last one until we "print" it with the
        <code>p</code> command.
        </p><p>As <a href="https://www.gnu.org/fun/jokes/ed-msg.html">it is known about
            "ed, the standard text editor"</a> (gnu.org), <code>dc</code> doesn't
        waste your VALUABLE time (or teletype paper) with output you don't need!
        </p><p>So this relates to Forth how?
    </p></div>
</div>

<div>
    <p>Forth pro:
    </p><pre>3 4 * 5 6 * + .
42
    </pre>

    <div>
        <p>As you can see, someone sitting at a Forth interpreter
        can perform this calculation exactly the same as with the <code>dc</code>
        calculator (or an HP calculator).
        </p><p>Sharp-eyed readers will note that we print the result with a "."
        command rather than "p". But that's the only difference.
        </p><p>So Forth is like an RPN calculator? We input values and then
        operate on them?
        Well, that statement is not <em>wrong</em>
        </p><p>But does that mean we know what Forth is all about now?
        If we know how to enter things in postfix notation, we "get" Forth?
        No! Not even close...
    </p></div>
</div>

<div>
    <p>Forth absolutely uses postfix notation.
    </p><p>But then I learned some more:
</p></div>

<div>
    <h2>Forth is stack-based</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/pushswapdup.png" alt="drawing of three stacks illustrating push swap and dup operations"></p><div>
        <p>The use of a data stack is probably the second most visible thing
        about the Forth programming language.
        </p><p>A stack is a data structure often explained with a "stack of
        plates" analogy. You <b>PUSH</b> a plate on the stack and you <b>POP</b>
        a plate off the stack. The first item you put on the stack is
        the last item out of the stack.
        </p><p>Above, we have an illustration of <b>PUSH</b> and two other common
        stack operations:
        </p><ul>
            <li><b>SWAP</b> slides a plate out (very carefully) from the second
                position and puts it on top.
            </li><li><b>DUP</b> takes the top plate and <b>dup</b>licates it using
                kitchen magic and puts the replica on the top of the stack (in
                this metaphor, I guess an equal amount of matter is removed
                somewhere else in the Universe, but we try not to worry too
                much about that).
        </li></ul>
        <p>As you may have guessed, these four stack words (PUSH, POP,
        SWAP, DUP) also happen to be Forth words.
        </p><p><b>Historical note 1:</b> In the old days, people and computers just
        WENT ABOUT SHOUTING AT EACH OTHER ALL THE TIME IN ALL CAPS BECAUSE
        LOWERCASE LETTERS WERE TOO EXPENSIVE.
        </p><p><b>Historical note 2:</b> When a computer asks, "SHALL WE PLAY A
        GAME?" in all caps, you must answer NO, as we learned in 1983's
        <a href="https://en.wikipedia.org/wiki/WarGames">WarGames</a> (wikipedia.org)
        </p><p>Let's see a stack in action:
    </p></div>

</div>

<div>
    <pre>Op   The Stack
--   ---------
3     3
4     3  4
*     12
5     12 5
6     12 5  6
*     12 30
+     42
.
    </pre>

    <div>
        <p>Let's revisit our math problem from earlier. This is the
        Forth code on the left and the results on "the stack" on the right.
        </p><p>Rather than being concerned with the syntax or notation, we're
        now interested in what these operations are doing with our data
        stack.
        </p><p>As you can see, entering a number puts it on the stack.
        The math operators take two values from the stack, do something
        with them, and put a new value back on the stack.
        </p><p>The '.' (DOT) operator is different since it only takes one
        value (to print it) and does not put anything back on the stack.
        As far as the stack is concerned, it is equivalent to DROP.
        As far as humans are concerned, it has the useful side-effect
        of letting us see the number.
        </p><p>Now let's see something you probably <em>wouldn't</em> find
        on an HP calculator. Something non-numerical...
    </p></div>

</div>

<div>
    <p>This is valid Forth, assuming CAKE, HAVE, and EAT have been defined:
    </p><pre>CAKE DUP HAVE EAT 
    </pre>

    <div>
        <p>Getting the joke here will require knowing
        <a href="https://en.wikipedia.org/wiki/You_can%27t_have_your_cake_and_eat_it">this English idiom</a> (wikipedia.org).
        </p><p>Actually, this isn't <em>just</em> a silly example.
        Forth's use of the stack can lead to a natural, if somewhat
        backward use of nouns and verbs. (Kind of like Yoda's speech habits.
        "Cake you will dup, yes? Have it and eat it you will, hmmm?")
        </p><p>There can, indeed, be some object named CAKE that we have
        placed on the stack (probably a memory reference) which
        can be DUPed, and then HAVEd and EATen.
        </p><p>It's up to the Forth developer to make harmonious
        word choices. It can get far more clever or poetic than my example.
        </p><p>Naming things is great.
        </p><p>But sometimes <em>not</em> naming things is even better.
    </p></div>
</div>

<div>
    <p>The stack frees us from being forced to create explicit names for
    intermediate values.
    </p><p>If I ask you to add these numbers:
    </p><pre>2 6 1 3 7
    </pre>
    <p>Do you feel a need to give a <i>name</i> to each sum pair...or even the running total?

    </p><div>
        <p>(Hopefully your answer is "no" or the rhetorical question doesn't work.)
        </p><p>But it's funny how our <em>programming languages</em> often require us
        to explicitly name intermediate results so that we can refer to them.
        On paper, we would never give these values names - we would just happily
        start working on the list.
        </p><p>Imagine, if you will, a factory assembly line in which
        each person working the line is a hateful fussbudget who refuses to
        work on the part in front of them until you name it. And each time the
        part has been worked on it must be given a new name. Furthermore, they
        refuse to let you re-use a name you've already used.
        </p><p>A lot of imperative languages are like that factory. As your
        values go down the line, you've got to come up with nonsense names
        like <code>result2</code>, or <code>matched_part3</code>.
        </p><p>Does <em>your</em> programming language make you do this?
        </p><p><i>(It's almost as bad as file names used as a versioning
            system: <code>my_doc_new_v5.4(copy)-final2</code>...)</i>
        </p><p>Working without names (also known as <em>implicit</em> or
        <em>tacit</em> or <em>point-free</em> programming) is sometimes a more
        natural and less irritating way to compute.  Getting rid of names can
        also lead to much more concise code. And less code is good code.
        </p><p>Great, so stacks can be a very elegant way to handle expressions.
        </p><p>Have we "cracked" Forth yet? Now we know two things:
        it uses RPN syntax and it is stack-based.
    </p></div>
</div>

<div>
    <p>Well, Forth certainly does use a stack. It is definitely a stack-based
    language.
    </p><p>But then I learned some more...
</p></div>

<div>
    <h2>Concatenative programming</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/computer_cat.png" alt="a confused cat working on an old pc"></p><p>Ah, <i>this</i> must be it because it sounds fancy.

    </p><div>
        <p>On this journey of Forth discovery, you'll inevitably run into
        the term "concatenative programming".
        </p><p>What's that?
        </p><p>An awesome resource for all things concatenative is
        <a href="https://concatenative.org/">The Concatenative Language Wiki</a>
        (concatenative.org).
            It lists many concatenative languages and has a page about Forth,
            of course.
        </p><p>For the term "concatenative programming" itself, the Factor
        programming language website has an excellent page defining the
        term:
        <a href="https://docs.factorcode.org/content/article-tour-concatenative.html">Factor documentation: Concatenative Languages</a>
        (factorcode.org).
        And, of course, there's the Wikipedia entry,
        <a href="https://en.wikipedia.org/wiki/Concatenative_programming_language">Concatenative programming language</a>
        (wikipedia.org).
        </p><p>I understand the explanations on these websites <em>now</em>, but
        it took me a while to get there. Your journey may be shorter or longer.
        Probably shorter.
        </p><p>Let's see if I can stumble through it...
    </p></div>
</div>

<div>
    <p>Contrast with <b>applicative</b> language:
    </p><pre>eat(bake(prove(mix(<b>ingredients</b>))))
    </pre>
    <p><b>Concatenative</b> language:
    </p><pre><b>ingredients</b> mix prove bake eat
    </pre>

    <div>
        <p>An applicative language has you apply a function to a value, which
        returns another value. Using familiar Algol-like (or "C-like", or
        "Java-like", or "JavaScript-like") syntax, arguments are passed to
        functions within a pair of parenthesis. In the above example, the
        parenthesis end up deeply nested as we pass the output of one function
        to another.
        </p><p>Unlike the math examples, where the infix notation looks more
        natural to most of us than the postfix notation, the concatenative
        example of this baking program looks more natural (at least in a
        <i>human language</i> sense) than the <b>inside-out</b> function application
        example, right?
        </p><p><i>(Of course, if you're a programmer used to years of something like C
        or Java or JavaScript, the inside-out parenthetical form will probably
        seem pretty natural too. Well, guess what? Your mind has been
        warped. It's okay, mine has too.)</i>
        </p><p>The point here is that concatenative style has us "composing"
        functions (which you can think of as verbs) simply by putting them
        in sequence. Each function will be called in that sequence.
        The values that are produced at each step are passed along
        to be consumed as needed.
        </p><p>No names (unless we want them), just nouns and verbs.
        </p><p>But that's just the surface. It turns out this "concatenative language"
        concept goes way past that...
    </p></div>
</div>

<p>The canonical example of a concatenative language is Joy.
</p>

<div>
    <h2>Joy</h2>
    <p><b>Manfred von Thun</b> inspired by Backus's 1977 ACM Turing Award lecture:
    <img src="https://ratfactor.com/forth/talkimg/backus.jpg" alt="top of the john backus paper Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs">


    </p><div>
        <p><a href="http://worrydream.com/refs/Backus-CanProgrammingBeLiberated.pdf">Can Programming Be Liberated from the von Neumann Style? (PDF)</a> (worrydream.com)
            This paper is dense with notation and I haven't personally
            attempted to wade through it, <em>yet</em>. I'm sure it contains
            <em>many</em> profound ideas.
        </p><p>I know just enough to believe I understand this paragraph from
        the paper's abstract:
            </p><blockquote>
                "An alternative functional style of programming is
                founded on the use of combining forms for creating
                programs. Functional programs deal with structured
                data, are often nonrepetitive and nonrecursive, are
                hierarchically constructed, do not name their
                arguments, and do not require the complex machinery of
                procedure declarations to become generally applicable.
                Combining forms can use high level programs to build
                still higher level ones in a style not possible in
                conventional languages."
            </blockquote>
        <p>Perhaps you've heard of "functional programming?" As you can
        see, that term was being used in 1977.
        </p><p>"Concatenative programming" came after. In fact,
        <b>Joy</b> is where the "concatenative" description comes from!
        (von Thun specifically credits Billy Tanksley for creating the term
        "concatenative notation".)
    </p></div>
</div>

<div>
    <p><b>Joy</b> is kind of like starting with a Lisp
    </p><p>...without variables
    </p><p>...and without traditional control structures
    </p><p>...and all functions are unary (or an "arity of 1").
    </p><p>Specifically, all functions take one stack as input and return
       one stack as output. The stack is not named, it is implied.
    </p><p>A program is simply a list of functions that is read
       from left to right.

    </p><div>
        <p>I can't describe Joy's genesis better than the man himself.
        Here is von Thun in an interview about Joy:
        </p><blockquote>"Joy then evolved from this in an entirely haphazard way:
            First I restricted the binary relations to unary functions, and
            this of course was a dramatic change. Second, to allow the usual
            arithmetic operations with their two arguments, I needed a place
            from which the arguments were to come and where the result was to
            be put - and the obvious place was a stack with a few shuffling
            combinators, originally the four inspired by Quine. Third, it
            became obvious that all these combinators could be replaced by
            unary functions, with only function composition remaining. Finally
            the very different distinctively Joy combinators emerged, which
            take one or more quoted programs from the stack and execute them in
            a specific way. Along the way of course, lists had already been
            seen as just special cases of quoted programs. This meant that
            programs could be constructed using list operations and then passed
            on to a Joy combinator."</blockquote>
        <p>From <a href="http://www.nsl.com/papers/interview.htm">A Conversation with Manfred von Thun</a> (nsl.com), which is a really great read in its entirety.
        </p><p>As you can see, <b>combinators</b> are crucial in Joy.
        Let's take a moment to dive into those, because this is a pretty
        fascinating avenue of computer science...
    </p></div>
</div>

<div>
    <h2>Combinators</h2>
    <p>Combinators are any "higher-order" functions like <b>map</b>.

    </p><div>
        <p>"Higher-order" just means functions that take <em>other</em>
        functions as input and do things with them.
        </p><p>You can even have functions that take functions that take functions
        and so on to do powerful things. But you'll need to meditate on
        them every time you have to re-read that part of your code.
        </p><p><b>map</b> is one of the more common examples, so I'll use it
        as an example.
    </p></div>

    <p>JavaScript:</p>
    <pre>inc = function(n){ return n + 1; };

bigger = [1, 2, 3, 4].<b>map</b>(inc);

<i>Result: [2,3,4,5]</i>
    </pre>

    <p>JavaScript using an "arrow function":</p>
    <pre>bigger = [1, 2, 3, 4].<b>map</b>(n =&gt; n + 1);

<i>Result: [2,3,4,5]</i>
    </pre>

    <div>
        <p><i>(The second example with the arrow function syntax works exactly
        the same way, but more compactly. I included it to make the comparison
        with Joy a little more even-handed. Feel free to pick a favorite
        and ignore the other one.)</i>
        </p><p>In the first example, we have familiar Algol-like
        syntax with functions that take arguments in parenthesis.
        </p><p>Perhaps
        <code>map()</code> is familiar to you. But if not, just know that 
        it takes two parameters like so: <code>map(array, function)</code>.
        The first parameter is implicit in these JavaScript examples, but it's
        there. The array object, <code>[1, 2, 3, 4]</code> calls its own
        <code>map()</code> method. The second parameter is a function
        (named <code>inc</code> in the first example and left anonymous in
        the second), which will be applied to every member of the list.
        </p><p>
        The output of <code>map()</code> is a <em>new</em> list containing the
        result of each application.
        </p><p>Notice how both JavaScript examples
        have variables such as the parameter <code>n</code> and the result
        <code>bigger</code>. This is an example of what I mentioned a moment
        ago when discussing the advantages of stacks: "Traditional"
        programming languages often make us name values before we can work with
        them.
    </p></div>

    <p>The same thing, but concatenatively in Joy:</p>
    <pre>[1 2 3 4] [1 +] <b>map</b>

<i>Result: [2 3 4 5]</i>
    </pre>

    <div>
       <p>
       The syntax here may require a little explanation.
       The square brackets (<code>[]</code>) are Joy's
       quote mechanism. Quotations are a lot like lists, but they can contain
       <em>programs</em> as well as data.
       </p><p>In this case, the first quotation is the number list,
           <code>[1 2 3 4]</code>.
       </p><p>The second quotation is a program, <code>[1 +]</code>.
       </p><p>As in the JavaScript examples, <code>map</code> takes two parameters.
       The first is the function (or "program" in Joy) to apply, and the second
       is the list to apply it to.
       </p><p>(It's kind of confusing to talk about "first" and "second," though
       because that's the opposite order in which we <em>supply</em> those
       arguments on the stack...)
       </p><p>Note the lack of variables <code>bigger</code> or <code>n</code>.
       Intermediate values just exist.
       </p><p>It looks pretty nice and neat, right?
       </p><p>This "point-free" style can be a blessing...
       or curse. Unlike computers, human brains have a hard time juggling too
       many things on the stack.
       </p><p>There seems to be a happy medium between named and unnamed. Also,
       the point-free style seems to benefit greatly from short (even
       <i>very short</i>) definitions to avoid mental juggling and greater
       composibility.
       </p><p>If you have the slightest interest in <b>Joy</b>, I highly recommend
       reading or skimming this delightful tutorial by Manfred von Thun
       himself:
        <a href="https://hypercubed.github.io/joy/html/j01tut.html">An informal tutorial on Joy</a>
        (hypercubed.github.io).
       </p><p>Note: I had a bit of a time actually running Joy to test out these
       examples. Thankfully, I eventually ran into
       <a href="https://github.com/calroc/joypy">Joypy</a> (github.com),
       a Joy written in Python. My Linux distro comes with Python installed,
       so the whole process for me was:
       </p><pre>git clone https://github.com/calroc/joypy.git
cd joypy
python -m joy
...
joy? [1 2 3] [1 +] map
        </pre>
        <p>Okay, that's a glimpse.
        </p><p>But we've barely touched the conceptual power of combinators with our
        <code>map</code> examples. Let's go a <em>little</em> deeper on
        this fascinating subject:
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/mock_a_mockingbird.jpg" alt="cover of the book"></p><div>
        <p>Here's something from my bookshelf. It's <i>To Mock a Mockingbird</i>
        by mathematician and
        puzzle-maker Raymond Smullyan. It uses puzzles involving birds to solve
        logic problems and classify some well-known combinators.
        </p><p>It would be impossible to write a complete catalog of
        combinators just as it would be impossible to write a complete
        catalog of integers. They're both infinite lists.
        Nevertheless, some well-known combinators have been identified as
        having special properties. In the book above, many of these have
        been given the names of birds.
        </p><p>Remember, combinators are just "higher-order"
        functions that take functions as input.
        Well, it turns out these are
        all you need to perform <em>any</em> computation. They can replace logical
        operators and even variables.
        </p><p>What?!
        </p><p>Yeah, you can re-work any expression into a combinatorial expression
        and completely replace everything, including the variables, with
        combinators.
        </p><p>It's kind of hard to imagine at first. But you can see it happen
        right before your very eyes.
        The mind-blowing tool on this page by Ben Lynn:
        <a href="https://theory.stanford.edu/~blynn/lambda/cl.html">Combinatory Logic</a>
        (stanford.edu)
        takes a term expressed in lambda calculus and replaces <b>everything</b>
        with just two combinators, K and S.
        (We'll talk more about those two in just a moment because they
        are super special.)
        <img src="https://ratfactor.com/forth/talkimg/look_ma_no_variables.png" alt="screenshot from the aforementioned calculator with buttons 'Look ma, no names, no variables, and no variables K-optimized!">
        </p><p><em>(Ben Lynn's whole website is full of neat stuff like this.
            If you're looking to entertain yourself for any amount of time from
            an afternoon to the rest your life, Lynn has you covered.)</em>
        </p><p>So combinators share something in common with lambda calculus and
        Turing machines. These systems provide all of the building blocks
        you need to perform any
        possible computation in the sense of the
        <a href="https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis">Church-Turing thesis</a> (wikipedia.org)
        or "computability thesis". (We've also discovered some problems
        that are <em>not</em> computable and <em>no</em> system can compute
        them like "the halting problem," but these are pretty rare.)
        </p><p>It turns out that <strong>computation is a fundamental feature of
            the Universe</strong>.
        As far as we can tell, any universal system of computation is equally
        capable of solving any computational problem.  And once you realize how
        little is required, you can invent a universal computer yourself!
        </p><p>Electronically speaking, this is the same principle
        that allows a NAND gate to simulate all other gates. NAND gates are
        a fundamental computational building block. You can make an
        entire computer with nothing but NAND gates and that computer can
        (slowly) solve any computable problem you can imagine.
        </p><p>Anyway, when we use combinators, this particular flavor of universal
        computation is called 
        <a href="https://en.wikipedia.org/wiki/Combinatory_logic">combinatory logic</a> (wikipedia.org).
        </p><p>What do the building blocks of combinatory logic look like?
        </p><p>Let's start small:
    </p></div>
</div>

<div>
    <p>Identity
    </p><pre>(I x) = x
    </pre>

    <div>
        <p>The simplest of all combinators is I, the "identity combinator".
        There are a ton of different ways to write this. In lambda calculus,
        it looks like this: <code>I = λx</code>.
        </p><p>The way to read <code>"(I x) = x"</code> is: "<code>I</code> applied
        to some object <code>x</code> results in...<code>x</code>."
        </p><p>We say "object x" rather than "value x" because, being a
        combinator, <code>I</code> could take a function as input as well as a
        value. In fact, "object" is intentionally very abstract, so
        <code>x</code> could contain a scalar value, or
        list, or function, or another combinator, or <em>anything</em>.
        Whatever that object is, <code>I</code> returns it.
    </p></div>
</div>

<div>
    <p><b>K</b> and <b>S</b>
    </p><pre>(K x y) = x

(S x y z) = (x z (y z))
    </pre>

    <div>
        <p>Both of these take more than one parameter of input.
        But if you're used to Algol-like function syntax, the way this
        works may be surprising.
        </p><p>Since it's the simpler of the two, let's use the <code>K</code>
        combinator as an example:
        </p><p>The way to read "<code>(K x y) = x</code>" is:
        "<code>K</code> applied to <code>x</code> <strong>yields
        a combinator</strong>, which, when applied to <code>y</code> always
        evaluates to <code>x</code>."
        </p><p>(Programmers familiar with the concept of <em>currying</em> will see
        that this is like the <em>partial application</em> of a function, where
        a new function is "pre-baked" with the argument <code>x</code>.  The
        term "currying" is named in honor of mathematician
        <a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>
        (wikipedia.org),
        after whom the Haskell programming language is also named.)
        </p><p>The result is that <code>K</code> makes a combinator that
        <strong>throws away</strong> any input and just returns
        <code>x</code>. Weird, right? But it turns out to be useful.
        </p><p><code>K</code> is super easy to write in a language like
        JavaScript, which is also a nice choice because you can play with
        it right in the browser console like I just did:
        </p><pre>K = function(x){
  return function(y){
    return x;
  }
}

K("hello")("bye")

<i>&gt; "hello" </i>
        </pre>
        <p>See how the result of <code>K("hello")</code> is a function that
        returns "hello" no matter what you give it as input?
        </p><p>How about <code>S</code>? I'll leave implementing <em>that</em>
        in JavaScript as an exercise for the reader.
        It's clearly much more complicated since it has three levels of
        "function that yields a combinator" on the left and the <em>result</em>
        is an equally complicated combinator that <em>first</em> applies
        parameter <code>z</code> to combinator <code>y</code>.
        </p><p>(By the way, the <code>y</code> combinator above should not be
        confused with <strong>the</strong> <code>Y</code> combinator.
        Do you remember that arcane lambda calculus artifact projected
        over that head with the third eye way up near the beginning of this
        page?  That thing was the <code>Y</code> combinator! It turns out, it's
        all, like, <em>connected</em>, you know?)
        </p><p>But the real point is this: <code>S</code> and <code>K</code> are
        special for one very interesting reason.
        Together with <code>I</code>, they form the "SKI calculus" and just
        these three combinators are <strong>all you need</strong> to perform
        any computation in the known universe.
        </p><p>Actually, it's even crazier than that. You don't even need
        <code>I</code> because that, too, can be created with <code>S</code>
        and <code>K</code>.
        </p><p>That's right, the <code>S</code> and <code>K</code> definitions
        above are a complete system for universal computation.
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/wolfram_combinators.jpg" alt="cover of the book"></p><div>
        <p>The book shown here is another from my bookshelf. It's
        <i>Combinators: A Centennial View</i> by Stephen Wolfram.
        </p><p>It starts with a (much too) terse introduction to the SKI combinator
        calculus and then launches into page after page of visualizations of S
        and K combinators being fed into each other. Like fractals or automata,
        simple inputs can produce patterns of surprising sophistication.
        </p><p>Wolfram demonstrates combinators that keep producing different
        output for a gazillion iterations and then get stuck in a loop. Some of
        them produce regular patterns for a while and then start producing
        different patterns.  Some just loop forever at the outset.
        As in other universal systems, there is no end to the complexity
        produced by these two simple constructs.  It is infinite.  And all of
        this is just S and K combinators taking combinators as input and
        returning combinators as output.
        </p><p>I think it is wild and fun to see someone play
        with a subject like Wolfram does in this book. Each page is saying,
        "Look at what is possible!"
        </p><p><i>Combinators</i> is also Wolfram's ode to the discoverer of
        combinatory logic,
        <a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel">Moses Schönfinkel</a> (wikipedia.org)
        who, like so many of the giants in the field of computer science,
        did his work on paper decades before the first digital electronic
        computers beeped their first boops.
        </p><p>Figuring out the output of the <code>S</code> combinator once
        was enough to keep me occupied for a while.  It boggles my mind to
        imagine feeding it another <code>S</code> as input on paper,
        let alone discovering these particular combinators in the first place.
        </p><p>Okay, we get it, combinators are a crazy way to compute.
        </p><p>But are they worth using in <em>"real"</em> programs? In limited
        doses, absolutely!
    </p></div>
</div>

<div>
    <p>Combinators let us factor out explicit loops. This:
    </p><pre>foo<b>.map</b>(bar)
    </pre><p>
    is the same as this much longer statement:
    </p><pre><b>temp = [];</b>
<b>for(i=0; i&lt;</b>foo<b>.length; i++){
    temp[i] = </b>bar(<b>foo[i]</b>)<b>;
}</b>
    </pre>

    <div>
        <p>Both of those pieces of JavaScript give us the result of applying
        the function <code>bar()</code> to an array <code>foo</code>.
        </p><p>I think <code>map()</code> is a great example of the power of
        combinators to clean up a program with abstraction.  Once you start
        using simple combinators like this to abstract away the boilerplate
        logic of <em>yet another</em> loop over a list of items, it's hard
        to go back.
        </p><p>My personal history with exploring higher order functions in
        a production setting is through the
        <a href="https://ramdajs.com/">Ramda</a> (ramdajs.com) JavaScript
        library, which I discovered from the talk
        <a href="https://www.youtube.com/watch?v=m3svKOdZijA">Hey Underscore, You're Doing It Wrong!</a>
        (youtube.com)
        by Brian Lonsdorf, which is fantastic.
        </p><p>Once I started discovering how combinators and curried functions
        could eliminate big old chunks of code, I was hooked!
        The old, dreary procedural code became a new fun puzzle!
        </p><p>Mind you, it's very easy to go overboard with this stuff and
        write something far <em>less</em> readable 
        than some simple procedural code. (Gee, ask me how I know this.)
        </p><p>But in limited doses, it's super powerful and compact.
    </p></div>
</div>

<div>
    <p><b>Joy</b> uses combinators to "factor out" all sorts of logic.
    </p><p>Even different forms of recursion can be completely handled
    for you by combinators in Joy thanks to the uniformly unary functions.
    </p><p>Here's a factorial definition:
    </p><pre>factorial == [null] [succ] [dup pred] [*] <b>linrec</b>
    </pre>
    <p>Let's try it:
    </p><pre>5 factorial
<i>120</i>
    </pre>

    <div>
        <p>Computing the factorial of a number is often used as an example of
        recursion. The final answer is the input number multiplied by the
        previous number multiplied by the previous number multiplied by...
        <em>the rest of the numbers</em> all the way down to 1.
        </p><p>Computing a factorial requires a cumulative result. Without
        recursion, you need an explicit variable to hold the intermediate
        result as you loop through the numbers.
        </p><p>As shown in the Joy <code>factorial</code> definition above,
        <code>linrec</code> is a "linear recursion" combinator. It takes takes
        4 parameters, each of which is a quoted program. <code>null</code> is a
        predicate which tests for zero. <code>dup</code> is the same as in
        Forth. <code>pred</code> is an operator which yields a number's
        predecessor (given 4, yields 3).  "<code>*</code>" multiplies two
        numbers, just like you'd expect. Given these pieces, perhaps you can
        take a guess at how <code>linrec</code> works?
        </p><p>For comparison, here is a recursive JavaScript solution:
        </p><pre>function factorial(n) {
    if (n &lt;= 1) {
        return 1;
    }

    return n * factorial(n - 1);
 }
        </pre>
        <p>Note that the Joy example is not just shorter and has no
        variable names but it has <em>abstracted away the mechanics
           of recursion</em>. All we're left with is the
        logic specific to the factorial problem itself.
        </p><p>It's debatable which of these two are more <em>readable</em>
        because the measure of readability is in the eye of the beholder.
        But I think you can <em>imagine</em> getting good at reading the Joy
        example.
        </p><p>Okay, so we've gone pretty deep into this concatenative
        programming and combinator thing. How does this actually
        relate to Forth?
        </p><p>First of all, Forth <em>does</em> have facilities for
        dealing with combinators:
    </p></div>
</div>

<div>
    <p>Forth supports higher order functions with "execution tokens"
    (function pointers) and the <code>EXECUTE</code> word.
    </p><p>This will run the word <em>returned by</em> the word <code>FOO</code>:
    </p><pre>FOO EXECUTE
    </pre>
    <p>With this, you can very compactly define combinatorial words such as
        <b>MAP</b>, <b>FOLD</b>, and
        <b>REDUCE</b>.

    </p><div>
        <p>First, let's see how <code>EXECUTE</code> works. The syntax will be
        alien to non-Forth programmers, but the concept will be no problem for
        anyone used to using first class functions.
        </p><p>First, let's make a new word:
        </p><pre>: hello ." Hello" ;
        </pre>
        <p>This is Forth for, "Compile a word called <code>hello</code>
        that prints the string <em>Hello</em>."
        </p><p>(We'll learn how compiling words actually works later.
        For now, please just gracefully accept what you're seeing.)
        </p><p>Next:
        </p><pre> 
VARIABLE hello-token
        </pre>
        <p>This creates a new variable called <code>hello-token</code> which
        will store the "execution token" for the hello word.
        </p><p>This part will look super cryptic if you're new to Forth:
        </p><pre> 
' hello hello-token !
        </pre>
        <p>Let's examine this one piece at a time:
        </p><ul>
            <li>"<code>'</code>" gets the address of the word
                "<code>hello</code>" and puts it on the stack.
            </li><li>"<code>hello-token</code>" is a variable, which
                just leaves its address on the stack when called.
            </li><li>"<code>!</code>" stores a value from the stack
                (the address of <code>hello</code>) <em>at</em>
                an address from the stack (the address of
                variable <code>hello-token</code>).
        </li></ul>
        <p>So the code above simply reads, "Store the address of
        <code>hello</code> in the variable <code>hello-token</code>."
        </p><p>Now let's use EXECUTE to call this "execution token":
        </p><pre> 
hello-token @ EXECUTE
<i>Hello</i>
        </pre>
        <p>Behold, it printed the "Hello" string!
        </p><p>Remember, the variable <code>hello-token</code> leaves its
        address on the stack when it is called.
        </p><p>"<code>@</code>" is a standard Forth word that loads the value
        from the given address and puts that value on the stack.
        </p><p><code>EXECUTE</code> gets an address from the stack and runs
        whatever word is found at that address.
        </p><p>Perhaps it would be helpful to see that this silly statement:
        </p><pre>' hello EXECUTE
        </pre><p>
        is equivalent to just calling <code>hello</code> directly:
        </p><pre>hello
        </pre>
        <p>Anyway, now we're armed with Forth's combinatorial ability:
        Treating functions ("words") as values so other functions can
        take them as input. This allows us to define combinators in Forth.
        </p><p>For some compact higher-order function definitions
        in Forth, check out <a href="https://gist.github.com/adolfopa/64a1a59c28cbd77b71449d68f4c36dc0">this Gist by Adolfo Perez Alvarez</a> (github.com).
    </p></div>
</div>

<div>
    <p>So yes, Forth <strong>is</strong> concatenative. It implicitly passes values
    from one function invocation to the next. And it supports higher-order
    functions.
    </p><p>Nevertheless, I do <strong>not</strong> believe studying "concatenative
    programming" in general or Joy specifically is a good way to understand
    the history and genesis of Forth!
    </p><p>For example, this simple statement:
    </p><pre>2 3 +
    </pre>
    <p>can be read two different ways:
    </p><p><b>Forth:</b> "Push 2 and then 3 on the stack; add them; push <b>result
        5</b> on the stack."
    </p><p><b>Joy:</b> "The <i>composition</i> of the functions 2, 3, and +
    is identical to the <b>function 5</b>."
    </p><div>
        <p>While both languages share a cosmetically similar syntax, 
         and both produce the same result for <em>this</em>
         expression, there is a fundamental difference between how the two
         languages "think" about the expression because they arrived at
         this place in completely different ways.
        </p><p>Forth's only concern (as a language) is to process these three
        tokens and act upon them according to some simple rules.
        (If the token is in the dictionary, execute it. If it's a number, put
        it on the stack.)
        </p><p>To Joy, it may be the same mechanical process under the hood, but
        the language itself sees these tokens more like a mathematical
        expression. It's a much more abstract outlook.
        </p><p>The point I'm making is that Forth may <em>accomodate</em> the
        abstract point of view, if the developer chooses to take it. But
        Forth is not <em>based</em> on abstract concatenative computing
        principles or combinatory logic.
        </p><p>Let's look at this from a historical perspective.
        First, the notions of postfix syntax (RPN) and a data stack for
        the basis of the language:
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/zuse_z3_computer.png" alt="drawing of konrad zuse's z3 computer"></p><p><b>Postfix notation</b> was definitely in the air when Chuck Moore
    created Forth.
    </p><p><b>Stacks</b> were known and used in the time of Forth's origins,
    though they were generally limited to 2-4 items in registers.
    </p><p>So I think it's reasonable to assume that RPN syntax and use of
    stacks are a historically accurate way to examine Forth's "origin story."

    </p><div>
        <p>Hold that thought, here's a fun aside:
        </p><p>The drawing of the computer labeled <b>"Z3"</b> on the right is of
        the
        <a href="https://en.wikipedia.org/wiki/Z3_(computer)">Z3 computer</a>
        (wikipedia.org)
        designed by engineer and computer scientist Konrad Zuse. This is widely
        considered to be the <strong>first programmable digital computer</strong>!
        It used electro-mechanical relays like the telegraph networks of the day.
        </p><p>(By the way, a certain amount of electro-mechanical logic is
        <em>still</em> used in modern nuclear reactor safety systems because
        the big mechanical components are not as vulnerable to nuclear
        radiation as semiconductors!)
        </p><p>The Z3 could do addition in less than a second and multiplication
        in three seconds. It had 64 words of 22 bits each and worked with
        the equivalent of modern floating-point numbers.
        </p><p>As mentioned above, it can be said to use RPN, though there are only
        two registers and nine instructions. Opcodes were encoded in eight
        bits.  The computer is programmable via punched paper tape (you can see
        the tape device to the right of the control console, though it's a bit
        of a scribble in my drawing).
        </p><p>It is <em>also</em> a stack machine. Again, this is with a mere
        two registers, which get juggled in a particular sequence as you
        load and store values.
        </p><p><b>Fun fact:</b> The control unit used special control
        <em>wheels</em> to encode microsequences. If the microsequence wasn't
        programmed correctly, it could short-circuit the machine and destroy
        the hardware!
        </p><p>I got most of this information from this excellent paper by
        Raul Rojas: 
        <a href="https://ed-thelen.org/comp-hist/Zuse_Z1_and_Z3.pdf">Konrad Zuse's Legacy: The Architecture of the Z1 and Z3 (PDF)</a> (ed-thelen.org).
        </p><p>Anyway, so the simple mechanics of RPN and stack-based
        operation are very natural for digital computing machines
        and their use goes back to the very beginning.
    </p></div>
</div>

<div>
    <p>But Joy and the term "<b>concatenative programming</b>" come from the
    1980s.

    </p><div>
        <p>Uh oh.
        </p><p>While the ideas of combinators and other types of
        universal computation were well known in certain mathematical
        and computational circles, I would argue they were not very amenable
        to existing computer hardware until much later when computers became
        fast enough to support "functional programming" styles and
        abstractions.
        </p><p>Until then, programming was "close to the metal."
        Even the idea of "structured programming" with programming language
        concepts like <code>if/else</code> or <code>while/for</code> loops was
        once considered novel! Until then, everything was done with address
        jumps or <code>GOTO</code>.
        </p><p>It's important to remember that <em>"coding"</em>, the
        actual act of turning an abstract program into machine code,
        was long ago considered to be a mere secretarial skill, not far
        removed from <em>typing</em> and other forms of data entry.
        This is why some people (including myself) refer themselves as
        "programmers" rather than "coders".
        </p><p>Concatenative programming, with its emphasis on combinators
        (and immutable data structures, which we haven't talked about),
        doesn't have the same historic grounding for Forth the way that RPN
        syntax and stack-based programming do.
        </p><p>So I must conclude that understanding concatenative programming
        is super cool, but it doesn't actually help us understand the
        true nature of Forth because it doesn't describe how Forth came to be.
        It is not part of Forth's "origin story."
        </p><p>As we'll soon see, Forth <em>really is</em> about the "nuts and
        bolts". You bring your own theories with you.
    </p></div>
</div>

<div>
    <p>So while all these descriptions of the Forth language are true
    (RPN, stack-based, concatenative), they all describe
    the language Forth from the vantage of <b>hindsight</b>.

    </p><div>
        <p>There's nothing wrong with thinking about Forth in these terms,
        but it doesn't answer the "why" questions:
        </p><p>"<strong>Why</strong> does Forth have this syntax?"
        </p><p>"<strong>Why</strong> does Forth work this way?"
        </p><p>I think the answers to the "why" questions are best answered by
        looking at <strong>when</strong>.
        </p><p>What is Forth's history, anyway?
    </p></div>
</div>


<div>
    <h2>We need to go back to the 1950s.</h2>
    <center>
    <img src="https://ratfactor.com/forth/talkimg/chuck_to_the_future.png" alt="chuck moore as marty in a drawing of the back to the future poster">
    </center>
</div>

<div>
    <p><em>If this image doesn't make any sense to you, citizen of
            the future, it's from the iconic movie poster by Drew Struzan for
            <a href="https://en.wikipedia.org/wiki/Back_to_the_Future">Back to the Future (1985)</a> (wikipedia.org).</em>
        </p>
</div>

<div>
    <h2>Smithsonian Astrophysical Observatory and MIT 1958</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/ibm_704.png" alt="chuck moore operating an IBM 704">
</p></div>

<div>
    <p>Chuck Moore is programming an IBM 704 with Fortran on punchards.
    </p><p>"Compiling took 30 minutes...you got one shot per day"
    </p><p>-- Chuck Moore, Forth, the Early years
    </p><div>
        <p>In <a href="http://worrydream.com/refs/Moore%20-%20Forth%20-%20The%20Early%20Years.pdf">Forth - The Early Years (PDF)</a> (worrydream.com), Chuck
        Moore recites a fairly terse history of Forth, from the earliest
        pre-Forths to the creation of the language standard.
        </p><p><i>(Note: Chuck mentions the Smithsonian Astrophysical Observatory
            (SAO) and the Massachusetts Institute of Technology (MIT) in
            roughly the same time period, and it's a bit difficult to be
            entirely sure which part is talking about which organization. But
            if you look at a map, SAO is at Harvard University. Harvard and MIT
            are about a mile apart in Cambridge, Massachusetts. It's basically a
            singular point if you zoom out a bit. So that helps explain the
            overlap.)</i>
        </p><p>The computer in question is the
        <a href="https://en.wikipedia.org/wiki/IBM_704">IBM 704</a>
        (wikipedia.org)
        It was one of those room-filling vacuum-tube computers with
        tape drives the size of refrigerators.
        </p><p>The 704 was a fully programmable "modern" computer with
        magnetic-core memory, multiple registers, a 36-bit instruction set, and
        36-bit words ("word" as in native memory size for the processor, not
        "word" as in Forth functions).
        </p><p>There were switches for each register on the control console, but
        programs could be written to and read from paper punch cards.
        </p><p>It was very modern for the time, but...
        </p><blockquote>"In its day, the 704 was an exceptionally reliable machine.
        Being a vacuum-tube machine, however, the IBM 704 had very poor
        reliability by today's standards. On average, the machine failed around
        every 8 hours, which limited the program size that the first Fortran
        compilers could successfully translate because the machine would fail
        before a successful compilation of a large program."</blockquote>
        <p>It's difficult to imagine now, but changing parameters for a program,
        re-compiling it, and running it again could take a day (assuming you
        didn't make any mistakes).
        </p><p>So Chuck solved that irritation with an extremely clever solution:
    </p></div>
</div>

<div>
    <p>Moore made an interactive interpreter
    on a computer with nothing we would recognize today as an interactive
    terminal.
    </p><p>He accomplished this by making his program programmable.
    <img src="https://ratfactor.com/forth/talkimg/fortran_punchcard.png" alt="fortran on a punchcard">
    </p><div>
        <p>Here's a quote from <a href="https://www.forth.com/resources/forth-programming-language/">The Evolution of Forth</a> (forth.com):
        </p><blockquote>"Moore's programming career began in the late 1950s at the
            Smithsonian Astrophysical Observatory with programs to compute
            ephemerides, orbital elements, satellite station positions, etc.
            His source code filled two card trays. To minimize recompiling this
            large program, he developed a simple interpreter to read cards
            controlling the program. This enabled him to compose different
            equations for several satellites without recompiling..."</blockquote>
        <p>His free-form input format turned out, ironically, to be more
        <em>reliable</em> for human use than Fortran, which required formatted
        columns. (At the time, any mis-aligned columns in Fortran punchcard
        input would require a re-run of the program!)
        </p><p>It was also faster and more compact.
        </p><p>These "programming the program" statements in Moore's simple
        interpreter did not use keywords.
        They were statement <em>numbers</em> encoded on a punchcard.
    </p></div>
</div>

<div>
    <p>This is the origin of the system that would eventually be named
    <b>Forth</b>.
    </p><p>According to Moore, the interpreter's statement numbers would have been
    roughly equivalent to these Forth words:
    </p><pre>WORD NUMBER INTERPRET ABORT
    </pre>
    <p>Free-form input was unusual at the time. It's obviously a super nice
        alternative to recompiling your calculation program every time you want
        to change some numbers!

    </p><div>
        <p>So, at last, we have discovered <strong>the true origin of the Forth
        language</strong>: Moore wrote a simple interpreter to reduce waste
        and tedium.
        </p><p>Already, Moore has exhibited the defining combination of traits
        shared by great programmers around the world: Inventive and allergic to
        tedium.
        </p><p>If it had stopped there, it would have been a clever trick and
        perhaps worthy of a footnote in history.
        </p><p>But Chuck Moore did not stop there.
    </p></div>
</div>

<div>
    <h2>Stanford 1961</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/burroughs_b5500_computer.png" alt="drawing of chuck at the stanford burroughs b5500 system"></p><div>
        <p>Now we head from Massachusetts to California where Moore found
        himself at Stanford University where he received his BA in Physics
        and started graduate school. He worked with Stanford's
        <b>Burroughs B5500</b>.
        </p><p>Let's talk about the computer first:
        </p><p>The B5500 (or "B 5500" - the official manual puts a space between
        the B and the number) was a solid-state computer. It was part of the 
        <a href="https://en.wikipedia.org/wiki/Transistor_computer">"second-generation" of computers</a>
        (wikipedia.org).
        These computers had discrete transistors on circuit boards.  By
        contrast, the <em>first generation</em> before them used vacuum tubes
        (like the aforementioned IBM 704) and the <em>third generation</em>
        after them used integrated circuits.
        </p><p>In fact, the 
        <a href="https://en.wikipedia.org/wiki/Burroughs_Large_Systems">Burroughs Large Systems</a>
        engineers were transistor computer pioneers.
        And the B5000 series was a pioneering system.
        </p><p>Here's some more resources:
        </p><ul>
            <li><a href="http://www.retrocomputingtasmania.com/home/projects/burroughs-b5500/b5000_b5500_gallery">Burroughs B5000 / B5500 / B5700 gallery</a>
                (retrocomputingtasmania.com)
                - an awesome illustrated guide including a picture of the
                actual Stanford B5500.
            </li><li><a href="http://www.bitsavers.org/pdf/burroughs/B5000_5500_5700/1021326_B5500_RefMan_May67.pdf">Burroughs B5500 Reference Manual (PDF)</a>
                (bitsavers.org)
                - The entire 224 page manual that came with the computer.
            </li><li><a href="http://infolab.stanford.edu/pub/voy/museum/computers19jan08.html">Early Computers at Stanford</a>
                (stanford.edu)
                - a description of the computer itself and a brief summary
               of its use at Stanford.
        </li></ul>
        <p>And what exactly did Chuck Moore do with that B5500 machine?
    </p></div>
</div>

<div>
    <p>Moore's CURVE was another mathematical application, written in
    Stanford's own Algol implementation.
    </p><p>It contained a much more sophisticated interpreter this time
    with a data stack and control flow operators.
    </p><p>Equivalent Forth words:
    </p><pre>IF ELSE DUP DROP SWAP + - * 
    </pre>

    <div>
        <p>(As we'll see, symbols like "+" and "-" are <i>words</i> in Forth.)
        </p><p>Moore worked on the Stanford Linear Accelerator
        as a programmer. His focus was on steering the beam of
        the electron accelerator.
        </p><p>The CURVE program was even more "programmable" than
        his Fortran program at SAO. He took those ideas and
        expanded them to include the idea of a parameter stack
        and the ability to define new procedures.
        </p><p>This made the interpreter much more flexible and capable.
        </p><p><b>Aside:</b> At this point, I also think it's interesting to
        compare Moore's budding interpreter language with another interpreter
        created specifically to be embedded in larger programs for controlling
        them:
        <a href="https://en.wikipedia.org/wiki/Tcl">The Tcl programming language</a>
        (wikipedia.org).
        27 years after Moore started his work, John Ousterhout created Tcl out
        of frustration with ad-hoc, half-baked solutions in 1988 at Berkeley. The
        name comes from "Tool Command Language".  <strong>But the comparison
            goes deeper than just the shared motivation.</strong> Tcl and Forth
        have similar levels of syntactical purity and flexibility. Everything
        in Tcl is a string!  Both languages give the user the power to define
        fundamental parts of the system, such as new control structures, in the
        language itself.  If this sounds interesting, you owe it to yourself to
        play with Tcl for a while. It is extremely clever and extremely
        capable. The main implementation has been well cared-for and can be
        found on most Unix-like systems, often installed by default.
        </p><p>As Moore demonstrated with CURVE, a powerful, extensible interpreter
        is a huge time-saver (certainly when compared to re-compiling the
        program!) and allows the user of the program to add to the program's
        functionality on the fly. It's difficult to overstate how powerful this
        can be.
        </p><p>Truly, now we have the beginnings of a fully-fledged
        programming language. It's not named Forth yet, but
        we're getting closer.
    </p></div>
</div>

<div>
    <h2>Freelancing 1965</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/teletype33.png" alt="a teletype 33 with paper tape reader and writer"></p><p>"With the TTY came paper-tape and some of the
        most un-friendly software imaginable - hours of editing and punching
        and loading and assembling and printing and loading and testing
        and repeating."
    </p><p>-- Chuck Moore, Forth, the Early years
    </p><div>
        <p>First, let's talk about what "TTY" means in 1965. 
        <a href="https://en.wikipedia.org/wiki/Teleprinter">Teleprinters</a>
        (wikipedia.org) or "teletypewriters" or just "teletype"
        were all printer devices. They printed to continuous sheets of paper
        fan-folded to fit into boxes.
        </p><p>The Latin "tele-" prefix means "far" or "at a distance".  These
        machines trace a direct lineage from telegraphs and Morse code.
        </p><p>
        In the late 1800s, the concept of a typewriter which operated over
        telegraph lines had been explored and existed in a variety of forms.
        But the transmission code, paper tape, and typewriter system devised by
        <a href="https://oztypewriter.blogspot.com/2012/03/new-zealands-donald-murray-father-of.html">Donald Murray</a> (oztypewriter.blogspot.com)
        is the one that won out. And it was arguably Murray's
        choice of QWERTY keyboard that cemented it as the standard around
        the world.
        </p><p>The existing Baudot code (from which we also get the term "baud")
        was modified by Murray into something that very much resembles what we
        still use today. Murray also introduced the concept of control
        characters, which still clearly retain their typewriter origins in the
        names:
        <code>CR</code> (carriage return) and <code>LF</code> (line feed). 
        </p><p>Teletype machines started as point-to-point text communication
        tools (like the telegraph), but they were later used over switched
        networks like the world-wide Telex system which used pulse dialing
        to automatically route a connection through the network.
        </p><p>
        The <a href="https://en.wikipedia.org/wiki/Teletype_Model_33">Teletype Model 33</a>
        (wikipedia.org)
        I drew above was one of the most popular teletypes used with computers.
        It was created by The Teletype Corporation in 1963, which means it
        shares a birth year with the ASCII standard!  It remained popular until
        the mid-1970s when video terminals finally came down in price enough to
        push printer teletypes aside. In fact, Teletype Co. made the Model 33
        until 1981, which is much later than I would have guessed!
        </p><p>As for
        <a href="https://en.wikipedia.org/wiki/Punched_tape">paper-tape</a>
        (wikipedia.org), I'll just quote Wikipedia directly:
        </p><blockquote>"Punched tape was used as a way of storing messages for
            teletypewriters. Operators typed in the message to the paper tape,
            and then sent the message at the maximum line speed from the tape.
            This permitted the operator to prepare the message "off-line" at
            the operator's best typing speed, and permitted the operator to
            correct any error prior to transmission. An experienced operator
            could prepare a message at 135 words per minute (WPM) or more for
            short periods."
        </blockquote>
        <p>Donald Murray didn't invent the concept of perforated paper
        tape for data storage, but his system used it for the encoding of
        transmitted messages from the keyboard. It doesn't seem like a stretch
        to trace the origins of this storage method to Murray's system.
        </p><p>The computers of this era and earlier were paper manipulators.
        They were kind of like really complicated typewriters. They displayed
        their output on paper, they were programmed with paper, and they kept
        long-term storage on paper!
        </p><p>But as time went on, computer interactivity increased. They became
        less like typewriters and more like the machines we use today.
        </p><p>As each new ability emerged, Forth became increasingly interactive.
    </p></div>
</div>

<div>
    <p>Forth gains direct terminal input and output!
    </p><pre>KEY EMIT CR SPACE DIGIT
    </pre>
    <p>These new words turned Moore's system into a program editor.
    </p><p>Now you can edit the program within the program.
    </p><p>Moore's complete system is now kind of like an integrated development
    environment and kind of like an operating system.

    </p><div>
        <p>In the mid-1960s, "mini-computers" came out. They were 
        still huge by today's standards, but no longer required a
        large room of their own.
        </p><p>In addition to the reduction in size, the other emerging change was
        direct interactive use of a computer via teletype.
        </p><p>Specifically, the invention of
        <a href="https://web.stanford.edu/~learnest/nets/timesharing.htm">timesharing</a> (stanford.edu)
        was a huge shift away from the "batch processing" style of
        computing that had come before (like with input via punchcard).
        </p><p><i>(<b>Fun fact:</b> A "second generation" time-sharing operating system
        called <a href="https://www.multicians.org/history.html">Multics</a>
        (multicians.org)
        was the spiritual ancestor of and
        name from which Brian Kernighan made the joke name
        <strong>Unix</strong>: "One of whatever Multics was many of".)</i>
        </p><p>Moore's evolving pre-Forth language also gained
        completely interactive editing and executing of programs.
        </p><p>This would have been right around the time
        that the original
        <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">LISP REPL (Read-eval-print loop)</a>
        (wikipedia.org)
        was created in 1964 on a PDP-1.
        </p><p>If not pre-saging, Moore was certainly on the bleeding edge
        of interactive computer usage!
        </p><p><b>Aside:</b> If you want to see an awesome demonstration of
        interactive computer usage on paper, check out this demonstration
        by Bob Spence:
        <a href="https://youtu.be/_DTpQ4Kk2wA">APL demonstration 1975</a>
        (youtube.com).
        <a href="https://en.wikipedia.org/wiki/Robert_Spence_(engineer)">Bob Spence</a>
        (wikipedia.org)
        is best known for his own contributions, including a number of early
        clever computer interaction ideas that are worth re-examining today.
        Bob's demo is extremely pleasant to watch and brilliantly presented
        in split screen. Notice how paper output lets you mark up stuff with
        a pen - pretty nice feature!
        And
        <a href="https://en.wikipedia.org/wiki/APL_(programming_language)">APL</a>
        (wikipedia.org)
        is a whole other rabbit hole which has interesting intersections with
        the point-free and higher-order function programming we've encountered
        earlier.
        </p><p>Then this happens...
    </p></div>
</div>


<div>
    <h2>1968</h2>
    <p>IBM 1130 minicomputer at Mohasco, a textiles manufacturer in New York.
    <img src="https://ratfactor.com/forth/talkimg/ibm_1130.png" alt="drawing of chuck at an IBM 1130 minicomputer">
</p></div>

<div>
    <p>16 bit, 8 KB RAM.
    </p><p>Backup was via punch/reader.
    </p><p>With disks, now we can have file names!
    </p><p>File names limited to 5 characters...
    </p><p>Moore names his "fourth generation" system "FORTH".

    </p><div>
        <p>Yup, this really is the origin of the name, "Forth". Funny how
        temporary things tend to stick and last forever, isn't it?
        </p><p>The
        <a href="https://en.wikipedia.org/wiki/IBM_1130">IBM 1130</a>
        (wikipedia.org)
        is one of those new-fangled "minicomputers" we've talked about.
        Gosh, it was so small, the CPU weighed less than a car!
        </p><p>
        And it was affordable! The base model was as low as $32,000.
        Compare that to $20,000, the median price for a house in the U.S.
        in 1965.
        Just think of that: If you could afford a house, you were well
        on your way to being able to afford a <em>computer</em>!
        </p><p>As noted, the unit Chuck Moore worked on had a disk drive,
        which would have bumped up the price an additional $9,000.
        That would be the equivalent of buying an above-average house
        and adding a couple brand-new 1965 cars in the driveway.
        </p><p>But, wow, imagine having disk drive cartridges with 512 KB of
        storage at your disposal.  What would you do with all that space?
        </p><p>As mentioned, at this time, we're still interacting with the
        computer (mostly) via paper, but these minis brought the idea of
        interactive computing to "the masses" because they were so much
        smaller, cheaper, and more reliable than the sorts of computers that
        had come before.
        </p><p>
        Quoting
        <a href="https://www.forth.com/resources/forth-programming-language/">The Evolution of Forth</a> (forth.com):
        </p><blockquote>
            "Newly married and seeking a small town environment, Moore joined
            Mohasco Industries in Amsterdam, NY, in 1968. Here he developed
            computer graphics programs for an IBM 1130 minicomputer with a 2250
            graphic display. This computer had a 16-bit CPU, 8k RAM, his first
            disk, keyboard, printer, card reader/punch (used as disk backup!),
            and Fortran compiler. He added a cross-assembler to his program to
            generate code for the 2250, as well as a primitive editor and
            source-management tools. This system could draw animated 3-D
            images, at a time when IBM's software for that configuration
            drew only static 2-D images. For fun, he also wrote a version of
            Spacewar, an early video game, and converted his Algol Chess
            program into the new language, now (for the first time) called
            FORTH. He was impressed by how much simpler it became."
        </blockquote>
        <p>As you may have gathered by now, Chuck Moore is a pretty
        extraordinary computer programmer.
        </p><p>It turns out the IBM 1130 was hugely influential to a bunch of early
        big-name programmers in addition to Moore. Something was in
        the air.
        </p><p>In addition to its funny new name, Forth had also gained new
        abilities:
    </p></div>
</div>

<div>
    <p>Moore adds return call stack, allowing nested word definitions:
    </p><pre>: DOUBLE DUP + ;
: QUAD DOUBLE DOUBLE ;
    </pre>
    <p>And a <b>dictionary</b> of words.

    </p><div>
        <p>It's not just the name that makes this the first real Forth:
        A dictionary of named words which can be called interactively or
        recursively in the definitions of other words is one of the
        defining features of Forth. The ability to use words as building
        blocks is the Forth language's primary abstraction.
        </p><p>In the example above, we've defined a word called <code>DOUBLE</code>
        which duplicates the number on the top of the stack and adds the
        two numbers together.
        </p><p>A second word called <code>QUAD</code> uses the previous definition
        by calling <code>DOUBLE</code> twice, quadrupling the number in a
        rather amusing way.
        </p><p>A return stack makes this possible. Without a return stack, we have
        no way of telling the computer how to "get back" to the place in
        <code>QUAD</code> where we left off after <code>DOUBLE</code> is done.
        </p><p>(We'll get to the specifics of the syntax soon. That's another
        vital part of understanding Forth.)
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/univac_1108.png" alt="drawing of chuck at a univac 1108 console"></p><h2>1970</h2>
    <p>Still at Mohasco. Programming a Univac 1108.
    </p><p>A new port of Forth written in assembler and could call COBOL modules
    because that's what the corporate suits wanted in 1970.
    </p><p>Moore <b>hates complexity</b>.

    </p><div>
        <p>First of all, the <a href="https://en.wikipedia.org/wiki/UNIVAC_1100/2200_series">UNIVAC 1108</a>
        (wikipedia.org)
        is a great example of the awesome "retro-futuristic" design of
        these old machines. Just look at the sweeping angles in my drawing
        of the console. That's a cool computer console!
        </p><p>When these computers cost more than a house, it makes perfect
        sense that they were constructed into beautiful custom furniture
        that made them look like space ships.
        </p><p>You have to wonder: Did the sci-fi art of the time drive
        the design of these computers or did the computers and industrial
        design of the time inform the art? Or, more likely, did they both
        feed off of each other in the classic cycle of, "life imitates art
        imitates life?"
        </p><p>That's a teletypewriter built into the desk of the console.
        I presume the tractor-feed paper would have spooled to and from
        containers behind the sleek facade.
        </p><p>Anyway, the UNIVAC 1108 is an even more modern computer than the IBM
        1130. Now we're moving into using integrated circuits for everything,
        including the register storage. (Speaking of registers, the 1108 had
        128 of them and must have been interesting to program!)
        </p><p>As was also the trend at the time, the CPU
        was constructed of discrete cards connected together by a wire-wrapped
        backplane.

        </p><p>If you're not familiar with the technique, you should know that
        <a href="https://en.wikipedia.org/wiki/Wire_wrap">wire-wrapped</a>
        (wikipedia.org)
        connections are extremely high quality. Wire is wrapped with
        great force around a post, making a gas-tight connection that will not
        corrode (corrosion can occur outside the connection, of course). A
        little bit of the insulation gets wrapped in the last turns, which
        provides flexibility and strain relief. There are NASA guidelines for
        making a perfect wire-wrap connection.
        </p><p>Anyway, the Univac was even more powerful and modern
        than Moore's previous computer and he took advantage of it.
        </p><p>You don't have to read between the lines to see Moore's obvious
        distaste of
        <a href="https://en.wikipedia.org/wiki/COBOL">COBOL</a>
        (wikipedia.org),
        the COmmon Business-Oriented Language.
        What's impressive is that he managed to still use Forth while
        also using the required COBOL modules.
        </p><p>When this project was abandoned by the employer, Moore was
        upset by the whole situation, particularly the way business software
        was increasing in complexity. This won't be the last time we
        see this theme crop up.
        </p><p>He also wrote a book (unpublished) at this time called
        <em>Programming a Problem-Oriented Language</em>.
        It's written in typical Moore fashion, without superfluous words or
        exposition. Feel free to contrast this with the article you're reading
        now.
        </p><p>(This book will be mentioned again later.)
    </p></div>
</div>

<div>
    <h2>NRAO - Early 1970s</h2>
    <p>National Radio Astronomy Observatory
     - Computer control software for radio telescopes.
    <img src="https://ratfactor.com/forth/talkimg/nrao.png" alt="drawing of radio telescope dishes from NRAO">

    </p><div>
        <p>Radio telescopes are like visual telescopes, but they collect lower
        frequency waves. Thanks to the magic of computers, we can process these
        signals to see what the radio telescopes see.
        </p><p>Radio telescopes can work with everything from 1 kHz, which is just
        below the uses of "radio" as we think of it for navigation,
        communication, and entertainment, to 30 GHz, which is still well under
        the visible portion of the electromagnetic spectrum. Consumer microwave
        ovens operate at about 2.45 GHz.
        </p><p>(Speaking of Gigahertz, apparently Intel Core i9 processors can run
        at clock speeds up to 6 Ghz, but most CPU designs top out at around 4
        Ghz. This may be important for Forth for reasons I explain later.)
        </p><p>The visible part of the spectrum is very small by comparison. It
        starts at 420 THz (terahertz) and ends at 720 THz. The familiar
        rainbow of colors captured in the mnemonics "Roy G. Biv" or "Richard of
        York Gave Battle in Vain" (ROYGBIV) lists colors in order of lowest
        frequency (Red) to highest (Violet).
        </p><p>Here is the official website of the
        <a href="https://public.nrao.edu/">National Radio Astronomy Observatory</a>
        (nrao.edu).
        But for a better summary,
        <a href="https://en.wikipedia.org/wiki/National_Radio_Astronomy_Observatory">the Wikipedia entry</a> (wikipedia.org)
        is the way to go. Be sure to scroll down to the incredible image and
        description from 1988 of the collapsed 300ft radio telescope:
        </p><blockquote>
            "The telescope stood at 240ft in height, wieghed 600-tons, had a
            2-min arc accuracy, and had a surface accuracy of ~1 inch. The
            collapse in 1988 was found to be due to unanticipated stresses
            which cracked a hidden, yet weight and stress-supporting steel
            connector plate, in the support structure of the massive telescope.
            A cascade failure of the structure occurred at 9:43pm causing the
            entire telescope to implode."
        </blockquote>
        <p>The 300ft dish had been the world's largest radio telescope when it
        went active in 1962 at the NRAO site in West Virginia.
        </p><p>My drawing above is of the
        <a href="https://en.wikipedia.org/wiki/Very_Large_Array">Very Large Array</a>
        (wikipedia.org)
        in New Mexico.
        NRAO is also a partner in a huge international array in Chile.
        </p><p>By using radio interferometry, arrays of telescopes can be treated
        as essentially one huge telescope with the diameter of the array
        (missing the <em>sensitivity</em> a dish of that size would have).
        </p><p>But the scope for which Moore wrote software was a single 36ft (11
        meter) dish at Kitt Peak in Arizona called <b>The 36-Foot Telescope</b>.
        It was constructed in 1967 and continued
        working until it was replaced with a slightly larger and more
        accurate dish in 2013.
        </p><p>The 36ft scope was used for millimeter-wavelength molecular astronomy.
        This is the range above "microwaves" and these telescopes pretty
        much have to be constructed at dry, high altitude sites because
        water vapor in the air can interfere with the radio waves.
        </p><p>(Note that Moore stayed at the NRAO headquarters in Virginia and
        was not on-site at Kitt Peak.)
        </p><p>NRAO had a policy of using Fortran on its minicomputers, but based
        on the success of his previous work, Moore was begrudgingly given
        permission to use Forth instead.
        I couldn't possibly do justice to summarizing it, so here's Chuck's
        own words describing the software he wrote for the NRAO (also from
        <i>Forth - The Early Years</i>):
        </p><blockquote>
            <p>"There were two modes of observing, continuum and spectral-line.
            Spectral-line was the most fun, for I could display spectra as they
            were collected and fit line-shapes with least-squares."
            </p><p>It did advance the state-of-the-art in on-line data reduction.
            Astronomers used it to discover and map inter-stellar molecules
            just as that became hot research."
        </p></blockquote>
        <p>
        <a href="https://public.nrao.edu/gallery/the-36foot-molecule-hunter-at-work/">Here is a photo</a> (nrao.edu) of the 36-foot telescope.
        And
        <a href="https://www.nrao.edu/archives/items/show/35209">here is a photo of the control room in 1974</a>
        (nrao.edu)
        with what appears to be a PDP-11 in the background.
        </p><p>As you can see, the work itself was extremely interesting and
        cutting-edge. But how Moore went about it was also very interesting,
        which a series of computer drawings will demonstrate in a moment.
        </p><p>But on the Forth language front, there was another development...
    </p></div>
</div>
<div>
    <p>At this time, there are talks of patenting Forth.
    </p><p>Moore believes <b>ideas shouldn't be patented</b>.

    </p><div>
        <p>We take it for granted now that "free" or "open" software
        unencumbered by patents and restrictive corporate licenses is a good
        thing. But this was <em>absolutely not a mainstream position</em> in
        the early 1970s.
        </p><p>To put things in context, in the summer of 1970, 
        <a href="https://en.wikipedia.org/wiki/Richard_Stallman">Richard Stallman</a>
        (wikipedia.org) was just out of high school and was writing
        his first programs in Fortran (which he hated) and then APL.
        </p><p>It wasn't until 1980 that Stallman finally got fed up enough with
        the state of proprietary and legally encumbered software to start the
        "free-as-in-freedom" software revolution. Companies were increasingly
        using copyright to prevent modification, improvement, or duplication by
        the end user. Stallman, being a pretty incredible programmer, wrote free
        clones of such programs. He announced the
        <a href="https://en.wikipedia.org/wiki/GNU_Project">GNU project</a>
        (wikipedia.org)
        in 1983.
        </p><p><b>Aside:</b> I believe Stallman was right. There's absolutely
        nothing wrong with writing programs for money or selling software. But
        using the law to prevent people from truly owning that software
        by limiting how or where to run it, or even <em>preventing people from
            writing their own similar software, if they are capable</em>, is an
        abominable practice and should be countered at every step.
    </p></div>
</div>

<div>
    <p>Moore also rejects the standardization of Forth.
    </p><div><p>"All of my fears of the standard and none of the advantages of the standard have come to pass. Any spirit of innovation has been thoroughly quelched.
    </p><p>Underground Forths are still needed.
    </p><p>I said I thought the standard should be a publication standard but they wanted an execution standard."
    </p></div><p>-- Chuck Moore, 1997

    </p><div><p>
        Quote from the <b>ANSI Forth</b> section in 
        <a href="http://www.ultratechnology.com/moore4th.htm">this cool collection of Forth quotes</a>
        (ultratechnology.com) by Jeff Fox.

        </p><p>I think that when you get to the heart of what Forth is all
        about, Moore's displeasure with the ANSI standardization suddenly makes
        tons of sense. In short, the whole <em>point</em> of Forth is to create
        your own toolkit. Having an all-inclusive language standard is great
        for making sure Forths are interchangeable. Unfortunately, it's
        also antithetical to adapting the language to your specific hardware
        and software needs.
        </p><p>Alright, enough philosophizing. Let's get back to the computer
        stuff!
        </p><p>While Moore was at NRAO, he also wrote software to point the telescope.
        Elizabeth Rather (Moore credits her as Bess Rather in his paper) was
        hired for support and they worked together on at least one port.
        The Forth system migrated across multiple machines at NRAO which,
        as we'll see, highlights one of the <b>technological strengths</b> of the
        standard Forth implementation.
        </p><p>By the way, after her initial reaction of shock and horror, 
        Elizabeth Rather embraced Forth. From
        <a href="https://www.forth.com/resources/forth-programming-language/">The Evolution of Forth</a>
        (forth.com):
        </p><blockquote>
            "After about two months, Rather began to realize that something
            extraordinary was happening: despite the incredibly primitive
            nature of the on-line computers, despite the weirdness of the
            language, despite the lack of any local experts or resources, she
            could accomplish more in the few hours she spent on the Forth
            computers once a week than the entire rest of the week when she had
            virtually unlimited access to several large mainframes."
        </blockquote>
        <p>Rather went on to write the first Forth manual in 1972 and
        write papers about it for the NRAO and other astronomical organizations.
        </p><p>Later, <a href="https://en.wikipedia.org/wiki/Elizabeth_Rather">Elizabeth "Bess" Rather</a>
        (wikipedia.org)
        became the co-founder of FORTH, Inc with Chuck and
        remained one of the leading experts and promoters of the Forth language
        until her retirement in 2006.
        <img src="https://ratfactor.com/forth/talkimg/forth_nrao_spectral_line_observing_ieee1973.jpg" alt="screenshot of the top half of the first page of the article">
        </p><p>There's a great overview paper of the whole NRAO system by
        Moore and Rather in a 1973 <i>Proceedings of the IEEE</i>:
        <a href="http://home.iae.nl/users/mhx/forth_NRAO.pdf">The FORTH Program for Spectral Line Observing (PDF)</a>
        (iae.nl).
        </p><p>It includes a high-level description of the system with examples of
        interactive Forth usage and a neat diagram on the first page, which you
        can see in the screenshot.
        </p><p>As mentioned, Forth was ported to a bunch of different computers
        at NRAO.
        </p><p>Let's take a look:
    </p></div>
</div>

<div>
    <p>Forth on the IBM 360/50
    <img src="https://ratfactor.com/forth/talkimg/ibm_360_50.png" alt="drawing of chuck using an ibm 360/50 computer">

    </p><div>
        <p>Moore mentions first having ported his Forth system to the
        <a href="https://en.wikipedia.org/wiki/IBM_System/360">IBM 360/50</a>
        (wikipedia.org).
        </p><p>The System/360 (or S/360) computers were extremely successful,
        largely because of availability, longevity, and compatibility.
        IBM claims to be the first company to use
        <a href="https://en.wikipedia.org/wiki/Microcode">microcode</a>
        (wikipedia.org)
        to provide a compatible instruction set across all S/360 computers
        despite the hardware differences between models.
        </p><p>The cheaper 360 computers used microcode while the more expensive
        and powerful machines had hard-wired logic. NASA even had some one-off
        models of IBM 360 made just for them.
        </p><p>Until microcode came along, if you bought a "cheap" computer to get
        started and then upgraded to a more powerful computer, you would have
        to re-write your programs in a new instruction set. (If you happen to
        have written your programs in a high-level language like Fortran, you
        would still have to re-compile your programs from punchcards, and you
        would need the Fortran compilers on both computers to be perfectly
        compatible!) It's easy to see why being able to upgrade without
        changing your software would have been appealing.
        </p><p>System/360 computers were
        a "big bet" (5 billion dollars according to IBM themselves:
        <a href="https://www.ibm.com/ibm/history/ibm100/us/en/icons/system360/">System 360: From Computers to Computer Systems</a>
        (ibm.com)) that nearly destroyed the company.
        The bet clearly paid off because they made these machines
        from 1964 to 1978.
        </p><p>Oh, and it wasn't just the instruction set that was compatible. The
        360 computers also had standardized peripheral interfaces, which were
        compatible between machines.
        There was a huge market for peripheral devices.  IBM
        themselves made 54 different devices such as memory, printers, card
        readers, etc. The 360 also spawned a whole third-party peripheral
        industry, much like the IBM PC-compatible era that started in 1981 and
        continues to the desktop computer I'm typing on right now in 2023.
        </p><p>Moore wrote Forth from scratch in S/360 assembly.
        </p><p>Then...
    </p></div>
</div>

<div>
    <p>Forth ported to the Honeywell 316
    <img src="https://ratfactor.com/forth/talkimg/honeywell_316.png" alt="drawing of chuck using a honeywell 316computer">

    </p><div>
        <p>I drew Chuck behind the system in this one because I couldn't
        bring myself to obscure an inch of that glorious pedestal console.
        </p><p>You can see the
        <a href="https://en.wikipedia.org/wiki/Honeywell_316">Honeywell 316</a>
        (wikipedia.org)
        and <a href="https://commons.wikimedia.org/wiki/File:Honeywell316.jpg">the brochure</a>
        (wikimedia.org)
        image from which I made my drawing.
        </p><p>Just look at the space-age lines on that thing! It looks straight
        out of a Star Trek set. Sadly, there's basically no chance the one
        Moore actually worked on had this console. Less than 20 of them were
        sold. <strong>But thanks to my drawing, we can pretend.</strong>
        </p><p>Beyond just its appearance, this particular console has a really
        wild history. The extravagant gift company, Neiman Marcus, actually
        offered the Honeywell H316 with this pedestal as a "kitchen computer".
        It cost $10,000 and would have come with a two-week course to learn
        how to input recipes and balance a checkbook using toggle switches and
        lights to indicate binary data! (As far as anyone knows, none of these
        were actually sold.)
        </p><p>The ad for the Honeywell Kitchen Computer was in full "Mad Men"
        mode and was extremely patronizing, as was unfortunately typical for
        the time. But if you can look past that, the whole thing is quite
        funny:
        </p><blockquote>
            "Her souffles are supreme, her meal planning a challenge? She's
            what the Honeywell people had in mind when they devised our Kitchen
            Computer. She'll learn to program it with a cross-reference to her
            favorite recipes by N-M's own Helen Corbitt. Then by simply pushing
            a few buttons obtain a complete menu organized around the entree.
            And if she pales at reckoning her lunch tabs, she can program it to
            balance the family checkbook..."
        </blockquote>
        <p>You can see a tiny scan of the original ad with a woman admiring
        her new Honeywell Kitchen Computer that barely fits in her kitchen
        <a href="https://en.wikipedia.org/wiki/File:Kitchen_computer_ad.jpg">here</a>
        (wikipedia.org).
        </p><p>But moving on from the pedestal...
        </p><p>The implementation of Forth on the H316 is considered to be the
        first complete, stand-alone implementation because it was actually
        programmed on the computer itself <em>and</em> was used to create other
        Forths. It is at this point that Moore has achieved a fully
        ascendant system.
        </p><p>But wait, there's <strong>moore</strong>...er,
        sorry, <strong>more</strong>!
        </p><p>As is typical for a Chuck Moore endeavor, this
        telescope application pushed other new boundaries:
        The system actually ran across two computers (we're about to see
        the second one) and gave real-time access to <em>multiple</em> astronomers.
        Because it spread the load the way it did, there were no issues with
        concurrency, which is something we programmers struggle with to this day.
        </p><p>This real-time control and analysis was basically a
        luxury available on no other system at the time.
        Even Honeywell, the creator of these computers, had only been able to
        achieve the most primitive concurrency for them and it was
        nothing like this.
        </p><p>As usual, Moore was right on the very crest of
        computing with his ultra-flexible Forth system.
    </p></div>
</div>

<div>
    <p>...And ported to the Honeywell DDP-116
    <img src="https://ratfactor.com/forth/talkimg/ddp_116.png" alt="drawing of chuck using a honeywell DDP-116 computer">

    </p><div>
        <p>As mentioned above, the Forth system was <em>also</em> ported to the
        <a href="https://t-lcarchive.org/honeywell-ddp-116/">DDP-116</a>
        (t-larchive.org).
        and used with its "parent" system on the H316 featured above.
        </p><p><i>(The DDP-116 was originally manufactured by
        <a href="https://en.wikipedia.org/wiki/Computer_Control_Company">Computer Control Company</a> in 1965, but CCC was sold to Honeywell in 1966 and
        became its Computer Controls division.)</i>
        </p><p>The DDP-116 was a 16-bit computer (the first available for
        purchase), but still part of that "second generation" of computers
        we've mentioned before, with individual
        transistors and components wire-wrapped together on huge circuit
        boards. (Check out the pictures on the DDP-116 link above for all
        sorts of excellent views of the insides and outsides of an example
        machine and its peripheral devices!)
        It happens to have also been a pretty rare computer. It didn't sell
        in vast quantities like the IBM systems.
        </p><p>As you can see in the drawing, Chuck Moore began to grow in power as
        his system evolved and this manifested in <strong>additional
            arms</strong>!  Or maybe I started to get a little loopy while
        drawing old computers for these slides in the final evenings before I
        was due to give my talk?  I'll let <em>you</em> decide what is real.
        </p><p>But wait, there's one more!
    </p></div>
</div>

<div>
    <p>Forth on the DEC PDP-11
    </p><p>(Yes, <i>that</i> PDP-11.)
    <img src="https://ratfactor.com/forth/talkimg/dec_pdp_11.png" alt="drawing of chuck using a DEC PDP-11 computer">

    </p><div>
        <p>The
        <a href="https://en.wikipedia.org/wiki/PDP-11">PDP-11</a>
        (wikipedia.org) was by some measures the most popular minicomputer ever.
        </p><p>
        It was a 16-bit machine and had an orthogonal instruction set
        (meaning the same instruction could be used in multiple ways
        depending on the operand. This makes the mnemonics of the instruction
        set smaller and more logical and much easier to memorize).
        This was even more powerful because I/O was memory-mapped, so the
        same instructions used to move values around in memory and
        registers could <em>also</em> be used to transfer data to
        and from devices.
        </p><p>All told, these conveniences made the PDP-11 fun to program!
        Assembly language programmers rejoiced.  The ideas in the PDP-11 spread
        rapidly and are to be found in the most popular architectures in use
        today. Compared to what came before it, PDP-11 assembly language will
        look surprisingly familiar to modern assembly programmers.
        </p><p>The original machines were made starting in 1970 with
        wire-wrapped backplanes and discrete logic gates.
        Later models introduced "large-scale integration," which is a term
        we'll see later, so hold that question!
        These later versions of the PDP-11 were still being
        made twenty years later in 1990! There are apparently still PDP-11s
        performing crucial tasks today, with nuclear power plants being one of
        the most prominent examples.
        </p><p>It's hard to see in my drawing, but the PDP-11 front panel is one
        of the most iconic computer interfaces ever made. Hobbyists make
        working models, including ridiculously cute and awesome miniature
        versions. Here are two model versions - click on them to go to the
        original wikipedia.org files, where you can admire their full beauty:
        </p><p><a href="https://en.wikipedia.org/wiki/File:Digital_PDP11-IMG_1498_cropped.jpg"><img src="https://ratfactor.com/forth/talkimg/Digital_PDP11-IMG_1498_cropped.jpg" alt="pdp11 panel1"></a>
        <a href="https://en.wikipedia.org/wiki/File:Pdp-11-70-panel.jpg"><img src="https://ratfactor.com/forth/talkimg/Pdp-11-70-panel.jpg" alt="pdp11 panel2"></a>
        <br>
        </p><p>It would be difficult to overstate the impact of this machine.
        Probably the most famous piece of software released on the PDP-11
        was the first version of
        <a href="https://en.wikipedia.org/wiki/Unix">Unix</a>
        (wikipedia.org)
        that actually bore the name "Unix".
        </p><p>It was also the birthplace of the
        <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a>
        (wikipedia.org)
        programming language.
        Dennis Ritchie ported Ken Thompson's B language to the PDP-11 to
        take advantage of its abilities. Unix was then re-written in C
        starting with Version 4.
        So the Unix we know today and a large portion of the command line
        utilities that are standard with a Unix-like system were programmed
        on the PDP-11. (And you can thank Richard Stallman's GNU project for
        freeing those for the masses. GNU stands for "GNU's Not Unix!")
        </p><p>You'll also note that Chuck Moore has gained his
        <strong>fourth and final arm</strong> in my drawing above
        ("fourth," ha ha).
        <em>This may or may not reflect actual events.</em>
        Also, I'm not sure if Moore would have been using a video terminal at
        that time. It's possible. DEC's first video terminal was the
        <a href="http://www.columbia.edu/cu/computinghistory/vt05.html">VT05</a>
        (columbia.edu),
        which came out in 1970.
    </p></div>
</div>

<div>
    <h2>So much porting!</h2>
    <p>All of this porting of Forth to new machines is possible because of
    <b>indirect threaded code</b>.
    <img src="https://ratfactor.com/forth/talkimg/threaded_code_abstract.png" alt="an abstract drawing of boxes and arrows representing threaded code in memory">
</p></div>

<div>
    <p>"Threaded code" in this usage is <strong>not</strong>
    related to concurrency, i.e. "multi-threaded programming".
    </p><p>It's code that is composed of subroutines addresses.
    </p><p>Threaded code can be machine code or interpreted.

    </p><div>
        <p>Wait, aren't <em>most</em> programs composed of calls to subroutines?
        </p><p>That's true. The big difference is that
        <a href="https://en.wikipedia.org/wiki/Threaded_code">threaded code</a>
        (wikipedia.org) in this sense
        doesn't actually contain the instructions to <em>call</em> the
        subroutines. It stores just the addresses.
        Therefore <em>another</em> routine is responsible for advancing
        a pointer over the address
        list and executing the subroutines.
        </p><p>Huh?
        </p><p>Yeah, there's no way around it, threaded code is complicated.
        </p><p>And <em>indirect</em> threaded code is even more complicated (and
        harder to explain).
        </p><p>"Hey, wait!" I hear you saying. "If Chuck hates complexity so
        much, why did he use such a complex method for Forth?"
        </p><p>That's completely fair.
        </p><p>But before we address that, I'll try to briefly explain how
        threaded code is stored and executed.
        </p><p>First, here's how <em>normal</em> machine code might be written:
    </p></div>
</div>

<div>
    <p>Direct calls (not threaded):
    </p><pre>jmp 0x0804000
jmp eax
    </pre>

    <div>
        <p>This is the simplest type of "call" to store in a program.
        We simply have the <code>jmp</code> (jump) instruction followed
        by the address to jump <em>to</em>.
        Here I show both a hard-coded address
        (<code>0x0804000</code>) and a register
        (<code>eax</code>).
        Both of these are "direct" for our purposes.
        </p><p><i>Alternatively, many processors have a more advanced <code>call</code>
        instruction. A call is more complicated because it has to do additional
        work behind the scenes. It must store a return address on "the stack"
        before jumping to the specified address. Then a <code>ret</code>
        (return) instruction at the end of the called routine can use the
        stored address to resume the execution just after the "call site" where
        the call was first made.  Why are return addresses stored on a stack?
        That's because you can nest calls. Pushing addresses as you jump and
        popping them in reverse order as you return keeps things nice and neat.
        This "the stack" is not what Forth refers to as "the stack". Forth's
        main stack is better known as "the parameter stack". Many Forth
        implementations <strong>also</strong> have a return stack!</i>
        </p><p>Anyway, this is direct and it's not threaded. Just jump to an address.
        </p><p>The first step of complication is adding indirection.
    </p></div>
</div>

<div>
    <p>Indirect calls (not threaded):
    </p><pre>jmp [eax]
    </pre>

    <div>
        <p>For this example to make sense, you need to know that the
        square brackets around the register (<code>[eax]</code>)
        is a common assembly language convention that means
        "the value at the memory address that is stored in register eax".
        </p><p>So <code>jmp [eax]</code> means "jump to the address
        stored at the address stored in register eax."
        </p><p>That's indirect.
        </p><p>So now we have the "indirect" part of "indirect threaded
        code." But what's the "threaded" part?
    </p></div>
</div>

<div>
    <p>Storing threaded code:
    </p><pre>&lt;addr pointing to code&gt;
&lt;addr pointing to code&gt;
&lt;addr pointing to code&gt;
&lt;addr pointing to code&gt;
    </pre>

    <div>
        <p>Instead of containing the actual instructions to jump or
        call subroutines:
        </p><pre>jmp 0x0804000
jmp 0x080A816
jmp 0x08C8800
jmp 0x08C8DD0
        </pre>
        <p><strong>Threaded code</strong> stores just the list of
        addresses:
        </p><pre>0x0804000
0x080A816
0x08C8800
0x08C8DD0
        </pre>
        <p>There are two consequences of storing code like this:
        </p><ul>
            <li>The address list takes up less memory than the full code to
                make the jump. (In fact, it takes a <em>lot</em> less on some
                historic machines.) This is good.
            </li><li>Some sort of "code interpreter" will need to be written to
                execute this list. You can't just send a list of addresses
                to a processor and expect it to work. This could be good or bad.
        </li></ul>
        <p>Another way to look at the list of addresses above is that, 
        conceptually, threaded code is basically a list of subroutines.
        </p><p>To complete our definition of "indirect threaded" code, we just
        need to put both concepts together:
    </p></div>
</div>

<div>
    <p>Storing <b>indirect threaded</b> code:
    </p><pre>&lt;addr pointing to addr pointing to code&gt;
&lt;addr pointing to addr pointing to code&gt;
&lt;addr pointing to addr pointing to code&gt;
&lt;addr pointing to addr pointing to code&gt;
    </pre>

    <div>
        <p>This is where it gets pretty crazy. So now we've got a second
        level of indirection. <strong>Why on Earth would we do this?</strong>
        </p><p>Well, this allows us to store a separate "code interpreter"
        (or "inner interpreter") for different <em>kinds</em> of subroutines!
        </p><p>Instead of pointing directly at subroutines, these addresses point
        at interpreters.
        Talk about ultimate flexibility - every subroutine in an indirect
        threaded program can have its own custom interpreter for the rest
        of its instructions...each of which can also be threaded...or
        indirectly threaded!
        </p><p>But what calls all of these inner interpreters?
        An outer interpreter, of course! The outer interpreter is the
        part we actually interact with when we sit down to type
        at a Forth terminal.
        </p><p>In <b>Forth</b>, indirect threaded code is a list of
        addresses pointing to the "inner interpreter" portions of
        words, which execute the rest of the word.
        What types of inner interpreters could we have, anyway?
        Well, for example, we might have one kind of word that stores a string
        in memory and another that executes machine code. But the only
        limit is your imagination.
        </p><p>Make sense?
        </p><p>I personally would not have understood
        that explanation at all until much later in my journey (I know this
        because similar - probably better - explanations flew right over
        my head). No doubt you're faster than me at apprehending this stuff
        and are already halfway through implementing your own Forth based on
        these descriptions.
        </p><p>None of the rest of the material requires understanding any
        of the above, so please don't feel you need to fully
        <a href="https://en.wikipedia.org/wiki/Grok">grok</a>
        (wikipedia.org)
        it before continuing. Indirect threading is an important part of
        Forth's history, but there are plenty of Forths that do not use it.
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/16k_memory.png" alt="drawing of a minicomputer saying 'i have 16k of core!'"></p><p><b>Threaded code</b> was much more common in the days of yore.
    </p><p>It is very dense, compact on disk and in memory.

    </p><div>
        <p>In addition to its compact storage, threaded code
        would have been <em>even more</em> efficient on the contemporary
        machines during Forth's gestation because
        calling subroutines often wasn't as simple as the
        <code>call</code> instruction found on "modern" architectures.
        </p><p>
        <a href="https://people.computing.clemson.edu/~mark/subroutines.html">Subroutine and procedure call support</a>
        (clemson.edu) by Mark Smotherman explains:
        </p><blockquote>
            "1963 - Burroughs B5000 - A stack-based computer with support for
            block-structured languages like Algol. Parameters and return address
            are stored on the stack, but subroutine entry is a fairly complex
            operation."
        </blockquote>
        <p>So the memory and performance improvements of this style of
        subroutine call were potentially
        very great indeed. This is one of the reasons for <strong>Forth's
            legendary reputation for high performance</strong>.
        </p><p>We'll revisit this topic from another angle soon. But if you're
        interested in these mechanics
        (and want to see the origin of the boxes and arrows
        drawings at the top of this section), check out this multi-part
        article series for The Computer Journal,
        <a href="https://www.bradrodriguez.com/papers/moving1.htm">MOVING FORTH Part 1: Design Decisions in the Forth Kernel</a>
        (bradrodriguez.com),
        by Brad Rodriguez.
        </p><p>The important thing is that we've now fully traced the origins
        of Forth from a simple command interpreter to the full-blown
        <strong>interactive language, editor, operating system, and
            method of code storage and execution</strong> it became.
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/chuck_hero.png" alt="drawing of chuck moore as a superhero with a cape and bowtie"></p><p>That's Forth's <b>origin story</b>.
    </p><ul>
        <li>Postfix notation (RPN)
        </li><li>Stack-oriented
        </li><li>Concatenative programming style
        </li><li>Interpreted
        </li><li>Highly adaptable to machine architectures
        </li><li>Extremely compact
    </li></ul>
    <p>This gives us the <i>why</i>.
    </p><div>
        <p>At last! Now we can put it all together:
        </p><p>Forth is <strong>postfix</strong> because that's a natural
        order for the computer and lends itself to an incredibly minimalistic
            interpreter implementation: get the values, operate on them;
        </p><p>Forth is <strong>stack oriented</strong> because that's a
            compact and convenient way to store
            values without needing to add variables or name things;
        </p><p>Forth is <strong>concatenative</strong> because building a
            language that can operate as a string of words is incredibly
            flexible and can adapt to just about any programming style without
            any help from the language itself. (And it turns out this is
            especially true when you throw in higher-order functions);
        </p><p>Forth is <strong>interpreted</strong> because that is
            interactive and allows the programmer to make fast changes on
            the fly or simply "play" with the system. This is part of
            Forth's adaptability and flexibility;
        </p><p>Forth is <strong>self-hosting</strong> because you can
            bootstrap a Forth implementation from a handful of words
            implemented in assembly and then write the rest in Forth;
        </p><p>Forth is <strong>extremely compact</strong> because machines at
            the time had limited memory and this gave Forth an edge on
            other interpreters (and even compiled languages!) on
            mainframes and mini-computers.
        </p><p>Now that we have everything in historical context, I think it's
            much clearer why Forth exists and why it takes the peculiar
            form that it does.
        </p><p><strong>None of this was planned. Chuck didn't sit down at a terminal
        in 1958 and conjure up Forth. Instead, he grew a system to
        serve his needs and to make use of new hardware as it was made
        available.</strong>
        </p><p>Reading about Forth's history is a wonderful way to understand
        what makes Forth special and what it's <i>about</i>.
        </p><p>But even knowing all of this, I was still a long way off from a true
        understanding of how this <strong>all comes together</strong> in an
        actual working system. I didn't really understand how it worked.
        And I didn't understand what Forth was actually like to <em>use</em>
        In other words, I still didn't understand Forth as a
        <em>programming language</em>.
    </p></div>
</div>

<div>
    <h2>Actually Understanding How Forth Works</h2>
    <p>Somewhere along the way, I came across these quotes...
    </p><p>"To understand Forth, you have to implement a Forth."
    </p><p>-- Somebody on the Internet
    </p><p>And</p>
    <p>"Take a look at JonesForth."
    </p><p>-- Everybody on the Internet

    </p><div>
        <p>I've mentioned it before, but I'll point it out again. Notice the
        phrasing "implement <em>a</em> Forth."
        </p><p>As we've established, Chuck Moore believes a Forth system is best
        when it is custom-tailored to the system and task at hand.  So it
        should come as little surprise that writing your own Forth or Forth-like is
        entirely "par for the course" in any would-be-Forther's quest to
        discover the True Meaning of the language and enter the mystical realm
        where All is Revealed.
        </p><p>Well, what else could I do?
        </p><p>Having no other clear course of study, I decided to heed the
            wisdom of the crowd.
        </p><p>Presenting...
    </p></div>
</div>


<div>
    <h2>JonesForth and "Assembly Nights"</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/assembly-nights.jpg" alt="My faithful Asus EeePC 701 waiting romantically on the bed. Text reads 'Assembly Nights'">
    <i></i></p><div>
        <p>To really get to know it, I took Forth to bed with me.
        </p><p>I wrote
        <a href="https://ratfactor.com/assembly-nights">Assembly Nights</a>
        when I realized how much I was enjoying myself:
        </p><blockquote>
            "Over the last three months, I've developed an unusual
            little nighttime routine..."
        </blockquote>
        <p>I prepared myself for dealing with the JonesForth source
        (i386 assembly language in the GNU GAS assembler)
        by learning some assembly and Linux ABI basics.
        JonesForth is 32-bit only and uses the Linux system call ("syscall")
        ABI directly.
        </p><p>Then I spent roughly a year porting JonesForth into a complete
        working copy in NASM assembler. (Yes, that's a "port" from one flavor
        of i386 asm to another.)
        </p><p>I did a tiny bit almost every night.  A lot of it was debugging in
        GDB.
    </p></div>
</div>

<div>
	<p><img src="https://ratfactor.com/forth/talkimg/nasmjf.png" alt="my giant gold on gray logo for nasmjf"></p><p>My NASM port of JonesForth: <code>nasmjf</code>
    </p><p>Opening the third eye by (re)implementing Forth.

    </p><div>
        <p>Here's the
        <a href="https://ratfactor.com/nasmjf/">nasmjf web page</a>
        </p><p>In the process of writing the port, I learned how a traditional
        indirect threaded Forth works.
        </p><p>And I learned that <em>it takes time</em> to absorb such a
        twisty-turny  method of code execution.
        </p><p>Especially if the x86 assembly language tricks are new to you like
        they were for me.
    </p></div>
</div>

<div>
    <p>JonesForth ascii art:
    <img src="https://ratfactor.com/forth/talkimg/jonesforth1.png" alt="jonesforth ascii art explaining flow of threaded code">

    </p><div>
        <p>One of the first things you encounter when you open up the
        <code>jonesforth.S</code> (a single file which contains the assembly
        language portion of JonesForth) are many ASCII art diagrams.
        </p><p>Richard W.M. Jones does an excellent job of walking you through
        the workings of the interpreter and explaining the i386 instruction
        set features he uses.
        </p><p>If the diagram above seems bewildering, I agree.
        </p><p>So, of course, I thought maybe I could do better...
    </p></div>
</div>

<div>
    <p>Here's my attempt (from the <code>nasmjf</code> source):
    <img src="https://ratfactor.com/forth/talkimg/nasmjf1.png" alt="my nasmjf ascii art explaining flow of threaded code">

    </p><div>
        <p>After I was done with my port, I tried to make an ASCII art diagram
        of my own to capture my new understanding.
        In fact, this is one of several.
        </p><p>With the benefit of the distance of time, it is clear to me that
        these things only make sense once you already understand them to
        some degree. But the act of <em>making them</em> is extremely useful
        for solidifying your understanding.
        </p><p>But wait, there's more!
        </p><p>Both ASCII art diagrams above are just <em>part</em> of the complete
        indirect threaded execution system. They're just showing how the "inner
        interpreter" works to execute Forth words.
        </p><p>Perhaps you recall from the section about indirect threaded code
        above that the second level of indirection allows different
        "interpreter" routines to execute different types of threaded
        subroutines?  Well, that's all those two ASCII diagrams are trying
        show.
        </p><p>But when we say that Forth is an <em>interpreted</em> language,
        this is not what we're talking about. There's also the "outer interpreter"
        that the programmer interacts with.
    </p></div>
</div>

<div>
    <p>The indirect threaded code is just the tip of the iceberg!
    </p><p><code>nasmjf</code> inner/outer interpreter diagram:
    <img src="https://ratfactor.com/forth/talkimg/forth-diagram.png" alt="my nasmjf diagram showing outer and inner interpreter">
    
    </p><div>
        <p>In the vector image I made above for nasmjf, I attempted to map out
        the <strong>whole thing</strong> in my own words.
        </p><p>If you take anything from this image, it's that
        <code>INTERPRET</code> looks up words (functions) by name and calls
        them by executing the interpreter routine whose address is stored in
        the word (again, this is the indirect threading part). In turn, there
        may be any number of interpreters, but the three main types used in
        JonesForth are:
        </p><ul>
            <li>Pure assembly language routines are their own interpreters.
            </li><li>"Regular" Forth words use the <code>DOCOL</code> interpreter.
                DOCOL executes the rest of the threaded code in the word,
                most of which is just a list of addresses, but some of
                which will be data. This is the "normal" kind of threaded
                subroutine.
            </li><li>Numeric literals have a tiny interpreter routine inline with
                the data that just pushes their value to the stack. Numeric
                literals don't have to be words, though, in JonesForth,
                they're just a bit of inlined machine code.
        </li></ul>
        <p>But even knowing this only helps to explain how code <em>starts</em>
        executing. How does this type of Forth know what to run after a word is
        complete?
        </p><p>Ah, for that we have this:
    </p></div>
</div>

<div>
    <p>To get from one <b>code word</b> to another requires a bit of
       assembly pasted at the end of each one. This is
       the <b>NEXT</b> macro. Here it is from <code>nasmjf</code>:
    </p><pre>%macro NEXT 0
    lodsd     ; NEXT: Load from memory into eax, inc esi to point to next word.
    jmp [eax] ; Jump to whatever code we're now pointing at.
%endmacro
    </pre>

    <div>
        <p>Notice the term "code word". That's the Forth term for words
        written in pure assembly language.
        </p><p>Every code word has this macro at the end. (Some Forths actually
        call a subroutine for this. JonesForth uses this two-line macro
        because the action is so efficient in i386 machine code.)
        </p><p>Remember the list of addresses in the explanation of
        "indirect threaded" code? This is how we execute them sequentially.
        </p><p>This implementation uses the i386 <code>lodsd</code> instruction
        to take care of two operations in one: move a "double word"
        from memory into a register, and then update another register
        so that it points to the next "double" spot in memory.
        </p><p><em>(Rant: And a "double" is 32 bits on Intel chips for the really
            annoying reason that they kept the definition of "word" at 16 bits
            even as the platform moved to 32 and then 64-bit architecture. So
            "word" on Intel architectures is a completely meaningless thing
            that you just have to memorize as "16 bits" even though
            "word" is supposed to be the native data size of the architecture.
            And what's worse is that the tools for working with programs on
            Intel chips like GDB then refer to everything with the
            corresponding C names for everything, which naturally assumed that
            the architecture names would be based on reality. But they aren't.
            So terms like "double" and "long" are basically just absolutely
            worthless legacy garbage to memorize and useful only to C and Intel
            architecture veterans.)</em>
        </p><p>Okay, so now the <code>eax</code> register points to the next
        threaded subroutine address in memory. The <code>jmp</code> starts
        executing whatever that points to, which will be the "inner interpreter"
        for that subroutine.
        </p><p>Got that?
        </p><p>A lot of moving parts, right?
        </p><p>There's more:
    </p></div>
</div>

<div>
    <p>To get from one <b>colon word</b> to another uses a bit of
       assembly pasted at the end of each in a chunk called
       the <b>EXIT</b> macro. Here it is from <code>nasmjf</code>:
    </p><pre>DEFCODE "EXIT",EXIT,0
    POPRSP esi            ; pop return stack into esi
NEXT
    </pre>

    <div>
        <p>Remember, there's two fundamental types of words in a
        traditional Forth like JonesForth:
        "Code" words and "colon" words.
        Code words are primitives written in  machine code.  Colon words are
        the "regular" words actually written in the Forth language.
        </p><p>These "colon" words (so-named because they are assembled
        via the "COLON" compiler, which we'll talk about in a moment),
        all end in the so-called <code>EXIT</code> macro.
        </p><p>The <code>EXIT</code> macro handles the return stack.  <em>Then</em>
        there will be a <code>NEXT</code> after that to conclude whatever code
        word primitive we were in (we're always in at least one because the
        "outer-most" interpreter is a code word primitive!), so the
        process we described above will automatically start where we left off
        at the "call site" of the word we
        just finished executing.
        </p><p>If you weren't lost before, surely this will do the trick?
        </p><p>I do have another attempt to explain how this all nests in
        a sort of indented pseudocode:
    </p></div>
</div>

<div>
    <p>My comment in <code>nasmjf</code> attempting to explain the
		execution of indirect threaded
        code as a nested
        sequence of <b>NEXT</b> and <b>EXIT</b> and <b>QUIT</b>:
    </p><pre>; QUIT (INTERPRET)
;     * regular word
;         DOCOL
;         NEXT
;         * regular word
;             DOCOL (codeword
;             NEXT
;             * code word
;                 &lt;machine code&gt;
;             NEXT
;             * code word
;                 &lt;machine code&gt;
;             NEXT
;         EXIT
;         NEXT
;    EXIT
;    NEXT
; QUIT (BRANCH -8 back to INTERPRET for more)
    </pre>

    <div>
        <p>This nested view of the process is as close as I've ever been to
        explaining (to myself) what the <em>entire</em> execution flow
        looks like at a high level.
        </p><p>I'm sure every Forth implementer has their own mental model.
        </p><p>You'll notice we didn't even talk about <code>QUIT</code>.
        Other than the name, that one's not nearly as bad - it's really
        just the end of the outer interpreter loop.
        </p><p>(So, yeah, we have <code>EXIT</code> and
        <code>QUIT</code>, neither of which leave Forth... Hey, it was the
        1960s. Things were different then.)
    </p></div>
</div>

<div>
    <p>Absolutely nothing else drives the flow of an indirect
		threaded Forth application: It's addresses stored in
		registers, a return stack, and a handful of assembly instructions
		at the end of each machine code word jumping to the next instruction.
    </p><p>It's like a delicate clockwork machine.
</p></div>

<div>
    <p><strong>Don't you see how simple it is?</strong>
    <img src="https://ratfactor.com/forth/talkimg/crazy_chuck.png" alt="drawing of chuck as crazy charlie explaining a theory with wild eyes and a wall covered in paper and strings">

    </p><div>
        <p>Historical note: The above "Crazy Chuck" drawing is a parody of
        a popular meme with actor Charlie Day's character in the episode
        "Sweet Dee Has a Heart Attack" from the show <i>It's Always Sunny
        in Philadelphia</i>:
        </p><blockquote>
            "Every day Pepe's mail's getting sent back to me. Pepe Silvia, Pepe
            Silvia, I look in the mail, this whole box is Pepe Silvia!"
        </blockquote>
        <p>You, citizen of the distant future, will not have recognized this
        parody, but at least now you can look it up.
    </p></div>
</div>

<div>
    <p>Forth <i>is</i> complex when taken as a whole. But it is made of tiny
        pieces, each of which is <i>very</i> simple. The concept was created
        over a period of years on very constrained systems.
        Each part created only as needed.
    <img src="https://ratfactor.com/forth/talkimg/threaded_code_abstract.png" alt="an abstract drawing of boxes and arrows representing threaded code in memory">

    </p><div>
        <p>I'll repeat your question from before so you don't have to:
        </p><p><strong>
        "Hey, wait! But if Chuck hates complexity so
        much, why did he use such a complex method for Forth?"</strong>
        </p><p>This is where the historical context is, once again, very revealing:
        </p><p>As we've seen, Charles H. Moore did not create Forth all at once in a
        single lightning bolt of inspiration.
        It began as a simple command interpreter and executor and grew
        from there.
        It has always consisted of tiny little parts, working together.
        </p><p><strong>Each of these tiny parts is extremely simple on its own.</strong>
        </p><p>And each was added over a period of time as the need arose.
        </p><p>I think that's the genius of Forth: That all of these little
        pieces can work together to make a running system and yet <strong>still
        remain independent</strong>.
        You can learn each of these in isolation. You can replace them
        in isolation.
        </p><p><strong>Ultimate flexibility and simplicity at the lowest level of
            the implementation comes at the cost of easy understanding at
            higher levels.</strong>
        </p><p>When growing a system like this, most of us would have thought
        bigger, Moore thought smaller.
        </p><p>Let's do the same.
        I've thrown the terms "code word" and "colon word" around a lot.
        I've explained them a bit, but we've never given a proper introduction.
        </p><p>Let's go small:
    </p></div>
</div>

<div>
    <h2>Code words</h2>

    <div>
        <p>Again, <b>Code words</b> are primitives written in machine language
        supplied by the Forth implementation.
        </p><p>Let's see some <em>real</em> code words so we can de-mystify them
        once and for all. These are extremely simple
        and extremely concrete examples of actual NASM assembly language source
        from my <code>nasmjf</code> port of JonesForth:
    </p></div>
</div>


<div>
    <p>Small and simple:
    </p><pre>DEFCODE "SWAP",SWAP,0
    pop eax
    pop ebx
    push eax
    push ebx
NEXT
    </pre>

    <div>
        <p>Is that really SWAP? Yes, it really is! We're just telling the
        CPU to pop the two most recent values from the stack and then push them
        back in the opposite order.
        </p><p>(JonesForth uses the i386 call/return stack as a Forth parameter
        stack so we can use the native "pop" and "push" to make these
        operations easy. In exchange, we lose the ability to use "call"
        and "ret" for subroutines.)
        </p><p>The <code>DEFCODE</code> macro is housekeeping - it creates the
        entry's header in the Forth word dictionary.
        </p><p>Notice the <code>NEXT</code> macro we talked about previously?
        Remember, that's just another two lines of assembly pasted at the
        end of this routine.
    </p></div>
</div>

<div>
    <p>Even Smaller:
    </p><pre>DEFCODE "DUP",DUP,0
    mov eax, [esp]
    push eax
NEXT
    </pre>

    <div>
        <p>We're down to just two instructions now! We move the value pointed
        at by the <code>esp</code> register into eax and then push it onto the
        stack.  </p><p>To understand <em>why</em> this duplicates the top item on
        the stack, you need to know how the <code>esp</code> register is used.
        Here's the relevant comment from the JonesForth source:
        </p><blockquote>
            "In this FORTH, we are using the normal stack pointer (%esp) for the
            parameter stack.  We will use the i386's "other" stack pointer (%ebp,
            usually called the "frame pointer") for our return stack."
        </blockquote>
        <p>Which means that <code>esp</code> points to the current top of 
        the parameter stack. So pushing that value on the stack duplicates
        the top value. (This could also have been written more clearly with
        <em>three</em> instructions: one "pop" and two "push"es.)
    </p></div>
</div>

<div>
    <p>The Smallest:
    </p><pre>DEFCODE "DROP",DROP,0
    pop eax
NEXT
    </pre>

    <div>
        <p>Now we have an entire Forth word defined as a <em>single</em>
        instruction! DROP just "removes" the top value from the stack. In this
        case, we pop it into the <code>eax</code> register and then don't do
        anything with it, essentially throwing it away. (Alternatively, we
        could have decremented the <code>esp</code> register, but in this case,
        the "pop" is both shorter <em>and</em> clearer.)
        </p><p>Now let's see these three words in action in a <em>real</em>
        Forth program that moves some <em>real</em> numbers around
        in memory...
    </p></div>
</div>

<div>
    <h2>Code words in action</h2>
    <pre>8 7      <i>8 7</i>
SWAP     <i>7 8</i>
DROP     <i>7</i>
DUP      <i>7 7</i>
    </pre>

    <div>
        <p>The code word primitives we've just defined are used by the
        rest of the Forth implementation to define colon words in the
        language itself. If you write Forth applications, your own
        colon words will probably use these heavily.
        </p><p>You can also call them interactively in the interpreter.
        </p><p>The above example shows what it might be like to use these
        three primitives right at the keyboard. The column on the right
        shows the state of the parameter stack after each line of input.
        </p><p>Apart from pushing the two numbers on the stack (<code>8 7</code>)
        , we've now seen the assembly language code for the entire
        program shown above. That makes this pretty "bare metal" stuff, right?
        </p><p>Here's the walk-through:
        </p><ul>
            <li>We start with 8 and then 7 on the top of the stack.
            </li><li>SWAP reverses the order of the stack so 8 is now on the top.
            </li><li>DROP pops the 8 and throws it away. Now only 7 remains.
            </li><li>DUP pushes a second copy of 7 onto the top of the stack.
        </li></ul>
        <p>Again, these instructions could exist in the definition of a word or
        you could type them interactively in the running Forth interpreter.
        The result is the same.
        </p><p>I think there's something pretty magical about realizing that
        typing these instructions is running specific machine code
        sequences exactly as they were entered. In this implementation,
        there's no optimizing compiler or virtual machine acting as middle-man.
        You really are communicating directly with the processor.
    </p></div>
</div>

<div>
    <p><code>nasmjf</code> has 130 code words. Mostly for efficiency.

    </p><div>
        <p>If you weren't already wondering, perhaps you are now:
        How many Forth words need to be defined in machine code
        to have a "bootstrappable" Forth system?
        </p><p>There are some theoretical minimums. But as you get down to an
        absurdly small number of instructions, the Forth code written with the
        primitives (to implement the rest of the language) approaches absurdly
        large amounts of convolutions that test the limits of both programmer
        ergonomics and computational inefficiency.
        </p><p>Check out this amazing article by Frank Sergeant:
        <a href="https://pygmy.utoh.org/3ins4th.html">A 3-INSTRUCTION FORTH FOR EMBEDDED SYSTEMS WORK</a>
        (utoh.org).
        </p><blockquote>"How many instructions does it take to make a Forth for
            target development work? Does memory grow on trees? Does the cost
            of the development system come out of your own pocket? A 3-
            instruction Forth makes Forth affordable for target systems with
            very limited memory. It can be brought up quickly on strange new
            hardware. You don't have to do without Forth because of memory or
            time limitations. It only takes 66 bytes for the Motorola MC68HC11.
            Full source is provided."
        </blockquote>
        <p>You read that right: <strong>66 bytes</strong>.
        </p><p>And later:
        </p><blockquote>"The absolute minimum the target must do, it seems to me,
            is fetch a byte, store a byte, and call a subroutine. Everything
            else can be done in high-level Forth on the host."
        </blockquote>
        <p>Which reminds me, did you know there is such a thing as a
        <a href="https://en.wikipedia.org/wiki/One-instruction_set_computer">one-instruction set computer</a>
        (wikipedia.org)?
        And <em>of course</em> you can run Forth on them:
        <a href="https://github.com/howerj/subleq">16-bit SUBLEQ eForth</a>
        (github.com).
        </p><p>But that's nuts.
        </p><p>How about something a little more realistic?
    </p></div>
</div>

<div>
    <p><code>sectorforth</code> has 10 code words.

    </p><div>
        <p>Cesar Blum's
        <a href="https://github.com/cesarblum/sectorforth">sectorforth</a>
        (github.com)
        is:
        </p><blockquote>"...a 16-bit x86 Forth that fits in a 512-byte
            boot sector. Inspiration to write sectorforth came from a
            1996 Usenet thread."
        </blockquote>
        <p>See? There's Usenet again. It wasn't just me reading all that lore.
        </p><p>The author's
        <a href="https://old.reddit.com/r/Forth/comments/j0lxgq/sectorforth_a_16bit_x86_forth_that_fits_in_a_boot/">posting of the project to the Forth sub-reddit</a>
        (reddit.com)
        has additional insight:
        </p><blockquote> "I've always been fascinated by the idea of having a
            minimal kernel of primitives from which "everything" can be built.
            Before Forth, I had only seen that in the form of Lisp's "Maxwell
            equations of software", which is cool, but always left me a little
            disappointed because it is too abstract to build something that you
            can actually interact with - you can't break out of its esoteric
            nature...
            <p>
            
            With Forth, however, you can start from almost nothing, and start
            adding things like ifs, loops, strings, etc., things that look more
            like your day-to-day programming. I find that there's a lot of
            beauty in that."
        </p></blockquote>
        <p>Note: The statement about Maxwell's equations surely refers to
        Alan Kay's famous quote about LISP from
        <a href="https://queue.acm.org/detail.cfm?id=1039523">A Conversation with Alan Kay</a>
        (acm.org):
        </p><blockquote>
            "Yes, that was the big revelation to me when I was in graduate
            school - when I finally understood that the half page of code on
            the bottom of page 13 of the Lisp 1.5 manual was Lisp in itself.
            These were "Maxwell's Equations of Software!" This is the whole
            world of programming in a few lines that I can put my hand over."
        </blockquote>
        <p>Okay, so we've talked about <b>code words</b>
        that are just chunks of machine code that can be called upon
        at any time.
        </p><p>Now let's see what <b>colon words</b> are all about...
    </p></div>
</div>

<div>
    <h2>Colon words are made of Forth!</h2>
    <p>Let's make one:
    </p><pre>: SDD SWAP DROP DUP ;
    </pre>

    <div>
        <p>A colon word is so-named because its definition begins with the
        "<code>:</code>" character.
        </p><p>The example colon word definition above creates a new word called
        <code>SDD</code> that is a composition of the three code words we
        defined earlier: <code>SWAP</code>, <code>DROP</code>, and
        <code>DUP</code>.
        Perhaps the word "composition" brings to mind the concatenative
        terminology we explored earlier in this quest?
        </p><p>As this example demonstrates, colon words are defined entirely
        by other words, which may be code words or other colon words.
        You can also have numeric values, e.g. 8 and 7, which
        are handled by the interpreter.
        </p><p>(You can also have strings, which looks like data...but those are
        just input that happens to follow one of the special words, e.g.
        <code>."</code> (dot quote), that knows how to handle the input!)
        </p><p>Let's see it in action:
    </p></div>
</div>

<div>
    <pre>8 7      <i>8 7</i>
SDD      <i>7 7</i>
    </pre>

    <div><p>
        The effect of calling our new <code>SDD</code> word is, of course,
        identical to calling the three separate words <code>SWAP</code>,
        <code>DROP</code>, and <code>DUP</code> in sequence.
        </p><p>In <b>indirect threaded code</b> terms,
        this colon word has been "compiled" into the addresses of
        the "inner interpreters" for each of the three code words.
        But feel free to ignore this detail!
        </p><p>Let's demystify this further because the Forth "compiler" is
        probably much, much simpler than you'd think:
    </p></div>

<div>
    <h2>How ":" works</h2>
    <p>Here's what really happens when we enter this:
    </p><pre>: SDD SWAP DROP DUP ;
    </pre>
	<p>Colon (<code>:</code>) fetches the word name (SDD) and sets "compile mode".
	</p><p>Semicolon (<code>;</code>) completes the word's entry in the <b>dictionary</b> and unsets "compile mode".
    
    </p><div>
        <p>It might still be surprising that ":" is a Forth word.
        </p><p>It looks like the sort of thing we would call "syntax" in other
        programming languages, but it really isn't. It's a word.
        </p><p>You can even <em>replace</em> ":" with your own definition
        to extend or alter Forth to do your bidding!
        </p><p>It may be hard to fully grasp for a while, but
        Forth's <em>only</em>
        syntax is the whitespace between tokens of input.
        </p><p><i>Tokens are tokenized by a word called "WORD", which is an
            incredibly confusing overload of the term. Sorry.</i>
        </p><p>(You'll also notice I've mentioned the term "dictionary" a couple
        times now. It's kind of obvious that a dictionary can hold words, but
        I haven't properly explained the Forth dictionary yet. Don't worry,
        we're almost there.)
        </p><p>Okay, so "<code>:</code>" switches the "outer interpreter" into
        compile mode and <code>;</code> switches it back. But what does
        <em>that</em> mean?
    </p></div>
</div>

<div>
    <p><b>"Compiling"</b> in Forth means putting one of two things into memory:
	</p><ul>
		<li>The address of a word, or
		</li><li>A value literal and a bit of code that pushes it on the stack
	</li></ul>
    <p>At its simplest, compiling is just like executing, but we're <em>storing</em>
	addresses instead of jumping to them.

    </p><div>
        <p>Actually, that's understating the elegance and simplicity of how this
        works, which is one of the most mind-blowing things in Forth.
        </p><p>Forth uses the <em>same</em> interpreter to both compile
        and execute code!
        </p><p>In a traditional Forth, the interpreter executes words as you
        enter them. Unless you're in "compile mode", <em>then</em> it is
        compiling those words as addresses into memory <em>on the fly</em>
        as you enter them.
        </p><p>It's straight from the keyboard to memory.
        </p><p>To make this concrete, let's step through the example.
        </p><p>Here's our definition again:
        </p><pre>: SDD SWAP DROP DUP ;
        </pre>
        <p>In "normal mode", the interpreter is executing everything as we enter it.
        </p><p>When the interpreter encouters the "<code>:</code>" word, we're
        still in "normal mode", so it looks "<code>:</code>" up in the
        dictionary, finds it, and executes the word. The definiton of
        "<code>:</code>" will collect the name "SDD" and turn on the "compile
        mode" switch.
        </p><p>Now when the interpreter hits the "<code>SWAP</code>" word, it will
        look up its address in the dictionary as usual, find it, and
        store the address in the next available memory slot where we
        compile new words (a very important built-in variable called
        "<code>HERE</code>" keeps track of this memory position).
        </p><p>The same thing happens for "<code>DROP</code>" and "<code>DUP</code>".
        We're compiling as fast as we can type!
        </p><p>Then a bunch of really interesting things happen when the interpreter
        gets to "<code>;</code>" (SEMICOLON).
        </p><p>First, "<code>;</code>" is looked up and found in the dictionary and
        then...Hey, wait!
        Why isn't the address of the "<code>;</code>" word
        <em>also</em> compiled into our new definition? <strong>That's a
            great question!</strong>
        </p><p>Time for another trick. One of the flags stored in a word's
        dictionary entry is the "immediate" flag. When this flag is turned on,
        the word is always executed immediately
        <em>even in compile mode</em>.
        The "<code>;</code>" word is an immediate word, so it executes instead
        of being compiled.
        </p><p>(Ready to have your head turned inside-out? There are <em>also</em>
        tricks for <em>compiling</em> immediate words into word definitions!
        It's simple enough, but still pretty mind-bending stuff when you first
        encounter it.)
        </p><p>The definition of "<code>;</code>" turns off compile mode. Then it
        does some housekeeping to complete the entry of the new
        <code>SDD</code> word in the dictionary.
        </p><p>As soon as "<code>;</code>" returns control to the outer
        interpreter, we're now sitting in normal mode again and our new
        <code>SDD</code> word is available to be called directly or compiled
        into <em>other</em> words.
        </p><p>See what I mean? It's all made of these tiny little parts.
        </p><p>Each part is incredibly simple, but trying to explain how the
        parts fit together takes paragraphs of text.
        </p><p>Speaking of simple...
    </p></div>
</div>

<div>
    <h2>Almost no syntax = simple interpreter and extreme extensibility</h2>
    <p>The tiny set of rules that govern the interpreter:
    </p><ul>
        <li>WORD gets a token.
        </li><li>Is it in the dictionary? <i>(And are we compiling?)</i>
        </li><li>Is it a numeric literal? <i>(And are we compiling?)</i>
        </li><li>Otherwise, error!
    </li></ul>
    <p>Let's look at our example code again. The first line
    runs, the second line compiles:
    </p><pre>8 7 SWAP DUP +

: SDP SWAP DUP + ; 8 7 SDP
    </pre>

    <div>
        <p>It would be annoyingly redundant to walk through the two lines of
        Forth above step-by-step because they are nearly identical. The only
        difference is that the first line simply executes each word as it is
        encountered (SWAP, DUP, +). The second line compiles those three words
        into a new word called SDP (for "Swap Dup Plus"). The result of both
        lines is the same.  (7 and 16 on the stack).
        </p><p>Only the numbers (8 and 7) and the spaces separating words have
        <em>any</em> special meaning to Forth's "outer" interpreter.
        Everything else is looked up in the dictionary.
        </p><p>Ah, but did you notice the order of the bullet points above?
        We check to see if a token is in the dictionary <em>before</em>
        we check to see if it is a numeric literal.  Yes, even numbers are
        looked up in the dictionary first! Does that perhaps give you any ideas
        about that <em>magic trick</em> I promised at the start of this article?
        Don't worry, the trick is forthcoming.
        </p><p>Furthermore, input is not returned to the main Forth "outer"
        interpreter until a dictionary word completes executing. So there is
        absolutely <strong>no limit</strong> to the types of
        <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language</a>
        (wikipedia.org)
        you can create.
        </p><p>And if that weren't enough, You can also replace every single piece
        of the Forth interpreter itself. Remember, they're all independent little
        cogs in the machine. Forth is the ultimate freedom.
        </p><p>I've alluded to this in several different ways above, but I'll make
        a bold claim:
        <strong>Forth has the simplest syntax and therefore the simplest
        parser, interpreter, and compiler <em>ever</em> used in a "mainstream"
        general-purpose programming language.</strong>
        </p><p>Two other languages previously mentioned, Lisp and Tcl, are also
        famously syntactically minimalistic languages. People have
        written incredibly tiny implementations of each:
        </p><ul>
            <li>Lisp: <a href="https://github.com/jart/sectorlisp">sectorlisp, a 512-byte implementation of LISP</a> (github.com/jart)
            </li><li>Tcl: <a href="http://oldblog.antirez.com/post/picol.html">picol, a Tcl interpreter in 550 lines of C code</a> (antirez.com)
        </li></ul>
        <p>Mind you, both of these people (Justine "jart" Tunney and Salvatore
        "antirez" Sanfilippo) are incredible programmers, but these examples
        hint at what is possible.
        </p><p>But Forth surely takes the cake. Even a certified non-genius
        like myself can write an entire Forth interpreter in a
        couple hundred assembly instructions. (See "Meow5" below.)
        </p><p>Because of its extreme simplicity, tokenizing Forth can be done in
        a mere handful of assembly instructions on many processors.
        </p><p>And as mentioned, once you've written a Forth interpreter, you're
        well on your way to a working Forth compiler.
        </p><p>I've alluded to Forth's flexibility and extensibility on several
        different occasions now. But this is no mere party trick. Forth
        relies on the fact that you can do anything in Forth.
        </p><p>In the next example, we'll see how Forth implements control structures.
    </p></div>
</div>

<div>
    <p>The definition of <b>IF...THEN</b> from jonesforth.f:
    </p><pre>: IF IMMEDIATE ' 0BRANCH , HERE @ 0 , ;

: THEN IMMEDIATE DUP HERE @ SWAP - SWAP ! ;
    </pre>

    <div>
        <p>This right here is one of the most mind-blowing things about Forth,
        and a solid reason to title this, "The programming language that writes
        itself."
        </p><p>Even something as fundamental as <code>IF</code> is defined in
        the language! Forth is not the only language that can do this, but
        few languages invite the programmer to participate so thoroughly
        in the inner workings as often or as joyfully as Forth.
        </p><p>Figuring out how the IF and THEN definitions above actually
        work is left as an exercise for the reader, but here's a brief
        explanation of the new words they use:
        </p><pre><b>'</b>       - gets the address of the word that follows, put on stack
<b>0BRANCH</b> - branch to the next value if the top of the stack has 0
<b>,</b>       - 'compile' the current stack value to the memory at HERE
<b>@</b>       - fetch value from address on stack, put value on stack
<b>!</b>       - store to memory (stack contains address, then value)
        </pre>
        <p>(By the way, I'll go on the record to say this: The
        early parts of bootstrapping Forth in Forth (at least
        the top 25% of jonesforth.f) is <em>significantly</em> more
        mind-bending than implementing the low-level code word definitions
        written in assembly language. In fact, any time I needed to return to
        the assembly, it was like a comforting blanket of simplicity compared
        to the logic puzzle of those Forth-in-Forth primitives!)
        </p><p>But, even seeing control structures like <code>IF..THEN</code>
        implemented in the language may not have prepared you for seeing this
        next trick.
        </p><p>This should drive home the fact that Forth has almost no native
        syntax:
    </p></div>
</div>

<div>
    <p>The definition of <b>( )</b> <i>nested comments</i> from jonesforth.f:
    </p><pre>: ( IMMEDIATE
    1
    BEGIN
        KEY DUP '(' = IF DROP 1+
        ELSE ')' = IF 1- THEN
        THEN
    DUP 0= UNTIL
    DROP
;

(
    From now on we can use ( ... ) for comments.
...
    </pre>

    <div>
        <p>Yeah, you read that right. Even <em>comments</em> are implemented
        in the language! And you can re-define them or add your own kind of
        comments!
        </p><p>Some of you are soiling yourselves in excitement right now.
        Some of you are soiling yourselves in fear.
        We're all just sitting here in our own filth now.
        </p><p>And now, at last, we are ready to discuss the power of the Forth
        dictionary.
    </p></div>
</div>

<div>
    <h2>The Dictionary</h2>
	<p>A Forth dictionary traditionally uses a linked list.
    </p><p>Word matching is done starting from the <em>end</em>
    (most recent entries) first, so:
	</p><ul>
		<li>You can redefine <i>any</i> word, even the ones originally
			defined in assembly!
		</li><li>Words depending on previous definitions of redefined words
            won't break because the compiled addresses still point to
            the original word, not the new definition!
		</li><li><i>You</i> are in complete control!
		</li><li>Again, Forth = freedom!
	</li></ul>

    <div>
        <p>It's not <em>just</em> minimalistic syntax. Arguably, the
        <em>real</em> reason Forth is so extensible is because of
        the dictionary.
        </p><p>As mentioned in the points above, more recent word definitions
        override older ones with the same name - the interpreter stops at the
        first match.
        </p><p>But as mentioned above, existing compiled words that use the
        <strong>old definitions</strong> are not affected because 
        <em>name</em> of the old word, they've stored the <em>address</em>.
        The address of the old word still points to the old word.
        </p><p>You don't have to strictly replace. You can <em>extend</em>
        words by calling the original word from a new one with the same name!
        </p><p>You are perhaps wondering what happens if
        you attempt to make a <strong>recursive word</strong>. By
        default, ':' (COLON) marks the word currently being compiled into the
        dictionary as hidden or disabled so that previous definitions can be
        called, as mentioned.
        This is why we have a word called RECURSE which inserts a
        call to the current word within itself. Because all information
        in Forth is global (including the address of the current word being
        compiled, defining RECURSE is incredibly simple (just four words in the
        JonesForth definition).
        </p><p>Besides making new control structures or other types of extensions
        to the language, what else can we do with these abilities?
    </p></div>
</div>

<div>
	<p><img src="https://ratfactor.com/forth/talkimg/apple_bw.png" alt="grayscale apple"></p><p>It's not just the language itself that is unusually malleable.
    <strong>Your program written in Forth can be flexible too.</strong>
	</p><p>Here is an example lifted and paraphrased from <i>Thinking Forth</i>
    by Leo Brodie.
    </p><p>Say we create a variable to hold a number of apples:
	</p><pre>VARIABLE APPLES
20 APPLES !
APPLES ? <i>20</i>
	</pre>
	<p>Forth variables put <i>addresses</i> on the stack.

	</p><div>
		<p>Note: I have a physical copy of <i>Thinking Forth</i> because
        I think it's great. But the publishers have kindly made it available
        for free online:
		<a href="https://www.forth.com/wp-content/uploads/2018/11/thinking-forth-color.pdf">Thinking Forth (PDF)</a>
        (forth.com)
        </p><p>Let's walk through the three lines above. Here's the first line:
        </p><pre>VARIABLE APPLES
        </pre>
        <p>The VARIABLE word creates a new spot in free memory. <em>Then</em>
        it creates a new word in the dictionary called APPLES that pushes that
        particular memory address on the stack when it is called.
        </p><p>(Note that like ":", "VARIABLE" is grabbing the next token of input
        for use as a new dictionary name. This is possible because "the little
        cogs in the Forth machine" are available for any use you can think of.
        And one of those cogs is the word WORD, which gets the next token from
        the input stream. Both ":" and "VARIABLE" use WORD to do this, just like
        Forth's own outer interpreter!)
        </p><p>Okay, so we have a variable named APPLES now. The next line is:
        </p><pre>20 APPLES !
        </pre>
        <p>This puts the value 20 on the stack, then the address for APPLES.
        The "!" (STORE) word stores the value 20 at the APPLES address.
        (In other words, "!" takes <em>two</em> values as input: an address and
        a value.  It stores the value at that address.)
        </p><p>Conceptually, you can think of the above as <code>APPLES = 20</code>
        in "normal" programming syntax.
        </p><p>And now the third line:
        </p><pre>APPLES ?
        </pre>
        <p>This line prints the value stored at APPLES. The word "?" fetches a
        numeric value from an address and prints it (which pops the value off
        the stack again).  Again, APPLES puts its address on the stack. So "?"
        simply takes an address from the stack as input for printing.
        </p><p>By the way, here's the entire definition of "?" in JonesForth:
        </p><pre>: ? @ . ;</pre>
        <p>Look at how small that is! The only thing you need to know to
        understand this definition is that "@" (FETCH) pops an address from the
        stack and fetches the value stored at that address and puts the value
        on the stack.  "." (DOT) pops a value from the stack and prints it as a
        number.
        </p><p>Okay, on with our example.
        </p><p>We're about to be dealt a terrible blow...
	</p></div>
</div>

<div>
	<p>We pepper our program with this <b>APPLES</b> variable.
    </p><p>The application works perfectly for a couple years.
	</p><p>Then we are told that we must now keep track of two different
		kinds of apples: red and green. What to do?
	</p><p><img src="https://ratfactor.com/forth/talkimg/apple_red.png" alt="red apple">
		<img src="https://ratfactor.com/forth/talkimg/apple_green.png" alt="green apple">
	</p>

    <div>
        <p>Unfortunately, this is exactly the sort of conundrum we see in real
        life software all the time.
        </p><p>You knowingly prepared for all sorts of different <em>quantities</em>
        of apples, but it never occurred to anyone that we would need to
        track different <em>types</em> of apples.
        </p><p>This problem seems very bad. Do we have to completely re-write our
        application?
        </p><p>(Well, <em>outside</em> of this example, the correct answer might be
        "yes".  Maybe this changes the whole "theory" of the program, in the
        <a href="http://ratfactor.com/papers/naur1">Programming as Theory Building</a>
        (ratfactor.com)
        sense. In which case, a re-write or big refactor of our apple counting
        program is likely the right answer. But for this example, we're
        assuming that we have <strong>thousands of lines</strong> of
        apple-handling functionality that will <strong>not</strong> need to
        change. We'll say that grouping the apples by color here is just an
        essential surface detail.)
        </p><p>All right, <em>obviously</em> we can't store two values in one
        variable and expect all of the existing code to still work. So what
        could we possibly do?
        </p><p>Here's a very clever and very Forth solution:
    </p></div>
</div>

<div>
    <p>A new variable will store the current type of apples.
	</p><pre>VARIABLE COLOR
	</pre>

    <div>
        <p>As with "APPLES" above, VARIABLE creates a memory space and a new
        word called "COLOR" that puts the address of the memory space on the
        stack when it is called.
        </p><p>Next, we'll create a second new variable <em>and</em> a new colon word.
    </p></div>
</div>

<div>
	<p><img src="https://ratfactor.com/forth/talkimg/apple_red.png" alt="red apple"></p><p>"REDS" will count red apples. 
    Colon word "RED" sets the current type of apple to red:
    COLOR = REDS:
	</p><pre>VARIABLE REDS
: RED REDS COLOR ! ;
	</pre>

    <div>
        <p>Remember, variables are also words in the dictionary, so we've
        created three additional words so far: COLOR, REDS, and RED.
        </p><p>(Only one of these, RED, is <em>recognizably</em> a function.
        But really all three of them are.)
        </p><p>As you may recall from earlier, "!" (STORE) takes two parameters,
        a value and an address, and stores the value at that address.
        </p><ul>
            <li>COLOR is the address of memory holding the address of the current apple count variable
            </li><li>REDS is the address of memory holding the red apple count
            </li><li>RED sets COLOR to the address of REDS
        </li></ul><p>
        It might be helpful to see the C equivalent of the RED word:
        </p><pre>void RED(){
    COLOR = &amp;REDS
}
        </pre>
        <p>And then...
    </p></div>
</div>

<div>
	<p><img src="https://ratfactor.com/forth/talkimg/apple_green.png" alt="green apple"></p><p>Same for green.
	</p><pre>VARIABLE GREENS
: GREEN GREENS COLOR ! ;
	</pre>

    <div>
        <p>We've added a total of five new words. The two new green ones
        are identical to the red ones above:
        </p><ul>
            <li>GREENS is the address of memory holding the green apple count
            </li><li>GREEN sets COLOR to the address of GREENS
        </li></ul>
        <p>Here's the C equivalent of GREEN:
        </p><pre>void GREEN(){
    COLOR = &amp;GREENS
}
        </pre>
        <p>One more change...
    </p></div>
</div>

<div>
	<p>Lastly, we change <b>"APPLES"</b> from a variable to a word that gets
    the current count by color:
	</p><pre>: APPLES COLOR @ ;
	</pre>

    <div>
        <p>As you may recall from earlier, "@" (FETCH) fetches the value
        stored in a variable and puts it on the stack.
        </p><p>So "APPLES" gets the value stored in COLOR and puts that
        on the stack.
        </p><p>The value stored in COLOR <em>happens to be an address</em>.
        That address happens to be the memory pointed to by either REDS or
        GREENS.
        </p><p>It would look like this C code:
        </p><pre>int *APPLES(){
    return COLOR;
}
        </pre>
        <p>This "get the address of the address" stuff may sound super
        confusing. But working with memory addresses (aka "pointers") is
        <em>how variables work</em> in Forth, so to the adept Forth programmer,
        the idea of passing addresses around will be deeply ingrained and
        <em>no big deal</em>.
        </p><p>Okay, so we've got red and green apple counts. That much
        is clear. But surely there is still a lot of work ahead of us...
    </p></div>
</div>

<div>
    <p>Now we have to re-write any use of <b>APPLES</b>, right?
    </p><p>Wrong! The use of <b>APPLES</b> is <i>identical</i>. The syntax hasn't
        changed one bit for any existing code. We just need to make sure we've
        set the right color.
    </p><p>Check it out:
	</p><pre>20 RED APPLES !
30 GREEN APPLES !

GREEN APPLES ? <i>30</i>
APPLES ? <i>30</i>

RED
APPLES ? <i>20</i>
	</pre>
	<p><img src="https://ratfactor.com/forth/talkimg/apple_bw.png" alt="grayscale apple">
		<img src="https://ratfactor.com/forth/talkimg/apple_red.png" alt="red apple">
		<img src="https://ratfactor.com/forth/talkimg/apple_green.png" alt="green apple">
	</p>

    <div>
        <p>All of the existing code that uses APPLES will still work 
        <em>exactly the same way</em> with absolutely no modifications.
        </p><p>Furthermore, look at how English-like it reads to store
        <code>"20 RED APPLES !"</code> or query <code>"GREEN APPLES ?"</code>.
        </p><p>The key to understanding why this works is to remember that
        "APPLES" was <em>already</em> a word that put an address on the stack
        because <em>that's how variables work</em> in Forth.
        So when we changed it to a colon word that puts an address on the
        stack, it's no change at all. It's still doing the exact same thing.
        It just happens that the address will change depending on the active
        apple color.
        </p><p>At every single opportunity, Forth has taken the simplest
        (you might even say, <em>laziest</em>) and most flexible method
        for implementing a feature.
        </p><p>Wait, I hear a distant screaming:
        </p><p><em>"How could this possibly be okay?! You call this 'freedom', but
            I call it unchecked chaos material! This is not okay!"</em>
        </p><p>Well, maybe.
        </p><p>But I think one reason this actually <em>is</em> okay, on a
        conceptual level, is that APPLES did <em>not</em> really change
        what it originally did.
        </p><p>Coming from the normal programming language world, we have clearly
        <strong>broken the abstraction</strong>:
        "APPLES" was a variable before, and now it's a function.
        </p><p>But you're not in the normal programming world anymore.
        Here, in Forth-land, a variable <em>is</em> a word that puts an
        address on the stack. And a function is <em>also</em> just a word.
        </p><p>"APPLES" is <em>still</em> a word that puts an
        address on the stack. There is no <em>conceptual</em> change at the
        language level. <strong>We did not break an abstraction because there
        was no abstraction to break.</strong>
        </p><p>Forth provides what you might call "atomic units of computing"
        at the language level.  It is a language where <em>you</em> make the
        abstractions.
    </p></div>
</div>

<div>
    <center>
    <img src="https://ratfactor.com/forth/talkimg/apple_bw.png" alt="grayscale apple">
    </center>
    <p>To Forth, it's all just words in a dictionary.
    "VARIABLE" is just another word
    <em>you could have written yourself</em>.

    </p><div>
        <p>Do you see now why Chuck Moore rejects the standardization
        of Forth? It ossifies concepts like VARIABLE so they lose their
        flexibility.
        </p><p>The example above is also another demonstration of the way
        the language Forth "writes itself": a tiny handful of primitives can be
        used to bootstrap the rest of the language in the language itself.  The
        enormous flexibility of the primitives allows nearly unbounded freedom.
    </p></div>
</div>

<div>
    <h2>Implement a Forth to understand how it works</h2>
    <p>I highly recommend implementing Forth (or porting it like I did) to understand
    how it works "under the hood."

    </p><div>
        <p>By examining Forth from the ground floor at the assembly language level,
        I gained considerable confidence in my understanding of how all the moving
        parts fit together.
        </p><p>To be honest, it's difficult for me to imagine being to able to understand all the
        individual parts <em>without</em> going through this process. But everybody learns
        differently.
    </p></div>

    <h2>But be aware of what this will <em>not</em> teach you</h2>
    <p>Implementing an interpreter teaches you almost nothing about how
    to write programs with that interpreter.

    </p><div>
        <p>Knowing how a Forth system works is almost completely unrelated
        to knowing how to <em>write programs</em> in Forth.
        </p><p>You can know the spec for a language by heart, but still be clueless
        about writing good software in that language. It's like expecting a
        mastery of English grammar to make you a good novelist. They're entirely
        different skills.
        </p><p>Be also aware that most people on the Internet (including myself) are
        still complete newbies to actually creating software with Forth!
    </p></div>
</div>

<div>
    <h2>Or invent Forth for yourself</h2>
    <p>"I didn't create Forth, I discovered it."
    </p><p>-- Chuck, apocryphally

    </p><div>
        <p><em>(I have been unable to find a source for the quote above.
        It probably comes from an interview.)</em>
        </p><p>If Forth truly is a fundamental way to express computation, then
        it's sort of like 
        Gödel and Herbrand's general recursive functions, Church's lambda
        calculus, Turing's theoretical machines, Post's canonical systems, and
        Schönfinkel and Curry's combinators.
        (I can hear furious objections warming up from a thousand armchairs...)
        </p><p>In fact, that's true of <em>all</em> programming languages, even the
        big, messy ones. Right? Any language that can express universal
        computation is...universally powerful; it can express anything
        that is computable.
        </p><p>But I think Forth belongs to a more rarified group.  Forth is a
        fundamental <em>type</em> of programming language design.
        And I'm not alone in thinking so. For example, check out
        <a href="https://madhadron.com/programming/seven_ur_languages.html">The seven programming ur-languages</a>
        (madhadron.com).
        </p><p>I'll let philosophers angrily split hairs over what I just said above,
        but I think the principle is true. And it's true all the way down
        to the (lack of) syntax in the language.
        </p><p>Why do I believe this? Well...
    </p></div>
</div>

<div>
    <p>Making <code>nasmjf</code> gave me so many ideas, I <i>had</i> to try some
        experiments.
    </p><p>Forth is an amazing playground for ideas.

    </p><div>
        <p>I was still keenly aware that my <code>nasmjf</code> project to
        port JonesForth to NASM was still just a (very detailed) examination of
        a <strong>final artifact</strong>. I was not re-tracing Moore's footsteps, but
        imitating his work. In fine art terms, I made a "master copy" (training myself by
        copying the work of a master artist). In other words, I brought
        my sketchbook to the museum.
        </p><p>But what would happen if I tried making a painting of my very own?
    </p></div>
</div>

<p><img src="https://ratfactor.com/forth/talkimg/assembly-nights2.jpg" alt="my lenovo 11e thinkpad with assembly code waiting romantically on the bed with a candle. text reads 'Assembly Nights II'">
</p>

<div>
    <h2>Meow5</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/meow5.png" alt="meow5 cat logo"></p><p>An exercise in extreme <b>concatenative</b> programming where
		all code is concatenated (always inlined).

    </p><div>
        <p>We explored what it means to be a "concatenative" programming language
        at the beginning of my journey above. In short, in a concatenative
        language, data implicitly flows from one function to another like a
        factory assembly line.
        </p><p>Like Forth, Meow5 happens to be concatenative because it uses
        the same "parameter stack" concept.
        </p><p>Unlike Forth or most other sane languages, <strong>Meow5 is a thought
        experiment taken too far</strong>. Specifically, the thought,
        "instead of threading function calls by storing their addresses, what
        if we just store a copy of the whole function?
        </p><p>In compiler parlance, this is "inlining", short for
        <a href="https://en.wikipedia.org/wiki/Inline_expansion">inline expansion</a>
        (wikipedia.org).
        It is a common optimization technique
        for avoiding the overhead of a function call for small functions.
        </p><p>Let's use the word DROP for example.  Remember when we looked at the
        assembly language source of the DROP code word? It was just a single
        assembly instruction:
        </p><pre>pop eax
        </pre>
        <p>It would be incredibly silly to have several jumps to and from
        a single-instruction word!
        </p><p>(And, it comes as no surprise that
        "real" Forth implementations often inline small primitives such
        as DROP. Some even provide an INLINE word to allow the programmer
        to specify this explicitly.)
        </p><p>My question was: What if we do that for everything?
        At what point is this no longer a good idea?
        Obviously at <em>some</em> point, a function is too large to inline.
        But every code word in JonesForth 
        was quite tiny by modern standards. With today's CPUs and their
        relatively enormous caches it seemed to me that you could take
        this inlining concept pretty far before it got ridiculous.
        </p><p>And wouldn't the CPU just love seeing all of those instructions
        executing in one straight and continuous sequence with no jumps?
        If I were a CPU, I would love it.
        </p><p>Plus, it would make compiling a stand-alone executable almost
        trivial because <em>every word</em> in a 100% inlined language
        would contain <em>all</em> of the machine code needed for that
        word.
        </p><p>Here is the canonical example:
    </p></div>
</div>

<div>
	<pre>: meow "Meow." print ;
meow
<i>Meow.</i>

: meow5 meow meow meow meow meow ;
meow5
<i>Meow.Meow.Meow.Meow.Meow.</i>
	</pre>

    <div>
        <p>The idea is that <code>meow5</code> compiles into five complete
        copies of <code>meow</code>!
        </p><p>This example seems to be obviously naughty and wasteful. But I'm
        not a superscalar, out-of-order executing modern processor and neither
        are you. So the question remains: At what point does having a
        child function which includes a complete copy of every parent and
        grandparent and every ancestor function all the way back to the
        beginning spiral out of all sane proportions?  Well, you could spend an
        afternoon figuring it out on paper, or you could be like me and spend
        the better part of a year writing an assembly program.
        </p><p><i><b>Spoiler alert:</b> I consider Meow5 to be a
        delightful little failure. The problem isn't inlining machine code -
        that works great, and, indeed, the exported ELF executables from Meow5
        work exactly as I imagined. The problem is <b>data</b>, and most
        conspicuously, data in the form of strings.  Let's take the
        <code>meow</code> word for example: You either have to copy the string
        "Meow." five times, once for each word that uses it, <b>or</b> go
        through some complicated hoops to track which word uses the string. And
        you have to do that two different ways: Its location in memory in the
        live interpreter and in it's destination in the stand-alone ELF memory
        layout. Either way, the purity and simplicity is lost, which was the
        whole point of the experiment. Also, it will come as no surprise that I
        later discovered that Forth implementations often have an INLINE word
        (as I mentioned above), which is a much better way to selectively
        instruct the compiler about which words you wish to copy entirely.  As a
        program, Meow5 is a failure. But as a project, it is a success
        because I learned a lot.</i>
        </p><p>Think of it as an art project.
        </p><p>Anyway, the <em>point</em> is...
    </p></div>
</div>

<div>
    <p>Despite attempting to go my own way,
        it's remarkable how many times Forth's solution was the
        path of least resistance.
    </p><p>Again and again I would say, "Aha! <i>That's</i> why."

    </p><div>
        <p>First of all, you'll notice I ended up using ":" and ";" to
        define new functions.
        Forth makes liberal use of symbols and abbreviations, which
        can make it pretty hard to read. But I have to admit, ": ... ;"
        has grown on me. So I adopted that in Meow5. So that's probably
        the most visible thing. But that's just on the surface.
        </p><p>Secondly, using a postfix notation is <em>absolutely</em> the path
        of least resistance for a stack-based language - everything comes in
        the order expected by the language.  So your interpreter can be
        shockingly simple because it can execute statements in the exact order
        it gets them.
        </p><p>(Side note: This is also how the
        <a href="https://en.wikipedia.org/wiki/PostScript">PostScript</a>
        (wikipedia.org)
        printer and display language works. The printer can begin printing as
        soon as it recieves the document because everything is defined in the
        order it is needed and never depends on later information. This can
        also be a <em>disadvantage</em> of PostScript for viewing documents on
        screens: You can't just render a page mid-document because
        styling and formatting controls must be read in their entirety from the
        start of the document to the current page in order to ensure you've
        got everything!)
        </p><p>I was determined to make things easy for myself,
        so I can say with some certainty that Forth is one of the
        most "minimum effort" languages you can imagine.
        If I could have thought of an easier (or lazier) way to do something, 
        I would have done it!
        </p><p>There was just <strong>one place</strong> I decided to deviate
        from Forth even though I knew it would make implementation harder.
    </p></div>
</div>

<div>
    <p>To make a string in Forth, you use the word <code>"</code>, which
    needs a space after it to be seen as a word, which looks awkward:
    </p><pre>" Hello World."
    </pre>

    <div>
        <p>This has always bothered me. Chuck Moore even admits this in
        his unpublished book, 
        <a href="http://forth.org/POL.pdf">Programming A Problem-Oriented Language (PDF)</a>
        (forth.org)
        in the section titled <i>6.3 Character strings</i>:
        </p><blockquote>
            "What does a character string look like? Of all the ways you might
            choose, one is completely natural:
            <pre>    "ABCDEF...XYZ"
            </pre>
            A character string is enclosed in quotes. It can contain any character
            except a quote, specifically including spaces."
        </blockquote>
        <p>Right! So by golly, that's what I would do in Meow5, like
        every sensible language!
    </p></div>
</div>


<div>
    <p>Meow5 has this more natural quoting style:
    </p><pre>"Hello World."
    </pre>
    <p>But the effects are cascading. And they limit flexibility.

    </p><div>
        <p>If we keep reading Chuck's words, he explains what will happen
        if you do this:
        </p><blockquote>
            "We get in trouble immediately! How do you recognize a character
            string? By the leading quote, of course. But do you modify your word
            subroutine to recognize that quote? If you do so you may never use a
            leading quote for any other purpose. Much better that the quote is a
            word by itself, treated like any other dictionary entry, for it can then
            be re-defined. But words are terminated by spaces, and I still resist
            making quote an exception. So let's type character strings:
            <pre>    " ABCDEF . . . XYZ"
            </pre>
        </blockquote>
        <p>And he was right, of course.
        </p><p>I ended up having to put exceptions for the <code>"</code> character in
        multiple places in the Meow5 interpreter, including my
        <code>get_token</code> function, which serves the same purpose as
        the "WORD subroutine" Moore mentioned above.
        </p><p>And now <em>all</em> additional interpreter features have to work
        around or duplicate the special <code>"</code> character handling!
        </p><p>It seems one can either follow Moore's advice or re-discover
        it for oneself. As for me, I always enjoy re-discovering things for
        myself. The best part is that "aha!" moment when I realize why
        things are the way they are.
        </p><p>Though, to flip this whole thing on its head, I actually think it
        <em>was</em> worth the extra effort, trouble, and loss of purity to do
        this!  (I also included escape sequences, e.g. <code>\n</code> and
        <code>\"</code>, while I was at it.)
    </p></div>
</div>

<div>
    <p>Another example of straying from Moore's advice
    and having to discover it for myself:
    </p><p>I decided to have some of my functions leave the stack alone after using
    the top value.

    </p><div>
        <p>Some functions are mostly used to examine a value, but they pop
        that value off the stack. To keep working with the value, you have
        to do a DUP to duplicate it first.
        </p><p>Since I was sure I would always want to keep the value after these
        particular functions, it seemed very wasteful to have to do a DUP each
        time. Why not just peek at it and leave it on the stack?
        </p><p>Moore recommends just popping everything so you
        don't have to remember.
        </p><p>But I thought that was silly. So I went ahead and made some functions
        that just peek at the value and leave it on the stack.
        </p><p>But as you may have guessed, he was absolutely right.
        </p><p>Having some words pop the stack and some words peek was a nightmare.
        I kept forgetting which words did or didn't alter the stack and it
        kept causing problems. <strong>I completely regretted it and ended up
        making them all pop like Moore advised.</strong>
        </p><p>(Another option that occurred to me after I changed them all would
        have been to have a special naming scheme for non-popping words, which
        probably would have been fine, expect then I would have had to remember
        the name... so hassle either way.)
    </p></div>
</div>

<div>
    <p>Now we have <em>yet another</em> reason for the title of this
    article.
    </p><p>Once you start down the Forth path... the rest just sort of
    "writes itself".
    Chuck Moore already found the path of least resistance.
    </p><p>To sum up the ways in which "Forth writes itself" so far, we have:
    </p><ul>
        <li>Forth is boostrapping
        </li><li>Forth is metaprogramming
        </li><li>Forth can be your OS and your IDE/editor
        </li><li>Forth is the path of least resistance for writing a Forth
    </li></ul>

    <div>
        <p>If you set out to make the <em>simplest possible</em> interpreter
        for a brand new CPU architecture, <strong>you might end up writing
            a Forth whether you want to or not.</strong>
        </p><p>Forth lets you define <em>more Forth</em> in Forth so you
        can Forth while you Forth. And the Forth editor <em>is</em> Forth
        and can be extended with Forth, so can Forth Forth in Forth Forth Forth
        Forth. (I'll let you figure out which of those are nouns, adjectives,
        or verbs and whether or not I have the right number of them.)
        </p><p>And if that weren't enough, Forths often contain <em>assemblers</em>
        so you can define additional code words in Forth, too so you never
        need to leave Forth once you're in it.
        </p><p>JonesForth has the stub of an in-Forth assembler near the end so we
        can see how one might work. Here's the comment introducing it:
        </p><pre>(
    ASSEMBLER CODE --------------------------------------------

    This is just the outline of a simple assembler, allowing
    you to write FORTH primitives in assembly language.

    Assembly primitives begin ': NAME' in the normal way,
    but are ended with ;CODE.  ;CODE updates the header so that
    the codeword isn't DOCOL, but points instead to the
    assembled code (in the DFA part of the word).

    We provide a convenience macro NEXT (you guessed what it
    does).  However you don't need to use it because ;CODE will
    put a NEXT at the end of your word.

    The rest consists of some immediate words which expand
    into machine code appended to the definition of the word.
    Only a very tiny part of the i386 assembly space is covered,
    just enough to write a few assembler primitives below.
)
        </pre>
        <p>Just try not to go insane from the <strong>unlimited power</strong>.
        </p><p>And then there's this:
    </p></div>
</div>

<div>
    <h2>PlanckForth</h2>
    <p>Hand-written 1Kb binary
    <img src="https://ratfactor.com/forth/talkimg/planckforth.png" alt="binary layout of planckforth as taken from the repo">

    </p><div>
        <p>This image comes from the
        <a href="https://github.com/nineties/planckforth">PlanckForth repo</a>
        (github.com).
        It's one of the most
        beautiful pieces of code I've ever seen. It's a complete ELF binary
        with a working Forth implementation that fits in less than 1Kb.
        As you can see, there's enough room left over for a description and
        copyright at the end.
        </p><p>The binary is stored as an ASCII hex represention that can be turned
        into a working binary using <code>xxd -r -c 8</code>.
        </p><p>But the best part is <code>bootstrap.fs</code>, written in
        line-noise-like operators and gradually becoming readable Forth
        after a couple hundred lines.
        </p><p>Thankfully, comments are one of the very first things implemented
        and it's almost like seeing bacteria spell out words in a petri dish:
        </p><pre>h@l@h@!h@C+h!k1k0-h@$k:k0-h@k1k0-+$h@C+h!ih@!h@C+h!kefh@!h@C+h!l!
h@l@h@!h@C+h!k1k0-h@$k h@k1k0-+$h@C+h!ih@!h@C+h!kefh@!h@C+h!l!

h@l@ h@!h@C+h! k1k0-h@$ k\h@k1k0-+$ h@C+h!
    i       h@!h@C+h!
    kkf     h@!h@C+h!
    kLf     h@!h@C+h!
    k:k0-   h@!h@C+h!
    k=f     h@!h@C+h!
    kJf     h@!h@C+h!
    k0k5-C* h@!h@C+h!
    kef     h@!h@C+h!
l!

\ **Now we can use single-line comments!**

\ planckforth -
\ Copyright (C) 2021 nineties
...
        </pre>
        <p>Incredible.
        </p><p>Another hand-written machine code Forth (in 1,000 bytes and with
        a Forth system in 1,000 lines!) is 
        <a href="https://dacvs.neocities.org/SF/">SmithForth</a>
        (neocities.org)
        by David Smith.
        You can see and hear Smith walk through SmithForth on YouTube:
        <a href="https://www.youtube.com/watch?v=9MSJGzYELBA">SmithForth workings</a>
        (youtube.com).
        </p><p>And as you may recall from earlier, Cesar Blum's
        <a href="https://github.com/cesarblum/sectorforth">sectorforth</a>
        (github.com)
        is a mere 512 bytes!
        </p><p>There are almost as many Forth implementations as there are
        stars in the night sky.
    </p></div>
</div>

<div>
    <p>Forth is an <b>idea</b> that has taken form in countless applications.
    </p><p>Many Forths are custom and home-grown.
    </p><p>But it has had great success in a huge variety of roles:
	</p><ul>
		<li>Power plants, robotics, missile tracking systems, industrial automation.
		</li><li>Embedded language in video games.
        </li><li>Databases, accounting, word processors, graphics, and computation
            systems. (You might say, "legacy software." But I say, "Elegant
            weapons for a more civilized age," to paraphrase a certain wise
            Jedi.)
		</li><li>In the modern Open Firmware boot loader.
		</li><li>Processors of all shapes and sizes.
		</li><li>Microcontrollers of all shapes and sizes.
	</li></ul>

	<div>
        <p>If it goes "beep" and "boop", someone has written a Forth for it!
        </p><p>For some notable uses, here are some starting points:
        </p><ul>
            <li><a href="https://www.forth.com/resources/forth-apps/">Featured Forth Applications</a> (forth.com)
		    </li><li><a href="http://www.forth.org/successes.html">Forth Success Stories</a> (forth.org)
            </li><li><a href="https://en.wikipedia.org/wiki/Forth_(programming_language)">Forth</a> (wikipedia.org)
        </li></ul>
        <p>I think
        <a href="https://en.wikipedia.org/wiki/Open_Firmware">Open Firmware</a>
        (wikipedia.org)
        is particularly interesting. It came, like many things, from
        the fine engineering minds at Sun Microsystems.
        </p><blockquote>
            "Being based upon an interactive programming language, Open
            Firmware can be used to efficiently test and bring up new hardware.
            It allows drivers to be written and tested interactively."
        </blockquote>
        <p>Perhaps one of the most exciting uses of Open Firmware was the
        <strong>Space Shuttle</strong>
        ESN, which ran on a radiation-hardened
        <a href="https://www.cpushack.com/2019/03/01/cpu-of-the-day-utmc-ut69r000-the-risc-with-a-trick/">UT69R000</a>
        (cpushack.com)
        processor!
        A paper on the ESN,
        <a href="https://zenodo.org/record/1267048/files/article.pdf">Developing plug-and-play spacecraft systems: NASA Goddard Space Flight Center's (GSFC) Essential Services Node (ESN) (PDF)</a> 
        (zenodo.org)
        notes that:
        </p><blockquote>
            "Open Firmware can debug hardware,software, plug-in drivers, and
            even the firmware itself. Open Firmware provides interactive tools
            for debugging systems."
        </blockquote>
        <p>By the way, I hope this brief mention of space technology has wet
        your appetite for more, because we're almost there!
        </p><p>But first, I have a couple more drawings of cool computers you
        should see. Perhaps you are aware of the huge variety of 1980s home
        computers?
        </p><p>Check these out:
	</p></div>
</div>

<div>
    <h2>Jupiter Ace, 1982</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/jupiter_ace.png" alt="drawing of the jupiter ace home computer"></p><p>Operating system: Forth.
    </p><p>OS and library of routines in 8 KB of ROM.
    </p><p>The onboard Forth was "Ten times faster than [interpreted] BASIC" and
    less than half the memory requirements."

    </p><div>
        <p>(The quote above is from Popular Computing Weekly, 1982.)
        </p><p>The
        <a href="https://en.wikipedia.org/wiki/Jupiter_Ace">Jupiter Ace</a>
        (wikipedia.org)
        was a British home computer of the early 1980s.
        </p><p>It has a fan-made website, the Jupiter ACE Archive from which
        has the page,
        <a href="https://www.jupiter-ace.co.uk/whatisanace.html">What is a Jupiter ACE?</a>
        (jupiter-ace.co.uk):
        </p><blockquote>
            "The major difference from the 'introductory computer' that was the
            ZX81, however, was that the Jupiter ACE's designers, from the
            outset, intended the machine to be for programmers: the machine
            came with Forth as its default programming language."
        </blockquote>
        <p>That website has tons of resources. And if you're into that sort of
        thing, you also owe it to yourself to visit the "What is..." page
        linked above and then hover your mouse over the image of the ACE's
        circuit board. Every single IC, capacitor, and resistor is identified
        and explained in little tooltips!
        </p><p>It's not every day you see a <strong>programming language listed as
            an operating system</strong> for a computer. But you may recall
        that as early as the "IBM 1130 minicomputer at a big textiles
        manufacturer" era, Moore already had an editor and file management
        features. And you can certainly write hardware drivers in Forth if you
        have the right code word primitives. And as we'll see soon, there
        is absolutely <em>no limit</em> to how low-level Forth can go.
        </p><p><em>(There's also no limit to how high-level Forth can go. The book
        </em>Thinking Forth<em> by Leo Brodie, the same book from which
        we got the apples example above, is full of examples of applications
        written in very "English like" high-level words.)</em>
        </p><p>The ACE never sold very many units, but it is prized by collectors
        today. I would take one.
        </p><p>The
        <a href="https://www.jupiter-ace.co.uk/whatisforth.html">What is Forth?</a>
        (jupiter-ace.co.uk)
        page has an excellent explanation of Forth in general, but especially
        as an all-encompassing computing system:
        </p><blockquote>
            "Classic Forth systems use no operating system. Instead of storing
            code in files, they store it as source-code in disk blocks written
            to physical disk addresses. This is more convenient than it sounds,
            because the numbers come to be familiar. Also, Forth programmers
            come to be intimately familiar with their disks' data structures,
            just by editing the disk. Forth systems use a single word "BLOCK"
            to translate the number of a 1K block of disk space into the
            address of a buffer containing the data. The Forth system
            automatically manages the buffers."
        </blockquote>
        <p>Many of us fondly remember the boot-to-BASIC computers of the 1980s,
        but can you imagine growing up with the Jupiter ACE in your home and
        actually <em>understanding it</em>?
        </p><p>The ACE ran on the
        <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Zilog Z80</a>
        (wikipedia.org)
        CPU, which was incredibly popular at the time for low-power computers
        and has had an amazingly long life. It was used in the higher-end TI
        graphing calculators such as the
        <a href="https://en.wikipedia.org/wiki/TI-85">TI-85</a>
        (wikipedia.org)
        I had in high school in 1996, which I spent many a happy afternoon
        programming in TI-BASIC.
    </p></div>
</div>

<div>
    <h2>Canon Cat, 1987</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/canon_cat.png" alt="drawing of the canon cat word processor home computer"></p><p>Operating system: Forth.
    </p><p>OS, office suite, and programming environment in 256 KB of ROM.
    </p><p>Innovative interface by Jef Raskin.

    </p><div>
        <p>Another computer with Forth as an operating system!
        </p><p>The <a href="https://en.wikipedia.org/wiki/Canon_Cat">Canon Cat</a>
        (wikipedia.org)
        is a particularly fascinating machine for a number of different
        reasons, the primary of which is the keyboard-driven interface
        by UI pioneer Jef Raskin.
        </p><p>Raskin wrote a book titled
        <a href="https://en.wikipedia.org/wiki/The_Humane_Interface">The Humane Interface</a>
        (wikipedia.org)
        with some provocative ideas that are probably
        very much worth re-visiting.
        For example, I like these two design rules:
        </p><blockquote>
            <ul>
                <li>Elimination of warning screens - modern software
                    applications often ask the user "are you sure?" before some
                    potentially harmful action; Raskin argues they are
                    unhelpful because users tend to ignore them out of habit,
                    and that having a <strong>universal undo</strong>
                    eliminates the need for them.
                </li><li>Universal use of text - Raskin argues that graphic icons in
                    software without any accompanying text are often cryptic to
                    users.
            </li></ul>
        </blockquote>
        <p>The Cat was the hardware and software incarnation of Raskin's
        design philosophies.
        </p><p>Also, you <em>have</em> to check out the picture of Jef with a
        little model of the Cat on his Wikipedia page:
        <a href="https://en.wikipedia.org/wiki/Jef_Raskin">Jef Raskin</a>
        (wikipedia.org).
        Direct link to the image: <a href="https://en.wikipedia.org/wiki/Jef_Raskin#/media/File:Jef_Raskin_holding_Canon_Cat_model.png">here</a>
        (wikipedia.org).
        </p><p>The Cat ran on a
        <a href="https://en.wikipedia.org/wiki/Motorola_68000">Motorola 68000</a>
        (wikipedia.org)
        CPU, which was also used in the Apple Macintosh and was one of the
        first 32-bit processors, featuring 32-bit instruction set, registers,
        and non-segmented memory addressing.
        </p><p>Getting to the Forth interface doesn't seem to have been a top
        priority on the Cat.
        </p><p>Quoting Dwight Elvey at the DigiBarn computer museum,
        <a href="https://www.digibarn.com/collections/systems/canon-cat/forthinside.html">Canon Cat: Enabling Forth</a>
        (digibarn.com),
        the process <em>sounds</em> a bit awkward:
        </p><blockquote>
            "Highlight the string: <em>Enable Forth Language</em>.<br>
            Then do: front, answer<br>
            Then: shift, usefront, space<br>
            You are now in Forth.<br>
            You need to do: -1 wheel! savesetup re<br>
            Front the editor, use the setup to set the keyboard to ascii
            so that you can type the characters &lt; and &gt; with
            shift , and shift .<br>
            Do a usefront disk.<br>
            It will save to the disk so that it will be ready
            the next boot with just the: shift, usefront, space
            to restart Forth.<br>
            To undo the Forth mode: Forth? off 0 wheel! re [sic everything]"
        </blockquote>
        <p><em>(Note that "USE FRONT" is a dedicated key on the Canon Cat
            keyboard that lets you apply whatever function is printed on the
            front of another key on the keyboard. Clever, right?  All of the
            Cat's interactions are performed through the keyboard like
            this.)</em>
        </p><p>And if that process weren't enough to put you off, this warning
        seems particularly dire and, if anything, hilariously understated:
        </p><blockquote>
            "Use care while in Forth mode as usefront shift : will
            format the disk (a good idea to make a backup or
            at least remove the disk while experimenting)."
        </blockquote>
        <p>But all of that makes it sound worse than it is.
        Thanks to modern streaming video technology, you can
        <em>see</em> Dwight Elvey
        <a href="https://www.youtube.com/watch?v=jErqdRE5zpQ">boot up a cat and demonstrate it</a>
        (youtube.com).
        As you can see, getting to the Forth interface is really not a
        lengthy process at all once you know what to do. Just a couple keystrokes.
        And the Cat is a more compact computer than I imagined from the pictures.
        </p><p>If you like industrial design or interesting computer interfaces,
        you owe it to yourself to check out the amazing pictures of
        <a href="https://www.digibarn.com/friends/jef-raskin/slides/canon-cat/index.html">Jef Raskin's team designing the Canon Cat (1985)</a>!
        (digibarn.com)
        </p><p>If you want to see a bunch of pictures of a vintage Cat in
        amazing shape, check out Santo Nucifora's
        <a href="https://vintagecomputer.ca/canon-cat/">Canon Cat</a>
        (vintagecomputer.ca).
        </p><p>If nothing else, just let this fact marinate in your head for a
        little bit: <strong>The Canon Cat had an OS, office suite, and
            programming environment in 256 KB of ROM.</strong> This 
        document (not including the images) is almost exactly that
        size!
        </p><p>Okay, now we are ready for...
    </p></div>
</div>

<div>
    <p><img src="https://ratfactor.com/forth/talkimg/forth_in_space.png" alt="title says Forth in Space and chuck is an astronaut on EVA who says May the Forth be with you."></p><div>
        <p>Easily one of the most exciting uses of Forth is space
        exploration because space is intrinsicly awesome.
        </p><p>We've already seen how Chuck Moore was intimately
        involved in programming ground-based radio telescopes.
        But Forth has also found its way into tons (literally and idiomatically)
        of actual space craft in outer space!
        </p><p>NASA is famous for having stringent rules about software
        that runs on spacecraft. Which makes sense, given the cost of these
        machines and the difficulty or even impossibility of getting
        to them to make fixes.
	</p></div>
</div>

<div>
	<h2>NASA and the ESA</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/nasa_list.jpg" alt="unreadable list of a ton of nasa projects using forth"></p><p>The list of projects using Forth at NASA compiled by James Rash in 2003 is too long to easily list here.

	</p><div>
        <p>The image on the right is intentionally too small to read. As you
        can see, it's a big list.
        </p><p>The original NASA link has died, but the page was archived by
        the Wayback Machine at archive.org. There's a nice copy
        hosted here as well:
		<a href="https://www.forth.com/resources/space-applications/">Forth in Space Applications</a>
        (forth.com).
        </p><p>I haven't found a list like this for the ESA, but the Philae
        lander featured below would be one very prominent example.
        </p><p><i>(By the way, though Forth isn't featured here, there's a fun overview
        of some CPUs used in various space missions: 
        <a href="https://www.cpushack.com/space-craft-cpu.html">The CPUs of Spacecraft: Computers in Space</a>
        (cpushack.com).)</i>
        </p><p><i>(The image to the right is very tall. We need some more text for
            wider screens. So, while it's not about Forth,I won't miss this
            opportunity to mention one of my favorite computing-in-space books:
        <a href="http://web.mit.edu/digitalapollo/">Digital Apollo: Human and Machine in Spaceflight</a>
        (mit.edu)
        by David Mindell. It will change how you look at the Apollo missions,
        computers in general, and the role of astronauts in space craft!)</i>
	</p></div>
</div>

<div>
	<h2>Space Shuttle Small Payload Accommodations Interface Module (SPAIM)</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/nasa_ssbuv_patch.png" alt="nasa mission patch for ssbuv"></p><p>"There is always great concern about software reliability, especially with flight software."

	</p><div>
        <p>From the paper
        <a href="https://dl.acm.org/doi/pdf/10.1145/199200.316990">Forth in Space: Interfacing SSBUV, a Scientific Instrument, to the Space Shuttle (PDF)</a>
        (acm.org)
        by Robert T. Caffrey et al:
        </p><blockquote>
            "There is always a great concern about software reliability,
            especially with flight software. The effects of a software error in
            flight could be dramatic. We were able to produce reliable software
            by writing a Forth routine on the PC, downloading the software, and
            testing it interactively. We varied the inputs to a routine and
            checked the ability of the routine to operate correctly under all
            conditions. As a result, during the STS-45 Shuttle mission, the
            SPAIM flight software worked perfectly and without any problems."
        </blockquote>
        <p>Forth systems can be multi-tasking and this allowed the system to
        monitor itself. Each task had its own stack and a watchdog task could,
        for example, check the health of another task by monitoring the
        other task's stack. (Stack depth was found to be a good indication of
        task health. In other words, malfunctions would often cause the stack
        depth to grow unchecked.)
        </p><blockquote>
            "The ability of the Forth development system to debug hardware and
            software interfaces, model missing hardware, simulate system
            malfunctions, and support system integration dramatically helped in
            the quick generation of error-free software. The interactive,
            integrated and multitasking features of the Forth system proved to
            be the key elements in the success of the SPAIM systems
            development. Several techniques such as stack depth monitoring,
            address monitoring, cycle time monitoring, and error flag
            monitoring provided system checks during both the system
            integration process and the actual Shuttle mission."
        </blockquote>
        <p>The interactive nature of the Forth system is again found to be not
        just very convenient, but also a massive productivity boost for all
        phases of programming, debugging, and testing.
        </p><p>The SPAIM system used a 16-bit Intel 87C196KC16 microcontroller,
        which is a MIL-SPEC member of the
        <a href="https://en.wikipedia.org/wiki/Intel_MCS-96">Intel MCS-96</a>
        (wikipedia.org)
        family. These started out as controllers for Ford engines in the 1970s.
        They continued to be made in various incarnations until 2007 and were
        often used in common devices such as hard drives, modems, and printers.
        Unlike many chips headed to space long-term, this one wasn't "rad-hard"
        (hardened against the effects of radiation).
	</p></div>
</div>

<div>
	<h2>NASA's Robot Arm Simulator</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/nasa_robot_arm.png" alt="robot arm in space shuttle"></p><p>Given the input of three-axis joystick commands, control a
    50-foot long, six-joint arm with six different coordinate systems.
    </p><p>Entire system developed by <b>one programmer in five weeks.</b>

	</p><div>
        <p>The <a href="https://www.forth.com/space-shuttle-robot-arm/">Space Shuttle Robot Arm Simulator</a>
        (forth.com)
        was a complex machine with some challenging requirements.
        </p><p>It turns out that you can't just use the <em>same robot arm</em> on
        the ground for simulations as the one that will go into space.
        For one thing, contending with gravity changes the requirements to
        such a degree that it's a completely different robot!
        </p><blockquote>
            <p>"The GSFC arm, for example, is designed to carry up to a thousand
            pound payload at its tip. In order to do this it uses a high
            pressure (4000 psi) hydraulic system rather than electric motors as
            on the RMS.
            </p><p>...
            </p><p>"Because of the completely different nature of the joint controls,
            the original RMS software was not usable except as a source of
            algorithms."
        </p></blockquote>
        <p>So the simulator arm <strong>could not work the same way,
            but it had to pretend it did</strong>.
        </p><p>You can see in my drawing that the arm lived in a full-scale
        simulated shuttle bay and was accompanied by an enormous model
        satellite. (That satellite looks like the Hubble Space
        Telescope to me, which seems plausible, given the dates on this
        project.)
        </p><p>Just listen to these I/O requirements:
        </p><blockquote>
            "The RMSS contains fourteen separate processes: one for each joint,
            one for each joystick, one for the digital display panel, a
            simulation process, a trending process, and several supervisory
            processes."
        </blockquote>
        <p>But, as seems to be a trend with Forth-based space software,
        the work was impeccable:
        </p><blockquote>
            "Simulation testing was so thorough that when the arm software was
            installed on site, not a single change was made to the executive
            control algorithms."
        </blockquote>
        <p>Does Forth imply excellence, or does excellence imply Forth? Ha ha.
        </p><p>Seriously, though, writing a system like that in five weeks
        is pretty astounding.
	</p></div>
</div>

<div>
	<h2>Shuttle Mission Design and Operations System (SMDOS)</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/nasa_shuttle.png" alt="drawing of the shuttle launching"></p><p>JPL's ground-based control software for shuttle SIR-A and SIR-B
    radar imaging instruments.

	</p><div>
        <p>This section started off as an excuse to draw a Space Shuttle.  But
        it's actually a great example of how a "live" interactive system
        can save a mission, even if the software itself hasn't been deployed into
        space.
        </p><p>The paper:
        <a href="https://dl.forth.com:8443/jfar/vol3/no2/article2.pdf">Forth as the Basis for an Integrated Operations Environment for a Space Shuttle Scientific Experiment (PDF)</a>
        (forth.com)
        describes a number of hardware failures that had to be
        overcome.
        </p><blockquote>
           "It was in the first day of data taking that we noticed
            the first problem..."
        </blockquote>
        <p>The SIR-B's transmitting antenna had shorted, resulting in the
        expected 1000 watts of power being reduced to a faint 100 watts.
        </p><blockquote>
            "Since the returned echo was negligible as received by the SIR-B
            antenna it was decided to increase the gain of the receiver.
            The problem was in not understanding what had happened to cause
            the failure. [It] was not immediately apparent what the
            appropriate gain should be..."
        </blockquote><p>
        Forth-based, highly adaptable SMDOS to the rescue!
        </p><blockquote>
            "No problem. With the advice of the radar engineers, the Forth
            module that was used to generate the display was quickly
            modified to produce a calibrated display. The gain of the
            receiver was increased until a perfect bell-shaped pattern
            again appeared on the display."
        </blockquote><p>
        Then a <strong>second</strong> hardware failure:
        </p><blockquote>
            "This was only the start of our problems. A satellite on board
            failed to deploy properly. The shuttle had to remain in high orbit
            until the problem was resolved before it could fire its engines to
            descend to the orbit that had been planned for the SIR-B data
            taking. "
        </blockquote><p>
        Now the shuttle would not be in the planned orbit for data-taking.
        A second SMDOS adaptation fixed that.
        </p><p>Then a <strong>third</strong> hardware problem with <em>another</em>
        antenna:
        </p><blockquote>
            "A bolt had sheared in the antenna's pointing mechenism and the KU
            band antenna was trashing around, threatening to destroy itself. It
            was necessary for an astronaut to exit the shuttle (EVA) in a
            spacesuit to pin the antenna down."
        </blockquote>
        <p>Now the shuttle had to rotate to point at a relay satellite to
        gather data (to tape!) and then rotate towards Earth to transmit
        the recorded data, and repeat.
        </p><blockquote>
            "Of course this meant an entirely new data-taking strategy. Again
            the SMDOS computers were put to work displaying new plans for the
            stringent new conditions."
        </blockquote>
        <p>They lost tons of data, of course, but at least they were able to
        salvage 20% of it by rotating and capturing and rotating and
        transmitting. None of which would have a been possible if they had not
        been able to modify the software on the spot.
        </p><p>Conclusion:
        </p><blockquote>
            "When the antenna feed failed and we realized that the software had
            to adapt to that failure, it was relatively easy given the
            interactive Forth enviroment to change the required module to meet
            the new specifications. This is clearly beyond the capabilites of
            most languages."
        </blockquote>
        <p>Other systems are interactive, but Forth may be singularly unique in
        allowing <em>complete</em> freedom of modification in an interactive
        session.
        </p><p>Of course, this kind of freedom is double-edged sword if there ever
        was one. The implied danger of that powerful sword (plus the postfix
        notation) has been a hard sell in the corporate world.
        </p><p>So far, we've just seen Forth <em>software</em> in space. But it
        is often accompanied by Forth <em>hardware</em>.
        </p><p>Yup, Forth hardware. Introducing:
	</p></div>
</div>

<div>
    <h2>Forth hardware in space</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/harris_rtx.jpg" alt="block diagram of harris chip"></p><p>The <b>Harris RTX2010</b> processor.  Used in a ton of space
    applications.
    </p><p>Featuring:
	</p><ul>
		<li>Direct execution of Forth
		</li><li>Two hardware stacks, 256 words deep
		</li><li>8MHz clock, extremely low latency 
		</li><li>Radiation hardened
	</li></ul>

	<div>
        <p>The
		<a href="https://en.wikipedia.org/wiki/RTX2010">RTX2010</a>
        (wikipedia.org)
        and its predecessor, the RTX2000
        account for a good portion of the use of Forth in the space industry.
        They run Forth natively.
        </p><p>The use of the RTX line in space may not be soley due to a particular
        love for Forth per se, but because of the specific attractive properties
        of these processors - very low latency and the ability to quickly
        process the floating point mathematical operations needed for neat space
        stuff like navigation and thruster control. Either way, the 
        <em>philosophy</em> of Forth embedded in this hardware is suitable
        for the extreme environments in which they operate.
        </p><p>Largely because of the stack-based design, the RTX 2000 and 2010
        have very compact machine code. <strong>Subroutines calls take only a
        single cycle and returns are free!</strong>  All branches take
        exactly one cycle as well.
        </p><p>They are also brilliantly minimalistic designs. The entire RTX2000
        instruction set fits on a single page. See the first PDF link below:
        </p><ul>
            <li><a href="https://vfxforth.com/flag/jfar/vol6/no1/article1.pdf">The Harris RTX 2000 Microcontroller (PDF)</a>
                (vfxforth.com)
                - The RTX2000 as described in The Journal of Forth Application
                and Research by Tom Hand.
            </li><li><a href="https://www.mouser.com/catalog/specsheets/intersil_fn3961.pdf">HS-RTX2010RH Data Sheet (PDF)</a>
                (mouser.com)
                - The RTX2010 is now sold by Intersil.
            </li><li><a href="https://rocelec.widen.net/view/pdf/wezkwfjd8w/INSLS11172-1.pdf?t.download=true&amp;u=5oefqw">RTX 2000 Data Sheet (PDF)</a>
                (widen.net) as originally sold by Harris.
            </li><li><a href="https://www.digikey.com/en/products/detail/rochester-electronics-llc/RTX2000JI-8/12131997">DigiKey evidently has 800+ RTX2000s in stock</a>
                (digikey.com)
                through Rochester Electronics for a reasonable $22, but you
                have to by them in quantities of 14.  (Maybe you can find
                14 friends to do a group buy?)
        </li></ul>
        <p>So what kind of spacecraft use these Forth-native processors?
        </p><p>Let's look at a specific pair of spacecraft:
	</p></div>
</div>

<div>
	<h2>Rosetta and Philae</h2>
	<p><img src="https://ratfactor.com/forth/talkimg/rosetta_spacecraft.png" alt="drawing of rosetta approaching comet"></p><p>First mission to send a spaceship to orbit a comet and then deliver a
    lander to the comet's surface!
	</p><p>The <b>Rosetta</b> spacecraft's Ion and Electron Sensor instrument used a Harris RTX2010.
	</p><p>The <b>Philae</b> lander used two Harris RTX2010s for complete system control (CDMS) and two more to control its landing system (ADS).

	</p><div>
        <p>The ESA's <a href="https://www.esa.int/Science_Exploration/Space_Science/Rosetta">Rosetta mission</a>
        (esa.int)
        was hugely ambitious: Send a spacecraft to
        rendezvous with and then follow a comet around the Sun, deploy
        the Philae lander to the surface by dropping it into the comet's
        gravity well, observe the lander as it shoots harpoons
        into the icy surface of the comet to keep from bouncing back out
        into space, then relay the lander's communication from the surface back to
        distant Earth, 28 minutes away at the speed of light.
        </p><p>Rosetta traveled in the Solar System for a full decade (2004 to
        2014) before meeting up with comet <b>67P/"Churyumov-Gerasimenko"</b>.
        (67P is 4km wide and orbits the sun every six and a half years.)
        </p><p>Rosetta orbited the comet for three months and then deployed
        the Philae lander to the surface of the comet.
        </p><p>Both craft contained a full laboratory of advanced scientific
        instruments (11 on Rosetta, 9 on Philae) including some that doubled
        as high-resolution cameras with images suitable for humans to view.
        <a href="https://en.wikipedia.org/wiki/Rosetta_(spacecraft)">The whole mission</a>
        (wikipedia.org)
        is worth reading about. There are some fantastic images
        and animations to be seen on the mission page and on the
        <a href="https://en.wikipedia.org/wiki/67P/Churyumov%E2%80%93Gerasimenko">comet's own page</a>
        (wikipedia.org).
        <img src="https://ratfactor.com/forth/talkimg/philae_from_rosetta_via_osiris.jpg" alt="the philae lander brightly illuminated by the sun against the black backdrop of space">
        </p><p>Often described as being "the size of a washing machine," the
        <a href="https://en.wikipedia.org/wiki/Philae_(spacecraft)">Philae</a>
        (wikipedia.org)
        lander pushed away from Rosetta's orbit to drop to the surface of 67p.
        </p><p><em>The picture at the right was taken
        from Rosetta's OSIRIS imager as Philae fell slowly away from the
        orbiter.</em>
        </p><p>Because the comet's gravitational pull is so small (huge boulders
        have been observed moving around on its surface), a pair of harpoons
        were meant to fire into the surface of the comet and hold the lander
        down. These did not deploy (possibly a mechanical failure) and a
        landing thruster also failed, so Philae ended up having a long,
        low-gravity tumble on the surface.
        </p><p>It's been speculated that the harpoon failure actually
        <em>saved</em> Philae from an even more exciting trip because studies
        of the surface found it to be harder than expected. It might have
        launched itself away rather than anchoring! As it was, the lander
        bounced with a force that was <em>just shy</em> of escaping the comet's
        gravitational pull entirely. It rose a full kilometer above the surface
        before slowly returning for another two bounces to its final resting
        spot.
        </p><p>A pair of Harris RTX2010s controlled Philae's Active Descent System.
		Check out <a href="https://www.cpushack.com/2014/11/12/here-comes-philae-powered-by-an-rtx2010/">Here comes Philae! Powered by an RTX2010</a>
        (cpushack.com):
        </p><blockquote>
            "Why was the RTX2010 chosen?  Simply put the RTX2010 is the lowest
            power budget processor available that is radiation hardened, and
            powerful enough to handle the complex landing procedure.  Philae
            runs on batteries for the first phase of its mission (later it will
            switch to solar/back up batteries) so the power budget is critical.
            The RTX2010 is a Forth based stack processor which allows for very
            efficient coding, again useful for a low power budget."
        </blockquote>
        <p>Here is more information (with pictures!) about the physical design
        and components in the Philae control system:
        <a href="http://www.sgf.hu/newsgfweb3_005.htm">Command and Data Management Subsystem (CDMS) of the Rosetta Lander (Philae)</a>
        (sgf.hu).
        </p><blockquote>
            "Harris RTX2010 processor has been selected for the DPU boards
            because it is the lowest power consuming, space qualified,
            radiation hardened, 16-bit processor with features to provide so
            complicated functions as the CDMS has to perform. It is a stack
            based, Forth language oriented processor with an exotic and
            challenging instruction set. CDMS is a real-time control and data
            acquisition system, and it has to process tasks in parallel.
            Therefore, a real-time, pre-emptive multitasking operating system
            has been developed to run application tasks executing the required
            functions in parallel."
        </blockquote>
        <p>And here is the lander's
        <a href="https://www.spyr.ch/ps/ads/qm/">Active Descent System (ADS) QM User Manual</a>
        (spyr.ch)
        which has way more detail about this computer system, including a
        number of details about the Forth software:
        </p><blockquote>
             "After resetting the subsystem (power-on reset), the bootstrap
             sets up the Forth environment, copies the firmware from PROM to
             RAM and disables the PROM for further access.  
             <p>
             
             After this, the main word Do-App is called from the Forth system
             immediately after setup. You can find the main word Do-App in the
             file app.fth (see part II). Do-App calls Init-App, which itself
             calls other initilisation words like Init-ADS. Then the
             application enters the main loop. In the main loop the following
             actions are performed:
             </p><ul>
                <li>reset the watchdog (watchdog is enabled for the QM)
                </li><li>put the data into the HK registers
                </li><li>get the data from the ADC handler
                </li><li>process CDMS requests"
             </li></ul>
        </blockquote>
        <p>Despite the unfortunate landing, which put Philae in too much
        shadow to get as much solar energy as hoped and at an angle that
        made communication with Rosetta difficult, Philae was still
        robust enough to perform "80%" of its scientific mission, which
        is pretty amazing.
	</p></div>
</div>

<div>
    <p>A picture taken by the Philae lander as it lay on its side, enjoying some sunlight on
    one of its feet:
    <img src="https://ratfactor.com/forth/talkimg/philae_civa1.jpg" alt="the outline of deeply fractured rock and ice, the darkness of space in the background, and a lander foot brightly lit by the sun.">

    </p>
</div>

<div>
    <p>This is one of the final images taken by the Rosetta orbiter as it made the
           "hard descent" (controlled crash landing) to the surface of comet 67p:
	<img src="https://ratfactor.com/forth/talkimg/rosetta_comet_67p.jpg" alt="photo of comet 67p taken by rosetta (">

	</p><div>
        <p>The image and a description are here: <a href="https://www.nasa.gov/feature/jpl/final-descent-image-from-rosetta-spacecraft">Final Descent Images from Rosetta Spacecraft</a>
        (nasa.gov).
        </p><blockquote>
            "The decision to end the mission on the surface is a result of
            Rosetta and the comet heading out beyond the orbit of Jupiter
            again. Farther from the sun than Rosetta had ever journeyed before,
            there would be little power to operate the craft. Mission operators
            were also faced with an imminent month-long period when the sun is
            close to the line-of-sight between Earth and Rosetta, meaning
            communications with the craft would have become increasingly more
            difficult."
        </blockquote>
        <p>By the way, the ESA has a nice summary of the computer hardware
        used by the OSIRIS camera on Rosetta which was used to take the surface
        image above and also the little picture of the descending lander further
        above.
        <a href="https://sci.esa.int/web/sci-fmi/-/35973-osiris">Optical, Spectroscopic, and Infrared Remote Imaging System</a>
        (esa.int).
        </p><p>After finishing the first draft of this article, I was so excited about
        the Rosetta mission that I ended up ordering and reading
        <i>Rosetta: The Remarkable Story of Europe's Comet Explorer</i> by Peter Bond.
        It's a bit of a dry read, but the subject matter is thrilling
        nonetheless and the coverage is thorough.  I recommend it if you want to
        know a lot more about this awesome engineering and scientific milestone.
        (It does not, sadly, mention Forth.)
        </p><hr>
        <p><strong>Rabbit Hole Alert:</strong> This takes us away from
        Forth for a moment, but learning about the
        Virtuoso RTOS (real-time operating system) eventually leads to a deep,
        deep Wikipedia rabbit hole that takes you on a journey to the Inmos
        processors, Hoare's CSP, the occam programming language, the HeliOS
        parallel computing operating system, and the concept of the
        <b>"transputer"</b> microprocessors.
        </p><p>Transputers use whole processors as
        building blocks for a parallel computer in the same way transistors are
        used as the building blocks for processors. (Thus, transputer =
        "transistor computer," you see?) They were mostly featured in
        supercomputers, but they also saw some industrial controller use
        and there was even an Atari Transputer Workstation,
        ATW-800.
        </p><p>(I've intentionally not linked to any of these things here
        because you'll disappear into that hole and never see the end of this
        document, which would be very sad.  Also, I mention "transputers" again
        one more time below and you wouldn't want to miss that.)
        </p><hr>
        <p>The Rosetta orbiter and Philae lander now rest silently on the
        surface of 67p, where they will no doubt stay for billions of
        years or until future comet tourists pick them up and put them
        in a trophy room, whichever comes first.
	</p></div>
</div>

<div>
    <h2>Stop Writing Dead Programs</h2>
    <p>
        <img src="https://ratfactor.com/forth/talkimg/jack_rusher.jpg" alt="crop of jack rusher from the previous screenshot">
        "...Space probes written in Lisp and <b>Forth</b> have been
        debugged while off world...  If they had proven their programs
        correct by construction, shipped them into space, and then found out
        their spec was wrong, they would have just had some <b>dead junk on
            Mars</b>.  But what these guys had was the ability to fix things
        while they are running on space probes...  In addition, the spec is
        always wrong!"
    </p><p>-- Jack Rusher, Stop Writing Dead Programs (talk given at Strange Loop 2022)

    </p><div>
        <p>Here's the talk:
        <a href="https://www.youtube.com/watch?v=8Ab3ArE8W3s">"Stop Writing Dead Programs" by Jack Rusher (Strange Loop 2022)</a>
        (youtube.com).
        </p><p>You've got 43 minutes to watch it. I'm timing you. Don't get
        distracted by other YouTube suggestions. Come back here. I'm waiting.
        </p><p>Or better yet, check out Jack's <i>awesome</i> transcript,
            which was super helpful when I wanted to re-find the above quote:
        <a href="https://jackrusher.com/strange-loop-2022/">Stop Writing Dead Programs.</a>
        (jackrusher.com).
        </p><p>In his transcript, he notes:
        </p><blockquote>
            "Had I had more time, I would have done an entire series of slides
            on FORTH. It's a tiny language that combines interactive
            development, expressive metaprogramming, and tremendous machine
            sympathy. I've shipped embedded systems, bootloaders, and other
            close-to-the-metal software in FORTH."
        </blockquote>
        <p>I was extremely interested in hearing about Forth systems being
        updated in space, but had a heck of a time finding any.
        I finally found one on a page that is otherwise largely
        dedicated to Lisp's use at the Jet Propulsion Labs:
        <a href="https://mecrisp-stellaris-folkdoc.sourceforge.io/lisp.html">1992-1993 - Miscellaneous stories</a>
        (sourceforge.io)
        on the amazing, sprawling site for the Mecrisp-Stellaris Forth
        (which runs on various non-x86 CPUs):
        </p><blockquote>
           "Also in 1993 I used MCL to help generate a code patch for the
           Gallileo magnetometer. The magnetometer had an RCA1802 processor, 2k
           each of RAM and ROM, and was programmed in Forth using a development
           system that ran on a long-since-decommissioned Apple II. The
           instrument had developed a bad memory byte right in the middle of
           the code. The code needed to be patched to not use this bad byte.
           The magnetometer team had originally estimated that resurrecting the
           development environment and generating the code patch would take so
           long that they were not even going to attempt it. Using Lisp I wrote
           from scratch a Forth development environment for the instrument
           (including a simulator for the hardware) and used it to generate the
           patch. The whole project took just under 3 months of part-time
           work."
        </blockquote>
        <p><i>(If anyone has any leads to other notable Forth uses in space, I'd love to
            hear about them.)</i>
    </p></div>
</div>

<div>
    <p>When we defeat the alien kill-bots and reprogram them, it will
		surely be with a Forth of some sort.
	<img src="https://ratfactor.com/forth/talkimg/killbots_forth.png" alt="alien kill-bots being controlled by forth">

    </p><div>
        <p>In the background, one of the Invader machines lies crumpled and
        smoking amidst ruins. This was one of Earth's great cities.
        </p><p> Stomping towards us with its mechanical arms raised in victory, is
        another Invader.  But this one is different. The tell-tale giveaway is
        the opening in its protective head dome. And is that a flag? Why yes, it is!
        </p><p>At great cost, humans managed to trap one of the Invaders long
        enough penetrate its outer defenses, while otherwise leaving the
        machine unharmed and operable.
        </p><p>Working feverishly against a doomsday clock, they burrowed deep into
        the electrical heart of the machine, identifying and classifying its
        alien functions until they understood it well enough to attempt
        an interface.
        </p><p>A bus protocol was decoded. Programming work began.
        </p><p>It went poorly. The aliens had unthinkably bizarre notions of
        generalized computing that defied all known patterns of software.
        </p><p>Everything had to be done with agonizing labor, stringing
        sequences of raw bus messages together in hopes of getting a
        correct response.
        </p><p>But then someone had the bright idea to bootstrap a Forth
        from the known instruction sequences. With this, they could write
        a bare-bones interpreter. And, at last, they could experiment
        quickly and safely.
        </p><p>Days later, an arm moved. Then they crushed a barrel with a
        gripper claw:
        </p><pre>BARREL OBJECT-ID VISION TARGET
133 L-ARM-FWD 14 L-CLAW-OPEN
25 L-ARM FWD 14 L-CLAW CLOSE
        </pre>
        <p>Then a first four-legged step. Then 20 steps:
        </p><pre>PREP-QUAD-LEGS
20 STRIDE-LOOP
        </pre>
        <p>As ravaged fighters looked on in amazement, <b><i>"Defender-1"</i></b> burst
        from the old brick warehouse and, in a terrific crash, it toppled
        another Invader as it was passing by on patrol.
        </p><p>The machines grappled for a moment and it
        looked as if <i>Defender-1</i>'s clumsy movements would be no match
        for the alien, even from a superior position.
        </p><p>But humans had decoded <em>all</em> of the weapon systems by then and a
        special word had been prepared for this moment:
        </p><pre>: KILL
    100 BEAM-LEVEL
    BOT OBJECT-ID VISION TARGET
    L-BEAM FIRE-FULL
    R-BEAM FIRE-FULL
;
        </pre>
        <p>Twin blinding beams of energy struck the enemy full in the torso
        and instantly turned its mechanical guts into sizzling plasma.
        After a moment of silence, a single cheer rose up from a doorway
        nearby and was soon joined by a hundred different voices from
        places of concealment in the ruined buildings.
        </p><p>Now the humans had the upper hand at last! Other Invader
        machines were disabled or captured. <i>Defender-1</i> was joined
        by <i>Defender-2,</i> and then <i>3</i>, <i>4</i>, <i>5</i>, and more!
        </p><p>Software was passed by sneaker-net and by shortwave packet radio.
        City by city, Earth took back control. And along with victory,
        word of the <b>One True Language</b> spread across the land. Flags
        were raised in honor of its original discoverer, Chuck Moore.
        </p><p>Where other abstractions had failed, the universal machine
        truth of Forth had succeeded.
    </p></div>
</div>

<div>
    <h2>Forth is an <i>idea</i></h2>
    <p>Here's a "family tree" of some notable Forths:
    <img src="https://ratfactor.com/forth/talkimg/forth_family_tree.jpg" alt="unreadably tiny diagram of lineage of various Forth implementations">

    </p><div>
        <p>Obviously the graphic is unreadably tiny. For the full-size
            original and the gForth program used to create it, check out:
        </p><p><a href="http://www.complang.tuwien.ac.at/forth/family-tree/">Forth Family Tree and Timeline</a>
        (complang.tuwien.ac.at).
        </p><p>One of the hardest things about trying to learn "Forth" is realizing
        that there is no single implementation that can lay sole claim to that name.
        As we've seen, some of Chuck's first Forths pre-date the name entirely.
        </p><p>There are Forth standards dating back to the original ANS Forth
        document and continuing with the
        <a href="https://forth-standard.org/">Forth 2012 Standard and Forth200x committee</a>
        (forth-standard.org).
        </p><p>Forths have shared concepts. There are many common words, certainly, but purpose-built
        Forths will have their own special vocabularies.
        </p><p>Also, it is true that <em>making</em> Forths is at least as fun
            as using them.
        </p><p>The forest of computing is peppered with hobby Forths. They grow where nothing
        else can survive. They flourish in the sun and in the shade.
        Each one is a little glittering jewel.
    </p></div>
</div>

<div>
    <h2>What about Chuck?</h2>
    <p>Charles H. Moore founded Forth, Inc in 1973. He's continued to port
    Forth to various systems ever since. But he's never stopped inventing.
    <img src="https://ratfactor.com/forth/talkimg/chuck_and_crt.png" alt="drawing of chuck at a desk programming on a pc with a crt. equipment looks 1990s era">

    </p><div>
        <p>I drew this image of Chuck from a photo in this amazing quote
        collection,
        <a href="http://www.ultratechnology.com/moore4th.htm">Moore Forth: Chuck Moore's Comments on Forth </a>
        (ultratechnology.com)
        compiled by Jeff Fox.
        </p><p>You'll notice I added some color to my drawing for this one, and
        that's because I'm pretty sure that what we're seeing on Chuck's monitor
        is...
    </p></div>
</div>

<div>
    <p><span>color</span><span>Forth</span>
    <img src="https://ratfactor.com/forth/talkimg/colorforth.png" alt="screenshot of colorforth">

	</p><div>
        <p><em>The above screenshot is actually from
        <a href="http://www.etherforth.org/ef.html">a page about etherForth</a>,
        (etherforth.org),
        which is a
        <span>color</span><span>Forth</span> 
        written for GA144 chips. (Don't look up those chips yet unless you
        want a spoiler for what's coming in a moment below!)</em>
        </p><p>What the heck are we looking at here?
        </p><p>So,
		<a href="https://en.wikipedia.org/wiki/ColorForth">colorForth</a>
        (wikipedia.org)
        is:
        </p><blockquote>
            "An idiosyncratic programming environment, the colors simplify
            Forth's semantics, speed compiling, and are said to aid Moore's own
            poor eyesight: colorForth uses different colors in its source code
            (replacing some of the punctuation in standard Forth) to determine
            how different words are treated."
        </blockquote>
        <p>And, of course:
        </p><blockquote>
            "The language comes with its own tiny (63K) operating system.
            Practically everything is stored as source code and compiled when
            needed. The current colorForth environment is limited to running on
            Pentium grade PCs with limited support for
            lowest-common-denominator motherboards, AGP video, disk, and
            network hardware."
        </blockquote>
        <p>But the best description of
        <span>color</span><span>Forth</span>
        and its strengths come from Chuck Moore himself in an interview in
        2009, 
        <a href="https://www.red-gate.com/simple-talk/opinion/geek-of-the-week/chuck-moore-geek-of-the-week/">Chuck Moore: Geek of the Week</a>
        (red-gate.com):
        </p><blockquote>
            "Forth has some ugly punctuation that colorForth replaces by
            coloring source code. Each word has a tag that indicates function;
            it also determines color. This seems a small point, but it
            encourages the use of functions, such as comments or compile-time
            execution, that would be inconvenient in Forth."
        </blockquote>
        <p>It should be noted that the colors can be replaced with symbols or
        notation, so using the language without the ability to
        distinguish color is not a barrier. Color is just <i>one way</i> to
        show this information.
        </p><p>There are a ton of other enhancements beyond the obvious color aspect,
        such as:
        </p><blockquote>
            "By having words preparsed, the compiler is twice as fast. Another
            small point, since compiling is virtually instantaneous, but this
            encourages recompiling and overlaying the modules of an
            application. Smaller modules are easier to code, test and document
            than a large one."
        </blockquote>
        <p>That interview contains another Chuck Moore quote about software
        construction in general:
        </p><blockquote>
            "Instead of being rewritten, software has features added. And
            becomes more complex. So complex that no one dares change it, or
            improve it, for fear of unintended consequences. But adding to it
            seems relatively safe. We need dedicated programmers who commit
            their careers to single applications. Rewriting them over and over
            until they're perfect."
        </blockquote>
        <p>This is something I've seen repeated again and again by some of
        the most respected minds in software: You cannot just keep adding
        things to a program. You must continually re-work the program to match
        your needs as they change over time. Ideally, you re-write the program.
        Only time and deep consideration can yield the most elegant, correct,
        and <i>simple</i> program.
        </p><p>Which brings us to...
	</p></div>
</div>

<div>
    <h2>The pursuit of simplicity</h2>
    <p>Chuck Moore has been fighting against software complexity since the 1950s.
    </p><p>"I am utterly frustrated with the software I have to deal with. Windows is beyond comprehension! UNIX is no better. DOS is no better. There is no reason for an OS. It is a non-thing. Maybe it was needed at one time.
    </p><p>-- Chuck Moore, 1997

</p></div>

<div>
    <p>"If they are starting from the OS they have made the first mistake. The OS isn't going to fit on a floppy disk and boot in ten seconds."
    </p><p>-- Chuck Moore, 1999

	</p><div>
        <p><i>These quotes also come from Jeff Fox's quotes collection,
        <a href="http://www.ultratechnology.com/moore4th.htm">Moore Forth: Chuck Moore's Comments on Forth</a>
        (ultratechnology.com).</i>
        </p><p>As you've no doubt gathered over the course of this page,
        Chuck is no fan of big, heavy, complicated software such as
        operating systems.
        </p><p>He believes in compact, <em>machine-sympathetic</em> programming.
        </p><p>"Mechanical Sympathy" is not Chuck's term, but I believe it
        accurately describes his philosophy. It comes from this
        (apocryphal?) quote by 
        Formula One race car driver
        <a href="https://en.wikipedia.org/wiki/Jackie_Stewart">Jackie Stewart</a>
        (wikipedia.org):
        </p><blockquote>
            "You don't have to be an engineer to be a racing driver, but you
            do have to have <strong>mechanical sympathy</strong>."
        </blockquote>
        <p>The use of the term to describe <em>software</em> comes from Martin Thompson's
        blog of the same name.
        In <a href="https://mechanical-sympathy.blogspot.com/2011/07/why-mechanical-sympathy.html">Why Mechanical Sympathy?</a>
        (blogspot.com),
        he writes:
        </p><blockquote>
            "Why does the software we use today not feel any faster than the
            DOS based applications we used 20 years ago???  It does not have to
            be this way.  As a software developer I want to try and produce
            software which does justice to the wonderful achievements of our
            hardware friends."
        </blockquote>
        <p>Again and again, you'll see this sentiment echoed by Chuck Moore
        and fans of Forth.
        </p><p>I think it's very interesting and telling that Forth tends to be
        popular with "hardware people" such as electrical engineers and embedded
        systems designers. By contrast, it seems that "software people"
        tend to idolize a more abstract, <em>high-level</em> beauty as found
        in languages such as Lisp or Scheme.
        Of course, this is a gross generalization and may have no basis in fact,
        but I know I'm not the only person to notice this trend.
        </p><p>Maybe another way to describe this aspect of Forth is that it has a
        "mechanical purity" in the same way that Joy, with its combinators,
        has a "mathematical purity."
        </p><p>And speaking of hardware...
	</p></div>
</div>

<div>
    <h2>Processor Design</h2>
    <p>Chuck's <i>real</i> love seems to be processor design.
	Those Harris RTX2000 and RTX2010 chips used in so many space missions?
    <strong>That's basically his chip!</strong>
	<img src="https://ratfactor.com/forth/talkimg/chuck_chip_scientist.png" alt="chuck as a mad scientist chip creator">
</p></div>

<div>
    <p>No kidding.
    </p><p>Chuck, that brilliant rascal, has been designing hardware since 1983
    starting with the Novix N400 gate array. An improved design was
    sold to Harris to become the RTX chips.
    </p><p>Chuck designs processors with his own VLSI software, "OKAD", written in
    <strong>500 lines of Forth</strong>, of course.

	</p><div>
        <p>Take a moment to pause on that last sentence.
        </p><p>Processor design software written in 500 lines?
        </p><p>You read that right.
        </p><p>OKAD is one of the <strong>Great Legends of Chuck Moore</strong>.
        But what, exactly, is it?
        </p><p>First off, VLSI stands for
        <a href="https://en.wikipedia.org/wiki/Very_Large_Scale_Integration">Very Large Scale Integration</a>
        (wikipedia.org):
        </p><blockquote>
            "Very large-scale integration (VLSI) is the process of
            creating an integrated circuit (IC) by combining millions or
            billions of MOS transistors onto a single chip. VLSI began in the
            1970s when MOS integrated circuit (Metal Oxide Semiconductor) chips
            were developed and then widely adopted, enabling complex
            semiconductor and telecommunication technologies. The
            microprocessor and memory chips are VLSI devices."
        </blockquote>
        <p>The product of VLSI is what we think of when we imagine
        the modern image of "computer chip" in our minds.
        </p><p>"Integration" is simply the shrinking of computers from whole rooms to
        microscopic thinking dust:
        </p><ul>
            <li>Computers began with processors the size of rooms with
                discrete logic gates you can touch (relays to vacuum tubes to
                transistors).
            </li><li>Then, processors were shrunk down to the size of refrigerators
                with logic boards of <strong>integrated circuits</strong> (ICs).
            </li><li>Finally, entire processors shrunk down to fit on a single chip via
                Very Large Scale <strong>Integration</strong>.
        </li></ul>
        <p>(Also, in a parallel path from mainstream desktop computing,
            VLSI has also produced entire computers and, increasingly,
            <b>multiple computers on a single chip</b>, also
            known as 
            <a href="https://en.wikipedia.org/wiki/System_on_a_chip">"system(s) on a chip" (SoC)</a>
            (wikipedia.org).
            The lines around the various types are extremely blurry, but
            some familiar forms are microcontrollers, embedded systems,
            various "mobile" devices, etc.)
        </p><p>Anyway Moore's,
        <a href="https://colorforth.github.io/vlsi.html">VLSI Design Tools (OKAD)</a>
        (colorforth.github.io)
        system a complete processor workshop:
        </p><blockquote>
            "In 500 lines of
            <span>color</span><span>Forth</span>,
		    these tools provide everything required to design a chip."
        </blockquote>
        <p>OKAD is really more of a collection of tools that work together to:
        </p><ul>
            <li>Describe the basic logic gates (constructed of transistors),
            </li><li>Design the layout of the entire circuit (the three-dimensional multi-layered network of connections between gates),
            </li><li>Simulate the circuit electrically (voltage, temperature, capacitance, etc.),
            </li><li>And export the finished design to the industry-standard
                <a href="https://en.wikipedia.org/wiki/GDSII">GDSII</a>
                (wikipedia.org)
                file format that is given to IC foundries (or "chip fabs").
        </li></ul>
        <p>For more about OKAD, I highly recommend reading the
        excellent answers to
        <a href="https://retrocomputing.stackexchange.com/questions/25506/did-forths-inventor-charles-moore-really-write-a-cad-program-in-only-5-lines-of">Did Forth's inventor Charles Moore really write a CAD program in only 5 lines of code?</a>
        (retrocomputing.stackexchange.com).
        </p><p>Moving on from the software to Moore's chips themselves, Moore himself wrote
        a nice little summary of his designs. It is written in Moore's typical consise style,
        giving just a few key details about each chip:
        <a href="https://colorforth.github.io/chips.html">Forth Chips</a>
        (colorforth.github.io).
        </p><p>First, there was the <b>Novix NC4000</b>, which was designed
        for a CMOS gate array.
        </p><p>Here's a whole book about the NC4000 chip: <a href="http://forth.org/OffeteStore/4001-footstepsFinal.pdf">Footsteps in an Empty Valley: NC4000 Single Chip Forth Engine (8Mb PDF)</a> by Dr. Chen-Hanson Ting.
        </p><p>To quote Dr. Ting from Chapter 2:
        </p><blockquote>
            "The Novix NC4000 is a super high-speed processing engine which is
            designed to directly execute high level Forth instructions. The
            single chip microprocessor, NC4000, gains its remarkable
            performance by eliminating both the ordinary assembly language and
            internal microcode which, in most conventional processors,
            intervene between the high level application and the hardware. The
            dual stack architecture greatly reduces the overhead of subroutine
            implementation and makes NC4000 especially suited to support high
            level languages other than Forth."
        </blockquote>
        <p>As you can see, this reads just like a description of the Harris RTX
        chips used in the <b>spacecraft</b> we explored above.
        </p><p>Sure enough, if we read the History section on the
        <a href="https://en.wikipedia.org/wiki/RTX2010">RTX2010 page</a>,
        (wikipedia.org)
        the lineage is made very clear:
        </p><blockquote>
            "In 1983, Chuck Moore implemented a processor for his programming
            language Forth as a gate array. As Forth can be considered a dual
            stack virtual machine, he made the processor, Novix N4000 (later
            renamed NC4016), as a dual-stack machine. In 1988, an improved
            processor was sold to Harris Semiconductor, who marketed it for
            space applications as the RTX2000."
        </blockquote>
        <p>Another great article about Moore's early processor design work
        (and some more <b>spacecraft</b> mentions!), check out
        <a href="https://www.cpushack.com/2013/02/21/charles-moore-forth-stack-processors/">Charles Moore: From FORTH to Stack Processors and Beyond</a>
        (cpushack.com)
        which is part one of a two-part series.
        </p><p>After the Novix, came a variety of chip projects:
        </p><ul>
            <li><b>Sh-Boom</b> (32-bit, 20 Mips),
            </li><li><b>MuP20/MuP21</b> (21-bit, 100 Mips),
            </li><li><b>F21</b> (500 Mips - and be sure to check out
                <a href="http://www.ultratechnology.com/scope.htm">F21 in a Mouse</a>
               (ultratechnology.com), which is a complete F21 computer running a
               graphical environment that has been packed
               into a PC mouse...in the Pentium era!)
            </li><li><b>i21</b> (21-bit, 55 Mips)
            </li><li><b>X18</b> (18-bit, 2400 Mips)
        </li></ul>
        <p>These are all real systems that really worked. The hard part has always
        been finding customers.
        </p><p>Over the years, other people have also created Forth chips and FPGA
        implementations of hardware Forth-likes. Check out the links on
        <a href="http://forth.org/cores.html">Forth CPU Cores</a>
        (forth.org)
        and
        <a href="http://www.ultratechnology.com/chips.htm">Forth Chips</a>
        (ultratechnology.com).
        </p><p>In addition to
        <span>color</span><span>Forth</span>,
        Moore also developed <b>"Machine Forth"</b> as an even <em>more</em>
        machine-sympathetic language than traditional Forth. It's based on
        the machine code of the MuP21 microprocessor listed above.
        </p><p>I won't go into a lot of detail about Machine Forth, but
        here are some interesting links:
        </p><ul>
            <li><a href="http://www.ultratechnology.com/mfp21.htm">MuP21 Machine Forth Tutorial #1 </a>
                (ultratechnology.com)
            </li><li><a href="http://www.ultratechnology.com/p21intro.html">P21Forth 1.02 User's Manual</a>
                (ultratechnology.com)
            </li><li><a href="https://www.complang.tuwien.ac.at/anton/euroforth/ef99/thomas99a.pdf">Machine Forth for the ARM processor (PDF)</a>
                (tuwien.ac.at)
            </li><li><a href="https://github.com/CCurl/MachineForth">MachineForth - Inspired by Chuck Moore's "Machine Forth" and the MuP21 processor.</a>
                (github.com)
            </li><li><a href="https://jjn.one/forth/machine-forth/">Machine Forth (links and bibliography)</a>
                (jjn.one)
        </li></ul>
        <p>As you can see, Moore has always been looking for new ways to work
        with computers, a partnership between the machine and the programmer.
        </p><p>Which brings us to the current state of Chuck Moore's art...
	</p></div>
</div>

<div>
    <h2>GreenArrays</h2>
    <p>"Programming a 144-computer chip to minimize power" (2013)
	<img src="https://ratfactor.com/forth/talkimg/greenarrays_144_computers.jpg" alt="screenshot from Chuck's 2013 strange loop talk about 144 computer chip">
	</p><p>144 asynchronous computers on a chip. Idle cores use 100 nW. Active ones use 4 mW, run at 666 Mips, then return to idle. All computers running flat out: 550mW (half a Watt).

	</p><div>
        <p>Check out Chuck's talk at StrangeLoop:
		    <a href="https://www.youtube.com/watch?v=0PclgBd6_Zs">Programming a 144-computer chip to minimize power - Chuck Moore (2013)</a>
            (youtube.com)
		</p><p>And here's the official website:
        <a href="https://www.greenarraychips.com/">GreenArrays, Inc.</a>
        (greenarraychips.com)
        "Ultra-low-powered multi-computer chips with integrated
            peripherals."
        </p><p>Probably the best summary comes from the architecture document,
<a href="https://www.greenarraychips.com/home/documents/greg/PB002-100822-GA-Arch.pdf">GreenArrays Architecture (PDF)</a>
        (greenarraychips.com):
        </p><blockquote>
            "<b>COMPLETE SYSTEMS:</b> We refer to our chips as Multi-Computer Systems because they are, in fact, complete systems. Supply one of our chips with power and a reset signal, and it is up and running. All of our chips can load their software at high speed using a single wire that can be daisy chained for multiple chips; if desired, most can be bootstrapped by a simple SPI flash memory.
            <p>"Contrast this with a Multi-Core CPU, which is not a computing system until other devices such as crystals, memory controllers, memories, and bus controllers have been added.  All of these things consume energy, occupy space, cost money, add complexity, and create bottlenecks.
            </p><p><b>"NO CLOCKS:</b> Most computing devices have one or more clocks that synchronize all operations. When a conventional computer is powered up and waiting to respond quickly to stimuli, clock generation and distribution are consuming energy at a huge rate by our standards, yet accomplishing nothing."
        </p></blockquote>
        <p>It goes on to explain the fine-grained power usage, how each computer
        communicates with its neighbor, and similar statements high-level
        descriptions.
        </p><p>You can buy these chips right now for as little as $20 in quantities
        of 10. The only problem is that to easily make to use of one, you either
        need to buy the $495 development board or make your own. I've found
        precious few examples of people who have done this online.
        </p><p>One rare example is
        <a href="https://web.archive.org/web/20121004044707/http://www.designspark.com/content/hands-144-core-processor">Hands on with a 144 core processor</a>
        (archive.org <i>of designspark.com</i>).
        Article author Andrew Back even has screenshots of the of the
        arrayForth environment (which is basically
        <span>color</span><span>Forth</span>)
        </p><p>The question, of course, is <em>what do you do with this thing?</em>
        </p><p>It may turn out that the answer can be found by looking back into
        computing history. You don't even have to go back very far.
        </p><p>If you read the "Rabbit Hole Alert" under the picture of the surface
        of comet 67p above, then you saw the term "transputer".
        I think it would be very interesting to compare and contrast the
        GreenArrays GA144 chips to the Inmos transputer chips.
        It seems to me, at first glance, that anything those transputers would
        have been suited for ought to be a good fit for a GreenArrays multi-computer chip
        as well.
        </p><hr>
        <p><b>Rabbit Hole Alert 2:</b> Another fun diversion into massively parallel
        computers is one of my favorites: Danny Hillis's
        <a href="https://en.wikipedia.org/wiki/Connection_Machine">Connection Machine</a>
        (wikipedia.org)
        computers featuring a "12-dimensional hypercube" routing design.
        </p><p>Hillis himself is a "human rabbit hole" of inventions, ideas, and
        writings. He's the author of one of my favorite non-fiction books, "The
        Pattern on the Stone," and co-founder of The Long Now Foundation
        (along with some other "human rabbit holes" including the incredible
        writer and thinker, Steward Brand).
        </p><p>One of the projects of the Long Now
        Foundation is the design and creation of the 10,000 year giant
        mechanical <i>Clock of the Long Now</i> which is intended to tick once
        per year and have a cuckoo that comes out once every 1,000 years.
        </p><p>There is also a direct connection between the Long Now and the
        Rosetta spacecraft: Long Now created the "Rosetta disc", an extremely
        clever physical object containing the micro-etched text of over
        a thousand human languages. The Rosetta spacecraft carried a nickel
        prototype of the disc. So that's now sitting on a comet.
        </p><p>As with the previous rabbit hole alert, I could link to all of these
        people and things, but each is part of an unfathomably deep fractal of
        fascinating stuff and I'm afraid you might never come back to finish
        this. But do look them up later!
        </p><hr>
        <p>At any rate, 
        </p><p>The only problem with parallel computers is that we're still
        not that great at programming them.
        </p><p>Heck, we're not even that great at serial programming yet.
	</p></div>
</div>

<div>
    <h2>The future: sustainable low-energy computing and Forth?</h2>
    <p>"If you talk about molecular computers that are circulating in your bloodstream, they aren't going to have very much power and they aren't going to have very much memory and they aren't going to be able to use much energy.
    </p><p>-- Chuck Moore, <i>Programming a 144-computer chip to minimize power</i>, 2013

    </p><div>
        <p>The eventual complete domination of x86 PCs in practically all areas
        of computing, followed by the current rise of powerful ARM CPUs are
        historical computing fact.  Incredible feats of processor engineering
        have made it possible to run what can only be described as
        "supercomputers" on battery power and put them in our pockets.
        </p><p>Trends in both software and hardware have been towards
        ever-increasing layers of complexity.  The layers are very deep and
        very wide.
        </p><p>As I write this, certain popular avenues of computing threaten to
        make every current piece of inefficient software seem absolutely
        <em>frugal</em> by comparison.
        </p><p><i>(Incredibly, we're not even content with the
            supercomputers on our desks and in our hands. So we rely on
            services which work remotely over the Internet on powerful networks
            of computers in huge data centers. We think of this computing as
            cheap or even free because much of it is indirectly paid for with
            advertising dollars.  Paid for, that is, with our attention and
            personal data. Those data centers with their screaming cooling fans
            and backup generators are somewhere else, not in our living rooms.
            It's easy to simply forget how all of this is made possible.)</i>
        </p><p>Increasingly, we rely on massively complex software with that seems
        to have an unending appetite for computing power.
        </p><p><b>But do these trends have to continue?</b>
        </p><p>There is absolutely no reason we have to use increasingly
        inefficient and poorly-constructed software with steeper and steeper
        hardware requirements in the decades to come.
        </p><p>In fact, the reverse could be true.
        </p><p>There are plenty of applications where low energy computing is a
        categorical requirement and I believe these applications will only
        increase.
    </p></div>
</div>

<div>
    <p>Forth-likes could have a strong future as we look towards:
    </p><ul>
        <li>Tiny, ubiquitous computers
        </li><li>Solar power
        </li><li>Heavily constrained VMs
    </li></ul>

    <div>
        <p>There are physical realities (such as the speed of light) which
        ultimately govern the speed at which we can perform a calculation or
        the maximum number of calculations which can be done with a Watt of
        electricity using computers made out of atoms. These are hard limits.
        But there will surely be other plateaus along the way to reaching these
        limits.
        </p><p>Around the year 2006, we saw Dennard scaling
        slow to a crawl.
        <a href="https://en.wikipedia.org/wiki/Dennard_scaling">Dennard scaling</a>
        (wikipedia.org)
         describes the relationship between
        the shrinking size of transistors to the increase of computing speed.
        Simply put, smaller transistors can switch at higher speeds and take
        less voltage.  This scaling law held for many years.  But we reached a
        speed plateau at around 4 GHz because of current leakage and heat.
        </p><p>In
        <a href="http://www.gotw.ca/publications/concurrency-ddj.htm">The Free Lunch Is Over</a>
        (gotw.ca),
        published in Dr. Dobb's Journal in 2005, Herb Sutter writes,
        </p><blockquote>
            "The major processor manufacturers and architectures, from Intel
            and AMD to Sparc and PowerPC, have run out of room with most of
            their traditional approaches to boosting CPU performance. Instead
            of driving clock speeds and straight-line instruction throughput
            ever higher, they are instead turning en masse to hyperthreading
            and multicore architectures."
        </blockquote>
        <p>Multicore processors and increasingly clever hardware architecture
        tricks have continued to provide increases in computing power...but it's
        not the same.
        </p><p>Near the end of the article, Sutter advises:
        </p><blockquote>
            <p>"There are two ways to deal with this sea change toward
            concurrency. One is to redesign your applications for concurrency,
            as above. <b>The other is to be frugal, by writing code that is more
            efficient and less wasteful.</b> This leads to the third interesting
            consequence:
            </p><p>"3. Efficiency and performance optimization will get more, not less, important.
            <b>Those languages that already lend themselves to heavy optimization will find new life</b>; those that don't will need to find ways to compete and become more efficient and optimizable. Expect long-term increased demand for performance-oriented languages and systems."
        </p></blockquote>
        <p>(Emphasis mine.)
        </p><p>For now, we're still eating the remains of that free lunch.
        </p><p>I'm probably fairly rare among programmers in wishing it would end.
        I'd like to see greater emphasis on the craft and art of software.
        I'd like to see us make full and intentional use of the incredible
        power available to us now.
        </p><p>The
        <a href="https://en.wikipedia.org/wiki/Retrocomputing">retrocomputing</a>
        (wikipedia.org)
        hobby has continually shown how much more we could have done with the
        home computers of the 1980s if we had continued to use them.
        In many cases, they've been shown to be able to run programs
        previously thought impossible.
        The things we could do with <em>current</em> hardware are surely
        even more amazing, but it will be perhaps decades before we find
        out.
        <img src="https://ratfactor.com/forth/talkimg/ibm_704.png" alt="chuck moore operating an IBM 704">
        </p><p>In 1958, Chuck Moore created a dirt-simple interpreter on an
        IBM 704. That computer filled a room and cost about 2 million dollars.
        </p><p>I can buy a more powerful computer (minus the awesome control panel
        with lights and switches) today for literal <em>pocket change</em>
        in the form of a "microcontroller", a complete computer on a single
        silicon chip, and write a powerful Forth system for it. That computer
        can run on a coin cell battery or even a tiny solar panel, sipping power
        where the IBM 704 inhaled it.
        </p><p>There has never been a more incredible time for small-scale computing.
        Like the explosion of personal computers in the 1980s, the time is ripe
        for fun, creative, interesting, useful, and very <em>personal</em>
        computers and software.
        </p><p>These tools can do useful work and they can also teach and delight us.
        Ideas like Forth are ripe for rediscovery as we learn exciting new
        ways to compute with arrays of inexpensive, low-power computers.
        </p><p>We can pursue this line of thinking for pragmatic reasons, or just
        because it is beautiful and fun and worth doing for its own sake.
    </p></div>
</div>

<div>
    <p>Chuck Moore is basically retired now, programming and toying with
    software with no deadlines or clients.
    </p><p>It is now on us to take up the mantle of Forth, to champion the values
    of ingenuity, elegance, efficiency, and simplicity.
    
    </p><h2>Forth is...</h2>

    <div>
        <p><b>Simple</b>
        </p><p>To really understand the value of Forth (and <em>especially</em> Chuck Moore's
        later work on Machine Forth and the GreenArrays computers), we must consider the
        difference between <b>"simple"</b> and <b>"easy"</b>.
        </p><p>We were blessed with the ability to speak of this difference by
        Rich Hickey in his brilliant talk,
        <a href="https://www.youtube.com/watch?v=SxdOUGdseq4">"Simple Made Easy" (2011)</a>
        (youtube.com)
        which every developer should see at some time in their life.
        (Or read <a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/SimpleMadeEasy.md">the transcript of Simple Made Easy</a>
        (github.com)
        provided by Mattias Nehlsen.)
        </p><p>Forth is not easy. It may not always even be pleasant. But it is certainly simple.
        Forth is one of the <em>simplest</em> programming languages there has ever been.
        </p><p><b>A crafted language</b>
        </p><p>If the best software is truly crafted for problem at hand, then
        it makes sense that an idea programming language would also be
        crafted for the problem at hand.
        </p><p>An absolutely amazing talk about language design,
        Guy Steele's
        <a href="https://www.youtube.com/watch?v=_ahvzDzKdB0">Growing a Language (1998)</a>
        (youtube.com)
        demonstrates how languages are built up from primitives.
        The talk is a performance art and deeply insightful.
        </p><p>Steele helpfully also wrote up a transcript of the talk:
        <a href="https://www.cs.virginia.edu/~evans/cs655/readings/steele.pdf">Growing a Language (PDF)</a>
        (virginia.edu)
        Imagine Steele is saying "Forth" here in place of "Lisp" because
        the point is the same:
        </p><blockquote>
            "Lisp was designed by one man, a smart man, and it works in a way
            that I think he did not plan for. In Lisp, new words defined by the
            user look like primitives and, what is more, all primitives look
            like words defined by the user! In other words, if a user has good
            taste in defining new words, what comes out is a larger language
            that has no seams."
        </blockquote>
        <p>Go <em>forth</em> and create the perfect
        programming language for <em>you</em>!
    </p></div>
</div>

<div>
    <h2>The Legend Confirmed</h2>
    <p><img src="https://ratfactor.com/forth/talkimg/wizard_chuck.png" alt="chuck moore as an adorable wizard"></p><p>I promised I would show you a magic trick at the end of this article.
    </p><p>Behold, a new definition for the integer 4:
    </p><pre>: 4 12 ;
    </pre>
    <p>Which I shall now use in a sentence:
    </p><pre>." The value of 4 is " 4 . CR

<b>The value of 4 is 12</b>
    </pre>
    <p><b>Tada!</b>
</p></div>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gleam OTP – Fault Tolerant Multicore Programs with Actors (170 pts)]]></title>
            <link>https://github.com/gleam-lang/otp</link>
            <guid>45638588</guid>
            <pubDate>Sun, 19 Oct 2025 22:25:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/gleam-lang/otp">https://github.com/gleam-lang/otp</a>, See on <a href="https://news.ycombinator.com/item?id=45638588">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Gleam OTP</h2><a id="user-content-gleam-otp" aria-label="Permalink: Gleam OTP" href="#gleam-otp"></a></p>
<p dir="auto">Fault tolerant multi-core programs with OTP, the BEAM actor framework.</p>
<p dir="auto"><a href="https://hex.pm/packages/gleam_otp" rel="nofollow"><img src="https://camo.githubusercontent.com/89b1730c6d7abd58ffb4ef6237482e50090391ca72e9197d3f5b41b46a0dc8f3/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f676c65616d5f6f7470" alt="Package Version" data-canonical-src="https://img.shields.io/hexpm/v/gleam_otp"></a>
<a href="https://hexdocs.pm/gleam_otp/" rel="nofollow"><img src="https://camo.githubusercontent.com/4bb6f0346c92c97533ee101eb333cf8ab3c7c7285aa966aed1ba529e055f398b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6865782d646f63732d666661666633" alt="Hex Docs" data-canonical-src="https://img.shields.io/badge/hex-docs-ffaff3"></a></p>

<div dir="auto" data-snippet-clipboard-copy-content="import gleam/erlang/process.{type Subject}
import gleam/otp/actor

pub fn main() {
  // Start an actor
  let assert Ok(actor) =
    actor.new(0)
    |> actor.on_message(handle_message)
    |> actor.start

  // Send some messages to the actor
  actor.send(actor.data, Add(5))
  actor.send(actor.data, Add(3))

  // Send a message and get a reply
  assert actor.call(actor.data, waiting: 10, sending: Get) == 8
}

pub fn handle_message(state: Int, message: Message) -> actor.Next(Int, Message) {
  case message {
    Add(i) -> {
      let state = state + i
      actor.continue(state)
    }
    Get(reply) -> {
      actor.send(reply, state)
      actor.continue(state)
    }
  }
}

pub type Message {
  Add(Int)
  Get(Subject(Int))
}"><pre><span>import</span> <span>gleam/erlang/process</span><span>.</span><span>{</span><span>type</span> <span>Subject</span><span>}</span>
<span>import</span> <span>gleam/otp/actor</span>

<span>pub</span> <span>fn</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
  <span>// Start an actor</span>
  <span>let</span> <span>assert</span> <span>Ok</span><span>(</span><span>actor</span><span>)</span> <span>=</span>
    <span>actor</span><span>.</span><span>new</span><span>(</span><span>0</span><span>)</span>
    <span>|&gt;</span> <span>actor</span><span>.</span><span>on_message</span><span>(</span><span>handle_message</span><span>)</span>
    <span>|&gt;</span> <span>actor</span><span>.</span><span>start</span>

  <span>// Send some messages to the actor</span>
  <span>actor</span><span>.</span><span>send</span><span>(</span><span>actor</span><span>.</span><span>data</span><span>,</span> <span>Add</span><span>(</span><span>5</span><span>)</span><span>)</span>
  <span>actor</span><span>.</span><span>send</span><span>(</span><span>actor</span><span>.</span><span>data</span><span>,</span> <span>Add</span><span>(</span><span>3</span><span>)</span><span>)</span>

  <span>// Send a message and get a reply</span>
  <span>assert</span> <span>actor</span><span>.</span>call<span>(</span>actor<span>.</span>data<span>,</span> waiting<span>:</span> 10<span>,</span> sending<span>:</span> <span>Get</span><span>)</span> == 8
<span>}</span>

<span>pub</span> <span>fn</span> <span>handle_message</span><span>(</span><span>state</span><span>:</span> <span>Int</span><span>,</span> <span>message</span><span>:</span> <span>Message</span><span>)</span> <span>-&gt;</span> <span><span>actor</span><span>.</span><span>Next</span></span><span>(</span><span>Int</span><span>,</span> <span>Message</span><span>)</span> <span>{</span>
  <span>case</span> <span>message</span> <span>{</span>
    <span>Add</span><span>(</span><span>i</span><span>)</span> <span>-&gt;</span> <span>{</span>
      <span>let</span> <span>state</span> <span>=</span> <span>state</span> <span>+</span> <span>i</span>
      <span>actor</span><span>.</span><span>continue</span><span>(</span><span>state</span><span>)</span>
    <span>}</span>
    <span>Get</span><span>(</span><span>reply</span><span>)</span> <span>-&gt;</span> <span>{</span>
      <span>actor</span><span>.</span><span>send</span><span>(</span><span>reply</span><span>,</span> <span>state</span><span>)</span>
      <span>actor</span><span>.</span><span>continue</span><span>(</span><span>state</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>pub</span> <span>type</span> <span>Message</span> <span>{</span>
  <span>Add</span><span>(</span><span>Int</span><span>)</span>
  <span>Get</span><span>(</span><span>Subject</span><span>(</span><span>Int</span><span>)</span><span>)</span>
<span>}</span></pre></div>
<p dir="auto">Gleam’s actor system is built with a few primary goals:</p>
<ul dir="auto">
<li>Full type safety of actors and messages.</li>
<li>Be compatible with Erlang’s OTP actor framework.</li>
<li>Provide fault tolerance and self-healing through supervisors.</li>
<li>Have equivalent performance to Erlang’s OTP.</li>
</ul>
<p dir="auto">This library documents its abstractions and functionality, but you may also wish
to read the documentation or other material on Erlang’s OTP framework to get a
fuller understanding of OTP, the problems it solves, and the motivations for its
design.</p>
<p dir="auto">Not all Erlang/OTP functionality is included in this library. Some is not
possible to represent in a type safe way, so it is not included. Other features
are still in development, such as further process supervision strategies.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Common types of actor</h2><a id="user-content-common-types-of-actor" aria-label="Permalink: Common types of actor" href="#common-types-of-actor"></a></p>
<p dir="auto">This library provides several different types of actor that can be used in
Gleam programs.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Process</h3><a id="user-content-process" aria-label="Permalink: Process" href="#process"></a></p>
<p dir="auto">The process is the lowest level building block of OTP, all other actors are
built on top of processes either directly or indirectly. Typically this
abstraction would not be used very often in Gleam applications, favour
other actor types that provide more functionality.</p>
<p dir="auto">Gleam's <a href="https://hexdocs.pm/gleam_erlang/gleam/erlang/process.html" rel="nofollow">process</a> module is defined in the <code>gleam_erlang</code> library.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Actor</h3><a id="user-content-actor" aria-label="Permalink: Actor" href="#actor"></a></p>
<p dir="auto">The <code>actor</code> is the most commonly used process type in Gleam and serves as a good
building block for other abstractions. Like Erlang's <code>gen_server</code> it handles
OTP's system messages automatically to enable OTP's debugging and tracing
functionality.</p>
<p dir="auto"><a href="https://hexdocs.pm/gleam_otp/gleam/otp/actor.html" rel="nofollow">Documentation</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Supervisor</h3><a id="user-content-supervisor" aria-label="Permalink: Supervisor" href="#supervisor"></a></p>
<p dir="auto">Supervisors are processes that start and then supervise other processes.
They can restart them if they crash, and terminate them when the application is
shutting down.</p>
<p dir="auto">Supervisors can start other supervisors, resulting in a hierarchical process
structure called a supervision tree, providing fault tolerance and monitoring
benefits to a Gleam application.</p>
<ul dir="auto">
<li><a href="https://hexdocs.pm/gleam_otp/gleam/otp/static_supervisor.html" rel="nofollow">gleam/otp/static_supervisor</a> documentation.</li>
<li><a href="https://hexdocs.pm/gleam_otp/gleam/otp/factory_supervisor.html" rel="nofollow">gleam/otp/factory_supervisor</a> documentation.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Limitations and known issues</h2><a id="user-content-limitations-and-known-issues" aria-label="Permalink: Limitations and known issues" href="#limitations-and-known-issues"></a></p>
<p dir="auto">Actors do not yet support all OTP system messages, so some of the OTP debugging
APIs may not be fully functional. These unsupported messages are discarded by
actors.</p>
<p dir="auto">If find that you have a need for one of the unimplemented system messages, open
an issue and we will implement support for it.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bible and Quran apps flagged NSFW by F-Droid (106 pts)]]></title>
            <link>https://forum.f-droid.org/t/nsfw-flag-incorrectly-added-to-bible-and-quran-apps/33401</link>
            <guid>45638096</guid>
            <pubDate>Sun, 19 Oct 2025 21:20:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forum.f-droid.org/t/nsfw-flag-incorrectly-added-to-bible-and-quran-apps/33401">https://forum.f-droid.org/t/nsfw-flag-incorrectly-added-to-bible-and-quran-apps/33401</a>, See on <a href="https://news.ycombinator.com/item?id=45638096">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/DiscussionForumPosting">
      <meta itemprop="headline" content="NSFW flag incorrectly added to Bible and Quran apps">
      
      <meta itemprop="datePublished" content="2025-10-12T18:40:14Z">
        <meta itemprop="articleSection" content="Apps">
      <meta itemprop="keywords" content="">
      


          <div id="post_1">
            <div>
              


              <p><span>
                  <time datetime="2025-10-12T18:40:14Z">
                    October 12, 2025,  6:40pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-19T18:25:25Z">
              <span itemprop="position">1</span>
              </span>
            </p></div>
            <div itemprop="text">
              <p>Hi, I recently released v1.6.0 of my app, bible feed, to f-droid.</p>


<p>For some reason it has been tagged as NSFW and I notice this new metadata has been added to the top:</p>
<p>AntiFeatures:<br>
NSFW:<br>
en-US: Promote ■■■■ and violence contents.</p>
<p><a href="https://gitlab.com/fdroid/fdroiddata/-/blob/master/metadata/com.me2christ.bible_feed.yml" target="_blank" rel="noopener nofollow ugc">https://gitlab.com/fdroid/fdroiddata/-/blob/master/metadata/com.me2christ.bible_feed.yml</a></p>
<p>But this is a simple bible reader app that obviously does not promote ■■■■ or violence in any way. I did not add this metadata, so where did it come from and why has it been added?</p>
<p>Please can anyone shed any light as to what is happening here?</p>
<p>Thank you.<br>
Andrew.</p>
            </div>

            

                
          </div>
          
          <div id="post_3" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/dizzib"><span itemprop="name">dizzib</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-12T19:21:37Z">
                    October 12, 2025,  7:21pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-12T19:35:10Z">
              <span itemprop="position">3</span>
              </span>
            </p>
            <div itemprop="text">
              <p>Thank you.</p>
<p>However, my app does not contain any Bible text at all, it is merely a Bible reading tracker.</p>
<p>In addition, the bible does not promote ■■■■ or violence, but condemns and teaches against such things…</p>
<p>Matthew 5:38-40 NKJV<br>
"You have heard that it was said, ‘An eye for an eye and a tooth for a tooth.’ [39] But I tell you not to resist an evil person. But whoever slaps you on your right cheek, turn the other to him also. [40] If anyone wants to sue you and take away your tunic, let him have your cloak also.</p>
<p>Matthew 5:43-44 NKJV<br>
"You have heard that it was said, ‘You shall love your neighbor and hate your enemy.’ [44] But I say to you, love your enemies, bless those who curse you, do good to those who hate you, and pray for those who spitefully use you and persecute you,</p>
<p>Matthew 26:51-52 NKJV<br>
And suddenly, one of those who were with Jesus stretched out his hand and drew his sword, struck the servant of the high priest, and cut off his ear. [52] But Jesus said to him, "Put your sword in its place, for all who take the sword will perish by the sword.</p>
<p>Mark 12:30-31 NKJV<br>
And you shall love the LORD your God with all your heart, with all your soul, with all your mind, and with all your strength.’ This is the first commandment. [31] And the second, like it, is this: ‘You shall love your neighbor as yourself.’ There is no other commandment greater than these."</p>
<p>John 15:12-13 NKJV<br>
This is My commandment, that you love one another as I have loved you. [13] Greater love has no one than this, than to lay down one’s life for his friends.</p>
<p>Galatians 5:22-26 NKJV<br>
But the fruit of the Spirit is love, joy, peace, longsuffering, kindness, goodness, faithfulness, [23] gentleness, self-control. Against such there is no law. [24] And those who are Christ’s have crucified the flesh with its passions and desires.</p>
<p>Galatians 6:10 NKJV<br>
Therefore, as we have opportunity, let us do good to all, especially to those who are of the household of faith.</p>
            </div>

            

          </div>
          <div id="post_4" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/dizzib"><span itemprop="name">dizzib</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-12T20:13:42Z">
                    October 12, 2025,  8:13pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-12T20:13:42Z">
              <span itemprop="position">4</span>
              </span>
            </p>
            <div itemprop="text">
              <p>My f-droid app page is currently showing this message: “This app contains content that should not be publicised or visible anywhere”.</p>
<p>But this is a false statement because my app does not contain any bible content at all, it is merely a bible reading tracker. All it contains are book names and chapter/verse numbers.</p>
<p>Therefore, would it be possible for this false NSFW to be removed?</p>
<p>Thank you.</p>
            </div>

            

          </div>
          <div id="post_5" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/dizzib"><span itemprop="name">dizzib</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-12T20:29:08Z">
                    October 12, 2025,  8:29pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-12T20:29:08Z">
              <span itemprop="position">5</span>
              </span>
            </p>
            

            

          </div>
          <div id="post_6" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/linsui"><span itemprop="name">linsui</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-13T07:39:15Z">
                    October 13, 2025,  7:39am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-13T07:39:15Z">
              <span itemprop="position">6</span>
              </span>
            </p>
            

            

          </div>
          <div id="post_7" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/Dasgrand"><span itemprop="name">Dasgrand</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-18T04:30:18Z">
                    October 18, 2025,  4:30am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-18T04:30:18Z">
              <span itemprop="position">7</span>
              </span>
            </p>
            <div itemprop="text">
              <p>This has happened to several applications that function similarly. A check of the F-Droid page on the anti-features for that tag lists at least 4 Bible apps that I saw, and at least one other religious document.</p>
<p>Could this be a case of malicious false reporting?</p>
            </div>

            

          </div>
          
          <div itemprop="comment" id="post_9" itemscope="" itemtype="http://schema.org/Comment">
              <p>Recently all Bible apps have been re-categorized as <code>NSFW</code>.</p>
<p>According to the official F-Droid anti-feature definition, Bible apps should not be considered as NSFW.</p>
<p>The current NSFW anti-feature definition is listed here: <a href="https://f-droid.org/docs/Anti-Features/#NSFW" rel="noopener nofollow ugc">Anti-Features | F-Droid - Free and Open Source Android App Repository</a> and copied below for reference:</p>
<blockquote>
<p>This Anti-Feature is applied to an app that contains content that <strong>the user</strong> may not want to be publicized or visible everywhere. The marked app may contain nudity, profanity, slurs, violence, intense sexuality, political incorrectness, or other potentially disturbing subject matter. This is especially relevant in environments like workplaces, schools, religious and family settings. The name comes from the Internet term “Not safe for work”.</p>
</blockquote>
<p>The key words here are <code>the user</code>. Apps should only be assigned this anti-feature if the app contains content that <code>the user</code> may not want publicized or visible elsewhere. Most, if not all users of Bible apps would indeed <strong>want</strong> the content of the apps to be publicized and visible elsewhere, so this anti-feature should not apply to Bible apps according to this definition.</p>
<p>Please consider reverting the commit that caused this issue (And would prevent future Bible apps - if <span>#1</span> in <a href="https://gitlab.com/fdroid/admin/-/issues/252" rel="noopener nofollow ugc">this ‘plan’</a> is still in place).</p>
            </div>
          <div id="post_10" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/pinoaffe"><span itemprop="name">pinoaffe</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-19T06:02:36Z">
                    October 19, 2025,  6:02am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-19T06:02:36Z">
              <span itemprop="position">10</span>
              </span>
            </p>
            <div itemprop="text">
              <p>The current NSFW Anti-Feature definition is overly broad to the point of being vague, and is not applied consistently - I’d even argue that it can barely be applied consistently, since it’s so broad.  Reddit apps in the repo are not marked as NSFW, even though reddit includes graphic depictions of violence and even pornographic content, the same applies to 4chan apps.  If this definition were to be taken as a prescription, one would even have to mark any news apps as NSFW, since ~all of them regularly feature descriptions of <em>violence, intense sexuality, political incorrectness, and other potentially disturbing subject matter</em>, and the same applies (to a lesser degree) to the wikipedia app, since wikipedia includes graphic depictions of violence.</p>
<p>This is not a workable definition in my opinion, it does not align with common usage of the phrase “NSFW” in any way, and I don’t think anyone benefits from being warned that religious texts include violence, just like no one would benefit from being warned that news apps or wikipedia apps contain violence.</p>
<p>I understand that the NSFW antifeature was added primarily to “cover your ass”, but I don’t think that that is necessary or prudent - even if laws that restrict distributing violent or pornographic content to minors could be interpreted such that they prohibit open access to religious texts, such laws are generally not interpreted that way and are generally not applied to religious texts.  Moreover, most if not all current legal restrictions on distributing religious texts are religious persecution, and I don’t think f-droid should want to bow to and collaborate with religious persecution.  I’d be appalled if f-droid were to remove or restrict access to Qur’an apps in response to the Trump regime restricting or prohibiting distribution of the Qur’an, or if apps “terrorist” “antifa” content were to be restricted or recategorized due to legal pressure</p>
<p>In addition to the vagueness caused by the definition, there is some inherent vagueness: when is an app considered to “include” content?  Browsers obviously don’t include the entire web, but do apps intended to browse specific platforms “include” the content on those platforms? How about apps with a built-in online “catalogue” of available content, such as an ebook reader with a few OPDS catalogues preloaded?</p>
            </div>

            

          </div>
          <div itemprop="comment" id="post_11" itemscope="" itemtype="http://schema.org/Comment">
              <p>My own App also got flagged:</p>


<p>This is just going against Christianity. Also my app only shows daily bible verses. And those are only motivational. So really bad practice to mark all Bible Apps nsfw. I don’t think any employee will have a problem reading bible at work. Don’t think any boss says anything about it. Please revert this really odd commit.</p>
<p>In general why add bible apps at all. Never heared from anyone that it not safe for work. Also on Reddit they do not use the NSFW tag for religious subreddit. According your policy also all news and messenger app should get this flag. Also a lot of games. Due there user can read about violence or could send asexual material. This is stupid. So please revert that comment.</p>
            </div>
          <div id="post_12" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/linsui"><span itemprop="name">linsui</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-19T08:23:02Z">
                    October 19, 2025,  8:23am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-19T08:23:02Z">
              <span itemprop="position">12</span>
              </span>
            </p>
            <div itemprop="text">
              <p>Do note that “NSFW” is just the name of the Anti-Feature. It’s not what the AF about. The</p>
<blockquote>
<p>This Anti-Feature is applied to an app that contains content that <strong>the user</strong> may not want to be publicized or visible everywhere.</p>
</blockquote>
<p>part is also a summary. The following details are the definition what we considered as NSFW, i.e.,</p>
<blockquote>
<p>nudity, profanity, slurs, violence, intense sexuality, political incorrectness, or other potentially disturbing subject matter</p>
</blockquote>
            </div>

            

          </div>
          <div itemprop="comment" id="post_13" itemscope="" itemtype="http://schema.org/Comment">
              <p>Yeah but bible apps could be considered as an e book reader maybe with just the bible itself pre loaded in some instances. And flagging them is like censoring a book. The Bible is a historical and literary text, and most Bible apps simply display textual content. Labeling such apps as NSFW introduces unnecessary controversy and may be perceived as ideologically biased — which doesn’t align with F-Droid’s goal of neutrality and open access. For me this sounds more political flagging all apps related to the Bible with NSFW so that they could not be searchable and so on.</p>
<p>For me this decision flagging all Bible app is purley political and have nothing to do with open source and neutrality.</p>
<p>An App like this one is fine where users are confronted with violence: <a href="https://f-droid.org/packages/org.zamedev.gloomydungeons2.opensource/" rel="noopener nofollow ugc">Gloomy Dungeons 2 | F-Droid - Free and Open Source Android App Repository</a></p>
<p>And a Bible app just because some text violates the policy? I would not flag any of the app and also not the game i mentioned. You should really reconsider your decision. The Bible is the most sold book in the world and available nearly anywhere. And no user will be directly offended by it only if the interpret it that way.</p>
            </div>
          <div itemprop="comment" id="post_14" itemscope="" itemtype="http://schema.org/Comment">
              <p>I agree with <a href="https://forum.f-droid.org/u/joshuabeny1999">@joshuabeny1999</a> and <a href="https://forum.f-droid.org/u/pinoaffe">@pinoaffe</a>. This seems politically biased.</p>
<blockquote>
<p>…political incorrectness…</p>
</blockquote>
<p>“Political correctness” changes from year to year and shaky ground that is open to interpretation based on the place you live in. If we’re <em>really</em> concerned about not offending people then revert this because its offensive to a lot of people. <img src="https://forum.f-droid.org/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
            </div>
          <div id="post_15" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forum.f-droid.org/u/linsui"><span itemprop="name">linsui</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-19T18:14:13Z">
                    October 19, 2025,  6:14pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-19T18:14:13Z">
              <span itemprop="position">15</span>
              </span>
            </p>
            <div itemprop="text">
              
<p>Neither do I. I also don’t like the</p>

<p>part which is vague and confusing. But since</p>

<p>we should comply to our policy and flag all apps matching the AF so that we are not</p>

<p>This AF is mostly designed for apps that are not suitable for children. Imagine what a child will feel when they read this in Bible</p>
<blockquote>
<p>21:18 Now if someone has a consistently stubborn and rebellious child, who refuses to listen to their father and mother—even when the parents discipline him, he won’t listen to them— the father and mother will take the son before the elders of that city at its gates. Then they will inform the city’s elders: “This son of ours is consistently stubborn and rebellious, refusing to listen to us. What’s more, he’s wild and a drunkard.” Then all the people of that town will stone him until he dies.</p>
</blockquote>
<p>or this in Quran</p>
<blockquote>
<p>18:74 And so they travelled on. Then, when they met a young boy and the man killed him, Moses said, ‘How could you kill an innocent person? He has not killed anyone! What a terrible thing to do!’<br>
18:80 The young boy had parents who were people of faith, and so, fearing he would trouble them through wickedness and disbelief,</p>
</blockquote>
<p>?</p>
            </div>

            

          </div>
          <div itemprop="comment" id="post_16" itemscope="" itemtype="http://schema.org/Comment">
              <p>You can nitpick in almost every app and thing about things that would “harm” a child, because a child is immature and can harm himself with anything, and for sure all religious books aren’t meant for children, and all books in general, <strong>hence why there is children’s books</strong>.</p>
<p>If we go by your logic we would turn f-droid into a children’s playground, is f-droid a children’s app store? This shouldn’t be NSFW, but rather expects a mature user. The same goes for many apps that would and can “harm” an immature user, which (if you think about it) almost all apps, so instead, a children friendly category or version should be made (if you really really care about the children like you say). Not like it would matter, because a child will mostly ignore all the warnings and only install what he pleases, which will probably never be a bible app or a Qur’an app, but rather a game or a stupid app that will rot his brain.</p>
<p>There’s many other apps that should expect a mature user and can harm a child (most apps), yet they aren’t flagged.</p>
<p>Google is already worsening android, so don’t make it worse. We all use and support f-droid to refine our android experience, not to get the same hits but from a different angle. And this “controversial” choices that lacks any improvements are unnecessary, you will only create fire that will burn the community.</p>
<p>Review your choices.</p>
            </div>
          <div itemprop="comment" id="post_17" itemscope="" itemtype="http://schema.org/Comment">
              <p>Thanks for explaining your reasoning, <a href="https://forum.f-droid.org/u/linsui">@linsui</a>. I appreciate that you also find parts of the NSFW definition vague and confusing.</p>
<p>However, the idea that religious text apps — such as Bible or Quran readers — should be flagged because certain verses might disturb children feels deeply inconsistent and, honestly, offensive. In one merge request, only Bible apps were flagged under this rule, while no other categories with potentially sensitive content were treated the same way. That selective interpretation gives the impression of bias, even if unintentional, and it’s understandable that many people — myself included — find it disrespectful.</p>
<p>If the current policy can be interpreted in a way that leads to entire categories of religious apps being marked NSFW, then the policy itself is flawed. Religious texts are part of cultural and historical heritage. Taking a few difficult passages out of context ignores their broader meaning and purpose.</p>
<p>Using this same logic, many historical or educational apps could also be considered NSFW — for instance, apps teaching about World War II, slavery, or ancient civilizations. These also describe violence, suffering, and morally difficult events, which could disturb children just as much as certain Bible or Quran passages. Yet they are rightly not flagged.</p>
<p>The NSFW policy should therefore be revised and clarified so that:</p>
<ol>
<li>
<p>It clearly targets apps that actually depict or promote explicit or adult material, not historical, religious, or educational content.</p>
</li>
<li>
<p>It is applied consistently across all categories, without singling out specific beliefs or cultural materials.</p>
</li>
<li>
<p>The term “NSFW” — which implies something inappropriate or obscene — could be replaced with something more neutral such as “contains mature or sensitive themes.”</p>
</li>
</ol>
<p>F-Droid has long stood for openness and fairness. I hope this policy can be reviewed and corrected to reflect those principles and to avoid similar misunderstandings or offenses in the future.</p>
<p>I have always recommended and promoted your app to many users, but at this stage, I can no longer do so in good conscience.</p>
<p>Even my non-Christian colleagues agree that flagging Bible apps in this way is inappropriate and sends the wrong message.</p>
<p>Best regards, Joshua Hürzeler</p>
            </div>
          <div id="post_18" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            
            <p>Flagging Bible and Quran apps as NSFW, even if unintentional, sends the wrong message and goes against F-Droid’s policy on neutrality, while also making it look like F-Droid censors religious and cultural content. Like other people said, this will create unncessary controversy and could potentially damage F-Droid’s reputation.</p>

            

          </div>
          <div itemprop="comment" id="post_19" itemscope="" itemtype="http://schema.org/Comment">
              <p>Very well put, these are my sentiments exactly.</p>
<p><a href="https://forum.f-droid.org/u/linsui">@linsui</a>  The main issues for me are</p>
<ul>
<li>Bible apps are no longer searchable by default.</li>
<li>Bible apps were singled out in this change.</li>
<li>The NSFW label causes Bible apps to be displayed with a note indicating that the app promotes pornography and other similar content:</li>
</ul>
<div><a href="https://forum.f-droid.org/uploads/default/original/2X/2/2927b70b4f83a6b2b1d232b109f53847dd261b82.jpeg" data-download-href="https://forum.f-droid.org/uploads/default/2927b70b4f83a6b2b1d232b109f53847dd261b82" title="Screenshot_20251019-113307"><img src="https://forum.f-droid.org/uploads/default/optimized/2X/2/2927b70b4f83a6b2b1d232b109f53847dd261b82_2_225x500.jpeg" alt="Screenshot_20251019-113307" data-base62-sha1="5S4Ffu1tIFYwmD1TDtDzDIKUKNc" width="225" height="500" srcset="https://forum.f-droid.org/uploads/default/optimized/2X/2/2927b70b4f83a6b2b1d232b109f53847dd261b82_2_225x500.jpeg, https://forum.f-droid.org/uploads/default/optimized/2X/2/2927b70b4f83a6b2b1d232b109f53847dd261b82_2_337x750.jpeg 1.5x, https://forum.f-droid.org/uploads/default/optimized/2X/2/2927b70b4f83a6b2b1d232b109f53847dd261b82_2_450x1000.jpeg 2x" data-dominant-color="474745"></a></div>
<p>There is no doubt that the Bible contains mature content and a warning about such is not an issue with me, but to remove the app from search by default and to lump the app in with other apps that we find very offensive is therefore offensive as well.</p>
<p>I have also been a very strong supporter of F-droid (via word of mouth) and at this point feel embarrassed to have recommended this to my Christian friends (who will now have to enable the NSFW filter to download Bible apps that I have recommended to them).</p>
<p>After all of this, I do still want to thank you for supporting and helping the developers of some of these Bible apps to get listed on your platform. I hope the issue here can be quickly resolved in an amicable way.</p>
            </div>
          <div itemprop="comment" id="post_20" itemscope="" itemtype="http://schema.org/Comment">
              
<p>So we could rename the anti-feature, but keep it, and all is fine?</p>
            </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Duke Nukem: Zero Hour N64 ROM Reverse-Engineering Project Hits 100% (212 pts)]]></title>
            <link>https://github.com/Gillou68310/DukeNukemZeroHour</link>
            <guid>45637880</guid>
            <pubDate>Sun, 19 Oct 2025 20:54:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Gillou68310/DukeNukemZeroHour">https://github.com/Gillou68310/DukeNukemZeroHour</a>, See on <a href="https://news.ycombinator.com/item?id=45637880">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto">A decompilation of Duke Nukem Zero Hour for N64.</p>
<p dir="auto">Note: To use this repository, you must already own a copy of the game.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dependencies</h2><a id="user-content-dependencies" aria-label="Permalink: Dependencies" href="#dependencies"></a></p>
<p dir="auto">The build instructions assume that you will be using Ubuntu 20.04; either natively or via WSL2.</p>
<p dir="auto">Package requirements can be install via:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo apt update
sudo apt install make git build-essential binutils-mips-linux-gnu cpp-mips-linux-gnu python3 python3-pip"><pre>sudo apt update
sudo apt install make git build-essential binutils-mips-linux-gnu cpp-mips-linux-gnu python3 python3-pip</pre></div>
<p dir="auto">Tools requires Python 3.8+. Package requirements can be installed via:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip3 install --upgrade pip
pip3 install -U splat64[mips]
pip3 install -r requirements.txt"><pre>pip3 install --upgrade pip
pip3 install -U splat64[mips]
pip3 install -r requirements.txt</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building</h2><a id="user-content-building" aria-label="Permalink: Building" href="#building"></a></p>
<p dir="auto">Clone the repository; note the --recursive flag to fetch submodules at the same time:</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/Gillou68310/DukeNukemZeroHour.git --recursive"><pre>git clone https://github.com/Gillou68310/DukeNukemZeroHour.git --recursive</pre></div>
<p dir="auto">Navigate into the freshly cloned repo</p>

<p dir="auto">Place the Duke Nukem Zero Hour US ROM in the root of this repository, name it baserom.us.z64, and then run the first make command to extract the ROM:</p>

<p dir="auto">Now build the ROM:</p>

<p dir="auto">If you did everything correctly, you'll be greeted with the following:</p>
<div dir="auto" data-snippet-clipboard-copy-content="Creating z64: build/us/dukenukemzerohour.z64
OK"><pre>Creating z64: build/us/dukenukemzerohour.z64
OK</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Other versions</h3><a id="user-content-other-versions" aria-label="Permalink: Other versions" href="#other-versions"></a></p>
<p dir="auto">This repository has support for the French versions of the game too.</p>
<p dir="auto">To build this version, place your ROM in the root of the repo and rename it to baserom.fr.z64. Pass VERSION=fr to the above make commands.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building NON_MATCHING Version</h3><a id="user-content-building-non_matching-version" aria-label="Permalink: Building NON_MATCHING Version" href="#building-non_matching-version"></a></p>
<p dir="auto">Functions can be decompiled to a state where they are functionally equivalent, but are not a byte-perfect match.
In order to build/test the non-matching, add NON_MATCHING=1 argument to the make commands.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Docker</h2><a id="user-content-docker" aria-label="Permalink: Docker" href="#docker"></a></p>
<p dir="auto">A Docker image containing all dependencies can be built and ran as follows:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker build --no-cache . -t dukenukemzerohour
docker run --rm -ti --mount src=$(pwd),target=/dukenukemzerohour,type=bind dukenukemzerohour"><pre>docker build --no-cache <span>.</span> -t dukenukemzerohour
docker run --rm -ti --mount src=<span><span>$(</span>pwd<span>)</span></span>,target=/dukenukemzerohour,type=bind dukenukemzerohour</pre></div>
<p dir="auto">Then continue with <a href="#Building">the building instructions</a></p>
<p dir="auto">When binding windows or mac folder I strongly recommand installing <a href="https://mutagen.io/documentation/docker-desktop-extension" rel="nofollow">Mutagen Extension for Docker Desktop</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker --context=desktop-linux-mutagen run --rm -ti --mount src=$(pwd),target=/dukenukemzerohour,type=bind dukenukemzerohour"><pre>docker --context=desktop-linux-mutagen run --rm -ti --mount src=<span><span>$(</span>pwd<span>)</span></span>,target=/dukenukemzerohour,type=bind dukenukemzerohour</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Debugging</h2><a id="user-content-debugging" aria-label="Permalink: Debugging" href="#debugging"></a></p>
<p dir="auto">Game can be debugged with gdb through mupen64plus (Windows only for now).
In order to have source code information the game should be compiled with modern gcc by adding MODERN=1 to the make command.</p>
<p dir="auto">Run the gdb server in cmd:</p>
<div dir="auto" data-snippet-clipboard-copy-content="tools\debugger\win32\gdbserver.bat"><pre>tools<span>\d</span>ebugger<span>\w</span>in32<span>\g</span>dbserver.bat</pre></div>
<p dir="auto">Then run the gdb client in cmd:</p>
<div dir="auto" data-snippet-clipboard-copy-content="tools\debugger\win32\gdbclient.bat"><pre>tools<span>\d</span>ebugger<span>\w</span>in32<span>\g</span>dbclient.bat</pre></div>
<p dir="auto">It's also possible to debug within vscode with the <a href="https://marketplace.visualstudio.com/items?itemName=webfreak.debug" rel="nofollow">Native Debug</a> extension.</p>
<p dir="auto">Run the gdb server in cmd:</p>
<div dir="auto" data-snippet-clipboard-copy-content="tools\debugger\win32\gdbserver.bat"><pre>tools<span>\d</span>ebugger<span>\w</span>in32<span>\g</span>dbserver.bat</pre></div>
<p dir="auto">Then run the "GDB Client(Win32)" configuration in vscode.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools</h2><a id="user-content-tools" aria-label="Permalink: Tools" href="#tools"></a></p>
<ul dir="auto">
<li><a href="https://github.com/simonlindholm/asm-differ">asm-differ</a>; rapidly diff between source/target assembly</li>
<li><a href="https://github.com/simonlindholm/decomp-permuter">decomp-permuter</a>; tweaks code, rebuilds, scores; helpful for weird regalloc issues</li>
<li><a href="https://github.com/matt-kempster/mips_to_c">mips2c</a>; assembly to C code translator</li>
<li><a href="https://github.com/ethteck/splat">splat</a>; successor to n64split</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Novo Nordisk's Canadian Mistake (395 pts)]]></title>
            <link>https://www.science.org/content/blog-post/novo-nordisk-s-canadian-mistake</link>
            <guid>45637744</guid>
            <pubDate>Sun, 19 Oct 2025 20:39:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/blog-post/novo-nordisk-s-canadian-mistake">https://www.science.org/content/blog-post/novo-nordisk-s-canadian-mistake</a>, See on <a href="https://news.ycombinator.com/item?id=45637744">Hacker News</a></p>
Couldn't get https://www.science.org/content/blog-post/novo-nordisk-s-canadian-mistake: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Dosbian: Boot to DOSBox on Raspberry Pi (151 pts)]]></title>
            <link>https://cmaiolino.wordpress.com/dosbian/</link>
            <guid>45637133</guid>
            <pubDate>Sun, 19 Oct 2025 19:26:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cmaiolino.wordpress.com/dosbian/">https://cmaiolino.wordpress.com/dosbian/</a>, See on <a href="https://news.ycombinator.com/item?id=45637133">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

	<main id="main">

		
			
			
			<article id="page-1570" class="page">

				 <!-- /post-header -->

				
				<div>

						
<h2 id="a-486dx-machine-in-the-palm-of-your-hand">09/01/2025 released DOSBIAN 3.0 for Raspberry Pi 3/4/400/5/500</h2>



<p><strong>WHAT’S NEW IN VERSION 3.0</strong></p>



<ul>
<li>Latest distro updates applied to run in Raspberry Pi 5/500.</li>



<li>Dosbox Staging updated to version 0.82, now with support for MMX instructions (Please see official sites for all the changements).</li>
</ul>



<p>Incredible performances expecially with Raspberry Pi 5/500, Dosbian V3.0 guarantees you an incredible DOS experience.</p>



<figure><img data-attachment-id="3488" data-permalink="https://cmaiolino.wordpress.com/dosbian/db3-2/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg" data-orig-size="1024,768" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="db3" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg?w=300" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg?w=616" width="1024" height="768" src="https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg?w=1024" alt="" srcset="https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg 1024w, https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg?w=150 150w, https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg?w=300 300w, https://cmaiolino.wordpress.com/wp-content/uploads/2025/01/db3.jpg?w=768 768w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<div><p>Rewritten from scratch starting from the new Bookworm OS for Raspberry Pi, Dosbian is the first distro totally dedicated to the DOS world. It boots straight to Dosbox, from there, you can install whatever you want and building your retro-pc 🙂<br>Whether you love DOS games or you’re just fond of all the DOS retro software, this is the distro for you.</p><p>Just switch on your Raspberry Pi and in few seconds your Dos prompt will be ready to use. No configuration needed, just an old school command like based machine to enjoy!</p></div>



<figure data-carousel-extra="{&quot;blog_id&quot;:15249892,&quot;permalink&quot;:&quot;https:\/\/cmaiolino.wordpress.com\/dosbian\/&quot;}">
<figure><a href="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg"><img data-attachment-id="1774" data-permalink="https://cmaiolino.wordpress.com/dosbian_case/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg" data-orig-size="495,510" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="dosbian_case" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg?w=291" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg?w=495" width="495" height="510" data-id="1774" src="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg?w=495" alt="" srcset="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg 495w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg?w=146 146w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/dosbian_case.jpg?w=291 291w" sizes="(max-width: 495px) 100vw, 495px"></a></figure>



<figure><a href="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png"><img data-attachment-id="1709" data-permalink="https://cmaiolino.wordpress.com/win95/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png" data-orig-size="640,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="win95" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=300" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=616" width="616" height="462" data-id="1709" src="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=616" alt="" srcset="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=616 616w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=150 150w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=300 300w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png 640w" sizes="(max-width: 616px) 100vw, 616px"></a></figure>
</figure>



<p>What you can do with your Dosbian distro:</p>



<ul>
<li>Run all retro Pc Sofware (DOS / Win 3.1 / Win 95 / Win98)</li>



<li>Run most of 90’s retro games</li>



<li>Run games from LaunchBox frontend</li>



<li>Run ScummVM Games</li>



<li>Create empty floppy of size: 320KB, 720KB, 1,44MB</li>



<li>Create empty HDDs of size: 256MB, 512MB, 1GB, 2GB</li>



<li>Mount Floppy disk, CD-ROM or HDD using a GUI driven utility</li>
</ul>



<h2 id="please-note"><mark>PLEASE NOTE</mark></h2>



<h3 id="dosbian-doesn-t-contains-any-copyrighted-material-it-s-up-to-you-to-install-games-software-or-the-operating-system-i-knew-someone-on-the-web-is-selling-my-distro-with-os-pre-installed-that-s-illegal-i-m-not-involved-in-this-so-please-if-you-want-a-genuine-free-dosbian-image-download-the-distro-only-from-my-blog"><mark>Dosbian doesn’t contains any copyrighted material.<br>It’s up to you to install games/software or the operating system. </mark><p><mark>I knew someone on the web is selling my distro with OS pre-installed (that’s illegal). I’m not in</mark><mark>volved in to this, so please, if you want a genuine free Dosbian image, download the distro only from my blog.</mark></p></h3>



<h3 id="the-images-below-are-just-examples-on-what-you-can-run-on-dosbian-but-nothing-is-included-inside-the-distribution"><mark>The images below are just examples on  what you can run on Dosbian, but nothing is included inside the distribution.</mark></h3>



<p><strong>Example games running on Dosbian</strong></p>











<p><strong>Some software Dosbian is able to run</strong></p>



<div data-carousel-extra="{&quot;blog_id&quot;:15249892,&quot;permalink&quot;:&quot;https:\/\/cmaiolino.wordpress.com\/dosbian\/&quot;}"><figure><img data-attachment-id="1709" data-permalink="https://cmaiolino.wordpress.com/win95/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png" data-orig-size="640,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="win95" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=300" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?w=616" srcset="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?strip=info&amp;w=600 600w,https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png?strip=info&amp;w=640 640w" alt="" data-height="480" data-id="1709" data-link="https://cmaiolino.wordpress.com/win95/" data-url="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png" data-width="640" src="https://cmaiolino.wordpress.com/wp-content/uploads/2020/05/win95.png"></figure></div>











<h2 id="terms-of-use-and-distribution">Terms of use and distribution</h2>



<p>Dosbian is a donationware project, this means you can modify, improve, customise it as you like for your own use.<br></p>



<h2 id="dosbian-facebook-group">Dosbian Facebook group</h2>



<figure><a href="https://www.facebook.com/groups/632016540971375/"><img data-attachment-id="1572" data-permalink="https://cmaiolino.wordpress.com/dosbian/dosbian-horizontal-cover/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg" data-orig-size="589,156" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Dosbian Horizontal Cover" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg?w=300" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg?w=589" loading="lazy" width="589" height="156" src="https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg?w=589" alt="" srcset="https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg 589w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg?w=150 150w, https://cmaiolino.wordpress.com/wp-content/uploads/2020/04/dosbian-horizontal-cover-1.jpg?w=300 300w" sizes="(max-width: 589px) 100vw, 589px"></a></figure>



<p>Join the official Facebook group, a place where you can meet other friends and discuss about games, configurations, issues, etc.</p>



<h2 id="download">Download</h2>



<div><p>Please note: <span>The distro doesn’t contain any copyrighted material.</span></p><p>Dosbian is compatible with the following Raspberry Pi models:</p></div>



<ul>
<li>Raspberry Pi 3B</li>



<li>Raspberry Pi 3B+</li>



<li>Raspberry Pi 3A+</li>



<li>Raspberry Pi 4B</li>



<li>Raspberry Pi 400</li>



<li>Raspberry Pi 5</li>



<li>Raspberry Pi 500</li>
</ul>



<p><strong>Do you like the project? Please consider to make a free donation using the button below</strong></p>



<figure><a href="https://paypal.me/combian64"><img data-attachment-id="1177" data-permalink="https://cmaiolino.wordpress.com/combian-64-v2/5895ceb8cba9841eabab6072/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2017/02/5895ceb8cba9841eabab6072.png" data-orig-size="640,246" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="5895ceb8cba9841eabab6072" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2017/02/5895ceb8cba9841eabab6072.png?w=300" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2017/02/5895ceb8cba9841eabab6072.png?w=616" loading="lazy" src="https://cmaiolino.wordpress.com/wp-content/uploads/2017/02/5895ceb8cba9841eabab6072.png" width="245" height="100" alt="5895ceb8cba9841eabab6072"></a></figure>



<h2>For Raspberry Pi 3B/3B+/4B/400/5/500<br><a href="https://cmaiolino.wordpress.com/dosbian-support-page/">Download Dosbian 3.0</a></h2>



<p><br>Note: Unzip the image with 7zip and use Win32DiskImager or Balena Etcher to flash it.</p>



<p><strong>Did you like Dosbian? </strong><br>Try Combian64,  a dedicated distro that boots straight in to one of the old glory Commodore machines (64,128, Vic 20, PET, ecc).</p>



<figure><a href="https://cmaiolino.wordpress.com/"><img data-attachment-id="1366" data-permalink="https://cmaiolino.wordpress.com/combianfb/" data-orig-file="https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg" data-orig-size="600,100" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="CombianFB" data-image-description="" data-image-caption="" data-medium-file="https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg?w=300" data-large-file="https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg?w=600" loading="lazy" width="600" height="100" src="https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg?w=600" alt="" srcset="https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg 600w, https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg?w=150 150w, https://cmaiolino.wordpress.com/wp-content/uploads/2018/10/combianfb.jpg?w=300 300w" sizes="(max-width: 600px) 100vw, 600px"></a></figure>



<h2 id="where-to-start-from">Where to start from?</h2>



<p>Here you can find some useful guide, link and tutorial:</p>



<div>
<ul>
<li><a href="https://1drv.ms/w/s!AgWIISwGGIdNjt9GWLyPWswJq4yu5A?e=5kX7DK">Dosbian a “Quick start guide”</a>  by Gary Marsh</li>



<li>The Definitive Guide on <a href="https://drive.google.com/file/d/1oXHyFPRspPp9MwG8q7E8DmJNiVsJ_Zxe/view?usp=sharing&amp;fbclid=IwAR2uHBi5KD7fTYlTSZume5whTOwd8cv6It1As4p5Sb6gAqtWwvk6gjqdzOg">installing Windows 95 on Raspberry Pi 3B/4B</a> by Daniel Řepka</li>



<li>Guide and drivers: Installing <a href="https://drive.google.com/file/d/1WU8PJF6_geH_Y_xgpdmufGp0Zfju-Pw-/view?usp=sharing&amp;fbclid=IwAR39WAAJsCXevtzmYwdZ_cVC7aRmu1mDQFDu5GppcDAaIn6DnHRF2zO0mRc">Windows 95 on Raspberry Pi 3B/4B</a> by Daniel Řepka</li>



<li><a href="https://drive.google.com/file/d/1JVKfH68MtrFuZ7zIjy14h7vAaBJzswvm/view?fbclid=IwAR3Nrl5Jhwf-on0MTWRPUXjNR9zv010VBnTiv2DBRKo4POHhpGboLSKbPZI">How to install Windows 98 on Raspberry Pi 4B</a> by Daniel Řepka</li>



<li><a href="https://www.brutman.com/mTCP/?fbclid=IwAR0JXhB2RK3NRV0hQp_Pn1ShiB8xbF0g2euYMuWkwj3gEediz5kIihL85Ew">mTCP – TCP/IP applications for DOS</a></li>



<li><a href="https://drive.google.com/file/d/1BXmF6IQYohun0inzdr40d9rn0R8YID0q/view?usp=sharing&amp;fbclid=IwAR2NIktRZadf3Froa-BD9cPPtjGbfsV2U2dXfpM9m_zXPyqa-mct1QFOODc">List of games running smoothly on Dosbian 1.5 Rpi4</a> by Daniel Řepka</li>
</ul>




</div>





						
					</div> <!-- /post-inner -->

				
<!-- #comments -->
			</article> <!-- /page -->
			
		
	</main> <!-- /content -->

	


	

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US Government Uptime Monitor (203 pts)]]></title>
            <link>https://usa-status.com/</link>
            <guid>45637049</guid>
            <pubDate>Sun, 19 Oct 2025 19:16:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://usa-status.com/">https://usa-status.com/</a>, See on <a href="https://news.ycombinator.com/item?id=45637049">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div> <p>Federal Government Uptime Monitor*</p> <!--[--><p><span></span> Government is Shut Down</p><!--]--> <div><!--[--><p>down for 18d 15h 24m 27s</p><!--]--> <p>98.120520501%</p> <p>Uptime over the last 15 years</p></div></div> <div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown <br>16.0 days</p><!--]--></div><div><p>Jan 2018 </p><!--[!--><p>January 2018 U.S. federal government shutdown <br>2.83 days</p><!--]--></div><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown <br>34.5 days</p><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown <br>34.5 days</p><!--]--></div><div><p>Oct 2025 </p><!--[!--><p>2025 U.S. federal government shutdown (ongoing) <br>18d 15h 24m 27s</p><!--]--></div><!--]--></div> <!--[--><div><div><p><span>U.S. Forest Service</span></p> <!--[!--><p><span>Operational</span></p><!--]--></div> <div><!--[--><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>80% furloughed</p><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>80% furloughed</p><!--]--><!--]--></div><!--]--></div> <!--[!--><!--]--></div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>85% furloughed</p><!--]--><!--]--></div><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><!--]--></div><div><div><p><span>DoD civilians</span></p> <!--[!--><p><span>Operational</span></p><!--]--></div> <div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>50% furloughed</p><!--]--><!--]--></div> <!--[!--><!--]--></div><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>95% furloughed</p><!--]--><!--]--></div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>69% furloughed</p><!--]--><!--]--></div><div><p>Oct 2025 </p><!--[!--><p>2025 U.S. federal government shutdown (ongoing) </p><!--[--><p>80% furloughed</p><!--]--><!--]--></div><!--]--></div><div><div><p><span>Environmental Protection Agency</span></p> <!--[!--><p><span>Operational</span></p><!--]--></div> <div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>95% furloughed</p><!--]--><!--]--></div> <!--[!--><!--]--></div><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>68% furloughed</p><!--]--><!--]--></div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>96% furloughed</p><!--]--><!--]--></div><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>95% furloughed</p><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>95% furloughed</p><!--]--><!--]--></div><!--]--></div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>81% furloughed</p><!--]--><!--]--></div><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>80% furloughed</p><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>80% furloughed</p><!--]--><!--]--></div><div><p>Oct 2025 </p><!--[!--><p>2025 U.S. federal government shutdown (ongoing) </p><!--[!--><!--]--><!--]--></div><!--]--></div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>16% furloughed</p><!--]--><!--]--></div><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><!--]--></div><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>81% furloughed</p><!--]--><!--]--></div><div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>97% furloughed</p><!--]--><!--]--></div><div><p>Oct 2025 </p><!--[!--><p>2025 U.S. federal government shutdown (ongoing) </p><!--[!--><!--]--><!--]--></div><!--]--></div><div><div><p><span>National Science Foundation</span></p> <!--[!--><p><span>Operational</span></p><!--]--></div> <div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>99% furloughed</p><!--]--><!--]--></div> <!--[!--><!--]--></div><div><div><p><span>Smithsonian Institution</span></p> <!--[--><p><span>Shut Down</span></p><!--]--></div> <div><!--[--><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><div><p>Oct 2025 </p><!--[!--><p>2025 U.S. federal government shutdown (ongoing) </p><!--[!--><!--]--><!--]--></div><!--]--></div> <!--[!--><!--]--></div><div><div><p><span>DOT (overall)</span></p> <!--[!--><p><span>Operational</span></p><!--]--></div> <div><!--[--><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>30% furloughed</p><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[--><p>30% furloughed</p><!--]--><!--]--></div><!--]--></div> <!--[!--><!--]--></div><div><!--[--><div><p>Dec 2018 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><div><p>Jan 2019 </p><!--[!--><p>2018–2019 U.S. federal government shutdown </p><!--[!--><!--]--><!--]--></div><!--]--></div><div><p>Oct 2013 </p><!--[!--><p>2013 U.S. federal government shutdown </p><!--[--><p>84% furloughed</p><!--]--><!--]--></div><!--]--></div>  <p>* Not an official service of the United States of America. Your tax dollars at rest.</p></div></div>]]></description>
        </item>
    </channel>
</rss>