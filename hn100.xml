<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 24 Dec 2024 14:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Intel shareholders file case asking ex CEO, CFO to return 3 years of salary (183 pts)]]></title>
            <link>https://www.cfodive.com/news/intel-shareholders-yank-exceo-cfo-compensation-foundry/736193/</link>
            <guid>42500482</guid>
            <pubDate>Tue, 24 Dec 2024 08:17:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cfodive.com/news/intel-shareholders-yank-exceo-cfo-compensation-foundry/736193/">https://www.cfodive.com/news/intel-shareholders-yank-exceo-cfo-compensation-foundry/736193/</a>, See on <a href="https://news.ycombinator.com/item?id=42500482">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                        
                        

<h3>Dive Brief:</h3>
<ul>
<li>Intel Corporation shareholders are asking for <a href="https://storage.courtlistener.com/recap/gov.uscourts.cand.441318/gov.uscourts.cand.441318.1.0.pdf">the disgorgement of</a> “all profits, benefits, and other compensation” obtained by ex-CEO Pat Gelsinger, CFO and current co-interim CFO David Zinsner and other company leadership, arguing the leaders breached their fiduciary and contractual duties, according to a shareholder derivative lawsuit filed Tuesday.</li>
<li>Filed in the United States District Court of the Northern District of California, the suit by shareholder LR Trust on behalf of Intel alleges that both Gelsinger and Zinsner breached their fiduciary duties as officers of the company by issuing misleading disclosures and failing to accurately report financials related to the company’s foundry business.&nbsp;Gelsinger and Zinsner, as well as other named defendants, which include both current and past members of the company’s board, “exposed the Company to significant liability under various federal securities laws by their misconduct,” according to the suit.</li>
<li>“As a result of the individual defendants’ breaches of fiduciary duty and other misconduct, Intel has sustained substantial damages and irreparable injury to its reputation,” the suit says, noting that the officers received “unjust enrichment” stemming from their misconduct.</li>
</ul>



<h3>Dive Insight:</h3>
<p>The suit coincides with efforts by the chipmaker to regain the trust of its shareholders after it failed to execute a turnaround plan spearheaded by Gelsinger. A 40-year veteran of the Santa Clara, California-based company, Gelsinger abruptly <a href="https://www.cfodive.com/news/intel-cfo-takes-interim-co-ceo-role-board-ousts-leadership-genAI-layoffs/734506/">resigned from his position as CEO</a> and a member of the board effective Dec. 1 after the company reported a record quarterly loss of $16.6 billion for its third quarter, with losses related to the turnaround efforts, CFO Dive previously reported.</p>
<p>The company subsequently appointed Zinsner and Intel Products CEO Michelle Johnston Holthaus as co-interim CEOs, with Zinsner continuing to serve as CFO, as it continues to move forward with its restructuring efforts, targeting $10 billion in cost savings.</p>
<p>The restructuring, which also includes wide-scale layoffs throughout the business, is also widely focused on the company’s foundry business — a key element of the shareholder derivative suit. &nbsp;</p>
<p>Gelsinger’s turnaround plan included a shift in Intel’s foundry strategy, with the ex-CEO looking to spin off the unit <a href="https://www.cfodive.com/news/core-business-strategy-intact-ceo-intel-cfo-foundry-chips-semiconductors/734767/">into its own independent business</a> with the goal of allowing Intel foundry to produce chips for its competitors, CFO Dive previously reported.</p>
<p>However, Gelsinger, Zinsner and other company leaders misled shareholders about the financial performance of the foundry unit, the suit alleges. Both officers pointed to the foundry unit as a “significant tailwind” for Intel’s business in various statements and company filings, including during the earnings report for the chipmaker’s full-year 2023 results, according to the suit.</p>
<p>However, in a retrospective revision to the company’s financials filed in April, the chipmaker revealed Intel Foundry to be one of its main cost centers — with <a href="https://www.sec.gov/ix?doc=/Archives/edgar/data/0000050863/000005086324000068/intc-20240402.htm">the division losing $7 billion</a> in 2023, according to the filing with the Securities and Exchange Commission. The recast sent Intel’s shares spiraling down by 9.2% at the time, according to the suit. The news was also followed by a class action suit alleging shareholders were mislead regarding those <a href="https://www.theregister.com/2024/06/25/intel_foundry_investor_lawsuit/">losses related to its Foundry business</a>, according to a report at the time by The Register.</p>
<p>As a result, the chipmaker “has been and will continue to be exposed to significant losses due to the wrongdoing complained of herein, yet the board has not caused the company to take action to recover for the company the damages it has suffered and will continue to suffer thereby,” the December shareholder derivative suit alleges.</p>
<p>As well as Zinsner and Gelsinger, the suit named multiple current and former board members as defendants. Other defendants include Lip-Bu Tan, a former member of the board who abruptly stepped down from his position in August due to concerns <a href="https://www.reuters.com/technology/intel-board-member-quit-after-differences-over-chipmakers-revival-plan-2024-08-27/">related to Gelsinger’s turnaround plan</a>, according to a report at the time by Reuters cited by the suit.</p>
<p>The semiconductor manufacturer has remained focused on its foundry business following its leadership shift. Intel is still seeking to be a “world-class foundry,” Zinsner said during a conference a few days after his appointment to co-interim CEO. As such, it’s also likely Gelsinger’s <a href="https://www.cfodive.com/news/core-business-strategy-intact-ceo-intel-cfo-foundry-chips-semiconductors/734767/">permanent successor as CEO</a> will have “some capability” around foundry, he said at the time.</p>
<p>Intel declined to comment on the suit. Weiss Law, the attorneys for the plaintiffs, did not immediately respond to requests for comment.</p>

                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[38th Chaos Communication Congress (287 pts)]]></title>
            <link>https://events.ccc.de/congress/2024/infos/index.html</link>
            <guid>42500475</guid>
            <pubDate>Tue, 24 Dec 2024 08:15:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://events.ccc.de/congress/2024/infos/index.html">https://events.ccc.de/congress/2024/infos/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=42500475">Hacker News</a></p>
Couldn't get https://events.ccc.de/congress/2024/infos/index.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[The number pi has an evil twin (250 pts)]]></title>
            <link>https://mathstodon.xyz/@johncarlosbaez/113703444230936435</link>
            <guid>42499567</guid>
            <pubDate>Tue, 24 Dec 2024 03:41:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mathstodon.xyz/@johncarlosbaez/113703444230936435">https://mathstodon.xyz/@johncarlosbaez/113703444230936435</a>, See on <a href="https://news.ycombinator.com/item?id=42499567">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Automating the Search for Artificial Life with Foundation Models (108 pts)]]></title>
            <link>https://sakana.ai/asal/</link>
            <guid>42499332</guid>
            <pubDate>Tue, 24 Dec 2024 02:47:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sakana.ai/asal/">https://sakana.ai/asal/</a>, See on <a href="https://news.ycombinator.com/item?id=42499332">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  <header>
  <h2><a href="https://sakana.ai/asal/">Automating the Search for Artificial Life with Foundation Models</a></h2><time datetime="2024-12-24T00:00:00+09:00">December 24, 2024</time>
</header>

  <center>
<video src="https://pub.sakana.ai/asal_blog_assets/cover_video_square_small_compressed.mp4" type="video/mp4" autoplay="" muted="" playsinline="" loop=""></video>
<!--<video class="b-lazy" autoplay="" muted="" playsinline="" loop="" style="display: block; margin: auto; width: 100%;"><source src="https://pub.sakana.ai/asal_blog_assets/cover_video_square_small_compressed.mp4" /></video>-->
</center>
<!--more-->
<p><small><b>Examples of discovered artificial lifeforms.</b></small><br>
<small><i>We show examples of the simulations discovered by our algorithm, <b>Automated Search for Artificial Life</b> (<b><a href="https://arxiv.org/abs/2412.17799">Paper</a></b>, <b><a href="https://asal.sakana.ai/">Website</a></b>). In Lenia (top-left), ASAL discovers a diverse set of dynamic self-organizing patterns reminiscent of real cells. In Boids (top-right), ASAL discovers exotic emergent flocking behavior. In Particle Life and Particle Life++ (bottom-left), ASAL discovers dynamic open-ended ecosystems of agentic patterns. In Game of Life (bottom-right), ASAL identifies novel cellular automata rules that are more open-ended and expressive than the original Conway’s Game of Life.</i></small></p>



<h2 id="introduction">Introduction</h2>

<p>For the past 300,000 years, Earth has had only one form of advanced intelligence on it: humans. With the recent advent of AI foundation models, some believe we are at the dawn of a new kind of intelligence. As AI continues to evolve, we may witness the proliferation of diverse intelligent lifeforms coexisting with us.</p>

<p>But how did we get here in the first place? What fundamental principles govern the emergence of all life and intelligence, whether biological or artificial? What might the open-ended evolution of the ecosystem of our AI agents look like in the future? Though we don’t yet have the definitive answers to these questions, we can gain insight by returning to the scientific field that laid the groundwork for exploring these questions: <em>Artificial Life</em> (ALife). ALife offers the tools and framework to study the dynamics of artificial lifeforms, fostering insights into their potential behaviors, interactions, and trajectories.</p>

<p>So what is ALife? At its core, ALife is the ambitious quest to recreate and understand the phenomena of life itself—how it emerges, evolves, and thrives. It’s not just about mimicking Earth’s biology but going beyond and creating completely alien worlds to understand the principles that underlie all possible life. ALife researchers craft virtual ecosystems, robotic organisms, self-replicating programs, and biochemical simulations to uncover the deep mechanisms of complexity, evolution, and intelligence.</p>

<p>Sakana AI has previously drawn ideas from ALife to develop better foundation models, resulting in our works on <a href="https://sakana.ai/evolutionary-model-merge/">evolutionary model merging</a>, <a href="https://sakana.ai/llm-squared/">LLM self-play</a>, and <a href="https://sakana.ai/ai-scientist/">autonomous open-ended discovery</a>. But now we want to go the other way: <em>can foundation models help the study of ALife</em>? Bridging this two-way road will be essential to getting more capable, natural systems and for understanding them as well. Regardless of whether or not you think foundation models will lead to the next generation of artificial lifeforms, they have already started revolutionizing various scientific fields. In fact, the recent Nobel Prize was awarded for radical advances in protein discovery, driven by a foundation model. They are also being used to predict the climate, do AI research itself, and prove mathematical theorems, so why not apply them to help in the search for artificial lifeforms?</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/teaser.mp4" type="video/mp4"></video>
</center>


<p>In collaboration with <strong>MIT</strong>, <strong>OpenAI</strong>, <strong>The Swiss AI Lab IDSIA</strong>, and <b><a href="https://en.wikipedia.org/wiki/Kenneth_Stanley">Ken Stanley</a></b>, we are excited to release our new paper, <strong><a href="https://arxiv.org/abs/2412.17799">Automating the Search for Artificial Life with Foundation Models</a></strong> (<strong><a href="https://pub.sakana.ai/asal/">website</a></strong>).</p>

<p>In our paper, we propose a new algorithm called <strong>Automated Search for Artificial Life</strong> (“<strong>ASAL</strong>”) to <em>automate</em> the discovery of artificial life using vision-language foundation models! Our proposed approach aims to <strong>(1)</strong> find simulations that produce a specific target behavior, <strong>(2)</strong> discover simulations that keep generating novelty forever as you run it, and <strong>(3)</strong> illuminate all the different simulations that are possible.</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/supervised_3x6_compressed.mp4" type="video/mp4"></video>
</center>
<p><small>
<i><b>Finding lifeforms that produce a specific target behavior:</b> Here, we present examples of Artificial Life simulations, discovered by <b>ASAL</b>, which were found only with specified target prompts. Read on to see more results below in this blog post!
</i></small></p>


<p>Because of the generality of foundation models, ASAL can discover new lifeforms across a diverse range of seminal ALife simulations, including Boids, Particle Life, Game of Life, Lenia, and Neural Cellular Automata. ASAL even discovered novel cellular automata rules that are more open-ended and expressive than the original Conway’s Game of Life. Additionally, the use of foundation models allows us to quantifiably measure previously qualitative phenomena, in a human-aligned way.</p>

<p>We believe this new paradigm may reignite ALife research by overcoming the bottleneck of manually designed simulations, thus advancing beyond the limits of human ingenuity.</p>



<h2 id="what-is-artificial-life">What is Artificial Life?</h2>

<div><p><small>
<img data-src="/assets/asal/chatgpt-alife.jpg" src="https://sakana.ai/assets/asal/chatgpt-alife.jpg">
<i>ChatGPT-generated image with the prompt “the open-endedness of evolution on earth producing all the diversity of life”.
</i></small></p></div>

<p>Natural evolution has produced the vast diversity of life on Earth, from bacteria to whales and humans. Artificial Life (ALife) seeks to understand this open-ended process of life by recreating it through computer simulations. While inspired by biology, ALife’s ambitions extend far beyond, exploring not only “life as we know it” but also “<em><a href="https://en.wikipedia.org/wiki/Artificial_life#Philosophy">life as it could be</a>.</em>” Over time, ALife has grown to study the general emergence of complex behaviors from simple components, encompassing phenomena such as self-organization, collective intelligence, and open-ended evolution.</p>

<p>Using ALife, we can study some intriguing questions:</p>

<ul>
  <li>What exactly is “life”?
    <ul>
      <li>What lifeforms can exist in a hyper-realistic 3D world simulation?</li>
      <li>What does life even look like in a cellular automata?</li>
      <li>How does life emerge in a digital soup of self-replicating computer programs?</li>
    </ul>
  </li>
  <li>If we slightly change the environment’s rules, is life still possible? When is it inevitable?</li>
  <li>What is required to ignite a “never-ending” algorithm similar to natural evolution?</li>
</ul>

<p>The last question touches on perhaps the most fascinating property of natural evolution: open-endedness. The pursuit of truly open-ended systems capable of discovering interesting artifacts indefinitely remains so elusive that it is widely regarded as a <a href="https://www.oreilly.com/radar/open-endedness-the-last-grand-challenge-youve-never-heard-of/">grand challenge</a>.</p>




<p><small><i><b><a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">John Conway’s Game of Life</a></b> (CGoL) is a simulation of a 2D grid with rules like “a dead cell with 3 alive neighbors becomes alive in the next timestep”. With only these simple rules, CGoL is able to simulate entire self-replicating “spaceships”. It can even simulate CGoL within itself!</i></small></p>

<div><p><small><i><b><a href="https://www.karlsims.com/evolved-virtual-creatures.html">Karl Sim’s Evolved Virtual Creatures</a></b> is a masterclass in discovering artificial lifeforms in a 3D virtual world. Similar to real animals, these artificial animals have DNA that encodes the morphology and the brain of the animal. Then, the DNA can be evolved with a genetic algorithm to produce phenotypes capable of swimming, walking, and jumping.</i></small></p></div>


<p><small><i><b>Other ALife projects:</b> Many more ALife simulations have been developed. Some model ecosystems of cells, while others simulate the evolutionary arms race of predators and prey as they forage for resources. Self-play, which bootstraps capabilities from scratch, is inspired by these evolutionary dynamics.</i></small></p>



<h2 id="our-method-automated-search-for-artificial-life-asal">Our Method: Automated Search for Artificial Life (ASAL)</h2>

<p>The most compelling ALife simulations took months, if not years, to hand-design. This is because the emergent behavior of complex systems <a href="https://en.wikipedia.org/wiki/Computational_irreducibility">is often impossible to predict in advance</a>. Imagine the challenge of designing the periodic table from scratch, manually specifying the pairwise interactions of all elements. Finding the exact configuration that leads to interesting outcomes would be a nearly endless task. Now, imagine instead that you could simply define the number of elements—say, 100—and let an algorithm automatically discover the interaction rules that produce fascinating emergent simulations.</p>


<center>
<img data-src="/assets/asal/methods_figure.png" src="https://sakana.ai/assets/asal/methods_figure.png">
</center>
<div><p><small><i>
<b>ASAL</b>: Our proposed framework, ASAL, uses vision-language foundation models to discover ALife simulations by formulating the processes as three search problems. <b>Supervised Target</b>: To find target simulations, ASAL searches for a simulation which produces a trajectory in the foundation model space that aligns with a given sequence of prompts. <b>Open-Endedness</b>: To find open-ended simulations, ASAL searches for a simulation which produces a trajectory that has high historical novelty during each timestep. <b>Illumination</b>: To illuminate the set of simulations, ASAL searches for a set of diverse simulations which are far from their nearest neighbor.</i>
</small></p></div>

<p>This is the new paradigm we propose for ALife research. Once the researcher defines a space of simulations, or “substrate,” to search over, ASAL automates the search for interesting simulations that, when run, produce videos matching desired criteria, as evaluated by a vision-language foundation model. The criteria include:</p>

<ol>
  <li>
    <p><strong>Supervised Target</strong>: Searching for a simulation that produces a specified target event or sequence of events, facilitating the discovery of arbitrary worlds or those similar to our own.</p>
  </li>
  <li>
    <p><strong>Open-Endedness</strong>: Searching for a simulation that itself produces novelty in the foundation model representation space as you run it, thereby discovering worlds that are persistently interesting to a <em>human observer</em>.</p>
  </li>
  <li>
    <p><strong>Illumination</strong>: Searching for a set of interestingly diverse simulations, enabling the <a href="https://arxiv.org/abs/1504.04909">illumination</a> of all the possible alien worlds.</p>
  </li>
</ol>

<p>Here are some simulations ASAL discovered after specifying a single prompt, which is a text description of the image the simulation should create. In Lenia, prompts like “a self-replicating pattern” revealed dynamic structures mimicking biological processes, while Boids captured emergent behaviors such as “collective intelligence” and “a Fibonacci spiral in nature”. Particle Life produced visually compelling patterns like “cell division” and “a diverse ecosystem of cells”, highlighting ASAL’s ability to turn abstract concepts into concrete simulations that evoke both scientific and artistic intrigue.</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/supervised_3x6_compressed.mp4" type="video/mp4"></video>
</center>


<p>Multiple prompts can be applied sequentially to find simulations producing a desired sequence of events. In the first simulation, ASAL discovered an update rule which allows a cell to split into two. The second simulation showcases ASAL’s level of control and its potential to eventually discover simulations displaying long and complex evolutionary trajectories. However, our work has not yet achieved this ultimate vision, and more progress is needed before truly fascinating worlds can be discovered solely through specified text descriptions.</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/nca_temporal.mp4" type="video/mp4"></video>
</center>

<p>For Open-endedness, ASAL discovered several simulations which are more open-ended than the famous Conway’s Game of Life (CGoL). If people have found spaceships and computers in CGoL, imagine what we could discover in these new cellular automata worlds!</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/oe_gol_1.mp4" type="video/mp4"></video>
</center>


<p>ASAL can also illuminate the entire substrate to find a set of interestingly different simulations as shown here. This provides researchers with a general overview of what may be possible in a given substrate and serves as a step toward taxonomizing all potential life forms within the computational universe.</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/atlas_lenia_cropped.mp4" type="video/mp4"></video>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/atlas_boids_cropped_compressed.mp4" type="video/mp4"></video>
</center>



<h2 id="what-now">What Now?</h2>

<p>ASAL is an exciting achievement, but there’s lots more to be done…by you! We open source our code on our <a href="https://github.com/SakanaAI/asal">GitHub</a>.</p>



<h3 id="try-your-own-substrate"><strong>Try your own substrate</strong></h3>

<p>We encourage you to apply ASAL to your own custom substrates you find interesting and explore what happens!</p>

<p>Here, we develop a novel substrate “Particle Life++” based on Particle Life, but which allows the colors to change as part of the dynamics rule, allowing for a combinatorial explosion in interaction dynamics. Out of the box, ASAL is able to find open-ended simulations in this substrate:</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/plife_plus_oe_compressed.mp4" type="video/mp4"></video>
</center>


<p>It would be very interesting to see ASAL applied to other substrates like <a href="https://www.youtube.com/watch?v=qwbMGPkoJmg">ALIEN</a> and <a href="https://arxiv.org/abs/2409.00853">JaxLife</a>!</p>



<h3 id="room-for-creative-exploration"><strong>Room for creative exploration</strong></h3>

<p>After discovering some cool simulations, there is a lot of room for creativity and exploration. For example, here, we take the many “species” of Boids creatures discovered, and allow them to enter each other’s universes after a period of time. We can see some symbiotic relationships emerge, while some relationships are more invasive and destructive:</p>


<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/boids_mush.mp4" type="video/mp4"></video>
</center>
<div><p>
Similarly, we can also compare different cellular automata by pitting them against each other to see which one dominates the most territory:
</p></div>
<center>
<video autoplay="" muted="" playsinline="" loop=""><source src="https://pub.sakana.ai/asal_blog_assets/gol_mush_large_compressed.mp4" type="video/mp4"></video>
</center>



<h3 id="bigger-picture"><strong>Bigger picture</strong></h3>

<p>Overall, our ASAL framework will allow for the automated discovery of many new kinds of artificial lifeforms. In turn, this will help us understand the general principles of life and all complex systems, adding to our knowledge of concepts like emergence, computational irreducibility, assembly theory, and open-endedness.</p>

<p>In the bigger picture, we believe ALife is worth researching because there are a lot of important ideas from ALife that can be and should be incorporated into AI. For instance, the next generation of AI algorithms will likely incorporate concepts like open-endedness, self-organization, and collective intelligence in order to be more adaptive, creative, and continually learn. By bridging ALife and AI, we as a field have the unique opportunity to unlock a new era of natural AI systems.</p>


<center>
<img data-src="/assets/asal/ending.jpg" src="https://sakana.ai/assets/asal/ending.jpg">
</center>




<p>Interested in joining us? Please see our <a href="https://sakana.ai/careers/">career opportunities</a> for more information.</p>



  
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Demystifying Debuggers, Part 2: The Anatomy of a Running Program (115 pts)]]></title>
            <link>https://www.rfleury.com/p/demystifying-debuggers-part-2-the</link>
            <guid>42498982</guid>
            <pubDate>Tue, 24 Dec 2024 01:33:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.rfleury.com/p/demystifying-debuggers-part-2-the">https://www.rfleury.com/p/demystifying-debuggers-part-2-the</a>, See on <a href="https://news.ycombinator.com/item?id=42498982">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>From day one using a modern home computer, users are exposed to the concept of a program. Support for separate programs is, after all, the main value-add of multitasking operating systems. But—if we take a peek under the hood—a program is a high-level term which refers to many lower level mechanisms and concepts, and it isn’t obvious from the outset how they’re all arranged.</p><p>To unpack debuggers—programs which analyze the execution of other programs—it’s important that we first unpack the concept of a program, so that we’re familiar with the details of programs that a debugger must contend with.</p><p>Programs are the virtualized equivalent of cartridges for an old video game console, like the Nintendo Entertainment System. The NES didn’t have a multitasking operating system, and it only executed a single program while it was turned on—whatever one was stored on the cartridge that the player installed.</p><p>In this context, the program executing on the system had full availability to all of the system’s resources. There was no code running of which the program couldn’t be aware.</p><p><span>Programs, in the context of a multitasking operating system, are a bundle of mechanisms used to approximately provide the same thing </span><em>virtually</em><span> as the NES provided to the program stored on the cartridge </span><em>physically</em><span>. Of course, multitasking operating systems also provide ways for these programs to communicate and interact (that is indeed the point), but at some level they must still exist independently, as different physical cartridges do.</span></p><p><span>Because programs, unlike cartridges, can be executing on the same chip </span><em>at the same time</em><span>, and thus contend for the same resources, there are many additional </span><em>software</em><span> concepts that operating systems use to virtualize independent program execution:</span></p><ul><li><p><span>A </span><em><strong>virtual address space</strong></em><span> — A range of </span><em>virtual addresses</em><span>, for which the platform provides a mapping to </span><em>physical addresses</em><span>. Programs are built to interact with </span><em>virtual addresses, </em><span>which are entirely independent from addresses in other virtual address spaces. Virtual address spaces can be much </span><em>larger</em><span> than, for example, physical RAM limitations.</span></p></li><li><p><span>A </span><em><strong>thread of execution</strong></em><span> — A bundle of state which is used to initialize the CPU to coherently execute a sequence of instructions. Threads of execution are </span><em>scheduled</em><span> by the platform, such that many threads can execute on a small, fixed number of </span><em>cores</em><span>.</span></p></li><li><p><span>An </span><em><strong>executable image</strong></em><span> — A sequence of bytes encoding data in a platform-defined format, to encode executable machine instructions, as well as relevant headers and metadata. An independent code package’s </span><em>non-live</em><span> representation—a blueprint for execution.</span></p></li><li><p><span>A </span><em><strong>loader</strong></em><span> — The part of an operating system responsible for parsing </span><em>executable images</em><span>—blueprints for execution—and instantiating them, so that the code encoded in the images may be actually executed.</span></p></li><li><p><span>A </span><em><strong>module</strong></em><span> — The loaded equivalent of an </span><em>executable image</em><span>. One </span><em>process</em><span> can load several </span><em>modules</em><span>, although a process is always initialized by the loading of </span><em>one specific module</em><span> (the initial executable image). Modules can be both dynamically </span><em>loaded</em><span> and </span><em>unloaded</em><span>.</span></p></li><li><p><span>A </span><em><strong>process</strong></em><span> — An instance of a live, running program. Instantiated by the platform’s </span><em>loader</em><span> using the initial </span><em>executable image</em><span> to determine how it’s initialized, and what code is initially loaded. The granularity at which operating systems assign </span><em>virtual address spaces</em><span>. The container of several </span><em>modules</em><span>, and </span><em>threads of execution</em><span>.</span></p></li></ul><p>Let’s unpack all of this.</p><blockquote><p><em>A range of virtual addresses, for which the platform provides a mapping to physical addresses. Programs are built to interact with virtual addresses, which are entirely independent from addresses in other virtual address spaces. Virtual address spaces can be much larger than, for example, physical RAM limitations.</em></p></blockquote><p><span>Whether it’s through the easy or hard way, all programmers learn about pointers. When I first learned about pointers, I understood them as being used to encode integers, with the integers being addresses, which address bytes within memory, in linear order. Address </span><code>0</code><span> comes before </span><code>1</code><span>, which comes before </span><code>2</code><span>, and so on.</span></p><p>In other words, I was under the impression that physical memory, and its relationship to addresses, was structured like this:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png" width="568" height="461.9570815450644" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1137,&quot;width&quot;:1398,&quot;resizeWidth&quot;:568,&quot;bytes&quot;:302713,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf0d7080-b386-4391-95f7-4b7f3a98aa46_1398x1137.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This is a fine mental model to begin with. But it isn’t accurate.</p><p><span>When many independent programs execute on a single machine, it isn’t difficult to imagine one of them getting an address wrong. In fact, sometimes, it feels like “getting addresses wrong” is the only thing anybody talks about these days. If all of these programs shared a single memory space, this could easily lead to one program stomping over data that another program is using. It could also lead to, for example, a </span><em>malicious program</em><span>—let’s call it </span><code>ryans_game.exe</code><span>—reading information from </span><code>chrome.exe</code><span>, browsing a page from </span><code>chase.com</code><span> with all of your sensitive information on it. This is purely hypothetical!</span></p><p><em>Virtual address spaces</em><span> are used to mediate between different programs accessing the same resource—physical memory. Addresses </span><em>can</em><span> be understood as integers, and as such, they </span><em>are</em><span> linearly ordered, and they </span><em>do</em><span> each refer to sequential bytes—but these bytes are sequential in </span><em>virtual address space</em><span>, not in </span><em>physical memory</em><span>.</span></p><p><span>Virtual address spaces are implemented with a mapping data structure known as a </span><em>page table</em><span>. Page tables can be used to translate a virtual address to a physical address. They can then be used directly by the CPU in order to do address translation. For instance, if a CPU core were to execute a </span><code>mov</code><span> (move) instruction, to load 8 bytes from address </span><code>0x1000</code><span> into a register, then before issuing a read from physical memory, the CPU would first treat </span><code>0x1000</code><span> as a </span><em>virtual address</em><span>, and translate it into a </span><em>physical address, </em><span>which might be completely different—like </span><code>0x111000</code><span>.</span></p><p><span>“Page tables” are called as such, because they map from virtual to physical addresses at </span><em>page-size granularity</em><span>. A system’s page-size varies—on an x64 Windows PC, it’ll be 4 kilobytes. On an iPhone, it’ll be 16 kilobytes. Operating systems also expose larger page sizes under some circumstances.</span></p><p><span>This means the relationship between physical memory and an address—as used by a program, as a </span><em>virtual address</em><span>—looks more like this:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png" width="602" height="540.8076923076923" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1308,&quot;width&quot;:1456,&quot;resizeWidth&quot;:602,&quot;bytes&quot;:509363,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ee85c0c-2624-4ffb-9810-633b75e933b6_1533x1377.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>If a virtual address </span><em>cannot be mapped</em><span> to a physical address, then a “page fault” exception is issued by the CPU, and execution is interrupted. If this is done by a program’s code, then execution will be transferred to the operating system’s code, which can take measures to address the cause of the exception and resume, or do whatever else it deems appropriate.</span></p><p>This provides a great deal of flexibility to operating systems. An operating system can move memory allocated by one program to disk—what’s known as “paging out”, or “swapping out”—if it expects that memory to not be accessed in the near future. It can then use that physical memory for more frequently accessed addresses, in any of the active virtual address spaces. If a page fault occurs when code attempts to access memory which has been paged out, then the operating system can simply page that memory back in, and resume execution. Thus, even though hundreds—if not thousands—of programs can be executing at once, the operating system can make much more efficient use of physical memory, given its analysis of which addresses in which spaces are needed, and when. This is critical in building operating systems which can support the execution of many programs, where all programs are contending for the same physical hardware.</p><p><span>It also provides a great deal of flexibility to programs, as it can be used to implement virtual address spaces which are </span><em>much larger</em><span> than physical memory. Nowadays, nearly every consumer CPU—from phones, to game consoles, to PCs, to laptops—is a 64-bit processor. For PCs and laptops running on 64-bit CPUs, the CPU and operating system normally provide a 48-bit address space. On some server systems, it is larger, and on some mobile and console platforms, it is smaller.</span></p><p><span>Taking a 48-bit address space as an example—48 bits allow the representation of 2</span><sup>48</sup><span> different values (each bit multiplies the number of possible values by 2). Since each value refers to a different potential byte, that is enough address space to refer to 256 terabytes.</span></p><p>To understand this further, let’s dissect the “page table” data structure a bit more.</p><p><span>First, let’s assume a 48-bit address space, and a 4 kilobyte page size (the usual configuration on x64 Windows systems). As I said, page tables map from virtual to physical addresses at </span><em>page-size granularity</em><span>. Because of our 4 kilobyte page size, we can infer that the bottom 12 bits of any address are </span><em>identical</em><span> for both a virtual address and a physical address (2</span><sup>12</sup><span> = 4096 = 4 kilobytes).</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png" width="1456" height="586" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:586,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:293389,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d8c36d-3abc-4faf-9d4a-f525f7a8dc9d_1572x633.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>This leaves 36 remaining bits, of each address, to map from virtual to physical addresses. These bits are used to index into several hierarchical levels, within the page table—it is actually a hierarchical data structure, despite its name, which sounds like it implies a flat table. To understand why, imagine, first, a naïve page table implementation, which simply stores a 64-bit physical address, for each value in this 36-bit space. This, unsurprisingly, would require an unrealistically large amount of storage. Instead, we can notice that the page table need only map virtual addresses </span><em>which have actually been allocated</em><span>. At the outset, </span><em>none</em><span> are allocated. When a virtual address space allocation is made, a hierarchical data structure allows the page table implementation to </span><em>only</em><span> allocate nodes in the hierarchy which are actually touched, by that one allocation.</span></p><p>Each node in the hierarchy can simply be a table of 64-bit addresses which point to children nodes (or, at the final level, it can store each page’s physical address). If each node is a 512-element table, and each element is a 64-bit address (8 bytes), then each node requires 4096 bytes, which is our page-size!</p><p><span>Because 2</span><sup>9</sup><span> = 512, we can slice our 36-bits into </span><em>4</em><span> table indices—each 9 bits—and use that to traverse the page table. The first 9 bits indexes into the first level, the next into the second, the next into the third, the next into the fourth—the fourth provides the base address of the containing page of our address, and then the bottom 12 bits can be used as an offset from that base.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png" width="1456" height="1456" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1042833,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f29652e-7a7a-4a0c-a6f3-8c90134f7976_2048x2048.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>For each virtual address space, the operating system manages this page table structure. Before the operating system prepares the CPU to execute code for one program, it can supply this table, such that the CPU can appropriately issue memory reads and writes to </span><em>physical </em><span>addresses for the appropriate virtual address space. The end result is that each program can, in effect, live in its own universe of virtual addresses, as if it had access to the entire system’s memory space, and if that memory space far exceeded the limitations of a system’s random access memory (RAM) capacity.</span></p><blockquote><p><em>A bundle of state which is used to initialize the CPU to cohesively execute a sequence of instructions. Threads of execution are scheduled by the platform, such that many threads can execute on a small, fixed number of cores.</em></p></blockquote><p><span>Beyond a page table, a CPU core requires other information to coherently execute code. For instance, it requires the “instruction pointer” (or “program counter”)—this is a register, which stores the virtual address of the next instruction which should execute, in a given instruction stream. After each instruction is executed, the value in this register is updated to reflect the base address of the next subsequent instruction. On x64, this is known as the </span><code>rip</code><span> register.</span></p><p>When using a debugger, you’ll often see golden arrows, pointing to lines of source code or disassembly. This directly visualizes the location of the instruction pointer.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png" width="1419" height="248" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:248,&quot;width&quot;:1419,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:42198,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe21e4ab3-7d54-4384-9722-9b4552b406da_1419x248.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>There are several other registers, used for a variety of purposes, including general purpose slots for computations. The state of </span><em>all</em><span> such registers is called a “register state”, or “register file”. One register state is paired exclusively with one instruction stream, from one program—a register state should only change if a single instruction stream performs work which causes it.</span></p><p><span>But a CPU has only a fixed number of cores, be it 1, 2, 4, 8, 12, 16, 32, and so on—yet operating systems support a much larger number of programs executing simultaneously. Or, at least, it </span><em>seems</em><span> like they execute simultaneously.</span></p><p><span>The operating system implements this illusion—of hundreds if not thousands (if not more—unfortunately…) programs running simultaneously on a small, fixed number of cores—by </span><em>scheduling</em><span> </span><em>work</em><span> from these programs. One CPU core will perform work for one program, for some period of time—it will be interrupted, and the operating system can make the decision to schedule work from another program, for example.</span></p><p><span>A </span><em>thread of execution</em><span> is the name given to the execution state for one instruction stream. Each contains one register state, which includes the instruction pointer, and thus a stream of instructions—among whatever other state each operating system deems appropriate.</span></p><p><span>In other words, operating systems do not just schedule </span><em>programs</em><span>—they schedule </span><em>threads</em><span>. When an operating system </span><em>schedules a thread</em><span>, it incurs a “context switch”—this is the process of storing the CPU core state for whatever thread </span><em>was executing </em><span>to memory, and initializing that core to execute work for the thread which </span><em>will execute</em><span>.</span></p><blockquote><p><em>A sequence of bytes encoding data in a platform-defined format, to encode executable machine instructions, as well as relevant headers and metadata. An independent code package’s non-live representation—a blueprint for execution.</em></p></blockquote><p><span>On Windows, you’ll find executable images stored on the filesystem with a </span><code>.exe</code><span>, or a </span><code>.dll</code><span> extension. These files are stored in the </span><a href="https://learn.microsoft.com/en-us/windows/win32/debug/pe-format" rel="">Portable Executable (PE) format</a><span>. The difference between </span><code>.exe</code><span> and </span><code>.dll</code><span> is that the former is used to signify that an executable image is a viable </span><em>initial module</em><span> for a process, whereas the latter is used to signify that an executable image is only to be loaded dynamically as an </span><em>additional module</em><span> for a process.</span></p><p><span>On Linux systems, there is a similar structure—executable images are stored on the filesystem (the extension convention varies—sometimes there is no extension for the equivalent of Windows’ </span><code>.exe</code><span>, sometimes there is a </span><code>.elf</code><span> extension, and for the equivalent of Windows’ </span><code>.dll</code><span>, the extension is generally </span><code>.so</code><span>). These files are stored in the </span><a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format" rel="">Executable and Linkable Format (ELF)</a><span>.</span></p><p><span>When I say “these files are stored in” a particular format, what I mean is that the associated operating system’s </span><em>loader</em><span> expects files in that format. In order to produce code which can be loaded on a platform out-of-the-box, one must package that code in the format which is expected by that platform.</span></p><p>It’s not in this series’ scope to comprehensively dissect either the PE or the ELF formats. But to justify the definition and concepts I’ve provided, let’s investigate the PE format using a simple example.</p><p>First, consider the following code:</p><pre><code>// sample.c

void WinMainCRTStartup(void)
{
  int x = 0;
}</code></pre><p>This can be built with the following command, using the Visual Studio Build Tools:</p><pre><code>cl /nologo /Zi sample.c /link /NODEFAULTLIB /INCREMENTAL:NO /SUBSYSTEM:WINDOWS</code></pre><p>This command will produce an executable image, containing machine code. This machine code could be disassembled (for instance, using a debugger)—that would show something like this:</p><pre><code>sub rsp, 0x18              ; - push 24 bytes onto the stack, for locals
mov dword ptr [rsp], 0x00  ; - set the 4 bytes we are using of the stack
                           ;     for `x` to 0
add rsp, 0x18              ; - pop the 24 bytes we pushed off the stack
ret                        ; - return to the caller of our main function</code></pre><p><span>Even if we know nothing else about the PE format, we </span><em>do know</em><span> that these instructions need to be encoded </span><em>somewhere</em><span> in the file. We can identify how these are encoded using a disassembler tool as well, which should have an ability to visualize the machine code bytes which were parsed to form each instruction:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png" width="849" height="512" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:512,&quot;width&quot;:849,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:48721,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa185fe0b-85c6-4e6a-a279-abf50f96727d_849x512.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The above image shows the disassembled instructions in the RAD Debugger, as well as the bytes from which they were parsed. If you took a look at the disassembly yourself, and were confused by the </span><code>add [rax], al</code><span> instruction everywhere surrounding the actual code, the code bytes also clear that mystery up—that is simply the instruction one obtains when parsing two sequential zero bytes.</span></p><p>Given the above, we know that the generated machine code is encoded with 16 bytes. Each byte can be represented with two hexadecimal digits:</p><pre><code>48 83 ec 18 c7 04 24 00 00 00 00 48 83 c4 18 c3</code></pre><p>If we look at the generated EXE with a memory viewer, we can, indeed, find this sequence of bytes.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png" width="870" height="610" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:610,&quot;width&quot;:870,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:37748,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa4cda8a-786d-494b-9b6d-bcb6ccc5d0bf_870x610.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>We know that this sequence of bytes is the primary “payload”—the actual program code. Everything else in the file is used to either instruct the loader how to correctly prepare a process for this code to execute, or to associate various metadata with the code.</p><p>For example, if you scan around the file, you’ll find the full path to the debug information file (PDB) for the executable image.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png" width="869" height="568" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/86b44674-2b9d-44ad-9945-36916129bf95_869x568.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:568,&quot;width&quot;:869,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:69255,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86b44674-2b9d-44ad-9945-36916129bf95_869x568.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The executable image also must store data to which code refers. We can see this by inserting a recognizable pattern into a global variable:</p><pre><code>// sample.c

static char important_data[] = {0x12, 0x34, 0x56, 0x78, 0x90};

void WinMainCRTStartup(void)
{
  int x = important_data[0];
}</code></pre><p>We can also easily find the corresponding data in the PE file:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png" width="896" height="310" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:310,&quot;width&quot;:896,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:17650,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3f5a56f-c105-4e90-a39b-16f5fad3fddd_896x310.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>If you investigate formats like PE or ELF more closely, what you’ll find is that various categories of data—code, initialized global variables—are separated into </span><em>sections</em><span>. Each section has a name, which is also encoded in the file.</span></p><p><span>In PE, </span><code>.text</code><span>, for example, encodes all of the machine code (rather than, well, text…). </span><code>.data</code><span> stores data for initialized global variables. </span><code>.rdata</code><span> stores the same, but is separated to be allocated in read-only pages, such that code cannot modify that data.</span></p><p><code>.pdata</code><span> and </span><code>.xdata</code><span> encode information about how, given a procedure, one may </span><em>unwind</em><span> a thread, to—for example—produce a call stack, which is simply recreating the information of which functions called which other functions in order to get a thread of execution to its current point in a procedure. But we’ll dig into that topic in a later post.</span></p><p><code>.edata</code><span> and </span><code>.idata</code><span> encode information about </span><em>exports</em><span> and </span><em>imports</em><span>, respectively, which associate strings (“symbol names”) with locations in the file. An export is used by DLLs, for example, to export functions which can be dynamically loaded by name, by code in an executable or other DLL, and called. An import is used by either executables or DLLs to specify functions from other modules with which it must dynamically “link”.</span></p><p>When implementing a debugger, the precise details of formats like PE and ELF become relevant—but this should be a sufficient introduction for those unfamiliar with the basics.</p><blockquote><p><em><span>A </span><strong>loader</strong><span> — The part of an operating system responsible for parsing executable images—blueprints for execution—and instantiating them, so that the code encoded in the images may be actually executed.</span></em></p><p><span>A </span><em><strong>module</strong></em><span> — The loaded equivalent of an </span><em>executable image</em><span>. One </span><em>process</em><span> can load several </span><em>modules</em><span>, although a process is always initialized by the loading of </span><em>one specific module</em><span> (the initial executable image). Modules can be both dynamically </span><em>loaded</em><span> and </span><em>unloaded</em><span>.</span></p></blockquote><p><span>More than a debugger, a </span><em>loader</em><span> must be highly aware of executable image format details, because it has the task of </span><em>parsing</em><span> those images and making preparations,</span><em> </em><span>such that the code contained in the executable image can be executed.</span></p><p><span>A loader executes when a program is initially launched, or when actively-executing code requests to dynamically load another image—for instance, via </span><code>LoadLibrary</code><span> (Windows) or </span><code>dlopen</code><span> (Linux).</span></p><p><span>To understand this, let’s build a toy executable image format, and write our own loader, which parses </span><em>our </em><span>format, rather than PE or ELF.</span></p><p>Consider the following code, from earlier:</p><pre><code>// sample.c

void WinMainCRTStartup(void)
{
  int x = 0;
}</code></pre><p>And its disassembly:</p><pre><code>&gt; c:/devel/sample/sample.c
&gt; {
{48 83 ec 18}              sub rsp, 0x18
&gt; int x = 0;
{c7 04 24 00 00 00 00}     mov dword ptr [rsp], 0x00
&gt; }
{48 83 c4 18}              add rsp, 0x18
{c3}                       ret</code></pre><p>Our toy format can have a simple header, at the beginning of the image, containing the following values, in order:</p><ul><li><p><span>An 8-byte signature, denoting that the file is in our format—must always be </span><code>54 4f 59 45 58 45 00 00</code><span>—encoding the ASCII text </span><code>TOYEXE</code><span>, followed by two zero bytes.</span></p></li><li><p>An 8-byte offset into the file, encoding where in the file all readable-and-writable global data is stored—the “data section”</p></li><li><p>An 8-byte offset into the file, encoding where in the file all read-only global data is stored—the “read-only data section”</p></li><li><p>An 8-byte offset into the file, encoding where in the file all executable data is stored— the “code section”</p></li></ul><p>Each section size is determined by taking the next subsequent section offset (or the file size, in the case of the final section), and subtracting from it the section offset. If sections contain no data in any case, they will simply have the same offset as the next section.</p><p>Given this simple format, our full executable file for the simple example program can be encoded with the following bytes:</p><pre><code>{54 4f 59 45 58 45 00 00} (magic)
{20 00 00 00 00 00 00 00} (read/write data offset)
{20 00 00 00 00 00 00 00} (read-only data offset)
{20 00 00 00 00 00 00 00} (executable data offset)
{48 83 ec 18 c7 04 24 00 00 00 00 48 83 c4 18 c3} (executable data)</code></pre><p><span>In this case, our data sections are completely empty, because no global data is used by the code. Every section offset begins at offset </span><code>0x20</code><span> (or 32 bytes) into the file—or, directly after the header. The executable data section, being the final section, occupies the remainder of the file.</span></p><p>Our “loader” can define the format’s header with the following structure:</p><pre><code>typedef struct ToyExe_Header ToyExe_Header;
struct ToyExe_Header
{
  U64 magic;       // must be {54 4f 59 45 58 45 00 00}
  U64 rw_data_off; // read/write
  U64 r_data_off;  // read
  U64 x_data_off;  // executable
};</code></pre><p>It can begin by reading the file, and extracting the header:</p><pre><code>// open file, map it into the process address space
HANDLE file = CreateFileA(arguments, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
U64 file_size = 0;
if(file != INVALID_HANDLE_VALUE)
{
  DWORD file_size_hi = 0;
  DWORD file_size_lo = GetFileSize(file, &amp;file_size_hi);
  file_size = (((U64)file_size_hi) &lt;&lt; 32) | (U64)file_size_lo;
}
HANDLE file_map = CreateFileMappingA(file, 0, PAGE_EXECUTE_READ, 0, 0, 0);
void *file_base = MapViewOfFile(file_map, FILE_MAP_ALL_ACCESS, 0, 0, 0);

// extract the header
ToyExe_Header header_stub = {0};
ToyExe_Header *header = &amp;header_stub;
if(file_base &amp;&amp; file_size &gt;= sizeof(*header))
{
  header = (ToyExe_Header *)file_base;
}  </code></pre><p>It can then allocate memory, big enough for the image’s data, and copy the file’s contents into that address range.</p><pre><code><code>// allocate memory for all executable data - ensure it is all
// writeable, executable, and readable
void *exe_data = VirtualAlloc(0, file_size, MEM_RESERVE|MEM_COMMIT, 
                              PAGE_EXECUTE_READWRITE);

// copy file's data into memory
CopyMemory(exe_data, file_base, file_size);</code></code></pre><p>Given the header’s information encoding where in the executable data the code is stored, we can now call into that code directly:</p><pre><code>// call the code
void *x_data = (U8 *)exe_data + header-&gt;x_data_off;
((void (*)())x_data)();</code></pre><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png" width="1350" height="726" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:726,&quot;width&quot;:1350,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:95139,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff13a85b2-3f22-4989-942b-521f5cb892dd_1350x726.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>And it actually works! But there is, as you might expect, more minutiae to this in practice.</p><p><span>In this example, I’ve allocated all of the executable’s data with identical </span><em>memory protections</em><span>—all bytes in the executable’s data are legal to read, write, </span><em>and</em><span> execute. The point of having different sections at all is to organize data by how it will be accessed and used, so that—for instance—our “read-only data section” can actually be read-only (such that, if any code were to attempt writing to it, it would fail).</span></p><p><span>Because memory protections are assigned at </span><em>page granularity</em><span>, each individual section, after it’s loaded by our toy loader, must be </span><em>at least</em><span> one page size (so that we can assign appropriate protections to each section), and it must be aligned to page boundaries. But, were we actually designing a format, to require all sections be at least one page size (which is normally 4 kilobytes, if not larger), at least </span><em>in the executable image itself </em><span>(as it’s stored in the filesystem), can be fairly wasteful for smaller executables.</span></p><p>Instead of our loaded image being a flat copy from the image file:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png" width="364" height="411.84976525821594" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1446,&quot;width&quot;:1278,&quot;resizeWidth&quot;:364,&quot;bytes&quot;:812416,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb1a1b1e4-4a94-4d55-9775-ce0fc7c84407_1278x1446.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>We can adjust it to being an </span><em>expansion</em><span> for each section</span><em> </em><span>to page granularity, and a copy:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png" width="518" height="518" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:518,&quot;bytes&quot;:1320933,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F13ac2a39-66e1-4568-a052-b70d2ff91dc5_2048x2048.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>To do this, we can introduce a distinction between </span><em>unloaded</em><span> sections (that which stored in an executable image), and </span><em>loaded </em><span>sections (that which are loaded in memory, when a process executes). So far, our toy format has one notion of “offset”. We can break that down into two notions of offset, into two separate spaces—”unloaded space” and “loaded space”. These are generally called “file space” and “virtual space” (where “virtual” refers to a process’ “virtual address space”). Thus, instead of one type of offset, we can have </span><em>file offsets</em><span>, or </span><em>virtual offsets</em><span>. In code, instead of using </span><code>off</code><span> as our naming convention, we can explicitly encode which space we’re working within, by prefixing a name with either </span><code>f</code><span> or </span><code>v</code><span>. For example, “offsets” can now be referred to as either </span><code>foff</code><span> for file offsets, or </span><code>voff</code><span> for virtual offsets.</span></p><p><span>This distinction of </span><em>unloaded</em><span> and </span><em>loaded</em><span> images is the reason for the separation between the terms </span><em>image</em><span> and </span><em>module</em><span>. We call the </span><em>image</em><span> the “cold” equivalent of the data, and we call the </span><em>module</em><span> the “hot”—the loaded—equivalent of the data.</span></p><p><span>We can rewrite our header structure as follows, to encode both the locations of section data within the image, </span><em>and</em><span> to encode where the section data should be arranged </span><em>within memory</em><span> before execution:</span></p><pre><code><code>typedef struct ToyExe_Header ToyExe_Header;
struct ToyExe_Header
{
  U64 magic;   // must be {54 4f 59 45 58 45 00 00}
  U64 padding; // (round up to 64 bytes)
  U64 rw_foff; // read/write (file)
  U64 r_foff;  // read (file)
  U64 x_foff;  // executable (file)
  U64 rw_voff; // read/write (virtual)
  U64 r_voff;  // read (virtual)
  U64 x_voff;  // executable (virtual)
};</code></code></pre><p>Our test program can then be adjusted to the following bytes, assuming 4 kilobyte pages:</p><pre><code><code>{54 4f 59 45 58 45 00 00} (magic)
{00 00 00 00 00 00 00 00} (padding)
{20 00 00 00 00 00 00 00} (read/write data file offset)
{20 00 00 00 00 00 00 00} (read-only data file offset)
{20 00 00 00 00 00 00 00} (executable data file offset)
{00 10 00 00 00 00 00 00} (read/write data virtual offset)
{00 10 00 00 00 00 00 00} (read-only data virtual offset)
{00 10 00 00 00 00 00 00} (executable data virtual offset)
{48 83 ec 18 c7 04 24 00 00 00 00 48 83 c4 18 c3} (executable data)</code></code></pre><p>And our loader can be adjusted to perform the “expansionary copy”:</p><pre><code><code>// unpack f/v dimensions of each section (and header)
U64 fdata_hdr_size = sizeof(*header);
U64 fdata_rw_size  = header-&gt;r_foff - header-&gt;rw_foff;
U64 fdata_r_size   = header-&gt;x_foff - header-&gt;r_foff;
U64 fdata_x_size   = file_size - header-&gt;x_foff;
U64 vdata_hdr_size = fdata_hdr_size;
U64 vdata_rw_size  = header-&gt;r_voff - header-&gt;rw_voff;
U64 vdata_r_size   = header-&gt;x_voff - header-&gt;r_voff;
U64 vdata_x_size   = fdata_x_size;

// round up virtual sizes to 4K boundaries
vdata_hdr_size+= 4095;
vdata_rw_size += 4095;
vdata_r_size  += 4095;
vdata_x_size  += 4095;
vdata_hdr_size-= vdata_hdr_size%4096;
vdata_rw_size -= vdata_rw_size%4096;
vdata_r_size  -= vdata_r_size%4096;
vdata_x_size  -= vdata_x_size%4096;

// calculate total needed virtual size, allocate
U64 vdata_size = (vdata_hdr_size + vdata_rw_size + vdata_r_size + vdata_x_size);
U8 *vdata = (U8 *)VirtualAlloc(0, vdata_size, MEM_RESERVE|MEM_COMMIT, 
                               PAGE_READWRITE);

// unpack parts of virtual data
U8 *vdata_hdr     = vdata + 0;
U8 *vdata_rw      = vdata + header-&gt;rw_voff;
U8 *vdata_r       = vdata + header-&gt;r_voff;
U8 *vdata_x       = vdata + header-&gt;x_voff;

// unpack parts of file data
U8 *fdata         = (U8 *)file_base;
U8 *fdata_hdr     = fdata + 0;
U8 *fdata_rw      = fdata + header-&gt;rw_foff;
U8 *fdata_r       = fdata + header-&gt;r_foff;
U8 *fdata_x       = fdata + header-&gt;x_foff;

// copy &amp; protect
CopyMemory(vdata_hdr, fdata_hdr, fdata_hdr_size);
CopyMemory(vdata_rw, fdata_rw, fdata_rw_size);
CopyMemory(vdata_r, fdata_r, fdata_r_size);
CopyMemory(vdata_x, fdata_x, fdata_x_size);
DWORD old_protect = 0;
VirtualProtect(vdata_hdr, vdata_hdr_size, PAGE_READONLY, &amp;old_protect);
VirtualProtect(vdata_rw, vdata_rw_size, PAGE_READWRITE, &amp;old_protect);
VirtualProtect(vdata_r, vdata_r_size, PAGE_READONLY, &amp;old_protect);
VirtualProtect(vdata_x, vdata_x_size, PAGE_EXECUTE, &amp;old_protect);</code></code></pre><p>And—since it’s easy to notice that this is getting rather repetitive for each section—we can table-drive this “expansionary copy”. Doing so will eliminate most of the per-section duplication:</p><pre><code><code>// gather all information for all boundaries between all sections (&amp; header)
struct
{
  U64 foff;
  U64 voff;
  DWORD protect_flags;
}
boundaries[] =
{
  {0,               0,               PAGE_READONLY},
  {header-&gt;rw_foff, header-&gt;rw_voff, PAGE_READWRITE},
  {header-&gt;r_foff,  header-&gt;r_voff,  PAGE_READONLY},
  {header-&gt;x_foff,  header-&gt;x_voff,  PAGE_EXECUTE},
  {file_size,       0,               PAGE_READONLY},
};
U64 region_count = (sizeof(boundaries)/sizeof(boundaries[0]) - 1);

// calculate vsize for all regions
U64 vdata_size = 0;
for(U64 idx = 0; idx &lt; region_count; idx += 1)
{
  U64 vsize = (boundaries[idx+1].foff - boundaries[idx].foff);
  vsize += 4095;
  vsize -= vsize%4096;
  vdata_size += vsize;
}
boundaries[region_count].voff = vdata_size;

// allocate; iterate regions, do copy &amp; protect
U8 *vdata = (U8 *)VirtualAlloc(0, vdata_size, MEM_RESERVE|MEM_COMMIT, 
                               PAGE_READWRITE);
U8 *fdata = (U8 *)file_data;
DWORD old_protect = 0;
for(U64 idx = 0; idx &lt; region_count; idx += 1)
{
  CopyMemory(vdata + boundaries[idx].voff,
             fdata + boundaries[idx].foff,
             (boundaries[idx+1].foff - boundaries[idx].foff));
  VirtualProtect(vdata + boundaries[idx].voff,
                 (boundaries[idx+1].voff - boundaries[idx].voff),
                 boundaries[idx].protect_flags, &amp;old_protect);
}</code></code></pre><p>It’s not much shorter, but all work for all expanded and copied sections has been deduplicated. In order to adjust this for a larger number of different sections, only the boundary table must change.</p><p><span>Now that we have a basic structure for loading our image format, let’s consider how a loader is used. As I’ve stated, an executable image is loaded whenever a program is </span><em>launched</em><span>, or when an executing program requests to dynamically load another image (for instance, through </span><code>LoadLibrary</code><span> or </span><code>dlopen</code><span>).</span></p><p>We’ve already explored the first case—program launching—as that will consist of simply beginning execution of the program. With our toy loader, we can just immediately execute the code after we’ve loaded it:</p><pre><code><code>// call the code
void *vdata_x = (U8 *)vdata + header-&gt;x_voff;
((void (*)())vdata_x)();</code></code></pre><p><span>This makes the assumption that the first instruction stored is our entry point. If we ever wanted that to </span><em>not be the case</em><span>—as “real” executable image formats do—then we can simply store a virtual offset for the desired entry point within the image’s header.</span></p><p><span>But in the case of </span><em>dynamic loading</em><span>, our loader’s job is not to merely begin executing at a single point in some code. Our load instead must load the image, and prepare for dynamic lookups of potentially many named entry points. On Windows, the usage code for this looks something like:</span></p><pre><code>HMODULE foo_library = LoadLibraryA("foo.dll");
void (*foo_function)(void) = GetProcAddress(foo_library, "foo_function");
foo_function();</code></pre><p><span>To facilitate this path, our executable image format must associate a number of names—like </span><code>foo_function</code><span>—with specific virtual offsets in the executable data section. This concept is known as an executable image’s </span><em>exports</em><span>, and it can be straightforwardly encoded as a set of pairs of names and virtual offsets.</span></p><p><span>There’s a symmetric concept known as </span><em>imports</em><span>, which function as a fast path for the manual lookup of functions from a loaded executable image like the above code. On Windows, the usage code for </span><em>that</em><span> looks something like:</span></p><pre><code>__declspec(dllimport) void foo_function(void);
#pragma comment(lib, "foo.lib")
foo_function();</code></pre><p><span>Both </span><em>explicitly</em><span> loaded (via </span><code>GetProcAddress</code><span> on Windows, or </span><code>dlsym</code><span> on Linux), and </span><em>implicitly</em><span> loaded (via </span><code>__declspec(dllimport)</code><span> on Windows, which is more automatic on Linux toolchains) functions are called through a double indirection. To perform an actual function call, first the CPU must follow the address of the pointer in which the loaded address is stored, </span><em>then</em><span> it can use whatever the value of that pointer as the address of the function to call.</span></p><p><span>In the above example with </span><em>explicit</em><span> loading, the address of the loaded function is stored in the explicit </span><code>foo_function</code><span> function pointer variable. In the above example with </span><em>implicit</em><span> loading, the address of the loaded function is implicitly stored in hidden state, as an implementation detail.</span></p><p><span>When an executable image has imports, in order for the loading of that image to succeed, the associated imports must be dynamically linked. This will be done automatically, as opposed to the program code manually calling—for instance—</span><code>LoadLibrary</code><span> or </span><code>GetProcAddress</code><span>.</span></p><p><span>Machine code contained in an executable image can be hardcoded to refer to specific addresses. But as you’ll notice, in our toy loader, we don’t control which address at which our </span><em>module</em><span> for an image is placed in memory. We call </span><code>VirtualAlloc</code><span> to allocate memory for our module data, and whatever address it returns, we use that. Of course, we can </span><em>request</em><span> that </span><code>VirtualAlloc</code><span> place our allocation at a specific address, but that is not necessarily guaranteed to succeed.</span></p><p>This means that if we, for instance, had an image with instructions which referred to a global variable’s absolute address, they would only be valid given that the image is loaded at a particular address. </p><p><span>In principle, a loader could guarantee a fixed virtual address </span><em>for a program’s initially loaded executable image. </em><a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization" rel="">They don’t</a><span>. But in any case, that cannot generally be true, because images can be loaded or unloaded dynamically, and they are not built to be aware of which other images are loaded simultaneously. Thus, they must be dynamically arranged—each image’s code should be able to operate correctly, irrespective of where its loaded module equivalent is placed in memory.</span></p><p><span>In many cases, especially nowadays, addresses are encoded as </span><em>relative to some offset into code</em><span>, in which case they’re always valid, irrespective of which runtime address at which the module is loaded. But, nevertheless, there still exist mechanisms for code to be hardwired to refer to specific addresses. In such cases, an executable image also contains </span><em>relocations</em><span>, which encode locations within the executable image which must be </span><em>reencoded</em><span> after the base address of the loaded image is determined at runtime.</span></p><p>It is the loader’s job to iterate these relocations, and patch in the appropriate addresses given the only-then-available knowledge of where the image’s loaded data is actually stored.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png" width="496" height="496" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:496,&quot;bytes&quot;:689644,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc9e7b8be-92da-4f66-9800-cb0686184931_2048x2048.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><em>An instance of a live, running program. Instantiated by the platform’s loader using the initial executable image to determine how it’s initialized, and what code is initially loaded. The granularity at which operating systems assign virtual address spaces. The container of several modules, and threads of execution.</em></p></blockquote><p><span>We’ve covered everything we need to sketch out a definition of a </span><em>process</em><span>—a running program.</span></p><p><span>Each </span><em>process</em><span> is the owner of some number of </span><em>threads</em><span>, and some number of </span><em>modules</em><span>. It is the owner of a single </span><em>virtual address space</em><span>.</span></p><p><span>Threads and virtual address spaces are, in a sense, </span><em>orthogonal concepts</em><span>—threads are used to virtualize CPU cores, virtual address spaces are used to virtualize physical storage—the </span><em>process</em><span> is the concept which binds them together.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png" width="474" height="474" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:474,&quot;bytes&quot;:928209,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F65f796a4-42e3-48da-9d54-f9757e8017af_2048x2048.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>When a program is launched, a process is created, an executable image is loaded to produce an initial module, and an initial thread is spawned.</p><p>An operating system’s scheduler then considers that process’ main thread as a viable candidate for scheduling. When it’s scheduled, the program executes.</p><p><span>When a debugger is used to analyze another program, it does so at process granularity. It is registered by the operating system as being </span><em>attached to a process</em><span>. When a debugger is attached to a process, the operating system enables additional codepaths, which report information about that process’ execution to the debugger’s process. If that information includes addresses, they’re reported as </span><em>virtual addresses</em><span>, within the address space of the process to which the debugger is attached.</span></p><p>But that’s enough for now! We’ll dig into exactly what kind of information an operating system reports to a debugger process, how it can do so, and how the debugger can interact with the debugged process, next time.</p><p>If you enjoyed this post, please consider subscribing. Thanks for reading.</p><p>-Ryan</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Build a Low-Cost Drone Using ESP32 (241 pts)]]></title>
            <link>https://www.digikey.com/en/maker/projects/a-step-by-step-guide-to-build-a-low-cost-drone-using-esp32/8afccd0690574bcebfa0d2ad6fd0a391</link>
            <guid>42498648</guid>
            <pubDate>Tue, 24 Dec 2024 00:20:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.digikey.com/en/maker/projects/a-step-by-step-guide-to-build-a-low-cost-drone-using-esp32/8afccd0690574bcebfa0d2ad6fd0a391">https://www.digikey.com/en/maker/projects/a-step-by-step-guide-to-build-a-low-cost-drone-using-esp32/8afccd0690574bcebfa0d2ad6fd0a391</a>, See on <a href="https://news.ycombinator.com/item?id=42498648">Hacker News</a></p>
Couldn't get https://www.digikey.com/en/maker/projects/a-step-by-step-guide-to-build-a-low-cost-drone-using-esp32/8afccd0690574bcebfa0d2ad6fd0a391: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Making AMD GPUs competitive for LLM inference (2023) (206 pts)]]></title>
            <link>https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference</link>
            <guid>42498634</guid>
            <pubDate>Tue, 24 Dec 2024 00:17:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference">https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference</a>, See on <a href="https://news.ycombinator.com/item?id=42498634">Hacker News</a></p>
Couldn't get https://blog.mlc.ai/2023/08/09/Making-AMD-GPUs-competitive-for-LLM-inference: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Parsing millions of URLs per Second (2023) (114 pts)]]></title>
            <link>https://onlinelibrary.wiley.com/doi/10.1002/spe.3296</link>
            <guid>42498514</guid>
            <pubDate>Mon, 23 Dec 2024 23:48:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://onlinelibrary.wiley.com/doi/10.1002/spe.3296">https://onlinelibrary.wiley.com/doi/10.1002/spe.3296</a>, See on <a href="https://news.ycombinator.com/item?id=42498514">Hacker News</a></p>
Couldn't get https://onlinelibrary.wiley.com/doi/10.1002/spe.3296: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Why are cancer guidelines stuck in PDFs? (189 pts)]]></title>
            <link>https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in</link>
            <guid>42498462</guid>
            <pubDate>Mon, 23 Dec 2024 23:36:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in">https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in</a>, See on <a href="https://news.ycombinator.com/item?id=42498462">Hacker News</a></p>
Couldn't get https://seangeiger.substack.com/p/why-are-cancer-guidelines-stuck-in: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Complete decompilation of Lego Island (197 pts)]]></title>
            <link>https://github.com/isledecomp/isle</link>
            <guid>42497173</guid>
            <pubDate>Mon, 23 Dec 2024 20:03:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/isledecomp/isle">https://github.com/isledecomp/isle</a>, See on <a href="https://news.ycombinator.com/item?id=42497173">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">LEGO Island Decompilation</h2><a id="user-content-lego-island-decompilation" aria-label="Permalink: LEGO Island Decompilation" href="#lego-island-decompilation"></a></p>
<p dir="auto"><a href="https://www.youtube.com/playlist?list=PLbpl-gZkNl2COf_bB6cfgTapD5WduAfPz" rel="nofollow">Development Vlog</a> | <a href="https://github.com/isledecomp/isle/blob/master/CONTRIBUTING.md">Contributing</a> | <a href="https://matrix.to/#/#isledecomp:matrix.org" rel="nofollow">Matrix</a> | <a href="https://forum.mattkc.com/viewforum.php?f=1" rel="nofollow">Forums</a> | <a href="https://www.patreon.com/mattkc" rel="nofollow">Patreon</a></p>
<p dir="auto">This is a functionally complete decompilation of LEGO Island (Version 1.1, English). It aims to be as accurate as possible, matching the recompiled instructions to the original machine code as much as possible. The goal is to provide a workable codebase that can be modified, improved, and ported to other platforms later on.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Status</h2><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d27978e87b3d5547e472ae3f6610ae64892cffc1ab7628ed0b8e683142d2bf8e/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f49534c4550524f47524553532e535647"><img src="https://camo.githubusercontent.com/d27978e87b3d5547e472ae3f6610ae64892cffc1ab7628ed0b8e683142d2bf8e/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f49534c4550524f47524553532e535647" width="50%" data-canonical-src="https://legoisland.org/progress/ISLEPROGRESS.SVG"></a><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dd9ae27b175ec9c47fa3d75495cf660d5a16c83f8c303b97e87fea750a234c7a/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f4c45474f3150524f47524553532e535647"><img src="https://camo.githubusercontent.com/dd9ae27b175ec9c47fa3d75495cf660d5a16c83f8c303b97e87fea750a234c7a/68747470733a2f2f6c65676f69736c616e642e6f72672f70726f67726573732f4c45474f3150524f47524553532e535647" width="50%" data-canonical-src="https://legoisland.org/progress/LEGO1PROGRESS.SVG"></a></p>
<p dir="auto">Both <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> are completely decompiled and, to the best of our knowledge, are functionally identical to the originals. However, work is still ongoing to improve the accuracy, naming, documentation, and structure of the source code. While there may still be unresolved bugs that are not present in retail, the game should be fully playable with the binaries derived from this source code.</p>
<p dir="auto">Due to various complexities with regard to the compiler, these binaries are not a byte-for-byte match of the original executables. We remain hopeful that this can be resolved at some point.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building</h2><a id="user-content-building" aria-label="Permalink: Building" href="#building"></a></p>
<p dir="auto">This project uses the <a href="https://cmake.org/" rel="nofollow">CMake</a> build system, which allows for a high degree of versatility regarding compilers and development environments. For the most accurate results, Microsoft Visual C++ 4.20 (the same compiler used to build the original game) is recommended. Since we're trying to match the output of this code to the original executables as closely as possible, all contributions will be graded with the output of this compiler.</p>
<p dir="auto">These instructions will outline how to compile this repository using Visual C++ 4.2 into highly-accurate binaries where the majority of functions are instruction-matching with retail. If you wish, you can try using other compilers, but this is at your own risk and won't be covered in this guide.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Prerequisites</h4><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<p dir="auto">You will need the following software installed:</p>
<ul dir="auto">
<li>Microsoft Visual C++ 4.2. This can be found on many abandonware sites, but the installer can be a little iffy on modern versions of Windows. For convenience, a <a href="https://github.com/itsmattkc/msvc420">portable version</a> is available that can be downloaded and used quickly instead.</li>
<li><a href="https://cmake.org/" rel="nofollow">CMake</a>. A copy is often included with the "Desktop development with C++" workload in newer versions of Visual Studio; however, it can also be installed as a standalone app.</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Compiling</h4><a id="user-content-compiling" aria-label="Permalink: Compiling" href="#compiling"></a></p>
<ol dir="auto">
<li>Open a Command Prompt (<code>cmd</code>).</li>
<li>From Visual C++ 4.2, run <code>BIN/VCVARS32.BAT x86</code> to populate the path and other environment variables for compiling with MSVC.</li>
<li>Make a folder for compiled objects to go, such as a <code>build</code> folder inside the source repository (the folder you cloned/downloaded to).</li>
<li>In your Command Prompt, <code>cd</code> to the build folder.</li>
<li>Configure the project with CMake by running:</li>
</ol>
<div data-snippet-clipboard-copy-content="cmake <path-to-source> -G &quot;NMake Makefiles&quot; -DCMAKE_BUILD_TYPE=RelWithDebInfo"><pre><code>cmake &lt;path-to-source&gt; -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo
</code></pre></div>
<ul dir="auto">
<li><strong>Visual C++ 4.2 has issues with paths containing spaces</strong>. If you get configure or build errors, make sure neither CMake, the repository, nor Visual C++ 4.2 is in a path that contains spaces.</li>
<li>Replace <code>&lt;path-to-source&gt;</code> with the source repository. This can be <code>..</code> if your build folder is inside the source repository.</li>
<li><code>RelWithDebInfo</code> is recommended because it will produce debug symbols useful for further decompilation work. However, you can change this to <code>Release</code> if you don't need them. <code>Debug</code> builds are not recommended because they are unlikely to be compatible with the retail <code>LEGO1.DLL</code>, which is currently the only way to use this decompilation for gameplay.</li>
<li><code>NMake Makefiles</code> is most recommended because it will be immediately compatible with Visual C++ 4.2. For faster builds, you can use <code>Ninja</code> (if you have it installed), however due to limitations in Visual C++ 4.2, you can only build <code>Release</code> builds this way (debug symbols cannot be generated with <code>Ninja</code>).</li>
</ul>
<ol dir="auto">
<li>Build the project by running <code>nmake</code> or <code>cmake --build &lt;build-folder&gt;</code></li>
<li>When this is done, there should be a recompiled <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> in the build folder.</li>
<li>Note that <code>nmake</code> must be run twice under certain conditions, so it is advisable to always (re-)compile using <code>nmake &amp;&amp; nmake</code>.</li>
</ol>
<p dir="auto">If you have a CMake-compatible IDE, it should be pretty straightforward to use this repository, as long as you can use <code>VCVARS32.BAT</code> and set the generator to <code>NMake Makefiles</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">Simply place the compiled <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> into LEGO Island's install folder (usually <code>C:\Program Files\LEGO Island</code> or <code>C:\Program Files (x86)\LEGO Island</code>). Alternatively, LEGO Island can run from any directory as long as <code>ISLE.EXE</code> and <code>LEGO1.DLL</code> are in the same directory, and the registry keys (usually <code>HKEY_LOCAL_MACHINE\Software\Mindscape\LEGO Island</code> or <code>HKEY_LOCAL_MACHINE\Software\Wow6432Node\Mindscape\LEGO Island</code>) point to the correct location for the asset files.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">If you're interested in helping or contributing to this project, check out the <a href="https://github.com/isledecomp/isle/blob/master/CONTRIBUTING.md">CONTRIBUTING</a> page.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional Information</h2><a id="user-content-additional-information" aria-label="Permalink: Additional Information" href="#additional-information"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Which version of LEGO Island do I have?</h3><a id="user-content-which-version-of-lego-island-do-i-have" aria-label="Permalink: Which version of LEGO Island do I have?" href="#which-version-of-lego-island-do-i-have"></a></p>
<p dir="auto">Right click on <code>LEGO1.DLL</code>, select <code>Properties</code>, and switch to the <code>Details</code> tab. Under <code>Version</code> you should either see <code>1.0.0.0</code> (1.0) or <code>1.1.0.0</code> (1.1). Additionally, you can look at the game disc files; 1.0's files will all say August 8, 1997, and 1.1's files will all say September 8, 1997. Version 1.1 is by far the most common, especially if you're not using the English or Japanese versions, so that's most likely the version you have.</p>
<p dir="auto">Please note that some localized versions of LEGO Island were recompiled with small changes despite maintaining a version number parallel with other versions; this decompilation specifically targets the English release of version 1.1 of LEGO Island. You can verify you have the correct version using the checksums below:</p>
<ul dir="auto">
<li>ISLE.EXE <code>md5: f6da12249e03eed1c74810cd23beb9f5</code></li>
<li>LEGO1.DLL <code>md5: 4e2f6d969ea2ef8655ba3fc221a0c8fe</code></li>
<li>CONFIG.EXE <code>md5: 92d958a64a273662c591c88b09100f4a</code></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The journey to save the last known 43-inch Sony CRT (518 pts)]]></title>
            <link>https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known</link>
            <guid>42497093</guid>
            <pubDate>Mon, 23 Dec 2024 19:49:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known">https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known</a>, See on <a href="https://news.ycombinator.com/item?id=42497093">Hacker News</a></p>
Couldn't get https://obsoletesony.substack.com/p/the-journey-to-save-the-last-known: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Why HNSW is not the answer and disk-based alternatives might be more practical (129 pts)]]></title>
            <link>https://blog.pgvecto.rs/why-hnsw-is-not-the-answer</link>
            <guid>42496465</guid>
            <pubDate>Mon, 23 Dec 2024 18:24:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.pgvecto.rs/why-hnsw-is-not-the-answer">https://blog.pgvecto.rs/why-hnsw-is-not-the-answer</a>, See on <a href="https://news.ycombinator.com/item?id=42496465">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content-parent"><p>HNSW (Hierarchical Navigable Small World) has become the go-to algorithm for many vector databases. Its multi-layered graph structure and ability to efficiently navigate vector embeddings make it particularly appealing. However, despite its apparent advantages, HNSW may not be the optimal solution for large-scale and dynamic vector similarity search. In this blog post, we challenge the dominance of HNSW and explore why disk-based alternatives, such as IVF (Inverted File Index), might be more practical for massive datasets.</p>
<hr>
<h2 id="heading-the-appeal-of-hnsw">The Appeal of HNSW</h2>
<p>HNSW offers several advantages:</p>
<ul>
<li><p><strong>Efficient Search</strong>: Its graph-based structure enables quick nearest-neighbor searches, especially for smaller datasets.</p>
</li>
<li><p><strong>Incremental Updates</strong>: The ability to add new vectors incrementally without needing to rebuild the index is a major benefit for dynamic environments.</p>
</li>
<li><p><strong>High Recall</strong>: HNSW delivers high recall with relatively low latency, making it an ideal option for real-time applications.</p>
</li>
</ul>
<p>However, these benefits come with trade-offs that become more noticeable as dataset sizes increase.</p>
<hr>
<h2 id="heading-the-problem-of-hnsw">The Problem of HNSW</h2>
<p>One of the main challenges of HNSW is its significant dependence on memory for indexing and search operations. Here are the primary issues that emerge:</p>
<ul>
<li><p><strong>Memory Overhead</strong>: Traversing HNSW’s graph structure involves highly random access patterns. The entire dataset must be stored in memory to achieve reasonable performance. This becomes infeasible for large-scale datasets with billions of high-dimensional vectors due to exorbitant memory requirements.</p>
</li>
<li><p><strong>Performance Sensitivity to Memory Size</strong>: HNSW’s performance degrades sharply if the memory is even slightly insufficient to hold all vectors. In such cases, swapping data to disk drastically impacts search speed, making it impractical for systems with constrained memory.</p>
</li>
<li><p><strong>Unsuitability for Disk-Based Environments</strong>: HNSW is fundamentally designed for in-memory operations and performs poorly in disk-oriented scenarios, such as PostgreSQL. Its reliance on frequent random access patterns makes it incompatible with the sequential access nature of disk storage.</p>
</li>
<li><p><strong>Insertion and Deletion Costs</strong>: Updating the index in HNSW involves cascading modifications throughout the graph, leading to significant computation and write amplification. This makes insertion and deletion operations both slow and resource-intensive.</p>
</li>
</ul>
<p>In contrast, disk-based solutions like IVF excel in scenarios requiring scalability and efficiency at the cost of minimal complexity.</p>
<hr>
<h2 id="heading-why-ivf-can-be-faster-than-hnsw">Why IVF Can Be Faster Than HNSW</h2>
<p><img data-zoomable="true" loading="lazy" src="https://www.researchgate.net/publication/357875438/figure/fig15/AS:1113078611607560@1642390029247/Two-state-of-the-art-ANN-indexing-methods-the-IVF-index-Left-and-the-three-layer.ppm" alt="10: Two state-of-the-art ANN indexing methods: the IVF index (Left) and the (three-layer) HNSW index (Right). Figure credit: Li et al. [2020] ."></p>
<p>A critical observation across all vector search algorithms is that their performance largely hinges on the number of distance computations they perform. Minimizing these computations is essential for improving search speed. Although the original IVF index required scanning 1% to 5% of the total vectors, modern advancements in quantization and optimization have significantly enhanced its efficiency, making IVF a strong competitor to HNSW.</p>
<h3 id="heading-quantization-the-game-changer">Quantization: The Game Changer</h3>
<p>Quantization compresses high-dimensional vectors into compact representations. For instance:</p>
<ul>
<li><p><strong>RaBitQ</strong>: Leverages concentration of measure phenomena to enhance binary and scalar quantization accuracy, quantizing each dimension into 1 bit for a 32x compression ratio.</p>
</li>
<li><p><strong>Product Quantization (PQ)</strong>: Works by dividing the vector space into subspaces, quantizing each subspace independently to minimize approximation error. This method offers flexible compression ratios from 4x to 64x in FAISS, enabling finer compression and faster approximate searches.</p>
</li>
<li><p><strong>Scalar Quantization (SQ)</strong>: Quantizes each vector dimension independently by dividing its range into discrete levels, typically achieving a 4x compression ratio by converting from float to int8.</p>
</li>
<li><p><strong>ScaNN</strong>: Uses anisotropic vector quantization to optimize inner product accuracy by penalizing errors in directions that impact high inner products, achieving superior recall and speed.</p>
</li>
</ul>
<p>Quantization reduces memory and disk space usage significantly—often by a factor of 32x when converting floats into bits—while drastically lowering computational overhead. Despite some loss of precision, quantization makes vector comparisons far more efficient. For example, the typical distance computation complexity between two D-dimensional vectors is O(D^2), but compressing floats into bits reduces this by a factor of 1024 (32x32). With fast-scan optimizations, these computations are further accelerated via efficient CPU register lookups. Combined with IVF, many quantization methods consistently outperform HNSW in both speed and scalability. The typical workflow involves:</p>
<ol>
<li><p><strong>Initial Search</strong>: Leveraging compressed representations to rapidly identify candidate vectors.</p>
</li>
<li><p><strong>Reranking</strong>: Refining results using full-precision distance calculations on a smaller subset of candidates.</p>
</li>
</ol>
<h3 id="heading-comparing-rabitqivf-and-hnsw">Comparing RaBitQ+IVF and HNSW</h3>
<p>IVF with quantization provides a highly efficient way to store all quantized vectors in memory. By leveraging RaBitQ, memory usage is reduced by a factor of 32 compared to full-size vectors, allowing the entire quantized dataset to fit in memory. This design enables the index to rapidly retrieve approximate nearest neighbors using bit vectors and rerank them with full-precision vectors fetched from disk. For a typical Top-10 query, IVF fetches only 100-200 vectors from disk, compared to HNSW, which may require 800-1000 vectors. This efficient approach achieves an optimal balance between memory usage and disk access, offering outstanding cost-performance benefits.</p>
<p><img data-zoomable="true" loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1734489380210/a2812b59-5ffd-4ee3-ac35-1681950ef550.png?auto=compress,format&amp;format=webp" alt=""></p>
<p>While similar quantization techniques could theoretically be applied to HNSW, practical constraints reduce their effectiveness:</p>
<ul>
<li><p><strong>Vector Packing</strong>: Fast scan optimization relies on packing 32 compressed vectors together, which is incompatible with HNSW’s graph structure.</p>
</li>
<li><p><strong>Random Access Costs</strong>: HNSW involves frequent random access across graph nodes and edges, making traversal inefficient. In contrast, IVF organizes vectors sequentially in posting lists, enabling faster prefetching and efficient sequential scans.</p>
</li>
<li><p><strong>Reranking Costs</strong>: Both IVF and HNSW share similar reranking computational costs due to their reliance on quantized representations in the first stage.</p>
</li>
</ul>
<p>Ultimately, the performance difference between quantized IVF and HNSW is likely minimal, but IVF stands out with its simplicity and efficiency.</p>
<hr>
<div>
<table>
<thead>
<tr>
<td>Feature</td><td>IVF</td><td>IVF + RaBitQ</td><td>HNSW</td></tr>
</thead>
<tbody>
<tr>
<td>Indexing Method</td><td>KMeans can be offloaded to GPU</td><td>KMeans + Quantization</td><td>Nearest Neighbor Graph, need to keep everything in memory</td></tr>
<tr>
<td>Overlapped Data Across Query</td><td>Centroids</td><td>Quantized vectors</td><td>No</td></tr>
<tr>
<td>Scalability</td><td>Limited by CPU and memory</td><td>Outstanding</td><td>Limited by memory</td></tr>
<tr>
<td>Insertion/Deletion</td><td>Simple (updates posting lists)</td><td>Simple (updates posting lists)</td><td>Complex (cascading graph changes)</td></tr>
<tr>
<td>Search Speed</td><td>Slow</td><td>Extremely Fast with Quantization</td><td>Fast with sufficient memory</td></tr>
<tr>
<td>Overall Complexity</td><td>Low</td><td>Low</td><td>High</td></tr>
</tbody>
</table>
</div><hr>
<h2 id="heading-operational-simplicity-of-ivf">Operational Simplicity of IVF</h2>
<p>IVF’s simplicity makes it a more practical choice for real-world applications:</p>
<ul>
<li><p><strong>Insertion and Deletion</strong>: In HNSW, these operations trigger cascading modifications throughout the graph, resulting in significant computation and write amplification. IVF, in contrast, only requires updating the relevant posting list.</p>
</li>
<li><p><strong>Disk-Based Storage</strong>: IVF’s reliance on disk-based indexing enables it to scale efficiently without the prohibitive memory costs associated with HNSW.</p>
</li>
<li><p><strong>Adaptability</strong>: IVF can be easily combined with advanced quantization techniques, enabling further optimizations.</p>
</li>
</ul>
<hr>
<h2 id="heading-conclusion">Conclusion</h2>
<p>While HNSW has solidified its reputation as a fast and accurate algorithm for vector similarity search, it is not without limitations. Its memory-intensive nature and operational complexity make it less suitable for large-scale applications. In contrast, IVF offers a scalable and cost-effective alternative, particularly when paired with modern quantization techniques.</p>
<p>As the demand for vector search continues to grow, practitioners must carefully evaluate the trade-offs between memory-based and disk-based solutions. HNSW may dominate small to medium-scale applications, but for massive datasets, it’s time to look beyond HNSW and embrace simpler, scalable approaches like IVF.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nordstrom family to take company private (103 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-12-23/nordstrom-family-to-take-company-private-in-6-25-billion-deal</link>
            <guid>42496104</guid>
            <pubDate>Mon, 23 Dec 2024 17:38:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-12-23/nordstrom-family-to-take-company-private-in-6-25-billion-deal">https://www.bloomberg.com/news/articles/2024-12-23/nordstrom-family-to-take-company-private-in-6-25-billion-deal</a>, See on <a href="https://news.ycombinator.com/item?id=42496104">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Llama 3.3 70B Sparse Autoencoders with API access (175 pts)]]></title>
            <link>https://www.goodfire.ai/papers/mapping-latent-spaces-llama/</link>
            <guid>42495936</guid>
            <pubDate>Mon, 23 Dec 2024 17:18:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.goodfire.ai/papers/mapping-latent-spaces-llama/">https://www.goodfire.ai/papers/mapping-latent-spaces-llama/</a>, See on <a href="https://news.ycombinator.com/item?id=42495936">Hacker News</a></p>
Couldn't get https://www.goodfire.ai/papers/mapping-latent-spaces-llama/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[C++ is an absolute blast (249 pts)]]></title>
            <link>https://learncodethehardway.com/blog/31-c-plus-plus-is-an-absolute-blast/</link>
            <guid>42495135</guid>
            <pubDate>Mon, 23 Dec 2024 15:37:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://learncodethehardway.com/blog/31-c-plus-plus-is-an-absolute-blast/">https://learncodethehardway.com/blog/31-c-plus-plus-is-an-absolute-blast/</a>, See on <a href="https://news.ycombinator.com/item?id=42495135">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><info><author><b>By</b> Zed A. Shaw</author></info><!-- HTML_TAG_START --><p>I want you to ask yourself an honest question. When was the last time you actually had <em>fun</em> in programming? Looking back, I don't think I've actually had fun in programming for close to...10 years? I don't have fun with JavaScript, Python, Ruby, C, nothing. When I say "fun" I mean, you genuinely were excited to work on your project and the whole time you work on it you're thinking, "Damn this is a blast. I can't believe that wild idea I had actually worked!"</p><p>For example, I'm working on a little roguelike game and I had the idea, <em>"I bet I could use this dijkstra algorithm to connect rooms during map generation by inverting the map and then running it. It'd probably make really cool carved out tunnels between rooms."</em> I then had the greatest time figuring out how to pull it off and didn't feel like C++ got in my way. I managed to <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/roguish/src/branch/main/map.cpp#L296">pull it off</a> and learned a lot in the process. I then had the idea, <em>"I wonder if I can take my <a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a> user interface and just render it directly into an <a href="https://www.sfml-dev.org/">SFML</a> render window."</em> Sure enough, I could <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/roguish/src/branch/main/gui.cpp#L150">totally do that too</a> and not only was it not that difficult but I learned a lot about how C++ does unicode. None of this was <em>easy</em>, it was just all possible and I can't think of too may ways C++ would stop me from doing what I want. That's fun.</p><p>I think programmers have lost the story of why they got into programming in the first place. I know I didn't learn to code just so I can make a bunch of billionaires more billions. I didn't get into programming so that I can fight an immutable rendering engine into finally showing a cornflower blue button. I definitely didn't get into programming just to make a few authoritarians at the top of a random open source project happy.</p><p>I got into programming because it was <em>fun</em>. I remember staying up late until 4am desperately trying to get my shitty gwBASIC code to render a character to an MS-DOS console. I remember working on weird GUI ideas and network servers for weeks on end <em>just because I had an idea</em>. I remember fighting one bug for a month only to find out it was a stupid spelling mistake. I <em>remember</em> that all of this--even the frustration--was a hell of a lot of fun. Easily more entertaining than anything else I've learned.</p><p>One thing I definitely remember was that C++ was also a lot of fun. Even back in the day when it was an overhyped and honestly terrible language. It was fun because I could probably make almost anything with C++. No waiting around for someone blessed by the Python Illuminati to create that terrible wrapper around a C++ project's code.</p><p>But...somewhere along the way, C++ became...unfun, and I think the trend continued with every language to this day. The story of C++ is a possible warning to other languages, and a story of a great comeback from the dead that nobody realized happened.</p><p>In the late 90s to early 2ks, I was actively using both C++ and Java until I mostly quit using C++ about the same time the C++ community did this:</p><p><img src="https://learncodethehardway.com/images/blog/meta_programming_cocaine.jpg" alt="I do metaprogramming."></p><p>That's how it felt anyway. Just a bunch of idiots finding the new angle bracket shaped Template Metaprogramming Hammer and bashing everything nailshaped within 100 meters. I remember insane discussions with people who thought adding two numbers with a template was "faster" than adding two numbers directly, even though the assembly language output was exactly the same.</p><p>This obsession with using template metaprogramming for <em>everything</em>--combined with what I recall as a weird arrogance in the C++ standards committee to refuse to make things nice for programmers--is what tainted C++ for me and many people. It became the language for architecture astronauts who cared more about the Pimpl pattern and metaprogramming than actually making the language nice to use.</p><p>That's why I loved Java. Sun Microsystems totally cared about programmers and what they needed. Java had a Garbage Collector! Java <em>totally</em> would <em>never</em> end up doing the exact same thing. No, not at all. Java programmers would never become obsessed with insane boilerplate, AbstractFactoryFactory Visitor patterns, and caring more about standards than usability? No, never. <code>&lt;cough&gt;</code></p><p>I think this is probably about the same time that many people my age quit using C++, and most of you probably remember an overly wordy complex language with a bunch of syntax but not a lot of gain for all the <code>&lt;&gt;</code> angle-brackets.</p><p>But, C++ kept evolving, and the standards committee seemed to realize that if they don't do something they'll become an obscure language only used by a single 10 trillion dollar industry. How pathetic!</p><p>They did the work, improved the language dramatically, and actually made it fun again all without losing their original goals. Sadly, nobody knows about this <em>huge</em> revolution in C++ so I'm going to update your perception of the language.</p><h2 id="the-amazing-comeback-of-c11">The Amazing Comeback of C++11</h2><p>I want you to go ahead and look at what was <a href="https://en.cppreference.com/w/cpp/11">added to C++ in C++11</a>. Go ahead, click that link and look at that list of insane improvements. Let's highlight a few <em>massive</em> changes:</p><ul><li><code>auto</code> -- Yes, C++ actually added an automatic type inference keyword. I was as shocked as you because I remember C++ being an obnoxious jerk that made me type the same damn word over and over for no reason.</li><li><code>nullptr</code> -- What? Yes, they fixed the bullshit C thing of this weirdly defined <code>NULL</code> that's a zero but not a zero because some jackass on the C standards committee still writes code for a PDP-11 that has 13.5 bit words and no zero address.</li><li><code>range-for</code> -- Are you reading this right? Yes, C++ has similar iterators and <code>for(x in list)</code> that Python has. Best of all, <em>it works with <code>auto</code></em> so you can loop over lists and not care about getting the type right. JavaScript still can't even figure out what a <code>for-loop</code> is but C++ has one.</li><li><code>lambda expressions</code> -- What?! Yes, C++ has lambda, and <em>it's not bullshit like Python's lambda</em>. Lambda's in C++ are so good I think they end up dramatically changing how you can approach design. Checkout how <a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a> uses them to see how much they improve the usability of APIs.</li><li><code>&lt;chrono&gt;</code> -- Do you understand what just happened? In 2011 C++ had a better <em>default</em> time library than almost every language I've ever used. It's so good you can actually write <code>100ms</code> to create a 100 milisecond time point. Yes, and this is valid syntax and is type safe.</li><li><code>&lt;regex&gt;</code> -- What? Yes, C++ has built-in regex now and they're pretty damn good too. They do have one flaw that it's not actually exactly like JavaScript in the "ECMAScript" mode, but it works really well otherwise.</li><li><code>unique_ptr</code> and <code>shared_ptr</code> -- Yes, these implement various kinds of reference counting and enforcing memory ownership. Once these were added people largely stopped doing loads of heap allocation and instead now opt for more on the stack and only these pointers where needed.</li><li><code>&lt;thread&gt;</code> -- Yes! Multi-threading is baked into the language by default. What is this language? The C++ I remember said, "You want threads? Write it yourself dipshit." New C++ is saying, "Yeah! Threads are really nice! Here you go."</li></ul><p>I honestly don't know what happened or why C++11 was such a massive improvement to the language but it reminds me a lot of ES6 in the JavaScript world. Just a complete overhaul of the language's philosophy and style without alienating the previous way of doing things.</p><h2 id="yep-cs-got-thatsort-of">Yep, C++'s Got That...Sort Of</h2><p>More importantly though, C++ is now a more modern language with quite a lot of the things you find in other languages. Here's a list of some common things you may need:</p><ul><li>Need to traverse the filesystem? Check out <a href="https://en.cppreference.com/w/cpp/filesystem">filesystem</a>.</li><li>Need package management? Check out <a href="https://conan.io/">Conan</a>, <a href="https://mesonbuild.com/Wrapdb-projects.html">Meson's WrapDB</a>, and <a href="https://vcpkg.io/en/">vcpkg</a>.</li><li>Need a matrix library? Checkout <a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a>.</li><li>Tensorflow is written in C++, <a href="https://www.tensorflow.org/api_docs/cc">FYI</a>.</li><li>Graphics? I mean do I need to mention that tons of games are written in C++? Well try out <a href="https://www.sfml-dev.org/">SFML</a> for a good start.</li><li>GUI? Ehhhh, yeah you have <a href="https://www.qt.io/">Qt</a> and <a href="https://www.wxwidgets.org/">wxWidgets</a> I guess. There's also <a href="https://github.com/ocornut/imgui">ImGui</a> but my favorite is...</li><li>TUI? Yes, I believe that <a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a> is the best designed GUI library in <em>any</em> langauge. It's that good, but only for Terminal UIs.</li></ul><p>C++ pretty much has everything you might need, but if I'm being honest, it can be hit or miss on quality. I'd say the quality is generally higher than you expect, and I'd say it's higher than what I find in JavaScript and Python. I think "hit or miss quality" is something I could say about every language if we're all being honest here. I mean, do you <em>really</em> think Python's package management is top notch? You do? Why are there like 10 package managers then? Do you <em>really</em> think <em>any</em> GUI API is good? How about filesystem APIs? I mean c'mon, they're all pretty bad, so I'd say C++'s are about the same, and most are slightly better. Things like FTXUI are amazing. The STL is pretty awesome too.</p><h2 id="yeah-yeah-but-you-said-fun">Yeah, Yeah, But You Said "Fun"</h2><p>I can hear you now. "Oh yeah, well Rust has really good web servers...and...and data structures...and..uh uh uh a standard library. Rust is just as fun as C++!" Yes, my point is not that all these new things are what makes C++ fun. The point so far is this:</p><blockquote><p>If you believe that C++ is old and stodgy with tons of angle brackets, pointers, and <code>this-&gt;</code> bullshit you're wrong.</p></blockquote><p>I'm finding that C++ is probably the most capable language in existence right now, by a vast margin. I don't think I've ran into anything I can't do, and not only that but there's multiple options for almost anything I want to do.</p><ul><li>If I want to make a desktop app I can hand code it myself using use something like <a href="https://github.com/zserge/fenster">fenster</a>, or use something like <a href="https://www.sfml-dev.org/">SFML</a>, or use <a href="https://www.qt.io/">QT</a> or directly code it old school style (see fenster for a good guide on doing that).</li><li>If I want to play sounds there's a ton of options from open source to paid to any kind of DIY. I can go grab <a href="">SFML</a> for something quick and dirty, or even pay for <a href="https://www.audiokinetic.com/en/wwise/overview/">wwise</a> to get the best in the industry.</li><li>If I want to do 3D graphics I can use OpenGL, Vulkan, Direct3d, Ogre3d, and so many others. You'll trip over a 3D library in C++ when you walk out your door.</li><li>If I need math there's everything from <a href="https://www.netlib.org/blas/">BLAS</a>, <a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a> to game specific libraries like <a href="https://ggt.sourceforge.net/html/main.html">GMTL</a>.</li><li>Do you need to do AI? Did you know <a href="https://www.tensorflow.org/api_docs/cc">Tensorflow is actually written in C++</a>.</li><li>If there's not a library for it, it's not too difficult to directly hook into almost any OS API and roll my own, and rolling my own gear is <em>fun</em>.</li></ul><p>That's only a few examples, but the most important thing to understand is, C++ doesn't really get in your way. Since you have direct access to almost every library with C or C++ ABI, and also direct access to every OS, you're pretty much able to make anything you need by yourself.</p><h2 id="c-dgaf">C++ DGAF</h2><p>Alright, so you can do anything you want with C++, and the C++ standards committee has corrected course to focus on developer productivity since 2011. How exactly is that fun Mr. Zed A. Shaw?</p><p>C++ is in this weird creative sweet spot where the language and the ecosystem are extremely high quality, but the language isn't popular enough to attract the weirdos who ruin languages.</p><p>You know who I'm talking about. Remember how I said that I left C++ because a bunch of weirdos went insane with design patterns and template metaprogramming? Then I joked that this exact same thing happened to Java with design patterns and insane XML files? Then it happened with Ruby when Ruby on Rails became popular. Then it happened with Python, and JavaScript, and Rust, and pretty much every time a language gets popular there's those insufferable idiots who ruin languages?</p><p>You see, C++ is unfashionable now so those morons don't care about it. C++ is so unfashionable even the <a href="https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/">White House</a> hates it, so all those authoritarian douchebags who run around smashing you over the head with standards documents have fled to languages where they can peddle their bullshit influencer garbage.</p><p>Those idiots are in your mentions, yelling at people, "Why don't you use Rust?!" They're the ones who shame you with, "Why don't you use React?!" They're the ones screaming, "Why are you using so much <code>unsafe</code> in your Rust code?!" They're the ones who scream, "Seriously?! A for-loop in Ruby code! Gah! Amateur!" And thankfully, C++ is not popular enough for those grifters to profit so they mostly ignore it.</p><p>Well, actually the Rust weirdos will bother you but they're usually too busy making the borrow checker happy to actually get anything done so you can ignore them.</p><p>This means that C++ the language--and C++ the community--simply <em>Does Not Give a Fuck</em> what you do. Do you want to write a matrix library? Go for it. Want to make a GUI library? Go for it. Want to write a game engine? <a href="https://www.youtube.com/watch?v=YromjVUQodM">Sit on your couch in the dark and go for it.</a> How about a <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/turings-tarpit">weird game that watches you code and makes fun of you?</a> Seriously, nobody cares and most people think it's hilarious or fun.</p><h2 id="dgaf-is-essential-for-creativity">DGAF is Essential for Creativity</h2><blockquote><p>"But Zed, don't we need a Great Glorious Leader to tell us how best to behave? Won't C++'s lack of an authoritarian Benevolent Dictator for Life leave you without direction? Won't you make...dare I say...<strong>mistakes?!</strong> How can you possibly survive without the BDFL grifters shaming you into working for them for free?"</p></blockquote><p>I mean, I think you are probably not saying this exactly but you're definitely saying it tangentially. This mentality is one of the biggest reasons why other languages are not fun. Other languages are strictly controlled by organizations that actively <a href="https://thephd.dev/i-am-no-longer-speaking-at-rustconf-2023">shit on you if you try to make something cool</a>. If you try to make a competing project to one that a BDFL profits from, then you better be ready for their attack dogs to hound you for years.</p><p>I firmly believe that for creativity to blossom you need to be able to get your idea out without fear of criticism and shame. You have to be able to express yourself and only <em>after</em> you've pulled your idea out of your body kicking and screaming can you step back and look at it critically. However, once you get your idea out there you <em>better</em> be ready to critique it before someone else does. It's this change in modes from "creative freedom from criticism" to "highly focused on quality" that makes for great creative work.</p><p>The best explanation of this concept comes from a painting teacher I used to have. Actually, this was every painting teacher I ever had. They would walk over to student's <em>unfinished</em> work and try to correct it. They'd annoyingly stand in the wrong place--usually their 5' tall eyes vs. my 6'2" tall eyes--and say my drawing is wrong even though their perspective is totally different from mine. Or they'd comment on some aspect of the in-progress work that was difficult to judge because it wasn't shown in the context of the full painting.</p><p>The mistake these teachers made was that they assumed a "mistake" early couldn't be corrected as you go, and would stay a "mistake" in the final work. It's entirely possible that what the student finally creates ends up working just fine when it's finished, but in the middle of the process nothing looks right so trying to "correct" it is pointless.</p><p>This is an important thing about creativity these teachers didn't realize. Everything looks and feels like crap in the "ugly middle" stage. In the beginning things will seem great, but as you work everything gets messy because you're reshaping and moving everything around to reach your final vision. It's more like walking a tightrope than driving a car where you're balancing on a thin line trying to reach the other side, and the only way you learn to walk the tightrope is to fall over and over until you get your balance right.</p><p>A lot of other languages feel like people are constantly trying to push you off the tightrope midway just so they can sell you a car instead.</p><p>C++'s nearly unlimited space to create, combined with the relative lack of shame grifters makes it an incredibly creative experience. If I have an idea I'm only limited by my skills, not by a limitation of the language or some C++ blowhard influencer declaring me <a href="https://www.reddit.com/r/Python/comments/5eljwc/comment/dadkyqf/">unqualified to teach</a> because I don't like his Benevolent Dictator for Life.</p><p>I think <a href="https://cppreference.com/">cppreference.com</a> is the best programming language documentation I've ever used. It has nearly every single thing I believe languages need except for one:</p><ol><li>Every single keyword and library is fully documented with reference material.</li><li>Every one of these also has extensive <em>working</em> examples. I think I've only hit about 5% that didn't actually work as written, and most of those were due to the compiler's implementation not the documentation.</li><li>Every single feature not only indicates <em>the C++ standard version that introduced it</em> but it also links to <em>the exact standard documents and other reference material that standardized it</em>.</li><li>It has a search bar that uses duckduckgo so it actually does find things even if you make spelling mistakes or can't quite remember the exact terminology.</li><li>In addition to fully explained reference material, very good examples, and exact version information, it also has full explanations of important concepts with examples. Take a look at the <a href="https://en.cppreference.com/w/cpp/language/copy_elision">documentation on Copy elision</a>. While still very technical, it is well written and includes many examples to show you what they're talking about.</li></ol><p>The <em>only</em> thing missing from the <a href="https://cppreference.com/">cppreference.com</a> documentation is how to install various compilers on different platforms. I'm kind of mixed on whether they should do this or not. For other languages this kind of documentation is very important, but for C++ I think they most likely would get pushback from various members (<code>*cough*</code> Microsoft) and probably can't. However, given that there's only a few C++ compilers and a few platforms, it's entirely possibly they could add a series of getting started guides.</p><h2 id="its-not-all-puppies-and-butterflies">It's Not All Puppies and Butterflies</h2><p>While I'm having an absolute blast coding C++ I want you to understand that I do <em>not</em> in no way think the language is without flaws. Not even close. My thinking is C++ is now about as good as any other language out there, and that no language is perfect. You'll have annoying things to deal with in C++ just as you have to in any other language, it's just C++'s annoying things are different.</p><p>For example, in C++ it's a real pain in the ass to get a non-microsoft installer working on Windows. <a href="https://learncodethehardway.com/blog/30-just-use-msys2-you-say/">No, MSYS2 does not work. MSYS2 is hot garbage so shut up.</a> I had to create a whole set of <a href="https://git.learnjsthehardway.com/learn-code-the-hard-way/lcthw-windows-installers">PowerShell scripts just to make installing compilers and dev tools easier.</a>. If you think that's terrible, then why are you using Python? If you try to install <em>any</em> Python on Windows you have to deal with the installers not adding Python to the PATH...unless it's a blessed installer from Microsoft or ActiveState. <em>Then</em> the installers are allowed to add Python to the PATH on Windows.</p><p>You see, C++ wins here because I don't have to deal with some arbitrary backroom dealing that gave Microsoft and ActiveState a free pass to violate the apparent "law" that no Python installer shall use the PATH. That alone is a massive win for me. It's not fun to have to argue with idiots who think this situation is normal in Python.</p><p>If you think your language is superior, give me about 1 hour and I'll find enough irritating bullshit to make your language look like a pathetic usability nightmare. The <em>all</em> suck, it's just C++'s suckage doesn't seem to ruin its fun.</p><p>Just a few of the pain points I have with C++ currently are:</p><ul><li><em>+95% of the compiler errors are the worst in the entire industry.</em> I'm not even being hyperbolic here. C++ error messages are just the worst. I think if the standards committee wants to make the biggest impact it'd create a standard for error messages, because the current state of error messages is almost malicious.</li><li><em>The build tools are so bad</em>. I have no idea why C++ build tools are just nightmares to use but the people who make them just make the dumbest decisions. The best one I've found so far is <a href="https://mesonbuild.com/">Meson</a> and it's full of idiotic decisions like ignoring installed package directives to use broken system libraries without telling you. I literally ran into this the day I wrote this essay and it was infuriating.</li><li><em>There's no incentive for compiler manufacturers to follow the standard.</em> I mentioned that Clang as a bug in <code>std::source_location</code> and it's a great example of the kinds of crap you run into sometimes. I really think the standards committee needs to start listing compilers that leave bugs like this unfixed. Just a simple page that lists compilers and how compliant they are, with special callouts for compilers that have obvious bugs would do a lot.</li><li><em>The language is insanely complex because of its history.</em> C++ does have a ton of legacy stuff you have to wade through to find the nuggets. My understanding is it's kind of like C++ is three (or more) languages similar to JavaScript. You have the old style where almost everything is heap allocated and raw pointers are everywhere, then you have the Template Metapocalypse style, then you have post-2011 style where almost everything is on the stack with very few pointers, and I'm seeing a newer style where everyone just uses <code>struct</code> instead of <code>class</code> and doesn't use a lot of inheritance. Navigating all of these "eras" of C++ can be daunting, and there's more than a few code review Youtubers who seem to be stuck in one era or another.</li><li><em>I really hate RAII.</em> I'm finding that there's a <em>ton</em> of situations where RAII gets in the way of real world configuration situations, to the point that this one "feature" of C++ seems more like a glitch than an actually useful thing. In my opinion--given how so many other languages don't have this at all and are just fine--C++ could do well to devise a middle ground between the current RAII and the initialization constructors other languages have.</li></ul><p>But, that's for another essay. For now, I just wanted to express how much fun I'm having doing dumb stuff in C++ and hopefully educate people that C++ isn't the language you think it is. If you ever see a course that tries to shame C++ with a billion angle brackets, just know that the author of that course is a clueless moron who has no idea what they're talking about. I mean, check out this GUI layout code from <a href="">FXTUI</a>:</p><pre><code>  document_ <span>=</span> <span>Renderer</span><span>(</span><span>[</span><span>&amp;</span><span>]</span><span>{</span>
    <span>return</span> <span>hbox</span><span>(</span><span>{</span>
        <span>hflow</span><span>(</span>
          <span>vbox</span><span>(</span>
              <span>text</span><span>(</span><span>format</span><span>(</span><span>"HP: {}"</span><span>,</span> player_<span>.</span>hp<span>)</span><span>)</span> <span>|</span> border<span>,</span>
              <span>text</span><span>(</span>status_text_<span>)</span> <span>|</span> border
              <span>)</span>  <span>|</span> xflex_grow
        <span>)</span><span>,</span>
        <span>separator</span><span>(</span><span>)</span><span>,</span>
        <span>hbox</span><span>(</span>map_view_<span>-&gt;</span><span>Render</span><span>(</span><span>)</span><span>)</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
</code></pre><p>Be honest, if you didn't know this was C++ could you guess what language it was? I rest my case.</p><!-- HTML_TAG_END --><hr><h6>More from Learn Code the Hard Way</h6></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fogus: Things and Stuff of 2024 (250 pts)]]></title>
            <link>https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/</link>
            <guid>42495077</guid>
            <pubDate>Mon, 23 Dec 2024 15:30:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/">https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=42495077">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
                 <h3><a href="https://blog.fogus.me/2024/12/23/the-best-things-and-stuff-of-2024/" title="The best things and stuff of 2024">The best things and stuff of 2024</a></h3>
                 <p><span>Dec 23, 2024 </span></p><p>Great things and people that I discovered, learned, read, met, etc. in 2024.  No particular ordering is implied.  Not everything is new.</p>

<p><em>also: see the lists from <a href="https://blog.fogus.me/2023/12/18/the-best-things-and-stuff-of-2023/">2023</a>, <a href="http://blog.fogus.me/2022/12/13/the-best-things-and-stuff-of-2022/">2022</a>, <a href="https://blog.fogus.me/2021/12/27/the-best-things-and-stuff-of-2021/">2021</a>, <a href="http://blog.fogus.me/2020/12/31/the-best-things-and-stuff-of-2020/">2020</a>, <a href="http://blog.fogus.me/2019/12/30/the-best-things-and-stuff-of-2019/">2019</a>, <a href="http://blog.fogus.me/2019/01/02/the-best-things-and-stuff-of-2018/">2018</a>, <a href="http://blog.fogus.me/2018/01/02/the-best-things-and-stuff-of-2017/">2017</a>, <a href="http://blog.fogus.me/2016/12/29/the-best-things-and-stuff-of-2016/">2016</a>, <a href="http://blog.fogus.me/2015/12/29/the-best-things-and-stuff-of-2015/">2015</a>, <a href="http://blog.fogus.me/2014/12/29/the-best-things-and-stuff-of-2014/">2014</a>, <a href="http://blog.fogus.me/2013/12/27/the-best-things-and-stuff-of-2013/">2013</a>, <a href="http://blog.fogus.me/2012/12/26/the-best-things-and-stuff-of-2012/">2012</a>, <a href="http://blog.fogus.me/2011/12/31/the-best-things-and-stuff-of-2011/">2011</a> and <a href="http://blog.fogus.me/2010/12/30/the-best-things-in-2010/">2010</a></em></p>

<h2>Great posts | articles | talks read/watched</h2>

<ul>
<li><em><a href="https://www.youtube.com/watch?v=lC4YLMLar5I">ELITE: The game that couldn’t be written</a></em> from Alexander the ok – <em>Elite was one of my favorite games on my Commodore 64 1,000,000 years ago and so I’m a sucker for articles on this gem. If you’re interested, also check out <a href="https://elite.bbcelite.com/c64/">the annotated C64 source code</a>.</em> <sup id="fnref:elite"><a href="#fn:elite" rel="footnote">1</a></sup></li>
<li><em><a href="https://thereader.mitpress.mit.edu/the-rich-history-of-ham-radio-culture/">The Rich History of Ham Radio Culture</a></em> by Kristen Haring – <em>I missed out on the Ham radio craze and only recently learned about its rich history. This article is a good overview and starting point if you’re interested in learning too.</em></li>
<li><em><a href="https://www.atlasobscura.com/articles/japans-bathroom-ghosts">Get to Know Your Japanese Bathroom Ghosts</a></em> by Eric Grundhauser – <em>Describes the interesting Japanese cultural folklore around bathroom ghosts.</em></li>
<li><em><a href="https://www.abortretry.fail/p/arrogant-difficult-powerful">The History of WordStar</a></em> by Abort Retry Fail LLC – <em>A great historical article about one of the most influential software suites ever created. Additionally, the comments are a goldmine of additional information and corrections and should not be skipped.</em></li>
<li><em><a href="https://blog.zdsmith.com/series/combinatory-programming.html">Combinatory Programming</a></em> by zdsmith – <em>Describes combinatorial programming using motivated examples — a technique that’s surprisingly scarce in articles about the topic.</em></li>
<li><em><a href="https://www.openculture.com/2014/05/philip-k-dicks-favorite-classical-music.html">Philip K. Dick’s Favorite Classical Music</a></em> by Open Culture – <em>Discusses PKD’s love for classical music and the references to composers and their works in his fiction. The post also, includes an <a href="https://open.spotify.com/playlist/1RsnkX0bQWd2CVWW8jcxBR">11-hour classical music playlist</a> for your listening pleasure.</em></li>
<li><em><a href="https://new.wunderland.com/2024/11/20/goodbye-kory/">Goodbye, Kory</a></em> by Andy Looney – <em>The world lost Kory Heath, a game designer whom I admire immensely. I’ve talked about his magnum opus <a href="https://blog.fogus.me/2014/10/23/games-of-interest-zendo/">Zendo</a> on this blog before and have run numerous play sessions over the years. He was single-handedly responsible for hundreds of hours of enjoyment around my home and within my group of friends. The world is much the poorer without him in it. RIP.</em> <sup id="fnref:chalker"><a href="#fn:chalker" rel="footnote">2</a></sup></li>
</ul>

<h2>Most viewed blog posts by me</h2>

<ul>
<li><em><a href="https://blog.fogus.me/2024/08/19/on-method-values-part-1/">On method values, part 1</a></em> – <em>We released Clojure 1.12.0 this year and so I wanted to write about one of the features that I worked on. Method values are symbolic references to Java methods that can be used in value contexts and the design and implementation of this feature was interesting enough to talk about. The feature has been generally well received by the Clojure community.</em></li>
</ul>

<h2>Favorite technical (and technical-adjacent) books discovered (and read)</h2>

<ul>
<li><em><a href="https://books.google.com/books/about/And_So_FORTH.html?id=iqUZAQAAIAAJ">And so FORTH</a></em> by Timothy Huang – <em>I found this long out of print Forth tome via inter library loan and enjoyed it immensely. It’s a nice blend of the ideas in Brodie’s <a href="https://thinking-forth.sourceforge.net/">Thinking Forth</a> and something like Geere’s <a href="https://archive.org/details/forth-the-next-step-ron-geere">Forth: The Next Step</a>. It was a sad day when I had to return this beauty back to the library because I could have used another read or two at least.</em></li>
<li><em><a href="https://www.amazon.com/BASIC-FORTH-Parallel-S-J-Wainwright/dp/0859341135?tag=fogus-20">BASIC and FORTH in Parallel</a></em> by S.J. Wainwright – <em>This style of book is exactly the kind of book that I would one day like to write. While the specifics of any such book would be different, the central conceit is perfect. That is, this book uses BASIC to create a simple stack machine and Forth interpreter and then presents simple Forth programs exercising them.</em></li>
</ul>

<h2>Favorite non-technical books read</h2>

<ul>
<li><em><a href="https://www.amazon.com/Butchers-Crossing-Review-Books-Classics/dp/1590171985/?tag=fogus-20">Butcher’s Crossing</a></em> by John Williams – <em>Follows Harvard drop-out Will Andrews as he escapes to the American frontier with a wad of cash to find adventure and “an original relation to nature”. Andrews eventually finds Miller who is more than happy to help the young man part with his money in an attempt to find a hidden Colorado valley filled with buffalo that may or may not still (if it ever did) exist. The book follows Miller and Andrews’ (plus a skinner Schneider and driver Hoge) trek throw the frontier and describes in harrowing detail their tribulations. I could not stop reading and finished the book in a weekend. This one demands multiple reads to really absorb the nuance.</em></li>
<li><em><a href="https://www.amazon.com/Spectral-Link-Thomas-Ligotti-ebook/dp/B00LE52256/?tag=fogus-20">The Spectral Link</a></em> by Thomas Ligotti – <em>Contains two stories by Ligotti: “Metaphysica Morum” and “The Small People”. The first is quite different than most of Ligotti’s work that I’ve read so far. It follows a self-described “metaphysical mutant” and blends overtly dark humor with an underlying pessimistic philosophy centered on a theme of euthanasia. “The Small People” is a dream-like exploration of paranoia and isolation. Both stories are a good introduction to the range in Ligotti’s work if you’re interested in checking him out.</em></li>
<li><em><a href="https://www.amazon.com/Corvo-Cult-History-Obsession-2014-10-09/dp/B01FIY47AQ/?tag=fogus-20">The Corvo Cult</a></em> by Robert Scoble – <em>Frederick Rolfe (aka Baron Corvo) was an little-known Edwardian author who is often remembered more for his bombastic personality than his fictional works. This book talks about the rise and growth of the still active “Corvo Cult” — an obscure literary fandom. In many cases, Rolfe’s fervid devotees matched the controversial author in eccentricity, but the true fascination lies in the broad range of people drawn to his eclectic works.</em></li>
</ul>

<h2>Number of books written or published</h2>

<p>0</p>

<h2>Number of programming languages designed</h2>

<p>0.5</p>

<h2>Favorite music discovered</h2>

<ul>
<li><em><a href="https://www.youtube.com/watch?v=o6TI2FfqGJ8&amp;pp=ygUOInRoZSBwYXJhZ29ucyI%3D">The Paragons</a></em> – <em>At some point I became interested in the roots of ska and The Paragons were the best group that I discovered during my explorations.</em></li>
<li><em><a href="https://en.wikipedia.org/wiki/That%27s_All!">That’s All!</a> by Sammy Davis Jr. – *A fantastic performance from a master of the vocal form. The songs are brilliant but the banter between songs will keep me listening into the distant future.</em></li>
</ul>

<h2>Favorite films discovered</h2>

<ul>
<li><em><a href="https://en.wikipedia.org/wiki/Withnail_and_I">Withnail &amp; I</a></em> – <em><a href="http://sam.aaron.name/">Sam Aaron</a> recommended this film to me years ago but I only managed to watch it in 2024. It’s a great example of a dry comedy following a couple of screw-ups and their misadventures.</em></li>
<li><em><a href="https://en.wikipedia.org/wiki/Jodorowsky%27s_Dune">Jodorowsky’s Dune</a></em> – <em>A documentary about the most influential film that never was.</em></li>
<li><em><a href="https://en.wikipedia.org/wiki/Requiem_for_a_Dream">Requiem for a Dream</a></em> – <em>I’m probably the last person in the world to watch this relentless survey of despair. Not for the faint of heart.</em></li>
</ul>

<h2>Favorite podcasts</h2>

<ul>
<li><em><a href="https://www.youtube.com/@WilliamEByrd">Will Radio</a></em> – <em>Will Byrd started the year promising a KiloTube of videos (i.e. 1024 videos) in 2024 and it’s been a blast following along! There’s no one quite like Will and so any chance that I can get to experience more of him I will jump on.</em></li>
<li><em><a href="https://cinepunx.com/podcast-episodes/eros-massacre/">Eros + Massacre</a></em> – <em>Another podcast triumph by Samm Deighan surveying the weird world of psychotronic cinema.</em></li>
</ul>

<h2>Favorite programming languages (or related) I hacked on/with on my own time</h2>

<ul>
<li><em><a href="https://hypercubed.github.io/joy/joy.html">Joy</a></em> – <em>Joy is a mindfrak of a programming language in the concatenative functional language family. The core of Joy is beautiful and among the foundational programming languages in my opinion.</em></li>
<li><em><a href="https://www.forth.com/forth/">Forth</a></em> – <em>Sticking with the concatenative family in 2024, I continued to explore Forth. Interestingly the language is incredibly rich in history and conducive to a wide range of techniques and paradigms. I’m unsure if I’ll ever find the opportunity to use Forth in anger, but I will say that I should come out of my explorations a stronger programmer and program designer.</em></li>
</ul>

<h2>Programming languages used for work-related projects</h2>

<ul>
<li><a href="https://mail.openjdk.org/pipermail/amber-spec-experts/2023-December/003959.html">Java</a> – <em>Working deep in the Clojure compiler means that much of my work in 2024 was in Java.</em></li>
<li><a href="http://www.clojure.org/">Clojure</a> – <em>2024 marks the 15th year<sup id="fnref:15th"><a href="#fn:15th" rel="footnote">3</a></sup> as a full-time Clojure programmer and the 1st year as a full-time Clojure core developer.</em></li>
<li><a href="http://www.clojurescript.org/">ClojureScript</a> – <em>Less-so now than when I was consulting full-time but I occasionally dig into explore the implications of changes to Clojure on CLJS.</em></li>
<li><a href="http://www.datomic.com/">Datalog</a> – <em>The <a href="https://www.datomic.com/">Datomic</a> flavor of Datalog is the flavor of choice for database access, be it in-process or in the cloud. Again, my day-to-day usage is limited, but I have my share of personal databases hosted on Datomic.</em></li>
</ul>

<h2>Programming languages (and related) that I hope to explore more deeply</h2>

<ul>
<li><em><a href="https://hypercubed.github.io/joy/joy.html">Joy</a></em> – <em>There’s a mountain of deep information on Joy that I would like to devour in 2025.<sup id="fnref:joy"><a href="#fn:joy" rel="footnote">4</a></sup></em></li>
<li><em><a href="https://en.wikipedia.org/wiki/Mouse_(programming_language)">Mouse</a></em> – <em>Yet another concatenative language to explore that’s long-dead but still has some lessons to teach one such as myself.</em></li>
<li><em><a href="https://poplogarchive.getpoplog.org/poplog.info.html">POP-11</a></em> – <em>Another dead language that was designed to support AI applications in the 70s and 80s. I love the idea of exploring the language and the suite of applications that built up around it.</em></li>
</ul>

<h2>Favorite papers discovered (and read)</h2>

<ul>
<li><em><a href="https://hypercubed.github.io/joy/html/j05cmp.html">Recursion Theory and Joy</a></em> by Manfred von Thun – <em>Joy’s underlying reliance on combanatory programming manifests deep in the language even to the degree that recursion in the language is implemented in userspace via recursive combinators. This paper describes the “Joy Way” and its relationship to recursion.</em></li>
<li><em><a href="https://www.cs.tufts.edu/~nr/cs257/archive/dominique-clement/applicative.pdf">A Simple Applicative Language: Mini-ML</a> (PDF) by D. Clement and J. Despeyroux and T. Despeyroux and G. Kahn</em> – <em>Presents a beautiful definition of ML language and its compilation to an abstract machine.</em></li>
</ul>

<h2>Still haven’t read…</h2>

<p>I Ching, A Fire upon the Deep, Don Quixote, and <strong><a href="http://blog.fogus.me/2012/09/21/the-amazing-colossal-science-fiction-ketchup/">a boat-load of sci-fi</a></strong></p>

<h2>Favorite technical conference attended</h2>

<ul>
<li><em><a href="https://2024.clojure-conj.org/">Clojure/conj 2024</a></em> – <em>This was the first Clojure conference that I played a somewhat active part in organizing. Let me be clear, my part in the matter was minimal at best, but it did provide me a window into the complexities of organizing a conference. The conference itself was a blast and it was great to meet old and new Clojure friends as well as <a href="https://www.nubank.com/">colleagues</a>!</em></li>
</ul>

<h2>Favorite code read</h2>

<ul>
<li><em><a href="https://buttondown.com/tensegritics-curiosities/archive/restrained-datalog-in-39loc/">Restrained Datalog in 39loc</a></em> by Christophe Grande – <em>I’ve learned over the years that if Christophe writes a technical article then it behooves me to study it deeply. The highlight of the year from Christophe was his simple, yet rich, Datalog implementation in 39 lines of Clojure code. It’s clear that 39 lines of Clojure goes a long way and especially so when a master of the language plays in it.</em></li>
<li><em><a href="https://zserge.com/posts/post-apocalyptic-programming/">Post-Apocalyptic Programming</a></em> by Serge Zaitsev – <em>I love the central conceit of the post, summarized as “what technology could/should we create in the absence of modern computing niceties?” The post starts with a CPU emulator, builds a language for it, and motives its decisions along the way. There’s a brilliant hard science fiction story in here somewhere, I can feel it.</em></li>
<li><em><a href="https://github.com/monsonite/MINT">MINT</a></em> – <em>MINT is highly inspirational to me as a lesson in minimal programming language design. Based on Forth, MINT makes various design decisions and trade-offs to remain small and fast.</em></li>
</ul>

<h2>Life-changing technology “discovered”</h2>

<p>Nothing this year.</p>

<h2>State of plans from 2023</h2>

<ul>
<li><em>Clojure 1.12</em> – Released in <a href="https://clojure.org/news/2024/09/05/clojure-1-12-0">early September</a> and one of the biggest releases in years as far as feature additions go.</li>
<li><em>Go much deeper down the concatenative rabbit-hole</em> – An unmitigated success!</li>
<li><em>Publish even more non-technical writing</em> – My research into the Corvo-related archives stored at Georgetown University was a success. However, my efforts in writing up my findings has stalled.</li>
</ul>

<h2>Plans for 2025</h2>

<ul>
<li><em><a href="https://www.clojure.org/">Clojure 1.13</a></em> – <em>Thinking around the 1.13 release is ongoing and we’d like to get it out sooner rather than later. Stay tuned.</em></li>
<li><em><a href="https://github.com/clojure/core.async">clojure.core.async next</a></em> – <em>We’ve laid the groundwork for a new version of core.async and released it as version 1.7.701. We’d love to leverage JDK 21+ virtual threads to vastly simplify core.async’s implementation and have started along this path in earnest.</em></li>
<li><em><a href="">Simplify my blog</a></em> – <em>I’d love to move away from WordPress in 2025.</em></li>
<li><em><a href="https://gist.github.com/fogus/6d716276678b0698c96dd13e040c71eb">Juxt</a></em> – <em>Juxt is my exploration in functional concatenative language design built on the JVM. It’s not yet clear to me if or when I would ever release this into the wild, but the explorations have been great fun and I’ve used Juxt as a vehicle for finding relevant books and papers.<sup id="fnref:juxtbib"><a href="#fn:juxtbib" rel="footnote">5</a></sup> That said, most of my programming time is spent maintaining and evolving Clojure, but there are rare moments of time that I can spend on Juxt, and I plan to continue to do so in 2025.</em></li>
</ul>

<center><a href="https://blog.fogus.me/wp-content/uploads/2024/12/juxt.jpg"><img decoding="async" src="https://blog.fogus.me/wp-content/uploads/2024/12/juxt-274x300.jpg" alt="" width="274" height="300" srcset="https://blog.fogus.me/wp-content/uploads/2024/12/juxt-274x300.jpg 274w, https://blog.fogus.me/wp-content/uploads/2024/12/juxt-768x840.jpg 768w, https://blog.fogus.me/wp-content/uploads/2024/12/juxt.jpg 816w" sizes="(max-width: 274px) 100vw, 274px"></a></center>

<h2>2024 Tech Radar</h2>

<ul>
<li>try: <a href="https://www.amazon.com/BOOX-Tablet-Go-10-3-ePaper/dp/B0D4DFT3W3/?tag=fogus-20">Boox Go 10.3 tablet</a> – recommended by many colleagues</li>
<li>adopt: <a href="https://apps.apple.com/us/app/blank-spaces-launcher/id1570856853">Blank Spaces app</a> – helps to avoid phone brain-drain </li>
<li>assess: <a href="https://www.typescriptlang.org/">TypeScript</a> – What does it buy <em>me</em> over JS?</li>
<li>hold: <a href="https://ziglang.org/">Zig</a> – This looks like a dead-end for me</li>
<li>stop: <a href="https://www.amazon.com/Joy-Clojure-Michael-Fogus/dp/1617291412/?tag=fogus-20">Joy of Clojure</a> 3rd edition – Another edition is unlikely but hopefully something else may come of this work… this is an evolving situation.</li>
</ul>

<h2>People who inspired me in 2024 (in no particular order)</h2>

<p>Yuki, Keita, Shota, Craig Andera, Carin Meier, Justin Gehtland, Rich Hickey, Nick Bentley, Paula Gearon, Zeeshan Lakhani, Brian Goetz, David Nolen, Jeb Beich, Paul Greenhill, Kristin Looney, Andy Looney, Kurt Christensen, Samm Deighan, David Chelimsky, Chas Emerick, Stacey Abrams, Paul deGrandis, Nada Amin, Michiel Borkent, Alvaro Videla, Slava Pestov, Yoko Harada, Mike Fikes, Dan De Aguiar, Christian Romney, Russ Olsen, Alex Miller, Adam Friedman, Tracie Harris, Alan Kay, Janet A. Carr, Wayne Applewhite, Naoko Higashide, Zach Tellman, Nate Prawdzik, Bobbi Towers, JF Martel, Phil Ford, Nate Hayden, Sean Ross, Tim Good, Chris Redinger, Steve Jensen, Jordan Miller, Tim Ewald, Stu Halloway, Jack Rusher, Michael Berstein, Benoît Fleury, Rafael Ferreira, Robert Randolph, Joe Lane, Renee Lee, Pedro Matiello, Jarrod Taylor, Jaret Binford, Ailan Batista, Matheus Machado, Quentin S. Crisp, John Cooper, Conrad Barski, Amabel Holland, Ben Kamphaus, Barry Malzberg (RIP), Kory Heath (RIP).</p>

<p>Onward to 2025!</p>

<p>:F</p>



            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Keypub.sh – OAuth for the terminal using SSH keys (188 pts)]]></title>
            <link>https://keypub.sh/</link>
            <guid>42494997</guid>
            <pubDate>Mon, 23 Dec 2024 15:19:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://keypub.sh/">https://keypub.sh/</a>, See on <a href="https://news.ycombinator.com/item?id=42494997">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <pre>██   ██ ███████ ██    ██ ██████  ██    ██ ██████
██  ██  ██       ██  ██  ██   ██ ██    ██ ██   ██
█████   █████     ████   ██████  ██    ██ ██████
██  ██  ██         ██    ██      ██    ██ ██   ██
██   ██ ███████    ██    ██       ██████  ██████</pre>
            
            
            
            <p><span>$</span>
                <span>ssh keypub.sh about</span>
            </p>
            
            <ul>
                <li>Verified registry linking SSH public keys to email addresses</li>
                <li>No installation or configuration needed - works with your existing SSH setup</li>
                <li>Privacy-focused: you control what information is public or private</li>
                <li>Simple email verification process</li>
                <li>Free public service</li>
            </ul>
            
            <p><span>$</span>
                <span>ssh keypub.sh register alice@example.com</span>
            </p>
            
            <p>[info] Verification email sent to alice@example.com</p>
            <p>[info] Please check your inbox and run: ssh keypub.sh confirm VERIFICATION-CODE</p>

            <p><span>$</span>
                <span>ssh keypub.sh confirm 346758</span>
            </p>

            <p>[success] Key registered successfully</p>
            <p>[info] Fingerprint: SHA256:llcK7K7Zc6JGHMnrekqr2X/lVkJEoaam4S5eeCPOg0w</p>
            <p>[info] Email: alice@example.com verified</p>
            
            <p><span>$</span>
                <span>ssh keypub.sh help</span>
            </p>
            
            <p>KeyPub.sh uses your SSH public key as your identity. Access the service via SSH commands. Reference other users by email or key fingerprint. For json output append `--json` or `-j`</p>
            
            <div>
                <table>
                    <thead>
                        <tr>
                            <th>Command</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>register &lt;email&gt;</td>
                            <td>Register your SSH key with an email address</td>
                        </tr>
                        <tr>
                            <td>confirm &lt;code&gt;</td>
                            <td>Verify email with code from confirmation mail</td>
                        </tr>
                        <tr>
                            <td>whoami</td>
                            <td>Show your registration details</td>
                        </tr>
                        <tr>
                            <td>allow &lt;email&gt;</td>
                            <td>Grant email visibility to another user</td>
                        </tr>
                        <tr>
                            <td>deny &lt;email&gt;</td>
                            <td>Revoke email visibility from user</td>
                        </tr>
                        <tr>
                            <td>get email &lt;fingerprint&gt;</td>
                            <td>Get email for key (if authorized)</td>
                        </tr>
                        <tr>
                            <td>unregister</td>
                            <td>Remove your key from registry</td>
                        </tr>
                        <tr>
                            <td>help</td>
                            <td>Show this help message</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            
            <p><span>$</span>
                <span>alias kp='ssh keypub.sh'</span>
            </p>
            
            <p><span>$</span>
                <span>kp why</span>
            </p>

            <ul>
                <li>Single verified identity for all SSH-based applications - register once, use everywhere</li>
                <li>Perfect for SSH application developers - no need to build and maintain user verification systems</li>
                <li>Users control their privacy - they decide which applications can access their email</li>
                <li>Lightweight alternative to OAuth for CLI applications - just use SSH keys that users already have</li>
                <li>Central identity system that respects privacy and puts users in control</li>
            </ul>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Commercial tea bags release microplastics, entering human cells (400 pts)]]></title>
            <link>https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html</link>
            <guid>42494746</guid>
            <pubDate>Mon, 23 Dec 2024 14:47:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html">https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html</a>, See on <a href="https://news.ycombinator.com/item?id=42494746">Hacker News</a></p>
Couldn't get https://medicalxpress.com/news/2024-12-commercial-tea-bags-millions-microplastics.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
    </channel>
</rss>