<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 18 Jun 2024 21:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Noam Chomsky has passed away (124 pts)]]></title>
            <link>https://twitter.com/PeoplesMomentum/status/1803142677174911102</link>
            <guid>40721271</guid>
            <pubDate>Tue, 18 Jun 2024 19:30:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/PeoplesMomentum/status/1803142677174911102">https://twitter.com/PeoplesMomentum/status/1803142677174911102</a>, See on <a href="https://news.ycombinator.com/item?id=40721271">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Nature retracts paper that claimed adult stem cell could become any type of cell (109 pts)]]></title>
            <link>https://retractionwatch.com/2024/06/18/nature-retracts-highly-cited-2002-paper-that-claimed-adult-stem-cells-could-become-any-type-of-cell/</link>
            <guid>40720629</guid>
            <pubDate>Tue, 18 Jun 2024 18:23:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://retractionwatch.com/2024/06/18/nature-retracts-highly-cited-2002-paper-that-claimed-adult-stem-cells-could-become-any-type-of-cell/">https://retractionwatch.com/2024/06/18/nature-retracts-highly-cited-2002-paper-that-claimed-adult-stem-cells-could-become-any-type-of-cell/</a>, See on <a href="https://news.ycombinator.com/item?id=40720629">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
		<main id="main">

		
<article id="post-129437">
	
	<!-- .entry-header -->

	<div>
		<div>
<figure><a href="https://i0.wp.com/retractionwatch.com/wp-content/uploads/2024/06/catherine_2.jpg?ssl=1"><img fetchpriority="high" decoding="async" width="240" height="345" src="https://i0.wp.com/retractionwatch.com/wp-content/uploads/2024/06/catherine_2.jpg?resize=240%2C345&amp;ssl=1" alt="" srcset="https://i0.wp.com/retractionwatch.com/wp-content/uploads/2024/06/catherine_2.jpg?w=240&amp;ssl=1 240w, https://i0.wp.com/retractionwatch.com/wp-content/uploads/2024/06/catherine_2.jpg?resize=209%2C300&amp;ssl=1 209w" sizes="(max-width: 240px) 100vw, 240px" data-recalc-dims="1"></a></figure></div>


<p><em>Nature</em> has retracted a 2002 paper from the lab of Catherine Verfaillie purporting to show a type of adult stem cell could, under certain circumstances, “contribute to most, if not all, somatic cell types.”&nbsp;</p>



<p>The retracted article, “<a href="https://www.nature.com/articles/nature00870">Pluripotency of mesenchymal stem cells derived from adult marrow</a>,” has been <a href="https://www.wsj.com/articles/SB1024602878849692040">controversial since its publication</a>. Still, it has been cited nearly 4,500 times, according to Clarivate’s Web of Science – making it by far <a href="https://retractionwatch.com/the-retraction-watch-leaderboard/top-10-most-highly-cited-retracted-papers/">the most-cited retracted paper ever</a>.</p>



<p>In 2007, <em>New Scientist</em> reported on questions about <a href="https://www.newscientist.com/article/mg19325915-200-flawed-stem-cell-data-withdrawn/">data in the <em>Nature</em> paper</a> and <a href="https://www.newscientist.com/article/mg19325964-600-fresh-questions-on-stem-cell-findings/">another</a> of Verfaille’s <a href="https://ashpublications.org/blood/article/98/9/2615/53471/Purification-and-ex-vivo-expansion-of-postnatal">articles in <em>Blood</em></a>. <em>Nature </em><a href="https://www.nature.com/articles/nature05812">published a correction</a> that year.&nbsp;</p>



<p>The errors the authors corrected “do not alter the conclusions of the Article,” they wrote in the notice.&nbsp;</p>



<p>The University of Minnesota-Twin Cities in Minneapolis, where Verfaillie worked when the <em>Nature</em> paper was published, in 2008 found the <em>Blood</em> paper <a href="https://archive.ph/20120712090732/http://jobs.chronicle.com/article/U-of-Minnesota-Panel-Says/41756/">contained falsified images</a>, but Verfaillie was not responsible for the manipulations. <em>Blood</em> <a href="https://ashpublications.org/blood/article/113/10/2370/24360/Reyes-M-Lund-T-Lenvik-T-Aguiar-D-Koodie-L">retracted the article</a> in 2009 at the request of the authors.&nbsp;</p>



<p>Verfaillie moved to KU Leuven, where she is now an <a href="https://www.kuleuven.be/wieiswie/en/person/00048658">emeritus professor</a>. She has not responded to our request for comment.&nbsp;</p>



<p>KU Leuven conducted an investigation of Verfaillie’s work in 2019-2020, after Elisabeth Bik posted questions about the data in her papers, including <a href="https://pubpeer.com/publications/DF95522E3585E37663CAD1972E70BD#">the one from 2002 in <em>Nature</em></a>, on PubPeer. The <a href="https://nieuws.kuleuven.be/en/content/2020/ku-leuven-completes-research-on-possible-breach-of-research-integrity">university found</a> “no breach of research integrity in the publications investigated.”&nbsp;</p>



<p>Bik tweeted about the retraction:&nbsp;</p>



<figure></figure>



<p>The notice mentions two image duplications Bik wrote about on PubPeer. Because the authors could not retrieve the original images, it states:&nbsp;</p>



<blockquote>
<p>the Editors no longer have confidence that the conclusion that multipotent adult progenitor cells (MAPCs) engraft in the bone marrow is supported.</p>



<p>Given the concerns above the Editors no longer have confidence in the reliability of the data reported in this article.</p>
</blockquote>



<p>According to the notice, most of the authors, including Verfaillie, agreed with the retraction. She now has four retractions, by <a href="http://retractiondatabase.org/RetractionSearch.aspx#?auth%3dVerfaillie%252c%2bCatherine%2bM">our count</a>.</p>



<p><em>Like Retraction Watch? You can make a&nbsp;</em><a href="http://paypal.com/us/fundraiser/charity/1909130"><em>tax-deductible contribution to support our work</em></a><em>,&nbsp;subscribe to our free&nbsp;<a href="http://eepurl.com/bNRlUn"><em>daily digest</em></a></em>&nbsp;<em>or&nbsp;<a href="https://retractionwatch.substack.com/">paid weekly update</a></em>,&nbsp;<em>follow us&nbsp;</em><a href="http://twitter.com/RetractionWatch"><em>on Twitter</em></a><em>, like us&nbsp;</em><a href="https://www.facebook.com/pages/Retraction-Watch/119209094864356"><em>on Facebook</em></a><em>, or add us to your&nbsp;</em><a href="https://retractionwatch.com/feed/" target="_blank" rel="noreferrer noopener"><em>RSS reader</em></a><em>. If you find a retraction that’s&nbsp;</em><a href="http://retractiondatabase.org/RetractionSearch.aspx"><em>not in The Retraction Watch Database</em></a><em>, you can&nbsp;</em><a href="https://docs.google.com/forms/d/e/1FAIpQLSeAsw4i5J8M7sOQ9GiG0_dglkim9gdPPba92yZRLfCq4u-o7w/viewform?c=0&amp;w=1"><em>let us know here</em></a><em>. For comments or feedback, email us at team@retractionwatch.com</em>.</p>




	</div><!-- .entry-content -->

	
	<!-- .entry-footer -->

</article><!-- #post-129437 -->

<!-- .comments-area -->

	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
		</main><!-- .site-main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Electricity prices in France turn negative as renewable energy floods the grid (101 pts)]]></title>
            <link>https://fortune.com/2024/06/16/electricity-prices-france-negative-renewable-energy-supply-solar-power-wind-turbines/</link>
            <guid>40720183</guid>
            <pubDate>Tue, 18 Jun 2024 17:31:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fortune.com/2024/06/16/electricity-prices-france-negative-renewable-energy-supply-solar-power-wind-turbines/">https://fortune.com/2024/06/16/electricity-prices-france-negative-renewable-energy-supply-solar-power-wind-turbines/</a>, See on <a href="https://news.ycombinator.com/item?id=40720183">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-cy="article-content" id="article-content"><p>French electricity prices turned negative as a drop in demand and surging renewables output prompted some nuclear reactors to power down.</p><div>



<p>Daily consumption from Thursday through Sunday is seen falling by an average 6 gigawatts, a Bloomberg model shows. Sunny and blustery weather has driven up solar and wind generation, prompting the grid operator to request that <a href="https://fortune.com/company/electricite-de-france/" target="_blank" aria-label="Go to https://fortune.com/company/electricite-de-france/">Electricite de France</a> SA take several nuclear plants offline.</p>



<p>While more clean power is needed across Europe to reach climate goals, soaring renewables output and a lack of battery storage mean reactors sometimes have to be turned off during periods of low demand. It’s becoming increasingly common around weekends in France — which gets about two-thirds of its electricity from its atomic fleet — and also occurs in the Nordic region and Spain.</p>



<p>EDF halted its Golfech 2, Cruas 2 and Tricastin 1 nuclear plants, and plans to halt three others during the weekend. Some renewables producers will also have to curb generation to avoid paying a fee amid negative prices.</p>



<p>French day-ahead power fell to -€5.76 a megawatt-hour, the lowest in four years, in an auction on Epex Spot. Germany’s equivalent contract dropped to €7.64.</p></div><p>Subscribe to the Fortune Next to Lead newsletter to get weekly strategies on how to make it to the corner office. <a href="https://fortune.com/newsletters/next-to-lead?&amp;itm_source=fortune&amp;itm_medium=article_tout&amp;itm_campaign=next_to_lead" target="_self" aria-label="Go to https://fortune.com/newsletters/next-to-lead?&amp;itm_source=fortune&amp;itm_medium=article_tout&amp;itm_campaign=next_to_lead">Sign up for free</a> before it launches on June 24, 2024.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[3D Gaussian Splatting as Markov Chain Monte Carlo (125 pts)]]></title>
            <link>https://ubc-vision.github.io/3dgs-mcmc/</link>
            <guid>40719975</guid>
            <pubDate>Tue, 18 Jun 2024 17:08:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ubc-vision.github.io/3dgs-mcmc/">https://ubc-vision.github.io/3dgs-mcmc/</a>, See on <a href="https://news.ycombinator.com/item?id=40719975">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <p>
        3D Gaussian Splatting as Markov Chain Monte Carlo
      </p>

      <div>
            

            <p><span><sup>1</sup>University of British Columbia</span>
              <span><sup>2</sup>Google Research</span>
              <span><sup>3</sup>Google DeepMind</span>
              <br>
              <span><sup>4</sup>Simon Fraser University</span>
              <span><sup>5</sup>University of Toronto</span>
            </p>
          </div>

      

      

      <div>
        
        
        <p>
          Novel view reconstructions for <strong>(right) our method</strong>
          and <strong>(left) conventional</strong> 3D Gaussian Splatting with
          random initializations. Our method, even with random initialization,
          faithfully reconstructs the scene (e.g.. buildings at the back and
          the ground texture) providing much higher quality renderings.
        </p>
      </div>

      

      <h2>Abstract</h2>
      <p>
          While 3D Gaussian Splatting has recently become popular for neural
          rendering, current methods rely on carefully engineered cloning and
          splitting strategies for placing Gaussians, which can lead to
          poor-quality renderings, and reliance on a good initialization. In
          this work, we rethink the set of 3D Gaussians as a random sample
          drawn from an underlying probability distribution describing the
          physical representation of the scene---in other words, Markov Chain
          Monte Carlo (MCMC) samples. Under this view, we show that the 3D
          Gaussian updates can be converted as Stochastic Gradient Langevin
          Dynamics (SGLD) update by simply introducing noise. We then rewrite
          the densification and pruning strategies in 3D Gaussian Splatting as
          simply a deterministic state transition of MCMC samples, removing
          these heuristics from the framework. To do so, we revise the
          `cloning' of Gaussians into a relocalization scheme that
          approximately preserves sample probability. To encourage efficient
          use of Gaussians, we introduce a regularizer that promotes the
          removal of unused Gaussians. On various standard evaluation scenes,
          we show that our method provides improved rendering quality, easy
          control over the number of Gaussians, and robustness to
          initialization.
        </p>

      

      <h2>More Results</h2>

      <div>
        <table "="">
        <tbody><tr>
          <td colspan="4">
            '10' sequence from OMMO dataset
          </td>
        </tr>
        <tr>
          <td>3DGS-Random</td>
          <td>3DGS</td>
        </tr>
        <tr>
          <td colspan="2">
            <video id="00" width="95%" preload="auto" playsinline="" webkit-playsinline="" loop="" autoplay="" muted="">
              <source src="https://ubc-vision.github.io/3dgs-mcmc/resources/10/10.mp4" type="video/mp4">
            </video>
          </td>
        </tr>
        <tr>
          <td>Ours-Random</td>
          <td>Ours</td>
        </tr>

        </tbody></table><table "="">
        <tbody><tr>
          <td colspan="4">
            'Stump' sequence from the MipNeRF360 dataset (pay attention to the
            details between the leaves)
          </td>
        </tr>
        <tr>
          <td>3DGS-Random</td>
          <td>3DGS</td>
        </tr>
        <tr>
          <td colspan="2">
            <video id="00" width="95%" preload="auto" playsinline="" webkit-playsinline="" loop="" autoplay="" muted="">
              <source src="https://ubc-vision.github.io/3dgs-mcmc/resources/stump/stump.mp4" type="video/mp4">
            </video>
          </td>
        </tr>
        <tr>
          <td>Ours-Random</td>
          <td>Ours</td>
        </tr>
      
    
  

</tbody></table></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sharing new research, models, and datasets from Meta FAIR (156 pts)]]></title>
            <link>https://ai.meta.com/blog/meta-fair-research-new-releases/</link>
            <guid>40719921</guid>
            <pubDate>Tue, 18 Jun 2024 17:01:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.meta.com/blog/meta-fair-research-new-releases/">https://ai.meta.com/blog/meta-fair-research-new-releases/</a>, See on <a href="https://news.ycombinator.com/item?id=40719921">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><b>Takeaways:</b></p><br><ul><li>Today, Meta FAIR is publicly releasing several new research artifacts. Our hope is that the research community can use them to innovate, explore, and discover new ways to apply AI at scale.</li><li>These lines of work build on our key principles of openness, collaboration, excellence, and scale.</li><li>We believe that access to state-of-the-art AI creates opportunities for everyone. That’s why we’re committed to the continued growth and development of an open AI ecosystem.</li></ul><br></div><div><ul><p>RECOMMENDED READS</p><li><a href="https://ai.meta.com/blog/meta-llama-3/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_self" data-lnfb-mode="ie"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg><p>Introducing Meta Llama 3: The most capable openly available LLM to date</p></a></li><li><a href="https://ai.meta.com/blog/openeqa-embodied-question-answering-robotics-ar-glasses/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_self" data-lnfb-mode="ie"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg><p>OpenEQA: From word models to world models</p></a></li><li><a href="https://ai.meta.com/blog/v-jepa-yann-lecun-ai-model-video-joint-embedding-predictive-architecture/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_self" data-lnfb-mode="ie"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg><p>V-JEPA: The next step toward Yann LeCun’s vision of advanced machine intelligence</p></a></li></ul><div><p>For <a href="https://ai.meta.com/blog/fair-10-year-anniversary-open-science-meta/" target="_blank" data-lnfb-mode="ie"><u>more than a decade</u></a>, Meta’s Fundamental AI Research (FAIR) team has focused on advancing the state of the art in AI through open research. As innovation in the field continues to move at a rapid pace, we believe that collaboration with the global AI community is more important than ever. Maintaining an open science approach and sharing our work with the community help us stay true to our goal of building AI systems that work well for everyone and bring the world closer together.</p><p>Today, we’re excited to share some of the most recent FAIR research models with the global community. We’re publicly releasing six research artifacts that focus on themes at the core of our work: innovation, creativity, efficiency, and responsibility. These releases include image-to-text and text-to-music generation models, a multi-token prediction model, and a technique for detecting AI-generated speech. By publicly sharing our early research work, we hope to inspire iterations and ultimately help advance AI in a responsible way. We can’t wait to see what the community builds with these latest releases and continue the important conversations we’re having with the open source community.</p><br></div></div><p>Meta Chameleon</p><div><p>As we shared in our <a href="https://arxiv.org/abs/2405.09818" target="_blank" data-lnfb-mode="ie"><u>research paper</u></a> last month, Meta Chameleon is a family of models that can combine text and images as input and output any combination of text and images with a single unified architecture for both encoding and decoding. While most current late-fusion models use diffusion-based learning, Meta Chameleon uses tokenization for text and images. This enables a more unified approach and makes the model easier to design, maintain, and scale. The possibilities are endless—imagine generating creative captions for images or using a mix of text prompts and images to create an entirely new scene.</p><br></div></div><div><div><p>Today, we’re publicly releasing key components of our Chameleon 7B and 34B models under a research-only license. The models we’re releasing today were safety tuned and support mixed-modal inputs and text-only output to be used for research purposes. While we’ve taken steps to develop these models responsibly, we recognize that risks remain. At this time, we are not releasing the Chameleon image generation model. With the existing models we’re sharing today, we hope to encourage the research community to design new detection and mitigation strategies that will help scale generative modeling research in a responsible way.</p></div><a href="https://ai.meta.com/resources/models-and-libraries/chameleon-downloads/?gk_enable=chameleon_web_flow_is_live" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_7_BH"></a></div><div><div><p>Most modern LLMs have a simple training objective: predicting the next word. While this approach is simple and scalable, it’s also inefficient. It requires several orders of magnitude more text than what children need to learn the same degree of language fluency.</p><p>In April, we proposed a new approach to build better and faster LLMs by using <a href="https://arxiv.org/abs/2404.19737" target="_blank" data-lnfb-mode="ie"><u>multi-token prediction</u></a>. Using this approach, we train language models to predict multiple future words at once—instead of the old one-at-a-time approach. This improves model capabilities and training efficiency while allowing for faster speeds. In the spirit of responsible open science, we’re releasing the pre-trained models for code completion under a non-commercial/research-only license. We hope this enables the research community to investigate our method and the trained models’ behaviors independently.</p><br></div><a href="https://huggingface.co/facebook/multi-token-prediction" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_8_1k"></a><div><p>Meta Joint Audio and Symbolic Conditioning for Temporally Controlled Text-to-Music Generation</p></div><div><p>Generative AI has enabled people to explore their creativity in new ways, such as by turning a text prompt into a clip of music. While existing text-to-music models like <a href="https://ai.meta.com/blog/audiocraft-musicgen-audiogen-encodec-generative-ai-audio/" target="_blank" data-lnfb-mode="ie"><u>MusicGen</u></a> rely mainly on text inputs for music generation, our new model, Meta Joint Audio and Symbolic Conditioning for Temporally Controlled Text-to-Music Generation (JASCO), is capable of accepting various conditioning inputs, such as specific chords or beats, to improve control over generated music outputs. Specifically, we apply information bottleneck layers in conjunction with temporal blurring to extract relevant information with respect to specific controls. This allows the incorporation of both symbolic and audio-based conditions in the same text-to-music generation model.</p><p>Results suggest that JASCO is comparable to the evaluated baselines considering generation quality, while allowing significantly better and more versatile controls over the generated music. Today, we’re releasing the <a href="https://arxiv.org/pdf/2406.10970" target="_blank" data-lnfb-mode="ie"><u>research paper</u></a> together with a sample page. Later this month, we’ll release inference code as part of the <a href="https://github.com/facebookresearch/audiocraft" target="_blank" data-lnfb-mode="ie"><u>AudioCraft</u></a> repository under an MIT license and the pre-trained model under CC-BY-NC. We look forward to releasing the code and models in the future.</p><br></div><p>AudioSeal</p><div><p>Generative AI tools are inspiring people to share their creations with their friends, family, and followers on social media. As with all AI innovations, it’s important that we do our part to help ensure responsible use of these tools. Today, we’re releasing AudioSeal, which we believe is the first audio watermarking technique designed specifically for the localized detection of AI-generated speech, making it possible to pinpoint AI-generated segments within a longer audio snippet. AudioSeal revamps classical audio watermarking by focusing on the detection of AI-generated content rather than steganography. Unlike traditional methods that rely on complex decoding algorithms, AudioSeal’s localized detection approach allows for faster and more efficient detection. This design enhances the detection speed by up to 485 times compared to previous methods, making it highly suitable for large-scale and real-time applications. Our approach achieves state-of-the-art performance in audio watermarking in terms of robustness and imperceptibility.</p><p>AudioSeal is being released under a commercial license. It’s just one of several lines of responsible research we’ve shared to help prevent the misuse of generative AI tools. We include similar watermarks in speech samples generated by <a href="https://ai.meta.com/blog/seamless-communication/" target="_blank" data-lnfb-mode="ie"><u>SeamlessM4T v2</u></a>, our foundational translation model for text and speech, and <a href="https://audiobox.metademolab.com/" target="_blank" data-lnfb-mode="ie"><u>Audiobox</u></a>. We further detail our watermarking approach for <a href="https://arxiv.org/abs/2303.15435" target="_blank" data-lnfb-mode="ie"><u>images</u></a>, <a href="https://ai.meta.com/research/publications/seamless-multilingual-expressive-and-streaming-speech-translation/" target="_blank" data-lnfb-mode="ie"><u>speech</u></a>, and <a href="https://arxiv.org/abs/2308.00113" target="_blank" data-lnfb-mode="ie"><u>text</u></a> models in recent releases.</p><br></div><a href="https://github.com/facebookresearch/audioseal" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_a_0B"><div><p>Get the model and training code</p><svg viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.746 10H26V21.254L24.0301 21.2735L24.0297 13.377L11.4067 26L10 24.5933L22.6039 11.9894L14.746 11.9894V10Z" fill="CurrentColor"></path></svg></div></a><div><p>Partnership supporting the release of the PRISM dataset</p></div><div><p>Getting feedback from a diverse group of people is important to improving LLMs, however there have been open questions in the research community about methods, domains, and objectives around the feedback process. We worked with our <a href="https://hannahkirk.github.io/prism-alignment/" target="_blank" data-lnfb-mode="ie"><u>external partners</u></a> to navigate these questions supporting the release of the PRISM dataset, which maps the sociodemographics and stated preferences of 1,500 diverse participants from 75 countries. The dataset maps each person’s preferences and fine-grained feedback to 8,011 live conversations with 21 different LLMs.</p><p>Meta advised on the compilation of the PRISM dataset by our external partners, by focusing conversations that center subjective and multicultural perspectives on topics where there is likely to be interpersonal and cross-cultural disagreement. Our paper demonstrates the usefulness of PRISM via three case studies of dialogue diversity, preference diversity, and welfare outcomes, showing that it matters which humans set alignment norms. While we hope this will serve as a community resource, we also want it to inspire broader participation in AI development and foster a more inclusive approach to technology design.</p></div><a href="https://huggingface.co/datasets/HannahRoseKirk/prism-alignment" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_b_pj"><div><p>Get the dataset from our external partners</p><svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M21.9502 15.4645L13.7579 23.6569C13.3674 24.0475 12.7342 24.0475 12.3437 23.6569C11.9532 23.2664 11.9532 22.6333 12.3437 22.2427L20.536 14.0503H15.8792C15.3269 14.0503 14.8792 13.6026 14.8792 13.0503C14.8792 12.498 15.3269 12.0503 15.8792 12.0503H22.9502C23.5025 12.0503 23.9502 12.498 23.9502 13.0503V20.1214C23.9502 20.6737 23.5025 21.1214 22.9502 21.1214C22.398 21.1214 21.9502 20.6737 21.9502 20.1214V15.4645Z" fill="CurrentColor"></path></svg></div></a><a href="https://arxiv.org/abs/2404.16019" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_c_HN"><div><p>Read the technical report</p><svg viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.746 10H26V21.254L24.0301 21.2735L24.0297 13.377L11.4067 26L10 24.5933L22.6039 11.9894L14.746 11.9894V10Z" fill="CurrentColor"></path></svg></div></a></div><div><div><p>Measuring and improving geographical disparities in text-to-image generation systems</p></div><div><p>It’s important that text-to-image models work well for everyone and reflect the geographical and cultural diversity of the world. Improving these models requires new tools that enable researchers to gain a better understanding of where existing models may fall short. In order to address this goal, we’re detailing our recent research efforts and progress:</p><br><ul><li>We developed <a href="https://arxiv.org/pdf/2308.06198" target="_blank" data-lnfb-mode="ie"><u>automatic indicators</u></a> called “DIG In” to evaluate potential geographical disparities in text-to-image models. In addition, to understand how people in different regions vary in their perceptions of geographic representation, we conducted a large-scale annotation study. We collected more than 65,000 annotations and more than 20 survey responses per example covering appeal, similarity, consistency, and shared <a href="https://arxiv.org/abs/2405.04457" target="_blank" data-lnfb-mode="ie"><u>recommendations</u></a> for improved automatic and human evaluations of text-to-image models.</li></ul><br><ul><li>Through this work, we learned that people utilize specific components within an image when perceiving geographic representation, rather than viewing the entire image holistically. As part of our collaborative approach at Meta FAIR, we mentored a team of graduate students at UMass Amherst on a <a href="https://ai.meta.com/research/publications/decomposed-evaluations-of-geographic-disparities-in-text-to-image-models/" target="_blank" data-lnfb-mode="ie"><u>follow-up evaluation</u></a> that decomposes the previously introduced automatic indicators into foregrounded concepts and background representations.</li></ul><br><ul><li>Informed by the DIG In measurement work, we also explored methods of improving the diversity of outputs from text-to-image models. In this direction, we introduced the <a href="https://arxiv.org/abs/2406.04551" target="_blank" data-lnfb-mode="ie"><u>contextualized Vendi Score guidance</u></a>, which extends our previous <a href="https://arxiv.org/abs/2310.00158" target="_blank" data-lnfb-mode="ie"><u>feedback guidance work</u></a> and uses an inference-time intervention that guides state-of-the-art text-to-image latent diffusion models to increase the representation diversity of the generated samples while maintaining or improving the image quality and prompt-generation consistency.</li></ul></div><a href="https://github.com/facebookresearch/DIG-In" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_d_ij"></a></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Billard – Generate music from ball collisions in 2D space (120 pts)]]></title>
            <link>https://billard.medusis.com/</link>
            <guid>40719782</guid>
            <pubDate>Tue, 18 Jun 2024 16:45:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://billard.medusis.com/">https://billard.medusis.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40719782">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="commands_container">
					<p><label>Gravity</label>
						

						<label>Speed</label>
						

						<label>Count</label>
						

						<label>Root</label>
						

						<label>Mode</label>
						

						<label>MIDI </label>
						

						<label>Duration</label>
						

						</p>
					<p>&nbsp;Ball</p>
					<p><label>Ball state</label>
						
						<label>Ball size</label>
						
						<label>Delete ball</label>
						

						</p>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Is ChatGPT Doing and Why Does It Work? (2023) (112 pts)]]></title>
            <link>https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/</link>
            <guid>40718566</guid>
            <pubDate>Tue, 18 Jun 2024 14:58:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/">https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/</a>, See on <a href="https://news.ycombinator.com/item?id=40718566">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            

<p><img title="What Is ChatGPT Doing ... and Why Does It Work?" src="https://content.wolfram.com/sites/43/2023/02/hero3-chat-exposition.png" width="620" height="205"></p>
<h2 id="its-just-adding-one-word-at-a-time">It’s Just Adding One Word at a Time</h2>
<p>That <a href="https://chat.openai.com/" target="_blank" rel="noopener">ChatGPT</a> can automatically generate something that reads even superficially like human-written text is remarkable, and unexpected. But how does it do it? And why does it work? My purpose here is to give a rough outline of what’s going on inside ChatGPT—and then to explore why it is that it can do so well in producing what we might consider to be meaningful text. I should say at the outset that I’m going to focus on the big picture of what’s going on—and while I’ll mention some engineering details, I won’t get deeply into them. (And the essence of what I’ll say applies just as well to other current “large language models” [LLMs] as to ChatGPT.)</p>
<p>The first thing to explain is that what ChatGPT is always fundamentally trying to do is to produce a “reasonable continuation” of whatever text it’s got so far, where by “reasonable” we mean “what one might expect someone to write after seeing what people have written on billions of webpages, etc.”<span id="more-45835"></span></p>
<p>So let’s say we’ve got the text “<em>The best thing about AI is its ability to</em>”. Imagine scanning billions of pages of human-written text (say on the web and in digitized books) and finding all instances of this text—then seeing what word comes next what fraction of the time. ChatGPT effectively does something like this, except that (as I’ll explain) it doesn’t look at literal text; it looks for things that in a certain sense “match in meaning”. But the end result is that it produces a ranked list of words that might follow, together with “probabilities”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img1.png" alt="" title="" width="453" height="137"> </p>
</div>
<p>And the remarkable thing is that when ChatGPT does something like write an essay what it’s essentially doing is just asking over and over again “given the text so far, what should the next word be?”—and each time adding a word. (More precisely, as I’ll explain, it’s adding a “token”, which could be just a part of a word, which is why it can sometimes “make up new words”.)</p>
<p>But, OK, at each step it gets a list of words with probabilities. But which one should it actually pick to add to the essay (or whatever) that it’s writing? One might think it should be the “highest-ranked” word (i.e. the one to which the highest “probability” was assigned). But this is where a bit of voodoo begins to creep in. Because for some reason—that maybe one day we’ll have a scientific-style understanding of—if we always pick the highest-ranked word, we’ll typically get a very “flat” essay, that never seems to “show any creativity” (and even sometimes repeats word for word). But if sometimes (at random) we pick lower-ranked words, we get a “more interesting” essay.</p>
<p>The fact that there’s randomness here means that if we use the same prompt multiple times, we’re likely to get different essays each time. And, in keeping with the idea of voodoo, there’s a particular so-called “temperature” parameter that determines how often lower-ranked words will be used, and for essay generation, it turns out that a “temperature” of 0.8 seems best. (It’s worth emphasizing that there’s no “theory” being used here; it’s just a matter of what’s been found to work in practice. And for example the concept of “temperature” is there because exponential distributions <a href="https://writings.stephenwolfram.com/2023/02/computational-foundations-for-the-second-law-of-thermodynamics/#textbook-thermodynamics">familiar from statistical physics</a> happen to be being used, but there’s no “physical” connection—at least so far as we know.)</p>
<p>Before we go on I should explain that for purposes of exposition I’m mostly not going to use the <a href="https://openai.com/blog/chatgpt/" target="_blank">full system that’s in ChatGPT</a>; instead I’ll usually work with a simpler <a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/">GPT-2 system</a>, which has the nice feature that it’s small enough to be able to run on a standard desktop computer. And so for essentially everything I show I’ll be able to include explicit <a href="https://www.wolfram.com/language/">Wolfram Language</a> code that you can immediately run on your computer. (Click any picture here to copy the code behind it.)</p>
<p>For example, here’s how to get the table of probabilities above. First, we have to <a href="https://resources.wolframcloud.com/NeuralNetRepository">retrieve the underlying “language model” neural net</a>:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img2.png" alt="" title="" width="466" height="123"> </p>
</div>
<p>Later on, we’ll look inside this neural net, and talk about how it works. But for now we can just apply this “net model” as a black box to our text so far, and ask for the top 5 words by probability that the model says should follow: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img3.png" alt="" title="" width="557" height="70"> </p>
</div>
<p>This takes that result and makes it into an explicit formatted “<a href="https://www.wolfram.com/language/elementary-introduction/2nd-ed/45-datasets.html">dataset</a>”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img4.png" alt="" title="" width="390" height="195"> </p>
</div>
<p>Here’s what happens if one repeatedly “applies the model”—at each step adding the word that has the top probability (specified in this code as the “decision” from the model):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img5.png" alt="" title="" width="487" height="238"> </p>
</div>
<p>What happens if one goes on longer? In this (“zero temperature”) case what comes out soon gets rather confused and repetitive:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img6.png" alt="" title="" width="558" height="110"> </p>
</div>
<p>But what if instead of always picking the “top” word one sometimes randomly picks “non-top” words (with the “randomness” corresponding to “temperature” 0.8)? Again one can build up text: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img7.png" alt="" title="" width="481" height="182"> </p>
</div>
<p>And every time one does this, different random choices will be made, and the text will be different—as in these 5 examples:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img8.png" alt="" title="" width="489" height="134"> </p>
</div>
<p>It’s worth pointing out that even at the first step there are a lot of possible “next words” to choose from (at temperature 0.8), though their probabilities fall off quite quickly (and, yes, the straight line on this log-log plot corresponds to an <em>n</em><sup>–1</sup> <a href="https://www.wolframscience.com/nks/notes-8-8--zipfs-law/">“power-law” decay that’s very characteristic of the general statistics of language</a>): </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img10.png" alt="" title="" width="461" height="279"> </p>
</div>
<p>So what happens if one goes on longer? Here’s a random example. It’s better than the top-word (zero temperature) case, but still at best a bit weird:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img11A.png" alt="" title="" width="617" height="115"> </p>
</div>
<p>This was done with the <a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/">simplest GPT-2 model</a> (from 2019). With the newer and <a href="https://platform.openai.com/docs/model-index-for-researchers" target="_blank" rel="noopener">bigger GPT-3 models</a> the results are better. Here’s the top-word (zero temperature) text produced with the same “prompt”, but with the biggest GPT-3 model:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img12.png" alt="" title="" width="542" height="134"> </p>
</div>
<p>And here’s a random example at “temperature 0.8”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img13.png" alt="" title="" width="602" height="86"> </p>
</div>
<h2 id="where-do-the-probabilities-come-from">Where Do the Probabilities Come From?</h2>
<p>OK, so ChatGPT always picks its next word based on probabilities. But where do those probabilities come from? Let’s start with a simpler problem. Let’s consider generating English text one letter (rather than word) at a time. How can we work out what the probability for each letter should be?</p>
<p>A very minimal thing we could do is just take a sample of English text, and calculate how often different letters occur in it. So, for example, <a href="https://www.wolfram.com/language/elementary-introduction/2nd-ed/34-associations.html#i-8">this counts letters in the Wikipedia article</a> on “cats”: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img14-edit.png" alt="" title="" width="493" height="117"> </p>
</div>
<p>And this does the same thing for “dogs”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img15.png" alt="" title="" width="479" height="121"> </p>
</div>
<p>The results are similar, but not the same (“o” is no doubt more common in the “dogs” article because, after all, it occurs in the word “dog” itself). Still, if we take a large enough sample of English text we can expect to eventually get at least fairly consistent results: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img16.png" alt="" title="" width="544" height="147"> </p>
</div>
<p>Here’s a sample of what we get if we just generate a sequence of letters with these probabilities:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img17.png" alt="" title="" width="620" height="38"> </p>
</div>
<p>We can break this into “words” by adding in spaces as if they were letters with a certain probability:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img18.png" alt="" title="" width="522" height="38"> </p>
</div>
<p>We can do a slightly better job of making “words” by forcing the distribution of “word lengths” to agree with what it is in English:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img19.png" alt="" title="" width="464" height="35"> </p>
</div>
<p>We didn’t happen to get any “actual words” here, but the results are looking slightly better. To go further, though, we need to do more than just pick each letter separately at random. And, for example, we know that if we have a “q”, the next letter basically has to be “u”. </p>
<p>Here’s a plot of the probabilities for letters on their own:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img20.png" alt="" title="" width="338" height="210"> </p>
</div>
<p>And here’s a plot that shows the probabilities of pairs of letters (“2-grams”) in typical English text. The possible first letters are shown across the page, the second letters down the page: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img21.png" alt="" title="" width="260" height="263"> </p>
</div>
<p>And we see here, for example, that the “q” column is blank (zero probability) except on the “u” row. OK, so now instead of generating our “words” a single letter at a time, let’s generate them looking at two letters at a time, using these “2-gram” probabilities. Here’s a sample of the result—which happens to include a few “actual words”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img22.png" alt="" title="" width="500" height="38"> </p>
</div>
<p>With sufficiently much English text we can get pretty good estimates not just for probabilities of single letters or pairs of letters (2-grams), but also for longer runs of letters. And if we generate “random words” with progressively longer <em>n</em>-gram probabilities, we see that they get progressively “more realistic”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img23.png" alt="" title="" width="586" height="158"> </p>
</div>
<p>But let’s now assume—more or less as ChatGPT does—that we’re dealing with whole words, not letters. There are about 40,000 <a href="https://reference.wolfram.com/language/ref/WordList.html">reasonably commonly used words in English</a>. And by looking at a large corpus of English text (say a few million books, with altogether a few hundred billion words), we can get an <a href="https://reference.wolfram.com/language/ref/WordFrequencyData.html">estimate of how common each word is</a>. And using this we can start generating “sentences”, in which each word is independently picked at random, with the same probability that it appears in the corpus. Here’s a sample of what we get:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img24.png" alt="" title="" width="494" height="38"> </p>
</div>
<p>Not surprisingly, this is nonsense. So how can we do better? Just like with letters, we can start taking into account not just probabilities for single words but probabilities for pairs or longer <em>n</em>-grams of words. Doing this for pairs, here are 5 examples of what we get, in all cases starting from the word “cat”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img25.png" alt="" title="" width="453" height="134"> </p>
</div>
<p>It’s getting slightly more “sensible looking”. And we might imagine that if we were able to use sufficiently long <em>n</em>-grams we’d basically “get a ChatGPT”—in the sense that we’d get something that would generate essay-length sequences of words with the “correct overall essay probabilities”. But here’s the problem: there just isn’t even close to enough English text that’s ever been written to be able to deduce those probabilities. </p>
<p>In a <a href="https://commoncrawl.org/" target="_blank" rel="noopener">crawl of the web</a> there might be a few hundred billion words; in books that have been digitized there might be another hundred billion words. But with 40,000 common words, even the number of possible 2-grams is already 1.6 billion—and the number of possible 3-grams is 60 trillion. So there’s no way we can estimate the probabilities even for all of these from text that’s out there. And by the time we get to “essay fragments” of 20 words, the number of possibilities is larger than the number of particles in the universe, so in a sense they could never all be written down.</p>
<p>So what can we do? The big idea is to make a model that lets us estimate the probabilities with which sequences should occur—even though we’ve never explicitly seen those sequences in the corpus of text we’ve looked at. And at the core of ChatGPT is precisely a so-called “large language model” (LLM) that’s been built to do a good job of estimating those probabilities. </p>
<h2 id="what-is-a-model">What Is a Model?</h2>
<p>Say you want to know (as <a href="https://archive.org/details/bub_gb_49d42xp-USMC/page/404/mode/2up" target="_blank" rel="noopener">Galileo did back in the late 1500s</a>) how long it’s going to take a cannon ball dropped from each floor of the Tower of Pisa to hit the ground. Well, you could just measure it in each case and make a table of the results. Or you could do what is the essence of theoretical science: make a model that gives some kind of procedure for computing the answer rather than just measuring and remembering each case.</p>
<p>Let’s imagine we have (somewhat idealized) data for how long the cannon ball takes to fall from various floors:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img26.png" alt="" title="" width="274" height="149"> </p>
</div>
<p>How do we figure out how long it’s going to take to fall from a floor we don’t explicitly have data about? In this particular case, we can use known laws of physics to work it out. But say all we’ve got is the data, and we don’t know what underlying laws govern it. Then we might make a mathematical guess, like that perhaps we should use a straight line as a model:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img27.png" alt="" title="" width="275" height="149"> </p>
</div>
<p>We could pick different straight lines. But this is the one that’s on average closest to the data we’re given. And from this straight line we can estimate the time to fall for any floor.</p>
<p>How did we know to try using a straight line here? At some level we didn’t. It’s just something that’s mathematically simple, and we’re used to the fact that lots of data we measure turns out to be well fit by mathematically simple things. We could try something mathematically more complicated—say <em>a</em> + <em>b</em> <em>x</em> + <em>c</em> <em>x</em><sup>2</sup>—and then in this case we do better:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img29.png" alt="" title="" width="286" height="154"> </p>
</div>
<p>Things can go quite wrong, though. Like here’s <a href="https://reference.wolfram.com/language/ref/FindFit.html">the best we can do</a> with <em>a</em> + <em>b</em>/<em>x</em> + <em>c</em> sin(<em>x</em>):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img33.png" alt="" title="" width="285" height="154"> </p>
</div>
<p>It is worth understanding that there’s never a “model-less model”. Any model you use has some particular underlying structure—then a certain set of “knobs you can turn” (i.e. parameters you can set) to fit your data. And in the case of ChatGPT, lots of such “knobs” are used—actually, 175 billion of them.</p>
<p>But the remarkable thing is that the underlying structure of ChatGPT—with “just” that many parameters—is sufficient to make a model that computes next-word probabilities “well enough” to give us reasonable essay-length pieces of text.</p>
<h2 id="models-for-human-like-tasks">Models for Human-Like Tasks</h2>
<p>The example we gave above involves making a model for numerical data that essentially comes from simple physics—where we’ve known for several centuries that “simple mathematics applies”. But for ChatGPT we have to make a model of human-language text of the kind produced by a human brain. And for something like that we don’t (at least yet) have anything like “simple mathematics”. So what might a model of it be like?</p>
<p>Before we talk about language, let’s talk about another human-like task: recognizing images. And as a simple example of this, let’s consider images of digits (and, yes, this is a <a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/050b1a0a-f43a-4c28-b7e0-72607a918467/">classic machine learning example</a>):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img34.png" alt="" title="" width="397" height="56"> </p>
</div>
<p>One thing we could do is get a bunch of sample images for each digit:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img35.png" alt="" title="" width="312" height="56"> </p>
</div>
<p>Then to find out if an image we’re given as input corresponds to a particular digit we could just do an explicit pixel-by-pixel comparison with the samples we have. But as humans we certainly seem to do something better—because we can still recognize digits, even when they’re for example handwritten, and have all sorts of modifications and distortions:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/03/sw021423img36-4.png" alt="" title="" width="541" height="74"> </p>
</div>
<p>When we made a model for our numerical data above, we were able to take a numerical value <em>x</em> that we were given, and just compute <em>a + b x</em> for particular <em>a</em> and <em>b</em>. So if we treat the gray-level value of each pixel here as some variable <em>x<sub>i</sub></em> is there some function of all those variables that—when evaluated—tells us what digit the image is of? It turns out that it’s possible to construct such a function. Not surprisingly, it’s not particularly simple, though. And a typical example might involve perhaps half a million mathematical operations. </p>
<p>But the end result is that if we feed the collection of pixel values for an image into this function, out will come the number specifying which digit we have an image of. Later, we’ll talk about how such a function can be constructed, and the idea of neural nets. But for now let’s treat the function as black box, where we feed in images of, say, handwritten digits (as arrays of pixel values) and we get out the numbers these correspond to:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img38.png" alt="" title="" width="565" height="58"> </p>
</div>
<p>But what’s really going on here? Let’s say we progressively blur a digit. For a little while our function still “recognizes” it, here as a “2”. But soon it “loses it”, and starts giving the “wrong” result:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img39.png" alt="" title="" width="528" height="58"> </p>
</div>
<p>But why do we say it’s the “wrong” result? In this case, we know we got all the images by blurring a “2”. But if our goal is to produce a model of what humans can do in recognizing images, the real question to ask is what a human would have done if presented with one of those blurred images, without knowing where it came from.</p>
<p>And we have a “good model” if the results we get from our function typically agree with what a human would say. And the nontrivial scientific fact is that for an image-recognition task like this we now basically know how to construct functions that do this.</p>
<p>Can we “mathematically prove” that they work? Well, no. Because to do that we’d have to have a mathematical theory of what we humans are doing. Take the “2” image and change a few pixels. We might imagine that with only a few pixels “out of place” we should still consider the image a “2”. But how far should that go? It’s a question of <a href="https://www.wolframscience.com/nks/chap-10--processes-of-perception-and-analysis#sect-10-7--visual-perception">human visual perception</a>. And, yes, the answer would no doubt be different for bees or octopuses—and potentially <a href="https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/#alien-views-of-the-ruliad">utterly different for putative aliens</a>.</p>
<h2 id="neural-nets">Neural Nets</h2>
<p>OK, so how do our typical models for tasks like <a href="https://writings.stephenwolfram.com/2015/05/wolfram-language-artificial-intelligence-the-image-identification-project/">image recognition</a> actually work? The most popular—and successful—current approach uses <a href="https://reference.wolfram.com/language/guide/NeuralNetworks.html">neural nets</a>. Invented—in a form remarkably close to their use today—<a href="https://www.wolframscience.com/nks/notes-10-12--history-of-ideas-about-thinking/">in the 1940s</a>, neural nets can be thought of as simple idealizations of how <a href="https://www.wolframscience.com/nks/notes-10-12--the-brain/">brains seem to work</a>. </p>
<p>In human brains there are about 100 billion neurons (nerve cells), each capable of producing an electrical pulse up to perhaps a thousand times a second. The neurons are connected in a complicated net, with each neuron having tree-like branches allowing it to pass electrical signals to perhaps thousands of other neurons. And in a rough approximation, whether any given neuron produces an electrical pulse at a given moment depends on what pulses it’s received from other neurons—with different connections contributing with different “weights”.</p>
<p>When we “see an image” what’s happening is that when photons of light from the image fall on (“photoreceptor”) cells at the back of our eyes they produce electrical signals in nerve cells. These nerve cells are connected to other nerve cells, and eventually the signals go through a whole sequence of layers of neurons. And it’s in this process that we “recognize” the image, eventually “forming the thought” that we’re “seeing a 2” (and maybe in the end doing something like saying the word “two” out loud). </p>
<p>The “black-box” function from the previous section is a “mathematicized” version of such a neural net. It happens to have 11 layers (though only 4 “core layers”):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img40A.png" alt="" title="" width="381" height="212"> </p>
</div>
<p>There’s nothing particularly “theoretically derived” about this neural net; it’s just something that—<a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/LeNet-Trained-on-MNIST-Data/">back in 1998—was constructed as a piece of engineering</a>, and found to work. (Of course, that’s not much different from how we might describe our brains as having been produced through the process of biological evolution.) </p>
<p>OK, but how does a neural net like this “recognize things”? The key is the <a href="https://www.wolframscience.com/nks/chap-6--starting-from-randomness#sect-6-7--the-notion-of-attractors">notion of attractors</a>. Imagine we’ve got handwritten images of 1’s and 2’s:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img41.png" alt="" title="" width="244" height="244"> </p>
</div>
<p>We somehow want all the 1’s to “be attracted to one place”, and all the 2’s to “be attracted to another place”. Or, put a different way, if an image is somehow “<a href="https://www.wolframscience.com/nks/notes-10-12--memory-analogs-with-numerical-data/">closer to being a 1</a>” than to being a 2, we want it to end up in the “1 place” and vice versa. </p>
<p>As a straightforward analogy, let’s say we have certain positions in the plane, indicated by dots (in a real-life setting they might be positions of coffee shops). Then we might imagine that starting from any point on the plane we’d always want to end up at the closest dot (i.e. we’d always go to the closest coffee shop). We can represent this by dividing the plane into regions (“attractor basins”) separated by idealized “watersheds”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img42.png" alt="" title="" width="204" height="205"> </p>
</div>
<p>We can think of this as implementing a kind of “recognition task” in which we’re not doing something like identifying what digit a given image “looks most like”—but rather we’re just, quite directly, seeing what dot a given point is closest to. (The “Voronoi diagram” setup we’re showing here separates points in 2D Euclidean space; the digit recognition task can be thought of as doing something very similar—but in a 784-dimensional space formed from the gray levels of all the pixels in each image.)</p>
<p>So how do we make a neural net “do a recognition task”? Let’s consider this very simple case:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img43.png" alt="" title="" width="128" height="128"> </p>
</div>
<p>Our goal is to take an “input” corresponding to a position {<em>x</em>,<em>y</em>}—and then to “recognize” it as whichever of the three points it’s closest to. Or, in other words, we want the neural net to compute a function of {<em>x</em>,<em>y</em>} like:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img44.png" alt="" title="" width="570" height="217"> </p>
</div>
<p>So how do we do this with a neural net? Ultimately a neural net is a connected collection of idealized “neurons”—usually arranged in layers—with a simple example being:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img45.png" alt="" title="" width="199" height="241"> </p>
</div>
<p>Each “neuron” is effectively set up to evaluate a simple numerical function. And to “use” the network, we simply feed numbers (like our coordinates <em>x</em> and <em>y</em>) in at the top, then have neurons on each layer “evaluate their functions” and feed the results forward through the network—eventually producing the final result at the bottom:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img46.png" alt="" title="" width="253" height="244"> </p>
</div>
<p>In the traditional (biologically inspired) setup each neuron effectively has a certain set of “incoming connections” from the neurons on the previous layer, with each connection being assigned a certain “weight” (which can be a positive or negative number). The value of a given neuron is determined by multiplying the values of “previous neurons” by their corresponding weights, then adding these up and adding a constant—and finally applying a “thresholding” (or “activation”) function. In mathematical terms, if a neuron has inputs <nobr><em>x</em> = {<em>x</em><sub>1</sub>, <em>x</em><sub>2</sub> …}</nobr> then we compute <em>f</em>[<em>w</em> . <em>x</em> + <em>b</em>], where the weights <em>w</em> and constant <em>b</em> are generally chosen differently for each neuron in the network; the function <em>f </em>is usually the same.</p>
<p>Computing <em>w</em> . <em>x</em> + <em>b</em> is just a matter of matrix multiplication and addition. The “activation function” <em>f</em> introduces nonlinearity (and ultimately is what leads to nontrivial behavior). Various activation functions commonly get used; here we’ll just use <tt><a href="http://reference.wolfram.com/language/ref/Ramp.html">Ramp</a></tt> (or ReLU):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img48.png" alt="" title="" width="567" height="77"> </p>
</div>
<p>For each task we want the neural net to perform (or, equivalently, for each overall function we want it to evaluate) we’ll have different choices of weights. (And—as we’ll discuss later—these weights are normally determined by “training” the neural net using machine learning from examples of the outputs we want.)</p>
<p>Ultimately, every neural net just corresponds to some overall mathematical function—though it may be messy to write out. For the example above, it would be:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img49.png" alt="" title="" width="542" height="115"> </p>
</div>
<p>The neural net of ChatGPT also just corresponds to a mathematical function like this—but effectively with billions of terms. </p>
<p>But let’s go back to individual neurons. Here are some examples of the functions a neuron with two inputs (representing coordinates <em>x</em> and <em>y</em>) can compute with various choices of weights and constants (and <tt><a href="https://reference.wolfram.com/language/ref/Ramp.html">Ramp</a></tt> as activation function):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img50.png" alt="" title="" width="499" height="115"> </p>
</div>
<p>But what about the larger network from above? Well, here’s what it computes:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img51.png" alt="" title="" width="472" height="206"> </p>
</div>
<p>It’s not quite “right”, but it’s close to the “nearest point” function we showed above.</p>
<p>Let’s see what happens with some other neural nets. In each case, as we’ll explain later, we’re using machine learning to find the best choice of weights. Then we’re showing here what the neural net with those weights computes:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img52.png" alt="" title="" width="599" height="415"> </p>
</div>
<p>Bigger networks generally do better at approximating the function we’re aiming for. And in the “middle of each attractor basin” we typically get exactly the answer we want. But <a href="https://www.wolframscience.com/nks/notes-10-12--memory-analogs-with-numerical-data/">at the boundaries</a>—where the neural net “has a hard time making up its mind”—things can be messier. </p>
<p>With this simple mathematical-style “recognition task” it’s clear what the “right answer” is. But in the problem of recognizing handwritten digits, it’s not so clear. What if someone wrote a “2” so badly it looked like a “7”, etc.? Still, we can ask how a neural net distinguishes digits—and this gives an indication:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img53.png" alt="" title="" width="311" height="311"> </p>
</div>
<p>Can we say “mathematically” how the network makes its distinctions? Not really. It’s just “doing what the neural net does”. But it turns out that that normally seems to agree fairly well with the distinctions we humans make. </p>
<p>Let’s take a more elaborate example. Let’s say we have images of cats and dogs. And we have a <a href="https://writings.stephenwolfram.com/2015/05/wolfram-language-artificial-intelligence-the-image-identification-project/">neural net that’s been trained to distinguish them</a>. Here’s what it might do on some examples: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img54.png" alt="" title="" width="354" height="356"> </p>
</div>
<p>Now it’s even less clear what the “right answer” is. What about a dog dressed in a cat suit? Etc. Whatever input it’s given the neural net will generate an answer, and in a way reasonably consistent with how humans might. As I’ve said above, that’s not a fact we can “derive from first principles”. It’s just something that’s empirically been found to be true, at least in certain domains. But it’s a key reason why neural nets are useful: that they somehow capture a “human-like” way of doing things.</p>
<p>Show yourself a picture of a cat, and ask “Why is that a cat?”. Maybe you’d start saying “Well, I see its pointy ears, etc.” But it’s not very easy to explain how you recognized the image as a cat. It’s just that somehow your brain figured that out. But for a brain there’s no way (at least yet) to “go inside” and see how it figured it out. What about for an (artificial) neural net? Well, it’s straightforward to see what each “neuron” does when you show a picture of a cat. But even to get a basic visualization is usually very difficult. </p>
<p>In the final net that we used for the “nearest point” problem above there are 17 neurons. In the net for recognizing handwritten digits there are 2190. And in the net we’re using to recognize cats and dogs there are 60,650. Normally it would be pretty difficult to visualize what amounts to 60,650-dimensional space. But because this is a network set up to deal with images, many of its layers of neurons are organized into arrays, like the arrays of pixels it’s looking at.</p>
<p>And if we take a typical cat image</p>
<p><img src="https://content.wolfram.com/sites/43/2023/02/sw021423img55.png" alt="Cat" title="Cat" width="123/2" height="123/2"></p>
<p>then we can represent the states of neurons at the first layer by a collection of derived images—many of which we can readily interpret as being things like “the cat without its background”, or “the outline of the cat”:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img56.png" alt="" title="" width="599" height="355"> </p>
</div>
<p>By the 10th layer it’s harder to interpret what’s going on:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img57.png" alt="" title="" width="598" height="295"> </p>
</div>
<p>But in general we might say that the neural net is “picking out certain features” (maybe pointy ears are among them), and using these to determine what the image is of. But are those features ones for which we have names—like “pointy ears”? Mostly not. </p>
<p>Are our brains using similar features? Mostly we don’t know. But it’s notable that the first few layers of a neural net like the one we’re showing here seem to pick out aspects of images (like edges of objects) that seem to be similar to ones we know are picked out by the first level of visual processing in brains.</p>
<p>But let’s say we want a “theory of cat recognition” in neural nets. We can say: “Look, this particular net does it”—and immediately that gives us some sense of “how hard a problem” it is (and, for example, how many neurons or layers might be needed). But at least as of now we don’t have a way to “give a narrative description” of what the network is doing. And maybe that’s because it truly is computationally irreducible, and there’s no general way to find what it does except by explicitly tracing each step. Or maybe it’s just that we haven’t “figured out the science”, and identified the “natural laws” that allow us to summarize what’s going on.</p>
<p>We’ll encounter the same kinds of issues when we talk about generating language with ChatGPT. And again it’s not clear whether there are ways to “summarize what it’s doing”. But the richness and detail of language (and our experience with it) may allow us to get further than with images.</p>
<h2 id="machine-learning-and-the-training-of-neural-nets">Machine Learning, and the Training of Neural Nets</h2>
<p>We’ve been talking so far about neural nets that “already know” how to do particular tasks. But what makes neural nets so useful (presumably also in brains) is that not only can they in principle do all sorts of tasks, but they can be incrementally “trained from examples” to do those tasks.</p>
<p>When we make a neural net to distinguish cats from dogs we don’t effectively have to write a program that (say) explicitly finds whiskers; instead we just show lots of examples of what’s a cat and what’s a dog, and then have the network “machine learn” from these how to distinguish them.</p>
<p>And the point is that the trained network “generalizes” from the particular examples it’s shown. Just as we’ve seen above, it isn’t simply that the network recognizes the particular pixel pattern of an example cat image it was shown; rather it’s that the neural net somehow manages to distinguish images on the basis of what we consider to be some kind of “general catness”. </p>
<p>So how does neural net training actually work? Essentially what we’re always trying to do is to find weights that make the neural net successfully reproduce the examples we’ve given. And then we’re relying on the neural net to “interpolate” (or “generalize”) “between” these examples in a “reasonable” way.</p>
<p>Let’s look at a problem even simpler than the nearest-point one above. Let’s just try to get a neural net to learn the function: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img58.png" alt="" title="" width="203" height="124"> </p>
</div>
<p>For this task, we’ll need a network that has just one input and one output, like: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img59.png" alt="" title="" width="141" height="170"> </p>
</div>
<p>But what weights, etc. should we be using? With every possible set of weights the neural net will compute some function. And, for example, here’s what it does with a few randomly chosen sets of weights: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img60.png" alt="" title="" width="597" height="209"> </p>
</div>
<p>And, yes, we can plainly see that in none of these cases does it get even close to reproducing the function we want. So how do we find weights that will reproduce the function?</p>
<p>The basic idea is to supply lots of “input → output” examples to “learn from”—and then to try to find weights that will reproduce these examples. Here’s the result of doing that with progressively more examples:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img61.png" alt="" title="" width="597" height="259"> </p>
</div>
<p>At each stage in this “training” the weights in the network are progressively adjusted—and we see that eventually we get a network that successfully reproduces the function we want. So how do we adjust the weights? The basic idea is at each stage to see “how far away we are” from getting the function we want—and then to update the weights in such a way as to get closer. </p>
<p>To find out “how far away we are” we compute what’s usually called a “loss function” (or sometimes “cost function”). Here we’re using a simple (L2) loss function that’s just the sum of the squares of the differences between the values we get, and the true values. And what we see is that as our training process progresses, the loss function progressively decreases (following a certain “learning curve” that’s different for different tasks)—until we reach a point where the network (at least to a good approximation) successfully reproduces the function we want:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img62.png" alt="" title="" width="581" height="200"> </p>
</div>
<p>Alright, so the last essential piece to explain is how the weights are adjusted to reduce the loss function. As we’ve said, the loss function gives us a “distance” between the values we’ve got, and the true values. But the “values we’ve got” are determined at each stage by the current version of neural net—and by the weights in it. But now imagine that the weights are variables—say <em>w<sub>i</sub></em>. We want to find out how to adjust the values of these variables to minimize the loss that depends on them.</p>
<p>For example, imagine (in an incredible simplification of typical neural nets used in practice) that we have just two weights <em>w</em><sub>1</sub>  and <em>w</em><sub>2</sub>. Then we might have a loss that as a function of <em>w</em><sub>1</sub> and <em>w</em><sub>2</sub> looks like this:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img68.png" alt="" title="" width="236" height="112"> </p>
</div>
<p>Numerical analysis provides a variety of techniques for finding the minimum in cases like this. But a typical approach is just to progressively follow the path of steepest descent from whatever previous <em>w</em><sub>1</sub>, <em>w</em><sub>2</sub> we had:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img71.png" alt="" title="" width="403" height="197"> </p>
</div>
<p>Like water flowing down a mountain, all that’s guaranteed is that this procedure will end up at some local minimum of the surface (“a mountain lake”); it might well not reach the ultimate global minimum.</p>
<p>It’s not obvious that it would be feasible to find the path of the steepest descent on the “weight landscape”. But calculus comes to the rescue. As we mentioned above, one can always think of a neural net as computing a mathematical function—that depends on its inputs, and its weights. But now consider differentiating with respect to these weights. It turns out that the chain rule of calculus in effect lets us “unravel” the operations done by successive layers in the neural net. And the result is that we can—at least in some local approximation—“invert” the operation of the neural net, and progressively find weights that minimize the loss associated with the output.</p>
<p>The picture above shows the kind of minimization we might need to do in the unrealistically simple case of just 2 weights. But it turns out that even with many more weights (ChatGPT uses 175 billion) it’s still possible to do the minimization, at least to some level of approximation. And in fact the big breakthrough in “deep learning” that occurred around 2011 was associated with the discovery that in some sense it can be easier to do (at least approximate) minimization when there are lots of weights involved than when there are fairly few.</p>
<p>In other words—somewhat counterintuitively—it can be easier to solve more complicated problems with neural nets than simpler ones. And the rough reason for this seems to be that when one has a lot of “weight variables” one has a high-dimensional space with “lots of different directions” that can lead one to the minimum—whereas with fewer variables it’s easier to end up getting stuck in a local minimum (“mountain lake”) from which there’s no “direction to get out”.</p>
<p>It’s worth pointing out that in typical cases there are many different collections of weights that will all give neural nets that have pretty much the same performance. And usually in practical neural net training there are lots of random choices made—that lead to “different-but-equivalent solutions”, like these:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img72.png" alt="" title="" width="571" height="82"> </p>
</div>
<p>But each such “different solution” will have at least slightly different behavior. And if we ask, say, for an “extrapolation” outside the region where we gave training examples, we can get dramatically different results:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img73.png" alt="" title="" width="571" height="83"> </p>
</div>
<p>But which of these is “right”? There’s really no way to say. They’re all “consistent with the observed data”. But they all correspond to different “innate” ways to “think about” what to do “outside the box”. And some may seem “more reasonable” to us humans than others. </p>
<h2 id="the-practice-and-lore-of-neural-net-training">The Practice and Lore of Neural Net Training</h2>
<p>Particularly over the past decade, there’ve been many advances in the art of training neural nets. And, yes, it is basically an art. Sometimes—especially in retrospect—one can see at least a glimmer of a “scientific explanation” for something that’s being done. But mostly things have been discovered by trial and error, adding ideas and tricks that have progressively built a significant lore about how to work with neural nets.</p>
<p>There are several key parts. First, there’s the matter of what architecture of neural net one should use for a particular task. Then there’s the critical issue of how one’s going to get the data on which to train the neural net. And increasingly one isn’t dealing with training a net from scratch: instead a new net can either directly incorporate another already-trained net, or at least can use that net to generate more training examples for itself.</p>
<p>One might have thought that for every particular kind of task one would need a different architecture of neural net. But what’s been found is that the same architecture often seems to work even for apparently quite different tasks. At some level this reminds one of the <a href="https://www.wolframscience.com/nks/chap-11--the-notion-of-computation#sect-11-3--the-phenomenon-of-universality">idea of universal computation</a> (and my <a href="https://www.wolframscience.com/nks/chap-12--the-principle-of-computational-equivalence/">Principle of Computational Equivalence</a>), but, as I’ll discuss later, I think it’s more a reflection of the fact that the tasks we’re typically trying to get neural nets to do are “human-like” ones—and neural nets can capture quite general “human-like processes”.</p>
<p>In earlier days of neural nets, there tended to be the idea that one should “make the neural net do as little as possible”. For example, in <a href="https://reference.wolfram.com/language/ref/SpeechRecognize.html">converting speech to text</a> it was thought that one should first analyze the audio of the speech, break it into phonemes, etc. But what was found is that—at least for “human-like tasks”—it’s usually better just to try to train the neural net on the “end-to-end problem”, letting it “discover” the necessary intermediate features, encodings, etc. for itself.</p>
<p>There was also the idea that one should introduce complicated individual components into the neural net, to let it in effect “explicitly implement particular algorithmic ideas”. But once again, this has mostly turned out not to be worthwhile; instead, it’s better just to deal with very simple components and let them “organize themselves” (albeit usually in ways we can’t understand) to achieve (presumably) the equivalent of those algorithmic ideas. </p>
<p>That’s not to say that there are no “structuring ideas” that are relevant for neural nets. Thus, for example, having <a href="https://reference.wolfram.com/language/ref/ConvolutionLayer.html">2D arrays of neurons with local connections</a> seems at least very useful in the early stages of processing images. And having patterns of connectivity that concentrate on “looking back in sequences” seems useful—as we’ll see later—in dealing with things like human language, for example in ChatGPT. </p>
<p>But an important feature of neural nets is that—like computers in general—they’re ultimately just dealing with data. And current neural nets—with current approaches to neural net training—<a href="https://reference.wolfram.com/language/guide/NetEncoderDecoder.html">specifically deal with arrays of numbers</a>. But in the course of processing, those arrays can be completely rearranged and reshaped. And as an example, <a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/LeNet-Trained-on-MNIST-Data/">the network we used for identifying digits above</a> starts with a 2D “image-like” array, quickly “thickening” to many channels, but then <a href="https://reference.wolfram.com/language/ref/AggregationLayer.html">“concentrating down” into a 1D array</a> that will ultimately contain elements representing the different possible output digits:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img74.png" alt="" title="" width="287" height="182"> </p>
</div>
<p>But, OK, how can one tell how big a neural net one will need for a particular task? It’s something of an art. At some level the key thing is to know “how hard the task is”. But for human-like tasks that’s typically very hard to estimate. Yes, there may be a systematic way to do the task very “mechanically” by computer. But it’s hard to know if there are what one might think of as tricks or shortcuts that allow one to do the task at least at a “human-like level” vastly more easily. It might take <a href="https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/">enumerating a giant game tree</a> to “mechanically” play a certain game; but there might be a much easier (“heuristic”) way to achieve “human-level play”.</p>
<p>When one’s dealing with tiny neural nets and simple tasks one can sometimes explicitly see that one “can’t get there from here”. For example, here’s the best one seems to be able to do on the task from the previous section with a few small neural nets: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img75.png" alt="" title="" width="498" height="395"> </p>
</div>
<p>And what we see is that if the net is too small, it just can’t reproduce the function we want. But above some size, it has no problem—at least if one trains it for long enough, with enough examples. And, by the way, these pictures illustrate a piece of neural net lore: that one can often get away with a smaller network if there’s a “squeeze” in the middle that forces everything to go through a smaller intermediate number of neurons. (It’s also worth mentioning that “no-intermediate-layer”—or so-called “<a href="https://en.wikipedia.org/wiki/Perceptron" target="_blank" rel="noopener">perceptron</a>”—networks can only learn essentially linear functions—but as soon as there’s even one intermediate layer it’s <a href="https://en.wikipedia.org/wiki/Universal_approximation_theorem" target="_blank" rel="noopener">always in principle possible</a> to approximate any function arbitrarily well, at least if one has enough neurons, though to make it feasibly trainable one typically has some kind of <a href="https://reference.wolfram.com/language/ref/BatchNormalizationLayer.html">regularization or normalization</a>.)</p>
<p>OK, so let’s say one’s settled on a certain neural net architecture. Now there’s the issue of getting data to train the network with. And many of the practical challenges around neural nets—and machine learning in general—center on acquiring or preparing the necessary training data. In many cases (“supervised learning”) one wants to get explicit examples of inputs and the outputs one is expecting from them. Thus, for example, one might want images tagged by what’s in them, or some other attribute. And maybe one will have to explicitly go through—usually with great effort—and do the tagging. But very often it turns out to be possible to piggyback on something that’s already been done, or use it as some kind of proxy. And so, for example, one might use alt tags that have been provided for images on the web. Or, in a different domain, one might use closed captions that have been created for videos. Or—for language translation training—one might use parallel versions of webpages or other documents that exist in different languages.</p>
<p>How much data do you need to show a neural net to train it for a particular task? Again, it’s hard to estimate from first principles. Certainly the requirements can be dramatically reduced by using “transfer learning” to “transfer in” things like lists of important features that have already been learned in another network. But generally neural nets need to “see a lot of examples” to train well. And at least for some tasks it’s an important piece of neural net lore that the examples can be incredibly repetitive. And indeed it’s a standard strategy to just show a neural net all the examples one has, over and over again. In each of these “training rounds” (or “epochs”) the neural net will be in at least a slightly different state, and somehow “reminding it” of a particular example is useful in getting it to “remember that example”. (And, yes, perhaps this is analogous to the usefulness of repetition in human memorization.)</p>
<p>But often just repeating the same example over and over again isn’t enough. It’s also necessary to show the neural net variations of the example. And it’s a feature of neural net lore that those “data augmentation” variations don’t have to be sophisticated to be useful. Just slightly modifying images with basic image processing can make them essentially “as good as new” for neural net training. And, similarly, when one’s run out of actual video, etc. for training self-driving cars, one can go on and just get data from running simulations in a model videogame-like environment without all the detail of actual real-world scenes.</p>
<p>How about something like ChatGPT? Well, it has the nice feature that it can do “unsupervised learning”, making it much easier to get it examples to train from. Recall that the basic task for ChatGPT is to figure out how to continue a piece of text that it’s been given. So to get it “training examples” all one has to do is get a piece of text, and mask out the end of it, and then use this as the “input to train from”—with the “output” being the complete, unmasked piece of text. We’ll discuss this more later, but the main point is that—unlike, say, for learning what’s in images—there’s no “explicit tagging” needed; ChatGPT can in effect just learn directly from whatever examples of text it’s given.</p>
<p>OK, so what about the actual learning process in a neural net? In the end it’s all about determining what weights will best capture the training examples that have been given. And there are all sorts of detailed choices and “hyperparameter settings” (so called because the weights can be thought of as “parameters”) that can be used to tweak how this is done. There are different <a href="https://reference.wolfram.com/language/ref/CrossEntropyLossLayer.html">choices of loss function</a> (sum of squares, sum of absolute values, etc.). There are different ways to do loss minimization (how far in weight space to move at each step, etc.). And then there are questions like how big a “batch” of examples to show to get each successive estimate of the loss one’s trying to minimize. And, yes, one can apply machine learning (as we do, for example, in Wolfram Language) to automate machine learning—and to automatically set things like hyperparameters.</p>
<p>But in the end the whole process of training can be characterized by seeing how the loss progressively decreases (as in this <a href="https://reference.wolfram.com/language/ref/NetTrain.html">Wolfram Language progress monitor for a small training</a>):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img76.png" alt="" title="" width="261" height="327"> </p>
</div>
<p>And what one typically sees is that the loss decreases for a while, but eventually flattens out at some constant value. If that value is sufficiently small, then the training can be considered successful; otherwise it’s probably a sign one should try changing the network architecture. </p>
<p>Can one tell how long it should take for the “learning curve” to flatten out? Like for so many other things, there seem to be approximate <a href="https://arxiv.org/pdf/2001.08361.pdf" target="_blank" rel="noopener">power-law scaling relationships</a> that depend on the size of neural net and amount of data one’s using. But the general conclusion is that training a neural net is hard—and takes a lot of computational effort. And as a practical matter, the vast majority of that effort is spent doing operations on arrays of numbers, which is what GPUs are good at—which is why neural net training is typically limited by the availability of GPUs. </p>
<p>In the future, will there be fundamentally better ways to train neural nets—or generally do what neural nets do? Almost certainly, I think. The fundamental idea of neural nets is to create a flexible “computing fabric” out of a large number of simple (essentially identical) components—and to have this “fabric” be one that can be incrementally modified to learn from examples. In current neural nets, one’s essentially using the ideas of calculus—applied to real numbers—to do that incremental modification. But it’s increasingly clear that having high-precision numbers doesn’t matter; 8 bits or less might be enough even with current methods. </p>
<p>With <a href="https://www.wolframscience.com/nks/chap-2--the-crucial-experiment#sect-2-1--how-do-simple-programs-behave">computational systems like cellular automata</a> that basically operate in parallel on many individual bits it’s never been clear <a href="https://content.wolfram.com/sw-publications/2020/07/approaches-complexity-engineering.pdf" target="_blank" rel="noopener">how to do this kind of incremental modification</a>, but there’s no reason to think it isn’t possible. And in fact, much like with the “<a href="https://en.wikipedia.org/wiki/AlexNet" target="_blank" rel="noopener">deep-learning breakthrough of 2012</a>” it may be that such incremental modification will effectively be easier in more complicated cases than in simple ones.</p>
<p>Neural nets—perhaps a bit like brains—are set up to have an essentially fixed network of neurons, with what’s modified being the strength (“weight”) of connections between them. (Perhaps in at least young brains significant numbers of wholly new connections can also grow.) But while this might be a convenient setup for biology, it’s not at all clear that it’s even close to the best way to achieve the functionality we need. And something that involves the equivalent of progressive network rewriting (perhaps reminiscent of our <a href="https://www.wolframphysics.org/" target="_blank" rel="noopener">Physics Project</a>) might well ultimately be better.</p>
<p>But even within the framework of existing neural nets there’s currently a crucial limitation: neural net training as it’s now done is fundamentally sequential, with the effects of each batch of examples being propagated back to update the weights. And indeed with current computer hardware—even taking into account GPUs—most of a neural net is “idle” most of the time during training, with just one part at a time being updated. And in a sense this is because our current computers tend to have memory that is separate from their CPUs (or GPUs). But in brains it’s presumably different—with every “memory element” (i.e. neuron) also being a potentially active computational element. And if we could set up our future computer hardware this way it might become possible to do training much more efficiently.</p>
<h2 id="surely-a-network-thats-big-enough-can-do-anything">“Surely a Network That’s Big Enough Can Do Anything!” </h2>
<p>The capabilities of something like ChatGPT seem so impressive that one might imagine that if one could just “keep going” and train larger and larger neural networks, then they’d eventually be able to “do everything”. And if one’s concerned with things that are readily accessible to immediate human thinking, it’s quite possible that this is the case. But the lesson of the past several hundred years of science is that there are things that can be figured out by formal processes, but aren’t readily accessible to immediate human thinking.</p>
<p>Nontrivial mathematics is one big example. But the general case is really computation. And ultimately the issue is the phenomenon of <a href="https://www.wolframscience.com/nks/chap-12--the-principle-of-computational-equivalence#sect-12-6--computational-irreducibility">computational irreducibility</a>. There are some computations which one might think would take many steps to do, but which can in fact be “reduced” to something quite immediate. But the discovery of computational irreducibility implies that this doesn’t always work. And instead there are processes—probably like the one below—where to work out what happens inevitably requires essentially tracing each computational step:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img77.png" alt="" title="" width="553" height="279"> </p>
</div>
<p>The kinds of things that we normally do with our brains are presumably specifically chosen to avoid computational irreducibility. It takes special effort to do math in one’s brain. And it’s in practice largely impossible to “think through” the steps in the operation of any nontrivial program just in one’s brain. </p>
<p>But of course for that we have computers. And with computers we can readily do long, computationally irreducible things. And the key point is that there’s in general no shortcut for these. </p>
<p>Yes, we could memorize lots of specific examples of what happens in some particular computational system. And maybe we could even see some (“computationally reducible”) patterns that would allow us to do a little generalization. But the point is that computational irreducibility means that we can never guarantee that the unexpected won’t happen—and it’s only by explicitly doing the computation that you can tell what actually happens in any particular case.</p>
<p>And in the end there’s just a fundamental tension between learnability and computational irreducibility. Learning involves in effect <a href="https://www.wolframscience.com/nks/chap-10--processes-of-perception-and-analysis/">compressing data by leveraging regularities</a>. But computational irreducibility implies that ultimately there’s a limit to what regularities there may be.</p>
<p>As a practical matter, one can imagine building little computational devices—like cellular automata or Turing machines—into trainable systems like neural nets. And indeed such devices can serve as good “tools” for the neural net—like <a href="https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/">Wolfram|Alpha can be a good tool for ChatGPT</a>. But computational irreducibility implies that one can’t expect to “get inside” those devices and have them learn.</p>
<p>Or put another way, there’s an ultimate tradeoff between capability and trainability: the more you want a system to make “true use” of its computational capabilities, the more it’s going to show computational irreducibility, and the less it’s going to be trainable. And the more it’s fundamentally trainable, the less it’s going to be able to do sophisticated computation.</p>
<p>(For ChatGPT as it currently is, the situation is actually much more extreme, because the neural net used to generate each token of output is a pure “feed-forward” network, without loops, and therefore has no ability to do any kind of computation with nontrivial “control flow”.)</p>
<p>Of course, one might wonder whether it’s actually important to be able to do irreducible computations. And indeed for much of human history it wasn’t particularly important. But our modern technological world has been built on engineering that makes use of at least mathematical computations—and increasingly also more general computations. And if we look at the natural world, it’s <a href="https://www.wolframscience.com/nks/chap-8--implications-for-everyday-systems/">full of irreducible computation</a>—that we’re slowly understanding how to emulate and use for our technological purposes. </p>
<p>Yes, a neural net can certainly notice the kinds of regularities in the natural world that we might also readily notice with “unaided human thinking”. But if we want to work out things that are in the purview of mathematical or computational science the neural net isn’t going to be able to do it—unless it effectively “uses as a tool” an “ordinary” computational system.</p>
<p>But there’s something potentially confusing about all of this. In the past there were plenty of tasks—including writing essays—that we’ve assumed were somehow “fundamentally too hard” for computers. And now that we see them done by the likes of ChatGPT we tend to suddenly think that computers must have become vastly more powerful—in particular surpassing things they were already basically able to do (like progressively computing the behavior of computational systems like cellular automata). </p>
<p>But this isn’t the right conclusion to draw. Computationally irreducible processes are still computationally irreducible, and are still fundamentally hard for computers—even if computers can readily compute their individual steps. And instead what we should conclude is that tasks—like writing essays—that we humans could do, but we didn’t think computers could do, are actually in some sense computationally easier than we thought. </p>
<p>In other words, the reason a neural net can be successful in writing an essay is because writing an essay turns out to be a “computationally shallower” problem than we thought. And in a sense this takes us closer to “having a theory” of how we humans manage to do things like writing essays, or in general deal with language. </p>
<p>If you had a big enough neural net then, yes, you might be able to do whatever humans can readily do. But you wouldn’t capture what the natural world in general can do—or that the tools that we’ve fashioned from the natural world can do. And it’s the use of those tools—both practical and conceptual—that have allowed us in recent centuries to transcend the boundaries of what’s accessible to “pure unaided human thought”, and capture for human purposes more of what’s out there in the physical and computational universe.</p>
<h2 id="the-concept-of-embeddings">The Concept of Embeddings</h2>
<p>Neural nets—at least as they’re currently set up—are fundamentally based on numbers. So if we’re going to to use them to work on something like text we’ll need a way to <a href="https://reference.wolfram.com/language/guide/NetEncoderDecoder.html">represent our text with numbers</a>. And certainly we could start (essentially as ChatGPT does) by just assigning a number to every word in the dictionary. But there’s an important idea—that’s for example central to ChatGPT—that goes beyond that. And it’s the idea of “embeddings”. One can think of an embedding as a way to try to represent the “essence” of something by an array of numbers—with the property that “nearby things” are represented by nearby numbers.</p>
<p>And so, for example, we can think of a word embedding as trying to <a href="https://reference.wolfram.com/language/ref/FeatureSpacePlot.html">lay out words in a kind of “meaning space”</a> in which words that are somehow “nearby in meaning” appear nearby in the embedding. The actual embeddings that are used—say in ChatGPT—tend to involve large lists of numbers. But if we project down to 2D, we can show examples of how words are laid out by the embedding: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img78.png" alt="" title="" width="432" height="430"> </p>
</div>
<p>And, yes, what we see does remarkably well in capturing typical everyday impressions. But how can we construct such an embedding? Roughly the idea is to look at large amounts of text (here 5 billion words from the web) and then see “how similar” the “environments” are in which different words appear. So, for example, “alligator” and “crocodile” will often appear almost interchangeably in otherwise similar sentences, and that means they’ll be placed nearby in the embedding. But “turnip” and “eagle” won’t tend to appear in otherwise similar sentences, so they’ll be placed far apart in the embedding.</p>
<p>But how does one actually implement something like this using neural nets? Let’s start by talking about embeddings not for words, but for images. We want to find some way to characterize images by lists of numbers in such a way that “images we consider similar” are assigned similar lists of numbers. </p>
<p>How do we tell if we should “consider images similar”? Well, if our images are, say, of handwritten digits we might “consider two images similar” if they are of the same digit. Earlier we discussed a neural net that was trained to recognize handwritten digits. And we can think of this neural net as being set up so that in its final output it puts images into 10 different bins, one for each digit.</p>
<p>But what if we “intercept” what’s going on inside the neural net before the final “it’s a ‘4’” decision is made? We might expect that inside the neural net there are numbers that characterize images as being “mostly 4-like but a bit 2-like” or some such. And the idea is to pick up such numbers to use as elements in an embedding.</p>
<p>So here’s the concept. Rather than directly trying to characterize “what image is near what other image”, we instead consider a well-defined task (in this case digit recognition) for which we can get explicit training data—then use the fact that in doing this task the neural net implicitly has to make what amount to “nearness decisions”. So instead of us ever explicitly having to talk about “nearness of images” we’re just talking about the concrete question of what digit an image represents, and then we’re “leaving it to the neural net” to implicitly determine what that implies about “nearness of images”.</p>
<p>So how in more detail does this work for the digit recognition network? We can think of the network as consisting of 11 successive layers, that we might summarize iconically like this (with activation functions shown as separate layers):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img79.png" alt="" title="" width="600" height="35"> </p>
</div>
<p>At the beginning we’re feeding into the first layer actual images, represented by 2D arrays of pixel values. And at the end—from the last layer—we’re getting out an array of 10 values, which we can think of saying “how certain” the network is that the image corresponds to each of the digits 0 through 9. </p>
<p>Feed in the image <img src="https://content.wolfram.com/sites/43/2023/02/sw021423number4.png" alt="" title="" width="24" height="14">and the values of the neurons in that last layer are:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img81.png" alt="" title="" width="519" height="52"> </p>
</div>
<p>In other words, the neural net is by this point “incredibly certain” that this image is a 4—and to actually get the output “4” we just have to pick out the position of the neuron with the largest value.</p>
<p>But what if we look one step earlier? The very last operation in the network is a so-called <a href="https://reference.wolfram.com/language/ref/SoftmaxLayer.html">softmax</a> which tries to “force certainty”. But before that’s been applied the values of the neurons are:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img82.png" alt="" title="" width="395" height="37"> </p>
</div>
<p>The neuron representing “4” still has the highest numerical value. But there’s also information in the values of the other neurons. And we can expect that this list of numbers can in a sense be used to characterize the “essence” of the image—and thus to provide something we can use as an embedding. And so, for example, each of the 4’s here has a slightly different “signature” (or “feature embedding”)—all very different from the 8’s:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img83.png" alt="" title="" width="529" height="72"> </p>
</div>
<p>Here we’re essentially using 10 numbers to characterize our images. But it’s often better to use much more than that. And for example in our digit recognition network we can get an array of 500 numbers by tapping into the preceding layer. And this is probably a reasonable array to use as an “image embedding”. </p>
<p>If we want to make an explicit visualization of “image space” for handwritten digits we need to “reduce the dimension”, effectively by projecting the 500-dimensional vector we’ve got into, say, 3D space:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img84.png" alt="" title="" width="326" height="354"> </p>
</div>
<p>We’ve just talked about creating a characterization (and thus embedding) for images based effectively on identifying the similarity of images by determining whether (according to our training set) they correspond to the same handwritten digit. And we can do the same thing much more generally for images if we have a training set that identifies, say, which of 5000 common types of object (cat, dog, chair, …) each image is of. And in this way we can make an image embedding that’s “anchored” by our identification of common objects, but then “generalizes around that” according to the behavior of the neural net. And the point is that insofar as that behavior aligns with how we humans perceive and interpret images, this will end up being an embedding that “seems right to us”, and is useful in practice in doing “human-judgement-like” tasks.</p>
<p>OK, so how do we follow the same kind of approach to find embeddings for words? The key is to start from a task about words for which we can readily do training. And the standard such task is “word prediction”. Imagine we’re given “the ___ cat”. Based on a large corpus of text (say, the text content of the web), what are the probabilities for different words that might “fill in the blank”? Or, alternatively, given “___ black ___” what are the probabilities for different “flanking words”?</p>
<p>How do we set this problem up for a neural net? Ultimately we have to formulate everything in terms of numbers. And one way to do this is just to assign a unique number to each of the 50,000 or so common words in English. So, for example, “the” might be 914, and “ cat” (with a space before it) might be 3542. (And these are the actual numbers used by GPT-2.) So for the “the ___ cat” problem, our input might be {914, 3542}. What should the output be like? Well, it should be a list of 50,000 or so numbers that effectively give the probabilities for each of the possible “fill-in” words. And once again, to find an embedding, we want to “intercept” the “insides” of the neural net just before it “reaches its conclusion”—and then pick up the list of numbers that occur there, and that we can think of as “characterizing each word”.</p>
<p>OK, so what do those characterizations look like? Over the past 10 years there’ve been a sequence of different systems developed (<a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/ConceptNet-Numberbatch-Word-Vectors-V17.06/">word2vec</a>, <a href="https://resources.wolframcloud.com/NeuralNetRepository/search/?i=GloVe">GloVe</a>, <a href="https://resources.wolframcloud.com/NeuralNetRepository/search/?i=BERT">BERT</a>, <a href="https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/">GPT</a>, …), each based on a different neural net approach. But ultimately all of them take words and characterize them by lists of hundreds to thousands of numbers. </p>
<p>In their raw form, these “embedding vectors” are quite uninformative. For example, here’s what GPT-2 produces as the raw embedding vectors for three specific words: </p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img85.png" alt="" title="" width="467" height="131"> </p>
</div>
<p>If we do things like measure distances between these vectors, then we can find things like “nearnesses” of words. Later we’ll discuss in more detail what we might consider the “cognitive” significance of such embeddings. But for now the main point is that we have a way to usefully turn words into “neural-net-friendly” collections of numbers.</p>
<p>But actually we can go further than just characterizing words by collections of numbers; we can also do this for sequences of words, or indeed whole blocks of text. And inside ChatGPT that’s how it’s dealing with things. It takes the text it’s got so far, and generates an embedding vector to represent it. Then its goal is to find the probabilities for different words that might occur next. And it represents its answer for this as a list of numbers that essentially give the probabilities for each of the 50,000 or so possible words.</p>
<p>(Strictly, ChatGPT does not deal with words, but <a href="https://platform.openai.com/tokenizer" target="_blank" rel="noopener">rather with “tokens”</a>—convenient linguistic units that might be whole words, or might just be pieces like “pre” or “ing” or “ized”. Working with tokens makes it easier for ChatGPT to handle rare, compound and non-English words, and, sometimes, for better or worse, to invent new words.)</p>
<h2 id="inside-chatgpt">Inside ChatGPT</h2>
<p>OK, so we’re finally ready to discuss what’s inside ChatGPT. And, yes, ultimately, it’s a giant neural net—currently a version of the so-called GPT-3 network with 175 billion weights. In many ways this is a neural net very much like the other ones we’ve discussed. But it’s a neural net that’s particularly set up for dealing with language. And its most notable feature is a piece of neural net architecture called a “transformer”.</p>
<p>In the first neural nets we discussed above, every neuron at any given layer was basically connected (at least with some weight) to every neuron on the layer before. But this kind of fully connected network is (presumably) overkill if one’s working with data that has particular, known structure. And thus, for example, in the early stages of dealing with images, it’s typical to use so-called <a href="https://reference.wolfram.com/language/ref/ConvolutionLayer.html">convolutional neural nets</a> (“convnets”) in which neurons are effectively laid out on a grid analogous to the pixels in the image—and connected only to neurons nearby on the grid. </p>
<p>The idea of transformers is to do something at least somewhat similar for sequences of tokens that make up a piece of text. But instead of just defining a fixed region in the sequence over which there can be connections, transformers instead introduce the notion of “<a href="https://reference.wolfram.com/language/ref/AttentionLayer.html">attention</a>”—and the idea of “paying attention” more to some parts of the sequence than others. Maybe one day it’ll make sense to just start a generic neural net and do all customization through training. But at least as of now it seems to be critical in practice to “modularize” things—as transformers do, and probably as our brains also do. </p>
<p>OK, so what does ChatGPT (or, rather, the GPT-3 network on which it’s based) actually do? Recall that its overall goal is to continue text in a “reasonable” way, based on what it’s seen from the training it’s had (which consists in looking at billions of pages of text from the web, etc.) So at any given point, it’s got a certain amount of text—and its goal is to come up with an appropriate choice for the next token to add.</p>
<p>It operates in three basic stages. First, it takes the sequence of tokens that corresponds to the text so far, and finds an embedding (i.e. an array of numbers) that represents these. Then it operates on this embedding—in a “standard neural net way”, with values “rippling through” successive layers in a network—to produce a new embedding (i.e. a new array of numbers). It then takes the last part of this array and generates from it an array of about 50,000 values that turn into probabilities for different possible next tokens. (And, yes, it so happens that there are about the same number of tokens used as there are common words in English, though only about 3000 of the tokens are whole words, and the rest are fragments.)</p>
<p>A critical point is that every part of this pipeline is implemented by a neural network, whose weights are determined by end-to-end training of the network. In other words, in effect nothing except the overall architecture is “explicitly engineered”; everything is just “learned” from training data.</p>
<p>There are, however, plenty of details in the way the architecture is set up—reflecting all sorts of experience and neural net lore. And—even though this is definitely going into the weeds—I think it’s useful to talk about some of those details, not least to get a sense of just what goes into building something like ChatGPT.</p>
<p>First comes the embedding module. Here’s a schematic Wolfram Language representation for it for GPT-2:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img86.png" alt="" title="" width="424" height="217"> </p>
</div>
<p>The input is a <a href="https://reference.wolfram.com/language/ref/netencoder/SubwordTokens.html">vector of <em>n</em> tokens</a> (represented as in the previous section by integers from 1 to about 50,000). Each of these tokens is converted (by a <a href="https://reference.wolfram.com/language/ref/EmbeddingLayer.html">single-layer neural net</a>) into an embedding vector (of length 768 for GPT-2 and 12,288 for ChatGPT’s GPT-3). Meanwhile, there’s a “secondary pathway” that takes the <a href="https://reference.wolfram.com/language/ref/SequenceIndicesLayer.html">sequence of (integer) positions</a> for the tokens, and from these integers creates another embedding vector. And finally the embedding vectors from the token value and the token position are <a href="https://reference.wolfram.com/language/ref/ThreadingLayer.html">added together</a>—to produce the final sequence of embedding vectors from the embedding module.</p>
<p>Why does one just add the token-value and token-position embedding vectors together? I don’t think there’s any particular science to this. It’s just that various different things have been tried, and this is one that seems to work. And it’s part of the lore of neural nets that—in some sense—so long as the setup one has is “roughly right” it’s usually possible to home in on details just by doing sufficient training, without ever really needing to “understand at an engineering level” quite how the neural net has ended up configuring itself.</p>
<p>Here’s what the embedding module does, operating on the string <em>hello hello hello hello hello hello hello hello hello hello bye bye bye bye bye bye bye bye bye bye</em>:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img87.png" alt="" title="" width="373" height="158"> </p>
</div>
<p>The elements of the embedding vector for each token are shown down the page, and across the page we see first a run of “<em>hello</em>” embeddings, followed by a run of “<em>bye</em>” ones. The second array above is the positional embedding—with its somewhat-random-looking structure being just what “happened to be learned” (in this case in GPT-2).</p>
<p>OK, so after the embedding module comes the “main event” of the transformer: a sequence of so-called “attention blocks” (12 for GPT-2, 96 for ChatGPT’s GPT-3). It’s all pretty complicated—and reminiscent of typical large hard-to-understand engineering systems, or, for that matter, biological systems. But anyway, here’s a schematic representation of a single “attention block” (for GPT-2):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img88.png" alt="" title="" width="654" height="193"> </p>
</div>
<p>Within each such attention block there are a collection of “attention heads” (12 for GPT-2, 96 for ChatGPT’s GPT-3)—each of which operates independently on different chunks of values in the embedding vector. (And, yes, we don’t know any particular reason why it’s a good idea to split up the embedding vector, or what the different parts of it “mean”; this is just one of those things that’s been “found to work”.) </p>
<p>OK, so what do the attention heads do? Basically they’re a way of “looking back” in the sequence of tokens (i.e. in the text produced so far), and “packaging up the past” in a form that’s useful for finding the next token. <a target="_self" href="https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/#its-just-adding-one-word-at-a-time">In the first section above</a> we talked about using 2-gram probabilities to pick words based on their immediate predecessors. What the “attention” mechanism in transformers does is to allow “attention to” even much earlier words—thus potentially capturing the way, say, verbs can refer to nouns that appear many words before them in a sentence.</p>
<p>At a more detailed level, what an attention head does is to recombine chunks in the embedding vectors associated with different tokens, with certain weights. And so, for example, the 12 attention heads in the first attention block (in GPT-2) have the following (“look-back-all-the-way-to-the-beginning-of-the-sequence-of-tokens”) patterns of “recombination weights” for the “<em>hello</em>, <em>bye</em>” string above:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img89A.png" alt="" title="" width="550" height="179"> </p>
</div>
<p>After being processed by the attention heads, the resulting “re-weighted embedding vector” (of length 768 for GPT-2 and length 12,288 for ChatGPT’s GPT-3) is passed through a standard <a href="https://reference.wolfram.com/language/ref/LinearLayer.html">“fully connected” neural net layer</a>. It’s hard to get a handle on what this layer is doing. But here’s a plot of the 768×768 matrix of weights it’s using (here for GPT-2):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img90A.png" alt="" title="" width="358" height="358"> </p>
</div>
<p>Taking 64×64 moving averages, some (random-walk-ish) structure begins to emerge:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img91.png" alt="" title="" width="360" height="359"> </p>
</div>
<p>What determines this structure? Ultimately it’s presumably some “neural net encoding” of features of human language. But as of now, what those features might be is quite unknown. In effect, we’re “opening up the brain of ChatGPT” (or at least GPT-2) and discovering, yes, it’s complicated in there, and we don’t understand it—even though in the end it’s producing recognizable human language.</p>
<p>OK, so after going through one attention block, we’ve got a new embedding vector—which is then successively passed through additional attention blocks (a total of 12 for GPT-2; 96 for GPT-3). Each attention block has its own particular pattern of “attention” and “fully connected” weights. Here for GPT-2 are the sequence of attention weights for the “hello, bye” input, for the first attention head:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img92A.png" alt="" title="" width="512" height="167"> </p>
</div>
<p>And here are the (moving-averaged) “matrices” for the fully connected layers:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img93A.png" alt="" title="" width="569" height="422"> </p>
</div>
<p>Curiously, even though these “matrices of weights” in different attention blocks look quite similar, the distributions of the sizes of weights can be somewhat different (and are not always Gaussian):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img94A.png" alt="" title="" width="351" height="164"> </p>
</div>
<p>So after going through all these attention blocks what is the net effect of the transformer? Essentially it’s to transform the original collection of embeddings for the sequence of tokens to a final collection. And the particular way ChatGPT works is then to pick up the last embedding in this collection, and “decode” it to produce a list of probabilities for what token should come next.</p>
<p>So that’s in outline what’s inside ChatGPT. It may seem complicated (not least because of its many inevitably somewhat arbitrary “engineering choices”), but actually the ultimate elements involved are remarkably simple. Because in the end what we’re dealing with is just a neural net made of “artificial neurons”, each doing the simple operation of taking a collection of numerical inputs, and then combining them with certain weights. </p>
<p>The original input to ChatGPT is an array of numbers (the embedding vectors for the tokens so far), and what happens when ChatGPT “runs” to produce a new token is just that these numbers “ripple through” the layers of the neural net, with each neuron “doing its thing” and passing the result to neurons on the next layer. There’s no looping or “going back”. Everything just “feeds forward” through the network. </p>
<p>It’s a very different setup from a typical computational system—like a <a href="https://www.wolframscience.com/nks/p78--turing-machines/">Turing machine</a>—in which results are repeatedly “reprocessed” by the same computational elements. Here—at least in generating a given token of output—each computational element (i.e. neuron) is used only once. </p>
<p>But there is in a sense still an “outer loop” that reuses computational elements even in ChatGPT. Because when ChatGPT is going to generate a new token, it always “reads” (i.e. takes as input) the whole sequence of tokens that come before it, including tokens that ChatGPT itself has “written” previously. And we can think of this setup as meaning that ChatGPT does—at least at its outermost level—involve a “feedback loop”, albeit one in which every iteration is explicitly visible as a token that appears in the text that it generates.</p>
<p>But let’s come back to the core of ChatGPT: the neural net that’s being repeatedly used to generate each token. At some level it’s very simple: a whole collection of identical artificial neurons. And some parts of the network just consist of (“<a href="https://reference.wolfram.com/language/ref/LinearLayer.html">fully connected</a>”) layers of neurons in which every neuron on a given layer is connected (with some weight) to every neuron on the layer before. But particularly with its transformer architecture, ChatGPT has parts with more structure, in which only specific neurons on different layers are connected. (Of course, one could still say that “all neurons are connected”—but some just have zero weight.)</p>
<p>In addition, there are aspects of the neural net in ChatGPT that aren’t most naturally thought of as just consisting of “homogeneous” layers. And for example—as the iconic summary above indicates—inside an attention block there are places where “multiple copies are made” of incoming data, each then going through a different “processing path”, potentially involving a different number of layers, and only later recombining. But while this may be a convenient representation of what’s going on, it’s always at least in principle possible to think of “densely filling in” layers, but just having some weights be zero.</p>
<p>If one looks at the longest path through ChatGPT, there are about 400 (core) layers involved—in some ways not a huge number. But there are millions of neurons—with a total of 175 billion connections and therefore 175 billion weights. And one thing to realize is that every time ChatGPT generates a new token, it has to do a calculation involving every single one of these weights. Implementationally these calculations can be somewhat organized “by layer” into highly parallel array operations that can conveniently be done on GPUs. But for each token that’s produced, there still have to be 175 billion calculations done (and in the end a bit more)—so that, yes, it’s not surprising that it can take a while to generate a long piece of text with ChatGPT. </p>
<p>But in the end, the remarkable thing is that all these operations—individually as simple as they are—can somehow together manage to do such a good “human-like” job of generating text. It has to be emphasized again that (at least so far as we know) there’s no “ultimate theoretical reason” why anything like this should work. And in fact, as we’ll discuss, I think we have to view this as a—potentially surprising—scientific discovery: that somehow in a neural net like ChatGPT’s it’s possible to capture the essence of what human brains manage to do in generating language. </p>
<h2 id="the-training-of-chatgpt">The Training of ChatGPT</h2>
<p>OK, so we’ve now given an outline of how ChatGPT works once it’s set up. But how did it get set up? How were all those 175 billion weights in its neural net determined? Basically they’re the result of very large-scale training, based on a huge corpus of text—on the web, in books, etc.—written by humans. As we’ve said, even given all that training data, it’s certainly not obvious that a neural net would be able to successfully produce “human-like” text. And, once again, there seem to be detailed pieces of engineering needed to make that happen. But the big surprise—and discovery—of ChatGPT is that it’s possible at all. And that—in effect—a neural net with “just” 175 billion weights can make a “reasonable model” of text humans write.</p>
<p>In modern times, there’s lots of text written by humans that’s out there in digital form. The public web has at least several billion human-written pages, with altogether perhaps a trillion words of text. And if one includes non-public webpages, the numbers might be at least 100 times larger. So far, more than 5 million digitized books have been made available (out of 100 million or so that have ever been published), giving another 100 billion or so words of text. And that’s not even mentioning text derived from speech in videos, etc. (As a personal comparison, <a href="https://www.stephenwolfram.com/publications/">my total lifetime output of published material</a> has been a bit under 3 million words, and over the <a href="https://writings.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/">past 30 years I’ve written</a> about 15 million words of email, and altogether typed perhaps 50 million words—and in just the past couple of years I’ve spoken more than 10 million words on <a href="https://www.stephenwolfram.com/livestreams">livestreams</a>. And, yes, I’ll train a bot from all of that.)</p>
<p>But, OK, given all this data, how does one train a neural net from it? The basic process is very much as we discussed it in the simple examples above. You present a batch of examples, and then you adjust the weights in the network to minimize the error (“loss”) that the network makes on those examples. The main thing that’s expensive about “back propagating” from the error is that each time you do this, every weight in the network will typically change at least a tiny bit, and there are just a lot of weights to deal with. (The actual “back computation” is typically only a small constant factor harder than the forward one.)</p>
<p>With modern GPU hardware, it’s straightforward to compute the results from batches of thousands of examples in parallel. But when it comes to actually updating the weights in the neural net, current methods require one to do this basically batch by batch. (And, yes, this is probably where actual brains—with their combined computation and memory elements—have, for now, at least an architectural advantage.)</p>
<p>Even in the seemingly simple cases of learning numerical functions that we discussed earlier, we found we often had to use millions of examples to successfully train a network, at least from scratch. So how many examples does this mean we’ll need in order to train a “human-like language” model? There doesn’t seem to be any fundamental “theoretical” way to know. But in practice ChatGPT was successfully trained on a few hundred billion words of text.</p>
<p>Some of the text it was fed several times, some of it only once. But somehow it “got what it needed” from the text it saw. But given this volume of text to learn from, how large a network should it require to “learn it well”? Again, we don’t yet have a fundamental theoretical way to say. Ultimately—as we’ll discuss further below—there’s presumably a certain “total algorithmic content” to human language and what humans typically say with it. But the next question is how efficient a neural net will be at implementing a model based on that algorithmic content. And again we don’t know—although the success of ChatGPT suggests it’s reasonably efficient.</p>
<p>And in the end we can just note that ChatGPT does what it does using a couple hundred billion weights—comparable in number to the total number of words (or tokens) of training data it’s been given. In some ways it’s perhaps surprising (though empirically observed also in smaller analogs of ChatGPT) that the “size of the network” that seems to work well is so comparable to the “size of the training data”. After all, it’s certainly not that somehow “inside ChatGPT” all that text from the web and books and so on is “directly stored”. Because what’s actually inside ChatGPT are a bunch of numbers—with a bit less than 10 digits of precision—that are some kind of distributed encoding of the aggregate structure of all that text. </p>
<p>Put another way, we might ask what the “effective information content” is of human language and what’s typically said with it. There’s the raw corpus of examples of language. And then there’s the representation in the neural net of ChatGPT. That representation is very likely far from the “algorithmically minimal” representation (as we’ll discuss below). But it’s a representation that’s readily usable by the neural net. And in this representation it seems there’s in the end rather little “compression” of the training data; it seems on average to basically take only a bit less than one neural net weight to carry the “information content” of a word of training data.</p>
<p>When we run ChatGPT to generate text, we’re basically having to use each weight once. So if there are <em>n</em> weights, we’ve got of order <em>n</em> computational steps to do—though in practice many of them can typically be done in parallel in GPUs. But if we need about <em>n</em> words of training data to set up those weights, then from what we’ve said above we can conclude that we’ll need about <em>n</em><sup>2</sup> computational steps to do the training of the network—which is why, with current methods, one ends up needing to talk about billion-dollar training efforts.</p>
<h2 id="beyond-basic-training">Beyond Basic Training</h2>
<p>The majority of the effort in training ChatGPT is spent “showing it” large amounts of existing text from the web, books, etc. But it turns out there’s another—apparently rather important—part too. </p>
<p>As soon as it’s finished its “raw training” from the original corpus of text it’s been shown, the neural net inside ChatGPT is ready to start generating its own text, continuing from prompts, etc. But while the results from this may often seem reasonable, they tend—particularly for longer pieces of text—to “wander off” in often rather non-human-like ways. It’s not something one can readily detect, say, by doing traditional statistics on the text. But it’s something that actual humans reading the text easily notice.</p>
<p>And a <a href="https://openai.com/blog/instruction-following/" target="_blank" rel="noopener">key idea in the construction of ChatGPT</a> was to have another step after “passively reading” things like the web: to have actual humans actively interact with ChatGPT, see what it produces, and in effect give it feedback on “how to be a good chatbot”. But how can the neural net use that feedback? The first step is just to have humans rate results from the neural net. But then another neural net model is built that attempts to predict those ratings. But now this prediction model can be run—essentially like a loss function—on the original network, in effect allowing that network to be “tuned up” by the human feedback that’s been given. And the results in practice seem to have a big effect on the success of the system in producing “human-like” output. </p>
<p>In general, it’s interesting how little “poking” the “originally trained” network seems to need to get it to usefully go in particular directions. One might have thought that to have the network behave as if it’s “learned something new” one would have to go in and run a training algorithm, adjusting weights, and so on.</p>
<p>But that’s not the case. Instead, it seems to be sufficient to basically tell ChatGPT something one time—as part of the prompt you give—and then it can successfully make use of what you told it when it generates text. And once again, the fact that this works is, I think, an important clue in understanding what ChatGPT is “really doing” and how it relates to the structure of human language and thinking. </p>
<p>There’s certainly something rather human-like about it: that at least once it’s had all that pre-training you can tell it something just once and it can “remember it”—at least “long enough” to generate a piece of text using it. So what’s going on in a case like this? It could be that “everything you might tell it is already in there somewhere”—and you’re just leading it to the right spot. But that doesn’t seem plausible. Instead, what seems more likely is that, yes, the elements are already in there, but the specifics are defined by something like a “trajectory between those elements” and that’s what you’re introducing when you tell it something.</p>
<p>And indeed, much like for humans, if you tell it something bizarre and unexpected that completely doesn’t fit into the framework it knows, it doesn’t seem like it’ll successfully be able to “integrate” this. It can “integrate” it only if it’s basically riding in a fairly simple way on top of the framework it already has.</p>
<p>It’s also worth pointing out again that there are inevitably “algorithmic limits” to what the neural net can “pick up”. Tell it “shallow” rules of the form “this goes to that”, etc., and the neural net will most likely be able to represent and reproduce these just fine—and indeed what it “already knows” from language will give it an immediate pattern to follow. But try to give it rules for an actual “deep” computation that involves many potentially computationally irreducible steps and it just won’t work. (Remember that at each step it’s always just “feeding data forward” in its network, never looping except by virtue of generating new tokens.)</p>
<p>Of course, the network can learn the answer to specific “irreducible” computations. But as soon as there are combinatorial numbers of possibilities, no such “table-lookup-style” approach will work. And so, yes, just like humans, it’s time then for neural nets to “reach out” and use actual computational tools. (And, yes, <a href="https://www.wolframalpha.com/">Wolfram|Alpha</a> and <a href="https://www.wolfram.com/language/">Wolfram Language</a> are <a href="https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/">uniquely suitable</a>, because they’ve been built to “talk about things in the world”, just like the language-model neural nets.)</p>
<h2 id="what-really-lets-chatgpt-work">What Really Lets ChatGPT Work?</h2>
<p>Human language—and the processes of thinking involved in generating it—have always seemed to represent a kind of pinnacle of complexity. And indeed it’s seemed somewhat remarkable that human brains—with their network of a “mere” 100 billion or so neurons (and maybe 100 trillion connections) could be responsible for it. Perhaps, one might have imagined, there’s something more to brains than their networks of neurons—like some new layer of undiscovered physics. But now with ChatGPT we’ve got an important new piece of information: we know that a pure, artificial neural network with about as many connections as brains have neurons is capable of doing a surprisingly good job of generating human language.</p>
<p>And, yes, that’s still a big and complicated system—with about as many neural net weights as there are words of text currently available out there in the world. But at some level it still seems difficult to believe that all the richness of language and the things it can talk about can be encapsulated in such a finite system. Part of what’s going on is no doubt a reflection of the ubiquitous phenomenon (that first became evident in the <a href="https://www.wolframscience.com/nks/chap-2--the-crucial-experiment#sect-2-1--how-do-simple-programs-behave">example of rule 30</a>) that computational processes can in effect greatly amplify the apparent complexity of systems even when their underlying rules are simple. But, actually, as we discussed above, neural nets of the kind used in ChatGPT tend to be specifically constructed to restrict the effect of this phenomenon—and the computational irreducibility associated with it—in the interest of making their training more accessible.</p>
<p>So how is it, then, that something like ChatGPT can get as far as it does with language? The basic answer, I think, is that language is at a fundamental level somehow simpler than it seems. And this means that ChatGPT—even with its ultimately straightforward neural net structure—is successfully able to “capture the essence” of human language and the thinking behind it. And moreover, in its training, ChatGPT has somehow “implicitly discovered” whatever regularities in language (and thinking) make this possible.</p>
<p>The success of ChatGPT is, I think, giving us evidence of a fundamental and important piece of science: it’s suggesting that we can expect there to be major new “laws of language”—and effectively “laws of thought”—out there to discover. In ChatGPT—built as it is as a neural net—those laws are at best implicit. But if we could somehow make the laws explicit, there’s the potential to do the kinds of things ChatGPT does in vastly more direct, efficient—and transparent—ways.</p>
<p>But, OK, so what might these laws be like? Ultimately they must give us some kind of prescription for how language—and the things we say with it—are put together. Later we’ll discuss how “looking inside ChatGPT” may be able to give us some hints about this, and how what we know from building computational language suggests a path forward. But first let’s discuss two long-known examples of what amount to “laws of language”—and how they relate to the operation of ChatGPT.</p>
<p>The first is the syntax of language. Language is not just a random jumble of words. Instead, there are (fairly) definite <a href="https://www.wolframscience.com/nks/notes-10-12--computer-and-human-languages/">grammatical rules</a> for how words of different kinds can be put together: in English, for example, nouns can be preceded by adjectives and followed by verbs, but typically two nouns can’t be right next to each other. Such grammatical structure can (at least approximately) be captured by a set of rules that define how what amount to <a href="https://reference.wolfram.com/language/ref/TextStructure.html">“parse trees” can be put together</a>:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img96.png" alt="" title="" width="613" height="262"> </p>
</div>
<p>ChatGPT doesn’t have any explicit “knowledge” of such rules. But somehow in its training it implicitly “discovers” them—and then seems to be good at following them. So how does this work? At a “big picture” level it’s not clear. But to get some insight it’s perhaps instructive to look at a much simpler example.</p>
<p>Consider a “language” formed from sequences of (’s and )’s, with a <a href="https://www.wolframscience.com/nks/notes-7-9--nested-lists/">grammar that specifies</a> that parentheses should always be balanced, as represented by a parse tree like:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img97.png" alt="" title="" width="531" height="123"> </p>
</div>
<p>Can we train a neural net to produce “grammatically correct” parenthesis sequences? There are various ways to handle sequences in neural nets, but let’s use transformer nets, as ChatGPT does. And given a simple transformer net, we can start feeding it grammatically correct parenthesis sequences as training examples. A subtlety (which actually also appears in ChatGPT’s generation of human language) is that in addition to our “content tokens” (here “(” and “)”) we have to include an “End” token, that’s generated to indicate that the output shouldn’t continue any further (i.e. for ChatGPT, that one’s reached the “end of the story”).</p>
<p>If we set up a transformer net with just one attention block with 8 heads and feature vectors of length 128 (ChatGPT also uses feature vectors of length 128, but has 96 attention blocks, each with 96 heads) then it doesn’t seem possible to get it to learn much about parenthesis language. But with 2 attention blocks, the learning process seems to converge—at least after 10 million or so examples have been given (and, as is common with transformer nets, showing yet more examples just seems to degrade its performance).</p>
<p>So with this network, we can do the analog of what ChatGPT does, and ask for probabilities for what the next token should be—in a parenthesis sequence:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img98.png" alt="" title="" width="503" height="83"> </p>
</div>
<p>And in the first case, the network is “pretty sure” that the sequence can’t end here—which is good, because if it did, the parentheses would be left unbalanced. In the second case, however, it “correctly recognizes” that the sequence can end here, though it also “points out” that it’s possible to “start again”, putting down a “(”, presumably with a “)” to follow. But, oops, even with its 400,000 or so laboriously trained weights, it says there’s a 15% probability to have “)” as the next token—which isn’t right, because that would necessarily lead to an unbalanced parenthesis.</p>
<p>Here’s what we get if we ask the network for the highest-probability completions for progressively longer sequences of (’s:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img99A.png" alt="" title="" width="341" height="331"> </p>
</div>
<p>And, yes, up to a certain length the network does just fine. But then it starts failing. It’s a pretty typical kind of thing to see in a “precise” situation like this with a neural net (or with machine learning in general). Cases that a human “can solve in a glance” the neural net can solve too. But cases that require doing something “more algorithmic” (e.g. explicitly counting parentheses to see if they’re closed) the neural net tends to somehow be “too computationally shallow” to reliably do. (By the way, even the full current ChatGPT has a hard time correctly matching parentheses in long sequences.)</p>
<p>So what does this mean for things like ChatGPT and the syntax of a language like English? The parenthesis language is “austere”—and much more of an “algorithmic story”. But in English it’s much more realistic to be able to “guess” what’s grammatically going to fit on the basis of local choices of words and other hints. And, yes, the neural net is much better at this—even though perhaps it might miss some “formally correct” case that, well, humans might miss as well. But the main point is that the fact that there’s an overall syntactic structure to the language—with all the regularity that implies—in a sense limits “how much” the neural net has to learn. And a key “natural-science-like” observation is that the transformer architecture of neural nets like the one in ChatGPT seems to successfully be able to learn the kind of nested-tree-like syntactic structure that seems to exist (at least in some approximation) in all human languages.</p>
<p>Syntax provides one kind of constraint on language. But there are clearly more. A sentence like “Inquisitive electrons eat blue theories for fish” is grammatically correct but isn’t something one would normally expect to say, and wouldn’t be considered a success if ChatGPT generated it—because, well, with the normal meanings for the words in it, it’s basically meaningless. </p>
<p>But is there a general way to tell if a sentence is meaningful? There’s no traditional overall theory for that. But it’s something that one can think of ChatGPT as having implicitly “developed a theory for” after being trained with billions of (presumably meaningful) sentences from the web, etc. </p>
<p>What might this theory be like? Well, there’s one tiny corner that’s basically been known for two millennia, and that’s <a href="https://writings.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/">logic</a>. And certainly in the syllogistic form in which Aristotle discovered it, logic is basically a way of saying that sentences that follow certain patterns are reasonable, while others are not. Thus, for example, it’s reasonable to say “All X are Y. This is not Y, so it’s not an X” (as in “All fishes are blue. This is not blue, so it’s not a fish.”). And just as one can somewhat whimsically imagine that Aristotle discovered syllogistic logic by going (“machine-learning-style”) through lots of examples of rhetoric, so too one can imagine that in the training of ChatGPT it will have been able to “discover syllogistic logic” by looking at lots of text on the web, etc. (And, yes, while one can therefore expect ChatGPT to produce text that contains “correct inferences” based on things like syllogistic logic, it’s a quite different story when it comes to more sophisticated formal logic—and I think one can expect it to fail here for the same kind of reasons it fails in parenthesis matching.)</p>
<p>But beyond the narrow example of logic, what can be said about how to systematically construct (or recognize) even plausibly meaningful text? Yes, there are things like <a href="https://en.wikipedia.org/wiki/Mad_Libs" target="_blank" rel="noopener">Mad Libs</a> that use very specific “phrasal templates”. But somehow ChatGPT implicitly has a much more general way to do it. And perhaps there’s nothing to be said about how it can be done beyond “somehow it happens when you have 175 billion neural net weights”. But I strongly suspect that there’s a much simpler and stronger story.</p>
<h2 id="meaning-space-and-semantic-laws-of-motion">Meaning Space and Semantic Laws of Motion</h2>
<p>We discussed above that inside ChatGPT any piece of text is effectively represented by an array of numbers that we can think of as coordinates of a point in some kind of “linguistic feature space”. So when ChatGPT continues a piece of text this corresponds to tracing out a trajectory in linguistic feature space. But now we can ask what makes this trajectory correspond to text we consider meaningful. And might there perhaps be some kind of “semantic laws of motion” that define—or at least constrain—how points in linguistic feature space can move around while preserving “meaningfulness”?</p>
<p>So what is this linguistic feature space like? Here’s an example of how single words (here, common nouns) might get laid out if we project such a feature space down to 2D:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img100.png" alt="" title="" width="558" height="524"> </p>
</div>
<p>We saw another example above based on words representing plants and animals. But the point in both cases is that “semantically similar words” are placed nearby.</p>
<p>As another example, here’s how words corresponding to different parts of speech get laid out:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img101-edit.png" alt="" title="" width="575" height="385"> </p>
</div>
<p>Of course, a given word doesn’t in general just have “one meaning” (or necessarily correspond to just one part of speech). And by looking at how sentences containing a word lay out in feature space, one can often “tease apart” different meanings—as in the example here for the word “crane” (bird or machine?):</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img102.png" alt="" title="" width="593" height="364"> </p>
</div>
<p>OK, so it’s at least plausible that we can think of this feature space as placing “words nearby in meaning” close in this space. But what kind of additional structure can we identify in this space? Is there for example some kind of notion of “parallel transport” that would reflect “flatness” in the space? One way to get a handle on that is to look at analogies:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img103.png" alt="" title="" width="552" height="279"> </p>
</div>
<p>And, yes, even when we project down to 2D, there’s often at least a “hint of flatness”, though it’s certainly not universally seen.</p>
<p>So what about trajectories? We can look at the trajectory that a prompt for ChatGPT follows in feature space—and then we can see how ChatGPT continues that:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img104.png" alt="" title="" width="549" height="339"> </p>
</div>
<p>There’s certainly no “geometrically obvious” law of motion here. And that’s not at all surprising; we fully expect this to be a <a href="https://writings.stephenwolfram.com/2021/09/multicomputation-a-fourth-paradigm-for-theoretical-science/#linguistics">considerably more complicated story</a>. And, for example, it’s far from obvious that even if there is a “semantic law of motion” to be found, what kind of embedding (or, in effect, what “variables”) it’ll most naturally be stated in. </p>
<p>In the picture above, we’re showing several steps in the “trajectory”—where at each step we’re picking the word that ChatGPT considers the most probable (the “zero temperature” case). But we can also ask what words can “come next” with what probabilities at a given point:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img105.png" alt="" title="" width="359" height="227"> </p>
</div>
<p>And what we see in this case is that there’s a “fan” of high-probability words that seems to go in a more or less definite direction in feature space. What happens if we go further? Here are the successive “fans” that appear as we “move along” the trajectory:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img106.png" alt="" title="" width="578" height="566"> </p>
</div>
<p>Here’s a 3D representation, going for a total of 40 steps:</p>
<div>
<p><img loading="lazy" src="https://content.wolfram.com/sites/43/2023/02/sw021423img107.png" alt="" title="" width="359" height="294"> </p>
</div>
<p>And, yes, this seems like a mess—and doesn’t do anything to particularly encourage the idea that one can expect to identify “mathematical-physics-like” “semantic laws of motion” by empirically studying “what ChatGPT is doing inside”. But perhaps we’re just looking at the “wrong variables” (or wrong coordinate system) and if only we looked at the right one, we’d immediately see that ChatGPT is doing something “mathematical-physics-simple” like following geodesics. But as of now, we’re not ready to “empirically decode” from its “internal behavior” what ChatGPT has “discovered” about how human language is “put together”. </p>
<h2 id="semantic-grammar-and-the-power-of-computational-language">Semantic Grammar and the Power of Computational Language</h2>
<p>What does it take to produce “meaningful human language”? In the past, we might have assumed it could be nothing short of a human brain. But now we know it can be done quite respectably by the neural net of ChatGPT. Still, maybe that’s as far as we can go, and there’ll be nothing simpler—or more human understandable—that will work. But my strong suspicion is that the success of ChatGPT implicitly reveals an important “scientific” fact: that there’s actually a lot more structure and simplicity to meaningful human language than we ever knew—and that in the end there may be even fairly simple rules that describe how such language can be put together.</p>
<p>As we mentioned above, syntactic grammar gives rules for how words corresponding to things like different parts of speech can be put together in human language. But to deal with meaning, we need to go further. And one version of how to do this is to think about not just a syntactic grammar for language, but also a semantic one. </p>
<p>For purposes of syntax, we identify things like nouns and verbs. But for purposes of semantics, we need “finer gradations”. So, for example, we might identify the concept of “moving”, and the concept of an “object” that “maintains its identity independent of location”. There are endless specific examples of each of these “semantic concepts”. But for the purposes of our semantic grammar, we’ll just have some general kind of rule that basically says that “objects” can “move”. There’s a lot to say about how all this might work (<a href="https://writings.stephenwolfram.com/2016/10/computational-law-symbolic-discourse-and-the-ai-constitution/">some of which I’ve said before</a>). But I’ll content myself here with just a few remarks that indicate some of the potential path forward.</p>
<p>It’s worth mentioning that even if a sentence is perfectly OK according to the semantic grammar, that doesn’t mean it’s been realized (or even could be realized) in practice. “The elephant traveled to the Moon” would doubtless “pass” our semantic grammar, but it certainly hasn’t been realized (at least yet) in our actual world—though it’s absolutely fair game for a fictional world.</p>
<p>When we start talking about “semantic grammar” we’re soon led to ask “What’s underneath it?” What “model of the world” is it assuming? A syntactic grammar is really just about the construction of language from words. But a semantic grammar necessarily engages with some kind of “model of the world”—something that serves as a “skeleton” on top of which language made from actual words can be layered.</p>
<p>Until recent times, we might have imagined that (human) language would be the only general way to describe our “model of the world”. Already a few centuries ago there started to be formalizations of specific kinds of things, based particularly on mathematics. But now there’s a much more general approach to formalization: <a href="https://writings.stephenwolfram.com/2019/05/what-weve-built-is-a-computational-language-and-thats-very-important/">computational language</a>.</p>
<p>And, yes, that’s been my big project over the course of more than four decades (as now embodied in the <a href="https://www.wolfram.com/language/">Wolfram Language</a>): to develop a precise symbolic representation that can talk as broadly as possible about things in the world, as well as abstract things that we care about. And so, for example, we have symbolic representations for <a href="https://reference.wolfram.com/language/ref/entity/City.html">cities</a> and <a href="https://reference.wolfram.com/language/guide/MolecularStructureAndComputation.html">molecules</a> and <a href="https://reference.wolfram.com/language/guide/ImageRepresentation.html">images</a> and <a href="https://reference.wolfram.com/language/guide/NeuralNetworkConstruction.html">neural networks</a>, and we have built-in knowledge about how to compute about those things. </p>
<p>And, after decades of work, we’ve covered a lot of areas in this way. But in the past, we haven’t particularly dealt with “<a href="https://writings.stephenwolfram.com/2016/10/computational-law-symbolic-discourse-and-the-ai-constitution/">everyday discourse</a>”. In “I bought two pounds of apples” we can <a href="https://reference.wolfram.com/language/ref/entity/Food.html">readily represent</a> (and do nutrition and other computations on) the “two pounds of apples”. But we don’t (quite yet) have a symbolic representation for “I bought”.</p>
<p>It’s all connected to the idea of semantic grammar—and the goal of having a generic symbolic “construction kit” for concepts, that would give us rules for what could fit together with what, and thus for the “flow” of what we might turn into human language. </p>
<p>But let’s say we had this “symbolic discourse language”. What would we do with it? We could start off doing things like generating “locally meaningful text”. But ultimately we’re likely to want more “globally meaningful” results—which means “computing” more about what can actually exist or happen in the world (or perhaps in some consistent fictional world). </p>
<p>Right now in Wolfram Language we have a huge amount of built-in computational knowledge about lots of kinds of things. But for a complete symbolic discourse language we’d have to build in additional “calculi” about general things in the world: if an object moves from A to B and from B to C, then it’s moved from A to C, etc. </p>
<p>Given a symbolic discourse language we might use it to make “standalone statements”. But we can also use it to ask questions about the world, “Wolfram|Alpha style”. Or we can use it to state things that we “want to make so”, presumably with some external actuation mechanism. Or we can use it to make assertions—perhaps about the actual world, or perhaps about some specific world we’re considering, fictional or otherwise. </p>
<p>Human language is fundamentally imprecise, not least because it isn’t “tethered” to a specific computational implementation, and its meaning is basically defined just by a “social contract” between its users. But computational language, by its nature, has a certain fundamental precision—because in the end what it specifies can always be “unambiguously executed on a computer”. Human language can usually get away with a certain vagueness. (When we say “planet” does it include exoplanets or not, etc.?) But in computational language we have to be precise and clear about all the distinctions we’re making.</p>
<p>It’s often convenient to leverage ordinary human language in making up names in computational language. But the meanings they have in computational language are necessarily precise—and might or might not cover some particular connotation in typical human language usage.</p>
<p>How should one figure out the fundamental “ontology” suitable for a general symbolic discourse language? Well, it’s not easy. Which is perhaps why little has been done since the primitive beginnings Aristotle made more than two millennia ago. But it really helps that today we now know so much about how to think about the world computationally (and it doesn’t hurt to have a “fundamental metaphysics” from our <a href="https://www.wolframphysics.org/" target="_blank" rel="noopener">Physics Project</a> and the <a href="https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/">idea of the ruliad</a>).</p>
<p>But what does all this mean in the context of ChatGPT? From its training ChatGPT has effectively “pieced together” a certain (rather impressive) quantity of what amounts to semantic grammar. But its very success gives us a reason to think that it’s going to be feasible to construct something more complete in computational language form. And, unlike what we’ve so far figured out about the innards of ChatGPT, we can expect to design the computational language so that it’s readily understandable to humans.</p>
<p>When we talk about semantic grammar, we can draw an analogy to syllogistic logic. At first, syllogistic logic was essentially a collection of rules about statements expressed in human language. But (yes, two millennia later) <a href="https://writings.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/#the-history">when formal logic was developed</a>, the original basic constructs of syllogistic logic could now be used to build huge “formal towers” that include, for example, the operation of modern digital circuitry. And so, we can expect, it will be with more general semantic grammar. At first, it may just be able to deal with simple patterns, expressed, say, as text. But once its whole computational language framework is built, we can expect that it will be able to be used to erect tall towers of “generalized semantic logic”, that allow us to work in a precise and formal way with all sorts of things that have never been accessible to us before, except just at a “ground-floor level” through human language, with all its vagueness.</p>
<p>We can think of the construction of computational language—and semantic grammar—as representing a kind of ultimate compression in representing things. Because it allows us to talk about the essence of what’s possible, without, for example, dealing with all the “turns of phrase” that exist in ordinary human language. And we can view the great strength of ChatGPT as being something a bit similar: because it too has in a sense “drilled through” to the point where it can “put language together in a semantically meaningful way” without concern for different possible turns of phrase.</p>
<p>So what would happen if we applied ChatGPT to underlying computational language? The computational language can describe what’s possible. But what can still be added is a sense of “what’s popular”—based for example on reading all that content on the web. But then—underneath—operating with computational language means that something like ChatGPT has immediate and fundamental access to what amount to ultimate tools for making use of potentially irreducible computations. And that makes it a system that can not only “generate reasonable text”, but can expect to work out whatever can be worked out about whether that text actually makes “correct” statements about the world—or whatever it’s supposed to be talking about. </p>
<h2 id="so-what-is-chatgpt-doing-and-why-does-it-work">So … What Is ChatGPT Doing, and Why Does It Work?</h2>
<p>The basic concept of ChatGPT is at some level rather simple. Start from a huge sample of human-created text from the web, books, etc. Then train a neural net to generate text that’s “like this”. And in particular, make it able to start from a “prompt” and then continue with text that’s “like what it’s been trained with”.</p>
<p>As we’ve seen, the actual neural net in ChatGPT is made up of very simple elements—though billions of them. And the basic operation of the neural net is also very simple, consisting essentially of passing input derived from the text it’s generated so far “once through its elements” (without any loops, etc.) for every new word (or part of a word) that it generates.</p>
<p>But the remarkable—and unexpected—thing is that this process can produce text that’s successfully “like” what’s out there on the web, in books, etc. And not only is it coherent human language, it also “says things” that “follow its prompt” making use of content it’s “read”. It doesn’t always say things that “globally make sense” (or correspond to correct <nobr>computations)—</nobr>because (without, for example, <a href="https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/">accessing the “computational superpowers” of Wolfram|Alpha</a>) it’s just saying things that “sound right” based on what things “sounded like” in its training material. </p>
<p>The specific engineering of ChatGPT has made it quite compelling. But ultimately (at least until it can use outside tools) ChatGPT is “merely” pulling out some “coherent thread of text” from the “statistics of conventional wisdom” that it’s accumulated. But it’s amazing how human-like the results are. And as I’ve discussed, this suggests something that’s at least scientifically very important: that human language (and the patterns of thinking behind it) are somehow simpler and more “law like” in their structure than we thought. ChatGPT has implicitly discovered it. But we can potentially explicitly expose it, with semantic grammar, computational language, etc.</p>
<p>What ChatGPT does in generating text is very impressive—and the results are usually very much like what we humans would produce. So does this mean ChatGPT is working like a brain? Its underlying artificial-neural-net structure was ultimately modeled on an idealization of the brain. And it seems quite likely that when we humans generate language many aspects of what’s going on are quite similar.</p>
<p>When it comes to training (AKA learning) the different “hardware” of the brain and of current computers (as well as, perhaps, some undeveloped algorithmic ideas) forces ChatGPT to use a strategy that’s probably rather different (and in some ways much less efficient) than the brain. And there’s something else as well: unlike even in typical algorithmic computation, ChatGPT doesn’t internally “have loops” or “recompute on data”. And that inevitably limits its computational capability—even with respect to current computers, but definitely with respect to the brain.</p>
<p>It’s not clear how to “fix that” and still maintain the ability to train the system with reasonable efficiency. But to do so will presumably allow a future ChatGPT to do even more “brain-like things”. Of course, there are plenty of things that brains don’t do so well<span>—</span>particularly involving what amount to irreducible computations. And for these both brains and things like ChatGPT have to seek “outside tools”—like <a href="https://www.wolfram.com/language/">Wolfram Language</a>.</p>
<p>But for now it’s exciting to see what ChatGPT has already been able to do. At some level it’s a great example of the fundamental scientific fact that large numbers of simple computational elements can do remarkable and unexpected things. But it also provides perhaps the best impetus we’ve had in two thousand years to understand better just what the fundamental character and principles might be of that central feature of the human condition that is human language and the processes of thinking behind it.</p>
<h2 id="thanks">Thanks</h2>
<p>I’ve been following the development of neural nets now for about 43 years, and during that time I’ve interacted with many people about them. Among them—some from long ago, some from recently, and some across many years—have been: Giulio Alessandrini, Dario Amodei, Etienne Bernard, Taliesin Beynon, Sebastian Bodenstein, Greg Brockman, Jack Cowan, Pedro Domingos, Jesse Galef, Roger Germundsson, Robert Hecht-Nielsen, Geoff Hinton, John Hopfield, Yann LeCun, Jerry Lettvin, Jerome Louradour, Marvin Minsky, Eric Mjolsness, Cayden Pierce, Tomaso Poggio, Matteo Salvarezza, Terry Sejnowski, Oliver Selfridge, Gordon Shaw, Jonas Sjöberg, Ilya Sutskever, Gerry Tesauro and Timothee Verdier.  For help with this piece, I’d particularly like to thank Giulio Alessandrini and Brad Klee.</p>
<h2 id="additional-resources">Additional Resources</h2>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Framework: A new RISC-V Mainboard from DeepComputing (393 pts)]]></title>
            <link>https://frame.work/blog/introducing-a-new-risc-v-mainboard-from-deepcomputing</link>
            <guid>40718124</guid>
            <pubDate>Tue, 18 Jun 2024 14:15:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://frame.work/blog/introducing-a-new-risc-v-mainboard-from-deepcomputing">https://frame.work/blog/introducing-a-new-risc-v-mainboard-from-deepcomputing</a>, See on <a href="https://news.ycombinator.com/item?id=40718124">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>We’re excited to share a preview of a <a href="https://frame.work/products/deep-computing-risc-v-mainboard">Framework Laptop 13 Mainboard with a new CPU architecture</a> today, and it’s probably not the one you think it is. The team at <a href="https://deepcomputing.io/" target="_blank" rel="noopener">DeepComputing</a> has built the first ever partner-developed Mainboard, and it uses a RISC-V processor! This is a huge milestone both for expanding the breadth of the Framework ecosystem and for making RISC-V more accessible than ever. We designed the Framework Laptop to enable deep flexibility and personalization, and now that extends all the way to processor architecture selection. DeepComputing is demoing an early prototype of this Mainboard in a Framework Laptop 13 at the RISC-V Summit Europe next week, and we’ll be sharing more as this program progresses.</p>
<p>There is excellent philosophical alignment between RISC-V and Framework. Both are built on the idea that an open ecosystem is more powerful than the sum of its parts. To explain why, first we’ll go into what RISC-V even is. <a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V</a> is a fully open Instruction Set Architecture (ISA), which is the interface point between software and hardware. It’s a defined set of instructions that software is compiled and assembled into that the processor executes to run the actual program. x86 (or the latest version, x86-64) is the most common ISA for PCs today, and it’s what is used in the processors for each Framework Laptop we’ve shipped to date. The x86 ISA was invented by Intel, extended on by AMD, and is proprietary, with Intel and AMD being effectively the only two companies able to use and create processors around it. ARM is another popular ISA, owned by Arm Holdings. Arm licenses the ARM architecture out, which enables companies to pay a license fee for cores to make their own processors that leverage it. What makes RISC-V unique is that it is an entirely open architecture, which means that anyone can extend on it and create their own processors that use it without paying a fee. RISC-V International is the collaborative organization that exists to help develop the standard and define common versions to ensure cross-compatibility of hardware and software. There are hundreds of companies now developing cores and chips around RISC-V, but most of these have been hidden away in embedded applications. The DeepComputing RISC-V Mainboard is one of the first instances of leveraging this ecosystem for the main processor in a consumer-facing product.</p>
<p>All of this is what makes RISC-V unique from an ecosystem enablement perspective. The actual technology is equally interesting. The base instruction set of RISC-V is simple and streamlined, while there are a number of extensions enabling high performance and specialized compute. This means that RISC-V cores can be developed for anything from tiny control CPUs embedded inside a sensor (the Fingerprint Reader we’ve used in Framework Laptops since 2021 actually has a RISC-V core!) to monstrous multi-hundred-core server processors. The DeepComputing RISC-V Mainboard uses a <a href="https://doc-en.rvspace.org/JH7110/PDF/JH7110_Product_Brief.pdf" target="_blank" rel="noopener">JH7110</a> processor from StarFive which has four <a href="https://starfivetech.com/uploads/u74mc_core_complex_manual_21G1.pdf" target="_blank" rel="noopener">U74 RISC-V cores</a> from SiFive. SiFive is the company that developed CPU cores using the RISC-V ISA, StarFive is the processor designer that integrated those CPU cores with other peripherals, DeepComputing created a Mainboard leveraging that processor, and Framework makes laptops that can use the Mainboard. The power of an open ecosystem!</p>
<p>This Mainboard is extremely compelling, but we want to be clear that in this generation, it is focused primarily on enabling developers, tinkerers, and hobbyists to start testing and creating on RISC-V. The peripheral set and performance aren’t yet competitive with our Intel and AMD-powered Framework Laptop Mainboards. This board also has soldered memory and uses MicroSD cards and eMMC for storage, both of which are limitations of the processor. It is a great way to start playing with RISC-V though inside of a thin, light, refined laptop. The Mainboard will be able to drop into any Framework Laptop 13 chassis or into the Cooler Master Mainboard Case. DeepComputing is also working closely with the teams at Canonical and Red Hat to ensure Linux support is solid through Ubuntu and Fedora. We’ll continue to keep you up to date as we work with the team at DeepComputing to complete development of this new Mainboard and enable access to it. You can <a href="https://frame.work/products/deep-computing-risc-v-mainboard">sign up in the Framework Marketplace</a> to get notified when we have updates.</p>
<p>We have a couple of other updates around scaling access to Framework Laptop 13. The first is that just like we did for Framework Laptop 16 last week, today we’re sharing <a href="https://github.com/FrameworkComputer/Framework-Laptop-13" target="_blank" rel="noopener">open source CAD for the Framework Laptop 13 shell</a>, enabling development of skins, cases, and accessories. The second is that we now have <a href="https://frame.work/products/factory-seconds-framework-laptop-13-diy-edition-11th-gen-intel-core">Framework Laptop 13 Factory Seconds</a> systems available with British English and German keyboards, making entering the ecosystem more affordable than ever. We’re eager to continue growing a new Consumer Electronics industry that is grounded in open access, repairability, and customization at every level.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sculpting the moon in R: Subdivision surfaces and displacement mapping (108 pts)]]></title>
            <link>https://www.tylermw.com/posts/rayverse/displacement-mapping.html</link>
            <guid>40717519</guid>
            <pubDate>Tue, 18 Jun 2024 13:19:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tylermw.com/posts/rayverse/displacement-mapping.html">https://www.tylermw.com/posts/rayverse/displacement-mapping.html</a>, See on <a href="https://news.ycombinator.com/item?id=40717519">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="quarto-content">






<main id="quarto-document-content">

<p><img src="https://www.tylermw.com/posts/images/2024/moon_preview.jpg"></p>


<blockquote>
<p>We like the moon<br>
The moon is very useful, everyone<br>
Everybody like the moon<br>
Because it light up the sky at night<br>
and it lovely and it makes the tides go<br>
and we like it<br>
But not as much as cheese<br>
We really like cheese</p>
</blockquote>
<p>— The Spongmonkies, 2002</p>
<section id="introduction">
<h2 data-anchor-id="introduction">Introduction</h2>
<div id="callout-1">
<p>In this post, we explore subdivision surfaces and displacement mapping within the rayverse, using the <code>rayvertex</code>, <code>rayimage</code>, and <code>rayrender</code> packages. We demonstrate how to create detailed and smooth 3D models by subdividing meshes and applying displacement textures. These techniques enhance both artistic and data visualization projects by providing realistic and intricate surface details.</p>
</div>
<div><p>Bumpy objects and smooth objects. These are the two demons you must slay if you want to be successful in 3D rendering. </p><p><span>Just kidding! There are thousands of demons you must slay. The princess is always in another castle.</span></p></div>
<div><p>Triangles, the primary building blocks of computer graphics, don’t directly lend themselves to either extremely smooth or realistically bumpy objects. Since triangles are flat primitives, borders between non-coplanar adjacent triangles will always have sharp edges. You can introduce approximations to work around this (such as per-vertex normals), but approximations always have failure modes, particularly with certain rendering algorithms. Bumpy objects suffer from the same issue: approximating a rough surface using a bump map or a normal map (which change the underlying surface normal without actually changing the geometry) can lead to non-physically accurate results.</p><p><span>There’s also NURBS, quadratic surfaces, curves, and more exotic objects</span></p></div>
<div><p>Historically, renderers worked around this by subdividing meshes into “micropolygons”: polygons smaller than a single pixel. This means triangle edges were not visible, as they only existed a on sub-pixel scale. This subdivision enabled the rendering of smooth objects and the rendered image no longer had visible discontinuities in the surface normal due to geometry. This subdivision process allowed for bumpy surfaces as well: by displacing the vertices of these micropolygons, you could easily generate highly detailed surfaces given a basic low-resolution mesh and a displacement texture. It can be significantly easier to work with displacement information in 2D form and use it to displace a low-resolution 3D mesh, rather than try to construct a fully-detailed 3D mesh directly. </p><p><span>The Reyes rendering algorithm–which brought us Toy Story and Star Trek II: Wrath of Khan–actually works off of quadrilaterals, not triangles, but the idea is the same</span><span>Rayshader has always performed a basic version of displacement mapping when generating meshes, but it’s been limited to displacing a flat surface.</span></p></div>
<div><p>This brings us to why I implemented subdivision surfaces and displacement mapping in the rayverse: there’s plenty of 2D data out there and not all of it lives on a flat, Cartesian plane. If you’re plotting data that spans the entire planet (or moon!), there’s always a struggle to pick the right projection, knowing that there’s no ideal way to transform a sphere to 2D without warping the data in some way. Expressing the data in its native curved space avoids those issues entirely.</p><p><span>While 3D plotting has its own set of issues, it also has many advantages–see <a href="https://www.tylermw.com/posts/data_visualization/3d-ggplots-with-rayshader.html">this blog post</a> for more information</span></p></div>
<p>So let’s dive into subdivision surfaces and displacement mapping! What is it, how it was implemented, things to keep in mind when using it, and what you can do with it in the rayverse.</p>

</section>
<section id="subdivision">

<p>We’ll start by loading three useful rayverse packages: <code>rayvertex</code> to construct <code>raymesh</code> objects and manipulate them directly, <code>rayimage</code> to manipulate displacement textures and load a variety of image files, and <code>rayrender</code> to visualize these meshes in a high-quality pathtracer.</p>
<div id="cb1"><pre><code><span id="cb1-1"><span>library</span>(rayvertex)</span>
<span id="cb1-2"><span>library</span>(rayimage)</span>
<span id="cb1-3"><span>library</span>(rayrender)</span></code></pre></div>
<div><p>Now, let’s render an image of some shapes with Loop subdivision. We’ll be using <code>rayvertex</code> because it renders faster and has more fine-grained control over the meshing process. Note here the new (as of <code>rayvertex</code> v0.11.0) print output showing a command-line preview of the materials, as well as a preview of the scene information.</p><p><span>Fun fact: Loop subdivision is not named after some cyclical mesh property or iterative process that the name might suggest: it’s actually named after the graphics researcher Charles Loop.</span></p></div>
<div>
<div id="annotated-cell-2"><pre><code><span id="annotated-cell-2-1">base_material <span>=</span> <span>material_list</span>(<span>diffuse=</span><span>"red"</span>, <span>ambient =</span> <span>"red"</span>,</span>
<span id="annotated-cell-2-2">                              <span>type =</span> <span>"phong"</span>, <span>shininess =</span> <span>5</span>,</span>
<span id="annotated-cell-2-3">                              <span>diffuse_intensity =</span> <span>0.8</span>, <span>ambient_intensity =</span> <span>0.2</span>)</span>
<span id="annotated-cell-2-4">base_material</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="1,2,3,4" data-code-annotation="1">Create and print the red cube material</span>
</dd>
</dl>
</div>
<pre><code><span>• rayvertex_material</span>
<span>•</span> <span>type:</span> phong
<span>•</span> <span>diffuse:</span> #ff0000 <span> </span> <span>| intensity:</span> 0.8
<span>•</span> <span>ambient:</span> #ff0000 <span> </span> <span>| intensity:</span> 0.2
<span>•</span> <span>shininess:</span> 5
</code></pre>
</div>
<div>
<div id="annotated-cell-3"><pre><code><span id="annotated-cell-3-1">base_material2 <span>=</span> <span>material_list</span>(<span>diffuse=</span><span>"purple"</span>, <span>ambient =</span> <span>"purple"</span>,</span>
<span id="annotated-cell-3-2">                               <span>type =</span> <span>"phong"</span>, <span>shininess =</span> <span>5</span>,</span>
<span id="annotated-cell-3-3">                               <span>diffuse_intensity =</span> <span>0.8</span>, <span>ambient_intensity =</span> <span>0.2</span>)</span>
<span id="annotated-cell-3-4">base_material2</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="1,2,3,4" data-code-annotation="1">Create and print the purple sphere material</span>
</dd>
</dl>
</div>
<pre><code><span>• rayvertex_material</span>
<span>•</span> <span>type:</span> phong
<span>•</span> <span>diffuse:</span> #a020f0 <span> </span> <span>| intensity:</span> 0.8
<span>•</span> <span>ambient:</span> #a020f0 <span> </span> <span>| intensity:</span> 0.2
<span>•</span> <span>shininess:</span> 5
</code></pre>
</div>
<p>Note how the materials print a preview of the actual colors and relevant (i.e.&nbsp;non-default) material settings. This is due to <code>rayvertex</code>’s new integration with the <code>cli</code> package and a whole collection of new pretty-print functions.</p>
<div>
<div id="annotated-cell-4"><pre><code><span id="annotated-cell-4-1">scene <span>=</span> <span>cube_mesh</span>(<span>material =</span> base_material, <span>scale =</span> <span>0.8</span>) <span>|&gt;</span></span>
<span id="annotated-cell-4-2">  <span>add_shape</span>(<span>sphere_mesh</span>(<span>radius=</span><span>0.5</span>,<span>position =</span> <span>c</span>(<span>-</span><span>1.2</span>,<span>0</span>,<span>0</span>), <span>low_poly =</span> <span>TRUE</span>,</span>
<span id="annotated-cell-4-3">                        <span>normals =</span> <span>TRUE</span>,</span>
<span id="annotated-cell-4-4">                        <span>material =</span> base_material2)) <span>|&gt;</span></span>
<span id="annotated-cell-4-5">  <span>add_shape</span>(<span>obj_mesh</span>(<span>r_obj</span>(), <span>position=</span><span>c</span>(<span>1.2</span>,<span>0</span>,<span>0</span>)))</span>
<span id="annotated-cell-4-6">scene</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="1,2,3,4,5" data-code-annotation="1">Create the 3D scene</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="6" data-code-annotation="2">Print the scene information</span>
</dd>
</dl>
</div>
<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>3</span> | <span>Unique Materials</span>: <span>4</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-1.69, -0.51, -0.49)</span> | <span>Max</span>: <span>c(1.70, 0.49, 0.51)</span>
             shapes  vertices texcoords   normals materials
          <span>&lt;ray_shp&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span>   <span>&lt;</span>T:<span>12</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span>     <span>&lt;</span><span>8</span><span>x</span><span>3</span><span>&gt;</span>     <span>&lt;</span><span>4</span><span>x</span><span>2</span><span>&gt;</span>     <span>&lt;</span><span>6</span><span>x</span><span>3</span><span>&gt;</span>   <span>&lt;</span><span>phong</span><span>&gt;</span>
<span>2</span>   <span>&lt;</span>T:<span>48</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span>    <span>&lt;</span><span>26</span><span>x</span><span>3</span><span>&gt;</span>    <span>&lt;</span><span>34</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;</span><span>26</span><span>x</span><span>3</span><span>&gt;</span>   <span>&lt;</span><span>phong</span><span>&gt;</span>
<span>3</span> <span>&lt;</span>T:<span>2280</span><span>|</span><span>UV</span><span>|N|</span>M:<span>6</span><span>&gt;</span>  <span>&lt;</span><span>1520</span><span>x</span><span>3</span><span>&gt;</span>  <span>&lt;</span><span>1520</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;none&gt;</span>      <span>&lt;</span><span>6x</span><span>&gt;</span>
</code></pre>
</div>
<p>The <code>rayvertex</code> scene information now also includes a dense, readable tabular summary of each individual mesh that makes up the scene. Rather than looking at a verbose print-out of lists of vertex data and material information, now you can get a sense of the scene at a glance.</p>
<div>
<div id="annotated-cell-5"><pre><code><span id="annotated-cell-5-1"><span>rasterize_scene</span>(scene, <span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-5-2">                <span>fov=</span><span>9</span>, <span>height =</span> <span>550</span>, <span>width=</span><span>1100</span>,</span>
<span id="annotated-cell-5-3">                <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>1</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>

<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/render_basic_scene-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>We’ve now rendered some basic low-polygon shapes. Low-polygon here means that you can clearly see lighting artifacts from the chunky triangles that make up the mesh: there are discontinuities on the sphere from the vertex normal interpolation, resulting in unphysical “lines” of light that run along the edges of the triangles.</p>
<p>Let’s subdivide the meshes with the new <code>subdivide_mesh()</code> function and determine how many subdivisions renders any individual triangle too small to see. Each subdivision level increases the number of triangles by a factor of four. We won’t initially add vertex normals so we can see exactly what’s going on with the geometry.</p>
<div>
<div id="annotated-cell-6"><pre><code><span id="annotated-cell-6-1">scene <span>|&gt;</span> </span>
<span id="annotated-cell-6-2">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>2</span>, <span>normals =</span> <span>FALSE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-6-3">  <span>rasterize_scene</span>(<span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-6-4">                  <span>fov=</span><span>9</span>, <span>height =</span> <span>550</span>, <span>width=</span><span>1100</span>,</span>
<span id="annotated-cell-6-5">                  <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0.2</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>

<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide2-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Note how the cube has shrunk considerably and the sharp edges of the letter R have collapsed in on themselves. This phenomenon occurs because subdivision algorithms, like Loop subdivision, work by averaging the positions of vertices to create a smoother surface. Sharp edges consisting of large triangles will be much more affected by this process. To fix this, we can turn off vertex interpolation and first apply a non-interpolated simple subdivision step and then follow it up with regular Loop subdivision step to more accurately maintain the initial shape of the object.</p>
<div>
<div id="annotated-cell-7"><pre><code><span id="annotated-cell-7-1">scene <span>|&gt;</span> </span>
<span id="annotated-cell-7-2">  <span>subdivide_mesh</span>(<span>normals =</span> <span>FALSE</span>, <span>simple =</span> <span>TRUE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-7-3">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>2</span>, <span>normals =</span> <span>FALSE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-7-4">  <span>rasterize_scene</span>(<span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-7-5">                  <span>fov=</span><span>9</span>, <span>height =</span> <span>550</span>, <span>width=</span><span>1100</span>,</span>
<span id="annotated-cell-7-6">                  <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0.2</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="2" data-code-annotation="1">Subdivide the scene but don’t smooth the mesh</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="3" data-code-annotation="2">Subdivide the scene normally, but don’t calculate normals to better show the triangle faces</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_basic-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Note how the cube is still cube-ish, but with nicely curved edges! The R logo looks nicer here too, as the large corner that makes up the R didn’t collapse. The only problem is the low-poly sphere is now more like a 20-sided D&amp;D die, which isn’t great if you’d like the limit of the subdivision process to result in an identical (but smoothed) version of the original mesh. But it’s nice to have a workflow for adding rounded bevels to models, which adding a simple subdivision step provides. Let’s get back to trying to trying to subdivide until we can’t tell the mesh is made of individual triangles anymore. How about three subdivisions?</p>
<div>
<div id="annotated-cell-8"><pre><code><span id="annotated-cell-8-1">scene <span>|&gt;</span> </span>
<span id="annotated-cell-8-2">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>3</span>, <span>normals =</span> <span>FALSE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-8-3">  <span>rasterize_scene</span>(<span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-8-4">                  <span>fov=</span><span>9</span>, <span>height =</span> <span>550</span>, <span>width=</span><span>1100</span>,</span>
<span id="annotated-cell-8-5">                  <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0.2</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="2" data-code-annotation="1">Subdivide the objects three times</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide3-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Not yet. Still visible. Let’s subdivide again.</p>
<div>
<div id="annotated-cell-9"><pre><code><span id="annotated-cell-9-1">scene <span>|&gt;</span> </span>
<span id="annotated-cell-9-2">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>4</span>, <span>normals =</span> <span>FALSE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-9-3">  <span>rasterize_scene</span>(<span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-9-4">                  <span>fov=</span><span>9</span>, <span>height =</span> <span>550</span>, <span>width=</span><span>1100</span>,</span>
<span id="annotated-cell-9-5">                  <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0.2</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-9" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="2" data-code-annotation="1">Subdivide the objects four times</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide4-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Almost! But no cigar.</p>
<div>
<div id="annotated-cell-10"><pre><code><span id="annotated-cell-10-1">scene <span>|&gt;</span></span>
<span id="annotated-cell-10-2">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>5</span>, <span>normals =</span> <span>FALSE</span>) <span>-&gt;</span></span>
<span id="annotated-cell-10-3">scene_5x</span>
<span id="annotated-cell-10-4"></span>
<span id="annotated-cell-10-5"><span>rasterize_scene</span>(scene_5x, <span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-10-6">                <span>fov=</span><span>9</span>, <span>height =</span> <span>550</span>, <span>width=</span><span>1100</span>,</span>
<span id="annotated-cell-10-7">                <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0.2</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="1,2,3" data-code-annotation="1">Render the scene</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="5,6,7" data-code-annotation="2">Subdivide the mesh five times and save it to an object</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide5-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>There we go. We can compare the before and after mesh sizes to see how mary more triangles this required to reach continuity. Note the number of vertices and the <code>T:</code> field in the <code>shapes</code> column indicating the number of triangles.</p>
<div>

<div>
<dl>
<dt data-target-cell="annotated-cell-11" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="1" data-code-annotation="1">Printing the scene information before subdivision</span>
</dd>
</dl>
</div>
<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>3</span> | <span>Unique Materials</span>: <span>4</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-1.69, -0.51, -0.49)</span> | <span>Max</span>: <span>c(1.70, 0.49, 0.51)</span>
             shapes  vertices texcoords   normals materials
          <span>&lt;ray_shp&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span>   <span>&lt;</span>T:<span>12</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span>     <span>&lt;</span><span>8</span><span>x</span><span>3</span><span>&gt;</span>     <span>&lt;</span><span>4</span><span>x</span><span>2</span><span>&gt;</span>     <span>&lt;</span><span>6</span><span>x</span><span>3</span><span>&gt;</span>   <span>&lt;</span><span>phong</span><span>&gt;</span>
<span>2</span>   <span>&lt;</span>T:<span>48</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span>    <span>&lt;</span><span>26</span><span>x</span><span>3</span><span>&gt;</span>    <span>&lt;</span><span>34</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;</span><span>26</span><span>x</span><span>3</span><span>&gt;</span>   <span>&lt;</span><span>phong</span><span>&gt;</span>
<span>3</span> <span>&lt;</span>T:<span>2280</span><span>|</span><span>UV</span><span>|N|</span>M:<span>6</span><span>&gt;</span>  <span>&lt;</span><span>1520</span><span>x</span><span>3</span><span>&gt;</span>  <span>&lt;</span><span>1520</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;none&gt;</span>      <span>&lt;</span><span>6x</span><span>&gt;</span>
</code></pre>
</div>
<div>

<div>
<dl>
<dt data-target-cell="annotated-cell-12" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-12" data-code-lines="1" data-code-annotation="1">Printing the scene information after subdivision</span>
</dd>
</dl>
</div>
<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>3</span> | <span>Unique Materials</span>: <span>4</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-1.63, -0.45, -0.45)</span> | <span>Max</span>: <span>c(1.70, 0.46, 0.45)</span>
                shapes    vertices   texcoords   normals materials
             <span>&lt;ray_shp&gt;</span>   <span>&lt;ray_dat&gt;</span>   <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span>   <span>&lt;</span>T:<span>12288</span><span>|</span><span>UV</span><span>|N|</span>M:<span>1</span><span>&gt;</span>    <span>&lt;</span><span>6146</span><span>x</span><span>3</span><span>&gt;</span>    <span>&lt;</span><span>6146</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;none&gt;</span>   <span>&lt;</span><span>phong</span><span>&gt;</span>
<span>2</span>   <span>&lt;</span>T:<span>49152</span><span>|</span><span>UV</span><span>|N|</span>M:<span>1</span><span>&gt;</span>   <span>&lt;</span><span>24578</span><span>x</span><span>3</span><span>&gt;</span>   <span>&lt;</span><span>24578</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;none&gt;</span>   <span>&lt;</span><span>phong</span><span>&gt;</span>
<span>3</span> <span>&lt;</span>T:<span>2334720</span><span>|</span><span>UV</span><span>|N|</span>M:<span>6</span><span>&gt;</span> <span>&lt;</span><span>1167360</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>1167360</span><span>x</span><span>2</span><span>&gt;</span>    <span>&lt;none&gt;</span>      <span>&lt;</span><span>6x</span><span>&gt;</span>
</code></pre>
</div>
<p>Yikes! We can see it grew by a lot: Five subdivision levels resulted in a <span>\(4^5 = 1024\)</span>x increase in the mesh size. Of course, we can turn the <code>normals</code> option back on, which then calculates smoothed vertex normals. With vertex normals, we only need three subdivision levels to achieve the same visual fidelity as the 5x subdivided mesh. Since the triangles are relatively small compared to the low-poly original, we won’t see the same sort of lighting discontinuities noted in the first render.</p>
<div>
<div id="cb5"><pre><code><span id="cb5-1"><span>translate_mesh</span>(<span>subdivide_mesh</span>(scene, <span>subdivision_levels =</span> <span>3</span>) ,<span>position=</span><span>c</span>(<span>0</span>,<span>1.1</span>,<span>0</span>)) <span>|&gt;</span> </span>
<span id="cb5-2">  <span>add_shape</span>(scene_5x) <span>|&gt;</span> </span>
<span id="cb5-3">  <span>add_shape</span>(<span>translate_mesh</span>(scene,<span>position=</span><span>c</span>(<span>0</span>,<span>2.2</span>,<span>0</span>))) <span>|&gt;</span> </span>
<span id="cb5-4">  <span>rasterize_scene</span>(<span>lookfrom =</span> <span>c</span>(<span>-</span><span>4</span>,<span>3</span>,<span>10</span>), <span>lookat=</span><span>c</span>(<span>-</span><span>0.05</span>,<span>1.1</span>,<span>0</span>),</span>
<span id="cb5-5">                  <span>fov=</span><span>18</span>, <span>height =</span> <span>1100</span>, <span>width=</span><span>1100</span>,</span>
<span id="cb5-6">                  <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0.2</span>,<span>1</span>,<span>2</span>)))</span></code></pre></div>
<div id="fig-subdivide_both">
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/fig-subdivide_both-1.png" width="1100">
</p>
<figcaption id="fig-subdivide_both-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Top Row: Original low-poly meshes. Middle Row: Highly subdivided (1024x triangles) scene without vertex normals. Bottom Row: 3x subdivided scene (64x triangles) with vertex normals.
</figcaption>
</figure>
</div>
</div>
<p>And that’s it for subdivision surfaces, at least for now!</p>
</section>
<section id="displacement-mapping">
<h2 data-anchor-id="displacement-mapping">Displacement Mapping</h2>
<div><p>We just subdivided a low-red mesh to make it smooth–how do we make it bumpy? We can do that by applying a displacement texture, which offsets each vertex via its vertex normal. Here’s an example of a displacement texture of the moon:</p><p><span>If there aren’t any vertex normals in the mesh, it first calculates them by averaging the directions of all the faces connected to a single vertex. This interface also supports vector displacement, but I’m not going to get into that in this post</span></p></div>
<div>
<div id="cb6"><pre><code><span id="cb6-1">disp_moon <span>=</span> <span>ray_read_image</span>(<span>"../images/2024/ldem_3_8bit.jpg"</span>) </span>
<span id="cb6-2"><span>plot_image</span>(disp_moon)</span></code></pre></div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/moon_disp_image-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Higher regions are lighter, and depressions are darker. If you’ve used worked in GIS software or with <code>rayshader</code> before, you might ask: isn’t this just a digital elevation model (DEM)? Sure is! Let’s check out the Monterey Bay data included in <code>rayshader</code> to see:</p>
<div>
<div id="annotated-cell-15"><pre><code><span id="annotated-cell-15-1"><span>library</span>(rayshader) </span>
<span id="annotated-cell-15-2"></span>
<span id="annotated-cell-15-3">montereybay <span>|&gt;</span></span>
<span id="annotated-cell-15-4">  <span>height_shade</span>(<span>texture =</span> <span>colorRampPalette</span>(<span>c</span>(<span>"black"</span>,<span>"white"</span>))(<span>100</span>)) <span>|&gt;</span></span>
<span id="annotated-cell-15-5">  <span>plot_map</span>()</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-15" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="3,4,5" data-code-annotation="1">Use rayshader to plot the black to white color mapping of the Monterey Bay DEM</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mont_bay-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>What displacement mapping does is allow this type of transformation to be applied to any 3D surface, rather than just a 2D plane (as in <code>rayshader</code>). So displacement mapping allows us to apply these displacements to a sphere. In a universe full of spheres and ellipsoids, this capability can be quite useful. Our image data ranges from 0-1 in this case, and the difference (from the mean elevation) between the highest point on the moon (6.7 miles) and the lowest (-5.4 miles) is 12.1 miles, which when compared to the moon’s radius (1,079.6 miles) is about a 1.1 percent variation. So with a unit sphere representing the moon, our displacement scale is 0.011.</p>
<div><p>Let’s visualize the displacement on a basic small sphere mesh. :</p><p><span>I have to call <code>smooth_normals_mesh()</code> and <code>add_sphere_uv_mesh()</code> because the displacement algorithm here requires one UV coordinate/normal per vertex</span></p></div>
<div>
<div id="annotated-cell-16"><pre><code><span id="annotated-cell-16-1">lights <span>=</span> <span>directional_light</span>(<span>c</span>(<span>1</span>,<span>0</span>,<span>0</span>)) <span>|&gt;</span></span>
<span id="annotated-cell-16-2">  <span>add_light</span>(<span>directional_light</span>(<span>c</span>(<span>-</span><span>1</span>,<span>0</span>,<span>0</span>),</span>
<span id="annotated-cell-16-3">                              <span>color=</span><span>"dodgerblue"</span>,</span>
<span id="annotated-cell-16-4">                              <span>intensity=</span><span>1</span>))</span>
<span id="annotated-cell-16-5"></span>
<span id="annotated-cell-16-6">white_material <span>=</span> <span>material_list</span>(<span>diffuse =</span> <span>"white"</span>,</span>
<span id="annotated-cell-16-7">                               <span>ambient =</span> <span>"white"</span>,</span>
<span id="annotated-cell-16-8">                               <span>diffuse_intensity =</span> <span>0.9</span>,</span>
<span id="annotated-cell-16-9">                               <span>ambient_intensity =</span> <span>0.1</span>)</span>
<span id="annotated-cell-16-10"></span>
<span id="annotated-cell-16-11"><span>sphere_mesh</span>(<span>material =</span> white_material) <span>|&gt;</span></span>
<span id="annotated-cell-16-12">  <span>smooth_normals_mesh</span>() <span>|&gt;</span></span>
<span id="annotated-cell-16-13">  <span>add_sphere_uv_mesh</span>(<span>override_existing =</span> <span>TRUE</span>) <span>-&gt;</span></span>
<span id="annotated-cell-16-14">basic_sphere_uv</span>
<span id="annotated-cell-16-15"></span>
<span id="annotated-cell-16-16">basic_sphere_uv <span>|&gt;</span></span>
<span id="annotated-cell-16-17">  <span>displace_mesh</span>(disp_moon, <span>displacement_scale =</span> <span>0.011</span>) <span>|&gt;</span></span>
<span id="annotated-cell-16-18">  <span>rasterize_scene</span>(<span>light_info =</span> lights, <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-16" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-16" data-code-lines="1,2,3,4" data-code-annotation="1">Generate the lighting for the scene</span>
</dd>
<dt data-target-cell="annotated-cell-16" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-16" data-code-lines="6,7,8,9" data-code-annotation="2">Generate the basic white material for the sphere</span>
</dd>
<dt data-target-cell="annotated-cell-16" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-16" data-code-lines="11,12,13,14" data-code-annotation="3">Create a smooth sphere and add unique normals and UV coordinates for each vertex</span>
</dd>
<dt data-target-cell="annotated-cell-16" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-16" data-code-lines="16,17,18" data-code-annotation="4">Displace the sphere with the moon data, scaled by 0.011, and render it</span>
</dd>
</dl>
</div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div>
<pre><code>Setting `lookat` to: c(-0.00, -0.00, 0.00)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/moon_disp-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Wait–nothing happened? What went wrong? Well, let’s look at the mesh info and compare the number of vertices in the mesh to the resolution of the image:</p>
<div>

<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>1</span> | <span>Unique Materials</span>: <span>1</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-1.00, -1.00, -1.00)</span> | <span>Max</span>: <span>c(1.00, 1.00, 1.00)</span>
            shapes  vertices texcoords   normals materials
         <span>&lt;ray_shp&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span> <span>&lt;</span>T:<span>960</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span>   <span>&lt;</span><span>482</span><span>x</span><span>3</span><span>&gt;</span>   <span>&lt;</span><span>482</span><span>x</span><span>2</span><span>&gt;</span>   <span>&lt;</span><span>482</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>diffuse</span><span>&gt;</span>
</code></pre>
</div>
<div>
<div id="annotated-cell-18"><pre><code><span id="annotated-cell-18-1"><span>dim</span>(disp_moon)</span>
<span id="annotated-cell-18-2"><span>prod</span>(<span>dim</span>(disp_moon)[<span>1</span><span>:</span><span>2</span>])</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-18" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-18" data-code-lines="2" data-code-annotation="1">Multiply the dimensions of the texture together to get the number of pixels</span>
</dd>
</dl>
</div>
<div>
<pre><code>[1]  512 1024    3
[1] 524288</code></pre>
</div>
</div>
<p>So there’s half a million points, but only about 500 total vertices. Let’s write a function to show ourselves exactly where and how much of the displacement map we’re sampling. The green pixels are the places in the elevation model we are actually using to displace out mesh.</p>
<div>
<div id="annotated-cell-19"><pre><code><span id="annotated-cell-19-1">get_displacement_access_info <span>=</span> <span>function</span>(mesh, image) {</span>
<span id="annotated-cell-19-2">  image_coords <span>=</span> <span>round</span>(<span>matrix</span>(<span>dim</span>(image)[<span>2</span><span>:</span><span>1</span>]<span>-</span><span>1</span>,<span>ncol=</span><span>2</span>,</span>
<span id="annotated-cell-19-3">                         <span>nrow=</span><span>nrow</span>(mesh<span>$</span>texcoords[[<span>1</span>]]),</span>
<span id="annotated-cell-19-4">                         <span>byrow=</span><span>TRUE</span>) <span>*</span> mesh<span>$</span>texcoords[[<span>1</span>]])</span>
<span id="annotated-cell-19-5"></span>
<span id="annotated-cell-19-6">  <span>for</span>(i <span>in</span> <span>seq_len</span>(<span>nrow</span>(image_coords))) {</span>
<span id="annotated-cell-19-7">    image[<span>1</span><span>+</span>image_coords[i,<span>2</span>],<span>1</span><span>+</span>image_coords[i,<span>1</span>],<span>1</span><span>:</span><span>3</span>] <span>=</span> <span>c</span>(<span>0</span>,<span>1</span>,<span>0</span>)</span>
<span id="annotated-cell-19-8">  }</span>
<span id="annotated-cell-19-9">  total_pixels <span>=</span> <span>as.integer</span>(<span>prod</span>(<span>dim</span>(image)[<span>1</span><span>:</span><span>2</span>]))</span>
<span id="annotated-cell-19-10">  total_pixels_sampled <span>=</span> <span>as.integer</span>(<span>sum</span>(image[,,<span>1</span>] <span>==</span> <span>0</span> <span>&amp;</span> image[,,<span>2</span>] <span>==</span> <span>1</span> <span>&amp;</span> image[,,<span>3</span>] <span>==</span> <span>0</span>))</span>
<span id="annotated-cell-19-11">  <span>message</span>(<span>sprintf</span>(<span>"Total pixels sampled: %i/%i (%0.5f%%)"</span>,</span>
<span id="annotated-cell-19-12">                  total_pixels_sampled, total_pixels, total_pixels_sampled<span>/</span>total_pixels<span>*</span><span>100</span>))</span>
<span id="annotated-cell-19-13">  <span>plot_image</span>(image)</span>
<span id="annotated-cell-19-14">}</span>
<span id="annotated-cell-19-15"><span>get_displacement_access_info</span>(basic_sphere_uv, disp_moon )</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-19" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="2,3,4" data-code-annotation="1">Take the UV coordinates (which range from 0-1) and map them to the pixel coordinates by multiplying the number of rows and columns by each UV pair.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="6,7,8" data-code-annotation="2">Loop over the image and set each accessed pixel to green.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="9" data-code-annotation="3">Calculate the total number of pixels.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="10" data-code-annotation="4">Calculate the total number of accessed (green) pixels.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="11,12" data-code-annotation="5">Print the access information.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="13" data-code-annotation="6">Plot the image with green pixels marking data used to displace the mesh.</span>
</dd>
</dl>
</div>
<div>
<pre><code>Total pixels sampled: 482/524288 (0.09193%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mesh_show_uv-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>So, we’re sampling 0.092% of the pixels in the image–no wonder it’s such a poor approximation! Let’s use subdivision to increase the size of our mesh, which should sample more of the underlying displacement texture and thus give us a better approximation.</p>
<div>
<div id="annotated-cell-20"><pre><code><span id="annotated-cell-20-1">generate_moon_mesh <span>=</span> <span>function</span>(subdivision_levels, displacement_texture, displacement_scale) {</span>
<span id="annotated-cell-20-2">  <span>sphere_mesh</span>(<span>material =</span> white_material) <span>|&gt;</span> </span>
<span id="annotated-cell-20-3">    <span>smooth_normals_mesh</span>() <span>|&gt;</span> </span>
<span id="annotated-cell-20-4">    <span>subdivide_mesh</span>(<span>subdivision_levels =</span> subdivision_levels) <span>|&gt;</span></span>
<span id="annotated-cell-20-5">    <span>add_sphere_uv_mesh</span>(<span>override_existing =</span> <span>TRUE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-20-6">    <span>displace_mesh</span>(displacement_texture, displacement_scale) <span>|&gt;</span></span>
<span id="annotated-cell-20-7">    <span>rotate_mesh</span>(<span>c</span>(<span>0</span>,<span>90</span>,<span>0</span>))</span>
<span id="annotated-cell-20-8">}</span>
<span id="annotated-cell-20-9">moon_subdivided_2 <span>=</span> <span>generate_moon_mesh</span>(<span>2</span>, disp_moon, <span>0.011</span>)</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-20" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-20" data-code-lines="4" data-code-annotation="1">Subdivide the moon</span>
</dd>
<dt data-target-cell="annotated-cell-20" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-20" data-code-lines="5" data-code-annotation="2">Add new UV coords with a spherical mapping</span>
</dd>
<dt data-target-cell="annotated-cell-20" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-20" data-code-lines="6" data-code-annotation="3">Displace with the displacement texture</span>
</dd>
<dt data-target-cell="annotated-cell-20" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-20" data-code-lines="7" data-code-annotation="4">Rotate the mesh to orient it at the camera</span>
</dd>
</dl>
</div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div id="cb14"><pre><code><span id="cb14-1"><span>rasterize_scene</span>(moon_subdivided_2, <span>light_info =</span> lights,</span>
<span id="cb14-2">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<pre><code>Setting `lookat` to: c(-0.00, -0.00, -0.00)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_displace2-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Still looks nothing like the moon. Let’s check out the displacement texture access pattern.</p>
<div>
<div id="cb16"><pre><code><span id="cb16-1"><span>get_displacement_access_info</span>(moon_subdivided_2, disp_moon )</span></code></pre></div>
<div>
<pre><code>Total pixels sampled: 7682/524288 (1.46523%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mesh_show_uv2-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Better, but still extremely sparse. What about three subdivision levels?</p>
<div>
<div id="cb18"><pre><code><span id="cb18-1">moon_subdivided_3 <span>=</span> <span>generate_moon_mesh</span>(<span>3</span>, disp_moon, <span>0.011</span>)</span></code></pre></div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div id="cb20"><pre><code><span id="cb20-1"><span>rasterize_scene</span>(moon_subdivided_3, <span>light_info =</span> lights,</span>
<span id="cb20-2">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<pre><code>Setting `lookat` to: c(-0.00, -0.00, -0.00)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_displace3-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Maybe some hints of craters? If you squint. Time to check the UV coords.</p>
<div>
<div id="cb22"><pre><code><span id="cb22-1"><span>get_displacement_access_info</span>(moon_subdivided_3 , disp_moon )</span></code></pre></div>
<div>
<pre><code>Total pixels sampled: 30722/524288 (5.85976%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mesh_show_uv3-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Alright, so we’re sampling the big craters with a decent density of points. I’ll note here that at a resolution of 512x1024 and about 500 vertices in our original mesh, we’ll need about a factor of 1000x more vertices to densely sample from our UV texture. Let’s march on and see if that’s the case.</p>
<div>
<div id="cb24"><pre><code><span id="cb24-1">moon_subdivided_4 <span>=</span> <span>generate_moon_mesh</span>(<span>4</span>, disp_moon, <span>0.011</span>)</span></code></pre></div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div id="cb26"><pre><code><span id="cb26-1"><span>rasterize_scene</span>(moon_subdivided_4, <span>light_info =</span> lights,</span>
<span id="cb26-2">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<pre><code>Setting `lookat` to: c(-0.00, -0.00, -0.00)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_displace4-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Okay, so we’re definitely starting to see distinct craters.</p>
<div>
<div id="cb28"><pre><code><span id="cb28-1"><span>get_displacement_access_info</span>(moon_subdivided_4 , disp_moon )</span></code></pre></div>
<div>
<pre><code>Total pixels sampled: 122840/524288 (23.42987%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mesh_show_uv4-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Much denser, but not connected. So indeed, we shall proceed to five subdivision levels.</p>
<div>
<div id="cb30"><pre><code><span id="cb30-1">moon_subdivided_5 <span>=</span> <span>generate_moon_mesh</span>(<span>5</span>, disp_moon, <span>0.011</span>)</span></code></pre></div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div id="cb32"><pre><code><span id="cb32-1"><span>rasterize_scene</span>(moon_subdivided_5, <span>light_info =</span> lights,</span>
<span id="cb32-2">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<pre><code>Setting `lookat` to: c(-0.00, -0.00, -0.00)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_displace5-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Look at that! Definite improvement over four. And the UV texcoord access?</p>
<div>
<div id="cb34"><pre><code><span id="cb34-1"><span>get_displacement_access_info</span>(moon_subdivided_5, disp_moon )</span></code></pre></div>
<div>
<pre><code>Total pixels sampled: 467649/524288 (89.19697%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mesh_show_uv5-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Definitely lots of densely interconnected green, along with some interesting patterns from what I can only assume are interpolation and sampling artifacts related to the original mesh structure. We’ll do six levels and see if there’s any difference.</p>
<div>
<div id="cb36"><pre><code><span id="cb36-1">moon_subdivided_6 <span>=</span> <span>generate_moon_mesh</span>(<span>6</span>, disp_moon, <span>0.011</span>)</span></code></pre></div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div id="cb38"><pre><code><span id="cb38-1"><span>rasterize_scene</span>(moon_subdivided_6, <span>light_info =</span> lights,</span>
<span id="cb38-2">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<pre><code>Setting `lookat` to: c(-0.00, -0.00, -0.00)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_displace6-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Everything’s a little sharper! But up close you can start to make out the individual pixels from the displacement mesh. Five is probably good enough.</p>
<div>

<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>1</span> | <span>Unique Materials</span>: <span>1</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-0.99, -1.00, -0.99)</span> | <span>Max</span>: <span>c(0.99, 1.00, 0.99)</span>
                shapes    vertices   texcoords     normals materials
             <span>&lt;ray_shp&gt;</span>   <span>&lt;ray_dat&gt;</span>   <span>&lt;ray_dat&gt;</span>   <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span> <span>&lt;</span>T:<span>3932160</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span> <span>&lt;</span><span>1966082</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>1966082</span><span>x</span><span>2</span><span>&gt;</span> <span>&lt;</span><span>1966082</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>diffuse</span><span>&gt;</span>
</code></pre>
<div id="cb42"><pre><code><span id="cb42-1"><span>get_displacement_access_info</span>(moon_subdivided_6, disp_moon )</span></code></pre></div>
<div>
<pre><code>Total pixels sampled: 504426/524288 (96.21162%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/mesh_show_uv6-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>However, 2 million vertices is a lot of wasted memory to sample our half million pixel image. Let’s use the new <code>displacement_sphere()</code> function to generate a sphere that has exactly one vertex per pixel in our texture. That way we aren’t under or oversampling our image.</p>
<div>
<div id="cb44"><pre><code><span id="cb44-1">moon_displacement_sphere <span>=</span> <span>displacement_sphere</span>(disp_moon, <span>displacement_scale =</span> <span>0.011</span>) <span>|&gt;</span> </span>
<span id="cb44-2">  <span>set_material</span>(<span>material =</span> white_material) <span>|&gt;</span> </span>
<span id="cb44-3">  <span>rotate_mesh</span>(<span>c</span>(<span>0</span>,<span>90</span>,<span>0</span>))</span></code></pre></div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
<div id="cb46"><pre><code><span id="cb46-1"><span>rasterize_scene</span>(moon_displacement_sphere, <span>light_info =</span> lights,</span>
<span id="cb46-2">                <span>lookat=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>10</span>),</span>
<span id="cb46-3">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/subdivide_displace_sphere-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Great! Let’s check out how much of the displacement texture was used to generate this mesh.</p>
<div>

<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>1</span> | <span>Unique Materials</span>: <span>1</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-1.01, -1.01, -1.01)</span> | <span>Max</span>: <span>c(1.00, 1.01, 1.00)</span>
                shapes   vertices  texcoords    normals materials
             <span>&lt;ray_shp&gt;</span>  <span>&lt;ray_dat&gt;</span>  <span>&lt;ray_dat&gt;</span>  <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span> <span>&lt;</span>T:<span>1045506</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span> <span>&lt;</span><span>524288</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>524288</span><span>x</span><span>2</span><span>&gt;</span> <span>&lt;</span><span>524288</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>diffuse</span><span>&gt;</span>
</code></pre>
<div id="cb49"><pre><code><span id="cb49-1"><span>get_displacement_access_info</span>(moon_displacement_sphere, disp_moon)</span></code></pre></div>
<div>
<pre><code>Total pixels sampled: 524288/524288 (100.00000%)</code></pre>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/disp_ideal-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>All green! Exactly as many vertices as pixels in the image, by construction. While this might sound good, this type of mesh can actually lead to visual artifacts. Let’s say we really cared about accurately visualizing the north and south poles. We’ll zoom in and see what they look like with this perfectly mapped mesh.</p>
<div>
<div id="cb51"><pre><code><span id="cb51-1"><span>rasterize_scene</span>(moon_displacement_sphere, </span>
<span id="cb51-2">                <span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0</span>,<span>1</span>,<span>-</span><span>1</span>)),</span>
<span id="cb51-3">                <span>lookat=</span><span>c</span>(<span>0</span>,<span>1</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>5</span>,<span>5</span>,<span>5</span>),</span>
<span id="cb51-4">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>2</span>) </span></code></pre></div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/poles-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Pucker up! We see here what’s referred to as “texture pinching” at the poles, which happens due to the convergence of the longitudinal lines and the corresponding increasing density of vertices. Not great for texturing if you have any interesting phenomena at the poles you want to accurately display. But there’s a better way to represent displaced data on a sphere: let’s take a cube object and subdivide it.</p>
<div>
<div id="annotated-cell-41"><pre><code><span id="annotated-cell-41-1"><span>cube_mesh</span>(<span>material =</span> white_material) <span>|&gt;</span></span>
<span id="annotated-cell-41-2">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>4</span>) <span>-&gt;</span></span>
<span id="annotated-cell-41-3">cube_low_res</span>
<span id="annotated-cell-41-4"></span>
<span id="annotated-cell-41-5"><span>rasterize_scene</span>(cube_low_res, <span>light_info =</span> lights,</span>
<span id="annotated-cell-41-6">                <span>lookat=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>10</span>),</span>
<span id="annotated-cell-41-7">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>6</span>)</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-41" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-41" data-code-lines="1,2,3" data-code-annotation="1">Subdivide a basic 8 vertex sphere</span>
</dd>
<dt data-target-cell="annotated-cell-41" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-41" data-code-lines="5,6,7" data-code-annotation="2">Render the subdivided sphere.</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/cube_example-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>This obviously isn’t a sphere, but we can fix that. Let’s project the vertices to a sphere centered at the origin. We’ll also remap the UV coordinates using the <code>add_sphere_uv_mesh()</code> function, and recalculate the normals post-projection using <code>smooth_normals_mesh()</code>.</p>
<div>
<div id="annotated-cell-42"><pre><code><span id="annotated-cell-42-1">map_cube_to_sphere <span>=</span> <span>function</span>(mesh) {</span>
<span id="annotated-cell-42-2">  project_vertex_to_sphere <span>=</span> <span>function</span>(x) {</span>
<span id="annotated-cell-42-3">    x<span>/</span><span>sqrt</span>(<span>sum</span>(x<span>*</span>x))</span>
<span id="annotated-cell-42-4">  }</span>
<span id="annotated-cell-42-5"></span>
<span id="annotated-cell-42-6">  mesh<span>$</span>vertices[[<span>1</span>]] <span>=</span> <span>t</span>(<span>apply</span>(mesh<span>$</span>vertices[[<span>1</span>]],<span>1</span>,project_vertex_to_sphere))</span>
<span id="annotated-cell-42-7">  <span>add_sphere_uv_mesh</span>(mesh, <span>override_existing =</span> <span>TRUE</span>) <span>|&gt;</span></span>
<span id="annotated-cell-42-8">    <span>smooth_normals_mesh</span>()</span>
<span id="annotated-cell-42-9">}</span>
<span id="annotated-cell-42-10"></span>
<span id="annotated-cell-42-11"><span>cube_mesh</span>(<span>material =</span> white_material) <span>|&gt;</span></span>
<span id="annotated-cell-42-12">  <span>subdivide_mesh</span>(<span>subdivision_levels =</span> <span>9</span>) <span>|&gt;</span></span>
<span id="annotated-cell-42-13">  <span>map_cube_to_sphere</span>()  <span>-&gt;</span></span>
<span id="annotated-cell-42-14">spherized_cube</span>
<span id="annotated-cell-42-15">spherized_cube</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-42" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-42" data-code-lines="1" data-code-annotation="1">Define a function to transform a mesh to a sphere</span>
</dd>
<dt data-target-cell="annotated-cell-42" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-42" data-code-lines="2,3,4" data-code-annotation="2">Define helper function to map vertices (centered at zero) to a sphere by dividing by their length, measured from the origin.</span>
</dd>
<dt data-target-cell="annotated-cell-42" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-42" data-code-lines="6" data-code-annotation="3">Apply the helper function to all the vertices in the mesh</span>
</dd>
<dt data-target-cell="annotated-cell-42" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-42" data-code-lines="7,8" data-code-annotation="4">Add UV coords and normals</span>
</dd>
<dt data-target-cell="annotated-cell-42" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-42" data-code-lines="11,12,13,14" data-code-annotation="5">Subdivide the cube nine times to get approximately half a million vertices (to match the resolution of the displacement texture)</span>
</dd>
<dt data-target-cell="annotated-cell-42" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-42" data-code-lines="15" data-code-annotation="6">Print the new subdivided cube-to-sphere mesh info</span>
</dd>
</dl>
</div>
<div>
<pre><code>── Scene Description ───────────────────────────────────────────────────────────</code></pre>
</div>
<pre><code><span>•</span> Summary - <span>Meshes</span>: <span>1</span> | <span>Unique Materials</span>: <span>1</span>
<span>ℹ</span> XYZ Bounds - <span>Min</span>: <span>c(-1.00, -1.00, -1.00)</span> | <span>Max</span>: <span>c(1.00, 1.00, 1.00)</span>
                shapes    vertices   texcoords     normals materials
             <span>&lt;ray_shp&gt;</span>   <span>&lt;ray_dat&gt;</span>   <span>&lt;ray_dat&gt;</span>   <span>&lt;ray_dat&gt;</span> <span>&lt;ray_mat&gt;</span>
<span>1</span> <span>&lt;</span>T:<span>3145728</span><span>|</span><span>UV</span><span>|</span><span>N</span><span>|</span>M:<span>1</span><span>&gt;</span> <span>&lt;</span><span>1572866</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>1572866</span><span>x</span><span>2</span><span>&gt;</span> <span>&lt;</span><span>1572866</span><span>x</span><span>3</span><span>&gt;</span> <span>&lt;</span><span>diffuse</span><span>&gt;</span>
</code></pre>
</div>
<div>
<div id="annotated-cell-43"><pre><code><span id="annotated-cell-43-1"><span>rasterize_scene</span>(spherized_cube, <span>light_info =</span> lights,</span>
<span id="annotated-cell-43-2">                <span>lookat=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>10</span>),</span>
<span id="annotated-cell-43-3">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>

<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/unnamed-chunk-4-1.png" width="1100"></p>
</figure>
</div>
</div>
<div><p>Looks like… a sphere. There’s nothing indicating this used to be a cube! And the nice thing about this mesh is it has no extreme convergence at the poles. Let’s displace the subdivided mesh and see how the moon looks.</p><p><span>“On the internet, no one knows you’re a cube.”</span></p></div>
<div>
<div id="annotated-cell-44"><pre><code><span id="annotated-cell-44-1">spherized_cube <span>|&gt;</span></span>
<span id="annotated-cell-44-2">  <span>displace_mesh</span>(disp_moon, <span>0.011</span>) <span>|&gt;</span></span>
<span id="annotated-cell-44-3">  <span>rotate_mesh</span>(<span>c</span>(<span>0</span>,<span>90</span>,<span>0</span>)) <span>-&gt;</span></span>
<span id="annotated-cell-44-4">cube_moon</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-44" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-44" data-code-lines="1,2,3,4" data-code-annotation="1">Displace the spherized cube</span>
</dd>
</dl>
</div>
<div>
<pre><code>Displacing mesh with 512x1024 texture</code></pre>
</div>
</div>
<div>
<div id="annotated-cell-45"><pre><code><span id="annotated-cell-45-1"><span>rasterize_scene</span>(cube_moon, <span>light_info =</span> lights,</span>
<span id="annotated-cell-45-2">                <span>lookat=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>0</span>,<span>0</span>,<span>10</span>),</span>
<span id="annotated-cell-45-3">                <span>width =</span> <span>1100</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>13</span>)</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-45" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-45" data-code-lines="1,2,3" data-code-annotation="1">Render the displaced mesh</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/cube_moon_render-1.png" width="1100"></p>
</figure>
</div>
</div>
<p>Looks good to me. Let’s compare the two polar meshes. Note that the initial poor rectangle-to-sphere mapping we did above is referred to as a “UV sphere” in 3D graphics.</p>
<div>
<div id="annotated-cell-46"><pre><code><span id="annotated-cell-46-1">moon_displacement_sphere <span>|&gt;</span></span>
<span id="annotated-cell-46-2">  <span>rasterize_scene</span>(<span>light_info =</span> <span>directional_light</span>(<span>c</span>(<span>0</span>,<span>1</span>,<span>-</span><span>1</span>)),</span>
<span id="annotated-cell-46-3">                  <span>lookat=</span><span>c</span>(<span>0</span>,<span>1</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>5</span>,<span>5</span>,<span>5</span>),</span>
<span id="annotated-cell-46-4">                  <span>width =</span> <span>550</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>2</span>, <span>plot =</span> <span>FALSE</span>) <span>-&gt;</span></span>
<span id="annotated-cell-46-5">polar_image</span>
<span id="annotated-cell-46-6"></span>
<span id="annotated-cell-46-7">cube_moon <span>|&gt;</span></span>
<span id="annotated-cell-46-8">  <span>rasterize_scene</span>(<span>light_info =</span>  <span>directional_light</span>(<span>c</span>(<span>0</span>,<span>1</span>,<span>-</span><span>1</span>)),</span>
<span id="annotated-cell-46-9">                <span>lookat=</span><span>c</span>(<span>0</span>,<span>1</span>,<span>0</span>), <span>lookfrom=</span><span>c</span>(<span>5</span>,<span>5</span>,<span>5</span>),</span>
<span id="annotated-cell-46-10">                <span>width =</span> <span>550</span>, <span>height =</span> <span>550</span>, <span>fov=</span><span>2</span>, <span>plot =</span> <span>FALSE</span>) <span>-&gt;</span></span>
<span id="annotated-cell-46-11">polar_image_cube</span>
<span id="annotated-cell-46-12"></span>
<span id="annotated-cell-46-13"><span>plot_image_grid</span>(<span>list</span>(polar_image,polar_image_cube),<span>dim =</span> <span>c</span>(<span>1</span>,<span>2</span>))</span></code></pre></div>
<div>
<dl>
<dt data-target-cell="annotated-cell-46" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-46" data-code-lines="1,2,3,4,5" data-code-annotation="1">Render and save the UV sphere displacement map to an image array</span>
</dd>
<dt data-target-cell="annotated-cell-46" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-46" data-code-lines="7,8,9,10,11" data-code-annotation="2">Render and save the spherized cube displacement map to an image array</span>
</dd>
<dt data-target-cell="annotated-cell-46" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-46" data-code-lines="13" data-code-annotation="3">Plot the images side by side using rayimage.</span>
</dd>
</dl>
</div>
<div>
<figure>
<p><img src="https://www.tylermw.com/posts/rayverse/displacement-mapping_files/figure-html/compare_polar_images-1.png" width="1100"></p>
<figcaption>Left: UV sphere. Right: Spherized cube.</figcaption>
</figure>
</div>
</div>
<p>No celestial b-hole! This option is included in the <code>displacement_sphere()</code> function by setting <code>use_cube = TRUE</code>.</p>
<p>And that’s it for the new features in <code>rayvertex</code> and <code>rayrender</code>! <code>rayrender</code> has both of these features, but they aren’t standalone functions: they are built-in to the mesh functions that support textures (e.g.&nbsp;<code>mesh3d_model()</code>, <code>obj_model()</code>, and <code>raymesh_model()</code>. You can install the latest development versions of both packages from r-universe or github via the following:</p>
<div id="cb54"><pre><code><span id="cb54-1"><span>install.packages</span>(<span>c</span>(<span>"rayvertex"</span>,<span>"rayrender"</span>), <span>repos =</span> <span>"https://tylermorganwall.r-universe.dev"</span>)</span>
<span id="cb54-2"><span>#or</span></span>
<span id="cb54-3">remotes<span>::</span><span>install_github</span>(<span>"tylermorganwall/rayvertex"</span>)</span>
<span id="cb54-4">remotes<span>::</span><span>install_github</span>(<span>"tylermorganwall/rayrender"</span>)</span></code></pre></div>
</section>
<section id="summary">
<h2 data-anchor-id="summary">Summary</h2>
<p>In this post, we’ve explored the concepts of subdivision surfaces and displacement mapping. We began by discussing the fundamental challenges in 3D rendering, such as the difficulty of representing smooth and bumpy objects using flat, planar triangles. We then delved into historical solutions, like the use of micropolygons, and how modern techniques, including Loop subdivision, allow for the creation of detailed and smooth 3D models.</p>
<p>I demonstrated how to implement these techniques using the rayvertex, rayimage, and rayrender packages. I showed you how subdividing a mesh can significantly increase its resolution, allowing for smoother and more detailed surfaces. Additionally, we examined how displacement mapping can be used to add realistic texture to 3D models by manipulating vertex positions based on a 2D texture map.</p>
</section>
</main> 

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[YaFSDP: a sharded data parallelism framework, faster for pre-training LLMs (120 pts)]]></title>
            <link>https://github.com/yandex/YaFSDP</link>
            <guid>40716701</guid>
            <pubDate>Tue, 18 Jun 2024 11:54:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/yandex/YaFSDP">https://github.com/yandex/YaFSDP</a>, See on <a href="https://news.ycombinator.com/item?id=40716701">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">YaFSDP</h2><a id="user-content-yafsdp" aria-label="Permalink: YaFSDP" href="#yafsdp"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/yandex/YaFSDP/blob/main/assets/yafsdp_logo.png#gh-light-mode-only"><img src="https://github.com/yandex/YaFSDP/raw/main/assets/yafsdp_logo.png#gh-light-mode-only" width="400px"></a>
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/yandex/YaFSDP/blob/main/assets/yafsdp_logo_white.png#gh-dark-mode-only"><img src="https://github.com/yandex/YaFSDP/raw/main/assets/yafsdp_logo_white.png#gh-dark-mode-only" width="400px"></a>
</p>
&nbsp;
<ul dir="auto">
<li><a href="#overview">Overview</a></li>
<li><a href="#advantages-over-fsdp">Advantages over FSDP</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#issues-and-questions">Issues and questions</a></li>
<li><a href="#citation">Citation</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">YaFSDP is a Sharded Data Parallelism framework, designed to work well with transformer-like
neural network architectures.</p>
<p dir="auto">You can find more info on YaFSDP internals in our blog posts on
<a href="https://medium.com/yandex/yafsdp-a-tool-for-faster-llm-training-and-optimized-gpu-utilization-is-no-632b7539f5b3" rel="nofollow">Medium</a>
and <a href="https://habr.com/ru/companies/yandex/articles/817509/" rel="nofollow">Habr</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Advantages over FSDP</h2><a id="user-content-advantages-over-fsdp" aria-label="Permalink: Advantages over FSDP" href="#advantages-over-fsdp"></a></p>
<p dir="auto">YaFSDP is up to 20% faster for pre-training LLMs and performs better in high
memory pressure conditions. It is designed to reduce communications and memory
operations overhead.</p>
<p dir="auto">YaFSDP:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/yandex/YaFSDP/blob/main/assets/ya_fsdp.png"><img src="https://github.com/yandex/YaFSDP/raw/main/assets/ya_fsdp.png" alt="ya_fsdp"></a></p>
<p dir="auto">FSDP:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/yandex/YaFSDP/blob/main/assets/fsdp.png"><img src="https://github.com/yandex/YaFSDP/raw/main/assets/fsdp.png" alt="fsdp"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Benchmarks</h3><a id="user-content-benchmarks" aria-label="Permalink: Benchmarks" href="#benchmarks"></a></p>
<p dir="auto">We've compared YaFSDP with FSDP on a variety of pre-training setups ranging from:</p>
<ul dir="auto">
<li>7B to 70B parameters</li>
<li>64 to 256 devices</li>
<li>2048 to 8192 tokens per sequence</li>
</ul>
<table>
<thead>
<tr>
<th>model</th>
<th>gpu-count</th>
<th>seq-len</th>
<th>num-ckpt-layers</th>
<th>speedup</th>
<th>YaFSDP iteration time (s)</th>
<th>FSDP iteration time (s)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Llama 2 7B</td>
<td>64</td>
<td>2048</td>
<td>0</td>
<td>9.92%</td>
<td>0.81</td>
<td>0.90</td>
</tr>
<tr>
<td>Llama 2 7B</td>
<td>64</td>
<td>4096</td>
<td>0</td>
<td>3.43%</td>
<td>1.16</td>
<td>1.21</td>
</tr>
<tr>
<td>Llama 2 7B</td>
<td>64</td>
<td>8192</td>
<td>0</td>
<td>2.68%</td>
<td>2.23</td>
<td>2.29</td>
</tr>
<tr>
<td>Llama 2 7B</td>
<td>128</td>
<td>2048</td>
<td>0</td>
<td>9.57%</td>
<td>0.87</td>
<td>0.97</td>
</tr>
<tr>
<td>Llama 2 7B</td>
<td>128</td>
<td>4096</td>
<td>0</td>
<td>2.42%</td>
<td>1.19</td>
<td>1.22</td>
</tr>
<tr>
<td>Llama 2 7B</td>
<td>128</td>
<td>8192</td>
<td>0</td>
<td>2.32%</td>
<td>2.25</td>
<td>2.31</td>
</tr>
<tr>
<td>Llama 2 13B</td>
<td>128</td>
<td>2048</td>
<td>0</td>
<td>12.10%</td>
<td>1.55</td>
<td>1.76</td>
</tr>
<tr>
<td>Llama 2 13B</td>
<td>128</td>
<td>4096</td>
<td>0</td>
<td>3.49%</td>
<td>2.06</td>
<td>2.14</td>
</tr>
<tr>
<td>Llama 2 34B</td>
<td>128</td>
<td>2048</td>
<td>0</td>
<td>20.70%</td>
<td>3.39</td>
<td>4.27</td>
</tr>
<tr>
<td>Llama 2 34B</td>
<td>256</td>
<td>2048</td>
<td>0</td>
<td>21.99%</td>
<td>3.51</td>
<td>4.50</td>
</tr>
<tr>
<td>Llama 2 34B</td>
<td>256</td>
<td>4096</td>
<td>5</td>
<td>8.35%</td>
<td>5.33</td>
<td>5.81</td>
</tr>
<tr>
<td>Llama 2 70B</td>
<td>256</td>
<td>2048</td>
<td>10</td>
<td>21.48%</td>
<td>6.97</td>
<td>8.87</td>
</tr>
<tr>
<td>Llama 2 70B</td>
<td>256</td>
<td>4096</td>
<td>50</td>
<td>7.17%</td>
<td>11.07</td>
<td>11.93</td>
</tr>
<tr>
<td>Llama 3 8B</td>
<td>64</td>
<td>2048</td>
<td>0</td>
<td>11.91%</td>
<td>0.97</td>
<td>1.10</td>
</tr>
<tr>
<td>Llama 3 8B</td>
<td>64</td>
<td>4096</td>
<td>0</td>
<td>7.86%</td>
<td>1.36</td>
<td>1.48</td>
</tr>
<tr>
<td>Llama 3 70B</td>
<td>256</td>
<td>2048</td>
<td>20</td>
<td>26.60%</td>
<td>7.17</td>
<td>9.76</td>
</tr>
</tbody>
</table>
<p dir="auto">Details:</p>
<ul dir="auto">
<li>In each run per-device batch size is set to 1.</li>
<li><code>speedup</code> represents relative iteration time decrease between YaFSDP and FSDP runs.</li>
<li><code>num-ckpt-layers</code> refers to the number of transformer layers to which
activation checkpointing was applied.</li>
<li>Performance was measured using a cluster of hosts with A100 80 GB GPUs.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Examples</h2><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">You can find examples of LLM training using 🤗 stack in the <code>examples</code> folder:</p>
<ol dir="auto">
<li><code>clm.md</code> for causal pre-training</li>
<li><code>sft.md</code> for supervised fine-tuning</li>
</ol>
<p dir="auto">Notice that both examples require a Docker image, which can be built using
<code>docker/build.sh</code> script. The image is based on the <a href="https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel-24-02.html" rel="nofollow">NVIDIA PyTorch
image</a>
with some patched 🤗 libraries. Patches for the libraries can be found in the
<code>patches</code> folder.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Issues and questions</h2><a id="user-content-issues-and-questions" aria-label="Permalink: Issues and questions" href="#issues-and-questions"></a></p>
<p dir="auto">If you encounter any bugs of have any questions <a href="https://github.com/yandex/YaFSDP/issues/new">feel free to open a GitHub issue</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Citation</h2><a id="user-content-citation" aria-label="Permalink: Citation" href="#citation"></a></p>
<p dir="auto">If you use this codebase, please cite it by using the following BibTeX entry:</p>
<div dir="auto" data-snippet-clipboard-copy-content="@misc{YaFSDP2024,
  author =       {Mikhail Khrushchev and Anton Frolov and Ruslan Vasilev},
  title =        {YaFSDP: Yet another Fully Sharded Data Parallel},
  howpublished = {\url{https://github.com/yandex/YaFSDP}},
  year =         {2024}
}"><pre><span>@misc</span>{<span>YaFSDP2024</span>,
  <span>author</span> =       <span><span>{</span>Mikhail Khrushchev and Anton Frolov and Ruslan Vasilev<span>}</span></span>,
  <span>title</span> =        <span><span>{</span>YaFSDP: Yet another Fully Sharded Data Parallel<span>}</span></span>,
  <span>howpublished</span> = <span><span>{</span>\url{https://github.com/yandex/YaFSDP}<span>}</span></span>,
  <span>year</span> =         <span><span>{</span>2024<span>}</span></span>
}</pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Chat Control: Incompatible with Fundamental Rights (765 pts)]]></title>
            <link>https://freiheitsrechte.org/en/themen/digitale-grundrechte/chatkontrolle</link>
            <guid>40715695</guid>
            <pubDate>Tue, 18 Jun 2024 09:34:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://freiheitsrechte.org/en/themen/digitale-grundrechte/chatkontrolle">https://freiheitsrechte.org/en/themen/digitale-grundrechte/chatkontrolle</a>, See on <a href="https://news.ycombinator.com/item?id=40715695">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="intro">
    <p>
      
      The EU Commission has presented a draft regulation that is to lay down rules for preventing and combating sexual violence against children (Chat Control Regulation). The planned regulation raises such significant fundamental rights concerns that the GFF is joining the debate while the draft is still being deliberated at EU level. The most important points of criticism at a glance.
    </p>
  </div><div id="g185914">
      
                
  
                                                      <figure id="c186055" role="figure" aria-labelledby="c186055-caption">
  <template><iframe width="200" height="113" src="https://www.youtube.com/embed/XFwdeB_h_yw?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" title="Chatkontrolle: Felix Reda erklärt die fünf größten Gefahren für unsere Grundrechte"></iframe></template>

  <div>
              <div>
          <picture>
  <img src="https://freiheitsrechte.org/external-images/__800x452_crop_center-center_none/https-i-ytimg-com-vi-xfwdeb-h-yw-hqdefault-jpg-3f056f.pjpeg" width="800" height="452" loading="lazy" role="presentation">
</picture>
        </div>
      
      <div>
        <p><strong>External Content from YouTube</strong></p>
        <p>Please see the privacy policy of YouTube if you are loading external content.</p>

        
      </div>
    </div>

      <figcaption id="c186055-caption">Felix Reda explains the five biggest threats for our fundamental rights</figcaption>
  </figure>
                      <p>The <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:52022PC0209&amp;from=EN" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>EU Commission's draft regulation on chat control</span></a> is currently being negotiated in the European Parliament and the Council of Ministers. With the fight against sexual violence against children, the draft pursues an objective that is essential for the protection of children and their rights and can justify restrictions of fundamental rights. However, there are considerable doubts about the effectiveness of the proposed measures. We are convinced that the draft violates the EU Charter of Fundamental Rights in crucial points. We have summarised the five most important fundamental rights objections to the chat control proposal here. </p>

<h3 id="chat-control-violates-the-right-to-privacy">
  <span>Chat control violates the right to privacy</span></h3>
<p>The EU Commission's proposal provides for a whole range of obligations for certain online services such as internet access providers, app stores, hosting platforms and interpersonal communications services. Interpersonal communications services are, for example, email services such as GMail or instant messaging services such as WhatsApp. The term “chat control" is often used colloquially to refer to the EU Commission’s draft regulation as a whole. Chat control in the narrower sense is the part of the draft according to which authorities can oblige providers of communications services such as WhatsApp to monitor private communications. This is a particularly serious restriction on the right to privacy and the protection of personal data (Art. 7 and 8 of the EU Charter of Fundamental Rights): The monitoring is not limited to persons specifically suspected of having committed a crime. Additionally, unlike data retention, which is also incompatible with the Charter but is limited to metadata – i.e. information about who communicated with whom at what time – chat control includes the surveillance of the contents of private messages.</p>
<p>Authorities can impose so-called "detection orders" against providers of interpersonal communications services. This means that authorities can, for example, oblige messenger services to monitor the communications of all their users. It is sufficient that the authority has identified a significant risk that the service in question is being used for the dissemination of depictions of sexual violence against children. Detection orders do not have to be limited to monitoring the communications of specific users who are under suspicion. Instead, authorities can order that the content of all communications of all users of the service be monitored preventively. This is therefore a form of <a href="https://verfassungsblog.de/my-spy-is-always-with-me/" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>mass surveillance without probable cause</span></a>.</p>
<p>Such a detection order can oblige service providers to filter content for known as well as unknown depictions of sexual violence against children. In addition, they can include an obligation to detect attempts by adults to solicit minors (grooming). Content detected in this way must be forwarded by the service providers to a newly created EU centre, which will pass the information on to the law enforcement authorities of the member states after a plausibility check. Although service providers are free to choose which technologies they use to comply with the detection order, these technologies must in any case be able to analyse the contents of communications. In order to detect known depictions of sexual violence against children, an automated comparison of sent media files with a reference database may be sufficient. To detect unknown depictions of sexual violence and grooming, machine learning must be used to analyse the semantic content of chats. These methods are particularly prone to error: they only make an assumption about the meaning of the content based on patterns in the analysed communication - without actually understanding the content or the context of the conversation. In its case law on data retention, the European Court of Justice has indicated that indiscriminate mass surveillance of the contents of communications would <a href="https://verfassungsblog.de/thank-you-very-much-your-mail-is-perfectly-fine/" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>violate the essence of the right to privacy</span></a>. </p>
<p>Indiscriminate mass surveillance is incompatible with the fundamental rights to privacy and data protection under the EU Charter, whether it involves encrypted or unencrypted communications. At the centre of public criticism of chat control, however, is the fact that the draft regulation does not exempt end-to-end encrypted communication services from detection orders. These services ensure that only the people involved in a private conversation can read the communication content – neither the service provider nor third parties can decrypt it. More and more people are specifically choosing end-to-end encrypted messengers to protect themselves. If the provider of such a messenger receives a detection order, it cannot reject it on the grounds that the service provider cannot access the contents of its users’ communications. The EU Commission's draft pays lip service to the importance of end-to-end encryption. However, service providers may only choose between technologies that allow them to detect illegal content in private communications, it states. In other words, service providers who offer end-to-end encryption without backdoors will not be able to implement any detection orders they may receive from authorities and thus come into conflict with the law. This attack on end-to-end encryption increases the intensity of the restriction of fundamental rights caused by indiscriminate mass surveillance.</p>
<h3 id="threat-of-chilling-effects-for-communication-freedoms">
  <span>Threat of chilling effects for communication freedoms</span></h3>
<p><a href="https://curia.europa.eu/juris/document/document.jsf?text=&amp;docid=232084&amp;pageIndex=0&amp;doclang=EN&amp;mode=lst&amp;dir=&amp;occ=first&amp;part=1&amp;cid=1248552" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>The European Court of Justice has already warned</span></a> on several occasions that indiscriminate mass surveillance has an indirect negative impact on freedom of expression (Article 11 of the EU Charter of Fundamental Rights): communication participants are prevented from freely expressing their opinions if they cannot be sure of the confidentiality of their communications. This particularly affects professional secrecy holders, such as journalists communicating with their sources, whistleblowers and opposition activists. This danger will be exacerbated if the Chat Control Regulation, as proposed by the EU Commission, attacks the end-to-end encryption of messenger services. The aforementioned groups of people use such messengers for good reason. If this possibility is taken away from them because service providers have to weaken end-to-end encryption, considerable "chilling effects", i.e. a deterrent effect for the exercise of the fundamental right to freedom of expression and information, can be expected.</p>
<p>This effect occurs regardless of whether service providers monitor the contents of private communications through a backdoor in the encryption technology or by scanning the content on the user's device before it is encrypted (client-side scanning). The communication participants expect their communication to remain confidential from the moment when they enter a message into the chat programme on their mobile phone – not only at the moment when this message is delivered to its addressee. The decisive factor is that the expectation of confidentiality and integrity of the communication process is shaken to such an extent that those affected feel compelled to restrict the exercise of their freedom of communication themselves. </p>
<h3 id="de-facto-filtering-obligations-for-hosting-providers-without-safeguards">
  <span>De facto filtering obligations for hosting providers without safeguards</span></h3>
<p>Public criticism of the proposal has concentrated on the phrase “chat control”, which highlights the planned obligations on messengers to scan private chats. But the planned obligations for hosting services that store third-party content on behalf of their users do not stand up to fundamental rights scrutiny either. Hosting services include those that make third-party content publicly available (platforms such as YouTube, hosting services of public websites) as well as those that offer their customers private cloud storage (Dropbox, iCloud Drive). They also include services where content is only accessible to a certain closed group of people (private accounts on Twitter, closed groups on Facebook, hosting providers of company websites with restricted access). Insofar as the planned obligations for hosting providers relate to non-public content, the threats to privacy and freedom of expression described under 1. and 2. are also relevant for hosting services. In addition, there are specific problems: many of the envisaged procedural fundamental rights safeguards for detection orders may end up being evaded entirely in the case of hosting services. This is due to the different privacy rules for communications on messengers on the one hand and hosting services on the other. </p>
<p>Hosting services (including private cloud storage providers such as Google Drive or Dropbox) can not only be required to scan private content under the Chat Control Regulation, they may also scan content voluntarily. The Chat Control Regulation stipulates that all service providers must first carry out their own risk analysis as to whether their services pose a risk of being abused for sexual violence against children. Only if, in the view of the authorities, a service provider responds to this risk analysis with insufficient voluntary measures will they impose a detection order. In the context of these self-selected measures, hosting service providers may resort to error-prone filters to monitor private user uploads. In this scenario, there is no public scrutiny of the impact of such measures on the fundamental rights of users.</p>
<p>In this respect, hosting services differ from messenger services: Messenger and email programmes such as Whatsapp, Signal or ProtonMail fall under the e-Privacy Directive, which in principle prohibits these service providers from monitoring the private communication content of their users. A temporary derogation from this prohibition, which itself raises <a href="https://www.patrick-breyer.de/wp-content/uploads/2021/03/Legal-Opinion-Screening-for-child-pornography-2021-03-04.pdf" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>serious fundamental rights concerns</span></a>, is to be replaced by the Chat Control Regulation. After the Chat Control Regulation comes into force, messengers and email service providers may only access the contets of private communications on the basis of a detection order. For hosting providers such as private cloud storage, on the other hand, the e-Privacy Directive with its ban on monitoring private communications does not apply. </p>
<p>For hosting providers, it will regularly be attractive to avoid a looming detection order through "voluntary" measures. In this way, the companies retain more control – also over the costs. There is a strong incentive to avoid costly measures to protect users' fundamental rights. A likely scenario, then, is that hosting services will 'voluntarily' deploy error-prone filtering programmes without the procedural safeguards foreseen for authorities’ detection orders.</p>
<p>Before imposing a detection order, an authority must weigh the risk posed by the service against the interference with the users' fundamental rights. In this regard, the European Court of Justice has set narrow limits for the mandatory <a href="https://curia.europa.eu/juris/liste.jsf?language=en&amp;num=C-401/19" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>use of filtering systems</span></a>. These are only compatible with the prohibition of general monitoring obligations if the filters function so faultlessly that the service providers do not have to perform an "independent assessment of the content" in order to rule out false positives. At least in the case of unknown depictions of sexual violence against children and grooming, the filter systems are incapable of meeting the Court’s standards. If a hosting service "voluntarily" filters content as part of its duty to minimise risk, there is no public assessment of whether the filtering systems are compatible with users’ fundamental rights. As a result, innocent users may <a href="https://www.nytimes.com/2022/08/21/technology/google-surveillance-toddler-photo.html" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>inadvertently locked out of their accounts or even falsely reported to law enforcement authorities</span></a>.</p>
<h3 id="website-blocking-obligations-require-surveillance-of-internet-users">
  <span>Website blocking obligations require surveillance of Internet users</span></h3>
<p>The draft regulation provides for blocking obligations on internet access providers relating to individual websites (URLs). Before an authority issues a blocking order, it must require internet access providers to provide the authority with information about users' access to the URL in question. To be able to collect the necessary information about the access to individual URLs and pass it on to the authorities, internet access providers would have to monitor the surfing behaviour of all their customers preventively and comprehensively. However, such surveillance would be incompatible with the prohibition on general monitoring obligations and with the fundamental right to privacy. Additionally, this information is technically inaccessible to the internet access providers if the URL is encrypted using the https protocol. Almost all websites now use https to ensure that, for example, address or credit card data that users enter into web forms is transmitted in encrypted form. The widespread use of https is <a href="https://www.bsi.bund.de/DE/Themen/Verbraucherinnen-und-Verbraucher/Informationen-und-Empfehlungen/Cyber-Sicherheitsempfehlungen/cyber-sicherheitsempfehlungen_node.html" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>recommended by the Federal Office for Information Security</span></a>.</p>
<p>The targeted blocking of individual URLs is equally impossible for internet access providers <a href="https://edpb.europa.eu/news/news/2022/proposal-combat-child-sexual-abuse-online-presents-serious-risks-fundamental-rights_en" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>without abandoning https encryption</span></a> and monitoring the contents of their users’ online activities. DNS-based website blocking is not suitable for the planned blocking of individual URLs, because DNS blocking always affects entire domains. A DNS block directed against an individual file on a share hosting platform would also affect all other content hosted by the same share hoster and would thus not meet the <a href="https://curia.europa.eu/juris/document/document.jsf?text=&amp;docid=149924&amp;pageIndex=0&amp;doclang=EN&amp;mode=lst&amp;dir=&amp;occ=first&amp;part=1&amp;cid=279088" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>requirement of the European Court of Justice that website blocking must be strictly targeted</span></a>. In practice, therefore, there is a considerable danger that internet access providers will either over-comply with the blocking orders to the detriment of users’ freedom of expression and information by using DNS blocking to block access to an entire domain. Or they will attempt to implement more targeted blocking and monitor the surfing behaviour of their customers, while sacrificing the security of online communications via https encryption in the process.</p>
<h3 id="age-verification-endangers-freedom-of-communication">
  <span>Age verification endangers freedom of communication</span></h3>
<h3>
  <span> </span></h3>
<p>The draft regulation stipulates that all providers of messenger and email services that are at risk of being used for grooming must verify the age of their users. The risk identified does not have to be significant – the obligation to implement age verification would therefore apply in principle to all email and messaging services that enable communication between minors and adults. In addition, the age verification obligation also applies to all app store providers. They must also prevent underage users from downloading apps that pose a significant risk of being used for grooming.</p>
<p>Service providers may choose between age assessment methods (for example, AI-based facial analysis, <a href="https://about.instagram.com/blog/announcements/new-ways-to-verify-age-on-instagram" target="_blank" rel="noopener noreferrer"><svg viewBox="0 0 200 200" role="presentation" focusable="false"><use xlink:href="https://freiheitsrechte.org/assets/icons/icons.ce777a03f1.svg#icon-external-link"></use></svg><span>as already used by Instagram</span></a>) and age verification methods (using an identity document or digital proof of identity). Both procedures are extremely intrusive for users. Age verification via identity documents comes close to banning anonymous internet use. AI-supported facial analysis, on the other hand, is often outsourced by service providers to external companies, leaving users with little control over the handling of this particularly sensitive personal data. If the technology makes a wrong assessment, young-looking adults can also be excluded from using certain apps. Those who do not possess identification documents or do not want to entrust their biometric data to a company are excluded from crucial communication technologies. Using a modern smartphone without an app store is hardly possible. Doing without messenger services is also unreasonable, especially for people who, for good reason, attach particular importance to anonymous internet use (whistleblowers, victims of stalking, politically persecuted people). In contrast to service providers, users cannot always choose between different age verification procedures. </p>
<p>For underage users (especially teenagers), their fundamental rights to freedom of expression and information are severely restricted if app stores categorically refuse to allow them to install certain apps without weighing these rights against the risk the app poses to underage users. Due to the <a href="https://freiheitsrechte.org/themen/freiheit-im-digitalen/grundrechte-im-digitalen"><span>strong market concentration in this area</span></a>, the possibilities to switch to an alternative app store are limited. </p>



            <figure id="c209972" role="figure">
  <div>
          <picture>
  <img src="https://freiheitsrechte.org/uploads/documents/_content_xl/Arcadia-Logo-Logotype-yellow-on-transparent_2023-03-09-110110_apny.jpg" srcset="https://freiheitsrechte.org/uploads/documents/_content_l/Arcadia-Logo-Logotype-yellow-on-transparent_2023-03-09-110110_apny.jpg 500w, https://freiheitsrechte.org/uploads/documents/_content_xl/Arcadia-Logo-Logotype-yellow-on-transparent_2023-03-09-110110_apny.jpg 1024w" width="1024" height="295" loading="lazy" role="presentation">
</picture>
      </div>

  </figure>
      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Chat Control Must Be Stopped – Now (827 pts)]]></title>
            <link>https://threema.ch/en/blog/posts/stop-chat-control</link>
            <guid>40715449</guid>
            <pubDate>Tue, 18 Jun 2024 08:49:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://threema.ch/en/blog/posts/stop-chat-control">https://threema.ch/en/blog/posts/stop-chat-control</a>, See on <a href="https://news.ycombinator.com/item?id=40715449">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ios-wrapper"><main role="main"><section id="article-604">
	

	
	
	<p><img src="https://threema.ch/blog/content/blog-chat-control.png" alt="Chat Control Must Be Stopped – Now!"></p>	<article>
		<p><b>With its legislative proposal known as “Chat Control,” the EU Commission is trying to establish an unprecedented mass-surveillance apparatus of Orwellian proportions in the European Union. If EU citizens don’t stand up for privacy now, it may be too late.</b></p>

<p>This Wednesday, June 19, 2024, the EU Council <a href="https://www.patrick-breyer.de/en/council-to-greenlight-chat-control-take-action-now/">could be</a> voting on the controversial Chat Control bill. Should it pass, the consequences would be devastating: Under the pretext of child protection, EU citizens would no longer be able to communicate in a safe and private manner on the Internet. The European market’s location advantage would suffer a massive hit due to a substantial decrease in data security. And EU professionals like lawyers, journalists, and physicians could no longer uphold their duty to confidentiality online. All while children wouldn’t be better protected in the least bit. On the contrary, Chat Control could have a negative impact on minors in particular.</p>

<div id="flap-content">
<p>The EU Commission’s proposed Child Sexual Abuse Regulation (commonly known as “Chat Control”) aims to combat the circulation of CSAM (child sexual abuse material) on digital platforms by requiring service providers to implement some sort of detection mechanism that automatically scans users’ (media) messages for both known and potential CSAM and reports detected cases to authorities.</p>
</div>

<p>It doesn’t matter how the EU Commission is trying to sell it – as “client-side scanning,” “upload moderation,” or “AI detection” –, Chat Control is still mass surveillance. And regardless of its technical implementation, mass surveillance is always an incredibly bad idea, for a whole plethora of reasons. Here are just three:</p>

<div id="info-1">
            <p>One distinguishing factor between totalitarian states and democracies is that only in the former can the government invade citizens’ privacy for no apparent reason. Modern democracies recognize privacy as a basic human right. The EU itself acknowledges it in the <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:12012P/TXT&amp;from=EN">Charter of Fundamental Rights</a> (article 7):</p>

            <blockquote>
                <p><i>Everyone has the right to respect for his or her private and family life, home and communications.</i></p>
            </blockquote>

            <p>Imagine, for example, the police could randomly enter your home without having any reason to believe you’re involved in illegal activities, simply to snoop around and see whether they can find something suspicious by sheer chance.
            </p>

            <p>In a healthy democracy, it should be the citizens who oversee the government – mass surveillance is the inversion of this democratic principle. With a measure like Chat Control, the EU would violate one of its own basic rights and put its citizens under general suspicion, thereby profoundly disrupting the trust between citizens and the government.
            </p>
        </div>

<div id="info-2">
            <p>Mass surveillance of standard communication channels like instant messengers only affects law-abiding citizens. Given their involvement in illegal activities, criminals will go to any length to avoid surveillance. After all, why would any criminal continue to use a communication channel that’s known to be under government surveillance?  
            </p>
            <p>However, flying under Chat Control’s radar wouldn’t even require resorting to some other, obscure means of communication that can’t be (or isn’t yet) surveilled. Criminals could, for example, simply manually encrypt illegal content before sharing it.
            </p>
            <p>Ordinary, unsuspecting Internet users, for whom it wouldn’t be practical to handle day-to-day communication with friends and family members in this manner, would therefore be the only ones really affected by mass surveillance. And besides <a href="https://www.spiegel.de/netzwelt/netzpolitik/kinderpornografie-zahl-der-falschen-verdaechtigungen-bei-online-bildern-massiv-gestiegen-a-a746b118-82e7-4560-8ba4-45f02489768c">inevitable false positives</a> (think family photos of a beach vacation), minors (i.e., the ones who should be protected) engaging in consensual “sexting” would probably amount for the vast majority of CSAM reports.
            </p>
        </div>

<div id="info-3">
            <p>It’s not just citizens’ privacy that would suffer from the proposed mass surveillance. Because Chat Control essentially requires communication services to install a backdoor, it’s also citizens’ security that would take a massive hit.</p>
            <p>The reason secure communication services like Threema employ end-to-end encryption is to make sure no one except the intended recipient is able to read a message, not even the service provider. Introducing a backdoor into such a system is like adding a weak link to a strong chain lock. Sure, the government can now open the lock without a key, but so can any burglar.
            </p>
            <p>The negative impact a backdoor has on security can hardly be overstated. It’s not just the first place anyone would try to penetrate a system that’s otherwise secure, it’s like an API for hackers. And EU interior ministers seem to be well aware of this: why else would <a href="https://www.eureporter.co/business/data/mass-surveillance-data/2024/04/15/leak-eu-interior-ministers-want-to-exempt-themselves-from-chat-control-bulk-scanning-of-private-messages/">they themselves want to be exempt from Chat Control’s surveillance?</a>
            </p>
        </div>

<p>Of course, sharing CSAM is an absolutely intolerable, horrific crime that must be punished. Before CSAM can be shared online, however, a child must have suffered abuse in real life, which is what effective child protection should be trying to prevent (and what Chat Control does not focus on). For this and many other reasons, child protection organizations such as Germany’s Federal Child Protection Association are against Chat Control, <a href="https://www.bundestag.de/resource/blob/935798/3c6f75f6c2056130bca757bf7b4d0445/Stellungnahme-Tuerk-data.pdf">arguing that it’s “neither proportionate nor effective</a>.”</p>

<p>Besides, there’s no way of really knowing whether Chat Control would actually be (or remain) limited to CSAM. Once the mass-surveillance apparatus is installed, it could easily be extended to detect content other than CSAM without anyone noticing it. From a service provider’s point of view, the detection mechanism, which is created and maintained by third parties, essentially behaves like a black box.</p>

<h3>What can you do?</h3>

<p>Since the matter may be decided this Wednesday, June 19, 2024, time is a critical factor. If you’re a EU citizen, please consider <a href="https://www.patrick-breyer.de/en/council-to-greenlight-chat-control-take-action-now/">contacting your government’s representative <i>today</i></a>, asking them to vote against Chat Control.</p>

<p>It may also help to take to the digital streets, spread the word online, and raise awareness for the EU’s dubious plan to establish an unprecedented mass-surveillance apparatus that would essentially nullify the right to data privacy and set a highly dangerous precedent in doing so.</p>

<div>
    <h4>What would Chat Control mean for Threema users in the EU?</h4>
    <p>While Threema would be subject to Chat Control, the business solution Threema Work would be out of scope according to our current knowledge. However it’s still not entirely clear how Chat Control would have to be implemented by service providers, and it’s questionable whether such a blatant violation of the right to privacy would hold up in European courts.
    </p>
    <p>What is crystal clear, however, is that there will never be a Threema version that’s spying on its users in any way, shape, or form. The reason Threema was created is to provide a highly secure, completely private, and anonymous means of communication. Once it’s no longer possible to offer such a service in the European Union, we will be forced to take consequences.
    </p>
    <p>We will carefully consider all options (including legal actions, technical workarounds, etc.) first, and if we come to the conclusion that there’s no other way, we’ll call on fellow communication services to join us in leaving the EU.
    </p>
</div>
	</article>
	
</section>



</main>



	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cyber Scarecrow, making your computer look 'scary' to malware (473 pts)]]></title>
            <link>https://www.cyberscarecrow.com/</link>
            <guid>40715250</guid>
            <pubDate>Tue, 18 Jun 2024 08:08:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cyberscarecrow.com/">https://www.cyberscarecrow.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40715250">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="scarecrow logo" loading="lazy" width="80" height="80" decoding="async" data-nimg="1" srcset="https://www.cyberscarecrow.com/_next/image?url=%2Fscarecrow_128.ico&amp;w=96&amp;q=75 1x, https://www.cyberscarecrow.com/_next/image?url=%2Fscarecrow_128.ico&amp;w=256&amp;q=75 2x" src="https://www.cyberscarecrow.com/_next/image?url=%2Fscarecrow_128.ico&amp;w=256&amp;q=75"></p><p>Software that runs in the background of your computer, which makes it look 'scary' to viruses and malware.</p><div><p><a href="https://www.cyberscarecrow.com/download">Download Scarecrow</a><a href="https://www.cyberscarecrow.com/about">How does it work? </a></p></div><br></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TikTag: bypassing ARM CPU MemTag via speculative execution attack (144 pts)]]></title>
            <link>https://arxiv.org/abs/2406.08719</link>
            <guid>40715018</guid>
            <pubDate>Tue, 18 Jun 2024 07:28:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2406.08719">https://arxiv.org/abs/2406.08719</a>, See on <a href="https://news.ycombinator.com/item?id=40715018">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2406.08719">View PDF</a>
    <a href="https://arxiv.org/html/2406.08719v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>ARM Memory Tagging Extension (MTE) is a new hardware feature introduced in ARMv8.5-A architecture, aiming to detect memory corruption vulnerabilities. The low overhead of MTE makes it an attractive solution to mitigate memory corruption attacks in modern software systems and is considered the most promising path forward for improving C/C++ software security. This paper explores the potential security risks posed by speculative execution attacks against MTE. Specifically, this paper identifies new TikTag gadgets capable of leaking the MTE tags from arbitrary memory addresses through speculative execution. With TikTag gadgets, attackers can bypass the probabilistic defense of MTE, increasing the attack success rate by close to 100%. We demonstrate that TikTag gadgets can be used to bypass MTE-based mitigations in real-world systems, Google Chrome and the Linux kernel. Experimental results show that TikTag gadgets can successfully leak an MTE tag with a success rate higher than 95% in less than 4 seconds. We further propose new defense mechanisms to mitigate the security risks posed by TikTag gadgets.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Juhee Kim [<a href="https://arxiv.org/show-email/1d3131e0/2406.08719">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 13 Jun 2024 00:48:51 UTC (7,817 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What happens to latency if service time is cut in half (2022) (108 pts)]]></title>
            <link>https://pveentjer.github.io/misc/2022/04/18/service-time-cut-in-half.html</link>
            <guid>40714544</guid>
            <pubDate>Tue, 18 Jun 2024 06:10:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pveentjer.github.io/misc/2022/04/18/service-time-cut-in-half.html">https://pveentjer.github.io/misc/2022/04/18/service-time-cut-in-half.html</a>, See on <a href="https://news.ycombinator.com/item?id=40714544">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <h2 id="introduction">Introduction</h2>

<p>The goal of this post is to determine how the latency is going to be impacted 
if the service time is going to be cut in half. I was watching a great <a href="https://youtu.be/03GsLxVdVzU">presentation</a> 
of Martin Thompson where he mentioned this <a href="https://youtu.be/03GsLxVdVzU?t=341">example</a> example and wanted 
to freshen up my queuing theory a bit and do some calculations.</p>

<h2 id="lots-of-formulas">Lots of formulas</h2>

<p>Let’s first get some formulas out of the way.</p>

<p>The mean latency as function of the utilization:</p><p>

\[R=\dfrac{1}{\mu(1-\rho)}\]

</p><ul>
  <li>\(R\) is latency (residency time)</li>
  <li>\(\mu\) is service rate</li>
  <li>\(\rho\) is utilization</li>
</ul>

<p>\(\mu\) is the reciprocal of service time \(S\).</p><p>

\[\mu=\dfrac{1}{S}\]

</p><p>And if we fill this in and simplify the formula a bit, we get the following:</p><p>

\[R=\dfrac{1}{\dfrac{1}{S}(1-\rho)}\]

\[R=\dfrac{S}{(1-\rho)}\]

</p><p>Another part we need is the calculation of the utilization:</p><p>

\[\rho = S \lambda\]

</p><ul>
  <li>\(\rho\) is the utilization</li>
  <li>\(\lambda\) is the arrival rate.</li>
  <li>\(S\) is the service time.</li>
</ul>

<p>This formula is known as the Utilization Law or Little’s Microscopic Law.</p>

<p>And this can be converted into a function that calculates the arrival rate as a function of utilization and service time:</p><p>

\[\lambda = \dfrac{S}{\rho}\]

</p><h2 id="comparing-the-latencies">Comparing the latencies</h2>

<p>In Martin’s example he has 2 services:</p>
<ul>
  <li>an unoptimized service with \(S=0.1\) seconds.</li>
  <li>an optimized service with \(S=0.05\) seconds</li>
</ul>

<p>To make it a bit more tangible let’s plot latency curves as function of utilization for both services.</p>

<p><img src="https://pveentjer.github.io/assets/utilization_plot.png" alt="utilization plot"></p>

<ul>
  <li>green: unoptimized service</li>
  <li>blue: optimized service</li>
</ul>

<p>The x-axis is the utilization and the y-axis is the latency.</p>

<p>The first thing we can calculate is the latency with a service time of 0.10 seconds and a utilization of 0.90 because this utilization Martin picked in his example:</p>

<p>\(R=\dfrac{S}{(1-\rho)}=\dfrac{0.10}{(1.0-0.90)}=1.0\) second.</p>

<p>The next part we need to determine is the arrival rate based on the utilization and service time. So with a service time of 0.10 and a utilization of 0.90 we get the following arrival rate:</p>

<p>\(\lambda = \dfrac{S}{\rho} = \dfrac{0.1}{1-0.9} = 10\) requests/second.</p>

<p>So if the service time is going to be cut in half, and we keep the same arrival rate, the utilization is going to be cut in half:</p><p>

\[\rho = S \lambda = 0.05 \times 10 = 0.45\]

</p><p>And if fill this into the calculate the latency is function of the utilization for the optimized service, we get:</p>

<p>\(R=\dfrac{S}{(1-\rho)} = \dfrac{0.05}{1-0.45}=0.091\) seconds.</p>

<p>We can see both the calculated latencies in the plot below:</p>

<p><img src="https://pveentjer.github.io/assets/utilization_plot_dots.png" alt="utilization plot"></p>

<p>So we went from a latency of 1 second to 0.091 seconds which is an \(\dfrac{1}{0.091}=11\) times improvement.</p>

<h2 id="discrepancy">Discrepancy</h2>

<p>Martin’s claim is that the latency improvement is 20x. But the results based on the above formulas don’t agree with that. He makes a remark that the unit of processing is half the calculated latency, but I don’t understand what he means or how this is relevant for the latency calculation.</p>

<p>I haven’t configured comments yet on this new website. So if you want to comment, send me a message on <a href="https://twitter.com/PeterVeentjer">Twitter</a>.</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Every Way to Get Structured Output from LLMs (157 pts)]]></title>
            <link>https://www.boundaryml.com/blog/structured-output-from-llms</link>
            <guid>40713952</guid>
            <pubDate>Tue, 18 Jun 2024 04:01:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.boundaryml.com/blog/structured-output-from-llms">https://www.boundaryml.com/blog/structured-output-from-llms</a>, See on <a href="https://news.ycombinator.com/item?id=40713952">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>By Sam Lijin - <a href="https://twitter.com/sxlijin">@sxlijin</a></p><p><em>Update (Jun 18): check out the discussion on <a href="https://news.ycombinator.com/item?id=40713952">Hacker News</a> and <a href="https://www.reddit.com/r/LocalLLaMA/comments/1di2r2x/every_way_to_get_structured_output_from_llms/">/r/LocalLLaMA</a>! Thanks
for all the feedback and comments, folks- keep it coming!</em></p><p>This post will be interesting to you if:</p><ul>
<li>you're trying to get structured output from an LLM,</li>
<li>you've tried <code>response_format: "json"</code> and function calling and been disappointed by the results,</li>
<li>you're tired of stacking regex on regex on regex to extract JSON from an LLM,</li>
<li>you're trying to figure out what your options are.</li>
</ul><p>Everyone using LLMs in production runs into this problem sooner or later: what
we really want is a magical black box that returns JSON in exactly the format we
want. Unfortunately, LLMs return English, not JSON, and it turns out that
converting English to JSON is kinda hard.</p><p>Here's every framework we could find that solves this problem, and how they compare.</p><p>(Disclaimer: as a player in this space, we're a little biased!)</p><h2 id="comparison"><a id="comparison">Comparison</a></h2><p>Note: we've omitted LangChain from this list because we haven't heard of anyone
using it in production - look no further than <a href="https://www.reddit.com/r/LangChain/top/?t=all">the top posts of all time on
/r/LangChain</a>.</p><p><sup>*</sup>: Honorable mention to Microsoft's <a href="https://github.com/microsoft/aici">AICI</a>, which is
working on creating a shim for cooperative constraints implemented in
Python/JS using a WASM runtime. Haven't included it in the list because it
seems more low-level than the others, and setup is very involved.</p><p><sup>1</sup>: Applying constraints to OpenAI models can be very error-prone,
because the OpenAI API does not expose sufficient information about the
underlying model operations for the framework to actually apply constraints
effectively. See <a href="https://lmql.ai/docs/models/openai.html#openai-api-limitations">this discussion about
limitations</a>
from the LMQL documentation.</p><p><sup>2</sup>: Transformers refers to "HuggingFace Transformers"</p><p><sup>3</sup>: Constrained streaming generation produces partial objects, but
no good ways of interacting with the partial objects, since they are not yet
parse-able. We only consider a framework to support streaming if it allows
interacting with the partial objects (e.g. if streaming back an object with
properties <code>foo</code> and <code>bar</code>, you can access <code>obj.foo</code> before <code>bar</code> has been
streamed to the client).</p><h2 id="criteria"><a id="criteria">Criteria</a></h2><p>Most of our criteria are pretty self-explanatory, but there are two that we
want to call out:</p><h3 id="does-it-handleprevent-malformed-json-if-so-how">Does it handle/prevent malformed JSON? If so, how?</h3><p>LLMs make a lot of the same mistakes that humans do when producing JSON
(e.g. a } in the wrong place or a missing comma), so
it's important that the framework can help you handle these errors.</p><p>A lot of frameworks "solve" this by feeding the malformed JSON back into the LLM
and asking it to repair the JSON. This kinda works, but it's also slow and
expensive. If your LLM calls individually take multiple seconds already, you
don't really want to make that even slower!</p><p>There are two techniques that exist for handling or preventing this: actually
parse the malformed JSON (BAML takes this approach) or constrain the LLM's token
generation to guarantee that valid JSON is produced (this is what Outlines,
Guidance, and a few others do).</p><p><strong>Parsing the malformed JSON is our preferred approach</strong>: it most closely aligns
with what the LLM was designed to do (emit tokens), is fast (takes microseconds),
and flexible (allows working with any LLM). It does have limitations: it can't
magically make sense of completely nonsensical JSON, after all.</p><p>Applying constraints to LLM token generation, by contrast, can be robust, but
has its own issues: doing this efficiently requires applying runtime transforms
to the model itself, so this only works with self-hosted models (e.g. Llama,
Transformers) and does not work with models like OpenAI's ChatGPT or Anthropic's
Claude.</p><h3 id="can-you-see-the-actual-prompt-do-you-have-full-control-over-the-prompt">Can you see the actual prompt? Do you have full control over the prompt?</h3><figure><img src="https://www.boundaryml.com/batman-show-me-the-prompt.jpeg"><figcaption>You might remember this from <a href="https://hamel.dev/blog/posts/prompt/">"Fuck You, Show Me The Prompt"</a>.</figcaption></figure><p>Prompts are how we "program" LLMs to give us output.</p><p>The best way to get an LLM to return structured data is to craft a prompt
designed to return data matching your specific schema. To do that, you need to</p><ol>
<li>see the prompt actually getting sent to ChatGPT, and</li>
<li>try different prompts.</li>
</ol><p>Most frameworks, unfortunately, have hardcoded templates baked in which
prevent doing this.</p><h2 id="example-code">Example code</h2><p>For each framework listed above, we've included example code, from the framework's documentation,
provides for how you would use it.</p><hr><h3 id="baml-python"><a id="example-baml-python">BAML (Python)</a></h3><p>From <a href="https://github.com/BoundaryML/baml-examples/blob/main/fastapi-starter/fast_api_starter/app.py"><code>baml-examples/fastapi-starter/fast_api_starter/app.py</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark"><span data-line=""><span>from</span><span> baml_client </span><span>import</span><span> b</span></span>
<span data-line=""> </span>
<span data-line=""><span>resume </span><span>=</span><span> """John Doe [...] Experience: Software Engineer Intern [...]"""</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> def</span><span> async_call</span><span>():</span></span>
<span data-line=""><span>  parsed </span><span>=</span><span> await</span><span> b.ExtractResume(resume)</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> def</span><span> streamed_call</span><span>():</span></span>
<span data-line=""><span>  stream </span><span>=</span><span> b.stream.ExtractResume(resume)</span></span>
<span data-line=""><span>  async</span><span> for</span><span> partial </span><span>in</span><span> stream:</span></span>
<span data-line=""><span>    print</span><span>(partial) </span><span># This is an object with auto complete for the partial Resume type</span></span>
<span data-line=""><span>  response </span><span>=</span><span> await</span><span> stream.get_final_result() </span><span># auto complete here to the full Resume type</span></span>
<span data-line=""> </span></code></pre></figure><p>From <a href="https://github.com/BoundaryML/baml-examples/blob/main/fastapi-starter/baml_src/extract_resume.baml"><code>baml-examples/fastapi-starter/baml_src/extract_resume.baml</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark"><code data-language="rust" data-theme="github-dark"><span data-line=""><span>class </span><span>Resume</span><span> {</span></span>
<span data-line=""><span>  name string</span></span>
<span data-line=""><span>  education </span><span>Education</span><span>[]</span></span>
<span data-line=""><span>  skills string[]</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>class </span><span>Education</span><span> {</span></span>
<span data-line=""><span>  school string</span></span>
<span data-line=""><span>  degree string</span></span>
<span data-line=""><span>  year int</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>function </span><span>ExtractResume</span><span>(raw_text</span><span>:</span><span> string) </span><span>-&gt;</span><span> Resume</span><span> {</span></span>
<span data-line=""><span>  client </span><span>GPT4</span></span>
<span data-line=""><span>  prompt #</span><span>"</span></span>
<span data-line=""><span>    Parse the following resume and return a structured representation of the data in the schema below.</span></span>
<span data-line=""> </span>
<span data-line=""><span>    Resume:</span></span>
<span data-line=""><span>    ---</span></span>
<span data-line=""><span>    {{raw_text}}</span></span>
<span data-line=""><span>    ---</span></span>
<span data-line=""> </span>
<span data-line=""><span>    Output JSON format (only include these fields, and no others):</span></span>
<span data-line=""><span>    {{ ctx.output_format(prefix=null) }}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    Output JSON:</span></span>
<span data-line=""><span>  "</span><span>#</span></span>
<span data-line=""><span>}</span></span></code></pre></figure><hr><h3 id="baml-ts"><a id="example-baml-ts">BAML (TS)</a></h3><p>From <a href="https://github.com/BoundaryML/baml-examples/blob/main/nextjs-starter/app/api/example_baml/route.ts"><code>baml-examples/nextjs-starter/app/api/example_baml/route.ts</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="ts" data-theme="github-dark"><code data-language="ts" data-theme="github-dark"><span data-line=""><span>import</span><span> b </span><span>from</span><span> './baml_client'</span></span>
<span data-line=""><span>import</span><span> { Role } </span><span>from</span><span> './baml_client/types'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>// Async call</span></span>
<span data-line=""><span>const</span><span> result</span><span> =</span><span> await</span><span> b.</span><span>ClassifyMessage</span><span>({</span></span>
<span data-line=""><span>    convo: [</span></span>
<span data-line=""><span>        {</span></span>
<span data-line=""><span>            role: Role.Customer,</span></span>
<span data-line=""><span>            content: </span><span>"I want to cancel my subscription"</span></span>
<span data-line=""><span>        }</span></span>
<span data-line=""><span>    ]</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line=""><span>// Streamed call</span></span>
<span data-line=""><span>const</span><span> stream</span><span> =</span><span> b.stream.</span><span>ClassifyMessage</span><span>({</span></span>
<span data-line=""><span>    convo: [</span></span>
<span data-line=""><span>        {</span></span>
<span data-line=""><span>            role: Role.Customer,</span></span>
<span data-line=""><span>            content: </span><span>"I want to cancel my subscription"</span></span>
<span data-line=""><span>        }</span></span>
<span data-line=""><span>    ]</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line=""><span>for</span><span> await</span><span> (</span><span>const</span><span> partial</span><span> of</span><span> stream) {</span></span>
<span data-line=""><span>    console.</span><span>log</span><span>(partial); </span><span>// Autocompletes to a Category[]</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""><span>const</span><span> final</span><span> =</span><span> await</span><span> stream.</span><span>get_final_result</span><span>(); </span><span>// Autocompletes to a Category[]</span></span></code></pre></figure><p>From <a href="https://github.com/BoundaryML/baml-examples/blob/main/fastapi-starter/baml_src/classify_message.baml"><code>baml-examples/nextjs-starter/baml_src/classify_message.baml</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark"><code data-language="rust" data-theme="github-dark"><span data-line=""><span>enum</span><span> Category</span><span> {</span></span>
<span data-line=""><span>    Refund</span></span>
<span data-line=""><span>    CancelOrder</span></span>
<span data-line=""><span>    TechnicalSupport</span></span>
<span data-line=""><span>    AccountIssue</span></span>
<span data-line=""><span>    Question</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>class </span><span>Message</span><span> {</span></span>
<span data-line=""><span>  role </span><span>Role</span></span>
<span data-line=""><span>  content string</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>enum</span><span> Role</span><span> {</span></span>
<span data-line=""><span>  Customer</span></span>
<span data-line=""><span>  Assistant</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>template_string </span><span>PrintMessage</span><span>(msg</span><span>:</span><span> Message</span><span>, prefix</span><span>:</span><span> string</span><span>?</span><span>) #</span><span>"</span></span>
<span data-line=""><span>  {{ _.role('user' if msg.role == "</span><span>Customer</span><span>" else 'assistant') }}</span></span>
<span data-line=""><span>  {% if prefix %}</span></span>
<span data-line=""><span>  {{ prefix }}</span></span>
<span data-line=""><span>  {% endif %}</span></span>
<span data-line=""><span>  {{ msg.content }}</span></span>
<span data-line=""><span>"</span><span>#</span></span>
<span data-line=""> </span>
<span data-line=""><span>function </span><span>ClassifyMessage</span><span>(convo</span><span>:</span><span> Message</span><span>[]) </span><span>-&gt;</span><span> Category</span><span>[] {</span></span>
<span data-line=""><span>  client </span><span>GPT4</span></span>
<span data-line=""><span>  prompt #</span><span>"</span></span>
<span data-line=""><span>    {# </span></span>
<span data-line=""><span>      Prompts are auto-dedented and trimmed.</span></span>
<span data-line=""><span>      We use JINJA for our prompt syntax</span></span>
<span data-line=""><span>      (but we added some static analysis to make sure it's valid!)</span></span>
<span data-line=""><span>    #}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    {{ ctx.output_format(prefix="</span><span>Classify</span><span> with the following json</span><span>:</span><span>") }}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    {% for c in convo %}</span></span>
<span data-line=""><span>    {{ PrintMessage(c, </span></span>
<span data-line=""><span>      'This is the message to classify:' if loop.last and convo|length &gt; 1 else null</span></span>
<span data-line=""><span>    ) }}</span></span>
<span data-line=""><span>    {% endfor %}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    {{ _.role('assistant') }}</span></span>
<span data-line=""><span>    JSON array of categories that match:</span></span>
<span data-line=""><span>  "</span><span>#</span></span>
<span data-line=""><span>}</span></span></code></pre></figure><hr><h3 id="baml-ruby"><a id="example-baml-ruby">BAML (Ruby)</a></h3><p>From <a href="https://github.com/BoundaryML/baml-ruby-starter/blob/main/examples.rb"><code>baml-ruby-starter/examples.rb</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="ruby" data-theme="github-dark"><code data-language="ruby" data-theme="github-dark"><span data-line=""><span>require_relative</span><span> "baml_client/client"</span></span>
<span data-line=""> </span>
<span data-line=""><span>b </span><span>=</span><span> Baml</span><span>::</span><span>BamlClient</span><span>.from_directory(</span><span>"baml_src"</span><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>input </span><span>=</span><span> "Can't access my account using my usual login credentials"</span></span>
<span data-line=""><span>classified </span><span>=</span><span> b.</span><span>ClassifyMessage</span><span>(</span><span>input:</span><span> input)</span></span>
<span data-line=""> </span>
<span data-line=""><span>puts</span><span> classified.categories</span></span></code></pre></figure><p>From <a href="https://github.com/BoundaryML/baml-ruby-starter/blob/main/baml_src/classify_message.baml"><code>baml-ruby-starter/baml_src/classify_message.baml</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark"><code data-language="rust" data-theme="github-dark"><span data-line=""><span>enum</span><span> Category</span><span> {</span></span>
<span data-line=""><span>    Refund</span></span>
<span data-line=""><span>    CancelOrder</span></span>
<span data-line=""><span>    TechnicalSupport</span></span>
<span data-line=""><span>    AccountIssue</span></span>
<span data-line=""><span>    Question</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>class </span><span>MessageFeatures</span><span> {</span></span>
<span data-line=""><span>    categories </span><span>Category</span><span>[]</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>function </span><span>ClassifyMessage</span><span>(input</span><span>:</span><span> string) </span><span>-&gt;</span><span> MessageFeatures</span><span> {</span></span>
<span data-line=""><span>  client </span><span>GPT4Turbo</span></span>
<span data-line=""> </span>
<span data-line=""><span>  prompt #</span><span>"</span></span>
<span data-line=""><span>    {# _.role("</span><span>system</span><span>") starts a system message #}</span></span>
<span data-line=""><span>    {{ _.role("</span><span>system</span><span>") }}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    Classify the following INPUT.</span></span>
<span data-line=""> </span>
<span data-line=""><span>    {{ ctx.output_format }}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    {# This starts a user message #}</span></span>
<span data-line=""><span>    {{ _.role("</span><span>user</span><span>") }}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    INPUT: {{ input }}</span></span>
<span data-line=""> </span>
<span data-line=""><span>    Response:</span></span>
<span data-line=""><span>  "</span><span>#</span></span>
<span data-line=""><span>}</span></span></code></pre></figure><hr><h3 id="instructor-python"><a id="example-instructor">Instructor (Python)</a></h3><p>From <a href="https://github.com/jxnl/instructor/blob/81b6a7607ccb701e00a35a5f90dda72ceb75f995/examples/classification/simple_prediction.py#L23-L37"><code>simple_prediction.py</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark"><span data-line=""><span>class</span><span> Labels</span><span>(</span><span>str</span><span>, </span><span>enum</span><span>.</span><span>Enum</span><span>):</span></span>
<span data-line=""><span>    SPAM</span><span> =</span><span> "spam"</span></span>
<span data-line=""><span>    NOT_SPAM</span><span> =</span><span> "not_spam"</span></span>
<span data-line=""> </span>
<span data-line=""><span>class</span><span> SinglePrediction</span><span>(</span><span>BaseModel</span><span>):</span></span>
<span data-line=""><span>    """</span></span>
<span data-line=""><span>    Correct class label for the given text</span></span>
<span data-line=""><span>    """</span></span>
<span data-line=""> </span>
<span data-line=""><span>    class_label: Labels</span></span>
<span data-line=""> </span>
<span data-line=""><span>def</span><span> classify</span><span>(data: </span><span>str</span><span>) -&gt; SinglePrediction:</span></span>
<span data-line=""><span>    return</span><span> client.chat.completions.create(</span></span>
<span data-line=""><span>        model</span><span>=</span><span>"gpt-3.5-turbo-0613"</span><span>,</span></span>
<span data-line=""><span>        response_model</span><span>=</span><span>SinglePrediction,</span></span>
<span data-line=""><span>        messages</span><span>=</span><span>[</span></span>
<span data-line=""><span>            {</span></span>
<span data-line=""><span>                "role"</span><span>: </span><span>"user"</span><span>,</span></span>
<span data-line=""><span>                "content"</span><span>: </span><span>f</span><span>"Classify the following text: </span><span>{</span><span>data</span><span>}</span><span>"</span><span>,</span></span>
<span data-line=""><span>            },</span></span>
<span data-line=""><span>        ],</span></span>
<span data-line=""><span>    )  </span><span># type: ignore</span></span>
<span data-line=""> </span>
<span data-line=""><span>prediction </span><span>=</span><span> classify(</span><span>"Hello there I'm a nigerian prince and I want to give you money"</span><span>)</span></span>
<span data-line=""><span>assert</span><span> prediction.class_label </span><span>==</span><span> Labels.</span><span>SPAM</span></span></code></pre></figure><hr><h3 id="instructor-js"><a id="example-instructor-js">instructor-js</a></h3><p>From <a href="https://github.com/instructor-ai/instructor-js/blob/f386ad71a48bc4b39c454bad1e4302e171e2dc78/examples/classification/simple_prediction/index.ts#L25-L47"><code>simple_prediction/index.ts</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="ts" data-theme="github-dark"><code data-language="ts" data-theme="github-dark"><span data-line=""><span>import</span><span> { z } </span><span>from</span><span> "zod"</span></span>
<span data-line=""> </span>
<span data-line=""><span>enum</span><span> CLASSIFICATION_LABELS</span><span> {</span></span>
<span data-line=""><span>  "SPAM"</span><span> =</span><span> "SPAM"</span><span>,</span></span>
<span data-line=""><span>  "NOT_SPAM"</span><span> =</span><span> "NOT_SPAM"</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>const</span><span> SimpleClassificationSchema</span><span> =</span><span> z.</span><span>object</span><span>({</span></span>
<span data-line=""><span>  class_label: z.</span><span>nativeEnum</span><span>(</span><span>CLASSIFICATION_LABELS</span><span>)</span></span>
<span data-line=""><span>})</span></span>
<span data-line=""> </span>
<span data-line=""><span>const</span><span> createClassification</span><span> =</span><span> async</span><span> (</span><span>data</span><span>:</span><span> string</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span data-line=""><span>  const</span><span> classification</span><span> =</span><span> await</span><span> client.chat.completions.</span><span>create</span><span>({</span></span>
<span data-line=""><span>    messages: [{ role: </span><span>"user"</span><span>, content: </span><span>`"Classify the following text: ${</span><span>data</span><span>}`</span><span> }],</span></span>
<span data-line=""><span>    model: </span><span>"gpt-3.5-turbo"</span><span>,</span></span>
<span data-line=""><span>    response_model: { schema: SimpleClassificationSchema, name: </span><span>"SimpleClassification"</span><span> },</span></span>
<span data-line=""><span>    max_retries: </span><span>3</span><span>,</span></span>
<span data-line=""><span>    seed: </span><span>1</span></span>
<span data-line=""><span>  })</span></span>
<span data-line=""> </span>
<span data-line=""><span>  return</span><span> classification</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>const</span><span> classification</span><span> =</span><span> await</span><span> createClassification</span><span>(</span></span>
<span data-line=""><span>  "Hello there I'm a nigerian prince and I want to give you money"</span></span>
<span data-line=""><span>)</span></span>
<span data-line=""><span>// OUTPUT: { class_label: 'SPAM' }</span></span>
<span data-line=""> </span>
<span data-line=""><span>console.</span><span>log</span><span>({ classification })</span></span>
<span data-line=""> </span>
<span data-line=""><span>assert</span><span>(</span></span>
<span data-line=""><span>  classification?.class_label </span><span>===</span><span> CLASSIFICATION_LABELS</span><span>.</span><span>SPAM</span><span>,</span></span>
<span data-line=""><span>  `Expected ${</span><span>classification</span><span>?.</span><span>class_label</span><span>} to be ${</span><span>CLASSIFICATION_LABELS</span><span>.</span><span>SPAM</span><span>}`</span></span>
<span data-line=""><span>)</span></span></code></pre></figure><hr><h3 id="typechat-python"><a id="example-typechat-python">TypeChat (Python)</a></h3><p>From <a href="https://github.com/microsoft/TypeChat/blob/main/python/examples/sentiment/demo.py"><code>examples/sentiment/demo.py</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark"><span data-line=""><span>import</span><span> asyncio</span></span>
<span data-line=""> </span>
<span data-line=""><span>import</span><span> sys</span></span>
<span data-line=""><span>from</span><span> dotenv </span><span>import</span><span> dotenv_values</span></span>
<span data-line=""><span>import</span><span> schema </span><span>as</span><span> sentiment</span></span>
<span data-line=""><span>from</span><span> typechat </span><span>import</span><span> Failure, TypeChatJsonTranslator, TypeChatValidator, create_language_model, process_requests</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> def</span><span> main</span><span>():    </span></span>
<span data-line=""><span>    env_vals </span><span>=</span><span> dotenv_values()</span></span>
<span data-line=""><span>    model </span><span>=</span><span> create_language_model(env_vals)</span></span>
<span data-line=""><span>    validator </span><span>=</span><span> TypeChatValidator(sentiment.Sentiment)</span></span>
<span data-line=""><span>    translator </span><span>=</span><span> TypeChatJsonTranslator(model, validator, sentiment.Sentiment)</span></span>
<span data-line=""> </span>
<span data-line=""><span>    async</span><span> def</span><span> request_handler</span><span>(message: </span><span>str</span><span>):</span></span>
<span data-line=""><span>        result </span><span>=</span><span> await</span><span> translator.translate(message)</span></span>
<span data-line=""><span>        if</span><span> isinstance</span><span>(result, Failure):</span></span>
<span data-line=""><span>            print</span><span>(result.message)</span></span>
<span data-line=""><span>        else</span><span>:</span></span>
<span data-line=""><span>            result </span><span>=</span><span> result.value</span></span>
<span data-line=""><span>            print</span><span>(</span><span>f</span><span>"The sentiment is </span><span>{</span><span>result.sentiment</span><span>}</span><span>"</span><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>    file_path </span><span>=</span><span> sys.argv[</span><span>1</span><span>] </span><span>if</span><span> len</span><span>(sys.argv) </span><span>==</span><span> 2</span><span> else</span><span> None</span></span>
<span data-line=""><span>    await</span><span> process_requests(</span><span>"😀&gt; "</span><span>, file_path, request_handler)</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span>if</span><span> __name__</span><span> ==</span><span> "__main__"</span><span>:</span></span>
<span data-line=""><span>    asyncio.run(main())</span></span></code></pre></figure><p>From <a href="https://github.com/microsoft/TypeChat/blob/main/python/examples/sentiment/schema.py"><code>examples/sentiment/schema.py</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark"><span data-line=""><span>from</span><span> dataclasses </span><span>import</span><span> dataclass</span></span>
<span data-line=""><span>from</span><span> typing_extensions </span><span>import</span><span> Literal, Annotated, Doc</span></span>
<span data-line=""> </span>
<span data-line=""><span>@dataclass</span></span>
<span data-line=""><span>class</span><span> Sentiment</span><span>:</span></span>
<span data-line=""><span>    """</span></span>
<span data-line=""><span>    The following is a schema definition for determining the sentiment of a some user input.</span></span>
<span data-line=""><span>    """</span></span>
<span data-line=""> </span>
<span data-line=""><span>    sentiment: Annotated[Literal[</span><span>"negative"</span><span>, </span><span>"neutral"</span><span>, </span><span>"positive"</span><span>],</span></span>
<span data-line=""><span>                         Doc(</span><span>"The sentiment for the text"</span><span>)]</span></span></code></pre></figure><hr><h3 id="typechat-typescript"><a id="example-typechat-ts">TypeChat (TypeScript)</a></h3><p>From <a href="https://github.com/microsoft/TypeChat/blob/main/typescript/examples/sentiment/src/main.ts"><code>examples/sentiment/src/main.ts</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="ts" data-theme="github-dark"><code data-language="ts" data-theme="github-dark"><span data-line=""><span>import</span><span> { createJsonTranslator, createLanguageModel } </span><span>from</span><span> "typechat"</span><span>;</span></span>
<span data-line=""><span>import</span><span> { processRequests } </span><span>from</span><span> "typechat/interactive"</span><span>;</span></span>
<span data-line=""><span>import</span><span> { createTypeScriptJsonValidator } </span><span>from</span><span> "typechat/ts"</span><span>;</span></span>
<span data-line=""><span>import</span><span> { SentimentResponse } </span><span>from</span><span> "./sentimentSchema"</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>const</span><span> dotEnvPath</span><span> =</span><span> findConfig</span><span>(</span><span>".env"</span><span>);</span></span>
<span data-line=""><span>assert</span><span>(dotEnvPath, </span><span>".env file not found!"</span><span>);</span></span>
<span data-line=""><span>dotenv.</span><span>config</span><span>({ path: dotEnvPath });</span></span>
<span data-line=""> </span>
<span data-line=""><span>const</span><span> model</span><span> =</span><span> createLanguageModel</span><span>(process.env);</span></span>
<span data-line=""><span>const</span><span> schema</span><span> =</span><span> fs.</span><span>readFileSync</span><span>(path.</span><span>join</span><span>(__dirname, </span><span>"sentimentSchema.ts"</span><span>), </span><span>"utf8"</span><span>);</span></span>
<span data-line=""><span>const</span><span> validator</span><span> =</span><span> createTypeScriptJsonValidator</span><span>&lt;</span><span>SentimentResponse</span><span>&gt;(schema, </span><span>"SentimentResponse"</span><span>);</span></span>
<span data-line=""><span>const</span><span> translator</span><span> =</span><span> createJsonTranslator</span><span>(model, validator);</span></span>
<span data-line=""> </span>
<span data-line=""><span>// Process requests interactively or from the input file specified on the command line</span></span>
<span data-line=""><span>processRequests</span><span>(</span><span>"😀&gt; "</span><span>, process.argv[</span><span>2</span><span>], </span><span>async</span><span> (</span><span>request</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span data-line=""><span>    const</span><span> response</span><span> =</span><span> await</span><span> translator.</span><span>translate</span><span>(request);</span></span>
<span data-line=""><span>    if</span><span> (</span><span>!</span><span>response.success) {</span></span>
<span data-line=""><span>        console.</span><span>log</span><span>(response.message);</span></span>
<span data-line=""><span>        return</span><span>;</span></span>
<span data-line=""><span>    }</span></span>
<span data-line=""><span>    console.</span><span>log</span><span>(</span><span>`The sentiment is ${</span><span>response</span><span>.</span><span>data</span><span>.</span><span>sentiment</span><span>}`</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></figure><p>From <a href="https://github.com/microsoft/TypeChat/blob/main/typescript/examples/sentiment/src/sentimentSchema.ts"><code>examples/sentiment/src/sentimentSchema.ts</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="ts" data-theme="github-dark"><code data-language="ts" data-theme="github-dark"><span data-line=""><span>export</span><span> interface</span><span> SentimentResponse</span><span> {</span></span>
<span data-line=""><span>    sentiment</span><span>:</span><span> "negative"</span><span> |</span><span> "neutral"</span><span> |</span><span> "positive"</span><span>;  </span><span>// The sentiment of the text</span></span>
<span data-line=""><span>}</span></span></code></pre></figure><hr><h3 id="typechat-cnet"><a id="example-typechat-dotnet">TypeChat (C#/.NET)</a></h3><p>From <a href="https://github.com/microsoft/typechat.net/blob/main/examples/Sentiment/Program.cs"><code>examples/Sentiment/Program.cs</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="csharp" data-theme="github-dark"><code data-language="csharp" data-theme="github-dark"><span data-line=""><span>using</span><span> Microsoft</span><span>.</span><span>TypeChat</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>namespace</span><span> Sentiment</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>public</span><span> class</span><span> SentimentApp</span><span> : </span><span>ConsoleApp</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>    JsonTranslator</span><span>&lt;</span><span>SentimentResponse</span><span>&gt; </span><span>_translator</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>    public</span><span> SentimentApp</span><span>()</span></span>
<span data-line=""><span>    {</span></span>
<span data-line=""><span>        OpenAIConfig</span><span> config</span><span> =</span><span> Config.</span><span>LoadOpenAI</span><span>();</span></span>
<span data-line=""><span>        // Although this sample uses config files, you can also load config from environment variables</span></span>
<span data-line=""><span>        // OpenAIConfig config = OpenAIConfig.LoadFromJsonFile("your path");</span></span>
<span data-line=""><span>        // OpenAIConfig config = OpenAIConfig.FromEnvironment();</span></span>
<span data-line=""><span>        _translator </span><span>=</span><span> new</span><span> JsonTranslator</span><span>&lt;</span><span>SentimentResponse</span><span>&gt;(</span><span>new</span><span> LanguageModel</span><span>(config));</span></span>
<span data-line=""><span>    }</span></span>
<span data-line=""> </span>
<span data-line=""><span>    public</span><span> override</span><span> async</span><span> Task</span><span> ProcessInputAsync</span><span>(</span><span>string</span><span> input</span><span>, </span><span>CancellationToken</span><span> cancelToken</span><span>)</span></span>
<span data-line=""><span>    {</span></span>
<span data-line=""><span>        SentimentResponse</span><span> response</span><span> =</span><span> await</span><span> _translator.</span><span>TranslateAsync</span><span>(input, cancelToken);</span></span>
<span data-line=""><span>        Console.</span><span>WriteLine</span><span>(</span><span>$"The sentiment is {</span><span>response</span><span>.</span><span>Sentiment</span><span>}"</span><span>);</span></span>
<span data-line=""><span>    }</span></span>
<span data-line=""><span>}</span></span></code></pre></figure><p>From <a href="https://github.com/microsoft/typechat.net/blob/main/examples/Sentiment/SentimentSchema.cs"><code>examples/Sentiment/SentimentSchema.cs</code></a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="csharp" data-theme="github-dark"><code data-language="csharp" data-theme="github-dark"><span data-line=""><span>using</span><span> System</span><span>.</span><span>Text</span><span>.</span><span>Json</span><span>.</span><span>Serialization</span><span>;</span></span>
<span data-line=""><span>using</span><span> Microsoft</span><span>.</span><span>TypeChat</span><span>.</span><span>Schema</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>namespace</span><span> Sentiment</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>public</span><span> class</span><span> SentimentResponse</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>    [</span><span>JsonPropertyName</span><span>(</span><span>"sentiment"</span><span>)]</span></span>
<span data-line=""><span>    [</span><span>JsonVocab</span><span>(</span><span>"negative | neutral | positive"</span><span>)]</span></span>
<span data-line=""><span>    public</span><span> string</span><span> Sentiment</span><span> { </span><span>get</span><span>; </span><span>set</span><span>; }</span></span>
<span data-line=""><span>}</span></span></code></pre></figure><hr><h3 id="marvin"><a id="example-marvin">Marvin</a></h3><p>From the <a href="https://www.askmarvin.ai/docs/text/functions/#parameters">Marvin docs</a>:</p><figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark"><span data-line=""><span>import</span><span> marvin</span></span>
<span data-line=""><span>from</span><span> pydantic </span><span>import</span><span> BaseModel</span></span>
<span data-line=""> </span>
<span data-line=""><span>class</span><span> Recipe</span><span>(</span><span>BaseModel</span><span>):</span></span>
<span data-line=""><span>    name: </span><span>str</span></span>
<span data-line=""><span>    cook_time_minutes: </span><span>int</span></span>
<span data-line=""><span>    ingredients: list[</span><span>str</span><span>]</span></span>
<span data-line=""><span>    steps: list[</span><span>str</span><span>]</span></span>
<span data-line=""> </span>
<span data-line=""><span>@marvin.fn</span></span>
<span data-line=""><span>def</span><span> recipe</span><span>(</span></span>
<span data-line=""><span>    ingredients: list[</span><span>str</span><span>], </span></span>
<span data-line=""><span>    max_cook_time: </span><span>int</span><span> =</span><span> 15</span><span>, </span></span>
<span data-line=""><span>    cuisine: </span><span>str</span><span> =</span><span> "North Italy"</span><span>, </span></span>
<span data-line=""><span>    experience_level:</span><span>str</span><span> =</span><span> "beginner"</span></span>
<span data-line=""><span>) -&gt; Recipe:</span></span>
<span data-line=""><span>    """</span></span>
<span data-line=""><span>    Returns a complete recipe that uses all the `ingredients` and </span></span>
<span data-line=""><span>    takes less than `max_cook_time`  minutes to prepare. Takes </span></span>
<span data-line=""><span>    `cuisine` style and the chef's `experience_level` into account </span></span>
<span data-line=""><span>    as well.</span></span>
<span data-line=""><span>    """</span></span></code></pre></figure></div><p>This is a living document, and we'll be updating it as we learn more about other frameworks.</p><p>If you have any questions, comments, or suggestions, feel free to reach out to us on <a href="https://discord.gg/BTNBeXGuaS">Discord</a> or Twitter at <a href="https://x.com/boundaryML">@boundaryml</a>. We're happy to also meet and help with any prompting / AI engineering questions you might have.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The upcoming iterator design for Go 1.23 (128 pts)]]></title>
            <link>https://www.gingerbill.org/article/2024/06/17/go-iterator-design/</link>
            <guid>40712720</guid>
            <pubDate>Tue, 18 Jun 2024 00:15:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gingerbill.org/article/2024/06/17/go-iterator-design/">https://www.gingerbill.org/article/2024/06/17/go-iterator-design/</a>, See on <a href="https://news.ycombinator.com/item?id=40712720">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<article>
<header>
	
	
	<p>
		<span>2024-06-17</span>
		</p>
</header>
<p><em>NOTE: This is based on, but completely rewritten, from a Twitter post: <a href="https://x.com/TheGingerBill/status/1802645945642799423">https://x.com/TheGingerBill/status/1802645945642799423</a></em></p>
<p><strong>TL;DR</strong> It makes Go <em>feel</em> too “functional” rather than being an unabashed imperative language.</p>
<p>I recently saw a post on <a href="https://x.com/ohmypy/status/1801180323406844062">Twitter</a> showing the upcoming Go iterator design for Go 1.23 (August 2024). From what I can gather, many people seem to dislike the design. I wanted to give my thoughts on it as a language designer.</p>
<p>The <em>merged PR</em> for the proposal can be found here: <a href="https://github.com/golang/go/issues/61897">https://github.com/golang/go/issues/61897</a></p>
<p>It has a in-depth explanation of the design explaining why certain approaches were chosen instead, so I do recommend reading it if you are familiar with Go.</p>
<p>Here is the example from the original Tweet I found:</p>
<pre><code>func Backward[E any](s []E) func(func(int, E) bool) {
	return func(yield func(int, E) bool) {
		for i := len(s)-1; i &gt;= 0; i-- {
			if !yield(i, s[i]) {
				// Where clean-up code goes
				return
			}
		}
	}
}

s := []string{"a", "b", "c"}
for _, el in range Backward(s) {
	fmt.Print(el, " ")
}
// c b a
</code></pre>
<p>This example is clear enough in <em>what</em> it does, but the entire design of it is a bit crazy to me for the general/majority use case.</p>
<p>From what I understand it appears that the code will be transformed into something like the following:</p>
<pre><code>Backward(s)(func(_ int, el string) bool {
	fmt.Print(el, " ")
	return true // `return false` would be the equivalent of an explicit `break`
})
</code></pre>
<p>This means that Go’s iterators are much closer to what some languages have with a “for each” method (e.g. <code>.forEach()</code> in JavaScript) and passing a callback to it. And fun fact, this approach is already possible in Go &lt;1.23 but it does not have the syntactic sugar to use it within a <code>for range</code> statement.</p>
<p>I will try to summarize the rationale Go 1.23 iterators, but it seems that they ware wanting to minimize a few factors:</p>
<ul>
<li>Make the iterator look/act like a generator from other languages (thus the <code>yield</code>)</li>
<li>Minimize the need for sharing too many stack frames</li>
<li>Allow for clean-up with <code>defer</code></li>
<li>Reduce data being stored outside of the control flow</li>
</ul>
<p>As <a href="https://research.swtch.com/">Russ Cox (rsc)</a> explains in the original proposal:</p>
<blockquote>
<p>Note regarding push vs pull iterator types: The vast majority of the time, push iterators are more convenient to implement and to use, because setup and teardown can be done around the yield calls rather than having to implement those as separate operations and then expose them to the caller. Direct use (including with a range loop) of the push iterator requires giving up storing any data in control flow, so individual clients may occasionally want a pull iterator instead. Any such code can trivially call Pull and defer stop.</p>
</blockquote>
<p>Russ Cox goes into more detail in his article <a href="https://research.swtch.com/pcdata">Storing Data in Control Flow</a> about why he likes this approach to design.</p>
<h3 id="more-complex-example">More Complex Example</h3>
<p><strong>NOTE:</strong> Do not worry about what this actually does, I just wanted to show an example of the clean-up needed with something like <code>defer</code>.</p>
<p>An example from the original PR shows an example of a much more complex approach requiring clean-up where values which are <em>pulled</em> directly:</p>
<pre><code>// Pairs returns an iterator over successive pairs of values from seq.
func Pairs[V any](seq iter.Seq[V]) iter.Seq2[V, V] {
	return func(yield func(V, V) bool) bool {
		next, stop := iter.Pull(it)
		defer stop()
		v1, ok1 := next()
		v2, ok2 := next()
		for ok1 || ok2 {
			if !yield(v1, v2) {
				return false
			}
		}
		return true
	}
}
</code></pre>
<h2 id="an-alternative-pseudo-proposal-state-machine">An Alternative Pseudo-Proposal (State Machine)</h2>
<p><strong>NOTE:</strong> I am not suggesting Go does this whatsoever.</p>
<p>When designing <a href="https://odin-lang.org/">Odin</a>, I wanted the ability for the user to design their own kind of “iterators”, but have them be very simple; in fact, just normal procedures. I didn’t want to add a special construct to the language just for this—this would complicate the language too much which is what I wanted to minimize in Odin.</p>
<p>One possible pseudo-proposal I could give for Go iterators would look like the following:</p>
<pre><code>func Backward[E any](s []E) func() (int, E, bool) {
	i := len(s)-1
	return func(onBreak bool) (idx int, elem E, ok bool) {
		if onBreak || !(i &gt;= 0) {
			// Where clean-up code goes, if there is any
			return
		}
		idx, elem, ok = i, s[i], true
		i--
		return
	}
}
</code></pre>
<p>This pseudo-proposal would operator like this:</p>
<pre><code>for it := Backward(s);; {
	_, el, ok := it(false)
	if !ok {
		break // it(true) does not need to be called because the `false` was called
	}

	fmt.Print(el, " ")
}
</code></pre>
<p>This is similar what I do in Odin <strong>BUT</strong> Odin does not support stack-frame-scope-capturing closures, only non-scope-capturing procedure literals. Because Go is garbage-collected, I see little need to no utilize them like this. The main difference is that Odin does not try to unify the ideas into one construct.</p>
<p>I know some people will this think this approach is a lot more complicated. It is doing the opposite of what Cox prefers with storing data in control flow, and store the data outside of it. But this is usually what I want from an iterator rather than what Go is going to do. And this is the problem: it removes the elegance of storing the data in the control flow–the push/pull distinction that Cox explains.</p>
<p><strong>NOTE:</strong> I am very much an imperative programmer and I like to know how things actually execute, rather than trying to make it “elegant looking” code. So the approach I wrote above is fundamentally about thinking with regards to execution.</p>
<p>n.b. The typeclass/interface route would not work in Go because this would not be an orthogonal design concept and actually be more confusing than necessary—this is why I did not originally propose it. Different languages have different requirements as to what works in them.</p>
<h2 id="gos-apparent-philosophy">Go’s Apparent Philosophy</h2>
<p>The approach that Go 1.23 takes seems to go in the face of the <em>apparent</em> philosophy of making Go for the general (frankly mediocre) programmer at Google who doesn’t want to (nor can) use a “complex” language like C++.</p>
<p>To quote <a href="http://herpolhode.com/rob/">Rob Pike</a>:</p>
<blockquote>
<p>The key point here is our programmers are Googlers, they’re not researchers. They’re typically, fairly young, fresh out of school, probably learned Java, maybe learned C or C++, probably learned Python. They’re not capable of understanding a brilliant language but we want to use them to build good software. So, the language that we give them has to be easy for them to understand and easy to adopt.</p>
</blockquote>
<p>I know many people are offended by this comment, but it’s <strong>brilliant</strong> language design by understanding who you are designing the language for. It is not insulting, but rather the a matter of fact statement as Go was originally for the people who work(ed) at Google, and similar industries. You might be a “better and more capable” programmer than the average Googler but that doesn’t matter. There is a reason people love Go: it’s simple, opinionated, and most people can pick it up very quickly.</p>
<p>However this iterator design does seem out of character to Go, especially for the someone like proposer Russ Cox (assuming he was <em>actual</em> the original proposer) on the Go team. It makes Go a lot more complicated, and even more “magical” too. I understand how the iterator system works because I am <em>literally</em> a language design and compiler implementer. It also has the possible issue to it won’t be a well performing approach either because of its need for closures and callbacks.</p>
<p>Maybe the argument for its design is that the <em>average Go programmer</em> is not meant to <strong>implement</strong> iterators but just <strong>use</strong> them. And that the majority of the iterators that people will need will be already available in Go’s standard library, or by the third-party package itself. So the onus is put on the package <em>writer</em>, not the package <em>user</em>.</p>
<p>This is why I think a lot of people seem to be “angry” over the design. It goes against everything Go was originally “meant to be” in the eyes of a lot of people, and it seems like a really complicated “mess”. I understand the “beauty” that it looks like a generator with the <code>yield</code> and inline code approach, but I do not think that is necessarily in the vein of what Go is to a lot of people. Go does hide a lot of how the magic works under the scenes, especially with garbage collection, <code>go</code>routines, <code>select</code> statement, and many other constructs. However, I think this is a little too magical in that it <em>exposes</em> the magic to the user a little too much, whilst looking overly complex to the average Go programmer.</p>
<p>The other aspect where people find this “confusing” is that it’s a <code>func</code> that returns <code>func</code> that takes a <code>func</code> as an argument. And that the body of the <code>for range</code> is transformed into a <code>func</code> and all <code>break</code>s (and other escaping control flow) are converted into a <code>return false</code>. It’s just three levels of procedures deep, which again feels like a functional language rather than an imperative language.</p>
<p><strong>NOTE:</strong> that I am not suggesting they replace the iterator design with what I am suggesting, but rather a generalized iterator approach may have not been a good thing Go in the first place. For me at least, Go is an unapologetic imperative language with first-class CSP-like constructs. It’s not trying to be a functional-like language. Iterators are in that weird place where they do exist in imperative languages, but they are very “functionally” as a concept. Iterators can be very <em>elegant</em> in functional languages, but in some many unabashed imperative languages, they always feel “weird” somehow <strong>because</strong> they are being unified into a separate construct rather than separating out the parts of it (initialize+iterator+destroy).</p>
<h2 id="aside-odins-approach">Aside: Odin’s Approach</h2>
<p>As I alluded to previously, in Odin an iterator is just a procedure call where the last value of the multiple return is just a boolean indicating whether to continue or not. And because Odin does not support closures, the equivalent Go <code>Backward</code> iterator in Odin is a little more code to type.</p>
<p><strong><strong>NOTE:</strong> Before people say “that looks even more complex”, please continue reading the article. Most Odin iterators are not like this, and I would never recommend writing such an iterator where a trivial for-loop would be preferred for both the reader and the writer of the code.</strong></p>
<pre><code>// Explicit struct for the state
Backward_Iterator :: struct($E: typeid) {
	slice: []E,
	idx:   int,
}

// Explicit construction for the iterator
backward_make :: proc(s: []$E) -&gt; Backward_Iterator(E) {
	return {slice = s, idx = len(s)-1}
}

backward_iterate :: proc(it: ^Backward_Iterator($E)) -&gt; (elem: E, idx: int, ok: bool) {
	if it.idx &gt;= 0 {
		elem, idx, ok = it.slice[it.idx], it.idx, true
		it.idx -= 1
	}
	return
}


s := []string{"a", "b", "c"}
it := backward_make(s)
for el, _ in backward_iterate(&amp;it) { // `for el in` could have been written too
	fmt.print(el, " ")
}
// c b a
</code></pre>
<p>This does <em>appear to be</em> a lot more complicated that the Go approach because it requires you to write a lot more code. However, it’s actually a hell of a lot simpler to understand, comprehend, and even faster to execute. The iterator does not call the for-loop’s body, rather the body calls the iterator. I know Cox loves the ability of <a href="https://research.swtch.com/pcdata">Storing Data in Control Flow</a>, and I do agree it is nice but does not fit well within Odin, especially with the lack of closures (because Odin is a manual memory managed language).</p>
<p>An “iterator” is just syntactic sugar for the following:</p>
<pre><code>for {
	el, _, ok := backward_iterate(&amp;it)
	if !ok {
		break
	}
	fmt.print(el, " ")
}

// With `or_break`

for {
	el, _ := backward_iterate(&amp;it) or_break
	fmt.print(el, " ")
}
</code></pre>
<p>Odin’s approach is just removing the magic and making it extremely clear what is going on. “Construction” and “destruction” must be handled manually with explicit procedures. And that iteration is just a simple procedure which is called each loop. All three constructs are handled separately rather merged into one confusing one like in Go 1.23.</p>
<p>Odin does not hide the magic, whilst Go’s approach is actually very magical. Odin makes you handle the “closure-like” values manually along with the construction and destruction of the “iterator” itself.</p>
<p>Odin’s approach also trivially allows you to have as many multiple return values as wanted too! A good example of this is Odin’s <code>core:encoding/csv</code> package where the <code>Reader</code> can be treated like an iterator:</p>
<pre><code>// core:encoding/csv
iterator_next :: proc(r: ^Reader) -&gt; (record: []string, idx: int, err: Error, more: bool) {...}
</code></pre>
<pre><code>// User code
for record, idx, err in csv.iterator_next(&amp;reader) {
	...
}
</code></pre>
<h2 id="aside-c-iterators">Aside: C++ Iterators</h2>
<p>I will try to not get into a huge rant about C++ “iterators” in this article. C++ iterators are much more than <em>mere iterators</em> whilst at least Go’s approach is still a <em>mere iterator</em>. I completely understand why C++ “iterators” do what they do, but 99.99% of the time I just want a <em>mere iterator</em>; not something that has all of the algebraic properties that allow it to be utilized in more “general” places.</p>
<p>For people who don’t know C++ very well, an iterator is a custom <code>struct</code>/<code>class</code> which requires it to have overloaded <code>operators</code> on it to make it act like a “pointer”. Historically, a C++ “iterator” would look like this:</p>
<pre><code>{
	auto &amp;&amp; __range = range-expression ;
	auto __begin = begin-expr ;
	auto __end = end-expr ;
	for ( ; __begin != __end; ++__begin) {
		range-declaration = *__begin;
		loop-statement
	}
}
</code></pre>
<p>And would be wrapped in a “macro” before C++11 ranged-for loop syntax (and <code>auto</code>) became a thing.</p>
<p>The biggest issue is that C++ “iterators” require you to define 5 different operations at a minimum.</p>
<p>The following three operator overloads:</p>
<ul>
<li><code>operator==</code> or <code>operator!=</code></li>
<li><code>operator++</code></li>
<li><code>operator*</code></li>
</ul>
<p>Along with two stand-alone procedures or bound methods which return an iterator value:</p>
<ul>
<li><code>begin</code></li>
<li><code>end</code></li>
</ul>
<p>If I was to design C++ <em>mere iterators</em>, I would have just add a simple method to a <code>struct</code>/<code>class</code> called <code>iterator_next</code> or something. And that’s it. Yes it does mean the other algebraic properties are lost, but I honestly do not need these EVER for any problem I am working on. When I am working on those kinds of problems, they will always be either a contiguous array, or I will implement the algorithm manually because I want to guarantee the performance will be good for that data-structure. However, there is a reason I made my own language (Odin) because I completely disagree with the entire C++ philosophy, and I want to get away from that madness.</p>
<p>C++ “iterators” are a hell of a lot more complicated than Go’s iterators but they are much more “direct” with the local operation. At least with Go, you don’t need to construct a type with 5 different properties rather</p>
<h2 id="in-conclusion">In Conclusion</h2>
<p>I feel like Go’s iterators do make sense with the design principles applied to them <strong>BUT</strong> <em>seem</em> antithetical to what most people view Go as being. I know Go “has had to” get more complex over the years, especially with the introduction of Generics (which I do think are actually well designed, with only a few syntax quibbles), but the introduction of iterators of this ilk <em>feels</em> wrong.</p>
<p>I think the short of it is that it feels like it goes against the apparent philosophy of Go that many people believe, coupled with it being a very functional way of doing things rather than imperative.</p>
<p>And because of those reasons, I think that is why people don’t like the iterator stuff, even if I completely understand the design choices made. It doesn’t “feel” like what Go original was to many people.</p>
<p>Maybe the concerns of mine (and others) are overblown and most people will never actually implement them and just use them, and that them being this complicated to implement.</p>
<p>Second to last controversial take: Maybe Go needed to “gate-keep” even more and just tell the “functional-bros” to go away and stop asking for such features which make Go a much more complicated and complex language.</p>
<p>Last controversial take: if it was me, I would just not have allowed custom iterators into Go whatsoever, but I am not on the Go team (nor do I want to be).</p>

</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Intel-undervolt: CPU undervolting and throttling configuration tool for Linux (114 pts)]]></title>
            <link>https://github.com/kitsunyan/intel-undervolt</link>
            <guid>40712020</guid>
            <pubDate>Mon, 17 Jun 2024 22:44:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kitsunyan/intel-undervolt">https://github.com/kitsunyan/intel-undervolt</a>, See on <a href="https://news.ycombinator.com/item?id=40712020">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">intel-undervolt</h2><a id="user-content-intel-undervolt" aria-label="Permalink: intel-undervolt" href="#intel-undervolt"></a></p>
<p dir="auto">intel-undervolt is a tool for undervolting and throttling limits alteration for Intel CPUs.</p>
<p dir="auto">Undervolting works on Haswell and newer CPUs and based on the content of
<a href="https://github.com/mihic/linux-intel-undervolt">this article</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Disclaimer</h2><a id="user-content-disclaimer" aria-label="Permalink: Disclaimer" href="#disclaimer"></a></p>
<p dir="auto">This tool may damage your hardware since it uses reverse engineered methods of MSR usage.
Use it on your own risk.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building and Installing</h2><a id="user-content-building-and-installing" aria-label="Permalink: Building and Installing" href="#building-and-installing"></a></p>
<p dir="auto">Run <code>./configure &amp;&amp; make &amp;&amp; make install</code> to build and install intel-undervolt to your system.</p>
<p dir="auto">You can also configure the following features:</p>
<ul dir="auto">
<li><code>--enable-systemd</code> — systemd support (intel-undervolt service and intel-undervolt-loop service)</li>
<li><code>--enable-elogind</code> — elogind support (intel-undervolt system-sleep script)</li>
<li><code>--enable-openrc</code> — OpenRC support (intel-undervolt-loop service)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration</h2><a id="user-content-configuration" aria-label="Permalink: Configuration" href="#configuration"></a></p>
<p dir="auto">You can configure parameters in <code>/etc/intel-undervolt.conf</code> file.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Undervolting</h3><a id="user-content-undervolting" aria-label="Permalink: Undervolting" href="#undervolting"></a></p>
<p dir="auto">By default it contains all voltage domains like in ThrottleStop utility for Windows.</p>
<p dir="auto">The following syntax is used in the file: <code>undervolt ${index} ${display_name} ${undervolt_value}</code>.
For example, you can write <code>undervolt 2 'CPU Cache' -25.84</code> to undervolt CPU cache by 25.84 mV.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Power Limits</h3><a id="user-content-power-limits" aria-label="Permalink: Power Limits" href="#power-limits"></a></p>
<p dir="auto"><code>power package ${short_term} ${long_term}</code> can be used to alter short term and long term package
power limits. For example, <code>power package 35 25</code>.</p>
<p dir="auto">You can also specify a time window for each limit in seconds. For instance,
<code>power package 35/5 25/60</code> for 5 seconds and 60 seconds respectively.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Temperature Limit</h3><a id="user-content-temperature-limit" aria-label="Permalink: Temperature Limit" href="#temperature-limit"></a></p>
<p dir="auto"><code>tjoffset ${temperature_offset}</code> can be used to alter temperature limit. This value is subtracted
from max temperature level. For example, <code>tjoffset -20</code>. If max temperature is equal to 100°C, the
resulting limit will be set to <code>100 - 20 = 80°C</code>. Note that offsets higher than 15°C are allowed
only on Skylake and newer.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Energy Versus Performance Preference Switch</h3><a id="user-content-energy-versus-performance-preference-switch" aria-label="Permalink: Energy Versus Performance Preference Switch" href="#energy-versus-performance-preference-switch"></a></p>
<p dir="auto">Energy versus performance preference is a hint for hardware-managed P-states (HWP) which is used for
performance scaling.</p>
<p dir="auto">For instance, with <code>performance</code> hint my i7-8650U is able to run at 4.2 GHz, and overall CPU
performance appears to be higher, but the clock speed is always locked to 4.2 GHz unless multiple
cores are loaded or CPU is throttled. With <code>balance_performance</code> hint, CPU increases the clock speed
only under load but never goes higher than 3.9 GHz, but performance of integrated GPU is
significantly better at the same time.</p>
<p dir="auto">intel-undevolt is able to change HWP hint depending on the load, which allows to achive either
better performance or better battery life. This feature is available in daemon mode only which will
be described below. The following syntax is used to configure HWP hint:
<code>hwphint ${mode} ${algorithm} ${load_hint} ${normal_hint}</code>.</p>
<p dir="auto">For instance, if I want to get high CPU and GPU performance from AC, I need to set <code>performance</code>
hint when CPU is under load but GPU isn't (<code>performance</code> hint reduces GPU performance in my case).
Hint switching can be configured depending on power consumption of <code>core</code> and <code>uncore</code>:
<code>hwphint switch power:core:gt:8:and:uncore:lt:3 performance balance_performance</code>. <code>intel_rapl</code>
module is required to measure power consumption.</p>
<p dir="auto">To get a better battery life, clock speed can be reduced until CPU is under continuous high load,
which will hold the lowest CPU speed most of the time. Hint switching can be configured depending on
the CPU load: <code>hwphint switch load:single:0.90 balance_power power</code>.</p>
<p dir="auto">Multiple <code>hwphint switch</code> rules can be used, the hint will be selected depending on current hint,
which can be configured by another tool (e.g. tlp). You can use <code>hwphint force</code> rule to set the hint
independently, but only one rule can be declared in this case.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Applying Configuration</h3><a id="user-content-applying-configuration" aria-label="Permalink: Applying Configuration" href="#applying-configuration"></a></p>
<p dir="auto">Run <code>intel-undervolt read</code> to read current values and <code>intel-undervolt apply</code> to apply configured
values.</p>
<p dir="auto">You can apply your configuration automatically enabling <code>intel-undervolt</code> service. Elogind
users should pass <code>yes</code> to <code>enable</code> option in <code>intel-undervolt.conf</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Measuring the Power Consumption</h3><a id="user-content-measuring-the-power-consumption" aria-label="Permalink: Measuring the Power Consumption" href="#measuring-the-power-consumption"></a></p>
<p dir="auto"><code>intel_rapl</code> module is required to measure the power consumption. Run <code>intel-undervolt measure</code> to
display power consumption in interactive mode.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Daemon Mode</h3><a id="user-content-daemon-mode" aria-label="Permalink: Daemon Mode" href="#daemon-mode"></a></p>
<p dir="auto">Sometimes power and temperature limits could be reset by EC, BIOS, or something else. This behavior
can be suppressed applying limits periodically. Some features like energy vesus performance
preference switch work in daemon mode only. Use <code>intel-undervolt daemon</code> to run intel-undervolt in
daemon mode, or use <code>intel-undervolt-loop</code> service. You can change the interval using
<code>interval ${interval_in_milliseconds}</code> configuration parameter.</p>
<p dir="auto">You can specify which actions daemon should perform using <code>daemon</code> configuration parameter. You can use <code>once</code> option to ensure action will be performed only once.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Intel details Skymont (141 pts)]]></title>
            <link>https://chipsandcheese.com/2024/06/15/intel-details-skymont/</link>
            <guid>40711835</guid>
            <pubDate>Mon, 17 Jun 2024 22:24:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chipsandcheese.com/2024/06/15/intel-details-skymont/">https://chipsandcheese.com/2024/06/15/intel-details-skymont/</a>, See on <a href="https://news.ycombinator.com/item?id=40711835">Hacker News</a></p>
Couldn't get https://chipsandcheese.com/2024/06/15/intel-details-skymont/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Tsutomu Yamaguchi – A man who survived both atomic bombings (2023) (105 pts)]]></title>
            <link>https://www.biography.com/history-culture/a44577392/tsutomu-yamaguchi-hiroshima-and-nagasaki-bombing-survivor</link>
            <guid>40711780</guid>
            <pubDate>Mon, 17 Jun 2024 22:19:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.biography.com/history-culture/a44577392/tsutomu-yamaguchi-hiroshima-and-nagasaki-bombing-survivor">https://www.biography.com/history-culture/a44577392/tsutomu-yamaguchi-hiroshima-and-nagasaki-bombing-survivor</a>, See on <a href="https://news.ycombinator.com/item?id=40711780">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-body="standard-article"><p data-journey-content="true" data-node-id="0">About <a href="https://www.smithsonianmag.com/history/nine-harrowing-eyewitness-accounts-bombings-hiroshima-and-nagasaki-180975480/" target="_blank" data-vars-ga-outbound-link="https://www.smithsonianmag.com/history/nine-harrowing-eyewitness-accounts-bombings-hiroshima-and-nagasaki-180975480/" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="650,000 people">650,000 people</a> have been recognized by the Japanese government as <em>hibakusha</em>, referring to people who have been directly affected by the atomic bombings of Hiroshima and Nagasaki during World War II. But there has only ever been <a href="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" target="_blank" data-vars-ga-outbound-link="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="one person">one person</a> recognized as a <em>nijyuu hibakusha</em>, or “twice-bombed person.”</p><p data-journey-content="true" data-node-id="1">Tsutomu Yamaguchi was less than two miles from the blast zones of the Hiroshima and Nagasaki bombings and miraculously survived both without debilitating injuries. “My double radiation exposure is now an official government record,” <a href="https://www.cnn.com/2010/WORLD/asiapcf/01/06/japan.bomb.victim.dies/index.html" target="_blank" data-vars-ga-outbound-link="https://www.cnn.com/2010/WORLD/asiapcf/01/06/japan.bomb.victim.dies/index.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="Yamaguchi said">Yamaguchi said</a>. “It can tell the younger generation the horrifying history of the atomic bombings even after I die.”</p><p data-journey-content="true" data-node-id="2">The bombings on August 6 and August 9, 1945, are estimated to have killed as many as 226,000 people while completely destroying both cities. Recently, there’s been renewed interest in the origins of atomic weaponry due to the new <a href="https://www.biography.com/movies-tv/christopher-nolan" data-vars-ga-outbound-link="https://www.biography.com/movies-tv/christopher-nolan" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="Christopher Nolan">Christopher Nolan</a> film <em>Oppenheimer</em> about physicist <a href="https://www.biography.com/scientists/j-robert-oppenheimer" data-vars-ga-outbound-link="https://www.biography.com/scientists/j-robert-oppenheimer" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="J. Robert Oppenheimer">J. Robert Oppenheimer</a>, the “father of the atomic bomb.”<br></p><p data-journey-content="true" data-node-id="5">Yamaguchi lived another 65 years after the attacks, before dying of stomach cancer at age 93. For several decades, he didn’t speak publicly about the devastation he witnessed, but in his final years, he felt it was his destiny to speak out against the horrors of nuclear weaponry.</p><p data-journey-content="true" data-node-id="6">“The reason that I hate the atomic bomb is because of what it does to the dignity of human beings,” Yamaguchi told <em>Military History Magazine</em>, according to several books and media outlets.</p><h2 data-node-id="8">Surviving the Hiroshima Blast</h2><p data-journey-content="true" data-node-id="9">Yamaguchi was born in Nagasaki, Japam, on March 16, 1916. In the 1930s, he began working as a draftsman for Mitsubishi Heavy Industries, designing oil tankers. He opposed his country’s role in World War II and became so despondent about the war that he considered <a href="https://www.telegraph.co.uk/news/obituaries/6943088/Tsutomu-Yamaguchi.html" target="_blank" data-vars-ga-outbound-link="https://www.telegraph.co.uk/news/obituaries/6943088/Tsutomu-Yamaguchi.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="killing his wife and infant son">killing his wife and infant son</a> with sleeping pills if Japan lost.</p><p data-journey-content="true" data-node-id="10">Yamaguchi was in Hiroshima for a three-month business trip when the city was bombed on August 6, 1945. It was the <a href="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" target="_blank" data-vars-ga-outbound-link="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="last day of the trip">last day of the trip</a>, and he was preparing to leave the city when he saw the American B-29 bomber Enola Gay fly over Hiroshima and drop an item carried by two parachutes. Suddenly, he said the sky lit with a blaze, “the lightning of a huge magnesium flare.”</p><p data-journey-content="true" data-node-id="11">Drawing upon his naval air-raid training, Yamaguchi dove to the ground, rolled into the nearest irrigation ditch, flung his hands into his head, locked his fingers over his eyes, and jammed his thumbs into his ears, according to <em><a href="https://www.amazon.com/dp/1538121786" target="_blank" rel="nofollow" data-vars-ga-outbound-link="https://www.amazon.com/dp/1538121786" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="To Hell and Back: The Last Train from Hiroshima" data-vars-ga-product-id="8f2d515a-65db-4015-9d44-f519599874f2" data-vars-ga-link-treatment="(not set) | (not set)" data-href="https://www.amazon.com/dp/1538121786" data-product-url="https://www.amazon.com/dp/1538121786" data-affiliate="true" data-affiliate-url="https://www.amazon.com/dp/1538121786" data-affiliate-network="{&quot;site_id&quot;:&quot;73ce8f33-abd8-4d76-b5c7-1c72caf717ce&quot;,&quot;network&quot;:{&quot;name&quot;:&quot;Amazon&quot;}}" data-vars-ga-product-brand="Rowman &amp; Littlefield Publishers" data-vars-ga-product-price="$21.83" data-vars-ga-product-retailer-id="26c0451b-09be-4759-985e-6d8d33ed8858" data-vars-ga-product-sem3-brand="Rowman &amp; Littlefield Publishers">To Hell and Back: The Last Train from Hiroshima</a></em> by Charles Pellegrino.</p><p data-journey-content="true" data-node-id="12">The ground roared and an ear-shattering noise ripped through the air, tossing Yamaguchi into the air as a fireball imploded overhead. He was dropped face-first into a muddy furrow. The protective measures he took likely saved his life; a woman who had been walking beside him shortly before the blast disappeared altogether, Pellegrino wrote.</p><p data-journey-content="true" data-node-id="13">“I think I fainted for a while,” <a href="https://www.indiatimes.com/trending/human-interest/tsutomu-yamaguchi-man-who-survived-two-atomic-bombs-in-hiroshima-nagasaki-602593.html" target="_blank" data-vars-ga-outbound-link="https://www.indiatimes.com/trending/human-interest/tsutomu-yamaguchi-man-who-survived-two-atomic-bombs-in-hiroshima-nagasaki-602593.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="Yamaguchi said">Yamaguchi said</a>. “When I opened my eyes, everything was dark, and I couldn’t see much. It was like the start of a film at the cinema before the picture has begun when the blank frames are just flashing up without any sound.”</p><div size="medium" data-embed="body-image" data-lazy-id="P0-11" data-node-id="14"><p><img alt="rubble and ruins in the foreground, some still standing buildings and mountains appear in the background" title="Hiroshima, Japan, after the August 6, 1945, atomic bombing" loading="lazy" width="4443" height="3539" decoding="async" data-nimg="1" sizes="100vw" srcset="https://hips.hearstapps.com/hmg-prod/images/hiroshima-japan-after-atomic-bomb-hit-world-war-ii-news-photo-1689710340.jpg?crop=1.00xw:0.840xh;0,0.0491xh&amp;resize=640:* 640w, https://hips.hearstapps.com/hmg-prod/images/hiroshima-japan-after-atomic-bomb-hit-world-war-ii-news-photo-1689710340.jpg?crop=1.00xw:0.840xh;0,0.0491xh&amp;resize=768:* 980w, https://hips.hearstapps.com/hmg-prod/images/hiroshima-japan-after-atomic-bomb-hit-world-war-ii-news-photo-1689710340.jpg?crop=1.00xw:0.840xh;0,0.0491xh&amp;resize=980:* 1120w, https://hips.hearstapps.com/hmg-prod/images/hiroshima-japan-after-atomic-bomb-hit-world-war-ii-news-photo-1689710340.jpg?crop=1.00xw:0.840xh;0,0.0491xh&amp;resize=980:* 1200w, https://hips.hearstapps.com/hmg-prod/images/hiroshima-japan-after-atomic-bomb-hit-world-war-ii-news-photo-1689710340.jpg?crop=1.00xw:0.840xh;0,0.0491xh&amp;resize=980:* 1920w" src="https://hips.hearstapps.com/hmg-prod/images/hiroshima-japan-after-atomic-bomb-hit-world-war-ii-news-photo-1689710340.jpg?crop=1.00xw:0.840xh;0,0.0491xh&amp;resize=980:*"></p><div><figcaption><span>Getty Images</span></figcaption><p>Hiroshima, Japan, after the August 6, 1945, atomic bombing</p></div></div><h2 data-node-id="15">Returning Home to Nagasaki</h2><p data-journey-content="true" data-node-id="16">Surrounded by falling ash, Yamaguchi was <a href="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" target="_blank" data-vars-ga-outbound-link="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="temporarily blinded">temporarily blinded</a>, and the explosion ruptured his eardrums and left him with serious radiation burns on his arms and face. He returned to Nagasaki the following day, encountering hellish scenes during his trip, including still-burning fires, shattered buildings, and melted corpses lining the streets.</p><p data-journey-content="true" data-node-id="17">Still wounded and heavily bandaged, Yamaguchi returned to work on August 9, the day Nagasaki was bombed. He was providing his supervisor a detailed account of the Hiroshima bombing when the landscape outside the office suddenly <a href="https://www.indiatimes.com/trending/human-interest/tsutomu-yamaguchi-man-who-survived-two-atomic-bombs-in-hiroshima-nagasaki-602593.html" target="_blank" data-vars-ga-outbound-link="https://www.indiatimes.com/trending/human-interest/tsutomu-yamaguchi-man-who-survived-two-atomic-bombs-in-hiroshima-nagasaki-602593.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="lit up in blinding light">lit up in blinding light</a>, and Yamaguchi fell to the floor as shockwaves destroyed the windows.</p><p data-journey-content="true" data-node-id="18">“Suddenly, the same white light filled the room,” <a href="https://www.nytimes.com/2010/01/07/world/asia/07yamaguchi.html" target="_blank" data-vars-ga-outbound-link="https://www.nytimes.com/2010/01/07/world/asia/07yamaguchi.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="he later recalled">he later recalled</a>. “I thought the mushroom cloud had followed me from Hiroshima.”</p><p data-journey-content="true" data-node-id="24">The city’s hilly landscape and a reinforced stairwell in the office protected the conference room where Yamaguchi and his colleagues were, according to Pellegrino. Having just heard his story, his coworkers took cover in a manner similar to how Yamaguchi did in Hiroshima, which helped protect them from the blast.</p><p data-journey-content="true" data-node-id="25">Fearing his family’s safety, Yamaguchi rushed home and was relieved to find his wife and son suffered only superficial injuries, though his wife was “soaked in black rain and was poisoned,” as <a href="https://www.independent.co.uk/news/world/asia/how-i-survived-hiroshima-ndash-and-then-nagasaki-1654294.html" target="_blank" data-vars-ga-outbound-link="https://www.independent.co.uk/news/world/asia/how-i-survived-hiroshima-ndash-and-then-nagasaki-1654294.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="their daughter later recalled">their daughter later recalled</a>. In the subsequent weeks, Yamaguchi suffered high fevers, severe hair loss, continuous vomiting, and other symptoms <a href="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" target="_blank" data-vars-ga-outbound-link="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="from radiation poisoning">from radiation poisoning</a>.</p><h2 data-node-id="26">Life After the Bombings</h2><p data-journey-content="true" data-node-id="27">Yamaguchi worked as a translator for Allied occupation forces after the war and taught school before eventually resuming his engineering career at Mitsubishi. He largely declined to discuss the bombings in public until the 2000s, when he became a <a href="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" target="_blank" data-vars-ga-outbound-link="https://www.history.com/news/the-man-who-survived-two-atomic-bombs" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="vocal proponent of nuclear disarmament">vocal proponent of nuclear disarmament</a>.</p><p data-journey-content="true" data-node-id="28">He wrote a memoir and a <a href="https://www.amazon.com/dp/1450712975" target="_blank" rel="nofollow" data-vars-ga-outbound-link="https://www.amazon.com/dp/1450712975" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="book of poems" data-vars-ga-product-id="d73eb7d6-a933-4b2c-bac7-3b2fe64f5fe2" data-vars-ga-link-treatment="(not set) | (not set)" data-href="https://www.amazon.com/dp/1450712975" data-product-url="https://www.amazon.com/dp/1450712975" data-affiliate="true" data-affiliate-url="https://www.amazon.com/dp/1450712975" data-affiliate-network="{&quot;site_id&quot;:&quot;73ce8f33-abd8-4d76-b5c7-1c72caf717ce&quot;,&quot;network&quot;:{&quot;name&quot;:&quot;Amazon&quot;}}" data-vars-ga-product-brand="Excogitating Over Coffee Publishing" data-vars-ga-product-price="$12.25" data-vars-ga-product-retailer-id="ad2997a6-818a-4739-915f-3f6d7778d805" data-vars-ga-product-sem3-brand="Excogitating Over Coffee Publishing">book of poems</a> inspired by his experiences and participated in a documentary called <em>Twice Survived</em> (2006), which was screened at the United Nations. “I can’t understand why the world cannot understand the agony of the nuclear bombs,” <a href="https://www.independent.co.uk/news/world/asia/how-i-survived-hiroshima-ndash-and-then-nagasaki-1654294.html" target="_blank" data-vars-ga-outbound-link="https://www.independent.co.uk/news/world/asia/how-i-survived-hiroshima-ndash-and-then-nagasaki-1654294.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="he said">he said</a>. “How can they keep developing these weapons?”</p><p data-journey-content="true" data-node-id="29">Although Yamaguchi lived a long and relatively healthy life, he suffered from radiation-related ailments, including cataracts and acute leukemia, in his later years. His wife, who <a href="https://www.independent.co.uk/news/world/asia/how-i-survived-hiroshima-ndash-and-then-nagasaki-1654294.html" target="_blank" data-vars-ga-outbound-link="https://www.independent.co.uk/news/world/asia/how-i-survived-hiroshima-ndash-and-then-nagasaki-1654294.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="suffered radiation poisoning">suffered radiation poisoning</a> from the blasts, died at the age of 88 from kidney and liver cancer, and all three of their children reported suffering from health problems as well.</p><p data-journey-content="true" data-node-id="30">Yamaguchi died of stomach cancer on January 4, 2010, at the age of 93. A few months before his death, <a href="https://www.nytimes.com/2010/01/07/world/asia/07yamaguchi.html" target="_blank" data-vars-ga-outbound-link="https://www.nytimes.com/2010/01/07/world/asia/07yamaguchi.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="he said">he said</a> he was lucky to survive both atomic blasts, so “everything that follows is a blessing.” In his final years, he believed he <a href="https://www.indiatimes.com/trending/human-interest/tsutomu-yamaguchi-man-who-survived-two-atomic-bombs-in-hiroshima-nagasaki-602593.html" target="_blank" data-vars-ga-outbound-link="https://www.indiatimes.com/trending/human-interest/tsutomu-yamaguchi-man-who-survived-two-atomic-bombs-in-hiroshima-nagasaki-602593.html" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="was spared for a reason">was spared for a reason</a>: “Having experienced atomic bombings twice and survived, it is my destiny to talk about it.”</p><div data-journey-blur="partial" data-ad-exclude="true"><p><span><img src="https://hips.hearstapps.com/rover/profile_photos/7b0fd6ec-180e-4db7-98aa-b972ecefdf97_1675802159.file?fill=1:1&amp;resize=120:*" alt="Headshot of Colin McEvoy" title="Headshot of Colin McEvoy" width="100%" height="100%" decoding="async" loading="lazy"></span></p><div><p>Colin McEvoy joined the <em>Biography.com</em> staff in 2023, and before that had spent 16 years as a journalist, writer, and communications professional. He is the author of two true crime books: <em>Love Me or Else</em> and <em>Fatal Jealousy</em>. He is also an avid film buff, reader, and lover of great stories.</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Note on Essential Complexity (148 pts)]]></title>
            <link>https://olano.dev/blog/a-note-on-essential-complexity</link>
            <guid>40711661</guid>
            <pubDate>Mon, 17 Jun 2024 22:08:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://olano.dev/blog/a-note-on-essential-complexity">https://olano.dev/blog/a-note-on-essential-complexity</a>, See on <a href="https://news.ycombinator.com/item?id=40711661">Hacker News</a></p>
<div id="readability-page-1" class="page"><div lang="en">
      <header>
          
          
          
          
          <img src="https://olano.dev/assets/img/labrea.jpg">
          

      </header>

      
      <p>
Depending on their personal needs and preferences, the level of abstraction with which they model the world, and where they sit in the idealism-cynicism spectrum, any of the following can be legitimately said to be <em>the job</em> of  software engineers:</p>
<ul>
<li>Writing code.</li>
<li>Building and maintaining quality software.</li>
<li>Building and maintaining <em>good enough</em> software <em>cost-effectively</em>.</li>
<li>Managing complexity.</li>
<li>Delighting users.</li>
<li>Solving problems.</li>
<li>Satisfying customer needs.</li>
<li>Making money for their employing organization or their customers.</li>
<li>Making money (for themselves).</li>
</ul>
<p>There surely are more. Some of these goals can be abstracted, reduced to, or derived from others. Some are ultimately incompatible or contradictory, and can only coexist with others in tension. For example: we can assume (to some extent) that quality software will delight our users and make money for our employers. But we also need to sacrifice quality to stay within budget or introduce features that annoy users but generate profit.</p>
<p>
Each goal proceeds from a particular way of modeling the world and our activity. As with any abstraction, they serve their purpose in the right context and become <em>false</em> when applied outside of it; many problems in software development can be explained by such a skewed perspective, something I explored in a <a href="https://olano.dev/blog/code-is-run-more-than-read">previous post</a>. In the next discussion, let’s assume that <em>managing complexity</em> is the main duty of a software engineer.</p>
<p>∗ ∗ ∗</p>
<p>
Complexity is anything that makes it hard to understand and modify a system. In <a href="https://web.stanford.edu/~ouster/cgi-bin/aposd.php"><em>A Philosophy of Software Design</em></a>, John Ousterhout explains why we should make it our main concern:</p>
<blockquote>
<p>If we want to make it easier to write software, so that we can build more powerful systems more cheaply, we must find ways to make software simpler. (…) Most of the code in any system is written by extending the existing code base, so your most important job as a developer is to facilitate those future extensions. Thus, you should not think of “working code” as your primary goal, though of course your code must work. Your primary goal must be to produce a great design, which also happens to work. This is strategic programming. (…) If software developers should always be thinking about design issues, and reducing complexity is the most important element of software design, then software developers should always be thinking about complexity.</p>
</blockquote>
<p>
The <em>urtext</em> of the software complexity discussion is Fred Brooks’s <a href="https://worrydream.com/refs/Brooks_1986_-_No_Silver_Bullet.pdf"><em>No Silver Bullet</em></a>. Brooks distinguishes between essence and accident in software, posing that complexity is an essential difficulty of software systems —one of the things currently bounding our productivity. In <a href="https://curtclifton.net/papers/MoseleyMarks06a.pdf"><em>Out of the Tar Pit</em></a>, Moseley and Marks build on Brooks’s ideas, defining the better-known (and more tractable) types of complexity:</p>
<ul>
<li><strong>Essential Complexity</strong> is inherent in, and the essence of, the <em>problem</em> (as seen by the <em>users</em>).</li>
<li><strong>Accidental Complexity</strong> is all the rest —complexity with which the development team would not have to deal in the ideal world (e.g. complexity arising from performance issues and from suboptimal language and infrastructure).</li>
</ul>
<p>The user’s point of view is key to the distinction:</p>
<blockquote>
<p>If there is any possible way that the team could produce a system that the users will consider correct without having to be concerned with a given type of complexity then that complexity is not essential. (…) One implication of this definition is that if the user doesn’t even know what something is (e.g. a thread pool or a loop counter — to pick two arbitrary examples) then it cannot possibly be essential by our definition.</p>
</blockquote>
<p>
Of course, any real-world implementation of the system will necessarily have to introduce <em>some</em> accidental complexity. The goal of the software engineer, then, is to <em>minimize</em> accidental complexity and <em>assist</em> with essential complexity.</p>
<p>∗ ∗ ∗</p>
<p>
Subtle semantic differences aside, both authors of <em>No Silver Bullet</em> and <em>Out of the Tar Pit</em> agree in
that there’s an essence to a problem: something that engineers can’t change, that the system must conform to, and that contributes a type of complexity that cannot be escaped. From <em>No Silver Bullet</em>:</p>
<blockquote>
<p>Much of the complexity [the software engineer] must master is arbitrary complexity, forced without rhyme or reason by the many human institutions and systems to which his interfaces must conform. (…) In many cases the software must conform because it has most recently come to the scene. In others it must conform because it is perceived as the most conformable. But in all cases, much complexity comes from conformation to other interfaces; this cannot be simplified out by any redesign of the software alone.</p>
</blockquote>
<p>
Now, I want to challenge the notion that essential complexity is irreducible. The fact that we can’t remove it by changing software alone doesn’t mean that there’s nothing we can do about it. What if we were to attack the essence? What if the problem definition wasn’t outside of our purview? What if we could get the world to conform to the software, and not just the other way around? Brooks already hinted at this possibility:</p>
<blockquote>
<p>The buyer of a $2-million machine in 1960 felt that he could afford $250,000 more for a customized payroll program, one that slipped easily and nondisruptively into the computer-hostile social environment. Buyers of $50,000 office machines today [1986] cannot conceivably afford customized payroll programs; so they adapt their payroll procedures to the packages available. Computers are now so commonplace, if not yet so beloved, that the adaptations are accepted as a matter of course.</p>
</blockquote>
<p>
This doesn’t come as a surprise to us: we’ve been seeing for decades how human behavior (and user expectations) can be shaped by software: instant messaging, social media, content streaming —all drastically changed our everyday habits. If we admit that users can be made to adjust to the system —that software has the potential to change people and organizations—, then the problems that software solves for them can be redefined: the essence is not set in stone but open to discussion, part of what the engineer can work with.</p>
<p>
We can thus simplify the goal of the software engineer from minimizing <em>accidental</em> complexity and assisting with <em>essential</em> complexity, to minimizing complexity <em>of any kind</em>. In his follow-up essay <em>“No Silver Bullet” Refired</em>, Brooks quotes a reader that perfectly synthesizes this stance:</p>
<blockquote>
<p>In my experience most of the complexities which are encountered in systems work are symptoms of organizational malfunctions. Trying to model this reality with equally complex programs is actually to conserve the mess instead of solving the problems.</p>
</blockquote>
<p>
Redefining the problem may seem like a cheating, but it’s just business as usual for senior engineers: <em>Why are we working on this? Do we really need it? What problem are we trying to solve? Who benefits from us solving it? What if, instead of X, we initially ship X1, which takes us 20% of the effort and provides 80% of the functionality?</em></p>
<p>
Strictly following Moseley and Marks’s definition, the fact that we can get the user (or the customer, or the product owner) to accept a change of requirements, implies that the removed complexity <em>wasn’t essential in the first place</em>. Instead, we made progress in uncovering the true essence of the problem. The point is that this progress required  engineers to question assumptions and dissuade stakeholders; without their involvement, the unnecessary features would have become part of the problem specification, “ossified” into its essence.</p>
<p>∗ ∗ ∗</p>
<p>
In general, given a complex component of a software system (or an organization), it can happen that:</p>
<ul>
<li>The complexity is accidental, so we can remove it.</li>
<li>The complexity is essential and we need to keep it.</li>
<li>The complexity is essential but we could remove it by redefining the problem specification.</li>
<li>The knowledge to tell whether something is essential or not is lost, the customer or the product owner can’t tell, or there isn’t such an authority to make the call.</li>
</ul>
<p>I frequently found the latter situation when working with legacy software, where the only specification is the system itself —bugs and unknowns included— and any observable feature, a <em>de facto</em> functional requirement, essential to the problem. The conservative approach to maintaining such systems is limited to internal refactors; a more disruptive reduce-complexity-at-all-costs attitude would assume that anything is up for removal until proven otherwise. In <a href="https://nostarch.com/kill-it-fire"><em>Kill It with Fire</em></a>, Marianne Bellotti describes resilience engineering along those lines:</p>
<blockquote>
<p>When we encountered systems that had been forgotten and we couldn’t figure out what they were doing, we would usually just turn them off and see what happened. (…) When we turned off a system, we waited for someone to complain. That person was either the system owner or the owner of a downstream dependency, but either way, we ended the experiment with more information about what the system was doing than we started with. (…) If no one complained, we tended to just leave the system off and move on.</p>
</blockquote>
<p>
Even if systems can’t be removed, the new information improves organizational understanding, which reduces complexity.</p>
<p>∗ ∗ ∗</p>
<p>
Taking this argument to its extreme: engineers could envision simpler implementations of the systems, then persuade the owning organizations to make their processes converge with those implementations —doing with the organization that uses a system what the <a href="https://martinfowler.com/bliki/ConwaysLaw.html">Inverse Conway Maneuver</a> tries to do with the organization that develops it. Left to their own devices, software engineers would act as the philosophical razor, removing the complexity of the world; automating employees —the engineers themselves included— out of a job; simplifying systems, along with the organizations that own them, out of existence.</p>
<p>
Of course, this <em>reductio ad absurdum</em> results from taking our initial premise beyond its reasonable limits. We started with the assumption that the software engineer’s sole purpose is to minimize complexity, ignoring, among other things, the economic interests that determine their work. This can serve as a reminder that, since our work indeed has the power to affect individuals and organizations, we shouldn’t wield it unconsciously, hiding behind the comfort of an abstraction. We occasionally need to leak out of our interface, into the unstructured mess that is the world.</p>
<hr>
<p><em>An earlier version of this post was <a href="https://olano.dev/blog/posdata-sobre-la-complejidad-esencial">published in Spanish</a>.</em></p>

      

      
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Three of Vietnam's five undersea internet cables are down (106 pts)]]></title>
            <link>https://www.reuters.com/world/asia-pacific/three-vietnams-five-undersea-internet-cables-are-down-2024-06-17/</link>
            <guid>40711657</guid>
            <pubDate>Mon, 17 Jun 2024 22:08:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/world/asia-pacific/three-vietnams-five-undersea-internet-cables-are-down-2024-06-17/">https://www.reuters.com/world/asia-pacific/three-vietnams-five-undersea-internet-cables-are-down-2024-06-17/</a>, See on <a href="https://news.ycombinator.com/item?id=40711657">Hacker News</a></p>
Couldn't get https://www.reuters.com/world/asia-pacific/three-vietnams-five-undersea-internet-cables-are-down-2024-06-17/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Google DeepMind shifts from research lab to AI product factory (196 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-06-17/google-deepmind-shifts-from-research-lab-to-ai-product-factory</link>
            <guid>40711600</guid>
            <pubDate>Mon, 17 Jun 2024 22:02:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-06-17/google-deepmind-shifts-from-research-lab-to-ai-product-factory">https://www.bloomberg.com/news/articles/2024-06-17/google-deepmind-shifts-from-research-lab-to-ai-product-factory</a>, See on <a href="https://news.ycombinator.com/item?id=40711600">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Getting 50% (SoTA) on Arc-AGI with GPT-4o (366 pts)]]></title>
            <link>https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt</link>
            <guid>40711484</guid>
            <pubDate>Mon, 17 Jun 2024 21:51:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt">https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt</a>, See on <a href="https://news.ycombinator.com/item?id=40711484">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>I recently got to 50%</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-1-145731248" target="_self" rel="nofollow ugc noopener">1</a></span><span> accuracy on the public test set for ARC-AGI by having GPT-4o generate a huge number of Python implementations of the transformation rule (around 8,000 per problem) and then selecting among these implementations based on correctness of the Python programs on the examples (if this is confusing, go to the next section)</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-2-145731248" target="_self" rel="nofollow ugc noopener">2</a></span><span>. I use a variety of additional approaches and tweaks which overall substantially improve the performance of my method relative to just sampling 8,000 programs.</span></p><p><em>[This post is on a pretty different topic than the usual posts on our substack. So regular readers should be warned!]</em></p><p>The additional approaches and tweaks are:</p><ul><li><p>I use few-shot prompts which perform meticulous step-by-step reasoning.</p></li><li><p>I have GPT-4o try to revise some of the implementations after seeing what they actually output on the provided examples.</p></li><li><p><span>I do some </span><a href="https://en.wikipedia.org/wiki/Feature_engineering" rel="nofollow ugc noopener">feature engineering</a><span>, providing the model with considerably better grid representations than the naive approach of just providing images. (See below for details on what a “grid” in ARC-AGI is.)</span></p></li><li><p>I used specialized few-shot prompts for the two main buckets of ARC-AGI problems (cases where the grid size changes vs doesn’t).</p></li></ul><p><span>The prior state of the art on this dataset was </span><a href="https://arcprize.org/leaderboard" rel="nofollow ugc noopener">34% accuracy</a><span>, so this is a significant improvement.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-3-145731248" target="_self" rel="nofollow ugc noopener">3</a></span></p><p><span>On a held-out subset of the train set, where humans get </span><a href="https://arcprize.org/guide#grand-prize-goal" rel="nofollow ugc noopener">85% accuracy</a><span>, my solution gets 72% accuracy.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-4-145731248" target="_self" rel="nofollow ugc noopener">4</a></span><span> (The train set is significantly easier than the test set as noted </span><a href="https://arcprize.org/guide" rel="nofollow ugc noopener">here</a><span>.)</span></p><p>Additional increases of runtime compute would further improve performance (and there are clear scaling laws), but this is left as an exercise to the reader.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png" width="1456" height="1243" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1243,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff57a2bc9-79d5-478b-8e07-dd7960291b81_1600x1366.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>In this post:</p><ul><li><p>I describe my method;</p></li><li><p>I analyze what limits its performance and make predictions about what is needed to reach human performance;</p></li><li><p><span>I comment on what it means for claims that François Chollet makes about LLMs. Given that current LLMs can perform decently well on ARC-AGI, do claims like "LLMs like Gemini or ChatGPT [don't work] because they're basically frozen at inference time. They're not actually learning anything." make sense? (This quote is from </span><a href="https://arcprize.org/guide" rel="nofollow ugc noopener">here</a><span>.)</span></p></li></ul><p>Thanks to Fabien Roger and Buck Shlegeris for a bit of help with this project and with writing this post.</p><p><a href="https://arcprize.org/arc" rel="nofollow ugc noopener">ARC-AGI</a><span> is a dataset built to evaluate the general reasoning abilities of AIs. It consists of visual problems like the below, where there are input-output examples which are grids of colored cells. The task is to guess the transformation from input to output and then fill out the missing grid. Here is an example from the tutorial:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png" width="828" height="376" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:376,&quot;width&quot;:828,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4538fb1f-1a95-4eef-be6a-556085d65c1b_828x376.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>This one is easy, and it’s easy to get GPT-4o to solve it. But the tasks from the public test set are </span><em>much</em><span> harder; they’re often non-trivial for (typical) humans. There is </span><a href="https://arcprize.org/guide#grand-prize-goal" rel="nofollow ugc noopener">a reported MTurk human baseline for the train distribution of 85%</a><span>, but no human baseline for the public test set which is known to be significantly more difficult.</span></p><p><span>Here are representative problems from the test set</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-5-145731248" target="_self" rel="nofollow ugc noopener">5</a></span><span>, and whether my GPT-4o-based solution gets them correct or not.</span></p><p>Problem 1:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png" width="1456" height="699" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:699,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81b748a3-1e42-4794-9d22-b30f5b5ae12d_1600x768.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Problem 2:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png" width="1456" height="664" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:664,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12cd68ff-d4d8-45ec-8f56-401ce9945449_1600x730.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Problem 3:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png" width="1456" height="511" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:511,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4d53214-50f9-44dd-8c97-cad20e9dc813_1600x562.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The main idea behind my solution is very simple: get GPT-4o to generate around 8,000 python programs which attempt to implement the transformation, select a program which is right on all the examples (usually there are 3 examples), and then submit the output this function produces when applied to the additional test input(s). I show GPT-4o the problem as images and in various ascii representations.</p><p><span>My approach is similar in spirit to the approach applied in </span><a href="https://deepmind.google/discover/blog/competitive-programming-with-alphacode/" rel="nofollow ugc noopener">AlphaCode</a><span> in which a model generates millions of completions attempting to solve a programming problem and then aggregates over them to determine what to submit.</span></p><p>Actually getting to 50% with this main idea took me about 6 days of work. This work includes constructing few-shot prompts, building better text representations of these grids, iterating against the train set, and implementing various other tweaks to improve performance.</p><p><span>I started on this project a few days before Dwarkesh Patel recorded the recent </span><a href="https://www.dwarkeshpatel.com/p/francois-chollet" rel="nofollow ugc noopener">podcast</a><span> with Chollet. This was inspired by Dwarkesh talking to my coworker Buck about ARC-AGI, and then Buck being like “come on, surely you can do better than current SOTA using LLMs”. Then, I tested GPT-4o a bit and it seemed to get what was going on. I’ve recently been doing some research that involved getting Claude 3 Opus to do reasoning right at the edge of its capabilities, and thought I might have an edge based on my experience from that project.</span></p><p>At a high level, the method I use is:</p><ul><li><p>Provide the ARC-AGI problem to GPT-4o, with both an image representation and with various text representations for each grid in the problem. The text representations include showing which cells are occupied by different connected components of colors and showing diffs between the input and output (in cases where the grid shapes are the same).</p></li><li><p>Instruct GPT-4o to reason about what the transformation is, reason how to implement the transformation as code, and then finally actually implement the transformation in code.</p></li><li><p><span>Use a few-shot prompt with several carefully handwritten examples of step-by-step reasoning</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-6-145731248" target="_self" rel="nofollow ugc noopener">6</a></span><span> to actually get GPT-4o to do this reasoning somewhat effectively. The resulting prompt is usually around 30k tokens long including images.</span></p><ul><li><p>We actually have a pair of few-shot prompts: one prompt for when the grid size changes (in any of the examples) and one for when it doesn’t.</p></li><li><p>We also ensemble over multiple pairs of few-shot prompts. This doesn’t help much, but I already had the samples in the cache.</p></li></ul></li><li><p>Sample vast, vast numbers of completions (~5,000 per problem) from GPT-4o.</p></li><li><p>Take the most promising 12 completions for each problem, and then try to fix each by showing GPT-4o what this program actually outputs on the examples, and then asking GPT-4o to revise the code to make it correct. We sample ~3,000 completions that attempt to fix per problem in total across these 12 starting implementations.</p><ul><li><p>We use a few-shot prompt for revisions with step-by-step reasoning.</p></li><li><p>We also have a text representation which shows the diff between the actual output and the expected output.</p></li></ul></li><li><p><span>Then, we select 3 submissions</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-7-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-7-145731248" target="_self" rel="nofollow ugc noopener">7</a></span><span> to make based on a majority vote over programs which get the examples correct. (In the case where we don’t have 3 distinct submissions from programs which get the examples right, we apply some heuristics to pick a submission, but this doesn’t matter much.).</span></p></li></ul><p><span>In addition to iterating on the training set, I also did a small amount of iteration on a 100 problem subset of the public test set. All the results I presented here were computed on a different subset of the public test set that does not overlap.&nbsp; The train and test set are not IID, and the test set is both much harder and somewhat qualitatively different (I think), so using a subset of the test set for iteration was useful for quickly getting a better sense of how things change with difficulty. It's unfortunate that these sets aren’t IID: it makes iteration harder and more confusing.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-8-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-8-145731248" target="_self" rel="nofollow ugc noopener">8</a></span></p><p><span>More of the details of my approach and a bunch of tricks I use to improve performance, can be found at the bottom of this post. You can find the full solution in this GitHub repo: </span><a href="https://github.com/rgreenblatt/arc_draw_more_samples_pub" rel="nofollow ugc noopener">https://github.com/rgreenblatt/arc_draw_more_samples_pub</a><span>.</span></p><p><span>We can analyze how more samples improves performance on test. For ease of interpretation (and implementation), I show returns to samples on the primary and most performant prompting variant I use (in the section below, it has the name “V2”)</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-9-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-9-145731248" target="_self" rel="nofollow ugc noopener">9</a></span><span>. I also don’t incorporate revision (as this would require a separate run for each number of samples).</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png" width="1456" height="1176" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1176,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d45618f-6098-4fed-a931-83b205750eb7_1465x1183.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>There appears to be a relatively clean scaling law</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-10-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-10-145731248" target="_self" rel="nofollow ugc noopener">10</a></span><span>. Of course, a linear fit from log(k) to accuracy can’t go on forever as it would imply you eventually go above 100% accuracy!</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-11-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-11-145731248" target="_self" rel="nofollow ugc noopener">11</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png" width="1456" height="1188" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1188,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22fac5-c941-46cf-95a1-2fcae4bda4a6_1464x1195.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The fit is in terms of log base 2. So, it indicates an additional 3% correct per doubling of k.</p><p><span>While the number of samples I use is large, using far more samples is certainly possible. (For reference, </span><a href="https://arxiv.org/pdf/2203.07814" rel="nofollow ugc noopener">AlphaCode</a><span> uses up to a million samples per problem).</span></p><p>I find that improving prompting and adding a revision step is important to improve the accuracy. Huge numbers of samples, better prompting, and a revision step are all essential for the performance I achieve.</p><p>Here is a breakdown of the performance by version of the prompt:</p><ul><li><p>V0 - 1024 samples/pb: 25% (test set performance). This version doesn’t split into two buckets and doesn’t use the ascii representations described above. (It does show a simple ascii grid like 8|0|3 where 8, 0, 3 are the colors of that row.)</p></li><li><p>V1 - 1024 samples/pb: 27%. This variant splits into two buckets and uses the spreadsheet style ascii representations (when in the equal image size bucket). It uses different few-shot prompt examples (though the examples overlap with V0).</p><ul><li><p>V1.1 - 1024 samples/pb: 28%: This is just a variant with somewhat arbitrarily different prompts for diversity and because I thought these prompts might be better. (They aren’t really better.)</p></li></ul></li><li><p>V2 - 1024 samples/pb: 30%. This variant includes the ascii diff between the input and output and again includes different examples.</p></li><li><p>V2 - 2048 samples/pb: 34%</p></li><li><p>V0 (1024) + V1 (1024) + V1.1 (1024) + V2 (2048): 37%.</p><ul><li><p>This performance is the same as what I would expect from 4096 samples from V2, so the diversity doesn’t seem to help more than the downside of V0/V1/V1.1 being worse than V2.</p></li><li><p>To reach 37% with just V0, I would need around 43,000 samples! (Based on the fit I show below.) So, using better prompting and representations makes a big difference.</p></li></ul></li><li><p>Final version (Revision step (3040 / pb with most problems selected) + V0 (1024) + V1 (1024) + V1.1 (1024) + V2 (2048)): 50%</p><ul><li><p>To reach 50% with just samples from V2, I would need 100,000 samples! So the revision is doing a huge amount of work. (With just V0, I would need 1,500,000 samples.)</p></li><li><p>I was surprised by how much revision helps.</p></li><li><p>Further rounds of revision might also help, but I didn’t get around to running this. (I had this implemented in an earlier version, but I removed it.)</p></li><li><p>Revision seems to fix around 20% of the remaining incorrect solutions on both test and train. As in, if we’re getting 37% correct, then we get an additional 0.63 * 0.2 = 0.13 correct for a total of 0.5. Accordingly, revision yields a notably smaller absolute improvement on train (an absolute improvement of only 6% vs 13%).</p></li></ul></li></ul><p>I don’t have numbers for cutting reasoning while using comparable amounts of samples.</p><p>I use the exact same settings for the train distribution numbers I report.</p><p>We can also compare the scaling of different prompts:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png" width="1456" height="1152" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1152,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F620f4cce-08ad-48b9-a38d-a9d7347e0cef_1487x1177.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Above, I noted that revision seems to fix around 20% of the remaining incorrect. Supposing that this scales indefinitely (a dubious assumption), we can see how long it takes to reach various performance thresholds with my current method and various ablations.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png" width="1456" height="1204" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1204,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45290f42-b03d-44ca-8cd4-31bc91694197_1468x1214.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Getting to “just” 70% performance with my current method would take 2^21 samples (around 2 million)! I think 70% is probably similar to the performance of typical people on MTurk on the test set, though no number is known.</p><p>GPT-4o is limited by failures other than reasoning, such as:</p><ol><li><p><strong>GPT-4o’s vision is terrible on grids</strong><span>. When asked to describe what is in a somewhat large grid, it often fails to “see” the input correctly, and states wrong facts about what colors are in some location or what shapes are present.</span></p><ol><li><p>In particular, it totally fails to extract the colors of cells from an image for images &gt;12x12 and is quite bad at 8x8.</p></li><li><p>If humans had visual abilities as poor as GPT-4o, it would often take them quite a bit of effort to solve even simple ARC-AGI problems. (If you want a frustrating time, try solving some ARC-AGI problems without using vision other than reading: that is, try to do them without ever drawing out the grids in 2d, forcing yourself to instead just interact with a textual representation of the data. For hard mode, you could try doing this blindfolded, with a friend allowing you to dictate Python lines of code to run on the image. I think this would be quite hard.)</p></li></ol></li><li><p><strong>GPT-4o isn’t that good at coding</strong><span> (especially not for these sort of geometric manipulation problems), and makes simple mistakes like off-by-one errors extremely often.</span></p><ol><li><p>We don’t do multi-round debugging because it’s probably cheaper and more effective to just get more samples in the current regime.</p></li></ol></li><li><p><strong>GPT-4o is worse at using long contexts</strong><span> than other models:</span></p><ol><li><p>I think the long context for GPT-4o is quite bad and starts taking a big hit after about ~32k to 40k tokens (based on my qualitative impression), which limited my ability to use longer prompts with more examples and more detailed representations.</p></li><li><p>It doesn't seem to respect my few-shot prompt and often does somewhat worse stuff than what it should do based on the few-shot examples. For instance, it systematically responds with much shorter completions than it is supposed to (even if I give it very specific instructions to do otherwise!).</p></li></ol></li><li><p><strong>Not having flexible prefix caching substantially limits approaches</strong><span>. With the n option in the OpenAI api, but without more flexible prefix caching, efficient approaches are limited to just drawing lots of samples rather than efficiently having a large number of reasoning traces which diverge, proceed in parallel, and receive outputs from code (while sharing a few-shot prompt). This massively increases costs for approaches which focus more on doing multi rounds of revision and iteration on all or most implementations rather than just doing a large number of 1-step revisions on one implementation (or a small number of implementations).</span></p></li></ol><p>Removing these non-reasoning weaknesses would improve the performance of my solution by a significant amount. Vision is an especially large weakness.</p><p>To be clear, GPT-4o is also limited by being very dumb. A smart human with only access to the text representation could substantially outperform GPT-4o by spending a bunch of time on each problem.</p><ul><li><p>I used over 1000x more runtime compute per problem than prior work on this benchmark. Maybe prior work on this benchmark scales well with compute and would have gotten higher accuracy with higher resources.</p></li><li><p>There is a broad distribution of problem difficulty even in the test set. For example, some of the problems have a difficult-to-guess component which only has a few sensible options (e.g. pick which of two possible colors to use in some location), and the evaluation metric is top-3 accuracy. Therefore, the gap between our solution’s performance and human performance in the test set may be larger than you would expect when just looking at the numbers.</p><ul><li><p>In practice, changing to top-2 accuracy only affects performance by a tiny amount. (it goes to 48% on test and 70% on train)</p></li></ul></li><li><p>To decrease cost and to allow for having a subset to iterate on (especially for the train set!), I only ran my solution on a randomly selected set of 100 train and 100 test problems. The resulting standard error of the mean is reasonably tight (5%), but this means my results might be slightly overoptimistic.</p></li><li><p>This submission is ineligible for the ARC-AGI prize and main leaderboard as it uses a closed source model and too much runtime compute.</p></li><li><p>I haven’t yet submitted to the private leaderboard. (I need to port it into a kaggle notebook and make sure it doesn’t use too much RAM).</p></li></ul><ul><li><p>70% probability: A team of 3 top research ML engineers with fine-tuning access to GPT-4o (including SFT and RL), $10 million in compute, and 1 year of time could use GPT-4o to surpass typical naive MTurk performance at ARC-AGI on the test set while using less than $100 per problem at runtime (as denominated by GPT-4o API costs).</p><ul><li><p>Note that typical naive MTurk performance is probably not 85% on the test set (the prior baseline is on the easier train set) and there is no known human baseline. (Perhaps performance is around 70%?)</p></li></ul></li><li><p>35% probability: Under the above conditions, 85% on the test set would be achieved. It’s unclear which humans perform at &gt;=85% on the test set, though this is probably not that hard for smart humans.</p></li><li><p><span>60% probability: If a next generation frontier LLM (e.g. GPT-5) was much better at basic visual understanding (e.g. above 85% accuracy on </span><a href="https://www.reka.ai/news/vibe-eval" rel="nofollow ugc noopener">Vibe-Eval hard</a><span>), using my exact method (with minor adaptation tweaks as needed) on that LLM would surpass typical naive MTurk performance.</span></p></li><li><p>30% probability: Under the above conditions, 85% on the test set would be achieved.</p></li><li><p>80% probability: next generation multi-model models (e.g. GPT-5) will be able to substantially advance performance on ARC-AGI.</p></li></ul><p><span>Chollet </span><a href="https://open.substack.com/pub/dwarkesh/p/francois-chollet?r=1rbb9n&amp;selection=aa18a2d9-cba1-4462-a468-d603ae163cb1&amp;utm_campaign=post-share-selection&amp;utm_medium=web" rel="nofollow ugc noopener">says</a><span>:</span></p><blockquote><p>If you were right [that LLMs can do in-context learning], LLMs would do really well on ARC puzzles because ARC puzzles are not complex. Each one of them requires very little knowledge. Each one of them is very low on complexity. You don't need to think very hard about it. They're actually extremely obvious for human [sic]</p><p>Even children can do them but LLMs cannot. Even LLMs that have 100,000x more knowledge than you do still cannot. The only thing that makes ARC special is that it was designed with this intent to resist memorization. This is the only thing. This is the huge blocker for LLM performance.</p><p>If you look at LLMs closely, it's pretty obvious that they're not really synthesizing new programs on the fly to solve the task that they're faced with.</p></blockquote><p>Contra Chollet, I think that current LLMs are well described as doing at least some useful learning when doing in-context learning.</p><p>In particular, given my results you have to reject one of the following claims:</p><ol><li><p>Getting modest performance on ARC-AGI (e.g. 50%+ on test) requires at least a little runtime "learning" on each problem.</p></li><li><p>Program selection on only a moderate (e.g. 6,000) number of programs (like the way I do it) doesn't count as "learning" in the typical way people think of learning.</p></li><li><p>Current LLMs never "learn" at runtime (e.g. the in-context learning they can do isn't real learning).</p></li></ol><p>Claim 1 seems likely true to me for a reasonable notion of “learning”. I think François Chollet agrees here. Most of my doubts about this claim are concerns that you can basically brute force ARC-AGI without interestingly doing learning (e.g. brute-force search over some sort of DSL or training on a huge array of very similar problems). These concerns apply much less to the kind of approach I used.</p><p>Claim 2 seems true to me: the distribution of programs you are searching over has to be pretty close to the right program for Best-of-6k to work at all: if you did best-of-6k for random python programs, this would not work! Perhaps François Chollet disagrees here, but I think this view would be unreasonable.</p><p><span>Therefore, I think Claim 3 is false: </span><strong>I think LLMs actually do some relevant “learning” when doing in-context learning. </strong><span>Overall performance is very weak (otherwise I wouldn’t have needed to draw thousands of samples in my solution), but it’s some learning nevertheless. (Though there are various obstacles to GPT-4o performing well other than reasoning and learning ability such as vision and coding limitations.)</span></p><p>(One caveat is that this could be false if a substantial fraction of GPT-4o’s performance comes from dataset contamination. This seems very unlikely to me.)</p><p>It’s worth emphasizing that GPT-4o’s learning within a single context seems much less competent than typical human learning. But it is learning nonetheless. My view isn’t that GPT-4o is smart relative to humans in the typical way we mean smart, but I do think it has something which is well described as intelligence.</p><p>Progress has not stalled. I think ARC-AGI will be one benchmark among many that just gets solved by scale, and that as LLMs are scaled up, we should expect them to be able to solve tasks of increasing complexity when used with the appropriate tools, resources and prompting/scaffolding. (In this case, performance is due to scale and 6 days of iteration.)</p><p><span>I think it is plausible that scaling LLMs</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-12-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-12-145731248" target="_self" rel="nofollow ugc noopener">12</a></span><span> by another 2-10 OOMs in effective training compute, and giving them tools, resources and scaffolding to solve real-world tasks can result in "AGI"</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-13-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-13-145731248" target="_self" rel="nofollow ugc noopener">13</a></span><span>, understood as AI capable of massively accelerating R&amp;D. Such a technology would likely be the most transformative technology in human history, and I prefer to refer to this as "Transformative AI” (TAI) due to the potential ambiguity of "AGI".</span></p><p><span>TAI poses huge risks. Making mistaken predictions about where LLMs are heading could result in a dramatic underestimate of the dangers they could pose. If, </span><a href="https://x.com/mikeknoop/status/1801428929439535541" rel="nofollow ugc noopener">like Mike Knoop</a><span> (co-host of the ARC-AGI prize), you oppose bills like SB-1047 because you think LLMs won’t scale</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-14-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-14-145731248" target="_self" rel="nofollow ugc noopener">14</a></span><span>, then it really matters that you are right about LLMs not scaling. And every time you get evidence that indicates that scaling might be dangerously powerful (and I hope this post provided some), you should update appropriately in favor of more caution.</span></p><p><span>ARC-AGI probably isn't a good benchmark for evaluating progress towards TAI: substantial "elicitation" effort could massively improve performance on ARC-AGI in a way that might not transfer to more important and realistic tasks. I am more excited about benchmarks that directly test the ability of AIs to take the role of research scientists and engineers, for example those that </span><a href="https://metr.org/" rel="nofollow ugc noopener">METR</a><span> is developing. (I think developing these evaluations and the science of conducting these evaluations is a highly leveraged way of reducing the risk that powerful AGI takes humanity by surprise; if you’re interested in contributing to them, you can see open roles at METR </span><a href="https://metr.org/hiring" rel="nofollow ugc noopener">here</a><span>. Note that I have various COIs with METR.) I still think that work like ARC-AGI can be good on the margin for getting a better understanding of current AI capabilities.</span></p><p>(I'm ambivalent about advancing AI progress overall, especially in a broadly proliferated fashion. If I thought that my work on ARC-AGI would likely substantially advance AI progress, I would not have published this blog post.)</p><p>More minimally, I think that ARC-AGI would be a better evaluation of progress towards TAI if it used purely text based problems or at least had a text based subset: good vision isn’t necessary for TAI and improved vision has outsized effects on ARC-AGI relative to TAI progress.</p><p><span>I also think that the ARC-AGI prize is made worse by not allowing SOTA (closed source) LLMs in submission and by overly restricting runtime computation</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-15-145731248" href="https://redwoodresearch.substack.com/p/getting-50-sota-on-arc-agi-with-gpt#footnote-15-145731248" target="_self" rel="nofollow ugc noopener">15</a></span><span>. (There is an open leaderboard which has no such constraints.) I expect that SOTA LLMs will be pushing the frontier of progress in ARC-AGI based on these results and general views about what will happen with SOTA LLMs in the next few years. Higher limits on runtime compute seem important for advance warning: if an approach currently costs 10x human labor costs but can do a task, then it will probably cost way less in a few years (or less time) as further optimizations accrue. For instance, substantially optimizing the runtime compute used by my approach seems doable.</span></p><p>Overall, I appreciate the approach of ARC-AGI and I appreciate that Chollet and Knoop have made strong and relatively specific claims. (Some of which now seem to be contradicted!) Nonetheless, I think there are substantially better ways to benchmark progress toward transformative AI.</p><p>I use a bunch of tricks to improve performance:</p><ul><li><p>I split problems into two buckets: problems where the grid is the same size in the input and the output (in the examples) and problems where the size differs on any example input. I use a different prompt for these two cases. I use different examples and I also use a more extensive ascii representation in the case where the grids are the same size, as this representation is more useful in this case. I also use different prompts when having GPT-4o fix attempted implementations.</p></li><li><p>I use various ascii representations (in the case where grids are the same size) to make it easier for GPT-4o, which is very bad at this type of vision, to analyze the grid. Few-shot examples use these representations when reasoning. We show:</p><ul><li><p>The grid as a 2d array where each location has both the color and that location is spreadsheet/chess style notation (e.g. A7, B3, etc.)</p></li><li><p>The list of all locations (in spreadsheet style notation) at which a given color occurs. We split this up into connected components to make shapes easier to understand.</p></li><li><p>A normalized view of connect components (shapes) which shows the spreadsheet notation with shapes translated to have minimum row and column at 0. This makes it easier to compare shapes without getting confused by offsets.</p></li><li><p>A “diff” between the input and output represented as pairs of distinct colors and the locations at which the input has the first color and the output has the second color (e.g., black changes to green).[^diffonly] This is only used in a subset of examples (see below about ensembling over few-shot prompts).</p></li><li><p>When revising implementations, I also show an ascii diff between the expected and actual output for each of the examples. This is shown regardless of whether the input/output grid for the examples are the same size. (Though it can only be shown if the expected and actual output have the same shape.)</p></li></ul></li><li><p>I do a bit of local search to optimize prompts (on different subsets of the data from the subsets where I report performance!). Mostly, this looks like deciding which few-shot examples to include and which to put at the start/end of the prompt (which the model probably pays more attention to).</p></li><li><p>I use a few-shot prompt for the revision operation rather than just asking the model to revise. In the few shot prompt, I include some cases where revision is both reasonably doable and the model failed to successfully revise (on a prior version of the prompt on the train set).&nbsp;</p></li><li><p>I use a somewhat non-trivial hamming distance approach for picking which implementations to revise though I don’t think details here matter much (based on my testing). I end up selecting 12 solutions which are ranked in closeness to the output and then using 3040 samples split over these solutions. I allocate the samples by reducing the samples by 25% for each successive item (the first item gets 384 samples, the second gets 288, the third 224 (I round to the closest 32), and so on).&nbsp;</p><ul><li><p>I use the geometric mean of the hamming distance ranks to each of the outputs in the examples. (That is, I get the distances for each implementation, I rank them based on these distances, and then I take the geometric mean of these ranks across examples.) I also encourage slightly more diversity by penalizing for being too close to the solutions I’ve already selected. I only revise implementations that produce valid grids. I also skip implementations that produce a grid with a size that doesn’t match the expected output for problems where the size shouldn’t change (based on the examples).</p></li><li><p>I somewhat arbitrary upsample completions from better prompts, in particular the V2 prompt described above is upsampled. I just guessed at a constant offset to add for V2 to to remove for V0 based on some eyeballing of the typical geometric mean and what I thought might make sense. I didn’t optimize these values.</p></li><li><p>I only do revision on problems with fewer than 32 solutions that are correct on the examples with the idea being that we probably got the other solutions correct and thus don’t need to run this. I filter out solutions which are correct on the examples (as it's unclear what revision should do in this case).</p></li></ul></li><li><p>I ensemble over several few-shot prompts. I think this somewhat improves performance over more samples with a fixed few-shot prompt (the diversity improvement is larger on the test distribution than the train distribution I think) and I already had a bunch of these samples from prior runs.</p></li><li><p>To pick what to submit, I do a majority vote and pick the top-3. First, I do a majority vote over the implementations which are correct on the training set. If this doesn’t produce three outputs (because there are less than 3 distinct outputs from implementations which are correct on the training set), I do a majority vote over implementations where I weight implementations based on how close they are to the expected output on the examples. In particular, I use the same geometric mean of hamming distance ranks metric discussed above where the weight for the majority vote is the reciprocal of this geometric mean.</p><ul><li><p>I don’t think the details of this matter much (and it isn’t optimized), I just thought something like this would be a good idea.</p></li><li><p>I also reject outputs which are equal to the test input. There are no cases in ARC-AGI where the test output is equal to the test input. This is more important than you might have thought because implementations which make no changes sometimes do well according to the hamming distance metric but are surely wrong. (If there are multiple test inputs, we reject if any are the same.)</p></li></ul></li><li><p>I use the n option from the GPT-4 API to make more samples cheaper.</p></li></ul><p>Some tricks I don’t use that might improve performance:</p><ul><li><p>I currently spend the same number of samples on each problem. You could terminate early on problems which are consistently solved. I think this might reduce cost by perhaps 25-35%.</p></li><li><p>In the OpenAI API, I use n &lt; 128 (typically 32 or 16) because n=128 typically errors from what I’ve seen. Currently it seems like about half of my cost is input tokens, so going to n=128 would roughly halve the cost.</p></li><li><p>It would probably help to divide the problems into substantially more categories and then build specialized prompts and tools for each category. This somewhat defeats the point of ARC-AGI though and I’m not sure what these categories would be.</p></li><li><p>Doing a second or third revision round could help substantially. (Relative to spending these samples elsewhere.)</p></li><li><p>Further extending the debugging/revision process could help substantially.</p></li><li><p>Fine-tuning of GPT-4o to better understand the representations I use (and be able to see) would surely help a bunch (though it would be expensive).</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png" width="1456" height="1213" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1213,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa534eb30-ff88-4c67-8e22-092ddeca2351_1600x1333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png" width="1456" height="1213" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/df9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1213,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf9ddc00-72f3-48e0-9e1a-804f9f74dce7_1600x1333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Around 2^15 or 32,000 samples would be required to reach MTurk performance on the train set.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png" width="1456" height="1213" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1213,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce5e7d8d-939f-4408-bee5-85ed8882cafa_1600x1333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png" width="1456" height="1213" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1213,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529ffc33-63f4-40bf-9502-e8491071d20f_1600x1333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LLM that can call multiple tool APIs with one request (110 pts)]]></title>
            <link>https://cohere.com/blog/multi-step-tool-use</link>
            <guid>40711447</guid>
            <pubDate>Mon, 17 Jun 2024 21:47:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cohere.com/blog/multi-step-tool-use">https://cohere.com/blog/multi-step-tool-use</a>, See on <a href="https://news.ycombinator.com/item?id=40711447">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-component="Banner"><p><span>Introducing Command R+: Our new, most powerful model in the Command R family.</span><br></p><p><a aria-label="Learn More" data-fs-element="Marketing>Nav>Banner>Learn more" href="https://cohere.com/blog/command-r-plus-microsoft-azure">Learn More</a></p></div></div>]]></description>
        </item>
    </channel>
</rss>