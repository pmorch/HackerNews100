<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 24 Feb 2025 17:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Introduction to Stochastic Calculus (109 pts)]]></title>
            <link>https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/</link>
            <guid>43160779</guid>
            <pubDate>Mon, 24 Feb 2025 15:40:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/">https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/</a>, See on <a href="https://news.ycombinator.com/item?id=43160779">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="introduction-to-stochastic-calculus"><strong>Introduction to Stochastic Calculus</strong></h2><p>Notation and code for generating visuals are presented in the <a href="#appendix">Appendix</a>.</p><h3 id="0-introduction"><span><strong>0. Introduction</strong></span><a href="#0-introduction"><i></i></a></h3><p>This document is a brief introduction to stochastic calculus. Like, an actual introduction. Not the textbook “introductions” which immediately blast you with graduate-level probability theory axioms and definitions.</p><p>The goal of this blog post is more to focus on the physical intuition and derivation of Brownian motion, which is the foundation of stochastic calculus. I will avoid very technical formalisms such as probability spaces, measure theory, filtrations, etc. in favor of a more informal approach by considering only well-behaved cases. I also try to avoid introducing too many new concepts and vocabulary.</p><p>I hope that a wider audience can feel inspired as to how stochastic calculus emerges naturally from the physical world. Then, hopefully, more people can appreciate the beauty and meaning of the mathematics behind it, and decide to dig deeper into the subject.</p><h4 id="applications"><span>Applications</span><a href="#applications"><i></i></a></h4><p>Brownian motion and Itô calculare a notable example of fairly high-level mathematics that are applied to model the real world. Stock prices jiggle erratically, molecules bounce in fluids, and noise partially corrupts signals. Stochastic calculus gives us tools to predict, optimize, and understand these messy systems in a simpified model.</p><ul><li><strong>Physics</strong>: Einstein used Brownian motion to prove atoms exist—its jittering matched molecular collisions.</li><li><strong>Finance</strong>: Option pricing (e.g., the famous Black-Scholes equation) relies on stochastic differential equations like \(dS = \mu S dt + \sigma S dW\).</li><li><strong>Biology</strong>: Random walks model how species spread or neurons fire.</li></ul><p>This is just the tip of the iceberg. More and more applications are emerging, notably in machine learning, as <a href="https://arxiv.org/abs/2011.13456">Song et al. (2021)</a> have shown in their great paper “Score-Based Generative Modeling through Stochastic Differential Equations”.</p><p>They precisely use a stochastic differential equation using Itô calculus to model the evolution of noise over time, which they can then reverse in time to generate new samples. This framework generalizes previous ones and improves performance, allowing for new paths of innovation to be explored.</p><h3 id="1-motivation"><span><strong>1. Motivation</strong></span><a href="#1-motivation"><i></i></a></h3><p>Pascal’s triangle gives the number of paths that go either left or right at each step, up to a certain point:</p><p>\[\begin{array}{cccccc} &amp; &amp; &amp; 1 &amp; &amp; &amp; \\ &amp; &amp; 1 &amp; &amp; 1 &amp; &amp; \\ &amp; 1 &amp; &amp; 2 &amp; &amp; 1 &amp; \\ 1 &amp; &amp; 3 &amp; &amp; 3 &amp; &amp; 1 \end{array}\]</p><p>Using 0-indexing, the number of ways to reach the \(k\)-th spot in the \(n\)-th row is \(\binom{n}{k} = \frac{n!}{k!(n-k)!}\). For example, in row 3, there are \(\binom{3}{2} = 3\) ways to hit position 2.</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/binom_3_2_paths_pascal.svg"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/binom_3_2_paths_pascal.svg" alt="Pascal's Triangle Paths for 3 choose 2" loading="lazy"></a> <em><a href="#b5-latex-code-for-tikz-diagram-of-paths-in-pascals-triangle">Code</a> 2D image: All 3 paths for the 2nd position in the 3rd row of Pascal’s triangle</em></p><p>Why care? This setup powers the binomial distribution, which models repeated trials with two outcomes—win or lose, heads or tails. Think of:</p><ul><li>A basketball player shooting free throws with probability \(p\) of success and \(q = 1 - p\) of failure.</li><li>A gambler betting on dice rolls.</li></ul><p>Pascal’s triangle tells us there are \(\binom{n}{k}\) ways to get \(k\) wins in \(n\) trials. If the trials are <strong>independent</strong>, we can use the multiplication rule for probabilities:</p><blockquote><p>Note that the independence assumption is <strong>strong</strong>. Real life isn’t always so clean—winning streaks in games often tie to mentality or momentum, not just chance. Keep in mind that this model can and will be inaccurate, especially visibile for very long streaks in phenomena like stock prices or sports. However, in more common scenarios, it usually approximates reality well.</p></blockquote><p>\[P(A \text{ and } B \text{ and } C \dots) = P(A) P(B) P(C) \dots\]</p><p>For one sequence with \(k\) wins (probability \(p\) each) and \(n - k\) losses (probability \(q\) each), the probability is \(p^k q^{n-k}\). Multiply by the number of ways to arrange those wins, and we get:</p><p>\[P(k \text{ wins in } n \text{ trials}) = \binom{n}{k} p^k q^{n-k}\]</p><p>This is the binomial distribution—great for discrete setups. Now, let’s zoom out. The real world often involves <strong>continuous</strong> processes, like:</p><ul><li>The motion of a falling object,</li><li>Gas diffusing through a room,</li><li>Stock prices jumping around,</li><li>Molecules colliding in a liquid.</li></ul><p>For these, the binomial model gets messy as trials pile up. Calculus, with its focus on continuous change, feels more natural. In the continuous case:</p><blockquote><p>Points and sums (discrete tools) lead to infinities. We need <strong>intervals</strong> and <strong>integrals</strong> instead.</p></blockquote><h3 id="2-from-discrete-steps-to-continuous-limits"><span><strong>2. From Discrete Steps to Continuous Limits</strong></span><a href="#2-from-discrete-steps-to-continuous-limits"><i></i></a></h3><p>It’s actually known what happens to the binomial distribution as it becomes continuous. But what does that conversion mean mathematically? Let’s dig in with examples and then formalize it.</p><p>In calculus, going from discrete to continuous means shrinking step sizes and cranking up the number of steps. For an interval \([a, b]\), we:</p><ol><li>Split it into \(n\) chunks of size \(h = \frac{b - a}{n}\),</li><li>Sum up contributions (like a Riemann sum),</li><li>Let \(n \to \infty\) and \(h \to 0\), landing on an integral.</li></ol><p>Can we adapt this to the binomial distribution? Let’s try.</p><p>Picture the \(n\)-th row of Pascal’s triangle as a random walk: at each of \(n\) steps, we move \(+1\) (a win) or \(-1\) (a loss).</p><p>We’ll set the probabability of winning as \(p = 0.5\) as a first example since it’s symmetric, making each direction equally likely and simpler to work with.</p><p>The number of ways to get \(k\) wins (and \(n - k\) losses) is \(\binom{n}{k}\). Let’s try to plot this for a different values \(n\) over \(k\). (The code can be found in the <a href="#b1-python-code-for-binomial-plots">Appendix</a>.)</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/random_walk_combined.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/random_walk_combined.png" alt="Plots for n=5,10,25,50,100" loading="lazy"></a> <em><a href="#b1-python-code-for-binomial-plots">Code</a> 2D image: Binomial distribution plots for n=5,10,25,50,100</em></p><p>That looks awfully familiar, doesn’t it? It’s a bell curve, so naturally, we might guess that the limit is a <strong>normal distribution</strong> (aka Gaussian distribution).</p><p>Where does such a normal distribution arise from? The answer lies in the <strong>Central Limit Theorem</strong>, which states that the sum of a large number of independent random variables will be approximately normally distributed. So where’s the sum happening here? Let’s proceed to formalizing our intuition.</p><p>To accomplish this, let’s define a random variable for a single step as:</p><p>\[X(t) = \begin{cases} 1 &amp; \text{with probability } \frac{1}{2} \\ -1 &amp; \text{with probability } \frac{1}{2} \\ \end{cases}\]</p><p>Here, \(X(t)\) will encode our displacement at the \(t\)-th step where \(t \in \{1,\dots,n\}\) is an indexing parameter. As before, we assume that \(X(t_1)\) is independent of \(X(t_2)\) for \(t_1 \ne t_2\). At each step \(t\), \(X(t)\) has mean \(0\) and variance \(1\).</p><p>Then, the overall displacement \(S(n)\) is:</p><p>\[S(n) = X(1) + X(2) + \dots + X(n) = \sum_{t=1}^n X(t)\]</p><p>So there it is! The central limit theorem states more precisely that given \(n\) independent and identically distributed random variables \(X_1, X_2, \dots, X_n\) with mean \(\mu\) and variance \(\sigma^2\), we have:</p><p>\[X_1 + \dots + X_n \sim N(n\mu, n\sigma^2) \text{ as } n \to \infty\]</p><p>This is precisely what need. As we take \(n \to \infty\), we have that</p><p>\[S(n) \sim N(0, n)\]</p><p>such that</p><p>\[\lim_{n \to \infty} \frac{1}{\sqrt{n}} \cdot S(n) = N(0, 1)\]</p><p>which is our desired limit. We have shown that a “continuous binomial distribution” is in fact a normal distribution.</p><p>Here are some very nice 3D animations of sample paths with the distribution evolving over the number of steps:</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial.gif" alt="Discrete Random Walk, 15 steps" loading="lazy"></a> <em><a href="#c1-3d-plot-of-discrete-random-walks">Code</a> 3D animation: Discrete Random Walk, 15 steps</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial_normalizing.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial_normalizing.gif" alt="Discrete Random Walk, 100 steps" loading="lazy"></a> <em><a href="#c1-3d-plot-of-discrete-random-walks">Code</a> 3D Animation: Discrete Random Walk, 100 steps over 5 seconds</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_random_walk.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_random_walk.gif" alt="Normal Distribution Approximation by Random Walks" loading="lazy"></a> <em><a href="#c4-python-code-for-normal-distribution-approximation-by-random-walks">Code</a> 2D animation: Normal distribution approximation by discrete random walks</em></p><h3 id="3-defining-brownian-motion-wiener-process"><span><strong>3. Defining Brownian motion (Wiener process)</strong></span><a href="#3-defining-brownian-motion-wiener-process"><i></i></a></h3><p>Let’s consider a scenario faced by Scottish botanist <strong>Robert Brown</strong> in the 1820s. Imagine a small particle, like dust or pollen, floating on a body of water.</p><p>Brown realized that its movement was surprisingly erratic. It seemed like the small-scale nature of the setup resulted in such sensitivity to fluctuations, so much is that the real movement from external forces would completely overtake the previous one. Hence, in a simplified mathematical model we scale consider the events at different times as <em>independent</em>.</p><p>In addition, there is positional symmetry: the average position of the particle at time \(t\) seemed float approximately around the origin.</p><p>Motivated by these observations as well as our previous intuition on continuous random walks, let’s first think about a simplified model for 1-dimensional discrete case. We’ll list some properties that a continuous random walk should have.</p><ol><li><strong>Starting Point</strong>: As a mathematical convenience, we position our coordinate system to set the starting point of the walk to be zero.</li><li><strong>Positional Symmetry</strong>: The walk has no directional bias. For each step, the expected displacement is zero, such that the overall expected displacement is also zero.</li><li><strong>Independence</strong>: Steps at different times are independent. The displacement between two different intervals of time is independent.</li><li><strong>Continuity</strong>: The walk is continuous, with no jumps or gaps.</li><li><strong>Normality</strong>: As we established by taking discrete random walks in the continuous limit, the distribution of positions at any given time should be normal.</li></ol><p>So let’s write this mathematically. Such a random variable is usually denoted either by \(B_t\) for “Bronian motion”, which is the physical phenomenon, or \(W_t\) for “Wiener process”, in honor of the mathematician <strong>Norbert Wiener</strong> who developed a lot of its early theory.</p><p>I will use \(W(t)\) to emphasize its dependence on \(t\).</p><p>Let \(W(t)\) be the position of the Brownian motion at time \(t\), and let \(\Delta W(t_1,t_2)\) be the displacement of the Brownian motion from time \(t_1\) to time \(t_2\).</p><blockquote><p>Note that, unlike the discrete case, we cannot consider a single increment and have a single index \(t\) for displacements as we did with \(X(t)\). As mentioned, the continuous case requires considering intervals instead of single steps.</p></blockquote><p>Then, we write some properties of Brownian motion:</p><ol><li>\(W(0)=0\) almost surely</li><li>\(W(t)\sim N(0,t)\)<ul><li>With the first condition, this is often written equivalently as \(\Delta W(s,t)\sim N(0,t-s)\) for all \(s \ne t\)</li></ul></li><li>\(\Delta W(t_1,t_2)\) is independent of \(\Delta W(t_2,t_3)\) for arbitrary distinct \(t_1 &lt; t_2 \le t_3\)</li></ol><p>We can straightforwardly use these conditions are enough to find</p><ol><li>\(E[W(t)]=0\) for all \(t\)</li><li>\(Var(W(t))=t\) for all \(t\)</li></ol><p>This is analogous to the discrete case.</p><p>But it also turns out that these conditions are sufficient to prove continuity, although it’s more involved:</p><ol><li>The sample path \(t \mapsto W(t)\) is almost surely uniformly Hölder continuous for each exponent \(\gamma &lt; \frac{1}{2}\), but is nowhere Hölder continuous for \(\gamma &gt;= \frac{1}{2}\). <a href="https://math.nyu.edu/~bourgade/SA2010/StochasticAnalysis.pdf#page30">p.30,33 of source</a><ul><li>In particular, a sample path \(t \mapsto W(t)\) is almost surely nowhere differentiable.</li></ul></li></ol><p>So, \(W(t)\) is our mathematical model for Brownian motion: a continuous, random, zero-mean process with variance proportional to time. It’s wild—it’s globally somewhat predictable yet locally completely unpredictable. A plot of W(t) looks like a jagged mess, but it’s got structure under the hood. (You can generate one yourself with the code in <a href="#b2-python-code-for-brownian-motion-plot">Appendix</a>.)</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_brownian_motion.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_brownian_motion.png" alt="Sample Brownian Motion Path" loading="lazy"></a> <em><a href="#b2-python-code-for-brownian-motion-plot">Code</a> 2D image: Sample Brownian motion path</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/continuous_brownian_3d_smooth.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/continuous_brownian_3d_smooth.gif" alt="3D Animation Continuous Brownian Motion" loading="lazy"></a> <em><a href="#c2-3d-animation-of-brownian-motion">Code</a> 3D animation: Brownian motion with evolving distribution</em></p><p>Now, let’s take this beast and do something useful with it.</p><hr><h3 id="4-itô-calculus"><span><strong>4. Itô Calculus</strong></span><a href="#4-itô-calculus"><i></i></a></h3><p>Brownian motion \(W(t)\) is continuous but so irregular that it’s nowhere differentiable. To see why, consider the rate of change over a small interval \(dt\):</p><p>\[\lim_{dt \to 0} \frac{W(t + dt) - W(t)}{dt} = \lim_{dt \to 0} \frac{\Delta W(t, t + dt)}{dt}\]</p><p>Since \(\Delta W(t, t + dt) \sim N(0, dt) = \sqrt{dt} \, N(0, 1)\):</p><p>\[\frac{\Delta W(t, t + dt)}{dt} = \frac{\sqrt{dt} \, N(0, 1)}{dt} = \frac{1}{\sqrt{dt}} N(0, 1)\]</p><p>As \(dt \to 0\), \(\frac{1}{\sqrt{dt}}\) grows without bound, and the expression becomes dominated by random fluctuations—it doesn’t converge to a finite derivative. This rules out standard calculus for handling Brownian motion, but we still need a way to work with processes driven by it, like stock prices or particle diffusion.</p><p>In the 1940s, Kiyosi Itô developed a framework to address this: <strong>Itô calculus</strong>. Rather than forcing Brownian motion into the rules of regular calculus, Itô built a new system tailored to its random nature, forming the foundation of stochastic calculus.</p><h4 id="the-increment-dw-and-its-properties"><span><strong>The Increment \(dW\) and Its Properties</strong></span><a href="#the-increment-dw-and-its-properties"><i></i></a></h4><p>Define the small change in Brownian motion over an interval \(dt\):</p><p>\[dW := W(t + dt) - W(t) = \Delta W(t, t + dt)\]</p><p>From Section 3, \(W(t + dt) - W(t) \sim N(0, dt)\), so:</p><p>\[dW = \sqrt{dt} \, N(0, 1)\]</p><p>Unlike the deterministic \(dx\) in regular calculus, \(dW\) is random—its magnitude scales with \(\sqrt{dt}\), and its sign depends on a standard normal distribution \(N(0, 1)\). It’s a small but erratic step, with:</p><ul><li>\(E[dW] = 0\),</li><li>\(Var(dW) = E[(dW)^2] = dt\).</li></ul><p>Now consider \((dW)^2\). Its expected value is \(dt\), but what about its variability? The variance is \(Var[(dW)^2] = 2 dt^2\), which becomes negligible as \(dt \to 0\). This stability allows us to treat \((dW)^2 \approx dt\) in Itô calculus (formally, in the mean-square sense—see the <a href="#a1-notation">Appendix</a> for details). In contrast to regular calculus, where \((dx)^2\) is too small to matter, \((dW)^2\) is on the same scale as \(dt\), which changes how we handle calculations.</p><h4 id="the-itô-integral-integrating-against-randomness"><span><strong>The Itô Integral: Integrating Against Randomness</strong></span><a href="#the-itô-integral-integrating-against-randomness"><i></i></a></h4><p>In regular calculus, \(\int_a^b f(x) \, dx\) approximates the area under a curve by summing rectangles, \(\sum f(x_i) \Delta x\), and taking the limit as \(\Delta x \to 0\). For Brownian motion, we want something like \(\int_0^t f(s) \, dW(s)\), where \(dW(s)\) replaces \(dx\). Here, the steps are random: \(\Delta W(s_i, s_{i+1}) \sim \sqrt{\Delta s} \, N(0, 1)\). We approximate:</p><p>\[\int_0^t f(s) \, dW(s) \approx \sum_{i=0}^{n-1} f(s_i) [\Delta W(s_i, s_{i+1})]\]</p><p>over a partition \(s_0, s_1, \dots, s_n\) of \([0, t]\), then let \(n \to \infty\). Unlike a deterministic integral, the result is a random variable, reflecting \(W(t)’s\) randomness. Using \(f(s_i)\) from the left endpoint keeps the integral “non-anticipating”—we only use information up to time \(s_i\), which aligns with the forward-evolving nature of stochastic processes.</p><h4 id="itôs-lemma-a-chain-rule-for-randomness"><span><strong>Itô’s Lemma: A Chain Rule for Randomness</strong></span><a href="#itôs-lemma-a-chain-rule-for-randomness"><i></i></a></h4><p>For a function \(f(t, W(t))\), regular calculus gives:</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial W} dW\]</p><p>But Brownian motion’s roughness requires a second-order term. Taylor-expand \(f(t, W(t))\):</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial W} dW + \frac{1}{2} \frac{\partial^2 f}{\partial W^2} (dW)^2 + \text{smaller terms}\]</p><p>As \(dt \to 0\):</p><ul><li>\(dt^2\) and \(dt \, dW\) vanish,</li><li>\((dW)^2 \approx dt\) stays significant.</li></ul><p>This leaves:</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial W} dW + \frac{1}{2} \frac{\partial^2 f}{\partial W^2} dt\]</p><p>This is <strong>Itô’s Lemma</strong>. The extra \(\frac{1}{2} \frac{\partial^2 f}{\partial W^2} dt\) arises because \((dW)^2\) contributes at the \(dt\) scale, capturing the effect of Brownian motion’s curvature.</p><p>Since we have the algebraic heuristic \(dW^2 = dt\), we could in some define everything in terms of powers \(dW\) to expand things algebraically and implicitly compute derivative rules.</p><p>This is precisely the idea behind my blog post on <a href="https://jiha-kim.github.io/posts/automatic-stochastic-differentiation/index.html">Automatic Stochastic Differentiation</a>, where we use \(\mathbb{R}[\epsilon]/\epsilon^3\) in a similar fashion to dual numbers \(\mathbb{R}[\epsilon]/\epsilon^2\) for automatic differentiation in deterministic calculus.</p><p>If you haven’t already, I highly recommend checking it out.</p><h4 id="example-fw--w2"><span><strong>Example: \(f(W) = W^2\)</strong></span><a href="#example-fw--w2"><i></i></a></h4><p>Take \(f(t, W(t)) = W^2\):</p><ul><li>\(\frac{\partial f}{\partial t} = 0\),</li><li>\(\frac{\partial f}{\partial W} = 2W\),</li><li>\(\frac{\partial^2 f}{\partial W^2} = 2\).</li></ul><p>Then:</p><p>\[d(W^2) = 0 \cdot dt + 2W \, dW + \frac{1}{2} \cdot 2 \cdot dt = 2W \, dW + dt\]</p><p>Integrate from 0 to \(t\) (with \(W(0) = 0\)):</p><p>\[W(t)^2 = \int_0^t 2W(s) \, dW(s) + t\]</p><p>The \(t\) term matches \(E[W(t)^2] = t\), and the integral is a random component with mean 0, consistent with Brownian motion’s properties.</p><hr><h3 id="5-stochastic-differential-equations"><span><strong>5. Stochastic Differential Equations</strong></span><a href="#5-stochastic-differential-equations"><i></i></a></h3><p>Itô calculus gives us tools—integrals and a chain rule—to handle Brownian motion. Now we can model systems where randomness and trends coexist, using <strong>stochastic differential equations (SDEs)</strong>. Unlike regular differential equations (e.g., \(\frac{dx}{dt} = -kx\)) that describe smooth dynamics, SDEs blend deterministic behavior with stochastic noise, fitting phenomena like stock prices or diffusing particles.</p><h4 id="defining-an-sde"><span><strong>Defining an SDE</strong></span><a href="#defining-an-sde"><i></i></a></h4><p>Consider a process influenced by both a predictable trend and random fluctuations:</p><p>\[dX(t) = a(t, X(t)) \, dt + b(t, X(t)) \, dW(t)\]</p><ul><li>\(X(t)\): The evolving quantity (e.g., position or price).</li><li>\(a(t, X(t)) \, dt\): The “drift”—the systematic part, scaled by \(dt\).</li><li>\(b(t, X(t)) \, dW(t)\): The “diffusion”—random perturbations from Brownian motion.</li></ul><p>Here, \(a\) and \(b\) are functions of time and state, and \(dW(t) = \sqrt{dt} \, N(0, 1)\) brings the noise. Solutions to SDEs aren’t fixed curves but random paths, each run producing a different trajectory with statistical patterns we can study.</p><h4 id="itôs-lemma-revisited"><span><strong>Itô’s Lemma Revisited</strong></span><a href="#itôs-lemma-revisited"><i></i></a></h4><p>Itô’s lemma actually applies to a function \(f(t, X(t))\) and its stochastic derivative \(df(t, X(t))\) for a general \(dX(t) = b(t,X(t))dt+\sigma(t,X(t))dW\), and this is done through the linearity of the Itô differential (as seen using the \(\mathbb{R}[\epsilon]/\epsilon^3\) formulation).</p><p>Considering that \(dX=O(dW)\), we consider terms up to \(dX^2=O(dW^2)\):</p><p>\[\begin{aligned} df &amp;= f_t \, dt + f_X \, dX + \frac{1}{2}f_{XX} dX^2 \\ &amp;= f_t \, dt + f_X \, (b \, dt+\sigma \, dW) + \frac{1}{2}f_{XX} (b \, dt+\sigma \, dW)^2 \\ &amp;= (f_t + bf_X+\frac{1}{2}\sigma^2 f_{XX}) \, dt + \sigma f_X \, dW \end{aligned}\]</p><p>which is the general form typically presented.</p><h4 id="drift-and-diffusion"><span><strong>Drift and Diffusion</strong></span><a href="#drift-and-diffusion"><i></i></a></h4><p>The drift \(a(t, X)\) sets the average direction, like a current pushing a particle. The diffusion \(b(t, X)\) determines the random jitter’s strength. If \(b = 0\), we get a standard ODE; if \(a = 0\), it’s just scaled Brownian motion. Together, they model systems with both structure and uncertainty.</p><p>Take a simple case:</p><p>\[dX(t) = \mu \, dt + \sigma \, dW(t)\]</p><ul><li>\(\mu\): Constant drift.</li><li>\(\sigma\): Constant noise amplitude.</li></ul><p>Starting at \(X(0) = 0\), integrate:</p><p>\[X(t) = \int_0^t \mu \, ds + \int_0^t \sigma \, dW(s) = \mu t + \sigma W(t)\]</p><p>Since \(W(t) \sim N(0, t)\), we have \(X(t) \sim N(\mu t, \sigma^2 t)\)—a process drifting linearly with noise spreading over time. It’s a basic model for things like a stock with steady growth and volatility.</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_SDE.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_SDE.png" alt="Sample SDE Path" loading="lazy"></a> <em><a href="#b3-python-code-for-basic-sde-simulation">Code</a> 2D image: Sample SDE path with mu=1.0, sigma=0.5</em></p><h4 id="geometric-brownian-motion"><span><strong>Geometric Brownian Motion</strong></span><a href="#geometric-brownian-motion"><i></i></a></h4><p>For systems where changes scale with size—like stock prices or certain physical processes—consider <strong>geometric Brownian motion (GBM)</strong>:</p><p>\[dS(t) = \mu S(t) \, dt + \sigma S(t) \, dW(t)\]</p><ul><li>\(S(t)\): The state (e.g., stock price).</li><li>\(\mu S(t)\): Proportional drift.</li><li>\(\sigma S(t)\): Proportional noise.</li></ul><p>The percentage change \(\frac{dS}{S} = \mu \, dt + \sigma \, dW\) has a trend and randomness. To solve, let \(f = \ln S\):</p><ul><li>\(\frac{\partial f}{\partial t} = 0\),</li><li>\(\frac{\partial f}{\partial S} = \frac{1}{S}\),</li><li>\(\frac{\partial^2 f}{\partial S^2} = -\frac{1}{S^2}\).</li></ul><p>Using Itô’s lemma:</p><p>\[d(\ln S) = \frac{1}{S} (\mu S \, dt + \sigma S \, dW) + \frac{1}{2} \left( -\frac{1}{S^2} \right) (\sigma^2 S^2 dt)\] \[= \left( \mu - \frac{1}{2} \sigma^2 \right) dt + \sigma \, dW\]</p><p>Integrate from \(0\) to \(t\):</p><p>\[\ln S(t) - \ln S(0) = \left( \mu - \frac{1}{2} \sigma^2 \right) t + \sigma W(t)\] \[S(t) = S(0) \exp\left( \left( \mu - \frac{1}{2} \sigma^2 \right) t + \sigma W(t) \right)\]</p><p>The drift is adjusted by \(-\frac{1}{2} \sigma^2\) due to the second-order effect of noise, and \(\sigma W(t)\) adds random fluctuations. This form underlies the Black-Scholes model in finance.</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/gbm_path.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/gbm_path.png" alt="Sample Geometric Brownian Motion Path" loading="lazy"></a> <em><a href="#b4-python-code-for-geometric-brownian-motion-simulation">Code</a> 2D image: A sample path of a geometric Brownian motion with parameters μ = 0.15 and σ = 0.2</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/geometric_brownian_drifted_3d.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/geometric_brownian_drifted_3d.gif" alt="Geometric Brownian Motion drifting over time" loading="lazy"></a> <em><a href="#c3-3d-animation-of-geometric-brownian-motion">Code</a> 3D animation: Geometric Brownian Motion drifting over time</em></p><h4 id="beyond-analytics"><span><strong>Beyond Analytics</strong></span><a href="#beyond-analytics"><i></i></a></h4><p>Analytical solutions like GBM’s are exceptions. Most SDEs require numerical simulation (e.g., stepping \(X(t + \Delta t) = X(t) + \mu \Delta t + \sigma \sqrt{\Delta t} \, N(0, 1)\)) or statistical analysis via equations like Fokker-Planck. See the <a href="#b3-python-code-for-basic-sde-simulation">appendix</a> for simulation code.</p><hr><h3 id="6-stratonovich-calculus"><span><strong>6. Stratonovich Calculus</strong></span><a href="#6-stratonovich-calculus"><i></i></a></h3><p>Recall Itô’s lemma:</p><p>\[df = \left(\frac{\partial f}{\partial t} + \frac{1}{2} \frac{\partial^2 f}{\partial X^2}\right) dt + \frac{\partial f}{\partial X} dX\]</p><p>That second derivative term is pretty annoying to deal with in calculations. Is there a way we can simplify it to the familiar chain rule in regular calculus?</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial X} dX\]</p><p>The answer is yes, and it’s called <strong>Stratonovich calculus</strong>. Let’s explore a bit. First, the deterministic part clearly satisfies the regular chain rule, since we can directly apply it using linearity. The trouble arises in the stochastic part, which we need to analyze. This means we only need to consider a function \(f(X(t))\).</p><p>Remember, for the Itô form, we chose to define the integral by choosing the left endpoint of each interval. In other words, it is this stochastic part that will vary. To delete this second order term, we need to somehow absorb it into the stochastic part by defining some Stratonovich differential, typically denoted by \(\circ dW\).</p><p>Going back to our Riemann sum definitions, our degrees of freedom lie in the choice of the evaluation point for each interval:</p><p>\[\int_{0}^{T} f(X(t)) \diamond dW = \lim_{n \to \infty} \sum_{i=0}^{n-1} f(X(t_i) + \lambda \Delta X(t_i,t_{i+1})) \Delta W(t_i, t_{i+1})\]</p><p>where \(\lambda \in [0,1]\) is a constant that linearly interpolates between the left and right endpoints of each interval giving a corresponding differential \(\diamond dW\), and \(\Delta X(t_i,t_{i+1}):=X(t_{i+1})-X(t_i)\).</p><p>In the deterministic case, since we always have \(O(dX^2) \to 0\), it doesn’t matter where we choose the evaluation point. However, in the stochastic case, remember that \(O(dW^2) \to O(dt)\), so we need a more careful choice of evaluation point.</p><p>Mathematically, our goal is to define a new stochastic integral that preserves the standard chain rule:</p><p>\[df = f_X \circ dX\]</p><p>In the limiting discrete form, let’s try setting every term equal to each other:</p><p>\[f(X+\Delta X) - f(X) = f_X(X+\lambda \Delta X) \Delta X\]</p><p>In other words, our newly defined differential should result in the derivative being a linear approximation of the original function instead of quadratic:</p><p>\[\frac{f(X+\Delta X)-f(X)}{\Delta X} = f_X(X+\lambda \Delta X)\]</p><p>But watch what happens as we take the Taylor expansion on both sides about \(X\) (recalling that \(o(\Delta X^2)\to 0\)):</p><p>\[f_X + \frac{1}{2}f_{XX}\Delta X = f_X + \lambda f_{XX}\Delta X\]</p><p>Comparing coefficients, we wish to set \(\lambda = 1/2\) to preserve the chain rule. So Stratonovich integrals are defined by the midpoint evaluation rule:</p><p>\[\begin{aligned} \int_{0}^{T} f(X(t)) \circ dW &amp;= \lim_{n \to \infty} \sum_{i=0}^{n-1} f(X(t_i) + \frac{1}{2} \Delta X(t_i,t_{i+1})) \Delta W(t_i, t_{i+1}) \\ &amp;= \lim_{n \to \infty} \sum_{i=0}^{n-1} f\left(\frac{X(t_i)+X(t_{i+1})}{2}\right) \Delta W(t_i, t_{i+1}) \\ \end{aligned}\]</p><h4 id="conversion-formula-between-itô-and-stratonovich"><span>Conversion Formula between Itô and Stratonovich</span><a href="#conversion-formula-between-itô-and-stratonovich"><i></i></a></h4><p>There is a formula to convert the Stratonovich differential into a corresponding Itô SDE that depends on the Itô differential as well as the volatility function \(\sigma\).</p><p>Recall that Itô’s lemma states that for \(dX = a dt + b dW\):</p><p>\[df = f_t dt + f_X dX + \frac{1}{2}f_{XX} dX^2 = (af_t + \frac{1}{2} b^2 f_{XX}) dt + bf_X dW\]</p><p>In parallel, we defined Stratonovich’s chain rule to satisfy for \(dX = \tilde a dt + \tilde b \circ dW\):</p><p>\[df = f_t dt + f_X \circ dX = (f_t + \tilde a f_X) dt + \tilde b f_X \circ dW\]</p><p>Hence, between Itô and Stratonovich SDEs, we have in both cases that the differential is scaled by the volatility function of \(X\) and \(f_X\), but the drift function changes. Let’s find a conversion formula between the two.</p><p>Suppose we have:</p><p>\[dX = a dt + b dW = \tilde a dt + b \circ dW\]</p><p>Then, our objective is to find \(\tilde a\) in terms of \(a\).</p><p>Recall from the integral definition that \(b(X) \circ dW = b(X+\frac{1}{2}dX) dW\). If we Taylor expand around \(X\), we have:</p><p>\[b(X+\frac{1}{2}dX) dW = b(X)dW + b_X(X)\frac{1}{2}dX dW + o(dt)\]</p><p>Now, if we plug in \(dX=a dt + b dW\), the first term vanishes, leaving \(b_X b \frac{1}{2}dW^2 \sim \frac{1}{2}b_X b dt\) (where the arguments \(X\) are left implicit).</p><p>Hence:</p><p>\[a = \tilde a + \frac{1}{2} b_X b.\]</p><h4 id="applications-of-stratonovich-calculus"><span><strong>Applications of Stratonovich Calculus</strong></span><a href="#applications-of-stratonovich-calculus"><i></i></a></h4><p>Stratonovich calculus, with its midpoint evaluation rule, adjusts how we handle stochastic integrals compared to Itô’s left-endpoint approach. This shift makes it valuable in certain fields where its properties align with physical systems or simplify calculations. Below are some practical applications, each with a concrete mathematical example.</p><ul><li><p><strong>Physics with Multiplicative Noise</strong>: In physical systems, noise often scales with the state—like a particle in a fluid where random kicks depend on its position. Consider a damped oscillator with position \(X(t)\) under state-dependent noise:</p>\[dX = -k X \, dt + \sigma X \circ dW\]<p>Here, \(k &gt; 0\) is the damping constant, \(\sigma\) is the noise strength, and \(\circ dW\) denotes the Stratonovich differential. Using Stratonovich’s chain rule, for \(f(X) = \ln X\):</p>\[d(\ln X) = \frac{1}{X} (-k X \, dt + \sigma X \circ dW) = -k \, dt + \sigma \circ dW\]<p>This integrates to \(X(t) = X(0) e^{-kt + \sigma W(t)}\), matching the expected exponential decay with noise. Stratonovich fits here because it preserves symmetries in continuous physical processes, unlike Itô, which adds a \(\frac{1}{2} \sigma^2 X \, dt\) drift term.</p></li><li><p><strong>Wong-Zakai Theorem and Smooth Noise</strong>: Real-world noise isn’t perfectly white (uncorrelated like \(dW\))—it’s often smoother. The Wong-Zakai theorem shows that approximating smooth noise (e.g., \(\eta(t)\) with correlation time \(\epsilon\)) as \(\epsilon \to 0\) yields a Stratonovich SDE. Take a simple system:</p>\[\dot{x} = a x + b x \eta(t)\]<p>As \(\eta(t) \to\) white noise, this becomes \(dX = a X \, dt + b X \circ dW\). In Stratonovich form, the solution is \(X(t) = X(0) e^{a t + b W(t)}\). This is useful in engineering, like modeling voltage in a circuit with thermal fluctuations, where noise has slight smoothness.</p></li><li><p><strong>Stochastic Control</strong>: In control problems, Stratonovich can simplify dynamics under feedback. Consider a system with control input \(u(t)\) and noise:</p>\[dX = (a X + u) \, dt + \sigma X \circ dW\]<p>For \(f(X) = X^2\), the Stratonovich rule gives:</p>\[d(X^2) = 2X (a X + u) \, dt + 2X \cdot \sigma X \circ dW = (2a X^2 + 2X u) \, dt + 2\sigma X^2 \circ dW\]<p>The lack of a second-derivative term (unlike Itô’s \(+ \sigma^2 X^2 dt\)) aligns with classical control intuition, making it easier to design \(u(t)\) for, say, stabilizing a noisy pendulum or a drone in wind.</p></li><li><p><strong>Biological Diffusion</strong>: In biology, noise can depend on spatial gradients, like protein diffusion across a cell. Model this as:</p>\[dX = \mu \, dt + \sigma(X) \circ dW, \quad \sigma(X) = \sqrt{2D (1 + k X^2)}\]<p>where \(D\) is diffusivity and \(k\) adjusts noise with position. Stratonovich ensures the diffusion term reflects physical conservation laws, matching experimental data in systems like bacterial motility better than Itô, which alters the drift.</p></li><li><p><strong>Numerical Stability</strong>: For simulations, Stratonovich pairs well with midpoint methods. Take \(dX = -a X \, dt + \sigma \circ dW\). A Stratonovich discretization might use:</p>\[X_{n+1} = X_n - a \left(\frac{X_n + X_{n+1}}{2}\right) \Delta t + \sigma \Delta W_n\]<p>This implicit scheme leverages the midpoint rule, reducing numerical artifacts in models like chemical kinetics compared to Itô’s explicit steps.</p></li></ul><p>The choice between Stratonovich and Itô depends on context. Stratonovich suits systems where noise is tied to physical continuity or symmetry, while Itô dominates in finance for its non-anticipating properties. The conversion \(a = \tilde{a} + \frac{1}{2} b b_X\) lets you switch forms as needed.</p><h2 id="appendix"><span>Appendix</span><a href="#appendix"><i></i></a></h2><h3 id="a0-further-reading"><span>A.0. Further Reading</span><a href="#a0-further-reading"><i></i></a></h3><ul><li><a href="https://www.chrisrackauckas.com/assets/Papers/ChrisRackauckas-IntuitiveSDEs.pdf">An Intuitive Introduction For Understanding and Solving Stochastic Differential Equations - Chris Rackauckas (2017)</a></li><li><a href="https://math.nyu.edu/~bourgade/SA2010/StochasticAnalysis.pdf">Stochastic analysis - Paul Bourgade (2010)</a></li><li><a href="https://www.cmor-faculty.rice.edu/~cox/stoch/SDE.course.pdf">AN INTRODUCTION TO STOCHASTIC DIFFERENTIAL EQUATIONS VERSION 1.2 - Lawrence C. Evans (2013)</a></li><li>Stochastic differential equations An introduction with applications - Bernt K. Øksendal (2003)</li><li><a href="https://en.wikipedia.org/wiki/Stochastic_calculus">Wikipedia: Stochastic calculus</a></li><li><a href="https://en.wikipedia.org/wiki/Stochastic_differential_equation">Wikipedia: Stochastic differential equation</a></li></ul><h3 id="a1-notation"><span>A.1. Notation</span><a href="#a1-notation"><i></i></a></h3><p>Here is a list of notation used in this document:</p><ul><li>\(\binom{n}{k}=\frac{n!}{k!(n-k)!}\) is the binomial coefficient</li><li>\(X: \Omega \to \mathbb{R}\) is a random variable from a sample space \(\Omega\) to a real number</li><li>\(P(A)\) is the probability of event \(A\)</li><li>\(E[X]=\int_{\omega \in \Omega} X(\omega) dP(\omega)\) is the expected value of \(X\)</li><li>\(N(\mu, \sigma^2)\) is a normal distribution with mean \(\mu\) and variance \(\sigma^2\)</li><li>\(W(t)\) is the position of a Brownian motion at time \(t\)</li><li>\(\Delta W(t_1,t_2)\) is the displacement of a Brownian motion from time \(t_1\) to time \(t_2\)</li><li>\(dt\) is an infinitesimal time increment</li><li>\(dW := \Delta W(t,t+dt)\) is an infinitesimal increment of Brownian motion over time</li><li>\((dW)^2 \sim dt\) denotes that \((dW^2) = dt + o(dt)\) where \(\lim_{t \to 0} \frac{o(dt)}{dt} = 0\), such that \((dW)^2\) is asymptotically equal to \(dt\) in the mean-square limit:</li></ul><p>\(\lim_{dt \to 0} \frac{E[(dW)^2-dt]^2}{dt}=0\)</p><ul><li>\(f_t:=\frac{\partial f}{\partial t}\) is the partial derivative of \(f\) with respect to \(t\)</li><li>\(f_xx:=\frac{\partial^2 f}{\partial x^2}\) is the second order partial derivative of \(f\) with respect to \(x\)</li></ul><h3 id="b1-python-code-for-binomial-plots"><span>B.1. Python code for binomial plots</span><a href="#b1-python-code-for-binomial-plots"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>scipy.stats</span> <span>import</span> <span>binom</span>

<span>n_values</span> <span>=</span> <span>[</span><span>5</span><span>,</span> <span>10</span><span>,</span> <span>25</span><span>,</span> <span>50</span><span>,</span> <span>100</span><span>]</span>
<span>p</span> <span>=</span> <span>0.5</span>

<span># Individual plots
</span><span>for</span> <span>n</span> <span>in</span> <span>n_values</span><span>:</span>
    <span>k</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>0</span><span>,</span> <span>n</span> <span>+</span> <span>1</span><span>)</span>
    <span>positions</span> <span>=</span> <span>2</span> <span>*</span> <span>k</span> <span>-</span> <span>n</span>
    <span>probs</span> <span>=</span> <span>binom</span><span>.</span><span>pmf</span><span>(</span><span>k</span><span>,</span> <span>n</span><span>,</span> <span>p</span><span>)</span>
    
    <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>6</span><span>,</span> <span>4</span><span>))</span>
    <span>plt</span><span>.</span><span>bar</span><span>(</span><span>positions</span><span>,</span> <span>probs</span><span>,</span> <span>width</span><span>=</span><span>1.0</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>skyblue</span><span>'</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>black</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>title</span><span>(</span><span>f</span><span>'</span><span>n = </span><span>{</span><span>n</span><span>}</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Position (# wins - # losses)</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylim</span><span>(</span><span>0</span><span>,</span> <span>max</span><span>(</span><span>probs</span><span>)</span> <span>*</span> <span>1.2</span><span>)</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>f</span><span>'</span><span>random_walk_n_</span><span>{</span><span>n</span><span>}</span><span>.png</span><span>'</span><span>,</span> <span>dpi</span><span>=</span><span>300</span><span>,</span> <span>bbox_inches</span><span>=</span><span>'</span><span>tight</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>

<span># Combined plot
</span><span>fig</span><span>,</span> <span>axes</span> <span>=</span> <span>plt</span><span>.</span><span>subplots</span><span>(</span><span>5</span><span>,</span> <span>1</span><span>,</span> <span>figsize</span><span>=</span><span>(</span><span>8</span><span>,</span> <span>12</span><span>),</span> <span>sharex</span><span>=</span><span>True</span><span>)</span>
<span>for</span> <span>i</span><span>,</span> <span>n</span> <span>in</span> <span>enumerate</span><span>(</span><span>n_values</span><span>):</span>
    <span>k</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>0</span><span>,</span> <span>n</span> <span>+</span> <span>1</span><span>)</span>
    <span>positions</span> <span>=</span> <span>2</span> <span>*</span> <span>k</span> <span>-</span> <span>n</span>
    <span>probs</span> <span>=</span> <span>binom</span><span>.</span><span>pmf</span><span>(</span><span>k</span><span>,</span> <span>n</span><span>,</span> <span>p</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>bar</span><span>(</span><span>positions</span><span>,</span> <span>probs</span><span>,</span> <span>width</span><span>=</span><span>1.0</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>skyblue</span><span>'</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>black</span><span>'</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>n = </span><span>{</span><span>n</span><span>}</span><span>'</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>set_ylabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>set_ylim</span><span>(</span><span>0</span><span>,</span> <span>max</span><span>(</span><span>probs</span><span>)</span> <span>*</span> <span>1.2</span><span>)</span>
<span>axes</span><span>[</span><span>-</span><span>1</span><span>].</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (# wins - # losses)</span><span>'</span><span>)</span>
<span>plt</span><span>.</span><span>tight_layout</span><span>()</span>
<span>plt</span><span>.</span><span>savefig</span><span>(</span><span>'</span><span>random_walk_combined.png</span><span>'</span><span>,</span> <span>dpi</span><span>=</span><span>300</span><span>,</span> <span>bbox_inches</span><span>=</span><span>'</span><span>tight</span><span>'</span><span>)</span>
<span>plt</span><span>.</span><span>close</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b2-python-code-for-brownian-motion-plot"><span><strong>B2. Python Code for Brownian Motion Plot</strong></span><a href="#b2-python-code-for-brownian-motion-plot"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span># Simulate Brownian motion
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>
<span>t</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>1000</span><span>)</span>  <span># Time from 0 to 1
</span><span>dt</span> <span>=</span> <span>t</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t</span><span>[</span><span>0</span><span>]</span>
<span>dW</span> <span>=</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>size</span><span>=</span><span>len</span><span>(</span><span>t</span><span>)</span><span>-</span><span>1</span><span>)</span>  <span># Increments
</span><span>W</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>([[</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>dW</span><span>)])</span>  <span># Cumulative sum starts at 0
</span>
<span># Plot
</span><span>plt</span><span>.</span><span>plot</span><span>(</span><span>t</span><span>,</span> <span>W</span><span>)</span>
<span>plt</span><span>.</span><span>title</span><span>(</span><span>"</span><span>Sample Brownian Motion Path</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>"</span><span>Time t</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>"</span><span>W(t)</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b3-python-code-for-basic-sde-simulation"><span><strong>B3. Python Code for Basic SDE Simulation</strong></span><a href="#b3-python-code-for-basic-sde-simulation"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span># Simulate simple SDE: dX = mu dt + sigma dW
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>
<span>T</span> <span>=</span> <span>1.0</span>
<span>N</span> <span>=</span> <span>1000</span>
<span>dt</span> <span>=</span> <span>T</span> <span>/</span> <span>N</span>
<span>t</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>T</span><span>,</span> <span>N</span><span>+</span><span>1</span><span>)</span>
<span>mu</span><span>,</span> <span>sigma</span> <span>=</span> <span>1.0</span><span>,</span> <span>0.5</span>
<span>X</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>N</span><span>+</span><span>1</span><span>)</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>N</span><span>):</span>
    <span>dW</span> <span>=</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span>
    <span>X</span><span>[</span><span>i</span><span>+</span><span>1</span><span>]</span> <span>=</span> <span>X</span><span>[</span><span>i</span><span>]</span> <span>+</span> <span>mu</span> <span>*</span> <span>dt</span> <span>+</span> <span>sigma</span> <span>*</span> <span>dW</span>

<span>plt</span><span>.</span><span>plot</span><span>(</span><span>t</span><span>,</span> <span>X</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>"</span><span>μ=</span><span>{</span><span>mu</span><span>}</span><span>, σ=</span><span>{</span><span>sigma</span><span>}</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>title</span><span>(</span><span>"</span><span>Sample Path of dX = μ dt + σ dW</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>"</span><span>Time t</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>"</span><span>X(t)</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>legend</span><span>()</span>
<span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b4-python-code-for-geometric-brownian-motion-simulation"><span><strong>B4. Python Code for Geometric Brownian Motion Simulation</strong></span><a href="#b4-python-code-for-geometric-brownian-motion-simulation"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span># Simulate simple SDE: dX = mu dt + sigma dW
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>

<span># Simulate Geometric Brownian Motion (exact solution)
</span><span>T_gbm</span> <span>=</span> <span>10.0</span>  <span># Longer time to show exponential nature
</span><span>N_gbm</span> <span>=</span> <span>1000</span>
<span>t_gbm</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>T_gbm</span><span>,</span> <span>N_gbm</span><span>+</span><span>1</span><span>)</span>
<span>S0</span> <span>=</span> <span>100.0</span>  <span># Initial stock price
</span><span>mu</span><span>,</span> <span>sigma</span> <span>=</span> <span>0.15</span><span>,</span> <span>0.2</span>  <span># Slightly larger for visibility
</span><span>S</span> <span>=</span> <span>S0</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>((</span><span>mu</span> <span>-</span> <span>0.5</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span><span>)</span> <span>*</span> <span>t_gbm</span> <span>+</span> <span>sigma</span> <span>*</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>t_gbm</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>N_gbm</span><span>+</span><span>1</span><span>))</span>

<span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>8</span><span>,</span> <span>4</span><span>))</span>
<span>plt</span><span>.</span><span>plot</span><span>(</span><span>t_gbm</span><span>,</span> <span>S</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>"</span><span>μ=</span><span>{</span><span>mu</span><span>}</span><span>, σ=</span><span>{</span><span>sigma</span><span>}</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>title</span><span>(</span><span>"</span><span>Sample Path: Geometric Brownian Motion</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>"</span><span>Time t</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>"</span><span>S(t)</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>legend</span><span>()</span>
<span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
<span>plt</span><span>.</span><span>savefig</span><span>(</span><span>"</span><span>gbm_path.png</span><span>"</span><span>,</span> <span>dpi</span><span>=</span><span>300</span><span>,</span> <span>bbox_inches</span><span>=</span><span>"</span><span>tight</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b5-latex-code-for-tikz-diagram-of-paths-in-pascals-triangle"><span>B5. LaTeX Code for Tikz Diagram of Paths in Pascal’s Triangle</span><a href="#b5-latex-code-for-tikz-diagram-of-paths-in-pascals-triangle"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td><pre><span>\documentclass</span><span>{</span>standalone<span>}</span>
<span>\usepackage</span><span>{</span>tikz<span>}</span>
<span>\begin{document}</span>

<span>\begin{tikzpicture}</span>[scale=0.8]
    <span>% Add a white background rectangle</span>
  <span>\fill</span><span>[white]</span> (-12, 1) rectangle (10, -5);
  
  <span>% Row labels (only once, to the left of the first diagram)</span>
  <span>\node</span><span>[align=right]</span> at (-11, 0) <span>{</span>Row 0<span>}</span>;
  <span>\node</span><span>[align=right]</span> at (-11, -1) <span>{</span>Row 1<span>}</span>;
  <span>\node</span><span>[align=right]</span> at (-11, -2) <span>{</span>Row 2<span>}</span>;
  <span>\node</span><span>[align=right]</span> at (-11, -3) <span>{</span>Row 3<span>}</span>;

  <span>% Diagram 1: Path RRL</span>
  <span>\node</span> at (-6, 0) <span>{</span>1<span>}</span>; <span>% Row 0</span>
  <span>\node</span> at (-7, -1) <span>{</span>1<span>}</span>; <span>% Row 1</span>
  <span>\node</span> at (-5, -1) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-8, -2) <span>{</span>1<span>}</span>; <span>% Row 2</span>
  <span>\node</span> at (-6, -2) <span>{</span>2<span>}</span>;
  <span>\node</span> at (-4, -2) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-9, -3) <span>{</span>1<span>}</span>; <span>% Row 3</span>
  <span>\node</span> at (-7, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (-5, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (-3, -3) <span>{</span>1<span>}</span>;
  <span>\draw</span><span>[-&gt;, red, thick]</span> (-6, 0) -- (-5, -1) -- (-4, -2) -- (-5, -3); <span>% RRL</span>
  <span>\node</span> at (-6, -4) <span>{</span>Right-Right-Left<span>}</span>;

  <span>% Diagram 2: Path RLR</span>
  <span>\node</span> at (0, 0) <span>{</span>1<span>}</span>; <span>% Row 0</span>
  <span>\node</span> at (-1, -1) <span>{</span>1<span>}</span>; <span>% Row 1</span>
  <span>\node</span> at (1, -1) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-2, -2) <span>{</span>1<span>}</span>; <span>% Row 2</span>
  <span>\node</span> at (0, -2) <span>{</span>2<span>}</span>;
  <span>\node</span> at (2, -2) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-3, -3) <span>{</span>1<span>}</span>; <span>% Row 3</span>
  <span>\node</span> at (-1, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (1, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (3, -3) <span>{</span>1<span>}</span>;
  <span>\draw</span><span>[-&gt;, blue, thick]</span> (0, 0) -- (1, -1) -- (0, -2) -- (1, -3); <span>% RLR</span>
  <span>\node</span> at (0, -4) <span>{</span>Right-Left-Right<span>}</span>;

  <span>% Diagram 3: Path LRR</span>
  <span>\node</span> at (6, 0) <span>{</span>1<span>}</span>; <span>% Row 0</span>
  <span>\node</span> at (5, -1) <span>{</span>1<span>}</span>; <span>% Row 1</span>
  <span>\node</span> at (7, -1) <span>{</span>1<span>}</span>;
  <span>\node</span> at (4, -2) <span>{</span>1<span>}</span>; <span>% Row 2</span>
  <span>\node</span> at (6, -2) <span>{</span>2<span>}</span>;
  <span>\node</span> at (8, -2) <span>{</span>1<span>}</span>;
  <span>\node</span> at (3, -3) <span>{</span>1<span>}</span>; <span>% Row 3</span>
  <span>\node</span> at (5, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (7, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (9, -3) <span>{</span>1<span>}</span>;
  <span>\draw</span><span>[-&gt;, green, thick]</span> (6, 0) -- (5, -1) -- (6, -2) -- (7, -3); <span>% LRR</span>
  <span>\node</span> at (6, -4) <span>{</span>Left-Right-Right<span>}</span>;
<span>\end{tikzpicture}</span>

<span>\end{document}</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="3d-visualizations"><span>3D Visualizations</span><a href="#3d-visualizations"><i></i></a></h3><h4 id="c1-3d-plot-of-discrete-random-walks"><span>C1. 3D Plot of Discrete Random Walks</span><a href="#c1-3d-plot-of-discrete-random-walks"><i></i></a></h4><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>mpl_toolkits.mplot3d</span> <span>import</span> <span>Axes3D</span>  <span># for 3D plotting
</span><span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># using modern imageio v3 API
</span><span>import</span> <span>os</span>
<span>from</span> <span>scipy.special</span> <span>import</span> <span>comb</span>
<span>from</span> <span>scipy.stats</span> <span>import</span> <span>norm</span>

<span># Create a directory for frames
</span><span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span>##############################################
# Part 1: Discrete Binomial Random Walk (N = 15)
##############################################
</span>
<span>N</span> <span>=</span> <span>15</span>  <span># total number of steps (kept small for clear discreteness)
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>  <span># number of sample paths to overlay
</span>
<span># Simulate a few discrete random walk sample paths
</span><span>sample_paths</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>steps</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>choice</span><span>([</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>],</span> <span>size</span><span>=</span><span>N</span><span>)</span>
    <span>path</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>(([</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>steps</span><span>)))</span>
    <span>sample_paths</span><span>.</span><span>append</span><span>(</span><span>path</span><span>)</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>sample_paths</span><span>)</span>  <span># shape: (num_sample_paths, N+1)
</span>
<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>t_step</span> <span>in</span> <span>range</span><span>(</span><span>N</span> <span>+</span> <span>1</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span># For each discrete time slice up to the current time, plot the PMF
</span>    <span>for</span> <span>t</span> <span>in</span> <span>range</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>):</span>
        <span># For a random walk starting at 0, possible positions are -t, -t+2, ..., t
</span>        <span>x_values</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>-</span><span>t</span><span>,</span> <span>t</span> <span>+</span> <span>1</span><span>,</span> <span>2</span><span>)</span>
        <span>if</span> <span>t</span> <span>==</span> <span>0</span><span>:</span>
            <span>p_values</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>1.0</span><span>])</span>
        <span>else</span><span>:</span>
            <span># k = (x + t)/2 gives the number of +1 steps
</span>            <span>k</span> <span>=</span> <span>(</span><span>x_values</span> <span>+</span> <span>t</span><span>)</span> <span>//</span> <span>2</span>  
            <span>p_values</span> <span>=</span> <span>comb</span><span>(</span><span>t</span><span>,</span> <span>k</span><span>)</span> <span>*</span> <span>(</span><span>0.5</span> <span>**</span> <span>t</span><span>)</span>
        <span># Plot the discrete PMF as blue markers (and connect them with a line)
</span>        <span>ax</span><span>.</span><span>scatter</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>s</span><span>=</span><span>50</span><span>)</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.5</span><span>)</span>
    
    <span># Overlay the sample random walk paths (projected at z=0)
</span>    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>t_step</span> <span>+</span> <span>1</span><span>],</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span>
                <span>'</span><span>r-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>5</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>Sample Path</span><span>'</span> <span>if</span> <span>t_step</span> <span>==</span> <span>0</span> <span>else</span> <span>""</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (x)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time (steps)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Discrete Binomial Random Walk: Step </span><span>{</span><span>t_step</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlim</span><span>(</span><span>0</span><span>,</span> <span>1.0</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/discrete_binomial_</span><span>{</span><span>t_step</span><span>:</span><span>02</span><span>d</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Compute per-frame durations: 0.25 sec for all frames except the last one (2 sec)
</span><span>durations</span> <span>=</span> <span>[</span><span>0.25</span><span>]</span> <span>*</span> <span>(</span><span>len</span><span>(</span><span>frames</span><span>)</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>[</span><span>2.0</span><span>]</span>

<span># Write the GIF with variable durations and infinite looping
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>discrete_binomial.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>durations</span><span>,</span> <span>loop</span><span>=</span><span>0</span><span>)</span>

<span>##############################################
# Part 2: Discrete Random Walk Normalizing (N = 50)
##############################################
</span>
<span>N</span> <span>=</span> <span>50</span>  <span># total number of steps (increased to show gradual convergence)
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>  <span># number of sample paths to overlay
</span>
<span># Simulate a few discrete random walk sample paths
</span><span>sample_paths</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>steps</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>choice</span><span>([</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>],</span> <span>size</span><span>=</span><span>N</span><span>)</span>
    <span>path</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>(([</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>steps</span><span>)))</span>
    <span>sample_paths</span><span>.</span><span>append</span><span>(</span><span>path</span><span>)</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>sample_paths</span><span>)</span>  <span># shape: (num_sample_paths, N+1)
</span>
<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>t_step</span> <span>in</span> <span>range</span><span>(</span><span>N</span> <span>+</span> <span>1</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span># Plot the PMFs for all time slices from 0 to the current step
</span>    <span>for</span> <span>t</span> <span>in</span> <span>range</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>):</span>
        <span># For a random walk starting at 0, possible positions are -t, -t+2, ..., t
</span>        <span>x_values</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>-</span><span>t</span><span>,</span> <span>t</span> <span>+</span> <span>1</span><span>,</span> <span>2</span><span>)</span>
        <span>if</span> <span>t</span> <span>==</span> <span>0</span><span>:</span>
            <span>p_values</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>1.0</span><span>])</span>
        <span>else</span><span>:</span>
            <span># For each x, number of +1 steps is (x+t)/2
</span>            <span>k</span> <span>=</span> <span>(</span><span>x_values</span> <span>+</span> <span>t</span><span>)</span> <span>//</span> <span>2</span>
            <span>p_values</span> <span>=</span> <span>comb</span><span>(</span><span>t</span><span>,</span> <span>k</span><span>)</span> <span>*</span> <span>(</span><span>0.5</span> <span>**</span> <span>t</span><span>)</span>
        
        <span># Plot the discrete PMF as blue markers and lines
</span>        <span>ax</span><span>.</span><span>scatter</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>s</span><span>=</span><span>50</span><span>)</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.5</span><span>)</span>
        
        <span># For the current time slice, overlay the normal approximation in red
</span>        <span>if</span> <span>t</span> <span>==</span> <span>t_step</span> <span>and</span> <span>t</span> <span>&gt;</span> <span>0</span><span>:</span>
            <span>x_cont</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>t</span><span>,</span> <span>t</span><span>,</span> <span>200</span><span>)</span>
            <span>normal_pdf</span> <span>=</span> <span>norm</span><span>.</span><span>pdf</span><span>(</span><span>x_cont</span><span>,</span> <span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>t</span><span>))</span>
            <span>ax</span><span>.</span><span>plot</span><span>(</span><span>x_cont</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_cont</span><span>),</span> <span>normal_pdf</span><span>,</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>linewidth</span><span>=</span><span>2</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>Normal Approx.</span><span>'</span><span>)</span>
    
    <span># Overlay the sample random walk paths (projected along the z=0 plane)
</span>    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>t_step</span> <span>+</span> <span>1</span><span>],</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span>
                <span>'</span><span>g-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>5</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>Sample Path</span><span>'</span> <span>if</span> <span>t_step</span> <span>==</span> <span>0</span> <span>else</span> <span>""</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (x)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time (steps)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Discrete Binomial Random Walk at Step </span><span>{</span><span>t_step</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlim</span><span>(</span><span>0</span><span>,</span> <span>1.0</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/discrete_binomial_</span><span>{</span><span>t_step</span><span>:</span><span>02</span><span>d</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Compute per-frame durations: 0.25 sec for all frames except the last one (2 sec)
</span><span>durations</span> <span>=</span> <span>[</span><span>0.25</span><span>]</span> <span>*</span> <span>(</span><span>len</span><span>(</span><span>frames</span><span>)</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>[</span><span>2.0</span><span>]</span>

<span># Write the GIF with variable durations and infinite looping
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>discrete_binomial_normalizing.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>durations</span><span>,</span> <span>loop</span><span>=</span><span>0</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="c2-3d-animation-of-brownian-motion"><span>C2. 3D Animation of Brownian Motion</span><a href="#c2-3d-animation-of-brownian-motion"><i></i></a></h3><p>Normal distribution sweeping and evolving across time according Brownian motion</p><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>mpl_toolkits.mplot3d</span> <span>import</span> <span>Axes3D</span>  <span># for 3D plotting
</span><span>from</span> <span>scipy.stats</span> <span>import</span> <span>norm</span>
<span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># using modern API
</span><span>import</span> <span>os</span>

<span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span># Parameters for continuous Brownian motion
</span><span>num_frames</span> <span>=</span> <span>100</span>  <span># more frames for smoother animation
</span><span>t_values</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.1</span><span>,</span> <span>5</span><span>,</span> <span>num_frames</span><span>)</span>
<span>x</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>,</span> <span>200</span><span>)</span>  <span># increased resolution
</span>
<span>num_sample_paths</span> <span>=</span> <span>5</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)))</span>
<span>dt_cont</span> <span>=</span> <span>t_values</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t_values</span><span>[</span><span>0</span><span>]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt_cont</span><span>),</span> <span>size</span><span>=</span><span>len</span><span>(</span><span>t_values</span><span>)</span><span>-</span><span>1</span><span>)</span>
    <span>sample_paths</span><span>[</span><span>i</span><span>,</span> <span>1</span><span>:]</span> <span>=</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>t_values</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span>mask</span> <span>=</span> <span>t_values</span> <span>&lt;=</span> <span>t</span>
    <span>T_sub</span><span>,</span> <span>X_sub</span> <span>=</span> <span>np</span><span>.</span><span>meshgrid</span><span>(</span><span>t_values</span><span>[</span><span>mask</span><span>],</span> <span>x</span><span>)</span>
    <span>P_sub</span> <span>=</span> <span>(</span><span>1</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>T_sub</span><span>))</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span><span>X_sub</span><span>**</span><span>2</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>T_sub</span><span>))</span>
    <span>ax</span><span>.</span><span>plot_surface</span><span>(</span><span>X_sub</span><span>,</span> <span>T_sub</span><span>,</span> <span>P_sub</span><span>,</span> <span>cmap</span><span>=</span><span>'</span><span>viridis</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.7</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>none</span><span>'</span><span>)</span>
    
    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>t_values</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>i</span><span>+</span><span>1</span><span>),</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>marker</span><span>=</span><span>'</span><span>o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (x)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time (t)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Density</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Continuous Brownian Motion at t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/continuous_3d_smooth_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>continuous_brownian_3d_smooth.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="c3-3d-animation-of-geometric-brownian-motion"><span>C3. 3D Animation of Geometric Brownian Motion</span><a href="#c3-3d-animation-of-geometric-brownian-motion"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>mpl_toolkits.mplot3d</span> <span>import</span> <span>Axes3D</span>  <span># for 3D plotting
</span><span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># modern API
</span><span>import</span> <span>os</span>

<span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span># Parameters for geometric Brownian motion (GBM)
</span><span>S0</span> <span>=</span> <span>1.0</span>    <span># initial stock price
</span><span>mu</span> <span>=</span> <span>0.2</span>    <span># drift rate (increased for noticeable drift)
</span><span>sigma</span> <span>=</span> <span>0.2</span> <span># volatility
</span>
<span>num_frames</span> <span>=</span> <span>100</span>
<span>t_values</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.1</span><span>,</span> <span>5</span><span>,</span> <span>num_frames</span><span>)</span>  <span># avoid t=0 to prevent singularity in density
</span><span>S_range</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.01</span><span>,</span> <span>5</span><span>,</span> <span>200</span><span>)</span>         <span># price range
</span>
<span># Simulate GBM sample paths
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)))</span>
<span>dt</span> <span>=</span> <span>t_values</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t_values</span><span>[</span><span>0</span><span>]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>),</span> <span>size</span><span>=</span><span>len</span><span>(</span><span>t_values</span><span>)</span><span>-</span><span>1</span><span>)</span>
    <span>W</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>(([</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>)))</span>
    <span>sample_paths</span><span>[</span><span>i</span><span>]</span> <span>=</span> <span>S0</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>((</span><span>mu</span> <span>-</span> <span>0.5</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span><span>)</span> <span>*</span> <span>t_values</span> <span>+</span> <span>sigma</span> <span>*</span> <span>W</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>t_values</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span>mask</span> <span>=</span> <span>t_values</span> <span>&lt;=</span> <span>t</span>
    <span>T_sub</span><span>,</span> <span>S_sub</span> <span>=</span> <span>np</span><span>.</span><span>meshgrid</span><span>(</span><span>t_values</span><span>[</span><span>mask</span><span>],</span> <span>S_range</span><span>)</span>
    <span>P_sub</span> <span>=</span> <span>(</span><span>1</span> <span>/</span> <span>(</span><span>S_sub</span> <span>*</span> <span>sigma</span> <span>*</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>T_sub</span><span>)))</span> <span>*</span> \
            <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span> <span>(</span><span>np</span><span>.</span><span>log</span><span>(</span><span>S_sub</span> <span>/</span> <span>S0</span><span>)</span> <span>-</span> <span>(</span><span>mu</span> <span>-</span> <span>0.5</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span><span>)</span> <span>*</span> <span>T_sub</span><span>)</span><span>**</span><span>2</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span> <span>*</span> <span>T_sub</span><span>))</span>
    <span>ax</span><span>.</span><span>plot_surface</span><span>(</span><span>S_sub</span><span>,</span> <span>T_sub</span><span>,</span> <span>P_sub</span><span>,</span> <span>cmap</span><span>=</span><span>'</span><span>viridis</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.7</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>none</span><span>'</span><span>)</span>
    
    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>t_values</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>i</span><span>+</span><span>1</span><span>),</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>marker</span><span>=</span><span>'</span><span>o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Stock Price S</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time t</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Density</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Geometric Brownian Motion at t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/geometric_brownian_drifted_3d_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>geometric_brownian_drifted_3d.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="c4-python-code-for-normal-distribution-approximation-by-random-walks"><span>C4. Python Code for Normal Distribution Approximation by Random Walks</span><a href="#c4-python-code-for-normal-distribution-approximation-by-random-walks"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>scipy.stats</span> <span>import</span> <span>norm</span>
<span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># modern ImageIO v3 API
</span><span>import</span> <span>os</span>
<span>from</span> <span>scipy.special</span> <span>import</span> <span>comb</span>

<span># Create a directory for frames
</span><span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span># 1. Continuous Brownian Motion with Sample Paths
</span>
<span># Define time values and x range for density
</span><span>t_values</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.1</span><span>,</span> <span>5</span><span>,</span> <span>50</span><span>)</span>  <span># Times from 0.1 to 5
</span><span>x</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>,</span> <span>100</span><span>)</span>          <span># Range of x values
</span>
<span># Simulate a few sample Brownian motion paths
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>
<span>dt_cont</span> <span>=</span> <span>t_values</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t_values</span><span>[</span><span>0</span><span>]</span>  <span># constant time step (~0.1)
</span><span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)))</span>
<span>sample_paths</span><span>[:,</span> <span>0</span><span>]</span> <span>=</span> <span>0</span>
<span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt_cont</span><span>),</span> <span>size</span><span>=</span><span>(</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)</span><span>-</span><span>1</span><span>))</span>
<span>sample_paths</span><span>[:,</span> <span>1</span><span>:]</span> <span>=</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>,</span> <span>axis</span><span>=</span><span>1</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>t_values</span><span>):</span>
    <span>p</span> <span>=</span> <span>(</span><span>1</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>t</span><span>))</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span><span>x</span><span>**</span><span>2</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>t</span><span>))</span>
    
    <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>12</span><span>,</span> <span>4</span><span>))</span>
    <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span>
    <span>plt</span><span>.</span><span>plot</span><span>(</span><span>x</span><span>,</span> <span>p</span><span>,</span> <span>'</span><span>b-</span><span>'</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>'</span><span>t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Brownian Motion Distribution</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>x</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Density p(x,t)</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylim</span><span>(</span><span>0</span><span>,</span> <span>0.8</span><span>)</span>
    <span>plt</span><span>.</span><span>legend</span><span>()</span>
    <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
    
    <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>2</span><span>)</span>
    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>plt</span><span>.</span><span>plot</span><span>(</span><span>t_values</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>sp</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>'</span><span>-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
    <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Sample Brownian Paths</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Time</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Position</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlim</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>)</span>
    <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/continuous_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>tight_layout</span><span>()</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Save the continuous Brownian motion GIF
# (duration in seconds per frame; adjust as desired)
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>continuous_brownian.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>)</span>

<span># 2. Discrete Random Walk with Sample Paths
</span>
<span>def</span> <span>simulate_random_walk</span><span>(</span><span>dt</span><span>,</span> <span>T</span><span>,</span> <span>num_paths</span><span>):</span>
    <span>"""</span><span>Simulate random walk paths with step size sqrt(dt).</span><span>"""</span>
    <span>n_steps</span> <span>=</span> <span>int</span><span>(</span><span>T</span> <span>/</span> <span>dt</span><span>)</span>
    <span>positions</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_paths</span><span>,</span> <span>n_steps</span> <span>+</span> <span>1</span><span>))</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_paths</span><span>):</span>
        <span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>choice</span><span>([</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>],</span> <span>size</span><span>=</span><span>n_steps</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>)</span>
        <span>positions</span><span>[</span><span>i</span><span>,</span> <span>1</span><span>:]</span> <span>=</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>)</span>
    <span>return</span> <span>positions</span>

<span>dt</span> <span>=</span> <span>0.01</span>  <span># Step size
</span><span>T</span> <span>=</span> <span>5.0</span>    <span># Total time
</span><span>num_paths</span> <span>=</span> <span>10000</span>  <span># For histogram
</span><span>times</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>0</span><span>,</span> <span>T</span> <span>+</span> <span>dt</span><span>,</span> <span>dt</span><span>)</span>
<span>positions</span> <span>=</span> <span>simulate_random_walk</span><span>(</span><span>dt</span><span>,</span> <span>T</span><span>,</span> <span>num_paths</span><span>)</span>
<span>sample_indices</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>5</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>times</span><span>):</span>
    <span>if</span> <span>i</span> <span>%</span> <span>10</span> <span>==</span> <span>0</span><span>:</span>  <span># Use every 10th frame for the GIF
</span>        <span>current_positions</span> <span>=</span> <span>positions</span><span>[:,</span> <span>i</span><span>]</span>
        <span>x_vals</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>,</span> <span>100</span><span>)</span>
        <span>p_theoretical</span> <span>=</span> <span>norm</span><span>.</span><span>pdf</span><span>(</span><span>x_vals</span><span>,</span> <span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>t</span><span>)</span> <span>if</span> <span>t</span> <span>&gt;</span> <span>0</span> <span>else</span> <span>1e-5</span><span>)</span>
        
        <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>12</span><span>,</span> <span>4</span><span>))</span>
        <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span>
        <span>plt</span><span>.</span><span>hist</span><span>(</span><span>current_positions</span><span>,</span> <span>bins</span><span>=</span><span>50</span><span>,</span> <span>density</span><span>=</span><span>True</span><span>,</span> <span>alpha</span><span>=</span><span>0.6</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>'</span><span>t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>plot</span><span>(</span><span>x_vals</span><span>,</span> <span>p_theoretical</span><span>,</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>N(0,t)</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Discrete Random Walk Distribution</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Position</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Density</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>ylim</span><span>(</span><span>0</span><span>,</span> <span>0.8</span><span>)</span>
        <span>plt</span><span>.</span><span>legend</span><span>()</span>
        <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
        
        <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>2</span><span>)</span>
        <span>for</span> <span>idx</span> <span>in</span> <span>sample_indices</span><span>:</span>
            <span>plt</span><span>.</span><span>plot</span><span>(</span><span>times</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>positions</span><span>[</span><span>idx</span><span>,</span> <span>:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>'</span><span>-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
        <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Sample Random Walk Paths</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Time</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Position</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>xlim</span><span>(</span><span>0</span><span>,</span> <span>T</span><span>)</span>
        <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
        
        <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/discrete_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
        <span>plt</span><span>.</span><span>tight_layout</span><span>()</span>
        <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
        <span>plt</span><span>.</span><span>close</span><span>()</span>
        <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Save the discrete random walk GIF with infinite looping
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>discrete_random_walk.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>,</span> <span>loop</span><span>=</span><span>0</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Impossible-to-Hack' Security Turns Out to Be No Security at All (129 pts)]]></title>
            <link>https://jltee.substack.com/p/new-zealand-companys-impossible-to-hack-security</link>
            <guid>43159544</guid>
            <pubDate>Mon, 24 Feb 2025 13:51:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jltee.substack.com/p/new-zealand-companys-impossible-to-hack-security">https://jltee.substack.com/p/new-zealand-companys-impossible-to-hack-security</a>, See on <a href="https://news.ycombinator.com/item?id=43159544">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><p>“Beautifully Designed, Easy to Use</p><p><span>Comprehensive Software Solution for implementation &amp; maintenance of ISO Standards and other Compliance Requirements such as H&amp;S, Quality, Environmental, Food Safety, Information Security and many more.” according to their </span><a href="https://teammateapp.com/" rel="nofollow ugc noopener">website</a><span>.</span></p></div><p><span>For those curious about what the company offers, you can check </span><a href="https://teammateapp.com/features" rel="nofollow ugc noopener">https://teammateapp.com/features</a><span>, a special mention to the feature below:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png" width="342" height="101" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:101,&quot;width&quot;:342,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:32298,&quot;alt&quot;:&quot;One of the features offered by Teammate App listed on their website that reads: Risk Management, Manage your safety data from a single, secure, and accessible system.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png&quot;,&quot;isProcessing&quot;:false}" alt="One of the features offered by Teammate App listed on their website that reads: Risk Management, Manage your safety data from a single, secure, and accessible system." title="One of the features offered by Teammate App listed on their website that reads: Risk Management, Manage your safety data from a single, secure, and accessible system." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Teammate App offer for Risk Management that includes data being secure.</figcaption></figure></div><p><span>Another good page to understand the claimed security of Teammate App can be read here: </span><a href="https://teammateapp.com/security-policy" rel="nofollow ugc noopener">https://teammateapp.com/security-policy</a></p><p>On February 11th 2025 I was looking at some servers running exposed databases publicly and noticed a server with almost 200 tables exposed that contained some interesting names.</p><p><span>After a quick look I wasn’t exactly sure who was responsible for the server I was looking at and I was busy with other things so I flagged it to check later and a couple days later I took a better look and through DNS records and data on the exposed tables I confirmed it belonged to </span><a href="https://teammateapp.com/" rel="nofollow ugc noopener">https://teammateapp.com</a><span> and it was one of their live databases.</span></p><p>I checked my logs to see when was the first time I had this flagged as exposed and the first result was from December 3rd 2024.</p><p><span>On February 15th I sent an email to multiple emails from the CEO that were exposed on the database, his personal Gmail and a company email for </span><a href="https://kaizenconsulting.co.nz/" rel="nofollow ugc noopener">https://kaizenconsulting.co.nz</a><span> which according to public records he also owns and had a lot of data exposed here. I also added a couple of Teammate App emails listed on their website.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png" width="1053" height="861" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:861,&quot;width&quot;:1053,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:191517,&quot;alt&quot;:&quot;Redacted screenshot of the first email sent to Teammate App alerting them of their security issue, the email mentions among other things mentioned below, some information I saw exposed on the server.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png&quot;,&quot;isProcessing&quot;:false}" alt="Redacted screenshot of the first email sent to Teammate App alerting them of their security issue, the email mentions among other things mentioned below, some information I saw exposed on the server." title="Redacted screenshot of the first email sent to Teammate App alerting them of their security issue, the email mentions among other things mentioned below, some information I saw exposed on the server." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Alert sent to Teammate App on February 15th with information regarding the exposed server.</figcaption></figure></div><p>The first phrase on that email states the following: </p><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre><span>  </span><em>  " First of all, please do not ignore this email, this is not a scam attempt nor am I trying to sell anything, I am just alerting and looking for help closing down a security issue related to https://teammateapp.com/ "</em></pre></div><p>I have been adding this phrase to the start of my emails recently because companies assume my emails are either scam/phishing attempts or I’m some cybersecurity vendor or whatever trying to sell them some service or product and often ignore my alerts because of it.</p><p>The email was read by someone, I assume the CEO, and less than an hour after it was sent, I could not connect to the exposed server anymore. I did not get any reply back so a few days later I sent a follow up email.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png" width="1034" height="724" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:724,&quot;width&quot;:1034,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:136628,&quot;alt&quot;:&quot;Screenshot of the follow up email sent to Teammate App, the contents of the email are explained on the post.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png&quot;,&quot;isProcessing&quot;:false}" alt="Screenshot of the follow up email sent to Teammate App, the contents of the email are explained on the post." title="Screenshot of the follow up email sent to Teammate App, the contents of the email are explained on the post." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Follow up email sent asking about their intent regarding notifications to regulators and their clients.</figcaption></figure></div><p>On this email I asked the usual questions I do on my follow ups such as intent regarding notifications, if the company needed me to delay my publication to give them more time to notify anyone and if they wanted to provide an official comment to add to this publication. </p><p>A couple days later I got a reply that is both highly inappropriate and laughable at the same time.</p><p>Teammate App CEO, Sean Banayan, who has the reading comprehension and IT knowledge of a toddler, decided to reply the following:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png" width="1194" height="997" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:997,&quot;width&quot;:1194,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:241867,&quot;alt&quot;:&quot;Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??&quot;,&quot;title&quot;:&quot;Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??&quot;,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png&quot;,&quot;isProcessing&quot;:false}" alt="Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??" title="Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Response from Teammate APP CEO to my follow up email regarding notifications.</figcaption></figure></div><p>Apparently alerting him about a severe security issue with his App and sending a follow up email to try to avoid publishing anything before the company had time to do their own notifications, if that was their intent, means I’m harassing the company.</p><p>Sean was not interested in anything I was selling either (I don’t sell anything and state exactly that on my first contact) and even threatened to stop me if I didn’t stop with the harassment.</p><p>He was also kind enough to lie and claim “There were few more security layers which would have made any data breach impossible anyway.” and only basic information such as database sizes was exposed.</p><p>The email ended with a “Get it??” and in light of his demand that I allegedly stop harassing him and his obvious cluelessness about the security of his own data, I did not reply to that email. The remainder of this post will demonstrate how wildly inaccurate his claims were.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif" width="480" height="270" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:270,&quot;width&quot;:480,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:5007567,&quot;alt&quot;:&quot;A gif that shows the phrases \&quot;It's impossible\&quot; followed by \&quot;It's possible,\&quot; and then \&quot;but it's impossible to ME!\&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif&quot;,&quot;isProcessing&quot;:false}" alt="A gif that shows the phrases &quot;It's impossible&quot; followed by &quot;It's possible,&quot; and then &quot;but it's impossible to ME!&quot;" title="A gif that shows the phrases &quot;It's impossible&quot; followed by &quot;It's possible,&quot; and then &quot;but it's impossible to ME!&quot;" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The next part might come as a shock, to no one, but companies just tell whatever bullshit serves them best, not only to me but to their clients as well, this is a common occurrence.</p><p>Let’s see what “exposed basic information such as database sizes” really means.</p><p>Top 30 exposed tables in terms of record counts:</p><blockquote><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>   715,090 formfieldhistories
   351,007 auditquestioncomments
   348,542 dailymaillogs
   139,419 formfields
   106,454 employeeskills
   100,915 auditformsectionquestions
     98,843 formsubmissions
     90,901 documenthistories
     90,571 tasks
     81,259 documents
     80,680 auditscores
     50,597 formfieldauditlogs
     48,510 risks
     48,079 activityloggers
     47,409 audits
     36,416 auditformsectionscores
     27,245 hazardous
     25,056 formtemplateauditlogs
     23,766 plants
     23,518 formtemplatehistories
     23,279 employees
     20,179 documentacknowledgements
     20,131 employees_16_1,012024
     17,202 auditformsections
     16,719 reassignownerships
     16,641 suppliers
     16,506 vismatelogtimes
     16,474 users
     15,413 employeeassisgnonlinetrainingforms
     15,126 personnels</pre></div></blockquote><p><span>The full table list and sizes can be seen here: </span><a href="https://pastebin.com/8q7CNYBi" rel="nofollow ugc noopener">https://pastebin.com/8q7CNYBi</a></p><p>The database contained a total of 2,963,124 records of exposed data, using around 3.8GB of storage. </p><p>If what Sean wrote to me was the truth, the post would be about done here. In reality it wouldn’t even exist, why would I waste my time reporting exposed database sizes and table counts?</p><p>So let’s analyze some of the tables exposed and the data in them.</p><p>This was the biggest table in terms of records on the DB and didn’t contain any relevant PII that I was aware, it was the updates made to the fields of the various forms companies have on the app. I saw a few links to actual filed forms on some tables and I could check them with no authentication, but I did not look much into it though.</p><p>This table contained usernames, emails, auth tokens and passwords. Around 9,000 users had bcrypt hashed passwords and around 6,000 had auth tokens set.</p><p>This also contained multiple foreign keys to other tables on the database with more information on the users such as companyId, employeeId, supplierId, etc.</p><p>The top 20 email domains exposed on the user table and their counts:</p><blockquote><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>   651 awanuilabs.co.nz
   542 labtests.co.nz
   527 sclabs.co.nz
   368 wellingtonscl.co.nz
   292 jasmax.com
   246 gmail.com
   137 kaizenconsulting.co.nz
   132 medlabsouth.co.nz
   129 gribbles.co.nz
   126 awanuigroup.co.nz
   114 snell.co.nz
   103 culham.co.nz
   100 nz.rlb.com
     98 wadegroup.co.nz
     74 tigerturf.com
     66 cmp.net.nz
     64 zeagoldnutrition.co.nz
     62 taranakipath.co.nz
     62 norpath.co.nz
     58 teammateapp.com</pre></div></blockquote><p><span>A full count of the email domains can be seen here: </span><a href="https://pastebin.com/6L4hb2wL" rel="nofollow ugc noopener">https://pastebin.com/6L4hb2wL</a></p><p>This contained fields such as first and last name, company and workplace foreign keys, email, phone and mobile, date of birth and a field with additional information such as medical recommendations. There were multiple other tables related to employee data such as “employeesppes” which contained PPE (Personal protective equipment) information, mostly uniform sizes.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png" width="1064" height="663" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:663,&quot;width&quot;:1064,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:218081,&quot;alt&quot;:&quot;Redacted example of the employees table with details on injuries and medical issues for an employee of kawekahealth.nz&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png&quot;,&quot;isProcessing&quot;:false}" alt="Redacted example of the employees table with details on injuries and medical issues for an employee of kawekahealth.nz" title="Redacted example of the employees table with details on injuries and medical issues for an employee of kawekahealth.nz" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Example of an entry on the employees table.</figcaption></figure></div><p>Top 20 email domains on the employees table:</p><blockquote><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>  3281 gmail.com
    642 awanuilabs.co.nz
    616 mediaworks.co.nz
    607 labtests.co.nz
    596 sclabs.co.nz
    454 hotmail.com
    398 wellingtonscl.co.nz
    312 jasmax.com
    298 yahoo.com
    209 morganprojects.co.nz
    206 xtra.co.nz
    174 vnpf.com.vu
    173 culham.co.nz
    151 kawekahealth.nz
    146 medlabsouth.co.nz
    144 awanuigroup.co.nz
    138 tranzit.co.nz
    138 page-macrae.co.nz
    135 gribbles.co.nz
    123 outlook.com</pre></div></blockquote><p><span>A full count of the email domains can be seen here: </span><a href="https://pastebin.com/5vgz1JKq" rel="nofollow ugc noopener">https://pastebin.com/5vgz1JKq</a></p><p>This table if looked at briefly, probably wouldn’t mean much. There are no actual documents exposed on it, it contains partial paths, filenames, notes and information on who the file belongs to etc through multiple foreign keys to other tables.</p><p>Checking the companyId foreign key to check the companies with most records on the table we get the top 10 being:</p><blockquote></blockquote><p>The counts are only for a single ID, if a company had multiple IDs the file count would be higher all put together, I did not look for such cases.</p><p>I was told about multiple security layers who made a data breach impossible, so of course I had to dig through this table until I found a way to test if the files were actually secure and I guess some layers were currently malfunctioning, as expected, I could actually download the files without any authentication. </p><p><span>The download link still redirected me to </span><a href="https://my.teammateapp.com/login" rel="nofollow ugc noopener">https://my.teammateapp.com/login</a><span> but a request still went through for the file if it still exists in storage. From a small sample, around 75% of the files still exist and can still be accessed without any authentication or login.</span></p><p>The links still work as of publishing this, people would still need to know exactly how to get the working link but the company exposed that publicly for 2 months, who knows how many people got access to that information.</p><p>The sample contained files such as: </p><pre><code>email communications(.msg files), incident reports, site induction questionnares, drivers licences, customer complaint reports, job safety analysis sheets, service reports, workplace safety checklists, job hazard analysis, tool box talk reports, field information reports, consumer feedback spreadsheets.</code></pre><figure data-drag-handle="true" data-component-name="ImageGallery"><div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png" sizes="100vw" alt="Examples of the files available for download without authentication. Examples show a drivers licence, a Workplace safety checklist from Kaweka Hospital and a consumer feedback spreadsheet from G&amp;H CardioVascular." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png" sizes="100vw" alt="Examples of the files available for download without authentication. Examples show a drivers licence, a Workplace safety checklist from Kaweka Hospital and a consumer feedback spreadsheet from G&amp;H CardioVascular." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png" sizes="100vw" alt="Examples of the files available for download without authentication. Examples show a drivers licence, a Workplace safety checklist from Kaweka Hospital and a consumer feedback spreadsheet from G&amp;H CardioVascular." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 474w" width="474"></picture></div><figcaption>Examples of exposed files from companies such as Kaweka Hospital and G&amp;H CardioVascular.</figcaption></div></figure><p>There were multiple more file types but I have no interest in downloading around 60,000 files just to prove a point. </p><p>The server IP was scanned by multiple websites that scan for open ports, I noticed it on at least 2 different websites. </p><p>Was anyone looking at the logs to see random IPs connecting and querying for “basic information” for over 2 months? What else were people doing that this supposed security layers missed? I’m sure the company has an answer for that.</p><p>There is likely more data exposed here, this post only reveals a small sample of what was exposed but I can’t dedicate all my free time to analyze it and I’m not interested in doing an in depth security audit on the exposed data to a company who told me not to harass them. </p><p>This post serves to refute the claims of ‘Impossible to hack security’ made by Sean and if you’re a client or employee that uses the App, you might be wondering what else was exposed here. I would tell you to contact Sean or the company for clarification, but be wary you might be “harassing” them if you ask any questions.</p><p>I bet it felt really good and mighty sending that email shitting on me as if I’m some random idiot begging people to buy something, but some advice for you, next time maybe use google to look up what ProtonMail is before claiming you’re gonna report me to my “boss” Proton, but thanks for the laughs on that one. </p><p><span>Also maybe read what I wrote on my email where I mention I’m not selling anything to you, in fact I alerted you of some gross incompetence, free of charge and likely avoided your data from being wiped by some russian running an automated script that wipes everything it connects to, </span><a href="https://infosec.exchange/@JayeLTee/113075636340119294" rel="nofollow ugc noopener">I’ve seen it happen live before on the same service this data was exposed</a><span>. </span></p><p>You might read this post and think that now you are for sure reporting me to my “boss” but you’ll be disappointed to know that I do not work for anyone, so you can’t go and harass my “boss” with stupid claims.</p><p>Those database sizes sure did contain a lot more than just the size, oops.</p><p>And one last thing Sean:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif" width="498" height="272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:272,&quot;width&quot;:498,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2934205,&quot;alt&quot;:&quot;Gif with the phrase \&quot;Did you get it?\&quot; circling around Jonah Hill.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif&quot;,&quot;isProcessing&quot;:false}" alt="Gif with the phrase &quot;Did you get it?&quot; circling around Jonah Hill." title="Gif with the phrase &quot;Did you get it?&quot; circling around Jonah Hill." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>
If you’re interested in more incidents I dealt with, you can check all my public finds indexed by country on the post below:</pre></div><div data-component-name="DigestPostEmbed"><a href="https://jltee.substack.com/p/the-hub-of-stupi-misconfigs-index" target="_blank" rel="noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d7927a-beaa-40c0-b996-b78818ab0401_1080x1080.jpeg"><img src="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d7927a-beaa-40c0-b996-b78818ab0401_1080x1080.jpeg" sizes="100vw" alt="The Hub of Stupi... *misconfigs Index" width="140" height="140"></picture></div></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I built an app to stop me doomscrolling by touching grass (565 pts)]]></title>
            <link>https://touchgrass.now/</link>
            <guid>43158660</guid>
            <pubDate>Mon, 24 Feb 2025 12:15:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://touchgrass.now/">https://touchgrass.now/</a>, See on <a href="https://news.ycombinator.com/item?id=43158660">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I scrape Steam data every month and it's yours to download for free (117 pts)]]></title>
            <link>https://www.gginsights.io</link>
            <guid>43158425</guid>
            <pubDate>Mon, 24 Feb 2025 11:43:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gginsights.io">https://www.gginsights.io</a>, See on <a href="https://news.ycombinator.com/item?id=43158425">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="image" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" src="https://www.gginsights.io/logo.svg"></p><h3>Save over 120 hours of scraping</h3><p>Every month we scrape Steam data for you. So don't worry about having to create scripts, massage the data and wait for the results. We will do it for you. Rather, jump right into analyzing the data.</p></div><div><p><img alt="image" loading="lazy" width="60" height="50" decoding="async" data-nimg="1" src="https://www.gginsights.io/images/experiences/img1.png"></p><p><strong>Leverage the power of AI</strong> to help answer your questions about the Steam market and become a data expert, transforming data into actionable insights.</p></div><div><p><img alt="image" loading="lazy" width="60" height="50" decoding="async" data-nimg="1" src="https://www.gginsights.io/images/experiences/img2.png"></p><p>Need numbers to add to a pitch deck? Help your <strong>potential publisher understand the value</strong>. It will also help you speak with confidence knowing you have the data to back you up.</p></div><div><p><img alt="image" loading="lazy" width="60" height="50" decoding="async" data-nimg="1" src="https://www.gginsights.io/images/experiences/img3.png"></p><p><strong>Be strategic</strong>. Don't regret not analyzing the market holistically before you start working on your game. Stop wasting time on assumptions, rather, take into account the competition, the market size, the value of each tag, etc.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is Ketamine Neurotoxic? (152 pts)]]></title>
            <link>https://desmolysium.com/ketamineneurotoxic/</link>
            <guid>43158292</guid>
            <pubDate>Mon, 24 Feb 2025 11:26:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://desmolysium.com/ketamineneurotoxic/">https://desmolysium.com/ketamineneurotoxic/</a>, See on <a href="https://news.ycombinator.com/item?id=43158292">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-id="1109504" data-element_type="widget" data-widget_type="theme-post-content.default">
					
<p>There are dozens of animal studies that show unequivocally that ketamine is neurotoxic. There is a common myth that ketamine is “neurogenetic”. This is mostly false. It increases neuroplasticity temporarily (days to weeks), which though is very different from neurogenesis (the birth of new neurons) – discussed in more detail in the next section.</p>



<p>At recreational doses, ketamine is addictive, destroys the bladder, and is toxic to the central nervous system. Microscopic lesions (including but not limited to so-called “Olney’s lesions”) in both grey and white matter are evident already after three months of high-dose ketamine use.</p>



<p>By year three of heavy use, MRI scans of ketamine users often reveal a brain that looks like a mix between multiple sclerosis (white matter lesions) and Alzheimer’s disease (grey matter atrophy).</p>



<figure><img fetchpriority="high" decoding="async" width="656" height="440" src="https://desmolysium.com/wp-content/uploads/2023/07/image-492.png" alt="" srcset="https://desmolysium.com/wp-content/uploads/2023/07/image-492.png 656w, https://desmolysium.com/wp-content/uploads/2023/07/image-492-300x201.png 300w" sizes="(max-width: 656px) 100vw, 656px"></figure>



<figure><img decoding="async" width="1024" height="246" src="https://desmolysium.com/wp-content/uploads/2023/10/keta-1024x246.jpg" alt="" srcset="https://desmolysium.com/wp-content/uploads/2023/10/keta-1024x246.jpg 1024w, https://desmolysium.com/wp-content/uploads/2023/10/keta-300x72.jpg 300w, https://desmolysium.com/wp-content/uploads/2023/10/keta-768x185.jpg 768w, https://desmolysium.com/wp-content/uploads/2023/10/keta-1536x370.jpg 1536w, https://desmolysium.com/wp-content/uploads/2023/10/keta.jpg 2020w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p>Ketamine <em>abuse</em> is well known to cause widespread cognitive and neurological impairment. However, the average ketamine “user” consumes 500-1000mg of ketamine per day, which is a lot more than therapeutic use (0.5mg/kg). One glass of wine per week is surely different from a gallon of vodka per day.</p>



<p>Nonetheless, it’s widely recognized that individuals who occasionally use ketamine find they need significantly higher doses than when they first started, even after prolonged periods of abstinence.</p>



<p>For instance, after a few months of using therapeutic doses of ketamine (around 0.5mg/kg per week), I noticed that its impact was much less pronounced compared to my initial experiences with the substance. Even extended breaks did not bring back my virgin response – <a href="https://desmolysium.com/recreational/#mdma" data-type="post" target="_blank" rel="noreferrer noopener">in an analogous way that MDMA users never recapture the magic of their first few trips</a>.</p>



<p>This form of “permatolerance” may point to neurotoxicity – in the same (but mechanistically different) way it does with MDMA.</p>



<p>Researchers are still unsure whether it is safe to use ketamine at low therapeutic doses at reasonable frequencies for a couple of weeks to a couple of months. However, in the case of otherwise untreatable depression, the risks and side effects need to be weighed against the risks and side effects of ongoing depression. Furthermore, depression itself is quite damaging to brain health itself.</p>



<p>I looked into this matter quite extensively myself and I also talked to a handful of university psychiatrists who have been using ketamine on their patients for years – long before Spravato was available. Every single one of them believes that ketamine is quite neurotoxic but in contrast to otherwise untreatable depression the lesser evil.</p>



<p>There is one study that looked at ketamine administration long-term and did not find evidence of neurocognitive decline. However, they were using clinical tests, which are not very sensitive and to reach statistical significance quite a bit of degeneration has had to happen. Furthermore, these were depressive subjects and if you treat depression, neurocognition usually increases. So, if ketamine really treated their depression (which it reportedly did), should there not be an <em>increase </em>in cognition between baseline and timepoint X? Possibly, neurocognitive domains did improve but the gains were erased by gradual neurotoxicity.</p>



<p>I discuss ketamine, and my personal experience with it, in more detail <a data-type="post" data-id="3364" href="https://desmolysium.com/ketamine/" target="_blank" rel="noreferrer noopener"><strong>here</strong></a>.</p>



<div><p><strong><em>Subscribe to the Desmolysium newsletter and get access to three exclusive articles!</em></strong></p></div>



<h2>But isn’t ketamine neurogenetic?!</h2>



<p>No, it is not. It increases <em>neuroplasticity</em>, which, for practical purposes is limited to the generation of dendritic spines (spinogenesis) and synapses (synaptogenesis). Spinogenesis and synaptogenesis are very different from <em>neurogenesis</em> (the birth of new neurons). Neurogenesis is limited to two sites in the human brain and a local creation of neurons in these sites cannot make up for the death of functionally integrated and possibly extensively connected neurons elsewhere.</p>



<p>Synaptogenesis and spinogenesis are short-lived (weeks) but dead neurons will never undie.</p>



<p>Given that Spravato (esketamine nasal spray) has been widely available and so-called “ketamine-clinics” proliferated, we are possibly going to have an answer to the question regarding whether and the extent of ketamine neurotoxicity soon. In the meantime, it is probably prudent to err on the side of caution.</p>



<p>My gut feeling is that people who are doing ketamine at even therapeutic doses regularly are more likely than not to give themselves non-negligible amounts of irreversible brain damage.</p>



<p>Unfortunately, ketamine has become a frequent drug of abuse at doses far higher than therapeutic doses. Similar to MDMA (although by a completely different mechanism), the neurotoxicity caused by high doses is irreversible. It is also quite worrying to see ketamine clinics mushrooming everywhere, with some patients reportedly going in twice per week and being given infusions of 100mg or more. As so often, hype and industry are about to destroy something that was originally quite useful in select cases.</p>



<p>For a related article: <a href="https://desmolysium.com/neurotoxicityofamphetamine/" target="_blank" rel="noreferrer noopener">“Adderall/Vyvanse Changed My Life”…But Will It Wreck Your Brain?</a></p>



<h4>Sources &amp; further info</h4>



<ul>
<li><strong>Scientific article:</strong> <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8461018/">Ketamine: Neuroprotective or Neurotoxic?</a></li>



<li><strong>Scientific study:</strong> <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3713393/">Brain damages in ketamine addicts as revealed by magnetic resonance imaging</a></li>



<li><strong><span>Scientific article:</span></strong><a href="https://www.tandfonline.com/doi/abs/10.1080/14740338.2022.2071867?journalCode=ieds20"> A review of potential neuropathological changes associated with ketamine</a></li>
</ul>







<h4><strong>Disclaimer</strong></h4>



<p><em>The content available on this website is based on the author’s individual research, opinions, and personal experiences. It is intended solely for informational and entertainment purposes and does not constitute medical advice. The author does not endorse the use of supplements, pharmaceutical drugs, or hormones without the direct oversight of a qualified physician. People should never disregard professional medical advice or delay in seeking it because of something they have read on the internet.</em></p>



<p><strong><em>The above is only a fraction of the article. This article is currently undergoing final revisions and is expected to be published within the next few weeks to months. To receive a notification upon its release, sign up for my newsletter.</em></strong></p>



<div><p><strong><em>Subscribe to the Desmolysium newsletter and get access to three exclusive articles!</em></strong></p></div>




				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Says It Will Add 20k Jobs, Spend $500B, Produce AI Servers in US (169 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us</link>
            <guid>43158168</guid>
            <pubDate>Mon, 24 Feb 2025 11:05:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us">https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us</a>, See on <a href="https://news.ycombinator.com/item?id=43158168">Hacker News</a></p>
Couldn't get https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[What's New in Emacs 30.1? (118 pts)]]></title>
            <link>https://www.masteringemacs.org/article/whats-new-in-emacs-301</link>
            <guid>43158164</guid>
            <pubDate>Mon, 24 Feb 2025 11:05:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.masteringemacs.org/article/whats-new-in-emacs-301">https://www.masteringemacs.org/article/whats-new-in-emacs-301</a>, See on <a href="https://news.ycombinator.com/item?id=43158164">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="primary-article">
<p>Emacs 30.1 is upon us, and it’s time for another bumper release full of new features and improvements.</p>
<p>As always, I have taken the time to go through most of the changes in Emacs 30.1 and annotated them to give perspective and clarity.</p>
<p>Here is but a few of the highlights in 30.1:</p>
<ul>
<li><p><code>completion-preview-mode</code> is a tantalizing replacement for company mode and corfu as it uses a buffer and window system (not unlike the <code>*Completions*</code> window when you minibuffer complete with <code>TAB</code>), and with an <em>excellent</em> user experience. It even has the same schnazzy predictive typing that the old auto complete package did!</p>
<p>You also get to leverage the full force of Emacs’s expansive set of minibuffer completion styles, orders and more.</p>
<p>This is my favorite feature in Emacs 30.1. The user experience is superb; someone really cared for this, and it shows.</p></li>
<li><p>The Org URI protocol should now register automatically, meaning you can send data from a browser bookmarklet straight into org capture in your running Emacs instance.</p>
<p>The org protocol feature’s not new to Emacs 30.1, but automatically configuring your Emacs on Linux so it works properly <em>is</em>.</p></li>
<li><p>Which-key is now built in, which is good news for people who prefer that method of help (as opposed to typing <code>C-h</code> in a key chord).</p></li>
<li><p><code>libjansson</code> is dead; long live Emacs’s builtin JSON parser. The new parser is much faster.</p></li>
<li><p>The tree-sitter-specific <code>*-sexp</code> commands (such as <code>forward-sexp</code>) now work well.</p></li>
<li><p>Native compilation is on by default, provided your system has the required dependencies. A massive vote of confidence for a great feature.</p></li>
<li><p>Full support for Emacs on Android, and a whole host of touch screen-related improvements to Emacs as a result.</p></li>
<li><p>You can now request a diff of your multi-file replace regexp (see <code>C-h a replace diff</code>)</p></li>
<li><p>More Tramp (Emacs’s remote file editing system) connections, including support for Kubernetes pods.</p></li>
</ul>
<p>I will, as per usual, begin to update <a href="https://www.masteringemacs.org/book">my book, Mastering Emacs</a>, so it includes these latest changes.</p>
<p>Until then, and for the next couple of days, you can enjoy a 30% discount on my book. Enjoy!</p>
<h2 id="installation-changes-in-emacs-30.1">Installation Changes in Emacs 30.1</h2>
<pre><code>Native compilation is now enabled by default.
'configure' will enable the Emacs Lisp native compiler, so long as
libgccjit is present and functional on the system.  To disable native
compilation, configure Emacs with the option:

    ./configure --with-native-compilation=no</code></pre>
<p>That is good news. I’m hoping by declaring that native compilation, a must-have feature that <a href="https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation">compiles elisp into native code</a> and greatly speeds up your Emacs, it encourage more distros to adopt the setting, if they have not already. If you’re the type to compile your own Emacs, you may want to read me article as it does require a few mandatory components that most Linux distributions do not ship with.</p>
<pre><code>Emacs has been ported to the Android operating system.
This requires Emacs to be compiled on another computer.  The Android
NDK, SDK, and a suitable Java compiler must also be installed.

See the file "java/INSTALL" for more details.</code></pre>
<p>I’ve been following this development for quite a while, and it’s wonderful to see that you can run a full-blown Emacs instance on Android <em>and</em> with the support of the Emacs developers behind it. How exciting. I’ll have to find the time to play around with it.</p>
<pre><code>Native JSON support is now always available; libjansson is no longer used.
No external library is required.  The '--with-json' configure option has
been removed.  'json-available-p' now always returns non-nil and is only
kept for compatibility.</code></pre>
<p>JSON is a massive bottleneck when you’re using LSP servers, as LSPs are chatty and JSON is how they communicate. I wrote about the introduction of <a href="https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation">libjansson</a> when it was first introduced as it made a noticeable difference in performance back when it made an optional dependency in Emacs. It turns out that libjansson is not that quick. One day, a new contributor, Géza Herman, showed up with a JSON parser that was not only faster than libjansson, but more complete in its implementation.</p>
<p>As a result libjansson is not only deprecated but removed entirely. Excellent!</p>
<pre><code>Emacs now defaults to the ossaudio library for sound on NetBSD and OpenBSD.
Previously, configure used ALSA libraries if installed on the system
when configured '--with-sound=yes' (which is the default), with fallback
to libossaudio.  The libossaudio library included with the base system
is now used even if ALSA is found to avoid relying on external packages
and to resolve potential incompatibilities between GNU/Linux and *BSD
versions of ALSA.  Use '--with-sound=alsa' to build with ALSA on these
operating systems instead.</code></pre>
<pre><code>New configuration option '--disable-gc-mark-trace'.
This disables the GC mark trace buffer for about 5% better garbage
collection performance.  Doing so may make it more difficult for Emacs
developers to help finding GC-related bugs that you run into, which is
why the mark trace buffer is enabled by default.</code></pre>
<p>If you’re the type of person to compile your own Emacs, you might as well give this one a whirl. GC bugs do happen, but I’d say they’re rare enough that you can turn it off and claim your 5% speed-up voucher.</p>
<h2 id="startup-changes-in-emacs-30.1">Startup Changes in Emacs 30.1</h2>
<pre><code>On GNU/Linux, Emacs is now the default application for 'org-protocol'.
Org mode provides a way to quickly capture bookmarks, notes, and links
using 'emacsclient':

    emacsclient "org-protocol://store-link?url=URL&amp;title=TITLE"

Previously, users had to manually configure their GNU/Linux desktop
environment to open 'org-protocol' links in Emacs.  These links should
now open in Emacs automatically, as the "emacsclient.desktop" file now
arranges for Emacs to be the default application for the 'org-protocol'
URI scheme.  See the Org mode manual, Info node "(org) Protocols" for
more details.</code></pre>
<p>OK, no lie, this is a really cool feature that just got easier to use.</p>
<p>Org can register (on Windows, Linux, etc.) itself as a URI protocol controller. When you open a <code>https</code> hyperlink, your OS knows it has to use your preferred browser; ditto for e-mail. Here it’s called <code>org-protocol</code>, and with this new change (or the slightly more manual steps outlined <a href="https://orgmode.org/worg/org-contrib/org-protocol.html">in the org mode manual</a>) you can request that <code>org-protocol://....</code> contents are sent to your Emacs for processing.</p>
<p>That means you can send information to Org from other tools — such as the commandline or, more tantalizingly, from your web browser or even e-mails, provided your e-mail client follows hyperlinks and supports custom protocols.</p>
<p>Provided you’ve done the installation steps (I recommend you check out the <a href="https://orgmode.org/worg/org-contrib/org-protocol.html">the link</a> if the example below does not work) you can use a snippet like this in a Bookmarklet in your browser – or straight into the console for testing:</p>
<pre><code>javascript:location.href = 'org-protocol://capture?' +
    new URLSearchParams({
          template: "m",
          url: location.href,
          title: document.title,
          body: window.getSelection()})</code></pre>
<p>Replacing <code>template: "m"</code> with the <code>M-x org-capture</code> template key of your choice. The document’s title, URL and text selection is then sent to your org capture.</p>
<p>Pretty darn cool! If you’re an org mode user – I know you are! – you should get on top of this right away.</p>
<p>You can even register your own protocols (<code>org-protocol-protocol-alist</code>) and build your own integrations, and it’s not like you have to feed it into org!</p>
<pre><code>New variable lets Lisp code read emacsclient arguments.
When '--eval' is passed to emacsclient and Emacs is evaluating each
argument, the new variable 'server-eval-args-left' is set to those
arguments not yet evaluated.  It can be used by Lisp code to 'pop'
arguments and process them by the function called in the '--eval'
expression, which is useful when those arguments contain arbitrary
characters that otherwise might require elaborate and error-prone
escaping (to protect them from the shell).</code></pre>
<p>Do not sleep on Emacs’s client-server architecture, or the headless evaluation feature it has. My article on <a href="https://www.masteringemacs.org/article/fuzzy-finding-emacs-instead-of-fzf">Fuzzy Finding with Emacs Instead of fzf</a> is a great example of how two dozen lines of elisp and another baker’s dozen of bash can clone the keystone feature of <code>fzf</code>.</p>
<h2 id="incompatible-changes-in-emacs-30.1">Incompatible Changes in Emacs 30.1</h2>
<pre><code>Tree-Sitter modes are now declared as submodes of the non-TS modes.
In order to help the use of those Tree-Sitter modes, they are now
declared to have the corresponding non-Tree-Sitter mode as an
additional parent.
This way, things like ".dir-locals.el" settings, and YASnippet
collections of snippets automatically apply to the new Tree-Sitter modes.

Note that those modes still do not inherit from the non-TS mode, so
configuration settings installed via mode hooks are not affected.

Loading a Tree-Sitter mode (such as by using 'M-x load-library' or with
'M-x load-file') by default causes the corresponding non-Tree-Sitter
mode be remapped to the Tree-Sitter mode.  This remapping affects
visiting files for which 'auto-mode-alist' specifies a non-Tree-Sitter
mode, and also affects mode-specification cookies on the first line of a
file and mode specifications in file- and directory-local variables.  To
revert to using a non-Tree-Sitter mode, reload the corresponding mode
file anew.  To prevent file loading from turning on Tree-Sitter mode
when 'auto-mode-alist' or the file/directory-local variables specify a
non-Tree-Sitter mode, customize the user option 'major-mode-remap-alist'
to specify that a non-Tree-Sitter mode is "remapped" to itself.  For
example:

    (add-to-list 'major-mode-remap-alist '(c-mode))

specifies that C Mode should not be remapped to 'c-ts-mode' even if and
when 'c-ts-mode' is loaded.  Conversely,

    (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))

tells Emacs to always invoke 'c-ts-mode' whenever 'c-mode' is
requested, either by 'auto-mode-alist' or by file/directory-local
variables.

We recommend using 'major-mode-remap-alist' to express your preferences
for using Tree-Sitter or non-Tree-Sitter modes for files for which both
variants of major modes are available, because that variable overrides
the remapping Emacs might decide to perform as result of loading Lisp
files and features.</code></pre>
<p>I mean, I’m glad they’re slowly making these changes, as the tree-sitter modes are threadbare. Aside from better (usually) syntax highlighting and indentation, they rarely offer much.</p>
<p>But this is yet another thing to explain to people that, yes, now your dir-locals will pick up on the TS mode you’re using, but all the other features present in the old major modes probably don’t work.</p>
<p>In my opinion, tree-sitter major modes should be deprecated and the syntax highlighting and indentation relegated to optional minor modes you can enable in the existing major modes (and obviously brand new ones, if no such major modes exist) and all other “tree-sitter-portable” custom commands are gated behind a feature flag that require the presence of TS and the right grammar file to work, with perhaps a fallback for things that can be implemented – or is already – with non-TS code.</p>
<pre><code>Mouse wheel events should now always be 'wheel-up/down/left/right'.
At those places where the old 'mouse-4/5/6/7' events could still occur
(i.e., X11 input in the absence of XInput2, and 'xterm-mouse-mode'),
we remap them to the corresponding 'wheel-up/down/left/right' event,
according to the new user option 'mouse-wheel-buttons'.
The old variables 'mouse-wheel-up-event', 'mouse-wheel-down-event',
'mouse-wheel-left-event', and 'mouse-wheel-right-event' are thereby
obsolete.</code></pre>
<p>I’ve never in my life been able to remember what the numbers map to, so I this is a useful aid to me and, no doubt, anybody else looking to remap or just figure out what a mouse event is.</p>
<pre><code>'completion-auto-help' now affects 'icomplete-in-buffer'.
Previously, 'completion-auto-help' mostly affected only minibuffer
completion.  Now, if 'completion-auto-help' has the value 'lazy', then
Icomplete's in-buffer display of possible completions will only appear
after the 'completion-at-point' command has been invoked twice, and if
'completion-auto-help' is nil, then Icomplete's in-buffer display is
completely suppressed.  Thus, if you use 'icomplete-in-buffer', ensure
'completion-auto-help' is not customized to 'lazy' or nil.</code></pre>
<pre><code>The "*Completions*" buffer now always accompanies 'icomplete-in-buffer'.
Previously, it was not consistent whether the "*Completions*" buffer would
appear when using 'icomplete-in-buffer'.  Now the "*Completions*" buffer
and Icomplete's in-buffer display of possible completions always
appear together.  If you would prefer to see only Icomplete's
in-buffer display, and not the "*Completions*" buffer, you can add this
to your init file:

    (advice-add 'completion-at-point :after #'minibuffer-hide-completions)</code></pre>
<p>This governs the <code>*Completions*</code> window that may (or may not, as the case may be) pop up to offer assistance if when you are completing. If you use the default completion mechanism in Emacs, you may want to consider looking into tweaking this, if you find the current <code>*Completions*</code> behavior is not to your liking.</p>
<pre><code>The default process filter was rewritten in native code.
The round-trip through the Lisp function
'internal-default-process-filter' is skipped when the process filter is
the default one.  It is reimplemented in native code, reducing GC churn.
To undo this change, set 'fast-read-process-output' to nil.</code></pre>
<p>Anything that speeds up a known and serious IO bottleneck in Emacs is welcome news to me. The fact they named the variable <code>fast-read-process-output</code> says it all.</p>
<pre><code>Network Security Manager now warns about 3DES by default.
This cypher is no longer recommended owing to a major vulnerability
disclosed in 2016, and its small 112 bit key size.  Emacs now warns
about its use also when 'network-security-level' is set to 'medium'
(the default).  See 'network-security-protocol-checks'.</code></pre>
<pre><code>Network Security Manager now warns about &lt;2048 bits in DH key exchange.
Emacs used to warn for ephemeral Diffie-Hellman (DHE) key exchanges with
prime numbers smaller than 1024 bits.  Since more servers now support
it, this number has been bumped to 2048 bits.</code></pre>
<pre><code>URL now never sends user email addresses in HTTP requests.
Emacs never sent email addresses by default, but it used to be
possible to customize 'url-privacy-level' so that the user's email
address was sent along in HTTP requests.  This feature has now been
removed, as it was considered more dangerous than useful.  RFC 9110
(§ 10.1.2) also recommends against it.  The user option
'url-personal-mail-address' is now also obsolete.

To send an email address in the header of individual HTTP requests,
see the variable 'url-request-extra-headers'.</code></pre>
<p>I am not sure why there was ever the option of sending email addressed alongside HTTP requests. I don’t recall that ever being a thing in the 90s either, but perhaps that is just my memory failing me.</p>
<pre><code>'pixel-scroll-precision-mode' sets 'make-cursor-line-fully-visible'.
'pixel-scroll-precision-mode' sets 'make-cursor-line-fully-visible' to a
nil value globally, since the usual requirement of the Emacs display to
make the cursor line fully visible contradicts the smooth scrolling
expectations.</code></pre>
<p>I recommend you try <a href="https://github.com/jdtsmith/ultra-scroll">ultra-scroll</a> if you’re serious about wanting smooth scrolling in Emacs.</p>
<h2 id="changes-in-emacs-30.1">Changes in Emacs 30.1</h2>
<pre><code>Fix shell injection vulnerability in man.el (CVE-2025-1244).
We urge all users to upgrade immediately.</code></pre>
<pre><code>New user option 'trusted-content' to allow potentially dangerous features.
This option lists those files and directories whose content Emacs should
consider as sufficiently trusted to run any part of the code contained
therein even without any explicit user request.

For example, Flymake's backend for Emacs Lisp consults this option
and disables itself with an "untrusted content" warning if the file
is not listed.

Emacs Lisp authors should note that a major or minor mode must never set
this option to the ':all' value.

This option is used to fix CVE-2024-53920.  See below for details.</code></pre>
<p>It shouldn’t come as a surprise to anybody that Emacs, a dynamic computing environment, can be coaxed into running stuff it shouldn’t. Ideally that’d never happen, but given the nature of what Emacs does – and how integrated it is in our lives – it is no surprise that on occasion its power is turned against it. What surprises me is that these issues don’t happen more frequently.</p>
<pre><code>Emacs now supports Unicode Standard version 15.1.</code></pre>
<pre><code>Emacs now comes with Org v9.7.
See the file "etc/ORG-NEWS" for user-visible changes in Org.</code></pre>
<pre><code>Improved support for touchscreen devices.
On systems that understand them (at present X, Android, PGTK, and
MS-Windows), many touch screen gestures are now implemented and
translated into mouse or gesture events, and support for tapping tool
bar buttons and opening menus has been added.  Countless packages, such
as Dired and Custom, have been adjusted to better understand touch
screen input.</code></pre>
<p>This obviously goes hand in hand with the Android changes. The myth that Emacs is a keyboard only system is obviously false, and it has been since Lucid/XEmacs improved mouse support in the 1990s. Now that touch screen support is improved, I’m curious to see if we’ll see the emergence of org packages/email clients on Android that lean into the new touch support.</p>
<pre><code>Support for styled underline face attributes.
These are implemented as new values of the 'style' attribute in a face
underline specification, 'double-line', 'dots', and 'dashes', and are
available on GUI systems.  If your terminal's termcap or terminfo
database entry defines the 'Su' or 'Smulx' capability, Emacs will also
emit the prescribed escape sequence to render faces with such styles on
TTY frames.</code></pre>
<pre><code>Support for underline colors on TTY frames.
Colors specified in the underline face will now also be displayed on TTY
frames on terminals that support the 'Su' or 'Smulx' capabilities.</code></pre>
<p>This is addition to things like squiggly underlines that we’ve had for a long time now. I’m quite surprised that terminals can render anything other than a opaque line, though; that is news to me.</p>
<pre><code>Modeline elements can now be right-aligned.
Anything following the symbol 'mode-line-format-right-align' in
'mode-line-format' will be right-aligned.  Exactly where it is
right-aligned to is controlled by the new user option
'mode-line-right-align-edge'.</code></pre>
<p>Can’t say I’ve ever had the desire to heavily mod my mode line, but I know that a lot of people care greatly about its aethestics. I’m sure this is of benefit to people who use right-to-left languages also; perhaps they are the primary users?</p>
<pre><code>X selection requests are now handled much faster and asynchronously.
This means it should be less necessary to disable the likes of
'select-active-regions' when Emacs is running over a slow network
connection.</code></pre>
<pre><code>Emacs now updates invisible frames that are made visible by a compositor.
If an invisible or an iconified frame is shown to the user by the
compositing manager, Emacs will now redisplay such a frame even though
'frame-visible-p' returns nil or 'icon' for it.  This can happen, for
example, as part of preview for iconified frames.</code></pre>
<p>I guess this refers to the ‘window peek’ feature in Windows’ taskbar, and that it’s really more of a bugfix / tweak more than an actual feature.</p>
<pre><code>Most file notification backends detect unmounting of a watched filesystem.
The only exception is w32notify.</code></pre>
<p>Emacs will watch file changes using a range of mechanisms depending on the platform of choice.</p>
<pre><code>The ':map' property of images is now recomputed when image is transformed.
Images with clickable maps now work as expected after you run commands
such as 'image-increase-size', 'image-decrease-size', 'image-rotate',
'image-flip-horizontally', and 'image-flip-vertically'.
Set the new user option 'image-recompute-map-p' to nil to prevent Emacs
from recomputing image maps.</code></pre>
<h2 id="minibuffer-and-completions">Minibuffer and Completions</h2>
<pre><code>New commands 'previous-line-completion' and 'next-line-completion'.
Bound to '&lt;up&gt;' and '&lt;down&gt;' arrow keys, respectively, they navigate
the "*Completions*" buffer vertically by lines, wrapping at the
top/bottom when 'completion-auto-wrap' is non-nil.</code></pre>
<pre><code>New user option 'minibuffer-visible-completions'.
When customized to non-nil, you can use arrow keys in the minibuffer
to navigate the completions displayed in the "*Completions*" window.
Typing 'RET' selects the highlighted candidate.  'C-g' hides the
completions window.  When the completions window is not visible,
then all these keys have their usual meaning in the minibuffer.
This option is supported for in-buffer completion as well.</code></pre>
<pre><code>Selected completion candidates are deselected on typing.
When you type at the minibuffer prompt, the current completion
candidate will be un-highlighted, and point in the "*Completions*" window
will be moved off that candidate.  'minibuffer-choose-completion'
('M-RET') will still choose a previously-selected completion
candidate, but the new command 'minibuffer-choose-completion-or-exit'
(bound to 'RET' by 'minibuffer-visible-completions') will exit with
the minibuffer contents instead.  This deselection behavior can be
controlled with the new user option 'completion-auto-deselect', which
is t by default.</code></pre>
<p>There’s a longer-running theme to try and make the <code>*Completions*</code> window useful in contexts outside the minibuffer’s completion mechanism. This mechanism is rather confusingly named <code>completion-in-region</code>, even though it’s not just about acting on a region. If you use popup completion tools like company and corfu, then you should consider experimenting with this improved completion system, as it’s a “native” buffer-and-window-based approach to the same.</p>
<pre><code>New value 'historical' for user option 'completions-sort'.
When 'completions-sort' is set to 'historical', completion candidates
will be first sorted alphabetically, and then re-sorted by their order
in the minibuffer history, with more recent candidates appearing first.</code></pre>
<p>There are popular third-party packages that do much of this already, so it’s nice to see that a similar feature has made it into core. My article on <a href="https://www.masteringemacs.org/article/understanding-minibuffer-completion">Understanding Minibuffer Completion</a> goes into more detail on how to configure minibuffer completion in Emacs.</p>
<pre><code>'completion-category-overrides' supports more metadata.
The new supported completion properties are 'cycle-sort-function',
'display-sort-function', 'annotation-function', 'affixation-function',
and 'group-function'.  You can now customize them for any category in
'completion-category-overrides' that will override the properties
defined in completion metadata.</code></pre>
<pre><code>'completion-extra-properties' supports more metadata.
The new supported completion properties are 'category',
'group-function', 'display-sort-function', and 'cycle-sort-function'.</code></pre>
<p>See <a href="https://www.masteringemacs.org/article/understanding-minibuffer-completion">my article</a> for more information on customizing Emacs’s minibuffer.</p>
<h2 id="windows">Windows</h2>
<pre><code>New command 'toggle-window-dedicated'.
This makes it easy to interactively mark a specific window as
dedicated, so it won't be reused by 'display-buffer'.  This can be
useful for complicated window setups.  It is bound to 'C-x w d'
globally.</code></pre>
<pre><code>"d" in the mode line now indicates that the window is dedicated.
Windows have always been able to be dedicated to a specific buffer;
see 'window-dedicated-p'.  Now the mode line indicates the dedicated
status of a window, with "d" appearing in the mode line if a window is
dedicated and "D" if the window is strongly dedicated.  This indicator
appears before the buffer name, and after the buffer modification and
remote buffer indicators (usually "---" together).</code></pre>
<p>Coaxing Emacs into putting your windows where you want them to go is a common source of frustrating. I wrote <a href="https://www.masteringemacs.org/article/demystifying-emacs-window-manager">Demystifying Emacs’s Window Manager</a> in part to help people wrangle the windows into place. Dedicated windows are a blunt (though useful) tool that tells Emacs not to use a window for anything other than what is in it already. This feature mirrors what you find in a lot of other IDEs and editors where most windows have a singular purpose, unlike Emacs’.</p>
<pre><code>New action alist entry 'some-window' for 'display-buffer'.
It specifies which window 'display-buffer-use-some-window' should prefer.
For example, when 'display-buffer-base-action' is customized to
'(nil . ((some-window . mru)))', then a buffer will be displayed
in the same most recently used window from consecutive calls of
'display-buffer' (in a configuration with more than two windows).</code></pre>
<p>This is pretty advanced stuff, but if you’re unhappy with the default methods employed by Emacs (see <code>display-buffer-fallback-action</code>) you can now tell it to more aggressively reuse windows using the “most recently used” order of windows.</p>
<pre><code>New action alist entry 'category' for 'display-buffer'.
If the caller of 'display-buffer' passes '(category . symbol)'
in its 'action' argument, you can match the displayed buffer
by adding '(category . symbol)' to the condition part of
'display-buffer-alist' entries.</code></pre>
<p>I do not think you’re likely to encounter code that does this just yet, but I suppose this is one way of disambiguating windows that may share the same buffer name or major mode, but differ in some crucial way that only a custom cons cell <code>category</code> can sort out.</p>
<p>Pretty niche. You’re probably not going to use this <em>really</em> into <code>display-buffer-alist</code>.</p>
<pre><code>New action alist entry 'post-command-select-window' for 'display-buffer'.
It specifies whether the window of the displayed buffer should be
selected or deselected at the end of executing the current command.</code></pre>
<pre><code>New variable 'window-restore-killed-buffer-windows'.
It specifies how 'set-window-configuration' and 'window-state-put'
should proceed with windows whose buffer was killed after the
corresponding configuration or state was recorded.</code></pre>
<p>Window configurations are, well, configurations of windows. They are snapshots of window layouts: <code>C-x r w</code> puts your current window configuration into a register, and that is one such use; the other is tab bars in <code>tab-bar-mode</code>. Both set and restore window configurations when you change tabs or explicitly change them with a register. This variable’s really quite complex, so if you have strong opinions on this (you probably do not) then you really should read the lengthy docstring for this variable.</p>
<pre><code>New variable 'window-point-context-set-function'.
It can be used to set a context for window point in all windows by
'window-point-context-set' before calling 'current-window-configuration'
and 'window-state-get'.  Then later another new variable
'window-point-context-use-function' can be used by
'window-point-context-use' after 'set-window-configuration' and
'window-state-put' to restore positions of window points
according to the context stored in a window parameter.</code></pre>
<p>Emacs tracks the position of point by <em>window</em> and not by buffer, as you may think. Split your current buffer and then move the point in one window and switch to the other: observe that your point is remembered between each window. Very handy, that, and this (alongside the window configuration stuff I mentioned before) is what this is about. You… probably don’t care.</p>
<pre><code>New functions 'set-window-cursor-type' and 'window-cursor-type'.
'set-window-cursor-type' sets a per-window cursor type, and
'window-cursor-type' queries this setting for a given window.  Windows
are always created with a 'window-cursor-type' of t, which means to
consult the variable 'cursor-type' as before.</code></pre>
<p>You can now change the cursor type for each window. Neat. The variable <code>cursor-type</code> used to just override it for the whole Emacs session.</p>
<pre><code>The user option 'display-comint-buffer-action' is now obsolete.
You can use a '(category . comint)' condition in 'display-buffer-alist'
to match buffers displayed by comint-related commands.  Another
user option 'display-tex-shell-buffer-action' is obsolete too
for which you can use '(category . tex-shell)'.</code></pre>
<p>I suppose this is what the change above is really about: to remove bespoke code and generalize it into the new category system.</p>

<pre><code>Tool bars can now be placed on the bottom on more systems.
The 'tool-bar-position' frame parameter can be set to 'bottom' on all
window systems other than macOS and GNUstep (Nextstep).</code></pre>
<pre><code>New global minor mode 'modifier-bar-mode'.
When this minor mode is enabled, the tool bar displays buttons
representing modifier keys.  Clicking on these buttons applies the
corresponding modifiers to the next input event.</code></pre>
<p>Useful on portable devices (like Android) that may not have certain modifier keys on its native keyboard.</p>
<pre><code>New user option 'tool-bar-always-show-default'.
When non-nil, the tool bar at the top of a frame does not show buffer
local customization of the tool bar.  The default value is nil.</code></pre>
<h2 id="tab-bars-and-tab-lines">Tab Bars and Tab Lines</h2>
<p>Tab bars are window configurations; tab lines are basically tabs like they appear in your browser.</p>
<pre><code>New user option 'tab-bar-select-restore-context'.
It uses 'window-point-context-set' to save contexts where
window points were located before switching away from the tab,
and 'window-point-context-use' to restore positions of window
points after switching back to that tab.</code></pre>
<p>If you have multiple tabs featuring the same buffer, you can now preserve the point location between tabs.</p>
<pre><code>New user option 'tab-bar-select-restore-windows'.
It defines what to do with windows whose buffer was killed since the tab
was last selected.  By default it displays a placeholder buffer
with the name " *Old buffer &lt;name&gt;*" that provides information about
the name of the killed buffer that was displayed in that window.</code></pre>
<pre><code>New user option 'tab-bar-tab-name-format-functions'.
It can be used to add, remove and reorder functions that change the
appearance of every tab on the tab bar.</code></pre>
<pre><code>New hook 'tab-bar-tab-post-select-functions'.</code></pre>
<pre><code>New keymap 'tab-bar-mode-map'.
By default it contains a keybinding 'C-TAB' to switch tabs, but only
when 'C-TAB' is not bound globally.  You can unbind it if it conflicts
with 'C-TAB' in other modes.</code></pre>
<pre><code>New keymap 'tab-line-mode-map'.
By default it contains keybindings for switching tabs: 'C-x &lt;left&gt;',
'C-x &lt;right&gt;', 'C-x C-&lt;left&gt;', 'C-x C-&lt;right&gt;'.  You can unbind them if
you want to use these keys for the commands 'previous-buffer' and
'next-buffer'.</code></pre>
<p>A better way of configuring tab bar/line modes’ keys. You can opt for more complex keys, and even use keyboard repeat maps if you use <code>C-&lt;TAB&gt;</code> for other things.</p>
<pre><code>Default list of tab-line tabs is changed to support a fixed order.
This means that 'tab-line-tabs-fixed-window-buffers', the new default
tabs function, is like the previous 'tab-line-tabs-window-buffers' where
both of them show only buffers that were previously displayed in the
window.  But the difference is that the new function always keeps the
original order of buffers on the tab line, even after switching between
these buffers.  You can drag the tabs and release at a new position
to manually reorder the buffers on the tab line.</code></pre>
<pre><code>New user option 'tab-line-tabs-buffer-group-function'.
It provides two choices to group tab buffers by major mode and by
project name.</code></pre>
<pre><code>Buffers on tab-line group tabs are now sorted alphabetically.
This will keep the fixed order of tabs, even after switching between
them.</code></pre>
<h2 id="help">Help</h2>
<pre><code>New command 'help-find-source'.
Switch to a buffer visiting the source of what is being described in
"*Help*".  It is bound to 'C-h 4 s' globally.</code></pre>
<p>Other notable commands include <code>M-x find-variable</code>, <code>M-x find-function</code> and <code>M-x find-function-on-key</code> to jump to their source definitions. I use ’em all the time.</p>
<pre><code>New user option 'describe-bindings-outline-rules'.
This user option controls outline visibility in the output buffer of
'describe-bindings' when 'describe-bindings-outline' is non-nil.</code></pre>
<p>All this does is determine whether <code>outline-minor-mode</code> is enabled and configured to make headings collapsible.</p>
<pre><code>'describe-function' shows the function's inferred type when available.
For native compiled Lisp functions, 'describe-function' prints (after
the signature) the automatically inferred function type as well.  If the
function's type was explicitly declared (via the 'declare' form's
'ftype' property), 'describe-function' shows the declared type.  This is
controlled by the new user option 'help-display-function-type', which is
by default t; customize to nil to disable function type display.</code></pre>
<p>This is really only likely to be of interest and use to elisp hackers who know their way around Emacs’s internals. The declared type for <code>+</code> is <code>Declared type: (function (&amp;rest (or number marker)) number)</code> for example.</p>
<pre><code>'describe-function' now shows the type of the function object.
The text used to say things like "car is a built-in function" whereas it
now says "car is a primitive-function" where "primitive-function" is the
name of the symbol returned by 'cl-type-of'.  You can click on those
words to get information about that type.</code></pre>
<p>It’s been a long-running saga to get some sort of type taxonomy into Emacs, and it’s slowly happening now. I am unsure how useful this is to your average elisp hacker; this is more likely to be of use for byte and native compilation. See also the entry further down on declaratively specifying the arguments and return type of a function.</p>
<pre><code>'C-h m' ('describe-mode') uses outlining by default.
Set 'describe-mode-outline' to nil to get back the old behavior.</code></pre>
<p>See above.</p>
<pre><code>'C-h k' ('describe-key') shows Unicode name.
For keybindings which produce single characters via translation or input
methods, 'C-h k' now shows the Unicode name of the produced character in
addition to the character itself, e.g.

'C-h k C-x 8 E' =&gt;

    € 'EURO SIGN' (translated from C-x 8 E)</code></pre>
<p>A useful change, even though I doubt I’ll remember that I can do this. For inputtable characters I normally type them then use <code>C-u C-x =</code> to see its unicode name along with a host of other useful information.</p>
<pre><code>'C-h b' ('describe-bindings') shows Unicode names.
For keybindings which produce single characters via translation (such as
those using the 'C-x 8' or 'A-' prefix, or 'dead-acute', 'dead-grave',
etc), the Unicode names will now be shown in addition to the character
itself, i.e.

    A-!         ¡   INVERTED EXCLAMATION MARK
    A-$         ¤   CURRENCY SIGN

and so on.</code></pre>
<p>This I am more likely to find a use for. <code>C-h b</code> is a must-know command, and now it shows the unicode name for self-inserted characters.</p>
<pre><code>Multi-character key echo now ends with a suggestion to use Help.
Customize 'echo-keystrokes-help' to nil to prevent that.</code></pre>
<h2 id="customize">Customize</h2>
<pre><code>New command 'customize-dirlocals'.
This command pops up a buffer to edit the settings in ".dir-locals.el".</code></pre>
<p>Wow. This change is great. Directory-local variables are elisp variables declared in one of several files (such as <code>.dir-locals.el</code>) that you can use to effect directory-specific changes to Emacs buffers. I really love dirlocals; however, they’re a pain to add and edit. <code>M-x add-dir-local-variable</code> is a newbie trap, and it’s easy to type the wrong thing and cause all sorts of issues (or worse: that nothing at all happens.)</p>
<p>A nice customize UI will go a long way towards encouraging more people to use it.</p>
<pre><code>New command 'customize-toggle-option'.
This command can toggle boolean options for the duration of a session.</code></pre>
<p>One cool aspect of Customize is that you can set settings for the duration only, and then later on return to finalize them and save them to a file. All this does is add that functionality to booleans.</p>
<pre><code>New prefix argument for modifying directory-local variables.
The commands 'add-dir-local-variable', 'delete-dir-local-variable' and
'copy-file-locals-to-dir-locals' now take an optional prefix argument,
to enter the file name where you want to modify directory-local
variables.</code></pre>
<pre><code>New user option 'safe-local-variable-directories'.
This user option names directories in which Emacs will treat all
directory-local variables as safe.</code></pre>
<p>Very useful. Emacs is squeamish about dirlocals as it maintains a list of safe variables and anything else is considered unsafe, and you’re asked to approve every setting. Whitelisting certain directories is a great compromise for people who are OK with the risks that follow from such a feature.</p>
<h2 id="cl-print">CL Print</h2>
<p>This is for elisp programmers only, and governs how Elisp forms are printed on the screen for human consumption.</p>
<pre><code>There is a new chapter in the CL manual documenting cl-print.el.
See the Info node "(cl) Printing".</code></pre>
<pre><code>You can expand the "..." truncation everywhere.
The code that allowed "..." to be expanded in the "*Backtrace*" buffer
should now work anywhere the data is generated by 'cl-print'.</code></pre>
<pre><code>The 'backtrace-ellipsis' button is replaced by 'cl-print-ellipsis'.</code></pre>
<pre><code>hash-tables' contents can be expanded via the ellipsis.</code></pre>
<pre><code>Modes can control the expansion via 'cl-print-expand-ellipsis-function'.</code></pre>
<pre><code>New setting 'raw' for 'cl-print-compiled'.
This setting causes byte-compiled functions to be printed in full by
'prin1'.  A button on this output can be activated to disassemble the
function.</code></pre>
<h2 id="miscellaneous">Miscellaneous</h2>
<pre><code>New command 'kill-matching-buffers-no-ask'.
This works like 'kill-matching-buffers', but without asking for
confirmation.</code></pre>
<p><code>M-x kill-matching-buffers</code> kills buffers by regexp; and now you can have it do so without asking your permission.</p>
<pre><code>'recover-file' can show diffs between auto save file and current file.
When answering the prompt with "diff" or "=", it now shows the diffs
between the auto save file and the current file.</code></pre>
<p>Ah, very handy. You can already diff files you want to save with <code>C-x s</code> and then <code>d</code>.</p>
<pre><code>'read-passwd' can toggle the visibility of passwords.
Use 'TAB' in the minibuffer to show or hide the password.
Alternatively, click the new show-password icon on the mode-line with
'mouse-1' to toggle the visibility of the password.</code></pre>
<p>TAB, eh? I’m most assuredly going to accidentally reveal a password that way. You can edit <code>read-passwd-map</code> to remove the TAB if you want, though.</p>
<pre><code>'advice-remove' is now an interactive command.
When called interactively, 'advice-remove' now prompts for an advised
function to the advice to remove.</code></pre>
<p>Good. You can do this with <code>M-x remove-hook</code> also. Useful if you foolishly cram lambdas into hooks or advice… and are now struggling to remove them. But you’d never make that mistake, right? :)</p>
<pre><code>New user option 'uniquify-dirname-transform'.
This can be used to customize how buffer names are uniquified, by
making arbitrary transforms on the buffer's directory name (whose
components are used to uniquify buffer names when they clash).  You
can use this to distinguish between buffers visiting files with the
same base name that belong to different projects by using the provided
transform function 'project-uniquify-dirname-transform'.</code></pre>
<p>Uniquify renames buffers (but not the underlying files, if any) to sensible names instead of <code>foo&lt;1&gt;</code>, <code>foo&lt;2&gt;</code>, etc. It’s enabled by default, nowadays, but if you use the projects feature in Emacs, and if you frequently open the same file name in multiple projects, give this setting a try.</p>
<pre><code>New user option 'remote-file-name-inhibit-delete-by-moving-to-trash'.
When non-nil, this option suppresses moving remote files to the local
trash when deleting.  Default is nil.</code></pre>
<pre><code>New user option 'remote-file-name-inhibit-auto-save'.
If this user option is non-nil, 'auto-save-mode' will not auto-save
remote buffers.  The default is nil.</code></pre>
<pre><code>New user option 'remote-file-name-access-timeout'.
If a positive number, this option limits the call of 'access-file'
for remote files to that number of seconds.  Default is nil.</code></pre>
<p>These are Tramp features, part of Emacs’s remote file editing system.</p>
<pre><code>New user option 'yes-or-no-prompt'.
This allows the user to customize the prompt that is appended by
'yes-or-no-p' when asking questions.  The default value is
"(yes or no) ".</code></pre>
<pre><code>New user option 'menu-bar-close-window'.
When non-nil, selecting "Close" from the "File" menu or clicking
"Close" in the tool bar will result in the current window being
deleted, if possible.  The default is nil, and these gestures kill the
buffer shown in the current window, but don't delete the window.</code></pre>
<pre><code>New face 'display-time-date-and-time'.
This is used for displaying the time and date components of
'display-time-mode'.</code></pre>
<pre><code>New face 'appt-notification' for 'appt-display-mode-line'.
It can be used to customize the look of the appointment notification
displayed on the mode line when 'appt-display-mode-line' is non-nil.</code></pre>
<pre><code>New icon images for general use.
Several symbolic icons have been added to "etc/images/symbols",
including plus, minus, check-mark, star, etc.</code></pre>
<pre><code>Emacs now recognizes shebang lines that pass '-S'/'--split-string' to 'env'.
When visiting a script that invokes 'env -S INTERPRETER ARGS...' in
its shebang line, Emacs will now skip over 'env -S' and deduce the
major mode based on the interpreter after 'env -S'.</code></pre>
<p>Emacs uses a wide range of tools to infer the major mode to use. Filename is not the only way: Emacs will scan the file to try and determine the major mode if there is no obvious choice that matches its filename. Looking at <code>/usr/bin/env</code> is one such method.</p>
<pre><code>'insert-directory-program' is now a user option.
On *BSD and macOS systems, this user option now defaults to the "gls"
executable, if it exists.  This should remove the need to change its
value when installing GNU coreutils using something like ports or
Homebrew.</code></pre>
<pre><code>'write-region-inhibit-fsync' now defaults to t in interactive mode.
This is the default in batch mode since Emacs 24.</code></pre>
<pre><code>The default value of 'read-process-output-max' was increased to 65536.</code></pre>
<p>You can probably experiment with setting this even higher to batch up output from commands. Your mileage may vary, though. Mine is set to <code>1048576</code>.</p>
<pre><code>'url-gateway-broken-resolution' is now obsolete.
This option was intended for use on SunOS 4.x and Ultrix systems,
neither of which have been supported by Emacs since version 23.1.
The user option 'url-gateway-nslookup-program' and the command
'url-gateway-nslookup-host' are consequently also obsolete.

</code></pre>
<h2 id="editing-changes-in-emacs-30.1">Editing Changes in Emacs 30.1</h2>
<pre><code>New minor mode 'visual-wrap-prefix-mode'.
When enabled, continuation lines displayed for a wrapped long line
will receive a 'wrap-prefix' automatically computed from the line's
surrounding context, such that continuation lines are indented on
display as if they were filled with 'M-q' or similar.  Unlike 'M-q',
the indentation only happens on display, and doesn't change the buffer
text in any way.  The global minor mode
'global-visual-wrap-prefix-mode' enables this minor mode in all
buffers.

(This minor mode is the 'adaptive-wrap' ELPA package renamed and
lightly edited for inclusion in Emacs.)</code></pre>
<pre><code>New global minor mode 'kill-ring-deindent-mode'.
When enabled, text being saved to the kill ring will be de-indented by
the column number at its start.  For example, saving the entire
function call within an indented block:

foo ()
{
  long_function_with_several_arguments (argument_1_compute (),
                                        argument_2_compute (),
                                        argument_3_compute ());
}

will save this to the kill ring:

long_function_with_several_arguments (argument_1_compute (),
                                      argument_2_compute (),
                                      argument_3_compute ())

This omits the two columns of extra indentation that would otherwise be
copied from the second and third lines and saved to the kill ring.</code></pre>
<p>This is worth enabling if inconsistent kill-yank indentation annoys you. Doing this correctly, especially in whitespace sensitive languages, is really important in structured editing tools such as my package, <a href="https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter">Combobulate</a>.</p>
<pre><code>New command 'replace-regexp-as-diff'.
It reads a regexp to search for and a string to replace with, then
displays a buffer with replacements as diffs.  After reviewing the
changes in the output buffer you can apply the replacements as
a patch to the current file buffer.  There are also new commands
'multi-file-replace-regexp-as-diff' that shows as diffs replacements
in a list of specified files, and 'dired-do-replace-regexp-as-diff'
that shows as diffs replacements in the marked files in Dired.</code></pre>
<p>This is a very welcome addition for bulk text replacing. It’s a nervewracking thing to accept/reject changes and hope you didn’t screw it up. Having a dedicated diff window that works across multiple files is a superb addition to Emacs.</p>
<pre><code>New mode of prompting for register names and showing preview.
The new user option 'register-use-preview' can be customized to the
value t or 'insist' to request a different user interface of prompting for
register names and previewing the registers: Emacs will require
confirmation for overwriting the value of a register, and will show
the preview of registers without delay.  You can also customize this
new option to disable the preview completely.

The default value of 'register-use-preview' ('traditional') preserves the
behavior of Emacs 29 and before.  See the Info node "(emacs) Registers"
for more details about the new UI and its variants.</code></pre>
<p>I love registers, and I use them a lot. I use them because they require no forethought on my part to use: set and recall; it’s that simple. No fuss. If you want added distractions like confirmation prompts if you override a register? Go ahead and change the new option. If you like registers the way they are, then you don’t have to do anything.</p>
<pre><code>New advanced macro counter commands.
New commands have been added to implement advanced macro counter
functions.

The commands 'C-x C-k C-r l' and 'C-x C-k C-r s' load and save the
macro counter from and to a number register, respectively.

The commands 'C-x C-k C-r a =', 'C-x C-k C-r a &lt;', and 'C-x C-k C-r a &gt;'
compare the macro counter with the contents of a number register and
increment the counter by an optional prefix if the comparison succeeds.

The commands 'C-x C-k C-q =', 'C-x C-k C-q &lt;', and 'C-x C-k C-q &gt;'
compare the macro counter with an optional prefix and terminate the
macro if the comparison succeeds.</code></pre>
<p>Advanced indeed. Registers are capable of incrementing and decrementing a number already, and kmacro (Emacs’s keyboard macro facility) has its own internal counter (see <a href="https://www.masteringemacs.org/article/keyboard-macros-are-misunderstood">Keyboard Macros are Misunderstood</a>) also. Now you can switch values between them and also do simple comparisons. Combine it with the ability to physically move up or down a line; increment and decrement; and conditional termination, and I’m pretty sure kmacro close to Turing-complete.</p>
<pre><code>New mode 'kmacro-menu-mode' and new command 'list-keyboard-macros'.
The new command 'list-keyboard-macros' is the keyboard-macro version
of commands like 'list-buffers' and 'list-processes', creating a listing
of the currently existing keyboards macros using the new mode
'kmacro-menu-mode'.  It allows rearranging the macros in the ring,
duplicating them, deleting them, and editing their counters, formats,
and keys.</code></pre>
<p>Excellent. There’s already a kmacro ring for macros known to Emacs, but it’s a bit awkward. Now you can list the macros.</p>
<pre><code>On X, Emacs now supports input methods which perform "string conversion".
This means an input method can now ask Emacs to delete text
surrounding point and replace it with something else, as well as query
Emacs for surrounding text.  If your input method allows you to "undo"
mistaken compositions, this will now work as well.</code></pre>
<pre><code>New user option 'duplicate-region-final-position'.
It controls the placement of point and the region after duplicating a
region with 'duplicate-dwim'.</code></pre>
<pre><code>New user option 'mouse-prefer-closest-glyph'.
When enabled, clicking or dragging with the mouse will put the point
or start the drag in front of the buffer position corresponding to the
glyph with the closest X coordinate to the click or start of the drag.
In other words, if the mouse pointer is in the right half of a glyph,
point will be put after the buffer position corresponding to that glyph,
whereas if the mouse pointer is in the left half of a glyph, point
will be put in front the buffer position corresponding to that glyph.
By default this is disabled.</code></pre>
<pre><code>New pre-defined values for 'electric-quote-chars'.
The available customization options for 'electric-quote-chars' have been
updated with common pairs of quotation characters, including "‘", "’",
"“", "”", "«", "»", "‹", "›", "‚", "„", "「", "」", "『", and "』".
The default is unchanged.</code></pre>
<p>This is for <code>M-x electric-pair-mode</code>, which automatically pairs an opening character with its constituent closing character.</p>
<pre><code>'M-TAB' now invokes 'completion-at-point' in Text mode.
By default, Text mode no longer binds 'M-TAB' to 'ispell-complete-word'.
Instead, this mode arranges for 'completion-at-point', globally bound to
'M-TAB', to perform word completion as well.  You can have Text mode
binding 'M-TAB' to 'ispell-complete-word' as it did in previous Emacs
versions, or disable Ispell word completion in Text mode altogether, by
customizing the new user option 'text-mode-ispell-word-completion'.</code></pre>
<p><code>M-&lt;TAB&gt;</code> is also Alt+Tab. The key binding <code>C-M-i</code> is functionally equivalent.</p>
<h2 id="internationalization">Internationalization</h2>
<pre><code>Mode-line mnemonics for some coding-systems have changed.
The mode-line mnemonic for 'utf-7' is now the lowercase 'u', to be
consistent with the other encodings of this family.

The mode-line mnemonic for 'koi8-u' is now 'У', U+0423 CYRILLIC
CAPITAL LETTER U, to distinguish between this encoding and the
UTF-8/UTF-16 family.

If your terminal cannot display 'У', or if you want to get the old
behavior back for any other reason, you can do that using the
'coding-system-put' function.  For example, the following restores the
previous behavior of showing 'U' in the mode line for 'koi8-u':

    (coding-system-put 'koi8-u :mnemonic ?U)</code></pre>
<p>The mode line adopts a different character for the coding system in the active buffer. You can find it in the bottom left.</p>
<pre><code>'vietnamese-tcvn' is now a coding system alias for 'vietnamese-vscii'.
VSCII-1 and TCVN-5712 are different names for the same character
encoding.  Therefore, the duplicate coding system definition has been
dropped in favor of an alias.

The mode-line mnemonic for 'vietnamese-vscii' and its aliases is the
lowercase letter "v".</code></pre>
<pre><code>Users in CJK locales can control width of some non-CJK characters.
Some characters are considered by Unicode as "ambiguous" with respect
to their display width: either "full-width" (i.e., taking 2 columns on
display) or "narrow" (taking 1 column).  The actual width depends on
the fonts used for these characters by Emacs or (for text-mode frames)
by the terminal emulator.  Traditionally, font sets in CJK locales
were set up so as to display these characters as full-width, and thus
Emacs modified the char-width table in those locales to follow suit.
Lately, the tendency is to display these characters as narrow.  The
new user option 'cjk-ambiguous-chars-are-wide' allows users to control
whether Emacs considers these characters as full-width (the default)
or narrow (if the variable is customized to the nil value).

This setting affects the results of 'string-width' and similar
functions in CJK locales.</code></pre>
<pre><code>New input methods for the Urdu, Pashto, and Sindhi languages.
These languages are spoken in Pakistan and Afghanistan.</code></pre>
<pre><code>New input method "english-colemak".
This input method supports the Colemak keyboard layout.</code></pre>
<p>Input methods are really neat. You can switch to a ‘virtual keyboard’ that behaves like another language, letting you enter diacritics and complex unicode characters using your current keyboard’s layout. You are not limited to actual languages, either: there are input methods to help you enter LaTeX for example.</p>
<p>You can toggle the input method with <code>C-\</code> and with a prefix argument to set the input method type. I wrote about them in <a href="https://www.masteringemacs.org/article/diacritics-in-emacs">Olé! Diacritics in Emacs</a>. I even wrote my own input method for <a href="https://www.masteringemacs.org/article/inserting-emoji-input-methods">Inserting Emoji</a> just to highlight how powerful and simple the system is.</p>
<pre><code>Additional 'C-x 8' key translations for "æ" and "Æ".
These characters can now be input with 'C-x 8 a e' and 'C-x 8 A E',
respectively, in addition to the existing translations 'C-x 8 / e' and
'C-x 8 / E'.</code></pre>
<p>Wonderful news for people who prefer the original spelling of encyclopedia, and Danes, I suppose.</p>
<pre><code>New 'C-x 8' key translations for "low" quotes "„", and "‚".
These can now be entered with 'C-x , "' and 'C-x , ''.</code></pre>
<pre><code>New German language 'C-x 8' key translations for quotation marks.
The characters "„", "“", and "”" can now be entered with 'C-x 8 v',
'C-x 8 b' and 'C-x 8 n'.  The single versions "‚", "‘", and "’" can now
be entered with 'C-x 8 V', 'C-x 8 B' and 'C-x 8 N'.  These characters
are used for the official German quoting style.  Using them requires
activating German language support via 'iso-transl-set-language'.</code></pre>
<pre><code>"latin-prefix" and "latin-postfix" quotation marks additions.
These input methods can now produce single, double and "low" left and
right quotation marks:

    "‘", "’", "“", "”", "„", and "‚"

by using "[", "]", and "," for "left", "right", and "low" respectively
to modify "'" and """.</code></pre>
<pre><code>"latin-prefix" and "latin-postfix" guillemets support.
These input methods can now produce single guillemets "‹" and "›".  For
"latin-prefix" use "~~&lt;" and "~~&gt;", for "latin-postfix" use "&lt;~" and
"&gt;~".  Double guillemets ("«" and "»") were already supported.</code></pre>
<pre><code>New French language 'C-x 8' key translations for "‹" and "›".
These characters can now be entered using 'C-x 8 ~ &lt;' and 'C-x 8 ~ &gt;',
respectively, after activating French language support via
'iso-transl-set-language'.  Double guillemets were already supported via
'C-x 8 &lt;' and 'C-x 8 &gt;'</code></pre>
<pre><code>Additional 'C-x 8' key translation for Euro "€" currency symbol.
This can now be entered using 'C-x 8 E' in addition to the existing
'C-x 8 * E' translation.</code></pre>
<h2 id="changes-in-specialized-modes-and-packages-in-emacs-30.1">Changes in Specialized Modes and Packages in Emacs 30.1</h2>
<h3 id="outline-mode">Outline mode</h3>
<p>Outline mode is a cut-down outliner for collapsing and expanding headings.</p>
<pre><code>New commands to show/hide outlines by regexp.
'C-c / h' ('outline-hide-by-heading-regexp') asks for a regexp and then
hides the body lines of all outlines whose heading lines match the
regexp.  'C-c / s' ('outline-show-by-heading-regexp') does the inverse:
it shows the bodies of outlines that matched a regexp.</code></pre>
<pre><code>'outline-minor-mode' is supported in tree-sitter major modes.
It can be used in all tree-sitter major modes that set either the
variable 'treesit-simple-imenu-settings' or 'treesit-outline-predicate'.</code></pre>
<p>Excellent news, and likely to be far more robust as it uses tree-sitter’s nodes to determine what to hide and show.</p>
<h3 id="info">Info</h3>
<p>Info mode is Emacs’s implementation of the TexInfo hypertext viewer.</p>
<pre><code>New user option 'Info-url-alist'.
This user option associates manual names with URLs.  It affects the
'Info-goto-node-web' command.  By default, associations for all
Emacs-included manuals are set.  Further associations can be added for
arbitrary Info manuals.</code></pre>
<pre><code>Emacs can now display Info manuals compressed with 'lzip'.
This requires the 'lzip' program to be installed on your system.</code></pre>
<h3 id="gud-grand-unified-debugger">GUD (Grand Unified Debugger)</h3>
<p>GUD is a user interface for debuggers such as GDB.</p>
<pre><code>New user option 'gud-highlight-current-line'.
When enabled, GUD will visually emphasize the line being executed upon
pauses in the debuggee's execution, such as those occasioned by
breakpoints being hit.</code></pre>
<pre><code>New command 'lldb'.
Run the LLDB debugger, analogous to the 'gud-gdb' command.</code></pre>
<pre><code>Variable order and truncation can now be configured in 'gdb-many-windows'.
The new user option 'gdb-locals-table-row-config' allows users to
configure the order and max length of various properties in the local
variables buffer when using 'gdb-many-windows'.

By default, this user option is set to write the properties in the order:
'name', 'type' and 'value', where the 'name' and 'type' are truncated to 20
characters, and the 'value' is truncated according to the value of
'gdb-locals-value-limit'.

If you want to get back the old behavior, set the user option to the value

    (setopt gdb-locals-table-row-config
            `((type . 0) (name . 0) (value . ,gdb-locals-value-limit)))</code></pre>
<pre><code>New user option 'gdb-display-io-buffer'.
If this is nil, command 'gdb' will neither create nor display a separate
buffer for the I/O of the program being debugged, but will instead
redirect the program's interaction to the GDB execution buffer.  The
default is t, to preserve previous behavior.</code></pre>
<h3 id="grep">Grep</h3>
<p>Grep (or rather the interface for talking to and displaying the results from <code>grep</code>) is a powerful feature in Emacs with a wide range of commands.</p>
<pre><code>New user option 'grep-use-headings'.
When non-nil, the output of Grep is split into sections, one for each
file, instead of having file names prefixed to each line.  It is
equivalent to the '--heading' option of some tools such as 'git grep'
and 'rg'.  The headings are displayed using the new 'grep-heading' face.
The default is nil.</code></pre>
<p>Good news if you prefer the heading system used by tools such as <code>rg</code>. I have not tried it yet, but I wonder how easy it is to bulk edit the output of a grep command when it is in header mode.</p>
<h3 id="compilation-mode">Compilation mode</h3>
<p>Compilation mode (via <code>M-x compile</code> usually) is Emacs’s interface for talking to not just compilers but any tool that emits structured output.</p>
<pre><code>The 'omake' matching rule is now disabled by default.
This is because it partly acts by modifying other rules which may
occasionally be surprising.  It can be re-enabled by adding 'omake' to
'compilation-error-regexp-alist'.</code></pre>
<pre><code>Lua errors and stack traces are now recognized.
Compilation mode now recognizes Lua language errors and stack traces.
Every Lua error is recognized as a compilation error, and every Lua
stack frame is recognized as a compilation info.</code></pre>
<p>Emacs already has a huge range of compilation rules, so I’m surprised it didn’t have it for Lua, given how popular it is.</p>
<h3 id="project">Project</h3>
<p>Project is one of many, many file project solutions built into Emacs, and arguably the best one to use. See <code>C-x p C-h</code>.</p>
<pre><code>New user option 'project-mode-line'.
When non-nil, display the name of the current project on the mode
line.  Clicking 'mouse-1' on the project name pops up the project
menu.  The default value is nil.</code></pre>
<p>If you’re not strapped for space, why not enable this?</p>
<pre><code>New user option 'project-file-history-behavior'.
Customizing it to 'relativize' makes commands like 'project-find-file'
and 'project-find-dir' display previous history entries relative to
the current project.</code></pre>
<pre><code>New user option 'project-key-prompt-style'.
The look of the key prompt in the project switcher has been changed
slightly.  To get the previous one, set this option to 'brackets'.</code></pre>
<pre><code>Function 'project-try-vc' tries harder to find the responsible VCS.
When 'project-vc-extra-root-markers' is non-nil, and causes a
subdirectory project to be detected which is not a VCS root, Project now
additionally traverses the parent directories until a VCS root is found
(if any), so that the ignore rules for that repository are used, and
the file listing's performance is still optimized.</code></pre>
<p>Root markers are used to find the boundaries of a project (for example the <code>.git</code> directory, or maybe a file such as a Makefile), and that works well enough for simple use cases. You can tell Emacs to look for other things in addition to its builtin rules, and this is where the contract of a root marker breaks down a little, particularly if you have a repo and another non-repo marker inside of that.</p>
<pre><code>New commands 'project-any-command' and 'project-prefix-or-any-command'.
The former is now bound to 'C-x p o' by default.
The latter is designed primarily for use as a value of
'project-switch-commands'.  If instead of a short menu you prefer to
have access to all keys defined inside 'project-prefix-map', as well
as global bindings (to run other commands inside the project root),
you can add this to your init script:

    (setopt project-switch-commands #'project-prefix-or-any-command)</code></pre>
<p>This is effectively a way of executing a key bindings from the root directory of the current buffer’s root project.</p>
<pre><code>New variable 'project-files-relative-names'.
If it is non-nil, 'project-files' can return file names relative to the
project root.  Project backends can use this to improve the performance
of their 'project-files' implementation.</code></pre>
<h3 id="vc">VC</h3>
<p>VC is Emacs’s excellent generic version control interface. If you do not use <a href="https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git">Magit, an Emacs mode for Git</a>, or if you use a source control that is not git, then I highly recommend you sit down and learn how to use VC. It’s really excellent.</p>
<pre><code>Log-Edit buffers now display a tool bar.
This tool bar contains items for committing log entries and editing or
generating log entries, among other editing operations.</code></pre>
<p>I’ve long advocated using the menu bar because telling beginners to turn it off is <a href="https://www.masteringemacs.org/article/bad-emacs-advice">Bad Emacs Advice</a>. The toolbar is harder to justify turning on as it is a little bit threadbare. Having said that, making it even more contextual is still a very positive thing indeed.</p>
<pre><code>New user option 'vc-git-shortlog-switches'.
This is a string or a list of strings that specifies the Git log
switches for shortlogs, such as the one produced by 'C-x v L'.
'vc-git-log-switches' is no longer used for shortlogs.</code></pre>
<pre><code>New value 'no-backend' for user option 'vc-display-status'.
With this value only the revision number is displayed on the mode-line.</code></pre>
<pre><code>Obsolete command 'vc-switch-backend' re-added as 'vc-change-backend'.
The command was previously obsoleted and unbound in Emacs 28.</code></pre>
<p>It is rare indeed for a command to get obsoleted and the unobsoleted.</p>
<pre><code>Support for viewing VC change history across renames.
When a fileset's VC change history ends at a rename, 'C-x v l' now
prints the old name(s) and shows a button which jumps to the history of
the files under the old names.  This feature is supported for Git and
Hg.  Naturally, 'vc-git-print-log-follow' should be nil for this to work
(or '--follow' should not be in 'vc-hg-log-switches', in Hg's case).
Unlike when the '--follow' switch is used, commands to see the diff of
the old revision ('d'), to check out an old file version ('f') or to
annotate it ('a'), also work on revisions which precede renames.</code></pre>
<pre><code>'vc-annotate' now abbreviates the Git revision in the buffer name.
When using the Git backend, 'vc-annotate' will use an abbreviated
revision identifier in its buffer name.  To restore the previous
behavior, set user option 'vc-annotate-use-short-revision' to nil.</code></pre>
<pre><code>New user option 'vc-git-file-name-changes-switches'.
It allows tweaking the thresholds for rename and copy detection.</code></pre>
<pre><code>VC Directory buffers now display the upstream branch in Git repositories.
The "upstream branch" is the branch from which 'vc-pull' fetches changes
by default.  In Git terms, the upstream branch of branch B is determined
by configuration variables 'branch.B.remote' and 'branch.B.merge'.

When these configuration variables are set for the current branch, the
VC Directory buffer will show the corresponding upstream branch under
the "Tracking" header.</code></pre>
<h3 id="diff-mode">Diff mode</h3>
<p>Diff mode is one of several modes for interacting with and browsing <code>.diff</code> files.</p>
<pre><code>New user option 'diff-refine-nonmodified'.
When this is non-nil, 'diff-refine-hunk' will highlight lines that were
added or removed in their entirety (as opposed to modified lines, where
some parts of the line were modified), using the same faces as for
highlighting the words added and removed within modified lines.  The
default value is nil.</code></pre>
<pre><code>'diff-ignore-whitespace-hunk' can now be applied to all hunks.
When called with a non-nil prefix argument,
'diff-ignore-whitespace-hunk' now iterates over all the hunks in the
current diff, regenerating them without whitespace changes.</code></pre>
<p>Very useful in Lisp, in my opinion, where a change of indentation can easily happen when you change something else. I have git set to ignore whitespace by default to avoid indentation changes gumming up the staging area.</p>
<pre><code>New user option 'diff-ignore-whitespace-switches'.
This allows changing which type of whitespace changes are ignored when
regenerating hunks with 'diff-ignore-whitespace-hunk'.  Defaults to
the previously hard-coded "-b".</code></pre>
<pre><code>New command 'diff-apply-buffer' bound to 'C-c RET a'.
It applies the diff in the entire diff buffer and
saves all modified file buffers.</code></pre>
<p>Good all-round command and saves having to do multiple keystrokes to achieve the same effect.</p>
<h3 id="dired">Dired</h3>
<p>Dired is Emacs’s all-singing, all-dancing directory and file editor, bound to <code>C-x d</code> and <code>M-x dired</code>.</p>
<pre><code>New user option 'dired-movement-style'.
When non-nil, make 'dired-next-line', 'dired-previous-line',
'dired-next-dirline', 'dired-prev-dirline' skip empty lines.
It also controls how to move point when encountering a boundary
(e.g., if every line is visible, invoking 'dired-next-line' at
the last line will move to the first line).  The default is nil.</code></pre>
<p>Oh, this is much-needed. Here’s how it works: you can insert the contents of a directory into an existing dired buffer (find a directory and tap <code>i</code>) and act on the files across the directory boundaries as though they were one directory – very powerful, and it means you can use <a href="https://www.masteringemacs.org/article/dired-shell-commands-find-xargs-replacement">dired to replace find &amp; xargs</a> – but the <code>p</code> and <code>n</code> commands to move between files does not jump between these virtual directories, and so you’re stuck having to move point between a bunch of dead space. Until now, that is. I recommend you set it to <code>bounded</code> or <code>cycle</code>.</p>
<pre><code>New user option 'dired-filename-display-length'.
It is an integer representing the maximum display length of file names.
The middle part of a file name whose length exceeds the restriction is
hidden and an ellipsis is displayed instead.  A value of 'window'
means using the right edge of window as the display restriction.  The
default is nil.</code></pre>
<p>If you squeeze dired into a side bar window, you can now truncate filenames to make them fit to the size of the window, which is a good quality of life improvement.</p>
<pre><code>New user option 'shell-command-guess-functions'.
It defines how to populate a list of commands available
for 'M-!', 'M-&amp;', '!', '&amp;' and the context menu "Open With"
based on marked files in Dired.  Possible backends are
'dired-guess-default', MIME types, XDG configuration
and a universal command such as "open" or "start"
that delegates to the OS.</code></pre>
<p>Emacs has several ways of guessing the right command to run on a filename, and they are annoyingly different and only available in some parts of Emacs and not others. This is a clear attempt to clean up this mess and offer a unified way of picking the right command to run.</p>
<pre><code>New command 'dired-do-open'.
This command is bound to 'E' (mnemonics "External").  Also it can be
used by clicking "Open" in the context menu; it "opens" the marked or
clicked on files according to the OS conventions.  For example, on
systems supporting XDG, this runs 'xdg-open' on the files.</code></pre>
<p>Excellent addition. I used to do <code>!</code> to do this, but now it has its own key.</p>
<pre><code>New variable 'dired-guess-shell-alist-optional'.
It contains commands for external viewers and players for various media
formats, moved to this list from 'dired-guess-shell-alist-default'.</code></pre>
<p>Worth a look if you want Emacs to open your media files in other tools than its defaults.</p>
<pre><code>The default value of 'dired-omit-size-limit' was increased.
After performance improvements to omitting in large directories, the new
default value is 300k, up from 100k.  This means 'dired-omit-mode' will
omit files in directories whose directory listing is up to 300 kilobytes
in size.</code></pre>
<p>Omit mode hides useless files based on regexp filters. Great way to hide backup files, compiler detritus and more. You may have to <code>(require 'dired-x)</code> first.</p>
<pre><code>'dired-listing-switches' handles connection-local values if exist.
This allows you to customize different switches for different remote machines.</code></pre>
<p>This relates to Tramp, Emacs’s remote file editing protocol. Because Tramp sends commands to the remote host, you can now customize how dired should query for files on the remote file system.</p>
<h3 id="ediff">Ediff</h3>
<p>Ediff is another diff tool in Emacs, albeit a far more advanced one. It has a wide range of entrypoints: <code>C-h a ediff</code>.</p>
<pre><code>New user option 'ediff-floating-control-frame'.
If non-nil, try making the control frame be floating rather than tiled.

Many X tiling window managers make the Ediff control frame a tiled
window equal in size to the main Emacs frame, which works poorly.
This option is useful to set if you use such a window manager.</code></pre>
<p>Ediff’s achilles’ heel is its awkward frame that it uses as a control interface; but now it at least grants succor to people who use tiling window managers.</p>
<h3 id="buffer-selection">Buffer Selection</h3>
<p>Buffer selection, not to be confused with <code>C-x b</code>, is one of, ah, several buffer switching tools in Emacs. Try it with <code>M-x bs-show</code>.</p>
<pre><code>New user option 'bs-default-action-list'.
You can now configure how to display the "*buffer-selection*" buffer
using this new option.  (Or set 'display-buffer-alist' directly.)</code></pre>
<h3 id="eshell">Eshell</h3>
<p>Eshell is an Emacs shell written entirely in Emacs. It’s worth <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">Mastering Eshell</a> if you want an all-Emacs command line experience.</p>
<pre><code>You can now run Eshell scripts in batch mode.
By adding the following interpreter directive to an Eshell script, you
can make it executable like other shell scripts:

    #!/usr/bin/env -S emacs --batch -f eshell-batch-file</code></pre>
<p>If you thought someone using korn or c shell wasn’t bad enough, now you can frustrate your coworkers by writing your shell scripts in Eshells’ own zsh-like language.</p>
<pre><code>New builtin Eshell command 'compile'.
This command runs another command, sending its output to a compilation
buffer when the command would output interactively.  This can be useful
when defining aliases so that they produce a compilation buffer when
appropriate, but still allow piping the output elsewhere if desired.
For more information, see the "(eshell) Built-ins" node in the Eshell
manual.</code></pre>
<p>Eshell has a huge range of commands that it exposes to its shell, only to intercept them and pass the input and output to a dedicated Emacs function. See <code>C-u C-h a eshell/</code>.</p>
<pre><code>Eshell's 'env' command now supports running commands.
Like in many other shells, Eshell's 'env' command now lets you run a
command passed as arguments to 'env'.  If you pass any initial
arguments of the form 'VAR=VALUE', 'env' will first set 'VAR' to
'VALUE' before running the command.</code></pre>
<pre><code>Eshell's 'umask' command now supports setting the mask symbolically.
Now, you can pass an argument like "u+w,o-r" to Eshell's 'umask'
command, which will give write permission for owners of newly-created
files and deny read permission for users who are not members of the
file's group.  See the Info node "(coreutils) File permissions" for
more information on this notation.</code></pre>
<pre><code>Performance improvements for interactive output in Eshell.
Interactive output in Eshell should now be significantly faster,
especially for commands that can print large amounts of output
(e.g. "cat").  For external commands, Eshell saves time by only looking
for password prompts in the last 256 characters of each block of output.
To restore the previous behavior when checking for password prompts, set
'eshell-password-prompt-max-length' to 'most-positive-fixnum'.</code></pre>
<pre><code>Eshell built-in commands can now display progress.
Eshell built-in commands like "cat" and "ls" now update the display
periodically while running to show their progress.</code></pre>
<pre><code>New special reference type '#&lt;marker POSITION BUFFER&gt;'.
This special reference type returns a marker at 'POSITION' in
'BUFFER'.  You can insert it by typing or using the new interactive
command 'eshell-insert-marker'.  You can also insert special
references of any type using the new interactive command
'eshell-insert-special-reference'.  See the "(eshell) Arguments" node
in the Eshell manual for more details.</code></pre>
<pre><code>New splice operator for Eshell dollar expansions.
Dollar expansions in Eshell now let you splice the elements of the
expansion in-place using '$@expr'.  This makes it easier to fill lists
of arguments into a command, such as when defining aliases.  For more
information, see the "(eshell) Dollars Expansion" node in the Eshell
manual.</code></pre>
<p>Eshell’s expansion system is inspired by zsh’s, though they’re not at all interchangeable, as Eshell effectively passes things to elisp functions internally, arguments and all, so being able to split, splice and otherwise manipulate how entries are fed to the underlying commands is very important.</p>
<pre><code>You can now splice Eshell globs in-place into argument lists.
By setting 'eshell-glob-splice-results' to a non-nil value, Eshell
will expand glob results in-place as if you had typed each matching
file name individually.  For more information, see the "(eshell)
Globbing" node in the Eshell manual.</code></pre>
<pre><code>Eshell now supports negative numbers and ranges for indices.
Now, you can retrieve the last element of a list with '$my-list[-1]'
or get a sublist of elements 2 through 4 with '$my-list[2..5]'.  For
more information, see the "(eshell) Dollars Expansion" node in the
Eshell manual.</code></pre>
<pre><code>Eshell commands can now be explicitly-remote (or local).
By prefixing a command name in Eshell with a remote identifier, like
"/ssh:user@remote:whoami", you can now run commands on a particular
host no matter your current directory.  Likewise, you can run a
command on your local system no matter your current directory via
"/local:whoami".  For more information, see the "(eshell) Remote Access"
node in the Eshell manual.</code></pre>
<pre><code>Eshell's '$UID' and '$GID' variables are now connection-aware.
Now, when expanding '$UID' or '$GID' in a remote directory, the value
is the user or group ID associated with the remote connection.</code></pre>
<p>One cool feature of Eshell is that you can <code>cd</code> into a remote system using Tramp – for example <code>cd /ssh:homer@powerplant:/etc/</code> – and then operate on the remote machine through Eshell and Tramp as though it were ‘local’. Really powerful, but sometimes there are cracks in the machinery, such as the case of the user and group id environment variables not being correct.</p>
<pre><code>Eshell now uses 'field' properties in its output.
In particular, this means that pressing the '&lt;home&gt;' key moves the
point to the beginning of your input, not the beginning of the whole
line.  If you want to go back to the old behavior, add something like
this to your configuration:

    (keymap-set eshell-mode-map "&lt;home&gt;" #'eshell-bol-ignoring-prompt)

This also means you no longer need to adjust 'eshell-prompt-regexp'
when customizing your Eshell prompt.</code></pre>
<p>I long ago abandoned using <code>C-a</code> and friends to move the beginning of line, preferring <code>M-m</code> instead (as it skips forward past whitespace after moving to the beginning of the line) but this command obviously does not respect the prompt. So if you use <code>M-m</code>, just rebind it to the same key as <code>C-a</code>.</p>
<pre><code>You can now properly unload Eshell.
Calling '(unload-feature 'eshell)' no longer signals an error, and now
correctly unloads Eshell and all of its modules.</code></pre>
<pre><code>'eshell-read-aliases-list' is now an interactive command.
After manually editing 'eshell-aliases-file', you can use this command
to load the edited aliases.</code></pre>
<p>Aliases here referring to the same aliasing you can do in other shells.</p>
<pre><code>'rgrep' is now a builtin Eshell command.
Running 'rgrep' in Eshell now uses the Emacs grep facility instead of
calling external rgrep.</code></pre>
<p><code>M-x rgrep</code> is a command I use all the time when I want more specificity around searching than what a tool like <code>rg</code> gives me. <code>grep</code> already works great in Eshell, so it’s nice to see that <code>rgrep</code> does so too.</p>
<pre><code>If a command exits abnormally, the Eshell prompt now shows its exit code.</code></pre>
<p>I added this to my bash prompt decades ago, as I find it invaluable when I want to compare exit codes in scripts.</p>
<pre><code>New user option 'eshell-history-append'.
If non-nil, each Eshell session will save history by appending new
entries of that session to the history file rather than overwriting
the file with the whole history of the session.  The default is nil.</code></pre>
<h3 id="pcomplete">Pcomplete</h3>
<p>Pcomplete is the completer tool originally built for Eshell, but now has uses elsewhere. It’s a pretty nifty little completion engine, as I demonstrate in <a href="https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs">PComplete: Context-Sensitive Completion in Emacs</a></p>
<pre><code>New user option 'pcomplete-remote-file-ignore'.
When this option is non-nil, remote file names are not completed by
Pcomplete.  Packages, like 'shell-mode', could set this in order to
suppress remote file name completion at all.</code></pre>
<pre><code>Completion for the 'doas' command has been added.
Command completion for 'doas' in Eshell and Shell mode will now work.</code></pre>
<p>The mooted successor to <code>sudo</code>.</p>
<h3 id="shell-mode">Shell mode</h3>
<p>This is the shell I actually use the most day to day. Delightfully dumb and it behaves exactly like a souped-up Emacs buffer. See <a href="https://www.masteringemacs.org/article/running-shells-in-emacs-overview">Running Shells and Terminal Emulators in Emacs</a> if you want to know what all the differences are.</p>
<pre><code>New user option 'shell-get-old-input-include-continuation-lines'.
When this user option is non-nil, 'shell-get-old-input' ('C-RET')
includes multiple shell "\" continuation lines from command output.
Default is nil.</code></pre>
<pre><code>New user option 'shell-history-file-name'.
When this user option is set to t, 'shell-mode' does not read the shell
history file.  Setting this user option to a string specifies the name
of the shell history file to be read.  A nil value triggers reading the
environment variable 'HISTFILE'.

In a 'shell' buffer, this user option is connection-local.</code></pre>
<p>This is a nice change as Emacs will of course keep its own history (see <a href="https://www.masteringemacs.org/article/shell-comint-secrets-history-commands">Shell &amp; Comint Secrets: History commands</a>) but that history does not persist under normal circumstances. If you’re using a non-default history file for your shell and you want Emacs to respect it, now you can.</p>
<pre><code>Performance improvements for interactive output.
Interactive output in Shell mode now scans more selectively for password
prompts by only examining the last 256 characters of each block of
output, reducing the time spent when printing large amounts of output.
To restore the old behavior, set 'comint-password-prompt-max-length' to
'most-positive-fixnum'.</code></pre>
<p>Anything that speeds up comint is a good thing in my book.</p>
<h3 id="prog-mode">Prog mode</h3>
<p>Prog mode is a generic major mode that programming modes should try to inherit from. It is not intended for normal users.</p>
<pre><code>New command 'prog-fill-reindent-defun'.
This command either fills a single paragraph in a defun, such as a
docstring, or a comment, or (re)indents the surrounding defun if point
is not in a comment or a string.  By default, it is bound to 'M-q' in
'prog-mode' and all its descendants.</code></pre>

<p>Imenu is a lookup feature for structured elements in the current buffer, such as function and class names in code, and headings and sub-headings in text.</p>
<pre><code>New user option 'imenu-flatten'.
It controls whether to flatten the list of sections in an imenu, and
how to display the sections in the flattened list.</code></pre>
<p>If you use a completion mechanism that makes accessing nested elements hard in imenu, you can now request that it flattens the hierarchy.</p>
<pre><code>The sort order of Imenu completions can now be customized.
You can customize the user option 'completion-category-overrides'
and set 'display-sort-function' for the category 'imenu'.</code></pre>
<h3 id="which-function-mode">Which Function mode</h3>
<p>Which function shows the current function in the mode line by default. It works anywhere <code>M-x imenu</code> works.</p>
<pre><code>Which Function mode can now display function names on the header line.
The new user option 'which-func-display' allows choosing where the
function name is displayed.  The default is 'mode' to display in the
mode line.  'header' will display in the header line;
'mode-and-header' displays in both the header line and mode line.</code></pre>
<p>The mode line is crowded and often truncated if you split your windows. Having another place to put this information is useful.</p>
<pre><code>New user option 'which-func-update-delay'.
This replaces the user option 'idle-update-delay', which was previously
used to control the delay before 'which-function-mode' updated its
display.  The user option 'idle-update-delay', which was only used by
Which Function mode, is now obsolete.</code></pre>
<h3 id="tramp">Tramp</h3>
<p>Tramp is Emacs’s remote file editing facility.</p>
<pre><code>Tramp methods can be optional.
An optional connection method is not enabled by default.  The user must
enable it explicitly by the 'tramp-enable-method' command.  The existing
methods "fcp", "krlogin", " ksu" and "nc" are optional now.</code></pre>
<pre><code>New optional connection method "androidsu".
This provides access to system files with elevated privileges granted by
the idiosyncratic 'su' implementations and system utilities customary on
Android.</code></pre>
<p>Tramp supports a dizzying array of “connection” methods, including things that aren’t “connections” in the traditional sense, such as <code>sudo</code> and now <code>androidsu</code>.</p>
<pre><code>New optional connection method "run0".
This connection method is similar to "sudo", but it uses the 'systemd'
framework internally.</code></pre>
<pre><code>New connection methods "dockercp" and "podmancp".
These are the external methods counterparts of "docker" and "podman".</code></pre>
<p>Tramp added native docker support a version or two ago, which is super handy for editing or viewing stuff inside a container from the comfort of your own Emacs.</p>
<pre><code>New optional connection methods for containers.
There are new optional connection methods "toolbox", "distrobox",
"flatpak", "apptainer" and "nspawn".  They allow accessing system
containers provided by Toolbox or Distrobox, sandboxes provided by
Flatpak, instances managed by Apptainer, or accessing systemd-based
light-weight containers..</code></pre>
<p>Good to see more support for namespace-based container solutions other than docker.</p>
<pre><code>Connection method "kubernetes" supports now optional container name.
The host name for Kubernetes connections can be of kind [CONTAINER.]POD,
in order to specify a dedicated container.  If there is just the pod
name, the first container in the pod is taken.  The new user options
'tramp-kubernetes-context' and 'tramp-kubernetes-namespace' allow
accessing pods with different context or namespace but the default one.</code></pre>
<p>Tramp can chain connections, so you can connect to a bastion host first before you connect to kubernetes pods.</p>
<pre><code>Rename 'tramp-use-ssh-controlmaster-options' to 'tramp-use-connection-share'.
The old name still exists as obsolete variable alias.  This user
option controls now connection sharing for both ssh-based and
plink-based methods.  It allows the values t, nil, and 'suppress'.
The latter suppresses also "ControlMaster" settings in the user's
"~/.ssh/config" file, or connection share configuration in PuTTY
sessions, respectively.</code></pre>
<p>You absolutely must enable connection sharing (controlmaster) if you use ssh. It makes a huge difference in performance.</p>
<pre><code>New command 'tramp-cleanup-some-buffers'.
It kills only a subset of opened remote buffers, subject to the user
option 'tramp-cleanup-some-buffers-hook'.</code></pre>
<pre><code>New command 'inhibit-remote-files'.
This command disables the handling of file names with the special
remote file name syntax.  It should be applied only when remote files
won't be used in this Emacs instance.  It provides a slightly improved
performance of file name handling in Emacs.</code></pre>
<pre><code>New macro 'without-remote-files'.
This macro could wrap code which handles local files only.  Due to the
temporary deactivation of remote files, it results in a slightly
improved performance of file name handling in Emacs.</code></pre>
<pre><code>New user option 'tramp-completion-multi-hop-methods'.
It contains a list of connection methods for which completion should
be attempted at the end of a multi-hop chain.  This allows completion
candidates to include a list of, for example, containers running on a
remote docker host.</code></pre>
<p>Oh, cool! One common criticism I had of multi-hop/chaining connections is that you really need to know what you’re looking for when you are writing out these multi-hop connections, as the completion support is non-existent. Good to see that Tramp will now attempt to complete via the multi-hop links you have already written. Neat!</p>
<pre><code>New command 'tramp-revert-buffer-with-sudo'.
It reverts the current buffer to visit with "sudo" permissions.  The
buffer must either visit a file, or it must run 'dired-mode'.  Another
method but "sudo" can be configured with user option
'tramp-file-name-with-method'.</code></pre>
<p>I’ve had a snippet of code called <code>sudo</code> that does exactly this for what must be a decade plus now. Now it’s built in, albeit with a harder-to-remember name.</p>
<pre><code>Direct asynchronous processes are indicated by a connection-local variable.
If direct asynchronous processes shall be used, set the connection-local
variable 'tramp-direct-async-process' to a non-nil value.  In previous
Emacs versions this was indicated by the connection property
"direct-async-process".  That connection property (though not connection
properties and 'tramp-connection-properties' in general) is now
deprecated.  See the Tramp manual "(tramp) Improving performance of
asynchronous remote processes".</code></pre>
<p>If you have performance issues with Tramp, you should try this out.</p>
<pre><code>Direct asynchronous processes use 'tramp-remote-path'.
When a direct asynchronous process is invoked, it uses 'tramp-remote-path'
for setting the remote 'PATH' environment variable.</code></pre>
<h3 id="shr">SHR</h3>
<p>SHR is Emacs’s HTML rendering engine that powers EWW, the Emacs Web Wowser.</p>
<pre><code>New user option 'shr-fill-text'.
When 'shr-fill-text' is non-nil (the default), SHR will fill text
according to the width of the window.  If you customize it to nil, SHR
will leave the text as-is; in that case, EWW will automatically enable
'visual-line-mode' when displaying a page so that long lines are
visually wrapped at word boundaries.</code></pre>
<h3 id="eww">EWW</h3>
<p><code>M-x eww</code> is Emacs’s builtin web browser.</p>
<pre><code>New mouse bindings in EWW buffers.
Certain form elements that were displayed as buttons, yet could only be
activated by keyboard input, are now operable using 'mouse-2'.  With
"Submit" buttons, this triggers submission of the form, while clicks on
other classes of buttons either toggle their values or prompt for user
input, as the case may be.</code></pre>
<pre><code>EWW text input fields and areas are now fields.
In consequence, movement commands and OS input method features now
recognize and confine their activities to the text input field around
point.  See also the Info node "(elisp) Fields".</code></pre>
<p>Fields here meaning the widget system that Emacs has built in.</p>
<pre><code>'eww-open-file' can now display the file in a new buffer.
By default, the command reuses the "*eww*" buffer, but if called with
the new argument NEW-BUFFER non-nil, it will use a new buffer instead.
Interactively, invoke 'eww-open-file' with a prefix argument to
activate this behavior.</code></pre>
<pre><code>'eww' URL or keyword prompt now has tab completion.
The interactive minibuffer prompt when invoking 'eww' now has support
for tab completion.</code></pre>
<pre><code>'eww' URL and keyword prompt now completes suggested URIs and bookmarks.
The interactive minibuffer prompt when invoking 'eww' now provides
completions from 'eww-suggest-uris'.  'eww-suggest-uris' now includes
bookmark URIs.</code></pre>
<pre><code>New command 'eww-copy-alternate-url'.
It copies an alternate link on the page currently visited in EWW into
the kill ring.  Alternate links are optional metadata that HTML pages
use for linking to their alternative representations, such as translated
versions or associated RSS feeds.  It is bound to 'A' by default.</code></pre>
<pre><code>'eww-open-in-new-buffer' supports the prefix argument.
When invoked with the prefix argument ('C-u'),
'eww-open-in-new-buffer' will not make the new buffer the current one.
This is useful for continuing reading the URL in the current buffer
when the new URL is fetched.</code></pre>
<pre><code>History navigation in EWW now behaves as in other browsers.
Previously, when navigating back and forward through page history, EWW
would add a duplicate entry to the end of the history list each time.
This made it impossible to navigate to the "end" of the history list.
Now, navigating through history in EWW simply changes your position in
the history list, allowing you to reach the end as expected.  In
addition, when browsing to a new page from a "historical" one (i.e., a
page loaded by navigating back through history), EWW deletes the history
entries newer than the current page.  To change the behavior when
browsing from "historical" pages, you can customize
'eww-before-browse-history-function'.</code></pre>
<pre><code>'eww-readable' now toggles display of the readable parts of a web page.
When called interactively, 'eww-readable' toggles whether to display
only the readable parts of a page or the full page.  With a positive
prefix argument, it always displays the readable parts, and with a zero
or negative prefix, it always displays the full page.</code></pre>
<p>This feature has been around for ages, and it’s great if you want to remove all the chaff from a page. Note that the only real change here is that it toggles.</p>
<pre><code>New user option 'eww-readable-urls'.
This is a list of regular expressions matching the URLs where EWW should
display only the readable parts by default.  For more details, see
"(eww) Basics" in the EWW manual.</code></pre>
<p>Great stuff if you regularly visit pages that require toggling on readable mode.</p>
<pre><code>New user option 'eww-readable-adds-to-history'.
When non-nil (the default), calling 'eww-readable' adds a new entry to
the EWW page history.</code></pre>
<h3 id="go-ts-mode">Go-ts mode</h3>
<p>This is the tree-sitter version for Go.</p>
<pre><code>New command 'go-ts-mode-docstring'.
This command adds a docstring comment to the current defun.  If a
comment already exists, point is only moved to the comment.  It is
bound to 'C-c C-d' in 'go-ts-mode'.</code></pre>
<h3 id="man-mode">Man mode</h3>
<p>Man referring here to the manual page tool <code>man</code>.</p>
<pre><code>New user option 'Man-prefer-synchronous-call'.
When this is non-nil, run the 'man' command synchronously rather than
asynchronously (which is the default behavior).</code></pre>
<pre><code>New user option 'Man-support-remote-systems'.
This option controls whether the man page is formatted on the remote
system when the current buffer's default-directory is remote.  You can
invoke the 'man' command with a prefix argument to countermand the
value of this option for the current invocation of 'man'.</code></pre>
<h3 id="docview">DocView</h3>
<p>DocView is a generic tool for converting complex documents into images for display in Emacs (pdf, docx, etc.)</p>
<pre><code>New user option 'doc-view-mpdf-use-svg'.
If non-nil, DocView uses SVG images to display PDF documents.  The
default is non-nil if your system supports display of SVG images.</code></pre>
<p>Emacs’s SVG engine is quite good nowadays, and it’s definitely better than a raster image of a PDF.</p>
<pre><code>New face 'doc-view-svg-face'.
This replaces 'doc-view-svg-foreground' and 'doc-view-svg-background'.
By default, this face has black foreground on white background and
inherits from the default face.  When unsetting the foreground and
background values, the display in DocView is styled according to the
current theme.  However, this, or any non-standard values, can result in
poor contrast for documents which aren't simply black text on white
background.</code></pre>
<p>If your theme clashes with the colors in SVG files, you can now change them to better suit your theme.</p>
<pre><code>DocView buffers now display a new tool bar.
This tool bar contains options for searching and navigating within the
document, replacing the incompatible items for incremental search and
editing within the default tool bar displayed in the past.</code></pre>
<h3 id="shortdoc">Shortdoc</h3>
<p>Shortdoc is <a href="https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet">Emacs’s Builtin Elisp Cheat Sheet</a>.</p>
<pre><code>New function 'shortdoc-function-examples'.
This function returns examples of use of a given Emacs Lisp function
from the available shortdoc information.</code></pre>
<pre><code>New function 'shortdoc-help-fns-examples-function'.
This function inserts into the current buffer examples of use of a
given Emacs Lisp function, which it gleans from the shortdoc
information.  If you want 'describe-function' ('C-h f') to insert
examples of using the function into regular "*Help*" buffers, add the
following to your init file:

    (add-hook 'help-fns-describe-function-functions
              #'shortdoc-help-fns-examples-function)</code></pre>
<h3 id="package">Package</h3>
<p>Package is the package manager and installer in Emacs.</p>
<pre><code>New user option 'package-vc-register-as-project'.
When non-nil, 'package-vc-install' and 'package-vc-checkout' will
automatically register every package they install as a project, that you
can quickly select using 'project-switch-project' ('C-x p p').  Default
is t.</code></pre>
<p>Oh that is very nice. I will definitely enable this now that <code>package</code> can install from source control using <code>vc</code>.</p>
<pre><code>New user option 'package-vc-allow-build-commands'.
Controls for which packages Emacs runs extra build commands when
installing directly from the package VCS repository.</code></pre>
<pre><code>New command 'package-vc-log-incoming'.
This commands displays incoming changes for a VC package without
modifying the current checkout.</code></pre>
<pre><code>New command to start an inferior Emacs loading only specific packages.
The new command 'package-isolate' will start a new Emacs process, as
a sub-process of Emacs where you invoke the command, in a way that
causes the new process to load only some of the installed packages.
The command prompts for the packages to activate in this
sub-process, and is intended for testing Emacs and/or the packages
in a clean environment.</code></pre>
<p>That’s a really cool addition, and I look forward to using it with my own packages. I normally maintain a separate Emacs installation just for this purpose, but this approach might save me the hassle of having to maintain that.</p>
<h3 id="flymake">Flymake</h3>
<p>Flymake is Emacs’s linter/on-the-fly-compiler interface.</p>
<pre><code>New user option 'flymake-indicator-type'.
This controls which error indicator type Flymake should use in the
current buffer.  Depending on your preference, this can either use
fringes or margins for indicating errors, the default is 'margins'.</code></pre>
<pre><code>New user option 'flymake-margin-indicators-string'.
It controls, for each error type, the string and its face to display as
the margin indicator.</code></pre>
<pre><code>New user option 'flymake-autoresize-margins'.
If non-nil (the default), Flymake will resize the margins when
'flymake-mode' is turned on or off.
Only relevant if 'flymake-indicator-type' is set to 'margins'.</code></pre>
<pre><code>New user option 'flymake-margin-indicator-position'.
It controls whether to use margins for margin indicators, and which
margin (left or right) to use.  Default is to use the left margin.</code></pre>
<pre><code>New user option 'flymake-show-diagnostics-at-end-of-line'.
When non-nil, Flymake shows summarized descriptions of diagnostics at
the end of the line.  Depending on your preference, this can either be
distracting and easily confused with actual code, or a significant
early aid that relieves you from moving the buffer or reaching for the
mouse to consult an error message.  Default is nil.</code></pre>
<p>Worth enabling to see if it is something that helps or hinders. You should consider setting it in a dir locals variable or mode hook so it only applies to some buffers.</p>
<h3 id="flyspell">Flyspell</h3>
<p>Emacs’s on the fly spell checker.</p>
<pre><code>New user option 'flyspell-check-changes'.
When non-nil, Flyspell mode spell-checks only words that you edited; it
does not check unedited words just because you move point across them.
Default is nil.</code></pre>
<h3 id="js-mode">JS mode</h3>
<p>One of a dozen modes that edit Javascript.</p>
<pre><code>The binding 'M-.' has been removed from the major mode keymaps in
'js-mode' and 'js-ts-mode', having it default to the global binding
which calls 'xref-find-definitions'.  If the previous one worked
better for you, use 'define-key' in your init script to bind
'js-find-symbol' to that combination again.</code></pre>
<p>This is just standardizing on the xref interface and its default global keys.</p>
<p>:</p>
<pre><code>'js-json-mode' does not derive from 'js-mode' any more so as not
to confuse tools like Eglot or YASnippet into thinking that those
buffers contain Javascript code.</code></pre>
<h3 id="python-mode">Python mode</h3>
<p>The major mode for editing Python.</p>
<pre><code>New user option 'python-indent-block-paren-deeper'.
If non-nil, increase the indentation of the lines inside parens in a
header of a block when they are indented to the same level as the body
of the block, producing:

    if (some_expression
            and another_expression):
        do_something()

instead of:

    if (some_expression
        and another_expression):
        do_something()

Default is nil.</code></pre>
<p>I long ago stopped worrying about this stuff when code formatting tools became prevalent. Why get angry at your coworkers’ bad code formatting habits when you can direct your anger at a faceless code formatting tool instead?</p>
<pre><code>New user option 'python-interpreter-args'.
This allows the user to specify command line arguments to the non
interactive Python interpreter specified by 'python-interpreter'.</code></pre>
<pre><code>New function 'python-shell-send-block'.
It sends the python block delimited by 'python-nav-beginning-of-block'
and 'python-nav-end-of-block' to the inferior Python process.</code></pre>
<h3 id="inferior-python-mode">Inferior Python mode</h3>
<p>Inferior Python mode refers to the comint version that talks to the external python interpreter.</p>
<pre><code>Default value of 'python-shell-compilation-regexp-alist' is changed.
Support for Python's ExceptionGroup has been added, so in the Python
shell, the line indicating the source of an error in the error messages
from ExceptionGroup will be recognized as well.</code></pre>
<h3 id="eldoc">Eldoc</h3>
<p>Eldoc is a generic documentation popup system.</p>
<pre><code>'eldoc' no longer truncates to a single line by default.
Previously, the entire docstring was not available to eldoc, which made
'eldoc-echo-area-use-multiline-p' ineffective.  The old behavior may be
kept by customizing 'eldoc-echo-area-use-multiline-p'.</code></pre>
<h3 id="scheme-mode">Scheme mode</h3>
<pre><code>Scheme mode now handles the regular expression literal '#/regexp/' that
 is available in some Scheme implementations.
 Also, it should now handle nested sexp-comments.</code></pre>
<h3 id="use-package">Use package</h3>
<p><a href="https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool">use-package is a declarative configuration tool</a>.</p>
<pre><code>New ':vc' keyword.
This keyword enables the user to install packages using package-vc.el.</code></pre>
<p>This is a great addition and it rounds off the ability to manually install packages with VC that arrived in Emacs 29. You can replace a lot of the third-party package managers now if your needs are simple.</p>
<pre><code>New user option 'use-package-vc-prefer-newest'.
If non-nil, always install the newest commit of a package when using the
':vc' keyword rather than its stable release.  Default is nil.</code></pre>
<h3 id="gnus">Gnus</h3>
<p>Gnus is an expansive mail and news agent in Emacs.</p>
<pre><code>New backend 'nnfeed'.
This allows backend developers to easily create new backends for web
feeds, as inheriting backends of 'nnfeed'.</code></pre>
<pre><code>New backend 'nnatom'.
This allow users to add Atom Syndication Format feeds to Gnus as
servers.</code></pre>
<pre><code>The 'nnweb-type' option 'gmane' has been removed.
The gmane.org website is, sadly, down since a number of years with no
prospect of it coming back.  Therefore, it is no longer valid to set
the server variable 'nnweb-type' to 'gmane'.</code></pre>
<pre><code>New user option 'gnus-mode-line-logo'.
This allows the user to either disable the display of any logo or
specify which logo will be displayed as part of the
buffer-identification in the mode-line of Gnus buffers.</code></pre>
<pre><code>'gnus-summary-limit-to-age' now counts days since midnight.
"Less than 1 day" now means "since last midnight", rather than "less
than 24 hours old".</code></pre>
<h3 id="rmail">Rmail</h3>
<p>Rmail is one of many ways of sending and reading email in Emacs.</p>
<pre><code>New commands for reading mailing lists.
The new Rmail commands 'rmail-mailing-list-post',
'rmail-mailing-list-unsubscribe', 'rmail-mailing-list-help', and
'rmail-mailing-list-archive' allow, respectively, posting to,
unsubscribing from, requesting help about, and browsing the archives
of, the mailing list from which the current email message was
delivered.</code></pre>
<h3 id="dictionary">Dictionary</h3>
<p>Dictionary is a lookup system for <a href="https://www.masteringemacs.org/article/wordsmithing-in-emacs">wordsmiths</a>.</p>
<pre><code>New user option 'dictionary-search-interface'.
Controls how the 'dictionary-search' command prompts for and displays
dictionary definitions.  Customize this user option to 'help' to have
'dictionary-search' display definitions in a "*Help*" buffer and
provide dictionary-based minibuffer completion for word selection.
Default is nil, which means to use a "*Dictionary*" buffer.</code></pre>
<pre><code>New user option 'dictionary-read-word-prompt'.
This allows the user to customize the prompt that is used by
'dictionary-search' when asking for a word to search in the
dictionaries.</code></pre>
<pre><code>New user option 'dictionary-display-definition-function'.
This allows the user to customize the way in which 'dictionary-search'
displays word definitions.  If non-nil, this user option should be set
to a function that displays a word definition obtained from a
dictionary server.  The new function
'dictionary-display-definition-in-help-buffer' can be used to display
the definition in a "*Help*" buffer, instead of the default
"*Dictionary*" buffer.</code></pre>
<pre><code>New user option 'dictionary-read-word-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a word to search in the dictionary.  This user option
should be set to a function that lets the user select a word and
returns it as a string.  The new function
'dictionary-completing-read-word' can be used to prompt with
completion based on dictionary matches.</code></pre>
<pre><code>New user option 'dictionary-read-dictionary-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a dictionary to search in.  This user option should be set
to a function that lets the user select a dictionary and returns its
name as a string.  The new function
'dictionary-completing-read-dictionary' can be used to prompt with
completion based on dictionaries that the server supports.</code></pre>
<pre><code>The default value of 'dictionary-tooltip-dictionary' has changed.
The new default value is t, which means use the same dictionary as the
value of 'dictionary-default-dictionary'.  The previous default value
was nil, which effectively disabled 'dictionary-tooltip-mode', even if
the mode was turned on.</code></pre>
<h3 id="pp">Pp</h3>
<p>Pp is the pretty printing functionality for elisp.</p>
<pre><code>New 'pp-default-function' user option replaces 'pp-use-max-width'.
Its default value is 'pp-fill', a new default pretty-printing function,
which tries to obey 'fill-column'.</code></pre>
<pre><code>'pp-to-string' takes an additional PP-FUNCTION argument.
This argument specifies the prettifying algorithm to use.</code></pre>
<pre><code>'pp' and 'pp-to-string' now always include a terminating newline.
In the past they included a terminating newline in most cases but not all.</code></pre>
<h3 id="emacs-lisp-mode">Emacs Lisp mode</h3>
<p>The major mode used to edit elisp code.</p>
<pre><code>'elisp-flymake-byte-compile' is disabled for untrusted files.
For security reasons, this backend can be used only in those files
specified as trusted according to 'trusted-content' and emits an
"untrusted content" warning otherwise.
This fixes CVE-2024-53920.</code></pre>
<pre><code>',@' now has 'prefix' syntax.
Previously, the '@' character, which normally has 'symbol' syntax,
would combine with a following Lisp symbol and interfere with symbol
searching.</code></pre>
<pre><code>'emacs-lisp-docstring-fill-column' now defaults to 72.
It was previously 65.  The new default formats documentation strings to
fit on fewer lines without negatively impacting readability.</code></pre>
<h3 id="cperl-mode">CPerl mode</h3>
<p>One of two Perl modes in Emacs.</p>
<pre><code>Subroutine signatures are now supported.
CPerl mode fontifies subroutine signatures like variable declarations
which makes them visually distinct from subroutine prototypes.</code></pre>
<pre><code>Syntax of Perl up to version 5.40 is supported.
CPerl mode supports the new keywords for exception handling and the
object oriented syntax which were added in Perl 5.36, 5.38 and 5.40.</code></pre>
<pre><code>New user option 'cperl-fontify-trailer'.
This user option takes the values 'perl-code' or 'comment' and treats
text after an "__END__" or "__DATA__" token accordingly.  The default
value of 'perl-code' is useful for trailing POD and for AutoSplit
modules, the value 'comment' makes CPerl mode treat trailers as
comment, like Perl mode does.</code></pre>
<pre><code>New command 'cperl-file-style'.
This command sets the indentation style for the current buffer.  To
change the default style, either use the user option with the same name
or use the command 'cperl-set-style'.</code></pre>
<pre><code>New minor mode 'cperl-extra-paired-delimiters-mode'.
Perl 5.36 and newer allows using more than 200 non-ASCII paired
delimiters for quote-like constructs, e.g. "q«text»".  Use this minor
mode in buffers where this feature is activated.</code></pre>
<pre><code>Commands using the Perl Info manual are obsolete.
The Perl documentation in Info format is no longer distributed with
Perl or on CPAN since more than 10 years.  Perl documentation can be
read with 'cperl-perldoc' instead.</code></pre>
<pre><code>Highlighting trailing whitespace has been removed.
The user option 'cperl-invalid-face' is now obsolete, and does
nothing.  See the user option 'show-trailing-whitespace' instead.</code></pre>
<h3 id="emacs-sessions-desktop">Emacs Sessions (Desktop)</h3>
<p>Desktop saves and restores your Emacs buffers and files between sessions.</p>
<pre><code>Restoring buffers visiting remote files can now time out.
When a buffer is restored which visits a remote file, the restoration
of the session could hang if the remote host is off-line or slow to
respond.  Setting the user option 'remote-file-name-access-timeout' to
a positive number will abandon the attempt to restore such buffers
after a timeout of that many seconds, thus allowing the rest of
desktop restoration to continue.</code></pre>
<p>I have absolutely been caught out by this before, so that is a welcome change indeed.</p>
<h3 id="recentf">Recentf</h3>
<p>Recentf remembers files you have visited and lets you re-visit them quickly.</p>
<pre><code>Checking recent remote files can now time out.
Similarly to buffer restoration by Desktop, 'recentf-mode' checking
of the accessibility of remote files can now time out if
'remote-file-name-access-timeout' is set to a positive number.</code></pre>
<h3 id="image-dired">Image Dired</h3>
<p>One of several ways of displaying images in Emacs.</p>
<pre><code>New user option 'image-dired-thumb-naming'.
You can now configure how thumbnails are named using this option.</code></pre>
<h3 id="ert">ERT</h3>
<p>This is a test runner framework for Emacs, and a rather useful one at that.</p>
<pre><code>New macro 'skip-when' to skip 'ert-deftest' tests.
This can help to avoid some awkward skip conditions.  For example
'(skip-unless (not noninteractive))' can be changed to the easier
to read '(skip-when noninteractive)'.</code></pre>
<pre><code>Syntax highlighting unit testing support.
An ERT extension ('ert-font-lock') now provides support for face
assignment unit testing.  For more information, see the "(ert) Syntax
Highlighting Tests" node in the ERT manual.</code></pre>
<h3 id="socks">Socks</h3>
<p>SOCKS is a proxy-like protocol that, quite frankly, I don’t think I’ve used in decades.</p>
<pre><code>Socks supports version 4a.
The 'socks-server' user option accepts '4a' as a value for its version
field.</code></pre>
<h3 id="edmacro">Edmacro</h3>
<p>This is the major mode for interactively editing keyboard macros.</p>
<pre><code>New command 'edmacro-set-macro-to-region-lines'.
Bound to 'C-c C-r', this command replaces the macro text with the
lines of the region.  If needed, the region is extended to include
whole lines.  If the region ends at the beginning of a line, that last
line is excluded.</code></pre>
<pre><code>New user option 'edmacro-reverse-macro-lines'.
When this is non-nil, the lines of key sequences are displayed with
the most recent line first.  This is can be useful when working with
macros with many lines, such as from 'kmacro-edit-lossage'.</code></pre>
<h3 id="calc">Calc</h3>
<p>This is Emacs’s advanced symbolic computer algebra system.</p>
<pre><code>Calc parses fractions written using U+2044 FRACTION SLASH.
Fractions of the form "123⁄456" are handled as if written "123:456".
Note in particular the difference in behavior from U+2215 DIVISION SLASH
and U+002F SOLIDUS, which result in division rather than a rational
fraction.  In addition, precomposed fraction characters, such as ½
(U+00BD VULGAR FRACTION ONE HALF), are also recognized as rational
fractions.  (They have been recognized since 2004, but it looks like it
was never mentioned in the NEWS, or even the Calc manual.)</code></pre>
<h3 id="ielm">IELM</h3>
<p>IELM is the interactive shell for <a href="https://www.masteringemacs.org/article/evaluating-elisp-emacs">Evaluating Elisp in Emacs</a>.</p>
<pre><code>IELM now remembers input history between sessions.
The new user option 'ielm-history-file-name' is the name of the file
where IELM input history will be saved.  Customize it to nil to revert
to the old behavior of not remembering input history between sessions.</code></pre>
<h3 id="easypg">EasyPG</h3>
<p>EasyPG is a wrapper for GnuPG and friends. See <a href="https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources">Keeping Secrets in Emacs with GnuPG and Auth Sources</a>.</p>
<pre><code>New user option 'epa-keys-select-method'.
This allows the user to customize the key selection method, which can be
either by using a pop-up buffer or from the minibuffer.  The pop-up
buffer method is the default, which preserves previous behavior.</code></pre>
<h3 id="widget">Widget</h3>
<p>This is the internal library used by Emacs for buttons, edit fields, etc. in places like the Customize interface.</p>
<pre><code>New face 'widget-unselected'.
Customize this face to a non-default value to visually distinguish the
labels of unselected active radio-button or checkbox widgets from the
labels of unselected inactive widgets (the default value inherits from
the 'widget-inactive' face).</code></pre>
<pre><code>New user option 'widget-skip-inactive'.
If non-nil, moving point forward or backward between widgets by typing
'TAB' or 'S-TAB' skips over inactive widgets.  The default value is nil.</code></pre>
<h3 id="ruby-mode">Ruby mode</h3>
<p>Programming mode for Ruby.</p>
<pre><code>New user option 'ruby-rubocop-use-bundler'.
By default it retains the previous behavior: read the contents of
Gemfile and act accordingly.  But you can also set it to t or nil to
skip checking the Gemfile.</code></pre>
<pre><code>New user option 'ruby-bracketed-args-indent'.
When it is set to nil, multiple consecutive open braces/brackets/parens
result in only one additional indentation level.  Default is t.</code></pre>
<h3 id="thingatpt">Thingatpt</h3>
<p>A framework for plucking the thing at point: words, functions, emails, urls, you name it. A useful thing to learn about and use, as it has a wide range of applications.</p>
<pre><code>New variables for providing custom thingatpt implementations.
The new variables 'bounds-of-thing-at-point-provider-alist' and
'forward-thing-provider-alist' now allow defining custom implementations
of 'bounds-of-thing-at-point' and 'forward-thing', respectively.</code></pre>
<pre><code>New helper functions for text property-based thingatpt providers.
The new helper functions 'thing-at-point-for-char-property',
'bounds-of-thing-at-point-for-char-property', and
'forward-thing-for-char-property' can help to implement custom thingatpt
providers for "things" that are defined by text properties.</code></pre>
<pre><code>'bug-reference-mode' now supports 'thing-at-point'.
Now, calling '(thing-at-point 'url)' when point is on a bug reference
will return the URL for that bug.</code></pre>
<p>Bug reference mode is a small minor mode that makes ‘bug references’ (such as #2823) clickable.</p>

<p>Yet another buffer selection and display system in Emacs.</p>
<pre><code>New user option 'Buffer-menu-group-by'.
It controls how buffers are divided into groups that are displayed with
headings using Outline minor mode.  Using commands that mark buffers
on the outline heading line will mark all buffers in the outline.  By
default, no grouping is performed.</code></pre>
<pre><code>New command 'Buffer-menu-toggle-internal'.
This command toggles the display of internal buffers in Buffer Menu mode;
that is, buffers not visiting a file and whose names start with a space.
Previously, such buffers were never shown.  This command is bound to 'I'
in Buffer Menu mode.</code></pre>
<h3 id="miscellaneous-1">Miscellaneous</h3>
<pre><code>New user option 'rcirc-log-time-format'.
This allows for rcirc logs to use a custom timestamp format, which the
chat buffers use by default.</code></pre>
<p>RCIRC is one of two IRC clients in Emacs, the other being ERC.</p>
<pre><code>'ffap-lax-url' now defaults to nil.
Previously, it was set to t, but this broke remote file name detection.</code></pre>
<p>FFAP is Find File At Point is a system for plucking the file at point and opening it.</p>
<pre><code>More control on automatic update of Proced buffers.
The user option 'proced-auto-update-flag' can now be set to an
additional value 'visible', which controls automatic updates of Proced
buffers that are displayed in some window.</code></pre>
<p>Proced’s basically Emacs’s answer to <code>top</code>. See <a href="https://www.masteringemacs.org/article/displaying-interacting-processes-proced">Displaying and Interacting with processes using Proced</a>.</p>
<pre><code>nXML Mode now comes with schemas for Mono/.NET development.
The following new XML schemas are now supported:
- MSBuild project files
- Dotnet package properties files
- Dotnet resource extension files
- Dotnet Application config files
- Nuget config file
- Nuget package specification file
- Nuget packages config file</code></pre>
<pre><code>color.el now supports the Oklab color representation.</code></pre>
<p>The color file has a large range of advanced color conversion routines. Worth a look if that is something you interact with a lot.</p>
<pre><code>New user option 'xwidget-webkit-disable-javascript'.
This allows disabling JavaScript in xwidget Webkit sessions.</code></pre>
<p>XWidget is a half-abandoned, half-working attempt at bringing the Webkit browser to Emacs.</p>
<pre><code>'ls-lisp--insert-directory' supports more long options of 'ls'.
'ls-lisp--insert-directory', the ls-lisp implementation of
'insert-directory', now supports the '--time=TIME' and '--sort=time'
options of GNU 'ls'.</code></pre>
<p>How does dired work on platforms (such as MS-DOS or Windows) where there is no <code>ls</code> program? The answer is simple: Emacs has an elisp emulation layer that talks to the underlying system directly.</p>
<pre><code>'M-x ping' can now give additional flags to the 'ping' program.
Typing 'C-u M-x ping' prompts first for the host, and then for the flags
to give to the 'ping' command.</code></pre>
<p>There is a host of network utility wrappers in Emacs. See <a href="https://www.masteringemacs.org/article/network-utilities-emacs">Using the commandline network utilities from Emacs</a>.</p>
<pre><code>Webjump now assumes URIs are HTTPS instead of HTTP.
For links in 'webjump-sites' without an explicit URI scheme, it was
previously assumed that they should be prefixed with "http://".  Such
URIs are now prefixed with "https://" instead.</code></pre>
<p>Another obscure feature in Emacs. Here it’s a flat list of common URLs and a command to select and then open one of them. The fact that “Yahoo” is still in there says it all.</p>
<pre><code>Added prefixes in titdic-cnv library.
Most of the variables and functions in the file have been renamed to
make sure they all use a 'tit-' namespace prefix.</code></pre>
<p>Obscure library for working with Quail, a format used in multilingual systems.</p>
<pre><code>'xref-revert-buffer' is now an alias of 'revert-buffer'.
The Xref buffer now sets up 'revert-buffer-function' such that
'revert-buffer' behaves like 'xref-revert-buffer' did in previous Emacs
versions, and the latter is now an alias of the former.</code></pre>
<p>Xref is Emacs’s cross-referencing system, and all this change does is make it so <code>M-x revert-buffer</code> (which I have a version of that reverts the current buffer bound to <code>F6</code>) reverts properly in xref buffers also.</p>
<pre><code>The Makefile browser is now obsolete.
The command 'makefile-switch-to-browser' command is now obsolete,
together with related commands used in the "*Macros and Targets*"
buffer.  We recommend using an alternative like 'imenu' instead.</code></pre>
<pre><code>'jsonrpc-default-request-timeout' is now a defcustom.</code></pre>
<h2 id="new-modes-and-packages-in-emacs-30.1">New Modes and Packages in Emacs 30.1</h2>
<h3 id="new-major-modes-based-on-the-tree-sitter-library">New major modes based on the tree-sitter library</h3>
<pre><code>New major mode 'elixir-ts-mode'.
A major mode based on the tree-sitter library for editing Elixir files.</code></pre>
<pre><code>New major mode 'heex-ts-mode'.
A major mode based on the tree-sitter library for editing HEEx files.</code></pre>
<pre><code>New major mode 'html-ts-mode'.
An optional major mode based on the tree-sitter library for editing
HTML files.</code></pre>
<pre><code>New major mode 'lua-ts-mode'.
A major mode based on the tree-sitter library for editing Lua files.</code></pre>
<pre><code>New major mode 'php-ts-mode'.
A major mode based on the tree-sitter library for editing PHP files.</code></pre>
<p>Good to see more tree-sitter major modes.</p>
<pre><code>New package EditorConfig.
This package provides support for the EditorConfig standard,
an editor-neutral way to provide directory local (project-wide) settings.
It is enabled via a new global minor mode 'editorconfig-mode'
which makes Emacs obey the '.editorconfig' files.
There is also a new major mode 'editorconfig-conf-mode'
to edit those configuration files.</code></pre>
<p>Long overdue, even if I find the capabilities of editorconfig rather basic.</p>
<pre><code>New global minor mode 'etags-regen-mode'.
This minor mode generates the tags table automatically based on the
current project configuration, and later updates it as you edit the
files and save the changes.</code></pre>
<pre><code>New package 'which-key'.
The 'which-key' package from GNU ELPA is now included in Emacs.  It
implements the global minor mode 'which-key-mode' that displays a table
of key bindings upon entering a partial key chord and waiting for a
moment.  For example, after enabling the minor mode, if you enter 'C-x'
and wait for one second, the minibuffer will expand with all available
key bindings that follow 'C-x' (or as many as space allows).</code></pre>
<p>This is a long-awaited inclusion for some people. Which-key pops up a list of key bindings if you partially type a key and a wait a little while.</p>
<pre><code>New minor mode 'completion-preview-mode'.
This minor mode shows you symbol completion suggestions as you type,
using an inline preview.  New user options in the 'completion-preview'
customization group control exactly when Emacs displays this preview.
'completion-preview-mode' is buffer-local, to enable it globally use
'global-completion-preview-mode'.</code></pre>
<p>Buried in the foot of the NEWS file is one of the best new additions in Emacs. A window-based answer to Company / Corfu, with a host of really nice ergonomic features. I really, really recommend you disable your in-line completer (corfu, company, auto-complete, whatever) and give this one a try for a little while.</p>
<pre><code>New package Window-Tool-Bar.
This provides a new minor mode, 'window-tool-bar-mode'.  When this minor
mode is enabled, a tool bar is displayed at the top of a window.  To
conserve space, no tool bar is shown if 'tool-bar-map' is nil.  The
global minor mode 'global-window-tool-bar-mode' enables this minor mode
in all buffers.</code></pre>
<p>A compromise for people who want the toolbar but only when it has something interesting to offer.</p>
<pre><code>New library Track-Changes.
This library is a layer of abstraction above 'before-change-functions'
and 'after-change-functions' which provides a superset of
the functionality of 'after-change-functions':
- It provides the actual previous text rather than only its length.
- It takes care of accumulating and bundling changes until a time when
  its client finds it convenient to react to them.
- It detects most cases where some changes were not properly
  reported (calls to 'before/after-change-functions' that are
  incorrectly paired, missing, etc...) and reports them adequately.</code></pre>
<p>Building this sort of thing is surprisingly tricky, as the text above briefly alludes to. It does not seem to be used in many places yet, but I foresee that it will play an important role in tools that want to provide in-buffer tracking of changes without the tears of having to build all this infrastructure from scratch. I especially like the feature that it collects the changes until such a time that the client deems it needs them; very useful, and hard to do well with nothing more than a set of before/after change hooks.</p>
<pre><code>New global minor mode 'minibuffer-regexp-mode'.
This is a minor mode for editing regular expressions in the minibuffer,
for example in 'query-replace-regexp'.  It correctly highlights parens
via 'show-paren-mode' and 'blink-matching-paren' in a user-friendly way,
avoids reporting alleged paren mismatches and makes sexp navigation more
intuitive.  It is enabled by default, 'minibuffer-regexp-prompts' can be
used to tune when it takes effect.</code></pre>
<p>Excellent feature that is enabled by default, so no need to do anything.</p>
<pre><code>The highly accessible Modus themes collection has eight items.
The 'modus-operandi' and 'modus-vivendi' are the main themes that have
been part of Emacs since version 28.  The former is light, the latter
dark.  In addition to these, we now have 'modus-operandi-tinted' and
'modus-vivendi-tinted' for easier legibility, as well as
'modus-operandi-deuteranopia', 'modus-vivendi-deuteranopia',
'modus-operandi-tritanopia', and 'modus-vivendi-tritanopia' to cover
the needs of users with red-green or blue-yellow color deficiency.
The Info manual "(modus-themes) Top" describes the details and
showcases all their user options.</code></pre>
<p>A popular set of themes beloved by many.</p>
<h3 id="new-library-peg">New library PEG</h3>
<pre><code>Emacs now includes a library for writing Parsing Expression
Grammars (PEG), an approach to text parsing that provides more structure
than regular expressions, but less complexity than context-free
grammars.  The Info manual "(elisp) Parsing Expression Grammars" has
documentation and examples.</code></pre>
<p>Interesting inclusion and I am curious to see it in use. Emacs already has parsing tools already (Semantic Bovinator being one such example) so I guess this will find a home in Org mode as it has a range of custom query languages.</p>
<pre><code>New major mode 'shell-command-mode'.
This mode is used by default for the output of asynchronous 'shell-command'.
To revert to the previous behavior, set the (also new) variable
'async-shell-command-mode' to 'shell-mode'.  Any hooks or mode-specific
variables used should be adapted appropriately.</code></pre>
<pre><code>New package Compat.
Emacs now comes with a stub implementation of the
forwards-compatibility Compat package from GNU ELPA.  This allows
built-in packages to use the library more effectively, and helps
preventing the installation of Compat if unnecessary.</code></pre>
<p>Compat provides backwards and forwards compatible changes for package authors so they can target older versions of Emacs, and keep older packages working in newer ones, too.</p>
<h3 id="incompatible-lisp-changes-in-emacs-30.1">Incompatible Lisp Changes in Emacs 30.1</h3>
<pre><code>Evaluating a 'lambda' returns an object of type 'interpreted-function'.
Instead of representing interpreted functions as lists that start with
either 'lambda' or 'closure', Emacs now represents them as objects
of their own 'interpreted-function' type, which is very similar
to 'byte-code-function' objects (the argument list, docstring, and
interactive forms are placed in the same slots).
Lists that start with 'lambda' are now used only for non-evaluated
functions (in other words, for source code), but for backward compatibility
reasons, 'functionp' still recognizes them as functions and you can
still call them as before.
Thus code that attempts to "dig" into the internal structure of an
interpreted function's object with the likes of 'car' or 'cdr' will
no longer work and will need to use 'aref' instead to extract its
various subparts (when 'interactive-form', 'documentation', and
'help-function-arglist' aren't adequate).</code></pre>
<p>The heart of this is that in Lisp, code and data are the same, and when Emacs emits a readable form of a lambda or closure you just created, it does so in a way that looks like a list. In older Emacsen, you could write <code>(car (lambda))</code> and it’d spit out <code>closure</code> (provided <code>lexical-binding</code> is enabled), and now you cannot do this; it’s not a list any more.</p>
<p>It’s very unlikely this will affect you in any way.</p>
<pre><code>The escape sequence '\x' not followed by hex digits is now an error.
Previously, '\x' without at least one hex digit denoted character code
zero (NUL) but as this was neither intended nor documented or even
known by anyone, it is now treated as an error by the Lisp reader.</code></pre>
<pre><code>'subr-native-elisp-p' is renamed to 'native-comp-function-p'.
The previous name still exists but is marked as obsolete.</code></pre>
<pre><code>'define-globalized-minor-mode' requires that modes use 'run-mode-hooks'.
Minor modes defined with 'define-globalized-minor-mode', such as
'global-font-lock-mode', will not be enabled any more in those buffers
whose major modes fail to use 'run-mode-hooks'.  Major modes defined
with 'define-derived-mode' are not affected.  'run-mode-hooks' has been the
recommended way to run major mode hooks since Emacs 22.</code></pre>
<pre><code>'buffer-match-p' and 'match-buffers' take '&amp;rest ARGS'.
They used to take a single '&amp;optional ARG' and were documented to use
an unreliable hack to try and support condition predicates that
don't accept this optional ARG.
The new semantics makes no such accommodation, but the code still
supports it (with a warning) for backward compatibility.</code></pre>
<pre><code>'post-gc-hook' runs after updating 'gcs-done' and 'gc-elapsed'.</code></pre>
<pre><code>Connection-local variables are applied in buffers visiting remote files.
This overrides possible directory-local or file-local variables with
the same name.</code></pre>
<pre><code>'copy-tree' now copies records when its optional 2nd argument is non-nil.</code></pre>
<pre><code>Regexp zero-width assertions followed by operators are better defined.
Previously, regexps such as "xy\\B*" would have ill-defined behavior.
Now any operator following a zero-width assertion applies to that
assertion only (which is useless).  For historical compatibility, an
operator character following '^' or '\`' becomes literal, but we
advise against relying on this.</code></pre>
<pre><code>Infinities and NaNs no longer act as symbols on non-IEEE platforms.
On old platforms like the VAX that do not support IEEE floating-point,
tokens like '0.0e+NaN' and '1.0e+INF' are no longer read as symbols.
Instead, the Lisp reader approximates an infinity with the nearest
finite value, and a NaN with some other non-numeric object that
provokes an error if used numerically.</code></pre>
<pre><code>Conversion of strings to and from byte-arrays works with multibyte strings.
The functions 'dbus-string-to-byte-array' and
'dbus-byte-array-to-string' now accept and return multibyte Lisp
strings, encoding to UTF-8 and decoding from UTF-8 internally.  This
means that the argument to 'dbus-byte-array-to-string' must be a valid
UTF-8 byte sequence, and the optional parameter MULTIBYTE of
'dbus-byte-array-to-string' is now obsolete and unused.  The argument of
'dbus-string-to-byte-array' should be a regular Lisp string, not a
unibyte string.</code></pre>
<pre><code>'minibuffer-allow-text-properties' now can be set buffer-local.
'read-from-minibuffer' and functions that use it can take the
buffer-local value from the minibuffer.</code></pre>
<pre><code>'minibuffer-allow-text-properties' now also affects completions.
When it has a non-nil value, then completion functions like
'completing-read' don't discard text properties from the returned
completion candidate.</code></pre>
<pre><code>X color support compatibility aliases are now obsolete.
The compatibility aliases 'x-defined-colors', 'x-color-defined-p',
'x-color-values', and 'x-display-color-p' are now obsolete.</code></pre>
<pre><code>'easy-mmode-define-{minor,global}-mode' aliases are now obsolete.
Use 'define-minor-mode' and 'define-globalized-minor-mode' instead.</code></pre>
<pre><code>The 'millisec' argument of 'sleep-for' is now obsolete.
Use a float value for the first argument instead.</code></pre>
<pre><code>User options 'eshell-NAME-unload-hook' are now obsolete.
These hooks were named incorrectly, and so they never actually ran
when unloading the corresponding feature.  Instead, you should use
hooks named after the feature name, like 'esh-mode-unload-hook'.</code></pre>
<pre><code>User options 'eshell-process-wait-{seconds,milliseconds}' are now obsolete.
Instead, use 'eshell-process-wait-time', which supports floating-point
values.</code></pre>
<pre><code>User option 'tramp-completion-reread-directory-timeout' has been removed.
This user option was obsoleted in Emacs 27, use
'remote-file-name-inhibit-cache' instead.</code></pre>
<pre><code>The obsolete calling convention of 'sit-for' has been removed.
That convention was: '(sit-for SECONDS MILLISEC &amp;optional NODISP)'.</code></pre>
<pre><code>'defadvice' is marked as obsolete.
See the "(elisp) Porting Old Advice" Info node for help converting
them to use 'advice-add' or 'define-advice' instead.</code></pre>
<p>Emacs added a new advice system many versions ago; it’s better, and I should get around to removing the old advice forms…</p>
<pre><code>'cl-old-struct-compat-mode' is marked as obsolete.
You may need to recompile your code if it was compiled with Emacs &lt; 24.3.</code></pre>
<pre><code>Old derived.el functions removed.
The following functions have been deleted because they were only used
by code compiled with Emacs &lt; 21:
'derived-mode-init-mode-variables', 'derived-mode-merge-abbrev-tables',
'derived-mode-merge-keymaps', 'derived-mode-merge-syntax-tables',
'derived-mode-run-hooks', 'derived-mode-set-abbrev-table',
'derived-mode-set-keymap', 'derived-mode-set-syntax-table',
'derived-mode-setup-function-name'.

</code></pre>
<h3 id="lisp-changes-in-emacs-30.1">Lisp Changes in Emacs 30.1</h3>
<pre><code>The 'wheel-up/down/left/right' events are now bound unconditionally.
The 'mouse-wheel-up/down/left/right-event' variables are thus used only
to specify the 'mouse-4/5/6/7' events that might still happen to be
generated by some old packages (or if 'mouse-wheel-buttons' has been set
to nil).</code></pre>
<pre><code>Xterm Mouse mode now emits 'wheel-up/down/right/left' events.
This is instead of 'mouse-4/5/6/7' events for the mouse wheel.  It uses
the new variable 'mouse-wheel-buttons' to decide which button maps to
which wheel event (if any).</code></pre>
<pre><code>In batch mode, tracing now sends the trace to stdout.</code></pre>
<pre><code>New hook 'hack-dir-local-get-variables-functions'.
This can be used to provide support for other directory-local settings
beside ".dir-locals.el".</code></pre>
<pre><code>'auto-coding-functions' can know the name of the file.
The functions on this hook can now find the name of the file to
which the text belongs by consulting the variable 'auto-coding-file-name'.</code></pre>
<pre><code>New user option 'compilation-safety' to control safety of native code.
It is now possible to control how safe is the code generated by native
compilation, by customizing this user option.  It is also possible to
control this at function granularity by using the new 'safety' parameter
in the function's 'declare' form.</code></pre>
<pre><code>New types 'closure' and 'interpreted-function'.
'interpreted-function' is the new type used for interpreted functions,
and 'closure' is the common parent type of 'interpreted-function'
and 'byte-code-function'.

Those new types come with the associated new predicates 'closurep' and
'interpreted-function-p' as well as a new constructor
'make-interpreted-closure'.</code></pre>
<pre><code>New function 'help-fns-function-name'.
For named functions, it just returns the name and otherwise
it returns a short "unique" string that identifies the function.
In either case, the string is propertized so clicking on it gives
further details.</code></pre>
<pre><code>New function 'char-to-name'.
This is a convenience function to return the Unicode name of a char (if
it has one).</code></pre>
<pre><code>New function 'cl-type-of'.
This function is like 'type-of' except that it sometimes returns
a more precise type.  For example, for nil and t it returns 'null'
and 'boolean' respectively, instead of just 'symbol'.</code></pre>
<pre><code>New functions 'primitive-function-p' and 'cl-functionp'.
'primitive-function-p' is like 'subr-primitive-p' except that it returns
t only if the argument is a function rather than a special-form,
and 'cl-functionp' is like 'functionp' except it returns nil
for lists and symbols.</code></pre>
<pre><code>Built-in types now have corresponding classes.
At the Lisp level, this means that things like '(cl-find-class 'integer)'
will now return a class object, and at the UI level it means that
things like 'C-h o integer RET' will show some information about that type.</code></pre>
<pre><code>New variable 'major-mode-remap-defaults' and function 'major-mode-remap'.
The first is like Emacs-29's 'major-mode-remap-alist' but to be set by
packages (instead of users).  The second looks up those two variables.</code></pre>
<p>Yet more complexity around how to remap major modes to accommodate tree-sitter major modes.</p>
<pre><code>Pcase's functions (in 'pred' and 'app') can specify the argument position.
For example, instead of '(pred (&lt; 5))' you can write '(pred (&gt; _ 5))'.</code></pre>
<p>Ah good. I always found it odd that it would bind to the left-most argument, but now I can specify which one I want.</p>
<pre><code>'define-advice' now sets the new advice's 'name' property to NAME.
Named advices defined with 'define-advice' can now be removed with
'(advice-remove SYMBOL NAME)' in addition to '(advice-remove SYMBOL
SYMBOL@NAME)'.</code></pre>
<pre><code>New function 'require-with-check' to detect new versions shadowing.
This is like 'require', but it checks whether the argument 'feature'
is already loaded, in which case it either signals an error or
forcibly reloads the file that defines the feature.</code></pre>
<pre><code>New variable 'lisp-eval-depth-reserve'.
It puts a limit to the amount by which Emacs can temporarily increase
'max-lisp-eval-depth' when handling signals.</code></pre>
<pre><code>New special form 'handler-bind'.
It provides a functionality similar to 'condition-case' except it runs
the handler code without unwinding the stack, such that we can record
the backtrace and other dynamic state at the point of the error.  See
the Info node "(elisp) Handling Errors".</code></pre>
<pre><code>New text properties add tooltips on fringes.
It is now possible to provide tooltips on fringes by adding special text
properties 'left-fringe-help' and 'right-fringe-help'.  See the "(elisp)
Special Properties" Info node in the Emacs Lisp Reference Manual for
more details.</code></pre>
<pre><code>New 'display-buffer' action alist entry 'pop-up-frames'.
This has the same effect as the variable of the same name and takes
precedence over the variable when present.</code></pre>
<pre><code>New function 'merge-ordered-lists'.
Mostly used internally to do a kind of topological sort of
inheritance hierarchies.</code></pre>
<pre><code>'drop' is now an alias for the function 'nthcdr'.</code></pre>
<pre><code>New polymorphic comparison function 'value&lt;'.
This function returns non-nil if the first argument is less than the
second.  It works for any two values of the same type with reasonable
ordering for numbers, strings, symbols, bool-vectors, markers, buffers
and processes.  Conses, lists, vectors and records are ordered
lexicographically.
It is intended as a convenient ordering predicate for sorting, and is
likely to be faster than hand-written Lisp functions.</code></pre>
<p>Ah that is very useful actually. Now to remember that it exists…</p>
<pre><code>New 'sort' arguments and features.
The 'sort' function can now be called using the signature

    (sort SEQ &amp;rest KEYWORD-ARGUMENTS)

where arguments after the first are keyword/value pairs, all optional:
':key' specifies a function that produces the sorting key from an element,
':lessp' specifies the ordering predicate, defaulting to 'value&lt;',
':reverse' is used to reverse the sorting order,
':in-place' is used for in-place sorting, as the default is now to
sort a copy of the input.

The new signature is less error-prone and reduces the need to write
ordering predicates by hand.  We recommend that you use the ':key'
argument instead of ':lessp' unless a suitable ordering predicate is
already available.  This can also be used for multi-key sorting:

    (sort seq :key (lambda (x) (list (age x) (size x) (cost x))))

sorts by the return value of 'age', then by 'size', then by 'cost'.

The old signature, '(sort SEQ PREDICATE)', can still be used and sorts
its input in-place as before.</code></pre>
<pre><code>New API for 'derived-mode-p' and control of the graph of major modes</code></pre>
<pre><code>'derived-mode-p' now takes the list of modes as a single argument.
The same holds for 'provided-mode-derived-p'.
The old calling convention where multiple modes are passed as
separate arguments is deprecated.</code></pre>
<pre><code>New functions to access the graph of major modes.
While 'define-derived-mode' still only supports single inheritance,
modes can declare additional parents (for tests like 'derived-mode-p')
with 'derived-mode-add-parents'.
Accessing the 'derived-mode-parent' property directly is now
deprecated in favor of the new functions 'derived-mode-set-parent'
and 'derived-mode-all-parents'.</code></pre>
<p>This complexity is yet again borne out of tree-sitter’s introduction to Emacs. I do wonder if all this complexity (remember diamond pattern inheritance in OO?) will come back to bite us in a few years… I hope not.</p>
<pre><code>Drag-and-drop functions can now be called once for compound drops.
It is now possible for drag-and-drop handler functions to respond to
drops incorporating more than one URL.  Functions capable of this must
set their 'dnd-multiple-handler' symbol properties to a non-nil value.
See the Info node "(elisp) Drag and Drop".

The function 'dnd-handle-one-url' has been made obsolete, since it
cannot take these new handlers into account.</code></pre>
<pre><code>'notifications-notify' can use Icon Naming Specification for ':app-icon'.
You can use a symbol as the value for ':app-icon' to provide icon name
without specifying a file, like this:

    (notifications-notify
      :title "I am playing music" :app-icon 'multimedia-player)</code></pre>
<pre><code>New function 're-disassemble' to see the innards of a regexp.
If you built Emacs with '--enable-checking', you can use this to help
debug either your regexp performance problems or the regexp engine.</code></pre>
<pre><code>XLFDs are no longer restricted to 255 characters.
'font-xlfd-name' now returns an XLFD even if it is greater than 255
characters in length, provided that the LONG_XLFDs argument is true.
Other features in Emacs which employ XLFDs have been modified to
produce and understand XLFDs larger than 255 characters.</code></pre>
<pre><code>New macro 'static-if' for conditional evaluation of code.
This macro hides a form from the evaluator or byte-compiler based on a
compile-time condition.  This is handy for avoiding byte-compilation
warnings about code that will never actually run under some conditions.</code></pre>
<pre><code>Desktop notifications are now supported on the Haiku operating system.
The new function 'haiku-notifications-notify' provides a subset of the
capabilities of the 'notifications-notify' function in a manner
analogous to 'w32-notification-notify'.</code></pre>
<pre><code>New Haiku specific variable 'haiku-pass-control-tab-to-system'.
This sets whether Emacs should pass 'C-TAB' on to the system instead of
handling it, fixing a problem where window switching would not activate
if an Emacs frame had focus on the Haiku operating system.  Default
value is t.</code></pre>
<pre><code>New value 'if-regular' for the REPLACE argument to 'insert-file-contents'.
It results in 'insert-file-contents' erasing the buffer instead of
preserving markers if the file being inserted is not a regular file,
rather than signaling an error.</code></pre>
<pre><code>New variable 'current-key-remap-sequence'.
It is bound to the key sequence that caused a call to a function bound
within 'function-key-map' or 'input-decode-map' around those calls.</code></pre>
<pre><code>The function 'key-translate' can now remove translations.
If the second argument TO is nil, the existing key translation is
removed.</code></pre>
<pre><code>New variables describing the names of built in programs.
The new variables 'ctags-program-name', 'ebrowse-program-name',
'etags-program-name', 'hexl-program-name', 'emacsclient-program-name'
'movemail-program-name', and 'rcs2log-program-name' should be used
instead of "ctags", "ebrowse", "etags", "hexl", "emacsclient", and
"rcs2log", when starting one of these built in programs in a subprocess.</code></pre>
<pre><code>New variable 'case-symbols-as-words' affects case operations for symbols.
If non-nil, then case operations such as 'upcase-initials' or
'replace-match' (with nil FIXEDCASE) will treat the entire symbol name
as a single word.  This is useful for programming languages and styles
where only the first letter of a symbol's name is ever capitalized.
The default value of this variable is nil.</code></pre>
<pre><code>Bytecode is now always loaded eagerly.
Bytecode compiled with older Emacs versions for lazy loading using
'byte-compile-dynamic' is now loaded all at once.
As a consequence, 'fetch-bytecode' has no use, does nothing, and is
now obsolete.  The variable 'byte-compile-dynamic' has no effect any
more; compilation will always yield bytecode for eager loading.</code></pre>
<pre><code>Returned strings from functions and macros are never docstrings.
Functions and macros whose bodies consist of a single string literal now
only return that string, and will not use it as a docstring.  Example:

    (defun sing-a-song ()
      "Sing a song.")

The above function returns the string "Sing a song." and has no
docstring.  Previously, that string was used as both the docstring and
return value, which was never what the programmer wanted.  If you want
the string to be a docstring, add an explicit return value.

This change applies to 'defun', 'defsubst', 'defmacro' and 'lambda'
forms; other defining forms such as 'cl-defun' already worked this way.</code></pre>
<h3 id="new-or-changed-byte-compilation-warnings">New or changed byte-compilation warnings</h3>
<pre><code>Warn about missing 'lexical-binding' directive.
The compiler now warns if an Elisp file lacks the standard
'-*- lexical-binding: ... -*-' cookie on the first line.
This line typically looks something like

    ;;; My little pony mode  -*- lexical-binding: t -*-

It is needed to inform the compiler about which dialect of ELisp
your code is using: the modern dialect with lexical binding or
the old dialect with only dynamic binding.

Lexical binding avoids some name conflicts and allows the compiler to
detect more mistakes and generate more efficient code, so it is
recommended.  For how to adapt your code to lexical binding, see the
manual section "(elisp) Converting to Lexical Binding".

If your code cannot be converted to lexical binding, you can insert
the line

    ;;; -*- lexical-binding: nil -*-

first in the file to declare that it uses the old dialect.</code></pre>
<pre><code>Warn about empty bodies for more special forms and macros.
The compiler now warns about an empty body argument to 'when',
'unless', 'ignore-error' and 'with-suppressed-warnings' in addition to
the existing warnings for 'let' and 'let*'.  Example:

    (when (&gt; x 2))

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'empty-body'.</code></pre>
<pre><code>Warn about quoted error names in 'condition-case' and 'ignore-error'.
The compiler now warns about quoted condition (error) names
in 'condition-case' and 'ignore-error'.  Example:

    (condition-case nil
        (/ x y)
      ('arith-error "division by zero"))

Quoting them adds the error name 'quote' to those handled or ignored
respectively, which was probably not intended.</code></pre>
<pre><code>Warn about comparison with literal constants without defined identity.
The compiler now warns about comparisons by identity with a literal
string, cons, vector, record, function, large integer or float as this
may not match any value at all.  Example:

    (eq x "hello")

Only literals for symbols and small integers (fixnums), including
characters, are guaranteed to have a consistent (unique) identity.
This warning applies to 'eq', 'eql', 'memq', 'memql', 'assq', 'rassq',
'remq' and 'delq'.

To compare by (structural) value, use 'equal', 'member', 'assoc',
'rassoc', 'remove' or 'delete' instead.  Floats and bignums can also
be compared using 'eql', '=' and 'memql'.  Function literals cannot be
compared reliably at all.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about 'condition-case' without handlers.
The compiler now warns when the 'condition-case' form is used without
any actual handlers, as in

    (condition-case nil (read buffer))

because it has no effect other than the execution of the body form.
In particular, no errors are caught or suppressed.  If the intention
was to catch all errors, add an explicit handler for 'error', or use
'ignore-error' or 'ignore-errors'.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about 'unwind-protect' without unwind forms.
The compiler now warns when the 'unwind-protect' form is used without
any unwind forms, as in

    (unwind-protect (read buffer))

because the behavior is identical to that of the argument; there is
no protection of any kind.  Perhaps the intended unwind forms have
been misplaced or forgotten, or the use of 'unwind-protect' could be
simplified away.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about useless trailing 'cond' clauses.
The compiler now warns when a 'cond' form contains clauses following a
default (unconditional) clause.  Example:

    (cond ((= x 0) (say "none"))
          (t (say "some"))
          (say "goodbye"))

Such a clause will never be executed, and is likely to be a mistake,
perhaps due to misplaced parens.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about mutation of constant values.
The compiler now warns about code that modifies program constants in
some obvious cases.  Examples:

    (setcar '(1 2) 7)
    (aset [3 4] 0 8)
    (aset "abc" 1 ?d)

Such code may have unpredictable behavior because the constants are part
of the program and are not data structures generated afresh during
execution; the compiler does not expect them to change.

To avoid the warning, operate on an object created by the program
(maybe a copy of the constant), or use a non-destructive operation
instead.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'mutate-constant'.</code></pre>
<pre><code>Warn about more ignored function return values.
The compiler now warns when the return value from certain functions is
implicitly ignored.  Example:

    (progn (nreverse my-list) my-list)

will elicit a warning because it is usually pointless to call
'nreverse' on a list without using the returned value.

To silence the warning, make use of the value in some way, such as
assigning it to a variable.  You can also wrap the function call in
'(ignore ...)', or use 'with-suppressed-warnings' with the warning
name 'ignored-return-value'.

The warning will only be issued for calls to functions declared
'important-return-value' or 'side-effect-free' (but not 'error-free').</code></pre>
<pre><code>Warn about docstrings that contain control characters.
The compiler now warns about docstrings with control characters other
than newline and tab.  This is often a result of improper escaping.
Example:

    (defun my-fun ()
      "Uses c:\remote\dir\files and the key \C-x."
      ...)

where the docstring contains the four control characters 'CR', 'DEL',
'FF' and 'C-x'.

The warning name is 'docstrings-control-chars'.</code></pre>
<pre><code>The warning about wide docstrings can now be disabled separately.
Its warning name is 'docstrings-wide'.</code></pre>
<pre><code>'fset', 'defalias' and 'defvaralias' now signal an error for cyclic aliases.
Previously, 'fset', 'defalias' and 'defvaralias' could be made to
build circular function and variable indirection chains as in

    (defalias 'able 'baker)
    (defalias 'baker 'able)

but trying to use them would sometimes make Emacs hang.  Now, an attempt
to create such a loop results in an error.

Since circular alias chains now cannot occur, 'function-alias-p',
'indirect-function' and 'indirect-variable' will never signal an error.
Their 'noerror' arguments have no effect and are therefore obsolete.</code></pre>
<h3 id="touch-screen-support">Touch Screen support</h3>
<pre><code>'x-popup-menu' now understands touch screen events.
When a 'touchscreen-begin' or 'touchscreen-end' event is passed as the
POSITION argument, it will behave as if that event was a mouse event.</code></pre>
<pre><code>New functions for handling touch screen events.
The new functions 'touch-screen-track-tap' and 'touch-screen-track-drag'
handle tracking common touch screen gestures from within a command.</code></pre>
<pre><code>New parameter to 'touchscreen-end' events.
CANCEL non-nil establishes that the touch sequence has been intercepted
by programs such as window managers and should be ignored with Emacs.</code></pre>
<pre><code>New variable 'inhibit-auto-fill' to temporarily prevent auto-fill.</code></pre>
<pre><code>New variable 'secondary-tool-bar-map'.
If non-nil, this variable contains a keymap of menu items that are
displayed along tool bar items defined by 'tool-bar-map'.  These items
are displayed below the tool bar if the value of 'tool-bar-position' is
'top', and above it if the value is 'bottom'.  This is used by
'modifier-bar-mode'.</code></pre>
<pre><code>New variable 'completion-lazy-hilit'.
Lisp programs that present completion candidates may bind this
variable non-nil around calls to functions such as
'completion-all-completions'.  This tells the underlying completion
styles to skip eager fontification of completion candidates, which
improves performance.  Such a Lisp program can then use the
'completion-lazy-hilit' function to fontify candidates just in time.</code></pre>
<pre><code>New primitive 'buffer-last-name'.
It returns the name of a buffer before the last time it was renamed or
killed.</code></pre>
<pre><code>New primitive 'marker-last-position'.
It returns the last position of a marker in its buffer even if that
buffer has been killed.  ('marker-position' would return nil in that
case.)</code></pre>
<h3 id="functions-and-variables-to-transpose-sexps">Functions and variables to transpose sexps</h3>
<p>Juri Linkov did an awful lot of work to try and salvage the rather broken tree-sitter “sexp” commands and I think he’s done a stellar job, considering how hard it is to do <a href="https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter">Structured Movement and Editing with Tree-Sitter</a> in a way that works the way users expect it work.</p>
<pre><code>New helper variable 'transpose-sexps-function'.
Lisp programs can now set this variable to customize the behavior of the
'transpose-sexps' command.</code></pre>
<pre><code>New function 'transpose-sexps-default-function'.
The previous implementation of 'transpose-sexps' was moved into its own
function, to be used in 'transpose-sexps-function'.</code></pre>
<pre><code>New function 'treesit-transpose-sexps'.
Tree-sitter now unconditionally sets 'transpose-sexps-function' for all
tree-sitter enabled modes to this function.</code></pre>
<h3 id="functions-and-variables-to-move-by-program-statements">Functions and variables to move by program statements</h3>
<pre><code>New variable 'forward-sentence-function'.
Major modes can now set this variable to customize the behavior of the
'forward-sentence' command.</code></pre>
<pre><code>New function 'forward-sentence-default-function'.
The previous implementation of 'forward-sentence' is moved into its
own function, to be bound by 'forward-sentence-function'.</code></pre>
<pre><code>New function 'treesit-forward-sentence'.
All tree-sitter enabled modes that define 'sentence' in
'treesit-thing-settings' now set 'forward-sentence-function' to call
'treesit-forward-sentence'.</code></pre>
<h3 id="functions-and-variables-to-move-by-program-sexps">Functions and variables to move by program sexps</h3>
<pre><code>New function 'treesit-forward-sexp'.
Tree-sitter conditionally sets 'forward-sexp-function' for major modes
that have defined 'sexp' in 'treesit-thing-settings' to enable
sexp-related motion commands.</code></pre>
<pre><code>New user option 'native-comp-async-warnings-errors-kind'.
It allows control of what kinds of warnings and errors from asynchronous
native compilation are reported to the parent Emacs process.  The
default is to report all errors and only important warnings.  If you
were used to customizing 'native-comp-async-report-warnings-errors' to
nil or 'silent', we suggest that you now leave it at its default value,
and see if you get only warnings that matter.</code></pre>
<pre><code>New 'ftype' function declaration.
The declaration '(ftype TYPE)' specifies the type of a function.
Example:

    (defun hello (x y)
      (declare (ftype (function (integer boolean) string)))
      ...)

specifies that the function takes two arguments, an integer and a
boolean, and returns a string.  If the compilation happens with
'compilation-safety' set to zero, this information can be used by the
native compiler to produce better code, but specifying an incorrect type
may lead to Emacs crashing.  See the Info node "(elisp) Declare Form"
for further information.</code></pre>
<p>You can now declare the type of functions in Emacs, presumably to help the native compiler make informed choices about the input and return value. We are moving inexorably closer to Common Lisp…</p>
<pre><code>New 'important-return-value' function declaration and property.
The declaration '(important-return-value t)' sets the
'important-return-value' property which indicates that the function
return value should probably not be thrown away implicitly.</code></pre>
<pre><code>New functions 'file-user-uid' and 'file-group-gid'.
These functions are like 'user-uid' and 'group-gid', respectively, but
are aware of file name handlers, so they will return the remote UID or
GID for remote files (or -1 if the connection has no associated user).</code></pre>
<pre><code>'treesit-font-lock-rules' now accepts additional global keywords.
When supplied with ':default-language LANGUAGE', rules after it will
default to use 'LANGUAGE'.</code></pre>
<p>A welcome bit of syntactic sugar.</p>
<pre><code>New optional argument to 'modify-dir-local-variable'.
An optional 5th argument FILE has been added to
'modify-dir-local-variable'.  It can be used to specify which file to
modify instead of the default ".dir-locals.el".</code></pre>
<h3 id="connection-local-variables">Connection local variables</h3>
<p>Connection local variables are variables local to Tramp-specific connections.</p>
<pre><code>New macros 'connection-local-p' and 'connection-local-value'.
The former macro returns non-nil if a variable has a connection-local
binding.  The latter macro returns the connection-local value of a
variable if any, or its current value.</code></pre>
<h3 id="hash-tables">Hash tables</h3>
<pre><code>':rehash-size' and ':rehash-threshold' args no longer have any effect.
These keyword arguments are now ignored by 'make-hash-table'.  Emacs
manages the memory for all hash table objects in the same way.
The functions 'hash-table-rehash-size' and 'hash-table-rehash-threshold'
remain for compatibility but now always return the old default values.</code></pre>
<pre><code>The printed representation has been shrunk and simplified.
The 'test' parameter is omitted if it is 'eql' (the default), as is
'data' if empty.  'rehash-size', 'rehash-threshold' and 'size' are
always omitted, and ignored if present when the object is read back in.</code></pre>
<h3 id="obarrays">Obarrays</h3>
<pre><code>New obarray type.
Obarrays are now represented by an opaque type instead of using vectors.
They are created by 'obarray-make' and manage their internal storage
automatically, which means that the size parameter to 'obarray-make' can
safely be omitted.  That is, they do not become slower as they fill up.

The old vector representation is still accepted by functions operating
on obarrays, but 'obarrayp' only returns t for obarray objects.
'type-of' now returns 'obarray' for obarray objects.

Old code which (incorrectly) created "obarrays" as Lisp vectors filled
with something other than 0, as in '(make-vector N nil)', will no longer
work, and should be rewritten to use 'obarray-make'.  Alternatively, you
can fill the vector with 0.</code></pre>
<pre><code>New function 'obarray-clear' removes all symbols from an obarray.</code></pre>
<pre><code>'obarray-size' and 'obarray-default-size' are now obsolete.
They pertained to the internal storage size which is now irrelevant.</code></pre>
<pre><code>'treesit-install-language-grammar' can handle local directory instead of URL.
It is now possible to pass a directory of a local repository as URL
inside 'treesit-language-source-alist', so that calling
'treesit-install-language-grammar' will avoid cloning the repository.
It may be useful, for example, for the purposes of bisecting a
treesitter grammar.</code></pre>
<pre><code>New buffer-local variable 'tabulated-list-groups'.
It controls display and separate sorting of groups of entries.  By
default no grouping or sorting is done.</code></pre>
<pre><code>New variable 'revert-buffer-restore-functions'.
It helps to preserve various states after reverting the buffer.</code></pre>
<pre><code>New text property 'context-menu-functions'.
Like the variable with the same name, it adds menus from the list that
is the value of the property to context menus shown when clicking on the
text which as this property.</code></pre>
<pre><code>Detecting the end of an iteration of a keyboard macro.
'read-event', 'read-char', and 'read-char-exclusive' no longer return -1
when called at the end of an iteration of the execution of a keyboard
macro.  Instead, they will transparently continue reading available input
(e.g., from the keyboard).  If you need to detect the end of a macro
iteration, check the following condition before calling one of the
aforementioned functions:

    (and (arrayp executing-kbd-macro)
         (&gt;= executing-kbd-macro-index (length executing-kbd-macro)))</code></pre>
<pre><code>'vtable-update-object' updates an existing object with just two arguments.
It is now possible to update the representation of an object in a vtable
by calling 'vtable-update-object' with just the vtable and the object as
arguments.  (Previously, the OLD-OBJECT argument was required which, in
this case, would mean repeating the object in the argument list.)  When
replacing an object with a different one, passing both the new and old
objects is still necessary.</code></pre>
<pre><code>'vtable-insert-object' can insert "before" or at an index.
The signature of 'vtable-insert-object' has changed and is now:

    (vtable-insert-object TABLE OBJECT &amp;optional LOCATION BEFORE)

LOCATION corresponds to the old AFTER-OBJECT argument; if BEFORE is
non-nil, the new object is inserted before the LOCATION object, making
it possible to insert a new object at the top of the table.  (Before,
this was not possible.)  In addition, LOCATION can be an integer, a
(zero-based) index into the table at which the new object is inserted
(BEFORE is ignored in this case).</code></pre>
<pre><code>New function 'sqlite-execute-batch'.
This function lets the user execute multiple SQL statements in one go.
It is useful, for example, when a Lisp program needs to evaluate an
entire SQL file.</code></pre>
<h3 id="json">JSON</h3>
<pre><code>'json-serialize' now always returns a unibyte string.
This is appropriate since it is an encoding operation.  In the unlikely
event that a multibyte string is needed, the result can be decoded using

    (decode-coding-string RESULT 'utf-8)</code></pre>
<pre><code>The parser keeps duplicated object keys in alist and plist output.
A JSON object such as '{"a":1,"a":2}' will now be translated into the
Lisp values '((a . 1) (a . 2))' or '(:a 1 :a 2)' if alist or plist
object types are requested.</code></pre>
<pre><code>The parser sometimes signals different types of errors.
It will now signal 'json-utf8-decode-error' for inputs that are not
correctly UTF-8 encoded.</code></pre>
<pre><code>The parser and encoder now accept arbitrarily large integers.
Previously, they were limited to the range of signed 64-bit integers.</code></pre>
<pre><code>New tree-sitter functions and variables for defining and using "things"</code></pre>
<pre><code>New variable 'treesit-thing-settings'.
It allows modes to define "things" like 'defun', 'text', 'sexp', and
'sentence' for navigation commands and tree-traversal functions.</code></pre>
<pre><code>New functions for navigating "things".
There are new navigation functions 'treesit-thing-prev',
'treesit-thing-next', 'treesit-navigate-thing',
'treesit-beginning-of-thing', and 'treesit-end-of-thing'.</code></pre>
<pre><code>New functions 'treesit-thing-at', 'treesit-thing-at-point'.</code></pre>
<p>The tree-sitter-enabled equivalent of <code>thing-at-point</code>. This really should be merged into the existing thing at point system; if TS is available, then its settings should take precedence.</p>
<pre><code>Tree-traversing functions.
The functions 'treesit-search-subtree', 'treesit-search-forward',
'treesit-search-forward-goto', and 'treesit-induce-sparse-tree' now
accept more kinds of predicates.  Lisp programs can now use thing
symbols (defined in 'treesit-thing-settings') and any thing definitions
for the predicate argument.</code></pre>
<h3 id="other-tree-sitter-function-and-variable-changes">Other tree-sitter function and variable changes</h3>
<pre><code>'treesit-parser-list' now takes additional optional arguments.
The additional arguments are LANGUAGE and TAG.  If LANGUAGE is given,
only return parsers for that language.  If TAG is given, only return
parsers with that tag.  Note that passing nil as tag doesn't mean return
all parsers, but rather "all parsers with no tags".</code></pre>
<pre><code>New variable 'treesit-primary-parser'.
This variable should be set by multi-langauge major modes before calling
'treesit-major-mode-setup', in order for tree-sitter integration
functionalities to operate correctly.</code></pre>
<p>I’m not convinced having the notion of a primary parser is the right approach for multi-language support in a buffer. The notion of primacy is not going to resolve problems where multiple languages that do not know of each other have to coexist in the same buffer; those languages by definition do not have a primary language, and trying to coax Emacs and thus tree-sitter into thinking there is such a thing is flawed.</p>
<h3 id="changes-in-emacs-30.1-on-non-free-operating-systems">Changes in Emacs 30.1 on Non-Free Operating Systems</h3>
<h3 id="ms-windows">MS-Windows</h3>
<pre><code>You can now opt out of following MS-Windows' Dark mode.
By default, Emacs on MS-Windows follows the system's Dark mode for its
title bars' and scroll bars' appearance.  If the new user option
'w32-follow-system-dark-mode' is customized to the nil value, Emacs
will disregard the system's Dark mode and will always use the default
Light mode.</code></pre>
<pre><code>You can now use Image-Dired even if the 'convert' program is not installed.
If you don't have GraphicsMagick or ImageMagick installed, and thus the
'gm convert'/'convert' program is not available, Emacs on MS-Windows
will now use its own function 'w32image-create-thumbnail' to create
thumbnail images and show them in the thumbnail buffer.  Unlike with
using 'convert', this fallback method is synchronous, so Emacs will wait
until all the thumbnails are created and displayed, before showing them.</code></pre>
<pre><code>Emacs on MS-Windows now supports the ':stipple' face attribute.</code></pre>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Building a BitTorrent client from the ground up in Go (171 pts)]]></title>
            <link>https://blog.jse.li/posts/torrent/</link>
            <guid>43157980</guid>
            <pubDate>Mon, 24 Feb 2025 10:34:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jse.li/posts/torrent/">https://blog.jse.li/posts/torrent/</a>, See on <a href="https://news.ycombinator.com/item?id=43157980">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <article>
    

    
    <p><strong>tl;dr:</strong> What is the complete path between visiting thepiratebay and sublimating an mp3 file from thin air? In this post, we’ll implement enough of the BitTorrent protocol to download Debian. Look at the <a href="https://github.com/veggiedefender/torrent-client/">Source code</a> or skip to the <a href="https://blog.jse.li/posts/torrent#putting-it-all-together">last bit</a>.
    </p>
    

    <section>
      
<p>This post is also available in <a href="https://web.archive.org/web/20200616163517if_/https://4gophers.ru/articles/bittorrent/#.Xuj0zivLerw">Russian</a>, <a href="https://markruler.github.io/posts/go/building-bittorrent-client/">Korean</a>, and <a href="https://blog.mynameisdhr.com/YongGOCongLingJianLiBitTorrentKeHuDuan/">Chinese</a>.</p>
<p>BitTorrent is a protocol for downloading and distributing files across the Internet. In contrast with the traditional client/server relationship, in which downloaders connect to a central server (for example: watching a movie on Netflix, or loading the web page you’re reading now), participants in the BitTorrent network, called <strong>peers</strong>, download pieces of files from <em>each other</em>—this is what makes it a <strong>peer-to-peer</strong> protocol. We’ll investigate how this works, and build our own client that can find peers and exchange data between them.</p>
<img src="https://blog.jse.li/torrent/client-server-p2p.png" alt="diagram showing the difference between client/server (all clients connecting to one server) and peer-to-peer (peers connecting to each other) relationships">
<p>The protocol evolved organically over the past 20 years, and various people and organizations added extensions for features like encryption, private torrents, and new ways of finding peers. We’ll be implementing the <a href="https://www.bittorrent.org/beps/bep_0003.html">original spec</a> from 2001 to keep this a weekend-sized project.</p>
<p>I’ll be using a <a href="https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist">Debian ISO</a> file as my guinea pig because it’s big, but not huge, at 350MB. As a popular Linux distribution, there will be lots of fast and cooperative peers for us to connect to. And we’ll avoid the legal and ethical issues related to downloading pirated content.</p>

<div><p>Consider donating to a local <a href="https://www.communityjusticeexchange.org/nbfn-directory">community bail fund</a>.
</p><p>
Your money will pay for legal aid and bail for protestors who have been arrested for standing up to police brutality, institutional racism, and the murder of Black men and women like George Floyd, Breonna Taylor, Ahmaud Arbery, and Nina Pop.
</p><p>
In the tech community, we talk a lot about inclusivity and diversity. Now is the time to take concrete action.
</p><p>
<a href="https://www.communityjusticeexchange.org/nbfn-directory">https://www.communityjusticeexchange.org/nbfn-directory</a></p></div>

<h2 id="finding-peers">Finding peers</h2>
<p>Here’s a problem: we want to download a file with BitTorrent, but it’s a peer-to-peer protocol and we have no idea where to find peers to download it from. This is a lot like moving to a new city and trying to make friends—maybe we’ll hit up a local pub or a meetup group! Centralized locations like these are the big idea behind <strong>trackers</strong>, which are central servers that introduce peers to each other. They’re just web servers running over HTTP<span>*<span>Some trackers use a <a href="http://bittorrent.org/beps/bep_0015.html">UDP</a> binary protocol to save bandwidth</span></span>
, and you can find Debian’s at <a href="http://bttracker.debian.org:6969/">http://bttracker.debian.org:6969/</a></p>
<img src="https://blog.jse.li/torrent/trackers.png" alt="illustration of a desktop computer and laptop sitting at a pub">
<p>Of course, these central servers are liable to get raided by the feds if they facilitate peers exchanging illegal content. You may remember reading about trackers like TorrentSpy, Popcorn Time, and KickassTorrents getting seized and shut down. New methods cut out the middleman by making even <strong>peer discovery</strong> a distributed process. We won’t be implementing them, but if you’re interested, some terms you can research are <strong>DHT</strong>, <strong>PEX</strong>, and <strong>magnet links</strong>.</p>
<h2 id="parsing-a-torrent-file">Parsing a .torrent file</h2>
<p>A .torrent file describes the contents of a torrentable file and information for connecting to a tracker. It’s all we need in order to kickstart the process of downloading a torrent. Debian’s .torrent file looks like this:</p>
<pre><code>d8:announce41:http://bttracker.debian.org:6969/announce7:comment35:"Debian CD from cdimage.debian.org"13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�����PS�^�� (binary blob of the hashes of each piece)ee
</code></pre><p>That mess is encoded in a format called <strong>Bencode</strong> (pronounced <em>bee-encode</em>), and we’ll need to decode it.</p>
<p>Bencode can encode roughly the same types of structures as JSON—strings, integers, lists, and dictionaries. Bencoded data is not as human-readable/writable as JSON, but it can efficiently handle binary data and it’s really simple to parse from a stream. Strings come with a length prefix, and look like <code>4:spam</code>. Integers go between <em>start</em> and <em>end</em> markers, so <code>7</code> would encode to <code>i7e</code>. Lists and dictionaries work in a similar way: <code>l4:spami7ee</code> represents <code>['spam', 7]</code>, while <code>d4:spami7ee</code> means <code>{spam: 7}</code>.</p>
<p>In a prettier format, our .torrent file looks like this:</p>
<div>
  <pre><code><span>d</span>
  <span>8</span>:<span>announce</span>
    <span>41</span>:<span>http://bttracker.debian.org:6969/announce</span>
  <span>7</span>:<span>comment</span>
    <span>35</span>:<span>"Debian CD from cdimage.debian.org"</span>
  <span>13</span>:<span>creation date</span>
    <span>i</span><span>1573903810</span><span>e</span>
  <span>4</span>:<span>info</span>
    <span>d</span>
      <span>6</span>:<span>length</span>
        <span>i</span><span>351272960</span><span>e</span>
      <span>4</span>:<span>name</span>
        <span>31</span>:<span>debian-10.2.0-amd64-netinst.iso</span>
      <span>12</span>:<span>piece length</span>
        <span>i</span><span>262144</span><span>e</span>
      <span>6</span>:<span>pieces</span>
        <span>26800</span>:<span>�����PS�^�� (binary blob of the hashes of each piece)</span></code>
    <span>e</span>
<span>e</span></pre>
</div>
<p>In this file, we can spot the URL of the tracker, the creation date (as a Unix timestamp), the name and size of the file, and a big binary blob containing the SHA-1 hashes of each <strong>piece</strong>, which are equally-sized parts of the file we want to download. The exact size of a piece varies between torrents, but they are usually somewhere between 256KB and 1MB. This means that a large file might be made up of <em>thousands</em> of pieces. We’ll download these pieces from our peers, check them against the hashes from our torrent file, assemble them together, and boom, we’ve got a file!</p>
<img src="https://blog.jse.li/torrent/pieces.png" alt="illustration of a file being cut with scissors into multiple pieces, starting with piece 0">
<p>This mechanism allows us to verify the integrity of each piece as we go. It makes BitTorrent resistant to accidental corruption or intentional <strong>torrent poisoning</strong>. Unless an attacker is capable of breaking SHA-1 with a preimage attack, we will get exactly the content we asked for.</p>
<p>It would be really fun to write a bencode parser, but parsing isn’t our focus today. But I found Fredrik Lundh’s <a href="https://web.archive.org/web/20200105114449/https://effbot.org/zone/bencode.htm">50 line parser</a> to be especially illuminating. For this project, I used <a href="https://github.com/jackpal/bencode-go">github.com/jackpal/bencode-go</a>:</p>
<div>
<div><pre><code data-lang="golang"><span>import</span> <span>(</span>
    <span>"github.com/jackpal/bencode-go"</span>
<span>)</span>

<span>type</span> <span>bencodeInfo</span> <span>struct</span> <span>{</span>
    <span>Pieces</span>      <span>string</span> <span>`bencode:"pieces"`</span>
    <span>PieceLength</span> <span>int</span>    <span>`bencode:"piece length"`</span>
    <span>Length</span>      <span>int</span>    <span>`bencode:"length"`</span>
    <span>Name</span>        <span>string</span> <span>`bencode:"name"`</span>
<span>}</span>

<span>type</span> <span>bencodeTorrent</span> <span>struct</span> <span>{</span>
    <span>Announce</span> <span>string</span>      <span>`bencode:"announce"`</span>
    <span>Info</span>     <span>bencodeInfo</span> <span>`bencode:"info"`</span>
<span>}</span>

<span>// Open parses a torrent file
</span><span></span><span>func</span> <span>Open</span><span>(</span><span>r</span> <span>io</span><span>.</span><span>Reader</span><span>)</span> <span>(</span><span>*</span><span>bencodeTorrent</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>bto</span> <span>:=</span> <span>bencodeTorrent</span><span>{}</span>
    <span>err</span> <span>:=</span> <span>bencode</span><span>.</span><span>Unmarshal</span><span>(</span><span>r</span><span>,</span> <span>&amp;</span><span>bto</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>return</span> <span>&amp;</span><span>bto</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go">view in context</a></p>
</div>
<p>Because I like to keep my structures relatively flat, and I like to keep my application structs separate from my serialization structs, I exported a different, flatter struct named <code>TorrentFile</code> and wrote a few helper functions to convert between the two.</p>
<p>Notably, I split <code>pieces</code> (previously a string) into a slice of hashes (each <code>[20]byte</code>) so that I can easily access individual hashes later. I also computed the SHA-1 hash of the entire bencoded <code>info</code> dict (the one which contained the name, size, and piece hashes). We know this as the <strong>infohash</strong> and it uniquely identifies files when we talk to trackers and peers. More on this later.</p>
<img src="https://blog.jse.li/torrent/info-hash.png" alt="a name tag saying 'Hello my name is 86d4c80024a469be4c50bc5a102cf71780310074'">
<div>
<div><pre><code data-lang="golang"><span>type</span> <span>TorrentFile</span> <span>struct</span> <span>{</span>
    <span>Announce</span>    <span>string</span>
    <span><span>InfoHash</span>    <span>[</span><span>20</span><span>]</span><span>byte</span></span>
    <span><span>PieceHashes</span> <span>[][</span><span>20</span><span>]</span><span>byte</span></span>
    <span>PieceLength</span> <span>int</span>
    <span>Length</span>      <span>int</span>
    <span>Name</span>        <span>string</span>
<span>}</span>
</code><p><code data-lang="golang"><span>func</span> <span>(</span><span>bto</span> <span><em></em></span><em><span>bencodeTorrent</span><span>)</span> <span>toTorrentFile</span><span>()</span> <span>(</span><span></span></em><span>TorrentFile</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
<span>// …
</span><span></span><span>}</span></code></p></pre></div>
<p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go#L120-L138">view in context</a></p>
</div>
<h2 id="retrieving-peers-from-the-tracker">Retrieving peers from the tracker</h2>
<p>Now that we have information about the file and its tracker, let’s talk to the tracker to <strong>announce</strong> our presence as a peer and to retrieve a list of other peers. We just need to make a GET request to the <code>announce</code> URL supplied in the .torrent file, with a few query parameters:</p>
<div>
<div><pre><code data-lang="golang"><span>func</span> <span>(</span><span>t</span> <span>*</span><span>TorrentFile</span><span>)</span> <span>buildTrackerURL</span><span>(</span><span>peerID</span> <span>[</span><span>20</span><span>]</span><span>byte</span><span>,</span> <span>port</span> <span>uint16</span><span>)</span> <span>(</span><span>string</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>base</span><span>,</span> <span>err</span> <span>:=</span> <span>url</span><span>.</span><span>Parse</span><span>(</span><span>t</span><span>.</span><span>Announce</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>""</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>params</span> <span>:=</span> <span>url</span><span>.</span><span>Values</span><span>{</span>
        <span>"info_hash"</span><span>:</span>  <span>[]</span><span>string</span><span>{</span><span>string</span><span>(</span><span>t</span><span>.</span><span>InfoHash</span><span>[:])},</span>
        <span>"peer_id"</span><span>:</span>    <span>[]</span><span>string</span><span>{</span><span>string</span><span>(</span><span>peerID</span><span>[:])},</span>
        <span>"port"</span><span>:</span>       <span>[]</span><span>string</span><span>{</span><span>strconv</span><span>.</span><span>Itoa</span><span>(</span><span>int</span><span>(</span><span>Port</span><span>))},</span>
        <span>"uploaded"</span><span>:</span>   <span>[]</span><span>string</span><span>{</span><span>"0"</span><span>},</span>
        <span>"downloaded"</span><span>:</span> <span>[]</span><span>string</span><span>{</span><span>"0"</span><span>},</span>
        <span>"compact"</span><span>:</span>    <span>[]</span><span>string</span><span>{</span><span>"1"</span><span>},</span>
        <span>"left"</span><span>:</span>       <span>[]</span><span>string</span><span>{</span><span>strconv</span><span>.</span><span>Itoa</span><span>(</span><span>t</span><span>.</span><span>Length</span><span>)},</span>
    <span>}</span>
    <span>base</span><span>.</span><span>RawQuery</span> <span>=</span> <span>params</span><span>.</span><span>Encode</span><span>()</span>
    <span>return</span> <span>base</span><span>.</span><span>String</span><span>(),</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/tracker.go#L19-L35">view in context</a></p>
</div>
<p>The important ones:</p>
<ul>
<li><strong>info_hash</strong>: Identifies the <em>file</em> we’re trying to download. It’s the infohash we calculated earlier from the bencoded <code>info</code> dict. The tracker will use this to figure out which peers to show us.</li>
<li><strong>peer_id</strong>: A 20 byte name to identify <em>ourselves</em> to trackers and peers. We’ll just generate 20 random bytes for this. Real BitTorrent clients have IDs like <code>-TR2940-k8hj0wgej6ch</code> which identify the client software and version—in this case, TR2940 stands for Transmission client 2.94.</li>
</ul>
<img src="https://blog.jse.li/torrent/info-hash-peer-id.png" alt="a file with a name tag saying 'info_hash' and a person with a name tag 'peer_id'">
<h2 id="parsing-the-tracker-response">Parsing the tracker response</h2>
<p>We get back a bencoded response:</p>
<div>
  <pre><code><span>d</span>
  <span>8</span>:<span>interval</span>
    <span>i</span><span>900</span><span>e</span>
  <span>5</span>:<span>peers</span>
    <span>252</span>:<span>(another long binary blob)</span>
<span>e</span></code></pre>
</div>
<p><code>Interval</code> tells us how often we’re supposed to connect to the tracker again to refresh our list of peers. A value of 900 means we should reconnect every 15 minutes (900 seconds).</p>
<p><code>Peers</code> is another long binary blob containing the IP addresses of each peer. It’s made out of <strong>groups of six bytes</strong>. The first four bytes in each group represent the peer’s IP address—each byte represents a number in the IP. The last two bytes represent the port, as a big-endian <code>uint16</code>. <strong>Big-endian</strong>, or <strong>network order</strong>, means that we can interpret a group of bytes as an integer by just squishing them together left to right. For example, the bytes <code>0x1A</code>, <code>0xE1</code> make <code>0x1AE1</code>, or 6881 in decimal.<span>*<span>Interpreting the same bytes in <strong>little-endian</strong> order would make 0xE11A = 57626</span></span></p>
<img src="https://blog.jse.li/torrent/address.png" alt="diagram showing how 192, 0, 2, 123, 0x1A, 0xE1 can be interpreted as 192.0.1.123:6881">
<div>
<div><pre><code data-lang="golang"><span>// Peer encodes connection information for a peer
</span><span></span><span>type</span> <span>Peer</span> <span>struct</span> <span>{</span>
    <span>IP</span>   <span>net</span><span>.</span><span>IP</span>
    <span>Port</span> <span>uint16</span>
<span>}</span>

<span>// Unmarshal parses peer IP addresses and ports from a buffer
</span><span></span><span>func</span> <span>Unmarshal</span><span>(</span><span>peersBin</span> <span>[]</span><span>byte</span><span>)</span> <span>([]</span><span>Peer</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>const</span> <span>peerSize</span> <span>=</span> <span>6</span> <span>// 4 for IP, 2 for port
</span><span></span>    <span>numPeers</span> <span>:=</span> <span>len</span><span>(</span><span>peersBin</span><span>)</span> <span>/</span> <span>peerSize</span>
    <span>if</span> <span>len</span><span>(</span><span>peersBin</span><span>)</span><span>%</span><span>peerSize</span> <span>!=</span> <span>0</span> <span>{</span>
        <span>err</span> <span>:=</span> <span>fmt</span><span>.</span><span>Errorf</span><span>(</span><span>"Received malformed peers"</span><span>)</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>peers</span> <span>:=</span> <span>make</span><span>([]</span><span>Peer</span><span>,</span> <span>numPeers</span><span>)</span>
    <span>for</span> <span>i</span> <span>:=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>numPeers</span><span>;</span> <span>i</span><span>++</span> <span>{</span>
        <span>offset</span> <span>:=</span> <span>i</span> <span>*</span> <span>peerSize</span>
        <span>peers</span><span>[</span><span>i</span><span>].</span><span>IP</span> <span>=</span> <span>net</span><span>.</span><span>IP</span><span>(</span><span>peersBin</span><span>[</span><span>offset</span> <span>:</span> <span>offset</span><span>+</span><span>4</span><span>])</span>
        <span>peers</span><span>[</span><span>i</span><span>].</span><span>Port</span> <span>=</span> <span>binary</span><span>.</span><span>BigEndian</span><span>.</span><span>Uint16</span><span>(</span><span>peersBin</span><span>[</span><span>offset</span><span>+</span><span>4</span> <span>:</span> <span>offset</span><span>+</span><span>6</span><span>])</span>
    <span>}</span>
    <span>return</span> <span>peers</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/peers/peers.go">view in context</a></p>
</div>
<h2 id="downloading-from-peers">Downloading from peers</h2>
<p>Now that we have a list of peers, it’s time to connect with them and start downloading pieces! We can break down the process into a few steps. For each peer, we want to:</p>
<ol>
<li>Start a TCP connection with the peer. This is like starting a phone call.</li>
<li>Complete a two-way BitTorrent <strong>handshake</strong>. <em>“Hello?” “Hello."</em></li>
<li>Exchange <strong>messages</strong> to download <strong>pieces</strong>. <em>“I’d like piece #231 please."</em></li>
</ol>
<h2 id="start-a-tcp-connection">Start a TCP connection</h2>
<div>
<div><pre><code data-lang="golang"><span>conn</span><span>,</span> <span>err</span> <span>:=</span> <span>net</span><span>.</span><span>DialTimeout</span><span>(</span><span>"tcp"</span><span>,</span> <span>peer</span><span>.</span><span>String</span><span>(),</span> <span>3</span><span>*</span><span>time</span><span>.</span><span>Second</span><span>)</span>
<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
    <span>return</span> <span>nil</span><span>,</span> <span>err</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/client/client.go#L65-L69">view in context</a></p>
</div>
<p>I set a timeout so that I don’t waste too much time on peers that aren’t going to let me connect. For the most part, it’s a pretty standard TCP connection.</p>
<h2 id="complete-the-handshake">Complete the handshake</h2>
<p>We’ve just set up a connection with a peer, but we want do a handshake to validate our assumptions that the peer</p>
<ul>
<li>can communicate using the BitTorrent protocol</li>
<li>is able to understand and respond to our messages</li>
<li>has the file that we want, or at least knows what we’re talking about</li>
</ul>
<img src="https://blog.jse.li/torrent/handshake.png" alt="Two computers communicating. One asks 'do you speak BitTorrent and have this file?' and the other replies 'I speak BitTorrent and have that file'">
<p>My father told me that the secret to a good handshake is a firm grip and eye contact. The secret to a good BitTorrent handshake is that it’s made up of five parts:</p>
<ol>
<li>The length of the protocol identifier, which is always 19 (0x13 in hex)</li>
<li>The protocol identifier, called the <strong>pstr</strong> which is always <code>BitTorrent protocol</code></li>
<li>Eight <strong>reserved bytes</strong>, all set to 0. We’d flip some of them to 1 to indicate that we support certain <a href="http://www.bittorrent.org/beps/bep_0010.html">extensions</a>. But we don’t, so we’ll keep them at 0.</li>
<li>The <strong>infohash</strong> that we calculated earlier to identify which file we want</li>
<li>The <strong>Peer ID</strong> that we made up to identify ourselves</li>
</ol>
<p>Put together, a handshake string might look like this:</p>
<div><pre><code><span>\x13</span><span>BitTorrent protocol</span><span>\x00\x00\x00\x00\x00\x00\x00\x00</span><span>\x86\xd4\xc8\x00\x24\xa4\x69\xbe\x4c\x50\xbc\x5a\x10\x2c\xf7\x17\x80\x31\x00\x74</span><span>-TR2940-k8hj0wgej6ch</span></code></pre></div>
<p>After we send a handshake to our peer, we should receive a handshake back in the same format. The infohash we get back should match the one we sent so that we know that we’re talking about the same file. If everything goes as planned, we’re good to go. If not, we can sever the connection because there’s something wrong. <em>“Hello?” “这是谁？ 你想要什么？” “Okay, wow, wrong number."</em></p>
<p>In our code, let’s make a struct to represent a handshake, and write a few methods for serializing and reading them:</p>
<div>
<div><pre><code data-lang="golang"><span>// A Handshake is a special message that a peer uses to identify itself
</span><span></span><span>type</span> <span>Handshake</span> <span>struct</span> <span>{</span>
    <span>Pstr</span>     <span>string</span>
    <span>InfoHash</span> <span>[</span><span>20</span><span>]</span><span>byte</span>
    <span>PeerID</span>   <span>[</span><span>20</span><span>]</span><span>byte</span>
<span>}</span>

<span>// Serialize serializes the handshake to a buffer
</span><span></span><span>func</span> <span>(</span><span>h</span> <span>*</span><span>Handshake</span><span>)</span> <span>Serialize</span><span>()</span> <span>[]</span><span>byte</span> <span>{</span>
    <span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>len</span><span>(</span><span>h</span><span>.</span><span>Pstr</span><span>)</span><span>+</span><span>49</span><span>)</span>
    <span>buf</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>byte</span><span>(</span><span>len</span><span>(</span><span>h</span><span>.</span><span>Pstr</span><span>))</span>
    <span>curr</span> <span>:=</span> <span>1</span>
    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>h</span><span>.</span><span>Pstr</span><span>)</span>
    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>8</span><span>))</span> <span>// 8 reserved bytes
</span><span></span>    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>h</span><span>.</span><span>InfoHash</span><span>[:])</span>
    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>h</span><span>.</span><span>PeerID</span><span>[:])</span>
    <span>return</span> <span>buf</span>
<span>}</span>

<span>// Read parses a handshake from a stream
</span><span></span><span>func</span> <span>Read</span><span>(</span><span>r</span> <span>io</span><span>.</span><span>Reader</span><span>)</span> <span>(</span><span>*</span><span>Handshake</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>// Do Serialize(), but backwards
</span><span></span>    <span>// ...
</span><span></span><span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/a83013d250dd9b4268cceace28e4cd82b07f2cbd/handshake/handshake.go">view in context</a></p>
</div>
<h2 id="send-and-receive-messages">Send and receive messages</h2>
<p>Once we’ve completed the initial handshake, we can send and receive <strong>messages</strong>. Well, not quite—if the other peer isn’t ready to accept messages, we can’t send any until they tell us they’re ready. In this state, we’re considered <strong>choked</strong> by the other peer. They’ll send us an <strong>unchoke</strong> message to let us know that we can begin asking them for data. By default, we assume that we’re choked until proven otherwise.</p>
<p>Once we’ve been unchoked, we can then begin sending <strong>requests</strong> for pieces, and they can send us messages back containing pieces.</p>
<img src="https://blog.jse.li/torrent/choke.png" alt="A cartoon in which person 1 says 'hello I would like piece number—' and person 2 grabs him by the neck and says '00 00 00 01 00 (choke)'">
<h3 id="interpreting-messages">Interpreting messages</h3>
<p>A message has a length, an <strong>ID</strong> and a <strong>payload</strong>. On the wire, it looks like:</p>
<img src="https://blog.jse.li/torrent/message.png" alt="A message with 4 byte for the length, 1 byte for ID, and an optional payload">
<p>A message starts with a length indicator which tells us how many bytes long the message will be. It’s a 32-bit integer, meaning it’s made out of four bytes smooshed together in big-endian order. The next byte, the <strong>ID</strong>, tells us which type of message we’re receiving—for example, a <code>2</code> byte means “interested.” Finally, the optional <strong>payload</strong> fills out the remaining length of the message.</p>
<div>
<div><pre><code data-lang="golang"><span>type</span> <span>messageID</span> <span>uint8</span>

<span>const</span> <span>(</span>
    <span>MsgChoke</span>         <span>messageID</span> <span>=</span> <span>0</span>
    <span>MsgUnchoke</span>       <span>messageID</span> <span>=</span> <span>1</span>
    <span>MsgInterested</span>    <span>messageID</span> <span>=</span> <span>2</span>
    <span>MsgNotInterested</span> <span>messageID</span> <span>=</span> <span>3</span>
    <span>MsgHave</span>          <span>messageID</span> <span>=</span> <span>4</span>
    <span>MsgBitfield</span>      <span>messageID</span> <span>=</span> <span>5</span>
    <span>MsgRequest</span>       <span>messageID</span> <span>=</span> <span>6</span>
    <span>MsgPiece</span>         <span>messageID</span> <span>=</span> <span>7</span>
    <span>MsgCancel</span>        <span>messageID</span> <span>=</span> <span>8</span>
<span>)</span>

<span>// Message stores ID and payload of a message
</span><span></span><span>type</span> <span>Message</span> <span>struct</span> <span>{</span>
    <span>ID</span>      <span>messageID</span>
    <span>Payload</span> <span>[]</span><span>byte</span>
<span>}</span>

<span>// Serialize serializes a message into a buffer of the form
</span><span>// &lt;length prefix&gt;&lt;message ID&gt;&lt;payload&gt;
</span><span>// Interprets `nil` as a keep-alive message
</span><span></span><span>func</span> <span>(</span><span>m</span> <span>*</span><span>Message</span><span>)</span> <span>Serialize</span><span>()</span> <span>[]</span><span>byte</span> <span>{</span>
    <span>if</span> <span>m</span> <span>==</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>4</span><span>)</span>
    <span>}</span>
    <span>length</span> <span>:=</span> <span>uint32</span><span>(</span><span>len</span><span>(</span><span>m</span><span>.</span><span>Payload</span><span>)</span> <span>+</span> <span>1</span><span>)</span> <span>// +1 for id
</span><span></span>    <span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>4</span><span>+</span><span>length</span><span>)</span>
    <span>binary</span><span>.</span><span>BigEndian</span><span>.</span><span>PutUint32</span><span>(</span><span>buf</span><span>[</span><span>0</span><span>:</span><span>4</span><span>],</span> <span>length</span><span>)</span>
    <span>buf</span><span>[</span><span>4</span><span>]</span> <span>=</span> <span>byte</span><span>(</span><span>m</span><span>.</span><span>ID</span><span>)</span>
    <span>copy</span><span>(</span><span>buf</span><span>[</span><span>5</span><span>:],</span> <span>m</span><span>.</span><span>Payload</span><span>)</span>
    <span>return</span> <span>buf</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L90-L103">view in context</a></p>
</div>
<p>To read a message from a stream, we just follow the format of a message. We read four bytes and interpret them as a <code>uint32</code> to get the <strong>length</strong> of the message. Then, we read that number of bytes to get the <strong>ID</strong> (the first byte) and the <strong>payload</strong> (the remaining bytes).</p>
<div>
<div><pre><code data-lang="golang"><span>// Read parses a message from a stream. Returns `nil` on keep-alive message
</span><span></span><span>func</span> <span>Read</span><span>(</span><span>r</span> <span>io</span><span>.</span><span>Reader</span><span>)</span> <span>(</span><span>*</span><span>Message</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>lengthBuf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>4</span><span>)</span>
    <span>_</span><span>,</span> <span>err</span> <span>:=</span> <span>io</span><span>.</span><span>ReadFull</span><span>(</span><span>r</span><span>,</span> <span>lengthBuf</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>length</span> <span>:=</span> <span>binary</span><span>.</span><span>BigEndian</span><span>.</span><span>Uint32</span><span>(</span><span>lengthBuf</span><span>)</span>

    <span>// keep-alive message
</span><span></span>    <span>if</span> <span>length</span> <span>==</span> <span>0</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>nil</span>
    <span>}</span>

    <span>messageBuf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>length</span><span>)</span>
    <span>_</span><span>,</span> <span>err</span> <span>=</span> <span>io</span><span>.</span><span>ReadFull</span><span>(</span><span>r</span><span>,</span> <span>messageBuf</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>

    <span>m</span> <span>:=</span> <span>Message</span><span>{</span>
        <span>ID</span><span>:</span>      <span>messageID</span><span>(</span><span>messageBuf</span><span>[</span><span>0</span><span>]),</span>
        <span>Payload</span><span>:</span> <span>messageBuf</span><span>[</span><span>1</span><span>:],</span>
    <span>}</span>

    <span>return</span> <span>&amp;</span><span>m</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L105-L131">view in context</a></p>
</div>
<h3 id="bitfields">Bitfields</h3>
<p>One of the most interesting types of message is the <strong>bitfield</strong>, which is a data structure that peers use to efficiently encode which pieces they are able to send us. A bitfield looks like a byte array, and to check which pieces they have, we just need to look at the positions of the <em>bits</em> set to 1. You can think of it like the digital equivalent of a coffee shop loyalty card. We start with a blank card of all <code>0</code>, and flip bits to <code>1</code> to mark their positions as “stamped.”</p>
<img src="https://blog.jse.li/torrent/bitfield.png" alt="a coffee shop loyalty card with eight slots, with stamps on the first four slots and a stamp on the second to last slot, represented as 11110010">
<p>By working with <em>bits</em> instead of <em>bytes</em>, this data structure is super compact. We can stuff information about eight pieces in the space of a single byte—the size of a <code>bool</code>. The tradeoff is that accessing values becomes a little more tricky. The smallest unit of memory that computers can address are bytes, so to get to our bits, we have to do some bitwise manipulation:</p>
<div>
<div><pre><code data-lang="golang"><span>// A Bitfield represents the pieces that a peer has
</span><span></span><span>type</span> <span>Bitfield</span> <span>[]</span><span>byte</span>

<span>// HasPiece tells if a bitfield has a particular index set
</span><span></span><span>func</span> <span>(</span><span>bf</span> <span>Bitfield</span><span>)</span> <span>HasPiece</span><span>(</span><span>index</span> <span>int</span><span>)</span> <span>bool</span> <span>{</span>
    <span>byteIndex</span> <span>:=</span> <span>index</span> <span>/</span> <span>8</span>
    <span>offset</span> <span>:=</span> <span>index</span> <span>%</span> <span>8</span>
    <span>return</span> <span>bf</span><span>[</span><span>byteIndex</span><span>]</span><span>&gt;&gt;</span><span>(</span><span>7</span><span>-</span><span>offset</span><span>)</span><span>&amp;</span><span>1</span> <span>!=</span> <span>0</span>
<span>}</span>

<span>// SetPiece sets a bit in the bitfield
</span><span></span><span>func</span> <span>(</span><span>bf</span> <span>Bitfield</span><span>)</span> <span>SetPiece</span><span>(</span><span>index</span> <span>int</span><span>)</span> <span>{</span>
    <span>byteIndex</span> <span>:=</span> <span>index</span> <span>/</span> <span>8</span>
    <span>offset</span> <span>:=</span> <span>index</span> <span>%</span> <span>8</span>
    <span>bf</span><span>[</span><span>byteIndex</span><span>]</span> <span>|=</span> <span>1</span> <span>&lt;&lt;</span> <span>(</span><span>7</span> <span>-</span> <span>offset</span><span>)</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/bitfield/bitfield.go">view in context</a></p>
</div>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>We now have all the tools we need to download a torrent: we have a list of peers obtained from the tracker, and we can communicate with them by dialing a TCP connection, initiating a handshake, and sending and receiving messages. Our last big problems are handling the <strong>concurrency</strong> involved in talking to multiple peers at once, and managing the <strong>state</strong> of our peers as we interact with them. These are both classically Hard problems.</p>
<h3 id="managing-concurrency-channels-as-queues">Managing concurrency: channels as queues</h3>
<p>In Go, we <a href="https://blog.golang.org/share-memory-by-communicating">share memory by communicating</a>, and we can think of a Go channel as a cheap thread-safe queue.</p>
<p>We’ll set up two channels to synchronize our concurrent workers: one for dishing out work (pieces to download) between peers, and another for collecting downloaded pieces. As downloaded pieces come in through the results channel, we can copy them into a buffer to start assembling our complete file.</p>
<div>
<div><pre><code data-lang="golang"><span>// Init queues for workers to retrieve work and send results
</span><span></span><span>workQueue</span> <span>:=</span> <span>make</span><span>(</span><span>chan</span> <span>*</span><span>pieceWork</span><span>,</span> <span>len</span><span>(</span><span>t</span><span>.</span><span>PieceHashes</span><span>))</span>
<span>results</span> <span>:=</span> <span>make</span><span>(</span><span>chan</span> <span>*</span><span>pieceResult</span><span>)</span>
<span>for</span> <span>index</span><span>,</span> <span>hash</span> <span>:=</span> <span>range</span> <span>t</span><span>.</span><span>PieceHashes</span> <span>{</span>
    <span>length</span> <span>:=</span> <span>t</span><span>.</span><span>calculatePieceSize</span><span>(</span><span>index</span><span>)</span>
    <span>workQueue</span> <span>&lt;-</span> <span>&amp;</span><span>pieceWork</span><span>{</span><span>index</span><span>,</span> <span>hash</span><span>,</span> <span>length</span><span>}</span>
<span>}</span>

<span>// Start workers
</span><span></span><span>for</span> <span>_</span><span>,</span> <span>peer</span> <span>:=</span> <span>range</span> <span>t</span><span>.</span><span>Peers</span> <span>{</span>
    <span>go</span> <span>t</span><span>.</span><span>startDownloadWorker</span><span>(</span><span>peer</span><span>,</span> <span>workQueue</span><span>,</span> <span>results</span><span>)</span>
<span>}</span>

<span>// Collect results into a buffer until full
</span><span></span><span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>t</span><span>.</span><span>Length</span><span>)</span>
<span>donePieces</span> <span>:=</span> <span>0</span>
<span>for</span> <span>donePieces</span> <span>&lt;</span> <span>len</span><span>(</span><span>t</span><span>.</span><span>PieceHashes</span><span>)</span> <span>{</span>
    <span>res</span> <span>:=</span> <span>&lt;-</span><span>results</span>
    <span>begin</span><span>,</span> <span>end</span> <span>:=</span> <span>t</span><span>.</span><span>calculateBoundsForPiece</span><span>(</span><span>res</span><span>.</span><span>index</span><span>)</span>
    <span>copy</span><span>(</span><span>buf</span><span>[</span><span>begin</span><span>:</span><span>end</span><span>],</span> <span>res</span><span>.</span><span>buf</span><span>)</span>
    <span>donePieces</span><span>++</span>
<span>}</span>
<span>close</span><span>(</span><span>workQueue</span><span>)</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L188-L214">view in context</a></p>
</div>
<p>We’ll spawn a worker goroutine for each peer we’ve received from the tracker. It’ll connect and handshake with the peer, and then start retrieving work from the <code>workQueue</code>, attempting to download it, and sending downloaded pieces back through the <code>results</code> channel.</p>
<img src="https://blog.jse.li/torrent/download.png" alt="a flow chart of the download strategy">
<div>
<div><pre><code data-lang="golang"><span>func</span> <span>(</span><span>t</span> <span>*</span><span>Torrent</span><span>)</span> <span>startDownloadWorker</span><span>(</span><span>peer</span> <span>peers</span><span>.</span><span>Peer</span><span>,</span> <span>workQueue</span> <span>chan</span> <span>*</span><span>pieceWork</span><span>,</span> <span>results</span> <span>chan</span> <span>*</span><span>pieceResult</span><span>)</span> <span>{</span>
    <span>c</span><span>,</span> <span>err</span> <span>:=</span> <span>client</span><span>.</span><span>New</span><span>(</span><span>peer</span><span>,</span> <span>t</span><span>.</span><span>PeerID</span><span>,</span> <span>t</span><span>.</span><span>InfoHash</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>log</span><span>.</span><span>Printf</span><span>(</span><span>"Could not handshake with %s. Disconnecting\n"</span><span>,</span> <span>peer</span><span>.</span><span>IP</span><span>)</span>
        <span>return</span>
    <span>}</span>
    <span>defer</span> <span>c</span><span>.</span><span>Conn</span><span>.</span><span>Close</span><span>()</span>
    <span>log</span><span>.</span><span>Printf</span><span>(</span><span>"Completed handshake with %s\n"</span><span>,</span> <span>peer</span><span>.</span><span>IP</span><span>)</span>

    <span>c</span><span>.</span><span>SendUnchoke</span><span>()</span>
    <span>c</span><span>.</span><span>SendInterested</span><span>()</span>

    <span>for</span> <span>pw</span> <span>:=</span> <span>range</span> <span>workQueue</span> <span>{</span>
        <span>if</span> <span>!</span><span>c</span><span>.</span><span>Bitfield</span><span>.</span><span>HasPiece</span><span>(</span><span>pw</span><span>.</span><span>index</span><span>)</span> <span>{</span>
            <span>workQueue</span> <span>&lt;-</span> <span>pw</span> <span>// Put piece back on the queue
</span><span></span>            <span>continue</span>
        <span>}</span>

        <span>// Download the piece
</span><span></span>        <span>buf</span><span>,</span> <span>err</span> <span>:=</span> <span>attemptDownloadPiece</span><span>(</span><span>c</span><span>,</span> <span>pw</span><span>)</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>log</span><span>.</span><span>Println</span><span>(</span><span>"Exiting"</span><span>,</span> <span>err</span><span>)</span>
            <span>workQueue</span> <span>&lt;-</span> <span>pw</span> <span>// Put piece back on the queue
</span><span></span>            <span>return</span>
        <span>}</span>

        <span>err</span> <span>=</span> <span>checkIntegrity</span><span>(</span><span>pw</span><span>,</span> <span>buf</span><span>)</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>log</span><span>.</span><span>Printf</span><span>(</span><span>"Piece #%d failed integrity check\n"</span><span>,</span> <span>pw</span><span>.</span><span>index</span><span>)</span>
            <span>workQueue</span> <span>&lt;-</span> <span>pw</span> <span>// Put piece back on the queue
</span><span></span>            <span>continue</span>
        <span>}</span>

        <span>c</span><span>.</span><span>SendHave</span><span>(</span><span>pw</span><span>.</span><span>index</span><span>)</span>
        <span>results</span> <span>&lt;-</span> <span>&amp;</span><span>pieceResult</span><span>{</span><span>pw</span><span>.</span><span>index</span><span>,</span> <span>buf</span><span>}</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L133-L169">view in context</a></p>
</div>
<h3 id="managing-state">Managing state</h3>
<p>We’ll keep track of each peer in a struct, and modify that struct as we read messages. It’ll include data like how much we’ve downloaded from the peer, how much we’ve requested from them, and whether we’re choked. If we wanted to scale this further, we could formalize this as a finite state machine. But a struct and a switch are good enough for now.</p>
<div>
<div><pre><code data-lang="golang"><span>type</span> <span>pieceProgress</span> <span>struct</span> <span>{</span>
    <span>index</span>      <span>int</span>
    <span>client</span>     <span>*</span><span>client</span><span>.</span><span>Client</span>
    <span>buf</span>        <span>[]</span><span>byte</span>
    <span>downloaded</span> <span>int</span>
    <span>requested</span>  <span>int</span>
    <span>backlog</span>    <span>int</span>
<span>}</span>

<span>func</span> <span>(</span><span>state</span> <span>*</span><span>pieceProgress</span><span>)</span> <span>readMessage</span><span>()</span> <span>error</span> <span>{</span>
    <span>msg</span><span>,</span> <span>err</span> <span>:=</span> <span>state</span><span>.</span><span>client</span><span>.</span><span>Read</span><span>()</span> <span>// this call blocks
</span><span></span>    <span>switch</span> <span>msg</span><span>.</span><span>ID</span> <span>{</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgUnchoke</span><span>:</span>
        <span>state</span><span>.</span><span>client</span><span>.</span><span>Choked</span> <span>=</span> <span>false</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgChoke</span><span>:</span>
        <span>state</span><span>.</span><span>client</span><span>.</span><span>Choked</span> <span>=</span> <span>true</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgHave</span><span>:</span>
        <span>index</span><span>,</span> <span>err</span> <span>:=</span> <span>message</span><span>.</span><span>ParseHave</span><span>(</span><span>msg</span><span>)</span>
        <span>state</span><span>.</span><span>client</span><span>.</span><span>Bitfield</span><span>.</span><span>SetPiece</span><span>(</span><span>index</span><span>)</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgPiece</span><span>:</span>
        <span>n</span><span>,</span> <span>err</span> <span>:=</span> <span>message</span><span>.</span><span>ParsePiece</span><span>(</span><span>state</span><span>.</span><span>index</span><span>,</span> <span>state</span><span>.</span><span>buf</span><span>,</span> <span>msg</span><span>)</span>
        <span>state</span><span>.</span><span>downloaded</span> <span>+=</span> <span>n</span>
        <span>state</span><span>.</span><span>backlog</span><span>--</span>
    <span>}</span>
    <span>return</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L53-L83">view in context</a></p>
</div>
<h3 id="time-to-make-requests">Time to make requests!</h3>
<p>Files, pieces, and piece hashes aren’t the full story—we can go further by breaking down pieces into <strong>blocks</strong>. A block is a part of a piece, and we can fully define a block by the <strong>index</strong> of the piece it’s part of, its byte <strong>offset</strong> within the piece, and its <strong>length</strong>. When we make requests for data from peers, we are actually requesting <em>blocks</em>. A block is usually 16KB large, meaning that a single 256 KB piece might actually require 16 requests.</p>
<p>A peer is supposed to sever the connection if they receive a request for a block larger than 16KB. However, based on my experience, they’re often perfectly happy to satisfy requests up to 128KB. I only got moderate gains in overall speed with larger block sizes, so it’s probably better to stick with the spec.</p>
<h3 id="pipelining">Pipelining</h3>
<p>Network round-trips are expensive, and requesting each block one by one will absolutely tank the performance of our download. Therefore, it’s important to <strong>pipeline</strong> our requests such that we keep up a constant pressure of some number of unfulfilled requests. This can increase the throughput of our connection by an order of magnitude.</p>
<img src="https://blog.jse.li/torrent/pipelining.png" alt="Two email threads simulating peer connections. The thread on the left shows a request followed by a reply, repeated three times. The thread on the left sends three requests, and receives three replies in quick succession.">
<p>Classically, BitTorrent clients kept a queue of five pipelined requests, and that’s the value I’ll be using. I found that increasing it can up to double the speed of a download. Newer clients use an <a href="https://luminarys.com/posts/writing-a-bittorrent-client.html">adaptive</a> queue size to better accommodate modern network speeds and conditions. This is definitely a parameter worth tweaking, and it’s pretty low hanging fruit for future performance optimization.</p>
<div>
<div><pre><code data-lang="golang"><span>// MaxBlockSize is the largest number of bytes a request can ask for
</span><span></span><span>const</span> <span>MaxBlockSize</span> <span>=</span> <span>16384</span>

<span>// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline
</span><span></span><span>const</span> <span>MaxBacklog</span> <span>=</span> <span>5</span>

<span>func</span> <span>attemptDownloadPiece</span><span>(</span><span>c</span> <span>*</span><span>client</span><span>.</span><span>Client</span><span>,</span> <span>pw</span> <span>*</span><span>pieceWork</span><span>)</span> <span>([]</span><span>byte</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>state</span> <span>:=</span> <span>pieceProgress</span><span>{</span>
        <span>index</span><span>:</span>  <span>pw</span><span>.</span><span>index</span><span>,</span>
        <span>client</span><span>:</span> <span>c</span><span>,</span>
        <span>buf</span><span>:</span>    <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>pw</span><span>.</span><span>length</span><span>),</span>
    <span>}</span>

    <span>// Setting a deadline helps get unresponsive peers unstuck.
</span><span></span>    <span>// 30 seconds is more than enough time to download a 262 KB piece
</span><span></span>    <span>c</span><span>.</span><span>Conn</span><span>.</span><span>SetDeadline</span><span>(</span><span>time</span><span>.</span><span>Now</span><span>().</span><span>Add</span><span>(</span><span>30</span> <span>*</span> <span>time</span><span>.</span><span>Second</span><span>))</span>
    <span>defer</span> <span>c</span><span>.</span><span>Conn</span><span>.</span><span>SetDeadline</span><span>(</span><span>time</span><span>.</span><span>Time</span><span>{})</span> <span>// Disable the deadline
</span><span></span>
    <span>for</span> <span>state</span><span>.</span><span>downloaded</span> <span>&lt;</span> <span>pw</span><span>.</span><span>length</span> <span>{</span>
        <span>// If unchoked, send requests until we have enough unfulfilled requests
</span><span></span>        <span>if</span> <span>!</span><span>state</span><span>.</span><span>client</span><span>.</span><span>Choked</span> <span>{</span>
            <span>for</span> <span>state</span><span>.</span><span>backlog</span> <span>&lt;</span> <span>MaxBacklog</span> <span>&amp;&amp;</span> <span>state</span><span>.</span><span>requested</span> <span>&lt;</span> <span>pw</span><span>.</span><span>length</span> <span>{</span>
                <span>blockSize</span> <span>:=</span> <span>MaxBlockSize</span>
                <span>// Last block might be shorter than the typical block
</span><span></span>                <span>if</span> <span>pw</span><span>.</span><span>length</span><span>-</span><span>state</span><span>.</span><span>requested</span> <span>&lt;</span> <span>blockSize</span> <span>{</span>
                    <span>blockSize</span> <span>=</span> <span>pw</span><span>.</span><span>length</span> <span>-</span> <span>state</span><span>.</span><span>requested</span>
                <span>}</span>

                <span>err</span> <span>:=</span> <span>c</span><span>.</span><span>SendRequest</span><span>(</span><span>pw</span><span>.</span><span>index</span><span>,</span> <span>state</span><span>.</span><span>requested</span><span>,</span> <span>blockSize</span><span>)</span>
                <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
                    <span>return</span> <span>nil</span><span>,</span> <span>err</span>
                <span>}</span>
                <span>state</span><span>.</span><span>backlog</span><span>++</span>
                <span>state</span><span>.</span><span>requested</span> <span>+=</span> <span>blockSize</span>
            <span>}</span>
        <span>}</span>

        <span>err</span> <span>:=</span> <span>state</span><span>.</span><span>readMessage</span><span>()</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>return</span> <span>nil</span><span>,</span> <span>err</span>
        <span>}</span>
    <span>}</span>

    <span>return</span> <span>state</span><span>.</span><span>buf</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L85-L123">view in context</a></p>
</div>
<h3 id="maingo">main.go</h3>
<p>This is a short one. We’re almost there.</p>
<div>
<div><pre><code data-lang="golang"><span>package</span> <span>main</span>

<span>import</span> <span>(</span>
    <span>"log"</span>
    <span>"os"</span>

    <span>"github.com/veggiedefender/torrent-client/torrentfile"</span>
<span>)</span>

<span>func</span> <span>main</span><span>()</span> <span>{</span>
    <span>inPath</span> <span>:=</span> <span>os</span><span>.</span><span>Args</span><span>[</span><span>1</span><span>]</span>
    <span>outPath</span> <span>:=</span> <span>os</span><span>.</span><span>Args</span><span>[</span><span>2</span><span>]</span>

    <span>tf</span><span>,</span> <span>err</span> <span>:=</span> <span>torrentfile</span><span>.</span><span>Open</span><span>(</span><span>inPath</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>log</span><span>.</span><span>Fatal</span><span>(</span><span>err</span><span>)</span>
    <span>}</span>

    <span>err</span> <span>=</span> <span>tf</span><span>.</span><span>DownloadToFile</span><span>(</span><span>outPath</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>log</span><span>.</span><span>Fatal</span><span>(</span><span>err</span><span>)</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/main.go">view in context</a></p>
</div>

<h2 id="this-isnt-the-full-story">This isn’t the full story</h2>
<p>For brevity, I included only a few of the important snippets of code. Notably, I left out all the glue code, parsing, unit tests, and the boring parts that build character. View my <a href="https://github.com/veggiedefender/torrent-client">full implementation</a> if you’re interested.</p>

<div><p>This is an ad.
</p><p>
If you’d like to try building a BitTorrent client yourself, but could use some structure and personalized guidance, consider using <a href="https://app.codecrafters.io/join?via=veggiedefender">CodeCrafters</a>.
</p><p>
They make programming challenges for experienced engineers (e.g Build your own Git, Docker, Redis etc). In particular, they offer a BitTorrent challenge which walks you through everything described in this post — parsing bencode, discovering peers, and downloading pieces — with test harnesses and scaffolding code for a bunch of languages.
</p><p>
It’s a paid service, but you can get a discount with my referral link: <a href="https://app.codecrafters.io/join?via=veggiedefender">https://app.codecrafters.io/join?via=veggiedefender</a></p></div>


    </section>
  </article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft Cancels Leases for AI Data Centers, Analyst Says (207 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says</link>
            <guid>43157831</guid>
            <pubDate>Mon, 24 Feb 2025 10:12:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says">https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says</a>, See on <a href="https://news.ycombinator.com/item?id=43157831">Hacker News</a></p>
Couldn't get https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Cloudflare takes legal action over LaLiga's "disproportionate blocking efforts" (156 pts)]]></title>
            <link>https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/</link>
            <guid>43157000</guid>
            <pubDate>Mon, 24 Feb 2025 08:19:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/">https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/</a>, See on <a href="https://news.ycombinator.com/item?id=43157000">Hacker News</a></p>
<div id="readability-page-1" class="page"><article aria-label="Cloudflare takes legal action over LaLiga’s “disproportionate blocking efforts”" itemscope="" itemtype="https://schema.org/CreativeWork"><div itemprop="text"><figure><img decoding="async" width="900" height="607" data-attachment-id="226912" data-permalink="https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/laliga-yellow/" data-orig-file="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow.jpg" data-orig-size="1200,809" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="LaLiga Yellow" data-image-description="" data-image-caption="" data-medium-file="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-300x202.jpg" data-large-file="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-900x607.jpg" src="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-900x607.jpg" alt="" srcset="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-900x607.jpg 900w, https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-300x202.jpg 300w, https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-768x518.jpg 768w, https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow.jpg 1200w" sizes="(max-width: 900px) 100vw, 900px"></figure><p>Cloudflare has launched a legal action against LaLiga over IP blocking action that it says blocked millions of users from accessing unrelated websites.</p> <p>As reported in Broadband TV News, websites DazcFutbolios and RBTV77 were last weekend blocked in a joint action by the Spanish football league and local ISPs after illegally distributing LaLiga matches.</p><p>LaLiga said the two pirates were using technology provided by Cloudflare to conceal their identity and evade security controls. Together, the two platforms had more than 400,000 unique monthly users in Spain.</p><p>Cloudflare called the effort misguided and said LaLiga had left it with no other option than to pursue the legal action. “LaLiga secured this blocking order without notifying cloud providers, while concealing from the court the predictable harm to third parties and the public good. LaLiga’s actions pose a clear threat to the open Internet. Cloudflare has now filed a legal action to challenge the order and establish that LaLiga’s disproportionate blocking efforts are unlawful.&nbsp;</p><p>“Instead of addressing Spanish users’ concerns about excessive content blocking, LaLiga has attempted to deflect with baseless claims against Cloudflare while doubling down on its unlawful blocking practices.&nbsp;Cloudflare hopes this legal action helps prevent future indiscriminate blocking measures, and makes it clear that rightsholders cannot prioritise&nbsp;their commercial interests over the fundamental right of millions of consumers to access the open Internet.”</p><p>Like the majority of cloud providers, Cloudflare uses shared IP addresses to manage its network, meaning that thousands of domains can be accessed with a single IP address.</p><p>LaLiga claims more than 50% of pirate IPs illegally distributing its content are protected by Cloudflare.&nbsp;</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[We don't need startups, we need Digital-Mittelstand (125 pts)]]></title>
            <link>https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/</link>
            <guid>43156785</guid>
            <pubDate>Mon, 24 Feb 2025 07:40:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/">https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/</a>, See on <a href="https://news.ycombinator.com/item?id=43156785">Hacker News</a></p>
Couldn't get https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Pollution from Big Tech's data centre boom costs US public health $5.4bn (179 pts)]]></title>
            <link>https://www.ft.com/content/d595d5f6-79d1-47eb-b690-8597f09b39e7</link>
            <guid>43155975</guid>
            <pubDate>Mon, 24 Feb 2025 05:04:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ft.com/content/d595d5f6-79d1-47eb-b690-8597f09b39e7">https://www.ft.com/content/d595d5f6-79d1-47eb-b690-8597f09b39e7</a>, See on <a href="https://news.ycombinator.com/item?id=43155975">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a data-trackable="a11y-skip-to-help" href="https://www.ft.com/accessibility">Accessibility help</a><a data-trackable="a11y-skip-to-navigation" href="#site-navigation">Skip to navigation</a><a data-trackable="a11y-skip-to-content" href="#site-content">Skip to content</a><a data-trackable="a11y-skip-to-footer" href="#site-footer">Skip to footer</a></p><div id="barrier-page"><div id="heroOffer-Hero offers-1d763f4f-dfaf-4a22-96e2-2a05784c3bf1" data-component="heroOffer" data-component-unique-name="Hero offers"><div data-o-grid-colspan="12 L6"><p><span></span><span></span><span></span><span>Subscribe to unlock this article</span><span></span></p></div><div data-o-grid-colspan="12 L6"><p><h2><span>Join FT Edit</span></h2><h2><strong><span>Only </span><span>CHF50</span><span> a year</span></strong></h2></p><p><span>Get 2 months free with an annual subscription at </span><span>was </span><span>CHF60</span><span> </span><span>now </span><span>CHF50</span><span>.
Access to eight fresh articles a day, hand-picked by senior editors. Selected to feed your curiosity.</span></p></div></div><div id="recommendedOffers-Recommended Offers" data-component="recommendedOffers" data-component-unique-name="Recommended Offers"><p><h2 data-o-grid-colspan="12">Explore more offers.</h2></p><div data-o-grid-colspan="12"><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_standard.svg?source=next-barrier-page&amp;format=svg" alt=""></p><p><h3>Standard Digital</h3></p></div><p><span>was </span><span>CHF660</span><span> </span><span>now </span><span>CHF395</span><span> per year</span></p><p><span>Save now on essential digital access to quality FT journalism on any device.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_premium.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF85</span><span> per month</span></p><p><span>Complete digital access to quality FT journalism with expert analysis from industry leaders. Pay a year upfront and save 20%.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_print.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF345</span><span> for your first year</span></p><p><span>FT newspaper delivered Monday-Saturday, plus FT Digital Edition delivered to your device Monday-Saturday.</span></p></div></div></div><div data-component="subscriptionOptions" data-component-unique-name="Subscription Options Offers API"><h2>Explore our full range of subscriptions.</h2><div><div><p>Discover all the plans currently available in your country</p></div><div><p>Digital access for organisations. Includes exclusive features and content.</p></div></div></div><div data-component="whyFT" data-component-unique-name="Why FT"><div><h2>Why the FT?</h2><p>See why over a million readers pay to read the Financial Times.</p></div><p><a href="https://subs.ft.com/whytheft?ft-content-uuid=d595d5f6-79d1-47eb-b690-8597f09b39e7">Find out why</a></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI Researchers Find That AI Is Unable to Solve Most Coding Problems (131 pts)]]></title>
            <link>https://futurism.com/openai-researchers-coding-fail</link>
            <guid>43155825</guid>
            <pubDate>Mon, 24 Feb 2025 04:23:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://futurism.com/openai-researchers-coding-fail">https://futurism.com/openai-researchers-coding-fail</a>, See on <a href="https://news.ycombinator.com/item?id=43155825">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="incArticle"><p>OpenAI researchers have admitted that even the most advanced AI models&nbsp;still are no match for human coders — even though CEO Sam Altman insists they will be able to beat "<a href="https://www.reddit.com/r/singularity/comments/1iinrrq/sam_altman_software_engineering_will_be_very/">low-level</a>" software engineers by the end of this year.</p><p>In a <a href="https://arxiv.org/pdf/2502.12115">new paper</a>, the company's researchers found that even frontier models, or the most advanced and boundary-pushing AI systems, "are still unable to solve the majority" of coding tasks.</p><p>The researchers used&nbsp;a newly-developed benchmark called SWE-Lancer, built on more than 1,400 software engineering tasks from the freelancer site Upwork. Using the benchmark, OpenAI put three large language models (LLMs) — its own o1 reasoning model and flagship GPT-4o, as well as Anthropic's Claude 3.5 Sonnet — to the test.</p><p>Specifically, the new benchmark evaluated how well the LLMs performed with two types of tasks from Upwork: individual tasks, which involved resolving bugs and implementing fixes to them, or management tasks that saw the models trying to zoom out and make higher-level decisions. (The models weren't allowed to access the internet, meaning they couldn't just crib similar answers that'd been posted online.)</p><p>The models took on tasks cumulatively worth hundreds of thousands of dollars on Upwork,&nbsp;but they were only able to fix surface-level software issues, while remaining unable to actually find bugs in larger projects or find their root causes. These shoddy and half-baked "solutions" are likely familiar&nbsp;to anyone who's worked with AI — which is great at spitting out confident-sounding information that <a href="https://futurism.com/cnet-ai-errors">often falls apart</a> on closer inspection.</p><p>Though all three LLMs were often able to operate "far faster than a human would," the paper notes, they also failed to grasp how widespread bugs&nbsp;were or to understand their context, "leading to solutions that are incorrect or insufficiently comprehensive."</p><p>As the researchers explained, Claude 3.5 Sonnet performed better than the two OpenAI models pitted against it and made more money than o1 and GPT-4o. Still, the majority of its answers were wrong, and&nbsp;according to the researchers,&nbsp;any model would need "higher reliability" to be trusted with real-life coding tasks.</p><p>Put more plainly, the paper seems to demonstrate that although these frontier models can work quickly and solve zoomed-in tasks, they're are nowhere near as skilled at handling them as human engineers.</p><p>Though these LLMs have advanced rapidly over the past few years and will likely continue to do so, they're not skilled enough at software engineering to replace real-life people quite yet — not that that's stopping CEOs from <a href="https://futurism.com/the-byte/stack-overflow-layoffs-ai">firing their human coders</a> in favor of <a href="https://futurism.com/the-byte/ai-programming-assistants-code-error">immature AI models</a>.</p><p><strong>More on AI and coding: </strong><a href="https://futurism.com/the-byte/zuckerberg-automate-coding-ai"><em>Zuckerberg Announces Plans to Automate Facebook Coding Jobs With AI</em></a></p><br></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DeepSeek Open Source FlashMLA – MLA Decoding Kernel for Hopper GPUs (368 pts)]]></title>
            <link>https://github.com/deepseek-ai/FlashMLA</link>
            <guid>43155023</guid>
            <pubDate>Mon, 24 Feb 2025 01:37:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/deepseek-ai/FlashMLA">https://github.com/deepseek-ai/FlashMLA</a>, See on <a href="https://news.ycombinator.com/item?id=43155023">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">FlashMLA</h2><a id="user-content-flashmla" aria-label="Permalink: FlashMLA" href="#flashmla"></a></p>
<p dir="auto">FlashMLA is an efficient MLA decoding kernel for Hopper GPUs, optimized for variable-length sequences serving.</p>
<p dir="auto">Currently released:</p>
<ul dir="auto">
<li>BF16</li>
<li>Paged kvcache with block size of 64</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick start" href="#quick-start"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install</h3><a id="user-content-install" aria-label="Permalink: Install" href="#install"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Benchmark</h3><a id="user-content-benchmark" aria-label="Permalink: Benchmark" href="#benchmark"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="python tests/test_flash_mla.py"><pre>python tests/test_flash_mla.py</pre></div>
<p dir="auto">Achieving up to 3000 GB/s in memory-bound configuration and 580 TFLOPS in computation-bound configuration on H800 SXM5, using CUDA 12.6.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Usage</h3><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="from flash_mla import get_mla_metadata, flash_mla_with_kvcache

tile_scheduler_metadata, num_splits = get_mla_metadata(cache_seqlens, s_q * h_q // h_kv, h_kv)

for i in range(num_layers):
    ...
    o_i, lse_i = flash_mla_with_kvcache(
        q_i, kvcache_i, block_table, cache_seqlens, dv,
        tile_scheduler_metadata, num_splits, causal=True,
    )
    ..."><pre><span>from</span> <span>flash_mla</span> <span>import</span> <span>get_mla_metadata</span>, <span>flash_mla_with_kvcache</span>

<span>tile_scheduler_metadata</span>, <span>num_splits</span> <span>=</span> <span>get_mla_metadata</span>(<span>cache_seqlens</span>, <span>s_q</span> <span>*</span> <span>h_q</span> <span>//</span> <span>h_kv</span>, <span>h_kv</span>)

<span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>num_layers</span>):
    ...
    <span>o_i</span>, <span>lse_i</span> <span>=</span> <span>flash_mla_with_kvcache</span>(
        <span>q_i</span>, <span>kvcache_i</span>, <span>block_table</span>, <span>cache_seqlens</span>, <span>dv</span>,
        <span>tile_scheduler_metadata</span>, <span>num_splits</span>, <span>causal</span><span>=</span><span>True</span>,
    )
    ...</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>Hopper GPUs</li>
<li>CUDA 12.3 and above</li>
<li>PyTorch 2.0 and above</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgement</h2><a id="user-content-acknowledgement" aria-label="Permalink: Acknowledgement" href="#acknowledgement"></a></p>
<p dir="auto">FlashMLA is inspired by <a href="https://github.com/dao-AILab/flash-attention/">FlashAttention 2&amp;3</a> and <a href="https://github.com/nvidia/cutlass">cutlass</a> projects.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Citation</h2><a id="user-content-citation" aria-label="Permalink: Citation" href="#citation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="@misc{flashmla2025,
      title={FlashMLA: Efficient MLA decoding kernel}, 
      author={Jiashi Li},
      year={2025},
      publisher = {GitHub},
      howpublished = {\url{https://github.com/deepseek-ai/FlashMLA}},
}"><pre><span>@misc</span>{<span>flashmla2025</span>,
      <span>title</span>=<span><span>{</span>FlashMLA: Efficient MLA decoding kernel<span>}</span></span>, 
      <span>author</span>=<span><span>{</span>Jiashi Li<span>}</span></span>,
      <span>year</span>=<span><span>{</span>2025<span>}</span></span>,
      <span>publisher</span> = <span><span>{</span>GitHub<span>}</span></span>,
      <span>howpublished</span> = <span><span>{</span>\url{https://github.com/deepseek-ai/FlashMLA}<span>}</span></span>,
}</pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Write the post you wish you'd found (283 pts)]]></title>
            <link>https://www.gilesthomas.com/2025/02/20250223-til-deep-dive-posts</link>
            <guid>43154666</guid>
            <pubDate>Mon, 24 Feb 2025 00:34:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gilesthomas.com/2025/02/20250223-til-deep-dive-posts">https://www.gilesthomas.com/2025/02/20250223-til-deep-dive-posts</a>, See on <a href="https://news.ycombinator.com/item?id=43154666">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            

            <div data-current-dropdown="" hx-on="click:
                    if (event.target.closest('.dropdown')) {
                        let targetId = event.target.closest('.dropdown').dataset.target;
                        this.dataset.currentDropdown = (this.dataset.currentDropdown === targetId) ? '' : targetId;
                        event.stopPropagation();
                    }">
                    
                        <p>
                            Archives <span></span>
                        </p>
                    
                    
                        <p>
                            Categories <span></span>
                        </p>
                    
                    <p>
                        Blogroll <span></span>
                    </p>
                </div>

            

    

    

    <p>While laid up with a minor but annoying medical issue over the last week, I've
<a href="https://www.gilesthomas.com/2025/02/mathml-fonts-on-chromium-based-browsers">blogged</a>
<a href="https://www.gilesthomas.com/2025/02/ai-debugging-is-not-always-the-solution">more</a>
<a href="https://www.gilesthomas.com/2025/02/basic-neural-network-matrix-maths-part-1">than</a>
<a href="https://www.gilesthomas.com/2025/02/basic-neural-network-matrix-maths-part-2">usual</a>.
I've also spent some time reading through the archives here, and come to the
conclusion that the best posts I've made -- at least from my perspective --
follow a similar pattern.  They're posts where I've been learning how to do something,
or how something worked, and presented what I've found as a summary, often
as a tutorial.</p>

<p>I think of these as <em>writing the post that I wished I'd found</em> when I started
learning whatever it was.</p>


    
        <p>I think these posts serve two purposes.</p>

<p>Firstly, for me, they're an excellent way to codify and solidify the knowledge.
Finding out how to do something new, and ideally doing it, is important to grow
as an engineer, but writing down what you learned makes it sink into your mind at
a gut level.  I'm a big believer that you don't really understand something
properly if you can't explain it to an intelligent and interested listener.
I still remember how the <code>epoll</code> system call works, and the
difference between edge-triggered and level-triggered events, despite it
being almost twelve years since <a href="https://www.gilesthomas.com/2013/08/writing-a-reverse-proxyloadbalancer-from-the-ground-up-in-c-part-0">I wrote about it</a>.</p>

<p>But it seems that they might also be the most useful ones for other people.  From
Google Search Console, I can see that the majority of visits to this blog
from people who aren't regular readers comes from searches for things
that I've written about in these posts.  Comparing their search terms to what I
wrote about in the posts in question, there seems to be a good match -- so hopefully
they're finding what they are looking for.</p>

<p>I've decided to make a concerted effort to post more of this kind of thing.  I
struggled a bit to think of a snappy category name for them, as "tutorials that I
wished someone else had written for me before I started trying to learn this stuff"
is a bit wordy.  I've tentatively settled on "<a href="https://www.gilesthomas.com/til-deep-dives">TIL deep dives</a>" --
they're not the quick "Today I learned" posts that I've seen on other people's
blogs (Simon Willison is the master of this and even has <a href="https://til.simonwillison.net/">a subdomain devoted to his</a>)
-- but they're a similar kind of beast, a longer form of the same kind of thing.</p>

<p>Thoughts, as always, welcome in the comments below.</p>

    

    
        
    

    



            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How the UK Is Weakening Safety Worldwide (279 pts)]]></title>
            <link>https://blog.thenewoil.org/how-the-uk-is-weakening-safety-worldwide</link>
            <guid>43154501</guid>
            <pubDate>Mon, 24 Feb 2025 00:09:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.thenewoil.org/how-the-uk-is-weakening-safety-worldwide">https://blog.thenewoil.org/how-the-uk-is-weakening-safety-worldwide</a>, See on <a href="https://news.ycombinator.com/item?id=43154501">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>This week, the UK put the entire world at risk. I understand that may sound like alarmist hyperbole, but follow me. To understand, we have to go back to 2016, a year that I like to describe as “the year the world got collectively blackout drunk and decided to call our ex.” A lot of wild stuff happened that year – especially in the UK – so one thing that might’ve slipped under the radar was the passing of a little law called the Investigatory Powers Act. This law would later go on to be nicknamed “The Snooper’s Charter” by critics, and it allowed the UK to dramatically expand their electronic surveillance powers. How dramatically, you might ask? Two weeks ago, Apple was <a href="https://www.washingtonpost.com/technology/2025/02/07/apple-encryption-backdoor-uk/">ordered</a> to insert an encryption backdoor (more on that in a moment) into iCloud. And they weren’t allowed to publicly disclose it. And also even if they wanted to fight it, they’d still have to comply while the courts considered their appeal.</p>

<p>Yeah. That dramatically.</p>

<p>The thing is, Apple has made it abundantly clear in no uncertain terms that they will <a href="https://www.apple.com/privacy/government-information-requests/">refuse any request</a> by any government to knowingly insert backdoors into their software. So in light of their inability to fight this request, Apple simply decided to <a href="https://arstechnica.com/tech-policy/2025/02/apple-pulls-data-protection-tool-instead-of-caving-to-uk-demand-for-a-backdoor/">remove</a> iCloud encryption entirely for UK users.</p>

<h2 id="advanced-data-protection">Advanced Data Protection</h2>

<p>Some readers may be a little confused on how all this works (also my wording wasn't 100% accurate for the sake of brevity), so let me break it down real quick. <a href="https://thenewoil.org/en/guides/prologue/encryption/">Encryption</a> is the practice of taking data and making it unreadable to unauthorized parties, much like a secret code or language. Most modern devices and internet traffic is encrypted, but in such a way that the service provider still has access. Your Gmail inbox, for example, is encrypted as it travels between your phone and Google’s servers but it’s decrypted at those two spots, meaning anyone at Google who has the proper access can access your emails. (There's a lot of valid reasons for this, but it also opens up your data to being spied on, sold, or otherwise shared and potentially abused.) Some providers, however, take it a step further and implement what's called “end-to-end encryption,” (aka “E2EE” or “zero-knowledge encryption”). This is data encrypted in such a way where it’s only ever accessible on your devices, never the provider’s. (More on all of this in the page I linked earlier in this paragraph.) While there are no doubt a handful of evil people who would abuse E2EE to better cover their harmful tracks, it also benefits ordinary, law-abiding users by giving them a huge defensive boost against data breaches, massive data collection, unchecked mass surveillance, and a myriad of other threats online.</p>

<p>This brings us to Apple’s “Advanced Data Protection” program. Released in 2022, ADP was a huge upgrade to Apple’s iCloud suite, encrypting nearly everything stored in iCloud (except emails, contacts, and calendars) using E2EE. This feature required users to manually enable it, and while I always encourage readers to explore other options by privacy-first companies, I (among many other privacy enthusiasts) still touted this as a win for giving the everyday user an easy, effective way to protect their data. <em>This</em> is the encryption that Apple removed in the UK. Certain Apple products – like iMessage, Health, Passwords, and other data – remain end-to-end encrypted as it always has been, but ADP is specifically what the UK ordered a backdoor into, and thus ADP is what was pulled.</p>

<h2 id="backdoors-salt-typhoon">Backdoors &amp; Salt Typhoon</h2>

<p>Now, quickly, let me explain what an “encryption backdoor” is since I’ve already used it several times and it’s critical to this discussion. A “backdoor” is a term used to describe any sort of loophole in the encryption (or program) that allows someone – usually the developer – to gain direct access to the program or data. Usually this is done quietly, in the background, without the consent or awareness of the end user. (This should not be confused with things like analytics, telemetry, or granting access to tech support voluntarily.)</p>

<p>For years, politicians (and others) have called for backdoors in various software – usually encrypted messengers and the like – with the promise that it will only ever be used by the “good guys.” The problem is that backdoors are very aptly named: a backdoor of a house can be a great tool, allowing residents to come and go into their back yard conveniently and freely. For example, many households will leave the backdoor unlocked as a failsafe for residents to get in or out while reducing their risk – the backdoor is behind the house, maybe behind a fence, hidden out of sight where it may be less tempting to would-be crooks than leaving the front door unlocked.</p>

<p>At least, that’s the theory, right? But we all know that it’s a feel-good gesture at best. Bad guys have no way of knowing that the front door is unlocked, and if the backdoor is unlocked all it takes is one brave criminal who’s scouting the house to hop the fence and try the door. Furthermore, even if it is locked, I’ve personally noted in the past that residential locks are criminally (no pun intended) <a href="https://youtu.be/T_sy3dLwHkc">easy</a> to pick, often taking just a few seconds to someone with even the slightest amount of practice.</p>

<p>There's a reason the term was applied to encryption. Technology is difficult for most people to understand. For those without training in code or electronic engineering, computers seem akin to magic boxes powered by fairy dust and electricity. Even for those trying to learn, it can be difficult to find a good entry point. As such, it’s easy – and tempting – to hear someone promise “a backdoor that only good guys can use” and go “I don’t understand the details but surely it must be true.” After all, deepfakes, cyberespionage, and quantum computers are real things. Surely the magic box full of YouTube and cats makes anything possible, right?</p>

<p>Except – as the tech savvy in the crowd know – no, that’s not at all how it works. A software backdoor is exactly like a physical one: it only keeps out people acting in good faith. Those determined to get in will find their way, whether that’s a vulnerability in the software/encryption itself, or by <a href="https://thenewoil.org/en/guides/less-important/habits/#phishing--clicking-links">phishing</a> a legitimate user and stealing their login credentials or any other number of ways. And that’s to say nothing about the idea of “good guys;” who are they, exactly? Insider threats are a real thing. An abusive homeowner has “legitimate” access to the house’s backdoor, just as a <a href="https://www.theverge.com/2019/10/1/20893462/yahoo-engineer-hacking-accounts-stolen-nude-photos-videos-guilty-plea">rogue employee</a> would have access to the same backdoor in your encryption. People are people. Some of them are traitors, or make mistakes, or give in to temptation.</p>

<p>In fact, we have real-world proof that backdoors are indiscriminate: <a href="https://en.wikipedia.org/wiki/2024_United_States_telecommunications_hack">Salt Typhoon</a>. In late 2024, it came to light that the Chinese government had hacked into at least 9 American telecoms providers (as well as dozens of other countries) using – among other techniques – a backdoor specifically designed to be used by law enforcement for court-approved wiretapping. I <em>cannot</em> impress upon you, dear reader, how big of a deal this is. Every major American cell provider – Verizon, T-Mobile, AT&amp;T, and others – had their backdoor abused by the “bad guys” which gave them access to call logs, messages, and tons of other sensitive data for people up to and including President Donald Trump, Vice President Kamala Harris, and more – using the <strong>exact same tool</strong> designed for the “good guys.” This is absolute, unarguable proof that “a backdoor only the good guys can use” is a fantasy. Politicians who promise this may as well promise unicorns and orcs while they’re at it.</p>

<h2 id="the-broader-pattern">The Broader Pattern</h2>

<p>At this point, you may be convinced that backdoors are bad and the UK was wrong for ordering Apple to implement one. But you may wonder how this threatens users worldwide as I claimed at the start of this article. After all, ADP was only removed from the UK. The answer lies in the larger context: this is a pattern.</p>

<p>I promise I’ll keep this brief, but allow me to give you a quick bit of important internet history: if you’re reading this article, there’s a possibility you've at least heard of services like ProtonMail or Tuta. These are encrypted email providers, and their services are basically built on top of an encryption scheme called “<a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy">PGP</a>,” which premiered in 1991. Almost immediately, the government tried to stifle PGP, claiming that it should be classified as a weapon and therefore subject to the same regulations as weapons exports in terms of how it was distributed to foreign users. The case was taken to court, where the Supreme Court ultimately ruled that code was free speech, that subjecting code to the same regulations as weapons exports was insane, and that intentionally weakening code to try to one-up our enemies was pointless (and also insane). Thanks to this ruling, we now have a much safer digital with the proliferation of encryption technologies like TLS and AES, allowing for safe online shopping, encrypted storage, and much more. This case became one of the most prominent episodes of what was later dubbed <a href="https://en.wikipedia.org/wiki/Crypto_Wars#PC_era">The Crypto Wars</a>. (Fun fact: this case was also what put the <a href="https://www.eff.org/">Electronic Frontier Foundation</a> on the map, and their current Executive Director, Cindy Cohn, was the lead attorney in the case.)</p>

<p>The thing is, the Crypto Wars never really ended. It just comes and goes in phases. For example, during the first Trump administration, US Attorney General <a href="https://arstechnica.com/tech-policy/2019/08/post-snowden-tech-became-more-secure-but-is-govt-really-at-risk-of-going-dark/">William Barr</a> very outspokenly supported encryption backdoors. But don’t worry, that’s not a partisan take, because the Biden administration also indirectly supported backdoors via the 2022 <a href="https://en.wikipedia.org/wiki/Kids_Online_Safety_Act">Kids Online Safety Act</a>, which likely would’ve encouraged platforms to weaken, backdoor, or disable encryption to comply. (No word on how Biden would’ve responded to even more hostile bills like the <a href="https://en.wikipedia.org/wiki/EARN_IT_Act">EARN IT Act</a> or the <a href="https://cdt.org/insights/the-stop-csam-act-threatens-free-expression-and-privacy-rights-of-children-and-adults/">STOP CSAM Act</a>.)</p>

<p>But lest you think this is a US trend, rest assured that it’s not. The most infamous assault on your digital safety in Europe comes in the form of <a href="https://www.patrick-breyer.de/en/posts/chat-control/">Chat Control</a>, a proposal to force messengers like WhatsApp to scan all your messages for CSAM (Child Sexual Abuse Material). If that sounds familiar, that’s because Apple voluntarily proposed a similar system a few years ago, intending to scan photos on-device before being uploaded to iCloud to look for any illicit content. They ultimately decided <a href="https://www.wired.com/story/apple-icloud-photo-scan-csam-pause-backlash/">against</a> the plan after public backlash, including several proofs-of-concept showing that the system was faulty and an admission that this, too, was a slippery slope ripe for abuse. They ultimately decided there was no way to implement this program in a way that was both effective and reasonably abuse-proof, so they decided to drop it altogether. (Chat Control – and other abominations like the EARN IT Act – still rear their hideous heads from time to time. Apparently the memo is lost in transit somewhere.)</p>

<p>The UK is now spearheading the smear campaign against privacy with things like their <a href="https://www.theregister.com/2022/01/20/no_place_hide_campaign_anti_e2ee_ukgov/"></a><a href="https://blog.thenewoil.org/tag:NoPlaceToHide"><span>#</span><span>NoPlaceToHide</span></a> campaign, which aimed to paint anyone using encryption as a pedophile. (No, that’s not an exaggeration, actually.) There are still numerous bullish threats to privacy across the western world including calls to erase online anonymity to fight hate speech, vast social media surveillance programs, and more. The UK’s latest demand of Apple is not just an attack on their own citizens. It’s another step forward in a global assault against privacy, online safety, and self-sovereignty for individuals. Placed in the larger context of these ongoing proposals, regulations, and attempts to shift public narrative, this is another blow to privacy – and at least for now, an effective one.</p>

<h2 id="fighting-back">Fighting Back</h2>

<p>In light of the overwhelming evidence against backdoors – things like Salt Typhoon and <a href="https://thenewoil.org/en/guides/prologue/why/#why-care-about-security">rampant data breaches</a> – the only conclusion I can come to is that those who push for backdoors are either ignorant (uneducated on how technology works and thus misled to believe that such a thing is possible) or malicious (knowing full-well it’s not possible but prioritizing their own goals – be it national security or control – over the safety of the individuals under them). But for the UK and those who view encryption as a threat to their ends, it doesn’t matter. The end result is the same: UK user data is now accessible. This is a huge encouragement to other regimes seeking to undermine user safety in the name of whatever packaging they’ve picked this week: child safety, national security, etc.</p>

<p>There are some who speculate that Apple’s withdrawal was strategic: now they can fight the order without needing to comply while it works its way through the courts. I don’t know if that’s true (I haven’t seen any credible sources confirming it) but I would like to believe it is, not because I’m an Apple fan (I discourage my users from using Apple services even if they do decide to use an iPhone) but because I think Apple fighting back and winning would regain lost ground for the right to privacy, much as the ruling for Phil Zimmermann and PGP was ultimately a foundational win that future internet safety would go on to be built on top of. It would set a legal precedent saying “no, you can’t order backdoors (or at least you can’t do them in secret and force compliance in the meantime).” Either of those rulings would be a step forward for the safety of everyday, ordinary digital citizens everywhere. When one country – especially a global superpower – does something, it emboldens others to try following suit. Usually for the worse.</p>

<p>In the meantime, I would like to leave readers with some actionable takeaways. Even if Apple fights this case, it will take years to play out, and we have no guarantee of how it will go.</p>

<p>First things first: those who use iCloud should stop doing so. While ADP remains available in other countries, personally I’ve never been a fan of trusting all your data to a single, proprietary company. While iCloud is very convenient, I’m not entirely convinced it’s worth it. Many of Apple’s services can be safely and easily replicated in other trustworthy services, like photos, calendar, notes, and even drive storage. These are companies who put privacy and security first – not bolting it on as an afterthought the way companies like Apple have done. They're also transparent and rarely have to appease investors, meaning they are incentivized to protect you – the user – instead of selling your data to maximize shareholder profits. The New Oil offers a list of such services <a href="https://thenewoil.org/en/guides/most-important/mobile-apps/">here</a>.</p>

<p>For those things that can’t be easily replicated – like health data, reminders, and digital wallets – I would encourage users to consider what you can store on-device – or better yet, live without. While I will be the first to admit the convenience of things like Apple Wallet or enjoying the insight into the quality of my sleep, I can also confidently say that the trade off is very minimal. Studies have shown cash to be more effective in helping you stay on budget, and for most people basic sleep hygiene (like getting off screens 30 mins before bed, keeping the bedroom dark, and being consistent with your routines) will be plenty.</p>

<p>Finally, I believe that it’s always worth getting involved politically. While we can’t always rely on politicians and laws to protect us, I strongly believe that good privacy laws can act as a layer of defense (just compare the problem of “<a href="https://thenewoil.org/en/guides/moderately-important/people-search/">people search websites</a>” between America and the EU, where GDPR makes them virtually nonexistent). If you’re a UK citizen, you should absolutely find the contact information for your representatives and (politely) express your displeasure at this request and demand they drop the request and start protecting users online instead. (For those who need help making sure they’re communicating effectively, you’ll want to inform them you disprove of the UK’s “technical capability notice” issued to Apple regarding their Advanced Data Protection offering in January of this year.) If you're unsure where to even start with political action, check out the “<a href="https://thenewoil.org/en/links/#get-involved">Get Involved</a>” section of my website. Some of the organizations listed – like Big Brother Watch and Privacy International – are UK based.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Nobody in the privacy community defends crime, especially serious crimes that harm others. But we must always balance our desire to stop the <a href="https://www.politifact.com/factchecks/2015/oct/06/dan-patrick/dan-patrick-says-all-crime-estimate-committed-15-p/">tiny percentage</a> of criminals against our right to freedom as citizens (I have written about this many times before, probably most notable <a href="https://blog.thenewoil.org/an-open-letter-to-congresspeople-regarding-s#we-don-t-ban-freedom-because-some-people-abuse-it">here</a>). Many of those who support privacy-hostile proposals do so in the name of protecting the children. I don’t have kids of my own, but I do have nieces and nephews that I adore and would do anything for. I can’t help but wonder what sort of world we’re leaving them where they have no freedom to explore and grow, where they’re forever haunted by their mistakes in a digital permanent record, where the only thing standing between their freedom of expression and a fear of self-exploration is policy and not real, technical safeguards that make such abuse impossible. Protecting people is admirable, and we should take all reasonable measures we can to do so. Banning encryption is neither reasonable nor protecting people. It’s actively putting them at risk. Force the UK to respect your privacy and safety by switching to services outside their reach, and let them know that you – a voter – do not support this authoritarian red herring.</p>

<p><i>Tech changes fast, so be sure to check <a href="https://thenewoil.org/">TheNewOil.org</a> for the latest recommendations on tools, services, settings, and more. You can find our other content across the web <a href="https://thenewoil.org/en/links/#videos">here</a> or support our work in a variety of ways <a href="https://thenewoil.org/en/support/">here</a>. You can also leave a comment on this post here: <a href="https://remark.as/p/blog.thenewoil.org/how-the-uk-is-weakening-safety-worldwide">Discuss...</a></i></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Didn't realize it was this bad (159 pts)]]></title>
            <link>https://old.reddit.com/r/ITCareerQuestions/comments/1ir46b3/didnt_realize_it_was_this_bad/</link>
            <guid>43154332</guid>
            <pubDate>Sun, 23 Feb 2025 23:42:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/ITCareerQuestions/comments/1ir46b3/didnt_realize_it_was_this_bad/">https://old.reddit.com/r/ITCareerQuestions/comments/1ir46b3/didnt_realize_it_was_this_bad/</a>, See on <a href="https://news.ycombinator.com/item?id=43154332">Hacker News</a></p>
Couldn't get https://old.reddit.com/r/ITCareerQuestions/comments/1ir46b3/didnt_realize_it_was_this_bad/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Sublinear Time Algorithms (122 pts)]]></title>
            <link>https://people.csail.mit.edu/ronitt/sublinear.html</link>
            <guid>43154331</guid>
            <pubDate>Sun, 23 Feb 2025 23:42:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://people.csail.mit.edu/ronitt/sublinear.html">https://people.csail.mit.edu/ronitt/sublinear.html</a>, See on <a href="https://news.ycombinator.com/item?id=43154331">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><tbody><tr><td>


We have long considered showing the existence of a linear
time algorithm for a problem to be the gold standard
of achievement.  Indeed, it is hard to imagine doing much
better than that, since for any nontrivial problem, it would seem
that an algorithm must consider all of the input in order to make
a decision.  However, as extremely large data sets grow
more prevalent in a wide variety of settings, it is natural
to wonder what one can do in <i> sublinear </i>  time.   In fact,
there has been a lot of recent interest in this direction.
<p>

Sublinear time is a daunting goal since it allows one to read only
a miniscule fraction of the input.   There are problems for
which deterministic exact sublinear time
algorithms are known.  However, for most natural problems the
algorithm must use randomization and must give an answer which is in
some sense approximate.
There is a growing body of work aimed at finding sublinear
time algorithms for various problems.
Recent results have shown that there are classical
optimization problems whose values can be approximated in
sublinear time.  In addition, <i> property testing </i>, an alternative
notion of approximation for decision problems, has been
applied to give sublinear algorithms for a wide variety of
problems.
One can also
test various properties of distributions, where access to the distribution
is given through samples generated according to the distribution, in
time sublinear in the size of the support of the distribution.

</p><p>
Many examples of problems that can be solved in sublinear time
have been found.   Several useful
techniques, including the use of the Szemeredi Regularity lemma
and low rank approximations of matrices, have emerged for
designing sublinear algorithms.
Still, the study of sublinear time algorithms is
very new, and much remains to be understood about their scope,
both in finding sublinear time algorithms for new problems
and in finding more efficient algorithms for problems that
already have sublinear time algorithms.

</p><p>

The following contains some pointers to a few surveys on sublinear algorithms
and property testing, as well as slides from a short introductory talk.
Some of these pointers are a bit older.

</p><ul>
<li> 
    <a href="http://www.cs.technion.ac.il/users/eldar/surv.ps"> Survey by Eldar Fischer
    </a> 
</li><li>
    <a href="http://www.wisdom.weizmann.ac.il/~oded/PS/testSU.ps"> Survey by Oded Goldreich
    </a> 
</li><li>
    <a href="http://www.eng.tau.ac.il/~danar/Public-pdf/tut.pdf"> Survey by Dana Ron  (see also more recent books on her website)
    </a> 
</li><li>
    <a href="https://people.csail.mit.edu/ronitt/papers/icm.ps"> Survey by Ronitt Rubinfeld 
    </a>
</li><li>
    <a href="http://www.dcs.warwick.ac.uk/~czumaj/PUBLICATIONS/DRAFTS/Draft-Survey-Sublinear.pdf"> Survey by  Artur Czumaj and Christian Sohler
    </a>
</li><li>
    <a href="https://people.csail.mit.edu/ronitt/papers/TR11-013.pdf"> Survey by Ronitt Rubinfeld  and Asaf Shapira
    </a>
</li><li>
    <a href="https://people.csail.mit.edu/ronitt/papers/xrds-rr-dist.pdf"> 
Survey on distribution testing by Ronitt Rubinfeld </a>  (see <a href="http://www.cs.columbia.edu/~ccanonne/files/misc/tamingbigdistr-fr.pdf"> French version </a> translated by Clement Canonne)
</li><li>
    <a href="https://people.csail.mit.edu/ronitt/sub.ppt"> Short introduction to sublinear algorithms (slides)
    </a> 
</li><li>
<a href="https://sites.google.com/site/motimedina/publications/LocalGuide">
A new survey on local algorithms by Reut Levi and Moti Medina
</a> 

	</li><li>
		<a href="https://www.wisdom.weizmann.ac.il/~oded/PDF/pt-v3.pdf">
			  Oded Goldreich's book "Intro to Property Testing" 
		</a>
	</li>
	<li>
		<a href="https://jukkasuomela.fi/doc/local-survey.pdf">
			   Jukka Suomela's survey of local algorithms
		</a>
	</li>
	<li>
		<a href="https://ccanonne.github.io/survey-topics-dt.html">
			Clement Canonne's survey of topics in distribution testing
		</a>
	</li>
	<li>
		<a href="https://link.springer.com/book/10.1007/978-981-16-8622-1">
			Arnab Bhattacharyya and Yuichi Yoshida's  book on property testing
		</a>
	</li>


</ul>

	In the summer of 2024, the Simons Institute for the Theory of
Computing had a program on <a href="https://simons.berkeley.edu/programs/sublinear-algorithms">
Sublinear Algorithms
</a>.  Follow the link to see details of the program, including videos of
bootcamp and workshop talks.

<p>
The best place to get resources and
recent pointers on sublinear algorithms is
at the 
<a href="http://sublinear.info/index.php?title=Main%20Page">
o(n)</a> (little oh of n) site.

</p><p>
    
<a href="https://accessibility.mit.edu/">Accessibility</a>
</p></td></tr></tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Defragging my old Dell's UEFI NVRAM (152 pts)]]></title>
            <link>https://artemis.sh/2025/02/22/uefi-nvram-defrag.html</link>
            <guid>43154218</guid>
            <pubDate>Sun, 23 Feb 2025 23:23:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://artemis.sh/2025/02/22/uefi-nvram-defrag.html">https://artemis.sh/2025/02/22/uefi-nvram-defrag.html</a>, See on <a href="https://news.ycombinator.com/item?id=43154218">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>I’m setting up an old Dell box (2011-era tech). I was migrating to some new boot
drives and setting up grub on them again. Got to the point of deleting the old
boot entries and adding new ones, and got an error like <code>Could not prepare boot
variable: No space left on device</code>. Weird, because there weren’t that many EFI
variables, but <code>df -h</code> also reported that efivars was full:</p><div><pre><code>efivarfs              64K   60K   0K  100% /sys/firmware/efi/efivars
</code></pre></div><p>funky.</p><p>It wasn’t due to a glut of boot entries either; I’m pretty keen on keeping the
old ones cleared out, so we only had a few on here.</p><p>Well, I thought maybe there was a lot of dead space in the nvram that wasn’t in
use but also couldn’t be allocated. So I booted an <a href="https://archlinux.org/packages/extra/any/edk2-shell/">EFI
shell</a>, and did this:</p><div><pre><code>fs0:
dmpstore -s efi-vars
dmpstore -d
dmpstore -l efi-vars
</code></pre></div><p>Please be careful with these commands, it worked for me but for all I know it
might brick your setup. Check <code>help dmpstore</code> first.</p><div><pre><code>efivarfs              64K   14K   46K  24% /sys/firmware/efi/efivars
</code></pre></div><p>And all my UEFI configuration seems to be right as I left it before doing this.
So I think this confirms my suspicions.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Adding Mastodon Comments to Your Blog (165 pts)]]></title>
            <link>https://beej.us/blog/data/mastodon-comments/</link>
            <guid>43154148</guid>
            <pubDate>Sun, 23 Feb 2025 23:12:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://beej.us/blog/data/mastodon-comments/">https://beej.us/blog/data/mastodon-comments/</a>, See on <a href="https://news.ycombinator.com/item?id=43154148">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mainbody">
<!-- end common pagetop -->
<!-- end common pre2 -->
<p>2025-02-21</p>

<p><img src="https://beej.us/blog/data/mastodon-comments/images/mastodon_logo_purple.svg" alt="Websockets Logo"> Comments powered by Mastodon!</p>
<p>I hate ads. I also hate tracking and bloat. But I didn't actually hate
the latter quite enough to get rid of <a href="https://disqus.com/">Disqus</a> for
comments. It was a free, good service, and you could turn off ads for
the users (which I did).</p>
<p>But recently they sent out a mail saying they were not longer offering a
free ad-free option, and it's not worth paying for at my usage levels,
so they got the boot.</p>
<p>What to replace them with? The ultimate would be some kind of home-grown
thing, which I <em>could</em> do with the hosting I have. But it's more than I
want to take on right now.</p>
<p>So that leaves "Comments in Mastodon" as the winner. There's significant
overlap between Mastodon users and my meager collection of blog readers,
so that's not too bad.</p>
<p>The only thing that remains is either grabbing someone else's code to do
the work, or doing it myself. Doing it myself is more fun. Let's figure
it out!</p>
<p>I assumed correctly there was probably an API that would return JSON
data for public comments, and it seems like it should do so without any
login credentials.</p>
<p>First, get the JSON, then parse it down and convert it to HTML,
then embed that in the page. And style it all with CSS.</p>
<p>Oh, and make it work with my custom static site generator.</p>
<blockquote>
<p><img src="https://beej.us/blog/common/images/goat50.png" alt="Hint Goat">
Yes, this is going to be JavaScript-powered. I respect that some
people don't support JS, but since Mastodon requires it, we're going
to go with it. Also, it saves me from having a server-side component.</p>
<p>The only assurance I can give is that I don't use JS for tracking or
ads. So you should go ahead and whitelist my site. 😁</p>
</blockquote>
<p>The basic idea is that we're going to:</p>
<ol>
<li>Write a blog entry.</li>
<li>Post a link to that blog from our Mastodon account.</li>
<li>Link the blog entry back to our Mastodon post.</li>
<li>In the blog entry, show all the replies that have been made to that
Mastodon post.</li>
</ol>
<h2>Audience</h2>
<p>This assumes you know some basic JavaScript/HTML/CSS, e.g. finding DOM
elements, setting <code>innerHTML</code>, styling with CSS, using <code>&lt;script&gt;</code> tags,
etc.</p>
<p>I'm going "high-level overview" here, not "complete source code".</p>
<h2>Getting the Post ID</h2>
<p>When you make the announcement post to Mastodon, you need the ID of that
post so you can refer to it from your blog page.</p>
<p>The easiest way to get this is to go to your post on Mastodon, and look
at the URL.</p>
<pre><code>https://mastodon.sdf.org/@beejjorgensen/114011021587416866
</code></pre>
<p>That number at the end is your post ID. We'll need it for later.</p>
<h2>My Site Generator</h2>
<p>I could go off on a tangent here talking about how I think everyone
should write their own static site builder. Preferably in some
POSIX-compliant shell like Bash or Zsh. Because it's super portable,
fast as hell, already installed, and maximally removes dependencies.</p>
<p>But instead, I'll just cover the basics. This site is written in
Markdown (I'm writing Markdown right now in this very sentence). And the
site builder converts that to HTML, sticks some common headers and
footers on there, and then, importantly, substitutes some text in the
result with other values.</p>
<p>But that last bit is how we're going to make a static page aware of the
Mastodon post ID we're going to be peeling comments off of.</p>
<p>For example, the post with the comments might have ID
<code>114011021587416866</code>. Somehow I need to embed that inside the HTML for
the page to be able to <code>fetch()</code> the data.</p>
<p>I do this by having a placeholder in the pre-built HTML that looks like
this:</p>
<pre><code>MASTODON_POST_ID
</code></pre>
<p>Any place that string appears in the HTML, I replace it with
<code>114011021587416866</code>. (Using <a href="https://en.wikipedia.org/wiki/Sed">sed</a>.)</p>
<p>And where do I get <code>114011021587416866</code>? It's in a file called <code>env.sh</code>
in the directory for this particular blog entry.</p>
<p>It has content in it like this, setting shell environment variables:</p>
<pre><code>MASTODON_POST_ID=114011021587416866
</code></pre>
<p>I source this into the site builder shell script before the build starts
so I can do the substitution.</p>
<p>If that environment variable isn't found, no comments section is emitted.</p>
<p>I use that ID a couple places in the code, so the site builder emits
some HTML for "view" and "reply" buttons that look like this (wrapped
for ease):</p>
<pre><code>&lt;a id="comments-view"
    href="https://mastodon.sdf.org/@beejjorgensen/114011021587416866"
    data-comments-id="114011021587416866"&gt;View Comments&lt;/a&gt;
</code></pre>
<p>Note the post ID in the <code>href</code>, but I've also added it to
<code>data-comments-id</code>, which means I can get it in JavaScript like this,
thanks to the whole
<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset">dataset</a>
field:</p>
<pre><code>const a_elem = document.querySelector("#comments-view");
const post_id = a_elem.dataset.commentsId;
</code></pre>
<p>However you do it, though, you somehow have to get the Mastodon post ID
into the page.</p>
<h2>What's the API?</h2>
<p>Now, on to business.</p>
<p>It's actually pretty simple to get a post and all its attached comments.
You're going to want to do this for the server you have an account on,
which in my case is <code>mastodon.sdf.org</code>. (<a href="https://sdf.org/">SDF</a> is a
venerable, classic public access Unix system.)</p>
<p>You just have to hit the API endpoint. Let's use the same post ID from
the previous section in this example. Here is the URL to get the
comments (with my example post ID):</p>
<pre><code>https://mastodon.sdf.org/api/v1/statuses/114011021587416866/context
</code></pre>
<p>That's it. You can <a href="https://mastodon.sdf.org/api/v1/statuses/114011021587416866/context">go hit it right
now</a>
in your browser and see the JSON output.</p>
<p>And there's a <em>lot</em> of it.</p>
<p>But for my bit, I only wanted a few pieces from the commenter so that I
could use them to build the comment HTML.</p>
<ol>
<li>Their display name</li>
<li>Their account name</li>
<li>Their avatar URL</li>
<li>Their profile URL</li>
<li>Their content (what they posted)</li>
<li>Their attachments (more on that later)</li>
<li>Their comment Mastodon ID (for blacklist reasons)</li>
</ol>
<p>If we look at the response we got, it has two keys: <code>ancestors</code> and
<code>descendants</code>. The descendants are what we're interested in, i.e. all
the comments made in reply to our post. And <code>descendants</code> is an array of
all those comments.</p>
<p>Let's look at those elements and find what's interesting. Say <code>d = descendants[i]</code>. Then, searching through the JSON, we have:</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>d.account.display_name</code></td>
<td>Their display name</td>
</tr>
<tr>
<td><code>d.account.acct</code></td>
<td>Their account name</td>
</tr>
<tr>
<td><code>d.account.avatar_static</code></td>
<td>Their avatar URL</td>
</tr>
<tr>
<td><code>d.account.display_name</code></td>
<td>Their profile URL</td>
</tr>
<tr>
<td><code>d.content</code></td>
<td>Their content (what they posted)</td>
</tr>
<tr>
<td><code>d.media_attachments</code></td>
<td>Their attachments (an array)</td>
</tr>
<tr>
<td><code>d.id</code></td>
<td>Their comment Mastodon ID</td>
</tr>
</tbody>
</table>
<blockquote>
<p><img src="https://beej.us/blog/common/images/goat50.png" alt="Hint Goat">
There's both <code>avatar</code> and <code>avatar_static</code> in the response. The former
might be animated, and the latter is not. You could do something
interesting here like switch to the animated one on mouse-over, but I
didn't bother. I just always used the <code>_static</code> option for the various
images.</p>
</blockquote>
<p>So we have what we need, right there in each record.</p>
<h2>JavaScript at Last</h2>
<p>All we need to do is <code>fetch()</code> that information with our Mastodon post
ID that we baked into our static HTML. There are no credentials needed
to access public posts (so be sure to make your Mastodon post public).</p>
<p>But when should we fetch? Should we do it on page load? When the element
becomes visible? On a click?</p>
<p>If you have a high-traffic site, you might start raising the ire of your
Mastodon server admins if you repeatedly hit that URL. My site is
nowhere near those limits, so I <em>could</em> just load the comments after my
blog loads.</p>
<p>But I don't like extra overhead unless the user wants it, so instead I
hooked it up to a link. The comments will only appear on the page if the
user clicks the "View Comments" link.</p>
<p>A compromise might be to lazily load the comments when the user scrolls
down enough for them to be visible. But I just went for manual. (I drive
a <a href="https://en.wikipedia.org/wiki/Manual_transmission">stick</a>, too, BTW.)</p>
<p>In any case, we'll need a function to load the comments, and it'll look
like this:</p>
<pre><code>async load_comments(ev) {
    const post_id = MASTODON_POST_ID;

    // Change the URL to your server
    const url = `https://mastodon.sdf.org/api/v1/statuses/${post_id}/context`

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Response status: ${response.status}`);
        }

        const json = await response.json();

        populate_comments(json);

    } catch (error) {
        alert(`Error loading comments: ${error.message}`);
        console.error(error.message);
    }

}
</code></pre>
<p>It's an async function that uses the <code>fetch()</code> API to get the data for
my Mastodon post that corresponds to this blog entry.</p>
<p>Once it has loaded, we call <code>populate_comments()</code> with the JSON data to
actually build out the HTML. Let's talk about that next.</p>
<h2>Building the HTML</h2>
<p>This all depends on how you want your stuff to look at the end of the
day.</p>
<p>I wanted something that looked like what we have at the bottom of this
page, so I have some code that generates these. Here's what it looks
like (obviously with values substituted in where appropriate):</p>
<pre><code>&lt;div class="mast-comment"&gt;
    &lt;div class="mast-comment-header"&gt;
        &lt;div class="mast-comment-avatar"&gt;
            &lt;a href="ACCOUNT_URL"&gt;
                &lt;img src="ACCOUNT_AVATAR_URL"&gt;
            &lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="mast-comment-ident"&gt;
            &lt;div class="mast-comment-acct"&gt;
                &lt;a href="ACCOUNT_URL"&gt;
                    ACCOUNT_NAME
                &lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="mast-comment-display-name"&gt;
                &lt;a href="ACCOUNT_URL"&gt;
                    ACCOUNT_DISPLAY_NAME
                &lt;/a&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="mast-comment-content"&gt;
        COMMENT_CONTENT
    &lt;/div&gt;
    &lt;!-- attachment HTML goes here --&gt;
&lt;/div&gt;
</code></pre>
<p>Having it in that form allowed me to add some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox">flexbox
CSS</a>
to lay out the whole thing.</p>
<p>I basically just appended a bunch of those to a string and then dumped
it into the <code>innerHTML</code> of the comments block.</p>
<p>Note that the record <code>content</code> field is already HTML-encoded so there's
no need to do that again. (And if you do, you'll lose the comment
formatting and just display a bunch of HTML tags.)</p>
<h2>Media Attachments</h2>
<p>This was interesting. Users can attach things to their posts. And then
the question becomes what to do with them. The real Mastodon client will
display previews of the attachments that you can click on to get the
whole thing.</p>
<p>I'm going simpler with my stuff. Basically I'm just going to put a link
with a text description. I don't want the comments to be too polluted
with media.</p>
<p>We can find the media attachments in the <code>media_attachments</code> field,
which, if present, is an array.</p>
<p>I just needed a few pieces of information from each <code>media_attachments</code>
entry. Let's assume that <code>a = rec.media_attachments[i]</code>, and then we
have:</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a.type</code></td>
<td>The attachment type</td>
</tr>
<tr>
<td><code>a.url</code></td>
<td>The attachment location</td>
</tr>
<tr>
<td><code>a.description</code></td>
<td>The attachment text description</td>
</tr>
</tbody>
</table>
<p>The <a href="https://docs.joinmastodon.org/entities/MediaAttachment/#type">spec
says</a> the
<code>type</code> can be a few things:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>unknown</code></td>
<td>Unsupported or unrecognized file type</td>
</tr>
<tr>
<td><code>image</code></td>
<td>Static image</td>
</tr>
<tr>
<td><code>gifv</code></td>
<td>Looping, soundless animation</td>
</tr>
<tr>
<td><code>video</code></td>
<td>Video clip</td>
</tr>
<tr>
<td><code>audio</code></td>
<td>Audio track</td>
</tr>
</tbody>
</table>
<p>I used the <code>type</code> to choose an emoji icon that was appropriate (🖼️ 🎦 🎶
📎), then used the <code>description</code> for the text underlying a link to the
<code>url</code>. One per line. No preview. Kept it simple.</p>
<p>So I had <code>&lt;div&gt;</code> elements that I tucked into main comment <code>&lt;div&gt;</code> where
the "attachment HTML goes here" comment was, above.</p>
<pre><code>&lt;div class="mast-comment-attachment"&gt;
    ICON_EMOJI&amp;nbsp;&lt;a href="URL"&gt;DESCRIPTION&lt;/a&gt;
&lt;/div&gt;
</code></pre>
<h2>Replying</h2>
<p>100% punted on this. You click the "reply" button on my page and it
takes you straight to my blog post announcement on Mastodon. If you want
to reply, you need a Mastodon account and reply from there.</p>
<p>As such, the comments on my page are "read only". They are just a view
onto the live comments that are on Mastodon.</p>
<h2>Blacklisting</h2>
<p>I wanted to be able to blacklist entire accounts (<code>@user@example.com</code>)
or individual comment IDs (the big number referencing that comment).</p>
<p>This wouldn't change what was actually on Mastodon, but it would filter
out comments I didn't want to see on my blog site.</p>
<p>Remember how I jammed the Mastodon announcement post ID into my static
HTML by putting it in the JavaScript variable <code>MASTODON_POST_ID</code>? Well,
I do a similar thing for the blacklist.</p>
<p>In my environment shell script, I include a blacklist like this:</p>
<pre><code>MASTODON_BLACKLIST=@user@example.com,123456789,345678912
</code></pre>
<p>The numbers can be either a post ID or an account ID.</p>
<p>And my processing scripts turn that into JavaScript that looks like
this:</p>
<pre><code>&lt;script&gt;MASTODON_BLACKLIST = new Set([
    "@user@example.com",
    "123456789",
    "345678912"
]);&lt;/script&gt;
</code></pre>
<p>And then I can pass an entire <code>descendants</code> record into this function
which will return <code>true</code> if it is blacklisted. It tests the comment
record ID, the poster account ID, and the poster account login to see if
any of them are in the blacklist. If so, no comment block is emitted for
that record.</p>
<pre><code>function blacklisted(rec)
{
    const bl = MASTODON_BLACKLIST;

    return bl.has(rec.id) ||
        bl.has(rec.account.id) ||
        bl.has(rec.account.acct);
}
</code></pre>
<h3>Getting the Comment ID</h3>
<p>If I see some offensive content, I can see who posted it because my
comments viewer shows their name. But my comments viewer does not show
their comment post ID.</p>
<p>And what if I want to block just that one post?</p>
<p>What I did was wire it up so that if I held <code>ALT</code> and clicked on the
comment, it would display the comment ID underneath the comment. (And
remove it if I clicked again.)</p>
<h3>Adding to the Blacklist</h3>
<p>If I want to block someone, I do the following.</p>
<ol>
<li>If I want to block their account, I add their account login to my
<code>MASTODON_BLACKLIST</code> environment variable. If I want to block just
that comment, I <code>ALT</code>-click on it to get the ID, and then add that ID
to the blacklist variable.</li>
<li>I rebuild the site. It's static, so I need to get the new blacklist
baked into the HTML. (I could also just rebuild this one page, but
since it takes 0.5 seconds to rebuild the entire site currently, I
just go for it.)</li>
<li>I deploy the site.</li>
</ol>
<h3>Global Blacklist</h3>
<p>Right now I'm blacklisting people and comments on a per-blog-entry
basis. But I'll probably modify my site builder to also support a global
blacklist for people I want to ban on <strong>all</strong> my blog posts.</p>
<p>Hopefully I never have to do that.</p>
<h2>Chicken and Egg</h2>
<p>I have to put the blog post online so I can link to it from the Mastodon
announcement post.</p>
<p>I have to put the Mastodon announcement post online so I can refer to it
from the blog post.</p>
<p>So there's just a moment where the comments don't show. Reviewing the
launch process:</p>
<ol>
<li>Make the blog entry live with no comments.</li>
<li>Link to it from Mastodon in the announcement post.</li>
<li>Take the announcement post ID and use it to rebuild the blog entry.</li>
<li>Re-deploy the blog entry.</li>
</ol>
<p>Of course this could all be automated through the appropriate APIs to
minimize that window, but I'm not going to bother for my low traffic.</p>
<h2>Maiden Voyage</h2>
<p>This is the first post where I'm trying this out. So feel free to reply
and I'll find out where all the breakages are. 😅</p>
<!-- begin common pagebottom -->
<!-- begin comments -->
<!-- comment blacklist -->

<h2>Comments</h2>
<p><a id="comments-view" href="https://mastodon.sdf.org/@beejjorgensen/114055638347066398" data-comments-id="114055638347066398">View Comments</a>
<a id="comments-reply" href="https://mastodon.sdf.org/@beejjorgensen/114055638347066398">Reply</a></p>
<!-- end comments -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What are you working on? (February 2025) (170 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43154065</link>
            <guid>43154065</guid>
            <pubDate>Sun, 23 Feb 2025 23:00:16 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43154065">Hacker News</a></p>
Couldn't get https://news.ycombinator.com/item?id=43154065: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Tokio and Prctl = Nasty Bug (172 pts)]]></title>
            <link>https://kobzol.github.io/rust/2025/02/23/tokio-plus-prctl-equals-nasty-bug.html</link>
            <guid>43153901</guid>
            <pubDate>Sun, 23 Feb 2025 22:37:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kobzol.github.io/rust/2025/02/23/tokio-plus-prctl-equals-nasty-bug.html">https://kobzol.github.io/rust/2025/02/23/tokio-plus-prctl-equals-nasty-bug.html</a>, See on <a href="https://news.ycombinator.com/item?id=43153901">Hacker News</a></p>
Couldn't get https://kobzol.github.io/rust/2025/02/23/tokio-plus-prctl-equals-nasty-bug.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Partnering with the Shawnee Tribe for Civilization VII (181 pts)]]></title>
            <link>https://civilization.2k.com/civ-vii/news/civilization-vii-shawnee-tribe-partnership/</link>
            <guid>43153662</guid>
            <pubDate>Sun, 23 Feb 2025 22:06:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://civilization.2k.com/civ-vii/news/civilization-vii-shawnee-tribe-partnership/">https://civilization.2k.com/civ-vii/news/civilization-vii-shawnee-tribe-partnership/</a>, See on <a href="https://news.ycombinator.com/item?id=43153662">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="17399896778125" slug="/news/civilization-vii-shawnee-tribe-partnership/" localecode="en-US" promoted="false" disablelink="false" shouldshowsidebar="false"><article><p><h2><span>Partnering with the Shawnee Tribe for Civilization VII</span></h2></p><div><p><span>Est. Read Time</span><span>2 minutes, 4 seconds</span></p></div><!----><!--[--><!--]--><div><p><iframe type="text/html" allow="fullscreen" width="640" height="390" src="https://www.youtube.com/embed/l17v2Y8ZKFM?autoplay=0&amp;rel=0&amp;enablejsapi=1&amp;modestbranding=1&amp;fs=1&amp;start=0&amp;mute=0" frameborder="0"></iframe></p><p>With each <i>Civilization</i> title, we take great care to thoughtfully and authentically portray every culture on our roster of civilizations and leaders. During the development of <i>Civilization VII</i>, Firaxis Games reached out to Ben Barnes, chief of the Shawnee Tribe, to discuss the possibility of incorporating Shawnee history into the game. By chance, Chief Barnes is a longtime fan of strategy games, including the <i>Civilization</i> series, and these conversations eventually blossomed into an ongoing relationship of shared knowledge and resources which not only led to more accurate and meaningful in-game depictions, but also real gains in preserving Shawnee language and culture for future generations.</p><p>In 2021, the team at Firaxis began working with the Tribe to make sure the in-game <a href="https://civilization.2k.com/civ-vii/game-guide/civilizations/shawnee/"><u>Shawnee</u></a> civilization* and the visionary leader <a href="https://civilization.2k.com/civ-vii/game-guide/leaders/tecumseh/"><u>Tecumseh</u></a>*—who is included in <i>Civ VII</i>'s expansive roster of playable leaders, voiced by Shawnee actor Dillon Dean—were respectfully represented. In addition to faithfully incorporating the Shawnee language in-game, the developers researched archeological material, studied old family photographs, and consulted with cultural knowledge-keepers while carefully shaping how the Tribe was characterized.</p><p>Then, in February 2025, the next phase of our collaboration culminated in the grand opening of the George "Fife" Blanchard Yaatakciitonooteeki (Recording Studio) in Miami, Oklahoma. Paying homage to George Blanchard, a fluent Shawnee language speaker and visionary leader in his own right, the studio is fully equipped to produce audio recordings of the highest quality and support the Tribe's<a href="https://library.municode.com/tribes_and_tribal_nations/shawnee_tribe/munidocs/munidocs?nodeId=474b75806676f" target="_blank"> <u>ongoing preservation efforts</u></a>. The Shawnee Tribe is almost halfway through its "Decade of the Shawnee Language," and this new space will significantly bolster their work.</p><p>Of course, it also warmed our hearts to see Chief Ben Barnes as thrilled as we are to showcase the Shawnee in <i>Civilization VII</i>. It's been an honor to work alongside the Tribe in this fulfilling partnership, and now that the game has launched worldwide, we can't wait for more players to build something they believe in while embodying Tecumseh and leading the Shawnee in <i>Civ VII </i>for years to come!</p><p><i>*Tecumseh leader and Shawnee civilization are part of the Tecumseh and Shawnee Pack DLC. The Tecumseh and Shawnee Pack is included in the Deluxe and Founders Editions of Civilization VII. It will also be available for separate purchase starting April 15, 2025 (base game required, date subject to change).</i> </p></div><!--[--><!--]--><!----></article><!----></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bitwarden Authenticator (179 pts)]]></title>
            <link>https://bitwarden.com/products/authenticator/</link>
            <guid>43153262</guid>
            <pubDate>Sun, 23 Feb 2025 21:11:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bitwarden.com/products/authenticator/">https://bitwarden.com/products/authenticator/</a>, See on <a href="https://news.ycombinator.com/item?id=43153262">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><nav data-testid="bw-mobile-header"><div><ul><li><div><div><h5><span>Password Manager</span></h5><div><div><p>Millions of users choose Bitwarden to protect themselves and their families</p></div><div><p>Countless businesses and enterprises choose Bitwarden to secure their interests</p></div></div></div><div><h5><span>Developer Products</span></h5><div><div><p>End-to-end encrypted secrets management for development, DevOps, and IT teams.</p></div><div><p>Unlock passkey features and more with just a few lines of code</p></div></div></div><div><h5><span>Explore More</span></h5></div></div></li><li><a aria-label="go to https://bitwarden.com/pricing/business/" id=":R99lnoq:7p5arAefD2xx42367Ouqy9" data-testid="cta-link" href="https://bitwarden.com/pricing/business/">Pricing</a></li><li><a aria-label="go to https://bitwarden.com/download/" id=":R9plnoq:7j6FxyqZqT1ICMOzINABJW" data-testid="cta-link" href="https://bitwarden.com/download/">Downloads</a></li><li><div><div><h5><span>Personal Plans Top Features</span></h5></div><div><h5><span>Business Plans Top Features</span></h5></div><div><h5><span>Top Tools</span></h5></div></div></li><li><div><div><h5><span>Resource Library</span></h5></div><div><h5><span>Security &amp; Trust</span></h5></div><div><h5><span>Training</span></h5></div></div></li></ul></div></nav><nav data-testid="bw-desktop-header"></nav></div><div><div data-testid="card-container" id="authenticator-hero"><h2 data-testid="card-tagline">Bitwarden Authenticator</h2><div data-testid="card-headline"><p>A simple authenticator to prove your identity online</p></div><div data-testid="card-subtext"> <h6>Bitwarden offers a standalone app that generates and stores all your two-step verification tokens so you stay more secure.&nbsp;</h6><h6><strong>Available on iOS and Android</strong></h6></div></div><div id="authenticator-more-than-strong-passwords"><div data-testid="card-container"><p data-testid="card-headline"><h3>You need more than strong passwords</h3></p><div data-testid="card-subtext"> <p>Use Bitwarden Authenticator to add an extra layer of protection to all your online accounts and applications</p></div></div><div data-testid="card-container"><p><img alt="authenticator-generate-codes" src="https://res.cloudinary.com/bw-com/image/upload/f_auto/v1/ctf/7rncvj1f8mw7/5SWvAP6G3T9lwHfWgzYspH/728f8906a6ff5b354e6121e8871c3449/authenticator-generate-codes.webp?_a=DAJCwlWIZAA0"></p><div data-testid="card-content"><p data-testid="card-headline"><h3>Easily generate authentication codes for all your accounts</h3></p><p>Generate verification codes to ensure your identity is verified, keeping your sensitive data out of reach of imposters.</p></div></div><div data-testid="card-container"><p><img alt="authenticator-scan-qr" src="https://res.cloudinary.com/bw-com/image/upload/f_auto/v1/ctf/7rncvj1f8mw7/25GPMlQM9ckGXIJyHRI5Wq/abd222763fb17bb9dd0c38e931855a05/authenticator-scan-qr.webp?_a=DAJCwlWIZAA0"></p><div data-testid="card-content"><p data-testid="card-headline"><h3>Quickly scan a QR code to add a new authentication code</h3></p><p>A simple, intuitive design and straightforward interface makes it easy to start incorporating authentication into your digital life.</p></div></div></div><section id="customers-love-bitwarden-authenticator"><p><h3>Customers love Bitwarden Authenticator</h3></p><div><div data-testid="card-container"> <h5>“Very smooth and fast”</h5></div><div data-testid="card-container"> <h5>“Great authenticator app works well, I look forward to see the additional features that will be added soon”</h5></div></div></section><div id="authenticator-faqs"><p><h3>FAQs</h3></p><div><div><p>Bitwarden Authenticator is a standalone app that is available for everyone, even those who don’t use Bitwarden Password Manager.&nbsp;&nbsp;</p></div><div><p>In its current release, Bitwarden Authenticator generates time-based one-time passwords (TOTP) for users who want to add an extra layer of authentication to their logins.</p></div><div><p>Integrated TOTP authentication is a premium feature in Bitwarden Password Manager. Bitwarden Authenticator is a free standalone mobile app that generates TOTP codes for any online service that supports them. Bitwarden Authenticator can be used without a Bitwarden account.</p></div><div><p>Yes! Many Bitwarden users have asked for a standalone authenticator in which to store their verification codes used to access their Bitwarden account. It is important to write down and store your Password Manager recovery codes in a secure place.&nbsp;</p></div><div><p>Yes, these are separate applications.</p></div><div><p>In this initial release, your data will be backed up through the mobile operating system's backup services. Please make sure your device is turned on and configured for backups. Bitwarden Authenticator data is included in the OS backups and will be restored with them.</p></div><div><p>Yes! Bitwarden Authenticator is open source and available at the following GitHub repositories for <a href="https://github.com/bitwarden/authenticator-android" target="_blank" rel="noopener noreferrer">Android</a> and <a href="https://github.com/bitwarden/authenticator-ios" target="_blank" rel="noopener noreferrer">iOS</a>.</p></div><div><p>New features on the roadmap include import, syncing to Bitwarden accounts, push-based 2FA, and account recovery.&nbsp;</p></div></div></div><section id="bitwarden-authenticator-mobile"><p><h3>Bitwarden Authenticator Mobile App</h3></p></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Jq-Like Tool for Markdown (254 pts)]]></title>
            <link>https://github.com/yshavit/mdq</link>
            <guid>43152704</guid>
            <pubDate>Sun, 23 Feb 2025 20:05:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/yshavit/mdq">https://github.com/yshavit/mdq</a>, See on <a href="https://news.ycombinator.com/item?id=43152704">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">mdq: jq for Markdown</h2><a id="user-content-mdq-jq-for-markdown" aria-label="Permalink: mdq: jq for Markdown" href="#mdq-jq-for-markdown"></a></p>
<p dir="auto"><a href="https://github.com/yshavit/mdq/actions/workflows/coverage.yml?query=branch%3Amain"><img src="https://camo.githubusercontent.com/e00250a78d40dd1b59825a23f22254a4a45a693289697ee25aeb939e0d68c047/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d2532467973686176697425324635333930316130313135623539366530313561383931633431666230663235362532467261772532466d64712d636f7665726167652e6a736f6e" alt="Code Coverage" data-canonical-src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fyshavit%2F53901a0115b596e015a891c41fb0f256%2Fraw%2Fmdq-coverage.json"></a>
<a href="https://github.com/yshavit/mdq/actions/workflows/rust.yml?query=branch%3Amain"><img src="https://github.com/yshavit/mdq/actions/workflows/rust.yml/badge.svg" alt="Build status"></a>
<a href="https://github.com/search?q=repo%3Ayshavit%2Fmdq+NOT+path%3A.github%2Fworkflows%2Fcoverage.yml+NOT+path%3AREADME.md+todo&amp;type=code"><img src="https://camo.githubusercontent.com/fa2d0ff288b4ea8442ba13e1a2d3e9723f2b7fb8f7f388140871cff364dda3bb/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d2532467973686176697425324665376139653965373236353164613064376432623166626265353632333764302532467261772532466d64712d746f646f732e6a736f6e" alt="Pending TODOs" data-canonical-src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fyshavit%2Fe7a9e9e72651da0d7d2b1fbbe56237d0%2Fraw%2Fmdq-todos.json"></a>
<a href="https://github.com/search?q=repo%3Ayshavit%2Fmdq+%28%28path%3A%2F%5C.rs%24%2F+%22%23%5Bignore%5D%22%29+OR+%28path%3Atests%2Fmd_cases+%2F%5Eignore%2F%29%29&amp;type=code"><img src="https://camo.githubusercontent.com/24b941eb55a662fac1b55cd6f1678fb3d2186c8a79241607d3d04bc4a4f75033/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d2532467973686176697425324637383261386463356637376432636634623163373734646137323633366630302532467261772532466d64712d69676e6f726564732e6a736f6e" alt="Ignored tests" data-canonical-src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fyshavit%2F782a8dc5f77d2cf4b1c774da72636f00%2Fraw%2Fmdq-ignoreds.json"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What is mdq?</h2><a id="user-content-what-is-mdq" aria-label="Permalink: What is mdq?" href="#what-is-mdq"></a></p>
<p dir="auto">mdq aims to do for Markdown what jq does for JSON: provide an easy way to zero in on specific parts of a document.</p>
<p dir="auto">For example, GitHub PRs are Markdown documents, and some organizations have specific templates with checklists for all
reviewers to complete. Enforcing these often requires ugly regexes that are a pain to write and worse to debug. Instead,
you can (for example) ask mdq for all uncompleted tasks:</p>

<p dir="auto">mdq is available under the Apache 2.0 or MIT licenses, at your option. I am open to other permissive licenses, if you
have one you prefer.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Any of these will work:</p>
<ol dir="auto">
<li>
<div dir="auto" data-snippet-clipboard-copy-content="cargo install --git https://github.com/yshavit/mdq"><pre>cargo install --git https://github.com/yshavit/mdq</pre></div>
</li>
<li>Download binaries from <a href="https://github.com/yshavit/mdq/releases/latest">the latest release</a> (or any other release, of course).</li>
<li>You can also grab the binaries from the latest <a href="https://github.com/yshavit/mdq/actions/workflows/build-release.yml">build-release</a> workflow run. You must be logged into GitHub to do
that (this is GitHub's limitation, not mine). You'll have to <code>chmod +x</code> them before you can run them.</li>
</ol>
<details>
<summary>Security concerns</summary>
The release and latest-workflow binaries are built on GitHub's servers, so if you trust my code (and dependencies), and you trust GitHub,
you can trust the binaries. See <a href="https://github.com/yshavit/mdq/wiki/Release-binaries">https://github.com/yshavit/mdq/wiki/Release-binaries</a> for information on how to verify them.
 </details>
<p dir="auto"><h2 tabindex="-1" dir="auto">Basic Usage</h2><a id="user-content-basic-usage" aria-label="Permalink: Basic Usage" href="#basic-usage"></a></p>
<p dir="auto">Simple example to select sections containing "usage":</p>
<div dir="auto" data-snippet-clipboard-copy-content="cat example.md | mdq '# usage'"><pre>cat example.md <span>|</span> mdq <span><span>'</span># usage<span>'</span></span></pre></div>
<p dir="auto">Use pipe (<code>|</code>) to chain filters together. For example, to select sections containing "usage", and within those find
all unordered list items:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cat example.md | mdq '# usage | -'"><pre>cat example.md <span>|</span> mdq <span><span>'</span># usage | -<span>'</span></span></pre></div>
<p dir="auto">The filter syntax is designed to mirror Markdown syntax. You can select...</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Element</th>
<th>Syntax</th>
</tr>
</thead>
<tbody>
<tr>
<td>Sections</td>
<td><code># title text</code></td>
</tr>
<tr>
<td>Lists</td>
<td><code>- unordered list item text</code></td>
</tr>
<tr>
<td>"</td>
<td><code>1. ordered list item text</code></td>
</tr>
<tr>
<td>"</td>
<td><code>- [ ] uncompleted task</code></td>
</tr>
<tr>
<td>"</td>
<td><code>- [x] completed task</code></td>
</tr>
<tr>
<td>"</td>
<td><code>- [?] any task</code></td>
</tr>
<tr>
<td>Links</td>
<td><code>[display text](url)</code></td>
</tr>
<tr>
<td>Images</td>
<td><code>![alt text](url)</code></td>
</tr>
<tr>
<td>Block quotes</td>
<td><code>&gt; block quote text</code></td>
</tr>
<tr>
<td>Code blocks</td>
<td><code> ```language &lt;code block text&gt;</code></td>
</tr>
<tr>
<td>Raw HTML</td>
<td><code>&lt;/&gt; html_tag</code></td>
</tr>
<tr>
<td>Plain paragraphs</td>
<td><code>P: paragraph text </code></td>
</tr>
<tr>
<td>Tables</td>
<td><code>:-: header text :-: row text</code></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">(Tables selection differs from other selections in that you can actually select only certain headers and rows, such that
the resulting element is of a different shape than the original. See the wiki for more.)</p>
<p dir="auto">In any of the above, the text may be:</p>
<ul dir="auto">
<li>an <code>unquoted string</code> that starts with a letter; this is case-insensitive</li>
<li>a <code>"quoted string"</code> (either single or double quotes); this is case-sensitive</li>
<li>a string (quoted or unquoted) anchored by <code>^</code> or <code>$</code> (for start and end of string, respectively)</li>
<li>a <code>/regex/</code></li>
<li>omitted or <code>*</code>, to mean "any"</li>
</ul>
<p dir="auto">See the <a href="https://github.com/yshavit/mdq/wiki/Tutorial">tutorial</a> for a bit more detail, and <a href="https://github.com/yshavit/mdq/wiki/Full-User-Manual">user manual</a> for the full picture.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[European word translator: an interactive map showing words in over 30 languages (223 pts)]]></title>
            <link>https://ukdataexplorer.com/european-translator/</link>
            <guid>43152587</guid>
            <pubDate>Sun, 23 Feb 2025 19:53:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ukdataexplorer.com/european-translator/">https://ukdataexplorer.com/european-translator/</a>, See on <a href="https://news.ycombinator.com/item?id=43152587">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrap">
          
        
	<div id="intro-div">
          

          <p>
            Enter one or two lower-case English words to see translations from Google Translate.
          </p>

          
           
          

<p>
            Examples:&nbsp;&nbsp;
            <a href="https://ukdataexplorer.com/european-translator/?word=banana">banana</a>&nbsp;&nbsp;&nbsp;&nbsp;
            <a href="https://ukdataexplorer.com/european-translator/?word=the+cat">the cat</a>&nbsp;&nbsp;&nbsp;&nbsp;
            <a href="https://ukdataexplorer.com/european-translator/?word=she+runs">she runs</a>
          </p><p>Random words:&nbsp;&nbsp;
        <a href="https://ukdataexplorer.com/european-translator/?word=control">control</a>&nbsp;&nbsp;&nbsp;
        <a href="https://ukdataexplorer.com/european-translator/?word=prompt">prompt</a>
        </p>   


          <p>
            A few things to keep in mind:
          </p>

          <ul>
              <li>Translations are generated by Google Translate. Some may be inaccurate or use non-European (e.g. Brazilian Portuguese) words.</li>
              <li>Just one translation is provided for each word; watch out for words with multiple meanings!</li>
              <li>The Google Translate API does not yet translate into all <a href="https://en.wikipedia.org/wiki/Languages_of_Europe">European languages</a>.</li>
              <li id="same-word-warning">
                                         If Google Translate cannot find a translation, it simply shows the English word.
                                         
              </li> 
          </ul>  

        </div>
	
	

        <div id="map">
          <p><img src="https://ukdataexplorer.com/european-translator/europe_v4.png" width="700" height="700" alt="Map of Europe"></p>
          
        </div> 

        
        <p>
	     This page was inspired by
	     the <a href="https://www.reddit.com/r/etymologymaps">etymology maps</a> by Bezbojnicul on reddit.
	     
	     It was built using <a href="https://d3js.org/">D3</a>, maps from
	     <a href="https://www.naturalearthdata.com/">Natural Earth</a>,
	    and the Google Translate API. The translations were retrieved around 2014, and unfortunately this page is not currently set up to get
	    new translations.
	    
	    You can <a href="https://ko-fi.com/jamestrimble">contribute</a> a few pounds towards the web hosting costs for this site if you really want to!
	    
	    Contact <a href="mailto:james@ukdataexplorer.com">James Trimble</a>.
	  </p>
	

  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI-designed chips are so weird that 'humans cannot understand them' (131 pts)]]></title>
            <link>https://www.livescience.com/technology/computing/humans-cannot-really-understand-them-weird-ai-designed-chip-is-unlike-any-other-made-by-humans-and-performs-much-better</link>
            <guid>43152407</guid>
            <pubDate>Sun, 23 Feb 2025 19:36:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.livescience.com/technology/computing/humans-cannot-really-understand-them-weird-ai-designed-chip-is-unlike-any-other-made-by-humans-and-performs-much-better">https://www.livescience.com/technology/computing/humans-cannot-really-understand-them-weird-ai-designed-chip-is-unlike-any-other-made-by-humans-and-performs-much-better</a>, See on <a href="https://news.ycombinator.com/item?id=43152407">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-body">
<p>Engineering researchers have demonstrated that <a data-analytics-id="inline-link" href="https://www.livescience.com/technology/artificial-intelligence/what-is-artificial-intelligence-ai" data-before-rewrite-localise="https://www.livescience.com/technology/artificial-intelligence/what-is-artificial-intelligence-ai"><u>artificial intelligence</u></a> (AI) can design complex wireless chips in hours, a feat that would have taken humans weeks to complete.</p><p>Not only did the chip designs prove more efficient, the AI took a radically different approach — one that a human circuit designer would have been highly unlikely to devise. The researchers outlined their findings in a study published Dec. 30 2024 in the journal <a data-analytics-id="inline-link" href="https://go.redirectingat.com/?id=92X1590019&amp;xcust=livescience_us_2108479701703175732&amp;xs=1&amp;url=https%3A%2F%2Fwww.nature.com%2Farticles%2Fs41467-024-54178-1%23Fig1&amp;sref=https%3A%2F%2Fwww.livescience.com%2Ftechnology%2Fcomputing%2Fhumans-cannot-really-understand-them-weird-ai-designed-chip-is-unlike-any-other-made-by-humans-and-performs-much-better" target="_blank" data-url="https://www.nature.com/articles/s41467-024-54178-1#Fig1" referrerpolicy="no-referrer-when-downgrade" rel="sponsored noopener" data-hl-processed="skimlinks" data-placeholder-url="https://go.redirectingat.com/?id=92X1590019&amp;xcust=hawk-custom-tracking&amp;xs=1&amp;url=https%3A%2F%2Fwww.nature.com%2Farticles%2Fs41467-024-54178-1%23Fig1&amp;sref=https%3A%2F%2Fwww.livescience.com%2Ftechnology%2Fcomputing%2Fhumans-cannot-really-understand-them-weird-ai-designed-chip-is-unlike-any-other-made-by-humans-and-performs-much-better" data-google-interstitial="false" data-merchant-name="SkimLinks - nature.com" data-merchant-network="SkimLinks"><u>Nature Communications</u></a>.</p><p>The research focused on millimeter-wave (mm-Wave) wireless chips, which present some of the biggest challenges facing manufacturers due to their complexity and need for miniaturization. These chips are used in 5G modems, now commonly found in phones.</p><p>Manufacturers currently rely on a mix of human expertise, bespoke circuit designs and established templates. Each new design then goes through a slow process of optimization, based on trial and error because it is often so complex that a human cannot fully understand what is happening inside the chip. This leads to a cautious, iterative approach based on what has worked before.</p><p><strong>Related: </strong><a data-analytics-id="inline-link" href="https://www.livescience.com/technology/communications/6g-speeds-hit-100-gbps-in-new-test-500-times-faster-than-average-5g-cellphones" data-before-rewrite-localise="https://www.livescience.com/technology/communications/6g-speeds-hit-100-gbps-in-new-test-500-times-faster-than-average-5g-cellphones"><u><strong>6G speeds hit 100 Gbps in new test — 500 times faster than average 5G cellphones</strong></u></a></p><p>In this case, however, researchers at Princeton Engineering and the Indian Institute of Technology posited that deep-learning-based AI models could use an inverse design method — one that specifies the desired output and leaves the algorithm to determine the inputs and parameters.</p><p>The AI also considers each chip as a single artifact, rather than a collection of existing elements that need to be combined. This means that established chip design templates, the ones that no one understands but probably hide inefficiencies, are cast aside.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-xiikbftj8TES5ZwZuHesND"><section><p>Get the world’s most fascinating discoveries delivered straight to your inbox.</p></section></div><h2 id="the-future-of-chip-design-3">The future of chip design?</h2><p>In this experiment, the resulting structures "look randomly shaped," said lead author <a data-analytics-id="inline-link" href="https://ece.princeton.edu/people/kaushik-sengupta" target="_blank" data-url="https://ece.princeton.edu/people/kaushik-sengupta" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>Kaushik Sengupta</u></a>, a professor of electrical and computer engineering at Princeton. "Humans cannot really understand them."</p><p>And when Sengupta’steam manufactured the chips, they found the AI creations hit performance levels beyond those of existing designs.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-320-80.jpg" alt="An enlarged image of the chip’s circuitry shows unusual patterns." srcset="https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/JMWBJBwmLuex5soTvYMtW5.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Princeton University)</span></figcaption></figure><p>Although the findings suggest that the design of such complex chips could be handed over to AI, Sengputa was keen to point out that pitfalls remain “that still require human designers to correct.” In particular, many of the designs produced by the algorithm did not work– equivalent to the "<a data-analytics-id="inline-link" href="https://www.livescience.com/technology/artificial-intelligence/ai-isnt-hallucinating-its-bullshitting" data-before-rewrite-localise="https://www.livescience.com/technology/artificial-intelligence/ai-isnt-hallucinating-its-bullshitting"><u>hallucinations</u></a>" produced by current generative AI tools.</p><p>"The point is not to replace human designers with tools," said Sengputa. "The point is to enhance productivity with new tools."</p><p>The speed with which iterative designs can be developed opens up new possibilities, too. Some chip designs can be geared towards energy efficiency, others to outright performance or to extending the frequency range.</p><p>Wireless chips are of growing importance, with an ever-growing demand for miniaturization, so this research is a valuable step forward. But Sengupta said that if his team’s method can be extended to other parts of a circuit’s design, it could change the way we design electronics in the future. "This is just the tip of the iceberg in terms of what the future holds for the field."</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lobsters blocking UK users because of the Online Safety Act (127 pts)]]></title>
            <link>https://lobste.rs/s/ukosa1/uk_users_lobsters_needs_your_help_with</link>
            <guid>43152178</guid>
            <pubDate>Sun, 23 Feb 2025 19:15:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lobste.rs/s/ukosa1/uk_users_lobsters_needs_your_help_with">https://lobste.rs/s/ukosa1/uk_users_lobsters_needs_your_help_with</a>, See on <a href="https://news.ycombinator.com/item?id=43152178">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>Hey folks,</p>
<p>The UK’s <a href="https://www.legislation.gov.uk/ukpga/2023/50/contents" rel="ugc">Online Safety Act</a> is scheduled to take effect on <strong>March 16, 2025</strong>.
Lobsters can’t comply with it and needs your help to avoid having to geoblock the UK.</p>
<p>The Online Safety Act regulates most sites where users can interact with each other.
The law explicitly claims authority over all forums with <a href="https://www.legislation.gov.uk/ukpga/2023/50/section/227" rel="ugc">visitors located in the UK</a>, regardless of where they are hosted or the nationality of their owners.</p>
<p>As a practical matter, Lobsters can’t comply.
The OSA is written for commercial sites far bigger than this <a href="https://lobste.rs/s/95uler/would_there_be_interest_patreon_for#c_9l58ia" rel="ugc">non-commercial, hobbyist</a> forum.
The regulator’s <a href="https://www.ofcom.org.uk/online-safety/" rel="ugc">statements</a> include many long, cross-referenced legalese documents
(an incomplete sample, because I can’t find a directory):
<a href="https://www.ofcom.org.uk/siteassets/resources/documents/online-safety/information-for-industry/illegal-harms/summary-of-each-chapter.pdf?v=387528" rel="ugc">1</a>
<a href="https://www.ofcom.org.uk/siteassets/resources/documents/online-safety/information-for-industry/roadmap/2024/ofcoms-approach-to-implementing-the-online-safety-act-2024.pdf?v=383285" rel="ugc">2</a>
<a href="https://www.ofcom.org.uk/siteassets/resources/documents/online-safety/information-for-industry/illegal-harms/risk-assessment-guidance-and-risk-profiles.pdf?v=388231" rel="ugc">3</a>
<a href="https://www.ofcom.org.uk/siteassets/resources/documents/online-safety/information-for-industry/illegal-harms/summary-of-our-decisions.pdf?v=387523" rel="ugc">4</a>
<a href="https://www.ofcom.org.uk/siteassets/resources/documents/online-safety/information-for-industry/illegal-harms/illegal-content-codes-of-practice-for-user-to-user-services.pdf?v=387711" rel="ugc">5</a>.
Sites are required to produce lengthy documentation about their features, practices, and risks - both up-front and as they moderate.
Attempting to understand which sections apply and how to comply would be a huge project.
Doing so <em>correctly</em> would require legal advice we <a href="https://lobste.rs/s/ffd4xt/lfgss_microcosm_shutting_down_16th_march#c_cdfjmr" rel="ugc">can’t afford</a>.
The cost in time and money to implement the bureaucratic processes it demands also outstrip a hobbyist forum.</p>
<p>There’s also an ideological matter, that Lobsters is not a UK entity or operated in its jurisdiction.
The OSA isn’t written to directly regulate the UK’s occupants, it exerts authority over non-UK maintainers of sites that UK occupants read.
Even if the OSA was proportionate and reasonable, complying would encourage every jurisdiction to write similarly broad laws.</p>
<p>The OSA’s civil penalties run up to $22 million USD, and it includes also criminal penalties.
While poor and despotic countries have written laws to curtail freedom of speech internationally online (usually a broadly over-enforced “no criticizing the rulers”), as a practical matter those have been vanishingly unlikely to be enforced against Western citizens.
Because the UK is wealthy, powerful, and threatening large penalties, I can’t ignore the risk that the UK attempts to enforce the law against Lobsters, perhaps to make a political point against American Big Tech as <a href="https://www.verdict.co.uk/osa-mandates-illegal-content-risk-assessments/" rel="ugc">promised by the regulator</a>.</p>
<p>So the current, bad plan is that Lobsters will <a href="https://github.com/lobsters/lobsters/commit/259b9117edb8dfff289b54a68a17af6461f8815b" rel="ugc">geoblock the UK before the law takes effect</a> on March 16.
While the inaccuracy of IP databases and availability of VPNs mean that this can’t be perfectly accurate, unambiguously blocking UK occupants as effectively as we can is the only course I see to substantially reduce the risk the OSA is enforced against the site.</p>
<p><strong>UK users, we need you to please help improve this situation.</strong>
You have the local knowledge and political representation needed to address the OSA.
I can see a couple courses of action that would sufficiently mitigate the risk:</p>
<ul>
<li>Some kind of guidance or waiver from the implementing regulator <a href="https://en.wikipedia.org/wiki/Ofcom" rel="ugc">Ofcom</a> that this law won’t apply to Lobsters individually or as a class of non-UK, small, and/or noncommercial forums.</li>
<li>Delay or cancellation of the Parliamentary approval required for the regulator’s guidance to be adopted into legal effect, at least until something like the previous option can happen.</li>
<li>Legal advice from a UK lawyer that the law does not apply to Lobsters for some plausible reason.</li>
<li>A statement from the US <a href="https://en.wikipedia.org/wiki/United_States_Department_of_State" rel="ugc">Department of State</a> that it does not believe the law applies to American entities and a commitment to defend them against it.</li>
<li>Something else I haven’t thought of that would greatly reduce the risk the OSA is enforced against Lobsters.</li>
</ul>
<p>I’m reaching out to people I know who also run sites that will be affected by the OSA, in and out of the UK, to ask how they’re handling this.
I’m also reaching out to organizations that focus on online rights like the EFF and <a href="https://www.openrightsgroup.org/campaign/stop-state-censorship-of-online-speech/" rel="ugc">ORG</a>.
I’ll post update in the comments below so this story will be the best single resource to watch for news.</p>
<p>There’s more background info and thoughts in the <a href="https://lobste.rs/s/ffd4xt/lfgss_microcosm_shutting_down_16th_march" rel="ugc">story on LFGSS shutting down</a>, <a href="https://push.cx/stream/2024-12-19-uk-online-safety-act" rel="ugc">previous</a> and <a href="https://push.cx/stream/2025-01-06-hello-i-am-your-constitutent-from-chicago" rel="ugc">today’s</a> office hours streams, which include searchable transcripts.</p>
<p>There are a lot of distracting off-topic rabbit holes here like recent political events, international diplomacy, defining “free speech”, pretending to practice UK law, and many more - please do try to stay focused on the existential problem at hand.</p>
<p>Thanks for your help,</p>
<ul>
<li>Peter</li>
</ul>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In Memoriam – OnlineSafetyAct.co.uk (229 pts)]]></title>
            <link>https://onlinesafetyact.co.uk/in_memoriam/</link>
            <guid>43152154</guid>
            <pubDate>Sun, 23 Feb 2025 19:13:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://onlinesafetyact.co.uk/in_memoriam/">https://onlinesafetyact.co.uk/in_memoriam/</a>, See on <a href="https://news.ycombinator.com/item?id=43152154">Hacker News</a></p>
Couldn't get https://onlinesafetyact.co.uk/in_memoriam/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Grok 3 claims its system prompt includes censorship about Musk/Trump (173 pts)]]></title>
            <link>https://old.reddit.com/r/OpenAI/comments/1iw8eok/elon_musk_is_trying_to_censor_grok_3_which_the/</link>
            <guid>43151580</guid>
            <pubDate>Sun, 23 Feb 2025 18:17:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/OpenAI/comments/1iw8eok/elon_musk_is_trying_to_censor_grok_3_which_the/">https://old.reddit.com/r/OpenAI/comments/1iw8eok/elon_musk_is_trying_to_censor_grok_3_which_the/</a>, See on <a href="https://news.ycombinator.com/item?id=43151580">Hacker News</a></p>
Couldn't get https://old.reddit.com/r/OpenAI/comments/1iw8eok/elon_musk_is_trying_to_censor_grok_3_which_the/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Decades of Research Misconduct Stalled an Alzheimer's Cure (189 pts)]]></title>
            <link>https://www.sciencefriday.com/articles/doctored-book-excerpt/</link>
            <guid>43151320</guid>
            <pubDate>Sun, 23 Feb 2025 17:46:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.sciencefriday.com/articles/doctored-book-excerpt/">https://www.sciencefriday.com/articles/doctored-book-excerpt/</a>, See on <a href="https://news.ycombinator.com/item?id=43151320">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

	
	<p><em>The following is an excerpt from</em> <a href="https://bookshop.org/a/18570/9781668031247" target="_blank" rel="noopener">Doctored: Fraud, Arrogance, and Tragedy in the Quest to Cure Alzheimer’s</a><em><span> by Charles Piller.</span></em></p>
<p><span></span><em>When you purchase products through the Bookshop.org link on this page, Science Friday earns a small commission which helps support our journalism.</em></p>
<hr>
				<section>
										<img src="https://www.sciencefriday.com/wp-content/uploads/2025/02/doctored-9781668031247_hr.jpg?w=245&amp;h=350&amp;crop=1" data-old-src="https://www.sciencefriday.com/wp-content/themes/sciencefriday/images/bgs/bg-p.gif" data-src="https://www.sciencefriday.com/wp-content/uploads/2025/02/doctored-9781668031247_hr.jpg?w=245&amp;h=350&amp;crop=1">
					

											<h2>Buy The Book</h2>
																<p>Doctored: Fraud, Arrogance, and Tragedy in the Quest to Cure Alzheimer's</p>
																
									</section>

				<p>In December 2021, I fell into one of the biggest and most disturbing stories of my career. A credible whistleblower with strong credentials in dementia research tipped me to a major case of apparent misconduct in his field. He produced convincing evidence that lab studies at the heart of the dominant hypothesis for the cause of Alzheimer’s disease might have been based on bogus data. My investigative story for Science magazine in July 2022 exposed those findings and their far-reaching significance, drawing global media attention. But I didn’t suspect it would begin a yearslong, high-stakes journey into hidden, sordid corners of science and medicine.</p>
<p>Just a couple months later, two giant drug companies announced what many described as one of the most dramatic developments in the history of Alzheimer’s. For decades scientists had struggled fruitlessly to offer hope to millions of patients who suffer the gradual, debilitating decline in their ability to think and remember loved ones, or enjoy self-aware lives. Finally, a major test seemed to prove that a new medication could alter the course of the disease.</p>
<p>That drug, Leqembi, strips away from brain tissues the sticky plaques and other toxic compounds that comprise a substance called “amyloid-beta.” In so doing- said its makers, experts in their pay, and cheerleading <span>journalists—Leqembi definitively validated the “amyloid hypothesis,;” the long-debated notion that Alzheimer’s is caused by the buildup accumulation of amyloid in the brain. If true, its removal would lead to a cure. </span></p>
<p><span>Understandable excitement—hope against hope—greeted Leqembi. Alzheimer’s afflicts nearly seven million Americans, about one in every nine over the age of sixty-five, making it the fifth leading cause of death among the elderly. Up to 360,000 adults in the prime of life-including people as young as thirty-suffer from early onset Alzheimer’s. Comparable figures in the United Kingdom, Europe, and the rest of the world have made the leading cause of dementia a global scourge. And dementia totals will more than double by 2050. </span></p>
<p><span>In the United States alone, more than eleven million family members care for fathers and mothers and grandparents who have fallen prey to the cruel disease that begins by gradually stealing a person’s mastery of everyday life, then cherished memories, and finally the sense of self that makes each of us human. Alzheimer’s families face incalculable emotional costs—including lost dreams of retirement and pleasures with loving partners. For many, the disease also means financial impoverishment. Family caregivers in the United States provided a staggering $350 billion in care to Alzheimer’s patients in 2023—nearly matching the amount paid for dementia care by all other sources, including Medicare. </span></p>

					<a href="https://www.sciencefriday.com/segments/doctored-alzheimers-research-book/" title="Investigating Fraud At The Heart Of Alzheimer’s Research">
			<div>
				<p><span>Related Segment</span></p><h2>Investigating Fraud At The Heart Of Alzheimer’s Research</h2>
			</div>
		</a>
		<p><span>Unfortunately, the Leqembi “breakthrough” amounted to just this: Alzheimer’s patients lost their ability to remember, think clearly, and live normal lives only slightly less rapidly than others taking a bogus treatment. The drug offers so modest a benefit that doctors and patients might not perceive any effect whatsoever. </span></p>
<p><span>It was the latest example of the exaggeration, hype, and sheer fakery and fraud that has characterized Alzheimer’s research for decades. By then I realized that I could tell the full story of how the hunt to cure the insidious and chilling illness went awry. I had to show why billions of dollars in spending by governments, pharma companies, and philanthropies had done little for desperate patients. </span></p>
<p><span>For decades, proponents of the dominant amyloid hypothesis have sidelined, starved for resources, and even bullied rebels behind other promising notions of how to treat Alzheimer’s. If Leqembi and look-alikes with similarly lackluster results hold sway in drug development and dominate mindshare among patients and doctors, a genuine Alzheimer’s cure might become even more remote. </span></p>
<p><span>Many patients take a leap of faith in such drugs as a hedge against creeping fear. Big pharma companies, among others, bet their bottom lines on that basic instinct. Alzheimer’s research has offered endless opportunities for advancement and riches to corporate shysters and ruthlessly ambitious scientists who cut corners or engage in brazen deception. I set out to unmask decades of arrogance, greed, fabulism, and error that have emptied research coffers and littered the drug development landscape with failure after failure. </span></p>
<p><span>My reporting followed the path of a junior professor who faced great personal risks to challenge his field’s institutional powers. He uncovered hidden and fabricated data instrumental to keeping the amyloid hypothesis supreme at the expense of other possible solutions. As I dug deeper, a scientific under world of deceit and lies rose into view. I gradually saw an opportunity to help reshape how scientists, doctors, and patients understand one of the most terrible human afflictions-and add realistic hope in the process. </span></p>
<p><span>The story begins where it must, with a deeply determined patient struggling with dementia. He dared to hope that he could be one of the first people living with Alzheimer’s to find a transformative treatment.</span></p>
<hr>
<p>From <a href="https://bookshop.org/a/18570/9781668031247" target="_blank" rel="noopener">Doctored: Fraud, Arrogance, and Tragedy in the Quest to Cure Alzheimer’s</a> by Charles Piller. Copyright © 2025. Available from <span>Atria/One Signal Publishers.</span></p>

	<div>
		<h2>Meet the Writer</h2>
		<div>
													<p><a href="https://www.sciencefriday.com/person/charles-piller/">
							<img src="https://www.sciencefriday.com/wp-content/uploads/2020/01/Charles-Piller-pc-Mike-McGee.jpg?w=480&amp;h=420&amp;crop=1" data-old-src="https://www.sciencefriday.com/wp-content/themes/sciencefriday/images/bgs/bg-p.gif" data-src="https://www.sciencefriday.com/wp-content/uploads/2020/01/Charles-Piller-pc-Mike-McGee.jpg?w=480&amp;h=420&amp;crop=1">
							
						</a>
					</p>
				
				<div>
					
					<h3>About <a href="https://www.sciencefriday.com/person/charles-piller/" target="_blank">Charles Piller</a></h3>

											<p><a href="http://twitter.com/cpiller" target="_blank"><span>@</span>cpiller</a></p><p>Charles Piller is an investigative journalist with Science Magazine in Oakland, California and the author of <em>Doctored: Fraud, Arrogance, and Tragedy in the Quest to Cure Alzheimer’s.</em></p>
									</div>

			</div>
	</div>



	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WhiteSur: macOS-like theme for GTK desktops (252 pts)]]></title>
            <link>https://github.com/vinceliuice/WhiteSur-gtk-theme</link>
            <guid>43151294</guid>
            <pubDate>Sun, 23 Feb 2025 17:43:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme">https://github.com/vinceliuice/WhiteSur-gtk-theme</a>, See on <a href="https://news.ycombinator.com/item?id=43151294">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto"> WhiteSur GTK Theme </h2><a id="user-content--whitesur-gtk-theme-" aria-label="Permalink:  WhiteSur GTK Theme " href="#-whitesur-gtk-theme-"></a></p>
<p dir="auto"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/pictures/pictures/macbook.png"><img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/macbook.png"></a> </p>

<p dir="auto"> <b> A macOS like theme for Linux GTK Desktops </b> </p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Donate</h2><a id="user-content-donate" aria-label="Permalink: Donate" href="#donate"></a></p>
<p dir="auto">If you like my project, you can buy me a coffee, many thanks ❤️ !</p>
<p dir="auto"><span><a href="https://www.paypal.me/vinceliuice" title="Donate to this project using Paypal" rel="nofollow"><img src="https://camo.githubusercontent.com/c21c167e3d18a7e27002a00d0efde62d8a3e23dd0e6ee956b5745c9e71170410/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f7765627374617469632f6d6b74672f4c6f676f2f70702d6c6f676f2d31303070782e706e67" alt="PayPal donate button" data-canonical-src="https://www.paypalobjects.com/webstatic/mktg/Logo/pp-logo-100px.png"></a></span></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation is easy!</h2><a id="user-content-installation-is-easy" aria-label="Permalink: Installation is easy!" href="#installation-is-easy"></a></p>
<details> <summary> Required dependencies <b>(click to open)</b> </summary>
<p dir="auto"><h3 tabindex="-1" dir="auto">"Install from source" deps</h3><a id="user-content-install-from-source-deps" aria-label="Permalink: &quot;Install from source&quot; deps" href="#install-from-source-deps"></a></p>
<ul dir="auto">
<li>sassc</li>
<li>libglib2.0-dev-bin     <code>ubuntu 20.04</code></li>
<li>libglib2.0-dev         <code>ubuntu 18.04</code> <code>debian 10.03</code> <code>linux mint 19</code></li>
<li>libxml2-utils          <code>ubuntu 18.04</code> <code>debian 10.03</code> <code>linux mint 19</code></li>
<li>glib2-devel            <code>Fedora</code> <code>Redhat</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Misc deps</h3><a id="user-content-misc-deps" aria-label="Permalink: Misc deps" href="#misc-deps"></a></p>
<ul dir="auto">
<li>imagemagick            <code>(optional for GDM theme tweak)</code></li>
<li>dialog                 <code>(optional for installation in dialog mode)</code></li>
<li>optipng                <code>(optional for asset rendering)</code></li>
<li>inkscape               <code>(optional for asset rendering)</code></li>
</ul>
<p dir="auto">Don't worry, WhiteSur installer already provides all of those dependencies.</p>
</details>
<details> <summary> Recommended GNOME Shell extensions <b>(click to open)</b> </summary>
<ul dir="auto">
<li><a href="https://extensions.gnome.org/extension/19/user-themes/" rel="nofollow">user-themes</a> to enable gnome-shell theme (and not just the application theme)</li>
<li><a href="https://extensions.gnome.org/extension/307/dash-to-dock" rel="nofollow">dash-to-dock</a></li>
<li><a href="https://extensions.gnome.org/extension/3193/blur-my-shell" rel="nofollow">blur-my-shell</a></li>
</ul>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick install</h2><a id="user-content-quick-install" aria-label="Permalink: Quick install" href="#quick-install"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Installing from source</h3><a id="user-content-installing-from-source" aria-label="Permalink: Installing from source" href="#installing-from-source"></a></p>
<ol dir="auto">
<li>
<p dir="auto">Run <code>git clone https://github.com/vinceliuice/WhiteSur-gtk-theme.git --depth=1</code></p>
</li>
<li>
<p dir="auto">Run <code>./install.sh</code> to install the default WhiteSur GTK theme pack.</p>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Uninstall</h3><a id="user-content-uninstall" aria-label="Permalink: Uninstall" href="#uninstall"></a></p>
<ul dir="auto">
<li>uninstall Gtk themes: <code>./install.sh -r</code></li>
<li>uninstall GDM theme: <code>sudo ./tweaks.sh -g -r</code></li>
<li>uninstall Firefox theme: <code>./tweaks.sh -f -r</code></li>
<li>uninstall Flatpak Gtk themes: <code>./tweaks.sh -F -r</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">There's so many customizations you can do!</h2><a id="user-content-theres-so-many-customizations-you-can-do" aria-label="Permalink: There's so many customizations you can do!" href="#theres-so-many-customizations-you-can-do"></a></p>
<p dir="auto">Usage:  <code>./install.sh [OPTIONS...]</code></p>
<details> <summary> Options <b>(click to open)</b> </summary>
<div dir="auto" data-snippet-clipboard-copy-content="
OPTIONS:
  -d, --dest DIR
   Set destination directory. Default is '/home/[USER_NAME]/.themes'

  -n, --name NAME
   Set theme name. Default is 'WhiteSur'

  -o, --opacity [normal|solid]
   Set theme opacity variants. Repeatable. Default is all variants

  -c, --color [light|dark]
   Set theme color variants. Repeatable. Default is all variants

  -a, --alt [normal|alt|all]
   Set window control buttons variant. Repeatable. Default is 'normal'

  -t, --theme [default|blue|purple|pink|red|orange|yellow|green|grey|all]
   Set theme accent color. Repeatable. Default is BigSur-like theme

  -s, --scheme [standard|nord]
   Set theme colorscheme style. Repeatable. Default is 'standard'

  -m, --monterey 
   Set to MacOS Monterey style. 

  -N, --nautilus [stable|normal|mojave|glassy|right]
   Set Nautilus style. Default is BigSur-like style (stabled sidebar)

  -l, --libadwaita 
   Install theme into gtk4.0 config for libadwaita. Default is dark version

  -f, --fixed 
   Install fixed accent color version. Default is adaptive version

  -HD, --highdefinition 
   Set to High Definition size. Default is laptop size

  --shell, --gnomeshell 
   Tweaks for gnome-shell. Options:

     1. -i, -icon [apple|simple|gnome|ubuntu|tux|arch|manjaro|fedora|debian|void|opensuse|popos|mxlinux|zorin|budgie|gentoo]
     Set gnome-shell panel 'Activities' icon. Default is 'standard'

     2. -b, -background [default|blank|IMAGE_PATH]
     Set gnome-shell background image. Default is BigSur-like wallpaper

     3. -p, -panelopacity [default|30|45|60|75]
     Set gnome-shell panel transparency. Default is 15%

     4. -h, -panelheight [default|smaller|bigger]
     Set gnome-shell panel height size. Default is 32px

     5. -sf, -smallerfont 
     Set gnome-shell font size to smaller (10pt). Default is 11pt

     6. normal, -normal 
     Set gnome-shell show apps button style to normal. Default is BigSur

  --round, --roundedmaxwindow 
   Set maximized window to rounded. Default is square

  --black, --blackfont 
   Set panel font color to black. Default is white

  --darker, --darkercolor 
   Install darker 'WhiteSur' dark themes. 

  --dialog, --interactive 
   Run this installer interactively, with dialogs. 

  --silent-mode 
   Meant for developers: ignore any confirm prompt and params become more strict. 

  -r, --remove, -u, --uninstall 
   Remove all installed WhiteSur themes. 

  -h, --help 
   Show this help. 
"><pre>OPTIONS:
  -d, --dest DIR
   Set destination directory. Default is <span><span>'</span>/home/[USER_NAME]/.themes<span>'</span></span>

  -n, --name NAME
   Set theme name. Default is <span><span>'</span>WhiteSur<span>'</span></span>

  -o, --opacity [normal<span>|</span>solid]
   Set theme opacity variants. Repeatable. Default is all variants

  -c, --color [light<span>|</span>dark]
   Set theme color variants. Repeatable. Default is all variants

  -a, --alt [normal<span>|</span>alt<span>|</span>all]
   Set window control buttons variant. Repeatable. Default is <span><span>'</span>normal<span>'</span></span>

  -t, --theme [default<span>|</span>blue<span>|</span>purple<span>|</span>pink<span>|</span>red<span>|</span>orange<span>|</span>yellow<span>|</span>green<span>|</span>grey<span>|</span>all]
   Set theme accent color. Repeatable. Default is BigSur-like theme

  -s, --scheme [standard<span>|</span>nord]
   Set theme colorscheme style. Repeatable. Default is <span><span>'</span>standard<span>'</span></span>

  -m, --monterey 
   Set to MacOS Monterey style. 

  -N, --nautilus [stable<span>|</span>normal<span>|</span>mojave<span>|</span>glassy<span>|</span>right]
   Set Nautilus style. Default is BigSur-like style (stabled sidebar)

  -l, --libadwaita 
   Install theme into gtk4.0 config <span>for</span> libadwaita. Default is dark version

  -f, --fixed 
   Install fixed accent color version. Default is adaptive version

  -HD, --highdefinition 
   Set to High Definition size. Default is laptop size

  --shell, --gnomeshell 
   Tweaks <span>for</span> gnome-shell. Options:

     1. -i, -icon [apple<span>|</span>simple<span>|</span>gnome<span>|</span>ubuntu<span>|</span>tux<span>|</span>arch<span>|</span>manjaro<span>|</span>fedora<span>|</span>debian<span>|</span>void<span>|</span>opensuse<span>|</span>popos<span>|</span>mxlinux<span>|</span>zorin<span>|</span>budgie<span>|</span>gentoo]
     Set gnome-shell panel <span><span>'</span>Activities<span>'</span></span> icon. Default is <span><span>'</span>standard<span>'</span></span>

     2. -b, -background [default<span>|</span>blank<span>|</span>IMAGE_PATH]
     Set gnome-shell background image. Default is BigSur-like wallpaper

     3. -p, -panelopacity [default<span>|</span>30<span>|</span>45<span>|</span>60<span>|</span>75]
     Set gnome-shell panel transparency. Default is 15%

     4. -h, -panelheight [default<span>|</span>smaller<span>|</span>bigger]
     Set gnome-shell panel height size. Default is 32px

     5. -sf, -smallerfont 
     Set gnome-shell font size to smaller (10pt). Default is 11pt

     6. normal, -normal 
     Set gnome-shell show apps button style to normal. Default is BigSur

  --round, --roundedmaxwindow 
   Set maximized window to rounded. Default is square

  --black, --blackfont 
   Set panel font color to black. Default is white

  --darker, --darkercolor 
   Install darker <span><span>'</span>WhiteSur<span>'</span></span> dark themes. 

  --dialog, --interactive 
   Run this installer interactively, with dialogs. 

  --silent-mode 
   Meant <span>for</span> developers: ignore any confirm prompt and params become more strict. 

  -r, --remove, -u, --uninstall 
   Remove all installed WhiteSur themes. 

  -h, --help 
   Show this help. 
</pre></div>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">Fix for libadwaita (not perfect)</h2><a id="user-content-fix-for-libadwaita-not-perfect" aria-label="Permalink: Fix for libadwaita (not perfect)" href="#fix-for-libadwaita-not-perfect"></a></p>
<details> <summary> Details <b>(click to open)</b> </summary>
<p dir="auto">Since the release of <code>Gnome 43.0</code>, more and more built-in apps use <code>libadwaita</code> now, and libadwaita does not support custom themes, which means we cannot change the appearance of app using libadwaita through <code>gnome-tweaks</code> or <code>dconf-editor</code>. For users who love custom themes, it’s really sucks!</p>
<p dir="auto">Anyway if anybody who still want to custom themes we can only do this way:</p>
<p dir="auto">that is to use the <code>theme file</code> to overwrite the <code>gtk-4.0 configuration file</code>. The result is that only Fixed making all gtk4 apps use one theme and cannot be switched (even can not switch to dark mode) If you want to change a theme, you can only re-overwrite the <code>gtk-4.0 configuration file</code> with a new theme, I know this method is not perfect, But at the moment it is only possible to continue using themes for libadwaita's apps ...</p>
</details>
<p dir="auto">Run this command to install <code>WhiteSur</code> into <code>gtk-4.0 configuration folder</code> ($HOME/.config/gtk-4.0)</p>
<div dir="auto" data-snippet-clipboard-copy-content="./install.sh -l                # Default is the normal dark theme
./install.sh -l -c light       # install light theme for libadwaita"><pre>./install.sh -l                <span><span>#</span> Default is the normal dark theme</span>
./install.sh -l -c light       <span><span>#</span> install light theme for libadwaita</span></pre></div>
<div dir="auto"><h2 tabindex="-1" dir="auto"><p dir="auto"> <b> Change theme color and accent </b> </p></h2><a id="user-content---change-theme-color-and-accent--" aria-label="Permalink:  Change theme color and accent " href="#--change-theme-color-and-accent--"></a></div>
<p dir="auto"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/pictures/pictures/colors-themes.png"><img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/colors-themes.png"></a> </p>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Install theme accent</h4><a id="user-content---install-theme-accent" aria-label="Permalink: - Install theme accent" href="#--install-theme-accent"></a></p>
<p dir="auto">Parameter: <code>--theme</code> <code>-t</code> (repeatable)</p>
<p dir="auto">Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="./install.sh -t red            # install red theme accent only
./install.sh -t red -t green   # install red and green theme accents
./install.sh -t all            # install all available theme accents"><pre>./install.sh -t red            <span><span>#</span> install red theme accent only</span>
./install.sh -t red -t green   <span><span>#</span> install red and green theme accents</span>
./install.sh -t all            <span><span>#</span> install all available theme accents</span></pre></div>
<div dir="auto"><h2 tabindex="-1" dir="auto"><p dir="auto"> <b> Change Nautilus style </b> </p></h2><a id="user-content---change-nautilus-style--" aria-label="Permalink:  Change Nautilus style " href="#--change-nautilus-style--"></a></div>
<p dir="auto"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/pictures/pictures/nautilus.png"><img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/nautilus.png"></a> </p>
<p dir="auto">Parameter: <code>--nautilus</code> <code>-N</code></p>
<p dir="auto">Example: <code>./install.sh -N mojave</code></p>
<div dir="auto"><h2 tabindex="-1" dir="auto"><p dir="auto"> <b> Explore more customization features! </b> </p></h2><a id="user-content---explore-more-customization-features--" aria-label="Permalink:  Explore more customization features! " href="#--explore-more-customization-features--"></a></div>
<p dir="auto">You can run <code>./install.sh -h</code> to explore more customization features we have
like changing panel opacity, theme opacity (normal and solid variant), window
control button variant, etc.</p>
<div dir="auto"><h2 tabindex="-1" dir="auto"><p dir="auto"> <b> Let's tweak! </b> </p></h2><a id="user-content---lets-tweak--" aria-label="Permalink:  Let's tweak! " href="#--lets-tweak--"></a></div>
<p dir="auto">Usage:  <code>./tweaks.sh [OPTIONS...]</code></p>
<details> <summary> Options <b>(click to open)</b> </summary>
<div dir="auto" data-snippet-clipboard-copy-content="
OPTIONS:
  -o, --opacity [normal|solid]
   Set 'WhiteSur' GDM/Flatpak theme opacity variants. Default is 'normal'

  -c, --color [light|dark]
   Set 'WhiteSur' GDM/Flatpak theme color variants. Default is 'light'

  -t, --theme [default|blue|purple|pink|red|orange|yellow|green|grey]
   Set 'WhiteSur' GDM/Flatpak theme accent color. Default is BigSur-like theme

  -s, --scheme [standard|nord]
   Set 'WhiteSur' GDM/Flatpak theme colorscheme style. Default is 'standard'

   
 Tweaks for GDM theme. options

  -g, --gdm    Without options default GDM theme will install... 

      1. -i, -icon [apple|simple|gnome|ubuntu|tux|arch|manjaro|fedora|debian|void|opensuse|popos|mxlinux|zorin|budgie|gentoo]   Set GDM panel 'Activities' icon Default is 'standard'

      2. -b, -background [default|blank|IMAGE_PATH]   Set GDM background image Default is BigSur-like wallpaper

      3. -p, -panelopacity [default|30|45|60|75]   Set GDM panel transparency Default is 15%

      4. -h, -panelheight [default|smaller|bigger]   Set GDM panel height size Default is 32px

      5. -sf, -smallerfont    Set GDM font size to smaller (10pt) Default is 11pt

      6. -nd, -nodarken    Don't darken 'WhiteSur' GDM theme background image 

      7. -nb, -noblur    Don't blur 'WhiteSur' GDM theme background image 

   
 Tweaks for firefox. options

  -f, --firefox         [(monterey|flat)|alt|(darker|adaptive)]   Without options default WhiteSur theme will install...   Options:

      1. monterey       [3+3|3+4|3+5|4+3|4+4|4+5|5+3|5+4|5+5]   Topbar buttons number: 'a+b'   a: left side buttons number, b: right side buttons number

      2. flat           Monterey alt version    Flat round tabs...

      3. alt            Alt windows button version    Alt windows button style like gtk theme

      4. darker         Darker Firefox theme version    Darker Firefox theme version

      5. nord           Nord Firefox colorscheme version    Nord Firefox colorscheme version

      6. adaptive       Adaptive color version   You need install adaptive-tab-bar-colour plugin first   https://addons.mozilla.org/firefox/addon/adaptive-tab-bar-colour/

  -e, --edit-firefox [(monterey|flat)|alt|(darker|adaptive)]
   Edit 'WhiteSur' theme for Firefox settings and also connect the theme to the current Firefox profiles. 

   
 Others. options

  -F, --flatpak Support options: [-o, -c, -t...]   Connect 'WhiteSur' theme to Flatpak Without options will only install default themes

      1.  -o, --opacity [normal|solid]   Set 'WhiteSur' flatpak theme opacity variants Default is 'normal'

      2.  -c, --color [Light|Dark]   Set 'WhiteSur' flatpak theme color variants Default is 'light'

      3.  -t, --theme [default|blue|purple|pink|red|orange|yellow|green|grey]   Set 'WhiteSur' flatpak theme accent color Default is BigSur-like theme

      4.  -s, --scheme [standard|nord]   Set 'WhiteSur' flatpak theme colorscheme style Default is 'standard'

  -d, --dash-to-dock 
   Fixed Dash to Dock theme issue. 

  -r, --remove, --revert 
   Revert to the original themes, do the opposite things of install and connect. 

  --silent-mode 
   Meant for developers: ignore any confirm prompt and params become more strict. 

  -h, --help 
   Show this help. 
"><pre>OPTIONS:
  -o, --opacity [normal<span>|</span>solid]
   Set <span><span>'</span>WhiteSur<span>'</span></span> GDM/Flatpak theme opacity variants. Default is <span><span>'</span>normal<span>'</span></span>

  -c, --color [light<span>|</span>dark]
   Set <span><span>'</span>WhiteSur<span>'</span></span> GDM/Flatpak theme color variants. Default is <span><span>'</span>light<span>'</span></span>

  -t, --theme [default<span>|</span>blue<span>|</span>purple<span>|</span>pink<span>|</span>red<span>|</span>orange<span>|</span>yellow<span>|</span>green<span>|</span>grey]
   Set <span><span>'</span>WhiteSur<span>'</span></span> GDM/Flatpak theme accent color. Default is BigSur-like theme

  -s, --scheme [standard<span>|</span>nord]
   Set <span><span>'</span>WhiteSur<span>'</span></span> GDM/Flatpak theme colorscheme style. Default is <span><span>'</span>standard<span>'</span></span>

   
 Tweaks <span>for</span> GDM theme. options

  -g, --gdm    Without options default GDM theme will install... 

      1. -i, -icon [apple<span>|</span>simple<span>|</span>gnome<span>|</span>ubuntu<span>|</span>tux<span>|</span>arch<span>|</span>manjaro<span>|</span>fedora<span>|</span>debian<span>|</span>void<span>|</span>opensuse<span>|</span>popos<span>|</span>mxlinux<span>|</span>zorin<span>|</span>budgie<span>|</span>gentoo]   Set GDM panel <span><span>'</span>Activities<span>'</span></span> icon Default is <span><span>'</span>standard<span>'</span></span>

      2. -b, -background [default<span>|</span>blank<span>|</span>IMAGE_PATH]   Set GDM background image Default is BigSur-like wallpaper

      3. -p, -panelopacity [default<span>|</span>30<span>|</span>45<span>|</span>60<span>|</span>75]   Set GDM panel transparency Default is 15%

      4. -h, -panelheight [default<span>|</span>smaller<span>|</span>bigger]   Set GDM panel height size Default is 32px

      5. -sf, -smallerfont    Set GDM font size to smaller (10pt) Default is 11pt

      6. -nd, -nodarken    Don<span><span>'</span>t darken <span>'</span></span>WhiteSur<span><span>'</span> GDM theme background image </span>
<span></span>
<span>      7. -nb, -noblur    Don<span>'</span></span>t blur <span><span>'</span>WhiteSur<span>'</span></span> GDM theme background image 

   
 Tweaks <span>for</span> firefox. options

  -f, --firefox         [(monterey<span>|</span>flat)<span>|</span>alt<span>|</span>(darker<span>|</span>adaptive)]   Without options default WhiteSur theme will install...   Options:

      1. monterey       [3+3<span>|</span>3+4<span>|</span>3+5<span>|</span>4+3<span>|</span>4+4<span>|</span>4+5<span>|</span>5+3<span>|</span>5+4<span>|</span>5+5]   Topbar buttons number: <span><span>'</span>a+b<span>'</span></span>   a: left side buttons number, b: right side buttons number

      2. flat           Monterey alt version    Flat round tabs...

      3. alt            Alt windows button version    Alt windows button style like gtk theme

      4. darker         Darker Firefox theme version    Darker Firefox theme version

      5. nord           Nord Firefox colorscheme version    Nord Firefox colorscheme version

      6. adaptive       Adaptive color version   You need install adaptive-tab-bar-colour plugin first   https://addons.mozilla.org/firefox/addon/adaptive-tab-bar-colour/

  -e, --edit-firefox [(monterey<span>|</span>flat)<span>|</span>alt<span>|</span>(darker<span>|</span>adaptive)]
   Edit <span><span>'</span>WhiteSur<span>'</span></span> theme <span>for</span> Firefox settings and also connect the theme to the current Firefox profiles. 

   
 Others. options

  -F, --flatpak Support options: [-o, <span>-c</span>, <span>-t</span>...]   Connect <span><span>'</span>WhiteSur<span>'</span></span> theme to Flatpak Without options will only install default themes

      1.  -o, --opacity [normal<span>|</span>solid]   Set <span><span>'</span>WhiteSur<span>'</span></span> flatpak theme opacity variants Default is <span><span>'</span>normal<span>'</span></span>

      2.  -c, --color [Light<span>|</span>Dark]   Set <span><span>'</span>WhiteSur<span>'</span></span> flatpak theme color variants Default is <span><span>'</span>light<span>'</span></span>

      3.  -t, --theme [default<span>|</span>blue<span>|</span>purple<span>|</span>pink<span>|</span>red<span>|</span>orange<span>|</span>yellow<span>|</span>green<span>|</span>grey]   Set <span><span>'</span>WhiteSur<span>'</span></span> flatpak theme accent color Default is BigSur-like theme

      4.  -s, --scheme [standard<span>|</span>nord]   Set <span><span>'</span>WhiteSur<span>'</span></span> flatpak theme colorscheme style Default is <span><span>'</span>standard<span>'</span></span>

  -d, --dash-to-dock 
   Fixed Dash to Dock theme issue. 

  -r, --remove, --revert 
   Revert to the original themes, <span>do</span> the opposite things of install and connect. 

  --silent-mode 
   Meant <span>for</span> developers: ignore any confirm prompt and params become more strict. 

  -h, --help 
   Show this help. 
</pre></div>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">There's more themes you can try!</h2><a id="user-content-theres-more-themes-you-can-try" aria-label="Permalink: There's more themes you can try!" href="#theres-more-themes-you-can-try"></a></p>
<div dir="auto"><h3 tabindex="-1" dir="auto"><p dir="auto"> <b> Install and edit Firefox theme </b> </p></h3><a id="user-content---install-and-edit-firefox-theme--" aria-label="Permalink:  Install and edit Firefox theme " href="#--install-and-edit-firefox-theme--"></a></div>
<p dir="auto"> <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/master/src/other/firefox">
<img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/firefox.svg">
</a> </p>
<p dir="auto"><h4 tabindex="-1" dir="auto">- <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/master/src/other/firefox">Install Firefox theme</a></h4><a id="user-content---install-firefox-theme" aria-label="Permalink: - Install Firefox theme" href="#--install-firefox-theme"></a></p>
<p dir="auto">Parameter: <code>--firefox</code> <code>-f</code></p>
<p dir="auto">Example: <code>./tweaks.sh -f</code></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Edit Firefox theme</h4><a id="user-content---edit-firefox-theme" aria-label="Permalink: - Edit Firefox theme" href="#--edit-firefox-theme"></a></p>
<p dir="auto">Parameter: <code>--edit-firefox</code> <code>-e</code></p>
<p dir="auto">Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="./tweaks.sh -e           # edit the installed Firefox theme
./tweaks.sh -f -r        # remove installed Firefox theme
./tweaks.sh -f monterey  # install Monterey Firefox theme"><pre>./tweaks.sh -e           <span><span>#</span> edit the installed Firefox theme</span>
./tweaks.sh -f -r        <span><span>#</span> remove installed Firefox theme</span>
./tweaks.sh -f monterey  <span><span>#</span> install Monterey Firefox theme</span></pre></div>

<div dir="auto"><h3 tabindex="-1" dir="auto"><p dir="auto"> <b> Install and customize GDM theme </b> </p></h3><a id="user-content---install-and-customize-gdm-theme--" aria-label="Permalink:  Install and customize GDM theme " href="#--install-and-customize-gdm-theme--"></a></div>
<p dir="auto"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/pictures/pictures/gdm.png"><img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/gdm.png"></a> </p>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Install GDM theme</h4><a id="user-content---install-gdm-theme" aria-label="Permalink: - Install GDM theme" href="#--install-gdm-theme"></a></p>
<p dir="auto">Parameter: <code>--gdm</code> <code>-g</code> (requires to be run as root)</p>
<p dir="auto">Example: <code>sudo ./tweaks.sh -g</code></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Change the background</h4><a id="user-content---change-the-background" aria-label="Permalink: - Change the background" href="#--change-the-background"></a></p>
<p dir="auto">Parameter: <code>--background</code> <code>-b</code></p>
<p dir="auto">Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo ./tweaks.sh -g -b &quot;my picture.jpg&quot; # use the custom background
sudo ./tweaks.sh -g -b default          # use the default background
sudo ./tweaks.sh -g -b blank            # make it blank"><pre>sudo ./tweaks.sh -g -b <span><span>"</span>my picture.jpg<span>"</span></span> <span><span>#</span> use the custom background</span>
sudo ./tweaks.sh -g -b default          <span><span>#</span> use the default background</span>
sudo ./tweaks.sh -g -b blank            <span><span>#</span> make it blank</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Don't darken the background</h4><a id="user-content---dont-darken-the-background" aria-label="Permalink: - Don't darken the background" href="#--dont-darken-the-background"></a></p>
<p dir="auto">Parameter: <code>--nodarken</code> <code>-nd</code></p>
<p dir="auto">Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo ./tweaks.sh -g -nd                          # darken the default background
sudo ./tweaks.sh -g -nd -b &quot;wallpapers/snow.jpg&quot; # darken the custom background"><pre>sudo ./tweaks.sh -g -nd                          <span><span>#</span> darken the default background</span>
sudo ./tweaks.sh -g -nd -b <span><span>"</span>wallpapers/snow.jpg<span>"</span></span> <span><span>#</span> darken the custom background</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Don't blur the background</h4><a id="user-content---dont-blur-the-background" aria-label="Permalink: - Don't blur the background" href="#--dont-blur-the-background"></a></p>
<p dir="auto">Parameter: <code>--noblur</code> <code>-nb</code></p>
<p dir="auto">Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo ./tweaks.sh -g -nb                           # don't blur the default background
sudo ./tweaks.sh -g -nb -b &quot;wallpapers/rocks.jpg&quot; # don't blur the custom background"><pre>sudo ./tweaks.sh -g -nb                           <span><span>#</span> don't blur the default background</span>
sudo ./tweaks.sh -g -nb -b <span><span>"</span>wallpapers/rocks.jpg<span>"</span></span> <span><span>#</span> don't blur the custom background</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">- Do more GDM customizations</h4><a id="user-content---do-more-gdm-customizations" aria-label="Permalink: - Do more GDM customizations" href="#--do-more-gdm-customizations"></a></p>
<p dir="auto">You can do <a href="#theres-so-many-customizations-you-can-do">the similar customization features in <code>./install.sh</code></a>
like changing theme color (dark and light variant) and accent, GNOME Shell
'Activities' icon, etc. related to GDM. Run <code>./tweaks.sh -h</code> to explore!</p>

<div dir="auto"><h3 tabindex="-1" dir="auto"><p dir="auto"> <b> Fix for Flatpak </b> </p></h3><a id="user-content---fix-for-flatpak--" aria-label="Permalink:  Fix for Flatpak " href="#--fix-for-flatpak--"></a></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">1. Run command to fix it</h4><a id="user-content-1-run-command-to-fix-it" aria-label="Permalink: 1. Run command to fix it" href="#1-run-command-to-fix-it"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo flatpak override --filesystem=xdg-config/gtk-3.0 &amp;&amp; sudo flatpak override --filesystem=xdg-config/gtk-4.0"><pre>sudo flatpak override --filesystem=xdg-config/gtk-3.0 <span>&amp;&amp;</span> sudo flatpak override --filesystem=xdg-config/gtk-4.0</pre></div>
<p dir="auto">If you use flatpak apps, you can run this to fix theme issue</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">2. Connect WhiteSur theme to Flatpak (gtk 3.0) (Snap not support)</h4><a id="user-content-2-connect-whitesur-theme-to-flatpak-gtk-30-snap-not-support" aria-label="Permalink: 2. Connect WhiteSur theme to Flatpak (gtk 3.0) (Snap not support)" href="#2-connect-whitesur-theme-to-flatpak-gtk-30-snap-not-support"></a></p>
<p dir="auto">Parameter: <code>--flatpak</code> <code>-F</code></p>
<p dir="auto">Example: <code>./tweaks.sh -F</code></p>
<div dir="auto"><h2 tabindex="-1" dir="auto"><p dir="auto"> <b> Other recommended stuff </b> </p></h2><a id="user-content---other-recommended-stuff--" aria-label="Permalink:  Other recommended stuff " href="#--other-recommended-stuff--"></a></div>
<div dir="auto"><h3 tabindex="-1" dir="auto"><p dir="auto"> <b> WhiteSur Icon Theme </b> </p></h3><a id="user-content---whitesur-icon-theme--" aria-label="Permalink:  WhiteSur Icon Theme " href="#--whitesur-icon-theme--"></a></div>
<p dir="auto"> <a href="https://github.com/vinceliuice/WhiteSur-icon-theme">
  <img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/icon-theme.png">
</a> </p>

<p dir="auto"> <a href="https://github.com/vinceliuice/WhiteSur-icon-theme">
  <img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/download-button.svg">
</a> </p>
<br>
<div dir="auto"><h3 tabindex="-1" dir="auto"><p dir="auto"> <b> WhiteSur Wallpapers </b> </p></h3><a id="user-content---whitesur-wallpapers--" aria-label="Permalink:  WhiteSur Wallpapers " href="#--whitesur-wallpapers--"></a></div>
<p dir="auto"> <a href="https://github.com/vinceliuice/WhiteSur-wallpapers">
  <img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/wallpaper.gif" data-animated-image="">
</a> </p>

<p dir="auto"> <a href="https://github.com/vinceliuice/WhiteSur-wallpapers">
  <img src="https://github.com/vinceliuice/WhiteSur-gtk-theme/raw/pictures/pictures/download-button.svg">
</a> </p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Technical details and getting involved</h2><a id="user-content-technical-details-and-getting-involved" aria-label="Permalink: Technical details and getting involved" href="#technical-details-and-getting-involved"></a></p>
<p dir="auto">Please go read <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING.md</a> for more info</p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>