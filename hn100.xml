<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 01 Feb 2025 14:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The government information crisis is bigger than you think it is (220 pts)]]></title>
            <link>https://freegovinfo.info/node/14747/</link>
            <guid>42895331</guid>
            <pubDate>Sat, 01 Feb 2025 03:21:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://freegovinfo.info/node/14747/">https://freegovinfo.info/node/14747/</a>, See on <a href="https://news.ycombinator.com/item?id=42895331">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<p>[This post is adapted from our forthcoming book, <em>Preserving Government Information: Past, Present, and Future</em>.]</p>
<p>Today we want to clarify something important about preserving government information. There is a difference between the government changing a policy and the government erasing information, but the line between those two has blurred in the digital age.</p>
<p>When a new president is inaugurated, one expects new policies. The number of changes and the speed of change may vary for different administrations, but we expect that every administration will be different in some ways from its predecessor. After all, that is part of the reason we have elections. Also, information that the government publishes is updated all the time, not just when administrations change. Laws and regulations are added and amended and rescinded, new economic and environmental and census data are collected and published, government recommendations to the public (like the Department of Agriculture’s “food pyramid” guidance) are revised. </p>
<p>Changes in government information are normal in a democracy.</p>
<p>Because change is normal, it is essential to preserve government information – even “non-current” and “out of date” information – in order to document those changes. This is not a new idea, but a long-accepted principle of democracy. Citizens need a record of what a government’s stated values were and when they changed, what actions it took and when it took them, what data it collected and generated at specific points in time, and so forth. It is important to preserve even information that later proves to be inaccurate in order to document what the government knew and when it knew it. </p>
<p>Because published government information is the evidence for a democracy, its preservation is essential.</p>
<p>In the era in which government information was published in paper formats, preservation of that information relied on libraries. The information was distributed to FDLP libraries based on the needs of the communities that those libraries served. Beginning in 1962, Regional FDLs received and retained all the paper publications in the FDLP system. When new information superseded or replaced old information, the old information was not erased or discarded; it was preserved in Regional FDLs and in every FDL whose community valued that older information. In the print era, it was taken for granted that, once government information was released to the public, it would not be withdrawn or altered or lost.<sup><a id="return1" href="#fn1">1</a></sup> </p>
<p>In the digital age, government publishing has shifted from the distribution of unalterable printed books to digital posts on government websites. Such digital publications can be moved, altered, and withdrawn at the flick of a switch. Publishing agencies are not required to preserve their own information, nor to provide free access to it. </p>
<p>Some digital government information is actively preserved by GPO, NARA, and the Library of Congress. Some government-collected data are preserved by law or by tradition. But the laws that allow this are weak and government preservation of government information suffers from large gaps. Non-government projects (notably the <a href="https://archive.org/">Internet Archive</a> and the <a href="https://eotarchive.org/">End-of-Term Archive</a>) use web harvesting to attempt to acquire and store government information, but these projects are, by their nature, incomplete and their long-term guarantees of access are fragile. As a result of all this, the public can no longer assume that any given piece of government information will not be withdrawn or altered or lost. </p>
<p>The early actions of the incoming Trump administration (as well as the actions of the first Trump administration) have brought the vulnerability of digital information to the public’s attention (see our previous post “<a href="https://freegovinfo.info/node/14744/">Federal information scrubbing has begun</a>”) and the public is rightfully worried. That vulnerability is, however, not limited to this administration. Digital government information was being lost before President Trump. </p>
<p>The current crisis of imminent loss of information exists not only because government information is being changed, but because it is being erased. The erasure is possible because of the gaps in the current preservation infrastructure. </p>
<p>The scale of loss and alteration of information under Trump may prove to be unprecedented and certainly requires immediate short-term action. But librarians and archivists and citizens should use this current crisis to demand more than short-term solutions. A new distributed digital preservation infrastructure is needed for digital government information.</p>
<p>
James A. Jacobs<br>
James R. Jacobs</p>
<ol>
<li id="fn1">Even when information <em>was</em> withdrawn for some reason, there was a record of the withdrawals. (See this <a href="https://docs.google.com/spreadsheets/d/1HIAT3KhOwX3hQobrIv66ZHOOeBtrVVZRPnhSX99V3Oo/edit?gid=0#gid=0">spreadsheet</a> listing withdrawn documents 1981 – 2018, collated from GPO’s no-longer published “<a href="https://www.govinfo.gov/app/search/%7B%22query%22%3A%22%5C%22administrative%20notes%5C%22%22%2C%22offset%22%3A0%2C%22facetToExpand%22%3A%22governmentauthornav%22%2C%22facets%22%3A%7B%22governmentauthornav%22%3A%5B%22Superintendent%20of%20Documents%22%5D%7D%2C%22filterOrder%22%3A%5B%22governmentauthornav%22%5D%2C%22pageSize%22%3A100%7D">Administrative Notes</a><a>” newsletter.) </a><a href="#return1">↵</a>
</li>

</ol>


<!-- BEGIN License added by Creative-Commons-Configurator plugin for WordPress -->
<p prefix="dct: http://purl.org/dc/terms/ cc: http://creativecommons.org/ns#"><a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img data-recalc-dims="1" alt="CC BY-NC-SA 4.0" src="https://i0.wp.com/freegovinfo.info/wp-content/plugins/creative-commons-configurator-1/media/cc/by-nc-sa/4.0/88x31.png?resize=88%2C31&amp;ssl=1" width="88" height="31"></a>
This work is licensed under a <a rel="license" target="_blank" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</p>
<!-- END License added by Creative-Commons-Configurator plugin for WordPress -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Decision to dump water from Tulare County lakes altered after confusing locals (151 pts)]]></title>
            <link>https://sjvwater.org/decision-to-dump-water-from-tulare-county-lakes-altered-after-sending-locals-in-mad-scramble/</link>
            <guid>42894708</guid>
            <pubDate>Sat, 01 Feb 2025 01:30:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sjvwater.org/decision-to-dump-water-from-tulare-county-lakes-altered-after-sending-locals-in-mad-scramble/">https://sjvwater.org/decision-to-dump-water-from-tulare-county-lakes-altered-after-sending-locals-in-mad-scramble/</a>, See on <a href="https://news.ycombinator.com/item?id=42894708">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				
<p>Water managers were relieved Thursday evening after the Army Corps of Engineers agreed to back off of a sudden decision earlier in the day to dump massive amounts of water from Kaweah and Success lakes.</p>



<p>Water managers said they got about an hour’s warning from the Army Corp’s Sacramento office to expect the Tule and Kaweah rivers to be at “channel capacity” by Thursday night.&nbsp;</p>



<p>Channel capacity means the maximum amount of water a river can handle. For the Kaweah, that’s 5,500 cubic feet per second and for the Tule, it’s 3,500 cfs.</p>



<p>Those levels were last seen, and surpassed, during the 2023 floods, which destroyed dozens of homes and businesses and caused significant damage to infrastructure.</p>



<p>“We were able to get them to back off that,” said Eric Limas, General Manager of the Lower Tule River and Pixley irrigation districts, of the Army Corps. “They’ll still be releasing water sometime tonight, but it will be a smaller amount, which will increase tomorrow.”</p>



<p>Limas and Tulare Irrigation District General Manager Aaron Fukuda were unsure how high releases would ultimately go and for how long but Kaweah has about 27,000 acre feet and Success about 5,000 acre fee that are above levels allowed by the Army Corps during winter.</p>



<p>Water managers will continue working with the Army Corps to limit the amount of water released from the lakes, Fukuda said.</p>



<p>“We’re still trying to wrap our minds around the numbers that made this happen,” Fukuda said. “We haven’t received much information from the Army Corps, just very vague answers.”</p>



<p>Rick Brown, chief public affairs officer for the Sacramento office of the Army Corps, would only say that levels in both lakes were “currently in the flood control space.”&nbsp;</p>



<p>He directed further questions to the Army Corps’ headquarters, which did not return an email Thursday asking: Who made the decision to release the water? Why? Why so suddenly? And why weren’t safety personnel notified?</p>



<p>Some people interviewed for this story speculated that the move was political on the part of the new administration, a kind of water “flex,” but declined to elaborate.</p>



<p>Tulare County Sheriff Mike Boudreaux said one of his officers had heard about the pending releases through the grapevine late Thursday afternoon and they were getting conflicting information through the evening.&nbsp;</p>



<p>The Tule River goes through the heart of Porterville and there are a number of <a href="https://sjvwater.org/planning-and-coordination-kept-porterville-dry-during-floods-but-the-rest-of-the-san-joaquin-valley-remains-fragmented/">agreements</a> about how releases should be made, including notifications to first responders, which is why Porterville didn’t flood in 2023.</p>



<p>Army Corps reservoirs are required to be drawn down every fall to make room for winter storms and later runoff.&nbsp;</p>



<p>But the Army Corps typically works with downstream agricultural users to allow them to keep a bit more water in the lakes to hedge against dry years, such this one is shaping up to be.</p>



<p>Kaweah River Water Master Victor Hernandez said Lake Kaweah’s winter capacity is 12,000 acre feet, but had been allowed to go up to 39,000 acre feet after an aerial snow survey showed the watershed currently only has another 45,000 acre feet in snow cover.</p>



<p>“Even if everything came down at once, it would only be enough to fill the reservoir halfway,” he said. “We were on track with the Corps working with the models and forecasts and doing our planning and then I get a call at 2:15 p.m. telling me they were going to channel capacity.”</p>



<p>Hernandez was floored.</p>



<p>“In 25 years, I’ve never seen anything like this,” he said. “I was given no explanation at all.”</p>



<p>Before they got word of the Army Corp’s decision to release less water, Hernandez, Fukuda and Limas were planning for the worst.</p>



<p>Hernandez had already notified managers on the old Tulare Lake Bed to expect possible flood water. And Limas and Fukuda had crews ready to work through the night stripping out weirs and channel guides, which were only recently rebuilt after the 2023 floods, to keep the water moving.</p>



<p>“Normally, these kinds of flood releases are done with a lot of notification and coordination,” Fukuda said. “I’ve been doing this 18 years and have never seen something like this.”</p>



<p>The Army Corps also operates Isabella and Pine Flat lakes on the Kern and Kings rivers, respectively.</p>



<p>Kern River Watermaster Art Chianello and Kings River Watermaster Steve Haugen both said they had not received notice of flood releases from Isabella and Pine Flat.</p>



<p>But neither of those lake levels are above their winter allowance, Haugen said.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Notes on OpenAI O3-Mini (117 pts)]]></title>
            <link>https://simonwillison.net/2025/Jan/31/o3-mini/</link>
            <guid>42894215</guid>
            <pubDate>Sat, 01 Feb 2025 00:24:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2025/Jan/31/o3-mini/">https://simonwillison.net/2025/Jan/31/o3-mini/</a>, See on <a href="https://news.ycombinator.com/item?id=42894215">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-permalink-context="/2025/Jan/31/o3-mini/">

<p>31st January 2025</p>



<p>OpenAI’s <a href="https://openai.com/index/openai-o3-mini/">o3-mini is out today</a>. As with other o-series models it’s a slightly difficult one to evaluate—we now need to decide if a prompt is best run using GPT-4o, o1, o3-mini or (if we have access) o1 Pro.</p>
<p>Confusing matters further, the benchmarks in <a href="https://openai.com/index/o3-mini-system-card/">the o3-mini system card</a> (PDF) aren’t a universal win for o3-mini across all categories. It generally benchmarks higher than GPT-4o and o1 but not across everything.</p>
<p>The biggest win for o3-mini is on the Codeforces ELO competitive programming benchmark, which I think is <a href="https://arxiv.org/abs/2501.01257">described by this 2nd January 2025 paper</a>, with the following scores:</p>
<ul>
<li>o3-mini (high) 2130</li>
<li>o3-mini (medium) 2036</li>
<li>o1 1891</li>
<li>o3-mini (low) 1831</li>
<li>o1-mini 1650</li>
<li>o1-preview 1258</li>
<li>GPT-4o 900</li>
</ul>
<p>Weirdly, that GPT-4o score was in an older copy of the System Card PDF which has been replaced by an updated document that doesn’t mention Codeforces ELO scores at all.</p>
<p>One note from the System Card that stood out for me concerning intended applications of o3-mini for OpenAI themselves:</p>
<blockquote>
<p>We also plan to allow users to use o3-mini to search the internet and summarize the results in ChatGPT. We expect o3-mini to be a useful and safe model for doing this, especially given its performance on the jailbreak and instruction hierarchy evals detailed in Section 4 below.</p>
</blockquote>
<p>This is notable because the existing o1 models on ChatGPT have not yet had access to their web search tool—despite the mixture of search and “reasoning” models having very clear benefits.</p>
<p>o3-mini does not and <a href="https://twitter.com/nikunjhanda/status/1885415728624656481">will not</a> support vision. We will have to wait for future OpenAI reasoning models for that.</p>
<p>I released <a href="https://llm.datasette.io/en/stable/changelog.html#v0-21">LLM 0.21</a> with support for the new model, plus its <code>-o reasoning_effort high</code> (or <code>medium</code> or <code>low</code>) option for tweaking the reasoning effort—details <a href="https://github.com/simonw/llm/issues/728">in this issue</a>.</p>
<p>Note that the new model is currently only available for <a href="https://platform.openai.com/docs/guides/rate-limits/usage-tiers#tier-3-rate-limits">Tier 3</a> and higher users, which requires you to have spent at least $100 on the API.</p>
<p>o3-mini <a href="https://openai.com/api/pricing/">is priced</a> at $1.10/million input tokens, $4.40/million output tokens—less than half the price of GPT-4o (currently $2.50/$10) and massively cheaper than o1 ($15/60).</p>
<p>I tried using it to summarize <a href="https://news.ycombinator.com/item?id=42890627">this conversation about o3-mini on Hacker News</a>, using <a href="https://til.simonwillison.net/llms/claude-hacker-news-themes#user-content-adding-a--m-model-option">my hn-summary.sh script</a>.</p>

<div><pre>hn-summary.sh 42890627 -o o3-mini</pre></div>

<p>Here’s <a href="https://gist.github.com/simonw/09e5922be0cbb85894cf05e6d75ae050">the result</a>—it used 18,936 input tokens and 2,905 output tokens for a total cost of 3.3612 cents.</p>

<p>Another characteristic worth noting is o3-mini’s token output limit—the measure of how much text it can output in one go.  That’s 100,000 tokens, compared to 16,000 for GPT-4o and just 8,000 for both DeepSeek R1 and Claude 3.5.</p>

<p>Invisible “reasoning tokens” come out of the same budget, so it’s likely not possible to have it output the full 100,000.</p>

<p>The model accepts up to 200,000 tokens of input, an improvement on GPT-4o’s 128,000.</p>

<p>An application where output limits really matter is translation between human languages, where the output can realistically be expected to have a similar length to the input. It will be interesting seeing how well o3-mini works for that, especially given its low price.</p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Earthstar – A database for private, distributed, offline-first applications (110 pts)]]></title>
            <link>https://earthstar-project.org/</link>
            <guid>42894200</guid>
            <pubDate>Sat, 01 Feb 2025 00:22:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://earthstar-project.org/">https://earthstar-project.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42894200">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p>A database for private, distributed, offline-first applications.</p><p>Earthstar is a specification and JavaScript library for building connected applications owned and run by their users.</p><p><img src="https://earthstar-project.org/splash.png"></p></div><ul><li>Works offline.</li><li>Store music, photos, video.</li><li>Actually delete stuff.</li><li>Temporary documents.</li><li>Live syncing.</li><li>Use one or many identities.</li><li>Sneakernets.</li><li>Always self-hosted.</li><li>Servers optional.</li><li>No blockchain.</li><li>No tokens.</li><li>Free forever, in every sense.</li></ul><ul><li>Verification with ed25519.</li><li>Works in the browser.</li><li>Grant read-only access.</li><li>Efficient sync.</li><li>Streaming sync.</li><li>One identity across many devices.</li><li>Multiwriter.</li><li>Storage drivers.</li><li>Document write permissions.</li><li>Deno.</li><li>Node.</li></ul><hr><div><p><a href="https://nlnet.nl/"><img src="https://earthstar-project.org/nlnet.svg"></a></p><p>This project was funded through the<!-- --> <a href="https://nlnet.nl/assure">NGI Assure Fund</a>, a fund established by<!-- --> <a href="https://nlnet.nl/">NLnet</a> <!-- -->with financial support from the European Commission's<!-- --> <a href="https://ngi.eu/">Next Generation Internet</a> <!-- -->programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 957073.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google offers 'voluntary exit' to all US platforms and devices employees (127 pts)]]></title>
            <link>https://www.theverge.com/news/603432/google-voluntary-exit-platforms-devices-team</link>
            <guid>42893463</guid>
            <pubDate>Fri, 31 Jan 2025 23:06:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/news/603432/google-voluntary-exit-platforms-devices-team">https://www.theverge.com/news/603432/google-voluntary-exit-platforms-devices-team</a>, See on <a href="https://news.ycombinator.com/item?id=42893463">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><img alt="Chris Welch" data-chromatic="ignore" loading="lazy" width="36" height="36" decoding="async" data-nimg="1" srcset="https://platform.theverge.com/wp-content/uploads/sites/2/chorus/author_profile_images/195901/welch.0.jpg?quality=90&amp;strip=all&amp;crop=0%2C0%2C100%2C100&amp;w=48 1x, https://platform.theverge.com/wp-content/uploads/sites/2/chorus/author_profile_images/195901/welch.0.jpg?quality=90&amp;strip=all&amp;crop=0%2C0%2C100%2C100&amp;w=96 2x" src="https://platform.theverge.com/wp-content/uploads/sites/2/chorus/author_profile_images/195901/welch.0.jpg?quality=90&amp;strip=all&amp;crop=0%2C0%2C100%2C100&amp;w=96"></p><p><a href="https://www.theverge.com/authors/chris-welch">Chris Welch</a> <span>is a reviewer specializing in personal audio and home theater. Since 2011, he has published nearly 6,000 articles, from breaking news and reviews to useful how-tos.</span></p></div><div id="zephr-anchor"><p>A year ago, Google started off 2024 with <a href="https://www.theverge.com/2024/1/11/24034124/google-layoffs-engineering-assistant-hardware">some layoffs</a>. It hasn’t taken similar steps (yet) in 2025, but <a href="https://www.cnbc.com/2025/01/28/google-employees-petition-for-job-security-ahead-of-expected-cuts-.html">employees are fearing the worst</a>. And if the Platforms and Devices team is anything to go by, there’s ample reason for concern. Google has distributed a memo to all US employees working on Android, Pixel hardware, and other projects that offers a “voluntary exit program” guaranteeing severance for anyone willing to step away from their role at the company. The memo went out from platforms and devices SVP Rick Osterloh, <a href="https://9to5google.com/2025/01/30/pixel-android-voluntary-exit-employees/">according to <em>9to5Google</em></a>.</p><p>“This comes after we brought two large organizations together last year,” Osterloh wrote. “There’s tremendous momentum on this team and with so much important work ahead, we want everyone to be deeply committed to our mission and focused on building great products, with speed and efficiency.” Voluntary buyouts can often be a precursor to layoffs if not enough employees take Google up on its offer and choose to leave.</p><p>Google <a href="https://www.theverge.com/2024/4/18/24133881/google-android-pixel-teams-reorg-rick-osterloh">combined its Android and hardware teams</a> under Osterloh in April. Executives said the streamlined approach would help it integrate AI features across products and services more quickly.</p><p>A few months later in October, Alphabet’s chief finance officer Anat Ashkenazi said she would prioritize “cost efficiencies” throughout the company. “There’s really good work that was done, started by Ruth, Sundar and the rest of the lead team to re-engineer the cost base,” she said during her first earnings call as CFO. “But I think any organization can always push a little further and I’ll be looking at additional opportunities.” The cost-cutting measures are partly designed to offset Google pouring so much money into AI.</p><p>Google’s Pixel phones have never come anywhere close to the sales numbers enjoyed by Apple and Samsung, but the company is at least trending in the right direction; <a href="https://www.counterpointresearch.com/insight/global-smartphone-market-q3-2024">Counterpoint Research reported</a> that Google recorded its highest-ever quarterly sales volume for smartphones in Q3 2024.</p><p>Some employees at Google have recently been circulating a petition that calls for CEO Sundar Pichai to offer exactly this type of optional buyout before resorting to involuntary layoffs. “Ongoing rounds of layoffs make us feel insecure about our jobs,” the petition said, according to CNBC. “The company is clearly in a strong financial position, making the loss of so many valuable colleagues without explanation hurt even more.”</p><p>At least for the time being, it appears the voluntary exit program hasn’t been extended to other divisions within Google like search or the DeepMind AI team.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tesla Paid Zero Federal Income Tax in 2024, Despite $2.3B in Income (254 pts)]]></title>
            <link>https://truthout.org/articles/tesla-paid-zero-federal-income-tax-in-2024-despite-2-3-billion-in-income/</link>
            <guid>42893365</guid>
            <pubDate>Fri, 31 Jan 2025 22:57:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://truthout.org/articles/tesla-paid-zero-federal-income-tax-in-2024-despite-2-3-billion-in-income/">https://truthout.org/articles/tesla-paid-zero-federal-income-tax-in-2024-despite-2-3-billion-in-income/</a>, See on <a href="https://news.ycombinator.com/item?id=42893365">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">
             <!--begin content-single -->

<article itemprop="mainEntity" itemscope="" itemtype="https://schema.org/ReportageNewsArticle">

  <header>

  
  
  
  
      
    
  

  

      <p>This brings Tesla’s average tax rate over the past three years to 0.4 percent.</p>
  
  

  
  
  
</header>

  <figure itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img width="1200" height="675" src="https://truthout.org/app/uploads/2025/01/2025_0130-tesla-1200x675.jpg" alt="The Tesla Inc. logo is pictured on a sign in Zrich, Switzerland, on November 13, 2023." itemprop="url" loading="eager" decoding="async" fetchpriority="high" srcset="https://truthout.org/app/uploads/2025/01/2025_0130-tesla-1200x675.jpg 1200w, https://truthout.org/app/uploads/2025/01/2025_0130-tesla-400x225.jpg 400w, https://truthout.org/app/uploads/2025/01/2025_0130-tesla-200x113.jpg 200w, https://truthout.org/app/uploads/2025/01/2025_0130-tesla-800x450.jpg 800w, https://truthout.org/app/uploads/2025/01/2025_0130-tesla-1536x864.jpg 1536w, https://truthout.org/app/uploads/2025/01/2025_0130-tesla-2048x1152.jpg 2048w, https://truthout.org/app/uploads/2025/01/2025_0130-tesla-2400x1350.jpg 2400w" sizes="(max-width: 1200px) 100vw, 1200px"><figcaption itemprop="caption">The Tesla Inc. logo is pictured on a sign in Zrich, Switzerland, on November 13, 2023. </figcaption><figcaption itemprop="author" itemscope="" itemtype="https://schema.org/Person"><span itemprop="name">Joan Cros / NurPhoto via Getty Images</span></figcaption></figure>
  
  
  <div id="articleContent">

    

    <!-- begin partial/series-card -->

    
    
    
<p>Elon Musk’s Tesla paid a total of $0 in federal income taxes in 2024, new tax reports show, despite the company having raked in billions of dollars in income and being the most valuable car company in the world.</p>



<p>Citing Tesla’s <a href="https://www.sec.gov/Archives/edgar/data/1318605/000162828025003063/tsla-20241231.htm">year-end financial report</a> released this week, the Institute on Taxation and Economic Policy (ITEP) <a href="https://itep.org/tesla-reported-zero-federal-income-tax-in-2024/">reports</a> that Tesla paid a 0 percent federal income tax rate last year, even as the company reported $2.3 billion in income.</p>



<p>In 2023, Tesla paid $48 million in taxes on $3.1 billion in income — a 1.5 percent rate. And, in 2022, when it reported $5.5 billion in income, Tesla also paid a 0 percent tax rate. </p>



<p>This brings Tesla’s average tax rate over the past three years to 0.4 percent, or 50 times less than the statutory corporate tax rate of 21 percent. </p>



<p>This is despite the fact that Tesla is valued at <a href="https://finance.yahoo.com/quote/TSLA/">over $1.2 trillion</a> and is owned by the richest man in the world, with <a href="https://www.forbes.com/profile/elon-musk/">a net worth of</a> over $400 billion and who was awarded <a href="https://www.aljazeera.com/economy/2024/12/3/musks-fifty-five-point-eight-bn-tesla-pay-package-rejected-by-us-judge">a $101 billion</a> pay package by Tesla shareholders last year — though this package has been rejected by a judge. </p>




<p>Due to the nature of the U.S. tax system, which heavily favors corporations and the wealthy and enables sophisticated tax dodging methods, Musk is also <a href="https://www.propublica.org/article/the-secret-irs-files-trove-of-never-before-seen-records-reveal-how-the-wealthiest-avoid-income-tax">one of the many</a> ultrarich Americans who pay a far lower tax rate than the average American. Advocates for fairer taxation <a href="https://americansfortaxfairness.org/musks-11-billion-tax-bill-big-news-just-10-wealth-increase-far-year/">have said</a> that, due to the way that tax law is written and enforced, it is essentially optional for Musk and other billionaires to follow tax guidelines, allowing them to hoard more and more wealth while the working class struggles to get by.</p>



<p>According to ITEP, Tesla was able to avoid paying $500 million in taxes by using accelerated depreciation, <a href="https://itep.org/corporate-tax-avoidance-under-the-tax-cuts-and-jobs-act/">a tax avoidance method</a> and incentive for businesses which allows companies to write off the costs of an asset faster than it would normally actually lose value. The company dodged another $300 million in its tax bill by claiming “unspecified ‘U.S. tax credits,’” ITEP said.</p>



<p>Companies’ ability to use accelerated depreciation as a tax avoidance method was expanded by Donald Trump and Republicans’ Tax Cuts and Jobs Act in 2017, which slashed the corporate tax rate from 35 to 21 percent and <a href="https://truthout.org/articles/us-billionaires-have-doubled-their-wealth-since-2017-trump-tax-overhaul/">has supercharged</a> the growth of the wealth gap in the U.S., creating an explosion of wealth for the richest Americans.</p>



<p>Trump and the GOP have pledged to be extremely friendly to corporations in Trump’s second term in office. The president campaigned on tax cuts across the board — but research has found that his tax plans would <a href="https://itep.org/kamala-harris-donald-trump-tax-plans/">actually raise taxes</a> for the working class while cutting taxes for the top 5 percent richest Americans.</p>



<p>Meanwhile, Republicans <a href="https://www.propublica.org/article/trump-tax-cuts-congress-republicans-plan-slash-benefits">are reportedly circulating</a> options to expand the already massive tax benefits given to corporations and the wealthy in the Tax Cuts and Jobs Act — options that include slashing benefits for working class Americans in order to cut the corporate tax rate to 15 percent. This could give massive corporations like Tesla yet more tax cuts.</p>



<p>ITEP points out that there are also bipartisan proposals to give corporations more tax dodging tools, like <a href="https://itep.org/impacts-of-tax-relief-for-american-families-and-workers-act/">a compromise bill</a> proposed in the Senate last year that would, among other things, retroactively give companies the ability to receive a tax break on supposed research — though the bill gives an extremely wide definition of what a company could qualify as research.</p>
<div id="truth-722685318" data-callout-id="325075" data-callout-theme="white" data-callout-placement="Post Content - After" data-callout-title="2025-01 Main Campaign (FRU) We’re not backing down in the face of Trump’s threats." data-truth-trackid="325075" data-truth-trackbid="1">
<h5>We’re not backing down in the face of Trump’s threats.</h5>
<p><span>As Donald Trump is inaugurated a second time, independent media organizations are faced with urgent mandates: Tell the truth more loudly than ever before. Do that work even as our standard modes of distribution (such as social media platforms) are being manipulated and curtailed by forces of fascist repression and ruthless capitalism. Do that work even as journalism and journalists face targeted attacks, including from the government itself. And do that work in community, never forgetting that we’re not shouting into a faceless void – we’re reaching out to real people amid a life-threatening political climate.</span></p>
<p><span><strong>Our task is formidable, and it requires us to ground ourselves in our principles, remind ourselves of our utility, dig in and commit.</strong></span></p>
<p><span>As a dizzying number of corporate news organizations – either through need or greed – rush to implement new ways to further monetize their content, and others acquiesce to Trump’s wishes, now is a time for movement media-makers to double down on community-first models.</span></p>
<p><span>At <em>Truthout</em>, we are reaffirming our commitments on this front: We won’t run ads or have a paywall because we believe that everyone should have access to information, and that access should exist without barriers and free of distractions from craven corporate interests. We recognize the implications for democracy when information-seekers click a link only to find the article trapped behind a paywall or buried on a page with dozens of invasive ads. The laws of capitalism dictate an unending increase in monetization, and much of the media simply follows those laws. <strong><em>Truthout</em> and many of our peers are dedicating ourselves to following other paths – a commitment which feels vital in a moment when corporations are evermore overtly embedded in government.</strong></span></p>
<p><span>Over 80 percent of<em> Truthout</em>‘s funding comes from small individual donations from our community of readers, and the remaining 20 percent comes from a handful of social justice-oriented foundations. Over a third of our total budget is supported by recurring monthly donors, many of whom give because they want to help us keep <em>Truthout</em> barrier-free for everyone.</span></p>
<p><span>You can help by giving today. Whether you can make a small monthly donation or a larger gift, <em>Truthout</em> only works with your support.</span></p>

</div>
    
    

    
    

    

  </div> 

  

  
  

      
  
      
  </article>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Musk aides lock government workers out of computer systems at US agency (136 pts)]]></title>
            <link>https://www.reuters.com/world/us/musk-aides-lock-government-workers-out-computer-systems-us-agency-sources-say-2025-01-31/</link>
            <guid>42892278</guid>
            <pubDate>Fri, 31 Jan 2025 21:26:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/world/us/musk-aides-lock-government-workers-out-computer-systems-us-agency-sources-say-2025-01-31/">https://www.reuters.com/world/us/musk-aides-lock-government-workers-out-computer-systems-us-agency-sources-say-2025-01-31/</a>, See on <a href="https://news.ycombinator.com/item?id=42892278">Hacker News</a></p>
Couldn't get https://www.reuters.com/world/us/musk-aides-lock-government-workers-out-computer-systems-us-agency-sources-say-2025-01-31/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Add "fucking" to your Google searches to neutralize AI summaries (645 pts)]]></title>
            <link>https://gizmodo.com/add-fcking-to-your-google-searches-to-neutralize-ai-summaries-2000557710</link>
            <guid>42892191</guid>
            <pubDate>Fri, 31 Jan 2025 21:20:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gizmodo.com/add-fcking-to-your-google-searches-to-neutralize-ai-summaries-2000557710">https://gizmodo.com/add-fcking-to-your-google-searches-to-neutralize-ai-summaries-2000557710</a>, See on <a href="https://news.ycombinator.com/item?id=42892191">Hacker News</a></p>
Couldn't get https://gizmodo.com/add-fcking-to-your-google-searches-to-neutralize-ai-summaries-2000557710: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[LinuxPDF (107 pts)]]></title>
            <link>https://github.com/ading2210/linuxpdf</link>
            <guid>42891937</guid>
            <pubDate>Fri, 31 Jan 2025 21:01:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ading2210/linuxpdf">https://github.com/ading2210/linuxpdf</a>, See on <a href="https://news.ycombinator.com/item?id=42891937">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">LinuxPDF</h2><a id="user-content-linuxpdf" aria-label="Permalink: LinuxPDF" href="#linuxpdf"></a></p>
<p dir="auto">This is Linux running inside a PDF file via a RISC-V emulator, which is based on <a href="https://bellard.org/tinyemu/" rel="nofollow">TinyEMU</a>.</p>
<p dir="auto">Try it here: <a href="https://linux.doompdf.dev/linux.pdf" rel="nofollow">linux.pdf</a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description linuxpdf.mp4">linuxpdf.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/71154407/408701813-7e992dd1-41a5-4d32-87cc-878b395e3d92.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzgzOTE3MDMsIm5iZiI6MTczODM5MTQwMywicGF0aCI6Ii83MTE1NDQwNy80MDg3MDE4MTMtN2U5OTJkZDEtNDFhNS00ZDMyLTg3Y2MtODc4YjM5NWUzZDkyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAyMDElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMjAxVDA2MzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWEyMTQ1ZjZmM2FmY2I0YWE2NzM4ZDVjYTNmMzNiMjk2ZWY2ZTA1NjY4MDgxOGEwYTY4YzJkMmU1MTg2MDA3NTUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.GHLi6BpePA018mPmPisTDpRPQI8wkwheKCATuCpomgc" data-canonical-src="https://private-user-images.githubusercontent.com/71154407/408701813-7e992dd1-41a5-4d32-87cc-878b395e3d92.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzgzOTE3MDMsIm5iZiI6MTczODM5MTQwMywicGF0aCI6Ii83MTE1NDQwNy80MDg3MDE4MTMtN2U5OTJkZDEtNDFhNS00ZDMyLTg3Y2MtODc4YjM5NWUzZDkyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAyMDElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMjAxVDA2MzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWEyMTQ1ZjZmM2FmY2I0YWE2NzM4ZDVjYTNmMzNiMjk2ZWY2ZTA1NjY4MDgxOGEwYTY4YzJkMmU1MTg2MDA3NTUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.GHLi6BpePA018mPmPisTDpRPQI8wkwheKCATuCpomgc" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Explanation</h2><a id="user-content-explanation" aria-label="Permalink: Explanation" href="#explanation"></a></p>
<p dir="auto">This works in a very similar way to my previous <a href="https://github.com/ading2210/doompdf">DoomPDF</a> project.</p>
<p dir="auto">You might expect PDF files to only be comprised of static documents, but surprisingly, the PDF file format supports Javascript with its own separate standard library. Modern browsers (Chromium, Firefox) implement this as part of their PDF engines. However, the APIs that are available in the browser are much more limited.</p>
<p dir="auto">The full specfication for the JS in PDFs was only ever implemented by Adobe Acrobat, and it contains some ridiculous things like the ability to do <a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/library/jsapiref/JS_API_AcroJS.html#annot3d" rel="nofollow">3D rendering</a>, make <a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/library/jsapiref/JS_API_AcroJS.html#net-http" rel="nofollow">HTTP requests</a>, and <a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/library/jsapiref/JS_API_AcroJS.html#monitor" rel="nofollow">detect every monitor connected to the user's system</a>. However, on Chromium and other browsers, only a tiny subset of this API was ever implemented, due to obvious security concerns. With this, we can do whatever computation we want, just with some very limited IO.</p>
<p dir="auto">C code can be compiled to run within a PDF using an old version of Emscripten that targets <a href="https://en.wikipedia.org/wiki/Asm.js" rel="nofollow">asm.js</a> instead of WebAssembly. With this, I can compile a modified version of the TinyEMU RISC-V emulator to asm.js, which can be run within the PDF. For the input and output, I reused the same display code that I used for DoomPDF. It works by using a separate text field for each row of pixels in the screen, whose contents are set to various ASCII characters. For inputs, there is a virtual keyboard implemented with a bunch of buttons, and a text box you can type in to send keystrokes to the VM.</p>
<p dir="auto">The largest problem here is with the emulator's performance. For example, the Linux kernel takes about 30-60 seconds to boot up within the PDF, which over 100x slower than normal. Unfortunately, there's no way to fix this, since the version of V8 that Chrome's PDF engine uses has its <a href="https://source.chromium.org/chromium/_/pdfium/pdfium/+/012fe571c9fe430da68dbcd2f5ba21758db0ae15:fpdfsdk/fpdf_view.cpp;l=1211-1214;drc=b69783fd189976dd4625c7dcd9c07921b94d4a3c;bpv=0;bpt=0" rel="nofollow">JIT compiler disabled</a>, destroying its performance.</p>
<p dir="auto">For the root filesystem, there are both 64 and 32 bit versions possible. The default is a 32 bit buildroot system (which was prebuilt and taken from the original TinyEMU examples), and also a 64 bit Alpine Linux system. The 64 bit emulator is about as twice slow however, so it's normally not used.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build Instructions</h2><a id="user-content-build-instructions" aria-label="Permalink: Build Instructions" href="#build-instructions"></a></p>
<p dir="auto">Clone this repository and run the following commands:</p>
<div data-snippet-clipboard-copy-content="python3 -m venv .venv
source .venv/bin/activate
pip3 install -r requirements.txt
./build.sh"><pre><code>python3 -m venv .venv
source .venv/bin/activate
pip3 install -r requirements.txt
./build.sh
</code></pre></div>
<p dir="auto">If you want to build the 64 bit rather than 32 bit version, edit <code>build.sh</code> and change the <code>BITS="32"</code> line.</p>
<p dir="auto">The <code>build.sh</code> script will download Emscripten <code>1.39.20</code> automatically. You must be on Linux to build this.</p>
<p dir="auto">The generated files will be in the <code>out/</code> directory. Then you can run <code>(cd out; python3 -m http.server)</code> to serve the files on a web server.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<p dir="auto">This project was made by <a href="https://github.com/ading2210/">@ading2210</a>.</p>
<p dir="auto">The RISC-V emulator is forked from <a href="https://bellard.org/tinyemu/" rel="nofollow">TinyEMU</a>, which was written by <a href="https://bellard.org/" rel="nofollow">Fabrice Bellard</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This repository is licensed under the GNU GPL v3.</p>
<div data-snippet-clipboard-copy-content="ading2210/linuxpdf - Linux running inside a PDF file
Copyright (C) 2025 ading2210

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>."><pre><code>ading2210/linuxpdf - Linux running inside a PDF file
Copyright (C) 2025 ading2210

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
</code></pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GenAI Art Is the Least Imaginative Use of AI Imaginable (124 pts)]]></title>
            <link>https://hai.stanford.edu/news/ge-wang-genai-art-least-imaginative-use-ai-imaginable</link>
            <guid>42891821</guid>
            <pubDate>Fri, 31 Jan 2025 20:52:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hai.stanford.edu/news/ge-wang-genai-art-least-imaginative-use-ai-imaginable">https://hai.stanford.edu/news/ge-wang-genai-art-least-imaginative-use-ai-imaginable</a>, See on <a href="https://news.ycombinator.com/item?id=42891821">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span>R</span>ecently, AI music company Suno’s CEO was <a href="https://www.404media.co/ceo-of-ai-music-company-says-people-dont-like-making-music/" rel="noopener ugc nofollow" target="_blank">quoted as saying “I think the majority of people don’t enjoy the majority of the time they spend making music”</a> in what sounds like yet another justification of Suno’s prompt-based (and very popular) generative AI music service. Like all good misleading statements, this one is partially based on truth: when we work at our favorite activities — cooking, gaming, hiking, music-making, writing (to name a few) — the process is often not easy or pleasant or smooth. Many musicians spend vastly more time in practice rooms than onstage; gamers willingly play punishingly difficult video games; hikers go up and down big mountains while dealing with blisters, mosquitos, and a host of inconveniences. All of these are arguably not “enjoyable” the majority of the time, and yet people still choose to undertake these activities. Why? Well, Suno quietly leaves out the part that the <em>process</em> (with its inherent challenges) is often what makes an activity ultimately meaningful and fulfilling. It’s like Suno telling hikers and mountaineers that clambering up a mountain is unpleasant business! Why not take a helicopter to the summit? Meanwhile, Suno is selling helicopter tickets.</p><p>Statements like Suno’s perfectly captures the prevailing public mindset about AI: that Artificial Intelligence is little more than a labor-saving optimization tool. This mindset tends to be good for #Capitalism, but betrays not only a lack of understanding of why people make music, but also a profound lack of imagination regarding how we could, or would want to live with our technologies in our lives. I, for one, would go as far as to say using generative AI for creative expression in this manner (“describe what you have in mind and AI will create it for you”) amounts to<em><strong> </strong></em>the least imaginative of use of AI that I can imagine. Such systems offer the promise of skipping the labor by bypassing the creative process and, yes, the difficulties, confusion, and frustration inherent in such endeavors, but…</p><p><em>What if the point of art is that we actually </em><strong>make</strong><em> it?</em></p><h2 id="2d7c"><strong>“What’s Your Story?”</strong></h2><p>I do not despise AI, per se, but I am forever wary of people who make and deploy technology in uncritical, culturally apathetic ways. I am pretty sure this makes me something of an Old Fart; or maybe I have always been that. But I do have some background in this topic. I am an <a href="https://ccrma.stanford.edu/~ge/" rel="noopener ugc nofollow" target="_blank">Associate Professor of Music and (by Courtesy) Computer Science</a> at Stanford University’s <a href="https://ccrma.stanford.edu/" rel="noopener ugc nofollow" target="_blank">Center for Computer Research in Music and Acoustics (CCRMA)</a>, where I teach “Music and AI” as a critical-making course, cross-listed in Music and Computer Science. I wrote the book <a href="https://artful.design/" rel="noopener ugc nofollow" target="_blank"><em>Artful Design: Technology in Search of the Sublime</em></a> as a photo-comic manifesto of why we ought to build tools playfully, artfully, in accordance not only with perceived needs, but also with the invisible values that underly the needs; it probes the question, “how do we want to live with our technologies?” I invent <a href="https://artful.design/ocarina/" rel="noopener ugc nofollow" target="_blank">things that nobody asked for and that solves no problems that quite exist</a>; I direct <a href="https://slork.stanford.edu/" rel="noopener ugc nofollow" target="_blank">laptop</a> and <a href="https://svork.stanford.edu/" rel="noopener ugc nofollow" target="_blank">VR orchestras</a>. Once upon a time, I co-founded a mobile music company called Smule. I am a Senior Fellow and a Faculty Associate Director of the <a href="https://hai.stanford.edu/" rel="noopener ugc nofollow" target="_blank">Stanford Institute for Human-Centered Artificial Intelligence</a> (Stanford HAI, for short). I sometimes <a href="https://artful.design/hai/" rel="noopener ugc nofollow" target="_blank">write about AI and art</a>, and <a href="https://www.nytimes.com/2023/12/30/technology/openai-artist-alexander-reben.html" rel="noopener ugc nofollow" target="_blank">offer my perspectives</a>, such as they are. My wife and I <a href="https://www.youtube.com/watch?v=WVqDJ34HnYE" rel="noopener ugc nofollow" target="_blank">backpack in the mountains</a>. We are parents to a one-year old baby daughter; I think a lot about her growing up in a future I can barely imagine.</p><figure><p><img src="https://hai.stanford.edu/sites/default/files/inline-images/Ge%20Wang%20iphone%20music.jpg" data-entity-uuid="e9675777-1ee7-4a88-bff8-57f4630e127b" data-entity-type="file" alt="Ge Wang plays Ocarina for the iPhone" width="1280" height="720" loading="lazy"></p><p><em>Making things that nobody asked for and that solves no problems that exists, Exhibit A: </em><a href="https://artful.design/ocarina/" rel="noopener ugc nofollow" target="_blank"><em>Ocarina</em></a><em> for the iPhone.</em></p></figure><p>Many years ago, I arrived at Princeton University to pursue my Ph.D. in Computer Science, with vague plans to build “the world’s most advanced algorithmic composition engine for music” (essentially GenAI for music, in today’s parlance). But before I even set foot on Princeton’s impeccably manicured campus, brimming with classic Gothic architecture, cherry blossom trees, and well-kept lawns — something, or rather someone, gave me pause on my aspirations.</p><p>On my drive up to New Jersey in that late summer of 2001, I stopped by a house party in Washington D.C. that featured a local cover band. The band was <em>tight</em>. After the performance, I went up to the guitarist and told him so.</p><p>“Thank you,” he said, “so, what’s <em>your</em> story?”</p><p>“I am going up to Princeton to start grad school in computer science.” I replied, “I want to build the world’s most advanced automated music composition machine.”</p><p>The guitarist studied me for a moment and asked, succinct and earnest, “What’s the point?”</p><p>It was a good question. No, it was a great question; maybe <em>the</em> question. It stopped me in my tracks and I did not give an answer. I did not have an answer. “I’ll let you know if I figure that out.” I grinned, as I pocketed the question for future rumination.</p><p>That brief exchange would domino into a “personal crisis of faith”, one that I would relish, for it would challenge my beliefs and continually beckon me to reflect on the role of technology for things that, like Music, <em>really</em> matter to us.</p><p>Over the next six years of graduate school, I worked on computer music with seriously playful characters like professors Perry Cook and Dan Truemen and fellow grad student Rebecca Fiebrink. I never did attempt to build “the world’s most advanced algorithmic composition engine” — because I never could answer the question “what is the point?” (without resorting to hand-wavy and frankly bullshit answers like “democratize music-making”). Instead, I built a <em>tool</em>, a <a href="https://chuck.stanford.edu/" rel="noopener ugc nofollow" target="_blank">domain-specific programming language for music</a>; thinking maybe I could create one more expressive tool with which people can make music and, if they wished, explore “what’s the point?” for themselves.</p><p>More than twenties years later, I am a tenured professor at a so-called “elite university” in the heart of Silicon Valley, ground zero of Big Tech. Meanwhile, my personal crisis of faith persists. I still ask, “what is the point?”. I still do not have an answer that satisfies, but I have come to profoundly appreciate the question, which I now help my students to ask in all that they do, especially in shaping technology. Ever the contrarian, I task my “Music and AI” students (many of them engineers) to build “useless things that are interesting to you” as a way to playfully work with technologies like AI, and to probe for both capacities and limits. They respond by by making things like<em> auto-rizz.ck</em>:</p><p><iframe width="853" height="505" src="https://www.youtube.com/embed/FYc6uXBUL6k?si=nKlo_6T8JExeY3aF" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></p><p><em>auto-rizz.ck</em> uses AI — not “generative” but interactive. It detects “seductive” glances and plays cheesy saxophone music (yes, that is all it does). It’s whimsical. It’s absurd. It fit the assignment brilliantly. I always ask students to ask themselves <em>why</em> they chose to build what they did. Matt, the inventor of auto-rizz.ck, had this to say (excerpted from <a href="https://mattreed-75933.medium.com/how-i-got-a-girlfriend-from-1-chuck-program-ee59d76c136a" rel="noopener">his reflection</a>):</p><p><em>“I really enjoyed this assignment. I think its easy to adopt this toxic capitalistic mindset that everything you do or make has to be productive or “for” something. But when we follow that dogma, we forget to make beautiful things just because they’re beautiful, do funny things just because they’re funny, or make stupid projects just because they’re stupid. There’s so much beauty in doing things just because. It was nice to take a pause on life and make something just for the sake of making it (and for a grade, but that’s more of an afterthought).” — Matt</em></p><p>I ask my students to look for interesting questions in everything. I tell them that the power of a good question is not in the answer, but in the question’s capacity to regeneratively invite more questions, and to construct lenses for examining the world — and ourselves. It’s like the question, asked by the ancient Greeks more than two millennia ago, “What is the <em>good life</em>?” We are still asking ourselves this today.</p><h2 id="3110"><strong>A Labor-creating Machine?</strong></h2><p>Ruminating on AI and art and the point of it all, I am reminded of a John Cage sentiment:</p><p><em>“What we need is a computer that isn’t labor-saving, but which increases the work for us to do.” — John Cage (from “Diary: Audience 1966”)</em></p><p>I first learned of this quote through CCRMA Ph.D. candidate Nick Shaheed’s Qualifying Exam. Nick’s interpretation of its meaning in a world nearly 60 years later:</p><div><p><em>“So, why would I want to increase the work I need to do? Well, because it’s fun and it’s work I want to do! For me (and many many other artists), doing the work and the work itself are largely the same thing. Speaking personally, my creative practice is about as far from the idealized depiction of Mozart shown in (the film) Amadeus, a fully formed concept is not being put onto the page as the first draft. Beginning with just the most basic seed of an idea, and then the process of trying it out, realizing it, tweaking things, all these bits of effort are the bricks being laid that form the actual piece itself. Without the work being done to make the music, the end result would be very different (and probably, worse).” — Nick Shaheed (from “CCRMA Quals Exam 2024”)</em></p><p>I resonate with Nick’s position — that the process not only shapes the outcome invariably, but constitutes an unalienable part of what the outcome is. It is the idea that art is to be <em>made,</em> for it is during the making that we realize what we are truly trying to say, far beyond the initial inkling of a concept. It is the observation that process brings its own intrinsic rewards, not despite of but <em>because of</em> the inherent challenges in making things for ourselves. This is all to say, process is not an obstacle to be removed on the path of creative expression. It <em>is</em> the path.</p></div><p>Any process of creation is simultaneously a process of learning, beset by setbacks, confusion, and frustration. Yet, such frictions can, if one sticks with the process, ultimately give rise to something fulfilling: a deeper understanding of how a thing works and how to work with it, accompanied by the feeling that we have learned a bit more about ourselves and what we are capable of achieving. Skipping the process makes about as much sense as “playing” a difficult video game by asking someone else (robot or human) to take the controller and play it in your place, while you verbally offer general prompts about what to do and where to go from the couch. That would still be an experience, maybe even an enjoyable one, but it would be a fundamentally different experience from undertaking the process for yourself.</p><p>Reflecting on these ideas only makes me sadder that voices such as Suno’s (who received another venture capital funding round of $125M late last year) continue to dominate and shape the public imagination on AI and creative expression, drowning out other voices that would also have something to say about what we truly want from this technology, and how we might want to live with it moving forward.</p><p>The technology is new, but what GenAI music companies like Suno are doing is not. Like the recording industry before them (and without whom, ironically, there would be no training data for GenAI), companies like Suno commodify creative expression as part of an aesthetic economy based on passive consumption. Thus it is in Suno’s core interest to usher people away from active creation, and toward a system of frictionless convenience that strives to lower the effort of production — and the effort of imagination beyond vague concepts to type into prompts — to <em>zero</em>. And while no doubt prompting-AI-systems will be a new kind of “muscle” for us all to build, one has to ask: what other muscles will atrophy? There is always a price to pay; the danger of living in a world of frictionless convenience might well be cultural and individual stagnation.</p><p>This brings us to the most misleading part of GenAI companies like Suno: they purport to be tools for creating art, but by making every effort to dismiss and eradicate the process of learning to expressive ourselves, what they are actually creating is a new generation of <em>consumers. </em>While these endeavors might make a few individuals a lot of money in the meantime, it is unlikely to be good in the long-run for culture — or our soul.</p><p>I am not philosophically in opposition to generative AI, even for artistic creation. For one, I don’t know what “AI making art” evens means at this point; I barely, if at all, understand “humans making art”. I am inclined to say, therefore, “there should be room for that, too”. At the same time, I am committed to preserving and protecting the room for humans to labor profusely, unenjoyably, illogically to creatively express themselves. The former may happen more and more as AI entrenches itself further in our lives; simultaneously, there is something at stake in the latter. “There should be room for that, too” should apply both ways.</p><p>I once gave <a href="https://www.youtube.com/watch?v=FYc6uXBUL6k&amp;ab_channel=MattReed">a talk at Stanford HAI’s conference on AI and Creativity</a>, where I put forth my own “crisis” question for others: “What Do We (Really) Want from Artificial Intelligence?”. The talk offers no answers, but a set of lenses to think about AI and creative expression. Give it a watch, if you would like, and figure out for yourself the questions that matter to you.</p><p><iframe width="853" height="505" src="https://www.youtube.com/embed/1tqgwlfi8P8?si=Pwtifp0v8jYVHFqh" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></p><h2 id="bb7c"><strong>What I (Really) Want</strong></h2><p>In these days of profound uncertainty about the future, I look at my daughter, who just turned one, and every fiber of my person tells me this: as she grows, I would want her to learn to value and even embrace the difficulty, confusion, frustration that come with learning, and that reside inherent in the craft of creatively expressing oneself, whatever form that may take — and for her to come to know the sublime joy hidden in the process…with or without AI.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US government agency argues that money isn't property–so it can take yours (131 pts)]]></title>
            <link>https://reason.com/2025/01/31/the-government-says-money-isnt-property-so-it-can-take-yours/</link>
            <guid>42891724</guid>
            <pubDate>Fri, 31 Jan 2025 20:42:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reason.com/2025/01/31/the-government-says-money-isnt-property-so-it-can-take-yours/">https://reason.com/2025/01/31/the-government-says-money-isnt-property-so-it-can-take-yours/</a>, See on <a href="https://news.ycombinator.com/item?id=42891724">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							<p><span>As a lawyer who sues the government, you get used to the different kinds of arguments that government lawyers use to justify abuses of individual rights—sweeping claims of government power, bad-faith procedural obstacles, and more.&nbsp;&nbsp;</span></p> <p><span>This was a new one: The U.S. Department of Justice (DOJ) </span><a href="https://storage.courtlistener.com/recap/gov.uscourts.dcd.255899/gov.uscourts.dcd.255899.18.0.pdf"><span>argued</span></a><span> that confiscating $50,000 from a small business did not infringe the business' right to private property because money is not property.&nbsp;&nbsp;</span></p> <p><span>"Money is not necessarily 'property' for constitutional purposes," the government's brief declared—putting the very idea of property in square quotes. Reading at my desk, I practically fell out of my chair.&nbsp;</span></p> <p><span>The DOJ gave three rationales for the argument, all packed into a doorstopper of a footnote: (1) the government creates money, so you can't own it; (2) the government can tax your money, so you don't own it; and (3) the Constitution allows the government to spend money for the "general welfare."</span></p> <p><span>If a libertarian was asked to write a satire of a government lawyer's brief, this is what they might come up with. But here it was, in black and white.&nbsp;</span></p> <p><span>Whose money, specifically, was the government saying wasn't property? That of Chuck Saine, the owner of C.S. Lawn &amp; Landscaping, a small landscaping business outside Annapolis, Maryland, which he has operated for over 40 years.&nbsp;</span></p> <p><span>Saine became a client of the Institute for Justice (I.J.), a public interest law firm, when the federal government sought to </span><a href="https://ij.org/case/c-s-lawn-administrative-appeal/"><span>impose over $50,000 in liability</span></a><span> on his business through a "trial" held deep inside the bowls of a federal administrative agency. At said trial, both the prosecutor and the judge were employed by the same federal agency.&nbsp;</span></p> <p><span>I.J. sued, arguing that before the government can impose that kind of liability, it has to provide a real trial before a real judge and jury. The specifics of what the government claims Saine did wrong (in short: arcane labor law) are beside the point. If the government wants to confiscate over $50,000 from your business, you must have the chance to argue your defense to an impartial judge and jury—not an agency bureaucrat.&nbsp;</span></p> <p><span>Now, the DOJ argued that Saine has no right to a real judge and jury because the government was only trying to take his money, not his property. They claimed that fiat currency is a legal fiction that the government can as easily destroy as create. Lest anyone miss the implicit connection to the history of the gold standard, DOJ's footnote prominently cited the </span><i><span>Legal Tender Cases</span></i><span>—where the Supreme Court upheld laws forcing people to accept paper currency, rather than gold and silver, as payment for debts.&nbsp;</span></p> <p><span>This was an argument for taking Saine's $50,000 without a trial before a real judge and jury, but the same argument could be used to justify all manner of mischief. If your money is not your property, what is to stop the government from just seizing all of it tomorrow—for any reason it gives?&nbsp;&nbsp;</span></p> <p><span>Before you run out and trade your USD for meme coins, let me reassure you: DOJ's argument is wrong. The Due Process Clause applies to "life, liberty, or property," and the Supreme Court has repeatedly applied that Clause to money. It follows that, since money is neither life nor liberty, it must be property.&nbsp;</span></p> <p><span>To be sure, DOJ's arguments have force as a philosophical critique of government, taxation, and the monetary system. They may also highlight legitimate reasons to hold part of your wealth in gold or (for some) cryptocurrency. But "for constitutional purposes," to borrow a phrase from the DOJ, the arguments are a flop.&nbsp;</span></p> <p><span>A federal court will soon decide whether to uphold Saine's right to a trial before an impartial judge and jury. Hopefully, the court will agree: Money is property, and an agency bureaucrat is not an impartial judge.</span></p>						</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Elite on the 6502: The original 6502 assembly source, heavily commented (143 pts)]]></title>
            <link>https://elite.bbcelite.com/</link>
            <guid>42891200</guid>
            <pubDate>Fri, 31 Jan 2025 19:55:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://elite.bbcelite.com/">https://elite.bbcelite.com/</a>, See on <a href="https://news.ycombinator.com/item?id=42891200">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
				<!-- Start of article -->
				<div>
						

						<p><img src="https://elite.bbcelite.com/images/general/Elite-BBCMicro.png" alt="BBC Micro Elite screenshot"><img src="https://elite.bbcelite.com/images/general/Elite-BBCMicro.png" alt="BBC Micro Elite screenshot"><img src="https://elite.bbcelite.com/images/general/Elite-Tube.png" alt="BBC Micro 6502 Second Processor Elite screenshot"></p><p>This site contains the original 1980s source code for the classic space game Elite, with every single line documented and (for the most part) explained. It is literally the original 6502 assembly source code, just heavily commented.</p>

						<p>As well as <a href="https://elite.bbcelite.com/cassette/articles/map_of_the_source_code.html">exploring the source</a>, you can read <a href="https://elite.bbcelite.com/deep_dives/">over 120 deep dives</a> into how Elite weaves its magic, <a href="https://elite.bbcelite.com/playing_elite/">play the game</a>, or take things to a new level with the <a href="https://elite.bbcelite.com/hacks/">Elite hacks</a>. There are more suggestions for your visit in the section below.</p>

						<p>All the official versions of 6502 Elite are covered (and more):</p>

						<ul>
						    <li>The original <a href="https://elite.bbcelite.com/cassette/">BBC Micro cassette</a> version</li>

						    <li>The enhanced <a href="https://elite.bbcelite.com/disc/">BBC Micro disc</a> version</li>

						    <li>The cut-down <a href="https://elite.bbcelite.com/electron/">Acorn Electron</a> version</li>

						    <li>The super-fast <a href="https://elite.bbcelite.com/6502sp/">6502 Second Processor</a> version</li>

						    <li>The musical <a href="https://elite.bbcelite.com/c64/">Commodore 64</a> version</li>

						    <li>The flicker-free <a href="https://elite.bbcelite.com/apple/">Apple II</a> version</li>

						    <li>The super-smooth <a href="https://elite.bbcelite.com/master/">BBC Master</a> version</li>

						    <li>The "impossible" <a href="https://elite.bbcelite.com/nes/">Nintendo Entertainment System (NES)</a> version</li>

						    <li>And Angus Duggan's <a href="https://elite.bbcelite.com/elite-a/">Elite-A</a>, the epic extended version of the original game</li>

						</ul>

						<p>Elite was first released in 1984, for the BBC Micro. It was written by Ian Bell and David Braben, and was published by Acornsoft (for Acorn machines), Firebird (Commodore 64 and Apple II) and Imagineer (for the NES). The original sources were released some time ago by Ian Bell on his <a href="http://www.elitehomepage.org/">personal website</a>.</p>

						<p><img src="https://elite.bbcelite.com/images/general/Elite-NES.png" alt="NES Elite screenshot"></p><p>Note that the source code has not been released for the BBC Micro disc, Acorn Electron or BBC Master versions, so where they differ from the released sources, the extra code has been reconstructed by hand from a disassembly of the original game binaries. The rest is all original 1980s source code.</p>

						<p>My hope is that this site will be useful for those who want to learn more about Elite and what makes it tick. It is provided on an educational and non-profit basis, with the aim of helping people appreciate one of the most iconic games of the 8-bit era.</p>

						<h2>Suggestions for your visit<br>
						                             --------------------------</h2>

						<p>To start your journey into the secrets of Elite, you might like to try the following:</p>

						<ul>
							<li>See the <a href="https://elite.bbcelite.com/about_site/quick_start_guide.html">quick start guide</a> to find out how to use this site.</li>

							<li>Read more <a href="https://elite.bbcelite.com/about_site/about_this_project.html">about this project</a> and how it came to be.</li>

							<li>Check out the <a href="https://elite.bbcelite.com/deep_dives/">deep dive articles</a> for lots of details about how Elite works under the hood.</li>

							<li>Explore Elite hacks like the <a href="https://elite.bbcelite.com/hacks/elite_compendium.html">Elite Compendium</a>, the <a href="https://elite.bbcelite.com/hacks/elite_universe_editor.html">Elite Universe Editor</a>, <a href="https://elite.bbcelite.com/hacks/elite_3d.html">Elite 3D</a>, <a href="https://elite.bbcelite.com/hacks/flicker-free_elite.html">flicker-free Elite</a>, <a href="https://elite.bbcelite.com/hacks/teletext_elite.html">Teletext Elite</a> and <a href="https://elite.bbcelite.com/hacks/elite_over_econet.html">Elite over Econet</a>.</li>

							<li>Dive straight into the <a href="https://elite.bbcelite.com/cassette/articles/map_of_the_source_code.html">source code</a>, though you might want to <a href="https://elite.bbcelite.com/about_site/terminology_used_in_this_commentary.html">read these notes</a> first, which explain some of the terminology used in the commentary.</li>

							<li>Dig really deep and <a href="https://elite.bbcelite.com/compare/how_to_compare.html">compare the code for the different versions</a> of Acornsoft Elite.

							</li><li>Play Elite <a href="https://elite.bbcelite.com/playing_elite/">in your browser or emulator</a>, and discover why it is regarded as such a masterpiece.</li>

							<li>Jump straight to a <a href="https://elite.bbcelite.com/cgi-bin/random.cgi">random routine from the source code</a> - who knows where you might end up? (Hopefully not in witchspace...) You can also click the ∞ at the top of the page to keep jumping through the source code; it's a good way to explore.</li>
						</ul>

						<p>If you prefer a lighter theme for your Elite explorations, you can change the site's colour scheme by clicking the icons in the top-right corner.</p>

						<p><img src="https://elite.bbcelite.com/images/general/Elite-Commodore64.png" alt="Commodore 64 Elite screenshot"></p><h2>If you want to play with the code<br>
						                             ---------------------------------</h2>

						<p>If you are interested in building a working copy of Elite from the source, then you'll enjoy exploring the accompanying GitHub repositories, each of which contains fully commented and buildable source code for a specific version of Elite:</p>

						<ul>
							<li><a href="https://github.com/markmoxon/elite-source-code-bbc-micro-cassette">BBC Micro cassette version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-bbc-micro-disc">BBC Micro disc version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-acorn-electron">Acorn Electron version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-6502-second-processor">6502 Second Processor version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-commodore-64">Commodore 64 version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-apple-ii">Apple II version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-bbc-master">BBC Master version</a></li>

							<li><a href="https://github.com/markmoxon/elite-source-code-nes">NES version</a></li>

							<li><a href="https://github.com/markmoxon/elite-a-source-code-bbc-micro">Elite-A</a></li>
						</ul>
            
						<p>These repositories can be <a href="https://elite.bbcelite.com/about_site/building_elite.html">assembled on modern computers</a> to produce working game discs that can be loaded into a BBC Micro, an Acorn Electron, a NES or an emulator. If you want to experiment with the code, this is the place to go.</p>

						<p><img src="https://elite.bbcelite.com/images/general/Elite-AppleII.png" alt="Apple II Elite screenshot"></p><h2>Similar projects<br>
						                             ----------------</h2>

						<p>If you like this site, then you may also be interested in my other software archaeology projects:</p>

						<ul>
							<li>Fully documented <a href="https://revs.bbcelite.com/">source code for Revs</a> on the BBC Micro</li>

							<li>Fully documented <a href="https://aviator.bbcelite.com/">source code for Aviator</a> on the BBC Micro</li>

							<li>Fully documented <a href="https://lander.bbcelite.com/">source code for Lander</a> on the Acorn Archimedes</li>
						</ul>

						<p>Right on, Commanders!</p>

						<p><a href="https://www.markmoxon.com/"><i>Mark Moxon</i></a></p>
					</div>
				<!-- End of article -->
			</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Instagram and Facebook Blocked and Hid Abortion Pill Providers' Posts (275 pts)]]></title>
            <link>https://www.nytimes.com/2025/01/23/technology/instagram-facebook-abortion-pill-providers.html</link>
            <guid>42891148</guid>
            <pubDate>Fri, 31 Jan 2025 19:51:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/01/23/technology/instagram-facebook-abortion-pill-providers.html">https://www.nytimes.com/2025/01/23/technology/instagram-facebook-abortion-pill-providers.html</a>, See on <a href="https://news.ycombinator.com/item?id=42891148">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/01/23/technology/instagram-facebook-abortion-pill-providers.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Bypass DeepSeek censorship by speaking in hex (412 pts)]]></title>
            <link>https://substack.com/home/post/p-156004330</link>
            <guid>42891042</guid>
            <pubDate>Fri, 31 Jan 2025 19:41:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://substack.com/home/post/p-156004330">https://substack.com/home/post/p-156004330</a>, See on <a href="https://news.ycombinator.com/item?id=42891042">Hacker News</a></p>
Couldn't get https://substack.com/home/post/p-156004330: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Meta in talks to reincorporate in Texas or another state, WSJ reports (120 pts)]]></title>
            <link>https://www.reuters.com/technology/meta-talks-reincorporate-texas-or-another-state-exit-delaware-wsj-reports-2025-01-31/</link>
            <guid>42890960</guid>
            <pubDate>Fri, 31 Jan 2025 19:35:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/technology/meta-talks-reincorporate-texas-or-another-state-exit-delaware-wsj-reports-2025-01-31/">https://www.reuters.com/technology/meta-talks-reincorporate-texas-or-another-state-exit-delaware-wsj-reports-2025-01-31/</a>, See on <a href="https://news.ycombinator.com/item?id=42890960">Hacker News</a></p>
Couldn't get https://www.reuters.com/technology/meta-talks-reincorporate-texas-or-another-state-exit-delaware-wsj-reports-2025-01-31/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI O3-Mini (671 pts)]]></title>
            <link>https://openai.com/index/openai-o3-mini/</link>
            <guid>42890627</guid>
            <pubDate>Fri, 31 Jan 2025 19:08:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/index/openai-o3-mini/">https://openai.com/index/openai-o3-mini/</a>, See on <a href="https://news.ycombinator.com/item?id=42890627">Hacker News</a></p>
Couldn't get https://openai.com/index/openai-o3-mini/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[The Tensor Cookbook (127 pts)]]></title>
            <link>https://tensorcookbook.com/</link>
            <guid>42890389</guid>
            <pubDate>Fri, 31 Jan 2025 18:47:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tensorcookbook.com/">https://tensorcookbook.com/</a>, See on <a href="https://news.ycombinator.com/item?id=42890389">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <h2>What are Tensor Diagrams?</h2>
          <p>
            Machine learning involves a lot of tensor manipulation, and it's easy to lose track of the bigger picture when manipulating high-dimensional data using notation designed for vectors and matrices.
          </p>
          <p>
            It turns out all the trouble with tensors disappears when you instead represent them using graphs:
          </p>
          <p><img src="https://tensorcookbook.com/paper/figures/front.png" alt="Tensor Diagram Example">
          </p>
          <p>
            This book aims to <strong>standardize the notation for tensor diagrams</strong> by rewriting the classical
            "<a href="https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf">Matrix Cookbook</a>" using this notation.
          </p>
          <p>
            Tensor diagrams are better than alternative notation like Index Notation (einsum) because they:
          </p>
          <ul>
             <li>Make it easy to spot patterns and symmetries</li>
             <li>Avoid all trouble with vectorization and Kronecker products</li>
             <li>Make Matrix Calculus simple and intuitive</li>
             <li>Represent functions and broadcasting effortlessly</li>
          </ul>

          <h2>Tensorgrad</h2>
          <p>is a <a href="https://github.com/thomasahle/tensorgrad/">python library</a>
            for symbolic tensor manipulation and derivatives using tensor diagrams.
            Try it here:</p>


          
       </div><div id="citation-info">
          <h2>How to Cite:</h2>
          <p>If you use The Tensor Cookbook in your research, please cite it using the following BibTeX entry:</p>
          <pre>@book{ahle2024tensorcookbook,
  title={The Tensor Cookbook},
  author={Ahle, Thomas Dybdahl},
  year={2024},
  url={https://tensorcookbook.com},
  note={Version: September, 2024}
}</pre>
       </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FBI, Dutch police disrupt 'Manipulaters' phishing gang (125 pts)]]></title>
            <link>https://krebsonsecurity.com/2025/01/fbi-dutch-police-disrupt-manipulaters-phishing-gang/</link>
            <guid>42890290</guid>
            <pubDate>Fri, 31 Jan 2025 18:36:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krebsonsecurity.com/2025/01/fbi-dutch-police-disrupt-manipulaters-phishing-gang/">https://krebsonsecurity.com/2025/01/fbi-dutch-police-disrupt-manipulaters-phishing-gang/</a>, See on <a href="https://news.ycombinator.com/item?id=42890290">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
												<p>The FBI and authorities in The Netherlands this week seized dozens of servers and domains for a hugely popular spam and malware dissemination service operating out of Pakistan. The proprietors of the service, who use the collective nickname “<strong>The Manipulaters</strong>,” have been the subject of three stories published here since 2015. The FBI said the main clientele are organized crime groups that try to trick victim companies into making payments to a third party.</p>
<div id="attachment_56857"><p><img aria-describedby="caption-attachment-56857" decoding="async" src="https://krebsonsecurity.com/wp-content/uploads/2021/09/ftexploit.png" alt="" width="749" height="530" srcset="https://krebsonsecurity.com/wp-content/uploads/2021/09/ftexploit.png 1208w, https://krebsonsecurity.com/wp-content/uploads/2021/09/ftexploit-768x544.png 768w, https://krebsonsecurity.com/wp-content/uploads/2021/09/ftexploit-782x553.png 782w, https://krebsonsecurity.com/wp-content/uploads/2021/09/ftexploit-100x70.png 100w" sizes="(max-width: 749px) 100vw, 749px"></p><p id="caption-attachment-56857">One of several current Fudtools sites run by the principals of The Manipulators.</p></div>
<p>On January 29, the FBI and the Dutch national police seized the technical infrastructure for a cybercrime service marketed under the brands <strong>Heartsender</strong>, <strong>Fudpage</strong> and <strong>Fudtools</strong> (and many other “fud” variations). The “fud” bit stands for “Fully Un-Detectable,” and it refers to cybercrime resources that will evade detection by security tools like antivirus software or anti-spam appliances.</p>
<p>The Dutch authorities <a href="https://www.politie.nl/nieuws/2025/januari/27/09-verstoringsactie-deelt-klap-uit-aan-crimineel-cybernetwerk-heartsender.html" target="_blank" rel="noopener">said</a> 39 servers and domains abroad were seized, and that the servers contained millions of records from victims worldwide — including at least 100,000 records pertaining to Dutch citizens.</p>
<p>A <a href="https://www.justice.gov/usao-sdtx/pr/cybercrime-websites-selling-hacking-tools-transnational-organized-crime-groups-seized" target="_blank" rel="noopener">statement</a> from the <strong>U.S. Department of Justice</strong> refers to the cybercrime group as <strong>Saim Raza</strong>, after a pseudonym The Manipulaters communally used to promote their spam, malware and phishing services on social media.</p>
<p>“The Saim Raza-run websites operated as marketplaces that advertised and facilitated the sale of tools such as phishing kits, scam pages and email extractors often used to build and maintain fraud operations,” the DOJ explained.</p>
<p>The core Manipulaters product is <strong>Heartsender</strong>, a spam delivery service whose homepage openly advertised phishing kits targeting users of various Internet companies, including <strong>Microsoft 365</strong>,&nbsp;<strong>Yahoo</strong>,&nbsp;<strong>AOL</strong>,&nbsp;<strong>Intuit</strong>,&nbsp;<strong>iCloud</strong>&nbsp;and&nbsp;<strong>ID.me</strong>, to name a few.</p>
<p>The government says transnational organized crime groups that purchased these services primarily used them to run <a href="https://krebsonsecurity.com/tag/business-email-compromise/" target="_blank" rel="noopener">business email compromise</a> (BEC) schemes, wherein the cybercrime actors tricked victim companies into making payments to a third party.</p>
<p>“Those payments would instead be redirected to a financial account the perpetrators controlled, resulting in significant losses to victims,” the DOJ wrote. “These tools were also used to acquire victim user credentials and utilize those credentials to further these fraudulent schemes. The seizure of these domains is intended to disrupt the ongoing activity of these groups and stop the proliferation of these tools within the cybercriminal community.”</p>
<div id="attachment_67010"><p><img aria-describedby="caption-attachment-67010" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2024/04/manipulaters-o365.png" alt="" width="748" height="291" srcset="https://krebsonsecurity.com/wp-content/uploads/2024/04/manipulaters-o365.png 1097w, https://krebsonsecurity.com/wp-content/uploads/2024/04/manipulaters-o365-768x299.png 768w, https://krebsonsecurity.com/wp-content/uploads/2024/04/manipulaters-o365-782x304.png 782w" sizes="(max-width: 748px) 100vw, 748px"></p><p id="caption-attachment-67010">Manipulaters advertisement for “Office 365 Private Page with Antibot” phishing kit sold via Heartsender. “Antibot” refers to functionality that attempts to evade automated detection techniques, keeping a phish deployed and accessible as long as possible. Image: DomainTools.</p></div>
<p>KrebsOnSecurity first wrote about The Manipulaters <a href="https://krebsonsecurity.com/2015/05/phishing-gang-is-audacious-manipulator/" target="_blank" rel="noopener">in May 2015</a>, mainly because their ads at the time were blanketing a number of popular cybercrime forums, and because they were fairly open and brazen about what they were doing — even who they were in real life.</p>
<p>We caught up with The Manipulaters again in 2021, with <a href="https://krebsonsecurity.com/2021/09/fudco-spam-empire-tied-to-pakistani-software-firm/" target="_blank" rel="noopener">a story</a> that found the core employees had started a web coding company in Lahore called <strong>WeCodeSolutions</strong> — presumably as a way to account for their considerable Heartsender income. That piece examined how WeCodeSolutions employees had all doxed themselves on Facebook by posting pictures from company parties each year featuring a large cake with the words <strong>FudCo</strong> written in icing.<span id="more-70250"></span></p>
<p>A <a href="https://krebsonsecurity.com/2024/04/the-manipulaters-improve-phishing-still-fail-at-opsec/" target="_blank" rel="noopener">follow-up story last year</a> about The Manipulaters prompted messages from various WeCodeSolutions employees who pleaded with this publication to remove stories about them. The Saim Raza identity told KrebsOnSecurity they were recently released from jail after being arrested and charged by local police, although they declined to elaborate on the charges.</p>
<p>The Manipulaters never seemed to care much about protecting their own identities, so it’s not surprising that they were unable or unwilling to protect their own customers. In <a href="https://www.domaintools.com/resources/blog/the-resurgence-of-the-manipulaters-team-breaking-heartsenders?utm_source=Krebs-on-Security" target="_blank" rel="noopener">an analysis</a> released last year, <strong>DomainTools.com</strong> found the web-hosted version of Heartsender leaked an extraordinary amount of user information to unauthenticated users, including customer credentials and email records from Heartsender employees.</p>
<div id="attachment_56860"><p><img aria-describedby="caption-attachment-56860" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2021/09/fudcocake.png" alt="" width="751" height="773" srcset="https://krebsonsecurity.com/wp-content/uploads/2021/09/fudcocake.png 834w, https://krebsonsecurity.com/wp-content/uploads/2021/09/fudcocake-768x790.png 768w, https://krebsonsecurity.com/wp-content/uploads/2021/09/fudcocake-782x805.png 782w" sizes="(max-width: 751px) 100vw, 751px"></p><p id="caption-attachment-56860">Almost every year since their founding, The Manipulaters have posted a picture of a FudCo cake from a company party celebrating its anniversary.</p></div>
<p>DomainTools also uncovered evidence that the computers used by The Manipulaters were all infected with the same password-stealing malware, and that vast numbers of credentials were stolen from the group and sold online.</p>
<p>“Ironically, the Manipulaters may create more short-term risk to their own customers than law enforcement,” DomainTools wrote. “The data table ‘User Feedbacks’ (sic) exposes what appear to be customer authentication tokens, user identifiers, and even a customer support request that exposes root-level SMTP credentials–all visible by an unauthenticated user on a Manipulaters-controlled domain.”</p>
<p>Police in The Netherlands said the investigation into the owners and customers of the service is ongoing.</p>
<p>“The Cybercrime Team is on the trail of a number of buyers of the tools,” the Dutch national police said. “Presumably, these buyers also include Dutch nationals. The investigation into the makers and buyers of this phishing software has not yet been completed with the seizure of the servers and domains.”</p>
<p>U.S. authorities this week also joined law enforcement in Australia, France, Greece, Italy, Romania and Spain in seizing a number of domains for several long-running cybercrime forums and services, including <strong>Cracked</strong> and <strong>Nulled</strong>. According to <a href="https://www.europol.europa.eu/media-press/newsroom/news/law-enforcement-takes-down-two-largest-cybercrime-forums-in-world" target="_blank" rel="noopener">a statement</a> from the European police agency <strong>Europol</strong>, the two communities attracted more than 10 million users in total.</p>
<p>Other domains seized as part of “<strong>Operation Talent</strong>” included <strong>Sellix</strong>, an e-commerce platform that was frequently used by cybercrime forum members to buy and sell illicit goods and services.</p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Three AM 911 call, 9 AM salesman (159 pts)]]></title>
            <link>https://a.wholelottanothing.org/when-everything-becomes-a-profit-center/</link>
            <guid>42889777</guid>
            <pubDate>Fri, 31 Jan 2025 17:47:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://a.wholelottanothing.org/when-everything-becomes-a-profit-center/">https://a.wholelottanothing.org/when-everything-becomes-a-profit-center/</a>, See on <a href="https://news.ycombinator.com/item?id=42889777">Hacker News</a></p>
Couldn't get https://a.wholelottanothing.org/when-everything-becomes-a-profit-center/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Living with Nausea: My Story in Six Charts (122 pts)]]></title>
            <link>https://www.c82.net/blog/?id=96</link>
            <guid>42889700</guid>
            <pubDate>Fri, 31 Jan 2025 17:37:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.c82.net/blog/?id=96">https://www.c82.net/blog/?id=96</a>, See on <a href="https://news.ycombinator.com/item?id=42889700">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="entry">
    






<figure>
    <img alt="Collage of charts" src="https://www.c82.net/images/blog/nausea-cover.jpg">
</figure>

<p>I used to have boring health. I never had more than the flu, been admitted to the hospital, and I could eat whatever I wanted, whenever I wanted. In late 2023, that changed when I developed chronic nausea.</p>
<p>The nausea started on November 20, 2023, with what I thought was nothing more than a mild upset stomach and has continued every day since, with varying intensity without any clear triggers. I’ve seen a dozen doctors, tried many medications, and have been subjected to more tests than before I became ill. Nothing pointed to a clear cause and no treatment has had lasting effects.</p>
<p>Chronic nausea is invisible and debilitating.<br>I’m learning how to be me again.</p>
<p>I never gave much thought to what I ate. I ate when I was hungry, enjoyed going to work, lost myself in my projects, and visited family regularly, eating out often on trips. Now, I carefully monitor everything I eat and have up to seven small meals a day. I’m only able to eat small amounts of food at a time because I feel extremely full if I have anything resembling a complete meal. <strong>I’ve learned to eat <em>through</em> the nausea.</strong> I rely on foods that are easy to digest and eat roughly every two hours so I can get enough nutrients to maintain a constant weight. I used to travel every year to visit family but have had to cancel more than a year’s worth of trips because there have been many times when I could barely leave my house to run errands, let alone fly to another state. I take frequent naps, not because I’m tired, but because they allow me to escape the awareness of how I feel. My life revolves around how poorly I’m feeling and it’s hard to focus on much else.</p>
<p>My doctors initially diagnosed me with <a href="https://www.mayoclinic.org/diseases-conditions/gastroparesis/symptoms-causes/syc-20355787">gastroparesis</a>, which means food didn’t pass through my stomach as fast as it should, and as a result, ferments and causes nausea. Later, that diagnosis was broadened to include <a href="https://www.mayoclinic.org/diseases-conditions/functional-dyspepsia/symptoms-causes/syc-20375709">functional dyspepsia</a> and <a href="https://my.clevelandclinic.org/health/diseases/22997-visceral-hypersensitivity">visceral hypersensitivity</a>—both of which are vague umbrella terms that essentially mean I have an upset stomach with no clear cause and no cure.</p>
<p>When I realized the nausea was becoming chronic, I started doing one thing I could control—<strong>collect data about it</strong>. At the end of each day, I took up writing basic notes about how I felt that day, any treatments I tried, and assigning a number to it from 0 to 10 based on how nauseous I felt.</p>

<figure>
    
    <figcaption>Timeline of daily nausea severity with running average</figcaption>
</figure>

<figure>
    <ol start="0">
        <li>No nausea all day</li>
        <li>Occasional periods with little or no nausea</li>
        <li>Noticeable but manageable nausea all day</li>
        <li>Steady nausea all day with difficulty focusing, one or two naps needed</li>
        <li>Unavoidable nausea with multiple naps needed for relief</li>
        <li>Constant strong nausea all day, multiple naps needed</li>
        <li>Strong nausea all day and schedule changes needed for relief</li>
        <li>Vomiting at least once, hospital visit optional</li>
        <li>Unable to keep food down, hospital visit needed</li>
        <li>Vomiting, pain, hospital visit</li>
        <li>Prolonged hospital visit</li>
    </ol>
</figure>

<p>Originally, I tracked this to help my doctors better understand how I was feeling and create new treatment plans but that never happened, despite mentioning it to every doctor I’ve seen. Instead, I use it as a point of reference to remind myself what I’ve tried and to identify trends.</p>
<p>What I’ve found most interesting is the regular intervals at which my nausea flares up—about two weeks. This was surprising because I didn’t expect there to be such regularity. I’ve learned to consider this pattern when evaluating a treatment’s effectiveness. If a treatment had a meaningful impact beyond two weeks, it would be considered effective. Unfortunately, few have.</p>
<p>I’ve seen a range of doctors over dozens of visits in an effort to find relief, including my regular doctor, gastroenterologists, surgeons, therapists, a dietician, and a neurologist. The conversations I’ve had have typically been less than an hour long and comprised me giving a too-brief summary on how I’ve been feeling, reviewing tests results, some general questions about any changes in my habits, and a suggestion to try anti-anxiety medication, over-the-counter medication, or continue waiting to see if my symptoms improve on their own.</p>

<figure>
    
    <figcaption>Timeline of doctor visits</figcaption>
</figure>

<p>From November 2023 to May 2024, I saw my gastroenterologist, psychologist, and dietician on a regular basis. By summer, I started to feel better—even without medication—so appointments were scaled back. The nausea never completely subsided but felt manageable. However, it increased substantially toward the end of June, which prompted me to consider seeing other doctors to help me cope. I met with a neurologist, who was kind enough to listen to my story from beginning to end over the course of two hours. The outcome was similar but I was glad I had the chance to tell him my full story. I started seeing a psychiatrist to see if off-label use of psychiatric medication would help but as of this writing, I’m still evaluating its effectiveness.</p>
<p>Appointments have been emotional roller coasters. Before each one, I naively started to hope that a recent test or experience with medication would reveal something new, or my doctor would have a new treatment to try. Often, the outcome is hearing that everything “looks normal” or that my problems are due to anxiety, which are two of the most crushing responses to hear, especially when I feel far from normal. Weeks or months have often separated appointments, partly because of availability, but also because trying new treatments takes time. Waiting months to see doctors or try treatments only to be told the same result after a short 30-minute visit is a constant source of frustration.</p>
<p>None of my doctors could identify a clear cause for the ongoing nausea but two key events may have contributed:</p>

<ul>
    <li>On September 19, 2023, I tested positive for <strong>COVID-19</strong>. Having been vaccinated, it seemed to be a mild case with common symptoms—such as congestion, loss of smell, loss of taste, and of course, nausea. Unusual symptoms included vertigo and a numb toe. After 12 days, I felt normal again and had no lasting ill effects.</li>
    <li>On November 2, 2023, I caught the <strong>stomach flu</strong> and felt nauseous during the last day of a vacation in Florida and collapsed after standing up too quickly, hitting my head on the way down. I’ve always been somewhat prone to vasovagal syncope but only succumbed to it a handful of times. After coming to in less than a minute, I vomited and had a panic attack. The nausea subsided a few days later with no lasting ill effects. Doctors suspected it was little more than a stomach bug.</li>
</ul>

<p>These two events were far enough away from my initial onset of chronic nausea that none of my doctors could definitively say if either was the cause of my nausea but believe they may have damaged some of my gastrointestinal nerves. Unfortunately, knowing a potential cause doesn’t necessarily result in an effective treatment.</p>
<p>Procedures I’ve had include numerous blood draws, CT scans, gastric emptying studies (GES), ultrasounds, and a failed pharmaceutical clinical trial. Early on, a lot of the standard tests were performed to rule out obvious causes like obstructions, cancer, etc.</p>

<figure>
    
    <figcaption>Timeline of tests and procedures</figcaption>
</figure>

<p>The only test that showed something conclusive was my first gastric emptying study. Out of all the tests I’ve had, it was the most pleasant because it simply involved eating some scrambled eggs laced with a harmless radioactive tracer along with a piece of toast and taking scans of my abdomen over the course of four hours to see how the food moved through my system. After four hours, I should have had 10% or less in my stomach but in December 2023, I had 41% remaining, which indicated gastroparesis. Based on that, I was prescribed a few medications to make my gastrointestinal muscles work more efficiently but none had a lasting effect. The second study I had in September 2024 showed 8% remaining, at which point my gastroparesis was considered resolved but my symptoms persisted.</p>

<figure>
    
    <figcaption>Chart of gastric emptying studies</figcaption>
</figure>

<p>There was some concern early on that I may have <a href="https://www.mayoclinic.org/diseases-conditions/median-arcuate-ligament-syndrome-mals/symptoms-causes/syc-20505001">median arcuate ligament syndrome (MALS)</a> because one of my arteries appeared more compressed than expected in an ultrasound but that was ruled out after a follow-up ultrasound and a consultation with a vascular surgeon, who didn’t feel there was cause for concern.</p>
<p>ER visits bookended 2024—one in January for excess stomach acid caused by stopping an acid-blocking medication and again in November for a suspected small bowel obstruction, later thought to be enteritis. The latter required staying in the hospital for four days with an NG tube in my nose to drain my stomach (not a fun experience). My nausea subsided while the tube was in place but came back a couple days after being discharged. Despite the circumstances, the lack of nausea was a welcomed, albeit brief relief. During my hospital stay, my many tests were punctuated by panic attacks. Prior to becoming sick, I hadn’t had a panic attack but quickly learned what they feel like so I know what to expect in the future if I feel one coming on. The hospital staff were angels that provided immeasurable help throughout my stay in the hospital and I will be forever grateful for them.</p>
<p>I’ve tried numerous over-the-counter and prescription-strength medications since my nausea started with varying levels of success. Few medications had an immediate effect, so I often had to wait weeks to determine if they helped and they often came with side effects.</p>

<figure>
    
    <figcaption>Timeline of number of medication doses each month</figcaption>
</figure>

<p>The earliest medications I tried were over-the-counter like <strong>Dramamine</strong> and <strong>FDgard</strong> but they did little to help and thankfully had no side effects. When those didn’t work, <strong>Zofran</strong> (often prescribed to cancer patients going through chemotherapy) was prescribed but only lasted a short while. Zofran did cause constipation so more medication was needed to keep that at bay.</p>
<p>Acid-reducing medication like <strong>omeprazole</strong> and <strong>pantoprazole</strong> were prescribed, thinking that my nausea was due to excess stomach acid, but they didn’t touch the nausea. I learned the hard way that stopping pantoprazole suddenly is not recommended because doing so caused excess acid and my first trip to the ER.</p>
<p>To help with motility, or the movement of food through the digestive tract, I tried <strong>Reglan</strong> for about two months. It had no positive impact on my nausea but did cause strong hunger pangs before meals, which implies it had some positive effect on motility. My muscles also started twitching occasionally, which could have been signs of early <a href="https://my.clevelandclinic.org/health/diseases/6125-tardive-dyskinesia">tardive dyskinesia</a> (a common side effect). It can also become chronic and incurable if left untreated so once the twitching started, I discontinued it.</p>
<p><strong>Erythromycin</strong> was prescribed toward the end of February and was the first medication with a noticeable positive effect and may have contributed to why I was able to spend about two months after my regimen without medication. It’s primary use is as an antibiotic but is used off-label to treat delayed gastric emptying (gastroparesis) and nausea in lower doses. The only negative side effect was a strong sense of hunger before meals. When my nausea started to increase at the end of June, I was prescribed a second round but it wasn’t as effective—a common experience for those taking it long term.</p>
<p>In August 2024, I learned of a clinical trial for <strong>Tradipitant</strong>—a new drug that was supposed to help reduce nausea in gastroparesis patients. I had to go through a screening period but made it into the trial and took it regularly for two months. Ultimately, the medication didn’t have any positive impact on my nausea but also didn’t cause negative side effects. While it was a lot of time to spend on an experimental treatment that didn’t pan out, I’m glad I did it. Otherwise, I would have forever wondered if it could have helped me.</p>
<p>Since September 2024, I’ve also been on increasing dosages of <strong>mirtazapine</strong> for depression and an off-label use of reducing nausea as well as Pepcid AC to keep stomach acid at bay. The side effects have been minimal and manageable. Since December 2024, I’ve also been trying <strong>Marinol</strong>—a synthetic form of cannabis to help with nausea, appetite, and fullness. As of this writing, it’s too soon to tell if it’s working but there haven’t been any noticeable negative side effects.</p>
<p>Two over-the-counter medications have proven to be surprisingly effective: <strong>ginger and pectin lozenges</strong>. When my chronic nausea began, I wrote off ginger because I had tried Dramamine ginger chews with no success. Toward the end of December 2023, I bought several kinds of lozenges to give them another try and was pleasantly surprised to find that <a href="https://www.amazon.com/dp/B0BQKKV8JC">UpSpring Stomach Settles ginger lozenges</a> helped when my nausea was mild and <a href="https://www.amazon.com/Breezers-Creamy-Strawberry-Throat-Economy/dp/B07MNKZDK2">Halls Throat Soothing drops</a> helped when I was feeling the effects of excess acid. Both helped within minutes and even though they only lasted a short while (hours at most), having them available has been a big help physically and mentally. Both are available on Amazon and Walgreens.</p>
<p>Throughout this ordeal, my weight has also been a constant focus. I’ve tracked my daily weight since August 2022 purely out of curiosity after seeing how others have tracked their weight and shared how it was affected by diets, medical conditions, life events, etc. I found it interesting to see how my weight fluctuated based on diet, exercise, travel, and even sleep. In an effort to keep it accurate, I developed the habit of weighing myself first thing in the morning and last thing at night and tracking the data using the Health app on iOS. This highlighted a problem that I was unaware of when my chronic nausea first started: <strong>I stopped eating enough</strong>.</p>

<figure>
    
    <figcaption>Chart of average monthly weight</figcaption>
</figure>

<p>When I was nauseous, the last thing I wanted to do was eat so I simply ate less in a futile effort to keep it at bay. As a result, I started shedding pounds and not in a healthy way. Looking back to before I caught COVID, my weight hovered just below 170 lbs and my height was 5′9″. I lost some weight during COVID then it fell off sharply once the chronic nausea started. At my lowest in March, I weighed about 146 lbs. I struggled a great deal to find foods with enough calories and nutrients to maintain a healthy weight. My sessions with my dietician helped me figure out what I could eat and get me back on track. Over the next several months, I slowly inched back up to about 161 lbs. by June. Unfortunately, the increasing nausea around that time and subsequent hospital stay in November resulted in more weight loss, but I am slowly doing my best to gain it back.</p>
<p>A few of my doctors have recommended that I stop tracking all this data to improve my mental health and stop focusing on how I feel. While I understand why, I continue because I won’t be able to remember everything and I still hold out hope of finding meaningful information in all the noise. If nothing else, my experiences may prove useful for others going through similar situations. For better or worse, it’s become a cornerstone of my illness.</p>
<p>The hardest thing to come to terms with is that I likely won’t get better. There’s always the chance that my chronic nausea could go away on its own but that uncertainty is daunting. My family and friends have been invaluable in helping me through this long chaos. I love them more than they could ever know. There are more options I can try and I intend to try everything I can until I find something that works.</p>
<p>I will do everything I can to make my health boring again.</p>

<hr>

<h2>Author’s notes</h2>

<p>I am not a medical professional. This blog post does not constitute medical advice. The information in this post is about what I’ve tried as well as what has or hasn’t worked for me. Consult your doctor before making medical decisions.</p>
<p>This blog post was inspired by Giorgia Lupi’s excellent <cite><a href="http://giorgialupi.com/1374-days-nyt-visual-oped">1,374 Days of COVID</a></cite>, chronicling her life-changing experience living with long COVID.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Shell-ish scripting in Go with ease (111 pts)]]></title>
            <link>https://github.com/bitfield/script</link>
            <guid>42889465</guid>
            <pubDate>Fri, 31 Jan 2025 17:14:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/bitfield/script">https://github.com/bitfield/script</a>, See on <a href="https://news.ycombinator.com/item?id=42889465">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a href="https://pkg.go.dev/github.com/bitfield/script" rel="nofollow"><img src="https://camo.githubusercontent.com/26683446980ba8cccc9e6b1d6c3036dcc42964dec198651d8be9fc67607085ad/68747470733a2f2f706b672e676f2e6465762f62616467652f6769746875622e636f6d2f6269746669656c642f7363726970742e737667" alt="Go Reference" data-canonical-src="https://pkg.go.dev/badge/github.com/bitfield/script.svg"></a>
<a href="https://goreportcard.com/report/github.com/bitfield/script" rel="nofollow"><img src="https://camo.githubusercontent.com/43e914a62d1aba296838a8b5a731c48c210541313f8549be9436193364624f4f/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6269746669656c642f736372697074" alt="Go Report Card" data-canonical-src="https://goreportcard.com/badge/github.com/bitfield/script"></a>
<a href="https://github.com/avelino/awesome-go"><img src="https://camo.githubusercontent.com/adb8f3e4da7635816556cc11275410d326f132ce011955a341259bc1061ff351/68747470733a2f2f617765736f6d652e72652f6d656e74696f6e65642d62616467652d666c61742e737667" alt="Mentioned in Awesome Go" data-canonical-src="https://awesome.re/mentioned-badge-flat.svg"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/bitfield/script/actions/workflows/ci.yml/badge.svg"><img src="https://github.com/bitfield/script/actions/workflows/ci.yml/badge.svg" alt="CI"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/bitfield/script/actions/workflows/audit.yml/badge.svg"><img src="https://github.com/bitfield/script/actions/workflows/audit.yml/badge.svg" alt="Audit"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="import &quot;github.com/bitfield/script&quot;"><pre><span>import</span> <span>"github.com/bitfield/script"</span></pre></div>
<p dir="auto"><a href="https://bitfieldconsulting.com/golang/scripting" rel="nofollow"><img src="https://github.com/bitfield/script/raw/master/img/magic.png" alt="Magical gopher logo"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What is <code>script</code>?</h2><a id="user-content-what-is-script" aria-label="Permalink: What is script?" href="#what-is-script"></a></p>
<p dir="auto"><code>script</code> is a Go library for doing the kind of tasks that shell scripts are good at: reading files, executing subprocesses, counting lines, matching strings, and so on.</p>
<p dir="auto">Why shouldn't it be as easy to write system administration programs in Go as it is in a typical shell? <code>script</code> aims to make it just that easy.</p>
<p dir="auto">Shell scripts often compose a sequence of operations on a stream of data (a <em>pipeline</em>). This is how <code>script</code> works, too.</p>
<blockquote>
<p dir="auto"><em>This is one absolutely superb API design. Taking inspiration from shell pipes and turning it into a Go library with syntax this clean is really impressive.</em><br>
—<a href="https://news.ycombinator.com/item?id=30649524" rel="nofollow">Simon Willison</a></p>
</blockquote>
<p dir="auto">Read more: <a href="https://bitfieldconsulting.com/golang/scripting" rel="nofollow">Scripting with Go</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick start: Unix equivalents</h2><a id="user-content-quick-start-unix-equivalents" aria-label="Permalink: Quick start: Unix equivalents" href="#quick-start-unix-equivalents"></a></p>
<p dir="auto">If you're already familiar with shell scripting and the Unix toolset, here is a rough guide to the equivalent <code>script</code> operation for each listed Unix command.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Unix / shell</th>
<th><code>script</code> equivalent</th>
</tr>
</thead>
<tbody>
<tr>
<td>(any program name)</td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Exec" rel="nofollow"><code>Exec</code></a></td>
</tr>
<tr>
<td><code>[ -f FILE ]</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#IfExists" rel="nofollow"><code>IfExists</code></a></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WriteFile" rel="nofollow"><code>WriteFile</code></a></td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.AppendFile" rel="nofollow"><code>AppendFile</code></a></td>
</tr>
<tr>
<td><code>$*</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Args" rel="nofollow"><code>Args</code></a></td>
</tr>
<tr>
<td><code>base64</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.DecodeBase64" rel="nofollow"><code>DecodeBase64</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.EncodeBase64" rel="nofollow"><code>EncodeBase64</code></a></td>
</tr>
<tr>
<td><code>basename</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Basename" rel="nofollow"><code>Basename</code></a></td>
</tr>
<tr>
<td><code>cat</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#File" rel="nofollow"><code>File</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Concat" rel="nofollow"><code>Concat</code></a></td>
</tr>
<tr>
<td><code>curl</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Do" rel="nofollow"><code>Do</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Get" rel="nofollow"><code>Get</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Post" rel="nofollow"><code>Post</code></a></td>
</tr>
<tr>
<td><code>cut</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Column" rel="nofollow"><code>Column</code></a></td>
</tr>
<tr>
<td><code>dirname</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Dirname" rel="nofollow"><code>Dirname</code></a></td>
</tr>
<tr>
<td><code>echo</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Echo" rel="nofollow"><code>Echo</code></a></td>
</tr>
<tr>
<td><code>find</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#FindFiles" rel="nofollow"><code>FindFiles</code></a></td>
</tr>
<tr>
<td><code>grep</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Match" rel="nofollow"><code>Match</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.MatchRegexp" rel="nofollow"><code>MatchRegexp</code></a></td>
</tr>
<tr>
<td><code>grep -v</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Reject" rel="nofollow"><code>Reject</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.RejectRegexp" rel="nofollow"><code>RejectRegexp</code></a></td>
</tr>
<tr>
<td><code>head</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.First" rel="nofollow"><code>First</code></a></td>
</tr>
<tr>
<td><code>jq</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.JQ" rel="nofollow"><code>JQ</code></a></td>
</tr>
<tr>
<td><code>ls</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#ListFiles" rel="nofollow"><code>ListFiles</code></a></td>
</tr>
<tr>
<td><code>sed</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Replace" rel="nofollow"><code>Replace</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.ReplaceRegexp" rel="nofollow"><code>ReplaceRegexp</code></a></td>
</tr>
<tr>
<td><code>sha256sum</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Hash" rel="nofollow"><code>Hash</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.HashSums" rel="nofollow"><code>HashSums</code></a></td>
</tr>
<tr>
<td><code>tail</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Last" rel="nofollow"><code>Last</code></a></td>
</tr>
<tr>
<td><code>tee</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Tee" rel="nofollow"><code>Tee</code></a></td>
</tr>
<tr>
<td><code>uniq -c</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Freq" rel="nofollow"><code>Freq</code></a></td>
</tr>
<tr>
<td><code>wc -l</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.CountLines" rel="nofollow"><code>CountLines</code></a></td>
</tr>
<tr>
<td><code>xargs</code></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.ExecForEach" rel="nofollow"><code>ExecForEach</code></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Some examples</h2><a id="user-content-some-examples" aria-label="Permalink: Some examples" href="#some-examples"></a></p>
<p dir="auto">Let's see some simple examples. Suppose you want to read the contents of a file as a string:</p>
<div dir="auto" data-snippet-clipboard-copy-content="contents, err := script.File(&quot;test.txt&quot;).String()"><pre><span>contents</span>, <span>err</span> <span>:=</span> <span>script</span>.<span>File</span>(<span>"test.txt"</span>).<span>String</span>()</pre></div>
<p dir="auto">That looks straightforward enough, but suppose you now want to count the lines in that file.</p>
<div dir="auto" data-snippet-clipboard-copy-content="numLines, err := script.File(&quot;test.txt&quot;).CountLines()"><pre><span>numLines</span>, <span>err</span> <span>:=</span> <span>script</span>.<span>File</span>(<span>"test.txt"</span>).<span>CountLines</span>()</pre></div>
<p dir="auto">For something a bit more challenging, let's try counting the number of lines in the file that match the string <code>Error</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="numErrors, err := script.File(&quot;test.txt&quot;).Match(&quot;Error&quot;).CountLines()"><pre><span>numErrors</span>, <span>err</span> <span>:=</span> <span>script</span>.<span>File</span>(<span>"test.txt"</span>).<span>Match</span>(<span>"Error"</span>).<span>CountLines</span>()</pre></div>
<p dir="auto">But what if, instead of reading a specific file, we want to simply pipe input into this program, and have it output only matching lines (like <code>grep</code>)?</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Stdin().Match(&quot;Error&quot;).Stdout()"><pre><span>script</span>.<span>Stdin</span>().<span>Match</span>(<span>"Error"</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">Just for fun, let's filter all the results through some arbitrary Go function:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Stdin().Match(&quot;Error&quot;).FilterLine(strings.ToUpper).Stdout()"><pre><span>script</span>.<span>Stdin</span>().<span>Match</span>(<span>"Error"</span>).<span>FilterLine</span>(<span>strings</span>.<span>ToUpper</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">That was almost too easy! So let's pass in a list of files on the command line, and have our program read them all in sequence and output the matching lines:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Args().Concat().Match(&quot;Error&quot;).Stdout()"><pre><span>script</span>.<span>Args</span>().<span>Concat</span>().<span>Match</span>(<span>"Error"</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">Maybe we're only interested in the first 10 matches. No problem:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Args().Concat().Match(&quot;Error&quot;).First(10).Stdout()"><pre><span>script</span>.<span>Args</span>().<span>Concat</span>().<span>Match</span>(<span>"Error"</span>).<span>First</span>(<span>10</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">What's that? You want to append that output to a file instead of printing it to the terminal? <em>You've got some attitude, mister</em>. But okay:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Args().Concat().Match(&quot;Error&quot;).First(10).AppendFile(&quot;/var/log/errors.txt&quot;)"><pre><span>script</span>.<span>Args</span>().<span>Concat</span>().<span>Match</span>(<span>"Error"</span>).<span>First</span>(<span>10</span>).<span>AppendFile</span>(<span>"/var/log/errors.txt"</span>)</pre></div>
<p dir="auto">And if we'd like to send the output to the terminal <em>as well as</em> to the file, we can do that:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Echo(&quot;data&quot;).Tee().AppendFile(&quot;data.txt&quot;)"><pre><span>script</span>.<span>Echo</span>(<span>"data"</span>).<span>Tee</span>().<span>AppendFile</span>(<span>"data.txt"</span>)</pre></div>
<p dir="auto">We're not limited to getting data only from files or standard input. We can get it from HTTP requests too:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Get(&quot;https://wttr.in/London?format=3&quot;).Stdout()
// Output:
// London: 🌦   +13°C"><pre><span>script</span>.<span>Get</span>(<span>"https://wttr.in/London?format=3"</span>).<span>Stdout</span>()
<span>// Output:</span>
<span>// London: 🌦   +13°C</span></pre></div>
<p dir="auto">That's great for simple GET requests, but suppose we want to <em>send</em> some data in the body of a POST request, for example. Here's how that works:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Echo(data).Post(URL).Stdout()"><pre><span>script</span>.<span>Echo</span>(<span>data</span>).<span>Post</span>(<span>URL</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">If we need to customise the HTTP behaviour in some way, such as using our own HTTP client, we can do that:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.NewPipe().WithHTTPClient(&amp;http.Client{
	Timeout: 10 * time.Second,
}).Get(&quot;https://example.com&quot;).Stdout()"><pre><span>script</span>.<span>NewPipe</span>().<span>WithHTTPClient</span>(<span>&amp;</span>http.<span>Client</span>{
	<span>Timeout</span>: <span>10</span> <span>*</span> <span>time</span>.<span>Second</span>,
}).<span>Get</span>(<span>"https://example.com"</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">Or maybe we need to set some custom header on the request. No problem. We can just create the request in the usual way, and set it up however we want. Then we pass it to <code>Do</code>, which will actually perform the request:</p>
<div dir="auto" data-snippet-clipboard-copy-content="req, err := http.NewRequest(http.MethodGet, &quot;http://example.com&quot;, nil)
req.Header.Add(&quot;Authorization&quot;, &quot;Bearer &quot;+token)
script.Do(req).Stdout()"><pre><span>req</span>, <span>err</span> <span>:=</span> <span>http</span>.<span>NewRequest</span>(<span>http</span>.<span>MethodGet</span>, <span>"http://example.com"</span>, <span>nil</span>)
<span>req</span>.<span>Header</span>.<span>Add</span>(<span>"Authorization"</span>, <span>"Bearer "</span><span>+</span><span>token</span>)
<span>script</span>.<span>Do</span>(<span>req</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">The HTTP server could return some non-okay response, though; for example, “404 Not Found”. So what happens then?</p>
<p dir="auto">In general, when any pipe stage (such as <code>Do</code>) encounters an error, it produces no output to subsequent stages. And <code>script</code> treats HTTP response status codes outside the range 200-299 as errors. So the answer for the previous example is that we just won't <em>see</em> any output from this program if the server returns an error response.</p>
<p dir="auto">Instead, the pipe “remembers” any error that occurs, and we can retrieve it later by calling its <code>Error</code> method, or by using a <em>sink</em> method such as <code>String</code>, which returns an <code>error</code> value along with the result.</p>
<p dir="auto"><code>Stdout</code> also returns an error, plus the number of bytes successfully written (which we don't care about for this particular case). So we can check that error, which is always a good idea in Go:</p>
<div dir="auto" data-snippet-clipboard-copy-content="_, err := script.Do(req).Stdout()
if err != nil {
	log.Fatal(err)
}"><pre><span>_</span>, <span>err</span> <span>:=</span> <span>script</span>.<span>Do</span>(<span>req</span>).<span>Stdout</span>()
<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
	<span>log</span>.<span>Fatal</span>(<span>err</span>)
}</pre></div>
<p dir="auto">If, as is common, the data we get from an HTTP request is in JSON format, we can use <a href="https://stedolan.github.io/jq/" rel="nofollow">JQ</a> queries to interrogate it:</p>
<div dir="auto" data-snippet-clipboard-copy-content="data, err := script.Do(req).JQ(&quot;.[0] | {message: .commit.message, name: .commit.committer.name}&quot;).String()"><pre><span>data</span>, <span>err</span> <span>:=</span> <span>script</span>.<span>Do</span>(<span>req</span>).<span>JQ</span>(<span>".[0] | {message: .commit.message, name: .commit.committer.name}"</span>).<span>String</span>()</pre></div>
<p dir="auto">We can also run external programs and get their output:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Exec(&quot;ping 127.0.0.1&quot;).Stdout()"><pre><span>script</span>.<span>Exec</span>(<span>"ping 127.0.0.1"</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">Note that <code>Exec</code> runs the command concurrently: it doesn't wait for the command to complete before returning any output. That's good, because this <code>ping</code> command will run forever (or until we get bored).</p>
<p dir="auto">Instead, when we read from the pipe using <code>Stdout</code>, we see each line of output as it's produced:</p>
<div data-snippet-clipboard-copy-content="PING 127.0.0.1 (127.0.0.1): 56 data bytes
64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.056 ms
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.054 ms
..."><pre><code>PING 127.0.0.1 (127.0.0.1): 56 data bytes
64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.056 ms
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.054 ms
...
</code></pre></div>
<p dir="auto">In the <code>ping</code> example, we knew the exact arguments we wanted to send the command, and we just needed to run it once. But what if we don't know the arguments yet? We might get them from the user, for example.</p>
<p dir="auto">We might like to be able to run the external command repeatedly, each time passing it the next line of data from the pipe as an argument. No worries:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Args().ExecForEach(&quot;ping -c 1 {{.}}&quot;).Stdout()"><pre><span>script</span>.<span>Args</span>().<span>ExecForEach</span>(<span>"ping -c 1 {{.}}"</span>).<span>Stdout</span>()</pre></div>
<p dir="auto">That <code>{{.}}</code> is standard Go template syntax; it'll substitute each line of data from the pipe into the command line before it's executed. You can write as fancy a Go template expression as you want here (but this simple example probably covers most use cases).</p>
<p dir="auto">If there isn't a built-in operation that does what we want, we can just write our own, using <code>Filter</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Echo(&quot;hello world&quot;).Filter(func (r io.Reader, w io.Writer) error {
	n, err := io.Copy(w, r)
	fmt.Fprintf(w, &quot;\nfiltered %d bytes\n&quot;, n)
	return err
}).Stdout()
// Output:
// hello world
// filtered 11 bytes"><pre><span>script</span>.<span>Echo</span>(<span>"hello world"</span>).<span>Filter</span>(<span>func</span> (<span>r</span> io.<span>Reader</span>, <span>w</span> io.<span>Writer</span>) <span>error</span> {
	<span>n</span>, <span>err</span> <span>:=</span> <span>io</span>.<span>Copy</span>(<span>w</span>, <span>r</span>)
	<span>fmt</span>.<span>Fprintf</span>(<span>w</span>, <span>"<span>\n</span>filtered %d bytes<span>\n</span>"</span>, <span>n</span>)
	<span>return</span> <span>err</span>
}).<span>Stdout</span>()
<span>// Output:</span>
<span>// hello world</span>
<span>// filtered 11 bytes</span></pre></div>
<p dir="auto">The <code>func</code> we supply to <code>Filter</code> takes just two parameters: a reader to read from, and a writer to write to. The reader reads the previous stages of the pipe, as you might expect, and anything written to the writer goes to the <em>next</em> stage of the pipe.</p>
<p dir="auto">If our <code>func</code> returns some error, then, just as with the <code>Do</code> example, the pipe's error status is set, and subsequent stages become a no-op.</p>
<p dir="auto">Filters run concurrently, so the pipeline can start producing output before the input has been fully read, as it did in the <code>ping</code> example. In fact, most built-in pipe methods, including <code>Exec</code>, are implemented <em>using</em> <code>Filter</code>.</p>
<p dir="auto">If we want to scan input line by line, we could do that with a <code>Filter</code> function that creates a <code>bufio.Scanner</code> on its input, but we don't need to:</p>
<div dir="auto" data-snippet-clipboard-copy-content="script.Echo(&quot;a\nb\nc&quot;).FilterScan(func(line string, w io.Writer) {
	fmt.Fprintf(w, &quot;scanned line: %q\n&quot;, line)
}).Stdout()
// Output:
// scanned line: &quot;a&quot;
// scanned line: &quot;b&quot;
// scanned line: &quot;c&quot;"><pre><span>script</span>.<span>Echo</span>(<span>"a<span>\n</span>b<span>\n</span>c"</span>).<span>FilterScan</span>(<span>func</span>(<span>line</span> <span>string</span>, <span>w</span> io.<span>Writer</span>) {
	<span>fmt</span>.<span>Fprintf</span>(<span>w</span>, <span>"scanned line: %q<span>\n</span>"</span>, <span>line</span>)
}).<span>Stdout</span>()
<span>// Output:</span>
<span>// scanned line: "a"</span>
<span>// scanned line: "b"</span>
<span>// scanned line: "c"</span></pre></div>
<p dir="auto">And there's more. Much more. <a href="https://pkg.go.dev/github.com/bitfield/script" rel="nofollow">Read the docs</a> for full details, and more examples.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">A realistic use case</h2><a id="user-content-a-realistic-use-case" aria-label="Permalink: A realistic use case" href="#a-realistic-use-case"></a></p>
<p dir="auto">Let's use <code>script</code> to write a program that system administrators might actually need. One thing I often find myself doing is counting the most frequent visitors to a website over a given period of time. Given an Apache log in the Common Log Format like this:</p>
<div data-snippet-clipboard-copy-content="212.205.21.11 - - [30/Jun/2019:17:06:15 +0000] &quot;GET / HTTP/1.1&quot; 200 2028 &quot;https://example.com/ &quot;Mozilla/5.0 (Linux; Android 8.0.0; FIG-LX1 Build/HUAWEIFIG-LX1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.156 Mobile Safari/537.36&quot;"><pre><code>212.205.21.11 - - [30/Jun/2019:17:06:15 +0000] "GET / HTTP/1.1" 200 2028 "https://example.com/ "Mozilla/5.0 (Linux; Android 8.0.0; FIG-LX1 Build/HUAWEIFIG-LX1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.156 Mobile Safari/537.36"
</code></pre></div>
<p dir="auto">we would like to extract the visitor's IP address (the first column in the logfile), and count the number of times this IP address occurs in the file. Finally, we might like to list the top 10 visitors by frequency. In a shell script we might do something like:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cut -d' ' -f 1 access.log |sort |uniq -c |sort -rn |head"><pre>cut -d<span><span>'</span> <span>'</span></span> -f 1 access.log <span>|</span>sort <span>|</span>uniq -c <span>|</span>sort -rn <span>|</span>head</pre></div>
<p dir="auto">There's a lot going on there, and it's pleasing to find that the equivalent <code>script</code> program is quite brief:</p>
<div dir="auto" data-snippet-clipboard-copy-content="package main

import (
	&quot;github.com/bitfield/script&quot;
)

func main() {
	script.Stdin().Column(1).Freq().First(10).Stdout()
}"><pre><span>package</span> main

<span>import</span> (
	<span>"github.com/bitfield/script"</span>
)

<span>func</span> <span>main</span>() {
	<span>script</span>.<span>Stdin</span>().<span>Column</span>(<span>1</span>).<span>Freq</span>().<span>First</span>(<span>10</span>).<span>Stdout</span>()
}</pre></div>
<p dir="auto">Let's try it out with some <a href="https://github.com/bitfield/script/blob/master/testdata/access.log">sample data</a>:</p>
<div data-snippet-clipboard-copy-content="16 176.182.2.191
 7 212.205.21.11
 1 190.253.121.1
 1 90.53.111.17"><pre><code>16 176.182.2.191
 7 212.205.21.11
 1 190.253.121.1
 1 90.53.111.17
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">A <code>script</code> “interpreter”</h2><a id="user-content-a-script-interpreter" aria-label="Permalink: A script “interpreter”" href="#a-script-interpreter"></a></p>
<p dir="auto">One of the nice things about shell scripts is that there's no build process: the script file itself is the “executable” (in fact, it's interpreted by the shell). Simon Willison (and GPT-4) contributed this elegant <code>script</code> interpreter, written in <code>bash</code>:</p>
<ul dir="auto">
<li><a href="https://til.simonwillison.net/bash/go-script" rel="nofollow"><code>go-script</code></a></li>
</ul>
<p dir="auto">With <code>go-script</code>, you can run <code>script</code> one-liners directly:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cat file.txt | ./goscript.sh -c 'script.Stdin().Column(1).Freq().First(10).Stdout()'"><pre>cat file.txt <span>|</span> ./goscript.sh -c <span><span>'</span>script.Stdin().Column(1).Freq().First(10).Stdout()<span>'</span></span></pre></div>
<p dir="auto">or create <code>.goscript</code> files that you can run using a “shebang” line:</p>
<div dir="auto" data-snippet-clipboard-copy-content="#!/tmp/goscript.sh
script.Stdin().Column(1).Freq().First(10).Stdout()"><pre><span><span>#!</span>/tmp/goscript.sh</span>
<span>script.Stdin().Column(1).Freq().First(10).Stdout</span>()</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Documentation</h2><a id="user-content-documentation" aria-label="Permalink: Documentation" href="#documentation"></a></p>
<p dir="auto">See <a href="https://pkg.go.dev/github.com/bitfield/script" rel="nofollow">pkg.go.dev</a> for the full documentation, or read on for a summary.</p>
<p dir="auto"><a href="https://bitfieldconsulting.com/books/tools" rel="nofollow"><img src="https://github.com/bitfield/script/raw/master/img/tools.png" alt="The Power of Go: Tools cover image"></a></p>
<p dir="auto">The <code>script</code> package originated as an exercise in my book <a href="https://bitfieldconsulting.com/books/tools" rel="nofollow">The Power of Go: Tools</a>:</p>
<blockquote>
<p dir="auto"><em>Not all software engineering is about writing applications. Developers also need tooling: programs and services to automate everyday tasks like configuring servers and containers, running builds and tests, deploying their applications, and so on. Why shouldn't we be able to use Go for that purpose, too?</em></p>
<p dir="auto"><em><code>script</code> is designed to make it easy to write Go programs that chain together operations into a pipeline, in the same way that shell scripts do, but with the robust type checking and error handling of a real programming language. You can use <code>script</code> to construct the sort of simple one‐off pipelines that would otherwise require the shell, or special‐purpose tools.</em></p>
<p dir="auto"><em>So, when plain Go doesn’t provide a convenient way to solve a problem, you yourself can use it to implement a domain-specific “language” that does. In this case, we used Go to provide the language of Unix‐style pipelines. But we could have chosen any architecture we wanted to suit the problem. If Go doesn’t already provide the tool you need, use Go to build that tool, then use it.</em><br>
—From the book</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Sources</h2><a id="user-content-sources" aria-label="Permalink: Sources" href="#sources"></a></p>
<p dir="auto">These are functions that create a pipe with a given contents:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Source</th>
<th>Contents</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Args" rel="nofollow"><code>Args</code></a></td>
<td>command-line arguments</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Do" rel="nofollow"><code>Do</code></a></td>
<td>HTTP response</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Echo" rel="nofollow"><code>Echo</code></a></td>
<td>a string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Exec" rel="nofollow"><code>Exec</code></a></td>
<td>command output</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#File" rel="nofollow"><code>File</code></a></td>
<td>file contents</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#FindFiles" rel="nofollow"><code>FindFiles</code></a></td>
<td>recursive file listing</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Get" rel="nofollow"><code>Get</code></a></td>
<td>HTTP response</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#IfExists" rel="nofollow"><code>IfExists</code></a></td>
<td>do something only if some file exists</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#ListFiles" rel="nofollow"><code>ListFiles</code></a></td>
<td>file listing (including wildcards)</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Post" rel="nofollow"><code>Post</code></a></td>
<td>HTTP response</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Slice" rel="nofollow"><code>Slice</code></a></td>
<td>slice elements, one per line</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Stdin" rel="nofollow"><code>Stdin</code></a></td>
<td>standard input</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Modifiers</h2><a id="user-content-modifiers" aria-label="Permalink: Modifiers" href="#modifiers"></a></p>
<p dir="auto">These are methods on a pipe that change its configuration:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Source</th>
<th>Modifies</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithEnv" rel="nofollow"><code>WithEnv</code></a></td>
<td>environment for commands</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithError" rel="nofollow"><code>WithError</code></a></td>
<td>pipe error status</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithHTTPClient" rel="nofollow"><code>WithHTTPClient</code></a></td>
<td>client for HTTP requests</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithReader" rel="nofollow"><code>WithReader</code></a></td>
<td>pipe source</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithStderr" rel="nofollow"><code>WithStderr</code></a></td>
<td>standard error output stream for command</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithStdout" rel="nofollow"><code>WithStdout</code></a></td>
<td>standard output stream for pipe</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Filters</h2><a id="user-content-filters" aria-label="Permalink: Filters" href="#filters"></a></p>
<p dir="auto">Filters are methods on an existing pipe that also return a pipe, allowing you to chain filters indefinitely. The filters modify each line of their input according to the following rules:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Filter</th>
<th>Results</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Basename" rel="nofollow"><code>Basename</code></a></td>
<td>removes leading path components from each line, leaving only the filename</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Column" rel="nofollow"><code>Column</code></a></td>
<td>Nth column of input</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Concat" rel="nofollow"><code>Concat</code></a></td>
<td>contents of multiple files</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.DecodeBase64" rel="nofollow"><code>DecodeBase64</code></a></td>
<td>input decoded from base64</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Dirname" rel="nofollow"><code>Dirname</code></a></td>
<td>removes filename from each line, leaving only leading path components</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Do" rel="nofollow"><code>Do</code></a></td>
<td>response to supplied HTTP request</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Echo" rel="nofollow"><code>Echo</code></a></td>
<td>all input replaced by given string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.EncodeBase64" rel="nofollow"><code>EncodeBase64</code></a></td>
<td>input encoded to base64</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Exec" rel="nofollow"><code>Exec</code></a></td>
<td>filtered through external command</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.ExecForEach" rel="nofollow"><code>ExecForEach</code></a></td>
<td>execute given command template for each line of input</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Filter" rel="nofollow"><code>Filter</code></a></td>
<td>user-supplied function filtering a reader to a writer</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.FilterLine" rel="nofollow"><code>FilterLine</code></a></td>
<td>user-supplied function filtering each line to a string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.FilterScan" rel="nofollow"><code>FilterScan</code></a></td>
<td>user-supplied function filtering each line to a writer</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.First" rel="nofollow"><code>First</code></a></td>
<td>first N lines of input</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Freq" rel="nofollow"><code>Freq</code></a></td>
<td>frequency count of unique input lines, most frequent first</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Get" rel="nofollow"><code>Get</code></a></td>
<td>response to HTTP GET on supplied URL</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.HashSums" rel="nofollow"><code>HashSums</code></a></td>
<td>hashes of each listed file</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Join" rel="nofollow"><code>Join</code></a></td>
<td>replace all newlines with spaces</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.JQ" rel="nofollow"><code>JQ</code></a></td>
<td>result of <code>jq</code> query</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Last" rel="nofollow"><code>Last</code></a></td>
<td>last N lines of input</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Match" rel="nofollow"><code>Match</code></a></td>
<td>lines matching given string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.MatchRegexp" rel="nofollow"><code>MatchRegexp</code></a></td>
<td>lines matching given regexp</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Post" rel="nofollow"><code>Post</code></a></td>
<td>response to HTTP POST on supplied URL</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Reject" rel="nofollow"><code>Reject</code></a></td>
<td>lines not matching given string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.RejectRegexp" rel="nofollow"><code>RejectRegexp</code></a></td>
<td>lines not matching given regexp</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Replace" rel="nofollow"><code>Replace</code></a></td>
<td>matching text replaced with given string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.ReplaceRegexp" rel="nofollow"><code>ReplaceRegexp</code></a></td>
<td>matching text replaced with given string</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Tee" rel="nofollow"><code>Tee</code></a></td>
<td>input copied to supplied writers</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">Note that filters run concurrently, rather than producing nothing until each stage has fully read its input. This is convenient for executing long-running commands, for example. If you do need to wait for the pipeline to complete, call <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Wait" rel="nofollow"><code>Wait</code></a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Sinks</h2><a id="user-content-sinks" aria-label="Permalink: Sinks" href="#sinks"></a></p>
<p dir="auto">Sinks are methods that return some data from a pipe, ending the pipeline and extracting its full contents in a specified way:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Sink</th>
<th>Destination</th>
<th>Results</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.AppendFile" rel="nofollow"><code>AppendFile</code></a></td>
<td>appended to file, creating if it doesn't exist</td>
<td>bytes written, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Bytes" rel="nofollow"><code>Bytes</code></a></td>
<td></td>
<td>data as <code>[]byte</code>, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Hash" rel="nofollow"><code>Hash</code></a></td>
<td></td>
<td>hash, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.CountLines" rel="nofollow"><code>CountLines</code></a></td>
<td></td>
<td>number of lines, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Read" rel="nofollow"><code>Read</code></a></td>
<td>given <code>[]byte</code></td>
<td>bytes read, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Slice" rel="nofollow"><code>Slice</code></a></td>
<td></td>
<td>data as <code>[]string</code>, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Stdout" rel="nofollow"><code>Stdout</code></a></td>
<td>standard output</td>
<td>bytes written, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.String" rel="nofollow"><code>String</code></a></td>
<td></td>
<td>data as <code>string</code>, error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Wait" rel="nofollow"><code>Wait</code></a></td>
<td></td>
<td>error</td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WriteFile" rel="nofollow"><code>WriteFile</code></a></td>
<td>specified file, truncating if it exists</td>
<td>bytes written, error</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">What's new</h2><a id="user-content-whats-new" aria-label="Permalink: What's new" href="#whats-new"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Version</th>
<th>New</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.24.0</td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Hash" rel="nofollow"><code>Hash</code></a></td>
</tr>
<tr>
<td></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.HashSums" rel="nofollow"><code>HashSums</code></a></td>
</tr>
<tr>
<td>0.23.0</td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithEnv" rel="nofollow"><code>WithEnv</code></a></td>
</tr>
<tr>
<td></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.DecodeBase64" rel="nofollow"><code>DecodeBase64</code></a> / <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.EncodeBase64" rel="nofollow"><code>EncodeBase64</code></a></td>
</tr>
<tr>
<td></td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Wait" rel="nofollow"><code>Wait</code></a> returns error</td>
</tr>
<tr>
<td>v0.22.0</td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Tee" rel="nofollow"><code>Tee</code></a>, <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.WithStderr" rel="nofollow"><code>WithStderr</code></a></td>
</tr>
<tr>
<td>v0.21.0</td>
<td>HTTP support: <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Do" rel="nofollow"><code>Do</code></a>, <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Get" rel="nofollow"><code>Get</code></a>, <a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.Post" rel="nofollow"><code>Post</code></a></td>
</tr>
<tr>
<td>v0.20.0</td>
<td><a href="https://pkg.go.dev/github.com/bitfield/script#Pipe.JQ" rel="nofollow"><code>JQ</code></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">See the <a href="https://github.com/bitfield/script/blob/master/CONTRIBUTING.md">contributor's guide</a> for some helpful tips if you'd like to contribute to the <code>script</code> project.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Links</h2><a id="user-content-links" aria-label="Permalink: Links" href="#links"></a></p>
<ul dir="auto">
<li><a href="https://bitfieldconsulting.com/posts/scripting" rel="nofollow">Scripting with Go</a></li>
<li><a href="https://www.youtube.com/watch?v=6S5EqzVwpEg" rel="nofollow">Code Club: Script</a></li>
<li><a href="https://bitfieldconsulting.com/" rel="nofollow">Bitfield Consulting</a></li>
<li><a href="https://bitfieldconsulting.com/books" rel="nofollow">Go books by John Arundel</a></li>
</ul>
<p dir="auto">Gopher image by <a href="https://github.com/MariaLetta/free-gophers-pack">MariaLetta</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Uscope, a new Linux debugger written from scratch (199 pts)]]></title>
            <link>https://github.com/jcalabro/uscope</link>
            <guid>42889407</guid>
            <pubDate>Fri, 31 Jan 2025 17:07:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/jcalabro/uscope">https://github.com/jcalabro/uscope</a>, See on <a href="https://news.ycombinator.com/item?id=42889407">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">uscope 🔬</h2><a id="user-content-uscope-" aria-label="Permalink: uscope 🔬" href="#uscope-"></a></p>
<p dir="auto"><a href="https://ci.uscope.dev/repos/1" rel="nofollow"><img src="https://camo.githubusercontent.com/1a18ed67a95c00d763718cbf2d98ff723894ff292cb129c66d8b63e0a15e3040/68747470733a2f2f63692e7573636f70652e6465762f6170692f6261646765732f312f7374617475732e737667" alt="status-badge" data-canonical-src="https://ci.uscope.dev/api/badges/1/status.svg"></a></p>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/8205547/405439211-8ad10ca9-42d1-4afe-8397-74b8a92a69f5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzgzNTU3MTEsIm5iZiI6MTczODM1NTQxMSwicGF0aCI6Ii84MjA1NTQ3LzQwNTQzOTIxMS04YWQxMGNhOS00MmQxLTRhZmUtODM5Ny03NGI4YTkyYTY5ZjUucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEzMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMzFUMjAzMDExWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZDY4Njk5NTNkZjEyMDkyMjY5YTkwZjI1MTQxMGZhNGQxNTM1YjVhMDcxMzc3OGIzNzBlMjhhOGMzZjEyZDNlNiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.XjAla-iePtu2nJJnx-MQke-E28SVeoI-zkYkjzNmIlw"><img src="https://private-user-images.githubusercontent.com/8205547/405439211-8ad10ca9-42d1-4afe-8397-74b8a92a69f5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzgzNTU3MTEsIm5iZiI6MTczODM1NTQxMSwicGF0aCI6Ii84MjA1NTQ3LzQwNTQzOTIxMS04YWQxMGNhOS00MmQxLTRhZmUtODM5Ny03NGI4YTkyYTY5ZjUucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEzMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMzFUMjAzMDExWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZDY4Njk5NTNkZjEyMDkyMjY5YTkwZjI1MTQxMGZhNGQxNTM1YjVhMDcxMzc3OGIzNzBlMjhhOGMzZjEyZDNlNiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.XjAla-iePtu2nJJnx-MQke-E28SVeoI-zkYkjzNmIlw"></a>
<p dir="auto"><h3 tabindex="-1" dir="auto">Overview</h3><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">uscope (pronounced "microscope") is a native code graphical debugger and introspection toolchain for Linux.</p>
<p dir="auto"><a href="https://calabro.io/uscope" rel="nofollow">See here</a> for background and motivation on the project.</p>
<p dir="auto">Join the <a href="https://discord.gg/bPWC6PZPhR" rel="nofollow">Discord</a> if you're interested in talking debuggers.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Project Status and Roadmap</h3><a id="user-content-project-status-and-roadmap" aria-label="Permalink: Project Status and Roadmap" href="#project-status-and-roadmap"></a></p>
<p dir="auto">uscope is not far enough along to consider using as a daily-driver. It's a side project I'm working on for fun and because I need a better debugger for my own use.</p>
<p dir="auto">This is a birds-eye overview of the features I'd like implemented before I'd personally be able to completely ditch other "traditional" debuggers. In no particular order:</p>
<ul dir="auto">
<li>Ensure that all table-stakes debugger operations are rock-solid and fast
<ul dir="auto">
<li>Debug symbol parsing</li>
<li>Subordinate process control flow (i.e. stepping)</li>
<li>Basic variable value rendering</li>
<li>Stack unwinding</li>
<li>etc.</li>
</ul>
</li>
<li>Support for visualization of common data types in several languages (preliminary C and Zig support is already underway)
<ul dir="auto">
<li>Adding at least C++ and Go even though they're very complicated languages since that's what I use for work</li>
<li>Also planning on supporting at least Rust, Odin, and Jai</li>
<li>In general, we will design a system that handles transforming data in to user-friendly visualization that is flexible, extensible, and not tied to any one language</li>
</ul>
</li>
<li>Support for multi-threaded programs</li>
<li>Debug tests by clicking on them, at least for programs with built-in testing solutions like Zig, Go, etc.</li>
<li>Run to cursor</li>
<li>User-friendly source code navigation (i.e. go to definition, find all references, etc.)</li>
<li>Better config file management
<ul dir="auto">
<li>I don't want to have to manually edit config files; I want to have the debugger configure them for me via the GUI</li>
</ul>
</li>
</ul>
<p dir="auto">Other long-term features that will be implemented are:</p>
<ul dir="auto">
<li>Build as a library so other people can build other interesting things as well
<ul dir="auto">
<li>The GUI debugger will be the first consumer of that library (in the same way <a href="https://github.com/mitchellh/ghostty">Ghostty</a> is the first consumer of libghostty)</li>
</ul>
</li>
<li>Many more types of domain-specific data visualizations
<ul dir="auto">
<li>For example, I work on chess engines for my day job, and it would be amazing to have a debugger that natively understands my position encoding and automatically visually renders interactive chess boards</li>
</ul>
</li>
<li>Remote debugging</li>
<li>Conditional breakpoints</li>
<li>Data/address breakpoints (i.e. break when an address is accessed or a variable mutated)</li>
<li>Trace points (observe variable values over time without actually pausing the subordinate program)</li>
<li>Load and view core dumps</li>
<li>Assembly viewer</li>
<li>Ability to track and visualize system calls (similar to <a href="https://man7.org/linux/man-pages/man1/strace.1.html" rel="nofollow">strace</a>)</li>
<li>Various <code>/proc</code> views (there's lots of interesting information in there)</li>
<li>Complete UI/UX revamp
<ul dir="auto">
<li>Dear ImGUI has been decent, but it has its limitations; we'll probably just end up writing our own if I had to guess</li>
<li>I'm really looking for a fast UI system that allows my users to write interesting visualization plugins for their own needs with minimal effort</li>
</ul>
</li>
<li>macOS and Windows support</li>
<li>What is important to <em>you</em>? Let me know!</li>
</ul>
<p dir="auto">Similarly, the following features are non-goals of the project:</p>
<ul dir="auto">
<li>Supporting non-native languages (i.e. Java, Python, etc.)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building and Running</h3><a id="user-content-building-and-running" aria-label="Permalink: Building and Running" href="#building-and-running"></a></p>
<p dir="auto">We do not provide pre-built binaries or package manager distributions yet.</p>
<p dir="auto">To build from source, clone the repo and run <code>zig build</code>. Ensure you're using the exact version of zig specified in <a href="https://github.com/jcalabro/uscope/blob/main/zig_version.txt">zig_version.txt</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone git@github.com:jcalabro/uscope.git
cd uscope
zig build -Doptimize=ReleaseSafe -Drelease"><pre>git clone git@github.com:jcalabro/uscope.git
<span>cd</span> uscope
zig build -Doptimize=ReleaseSafe -Drelease</pre></div>
<p dir="auto">You'll probably want to create a global config file at <code>$XDG_CONFIG_HOME/uscope/config.ini</code> like this (though we'll create an empty config for you if one does not already exist):</p>
<div dir="auto" data-snippet-clipboard-copy-content="[log]
level=debug
regions=all"><pre><span>[log]</span>
<span>level</span>=debug
<span>regions</span>=all</pre></div>
<p dir="auto">And a you'll need to create a local, project-specific config file at <code>$(pwd)/.uscope/config.ini</code>, whose only required field is <code>target.path</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[target]
path=./assets/zigprint/out # required: the path to the binary to debug
# args=...
# stop_on_entry=true
# watch_expressions=...

[sources]
# for convenience, opens this file upon launch and sets breakpoints on lines 33 and 96
open_files=assets/zigprint/main.zig:33:96

# to open multiple files on launch, you could do something like:
# open_files=first.c:1:2, second.c:3:4"><pre><span>[target]</span>
<span>path</span>=./assets/zigprint/out <span><span>#</span> required: the path to the binary to debug</span>
<span><span>#</span> args=...</span>
<span><span>#</span> stop_on_entry=true</span>
<span><span>#</span> watch_expressions=...</span>

<span>[sources]</span>
<span><span>#</span> for convenience, opens this file upon launch and sets breakpoints on lines 33 and 96</span>
<span>open_files</span>=assets/zigprint/main.zig:33:96

<span><span>#</span> to open multiple files on launch, you could do something like:</span>
<span><span>#</span> open_files=first.c:1:2, second.c:3:4</span></pre></div>
<p dir="auto">Then, to create a development build, you can do any of:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# create and run a debug binary
zig build run

# create and run a debug binary with the race detector enabled
zig build run -Drace

# run all tests
zig build test

# run a test by name
zig build test -Dfilter='compile unit header parse errors'

# run a subset of tests based on a prefix match (i.e. this runs all simulator tests)
zig build test -Dfilter=sim:"><pre><span><span>#</span> create and run a debug binary</span>
zig build run

<span><span>#</span> create and run a debug binary with the race detector enabled</span>
zig build run -Drace

<span><span>#</span> run all tests</span>
zig build <span>test</span>

<span><span>#</span> run a test by name</span>
zig build <span>test</span> -Dfilter=<span><span>'</span>compile unit header parse errors<span>'</span></span>

<span><span>#</span> run a subset of tests based on a prefix match (i.e. this runs all simulator tests)</span>
zig build <span>test</span> -Dfilter=sim:</pre></div>
<p dir="auto">The <code>Primary</code> view is open by defaults, which includes views in to source code, program stdout/stderr, variables, registers, etc. To launch the subordinate, press <code>r</code>, and press <code>k</code> to kill a running subordinate. Click lines of source code to add/remove breakpoints. When you're stopped at a breakpoint, you can:</p>
<ul dir="auto">
<li><code>c</code>: continue execution</li>
<li><code>k</code>: kill the subprocess</li>
<li><code>w</code>: step out</li>
<li><code>a</code>: single step (one assembly instruction)</li>
<li><code>s</code>: step in</li>
<li><code>d</code>: step next</li>
</ul>
<p dir="auto">To quickly navigate between multiple open source files, press <code>ctrl+j</code> to move one source file to the left (according to the order of tabs), and press <code>ctrl+;</code> to move one to the right. Press <code>ctrl+d</code> to close the open source file. Press <code>ctrl+q</code> in the primary view to quickly exit the debugger.</p>
<p dir="auto">Additionally, we've taken a bit of inspiration from the <a href="https://helix-editor.com/" rel="nofollow">Helix editor</a> for menu navigation. Press <code>space</code> to open the view picker, then choose a view to open. Press <code>ctrl+d</code>, <code>ctrl+c</code>, or <code>ctrl+q</code> at any time in any sub-view to go back to the main view.</p>
<p dir="auto">The program outputs a user-friendly log by default to:</p>

<p dir="auto">This repo comes pre-packaged with a bunch of small, simple source programs in various languages in the <code>assets/</code> directory. To build them all, ensure you have all the toolchains you could possibly neeed installed and:</p>

<p dir="auto">The compiler versions used to build all the asset programs in CI are in the <a href="https://github.com/jcalabro/uscope/blob/main/Dockerfile">Dockerfile</a>. You run the tests without docker as demonstrated above, or with docker using:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker build -t uscope .
docker run --rm -it -v $(pwd):/uscope uscope
cd /uscope/assets
./build.sh
cd ..
zig build test -Drace"><pre>docker build -t uscope <span>.</span>
docker run --rm -it -v <span><span>$(</span>pwd<span>)</span></span>:/uscope uscope
<span>cd</span> /uscope/assets
./build.sh
<span>cd</span> ..
zig build <span>test</span> -Drace</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">FAQ</h3><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto">1. When will this project be mature enough to use for my day to day work?</h5><a id="user-content-1-when-will-this-project-be-mature-enough-to-use-for-my-day-to-day-work" aria-label="Permalink: 1. When will this project be mature enough to use for my day to day work?" href="#1-when-will-this-project-be-mature-enough-to-use-for-my-day-to-day-work"></a></p>
<p dir="auto">Probably a long time (could easily be a year or more). I have a day job, and this is a passion project I work on in my spare time. Check back often for updates!</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">2. How can I help out?</h5><a id="user-content-2-how-can-i-help-out" aria-label="Permalink: 2. How can I help out?" href="#2-how-can-i-help-out"></a></p>
<p dir="auto">The absolute best thing you can do is reach out and talk debuggers so I know that there is interest in the the project. We have a <a href="https://discord.gg/bPWC6PZPhR" rel="nofollow">Discord</a>, and you can find my email on my personal site. I love hearing from you!</p>
<p dir="auto">Adding features, fixing bugs, and creating tests that move us further along the path towards being able to use this for day-to-day work is also apprecaited! If you're thinking about tackling a major new feature, I'd recommend reaching out first to make sure we're on the same page and effort isn't wasted going in the wrong direciton.</p>
<p dir="auto">You could also consider <a href="https://github.com/sponsors/jcalabro">sponsoring my work</a>. This is a very strong signal to me that I'm focused on things that matter.</p>
<p dir="auto">Additionally, please consider donating to the <a href="https://ziglang.org/zsf/" rel="nofollow">Zig Software Foundation</a>!</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">3. Will you provide pre-built binaries?</h5><a id="user-content-3-will-you-provide-pre-built-binaries" aria-label="Permalink: 3. Will you provide pre-built binaries?" href="#3-will-you-provide-pre-built-binaries"></a></p>
<p dir="auto">Once the project is further along, yes, but not now.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">4. Why are you building a library for debugging, not just a new debugger? And why not just use DAP?</h5><a id="user-content-4-why-are-you-building-a-library-for-debugging-not-just-a-new-debugger-and-why-not-just-use-dap" aria-label="Permalink: 4. Why are you building a library for debugging, not just a new debugger? And why not just use DAP?" href="#4-why-are-you-building-a-library-for-debugging-not-just-a-new-debugger-and-why-not-just-use-dap"></a></p>
<p dir="auto">There are a wide variety of use-cases for an introspection library outside of traditional debuggers (i.e. reverse engineering tools, novel forms of debuggers, etc.). By making this system reusable and nicely packaged, it encourages the entire ecosystem of debugging tools to improve, not just this one project. That being said, we are focusing intently on the traditional debugger first, and then once the core of the system is solid, we will make it more intentionally accessible to other consumers.</p>
<p dir="auto">Regarding <a href="https://microsoft.github.io/debug-adapter-protocol" rel="nofollow">DAP</a>, This toolchain intends to be lower-level and broader in scope than something like DAP would enable. I do not think DAP is very good, but lots of editors out there already speak it, so we're partially stuck with it. However, by creating an introspection library, we easily create a separate DAP-compatible executable in separate from the native GUI we're building so that way neither is bloated by the other.</p>
<p dir="auto">In short, building as a library allows us all to build many novel, simple, and focused introspection tools.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Zusie – My Relay Computer (104 pts)]]></title>
            <link>http://www.nablaman.com/relay/about.php</link>
            <guid>42889308</guid>
            <pubDate>Fri, 31 Jan 2025 16:55:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.nablaman.com/relay/about.php">http://www.nablaman.com/relay/about.php</a>, See on <a href="https://news.ycombinator.com/item?id=42889308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>I amuse myself by constructing a computer almost entirely out of relays.
Relays were used to construct computers well before vacuum tubes, transistors or integrated circuits were feasible for the task. The main inspiration is the machines by <a href="http://en.wikipedia.org/wiki/Konrad_Zuse">Konrad Zuse</a> of the late 30s and early 40s.</p>

<p>Why relays? In addition to constituting an important historical link between the mechanical and electronic
computers, relays are especially fun to work with since they
</p><ul>
<li>are big and slow, with huge propagation delays and a tendency to oscillate if you hook them up wrong.</li>
<li>are noisy, especially when lots of relays switch at the same time.</li>
<li>consume lots of power to do even the simplest of calculations.</li>
<li>subscribe to Lenz' law, i.e. generate lots of EMF and flyback current that make for all sorts of interesting
interference in places you couldn't even guess.</li>
</ul><p>
So all in all, relays require you to think in very new ways compared to normal solid-state devices.</p>

<p><img src="http://www.nablaman.com/images/relay_small.jpg"><br><i>The relays I use in the computer.</i></p>

<p>Quick feature list:</p>
<ul>
<li>8-bit data bus and 16-bit address bus</li>
<li>3 x 8-bit accumulator registers, 2 x 12-bit registers (for index, addresses and jumps)</li>
<li>64k solid state memory, holding heap, stack and program</li>
<li>12-bit program counter and 12-bit stack pointer</li>
<li>ALU capable of not, and, or, xor, add, increment, decrement, shift, and indirectly, subtraction</li>
<li>Writable microprogram stored in solid-state device for sequencing</li>
<li>Assembler and Microassembler running in DOS and communicating with Zusie over parallel port.</li>
</ul>

<p>To build a relay computer, you clearly need a lot of relays.
I had the good fortune of locating about 100 discarded telephone exchange circuit boards with about
15 four-and six pole relays on each board. I bought them at scrap prices and desoldered them with a hot-air gun and wound up with some 1500 excellent-quality relays.</p>



<br>
<hr size="1">
<h2>Architecture</h2>

<p>Here is a block diagram of Zusie's architecture (click for larger version).
It is a fairly regular CISC, microcoded architecture.</p>
<p><a href="http://www.nablaman.com/images/zusie-block.png"><img src="http://www.nablaman.com/images/zusie-block-medium.png"></a></p><hr size="1">
<h2 id="iset">Instruction Set</h2>

<p>Here are some terminology used below and in Zusie assembly code:</p>
<ul>
<li> A <i>literal</i> is a constant numeric value between 0 and 255. Can be written in decimal form, in hexadecimal form preceded by h (<tt>h80</tt>) or binary preceded by b (<tt>b10000000</tt>).</li>
<li> A <i>label</i> is a jump or call destination. In Zusie Assembly, it's written on a line preceded with a colon (such as <tt>:label</tt>). It evaluates to the address of the next instruction after the label. The label takes up no program space of its own and is only an assembly helper construct.</li>
<li>Some instructions like jumps takes an address (or label) as argument. They usually come in
two versions, long and short. Shorts are prefixed or suffixed by an <tt>s</tt>.
Shorts only alter the lower byte of the program counter, and so can only jump to addresses
within the same 256-byte code segment. Always use shorts if you can (i.e. when not writing absolutely huge programs), since they are faster and have only one address byte as payload,
contrasted with two bytes for long instructions. These varieties are referred to as <i>distance</i> below.</li>
</ul>

<p>Here is a comprehensive list of Zusie instructions and mnemonics:</p>
<ul>
<li><b>Load Literal</b> Load numeric constant into register. <br> <tt>LDL-&gt;r v</tt> where r may be A,B or C, and v is a literal</li>
<li><b>Load Condition Code from Register</b> Populates the condition code register according to register r.<br>
<tt> LDC&lt;-r</tt> where r may be A, B or C.</li>
<li><b>Subroutine Calls and Returns</b> CALLd instructions saves the value of the program counter and proceeds execution at a label. A RETd instruction restores the program counter to the instruction after the last CALLd. d can be either s for a short jump or empty for a long jump. Call and return distance must match.<br>
<tt>CALL label</tt> and <tt>RET</tt><br>
<tt>CALLS label</tt> and <tt>RETS</tt></li>
<li><b>Stack Push</b> Pushes the value of a register onto the stack.<br>
<tt>PUSHr</tt> where r may be A, B or C.</li>
<li><b>Stack Pop</b> Pops the top value off the stack and into a register<br>
<tt>POP-&gt;r</tt> where r may be A, B or C.</li>
<li><b>Increment/Decrement 16-bit register</b> Atomically replaces the content of r with content+1 or content-1, or increments/decrements into another register.<br>
<tt>INCr</tt> where r may be J or XY.<br>
<tt>DECr</tt> where r may be J or XY.<br>
<tt>INCr-&gt;s</tt> where r,s may be J or XY, and r not equal to s.<br>
<tt>DECr-&gt;s</tt> where r,s may be J or XY, and r not equal to s.</li>
<li><b>Read Memory</b> Reads a memory byte from the address stored in r into register s<br>
<tt>RDr-&gt;s</tt> where r may be J or XY and s may be A, B or C; or, r is J and s is X or Y</li>
<li><b>Write Memory</b> Write a byte from register s into memory (and, alternatively any mapped device such as the flipdot display) at the address stored in r.<br>
<tt>WRr&lt;-s</tt> where r may be J or XY and s may be A, B or C; or, r is J and s is X or Y</li>
<li><b>Long Branch</b> Continues program execution at a new label or address, possibly conditionally.<br>
<tt>BR l</tt> Branch unconditionally to l<br>
<tt>BRZ l</tt> Branch to l if condition code Z (zero) is set<br>
<tt>BRNZ l</tt> Branch to l if condition code Z (zero) is not set<br>
<tt>BRC l</tt> Branch to l if condition code C (carry) is set<br>
<tt>BRNC l</tt> Branch to l if condition code C (carry) is not set<br>
<tt>BRS l</tt> Branch to l if condition code S (sign) is set<br>
<tt>BRNS l</tt> Branch to l if condition code S (sign) is not set</li>
<li><b>Short Branch</b> Continues program execution at a new label or address, possibly conditionally.<br>
<tt>SBR l</tt> Branch unconditionally to l<br>
<tt>SBRZ l</tt> Branch to l if condition code Z (zero) is set<br>
<tt>SBRNZ l</tt> Branch to l if condition code Z (zero) is not set<br>
<tt>SBRC l</tt> Branch to l if condition code C (carry) is set<br>
<tt>SBRNC l</tt> Branch to l if condition code C (carry) is not set<br>
<tt>SBRS l</tt> Branch to l if condition code S (sign) is set<br>
<tt>SBRNS l</tt> Branch to l if condition code S (sign) is not set</li>
<li><b>8-Bit Moves</b> Copies the value in r to register s.<br>
<tt>MOVr-&gt;s</tt>, where r,s=A,B,C,X,Y and r not equal to s</li>
<li><b>16-Bit Moves</b> Copies the value in r to register s.<br>
<tt>MOVr-&gt;s</tt>, where r,s=XY,J,S,P and r not equal to s. Observe necessary precautions for fiddling with S (the stack pointer) or P (program counter) ;-)</li>
<li><b>Unary ALU operations</b> Performs ALU operation on the value in register r,
storing it in s. r and s may not be the same. If the "-&gt;s" construct is omitted, it does not store the value in a register, but only loads the condition code register according to the result. If s is MXY or MJ, the result is stored in memory at address given by XY or J respectively. <br>
<tt>NOTr, NOTr-&gt;s</tt>, where r=A,B,C, s=A,B,C,MJ,MXY. Performs logical NOT.<br>
<tt>INCr, INCr-&gt;s</tt>, where r=A,B,C, s=A,B,C,MJ,MXY. Increments r.<br>
<tt>DECr, DECr-&gt;s</tt>, where r=A,B,C, s=A,B,C,MJ,MXY. Decrements r.<br>
<tt>SRr, SRr-&gt;s</tt>, where r=A,B,C. Rotates the bits in r one step to the right.</li>
<li><b>Binary heterogeneous ALU operations</b> Performs ALU operation on the value in register r and the value in register s, storing it in t. No two of r, s and t may not be the same. If the "-&gt;t" construct is omitted, it does not store the value in a register, but only loads the condition code register according to the result. If t is MXY or MJ, the result is stored in memory at address given by XY or J respectively. <br>
<tt>ANDrs, ANDrs-&gt;t</tt>, where r,s=A,B,C, t=A,B,C,MJ,MXY. Performs logical AND.<br>
<tt>ORrs, ORrs-&gt;t</tt>, where r,s=A,B,C, t=A,B,C,MJ,MXY. Performs logical OR.<br>
<tt>XORrs, XORrs-&gt;t</tt>, where r,s=A,B,C, t=A,B,C,MJ,MXY. Performs logical XOR.</li>
<li><b>ALU addition operations</b> Performs an addition operation on the value in register r and the value in register s, storing it in t. r and s MAY be the same register, but neither r or s may be the same as t. If the "-&gt;t" construct is omitted, it does not store the value in a register, but only loads the condition code register according to the result. If t is MXY or MJ, the result is stored in memory at address given by XY or J respectively.
Note that operations like <tt>ADDAA</tt>tt&gt; is effectively the same as 2*A, and also A shifted to the left.<br>
<tt>ADDrs, ADDrs-&gt;t</tt>, where r,s=A,B,C, t=A,B,C,MJ,MXY.<br>
</li></ul>

<hr size="1">
<p><i>Fredrik Andersson<i> - <a href="mailto:nablaman[at]nablaman.com"><i>nablaman[at]nablaman.com</i></a><br>
<a href="http://www.nablaman.com/relay/"><i>Back to Zuse home</i></a> &nbsp;|&nbsp; <a href="http://www.nablaman.com/"><i>Back to my home page</i></a></i></i></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple files emergency motion to become defendant in US vs. Google [pdf] (359 pts)]]></title>
            <link>https://storage.courtlistener.com/recap/gov.uscourts.dcd.223205/gov.uscourts.dcd.223205.1158.0_1.pdf</link>
            <guid>42889297</guid>
            <pubDate>Fri, 31 Jan 2025 16:53:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://storage.courtlistener.com/recap/gov.uscourts.dcd.223205/gov.uscourts.dcd.223205.1158.0_1.pdf">https://storage.courtlistener.com/recap/gov.uscourts.dcd.223205/gov.uscourts.dcd.223205.1158.0_1.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=42889297">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[How to Train an AI Image Model on Yourself (172 pts)]]></title>
            <link>https://www.coryzue.com/writing/make-ai-pictures-of-yourself/</link>
            <guid>42889236</guid>
            <pubDate>Fri, 31 Jan 2025 16:46:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.coryzue.com/writing/make-ai-pictures-of-yourself/">https://www.coryzue.com/writing/make-ai-pictures-of-yourself/</a>, See on <a href="https://news.ycombinator.com/item?id=42889236">Hacker News</a></p>
Couldn't get https://www.coryzue.com/writing/make-ai-pictures-of-yourself/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Fixing E.T. The Extra-Terrestrial for the Atari 2600 (2013) (104 pts)]]></title>
            <link>http://www.neocomputer.org/projects/et/</link>
            <guid>42889139</guid>
            <pubDate>Fri, 31 Jan 2025 16:36:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.neocomputer.org/projects/et/">http://www.neocomputer.org/projects/et/</a>, See on <a href="https://news.ycombinator.com/item?id=42889139">Hacker News</a></p>
<div id="readability-page-1" class="page">
<h2>Fixing <i>E.T. The Extra-Terrestrial</i> for the Atari 2600</h2>

	<br><center></center>

	<p>If you're reading this page, chances are that you're already well aware that E.T. for the Atari 2600 is one of the most reviled games ever made.  I never understood why.  As a child, it was one of my favorite games.  I still think it's a good game.  <a href="http://www.randomterrain.com/atari-2600-memories-et.html">Apparently</a>, <a href="http://www.youtube.com/watch?v=TsF7q_hA6Z8">I'm not alone</a>.</p>

	<p>On this page I'm going to briefly explore why people hate <i>E.T.</i>, and how the game can be fixed.</p>

	

	<p>April 2023 Update: Jamie Curmi (Curmi on AtariAge) has put together an <a href="http://www.neocomputer.org/projects/et/ET_Fixed-Manual.pdf">Updated Manual</a> for the game to reflect the changes made here. </p>
	
	<h2>Contents:</h2>
	<ul>
		<li><a href="#cantwait">In case you can't wait</a></li>
		<li><a href="#download">Downloads</a></li>
		<li><a href="#whyhate">Why people hate E.T.</a></li>
		<li><a href="#whyfall">Why people fall in wells</a></li>
		<li><a href="#fixfall">Fixing the falling problem</a></li>
		<li><a href="#toohard">Dealing with the difficulty</a></li>
		<li><a href="#notgreen">E.T. is NOT green</a></li>
		<li><a href="#finishup">Spit and polish</a></li>
		<li><a href="#newfeature">A new feature</a></li>
		<li><a href="#bugs">Squashing 30-year-old bugs</a></li>
		<li><a href="#ninja">Ninja E.T. easter egg</a></li>
		<li><a href="#newmode">A new game mode</a></li>
		<li><a href="#allchanges">Summary of changes</a></li>
		<li><a href="#theend">Conclusion</a></li>
	</ul>

	<br>
	<a name="cantwait"></a> 
	<h2>In case you can't wait</h2>
		<p>Open your NTSC <i>E.T.</i> ROM in a hex editor and make the following changes:</p>
		<pre>		-------------------------------------------
		- E.T. is Not Green                       
		-------------------------------------------
		 17FA: FE FC F8 F8 F8
		 1DE8: 04

		-------------------------------------------
		- Difficulty Fix  (Walk, Run, Hover)     
		-------------------------------------------
		 0707: A4 F8
		 071B: A4 F8
		 0685: A4 F8
		 0FEF: AD 82 02 29  08 4C 4E BB
		 0B4D: 60 4A 4A 4A  49 01 85 F8
		 04F0: A5 81 29 1E

		-------------------------------------------
		- Falling Fix                            
		-------------------------------------------
		 002A: 4C F6 BB
		 0BF6: A5 9C 69 07  85 F6 4C AB  BC
		 1013: 05 D9 65 E3  65 F6 85 8B  4C 4B F0
		 101E: 08 E4 8B D0  06 24 13 70  02 85 2C E4  9E 08 E8
		 102D: A4 86 8A
		 1034: 85 02 84 1C
		 1060: A5 87 85 1B  A5 88 85 06  8A A8 B1 BA  85 0E B1 BC
		 1070: 85 0F E4 9F  4C 1E F0
		 18F3: 2E F0
		 0B40: A9 EF
		 07ED: E9 04
		 0BA5: 22

		--------------------------------------------
		 - BUG FIXES
		--------------------------------------------
		 - Don't Fall Leaving Forest on Right
		 -------------------------------------------
		 0D54: 4A
		 0D6C: 01
		 -------------------------------------------
		 - Ship Shouldn't Crush Elliott 
		 -------------------------------------------
		 07BD: 4C D9 BA

		-------------------------------------------
		- FIX SCORING TO MATCH MANUAL
		-------------------------------------------
		 058E: 85 F4 A5 DD  85 F5 65 F4  85 DD 69 10  EA EA
		 1382: 4C 9D F3
		 1395: A9 99 85 D3  85 D4 D0 09  A5 F8 D0 02  AA A8
		 13BD: A9 01 05 DE  85 DE A2 07  A0 70 20 41  F3 EA
		 1341: A5 D2 C9 0A  F0 08 E9 10  85 D2 A2 04  A0 90 A5 DD
		 1351: F8 4C E9 F7
		 17E9: C9 1F 90 0A  8A 09 10 AA  A5 D3 E9 07  85 D3 D8 60
		 13FD: A9 99 85 D3  85 D4 A9 00  85 F4 85 E3
		 147A: A9 00 85 DD  85 D9 85 94  A5 29 C5 DC  B0 02 A5 DC
		 148A: 4C A5 F4

		    Note: If you don't include the difficulty fix, make
		          the following change to the scoring fix:
		          139D: EA EA EA EA  EA EA

		-------------------------------------------
		- Easter Egg - Ninja E.T. 
		-------------------------------------------
		 148A: A5 F4 C5 F5  D0 0C C9 03  D0 08 A9 AA  85 D2 85 D3
		 149A: 85 D4 4C A5  F4 EA EA EA

		--------------------------------------------
		 - Add Extra Game Option - Scientist Only
		--------------------------------------------
		 0471: E0 05
		 02ED: 29 01 F0 09

		</pre>
		 <p>Special thanks to AtariAge users Nukey Shay, Random Terrain, KevinMos3, iesposta, and roadrunner for their excellent comments and suggestions.</p>

		<a name="download"></a> 
		 <h2>Downloads</h2>
		 <p>If you don't know how to use a hex editor, or if you're just lazy, you can download a modified .bin file here:</p>
		 <ul>
			<li><a href="http://www.neocomputer.org/projects/et/ET_Fixed_Final.bin">ET_Fixed_Final.bin</a></li>
			<li><a href="http://www.neocomputer.org/projects/et/ET.bin">ET.bin (unmodified)</a></li>
		 </ul>

		 <p><b>NOTE:</b> If you want to play the game with the original difficulty, set the B&amp;W / Color switch to the B&amp;W position.  This will completely disable the difficulty fix, but leave the other changes in place.</p>
	<br>

	<a name="whyhate"></a> 
	<h2>Why do people hate <i>E.T.</i>?</h2>
		<p>
			So, why do people hate E.T.?  When it was released, it was well ahead of its time. It pioneered a lot of concepts that we take for granted in games today, but were unheard of in 1982 (Atari's <i>Adventure</i> and <i>Haunted House</i> had some of these features, but not all):
		</p>
		<ul>
			<li>It was one of the first home video games with a title screen.</li>
			<li>It featured an open-ended world with gameplay focused on exploration.</li>
			<li>It was completely non-violent. You can't hurt the bad-guys, and they can't hurt you. There isn't even any competition!</li>
			<li>You could complete the game. There are also several goals that you need to complete to win the game.</li>
			<li>There were multiple ways to complete goals. You can actually finish the game without falling in a single well.</li>
			<li>The game not only had an ending, it also featured an animated cut-scene as a reward.</li>
			<li>The game featured optional additional goals to complete (side quests).</li>
		</ul>
		<p>
			While that seems like a great list of features, players in 1982 weren't prepared for that much change.  You really needed to read the manual to understand the game and how to play it.  As younger children were the primary audience, it's no surprise that it wasn't well received.
		</p>
		<p>
			Of course, that doesn't explain why the game is so hated <i>today</i>.  If we can identify the reasons why, we can try to address them.  Here are the problems this page will address:
		</p>
		<ul>
			<li>The game seems incredibly complex. This isn't a real problem.  Once you learn how to play, it's really very simple.  You just need to <a href="http://www.atariage.com/manual_html_page.html?SoftwareLabelID=157">read the manual</a>, or watch a <a href="http://www.youtube.com/watch?v=r-pzdPLfy9Y">tutorial video</a>, to understand it.</li>
			<li>The game is incredibly hard.  It's difficult for novices to complete the game even on mode 3, the easiest setting.  Fortunately, this can be fixed.
			</li><li>You spend a lot of time <i>accidentally</i> falling in to wells.  I believe that I know reason why this happens to so many people, and what can be done to fix it.</li>
			<li>E.T. is not green.  I'm really surprised that this isn't a common complaint.  We'll fix that as well.</li>
		</ul>
	<br>

	<a name="whyfall"></a> 
	<h2>Why people accidentally fall in to the wells</h2>
		<p>The myth: A lot of people blame poor collision detection for this problem.  That is simply not true.  The collision detection in <i>E.T.</i> is perfect.  There are no bounding boxes like in more modern games. Collision detection happens at the pixel level.  You can't get any better than that.  If you fall in to a well, it's because your player character <i>visually</i> overlaps it.</p>
		<p>The actual problem: We don't want pixel-perfect collision detection!</p>

		<p>The reason that people so easily fall in to wells is that they don't expect to fall when, for example, E.T.'s head overlaps a well.  After all, his feet are clearly on solid ground!</p>

		<div>
		<p><img src="http://www.neocomputer.org/projects/et/figure1.png"></p><p><b>Figure 1:</b> E.T. appears to be standing in front of a well.  However, because collision detection is pixel perfect and some of the sprite pixels overlap the well pixels, E.T. is sure to fall.  This is a bad thing.</p>
		</div>

		<p>E.T. uses a weird perspective not well suited for pixel-perfect collision detection.  It's an overhead view, but we see E.T. and the other characters from the side.  An <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/ThreeQuartersView">article on tvtropes.org</a> calls this "Three Quarters View" and describes it as a "tilted bird's eye view perspective".</p>

		<p>Nintendo's <i>The Legend of Zelda</i> uses the same perspective, but you don't hear a lot of complaints about accidentally running in to enemies or obstacles.</p>

		<div>
		<p><img src="http://www.neocomputer.org/projects/et/figure2.png"></p><p><b>Figure 2:</b> A similar perspective is used in <i>The Legend of Zelda</i> though it somehow manages to be even stranger.  The floor tiles and blocks, the outer walls, and the player character are all shown from different perspectives.  This doesn't hurt the game in any way, it actually makes it better.</p>
		</div>

		<p><i>Zelda</i> uses a neat trick to make the perspective feel more natural when playing and less like the characters are lying on their sides.  Collision detection is designed around where your player character <i>appears</i> to be, not by what sprites happens to overlap.  In <i>Zelda</i>, when you approach an obstacle from the south, for example, it doesn't obstruct your movement until about half of your sprite overlaps it.  </p>

		<div>
		<p><img src="http://www.neocomputer.org/projects/et/figure3.png"></p><p><b>Figure 3:</b> (Left) Our player character appears to be standing in the row of floor tiles below the block.  The player assumes that they are able to move forward as there are clearly no obstacles in the way.  However, if collision detection was pixel-perfect they would be obstructed by the block. (Right) Thanks to good design, we can do the obvious: walk on the tiles in front of the block.</p>
		</div>

		<p>If we can modify the collision detection in <i>E.T.</i> so that it's not pixel perfect, but based on where the player character appears to be, we can give the player the same intuitive advantages that <i>Zelda</i> players enjoy.  In the case of <i>E.T.</i>, such a change is simple: we just need to ensure that only collisions with E.T.'s feet are detected. The game will feel much more natural, and players won't fall in to wells accidentally nearly as often.</p>

	<br>

	<a name="fixfall"></a>
	<h2>Fixing the falling problem</h2>

		<p>The fix is pretty simple.  All we need to do is clear the collision latches sometime before we finish drawing the E.T. sprite. One or two scan lines before the end should work out great.  That may not seem like a lot, but it really is the most appropriate place.  It'll also let us stand on the inner edge of the "v" shaped wells. I've always thought you should be able to do that.</p>

		<div>
		<p><img src="http://www.neocomputer.org/projects/et/figure4.png"></p><p><b>Figure 4:</b> Where no extra-terrestrial has gone before!</p>
		</div>

		<p>We don't have access to the game's source code and the disassembler I have for 2600 games won't work if the game is over 4k. If we're going to fix the problem, we've got to modify the ROM somehow.  A good hex editor coupled with the nifty debugger included in <a href="">Stella</a> and we're ready to go.  That may be a bit optimistic. As every Atari 2600 developer knows, you rarely have and abundance of free space on the ROM and routines (particularly in the kernel) are generally kept very tight with little or no wasted code.</p>
		
		<p>To make matters worse, to implement our fix we'll need to add some code to the kernel.  If you're following along, take a look at kernel code starting at 1006.  As it's unlikely that Howard Scott Warshaw (the developer) included some useless code for us to replace, we may want to consider hijacking a jump, running our routine in some unused spot on the ROM, and returning.  A quick look presents us with a candidate at 1074. We could run our routine and jump back to 1022. Unfortunately, time is also an important factor, especially in the kernel. We don't even have enough time to jump out and return, let alone run our routine.  We could use an extra scan line, but that does far more harm than just making our graphics look blocky: candy won't appear and hint areas, for the most part, won't display the location of phone parts.  Give it a try if you're feeling ambitious, just don't forget to increment X or you'll end up with a flickering mess!</p>

		<p>Back to the kernel we go to see what we can change.  A few rounds with the debugger and you'll notice that the code at 101C to 101E ultimately does nothing as there is a TXA right after the jump. Useless code in the kernel is unusual. Looking a little further back, we find that the code starting at 1013 sets COLUP0 to some inexplicably twisted value based on whatever is stored in 81. This is weird because 88 is used to hold that color, as we can see from the code at 1047 to 1049. Even stranger, this code is never called on lines where we draw GRP0.  The code from 1013 to 101E appears to do nothing but burn a few cycles. (That's exactly what it's supposed to do, for timing.) After a good bit of double-checking, it becomes obvious that can safely replace it. This is great news for us as that means we have a whole 12 bytes we can change!  Since X holds the current y position, that's more than we need for our routine. Lucky.</p>
		<p>The idea is to strobe CXCLR before we draw the last line of the sprite so that any collisions recorded to that point are eliminated. The effect will be that only collisions with E.T.'s feet will be detected. The code is pretty simple, 9C holds E.T.'s y position so we just need to subtract some amount of E.T.'s height from our current y position and compare it to the value at 9C to see if we can safely clear the collision latches:</p>
		<pre>		1013: TXA         ; 2 ; 8A
		1014: SBC #$08    ; 2 ; E9 08
		1016: CMP $9C     ; 3 ; C5 9C
		1018: BCS $F01C   ; 2 ; B0 02
		101A: STA CXCLR   ; 3 ; 85 2C
		</pre>
		<p>Give it a try.  It looks like we're done, but there are still a few problems:</p>
		<ul>
			<li>We can't pick-up phone parts. (We'll fix this a little later.)</li>
			<li>We need to step on candy to collect it. (This is a problem we can't yet avoid.)</li>
			<li>The routine isn't called when there is another character next to you. (Remember that we discovered the code we replaced was never called on lines where we draw GRP0?) If part of your sprite overlaps a well and another character approaches, the collision latches won't get cleared and you'll fall right it!</li>
		</ul>
		<p>There isn't another junk spot we can dump our routine that is always called, so we'll need to find an additional 9 bytes that we can safely overwrite. Constraints are tighter here, as we'll need to find some code that we can eliminate that also happens to be called all the time, or when our other routine isn't.  That's a pretty tall order. Could we really be that lucky or will we need to find some code that isn't essential to the game, and deal with any unwanted consequences?</p>
		<p>A few rounds with the debugger turns up 8 whole bytes at 1062 that look redundant. Didn't we already handle that at 103B? It turns out that we didn't.  Take a look at 1043. The next sprite row is read and saved for later use. Later, sadly, means at 1062. If we replace this code it means that we won't update GRP0 and COLUP0. That means we'll end up duplicating the previous row. We'll essentially be tossing out half of our sprite data. It will appear as though every other line in our sprite was overwritten by the previous line. That sounds bad, but in the end it means that we can use these bytes without fear as the only consequence will be that the other characters and the phone parts will look a bit pixelated (each row being four scan lines tall). Of course, on an Atari 2600, that's not exactly a major issue.  We need at least 9 bytes for our routine, but our luck is holding out and we can safely eliminate the WSYNC at 1060 giving us a whole 10 bytes to use as we please. We'll also need to slightly modify our routine.  If you've been following along with a debugger, you can probably guess why.</p>
		<pre>		1060: NOP         ; 2 ; EA
		1061: TXA         ; 2 ; 8A 
		1062: SBC #$07    ; 2 ; E9 07 
		1064: CMP $9C     ; 3 ; C5 9C 
		1066: BCS $F06A   ; 2 ; B0 02 
		1068: STA CXCLR   ; 3 ; 85 2C 

		Note: We subtract 7, not 8 like before.
		</pre>

		<div>
		<p><img src="http://www.neocomputer.org/projects/et/figure5.png"></p><p><b>Figure 5:</b> The FBI Agent before and after.  It looks worse when you put them side-by-side.  Only die-hard E.T. fans will notice the change during actual play.</p>
		</div>
		
		<p><b>::UPDATE::</b> Thanks to the excellent suggestion of AtariAge user Nukey Shay, we can (mostly) save our sprites. (Apparently, the die-hard E.T. fans noticed and were not impressed!) Every other line will still be the same color, but at least they won't be a blocky mess.</p>
		<p>Nukey Shay's idea was to precalculate the location where we want to strobe CXCLR. Instead calculating the position we're looking for on every line,  we do it once per frame and store the result so that we can just do a quick CPX. This saves us a 3 bytes and 4 cycles. We can spend these (plus 2 cycles from the NOP) on an LDA and STA to update GRP0.  That will make our sprites less blocky, but we'll still lose some color detail.  Elliott's shirt will lose its stripes and the FBI agent will lose his hair.</p>
		<p>Our second routine now looks like this:</p>
		<pre>		1060: LDA $87     ; 3 ; A5 87
		1062: STA GRP0    ; 3 ; 85 1B
		1064: CPX $8B     ; 3 ; E4 8B
		1066: BCS $F06A   ; 2 ; B0 02
		1068: STA CXCLR   ; 3 ; 85 2C

		Note: We'll save our precalculated location at 8B, which is unused.
		</pre>

		<p>Of course, we still need to precalculate the position and store it at 8B.  We've got a little free ROM space in Bank 0, and tons of time during VBLANK, so we can run our routine just before we wait out the timer.  We'll steal the jump to 0CAB at 002A, call our routine at 0FF0, and then jump to 0CAB to wait out the timer.</p>
		<pre>		002A: JMP $BFF0   ; 3 ; 4C F0 BF

		0FF0: LDA $9C     ; 3 ; A5 9C
		0FF2: ADC #$07    ; 3 ; 69 07
		0FF4: STA $8B     ; 3 ; 85 8B
		0FF6: JMP $BCAB   ; 3 ; 4C AB BC
		</pre>

		<p>That solves the problem.  Now E.T. won't fall in to a well unless his feet are over the hole.  Moving around in the game feels a lot more natural.  Of course, it doesn't matter how great the controls are if we can't collect phone parts to complete the game!</p>
		<p>If you've been following along, you've probably already figured out that the reason we can't collect phone parts is because E.T.'s feet never touch them.  Hovering up to make E.T.'s feet touch them doesn't work, which seems obvious in retrospect.</p>
		<p>The simplest solution is to just move the phone parts down the screen a little bit so that they're lying on the ground and not hovering in mid-air.  It's an easy fix, just one byte.  Change 0BEE from 32 to 36.</p>
		<pre>		0BED: LDA #$36    ; 2 ; A9 36
		</pre>
		<p>That's all there is to it.  It's not perfect, but we'll improve it later.</p>
	<br>

	<a name="toohard"></a>
	<h2>Dealing with the difficulty</h2>
		<p>The game is now actually easy to complete on easy mode and much more fun to play in the other game modes.  It may still be a bit too difficult for some, so let's see what we can do to make the game less punishing.</p>
		<p>E.T. focuses heavily on exploration.  Not only do you need to find the phone parts, but also a location for your ship to land, and a suitable spot to "phone home". There is also strategic exploration to identify the spots where you can call Elliott, eat candy, and send the scientist and FBI agent back to their respective buildings.  Let's not forget side quests.  The problem, of course, is that the game punishes you for exploring.  Every step you take uses precious energy.  Rather than a fun activity, exploration is something to avoid whenever possible.</p>
		<p>As there are plenty of other ways to lose energy aside from just moving around, we can reduce the amount of energy it takes to move around to zero without making ourselves invincible.  The game will still be challenging, just not nearly as frustrating.</p>
		<p>E.T. loses energy by moving around in three different ways: walking, running, and hovering upward. Using our debugger, we can step through the code to find the place or places where we lose energy.  Some people may think that running or hovering should still take energy away.  Conveniently, there are three places we need to change. Each line presented below is independent of the others, so just don't make the changes for running or hovering if you don't want them.</p>
		<pre>		The Original code:
		0707: LDY #$01     ; 3 ; A0 01 ; Lose energy Walking
		071B: LDY #$01     ; 3 ; A0 01 ; Lose energy Running
		0685: LDY #$01     ; 3 ; A0 01 ; Lose energy Hovering

		The New code:
		0707: LDY #$00     ; 3 ; A0 00 ; Lose no energy Walking
		071B: LDY #$00     ; 3 ; A0 00 ; Lose no energy Running
		0685: LDY #$00     ; 3 ; A0 00 ; Lose no energy Hovering
		</pre>
		<p>It's easy to see how to change the code to take <i>more</i> energy away if you're after additional challenge. You could, for example, double the energy you use when running by changing 071C to 02.</p>

		<p><b>::UPDATE::</b> AtariAge user Random Terrain noticed that there is a problem with the sound that plays when E.T. is hovering.</p>
		<p>That particular problem is caused by the seemingly simple difficulty fix for hovering. It turns out that the routine that plays the hovering sound uses the lower part of your energy (the last digit, masked off with an AND #$0F) to pace the tones.  If we set 0686 to 0, you'll either hear an annoying tone or no sound at all, depending on the last digit of your energy counter when you start hovering. To fix this, we'll need modify that routine at 04EE.</p>
		<p>We'll need to replace the reference to D4 with another memory location with a value that changes regularly. 81 is a good candidate, but it changes a bit too frequently.  We can slow the pace to match the original fairly well by changing the mask to 1E.</p>
		<pre>		04F0: LDA $81     ; 3 ; A5 81
		04F2: AND #$1E    ; 2 ; 29 1E
		</pre>

		<p>If you still think the game is too difficult, you can skip the changes above (except the sound fix) and make the following change:</p>
		<pre>		0FD5: LDA $D3     ; 3 ; A5 D3
		</pre>
		<p>This change copies the upper part of your energy counter to the lower part, making energy a non-issue.  You only lose energy if you fall in to a well and fail to catch yourself.  You'd need to make that mistake 99 times before you pass-out, assuming that you don't eat any candy between falls.  If that wasn't enough, you still won't lose as Elliott will come to revive you a few times. I don't recommend this change.</p>

	<br>

	<a name="notgreen"></a>
	<h2>E.T. is NOT green!</h2>
		<p>Why is E.T. green?  You need to ask Howard Scott Warshaw about that.  E.T. is brown, however, not green.  There is absolutely no reason why the game shouldn't use a proper color for E.T.</p>
		<p>Here's what we know:</p>
		<ul>
		<li>The E.T. sprite uses GRP1.</li>
		<li>COLUP1 is not set anywhere in the kernel</li>
		<li>E.T.'s color changes as he loses energy</li>
		<li>Our energy level is stored across D3 and D4</li>
		<li>The values at D3 and D4 are stored as BCD</li>
		</ul>
		<p>We don't know, but can assume, that GRP1 and, consequently, COLUP1 are used in the top-bar. (It turns out that they are.)  With our debugger, we can step through the code called after the top bar has been rendered and before we enter the kernel at 102E.  We're looking for anything that checks our energy level or that sets COLUP1. It's not long before we find this gem:</p>
		<pre>		165E: LDA $D3      ; 3 ; A5 D3
		1660: LSR A        ; 2 ; 4A
		1661: LSR A        ; 2 ; 4A
		1662: LSR A        ; 2 ; 4A
		1663: LSR A        ; 2 ; 4A
		1664: LSR A        ; 2 ; 4A
		1665: TAX          ; 2 ; AA
		1666: INX          ; 2 ; E8
		1667: LDA F7F9, X  ; 4 ; BD F9 F7
		166A: STA COLUP1   ; 3 ; 85 07
		</pre>
		<p>It does everything: It reads the upper part of our energy level and sets COLUP1.  We now know that E.T.'s colors are stored starting at 17F9, but how many of those bytes do we need to change?  Remembering that the value stored at D3 is BCD we know that after 1163 we'll have a value between 0 and 9.  One more shift (to divide by 2) and we're left with one of 5 possible values: 0, 1, 2, 3, and 4.  Clever, isn't it?</p>
		<p>Why the INX?  You'd think that it was unnecessary as we'd need only change F7F9 to F7FA to skip the instruction and save a precious byte of ROM space and two cycles. If you take a look at the code a little farther back you'll find that the byte at index 0 is used as a color, but in a special case. (When E.T. has passed-out, if you're curious).  The important thing here is that we now know that to change E.T.'s color, we need only change those 6 bytes starting at 17F9. </p>
		<p>We'll need to consult a <a href="http://www.randomterrain.com/atari-2600-memories-tia-color-charts.html">TIA color chart</a> to figure out what colors we should use.</p>
		<pre>		Original Colors:
		17F9: 0E DE DC DA DA DA

		New Colors:
		17F9: 0E FE FC F8 F8 F8
		</pre>
		<p>I changed the luminance and not just the hue as FA looked too light.  Unfortunately, that choice makes E.T. practically invisible against the gray background in the wells.  Rather than give-in and use the lighter color, we can just make the background of the well a bit darker.  It's a small difference that won't be noticeable during play.</p>
		<p>As you've already guessed, the code to change COLUPF and COLUBK ought to be near the code to set COLUP1: after we draw the top bar but before we enter the main kernel.  No surprise, we find the code we're interested in just a few bytes down at 166E to 1680.  The code works the same way, reading a color from a byte array. COLUPF from 1DD9 and COLUBK from 1DE2.  Play until you fall in to a well and then take a look at the value stored at 80 when we get to 166E to get the index we need. (For the lazy: It's 6, giving us 1DE8.)</p>
		<p>Between the color chart and our understanding of the code starting at 166E we can change the well foreground and background colors to anything that we want.  Gray always seemed to me to be an odd choice, but I'll stick with tradition here and just make the background a shade darker so that E.T. stands out.</p>
		<pre>		1DE8: 04
		</pre>
		<p>If you want to change the well foreground color, that value is stored at 1DDF.</p>

		<div>
		<p><img src="http://www.neocomputer.org/projects/et/figure6.png"></p><p><b>Figure 6:</b> E.T. looking sharp with his fancy new color. </p>
		</div>		

	<br>
	<a name="finishup"></a>
	<h2>Spit and Polish - Finishing the Project</h2>
		<p>Things are looking good, but they're not good enough.  Let's see if we can polish this up and make it ready for production.</p>
		<p>Here are the problems:</p>
		<ul>
			<li>Elliott's Shirt has no stripes</li>
			<li>The FBI Agent lost his hair</li>
			<li>E.T. loses detail on the right side of the screen</li>
			<li>Candy Pieces are much more difficult to collect</li>
			<li>Objects in wells are drawn too far down, making the flower look odd</li>
			<li>A Big One: Elliott can't revive E.T.</li>
		</ul>
		<p>As a Bonus, let's also make our difficulty fix a selectable option.</p>
		
		<h3>Finding some space</h3>
		<p>What purpose does M0 serve? I have absolutely no idea.  It's only set to one of two fixed vertical positions (7F and 33), and only at two fixed horizontal positions.  It's displayed only when E.T. is dead (on the sad ending scene), about half-way across the the bottom of the play area. It changes to various shades of red. That's from the code, I've never actually seen it during play. I've taken the time to see if that really does happen, and what it looks like. M0 shows up directly over a dead E.T., giving him the appearance of being fatally wounded.</p>
		
		<p>While I was hoping for a no-compromise solution, this is something I'm willing to remove. It won't be missed.  We'll trade it for an improved kernel and a new feature much better than a bleeding E.T.</p>

		<p>With that gone, we free up 3 bytes and 6 cycles in our kernel at 1028.  Looking a few bytes down at 102F, you'll see an obviously useless SEC.  It's actually used for timing, but we'll make up for that with our new changes anyway.  For now, it can be considered 1 free byte and 2 precious cycles.  Coupled with the WSYNC we can remove at 1060, that gives us 6 free bytes and 11 cycles.  We'll use these to make a change to our kernel to implement our falling fix while preserving sprite colors and making it easier to collect candy.</p>

		<p>The idea is simple: We have a lot of stuff to draw early, so do that first.  With the extra space and time, we'll check to see if we're on the line we'd normally strobe CXCLR for our falling fix. Instead of clearing it right away, check to make sure we haven't touched any candy.  That's going to take a whopping 10 bytes and 12 cycles. </p>
		
		<pre>		CPX $8B     ; 3 ; E4 8B
		BNE +6      ; 2 ; D0 06
		BIT CXP1FB  ; 2 ; 24 13
		BVS +2      ; 2 ; 70 02
		STA CXCLR   ; 3 ; 85 2C
		</pre>

		<p>Thankfully, we can spare the extra cycle.  Though where are we going to find an extra 4 bytes?</p><p>Remember all that dead code at 1013 we used for the first version of our falling fix?  It's just timing code, there to waste some cycles so that everything is drawn at just the right place.  We don't ultimately need it for our falling fix (though we left it in anyway) so we're free to use it for something else, provided we're careful about our timing.  The code we're going to change starts at 1060 and branches in to the code at 1022. That puts us directly below the useless code at 1013.  We can snag a few bytes from there and just adjust the jump at 1074.</p>
		
		<p>To start, we'll kill the WSYNC at 1060 and move everything before the jump to 1022 (at 1074) up two bytes. We'll move the CPX at 1022 to the hole we created at 1072 giving us:</p>
		<pre>		1060: LDA $87     ; 3 ; A5 87
		1062: STA GRP0    ; 3 ; 85 1B
		1064: LDA $88     ; 3 ; A5 88
		1066: STA COLUP0  ; 3 ; 85 06
		1068: TXA         ; 2 ; 8A
		1069: TAY         ; 2 ; A8
		106A: LDA $BA, Y  ; 5 ; B1 BA
		106C: STA PF1     ; 3 ; 85 0E
		106E: LDA $BC, Y  ; 5 ; B1 BC
		1070: STA PF2     ; 3 ; 85 0F
		1072: CPX $9F     ; 3 ; E4 9F
		</pre>
		<p>Next, we'll grab four bytes from our dead code by moving the jump at 101F to 101B.  We'll then update our jump at 1074 (that used to point to 1022) to point to 101E.</p>
		<pre>		101B: JMP F04B    ; 3 ; 4C 4B F0

		1074: JMP F01E    ; 3 ; 4C 1E F0
		</pre>
		<p>Now we can clear a 10 byte spot for our routine.  Move the PHP at 1024 to 101E. (We can get away with this as JMP doesn't affect any flags.) Now move everything from the CPX at 1025 to the TXA at 102E down a byte, overwriting the useless SEC at 102F.</p>
		<p>Popping in our new routine at 101F, we get:</p>
		<pre>		101B: JMP F04B    ; 3 ; 4C 4B F0

		101E: PHP         ; 3 ; 08
		
		101F: CPX $8B     ; 3 ; E4 8B
		1021: BNE +6      ; 2 ; D0 06
		1023: BIT CXP1FB  ; 2 ; 24 13
		1025: BVS +2      ; 2 ; 70 02
		1027: STA CXCLR   ; 3 ; 85 2C

		1029: CPX $9E     ; 3 ; E4 9E
		102B: PHP         ; 3 ; 08
		102C: INX         ; 2 ; E8
		102D: LDY $86     ; 2 ; A4 86
		102F: TXA         ; 2 ; 8A
		</pre>

		<p>If we try the game now, it'll crash.  The kernel entry point is at 102E, which now in the middle of an instruction!  The CPU will think that we're trying to STX $8A and who knows what else afterward!  We'll need to adjust our entry point down a byte.  It's buried in a table at 18F3.  The address is loaded at 16A0 and shoved on to the stack. We jump in to the kernel with an RTS at 16B5. The RTS instruction pops the address off the stack as sets the PC, but inexplicably adds 1 in the process.  That means we'll need to specify an address 1 byte before the one we want. It's weird. We jump to our new address ... by specifying our old one.</p>
		<pre>		18F3: $F02F       ; - ; 2E F0
		</pre>
		
		<p><i>Now</i> if we replace the 8 bytes from 1013 to 101A with NOP's (EA, using up 16 cycles) we can try out our new kernel.  A quick test shows that we're clearly not done.  E.T. still loses resolution on the right side of the screen!  Remember that useless SEC?  We needed it to delay updating GRP1 at 1034 until we were finished drawing the play area.  The fix is easy, just swap it with the WYSNC at 1036.</p>
		<pre>		1034: STA WSYNC   ; 3 ; 85 02
		1036: STY GRP1    ; 3 ; 84 1C
		</pre>

		<p>That's a lot better, but we're still not done.  Elliott still can't revive E.T., and we still need to touch phone parts with our feet, meaning we still need to push objects in wells down a few lines.  We've also introduced a new problem: E.T. isn't centered in the spaceship on landing or take-off. At least that one is easy to fix.  All we need to do is adjust the starting position of the spaceship for landing (at 0B40) and take-off (at 07ED):</p>
		<pre>		0B40: LDA #$EF    ; 2 ; A9 EF
		07ED: SBC #$04    ; 2 ; E9 04
		</pre>

		<p>So, why can't Elliott revive E.T.?  To revive E.T., Elliott needs to touch him.  Unfortunately, the "E.T. has passed-out" sprite is much shorter than the normal E.T. sprite, and we clear the collision latches well below the last line. It doesn't matter where Elliott is positioned, he'll never touch E.T. after we strobe CXCLR as there will be nothing for him to touch.</p>
		<p>There are a couple things we could do.  Instead of adding 7 when we calculate the position to clear the collision latches, we could do the sensible thing and add E.T.'s height and position, then subtract 2 before storing it in 8B.  That way we'll have a line for Elliott to touch on the much shorter E.T. sprite. Unfortunately, that won't work.  Even if we move the code to calculate the position just above E.T.'s feet to the 10 free bytes at 0BF6 (which we will anyway) we'll need 8 bytes for the math and three to jump to 0CAB.  That's 11 bytes.  Our luck isn't holding out, as there doesn't seem to be any useless bytes to spare.  All the same, let's move that routine anyway in preparation for our cool new feature.</p>
		<pre>		002A: JMP $BBF6   ; 3 ; 4C F6 BB

		0BF6: LDA $9C     ; 3 ; A5 9C
		0BF8: ADC 07      ; 3 ; 69 07
		0BFA: STA $F6     ; 3 ; 85 F6
		0BFC: JMP $BCAB   ; 3 ; 4C AB BC
		</pre>
		<p>(Wait a minute!  Why are we storing the result at F6 when our new kernel is expecting that at 8B?  There is a reason, as we'll soon see.)</p>

		<p>We could alternately check to see if E.T. has passed-out, and skip strobing CXCLR.  The same trick would work for Phone Parts as well, by checking to see if E.T. is in a well.  Of course, there's absolutely no way we can do that at the same place we do our other checks at 1023.  That shouldn't be a problem, as we only really need to do those checks once as they're not dependent on E.T.'s vertical position.  That's great, but how do we skip clearing the collision latches?  There's not enough room for even one extra check.</p>
		
		<p>We could modify our calculated value to point to some other location.  Setting it to 0 would be ideal, but what about this process has been ideal?  We also need a place to stuff our checks. A check usually costs us a good 4 bytes, two to set flags and another two to branch.  That would make it seem like we'd need at <i>least</i> 10 bytes (another 2 bytes to zero 8B).  Naturally, we don't have 10 usable bytes plus 1 or 3 extra bytes for a return. Not anywhere.</p>
		
		<p>Now, we do have 8 bytes at 1013, for timing, just begging to be used in our kernel. The problem is that not only do we need to squeeze our routine in to 8 bytes, we must also burn through 12 to 16 cycles (no more, no less) to keep our timing right.</p>
		
		<p>Here's what we know:</p>
		<ul>
			<li>D9 is normally 0, but is set to 40 when we're hovering over a well, 20 when we're at the bottom of a well, and 80 while we're falling in.</li>
			<li>E3 is normally 0, but is set to C0 when E.T. has passed out</li>
			<li>E.T.'s vertical position will never exceed 3A</li>
			<li>E.T.'s vertical position will never fall below 30 while standing in a well</li>
			<li>E.T. will never collect anything or fall in a well when his vertical position is 0</li>
			<li>We only draw GRP0 on the first scanline when the mothership is taking off or landing</li>
			<li>That means our timing code at 1013, for all practical purposes, will always be called on the first scanline.</li>
		</ul>
		<p>What can we do with this? Adding D9 and E3 to 8B will normally do nothing. If we're at the bottom of a well, D9 will be set to 20, and E3 will be 0 (if E.T. is healthy) and C0 (if not) That means 8B will be around 10 (+16) or 50 (+80), in any case, well outside the area we care about. (It'll be well above E.T. or below the play area). If we're not in a well, D9 will be 0 and adding C0 (-64) to any possible E.T. position will always result in a value in the range FA(-6) to C0(-64).</p>

		<p>This is great.  We can do that in 8 bytes and in precisely 12 cycles (the minimum we need to burn). The only problem is that our little routine will be called more than once.  We can't just keep modifying 8B and hope for the best.  The simple solution is to keep an original copy of our calculated value in a different location, run our routine using that value, and store the result in 8B.  (That's why we stored our calculated value in F6 instead of 8B when we moved the routine to calculate the position we want to strobe CXCLR.) Our slick little routine looks like this:</p>
		<pre>		1013: ORA $D9     ; 3 ; 05 D9
		1015: ADC $E3     ; 3 ; 65 E3
		1017: ADC $F6     ; 3 ; 65 F6
		1019: STA $8B     ; 3 ; 85 8B
		</pre>
		<p>Why ORA and not LDA?  A will always be 0 at this point so the effect will be the same.  With needlessly cryptic things (like the SEC used like a NOP) scattered around the code, it seemed to fit with H.S.W.'s style.</p>

		<p><b>Update:</b> AtariAge user iesposta noticed that it's possible for E.T. to fall in to a well if he's touching both a well and a piece of candy.  This only happens in one spot (on the screen with the "V"-shaped wells) and you've got to be lined up near perfectly.  We can prevent that from happening by pushing that candy down a tiny bit.</p>
		<pre>		 0BA5: 22          ; - ; 22
		</pre>
		
		<p>We did it!  The game is now virtually identical to the original except for the changes that we wanted to make. The gore is the only exception, but it was worth removing it for...</p>

		<a name="newfeature"></a>
		<h3>Our new feature</h3>
		<p>As promised, we're going to make our difficulty fix <i>optional</i>.  No longer will skilled E.T. players need to give up our much-needed changes in exchange for a more challenging game. Both difficulty switches are already used, but the B&amp;W / Color switch is unused. All we need to do is find a place to put our routine.</p>

		<p>We'll need to first modify our old difficulty fix to read from a byte in memory, rather than our explicit 1 or 0.  That's the easy part.  We'll use F8, for no real reason.</p>
		<pre>		0707: LDY $F8     ; 3 ; A4 F8
		071B: LDY $F8     ; 3 ; A4 F8
		0685: LDY $F8     ; 3 ; A4 F8
		</pre>
		
		<p>The state of the color switch is at bit 3 in SWCHB.  We'll need to load that in to memory, mask off bit 3, and check the state against that.  Naturally, we don't have the space to do all of that and store it.  We'd need 13 bytes for the obvious routine, if we magically found a place to stuff our routine that didn't require we hijack a jump.  That's not going to happen.</p>
		
		<p>The smallest routine I could manage works like this: read SWCHB, mask off bit 3, shift right three times, store the result.  That'll take 10 bytes, not including a return jump.  Even if we had the 10 bytes, that also would mean that the difficulty fix would be off by default (the switch is set to color) which isn't optimal.</p>
		
		<p>We have what appears to be 10 bytes, but is really 8 bytes, free at 0FF0 where we used to have the 9-byte routine used to calculate the position to clear the collision latches. (I don't know how we got away with it.)  We also have the 8 bytes that set M0's horizontal and vertical position for the gory ending scene at 0B4D. If we switch from one group to the other, it could be enough.</p>
		
		<p>We'll likely need to use 6 of those bytes just for jumps, once to switch between our open areas, and once to complete the jump we hijack. Luckily, the routine just before our 8 free bytes at 0FF0 ends with an RTS. It turns out that this is the routine that decrements E.T.'s energy. It's a bit of good luck, and a nice match for our difficulty fix.  To make things even better, there's an RTS at the end of our other 8 bytes (that set M0's position).  With 16 bytes, and a return that's ready-made, we can implement our routine, swap the functions of the Color and B&amp;W settings (so that Color is easy), all with a byte to spare.</p>
		<p>We'll overwrite the RTS at 0FEF to allow the routine to continue in to our routine, grab SWCHB, and mask off bit 3 before the jump.  We could do an LSR here, but we'll save it for after the jump to make our routine line-up with the existing RTS at 0B55.</p>
		<pre>		0FEF: LDA SWCHB   ; 4 ; AD 82 02
		0FF2: AND #$08    ; 2 ; 29 08
		0FF4: JMP $BB4E   ; 6 ; 4C 4E BB
		</pre>
		<p>We'll need to use a byte to cap-off the checks to run the old routine so that our routine doesn't accidentally run.  That's why we'll enter the second part at 0B4E instead of 0B4D.</p>
		<pre>		0B4D: RTS         ; 6 ; 60
		0B4E: LSR         ; 2 ; 4A
		0B4F: LSR         ; 2 ; 4A
		0B50: LSR         ; 2 ; 4A
		0B51: EOR #$01    ; 2 ; 49 01
		0B53: STA $F8     ; 3 ; 85 F8
		</pre>
		<p>Bit 3 of SWCHB is 1 if the B&amp;W / Color switch is in the Color position, 0 otherwise.  The EOR at 0B51 will reverse that so that we store a 0 in F8 when the switch is set to Color instead of 1.</p>
		<p>That's all there is to it.</p>

	<br>

		<a name="bugs"></a>
		<h2>Squashing some 30-year-old Bugs</h2>

		<p>E.T. has a reputation for being loaded with bugs.  Bugs that make the game "virtually unplayable".  This just isn't true.  There aren't actually that many bugs, and only one that seems to impact normal gameplay.</p>
		
		<h3>Bug myths and facts</h3>
		<p>There are a few oft-cited bugs that, well, aren't bugs at all.  Before we begin, let's set the record straight on the most common non-bugs:</p>
		<ul>
			<li>
				<p>Myth: <i>Some game-state variables aren't cleared when starting a new game as evidenced by the appearance of the Scientist and FBI agent after starting a new game on mode 3.</i></p>
				<p>This simply isn't true.  The Scientist and FBI agent always appear regardless of the game mode.  In every mode, all the humans are shown returning to their respective buildings -- that includes mode 3, even from power-on.  The difference, of course, is that in mode 3 they never leave.</p>
			</li>
			<li>
				<p>Myth: <i>The first count-down timer doesn't finish ticking down like the second, faster, timer.</i></p>
				<p>This is just a misunderstanding of what the "two" timers represent.  The timer takes 64 "ticks" to complete. Every 8 ticks, a section disappears.  The second timer is a "close-up" of the last section of the first timer.  It ticks off one of its eight sections every "tick".  It's like the first timer is minutes, and the second timer seconds.  There really is just one 64-tick timer, we just see the higher-precision ("second") view when we get to the end (the last "minute").</p>
			</li>
			<li>
				<p>Myth: <i>The number of times Elliott can revive E.T. is incorrect / can be exploited to gain and extra revival.</i></p>
				<p>This is simply not true. The manual states that <i>"Elliott can merge with E.T. three times per game."</i> Which is correct.  It also states that <i>"Once during a round, however, E.T. can encounter a wilted flower hidden in the bottom of a well.  If E.T. is revives the flower, Elliott is given the ability to merge with E.T. one extra time."</i> This is also correct.  Extra merges / lives accumulate as you would expect from the description, though that's not explicitly stated in the manual.</p>
				<p>In short, there are no bugs related to the number of times Elliott can revive E.T. (Not under any normal play circumstances anyhow.  If you accumulate more than 127 "lives", Elliott will not revive E.T. I doubt that has <i>ever</i> happened!)</p>
			</li>
		</ul>
		
		<h3>Real Bugs</h3>
		<p>Bug 1: <i>On difficulty modes where Elliott is allowed to be on-screen when the ship lands, the Ship Crushes Elliott.</i></p>
		<p>This bug happens because the ship's position is overwritten by Elliott's position immediately after the ship's position is set to start the landing animation.  The fix is simple, just skip over the code that updates the current objects on-screen position after we start initialize the ship landing sequence.</p>
		<pre>			07BD: JMP $BAD9  ; 3 ; 4C D9 BA
		</pre>
		
		<p>Bug 2: <i>You always fall in to a well when exiting the forest on the right, and when exiting the city on the left</i></p>
		<p>This is also an easy fix.  The falling fix automatically takes care of the bug when exiting left from the city screen.  For the forest, we just need to slightly adjust E.T.'s starting position on the next screen.  The player will be pushing right on the joystick, so we'll just move E.T. a tiny bit up and to the right to avoid immediately falling in to the top-center well on the screen with eight pits.  E.T.'s starting position is read from a table, so we just need to update a couple of values:</p>
		<pre>			0D54: 3A +10      ; - ; 4A
			0D6C: 04 -3       ; - ; 01
		</pre>
		<p>We'll move E.T. 16 units to the left, and 3 units up from the original positions.</p>
		
		<p>Bug 3: <i>Scoring is wildly incorrect.</i></p>
		<p>It's consistent, for the most part, but it's very confusing.  It also doesn't even come close to matching the manual.  There are some more serious problems, however.  Collecting more than 31 pieces of candy will cause an error, often leading to the famous "Ninja E.T." bug. The starting energy penalty and candy bonuses are also incorrect.</p>

		<p>The code for scoring also determines other things, like E.T.'s energy when starting a new game, so we'll need to be careful making drastic changes to make sure we don't accidentally break anything.  Of cousre, the code is also a mess, so we will be making some rather dramatic changes.</p>
		<p>Right now, points for candy E.T. brings on the ship, bonus points for candy collected beyond a certain amount, and the energy penalty are determined by table look-ups.  Normally, a look-up table is used to save ROM space, time, or both to avoid a complex calculation or provide a more accurate calculation. These tables just waste space as time isn't an important factor here. Even worse, only points for E.T.'s candy are scored correctly! We'll eliminate these awful tables and put those bytes to better use.</p>
		<p>Currently, scoring follows this sequence:  After the ending animation starts, you are given 1 point for every unit of remaining energy, then 490 points for every candy brought on to the ship.  The candy munching part of the animation then begins, netting you 770 points for each candy held by Elliott; one at a time while the animation runs.  When a new round starts, you're given bonus points for collected candy above a certain amount (21 pieces, not 31 as specified in the manual) and the energy penalty determines your starting energy for the round.</p>
		<p>We're going to change that.  We'll start off the same way, giving one point for every unit of remaining energy.  We'll then set E.T.'s energy to 9999. As the munching animation runs, we'll deduct energy for the penalty, add bonus points for candies collected over a certain amount, and add the normal 490 or 770 points for collected candy to your score.</p>
		<p>The energy penalty code also sets E.T.'s energy at the start of a new game. We'll need to remember that code that begins a new round is also called when a new game starts, and add some code to make sure E.T.'s starting energy is set to 9999 at the beginning of a new game.</p>
		<p>Fixing the scoring code will also fix the Ninja E.T. bug. As it's become a popular, if unintended, Easter Egg in its own right, we'll add it to the game as an intentional effect. (Without the other strange artifacts, of course).</p>
		<p>Since we're fixing the scoring, it makes sense to make the scoring match the manual.  This means we'll also need to make a small change to how much candy can be found during a round so that you can meaningfully collect more than 31 pieces. There is technically a bug here, as the flags that show which well screens currently have candy is never cleared. The counter that holds how much additional candy can be found during the round often doesn't reach zero. We'll leave this in as it adds a nice bit of pseudo-randomness to the amount of candy you can find.</p>
		<p>Wait. What?  There's effectively a potential +4 or -3 to the amount of candy than can appear during a round. Remembering that candy left on the ground from the previous round isn't cleared, there can be as many as four pieces left on the ground from a previous round. Those won't be deducted from the counter, effectively increasing the potential amount of candy by as much as four pieces.  The -3 is a bit more complicated.  When candy appears, it appears on every well screen.  The value at DC is reduced by the amount of candy needed to add a candy to every screen.  (If all four screens need candy, DC is reduced by four. If three screens need candy, DC is reduced by three, and so on.) If there isn't enough candy left to place a candy on every screen, according to DC, then no candy is added.  That means that DC can get "stuck" at 3, 2, or 1. (If all four well screens need candy when DC is less than four, no candy is added. If three screens need candy when DC is less than 3, no candy will be added, and so on.)  If you're looking to maximize the amount of candy you can collect, collect only one candy at a time, allowing the candy to replenish in-between, when you get close to the maximum.</p>
		<p>Without further exposition, let's get started.  The first thing we'll do is make a change to the code that runs right after we finish a round.  The code we're interested in initializes the counter for remaining candy for the next round and totals the collected candy (what Elliott is holding plus what E.T. is holding.)</p>
		<pre>		 058E: STA $F4     ; 3 ; 85 F4
		 0590: LDA $DD     ; 3 ; A5 DD
		 0592: STA $F5     ; 3 ; 85 F5
		 0594: ADC $F4     ; 3 ; 65 F4
		 0596: STA $DD     ; 3 ; 85 DD
		 0598: ADC 16      ; 3 ; 69 10
		 059A: NOP         ; 2 ; EA
		 059B: NOP         ; 2 ; EA
		</pre>
		<p>Memory location DD holds the amount of candy held by Elliott, which will now be set to the total amount of candy collected.  F4 and F5 hold the amount of candy held by E.T. and Elliott, respectively.  At 0598, we set the amount of candy available in the next round to 16 plus the total amount of candy collected. (It will be stored in DC just after the two NOP's).  We'll come back to that later.</p>
		<p>We only need F4 and F5 to implement the Ninja E.T. bug as an Easter Egg, so this routine could be made much simpler.</p>
		<p>With that out of the way, let's kill the code that scores E.T.'s candy as we'll handle that in our new scoring routine.  As we'll be deducting energy for the penalty in our new score routine, we'll use this opportunity to set E.T.'s energy to 9999.</p>
		<pre>		 1395: LDA #$99    ; 2 ; A9 99
		 1397: STA $D3     ; 3 ; 85 D3
		 1399: STA $D4     ; 3 ; 85 D4
		 139B: BNE +9      ; 3 ; D0 09
		 139D: NOP         ; 2 ; EA
		 139E: NOP         ; 2 ; EA
		 139F: NOP         ; 2 ; EA
		 13A0: NOP         ; 2 ; EA
		 13A1: NOP         ; 2 ; EA
		 13A2: NOP         ; 2 ; EA
		</pre>
		<p>The branch at the end skips over the jump to the routine that updates our score.</p>

		<p>Those six bytes are just begging to be used!  As we're fixing the scoring, let's take this opportunity to address a scoring issue with the difficulty fix.  Normally, you get 1 bonus point for every remaining unit of energy that E.T. has at the end of a round.  With the difficulty fix in place, players essentially get tons of free points.  It hardly seems fair, so we'll add a check so that the players taking advantage of the difficulty switch receive no bonus points for remaining energy.</p>
		<pre>		 139D: LDA $F8     ; 3 ; A5 F8
		 139F: BNE +2      ; 2 ; D0 02
		 13A1: TAX         ; 2 ; AA
		 13A2: TAY         ; 2 ; A8
		</pre>
		<p>We'll hijack the jump at 1382, pushing it back a bit so that our routine is actually called. The routine to increment our score will be called directly afterward like normal, only with X and Y set to 0 instead of E.T.'s remaining energy, if the difficulty fix is enabled.</p>
		<pre>		 1382: JMP 13A3 -6 ; 6 ; 4C 9D F3
		</pre>

		<p>Now we've freed up the 20 bytes that make up the table at 1341.  We'll free up the 16 bytes at 17E9 used for the energy penalty later when we update the code that start a new round.  For now, we'll assume that they're free.  That should give us 36 bytes for our new scoring routine.</p>
		<p>We'll call our new scoring routine from the munching routine at 13AC.  We'll need to either hijack a jump or find some free bytes for our own.  Luckily, we've got four useless bytes at 13BD.  All those do are store the number 6 in 8B. It's the only place in the ROM that does anything with 8B (our changes excepted, of course) so it's essentially useless.  We'll use those four bytes for our jump.</p>
		<pre>		 13BD: LDA #$01    ; 2 ; A9 01
		 13BF: ORA $DE     ; 2 ; 05 DE
		 13C1: STA $DE     ; 3 ; 85 DE
		 13C3: LDX #$07    ; 2 ; A2 07
		 13C5: LDY #$70    ; 2 ; A0 70
		 13C7: JSR $1341   ; 6 ; 20 41 F3
		 13CA: NOP         ; 2 ; EA
		</pre>
		<p>We'll want to take advantage of the LDX and LDY (which hold the number of points to score) to save a few bytes, so we'll just push everything before that up in to the four-byte hole we made at 13BD and add our jump.  Our jump only takes three bytes, so we'll fill that extra byte with a NOP.</p>
		<p>Finally, we can add our new score routine! The idea here is simple.  Assume from 13C5 and 13C7 that the candy we're munching is worth 770 points.  If E.T. is holding any candy, reduce that amount by one and change the points to score to 490.  Finally, check to see if the current candy is one of the candies collected after the 31st piece.  If so, add 1000 points to whatever we've planned to score and deduct 700 units of energy as the penalty. This matches the scoring described in the manual. The points will actually be added to the score after we return from our routine.</p>
		<pre>		 1341: LDA $D2      ; 2 ; A5 D2
		 1343: CMP #$0A     ; 2 ; C9 0A
		 1345: BEQ +8       ; 2 ; F0 08
		 1347: SBC 16       ; 3 ; E9 10
		 1349: STA $D2      ; 3 ; 85 D2
		 134B: LDX #$04     ; 2 ; A2 04
		 134D: LDY #$90     ; 2 ; A0 90
		 134F: LDA $DD      ; 2 ; A5 DD
		 1351: SED          ; 2 ; F8
		 1352: JMP $17E9    ; 6 ; 4C E9 F7
		 -----------------------------------
		 17E9: CMP #$1F     ; 2 ; C9 1F
		 17EB: BCC +10      ; 2 ; 90 0A
		 17ED: TXA          ; 2 ; 8A
		 17EE: ORA #$10     ; 2 ; 09 10
		 17EF: TAX          ; 2 ; AA
		 17F1: LDA $D3      ; 2 ; A5 D3
		 17F3: SBC 7        ; 3 ; E9 07
		 17F5: STA $D3      ; 3 ; 85 D3
		 17F7: CLD          ; 2 ; D8
		 17F8: RET          ; 6 ; 60
		</pre>
		
		<p>Now we need to update the code that starts a new round to keep it from scoring bonus points and issuing a penalty.  There is an additional problem, as the code that determines the energy penalty also sets E.T.'s energy to 9999 for the first round, we'll need to also modify the code that starts a new game or E.T. will start the game without any energy!</p>
		<p>Looking at the new game code at 13DC we initialize a lot of stuff to zero, including things that are set later or can be set later.  We won't need the STA $EB (ship status) as that's set later. We can also safely set DD, D9, and 94 (Elliot's candy, well flags, and E.T.'s neck height) at the start of each round. That'll free up a few bytes to set E.T.'s starting energy at the beginning of a new game.</p>
		<pre>		 13FD: LDA #$99     ; 2 ; A9 99
		 13FF: STA $D3      ; 3 ; 85 D3
		 1401: STA $D4      ; 3 ; 85 D4
		 1403: LDA #0       ; 2 ; A9 00
		 1405: STA $F4      ; 2 ; 85 F4
		 1407: STA $E3      ; 3 ; 85 E3
		</pre>

		<p>We'll also want to reset F4 (which holds the total candy collected used for our Ninja E.T. Easter Egg) so we'll include that  between the old 13FD and 13FF (now 1403 and 1407) that we pushed down to make room for our new code.</p>
		<p>We still need to set DD, D9, and 94 to 0 so we we'll do that at the start of a new round. (The new round code is also called when we start a new game.)  Everything from 147A to the jump at 14A2 is free for us to use, thanks to our new scoring routine.</p>
		<pre>		 
		 147A: LDA #$0      ; 2 ; A9 00
		 147C: STA $DD      ; 3 ; 85 DD
		 147E: STA $D9      ; 3 ; 85 D9
		 1480: STA $94      ; 3 ; 85 94
		</pre>

		<p>We also need to limit the amount of candy available in the next round so that our energy penalty doesn't "wrap around" and start deducting from the max again. Remember that DC holds the amount of candy that can appear in the next round.  We'll cap it off at 41 pieces, giving us potentially 38 to 45 pieces in the next round.  At 45 pieces our penalty will be (45-31)*700 or 9800.  Any more than that and E.T.'s energy would wrap to 9300.</p>
		<pre>		 1482: LDA #$29     ; 3 ; A5 29
		 1484: CMP $DC      ; 3 ; C5 DC
		 1486: BCS +2       ; 3 ; B0 02 
		 1488: STA $DC      ; 2 ; A5 DC
		 148A: JMP $14A5    ; 6 ; 4C A5 F4
		</pre>
		<p>Now scoring works exactly as stated in the manual.  There's just one thing left to do.</p>
		<a name="ninja"></a>
		<h3>Adding the Ninja E.T. Easter Egg</h3>
		<p>Ninja E.T. wasn't an intentional easter egg in the original game, it was a bug.  If you collected too much candy (most sources say 33 pieces) on the next round, E.T. would turn black and your energy would show part of H.S.W.'s initials and other junk.  This happens because a value other than 0-9 appears in the upper nibble in the upper part of E.T.'s energy, which will make the code "point" to the wrong image.  As E.T. changes color depending the amount of remaining energy, the color selected will be outside of the color table, which just happens to have a few 0's around it.  We'll take advantage of that to implement Ninja E.T. though we'll make sure that the energy counter doesn't look broken.</p>
		<p>With the scoring fixed, collecting 33 pieces of candy seems like a perfectly reasonable, and likely common, amount.  An easter egg shouldn't be triggered so easily.  Echoing the oft-cited trigger, we'll enable Ninja E.T. only if a player completes a round with both E.T. and Elliott in posession of exactly three candies.</p>
		<p>As a bonus, we'll give Ninja E.T. ten pieces of candy to make up for the previous candy-poor round.  It'll also let Ninja E.T. make a quick trade with Elliott for a phone part.</p>
		<pre>		 148A: LDA $F4     ; 2 ; A5 F4
		 148C: CMP $F5     ; 2 ; C5 F5
		 148E: BNE +12     ; 3 ; D0 0C
		 1490: CMP #$03    ; 2 ; C9 03
		 1492: BNE +8      ; 2 ; D0 08
		 1494: LDA #$AA    ; 2 ; A9 AA
		 1496: STA $D2     ; 3 ; 85 D2
		 1498: STA $D3     ; 3 ; 85 D3
		 149A: STA $D4     ; 3 ; 85 D4
		 149C: JMP $14A5   ; 6 ; 4C A5 F4
		 149F: NOP         ; 2 ; EA
		 14A0: NOP         ; 2 ; EA
		 14A1: NOP         ; 2 ; EA
		</pre>
		<p>Why AA?  That will both give Ninja E.T. 10 pieces of candy and make the energy counter appear to be empty.  As E.T. loses energy, the counter will return to normal, one digit at a time. When all four digits of the counter are back to normal, Ninja E.T. will also return to normal.</p>
	<br>
	<a name="newmode"></a>
	<h2>An Extra Game Mode</h2>
	<p>Players looking for additional challenge above game mode 3, but not quite as challenging as game mode 2 (with the nasty FBI Agent) have always felt left out.  AtariAge user roadrunner suggested that an extra game mode that included just the scientist would be a welcome addition.</p>
	<p>The various game modes remove humans by sending the Scientist or the FBI agent home repeatedly so that they don't appear in-game.  To allow an extra mode to be selected, we just need to change the maximum game mode from 3 to 4.  The game checks to see if the current mode is one higher than the maximum before setting the game mode back to 1, so we'll check to see if the the game mode is 5.  We'll also need to modify the check to send the scientist back home.  If we make the scientist only option game mode 3 and push the "no humans" option to game mode 4, we can check to see if we need to send the scientist home with an AND and by changing the branch instruction. Ultimately, it's a four-byte change.</p>
	<pre>	 0471: CPX #$05    ; 2 ; E0 05
	 --------------------------------------------
	 02ED: AND #$01    ; 2 ; 29 01
	 02EF: BEQ +9      ; 2 ; F0 09
	</pre>
	<br>

	<a name="allchanges"></a>
		<h2>All of the Final Changes</h2>
		<p>Here are all the final changes:</p>
		<pre>		---------------------------------------------
		- E.T. Fixed Final Version (NTSC) 2013-02-01
		---------------------------------------------

		-------------------------------------------
		- E.T. is Not Green                       
		-------------------------------------------
		 17FA: ET Colors   ; - ; FE FC F8 F8 F8
		 1DE8: Well BG     ; - ; 04

		-------------------------------------------
		- Difficulty Fix  (Walk, Run, Hover)     
		-------------------------------------------
		 0707: LDY $F8     ; 3 ; A4 F8
		 071B: LDY $F8     ; 3 ; A4 F8
		 0685: LDY $F8     ; 3 ; A4 F8
		 ------------------------------------------
		 0FEF: LDA SWCHB   ; 4 ; AD 82 02
		 0FF2: AND #$08    ; 2 ; 29 08
		 0FF4: JMP $BB4E   ; 6 ; 4C 4E BB
		 ------------------------------------------
		 0B4D: RTS         ; 6 ; 60
		 0B4E: LSR         ; 2 ; 4A 
		 0B4F: LSR         ; 2 ; 4A
		 0B50: LSR         ; 2 ; 4A
		 0B51: EOR #$01    ; 2 ; 49 01
		 0B53: STA $F8     ; 3 ; 85 F8
		 ------------------------------------------
		  - Hovering Sound Fix
		 ------------------------------------------
		 04F0: LDA $81     ; 3 ; A5 81
		 04F2: AND #$1E    ; 2 ; 29 1E

		-------------------------------------------
		- Falling Fix                            
		-------------------------------------------
		 002A: JMP $BBF6   ; 3 ; 4C F6 BB
		 0BF6: LDA $9C     ; 3 ; A5 9C
		 0BF8: ADC 07      ; 3 ; 69 07
		 0BFA: STA $F6     ; 3 ; 85 F6
		 0BFC: JMP $BCAB   ; 3 ; 4C AB BC
		 ------------------------------------------
		 1013: ORA $D9     ; 3 ; 05 D9
		 1015: ADC $E3     ; 3 ; 65 E3
		 1017: ADC $F6     ; 3 ; 65 F6
		 1019: STA $8B     ; 3 ; 85 8B
		 101B: JMP F04B    ; 3 ; 4C 4B F0
		 ------------------------------------------
		 101E: PHP         ; 3 ; 08
		 101F: CPX $8B     ; 3 ; E4 8B
		 1021: BNE +6      ; 2 ; D0 06
		 1023: BIT CXP1FB  ; 2 ; 24 13
		 1025: BVS +2      ; 2 ; 70 02
		 1027: STA CXCLR   ; 3 ; 85 2C
		 1029: CPX $9E     ; 3 ; E4 9E
		 102B: PHP         ; 3 ; 08
		 102C: INX         ; 2 ; E8
		 102D: LDY $86     ; 2 ; A4 86
		 102F: TXA         ; 2 ; 8A
		 -------------------------------------------
		 1034: STA WSYNC   ; 3 ; 85 02
		 1036: STY GRP1    ; 3 ; 84 1C
		 -------------------------------------------
		 1060: LDA $87     ; 3 ; A5 87
		 1062: STA GRP0    ; 3 ; 85 1B
		 1064: LDA $88     ; 3 ; A5 88
		 1066: STA COLUP0  ; 3 ; 85 06
		 1068: TXA         ; 2 ; 8A
		 1069: TAY         ; 2 ; A8
		 106A: LDA $BA, Y  ; 5 ; B1 BA
		 106C: STA PF1     ; 3 ; 85 0E
		 106E: LDA $BC, Y  ; 5 ; B1 BC
		 1070: STA PF2     ; 3 ; 85 0F
		 1072: CPX $9F     ; 3 ; E4 9F
		 1074: JMP F01E    ; 3 ; 4C 1E F0
		 -------------------------------------------
		 - Change Kernel Entry Point
		 -------------------------------------------
		 18F3: $F02F       ; - ; 2E F0
		 -------------------------------------------
		 - Landing / Launching Ship Position Fix        
		 -------------------------------------------
		 0B40: LDA #$EF    ; 2 ; A9 EF
		 07ED: SBC #$04    ; 2 ; E9 04
		 -------------------------------------------
		 - Move Candy on V Screen To Prevent Falls
		 -------------------------------------------
		 0BA5: 22          ; - ; 22
		 -------------------------------------------

		--------------------------------------------
		 - BUG FIXES
		--------------------------------------------
		 - Don't Fall Leaving Forest on Right
		 -------------------------------------------
		 0D54: 3A +10      ; - ; 4A
		 0D6C: 04 -3       ; - ; 01
		 -------------------------------------------
		 - Ship Shouldn't Crush Elliott 
		 -------------------------------------------
		 07BD: JMP $BAD9  ; 3 ; 4C D9 BA
		 -------------------------------------------

		-------------------------------------------
		- FIX SCORING TO MATCH MANUAL
		-------------------------------------------
		 058E: STA $F4     ; 3 ; 85 F4
		 0590: LDA $DD     ; 3 ; A5 DD
		 0592: STA $F5     ; 3 ; 85 F5
		 0594: ADC $F4     ; 3 ; 65 F4
		 0596: STA $DD     ; 3 ; 85 DD
		 0598: ADC 16      ; 3 ; 69 10
		 059A: NOP         ; 2 ; EA
		 059B: NOP         ; 2 ; EA
		 -------------------------------------------
		 1382: JMP 13A3 -6 ; 6 ; 4C 9D F3
		 -------------------------------------------
		 1395: LDA #$99    ; 2 ; A9 99
		 1397: STA $D3     ; 3 ; 85 D3
		 1399: STA $D4     ; 3 ; 85 D4
		 139B: BNE +9      ; 3 ; D0 09
		 139D: NOP         ; 2 ; EA
		 139E: NOP         ; 2 ; EA
		 139F: NOP         ; 2 ; EA
		 13A0: NOP         ; 2 ; EA
		 13A1: NOP         ; 2 ; EA
		 13A2: NOP         ; 2 ; EA
		 -------------------------------------------
		 - Score no points for remaining energy
		 - with the difficulty fix enabled (6 bytes)
		 -------------------------------------------
		 139D: LDA $F8     ; 3 ; A5 F8
		 139F: BNE +2      ; 2 ; D0 02
		 13A1: TAX         ; 2 ; AA
		 13A2: TAY         ; 2 ; A8
		 -------------------------------------------
		 13BD: LDA #$01    ; 2 ; A9 01
		 13BF: ORA $DE     ; 2 ; 05 DE
		 13C1: STA $DE     ; 3 ; 85 DE
		 13C3: LDX #$07    ; 2 ; A2 07
		 13C5: LDY #$70    ; 2 ; A0 70
		 13C7: JSR $1341   ; 6 ; 20 41 F3
		 13CA: NOP         ; 2 ; EA
		 -------------------------------------------
		 1341: LDA $D2     ; 2 ; A5 D2
		 1343: CMP #$0A    ; 2 ; C9 0A
		 1345: BEQ +8      ; 2 ; F0 08
		 1347: SBC 16      ; 3 ; E9 10
		 1349: STA $D2     ; 3 ; 85 D2
		 134B: LDX #$04    ; 2 ; A2 04
		 134D: LDY #$90    ; 2 ; A0 90
		 134F: LDA $DD     ; 2 ; A5 DD
		 1351: SED         ; 2 ; F8
		 1352: JMP $17E9   ; 6 ; 4C E9 F7
		 -------------------------------------------
		 17E9: CMP #$1F    ; 2 ; C9 1F
		 17EB: BCC +10     ; 2 ; 90 0A
		 17ED: TXA         ; 2 ; 8A
		 17EE: ORA #$10    ; 2 ; 09 10
		 17EF: TAX         ; 2 ; AA
		 17F1: LDA $D3     ; 2 ; A5 D3
		 17F3: SBC 7       ; 3 ; E9 07
		 17F5: STA $D3     ; 3 ; 85 D3
		 17F7: CLD         ; 2 ; D8
		 17F8: RET         ; 6 ; 60
		 ------------------------------------------
		 13FD: LDA #$99    ; 2 ; A9 99
		 13FF: STA $D3     ; 3 ; 85 D3
		 1401: STA $D4     ; 3 ; 85 D4
		 1403: LDA #0      ; 2 ; A9 00
		 1405: STA $F4     ; 2 ; 85 F4
		 1407: STA $E3     ; 3 ; 85 E3
		 ------------------------------------------		 
		 147A: LDA #$0     ; 2 ; A9 00
		 147C: STA $DD     ; 3 ; 85 DD
		 147E: STA $D9     ; 3 ; 85 D9
		 1480: STA $94     ; 3 ; 85 94
		 1482: LDA #$29    ; 3 ; A5 29
		 1484: CMP $DC     ; 3 ; C5 DC
		 1486: BCS +2      ; 3 ; B0 02 
		 1488: STA $DC     ; 2 ; A5 DC
		 148A: JMP $14A5   ; 6 ; 4C A5 F4
		-------------------------------------------

		-------------------------------------------
		- Easter Egg - Ninja E.T. 
		-------------------------------------------
		 148A: LDA $F4     ; 2 ; A5 F4
		 148C: CMP $F5     ; 2 ; C5 F5
		 148E: BNE +12     ; 3 ; D0 0C
		 1490: CMP #$03    ; 2 ; C9 03
		 1492: BNE +8      ; 2 ; D0 08
		 1494: LDA #$AA    ; 2 ; A9 AA
		 1496: STA $D2     ; 3 ; 85 D2
		 1498: STA $D3     ; 3 ; 85 D3
		 149A: STA $D4     ; 3 ; 85 D4
		 149C: JMP $14A5   ; 6 ; 4C A5 F4
		 149F: NOP         ; 2 ; EA
		 14A0: NOP         ; 2 ; EA
		 14A1: NOP         ; 2 ; EA
		--------------------------------------------

		--------------------------------------------
		 - Add Extra Game Option - Scientist Only
		--------------------------------------------
		 0471: CPX #$05    ; 2 ; E0 05
		--------------------------------------------
		 02ED: AND #$01    ; 2 ; 29 01
		 02EF: BEQ +9      ; 2 ; F0 09
		--------------------------------------------

		</pre>
	<br>

	<a name="theend"></a>
	<h2>Conclusion</h2>
	<p>It turns out that E.T. isn't a bad game after all.  With a few simple changes we were able to dramatically improve an already good game by eliminating the most common complaints.  With a few additional changes, we were able to clear up any confusion for players who care about the score, and were confused by the differences between what the manual claims and what actually happens in-game.  Next time someone tells you that "E.T. for the Atari 2600 is the worst game ever made" you can tell them that this is not the case. It's been fixed, and you know how.</p>

<hr>
<a href="http://www.neocomputer.org/projects">Home</a> - Published: January 2013 - Last modified: April 2023

<!-- Global site tag (gtag.js) - Google Analytics -->


<!-- /Google -->





</div>]]></description>
        </item>
    </channel>
</rss>